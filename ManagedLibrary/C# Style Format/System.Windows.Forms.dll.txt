internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal System.MonoToolsLocator : object {
public string Mono
public string McsCSharpCompiler
public string VBCompiler
public string AssemblyLinker
private UInt32 GetModuleFileName(IntPtr hModule, StringBuilder lpFilename, int nSize)
}
internal System.MWFCategoryAttribute : CategoryAttribute {
public void .ctor(string category)
protected string GetLocalizedString(string value)
}
internal System.MWFDescriptionAttribute : DescriptionAttribute {
public string Description
public void .ctor(string category)
public string get_Description()
}
internal System.Resources.AssemblyNamesTypeResolutionService : object {
public void .ctor(AssemblyName[] names)
public Assembly GetAssembly(AssemblyName name)
public Assembly GetAssembly(AssemblyName name, bool throwOnError)
public Type GetType(string name)
public Type GetType(string name, bool throwOnError)
public Type GetType(string name, bool throwOnError, bool ignoreCase)
public void ReferenceAssembly(AssemblyName name)
public string GetPathOfAssembly(AssemblyName name)
}
internal System.Resources.ByteArrayFromResXHandler : ResXDataNodeHandler {
private string dataString
public string DataString
public void .ctor(string data)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public string get_DataString()
}
internal System.Resources.FileRefHandler : ResXDataNodeHandler {
private ResXFileRef resXFileRef
public void .ctor(ResXFileRef fileRef)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
private object GetValue()
}
internal System.Resources.InMemoryHandler : ResXDataNodeHandler {
private object value
public void .ctor(object valueObject)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
}
internal System.Resources.IWritableHandler {
public string DataString
public string get_DataString()
}
internal System.Resources.NullRefHandler : ResXDataNodeHandler {
private string dataString
public string DataString
public void .ctor(string _dataString)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public string get_DataString()
}
public System.Resources.ResXDataNode : object {
private string name
private ResXFileRef fileRef
private string comment
private Point pos
internal ResXDataNodeHandler handler
private string <MimeType>k__BackingField
private string <Type>k__BackingField
public string Comment
public ResXFileRef FileRef
public string Name
internal bool IsWritable
internal string MimeType
internal string Type
internal string DataString
public string get_Comment()
public void set_Comment(string value)
public ResXFileRef get_FileRef()
public string get_Name()
public void set_Name(string value)
internal bool get_IsWritable()
internal string get_MimeType()
internal void set_MimeType(string value)
internal string get_Type()
internal void set_Type(string value)
internal string get_DataString()
public void .ctor(string name, object value)
public void .ctor(string name, ResXFileRef fileRef)
internal void .ctor(string name, object value, Point position)
internal void .ctor(string nameAtt, string mimeTypeAtt, string typeAtt, string dataString, string commentString, Point position, string basePath)
public Point GetNodePosition()
public string GetValueTypeName(AssemblyName[] names)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] names)
public object GetValue(ITypeResolutionService typeResolver)
private ResXFileRef BuildFileRef(string dataString, string basePath)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
}
internal System.Resources.ResXDataNodeHandler : object {
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public object GetValueForResX()
protected Type ResolveType(string typeString)
protected Type ResolveType(string typeString, AssemblyName[] assemblyNames)
protected Type ResolveType(string typeString, ITypeResolutionService typeResolver)
}
public System.Resources.ResXFileRef : object {
private string filename
private string typename
private Encoding textFileEncoding
public string FileName
public Encoding TextFileEncoding
public string TypeName
public void .ctor(string fileName, string typeName)
public void .ctor(string fileName, string typeName, Encoding textFileEncoding)
public string get_FileName()
public Encoding get_TextFileEncoding()
public string get_TypeName()
public string ToString()
internal String[] Parse(string fileRef)
}
public System.Resources.ResXResourceReader : object {
private string fileName
private Stream stream
private TextReader reader
private OrderedDictionary hasht
private ITypeResolutionService typeresolver
private XmlTextReader xmlReader
private string basepath
private bool useResXDataNodes
private AssemblyName[] assemblyNames
private OrderedDictionary hashtm
public string BasePath
public bool UseResXDataNodes
public void .ctor(Stream stream)
public void .ctor(Stream stream, ITypeResolutionService typeResolver)
public void .ctor(string fileName)
public void .ctor(string fileName, ITypeResolutionService typeResolver)
public void .ctor(TextReader reader)
public void .ctor(TextReader reader, ITypeResolutionService typeResolver)
public void .ctor(Stream stream, AssemblyName[] assemblyNames)
public void .ctor(string fileName, AssemblyName[] assemblyNames)
public void .ctor(TextReader reader, AssemblyName[] assemblyNames)
protected void Finalize()
public string get_BasePath()
public void set_BasePath(string value)
public bool get_UseResXDataNodes()
public void set_UseResXDataNodes(bool value)
private void LoadData()
private void ParseHeaderNode(ResXHeader header)
private string GetHeaderValue()
private string GetAttribute(string name)
private string GetDataValue(bool meta, String& comment)
private void ParseDataNode(bool meta)
public void Close()
public IDictionaryEnumerator GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private void System.IDisposable.Dispose()
protected void Dispose(bool disposing)
public ResXResourceReader FromFileContents(string fileContents)
public ResXResourceReader FromFileContents(string fileContents, ITypeResolutionService typeResolver)
public ResXResourceReader FromFileContents(string fileContents, AssemblyName[] assemblyNames)
public IDictionaryEnumerator GetMetadataEnumerator()
}
public System.Resources.ResXResourceSet : ResourceSet {
public void .ctor(Stream stream)
public void .ctor(string fileName)
public Type GetDefaultReader()
public Type GetDefaultWriter()
}
public System.Resources.ResXResourceWriter : object {
private string filename
private Stream stream
private TextWriter textwriter
private XmlTextWriter writer
private bool written
private string base_path
public string BinSerializedObjectMimeType
public string ByteArraySerializedObjectMimeType
public string DefaultSerializedObjectMimeType
public string ResMimeType
public string ResourceSchema
public string SoapSerializedObjectMimeType
public string Version
private string schema
public string BasePath
public void .ctor(Stream stream)
public void .ctor(TextWriter textWriter)
public void .ctor(string fileName)
protected void Finalize()
private void InitWriter()
private void WriteHeader(string name, string value)
private void WriteNiceBase64(Byte[] value, int offset, int length)
private void WriteBytes(string name, Type type, Byte[] value, int offset, int length)
private void WriteBytes(string name, Type type, Byte[] value, int offset, int length, string comment)
private void WriteBytes(string name, Type type, Byte[] value, string comment)
private void WriteString(string name, string value)
private void WriteString(string name, string value, Type type)
private void WriteString(string name, string value, Type type, string comment)
public void AddResource(string name, Byte[] value)
public void AddResource(string name, object value)
private void AddResource(string name, object value, string comment)
public void AddResource(string name, string value)
private void AddResource(string name, string value, string comment)
public void AddAlias(string aliasName, AssemblyName assemblyName)
public void AddResource(ResXDataNode node)
private ResXFileRef ProcessFileRefBasePath(ResXFileRef fileRef)
private bool IsSeparator(char ch)
private string AbsoluteToRelativePath(string baseDirectoryPath, string absPath)
private void WriteWritableNode(ResXDataNode node)
public void AddMetadata(string name, string value)
public void AddMetadata(string name, Byte[] value)
public void AddMetadata(string name, object value)
public void Close()
public void Dispose()
public void Generate()
protected void Dispose(bool disposing)
public string get_BasePath()
public void set_BasePath(string value)
}
internal System.Resources.SerializedFromResXHandler : ResXDataNodeHandler {
private string dataString
private string mime_type
private CustomBinder binder
public string DataString
public void .ctor(string data, string _mime_type)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public string get_DataString()
private string InternalGetValueType(ITypeResolutionService typeResolver)
private object DeserializeObject(ITypeResolutionService typeResolver)
}
internal System.Resources.TypeConverterFromResXHandler : ResXDataNodeHandler {
private string dataString
private string mime_type
private string typeString
public string DataString
public void .ctor(string data, string _mime_type, string _typeString)
public object GetValue(ITypeResolutionService typeResolver)
public object GetValue(AssemblyName[] assemblyNames)
public string GetValueTypeName(ITypeResolutionService typeResolver)
public string GetValueTypeName(AssemblyName[] assemblyNames)
public string get_DataString()
private object ConvertData(TypeConverter c)
}
public System.Windows.Forms.AccessibleEvents : Enum {
public int value__
public AccessibleEvents SystemSound
public AccessibleEvents SystemAlert
public AccessibleEvents SystemForeground
public AccessibleEvents SystemMenuStart
public AccessibleEvents SystemMenuEnd
public AccessibleEvents SystemMenuPopupStart
public AccessibleEvents SystemMenuPopupEnd
public AccessibleEvents SystemCaptureStart
public AccessibleEvents SystemCaptureEnd
public AccessibleEvents SystemMoveSizeStart
public AccessibleEvents SystemMoveSizeEnd
public AccessibleEvents SystemContextHelpStart
public AccessibleEvents SystemContextHelpEnd
public AccessibleEvents SystemDragDropStart
public AccessibleEvents SystemDragDropEnd
public AccessibleEvents SystemDialogStart
public AccessibleEvents SystemDialogEnd
public AccessibleEvents SystemScrollingStart
public AccessibleEvents SystemScrollingEnd
public AccessibleEvents SystemSwitchStart
public AccessibleEvents SystemSwitchEnd
public AccessibleEvents SystemMinimizeStart
public AccessibleEvents SystemMinimizeEnd
public AccessibleEvents Create
public AccessibleEvents Destroy
public AccessibleEvents Show
public AccessibleEvents Hide
public AccessibleEvents Reorder
public AccessibleEvents Focus
public AccessibleEvents Selection
public AccessibleEvents SelectionAdd
public AccessibleEvents SelectionRemove
public AccessibleEvents SelectionWithin
public AccessibleEvents StateChange
public AccessibleEvents LocationChange
public AccessibleEvents NameChange
public AccessibleEvents DescriptionChange
public AccessibleEvents ValueChange
public AccessibleEvents ParentChange
public AccessibleEvents HelpChange
public AccessibleEvents DefaultActionChange
public AccessibleEvents AcceleratorChange
}
public System.Windows.Forms.AccessibleNavigation : Enum {
public int value__
public AccessibleNavigation Up
public AccessibleNavigation Down
public AccessibleNavigation Left
public AccessibleNavigation Right
public AccessibleNavigation Next
public AccessibleNavigation Previous
public AccessibleNavigation FirstChild
public AccessibleNavigation LastChild
}
public System.Windows.Forms.AccessibleObject : StandardOleMarshalObject {
internal string name
internal string value
internal Control owner
internal AccessibleRole role
internal AccessibleStates state
internal string default_action
internal string description
internal string help
internal string keyboard_shortcut
public Rectangle Bounds
public string DefaultAction
public string Description
public string Help
public string KeyboardShortcut
public string Name
public AccessibleObject Parent
public AccessibleRole Role
public AccessibleStates State
public string Value
private Type System.Reflection.IReflect.UnderlyingSystemType
private int Accessibility.IAccessible.accChildCount
private object Accessibility.IAccessible.accFocus
private object Accessibility.IAccessible.accParent
private object Accessibility.IAccessible.accSelection
internal void .ctor(Control owner)
public Rectangle get_Bounds()
public string get_DefaultAction()
public string get_Description()
public string get_Help()
public string get_KeyboardShortcut()
public string get_Name()
public void set_Name(string value)
public AccessibleObject get_Parent()
public AccessibleRole get_Role()
public AccessibleStates get_State()
public string get_Value()
public void set_Value(string value)
public void DoDefaultAction()
public AccessibleObject GetChild(int index)
public int GetChildCount()
public AccessibleObject GetFocused()
public int GetHelpTopic(String& fileName)
public AccessibleObject GetSelected()
public AccessibleObject HitTest(int x, int y)
public AccessibleObject Navigate(AccessibleNavigation navdir)
public void Select(AccessibleSelection flags)
protected void UseStdAccessibleObjects(IntPtr handle)
protected void UseStdAccessibleObjects(IntPtr handle, int objid)
internal AccessibleObject FindFocusControl(Control parent)
internal AccessibleObject FindSelectedControl(Control parent)
internal Control FindHittestControl(Control parent, int x, int y)
private FieldInfo System.Reflection.IReflect.GetField(string name, BindingFlags bindingAttr)
private FieldInfo[] System.Reflection.IReflect.GetFields(BindingFlags bindingAttr)
private MemberInfo[] System.Reflection.IReflect.GetMember(string name, BindingFlags bindingAttr)
private MemberInfo[] System.Reflection.IReflect.GetMembers(BindingFlags bindingAttr)
private MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr)
private MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
private MethodInfo[] System.Reflection.IReflect.GetMethods(BindingFlags bindingAttr)
private PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr)
private PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
private PropertyInfo[] System.Reflection.IReflect.GetProperties(BindingFlags bindingAttr)
private object System.Reflection.IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters)
private Type System.Reflection.IReflect.get_UnderlyingSystemType()
private void Accessibility.IAccessible.accDoDefaultAction(object childID)
private int Accessibility.IAccessible.get_accChildCount()
private object Accessibility.IAccessible.get_accFocus()
private object Accessibility.IAccessible.accHitTest(int xLeft, int yTop)
private void Accessibility.IAccessible.accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object childID)
private object Accessibility.IAccessible.accNavigate(int navDir, object childID)
private object Accessibility.IAccessible.get_accParent()
private void Accessibility.IAccessible.accSelect(int flagsSelect, object childID)
private object Accessibility.IAccessible.get_accSelection()
private object Accessibility.IAccessible.get_accChild(object childID)
private string Accessibility.IAccessible.get_accDefaultAction(object childID)
private string Accessibility.IAccessible.get_accDescription(object childID)
private string Accessibility.IAccessible.get_accHelp(object childID)
private int Accessibility.IAccessible.get_accHelpTopic(String& pszHelpFile, object childID)
private string Accessibility.IAccessible.get_accKeyboardShortcut(object childID)
private string Accessibility.IAccessible.get_accName(object childID)
private object Accessibility.IAccessible.get_accRole(object childID)
private object Accessibility.IAccessible.get_accState(object childID)
private string Accessibility.IAccessible.get_accValue(object childID)
private void Accessibility.IAccessible.set_accName(object childID, string newName)
private void Accessibility.IAccessible.set_accValue(object childID, string newValue)
}
public System.Windows.Forms.AccessibleRole : Enum {
public int value__
public AccessibleRole None
public AccessibleRole TitleBar
public AccessibleRole MenuBar
public AccessibleRole ScrollBar
public AccessibleRole Grip
public AccessibleRole Sound
public AccessibleRole Cursor
public AccessibleRole Caret
public AccessibleRole Alert
public AccessibleRole Window
public AccessibleRole Client
public AccessibleRole MenuPopup
public AccessibleRole MenuItem
public AccessibleRole ToolTip
public AccessibleRole Application
public AccessibleRole Document
public AccessibleRole Pane
public AccessibleRole Chart
public AccessibleRole Dialog
public AccessibleRole Border
public AccessibleRole Grouping
public AccessibleRole Separator
public AccessibleRole ToolBar
public AccessibleRole StatusBar
public AccessibleRole Table
public AccessibleRole ColumnHeader
public AccessibleRole RowHeader
public AccessibleRole Column
public AccessibleRole Row
public AccessibleRole Cell
public AccessibleRole Link
public AccessibleRole HelpBalloon
public AccessibleRole Character
public AccessibleRole List
public AccessibleRole ListItem
public AccessibleRole Outline
public AccessibleRole OutlineItem
public AccessibleRole PageTab
public AccessibleRole PropertyPage
public AccessibleRole Indicator
public AccessibleRole Graphic
public AccessibleRole StaticText
public AccessibleRole Text
public AccessibleRole PushButton
public AccessibleRole CheckButton
public AccessibleRole RadioButton
public AccessibleRole ComboBox
public AccessibleRole DropList
public AccessibleRole ProgressBar
public AccessibleRole Dial
public AccessibleRole HotkeyField
public AccessibleRole Slider
public AccessibleRole SpinButton
public AccessibleRole Diagram
public AccessibleRole Animation
public AccessibleRole Equation
public AccessibleRole ButtonDropDown
public AccessibleRole ButtonMenu
public AccessibleRole ButtonDropDownGrid
public AccessibleRole WhiteSpace
public AccessibleRole PageTabList
public AccessibleRole Clock
public AccessibleRole Default
public AccessibleRole SplitButton
public AccessibleRole IpAddress
public AccessibleRole OutlineButton
}
public System.Windows.Forms.AccessibleSelection : Enum {
public int value__
public AccessibleSelection None
public AccessibleSelection TakeFocus
public AccessibleSelection TakeSelection
public AccessibleSelection ExtendSelection
public AccessibleSelection AddSelection
public AccessibleSelection RemoveSelection
}
public System.Windows.Forms.AccessibleStates : Enum {
public int value__
public AccessibleStates None
public AccessibleStates Unavailable
public AccessibleStates Selected
public AccessibleStates Focused
public AccessibleStates Pressed
public AccessibleStates Checked
public AccessibleStates Mixed
public AccessibleStates Indeterminate
public AccessibleStates ReadOnly
public AccessibleStates HotTracked
public AccessibleStates Default
public AccessibleStates Expanded
public AccessibleStates Collapsed
public AccessibleStates Busy
public AccessibleStates Floating
public AccessibleStates Marqueed
public AccessibleStates Animated
public AccessibleStates Invisible
public AccessibleStates Offscreen
public AccessibleStates Sizeable
public AccessibleStates Moveable
public AccessibleStates SelfVoicing
public AccessibleStates Focusable
public AccessibleStates Selectable
public AccessibleStates Linked
public AccessibleStates Traversed
public AccessibleStates MultiSelectable
public AccessibleStates ExtSelectable
public AccessibleStates AlertLow
public AccessibleStates AlertMedium
public AccessibleStates AlertHigh
public AccessibleStates Protected
public AccessibleStates Valid
public AccessibleStates HasPopup
}
internal System.Windows.Forms.AlertType : Enum {
public int value__
public AlertType Default
public AlertType Error
public AlertType Question
public AlertType Warning
public AlertType Information
}
public System.Windows.Forms.AmbientProperties : object {
private Color fore_color
private Color back_color
private Font font
private Cursor cursor
public Color BackColor
public Cursor Cursor
public Font Font
public Color ForeColor
public Color get_BackColor()
public void set_BackColor(Color value)
public Cursor get_Cursor()
public void set_Cursor(Cursor value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
}
public System.Windows.Forms.AnchorStyles : Enum {
public int value__
public AnchorStyles None
public AnchorStyles Top
public AnchorStyles Bottom
public AnchorStyles Left
public AnchorStyles Right
}
public System.Windows.Forms.Appearance : Enum {
public int value__
public Appearance Normal
public Appearance Button
}
public System.Windows.Forms.Application : object {
private bool browser_embedded
private InputLanguage input_language
private string safe_caption_format
private ArrayList message_filters
private FormCollection forms
private bool use_wait_cursor
private ToolStrip keyboard_capture
private VisualStyleState visual_style_state
private bool visual_styles_enabled
internal bool use_compatible_text_rendering
private EventHandler ApplicationExit
private EventHandler ThreadExit
private ThreadExceptionEventHandler ThreadException
private EventHandler FormAdded
private EventHandler PreRun
private EventHandler EnterThreadModal
private EventHandler LeaveThreadModal
public bool AllowQuit
public string CommonAppDataPath
public RegistryKey CommonAppDataRegistry
public string CompanyName
public CultureInfo CurrentCulture
public InputLanguage CurrentInputLanguage
public string ExecutablePath
public string LocalUserAppDataPath
public bool MessageLoop
public string ProductName
public string ProductVersion
public string SafeTopLevelCaptionFormat
public string StartupPath
public string UserAppDataPath
public RegistryKey UserAppDataRegistry
public bool UseWaitCursor
public bool RenderWithVisualStyles
public VisualStyleState VisualStyleState
public FormCollection OpenForms
internal ToolStrip KeyboardCapture
internal bool VisualStylesEnabled
private void InitializeUIAutomation()
internal void CloseForms(Thread thread)
public bool get_AllowQuit()
public string get_CommonAppDataPath()
public RegistryKey get_CommonAppDataRegistry()
public string get_CompanyName()
public CultureInfo get_CurrentCulture()
public void set_CurrentCulture(CultureInfo value)
public InputLanguage get_CurrentInputLanguage()
public void set_CurrentInputLanguage(InputLanguage value)
public string get_ExecutablePath()
public string get_LocalUserAppDataPath()
public bool get_MessageLoop()
public string get_ProductName()
public string get_ProductVersion()
public string get_SafeTopLevelCaptionFormat()
public void set_SafeTopLevelCaptionFormat(string value)
public string get_StartupPath()
public string get_UserAppDataPath()
public RegistryKey get_UserAppDataRegistry()
public bool get_UseWaitCursor()
public void set_UseWaitCursor(bool value)
public bool get_RenderWithVisualStyles()
public VisualStyleState get_VisualStyleState()
public void set_VisualStyleState(VisualStyleState value)
public void AddMessageFilter(IMessageFilter value)
internal void AddKeyFilter(IKeyFilter value)
public void DoEvents()
public void EnableVisualStyles()
public bool FilterMessage(Message& message)
public void SetCompatibleTextRenderingDefault(bool defaultValue)
public FormCollection get_OpenForms()
public void RegisterMessageLoop(MessageLoopCallback callback)
public bool SetSuspendState(PowerState state, bool force, bool disableWakeEvent)
public void SetUnhandledExceptionMode(UnhandledExceptionMode mode)
public void SetUnhandledExceptionMode(UnhandledExceptionMode mode, bool threadScope)
public void UnregisterMessageLoop()
public void RaiseIdle(EventArgs e)
public void Restart()
public void Exit()
public void Exit(CancelEventArgs e)
public void ExitThread()
public ApartmentState OleRequired()
public void OnThreadException(Exception t)
public void RemoveMessageFilter(IMessageFilter value)
public void Run()
public void Run(Form mainForm)
internal void FirePreRun()
public void Run(ApplicationContext context)
private void DisableFormsForModalLoop(Queue toplevels, ApplicationContext context)
private void EnableFormsForModalLoop(Queue toplevels, ApplicationContext context)
internal void RunLoop(bool Modal, ApplicationContext context)
public void add_ApplicationExit(EventHandler value)
public void remove_ApplicationExit(EventHandler value)
public void add_Idle(EventHandler value)
public void remove_Idle(EventHandler value)
public void add_ThreadExit(EventHandler value)
public void remove_ThreadExit(EventHandler value)
public void add_ThreadException(ThreadExceptionEventHandler value)
public void remove_ThreadException(ThreadExceptionEventHandler value)
internal void add_FormAdded(EventHandler value)
internal void remove_FormAdded(EventHandler value)
internal void add_PreRun(EventHandler value)
internal void remove_PreRun(EventHandler value)
public void add_EnterThreadModal(EventHandler value)
public void remove_EnterThreadModal(EventHandler value)
public void add_LeaveThreadModal(EventHandler value)
public void remove_LeaveThreadModal(EventHandler value)
internal ToolStrip get_KeyboardCapture()
internal void set_KeyboardCapture(ToolStrip value)
internal bool get_VisualStylesEnabled()
internal void AddForm(Form f)
internal void RemoveForm(Form f)
private bool ControlOnToolStrip(Control c)
private string CreateDataPath(string basePath)
}
public System.Windows.Forms.ApplicationContext : object {
private Form main_form
private object tag
private bool thread_exit_raised
private EventHandler ThreadExit
public Form MainForm
public object Tag
public void .ctor(Form mainForm)
protected void Finalize()
public Form get_MainForm()
public void set_MainForm(Form value)
public object get_Tag()
public void set_Tag(object value)
public void Dispose()
public void ExitThread()
protected void Dispose(bool disposing)
protected void ExitThreadCore()
protected void OnMainFormClosed(object sender, EventArgs e)
public void add_ThreadExit(EventHandler value)
public void remove_ThreadExit(EventHandler value)
}
public System.Windows.Forms.ArrangeDirection : Enum {
public int value__
public ArrangeDirection Left
public ArrangeDirection Right
public ArrangeDirection Down
public ArrangeDirection Up
}
public System.Windows.Forms.ArrangeStartingPosition : Enum {
public int value__
public ArrangeStartingPosition BottomLeft
public ArrangeStartingPosition BottomRight
public ArrangeStartingPosition TopLeft
public ArrangeStartingPosition TopRight
public ArrangeStartingPosition Hide
}
public System.Windows.Forms.ArrowDirection : Enum {
public int value__
public ArrowDirection Left
public ArrowDirection Up
public ArrowDirection Right
public ArrowDirection Down
}
internal System.Windows.Forms.AsyncMethodData : object {
public IntPtr Handle
public Delegate Method
public Object[] Args
public AsyncMethodResult Result
public ExecutionContext Context
public SynchronizationContext SyncContext
}
internal System.Windows.Forms.AsyncMethodResult : object {
private ManualResetEvent handle
private object state
private bool completed
private object return_value
private Exception exception
public WaitHandle AsyncWaitHandle
public object AsyncState
public bool CompletedSynchronously
public bool IsCompleted
public WaitHandle get_AsyncWaitHandle()
public object get_AsyncState()
public void set_AsyncState(object value)
public bool get_CompletedSynchronously()
public bool get_IsCompleted()
public object EndInvoke()
public void Complete(object result)
public void CompleteWithException(Exception ex)
}
internal System.Windows.Forms.Atom : Enum {
public int value__
public Atom AnyPropertyType
public Atom XA_PRIMARY
public Atom XA_SECONDARY
public Atom XA_ARC
public Atom XA_ATOM
public Atom XA_BITMAP
public Atom XA_CARDINAL
public Atom XA_COLORMAP
public Atom XA_CURSOR
public Atom XA_CUT_BUFFER0
public Atom XA_CUT_BUFFER1
public Atom XA_CUT_BUFFER2
public Atom XA_CUT_BUFFER3
public Atom XA_CUT_BUFFER4
public Atom XA_CUT_BUFFER5
public Atom XA_CUT_BUFFER6
public Atom XA_CUT_BUFFER7
public Atom XA_DRAWABLE
public Atom XA_FONT
public Atom XA_INTEGER
public Atom XA_PIXMAP
public Atom XA_POINT
public Atom XA_RECTANGLE
public Atom XA_RESOURCE_MANAGER
public Atom XA_RGB_COLOR_MAP
public Atom XA_RGB_BEST_MAP
public Atom XA_RGB_BLUE_MAP
public Atom XA_RGB_DEFAULT_MAP
public Atom XA_RGB_GRAY_MAP
public Atom XA_RGB_GREEN_MAP
public Atom XA_RGB_RED_MAP
public Atom XA_STRING
public Atom XA_VISUALID
public Atom XA_WINDOW
public Atom XA_WM_COMMAND
public Atom XA_WM_HINTS
public Atom XA_WM_CLIENT_MACHINE
public Atom XA_WM_ICON_NAME
public Atom XA_WM_ICON_SIZE
public Atom XA_WM_NAME
public Atom XA_WM_NORMAL_HINTS
public Atom XA_WM_SIZE_HINTS
public Atom XA_WM_ZOOM_HINTS
public Atom XA_MIN_SPACE
public Atom XA_NORM_SPACE
public Atom XA_MAX_SPACE
public Atom XA_END_SPACE
public Atom XA_SUPERSCRIPT_X
public Atom XA_SUPERSCRIPT_Y
public Atom XA_SUBSCRIPT_X
public Atom XA_SUBSCRIPT_Y
public Atom XA_UNDERLINE_POSITION
public Atom XA_UNDERLINE_THICKNESS
public Atom XA_STRIKEOUT_ASCENT
public Atom XA_STRIKEOUT_DESCENT
public Atom XA_ITALIC_ANGLE
public Atom XA_X_HEIGHT
public Atom XA_QUAD_WIDTH
public Atom XA_WEIGHT
public Atom XA_POINT_SIZE
public Atom XA_RESOLUTION
public Atom XA_COPYRIGHT
public Atom XA_NOTICE
public Atom XA_FONT_NAME
public Atom XA_FAMILY_NAME
public Atom XA_FULL_NAME
public Atom XA_CAP_HEIGHT
public Atom XA_WM_CLASS
public Atom XA_WM_TRANSIENT_FOR
public Atom XA_LAST_PREDEFINED
}
public System.Windows.Forms.AutoCompleteMode : Enum {
public int value__
public AutoCompleteMode None
public AutoCompleteMode Suggest
public AutoCompleteMode Append
public AutoCompleteMode SuggestAppend
}
public System.Windows.Forms.AutoCompleteSource : Enum {
public int value__
public AutoCompleteSource FileSystem
public AutoCompleteSource HistoryList
public AutoCompleteSource RecentlyUsedList
public AutoCompleteSource AllUrl
public AutoCompleteSource AllSystemSources
public AutoCompleteSource FileSystemDirectories
public AutoCompleteSource CustomSource
public AutoCompleteSource None
public AutoCompleteSource ListItems
}
public System.Windows.Forms.AutoCompleteStringCollection : object {
private ArrayList list
private CollectionChangeEventHandler CollectionChanged
public int Count
public bool IsSynchronized
public object SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
public bool IsReadOnly
private object System.Collections.IList.Item
public string Item
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
protected void OnCollectionChanged(CollectionChangeEventArgs e)
public IEnumerator GetEnumerator()
private void System.Collections.ICollection.CopyTo(Array array, int index)
public void CopyTo(String[] array, int index)
public int get_Count()
public bool get_IsSynchronized()
public object get_SyncRoot()
private int System.Collections.IList.Add(object value)
public int Add(string value)
public void AddRange(String[] value)
public void Clear()
private bool System.Collections.IList.Contains(object value)
public bool Contains(string value)
private int System.Collections.IList.IndexOf(object value)
public int IndexOf(string value)
private void System.Collections.IList.Insert(int index, object value)
public void Insert(int index, string value)
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
public bool get_IsReadOnly()
private void System.Collections.IList.Remove(object value)
public void Remove(string value)
public void RemoveAt(int index)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public string get_Item(int index)
public void set_Item(int index, string value)
}
public System.Windows.Forms.AutoScaleMode : Enum {
public int value__
public AutoScaleMode None
public AutoScaleMode Font
public AutoScaleMode Dpi
public AutoScaleMode Inherit
}
public System.Windows.Forms.AutoSizeMode : Enum {
public int value__
public AutoSizeMode GrowAndShrink
public AutoSizeMode GrowOnly
}
public System.Windows.Forms.AutoValidate : Enum {
public int value__
public AutoValidate Inherit
public AutoValidate Disable
public AutoValidate EnablePreventFocusChange
public AutoValidate EnableAllowFocusChange
}
public System.Windows.Forms.AxHost : Control {
private Guid clsid
private object instance
private AboutBoxDelegate aboutDelegate
private State ocxState
private bool runningOnWindows
private Guid IID_IUnknown
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public ContainerControl ContainingControl
public ContextMenu ContextMenu
public Cursor Cursor
public bool EditMode
public bool Enabled
public Font Font
public Color ForeColor
public bool HasAboutBox
public ImeMode ImeMode
public State OcxState
public bool RightToLeft
public ISite Site
public string Text
protected CreateParams CreateParams
protected Size DefaultSize
internal bool IsRunningOnWindows
protected void .ctor(string clsid)
protected void .ctor(string clsid, int flags)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public ContainerControl get_ContainingControl()
public void set_ContainingControl(ContainerControl value)
public ContextMenu get_ContextMenu()
public void set_ContextMenu(ContextMenu value)
public Cursor get_Cursor()
public void set_Cursor(Cursor value)
public bool get_EditMode()
public bool get_Enabled()
public void set_Enabled(bool value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_HasAboutBox()
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public State get_OcxState()
public void set_OcxState(State value)
public bool get_RightToLeft()
public void set_RightToLeft(bool value)
public void set_Site(ISite value)
public string get_Text()
public void set_Text(string value)
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
protected Color GetColorFromOleColor(UInt32 color)
protected Font GetFontFromIFont(object font)
protected Font GetFontFromIFontDisp(object font)
protected object GetIFontDispFromFont(Font font)
protected object GetIFontFromFont(Font font)
protected object GetIPictureDispFromPicture(Image image)
protected object GetIPictureFromCursor(Cursor cursor)
protected object GetIPictureFromPicture(Image image)
protected double GetOADateFromTime(DateTime time)
protected UInt32 GetOleColorFromColor(Color color)
protected Image GetPictureFromIPicture(object picture)
protected Image GetPictureFromIPictureDisp(object picture)
protected DateTime GetTimeFromOADate(double date)
public void BeginInit()
public void DoVerb(int verb)
public void EndInit()
public object GetOcx()
public bool HasPropertyPages()
public void InvokeEditMode()
public void MakeDirty()
public bool PreProcessMessage(Message& msg)
public void ShowAboutBox()
public void ShowPropertyPages()
public void ShowPropertyPages(Control control)
protected void AttachInterfaces()
protected void CreateHandle()
private void GetActiveXInstance()
protected object CreateInstanceCore(Guid clsid)
protected void CreateSink()
protected void DestroyHandle()
protected void DetachSink()
protected void Dispose(bool disposing)
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds)
protected Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified)
protected bool IsInputChar(char charCode)
protected void OnBackColorChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnInPlaceActive()
protected void OnLostFocus(EventArgs e)
protected bool ProcessDialogKey(Keys keyData)
protected bool ProcessMnemonic(char charCode)
protected bool PropsValid()
protected void RaiseOnMouseDown(short button, short shift, int x, int y)
protected void RaiseOnMouseDown(short button, short shift, float x, float y)
protected void RaiseOnMouseDown(object o1, object o2, object o3, object o4)
protected void RaiseOnMouseMove(short button, short shift, int x, int y)
protected void RaiseOnMouseMove(short button, short shift, float x, float y)
protected void RaiseOnMouseMove(object o1, object o2, object o3, object o4)
protected void RaiseOnMouseUp(short button, short shift, int x, int y)
protected void RaiseOnMouseUp(short button, short shift, float x, float y)
protected void RaiseOnMouseUp(object o1, object o2, object o3, object o4)
protected void SetAboutBoxDelegate(AboutBoxDelegate d)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void SetVisibleCore(bool value)
protected void WndProc(Message& m)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BindingContextChanged(EventHandler value)
public void remove_BindingContextChanged(EventHandler value)
public void add_ChangeUICues(UICuesEventHandler value)
public void remove_ChangeUICues(UICuesEventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_ContextMenuChanged(EventHandler value)
public void remove_ContextMenuChanged(EventHandler value)
public void add_CursorChanged(EventHandler value)
public void remove_CursorChanged(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_DragDrop(DragEventHandler value)
public void remove_DragDrop(DragEventHandler value)
public void add_DragEnter(DragEventHandler value)
public void remove_DragEnter(DragEventHandler value)
public void add_DragLeave(EventHandler value)
public void remove_DragLeave(EventHandler value)
public void add_DragOver(DragEventHandler value)
public void remove_DragOver(DragEventHandler value)
public void add_EnabledChanged(EventHandler value)
public void remove_EnabledChanged(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_GiveFeedback(GiveFeedbackEventHandler value)
public void remove_GiveFeedback(GiveFeedbackEventHandler value)
public void add_HelpRequested(HelpEventHandler value)
public void remove_HelpRequested(HelpEventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_Layout(LayoutEventHandler value)
public void remove_Layout(LayoutEventHandler value)
public void add_MouseDown(MouseEventHandler value)
public void remove_MouseDown(MouseEventHandler value)
public void add_MouseEnter(EventHandler value)
public void remove_MouseEnter(EventHandler value)
public void add_MouseHover(EventHandler value)
public void remove_MouseHover(EventHandler value)
public void add_MouseLeave(EventHandler value)
public void remove_MouseLeave(EventHandler value)
public void add_MouseMove(MouseEventHandler value)
public void remove_MouseMove(MouseEventHandler value)
public void add_MouseUp(MouseEventHandler value)
public void remove_MouseUp(MouseEventHandler value)
public void add_MouseWheel(MouseEventHandler value)
public void remove_MouseWheel(MouseEventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value)
public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value)
public void add_QueryContinueDrag(QueryContinueDragEventHandler value)
public void remove_QueryContinueDrag(QueryContinueDragEventHandler value)
public void add_RightToLeftChanged(EventHandler value)
public void remove_RightToLeftChanged(EventHandler value)
public void add_StyleChanged(EventHandler value)
public void remove_StyleChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_MouseClick(EventHandler value)
public void remove_MouseClick(EventHandler value)
public void add_MouseDoubleClick(EventHandler value)
public void remove_MouseDoubleClick(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
internal bool get_IsRunningOnWindows()
private int CoCreateInstance(Guid& rclsid, object pUnkOuter, UInt32 dwClsContext, Guid& riid, Object& ppv)
}
public System.Windows.Forms.BaseCollection : MarshalByRefObject {
internal ArrayList list
public int Count
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
protected ArrayList List
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
protected ArrayList get_List()
public void CopyTo(Array ar, int index)
public IEnumerator GetEnumerator()
}
public System.Windows.Forms.BatteryChargeStatus : Enum {
public int value__
public BatteryChargeStatus High
public BatteryChargeStatus Low
public BatteryChargeStatus Critical
public BatteryChargeStatus Charging
public BatteryChargeStatus NoSystemBattery
public BatteryChargeStatus Unknown
}
public System.Windows.Forms.Binding : object {
private string property_name
private object data_source
private string data_member
private bool is_binding
private bool checked_isnull
private BindingMemberInfo binding_member_info
private IBindableComponent control
private BindingManagerBase manager
private PropertyDescriptor control_property
private PropertyDescriptor is_null_desc
private object data
private Type data_type
private DataSourceUpdateMode datasource_update_mode
private ControlUpdateMode control_update_mode
private object datasource_null_value
private object null_value
private IFormatProvider format_info
private string format_string
private bool formatting_enabled
private ConvertEventHandler Format
private ConvertEventHandler Parse
private BindingCompleteEventHandler BindingComplete
public IBindableComponent BindableComponent
public BindingManagerBase BindingManagerBase
public BindingMemberInfo BindingMemberInfo
public Control Control
public ControlUpdateMode ControlUpdateMode
public object DataSource
public DataSourceUpdateMode DataSourceUpdateMode
public object DataSourceNullValue
public bool FormattingEnabled
public IFormatProvider FormatInfo
public string FormatString
public bool IsBinding
public object NullValue
public string PropertyName
internal string DataMember
public void .ctor(string propertyName, object dataSource, string dataMember)
public void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled)
public void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode)
public void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue)
public void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString)
public void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo)
public IBindableComponent get_BindableComponent()
public BindingManagerBase get_BindingManagerBase()
public BindingMemberInfo get_BindingMemberInfo()
public Control get_Control()
public ControlUpdateMode get_ControlUpdateMode()
public void set_ControlUpdateMode(ControlUpdateMode value)
public object get_DataSource()
public DataSourceUpdateMode get_DataSourceUpdateMode()
public void set_DataSourceUpdateMode(DataSourceUpdateMode value)
public object get_DataSourceNullValue()
public void set_DataSourceNullValue(object value)
public bool get_FormattingEnabled()
public void set_FormattingEnabled(bool value)
public IFormatProvider get_FormatInfo()
public void set_FormatInfo(IFormatProvider value)
public string get_FormatString()
public void set_FormatString(string value)
public bool get_IsBinding()
public object get_NullValue()
public void set_NullValue(object value)
public string get_PropertyName()
public void ReadValue()
public void WriteValue()
protected void OnBindingComplete(BindingCompleteEventArgs e)
protected void OnFormat(ConvertEventArgs cevent)
protected void OnParse(ConvertEventArgs cevent)
internal string get_DataMember()
internal void SetControl(IBindableComponent control)
internal void Check()
internal bool PullData()
private bool PullData(bool force)
internal void PushData()
private void PushData(bool force)
internal void UpdateIsBinding()
private void SetControlValue(object data)
private void SetPropertyValue(object data)
private void ControlValidatingHandler(object sender, CancelEventArgs e)
private void ControlCreatedHandler(object o, EventArgs args)
private void PositionChangedHandler(object sender, EventArgs e)
private EventDescriptor GetPropertyChangedEvent(object o, string property_name)
private void SourcePropertyChangedHandler(object o, EventArgs args)
private void ControlPropertyChangedHandler(object o, EventArgs args)
private object ParseData(object data, Type data_type)
private object FormatData(object data)
private object ConvertData(object data, Type data_type)
private void FireBindingComplete(BindingCompleteContext context, Exception exc, string error_message)
public void add_Format(ConvertEventHandler value)
public void remove_Format(ConvertEventHandler value)
public void add_Parse(ConvertEventHandler value)
public void remove_Parse(ConvertEventHandler value)
public void add_BindingComplete(BindingCompleteEventHandler value)
public void remove_BindingComplete(BindingCompleteEventHandler value)
}
public System.Windows.Forms.BindingCompleteContext : Enum {
public int value__
public BindingCompleteContext ControlUpdate
public BindingCompleteContext DataSourceUpdate
}
public System.Windows.Forms.BindingCompleteEventArgs : CancelEventArgs {
private Binding binding
private BindingCompleteState state
private BindingCompleteContext context
private string error_text
private Exception exception
public Binding Binding
public BindingCompleteContext BindingCompleteContext
public BindingCompleteState BindingCompleteState
public string ErrorText
public Exception Exception
public void .ctor(Binding binding, BindingCompleteState state, BindingCompleteContext context)
public void .ctor(Binding binding, BindingCompleteState state, BindingCompleteContext context, string errorText)
public void .ctor(Binding binding, BindingCompleteState state, BindingCompleteContext context, string errorText, Exception exception)
public void .ctor(Binding binding, BindingCompleteState state, BindingCompleteContext context, string errorText, Exception exception, bool cancel)
public Binding get_Binding()
public BindingCompleteContext get_BindingCompleteContext()
public BindingCompleteState get_BindingCompleteState()
public string get_ErrorText()
public Exception get_Exception()
internal void SetErrorText(string error_text)
internal void SetException(Exception exception)
}
public System.Windows.Forms.BindingCompleteEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, BindingCompleteEventArgs e)
public IAsyncResult BeginInvoke(object sender, BindingCompleteEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.BindingCompleteState : Enum {
public int value__
public BindingCompleteState Success
public BindingCompleteState DataError
public BindingCompleteState Exception
}
public System.Windows.Forms.BindingContext : object {
private Hashtable managers
private EventHandler onCollectionChangedHandler
public bool IsReadOnly
public BindingManagerBase Item
public BindingManagerBase Item
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
public bool get_IsReadOnly()
public BindingManagerBase get_Item(object dataSource)
public BindingManagerBase get_Item(object dataSource, string dataMember)
private BindingManagerBase CreateBindingManager(object data_source, string data_member)
private bool IsListType(Type t)
public bool Contains(object dataSource)
public bool Contains(object dataSource, string dataMember)
protected internal void Add(object dataSource, BindingManagerBase listManager)
protected void AddCore(object dataSource, BindingManagerBase listManager)
protected internal void Clear()
protected void ClearCore()
protected void OnCollectionChanged(CollectionChangeEventArgs ccevent)
protected internal void Remove(object dataSource)
protected void RemoveCore(object dataSource)
public void UpdateBinding(BindingContext newBindingContext, Binding binding)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
private void System.Collections.ICollection.CopyTo(Array ar, int index)
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public System.Windows.Forms.BindingManagerBase : object {
private BindingsCollection bindings
internal bool transfering_data
protected EventHandler onCurrentChangedHandler
protected EventHandler onPositionChangedHandler
internal EventHandler onCurrentItemChangedHandler
private BindingCompleteEventHandler BindingComplete
private BindingManagerDataErrorEventHandler DataError
public BindingsCollection Bindings
public int Count
public object Current
public bool IsBindingSuspended
public int Position
internal bool IsSuspended
public BindingsCollection get_Bindings()
public int get_Count()
public object get_Current()
public bool get_IsBindingSuspended()
public int get_Position()
public void set_Position(int value)
public void AddNew()
public void CancelCurrentEdit()
public void EndCurrentEdit()
public PropertyDescriptorCollection GetItemProperties()
internal PropertyDescriptorCollection GetItemPropertiesInternal()
public void RemoveAt(int index)
public void ResumeBinding()
public void SuspendBinding()
internal bool get_IsSuspended()
protected internal PropertyDescriptorCollection GetItemProperties(ArrayList dataSources, ArrayList listAccessors)
protected PropertyDescriptorCollection GetItemProperties(Type listType, int offset, ArrayList dataSources, ArrayList listAccessors)
protected internal string GetListName(ArrayList listAccessors)
protected internal void OnCurrentChanged(EventArgs e)
protected void PullData()
protected void PushData()
protected void OnBindingComplete(BindingCompleteEventArgs args)
protected void OnCurrentItemChanged(EventArgs e)
protected void OnDataError(Exception e)
protected void UpdateIsBinding()
internal void AddBinding(Binding binding)
public void add_CurrentChanged(EventHandler value)
public void remove_CurrentChanged(EventHandler value)
public void add_PositionChanged(EventHandler value)
public void remove_PositionChanged(EventHandler value)
public void add_CurrentItemChanged(EventHandler value)
public void remove_CurrentItemChanged(EventHandler value)
public void add_BindingComplete(BindingCompleteEventHandler value)
public void remove_BindingComplete(BindingCompleteEventHandler value)
public void add_DataError(BindingManagerDataErrorEventHandler value)
public void remove_DataError(BindingManagerDataErrorEventHandler value)
}
public System.Windows.Forms.BindingManagerDataErrorEventArgs : EventArgs {
private Exception exception
public Exception Exception
public void .ctor(Exception exception)
public Exception get_Exception()
}
public System.Windows.Forms.BindingManagerDataErrorEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, BindingManagerDataErrorEventArgs e)
public IAsyncResult BeginInvoke(object sender, BindingManagerDataErrorEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.BindingMemberInfo : ValueType {
private string data_member
private string data_field
private string data_path
public string BindingField
public string BindingMember
public string BindingPath
public void .ctor(string dataMember)
public string get_BindingField()
public string get_BindingMember()
public string get_BindingPath()
public bool Equals(object otherObject)
public int GetHashCode()
public bool op_Equality(BindingMemberInfo a, BindingMemberInfo b)
public bool op_Inequality(BindingMemberInfo a, BindingMemberInfo b)
}
public System.Windows.Forms.BindingNavigator : ToolStrip {
private ToolStripItem addNewItem
private BindingSource bindingSource
private ToolStripItem countItem
private string countItemFormat
private ToolStripItem deleteItem
private bool initFlag
private ToolStripItem moveFirstItem
private ToolStripItem moveLastItem
private ToolStripItem moveNextItem
private ToolStripItem movePreviousItem
private ToolStripItem positionItem
private EventHandler RefreshItems
public ToolStripItem AddNewItem
public BindingSource BindingSource
public ToolStripItem CountItem
public string CountItemFormat
public ToolStripItem DeleteItem
public ToolStripItem MoveFirstItem
public ToolStripItem MoveLastItem
public ToolStripItem MoveNextItem
public ToolStripItem MovePreviousItem
public ToolStripItem PositionItem
public ToolStripItem get_AddNewItem()
public void set_AddNewItem(ToolStripItem value)
public BindingSource get_BindingSource()
public void set_BindingSource(BindingSource value)
public ToolStripItem get_CountItem()
public void set_CountItem(ToolStripItem value)
public string get_CountItemFormat()
public void set_CountItemFormat(string value)
public ToolStripItem get_DeleteItem()
public void set_DeleteItem(ToolStripItem value)
public ToolStripItem get_MoveFirstItem()
public void set_MoveFirstItem(ToolStripItem value)
private void ReplaceItem(ToolStripItem& existingItem, ToolStripItem newItem, EventHandler clickHandler)
public ToolStripItem get_MoveLastItem()
public void set_MoveLastItem(ToolStripItem value)
public ToolStripItem get_MoveNextItem()
public void set_MoveNextItem(ToolStripItem value)
public ToolStripItem get_MovePreviousItem()
public void set_MovePreviousItem(ToolStripItem value)
public ToolStripItem get_PositionItem()
public void set_PositionItem(ToolStripItem value)
public void .ctor(BindingSource bindingSource)
public void .ctor(bool addStandardItems)
public void .ctor(IContainer container)
public void add_RefreshItems(EventHandler value)
public void remove_RefreshItems(EventHandler value)
public void AddStandardItems()
public void BeginInit()
protected void Dispose(bool disposing)
public void EndInit()
protected void OnRefreshItems()
protected void RefreshItemsCore()
public bool Validate()
private void AttachNewSource(BindingSource source)
private void OnAddNew(object sender, EventArgs e)
private void OnAddingNew(object sender, AddingNewEventArgs e)
private void OnDelete(object sender, EventArgs e)
private void OnListChanged(object sender, ListChangedEventArgs e)
private void OnMoveFirst(object sender, EventArgs e)
private void OnMoveLast(object sender, EventArgs e)
private void OnMoveNext(object sender, EventArgs e)
private void OnMovePrevious(object sender, EventArgs e)
private void OnPositionChanged(object sender, EventArgs e)
}
public System.Windows.Forms.BindingsCollection : BaseCollection {
private CollectionChangeEventHandler CollectionChanged
private CollectionChangeEventHandler CollectionChanging
public int Count
public Binding Item
protected ArrayList List
public int get_Count()
public Binding get_Item(int index)
protected ArrayList get_List()
protected internal void Add(Binding binding)
protected void AddCore(Binding dataBinding)
protected internal void Clear()
protected void ClearCore()
protected void OnCollectionChanged(CollectionChangeEventArgs ccevent)
protected void OnCollectionChanging(CollectionChangeEventArgs e)
protected internal void Remove(Binding binding)
protected internal void RemoveAt(int index)
protected void RemoveCore(Binding dataBinding)
protected internal bool ShouldSerializeMyAll()
internal bool Contains(Binding binding)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
public void add_CollectionChanging(CollectionChangeEventHandler value)
public void remove_CollectionChanging(CollectionChangeEventHandler value)
}
public System.Windows.Forms.BindingSource : Component {
private bool is_initialized
private IList list
private CurrencyManager currency_manager
private Dictionary`2<string, CurrencyManager> related_currency_managers
internal Type item_type
private bool item_has_default_ctor
private bool list_is_ibinding
private object datasource
private string datamember
private bool raise_list_changed_events
private bool allow_new_set
private bool allow_new
private bool add_pending
private int pending_add_index
private string filter
private string sort
private object AddingNewEvent
private object BindingCompleteEvent
private object CurrentChangedEvent
private object CurrentItemChangedEvent
private object DataErrorEvent
private object DataMemberChangedEvent
private object DataSourceChangedEvent
private object ListChangedEvent
private object PositionChangedEvent
private object InitializedEvent
public bool AllowEdit
public bool AllowNew
private bool IsAddingNewHandled
public bool AllowRemove
public int Count
public CurrencyManager CurrencyManager
public object Current
public string DataMember
public object DataSource
public string Filter
public bool IsBindingSuspended
public bool IsFixedSize
public bool IsReadOnly
public bool IsSorted
public bool IsSynchronized
public object Item
public IList List
public int Position
public bool RaiseListChangedEvents
public string Sort
public ListSortDescriptionCollection SortDescriptions
public ListSortDirection SortDirection
public PropertyDescriptor SortProperty
public bool SupportsAdvancedSorting
public bool SupportsChangeNotification
public bool SupportsFiltering
public bool SupportsSearching
public bool SupportsSorting
public object SyncRoot
private bool System.ComponentModel.ISupportInitializeNotification.IsInitialized
public void .ctor(IContainer container)
public void .ctor(object dataSource, string dataMember)
private IList GetListFromEnumerable(IEnumerable enumerable)
private void ConnectCurrencyManager()
private void ResetList()
private void SetList(IList l)
private void ConnectDataSourceEvents(object dataSource)
private void OnParentCurrencyManagerChanged(object sender, EventArgs args)
private void DisconnectDataSourceEvents(object dataSource)
private void IBindingListChangedHandler(object o, ListChangedEventArgs args)
public bool get_AllowEdit()
public bool get_AllowNew()
public void set_AllowNew(bool value)
private bool get_IsAddingNewHandled()
public bool get_AllowRemove()
public int get_Count()
public CurrencyManager get_CurrencyManager()
public object get_Current()
public string get_DataMember()
public void set_DataMember(string value)
public object get_DataSource()
public void set_DataSource(object value)
public string get_Filter()
public void set_Filter(string value)
public bool get_IsBindingSuspended()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSorted()
public bool get_IsSynchronized()
public object get_Item(int index)
public void set_Item(int index, object value)
public IList get_List()
public int get_Position()
public void set_Position(int value)
public bool get_RaiseListChangedEvents()
public void set_RaiseListChangedEvents(bool value)
public string get_Sort()
public void set_Sort(string value)
private void ResetDataMemberIfInvalid()
private void ProcessSortString(string sort)
private ListSortDescription GetListSortDescription(PropertyDescriptorCollection prop_descs, string property)
public ListSortDescriptionCollection get_SortDescriptions()
public ListSortDirection get_SortDirection()
public PropertyDescriptor get_SortProperty()
public bool get_SupportsAdvancedSorting()
public bool get_SupportsChangeNotification()
public bool get_SupportsFiltering()
public bool get_SupportsSearching()
public bool get_SupportsSorting()
public object get_SyncRoot()
public void add_AddingNew(AddingNewEventHandler value)
public void remove_AddingNew(AddingNewEventHandler value)
public void add_BindingComplete(BindingCompleteEventHandler value)
public void remove_BindingComplete(BindingCompleteEventHandler value)
public void add_CurrentChanged(EventHandler value)
public void remove_CurrentChanged(EventHandler value)
public void add_CurrentItemChanged(EventHandler value)
public void remove_CurrentItemChanged(EventHandler value)
public void add_DataError(BindingManagerDataErrorEventHandler value)
public void remove_DataError(BindingManagerDataErrorEventHandler value)
public void add_DataMemberChanged(EventHandler value)
public void remove_DataMemberChanged(EventHandler value)
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public void add_ListChanged(ListChangedEventHandler value)
public void remove_ListChanged(ListChangedEventHandler value)
public void add_PositionChanged(EventHandler value)
public void remove_PositionChanged(EventHandler value)
public int Add(object value)
public object AddNew()
public void ApplySort(PropertyDescriptor property, ListSortDirection sort)
public void ApplySort(ListSortDescriptionCollection sorts)
public void CancelEdit()
public void Clear()
public bool Contains(object value)
public void CopyTo(Array arr, int index)
protected void Dispose(bool disposing)
public void EndEdit()
public int Find(string propertyName, object key)
public int Find(PropertyDescriptor prop, object key)
public IEnumerator GetEnumerator()
public PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
public string GetListName(PropertyDescriptor[] listAccessors)
public CurrencyManager GetRelatedCurrencyManager(string dataMember)
public int IndexOf(object value)
public void Insert(int index, object value)
public void MoveFirst()
public void MoveLast()
public void MoveNext()
public void MovePrevious()
protected void OnAddingNew(AddingNewEventArgs e)
protected void OnBindingComplete(BindingCompleteEventArgs e)
protected void OnCurrentChanged(EventArgs e)
protected void OnCurrentItemChanged(EventArgs e)
protected void OnDataError(BindingManagerDataErrorEventArgs e)
protected void OnDataMemberChanged(EventArgs e)
protected void OnDataSourceChanged(EventArgs e)
protected void OnListChanged(ListChangedEventArgs e)
protected void OnPositionChanged(EventArgs e)
public void Remove(object value)
public void RemoveAt(int index)
public void RemoveCurrent()
public void RemoveFilter()
public void RemoveSort()
public void ResetAllowNew()
public void ResetBindings(bool metadataChanged)
public void ResetCurrentItem()
public void ResetItem(int itemIndex)
public void ResumeBinding()
public void SuspendBinding()
private void System.ComponentModel.ICancelAddNew.CancelNew(int position)
private void System.ComponentModel.ICancelAddNew.EndNew(int position)
private void System.ComponentModel.ISupportInitialize.BeginInit()
private void DataSourceEndInitHandler(object o, EventArgs args)
private void System.ComponentModel.ISupportInitialize.EndInit()
private void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property)
private void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor prop)
private bool System.ComponentModel.ISupportInitializeNotification.get_IsInitialized()
private void System.ComponentModel.ISupportInitializeNotification.add_Initialized(EventHandler value)
private void System.ComponentModel.ISupportInitializeNotification.remove_Initialized(EventHandler value)
private void <ConnectCurrencyManager>b__20_0(object o, EventArgs args)
private void <ConnectCurrencyManager>b__20_1(object o, EventArgs args)
private void <ConnectCurrencyManager>b__20_2(object o, BindingCompleteEventArgs args)
private void <ConnectCurrencyManager>b__20_3(object o, BindingManagerDataErrorEventArgs args)
private void <ConnectCurrencyManager>b__20_4(object o, EventArgs args)
private void <ConnectCurrencyManager>b__20_5(object o, EventArgs args)
}
internal System.Windows.Forms.BITMAPINFOHEADER : ValueType {
internal UInt32 biSize
internal int biWidth
internal int biHeight
internal ushort biPlanes
internal ushort biBitCount
internal UInt32 biCompression
internal UInt32 biSizeImage
internal int biXPelsPerMeter
internal int biYPelsPerMeter
internal UInt32 biClrUsed
internal UInt32 biClrImportant
}
public System.Windows.Forms.BootMode : Enum {
public int value__
public BootMode Normal
public BootMode FailSafe
public BootMode FailSafeWithNetwork
}
public System.Windows.Forms.Border3DSide : Enum {
public int value__
public Border3DSide Left
public Border3DSide Top
public Border3DSide Right
public Border3DSide Bottom
public Border3DSide Middle
public Border3DSide All
}
public System.Windows.Forms.Border3DStyle : Enum {
public int value__
public Border3DStyle RaisedOuter
public Border3DStyle SunkenOuter
public Border3DStyle RaisedInner
public Border3DStyle Raised
public Border3DStyle Etched
public Border3DStyle SunkenInner
public Border3DStyle Bump
public Border3DStyle Sunken
public Border3DStyle Adjust
public Border3DStyle Flat
}
public System.Windows.Forms.BorderStyle : Enum {
public int value__
public BorderStyle None
public BorderStyle FixedSingle
public BorderStyle Fixed3D
}
public System.Windows.Forms.BoundsSpecified : Enum {
public int value__
public BoundsSpecified None
public BoundsSpecified X
public BoundsSpecified Y
public BoundsSpecified Location
public BoundsSpecified Width
public BoundsSpecified Height
public BoundsSpecified Size
public BoundsSpecified All
}
public System.Windows.Forms.Button : ButtonBase {
private DialogResult dialog_result
public AutoSizeMode AutoSizeMode
public DialogResult DialogResult
protected CreateParams CreateParams
public AutoSizeMode get_AutoSizeMode()
public void set_AutoSizeMode(AutoSizeMode value)
public DialogResult get_DialogResult()
public void set_DialogResult(DialogResult value)
protected CreateParams get_CreateParams()
public void NotifyDefault(bool value)
public void PerformClick()
public string ToString()
protected void OnClick(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnMouseEnter(EventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseUp(MouseEventArgs mevent)
protected void OnTextChanged(EventArgs e)
protected bool ProcessMnemonic(char charCode)
protected void WndProc(Message& m)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
internal void Draw(PaintEventArgs pevent)
internal Size GetPreferredSizeCore(Size proposedSize)
}
public System.Windows.Forms.ButtonBase : Control {
private FlatStyle flat_style
private int image_index
internal Image image
internal ImageList image_list
private ContentAlignment image_alignment
internal ContentAlignment text_alignment
private bool is_default
internal bool is_pressed
internal StringFormat text_format
internal bool paint_as_acceptbutton
private bool auto_ellipsis
private FlatButtonAppearance flat_button_appearance
private string image_key
private TextImageRelation text_image_relation
private TextFormatFlags text_format_flags
private bool use_mnemonic
private bool use_visual_style_back_color
public bool AutoEllipsis
public bool AutoSize
public Color BackColor
public FlatButtonAppearance FlatAppearance
public FlatStyle FlatStyle
public Image Image
public ContentAlignment ImageAlign
public int ImageIndex
public string ImageKey
public ImageList ImageList
public ImeMode ImeMode
public string Text
public ContentAlignment TextAlign
public TextImageRelation TextImageRelation
public bool UseCompatibleTextRendering
public bool UseMnemonic
public bool UseVisualStyleBackColor
protected CreateParams CreateParams
protected ImeMode DefaultImeMode
protected Size DefaultSize
protected internal bool IsDefault
internal ButtonState ButtonState
internal bool Pressed
internal TextFormatFlags TextFormatFlags
public bool get_AutoEllipsis()
public void set_AutoEllipsis(bool value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public FlatButtonAppearance get_FlatAppearance()
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public Image get_Image()
public void set_Image(Image value)
internal bool ShouldSerializeImage()
public ContentAlignment get_ImageAlign()
public void set_ImageAlign(ContentAlignment value)
public int get_ImageIndex()
public void set_ImageIndex(int value)
public string get_ImageKey()
public void set_ImageKey(string value)
public ImageList get_ImageList()
public void set_ImageList(ImageList value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public string get_Text()
public void set_Text(string value)
public ContentAlignment get_TextAlign()
public void set_TextAlign(ContentAlignment value)
public TextImageRelation get_TextImageRelation()
public void set_TextImageRelation(TextImageRelation value)
public bool get_UseCompatibleTextRendering()
public void set_UseCompatibleTextRendering(bool value)
public bool get_UseMnemonic()
public void set_UseMnemonic(bool value)
public bool get_UseVisualStyleBackColor()
public void set_UseVisualStyleBackColor(bool value)
protected CreateParams get_CreateParams()
protected ImeMode get_DefaultImeMode()
protected Size get_DefaultSize()
protected internal bool get_IsDefault()
protected internal void set_IsDefault(bool value)
public Size GetPreferredSize(Size proposedSize)
protected AccessibleObject CreateAccessibilityInstance()
protected void Dispose(bool disposing)
protected void OnEnabledChanged(EventArgs e)
protected void OnGotFocus(EventArgs e)
protected void OnKeyDown(KeyEventArgs kevent)
protected void OnKeyUp(KeyEventArgs kevent)
protected void OnLostFocus(EventArgs e)
protected void OnMouseDown(MouseEventArgs mevent)
protected void OnMouseEnter(EventArgs eventargs)
protected void OnMouseLeave(EventArgs eventargs)
protected void OnMouseMove(MouseEventArgs mevent)
protected void OnMouseUp(MouseEventArgs mevent)
protected void OnPaint(PaintEventArgs pevent)
protected void OnParentChanged(EventArgs e)
protected void OnTextChanged(EventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected void ResetFlagsandPaint()
protected void WndProc(Message& m)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
internal ButtonState get_ButtonState()
internal bool get_Pressed()
internal TextFormatFlags get_TextFormatFlags()
internal void Draw(PaintEventArgs pevent)
internal void HaveDoubleClick()
internal void OnPaintBackgroundInternal(PaintEventArgs e)
}
public System.Windows.Forms.ButtonBorderStyle : Enum {
public int value__
public ButtonBorderStyle None
public ButtonBorderStyle Dotted
public ButtonBorderStyle Dashed
public ButtonBorderStyle Solid
public ButtonBorderStyle Inset
public ButtonBorderStyle Outset
}
public System.Windows.Forms.ButtonRenderer : object {
private bool always_use_visual_styles
public bool RenderMatchingApplicationState
public void DrawButton(Graphics g, Rectangle bounds, PushButtonState state)
public void DrawButton(Graphics g, Rectangle bounds, bool focused, PushButtonState state)
public void DrawButton(Graphics g, Rectangle bounds, Image image, Rectangle imageBounds, bool focused, PushButtonState state)
public void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, bool focused, PushButtonState state)
public void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, TextFormatFlags flags, bool focused, PushButtonState state)
public void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, Image image, Rectangle imageBounds, bool focused, PushButtonState state)
public void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, PushButtonState state)
public bool IsBackgroundPartiallyTransparent(PushButtonState state)
public void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl)
internal VisualStyleRenderer GetPushButtonRenderer(PushButtonState state)
public bool get_RenderMatchingApplicationState()
public void set_RenderMatchingApplicationState(bool value)
}
public System.Windows.Forms.ButtonState : Enum {
public int value__
public ButtonState Normal
public ButtonState Inactive
public ButtonState Pushed
public ButtonState Checked
public ButtonState Flat
public ButtonState All
}
public System.Windows.Forms.CacheVirtualItemsEventArgs : EventArgs {
private int start_index
private int end_index
public int StartIndex
public int EndIndex
public void .ctor(int startIndex, int endIndex)
public int get_StartIndex()
public int get_EndIndex()
}
public System.Windows.Forms.CacheVirtualItemsEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, CacheVirtualItemsEventArgs e)
public IAsyncResult BeginInvoke(object sender, CacheVirtualItemsEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.CaptionButton : Enum {
public int value__
public CaptionButton Close
public CaptionButton Minimize
public CaptionButton Maximize
public CaptionButton Restore
public CaptionButton Help
}
internal System.Windows.Forms.CarbonInternal.ApplicationHandler : EventHandlerBase {
internal UInt32 kEventAppActivated
internal UInt32 kEventAppDeactivated
internal UInt32 kEventAppQuit
internal UInt32 kEventAppLaunchNotification
internal UInt32 kEventAppLaunched
internal UInt32 kEventAppTerminated
internal UInt32 kEventAppFrontSwitched
internal UInt32 kEventAppFocusMenuBar
internal UInt32 kEventAppFocusNextDocumentWindow
internal UInt32 kEventAppFocusNextFloatingWindow
internal UInt32 kEventAppFocusToolbar
internal UInt32 kEventAppFocusDrawer
internal UInt32 kEventAppGetDockTileMenu
internal UInt32 kEventAppIsEventInInstantMouser
internal UInt32 kEventAppHidden
internal UInt32 kEventAppShown
internal UInt32 kEventAppSystemUIModeChanged
internal UInt32 kEventAppAvailableWindowBoundsChanged
internal UInt32 kEventAppActiveWindowChanged
internal void .ctor(XplatUICarbon driver)
public bool ProcessEvent(IntPtr callref, IntPtr eventref, IntPtr handle, UInt32 kind, MSG& msg)
}
internal System.Windows.Forms.CarbonInternal.CarbonCursor : ValueType {
private Bitmap bmp
private Bitmap mask
private Color cursor_color
private Color mask_color
private int hot_x
private int hot_y
private StdCursor id
private bool standard
public StdCursor StdCursor
public Bitmap Bitmap
public Bitmap Mask
public Color CursorColor
public Color MaskColor
public int HotSpotX
public int HotSpotY
public void .ctor(Bitmap bitmap, Bitmap mask, Color cursor_pixel, Color mask_pixel, int xHotSpot, int yHotSpot)
public void .ctor(StdCursor id)
public StdCursor get_StdCursor()
public Bitmap get_Bitmap()
public Bitmap get_Mask()
public Color get_CursorColor()
public Color get_MaskColor()
public int get_HotSpotX()
public int get_HotSpotY()
public void SetCursor()
public void SetCustomCursor()
public void SetStandardCursor()
private int SetThemeCursor(ThemeCursor cursor)
}
internal System.Windows.Forms.CarbonInternal.CarbonEvent : ValueType {
public IntPtr hWnd
public IntPtr evt
public void .ctor(IntPtr hWnd, IntPtr evt)
}
internal System.Windows.Forms.CarbonInternal.Caret : ValueType {
internal Timer Timer
internal IntPtr Hwnd
internal int X
internal int Y
internal int Width
internal int Height
internal int Visible
internal bool On
internal bool Paused
}
internal System.Windows.Forms.CarbonInternal.CGAffineTransform : ValueType {
internal float a
internal float b
internal float c
internal float d
internal float tx
internal float ty
}
internal System.Windows.Forms.CarbonInternal.CGPoint : ValueType {
public float x
public float y
public void .ctor(int x, int y)
}
internal System.Windows.Forms.CarbonInternal.CGSize : ValueType {
public float width
public float height
public void .ctor(int w, int h)
}
internal System.Windows.Forms.CarbonInternal.ControlHandler : EventHandlerBase {
internal UInt32 kEventControlInitialize
internal UInt32 kEventControlDispose
internal UInt32 kEventControlGetOptimalBounds
internal UInt32 kEventControlDefInitialize
internal UInt32 kEventControlDefDispose
internal UInt32 kEventControlHit
internal UInt32 kEventControlSimulateHit
internal UInt32 kEventControlHitTest
internal UInt32 kEventControlDraw
internal UInt32 kEventControlApplyBackground
internal UInt32 kEventControlApplyTextColor
internal UInt32 kEventControlSetFocusPart
internal UInt32 kEventControlGetFocusPart
internal UInt32 kEventControlActivate
internal UInt32 kEventControlDeactivate
internal UInt32 kEventControlSetCursor
internal UInt32 kEventControlContextualMenuClick
internal UInt32 kEventControlClick
internal UInt32 kEventControlGetNextFocusCandidate
internal UInt32 kEventControlGetAutoToggleValue
internal UInt32 kEventControlInterceptSubviewClick
internal UInt32 kEventControlGetClickActivation
internal UInt32 kEventControlDragEnter
internal UInt32 kEventControlDragWithin
internal UInt32 kEventControlDragLeave
internal UInt32 kEventControlDragReceive
internal UInt32 kEventControlInvalidateForSizeChange
internal UInt32 kEventControlTrackingAreaEntered
internal UInt32 kEventControlTrackingAreaExited
internal UInt32 kEventControlTrack
internal UInt32 kEventControlGetScrollToHereStartPoint
internal UInt32 kEventControlGetIndicatorDragConstraint
internal UInt32 kEventControlIndicatorMoved
internal UInt32 kEventControlGhostingFinished
internal UInt32 kEventControlGetActionProcPart
internal UInt32 kEventControlGetPartRegion
internal UInt32 kEventControlGetPartBounds
internal UInt32 kEventControlSetData
internal UInt32 kEventControlGetData
internal UInt32 kEventControlGetSizeConstraints
internal UInt32 kEventControlGetFrameMetrics
internal UInt32 kEventControlValueFieldChanged
internal UInt32 kEventControlAddedSubControl
internal UInt32 kEventControlRemovingSubControl
internal UInt32 kEventControlBoundsChanged
internal UInt32 kEventControlVisibilityChanged
internal UInt32 kEventControlTitleChanged
internal UInt32 kEventControlOwningWindowChanged
internal UInt32 kEventControlHiliteChanged
internal UInt32 kEventControlEnabledStateChanged
internal UInt32 kEventControlLayoutInfoChanged
internal UInt32 kEventControlArbitraryMessage
internal UInt32 kEventParamCGContextRef
internal UInt32 kEventParamDirectObject
internal UInt32 kEventParamControlPart
internal UInt32 kEventParamControlLikesDrag
internal UInt32 kEventParamRgnHandle
internal UInt32 typeControlRef
internal UInt32 typeCGContextRef
internal UInt32 typeQDPoint
internal UInt32 typeQDRgnHandle
internal UInt32 typeControlPartCode
internal UInt32 typeBoolean
internal void .ctor(XplatUICarbon driver)
public bool ProcessEvent(IntPtr callref, IntPtr eventref, IntPtr handle, UInt32 kind, MSG& msg)
private void DrawBorders(Hwnd hwnd)
private int GetRegionBounds(IntPtr rgnhandle, Rect& region)
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, IntPtr outsize, IntPtr& data)
private int SetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, UInt32 size, Int16& data)
private int HIViewGetBounds(IntPtr handle, HIRect& rect)
private int HIViewGetFrame(IntPtr handle, HIRect& rect)
private bool HIViewIsVisible(IntPtr vHnd)
}
internal System.Windows.Forms.CarbonInternal.Cursor : object {
internal CarbonCursor defcur
internal Bitmap DefineStdCursorBitmap(StdCursor id)
internal IntPtr DefineCursor(Bitmap bitmap, Bitmap mask, Color cursor_pixel, Color mask_pixel, int xHotSpot, int yHotSpot)
internal IntPtr DefineStdCursor(StdCursor id)
internal void SetCursor(IntPtr cursor)
}
internal System.Windows.Forms.CarbonInternal.Dnd : object {
internal UInt32 kEventParamDragRef
internal UInt32 typeDragRef
internal UInt32 typeMono
internal UInt32 typeMonoSerializedObject
private DragDropEffects effects
private DragTrackingDelegate DragTrackingHandler
internal void TrackingCallback(short message, IntPtr window, IntPtr data, IntPtr dragref)
internal DragDropEffects DragActionsToEffects(UInt32 actions)
internal DataObject DragToDataObject(IntPtr dragref)
internal bool HandleEvent(IntPtr callref, IntPtr eventref, IntPtr handle, UInt32 kind, MSG& msg)
public void SetAllowDrop(Hwnd hwnd, bool allow)
public void SendDrop(IntPtr handle, IntPtr from, IntPtr time)
public DragDropEffects StartDrag(IntPtr handle, object data, DragDropEffects allowed_effects)
public void StoreObjectInDrag(IntPtr handle, IntPtr dragref, object data)
private int InstallTrackingHandler(DragTrackingDelegate callback, IntPtr window, IntPtr data)
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, IntPtr outsize, IntPtr& data)
private int SetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, UInt32 size, Boolean& data)
private int SetControlDragTrackingEnabled(IntPtr view, bool enabled)
private int AddDragItemFlavor(IntPtr dragref, IntPtr itemref, IntPtr flavortype, IntPtr& data, int size, UInt32 flags)
private int CountDragItems(IntPtr dragref, UInt32& count)
private int CountDragItemFlavors(IntPtr dragref, IntPtr itemref, UInt32& count)
private int GetDragItemReferenceNumber(IntPtr dragref, UInt32 index, IntPtr& itemref)
private int NewDrag(IntPtr& dragref)
private int TrackDrag(IntPtr dragref, EventRecord& eventrecord, IntPtr region)
private int DisposeDrag(IntPtr dragref)
private int GetDragAllowableActions(IntPtr dragref, UInt32& actions)
}
internal System.Windows.Forms.CarbonInternal.DragTrackingDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(short message, IntPtr window, IntPtr data, IntPtr dragref)
public IAsyncResult BeginInvoke(short message, IntPtr window, IntPtr data, IntPtr dragref, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.CarbonInternal.EventDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public int Invoke(IntPtr callref, IntPtr eventref, IntPtr user_data)
public IAsyncResult BeginInvoke(IntPtr callref, IntPtr eventref, IntPtr user_data, AsyncCallback callback, object object)
public int EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.CarbonInternal.EventHandler : object {
internal EventDelegate EventHandlerDelegate
internal XplatUICarbon Driver
internal int EVENT_NOT_HANDLED
internal int EVENT_HANDLED
internal UInt32 kEventClassMouse
internal UInt32 kEventClassKeyboard
internal UInt32 kEventClassTextInput
internal UInt32 kEventClassApplication
internal UInt32 kEventClassAppleEvent
internal UInt32 kEventClassMenu
internal UInt32 kEventClassWindow
internal UInt32 kEventClassControl
internal UInt32 kEventClassCommand
internal UInt32 kEventClassTablet
internal UInt32 kEventClassVolume
internal UInt32 kEventClassAppearance
internal UInt32 kEventClassService
internal UInt32 kEventClassToolbar
internal UInt32 kEventClassToolbarItem
internal UInt32 kEventClassAccessibility
internal UInt32 kEventClassHIObject
internal EventTypeSpec[] HIObjectEvents
internal EventTypeSpec[] ControlEvents
internal EventTypeSpec[] ApplicationEvents
private EventTypeSpec[] WindowEvents
internal int EventCallback(IntPtr callref, IntPtr eventref, IntPtr handle)
internal bool TranslateMessage(MSG& msg)
internal void InstallApplicationHandler()
internal void InstallControlHandler(IntPtr control)
internal void InstallWindowHandler(IntPtr window)
private IntPtr GetApplicationEventTarget()
internal IntPtr GetControlEventTarget(IntPtr control)
internal IntPtr GetWindowEventTarget(IntPtr window)
internal UInt32 GetEventClass(IntPtr eventref)
private UInt32 GetEventKind(IntPtr eventref)
private int InstallEventHandler(IntPtr window, EventDelegate event_handler, UInt32 count, EventTypeSpec[] types, IntPtr user_data, IntPtr handlerref)
}
internal System.Windows.Forms.CarbonInternal.EventHandlerBase : object {
internal XplatUICarbon Driver
public void .ctor(XplatUICarbon driver)
}
internal System.Windows.Forms.CarbonInternal.EventRecord : ValueType {
internal ushort what
internal UInt32 message
internal UInt32 when
internal QDPoint mouse
internal ushort modifiers
}
internal System.Windows.Forms.CarbonInternal.EventTypeSpec : ValueType {
public UInt32 eventClass
public UInt32 eventKind
public void .ctor(UInt32 eventClass, UInt32 eventKind)
}
internal System.Windows.Forms.CarbonInternal.FlavorHandler : object {
internal IntPtr flavorref
internal IntPtr dragref
internal IntPtr itemref
internal int size
internal UInt32 flags
internal Byte[] data
internal string fourcc
internal string DataString
internal Byte[] DataArray
internal IntPtr DataPtr
internal bool Supported
internal void .ctor(IntPtr dragref, IntPtr itemref, UInt32 counter)
internal void GetData()
internal string get_DataString()
internal Byte[] get_DataArray()
internal IntPtr get_DataPtr()
internal bool get_Supported()
internal DataObject Convert(ArrayList flavorlist)
internal DataObject DeserializeObject(ArrayList flavorlist)
internal DataObject ConvertToObject(ArrayList flavorlist)
internal DataObject ConvertToFileDrop(ArrayList flavorlist)
public string ToString()
private int GetFlavorDataSize(IntPtr dragref, IntPtr itemref, IntPtr flavorref, Int32& size)
private int GetFlavorData(IntPtr dragref, IntPtr itemref, IntPtr flavorref, Byte[] data, Int32& size, UInt32 offset)
private int GetFlavorFlags(IntPtr dragref, IntPtr itemref, IntPtr flavorref, UInt32& flags)
private int GetFlavorType(IntPtr dragref, IntPtr itemref, UInt32 index, IntPtr& flavor)
}
internal System.Windows.Forms.CarbonInternal.HIObjectHandler : EventHandlerBase {
internal UInt32 kEventHIObjectConstruct
internal UInt32 kEventHIObjectInitialize
internal UInt32 kEventHIObjectDestruct
internal void .ctor(XplatUICarbon driver)
public bool ProcessEvent(IntPtr callref, IntPtr eventref, IntPtr handle, UInt32 kind, MSG& msg)
private int CallNextEventHandler(IntPtr callref, IntPtr eventref)
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, IntPtr outsize, IntPtr& data)
}
internal System.Windows.Forms.CarbonInternal.HIRect : ValueType {
public CGPoint origin
public CGSize size
public void .ctor(int x, int y, int w, int h)
}
internal System.Windows.Forms.CarbonInternal.HIViewID : ValueType {
public UInt32 type
public UInt32 id
public void .ctor(UInt32 type, UInt32 id)
}
internal System.Windows.Forms.CarbonInternal.Hover : ValueType {
internal Timer Timer
internal IntPtr Hwnd
internal int X
internal int Y
internal int Interval
}
internal System.Windows.Forms.CarbonInternal.IEventHandler {
public bool ProcessEvent(IntPtr callref, IntPtr eventref, IntPtr handle, UInt32 kind, MSG& msg)
}
internal System.Windows.Forms.CarbonInternal.KeyboardHandler : EventHandlerBase {
internal UInt32 kEventRawKeyDown
internal UInt32 kEventRawKeyRepeat
internal UInt32 kEventRawKeyUp
internal UInt32 kEventRawKeyModifiersChanged
internal UInt32 kEventHotKeyPressed
internal UInt32 kEventHotKeyReleased
internal UInt32 kEventParamKeyMacCharCodes
internal UInt32 kEventParamKeyCode
internal UInt32 kEventParamKeyModifiers
internal UInt32 kEventTextInputUnicodeForKeyEvent
internal UInt32 kEventParamTextInputSendText
internal UInt32 typeChar
internal UInt32 typeUInt32
internal UInt32 typeUnicodeText
internal Byte[] key_filter_table
internal Byte[] key_modifier_table
internal Byte[] key_translation_table
internal Byte[] char_translation_table
internal bool translate_modifier
internal string ComposedString
internal Keys ModifierKeys
internal void .ctor(XplatUICarbon driver)
private void ModifierToVirtualKey(int i, MSG& msg, bool down)
public void ProcessModifiers(IntPtr eventref, MSG& msg)
public void ProcessText(IntPtr eventref, MSG& msg)
public void ProcessKeyPress(IntPtr eventref, MSG& msg)
public bool ProcessEvent(IntPtr callref, IntPtr eventref, IntPtr handle, UInt32 kind, MSG& msg)
public bool TranslateMessage(MSG& msg)
internal Keys get_ModifierKeys()
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, UInt32& outsize, IntPtr data)
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, IntPtr outsize, IntPtr data)
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, IntPtr outsize, Byte& data)
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, IntPtr outsize, UInt32& data)
}
internal System.Windows.Forms.CarbonInternal.KeyboardModifiers : Enum {
public UInt32 value__
public KeyboardModifiers activeFlag
public KeyboardModifiers btnState
public KeyboardModifiers cmdKey
public KeyboardModifiers shiftKey
public KeyboardModifiers alphaLock
public KeyboardModifiers optionKey
public KeyboardModifiers controlKey
public KeyboardModifiers rightShiftKey
public KeyboardModifiers rightOptionKey
public KeyboardModifiers rightControlKey
}
internal System.Windows.Forms.CarbonInternal.MouseHandler : EventHandlerBase {
internal UInt32 kEventMouseDown
internal UInt32 kEventMouseUp
internal UInt32 kEventMouseMoved
internal UInt32 kEventMouseDragged
internal UInt32 kEventMouseEntered
internal UInt32 kEventMouseExited
internal UInt32 kEventMouseWheelMoved
internal UInt32 kEventMouseScroll
internal UInt32 kEventParamMouseLocation
internal UInt32 kEventParamMouseButton
internal UInt32 kEventParamMouseWheelAxis
internal UInt32 kEventParamMouseWheelDelta
internal UInt32 typeLongInteger
internal UInt32 typeMouseWheelAxis
internal UInt32 typeMouseButton
internal UInt32 typeQDPoint
internal UInt32 kEventMouseWheelAxisX
internal UInt32 kEventMouseWheelAxisY
internal UInt32 DoubleClickInterval
internal ClickStruct ClickPending
internal void .ctor(XplatUICarbon driver)
public bool ProcessEvent(IntPtr callref, IntPtr eventref, IntPtr handle, UInt32 kind, MSG& msg)
internal bool TranslateMessage(MSG& msg)
private void UpdateMouseState(int button, bool down)
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, IntPtr outsize, QDPoint& data)
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, IntPtr outsize, Int32& data)
private int GetEventParameter(IntPtr eventref, UInt32 name, UInt32 type, IntPtr outtype, UInt32 size, IntPtr outsize, UInt16& data)
internal short FindWindow(QDPoint point, IntPtr& handle)
internal int GetWindowBounds(IntPtr handle, UInt32 region, Rect& bounds)
internal int HIViewConvertPoint(CGPoint& point, IntPtr source_view, IntPtr target_view)
internal IntPtr HIViewGetRoot(IntPtr handle)
internal int HIViewGetSubviewHit(IntPtr content_view, CGPoint& point, bool tval, IntPtr& hit_view)
internal int HIViewFindByID(IntPtr root_window, HIViewID id, IntPtr& view_handle)
internal int GetCurrentEventButtonState()
}
internal System.Windows.Forms.CarbonInternal.MouseTrackingRegionID : ValueType {
public UInt32 signature
public UInt32 id
public void .ctor(UInt32 signature, UInt32 id)
}
internal System.Windows.Forms.CarbonInternal.MouseTrackingResult : Enum {
public ushort value__
public MouseTrackingResult kMouseTrackingMouseDown
public MouseTrackingResult kMouseTrackingMouseUp
public MouseTrackingResult kMouseTrackingMouseExited
public MouseTrackingResult kMouseTrackingMouseEntered
public MouseTrackingResult kMouseTrackingMouseDragged
public MouseTrackingResult kMouseTrackingKeyModifiersChanged
public MouseTrackingResult kMouseTrackingUserCancelled
public MouseTrackingResult kMouseTrackingTimedOut
public MouseTrackingResult kMouseTrackingMouseMoved
}
internal System.Windows.Forms.CarbonInternal.Pasteboard : object {
private IntPtr primary_pbref
private IntPtr app_pbref
private IntPtr internal_format
internal IntPtr Primary
internal IntPtr Application
internal object Retrieve(IntPtr pbref, int key)
internal void Store(IntPtr pbref, object data, int key)
internal IntPtr get_Primary()
internal IntPtr get_Application()
private IntPtr CFDataCreate(IntPtr allocator, IntPtr& buf, int length)
private IntPtr CFDataGetBytePtr(IntPtr data)
private int PasteboardClear(IntPtr pbref)
private int PasteboardCreate(IntPtr str, IntPtr& pbref)
private int PasteboardCopyItemFlavorData(IntPtr pbref, UInt32 itemid, UInt32 key, IntPtr& data)
private int PasteboardGetItemCount(IntPtr pbref, UInt32& count)
private int PasteboardGetItemIdentifier(IntPtr pbref, UInt32 itemindex, UInt32& itemid)
private int PasteboardPutItemFlavor(IntPtr pbref, UInt32 itemid, UInt32 key, IntPtr data, UInt32 flags)
}
internal System.Windows.Forms.CarbonInternal.ProcessSerialNumber : ValueType {
public ulong highLongOfPSN
public ulong lowLongOfPSN
}
internal System.Windows.Forms.CarbonInternal.QDPoint : ValueType {
public short y
public short x
public void .ctor(short x, short y)
}
internal System.Windows.Forms.CarbonInternal.Rect : ValueType {
public short top
public short left
public short bottom
public short right
}
internal System.Windows.Forms.CarbonInternal.RGBColor : ValueType {
public short red
public short green
public short blue
}
internal System.Windows.Forms.CarbonInternal.ThemeCursor : Enum {
public UInt32 value__
public ThemeCursor kThemeArrowCursor
public ThemeCursor kThemeCopyArrowCursor
public ThemeCursor kThemeAliasArrowCursor
public ThemeCursor kThemeContextualMenuArrowCursor
public ThemeCursor kThemeIBeamCursor
public ThemeCursor kThemeCrossCursor
public ThemeCursor kThemePlusCursor
public ThemeCursor kThemeWatchCursor
public ThemeCursor kThemeClosedHandCursor
public ThemeCursor kThemeOpenHandCursor
public ThemeCursor kThemePointingHandCursor
public ThemeCursor kThemeCountingUpHandCursor
public ThemeCursor kThemeCountingDownHandCursor
public ThemeCursor kThemeCountingUpAndDownHandCursor
public ThemeCursor kThemeSpinningCursor
public ThemeCursor kThemeResizeLeftCursor
public ThemeCursor kThemeResizeRightCursor
public ThemeCursor kThemeResizeLeftRightCursor
public ThemeCursor kThemeNotAllowedCursor
}
internal System.Windows.Forms.CarbonInternal.WindowAttributes : Enum {
public UInt32 value__
public WindowAttributes kWindowNoAttributes
public WindowAttributes kWindowCloseBoxAttribute
public WindowAttributes kWindowHorizontalZoomAttribute
public WindowAttributes kWindowVerticalZoomAttribute
public WindowAttributes kWindowFullZoomAttribute
public WindowAttributes kWindowCollapseBoxAttribute
public WindowAttributes kWindowResizableAttribute
public WindowAttributes kWindowSideTitlebarAttribute
public WindowAttributes kWindowToolbarButtonAttribute
public WindowAttributes kWindowMetalAttribute
public WindowAttributes kWindowNoUpdatesAttribute
public WindowAttributes kWindowNoActivatesAttribute
public WindowAttributes kWindowOpaqueForEventsAttribute
public WindowAttributes kWindowCompositingAttribute
public WindowAttributes kWindowNoShadowAttribute
public WindowAttributes kWindowHideOnSuspendAttribute
public WindowAttributes kWindowStandardHandlerAttribute
public WindowAttributes kWindowHideOnFullScreenAttribute
public WindowAttributes kWindowInWindowMenuAttribute
public WindowAttributes kWindowLiveResizeAttribute
public WindowAttributes kWindowIgnoreClicksAttribute
public WindowAttributes kWindowNoConstrainAttribute
public WindowAttributes kWindowStandardDocumentAttributes
public WindowAttributes kWindowStandardFloatingAttributes
}
internal System.Windows.Forms.CarbonInternal.WindowClass : Enum {
public UInt32 value__
public WindowClass kAlertWindowClass
public WindowClass kMovableAlertWindowClass
public WindowClass kModalWindowClass
public WindowClass kMovableModalWindowClass
public WindowClass kFloatingWindowClass
public WindowClass kDocumentWindowClass
public WindowClass kUtilityWindowClass
public WindowClass kHelpWindowClass
public WindowClass kSheetWindowClass
public WindowClass kToolbarWindowClass
public WindowClass kPlainWindowClass
public WindowClass kOverlayWindowClass
public WindowClass kSheetAlertWindowClass
public WindowClass kAltPlainWindowClass
public WindowClass kDrawerWindowClass
public WindowClass kAllWindowClasses
}
internal System.Windows.Forms.CarbonInternal.WindowHandler : EventHandlerBase {
internal UInt32 kEventWindowUpdate
internal UInt32 kEventWindowDrawContent
internal UInt32 kEventWindowActivated
internal UInt32 kEventWindowDeactivated
internal UInt32 kEventWindowGetClickActivation
internal UInt32 kEventWindowShowing
internal UInt32 kEventWindowHiding
internal UInt32 kEventWindowShown
internal UInt32 kEventWindowHidden
internal UInt32 kEventWindowCollapsing
internal UInt32 kEventWindowExpanding
internal UInt32 kEventWindowZoomed
internal UInt32 kEventWindowBoundsChanging
internal UInt32 kEventWindowBoundsChanged
internal UInt32 kEventWindowResizeStarted
internal UInt32 kEventWindowResizeCompleted
internal UInt32 kEventWindowDragStarted
internal UInt32 kEventWindowDragCompleted
internal UInt32 kEventWindowTransitionStarted
internal UInt32 kEventWindowTransitionCompleted
internal UInt32 kEventWindowClickDragRgn
internal UInt32 kEventWindowClickResizeRgn
internal UInt32 kEventWindowClickCollapseRgn
internal UInt32 kEventWindowClickCloseRgn
internal UInt32 kEventWindowClickZoomRgn
internal UInt32 kEventWindowClickContentRgn
internal UInt32 kEventWindowClickProxyIconRgn
internal UInt32 kEventWindowClickToolbarButtonRgn
internal UInt32 kEventWindowClickStructureRgn
internal UInt32 kEventWindowCursorChange
internal UInt32 kEventWindowCollapse
internal UInt32 kEventWindowCollapsed
internal UInt32 kEventWindowCollapseAll
internal UInt32 kEventWindowExpand
internal UInt32 kEventWindowExpanded
internal UInt32 kEventWindowExpandAll
internal UInt32 kEventWindowClose
internal UInt32 kEventWindowClosed
internal UInt32 kEventWindowCloseAll
internal UInt32 kEventWindowZoom
internal UInt32 kEventWindowZoomAll
internal UInt32 kEventWindowContextualMenuSelect
internal UInt32 kEventWindowPathSelect
internal UInt32 kEventWindowGetIdealSize
internal UInt32 kEventWindowGetMinimumSize
internal UInt32 kEventWindowGetMaximumSize
internal UInt32 kEventWindowConstrain
internal UInt32 kEventWindowHandleContentClick
internal UInt32 kEventWindowGetDockTileMenu
internal UInt32 kEventWindowHandleActivate
internal UInt32 kEventWindowHandleDeactivate
internal UInt32 kEventWindowProxyBeginDrag
internal UInt32 kEventWindowProxyEndDrag
internal UInt32 kEventWindowToolbarSwitchMode
internal UInt32 kEventWindowFocusAcquired
internal UInt32 kEventWindowFocusRelinquish
internal UInt32 kEventWindowFocusContent
internal UInt32 kEventWindowFocusToolbar
internal UInt32 kEventWindowDrawerOpening
internal UInt32 kEventWindowDrawerOpened
internal UInt32 kEventWindowDrawerClosing
internal UInt32 kEventWindowDrawerClosed
internal UInt32 kEventWindowDrawFrame
internal UInt32 kEventWindowDrawPart
internal UInt32 kEventWindowGetRegion
internal UInt32 kEventWindowHitTest
internal UInt32 kEventWindowInit
internal UInt32 kEventWindowDispose
internal UInt32 kEventWindowDragHilite
internal UInt32 kEventWindowModified
internal UInt32 kEventWindowSetupProxyDragImage
internal UInt32 kEventWindowStateChanged
internal UInt32 kEventWindowMeasureTitle
internal UInt32 kEventWindowDrawGrowBox
internal UInt32 kEventWindowGetGrowImageRegion
internal UInt32 kEventWindowPaint
internal void .ctor(XplatUICarbon driver)
public bool ProcessEvent(IntPtr callref, IntPtr eventref, IntPtr handle, UInt32 kind, MSG& msg)
private int GetWindowBounds(IntPtr handle, UInt32 region, Rect& bounds)
private int HIViewSetFrame(IntPtr handle, HIRect& bounds)
}
internal System.Windows.Forms.CaretDirection : Enum {
public int value__
public CaretDirection CharForward
public CaretDirection CharBack
public CaretDirection LineUp
public CaretDirection LineDown
public CaretDirection Home
public CaretDirection End
public CaretDirection PgUp
public CaretDirection PgDn
public CaretDirection CtrlPgUp
public CaretDirection CtrlPgDn
public CaretDirection CtrlHome
public CaretDirection CtrlEnd
public CaretDirection WordBack
public CaretDirection WordForward
public CaretDirection SelectionStart
public CaretDirection SelectionEnd
public CaretDirection CharForwardNoWrap
public CaretDirection CharBackNoWrap
}
internal System.Windows.Forms.CaretSelection : Enum {
public int value__
public CaretSelection Position
public CaretSelection Word
public CaretSelection Line
}
internal System.Windows.Forms.CaretStruct : ValueType {
internal Timer Timer
internal IntPtr Hwnd
internal IntPtr Window
internal int X
internal int Y
internal int Width
internal int Height
internal bool Visible
internal bool On
internal IntPtr gc
internal bool Paused
}
internal System.Windows.Forms.ChangeWindowFlags : Enum {
public int value__
public ChangeWindowFlags CWX
public ChangeWindowFlags CWY
public ChangeWindowFlags CWWidth
public ChangeWindowFlags CWHeight
public ChangeWindowFlags CWBorderWidth
public ChangeWindowFlags CWSibling
public ChangeWindowFlags CWStackMode
}
public System.Windows.Forms.CharacterCasing : Enum {
public int value__
public CharacterCasing Normal
public CharacterCasing Upper
public CharacterCasing Lower
}
public System.Windows.Forms.CheckBox : ButtonBase {
internal Appearance appearance
internal bool auto_check
internal ContentAlignment check_alignment
internal CheckState check_state
internal bool three_state
private object AppearanceChangedEvent
private object CheckedChangedEvent
private object CheckStateChangedEvent
private EventHandler DoubleClick
public Appearance Appearance
public bool AutoCheck
public ContentAlignment CheckAlign
public bool Checked
public CheckState CheckState
public ContentAlignment TextAlign
public bool ThreeState
protected CreateParams CreateParams
protected Size DefaultSize
internal void Draw(PaintEventArgs pe)
internal Size GetPreferredSizeCore(Size proposedSize)
internal void HaveDoubleClick()
public Appearance get_Appearance()
public void set_Appearance(Appearance value)
public bool get_AutoCheck()
public void set_AutoCheck(bool value)
public ContentAlignment get_CheckAlign()
public void set_CheckAlign(ContentAlignment value)
public bool get_Checked()
public void set_Checked(bool value)
public CheckState get_CheckState()
public void set_CheckState(CheckState value)
public ContentAlignment get_TextAlign()
public void set_TextAlign(ContentAlignment value)
public bool get_ThreeState()
public void set_ThreeState(bool value)
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected void OnAppearanceChanged(EventArgs e)
protected void OnCheckedChanged(EventArgs e)
protected void OnCheckStateChanged(EventArgs e)
protected void OnClick(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnKeyDown(KeyEventArgs e)
protected void OnMouseUp(MouseEventArgs mevent)
protected bool ProcessMnemonic(char charCode)
public void add_AppearanceChanged(EventHandler value)
public void remove_AppearanceChanged(EventHandler value)
public void add_CheckedChanged(EventHandler value)
public void remove_CheckedChanged(EventHandler value)
public void add_CheckStateChanged(EventHandler value)
public void remove_CheckStateChanged(EventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
}
public System.Windows.Forms.CheckBoxRenderer : object {
private bool always_use_visual_styles
public bool RenderMatchingApplicationState
public void DrawCheckBox(Graphics g, Point glyphLocation, CheckBoxState state)
public void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, bool focused, CheckBoxState state)
public void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, TextFormatFlags flags, bool focused, CheckBoxState state)
public void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, Image image, Rectangle imageBounds, bool focused, CheckBoxState state)
public void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, CheckBoxState state)
public bool IsBackgroundPartiallyTransparent(CheckBoxState state)
public void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl)
public Size GetGlyphSize(Graphics g, CheckBoxState state)
private VisualStyleRenderer GetCheckBoxRenderer(CheckBoxState state)
public bool get_RenderMatchingApplicationState()
public void set_RenderMatchingApplicationState(bool value)
}
public System.Windows.Forms.CheckedListBox : ListBox {
private CheckedIndexCollection checked_indices
private CheckedItemCollection checked_items
private Hashtable check_states
private bool check_onclick
private bool three_dcheckboxes
private object ItemCheckEvent
private int last_clicked_index
public CheckedIndexCollection CheckedIndices
public CheckedItemCollection CheckedItems
public bool CheckOnClick
protected CreateParams CreateParams
public object DataSource
public string DisplayMember
public DrawMode DrawMode
public int ItemHeight
public ObjectCollection Items
public SelectionMode SelectionMode
public bool ThreeDCheckBoxes
public string ValueMember
public Padding Padding
public bool UseCompatibleTextRendering
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public void add_DisplayMemberChanged(EventHandler value)
public void remove_DisplayMemberChanged(EventHandler value)
public void add_DrawItem(DrawItemEventHandler value)
public void remove_DrawItem(DrawItemEventHandler value)
public void add_MeasureItem(MeasureItemEventHandler value)
public void remove_MeasureItem(MeasureItemEventHandler value)
public void add_ValueMemberChanged(EventHandler value)
public void remove_ValueMemberChanged(EventHandler value)
public void add_ItemCheck(ItemCheckEventHandler value)
public void remove_ItemCheck(ItemCheckEventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public CheckedIndexCollection get_CheckedIndices()
public CheckedItemCollection get_CheckedItems()
public bool get_CheckOnClick()
public void set_CheckOnClick(bool value)
protected CreateParams get_CreateParams()
public object get_DataSource()
public void set_DataSource(object value)
public string get_DisplayMember()
public void set_DisplayMember(string value)
public DrawMode get_DrawMode()
public void set_DrawMode(DrawMode value)
public int get_ItemHeight()
public void set_ItemHeight(int value)
public ObjectCollection get_Items()
public SelectionMode get_SelectionMode()
public void set_SelectionMode(SelectionMode value)
public bool get_ThreeDCheckBoxes()
public void set_ThreeDCheckBoxes(bool value)
public string get_ValueMember()
public void set_ValueMember(string value)
public Padding get_Padding()
public void set_Padding(Padding value)
protected AccessibleObject CreateAccessibilityInstance()
protected ObjectCollection CreateItemCollection()
public bool GetItemChecked(int index)
public CheckState GetItemCheckState(int index)
protected void OnBackColorChanged(EventArgs e)
protected void OnClick(EventArgs e)
protected void OnDrawItem(DrawItemEventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnItemCheck(ItemCheckEventArgs ice)
protected void OnKeyPress(KeyPressEventArgs e)
protected void OnMeasureItem(MeasureItemEventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void RefreshItems()
public void SetItemChecked(int index, bool value)
public void SetItemCheckState(int index, CheckState value)
protected void WmReflectCommand(Message& m)
protected void WndProc(Message& m)
internal void OnItemClick(int index)
internal void CollectionChanged()
private void InvalidateCheckbox(int index)
private void UpdateCollections()
public bool get_UseCompatibleTextRendering()
public void set_UseCompatibleTextRendering(bool value)
}
public System.Windows.Forms.CheckState : Enum {
public int value__
public CheckState Unchecked
public CheckState Checked
public CheckState Indeterminate
}
internal System.Windows.Forms.ClickStruct : ValueType {
internal IntPtr Hwnd
internal Msg Message
internal IntPtr wParam
internal IntPtr lParam
internal long Time
internal bool Pending
}
public System.Windows.Forms.Clipboard : object {
private bool ConvertToClipboardData(Int32& type, object obj, Byte[]& data)
private bool ConvertFromClipboardData(int type, IntPtr data, Object& obj)
public void Clear()
public bool ContainsAudio()
public bool ContainsData(string format)
public bool ContainsFileDropList()
public bool ContainsImage()
public bool ContainsText()
public bool ContainsText(TextDataFormat format)
public Stream GetAudioStream()
public object GetData(string format)
public IDataObject GetDataObject()
public StringCollection GetFileDropList()
public Image GetImage()
public string GetText()
public string GetText(TextDataFormat format)
public void SetAudio(Byte[] audioBytes)
public void SetAudio(Stream audioStream)
public void SetData(string format, object data)
public void SetDataObject(object data)
public void SetDataObject(object data, bool copy)
internal void SetDataObjectImpl(object data, bool copy)
private bool IsDataSerializable(object obj)
public void SetDataObject(object data, bool copy, int retryTimes, int retryDelay)
public void SetFileDropList(StringCollection filePaths)
public void SetImage(Image image)
public void SetText(string text)
public void SetText(string text, TextDataFormat format)
internal IDataObject GetDataObject(bool primary_selection)
internal bool ClipboardContainsFormat(String[] formats)
}
internal System.Windows.Forms.ClipboardData : object {
private ListDictionary source_data
private string plain_text_source
private Image image_source
internal object Item
internal ArrayList Formats
internal bool Retrieving
internal bool Enumerating
internal ObjectToClipboard Converter
public bool IsSourceText
public bool IsSourceImage
public void ClearSources()
public void AddSource(int type, object source)
public object GetSource(int type)
public string GetPlainText()
public string GetRtfText()
public Image GetImage()
public bool get_IsSourceText()
public bool get_IsSourceImage()
}
internal System.Windows.Forms.ClipboardFormats : Enum {
public ushort value__
public ClipboardFormats CF_TEXT
public ClipboardFormats CF_BITMAP
public ClipboardFormats CF_METAFILEPICT
public ClipboardFormats CF_SYLK
public ClipboardFormats CF_DIF
public ClipboardFormats CF_TIFF
public ClipboardFormats CF_OEMTEXT
public ClipboardFormats CF_DIB
public ClipboardFormats CF_PALETTE
public ClipboardFormats CF_PENDATA
public ClipboardFormats CF_RIFF
public ClipboardFormats CF_WAVE
public ClipboardFormats CF_UNICODETEXT
public ClipboardFormats CF_ENHMETAFILE
public ClipboardFormats CF_HDROP
public ClipboardFormats CF_LOCALE
public ClipboardFormats CF_DIBV5
}
internal System.Windows.Forms.ClipCombineMode : Enum {
public int value__
public ClipCombineMode RGN_AND
public ClipCombineMode RGN_OR
public ClipCombineMode RGN_XOR
public ClipCombineMode RGN_DIFF
public ClipCombineMode RGN_COPY
public ClipCombineMode RGN_MIN
public ClipCombineMode RGN_MAX
}
public System.Windows.Forms.CloseReason : Enum {
public int value__
public CloseReason None
public CloseReason WindowsShutDown
public CloseReason MdiFormClosing
public CloseReason UserClosing
public CloseReason TaskManagerClosing
public CloseReason FormOwnerClosing
public CloseReason ApplicationExitCall
}
public System.Windows.Forms.ColorDepth : Enum {
public int value__
public ColorDepth Depth4Bit
public ColorDepth Depth8Bit
public ColorDepth Depth16Bit
public ColorDepth Depth24Bit
public ColorDepth Depth32Bit
}
public System.Windows.Forms.ColorDialog : CommonDialog {
private bool allowFullOpen
private bool anyColor
private Color color
private Int32[] customColors
private bool fullOpen
private bool showHelp
private bool solidColorOnly
private Panel selectedColorPanel
private BaseColorControl baseColorControl
private ColorMatrixControl colorMatrixControl
private BrightnessControl brightnessControl
private TriangleControl triangleControl
private Button okButton
private Button cancelButton
private Button helpButton
private Button addColoursButton
private Button defineColoursButton
private TextBox hueTextBox
private TextBox satTextBox
private TextBox briTextBox
private TextBox redTextBox
private TextBox greenTextBox
private TextBox blueTextBox
private Label briLabel
private Label satLabel
private Label hueLabel
private Label colorBaseLabel
private Label greenLabel
private Label blueLabel
private Label redLabel
private string textBox_text_old
internal TextBox edit_textbox
private bool internal_textbox_change
public Color Color
public bool AllowFullOpen
public bool AnyColor
public bool FullOpen
public Int32[] CustomColors
public bool ShowHelp
public bool SolidColorOnly
protected IntPtr Instance
protected int Options
public Color get_Color()
public void set_Color(Color value)
public bool get_AllowFullOpen()
public void set_AllowFullOpen(bool value)
public bool get_AnyColor()
public void set_AnyColor(bool value)
public bool get_FullOpen()
public void set_FullOpen(bool value)
public Int32[] get_CustomColors()
public void set_CustomColors(Int32[] value)
public bool get_ShowHelp()
public void set_ShowHelp(bool value)
public bool get_SolidColorOnly()
public void set_SolidColorOnly(bool value)
public void Reset()
public string ToString()
protected IntPtr get_Instance()
protected int get_Options()
protected bool RunDialog(IntPtr hwndOwner)
private Size GetFormSize(bool fullOpen)
private void OnClickCancelButton(object sender, EventArgs e)
private void OnClickOkButton(object sender, EventArgs e)
private void OnClickButtonAddColours(object sender, EventArgs e)
private void OnClickButtonDefineColours(object sender, EventArgs e)
private void OnClickHelpButton(object sender, EventArgs e)
private void OnGotFocusTextBoxes(object sender, EventArgs e)
private void OnLostFocusTextBoxes(object sender, EventArgs e)
private void OnKeyPressTextBoxes(object sender, KeyPressEventArgs e)
private void OnTextChangedTextBoxes(object sender, EventArgs e)
internal void UpdateControls(Color acolor)
internal void UpdateRGBTextBoxes(Color acolor)
internal void UpdateHSBTextBoxes(Color acolor)
internal void UpdateFromHSBTextBoxes()
internal void UpdateFromRGBTextBoxes()
private void ResetCustomColors()
}
internal System.Windows.Forms.ColorFlags : Enum {
public int value__
public ColorFlags DoRed
public ColorFlags DoGreen
public ColorFlags DoBlue
}
public System.Windows.Forms.ColumnClickEventArgs : EventArgs {
private int column
public int Column
public void .ctor(int column)
public int get_Column()
}
public System.Windows.Forms.ColumnClickEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ColumnClickEventArgs e)
public IAsyncResult BeginInvoke(object sender, ColumnClickEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ColumnHeader : Component {
private StringFormat format
private string text
private HorizontalAlignment text_alignment
private int width
private int image_index
private string image_key
private string name
private object tag
private int display_index
private Rectangle column_rect
private bool pressed
private ListView owner
private object UIATextChangedEvent
internal bool Pressed
internal int X
internal int Y
internal int Wd
internal int Ht
internal Rectangle Rect
internal StringFormat Format
internal int InternalDisplayIndex
public int DisplayIndex
public int ImageIndex
public string ImageKey
public ImageList ImageList
public int Index
public ListView ListView
public string Name
public object Tag
public string Text
public HorizontalAlignment TextAlign
public int Width
internal void .ctor(ListView owner, string text, HorizontalAlignment alignment, int width)
internal void .ctor(string key, string text, int width, HorizontalAlignment textAlign)
public void .ctor(int imageIndex)
public void .ctor(string imageKey)
internal bool get_Pressed()
internal void set_Pressed(bool value)
internal int get_X()
internal void set_X(int value)
internal int get_Y()
internal void set_Y(int value)
internal int get_Wd()
internal void set_Wd(int value)
internal int get_Ht()
internal void set_Ht(int value)
internal Rectangle get_Rect()
internal void set_Rect(Rectangle value)
internal StringFormat get_Format()
internal int get_InternalDisplayIndex()
internal void set_InternalDisplayIndex(int value)
internal void CalcColumnHeader()
internal void SetListView(ListView list_view)
public int get_DisplayIndex()
public void set_DisplayIndex(int value)
public int get_ImageIndex()
public void set_ImageIndex(int value)
public string get_ImageKey()
public void set_ImageKey(string value)
public ImageList get_ImageList()
public int get_Index()
public ListView get_ListView()
public string get_Name()
public void set_Name(string value)
public object get_Tag()
public void set_Tag(object value)
public string get_Text()
public void set_Text(string value)
public HorizontalAlignment get_TextAlign()
public void set_TextAlign(HorizontalAlignment value)
public int get_Width()
public void set_Width(int value)
public void AutoResize(ColumnHeaderAutoResizeStyle headerAutoResize)
public object Clone()
public string ToString()
protected void Dispose(bool disposing)
internal void add_UIATextChanged(EventHandler value)
internal void remove_UIATextChanged(EventHandler value)
private void OnUIATextChanged()
}
public System.Windows.Forms.ColumnHeaderAutoResizeStyle : Enum {
public int value__
public ColumnHeaderAutoResizeStyle None
public ColumnHeaderAutoResizeStyle HeaderSize
public ColumnHeaderAutoResizeStyle ColumnContent
}
public System.Windows.Forms.ColumnHeaderConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Windows.Forms.ColumnHeaderStyle : Enum {
public int value__
public ColumnHeaderStyle None
public ColumnHeaderStyle Nonclickable
public ColumnHeaderStyle Clickable
}
public System.Windows.Forms.ColumnReorderedEventArgs : CancelEventArgs {
private ColumnHeader header
private int new_display_index
private int old_display_index
public int OldDisplayIndex
public int NewDisplayIndex
public ColumnHeader Header
public void .ctor(int oldDisplayIndex, int newDisplayIndex, ColumnHeader header)
public int get_OldDisplayIndex()
public int get_NewDisplayIndex()
public ColumnHeader get_Header()
}
public System.Windows.Forms.ColumnReorderedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ColumnReorderedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ColumnReorderedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ColumnStyle : TableLayoutStyle {
private float width
public float Width
public void .ctor(SizeType sizeType)
public void .ctor(SizeType sizeType, float width)
public float get_Width()
public void set_Width(float value)
}
public System.Windows.Forms.ColumnWidthChangedEventArgs : EventArgs {
private int column_index
public int ColumnIndex
public void .ctor(int columnIndex)
public int get_ColumnIndex()
}
public System.Windows.Forms.ColumnWidthChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ColumnWidthChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ColumnWidthChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ColumnWidthChangingEventArgs : CancelEventArgs {
private int column_index
private int new_width
public int ColumnIndex
public int NewWidth
public void .ctor(int columnIndex, int newWidth)
public void .ctor(int columnIndex, int newWidth, bool cancel)
public int get_ColumnIndex()
public int get_NewWidth()
public void set_NewWidth(int value)
}
public System.Windows.Forms.ColumnWidthChangingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ColumnWidthChangingEventArgs e)
public IAsyncResult BeginInvoke(object sender, ColumnWidthChangingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ComboBox : ListControl {
private DrawMode draw_mode
private ComboBoxStyle dropdown_style
private int dropdown_width
private int selected_index
private ObjectCollection items
private bool suspend_ctrlupdate
private int maxdrop_items
private bool integral_height
private bool sorted
private int max_length
private ComboListBox listbox_ctrl
private ComboTextBox textbox_ctrl
private bool process_textchanged_event
private bool process_texchanged_autoscroll
private bool item_height_specified
private int item_height
private int requested_height
private Hashtable item_heights
private bool show_dropdown_button
private ButtonState button_state
private bool dropped_down
private Rectangle text_area
private Rectangle button_area
private Rectangle listbox_area
private int button_width
private bool drop_down_button_entered
private AutoCompleteStringCollection auto_complete_custom_source
private AutoCompleteMode auto_complete_mode
private AutoCompleteSource auto_complete_source
private FlatStyle flat_style
private int drop_down_height
private int default_drop_down_height
private object DrawItemEvent
private object DropDownEvent
private object DropDownStyleChangedEvent
private object MeasureItemEvent
private object SelectedIndexChangedEvent
private object SelectionChangeCommittedEvent
private object DropDownClosedEvent
private object TextUpdateEvent
public AutoCompleteStringCollection AutoCompleteCustomSource
public AutoCompleteMode AutoCompleteMode
public AutoCompleteSource AutoCompleteSource
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
protected CreateParams CreateParams
public object DataSource
protected Size DefaultSize
public DrawMode DrawMode
public int DropDownHeight
public ComboBoxStyle DropDownStyle
public int DropDownWidth
public bool DroppedDown
public FlatStyle FlatStyle
public bool Focused
public Color ForeColor
public bool IntegralHeight
public int ItemHeight
public ObjectCollection Items
public int MaxDropDownItems
public Size MaximumSize
public int MaxLength
public Size MinimumSize
public Padding Padding
public int PreferredHeight
public int SelectedIndex
public object SelectedItem
public string SelectedText
public int SelectionLength
public int SelectionStart
public bool Sorted
public string Text
internal Rectangle ButtonArea
internal Rectangle TextArea
internal TextBox UIATextBox
internal ComboListBox UIAComboListBox
internal bool InternalCapture
internal bool DropDownButtonEntered
internal ContextMenu ContextMenuInternal
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_DrawItem(DrawItemEventHandler value)
public void remove_DrawItem(DrawItemEventHandler value)
public void add_DropDown(EventHandler value)
public void remove_DropDown(EventHandler value)
public void add_DropDownClosed(EventHandler value)
public void remove_DropDownClosed(EventHandler value)
public void add_DropDownStyleChanged(EventHandler value)
public void remove_DropDownStyleChanged(EventHandler value)
public void add_MeasureItem(MeasureItemEventHandler value)
public void remove_MeasureItem(MeasureItemEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_SelectedIndexChanged(EventHandler value)
public void remove_SelectedIndexChanged(EventHandler value)
public void add_SelectionChangeCommitted(EventHandler value)
public void remove_SelectionChangeCommitted(EventHandler value)
public void add_TextUpdate(EventHandler value)
public void remove_TextUpdate(EventHandler value)
public AutoCompleteStringCollection get_AutoCompleteCustomSource()
public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value)
public AutoCompleteMode get_AutoCompleteMode()
public void set_AutoCompleteMode(AutoCompleteMode value)
public AutoCompleteSource get_AutoCompleteSource()
public void set_AutoCompleteSource(AutoCompleteSource value)
private void SetTextBoxAutoCompleteData()
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
protected CreateParams get_CreateParams()
public object get_DataSource()
public void set_DataSource(object value)
protected Size get_DefaultSize()
public DrawMode get_DrawMode()
public void set_DrawMode(DrawMode value)
public int get_DropDownHeight()
public void set_DropDownHeight(int value)
public ComboBoxStyle get_DropDownStyle()
public void set_DropDownStyle(ComboBoxStyle value)
public int get_DropDownWidth()
public void set_DropDownWidth(int value)
public bool get_DroppedDown()
public void set_DroppedDown(bool value)
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public bool get_Focused()
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_IntegralHeight()
public void set_IntegralHeight(bool value)
public int get_ItemHeight()
public void set_ItemHeight(int value)
public ObjectCollection get_Items()
public int get_MaxDropDownItems()
public void set_MaxDropDownItems(int value)
public Size get_MaximumSize()
public void set_MaximumSize(Size value)
public int get_MaxLength()
public void set_MaxLength(int value)
public Size get_MinimumSize()
public void set_MinimumSize(Size value)
public Padding get_Padding()
public void set_Padding(Padding value)
public int get_PreferredHeight()
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public object get_SelectedItem()
public void set_SelectedItem(object value)
public string get_SelectedText()
public void set_SelectedText(string value)
public int get_SelectionLength()
public void set_SelectionLength(int value)
public int get_SelectionStart()
public void set_SelectionStart(int value)
public bool get_Sorted()
public void set_Sorted(bool value)
public string get_Text()
public void set_Text(string value)
internal Rectangle get_ButtonArea()
internal Rectangle get_TextArea()
internal TextBox get_UIATextBox()
internal ComboListBox get_UIAComboListBox()
protected void AddItemsCore(Object[] value)
public void BeginUpdate()
protected AccessibleObject CreateAccessibilityInstance()
protected void CreateHandle()
protected void Dispose(bool disposing)
public void EndUpdate()
public int FindString(string s)
public int FindString(string s, int startIndex)
public int FindStringExact(string s)
public int FindStringExact(string s, int startIndex)
private int FindStringExact(string s, int startIndex, bool ignoreCase)
public int GetItemHeight(int index)
protected bool IsInputKey(Keys keyData)
protected void OnBackColorChanged(EventArgs e)
protected void OnDataSourceChanged(EventArgs e)
private void SetSelectedIndex()
protected void OnDisplayMemberChanged(EventArgs e)
protected void OnDrawItem(DrawItemEventArgs e)
internal void HandleDrawItem(DrawItemEventArgs e)
protected void OnDropDown(EventArgs e)
protected void OnDropDownClosed(EventArgs e)
protected void OnDropDownStyleChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnGotFocus(EventArgs e)
protected void OnLostFocus(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnKeyPress(KeyPressEventArgs e)
protected void OnMeasureItem(MeasureItemEventArgs e)
protected void OnParentBackColorChanged(EventArgs e)
protected void OnResize(EventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void OnSelectedItemChanged(EventArgs e)
protected void OnSelectedValueChanged(EventArgs e)
protected void OnSelectionChangeCommitted(EventArgs e)
protected void RefreshItem(int index)
protected void RefreshItems()
public void ResetText()
protected bool ProcessKeyEventArgs(Message& m)
protected void OnKeyDown(KeyEventArgs e)
protected void OnValidating(CancelEventArgs e)
protected void OnTextChanged(EventArgs e)
protected void OnTextUpdate(EventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseEnter(EventArgs e)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
public void Select(int start, int length)
public void SelectAll()
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void SetItemCore(int index, object value)
protected void SetItemsCore(IList value)
public string ToString()
protected void WndProc(Message& m)
private void OnAutoCompleteCustomSourceChanged(object sender, CollectionChangeEventArgs e)
internal bool get_InternalCapture()
internal void set_InternalCapture(bool value)
private void LayoutComboBox()
private void CreateComboListBox()
internal void Draw(Rectangle clip, Graphics dc)
internal bool get_DropDownButtonEntered()
private void set_DropDownButtonEntered(bool value)
internal void DropDownListBox()
internal void DropDownListBoxFinished()
private int FindStringCaseInsensitive(string search)
internal int FindStringCaseInsensitive(string search, int start_index)
internal bool IsInputCharInternal(char charCode)
internal ContextMenu get_ContextMenuInternal()
internal void set_ContextMenuInternal(ContextMenu value)
internal void RestoreContextMenu()
private void OnKeyDownCB(object sender, KeyEventArgs e)
private void SetSelectedIndex(int value, bool supressAutoScroll)
private void FindMatchOrSetIndex(int index)
private void OnMouseDownCB(object sender, MouseEventArgs e)
private void OnMouseEnter(object sender, EventArgs e)
private void OnMouseLeave(object sender, EventArgs e)
private void OnMouseMoveCB(object sender, MouseEventArgs e)
private void OnMouseUpCB(object sender, MouseEventArgs e)
private void OnMouseWheelCB(object sender, MouseEventArgs me)
private MouseEventArgs TranslateMouseEventArgs(MouseEventArgs args)
internal void OnPaintInternal(PaintEventArgs pevent)
private void OnTextBoxClick(object sender, EventArgs e)
private void OnTextChangedEdit(object sender, EventArgs e)
private void OnTextKeyPress(object sender, KeyPressEventArgs e)
internal void SetControlText(string s, bool suppressTextChanged)
internal void SetControlText(string s, bool suppressTextChanged, bool supressAutoScroll)
private void UpdateComboBoxBounds()
private int SnapHeight(int height)
private void UpdatedItems()
}
public System.Windows.Forms.ComboBoxRenderer : object {
public bool IsSupported
public void DrawDropDownButton(Graphics g, Rectangle bounds, ComboBoxState state)
public void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, Rectangle textBounds, TextFormatFlags flags, ComboBoxState state)
public void DrawTextBox(Graphics g, Rectangle bounds, ComboBoxState state)
public void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, ComboBoxState state)
public void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, Rectangle textBounds, ComboBoxState state)
public void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, TextFormatFlags flags, ComboBoxState state)
private VisualStyleRenderer GetComboRenderer(ComboBoxState state)
private VisualStyleRenderer GetTextBoxRenderer(ComboBoxState state)
public bool get_IsSupported()
}
public System.Windows.Forms.ComboBoxStyle : Enum {
public int value__
public ComboBoxStyle Simple
public ComboBoxStyle DropDown
public ComboBoxStyle DropDownList
}
public System.Windows.Forms.CommonDialog : Component {
internal DialogForm form
private object tag
private object HelpRequestEvent
public object Tag
public object get_Tag()
public void set_Tag(object value)
internal void InitFormsSize(Form form)
public void Reset()
public DialogResult ShowDialog()
public DialogResult ShowDialog(IWin32Window owner)
protected IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam)
protected void OnHelpRequest(EventArgs e)
protected IntPtr OwnerWndProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam)
protected bool RunDialog(IntPtr hwndOwner)
public void add_HelpRequest(EventHandler value)
public void remove_HelpRequest(EventHandler value)
}
public System.Windows.Forms.ComponentModel.Com2Interop.ICom2PropertyPageDisplayService {
public void ShowPropertyPage(string title, object component, int dispid, Guid pageGuid, IntPtr parentHandle)
}
public System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser {
public bool InPropertySet
public bool get_InPropertySet()
public void DropDownDone()
public bool EnsurePendingChangesCommitted()
public void HandleF4()
public void LoadState(RegistryKey key)
public void SaveState(RegistryKey key)
public void add_ComComponentNameChanged(ComponentRenameEventHandler value)
public void remove_ComComponentNameChanged(ComponentRenameEventHandler value)
}
public System.Windows.Forms.ContainerControl : ScrollableControl {
private Control active_control
private Control unvalidated_control
private ArrayList pending_validation_chain
internal bool auto_select_child
private SizeF auto_scale_dimensions
private AutoScaleMode auto_scale_mode
private bool auto_scale_mode_set
private bool auto_scale_pending
private bool is_auto_scaling
internal bool validation_failed
private bool ValidateWarned
private AutoValidate auto_validate
private object OnValidateChanged
public Control ActiveControl
public SizeF AutoScaleDimensions
protected SizeF AutoScaleFactor
public AutoScaleMode AutoScaleMode
public BindingContext BindingContext
public SizeF CurrentAutoScaleDimensions
public Form ParentForm
protected bool CanEnableIme
protected CreateParams CreateParams
internal bool IsAutoScaling
public AutoValidate AutoValidate
public Control get_ActiveControl()
public void set_ActiveControl(Control value)
private Control PerformValidation(ContainerControl top_container, bool postpone_validation, ArrayList validation_chain, Control topmost_under_root)
private void AddValidationChain(ContainerControl top_container, ArrayList validation_chain)
private bool ValidateControl(Control c)
private Control GetMostDeeplyNestedActiveControl(ContainerControl container)
private Control GetCommonContainer(Control active_control, Control value)
internal void SendControlFocus(Control c)
public SizeF get_AutoScaleDimensions()
public void set_AutoScaleDimensions(SizeF value)
protected SizeF get_AutoScaleFactor()
public AutoScaleMode get_AutoScaleMode()
public void set_AutoScaleMode(AutoScaleMode value)
public BindingContext get_BindingContext()
public void set_BindingContext(BindingContext value)
public SizeF get_CurrentAutoScaleDimensions()
public Form get_ParentForm()
protected bool get_CanEnableIme()
protected CreateParams get_CreateParams()
internal void PerformAutoScale(bool called_by_scale)
public void PerformAutoScale()
internal void PerformDelayedAutoScale()
internal bool get_IsAutoScaling()
public bool Validate()
public bool Validate(bool checkAutoValidate)
public bool ValidateChildren()
public bool ValidateChildren(ValidationConstraints validationConstraints)
private bool System.Windows.Forms.IContainerControl.ActivateControl(Control control)
protected void AdjustFormScrollbars(bool displayScrollbars)
protected void Dispose(bool disposing)
private void OnControlRemoved(object sender, ControlEventArgs e)
protected void OnCreateControl()
protected bool ProcessCmdKey(Message& msg, Keys keyData)
protected bool ProcessDialogChar(char charCode)
protected bool ProcessDialogKey(Keys keyData)
protected bool ProcessMnemonic(char charCode)
protected bool ProcessTabKey(bool forward)
protected void Select(bool directed, bool forward)
protected void UpdateDefaultButton()
protected void WndProc(Message& m)
internal void ChildControlRemoved(Control control)
private bool RemoveChildrenFromValidation(ArrayList validation_chain, Control c)
private bool RemoveFromValidationChain(ArrayList validation_chain, Control c)
internal void CheckAcceptButton()
private bool ValidateNestedControls(Control c, ValidationConstraints constraints, bool recurse)
private bool ValidateThisControl(Control c, ValidationConstraints constraints)
protected void OnParentChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnLayout(LayoutEventArgs e)
public AutoValidate get_AutoValidate()
public void set_AutoValidate(AutoValidate value)
internal bool ShouldSerializeAutoValidate()
protected void OnAutoValidateChanged(EventArgs e)
public void add_AutoValidateChanged(EventHandler value)
public void remove_AutoValidateChanged(EventHandler value)
}
public System.Windows.Forms.ContentsResizedEventArgs : EventArgs {
private Rectangle rect
public Rectangle NewRectangle
public void .ctor(Rectangle newRectangle)
public Rectangle get_NewRectangle()
}
public System.Windows.Forms.ContentsResizedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ContentsResizedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ContentsResizedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ContextMenu : Menu {
private RightToLeft right_to_left
private Control src_control
private object CollapseEvent
private object PopupEvent
public RightToLeft RightToLeft
public Control SourceControl
public void add_Collapse(EventHandler value)
public void remove_Collapse(EventHandler value)
public void add_Popup(EventHandler value)
public void remove_Popup(EventHandler value)
public void .ctor(MenuItem[] menuItems)
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public Control get_SourceControl()
protected internal bool ProcessCmdKey(Message& msg, Keys keyData, Control control)
protected internal void OnCollapse(EventArgs e)
protected internal void OnPopup(EventArgs e)
public void Show(Control control, Point pos)
public void Show(Control control, Point pos, LeftRightAlignment alignment)
internal void Hide()
}
public System.Windows.Forms.ContextMenuStrip : ToolStripDropDownMenu {
private Control source_control
internal Control container
public Control SourceControl
public void .ctor(IContainer container)
public Control get_SourceControl()
protected void Dispose(bool disposing)
protected void SetVisibleCore(bool visible)
internal void SetSourceControl(Control source_control)
}
public System.Windows.Forms.Control : Component {
internal Rectangle bounds
private Rectangle explicit_bounds
internal object creator_thread
internal ControlNativeWindow window
private IWindowTarget window_target
private string name
private bool is_created
internal bool has_focus
internal bool is_visible
internal bool is_entered
internal bool is_enabled
private bool is_accessible
private bool is_captured
internal bool is_toplevel
private bool is_recreating
private bool causes_validation
private bool is_focusing
private int tab_index
private bool tab_stop
private bool is_disposed
private bool is_disposing
private Size client_size
private Rectangle client_rect
private ControlStyles control_style
private ImeMode ime_mode
private object control_tag
internal int mouse_clicks
private Cursor cursor
internal bool allow_drop
private Region clip_region
internal Color foreground_color
internal Color background_color
private Image background_image
internal Font font
private string text
internal BorderStyle border_style
private bool show_keyboard_cues
internal bool show_focus_cues
internal bool force_double_buffer
private LayoutEngine layout_engine
internal int layout_suspended
private bool layout_pending
internal AnchorStyles anchor_style
internal DockStyle dock_style
private LayoutType layout_type
private bool recalculate_distances
internal int dist_right
internal int dist_bottom
private ControlCollection child_controls
private Control parent
private BindingContext binding_context
private RightToLeft right_to_left
private ContextMenu context_menu
internal bool use_compatible_text_rendering
private bool use_wait_cursor
private string accessible_name
private string accessible_description
private string accessible_default_action
private AccessibleRole accessible_role
private AccessibleObject accessibility_object
private DoubleBuffer backbuffer
private ControlBindingsCollection data_bindings
private bool verify_thread_handle
private Padding padding
private ImageLayout backgroundimage_layout
private Size maximum_size
private Size minimum_size
private Padding margin
private ContextMenuStrip context_menu_strip
private bool nested_layout
private Point auto_scroll_offset
private AutoSizeMode auto_size_mode
private bool suppressing_key_press
private MenuTracker active_tracker
private bool auto_size
private object AutoSizeChangedEvent
private object BackColorChangedEvent
private object BackgroundImageChangedEvent
private object BackgroundImageLayoutChangedEvent
private object BindingContextChangedEvent
private object CausesValidationChangedEvent
private object ChangeUICuesEvent
private object ClickEvent
private object ClientSizeChangedEvent
private object ContextMenuChangedEvent
private object ContextMenuStripChangedEvent
private object ControlAddedEvent
private object ControlRemovedEvent
private object CursorChangedEvent
private object DockChangedEvent
private object DoubleClickEvent
private object DragDropEvent
private object DragEnterEvent
private object DragLeaveEvent
private object DragOverEvent
private object EnabledChangedEvent
private object EnterEvent
private object FontChangedEvent
private object ForeColorChangedEvent
private object GiveFeedbackEvent
private object GotFocusEvent
private object HandleCreatedEvent
private object HandleDestroyedEvent
private object HelpRequestedEvent
private object ImeModeChangedEvent
private object InvalidatedEvent
private object KeyDownEvent
private object KeyPressEvent
private object KeyUpEvent
private object LayoutEvent
private object LeaveEvent
private object LocationChangedEvent
private object LostFocusEvent
private object MarginChangedEvent
private object MouseCaptureChangedEvent
private object MouseClickEvent
private object MouseDoubleClickEvent
private object MouseDownEvent
private object MouseEnterEvent
private object MouseHoverEvent
private object MouseLeaveEvent
private object MouseMoveEvent
private object MouseUpEvent
private object MouseWheelEvent
private object MoveEvent
private object PaddingChangedEvent
private object PaintEvent
private object ParentChangedEvent
private object PreviewKeyDownEvent
private object QueryAccessibilityHelpEvent
private object QueryContinueDragEvent
private object RegionChangedEvent
private object ResizeEvent
private object RightToLeftChangedEvent
private object SizeChangedEvent
private object StyleChangedEvent
private object SystemColorsChangedEvent
private object TabIndexChangedEvent
private object TabStopChangedEvent
private object TextChangedEvent
private object ValidatedEvent
private object ValidatingEvent
private object VisibleChangedEvent
internal Rectangle PaddingClientRectangle
internal MenuTracker ActiveTracker
internal bool InternalSelected
internal bool InternalContainsFocus
internal bool Entered
internal bool VisibleInternal
internal LayoutType ControlLayoutType
internal BorderStyle InternalBorderStyle
internal Size InternalClientSize
internal bool ActivateOnShow
internal Rectangle ExplicitBounds
internal bool ValidationFailed
internal bool IsRecreating
internal Graphics DeviceContext
private bool UseDoubleBuffering
public Color DefaultBackColor
public Font DefaultFont
public Color DefaultForeColor
public Keys ModifierKeys
public MouseButtons MouseButtons
public Point MousePosition
public bool CheckForIllegalCrossThreadCalls
public AccessibleObject AccessibilityObject
public string AccessibleDefaultActionDescription
public string AccessibleDescription
public string AccessibleName
public AccessibleRole AccessibleRole
public bool AllowDrop
public AnchorStyles Anchor
public Point AutoScrollOffset
public bool AutoSize
public Size MaximumSize
public Size MinimumSize
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BindingContext BindingContext
public int Bottom
public Rectangle Bounds
public bool CanFocus
public bool CanSelect
internal bool InternalCapture
public bool Capture
public bool CausesValidation
public Rectangle ClientRectangle
public Size ClientSize
public string CompanyName
public bool ContainsFocus
public ContextMenu ContextMenu
internal ContextMenu ContextMenuInternal
public ContextMenuStrip ContextMenuStrip
public ControlCollection Controls
public bool Created
public Cursor Cursor
public ControlBindingsCollection DataBindings
public Rectangle DisplayRectangle
public bool Disposing
public DockStyle Dock
protected bool DoubleBuffered
public bool Enabled
public bool Focused
public Font Font
public Color ForeColor
public IntPtr Handle
public bool HasChildren
public int Height
public ImeMode ImeMode
public bool InvokeRequired
public bool IsAccessible
public bool IsDisposed
public bool IsHandleCreated
public bool IsMirrored
public LayoutEngine LayoutEngine
public int Left
public Point Location
public Padding Margin
public string Name
public Padding Padding
public Control Parent
public Size PreferredSize
public string ProductName
public string ProductVersion
public bool RecreatingHandle
public Region Region
public int Right
public RightToLeft RightToLeft
public ISite Site
public Size Size
public int TabIndex
public bool TabStop
public object Tag
public string Text
public int Top
public Control TopLevelControl
public bool UseWaitCursor
public bool Visible
public int Width
public IWindowTarget WindowTarget
protected bool CanEnableIme
protected bool CanRaiseEvents
protected CreateParams CreateParams
protected Cursor DefaultCursor
protected ImeMode DefaultImeMode
protected Padding DefaultMargin
protected Size DefaultMaximumSize
protected Size DefaultMinimumSize
protected Padding DefaultPadding
protected Size DefaultSize
protected int FontHeight
protected bool RenderRightToLeft
protected bool ResizeRedraw
protected bool ScaleChildren
internal bool ScaleChildrenInternal
protected internal bool ShowFocusCues
protected internal bool ShowKeyboardCues
internal bool ShowKeyboardCuesInternal
public void .ctor(Control parent, string text)
public void .ctor(Control parent, string text, int left, int top, int width, int height)
public void .ctor(string text)
public void .ctor(string text, int left, int top, int width, int height)
protected void Dispose(bool disposing)
internal Rectangle get_PaddingClientRectangle()
internal MenuTracker get_ActiveTracker()
internal void set_ActiveTracker(MenuTracker value)
internal bool get_InternalSelected()
internal bool get_InternalContainsFocus()
internal bool get_Entered()
internal bool get_VisibleInternal()
internal LayoutType get_ControlLayoutType()
internal BorderStyle get_InternalBorderStyle()
internal void set_InternalBorderStyle(BorderStyle value)
internal void set_InternalClientSize(Size value)
internal bool get_ActivateOnShow()
internal Rectangle get_ExplicitBounds()
internal void set_ExplicitBounds(Rectangle value)
internal bool get_ValidationFailed()
internal void set_ValidationFailed(bool value)
private void System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs drgEvent)
private void System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs drgEvent)
private void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs e)
private void System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs drgEvent)
internal IAsyncResult BeginInvokeInternal(Delegate method, Object[] args)
internal IAsyncResult BeginInvokeInternal(Delegate method, Object[] args, Control control)
private IntPtr GetInvokableHandle()
internal void PointToClient(Int32& x, Int32& y)
internal void PointToScreen(Int32& x, Int32& y)
internal bool get_IsRecreating()
internal Graphics get_DeviceContext()
internal int OverrideHeight(int height)
private void ProcessActiveTracker(Message& m)
private Control FindControlToInvokeOn()
private void InvalidateBackBuffer()
private DoubleBuffer GetBackBuffer()
private void DisposeBackBuffer()
internal void SetChildColor(Control parent)
internal bool Select(Control control)
internal void DoDefaultAction()
internal IntPtr MakeParam(int low, int high)
internal int LowOrder(int param)
internal int HighOrder(long param)
internal void PaintControlBackground(PaintEventArgs pevent)
private void DrawBackgroundImage(Graphics g)
internal void DndEnter(DragEventArgs e)
internal void DndOver(DragEventArgs e)
internal void DndDrop(DragEventArgs e)
internal void DndLeave(EventArgs e)
internal void DndFeedback(GiveFeedbackEventArgs e)
internal void DndContinueDrag(QueryContinueDragEventArgs e)
internal MouseButtons FromParamToMouseButtons(long param)
internal void FireEnter()
internal void FireLeave()
internal void FireValidating(CancelEventArgs ce)
internal void FireValidated()
internal bool ProcessControlMnemonic(char charCode)
private Control FindFlatForward(Control container, Control start)
private Control FindControlForward(Control container, Control start)
private Control FindFlatBackward(Control container, Control start)
private Control FindControlBackward(Control container, Control start)
internal void HandleClick(int clicks, MouseEventArgs me)
internal void CaptureWithConfine(Control ConfineWindow)
private void CheckDataBindings()
private void ChangeParent(Control new_parent)
internal Size InternalSizeFromClientSize(Size clientSize)
internal Size ClientSizeFromSize(Size size)
internal CreateParams GetCreateParams()
internal Size GetPreferredSizeCore(Size proposedSize)
private void UpdateDistances()
private Cursor GetAvailableCursor()
private void UpdateCursor()
private bool get_UseDoubleBuffering()
internal void OnSizeInitializedOrChanged()
public Color get_DefaultBackColor()
public Font get_DefaultFont()
public Color get_DefaultForeColor()
public Keys get_ModifierKeys()
public MouseButtons get_MouseButtons()
public Point get_MousePosition()
public bool get_CheckForIllegalCrossThreadCalls()
public void set_CheckForIllegalCrossThreadCalls(bool value)
public AccessibleObject get_AccessibilityObject()
public string get_AccessibleDefaultActionDescription()
public void set_AccessibleDefaultActionDescription(string value)
public string get_AccessibleDescription()
public void set_AccessibleDescription(string value)
public string get_AccessibleName()
public void set_AccessibleName(string value)
public AccessibleRole get_AccessibleRole()
public void set_AccessibleRole(AccessibleRole value)
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public AnchorStyles get_Anchor()
public void set_Anchor(AnchorStyles value)
public Point get_AutoScrollOffset()
public void set_AutoScrollOffset(Point value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Size get_MaximumSize()
public void set_MaximumSize(Size value)
internal bool ShouldSerializeMaximumSize()
public Size get_MinimumSize()
public void set_MinimumSize(Size value)
internal bool ShouldSerializeMinimumSize()
public Color get_BackColor()
public void set_BackColor(Color value)
internal bool ShouldSerializeBackColor()
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BindingContext get_BindingContext()
public void set_BindingContext(BindingContext value)
public int get_Bottom()
public Rectangle get_Bounds()
public void set_Bounds(Rectangle value)
public bool get_CanFocus()
public bool get_CanSelect()
internal bool get_InternalCapture()
internal void set_InternalCapture(bool value)
public bool get_Capture()
public void set_Capture(bool value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public Rectangle get_ClientRectangle()
public Size get_ClientSize()
public void set_ClientSize(Size value)
public string get_CompanyName()
public bool get_ContainsFocus()
public ContextMenu get_ContextMenu()
public void set_ContextMenu(ContextMenu value)
internal ContextMenu get_ContextMenuInternal()
internal void set_ContextMenuInternal(ContextMenu value)
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public ControlCollection get_Controls()
public bool get_Created()
public Cursor get_Cursor()
public void set_Cursor(Cursor value)
internal bool ShouldSerializeCursor()
public ControlBindingsCollection get_DataBindings()
public Rectangle get_DisplayRectangle()
public bool get_Disposing()
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds)
public bool get_Enabled()
public void set_Enabled(bool value)
internal bool ShouldSerializeEnabled()
public bool get_Focused()
public Font get_Font()
public void set_Font(Font value)
internal bool ShouldSerializeFont()
public Color get_ForeColor()
public void set_ForeColor(Color value)
internal bool ShouldSerializeForeColor()
public IntPtr get_Handle()
public bool get_HasChildren()
public int get_Height()
public void set_Height(int value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
internal bool ShouldSerializeImeMode()
public bool get_InvokeRequired()
public bool get_IsAccessible()
public void set_IsAccessible(bool value)
public bool get_IsDisposed()
public bool get_IsHandleCreated()
public bool get_IsMirrored()
public LayoutEngine get_LayoutEngine()
public int get_Left()
public void set_Left(int value)
public Point get_Location()
public void set_Location(Point value)
internal bool ShouldSerializeLocation()
public Padding get_Margin()
public void set_Margin(Padding value)
internal bool ShouldSerializeMargin()
public string get_Name()
public void set_Name(string value)
public Padding get_Padding()
public void set_Padding(Padding value)
internal bool ShouldSerializePadding()
public Control get_Parent()
public void set_Parent(Control value)
public Size get_PreferredSize()
public string get_ProductName()
public string get_ProductVersion()
public bool get_RecreatingHandle()
public Region get_Region()
public void set_Region(Region value)
public int get_Right()
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
internal bool ShouldSerializeRightToLeft()
public ISite get_Site()
public void set_Site(ISite value)
internal bool ShouldSerializeSite()
public Size get_Size()
public void set_Size(Size value)
internal bool ShouldSerializeSize()
public int get_TabIndex()
public void set_TabIndex(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public object get_Tag()
public void set_Tag(object value)
public string get_Text()
public void set_Text(string value)
internal void UpdateWindowText()
public int get_Top()
public void set_Top(int value)
public Control get_TopLevelControl()
public bool get_UseWaitCursor()
public void set_UseWaitCursor(bool value)
public bool get_Visible()
public void set_Visible(bool value)
internal bool ShouldSerializeVisible()
public int get_Width()
public void set_Width(int value)
public IWindowTarget get_WindowTarget()
public void set_WindowTarget(IWindowTarget value)
protected bool get_CanEnableIme()
protected bool get_CanRaiseEvents()
protected CreateParams get_CreateParams()
protected Cursor get_DefaultCursor()
protected ImeMode get_DefaultImeMode()
protected Padding get_DefaultMargin()
protected Size get_DefaultMaximumSize()
protected Size get_DefaultMinimumSize()
protected Padding get_DefaultPadding()
protected Size get_DefaultSize()
protected int get_FontHeight()
protected void set_FontHeight(int value)
protected bool get_RenderRightToLeft()
protected bool get_ResizeRedraw()
protected void set_ResizeRedraw(bool value)
protected bool get_ScaleChildren()
internal bool get_ScaleChildrenInternal()
protected internal bool get_ShowFocusCues()
protected internal bool get_ShowKeyboardCues()
internal bool get_ShowKeyboardCuesInternal()
public Control FromChildHandle(IntPtr handle)
public Control FromHandle(IntPtr handle)
public bool IsKeyLocked(Keys keyVal)
public bool IsMnemonic(char charCode, string text)
protected bool ReflectMessage(IntPtr hWnd, Message& m)
public IAsyncResult BeginInvoke(Delegate method)
public IAsyncResult BeginInvoke(Delegate method, Object[] args)
public void BringToFront()
public bool Contains(Control ctl)
public void CreateControl()
public Graphics CreateGraphics()
public DragDropEffects DoDragDrop(object data, DragDropEffects allowedEffects)
internal void OnDragDropEnd(DragDropEffects effects)
public object EndInvoke(IAsyncResult asyncResult)
internal Control FindRootParent()
public Form FindForm()
public bool Focus()
internal bool FocusInternal(bool skip_check)
internal Control GetRealChildAtPoint(Point pt)
public Control GetChildAtPoint(Point pt)
public Control GetChildAtPoint(Point pt, GetChildAtPointSkip skipValue)
public IContainerControl GetContainerControl()
internal ContainerControl InternalGetContainerControl()
public Control GetNextControl(Control ctl, bool forward)
public Size GetPreferredSize(Size proposedSize)
public void Hide()
public void Invalidate()
public void Invalidate(bool invalidateChildren)
public void Invalidate(Rectangle rc)
public void Invalidate(Rectangle rc, bool invalidateChildren)
public void Invalidate(Region region)
public void Invalidate(Region region, bool invalidateChildren)
public object Invoke(Delegate method)
public object Invoke(Delegate method, Object[] args)
public void PerformLayout()
public void PerformLayout(Control affectedControl, string affectedProperty)
public Point PointToClient(Point p)
public Point PointToScreen(Point p)
public PreProcessControlState PreProcessControlMessage(Message& msg)
internal PreProcessControlState PreProcessControlMessageInternal(Message& msg)
public bool PreProcessMessage(Message& msg)
internal bool InternalPreProcessMessage(Message& msg)
public Rectangle RectangleToClient(Rectangle r)
public Rectangle RectangleToScreen(Rectangle r)
public void Refresh()
public void ResetBackColor()
public void ResetBindings()
public void ResetCursor()
public void ResetFont()
public void ResetForeColor()
public void ResetImeMode()
public void ResetRightToLeft()
public void ResetText()
public void ResumeLayout()
public void ResumeLayout(bool performLayout)
public void Scale(float ratio)
public void Scale(float dx, float dy)
public void Scale(SizeF factor)
internal ContainerControl FindContainer(Control c)
private bool IsContainerAutoScaling(Control c)
public void Select()
public bool SelectNextControl(Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap)
public void SendToBack()
public void SetBounds(int x, int y, int width, int height)
public void SetBounds(int x, int y, int width, int height, BoundsSpecified specified)
internal void SetBoundsInternal(int x, int y, int width, int height, BoundsSpecified specified)
public void Show()
public void SuspendLayout()
public void Update()
protected void AccessibilityNotifyClients(AccessibleEvents accEvent, int childID)
protected void AccessibilityNotifyClients(AccessibleEvents accEvent, int objectID, int childID)
protected AccessibleObject CreateAccessibilityInstance()
protected ControlCollection CreateControlsInstance()
protected void CreateHandle()
protected void DefWndProc(Message& m)
protected void DestroyHandle()
protected AccessibleObject GetAccessibilityObjectById(int objectId)
protected internal AutoSizeMode GetAutoSizeMode()
protected Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified)
private Rectangle GetScaledBoundsOld(Rectangle bounds, SizeF factor, BoundsSpecified specified)
protected internal bool GetStyle(ControlStyles flag)
protected bool GetTopLevel()
protected void InitLayout()
protected void InvokeGotFocus(Control toInvoke, EventArgs e)
protected void InvokeLostFocus(Control toInvoke, EventArgs e)
protected void InvokeOnClick(Control toInvoke, EventArgs e)
protected void InvokePaint(Control c, PaintEventArgs e)
protected void InvokePaintBackground(Control c, PaintEventArgs e)
protected bool IsInputChar(char charCode)
internal bool IsInputCharInternal(char charCode)
protected bool IsInputKey(Keys keyData)
protected void NotifyInvalidate(Rectangle invalidatedArea)
protected bool ProcessCmdKey(Message& msg, Keys keyData)
protected bool ProcessDialogChar(char charCode)
protected bool ProcessDialogKey(Keys keyData)
protected bool ProcessKeyEventArgs(Message& m)
protected internal bool ProcessKeyMessage(Message& m)
protected bool ProcessKeyPreview(Message& m)
protected bool ProcessMnemonic(char charCode)
protected void RaiseDragEvent(object key, DragEventArgs e)
protected void RaiseKeyEvent(object key, KeyEventArgs e)
protected void RaiseMouseEvent(object key, MouseEventArgs e)
protected void RaisePaintEvent(object key, PaintEventArgs e)
private void SetIsRecreating()
protected void RecreateHandle()
protected void ResetMouseEventArgs()
protected ContentAlignment RtlTranslateAlignment(ContentAlignment align)
protected HorizontalAlignment RtlTranslateAlignment(HorizontalAlignment align)
protected LeftRightAlignment RtlTranslateAlignment(LeftRightAlignment align)
protected ContentAlignment RtlTranslateContent(ContentAlignment align)
protected HorizontalAlignment RtlTranslateHorizontal(HorizontalAlignment align)
protected LeftRightAlignment RtlTranslateLeftRight(LeftRightAlignment align)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
protected void ScaleCore(float dx, float dy)
protected void Select(bool directed, bool forward)
protected void SetAutoSizeMode(AutoSizeMode mode)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
internal void SetBoundsCoreInternal(int x, int y, int width, int height, BoundsSpecified specified)
protected void SetClientSizeCore(int x, int y)
protected internal void SetStyle(ControlStyles flag, bool value)
protected void SetTopLevel(bool value)
protected void SetVisibleCore(bool value)
protected Size SizeFromClientSize(Size clientSize)
protected void UpdateBounds()
protected void UpdateBounds(int x, int y, int width, int height)
protected void UpdateBounds(int x, int y, int width, int height, int clientWidth, int clientHeight)
protected void UpdateStyles()
private void UpdateZOrderOfChild(Control child)
internal IntPtr AfterTopMostControl()
internal void UpdateChildrenZOrder()
protected void UpdateZOrder()
protected void WndProc(Message& m)
private void WmDestroy(Message& m)
private void WmWindowPosChanged(Message& m)
private void WmPaint(Message& m)
private void WmEraseBackground(Message& m)
private void WmLButtonUp(Message& m)
private void WmLButtonDown(Message& m)
private void WmLButtonDblClick(Message& m)
private void WmMButtonUp(Message& m)
private void WmMButtonDown(Message& m)
private void WmMButtonDblClick(Message& m)
private void WmRButtonUp(Message& m)
private void WmRButtonDown(Message& m)
private void WmRButtonDblClick(Message& m)
private void WmContextMenu(Message& m)
private void WmCreate(Message& m)
private void WmMouseWheel(Message& m)
private void WmMouseMove(Message& m)
private void WmMouseEnter(Message& m)
private void WmMouseLeave(Message& m)
private void WmMouseHover(Message& m)
private void WmShowWindow(Message& m)
private void WmSysKeyUp(Message& m)
private void WmKeys(Message& m)
private void WmHelp(Message& m)
private void WmKillFocus(Message& m)
private void WmSetFocus(Message& m)
private void WmSysColorChange(Message& m)
private void WmSetCursor(Message& m)
private void WmCaptureChanged(Message& m)
private void WmChangeUIState(Message& m)
private void WmUpdateUIState(Message& m)
protected void OnAutoSizeChanged(EventArgs e)
protected void OnBackColorChanged(EventArgs e)
protected void OnBackgroundImageChanged(EventArgs e)
protected void OnBackgroundImageLayoutChanged(EventArgs e)
protected void OnBindingContextChanged(EventArgs e)
protected void OnCausesValidationChanged(EventArgs e)
protected void OnChangeUICues(UICuesEventArgs e)
protected void OnClick(EventArgs e)
protected void OnClientSizeChanged(EventArgs e)
protected void OnContextMenuChanged(EventArgs e)
protected void OnContextMenuStripChanged(EventArgs e)
protected void OnControlAdded(ControlEventArgs e)
protected void OnControlRemoved(ControlEventArgs e)
protected void OnCreateControl()
protected void OnCursorChanged(EventArgs e)
protected void OnDockChanged(EventArgs e)
protected void OnDoubleClick(EventArgs e)
protected void OnDragDrop(DragEventArgs drgevent)
protected void OnDragEnter(DragEventArgs drgevent)
protected void OnDragLeave(EventArgs e)
protected void OnDragOver(DragEventArgs drgevent)
protected void OnEnabledChanged(EventArgs e)
protected void OnEnter(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnGiveFeedback(GiveFeedbackEventArgs gfbevent)
protected void OnGotFocus(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
internal void RaiseHelpRequested(HelpEventArgs hevent)
protected void OnHelpRequested(HelpEventArgs hevent)
protected void OnImeModeChanged(EventArgs e)
protected void OnInvalidated(InvalidateEventArgs e)
protected void OnKeyDown(KeyEventArgs e)
protected void OnKeyPress(KeyPressEventArgs e)
protected void OnKeyUp(KeyEventArgs e)
protected void OnLayout(LayoutEventArgs levent)
protected void OnLeave(EventArgs e)
protected void OnLocationChanged(EventArgs e)
protected void OnLostFocus(EventArgs e)
protected void OnMarginChanged(EventArgs e)
protected void OnMouseCaptureChanged(EventArgs e)
protected void OnMouseClick(MouseEventArgs e)
protected void OnMouseDoubleClick(MouseEventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseEnter(EventArgs e)
protected void OnMouseHover(EventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseMove(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnMouseWheel(MouseEventArgs e)
protected void OnMove(EventArgs e)
protected void OnNotifyMessage(Message m)
protected void OnPaddingChanged(EventArgs e)
protected void OnPaint(PaintEventArgs e)
internal void OnPaintBackgroundInternal(PaintEventArgs e)
internal void OnPaintInternal(PaintEventArgs e)
protected void OnPaintBackground(PaintEventArgs pevent)
protected void OnParentBackColorChanged(EventArgs e)
protected void OnParentBackgroundImageChanged(EventArgs e)
protected void OnParentBindingContextChanged(EventArgs e)
protected void OnParentChanged(EventArgs e)
protected void OnParentCursorChanged(EventArgs e)
protected void OnParentEnabledChanged(EventArgs e)
protected void OnParentFontChanged(EventArgs e)
protected void OnParentForeColorChanged(EventArgs e)
protected void OnParentRightToLeftChanged(EventArgs e)
protected void OnParentVisibleChanged(EventArgs e)
protected void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent)
protected void OnPreviewKeyDown(PreviewKeyDownEventArgs e)
protected void OnPrint(PaintEventArgs e)
protected void OnRegionChanged(EventArgs e)
protected void OnResize(EventArgs e)
internal void OnResizeInternal(EventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
protected void OnSizeChanged(EventArgs e)
protected void OnStyleChanged(EventArgs e)
protected void OnSystemColorsChanged(EventArgs e)
protected void OnTabIndexChanged(EventArgs e)
protected void OnTabStopChanged(EventArgs e)
protected void OnTextChanged(EventArgs e)
protected void OnValidated(EventArgs e)
protected void OnValidating(CancelEventArgs e)
protected void OnVisibleChanged(EventArgs e)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_BindingContextChanged(EventHandler value)
public void remove_BindingContextChanged(EventHandler value)
public void add_CausesValidationChanged(EventHandler value)
public void remove_CausesValidationChanged(EventHandler value)
public void add_ChangeUICues(UICuesEventHandler value)
public void remove_ChangeUICues(UICuesEventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_ClientSizeChanged(EventHandler value)
public void remove_ClientSizeChanged(EventHandler value)
public void add_ContextMenuChanged(EventHandler value)
public void remove_ContextMenuChanged(EventHandler value)
public void add_ContextMenuStripChanged(EventHandler value)
public void remove_ContextMenuStripChanged(EventHandler value)
public void add_ControlAdded(ControlEventHandler value)
public void remove_ControlAdded(ControlEventHandler value)
public void add_ControlRemoved(ControlEventHandler value)
public void remove_ControlRemoved(ControlEventHandler value)
public void add_CursorChanged(EventHandler value)
public void remove_CursorChanged(EventHandler value)
public void add_DockChanged(EventHandler value)
public void remove_DockChanged(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_DragDrop(DragEventHandler value)
public void remove_DragDrop(DragEventHandler value)
public void add_DragEnter(DragEventHandler value)
public void remove_DragEnter(DragEventHandler value)
public void add_DragLeave(EventHandler value)
public void remove_DragLeave(EventHandler value)
public void add_DragOver(DragEventHandler value)
public void remove_DragOver(DragEventHandler value)
public void add_EnabledChanged(EventHandler value)
public void remove_EnabledChanged(EventHandler value)
public void add_Enter(EventHandler value)
public void remove_Enter(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_GiveFeedback(GiveFeedbackEventHandler value)
public void remove_GiveFeedback(GiveFeedbackEventHandler value)
public void add_GotFocus(EventHandler value)
public void remove_GotFocus(EventHandler value)
public void add_HandleCreated(EventHandler value)
public void remove_HandleCreated(EventHandler value)
public void add_HandleDestroyed(EventHandler value)
public void remove_HandleDestroyed(EventHandler value)
public void add_HelpRequested(HelpEventHandler value)
public void remove_HelpRequested(HelpEventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_Invalidated(InvalidateEventHandler value)
public void remove_Invalidated(InvalidateEventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_Layout(LayoutEventHandler value)
public void remove_Layout(LayoutEventHandler value)
public void add_Leave(EventHandler value)
public void remove_Leave(EventHandler value)
public void add_LocationChanged(EventHandler value)
public void remove_LocationChanged(EventHandler value)
public void add_LostFocus(EventHandler value)
public void remove_LostFocus(EventHandler value)
public void add_MarginChanged(EventHandler value)
public void remove_MarginChanged(EventHandler value)
public void add_MouseCaptureChanged(EventHandler value)
public void remove_MouseCaptureChanged(EventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_MouseDown(MouseEventHandler value)
public void remove_MouseDown(MouseEventHandler value)
public void add_MouseEnter(EventHandler value)
public void remove_MouseEnter(EventHandler value)
public void add_MouseHover(EventHandler value)
public void remove_MouseHover(EventHandler value)
public void add_MouseLeave(EventHandler value)
public void remove_MouseLeave(EventHandler value)
public void add_MouseMove(MouseEventHandler value)
public void remove_MouseMove(MouseEventHandler value)
public void add_MouseUp(MouseEventHandler value)
public void remove_MouseUp(MouseEventHandler value)
public void add_MouseWheel(MouseEventHandler value)
public void remove_MouseWheel(MouseEventHandler value)
public void add_Move(EventHandler value)
public void remove_Move(EventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_ParentChanged(EventHandler value)
public void remove_ParentChanged(EventHandler value)
public void add_PreviewKeyDown(PreviewKeyDownEventHandler value)
public void remove_PreviewKeyDown(PreviewKeyDownEventHandler value)
public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value)
public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value)
public void add_QueryContinueDrag(QueryContinueDragEventHandler value)
public void remove_QueryContinueDrag(QueryContinueDragEventHandler value)
public void add_RegionChanged(EventHandler value)
public void remove_RegionChanged(EventHandler value)
public void add_Resize(EventHandler value)
public void remove_Resize(EventHandler value)
public void add_RightToLeftChanged(EventHandler value)
public void remove_RightToLeftChanged(EventHandler value)
public void add_SizeChanged(EventHandler value)
public void remove_SizeChanged(EventHandler value)
public void add_StyleChanged(EventHandler value)
public void remove_StyleChanged(EventHandler value)
public void add_SystemColorsChanged(EventHandler value)
public void remove_SystemColorsChanged(EventHandler value)
public void add_TabIndexChanged(EventHandler value)
public void remove_TabIndexChanged(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_Validated(EventHandler value)
public void remove_Validated(EventHandler value)
public void add_Validating(CancelEventHandler value)
public void remove_Validating(CancelEventHandler value)
public void add_VisibleChanged(EventHandler value)
public void remove_VisibleChanged(EventHandler value)
}
public System.Windows.Forms.ControlBindingsCollection : BindingsCollection {
private Control control
private IBindableComponent bindable_component
private DataSourceUpdateMode default_datasource_update_mode
public Control Control
public Binding Item
public IBindableComponent BindableComponent
public DataSourceUpdateMode DefaultDataSourceUpdateMode
internal void .ctor(Control control)
public void .ctor(IBindableComponent control)
public Control get_Control()
public Binding get_Item(string propertyName)
public IBindableComponent get_BindableComponent()
public DataSourceUpdateMode get_DefaultDataSourceUpdateMode()
public void set_DefaultDataSourceUpdateMode(DataSourceUpdateMode value)
public void Add(Binding binding)
public Binding Add(string propertyName, object dataSource, string dataMember)
public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled)
public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode)
public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue)
public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue, string formatString)
public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue, string formatString, IFormatProvider formatInfo)
public void Clear()
public void Remove(Binding binding)
public void RemoveAt(int index)
protected void AddCore(Binding dataBinding)
protected void ClearCore()
protected void RemoveCore(Binding dataBinding)
}
public System.Windows.Forms.ControlEventArgs : EventArgs {
private Control control
public Control Control
public void .ctor(Control control)
public Control get_Control()
}
public System.Windows.Forms.ControlEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ControlEventArgs e)
public IAsyncResult BeginInvoke(object sender, ControlEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.ControlInfo : ValueType {
public object Control
public int Row
public int RowSpan
public int Col
public int ColSpan
}
public System.Windows.Forms.ControlPaint : object {
private int RGBMax
private int HLSMax
private bool DSFNotImpl
public Color ContrastControlDark
internal void Color2HBS(Color color, Int32& h, Int32& l, Int32& s)
private int HueToRGB(int n1, int n2, int hue)
internal Color HBS2Color(int hue, int lum, int sat)
public Color get_ContrastControlDark()
public IntPtr CreateHBitmap16Bit(Bitmap bitmap, Color background)
public IntPtr CreateHBitmapColorMask(Bitmap bitmap, IntPtr monochromeMask)
public IntPtr CreateHBitmapTransparencyMask(Bitmap bitmap)
public Color Light(Color baseColor)
public Color Light(Color baseColor, float percOfLightLight)
public Color LightLight(Color baseColor)
public Color Dark(Color baseColor)
public Color Dark(Color baseColor, float percOfDarkDark)
public Color DarkDark(Color baseColor)
public void DrawBorder(Graphics graphics, Rectangle bounds, Color color, ButtonBorderStyle style)
internal void DrawBorder(Graphics graphics, RectangleF bounds, Color color, ButtonBorderStyle style)
public void DrawBorder(Graphics graphics, Rectangle bounds, Color leftColor, int leftWidth, ButtonBorderStyle leftStyle, Color topColor, int topWidth, ButtonBorderStyle topStyle, Color rightColor, int rightWidth, ButtonBorderStyle rightStyle, Color bottomColor, int bottomWidth, ButtonBorderStyle bottomStyle)
public void DrawBorder3D(Graphics graphics, Rectangle rectangle)
public void DrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style)
public void DrawBorder3D(Graphics graphics, int x, int y, int width, int height)
public void DrawBorder3D(Graphics graphics, int x, int y, int width, int height, Border3DStyle style)
public void DrawBorder3D(Graphics graphics, int x, int y, int width, int height, Border3DStyle style, Border3DSide sides)
public void DrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style, Border3DSide sides)
public void DrawButton(Graphics graphics, int x, int y, int width, int height, ButtonState state)
public void DrawButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void DrawCaptionButton(Graphics graphics, int x, int y, int width, int height, CaptionButton button, ButtonState state)
public void DrawCaptionButton(Graphics graphics, Rectangle rectangle, CaptionButton button, ButtonState state)
public void DrawCheckBox(Graphics graphics, int x, int y, int width, int height, ButtonState state)
public void DrawCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state)
public void DrawComboButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void DrawComboButton(Graphics graphics, int x, int y, int width, int height, ButtonState state)
public void DrawContainerGrabHandle(Graphics graphics, Rectangle bounds)
public void DrawFocusRectangle(Graphics graphics, Rectangle rectangle)
public void DrawFocusRectangle(Graphics graphics, Rectangle rectangle, Color foreColor, Color backColor)
public void DrawGrabHandle(Graphics graphics, Rectangle rectangle, bool primary, bool enabled)
public void DrawGrid(Graphics graphics, Rectangle area, Size pixelsBetweenDots, Color backColor)
public void DrawImageDisabled(Graphics graphics, Image image, int x, int y, Color background)
public void DrawLockedFrame(Graphics graphics, Rectangle rectangle, bool primary)
public void DrawMenuGlyph(Graphics graphics, Rectangle rectangle, MenuGlyph glyph)
public void DrawMenuGlyph(Graphics graphics, Rectangle rectangle, MenuGlyph glyph, Color foreColor, Color backColor)
public void DrawMenuGlyph(Graphics graphics, int x, int y, int width, int height, MenuGlyph glyph)
public void DrawMenuGlyph(Graphics graphics, int x, int y, int width, int height, MenuGlyph glyph, Color foreColor, Color backColor)
public void DrawMixedCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state)
public void DrawMixedCheckBox(Graphics graphics, int x, int y, int width, int height, ButtonState state)
public void DrawRadioButton(Graphics graphics, int x, int y, int width, int height, ButtonState state)
public void DrawRadioButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void DrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style)
public void DrawReversibleLine(Point start, Point end, Color backColor)
public void FillReversibleRectangle(Rectangle rectangle, Color backColor)
public void DrawScrollButton(Graphics graphics, int x, int y, int width, int height, ScrollButton button, ButtonState state)
public void DrawScrollButton(Graphics graphics, Rectangle rectangle, ScrollButton button, ButtonState state)
public void DrawSelectionFrame(Graphics graphics, bool active, Rectangle outsideRect, Rectangle insideRect, Color backColor)
public void DrawSizeGrip(Graphics graphics, Color backColor, Rectangle bounds)
public void DrawSizeGrip(Graphics graphics, Color backColor, int x, int y, int width, int height)
public void DrawStringDisabled(Graphics graphics, string s, Font font, Color color, RectangleF layoutRectangle, StringFormat format)
public void DrawStringDisabled(IDeviceContext dc, string s, Font font, Color color, Rectangle layoutRectangle, TextFormatFlags format)
public void DrawVisualStyleBorder(Graphics graphics, Rectangle bounds)
}
public System.Windows.Forms.ControlStyles : Enum {
public int value__
public ControlStyles ContainerControl
public ControlStyles UserPaint
public ControlStyles Opaque
public ControlStyles ResizeRedraw
public ControlStyles FixedWidth
public ControlStyles FixedHeight
public ControlStyles StandardClick
public ControlStyles Selectable
public ControlStyles UserMouse
public ControlStyles SupportsTransparentBackColor
public ControlStyles StandardDoubleClick
public ControlStyles AllPaintingInWmPaint
public ControlStyles CacheText
public ControlStyles EnableNotifyMessage
public ControlStyles DoubleBuffer
public ControlStyles OptimizedDoubleBuffer
public ControlStyles UseTextForAccessibility
}
public System.Windows.Forms.ControlUpdateMode : Enum {
public int value__
public ControlUpdateMode OnPropertyChanged
public ControlUpdateMode Never
}
public System.Windows.Forms.ConvertEventArgs : EventArgs {
private object object_value
private Type desired_type
public Type DesiredType
public object Value
public void .ctor(object value, Type desiredType)
public Type get_DesiredType()
public object get_Value()
public void set_Value(object value)
}
public System.Windows.Forms.ConvertEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ConvertEventArgs e)
public IAsyncResult BeginInvoke(object sender, ConvertEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.CPColor : ValueType {
internal Color Dark
internal Color DarkDark
internal Color Light
internal Color LightLight
internal CPColor Empty
}
public System.Windows.Forms.CreateParams : object {
private string caption
private string class_name
private int class_style
private int ex_style
private int x
private int y
private int height
private int width
private int style
private object param
private IntPtr parent
internal Menu menu
internal Control control
public string Caption
public string ClassName
public int ClassStyle
public int ExStyle
public int X
public int Y
public int Width
public int Height
public int Style
public object Param
public IntPtr Parent
internal bool HasWindowManager
internal WindowExStyles WindowExStyle
internal WindowStyles WindowStyle
public string get_Caption()
public void set_Caption(string value)
public string get_ClassName()
public void set_ClassName(string value)
public int get_ClassStyle()
public void set_ClassStyle(int value)
public int get_ExStyle()
public void set_ExStyle(int value)
public int get_X()
public void set_X(int value)
public int get_Y()
public void set_Y(int value)
public int get_Width()
public void set_Width(int value)
public int get_Height()
public void set_Height(int value)
public int get_Style()
public void set_Style(int value)
public object get_Param()
public void set_Param(object value)
public IntPtr get_Parent()
public void set_Parent(IntPtr value)
internal bool IsSet(WindowStyles Style)
internal bool IsSet(WindowExStyles ExStyle)
internal bool IsSet(WindowExStyles ExStyle, WindowExStyles Option)
internal bool IsSet(WindowStyles Style, WindowStyles Option)
internal bool get_HasWindowManager()
internal WindowExStyles get_WindowExStyle()
internal void set_WindowExStyle(WindowExStyles value)
internal WindowStyles get_WindowStyle()
internal void set_WindowStyle(WindowStyles value)
public string ToString()
}
internal System.Windows.Forms.CreateWindowArgs : Enum {
public int value__
public CreateWindowArgs CopyFromParent
public CreateWindowArgs ParentRelative
public CreateWindowArgs InputOutput
public CreateWindowArgs InputOnly
}
public System.Windows.Forms.CurrencyManager : BindingManagerBase {
protected int listposition
protected Type finalType
private IList list
private bool binding_suspended
private object data_source
private bool editing
private ListChangedEventHandler ListChanged
private ItemChangedEventHandler ItemChanged
private EventHandler MetaDataChanged
public IList List
public object Current
public int Count
public int Position
internal bool IsSuspended
internal bool AllowNew
internal bool AllowRemove
internal bool AllowEdit
internal object Item
internal void .ctor(object data_source)
public IList get_List()
public object get_Current()
public int get_Count()
public int get_Position()
public void set_Position(int value)
internal void SetDataSource(object data_source)
public PropertyDescriptorCollection GetItemProperties()
public void RemoveAt(int index)
public void SuspendBinding()
public void ResumeBinding()
internal bool get_IsSuspended()
internal bool get_AllowNew()
internal bool get_AllowRemove()
internal bool get_AllowEdit()
public void AddNew()
private void BeginEdit()
public void CancelCurrentEdit()
public void EndCurrentEdit()
public void Refresh()
protected void CheckEmpty()
protected internal void OnCurrentChanged(EventArgs e)
protected void OnCurrentItemChanged(EventArgs e)
protected void OnItemChanged(ItemChangedEventArgs e)
private void OnListChanged(ListChangedEventArgs args)
protected void OnPositionChanged(EventArgs e)
protected internal string GetListName(ArrayList listAccessors)
protected void UpdateIsBinding()
private void ChangeRecordState(int newPosition, bool validating, bool endCurrentEdit, bool firePositionChanged, bool pullData)
private void UpdateItem()
internal object get_Item(int index)
private PropertyDescriptorCollection GetBrowsableProperties(Type t)
protected void OnMetaDataChanged(EventArgs e)
private void ListChangedHandler(object sender, ListChangedEventArgs e)
public void add_ListChanged(ListChangedEventHandler value)
public void remove_ListChanged(ListChangedEventHandler value)
public void add_ItemChanged(ItemChangedEventHandler value)
public void remove_ItemChanged(ItemChangedEventHandler value)
public void add_MetaDataChanged(EventHandler value)
public void remove_MetaDataChanged(EventHandler value)
}
public System.Windows.Forms.Cursor : object {
private Cursor current
private CursorDir cursor_dir
private CursorImage[] cursor_data
private int id
internal IntPtr handle
private Size size
private Bitmap shape
private Bitmap mask
private Bitmap cursor
internal string name
private StdCursor std_cursor
private object tag
public Rectangle Clip
public Cursor Current
public Point Position
public IntPtr Handle
public Point HotSpot
public Size Size
public object Tag
private void CreateCursor(Stream stream)
internal void .ctor(StdCursor cursor)
private void .ctor(SerializationInfo info, StreamingContext context)
protected void Finalize()
public void .ctor(IntPtr handle)
public void .ctor(Stream stream)
public void .ctor(string fileName)
public void .ctor(Type type, string resource)
public Rectangle get_Clip()
public void set_Clip(Rectangle value)
public Cursor get_Current()
public void set_Current(Cursor value)
public Point get_Position()
public void set_Position(Point value)
public IntPtr get_Handle()
public Point get_HotSpot()
public Size get_Size()
public object get_Tag()
public void set_Tag(object value)
public void Hide()
public void Show()
public bool op_Inequality(Cursor left, Cursor right)
public bool op_Equality(Cursor left, Cursor right)
public IntPtr CopyHandle()
public void Dispose()
public void Draw(Graphics g, Rectangle targetRect)
public void DrawStretched(Graphics g, Rectangle targetRect)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
private void InitFromStream(Stream stream)
private Bitmap ToBitmap(bool xor, bool transparent)
}
public System.Windows.Forms.CursorConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
internal System.Windows.Forms.CursorFontShape : Enum {
public int value__
public CursorFontShape XC_X_cursor
public CursorFontShape XC_arrow
public CursorFontShape XC_based_arrow_down
public CursorFontShape XC_based_arrow_up
public CursorFontShape XC_boat
public CursorFontShape XC_bogosity
public CursorFontShape XC_bottom_left_corner
public CursorFontShape XC_bottom_right_corner
public CursorFontShape XC_bottom_side
public CursorFontShape XC_bottom_tee
public CursorFontShape XC_box_spiral
public CursorFontShape XC_center_ptr
public CursorFontShape XC_circle
public CursorFontShape XC_clock
public CursorFontShape XC_coffee_mug
public CursorFontShape XC_cross
public CursorFontShape XC_cross_reverse
public CursorFontShape XC_crosshair
public CursorFontShape XC_diamond_cross
public CursorFontShape XC_dot
public CursorFontShape XC_dotbox
public CursorFontShape XC_double_arrow
public CursorFontShape XC_draft_large
public CursorFontShape XC_draft_small
public CursorFontShape XC_draped_box
public CursorFontShape XC_exchange
public CursorFontShape XC_fleur
public CursorFontShape XC_gobbler
public CursorFontShape XC_gumby
public CursorFontShape XC_hand1
public CursorFontShape XC_hand2
public CursorFontShape XC_heart
public CursorFontShape XC_icon
public CursorFontShape XC_iron_cross
public CursorFontShape XC_left_ptr
public CursorFontShape XC_left_side
public CursorFontShape XC_left_tee
public CursorFontShape XC_left_button
public CursorFontShape XC_ll_angle
public CursorFontShape XC_lr_angle
public CursorFontShape XC_man
public CursorFontShape XC_middlebutton
public CursorFontShape XC_mouse
public CursorFontShape XC_pencil
public CursorFontShape XC_pirate
public CursorFontShape XC_plus
public CursorFontShape XC_question_arrow
public CursorFontShape XC_right_ptr
public CursorFontShape XC_right_side
public CursorFontShape XC_right_tee
public CursorFontShape XC_rightbutton
public CursorFontShape XC_rtl_logo
public CursorFontShape XC_sailboat
public CursorFontShape XC_sb_down_arrow
public CursorFontShape XC_sb_h_double_arrow
public CursorFontShape XC_sb_left_arrow
public CursorFontShape XC_sb_right_arrow
public CursorFontShape XC_sb_up_arrow
public CursorFontShape XC_sb_v_double_arrow
public CursorFontShape XC_sb_shuttle
public CursorFontShape XC_sizing
public CursorFontShape XC_spider
public CursorFontShape XC_spraycan
public CursorFontShape XC_star
public CursorFontShape XC_target
public CursorFontShape XC_tcross
public CursorFontShape XC_top_left_arrow
public CursorFontShape XC_top_left_corner
public CursorFontShape XC_top_right_corner
public CursorFontShape XC_top_side
public CursorFontShape XC_top_tee
public CursorFontShape XC_trek
public CursorFontShape XC_ul_angle
public CursorFontShape XC_umbrella
public CursorFontShape XC_ur_angle
public CursorFontShape XC_watch
public CursorFontShape XC_xterm
public CursorFontShape XC_num_glyphs
}
public System.Windows.Forms.Cursors : object {
internal Cursor app_starting
internal Cursor arrow
internal Cursor cross
internal Cursor def
internal Cursor hand
internal Cursor help
internal Cursor hsplit
internal Cursor ibeam
internal Cursor no
internal Cursor no_move_2d
internal Cursor no_move_horiz
internal Cursor no_move_vert
internal Cursor pan_east
internal Cursor pan_ne
internal Cursor pan_north
internal Cursor pan_nw
internal Cursor pan_se
internal Cursor pan_south
internal Cursor pan_sw
internal Cursor pan_west
internal Cursor size_all
internal Cursor size_nesw
internal Cursor size_ns
internal Cursor size_nwse
internal Cursor size_we
internal Cursor up_arrow
internal Cursor vsplit
internal Cursor wait_cursor
public Cursor AppStarting
public Cursor Arrow
public Cursor Cross
public Cursor Default
public Cursor Hand
public Cursor Help
public Cursor HSplit
public Cursor IBeam
public Cursor No
public Cursor NoMove2D
public Cursor NoMoveHoriz
public Cursor NoMoveVert
public Cursor PanEast
public Cursor PanNE
public Cursor PanNorth
public Cursor PanNW
public Cursor PanSE
public Cursor PanSouth
public Cursor PanSW
public Cursor PanWest
public Cursor SizeAll
public Cursor SizeNESW
public Cursor SizeNS
public Cursor SizeNWSE
public Cursor SizeWE
public Cursor UpArrow
public Cursor VSplit
public Cursor WaitCursor
public Cursor get_AppStarting()
public Cursor get_Arrow()
public Cursor get_Cross()
public Cursor get_Default()
public Cursor get_Hand()
public Cursor get_Help()
public Cursor get_HSplit()
public Cursor get_IBeam()
public Cursor get_No()
public Cursor get_NoMove2D()
public Cursor get_NoMoveHoriz()
public Cursor get_NoMoveVert()
public Cursor get_PanEast()
public Cursor get_PanNE()
public Cursor get_PanNorth()
public Cursor get_PanNW()
public Cursor get_PanSE()
public Cursor get_PanSouth()
public Cursor get_PanSW()
public Cursor get_PanWest()
public Cursor get_SizeAll()
public Cursor get_SizeNESW()
public Cursor get_SizeNS()
public Cursor get_SizeNWSE()
public Cursor get_SizeWE()
public Cursor get_UpArrow()
public Cursor get_VSplit()
public Cursor get_WaitCursor()
}
public System.Windows.Forms.DataFormats : object {
public string Bitmap
public string CommaSeparatedValue
public string Dib
public string Dif
public string EnhancedMetafile
public string FileDrop
public string Html
public string Locale
public string MetafilePict
public string OemText
public string Palette
public string PenData
public string Riff
public string Rtf
public string Serializable
public string StringFormat
public string SymbolicLink
public string Text
public string Tiff
public string UnicodeText
public string WaveAudio
private object lock_object
private bool initialized
internal bool ContainsFormat(int id)
public Format GetFormat(int id)
public Format GetFormat(string format)
private void Init()
}
public System.Windows.Forms.DataGrid : Control {
private Color def_background_color
private Color def_caption_backcolor
private Color def_caption_forecolor
private Color def_parent_rows_backcolor
private Color def_parent_rows_forecolor
private Color background_color
private Color caption_backcolor
private Color caption_forecolor
private Color parent_rows_backcolor
private Color parent_rows_forecolor
private bool caption_visible
private bool parent_rows_visible
private GridTableStylesCollection styles_collection
private DataGridParentRowsLabelStyle parent_rows_label_style
private DataGridTableStyle default_style
private DataGridTableStyle grid_style
private DataGridTableStyle current_style
private DataGridCell current_cell
private Hashtable selected_rows
private int selection_start
private bool allow_navigation
private int first_visible_row
private int first_visible_column
private int visible_row_count
private int visible_column_count
private Font caption_font
private string caption_text
private bool flatmode
private HScrollBar horiz_scrollbar
private VScrollBar vert_scrollbar
private int horiz_pixeloffset
internal Bitmap back_button_image
internal Rectangle back_button_rect
internal bool back_button_mouseover
internal bool back_button_active
internal Bitmap parent_rows_button_image
internal Rectangle parent_rows_button_rect
internal bool parent_rows_button_mouseover
internal bool parent_rows_button_active
private object datasource
private string datamember
private CurrencyManager list_manager
private bool refetch_list_manager
private bool _readonly
private DataGridRelationshipRow[] rows
private bool column_resize_active
private int resize_column_x
private int resize_column_width_delta
private int resize_column
private bool row_resize_active
private int resize_row_y
private int resize_row_height_delta
private int resize_row
private bool from_positionchanged_handler
private bool cursor_in_add_row
private bool add_row_changed
internal bool is_editing
private bool is_changing
private bool commit_row_changes
private bool adding_new_row
internal Stack data_source_stack
internal Stack data_grid_table_style_stack
internal Stack grid_style_stack
private bool setting_current_cell
private int RESIZE_HANDLE_HORIZ_SIZE
private int RESIZE_HANDLE_VERT_SIZE
private bool in_setdatasource
private object AllowNavigationChangedEvent
private object BackButtonClickEvent
private object BackgroundColorChangedEvent
private object BorderStyleChangedEvent
private object CaptionVisibleChangedEvent
private object CurrentCellChangedEvent
private object DataSourceChangedEvent
private object FlatModeChangedEvent
private object NavigateEvent
private object ParentRowsLabelStyleChangedEvent
private object ParentRowsVisibleChangedEvent
private object ReadOnlyChangedEvent
private object RowHeaderClickEvent
private object ScrollEvent
private object ShowParentDetailsButtonClickEvent
private Rectangle parent_rows
private int width_of_all_columns
internal Rectangle caption_area
internal Rectangle column_headers_area
internal int column_headers_max_width
internal Rectangle row_headers_area
internal Rectangle cells_area
private bool in_calc_grid_areas
private object UIACollectionChangedEvent
private object UIASelectionChangedEvent
private object UIAColumnHeadersVisibleChangedEvent
private object UIAGridCellChangedEvent
public bool AllowNavigation
public bool AllowSorting
public Color AlternatingBackColor
public Color BackColor
public Color BackgroundColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BorderStyle BorderStyle
public Color CaptionBackColor
public Font CaptionFont
public Color CaptionForeColor
public string CaptionText
public bool CaptionVisible
public bool ColumnHeadersVisible
public DataGridCell CurrentCell
private int CurrentRow
private int CurrentColumn
public int CurrentRowIndex
public Cursor Cursor
public string DataMember
public object DataSource
protected Size DefaultSize
public int FirstVisibleColumn
public bool FlatMode
public Color ForeColor
public Color GridLineColor
public DataGridLineStyle GridLineStyle
public Color HeaderBackColor
public Font HeaderFont
public Color HeaderForeColor
protected ScrollBar HorizScrollBar
internal ScrollBar HScrollBar
internal int HorizPixelOffset
internal bool IsChanging
public object Item
public object Item
public Color LinkColor
internal Font LinkFont
public Color LinkHoverColor
protected internal CurrencyManager ListManager
public Color ParentRowsBackColor
public Color ParentRowsForeColor
public DataGridParentRowsLabelStyle ParentRowsLabelStyle
public bool ParentRowsVisible
public int PreferredColumnWidth
public int PreferredRowHeight
public bool ReadOnly
public bool RowHeadersVisible
public int RowHeaderWidth
internal DataGridRelationshipRow[] DataGridRows
public Color SelectionBackColor
public Color SelectionForeColor
public ISite Site
public GridTableStylesCollection TableStyles
public string Text
protected ScrollBar VertScrollBar
internal ScrollBar VScrollBar
public int VisibleColumnCount
public int VisibleRowCount
internal DataGridTableStyle CurrentTableStyle
internal int FirstVisibleRow
internal int MaxVisibleRowCount
internal int RowsCount
internal int RowHeight
internal bool ScaleChildrenInternal
internal bool ShowEditRow
internal bool ShowParentRows
internal Rectangle ColumnHeadersArea
internal Rectangle RowHeadersArea
internal Rectangle ParentRowsArea
private int VLargeChange
internal ScrollBar UIAHScrollBar
internal ScrollBar UIAVScrollBar
internal DataGridTableStyle UIACurrentTableStyle
internal int UIASelectedRows
internal Rectangle UIAColumnHeadersArea
internal Rectangle UIACaptionArea
internal Rectangle UIACellsArea
internal int UIARowHeight
public bool get_AllowNavigation()
public void set_AllowNavigation(bool value)
public bool get_AllowSorting()
public void set_AllowSorting(bool value)
public Color get_AlternatingBackColor()
public void set_AlternatingBackColor(Color value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Color get_BackgroundColor()
public void set_BackgroundColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public Color get_CaptionBackColor()
public void set_CaptionBackColor(Color value)
public Font get_CaptionFont()
public void set_CaptionFont(Font value)
public Color get_CaptionForeColor()
public void set_CaptionForeColor(Color value)
public string get_CaptionText()
public void set_CaptionText(string value)
public bool get_CaptionVisible()
public void set_CaptionVisible(bool value)
public bool get_ColumnHeadersVisible()
public void set_ColumnHeadersVisible(bool value)
public DataGridCell get_CurrentCell()
public void set_CurrentCell(DataGridCell value)
internal void EditRowChanged(DataGridColumnStyle column_style)
private int get_CurrentRow()
private void set_CurrentRow(int value)
private int get_CurrentColumn()
private void set_CurrentColumn(int value)
public int get_CurrentRowIndex()
public void set_CurrentRowIndex(int value)
public Cursor get_Cursor()
public void set_Cursor(Cursor value)
public string get_DataMember()
public void set_DataMember(string value)
public object get_DataSource()
public void set_DataSource(object value)
protected Size get_DefaultSize()
public int get_FirstVisibleColumn()
public bool get_FlatMode()
public void set_FlatMode(bool value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public Color get_GridLineColor()
public void set_GridLineColor(Color value)
public DataGridLineStyle get_GridLineStyle()
public void set_GridLineStyle(DataGridLineStyle value)
public Color get_HeaderBackColor()
public void set_HeaderBackColor(Color value)
public Font get_HeaderFont()
public void set_HeaderFont(Font value)
public Color get_HeaderForeColor()
public void set_HeaderForeColor(Color value)
protected ScrollBar get_HorizScrollBar()
internal ScrollBar get_HScrollBar()
internal int get_HorizPixelOffset()
internal bool get_IsChanging()
public object get_Item(DataGridCell cell)
public void set_Item(DataGridCell cell, object value)
public object get_Item(int rowIndex, int columnIndex)
public void set_Item(int rowIndex, int columnIndex, object value)
public Color get_LinkColor()
public void set_LinkColor(Color value)
internal Font get_LinkFont()
public Color get_LinkHoverColor()
public void set_LinkHoverColor(Color value)
protected internal CurrencyManager get_ListManager()
protected internal void set_ListManager(CurrencyManager value)
public Color get_ParentRowsBackColor()
public void set_ParentRowsBackColor(Color value)
public Color get_ParentRowsForeColor()
public void set_ParentRowsForeColor(Color value)
public DataGridParentRowsLabelStyle get_ParentRowsLabelStyle()
public void set_ParentRowsLabelStyle(DataGridParentRowsLabelStyle value)
public bool get_ParentRowsVisible()
public void set_ParentRowsVisible(bool value)
public int get_PreferredColumnWidth()
public void set_PreferredColumnWidth(int value)
public int get_PreferredRowHeight()
public void set_PreferredRowHeight(int value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public bool get_RowHeadersVisible()
public void set_RowHeadersVisible(bool value)
public int get_RowHeaderWidth()
public void set_RowHeaderWidth(int value)
internal DataGridRelationshipRow[] get_DataGridRows()
public Color get_SelectionBackColor()
public void set_SelectionBackColor(Color value)
public Color get_SelectionForeColor()
public void set_SelectionForeColor(Color value)
public ISite get_Site()
public void set_Site(ISite value)
public GridTableStylesCollection get_TableStyles()
public string get_Text()
public void set_Text(string value)
protected ScrollBar get_VertScrollBar()
internal ScrollBar get_VScrollBar()
public int get_VisibleColumnCount()
public int get_VisibleRowCount()
internal DataGridTableStyle get_CurrentTableStyle()
internal void set_CurrentTableStyle(DataGridTableStyle value)
internal int get_FirstVisibleRow()
internal int get_MaxVisibleRowCount()
internal int get_RowsCount()
internal int get_RowHeight()
internal bool get_ScaleChildrenInternal()
internal bool get_ShowEditRow()
internal bool get_ShowParentRows()
private void AbortEditing()
public bool BeginEdit(DataGridColumnStyle gridColumn, int rowNumber)
public void BeginInit()
protected void CancelEditing()
public void Collapse(int row)
protected internal void ColumnStartedEditing(Control editingControl)
protected internal void ColumnStartedEditing(Rectangle bounds)
protected AccessibleObject CreateAccessibilityInstance()
protected DataGridColumnStyle CreateGridColumn(PropertyDescriptor prop)
protected DataGridColumnStyle CreateGridColumn(PropertyDescriptor prop, bool isDefault)
protected void Dispose(bool disposing)
public bool EndEdit(DataGridColumnStyle gridColumn, int rowNumber, bool shouldAbort)
public void EndInit()
public void Expand(int row)
public Rectangle GetCellBounds(DataGridCell dgc)
public Rectangle GetCellBounds(int row, int col)
public Rectangle GetCurrentCellBounds()
protected string GetOutputTextDelimiter()
protected void GridHScrolled(object sender, ScrollEventArgs se)
protected void GridVScrolled(object sender, ScrollEventArgs se)
public HitTestInfo HitTest(Point position)
public HitTestInfo HitTest(int x, int y)
public bool IsExpanded(int rowNumber)
public bool IsSelected(int row)
public void NavigateBack()
public void NavigateTo(int rowNumber, string relationName)
protected void OnAllowNavigationChanged(EventArgs e)
protected void OnBackButtonClicked(object sender, EventArgs e)
protected void OnBackColorChanged(EventArgs e)
protected void OnBackgroundColorChanged(EventArgs e)
protected void OnBindingContextChanged(EventArgs e)
protected void OnBorderStyleChanged(EventArgs e)
protected void OnCaptionVisibleChanged(EventArgs e)
protected void OnCurrentCellChanged(EventArgs e)
protected void OnDataSourceChanged(EventArgs e)
protected void OnEnter(EventArgs e)
protected void OnFlatModeChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnKeyDown(KeyEventArgs ke)
protected void OnKeyPress(KeyPressEventArgs kpe)
protected void OnLayout(LayoutEventArgs levent)
protected void OnLeave(EventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseMove(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnMouseWheel(MouseEventArgs e)
protected void OnNavigate(NavigateEventArgs e)
protected void OnPaint(PaintEventArgs pe)
protected void OnPaintBackground(PaintEventArgs ebe)
protected void OnParentRowsLabelStyleChanged(EventArgs e)
protected void OnParentRowsVisibleChanged(EventArgs e)
protected void OnReadOnlyChanged(EventArgs e)
protected void OnResize(EventArgs e)
protected void OnRowHeaderClick(EventArgs e)
protected void OnScroll(EventArgs e)
protected void OnShowParentDetailsButtonClicked(object sender, EventArgs e)
protected bool ProcessDialogKey(Keys keyData)
private void UpdateSelectionAfterCursorMove(bool extend_selection)
protected bool ProcessGridKey(KeyEventArgs ke)
protected bool ProcessKeyPreview(Message& m)
protected bool ProcessTabKey(Keys keyData)
public void ResetAlternatingBackColor()
public void ResetBackColor()
public void ResetForeColor()
public void ResetGridLineColor()
public void ResetHeaderBackColor()
public void ResetHeaderFont()
public void ResetHeaderForeColor()
public void ResetLinkColor()
public void ResetLinkHoverColor()
protected void ResetSelection()
private void InvalidateSelection()
public void ResetSelectionBackColor()
public void ResetSelectionForeColor()
public void Select(int row)
public void SetDataBinding(object dataSource, string dataMember)
protected bool ShouldSerializeAlternatingBackColor()
protected bool ShouldSerializeBackgroundColor()
protected bool ShouldSerializeCaptionBackColor()
protected bool ShouldSerializeCaptionForeColor()
protected bool ShouldSerializeGridLineColor()
protected bool ShouldSerializeHeaderBackColor()
protected bool ShouldSerializeHeaderFont()
protected bool ShouldSerializeHeaderForeColor()
protected bool ShouldSerializeLinkHoverColor()
protected bool ShouldSerializeParentRowsBackColor()
protected bool ShouldSerializeParentRowsForeColor()
protected bool ShouldSerializePreferredRowHeight()
protected bool ShouldSerializeSelectionBackColor()
protected bool ShouldSerializeSelectionForeColor()
public void SubObjectsSiteChange(bool site)
public void UnSelect(int row)
internal void CalcAreasAndInvalidate()
private void ConnectListManagerEvents()
private void DisconnectListManagerEvents()
private void DisconnectTableStyleEvents()
private void ConnectTableStyleEvents()
private void TableStyleChanged(object sender, EventArgs args)
private void EnsureCellVisibility(DataGridCell cell)
private void SetDataSource(object source, string member)
private void SetDataSource(object source, string member, bool recreate_rows)
private void RecreateDataGridRows(bool recalc)
internal void UpdateRowsFrom(DataGridRelationshipRow row)
private void BindColumns()
private void OnListManagerMetaDataChanged(object sender, EventArgs e)
private void OnListManagerPositionChanged(object sender, EventArgs e)
private void OnListManagerItemChanged(object sender, ItemChangedEventArgs e)
private void OnTableStylesCollectionChanged(object sender, CollectionChangeEventArgs e)
private void AddNewRow()
private void Edit()
private void EndEdit()
private void ShiftSelection(int index)
private void ScrollToColumnInPixels(int pixel)
private void ScrollToRow(int old_row, int new_row)
private void ColumnResize(int column)
private void RowResize(int row)
public void add_AllowNavigationChanged(EventHandler value)
public void remove_AllowNavigationChanged(EventHandler value)
public void add_BackButtonClick(EventHandler value)
public void remove_BackButtonClick(EventHandler value)
public void add_BackgroundColorChanged(EventHandler value)
public void remove_BackgroundColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_CursorChanged(EventHandler value)
public void remove_CursorChanged(EventHandler value)
public void add_BorderStyleChanged(EventHandler value)
public void remove_BorderStyleChanged(EventHandler value)
public void add_CaptionVisibleChanged(EventHandler value)
public void remove_CaptionVisibleChanged(EventHandler value)
public void add_CurrentCellChanged(EventHandler value)
public void remove_CurrentCellChanged(EventHandler value)
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public void add_FlatModeChanged(EventHandler value)
public void remove_FlatModeChanged(EventHandler value)
public void add_Navigate(NavigateEventHandler value)
public void remove_Navigate(NavigateEventHandler value)
public void add_ParentRowsLabelStyleChanged(EventHandler value)
public void remove_ParentRowsLabelStyleChanged(EventHandler value)
public void add_ParentRowsVisibleChanged(EventHandler value)
public void remove_ParentRowsVisibleChanged(EventHandler value)
public void add_ReadOnlyChanged(EventHandler value)
public void remove_ReadOnlyChanged(EventHandler value)
protected void add_RowHeaderClick(EventHandler value)
protected void remove_RowHeaderClick(EventHandler value)
public void add_Scroll(EventHandler value)
public void remove_Scroll(EventHandler value)
public void add_ShowParentDetailsButtonClick(EventHandler value)
public void remove_ShowParentDetailsButtonClick(EventHandler value)
private int CalcAllColumnsWidth()
private int FromPixelToColumn(int pixel, Int32& column_x)
internal int GetColumnStartingPixel(int my_col)
private int GetFirstColumnForColumnVisibility(int current_first_visible_column, int column)
private void CalcGridAreas()
private void CalcCaption()
private void CalcCellsArea()
private void CalcColumnHeaders()
private void CalcParentRows()
private void CalcParentButtons()
private void CalcRowHeaders()
private int GetVisibleRowCount(int visibleHeight)
private void UpdateVisibleColumn()
private void UpdateVisibleRowCount()
private void InvalidateCaption()
private void InvalidateRow(int row)
private void InvalidateRowHeader(int row)
internal void InvalidateColumn(DataGridColumnStyle column)
private void DrawResizeLineVert(int x)
private void DrawResizeLineHoriz(int y)
private void SetUpHorizontalScrollBar(Int32& maximum)
private void SetUpVerticalScrollBar(Int32& height, Int32& maximum)
internal Rectangle get_ColumnHeadersArea()
internal Rectangle get_RowHeadersArea()
internal Rectangle get_ParentRowsArea()
private int get_VLargeChange()
internal ScrollBar get_UIAHScrollBar()
internal ScrollBar get_UIAVScrollBar()
internal DataGridTableStyle get_UIACurrentTableStyle()
internal int get_UIASelectedRows()
internal Rectangle get_UIAColumnHeadersArea()
internal Rectangle get_UIACaptionArea()
internal Rectangle get_UIACellsArea()
internal int get_UIARowHeight()
internal void add_UIACollectionChanged(CollectionChangeEventHandler value)
internal void remove_UIACollectionChanged(CollectionChangeEventHandler value)
internal void add_UIASelectionChanged(CollectionChangeEventHandler value)
internal void remove_UIASelectionChanged(CollectionChangeEventHandler value)
internal void add_UIAColumnHeadersVisibleChanged(EventHandler value)
internal void remove_UIAColumnHeadersVisibleChanged(EventHandler value)
internal void add_UIAGridCellChanged(CollectionChangeEventHandler value)
internal void remove_UIAGridCellChanged(CollectionChangeEventHandler value)
internal void OnUIACollectionChangedEvent(CollectionChangeEventArgs args)
internal void OnUIASelectionChangedEvent(CollectionChangeEventArgs args)
internal void OnUIAColumnHeadersVisibleChanged()
internal void OnUIAGridCellChanged(CollectionChangeEventArgs args)
}
public System.Windows.Forms.DataGridBoolColumn : DataGridColumnStyle {
private bool allow_null
private object false_value
private object null_value
private object true_value
private int editing_row
private CheckState editing_state
private CheckState model_state
private Size checkbox_size
private object AllowNullChangedEvent
private object FalseValueChangedEvent
private object TrueValueChangedEvent
public bool AllowNull
public object FalseValue
public object NullValue
public object TrueValue
public void .ctor(PropertyDescriptor prop)
public void .ctor(PropertyDescriptor prop, bool isDefault)
public bool get_AllowNull()
public void set_AllowNull(bool value)
public object get_FalseValue()
public void set_FalseValue(object value)
public object get_NullValue()
public void set_NullValue(object value)
public object get_TrueValue()
public void set_TrueValue(object value)
protected internal void Abort(int rowNum)
protected internal bool Commit(CurrencyManager dataSource, int rowNum)
protected internal void ConcedeFocus()
protected internal void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly, string displayText, bool cellIsVisible)
protected internal void EnterNullValue()
private bool ValueEquals(object value, object obj)
protected internal object GetColumnValueAtRow(CurrencyManager lm, int row)
protected internal int GetMinimumHeight()
protected internal int GetPreferredHeight(Graphics g, object value)
protected internal Size GetPreferredSize(Graphics g, object value)
protected internal void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum)
protected internal void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, bool alignToRight)
protected internal void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, Brush backBrush, Brush foreBrush, bool alignToRight)
protected internal void SetColumnValueAtRow(CurrencyManager lm, int row, object value)
private object FromStateToValue(CheckState state)
private CheckState FromValueToState(object obj)
private CheckState GetNextState(CheckState state)
internal void OnKeyDown(KeyEventArgs ke, int row, int column)
internal void OnMouseDown(MouseEventArgs e, int row, int column)
private void NextState(int row, int column)
public void add_AllowNullChanged(EventHandler value)
public void remove_AllowNullChanged(EventHandler value)
public void add_FalseValueChanged(EventHandler value)
public void remove_FalseValueChanged(EventHandler value)
public void add_TrueValueChanged(EventHandler value)
public void remove_TrueValueChanged(EventHandler value)
}
public System.Windows.Forms.DataGridCell : ValueType {
private int row
private int column
public int ColumnNumber
public int RowNumber
public void .ctor(int r, int c)
public int get_ColumnNumber()
public void set_ColumnNumber(int value)
public int get_RowNumber()
public void set_RowNumber(int value)
public bool Equals(object o)
public int GetHashCode()
public string ToString()
}
public System.Windows.Forms.DataGridColumnStyle : Component {
internal HorizontalAlignment alignment
private int fontheight
internal DataGridTableStyle table_style
private string header_text
private string mapping_name
private string null_text
private PropertyDescriptor property_descriptor
private bool _readonly
private int width
internal bool is_default
internal DataGrid grid
private DataGridColumnHeaderAccessibleObject accesible_object
private string def_null_text
private ArrowDrawing arrow_drawing
internal bool bound
private object AlignmentChangedEvent
private object FontChangedEvent
private object HeaderTextChangedEvent
private object MappingNameChangedEvent
private object NullTextChangedEvent
private object PropertyDescriptorChangedEvent
private object ReadOnlyChangedEvent
private object WidthChangedEvent
public HorizontalAlignment Alignment
public DataGridTableStyle DataGridTableStyle
protected int FontHeight
public AccessibleObject HeaderAccessibleObject
public string HeaderText
public string MappingName
public string NullText
public PropertyDescriptor PropertyDescriptor
public bool ReadOnly
public int Width
internal ArrowDrawing ArrowDrawingMode
internal bool TableStyleReadOnly
internal DataGridTableStyle TableStyle
internal bool IsDefault
public void .ctor(PropertyDescriptor prop)
public HorizontalAlignment get_Alignment()
public void set_Alignment(HorizontalAlignment value)
public DataGridTableStyle get_DataGridTableStyle()
protected int get_FontHeight()
public AccessibleObject get_HeaderAccessibleObject()
public string get_HeaderText()
public void set_HeaderText(string value)
public string get_MappingName()
public void set_MappingName(string value)
public string get_NullText()
public void set_NullText(string value)
public PropertyDescriptor get_PropertyDescriptor()
public void set_PropertyDescriptor(PropertyDescriptor value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public int get_Width()
public void set_Width(int value)
internal ArrowDrawing get_ArrowDrawingMode()
internal void set_ArrowDrawingMode(ArrowDrawing value)
internal bool get_TableStyleReadOnly()
internal void set_TableStyle(DataGridTableStyle value)
internal bool get_IsDefault()
protected internal void Abort(int rowNum)
protected void BeginUpdate()
protected void CheckValidDataSource(CurrencyManager value)
protected internal void ColumnStartedEditing(Control editingControl)
protected internal bool Commit(CurrencyManager dataSource, int rowNum)
protected internal void ConcedeFocus()
protected AccessibleObject CreateHeaderAccessibleObject()
protected internal void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly)
protected internal void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly, string displayText)
protected internal void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly, string displayText, bool cellIsVisible)
protected void EndUpdate()
protected internal void EnterNullValue()
protected internal object GetColumnValueAtRow(CurrencyManager source, int rowNum)
protected internal int GetMinimumHeight()
protected internal int GetPreferredHeight(Graphics g, object value)
protected internal Size GetPreferredSize(Graphics g, object value)
private void System.Windows.Forms.IDataGridColumnStyleEditingNotificationService.ColumnStartedEditing(Control editingControl)
protected void Invalidate()
protected internal void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum)
protected internal void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, bool alignToRight)
protected internal void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, Brush backBrush, Brush foreBrush, bool alignToRight)
protected internal void ReleaseHostedControl()
public void ResetHeaderText()
protected internal void SetColumnValueAtRow(CurrencyManager source, int rowNum, object value)
protected void SetDataGrid(DataGrid value)
protected void SetDataGridInColumn(DataGrid value)
internal void SetDataGridInternal(DataGrid value)
protected internal void UpdateUI(CurrencyManager source, int rowNum, string displayText)
internal void OnMouseDown(MouseEventArgs e, int row, int column)
internal void OnKeyDown(KeyEventArgs ke, int row, int column)
internal void PaintHeader(Graphics g, Rectangle bounds, int colNum)
internal void PaintNewRow(Graphics g, Rectangle bounds, Brush backBrush, Brush foreBrush)
internal void PaintGridLine(Graphics g, Rectangle bounds)
public void add_AlignmentChanged(EventHandler value)
public void remove_AlignmentChanged(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_HeaderTextChanged(EventHandler value)
public void remove_HeaderTextChanged(EventHandler value)
public void add_MappingNameChanged(EventHandler value)
public void remove_MappingNameChanged(EventHandler value)
public void add_NullTextChanged(EventHandler value)
public void remove_NullTextChanged(EventHandler value)
public void add_PropertyDescriptorChanged(EventHandler value)
public void remove_PropertyDescriptorChanged(EventHandler value)
public void add_ReadOnlyChanged(EventHandler value)
public void remove_ReadOnlyChanged(EventHandler value)
public void add_WidthChanged(EventHandler value)
public void remove_WidthChanged(EventHandler value)
}
internal System.Windows.Forms.DataGridDataSource : object {
public DataGrid owner
public CurrencyManager list_manager
public object view
public string data_member
public object data_source
public DataGridCell current
private DataGridRelationshipRow[] rows
private Hashtable selected_rows
private int selection_start
public DataGridRelationshipRow[] Rows
public Hashtable SelectedRows
public int SelectionStart
public void .ctor(DataGrid owner, CurrencyManager list_manager, object data_source, string data_member, object view_data, DataGridCell current)
public DataGridRelationshipRow[] get_Rows()
public void set_Rows(DataGridRelationshipRow[] value)
public Hashtable get_SelectedRows()
public void set_SelectedRows(Hashtable value)
public int get_SelectionStart()
public void set_SelectionStart(int value)
}
public System.Windows.Forms.DataGridLineStyle : Enum {
public int value__
public DataGridLineStyle None
public DataGridLineStyle Solid
}
public System.Windows.Forms.DataGridParentRowsLabelStyle : Enum {
public int value__
public DataGridParentRowsLabelStyle None
public DataGridParentRowsLabelStyle TableName
public DataGridParentRowsLabelStyle ColumnName
public DataGridParentRowsLabelStyle Both
}
public System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
internal System.Windows.Forms.DataGridRelationshipRow : object {
private DataGrid owner
public int height
public bool IsSelected
public bool IsExpanded
public int VerticalOffset
public int RelationHeight
public Rectangle relation_area
public int Height
public void .ctor(DataGrid owner)
public int get_Height()
public void set_Height(int value)
}
public System.Windows.Forms.DataGridTableStyle : Component {
public DataGridTableStyle DefaultTableStyle
private Color def_alternating_backcolor
private Color def_backcolor
private Color def_forecolor
private Color def_gridline_color
private Color def_header_backcolor
private Font def_header_font
private Color def_header_forecolor
private Color def_link_color
private Color def_link_hovercolor
private Color def_selection_backcolor
private Color def_selection_forecolor
private int def_preferredrow_height
private bool allow_sorting
private DataGrid datagrid
private Color header_forecolor
private string mapping_name
private Color alternating_backcolor
private bool columnheaders_visible
private GridColumnStylesCollection column_styles
private Color gridline_color
private DataGridLineStyle gridline_style
private Color header_backcolor
private Font header_font
private Color link_color
private Color link_hovercolor
private int preferredcolumn_width
private int preferredrow_height
private bool _readonly
private bool rowheaders_visible
private Color selection_backcolor
private Color selection_forecolor
private int rowheaders_width
private Color backcolor
private Color forecolor
private bool is_default
internal ArrayList table_relations
private CurrencyManager manager
private object AllowSortingChangedEvent
private object AlternatingBackColorChangedEvent
private object BackColorChangedEvent
private object ColumnHeadersVisibleChangedEvent
private object ForeColorChangedEvent
private object GridLineColorChangedEvent
private object GridLineStyleChangedEvent
private object HeaderBackColorChangedEvent
private object HeaderFontChangedEvent
private object HeaderForeColorChangedEvent
private object LinkColorChangedEvent
private object LinkHoverColorChangedEvent
private object MappingNameChangedEvent
private object PreferredColumnWidthChangedEvent
private object PreferredRowHeightChangedEvent
private object ReadOnlyChangedEvent
private object RowHeadersVisibleChangedEvent
private object RowHeaderWidthChangedEvent
private object SelectionBackColorChangedEvent
private object SelectionForeColorChangedEvent
public bool AllowSorting
public Color AlternatingBackColor
public Color BackColor
public bool ColumnHeadersVisible
public DataGrid DataGrid
public Color ForeColor
public GridColumnStylesCollection GridColumnStyles
public Color GridLineColor
public DataGridLineStyle GridLineStyle
public Color HeaderBackColor
public Font HeaderFont
public Color HeaderForeColor
public Color LinkColor
public Color LinkHoverColor
public string MappingName
public int PreferredColumnWidth
public int PreferredRowHeight
public bool ReadOnly
public bool RowHeadersVisible
public int RowHeaderWidth
public Color SelectionBackColor
public Color SelectionForeColor
internal DataGridLineStyle CurrentGridLineStyle
internal Color CurrentGridLineColor
internal Color CurrentHeaderBackColor
internal Color CurrentHeaderForeColor
internal int CurrentPreferredColumnWidth
internal int CurrentPreferredRowHeight
internal bool CurrentRowHeadersVisible
internal bool HasRelations
internal String[] Relations
public void .ctor(bool isDefaultTableStyle)
public void .ctor(CurrencyManager listManager)
public bool get_AllowSorting()
public void set_AllowSorting(bool value)
public Color get_AlternatingBackColor()
public void set_AlternatingBackColor(Color value)
public Color get_BackColor()
public void set_BackColor(Color value)
public bool get_ColumnHeadersVisible()
public void set_ColumnHeadersVisible(bool value)
public DataGrid get_DataGrid()
public void set_DataGrid(DataGrid value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public GridColumnStylesCollection get_GridColumnStyles()
public Color get_GridLineColor()
public void set_GridLineColor(Color value)
public DataGridLineStyle get_GridLineStyle()
public void set_GridLineStyle(DataGridLineStyle value)
public Color get_HeaderBackColor()
public void set_HeaderBackColor(Color value)
public Font get_HeaderFont()
public void set_HeaderFont(Font value)
public Color get_HeaderForeColor()
public void set_HeaderForeColor(Color value)
public Color get_LinkColor()
public void set_LinkColor(Color value)
public Color get_LinkHoverColor()
public void set_LinkHoverColor(Color value)
public string get_MappingName()
public void set_MappingName(string value)
public int get_PreferredColumnWidth()
public void set_PreferredColumnWidth(int value)
public int get_PreferredRowHeight()
public void set_PreferredRowHeight(int value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public bool get_RowHeadersVisible()
public void set_RowHeadersVisible(bool value)
public int get_RowHeaderWidth()
public void set_RowHeaderWidth(int value)
public Color get_SelectionBackColor()
public void set_SelectionBackColor(Color value)
public Color get_SelectionForeColor()
public void set_SelectionForeColor(Color value)
internal DataGridLineStyle get_CurrentGridLineStyle()
internal Color get_CurrentGridLineColor()
internal Color get_CurrentHeaderBackColor()
internal Color get_CurrentHeaderForeColor()
internal int get_CurrentPreferredColumnWidth()
internal int get_CurrentPreferredRowHeight()
internal bool get_CurrentRowHeadersVisible()
internal bool get_HasRelations()
internal String[] get_Relations()
public bool BeginEdit(DataGridColumnStyle gridColumn, int rowNumber)
protected internal DataGridColumnStyle CreateGridColumn(PropertyDescriptor prop)
protected internal DataGridColumnStyle CreateGridColumn(PropertyDescriptor prop, bool isDefault)
protected void Dispose(bool disposing)
public bool EndEdit(DataGridColumnStyle gridColumn, int rowNumber, bool shouldAbort)
protected void OnAllowSortingChanged(EventArgs e)
protected void OnAlternatingBackColorChanged(EventArgs e)
protected void OnBackColorChanged(EventArgs e)
protected void OnColumnHeadersVisibleChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnGridLineColorChanged(EventArgs e)
protected void OnGridLineStyleChanged(EventArgs e)
protected void OnHeaderBackColorChanged(EventArgs e)
protected void OnHeaderFontChanged(EventArgs e)
protected void OnHeaderForeColorChanged(EventArgs e)
protected void OnLinkColorChanged(EventArgs e)
protected void OnLinkHoverColorChanged(EventArgs e)
protected void OnMappingNameChanged(EventArgs e)
protected void OnPreferredColumnWidthChanged(EventArgs e)
protected void OnPreferredRowHeightChanged(EventArgs e)
protected void OnReadOnlyChanged(EventArgs e)
protected void OnRowHeadersVisibleChanged(EventArgs e)
protected void OnRowHeaderWidthChanged(EventArgs e)
protected void OnSelectionBackColorChanged(EventArgs e)
protected void OnSelectionForeColorChanged(EventArgs e)
public void ResetAlternatingBackColor()
public void ResetBackColor()
public void ResetForeColor()
public void ResetGridLineColor()
public void ResetHeaderBackColor()
public void ResetHeaderFont()
public void ResetHeaderForeColor()
public void ResetLinkColor()
public void ResetLinkHoverColor()
public void ResetSelectionBackColor()
public void ResetSelectionForeColor()
protected bool ShouldSerializeAlternatingBackColor()
protected bool ShouldSerializeBackColor()
protected bool ShouldSerializeForeColor()
protected bool ShouldSerializeGridLineColor()
protected bool ShouldSerializeHeaderBackColor()
protected bool ShouldSerializeHeaderForeColor()
protected bool ShouldSerializeLinkColor()
protected bool ShouldSerializeLinkHoverColor()
protected bool ShouldSerializePreferredRowHeight()
protected bool ShouldSerializeSelectionBackColor()
protected bool ShouldSerializeSelectionForeColor()
internal void CreateColumnsForTable(bool onlyBind)
public void add_AllowSortingChanged(EventHandler value)
public void remove_AllowSortingChanged(EventHandler value)
public void add_AlternatingBackColorChanged(EventHandler value)
public void remove_AlternatingBackColorChanged(EventHandler value)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_ColumnHeadersVisibleChanged(EventHandler value)
public void remove_ColumnHeadersVisibleChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_GridLineColorChanged(EventHandler value)
public void remove_GridLineColorChanged(EventHandler value)
public void add_GridLineStyleChanged(EventHandler value)
public void remove_GridLineStyleChanged(EventHandler value)
public void add_HeaderBackColorChanged(EventHandler value)
public void remove_HeaderBackColorChanged(EventHandler value)
public void add_HeaderFontChanged(EventHandler value)
public void remove_HeaderFontChanged(EventHandler value)
public void add_HeaderForeColorChanged(EventHandler value)
public void remove_HeaderForeColorChanged(EventHandler value)
public void add_LinkColorChanged(EventHandler value)
public void remove_LinkColorChanged(EventHandler value)
public void add_LinkHoverColorChanged(EventHandler value)
public void remove_LinkHoverColorChanged(EventHandler value)
public void add_MappingNameChanged(EventHandler value)
public void remove_MappingNameChanged(EventHandler value)
public void add_PreferredColumnWidthChanged(EventHandler value)
public void remove_PreferredColumnWidthChanged(EventHandler value)
public void add_PreferredRowHeightChanged(EventHandler value)
public void remove_PreferredRowHeightChanged(EventHandler value)
public void add_ReadOnlyChanged(EventHandler value)
public void remove_ReadOnlyChanged(EventHandler value)
public void add_RowHeadersVisibleChanged(EventHandler value)
public void remove_RowHeadersVisibleChanged(EventHandler value)
public void add_RowHeaderWidthChanged(EventHandler value)
public void remove_RowHeaderWidthChanged(EventHandler value)
public void add_SelectionBackColorChanged(EventHandler value)
public void remove_SelectionBackColorChanged(EventHandler value)
public void add_SelectionForeColorChanged(EventHandler value)
public void remove_SelectionForeColorChanged(EventHandler value)
}
public System.Windows.Forms.DataGridTextBox : TextBox {
private bool isnavigating
private DataGrid grid
public bool IsInEditOrNavigateMode
public bool get_IsInEditOrNavigateMode()
public void set_IsInEditOrNavigateMode(bool value)
protected void OnKeyPress(KeyPressEventArgs e)
protected void OnMouseWheel(MouseEventArgs e)
protected internal bool ProcessKeyMessage(Message& m)
public void SetDataGrid(DataGrid parentGrid)
protected void WndProc(Message& m)
}
public System.Windows.Forms.DataGridTextBoxColumn : DataGridColumnStyle {
private string format
private IFormatProvider format_provider
private StringFormat string_format
private DataGridTextBox textbox
private int offset_x
private int offset_y
public string Format
public IFormatProvider FormatInfo
public PropertyDescriptor PropertyDescriptor
public bool ReadOnly
public TextBox TextBox
public void .ctor(PropertyDescriptor prop)
public void .ctor(PropertyDescriptor prop, bool isDefault)
public void .ctor(PropertyDescriptor prop, string format)
public void .ctor(PropertyDescriptor prop, string format, bool isDefault)
public string get_Format()
public void set_Format(string value)
public IFormatProvider get_FormatInfo()
public void set_FormatInfo(IFormatProvider value)
public void set_PropertyDescriptor(PropertyDescriptor value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public TextBox get_TextBox()
protected internal void Abort(int rowNum)
protected internal bool Commit(CurrencyManager dataSource, int rowNum)
protected internal void ConcedeFocus()
protected internal void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly, string displayText, bool cellIsVisible)
private void textbox_TextChanged(object o, EventArgs e)
protected void EndEdit()
protected internal void EnterNullValue()
protected internal int GetMinimumHeight()
protected internal int GetPreferredHeight(Graphics g, object value)
protected internal Size GetPreferredSize(Graphics g, object value)
protected void HideEditBox()
protected internal void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum)
protected internal void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, bool alignToRight)
protected internal void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, Brush backBrush, Brush foreBrush, bool alignToRight)
protected void PaintText(Graphics g, Rectangle bounds, string text, bool alignToRight)
protected void PaintText(Graphics g, Rectangle textBounds, string text, Brush backBrush, Brush foreBrush, bool alignToRight)
protected internal void ReleaseHostedControl()
protected void SetDataGridInColumn(DataGrid value)
protected internal void UpdateUI(CurrencyManager source, int rowNum, string displayText)
private string GetFormattedValue(CurrencyManager source, int rowNum)
private string GetFormattedValue(object obj)
}
public System.Windows.Forms.DataGridView : Control {
private DataGridViewAdvancedBorderStyle adjustedTopLeftHeaderBorderStyle
private DataGridViewAdvancedBorderStyle advancedCellBorderStyle
private DataGridViewAdvancedBorderStyle advancedColumnHeadersBorderStyle
private DataGridViewAdvancedBorderStyle advancedRowHeadersBorderStyle
private bool allowUserToAddRows
private bool allowUserToDeleteRows
private bool allowUserToOrderColumns
private bool allowUserToResizeColumns
private bool allowUserToResizeRows
private DataGridViewCellStyle alternatingRowsDefaultCellStyle
private Point anchor_cell
private bool autoGenerateColumns
private bool autoSize
private DataGridViewAutoSizeColumnsMode autoSizeColumnsMode
private DataGridViewAutoSizeRowsMode autoSizeRowsMode
private Color backColor
private Color backgroundColor
private Image backgroundImage
private BorderStyle borderStyle
private DataGridViewCellBorderStyle cellBorderStyle
private DataGridViewClipboardCopyMode clipboardCopyMode
private DataGridViewHeaderBorderStyle columnHeadersBorderStyle
private DataGridViewCellStyle columnHeadersDefaultCellStyle
private int columnHeadersHeight
private DataGridViewColumnHeadersHeightSizeMode columnHeadersHeightSizeMode
private bool columnHeadersVisible
private DataGridViewColumnCollection columns
private DataGridViewCell currentCell
private Point currentCellAddress
private string dataMember
private object dataSource
private DataGridViewCellStyle defaultCellStyle
private DataGridViewEditMode editMode
private bool enableHeadersVisualStyles
private DataGridViewCell firstDisplayedCell
private int firstDisplayedScrollingColumnHiddenWidth
private int firstDisplayedScrollingColumnIndex
private int firstDisplayedScrollingRowIndex
private Color gridColor
private int horizontalScrollingOffset
private DataGridViewCell hover_cell
private bool isCurrentCellDirty
private bool multiSelect
private bool readOnly
private DataGridViewHeaderBorderStyle rowHeadersBorderStyle
private DataGridViewCellStyle rowHeadersDefaultCellStyle
private bool rowHeadersVisible
private int rowHeadersWidth
private DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode
private DataGridViewRowCollection rows
private DataGridViewCellStyle rowsDefaultCellStyle
private DataGridViewRow rowTemplate
private ScrollBars scrollBars
private DataGridViewSelectionMode selectionMode
private bool showCellErrors
private bool showCellToolTips
private bool showEditingIcon
private bool showRowErrors
private DataGridViewColumn sortedColumn
private SortOrder sortOrder
private bool standardTab
private DataGridViewHeaderCell topLeftHeaderCell
private Cursor userSetCursor
private int verticalScrollingOffset
private bool virtualMode
private HScrollBar horizontalScrollBar
private VScrollBar verticalScrollBar
private Control editingControl
private bool is_autogenerating_columns
private bool is_binding
private bool new_row_editing
private int selected_row
private int selected_column
private Timer tooltip_timer
private ToolTip tooltip_window
private DataGridViewCell tooltip_currently_showing
private DataGridViewSelectedRowCollection selected_rows
private DataGridViewSelectedColumnCollection selected_columns
private DataGridViewRow editing_row
private DataGridViewHeaderCell pressed_header_cell
private DataGridViewHeaderCell entered_header_cell
private bool column_resize_active
private bool row_resize_active
private int resize_band
private int resize_band_start
private int resize_band_delta
private object AllowUserToAddRowsChangedEvent
private object AllowUserToDeleteRowsChangedEvent
private object AllowUserToOrderColumnsChangedEvent
private object AllowUserToResizeColumnsChangedEvent
private object AllowUserToResizeRowsChangedEvent
private object AlternatingRowsDefaultCellStyleChangedEvent
private object AutoGenerateColumnsChangedEvent
private object AutoSizeColumnModeChangedEvent
private object AutoSizeColumnsModeChangedEvent
private object AutoSizeRowsModeChangedEvent
private object BackgroundColorChangedEvent
private object BorderStyleChangedEvent
private object CancelRowEditEvent
private object CellBeginEditEvent
private object CellBorderStyleChangedEvent
private object CellClickEvent
private object CellContentClickEvent
private object CellContentDoubleClickEvent
private object CellContextMenuStripChangedEvent
private object CellContextMenuStripNeededEvent
private object CellDoubleClickEvent
private object CellEndEditEvent
private object CellEnterEvent
private object CellErrorTextChangedEvent
private object CellErrorTextNeededEvent
private object CellFormattingEvent
private object CellLeaveEvent
private object CellMouseClickEvent
private object CellMouseDoubleClickEvent
private object CellMouseDownEvent
private object CellMouseEnterEvent
private object CellMouseLeaveEvent
private object CellMouseMoveEvent
private object CellMouseUpEvent
private object CellPaintingEvent
private object CellParsingEvent
private object CellStateChangedEvent
private object CellStyleChangedEvent
private object CellStyleContentChangedEvent
private object CellToolTipTextChangedEvent
private object CellToolTipTextNeededEvent
private object CellValidatedEvent
private object CellValidatingEvent
private object CellValueChangedEvent
private object CellValueNeededEvent
private object CellValuePushedEvent
private object ColumnAddedEvent
private object ColumnContextMenuStripChangedEvent
private object ColumnDataPropertyNameChangedEvent
private object ColumnDefaultCellStyleChangedEvent
private object ColumnDisplayIndexChangedEvent
private object ColumnDividerDoubleClickEvent
private object ColumnDividerWidthChangedEvent
private object ColumnHeaderCellChangedEvent
private object ColumnHeaderMouseClickEvent
private object ColumnHeaderMouseDoubleClickEvent
private object ColumnHeadersBorderStyleChangedEvent
private object ColumnHeadersDefaultCellStyleChangedEvent
private object ColumnHeadersHeightChangedEvent
private object ColumnHeadersHeightSizeModeChangedEvent
private object ColumnMinimumWidthChangedEvent
private object ColumnNameChangedEvent
private object ColumnRemovedEvent
private object ColumnSortModeChangedEvent
private object ColumnStateChangedEvent
private object ColumnToolTipTextChangedEvent
private object ColumnWidthChangedEvent
private object CurrentCellChangedEvent
private object CurrentCellDirtyStateChangedEvent
private object DataBindingCompleteEvent
private object DataErrorEvent
private object DataMemberChangedEvent
private object DataSourceChangedEvent
private object DefaultCellStyleChangedEvent
private object DefaultValuesNeededEvent
private object EditingControlShowingEvent
private object EditModeChangedEvent
private object GridColorChangedEvent
private object MultiSelectChangedEvent
private object NewRowNeededEvent
private object ReadOnlyChangedEvent
private object RowContextMenuStripChangedEvent
private object RowContextMenuStripNeededEvent
private object RowDefaultCellStyleChangedEvent
private object RowDirtyStateNeededEvent
private object RowDividerDoubleClickEvent
private object RowDividerHeightChangedEvent
private object RowEnterEvent
private object RowErrorTextChangedEvent
private object RowErrorTextNeededEvent
private object RowHeaderCellChangedEvent
private object RowHeaderMouseClickEvent
private object RowHeaderMouseDoubleClickEvent
private object RowHeadersBorderStyleChangedEvent
private object RowHeadersDefaultCellStyleChangedEvent
private object RowHeadersWidthChangedEvent
private object RowHeadersWidthSizeModeChangedEvent
private object RowHeightChangedEvent
private object RowHeightInfoNeededEvent
private object RowHeightInfoPushedEvent
private object RowLeaveEvent
private object RowMinimumHeightChangedEvent
private object RowPostPaintEvent
private object RowPrePaintEvent
private object RowsAddedEvent
private object RowsDefaultCellStyleChangedEvent
private object RowsRemovedEvent
private object RowStateChangedEvent
private object RowUnsharedEvent
private object RowValidatedEvent
private object RowValidatingEvent
private object ScrollEvent
private object SelectionChangedEvent
private object SortCompareEvent
private object SortedEvent
private object UserAddedRowEvent
private object UserDeletedRowEvent
private object UserDeletingRowEvent
private int first_row_index
internal int first_col_index
public DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle
public DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle
public DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle
public DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle
public bool AllowUserToAddRows
public bool AllowUserToDeleteRows
public bool AllowUserToOrderColumns
public bool AllowUserToResizeColumns
public bool AllowUserToResizeRows
public DataGridViewCellStyle AlternatingRowsDefaultCellStyle
public bool AutoGenerateColumns
public bool AutoSize
public DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode
public DataGridViewAutoSizeRowsMode AutoSizeRowsMode
public Color BackColor
public Color BackgroundColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BorderStyle BorderStyle
internal int BorderWidth
public DataGridViewCellBorderStyle CellBorderStyle
public DataGridViewClipboardCopyMode ClipboardCopyMode
public int ColumnCount
public DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle
public DataGridViewCellStyle ColumnHeadersDefaultCellStyle
public int ColumnHeadersHeight
public DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode
public bool ColumnHeadersVisible
public DataGridViewColumnCollection Columns
public DataGridViewCell CurrentCell
public Point CurrentCellAddress
public DataGridViewRow CurrentRow
public string DataMember
public object DataSource
internal CurrencyManager DataManager
public DataGridViewCellStyle DefaultCellStyle
public Rectangle DisplayRectangle
public Control EditingControl
public Panel EditingPanel
public DataGridViewEditMode EditMode
public bool EnableHeadersVisualStyles
internal DataGridViewHeaderCell EnteredHeaderCell
public DataGridViewCell FirstDisplayedCell
public int FirstDisplayedScrollingColumnHiddenWidth
public int FirstDisplayedScrollingColumnIndex
public int FirstDisplayedScrollingRowIndex
public Font Font
public Color ForeColor
public Color GridColor
public int HorizontalScrollingOffset
public bool IsCurrentCellDirty
public bool IsCurrentCellInEditMode
public bool IsCurrentRowDirty
public DataGridViewCell Item
public DataGridViewCell Item
public bool MultiSelect
public int NewRowIndex
public Padding Padding
internal DataGridViewHeaderCell PressedHeaderCell
public bool ReadOnly
public int RowCount
public DataGridViewHeaderBorderStyle RowHeadersBorderStyle
public DataGridViewCellStyle RowHeadersDefaultCellStyle
public bool RowHeadersVisible
public int RowHeadersWidth
public DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode
public DataGridViewRowCollection Rows
public DataGridViewCellStyle RowsDefaultCellStyle
public DataGridViewRow RowTemplate
internal DataGridViewRow RowTemplateFull
internal bool ScaleChildrenInternal
public ScrollBars ScrollBars
public DataGridViewSelectedCellCollection SelectedCells
public DataGridViewSelectedColumnCollection SelectedColumns
public DataGridViewSelectedRowCollection SelectedRows
public DataGridViewSelectionMode SelectionMode
public bool ShowCellErrors
public bool ShowCellToolTips
public bool ShowEditingIcon
public bool ShowRowErrors
public DataGridViewColumn SortedColumn
public SortOrder SortOrder
public bool StandardTab
public string Text
public DataGridViewHeaderCell TopLeftHeaderCell
public Cursor UserSetCursor
public int VerticalScrollingOffset
public bool VirtualMode
internal Control EditingControlInternal
protected bool CanEnableIme
protected Size DefaultSize
protected ScrollBar HorizontalScrollBar
protected ScrollBar VerticalScrollBar
internal DataGridViewRow EditingRow
private Timer ToolTipTimer
private ToolTip ToolTipWindow
private void System.ComponentModel.ISupportInitialize.BeginInit()
private void System.ComponentModel.ISupportInitialize.EndInit()
public DataGridViewAdvancedBorderStyle get_AdjustedTopLeftHeaderBorderStyle()
public DataGridViewAdvancedBorderStyle get_AdvancedCellBorderStyle()
public DataGridViewAdvancedBorderStyle get_AdvancedColumnHeadersBorderStyle()
public DataGridViewAdvancedBorderStyle get_AdvancedRowHeadersBorderStyle()
public bool get_AllowUserToAddRows()
public void set_AllowUserToAddRows(bool value)
public bool get_AllowUserToDeleteRows()
public void set_AllowUserToDeleteRows(bool value)
public bool get_AllowUserToOrderColumns()
public void set_AllowUserToOrderColumns(bool value)
public bool get_AllowUserToResizeColumns()
public void set_AllowUserToResizeColumns(bool value)
public bool get_AllowUserToResizeRows()
public void set_AllowUserToResizeRows(bool value)
public DataGridViewCellStyle get_AlternatingRowsDefaultCellStyle()
public void set_AlternatingRowsDefaultCellStyle(DataGridViewCellStyle value)
public bool get_AutoGenerateColumns()
public void set_AutoGenerateColumns(bool value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public DataGridViewAutoSizeColumnsMode get_AutoSizeColumnsMode()
public void set_AutoSizeColumnsMode(DataGridViewAutoSizeColumnsMode value)
public DataGridViewAutoSizeRowsMode get_AutoSizeRowsMode()
public void set_AutoSizeRowsMode(DataGridViewAutoSizeRowsMode value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Color get_BackgroundColor()
public void set_BackgroundColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
internal int get_BorderWidth()
public DataGridViewCellBorderStyle get_CellBorderStyle()
public void set_CellBorderStyle(DataGridViewCellBorderStyle value)
public DataGridViewClipboardCopyMode get_ClipboardCopyMode()
public void set_ClipboardCopyMode(DataGridViewClipboardCopyMode value)
public int get_ColumnCount()
public void set_ColumnCount(int value)
public DataGridViewHeaderBorderStyle get_ColumnHeadersBorderStyle()
public void set_ColumnHeadersBorderStyle(DataGridViewHeaderBorderStyle value)
public DataGridViewCellStyle get_ColumnHeadersDefaultCellStyle()
public void set_ColumnHeadersDefaultCellStyle(DataGridViewCellStyle value)
public int get_ColumnHeadersHeight()
public void set_ColumnHeadersHeight(int value)
public DataGridViewColumnHeadersHeightSizeMode get_ColumnHeadersHeightSizeMode()
public void set_ColumnHeadersHeightSizeMode(DataGridViewColumnHeadersHeightSizeMode value)
public bool get_ColumnHeadersVisible()
public void set_ColumnHeadersVisible(bool value)
public DataGridViewColumnCollection get_Columns()
public DataGridViewCell get_CurrentCell()
public void set_CurrentCell(DataGridViewCell value)
public Point get_CurrentCellAddress()
public DataGridViewRow get_CurrentRow()
public string get_DataMember()
public void set_DataMember(string value)
public object get_DataSource()
public void set_DataSource(object value)
internal CurrencyManager get_DataManager()
public DataGridViewCellStyle get_DefaultCellStyle()
public void set_DefaultCellStyle(DataGridViewCellStyle value)
public Rectangle get_DisplayRectangle()
public Control get_EditingControl()
public Panel get_EditingPanel()
public DataGridViewEditMode get_EditMode()
public void set_EditMode(DataGridViewEditMode value)
public bool get_EnableHeadersVisualStyles()
public void set_EnableHeadersVisualStyles(bool value)
internal DataGridViewHeaderCell get_EnteredHeaderCell()
internal void set_EnteredHeaderCell(DataGridViewHeaderCell value)
public DataGridViewCell get_FirstDisplayedCell()
public void set_FirstDisplayedCell(DataGridViewCell value)
public int get_FirstDisplayedScrollingColumnHiddenWidth()
public int get_FirstDisplayedScrollingColumnIndex()
public void set_FirstDisplayedScrollingColumnIndex(int value)
public int get_FirstDisplayedScrollingRowIndex()
public void set_FirstDisplayedScrollingRowIndex(int value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public Color get_GridColor()
public void set_GridColor(Color value)
public int get_HorizontalScrollingOffset()
public void set_HorizontalScrollingOffset(int value)
public bool get_IsCurrentCellDirty()
public bool get_IsCurrentCellInEditMode()
public bool get_IsCurrentRowDirty()
public DataGridViewCell get_Item(int columnIndex, int rowIndex)
public void set_Item(int columnIndex, int rowIndex, DataGridViewCell value)
public DataGridViewCell get_Item(string columnName, int rowIndex)
public void set_Item(string columnName, int rowIndex, DataGridViewCell value)
public bool get_MultiSelect()
public void set_MultiSelect(bool value)
public int get_NewRowIndex()
public Padding get_Padding()
public void set_Padding(Padding value)
internal DataGridViewHeaderCell get_PressedHeaderCell()
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public int get_RowCount()
public void set_RowCount(int value)
public DataGridViewHeaderBorderStyle get_RowHeadersBorderStyle()
public void set_RowHeadersBorderStyle(DataGridViewHeaderBorderStyle value)
public DataGridViewCellStyle get_RowHeadersDefaultCellStyle()
public void set_RowHeadersDefaultCellStyle(DataGridViewCellStyle value)
public bool get_RowHeadersVisible()
public void set_RowHeadersVisible(bool value)
public int get_RowHeadersWidth()
public void set_RowHeadersWidth(int value)
public DataGridViewRowHeadersWidthSizeMode get_RowHeadersWidthSizeMode()
public void set_RowHeadersWidthSizeMode(DataGridViewRowHeadersWidthSizeMode value)
public DataGridViewRowCollection get_Rows()
public DataGridViewCellStyle get_RowsDefaultCellStyle()
public void set_RowsDefaultCellStyle(DataGridViewCellStyle value)
public DataGridViewRow get_RowTemplate()
public void set_RowTemplate(DataGridViewRow value)
internal DataGridViewRow get_RowTemplateFull()
internal bool get_ScaleChildrenInternal()
public ScrollBars get_ScrollBars()
public void set_ScrollBars(ScrollBars value)
public DataGridViewSelectedCellCollection get_SelectedCells()
public DataGridViewSelectedColumnCollection get_SelectedColumns()
public DataGridViewSelectedRowCollection get_SelectedRows()
public DataGridViewSelectionMode get_SelectionMode()
public void set_SelectionMode(DataGridViewSelectionMode value)
public bool get_ShowCellErrors()
public void set_ShowCellErrors(bool value)
public bool get_ShowCellToolTips()
public void set_ShowCellToolTips(bool value)
public bool get_ShowEditingIcon()
public void set_ShowEditingIcon(bool value)
public bool get_ShowRowErrors()
public void set_ShowRowErrors(bool value)
public DataGridViewColumn get_SortedColumn()
public SortOrder get_SortOrder()
public bool get_StandardTab()
public void set_StandardTab(bool value)
public string get_Text()
public void set_Text(string value)
public DataGridViewHeaderCell get_TopLeftHeaderCell()
public void set_TopLeftHeaderCell(DataGridViewHeaderCell value)
public Cursor get_UserSetCursor()
public int get_VerticalScrollingOffset()
public bool get_VirtualMode()
public void set_VirtualMode(bool value)
internal Control get_EditingControlInternal()
internal void set_EditingControlInternal(Control value)
public void add_AllowUserToAddRowsChanged(EventHandler value)
public void remove_AllowUserToAddRowsChanged(EventHandler value)
public void add_AllowUserToDeleteRowsChanged(EventHandler value)
public void remove_AllowUserToDeleteRowsChanged(EventHandler value)
public void add_AllowUserToOrderColumnsChanged(EventHandler value)
public void remove_AllowUserToOrderColumnsChanged(EventHandler value)
public void add_AllowUserToResizeColumnsChanged(EventHandler value)
public void remove_AllowUserToResizeColumnsChanged(EventHandler value)
public void add_AllowUserToResizeRowsChanged(EventHandler value)
public void remove_AllowUserToResizeRowsChanged(EventHandler value)
public void add_AlternatingRowsDefaultCellStyleChanged(EventHandler value)
public void remove_AlternatingRowsDefaultCellStyleChanged(EventHandler value)
public void add_AutoGenerateColumnsChanged(EventHandler value)
public void remove_AutoGenerateColumnsChanged(EventHandler value)
public void add_AutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventHandler value)
public void remove_AutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventHandler value)
public void add_AutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventHandler value)
public void remove_AutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventHandler value)
public void add_AutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventHandler value)
public void remove_AutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventHandler value)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundColorChanged(EventHandler value)
public void remove_BackgroundColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_BorderStyleChanged(EventHandler value)
public void remove_BorderStyleChanged(EventHandler value)
public void add_CancelRowEdit(QuestionEventHandler value)
public void remove_CancelRowEdit(QuestionEventHandler value)
public void add_CellBeginEdit(DataGridViewCellCancelEventHandler value)
public void remove_CellBeginEdit(DataGridViewCellCancelEventHandler value)
public void add_CellBorderStyleChanged(EventHandler value)
public void remove_CellBorderStyleChanged(EventHandler value)
public void add_CellClick(DataGridViewCellEventHandler value)
public void remove_CellClick(DataGridViewCellEventHandler value)
public void add_CellContentClick(DataGridViewCellEventHandler value)
public void remove_CellContentClick(DataGridViewCellEventHandler value)
public void add_CellContentDoubleClick(DataGridViewCellEventHandler value)
public void remove_CellContentDoubleClick(DataGridViewCellEventHandler value)
public void add_CellContextMenuStripChanged(DataGridViewCellEventHandler value)
public void remove_CellContextMenuStripChanged(DataGridViewCellEventHandler value)
public void add_CellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventHandler value)
public void remove_CellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventHandler value)
public void add_CellDoubleClick(DataGridViewCellEventHandler value)
public void remove_CellDoubleClick(DataGridViewCellEventHandler value)
public void add_CellEndEdit(DataGridViewCellEventHandler value)
public void remove_CellEndEdit(DataGridViewCellEventHandler value)
public void add_CellEnter(DataGridViewCellEventHandler value)
public void remove_CellEnter(DataGridViewCellEventHandler value)
public void add_CellErrorTextChanged(DataGridViewCellEventHandler value)
public void remove_CellErrorTextChanged(DataGridViewCellEventHandler value)
public void add_CellErrorTextNeeded(DataGridViewCellErrorTextNeededEventHandler value)
public void remove_CellErrorTextNeeded(DataGridViewCellErrorTextNeededEventHandler value)
public void add_CellFormatting(DataGridViewCellFormattingEventHandler value)
public void remove_CellFormatting(DataGridViewCellFormattingEventHandler value)
public void add_CellLeave(DataGridViewCellEventHandler value)
public void remove_CellLeave(DataGridViewCellEventHandler value)
public void add_CellMouseClick(DataGridViewCellMouseEventHandler value)
public void remove_CellMouseClick(DataGridViewCellMouseEventHandler value)
public void add_CellMouseDoubleClick(DataGridViewCellMouseEventHandler value)
public void remove_CellMouseDoubleClick(DataGridViewCellMouseEventHandler value)
public void add_CellMouseDown(DataGridViewCellMouseEventHandler value)
public void remove_CellMouseDown(DataGridViewCellMouseEventHandler value)
public void add_CellMouseEnter(DataGridViewCellEventHandler value)
public void remove_CellMouseEnter(DataGridViewCellEventHandler value)
public void add_CellMouseLeave(DataGridViewCellEventHandler value)
public void remove_CellMouseLeave(DataGridViewCellEventHandler value)
public void add_CellMouseMove(DataGridViewCellMouseEventHandler value)
public void remove_CellMouseMove(DataGridViewCellMouseEventHandler value)
public void add_CellMouseUp(DataGridViewCellMouseEventHandler value)
public void remove_CellMouseUp(DataGridViewCellMouseEventHandler value)
public void add_CellPainting(DataGridViewCellPaintingEventHandler value)
public void remove_CellPainting(DataGridViewCellPaintingEventHandler value)
public void add_CellParsing(DataGridViewCellParsingEventHandler value)
public void remove_CellParsing(DataGridViewCellParsingEventHandler value)
public void add_CellStateChanged(DataGridViewCellStateChangedEventHandler value)
public void remove_CellStateChanged(DataGridViewCellStateChangedEventHandler value)
public void add_CellStyleChanged(DataGridViewCellEventHandler value)
public void remove_CellStyleChanged(DataGridViewCellEventHandler value)
public void add_CellStyleContentChanged(DataGridViewCellStyleContentChangedEventHandler value)
public void remove_CellStyleContentChanged(DataGridViewCellStyleContentChangedEventHandler value)
public void add_CellToolTipTextChanged(DataGridViewCellEventHandler value)
public void remove_CellToolTipTextChanged(DataGridViewCellEventHandler value)
public void add_CellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventHandler value)
public void remove_CellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventHandler value)
public void add_CellValidated(DataGridViewCellEventHandler value)
public void remove_CellValidated(DataGridViewCellEventHandler value)
public void add_CellValidating(DataGridViewCellValidatingEventHandler value)
public void remove_CellValidating(DataGridViewCellValidatingEventHandler value)
public void add_CellValueChanged(DataGridViewCellEventHandler value)
public void remove_CellValueChanged(DataGridViewCellEventHandler value)
public void add_CellValueNeeded(DataGridViewCellValueEventHandler value)
public void remove_CellValueNeeded(DataGridViewCellValueEventHandler value)
public void add_CellValuePushed(DataGridViewCellValueEventHandler value)
public void remove_CellValuePushed(DataGridViewCellValueEventHandler value)
public void add_ColumnAdded(DataGridViewColumnEventHandler value)
public void remove_ColumnAdded(DataGridViewColumnEventHandler value)
public void add_ColumnContextMenuStripChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnContextMenuStripChanged(DataGridViewColumnEventHandler value)
public void add_ColumnDataPropertyNameChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnDataPropertyNameChanged(DataGridViewColumnEventHandler value)
public void add_ColumnDefaultCellStyleChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnDefaultCellStyleChanged(DataGridViewColumnEventHandler value)
public void add_ColumnDisplayIndexChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnDisplayIndexChanged(DataGridViewColumnEventHandler value)
public void add_ColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventHandler value)
public void remove_ColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventHandler value)
public void add_ColumnDividerWidthChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnDividerWidthChanged(DataGridViewColumnEventHandler value)
public void add_ColumnHeaderCellChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnHeaderCellChanged(DataGridViewColumnEventHandler value)
public void add_ColumnHeaderMouseClick(DataGridViewCellMouseEventHandler value)
public void remove_ColumnHeaderMouseClick(DataGridViewCellMouseEventHandler value)
public void add_ColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value)
public void remove_ColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value)
public void add_ColumnHeadersBorderStyleChanged(EventHandler value)
public void remove_ColumnHeadersBorderStyleChanged(EventHandler value)
public void add_ColumnHeadersDefaultCellStyleChanged(EventHandler value)
public void remove_ColumnHeadersDefaultCellStyleChanged(EventHandler value)
public void add_ColumnHeadersHeightChanged(EventHandler value)
public void remove_ColumnHeadersHeightChanged(EventHandler value)
public void add_ColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventHandler value)
public void remove_ColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventHandler value)
public void add_ColumnMinimumWidthChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnMinimumWidthChanged(DataGridViewColumnEventHandler value)
public void add_ColumnNameChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnNameChanged(DataGridViewColumnEventHandler value)
public void add_ColumnRemoved(DataGridViewColumnEventHandler value)
public void remove_ColumnRemoved(DataGridViewColumnEventHandler value)
public void add_ColumnSortModeChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnSortModeChanged(DataGridViewColumnEventHandler value)
public void add_ColumnStateChanged(DataGridViewColumnStateChangedEventHandler value)
public void remove_ColumnStateChanged(DataGridViewColumnStateChangedEventHandler value)
public void add_ColumnToolTipTextChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnToolTipTextChanged(DataGridViewColumnEventHandler value)
public void add_ColumnWidthChanged(DataGridViewColumnEventHandler value)
public void remove_ColumnWidthChanged(DataGridViewColumnEventHandler value)
public void add_CurrentCellChanged(EventHandler value)
public void remove_CurrentCellChanged(EventHandler value)
public void add_CurrentCellDirtyStateChanged(EventHandler value)
public void remove_CurrentCellDirtyStateChanged(EventHandler value)
public void add_DataBindingComplete(DataGridViewBindingCompleteEventHandler value)
public void remove_DataBindingComplete(DataGridViewBindingCompleteEventHandler value)
public void add_DataError(DataGridViewDataErrorEventHandler value)
public void remove_DataError(DataGridViewDataErrorEventHandler value)
public void add_DataMemberChanged(EventHandler value)
public void remove_DataMemberChanged(EventHandler value)
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public void add_DefaultCellStyleChanged(EventHandler value)
public void remove_DefaultCellStyleChanged(EventHandler value)
public void add_DefaultValuesNeeded(DataGridViewRowEventHandler value)
public void remove_DefaultValuesNeeded(DataGridViewRowEventHandler value)
public void add_EditingControlShowing(DataGridViewEditingControlShowingEventHandler value)
public void remove_EditingControlShowing(DataGridViewEditingControlShowingEventHandler value)
public void add_EditModeChanged(EventHandler value)
public void remove_EditModeChanged(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_GridColorChanged(EventHandler value)
public void remove_GridColorChanged(EventHandler value)
public void add_MultiSelectChanged(EventHandler value)
public void remove_MultiSelectChanged(EventHandler value)
public void add_NewRowNeeded(DataGridViewRowEventHandler value)
public void remove_NewRowNeeded(DataGridViewRowEventHandler value)
public void add_ReadOnlyChanged(EventHandler value)
public void remove_ReadOnlyChanged(EventHandler value)
public void add_RowContextMenuStripChanged(DataGridViewRowEventHandler value)
public void remove_RowContextMenuStripChanged(DataGridViewRowEventHandler value)
public void add_RowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventHandler value)
public void remove_RowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventHandler value)
public void add_RowDefaultCellStyleChanged(DataGridViewRowEventHandler value)
public void remove_RowDefaultCellStyleChanged(DataGridViewRowEventHandler value)
public void add_RowDirtyStateNeeded(QuestionEventHandler value)
public void remove_RowDirtyStateNeeded(QuestionEventHandler value)
public void add_RowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventHandler value)
public void remove_RowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventHandler value)
public void add_RowDividerHeightChanged(DataGridViewRowEventHandler value)
public void remove_RowDividerHeightChanged(DataGridViewRowEventHandler value)
public void add_RowEnter(DataGridViewCellEventHandler value)
public void remove_RowEnter(DataGridViewCellEventHandler value)
public void add_RowErrorTextChanged(DataGridViewRowEventHandler value)
public void remove_RowErrorTextChanged(DataGridViewRowEventHandler value)
public void add_RowErrorTextNeeded(DataGridViewRowErrorTextNeededEventHandler value)
public void remove_RowErrorTextNeeded(DataGridViewRowErrorTextNeededEventHandler value)
public void add_RowHeaderCellChanged(DataGridViewRowEventHandler value)
public void remove_RowHeaderCellChanged(DataGridViewRowEventHandler value)
public void add_RowHeaderMouseClick(DataGridViewCellMouseEventHandler value)
public void remove_RowHeaderMouseClick(DataGridViewCellMouseEventHandler value)
public void add_RowHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value)
public void remove_RowHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value)
public void add_RowHeadersBorderStyleChanged(EventHandler value)
public void remove_RowHeadersBorderStyleChanged(EventHandler value)
public void add_RowHeadersDefaultCellStyleChanged(EventHandler value)
public void remove_RowHeadersDefaultCellStyleChanged(EventHandler value)
public void add_RowHeadersWidthChanged(EventHandler value)
public void remove_RowHeadersWidthChanged(EventHandler value)
public void add_RowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventHandler value)
public void remove_RowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventHandler value)
public void add_RowHeightChanged(DataGridViewRowEventHandler value)
public void remove_RowHeightChanged(DataGridViewRowEventHandler value)
public void add_RowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventHandler value)
public void remove_RowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventHandler value)
public void add_RowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventHandler value)
public void remove_RowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventHandler value)
public void add_RowLeave(DataGridViewCellEventHandler value)
public void remove_RowLeave(DataGridViewCellEventHandler value)
public void add_RowMinimumHeightChanged(DataGridViewRowEventHandler value)
public void remove_RowMinimumHeightChanged(DataGridViewRowEventHandler value)
public void add_RowPostPaint(DataGridViewRowPostPaintEventHandler value)
public void remove_RowPostPaint(DataGridViewRowPostPaintEventHandler value)
public void add_RowPrePaint(DataGridViewRowPrePaintEventHandler value)
public void remove_RowPrePaint(DataGridViewRowPrePaintEventHandler value)
public void add_RowsAdded(DataGridViewRowsAddedEventHandler value)
public void remove_RowsAdded(DataGridViewRowsAddedEventHandler value)
public void add_RowsDefaultCellStyleChanged(EventHandler value)
public void remove_RowsDefaultCellStyleChanged(EventHandler value)
public void add_RowsRemoved(DataGridViewRowsRemovedEventHandler value)
public void remove_RowsRemoved(DataGridViewRowsRemovedEventHandler value)
public void add_RowStateChanged(DataGridViewRowStateChangedEventHandler value)
public void remove_RowStateChanged(DataGridViewRowStateChangedEventHandler value)
public void add_RowUnshared(DataGridViewRowEventHandler value)
public void remove_RowUnshared(DataGridViewRowEventHandler value)
public void add_RowValidated(DataGridViewCellEventHandler value)
public void remove_RowValidated(DataGridViewCellEventHandler value)
public void add_RowValidating(DataGridViewCellCancelEventHandler value)
public void remove_RowValidating(DataGridViewCellCancelEventHandler value)
public void add_Scroll(ScrollEventHandler value)
public void remove_Scroll(ScrollEventHandler value)
public void add_SelectionChanged(EventHandler value)
public void remove_SelectionChanged(EventHandler value)
public void add_SortCompare(DataGridViewSortCompareEventHandler value)
public void remove_SortCompare(DataGridViewSortCompareEventHandler value)
public void add_Sorted(EventHandler value)
public void remove_Sorted(EventHandler value)
public void add_UserAddedRow(DataGridViewRowEventHandler value)
public void remove_UserAddedRow(DataGridViewRowEventHandler value)
public void add_UserDeletedRow(DataGridViewRowEventHandler value)
public void remove_UserDeletedRow(DataGridViewRowEventHandler value)
public void add_UserDeletingRow(DataGridViewRowCancelEventHandler value)
public void remove_UserDeletingRow(DataGridViewRowCancelEventHandler value)
public void add_StyleChanged(EventHandler value)
public void remove_StyleChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn)
public bool AreAllCellsSelected(bool includeInvisibleCells)
public void AutoResizeColumn(int columnIndex)
public void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode)
public void AutoResizeColumnHeadersHeight()
public void AutoResizeColumnHeadersHeight(int columnIndex)
public void AutoResizeColumns()
public void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode)
public void AutoResizeRow(int rowIndex)
public void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode)
public void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
public void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
public void AutoResizeRows()
public void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode)
public bool BeginEdit(bool selectAll)
public bool CancelEdit()
public void ClearSelection()
public bool CommitEdit(DataGridViewDataErrorContexts context)
public int DisplayedColumnCount(bool includePartialColumns)
public int DisplayedRowCount(bool includePartialRow)
public bool EndEdit()
public bool EndEdit(DataGridViewDataErrorContexts context)
public int GetCellCount(DataGridViewElementStates includeFilter)
internal DataGridViewRow GetRowInternal(int rowIndex)
internal DataGridViewCell GetCellInternal(int colIndex, int rowIndex)
public Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
public DataObject GetClipboardContent()
public Rectangle GetColumnDisplayRectangle(int columnIndex, bool cutOverflow)
public Rectangle GetRowDisplayRectangle(int rowIndex, bool cutOverflow)
public HitTestInfo HitTest(int x, int y)
public void InvalidateCell(DataGridViewCell dataGridViewCell)
public void InvalidateCell(int columnIndex, int rowIndex)
public void InvalidateColumn(int columnIndex)
public void InvalidateRow(int rowIndex)
public void NotifyCurrentCellDirty(bool dirty)
public bool RefreshEdit()
public void ResetText()
public void SelectAll()
public void Sort(IComparer comparer)
public void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
public void UpdateCellErrorText(int columnIndex, int rowIndex)
public void UpdateCellValue(int columnIndex, int rowIndex)
public void UpdateRowErrorText(int rowIndex)
public void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd)
private void UpdateRowHeightInfo(DataGridViewRow row)
public void UpdateRowHeightInfo(int rowIndex, bool updateToEnd)
protected bool get_CanEnableIme()
protected Size get_DefaultSize()
protected ScrollBar get_HorizontalScrollBar()
protected ScrollBar get_VerticalScrollBar()
protected void AccessibilityNotifyCurrentCellChanged(Point cellAddress)
protected void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight)
protected void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth)
protected void AutoResizeColumnHeadersHeight(int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth)
protected void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight)
protected void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
protected void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight)
protected void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight)
protected void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth)
protected void AutoResizeRows(int rowIndexStart, int rowsCount, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
protected void ClearSelection(int columnIndexException, int rowIndexException, bool selectExceptionElement)
protected AccessibleObject CreateAccessibilityInstance()
protected DataGridViewColumnCollection CreateColumnsInstance()
protected ControlCollection CreateControlsInstance()
protected DataGridViewRowCollection CreateRowsInstance()
protected void Dispose(bool disposing)
protected AccessibleObject GetAccessibilityObjectById(int objectId)
protected bool IsInputChar(char charCode)
protected bool IsInputKey(Keys keyData)
protected void OnAllowUserToAddRowsChanged(EventArgs e)
protected void OnAllowUserToDeleteRowsChanged(EventArgs e)
protected void OnAllowUserToOrderColumnsChanged(EventArgs e)
protected void OnAllowUserToResizeColumnsChanged(EventArgs e)
protected void OnAllowUserToResizeRowsChanged(EventArgs e)
protected void OnAlternatingRowsDefaultCellStyleChanged(EventArgs e)
protected void OnAutoGenerateColumnsChanged(EventArgs e)
protected internal void OnAutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventArgs e)
protected void OnAutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventArgs e)
protected void OnAutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventArgs e)
protected void OnBackgroundColorChanged(EventArgs e)
protected void OnBindingContextChanged(EventArgs e)
protected void OnBorderStyleChanged(EventArgs e)
protected void OnCancelRowEdit(QuestionEventArgs e)
protected void OnCellBeginEdit(DataGridViewCellCancelEventArgs e)
protected void OnCellBorderStyleChanged(EventArgs e)
protected void OnCellClick(DataGridViewCellEventArgs e)
protected void OnCellContentClick(DataGridViewCellEventArgs e)
protected void OnCellContentDoubleClick(DataGridViewCellEventArgs e)
protected void OnCellContextMenuStripChanged(DataGridViewCellEventArgs e)
protected void OnCellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventArgs e)
protected void OnCellDoubleClick(DataGridViewCellEventArgs e)
protected void OnCellEndEdit(DataGridViewCellEventArgs e)
protected void OnCellEnter(DataGridViewCellEventArgs e)
protected internal void OnCellErrorTextChanged(DataGridViewCellEventArgs e)
protected void OnCellErrorTextNeeded(DataGridViewCellErrorTextNeededEventArgs e)
internal void OnCellFormattingInternal(DataGridViewCellFormattingEventArgs e)
protected void OnCellFormatting(DataGridViewCellFormattingEventArgs e)
protected void OnCellLeave(DataGridViewCellEventArgs e)
protected void OnCellMouseClick(DataGridViewCellMouseEventArgs e)
protected void OnCellMouseDoubleClick(DataGridViewCellMouseEventArgs e)
protected void OnCellMouseDown(DataGridViewCellMouseEventArgs e)
protected void OnCellMouseEnter(DataGridViewCellEventArgs e)
protected void OnCellMouseLeave(DataGridViewCellEventArgs e)
protected void OnCellMouseMove(DataGridViewCellMouseEventArgs e)
protected void OnCellMouseUp(DataGridViewCellMouseEventArgs e)
internal void OnCellPaintingInternal(DataGridViewCellPaintingEventArgs e)
protected void OnCellPainting(DataGridViewCellPaintingEventArgs e)
protected internal void OnCellParsing(DataGridViewCellParsingEventArgs e)
internal void OnCellStateChangedInternal(DataGridViewCellStateChangedEventArgs e)
protected void OnCellStateChanged(DataGridViewCellStateChangedEventArgs e)
protected void OnCellStyleChanged(DataGridViewCellEventArgs e)
protected void OnCellStyleContentChanged(DataGridViewCellStyleContentChangedEventArgs e)
protected void OnCellToolTipTextChanged(DataGridViewCellEventArgs e)
protected void OnCellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventArgs e)
protected void OnCellValidated(DataGridViewCellEventArgs e)
protected void OnCellValidating(DataGridViewCellValidatingEventArgs e)
protected void OnCellValueChanged(DataGridViewCellEventArgs e)
protected internal void OnCellValueNeeded(DataGridViewCellValueEventArgs e)
protected internal void OnCellValuePushed(DataGridViewCellValueEventArgs e)
internal void OnColumnAddedInternal(DataGridViewColumnEventArgs e)
private int FindDataColumnIndex(DataGridViewColumn column)
protected void OnColumnAdded(DataGridViewColumnEventArgs e)
protected internal void OnColumnContextMenuStripChanged(DataGridViewColumnEventArgs e)
protected internal void OnColumnDataPropertyNameChanged(DataGridViewColumnEventArgs e)
protected internal void OnColumnDefaultCellStyleChanged(DataGridViewColumnEventArgs e)
protected internal void OnColumnDisplayIndexChanged(DataGridViewColumnEventArgs e)
protected void OnColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventArgs e)
protected internal void OnColumnDividerWidthChanged(DataGridViewColumnEventArgs e)
protected internal void OnColumnHeaderCellChanged(DataGridViewColumnEventArgs e)
protected void OnColumnHeaderMouseClick(DataGridViewCellMouseEventArgs e)
protected void OnColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
protected void OnColumnHeadersBorderStyleChanged(EventArgs e)
protected void OnColumnHeadersDefaultCellStyleChanged(EventArgs e)
protected void OnColumnHeadersHeightChanged(EventArgs e)
protected void OnColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
protected internal void OnColumnMinimumWidthChanged(DataGridViewColumnEventArgs e)
protected internal void OnColumnNameChanged(DataGridViewColumnEventArgs e)
internal void OnColumnPreRemovedInternal(DataGridViewColumnEventArgs e)
private void OnColumnPostRemovedInternal(DataGridViewColumnEventArgs e)
protected void OnColumnRemoved(DataGridViewColumnEventArgs e)
protected internal void OnColumnSortModeChanged(DataGridViewColumnEventArgs e)
protected internal void OnColumnStateChanged(DataGridViewColumnStateChangedEventArgs e)
protected internal void OnColumnToolTipTextChanged(DataGridViewColumnEventArgs e)
protected internal void OnColumnWidthChanged(DataGridViewColumnEventArgs e)
protected void OnCurrentCellChanged(EventArgs e)
protected void OnCurrentCellDirtyStateChanged(EventArgs e)
protected void OnCursorChanged(EventArgs e)
protected void OnDataBindingComplete(DataGridViewBindingCompleteEventArgs e)
protected void OnDataError(bool displayErrorDialogIfNoHandler, DataGridViewDataErrorEventArgs e)
protected void OnDataMemberChanged(EventArgs e)
protected void OnDataSourceChanged(EventArgs e)
protected void OnDefaultCellStyleChanged(EventArgs e)
protected void OnDefaultValuesNeeded(DataGridViewRowEventArgs e)
protected void OnDoubleClick(EventArgs e)
protected void OnEditingControlShowing(DataGridViewEditingControlShowingEventArgs e)
protected void OnEditModeChanged(EventArgs e)
protected void OnEnabledChanged(EventArgs e)
protected void OnEnter(EventArgs e)
protected void OnGotFocus(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnGridColorChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnKeyDown(KeyEventArgs e)
protected void OnKeyPress(KeyPressEventArgs e)
protected void OnKeyUp(KeyEventArgs e)
protected void OnLayout(LayoutEventArgs e)
protected void OnLeave(EventArgs e)
protected void OnLostFocus(EventArgs e)
protected void OnMouseClick(MouseEventArgs e)
protected void OnMouseDoubleClick(MouseEventArgs e)
private void DoSelectionOnMouseDown(HitTestInfo hitTest)
protected void OnMouseDown(MouseEventArgs e)
private void UpdateBindingPosition(int position)
protected void OnMouseEnter(EventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseMove(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnMouseWheel(MouseEventArgs e)
protected void OnMultiSelectChanged(EventArgs e)
protected void OnNewRowNeeded(DataGridViewRowEventArgs e)
protected void OnPaint(PaintEventArgs e)
private void RefreshScrollBars()
protected void OnReadOnlyChanged(EventArgs e)
protected void OnResize(EventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
protected internal void OnRowContextMenuStripChanged(DataGridViewRowEventArgs e)
protected void OnRowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventArgs e)
protected internal void OnRowDefaultCellStyleChanged(DataGridViewRowEventArgs e)
protected void OnRowDirtyStateNeeded(QuestionEventArgs e)
protected void OnRowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventArgs e)
protected void OnRowDividerHeightChanged(DataGridViewRowEventArgs e)
protected void OnRowEnter(DataGridViewCellEventArgs e)
protected internal void OnRowErrorTextChanged(DataGridViewRowEventArgs e)
protected void OnRowErrorTextNeeded(DataGridViewRowErrorTextNeededEventArgs e)
protected internal void OnRowHeaderCellChanged(DataGridViewRowEventArgs e)
protected void OnRowHeaderMouseClick(DataGridViewCellMouseEventArgs e)
protected void OnRowHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
protected void OnRowHeadersBorderStyleChanged(EventArgs e)
protected void OnRowHeadersDefaultCellStyleChanged(EventArgs e)
protected void OnRowHeadersWidthChanged(EventArgs e)
protected void OnRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
protected internal void OnRowHeightChanged(DataGridViewRowEventArgs e)
protected void OnRowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventArgs e)
protected void OnRowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventArgs e)
protected void OnRowLeave(DataGridViewCellEventArgs e)
protected internal void OnRowMinimumHeightChanged(DataGridViewRowEventArgs e)
protected internal void OnRowPostPaint(DataGridViewRowPostPaintEventArgs e)
protected internal void OnRowPrePaint(DataGridViewRowPrePaintEventArgs e)
internal void OnRowsAddedInternal(DataGridViewRowsAddedEventArgs e)
protected void OnRowsAdded(DataGridViewRowsAddedEventArgs e)
protected void OnRowsDefaultCellStyleChanged(EventArgs e)
internal void OnRowsPreRemovedInternal(DataGridViewRowsRemovedEventArgs e)
internal void OnRowsPostRemovedInternal(DataGridViewRowsRemovedEventArgs e)
protected void OnRowsRemoved(DataGridViewRowsRemovedEventArgs e)
protected internal void OnRowStateChanged(int rowIndex, DataGridViewRowStateChangedEventArgs e)
protected void OnRowUnshared(DataGridViewRowEventArgs e)
protected void OnRowValidated(DataGridViewCellEventArgs e)
protected void OnRowValidating(DataGridViewCellCancelEventArgs e)
protected void OnScroll(ScrollEventArgs e)
protected void OnSelectionChanged(EventArgs e)
protected void OnSortCompare(DataGridViewSortCompareEventArgs e)
protected void OnSorted(EventArgs e)
protected void OnUserAddedRow(DataGridViewRowEventArgs e)
protected void OnUserDeletedRow(DataGridViewRowEventArgs e)
protected void OnUserDeletingRow(DataGridViewRowCancelEventArgs e)
protected void OnValidating(CancelEventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected void PaintBackground(Graphics graphics, Rectangle clipBounds, Rectangle gridBounds)
protected bool ProcessAKey(Keys keyData)
protected bool ProcessDataGridViewKey(KeyEventArgs e)
protected bool ProcessDeleteKey(Keys keyData)
protected bool ProcessDialogKey(Keys keyData)
protected bool ProcessDownKey(Keys keyData)
protected bool ProcessEndKey(Keys keyData)
protected bool ProcessEnterKey(Keys keyData)
protected bool ProcessEscapeKey(Keys keyData)
protected bool ProcessF2Key(Keys keyData)
protected bool ProcessHomeKey(Keys keyData)
protected bool ProcessInsertKey(Keys keyData)
protected bool ProcessKeyEventArgs(Message& m)
protected bool ProcessKeyPreview(Message& m)
protected bool ProcessLeftKey(Keys keyData)
protected bool ProcessNextKey(Keys keyData)
protected bool ProcessPriorKey(Keys keyData)
protected bool ProcessRightKey(Keys keyData)
protected bool ProcessSpaceKey(Keys keyData)
protected bool ProcessTabKey(Keys keyData)
protected bool ProcessUpKey(Keys keyData)
protected bool ProcessZeroKey(Keys keyData)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected bool SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
protected void SetSelectedCellCore(int columnIndex, int rowIndex, bool selected)
internal void SetSelectedColumnCoreInternal(int columnIndex, bool selected)
protected void SetSelectedColumnCore(int columnIndex, bool selected)
internal void SetSelectedRowCoreInternal(int rowIndex, bool selected)
protected void SetSelectedRowCore(int rowIndex, bool selected)
protected void WndProc(Message& m)
internal void InternalOnCellClick(DataGridViewCellEventArgs e)
internal void InternalOnCellContentClick(DataGridViewCellEventArgs e)
internal void InternalOnCellContentDoubleClick(DataGridViewCellEventArgs e)
internal void InternalOnCellValueChanged(DataGridViewCellEventArgs e)
internal void InternalOnDataError(DataGridViewDataErrorEventArgs e)
internal void InternalOnMouseWheel(MouseEventArgs e)
internal void OnHScrollBarScroll(object sender, ScrollEventArgs e)
internal void OnVScrollBarScroll(object sender, ScrollEventArgs e)
internal void RaiseCellStyleChanged(DataGridViewCellEventArgs e)
internal void OnColumnCollectionChanged(object sender, CollectionChangeEventArgs e)
internal void AutoResizeColumnsInternal()
internal void AutoFillColumnsInternal()
internal void AutoResizeColumnInternal(int columnIndex, DataGridViewAutoSizeColumnMode mode)
internal int CalculateColumnCellWidth(int index, DataGridViewAutoSizeColumnMode mode)
private Rectangle GetHeaderCellBounds(DataGridViewHeaderCell cell)
private void PrepareEditingRow(bool cell_changed, bool column_changed)
internal void RemoveEditingRow()
internal DataGridViewRow get_EditingRow()
private void AddBoundRow(object element)
private bool IsColumnAlreadyBound(string name)
private DataGridViewColumn CreateColumnByType(Type type)
private void ClearBinding()
private void ResetRows()
private void DoBinding()
private void MoveCurrentCell(int x, int y, bool select, bool isControl, bool isShift, bool scroll)
private int ColumnIndexToDisplayIndex(int index)
private int ColumnDisplayIndexToIndex(int index)
private void OnListChanged(object sender, ListChangedEventArgs args)
private void OnListPositionChanged(object sender, EventArgs args)
private void ReBind()
private bool MouseOverColumnResize(int col, int mousex)
private bool MouseOverRowResize(int row, int mousey)
private void DrawVerticalResizeLine(int x)
private void DrawHorizontalResizeLine(int y)
private void MouseEnteredErrorIcon(DataGridViewCell item)
private void MouseLeftErrorIcon(DataGridViewCell item)
private Timer get_ToolTipTimer()
private ToolTip get_ToolTipWindow()
private void ToolTipTimer_Tick(object o, EventArgs args)
}
public System.Windows.Forms.DataGridViewAdvancedBorderStyle : object {
private DataGridViewAdvancedCellBorderStyle bottom
private DataGridViewAdvancedCellBorderStyle left
private DataGridViewAdvancedCellBorderStyle right
private DataGridViewAdvancedCellBorderStyle top
public DataGridViewAdvancedCellBorderStyle All
public DataGridViewAdvancedCellBorderStyle Bottom
public DataGridViewAdvancedCellBorderStyle Left
public DataGridViewAdvancedCellBorderStyle Right
public DataGridViewAdvancedCellBorderStyle Top
public DataGridViewAdvancedCellBorderStyle get_All()
public void set_All(DataGridViewAdvancedCellBorderStyle value)
public DataGridViewAdvancedCellBorderStyle get_Bottom()
public void set_Bottom(DataGridViewAdvancedCellBorderStyle value)
public DataGridViewAdvancedCellBorderStyle get_Left()
public void set_Left(DataGridViewAdvancedCellBorderStyle value)
public DataGridViewAdvancedCellBorderStyle get_Right()
public void set_Right(DataGridViewAdvancedCellBorderStyle value)
public DataGridViewAdvancedCellBorderStyle get_Top()
public void set_Top(DataGridViewAdvancedCellBorderStyle value)
public bool Equals(object other)
public int GetHashCode()
public string ToString()
private object System.ICloneable.Clone()
}
public System.Windows.Forms.DataGridViewAdvancedCellBorderStyle : Enum {
public int value__
public DataGridViewAdvancedCellBorderStyle NotSet
public DataGridViewAdvancedCellBorderStyle None
public DataGridViewAdvancedCellBorderStyle Single
public DataGridViewAdvancedCellBorderStyle Inset
public DataGridViewAdvancedCellBorderStyle InsetDouble
public DataGridViewAdvancedCellBorderStyle Outset
public DataGridViewAdvancedCellBorderStyle OutsetDouble
public DataGridViewAdvancedCellBorderStyle OutsetPartial
}
public System.Windows.Forms.DataGridViewAutoSizeColumnMode : Enum {
public int value__
public DataGridViewAutoSizeColumnMode NotSet
public DataGridViewAutoSizeColumnMode None
public DataGridViewAutoSizeColumnMode ColumnHeader
public DataGridViewAutoSizeColumnMode AllCellsExceptHeader
public DataGridViewAutoSizeColumnMode AllCells
public DataGridViewAutoSizeColumnMode DisplayedCellsExceptHeader
public DataGridViewAutoSizeColumnMode DisplayedCells
public DataGridViewAutoSizeColumnMode Fill
}
public System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs : EventArgs {
private DataGridViewColumn dataGridViewColumn
private DataGridViewAutoSizeColumnMode previousMode
public DataGridViewColumn Column
public DataGridViewAutoSizeColumnMode PreviousMode
public void .ctor(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnMode previousMode)
public DataGridViewColumn get_Column()
public DataGridViewAutoSizeColumnMode get_PreviousMode()
}
public System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewAutoSizeColumnModeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewAutoSizeColumnModeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewAutoSizeColumnsMode : Enum {
public int value__
public DataGridViewAutoSizeColumnsMode None
public DataGridViewAutoSizeColumnsMode ColumnHeader
public DataGridViewAutoSizeColumnsMode AllCellsExceptHeader
public DataGridViewAutoSizeColumnsMode AllCells
public DataGridViewAutoSizeColumnsMode DisplayedCellsExceptHeader
public DataGridViewAutoSizeColumnsMode DisplayedCells
public DataGridViewAutoSizeColumnsMode Fill
}
public System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs : EventArgs {
private DataGridViewAutoSizeColumnMode[] previousModes
public DataGridViewAutoSizeColumnMode[] PreviousModes
public void .ctor(DataGridViewAutoSizeColumnMode[] previousModes)
public DataGridViewAutoSizeColumnMode[] get_PreviousModes()
}
public System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewAutoSizeColumnsModeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewAutoSizeColumnsModeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewAutoSizeModeEventArgs : EventArgs {
private bool previousModeAutoSized
public bool PreviousModeAutoSized
public void .ctor(bool previousModeAutoSized)
public bool get_PreviousModeAutoSized()
}
public System.Windows.Forms.DataGridViewAutoSizeModeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewAutoSizeModeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewAutoSizeModeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewAutoSizeRowMode : Enum {
public int value__
public DataGridViewAutoSizeRowMode RowHeader
public DataGridViewAutoSizeRowMode AllCellsExceptHeader
public DataGridViewAutoSizeRowMode AllCells
}
public System.Windows.Forms.DataGridViewAutoSizeRowsMode : Enum {
public int value__
public DataGridViewAutoSizeRowsMode None
public DataGridViewAutoSizeRowsMode AllHeaders
public DataGridViewAutoSizeRowsMode AllCellsExceptHeaders
public DataGridViewAutoSizeRowsMode AllCells
public DataGridViewAutoSizeRowsMode DisplayedHeaders
public DataGridViewAutoSizeRowsMode DisplayedCellsExceptHeaders
public DataGridViewAutoSizeRowsMode DisplayedCells
}
public System.Windows.Forms.DataGridViewBand : DataGridViewElement {
private ContextMenuStrip contextMenuStrip
private DataGridViewCellStyle defaultCellStyle
private Type defaultHeaderCellType
private bool displayed
private bool frozen
private int index
private bool readOnly
private DataGridViewTriState resizable
private bool selected
private object tag
private bool visible
private DataGridViewHeaderCell headerCellCore
private bool isRow
private DataGridViewCellStyle inheritedStyle
public ContextMenuStrip ContextMenuStrip
public DataGridViewCellStyle DefaultCellStyle
public Type DefaultHeaderCellType
public bool Displayed
public bool Frozen
public bool HasDefaultCellStyle
public int Index
public DataGridViewCellStyle InheritedStyle
public bool ReadOnly
public DataGridViewTriState Resizable
public bool Selected
internal bool SelectedInternal
internal bool DisplayedInternal
public object Tag
public bool Visible
protected DataGridViewHeaderCell HeaderCellCore
protected bool IsRow
protected void Finalize()
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public DataGridViewCellStyle get_DefaultCellStyle()
public void set_DefaultCellStyle(DataGridViewCellStyle value)
public Type get_DefaultHeaderCellType()
public void set_DefaultHeaderCellType(Type value)
public bool get_Displayed()
public bool get_Frozen()
public void set_Frozen(bool value)
public bool get_HasDefaultCellStyle()
public int get_Index()
public DataGridViewCellStyle get_InheritedStyle()
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public DataGridViewTriState get_Resizable()
public void set_Resizable(DataGridViewTriState value)
public bool get_Selected()
public void set_Selected(bool value)
internal bool get_SelectedInternal()
internal void set_SelectedInternal(bool value)
internal bool get_DisplayedInternal()
internal void set_DisplayedInternal(bool value)
public object get_Tag()
public void set_Tag(object value)
public bool get_Visible()
public void set_Visible(bool value)
public object Clone()
public void Dispose()
public string ToString()
protected DataGridViewHeaderCell get_HeaderCellCore()
protected void set_HeaderCellCore(DataGridViewHeaderCell value)
protected bool get_IsRow()
protected void Dispose(bool disposing)
protected void OnDataGridViewChanged()
internal void SetIndex(int index)
}
public System.Windows.Forms.DataGridViewBindingCompleteEventArgs : EventArgs {
private ListChangedType listChangedType
public ListChangedType ListChangedType
public void .ctor(ListChangedType listChangedType)
public ListChangedType get_ListChangedType()
}
public System.Windows.Forms.DataGridViewBindingCompleteEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewBindingCompleteEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewBindingCompleteEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewButtonCell : DataGridViewCell {
private FlatStyle flatStyle
private bool useColumnTextForButtonValue
private PushButtonState button_state
public Type EditType
public FlatStyle FlatStyle
public Type FormattedValueType
public bool UseColumnTextForButtonValue
public Type ValueType
public Type get_EditType()
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public Type get_FormattedValueType()
public bool get_UseColumnTextForButtonValue()
public void set_UseColumnTextForButtonValue(bool value)
public Type get_ValueType()
public object Clone()
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected object GetValue(int rowIndex)
protected bool KeyDownUnsharesRow(KeyEventArgs e, int rowIndex)
protected bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex)
protected bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e)
protected bool MouseEnterUnsharesRow(int rowIndex)
protected bool MouseLeaveUnsharesRow(int rowIndex)
protected bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e)
protected void OnKeyDown(KeyEventArgs e, int rowIndex)
protected void OnKeyUp(KeyEventArgs e, int rowIndex)
protected void OnLeave(int rowIndex, bool throughMouseClick)
protected void OnMouseDown(DataGridViewCellMouseEventArgs e)
protected void OnMouseLeave(int rowIndex)
protected void OnMouseMove(DataGridViewCellMouseEventArgs e)
protected void OnMouseUp(DataGridViewCellMouseEventArgs e)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
internal void PaintPartBackground(Graphics graphics, Rectangle cellBounds, DataGridViewCellStyle style)
internal void PaintPartSelectionBackground(Graphics graphics, Rectangle cellBounds, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle)
internal void PaintPartContent(Graphics graphics, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle, object formattedValue)
}
public System.Windows.Forms.DataGridViewButtonColumn : DataGridViewColumn {
private FlatStyle flatStyle
private string text
public DataGridViewCell CellTemplate
public DataGridViewCellStyle DefaultCellStyle
public FlatStyle FlatStyle
public string Text
public bool UseColumnTextForButtonValue
public DataGridViewCell get_CellTemplate()
public void set_CellTemplate(DataGridViewCell value)
public DataGridViewCellStyle get_DefaultCellStyle()
public void set_DefaultCellStyle(DataGridViewCellStyle value)
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public string get_Text()
public void set_Text(string value)
public bool get_UseColumnTextForButtonValue()
public void set_UseColumnTextForButtonValue(bool value)
public object Clone()
public string ToString()
}
public System.Windows.Forms.DataGridViewCell : DataGridViewElement {
private DataGridView dataGridViewOwner
private AccessibleObject accessibilityObject
private int columnIndex
private ContextMenuStrip contextMenuStrip
private bool displayed
private string errorText
private bool isInEditMode
private DataGridViewRow owningRow
private DataGridViewTriState readOnly
private bool selected
private DataGridViewCellStyle style
private object tag
private string toolTipText
private object valuex
private Type valueType
public AccessibleObject AccessibilityObject
public int ColumnIndex
public Rectangle ContentBounds
public ContextMenuStrip ContextMenuStrip
public object DefaultNewRowValue
public bool Displayed
public object EditedFormattedValue
public Type EditType
public Rectangle ErrorIconBounds
public string ErrorText
public object FormattedValue
public Type FormattedValueType
public bool Frozen
public bool HasStyle
public DataGridViewElementStates InheritedState
public DataGridViewCellStyle InheritedStyle
public bool IsInEditMode
public DataGridViewColumn OwningColumn
public DataGridViewRow OwningRow
public Size PreferredSize
public bool ReadOnly
public bool Resizable
public int RowIndex
public bool Selected
public Size Size
public DataGridViewCellStyle Style
public object Tag
public string ToolTipText
public object Value
public Type ValueType
public bool Visible
private PropertyDescriptor DataProperty
private TypeConverter FormattedValueTypeConverter
private TypeConverter ValueTypeConverter
internal Rectangle InternalErrorIconsBounds
protected void Finalize()
public AccessibleObject get_AccessibilityObject()
public int get_ColumnIndex()
public Rectangle get_ContentBounds()
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public object get_DefaultNewRowValue()
public bool get_Displayed()
public object get_EditedFormattedValue()
public Type get_EditType()
public Rectangle get_ErrorIconBounds()
public string get_ErrorText()
public void set_ErrorText(string value)
public object get_FormattedValue()
public Type get_FormattedValueType()
public bool get_Frozen()
public bool get_HasStyle()
public DataGridViewElementStates get_InheritedState()
public DataGridViewCellStyle get_InheritedStyle()
public bool get_IsInEditMode()
public DataGridViewColumn get_OwningColumn()
public DataGridViewRow get_OwningRow()
public Size get_PreferredSize()
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public bool get_Resizable()
public int get_RowIndex()
public bool get_Selected()
public void set_Selected(bool value)
public Size get_Size()
public DataGridViewCellStyle get_Style()
public void set_Style(DataGridViewCellStyle value)
public object get_Tag()
public void set_Tag(object value)
public string get_ToolTipText()
public void set_ToolTipText(string value)
public object get_Value()
public void set_Value(object value)
public Type get_ValueType()
public void set_ValueType(Type value)
public bool get_Visible()
internal void SetState(DataGridViewElementStates state)
public DataGridViewAdvancedBorderStyle AdjustCellBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow)
public object Clone()
public void DetachEditingControl()
public void Dispose()
public Rectangle GetContentBounds(int rowIndex)
public object GetEditedFormattedValue(int rowIndex, DataGridViewDataErrorContexts context)
public ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex)
public DataGridViewElementStates GetInheritedState(int rowIndex)
public DataGridViewCellStyle GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors)
public void InitializeEditingControl(int rowIndex, object initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle)
public bool KeyEntersEditMode(KeyEventArgs e)
public int MeasureTextHeight(Graphics graphics, string text, Font font, int maxWidth, TextFormatFlags flags)
public int MeasureTextHeight(Graphics graphics, string text, Font font, int maxWidth, TextFormatFlags flags, Boolean& widthTruncated)
public Size MeasureTextPreferredSize(Graphics graphics, string text, Font font, float maxRatio, TextFormatFlags flags)
public Size MeasureTextSize(Graphics graphics, string text, Font font, TextFormatFlags flags)
public int MeasureTextWidth(Graphics graphics, string text, Font font, int maxHeight, TextFormatFlags flags)
public object ParseFormattedValue(object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter)
public void PositionEditingControl(bool setLocation, bool setSize, Rectangle cellBounds, Rectangle cellClip, DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow)
public Rectangle PositionEditingPanel(Rectangle cellBounds, Rectangle cellClip, DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow)
public string ToString()
protected Rectangle BorderWidths(DataGridViewAdvancedBorderStyle advancedBorderStyle)
private int BorderToWidth(DataGridViewAdvancedCellBorderStyle style)
protected bool ClickUnsharesRow(DataGridViewCellEventArgs e)
protected bool ContentClickUnsharesRow(DataGridViewCellEventArgs e)
protected bool ContentDoubleClickUnsharesRow(DataGridViewCellEventArgs e)
protected AccessibleObject CreateAccessibilityInstance()
protected void Dispose(bool disposing)
protected bool DoubleClickUnsharesRow(DataGridViewCellEventArgs e)
protected bool EnterUnsharesRow(int rowIndex, bool throughMouseClick)
protected object GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format)
internal object GetClipboardContentInternal(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format)
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected internal string GetErrorText(int rowIndex)
protected object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected Size GetSize(int rowIndex)
protected object GetValue(int rowIndex)
private PropertyDescriptor get_DataProperty()
private TypeConverter get_FormattedValueTypeConverter()
private TypeConverter get_ValueTypeConverter()
protected bool KeyDownUnsharesRow(KeyEventArgs e, int rowIndex)
protected bool KeyPressUnsharesRow(KeyPressEventArgs e, int rowIndex)
protected bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex)
protected bool LeaveUnsharesRow(int rowIndex, bool throughMouseClick)
protected bool MouseClickUnsharesRow(DataGridViewCellMouseEventArgs e)
protected bool MouseDoubleClickUnsharesRow(DataGridViewCellMouseEventArgs e)
protected bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e)
protected bool MouseEnterUnsharesRow(int rowIndex)
protected bool MouseLeaveUnsharesRow(int rowIndex)
protected bool MouseMoveUnsharesRow(DataGridViewCellMouseEventArgs e)
protected bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e)
protected void OnClick(DataGridViewCellEventArgs e)
internal void OnClickInternal(DataGridViewCellEventArgs e)
protected void OnContentClick(DataGridViewCellEventArgs e)
internal void OnContentClickInternal(DataGridViewCellEventArgs e)
protected void OnContentDoubleClick(DataGridViewCellEventArgs e)
internal void OnContentDoubleClickInternal(DataGridViewCellEventArgs e)
protected void OnDataGridViewChanged()
internal void OnDataGridViewChangedInternal()
protected void OnDoubleClick(DataGridViewCellEventArgs e)
internal void OnDoubleClickInternal(DataGridViewCellEventArgs e)
protected void OnEnter(int rowIndex, bool throughMouseClick)
internal void OnEnterInternal(int rowIndex, bool throughMouseClick)
protected void OnKeyDown(KeyEventArgs e, int rowIndex)
internal void OnKeyDownInternal(KeyEventArgs e, int rowIndex)
protected void OnKeyPress(KeyPressEventArgs e, int rowIndex)
internal void OnKeyPressInternal(KeyPressEventArgs e, int rowIndex)
protected void OnKeyUp(KeyEventArgs e, int rowIndex)
internal void OnKeyUpInternal(KeyEventArgs e, int rowIndex)
protected void OnLeave(int rowIndex, bool throughMouseClick)
internal void OnLeaveInternal(int rowIndex, bool throughMouseClick)
protected void OnMouseClick(DataGridViewCellMouseEventArgs e)
internal void OnMouseClickInternal(DataGridViewCellMouseEventArgs e)
protected void OnMouseDoubleClick(DataGridViewCellMouseEventArgs e)
internal void OnMouseDoubleClickInternal(DataGridViewCellMouseEventArgs e)
protected void OnMouseDown(DataGridViewCellMouseEventArgs e)
internal void OnMouseDownInternal(DataGridViewCellMouseEventArgs e)
protected void OnMouseEnter(int rowIndex)
internal void OnMouseEnterInternal(int rowIndex)
protected void OnMouseLeave(int rowIndex)
internal void OnMouseLeaveInternal(int e)
protected void OnMouseMove(DataGridViewCellMouseEventArgs e)
internal void OnMouseMoveInternal(DataGridViewCellMouseEventArgs e)
protected void OnMouseUp(DataGridViewCellMouseEventArgs e)
internal void OnMouseUpInternal(DataGridViewCellMouseEventArgs e)
internal void PaintInternal(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
private void PaintDividers(Graphics graphics, Rectangle& bounds, DataGridViewAdvancedBorderStyle advancedBorderStyle)
protected void PaintBorder(Graphics graphics, Rectangle clipBounds, Rectangle bounds, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle)
protected void PaintErrorIcon(Graphics graphics, Rectangle clipBounds, Rectangle cellValueBounds, string errorText)
internal void PaintPartBackground(Graphics graphics, Rectangle cellBounds, DataGridViewCellStyle style)
internal Pen GetBorderPen()
internal void PaintPartContent(Graphics graphics, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle, object formattedValue)
private void PaintPartFocus(Graphics graphics, Rectangle cellBounds)
internal void PaintPartSelectionBackground(Graphics graphics, Rectangle cellBounds, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle)
internal void PaintWork(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
protected bool SetValue(int rowIndex, object value)
private void OnStyleChanged(object sender, EventArgs args)
internal Rectangle get_InternalErrorIconsBounds()
internal void InternalPaint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
internal void SetOwningRow(DataGridViewRow row)
internal void SetOwningColumn(DataGridViewColumn col)
internal void SetColumnIndex(int index)
internal void SetIsInEditMode(bool isInEditMode)
internal void OnErrorTextChanged(DataGridViewCellEventArgs args)
internal TextFormatFlags AlignmentToFlags(DataGridViewContentAlignment align)
internal Rectangle AlignInRectangle(Rectangle outer, Size inner, DataGridViewContentAlignment align)
}
public System.Windows.Forms.DataGridViewCellBorderStyle : Enum {
public int value__
public DataGridViewCellBorderStyle Custom
public DataGridViewCellBorderStyle Single
public DataGridViewCellBorderStyle Raised
public DataGridViewCellBorderStyle Sunken
public DataGridViewCellBorderStyle None
public DataGridViewCellBorderStyle SingleVertical
public DataGridViewCellBorderStyle RaisedVertical
public DataGridViewCellBorderStyle SunkenVertical
public DataGridViewCellBorderStyle SingleHorizontal
public DataGridViewCellBorderStyle RaisedHorizontal
public DataGridViewCellBorderStyle SunkenHorizontal
}
public System.Windows.Forms.DataGridViewCellCancelEventArgs : CancelEventArgs {
private int columnIndex
private int rowIndex
public int ColumnIndex
public int RowIndex
public void .ctor(int columnIndex, int rowIndex)
public int get_ColumnIndex()
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewCellCancelEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellCancelEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellCancelEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellCollection : BaseCollection {
private DataGridViewRow dataGridViewRow
private CollectionChangeEventHandler CollectionChanged
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
public DataGridViewCell Item
public DataGridViewCell Item
protected ArrayList List
public void .ctor(DataGridViewRow dataGridViewRow)
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public DataGridViewCell get_Item(int index)
public void set_Item(int index, DataGridViewCell value)
internal DataGridViewCell GetCellInternal(int colIndex)
public DataGridViewCell get_Item(string columnName)
public void set_Item(string columnName, DataGridViewCell value)
internal DataGridViewCell GetBoundCell(string dataPropertyName)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
private int System.Collections.IList.Add(object value)
public int Add(DataGridViewCell dataGridViewCell)
internal void Replace(int columnIndex, DataGridViewCell dataGridViewCell)
public void AddRange(DataGridViewCell[] dataGridViewCells)
public void Clear()
private bool System.Collections.IList.Contains(object value)
public bool Contains(DataGridViewCell dataGridViewCell)
public void CopyTo(DataGridViewCell[] array, int index)
private int System.Collections.IList.IndexOf(object value)
public int IndexOf(DataGridViewCell dataGridViewCell)
private void System.Collections.IList.Insert(int index, object value)
public void Insert(int index, DataGridViewCell dataGridViewCell)
private void System.Collections.IList.Remove(object value)
public void Remove(DataGridViewCell cell)
public void RemoveAt(int index)
private void ReIndex()
protected ArrayList get_List()
protected void OnCollectionChanged(CollectionChangeEventArgs e)
}
public System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs : DataGridViewCellEventArgs {
private ContextMenuStrip contextMenuStrip
public ContextMenuStrip ContextMenuStrip
public void .ctor(int columnIndex, int rowIndex)
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
}
public System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellContextMenuStripNeededEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellContextMenuStripNeededEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs : DataGridViewCellEventArgs {
private string errorText
public string ErrorText
internal void .ctor(string errorText, int rowIndex, int columnIndex)
public string get_ErrorText()
public void set_ErrorText(string value)
}
public System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellErrorTextNeededEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellErrorTextNeededEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellEventArgs : EventArgs {
private int columnIndex
private int rowIndex
public int ColumnIndex
public int RowIndex
public void .ctor(int columnIndex, int rowIndex)
public int get_ColumnIndex()
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewCellEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellFormattingEventArgs : ConvertEventArgs {
private int columnIndex
private DataGridViewCellStyle cellStyle
private bool formattingApplied
private int rowIndex
public DataGridViewCellStyle CellStyle
public int ColumnIndex
public bool FormattingApplied
public int RowIndex
public void .ctor(int columnIndex, int rowIndex, object value, Type desiredType, DataGridViewCellStyle cellStyle)
public DataGridViewCellStyle get_CellStyle()
public void set_CellStyle(DataGridViewCellStyle value)
public int get_ColumnIndex()
public bool get_FormattingApplied()
public void set_FormattingApplied(bool value)
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewCellFormattingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellFormattingEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellFormattingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellMouseEventArgs : MouseEventArgs {
private int columnIndex
private int rowIndex
public int ColumnIndex
public int RowIndex
public void .ctor(int columnIndex, int rowIndex, int localX, int localY, MouseEventArgs e)
public int get_ColumnIndex()
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewCellMouseEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellMouseEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellMouseEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellPaintingEventArgs : HandledEventArgs {
private DataGridView dataGridView
private Graphics graphics
private Rectangle clipBounds
private Rectangle cellBounds
private int rowIndex
private int columnIndex
private DataGridViewElementStates cellState
private object cellValue
private object formattedValue
private string errorText
private DataGridViewCellStyle cellStyle
private DataGridViewAdvancedBorderStyle advancedBorderStyle
private DataGridViewPaintParts paintParts
public DataGridViewAdvancedBorderStyle AdvancedBorderStyle
public Rectangle CellBounds
public DataGridViewCellStyle CellStyle
public Rectangle ClipBounds
public int ColumnIndex
public string ErrorText
public object FormattedValue
public Graphics Graphics
public DataGridViewPaintParts PaintParts
public int RowIndex
public DataGridViewElementStates State
public object Value
public void .ctor(DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, int columnIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
public DataGridViewAdvancedBorderStyle get_AdvancedBorderStyle()
public Rectangle get_CellBounds()
public DataGridViewCellStyle get_CellStyle()
public Rectangle get_ClipBounds()
public int get_ColumnIndex()
public string get_ErrorText()
public object get_FormattedValue()
public Graphics get_Graphics()
public DataGridViewPaintParts get_PaintParts()
public int get_RowIndex()
public DataGridViewElementStates get_State()
public object get_Value()
public void Paint(Rectangle clipBounds, DataGridViewPaintParts paintParts)
public void PaintBackground(Rectangle clipBounds, bool cellsPaintSelectionBackground)
public void PaintContent(Rectangle clipBounds)
}
public System.Windows.Forms.DataGridViewCellPaintingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellPaintingEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellPaintingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellParsingEventArgs : ConvertEventArgs {
private int columnIndex
private DataGridViewCellStyle inheritedCellStyle
private bool parsingApplied
private int rowIndex
public DataGridViewCellStyle InheritedCellStyle
public int ColumnIndex
public bool ParsingApplied
public int RowIndex
public void .ctor(int rowIndex, int columnIndex, object value, Type desiredType, DataGridViewCellStyle inheritedCellStyle)
public DataGridViewCellStyle get_InheritedCellStyle()
public void set_InheritedCellStyle(DataGridViewCellStyle value)
public int get_ColumnIndex()
public bool get_ParsingApplied()
public void set_ParsingApplied(bool value)
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewCellParsingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellParsingEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellParsingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellStateChangedEventArgs : EventArgs {
private DataGridViewCell dataGridViewCell
private DataGridViewElementStates stateChanged
public DataGridViewCell Cell
public DataGridViewElementStates StateChanged
public void .ctor(DataGridViewCell dataGridViewCell, DataGridViewElementStates stateChanged)
public DataGridViewCell get_Cell()
public DataGridViewElementStates get_StateChanged()
}
public System.Windows.Forms.DataGridViewCellStateChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellStateChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellStateChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellStyle : object {
private DataGridViewContentAlignment alignment
private Color backColor
private object dataSourceNullValue
private Font font
private Color foreColor
private string format
private IFormatProvider formatProvider
private object nullValue
private Padding padding
private Color selectionBackColor
private Color selectionForeColor
private object tag
private DataGridViewTriState wrapMode
private EventHandler StyleChanged
public DataGridViewContentAlignment Alignment
public Color BackColor
public object DataSourceNullValue
public Font Font
public Color ForeColor
public string Format
public IFormatProvider FormatProvider
public bool IsDataSourceNullValueDefault
public bool IsFormatProviderDefault
public bool IsNullValueDefault
public object NullValue
public Padding Padding
public Color SelectionBackColor
public Color SelectionForeColor
public object Tag
public DataGridViewTriState WrapMode
public void .ctor(DataGridViewCellStyle dataGridViewCellStyle)
public DataGridViewContentAlignment get_Alignment()
public void set_Alignment(DataGridViewContentAlignment value)
public Color get_BackColor()
public void set_BackColor(Color value)
public object get_DataSourceNullValue()
public void set_DataSourceNullValue(object value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public string get_Format()
public void set_Format(string value)
public IFormatProvider get_FormatProvider()
public void set_FormatProvider(IFormatProvider value)
public bool get_IsDataSourceNullValueDefault()
public bool get_IsFormatProviderDefault()
public bool get_IsNullValueDefault()
public object get_NullValue()
public void set_NullValue(object value)
public Padding get_Padding()
public void set_Padding(Padding value)
public Color get_SelectionBackColor()
public void set_SelectionBackColor(Color value)
public Color get_SelectionForeColor()
public void set_SelectionForeColor(Color value)
public object get_Tag()
public void set_Tag(object value)
public DataGridViewTriState get_WrapMode()
public void set_WrapMode(DataGridViewTriState value)
public void ApplyStyle(DataGridViewCellStyle dataGridViewCellStyle)
private object System.ICloneable.Clone()
public DataGridViewCellStyle Clone()
public bool Equals(object o)
public int GetHashCode()
public string ToString()
internal void add_StyleChanged(EventHandler value)
internal void remove_StyleChanged(EventHandler value)
internal void OnStyleChanged()
internal StringFormat SetAlignment(StringFormat format)
}
public System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs : EventArgs {
private DataGridViewCellStyle cellStyle
private DataGridViewCellStyleScopes cellStyleScope
public DataGridViewCellStyle CellStyle
public DataGridViewCellStyleScopes CellStyleScope
internal void .ctor(DataGridViewCellStyle cellStyle, DataGridViewCellStyleScopes cellStyleScope)
public DataGridViewCellStyle get_CellStyle()
public DataGridViewCellStyleScopes get_CellStyleScope()
}
public System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellStyleContentChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellStyleContentChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellStyleConverter : TypeConverter {
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Windows.Forms.DataGridViewCellStyleScopes : Enum {
public int value__
public DataGridViewCellStyleScopes None
public DataGridViewCellStyleScopes Cell
public DataGridViewCellStyleScopes Column
public DataGridViewCellStyleScopes Row
public DataGridViewCellStyleScopes DataGridView
public DataGridViewCellStyleScopes ColumnHeaders
public DataGridViewCellStyleScopes RowHeaders
public DataGridViewCellStyleScopes Rows
public DataGridViewCellStyleScopes AlternatingRows
}
public System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs : DataGridViewCellEventArgs {
private string toolTipText
public string ToolTipText
internal void .ctor(string toolTipText, int rowIndex, int columnIndex)
public string get_ToolTipText()
public void set_ToolTipText(string value)
}
public System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellToolTipTextNeededEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellToolTipTextNeededEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellValidatingEventArgs : CancelEventArgs {
private int columnIndex
private object formattedValue
private int rowIndex
public int ColumnIndex
public object FormattedValue
public int RowIndex
internal void .ctor(int columnIndex, int rowIndex, object formattedValue)
public int get_ColumnIndex()
public object get_FormattedValue()
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewCellValidatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellValidatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellValidatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCellValueEventArgs : EventArgs {
private int columnIndex
private int rowIndex
private object cellValue
public int ColumnIndex
public int RowIndex
public object Value
public void .ctor(int columnIndex, int rowIndex)
public int get_ColumnIndex()
public int get_RowIndex()
public object get_Value()
public void set_Value(object value)
}
public System.Windows.Forms.DataGridViewCellValueEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewCellValueEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewCellValueEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewCheckBoxCell : DataGridViewCell {
private object editingCellFormattedValue
private bool editingCellValueChanged
private object falseValue
private FlatStyle flatStyle
private object indeterminateValue
private bool threeState
private object trueValue
private PushButtonState check_state
public object EditingCellFormattedValue
public bool EditingCellValueChanged
public Type EditType
public object FalseValue
public FlatStyle FlatStyle
public Type FormattedValueType
public object IndeterminateValue
public bool ThreeState
public object TrueValue
public Type ValueType
public void .ctor(bool threeState)
public object get_EditingCellFormattedValue()
public void set_EditingCellFormattedValue(object value)
public bool get_EditingCellValueChanged()
public void set_EditingCellValueChanged(bool value)
public Type get_EditType()
public object get_FalseValue()
public void set_FalseValue(object value)
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public Type get_FormattedValueType()
public object get_IndeterminateValue()
public void set_IndeterminateValue(object value)
public bool get_ThreeState()
public void set_ThreeState(bool value)
public object get_TrueValue()
public void set_TrueValue(object value)
public Type get_ValueType()
public void set_ValueType(Type value)
public object Clone()
public object GetEditingCellFormattedValue(DataGridViewDataErrorContexts context)
public object ParseFormattedValue(object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter)
public void PrepareEditingCellForEdit(bool selectAll)
public string ToString()
protected bool ContentClickUnsharesRow(DataGridViewCellEventArgs e)
protected bool ContentDoubleClickUnsharesRow(DataGridViewCellEventArgs e)
protected AccessibleObject CreateAccessibilityInstance()
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected bool KeyDownUnsharesRow(KeyEventArgs e, int rowIndex)
protected bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex)
protected bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e)
protected bool MouseEnterUnsharesRow(int rowIndex)
protected bool MouseLeaveUnsharesRow(int rowIndex)
protected bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e)
protected void OnContentClick(DataGridViewCellEventArgs e)
private void ToggleCheckState()
protected void OnContentDoubleClick(DataGridViewCellEventArgs e)
protected void OnKeyDown(KeyEventArgs e, int rowIndex)
protected void OnKeyUp(KeyEventArgs e, int rowIndex)
protected void OnLeave(int rowIndex, bool throughMouseClick)
protected void OnMouseDown(DataGridViewCellMouseEventArgs e)
protected void OnMouseLeave(int rowIndex)
protected void OnMouseMove(DataGridViewCellMouseEventArgs e)
protected void OnMouseUp(DataGridViewCellMouseEventArgs e)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
internal void PaintPartContent(Graphics graphics, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle, object formattedValue)
private CheckState GetCurrentValue()
}
public System.Windows.Forms.DataGridViewCheckBoxColumn : DataGridViewColumn {
public DataGridViewCell CellTemplate
public DataGridViewCellStyle DefaultCellStyle
public object FalseValue
public FlatStyle FlatStyle
public object IndeterminateValue
public bool ThreeState
public object TrueValue
public void .ctor(bool threeState)
public DataGridViewCell get_CellTemplate()
public void set_CellTemplate(DataGridViewCell value)
public DataGridViewCellStyle get_DefaultCellStyle()
public void set_DefaultCellStyle(DataGridViewCellStyle value)
public object get_FalseValue()
public void set_FalseValue(object value)
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public object get_IndeterminateValue()
public void set_IndeterminateValue(object value)
public bool get_ThreeState()
public void set_ThreeState(bool value)
public object get_TrueValue()
public void set_TrueValue(object value)
public string ToString()
}
public System.Windows.Forms.DataGridViewClipboardCopyMode : Enum {
public int value__
public DataGridViewClipboardCopyMode Disable
public DataGridViewClipboardCopyMode EnableWithAutoHeaderText
public DataGridViewClipboardCopyMode EnableWithoutHeaderText
public DataGridViewClipboardCopyMode EnableAlwaysIncludeHeaderText
}
public System.Windows.Forms.DataGridViewColumn : DataGridViewBand {
private bool auto_generated
private DataGridViewAutoSizeColumnMode autoSizeMode
private DataGridViewCell cellTemplate
private ContextMenuStrip contextMenuStrip
private string dataPropertyName
private int displayIndex
private int dividerWidth
private float fillWeight
private bool frozen
private DataGridViewColumnHeaderCell headerCell
private bool isDataBound
private int minimumWidth
private string name
private bool readOnly
private ISite site
private DataGridViewColumnSortMode sortMode
private string toolTipText
private Type valueType
private bool visible
private int width
private int dataColumnIndex
private bool headerTextSet
private EventHandler Disposed
public DataGridViewAutoSizeColumnMode AutoSizeMode
public DataGridViewCell CellTemplate
public Type CellType
public ContextMenuStrip ContextMenuStrip
public string DataPropertyName
public DataGridViewCellStyle DefaultCellStyle
public int DisplayIndex
internal int DisplayIndexInternal
internal int DataColumnIndex
public int DividerWidth
public float FillWeight
public bool Frozen
public DataGridViewColumnHeaderCell HeaderCell
public string HeaderText
internal bool AutoGenerated
internal bool HeaderTextSet
public DataGridViewAutoSizeColumnMode InheritedAutoSizeMode
public DataGridViewCellStyle InheritedStyle
public bool IsDataBound
public int MinimumWidth
public string Name
public bool ReadOnly
public DataGridViewTriState Resizable
public ISite Site
public DataGridViewColumnSortMode SortMode
public string ToolTipText
public Type ValueType
public bool Visible
public int Width
public void .ctor(DataGridViewCell cellTemplate)
public DataGridViewAutoSizeColumnMode get_AutoSizeMode()
public void set_AutoSizeMode(DataGridViewAutoSizeColumnMode value)
public DataGridViewCell get_CellTemplate()
public void set_CellTemplate(DataGridViewCell value)
public Type get_CellType()
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public string get_DataPropertyName()
public void set_DataPropertyName(string value)
public DataGridViewCellStyle get_DefaultCellStyle()
public void set_DefaultCellStyle(DataGridViewCellStyle value)
public int get_DisplayIndex()
public void set_DisplayIndex(int value)
internal int get_DisplayIndexInternal()
internal void set_DisplayIndexInternal(int value)
internal int get_DataColumnIndex()
internal void set_DataColumnIndex(int value)
public int get_DividerWidth()
public void set_DividerWidth(int value)
public float get_FillWeight()
public void set_FillWeight(float value)
public bool get_Frozen()
public void set_Frozen(bool value)
public DataGridViewColumnHeaderCell get_HeaderCell()
public void set_HeaderCell(DataGridViewColumnHeaderCell value)
public string get_HeaderText()
public void set_HeaderText(string value)
internal bool get_AutoGenerated()
internal void set_AutoGenerated(bool value)
internal bool get_HeaderTextSet()
public DataGridViewAutoSizeColumnMode get_InheritedAutoSizeMode()
public DataGridViewCellStyle get_InheritedStyle()
public bool get_IsDataBound()
public int get_MinimumWidth()
public void set_MinimumWidth(int value)
public string get_Name()
public void set_Name(string value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public DataGridViewTriState get_Resizable()
public void set_Resizable(DataGridViewTriState value)
public ISite get_Site()
public void set_Site(ISite value)
public DataGridViewColumnSortMode get_SortMode()
public void set_SortMode(DataGridViewColumnSortMode value)
public string get_ToolTipText()
public void set_ToolTipText(string value)
public Type get_ValueType()
public void set_ValueType(Type value)
public bool get_Visible()
public void set_Visible(bool value)
public int get_Width()
public void set_Width(int value)
public void add_Disposed(EventHandler value)
public void remove_Disposed(EventHandler value)
public object Clone()
public int GetPreferredWidth(DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight)
public string ToString()
protected void Dispose(bool disposing)
internal void SetDataGridView(DataGridView dataGridView)
internal void SetIndex(int index)
internal void SetState(DataGridViewElementStates state)
}
public System.Windows.Forms.DataGridViewColumnCollection : BaseCollection {
private DataGridView dataGridView
private List`1<DataGridViewColumn> display_index_sorted
private CollectionChangeEventHandler CollectionChanged
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
public DataGridViewColumn Item
public DataGridViewColumn Item
protected DataGridView DataGridView
protected ArrayList List
internal List`1<DataGridViewColumn> ColumnDisplayIndexSortedArrayList
public void .ctor(DataGridView dataGridView)
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public DataGridViewColumn get_Item(int index)
public DataGridViewColumn get_Item(string columnName)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
private int System.Collections.IList.Add(object value)
public int Add(DataGridViewColumn dataGridViewColumn)
public int Add(string columnName, string headerText)
public void AddRange(DataGridViewColumn[] dataGridViewColumns)
public void Clear()
private bool System.Collections.IList.Contains(object value)
public bool Contains(DataGridViewColumn dataGridViewColumn)
public bool Contains(string columnName)
public void CopyTo(DataGridViewColumn[] array, int index)
public int GetColumnCount(DataGridViewElementStates includeFilter)
public int GetColumnsWidth(DataGridViewElementStates includeFilter)
public DataGridViewColumn GetFirstColumn(DataGridViewElementStates includeFilter)
public DataGridViewColumn GetFirstColumn(DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter)
public DataGridViewColumn GetLastColumn(DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter)
public DataGridViewColumn GetNextColumn(DataGridViewColumn dataGridViewColumnStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter)
public DataGridViewColumn GetPreviousColumn(DataGridViewColumn dataGridViewColumnStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter)
private int System.Collections.IList.IndexOf(object value)
public int IndexOf(DataGridViewColumn dataGridViewColumn)
private void System.Collections.IList.Insert(int index, object value)
public void Insert(int columnIndex, DataGridViewColumn dataGridViewColumn)
private void System.Collections.IList.Remove(object value)
public void Remove(DataGridViewColumn dataGridViewColumn)
public void Remove(string columnName)
public void RemoveAt(int index)
protected DataGridView get_DataGridView()
protected void OnCollectionChanged(CollectionChangeEventArgs e)
protected ArrayList get_List()
internal List`1<DataGridViewColumn> get_ColumnDisplayIndexSortedArrayList()
private void RegenerateIndexes()
internal void RegenerateSortedList()
internal void ClearAutoGeneratedColumns()
}
public System.Windows.Forms.DataGridViewColumnDesignTimeVisibleAttribute : Attribute {
public DataGridViewColumnDesignTimeVisibleAttribute Default
public DataGridViewColumnDesignTimeVisibleAttribute No
public DataGridViewColumnDesignTimeVisibleAttribute Yes
private bool visible
public bool Visible
public void .ctor(bool visible)
public bool get_Visible()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs : HandledMouseEventArgs {
private int columnIndex
public int ColumnIndex
public void .ctor(int columnIndex, HandledMouseEventArgs e)
public int get_ColumnIndex()
}
public System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewColumnDividerDoubleClickEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewColumnDividerDoubleClickEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewColumnEventArgs : EventArgs {
private DataGridViewColumn dataGridViewColumn
public DataGridViewColumn Column
public void .ctor(DataGridViewColumn dataGridViewColumn)
public DataGridViewColumn get_Column()
}
public System.Windows.Forms.DataGridViewColumnEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewColumnEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewColumnEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewColumnHeaderCell : DataGridViewHeaderCell {
private SortOrder sortGlyphDirection
private object header_text
public SortOrder SortGlyphDirection
public SortOrder get_SortGlyphDirection()
public void set_SortGlyphDirection(SortOrder value)
public object Clone()
public ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex)
public DataGridViewCellStyle GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors)
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected object GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format)
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected object GetValue(int rowIndex)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates dataGridViewElementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
protected void PaintBorder(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle)
internal void PaintPartBackground(Graphics graphics, Rectangle cellBounds, DataGridViewCellStyle style)
protected bool SetValue(int rowIndex, object value)
}
public System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode : Enum {
public int value__
public DataGridViewColumnHeadersHeightSizeMode EnableResizing
public DataGridViewColumnHeadersHeightSizeMode DisableResizing
public DataGridViewColumnHeadersHeightSizeMode AutoSize
}
public System.Windows.Forms.DataGridViewColumnSortMode : Enum {
public int value__
public DataGridViewColumnSortMode NotSortable
public DataGridViewColumnSortMode Automatic
public DataGridViewColumnSortMode Programmatic
}
public System.Windows.Forms.DataGridViewColumnStateChangedEventArgs : EventArgs {
private DataGridViewColumn dataGridViewColumn
private DataGridViewElementStates stateChanged
public DataGridViewColumn Column
public DataGridViewElementStates StateChanged
public void .ctor(DataGridViewColumn dataGridViewColumn, DataGridViewElementStates stateChanged)
public DataGridViewColumn get_Column()
public DataGridViewElementStates get_StateChanged()
}
public System.Windows.Forms.DataGridViewColumnStateChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewColumnStateChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewColumnStateChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewComboBoxCell : DataGridViewCell {
private bool autoComplete
private object dataSource
private string displayMember
private DataGridViewComboBoxDisplayStyle displayStyle
private bool displayStyleForCurrentCellOnly
private int dropDownWidth
private FlatStyle flatStyle
private ObjectCollection items
private int maxDropDownItems
private bool sorted
private string valueMember
private DataGridViewComboBoxColumn owningColumnTemlate
public bool AutoComplete
public object DataSource
public string DisplayMember
public DataGridViewComboBoxDisplayStyle DisplayStyle
public bool DisplayStyleForCurrentCellOnly
public int DropDownWidth
public Type EditType
public FlatStyle FlatStyle
public Type FormattedValueType
public ObjectCollection Items
public int MaxDropDownItems
public bool Sorted
public string ValueMember
public Type ValueType
internal DataGridViewComboBoxColumn OwningColumnTemplate
public bool get_AutoComplete()
public void set_AutoComplete(bool value)
public object get_DataSource()
public void set_DataSource(object value)
public string get_DisplayMember()
public void set_DisplayMember(string value)
public DataGridViewComboBoxDisplayStyle get_DisplayStyle()
public void set_DisplayStyle(DataGridViewComboBoxDisplayStyle value)
public bool get_DisplayStyleForCurrentCellOnly()
public void set_DisplayStyleForCurrentCellOnly(bool value)
public int get_DropDownWidth()
public void set_DropDownWidth(int value)
public Type get_EditType()
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public Type get_FormattedValueType()
public ObjectCollection get_Items()
public int get_MaxDropDownItems()
public void set_MaxDropDownItems(int value)
public bool get_Sorted()
public void set_Sorted(bool value)
public string get_ValueMember()
public void set_ValueMember(string value)
public Type get_ValueType()
internal DataGridViewComboBoxColumn get_OwningColumnTemplate()
internal void set_OwningColumnTemplate(DataGridViewComboBoxColumn value)
public object Clone()
public void DetachEditingControl()
public void InitializeEditingControl(int rowIndex, object initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle)
internal void SyncItems()
public bool KeyEntersEditMode(KeyEventArgs e)
public object ParseFormattedValue(object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter)
public string ToString()
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected void OnDataGridViewChanged()
protected void OnEnter(int rowIndex, bool throughMouseClick)
protected void OnLeave(int rowIndex, bool throughMouseClick)
protected void OnMouseDown(DataGridViewCellMouseEventArgs e)
protected void OnMouseClick(DataGridViewCellMouseEventArgs e)
protected void OnMouseEnter(int rowIndex)
protected void OnMouseLeave(int rowIndex)
protected void OnMouseMove(DataGridViewCellMouseEventArgs e)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
internal void PaintPartContent(Graphics graphics, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle, object formattedValue)
private Rectangle CalculateButtonArea(Rectangle cellBounds)
}
public System.Windows.Forms.DataGridViewComboBoxColumn : DataGridViewColumn {
private bool autoComplete
private DataGridViewComboBoxDisplayStyle displayStyle
private bool displayStyleForCurrentCellOnly
private FlatStyle flatStyle
public bool AutoComplete
public DataGridViewCell CellTemplate
public object DataSource
public string DisplayMember
public DataGridViewComboBoxDisplayStyle DisplayStyle
public bool DisplayStyleForCurrentCellOnly
public int DropDownWidth
public FlatStyle FlatStyle
public ObjectCollection Items
public int MaxDropDownItems
public bool Sorted
public string ValueMember
public bool get_AutoComplete()
public void set_AutoComplete(bool value)
public DataGridViewCell get_CellTemplate()
public void set_CellTemplate(DataGridViewCell value)
public object get_DataSource()
public void set_DataSource(object value)
public string get_DisplayMember()
public void set_DisplayMember(string value)
public DataGridViewComboBoxDisplayStyle get_DisplayStyle()
public void set_DisplayStyle(DataGridViewComboBoxDisplayStyle value)
public bool get_DisplayStyleForCurrentCellOnly()
public void set_DisplayStyleForCurrentCellOnly(bool value)
public int get_DropDownWidth()
public void set_DropDownWidth(int value)
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public ObjectCollection get_Items()
public int get_MaxDropDownItems()
public void set_MaxDropDownItems(int value)
public bool get_Sorted()
public void set_Sorted(bool value)
public string get_ValueMember()
public void set_ValueMember(string value)
internal void SyncItems(IList items)
public object Clone()
public string ToString()
}
public System.Windows.Forms.DataGridViewComboBoxDisplayStyle : Enum {
public int value__
public DataGridViewComboBoxDisplayStyle ComboBox
public DataGridViewComboBoxDisplayStyle DropDownButton
public DataGridViewComboBoxDisplayStyle Nothing
}
public System.Windows.Forms.DataGridViewComboBoxEditingControl : ComboBox {
private DataGridView editingControlDataGridView
private object editingControlFormattedValue
private int editingControlRowIndex
private bool editingControlValueChanged
public DataGridView EditingControlDataGridView
public object EditingControlFormattedValue
public int EditingControlRowIndex
public bool EditingControlValueChanged
public Cursor EditingPanelCursor
public bool RepositionEditingControlOnValueChange
public DataGridView get_EditingControlDataGridView()
public void set_EditingControlDataGridView(DataGridView value)
public object get_EditingControlFormattedValue()
public void set_EditingControlFormattedValue(object value)
public int get_EditingControlRowIndex()
public void set_EditingControlRowIndex(int value)
public bool get_EditingControlValueChanged()
public void set_EditingControlValueChanged(bool value)
public Cursor get_EditingPanelCursor()
public bool get_RepositionEditingControlOnValueChange()
public void ApplyCellStyleToEditingControl(DataGridViewCellStyle dataGridViewCellStyle)
public bool EditingControlWantsInputKey(Keys keyData, bool dataGridViewWantsInputKey)
public object GetEditingControlFormattedValue(DataGridViewDataErrorContexts context)
public void PrepareEditingControlForEdit(bool selectAll)
protected void OnSelectedIndexChanged(EventArgs e)
internal void OnMouseDownInternal(DataGridViewCellMouseEventArgs e)
}
public System.Windows.Forms.DataGridViewContentAlignment : Enum {
public int value__
public DataGridViewContentAlignment NotSet
public DataGridViewContentAlignment TopLeft
public DataGridViewContentAlignment TopCenter
public DataGridViewContentAlignment TopRight
public DataGridViewContentAlignment MiddleLeft
public DataGridViewContentAlignment MiddleCenter
public DataGridViewContentAlignment MiddleRight
public DataGridViewContentAlignment BottomLeft
public DataGridViewContentAlignment BottomCenter
public DataGridViewContentAlignment BottomRight
}
public System.Windows.Forms.DataGridViewDataErrorContexts : Enum {
public int value__
public DataGridViewDataErrorContexts Formatting
public DataGridViewDataErrorContexts Display
public DataGridViewDataErrorContexts PreferredSize
public DataGridViewDataErrorContexts RowDeletion
public DataGridViewDataErrorContexts Parsing
public DataGridViewDataErrorContexts Commit
public DataGridViewDataErrorContexts InitialValueRestoration
public DataGridViewDataErrorContexts LeaveControl
public DataGridViewDataErrorContexts CurrentCellChange
public DataGridViewDataErrorContexts Scroll
public DataGridViewDataErrorContexts ClipboardContent
}
public System.Windows.Forms.DataGridViewDataErrorEventArgs : DataGridViewCellCancelEventArgs {
private Exception exception
private DataGridViewDataErrorContexts context
private bool throwException
public DataGridViewDataErrorContexts Context
public Exception Exception
public bool ThrowException
public void .ctor(Exception exception, int columnIndex, int rowIndex, DataGridViewDataErrorContexts context)
public DataGridViewDataErrorContexts get_Context()
public Exception get_Exception()
public bool get_ThrowException()
public void set_ThrowException(bool value)
}
public System.Windows.Forms.DataGridViewDataErrorEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewDataErrorEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewDataErrorEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewEditingControlShowingEventArgs : EventArgs {
private Control control
private DataGridViewCellStyle cellStyle
public DataGridViewCellStyle CellStyle
public Control Control
public void .ctor(Control control, DataGridViewCellStyle cellStyle)
public DataGridViewCellStyle get_CellStyle()
public void set_CellStyle(DataGridViewCellStyle value)
public Control get_Control()
}
public System.Windows.Forms.DataGridViewEditingControlShowingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewEditingControlShowingEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewEditingControlShowingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewEditMode : Enum {
public int value__
public DataGridViewEditMode EditOnEnter
public DataGridViewEditMode EditOnKeystroke
public DataGridViewEditMode EditOnKeystrokeOrF2
public DataGridViewEditMode EditOnF2
public DataGridViewEditMode EditProgrammatically
}
public System.Windows.Forms.DataGridViewElement : object {
private DataGridView dataGridView
private DataGridViewElementStates state
public DataGridView DataGridView
public DataGridViewElementStates State
public DataGridView get_DataGridView()
public DataGridViewElementStates get_State()
protected void OnDataGridViewChanged()
protected void RaiseCellClick(DataGridViewCellEventArgs e)
protected void RaiseCellContentClick(DataGridViewCellEventArgs e)
protected void RaiseCellContentDoubleClick(DataGridViewCellEventArgs e)
protected void RaiseCellValueChanged(DataGridViewCellEventArgs e)
protected void RaiseDataError(DataGridViewDataErrorEventArgs e)
protected void RaiseMouseWheel(MouseEventArgs e)
internal void SetDataGridView(DataGridView dataGridView)
internal void SetState(DataGridViewElementStates state)
}
public System.Windows.Forms.DataGridViewElementStates : Enum {
public int value__
public DataGridViewElementStates None
public DataGridViewElementStates Displayed
public DataGridViewElementStates Frozen
public DataGridViewElementStates ReadOnly
public DataGridViewElementStates Resizable
public DataGridViewElementStates ResizableSet
public DataGridViewElementStates Selected
public DataGridViewElementStates Visible
}
public System.Windows.Forms.DataGridViewHeaderBorderStyle : Enum {
public int value__
public DataGridViewHeaderBorderStyle Custom
public DataGridViewHeaderBorderStyle Single
public DataGridViewHeaderBorderStyle Raised
public DataGridViewHeaderBorderStyle Sunken
public DataGridViewHeaderBorderStyle None
}
public System.Windows.Forms.DataGridViewHeaderCell : DataGridViewCell {
private ButtonState buttonState
public bool Displayed
public Type FormattedValueType
public bool Frozen
public bool ReadOnly
public bool Resizable
public bool Selected
public Type ValueType
public bool Visible
protected ButtonState ButtonState
public bool get_Displayed()
public Type get_FormattedValueType()
public bool get_Frozen()
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public bool get_Resizable()
public bool get_Selected()
public void set_Selected(bool value)
public Type get_ValueType()
public void set_ValueType(Type value)
public bool get_Visible()
public object Clone()
protected void Dispose(bool disposing)
public ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex)
public DataGridViewElementStates GetInheritedState(int rowIndex)
public string ToString()
protected Size GetSize(int rowIndex)
protected object GetValue(int rowIndex)
protected bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e)
protected bool MouseEnterUnsharesRow(int rowIndex)
protected bool MouseLeaveUnsharesRow(int rowIndex)
protected bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e)
protected void OnMouseDown(DataGridViewCellMouseEventArgs e)
protected void OnMouseEnter(int rowIndex)
protected void OnMouseLeave(int rowIndex)
protected void OnMouseUp(DataGridViewCellMouseEventArgs e)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates dataGridViewElementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
protected ButtonState get_ButtonState()
}
public System.Windows.Forms.DataGridViewHitTestType : Enum {
public int value__
public DataGridViewHitTestType None
public DataGridViewHitTestType Cell
public DataGridViewHitTestType ColumnHeader
public DataGridViewHitTestType RowHeader
public DataGridViewHitTestType TopLeftHeader
public DataGridViewHitTestType HorizontalScrollBar
public DataGridViewHitTestType VerticalScrollBar
}
public System.Windows.Forms.DataGridViewImageCell : DataGridViewCell {
private object defaultNewRowValue
private string description
private DataGridViewImageCellLayout imageLayout
private bool valueIsIcon
private Image missing_image
public object DefaultNewRowValue
public string Description
public Type EditType
public Type FormattedValueType
public DataGridViewImageCellLayout ImageLayout
public bool ValueIsIcon
public Type ValueType
public void .ctor(bool valueIsIcon)
public object get_DefaultNewRowValue()
public string get_Description()
public void set_Description(string value)
public Type get_EditType()
public Type get_FormattedValueType()
public DataGridViewImageCellLayout get_ImageLayout()
public void set_ImageLayout(DataGridViewImageCellLayout value)
public bool get_ValueIsIcon()
public void set_ValueIsIcon(bool value)
public Type get_ValueType()
public void set_ValueType(Type value)
public object Clone()
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected object GetValue(int rowIndex)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
internal void PaintPartContent(Graphics graphics, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle, object formattedValue)
}
public System.Windows.Forms.DataGridViewImageCellLayout : Enum {
public int value__
public DataGridViewImageCellLayout NotSet
public DataGridViewImageCellLayout Normal
public DataGridViewImageCellLayout Stretch
public DataGridViewImageCellLayout Zoom
}
public System.Windows.Forms.DataGridViewImageColumn : DataGridViewColumn {
private Icon icon
private Image image
private bool valuesAreIcons
public DataGridViewCell CellTemplate
public DataGridViewCellStyle DefaultCellStyle
public string Description
public Icon Icon
public Image Image
public DataGridViewImageCellLayout ImageLayout
public bool ValuesAreIcons
public void .ctor(bool valuesAreIcons)
public DataGridViewCell get_CellTemplate()
public void set_CellTemplate(DataGridViewCell value)
public DataGridViewCellStyle get_DefaultCellStyle()
public void set_DefaultCellStyle(DataGridViewCellStyle value)
public string get_Description()
public void set_Description(string value)
public Icon get_Icon()
public void set_Icon(Icon value)
public Image get_Image()
public void set_Image(Image value)
public DataGridViewImageCellLayout get_ImageLayout()
public void set_ImageLayout(DataGridViewImageCellLayout value)
public bool get_ValuesAreIcons()
public void set_ValuesAreIcons(bool value)
public object Clone()
public string ToString()
}
public System.Windows.Forms.DataGridViewLinkCell : DataGridViewCell {
private Color activeLinkColor
private LinkBehavior linkBehavior
private Color linkColor
private bool linkVisited
private Cursor parent_cursor
private bool trackVisitedState
private bool useColumnTextForLinkValue
private Color visited_link_color
private LinkState linkState
public Color ActiveLinkColor
public LinkBehavior LinkBehavior
public Color LinkColor
public bool LinkVisited
public bool TrackVisitedState
public bool UseColumnTextForLinkValue
public Color VisitedLinkColor
public Type ValueType
public Type EditType
public Type FormattedValueType
public object Clone()
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected object GetValue(int rowIndex)
protected bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex)
protected bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e)
protected bool MouseLeaveUnsharesRow(int rowIndex)
protected bool MouseMoveUnsharesRow(DataGridViewCellMouseEventArgs e)
protected bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e)
protected void OnKeyUp(KeyEventArgs e, int rowIndex)
protected void OnMouseDown(DataGridViewCellMouseEventArgs e)
protected void OnMouseLeave(int rowIndex)
protected void OnMouseMove(DataGridViewCellMouseEventArgs e)
protected void OnMouseUp(DataGridViewCellMouseEventArgs e)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
internal void PaintPartContent(Graphics graphics, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle, object formattedValue)
public Color get_ActiveLinkColor()
public void set_ActiveLinkColor(Color value)
public LinkBehavior get_LinkBehavior()
public void set_LinkBehavior(LinkBehavior value)
public Color get_LinkColor()
public void set_LinkColor(Color value)
public bool get_LinkVisited()
public void set_LinkVisited(bool value)
public bool get_TrackVisitedState()
public void set_TrackVisitedState(bool value)
public bool get_UseColumnTextForLinkValue()
public void set_UseColumnTextForLinkValue(bool value)
public Color get_VisitedLinkColor()
public void set_VisitedLinkColor(Color value)
public Type get_ValueType()
public Type get_EditType()
public Type get_FormattedValueType()
}
public System.Windows.Forms.DataGridViewLinkColumn : DataGridViewColumn {
private string text
public Color ActiveLinkColor
public DataGridViewCell CellTemplate
public LinkBehavior LinkBehavior
public Color LinkColor
public string Text
public bool TrackVisitedState
public bool UseColumnTextForLinkValue
public Color VisitedLinkColor
public object Clone()
public string ToString()
public Color get_ActiveLinkColor()
public void set_ActiveLinkColor(Color value)
public DataGridViewCell get_CellTemplate()
public void set_CellTemplate(DataGridViewCell value)
public LinkBehavior get_LinkBehavior()
public void set_LinkBehavior(LinkBehavior value)
public Color get_LinkColor()
public void set_LinkColor(Color value)
public string get_Text()
public void set_Text(string value)
public bool get_TrackVisitedState()
public void set_TrackVisitedState(bool value)
public bool get_UseColumnTextForLinkValue()
public void set_UseColumnTextForLinkValue(bool value)
public Color get_VisitedLinkColor()
public void set_VisitedLinkColor(Color value)
}
public System.Windows.Forms.DataGridViewPaintParts : Enum {
public int value__
public DataGridViewPaintParts None
public DataGridViewPaintParts Background
public DataGridViewPaintParts Border
public DataGridViewPaintParts ContentBackground
public DataGridViewPaintParts ContentForeground
public DataGridViewPaintParts ErrorIcon
public DataGridViewPaintParts Focus
public DataGridViewPaintParts SelectionBackground
public DataGridViewPaintParts All
}
public System.Windows.Forms.DataGridViewRow : DataGridViewBand {
private AccessibleObject accessibilityObject
private DataGridViewCellCollection cells
private ContextMenuStrip contextMenuStrip
private int dividerHeight
private string errorText
private DataGridViewRowHeaderCell headerCell
private int height
private int minimumHeight
private int explicit_height
public AccessibleObject AccessibilityObject
public DataGridViewCellCollection Cells
public ContextMenuStrip ContextMenuStrip
public object DataBoundItem
public DataGridViewCellStyle DefaultCellStyle
public bool Displayed
public int DividerHeight
public string ErrorText
public bool Frozen
public DataGridViewRowHeaderCell HeaderCell
public int Height
public DataGridViewCellStyle InheritedStyle
public bool IsNewRow
internal bool IsShared
public int MinimumHeight
public bool ReadOnly
public DataGridViewTriState Resizable
public bool Selected
public DataGridViewElementStates State
public bool Visible
public AccessibleObject get_AccessibilityObject()
public DataGridViewCellCollection get_Cells()
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public object get_DataBoundItem()
public DataGridViewCellStyle get_DefaultCellStyle()
public void set_DefaultCellStyle(DataGridViewCellStyle value)
public bool get_Displayed()
public int get_DividerHeight()
public void set_DividerHeight(int value)
public string get_ErrorText()
public void set_ErrorText(string value)
public bool get_Frozen()
public void set_Frozen(bool value)
public DataGridViewRowHeaderCell get_HeaderCell()
public void set_HeaderCell(DataGridViewRowHeaderCell value)
public int get_Height()
public void set_Height(int value)
public DataGridViewCellStyle get_InheritedStyle()
public bool get_IsNewRow()
internal bool get_IsShared()
public int get_MinimumHeight()
public void set_MinimumHeight(int value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public DataGridViewTriState get_Resizable()
public void set_Resizable(DataGridViewTriState value)
public bool get_Selected()
public void set_Selected(bool value)
public DataGridViewElementStates get_State()
public bool get_Visible()
public void set_Visible(bool value)
public DataGridViewAdvancedBorderStyle AdjustRowHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedRow, bool isLastVisibleRow)
public object Clone()
public void CreateCells(DataGridView dataGridView)
public void CreateCells(DataGridView dataGridView, Object[] values)
public ContextMenuStrip GetContextMenuStrip(int rowIndex)
public string GetErrorText(int rowIndex)
public int GetPreferredHeight(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
public DataGridViewElementStates GetState(int rowIndex)
public bool SetValues(Object[] values)
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected DataGridViewCellCollection CreateCellsInstance()
protected internal void DrawFocus(Graphics graphics, Rectangle clipBounds, Rectangle bounds, int rowIndex, DataGridViewElementStates rowState, DataGridViewCellStyle cellStyle, bool cellsPaintSelectionBackground)
protected internal void Paint(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow)
protected internal void PaintCells(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, DataGridViewPaintParts paintParts)
protected internal void PaintHeader(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, DataGridViewPaintParts paintParts)
internal void SetDataGridView(DataGridView dataGridView)
internal void SetState(DataGridViewElementStates state)
internal void SetAutoSizeHeight(int height)
internal void ResetToExplicitHeight()
}
public System.Windows.Forms.DataGridViewRowCancelEventArgs : CancelEventArgs {
private DataGridViewRow dataGridViewRow
public DataGridViewRow Row
public void .ctor(DataGridViewRow dataGridViewRow)
public DataGridViewRow get_Row()
}
public System.Windows.Forms.DataGridViewRowCancelEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowCancelEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowCancelEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowCollection : object {
private ArrayList list
private DataGridView dataGridView
private bool raiseEvent
private CollectionChangeEventHandler CollectionChanged
public int Count
private int System.Collections.ICollection.Count
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.IList.Item
public DataGridViewRow Item
private object System.Collections.ICollection.SyncRoot
protected DataGridView DataGridView
protected ArrayList List
internal ArrayList RowIndexSortedArrayList
public void .ctor(DataGridView dataGridView)
public int get_Count()
private int System.Collections.ICollection.get_Count()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public DataGridViewRow get_Item(int index)
private object System.Collections.ICollection.get_SyncRoot()
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
public int Add()
private int System.Collections.IList.Add(object value)
private int AddCore(DataGridViewRow dataGridViewRow, bool sharable)
private void CompleteRowCells(DataGridViewRow row)
public int Add(DataGridViewRow dataGridViewRow)
private bool CanBeShared(DataGridViewRow row)
public int Add(int count)
public int Add(Object[] values)
public int AddCopies(int indexSource, int count)
public int AddCopy(int indexSource)
public void AddRange(DataGridViewRow[] dataGridViewRows)
public void Clear()
internal void ClearInternal()
private bool System.Collections.IList.Contains(object value)
public bool Contains(DataGridViewRow dataGridViewRow)
private void System.Collections.ICollection.CopyTo(Array array, int index)
public void CopyTo(DataGridViewRow[] array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int GetFirstRow(DataGridViewElementStates includeFilter)
public int GetFirstRow(DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter)
public int GetLastRow(DataGridViewElementStates includeFilter)
public int GetNextRow(int indexStart, DataGridViewElementStates includeFilter)
public int GetNextRow(int indexStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter)
public int GetPreviousRow(int indexStart, DataGridViewElementStates includeFilter)
public int GetPreviousRow(int indexStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter)
public int GetRowCount(DataGridViewElementStates includeFilter)
public int GetRowsHeight(DataGridViewElementStates includeFilter)
public DataGridViewElementStates GetRowState(int rowIndex)
private int System.Collections.IList.IndexOf(object value)
public int IndexOf(DataGridViewRow dataGridViewRow)
private void System.Collections.IList.Insert(int index, object value)
public void Insert(int rowIndex, DataGridViewRow dataGridViewRow)
public void Insert(int rowIndex, int count)
public void Insert(int rowIndex, Object[] values)
public void InsertCopies(int indexSource, int indexDestination, int count)
public void InsertCopy(int indexSource, int indexDestination)
public void InsertRange(int rowIndex, DataGridViewRow[] dataGridViewRows)
private void System.Collections.IList.Remove(object value)
public void Remove(DataGridViewRow dataGridViewRow)
internal void RemoveInternal(DataGridViewRow dataGridViewRow)
public void RemoveAt(int index)
internal void RemoveAtInternal(int index)
public DataGridViewRow SharedRow(int rowIndex)
internal int SharedRowIndexOf(DataGridViewRow row)
protected DataGridView get_DataGridView()
protected ArrayList get_List()
protected void OnCollectionChanged(CollectionChangeEventArgs e)
internal void AddInternal(DataGridViewRow dataGridViewRow, bool sharable)
internal ArrayList get_RowIndexSortedArrayList()
internal void ReIndex()
internal void Sort(IComparer comparer)
}
public System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs : EventArgs {
private int rowIndex
private ContextMenuStrip contextMenuStrip
public ContextMenuStrip ContextMenuStrip
public int RowIndex
public void .ctor(int rowIndex)
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowContextMenuStripNeededEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowContextMenuStripNeededEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs : HandledMouseEventArgs {
private int rowIndex
public int RowIndex
public void .ctor(int rowIndex, HandledMouseEventArgs e)
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowDividerDoubleClickEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowDividerDoubleClickEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs : EventArgs {
private int rowIndex
private string errorText
public string ErrorText
public int RowIndex
internal void .ctor(int rowIndex, string errorText)
public string get_ErrorText()
public void set_ErrorText(string value)
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowErrorTextNeededEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowErrorTextNeededEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowEventArgs : EventArgs {
private DataGridViewRow dataGridViewRow
public DataGridViewRow Row
public void .ctor(DataGridViewRow dataGridViewRow)
public DataGridViewRow get_Row()
}
public System.Windows.Forms.DataGridViewRowEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowHeaderCell : DataGridViewHeaderCell {
private string headerText
internal Rectangle InternalErrorIconsBounds
public object Clone()
public ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex)
public DataGridViewCellStyle GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors)
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected object GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format)
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected internal string GetErrorText(int rowIndex)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected object GetValue(int rowIndex)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
protected void PaintBorder(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle)
internal void PaintPartBackground(Graphics graphics, Rectangle cellBounds, DataGridViewCellStyle style)
internal void PaintPartSelectionBackground(Graphics graphics, Rectangle cellBounds, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle)
private void DrawRightArrowGlyph(Graphics g, Pen p, int x, int y)
private void DrawNewRowGlyph(Graphics g, Pen p, int x, int y)
internal Rectangle get_InternalErrorIconsBounds()
protected bool SetValue(int rowIndex, object value)
}
public System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode : Enum {
public int value__
public DataGridViewRowHeadersWidthSizeMode EnableResizing
public DataGridViewRowHeadersWidthSizeMode DisableResizing
public DataGridViewRowHeadersWidthSizeMode AutoSizeToAllHeaders
public DataGridViewRowHeadersWidthSizeMode AutoSizeToDisplayedHeaders
public DataGridViewRowHeadersWidthSizeMode AutoSizeToFirstHeader
}
public System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs : EventArgs {
private int height
private int minimumHeight
private int rowIndex
public int Height
public int MinimumHeight
public int RowIndex
internal void .ctor(int rowIndex, int height, int minimumHeight)
public int get_Height()
public void set_Height(int value)
public int get_MinimumHeight()
public void set_MinimumHeight(int value)
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowHeightInfoNeededEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowHeightInfoNeededEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs : HandledEventArgs {
private int height
private int minimumHeight
private int rowIndex
public int Height
public int MinimumHeight
public int RowIndex
internal void .ctor(int rowIndex, int height, int minimumHeight)
public int get_Height()
public int get_MinimumHeight()
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowHeightInfoPushedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowHeightInfoPushedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowPostPaintEventArgs : EventArgs {
private DataGridView dataGridView
private Graphics graphics
private Rectangle clipBounds
private Rectangle rowBounds
private int rowIndex
private DataGridViewElementStates rowState
private string errorText
private DataGridViewCellStyle inheritedRowStyle
private bool isFirstDisplayedRow
private bool isLastVisibleRow
public Rectangle ClipBounds
public string ErrorText
public Graphics Graphics
public DataGridViewCellStyle InheritedRowStyle
public bool IsFirstDisplayedRow
public bool IsLastVisibleRow
public Rectangle RowBounds
public int RowIndex
public DataGridViewElementStates State
public void .ctor(DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, string errorText, DataGridViewCellStyle inheritedRowStyle, bool isFirstDisplayedRow, bool isLastVisibleRow)
public Rectangle get_ClipBounds()
public void set_ClipBounds(Rectangle value)
public string get_ErrorText()
public Graphics get_Graphics()
public DataGridViewCellStyle get_InheritedRowStyle()
public bool get_IsFirstDisplayedRow()
public bool get_IsLastVisibleRow()
public Rectangle get_RowBounds()
public int get_RowIndex()
public DataGridViewElementStates get_State()
public void DrawFocus(Rectangle bounds, bool cellsPaintSelectionBackground)
public void PaintCells(Rectangle clipBounds, DataGridViewPaintParts paintParts)
public void PaintCellsBackground(Rectangle clipBounds, bool cellsPaintSelectionBackground)
public void PaintCellsContent(Rectangle clipBounds)
public void PaintHeader(bool paintSelectionBackground)
public void PaintHeader(DataGridViewPaintParts paintParts)
}
public System.Windows.Forms.DataGridViewRowPostPaintEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowPostPaintEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowPostPaintEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowPrePaintEventArgs : HandledEventArgs {
private DataGridView dataGridView
private Graphics graphics
private Rectangle clipBounds
private Rectangle rowBounds
private int rowIndex
private DataGridViewElementStates rowState
private string errorText
private DataGridViewCellStyle inheritedRowStyle
private bool isFirstDisplayedRow
private bool isLastVisibleRow
private DataGridViewPaintParts paintParts
public Rectangle ClipBounds
public string ErrorText
public Graphics Graphics
public DataGridViewCellStyle InheritedRowStyle
public bool IsFirstDisplayedRow
public bool IsLastVisibleRow
public DataGridViewPaintParts PaintParts
public Rectangle RowBounds
public int RowIndex
public DataGridViewElementStates State
public void .ctor(DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, string errorText, DataGridViewCellStyle inheritedRowStyle, bool isFirstDisplayedRow, bool isLastVisibleRow)
public Rectangle get_ClipBounds()
public void set_ClipBounds(Rectangle value)
public string get_ErrorText()
public Graphics get_Graphics()
public DataGridViewCellStyle get_InheritedRowStyle()
public bool get_IsFirstDisplayedRow()
public bool get_IsLastVisibleRow()
public DataGridViewPaintParts get_PaintParts()
public void set_PaintParts(DataGridViewPaintParts value)
public Rectangle get_RowBounds()
public int get_RowIndex()
public DataGridViewElementStates get_State()
public void DrawFocus(Rectangle bounds, bool cellsPaintSelectionBackground)
public void PaintCells(Rectangle clipBounds, DataGridViewPaintParts paintParts)
public void PaintCellsBackground(Rectangle clipBounds, bool cellsPaintSelectionBackground)
public void PaintCellsContent(Rectangle clipBounds)
public void PaintHeader(bool paintSelectionBackground)
public void PaintHeader(DataGridViewPaintParts paintParts)
}
public System.Windows.Forms.DataGridViewRowPrePaintEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowPrePaintEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowPrePaintEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowsAddedEventArgs : EventArgs {
private int rowIndex
private int rowCount
public int RowCount
public int RowIndex
public void .ctor(int rowIndex, int rowCount)
public int get_RowCount()
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewRowsAddedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowsAddedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowsAddedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowsRemovedEventArgs : EventArgs {
private int rowIndex
private int rowCount
public int RowCount
public int RowIndex
public void .ctor(int rowIndex, int rowCount)
public int get_RowCount()
public int get_RowIndex()
}
public System.Windows.Forms.DataGridViewRowsRemovedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowsRemovedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowsRemovedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewRowStateChangedEventArgs : EventArgs {
private DataGridViewRow dataGridViewRow
private DataGridViewElementStates stateChanged
public DataGridViewRow Row
public DataGridViewElementStates StateChanged
public void .ctor(DataGridViewRow dataGridViewRow, DataGridViewElementStates stateChanged)
public DataGridViewRow get_Row()
public DataGridViewElementStates get_StateChanged()
}
public System.Windows.Forms.DataGridViewRowStateChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewRowStateChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewRowStateChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewSelectedCellCollection : BaseCollection {
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
public DataGridViewCell Item
protected ArrayList List
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public DataGridViewCell get_Item(int index)
protected ArrayList get_List()
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
public void Clear()
private bool System.Collections.IList.Contains(object value)
public bool Contains(DataGridViewCell dataGridViewCell)
public void CopyTo(DataGridViewCell[] array, int index)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
public void Insert(int index, DataGridViewCell dataGridViewCell)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
internal void InternalAdd(DataGridViewCell dataGridViewCell)
internal void InternalRemove(DataGridViewCell dataGridViewCell)
}
public System.Windows.Forms.DataGridViewSelectedColumnCollection : BaseCollection {
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
public DataGridViewColumn Item
protected ArrayList List
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public DataGridViewColumn get_Item(int index)
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
public void Clear()
private bool System.Collections.IList.Contains(object value)
public bool Contains(DataGridViewColumn dataGridViewColumn)
public void CopyTo(DataGridViewColumn[] array, int index)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
public void Insert(int index, DataGridViewColumn dataGridViewColumn)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
protected ArrayList get_List()
internal void InternalAdd(DataGridViewColumn dataGridViewColumn)
internal void InternalAddRange(DataGridViewSelectedColumnCollection columns)
internal void InternalClear()
internal void InternalRemove(DataGridViewColumn dataGridViewColumn)
}
public System.Windows.Forms.DataGridViewSelectedRowCollection : BaseCollection {
private DataGridView dataGridView
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
public DataGridViewRow Item
protected ArrayList List
internal void .ctor(DataGridView dataGridView)
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public DataGridViewRow get_Item(int index)
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
public void Clear()
private bool System.Collections.IList.Contains(object value)
public bool Contains(DataGridViewRow dataGridViewRow)
public void CopyTo(DataGridViewRow[] array, int index)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
public void Insert(int index, DataGridViewRow dataGridViewRow)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
protected ArrayList get_List()
internal void InternalAdd(DataGridViewRow dataGridViewRow)
internal void InternalAddRange(DataGridViewSelectedRowCollection rows)
internal void InternalClear()
internal void InternalRemove(DataGridViewRow dataGridViewRow)
}
public System.Windows.Forms.DataGridViewSelectionMode : Enum {
public int value__
public DataGridViewSelectionMode CellSelect
public DataGridViewSelectionMode FullRowSelect
public DataGridViewSelectionMode FullColumnSelect
public DataGridViewSelectionMode RowHeaderSelect
public DataGridViewSelectionMode ColumnHeaderSelect
}
public System.Windows.Forms.DataGridViewSortCompareEventArgs : HandledEventArgs {
private DataGridViewColumn dataGridViewColumn
private object cellValue1
private object cellValue2
private int rowIndex1
private int rowIndex2
private int sortResult
public object CellValue1
public object CellValue2
public DataGridViewColumn Column
public int RowIndex1
public int RowIndex2
public int SortResult
public void .ctor(DataGridViewColumn dataGridViewColumn, object cellValue1, object cellValue2, int rowIndex1, int rowIndex2)
public object get_CellValue1()
public object get_CellValue2()
public DataGridViewColumn get_Column()
public int get_RowIndex1()
public int get_RowIndex2()
public int get_SortResult()
public void set_SortResult(int value)
}
public System.Windows.Forms.DataGridViewSortCompareEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataGridViewSortCompareEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataGridViewSortCompareEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DataGridViewTextBoxCell : DataGridViewCell {
private int maxInputLength
private DataGridViewTextBoxEditingControl editingControl
public Type FormattedValueType
public int MaxInputLength
public Type ValueType
private void CreateEditingControl()
public Type get_FormattedValueType()
public int get_MaxInputLength()
public void set_MaxInputLength(int value)
public Type get_ValueType()
public object Clone()
public void DetachEditingControl()
public void InitializeEditingControl(int rowIndex, object initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle)
public bool KeyEntersEditMode(KeyEventArgs e)
public void PositionEditingControl(bool setLocation, bool setSize, Rectangle cellBounds, Rectangle cellClip, DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow)
public string ToString()
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected void OnEnter(int rowIndex, bool throughMouseClick)
protected void OnLeave(int rowIndex, bool throughMouseClick)
protected void OnMouseClick(DataGridViewCellMouseEventArgs e)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
}
public System.Windows.Forms.DataGridViewTextBoxColumn : DataGridViewColumn {
private int maxInputLength
public DataGridViewCell CellTemplate
public int MaxInputLength
public DataGridViewColumnSortMode SortMode
public DataGridViewCell get_CellTemplate()
public void set_CellTemplate(DataGridViewCell value)
public int get_MaxInputLength()
public void set_MaxInputLength(int value)
public DataGridViewColumnSortMode get_SortMode()
public void set_SortMode(DataGridViewColumnSortMode value)
public string ToString()
}
public System.Windows.Forms.DataGridViewTextBoxEditingControl : TextBox {
private DataGridView editingControlDataGridView
private int rowIndex
private bool editingControlValueChanged
private bool repositionEditingControlOnValueChange
public DataGridView EditingControlDataGridView
public object EditingControlFormattedValue
public int EditingControlRowIndex
public bool EditingControlValueChanged
public Cursor EditingPanelCursor
public bool RepositionEditingControlOnValueChange
public DataGridView get_EditingControlDataGridView()
public void set_EditingControlDataGridView(DataGridView value)
public object get_EditingControlFormattedValue()
public void set_EditingControlFormattedValue(object value)
public int get_EditingControlRowIndex()
public void set_EditingControlRowIndex(int value)
public bool get_EditingControlValueChanged()
public void set_EditingControlValueChanged(bool value)
public Cursor get_EditingPanelCursor()
public bool get_RepositionEditingControlOnValueChange()
public void ApplyCellStyleToEditingControl(DataGridViewCellStyle dataGridViewCellStyle)
public bool EditingControlWantsInputKey(Keys keyData, bool dataGridViewWantsInputKey)
public object GetEditingControlFormattedValue(DataGridViewDataErrorContexts context)
public void PrepareEditingControlForEdit(bool selectAll)
protected void OnMouseWheel(MouseEventArgs e)
protected void OnTextChanged(EventArgs e)
protected bool ProcessKeyEventArgs(Message& m)
}
public System.Windows.Forms.DataGridViewTopLeftHeaderCell : DataGridViewColumnHeaderCell {
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex)
protected Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize)
protected void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts)
protected void PaintBorder(Graphics graphics, Rectangle clipBounds, Rectangle bounds, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle)
}
public System.Windows.Forms.DataGridViewTriState : Enum {
public int value__
public DataGridViewTriState NotSet
public DataGridViewTriState True
public DataGridViewTriState False
}
public System.Windows.Forms.DataObject : object {
private Entry entries
public void .ctor(object data)
public void .ctor(string format, object data)
public bool ContainsAudio()
public bool ContainsFileDropList()
public bool ContainsImage()
public bool ContainsText()
public bool ContainsText(TextDataFormat format)
public Stream GetAudioStream()
public object GetData(string format)
public object GetData(string format, bool autoConvert)
public object GetData(Type format)
public bool GetDataPresent(string format)
public bool GetDataPresent(string format, bool autoConvert)
public bool GetDataPresent(Type format)
public StringCollection GetFileDropList()
public String[] GetFormats()
public String[] GetFormats(bool autoConvert)
public Image GetImage()
public string GetText()
public string GetText(TextDataFormat format)
public void SetAudio(Byte[] audioBytes)
public void SetAudio(Stream audioStream)
public void SetData(object data)
public void SetData(string format, bool autoConvert, object data)
public void SetData(string format, object data)
public void SetData(Type format, object data)
public void SetFileDropList(StringCollection filePaths)
public void SetImage(Image image)
public void SetText(string textData)
public void SetText(string textData, TextDataFormat format)
internal string EnsureFormat(string name)
internal string EnsureFormat(Type type)
private string TextFormatToDataFormat(TextDataFormat format)
private int System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(FORMATETC& pFormatetc, ADVF advf, IAdviseSink adviseSink, Int32& connection)
private void System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(int connection)
private int System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(IEnumSTATDATA& enumAdvise)
private IEnumFORMATETC System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(DATADIR direction)
private int System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(FORMATETC& formatIn, FORMATETC& formatOut)
private void System.Runtime.InteropServices.ComTypes.IDataObject.GetData(FORMATETC& format, STGMEDIUM& medium)
private void System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(FORMATETC& format, STGMEDIUM& medium)
private int System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(FORMATETC& format)
private void System.Runtime.InteropServices.ComTypes.IDataObject.SetData(FORMATETC& formatIn, STGMEDIUM& medium, bool release)
}
public System.Windows.Forms.DataSourceUpdateMode : Enum {
public int value__
public DataSourceUpdateMode OnValidation
public DataSourceUpdateMode OnPropertyChanged
public DataSourceUpdateMode Never
}
public System.Windows.Forms.DateBoldEventArgs : EventArgs {
private int size
private DateTime start
private Int32[] days_to_bold
public Int32[] DaysToBold
public int Size
public DateTime StartDate
private void .ctor(DateTime start, int size, Int32[] daysToBold)
public Int32[] get_DaysToBold()
public void set_DaysToBold(Int32[] value)
public int get_Size()
public DateTime get_StartDate()
}
public System.Windows.Forms.DateBoldEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DateBoldEventArgs e)
public IAsyncResult BeginInvoke(object sender, DateBoldEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DateRangeEventArgs : EventArgs {
private DateTime end
private DateTime start
public DateTime End
public DateTime Start
public void .ctor(DateTime start, DateTime end)
public DateTime get_End()
public DateTime get_Start()
}
public System.Windows.Forms.DateRangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DateRangeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DateRangeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DateTimePicker : Control {
public DateTime MaxDateTime
public DateTime MinDateTime
internal int check_box_size
internal int check_box_space
protected Color DefaultMonthBackColor
protected Color DefaultTitleBackColor
protected Color DefaultTitleForeColor
protected Color DefaultTrailingForeColor
internal MonthCalendar month_calendar
private bool is_checked
private string custom_format
private LeftRightAlignment drop_down_align
private DateTimePickerFormat format
private DateTime max_date
private DateTime min_date
private bool show_check_box
private bool show_up_down
private DateTime date_value
private bool right_to_left_layout
internal int up_down_width
internal bool is_drop_down_visible
internal bool is_up_pressed
internal bool is_down_pressed
internal Timer updown_timer
internal int initial_timer_delay
internal int subsequent_timer_delay
internal bool is_checkbox_selected
internal PartData[] part_data
internal int editing_part_index
internal int editing_number
internal string editing_text
private bool drop_down_button_entered
private object CloseUpEvent
private object DropDownEvent
private object FormatChangedEvent
private object ValueChangedEvent
private object RightToLeftLayoutChangedEvent
private object UIAMinimumChangedEvent
private object UIAMaximumChangedEvent
private object UIASelectionChangedEvent
private object UIACheckedEvent
private object UIAShowCheckBoxChangedEvent
private object UIAShowUpDownChangedEvent
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public Font CalendarFont
public Color CalendarForeColor
public Color CalendarMonthBackground
public Color CalendarTitleBackColor
public Color CalendarTitleForeColor
public Color CalendarTrailingForeColor
public bool Checked
public string CustomFormat
protected bool DoubleBuffered
public LeftRightAlignment DropDownAlign
public Color ForeColor
public DateTimePickerFormat Format
public DateTime MaxDate
public DateTime MaximumDateTime
public DateTime MinDate
public DateTime MinimumDateTime
public Padding Padding
public int PreferredHeight
public bool RightToLeftLayout
public bool ShowCheckBox
public bool ShowUpDown
public string Text
public DateTime Value
protected CreateParams CreateParams
protected Size DefaultSize
internal Rectangle date_area_rect
internal Rectangle CheckBoxRect
internal Rectangle drop_down_arrow_rect
internal Rectangle hilight_date_area
internal bool DropDownButtonEntered
internal bool UIAIsCheckBoxSelected
public void set_BackColor(Color value)
public Color get_BackColor()
public void set_BackgroundImage(Image value)
public Image get_BackgroundImage()
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public void set_CalendarFont(Font value)
public Font get_CalendarFont()
public void set_CalendarForeColor(Color value)
public Color get_CalendarForeColor()
public void set_CalendarMonthBackground(Color value)
public Color get_CalendarMonthBackground()
public void set_CalendarTitleBackColor(Color value)
public Color get_CalendarTitleBackColor()
public void set_CalendarTitleForeColor(Color value)
public Color get_CalendarTitleForeColor()
public void set_CalendarTrailingForeColor(Color value)
public Color get_CalendarTrailingForeColor()
public void set_Checked(bool value)
public bool get_Checked()
public void set_CustomFormat(string value)
public string get_CustomFormat()
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public void set_DropDownAlign(LeftRightAlignment value)
public LeftRightAlignment get_DropDownAlign()
public void set_ForeColor(Color value)
public Color get_ForeColor()
public void set_Format(DateTimePickerFormat value)
public DateTimePickerFormat get_Format()
public void set_MaxDate(DateTime value)
public DateTime get_MaxDate()
public DateTime get_MaximumDateTime()
public void set_MinDate(DateTime value)
public DateTime get_MinDate()
public DateTime get_MinimumDateTime()
public Padding get_Padding()
public void set_Padding(Padding value)
public int get_PreferredHeight()
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public void set_ShowCheckBox(bool value)
public bool get_ShowCheckBox()
public void set_ShowUpDown(bool value)
public bool get_ShowUpDown()
public void set_Text(string value)
public string get_Text()
public void set_Value(DateTime value)
public DateTime get_Value()
public string ToString()
public void add_CloseUp(EventHandler value)
public void remove_CloseUp(EventHandler value)
public void add_DropDown(EventHandler value)
public void remove_DropDown(EventHandler value)
public void add_FormatChanged(EventHandler value)
public void remove_FormatChanged(EventHandler value)
public void add_ValueChanged(EventHandler value)
public void remove_ValueChanged(EventHandler value)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
protected AccessibleObject CreateAccessibilityInstance()
protected void CreateHandle()
protected void DestroyHandle()
protected bool IsInputKey(Keys keyData)
protected void OnCloseUp(EventArgs eventargs)
protected void OnDropDown(EventArgs eventargs)
protected void OnFontChanged(EventArgs e)
protected void OnFormatChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnRightToLeftLayoutChanged(EventArgs e)
protected void OnSystemColorsChanged(EventArgs e)
protected void OnValueChanged(EventArgs eventargs)
internal int OverrideHeight(int height)
protected void WndProc(Message& m)
internal Rectangle get_date_area_rect()
internal Rectangle get_CheckBoxRect()
internal Rectangle get_drop_down_arrow_rect()
internal Rectangle get_hilight_date_area()
internal bool get_DropDownButtonEntered()
private void ResizeHandler(object sender, EventArgs e)
private void UpDownTimerTick(object sender, EventArgs e)
internal float CalculateMaxWidth(string format, Graphics gr, StringFormat string_format)
private string GetExactFormat()
private void CalculateFormats()
private Point CalculateDropDownLocation(Rectangle parent_control_rect, Size child_size, bool align_left)
internal void Draw(Rectangle clip_rect, Graphics dc)
internal void DropDownMonthCalendar()
internal void HideMonthCalendar()
private int GetSelectedPartIndex()
internal void IncrementSelectedPart(int delta)
internal void SelectPart(int index)
internal void SelectNextPart()
internal void SelectPreviousPart()
private void KeyDownHandler(object sender, KeyEventArgs e)
private void KeyPressHandler(object sender, KeyPressEventArgs e)
private void EndDateEdit(bool invalidate)
internal void SetPart(int value, DateTimePart dt_part)
internal void SetPart(int value, DateTimePart dt_part, bool adjust)
private void GotFocusHandler(object sender, EventArgs e)
private void LostFocusHandler(object sender, EventArgs e)
private void MonthCalendarLostFocusHandler(object sender, EventArgs e)
private void MonthCalendarDateChangedHandler(object sender, DateRangeEventArgs e)
private void MonthCalendarDateSelectedHandler(object sender, DateRangeEventArgs e)
private void MouseUpHandler(object sender, MouseEventArgs e)
private void MouseDownHandler(object sender, MouseEventArgs e)
internal void DropDownButtonClicked()
private void PaintHandler(object sender, PaintEventArgs pe)
private void OnMouseEnter(object sender, EventArgs e)
private void OnMouseLeave(object sender, EventArgs e)
private void OnMouseMove(object sender, MouseEventArgs e)
internal bool get_UIAIsCheckBoxSelected()
internal void add_UIAMinimumChanged(EventHandler value)
internal void remove_UIAMinimumChanged(EventHandler value)
internal void add_UIAMaximumChanged(EventHandler value)
internal void remove_UIAMaximumChanged(EventHandler value)
internal void add_UIASelectionChanged(EventHandler value)
internal void remove_UIASelectionChanged(EventHandler value)
internal void add_UIAChecked(EventHandler value)
internal void remove_UIAChecked(EventHandler value)
internal void add_UIAShowCheckBoxChanged(EventHandler value)
internal void remove_UIAShowCheckBoxChanged(EventHandler value)
internal void add_UIAShowUpDownChanged(EventHandler value)
internal void remove_UIAShowUpDownChanged(EventHandler value)
internal void OnUIAMinimumChanged()
internal void OnUIAMaximumChanged()
internal void OnUIASelectionChanged()
internal void OnUIAChecked()
internal void OnUIAShowCheckBoxChanged()
internal void OnUIAShowUpDownChanged()
}
public System.Windows.Forms.DateTimePickerFormat : Enum {
public int value__
public DateTimePickerFormat Custom
public DateTimePickerFormat Long
public DateTimePickerFormat Short
public DateTimePickerFormat Time
}
public System.Windows.Forms.Day : Enum {
public int value__
public Day Monday
public Day Tuesday
public Day Wednesday
public Day Thursday
public Day Friday
public Day Saturday
public Day Sunday
public Day Default
}
internal System.Windows.Forms.DeadKeys : Enum {
public int value__
public DeadKeys XK_dead_grave
public DeadKeys XK_dead_acute
public DeadKeys XK_dead_circumflex
public DeadKeys XK_dead_tilde
public DeadKeys XK_dead_macron
public DeadKeys XK_dead_breve
public DeadKeys XK_dead_abovedot
public DeadKeys XK_dead_diaeresis
public DeadKeys XK_dead_abovering
public DeadKeys XK_dead_doubleacute
public DeadKeys XK_dead_caron
public DeadKeys XK_dead_cedilla
public DeadKeys XK_dead_ogonek
public DeadKeys XK_dead_iota
public DeadKeys XK_dead_voiced_sound
public DeadKeys XK_dead_semivoiced_sound
public DeadKeys XK_dead_belowdot
public DeadKeys XK_dead_hook
public DeadKeys XK_dead_horn
}
internal System.Windows.Forms.DebugHelper : object {
private Stack`1<Data> methods
internal void DumpCallers()
internal void DumpCallers(int count)
internal void Enter()
internal void Enter(Object[] args)
internal void Leave()
internal void Print()
internal void Print(int index)
internal void Print(string methodName, string parameterName)
internal void Print(string parameterName)
internal void WriteLine(object arg)
internal void WriteLine(string format, Object[] arg)
internal void WriteLine(string message)
internal void Indent()
internal void Unindent()
internal void TraceWriteLine(string format, Object[] arg)
internal void TraceWriteLine(string message)
}
public System.Windows.Forms.Design.ComponentEditorForm : Form {
public bool AutoSize
public void .ctor(object component, Type[] pageTypes)
public bool get_AutoSize()
public void set_AutoSize(bool value)
protected void OnActivated(EventArgs e)
protected void OnSelChangeSelector(object source, TreeViewEventArgs e)
public bool PreProcessMessage(Message& msg)
public DialogResult ShowForm()
public DialogResult ShowForm(int page)
public DialogResult ShowForm(IWin32Window owner)
public DialogResult ShowForm(IWin32Window owner, int page)
protected void OnHelpRequested(HelpEventArgs e)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
}
public System.Windows.Forms.Design.ComponentEditorPage : Panel {
private bool commitOnDeactivate
private IComponent component
private bool firstActivate
private Icon icon
private int loading
private bool loadRequired
private IComponentEditorPageSite pageSite
public bool AutoSize
public bool CommitOnDeactivate
protected IComponent Component
protected CreateParams CreateParams
protected bool FirstActivate
public Icon Icon
protected int Loading
protected bool LoadRequired
protected IComponentEditorPageSite PageSite
public string Title
public bool get_AutoSize()
public void set_AutoSize(bool value)
public bool get_CommitOnDeactivate()
public void set_CommitOnDeactivate(bool value)
protected IComponent get_Component()
protected void set_Component(IComponent value)
protected CreateParams get_CreateParams()
protected bool get_FirstActivate()
protected void set_FirstActivate(bool value)
public Icon get_Icon()
public void set_Icon(Icon value)
protected int get_Loading()
protected void set_Loading(int value)
protected bool get_LoadRequired()
protected void set_LoadRequired(bool value)
protected IComponentEditorPageSite get_PageSite()
protected void set_PageSite(IComponentEditorPageSite value)
public string get_Title()
public void Activate()
public void ApplyChanges()
public void Deactivate()
protected void EnterLoadingMode()
protected void ExitLoadingMode()
public Control GetControl()
protected IComponent GetSelectedComponent()
protected bool IsFirstActivate()
protected bool IsLoading()
public bool IsPageMessage(Message& msg)
protected void LoadComponent()
public void OnApplyComplete()
protected void ReloadComponent()
protected void SaveComponent()
public void SetComponent(IComponent component)
protected void SetDirty()
public void SetSite(IComponentEditorPageSite site)
public void ShowHelp()
public bool SupportsHelp()
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
}
public System.Windows.Forms.Design.EventsTab : PropertyTab {
private IServiceProvider serviceProvider
public string HelpKeyword
public string TabName
public void .ctor(IServiceProvider sp)
public string get_HelpKeyword()
public string get_TabName()
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attributes)
public PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes)
public bool CanExtend(object extendee)
public PropertyDescriptor GetDefaultProperty(object obj)
}
public System.Windows.Forms.Design.IUIService {
public IDictionary Styles
public IDictionary get_Styles()
public bool CanShowComponentEditor(object component)
public IWin32Window GetDialogOwnerWindow()
public void SetUIDirty()
public bool ShowComponentEditor(object component, IWin32Window parent)
public void ShowError(Exception ex)
public void ShowError(string message)
public void ShowError(Exception ex, string message)
public DialogResult ShowDialog(Form form)
public void ShowMessage(string message)
public void ShowMessage(string message, string caption)
public DialogResult ShowMessage(string message, string caption, MessageBoxButtons buttons)
public bool ShowToolWindow(Guid toolWindow)
}
public System.Windows.Forms.Design.IWindowsFormsEditorService {
public void CloseDropDown()
public void DropDownControl(Control control)
public DialogResult ShowDialog(Form dialog)
}
public System.Windows.Forms.Design.PropertyTab : object {
private Bitmap bitmap
private Object[] components
public Bitmap Bitmap
public Object[] Components
public string HelpKeyword
public string TabName
protected void Finalize()
public Bitmap get_Bitmap()
public Object[] get_Components()
public void set_Components(Object[] value)
public string get_HelpKeyword()
public string get_TabName()
public bool CanExtend(object extendee)
public void Dispose()
protected void Dispose(bool disposing)
public PropertyDescriptor GetDefaultProperty(object component)
public PropertyDescriptorCollection GetProperties(object component)
public PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attributes)
}
public System.Windows.Forms.Design.ToolStripItemDesignerAvailability : Enum {
public int value__
public ToolStripItemDesignerAvailability None
public ToolStripItemDesignerAvailability ToolStrip
public ToolStripItemDesignerAvailability MenuStrip
public ToolStripItemDesignerAvailability ContextMenuStrip
public ToolStripItemDesignerAvailability StatusStrip
public ToolStripItemDesignerAvailability All
}
public System.Windows.Forms.Design.ToolStripItemDesignerAvailabilityAttribute : Attribute {
private ToolStripItemDesignerAvailability visibility
public ToolStripItemDesignerAvailabilityAttribute Default
public ToolStripItemDesignerAvailability ItemAdditionVisibility
public void .ctor(ToolStripItemDesignerAvailability visibility)
public ToolStripItemDesignerAvailability get_ItemAdditionVisibility()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Windows.Forms.Design.WindowsFormsComponentEditor : ComponentEditor {
public bool EditComponent(ITypeDescriptorContext context, object component)
public bool EditComponent(ITypeDescriptorContext context, object component, IWin32Window owner)
public bool EditComponent(object component, IWin32Window owner)
protected Type[] GetComponentEditorPages()
protected int GetInitialComponentEditorPageIndex()
}
public System.Windows.Forms.DialogResult : Enum {
public int value__
public DialogResult None
public DialogResult OK
public DialogResult Cancel
public DialogResult Abort
public DialogResult Retry
public DialogResult Ignore
public DialogResult Yes
public DialogResult No
}
internal System.Windows.Forms.DirComboBox : ComboBox {
private ImageList imageList
private string currentPath
private Stack folderStack
private int indent
private DirComboBoxItem recentlyUsedDirComboboxItem
private DirComboBoxItem desktopDirComboboxItem
private DirComboBoxItem personalDirComboboxItem
private DirComboBoxItem myComputerDirComboboxItem
private DirComboBoxItem networkDirComboboxItem
private ArrayList myComputerItems
private DirComboBoxItem mainParentDirComboBoxItem
private DirComboBoxItem real_parent
private MWFVFS vfs
private object CDirectoryChangedEvent
public string CurrentFolder
public void .ctor(MWFVFS vfs)
public void set_CurrentFolder(string value)
public string get_CurrentFolder()
private void CreateComboList()
private DirComboBoxItem CreateFolderStack()
private DirComboBoxItem AppendToParent(int nr_indents, DirComboBoxItem parentDirComboBoxItem)
protected void OnDrawItem(DrawItemEventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void OnSelectionChangeCommitted(EventArgs e)
public void add_DirectoryChanged(EventHandler value)
public void remove_DirectoryChanged(EventHandler value)
}
public System.Windows.Forms.DockingAttribute : Attribute {
private DockingBehavior dockingBehavior
public DockingAttribute Default
public DockingBehavior DockingBehavior
public void .ctor(DockingBehavior dockingBehavior)
public DockingBehavior get_DockingBehavior()
public bool Equals(object obj)
public int GetHashCode()
public bool IsDefaultAttribute()
}
public System.Windows.Forms.DockingBehavior : Enum {
public int value__
public DockingBehavior Never
public DockingBehavior Ask
public DockingBehavior AutoDock
}
public System.Windows.Forms.DockStyle : Enum {
public int value__
public DockStyle None
public DockStyle Top
public DockStyle Bottom
public DockStyle Left
public DockStyle Right
public DockStyle Fill
}
internal System.Windows.Forms.Document : object {
private Line document
private int lines
private Line sentinel
private int document_id
private Random random
internal string password_char
private StringBuilder password_cache
private bool calc_pass
private int char_count
private bool enable_links
public StringFormat string_format
private int recalc_suspended
private bool recalc_pending
private int recalc_start
private int recalc_end
private bool recalc_optimize
private int update_suspended
private bool update_pending
private int update_start
internal bool multiline
internal HorizontalAlignment alignment
internal bool wrap
internal UndoManager undo
internal Marker caret
internal Marker selection_start
internal Marker selection_end
internal bool selection_visible
internal Marker selection_anchor
internal Marker selection_prev
internal bool selection_end_anchor
internal int viewport_x
internal int viewport_y
internal int offset_x
internal int offset_y
internal int viewport_width
internal int viewport_height
internal int document_x
internal int document_y
internal int crlf_size
internal TextBoxBase owner
internal int caret_width
internal int caret_shift
internal int left_margin
internal int top_margin
internal int right_margin
private EventHandler CaretMoved
private EventHandler WidthChanged
private EventHandler HeightChanged
private EventHandler LengthChanged
private EventHandler UIASelectionChanged
internal Line Root
internal int Lines
internal Line CaretLine
internal int CaretPosition
internal Point Caret
internal LineTag CaretTag
internal int CRLFSize
internal bool EnableLinks
internal string PasswordChar
private StringBuilder PasswordCache
internal int ViewPortX
internal int Length
private int CharCount
internal int ViewPortY
internal int OffsetX
internal int OffsetY
internal int ViewPortWidth
internal int ViewPortHeight
internal int Width
internal int Height
internal bool SelectionVisible
internal bool Wrap
internal void .ctor(TextBoxBase owner)
internal Line get_Root()
internal void set_Root(Line value)
internal int get_Lines()
internal Line get_CaretLine()
internal int get_CaretPosition()
internal Point get_Caret()
internal LineTag get_CaretTag()
internal void set_CaretTag(LineTag value)
internal int get_CRLFSize()
internal void set_CRLFSize(int value)
internal bool get_EnableLinks()
internal void set_EnableLinks(bool value)
internal string get_PasswordChar()
internal void set_PasswordChar(string value)
private StringBuilder get_PasswordCache()
internal int get_ViewPortX()
internal void set_ViewPortX(int value)
internal int get_Length()
private int get_CharCount()
private void set_CharCount(int value)
internal int get_ViewPortY()
internal void set_ViewPortY(int value)
internal int get_OffsetX()
internal void set_OffsetX(int value)
internal int get_OffsetY()
internal void set_OffsetY(int value)
internal int get_ViewPortWidth()
internal void set_ViewPortWidth(int value)
internal int get_ViewPortHeight()
internal void set_ViewPortHeight(int value)
internal int get_Width()
internal int get_Height()
internal bool get_SelectionVisible()
internal bool get_Wrap()
internal void set_Wrap(bool value)
internal void UpdateMargins()
internal void SuspendRecalc()
internal void ResumeRecalc(bool immediate_update)
internal void SuspendUpdate()
internal void ResumeUpdate(bool immediate_update)
internal int DumpTree(Line line, bool with_tags)
private void SetSelectionVisible(bool value)
private void DecrementLines(int line_no)
private void IncrementLines(int line_no)
private void RebalanceAfterAdd(Line line1)
private void RebalanceAfterDelete(Line line1)
private void RotateLeft(Line line1)
private void RotateRight(Line line1)
internal void UpdateView(Line line, int pos)
internal void UpdateView(Line line, int line_count, int pos)
private void ScanForLinks(Line start_line, Boolean& link_changed)
private int FirstIndexOfAny(string haystack, String[] needles, int start_index, Int32& term_found)
private void InvalidateLinks(Rectangle clip)
internal void ScanForLinks(int start, int end, Boolean& link_changed)
internal void Empty()
internal void PositionCaret(Line line, int pos)
internal void PositionCaret(int x, int y)
internal void CaretHasFocus()
internal void CaretLostFocus()
internal void AlignCaret()
internal void AlignCaret(bool changeCaretTag)
internal void UpdateCaret()
internal void DisplayCaret()
internal void HideCaret()
internal void MoveCaretToTextTag()
internal void MoveCaret(CaretDirection direction)
internal void DumpDoc()
internal void GetVisibleLineIndexes(Rectangle clip, Int32& start, Int32& end)
internal void Draw(Graphics g, Rectangle clip)
private int GetLineEnding(string line, int start, LineEnding& ending)
private int GetLineEnding(string line, int start, LineEnding& ending, LineEnding type)
internal int LineEndingLength(LineEnding ending)
internal string LineEndingToString(LineEnding ending)
internal LineEnding StringToLineEnding(string ending)
internal void Insert(Line line, int pos, bool update_caret, string s)
internal void Insert(Line line, int pos, bool update_caret, string s, LineTag tag)
internal void InsertString(Line line, int pos, string s)
internal void InsertCharAtCaret(char ch, bool move_caret)
internal void InsertPicture(Line line, int pos, Picture picture)
internal void DeleteMultiline(Line start_line, int pos, int length)
public void DeleteChars(Line line, int pos, int count)
public void DeleteChar(Line line, int pos, bool forward)
internal void Combine(int FirstLine, int SecondLine)
internal void Combine(Line first, Line second)
internal void Split(int LineNo, int pos)
internal void Split(Line line, int pos)
internal void Split(Line line, LineTag tag, int pos)
internal void Add(int LineNo, string Text, Font font, Color color, LineEnding ending)
internal void Add(int LineNo, string Text, HorizontalAlignment align, Font font, Color color, LineEnding ending)
internal void Clear()
public object Clone()
private void Delete(int LineNo)
private void Delete(Line line1)
internal void InvalidateLinesAfter(Line start)
internal void Invalidate(Line start, int start_pos, Line end, int end_pos)
internal void ExpandSelection(CaretSelection mode, bool to_caret)
internal void SetSelectionToCaret(bool start)
internal void SetSelection(Line start, int start_pos, Line end, int end_pos)
internal void SetSelectionStart(Line start, int start_pos, bool invalidate)
internal void SetSelectionStart(int character_index, bool invalidate)
internal void SetSelectionEnd(Line end, int end_pos, bool invalidate)
internal void SetSelectionEnd(int character_index, bool invalidate)
internal void SetSelection(Line start, int start_pos)
internal void InvalidateSelectionArea()
internal string GetSelection()
internal void ReplaceSelection(string s, bool select_new)
internal void CharIndexToLineTag(int index, Line& line_out, LineTag& tag_out, Int32& pos)
internal int LineTagToCharIndex(Line line, int pos)
internal int SelectionLength()
internal Line GetLine(int LineNo)
internal LineTag PreviousTag(LineTag tag)
internal LineTag NextTag(LineTag tag)
internal Line ParagraphStart(Line line)
internal Line ParagraphEnd(Line line)
internal Line GetLineByPixel(int offset, bool exact)
internal LineTag FindCursor(int x, int y, Int32& index)
internal void FormatText(Line start_line, int start_pos, Line end_line, int end_pos, Font font, Color color, Color back_color, FormatSpecified specified)
internal void RecalculateAlignments()
internal bool RecalculateDocument(Graphics g)
internal bool RecalculateDocument(Graphics g, int start)
internal bool RecalculateDocument(Graphics g, int start, int end)
internal bool RecalculateDocument(Graphics g, int start, int end, bool optimize)
internal int Size()
private void owner_HandleCreated(object sender, EventArgs e)
private void owner_VisibleChanged(object sender, EventArgs e)
internal bool IsWordSeparator(char ch)
internal int FindWordSeparator(Line line, int pos, bool forward)
internal bool FindChars(Char[] chars, Marker start, Marker end, Marker& result)
internal bool Find(string search, Marker start, Marker end, Marker& result, RichTextBoxFinds options)
internal void GetMarker(Marker& mark, bool start)
internal void add_CaretMoved(EventHandler value)
internal void remove_CaretMoved(EventHandler value)
internal void add_WidthChanged(EventHandler value)
internal void remove_WidthChanged(EventHandler value)
internal void add_HeightChanged(EventHandler value)
internal void remove_HeightChanged(EventHandler value)
internal void add_LengthChanged(EventHandler value)
internal void remove_LengthChanged(EventHandler value)
internal void add_UIASelectionChanged(EventHandler value)
internal void remove_UIASelectionChanged(EventHandler value)
public IEnumerator GetEnumerator()
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public System.Windows.Forms.DomainUpDown : UpDownBase {
private DomainUpDownItemCollection items
private int selected_index
private bool sorted
private bool wrap
private int typed_to_index
private object SelectedItemChangedEvent
public DomainUpDownItemCollection Items
public Padding Padding
public int SelectedIndex
public object SelectedItem
public bool Sorted
public bool Wrap
internal void items_CollectionChanged(int index, int size_delta)
private void go_to_user_input()
private void TextBoxLostFocus(object source, EventArgs e)
private int SearchTextWithPrefix(char key_char)
private bool IsValidInput(char key_char)
private void TextBoxKeyDown(object source, KeyPressEventArgs e)
public DomainUpDownItemCollection get_Items()
public Padding get_Padding()
public void set_Padding(Padding value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public object get_SelectedItem()
public void set_SelectedItem(object value)
public bool get_Sorted()
public void set_Sorted(bool value)
public bool get_Wrap()
public void set_Wrap(bool value)
public void DownButton()
public string ToString()
public void UpButton()
protected AccessibleObject CreateAccessibilityInstance()
protected void OnChanged(object source, EventArgs e)
protected void OnSelectedItemChanged(object source, EventArgs e)
protected void UpdateEditText()
protected void OnTextBoxKeyPress(object source, KeyPressEventArgs e)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_SelectedItemChanged(EventHandler value)
public void remove_SelectedItemChanged(EventHandler value)
}
public System.Windows.Forms.DragAction : Enum {
public int value__
public DragAction Continue
public DragAction Drop
public DragAction Cancel
}
public System.Windows.Forms.DragDropEffects : Enum {
public int value__
public DragDropEffects None
public DragDropEffects Copy
public DragDropEffects Move
public DragDropEffects Link
public DragDropEffects Scroll
public DragDropEffects All
}
public System.Windows.Forms.DragEventArgs : EventArgs {
internal int x
internal int y
internal int keystate
internal DragDropEffects allowed_effect
internal DragDropEffects current_effect
internal IDataObject data_object
public DragDropEffects AllowedEffect
public IDataObject Data
public DragDropEffects Effect
public int KeyState
public int X
public int Y
public void .ctor(IDataObject data, int keyState, int x, int y, DragDropEffects allowedEffect, DragDropEffects effect)
public DragDropEffects get_AllowedEffect()
public IDataObject get_Data()
public DragDropEffects get_Effect()
public void set_Effect(DragDropEffects value)
public int get_KeyState()
public int get_X()
public int get_Y()
}
public System.Windows.Forms.DragEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DragEventArgs e)
public IAsyncResult BeginInvoke(object sender, DragEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DrawItemEventArgs : EventArgs {
private Graphics graphics
private Font font
private Rectangle rect
private int index
private DrawItemState state
private Color fore_color
private Color back_color
public Graphics Graphics
public Font Font
public Rectangle Bounds
public int Index
public DrawItemState State
public Color BackColor
public Color ForeColor
public void .ctor(Graphics graphics, Font font, Rectangle rect, int index, DrawItemState state)
public void .ctor(Graphics graphics, Font font, Rectangle rect, int index, DrawItemState state, Color foreColor, Color backColor)
public Graphics get_Graphics()
public Font get_Font()
public Rectangle get_Bounds()
public int get_Index()
public DrawItemState get_State()
public Color get_BackColor()
public Color get_ForeColor()
public void DrawBackground()
public void DrawFocusRectangle()
}
public System.Windows.Forms.DrawItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DrawItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, DrawItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DrawItemState : Enum {
public int value__
public DrawItemState None
public DrawItemState Selected
public DrawItemState Grayed
public DrawItemState Disabled
public DrawItemState Checked
public DrawItemState Focus
public DrawItemState Default
public DrawItemState HotLight
public DrawItemState Inactive
public DrawItemState NoAccelerator
public DrawItemState NoFocusRect
public DrawItemState ComboBoxEdit
}
public System.Windows.Forms.DrawListViewColumnHeaderEventArgs : EventArgs {
private Color backColor
private Rectangle bounds
private int columnIndex
private bool drawDefault
private Font font
private Color foreColor
private Graphics graphics
private ColumnHeader header
private ListViewItemStates state
public Color BackColor
public Rectangle Bounds
public int ColumnIndex
public bool DrawDefault
public Font Font
public Color ForeColor
public Graphics Graphics
public ColumnHeader Header
public ListViewItemStates State
public Color get_BackColor()
public Rectangle get_Bounds()
public int get_ColumnIndex()
public bool get_DrawDefault()
public void set_DrawDefault(bool value)
public Font get_Font()
public Color get_ForeColor()
public Graphics get_Graphics()
public ColumnHeader get_Header()
public ListViewItemStates get_State()
public void .ctor(Graphics graphics, Rectangle bounds, int columnIndex, ColumnHeader header, ListViewItemStates state, Color foreColor, Color backColor, Font font)
public void DrawBackground()
public void DrawText()
public void DrawText(TextFormatFlags flags)
}
public System.Windows.Forms.DrawListViewColumnHeaderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DrawListViewColumnHeaderEventArgs e)
public IAsyncResult BeginInvoke(object sender, DrawListViewColumnHeaderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DrawListViewItemEventArgs : EventArgs {
private Rectangle bounds
private bool drawDefault
private Graphics graphics
private ListViewItem item
private int itemIndex
private ListViewItemStates state
public bool DrawDefault
public Rectangle Bounds
public Graphics Graphics
public ListViewItem Item
public int ItemIndex
public ListViewItemStates State
public bool get_DrawDefault()
public void set_DrawDefault(bool value)
public Rectangle get_Bounds()
public Graphics get_Graphics()
public ListViewItem get_Item()
public int get_ItemIndex()
public ListViewItemStates get_State()
public void .ctor(Graphics graphics, ListViewItem item, Rectangle bounds, int itemIndex, ListViewItemStates state)
public void DrawBackground()
public void DrawFocusRectangle()
public void DrawText()
public void DrawText(TextFormatFlags flags)
}
public System.Windows.Forms.DrawListViewItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DrawListViewItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, DrawListViewItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DrawListViewSubItemEventArgs : EventArgs {
private Rectangle bounds
private int columnIndex
private bool drawDefault
private Graphics graphics
private ColumnHeader header
private ListViewItem item
private int itemIndex
private ListViewItemStates itemState
private ListViewSubItem subItem
public Rectangle Bounds
public int ColumnIndex
public bool DrawDefault
public Graphics Graphics
public ColumnHeader Header
public ListViewItem Item
public int ItemIndex
public ListViewItemStates ItemState
public ListViewSubItem SubItem
public Rectangle get_Bounds()
public int get_ColumnIndex()
public bool get_DrawDefault()
public void set_DrawDefault(bool value)
public Graphics get_Graphics()
public ColumnHeader get_Header()
public ListViewItem get_Item()
public int get_ItemIndex()
public ListViewItemStates get_ItemState()
public ListViewSubItem get_SubItem()
public void .ctor(Graphics graphics, Rectangle bounds, ListViewItem item, ListViewSubItem subItem, int itemIndex, int columnIndex, ColumnHeader header, ListViewItemStates itemState)
public void DrawBackground()
public void DrawFocusRectangle(Rectangle bounds)
public void DrawText()
public void DrawText(TextFormatFlags flags)
}
public System.Windows.Forms.DrawListViewSubItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DrawListViewSubItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, DrawListViewSubItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DrawMode : Enum {
public int value__
public DrawMode Normal
public DrawMode OwnerDrawFixed
public DrawMode OwnerDrawVariable
}
public System.Windows.Forms.DrawToolTipEventArgs : EventArgs {
private Control associated_control
private IWin32Window associated_window
private Color back_color
private Font font
private Rectangle bounds
private Color fore_color
private Graphics graphics
private string tooltip_text
public Control AssociatedControl
public IWin32Window AssociatedWindow
public Rectangle Bounds
public Font Font
public Graphics Graphics
public string ToolTipText
public void .ctor(Graphics graphics, IWin32Window associatedWindow, Control associatedControl, Rectangle bounds, string toolTipText, Color backColor, Color foreColor, Font font)
public void DrawBackground()
public void DrawBorder()
public void DrawText()
public void DrawText(TextFormatFlags flags)
public Control get_AssociatedControl()
public IWin32Window get_AssociatedWindow()
public Rectangle get_Bounds()
public Font get_Font()
public Graphics get_Graphics()
public string get_ToolTipText()
}
public System.Windows.Forms.DrawToolTipEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DrawToolTipEventArgs e)
public IAsyncResult BeginInvoke(object sender, DrawToolTipEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.DrawTreeNodeEventArgs : EventArgs {
private Rectangle bounds
private bool draw_default
private Graphics graphics
private TreeNode node
private TreeNodeStates state
public Rectangle Bounds
public bool DrawDefault
public Graphics Graphics
public TreeNode Node
public TreeNodeStates State
public void .ctor(Graphics graphics, TreeNode node, Rectangle bounds, TreeNodeStates state)
public Rectangle get_Bounds()
public bool get_DrawDefault()
public void set_DrawDefault(bool value)
public Graphics get_Graphics()
public TreeNode get_Node()
public TreeNodeStates get_State()
}
public System.Windows.Forms.DrawTreeNodeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DrawTreeNodeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DrawTreeNodeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.EPlatformHandler : Enum {
public int value__
public EPlatformHandler Default
public EPlatformHandler GNOME
}
public System.Windows.Forms.ErrorBlinkStyle : Enum {
public int value__
public ErrorBlinkStyle BlinkIfDifferentError
public ErrorBlinkStyle AlwaysBlink
public ErrorBlinkStyle NeverBlink
}
public System.Windows.Forms.ErrorIconAlignment : Enum {
public int value__
public ErrorIconAlignment TopLeft
public ErrorIconAlignment TopRight
public ErrorIconAlignment MiddleLeft
public ErrorIconAlignment MiddleRight
public ErrorIconAlignment BottomLeft
public ErrorIconAlignment BottomRight
}
public System.Windows.Forms.ErrorProvider : Component {
private int blinkrate
private ErrorBlinkStyle blinkstyle
private string datamember
private object datasource
private ContainerControl container
private Icon icon
private Hashtable controls
private ToolTipWindow tooltip
private bool right_to_left
private object tag
private object RightToLeftChangedEvent
private Control uia_control
private ControlEventHandler UIAControlHookUp
private ControlEventHandler UIAControlUnhookUp
private ControlEventHandler UIAErrorProviderHookUp
private ControlEventHandler UIAErrorProviderUnhookUp
private PopupEventHandler UIAPopup
private PopupEventHandler UIAUnPopup
public int BlinkRate
public ErrorBlinkStyle BlinkStyle
public ContainerControl ContainerControl
public string DataMember
public object DataSource
public Icon Icon
public ISite Site
public bool RightToLeft
public object Tag
internal Control UIAControl
internal Rectangle UIAToolTipRectangle
public void .ctor(ContainerControl parentControl)
public void .ctor(IContainer container)
public int get_BlinkRate()
public void set_BlinkRate(int value)
public ErrorBlinkStyle get_BlinkStyle()
public void set_BlinkStyle(ErrorBlinkStyle value)
public ContainerControl get_ContainerControl()
public void set_ContainerControl(ContainerControl value)
public string get_DataMember()
public void set_DataMember(string value)
public object get_DataSource()
public void set_DataSource(object value)
public Icon get_Icon()
public void set_Icon(Icon value)
public void set_Site(ISite value)
public bool get_RightToLeft()
public void set_RightToLeft(bool value)
public object get_Tag()
public void set_Tag(object value)
public void BindToDataAndErrors(object newDataSource, string newDataMember)
public bool CanExtend(object extendee)
public void Clear()
public string GetError(Control control)
public ErrorIconAlignment GetIconAlignment(Control control)
public int GetIconPadding(Control control)
public void SetError(Control control, string value)
public void SetIconAlignment(Control control, ErrorIconAlignment value)
public void SetIconPadding(Control control, int padding)
public void UpdateBinding()
protected void Dispose(bool disposing)
protected void OnRightToLeftChanged(EventArgs e)
private ErrorProperty GetErrorProperty(Control control)
private void System.ComponentModel.ISupportInitialize.BeginInit()
private void System.ComponentModel.ISupportInitialize.EndInit()
public void add_RightToLeftChanged(EventHandler value)
public void remove_RightToLeftChanged(EventHandler value)
internal Control get_UIAControl()
internal void set_UIAControl(Control value)
internal Rectangle get_UIAToolTipRectangle()
internal void add_UIAControlHookUp(ControlEventHandler value)
internal void remove_UIAControlHookUp(ControlEventHandler value)
internal void add_UIAControlUnhookUp(ControlEventHandler value)
internal void remove_UIAControlUnhookUp(ControlEventHandler value)
internal void add_UIAErrorProviderHookUp(ControlEventHandler value)
internal void remove_UIAErrorProviderHookUp(ControlEventHandler value)
internal void add_UIAErrorProviderUnhookUp(ControlEventHandler value)
internal void remove_UIAErrorProviderUnhookUp(ControlEventHandler value)
internal void add_UIAPopup(PopupEventHandler value)
internal void remove_UIAPopup(PopupEventHandler value)
internal void add_UIAUnPopup(PopupEventHandler value)
internal void remove_UIAUnPopup(PopupEventHandler value)
internal void OnUIAPopup(ErrorProvider sender, PopupEventArgs args)
internal void OnUIAUnPopup(ErrorProvider sender, PopupEventArgs args)
internal void OnUIAControlHookUp(object sender, ControlEventArgs args)
internal void OnUIAControlUnhookUp(object sender, ControlEventArgs args)
internal void OnUIAErrorProviderHookUp(object sender, ControlEventArgs args)
internal void OnUIAErrorProviderUnhookUp(object sender, ControlEventArgs args)
private void <.ctor>b__12_0(object sender, EventArgs args)
}
internal System.Windows.Forms.EventMask : Enum {
public int value__
public EventMask NoEventMask
public EventMask KeyPressMask
public EventMask KeyReleaseMask
public EventMask ButtonPressMask
public EventMask ButtonReleaseMask
public EventMask EnterWindowMask
public EventMask LeaveWindowMask
public EventMask PointerMotionMask
public EventMask PointerMotionHintMask
public EventMask Button1MotionMask
public EventMask Button2MotionMask
public EventMask Button3MotionMask
public EventMask Button4MotionMask
public EventMask Button5MotionMask
public EventMask ButtonMotionMask
public EventMask KeymapStateMask
public EventMask ExposureMask
public EventMask VisibilityChangeMask
public EventMask StructureNotifyMask
public EventMask ResizeRedirectMask
public EventMask SubstructureNotifyMask
public EventMask SubstructureRedirectMask
public EventMask FocusChangeMask
public EventMask PropertyChangeMask
public EventMask ColormapChangeMask
public EventMask OwnerGrabButtonMask
}
internal System.Windows.Forms.FDOMimeConfigReader : object {
private bool fdo_mime_available
private StringCollection shared_mime_paths
private BinaryReader br
private int max_offset_and_range
public int Init()
private void CheckFDOMimePaths()
private void ReadMagicData()
private void MakeMatches()
private void ReadGlobsData()
private void ReadSubclasses()
private void ReadAliases()
private int ReadValue()
private string ReadPriorityAndMimeType(Int32& priority)
private bool CheckMagicHeader()
}
public System.Windows.Forms.FeatureSupport : object {
private IFeatureSupport FeatureObject(string class_name)
public Version GetVersionPresent(string featureClassName, string featureConstName)
public bool IsPresent(string featureClassName, string featureConstName)
public bool IsPresent(string featureClassName, string featureConstName, Version minimumVersion)
public Version GetVersionPresent(object feature)
public bool IsPresent(object feature)
public bool IsPresent(object feature, Version minimumVersion)
}
public System.Windows.Forms.FileDialog : CommonDialog {
protected object EventFileOk
private int MaxFileNameItems
private bool addExtension
private bool checkFileExists
private bool checkPathExists
private string defaultExt
private bool dereferenceLinks
private String[] fileNames
private string filter
private int filterIndex
private string initialDirectory
private bool restoreDirectory
private bool showHelp
private string title
private bool validateNames
private bool auto_upgrade_enable
private FileDialogCustomPlacesCollection custom_places
private bool supportMultiDottedExtensions
private bool checkForIllegalChars
private Button cancelButton
private ToolBarButton upToolBarButton
private PopupButtonPanel popupButtonPanel
private Button openSaveButton
private Button helpButton
private Label fileTypeLabel
private ToolBarButton menueToolBarButton
private ContextMenu menueToolBarButtonContextMenu
private ToolBar smallButtonToolBar
private DirComboBox dirComboBox
private ComboBox fileNameComboBox
private Label fileNameLabel
private MWFFileView mwfFileView
private MwfFileViewItemComparer file_view_comparer
private Label searchSaveLabel
private ToolBarButton newdirToolBarButton
private ToolBarButton backToolBarButton
private ComboBox fileTypeComboBox
private ImageList imageListTopToolbar
private CheckBox readonlyCheckBox
private bool multiSelect
private string restoreDirectoryString
internal FileDialogType fileDialogType
private bool do_not_call_OnSelectedIndexChangedFileTypeComboBox
private bool showReadOnly
private bool readOnlyChecked
internal bool createPrompt
internal bool overwritePrompt
private FileFilter fileFilter
private String[] configFileNames
private string lastFolder
private MWFVFS vfs
private string filedialog_string
private string lastfolder_string
private string width_string
private string height_string
private string filenames_string
private string x_string
private string y_string
private Char[] wildcard_chars
private bool disable_form_closed_event
public bool AddExtension
public bool AutoUpgradeEnabled
public bool CheckFileExists
public bool CheckPathExists
public FileDialogCustomPlacesCollection CustomPlaces
public string DefaultExt
public bool DereferenceLinks
public string FileName
public String[] FileNames
public string Filter
public int FilterIndex
public string InitialDirectory
public bool RestoreDirectory
public bool ShowHelp
public bool SupportMultiDottedExtensions
public string Title
public bool ValidateNames
protected IntPtr Instance
protected int Options
internal string DialogTitle
internal bool ShowReadOnly
internal bool ReadOnlyChecked
internal bool BMultiSelect
internal string OpenSaveButtonText
internal string SearchSaveLabel
internal string FileTypeLabel
internal string CustomFilter
public bool get_AddExtension()
public void set_AddExtension(bool value)
public bool get_AutoUpgradeEnabled()
public void set_AutoUpgradeEnabled(bool value)
public bool get_CheckFileExists()
public void set_CheckFileExists(bool value)
public bool get_CheckPathExists()
public void set_CheckPathExists(bool value)
public FileDialogCustomPlacesCollection get_CustomPlaces()
public string get_DefaultExt()
public void set_DefaultExt(string value)
public bool get_DereferenceLinks()
public void set_DereferenceLinks(bool value)
public string get_FileName()
public void set_FileName(string value)
public String[] get_FileNames()
public string get_Filter()
public void set_Filter(string value)
public int get_FilterIndex()
public void set_FilterIndex(int value)
public string get_InitialDirectory()
public void set_InitialDirectory(string value)
public bool get_RestoreDirectory()
public void set_RestoreDirectory(bool value)
public bool get_ShowHelp()
public void set_ShowHelp(bool value)
public bool get_SupportMultiDottedExtensions()
public void set_SupportMultiDottedExtensions(bool value)
public string get_Title()
public void set_Title(string value)
public bool get_ValidateNames()
public void set_ValidateNames(bool value)
public void Reset()
public string ToString()
public void add_FileOk(CancelEventHandler value)
public void remove_FileOk(CancelEventHandler value)
protected IntPtr get_Instance()
protected int get_Options()
internal string get_DialogTitle()
protected IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam)
protected void OnFileOk(CancelEventArgs e)
private void CleanupOnClose()
protected bool RunDialog(IntPtr hWndOwner)
internal void set_ShowReadOnly(bool value)
internal bool get_ShowReadOnly()
internal void set_ReadOnlyChecked(bool value)
internal bool get_ReadOnlyChecked()
internal void set_BMultiSelect(bool value)
internal bool get_BMultiSelect()
internal void set_OpenSaveButtonText(string value)
internal void set_SearchSaveLabel(string value)
internal void set_FileTypeLabel(string value)
internal string get_CustomFilter()
private void SelectFilter()
private void SetFileAndDirectory(string fname)
private void OnClickOpenSaveButton(object sender, EventArgs e)
private bool AddFilterExtension(string fileName)
private string GetExtension(string fileName)
private void OnClickCancelButton(object sender, EventArgs e)
private void OnClickHelpButton(object sender, EventArgs e)
private void OnClickSmallButtonToolBar(object sender, ToolBarButtonClickEventArgs e)
private void OnSelectedIndexChangedFileTypeComboBox(object sender, EventArgs e)
private void OnSelectedFileChangedFileView(object sender, EventArgs e)
private void OnSelectedFilesChangedFileView(object sender, EventArgs e)
private void OnForceDialogEndFileView(object sender, EventArgs e)
private void OnDirectoryChangedDirComboBox(object sender, EventArgs e)
private void OnDirectoryChangedPopupButtonPanel(object sender, EventArgs e)
private void OnCheckCheckChanged(object sender, EventArgs e)
private void OnFileDialogFormClosed(object sender, FormClosedEventArgs e)
private void OnColumnClickFileView(object sender, ColumnClickEventArgs e)
private void HandleFormClosedEvent(object sender)
private void UpdateFilters()
private void UpdateRecentFiles()
private void ResizeAndRelocateForHelpOrReadOnly()
private void WriteConfigValues()
private void ReadConfigValues()
}
public System.Windows.Forms.FileDialogCustomPlace : object {
private string path
private Guid guid
public string Path
public Guid KnownFolderGuid
public void .ctor(string path)
public void .ctor(Guid knownFolderGuid)
public string get_Path()
public void set_Path(string value)
public Guid get_KnownFolderGuid()
public void set_KnownFolderGuid(Guid value)
public string ToString()
}
public System.Windows.Forms.FileDialogCustomPlacesCollection : Collection`1<FileDialogCustomPlace> {
public void Add(Guid knownFolderGuid)
public void Add(string path)
}
internal System.Windows.Forms.FileFilter : object {
private ArrayList filterArrayList
private string filter
public ArrayList FilterArrayList
public string Filter
public void .ctor(string filter)
public bool CheckFilter(string val)
public void set_FilterArrayList(ArrayList value)
public ArrayList get_FilterArrayList()
public void set_Filter(string value)
public string get_Filter()
private void SplitFilter()
}
internal System.Windows.Forms.FileSystem : object {
protected string currentTopFolder
protected FSEntry currentFolderFSEntry
protected FSEntry currentTopFolderFSEntry
private FileInfoComparer fileInfoComparer
private FSEntryComparer fsEntryComparer
public FSEntry ChangeDirectory(string folder)
public string GetParent()
public void GetFolderContent(StringCollection filters, ArrayList& directories_out, ArrayList& files_out)
public ArrayList GetFoldersOnly()
protected void GetNormalFolderContent(string from_folder, StringCollection filters, ArrayList& directories_out, ArrayList& files_out)
protected ArrayList GetNormalFolders(string from_folder)
protected FSEntry GetDirectoryFSEntry(DirectoryInfo dirinfo, FSEntry topFolderFSEntry)
protected FSEntry GetFileFSEntry(FileInfo fileinfo)
protected FSEntry GetDesktopFSEntry()
protected FSEntry GetRecentlyUsedFSEntry()
protected FSEntry GetPersonalFSEntry()
protected FSEntry GetMyComputerPersonalFSEntry()
protected FSEntry GetMyComputerFSEntry()
protected FSEntry GetMyNetworkFSEntry()
public void WriteRecentlyUsedFiles(string fileToAdd)
public ArrayList GetRecentlyUsedFiles()
public ArrayList GetMyComputerContent()
public ArrayList GetMyNetworkContent()
}
internal System.Windows.Forms.FileViewListViewItem : ListViewItem {
private FSEntry fsEntry
public FSEntry FSEntry
public void .ctor(FSEntry fsEntry)
public void set_FSEntry(FSEntry value)
public FSEntry get_FSEntry()
}
internal System.Windows.Forms.FilterStruct : ValueType {
public string filterName
public StringCollection filters
public void .ctor(string filterName, string filter)
private void SplitFilters(string filter)
}
public System.Windows.Forms.FixedPanel : Enum {
public int value__
public FixedPanel None
public FixedPanel Panel1
public FixedPanel Panel2
}
internal System.Windows.Forms.FixedSizeTextBox : TextBox {
public void .ctor(bool fixed_horz, bool fixed_vert)
}
public System.Windows.Forms.FlatButtonAppearance : object {
private Color borderColor
private int borderSize
private Color checkedBackColor
private Color mouseDownBackColor
private Color mouseOverBackColor
private ButtonBase owner
public Color BorderColor
public int BorderSize
public Color CheckedBackColor
public Color MouseDownBackColor
public Color MouseOverBackColor
internal void .ctor(ButtonBase owner)
public Color get_BorderColor()
public void set_BorderColor(Color value)
public int get_BorderSize()
public void set_BorderSize(int value)
public Color get_CheckedBackColor()
public void set_CheckedBackColor(Color value)
public Color get_MouseDownBackColor()
public void set_MouseDownBackColor(Color value)
public Color get_MouseOverBackColor()
public void set_MouseOverBackColor(Color value)
}
internal System.Windows.Forms.FlatButtonAppearanceConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Windows.Forms.FlatStyle : Enum {
public int value__
public FlatStyle Flat
public FlatStyle Popup
public FlatStyle Standard
public FlatStyle System
}
public System.Windows.Forms.FlowDirection : Enum {
public int value__
public FlowDirection LeftToRight
public FlowDirection TopDown
public FlowDirection RightToLeft
public FlowDirection BottomUp
}
public System.Windows.Forms.FlowLayoutPanel : Panel {
private FlowLayoutSettings settings
public FlowDirection FlowDirection
public bool WrapContents
public LayoutEngine LayoutEngine
internal FlowLayoutSettings LayoutSettings
public FlowDirection get_FlowDirection()
public void set_FlowDirection(FlowDirection value)
public bool get_WrapContents()
public void set_WrapContents(bool value)
public LayoutEngine get_LayoutEngine()
internal FlowLayoutSettings get_LayoutSettings()
public bool GetFlowBreak(Control control)
public void SetFlowBreak(Control control, bool value)
private bool System.ComponentModel.IExtenderProvider.CanExtend(object obj)
internal void CalculateCanvasSize(bool canOverride)
protected void OnLayout(LayoutEventArgs levent)
internal Size GetPreferredSizeCore(Size proposedSize)
}
public System.Windows.Forms.FlowLayoutSettings : LayoutSettings {
private FlowDirection flow_direction
private bool wrap_contents
private LayoutEngine layout_engine
private Dictionary`2<object, bool> flow_breaks
private Control owner
public FlowDirection FlowDirection
public LayoutEngine LayoutEngine
public bool WrapContents
internal void .ctor(Control owner)
public FlowDirection get_FlowDirection()
public void set_FlowDirection(FlowDirection value)
public LayoutEngine get_LayoutEngine()
public bool get_WrapContents()
public void set_WrapContents(bool value)
public bool GetFlowBreak(object child)
public void SetFlowBreak(object child, bool value)
}
public System.Windows.Forms.FolderBrowserDialog : CommonDialog {
private SpecialFolder rootFolder
private string selectedPath
private bool showNewFolderButton
private Label descriptionLabel
private Button cancelButton
private Button okButton
private FolderBrowserTreeView folderBrowserTreeView
private Button newFolderButton
private ContextMenu folderBrowserTreeViewContextMenu
private MenuItem newFolderMenuItem
private string old_selectedPath
private string folderbrowserdialog_string
private string width_string
private string height_string
private string x_string
private string y_string
public string Description
public SpecialFolder RootFolder
public string SelectedPath
public bool ShowNewFolderButton
public void set_Description(string value)
public string get_Description()
public void set_RootFolder(SpecialFolder value)
public SpecialFolder get_RootFolder()
public void set_SelectedPath(string value)
public string get_SelectedPath()
public void set_ShowNewFolderButton(bool value)
public bool get_ShowNewFolderButton()
public void Reset()
protected bool RunDialog(IntPtr hWndOwner)
private void OnClickOKButton(object sender, EventArgs e)
private void OnClickCancelButton(object sender, EventArgs e)
private void OnClickNewFolderButton(object sender, EventArgs e)
private void OnFormVisibleChanged(object sender, EventArgs e)
private void WriteConfigValues()
public void add_HelpRequest(EventHandler value)
public void remove_HelpRequest(EventHandler value)
}
public System.Windows.Forms.FontDialog : CommonDialog {
protected object EventApply
private Font font
private Color color
private bool allowSimulations
private bool allowVectorFonts
private bool allowVerticalFonts
private bool allowScriptChange
private bool fixedPitchOnly
private int maxSize
private int minSize
private bool scriptsOnly
private bool showApply
private bool showColor
private bool showEffects
private bool showHelp
private bool fontMustExist
private Panel examplePanel
private Button okButton
private Button cancelButton
private Button applyButton
private Button helpButton
private TextBox fontTextBox
private TextBox fontstyleTextBox
private TextBox fontsizeTextBox
private MouseWheelListBox fontListBox
private MouseWheelListBox fontstyleListBox
private MouseWheelListBox fontsizeListBox
private GroupBox effectsGroupBox
private CheckBox strikethroughCheckBox
private CheckBox underlinedCheckBox
private ComboBox scriptComboBox
private Label fontLabel
private Label fontstyleLabel
private Label sizeLabel
private Label scriptLabel
private GroupBox exampleGroupBox
private ColorComboBox colorComboBox
private string currentFontName
private float currentSize
private FontFamily currentFamily
private FontStyle currentFontStyle
private bool underlined
private bool strikethrough
private Hashtable fontHash
private Int32[] a_sizes
private String[] char_sets_names
private String[] char_sets
private string example_panel_text
private bool internal_change
private bool internal_textbox_change
public Font Font
public bool FontMustExist
public Color Color
public bool AllowSimulations
public bool AllowVectorFonts
public bool AllowVerticalFonts
public bool AllowScriptChange
public bool FixedPitchOnly
public int MaxSize
public int MinSize
public bool ScriptsOnly
public bool ShowApply
public bool ShowColor
public bool ShowEffects
public bool ShowHelp
protected int Options
public Font get_Font()
public void set_Font(Font value)
public bool get_FontMustExist()
public void set_FontMustExist(bool value)
public void set_Color(Color value)
public Color get_Color()
public void set_AllowSimulations(bool value)
public bool get_AllowSimulations()
public void set_AllowVectorFonts(bool value)
public bool get_AllowVectorFonts()
public void set_AllowVerticalFonts(bool value)
public bool get_AllowVerticalFonts()
public void set_AllowScriptChange(bool value)
public bool get_AllowScriptChange()
public void set_FixedPitchOnly(bool value)
public bool get_FixedPitchOnly()
public void set_MaxSize(int value)
public int get_MaxSize()
public void set_MinSize(int value)
public int get_MinSize()
public void set_ScriptsOnly(bool value)
public bool get_ScriptsOnly()
public void set_ShowApply(bool value)
public bool get_ShowApply()
public void set_ShowColor(bool value)
public bool get_ShowColor()
public void set_ShowEffects(bool value)
public bool get_ShowEffects()
public void set_ShowHelp(bool value)
public bool get_ShowHelp()
protected int get_Options()
public void Reset()
public string ToString()
protected IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam)
protected bool RunDialog(IntPtr hWndOwner)
internal void OnApplyButton(object sender, EventArgs e)
protected void OnApply(EventArgs e)
private void OnClickCancelButton(object sender, EventArgs e)
private void OnClickOkButton(object sender, EventArgs e)
private void OnPaintExamplePanel(object sender, PaintEventArgs e)
private void OnSelectedIndexChangedFontListBox(object sender, EventArgs e)
private void OnSelectedIndexChangedSizeListBox(object sender, EventArgs e)
private void OnSelectedIndexChangedFontStyleListBox(object sender, EventArgs e)
private void OnCheckedChangedUnderlinedCheckBox(object sender, EventArgs e)
private void OnCheckedChangedStrikethroughCheckBox(object sender, EventArgs e)
private void OnFontTextBoxMouseWheel(object sender, MouseEventArgs e)
private void OnFontStyleTextBoxMouseWheel(object sender, MouseEventArgs e)
private void OnFontSizeTextBoxMouseWheel(object sender, MouseEventArgs e)
private void OnFontTextBoxKeyDown(object sender, KeyEventArgs e)
private void OnFontStyleTextBoxKeyDown(object sender, KeyEventArgs e)
private void OnFontSizeTextBoxKeyDown(object sender, KeyEventArgs e)
private void OnFontTextBoxKeyPress(object sender, KeyPressEventArgs e)
private void OnFontStyleTextBoxKeyPress(object sender, KeyPressEventArgs e)
private void OnFontSizeTextBoxKeyPress(object sender, KeyPressEventArgs e)
private void OnFontTextBoxTextChanged(object sender, EventArgs e)
private void OnFontStyleTextTextChanged(object sender, EventArgs e)
private void OnFontSizeTextBoxTextChanged(object sender, EventArgs e)
private void OnSelectedIndexChangedScriptComboBox(object sender, EventArgs e)
private void UpdateExamplePanel()
private void UpdateFontSizeListBox()
private void UpdateFontStyleListBox()
private FontFamily FindByName(string name)
private void CreateFontSizeListBoxItems()
private void PopulateFontList()
private bool IsFontFamilyFixedPitch(FontFamily family)
public void add_Apply(EventHandler value)
public void remove_Apply(EventHandler value)
}
public System.Windows.Forms.Form : ContainerControl {
internal bool closing
private bool closed
private FormBorderStyle form_border_style
private bool is_active
private bool autoscale
private Size clientsize_set
private Size autoscale_base_size
private bool allow_transparency
private Icon default_icon
internal bool is_modal
internal FormWindowState window_state
private bool control_box
private bool minimize_box
private bool maximize_box
private bool help_button
private bool show_in_taskbar
private bool topmost
private IButtonControl accept_button
private IButtonControl cancel_button
private DialogResult dialog_result
private FormStartPosition start_position
private Form owner
private ControlCollection owned_forms
private MdiClient mdi_container
internal InternalWindowManager window_manager
private Form mdi_parent
private bool key_preview
private MainMenu menu
private Icon icon
private Size maximum_size
private Size minimum_size
private SizeGripStyle size_grip_style
private SizeGrip size_grip
private Rectangle maximized_bounds
private Rectangle default_maximized_bounds
private double opacity
internal ApplicationContext context
private Color transparency_key
private bool is_loaded
internal int is_changing_visible_state
internal bool has_been_visible
private bool shown_raised
private bool close_raised
private bool is_clientsize_set
internal bool suppress_closing_events
internal bool waiting_showwindow
private bool is_minimizing
private bool show_icon
private MenuStrip main_menu_strip
private bool right_to_left_layout
private Rectangle restore_bounds
private bool autoscale_base_size_set
internal ArrayList disabled_by_showdialog
internal ArrayList modal_dialogs
private object ActivatedEvent
private object ClosedEvent
private object ClosingEvent
private object DeactivateEvent
private object InputLanguageChangedEvent
private object InputLanguageChangingEvent
private object LoadEvent
private object MaximizedBoundsChangedEvent
private object MaximumSizeChangedEvent
private object MdiChildActivateEvent
private object MenuCompleteEvent
private object MenuStartEvent
private object MinimumSizeChangedEvent
private object FormClosingEvent
private object FormClosedEvent
private object HelpButtonClickedEvent
private object ResizeEndEvent
private object ResizeBeginEvent
private object RightToLeftLayoutChangedEvent
private object ShownEvent
private object UIAMenuChangedEvent
private object UIATopMostChangedEvent
private object UIAWindowStateChangedEvent
internal bool IsLoaded
internal bool IsActive
public Form ActiveForm
public IButtonControl AcceptButton
public bool AllowTransparency
public bool AutoScale
public Size AutoScaleBaseSize
public bool AutoScroll
public bool AutoSize
public AutoSizeMode AutoSizeMode
public AutoValidate AutoValidate
public Color BackColor
public IButtonControl CancelButton
public Size ClientSize
public bool ControlBox
public Rectangle DesktopBounds
public Point DesktopLocation
public DialogResult DialogResult
public FormBorderStyle FormBorderStyle
public bool HelpButton
public Icon Icon
public bool IsMdiChild
public bool IsMdiContainer
public Form ActiveMdiChild
public bool IsRestrictedWindow
public bool KeyPreview
public MenuStrip MainMenuStrip
public Padding Margin
public bool MaximizeBox
public Size MaximumSize
public Form[] MdiChildren
public Form MdiParent
internal MdiClient MdiContainer
internal InternalWindowManager WindowManager
public MainMenu Menu
public MainMenu MergedMenu
internal MainMenu ActiveMenu
internal MdiWindowManager ActiveMaximizedMdiChild
public bool MinimizeBox
public Size MinimumSize
public bool Modal
public double Opacity
public Form[] OwnedForms
public Form Owner
public Rectangle RestoreBounds
public bool RightToLeftLayout
public bool ShowIcon
public bool ShowInTaskbar
public Size Size
public SizeGripStyle SizeGripStyle
public FormStartPosition StartPosition
public int TabIndex
public bool TabStop
public bool TopLevel
public bool TopMost
public Color TransparencyKey
public FormWindowState WindowState
protected CreateParams CreateParams
protected ImeMode DefaultImeMode
protected Size DefaultSize
protected Rectangle MaximizedBounds
protected bool ShowWithoutActivation
internal bool ActivateOnShow
public string Text
public Point Location
internal bool get_IsLoaded()
internal bool get_IsActive()
internal void set_IsActive(bool value)
private void ControlAddedHandler(object sender, ControlEventArgs e)
internal bool FireClosingEvents(CloseReason reason, bool cancel)
private void FireClosedEvents(CloseReason reason)
internal Size GetPreferredSizeCore(Size proposedSize)
protected Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified)
protected bool ProcessMnemonic(char charCode)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
internal void OnActivatedInternal()
internal void OnDeactivateInternal()
internal void UpdateWindowText()
internal void SelectActiveControl()
private void UpdateSizeGripVisible()
internal void ChangingParent(Control new_parent)
internal bool FocusInternal(bool skip_check)
public Form get_ActiveForm()
public IButtonControl get_AcceptButton()
public void set_AcceptButton(IButtonControl value)
public bool get_AllowTransparency()
public void set_AllowTransparency(bool value)
public bool get_AutoScale()
public void set_AutoScale(bool value)
public Size get_AutoScaleBaseSize()
public void set_AutoScaleBaseSize(Size value)
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
internal bool ShouldSerializeAutoScroll()
public bool get_AutoSize()
public void set_AutoSize(bool value)
internal bool ShouldSerializeAutoSize()
public AutoSizeMode get_AutoSizeMode()
public void set_AutoSizeMode(AutoSizeMode value)
public AutoValidate get_AutoValidate()
public void set_AutoValidate(AutoValidate value)
public Color get_BackColor()
public void set_BackColor(Color value)
public IButtonControl get_CancelButton()
public void set_CancelButton(IButtonControl value)
public Size get_ClientSize()
public void set_ClientSize(Size value)
public bool get_ControlBox()
public void set_ControlBox(bool value)
public Rectangle get_DesktopBounds()
public void set_DesktopBounds(Rectangle value)
public Point get_DesktopLocation()
public void set_DesktopLocation(Point value)
public DialogResult get_DialogResult()
public void set_DialogResult(DialogResult value)
public FormBorderStyle get_FormBorderStyle()
public void set_FormBorderStyle(FormBorderStyle value)
public bool get_HelpButton()
public void set_HelpButton(bool value)
public Icon get_Icon()
public void set_Icon(Icon value)
internal bool ShouldSerializeIcon()
public bool get_IsMdiChild()
public bool get_IsMdiContainer()
public void set_IsMdiContainer(bool value)
public Form get_ActiveMdiChild()
public bool get_IsRestrictedWindow()
public bool get_KeyPreview()
public void set_KeyPreview(bool value)
public MenuStrip get_MainMenuStrip()
public void set_MainMenuStrip(MenuStrip value)
public Padding get_Margin()
public void set_Margin(Padding value)
public bool get_MaximizeBox()
public void set_MaximizeBox(bool value)
public Size get_MaximumSize()
public void set_MaximumSize(Size value)
public Form[] get_MdiChildren()
public Form get_MdiParent()
public void set_MdiParent(Form value)
internal MdiClient get_MdiContainer()
internal InternalWindowManager get_WindowManager()
public MainMenu get_Menu()
public void set_Menu(MainMenu value)
public MainMenu get_MergedMenu()
internal MainMenu get_ActiveMenu()
internal MdiWindowManager get_ActiveMaximizedMdiChild()
public bool get_MinimizeBox()
public void set_MinimizeBox(bool value)
public Size get_MinimumSize()
public void set_MinimumSize(Size value)
public bool get_Modal()
public double get_Opacity()
public void set_Opacity(double value)
public Form[] get_OwnedForms()
public Form get_Owner()
public void set_Owner(Form value)
public Rectangle get_RestoreBounds()
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public bool get_ShowIcon()
public void set_ShowIcon(bool value)
public bool get_ShowInTaskbar()
public void set_ShowInTaskbar(bool value)
public Size get_Size()
public void set_Size(Size value)
public SizeGripStyle get_SizeGripStyle()
public void set_SizeGripStyle(SizeGripStyle value)
public FormStartPosition get_StartPosition()
public void set_StartPosition(FormStartPosition value)
public int get_TabIndex()
public void set_TabIndex(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public bool get_TopLevel()
public void set_TopLevel(bool value)
public bool get_TopMost()
public void set_TopMost(bool value)
public Color get_TransparencyKey()
public void set_TransparencyKey(Color value)
internal bool ShouldSerializeTransparencyKey()
public FormWindowState get_WindowState()
public void set_WindowState(FormWindowState value)
protected CreateParams get_CreateParams()
protected ImeMode get_DefaultImeMode()
protected Size get_DefaultSize()
protected Rectangle get_MaximizedBounds()
protected void set_MaximizedBounds(Rectangle value)
protected bool get_ShowWithoutActivation()
public SizeF GetAutoScaleSize(Font font)
public void Activate()
public void AddOwnedForm(Form ownedForm)
public void Close()
public void LayoutMdi(MdiLayout value)
public void RemoveOwnedForm(Form ownedForm)
public void SetDesktopBounds(int x, int y, int width, int height)
public void SetDesktopLocation(int x, int y)
public void Show(IWin32Window owner)
public DialogResult ShowDialog()
public DialogResult ShowDialog(IWin32Window owner)
public string ToString()
public bool ValidateChildren()
public bool ValidateChildren(ValidationConstraints validationConstraints)
protected void ActivateMdiChild(Form form)
protected void AdjustFormScrollbars(bool displayScrollbars)
protected void ApplyAutoScaling()
protected void CenterToParent()
protected void CenterToScreen()
protected ControlCollection CreateControlsInstance()
protected void CreateHandle()
protected void DefWndProc(Message& m)
protected void Dispose(bool disposing)
protected void OnActivated(EventArgs e)
protected void OnClosed(EventArgs e)
protected void OnClosing(CancelEventArgs e)
protected void OnCreateControl()
protected void OnDeactivate(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnInputLanguageChanged(InputLanguageChangedEventArgs e)
protected void OnInputLanguageChanging(InputLanguageChangingEventArgs e)
protected void OnLoad(EventArgs e)
protected void OnMaximizedBoundsChanged(EventArgs e)
protected void OnMaximumSizeChanged(EventArgs e)
protected void OnMdiChildActivate(EventArgs e)
protected internal void OnMenuComplete(EventArgs e)
protected void OnMenuStart(EventArgs e)
protected void OnMinimumSizeChanged(EventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnResize(EventArgs e)
protected void OnStyleChanged(EventArgs e)
protected void OnTextChanged(EventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected bool ProcessCmdKey(Message& msg, Keys keyData)
protected bool ProcessDialogChar(char charCode)
protected bool ProcessDialogKey(Keys keyData)
protected bool ProcessKeyPreview(Message& m)
protected bool ProcessTabKey(bool forward)
protected void ScaleCore(float x, float y)
protected void Select(bool directed, bool forward)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void SetClientSizeCore(int x, int y)
protected void SetVisibleCore(bool value)
protected void UpdateDefaultButton()
protected void WndProc(Message& m)
private void WmDestroy(Message& m)
internal bool RaiseCloseEvents(bool last_check, bool cancel)
private void WmClose(Message& m)
private void WmWindowPosChanged(Message& m)
private void WmSysCommand(Message& m)
private void WmActivate(Message& m)
private void WmKillFocus(Message& m)
private void WmSetFocus(Message& m)
private void WmNcHitTest(Message& m)
private void WmNcLButtonDown(Message& m)
private void WmNcLButtonUp(Message& m)
private void WmNcMouseLeave(Message& m)
private void WmNcMouseMove(Message& m)
private void WmNcPaint(Message& m)
private void WmNcCalcSize(Message& m)
private void WmGetMinMaxInfo(Message& m)
internal void ActivateFocusCues()
internal void FireEnter()
internal void FireLeave()
internal void RemoveWindowManager()
internal void CheckAcceptButton()
internal bool get_ActivateOnShow()
private void OnLoadInternal(EventArgs e)
public void add_Activated(EventHandler value)
public void remove_Activated(EventHandler value)
public void add_Closed(EventHandler value)
public void remove_Closed(EventHandler value)
public void add_Closing(CancelEventHandler value)
public void remove_Closing(CancelEventHandler value)
public void add_Deactivate(EventHandler value)
public void remove_Deactivate(EventHandler value)
public void add_InputLanguageChanged(InputLanguageChangedEventHandler value)
public void remove_InputLanguageChanged(InputLanguageChangedEventHandler value)
public void add_InputLanguageChanging(InputLanguageChangingEventHandler value)
public void remove_InputLanguageChanging(InputLanguageChangingEventHandler value)
public void add_Load(EventHandler value)
public void remove_Load(EventHandler value)
public void add_MaximizedBoundsChanged(EventHandler value)
public void remove_MaximizedBoundsChanged(EventHandler value)
public void add_MaximumSizeChanged(EventHandler value)
public void remove_MaximumSizeChanged(EventHandler value)
public void add_MdiChildActivate(EventHandler value)
public void remove_MdiChildActivate(EventHandler value)
public void add_MenuComplete(EventHandler value)
public void remove_MenuComplete(EventHandler value)
public void add_MenuStart(EventHandler value)
public void remove_MenuStart(EventHandler value)
public void add_MinimumSizeChanged(EventHandler value)
public void remove_MinimumSizeChanged(EventHandler value)
public void add_TabIndexChanged(EventHandler value)
public void remove_TabIndexChanged(EventHandler value)
public string get_Text()
public void set_Text(string value)
public Point get_Location()
public void set_Location(Point value)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_AutoValidateChanged(EventHandler value)
public void remove_AutoValidateChanged(EventHandler value)
public void add_FormClosing(FormClosingEventHandler value)
public void remove_FormClosing(FormClosingEventHandler value)
public void add_FormClosed(FormClosedEventHandler value)
public void remove_FormClosed(FormClosedEventHandler value)
public void add_HelpButtonClicked(CancelEventHandler value)
public void remove_HelpButtonClicked(CancelEventHandler value)
public void add_MarginChanged(EventHandler value)
public void remove_MarginChanged(EventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
public void add_ResizeBegin(EventHandler value)
public void remove_ResizeBegin(EventHandler value)
public void add_ResizeEnd(EventHandler value)
public void remove_ResizeEnd(EventHandler value)
public void add_Shown(EventHandler value)
public void remove_Shown(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
protected void OnBackgroundImageChanged(EventArgs e)
protected void OnBackgroundImageLayoutChanged(EventArgs e)
protected void OnEnabledChanged(EventArgs e)
protected void OnEnter(EventArgs e)
protected void OnFormClosed(FormClosedEventArgs e)
protected void OnFormClosing(FormClosingEventArgs e)
protected void OnHelpButtonClicked(CancelEventArgs e)
protected void OnLayout(LayoutEventArgs levent)
protected void OnResizeBegin(EventArgs e)
protected void OnResizeEnd(EventArgs e)
protected void OnRightToLeftLayoutChanged(EventArgs e)
protected void OnShown(EventArgs e)
internal void add_UIAMenuChanged(EventHandler value)
internal void remove_UIAMenuChanged(EventHandler value)
internal void add_UIATopMostChanged(EventHandler value)
internal void remove_UIATopMostChanged(EventHandler value)
internal void add_UIAWindowStateChanged(EventHandler value)
internal void remove_UIAWindowStateChanged(EventHandler value)
internal void OnUIAMenuChanged(EventArgs e)
internal void OnUIATopMostChanged()
internal void OnUIAWindowStateChanged()
}
internal System.Windows.Forms.FormatSpecified : Enum {
public int value__
public FormatSpecified None
public FormatSpecified BackColor
public FormatSpecified Font
public FormatSpecified Color
}
public System.Windows.Forms.FormBorderStyle : Enum {
public int value__
public FormBorderStyle None
public FormBorderStyle FixedSingle
public FormBorderStyle Fixed3D
public FormBorderStyle FixedDialog
public FormBorderStyle Sizable
public FormBorderStyle FixedToolWindow
public FormBorderStyle SizableToolWindow
}
public System.Windows.Forms.FormClosedEventArgs : EventArgs {
private CloseReason close_reason
public CloseReason CloseReason
public void .ctor(CloseReason closeReason)
public CloseReason get_CloseReason()
}
public System.Windows.Forms.FormClosedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormClosedEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormClosedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.FormClosingEventArgs : CancelEventArgs {
private CloseReason close_reason
public CloseReason CloseReason
public void .ctor(CloseReason closeReason, bool cancel)
public CloseReason get_CloseReason()
}
public System.Windows.Forms.FormClosingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FormClosingEventArgs e)
public IAsyncResult BeginInvoke(object sender, FormClosingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.FormCollection : ReadOnlyCollectionBase {
public Form Item
public Form Item
public Form get_Item(int index)
public Form get_Item(string name)
internal void Add(Form form)
internal void Remove(Form form)
}
public System.Windows.Forms.FormStartPosition : Enum {
public int value__
public FormStartPosition Manual
public FormStartPosition CenterScreen
public FormStartPosition WindowsDefaultLocation
public FormStartPosition WindowsDefaultBounds
public FormStartPosition CenterParent
}
internal System.Windows.Forms.FormWindowManager : InternalWindowManager {
private bool pending_activation
internal Rectangle MaximizedBounds
public void .ctor(Form form)
private void HandleCaptureChanged(object sender, EventArgs e)
public void PointToClient(Int32& x, Int32& y)
protected bool HandleNCLButtonDown(Message& m)
protected void HandleTitleBarDoubleClick(int x, int y)
internal Rectangle get_MaximizedBounds()
}
public System.Windows.Forms.FormWindowState : Enum {
public int value__
public FormWindowState Normal
public FormWindowState Minimized
public FormWindowState Maximized
}
public System.Windows.Forms.FrameStyle : Enum {
public int value__
public FrameStyle Dashed
public FrameStyle Thick
}
internal System.Windows.Forms.FSEntry : object {
private FsTypes fsType
private string device_short
private string fullName
private string name
private string realName
private FileAttributes attributes
private long fileSize
private FSEntryType fileType
private DateTime lastAccessTime
private FSEntry mainTopNode
private int iconIndex
private string parent
private Image <Image>k__BackingField
private bool fMustDisposeImage
public FsTypes FsType
public string DeviceShort
public string FullName
public string Name
public string RealName
public FileAttributes Attributes
public long FileSize
public FSEntryType FileType
public DateTime LastAccessTime
public int IconIndex
public FSEntry MainTopNode
public string Parent
internal Image Image
public void set_FsType(FsTypes value)
public FsTypes get_FsType()
public void set_DeviceShort(string value)
public string get_DeviceShort()
public void set_FullName(string value)
public string get_FullName()
public void set_Name(string value)
public string get_Name()
public void set_RealName(string value)
public string get_RealName()
public void set_Attributes(FileAttributes value)
public FileAttributes get_Attributes()
public void set_FileSize(long value)
public long get_FileSize()
public void set_FileType(FSEntryType value)
public FSEntryType get_FileType()
public void set_LastAccessTime(DateTime value)
public DateTime get_LastAccessTime()
public void set_IconIndex(int value)
public int get_IconIndex()
public void set_MainTopNode(FSEntry value)
public FSEntry get_MainTopNode()
public void set_Parent(string value)
public string get_Parent()
private string GetParent()
internal bool IsImageFile()
internal Image get_Image()
internal void set_Image(Image value)
internal void SetImage()
private bool ThumbnailCallback()
public void Dispose()
}
internal System.Windows.Forms.GCArcMode : Enum {
public int value__
public GCArcMode ArcChord
public GCArcMode ArcPieSlice
}
internal System.Windows.Forms.GCCapStyle : Enum {
public int value__
public GCCapStyle CapNotLast
public GCCapStyle CapButt
public GCCapStyle CapRound
public GCCapStyle CapProjecting
}
internal System.Windows.Forms.GCFillRule : Enum {
public int value__
public GCFillRule EvenOddRule
public GCFillRule WindingRule
}
internal System.Windows.Forms.GCFillStyle : Enum {
public int value__
public GCFillStyle FillSolid
public GCFillStyle FillTiled
public GCFillStyle FillStippled
public GCFillStyle FillOpaqueStppled
}
internal System.Windows.Forms.GCFunction : Enum {
public int value__
public GCFunction GCFunction
public GCFunction GCPlaneMask
public GCFunction GCForeground
public GCFunction GCBackground
public GCFunction GCLineWidth
public GCFunction GCLineStyle
public GCFunction GCCapStyle
public GCFunction GCJoinStyle
public GCFunction GCFillStyle
public GCFunction GCFillRule
public GCFunction GCTile
public GCFunction GCStipple
public GCFunction GCTileStipXOrigin
public GCFunction GCTileStipYOrigin
public GCFunction GCFont
public GCFunction GCSubwindowMode
public GCFunction GCGraphicsExposures
public GCFunction GCClipXOrigin
public GCFunction GCClipYOrigin
public GCFunction GCClipMask
public GCFunction GCDashOffset
public GCFunction GCDashList
public GCFunction GCArcMode
}
internal System.Windows.Forms.GCJoinStyle : Enum {
public int value__
public GCJoinStyle JoinMiter
public GCJoinStyle JoinRound
public GCJoinStyle JoinBevel
}
internal System.Windows.Forms.GCLineStyle : Enum {
public int value__
public GCLineStyle LineSolid
public GCLineStyle LineOnOffDash
public GCLineStyle LineDoubleDash
}
internal System.Windows.Forms.GCSubwindowMode : Enum {
public int value__
public GCSubwindowMode ClipByChildren
public GCSubwindowMode IncludeInferiors
}
public System.Windows.Forms.GetChildAtPointSkip : Enum {
public int value__
public GetChildAtPointSkip None
public GetChildAtPointSkip Invisible
public GetChildAtPointSkip Disabled
public GetChildAtPointSkip Transparent
}
public System.Windows.Forms.GiveFeedbackEventArgs : EventArgs {
internal DragDropEffects effect
internal bool use_default_cursors
public DragDropEffects Effect
public bool UseDefaultCursors
public void .ctor(DragDropEffects effect, bool useDefaultCursors)
public DragDropEffects get_Effect()
public bool get_UseDefaultCursors()
public void set_UseDefaultCursors(bool value)
}
public System.Windows.Forms.GiveFeedbackEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, GiveFeedbackEventArgs e)
public IAsyncResult BeginInvoke(object sender, GiveFeedbackEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.GnomeHandler : PlatformMimeIconHandler {
public MimeExtensionHandlerStatus Start()
private void CreateUIIcons()
private void AddGnomeIcon(string internal_mime_type, string name)
public object AddAndGetIconIndex(string filename, string mime_type)
public object AddAndGetIconIndex(string mime_type)
}
internal System.Windows.Forms.GnomeUtil : object {
private string libgdk
private string libgdk_pixbuf
private string libgtk
private string libglib
private string libgobject
private string libgnomeui
private string librsvg
private bool inited
private IntPtr default_icon_theme
private IntPtr rsvg_pixbuf_from_file_at_size(string file_name, int width, int height, IntPtr& error)
private bool gdk_pixbuf_save_to_buffer(IntPtr pixbuf, IntPtr& buffer, UIntPtr& buffer_size, string type, IntPtr& error, IntPtr option_dummy)
private void g_free(IntPtr mem)
private bool gdk_init_check(IntPtr argc, IntPtr argv)
private void g_object_unref(IntPtr nativeObject)
private string gnome_icon_lookup(IntPtr icon_theme, IntPtr thumbnail_factory, string file_uri, string custom_icon, IntPtr file_info, string mime_type, GnomeIconLookupFlags flags, IntPtr result)
private IntPtr gtk_icon_theme_get_default()
private IntPtr gtk_icon_theme_load_icon(IntPtr icon_theme, string icon_name, int size, GtkIconLookupFlags flags, IntPtr& error)
private bool gtk_icon_theme_has_icon(IntPtr icon_theme, string icon_name)
private void Init()
public Image GetIcon(string file_name, string mime_type, int size)
public Image GetIcon(string icon, int size)
public Image GdkPixbufToImage(IntPtr pixbuf)
public Image GetSVGasImage(string filename, int width, int height)
public bool HasImage(string name)
}
internal System.Windows.Forms.GrabMode : Enum {
public int value__
public GrabMode GrabModeSync
public GrabMode GrabModeAsync
}
internal System.Windows.Forms.GrabStruct : ValueType {
internal bool Confined
internal IntPtr Hwnd
internal Rectangle Area
}
internal System.Windows.Forms.Gravity : Enum {
public int value__
public Gravity ForgetGravity
public Gravity NorthWestGravity
public Gravity NorthGravity
public Gravity NorthEastGravity
public Gravity WestGravity
public Gravity CenterGravity
public Gravity EastGravity
public Gravity SouthWestGravity
public Gravity SouthGravity
public Gravity SouthEastGravity
public Gravity StaticGravity
}
public System.Windows.Forms.GridColumnStylesCollection : BaseCollection {
private ArrayList items
private DataGridTableStyle owner
private bool fire_event
private CollectionChangeEventHandler CollectionChanged
public DataGridColumnStyle Item
public DataGridColumnStyle Item
public DataGridColumnStyle Item
protected ArrayList List
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
internal bool FireEvents
internal void .ctor(DataGridTableStyle tablestyle)
public DataGridColumnStyle get_Item(string columnName)
public DataGridColumnStyle get_Item(int index)
public DataGridColumnStyle get_Item(PropertyDescriptor propertyDesciptor)
protected ArrayList get_List()
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
internal bool get_FireEvents()
internal void set_FireEvents(bool value)
public int Add(DataGridColumnStyle column)
public void AddRange(DataGridColumnStyle[] columns)
public void Clear()
public bool Contains(DataGridColumnStyle column)
public bool Contains(PropertyDescriptor propertyDescriptor)
public bool Contains(string name)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
public int IndexOf(DataGridColumnStyle element)
protected void OnCollectionChanged(CollectionChangeEventArgs e)
public void Remove(DataGridColumnStyle column)
public void RemoveAt(int index)
public void ResetPropertyDescriptors()
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
private void ConnectColumnEvents(DataGridColumnStyle col)
private void DisconnectColumnEvents(DataGridColumnStyle col)
private void ColumnAlignmentChangedEvent(object sender, EventArgs e)
private void ColumnFontChangedEvent(object sender, EventArgs e)
private void ColumnHeaderTextChanged(object sender, EventArgs e)
private void ColumnMappingNameChangedEvent(object sender, EventArgs e)
private void ColumnNullTextChangedEvent(object sender, EventArgs e)
private void ColumnPropertyDescriptorChanged(object sender, EventArgs e)
private void ColumnReadOnlyChangedEvent(object sender, EventArgs e)
private void ColumnWidthChangedEvent(object sender, EventArgs e)
private int FromColumnNameToIndex(string columnName)
}
public System.Windows.Forms.GridItem : object {
private bool expanded
private object tag
public bool Expandable
public bool Expanded
public GridItemCollection GridItems
public GridItemType GridItemType
public string Label
public GridItem Parent
public PropertyDescriptor PropertyDescriptor
public object Tag
public object Value
public bool get_Expandable()
public bool get_Expanded()
public void set_Expanded(bool value)
public GridItemCollection get_GridItems()
public GridItemType get_GridItemType()
public string get_Label()
public GridItem get_Parent()
public PropertyDescriptor get_PropertyDescriptor()
public object get_Tag()
public void set_Tag(object value)
public object get_Value()
public bool Select()
}
public System.Windows.Forms.GridItemCollection : object {
private SortedList list
public GridItemCollection Empty
public int Count
public GridItem Item
public GridItem Item
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
internal void Add(GridItem grid_item)
internal void AddRange(GridItemCollection items)
internal int IndexOf(GridItem grid_item)
public int get_Count()
public GridItem get_Item(int index)
public GridItem get_Item(string label)
public IEnumerator GetEnumerator()
private bool System.Collections.ICollection.get_IsSynchronized()
private void System.Collections.ICollection.CopyTo(Array dest, int index)
private object System.Collections.ICollection.get_SyncRoot()
internal void Clear()
}
public System.Windows.Forms.GridItemType : Enum {
public int value__
public GridItemType Property
public GridItemType Category
public GridItemType ArrayValue
public GridItemType Root
}
public System.Windows.Forms.GridTablesFactory : object {
public DataGridTableStyle[] CreateGridTables(DataGridTableStyle gridTable, object dataSource, string dataMember, BindingContext bindingManager)
}
public System.Windows.Forms.GridTableStylesCollection : BaseCollection {
private ArrayList items
private DataGrid owner
private CollectionChangeEventHandler CollectionChanged
public DataGridTableStyle Item
public DataGridTableStyle Item
protected ArrayList List
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
internal void .ctor(DataGrid grid)
public DataGridTableStyle get_Item(string tableName)
public DataGridTableStyle get_Item(int index)
protected ArrayList get_List()
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public int Add(DataGridTableStyle table)
public void AddRange(DataGridTableStyle[] tables)
public void Clear()
public bool Contains(DataGridTableStyle table)
public bool Contains(string name)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
protected void OnCollectionChanged(CollectionChangeEventArgs e)
public void Remove(DataGridTableStyle table)
private void MappingNameChanged(object sender, EventArgs args)
public void RemoveAt(int index)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
private int AddInternal(DataGridTableStyle table)
private int FromTableNameToIndex(string tableName)
}
public System.Windows.Forms.GroupBox : Control {
private FlatStyle flat_style
private Rectangle display_rectangle
public bool AllowDrop
public bool AutoSize
public AutoSizeMode AutoSizeMode
protected CreateParams CreateParams
protected Size DefaultSize
public Rectangle DisplayRectangle
public FlatStyle FlatStyle
public bool TabStop
public string Text
public bool UseCompatibleTextRendering
protected Padding DefaultPadding
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_MouseDown(MouseEventHandler value)
public void remove_MouseDown(MouseEventHandler value)
public void add_MouseEnter(EventHandler value)
public void remove_MouseEnter(EventHandler value)
public void add_MouseLeave(EventHandler value)
public void remove_MouseLeave(EventHandler value)
public void add_MouseMove(MouseEventHandler value)
public void remove_MouseMove(MouseEventHandler value)
public void add_MouseUp(MouseEventHandler value)
public void remove_MouseUp(MouseEventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public AutoSizeMode get_AutoSizeMode()
public void set_AutoSizeMode(AutoSizeMode value)
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
public Rectangle get_DisplayRectangle()
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
protected AccessibleObject CreateAccessibilityInstance()
protected void OnFontChanged(EventArgs e)
protected void OnPaint(PaintEventArgs e)
protected bool ProcessMnemonic(char charCode)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
public string ToString()
protected void WndProc(Message& m)
public bool get_UseCompatibleTextRendering()
public void set_UseCompatibleTextRendering(bool value)
protected Padding get_DefaultPadding()
internal Size GetPreferredSizeCore(Size proposedSize)
}
public System.Windows.Forms.GroupBoxRenderer : object {
private bool always_use_visual_styles
public bool RenderMatchingApplicationState
public void DrawGroupBox(Graphics g, Rectangle bounds, GroupBoxState state)
public void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, GroupBoxState state)
public void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, Color textColor, GroupBoxState state)
public void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, TextFormatFlags flags, GroupBoxState state)
public void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, Color textColor, TextFormatFlags flags, GroupBoxState state)
public bool IsBackgroundPartiallyTransparent(GroupBoxState state)
public void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl)
public bool get_RenderMatchingApplicationState()
public void set_RenderMatchingApplicationState(bool value)
}
internal System.Windows.Forms.GXFunction : Enum {
public int value__
public GXFunction GXclear
public GXFunction GXand
public GXFunction GXandReverse
public GXFunction GXcopy
public GXFunction GXandInverted
public GXFunction GXnoop
public GXFunction GXxor
public GXFunction GXor
public GXFunction GXnor
public GXFunction GXequiv
public GXFunction GXinvert
public GXFunction GXorReverse
public GXFunction GXcopyInverted
public GXFunction GXorInverted
public GXFunction GXnand
public GXFunction GXset
}
public System.Windows.Forms.HandledMouseEventArgs : MouseEventArgs {
private bool handled
public bool Handled
public void .ctor(MouseButtons button, int clicks, int x, int y, int delta)
public void .ctor(MouseButtons button, int clicks, int x, int y, int delta, bool defaultHandledValue)
public bool get_Handled()
public void set_Handled(bool value)
}
public System.Windows.Forms.Help : object {
public void ShowHelp(Control parent, string url)
public void ShowHelp(Control parent, string url, HelpNavigator navigator)
public void ShowHelp(Control parent, string url, HelpNavigator command, object parameter)
public void ShowHelp(Control parent, string url, string keyword)
public void ShowHelpIndex(Control parent, string url)
public void ShowPopup(Control parent, string caption, Point location)
private void ShowHelpTopic(string helpFile, string helpTopic)
private void RunNonblockingProcess(string command, string arguments)
}
public System.Windows.Forms.HelpEventArgs : EventArgs {
private Point mouse_position
private bool event_handled
public bool Handled
public Point MousePos
public void .ctor(Point mousePos)
public bool get_Handled()
public void set_Handled(bool value)
public Point get_MousePos()
}
public System.Windows.Forms.HelpEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, HelpEventArgs hlpevent)
public IAsyncResult BeginInvoke(object sender, HelpEventArgs hlpevent, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.HELPINFO : ValueType {
internal UInt32 cbSize
internal int iContextType
internal int iCtrlId
internal IntPtr hItemHandle
internal UInt32 dwContextId
internal POINT MousePos
}
public System.Windows.Forms.HelpNavigator : Enum {
public int value__
public HelpNavigator Topic
public HelpNavigator TableOfContents
public HelpNavigator Index
public HelpNavigator Find
public HelpNavigator AssociateIndex
public HelpNavigator KeywordIndex
public HelpNavigator TopicId
}
public System.Windows.Forms.HelpProvider : Component {
private string helpnamespace
private Hashtable controls
private ToolTipWindow tooltip
private EventHandler HideToolTipHandler
private KeyPressEventHandler HideToolTipKeyHandler
private MouseEventHandler HideToolTipMouseHandler
private HelpEventHandler HelpRequestHandler
private object tag
private Control uia_control
private ControlEventHandler UIAHelpRequested
private ControlEventHandler UIAHelpUnRequested
public string HelpNamespace
public object Tag
private Control UIAControl
internal Rectangle UIAToolTipRectangle
public string get_HelpNamespace()
public void set_HelpNamespace(string value)
public object get_Tag()
public void set_Tag(object value)
public bool CanExtend(object target)
public string GetHelpKeyword(Control ctl)
public HelpNavigator GetHelpNavigator(Control ctl)
public string GetHelpString(Control ctl)
public bool GetShowHelp(Control ctl)
public void ResetShowHelp(Control ctl)
public void SetHelpKeyword(Control ctl, string keyword)
public void SetHelpNavigator(Control ctl, HelpNavigator navigator)
public void SetHelpString(Control ctl, string helpString)
public void SetShowHelp(Control ctl, bool value)
public string ToString()
private HelpProperty GetHelpProperty(Control control)
private void HideToolTip(object Sender, EventArgs e)
private void HideToolTipKey(object Sender, KeyPressEventArgs e)
private void HideToolTipMouse(object Sender, MouseEventArgs e)
private void HelpRequested(object sender, HelpEventArgs e)
private Control get_UIAControl()
private void set_UIAControl(Control value)
internal void add_UIAHelpRequested(ControlEventHandler value)
internal void remove_UIAHelpRequested(ControlEventHandler value)
internal void add_UIAHelpUnRequested(ControlEventHandler value)
internal void remove_UIAHelpUnRequested(ControlEventHandler value)
internal Rectangle get_UIAToolTipRectangle()
internal void OnUIAHelpRequested(HelpProvider provider, ControlEventArgs args)
internal void OnUIAHelpUnRequested(HelpProvider provider, ControlEventArgs args)
private void <.ctor>b__9_0(object sender, EventArgs args)
}
internal System.Windows.Forms.HitTest : Enum {
public int value__
public HitTest HTERROR
public HitTest HTTRANSPARENT
public HitTest HTNOWHERE
public HitTest HTCLIENT
public HitTest HTCAPTION
public HitTest HTSYSMENU
public HitTest HTGROWBOX
public HitTest HTSIZE
public HitTest HTMENU
public HitTest HTHSCROLL
public HitTest HTVSCROLL
public HitTest HTMINBUTTON
public HitTest HTMAXBUTTON
public HitTest HTLEFT
public HitTest HTRIGHT
public HitTest HTTOP
public HitTest HTTOPLEFT
public HitTest HTTOPRIGHT
public HitTest HTBOTTOM
public HitTest HTBOTTOMLEFT
public HitTest HTBOTTOMRIGHT
public HitTest HTBORDER
public HitTest HTREDUCE
public HitTest HTZOOM
public HitTest HTSIZEFIRST
public HitTest HTSIZELAST
public HitTest HTOBJECT
public HitTest HTCLOSE
public HitTest HTHELP
}
public System.Windows.Forms.HorizontalAlignment : Enum {
public int value__
public HorizontalAlignment Left
public HorizontalAlignment Right
public HorizontalAlignment Center
}
internal System.Windows.Forms.HoverStruct : ValueType {
internal Timer Timer
internal IntPtr Window
internal int X
internal int Y
internal Size Size
internal int Interval
internal IntPtr Atom
}
public System.Windows.Forms.HScrollBar : ScrollBar {
protected Size DefaultSize
protected CreateParams CreateParams
protected Size get_DefaultSize()
protected CreateParams get_CreateParams()
}
public System.Windows.Forms.HScrollProperties : ScrollProperties {
public void .ctor(ScrollableControl container)
}
public System.Windows.Forms.HtmlDocument : object {
private EventHandlerList events
private IWebBrowser webHost
private IDocument document
private WebBrowser owner
private object ClickEvent
private object ContextMenuShowingEvent
private object FocusingEvent
private object LosingFocusEvent
private object MouseDownEvent
private object MouseLeaveEvent
private object MouseMoveEvent
private object MouseOverEvent
private object MouseUpEvent
private object StopEvent
internal EventHandlerList Events
public HtmlElement ActiveElement
public Color ActiveLinkColor
public HtmlElementCollection All
public Color BackColor
public HtmlElement Body
public string Cookie
public string DefaultEncoding
public string Domain
public object DomDocument
public string Encoding
public bool Focused
public Color ForeColor
public HtmlElementCollection Forms
public HtmlElementCollection Images
public Color LinkColor
public HtmlElementCollection Links
public bool RightToLeft
public string Title
public Uri Url
public Color VisitedLinkColor
public HtmlWindow Window
internal string DocType
internal void .ctor(WebBrowser owner, IWebBrowser webHost)
internal void .ctor(WebBrowser owner, IWebBrowser webHost, IDocument doc)
internal EventHandlerList get_Events()
public void AttachEventHandler(string eventName, EventHandler eventHandler)
public HtmlElement CreateElement(string elementTag)
public void DetachEventHandler(string eventName, EventHandler eventHandler)
public bool Equals(object obj)
public void ExecCommand(string command, bool showUI, object value)
public void Focus()
public HtmlElement GetElementById(string id)
public HtmlElement GetElementFromPoint(Point point)
public HtmlElementCollection GetElementsByTagName(string tagName)
public int GetHashCode()
public object InvokeScript(string scriptName)
public object InvokeScript(string scriptName, Object[] args)
public bool op_Equality(HtmlDocument left, HtmlDocument right)
public bool op_Inequality(HtmlDocument left, HtmlDocument right)
public HtmlDocument OpenNew(bool replaceInHistory)
public void Write(string text)
public HtmlElement get_ActiveElement()
public Color get_ActiveLinkColor()
public void set_ActiveLinkColor(Color value)
public HtmlElementCollection get_All()
public Color get_BackColor()
public void set_BackColor(Color value)
public HtmlElement get_Body()
public string get_Cookie()
public void set_Cookie(string value)
public string get_DefaultEncoding()
public string get_Domain()
public void set_Domain(string value)
public object get_DomDocument()
public string get_Encoding()
public void set_Encoding(string value)
public bool get_Focused()
public Color get_ForeColor()
public void set_ForeColor(Color value)
public HtmlElementCollection get_Forms()
public HtmlElementCollection get_Images()
public Color get_LinkColor()
public void set_LinkColor(Color value)
public HtmlElementCollection get_Links()
public bool get_RightToLeft()
public void set_RightToLeft(bool value)
public string get_Title()
public void set_Title(string value)
public Uri get_Url()
public Color get_VisitedLinkColor()
public void set_VisitedLinkColor(Color value)
public HtmlWindow get_Window()
public void add_Click(HtmlElementEventHandler value)
public void remove_Click(HtmlElementEventHandler value)
private void OnClick(object sender, EventArgs e)
public void add_ContextMenuShowing(HtmlElementEventHandler value)
public void remove_ContextMenuShowing(HtmlElementEventHandler value)
private void OnContextMenuShowing(object sender, ContextMenuEventArgs e)
public void add_Focusing(HtmlElementEventHandler value)
public void remove_Focusing(HtmlElementEventHandler value)
private void OnFocusing(object sender, EventArgs e)
public void add_LosingFocus(HtmlElementEventHandler value)
public void remove_LosingFocus(HtmlElementEventHandler value)
private void OnLosingFocus(object sender, EventArgs e)
public void add_MouseDown(HtmlElementEventHandler value)
public void remove_MouseDown(HtmlElementEventHandler value)
private void OnMouseDown(object sender, EventArgs e)
public void add_MouseLeave(HtmlElementEventHandler value)
public void remove_MouseLeave(HtmlElementEventHandler value)
private void OnMouseLeave(object sender, EventArgs e)
public void add_MouseMove(HtmlElementEventHandler value)
public void remove_MouseMove(HtmlElementEventHandler value)
private void OnMouseMove(object sender, EventArgs e)
public void add_MouseOver(HtmlElementEventHandler value)
public void remove_MouseOver(HtmlElementEventHandler value)
private void OnMouseOver(object sender, EventArgs e)
public void add_MouseUp(HtmlElementEventHandler value)
public void remove_MouseUp(HtmlElementEventHandler value)
private void OnMouseUp(object sender, EventArgs e)
public void add_Stop(HtmlElementEventHandler value)
public void remove_Stop(HtmlElementEventHandler value)
private void OnStop(object sender, EventArgs e)
private Color ParseColor(string color)
internal string get_DocType()
}
public System.Windows.Forms.HtmlElement : object {
private EventHandlerList events
private IWebBrowser webHost
internal IElement element
private WebBrowser owner
private object ClickEvent
private object DoubleClickEvent
private object MouseDownEvent
private object MouseUpEvent
private object MouseMoveEvent
private object MouseOverEvent
private object MouseEnterEvent
private object MouseLeaveEvent
private object KeyDownEvent
private object KeyPressEvent
private object KeyUpEvent
private object DragEvent
private object DragEndEvent
private object DragLeaveEvent
private object DragOverEvent
private object FocusingEvent
private object GotFocusEvent
private object LosingFocusEvent
private object LostFocusEvent
internal EventHandlerList Events
public HtmlElementCollection All
public bool CanHaveChildren
public HtmlElementCollection Children
public Rectangle ClientRectangle
public Rectangle OffsetRectangle
public Rectangle ScrollRectangle
public int ScrollLeft
public int ScrollTop
public HtmlElement OffsetParent
public HtmlDocument Document
public bool Enabled
public string InnerHtml
public string InnerText
public string Id
public string Name
public HtmlElement FirstChild
public HtmlElement NextSibling
public HtmlElement Parent
public string TagName
public short TabIndex
public object DomElement
public string OuterHtml
public string OuterText
public string Style
internal void .ctor(WebBrowser owner, IWebBrowser webHost, IElement element)
internal EventHandlerList get_Events()
public HtmlElementCollection get_All()
public bool get_CanHaveChildren()
public HtmlElementCollection get_Children()
public Rectangle get_ClientRectangle()
public Rectangle get_OffsetRectangle()
public Rectangle get_ScrollRectangle()
public int get_ScrollLeft()
public void set_ScrollLeft(int value)
public int get_ScrollTop()
public void set_ScrollTop(int value)
public HtmlElement get_OffsetParent()
public HtmlDocument get_Document()
public bool get_Enabled()
public void set_Enabled(bool value)
public string get_InnerHtml()
public void set_InnerHtml(string value)
public string get_InnerText()
public void set_InnerText(string value)
public string get_Id()
public void set_Id(string value)
public string get_Name()
public void set_Name(string value)
public HtmlElement get_FirstChild()
public HtmlElement get_NextSibling()
public HtmlElement get_Parent()
public string get_TagName()
public short get_TabIndex()
public void set_TabIndex(short value)
public object get_DomElement()
public string get_OuterHtml()
public void set_OuterHtml(string value)
public string get_OuterText()
public void set_OuterText(string value)
public string get_Style()
public void set_Style(string value)
public HtmlElement AppendChild(HtmlElement newElement)
public void AttachEventHandler(string eventName, EventHandler eventHandler)
public void DetachEventHandler(string eventName, EventHandler eventHandler)
public void Focus()
public string GetAttribute(string attributeName)
public HtmlElementCollection GetElementsByTagName(string tagName)
public int GetHashCode()
internal bool HasAttribute(string name)
public HtmlElement InsertAdjacentElement(HtmlElementInsertionOrientation orient, HtmlElement newElement)
public object InvokeMember(string methodName)
public object InvokeMember(string methodName, Object[] parameter)
public void RaiseEvent(string eventName)
public void RemoveFocus()
public void ScrollIntoView(bool alignWithTop)
public void SetAttribute(string attributeName, string value)
public bool Equals(object obj)
public bool op_Equality(HtmlElement left, HtmlElement right)
public bool op_Inequality(HtmlElement left, HtmlElement right)
private void OnClick(object sender, EventArgs e)
public void add_Click(HtmlElementEventHandler value)
public void remove_Click(HtmlElementEventHandler value)
private void OnDoubleClick(object sender, EventArgs e)
public void add_DoubleClick(HtmlElementEventHandler value)
public void remove_DoubleClick(HtmlElementEventHandler value)
private void OnMouseDown(object sender, EventArgs e)
public void add_MouseDown(HtmlElementEventHandler value)
public void remove_MouseDown(HtmlElementEventHandler value)
private void OnMouseUp(object sender, EventArgs e)
public void add_MouseUp(HtmlElementEventHandler value)
public void remove_MouseUp(HtmlElementEventHandler value)
private void OnMouseMove(object sender, EventArgs e)
public void add_MouseMove(HtmlElementEventHandler value)
public void remove_MouseMove(HtmlElementEventHandler value)
private void OnMouseOver(object sender, EventArgs e)
public void add_MouseOver(HtmlElementEventHandler value)
public void remove_MouseOver(HtmlElementEventHandler value)
private void OnMouseEnter(object sender, EventArgs e)
public void add_MouseEnter(HtmlElementEventHandler value)
public void remove_MouseEnter(HtmlElementEventHandler value)
private void OnMouseLeave(object sender, EventArgs e)
public void add_MouseLeave(HtmlElementEventHandler value)
public void remove_MouseLeave(HtmlElementEventHandler value)
private void OnKeyDown(object sender, EventArgs e)
public void add_KeyDown(HtmlElementEventHandler value)
public void remove_KeyDown(HtmlElementEventHandler value)
private void OnKeyPress(object sender, EventArgs e)
public void add_KeyPress(HtmlElementEventHandler value)
public void remove_KeyPress(HtmlElementEventHandler value)
private void OnKeyUp(object sender, EventArgs e)
public void add_KeyUp(HtmlElementEventHandler value)
public void remove_KeyUp(HtmlElementEventHandler value)
public void add_Drag(HtmlElementEventHandler value)
public void remove_Drag(HtmlElementEventHandler value)
private void OnDrag(object sender, EventArgs e)
public void add_DragEnd(HtmlElementEventHandler value)
public void remove_DragEnd(HtmlElementEventHandler value)
private void OnDragEnd(object sender, EventArgs e)
public void add_DragLeave(HtmlElementEventHandler value)
public void remove_DragLeave(HtmlElementEventHandler value)
private void OnDragLeave(object sender, EventArgs e)
public void add_DragOver(HtmlElementEventHandler value)
public void remove_DragOver(HtmlElementEventHandler value)
private void OnDragOver(object sender, EventArgs e)
public void add_Focusing(HtmlElementEventHandler value)
public void remove_Focusing(HtmlElementEventHandler value)
private void OnFocusing(object sender, EventArgs e)
public void add_GotFocus(HtmlElementEventHandler value)
public void remove_GotFocus(HtmlElementEventHandler value)
private void OnGotFocus(object sender, EventArgs e)
public void add_LosingFocus(HtmlElementEventHandler value)
public void remove_LosingFocus(HtmlElementEventHandler value)
private void OnLosingFocus(object sender, EventArgs e)
public void add_LostFocus(HtmlElementEventHandler value)
public void remove_LostFocus(HtmlElementEventHandler value)
private void OnLostFocus(object sender, EventArgs e)
}
public System.Windows.Forms.HtmlElementCollection : object {
private List`1<HtmlElement> elements
private IWebBrowser webHost
private WebBrowser owner
public int Count
public HtmlElement Item
public HtmlElement Item
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
internal void .ctor(WebBrowser owner, IWebBrowser webHost, IElementCollection col)
private void .ctor(WebBrowser owner, IWebBrowser webHost, List`1<HtmlElement> elems)
public int get_Count()
public HtmlElement get_Item(string elementId)
public HtmlElement get_Item(int index)
public HtmlElementCollection GetElementsByName(string name)
public IEnumerator GetEnumerator()
private void System.Collections.ICollection.CopyTo(Array dest, int index)
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
}
public System.Windows.Forms.HtmlElementErrorEventArgs : EventArgs {
private string description
private bool handled
private int line_number
private Uri url
public string Description
public bool Handled
public int LineNumber
public Uri Url
internal void .ctor(string description, int lineNumber, Uri url)
public string get_Description()
public bool get_Handled()
public void set_Handled(bool value)
public int get_LineNumber()
public Uri get_Url()
}
public System.Windows.Forms.HtmlElementErrorEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, HtmlElementErrorEventArgs e)
public IAsyncResult BeginInvoke(object sender, HtmlElementErrorEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.HtmlElementEventArgs : EventArgs {
private bool alt_key_pressed
private bool bubble_event
private Point client_mouse_position
private bool ctrl_key_pressed
private string event_type
private HtmlElement from_element
private int key_pressed_code
private MouseButtons mouse_buttons_pressed
private Point mouse_position
private Point offset_mouse_position
private bool return_value
private bool shift_key_pressed
private HtmlElement to_element
public bool AltKeyPressed
public bool BubbleEvent
public Point ClientMousePosition
public bool CtrlKeyPressed
public string EventType
public HtmlElement FromElement
public int KeyPressedCode
public MouseButtons MouseButtonsPressed
public Point MousePosition
public Point OffsetMousePosition
public bool ReturnValue
public bool ShiftKeyPressed
public HtmlElement ToElement
public bool get_AltKeyPressed()
public bool get_BubbleEvent()
public void set_BubbleEvent(bool value)
public Point get_ClientMousePosition()
public bool get_CtrlKeyPressed()
public string get_EventType()
public HtmlElement get_FromElement()
public int get_KeyPressedCode()
public MouseButtons get_MouseButtonsPressed()
public Point get_MousePosition()
public Point get_OffsetMousePosition()
public bool get_ReturnValue()
public void set_ReturnValue(bool value)
public bool get_ShiftKeyPressed()
public HtmlElement get_ToElement()
}
public System.Windows.Forms.HtmlElementEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, HtmlElementEventArgs e)
public IAsyncResult BeginInvoke(object sender, HtmlElementEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.HtmlElementInsertionOrientation : Enum {
public int value__
public HtmlElementInsertionOrientation BeforeBegin
public HtmlElementInsertionOrientation AfterBegin
public HtmlElementInsertionOrientation BeforeEnd
public HtmlElementInsertionOrientation AfterEnd
}
public System.Windows.Forms.HtmlHistory : object {
private bool disposed
private IWebBrowser webHost
private IHistory history
public int Length
public object DomHistory
internal void .ctor(IWebBrowser webHost, IHistory history)
private void Dispose(bool disposing)
public void Dispose()
public int get_Length()
public object get_DomHistory()
public void Back(int numberBack)
public void Forward(int numberForward)
public void Go(int relativePosition)
public void Go(string urlString)
public void Go(Uri url)
}
public System.Windows.Forms.HtmlWindow : object {
private EventHandlerList event_handlers
private IWindow window
private IWebBrowser webHost
private WebBrowser owner
private object ErrorEvent
private object GotFocusEvent
private object LostFocusEvent
private object LoadEvent
private object UnloadEvent
private object ScrollEvent
private object ResizeEvent
private EventHandlerList Events
public HtmlDocument Document
public object DomWindow
public HtmlWindowCollection Frames
public HtmlHistory History
public bool IsClosed
public string Name
public HtmlWindow Opener
public HtmlWindow Parent
public Point Position
public Size Size
public string StatusBarText
public HtmlElement WindowFrameElement
public Uri Url
internal void .ctor(WebBrowser owner, IWebBrowser webHost, IWindow iWindow)
private EventHandlerList get_Events()
public HtmlDocument get_Document()
public object get_DomWindow()
public HtmlWindowCollection get_Frames()
public HtmlHistory get_History()
public bool get_IsClosed()
public string get_Name()
public void set_Name(string value)
public HtmlWindow get_Opener()
public HtmlWindow get_Parent()
public Point get_Position()
public Size get_Size()
public void set_Size(Size value)
public string get_StatusBarText()
public void set_StatusBarText(string value)
public HtmlElement get_WindowFrameElement()
public Uri get_Url()
public void Alert(string message)
public bool Confirm(string message)
public string Prompt(string message, string defaultInputValue)
public void Navigate(string urlString)
public void Navigate(Uri url)
public void ScrollTo(Point point)
public void ScrollTo(int x, int y)
public HtmlWindow Open(Uri url, string target, string windowOptions, bool replaceEntry)
public HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry)
public HtmlWindow OpenNew(string urlString, string windowOptions)
public HtmlWindow OpenNew(Uri url, string windowOptions)
public void AttachEventHandler(string eventName, EventHandler eventHandler)
public void Close()
public void DetachEventHandler(string eventName, EventHandler eventHandler)
public void Focus()
public void MoveTo(Point point)
public void MoveTo(int x, int y)
public void RemoveFocus()
public void ResizeTo(Size size)
public void ResizeTo(int width, int height)
public void add_Error(HtmlElementErrorEventHandler value)
public void remove_Error(HtmlElementErrorEventHandler value)
internal void OnError(object sender, EventArgs ev)
public void add_GotFocus(HtmlElementEventHandler value)
public void remove_GotFocus(HtmlElementEventHandler value)
internal void OnGotFocus(object sender, EventArgs ev)
public void add_LostFocus(HtmlElementEventHandler value)
public void remove_LostFocus(HtmlElementEventHandler value)
internal void OnLostFocus(object sender, EventArgs ev)
public void add_Load(HtmlElementEventHandler value)
public void remove_Load(HtmlElementEventHandler value)
internal void OnLoad(object sender, EventArgs ev)
public void add_Unload(HtmlElementEventHandler value)
public void remove_Unload(HtmlElementEventHandler value)
internal void OnUnload(object sender, EventArgs ev)
public void add_Scroll(HtmlElementEventHandler value)
public void remove_Scroll(HtmlElementEventHandler value)
internal void OnScroll(object sender, EventArgs ev)
public void add_Resize(HtmlElementEventHandler value)
public void remove_Resize(HtmlElementEventHandler value)
internal void OnResize(object sender, EventArgs ev)
public int GetHashCode()
public bool Equals(object obj)
public bool op_Equality(HtmlWindow left, HtmlWindow right)
public bool op_Inequality(HtmlWindow left, HtmlWindow right)
}
public System.Windows.Forms.HtmlWindowCollection : object {
private List`1<HtmlWindow> windows
public int Count
public HtmlWindow Item
public HtmlWindow Item
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
internal void .ctor(WebBrowser owner, IWebBrowser webHost, IWindowCollection col)
public int get_Count()
public HtmlWindow get_Item(string windowId)
public HtmlWindow get_Item(int index)
public IEnumerator GetEnumerator()
private void System.Collections.ICollection.CopyTo(Array dest, int index)
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
}
internal System.Windows.Forms.Hwnd : object {
private Hashtable windows
private IntPtr handle
internal IntPtr client_window
internal IntPtr whole_window
internal IntPtr cursor
internal Menu menu
internal TitleStyle title_style
internal FormBorderStyle border_style
internal bool border_static
internal int x
internal int y
internal int width
internal int height
internal bool allow_drop
internal Hwnd parent
internal bool visible
internal bool mapped
internal UInt32 opacity
internal bool enabled
internal bool zero_sized
internal ArrayList invalid_list
internal Rectangle nc_invalid
internal bool expose_pending
internal bool nc_expose_pending
internal bool configure_pending
internal bool resizing_or_moving
internal bool reparented
internal Stack drawing_stack
internal object user_data
internal Rectangle client_rectangle
internal ArrayList marshal_free_list
internal int caption_height
internal int tool_caption_height
internal bool whacky_wm
internal bool fixed_size
internal bool zombie
internal bool topmost
internal Region user_clip
internal XEventQueue queue
internal WindowExStyles initial_ex_style
internal WindowStyles initial_style
internal FormWindowState cached_window_state
internal Point previous_child_startup_location
internal Point previous_main_startup_location
internal ArrayList children
private Bitmap bmp
private Graphics bmp_g
internal object configure_lock
internal object expose_lock
public Graphics GraphicsContext
public FormBorderStyle BorderStyle
public Rectangle ClientRect
public IntPtr Cursor
public IntPtr ClientWindow
public Region UserClip
public Rectangle DefaultClientRect
public bool ExposePending
public IntPtr Handle
public int Height
public Menu Menu
public bool Reparented
public UInt32 Opacity
public XEventQueue Queue
public bool Enabled
public IntPtr EnabledHwnd
public Point MenuOrigin
public Rectangle Invalid
public Rectangle[] ClipRectangles
public Rectangle NCInvalid
public bool NCExposePending
public Hwnd Parent
public bool Mapped
public int CaptionHeight
public int ToolCaptionHeight
public TitleStyle TitleStyle
public object UserData
public IntPtr WholeWindow
public int Width
public bool Visible
public int X
public int Y
public void Dispose()
public Hwnd ObjectFromWindow(IntPtr window)
public Hwnd ObjectFromHandle(IntPtr handle)
public IntPtr HandleFromObject(Hwnd obj)
public Hwnd GetObjectFromWindow(IntPtr window)
public IntPtr GetHandleFromWindow(IntPtr window)
public Borders GetBorderWidth(CreateParams cp)
public Rectangle GetWindowRectangle(CreateParams cp, Menu menu)
public Rectangle GetWindowRectangle(CreateParams cp, Menu menu, Rectangle client_rect)
public Rectangle GetClientRectangle(int width, int height)
public ArrayList GetClippingRectangles()
public Borders GetBorders(CreateParams cp, Menu menu)
public Rectangle GetClientRectangle(CreateParams cp, Menu menu, int width, int height)
public Graphics get_GraphicsContext()
public FormBorderStyle get_BorderStyle()
public void set_BorderStyle(FormBorderStyle value)
public Rectangle get_ClientRect()
public void set_ClientRect(Rectangle value)
public IntPtr get_Cursor()
public void set_Cursor(IntPtr value)
public IntPtr get_ClientWindow()
public void set_ClientWindow(IntPtr value)
public Region get_UserClip()
public void set_UserClip(Region value)
public Rectangle get_DefaultClientRect()
public bool get_ExposePending()
public IntPtr get_Handle()
public int get_Height()
public void set_Height(int value)
public Menu get_Menu()
public void set_Menu(Menu value)
public bool get_Reparented()
public void set_Reparented(bool value)
public UInt32 get_Opacity()
public void set_Opacity(UInt32 value)
public XEventQueue get_Queue()
public void set_Queue(XEventQueue value)
public bool get_Enabled()
public void set_Enabled(bool value)
public IntPtr get_EnabledHwnd()
public Point get_MenuOrigin()
public Rectangle get_Invalid()
public Rectangle[] get_ClipRectangles()
public Rectangle get_NCInvalid()
public void set_NCInvalid(Rectangle value)
public bool get_NCExposePending()
public Hwnd get_Parent()
public void set_Parent(Hwnd value)
public bool get_Mapped()
public void set_Mapped(bool value)
public int get_CaptionHeight()
public void set_CaptionHeight(int value)
public int get_ToolCaptionHeight()
public void set_ToolCaptionHeight(int value)
public TitleStyle get_TitleStyle()
public void set_TitleStyle(TitleStyle value)
public object get_UserData()
public void set_UserData(object value)
public IntPtr get_WholeWindow()
public void set_WholeWindow(IntPtr value)
public int get_Width()
public void set_Width(int value)
public bool get_Visible()
public void set_Visible(bool value)
public int get_X()
public void set_X(int value)
public int get_Y()
public void set_Y(int value)
public void AddInvalidArea(int x, int y, int width, int height)
public void AddInvalidArea(Rectangle rect)
public void ClearInvalidArea()
public void AddNcInvalidArea(int x, int y, int width, int height)
public void AddNcInvalidArea(Rectangle rect)
public void ClearNcInvalidArea()
public string ToString()
public Point GetNextStackedFormLocation(CreateParams cp, Hwnd parent_hwnd)
}
internal System.Windows.Forms.HwndDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Rectangle[] Invoke(IntPtr handle)
public IAsyncResult BeginInvoke(IntPtr handle, AsyncCallback callback, object object)
public Rectangle[] EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.IBindableComponent {
public BindingContext BindingContext
public ControlBindingsCollection DataBindings
public BindingContext get_BindingContext()
public void set_BindingContext(BindingContext value)
public ControlBindingsCollection get_DataBindings()
}
internal System.Windows.Forms.IBounds {
public Rectangle Bounds
public Rectangle get_Bounds()
}
public System.Windows.Forms.IButtonControl {
public DialogResult DialogResult
public DialogResult get_DialogResult()
public void set_DialogResult(DialogResult value)
public void NotifyDefault(bool value)
public void PerformClick()
}
public System.Windows.Forms.ICommandExecutor {
public void Execute()
}
public System.Windows.Forms.IComponentEditorPageSite {
public Control GetControl()
public void SetDirty()
}
public System.Windows.Forms.IContainerControl {
public Control ActiveControl
public Control get_ActiveControl()
public void set_ActiveControl(Control value)
public bool ActivateControl(Control active)
}
public System.Windows.Forms.ICurrencyManagerProvider {
public CurrencyManager CurrencyManager
public CurrencyManager get_CurrencyManager()
public CurrencyManager GetRelatedCurrencyManager(string dataMember)
}
public System.Windows.Forms.IDataGridColumnStyleEditingNotificationService {
public void ColumnStartedEditing(Control editingControl)
}
public System.Windows.Forms.IDataGridEditingService {
public bool BeginEdit(DataGridColumnStyle gridColumn, int rowNumber)
public bool EndEdit(DataGridColumnStyle gridColumn, int rowNumber, bool shouldAbort)
}
public System.Windows.Forms.IDataGridViewEditingCell {
public object EditingCellFormattedValue
public bool EditingCellValueChanged
public object get_EditingCellFormattedValue()
public void set_EditingCellFormattedValue(object value)
public bool get_EditingCellValueChanged()
public void set_EditingCellValueChanged(bool value)
public object GetEditingCellFormattedValue(DataGridViewDataErrorContexts context)
public void PrepareEditingCellForEdit(bool selectAll)
}
public System.Windows.Forms.IDataGridViewEditingControl {
public DataGridView EditingControlDataGridView
public object EditingControlFormattedValue
public int EditingControlRowIndex
public bool EditingControlValueChanged
public Cursor EditingPanelCursor
public bool RepositionEditingControlOnValueChange
public DataGridView get_EditingControlDataGridView()
public void set_EditingControlDataGridView(DataGridView value)
public object get_EditingControlFormattedValue()
public void set_EditingControlFormattedValue(object value)
public int get_EditingControlRowIndex()
public void set_EditingControlRowIndex(int value)
public bool get_EditingControlValueChanged()
public void set_EditingControlValueChanged(bool value)
public Cursor get_EditingPanelCursor()
public bool get_RepositionEditingControlOnValueChange()
public void ApplyCellStyleToEditingControl(DataGridViewCellStyle dataGridViewCellStyle)
public bool EditingControlWantsInputKey(Keys keyData, bool dataGridViewWantsInputKey)
public object GetEditingControlFormattedValue(DataGridViewDataErrorContexts context)
public void PrepareEditingControlForEdit(bool selectAll)
}
public System.Windows.Forms.IDataObject {
public object GetData(string format)
public object GetData(string format, bool autoConvert)
public object GetData(Type format)
public bool GetDataPresent(string format)
public bool GetDataPresent(string format, bool autoConvert)
public bool GetDataPresent(Type format)
public String[] GetFormats()
public String[] GetFormats(bool autoConvert)
public void SetData(object data)
public void SetData(string format, bool autoConvert, object data)
public void SetData(string format, object data)
public void SetData(Type format, object data)
}
public System.Windows.Forms.IDropTarget {
public void OnDragDrop(DragEventArgs e)
public void OnDragEnter(DragEventArgs e)
public void OnDragLeave(EventArgs e)
public void OnDragOver(DragEventArgs e)
}
public System.Windows.Forms.IFeatureSupport {
public Version GetVersionPresent(object feature)
public bool IsPresent(object feature)
public bool IsPresent(object feature, Version minimumVersion)
}
public System.Windows.Forms.IFileReaderService {
public Stream OpenFileFromSource(string relativePath)
}
internal System.Windows.Forms.IKeyFilter {
public bool PreFilterKey(KeyFilterData data)
}
public System.Windows.Forms.ImageIndexConverter : Int32Converter {
protected bool IncludeNoneAsStandardValue
protected bool get_IncludeNoneAsStandardValue()
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Windows.Forms.ImageKeyConverter : StringConverter {
protected bool IncludeNoneAsStandardValue
protected bool get_IncludeNoneAsStandardValue()
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Windows.Forms.ImageLayout : Enum {
public int value__
public ImageLayout None
public ImageLayout Tile
public ImageLayout Center
public ImageLayout Stretch
public ImageLayout Zoom
}
public System.Windows.Forms.ImageList : Component {
private ColorDepth DefaultColorDepth
private Size DefaultImageSize
private Color DefaultTransparentColor
private object tag
private ImageCollection images
private object RecreateHandleEvent
public ColorDepth ColorDepth
public IntPtr Handle
public bool HandleCreated
public ImageCollection Images
public Size ImageSize
public ImageListStreamer ImageStream
public object Tag
public Color TransparentColor
public void .ctor(IContainer container)
private void OnRecreateHandle()
internal bool ShouldSerializeTransparentColor()
internal bool ShouldSerializeColorDepth()
internal bool ShouldSerializeImageSize()
internal void ResetColorDepth()
internal void ResetImageSize()
internal void ResetTransparentColor()
public ColorDepth get_ColorDepth()
public void set_ColorDepth(ColorDepth value)
public IntPtr get_Handle()
public bool get_HandleCreated()
public ImageCollection get_Images()
public Size get_ImageSize()
public void set_ImageSize(Size value)
public ImageListStreamer get_ImageStream()
public void set_ImageStream(ImageListStreamer value)
public object get_Tag()
public void set_Tag(object value)
public Color get_TransparentColor()
public void set_TransparentColor(Color value)
public void Draw(Graphics g, Point pt, int index)
public void Draw(Graphics g, int x, int y, int index)
public void Draw(Graphics g, int x, int y, int width, int height, int index)
public string ToString()
protected void Dispose(bool disposing)
public void add_RecreateHandle(EventHandler value)
public void remove_RecreateHandle(EventHandler value)
}
internal System.Windows.Forms.ImageListConverter : ComponentConverter {
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
public System.Windows.Forms.ImageListStreamer : object {
private ImageCollection imageCollection
private Image[] images
private Size image_size
private Color back_color
private Byte[] header
internal Image[] Images
internal Size ImageSize
internal ColorDepth ColorDepth
internal Color BackColor
internal void .ctor(ImageCollection imageCollection)
private void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo si, StreamingContext context)
private Bitmap Get1bppMask(Bitmap main)
private MemoryStream GetDecodedStream(Byte[] bytes, int offset, int size)
private MemoryStream GetRLEStream(MemoryStream input, int start)
internal Image[] get_Images()
internal Size get_ImageSize()
internal ColorDepth get_ColorDepth()
internal Color get_BackColor()
}
public System.Windows.Forms.ImeMode : Enum {
public int value__
public ImeMode NoControl
public ImeMode On
public ImeMode Off
public ImeMode Disable
public ImeMode Hiragana
public ImeMode Katakana
public ImeMode KatakanaHalf
public ImeMode AlphaFull
public ImeMode Alpha
public ImeMode HangulFull
public ImeMode Hangul
public ImeMode Inherit
public ImeMode Close
public ImeMode OnHalf
}
public System.Windows.Forms.IMessageFilter {
public bool PreFilterMessage(Message& m)
}
public System.Windows.Forms.InputLanguage : object {
private InputLanguageCollection all
private IntPtr handle
private CultureInfo culture
private string layout_name
private InputLanguage current_input
private InputLanguage default_input
public InputLanguage CurrentInputLanguage
public InputLanguage DefaultInputLanguage
public InputLanguageCollection InstalledInputLanguages
public CultureInfo Culture
public IntPtr Handle
public string LayoutName
internal void .ctor(IntPtr handle, CultureInfo culture, string layout_name)
public InputLanguage get_CurrentInputLanguage()
public void set_CurrentInputLanguage(InputLanguage value)
public InputLanguage get_DefaultInputLanguage()
public InputLanguageCollection get_InstalledInputLanguages()
public CultureInfo get_Culture()
public IntPtr get_Handle()
public string get_LayoutName()
public InputLanguage FromCulture(CultureInfo culture)
public bool Equals(object value)
public int GetHashCode()
}
public System.Windows.Forms.InputLanguageChangedEventArgs : EventArgs {
private CultureInfo culture
private byte charset
private InputLanguage input_language
public byte CharSet
public CultureInfo Culture
public InputLanguage InputLanguage
public void .ctor(CultureInfo culture, byte charSet)
public void .ctor(InputLanguage inputLanguage, byte charSet)
public byte get_CharSet()
public CultureInfo get_Culture()
public InputLanguage get_InputLanguage()
}
public System.Windows.Forms.InputLanguageChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, InputLanguageChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, InputLanguageChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.InputLanguageChangingEventArgs : CancelEventArgs {
private CultureInfo culture
private bool system_charset
private InputLanguage input_language
public bool SysCharSet
public CultureInfo Culture
public InputLanguage InputLanguage
public void .ctor(CultureInfo culture, bool sysCharSet)
public void .ctor(InputLanguage inputLanguage, bool sysCharSet)
public bool get_SysCharSet()
public CultureInfo get_Culture()
public InputLanguage get_InputLanguage()
}
public System.Windows.Forms.InputLanguageChangingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, InputLanguageChangingEventArgs e)
public IAsyncResult BeginInvoke(object sender, InputLanguageChangingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.InputLanguageCollection : ReadOnlyCollectionBase {
public InputLanguage Item
internal void .ctor(InputLanguage[] data)
public InputLanguage get_Item(int index)
public bool Contains(InputLanguage value)
public void CopyTo(InputLanguage[] array, int index)
public int IndexOf(InputLanguage value)
}
public System.Windows.Forms.InsertKeyMode : Enum {
public int value__
public InsertKeyMode Default
public InsertKeyMode Insert
public InsertKeyMode Overwrite
}
internal System.Windows.Forms.InternalWindowManager : object {
private TitleButtons title_buttons
internal Form form
internal Point start
internal State state
protected Point clicked_point
private FormPos sizing_edge
internal Rectangle virtual_position
private Rectangle normal_bounds
private Rectangle iconic_bounds
public Form Form
public int IconWidth
public TitleButtons TitleButtons
internal Rectangle NormalBounds
internal Size IconicSize
internal Rectangle IconicBounds
internal Rectangle MaximizedBounds
public bool ShowIcon
public bool IsActive
public bool IsMaximized
public bool IsMinimized
public bool IsSizable
public bool HasBorders
public bool IsToolWindow
public int TitleBarHeight
public int BorderWidth
public int MenuHeight
public void .ctor(Form form)
public Form get_Form()
public int get_IconWidth()
public TitleButtons get_TitleButtons()
internal Rectangle get_NormalBounds()
internal void set_NormalBounds(Rectangle value)
internal Size get_IconicSize()
internal Rectangle get_IconicBounds()
internal void set_IconicBounds(Rectangle value)
internal Rectangle get_MaximizedBounds()
public void UpdateWindowState(FormWindowState old_window_state, FormWindowState new_window_state, bool force)
public void UpdateWindowDecorations(FormWindowState window_state)
public bool WndProc(Message& m)
protected bool HandleNCPaint(Message& m)
protected bool HandleNCCalcSize(Message& m)
protected RECT NCCalcSize(RECT proposed_window_rect)
protected bool HandleNCHitTest(Message& m)
public void UpdateBorderStyle(FormBorderStyle border_style)
public void SetWindowState(FormWindowState old_state, FormWindowState window_state)
public FormWindowState GetWindowState()
public void PointToClient(Int32& x, Int32& y)
public void PointToScreen(Int32& x, Int32& y)
protected bool ShouldRemoveWindowManager(FormBorderStyle style)
public bool IconRectangleContains(int x, int y)
public bool get_ShowIcon()
protected void Activate()
public bool get_IsActive()
private void FormSizeChangedHandler(object sender, EventArgs e)
protected bool HandleRButtonDown(Message& m)
protected bool HandleLButtonDown(Message& m)
protected bool HandleLButtonDblClick(Message& m)
protected bool HandleNCMouseLeave(Message& m)
protected bool HandleNCMouseMove(Message& m)
protected bool HandleNCLButtonDown(Message& m)
protected void HandleNCLButtonDblClick(Message& m)
protected void HandleTitleBarDoubleClick(int x, int y)
protected void HandleTitleBarLeave(int x, int y)
protected void HandleTitleBarMouseMove(int x, int y)
protected void HandleTitleBarUp(int x, int y)
protected void HandleTitleBarDown(int x, int y)
private bool HandleMouseMove(Form form, Message& m)
private void HandleMouseLeave(Message& m)
protected void HandleWindowMove(Message m)
private void HandleSizing(Message m)
public bool get_IsMaximized()
public bool get_IsMinimized()
public bool get_IsSizable()
public bool get_HasBorders()
public bool get_IsToolWindow()
public int get_TitleBarHeight()
public int get_BorderWidth()
public int get_MenuHeight()
protected void UpdateVP(Rectangle r)
protected void UpdateVP(Point loc, int w, int h)
protected void UpdateVP(int x, int y, int w, int h)
protected void HandleLButtonUp(Message& m)
private bool HandleNCLButtonUp(Message& m)
protected void DrawTitleButton(Graphics dc, TitleButton button, Rectangle clip)
public void DrawMaximizedButtons(object sender, PaintEventArgs pe)
protected Point MouseMove(Point pos)
protected void DrawVirtualPosition(Rectangle virtual_position)
protected void ClearVirtualPosition()
protected void OnWindowFinishedMoving()
protected void NCPointToClient(Int32& x, Int32& y)
protected void NCClientToNC(Int32& x, Int32& y)
internal Point GetMenuOrigin()
protected FormPos FormPosForCoords(int x, int y)
}
public System.Windows.Forms.InvalidateEventArgs : EventArgs {
private Rectangle invalidated_rectangle
public Rectangle InvalidRect
public void .ctor(Rectangle invalidRect)
public Rectangle get_InvalidRect()
}
public System.Windows.Forms.InvalidateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, InvalidateEventArgs e)
public IAsyncResult BeginInvoke(object sender, InvalidateEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ItemActivation : Enum {
public int value__
public ItemActivation OneClick
public ItemActivation Standard
public ItemActivation TwoClick
}
public System.Windows.Forms.ItemBoundsPortion : Enum {
public int value__
public ItemBoundsPortion Entire
public ItemBoundsPortion Icon
public ItemBoundsPortion Label
public ItemBoundsPortion ItemOnly
}
public System.Windows.Forms.ItemChangedEventArgs : EventArgs {
private int index
public int Index
internal void .ctor(int index)
public int get_Index()
}
public System.Windows.Forms.ItemChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ItemChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ItemChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ItemCheckedEventArgs : EventArgs {
private ListViewItem item
public ListViewItem Item
public void .ctor(ListViewItem item)
public ListViewItem get_Item()
}
public System.Windows.Forms.ItemCheckedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ItemCheckedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ItemCheckedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ItemCheckEventArgs : EventArgs {
private CheckState currentValue
private int index
private CheckState newValue
public CheckState CurrentValue
public int Index
public CheckState NewValue
public void .ctor(int index, CheckState newCheckValue, CheckState currentValue)
public CheckState get_CurrentValue()
public int get_Index()
public CheckState get_NewValue()
public void set_NewValue(CheckState value)
}
public System.Windows.Forms.ItemCheckEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ItemCheckEventArgs e)
public IAsyncResult BeginInvoke(object sender, ItemCheckEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ItemDragEventArgs : EventArgs {
private MouseButtons button
private object item
public MouseButtons Button
public object Item
public void .ctor(MouseButtons button)
public void .ctor(MouseButtons button, object item)
public MouseButtons get_Button()
public object get_Item()
}
public System.Windows.Forms.ItemDragEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ItemDragEventArgs e)
public IAsyncResult BeginInvoke(object sender, ItemDragEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.IToolStripData {
public bool IsCurrentlyDragging
public bool Stretch
public bool get_IsCurrentlyDragging()
public bool get_Stretch()
public void set_Stretch(bool value)
}
internal System.Windows.Forms.IUpdateFolder {
public string CurrentFolder
public string get_CurrentFolder()
public void set_CurrentFolder(string value)
}
public System.Windows.Forms.IWin32Window {
public IntPtr Handle
public IntPtr get_Handle()
}
public System.Windows.Forms.IWindowTarget {
public void OnHandleChange(IntPtr newHandle)
public void OnMessage(Message& m)
}
internal System.Windows.Forms.KeybdEventFlags : Enum {
public int value__
public KeybdEventFlags None
public KeybdEventFlags ExtendedKey
public KeybdEventFlags KeyUp
}
internal System.Windows.Forms.KeyboardLayout : object {
public int Lcid
public string Name
public ScanTableIndex ScanIndex
public VKeyTableIndex VKeyIndex
public UInt32[][] Keys
public void .ctor(int lcid, string name, ScanTableIndex scan_index, VKeyTableIndex vkey_index, UInt32[][] keys)
public void .ctor(int lcid, string name, int scan_index, int vkey_index, UInt32[][] keys)
}
internal System.Windows.Forms.KeyboardLayouts : object {
private KeyboardLayout[] keyboard_layouts
public Int32[][] vkey_table
public Int16[][] scan_table
public KeyboardLayout[] Layouts
public void LoadLayouts()
public KeyboardLayout[] get_Layouts()
}
public System.Windows.Forms.KeyEventArgs : EventArgs {
private Keys key_data
private bool event_handled
private bool supress_key_press
public bool Alt
public bool Control
public bool Handled
public Keys KeyCode
public Keys KeyData
public int KeyValue
public Keys Modifiers
public bool Shift
public bool SuppressKeyPress
public void .ctor(Keys keyData)
public bool get_Alt()
public bool get_Control()
public bool get_Handled()
public void set_Handled(bool value)
public Keys get_KeyCode()
public Keys get_KeyData()
public int get_KeyValue()
public Keys get_Modifiers()
public bool get_Shift()
public bool get_SuppressKeyPress()
public void set_SuppressKeyPress(bool value)
}
public System.Windows.Forms.KeyEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, KeyEventArgs e)
public IAsyncResult BeginInvoke(object sender, KeyEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.KeyFilterData : ValueType {
internal bool Down
internal int keycode
internal int keysym
internal Keys ModifierKeys
internal string str
}
internal System.Windows.Forms.KeyMasks : Enum {
public int value__
public KeyMasks ShiftMask
public KeyMasks LockMask
public KeyMasks ControlMask
public KeyMasks Mod1Mask
public KeyMasks Mod2Mask
public KeyMasks Mod3Mask
public KeyMasks Mod4Mask
public KeyMasks Mod5Mask
public KeyMasks ModMasks
}
internal System.Windows.Forms.KeypadKeys : Enum {
public int value__
public KeypadKeys XK_KP_Space
public KeypadKeys XK_KP_Tab
public KeypadKeys XK_KP_Enter
public KeypadKeys XK_KP_F1
public KeypadKeys XK_KP_F2
public KeypadKeys XK_KP_F3
public KeypadKeys XK_KP_F4
public KeypadKeys XK_KP_Home
public KeypadKeys XK_KP_Left
public KeypadKeys XK_KP_Up
public KeypadKeys XK_KP_Right
public KeypadKeys XK_KP_Down
public KeypadKeys XK_KP_Prior
public KeypadKeys XK_KP_Page_Up
public KeypadKeys XK_KP_Next
public KeypadKeys XK_KP_Page_Down
public KeypadKeys XK_KP_End
public KeypadKeys XK_KP_Begin
public KeypadKeys XK_KP_Insert
public KeypadKeys XK_KP_Delete
public KeypadKeys XK_KP_Equal
public KeypadKeys XK_KP_Multiply
public KeypadKeys XK_KP_Add
public KeypadKeys XK_KP_Separator
public KeypadKeys XK_KP_Subtract
public KeypadKeys XK_KP_Decimal
public KeypadKeys XK_KP_Divide
public KeypadKeys XK_KP_0
public KeypadKeys XK_KP_1
public KeypadKeys XK_KP_2
public KeypadKeys XK_KP_3
public KeypadKeys XK_KP_4
public KeypadKeys XK_KP_5
public KeypadKeys XK_KP_6
public KeypadKeys XK_KP_7
public KeypadKeys XK_KP_8
public KeypadKeys XK_KP_9
}
public System.Windows.Forms.KeyPressEventArgs : EventArgs {
private char key_char
private bool event_handled
public bool Handled
public char KeyChar
public void .ctor(char keyChar)
public bool get_Handled()
public void set_Handled(bool value)
public char get_KeyChar()
public void set_KeyChar(char value)
}
public System.Windows.Forms.KeyPressEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, KeyPressEventArgs e)
public IAsyncResult BeginInvoke(object sender, KeyPressEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.Keys : Enum {
public int value__
public Keys None
public Keys LButton
public Keys RButton
public Keys Cancel
public Keys MButton
public Keys XButton1
public Keys XButton2
public Keys Back
public Keys Tab
public Keys LineFeed
public Keys Clear
public Keys Return
public Keys Enter
public Keys ShiftKey
public Keys ControlKey
public Keys Menu
public Keys Pause
public Keys CapsLock
public Keys Capital
public Keys KanaMode
public Keys HanguelMode
public Keys HangulMode
public Keys JunjaMode
public Keys FinalMode
public Keys KanjiMode
public Keys HanjaMode
public Keys Escape
public Keys IMEConvert
public Keys IMENonconvert
public Keys IMEAceept
public Keys IMEModeChange
public Keys Space
public Keys PageUp
public Keys Prior
public Keys PageDown
public Keys Next
public Keys End
public Keys Home
public Keys Left
public Keys Up
public Keys Right
public Keys Down
public Keys Select
public Keys Print
public Keys Execute
public Keys PrintScreen
public Keys Snapshot
public Keys Insert
public Keys Delete
public Keys Help
public Keys D0
public Keys D1
public Keys D2
public Keys D3
public Keys D4
public Keys D5
public Keys D6
public Keys D7
public Keys D8
public Keys D9
public Keys A
public Keys B
public Keys C
public Keys D
public Keys E
public Keys F
public Keys G
public Keys H
public Keys I
public Keys J
public Keys K
public Keys L
public Keys M
public Keys N
public Keys O
public Keys P
public Keys Q
public Keys R
public Keys S
public Keys T
public Keys U
public Keys V
public Keys W
public Keys X
public Keys Y
public Keys Z
public Keys LWin
public Keys RWin
public Keys Apps
public Keys NumPad0
public Keys NumPad1
public Keys NumPad2
public Keys NumPad3
public Keys NumPad4
public Keys NumPad5
public Keys NumPad6
public Keys NumPad7
public Keys NumPad8
public Keys NumPad9
public Keys Multiply
public Keys Add
public Keys Separator
public Keys Subtract
public Keys Decimal
public Keys Divide
public Keys F1
public Keys F2
public Keys F3
public Keys F4
public Keys F5
public Keys F6
public Keys F7
public Keys F8
public Keys F9
public Keys F10
public Keys F11
public Keys F12
public Keys F13
public Keys F14
public Keys F15
public Keys F16
public Keys F17
public Keys F18
public Keys F19
public Keys F20
public Keys F21
public Keys F22
public Keys F23
public Keys F24
public Keys NumLock
public Keys Scroll
public Keys LShiftKey
public Keys RShiftKey
public Keys LControlKey
public Keys RControlKey
public Keys LMenu
public Keys RMenu
public Keys BrowserBack
public Keys BrowserForward
public Keys BrowserRefresh
public Keys BrowserStop
public Keys BrowserSearch
public Keys BrowserFavorites
public Keys BrowserHome
public Keys VolumeMute
public Keys VolumeDown
public Keys VolumeUp
public Keys MediaNextTrack
public Keys MediaPreviousTrack
public Keys MediaStop
public Keys MediaPlayPause
public Keys LaunchMail
public Keys SelectMedia
public Keys LaunchApplication1
public Keys LaunchApplication2
public Keys OemSemicolon
public Keys Oemplus
public Keys Oemcomma
public Keys OemMinus
public Keys OemPeriod
public Keys OemQuestion
public Keys Oemtilde
public Keys OemOpenBrackets
public Keys OemPipe
public Keys OemCloseBrackets
public Keys OemQuotes
public Keys Oem8
public Keys OemBackslash
public Keys ProcessKey
public Keys Attn
public Keys Crsel
public Keys Exsel
public Keys EraseEof
public Keys Play
public Keys Zoom
public Keys NoName
public Keys Pa1
public Keys OemClear
public Keys KeyCode
public Keys Shift
public Keys Control
public Keys Alt
public Keys Modifiers
public Keys IMEAccept
public Keys Oem1
public Keys Oem102
public Keys Oem2
public Keys Oem3
public Keys Oem4
public Keys Oem5
public Keys Oem6
public Keys Oem7
public Keys Packet
public Keys Sleep
}
public System.Windows.Forms.KeysConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public int Compare(object a, object b)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Windows.Forms.Label : Control {
private bool autosize
private bool auto_ellipsis
private Image image
private bool render_transparent
private FlatStyle flat_style
private bool use_mnemonic
private int image_index
private string image_key
private ImageList image_list
internal ContentAlignment image_align
internal StringFormat string_format
internal ContentAlignment text_align
private SizeF req_witdthsize
private object AutoSizeChangedEvent
private object TextAlignChangedEvent
public bool AutoEllipsis
public bool AutoSize
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BorderStyle BorderStyle
protected CreateParams CreateParams
protected ImeMode DefaultImeMode
protected Padding DefaultMargin
protected Size DefaultSize
public FlatStyle FlatStyle
public Image Image
public ContentAlignment ImageAlign
public int ImageIndex
public string ImageKey
public ImageList ImageList
public ImeMode ImeMode
public int PreferredHeight
public int PreferredWidth
protected bool RenderTransparent
public bool TabStop
public ContentAlignment TextAlign
public bool UseMnemonic
public bool UseCompatibleTextRendering
public string Text
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_TextAlignChanged(EventHandler value)
public void remove_TextAlignChanged(EventHandler value)
public bool get_AutoEllipsis()
public void set_AutoEllipsis(bool value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
protected CreateParams get_CreateParams()
protected ImeMode get_DefaultImeMode()
protected Padding get_DefaultMargin()
protected Size get_DefaultSize()
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public Image get_Image()
public void set_Image(Image value)
public ContentAlignment get_ImageAlign()
public void set_ImageAlign(ContentAlignment value)
public int get_ImageIndex()
public void set_ImageIndex(int value)
public string get_ImageKey()
public void set_ImageKey(string value)
public ImageList get_ImageList()
public void set_ImageList(ImageList value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
internal Size InternalGetPreferredSize(Size proposed)
public Size GetPreferredSize(Size proposedSize)
public int get_PreferredHeight()
public int get_PreferredWidth()
protected bool get_RenderTransparent()
protected void set_RenderTransparent(bool value)
public bool get_TabStop()
public void set_TabStop(bool value)
public ContentAlignment get_TextAlign()
public void set_TextAlign(ContentAlignment value)
public bool get_UseMnemonic()
public void set_UseMnemonic(bool value)
protected Rectangle CalcImageRenderBounds(Image image, Rectangle r, ContentAlignment align)
protected AccessibleObject CreateAccessibilityInstance()
protected void Dispose(bool disposing)
protected internal void DrawImage(Graphics g, Image image, Rectangle r, ContentAlignment align)
protected void OnEnabledChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnPaddingChanged(EventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnParentChanged(EventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
protected void OnTextAlignChanged(EventArgs e)
protected void OnTextChanged(EventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected bool ProcessMnemonic(char charCode)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
public string ToString()
protected void WndProc(Message& m)
private void CalcAutoSize()
private void OnHandleCreatedLB(object o, EventArgs e)
private void SetUseMnemonic(bool use)
public bool get_UseCompatibleTextRendering()
public void set_UseCompatibleTextRendering(bool value)
public string get_Text()
public void set_Text(string value)
protected void OnMouseEnter(EventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
}
public System.Windows.Forms.LabelEditEventArgs : EventArgs {
private int item
private string label
private bool cancelEdit
public bool CancelEdit
public int Item
public string Label
public void .ctor(int item)
public void .ctor(int item, string label)
public bool get_CancelEdit()
public void set_CancelEdit(bool value)
public int get_Item()
public string get_Label()
internal void SetLabel(string label)
}
public System.Windows.Forms.LabelEditEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LabelEditEventArgs e)
public IAsyncResult BeginInvoke(object sender, LabelEditEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.LabelEditTextBox : FixedSizeTextBox {
private object EditingCancelledEvent
private object EditingFinishedEvent
protected bool IsInputKey(Keys key_data)
protected void OnKeyDown(KeyEventArgs e)
protected void OnLostFocus(EventArgs e)
protected void OnEditingCancelled(EventArgs e)
protected void OnEditingFinished(EventArgs e)
public void add_EditingCancelled(EventHandler value)
public void remove_EditingCancelled(EventHandler value)
public void add_EditingFinished(EventHandler value)
public void remove_EditingFinished(EventHandler value)
}
public System.Windows.Forms.Layout.ArrangedElementCollection : object {
internal ArrayList list
public int Count
public bool IsReadOnly
private bool System.Collections.IList.IsFixedSize
internal bool IsFixedSize
private object System.Collections.IList.Item
internal object Item
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
public int get_Count()
public bool get_IsReadOnly()
public void CopyTo(Array array, int index)
public bool Equals(object obj)
public IEnumerator GetEnumerator()
public int GetHashCode()
private int System.Collections.IList.Add(object value)
internal int Add(object value)
private void System.Collections.IList.Clear()
internal void Clear()
private bool System.Collections.IList.Contains(object value)
internal bool Contains(object value)
private int System.Collections.IList.IndexOf(object value)
internal int IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
internal void Insert(int index, object value)
private bool System.Collections.IList.get_IsFixedSize()
internal bool get_IsFixedSize()
private void System.Collections.IList.Remove(object value)
internal void Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
internal void InternalRemoveAt(int index)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
internal object get_Item(int index)
internal void set_Item(int index, object value)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
}
internal System.Windows.Forms.Layout.DefaultLayout : LayoutEngine {
private void LayoutDockedChildren(Control parent, Control[] controls)
private void LayoutAnchoredChildren(Control parent, Control[] controls)
private void LayoutAutoSizedChildren(Control parent, Control[] controls)
private void LayoutAutoSizeContainer(Control container)
public bool Layout(object container, LayoutEventArgs args)
private Size GetPreferredControlSize(Control child)
}
internal System.Windows.Forms.Layout.FlowLayout : LayoutEngine {
private FlowLayoutSettings default_settings
public void InitLayout(object child, BoundsSpecified specified)
public bool Layout(object container, LayoutEventArgs args)
private int FinishRow(List`1<Control> row)
private int FinishColumn(List`1<Control> col)
private bool LayoutToolStrip(ToolStrip parent)
private int FinishRow(List`1<ToolStripItem> row)
private int FinishColumn(List`1<ToolStripItem> col)
}
public System.Windows.Forms.Layout.LayoutEngine : object {
public void InitLayout(object child, BoundsSpecified specified)
public bool Layout(object container, LayoutEventArgs layoutEventArgs)
}
internal System.Windows.Forms.Layout.TableLayout : LayoutEngine {
private Control dummy_control
public void InitLayout(object child, BoundsSpecified specified)
public bool Layout(object container, LayoutEventArgs args)
internal Control[0...,0...] CalculateControlPositions(TableLayoutPanel panel, int columns, int rows)
private void CalculateColumnRowSizes(TableLayoutPanel panel, int columns, int rows)
private void LayoutControls(TableLayoutPanel panel)
}
public System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter : TypeConverter {
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
private int ParseControl(XmlDocument xmldoc, TableLayoutSettings settings)
private void ParseColumnStyle(XmlDocument xmldoc, TableLayoutSettings settings)
private void ParseRowStyle(XmlDocument xmldoc, TableLayoutSettings settings)
private int GetValue(string attValue)
private String[] BuggySplit(string s)
}
public System.Windows.Forms.LayoutEventArgs : EventArgs {
private Control affected_control
private string affected_property
private IComponent affected_component
public IComponent AffectedComponent
public Control AffectedControl
public string AffectedProperty
public void .ctor(Control affectedControl, string affectedProperty)
public void .ctor(IComponent affectedComponent, string affectedProperty)
public IComponent get_AffectedComponent()
public Control get_AffectedControl()
public string get_AffectedProperty()
}
public System.Windows.Forms.LayoutEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LayoutEventArgs e)
public IAsyncResult BeginInvoke(object sender, LayoutEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.LayoutSettings : object {
public LayoutEngine LayoutEngine
public LayoutEngine get_LayoutEngine()
}
public System.Windows.Forms.LeftRightAlignment : Enum {
public int value__
public LeftRightAlignment Left
public LeftRightAlignment Right
}
internal System.Windows.Forms.Line : object {
internal Document document
internal StringBuilder text
internal Single[] widths
internal int space
internal int line_no
internal LineTag tags
internal int offset
internal int height
internal int ascent
internal HorizontalAlignment alignment
internal int align_shift
internal int indent
internal int hanging_indent
internal int right_indent
internal LineEnding ending
internal Line parent
internal Line left
internal Line right
internal LineColor color
private int DEFAULT_TEXT_LEN
internal bool recalc
private Hashtable kerning_fonts
internal HorizontalAlignment Alignment
internal int HangingIndent
internal int Height
internal int Indent
internal int LineNo
internal int RightIndent
internal int Width
internal string Text
internal int X
internal int Y
internal void .ctor(Document document, LineEnding ending)
internal void .ctor(Document document, int LineNo, string Text, Font font, Color color, LineEnding ending)
internal void .ctor(Document document, int LineNo, string Text, HorizontalAlignment align, Font font, Color color, LineEnding ending)
internal void .ctor(Document document, int LineNo, string Text, LineTag tag, LineEnding ending)
internal HorizontalAlignment get_Alignment()
internal void set_Alignment(HorizontalAlignment value)
internal int get_HangingIndent()
internal void set_HangingIndent(int value)
internal int get_Height()
internal void set_Height(int value)
internal int get_Indent()
internal void set_Indent(int value)
internal int get_LineNo()
internal void set_LineNo(int value)
internal int get_RightIndent()
internal void set_RightIndent(int value)
internal int get_Width()
internal string get_Text()
internal void set_Text(string value)
internal int get_X()
internal int get_Y()
internal void LinkRecord(StringBuilder linkRecord)
internal void ClearLinks()
public void DeleteCharacters(int pos, int count)
internal void DrawEnding(Graphics dc, float y)
internal LineTag FindTag(int pos)
public int GetHashCode()
public LineTag GetTag(int x)
internal void Grow(int minimum)
public void InsertString(int pos, string s)
public void InsertString(int pos, string s, LineTag tag)
internal bool RecalculateLine(Graphics g, Document doc)
private bool RecalculateLine(Graphics g, Document doc, bool handleKerning)
internal bool RecalculatePasswordLine(Graphics g, Document doc)
internal void Streamline(int lines)
internal int TextLengthWithoutEnding()
internal string TextWithoutEnding()
public object Clone()
internal object CloneLine()
public int CompareTo(object obj)
public bool Equals(object obj)
public string ToString()
}
internal System.Windows.Forms.LineColor : Enum {
public int value__
public LineColor Red
public LineColor Black
}
internal System.Windows.Forms.LineEnding : Enum {
public int value__
public LineEnding Wrap
public LineEnding Limp
public LineEnding Hard
public LineEnding Soft
public LineEnding Rich
public LineEnding None
}
internal System.Windows.Forms.LineTag : object {
private Font font
private Color color
private Color back_color
private Font link_font
private bool is_link
private string link_text
private int start
private int height
private int ascent
private int descent
private int shift
private Line line
private LineTag next
private LineTag previous
public int Ascent
public Color BackColor
public Color ColorToDisplay
public Color Color
public int Descent
public int End
public Font FontToDisplay
public Font Font
public int Height
public bool IsTextTag
public int Length
public Line Line
public LineTag Next
public LineTag Previous
public int Shift
public int Start
public int TextEnd
public int TextLength
public float Width
public float X
public bool IsLink
public string LinkText
public void .ctor(Line line, int start)
public int get_Ascent()
public Color get_BackColor()
public void set_BackColor(Color value)
public Color get_ColorToDisplay()
public Color get_Color()
public void set_Color(Color value)
public int get_Descent()
public int get_End()
public Font get_FontToDisplay()
public Font get_Font()
public void set_Font(Font value)
public int get_Height()
public void set_Height(int value)
public bool get_IsTextTag()
public int get_Length()
public Line get_Line()
public void set_Line(Line value)
public LineTag get_Next()
public void set_Next(LineTag value)
public LineTag get_Previous()
public void set_Previous(LineTag value)
public int get_Shift()
public void set_Shift(int value)
public int get_Start()
public void set_Start(int value)
public int get_TextEnd()
public int get_TextLength()
public float get_Width()
public float get_X()
public bool get_IsLink()
public void set_IsLink(bool value)
public string get_LinkText()
public void set_LinkText(string value)
public LineTag Break(int pos)
public bool Combine(LineTag other)
public void CopyFormattingFrom(LineTag other)
public void Delete()
public void Draw(Graphics dc, Color color, float x, float y, int start, int end)
public void Draw(Graphics dc, Color color, float xoff, float y, int start, int end, string text)
public void Draw(Graphics dc, Color color, float xoff, float y, int drawStart, int drawEnd, string text, Rectangle& measuredText, bool measureText)
public bool Equals(object obj)
public LineTag FindTag(Line line, int pos)
public bool FormatText(Line line, int formatStart, int length, Font font, Color color, Color backColor, FormatSpecified specified)
public int GetCharIndex(int x)
public LineTag GetFinalTag(LineTag tag)
public int GetHashCode()
internal int MaxHeight()
private void SetFormat(LineTag tag, Font font, Color color, Color back_color, FormatSpecified specified)
public SizeF SizeOfPosition(Graphics dc, int pos)
public string Text()
public string ToString()
}
public System.Windows.Forms.LinkArea : ValueType {
private int start
private int length
public int Start
public int Length
public bool IsEmpty
public void .ctor(int start, int length)
public int get_Start()
public void set_Start(int value)
public int get_Length()
public void set_Length(int value)
public bool get_IsEmpty()
public bool Equals(object o)
public int GetHashCode()
public string ToString()
public bool op_Equality(LinkArea linkArea1, LinkArea linkArea2)
public bool op_Inequality(LinkArea linkArea1, LinkArea linkArea2)
}
public System.Windows.Forms.LinkBehavior : Enum {
public int value__
public LinkBehavior SystemDefault
public LinkBehavior AlwaysUnderline
public LinkBehavior HoverUnderline
public LinkBehavior NeverUnderline
}
public System.Windows.Forms.LinkClickedEventArgs : EventArgs {
private string link_text
public string LinkText
public void .ctor(string linkText)
public string get_LinkText()
}
public System.Windows.Forms.LinkClickedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LinkClickedEventArgs e)
public IAsyncResult BeginInvoke(object sender, LinkClickedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.LinkConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Windows.Forms.LinkLabel : Label {
private Color active_link_color
private Color disabled_link_color
private Color link_color
private Color visited_color
private LinkArea link_area
private LinkBehavior link_behavior
private LinkCollection link_collection
private ArrayList links
internal Link[] sorted_links
private bool link_visited
internal Piece[] pieces
private Cursor override_cursor
private DialogResult dialog_result
private Link active_link
private Link hovered_link
private int focused_index
private object LinkClickedEvent
public Color ActiveLinkColor
public Color DisabledLinkColor
public Color LinkColor
public Color VisitedLinkColor
public LinkArea LinkArea
public LinkBehavior LinkBehavior
public LinkCollection Links
public bool LinkVisited
protected Cursor OverrideCursor
public string Text
public FlatStyle FlatStyle
public Padding Padding
private DialogResult System.Windows.Forms.IButtonControl.DialogResult
public bool UseCompatibleTextRendering
public void add_LinkClicked(LinkLabelLinkClickedEventHandler value)
public void remove_LinkClicked(LinkLabelLinkClickedEventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public Color get_ActiveLinkColor()
public void set_ActiveLinkColor(Color value)
public Color get_DisabledLinkColor()
public void set_DisabledLinkColor(Color value)
public Color get_LinkColor()
public void set_LinkColor(Color value)
public Color get_VisitedLinkColor()
public void set_VisitedLinkColor(Color value)
public LinkArea get_LinkArea()
public void set_LinkArea(LinkArea value)
public LinkBehavior get_LinkBehavior()
public void set_LinkBehavior(LinkBehavior value)
public LinkCollection get_Links()
public bool get_LinkVisited()
public void set_LinkVisited(bool value)
protected Cursor get_OverrideCursor()
protected void set_OverrideCursor(Cursor value)
public string get_Text()
public void set_Text(string value)
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public Padding get_Padding()
public void set_Padding(Padding value)
private DialogResult System.Windows.Forms.IButtonControl.get_DialogResult()
private void System.Windows.Forms.IButtonControl.set_DialogResult(DialogResult value)
private void System.Windows.Forms.IButtonControl.NotifyDefault(bool value)
private void System.Windows.Forms.IButtonControl.PerformClick()
protected AccessibleObject CreateAccessibilityInstance()
protected void CreateHandle()
protected void OnAutoSizeChanged(EventArgs e)
protected void OnEnabledChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnGotFocus(EventArgs e)
protected void OnKeyDown(KeyEventArgs e)
protected void OnLinkClicked(LinkLabelLinkClickedEventArgs e)
protected void OnLostFocus(EventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnPaddingChanged(EventArgs e)
private void UpdateHover(Link link)
protected void OnMouseMove(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnClick(EventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnPaintBackground(PaintEventArgs e)
protected void OnTextAlignChanged(EventArgs e)
protected void OnTextChanged(EventArgs e)
protected Link PointInLink(int x, int y)
protected bool ProcessDialogKey(Keys keyData)
protected void Select(bool directed, bool forward)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void WndProc(Message& msg)
private ArrayList CreatePiecesFromText(int start, int len, Link link)
private void CreateLinkPieces()
private void SortLinks()
private void CheckLinks()
public bool get_UseCompatibleTextRendering()
public void set_UseCompatibleTextRendering(bool value)
}
public System.Windows.Forms.LinkLabelLinkClickedEventArgs : EventArgs {
private MouseButtons button
private Link link
public MouseButtons Button
public Link Link
public void .ctor(Link link)
public void .ctor(Link link, MouseButtons button)
public MouseButtons get_Button()
public Link get_Link()
}
public System.Windows.Forms.LinkLabelLinkClickedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LinkLabelLinkClickedEventArgs e)
public IAsyncResult BeginInvoke(object sender, LinkLabelLinkClickedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.LinkState : Enum {
public int value__
public LinkState Normal
public LinkState Hover
public LinkState Active
public LinkState Visited
}
public System.Windows.Forms.ListBindingConverter : TypeConverter {
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
public bool GetCreateInstanceSupported(ITypeDescriptorContext context)
}
public System.Windows.Forms.ListBindingHelper : object {
public object GetList(object list)
public object GetList(object dataSource, string dataMember)
public Type GetListItemType(object list)
public Type GetListItemType(object dataSource, string dataMember)
public PropertyDescriptorCollection GetListItemProperties(object list)
public PropertyDescriptorCollection GetListItemProperties(object list, PropertyDescriptor[] listAccessors)
public PropertyDescriptorCollection GetListItemProperties(object dataSource, string dataMember, PropertyDescriptor[] listAccessors)
public string GetListName(object list, PropertyDescriptor[] listAccessors)
private PropertyDescriptor GetProperty(object obj, string property_name)
private PropertyInfo GetPropertyByReflection(Type type, string property_name)
}
public System.Windows.Forms.ListBox : ListControl {
public int DefaultItemHeight
public int NoMatches
private Hashtable item_heights
private int item_height
private int column_width
private int requested_height
private DrawMode draw_mode
private int horizontal_extent
private bool horizontal_scrollbar
private bool integral_height
private bool multicolumn
private bool scroll_always_visible
private SelectedIndexCollection selected_indices
private SelectedObjectCollection selected_items
private SelectionMode selection_mode
private bool sorted
private bool use_tabstops
private int column_width_internal
private ImplicitVScrollBar vscrollbar
private ImplicitHScrollBar hscrollbar
private int hbar_offset
private bool suspend_layout
private bool ctrl_pressed
private bool shift_pressed
private bool explicit_item_height
private int top_index
private int last_visible_index
private Rectangle items_area
private int focused_item
private ObjectCollection items
private IntegerCollection custom_tab_offsets
private Padding padding
private bool use_custom_tab_offsets
private object DrawItemEvent
private object MeasureItemEvent
private object SelectedIndexChangedEvent
private object UIASelectionModeChangedEvent
private object UIAFocusedItemChangedEvent
private int row_count
private Size canvas_size
private int anchor
private Int32[] prev_selection
private bool button_pressed
private Point button_pressed_loc
private StringFormat string_format
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BorderStyle BorderStyle
public int ColumnWidth
protected CreateParams CreateParams
public IntegerCollection CustomTabOffsets
protected Size DefaultSize
public DrawMode DrawMode
public Font Font
public Color ForeColor
public int HorizontalExtent
public bool HorizontalScrollbar
public bool IntegralHeight
public int ItemHeight
public ObjectCollection Items
public bool MultiColumn
public Padding Padding
public int PreferredHeight
public RightToLeft RightToLeft
public bool ScrollAlwaysVisible
public int SelectedIndex
public SelectedIndexCollection SelectedIndices
public object SelectedItem
public SelectedObjectCollection SelectedItems
public SelectionMode SelectionMode
public bool Sorted
public string Text
public int TopIndex
public bool UseCustomTabOffsets
public bool UseTabStops
protected bool AllowSelection
private int ColumnWidthInternal
private int RowCount
internal ScrollBar UIAHScrollBar
internal ScrollBar UIAVScrollBar
internal int FocusedItem
internal StringFormat StringFormat
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DrawItem(DrawItemEventHandler value)
public void remove_DrawItem(DrawItemEventHandler value)
public void add_MeasureItem(MeasureItemEventHandler value)
public void remove_MeasureItem(MeasureItemEventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_SelectedIndexChanged(EventHandler value)
public void remove_SelectedIndexChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
internal void add_UIASelectionModeChanged(EventHandler value)
internal void remove_UIASelectionModeChanged(EventHandler value)
internal void OnUIASelectionModeChangedEvent()
internal void add_UIAFocusedItemChanged(EventHandler value)
internal void remove_UIAFocusedItemChanged(EventHandler value)
internal void OnUIAFocusedItemChangedEvent()
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public int get_ColumnWidth()
public void set_ColumnWidth(int value)
protected CreateParams get_CreateParams()
public IntegerCollection get_CustomTabOffsets()
protected Size get_DefaultSize()
public DrawMode get_DrawMode()
public void set_DrawMode(DrawMode value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public int get_HorizontalExtent()
public void set_HorizontalExtent(int value)
public bool get_HorizontalScrollbar()
public void set_HorizontalScrollbar(bool value)
public bool get_IntegralHeight()
public void set_IntegralHeight(bool value)
public int get_ItemHeight()
public void set_ItemHeight(int value)
public ObjectCollection get_Items()
public bool get_MultiColumn()
public void set_MultiColumn(bool value)
public Padding get_Padding()
public void set_Padding(Padding value)
public int get_PreferredHeight()
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public bool get_ScrollAlwaysVisible()
public void set_ScrollAlwaysVisible(bool value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public SelectedIndexCollection get_SelectedIndices()
public object get_SelectedItem()
public void set_SelectedItem(object value)
public SelectedObjectCollection get_SelectedItems()
public SelectionMode get_SelectionMode()
public void set_SelectionMode(SelectionMode value)
public bool get_Sorted()
public void set_Sorted(bool value)
public string get_Text()
public void set_Text(string value)
public int get_TopIndex()
public void set_TopIndex(int value)
public bool get_UseCustomTabOffsets()
public void set_UseCustomTabOffsets(bool value)
public bool get_UseTabStops()
public void set_UseTabStops(bool value)
protected bool get_AllowSelection()
private int get_ColumnWidthInternal()
private void set_ColumnWidthInternal(int value)
private int get_RowCount()
internal ScrollBar get_UIAHScrollBar()
internal ScrollBar get_UIAVScrollBar()
protected void AddItemsCore(Object[] value)
public void BeginUpdate()
public void ClearSelected()
protected ObjectCollection CreateItemCollection()
public void EndUpdate()
public int FindString(string s)
public int FindString(string s, int startIndex)
public int FindStringExact(string s)
public int FindStringExact(string s, int startIndex)
public int GetItemHeight(int index)
public Rectangle GetItemRectangle(int index)
protected Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified)
public bool GetSelected(int index)
public int IndexFromPoint(Point p)
public int IndexFromPoint(int x, int y)
protected void OnChangeUICues(UICuesEventArgs e)
protected void OnDataSourceChanged(EventArgs e)
protected void OnDisplayMemberChanged(EventArgs e)
protected void OnDrawItem(DrawItemEventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnMeasureItem(MeasureItemEventArgs e)
protected void OnParentChanged(EventArgs e)
protected void OnResize(EventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void OnSelectedValueChanged(EventArgs e)
public void Refresh()
protected void RefreshItem(int index)
protected void RefreshItems()
public void ResetBackColor()
public void ResetForeColor()
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
private int SnapHeightToIntegral(int height)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void SetItemCore(int index, object value)
protected void SetItemsCore(IList value)
public void SetSelected(int index, bool value)
protected void Sort()
private void Sort(bool paint)
public string ToString()
protected void WmReflectCommand(Message& m)
protected void WndProc(Message& m)
private void CalculateTabStops()
private void LayoutListBox()
private void LayoutSingleColumn()
private void LayoutMultiColumn()
internal void Draw(Rectangle clip, Graphics dc)
internal Rectangle GetItemDisplayRectangle(int index, int first_displayble)
private void HorizontalScrollEvent(object sender, EventArgs e)
private int IndexAtClientPoint(int x, int y)
internal bool IsInputCharInternal(char charCode)
private int LastVisibleItem()
private void UpdateTopItem()
private int NavigateItemVisually(ItemNavigation navigation)
private void OnGotFocus(object sender, EventArgs e)
private void OnLostFocus(object sender, EventArgs e)
private bool KeySearch(Keys key)
internal void HandleKeyDown(Keys key)
private void OnKeyUpLB(object sender, KeyEventArgs e)
internal void InvalidateItem(int index)
internal void OnItemClick(int index)
private void SelectExtended(int index)
private void OnMouseDownLB(object sender, MouseEventArgs e)
private void OnMouseMoveLB(object sender, MouseEventArgs e)
internal void OnDragDropEnd(DragDropEffects effects)
private void OnMouseUpLB(object sender, MouseEventArgs e)
private void Scroll(ScrollBar scrollbar, int delta)
private void OnMouseWheelLB(object sender, MouseEventArgs me)
internal void OnPaintInternal(PaintEventArgs pevent)
internal void RepositionScrollBars()
internal void SelectedItemFromNavigation(int index)
private void ShiftSelection(int index)
internal int get_FocusedItem()
internal void set_FocusedItem(int value)
internal StringFormat get_StringFormat()
internal void CollectionChanged()
private void EnsureVisible(int index)
private void UpdateListBoxBounds()
private void UpdateScrollBars()
private bool UpdateHorizontalScrollBar()
private bool UpdateVerticalScrollBar()
private void VerticalScrollEvent(object sender, EventArgs e)
}
public System.Windows.Forms.ListControl : Control {
private object data_source
private BindingMemberInfo value_member
private string display_member
private CurrencyManager data_manager
private BindingContext last_binding_context
private IFormatProvider format_info
private string format_string
private bool formatting_enabled
private object DataSourceChangedEvent
private object DisplayMemberChangedEvent
private object FormatEvent
private object FormatInfoChangedEvent
private object FormatStringChangedEvent
private object FormattingEnabledChangedEvent
private object SelectedValueChangedEvent
private object ValueMemberChangedEvent
public IFormatProvider FormatInfo
public string FormatString
public bool FormattingEnabled
public object DataSource
public string DisplayMember
public int SelectedIndex
public object SelectedValue
public string ValueMember
protected bool AllowSelection
internal bool ScaleChildrenInternal
protected CurrencyManager DataManager
public void add_DataSourceChanged(EventHandler value)
public void remove_DataSourceChanged(EventHandler value)
public void add_DisplayMemberChanged(EventHandler value)
public void remove_DisplayMemberChanged(EventHandler value)
public void add_Format(ListControlConvertEventHandler value)
public void remove_Format(ListControlConvertEventHandler value)
public void add_FormatInfoChanged(EventHandler value)
public void remove_FormatInfoChanged(EventHandler value)
public void add_FormatStringChanged(EventHandler value)
public void remove_FormatStringChanged(EventHandler value)
public void add_FormattingEnabledChanged(EventHandler value)
public void remove_FormattingEnabledChanged(EventHandler value)
public void add_SelectedValueChanged(EventHandler value)
public void remove_SelectedValueChanged(EventHandler value)
public void add_ValueMemberChanged(EventHandler value)
public void remove_ValueMemberChanged(EventHandler value)
public IFormatProvider get_FormatInfo()
public void set_FormatInfo(IFormatProvider value)
public string get_FormatString()
public void set_FormatString(string value)
public bool get_FormattingEnabled()
public void set_FormattingEnabled(bool value)
public object get_DataSource()
public void set_DataSource(object value)
public string get_DisplayMember()
public void set_DisplayMember(string value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public object get_SelectedValue()
public void set_SelectedValue(object value)
public string get_ValueMember()
public void set_ValueMember(string value)
protected bool get_AllowSelection()
internal bool get_ScaleChildrenInternal()
protected object FilterItemOnProperty(object item)
protected object FilterItemOnProperty(object item, string field)
public string GetItemText(object item)
protected CurrencyManager get_DataManager()
protected bool IsInputKey(Keys keyData)
protected void OnBindingContextChanged(EventArgs e)
protected void OnDataSourceChanged(EventArgs e)
protected void OnDisplayMemberChanged(EventArgs e)
protected void OnFormat(ListControlConvertEventArgs e)
protected void OnFormatInfoChanged(EventArgs e)
protected void OnFormatStringChanged(EventArgs e)
protected void OnFormattingEnabledChanged(EventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void OnSelectedValueChanged(EventArgs e)
protected void OnValueMemberChanged(EventArgs e)
protected void RefreshItem(int index)
protected void RefreshItems()
protected void SetItemCore(int index, object value)
protected void SetItemsCore(IList items)
internal void BindDataItems()
private void ConnectToDataSource()
private void OnItemChanged(object sender, ItemChangedEventArgs e)
private void OnPositionChanged(object sender, EventArgs e)
}
public System.Windows.Forms.ListControlConvertEventArgs : ConvertEventArgs {
private object list_item
public object ListItem
public void .ctor(object value, Type desiredType, object listItem)
public object get_ListItem()
}
public System.Windows.Forms.ListControlConvertEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ListControlConvertEventArgs e)
public IAsyncResult BeginInvoke(object sender, ListControlConvertEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ListView : Control {
private ItemActivation activation
private ListViewAlignment alignment
private bool allow_column_reorder
private bool auto_arrange
private bool check_boxes
private CheckedIndexCollection checked_indices
private CheckedListViewItemCollection checked_items
private ColumnHeaderCollection columns
internal int focused_item_index
private bool full_row_select
private bool grid_lines
private ColumnHeaderStyle header_style
private bool hide_selection
private bool hover_selection
private IComparer item_sorter
private ListViewItemCollection items
private ListViewGroupCollection groups
private bool owner_draw
private bool show_groups
private bool label_edit
private bool label_wrap
private bool multiselect
private bool scrollable
private bool hover_pending
private SelectedIndexCollection selected_indices
private SelectedListViewItemCollection selected_items
private SortOrder sort_order
private ImageList state_image_list
internal bool updating
private View view
private int layout_wd
private int layout_ht
internal HeaderControl header_control
internal ItemControl item_control
internal ScrollBar h_scroll
internal ScrollBar v_scroll
internal int h_marker
internal int v_marker
private int keysearch_tickcnt
private string keysearch_text
private int keysearch_keydelay
private Int32[] reordered_column_indices
private Int32[] reordered_items_indices
private Point[] items_location
private ItemMatrixLocation[] items_matrix_location
private Size item_size
private int custom_column_width
private int hot_item_index
private bool hot_tracking
private ListViewInsertionMark insertion_mark
private bool show_item_tooltips
private ToolTip item_tooltip
private Size tile_size
private bool virtual_mode
private int virtual_list_size
private bool right_to_left_layout
private bool is_selection_available
internal ImageList large_image_list
internal ImageList small_image_list
internal Size text_size
private object AfterLabelEditEvent
private object BeforeLabelEditEvent
private object ColumnClickEvent
private object ItemActivateEvent
private object ItemCheckEvent
private object ItemDragEvent
private object SelectedIndexChangedEvent
private object DrawColumnHeaderEvent
private object DrawItemEvent
private object DrawSubItemEvent
private object ItemCheckedEvent
private object ItemMouseHoverEvent
private object ItemSelectionChangedEvent
private object CacheVirtualItemsEvent
private object RetrieveVirtualItemEvent
private object RightToLeftLayoutChangedEvent
private object SearchForVirtualItemEvent
private object VirtualItemsSelectionRangeChangedEvent
private int text_padding
private int max_wrap_padding
private int x_spacing
private int y_spacing
private int rows
private int cols
private Int32[0...,0...] item_index_matrix
private ListViewItem selection_start
private bool refocusing
private object ColumnReorderedEvent
private object ColumnWidthChangedEvent
private object ColumnWidthChangingEvent
private object UIALabelEditChangedEvent
private object UIAShowGroupsChangedEvent
private object UIAMultiSelectChangedEvent
private object UIAViewChangedEvent
private object UIACheckBoxesChangedEvent
private object UIAFocusedItemChangedEvent
internal Size CheckBoxSize
internal Size ItemSize
internal int HotItemIndex
internal bool UsingGroups
internal bool ScaleChildrenInternal
internal bool UseCustomColumnWidth
internal ColumnHeader EnteredColumnHeader
protected CreateParams CreateParams
protected Size DefaultSize
protected bool DoubleBuffered
public ItemActivation Activation
public ListViewAlignment Alignment
public bool AllowColumnReorder
public bool AutoArrange
public Color BackColor
public ImageLayout BackgroundImageLayout
public bool BackgroundImageTiled
public BorderStyle BorderStyle
public bool CheckBoxes
public CheckedIndexCollection CheckedIndices
public CheckedListViewItemCollection CheckedItems
public ColumnHeaderCollection Columns
public ListViewItem FocusedItem
public Color ForeColor
public bool FullRowSelect
public bool GridLines
public ColumnHeaderStyle HeaderStyle
public bool HideSelection
public bool HotTracking
public bool HoverSelection
public ListViewInsertionMark InsertionMark
public ListViewItemCollection Items
public bool LabelEdit
public bool LabelWrap
public ImageList LargeImageList
public IComparer ListViewItemSorter
public bool MultiSelect
public bool OwnerDraw
public Padding Padding
public bool RightToLeftLayout
public bool Scrollable
public SelectedIndexCollection SelectedIndices
public SelectedListViewItemCollection SelectedItems
public bool ShowGroups
public ListViewGroupCollection Groups
public bool ShowItemToolTips
public ImageList SmallImageList
public SortOrder Sorting
public ImageList StateImageList
public string Text
public Size TileSize
public ListViewItem TopItem
public bool UseCompatibleStateImageBehavior
public View View
public bool VirtualMode
public int VirtualListSize
internal int FirstVisibleIndex
internal int LastVisibleIndex
internal int TotalWidth
internal int TotalHeight
private Size LargeIconItemSize
private Size SmallIconItemSize
private Size TileItemSize
internal Rectangle UIAHeaderControl
internal int UIAColumns
internal int UIARows
internal ListViewGroup UIADefaultListViewGroup
internal ScrollBar UIAHScrollBar
internal ScrollBar UIAVScrollBar
internal int UIAItemsLocationLength
public void add_AfterLabelEdit(LabelEditEventHandler value)
public void remove_AfterLabelEdit(LabelEditEventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_BeforeLabelEdit(LabelEditEventHandler value)
public void remove_BeforeLabelEdit(LabelEditEventHandler value)
public void add_ColumnClick(ColumnClickEventHandler value)
public void remove_ColumnClick(ColumnClickEventHandler value)
public void add_DrawColumnHeader(DrawListViewColumnHeaderEventHandler value)
public void remove_DrawColumnHeader(DrawListViewColumnHeaderEventHandler value)
public void add_DrawItem(DrawListViewItemEventHandler value)
public void remove_DrawItem(DrawListViewItemEventHandler value)
public void add_DrawSubItem(DrawListViewSubItemEventHandler value)
public void remove_DrawSubItem(DrawListViewSubItemEventHandler value)
public void add_ItemActivate(EventHandler value)
public void remove_ItemActivate(EventHandler value)
public void add_ItemCheck(ItemCheckEventHandler value)
public void remove_ItemCheck(ItemCheckEventHandler value)
public void add_ItemChecked(ItemCheckedEventHandler value)
public void remove_ItemChecked(ItemCheckedEventHandler value)
public void add_ItemDrag(ItemDragEventHandler value)
public void remove_ItemDrag(ItemDragEventHandler value)
public void add_ItemMouseHover(ListViewItemMouseHoverEventHandler value)
public void remove_ItemMouseHover(ListViewItemMouseHoverEventHandler value)
public void add_ItemSelectionChanged(ListViewItemSelectionChangedEventHandler value)
public void remove_ItemSelectionChanged(ListViewItemSelectionChangedEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_SelectedIndexChanged(EventHandler value)
public void remove_SelectedIndexChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_CacheVirtualItems(CacheVirtualItemsEventHandler value)
public void remove_CacheVirtualItems(CacheVirtualItemsEventHandler value)
public void add_RetrieveVirtualItem(RetrieveVirtualItemEventHandler value)
public void remove_RetrieveVirtualItem(RetrieveVirtualItemEventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
public void add_SearchForVirtualItem(SearchForVirtualItemEventHandler value)
public void remove_SearchForVirtualItem(SearchForVirtualItemEventHandler value)
public void add_VirtualItemsSelectionRangeChanged(ListViewVirtualItemsSelectionRangeChangedEventHandler value)
public void remove_VirtualItemsSelectionRangeChanged(ListViewVirtualItemsSelectionRangeChangedEventHandler value)
internal Size get_CheckBoxSize()
internal Size get_ItemSize()
internal void set_ItemSize(Size value)
internal int get_HotItemIndex()
internal void set_HotItemIndex(int value)
internal bool get_UsingGroups()
internal bool get_ScaleChildrenInternal()
internal bool get_UseCustomColumnWidth()
internal ColumnHeader get_EnteredColumnHeader()
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public ItemActivation get_Activation()
public void set_Activation(ItemActivation value)
public ListViewAlignment get_Alignment()
public void set_Alignment(ListViewAlignment value)
public bool get_AllowColumnReorder()
public void set_AllowColumnReorder(bool value)
public bool get_AutoArrange()
public void set_AutoArrange(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public bool get_BackgroundImageTiled()
public void set_BackgroundImageTiled(bool value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public bool get_CheckBoxes()
public void set_CheckBoxes(bool value)
public CheckedIndexCollection get_CheckedIndices()
public CheckedListViewItemCollection get_CheckedItems()
public ColumnHeaderCollection get_Columns()
public ListViewItem get_FocusedItem()
public void set_FocusedItem(ListViewItem value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_FullRowSelect()
public void set_FullRowSelect(bool value)
public bool get_GridLines()
public void set_GridLines(bool value)
public ColumnHeaderStyle get_HeaderStyle()
public void set_HeaderStyle(ColumnHeaderStyle value)
public bool get_HideSelection()
public void set_HideSelection(bool value)
public bool get_HotTracking()
public void set_HotTracking(bool value)
public bool get_HoverSelection()
public void set_HoverSelection(bool value)
public ListViewInsertionMark get_InsertionMark()
public ListViewItemCollection get_Items()
public bool get_LabelEdit()
public void set_LabelEdit(bool value)
public bool get_LabelWrap()
public void set_LabelWrap(bool value)
public ImageList get_LargeImageList()
public void set_LargeImageList(ImageList value)
public IComparer get_ListViewItemSorter()
public void set_ListViewItemSorter(IComparer value)
public bool get_MultiSelect()
public void set_MultiSelect(bool value)
public bool get_OwnerDraw()
public void set_OwnerDraw(bool value)
public Padding get_Padding()
public void set_Padding(Padding value)
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public bool get_Scrollable()
public void set_Scrollable(bool value)
public SelectedIndexCollection get_SelectedIndices()
public SelectedListViewItemCollection get_SelectedItems()
public bool get_ShowGroups()
public void set_ShowGroups(bool value)
public ListViewGroupCollection get_Groups()
public bool get_ShowItemToolTips()
public void set_ShowItemToolTips(bool value)
public ImageList get_SmallImageList()
public void set_SmallImageList(ImageList value)
public SortOrder get_Sorting()
public void set_Sorting(SortOrder value)
private void OnImageListChanged(object sender, EventArgs args)
public ImageList get_StateImageList()
public void set_StateImageList(ImageList value)
public string get_Text()
public void set_Text(string value)
public Size get_TileSize()
public void set_TileSize(Size value)
public ListViewItem get_TopItem()
public void set_TopItem(ListViewItem value)
public bool get_UseCompatibleStateImageBehavior()
public void set_UseCompatibleStateImageBehavior(bool value)
public View get_View()
public void set_View(View value)
public bool get_VirtualMode()
public void set_VirtualMode(bool value)
public int get_VirtualListSize()
public void set_VirtualListSize(int value)
internal int get_FirstVisibleIndex()
internal int get_LastVisibleIndex()
internal void OnSelectedIndexChanged()
internal int get_TotalWidth()
internal int get_TotalHeight()
internal void Redraw(bool recalculate)
private void InvalidateSelection()
internal Size GetChildColumnSize(int index)
private Size BiggestItem(int col)
private void CalcTextSize()
private void SetScrollValue(ScrollBar scrollbar, int val)
private void Scroll(ScrollBar scrollbar, int delta)
private void CalculateScrollBars()
internal int GetReorderedColumnIndex(ColumnHeader column)
internal ColumnHeader GetReorderedColumn(int index)
internal void ReorderColumn(ColumnHeader col, int index, bool fireEvent)
internal void ReorderColumns(Int32[] display_indices, bool redraw)
internal void AddColumn(ColumnHeader newCol, int index, bool redraw)
private Size get_LargeIconItemSize()
private Size get_SmallIconItemSize()
private Size get_TileItemSize()
private int GetDetailsItemHeight()
private void SetItemLocation(int index, int x, int y, int row, int col)
private void ShiftItemsPositions(int from, int to, bool forward)
internal void ChangeItemLocation(int display_index, Point new_pos)
private int GetDisplayIndexFromLocation(Point loc)
private int GetDefaultGroupItems()
private void CalculateRowsAndCols(Size item_size, bool left_aligned, int x_spacing, int y_spacing)
private void CalculateCustomColumnWidth()
private void LayoutIcons(Size item_size, bool left_aligned, int x_spacing, int y_spacing)
private void CalculateGroupsLayout(Size item_size, int y_spacing, int y_origin)
private int LayoutGroupHeader(ListViewGroup group, int y_origin, int item_height, int y_spacing, int rows)
private void CalculateDetailsGroupItemsCount()
private void LayoutHeader()
private void LayoutDetails()
private void AdjustChildrenZOrder()
private void AdjustItemsPositionArray(int count)
private void CalculateListView(ListViewAlignment align)
internal Point GetItemLocation(int index)
private Point GetFixedItemLocation(int index)
internal int GetItemIndex(int display_index)
internal ListViewItem GetItemAtDisplayIndex(int display_index)
internal void SetItemAtDisplayIndex(int display_index, int index)
private bool KeySearchString(KeyEventArgs ke)
private void OnItemsChanged()
private void ResetSearchString()
private int GetAdjustedIndex(Keys key)
private int GetFixedAdjustedIndex(Keys key)
private bool SelectItems(ArrayList sel_items)
private void UpdateMultiSelection(int index, bool reselect)
internal bool InternalPreProcessMessage(Message& msg)
private bool HandleNavKeys(Keys key_data)
private void ToggleItemsCheckState()
private void SelectIndex(int display_index)
private void ListView_KeyDown(object sender, KeyEventArgs ke)
private MouseEventArgs TranslateMouseEventArgs(MouseEventArgs args)
internal void OnPaintInternal(PaintEventArgs pe)
private void FocusChanged(object o, EventArgs args)
private void ListView_Invalidated(object sender, InvalidateEventArgs e)
private void ListView_MouseEnter(object sender, EventArgs args)
private void ListView_MouseWheel(object sender, MouseEventArgs me)
private void ListView_SizeChanged(object sender, EventArgs e)
private void SetFocusedItem(int display_index)
private void HorizontalScroller(object sender, EventArgs e)
private void VerticalScroller(object sender, EventArgs e)
internal bool IsInputCharInternal(char charCode)
protected void CreateHandle()
protected void Dispose(bool disposing)
protected bool IsInputKey(Keys keyData)
protected void OnAfterLabelEdit(LabelEditEventArgs e)
protected void OnBackgroundImageChanged(EventArgs e)
protected void OnBeforeLabelEdit(LabelEditEventArgs e)
protected internal void OnColumnClick(ColumnClickEventArgs e)
protected internal void OnDrawColumnHeader(DrawListViewColumnHeaderEventArgs e)
protected internal void OnDrawItem(DrawListViewItemEventArgs e)
protected internal void OnDrawSubItem(DrawListViewSubItemEventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnItemActivate(EventArgs e)
protected internal void OnItemCheck(ItemCheckEventArgs ice)
protected internal void OnItemChecked(ItemCheckedEventArgs e)
protected void OnItemDrag(ItemDragEventArgs e)
protected void OnItemMouseHover(ListViewItemMouseHoverEventArgs e)
protected internal void OnItemSelectionChanged(ListViewItemSelectionChangedEventArgs e)
protected void OnMouseHover(EventArgs e)
protected void OnParentChanged(EventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void OnSystemColorsChanged(EventArgs e)
protected internal void OnCacheVirtualItems(CacheVirtualItemsEventArgs e)
protected void OnRetrieveVirtualItem(RetrieveVirtualItemEventArgs e)
protected void OnRightToLeftLayoutChanged(EventArgs e)
protected void OnSearchForVirtualItem(SearchForVirtualItemEventArgs e)
protected void OnVirtualItemsSelectionRangeChanged(ListViewVirtualItemsSelectionRangeChangedEventArgs e)
protected void RealizeProperties()
protected void UpdateExtendedStyles()
protected void WndProc(Message& m)
public void ArrangeIcons()
public void ArrangeIcons(ListViewAlignment value)
public void AutoResizeColumn(int columnIndex, ColumnHeaderAutoResizeStyle headerAutoResize)
public void AutoResizeColumns(ColumnHeaderAutoResizeStyle headerAutoResize)
public void BeginUpdate()
public void Clear()
public void EndUpdate()
public void EnsureVisible(int index)
public ListViewItem FindItemWithText(string text)
public ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int startIndex)
public ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch)
internal ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch, bool roundtrip)
public ListViewItem FindNearestItem(SearchDirectionHint searchDirection, int x, int y)
public ListViewItem FindNearestItem(SearchDirectionHint dir, Point point)
public ListViewItem GetItemAt(int x, int y)
public Rectangle GetItemRect(int index)
public Rectangle GetItemRect(int index, ItemBoundsPortion portion)
public ListViewHitTestInfo HitTest(Point point)
public ListViewHitTestInfo HitTest(int x, int y)
public void RedrawItems(int startIndex, int endIndex, bool invalidateOnly)
public void Sort()
private void Sort(bool redraw)
public string ToString()
protected void OnResize(EventArgs e)
protected void OnMouseLeave(EventArgs e)
public void add_ColumnReordered(ColumnReorderedEventHandler value)
public void remove_ColumnReordered(ColumnReorderedEventHandler value)
protected void OnColumnReordered(ColumnReorderedEventArgs e)
public void add_ColumnWidthChanged(ColumnWidthChangedEventHandler value)
public void remove_ColumnWidthChanged(ColumnWidthChangedEventHandler value)
protected void OnColumnWidthChanged(ColumnWidthChangedEventArgs e)
private void RaiseColumnWidthChanged(int resize_column)
public void add_ColumnWidthChanging(ColumnWidthChangingEventHandler value)
public void remove_ColumnWidthChanging(ColumnWidthChangingEventHandler value)
protected void OnColumnWidthChanging(ColumnWidthChangingEventArgs e)
private bool CanProceedWithResize(ColumnHeader col, int width)
internal void RaiseColumnWidthChanged(ColumnHeader column)
internal Rectangle get_UIAHeaderControl()
internal int get_UIAColumns()
internal int get_UIARows()
internal ListViewGroup get_UIADefaultListViewGroup()
internal ScrollBar get_UIAHScrollBar()
internal ScrollBar get_UIAVScrollBar()
internal void add_UIAShowGroupsChanged(EventHandler value)
internal void remove_UIAShowGroupsChanged(EventHandler value)
internal void add_UIACheckBoxesChanged(EventHandler value)
internal void remove_UIACheckBoxesChanged(EventHandler value)
internal void add_UIAMultiSelectChanged(EventHandler value)
internal void remove_UIAMultiSelectChanged(EventHandler value)
internal void add_UIALabelEditChanged(EventHandler value)
internal void remove_UIALabelEditChanged(EventHandler value)
internal void add_UIAViewChanged(EventHandler value)
internal void remove_UIAViewChanged(EventHandler value)
internal void add_UIAFocusedItemChanged(EventHandler value)
internal void remove_UIAFocusedItemChanged(EventHandler value)
internal Rectangle UIAGetHeaderBounds(ListViewGroup group)
internal int get_UIAItemsLocationLength()
private void OnUIACheckBoxesChanged()
private void OnUIAShowGroupsChanged()
private void OnUIAMultiSelectChanged()
private void OnUIALabelEditChanged()
private void OnUIAViewChanged()
internal void OnUIAFocusedItemChanged()
}
public System.Windows.Forms.ListViewAlignment : Enum {
public int value__
public ListViewAlignment Default
public ListViewAlignment Left
public ListViewAlignment Top
public ListViewAlignment SnapToGrid
}
public System.Windows.Forms.ListViewGroup : object {
internal string header
private string name
private HorizontalAlignment header_alignment
private ListView list_view_owner
private ListViewItemCollection items
private object tag
private Rectangle header_bounds
internal int starting_row
internal int starting_item
internal int rows
internal int current_item
internal Point items_area_location
private bool is_default_group
private int item_count
public string Header
public HorizontalAlignment HeaderAlignment
public ListViewItemCollection Items
public ListView ListView
internal ListView ListViewOwner
internal Rectangle HeaderBounds
internal bool IsDefault
internal int ItemCount
public string Name
public object Tag
public void .ctor(string header)
public void .ctor(string key, string headerText)
public void .ctor(string header, HorizontalAlignment headerAlignment)
private void .ctor(SerializationInfo info, StreamingContext context)
public string get_Header()
public void set_Header(string value)
public HorizontalAlignment get_HeaderAlignment()
public void set_HeaderAlignment(HorizontalAlignment value)
public ListViewItemCollection get_Items()
public ListView get_ListView()
internal ListView get_ListViewOwner()
internal void set_ListViewOwner(ListView value)
internal Rectangle get_HeaderBounds()
internal void set_HeaderBounds(Rectangle value)
internal bool get_IsDefault()
internal void set_IsDefault(bool value)
internal int get_ItemCount()
internal void set_ItemCount(int value)
internal int GetActualItemCount()
public string get_Name()
public void set_Name(string value)
public object get_Tag()
public void set_Tag(object value)
public string ToString()
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Windows.Forms.ListViewGroupCollection : object {
private List`1<ListViewGroup> list
private ListView list_view_owner
private ListViewGroup default_group
internal ListView ListViewOwner
public int Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
public ListViewGroup Item
public ListViewGroup Item
internal int InternalCount
internal ListViewGroup DefaultGroup
internal void .ctor(ListView listViewOwner)
internal ListView get_ListViewOwner()
internal void set_ListViewOwner(ListView value)
public IEnumerator GetEnumerator()
public void CopyTo(Array array, int index)
public int get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private int System.Collections.IList.Add(object value)
public int Add(ListViewGroup group)
public ListViewGroup Add(string key, string headerText)
public void Clear()
private bool System.Collections.IList.Contains(object value)
public bool Contains(ListViewGroup value)
private int System.Collections.IList.IndexOf(object value)
public int IndexOf(ListViewGroup value)
private void System.Collections.IList.Insert(int index, object value)
public void Insert(int index, ListViewGroup group)
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private void System.Collections.IList.Remove(object value)
public void Remove(ListViewGroup group)
public void RemoveAt(int index)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public ListViewGroup get_Item(int index)
public void set_Item(int index, ListViewGroup value)
public ListViewGroup get_Item(string key)
public void set_Item(string key, ListViewGroup value)
private int IndexOfKey(string key)
public void AddRange(ListViewGroup[] groups)
public void AddRange(ListViewGroupCollection groups)
internal ListViewGroup GetInternalGroup(int index)
internal int get_InternalCount()
internal ListViewGroup get_DefaultGroup()
private void AddGroup(ListViewGroup group)
private void CheckListViewItemsInGroup(ListViewGroup value)
}
internal System.Windows.Forms.ListViewGroupConverter : TypeConverter {
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
}
public System.Windows.Forms.ListViewHitTestInfo : object {
private ListViewItem item
private ListViewSubItem subItem
private ListViewHitTestLocations location
public ListViewItem Item
public ListViewHitTestLocations Location
public ListViewSubItem SubItem
public void .ctor(ListViewItem hitItem, ListViewSubItem hitSubItem, ListViewHitTestLocations hitLocation)
public ListViewItem get_Item()
public ListViewHitTestLocations get_Location()
public ListViewSubItem get_SubItem()
}
public System.Windows.Forms.ListViewHitTestLocations : Enum {
public int value__
public ListViewHitTestLocations None
public ListViewHitTestLocations Image
public ListViewHitTestLocations Label
public ListViewHitTestLocations BelowClientArea
public ListViewHitTestLocations RightOfClientArea
public ListViewHitTestLocations LeftOfClientArea
public ListViewHitTestLocations AboveClientArea
public ListViewHitTestLocations StateImage
}
public System.Windows.Forms.ListViewInsertionMark : object {
private ListView listview_owner
private bool appears_after_item
private Rectangle bounds
private Nullable`1<Color> color
private int index
public bool AppearsAfterItem
public Rectangle Bounds
public Color Color
public int Index
internal PointF[] TopTriangle
internal PointF[] BottomTriangle
internal Rectangle Line
internal void .ctor(ListView listview)
public bool get_AppearsAfterItem()
public void set_AppearsAfterItem(bool value)
public Rectangle get_Bounds()
public Color get_Color()
public void set_Color(Color value)
public int get_Index()
public void set_Index(int value)
private void UpdateBounds()
public int NearestIndex(Point pt)
internal PointF[] get_TopTriangle()
internal PointF[] get_BottomTriangle()
internal Rectangle get_Line()
}
public System.Windows.Forms.ListViewItem : object {
private int image_index
private bool is_checked
private int state_image_index
private ListViewSubItemCollection sub_items
private object tag
private bool use_item_style
private int display_index
private ListViewGroup group
private string name
private string image_key
private string tooltip_text
private int indent_count
private Point position
private Rectangle bounds
private Rectangle checkbox_rect
private Rectangle icon_rect
private Rectangle item_rect
private Rectangle label_rect
private ListView owner
private Font font
private Font hot_font
private bool selected
internal int row
internal int col
private EventHandler UIATextChanged
private LabelEditEventHandler UIASubItemTextChanged
private Rectangle text_bounds
public Color BackColor
public Rectangle Bounds
public bool Checked
public bool Focused
public Font Font
public Color ForeColor
public int ImageIndex
public string ImageKey
public ImageList ImageList
public int IndentCount
public int Index
public ListView ListView
public string Name
public Point Position
public bool Selected
public int StateImageIndex
public ListViewSubItemCollection SubItems
public object Tag
public string Text
public bool UseItemStyleForSubItems
public ListViewGroup Group
public string ToolTipText
internal Rectangle CheckRectReal
internal Rectangle TextBounds
internal int DisplayIndex
internal bool Hot
internal Font HotFont
internal ListView Owner
internal void add_UIATextChanged(EventHandler value)
internal void remove_UIATextChanged(EventHandler value)
internal void add_UIASubItemTextChanged(LabelEditEventHandler value)
internal void remove_UIASubItemTextChanged(LabelEditEventHandler value)
internal void OnUIATextChanged()
internal void OnUIASubItemTextChanged(LabelEditEventArgs args)
public void .ctor(string text)
public void .ctor(String[] items)
public void .ctor(ListViewSubItem[] subItems, int imageIndex)
public void .ctor(string text, int imageIndex)
public void .ctor(String[] items, int imageIndex)
public void .ctor(String[] items, int imageIndex, Color foreColor, Color backColor, Font font)
public void .ctor(String[] items, string imageKey)
public void .ctor(string text, string imageKey)
public void .ctor(ListViewSubItem[] subItems, string imageKey)
public void .ctor(String[] items, string imageKey, Color foreColor, Color backColor, Font font)
public void .ctor(ListViewGroup group)
public void .ctor(string text, ListViewGroup group)
public void .ctor(String[] items, ListViewGroup group)
public void .ctor(ListViewSubItem[] subItems, int imageIndex, ListViewGroup group)
public void .ctor(ListViewSubItem[] subItems, string imageKey, ListViewGroup group)
public void .ctor(string text, int imageIndex, ListViewGroup group)
public void .ctor(string text, string imageKey, ListViewGroup group)
public void .ctor(String[] items, int imageIndex, ListViewGroup group)
public void .ctor(String[] items, string imageKey, ListViewGroup group)
public void .ctor(String[] items, int imageIndex, Color foreColor, Color backColor, Font font, ListViewGroup group)
public void .ctor(String[] items, string imageKey, Color foreColor, Color backColor, Font font, ListViewGroup group)
protected void .ctor(SerializationInfo info, StreamingContext context)
public Color get_BackColor()
public void set_BackColor(Color value)
public Rectangle get_Bounds()
public bool get_Checked()
public void set_Checked(bool value)
public bool get_Focused()
public void set_Focused(bool value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public int get_ImageIndex()
public void set_ImageIndex(int value)
public string get_ImageKey()
public void set_ImageKey(string value)
public ImageList get_ImageList()
public int get_IndentCount()
public void set_IndentCount(int value)
public int get_Index()
public ListView get_ListView()
public string get_Name()
public void set_Name(string value)
public Point get_Position()
public void set_Position(Point value)
public bool get_Selected()
public void set_Selected(bool value)
internal void SetSelectedCore(bool value)
public int get_StateImageIndex()
public void set_StateImageIndex(int value)
public ListViewSubItemCollection get_SubItems()
public object get_Tag()
public void set_Tag(object value)
public string get_Text()
public void set_Text(string value)
public bool get_UseItemStyleForSubItems()
public void set_UseItemStyleForSubItems(bool value)
public ListViewGroup get_Group()
public void set_Group(ListViewGroup value)
public string get_ToolTipText()
public void set_ToolTipText(string value)
public void BeginEdit()
public object Clone()
public void EnsureVisible()
public ListViewItem FindNearestItem(SearchDirectionHint searchDirection)
public Rectangle GetBounds(ItemBoundsPortion portion)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
public ListViewSubItem GetSubItemAt(int x, int y)
public void Remove()
public string ToString()
protected void Deserialize(SerializationInfo info, StreamingContext context)
protected void Serialize(SerializationInfo info, StreamingContext context)
internal Rectangle get_CheckRectReal()
internal Rectangle get_TextBounds()
internal int get_DisplayIndex()
internal void set_DisplayIndex(int value)
internal bool get_Hot()
internal Font get_HotFont()
internal void set_Owner(ListView value)
internal void SetGroup(ListViewGroup group)
internal void SetPosition(Point position)
private void UpdateFocusedState()
internal void Invalidate()
internal void Layout()
}
public System.Windows.Forms.ListViewItemConverter : ExpandableObjectConverter {
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Windows.Forms.ListViewItemMouseHoverEventArgs : EventArgs {
private ListViewItem item
public ListViewItem Item
public void .ctor(ListViewItem item)
public ListViewItem get_Item()
}
public System.Windows.Forms.ListViewItemMouseHoverEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ListViewItemMouseHoverEventArgs e)
public IAsyncResult BeginInvoke(object sender, ListViewItemMouseHoverEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ListViewItemSelectionChangedEventArgs : EventArgs {
private bool is_selected
private ListViewItem item
private int item_index
public ListViewItem Item
public bool IsSelected
public int ItemIndex
public void .ctor(ListViewItem item, int itemIndex, bool isSelected)
public ListViewItem get_Item()
public bool get_IsSelected()
public int get_ItemIndex()
}
public System.Windows.Forms.ListViewItemSelectionChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ListViewItemSelectionChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ListViewItemSelectionChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ListViewItemStates : Enum {
public int value__
public ListViewItemStates Selected
public ListViewItemStates Grayed
public ListViewItemStates Checked
public ListViewItemStates Focused
public ListViewItemStates Default
public ListViewItemStates Hot
public ListViewItemStates Marked
public ListViewItemStates Indeterminate
public ListViewItemStates ShowKeyboardCues
}
internal System.Windows.Forms.ListViewSubItemConverter : ExpandableObjectConverter {
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs : EventArgs {
private bool is_selected
private int end_index
private int start_index
public int StartIndex
public bool IsSelected
public int EndIndex
public void .ctor(int startIndex, int endIndex, bool isSelected)
public int get_StartIndex()
public bool get_IsSelected()
public int get_EndIndex()
}
public System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ListViewVirtualItemsSelectionRangeChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ListViewVirtualItemsSelectionRangeChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.Locale : object {
private ResourceManager rm
public ResourceManager ResourceManager
public ResourceManager get_ResourceManager()
public string GetText(string msg)
public string GetText(string msg, Object[] args)
}
public System.Windows.Forms.MainMenu : Menu {
private RightToLeft right_to_left
private Form form
private object CollapseEvent
private object PaintEvent
public RightToLeft RightToLeft
public void .ctor(MenuItem[] items)
public void .ctor(IContainer container)
public void add_Collapse(EventHandler value)
public void remove_Collapse(EventHandler value)
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public MainMenu CloneMenu()
protected IntPtr CreateMenuHandle()
protected void Dispose(bool disposing)
public Form GetForm()
public string ToString()
protected internal void OnCollapse(EventArgs e)
internal void Draw()
internal void Draw(Rectangle rect)
internal void Draw(PaintEventArgs pe)
internal void Draw(PaintEventArgs pe, Rectangle rect)
internal void InvalidateItem(MenuItem item)
internal void SetForm(Form form)
internal void OnMenuChanged(EventArgs e)
internal void OnMouseDown(object window, MouseEventArgs args)
internal void OnMouseMove(object window, MouseEventArgs e)
internal void add_Paint(PaintEventHandler value)
internal void remove_Paint(PaintEventHandler value)
}
internal System.Windows.Forms.MapState : Enum {
public int value__
public MapState IsUnmapped
public MapState IsUnviewable
public MapState IsViewable
}
public System.Windows.Forms.MaskedTextBox : TextBoxBase {
private MaskedTextProvider provider
private bool beep_on_error
private IFormatProvider format_provider
private bool hide_prompt_on_leave
private InsertKeyMode insert_key_mode
private bool insert_key_overwriting
private bool reject_input_on_first_failure
private HorizontalAlignment text_align
private MaskFormat cut_copy_mask_format
private bool use_system_password_char
private Type validating_type
private bool is_empty_mask
private bool setting_text
private object AcceptsTabChangedEvent
private object IsOverwriteModeChangedEvent
private object MaskChangedEvent
private object MaskInputRejectedEvent
private object MultilineChangedEvent
private object TextAlignChangedEvent
private object TypeValidationCompletedEvent
public bool AcceptsTab
public bool AllowPromptAsInput
public bool AsciiOnly
public bool BeepOnError
public bool CanUndo
protected CreateParams CreateParams
public CultureInfo Culture
public MaskFormat CutCopyMaskFormat
public IFormatProvider FormatProvider
public bool HidePromptOnLeave
public InsertKeyMode InsertKeyMode
public bool IsOverwriteMode
public String[] Lines
public string Mask
public bool MaskCompleted
public MaskedTextProvider MaskedTextProvider
public bool MaskFull
public int MaxLength
public bool Multiline
public char PasswordChar
public char PromptChar
public bool ReadOnly
public bool RejectInputOnFirstFailure
public bool ResetOnPrompt
public bool ResetOnSpace
public string SelectedText
public bool SkipLiterals
public string Text
public HorizontalAlignment TextAlign
public int TextLength
public MaskFormat TextMaskFormat
public bool UseSystemPasswordChar
public Type ValidatingType
public bool WordWrap
public void add_AcceptsTabChanged(EventHandler value)
public void remove_AcceptsTabChanged(EventHandler value)
public void add_IsOverwriteModeChanged(EventHandler value)
public void remove_IsOverwriteModeChanged(EventHandler value)
public void add_MaskChanged(EventHandler value)
public void remove_MaskChanged(EventHandler value)
public void add_MaskInputRejected(MaskInputRejectedEventHandler value)
public void remove_MaskInputRejected(MaskInputRejectedEventHandler value)
public void add_MultilineChanged(EventHandler value)
public void remove_MultilineChanged(EventHandler value)
public void add_TextAlignChanged(EventHandler value)
public void remove_TextAlignChanged(EventHandler value)
public void add_TypeValidationCompleted(TypeValidationEventHandler value)
public void remove_TypeValidationCompleted(TypeValidationEventHandler value)
public void .ctor(MaskedTextProvider maskedTextProvider)
public void .ctor(string mask)
private void Init()
public void ClearUndo()
protected void CreateHandle()
public char GetCharFromPosition(Point pt)
public int GetCharIndexFromPosition(Point pt)
public int GetFirstCharIndexFromLine(int lineNumber)
public int GetFirstCharIndexOfCurrentLine()
public int GetLineFromCharIndex(int index)
public Point GetPositionFromCharIndex(int index)
protected bool IsInputKey(Keys keyData)
protected void OnBackColorChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnIsOverwriteModeChanged(EventArgs e)
protected void OnKeyDown(KeyEventArgs e)
protected void OnKeyPress(KeyPressEventArgs e)
private void PostprocessKeyboardInput(bool result, int newPosition, int testPosition, MaskedTextResultHint resultHint)
protected void OnKeyUp(KeyEventArgs e)
protected void OnMaskChanged(EventArgs e)
private void OnMaskInputRejected(MaskInputRejectedEventArgs e)
protected void OnMultilineChanged(EventArgs e)
protected void OnTextAlignChanged(EventArgs e)
protected void OnTextChanged(EventArgs e)
protected void OnValidating(CancelEventArgs e)
protected bool ProcessCmdKey(Message& msg, Keys keyData)
protected internal bool ProcessKeyMessage(Message& m)
public void ScrollToCaret()
public string ToString()
public void Undo()
public object ValidateText()
protected void WndProc(Message& m)
public bool get_AcceptsTab()
public void set_AcceptsTab(bool value)
public bool get_AllowPromptAsInput()
public void set_AllowPromptAsInput(bool value)
public bool get_AsciiOnly()
public void set_AsciiOnly(bool value)
public bool get_BeepOnError()
public void set_BeepOnError(bool value)
public bool get_CanUndo()
protected CreateParams get_CreateParams()
public CultureInfo get_Culture()
public void set_Culture(CultureInfo value)
public MaskFormat get_CutCopyMaskFormat()
public void set_CutCopyMaskFormat(MaskFormat value)
public IFormatProvider get_FormatProvider()
public void set_FormatProvider(IFormatProvider value)
public bool get_HidePromptOnLeave()
public void set_HidePromptOnLeave(bool value)
public InsertKeyMode get_InsertKeyMode()
public void set_InsertKeyMode(InsertKeyMode value)
public bool get_IsOverwriteMode()
public String[] get_Lines()
public void set_Lines(String[] value)
public string get_Mask()
public void set_Mask(string value)
public bool get_MaskCompleted()
public MaskedTextProvider get_MaskedTextProvider()
public bool get_MaskFull()
public int get_MaxLength()
public void set_MaxLength(int value)
public bool get_Multiline()
public void set_Multiline(bool value)
public char get_PasswordChar()
public void set_PasswordChar(char value)
public char get_PromptChar()
public void set_PromptChar(char value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public bool get_RejectInputOnFirstFailure()
public void set_RejectInputOnFirstFailure(bool value)
public bool get_ResetOnPrompt()
public void set_ResetOnPrompt(bool value)
public bool get_ResetOnSpace()
public void set_ResetOnSpace(bool value)
public string get_SelectedText()
public void set_SelectedText(string value)
public bool get_SkipLiterals()
public void set_SkipLiterals(bool value)
public string get_Text()
public void set_Text(string value)
public HorizontalAlignment get_TextAlign()
public void set_TextAlign(HorizontalAlignment value)
public int get_TextLength()
public MaskFormat get_TextMaskFormat()
public void set_TextMaskFormat(MaskFormat value)
public bool get_UseSystemPasswordChar()
public void set_UseSystemPasswordChar(bool value)
public Type get_ValidatingType()
public void set_ValidatingType(Type value)
public bool get_WordWrap()
public void set_WordWrap(bool value)
private void ReCalculatePasswordChar()
private void ReCalculatePasswordChar(bool using_password)
internal void OnPaintInternal(PaintEventArgs pevent)
internal Color ChangeBackColor(Color backColor)
private void UpdateVisibleText()
private void InputText(string text)
}
public System.Windows.Forms.MaskFormat : Enum {
public int value__
public MaskFormat ExcludePromptAndLiterals
public MaskFormat IncludePrompt
public MaskFormat IncludeLiterals
public MaskFormat IncludePromptAndLiterals
}
public System.Windows.Forms.MaskInputRejectedEventArgs : EventArgs {
private int position
private MaskedTextResultHint rejection_hint
public int Position
public MaskedTextResultHint RejectionHint
public void .ctor(int position, MaskedTextResultHint rejectionHint)
public int get_Position()
public MaskedTextResultHint get_RejectionHint()
}
public System.Windows.Forms.MaskInputRejectedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MaskInputRejectedEventArgs e)
public IAsyncResult BeginInvoke(object sender, MaskInputRejectedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.MasterMount : object {
private bool proc_mount_available
private ArrayList block_devices
private ArrayList network_devices
private ArrayList removable_devices
private MountComparer mountComparer
public ArrayList Block_devices
public ArrayList Network_devices
public ArrayList Removable_devices
public bool ProcMountAvailable
public ArrayList get_Block_devices()
public ArrayList get_Network_devices()
public ArrayList get_Removable_devices()
public bool get_ProcMountAvailable()
public void GetMounts()
private void ProcessProcMountLine(string line)
}
internal System.Windows.Forms.Match : object {
private string mimeType
private int priority
private ArrayList matchlets
public string MimeType
public int Priority
public ArrayList Matchlets
public void set_MimeType(string value)
public string get_MimeType()
public void set_Priority(int value)
public int get_Priority()
public ArrayList get_Matchlets()
}
internal System.Windows.Forms.Matchlet : object {
private Byte[] byteValue
private Byte[] mask
private int offset
private int offsetLength
private int wordSize
private ArrayList matchlets
public Byte[] ByteValue
public Byte[] Mask
public int Offset
public int OffsetLength
public int WordSize
public ArrayList Matchlets
public void set_ByteValue(Byte[] value)
public Byte[] get_ByteValue()
public void set_Mask(Byte[] value)
public Byte[] get_Mask()
public void set_Offset(int value)
public int get_Offset()
public void set_OffsetLength(int value)
public int get_OffsetLength()
public void set_WordSize(int value)
public int get_WordSize()
public ArrayList get_Matchlets()
}
public System.Windows.Forms.MdiClient : Control {
private int mdi_created
private ImplicitHScrollBar hbar
private ImplicitVScrollBar vbar
private SizeGrip sizegrip
private int hbar_value
private int vbar_value
private bool lock_sizing
private bool initializing_scrollbars
private int prev_bottom
private bool setting_windowstates
internal ArrayList mdi_child_list
private string form_text
private bool setting_form_text
private Form active_child
internal bool HorizontalScrollbarVisible
internal bool VerticalScrollbarVisible
internal Form ParentForm
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public Form[] MdiChildren
protected CreateParams CreateParams
internal int ChildrenCreated
internal Form ActiveMdiChild
internal void SendFocusToActiveChild()
internal bool get_HorizontalScrollbarVisible()
internal bool get_VerticalScrollbarVisible()
internal void SetParentText(bool text_changed)
internal void OnPaintBackgroundInternal(PaintEventArgs pe)
internal Form get_ParentForm()
protected ControlCollection CreateControlsInstance()
protected void WndProc(Message& m)
protected void OnResize(EventArgs e)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
protected void ScaleCore(float dx, float dy)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public Form[] get_MdiChildren()
protected CreateParams get_CreateParams()
public void LayoutMdi(MdiLayout value)
internal void SizeScrollBars()
private void CalcHBar(int left, int right, bool vert_vis)
private void CalcVBar(int top, int bottom, bool horz_vis)
private void HBarValueChanged(object sender, EventArgs e)
private void VBarValueChanged(object sender, EventArgs e)
private void ArrangeWindows()
internal void ArrangeIconicWindows(bool rearrange_all)
internal void ChildFormClosed(Form form)
internal void ActivateNextChild()
internal void ActivatePreviousChild()
internal void ActivateChild(Form form)
internal IntPtr AfterTopMostControl()
internal bool SetWindowStates(MdiWindowManager wm)
private MenuStrip LookForChildMenu(Control parent)
internal void RemoveControlMenuItems(MdiWindowManager wm)
internal void SetWindowState(Form form, FormWindowState old_window_state, FormWindowState new_window_state, bool is_activating_child)
internal int get_ChildrenCreated()
internal void set_ChildrenCreated(int value)
internal Form get_ActiveMdiChild()
internal void set_ActiveMdiChild(Form value)
internal void ActivateActiveMdiChild()
}
public System.Windows.Forms.MdiLayout : Enum {
public int value__
public MdiLayout Cascade
public MdiLayout TileHorizontal
public MdiLayout TileVertical
public MdiLayout ArrangeIcons
}
internal System.Windows.Forms.MdiWindowManager : InternalWindowManager {
private MainMenu merged_menu
private MainMenu maximized_menu
private MenuItem icon_menu
private ContextMenu icon_popup_menu
internal bool was_minimized
private PaintEventHandler draw_maximized_buttons
internal EventHandler form_closed_handler
private MdiClient mdi_container
private Rectangle prev_virtual_position
private Point icon_clicked
private DateTime icon_clicked_time
private bool icon_dont_show_popup
private TitleButtons maximized_title_buttons
private bool is_visible_pending
private byte last_activation_event
public int MenuHeight
internal bool IsVisiblePending
private TitleButtons MaximizedTitleButtons
internal Rectangle MaximizedBounds
public MainMenu MergedMenu
public MainMenu MaximizedMenu
public bool IsActive
public void RaiseActivated()
public void RaiseDeactivate()
public int get_MenuHeight()
internal bool get_IsVisiblePending()
internal void set_IsVisiblePending(bool value)
private TitleButtons get_MaximizedTitleButtons()
internal Rectangle get_MaximizedBounds()
public void .ctor(Form form, MdiClient mdi_container)
private void FormVisibleChangedHandler(object sender, EventArgs e)
private void FormTextChangedHandler(object sender, EventArgs e)
private void FormLocationChangedHandler(object sender, EventArgs e)
private void FormSizeChangedHandler(object sender, EventArgs e)
public MainMenu get_MergedMenu()
private MainMenu CreateMergedMenu()
public MainMenu get_MaximizedMenu()
private MainMenu CreateMaximizedMenu()
private void CreateIconMenus()
private void ClickIconMenuItem(object sender, EventArgs e)
internal void ShowPopup(Point pnt)
private void RestoreItemHandler(object sender, EventArgs e)
private void MoveItemHandler(object sender, EventArgs e)
private void SizeItemHandler(object sender, EventArgs e)
private void MinimizeItemHandler(object sender, EventArgs e)
private void MaximizeItemHandler(object sender, EventArgs e)
private void CloseItemHandler(object sender, EventArgs e)
private void NextItemHandler(object sender, EventArgs e)
private void DrawIconMenuItem(object sender, DrawItemEventArgs de)
private void MeasureIconMenuItem(object sender, MeasureItemEventArgs me)
private void MenuChangedHandler(object sender, EventArgs e)
public void PointToClient(Int32& x, Int32& y)
public void PointToScreen(Int32& x, Int32& y)
public void UpdateWindowDecorations(FormWindowState window_state)
public void SetWindowState(FormWindowState old_state, FormWindowState window_state)
private void FormClosed(object sender, EventArgs e)
public void DrawMaximizedButtons(object sender, PaintEventArgs pe)
public bool HandleMenuMouseDown(MainMenu menu, int x, int y)
public void HandleMenuMouseUp(MainMenu menu, int x, int y)
public void HandleMenuMouseLeave(MainMenu menu, int x, int y)
public void HandleMenuMouseMove(MainMenu menu, int x, int y)
protected void HandleTitleBarLeave(int x, int y)
protected void HandleTitleBarUp(int x, int y)
protected void HandleTitleBarDoubleClick(int x, int y)
protected void HandleTitleBarDown(int x, int y)
protected void HandleTitleBarMouseMove(int x, int y)
protected bool HandleLButtonDblClick(Message& m)
protected bool HandleLButtonDown(Message& m)
protected bool ShouldRemoveWindowManager(FormBorderStyle style)
protected void HandleWindowMove(Message m)
protected bool HandleNCMouseMove(Message& m)
protected void DrawVirtualPosition(Rectangle virtual_position)
protected void ClearVirtualPosition()
protected void OnWindowFinishedMoving()
public bool get_IsActive()
protected void Activate()
}
public System.Windows.Forms.MeasureItemEventArgs : EventArgs {
private Graphics graphics
private int index
private int itemHeight
private int itemWidth
public Graphics Graphics
public int Index
public int ItemHeight
public int ItemWidth
public void .ctor(Graphics graphics, int index)
public void .ctor(Graphics graphics, int index, int itemHeight)
public Graphics get_Graphics()
public int get_Index()
public int get_ItemHeight()
public void set_ItemHeight(int value)
public int get_ItemWidth()
public void set_ItemWidth(int value)
}
public System.Windows.Forms.MeasureItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MeasureItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, MeasureItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.Menu : Component {
internal MenuItemCollection menu_items
internal IntPtr menu_handle
internal Menu parent_menu
private Rectangle rect
internal Control Wnd
internal MenuTracker tracker
private string control_name
private object control_tag
public int FindHandle
public int FindShortcut
private object MenuChangedEvent
public IntPtr Handle
public bool IsParent
public MenuItem MdiListItem
public MenuItemCollection MenuItems
public string Name
public object Tag
internal Rectangle Rect
internal MenuItem SelectedItem
internal int Height
internal int Width
internal int X
internal int Y
internal MenuTracker Tracker
protected void .ctor(MenuItem[] items)
public IntPtr get_Handle()
internal void OnMenuChanged(EventArgs e)
public bool get_IsParent()
public MenuItem get_MdiListItem()
public MenuItemCollection get_MenuItems()
public string get_Name()
public void set_Name(string value)
public object get_Tag()
public void set_Tag(object value)
internal Rectangle get_Rect()
internal MenuItem get_SelectedItem()
internal int get_Height()
internal void set_Height(int value)
internal int get_Width()
internal void set_Width(int value)
internal int get_X()
internal void set_X(int value)
internal int get_Y()
internal void set_Y(int value)
internal MenuTracker get_Tracker()
protected void CloneMenu(Menu menuSrc)
protected IntPtr CreateMenuHandle()
protected void Dispose(bool disposing)
public MenuItem FindMenuItem(int type, IntPtr value)
protected int FindMergePosition(int mergeOrder)
public ContextMenu GetContextMenu()
public MainMenu GetMainMenu()
internal void InvalidateItem(MenuItem item)
public void MergeMenu(Menu menuSrc)
protected internal bool ProcessCmdKey(Message& msg, Keys keyData)
public string ToString()
internal void add_MenuChanged(EventHandler value)
internal void remove_MenuChanged(EventHandler value)
}
public System.Windows.Forms.MenuGlyph : Enum {
public int value__
public MenuGlyph Arrow
public MenuGlyph Min
public MenuGlyph Checkmark
public MenuGlyph Bullet
public MenuGlyph Max
}
public System.Windows.Forms.MenuItem : Menu {
internal bool separator
internal bool break_
internal bool bar_break
private Shortcut shortcut
private string text
private bool checked_
private bool radiocheck
private bool enabled
private char mnemonic
private bool showshortcut
private int index
private bool mdilist
private Hashtable mdilist_items
private Hashtable mdilist_forms
private MdiClient mdicontainer
private bool is_window_menu_item
private bool defaut_item
private bool visible
private bool ownerdraw
private int menuid
private int mergeorder
private int xtab
private int menuheight
private bool menubar
private MenuMerge mergetype
internal Rectangle bounds
private object ClickEvent
private object DrawItemEvent
private object MeasureItemEvent
private object PopupEvent
private object SelectEvent
private object UIACheckedChangedEvent
private object UIARadioCheckChangedEvent
private object UIAEnabledChangedEvent
private object UIATextChangedEvent
private bool selected
public bool BarBreak
public bool Break
public bool Checked
public bool DefaultItem
public bool Enabled
public int Index
public bool IsParent
public bool MdiList
protected int MenuID
public int MergeOrder
public MenuMerge MergeType
public char Mnemonic
public bool OwnerDraw
public Menu Parent
public bool RadioCheck
public Shortcut Shortcut
public bool ShowShortcut
public string Text
public bool Visible
internal int Height
internal bool IsPopup
internal bool MeasureEventDefined
internal bool MenuBar
internal int MenuHeight
internal bool Selected
internal bool Separator
internal DrawItemState Status
internal bool VisibleItems
internal int Width
internal int X
internal int XTab
internal int Y
public void .ctor(string text)
public void .ctor(string text, EventHandler onClick)
public void .ctor(string text, MenuItem[] items)
public void .ctor(string text, EventHandler onClick, Shortcut shortcut)
public void .ctor(MenuMerge mergeType, int mergeOrder, Shortcut shortcut, string text, EventHandler onClick, EventHandler onPopup, EventHandler onSelect, MenuItem[] items)
private void CommonConstructor(string text)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DrawItem(DrawItemEventHandler value)
public void remove_DrawItem(DrawItemEventHandler value)
public void add_MeasureItem(MeasureItemEventHandler value)
public void remove_MeasureItem(MeasureItemEventHandler value)
public void add_Popup(EventHandler value)
public void remove_Popup(EventHandler value)
public void add_Select(EventHandler value)
public void remove_Select(EventHandler value)
internal void add_UIACheckedChanged(EventHandler value)
internal void remove_UIACheckedChanged(EventHandler value)
internal void OnUIACheckedChanged(EventArgs e)
internal void add_UIARadioCheckChanged(EventHandler value)
internal void remove_UIARadioCheckChanged(EventHandler value)
internal void OnUIARadioCheckChanged(EventArgs e)
internal void add_UIAEnabledChanged(EventHandler value)
internal void remove_UIAEnabledChanged(EventHandler value)
internal void OnUIAEnabledChanged(EventArgs e)
internal void add_UIATextChanged(EventHandler value)
internal void remove_UIATextChanged(EventHandler value)
internal void OnUIATextChanged(EventArgs e)
public bool get_BarBreak()
public void set_BarBreak(bool value)
public bool get_Break()
public void set_Break(bool value)
public bool get_Checked()
public void set_Checked(bool value)
public bool get_DefaultItem()
public void set_DefaultItem(bool value)
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_Index()
public void set_Index(int value)
public bool get_IsParent()
public bool get_MdiList()
public void set_MdiList(bool value)
protected int get_MenuID()
public int get_MergeOrder()
public void set_MergeOrder(int value)
public MenuMerge get_MergeType()
public void set_MergeType(MenuMerge value)
public char get_Mnemonic()
public bool get_OwnerDraw()
public void set_OwnerDraw(bool value)
public Menu get_Parent()
public bool get_RadioCheck()
public void set_RadioCheck(bool value)
public Shortcut get_Shortcut()
public void set_Shortcut(Shortcut value)
public bool get_ShowShortcut()
public void set_ShowShortcut(bool value)
public string get_Text()
public void set_Text(string value)
public bool get_Visible()
public void set_Visible(bool value)
internal int get_Height()
internal void set_Height(int value)
internal bool get_IsPopup()
internal bool get_MeasureEventDefined()
internal bool get_MenuBar()
internal void set_MenuBar(bool value)
internal int get_MenuHeight()
internal void set_MenuHeight(int value)
internal bool get_Selected()
internal void set_Selected(bool value)
internal bool get_Separator()
internal void set_Separator(bool value)
internal DrawItemState get_Status()
internal bool get_VisibleItems()
internal int get_Width()
internal void set_Width(int value)
internal int get_X()
internal void set_X(int value)
internal int get_XTab()
internal void set_XTab(int value)
internal int get_Y()
internal void set_Y(int value)
public MenuItem CloneMenu()
protected void CloneMenu(MenuItem itemSrc)
protected void Dispose(bool disposing)
public MenuItem MergeMenu()
public void MergeMenu(MenuItem itemSrc)
protected void OnClick(EventArgs e)
protected void OnDrawItem(DrawItemEventArgs e)
protected void OnInitMenuPopup(EventArgs e)
protected void OnMeasureItem(MeasureItemEventArgs e)
protected void OnPopup(EventArgs e)
protected void OnSelect(EventArgs e)
public void PerformClick()
public void PerformSelect()
public string ToString()
internal void Invalidate()
internal void PerformPopup()
internal void PerformDrawItem(DrawItemEventArgs e)
private void PopulateWindowMenu()
internal void PerformMeasureItem(MeasureItemEventArgs e)
private void ProcessMnemonic()
private string GetShortCutTextCtrl()
private string GetShortCutTextAlt()
private string GetShortCutTextShift()
internal string GetShortCutText()
private void MdiWindowClickHandler(object sender, EventArgs e)
private void UpdateMenuItem()
}
public System.Windows.Forms.MenuMerge : Enum {
public int value__
public MenuMerge Add
public MenuMerge Replace
public MenuMerge MergeItems
public MenuMerge Remove
}
public System.Windows.Forms.MenuStrip : ToolStrip {
private ToolStripMenuItem mdi_window_list_item
private object MenuActivateEvent
private object MenuDeactivateEvent
public bool CanOverflow
public ToolStripGripStyle GripStyle
public ToolStripMenuItem MdiWindowListItem
public bool ShowItemToolTips
public bool Stretch
protected Padding DefaultGripMargin
protected Padding DefaultPadding
protected bool DefaultShowItemToolTips
protected Size DefaultSize
internal bool KeyboardActive
internal bool MenuDroppedDown
public bool get_CanOverflow()
public void set_CanOverflow(bool value)
public ToolStripGripStyle get_GripStyle()
public void set_GripStyle(ToolStripGripStyle value)
public ToolStripMenuItem get_MdiWindowListItem()
public void set_MdiWindowListItem(ToolStripMenuItem value)
public bool get_ShowItemToolTips()
public void set_ShowItemToolTips(bool value)
public bool get_Stretch()
public void set_Stretch(bool value)
protected Padding get_DefaultGripMargin()
protected Padding get_DefaultPadding()
protected bool get_DefaultShowItemToolTips()
protected Size get_DefaultSize()
protected AccessibleObject CreateAccessibilityInstance()
protected internal ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick)
protected void OnMenuActivate(EventArgs e)
protected void OnMenuDeactivate(EventArgs e)
protected bool ProcessCmdKey(Message& m, Keys keyData)
protected void WndProc(Message& m)
public void add_MenuActivate(EventHandler value)
public void remove_MenuActivate(EventHandler value)
public void add_MenuDeactivate(EventHandler value)
public void remove_MenuDeactivate(EventHandler value)
internal bool get_KeyboardActive()
internal void set_KeyboardActive(bool value)
internal bool get_MenuDroppedDown()
internal void set_MenuDroppedDown(bool value)
internal void Dismiss(ToolStripDropDownCloseReason reason)
internal void FireMenuActivate()
internal void FireMenuDeactivate()
internal bool OnMenuKey()
private void ToolStripMenuTracker_AppFocusChange(object sender, EventArgs e)
private void ToolStripMenuTracker_AppClicked(object sender, EventArgs e)
internal void RefreshMdiItems()
private ToolStripMenuItem FindMdiMenuItemOfForm(Form f)
private int CountMdiMenuItems()
private bool NeedToReorderMdi()
private void ReorderMdiMenu()
}
internal System.Windows.Forms.MenuTracker : object {
internal bool active
internal bool popup_active
internal bool popdown_menu
internal bool hotkey_active
private bool mouse_down
public Menu CurrentMenu
public Menu TopMenu
public Control GrabControl
private Point last_motion
private KeyNavState keynav_state
private Hashtable shortcuts
public bool Navigating
public void .ctor(Menu top_menu)
public bool get_Navigating()
internal Point ScreenToMenu(Menu menu, Point pnt)
private void UpdateCursor()
internal void Deactivate()
private MenuItem FindItemByCoords(Menu menu, Point pt)
private MenuItem GetItemAtXY(int x, int y)
public bool OnMouseDown(MouseEventArgs args)
public void OnMotion(MouseEventArgs args)
public void OnMouseUp(MouseEventArgs args)
public bool TrackPopupMenu(Menu menu, Point pnt)
private void DeselectItem(MenuItem item)
private void SelectItem(Menu menu, MenuItem item, bool execute)
private void ExecFocusedItem(Menu menu, MenuItem item)
private void ShowSubPopup(Menu menu, MenuItem item)
public void HideSubPopups(Menu menu, Menu topmenu)
private MenuItem FindSubItemByCoord(Menu menu, Point pnt)
private MenuItem FindItemByKey(Menu menu, IntPtr key)
private MenuItem GetNextItem(Menu menu, ItemNavigation navigation)
private void ProcessMenuKey(Msg msg_type)
private bool ProcessMnemonic(Message msg, Keys key_data)
public void AddShortcuts(MenuItem item)
public void RemoveShortcuts(MenuItem item)
private bool ProcessShortcut(Keys keyData)
public bool ProcessKeys(Message& msg, Keys keyData)
}
public System.Windows.Forms.MergeAction : Enum {
public int value__
public MergeAction Append
public MergeAction Insert
public MergeAction Replace
public MergeAction Remove
public MergeAction MatchOnly
}
public System.Windows.Forms.Message : ValueType {
private int msg
private IntPtr hwnd
private IntPtr lParam
private IntPtr wParam
private IntPtr result
public IntPtr HWnd
public IntPtr LParam
public int Msg
public IntPtr Result
public IntPtr WParam
public IntPtr get_HWnd()
public void set_HWnd(IntPtr value)
public IntPtr get_LParam()
public void set_LParam(IntPtr value)
public int get_Msg()
public void set_Msg(int value)
public IntPtr get_Result()
public void set_Result(IntPtr value)
public IntPtr get_WParam()
public void set_WParam(IntPtr value)
public Message Create(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam)
public bool op_Equality(Message a, Message b)
public bool op_Inequality(Message a, Message b)
public bool Equals(object o)
public int GetHashCode()
public object GetLParam(Type cls)
public string ToString()
}
public System.Windows.Forms.MessageBox : object {
public DialogResult Show(string text)
public DialogResult Show(IWin32Window owner, string text)
public DialogResult Show(string text, string caption)
public DialogResult Show(string text, string caption, MessageBoxButtons buttons)
public DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons)
public DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon)
public DialogResult Show(IWin32Window owner, string text, string caption)
public DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon)
public DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton)
public DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton)
public DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options)
public DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options)
public DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, bool displayHelpButton)
public DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath)
public DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, string keyword)
public DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator)
public DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator, object param)
public DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath)
public DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, string keyword)
public DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator)
public DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator, object param)
}
public System.Windows.Forms.MessageBoxButtons : Enum {
public int value__
public MessageBoxButtons OK
public MessageBoxButtons OKCancel
public MessageBoxButtons AbortRetryIgnore
public MessageBoxButtons YesNoCancel
public MessageBoxButtons YesNo
public MessageBoxButtons RetryCancel
}
public System.Windows.Forms.MessageBoxDefaultButton : Enum {
public int value__
public MessageBoxDefaultButton Button1
public MessageBoxDefaultButton Button2
public MessageBoxDefaultButton Button3
}
public System.Windows.Forms.MessageBoxIcon : Enum {
public int value__
public MessageBoxIcon None
public MessageBoxIcon Error
public MessageBoxIcon Hand
public MessageBoxIcon Stop
public MessageBoxIcon Question
public MessageBoxIcon Exclamation
public MessageBoxIcon Warning
public MessageBoxIcon Asterisk
public MessageBoxIcon Information
}
public System.Windows.Forms.MessageBoxOptions : Enum {
public int value__
public MessageBoxOptions DefaultDesktopOnly
public MessageBoxOptions RightAlign
public MessageBoxOptions RtlReading
public MessageBoxOptions ServiceNotification
}
public System.Windows.Forms.MethodInvoker : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.Mime : object {
public Mime Instance
private string current_file_name
private string global_result
private FileStream file_stream
private Byte[] buffer
private string octet_stream
private string text_plain
private string zero_file
private StringDictionary mime_file_cache
private int mime_file_cache_max_size
private string search_string
private object lock_object
private bool is_zero_file
private int bytes_read
private bool mime_available
public NameValueCollection Aliases
public NameValueCollection SubClasses
public NameValueCollection GlobalPatternsShort
public NameValueCollection GlobalPatternsLong
public NameValueCollection GlobalLiterals
public NameValueCollection GlobalSufPref
public ArrayList Matches80Plus
public ArrayList MatchesBelow80
public bool MimeAvailable
public bool get_MimeAvailable()
public string GetMimeTypeForFile(string filename)
public string GetMimeTypeForData(Byte[] data)
public string GetMimeTypeForString(string input)
public string GetMimeAlias(string mimetype)
public string GetMimeSubClass(string mimetype)
public void CleanFileCache()
private void StartByFileName(string filename)
private void StartDataLookup(Byte[] data)
private void StartStringLookup(string input)
private void GoByFileName()
private bool CheckMatch80Plus()
private bool FastEndsWidth(string input, string value)
private bool FastStartsWith(string input, string value)
private int FastIndexOf(string input, char value)
private int FastIndexOf(string input, string value)
private void CheckGlobalResult()
private bool CheckGlobalPatterns()
private bool CheckMatchBelow80()
private void CheckForBinaryOrText()
private bool TestMatch(Match match)
private bool TestMatchlet(Matchlet matchlet)
private bool OpenFile()
private bool CheckForContentTypeString()
}
internal System.Windows.Forms.MimeExtensionHandlerStatus : Enum {
public int value__
public MimeExtensionHandlerStatus OK
public MimeExtensionHandlerStatus ERROR
}
internal System.Windows.Forms.MimeIconEngine : object {
public ImageList SmallIcons
public ImageList LargeIcons
private EPlatformHandler platform
internal Hashtable MimeIconIndex
private PlatformMimeIconHandler platformMimeHandler
private object lock_object
public int GetIconIndexForFile(string full_filename)
public int GetIconIndexForMimeType(string mime_type)
public Image GetIconForMimeTypeAndSize(string mime_type, Size size)
internal void AddIconByImage(string mime_type, Image image)
private object GetIconIndex(string mime_type)
}
internal System.Windows.Forms.MINMAXINFO : ValueType {
internal POINT ptReserved
internal POINT ptMaxSize
internal POINT ptMaxPosition
internal POINT ptMinTrackSize
internal POINT ptMaxTrackSize
}
internal System.Windows.Forms.MiscKeys : Enum {
public int value__
public MiscKeys XK_ISO_Lock
public MiscKeys XK_ISO_Last_Group_Lock
public MiscKeys XK_Select
public MiscKeys XK_Print
public MiscKeys XK_Execute
public MiscKeys XK_Insert
public MiscKeys XK_Undo
public MiscKeys XK_Redo
public MiscKeys XK_Menu
public MiscKeys XK_Find
public MiscKeys XK_Cancel
public MiscKeys XK_Help
public MiscKeys XK_Break
public MiscKeys XK_Mode_switch
public MiscKeys XK_script_switch
public MiscKeys XK_Num_Lock
}
public System.Windows.Forms.MonthCalendar : Control {
private ArrayList annually_bolded_dates
private ArrayList monthly_bolded_dates
private ArrayList bolded_dates
private Size calendar_dimensions
private Day first_day_of_week
private DateTime max_date
private int max_selection_count
private DateTime min_date
private int scroll_change
private SelectionRange selection_range
private bool show_today
private bool show_today_circle
private bool show_week_numbers
private Color title_back_color
private Color title_fore_color
private DateTime today_date
private bool today_date_set
private Color trailing_fore_color
private ContextMenu today_menu
private ContextMenu month_menu
private Timer timer
private Timer updown_timer
private int initial_delay
private int subsequent_delay
private bool is_year_going_up
private bool is_year_going_down
private bool is_mouse_moving_year
private int year_moving_count
private bool date_selected_event_pending
private bool right_to_left_layout
internal bool show_year_updown
internal DateTime current_month
internal DateTimePicker owner
internal int button_x_offset
internal Size button_size
internal Size title_size
internal Size date_cell_size
internal Size calendar_spacing
internal int divider_line_offset
internal DateTime clicked_date
internal Rectangle clicked_rect
internal bool is_date_clicked
internal bool is_previous_clicked
internal bool is_next_clicked
internal bool is_shift_pressed
internal DateTime first_select_start_date
internal int last_clicked_calendar_index
internal Rectangle last_clicked_calendar_rect
internal Font bold_font
internal StringFormat centered_format
private Point month_title_click_location
private Boolean[] click_state
private object DateChangedEvent
private object DateSelectedEvent
private object RightToLeftLayoutChangedEvent
private PaintEventHandler Paint
private object UIAMaxSelectionCountChangedEvent
private object UIASelectionChangedEvent
public DateTime[] AnnuallyBoldedDates
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public Color BackColor
public DateTime[] BoldedDates
public Size CalendarDimensions
protected bool DoubleBuffered
public Day FirstDayOfWeek
public Color ForeColor
public ImeMode ImeMode
public DateTime MaxDate
public int MaxSelectionCount
public DateTime MinDate
public DateTime[] MonthlyBoldedDates
public Padding Padding
public bool RightToLeftLayout
public int ScrollChange
public DateTime SelectionEnd
public SelectionRange SelectionRange
public DateTime SelectionStart
public bool ShowToday
public bool ShowTodayCircle
public bool ShowWeekNumbers
public Size SingleMonthSize
public Size Size
public string Text
public Color TitleBackColor
public Color TitleForeColor
public DateTime TodayDate
public bool TodayDateSet
public Color TrailingForeColor
protected CreateParams CreateParams
protected ImeMode DefaultImeMode
protected Padding DefaultMargin
protected Size DefaultSize
internal bool IsYearGoingUp
internal bool IsYearGoingDown
internal bool ShowYearUpDown
internal DateTime CurrentMonth
internal bool InternalCapture
internal void .ctor(DateTimePicker owner)
public void set_AnnuallyBoldedDates(DateTime[] value)
public DateTime[] get_AnnuallyBoldedDates()
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public void set_BackColor(Color value)
public Color get_BackColor()
public void set_BoldedDates(DateTime[] value)
public DateTime[] get_BoldedDates()
public void set_CalendarDimensions(Size value)
public Size get_CalendarDimensions()
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public void set_FirstDayOfWeek(Day value)
public Day get_FirstDayOfWeek()
public void set_ForeColor(Color value)
public Color get_ForeColor()
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public void set_MaxDate(DateTime value)
public DateTime get_MaxDate()
public void set_MaxSelectionCount(int value)
public int get_MaxSelectionCount()
public void set_MinDate(DateTime value)
public DateTime get_MinDate()
public void set_MonthlyBoldedDates(DateTime[] value)
public DateTime[] get_MonthlyBoldedDates()
public Padding get_Padding()
public void set_Padding(Padding value)
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public void set_ScrollChange(int value)
public int get_ScrollChange()
public void set_SelectionEnd(DateTime value)
public DateTime get_SelectionEnd()
public void set_SelectionRange(SelectionRange value)
public SelectionRange get_SelectionRange()
public void set_SelectionStart(DateTime value)
public DateTime get_SelectionStart()
public void set_ShowToday(bool value)
public bool get_ShowToday()
public void set_ShowTodayCircle(bool value)
public bool get_ShowTodayCircle()
public void set_ShowWeekNumbers(bool value)
public bool get_ShowWeekNumbers()
public Size get_SingleMonthSize()
public Size get_Size()
public void set_Size(Size value)
public string get_Text()
public void set_Text(string value)
public void set_TitleBackColor(Color value)
public Color get_TitleBackColor()
public void set_TitleForeColor(Color value)
public Color get_TitleForeColor()
public void set_TodayDate(DateTime value)
public DateTime get_TodayDate()
public bool get_TodayDateSet()
public void set_TrailingForeColor(Color value)
public Color get_TrailingForeColor()
protected CreateParams get_CreateParams()
protected ImeMode get_DefaultImeMode()
protected Padding get_DefaultMargin()
protected Size get_DefaultSize()
public void AddAnnuallyBoldedDate(DateTime date)
public void AddBoldedDate(DateTime date)
public void AddMonthlyBoldedDate(DateTime date)
public SelectionRange GetDisplayRange(bool visible)
public HitTestInfo HitTest(int x, int y)
public HitTestInfo HitTest(Point point)
public void RemoveAllAnnuallyBoldedDates()
public void RemoveAllBoldedDates()
public void RemoveAllMonthlyBoldedDates()
public void RemoveAnnuallyBoldedDate(DateTime date)
public void RemoveBoldedDate(DateTime date)
public void RemoveMonthlyBoldedDate(DateTime date)
public void SetCalendarDimensions(int x, int y)
public void SetDate(DateTime date)
public void SetSelectionRange(DateTime date1, DateTime date2)
public string ToString()
public void UpdateBoldedDates()
protected void CreateHandle()
protected void Dispose(bool disposing)
protected bool IsInputKey(Keys keyData)
protected void OnBackColorChanged(EventArgs e)
protected void OnDateChanged(DateRangeEventArgs drevent)
protected void OnDateSelected(DateRangeEventArgs drevent)
protected void OnFontChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnRightToLeftLayoutChanged(EventArgs e)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void WndProc(Message& m)
public void add_DateChanged(DateRangeEventHandler value)
public void remove_DateChanged(DateRangeEventHandler value)
public void add_DateSelected(DateRangeEventHandler value)
public void remove_DateSelected(DateRangeEventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
private void AddYears(int years, bool fast)
internal bool get_IsYearGoingUp()
internal void set_IsYearGoingUp(bool value)
internal bool get_IsYearGoingDown()
internal void set_IsYearGoingDown(bool value)
internal bool get_ShowYearUpDown()
internal void set_ShowYearUpDown(bool value)
internal void set_CurrentMonth(DateTime value)
internal DateTime get_CurrentMonth()
internal HitTestInfo HitTest(Point point, Int32& calendar_index, Rectangle& calendar_rect)
internal DateTime GetFirstDateInMonthGrid(DateTime month)
internal DateTime GetLastDateInMonthGrid(DateTime month)
internal bool IsBoldedDate(DateTime date)
private void SetUpTodayMenu()
private void SetUpMonthMenu()
private DateTime GetFirstDateInMonth(DateTime date)
private DateTime GetLastDateInMonth(DateTime date)
private void AddTimeToSelection(int delta, bool isDays)
private void SelectDate(DateTime date)
internal int GetWeekOfYear(DateTime date)
internal DayOfWeek GetDayOfWeek(Day day)
internal Rectangle GetMonthNameRectangle(Rectangle title_rect, int calendar_index)
internal void GetYearNameRectangles(Rectangle title_rect, int calendar_index, Rectangle& year_rect, Rectangle& up_rect, Rectangle& down_rect)
internal Rectangle GetYearNameRectangle(Rectangle title_rect, int calendar_index)
internal bool IsValidWeekToDraw(DateTime month, DateTime date, int row, int col)
private void SetItemClick(HitTestInfo hti)
private void TodayMenuItemClickHandler(object sender, EventArgs e)
private void MonthMenuItemClickHandler(object sender, EventArgs e)
private void TimerHandler(object sender, EventArgs e)
private void DoButtonMouseDown(HitTestInfo hti)
private void DoDateMouseDown(HitTestInfo hti)
private void DoMouseUp()
private void UpDownTimerTick(object sender, EventArgs e)
private void StartHideTimer()
private void MouseMoveHandler(object sender, MouseEventArgs e)
private void MouseDownHandler(object sender, MouseEventArgs e)
private void KeyDownHandler(object sender, KeyEventArgs e)
private void MouseUpHandler(object sender, MouseEventArgs e)
private void KeyUpHandler(object sender, KeyEventArgs e)
private void PaintHandler(object sender, PaintEventArgs pe)
private void InvalidateDateRange(SelectionRange range)
private Rectangle GetDateRowRect(DateTime month, DateTime date)
internal void Draw(Rectangle clip_rect, Graphics dc)
internal bool get_InternalCapture()
internal void set_InternalCapture(bool value)
internal void add_UIAMaxSelectionCountChanged(EventHandler value)
internal void remove_UIAMaxSelectionCountChanged(EventHandler value)
internal void add_UIASelectionChanged(EventHandler value)
internal void remove_UIASelectionChanged(EventHandler value)
private void OnUIAMaxSelectionCountChanged()
private void OnUIASelectionChanged()
}
internal System.Windows.Forms.MotifDecorations : Enum {
public int value__
public MotifDecorations All
public MotifDecorations Border
public MotifDecorations ResizeH
public MotifDecorations Title
public MotifDecorations Menu
public MotifDecorations Minimize
public MotifDecorations Maximize
}
internal System.Windows.Forms.MotifFlags : Enum {
public int value__
public MotifFlags Functions
public MotifFlags Decorations
public MotifFlags InputMode
public MotifFlags Status
}
internal System.Windows.Forms.MotifFunctions : Enum {
public int value__
public MotifFunctions All
public MotifFunctions Resize
public MotifFunctions Move
public MotifFunctions Minimize
public MotifFunctions Maximize
public MotifFunctions Close
}
internal System.Windows.Forms.MotifInputMode : Enum {
public int value__
public MotifInputMode Modeless
public MotifInputMode ApplicationModal
public MotifInputMode SystemModal
public MotifInputMode FullApplicationModal
}
internal System.Windows.Forms.MotifWmHints : ValueType {
internal IntPtr flags
internal IntPtr functions
internal IntPtr decorations
internal IntPtr input_mode
internal IntPtr status
public string ToString()
}
public System.Windows.Forms.MouseButtons : Enum {
public int value__
public MouseButtons None
public MouseButtons Left
public MouseButtons Right
public MouseButtons Middle
public MouseButtons XButton1
public MouseButtons XButton2
}
public System.Windows.Forms.MouseEventArgs : EventArgs {
private MouseButtons buttons
private int clicks
private int delta
private int x
private int y
public MouseButtons Button
public int Clicks
public int Delta
public int X
public int Y
public Point Location
public void .ctor(MouseButtons button, int clicks, int x, int y, int delta)
public MouseButtons get_Button()
public int get_Clicks()
public int get_Delta()
public int get_X()
public int get_Y()
public Point get_Location()
}
public System.Windows.Forms.MouseEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MouseEventArgs e)
public IAsyncResult BeginInvoke(object sender, MouseEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.MouseKeyMasks : Enum {
public int value__
public MouseKeyMasks Button1Mask
public MouseKeyMasks Button2Mask
public MouseKeyMasks Button3Mask
public MouseKeyMasks Button4Mask
public MouseKeyMasks Button5Mask
}
internal System.Windows.Forms.MouseWheelListBox : ListBox {
public void SendMouseWheelEvent(MouseEventArgs e)
}
internal System.Windows.Forms.Msg : Enum {
public int value__
public Msg WM_NULL
public Msg WM_CREATE
public Msg WM_DESTROY
public Msg WM_MOVE
public Msg WM_SIZE
public Msg WM_ACTIVATE
public Msg WM_SETFOCUS
public Msg WM_KILLFOCUS
public Msg WM_ENABLE
public Msg WM_SETREDRAW
public Msg WM_SETTEXT
public Msg WM_GETTEXT
public Msg WM_GETTEXTLENGTH
public Msg WM_PAINT
public Msg WM_CLOSE
public Msg WM_QUERYENDSESSION
public Msg WM_QUIT
public Msg WM_QUERYOPEN
public Msg WM_ERASEBKGND
public Msg WM_SYSCOLORCHANGE
public Msg WM_ENDSESSION
public Msg WM_SHOWWINDOW
public Msg WM_CTLCOLOR
public Msg WM_WININICHANGE
public Msg WM_SETTINGCHANGE
public Msg WM_DEVMODECHANGE
public Msg WM_ACTIVATEAPP
public Msg WM_FONTCHANGE
public Msg WM_TIMECHANGE
public Msg WM_CANCELMODE
public Msg WM_SETCURSOR
public Msg WM_MOUSEACTIVATE
public Msg WM_CHILDACTIVATE
public Msg WM_QUEUESYNC
public Msg WM_GETMINMAXINFO
public Msg WM_PAINTICON
public Msg WM_ICONERASEBKGND
public Msg WM_NEXTDLGCTL
public Msg WM_SPOOLERSTATUS
public Msg WM_DRAWITEM
public Msg WM_MEASUREITEM
public Msg WM_DELETEITEM
public Msg WM_VKEYTOITEM
public Msg WM_CHARTOITEM
public Msg WM_SETFONT
public Msg WM_GETFONT
public Msg WM_SETHOTKEY
public Msg WM_GETHOTKEY
public Msg WM_QUERYDRAGICON
public Msg WM_COMPAREITEM
public Msg WM_GETOBJECT
public Msg WM_COMPACTING
public Msg WM_COMMNOTIFY
public Msg WM_WINDOWPOSCHANGING
public Msg WM_WINDOWPOSCHANGED
public Msg WM_POWER
public Msg WM_COPYDATA
public Msg WM_CANCELJOURNAL
public Msg WM_NOTIFY
public Msg WM_INPUTLANGCHANGEREQUEST
public Msg WM_INPUTLANGCHANGE
public Msg WM_TCARD
public Msg WM_HELP
public Msg WM_USERCHANGED
public Msg WM_NOTIFYFORMAT
public Msg WM_CONTEXTMENU
public Msg WM_STYLECHANGING
public Msg WM_STYLECHANGED
public Msg WM_DISPLAYCHANGE
public Msg WM_GETICON
public Msg WM_SETICON
public Msg WM_NCCREATE
public Msg WM_NCDESTROY
public Msg WM_NCCALCSIZE
public Msg WM_NCHITTEST
public Msg WM_NCPAINT
public Msg WM_NCACTIVATE
public Msg WM_GETDLGCODE
public Msg WM_SYNCPAINT
public Msg WM_NCMOUSEMOVE
public Msg WM_NCLBUTTONDOWN
public Msg WM_NCLBUTTONUP
public Msg WM_NCLBUTTONDBLCLK
public Msg WM_NCRBUTTONDOWN
public Msg WM_NCRBUTTONUP
public Msg WM_NCRBUTTONDBLCLK
public Msg WM_NCMBUTTONDOWN
public Msg WM_NCMBUTTONUP
public Msg WM_NCMBUTTONDBLCLK
public Msg WM_KEYDOWN
public Msg WM_KEYFIRST
public Msg WM_KEYUP
public Msg WM_CHAR
public Msg WM_DEADCHAR
public Msg WM_SYSKEYDOWN
public Msg WM_SYSKEYUP
public Msg WM_SYSCHAR
public Msg WM_SYSDEADCHAR
public Msg WM_KEYLAST
public Msg WM_IME_STARTCOMPOSITION
public Msg WM_IME_ENDCOMPOSITION
public Msg WM_IME_COMPOSITION
public Msg WM_IME_KEYLAST
public Msg WM_INITDIALOG
public Msg WM_COMMAND
public Msg WM_SYSCOMMAND
public Msg WM_TIMER
public Msg WM_HSCROLL
public Msg WM_VSCROLL
public Msg WM_INITMENU
public Msg WM_INITMENUPOPUP
public Msg WM_MENUSELECT
public Msg WM_MENUCHAR
public Msg WM_ENTERIDLE
public Msg WM_MENURBUTTONUP
public Msg WM_MENUDRAG
public Msg WM_MENUGETOBJECT
public Msg WM_UNINITMENUPOPUP
public Msg WM_MENUCOMMAND
public Msg WM_CHANGEUISTATE
public Msg WM_UPDATEUISTATE
public Msg WM_QUERYUISTATE
public Msg WM_CTLCOLORMSGBOX
public Msg WM_CTLCOLOREDIT
public Msg WM_CTLCOLORLISTBOX
public Msg WM_CTLCOLORBTN
public Msg WM_CTLCOLORDLG
public Msg WM_CTLCOLORSCROLLBAR
public Msg WM_CTLCOLORSTATIC
public Msg WM_MOUSEMOVE
public Msg WM_MOUSEFIRST
public Msg WM_LBUTTONDOWN
public Msg WM_LBUTTONUP
public Msg WM_LBUTTONDBLCLK
public Msg WM_RBUTTONDOWN
public Msg WM_RBUTTONUP
public Msg WM_RBUTTONDBLCLK
public Msg WM_MBUTTONDOWN
public Msg WM_MBUTTONUP
public Msg WM_MBUTTONDBLCLK
public Msg WM_MOUSEWHEEL
public Msg WM_MOUSELAST
public Msg WM_PARENTNOTIFY
public Msg WM_ENTERMENULOOP
public Msg WM_EXITMENULOOP
public Msg WM_NEXTMENU
public Msg WM_SIZING
public Msg WM_CAPTURECHANGED
public Msg WM_MOVING
public Msg WM_DEVICECHANGE
public Msg WM_MDICREATE
public Msg WM_MDIDESTROY
public Msg WM_MDIACTIVATE
public Msg WM_MDIRESTORE
public Msg WM_MDINEXT
public Msg WM_MDIMAXIMIZE
public Msg WM_MDITILE
public Msg WM_MDICASCADE
public Msg WM_MDIICONARRANGE
public Msg WM_MDIGETACTIVE
public Msg WM_MDISETMENU
public Msg WM_ENTERSIZEMOVE
public Msg WM_EXITSIZEMOVE
public Msg WM_DROPFILES
public Msg WM_MDIREFRESHMENU
public Msg WM_IME_SETCONTEXT
public Msg WM_IME_NOTIFY
public Msg WM_IME_CONTROL
public Msg WM_IME_COMPOSITIONFULL
public Msg WM_IME_SELECT
public Msg WM_IME_CHAR
public Msg WM_IME_REQUEST
public Msg WM_IME_KEYDOWN
public Msg WM_IME_KEYUP
public Msg WM_NCMOUSEHOVER
public Msg WM_MOUSEHOVER
public Msg WM_NCMOUSELEAVE
public Msg WM_MOUSELEAVE
public Msg WM_CUT
public Msg WM_COPY
public Msg WM_PASTE
public Msg WM_CLEAR
public Msg WM_UNDO
public Msg WM_RENDERFORMAT
public Msg WM_RENDERALLFORMATS
public Msg WM_DESTROYCLIPBOARD
public Msg WM_DRAWCLIPBOARD
public Msg WM_PAINTCLIPBOARD
public Msg WM_VSCROLLCLIPBOARD
public Msg WM_SIZECLIPBOARD
public Msg WM_ASKCBFORMATNAME
public Msg WM_CHANGECBCHAIN
public Msg WM_HSCROLLCLIPBOARD
public Msg WM_QUERYNEWPALETTE
public Msg WM_PALETTEISCHANGING
public Msg WM_PALETTECHANGED
public Msg WM_HOTKEY
public Msg WM_PRINT
public Msg WM_PRINTCLIENT
public Msg WM_HANDHELDFIRST
public Msg WM_HANDHELDLAST
public Msg WM_AFXFIRST
public Msg WM_AFXLAST
public Msg WM_PENWINFIRST
public Msg WM_PENWINLAST
public Msg WM_APP
public Msg WM_USER
public Msg WM_MOUSE_ENTER
public Msg WM_ASYNC_MESSAGE
public Msg WM_REFLECT
public Msg WM_CLOSE_INTERNAL
public Msg WM_XIM_PREEDITSTART
public Msg WM_XIM_PREEDITDONE
public Msg WM_XIM_PREEDITDRAW
public Msg WM_XIM_PREEDITCARET
public Msg NIN_BALLOONSHOW
public Msg NIN_BALLOONHIDE
public Msg NIN_BALLOONTIMEOUT
public Msg NIN_BALLOONUSERCLICK
}
internal System.Windows.Forms.MSG : ValueType {
internal IntPtr hwnd
internal Msg message
internal IntPtr wParam
internal IntPtr lParam
internal UInt32 time
internal POINT pt
internal object refobject
public string ToString()
}
internal System.Windows.Forms.MsgButtons : Enum {
public int value__
public MsgButtons MK_LBUTTON
public MsgButtons MK_RBUTTON
public MsgButtons MK_SHIFT
public MsgButtons MK_CONTROL
public MsgButtons MK_MBUTTON
public MsgButtons MK_XBUTTON1
public MsgButtons MK_XBUTTON2
}
internal System.Windows.Forms.MsgUIState : Enum {
public int value__
public MsgUIState UIS_SET
public MsgUIState UIS_CLEAR
public MsgUIState UIS_INITIALIZE
public MsgUIState UISF_HIDEFOCUS
public MsgUIState UISF_HIDEACCEL
public MsgUIState UISF_ACTIVE
}
internal System.Windows.Forms.MWFConfig : object {
private MWFConfigInstance Instance
private object lock_object
public object GetValue(string class_name, string value_name)
public void SetValue(string class_name, string value_name, object value)
public void Flush()
public void RemoveClass(string class_name)
public void RemoveClassValue(string class_name, string value_name)
public void RemoveAllClassValues(string class_name)
}
internal System.Windows.Forms.MWFFileView : ListView {
private ThumbnailCreator thumbCreator
private ArrayList filterArrayList
private bool showHiddenFiles
private string selectedFilesString
private int filterIndex
private ToolTip toolTip
private int oldItemIndexForToolTip
private ContextMenu contextMenu
private MenuItem menuItemView
private MenuItem menuItemNew
private MenuItem smallIconMenutItem
private MenuItem tilesMenutItem
private MenuItem largeIconMenutItem
private MenuItem listMenutItem
private MenuItem detailsMenutItem
private MenuItem newFolderMenuItem
private MenuItem showHiddenFilesMenuItem
private int previousCheckedMenuItemIndex
private ArrayList viewMenuItemClones
private FSEntry currentFSEntry
private string currentFolder
private string currentRealFolder
private FSEntry currentFolderFSEntry
private Stack directoryStack
private ArrayList dirStackControlsOrComponents
private ToolBarButton folderUpToolBarButton
private ArrayList registered_senders
private bool should_push
private MWFVFS vfs
private View old_view
private int old_menuitem_index
private bool do_update_view
private ColumnHeader[] columns
private object MSelectedFileChangedEvent
private object MSelectedFilesChangedEvent
private object MDirectoryChangedEvent
private object MForceDialogEndEvent
public string CurrentFolder
public string CurrentRealFolder
public FSEntry CurrentFSEntry
public MenuItem[] ViewMenuItems
public ArrayList FilterArrayList
public bool ShowHiddenFiles
public int FilterIndex
public string SelectedFilesString
public void .ctor(MWFVFS vfs)
private ColumnHeader CreateColumnHeader(string text, int width, HorizontalAlignment alignment)
public string get_CurrentFolder()
public void set_CurrentFolder(string value)
public string get_CurrentRealFolder()
public FSEntry get_CurrentFSEntry()
public MenuItem[] get_ViewMenuItems()
public void set_FilterArrayList(ArrayList value)
public ArrayList get_FilterArrayList()
public void set_ShowHiddenFiles(bool value)
public bool get_ShowHiddenFiles()
public void set_FilterIndex(int value)
public int get_FilterIndex()
public void set_SelectedFilesString(string value)
public string get_SelectedFilesString()
public void PushDir()
public void PopDir()
public void PopDir(string filter)
public void RegisterSender(IUpdateFolder iud)
public void CreateNewFolder()
public void SetSelectedIndexTo(string fname)
public void OneDirUp()
public void OneDirUp(string filter)
public void ChangeDirectory(object sender, string folder)
public void ChangeDirectory(object sender, string folder, string filter)
public void UpdateFileView()
internal void StopThumbnailCreation()
public void UpdateFileView(string custom_filter)
public void RealFileViewUpdate(ArrayList directoriesArrayList, ArrayList fileArrayList)
private void RedrawTheItem(FileViewListViewItem fi)
public void AddControlToEnableDisableByDirStack(object control)
public void SetFolderUpToolBarButton(ToolBarButton tb)
public void WriteRecentlyUsed(string fullfilename)
private void EnableOrDisableDirstackObjects()
private void DoOneFSEntry(FSEntry fsEntry)
private void MWF_KeyDown(object sender, KeyEventArgs e)
internal void PerformClick()
internal void PerformDoubleClick()
protected void OnClick(EventArgs e)
protected void OnDoubleClick(EventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void OnMouseMove(MouseEventArgs e)
private void OnClickContextMenu(object sender, EventArgs e)
private void OnClickViewMenuSubItem(object sender, EventArgs e)
protected void OnBeforeLabelEdit(LabelEditEventArgs e)
protected void OnAfterLabelEdit(LabelEditEventArgs e)
private void UpdateMenuItems(MenuItem senderMenuItem)
private void OnClickNewFolderMenuItem(object sender, EventArgs e)
public void add_SelectedFileChanged(EventHandler value)
public void remove_SelectedFileChanged(EventHandler value)
public void add_SelectedFilesChanged(EventHandler value)
public void remove_SelectedFilesChanged(EventHandler value)
public void add_DirectoryChanged(EventHandler value)
public void remove_DirectoryChanged(EventHandler value)
public void add_ForceDialogEnd(EventHandler value)
public void remove_ForceDialogEnd(EventHandler value)
private void DeleteOldThumbnails()
protected void Dispose(bool disposing)
}
internal System.Windows.Forms.MwfFileViewItemComparer : object {
private int column_index
private bool asc
public int ColumnIndex
public bool Ascendent
public void .ctor(bool asc)
public int get_ColumnIndex()
public void set_ColumnIndex(int value)
public bool get_Ascendent()
public void set_Ascendent(bool value)
public int Compare(object a, object b)
}
internal System.Windows.Forms.MWFVFS : object {
private FileSystem fileSystem
public string DesktopPrefix
public string PersonalPrefix
public string MyComputerPrefix
public string RecentlyUsedPrefix
public string MyNetworkPrefix
public string MyComputerPersonalPrefix
public Hashtable MyComputerDevicesPrefix
private UpdateDelegate updateDelegate
private Control calling_control
private ThreadStart get_folder_content_thread_start
private Thread worker
private WorkerThread workerThread
private StringCollection the_filters
public FSEntry ChangeDirectory(string folder)
public void GetFolderContent()
public void GetFolderContent(StringCollection filters)
public ArrayList GetFoldersOnly()
public void WriteRecentlyUsedFiles(string filename)
public ArrayList GetRecentlyUsedFiles()
public ArrayList GetMyComputerContent()
public ArrayList GetMyNetworkContent()
public bool CreateFolder(string new_folder)
public bool MoveFolder(string sourceDirName, string destDirName)
public bool MoveFile(string sourceFileName, string destFileName)
public string GetParent()
public void RegisterUpdateDelegate(UpdateDelegate updateDelegate, Control control)
}
public System.Windows.Forms.NativeWindow : MarshalByRefObject {
private IntPtr window_handle
private Hashtable window_collection
private NativeWindow WindowCreating
public IntPtr Handle
public IntPtr get_Handle()
public NativeWindow FromHandle(IntPtr handle)
internal void InvalidateHandle()
public void AssignHandle(IntPtr handle)
private void AddToTable(NativeWindow window)
private void RemoveFromTable(NativeWindow window)
private NativeWindow FindFirstInTable(IntPtr handle)
public void CreateHandle(CreateParams cp)
public void DefWndProc(Message& m)
public void DestroyHandle()
public void ReleaseHandle()
protected void Finalize()
protected void OnHandleChange()
protected void OnThreadException(Exception e)
protected void WndProc(Message& m)
internal IntPtr WndProc(IntPtr hWnd, Msg msg, IntPtr wParam, IntPtr lParam)
private void HandleRedCrossPaint(object sender, PaintEventArgs e)
private NativeWindow EnsureCreated(NativeWindow window, IntPtr hWnd)
}
public System.Windows.Forms.NavigateEventArgs : EventArgs {
private bool forward
public bool Forward
public void .ctor(bool isForward)
public bool get_Forward()
}
public System.Windows.Forms.NavigateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, NavigateEventArgs ne)
public IAsyncResult BeginInvoke(object sender, NavigateEventArgs ne, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.NetWindowManagerState : Enum {
public int value__
public NetWindowManagerState Remove
public NetWindowManagerState Add
public NetWindowManagerState Toggle
}
internal System.Windows.Forms.NetWmMoveResize : Enum {
public int value__
public NetWmMoveResize _NET_WM_MOVERESIZE_SIZE_TOPLEFT
public NetWmMoveResize _NET_WM_MOVERESIZE_SIZE_TOP
public NetWmMoveResize _NET_WM_MOVERESIZE_SIZE_TOPRIGHT
public NetWmMoveResize _NET_WM_MOVERESIZE_SIZE_RIGHT
public NetWmMoveResize _NET_WM_MOVERESIZE_SIZE_BOTTOMRIGHT
public NetWmMoveResize _NET_WM_MOVERESIZE_SIZE_BOTTOM
public NetWmMoveResize _NET_WM_MOVERESIZE_SIZE_BOTTOMLEFT
public NetWmMoveResize _NET_WM_MOVERESIZE_SIZE_LEFT
public NetWmMoveResize _NET_WM_MOVERESIZE_MOVE
public NetWmMoveResize _NET_WM_MOVERESIZE_SIZE_KEYBOARD
public NetWmMoveResize _NET_WM_MOVERESIZE_MOVE_KEYBOARD
public NetWmMoveResize _NET_WM_MOVERESIZE_CANCEL
}
internal System.Windows.Forms.NetWmStateRequest : Enum {
public int value__
public NetWmStateRequest _NET_WM_STATE_REMOVE
public NetWmStateRequest _NET_WM_STATE_ADD
public NetWmStateRequest _NET_WM_STATE_TOGGLE
}
public System.Windows.Forms.NodeLabelEditEventArgs : EventArgs {
private TreeNode node
private string label
private bool cancel
public bool CancelEdit
public TreeNode Node
public string Label
public void .ctor(TreeNode node)
public void .ctor(TreeNode node, string label)
public bool get_CancelEdit()
public void set_CancelEdit(bool value)
public TreeNode get_Node()
public string get_Label()
internal void SetLabel(string label)
}
public System.Windows.Forms.NodeLabelEditEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, NodeLabelEditEventArgs e)
public IAsyncResult BeginInvoke(object sender, NodeLabelEditEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.NotifyDetail : Enum {
public int value__
public NotifyDetail NotifyAncestor
public NotifyDetail NotifyVirtual
public NotifyDetail NotifyInferior
public NotifyDetail NotifyNonlinear
public NotifyDetail NotifyNonlinearVirtual
public NotifyDetail NotifyPointer
public NotifyDetail NotifyPointerRoot
public NotifyDetail NotifyDetailNone
}
public System.Windows.Forms.NotifyIcon : Component {
private ContextMenu context_menu
private Icon icon
private Bitmap icon_bitmap
private string text
private bool visible
private NotifyIconWindow window
private bool systray_active
private ToolTip tooltip
private bool double_click
private string balloon_text
private string balloon_title
private ToolTipIcon balloon_icon
private ContextMenuStrip context_menu_strip
private object tag
private object ClickEvent
private object DoubleClickEvent
private object MouseDownEvent
private object MouseMoveEvent
private object MouseUpEvent
private object BalloonTipClickedEvent
private object BalloonTipClosedEvent
private object BalloonTipShownEvent
private object MouseClickEvent
private object MouseDoubleClickEvent
public ToolTipIcon BalloonTipIcon
public string BalloonTipText
public string BalloonTipTitle
public ContextMenu ContextMenu
public ContextMenuStrip ContextMenuStrip
public Icon Icon
public object Tag
public string Text
public bool Visible
public void .ctor(IContainer container)
public void ShowBalloonTip(int timeout)
public void ShowBalloonTip(int timeout, string tipTitle, string tipText, ToolTipIcon tipIcon)
private void OnBalloonTipClicked(EventArgs e)
private void OnBalloonTipClosed(EventArgs e)
private void OnBalloonTipShown(EventArgs e)
private void OnClick(EventArgs e)
private void OnDoubleClick(EventArgs e)
private void OnMouseClick(MouseEventArgs e)
private void OnMouseDoubleClick(MouseEventArgs e)
private void OnMouseDown(MouseEventArgs e)
private void OnMouseUp(MouseEventArgs e)
private void OnMouseMove(MouseEventArgs e)
private void Recalculate()
private void ShowSystray()
private void HideSystray()
private void UpdateSystray()
public ToolTipIcon get_BalloonTipIcon()
public void set_BalloonTipIcon(ToolTipIcon value)
public string get_BalloonTipText()
public void set_BalloonTipText(string value)
public string get_BalloonTipTitle()
public void set_BalloonTipTitle(string value)
public ContextMenu get_ContextMenu()
public void set_ContextMenu(ContextMenu value)
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public Icon get_Icon()
public void set_Icon(Icon value)
public object get_Tag()
public void set_Tag(object value)
public string get_Text()
public void set_Text(string value)
public bool get_Visible()
public void set_Visible(bool value)
protected void Dispose(bool disposing)
public void add_BalloonTipClicked(EventHandler value)
public void remove_BalloonTipClicked(EventHandler value)
public void add_BalloonTipClosed(EventHandler value)
public void remove_BalloonTipClosed(EventHandler value)
public void add_BalloonTipShown(EventHandler value)
public void remove_BalloonTipShown(EventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_MouseDown(MouseEventHandler value)
public void remove_MouseDown(MouseEventHandler value)
public void add_MouseMove(MouseEventHandler value)
public void remove_MouseMove(MouseEventHandler value)
public void add_MouseUp(MouseEventHandler value)
public void remove_MouseUp(MouseEventHandler value)
}
internal System.Windows.Forms.NotifyMode : Enum {
public int value__
public NotifyMode NotifyNormal
public NotifyMode NotifyGrab
public NotifyMode NotifyUngrab
}
internal System.Windows.Forms.NumericTextBox : TextBox {
private double val
private double min
private object ValueChangedEvent
public double Value
public double Min
public double get_Value()
public void set_Value(double value)
public double get_Min()
public void set_Min(double value)
protected void OnLostFocus(EventArgs args)
protected void OnTextChanged(EventArgs args)
protected void OnKeyPress(KeyPressEventArgs args)
protected void OnValueChanged(EventArgs args)
public void add_ValueChanged(EventHandler value)
public void remove_ValueChanged(EventHandler value)
}
public System.Windows.Forms.NumericUpDown : UpDownBase {
private bool suppress_validation
private int decimal_places
private bool hexadecimal
private decimal increment
private decimal maximum
private decimal minimum
private bool thousands_separator
private decimal dvalue
private NumericUpDownAccelerationCollection accelerations
private object UIAMinimumChangedEvent
private object UIAMaximumChangedEvent
private object UIASmallChangeChangedEvent
private object ValueChangedEvent
public NumericUpDownAccelerationCollection Accelerations
public int DecimalPlaces
public bool Hexadecimal
public decimal Increment
public decimal Maximum
public decimal Minimum
public Padding Padding
public string Text
public bool ThousandsSeparator
public decimal Value
internal void add_UIAMinimumChanged(EventHandler value)
internal void remove_UIAMinimumChanged(EventHandler value)
internal void OnUIAMinimumChanged(EventArgs e)
internal void add_UIAMaximumChanged(EventHandler value)
internal void remove_UIAMaximumChanged(EventHandler value)
internal void OnUIAMaximumChanged(EventArgs e)
internal void add_UIASmallChangeChanged(EventHandler value)
internal void remove_UIASmallChangeChanged(EventHandler value)
internal void OnUIASmallChangeChanged(EventArgs e)
public NumericUpDownAccelerationCollection get_Accelerations()
public int get_DecimalPlaces()
public void set_DecimalPlaces(int value)
public bool get_Hexadecimal()
public void set_Hexadecimal(bool value)
public decimal get_Increment()
public void set_Increment(decimal value)
public decimal get_Maximum()
public void set_Maximum(decimal value)
public decimal get_Minimum()
public void set_Minimum(decimal value)
public Padding get_Padding()
public void set_Padding(Padding value)
public string get_Text()
public void set_Text(string value)
public bool get_ThousandsSeparator()
public void set_ThousandsSeparator(bool value)
public decimal get_Value()
public void set_Value(decimal value)
public void BeginInit()
public void EndInit()
public string ToString()
public void DownButton()
public void UpButton()
protected AccessibleObject CreateAccessibilityInstance()
protected void OnTextBoxKeyPress(object source, KeyPressEventArgs e)
protected void OnValueChanged(EventArgs e)
protected void ParseEditText()
private decimal Check(decimal val)
protected void UpdateEditText()
protected void ValidateEditText()
protected void OnLostFocus(EventArgs e)
protected void OnKeyUp(KeyEventArgs e)
protected void OnKeyDown(KeyEventArgs e)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_ValueChanged(EventHandler value)
public void remove_ValueChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
}
public System.Windows.Forms.NumericUpDownAcceleration : object {
private decimal increment
private int seconds
public decimal Increment
public int Seconds
public decimal get_Increment()
public void set_Increment(decimal value)
public int get_Seconds()
public void set_Seconds(int value)
public void .ctor(int seconds, decimal increment)
}
public System.Windows.Forms.NumericUpDownAccelerationCollection : MarshalByRefObject {
private List`1<NumericUpDownAcceleration> items
public int Count
public bool IsReadOnly
public NumericUpDownAcceleration Item
public int get_Count()
public bool get_IsReadOnly()
public NumericUpDownAcceleration get_Item(int index)
public void Add(NumericUpDownAcceleration acceleration)
public void AddRange(NumericUpDownAcceleration[] accelerations)
public void Clear()
public bool Contains(NumericUpDownAcceleration acceleration)
public void CopyTo(NumericUpDownAcceleration[] array, int index)
public bool Remove(NumericUpDownAcceleration acceleration)
private IEnumerator`1<NumericUpDownAcceleration> System.Collections.Generic.IEnumerable<System.Windows.Forms.NumericUpDownAcceleration>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public System.Windows.Forms.OpacityConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Windows.Forms.OpenFileDialog : FileDialog {
public bool CheckFileExists
public bool Multiselect
public bool ReadOnlyChecked
public string SafeFileName
public String[] SafeFileNames
public bool ShowReadOnly
internal string DialogTitle
public bool get_CheckFileExists()
public void set_CheckFileExists(bool value)
public bool get_Multiselect()
public void set_Multiselect(bool value)
public bool get_ReadOnlyChecked()
public void set_ReadOnlyChecked(bool value)
public string get_SafeFileName()
public String[] get_SafeFileNames()
public bool get_ShowReadOnly()
public void set_ShowReadOnly(bool value)
public Stream OpenFile()
public void Reset()
internal string get_DialogTitle()
}
internal System.Windows.Forms.OpenTreeNodeEnumerator : object {
private TreeNode start
private TreeNode current
private bool started
public object Current
public TreeNode CurrentNode
public void .ctor(TreeNode start)
public object get_Current()
public TreeNode get_CurrentNode()
public bool MoveNext()
public bool MovePrevious()
public void Reset()
}
public System.Windows.Forms.Orientation : Enum {
public int value__
public Orientation Horizontal
public Orientation Vertical
}
public System.Windows.Forms.OSFeature : FeatureSupport {
private OSFeature feature
public object LayeredWindows
public object Themes
public OSFeature Feature
public OSFeature get_Feature()
public bool IsPresent(SystemParameter enumVal)
public Version GetVersionPresent(object feature)
}
public System.Windows.Forms.OwnerDrawPropertyBag : MarshalByRefObject {
private Color fore_color
private Color back_color
private Font font
public Color ForeColor
public Color BackColor
public Font Font
private void .ctor(Color fore_color, Color back_color, Font font)
protected void .ctor(SerializationInfo info, StreamingContext context)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Font get_Font()
public void set_Font(Font value)
public bool IsEmpty()
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
public OwnerDrawPropertyBag Copy(OwnerDrawPropertyBag value)
}
public System.Windows.Forms.Padding : ValueType {
private int _bottom
private int _left
private int _right
private int _top
private bool _all
public Padding Empty
public int All
public int Bottom
public int Horizontal
public int Left
public int Right
public Size Size
public int Top
public int Vertical
public void .ctor(int all)
public void .ctor(int left, int top, int right, int bottom)
public int get_All()
public void set_All(int value)
public int get_Bottom()
public void set_Bottom(int value)
public int get_Horizontal()
public int get_Left()
public void set_Left(int value)
public int get_Right()
public void set_Right(int value)
public Size get_Size()
public int get_Top()
public void set_Top(int value)
public int get_Vertical()
public Padding Add(Padding p1, Padding p2)
public bool Equals(object other)
public int GetHashCode()
public Padding op_Addition(Padding p1, Padding p2)
public bool op_Equality(Padding p1, Padding p2)
public bool op_Inequality(Padding p1, Padding p2)
public Padding op_Subtraction(Padding p1, Padding p2)
public Padding Subtract(Padding p1, Padding p2)
public string ToString()
}
public System.Windows.Forms.PaddingConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
public bool GetCreateInstanceSupported(ITypeDescriptorContext context)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
public System.Windows.Forms.PageSetupDialog : CommonDialog {
private PrintDocument document
private PageSettings page_settings
private PrinterSettings printer_settings
private Margins min_margins
private bool allow_margins
private bool allow_orientation
private bool allow_paper
private bool allow_printer
private bool show_help
private bool show_network
private bool enable_metric
private GroupBox groupbox_paper
private Label label_source
private Label label_size
private GroupBox groupbox_orientation
private RadioButton radio_landscape
private RadioButton radio_portrait
private GroupBox groupbox_margin
private Label label_left
private Button button_help
private Button button_ok
private Button button_cancel
private Button button_printer
private Label label_top
private Label label_right
private Label label_bottom
private NumericTextBox textbox_left
private NumericTextBox textbox_top
private NumericTextBox textbox_right
private NumericTextBox textbox_bottom
private ComboBox combobox_source
private ComboBox combobox_size
private PagePreview pagePreview
public bool AllowMargins
public bool AllowOrientation
public bool AllowPaper
public bool AllowPrinter
public PrintDocument Document
public bool EnableMetric
public Margins MinMargins
public PageSettings PageSettings
public PrinterSettings PrinterSettings
public bool ShowHelp
public bool ShowNetwork
private bool UseYardPound
private PrinterSettings InternalPrinterSettings
public void Reset()
public bool get_AllowMargins()
public void set_AllowMargins(bool value)
public bool get_AllowOrientation()
public void set_AllowOrientation(bool value)
public bool get_AllowPaper()
public void set_AllowPaper(bool value)
public bool get_AllowPrinter()
public void set_AllowPrinter(bool value)
public PrintDocument get_Document()
public void set_Document(PrintDocument value)
public bool get_EnableMetric()
public void set_EnableMetric(bool value)
public Margins get_MinMargins()
public void set_MinMargins(Margins value)
public PageSettings get_PageSettings()
public void set_PageSettings(PageSettings value)
public PrinterSettings get_PrinterSettings()
public void set_PrinterSettings(PrinterSettings value)
public bool get_ShowHelp()
public void set_ShowHelp(bool value)
public bool get_ShowNetwork()
public void set_ShowNetwork(bool value)
protected bool RunDialog(IntPtr hwndOwner)
private void InitializeComponent()
private bool get_UseYardPound()
private PrinterSettings get_InternalPrinterSettings()
private double ToLocalizedLength(int marginsUnit)
private int FromLocalizedLength(double marginsUnit)
private string LocalizedLengthUnit()
private void SetPrinterDetails()
private void OnClickOkButton(object sender, EventArgs e)
private void ShowHelpButton()
private void OnClickPrinterButton(object sender, EventArgs args)
private void OnPaperSizeChange(object sender, EventArgs e)
private void OnMarginChange(object sender, EventArgs e)
private void OnLandscapeChange(object sender, EventArgs e)
}
public System.Windows.Forms.PaintEventArgs : EventArgs {
private Graphics graphics
private Rectangle clip_rectangle
internal bool Handled
private bool disposed
public Rectangle ClipRectangle
public Graphics Graphics
public void .ctor(Graphics graphics, Rectangle clipRect)
public Rectangle get_ClipRectangle()
public Graphics get_Graphics()
public void Dispose()
internal Graphics SetGraphics(Graphics g)
internal void SetClip(Rectangle clip)
protected void Finalize()
protected void Dispose(bool disposing)
}
public System.Windows.Forms.PaintEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, PaintEventArgs e)
public IAsyncResult BeginInvoke(object sender, PaintEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.Panel : ScrollableControl {
public bool AutoSize
public AutoSizeMode AutoSizeMode
public BorderStyle BorderStyle
public bool TabStop
public string Text
protected CreateParams CreateParams
protected Size DefaultSize
public bool get_AutoSize()
public void set_AutoSize(bool value)
public AutoSizeMode get_AutoSizeMode()
public void set_AutoSizeMode(AutoSizeMode value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
public string ToString()
protected void OnResize(EventArgs eventargs)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
internal Size GetPreferredSizeCore(Size proposedSize)
}
internal System.Windows.Forms.PeekMessageFlags : Enum {
public int value__
public PeekMessageFlags PM_NOREMOVE
public PeekMessageFlags PM_REMOVE
public PeekMessageFlags PM_NOYIELD
}
public System.Windows.Forms.PictureBox : Control {
private Image image
private PictureBoxSizeMode size_mode
private Image error_image
private string image_location
private Image initial_image
private bool wait_on_load
private WebClient image_download
private bool image_from_url
private int no_update
private EventHandler frame_handler
private object LoadCompletedEvent
private object LoadProgressChangedEvent
private object SizeModeChangedEvent
public PictureBoxSizeMode SizeMode
public Image Image
public BorderStyle BorderStyle
public bool CausesValidation
public Image ErrorImage
public Image InitialImage
public string ImageLocation
public bool WaitOnLoad
public ImeMode ImeMode
public RightToLeft RightToLeft
public int TabIndex
public bool TabStop
public string Text
protected CreateParams CreateParams
protected ImeMode DefaultImeMode
public Font Font
public Color ForeColor
public bool AllowDrop
protected Size DefaultSize
private WebClient ImageDownload
public PictureBoxSizeMode get_SizeMode()
public void set_SizeMode(PictureBoxSizeMode value)
public Image get_Image()
public void set_Image(Image value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public Image get_ErrorImage()
public void set_ErrorImage(Image value)
public Image get_InitialImage()
public void set_InitialImage(Image value)
public string get_ImageLocation()
public void set_ImageLocation(string value)
public bool get_WaitOnLoad()
public void set_WaitOnLoad(bool value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public int get_TabIndex()
public void set_TabIndex(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
protected CreateParams get_CreateParams()
protected ImeMode get_DefaultImeMode()
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
protected Size get_DefaultSize()
protected void Dispose(bool disposing)
protected void OnPaint(PaintEventArgs pe)
protected void OnVisibleChanged(EventArgs e)
protected void OnSizeModeChanged(EventArgs e)
protected void OnEnabledChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnLoadCompleted(AsyncCompletedEventArgs e)
protected void OnLoadProgressChanged(ProgressChangedEventArgs e)
protected void OnParentChanged(EventArgs e)
protected void OnResize(EventArgs e)
internal Size GetPreferredSizeCore(Size proposedSize)
private void System.ComponentModel.ISupportInitialize.BeginInit()
private void System.ComponentModel.ISupportInitialize.EndInit()
private WebClient get_ImageDownload()
private void ChangeImage(Image value, bool from_url)
private void StopAnimation()
private void UpdateSize()
private void OnAnimateImage(object sender, EventArgs e)
private void UpdateAnimatedImage(object sender, EventArgs e)
private void PictureBox_HandleCreated(object sender, EventArgs e)
private void ImageDownload_DownloadDataCompleted(object sender, DownloadDataCompletedEventArgs e)
private void ImageDownload_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)
public void CancelAsync()
public void Load()
public void Load(string url)
public void LoadAsync()
public void LoadAsync(string url)
public string ToString()
public void add_CausesValidationChanged(EventHandler value)
public void remove_CausesValidationChanged(EventHandler value)
public void add_Enter(EventHandler value)
public void remove_Enter(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_Leave(EventHandler value)
public void remove_Leave(EventHandler value)
public void add_LoadCompleted(AsyncCompletedEventHandler value)
public void remove_LoadCompleted(AsyncCompletedEventHandler value)
public void add_LoadProgressChanged(ProgressChangedEventHandler value)
public void remove_LoadProgressChanged(ProgressChangedEventHandler value)
public void add_RightToLeftChanged(EventHandler value)
public void remove_RightToLeftChanged(EventHandler value)
public void add_TabIndexChanged(EventHandler value)
public void remove_TabIndexChanged(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_SizeModeChanged(EventHandler value)
public void remove_SizeModeChanged(EventHandler value)
}
public System.Windows.Forms.PictureBoxSizeMode : Enum {
public int value__
public PictureBoxSizeMode Normal
public PictureBoxSizeMode StretchImage
public PictureBoxSizeMode AutoSize
public PictureBoxSizeMode CenterImage
public PictureBoxSizeMode Zoom
}
internal System.Windows.Forms.PictureTag : LineTag {
internal Picture picture
public bool IsTextTag
internal void .ctor(Line line, int start, Picture picture)
public bool get_IsTextTag()
public SizeF SizeOfPosition(Graphics dc, int pos)
internal int MaxHeight()
public void Draw(Graphics dc, Color color, float xoff, float y, int start, int end)
public void Draw(Graphics dc, Color color, float xoff, float y, int start, int end, string text)
public string Text()
}
internal System.Windows.Forms.PlatformDefaultHandler : PlatformMimeIconHandler {
public MimeExtensionHandlerStatus Start()
}
internal System.Windows.Forms.PlatformMimeIconHandler : object {
protected MimeExtensionHandlerStatus mimeExtensionHandlerStatus
public MimeExtensionHandlerStatus MimeExtensionHandlerStatus
public MimeExtensionHandlerStatus get_MimeExtensionHandlerStatus()
public MimeExtensionHandlerStatus Start()
public object AddAndGetIconIndex(string filename, string mime_type)
public object AddAndGetIconIndex(string mime_type)
}
internal System.Windows.Forms.POINT : ValueType {
public int x
public int y
public void .ctor(int x, int y)
public Point ToPoint()
public string ToString()
}
internal System.Windows.Forms.PopupButtonPanel : Control {
private PopupButton recentlyusedButton
private PopupButton desktopButton
private PopupButton personalButton
private PopupButton mycomputerButton
private PopupButton networkButton
private PopupButton lastPopupButton
private PopupButton focusButton
private string currentPath
private int currentFocusIndex
private object UIAFocusedItemChangedEvent
private object PDirectoryChangedEvent
internal PopupButton UIAFocusButton
public string CurrentFolder
private void OnClickButton(object sender, EventArgs e)
internal void add_UIAFocusedItemChanged(EventHandler value)
internal void remove_UIAFocusedItemChanged(EventHandler value)
internal void OnUIAFocusedItemChanged()
internal PopupButton get_UIAFocusButton()
public void set_CurrentFolder(string value)
public string get_CurrentFolder()
protected void OnGotFocus(EventArgs e)
protected void OnLostFocus(EventArgs e)
protected bool IsInputKey(Keys key)
private void Key_Down(object sender, KeyEventArgs e)
public void add_DirectoryChanged(EventHandler value)
public void remove_DirectoryChanged(EventHandler value)
internal void SetFocusButton(PopupButton button)
}
public System.Windows.Forms.PopupEventArgs : CancelEventArgs {
private Control associated_control
private IWin32Window associated_window
private bool is_balloon
private Size tool_tip_size
public Control AssociatedControl
public IWin32Window AssociatedWindow
public bool IsBalloon
public Size ToolTipSize
public void .ctor(IWin32Window associatedWindow, Control associatedControl, bool isBalloon, Size size)
public Control get_AssociatedControl()
public IWin32Window get_AssociatedWindow()
public bool get_IsBalloon()
public Size get_ToolTipSize()
public void set_ToolTipSize(Size value)
}
public System.Windows.Forms.PopupEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, PopupEventArgs e)
public IAsyncResult BeginInvoke(object sender, PopupEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.PopUpWindow : Control {
private Menu menu
private Control form
protected CreateParams CreateParams
internal bool ActivateOnShow
public void .ctor(Control form, Menu menu)
protected CreateParams get_CreateParams()
public void ShowWindow()
internal void OnPaintInternal(PaintEventArgs args)
public void HideWindow()
protected void CreateHandle()
internal void RefreshItems()
internal bool get_ActivateOnShow()
}
public System.Windows.Forms.PowerLineStatus : Enum {
public int value__
public PowerLineStatus Offline
public PowerLineStatus Online
public PowerLineStatus Unknown
}
public System.Windows.Forms.PowerState : Enum {
public int value__
public PowerState Suspend
public PowerState Hibernate
}
public System.Windows.Forms.PowerStatus : object {
private BatteryChargeStatus battery_charge_status
private int battery_full_lifetime
private float battery_life_percent
private int battery_life_remaining
private PowerLineStatus power_line_status
public BatteryChargeStatus BatteryChargeStatus
public int BatteryFullLifetime
public float BatteryLifePercent
public int BatteryLifeRemaining
public PowerLineStatus PowerLineStatus
internal void .ctor(BatteryChargeStatus batteryChargeStatus, int batteryFullLifetime, float batteryLifePercent, int batteryLifeRemaining, PowerLineStatus powerLineStatus)
public BatteryChargeStatus get_BatteryChargeStatus()
public int get_BatteryFullLifetime()
public float get_BatteryLifePercent()
public int get_BatteryLifeRemaining()
public PowerLineStatus get_PowerLineStatus()
}
public System.Windows.Forms.PreProcessControlState : Enum {
public int value__
public PreProcessControlState MessageProcessed
public PreProcessControlState MessageNeeded
public PreProcessControlState MessageNotNeeded
}
public System.Windows.Forms.PreviewKeyDownEventArgs : EventArgs {
private Keys key_data
private bool is_input_key
public bool Alt
public bool Control
public bool IsInputKey
public Keys KeyCode
public Keys KeyData
public int KeyValue
public Keys Modifiers
public bool Shift
public void .ctor(Keys keyData)
public bool get_Alt()
public bool get_Control()
public bool get_IsInputKey()
public void set_IsInputKey(bool value)
public Keys get_KeyCode()
public Keys get_KeyData()
public int get_KeyValue()
public Keys get_Modifiers()
public bool get_Shift()
}
public System.Windows.Forms.PreviewKeyDownEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, PreviewKeyDownEventArgs e)
public IAsyncResult BeginInvoke(object sender, PreviewKeyDownEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.PrintControllerWithStatusDialog : PrintController {
private PrintController underlyingController
private PrintingDialog dialog
private int currentPage
public bool IsPreview
public void .ctor(PrintController underlyingController)
public void .ctor(PrintController underlyingController, string dialogTitle)
public void OnEndPage(PrintDocument document, PrintPageEventArgs e)
public void OnEndPrint(PrintDocument document, PrintEventArgs e)
public Graphics OnStartPage(PrintDocument document, PrintPageEventArgs e)
private void Set_PrinterSettings_PrintFileName(PrinterSettings settings, string filename)
public void OnStartPrint(PrintDocument document, PrintEventArgs e)
public bool get_IsPreview()
}
public System.Windows.Forms.PrintDialog : CommonDialog {
private PrintDocument document
private bool allow_current_page
private bool allow_print_to_file
private bool allow_selection
private bool allow_some_pages
private bool show_help
private bool show_network
private bool print_to_file
private PrinterSettings current_settings
private Button cancel_button
private Button accept_button
private Button help_button
private ComboBox printer_combo
private RadioButton radio_all
private RadioButton radio_pages
private RadioButton radio_sel
private StringCollection installed_printers
private PrinterSettings default_printer_settings
private TextBox txtFrom
private TextBox txtTo
private Label labelTo
private Label labelFrom
private CheckBox chkbox_print
private NumericUpDown updown_copies
private CheckBox chkbox_collate
private Label label_status
private Label label_type
private Label label_where
private Label label_comment
private CollatePreview collate
private bool use_ex_dialog
public bool AllowCurrentPage
public bool AllowPrintToFile
public bool AllowSelection
public bool AllowSomePages
public PrintDocument Document
public PrinterSettings PrinterSettings
public bool PrintToFile
public bool ShowNetwork
public bool ShowHelp
public bool UseEXDialog
public void Reset()
public bool get_AllowCurrentPage()
public void set_AllowCurrentPage(bool value)
public bool get_AllowPrintToFile()
public void set_AllowPrintToFile(bool value)
public bool get_AllowSelection()
public void set_AllowSelection(bool value)
public bool get_AllowSomePages()
public void set_AllowSomePages(bool value)
public PrintDocument get_Document()
public void set_Document(PrintDocument value)
public PrinterSettings get_PrinterSettings()
public void set_PrinterSettings(PrinterSettings value)
public bool get_PrintToFile()
public void set_PrintToFile(bool value)
public bool get_ShowNetwork()
public void set_ShowNetwork(bool value)
public bool get_ShowHelp()
public void set_ShowHelp(bool value)
public bool get_UseEXDialog()
public void set_UseEXDialog(bool value)
protected bool RunDialog(IntPtr hwndOwner)
private void OnClickCancelButton(object sender, EventArgs e)
private void ShowErrorMessage(string message, Control control_to_focus)
private void OnClickOkButton(object sender, EventArgs e)
private void ShowHelpButton()
private void OnUpDownValueChanged(object sender, EventArgs e)
private void OnPagesCheckedChanged(object obj, EventArgs args)
private void CreateFormControls()
private void OnPagesTextChanged(object sender, EventArgs args)
private void OnPrinterSelectedIndexChanged(object sender, EventArgs e)
private void SetPrinterDetails()
private void chkbox_collate_CheckedChanged(object sender, EventArgs e)
}
public System.Windows.Forms.PrintPreviewControl : Control {
private bool autozoom
private int columns
private int rows
private int startPage
private double zoom
private int padding
private PrintDocument document
internal PreviewPrintController controller
internal PreviewPageInfo[] page_infos
private VScrollBar vbar
private HScrollBar hbar
internal Rectangle ViewPort
internal Image[] image_cache
private Size image_size
private object StartPageChangedEvent
internal int vbar_value
internal int hbar_value
public bool AutoZoom
public int Columns
public PrintDocument Document
public RightToLeft RightToLeft
public int Rows
public int StartPage
public string Text
public bool UseAntiAlias
public double Zoom
protected CreateParams CreateParams
internal ScrollBar UIAVScrollBar
internal ScrollBar UIAHScrollBar
public bool get_AutoZoom()
public void set_AutoZoom(bool value)
public int get_Columns()
public void set_Columns(int value)
public PrintDocument get_Document()
public void set_Document(PrintDocument value)
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public int get_Rows()
public void set_Rows(int value)
public int get_StartPage()
public void set_StartPage(int value)
public string get_Text()
public void set_Text(string value)
public bool get_UseAntiAlias()
public void set_UseAntiAlias(bool value)
public double get_Zoom()
public void set_Zoom(double value)
internal void GeneratePreview()
public void InvalidatePreview()
public void ResetBackColor()
public void ResetForeColor()
protected CreateParams get_CreateParams()
protected void OnPaint(PaintEventArgs pevent)
protected void OnResize(EventArgs eventargs)
protected void OnStartPageChanged(EventArgs e)
protected void WndProc(Message& m)
public void add_StartPageChanged(EventHandler value)
public void remove_StartPageChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
internal ScrollBar get_UIAVScrollBar()
internal ScrollBar get_UIAHScrollBar()
private void VScrollBarValueChanged(object sender, EventArgs e)
private void HScrollBarValueChanged(object sender, EventArgs e)
private void UpdateScrollBars()
private void InvalidateLayout()
}
public System.Windows.Forms.PrintPreviewDialog : Form {
private PrintPreviewControl print_preview
private MenuItem previous_checked_menu_item
private Menu mag_menu
private MenuItem auto_zoom_item
private NumericUpDown pageUpDown
public IButtonControl AcceptButton
public string AccessibleDescription
public string AccessibleName
public AccessibleRole AccessibleRole
public bool AllowDrop
public AnchorStyles Anchor
public bool AutoScale
public Size AutoScaleBaseSize
public bool AutoScroll
public Size AutoScrollMargin
public Size AutoScrollMinSize
public bool AutoSize
public AutoValidate AutoValidate
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public IButtonControl CancelButton
public bool CausesValidation
public ContextMenu ContextMenu
public ContextMenuStrip ContextMenuStrip
public bool ControlBox
public Cursor Cursor
public ControlBindingsCollection DataBindings
protected Size DefaultMinimumSize
public DockStyle Dock
public DockPaddingEdges DockPadding
public PrintDocument Document
public bool Enabled
public Font Font
public Color ForeColor
public FormBorderStyle FormBorderStyle
public bool HelpButton
public Icon Icon
public ImeMode ImeMode
public bool IsMdiContainer
public bool KeyPreview
public Point Location
public Padding Margin
public bool MaximizeBox
public Size MaximumSize
public MainMenu Menu
public bool MinimizeBox
public Size MinimumSize
public double Opacity
public Padding Padding
public PrintPreviewControl PrintPreviewControl
public RightToLeft RightToLeft
public bool RightToLeftLayout
public bool ShowInTaskbar
public Size Size
public SizeGripStyle SizeGripStyle
public FormStartPosition StartPosition
public bool TabStop
public object Tag
public string Text
public bool TopMost
public Color TransparencyKey
public bool UseAntiAlias
public bool UseWaitCursor
public bool Visible
public FormWindowState WindowState
private ToolBar CreateToolBar()
private void CloseButtonClicked(object sender, EventArgs e)
private void OnPageUpDownValueChanged(object sender, EventArgs e)
private void OnClickToolBarButton(object sender, ToolBarButtonClickEventArgs e)
private void OnClickPageMagnifierItem(object sender, EventArgs e)
public IButtonControl get_AcceptButton()
public void set_AcceptButton(IButtonControl value)
public string get_AccessibleDescription()
public void set_AccessibleDescription(string value)
public string get_AccessibleName()
public void set_AccessibleName(string value)
public AccessibleRole get_AccessibleRole()
public void set_AccessibleRole(AccessibleRole value)
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public AnchorStyles get_Anchor()
public void set_Anchor(AnchorStyles value)
public bool get_AutoScale()
public void set_AutoScale(bool value)
public Size get_AutoScaleBaseSize()
public void set_AutoScaleBaseSize(Size value)
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
public Size get_AutoScrollMargin()
public void set_AutoScrollMargin(Size value)
public Size get_AutoScrollMinSize()
public void set_AutoScrollMinSize(Size value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public AutoValidate get_AutoValidate()
public void set_AutoValidate(AutoValidate value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public IButtonControl get_CancelButton()
public void set_CancelButton(IButtonControl value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public ContextMenu get_ContextMenu()
public void set_ContextMenu(ContextMenu value)
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public bool get_ControlBox()
public void set_ControlBox(bool value)
public Cursor get_Cursor()
public void set_Cursor(Cursor value)
public ControlBindingsCollection get_DataBindings()
protected Size get_DefaultMinimumSize()
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public DockPaddingEdges get_DockPadding()
public PrintDocument get_Document()
public void set_Document(PrintDocument value)
public bool get_Enabled()
public void set_Enabled(bool value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public FormBorderStyle get_FormBorderStyle()
public void set_FormBorderStyle(FormBorderStyle value)
public bool get_HelpButton()
public void set_HelpButton(bool value)
public Icon get_Icon()
public void set_Icon(Icon value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public bool get_IsMdiContainer()
public void set_IsMdiContainer(bool value)
public bool get_KeyPreview()
public void set_KeyPreview(bool value)
public Point get_Location()
public void set_Location(Point value)
public Padding get_Margin()
public void set_Margin(Padding value)
public bool get_MaximizeBox()
public void set_MaximizeBox(bool value)
public Size get_MaximumSize()
public void set_MaximumSize(Size value)
public MainMenu get_Menu()
public void set_Menu(MainMenu value)
public bool get_MinimizeBox()
public void set_MinimizeBox(bool value)
public Size get_MinimumSize()
public void set_MinimumSize(Size value)
public double get_Opacity()
public void set_Opacity(double value)
public Padding get_Padding()
public void set_Padding(Padding value)
public PrintPreviewControl get_PrintPreviewControl()
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public bool get_ShowInTaskbar()
public void set_ShowInTaskbar(bool value)
public Size get_Size()
public void set_Size(Size value)
public SizeGripStyle get_SizeGripStyle()
public void set_SizeGripStyle(SizeGripStyle value)
public FormStartPosition get_StartPosition()
public void set_StartPosition(FormStartPosition value)
public bool get_TabStop()
public void set_TabStop(bool value)
public object get_Tag()
public void set_Tag(object value)
public string get_Text()
public void set_Text(string value)
public bool get_TopMost()
public void set_TopMost(bool value)
public Color get_TransparencyKey()
public void set_TransparencyKey(Color value)
public bool get_UseAntiAlias()
public void set_UseAntiAlias(bool value)
public bool get_UseWaitCursor()
public void set_UseWaitCursor(bool value)
public bool get_Visible()
public void set_Visible(bool value)
public FormWindowState get_WindowState()
public void set_WindowState(FormWindowState value)
protected void CreateHandle()
protected void OnClosing(CancelEventArgs e)
protected bool ProcessDialogKey(Keys keyData)
protected bool ProcessTabKey(bool forward)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_AutoValidateChanged(EventHandler value)
public void remove_AutoValidateChanged(EventHandler value)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_CausesValidationChanged(EventHandler value)
public void remove_CausesValidationChanged(EventHandler value)
public void add_ContextMenuChanged(EventHandler value)
public void remove_ContextMenuChanged(EventHandler value)
public void add_ContextMenuStripChanged(EventHandler value)
public void remove_ContextMenuStripChanged(EventHandler value)
public void add_CursorChanged(EventHandler value)
public void remove_CursorChanged(EventHandler value)
public void add_DockChanged(EventHandler value)
public void remove_DockChanged(EventHandler value)
public void add_EnabledChanged(EventHandler value)
public void remove_EnabledChanged(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_LocationChanged(EventHandler value)
public void remove_LocationChanged(EventHandler value)
public void add_MarginChanged(EventHandler value)
public void remove_MarginChanged(EventHandler value)
public void add_MaximumSizeChanged(EventHandler value)
public void remove_MaximumSizeChanged(EventHandler value)
public void add_MinimumSizeChanged(EventHandler value)
public void remove_MinimumSizeChanged(EventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_RightToLeftChanged(EventHandler value)
public void remove_RightToLeftChanged(EventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
public void add_SizeChanged(EventHandler value)
public void remove_SizeChanged(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_VisibleChanged(EventHandler value)
public void remove_VisibleChanged(EventHandler value)
}
public System.Windows.Forms.ProfessionalColors : object {
private ProfessionalColorTable color_table
public Color ButtonCheckedGradientBegin
public Color ButtonCheckedGradientEnd
public Color ButtonCheckedGradientMiddle
public Color ButtonCheckedHighlight
public Color ButtonCheckedHighlightBorder
public Color ButtonPressedBorder
public Color ButtonPressedGradientBegin
public Color ButtonPressedGradientEnd
public Color ButtonPressedGradientMiddle
public Color ButtonPressedHighlight
public Color ButtonPressedHighlightBorder
public Color ButtonSelectedBorder
public Color ButtonSelectedGradientBegin
public Color ButtonSelectedGradientEnd
public Color ButtonSelectedGradientMiddle
public Color ButtonSelectedHighlight
public Color ButtonSelectedHighlightBorder
public Color CheckBackground
public Color CheckPressedBackground
public Color CheckSelectedBackground
public Color GripDark
public Color GripLight
public Color ImageMarginGradientBegin
public Color ImageMarginGradientEnd
public Color ImageMarginGradientMiddle
public Color ImageMarginRevealedGradientBegin
public Color ImageMarginRevealedGradientEnd
public Color ImageMarginRevealedGradientMiddle
public Color MenuBorder
public Color MenuItemBorder
public Color MenuItemPressedGradientBegin
public Color MenuItemPressedGradientEnd
public Color MenuItemPressedGradientMiddle
public Color MenuItemSelected
public Color MenuItemSelectedGradientBegin
public Color MenuItemSelectedGradientEnd
public Color MenuStripGradientBegin
public Color MenuStripGradientEnd
public Color OverflowButtonGradientBegin
public Color OverflowButtonGradientEnd
public Color OverflowButtonGradientMiddle
public Color RaftingContainerGradientBegin
public Color RaftingContainerGradientEnd
public Color SeparatorDark
public Color SeparatorLight
public Color StatusStripGradientBegin
public Color StatusStripGradientEnd
public Color ToolStripBorder
public Color ToolStripContentPanelGradientBegin
public Color ToolStripContentPanelGradientEnd
public Color ToolStripDropDownBackground
public Color ToolStripGradientBegin
public Color ToolStripGradientEnd
public Color ToolStripGradientMiddle
public Color ToolStripPanelGradientBegin
public Color ToolStripPanelGradientEnd
public Color get_ButtonCheckedGradientBegin()
public Color get_ButtonCheckedGradientEnd()
public Color get_ButtonCheckedGradientMiddle()
public Color get_ButtonCheckedHighlight()
public Color get_ButtonCheckedHighlightBorder()
public Color get_ButtonPressedBorder()
public Color get_ButtonPressedGradientBegin()
public Color get_ButtonPressedGradientEnd()
public Color get_ButtonPressedGradientMiddle()
public Color get_ButtonPressedHighlight()
public Color get_ButtonPressedHighlightBorder()
public Color get_ButtonSelectedBorder()
public Color get_ButtonSelectedGradientBegin()
public Color get_ButtonSelectedGradientEnd()
public Color get_ButtonSelectedGradientMiddle()
public Color get_ButtonSelectedHighlight()
public Color get_ButtonSelectedHighlightBorder()
public Color get_CheckBackground()
public Color get_CheckPressedBackground()
public Color get_CheckSelectedBackground()
public Color get_GripDark()
public Color get_GripLight()
public Color get_ImageMarginGradientBegin()
public Color get_ImageMarginGradientEnd()
public Color get_ImageMarginGradientMiddle()
public Color get_ImageMarginRevealedGradientBegin()
public Color get_ImageMarginRevealedGradientEnd()
public Color get_ImageMarginRevealedGradientMiddle()
public Color get_MenuBorder()
public Color get_MenuItemBorder()
public Color get_MenuItemPressedGradientBegin()
public Color get_MenuItemPressedGradientEnd()
public Color get_MenuItemPressedGradientMiddle()
public Color get_MenuItemSelected()
public Color get_MenuItemSelectedGradientBegin()
public Color get_MenuItemSelectedGradientEnd()
public Color get_MenuStripGradientBegin()
public Color get_MenuStripGradientEnd()
public Color get_OverflowButtonGradientBegin()
public Color get_OverflowButtonGradientEnd()
public Color get_OverflowButtonGradientMiddle()
public Color get_RaftingContainerGradientBegin()
public Color get_RaftingContainerGradientEnd()
public Color get_SeparatorDark()
public Color get_SeparatorLight()
public Color get_StatusStripGradientBegin()
public Color get_StatusStripGradientEnd()
public Color get_ToolStripBorder()
public Color get_ToolStripContentPanelGradientBegin()
public Color get_ToolStripContentPanelGradientEnd()
public Color get_ToolStripDropDownBackground()
public Color get_ToolStripGradientBegin()
public Color get_ToolStripGradientEnd()
public Color get_ToolStripGradientMiddle()
public Color get_ToolStripPanelGradientBegin()
public Color get_ToolStripPanelGradientEnd()
}
public System.Windows.Forms.ProfessionalColorTable : object {
private bool use_system_colors
private Color button_checked_gradient_begin
private Color button_checked_gradient_end
private Color button_checked_gradient_middle
private Color button_checked_highlight
private Color button_checked_highlight_border
private Color button_pressed_border
private Color button_pressed_gradient_begin
private Color button_pressed_gradient_end
private Color button_pressed_gradient_middle
private Color button_pressed_highlight
private Color button_pressed_highlight_border
private Color button_selected_border
private Color button_selected_gradient_begin
private Color button_selected_gradient_end
private Color button_selected_gradient_middle
private Color button_selected_highlight
private Color button_selected_highlight_border
private Color check_background
private Color check_pressed_background
private Color check_selected_background
private Color grip_dark
private Color grip_light
private Color image_margin_gradient_begin
private Color image_margin_gradient_end
private Color image_margin_gradient_middle
private Color image_margin_revealed_gradient_begin
private Color image_margin_revealed_gradient_end
private Color image_margin_revealed_gradient_middle
private Color menu_border
private Color menu_item_border
private Color menu_item_pressed_gradient_begin
private Color menu_item_pressed_gradient_end
private Color menu_item_pressed_gradient_middle
private Color menu_item_selected
private Color menu_item_selected_gradient_begin
private Color menu_item_selected_gradient_end
private Color menu_strip_gradient_begin
private Color menu_strip_gradient_end
private Color overflow_button_gradient_begin
private Color overflow_button_gradient_end
private Color overflow_button_gradient_middle
private Color rafting_container_gradient_begin
private Color rafting_container_gradient_end
private Color separator_dark
private Color separator_light
private Color status_strip_gradient_begin
private Color status_strip_gradient_end
private Color tool_strip_border
private Color tool_strip_content_panel_gradient_begin
private Color tool_strip_content_panel_gradient_end
private Color tool_strip_drop_down_background
private Color tool_strip_gradient_begin
private Color tool_strip_gradient_end
private Color tool_strip_gradient_middle
private Color tool_strip_panel_gradient_begin
private Color tool_strip_panel_gradient_end
public Color ButtonCheckedGradientBegin
public Color ButtonCheckedGradientEnd
public Color ButtonCheckedGradientMiddle
public Color ButtonCheckedHighlight
public Color ButtonCheckedHighlightBorder
public Color ButtonPressedBorder
public Color ButtonPressedGradientBegin
public Color ButtonPressedGradientEnd
public Color ButtonPressedGradientMiddle
public Color ButtonPressedHighlight
public Color ButtonPressedHighlightBorder
public Color ButtonSelectedBorder
public Color ButtonSelectedGradientBegin
public Color ButtonSelectedGradientEnd
public Color ButtonSelectedGradientMiddle
public Color ButtonSelectedHighlight
public Color ButtonSelectedHighlightBorder
public Color CheckBackground
public Color CheckPressedBackground
public Color CheckSelectedBackground
public Color GripDark
public Color GripLight
public Color ImageMarginGradientBegin
public Color ImageMarginGradientEnd
public Color ImageMarginGradientMiddle
public Color ImageMarginRevealedGradientBegin
public Color ImageMarginRevealedGradientEnd
public Color ImageMarginRevealedGradientMiddle
public Color MenuBorder
public Color MenuItemBorder
public Color MenuItemPressedGradientBegin
public Color MenuItemPressedGradientEnd
public Color MenuItemPressedGradientMiddle
public Color MenuItemSelected
public Color MenuItemSelectedGradientBegin
public Color MenuItemSelectedGradientEnd
public Color MenuStripGradientBegin
public Color MenuStripGradientEnd
public Color OverflowButtonGradientBegin
public Color OverflowButtonGradientEnd
public Color OverflowButtonGradientMiddle
public Color RaftingContainerGradientBegin
public Color RaftingContainerGradientEnd
public Color SeparatorDark
public Color SeparatorLight
public Color StatusStripGradientBegin
public Color StatusStripGradientEnd
public Color ToolStripBorder
public Color ToolStripContentPanelGradientBegin
public Color ToolStripContentPanelGradientEnd
public Color ToolStripDropDownBackground
public Color ToolStripGradientBegin
public Color ToolStripGradientEnd
public Color ToolStripGradientMiddle
public Color ToolStripPanelGradientBegin
public Color ToolStripPanelGradientEnd
public bool UseSystemColors
public Color get_ButtonCheckedGradientBegin()
public Color get_ButtonCheckedGradientEnd()
public Color get_ButtonCheckedGradientMiddle()
public Color get_ButtonCheckedHighlight()
public Color get_ButtonCheckedHighlightBorder()
public Color get_ButtonPressedBorder()
public Color get_ButtonPressedGradientBegin()
public Color get_ButtonPressedGradientEnd()
public Color get_ButtonPressedGradientMiddle()
public Color get_ButtonPressedHighlight()
public Color get_ButtonPressedHighlightBorder()
public Color get_ButtonSelectedBorder()
public Color get_ButtonSelectedGradientBegin()
public Color get_ButtonSelectedGradientEnd()
public Color get_ButtonSelectedGradientMiddle()
public Color get_ButtonSelectedHighlight()
public Color get_ButtonSelectedHighlightBorder()
public Color get_CheckBackground()
public Color get_CheckPressedBackground()
public Color get_CheckSelectedBackground()
public Color get_GripDark()
public Color get_GripLight()
public Color get_ImageMarginGradientBegin()
public Color get_ImageMarginGradientEnd()
public Color get_ImageMarginGradientMiddle()
public Color get_ImageMarginRevealedGradientBegin()
public Color get_ImageMarginRevealedGradientEnd()
public Color get_ImageMarginRevealedGradientMiddle()
public Color get_MenuBorder()
public Color get_MenuItemBorder()
public Color get_MenuItemPressedGradientBegin()
public Color get_MenuItemPressedGradientEnd()
public Color get_MenuItemPressedGradientMiddle()
public Color get_MenuItemSelected()
public Color get_MenuItemSelectedGradientBegin()
public Color get_MenuItemSelectedGradientEnd()
public Color get_MenuStripGradientBegin()
public Color get_MenuStripGradientEnd()
public Color get_OverflowButtonGradientBegin()
public Color get_OverflowButtonGradientEnd()
public Color get_OverflowButtonGradientMiddle()
public Color get_RaftingContainerGradientBegin()
public Color get_RaftingContainerGradientEnd()
public Color get_SeparatorDark()
public Color get_SeparatorLight()
public Color get_StatusStripGradientBegin()
public Color get_StatusStripGradientEnd()
public Color get_ToolStripBorder()
public Color get_ToolStripContentPanelGradientBegin()
public Color get_ToolStripContentPanelGradientEnd()
public Color get_ToolStripDropDownBackground()
public Color get_ToolStripGradientBegin()
public Color get_ToolStripGradientEnd()
public Color get_ToolStripGradientMiddle()
public Color get_ToolStripPanelGradientBegin()
public Color get_ToolStripPanelGradientEnd()
public bool get_UseSystemColors()
public void set_UseSystemColors(bool value)
private void CalculateColors()
private ColorSchemes GetCurrentStyle()
}
public System.Windows.Forms.ProgressBar : Control {
private int maximum
private int minimum
internal int step
internal int val
internal DateTime start
internal Rectangle client_area
internal ProgressBarStyle style
private Timer marquee_timer
private bool right_to_left_layout
private Color defaultForeColor
private object RightToLeftLayoutChangedEvent
private int marquee_animation_speed
public bool AllowDrop
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public bool CausesValidation
protected CreateParams CreateParams
protected ImeMode DefaultImeMode
protected Size DefaultSize
protected bool DoubleBuffered
public Font Font
public ImeMode ImeMode
public int Maximum
public int Minimum
public Padding Padding
public bool RightToLeftLayout
public int Step
public ProgressBarStyle Style
public int MarqueeAnimationSpeed
public bool TabStop
public string Text
public int Value
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_CausesValidationChanged(EventHandler value)
public void remove_CausesValidationChanged(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_Enter(EventHandler value)
public void remove_Enter(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_Leave(EventHandler value)
public void remove_Leave(EventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
protected CreateParams get_CreateParams()
protected ImeMode get_DefaultImeMode()
protected Size get_DefaultSize()
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public Font get_Font()
public void set_Font(Font value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public int get_Maximum()
public void set_Maximum(int value)
public int get_Minimum()
public void set_Minimum(int value)
public Padding get_Padding()
public void set_Padding(Padding value)
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public int get_Step()
public void set_Step(int value)
public ProgressBarStyle get_Style()
public void set_Style(ProgressBarStyle value)
private void marquee_timer_Tick(object sender, EventArgs e)
public int get_MarqueeAnimationSpeed()
public void set_MarqueeAnimationSpeed(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
public int get_Value()
public void set_Value(int value)
protected void CreateHandle()
public void Increment(int value)
protected void OnHandleCreated(EventArgs e)
protected void OnBackColorChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnRightToLeftLayoutChanged(EventArgs e)
public void PerformStep()
public void ResetForeColor()
public string ToString()
private void UpdateAreas()
private void OnResizeTB(object o, EventArgs e)
internal void OnPaintInternal(PaintEventArgs pevent)
}
public System.Windows.Forms.ProgressBarRenderer : object {
public bool IsSupported
public int ChunkSpaceThickness
public int ChunkThickness
public void DrawHorizontalBar(Graphics g, Rectangle bounds)
public void DrawHorizontalChunks(Graphics g, Rectangle bounds)
public void DrawVerticalBar(Graphics g, Rectangle bounds)
public void DrawVerticalChunks(Graphics g, Rectangle bounds)
public bool get_IsSupported()
public int get_ChunkSpaceThickness()
public int get_ChunkThickness()
}
public System.Windows.Forms.ProgressBarStyle : Enum {
public int value__
public ProgressBarStyle Blocks
public ProgressBarStyle Continuous
public ProgressBarStyle Marquee
}
public System.Windows.Forms.PropertyGrid : ContainerControl {
private string UNCATEGORIZED_CATEGORY_LABEL
private AttributeCollection browsable_attributes
private bool can_show_commands
private Color commands_back_color
private Color commands_fore_color
private bool commands_visible
private bool commands_visible_if_available
private Point context_menu_default_location
private bool large_buttons
private Color line_color
private PropertySort property_sort
private PropertyTabCollection property_tabs
private GridEntry selected_grid_item
private GridEntry root_grid_item
private Object[] selected_objects
private PropertyTab properties_tab
private PropertyTab selected_tab
private ImageList toolbar_imagelist
private Image categorized_image
private Image alphabetical_image
private Image propertypages_image
private PropertyToolBarButton categorized_toolbarbutton
private PropertyToolBarButton alphabetic_toolbarbutton
private PropertyToolBarButton propertypages_toolbarbutton
private PropertyToolBarSeparator separator_toolbarbutton
private bool events_tab_visible
private PropertyToolBar toolbar
private PropertyGridView property_grid_view
private Splitter splitter
private Panel help_panel
private Label help_title_label
private Label help_description_label
private MenuItem reset_menuitem
private MenuItem description_menuitem
private Color category_fore_color
private Color commands_active_link_color
private Color commands_disabled_link_color
private Color commands_link_color
private object PropertySortChangedEvent
private object PropertyTabChangedEvent
private object PropertyValueChangedEvent
private object SelectedGridItemChangedEvent
private object SelectedObjectsChangedEvent
private object ComComponentNameChangedEvent
public AttributeCollection BrowsableAttributes
public bool AutoScroll
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public bool CanShowCommands
public Color CategoryForeColor
public Color CommandsBackColor
public Color CommandsForeColor
public Color CommandsActiveLinkColor
public Color CommandsDisabledLinkColor
public Color CommandsLinkColor
public bool CommandsVisible
public bool CommandsVisibleIfAvailable
public Point ContextMenuDefaultLocation
public ControlCollection Controls
public Color ForeColor
public Color HelpBackColor
public Color HelpForeColor
public bool HelpVisible
public bool LargeButtons
public Color LineColor
public Padding Padding
public PropertySort PropertySort
public PropertyTabCollection PropertyTabs
public GridItem SelectedGridItem
internal GridItem RootGridItem
public object SelectedObject
public Object[] SelectedObjects
public PropertyTab SelectedTab
public ISite Site
public string Text
public bool ToolbarVisible
protected ToolStripRenderer ToolStripRenderer
public Color ViewBackColor
public Color ViewForeColor
public bool UseCompatibleTextRendering
protected Size DefaultSize
protected Type DefaultTabType
protected bool DrawFlatToolbar
protected internal bool ShowFocusCues
private bool System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.InPropertySet
public AttributeCollection get_BrowsableAttributes()
public void set_BrowsableAttributes(AttributeCollection value)
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public bool get_CanShowCommands()
public Color get_CategoryForeColor()
public void set_CategoryForeColor(Color value)
public Color get_CommandsBackColor()
public void set_CommandsBackColor(Color value)
public Color get_CommandsForeColor()
public void set_CommandsForeColor(Color value)
public Color get_CommandsActiveLinkColor()
public void set_CommandsActiveLinkColor(Color value)
public Color get_CommandsDisabledLinkColor()
public void set_CommandsDisabledLinkColor(Color value)
public Color get_CommandsLinkColor()
public void set_CommandsLinkColor(Color value)
public bool get_CommandsVisible()
public bool get_CommandsVisibleIfAvailable()
public void set_CommandsVisibleIfAvailable(bool value)
public Point get_ContextMenuDefaultLocation()
public ControlCollection get_Controls()
public Color get_ForeColor()
public void set_ForeColor(Color value)
public Color get_HelpBackColor()
public void set_HelpBackColor(Color value)
public Color get_HelpForeColor()
public void set_HelpForeColor(Color value)
public bool get_HelpVisible()
public void set_HelpVisible(bool value)
public bool get_LargeButtons()
public void set_LargeButtons(bool value)
public Color get_LineColor()
public void set_LineColor(Color value)
public Padding get_Padding()
public void set_Padding(Padding value)
public PropertySort get_PropertySort()
public void set_PropertySort(PropertySort value)
public PropertyTabCollection get_PropertyTabs()
public GridItem get_SelectedGridItem()
public void set_SelectedGridItem(GridItem value)
internal GridItem get_RootGridItem()
private void UpdateHelp(GridItem item)
private void SelectItemCore(GridEntry oldItem, GridEntry item)
internal void OnPropertyValueChangedInternal(GridItem item, object property_value)
internal void OnExpandItem(GridEntry item)
internal void OnCollapseItem(GridEntry item)
internal DialogResult ShowError(string text)
internal DialogResult ShowError(string text, MessageBoxButtons buttons)
public object get_SelectedObject()
public void set_SelectedObject(object value)
public Object[] get_SelectedObjects()
public void set_SelectedObjects(Object[] value)
public PropertyTab get_SelectedTab()
public ISite get_Site()
public void set_Site(ISite value)
public string get_Text()
public void set_Text(string value)
public bool get_ToolbarVisible()
public void set_ToolbarVisible(bool value)
protected ToolStripRenderer get_ToolStripRenderer()
protected void set_ToolStripRenderer(ToolStripRenderer value)
public Color get_ViewBackColor()
public void set_ViewBackColor(Color value)
public Color get_ViewForeColor()
public void set_ViewForeColor(Color value)
public bool get_UseCompatibleTextRendering()
public void set_UseCompatibleTextRendering(bool value)
protected Size get_DefaultSize()
protected Type get_DefaultTabType()
protected bool get_DrawFlatToolbar()
protected void set_DrawFlatToolbar(bool value)
protected internal bool get_ShowFocusCues()
protected void Dispose(bool disposing)
public void CollapseAllGridItems()
private void CollapseItemRecursive(GridItem item)
private GridEntry FindCategoryItem(GridEntry entry)
public void ExpandAllGridItems()
private void ExpandItemRecursive(GridItem item)
public void Refresh()
private void toolbar_Clicked(PropertyToolBarButton button)
private void toolbarbutton_clicked(object o, EventArgs args)
private void SelectPropertyTab(PropertyTab propertyTab)
private void UpdatePropertySortButtonsState()
protected void ShowEventsButton(bool value)
public void RefreshTabs(PropertyTabScope tabScope)
private void RefreshToolbar(PropertyTabCollection tabs)
private void EnsurePropertiesTab()
private void GetMergedPropertyTabs(Object[] objects, Type[]& tabTypes, PropertyTabScope[]& tabScopes)
public void ResetSelectedProperty()
protected PropertyTab CreatePropertyTab(Type tabType)
protected void OnComComponentNameChanged(ComponentRenameEventArgs e)
protected void OnEnabledChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnGotFocus(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnMouseDown(MouseEventArgs me)
protected void OnMouseMove(MouseEventArgs me)
protected void OnMouseUp(MouseEventArgs me)
protected void OnNotifyPropertyValueUIItemsChanged(object sender, EventArgs e)
protected void OnPaint(PaintEventArgs pevent)
protected void OnPropertySortChanged(EventArgs e)
protected void OnPropertyTabChanged(PropertyTabChangedEventArgs e)
protected void OnPropertyValueChanged(PropertyValueChangedEventArgs e)
protected void OnResize(EventArgs e)
protected void OnSelectedGridItemChanged(SelectedGridItemChangedEventArgs e)
protected void OnSelectedObjectsChanged(EventArgs e)
protected void OnSystemColorsChanged(EventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected bool ProcessDialogKey(Keys keyData)
protected void ScaleCore(float dx, float dy)
protected void WndProc(Message& m)
public void add_PropertySortChanged(EventHandler value)
public void remove_PropertySortChanged(EventHandler value)
public void add_PropertyTabChanged(PropertyTabChangedEventHandler value)
public void remove_PropertyTabChanged(PropertyTabChangedEventHandler value)
public void add_PropertyValueChanged(PropertyValueChangedEventHandler value)
public void remove_PropertyValueChanged(PropertyValueChangedEventHandler value)
public void add_SelectedGridItemChanged(SelectedGridItemChangedEventHandler value)
public void remove_SelectedGridItemChanged(SelectedGridItemChangedEventHandler value)
public void add_SelectedObjectsChanged(EventHandler value)
public void remove_SelectedObjectsChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_MouseDown(MouseEventHandler value)
public void remove_MouseDown(MouseEventHandler value)
public void add_MouseEnter(EventHandler value)
public void remove_MouseEnter(EventHandler value)
public void add_MouseLeave(EventHandler value)
public void remove_MouseLeave(EventHandler value)
public void add_MouseMove(MouseEventHandler value)
public void remove_MouseMove(MouseEventHandler value)
public void add_MouseUp(MouseEventHandler value)
public void remove_MouseUp(MouseEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
private bool System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.get_InPropertySet()
private void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.DropDownDone()
private bool System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.EnsurePendingChangesCommitted()
private void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.HandleF4()
private void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.LoadState(RegistryKey optRoot)
private void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.SaveState(RegistryKey optRoot)
private void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.add_ComComponentNameChanged(ComponentRenameEventHandler value)
private void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.remove_ComComponentNameChanged(ComponentRenameEventHandler value)
private GridItem FindFirstPropertyItem(GridItem root)
private GridEntry GetDefaultPropertyItem(GridEntry rootItem, PropertyTab propertyTab)
private GridEntry FindItem(string name, GridEntry rootItem)
private void OnResetPropertyClick(object sender, EventArgs e)
private void OnDescriptionClick(object sender, EventArgs e)
private void PopulateGrid(Object[] objects)
private void UpdateSortLayout(GridEntry rootItem)
private void help_panel_Paint(object sender, PaintEventArgs e)
}
internal System.Windows.Forms.PropertyGridInternal.CategoryGridEntry : GridEntry {
private string label
public GridItemType GridItemType
public bool Expandable
public string Label
public bool IsReadOnly
public bool IsEditable
public bool IsResetable
public void .ctor(PropertyGrid owner, string category, GridEntry parent)
public GridItemType get_GridItemType()
public bool get_Expandable()
public string get_Label()
public bool get_IsReadOnly()
public bool get_IsEditable()
public bool get_IsResetable()
}
internal System.Windows.Forms.PropertyGridInternal.GridEntry : GridItem {
private PropertyGrid property_grid
private bool expanded
private GridItemCollection grid_items
private GridItem parent
private PropertyDescriptor[] property_descriptors
private int top
private Rectangle plus_minus_bounds
private GridItemCollection child_griditems_cache
public bool Expandable
public bool Expanded
public GridItemCollection GridItems
public GridItemType GridItemType
public string Label
public GridItem Parent
public GridEntry ParentEntry
public PropertyDescriptor PropertyDescriptor
public PropertyDescriptor[] PropertyDescriptors
public object PropertyOwner
public Object[] PropertyOwners
public bool HasMergedValue
public bool IsMerged
public Object[] Values
public object Value
public string ValueText
private IContainer System.ComponentModel.ITypeDescriptorContext.Container
private object System.ComponentModel.ITypeDescriptorContext.Instance
private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor
internal int Top
internal Rectangle PlusMinusBounds
public ICollection AcceptedValues
public bool HasCustomEditor
public UITypeEditorEditStyle EditorStyle
public bool EditorResizeable
public bool HasDefaultValue
public bool IsResetable
public bool IsEditable
public bool IsReadOnly
public bool IsPassword
public bool ShouldCreateParentInstance
public bool PaintValueSupported
protected void .ctor(PropertyGrid propertyGrid, GridEntry parent)
public void .ctor(PropertyGrid propertyGrid, PropertyDescriptor[] properties, GridEntry parent)
public bool get_Expandable()
public bool get_Expanded()
public void set_Expanded(bool value)
public GridItemCollection get_GridItems()
public GridItemType get_GridItemType()
public string get_Label()
public GridItem get_Parent()
public GridEntry get_ParentEntry()
public PropertyDescriptor get_PropertyDescriptor()
public PropertyDescriptor[] get_PropertyDescriptors()
public object get_PropertyOwner()
public Object[] get_PropertyOwners()
public bool get_HasMergedValue()
public bool get_IsMerged()
public Object[] get_Values()
public object get_Value()
public string get_ValueText()
public bool Select()
private void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged()
private bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging()
private IContainer System.ComponentModel.ITypeDescriptorContext.get_Container()
private object System.ComponentModel.ITypeDescriptorContext.get_Instance()
private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor()
private object System.IServiceProvider.GetService(Type serviceType)
internal int get_Top()
internal void set_Top(int value)
internal Rectangle get_PlusMinusBounds()
internal void set_PlusMinusBounds(Rectangle value)
public void SetParent(GridItem parent)
public ICollection get_AcceptedValues()
private string ConvertToString(object value)
public bool get_HasCustomEditor()
public UITypeEditorEditStyle get_EditorStyle()
public bool get_EditorResizeable()
public bool EditValue(IWindowsFormsEditorService service)
private UITypeEditor GetEditor()
private TypeConverter GetConverter()
public bool ToggleValue()
public bool SetValue(object value, String& error)
protected bool SetValueCore(object value, String& error)
private bool IsValueType(GridEntry item)
public bool ResetValue()
public bool get_HasDefaultValue()
public bool get_IsResetable()
public bool get_IsEditable()
public bool get_IsReadOnly()
public bool get_IsPassword()
public bool get_ShouldCreateParentInstance()
public bool get_PaintValueSupported()
public void PaintValue(Graphics gfx, Rectangle rect)
protected void PopulateChildGridItems()
private void InvalidateChildGridItemsCache()
private GridItemCollection GetChildGridItemsCached()
private GridItemCollection GetChildGridItems()
private bool IsPropertyMergeable(PropertyDescriptor property)
private String[] GetMergedPropertyNames(Object[] objects)
private PropertyDescriptor GetPropertyDescriptor(object propertyOwner, string propertyName)
private PropertyDescriptorCollection GetProperties(object propertyOwner, AttributeCollection attributes)
}
public System.Windows.Forms.PropertyGridInternal.IRootGridEntry {
public AttributeCollection BrowsableAttributes
public AttributeCollection get_BrowsableAttributes()
public void set_BrowsableAttributes(AttributeCollection value)
public void ShowCategories(bool showCategories)
public void ResetBrowsableAttributes()
}
internal System.Windows.Forms.PropertyGridInternal.PGTextBox : TextBox {
private bool _focusing
public void FocusAt(Point location)
protected bool IsInputKey(Keys keyData)
protected void WndProc(Message& m)
}
public System.Windows.Forms.PropertyGridInternal.PropertiesTab : PropertyTab {
public string HelpKeyword
public string TabName
public PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attributes)
public PropertyDescriptor GetDefaultProperty(object obj)
public string get_HelpKeyword()
public string get_TabName()
}
public System.Windows.Forms.PropertyGridInternal.PropertyGridCommands : object {
public CommandID Commands
public CommandID Description
public CommandID Hide
public CommandID Reset
protected Guid wfcMenuCommand
protected Guid wfcMenuGroup
}
internal System.Windows.Forms.PropertyGridInternal.PropertyGridTextBox : UserControl {
private PGTextBox textbox
private Button dialog_button
private Button dropdown_button
private bool validating
private bool filtering
private object DropDownButtonClickedEvent
private object DialogButtonClickedEvent
private object ToggleValueEvent
private object KeyDownEvent
private object ValidateEvent
public bool DialogButtonVisible
public bool DropDownButtonVisible
public Color ForeColor
public Color BackColor
public bool ReadOnly
public string Text
public char PasswordChar
protected void OnGotFocus(EventArgs args)
public bool get_DialogButtonVisible()
public void set_DialogButtonVisible(bool value)
public bool get_DropDownButtonVisible()
public void set_DropDownButtonVisible(bool value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public Color get_BackColor()
public void set_BackColor(Color value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public string get_Text()
public void set_Text(string value)
public void set_PasswordChar(char value)
public void add_DropDownButtonClicked(EventHandler value)
public void remove_DropDownButtonClicked(EventHandler value)
public void add_DialogButtonClicked(EventHandler value)
public void remove_DialogButtonClicked(EventHandler value)
public void add_ToggleValue(EventHandler value)
public void remove_ToggleValue(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_Validate(CancelEventHandler value)
public void remove_Validate(CancelEventHandler value)
private void dropdown_button_Paint(object sender, PaintEventArgs e)
private void dialog_button_Paint(object sender, PaintEventArgs e)
private void dropdown_button_Click(object sender, EventArgs e)
private void dialog_button_Click(object sender, EventArgs e)
internal void SendMouseDown(Point screenLocation)
private void textbox_DoubleClick(object sender, EventArgs e)
private void textbox_KeyDown(object sender, KeyEventArgs e)
private void textbox_GotFocus(object sender, EventArgs e)
protected void DestroyHandle()
private bool System.Windows.Forms.IMessageFilter.PreFilterMessage(Message& m)
}
internal System.Windows.Forms.PropertyGridInternal.PropertyGridView : ScrollableControl {
private char PASSWORD_PAINT_CHAR
private char PASSWORD_TEXT_CHAR
private int V_INDENT
private int ENTRY_SPACING
private int RESIZE_WIDTH
private int BUTTON_WIDTH
private int VALUE_PAINT_WIDTH
private int VALUE_PAINT_INDENT
private double splitter_percent
private int row_height
private int font_height_padding
private PropertyGridTextBox grid_textbox
private PropertyGrid property_grid
private bool resizing_grid
private PropertyGridDropDown dropdown_form
private Form dialog_form
private ImplicitVScrollBar vbar
private StringFormat string_format
private Font bold_font
private Brush inactive_text_brush
private ListBox dropdown_list
private Point last_click
private Padding dropdown_form_padding
private GridEntry RootGridItem
private GridEntry SelectedGridItem
private int SplitterLocation
private double SplitterPercent
public void .ctor(PropertyGrid propertyGrid)
private GridEntry get_RootGridItem()
private GridEntry get_SelectedGridItem()
private void set_SelectedGridItem(GridEntry value)
protected void OnFontChanged(EventArgs e)
private void InvalidateItemLabel(GridEntry item)
private void InvalidateItem(GridEntry item)
protected void OnDoubleClick(EventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnMouseWheel(MouseEventArgs e)
protected void OnMouseMove(MouseEventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnResize(EventArgs e)
private void UnfocusSelection()
private void FocusSelection()
protected bool ProcessDialogKey(Keys keyData)
private bool TrySetEntry(GridEntry entry, object value)
protected bool IsInputKey(Keys keyData)
private GridEntry MoveUpFromItem(GridEntry item, int up_count)
private GridEntry MoveDownFromItem(GridEntry item, int down_count)
protected void OnKeyDown(KeyEventArgs e)
private int get_SplitterLocation()
private void set_SplitterPercent(double value)
private double get_SplitterPercent()
private bool GridLabelHitTest(int x)
private GridItem GetSelectedGridItem(GridItemCollection grid_items, int y, Int32& current)
private int GetVisibleItemsCount(GridEntry entry)
private int GetVisibleRowsCount()
private void UpdateScrollBar()
private void DrawGridItems(GridItemCollection grid_items, PaintEventArgs pevent, int depth, Int32& yLoc)
private void DrawGridItemLabel(GridEntry grid_item, PaintEventArgs pevent, int depth, Rectangle rect)
private void DrawGridItemValue(GridEntry grid_item, PaintEventArgs pevent, int depth, Rectangle rect)
private void DrawGridItem(GridEntry grid_item, PaintEventArgs pevent, int depth, Int32& yLoc)
private Rectangle DrawPlusMinus(Graphics g, int x, int y, bool expanded, bool category)
private void RedrawEvent(object sender, EventArgs e)
private void listBox_MouseUp(object sender, MouseEventArgs e)
private void listBox_KeyDown(object sender, KeyEventArgs e)
private void AcceptListBoxSelection(object sender)
private void DropDownButtonClicked(object sender, EventArgs e)
private void DropDownEdit()
private void DialogButtonClicked(object sender, EventArgs e)
private void VScrollBar_HandleValueChanged(object sender, EventArgs e)
private void grid_textbox_ToggleValue(object sender, EventArgs args)
private void grid_textbox_KeyDown(object sender, KeyEventArgs e)
private void grid_textbox_Validate(object sender, CancelEventArgs args)
private void ToggleValue(GridEntry entry)
internal void UpdateItem(GridEntry entry)
private void UpdateGridTextBoxBounds(GridEntry entry)
private bool CalculateItemY(GridEntry entry, GridItemCollection items, Int32& y)
private void ScrollToItem(GridEntry item)
internal void SelectItem(GridEntry oldItem, GridEntry newItem)
internal void UpdateView()
internal void ExpandItem(GridEntry item)
internal void CollapseItem(GridEntry item)
private void ShowDropDownControl(Control control, bool resizeable)
private void RepositionInScreenWorkingArea(Form form)
private bool HwndInControl(Control c, IntPtr hwnd)
public void CloseDropDown()
public void DropDownControl(Control control)
public DialogResult ShowDialog(Form dialog)
}
internal System.Windows.Forms.PropertyGridInternal.RootGridEntry : GridEntry {
private Object[] val
public bool Expandable
public GridItemType GridItemType
public string Label
public object Value
public Object[] Values
public bool IsReadOnly
public bool IsEditable
public bool IsResetable
public bool IsMerged
public void .ctor(PropertyGrid owner, Object[] obj)
public bool get_Expandable()
public GridItemType get_GridItemType()
public string get_Label()
public object get_Value()
public Object[] get_Values()
public bool Select()
public bool get_IsReadOnly()
public bool get_IsEditable()
public bool get_IsResetable()
public bool get_IsMerged()
}
public System.Windows.Forms.PropertyManager : BindingManagerBase {
internal string property_name
private PropertyDescriptor prop_desc
private object data_source
private EventDescriptor changed_event
private EventHandler property_value_changed_handler
public object Current
public int Position
public int Count
internal bool IsSuspended
internal void .ctor(object data_source)
internal void .ctor(object data_source, string property_name)
internal void SetDataSource(object new_data_source)
private void PropertyValueChanged(object sender, EventArgs args)
public object get_Current()
public int get_Position()
public void set_Position(int value)
public int get_Count()
public void AddNew()
public void CancelCurrentEdit()
public void EndCurrentEdit()
internal PropertyDescriptorCollection GetItemPropertiesInternal()
public void RemoveAt(int index)
public void ResumeBinding()
public void SuspendBinding()
internal bool get_IsSuspended()
protected internal string GetListName(ArrayList listAccessors)
protected void UpdateIsBinding()
protected internal void OnCurrentChanged(EventArgs ea)
protected void OnCurrentItemChanged(EventArgs ea)
}
internal System.Windows.Forms.PropertyMode : Enum {
public int value__
public PropertyMode Replace
public PropertyMode Prepend
public PropertyMode Append
}
public System.Windows.Forms.PropertySort : Enum {
public int value__
public PropertySort NoSort
public PropertySort Alphabetical
public PropertySort Categorized
public PropertySort CategorizedAlphabetical
}
public System.Windows.Forms.PropertyTabChangedEventArgs : EventArgs {
private PropertyTab old_tab
private PropertyTab new_tab
public PropertyTab NewTab
public PropertyTab OldTab
public void .ctor(PropertyTab oldTab, PropertyTab newTab)
public PropertyTab get_NewTab()
public PropertyTab get_OldTab()
}
public System.Windows.Forms.PropertyTabChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object s, PropertyTabChangedEventArgs e)
public IAsyncResult BeginInvoke(object s, PropertyTabChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.PropertyValueChangedEventArgs : EventArgs {
private GridItem changed_item
private object old_value
public GridItem ChangedItem
public object OldValue
public void .ctor(GridItem changedItem, object oldValue)
public GridItem get_ChangedItem()
public object get_OldValue()
}
public System.Windows.Forms.PropertyValueChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object s, PropertyValueChangedEventArgs e)
public IAsyncResult BeginInvoke(object s, PropertyValueChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.QueryAccessibilityHelpEventArgs : EventArgs {
private string help_namespace
private string help_string
private string help_keyword
public string HelpKeyword
public string HelpNamespace
public string HelpString
public void .ctor(string helpNamespace, string helpString, string helpKeyword)
public string get_HelpKeyword()
public void set_HelpKeyword(string value)
public string get_HelpNamespace()
public void set_HelpNamespace(string value)
public string get_HelpString()
public void set_HelpString(string value)
}
public System.Windows.Forms.QueryAccessibilityHelpEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, QueryAccessibilityHelpEventArgs e)
public IAsyncResult BeginInvoke(object sender, QueryAccessibilityHelpEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.QueryContinueDragEventArgs : EventArgs {
internal int key_state
internal bool escape_pressed
internal DragAction drag_action
public DragAction Action
public bool EscapePressed
public int KeyState
public void .ctor(int keyState, bool escapePressed, DragAction action)
public DragAction get_Action()
public void set_Action(DragAction value)
public bool get_EscapePressed()
public int get_KeyState()
}
public System.Windows.Forms.QueryContinueDragEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, QueryContinueDragEventArgs e)
public IAsyncResult BeginInvoke(object sender, QueryContinueDragEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.QuestionEventArgs : EventArgs {
private bool response
public bool Response
public void .ctor(bool response)
public bool get_Response()
public void set_Response(bool value)
}
public System.Windows.Forms.QuestionEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, QuestionEventArgs e)
public IAsyncResult BeginInvoke(object sender, QuestionEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.RadioButton : ButtonBase {
internal Appearance appearance
internal bool auto_check
internal ContentAlignment radiobutton_alignment
internal CheckState check_state
private object AppearanceChangedEvent
private object CheckedChangedEvent
public Appearance Appearance
public bool AutoCheck
public ContentAlignment CheckAlign
public bool Checked
public bool TabStop
public ContentAlignment TextAlign
protected CreateParams CreateParams
protected Size DefaultSize
private void PerformDefaultCheck()
private void UpdateSiblings()
internal void Draw(PaintEventArgs pe)
internal Size GetPreferredSizeCore(Size proposedSize)
public Appearance get_Appearance()
public void set_Appearance(Appearance value)
public bool get_AutoCheck()
public void set_AutoCheck(bool value)
public ContentAlignment get_CheckAlign()
public void set_CheckAlign(ContentAlignment value)
public bool get_Checked()
public void set_Checked(bool value)
public bool get_TabStop()
public void set_TabStop(bool value)
public ContentAlignment get_TextAlign()
public void set_TextAlign(ContentAlignment value)
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
public void PerformClick()
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected void OnCheckedChanged(EventArgs e)
protected void OnClick(EventArgs e)
protected void OnEnter(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnMouseUp(MouseEventArgs mevent)
protected bool ProcessMnemonic(char charCode)
public void add_AppearanceChanged(EventHandler value)
public void remove_AppearanceChanged(EventHandler value)
public void add_CheckedChanged(EventHandler value)
public void remove_CheckedChanged(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
}
public System.Windows.Forms.RadioButtonRenderer : object {
private bool always_use_visual_styles
public bool RenderMatchingApplicationState
public void DrawRadioButton(Graphics g, Point glyphLocation, RadioButtonState state)
public void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, bool focused, RadioButtonState state)
public void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, TextFormatFlags flags, bool focused, RadioButtonState state)
public void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, Image image, Rectangle imageBounds, bool focused, RadioButtonState state)
public void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, RadioButtonState state)
public bool IsBackgroundPartiallyTransparent(RadioButtonState state)
public void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl)
public Size GetGlyphSize(Graphics g, RadioButtonState state)
private VisualStyleRenderer GetRadioButtonRenderer(RadioButtonState state)
public bool get_RenderMatchingApplicationState()
public void set_RenderMatchingApplicationState(bool value)
}
internal System.Windows.Forms.RelatedCurrencyManager : CurrencyManager {
private BindingManagerBase parent
private PropertyDescriptor prop_desc
public void .ctor(BindingManagerBase parent, PropertyDescriptor prop_desc)
private void parent_PositionChanged(object sender, EventArgs args)
}
public System.Windows.Forms.RelatedImageListAttribute : Attribute {
private string related_image_list
public string RelatedImageList
public void .ctor(string relatedImageList)
public string get_RelatedImageList()
}
internal System.Windows.Forms.RelatedPropertyManager : PropertyManager {
private BindingManagerBase parent
public void .ctor(BindingManagerBase parent, string property_name)
private void parent_PositionChanged(object sender, EventArgs args)
public PropertyDescriptorCollection GetItemProperties()
}
internal System.Windows.Forms.ResourceImageLoader : object {
private Assembly assembly
internal Bitmap Get(string name)
internal Icon GetIcon(string name)
}
public System.Windows.Forms.RetrieveVirtualItemEventArgs : EventArgs {
private ListViewItem item
private int item_index
public ListViewItem Item
public int ItemIndex
public void .ctor(int itemIndex)
public ListViewItem get_Item()
public void set_Item(ListViewItem value)
public int get_ItemIndex()
}
public System.Windows.Forms.RetrieveVirtualItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, RetrieveVirtualItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, RetrieveVirtualItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.RevertTo : Enum {
public int value__
public RevertTo None
public RevertTo PointerRoot
public RevertTo Parent
}
public System.Windows.Forms.RichTextBox : TextBoxBase {
internal bool auto_word_select
internal int bullet_indent
internal bool detect_urls
private bool reuse_line
internal int margin_right
internal float zoom
private StringBuilder rtf_line
private RtfSectionStyle rtf_style
private Stack rtf_section_stack
private TextMap rtf_text_map
private int rtf_skip_count
private int rtf_cursor_x
private int rtf_cursor_y
private int rtf_chars
private bool enable_auto_drag_drop
private RichTextBoxLanguageOptions language_option
private bool rich_text_shortcuts_enabled
private Color selection_back_color
private object ContentsResizedEvent
private object HScrollEvent
private object ImeChangeEvent
private object LinkClickedEvent
private object ProtectedEvent
private object SelectionChangedEvent
private object VScrollEvent
private Char[] ReservedRTFChars
public bool AllowDrop
public bool AutoSize
public bool AutoWordSelection
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public int BulletIndent
public bool CanRedo
public bool DetectUrls
public bool EnableAutoDragDrop
public Font Font
public Color ForeColor
public RichTextBoxLanguageOptions LanguageOption
public int MaxLength
public bool Multiline
public string RedoActionName
public bool RichTextShortcutsEnabled
public int RightMargin
public string Rtf
public RichTextBoxScrollBars ScrollBars
public string SelectedRtf
public string SelectedText
public HorizontalAlignment SelectionAlignment
public Color SelectionBackColor
public bool SelectionBullet
public int SelectionCharOffset
public Color SelectionColor
public Font SelectionFont
public int SelectionHangingIndent
public int SelectionIndent
public int SelectionLength
public bool SelectionProtected
public int SelectionRightIndent
public Int32[] SelectionTabs
public RichTextBoxSelectionTypes SelectionType
public bool ShowSelectionMargin
public string Text
public int TextLength
public string UndoActionName
public float ZoomFactor
protected CreateParams CreateParams
protected Size DefaultSize
internal void HandleLinkClicked(LinkRectangle link)
internal Color ChangeBackColor(Color backColor)
internal void RaiseSelectionChanged()
private void RichTextBox_LostFocus(object sender, EventArgs e)
private void RichTextBox_GotFocus(object sender, EventArgs e)
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public bool get_AutoWordSelection()
public void set_AutoWordSelection(bool value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public int get_BulletIndent()
public void set_BulletIndent(int value)
public bool get_CanRedo()
public bool get_DetectUrls()
public void set_DetectUrls(bool value)
public bool get_EnableAutoDragDrop()
public void set_EnableAutoDragDrop(bool value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public RichTextBoxLanguageOptions get_LanguageOption()
public void set_LanguageOption(RichTextBoxLanguageOptions value)
public int get_MaxLength()
public void set_MaxLength(int value)
public bool get_Multiline()
public void set_Multiline(bool value)
public string get_RedoActionName()
public bool get_RichTextShortcutsEnabled()
public void set_RichTextShortcutsEnabled(bool value)
public int get_RightMargin()
public void set_RightMargin(int value)
public string get_Rtf()
public void set_Rtf(string value)
public RichTextBoxScrollBars get_ScrollBars()
public void set_ScrollBars(RichTextBoxScrollBars value)
public string get_SelectedRtf()
public void set_SelectedRtf(string value)
public string get_SelectedText()
public void set_SelectedText(string value)
public HorizontalAlignment get_SelectionAlignment()
public void set_SelectionAlignment(HorizontalAlignment value)
public Color get_SelectionBackColor()
public void set_SelectionBackColor(Color value)
public bool get_SelectionBullet()
public void set_SelectionBullet(bool value)
public int get_SelectionCharOffset()
public void set_SelectionCharOffset(int value)
public Color get_SelectionColor()
public void set_SelectionColor(Color value)
public Font get_SelectionFont()
public void set_SelectionFont(Font value)
public int get_SelectionHangingIndent()
public void set_SelectionHangingIndent(int value)
public int get_SelectionIndent()
public void set_SelectionIndent(int value)
public int get_SelectionLength()
public void set_SelectionLength(int value)
public bool get_SelectionProtected()
public void set_SelectionProtected(bool value)
public int get_SelectionRightIndent()
public void set_SelectionRightIndent(int value)
public Int32[] get_SelectionTabs()
public void set_SelectionTabs(Int32[] value)
public RichTextBoxSelectionTypes get_SelectionType()
public bool get_ShowSelectionMargin()
public void set_ShowSelectionMargin(bool value)
public string get_Text()
public void set_Text(string value)
public int get_TextLength()
public string get_UndoActionName()
public float get_ZoomFactor()
public void set_ZoomFactor(float value)
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
public bool CanPaste(Format clipFormat)
public int Find(Char[] characterSet)
public int Find(Char[] characterSet, int start)
public int Find(Char[] characterSet, int start, int end)
public int Find(string str)
public int Find(string str, int start, int end, RichTextBoxFinds options)
public int Find(string str, int start, RichTextBoxFinds options)
public int Find(string str, RichTextBoxFinds options)
internal char GetCharFromPositionInternal(Point p)
public int GetCharIndexFromPosition(Point pt)
public int GetLineFromCharIndex(int index)
public Point GetPositionFromCharIndex(int index)
public void LoadFile(Stream data, RichTextBoxStreamType fileType)
public void LoadFile(string path)
public void LoadFile(string path, RichTextBoxStreamType fileType)
public void Paste(Format clipFormat)
public void Redo()
public void SaveFile(Stream data, RichTextBoxStreamType fileType)
public void SaveFile(string path)
public void SaveFile(string path, RichTextBoxStreamType fileType)
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds)
protected object CreateRichEditOleCallback()
protected void OnBackColorChanged(EventArgs e)
protected void OnContentsResized(ContentsResizedEventArgs e)
protected void OnContextMenuChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnHScroll(EventArgs e)
protected void OnImeChange(EventArgs e)
protected void OnLinkClicked(LinkClickedEventArgs e)
protected void OnProtected(EventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
protected void OnSelectionChanged(EventArgs e)
protected void OnVScroll(EventArgs e)
protected void WndProc(Message& m)
protected bool ProcessCmdKey(Message& m, Keys keyData)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_ContentsResized(ContentsResizedEventHandler value)
public void remove_ContentsResized(ContentsResizedEventHandler value)
public void add_DragDrop(DragEventHandler value)
public void remove_DragDrop(DragEventHandler value)
public void add_DragEnter(DragEventHandler value)
public void remove_DragEnter(DragEventHandler value)
public void add_DragLeave(EventHandler value)
public void remove_DragLeave(EventHandler value)
public void add_DragOver(DragEventHandler value)
public void remove_DragOver(DragEventHandler value)
public void add_GiveFeedback(GiveFeedbackEventHandler value)
public void remove_GiveFeedback(GiveFeedbackEventHandler value)
public void add_HScroll(EventHandler value)
public void remove_HScroll(EventHandler value)
public void add_ImeChange(EventHandler value)
public void remove_ImeChange(EventHandler value)
public void add_LinkClicked(LinkClickedEventHandler value)
public void remove_LinkClicked(LinkClickedEventHandler value)
public void add_Protected(EventHandler value)
public void remove_Protected(EventHandler value)
public void add_QueryContinueDrag(QueryContinueDragEventHandler value)
public void remove_QueryContinueDrag(QueryContinueDragEventHandler value)
public void add_SelectionChanged(EventHandler value)
public void remove_SelectionChanged(EventHandler value)
public void add_VScroll(EventHandler value)
public void remove_VScroll(EventHandler value)
internal void SelectWord()
private void HandleGroup(RTF rtf)
private void HandleControl(RTF rtf)
private void SpecialChar(RTF rtf)
private void HandleText(RTF rtf)
private void FlushText(RTF rtf, bool newline)
private void InsertRTFFromStream(Stream data, int cursor_x, int cursor_y)
private void InsertRTFFromStream(Stream data, int cursor_x, int cursor_y, Int32& to_x, Int32& to_y, Int32& chars)
private void RichTextBox_HScrolled(object sender, EventArgs e)
private void RichTextBox_VScrolled(object sender, EventArgs e)
private void PointToTagPos(Point pt, LineTag& tag, Int32& pos)
private void EmitRTFFontProperties(StringBuilder rtf, int prev_index, int font_index, Font prev_font, Font font)
private void EmitRTFText(StringBuilder rtf, string text)
private void EmitEscapedUnicode(StringBuilder sb, string text)
private int IndexOfNonAscii(string text, int startIndex)
private StringBuilder GenerateRTF(Line start_line, int start_pos, Line end_line, int end_pos)
}
public System.Windows.Forms.RichTextBoxFinds : Enum {
public int value__
public RichTextBoxFinds None
public RichTextBoxFinds WholeWord
public RichTextBoxFinds MatchCase
public RichTextBoxFinds NoHighlight
public RichTextBoxFinds Reverse
}
public System.Windows.Forms.RichTextBoxLanguageOptions : Enum {
public int value__
public RichTextBoxLanguageOptions AutoKeyboard
public RichTextBoxLanguageOptions AutoFont
public RichTextBoxLanguageOptions ImeCancelComplete
public RichTextBoxLanguageOptions ImeAlwaysSendNotify
public RichTextBoxLanguageOptions AutoFontSizeAdjust
public RichTextBoxLanguageOptions UIFonts
public RichTextBoxLanguageOptions DualFont
}
public System.Windows.Forms.RichTextBoxScrollBars : Enum {
public int value__
public RichTextBoxScrollBars None
public RichTextBoxScrollBars Horizontal
public RichTextBoxScrollBars Vertical
public RichTextBoxScrollBars Both
public RichTextBoxScrollBars ForcedHorizontal
public RichTextBoxScrollBars ForcedVertical
public RichTextBoxScrollBars ForcedBoth
}
public System.Windows.Forms.RichTextBoxSelectionAttribute : Enum {
public int value__
public RichTextBoxSelectionAttribute None
public RichTextBoxSelectionAttribute All
public RichTextBoxSelectionAttribute Mixed
}
public System.Windows.Forms.RichTextBoxSelectionTypes : Enum {
public int value__
public RichTextBoxSelectionTypes Empty
public RichTextBoxSelectionTypes Text
public RichTextBoxSelectionTypes Object
public RichTextBoxSelectionTypes MultiChar
public RichTextBoxSelectionTypes MultiObject
}
public System.Windows.Forms.RichTextBoxStreamType : Enum {
public int value__
public RichTextBoxStreamType RichText
public RichTextBoxStreamType PlainText
public RichTextBoxStreamType RichNoOleObjs
public RichTextBoxStreamType TextTextOleObjs
public RichTextBoxStreamType UnicodePlainText
}
public System.Windows.Forms.RichTextBoxWordPunctuations : Enum {
public int value__
public RichTextBoxWordPunctuations Level1
public RichTextBoxWordPunctuations Level2
public RichTextBoxWordPunctuations Custom
public RichTextBoxWordPunctuations All
}
public System.Windows.Forms.RightToLeft : Enum {
public int value__
public RightToLeft No
public RightToLeft Yes
public RightToLeft Inherit
}
public System.Windows.Forms.RowStyle : TableLayoutStyle {
private float height
public float Height
public void .ctor(SizeType sizeType)
public void .ctor(SizeType sizeType, float height)
public float get_Height()
public void set_Height(float value)
}
internal System.Windows.Forms.RTF.Charcode : object {
private StandardCharCode[] codes
private Hashtable reverse
private int size
private Charcode ansi_generic
public int Item
public StandardCharCode Item
public Charcode AnsiGeneric
public Charcode AnsiSymbol
private void .ctor(int size)
public int get_Item(StandardCharCode c)
public StandardCharCode get_Item(int c)
private void set_Item(int c, StandardCharCode value)
public Charcode get_AnsiGeneric()
public Charcode get_AnsiSymbol()
}
internal System.Windows.Forms.RTF.Charset : object {
private CharsetType id
private CharsetFlags flags
private Charcode code
private string file
public Charcode Code
public CharsetFlags Flags
public CharsetType ID
public string File
public StandardCharCode Item
public Charcode get_Code()
public void set_Code(Charcode value)
public CharsetFlags get_Flags()
public void set_Flags(CharsetFlags value)
public CharsetType get_ID()
public void set_ID(CharsetType value)
public string get_File()
public void set_File(string value)
public StandardCharCode get_Item(int c)
public bool ReadMap()
public char StdCharCode(string name)
public string StdCharName(char code)
}
internal System.Windows.Forms.RTF.CharsetFlags : Enum {
public int value__
public CharsetFlags None
public CharsetFlags Read
public CharsetFlags Switch
}
internal System.Windows.Forms.RTF.CharsetType : Enum {
public int value__
public CharsetType General
public CharsetType Symbol
}
internal System.Windows.Forms.RTF.ClassCallback : object {
private ClassDelegate[] callbacks
public ClassDelegate Item
public ClassDelegate get_Item(TokenClass c)
public void set_Item(TokenClass c, ClassDelegate value)
}
internal System.Windows.Forms.RTF.ClassDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(RTF sender)
public IAsyncResult BeginInvoke(RTF sender, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.RTF.Color : object {
private int red
private int green
private int blue
private int num
private Color next
public int Red
public int Green
public int Blue
public int Num
public void .ctor(RTF rtf)
public int get_Red()
public void set_Red(int value)
public int get_Green()
public void set_Green(int value)
public int get_Blue()
public void set_Blue(int value)
public int get_Num()
public void set_Num(int value)
public Color GetColor(RTF rtf, int color_number)
private Color GetColor(Color start, int color_number)
}
internal System.Windows.Forms.RTF.DestinationCallback : object {
private DestinationDelegate[] callbacks
public DestinationDelegate Item
public DestinationDelegate get_Item(Minor c)
public void set_Item(Minor c, DestinationDelegate value)
}
internal System.Windows.Forms.RTF.DestinationDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(RTF Sender)
public IAsyncResult BeginInvoke(RTF Sender, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.RTF.Font : object {
private string name
private string alt_name
private int num
private int family
private CharsetType charset
private int pitch
private int type
private int codepage
private Font next
private RTF rtf
public string Name
public string AltName
public int Num
public int Family
public CharsetType Charset
public int Pitch
public int Type
public int Codepage
public void .ctor(RTF rtf)
public string get_Name()
public void set_Name(string value)
public string get_AltName()
public void set_AltName(string value)
public int get_Num()
public void set_Num(int value)
public int get_Family()
public void set_Family(int value)
public CharsetType get_Charset()
public void set_Charset(CharsetType value)
public int get_Pitch()
public void set_Pitch(int value)
public int get_Type()
public void set_Type(int value)
public int get_Codepage()
public void set_Codepage(int value)
public bool DeleteFont(RTF rtf, int font_number)
public Font GetFont(RTF rtf, int font_number)
public Font GetFont(Font start, int font_number)
}
internal System.Windows.Forms.RTF.KeysInit : object {
public KeyStruct[] Init()
}
internal System.Windows.Forms.RTF.KeyStruct : ValueType {
public Major Major
public Minor Minor
public string Symbol
public void .ctor(Major major, Minor minor, string symbol)
}
internal System.Windows.Forms.RTF.Major : Enum {
public int value__
public Major BeginGroup
public Major EndGroup
public Major Version
public Major DefFont
public Major CharSet
public Major Destination
public Major FontFamily
public Major ColorName
public Major SpecialChar
public Major StyleAttr
public Major DocAttr
public Major SectAttr
public Major TblAttr
public Major ParAttr
public Major CharAttr
public Major PictAttr
public Major BookmarkAttr
public Major NeXTGrAttr
public Major FieldAttr
public Major TOCAttr
public Major PosAttr
public Major ObjAttr
public Major FNoteAttr
public Major KeyCodeAttr
public Major ACharAttr
public Major FontAttr
public Major FileAttr
public Major FileSource
public Major DrawAttr
public Major IndexAttr
public Major Unicode
}
internal System.Windows.Forms.RTF.Minor : Enum {
public int value__
public Minor Undefined
public Minor Skip
public Minor AnsiCharSet
public Minor MacCharSet
public Minor PcCharSet
public Minor PcaCharSet
public Minor FontTbl
public Minor FontAltName
public Minor EmbeddedFont
public Minor FontFile
public Minor FileTbl
public Minor FileInfo
public Minor ColorTbl
public Minor StyleSheet
public Minor KeyCode
public Minor RevisionTbl
public Minor Info
public Minor ITitle
public Minor ISubject
public Minor IAuthor
public Minor IOperator
public Minor IKeywords
public Minor IComment
public Minor IVersion
public Minor IDoccomm
public Minor IVerscomm
public Minor NextFile
public Minor Template
public Minor FNSep
public Minor FNContSep
public Minor FNContNotice
public Minor ENSep
public Minor ENContSep
public Minor ENContNotice
public Minor PageNumLevel
public Minor ParNumLevelStyle
public Minor Header
public Minor Footer
public Minor HeaderLeft
public Minor HeaderRight
public Minor HeaderFirst
public Minor FooterLeft
public Minor FooterRight
public Minor FooterFirst
public Minor ParNumText
public Minor ParNumbering
public Minor ParNumTextAfter
public Minor ParNumTextBefore
public Minor BookmarkStart
public Minor BookmarkEnd
public Minor Pict
public Minor Object
public Minor ObjClass
public Minor ObjName
public Minor ObjTime
public Minor ObjData
public Minor ObjAlias
public Minor ObjSection
public Minor ObjResult
public Minor ObjItem
public Minor ObjTopic
public Minor DrawObject
public Minor Footnote
public Minor AnnotRefStart
public Minor AnnotRefEnd
public Minor AnnotID
public Minor AnnotAuthor
public Minor Annotation
public Minor AnnotRef
public Minor AnnotTime
public Minor AnnotIcon
public Minor Field
public Minor FieldInst
public Minor FieldResult
public Minor DataField
public Minor Index
public Minor IndexText
public Minor IndexRange
public Minor TOC
public Minor NeXTGraphic
public Minor MaxDestination
public Minor FFNil
public Minor FFRoman
public Minor FFSwiss
public Minor FFModern
public Minor FFScript
public Minor FFDecor
public Minor FFTech
public Minor FFBidirectional
public Minor Red
public Minor Green
public Minor Blue
public Minor IIntVersion
public Minor ICreateTime
public Minor IRevisionTime
public Minor IPrintTime
public Minor IBackupTime
public Minor IEditTime
public Minor IYear
public Minor IMonth
public Minor IDay
public Minor IHour
public Minor IMinute
public Minor ISecond
public Minor INPages
public Minor INWords
public Minor INChars
public Minor IIntID
public Minor CurHeadDate
public Minor CurHeadDateLong
public Minor CurHeadDateAbbrev
public Minor CurHeadTime
public Minor CurHeadPage
public Minor SectNum
public Minor CurFNote
public Minor CurAnnotRef
public Minor FNoteSep
public Minor FNoteCont
public Minor Cell
public Minor Row
public Minor Par
public Minor Sect
public Minor Page
public Minor Column
public Minor Line
public Minor SoftPage
public Minor SoftColumn
public Minor SoftLine
public Minor SoftLineHt
public Minor Tab
public Minor EmDash
public Minor EnDash
public Minor EmSpace
public Minor EnSpace
public Minor Bullet
public Minor LQuote
public Minor RQuote
public Minor LDblQuote
public Minor RDblQuote
public Minor Formula
public Minor NoBrkSpace
public Minor NoReqHyphen
public Minor NoBrkHyphen
public Minor OptDest
public Minor LTRMark
public Minor RTLMark
public Minor NoWidthJoiner
public Minor NoWidthNonJoiner
public Minor CurHeadPict
public Minor Additive
public Minor BasedOn
public Minor Next
public Minor DefTab
public Minor HyphHotZone
public Minor HyphConsecLines
public Minor HyphCaps
public Minor HyphAuto
public Minor LineStart
public Minor FracWidth
public Minor MakeBackup
public Minor RTFDefault
public Minor PSOverlay
public Minor DocTemplate
public Minor DefLanguage
public Minor FENoteType
public Minor FNoteEndSect
public Minor FNoteEndDoc
public Minor FNoteText
public Minor FNoteBottom
public Minor ENoteEndSect
public Minor ENoteEndDoc
public Minor ENoteText
public Minor ENoteBottom
public Minor FNoteStart
public Minor ENoteStart
public Minor FNoteRestartPage
public Minor FNoteRestart
public Minor FNoteRestartCont
public Minor ENoteRestart
public Minor ENoteRestartCont
public Minor FNoteNumArabic
public Minor FNoteNumLLetter
public Minor FNoteNumULetter
public Minor FNoteNumLRoman
public Minor FNoteNumURoman
public Minor FNoteNumChicago
public Minor ENoteNumArabic
public Minor ENoteNumLLetter
public Minor ENoteNumULetter
public Minor ENoteNumLRoman
public Minor ENoteNumURoman
public Minor ENoteNumChicago
public Minor PaperWidth
public Minor PaperHeight
public Minor PaperSize
public Minor LeftMargin
public Minor RightMargin
public Minor TopMargin
public Minor BottomMargin
public Minor FacingPage
public Minor GutterWid
public Minor MirrorMargin
public Minor Landscape
public Minor PageStart
public Minor WidowCtrl
public Minor LinkStyles
public Minor NoAutoTabIndent
public Minor WrapSpaces
public Minor PrintColorsBlack
public Minor NoExtraSpaceRL
public Minor NoColumnBalance
public Minor CvtMailMergeQuote
public Minor SuppressTopSpace
public Minor SuppressPreParSpace
public Minor CombineTblBorders
public Minor TranspMetafiles
public Minor SwapBorders
public Minor ShowHardBreaks
public Minor FormProtected
public Minor AllProtected
public Minor FormShading
public Minor FormDisplay
public Minor PrintData
public Minor RevProtected
public Minor Revisions
public Minor RevDisplay
public Minor RevBar
public Minor AnnotProtected
public Minor RTLDoc
public Minor LTRDoc
public Minor SectDef
public Minor ENoteHere
public Minor PrtBinFirst
public Minor PrtBin
public Minor SectStyleNum
public Minor NoBreak
public Minor ColBreak
public Minor PageBreak
public Minor EvenBreak
public Minor OddBreak
public Minor Columns
public Minor ColumnSpace
public Minor ColumnNumber
public Minor ColumnSpRight
public Minor ColumnWidth
public Minor ColumnLine
public Minor LineModulus
public Minor LineDist
public Minor LineStarts
public Minor LineRestart
public Minor LineRestartPg
public Minor LineCont
public Minor SectPageWid
public Minor SectPageHt
public Minor SectMarginLeft
public Minor SectMarginRight
public Minor SectMarginTop
public Minor SectMarginBottom
public Minor SectMarginGutter
public Minor SectLandscape
public Minor TitleSpecial
public Minor HeaderY
public Minor FooterY
public Minor PageStarts
public Minor PageCont
public Minor PageRestart
public Minor PageNumRight
public Minor PageNumTop
public Minor PageDecimal
public Minor PageURoman
public Minor PageLRoman
public Minor PageULetter
public Minor PageLLetter
public Minor PageNumHyphSep
public Minor PageNumSpaceSep
public Minor PageNumColonSep
public Minor PageNumEmdashSep
public Minor PageNumEndashSep
public Minor TopVAlign
public Minor BottomVAlign
public Minor CenterVAlign
public Minor JustVAlign
public Minor RTLSect
public Minor LTRSect
public Minor RowDef
public Minor RowGapH
public Minor CellPos
public Minor MergeRngFirst
public Minor MergePrevious
public Minor RowLeft
public Minor RowRight
public Minor RowCenter
public Minor RowLeftEdge
public Minor RowHt
public Minor RowHeader
public Minor RowKeep
public Minor RTLRow
public Minor LTRRow
public Minor RowBordTop
public Minor RowBordLeft
public Minor RowBordBottom
public Minor RowBordRight
public Minor RowBordHoriz
public Minor RowBordVert
public Minor CellBordBottom
public Minor CellBordTop
public Minor CellBordLeft
public Minor CellBordRight
public Minor CellShading
public Minor CellBgPatH
public Minor CellBgPatV
public Minor CellFwdDiagBgPat
public Minor CellBwdDiagBgPat
public Minor CellHatchBgPat
public Minor CellDiagHatchBgPat
public Minor CellDarkBgPatH
public Minor CellDarkBgPatV
public Minor CellFwdDarkBgPat
public Minor CellBwdDarkBgPat
public Minor CellDarkHatchBgPat
public Minor CellDarkDiagHatchBgPat
public Minor CellBgPatLineColor
public Minor CellBgPatColor
public Minor ParDef
public Minor StyleNum
public Minor Hyphenate
public Minor InTable
public Minor Keep
public Minor NoWidowControl
public Minor KeepNext
public Minor OutlineLevel
public Minor NoLineNum
public Minor PBBefore
public Minor SideBySide
public Minor QuadLeft
public Minor QuadRight
public Minor QuadJust
public Minor QuadCenter
public Minor FirstIndent
public Minor LeftIndent
public Minor RightIndent
public Minor SpaceBefore
public Minor SpaceAfter
public Minor SpaceBetween
public Minor SpaceMultiply
public Minor SubDocument
public Minor RTLPar
public Minor LTRPar
public Minor TabPos
public Minor TabLeft
public Minor TabRight
public Minor TabCenter
public Minor TabDecimal
public Minor TabBar
public Minor LeaderDot
public Minor LeaderHyphen
public Minor LeaderUnder
public Minor LeaderThick
public Minor LeaderEqual
public Minor ParLevel
public Minor ParBullet
public Minor ParSimple
public Minor ParNumCont
public Minor ParNumOnce
public Minor ParNumAcross
public Minor ParHangIndent
public Minor ParNumRestart
public Minor ParNumCardinal
public Minor ParNumDecimal
public Minor ParNumULetter
public Minor ParNumURoman
public Minor ParNumLLetter
public Minor ParNumLRoman
public Minor ParNumOrdinal
public Minor ParNumOrdinalText
public Minor ParNumBold
public Minor ParNumItalic
public Minor ParNumAllCaps
public Minor ParNumSmallCaps
public Minor ParNumUnder
public Minor ParNumDotUnder
public Minor ParNumDbUnder
public Minor ParNumNoUnder
public Minor ParNumWordUnder
public Minor ParNumStrikethru
public Minor ParNumForeColor
public Minor ParNumFont
public Minor ParNumFontSize
public Minor ParNumIndent
public Minor ParNumSpacing
public Minor ParNumInclPrev
public Minor ParNumCenter
public Minor ParNumLeft
public Minor ParNumRight
public Minor ParNumStartAt
public Minor BorderTop
public Minor BorderBottom
public Minor BorderLeft
public Minor BorderRight
public Minor BorderBetween
public Minor BorderBar
public Minor BorderBox
public Minor BorderSingle
public Minor BorderThick
public Minor BorderShadow
public Minor BorderDouble
public Minor BorderDot
public Minor BorderDash
public Minor BorderHair
public Minor BorderWidth
public Minor BorderColor
public Minor BorderSpace
public Minor Shading
public Minor BgPatH
public Minor BgPatV
public Minor FwdDiagBgPat
public Minor BwdDiagBgPat
public Minor HatchBgPat
public Minor DiagHatchBgPat
public Minor DarkBgPatH
public Minor DarkBgPatV
public Minor FwdDarkBgPat
public Minor BwdDarkBgPat
public Minor DarkHatchBgPat
public Minor DarkDiagHatchBgPat
public Minor BgPatLineColor
public Minor BgPatColor
public Minor Plain
public Minor Bold
public Minor AllCaps
public Minor Deleted
public Minor SubScript
public Minor SubScrShrink
public Minor NoSuperSub
public Minor Expand
public Minor ExpandTwips
public Minor Kerning
public Minor FontNum
public Minor FontSize
public Minor Italic
public Minor Outline
public Minor Revised
public Minor RevAuthor
public Minor RevDTTM
public Minor SmallCaps
public Minor Shadow
public Minor StrikeThru
public Minor Underline
public Minor DotUnderline
public Minor DbUnderline
public Minor NoUnderline
public Minor WordUnderline
public Minor SuperScript
public Minor SuperScrShrink
public Minor Invisible
public Minor ForeColor
public Minor BackColor
public Minor RTLChar
public Minor LTRChar
public Minor CharStyleNum
public Minor CharCharSet
public Minor Language
public Minor Gray
public Minor MacQD
public Minor PMMetafile
public Minor WinMetafile
public Minor DevIndBitmap
public Minor WinBitmap
public Minor PngBlip
public Minor PixelBits
public Minor BitmapPlanes
public Minor BitmapWid
public Minor PicWid
public Minor PicHt
public Minor PicGoalWid
public Minor PicGoalHt
public Minor PicScaleX
public Minor PicScaleY
public Minor PicScaled
public Minor PicCropTop
public Minor PicCropBottom
public Minor PicCropLeft
public Minor PicCropRight
public Minor PicMFHasBitmap
public Minor PicMFBitsPerPixel
public Minor PicBinary
public Minor BookmarkFirstCol
public Minor BookmarkLastCol
public Minor NeXTGWidth
public Minor NeXTGHeight
public Minor FieldDirty
public Minor FieldEdited
public Minor FieldLocked
public Minor FieldPrivate
public Minor FieldAlt
public Minor TOCType
public Minor TOCLevel
public Minor AbsWid
public Minor AbsHt
public Minor RPosMargH
public Minor RPosPageH
public Minor RPosColH
public Minor PosX
public Minor PosNegX
public Minor PosXCenter
public Minor PosXInside
public Minor PosXOutSide
public Minor PosXRight
public Minor PosXLeft
public Minor RPosMargV
public Minor RPosPageV
public Minor RPosParaV
public Minor PosY
public Minor PosNegY
public Minor PosYInline
public Minor PosYTop
public Minor PosYCenter
public Minor PosYBottom
public Minor NoWrap
public Minor DistFromTextAll
public Minor DistFromTextX
public Minor DistFromTextY
public Minor TextDistY
public Minor DropCapLines
public Minor DropCapType
public Minor ObjEmb
public Minor ObjLink
public Minor ObjAutoLink
public Minor ObjSubscriber
public Minor ObjPublisher
public Minor ObjICEmb
public Minor ObjLinkSelf
public Minor ObjLock
public Minor ObjUpdate
public Minor ObjHt
public Minor ObjWid
public Minor ObjSetSize
public Minor ObjAlign
public Minor ObjTransposeY
public Minor ObjCropTop
public Minor ObjCropBottom
public Minor ObjCropLeft
public Minor ObjCropRight
public Minor ObjScaleX
public Minor ObjScaleY
public Minor ObjResRTF
public Minor ObjResPict
public Minor ObjResBitmap
public Minor ObjResText
public Minor ObjResMerge
public Minor ObjBookmarkPubObj
public Minor ObjPubAutoUpdate
public Minor FNAlt
public Minor AltKey
public Minor ShiftKey
public Minor ControlKey
public Minor FunctionKey
public Minor ACBold
public Minor ACAllCaps
public Minor ACForeColor
public Minor ACSubScript
public Minor ACExpand
public Minor ACFontNum
public Minor ACFontSize
public Minor ACItalic
public Minor ACLanguage
public Minor ACOutline
public Minor ACSmallCaps
public Minor ACShadow
public Minor ACStrikeThru
public Minor ACUnderline
public Minor ACDotUnderline
public Minor ACDbUnderline
public Minor ACNoUnderline
public Minor ACWordUnderline
public Minor ACSuperScript
public Minor FontCharSet
public Minor FontPitch
public Minor FontCodePage
public Minor FTypeNil
public Minor FTypeTrueType
public Minor FileNum
public Minor FileRelPath
public Minor FileOSNum
public Minor SrcMacintosh
public Minor SrcDOS
public Minor SrcNTFS
public Minor SrcHPFS
public Minor SrcNetwork
public Minor DrawLock
public Minor DrawPageRelX
public Minor DrawColumnRelX
public Minor DrawMarginRelX
public Minor DrawPageRelY
public Minor DrawColumnRelY
public Minor DrawMarginRelY
public Minor DrawHeight
public Minor DrawBeginGroup
public Minor DrawGroupCount
public Minor DrawEndGroup
public Minor DrawArc
public Minor DrawCallout
public Minor DrawEllipse
public Minor DrawLine
public Minor DrawPolygon
public Minor DrawPolyLine
public Minor DrawRect
public Minor DrawTextBox
public Minor DrawOffsetX
public Minor DrawSizeX
public Minor DrawOffsetY
public Minor DrawSizeY
public Minor COAngle
public Minor COAccentBar
public Minor COBestFit
public Minor COBorder
public Minor COAttachAbsDist
public Minor COAttachBottom
public Minor COAttachCenter
public Minor COAttachTop
public Minor COLength
public Minor CONegXQuadrant
public Minor CONegYQuadrant
public Minor COOffset
public Minor COAttachSmart
public Minor CODoubleLine
public Minor CORightAngle
public Minor COSingleLine
public Minor COTripleLine
public Minor DrawTextBoxMargin
public Minor DrawTextBoxText
public Minor DrawRoundRect
public Minor DrawPointX
public Minor DrawPointY
public Minor DrawPolyCount
public Minor DrawArcFlipX
public Minor DrawArcFlipY
public Minor DrawLineBlue
public Minor DrawLineGreen
public Minor DrawLineRed
public Minor DrawLinePalette
public Minor DrawLineDashDot
public Minor DrawLineDashDotDot
public Minor DrawLineDash
public Minor DrawLineDot
public Minor DrawLineGray
public Minor DrawLineHollow
public Minor DrawLineSolid
public Minor DrawLineWidth
public Minor DrawHollowEndArrow
public Minor DrawEndArrowLength
public Minor DrawSolidEndArrow
public Minor DrawEndArrowWidth
public Minor DrawHollowStartArrow
public Minor DrawStartArrowLength
public Minor DrawSolidStartArrow
public Minor DrawStartArrowWidth
public Minor DrawBgFillBlue
public Minor DrawBgFillGreen
public Minor DrawBgFillRed
public Minor DrawBgFillPalette
public Minor DrawBgFillGray
public Minor DrawFgFillBlue
public Minor DrawFgFillGreen
public Minor DrawFgFillRed
public Minor DrawFgFillPalette
public Minor DrawFgFillGray
public Minor DrawFillPatIndex
public Minor DrawShadow
public Minor DrawShadowXOffset
public Minor DrawShadowYOffset
public Minor IndexNumber
public Minor IndexBold
public Minor IndexItalic
public Minor UnicodeCharBytes
public Minor UnicodeChar
public Minor UnicodeDestination
public Minor UnicodeDualDestination
public Minor UnicodeAnsiCodepage
}
internal System.Windows.Forms.RTF.Picture : object {
private Minor image_type
private Image image
private MemoryStream data
private float width
private float height
private float dpix
public Minor ImageType
public MemoryStream Data
public float Width
public float Height
public SizeF Size
public Minor get_ImageType()
public void set_ImageType(Minor value)
public MemoryStream get_Data()
public float get_Width()
public float get_Height()
public SizeF get_Size()
public void SetWidthFromTwips(int twips)
public void SetHeightFromTwips(int twips)
public bool IsValid()
public void DrawImage(Graphics dc, float x, float y, bool selected)
public Image ToImage()
}
internal System.Windows.Forms.RTF.RTF : object {
internal char EOF
internal int NoParam
internal int DefaultEncodingCodePage
private TokenClass rtf_class
private Major major
private Minor minor
private int param
private string encoded_text
private Encoding encoding
private int encoding_code_page
private StringBuilder text_buffer
private Picture picture
private int line_num
private int line_pos
private char pushed_char
private TokenClass pushed_class
private Major pushed_major
private Minor pushed_minor
private int pushed_param
private char prev_char
private bool bump_line
private Font font_list
private Charset cur_charset
private Stack charset_stack
private Style styles
private Color colors
private Font fonts
private StreamReader source
private Hashtable key_table
private KeyStruct[] Keys
private DestinationCallback destination_callbacks
private ClassCallback class_callbacks
public TokenClass TokenClass
public Major Major
public Minor Minor
public int Param
public string Text
public string EncodedText
public Picture Picture
public Color Colors
public Style Styles
public Font Fonts
public ClassCallback ClassCallback
public DestinationCallback DestinationCallback
public int LineNumber
public int LinePos
public void .ctor(Stream stream)
public TokenClass get_TokenClass()
public void set_TokenClass(TokenClass value)
public Major get_Major()
public void set_Major(Major value)
public Minor get_Minor()
public void set_Minor(Minor value)
public int get_Param()
public void set_Param(int value)
public string get_Text()
public void set_Text(string value)
public string get_EncodedText()
public Picture get_Picture()
public void set_Picture(Picture value)
public Color get_Colors()
public void set_Colors(Color value)
public Style get_Styles()
public void set_Styles(Style value)
public Font get_Fonts()
public void set_Fonts(Font value)
public ClassCallback get_ClassCallback()
public void set_ClassCallback(ClassCallback value)
public DestinationCallback get_DestinationCallback()
public void set_DestinationCallback(DestinationCallback value)
public int get_LineNumber()
public int get_LinePos()
public void DefaultFont(string name)
private char GetChar()
private char GetChar(bool skipCrLf)
public void Read()
public void RouteToken()
public void SkipGroup()
public TokenClass GetToken()
private void GetToken2()
public void SetToken(TokenClass cl, Major maj, Minor min, int par, string text)
public void UngetToken()
public TokenClass PeekToken()
public void Lookup(string token)
public bool CheckCM(TokenClass rtf_class, Major major)
public bool CheckCMM(TokenClass rtf_class, Major major, Minor minor)
public bool CheckMM(Major major, Minor minor)
private void HandleOptDest(RTF rtf)
private void ReadFontTbl(RTF rtf)
private void ReadColorTbl(RTF rtf)
private void ReadStyleSheet(RTF rtf)
private void ReadInfoGroup(RTF rtf)
private void ReadPictGroup(RTF rtf)
private void ReadObjGroup(RTF rtf)
}
internal System.Windows.Forms.RTF.RTFException : ApplicationException {
private int pos
private int line
private TokenClass token_class
private Major major
private Minor minor
private int param
private string text
private string error_message
public string Message
public void .ctor(RTF rtf, string error_message)
public string get_Message()
}
internal System.Windows.Forms.RTF.StandardCharCode : Enum {
public int value__
public StandardCharCode nothing
public StandardCharCode space
public StandardCharCode exclam
public StandardCharCode quotedbl
public StandardCharCode numbersign
public StandardCharCode dollar
public StandardCharCode percent
public StandardCharCode ampersand
public StandardCharCode quoteright
public StandardCharCode parenleft
public StandardCharCode parenright
public StandardCharCode asterisk
public StandardCharCode plus
public StandardCharCode comma
public StandardCharCode hyphen
public StandardCharCode period
public StandardCharCode slash
public StandardCharCode zero
public StandardCharCode one
public StandardCharCode two
public StandardCharCode three
public StandardCharCode four
public StandardCharCode five
public StandardCharCode six
public StandardCharCode seven
public StandardCharCode eight
public StandardCharCode nine
public StandardCharCode colon
public StandardCharCode semicolon
public StandardCharCode less
public StandardCharCode equal
public StandardCharCode greater
public StandardCharCode question
public StandardCharCode at
public StandardCharCode A
public StandardCharCode B
public StandardCharCode C
public StandardCharCode D
public StandardCharCode E
public StandardCharCode F
public StandardCharCode G
public StandardCharCode H
public StandardCharCode I
public StandardCharCode J
public StandardCharCode K
public StandardCharCode L
public StandardCharCode M
public StandardCharCode N
public StandardCharCode O
public StandardCharCode P
public StandardCharCode Q
public StandardCharCode R
public StandardCharCode S
public StandardCharCode T
public StandardCharCode U
public StandardCharCode V
public StandardCharCode W
public StandardCharCode X
public StandardCharCode Y
public StandardCharCode Z
public StandardCharCode bracketleft
public StandardCharCode backslash
public StandardCharCode bracketright
public StandardCharCode asciicircum
public StandardCharCode underscore
public StandardCharCode quoteleft
public StandardCharCode a
public StandardCharCode b
public StandardCharCode c
public StandardCharCode d
public StandardCharCode e
public StandardCharCode f
public StandardCharCode g
public StandardCharCode h
public StandardCharCode i
public StandardCharCode j
public StandardCharCode k
public StandardCharCode l
public StandardCharCode m
public StandardCharCode n
public StandardCharCode o
public StandardCharCode p
public StandardCharCode q
public StandardCharCode r
public StandardCharCode s
public StandardCharCode t
public StandardCharCode u
public StandardCharCode v
public StandardCharCode w
public StandardCharCode x
public StandardCharCode y
public StandardCharCode z
public StandardCharCode braceleft
public StandardCharCode bar
public StandardCharCode braceright
public StandardCharCode asciitilde
public StandardCharCode exclamdown
public StandardCharCode cent
public StandardCharCode sterling
public StandardCharCode fraction
public StandardCharCode yen
public StandardCharCode florin
public StandardCharCode section
public StandardCharCode currency
public StandardCharCode quotedblleft
public StandardCharCode guillemotleft
public StandardCharCode guilsinglleft
public StandardCharCode guilsinglright
public StandardCharCode fi
public StandardCharCode fl
public StandardCharCode endash
public StandardCharCode dagger
public StandardCharCode daggerdbl
public StandardCharCode periodcentered
public StandardCharCode paragraph
public StandardCharCode bullet
public StandardCharCode quotesinglbase
public StandardCharCode quotedblbase
public StandardCharCode quotedblright
public StandardCharCode guillemotright
public StandardCharCode ellipsis
public StandardCharCode perthousand
public StandardCharCode questiondown
public StandardCharCode grave
public StandardCharCode acute
public StandardCharCode circumflex
public StandardCharCode tilde
public StandardCharCode macron
public StandardCharCode breve
public StandardCharCode dotaccent
public StandardCharCode dieresis
public StandardCharCode ring
public StandardCharCode cedilla
public StandardCharCode hungarumlaut
public StandardCharCode ogonek
public StandardCharCode caron
public StandardCharCode emdash
public StandardCharCode AE
public StandardCharCode ordfeminine
public StandardCharCode Lslash
public StandardCharCode Oslash
public StandardCharCode OE
public StandardCharCode ordmasculine
public StandardCharCode ae
public StandardCharCode dotlessi
public StandardCharCode lslash
public StandardCharCode oslash
public StandardCharCode oe
public StandardCharCode germandbls
public StandardCharCode Aacute
public StandardCharCode Acircumflex
public StandardCharCode Adieresis
public StandardCharCode Agrave
public StandardCharCode Aring
public StandardCharCode Atilde
public StandardCharCode Ccedilla
public StandardCharCode Eacute
public StandardCharCode Ecircumflex
public StandardCharCode Edieresis
public StandardCharCode Egrave
public StandardCharCode Eth
public StandardCharCode Iacute
public StandardCharCode Icircumflex
public StandardCharCode Idieresis
public StandardCharCode Igrave
public StandardCharCode Ntilde
public StandardCharCode Oacute
public StandardCharCode Ocircumflex
public StandardCharCode Odieresis
public StandardCharCode Ograve
public StandardCharCode Otilde
public StandardCharCode Scaron
public StandardCharCode Thorn
public StandardCharCode Uacute
public StandardCharCode Ucircumflex
public StandardCharCode Udieresis
public StandardCharCode Ugrave
public StandardCharCode Yacute
public StandardCharCode Ydieresis
public StandardCharCode aacute
public StandardCharCode acircumflex
public StandardCharCode adieresis
public StandardCharCode agrave
public StandardCharCode aring
public StandardCharCode atilde
public StandardCharCode brokenbar
public StandardCharCode ccedilla
public StandardCharCode copyright
public StandardCharCode degree
public StandardCharCode divide
public StandardCharCode eacute
public StandardCharCode ecircumflex
public StandardCharCode edieresis
public StandardCharCode egrave
public StandardCharCode eth
public StandardCharCode iacute
public StandardCharCode icircumflex
public StandardCharCode idieresis
public StandardCharCode igrave
public StandardCharCode logicalnot
public StandardCharCode minus
public StandardCharCode multiply
public StandardCharCode ntilde
public StandardCharCode oacute
public StandardCharCode ocircumflex
public StandardCharCode odieresis
public StandardCharCode ograve
public StandardCharCode onehalf
public StandardCharCode onequarter
public StandardCharCode onesuperior
public StandardCharCode otilde
public StandardCharCode plusminus
public StandardCharCode registered
public StandardCharCode thorn
public StandardCharCode threequarters
public StandardCharCode threesuperior
public StandardCharCode trademark
public StandardCharCode twosuperior
public StandardCharCode uacute
public StandardCharCode ucircumflex
public StandardCharCode udieresis
public StandardCharCode ugrave
public StandardCharCode yacute
public StandardCharCode ydieresis
public StandardCharCode Alpha
public StandardCharCode Beta
public StandardCharCode Chi
public StandardCharCode Delta
public StandardCharCode Epsilon
public StandardCharCode Phi
public StandardCharCode Gamma
public StandardCharCode Eta
public StandardCharCode Iota
public StandardCharCode Kappa
public StandardCharCode Lambda
public StandardCharCode Mu
public StandardCharCode Nu
public StandardCharCode Omicron
public StandardCharCode Pi
public StandardCharCode Theta
public StandardCharCode Rho
public StandardCharCode Sigma
public StandardCharCode Tau
public StandardCharCode Upsilon
public StandardCharCode varUpsilon
public StandardCharCode Omega
public StandardCharCode Xi
public StandardCharCode Psi
public StandardCharCode Zeta
public StandardCharCode alpha
public StandardCharCode beta
public StandardCharCode chi
public StandardCharCode delta
public StandardCharCode epsilon
public StandardCharCode phi
public StandardCharCode varphi
public StandardCharCode gamma
public StandardCharCode eta
public StandardCharCode iota
public StandardCharCode kappa
public StandardCharCode lambda
public StandardCharCode mu
public StandardCharCode nu
public StandardCharCode omicron
public StandardCharCode pi
public StandardCharCode varpi
public StandardCharCode theta
public StandardCharCode vartheta
public StandardCharCode rho
public StandardCharCode sigma
public StandardCharCode varsigma
public StandardCharCode tau
public StandardCharCode upsilon
public StandardCharCode omega
public StandardCharCode xi
public StandardCharCode psi
public StandardCharCode zeta
public StandardCharCode nobrkspace
public StandardCharCode nobrkhyphen
public StandardCharCode lessequal
public StandardCharCode greaterequal
public StandardCharCode infinity
public StandardCharCode integral
public StandardCharCode notequal
public StandardCharCode radical
public StandardCharCode radicalex
public StandardCharCode approxequal
public StandardCharCode apple
public StandardCharCode partialdiff
public StandardCharCode opthyphen
public StandardCharCode formula
public StandardCharCode lozenge
public StandardCharCode universal
public StandardCharCode existential
public StandardCharCode suchthat
public StandardCharCode congruent
public StandardCharCode therefore
public StandardCharCode perpendicular
public StandardCharCode minute
public StandardCharCode club
public StandardCharCode diamond
public StandardCharCode heart
public StandardCharCode spade
public StandardCharCode arrowboth
public StandardCharCode arrowleft
public StandardCharCode arrowup
public StandardCharCode arrowright
public StandardCharCode arrowdown
public StandardCharCode second
public StandardCharCode proportional
public StandardCharCode equivalence
public StandardCharCode arrowvertex
public StandardCharCode arrowhorizex
public StandardCharCode carriagereturn
public StandardCharCode aleph
public StandardCharCode Ifraktur
public StandardCharCode Rfraktur
public StandardCharCode weierstrass
public StandardCharCode circlemultiply
public StandardCharCode circleplus
public StandardCharCode emptyset
public StandardCharCode intersection
public StandardCharCode union
public StandardCharCode propersuperset
public StandardCharCode reflexsuperset
public StandardCharCode notsubset
public StandardCharCode propersubset
public StandardCharCode reflexsubset
public StandardCharCode element
public StandardCharCode notelement
public StandardCharCode angle
public StandardCharCode gradient
public StandardCharCode product
public StandardCharCode logicaland
public StandardCharCode logicalor
public StandardCharCode arrowdblboth
public StandardCharCode arrowdblleft
public StandardCharCode arrowdblup
public StandardCharCode arrowdblright
public StandardCharCode arrowdbldown
public StandardCharCode angleleft
public StandardCharCode registersans
public StandardCharCode copyrightsans
public StandardCharCode trademarksans
public StandardCharCode angleright
public StandardCharCode mathplus
public StandardCharCode mathminus
public StandardCharCode mathasterisk
public StandardCharCode mathnumbersign
public StandardCharCode dotmath
public StandardCharCode mathequal
public StandardCharCode mathtilde
public StandardCharCode MaxChar
}
internal System.Windows.Forms.RTF.StandardCharName : object {
public String[] Names
public string Name(int index)
public int ID(string name)
}
internal System.Windows.Forms.RTF.Style : object {
public int NoStyleNum
public int NormalStyleNum
private string name
private StyleType type
private bool additive
private int num
private int based_on
private int next_par
private bool expanding
private StyleElement elements
private Style next
public string Name
public StyleType Type
public bool Additive
public int BasedOn
public StyleElement Elements
public bool Expanding
public int NextPar
public int Num
public void .ctor(RTF rtf)
public string get_Name()
public void set_Name(string value)
public StyleType get_Type()
public void set_Type(StyleType value)
public bool get_Additive()
public void set_Additive(bool value)
public int get_BasedOn()
public void set_BasedOn(int value)
public StyleElement get_Elements()
public void set_Elements(StyleElement value)
public bool get_Expanding()
public void set_Expanding(bool value)
public int get_NextPar()
public void set_NextPar(int value)
public int get_Num()
public void set_Num(int value)
public void Expand(RTF rtf)
public Style GetStyle(RTF rtf, int style_number)
public Style GetStyle(Style start, int style_number)
}
internal System.Windows.Forms.RTF.StyleElement : object {
private TokenClass token_class
private Major major
private Minor minor
private int param
private string text
private StyleElement next
public TokenClass TokenClass
public Major Major
public Minor Minor
public int Param
public string Text
public void .ctor(Style s, TokenClass token_class, Major major, Minor minor, int param, string text)
public TokenClass get_TokenClass()
public void set_TokenClass(TokenClass value)
public Major get_Major()
public void set_Major(Major value)
public Minor get_Minor()
public void set_Minor(Minor value)
public int get_Param()
public void set_Param(int value)
public string get_Text()
public void set_Text(string value)
}
internal System.Windows.Forms.RTF.StyleType : Enum {
public int value__
public StyleType Paragraph
public StyleType Character
public StyleType Section
}
internal System.Windows.Forms.RTF.TextMap : object {
private String[] table
internal string Item
public String[] Table
internal string get_Item(StandardCharCode c)
internal void set_Item(StandardCharCode c, string value)
public String[] get_Table()
public void SetupStandardTable(String[] table)
}
internal System.Windows.Forms.RTF.TokenClass : Enum {
public int value__
public TokenClass None
public TokenClass Unknown
public TokenClass Group
public TokenClass Text
public TokenClass Control
public TokenClass EOF
public TokenClass MaxClass
}
public System.Windows.Forms.SaveFileDialog : FileDialog {
public bool CreatePrompt
public bool OverwritePrompt
internal string DialogTitle
public void set_CreatePrompt(bool value)
public bool get_CreatePrompt()
public void set_OverwritePrompt(bool value)
public bool get_OverwritePrompt()
public Stream OpenFile()
public void Reset()
internal string get_DialogTitle()
}
internal System.Windows.Forms.ScanTableIndex : Enum {
public int value__
public ScanTableIndex Qwerty
public ScanTableIndex Dvorak
public ScanTableIndex AbntQwerty
public ScanTableIndex QwertyJp106
public ScanTableIndex Vnc
}
public System.Windows.Forms.Screen : object {
private Screen[] all_screens
private bool primary
private Rectangle bounds
private Rectangle workarea
private string name
private int bits_per_pixel
public Screen[] AllScreens
public Screen PrimaryScreen
public int BitsPerPixel
public Rectangle Bounds
public string DeviceName
public bool Primary
public Rectangle WorkingArea
internal void .ctor(bool primary, string name, Rectangle bounds, Rectangle workarea)
public Screen[] get_AllScreens()
public Screen get_PrimaryScreen()
public int get_BitsPerPixel()
public Rectangle get_Bounds()
public string get_DeviceName()
public bool get_Primary()
public Rectangle get_WorkingArea()
public Screen FromControl(Control control)
public Screen FromHandle(IntPtr hwnd)
public Screen FromPoint(Point point)
public Screen FromRectangle(Rectangle rect)
public Rectangle GetBounds(Control ctl)
public Rectangle GetBounds(Point pt)
public Rectangle GetBounds(Rectangle rect)
public Rectangle GetWorkingArea(Control ctl)
public Rectangle GetWorkingArea(Point pt)
public Rectangle GetWorkingArea(Rectangle rect)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public System.Windows.Forms.ScreenOrientation : Enum {
public int value__
public ScreenOrientation Angle0
public ScreenOrientation Angle90
public ScreenOrientation Angle180
public ScreenOrientation Angle270
}
public System.Windows.Forms.ScrollableControl : Control {
private bool force_hscroll_visible
private bool force_vscroll_visible
private bool auto_scroll
private Size auto_scroll_margin
private Size auto_scroll_min_size
private Point scroll_position
private DockPaddingEdges dock_padding
private SizeGrip sizegrip
internal ImplicitHScrollBar hscrollbar
internal ImplicitVScrollBar vscrollbar
internal Size canvas_size
private Rectangle display_rectangle
private Control old_parent
private HScrollProperties horizontalScroll
private VScrollProperties verticalScroll
private bool autosized_child
protected int ScrollStateAutoScrolling
protected int ScrollStateFullDrag
protected int ScrollStateHScrollVisible
protected int ScrollStateUserHasScrolled
protected int ScrollStateVScrollVisible
private object OnScrollEvent
public bool AutoScroll
public Size AutoScrollMargin
public Size AutoScrollMinSize
public Point AutoScrollPosition
public Rectangle DisplayRectangle
public DockPaddingEdges DockPadding
public HScrollProperties HorizontalScroll
public VScrollProperties VerticalScroll
protected CreateParams CreateParams
protected bool HScroll
protected bool VScroll
private void VisibleChangedHandler(object sender, EventArgs e)
private void LocationChangedHandler(object sender, EventArgs e)
private void ParentChangedHandler(object sender, EventArgs e)
private void Parent_PaddingChanged(object sender, EventArgs e)
private void Parent_SizeChanged(object sender, EventArgs e)
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
public Size get_AutoScrollMargin()
public void set_AutoScrollMargin(Size value)
internal bool ShouldSerializeAutoScrollMargin()
public Size get_AutoScrollMinSize()
public void set_AutoScrollMinSize(Size value)
internal bool ShouldSerializeAutoScrollMinSize()
public Point get_AutoScrollPosition()
public void set_AutoScrollPosition(Point value)
public Rectangle get_DisplayRectangle()
public DockPaddingEdges get_DockPadding()
public HScrollProperties get_HorizontalScroll()
public VScrollProperties get_VerticalScroll()
protected CreateParams get_CreateParams()
protected bool get_HScroll()
protected void set_HScroll(bool value)
protected bool get_VScroll()
protected void set_VScroll(bool value)
public void ScrollControlIntoView(Control activeControl)
public void SetAutoScrollMargin(int x, int y)
protected void AdjustFormScrollbars(bool displayScrollbars)
protected bool GetScrollState(int bit)
protected void OnLayout(LayoutEventArgs levent)
protected void OnMouseWheel(MouseEventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected void ScaleCore(float dx, float dy)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
protected Point ScrollToControl(Control activeControl)
protected void SetDisplayRectLocation(int x, int y)
protected void SetScrollState(int bit, bool value)
protected void WndProc(Message& m)
internal IntPtr AfterTopMostControl()
internal void CalculateCanvasSize(bool canOverride)
internal void CreateDockPadding()
private void Recalculate(object sender, EventArgs e)
private void Recalculate(bool doLayout)
internal void UpdateSizeGripVisible()
private void HandleScrollBar(object sender, EventArgs e)
private void HandleScrollEvent(object sender, ScrollEventArgs args)
private void AddScrollbars(object o, EventArgs e)
private void CreateScrollbars()
private void ScrollWindow(int XOffset, int YOffset)
protected void OnScroll(ScrollEventArgs se)
protected void OnPaddingChanged(EventArgs e)
protected void OnPaintBackground(PaintEventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
public void add_Scroll(ScrollEventHandler value)
public void remove_Scroll(ScrollEventHandler value)
}
public System.Windows.Forms.ScrollBar : Control {
private int position
private int minimum
private int maximum
private int large_change
private int small_change
internal int scrollbutton_height
internal int scrollbutton_width
private Rectangle first_arrow_area
private Rectangle second_arrow_area
private Rectangle thumb_pos
private Rectangle thumb_area
internal ButtonState firstbutton_state
internal ButtonState secondbutton_state
private bool firstbutton_pressed
private bool secondbutton_pressed
private bool thumb_pressed
private float pixel_per_pos
private Timer timer
private TimerType timer_type
private int thumb_size
private int thumb_min_size
private int thumb_notshown_size
internal bool use_manual_thumb_size
internal int manual_thumb_size
internal bool vert
internal bool implicit_control
private int lastclick_pos
private int thumbclick_offset
private Rectangle dirty
internal ThumbMoving thumb_moving
private bool first_button_entered
private bool second_button_entered
private bool thumb_entered
private object ScrollEvent
private object ValueChangedEvent
private object UIAScrollEvent
private object UIAValueChangeEvent
internal Rectangle FirstArrowArea
internal Rectangle SecondArrowArea
private int MaximumAllowed
internal Rectangle ThumbPos
internal bool FirstButtonEntered
internal bool SecondButtonEntered
internal bool ThumbEntered
internal bool ThumbPressed
public bool AutoSize
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
protected CreateParams CreateParams
protected Padding DefaultMargin
protected ImeMode DefaultImeMode
public Font Font
public Color ForeColor
public ImeMode ImeMode
public int LargeChange
public int Maximum
public int Minimum
public int SmallChange
public bool TabStop
public string Text
public int Value
internal Rectangle UIAThumbArea
internal Rectangle UIAThumbPosition
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_MouseDown(MouseEventHandler value)
public void remove_MouseDown(MouseEventHandler value)
public void add_MouseMove(MouseEventHandler value)
public void remove_MouseMove(MouseEventHandler value)
public void add_MouseUp(MouseEventHandler value)
public void remove_MouseUp(MouseEventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_Scroll(ScrollEventHandler value)
public void remove_Scroll(ScrollEventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_ValueChanged(EventHandler value)
public void remove_ValueChanged(EventHandler value)
internal Rectangle get_FirstArrowArea()
internal void set_FirstArrowArea(Rectangle value)
internal Rectangle get_SecondArrowArea()
internal void set_SecondArrowArea(Rectangle value)
private int get_MaximumAllowed()
internal Rectangle get_ThumbPos()
internal void set_ThumbPos(Rectangle value)
internal bool get_FirstButtonEntered()
private void set_FirstButtonEntered(bool value)
internal bool get_SecondButtonEntered()
private void set_SecondButtonEntered(bool value)
internal bool get_ThumbEntered()
private void set_ThumbEntered(bool value)
internal bool get_ThumbPressed()
private void set_ThumbPressed(bool value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
protected CreateParams get_CreateParams()
protected Padding get_DefaultMargin()
protected ImeMode get_DefaultImeMode()
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public int get_LargeChange()
public void set_LargeChange(int value)
public int get_Maximum()
public void set_Maximum(int value)
internal void SetValues(int maximum, int large_change)
internal void SetValues(int minimum, int maximum, int small_change, int large_change)
public int get_Minimum()
public void set_Minimum(int value)
public int get_SmallChange()
public void set_SmallChange(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
public int get_Value()
public void set_Value(int value)
protected Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified)
protected void OnEnabledChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnScroll(ScrollEventArgs se)
private void SendWMScroll(ScrollBarCommands cmd)
protected void OnValueChanged(EventArgs e)
public string ToString()
protected void UpdateScrollInfo()
protected void WndProc(Message& m)
private void CalcButtonSizes()
private void CalcThumbArea()
private void LargeIncrement()
private void LargeDecrement()
private void OnResizeSB(object o, EventArgs e)
internal void OnPaintInternal(PaintEventArgs pevent)
private void OnTimer(object source, EventArgs e)
private void MoveThumb(Rectangle original_thumbpos, int value)
private void OnMouseMoveSB(object sender, MouseEventArgs e)
private void OnMouseDownSB(object sender, MouseEventArgs e)
private void OnMouseUpSB(object sender, MouseEventArgs e)
private void OnKeyDownSB(object o, KeyEventArgs key)
internal void SafeValueSet(int value)
private void SetEndPosition()
private void SetHomePosition()
private void SmallIncrement()
private void SmallDecrement()
private void SetHoldButtonClickTimer()
private void SetRepeatButtonTimer()
private void SetHoldThumbAreaTimer()
private void SetRepeatThumbAreaTimer()
private void UpdatePos(int newPos, bool update_thumbpos)
private void UpdateThumbPos(int pixel, bool dirty, bool update_value)
private void SetValue(int value)
private void ClearDirty()
private void Dirty(Rectangle r)
private void DirtyThumbArea()
private void InvalidateDirty()
private void OnMouseEnter(object sender, EventArgs e)
private void OnMouseLeave(object sender, EventArgs e)
protected void OnMouseWheel(MouseEventArgs e)
internal void add_UIAScroll(ScrollEventHandler value)
internal void remove_UIAScroll(ScrollEventHandler value)
internal void add_UIAValueChanged(ScrollEventHandler value)
internal void remove_UIAValueChanged(ScrollEventHandler value)
internal void OnUIAScroll(ScrollEventArgs args)
internal void OnUIAValueChanged(ScrollEventArgs args)
internal void UIALargeIncrement()
internal void UIALargeDecrement()
internal void UIASmallIncrement()
internal void UIASmallDecrement()
internal Rectangle get_UIAThumbArea()
internal Rectangle get_UIAThumbPosition()
}
internal System.Windows.Forms.ScrollBarCommands : Enum {
public int value__
public ScrollBarCommands SB_LINEUP
public ScrollBarCommands SB_LINELEFT
public ScrollBarCommands SB_LINEDOWN
public ScrollBarCommands SB_LINERIGHT
public ScrollBarCommands SB_PAGEUP
public ScrollBarCommands SB_PAGELEFT
public ScrollBarCommands SB_PAGEDOWN
public ScrollBarCommands SB_PAGERIGHT
public ScrollBarCommands SB_THUMBPOSITION
public ScrollBarCommands SB_THUMBTRACK
public ScrollBarCommands SB_TOP
public ScrollBarCommands SB_LEFT
public ScrollBarCommands SB_BOTTOM
public ScrollBarCommands SB_RIGHT
public ScrollBarCommands SB_ENDSCROLL
}
public System.Windows.Forms.ScrollBarRenderer : object {
public bool IsSupported
public void DrawArrowButton(Graphics g, Rectangle bounds, ScrollBarArrowButtonState state)
public void DrawHorizontalThumb(Graphics g, Rectangle bounds, ScrollBarState state)
public void DrawHorizontalThumbGrip(Graphics g, Rectangle bounds, ScrollBarState state)
public void DrawLeftHorizontalTrack(Graphics g, Rectangle bounds, ScrollBarState state)
public void DrawLowerVerticalTrack(Graphics g, Rectangle bounds, ScrollBarState state)
public void DrawRightHorizontalTrack(Graphics g, Rectangle bounds, ScrollBarState state)
public void DrawSizeBox(Graphics g, Rectangle bounds, ScrollBarSizeBoxState state)
public void DrawUpperVerticalTrack(Graphics g, Rectangle bounds, ScrollBarState state)
public void DrawVerticalThumb(Graphics g, Rectangle bounds, ScrollBarState state)
public void DrawVerticalThumbGrip(Graphics g, Rectangle bounds, ScrollBarState state)
public Size GetSizeBoxSize(Graphics g, ScrollBarState state)
public Size GetThumbGripSize(Graphics g, ScrollBarState state)
public bool get_IsSupported()
}
public System.Windows.Forms.ScrollBars : Enum {
public int value__
public ScrollBars None
public ScrollBars Horizontal
public ScrollBars Vertical
public ScrollBars Both
}
public System.Windows.Forms.ScrollButton : Enum {
public int value__
public ScrollButton Min
public ScrollButton Up
public ScrollButton Down
public ScrollButton Left
public ScrollButton Right
public ScrollButton Max
}
public System.Windows.Forms.ScrollEventArgs : EventArgs {
private ScrollEventType type
private int new_value
private int old_value
private ScrollOrientation scroll_orientation
public int NewValue
public int OldValue
public ScrollOrientation ScrollOrientation
public ScrollEventType Type
public void .ctor(ScrollEventType type, int newValue)
public void .ctor(ScrollEventType type, int oldValue, int newValue)
public void .ctor(ScrollEventType type, int newValue, ScrollOrientation scroll)
public void .ctor(ScrollEventType type, int oldValue, int newValue, ScrollOrientation scroll)
public int get_NewValue()
public void set_NewValue(int value)
public int get_OldValue()
public ScrollOrientation get_ScrollOrientation()
public ScrollEventType get_Type()
}
public System.Windows.Forms.ScrollEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ScrollEventArgs e)
public IAsyncResult BeginInvoke(object sender, ScrollEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ScrollEventType : Enum {
public int value__
public ScrollEventType SmallDecrement
public ScrollEventType SmallIncrement
public ScrollEventType LargeDecrement
public ScrollEventType LargeIncrement
public ScrollEventType ThumbPosition
public ScrollEventType ThumbTrack
public ScrollEventType First
public ScrollEventType Last
public ScrollEventType EndScroll
}
public System.Windows.Forms.ScrollOrientation : Enum {
public int value__
public ScrollOrientation HorizontalScroll
public ScrollOrientation VerticalScroll
}
public System.Windows.Forms.ScrollProperties : object {
private ScrollableControl parentControl
internal ScrollBar scroll_bar
public bool Enabled
public int LargeChange
public int Maximum
public int Minimum
public int SmallChange
public int Value
public bool Visible
protected ScrollableControl ParentControl
protected void .ctor(ScrollableControl container)
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_LargeChange()
public void set_LargeChange(int value)
public int get_Maximum()
public void set_Maximum(int value)
public int get_Minimum()
public void set_Minimum(int value)
public int get_SmallChange()
public void set_SmallChange(int value)
public int get_Value()
public void set_Value(int value)
public bool get_Visible()
public void set_Visible(bool value)
protected ScrollableControl get_ParentControl()
}
public System.Windows.Forms.SearchDirectionHint : Enum {
public int value__
public SearchDirectionHint Left
public SearchDirectionHint Up
public SearchDirectionHint Right
public SearchDirectionHint Down
}
public System.Windows.Forms.SearchForVirtualItemEventArgs : EventArgs {
private SearchDirectionHint direction
private bool include_sub_items_in_search
private int index
private bool is_prefix_search
private bool is_text_search
private int start_index
private Point starting_point
private string text
public SearchDirectionHint Direction
public bool IncludeSubItemsInSearch
public int Index
public bool IsPrefixSearch
public bool IsTextSearch
public int StartIndex
public Point StartingPoint
public string Text
public void .ctor(bool isTextSearch, bool isPrefixSearch, bool includeSubItemsInSearch, string text, Point startingPoint, SearchDirectionHint direction, int startIndex)
public SearchDirectionHint get_Direction()
public bool get_IncludeSubItemsInSearch()
public int get_Index()
public void set_Index(int value)
public bool get_IsPrefixSearch()
public bool get_IsTextSearch()
public int get_StartIndex()
public Point get_StartingPoint()
public string get_Text()
}
public System.Windows.Forms.SearchForVirtualItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SearchForVirtualItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, SearchForVirtualItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.SecurityIDType : Enum {
public int value__
public SecurityIDType User
public SecurityIDType Group
public SecurityIDType Domain
public SecurityIDType Alias
public SecurityIDType WellKnownGroup
public SecurityIDType DeletedAccount
public SecurityIDType Invalid
public SecurityIDType Unknown
public SecurityIDType Computer
}
public System.Windows.Forms.SelectedGridItemChangedEventArgs : EventArgs {
private GridItem new_selection
private GridItem old_selection
public GridItem NewSelection
public GridItem OldSelection
public void .ctor(GridItem oldSel, GridItem newSel)
public GridItem get_NewSelection()
public GridItem get_OldSelection()
}
public System.Windows.Forms.SelectedGridItemChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SelectedGridItemChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, SelectedGridItemChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.SelectionMode : Enum {
public int value__
public SelectionMode None
public SelectionMode One
public SelectionMode MultiSimple
public SelectionMode MultiExtended
}
public System.Windows.Forms.SelectionRange : object {
private DateTime end
private DateTime start
public DateTime End
public DateTime Start
public void .ctor(SelectionRange range)
public void .ctor(DateTime lower, DateTime upper)
public void set_End(DateTime value)
public DateTime get_End()
public void set_Start(DateTime value)
public DateTime get_Start()
public string ToString()
}
public System.Windows.Forms.SelectionRangeConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
public bool GetCreateInstanceSupported(ITypeDescriptorContext context)
public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
internal System.Windows.Forms.SendEventValues : Enum {
public int value__
public SendEventValues PointerWindow
public SendEventValues InputFocus
}
public System.Windows.Forms.SendKeys : object {
private Queue keys
private Hashtable keywords
private object lockobj
private void AddVKey(int vk, bool down)
private void AddVKey(int vk, int repeat_count)
private void AddKey(char key, int repeat_count)
private void Parse(string key_string)
private void SendInput()
public void Flush()
public void Send(string keys)
public void SendWait(string keys)
}
internal System.Windows.Forms.SetWindowValuemask : Enum {
public int value__
public SetWindowValuemask Nothing
public SetWindowValuemask BackPixmap
public SetWindowValuemask BackPixel
public SetWindowValuemask BorderPixmap
public SetWindowValuemask BorderPixel
public SetWindowValuemask BitGravity
public SetWindowValuemask WinGravity
public SetWindowValuemask BackingStore
public SetWindowValuemask BackingPlanes
public SetWindowValuemask BackingPixel
public SetWindowValuemask OverrideRedirect
public SetWindowValuemask SaveUnder
public SetWindowValuemask EventMask
public SetWindowValuemask DontPropagate
public SetWindowValuemask ColorMap
public SetWindowValuemask Cursor
}
public System.Windows.Forms.Shortcut : Enum {
public int value__
public Shortcut Alt0
public Shortcut Alt1
public Shortcut Alt2
public Shortcut Alt3
public Shortcut Alt4
public Shortcut Alt5
public Shortcut Alt6
public Shortcut Alt7
public Shortcut Alt8
public Shortcut Alt9
public Shortcut AltBksp
public Shortcut AltDownArrow
public Shortcut AltF1
public Shortcut AltF10
public Shortcut AltF11
public Shortcut AltF12
public Shortcut AltF2
public Shortcut AltF3
public Shortcut AltF4
public Shortcut AltF5
public Shortcut AltF6
public Shortcut AltF7
public Shortcut AltF8
public Shortcut AltF9
public Shortcut AltLeftArrow
public Shortcut AltRightArrow
public Shortcut AltUpArrow
public Shortcut Ctrl0
public Shortcut Ctrl1
public Shortcut Ctrl2
public Shortcut Ctrl3
public Shortcut Ctrl4
public Shortcut Ctrl5
public Shortcut Ctrl6
public Shortcut Ctrl7
public Shortcut Ctrl8
public Shortcut Ctrl9
public Shortcut CtrlA
public Shortcut CtrlB
public Shortcut CtrlC
public Shortcut CtrlD
public Shortcut CtrlDel
public Shortcut CtrlE
public Shortcut CtrlF
public Shortcut CtrlF1
public Shortcut CtrlF10
public Shortcut CtrlF11
public Shortcut CtrlF12
public Shortcut CtrlF2
public Shortcut CtrlF3
public Shortcut CtrlF4
public Shortcut CtrlF5
public Shortcut CtrlF6
public Shortcut CtrlF7
public Shortcut CtrlF8
public Shortcut CtrlF9
public Shortcut CtrlG
public Shortcut CtrlH
public Shortcut CtrlI
public Shortcut CtrlIns
public Shortcut CtrlJ
public Shortcut CtrlK
public Shortcut CtrlL
public Shortcut CtrlM
public Shortcut CtrlN
public Shortcut CtrlO
public Shortcut CtrlP
public Shortcut CtrlQ
public Shortcut CtrlR
public Shortcut CtrlS
public Shortcut CtrlShift0
public Shortcut CtrlShift1
public Shortcut CtrlShift2
public Shortcut CtrlShift3
public Shortcut CtrlShift4
public Shortcut CtrlShift5
public Shortcut CtrlShift6
public Shortcut CtrlShift7
public Shortcut CtrlShift8
public Shortcut CtrlShift9
public Shortcut CtrlShiftA
public Shortcut CtrlShiftB
public Shortcut CtrlShiftC
public Shortcut CtrlShiftD
public Shortcut CtrlShiftE
public Shortcut CtrlShiftF
public Shortcut CtrlShiftF1
public Shortcut CtrlShiftF10
public Shortcut CtrlShiftF11
public Shortcut CtrlShiftF12
public Shortcut CtrlShiftF2
public Shortcut CtrlShiftF3
public Shortcut CtrlShiftF4
public Shortcut CtrlShiftF5
public Shortcut CtrlShiftF6
public Shortcut CtrlShiftF7
public Shortcut CtrlShiftF8
public Shortcut CtrlShiftF9
public Shortcut CtrlShiftG
public Shortcut CtrlShiftH
public Shortcut CtrlShiftI
public Shortcut CtrlShiftJ
public Shortcut CtrlShiftK
public Shortcut CtrlShiftL
public Shortcut CtrlShiftM
public Shortcut CtrlShiftN
public Shortcut CtrlShiftO
public Shortcut CtrlShiftP
public Shortcut CtrlShiftQ
public Shortcut CtrlShiftR
public Shortcut CtrlShiftS
public Shortcut CtrlShiftT
public Shortcut CtrlShiftU
public Shortcut CtrlShiftV
public Shortcut CtrlShiftW
public Shortcut CtrlShiftX
public Shortcut CtrlShiftY
public Shortcut CtrlShiftZ
public Shortcut CtrlT
public Shortcut CtrlU
public Shortcut CtrlV
public Shortcut CtrlW
public Shortcut CtrlX
public Shortcut CtrlY
public Shortcut CtrlZ
public Shortcut Del
public Shortcut F1
public Shortcut F10
public Shortcut F11
public Shortcut F12
public Shortcut F2
public Shortcut F3
public Shortcut F4
public Shortcut F5
public Shortcut F6
public Shortcut F7
public Shortcut F8
public Shortcut F9
public Shortcut Ins
public Shortcut None
public Shortcut ShiftDel
public Shortcut ShiftF1
public Shortcut ShiftF10
public Shortcut ShiftF11
public Shortcut ShiftF12
public Shortcut ShiftF2
public Shortcut ShiftF3
public Shortcut ShiftF4
public Shortcut ShiftF5
public Shortcut ShiftF6
public Shortcut ShiftF7
public Shortcut ShiftF8
public Shortcut ShiftF9
public Shortcut ShiftIns
}
internal System.Windows.Forms.SizeGrip : Control {
private Point capture_point
private Control captured_control
private int window_w
private int window_h
private bool hide_pending
private bool captured
private bool is_virtual
private bool enabled
private bool fill_background
private Rectangle last_painted_area
public bool FillBackground
public bool Virtual
public Control CapturedControl
public void .ctor(Control CapturedControl)
public bool get_FillBackground()
public void set_FillBackground(bool value)
public bool get_Virtual()
public void set_Virtual(bool value)
public Control get_CapturedControl()
public void set_CapturedControl(Control value)
internal Size GetDefaultSize()
internal Rectangle GetDefaultRectangle(Control Parent)
private void HandleResize(object sender, EventArgs e)
private void HandleEnabledChanged(object sender, EventArgs e)
internal void HandlePaint(object sender, PaintEventArgs e)
private void HandleMouseCaptureChanged(object sender, EventArgs e)
internal void HandleMouseDown(object sender, MouseEventArgs e)
internal void HandleMouseMove(object sender, MouseEventArgs e)
internal void HandleMouseUp(object sender, MouseEventArgs e)
protected void SetVisibleCore(bool value)
protected void OnPaint(PaintEventArgs pe)
protected void OnMouseCaptureChanged(EventArgs e)
protected void OnEnabledChanged(EventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseMove(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs e)
}
public System.Windows.Forms.SizeGripStyle : Enum {
public int value__
public SizeGripStyle Auto
public SizeGripStyle Show
public SizeGripStyle Hide
}
public System.Windows.Forms.SizeType : Enum {
public int value__
public SizeType AutoSize
public SizeType Absolute
public SizeType Percent
}
public System.Windows.Forms.SortOrder : Enum {
public int value__
public SortOrder None
public SortOrder Ascending
public SortOrder Descending
}
internal System.Windows.Forms.SpecialFolderEnumConverter : TypeConverter {
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Windows.Forms.SplitContainer : ContainerControl {
private FixedPanel fixed_panel
private Orientation orientation
private int splitter_increment
private Rectangle splitter_rectangle
private Rectangle splitter_rectangle_moving
private Rectangle splitter_rectangle_before_move
private bool splitter_fixed
private bool splitter_dragging
private int splitter_prev_move
private Cursor restore_cursor
private double fixed_none_ratio
private SplitterPanel panel1
private bool panel1_collapsed
private int panel1_min_size
private SplitterPanel panel2
private bool panel2_collapsed
private int panel2_min_size
private object SplitterMovedEvent
private object SplitterMovingEvent
private object UIACanResizeChangedEvent
public bool AutoScroll
public Size AutoScrollMargin
public Size AutoScrollMinSize
public Point AutoScrollOffset
public Point AutoScrollPosition
public bool AutoSize
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BindingContext BindingContext
public BorderStyle BorderStyle
public ControlCollection Controls
public DockStyle Dock
public FixedPanel FixedPanel
public bool IsSplitterFixed
public Orientation Orientation
public Padding Padding
public SplitterPanel Panel1
public bool Panel1Collapsed
public int Panel1MinSize
public SplitterPanel Panel2
public bool Panel2Collapsed
public int Panel2MinSize
public int SplitterDistance
public int SplitterIncrement
public Rectangle SplitterRectangle
public int SplitterWidth
public bool TabStop
public string Text
protected Size DefaultSize
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_ControlAdded(ControlEventHandler value)
public void remove_ControlAdded(ControlEventHandler value)
public void add_ControlRemoved(ControlEventHandler value)
public void remove_ControlRemoved(ControlEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_SplitterMoved(SplitterEventHandler value)
public void remove_SplitterMoved(SplitterEventHandler value)
public void add_SplitterMoving(SplitterCancelEventHandler value)
public void remove_SplitterMoving(SplitterCancelEventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
internal void add_UIACanResizeChanged(EventHandler value)
internal void remove_UIACanResizeChanged(EventHandler value)
internal void OnUIACanResizeChanged(EventArgs e)
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
public Size get_AutoScrollMargin()
public void set_AutoScrollMargin(Size value)
public Size get_AutoScrollMinSize()
public void set_AutoScrollMinSize(Size value)
public Point get_AutoScrollOffset()
public void set_AutoScrollOffset(Point value)
public Point get_AutoScrollPosition()
public void set_AutoScrollPosition(Point value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BindingContext get_BindingContext()
public void set_BindingContext(BindingContext value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public ControlCollection get_Controls()
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public FixedPanel get_FixedPanel()
public void set_FixedPanel(FixedPanel value)
public bool get_IsSplitterFixed()
public void set_IsSplitterFixed(bool value)
public Orientation get_Orientation()
public void set_Orientation(Orientation value)
public Padding get_Padding()
public void set_Padding(Padding value)
public SplitterPanel get_Panel1()
public bool get_Panel1Collapsed()
public void set_Panel1Collapsed(bool value)
public int get_Panel1MinSize()
public void set_Panel1MinSize(int value)
public SplitterPanel get_Panel2()
public bool get_Panel2Collapsed()
public void set_Panel2Collapsed(bool value)
public int get_Panel2MinSize()
public void set_Panel2MinSize(int value)
public int get_SplitterDistance()
public void set_SplitterDistance(int value)
public int get_SplitterIncrement()
public void set_SplitterIncrement(int value)
public Rectangle get_SplitterRectangle()
public int get_SplitterWidth()
public void set_SplitterWidth(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
protected Size get_DefaultSize()
public void BeginInit()
public void EndInit()
public void OnSplitterMoved(SplitterEventArgs e)
public void OnSplitterMoving(SplitterCancelEventArgs e)
protected ControlCollection CreateControlsInstance()
protected void OnGotFocus(EventArgs e)
protected void OnKeyDown(KeyEventArgs e)
protected void OnKeyUp(KeyEventArgs e)
protected void OnLayout(LayoutEventArgs e)
protected void OnLostFocus(EventArgs e)
protected void OnMouseCaptureChanged(EventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseMove(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
protected bool ProcessDialogKey(Keys keyData)
protected bool ProcessTabKey(bool forward)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
protected void Select(bool directed, bool forward)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void WndProc(Message& msg)
private bool SplitterHitTest(Point location)
private void SplitterBeginMove(Point location)
private void SplitterMove(Point location)
private void SplitterEndMove(Point location, bool cancel)
private void SplitterSetCursor(Orientation orientation)
private void SplitterRestoreCursor()
private void UpdateSplitter()
private void UpdateLayout()
}
public System.Windows.Forms.Splitter : Control {
private Cursor splitter_ns
private Cursor splitter_we
private BorderStyle border_style
private int min_extra
private int min_size
private int max_size
private int splitter_size
private bool horizontal
private Control affected
private int split_requested
private int splitter_prev_move
private Rectangle splitter_rectangle_moving
private int moving_offset
private object SplitterMovedEvent
private object SplitterMovingEvent
public bool AllowDrop
public AnchorStyles Anchor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BorderStyle BorderStyle
public DockStyle Dock
public Font Font
public Color ForeColor
public ImeMode ImeMode
public int MinExtra
public int MinSize
internal int MaxSize
public int SplitPosition
public bool TabStop
public string Text
protected CreateParams CreateParams
protected Cursor DefaultCursor
protected ImeMode DefaultImeMode
protected Size DefaultSize
private Control AffectedControl
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public AnchorStyles get_Anchor()
public void set_Anchor(AnchorStyles value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public int get_MinExtra()
public void set_MinExtra(int value)
public int get_MinSize()
public void set_MinSize(int value)
internal int get_MaxSize()
public int get_SplitPosition()
public void set_SplitPosition(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
protected CreateParams get_CreateParams()
protected Cursor get_DefaultCursor()
protected ImeMode get_DefaultImeMode()
protected Size get_DefaultSize()
public string ToString()
protected void OnKeyDown(KeyEventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseMove(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs e)
private void SplitterBeginMove(Point location)
private void SplitterMove(Point location)
private void SplitterEndMove(Point location, bool cancel)
protected void OnSplitterMoved(SplitterEventArgs sevent)
protected void OnSplitterMoving(SplitterEventArgs sevent)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
private Control get_AffectedControl()
private int CalculateSplitPosition()
internal void OnPaintInternal(PaintEventArgs e)
private void LayoutSplitter(object sender, LayoutEventArgs e)
private void ReparentSplitter(object sender, EventArgs e)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_Enter(EventHandler value)
public void remove_Enter(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_Leave(EventHandler value)
public void remove_Leave(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_SplitterMoved(SplitterEventHandler value)
public void remove_SplitterMoved(SplitterEventHandler value)
public void add_SplitterMoving(SplitterEventHandler value)
public void remove_SplitterMoving(SplitterEventHandler value)
}
public System.Windows.Forms.SplitterCancelEventArgs : CancelEventArgs {
private int mouse_cursor_x
private int mouse_cursor_y
private int split_x
private int split_y
public int MouseCursorX
public int MouseCursorY
public int SplitX
public int SplitY
public void .ctor(int mouseCursorX, int mouseCursorY, int splitX, int splitY)
public int get_MouseCursorX()
public int get_MouseCursorY()
public int get_SplitX()
public void set_SplitX(int value)
public int get_SplitY()
public void set_SplitY(int value)
}
public System.Windows.Forms.SplitterCancelEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SplitterCancelEventArgs e)
public IAsyncResult BeginInvoke(object sender, SplitterCancelEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.SplitterEventArgs : EventArgs {
internal int split_x
internal int split_y
internal int x
internal int y
public int SplitX
public int SplitY
public int X
public int Y
public void .ctor(int x, int y, int splitX, int splitY)
public int get_SplitX()
public void set_SplitX(int value)
public int get_SplitY()
public void set_SplitY(int value)
public int get_X()
public int get_Y()
}
public System.Windows.Forms.SplitterEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SplitterEventArgs e)
public IAsyncResult BeginInvoke(object sender, SplitterEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.SplitterPanel : Panel {
public AnchorStyles Anchor
public bool AutoSize
public AutoSizeMode AutoSizeMode
public BorderStyle BorderStyle
public DockStyle Dock
public DockPaddingEdges DockPadding
public int Height
public Point Location
public Size MaximumSize
public Size MinimumSize
public string Name
public Control Parent
public Size Size
public int TabIndex
public bool TabStop
public bool Visible
public int Width
protected Padding DefaultMargin
internal int InternalHeight
internal int InternalWidth
public void .ctor(SplitContainer owner)
public AnchorStyles get_Anchor()
public void set_Anchor(AnchorStyles value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public AutoSizeMode get_AutoSizeMode()
public void set_AutoSizeMode(AutoSizeMode value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public DockPaddingEdges get_DockPadding()
public int get_Height()
public void set_Height(int value)
public Point get_Location()
public void set_Location(Point value)
public Size get_MaximumSize()
public void set_MaximumSize(Size value)
public Size get_MinimumSize()
public void set_MinimumSize(Size value)
public string get_Name()
public void set_Name(string value)
public Control get_Parent()
public void set_Parent(Control value)
public Size get_Size()
public void set_Size(Size value)
public int get_TabIndex()
public void set_TabIndex(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public bool get_Visible()
public void set_Visible(bool value)
public int get_Width()
public void set_Width(int value)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_DockChanged(EventHandler value)
public void remove_DockChanged(EventHandler value)
public void add_LocationChanged(EventHandler value)
public void remove_LocationChanged(EventHandler value)
public void add_TabIndexChanged(EventHandler value)
public void remove_TabIndexChanged(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_VisibleChanged(EventHandler value)
public void remove_VisibleChanged(EventHandler value)
protected Padding get_DefaultMargin()
internal void set_InternalHeight(int value)
internal void set_InternalWidth(int value)
}
internal System.Windows.Forms.StackMode : Enum {
public int value__
public StackMode Above
public StackMode Below
public StackMode TopIf
public StackMode BottomIf
public StackMode Opposite
}
public System.Windows.Forms.StatusBar : Control {
private StatusBarPanelCollection panels
private bool show_panels
private bool sizing_grip
private Timer tooltip_timer
private ToolTip tooltip_window
private StatusBarPanel tooltip_currently_showing
private object DrawItemEvent
private object PanelClickEvent
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public DockStyle Dock
protected bool DoubleBuffered
public Font Font
public Color ForeColor
public ImeMode ImeMode
public StatusBarPanelCollection Panels
public bool ShowPanels
public bool SizingGrip
public bool TabStop
public string Text
protected CreateParams CreateParams
protected ImeMode DefaultImeMode
protected Size DefaultSize
private Timer ToolTipTimer
private ToolTip ToolTipWindow
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public StatusBarPanelCollection get_Panels()
public bool get_ShowPanels()
public void set_ShowPanels(bool value)
public bool get_SizingGrip()
public void set_SizingGrip(bool value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
protected CreateParams get_CreateParams()
protected ImeMode get_DefaultImeMode()
protected Size get_DefaultSize()
public string ToString()
protected void CreateHandle()
protected void Dispose(bool disposing)
protected void OnDrawItem(StatusBarDrawItemEventArgs sbdievent)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnLayout(LayoutEventArgs levent)
protected void OnMouseDown(MouseEventArgs e)
protected void OnPanelClick(StatusBarPanelClickEventArgs e)
protected void OnResize(EventArgs e)
protected void WndProc(Message& m)
internal void OnDrawItemInternal(StatusBarDrawItemEventArgs e)
internal void UpdatePanel(StatusBarPanel panel)
internal void UpdatePanelContents(StatusBarPanel panel)
private void UpdateStatusBar()
internal void OnPaintInternal(PaintEventArgs pevent)
private void CalcPanelSizes()
private void Draw(Graphics dc, Rectangle clip)
private void StatusBar_MouseMove(object sender, MouseEventArgs e)
private void StatusBar_MouseLeave(object sender, EventArgs e)
private StatusBarPanel GetPanelAtPoint(Point point)
private void MouseEnteredPanel(StatusBarPanel item)
private void MouseLeftPanel(StatusBarPanel item)
private Timer get_ToolTipTimer()
private ToolTip get_ToolTipWindow()
private void ToolTipTimer_Tick(object o, EventArgs args)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_DrawItem(StatusBarDrawItemEventHandler value)
public void remove_DrawItem(StatusBarDrawItemEventHandler value)
public void add_PanelClick(StatusBarPanelClickEventHandler value)
public void remove_PanelClick(StatusBarPanelClickEventHandler value)
}
public System.Windows.Forms.StatusBarDrawItemEventArgs : DrawItemEventArgs {
private StatusBarPanel panel
public StatusBarPanel Panel
public void .ctor(Graphics g, Font font, Rectangle r, int itemId, DrawItemState itemState, StatusBarPanel panel)
public void .ctor(Graphics g, Font font, Rectangle r, int itemId, DrawItemState itemState, StatusBarPanel panel, Color foreColor, Color backColor)
public StatusBarPanel get_Panel()
}
public System.Windows.Forms.StatusBarDrawItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, StatusBarDrawItemEventArgs sbdevent)
public IAsyncResult BeginInvoke(object sender, StatusBarDrawItemEventArgs sbdevent, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.StatusBarPanel : Component {
private StatusBar parent
private bool initializing
private string text
private string tool_tip_text
private Icon icon
private HorizontalAlignment alignment
private StatusBarPanelAutoSize auto_size
private StatusBarPanelBorderStyle border_style
private StatusBarPanelStyle style
private int width
private int min_width
internal int X
private string name
private object tag
private object UIATextChangedEvent
public HorizontalAlignment Alignment
public StatusBarPanelAutoSize AutoSize
public StatusBarPanelBorderStyle BorderStyle
public Icon Icon
public int MinWidth
public string Name
public int Width
public StatusBarPanelStyle Style
public object Tag
public string Text
public string ToolTipText
public StatusBar Parent
internal void add_UIATextChanged(EventHandler value)
internal void remove_UIATextChanged(EventHandler value)
internal void OnUIATextChanged(EventArgs e)
public HorizontalAlignment get_Alignment()
public void set_Alignment(HorizontalAlignment value)
public StatusBarPanelAutoSize get_AutoSize()
public void set_AutoSize(StatusBarPanelAutoSize value)
public StatusBarPanelBorderStyle get_BorderStyle()
public void set_BorderStyle(StatusBarPanelBorderStyle value)
public Icon get_Icon()
public void set_Icon(Icon value)
public int get_MinWidth()
public void set_MinWidth(int value)
public string get_Name()
public void set_Name(string value)
public int get_Width()
public void set_Width(int value)
public StatusBarPanelStyle get_Style()
public void set_Style(StatusBarPanelStyle value)
public object get_Tag()
public void set_Tag(object value)
public string get_Text()
public void set_Text(string value)
public string get_ToolTipText()
public void set_ToolTipText(string value)
public StatusBar get_Parent()
private void Invalidate()
private void InvalidateContents()
internal void SetParent(StatusBar parent)
internal void SetWidth(int width)
public string ToString()
protected void Dispose(bool disposing)
public void BeginInit()
public void EndInit()
}
public System.Windows.Forms.StatusBarPanelAutoSize : Enum {
public int value__
public StatusBarPanelAutoSize None
public StatusBarPanelAutoSize Spring
public StatusBarPanelAutoSize Contents
}
public System.Windows.Forms.StatusBarPanelBorderStyle : Enum {
public int value__
public StatusBarPanelBorderStyle None
public StatusBarPanelBorderStyle Raised
public StatusBarPanelBorderStyle Sunken
}
public System.Windows.Forms.StatusBarPanelClickEventArgs : MouseEventArgs {
private StatusBarPanel panel
public StatusBarPanel StatusBarPanel
public void .ctor(StatusBarPanel statusBarPanel, MouseButtons button, int clicks, int x, int y)
public StatusBarPanel get_StatusBarPanel()
}
public System.Windows.Forms.StatusBarPanelClickEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, StatusBarPanelClickEventArgs e)
public IAsyncResult BeginInvoke(object sender, StatusBarPanelClickEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.StatusBarPanelStyle : Enum {
public int value__
public StatusBarPanelStyle Text
public StatusBarPanelStyle OwnerDraw
}
public System.Windows.Forms.StatusStrip : ToolStrip {
private bool sizing_grip
public DockStyle Dock
public bool CanOverflow
public ToolStripGripStyle GripStyle
public ToolStripLayoutStyle LayoutStyle
public Padding Padding
public bool ShowItemToolTips
public Rectangle SizeGripBounds
public bool SizingGrip
public bool Stretch
protected DockStyle DefaultDock
protected Padding DefaultPadding
protected bool DefaultShowItemToolTips
protected Size DefaultSize
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public bool get_CanOverflow()
public void set_CanOverflow(bool value)
public ToolStripGripStyle get_GripStyle()
public void set_GripStyle(ToolStripGripStyle value)
public ToolStripLayoutStyle get_LayoutStyle()
public void set_LayoutStyle(ToolStripLayoutStyle value)
public Padding get_Padding()
public void set_Padding(Padding value)
public bool get_ShowItemToolTips()
public void set_ShowItemToolTips(bool value)
public Rectangle get_SizeGripBounds()
public bool get_SizingGrip()
public void set_SizingGrip(bool value)
public bool get_Stretch()
public void set_Stretch(bool value)
protected DockStyle get_DefaultDock()
protected Padding get_DefaultPadding()
protected bool get_DefaultShowItemToolTips()
protected Size get_DefaultSize()
protected AccessibleObject CreateAccessibilityInstance()
protected internal ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick)
protected void Dispose(bool disposing)
protected void OnLayout(LayoutEventArgs levent)
protected void OnPaintBackground(PaintEventArgs e)
protected void OnSpringTableLayoutCore()
protected void SetDisplayedItems()
protected void WndProc(Message& m)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
}
internal System.Windows.Forms.StdCursor : Enum {
public int value__
public StdCursor Default
public StdCursor AppStarting
public StdCursor Arrow
public StdCursor Cross
public StdCursor Hand
public StdCursor Help
public StdCursor HSplit
public StdCursor IBeam
public StdCursor No
public StdCursor NoMove2D
public StdCursor NoMoveHoriz
public StdCursor NoMoveVert
public StdCursor PanEast
public StdCursor PanNE
public StdCursor PanNorth
public StdCursor PanNW
public StdCursor PanSE
public StdCursor PanSouth
public StdCursor PanSW
public StdCursor PanWest
public StdCursor SizeAll
public StdCursor SizeNESW
public StdCursor SizeNS
public StdCursor SizeNWSE
public StdCursor SizeWE
public StdCursor UpArrow
public StdCursor VSplit
public StdCursor WaitCursor
}
public System.Windows.Forms.StructFormat : Enum {
public int value__
public StructFormat Ansi
public StructFormat Unicode
public StructFormat Auto
}
internal System.Windows.Forms.SystemCommands : Enum {
public int value__
public SystemCommands SC_SIZE
public SystemCommands SC_MOVE
public SystemCommands SC_MINIMIZE
public SystemCommands SC_MAXIMIZE
public SystemCommands SC_NEXTWINDOW
public SystemCommands SC_PREVWINDOW
public SystemCommands SC_CLOSE
public SystemCommands SC_VSCROLL
public SystemCommands SC_HSCROLL
public SystemCommands SC_MOUSEMENU
public SystemCommands SC_KEYMENU
public SystemCommands SC_ARRANGE
public SystemCommands SC_RESTORE
public SystemCommands SC_TASKLIST
public SystemCommands SC_SCREENSAVE
public SystemCommands SC_HOTKEY
public SystemCommands SC_DEFAULT
public SystemCommands SC_MONITORPOWER
public SystemCommands SC_CONTEXTHELP
}
public System.Windows.Forms.SystemInformation : object {
public int ActiveWindowTrackingDelay
public ArrangeDirection ArrangeDirection
public ArrangeStartingPosition ArrangeStartingPosition
public BootMode BootMode
public Size Border3DSize
public int BorderMultiplierFactor
public Size BorderSize
public Size CaptionButtonSize
public int CaptionHeight
public int CaretBlinkTime
public int CaretWidth
public string ComputerName
public Size CursorSize
public bool DbcsEnabled
public bool DebugOS
public Size DoubleClickSize
public int DoubleClickTime
public bool DragFullWindows
public Size DragSize
public Size FixedFrameBorderSize
public int FontSmoothingContrast
public int FontSmoothingType
public Size FrameBorderSize
public bool HighContrast
public int HorizontalFocusThickness
public int HorizontalResizeBorderThickness
public int HorizontalScrollBarArrowWidth
public int HorizontalScrollBarHeight
public int HorizontalScrollBarThumbWidth
public Size IconSize
public int IconHorizontalSpacing
public int IconVerticalSpacing
public Size IconSpacingSize
public bool IsActiveWindowTrackingEnabled
public bool IsComboBoxAnimationEnabled
public bool IsDropShadowEnabled
public bool IsFlatMenuEnabled
public bool IsFontSmoothingEnabled
public bool IsHotTrackingEnabled
public bool IsIconTitleWrappingEnabled
public bool IsKeyboardPreferred
public bool IsListBoxSmoothScrollingEnabled
public bool IsMenuAnimationEnabled
public bool IsMenuFadeEnabled
public bool IsMinimizeRestoreAnimationEnabled
public bool IsSelectionFadeEnabled
public bool IsSnapToDefaultEnabled
public bool IsTitleBarGradientEnabled
public bool IsToolTipAnimationEnabled
public int KanjiWindowHeight
public int KeyboardDelay
public int KeyboardSpeed
public Size MaxWindowTrackSize
public bool MenuAccessKeysUnderlined
public Size MenuBarButtonSize
public Size MenuButtonSize
public Size MenuCheckSize
public Font MenuFont
public int MenuHeight
public int MenuShowDelay
public bool MidEastEnabled
public Size MinimizedWindowSize
public Size MinimizedWindowSpacingSize
public Size MinimumWindowSize
public Size MinWindowTrackSize
public int MonitorCount
public bool MonitorsSameDisplayFormat
public int MouseButtons
public bool MouseButtonsSwapped
public Size MouseHoverSize
public int MouseHoverTime
public int MouseSpeed
public int MouseWheelScrollDelta
public bool MousePresent
public bool MouseWheelPresent
public int MouseWheelScrollLines
public bool NativeMouseWheelSupport
public bool Network
public bool PenWindows
public LeftRightAlignment PopupMenuAlignment
public PowerStatus PowerStatus
public Size PrimaryMonitorMaximizedWindowSize
public Size PrimaryMonitorSize
public bool RightAlignedMenus
public ScreenOrientation ScreenOrientation
public bool Secure
public bool ShowSounds
public int SizingBorderWidth
public Size SmallCaptionButtonSize
public Size SmallIconSize
public bool TerminalServerSession
public Size ToolWindowCaptionButtonSize
public int ToolWindowCaptionHeight
public bool UIEffectsEnabled
public string UserDomainName
public bool UserInteractive
public string UserName
public int VerticalFocusThickness
public int VerticalResizeBorderThickness
public int VerticalScrollBarArrowHeight
public int VerticalScrollBarThumbHeight
public int VerticalScrollBarWidth
public Rectangle VirtualScreen
public Rectangle WorkingArea
public int get_ActiveWindowTrackingDelay()
public ArrangeDirection get_ArrangeDirection()
public ArrangeStartingPosition get_ArrangeStartingPosition()
public BootMode get_BootMode()
public Size get_Border3DSize()
public int get_BorderMultiplierFactor()
public Size get_BorderSize()
public Size get_CaptionButtonSize()
public int get_CaptionHeight()
public int get_CaretBlinkTime()
public int get_CaretWidth()
public string get_ComputerName()
public Size get_CursorSize()
public bool get_DbcsEnabled()
public bool get_DebugOS()
public Size get_DoubleClickSize()
public int get_DoubleClickTime()
public bool get_DragFullWindows()
public Size get_DragSize()
public Size get_FixedFrameBorderSize()
public int get_FontSmoothingContrast()
public int get_FontSmoothingType()
public Size get_FrameBorderSize()
public bool get_HighContrast()
public int get_HorizontalFocusThickness()
public int get_HorizontalResizeBorderThickness()
public int get_HorizontalScrollBarArrowWidth()
public int get_HorizontalScrollBarHeight()
public int get_HorizontalScrollBarThumbWidth()
public Size get_IconSize()
public int get_IconHorizontalSpacing()
public int get_IconVerticalSpacing()
public Size get_IconSpacingSize()
public bool get_IsActiveWindowTrackingEnabled()
public bool get_IsComboBoxAnimationEnabled()
public bool get_IsDropShadowEnabled()
public bool get_IsFlatMenuEnabled()
public bool get_IsFontSmoothingEnabled()
public bool get_IsHotTrackingEnabled()
public bool get_IsIconTitleWrappingEnabled()
public bool get_IsKeyboardPreferred()
public bool get_IsListBoxSmoothScrollingEnabled()
public bool get_IsMenuAnimationEnabled()
public bool get_IsMenuFadeEnabled()
public bool get_IsMinimizeRestoreAnimationEnabled()
public bool get_IsSelectionFadeEnabled()
public bool get_IsSnapToDefaultEnabled()
public bool get_IsTitleBarGradientEnabled()
public bool get_IsToolTipAnimationEnabled()
public int get_KanjiWindowHeight()
public int get_KeyboardDelay()
public int get_KeyboardSpeed()
public Size get_MaxWindowTrackSize()
public bool get_MenuAccessKeysUnderlined()
public Size get_MenuBarButtonSize()
public Size get_MenuButtonSize()
public Size get_MenuCheckSize()
public Font get_MenuFont()
public int get_MenuHeight()
public int get_MenuShowDelay()
public bool get_MidEastEnabled()
public Size get_MinimizedWindowSize()
public Size get_MinimizedWindowSpacingSize()
public Size get_MinimumWindowSize()
public Size get_MinWindowTrackSize()
public int get_MonitorCount()
public bool get_MonitorsSameDisplayFormat()
public int get_MouseButtons()
public bool get_MouseButtonsSwapped()
public Size get_MouseHoverSize()
public int get_MouseHoverTime()
public int get_MouseSpeed()
public int get_MouseWheelScrollDelta()
public bool get_MousePresent()
public bool get_MouseWheelPresent()
public int get_MouseWheelScrollLines()
public bool get_NativeMouseWheelSupport()
public bool get_Network()
public bool get_PenWindows()
public LeftRightAlignment get_PopupMenuAlignment()
public PowerStatus get_PowerStatus()
public Size get_PrimaryMonitorMaximizedWindowSize()
public Size get_PrimaryMonitorSize()
public bool get_RightAlignedMenus()
public ScreenOrientation get_ScreenOrientation()
public bool get_Secure()
public bool get_ShowSounds()
public int get_SizingBorderWidth()
public Size get_SmallCaptionButtonSize()
public Size get_SmallIconSize()
public bool get_TerminalServerSession()
public Size get_ToolWindowCaptionButtonSize()
public int get_ToolWindowCaptionHeight()
public bool get_UIEffectsEnabled()
public string get_UserDomainName()
public bool get_UserInteractive()
public string get_UserName()
public int get_VerticalFocusThickness()
public int get_VerticalResizeBorderThickness()
public int get_VerticalScrollBarArrowHeight()
public int get_VerticalScrollBarThumbHeight()
public int get_VerticalScrollBarWidth()
public Rectangle get_VirtualScreen()
public Rectangle get_WorkingArea()
}
public System.Windows.Forms.SystemParameter : Enum {
public int value__
public SystemParameter DropShadow
public SystemParameter FlatMenu
public SystemParameter FontSmoothingContrastMetric
public SystemParameter FontSmoothingTypeMetric
public SystemParameter MenuFadeEnabled
public SystemParameter SelectionFade
public SystemParameter ToolTipAnimationMetric
public SystemParameter UIEffects
public SystemParameter CaretWidthMetric
public SystemParameter VerticalFocusThicknessMetric
public SystemParameter HorizontalFocusThicknessMetric
}
internal System.Windows.Forms.SystemResPool : object {
private Hashtable pens
private Hashtable dashpens
private Hashtable sizedpens
private Hashtable solidbrushes
private Hashtable hatchbrushes
private Hashtable uiImages
private Hashtable cpcolors
public Pen GetPen(Color color)
public Pen GetDashPen(Color color, DashStyle dashStyle)
public Pen GetSizedPen(Color color, int size)
public SolidBrush GetSolidBrush(Color color)
public HatchBrush GetHatchBrush(HatchStyle hatchStyle, Color foreColor, Color backColor)
public void AddUIImage(Image image, string name, int size)
public Image GetUIImage(string name, int size)
public CPColor GetCPColor(Color color)
}
internal System.Windows.Forms.SystrayRequest : Enum {
public int value__
public SystrayRequest SYSTEM_TRAY_REQUEST_DOCK
public SystrayRequest SYSTEM_TRAY_BEGIN_MESSAGE
public SystrayRequest SYSTEM_TRAY_CANCEL_MESSAGE
}
public System.Windows.Forms.TabAlignment : Enum {
public int value__
public TabAlignment Top
public TabAlignment Bottom
public TabAlignment Left
public TabAlignment Right
}
public System.Windows.Forms.TabAppearance : Enum {
public int value__
public TabAppearance Normal
public TabAppearance Buttons
public TabAppearance FlatButtons
}
public System.Windows.Forms.TabControl : Control {
private int selected_index
private TabAlignment alignment
private TabAppearance appearance
private TabDrawMode draw_mode
private bool multiline
private ImageList image_list
private Size item_size
private bool item_size_manual
private Point padding
private int row_count
private bool hottrack
private TabPageCollection tab_pages
private bool show_tool_tips
private TabSizeMode size_mode
private bool show_slider
private PushButtonState right_slider_state
private PushButtonState left_slider_state
private int slider_pos
private TabPage entered_tab_page
private bool mouse_down_on_a_tab_page
private ToolTip tooltip
private TipState tooltip_state
private Timer tooltip_timer
private bool rightToLeftLayout
private object UIAHorizontallyScrollableChangedEvent
private object UIAHorizontallyScrolledEvent
private object DrawItemEvent
private object SelectedIndexChangedEvent
private object SelectedEvent
private object DeselectedEvent
private object SelectingEvent
private object DeselectingEvent
private object RightToLeftLayoutChangedEvent
internal double UIAHorizontalViewSize
public TabAlignment Alignment
public TabAppearance Appearance
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public Rectangle DisplayRectangle
protected bool DoubleBuffered
public TabDrawMode DrawMode
public Color ForeColor
public bool HotTrack
public ImageList ImageList
public Size ItemSize
public bool Multiline
public Point Padding
public bool RightToLeftLayout
public int RowCount
public int SelectedIndex
public TabPage SelectedTab
public bool ShowToolTips
public TabSizeMode SizeMode
public int TabCount
public TabPageCollection TabPages
public string Text
internal bool ShowSlider
internal int SliderPos
internal PushButtonState RightSliderState
internal PushButtonState LeftSliderState
internal TabPage EnteredTabPage
protected CreateParams CreateParams
protected Size DefaultSize
private bool CanScrollRight
private bool CanScrollLeft
private bool HasHotElementStyles
private Rectangle LeftScrollButtonArea
private Rectangle RightScrollButtonArea
private int MinimumTabWidth
private Size TabSpacing
private int BottomRow
private int Direction
internal void add_UIAHorizontallyScrollableChanged(EventHandler value)
internal void remove_UIAHorizontallyScrollableChanged(EventHandler value)
internal void OnUIAHorizontallyScrollableChanged(EventArgs e)
internal void add_UIAHorizontallyScrolled(EventHandler value)
internal void remove_UIAHorizontallyScrolled(EventHandler value)
internal void OnUIAHorizontallyScrolled(EventArgs e)
internal double get_UIAHorizontalViewSize()
public TabAlignment get_Alignment()
public void set_Alignment(TabAlignment value)
public TabAppearance get_Appearance()
public void set_Appearance(TabAppearance value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public Rectangle get_DisplayRectangle()
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public TabDrawMode get_DrawMode()
public void set_DrawMode(TabDrawMode value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_HotTrack()
public void set_HotTrack(bool value)
public ImageList get_ImageList()
public void set_ImageList(ImageList value)
public Size get_ItemSize()
public void set_ItemSize(Size value)
public bool get_Multiline()
public void set_Multiline(bool value)
public Point get_Padding()
public void set_Padding(Point value)
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public int get_RowCount()
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public TabPage get_SelectedTab()
public void set_SelectedTab(TabPage value)
public bool get_ShowToolTips()
public void set_ShowToolTips(bool value)
public TabSizeMode get_SizeMode()
public void set_SizeMode(TabSizeMode value)
public int get_TabCount()
public TabPageCollection get_TabPages()
public string get_Text()
public void set_Text(string value)
internal bool get_ShowSlider()
internal void set_ShowSlider(bool value)
internal int get_SliderPos()
internal PushButtonState get_RightSliderState()
private void set_RightSliderState(PushButtonState value)
internal PushButtonState get_LeftSliderState()
internal void set_LeftSliderState(PushButtonState value)
private bool NeedsToInvalidateScrollButton(PushButtonState oldState, PushButtonState newState)
internal TabPage get_EnteredTabPage()
private void set_EnteredTabPage(TabPage value)
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
public Rectangle GetTabRect(int index)
public Control GetControl(int index)
public void SelectTab(TabPage tabPage)
public void SelectTab(string tabPageName)
public void SelectTab(int index)
public void DeselectTab(TabPage tabPage)
public void DeselectTab(string tabPageName)
public void DeselectTab(int index)
public string ToString()
protected ControlCollection CreateControlsInstance()
protected void CreateHandle()
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void Dispose(bool disposing)
protected void OnDrawItem(DrawItemEventArgs e)
internal void OnDrawItemInternal(DrawItemEventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnResize(EventArgs e)
protected void OnStyleChanged(EventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
internal void OnPaintInternal(PaintEventArgs pe)
protected void OnEnter(EventArgs e)
protected void OnLeave(EventArgs e)
protected void OnRightToLeftLayoutChanged(EventArgs e)
protected void ScaleCore(float dx, float dy)
protected void OnDeselecting(TabControlCancelEventArgs e)
protected void OnDeselected(TabControlEventArgs e)
protected void OnSelecting(TabControlCancelEventArgs e)
protected void OnSelected(TabControlEventArgs e)
protected bool ProcessKeyPreview(Message& m)
protected void OnKeyDown(KeyEventArgs ke)
protected bool IsInputKey(Keys keyData)
private bool NavigateTabs(Keys keycode)
protected void RemoveAll()
protected Object[] GetItems()
protected Object[] GetItems(Type baseType)
protected void UpdateTabSelection(bool updateFocus)
protected string GetToolTipText(object item)
protected void WndProc(Message& m)
private bool get_CanScrollRight()
private bool get_CanScrollLeft()
private void MouseDownHandler(object sender, MouseEventArgs e)
private void MouseUpHandler(object sender, MouseEventArgs e)
private bool get_HasHotElementStyles()
private Rectangle get_LeftScrollButtonArea()
private Rectangle get_RightScrollButtonArea()
private PushButtonState GetScrollButtonState(Rectangle scrollButtonArea, Point cursorLocation)
private void SizeChangedHandler(object sender, EventArgs e)
internal int IndexForTabPage(TabPage page)
private void ResizeTabPages()
private int get_MinimumTabWidth()
private Size get_TabSpacing()
private void CalcTabRows()
private void CalcTabRows(int row_width)
private void CalculateItemSize()
private int get_BottomRow()
private int get_Direction()
private void DropRow(int row)
private int CalcYPos()
private int CalcXPos()
private void SizeTabs()
private void SizeTabs(int row_width, bool vertical)
private void SizeTab(TabPage page, int i, int row_width, Int32& xpos, Int32& ypos, Size spacing, int prev_row, Int32& begin_prev, bool widthOnly)
private void FillRow(int start, int end, int amount, Size spacing, bool vertical)
private void FillRow(int start, int end, int amount, Size spacing)
private void FillRowV(int start, int end, int amount, Size spacing)
private void ExpandSelected(TabPage page, int left_edge, int right_edge)
private void Draw(Graphics dc, Rectangle clip)
private TabPage GetTab(int index)
private void SetTab(int index, TabPage value)
private void InsertTab(int index, TabPage value)
internal void Redraw()
private int MeasureStringWidth(Graphics graphics, string text, Font font)
private void SetToolTip(string text)
private void CloseToolTip()
private void ToolTipTimerTick(object o, EventArgs args)
private void OnMouseMove(object sender, MouseEventArgs e)
private void OnMouseLeave(object sender, EventArgs e)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_DrawItem(DrawItemEventHandler value)
public void remove_DrawItem(DrawItemEventHandler value)
public void add_SelectedIndexChanged(EventHandler value)
public void remove_SelectedIndexChanged(EventHandler value)
public void add_Selected(TabControlEventHandler value)
public void remove_Selected(TabControlEventHandler value)
public void add_Deselected(TabControlEventHandler value)
public void remove_Deselected(TabControlEventHandler value)
public void add_Selecting(TabControlCancelEventHandler value)
public void remove_Selecting(TabControlCancelEventHandler value)
public void add_Deselecting(TabControlCancelEventHandler value)
public void remove_Deselecting(TabControlCancelEventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
}
public System.Windows.Forms.TabControlAction : Enum {
public int value__
public TabControlAction Selecting
public TabControlAction Selected
public TabControlAction Deselecting
public TabControlAction Deselected
}
public System.Windows.Forms.TabControlCancelEventArgs : CancelEventArgs {
private TabControlAction action
private TabPage tab_page
private int tab_page_index
public TabControlAction Action
public TabPage TabPage
public int TabPageIndex
public void .ctor(TabPage tabPage, int tabPageIndex, bool cancel, TabControlAction action)
public TabControlAction get_Action()
public TabPage get_TabPage()
public int get_TabPageIndex()
}
public System.Windows.Forms.TabControlCancelEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TabControlCancelEventArgs e)
public IAsyncResult BeginInvoke(object sender, TabControlCancelEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.TabControlEventArgs : EventArgs {
private TabControlAction action
private TabPage tab_page
private int tab_page_index
public TabControlAction Action
public TabPage TabPage
public int TabPageIndex
public void .ctor(TabPage tabPage, int tabPageIndex, TabControlAction action)
public TabControlAction get_Action()
public TabPage get_TabPage()
public int get_TabPageIndex()
}
public System.Windows.Forms.TabControlEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TabControlEventArgs e)
public IAsyncResult BeginInvoke(object sender, TabControlEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.TabDrawMode : Enum {
public int value__
public TabDrawMode Normal
public TabDrawMode OwnerDrawFixed
}
public System.Windows.Forms.TableLayoutCellPaintEventArgs : PaintEventArgs {
private Rectangle cell_bounds
private int column
private int row
public Rectangle CellBounds
public int Column
public int Row
public void .ctor(Graphics g, Rectangle clipRectangle, Rectangle cellBounds, int column, int row)
public Rectangle get_CellBounds()
public int get_Column()
public int get_Row()
}
public System.Windows.Forms.TableLayoutCellPaintEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TableLayoutCellPaintEventArgs e)
public IAsyncResult BeginInvoke(object sender, TableLayoutCellPaintEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.TableLayoutColumnStyleCollection : TableLayoutStyleCollection {
public ColumnStyle Item
internal void .ctor(TableLayoutPanel panel)
public int Add(ColumnStyle columnStyle)
public bool Contains(ColumnStyle columnStyle)
public int IndexOf(ColumnStyle columnStyle)
public void Insert(int index, ColumnStyle columnStyle)
public void Remove(ColumnStyle columnStyle)
public ColumnStyle get_Item(int index)
public void set_Item(int index, ColumnStyle value)
}
public System.Windows.Forms.TableLayoutControlCollection : ControlCollection {
private TableLayoutPanel panel
public TableLayoutPanel Container
public void .ctor(TableLayoutPanel container)
public TableLayoutPanel get_Container()
public void Add(Control control, int column, int row)
}
public System.Windows.Forms.TableLayoutPanel : Panel {
private TableLayoutSettings settings
private TableLayout layout_engine
private TableLayoutPanelCellBorderStyle cell_border_style
internal Control[0...,0...] actual_positions
internal Int32[] column_widths
internal Int32[] row_heights
private object CellPaintEvent
public BorderStyle BorderStyle
public TableLayoutPanelCellBorderStyle CellBorderStyle
public int ColumnCount
public TableLayoutColumnStyleCollection ColumnStyles
public TableLayoutControlCollection Controls
public TableLayoutPanelGrowStyle GrowStyle
public LayoutEngine LayoutEngine
public TableLayoutSettings LayoutSettings
public int RowCount
public TableLayoutRowStyleCollection RowStyles
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public TableLayoutPanelCellBorderStyle get_CellBorderStyle()
public void set_CellBorderStyle(TableLayoutPanelCellBorderStyle value)
public int get_ColumnCount()
public void set_ColumnCount(int value)
public TableLayoutColumnStyleCollection get_ColumnStyles()
public TableLayoutControlCollection get_Controls()
public TableLayoutPanelGrowStyle get_GrowStyle()
public void set_GrowStyle(TableLayoutPanelGrowStyle value)
public LayoutEngine get_LayoutEngine()
public TableLayoutSettings get_LayoutSettings()
public void set_LayoutSettings(TableLayoutSettings value)
public int get_RowCount()
public void set_RowCount(int value)
public TableLayoutRowStyleCollection get_RowStyles()
public TableLayoutPanelCellPosition GetCellPosition(Control control)
public int GetColumn(Control control)
public int GetColumnSpan(Control control)
public Int32[] GetColumnWidths()
public Control GetControlFromPosition(int column, int row)
public TableLayoutPanelCellPosition GetPositionFromControl(Control control)
public int GetRow(Control control)
public Int32[] GetRowHeights()
public int GetRowSpan(Control control)
public void SetCellPosition(Control control, TableLayoutPanelCellPosition position)
public void SetColumn(Control control, int column)
public void SetColumnSpan(Control control, int value)
public void SetRow(Control control, int row)
public void SetRowSpan(Control control, int value)
protected ControlCollection CreateControlsInstance()
protected void OnCellPaint(TableLayoutCellPaintEventArgs e)
protected void OnLayout(LayoutEventArgs levent)
protected void OnPaintBackground(PaintEventArgs e)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
protected void ScaleCore(float dx, float dy)
internal int GetCellBorderWidth(TableLayoutPanelCellBorderStyle style)
private void DrawCellBorders(PaintEventArgs e)
private void DrawSingleBorder(Graphics g, Rectangle rect)
private void DrawInsetBorder(Graphics g, Rectangle rect)
private void DrawOutsetBorder(Graphics g, Rectangle rect)
private void DrawOutsetDoubleBorder(Graphics g, Rectangle rect)
private void DrawInsetDoubleBorder(Graphics g, Rectangle rect)
internal Size GetPreferredSizeCore(Size proposedSize)
private void AdjustWidthsForSpans(Int32[0...,0...] widths, int col, int span)
private void AdjustHeightsForSpans(Int32[0...,0...] heights, int row, int span)
public void add_CellPaint(TableLayoutCellPaintEventHandler value)
public void remove_CellPaint(TableLayoutCellPaintEventHandler value)
private bool System.ComponentModel.IExtenderProvider.CanExtend(object obj)
}
public System.Windows.Forms.TableLayoutPanelCellBorderStyle : Enum {
public int value__
public TableLayoutPanelCellBorderStyle None
public TableLayoutPanelCellBorderStyle Single
public TableLayoutPanelCellBorderStyle Inset
public TableLayoutPanelCellBorderStyle InsetDouble
public TableLayoutPanelCellBorderStyle Outset
public TableLayoutPanelCellBorderStyle OutsetDouble
public TableLayoutPanelCellBorderStyle OutsetPartial
}
public System.Windows.Forms.TableLayoutPanelCellPosition : ValueType {
private int column
private int row
public int Column
public int Row
public void .ctor(int column, int row)
public int get_Column()
public void set_Column(int value)
public int get_Row()
public void set_Row(int value)
public string ToString()
public int GetHashCode()
public bool op_Equality(TableLayoutPanelCellPosition p1, TableLayoutPanelCellPosition p2)
public bool op_Inequality(TableLayoutPanelCellPosition p1, TableLayoutPanelCellPosition p2)
public bool Equals(object other)
}
public System.Windows.Forms.TableLayoutPanelGrowStyle : Enum {
public int value__
public TableLayoutPanelGrowStyle FixedSize
public TableLayoutPanelGrowStyle AddRows
public TableLayoutPanelGrowStyle AddColumns
}
public System.Windows.Forms.TableLayoutRowStyleCollection : TableLayoutStyleCollection {
public RowStyle Item
internal void .ctor(TableLayoutPanel panel)
public int Add(RowStyle rowStyle)
public bool Contains(RowStyle rowStyle)
public int IndexOf(RowStyle rowStyle)
public void Insert(int index, RowStyle rowStyle)
public void Remove(RowStyle rowStyle)
public RowStyle get_Item(int index)
public void set_Item(int index, RowStyle value)
}
public System.Windows.Forms.TableLayoutSettings : LayoutSettings {
private TableLayoutColumnStyleCollection column_styles
private TableLayoutRowStyleCollection row_styles
private TableLayoutPanelGrowStyle grow_style
private int column_count
private int row_count
private Dictionary`2<object, int> columns
private Dictionary`2<object, int> column_spans
private Dictionary`2<object, int> rows
private Dictionary`2<object, int> row_spans
internal TableLayoutPanel panel
internal bool isSerialized
public int ColumnCount
public TableLayoutColumnStyleCollection ColumnStyles
public TableLayoutPanelGrowStyle GrowStyle
public LayoutEngine LayoutEngine
public int RowCount
public TableLayoutRowStyleCollection RowStyles
internal void .ctor(TableLayoutPanel panel)
private void .ctor(SerializationInfo serializationInfo, StreamingContext context)
public int get_ColumnCount()
public void set_ColumnCount(int value)
public TableLayoutColumnStyleCollection get_ColumnStyles()
public TableLayoutPanelGrowStyle get_GrowStyle()
public void set_GrowStyle(TableLayoutPanelGrowStyle value)
public LayoutEngine get_LayoutEngine()
public int get_RowCount()
public void set_RowCount(int value)
public TableLayoutRowStyleCollection get_RowStyles()
public TableLayoutPanelCellPosition GetCellPosition(object control)
public int GetColumn(object control)
public int GetColumnSpan(object control)
public int GetRow(object control)
public int GetRowSpan(object control)
public void SetCellPosition(object control, TableLayoutPanelCellPosition cellPosition)
public void SetColumn(object control, int column)
public void SetColumnSpan(object control, int value)
public void SetRow(object control, int row)
public void SetRowSpan(object control, int value)
internal List`1<ControlInfo> GetControls()
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
}
public System.Windows.Forms.TableLayoutStyle : object {
private SizeType size_type
private TableLayoutPanel owner
public SizeType SizeType
internal TableLayoutPanel Owner
public SizeType get_SizeType()
public void set_SizeType(SizeType value)
internal TableLayoutPanel get_Owner()
internal void set_Owner(TableLayoutPanel value)
}
public System.Windows.Forms.TableLayoutStyleCollection : object {
private ArrayList al
private TableLayoutPanel table
public int Count
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
public TableLayoutStyle Item
internal void .ctor(TableLayoutPanel table)
public int Add(TableLayoutStyle style)
public void Clear()
public int get_Count()
public void RemoveAt(int index)
private int System.Collections.IList.Add(object style)
private bool System.Collections.IList.Contains(object style)
private int System.Collections.IList.IndexOf(object style)
private void System.Collections.IList.Insert(int index, object style)
private void System.Collections.IList.Remove(object style)
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private void System.Collections.ICollection.CopyTo(Array array, int startIndex)
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public TableLayoutStyle get_Item(int index)
public void set_Item(int index, TableLayoutStyle value)
}
public System.Windows.Forms.TabPage : Panel {
private int imageIndex
private string imageKey
private string tooltip_text
private Rectangle tab_bounds
private int row
private bool use_visual_style_back_color
public bool AutoSize
public AutoSizeMode AutoSizeMode
public Size MaximumSize
public Size MinimumSize
public Size PreferredSize
public bool UseVisualStyleBackColor
public Color BackColor
public AnchorStyles Anchor
public DockStyle Dock
public bool Enabled
public int ImageIndex
public string ImageKey
public int TabIndex
public bool TabStop
public string Text
public string ToolTipText
public bool Visible
internal Rectangle TabBounds
internal int Row
private TabControl Owner
public Point Location
public void .ctor(string text)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public AutoSizeMode get_AutoSizeMode()
public void set_AutoSizeMode(AutoSizeMode value)
public Size get_MaximumSize()
public void set_MaximumSize(Size value)
public Size get_MinimumSize()
public void set_MinimumSize(Size value)
public Size get_PreferredSize()
public bool get_UseVisualStyleBackColor()
public void set_UseVisualStyleBackColor(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public AnchorStyles get_Anchor()
public void set_Anchor(AnchorStyles value)
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_ImageIndex()
public void set_ImageIndex(int value)
public string get_ImageKey()
public void set_ImageKey(string value)
public int get_TabIndex()
public void set_TabIndex(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
public string get_ToolTipText()
public void set_ToolTipText(string value)
public bool get_Visible()
public void set_Visible(bool value)
public TabPage GetTabPageOfComponent(object comp)
public string ToString()
internal Rectangle get_TabBounds()
internal void set_TabBounds(Rectangle value)
internal int get_Row()
internal void set_Row(int value)
private void UpdateOwner()
private TabControl get_Owner()
internal void SetVisible(bool value)
protected ControlCollection CreateControlsInstance()
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void OnEnter(EventArgs e)
protected void OnLeave(EventArgs e)
protected void OnPaintBackground(PaintEventArgs e)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_DockChanged(EventHandler value)
public void remove_DockChanged(EventHandler value)
public void add_EnabledChanged(EventHandler value)
public void remove_EnabledChanged(EventHandler value)
public void add_LocationChanged(EventHandler value)
public void remove_LocationChanged(EventHandler value)
public void add_TabIndexChanged(EventHandler value)
public void remove_TabIndexChanged(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_VisibleChanged(EventHandler value)
public void remove_VisibleChanged(EventHandler value)
public Point get_Location()
public void set_Location(Point value)
}
public System.Windows.Forms.TabRenderer : object {
public bool IsSupported
public void DrawTabItem(Graphics g, Rectangle bounds, TabItemState state)
public void DrawTabItem(Graphics g, Rectangle bounds, bool focused, TabItemState state)
public void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, TabItemState state)
public void DrawTabItem(Graphics g, Rectangle bounds, Image image, Rectangle imageRectangle, bool focused, TabItemState state)
public void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, bool focused, TabItemState state)
public void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, TextFormatFlags flags, bool focused, TabItemState state)
public void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, Image image, Rectangle imageRectangle, bool focused, TabItemState state)
public void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, TextFormatFlags flags, Image image, Rectangle imageRectangle, bool focused, TabItemState state)
public void DrawTabPage(Graphics g, Rectangle bounds)
public bool get_IsSupported()
}
public System.Windows.Forms.TabSizeMode : Enum {
public int value__
public TabSizeMode Normal
public TabSizeMode FillToRight
public TabSizeMode Fixed
}
public System.Windows.Forms.TextBox : TextBoxBase {
private ContextMenu menu
private MenuItem undo
private MenuItem cut
private MenuItem copy
private MenuItem paste
private MenuItem delete
private MenuItem select_all
private bool use_system_password_char
private AutoCompleteStringCollection auto_complete_custom_source
private AutoCompleteMode auto_complete_mode
private AutoCompleteSource auto_complete_source
private AutoCompleteListBox auto_complete_listbox
private string auto_complete_original_text
private int auto_complete_selected_index
private List`1<string> auto_complete_matches
private ComboBox auto_complete_cb_source
private object TextAlignChangedEvent
internal bool IsAutoCompleteAvailable
internal ComboBox AutoCompleteInternalSource
internal bool CanNavigateAutoCompleteList
public AutoCompleteStringCollection AutoCompleteCustomSource
public AutoCompleteMode AutoCompleteMode
public AutoCompleteSource AutoCompleteSource
public bool UseSystemPasswordChar
public bool AcceptsReturn
public CharacterCasing CharacterCasing
public char PasswordChar
public ScrollBars ScrollBars
public string Text
public HorizontalAlignment TextAlign
protected CreateParams CreateParams
internal ContextMenu ContextMenuInternal
public bool Multiline
private void TextBox_RightToLeftChanged(object sender, EventArgs e)
private void TextBox_LostFocus(object sender, EventArgs e)
private void TextBox_MouseWheel(object o, MouseEventArgs args)
private void ProcessAutoCompleteInput(Message& m, bool deleting_chars)
private void ShowAutoCompleteListBox(bool deleting_chars)
internal void HideAutoCompleteList()
internal bool get_IsAutoCompleteAvailable()
internal ComboBox get_AutoCompleteInternalSource()
internal void set_AutoCompleteInternalSource(ComboBox value)
internal bool get_CanNavigateAutoCompleteList()
private bool NavigateAutoCompleteList(Keys key)
private void AppendAutoCompleteMatch(int index)
internal void OnAutoCompleteValueSelected(EventArgs args)
private void UpdateAlignment()
internal Color ChangeBackColor(Color backColor)
private void OnAutoCompleteCustomSourceChanged(object sender, CollectionChangeEventArgs e)
public AutoCompleteStringCollection get_AutoCompleteCustomSource()
public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value)
public AutoCompleteMode get_AutoCompleteMode()
public void set_AutoCompleteMode(AutoCompleteMode value)
public AutoCompleteSource get_AutoCompleteSource()
public void set_AutoCompleteSource(AutoCompleteSource value)
public bool get_UseSystemPasswordChar()
public void set_UseSystemPasswordChar(bool value)
public bool get_AcceptsReturn()
public void set_AcceptsReturn(bool value)
public CharacterCasing get_CharacterCasing()
public void set_CharacterCasing(CharacterCasing value)
public char get_PasswordChar()
public void set_PasswordChar(char value)
public ScrollBars get_ScrollBars()
public void set_ScrollBars(ScrollBars value)
public string get_Text()
public void set_Text(string value)
public HorizontalAlignment get_TextAlign()
public void set_TextAlign(HorizontalAlignment value)
public void Paste(string text)
protected CreateParams get_CreateParams()
protected void Dispose(bool disposing)
protected bool IsInputKey(Keys keyData)
protected void OnGotFocus(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnTextAlignChanged(EventArgs e)
protected void WndProc(Message& m)
public void add_TextAlignChanged(EventHandler value)
public void remove_TextAlignChanged(EventHandler value)
internal ContextMenu get_ContextMenuInternal()
internal void set_ContextMenuInternal(ContextMenu value)
internal void RestoreContextMenu()
private void menu_Popup(object sender, EventArgs e)
private void undo_Click(object sender, EventArgs e)
private void cut_Click(object sender, EventArgs e)
private void copy_Click(object sender, EventArgs e)
private void paste_Click(object sender, EventArgs e)
private void delete_Click(object sender, EventArgs e)
private void select_all_Click(object sender, EventArgs e)
public bool get_Multiline()
public void set_Multiline(bool value)
protected void OnBackColorChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
}
internal System.Windows.Forms.TextBoxAutoCompleteSourceConverter : EnumConverter {
public void .ctor(Type type)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
}
public System.Windows.Forms.TextBoxBase : Control {
internal HorizontalAlignment alignment
internal bool accepts_tab
internal bool accepts_return
internal bool auto_size
internal bool backcolor_set
internal CharacterCasing character_casing
internal bool hide_selection
private int max_length
internal bool modified
internal char password_char
internal bool read_only
internal bool word_wrap
internal Document document
internal LineTag caret_tag
internal int caret_pos
internal ImplicitHScrollBar hscroll
internal ImplicitVScrollBar vscroll
internal RichTextBoxScrollBars scrollbars
internal Timer scroll_timer
internal bool richtext
internal bool show_selection
internal ArrayList list_links
private LinkRectangle current_link
private bool enable_links
internal bool has_been_focused
internal int selection_length
internal bool show_caret_w_selection
internal int canvas_width
internal int canvas_height
internal int track_width
internal int track_border
internal DateTime click_last
internal int click_point_x
internal int click_point_y
internal CaretSelection click_mode
internal BorderStyle actual_border_style
internal bool shortcuts_enabled
private object AcceptsTabChangedEvent
private object AutoSizeChangedEvent
private object BorderStyleChangedEvent
private object HideSelectionChangedEvent
private object ModifiedChangedEvent
private object MultilineChangedEvent
private object ReadOnlyChangedEvent
private object HScrolledEvent
private object VScrolledEvent
private PaintEventHandler Paint
public bool AcceptsTab
public bool AutoSize
public Color BackColor
public Image BackgroundImage
public BorderStyle BorderStyle
public bool CanUndo
public Color ForeColor
public bool HideSelection
public String[] Lines
public int MaxLength
public bool Modified
public bool Multiline
public int PreferredHeight
public bool ReadOnly
public string SelectedText
public int SelectionLength
public int SelectionStart
public bool ShortcutsEnabled
public string Text
public int TextLength
public bool WordWrap
public ImageLayout BackgroundImageLayout
public Padding Padding
protected Cursor DefaultCursor
protected bool CanEnableIme
protected CreateParams CreateParams
protected Size DefaultSize
protected bool DoubleBuffered
internal Document Document
internal bool EnableLinks
internal bool ScaleChildrenInternal
internal bool ShowSelection
internal int TopMargin
internal ScrollBar UIAHScrollBar
internal ScrollBar UIAVScrollBar
internal string CaseAdjust(string s)
internal Size GetPreferredSizeCore(Size proposedSize)
internal void HandleClick(int clicks, MouseEventArgs me)
internal void PaintControlBackground(PaintEventArgs pevent)
public bool get_AcceptsTab()
public void set_AcceptsTab(bool value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public bool get_CanUndo()
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_HideSelection()
public void set_HideSelection(bool value)
public String[] get_Lines()
public void set_Lines(String[] value)
public int get_MaxLength()
public void set_MaxLength(int value)
public bool get_Modified()
public void set_Modified(bool value)
public bool get_Multiline()
public void set_Multiline(bool value)
public int get_PreferredHeight()
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public string get_SelectedText()
public void set_SelectedText(string value)
public int get_SelectionLength()
public void set_SelectionLength(int value)
public int get_SelectionStart()
public void set_SelectionStart(int value)
public bool get_ShortcutsEnabled()
public void set_ShortcutsEnabled(bool value)
public string get_Text()
public void set_Text(string value)
public int get_TextLength()
public bool get_WordWrap()
public void set_WordWrap(bool value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public Padding get_Padding()
public void set_Padding(Padding value)
protected Cursor get_DefaultCursor()
protected bool get_CanEnableIme()
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public void AppendText(string text)
public void Clear()
public void ClearUndo()
public void Copy()
public void Cut()
public void Paste()
public void ScrollToCaret()
public void Select(int start, int length)
public void SelectAll()
internal void SelectAllNoScroll()
public string ToString()
public void Undo()
public void DeselectAll()
public char GetCharFromPosition(Point pt)
internal char GetCharFromPositionInternal(Point p)
public int GetCharIndexFromPosition(Point pt)
public Point GetPositionFromCharIndex(int index)
public int GetFirstCharIndexFromLine(int lineNumber)
public int GetFirstCharIndexOfCurrentLine()
protected void CreateHandle()
internal void HandleLinkClicked(LinkRectangle link_clicked)
protected bool IsInputKey(Keys keyData)
protected void OnAcceptsTabChanged(EventArgs e)
protected void OnBorderStyleChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnHideSelectionChanged(EventArgs e)
protected void OnModifiedChanged(EventArgs e)
protected void OnMultilineChanged(EventArgs e)
protected void OnPaddingChanged(EventArgs e)
protected void OnReadOnlyChanged(EventArgs e)
protected bool ProcessCmdKey(Message& msg, Keys keyData)
protected bool ProcessDialogKey(Keys keyData)
private bool ProcessKey(Keys keyData)
internal void RaiseSelectionChanged()
private void HandleBackspace(bool control)
private void HandleEnter()
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void WndProc(Message& m)
public void add_AcceptsTabChanged(EventHandler value)
public void remove_AcceptsTabChanged(EventHandler value)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_BorderStyleChanged(EventHandler value)
public void remove_BorderStyleChanged(EventHandler value)
public void add_HideSelectionChanged(EventHandler value)
public void remove_HideSelectionChanged(EventHandler value)
public void add_ModifiedChanged(EventHandler value)
public void remove_ModifiedChanged(EventHandler value)
public void add_MultilineChanged(EventHandler value)
public void remove_MultilineChanged(EventHandler value)
public void add_ReadOnlyChanged(EventHandler value)
public void remove_ReadOnlyChanged(EventHandler value)
internal void add_HScrolled(EventHandler value)
internal void remove_HScrolled(EventHandler value)
internal void add_VScrolled(EventHandler value)
internal void remove_VScrolled(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
internal Document get_Document()
internal void set_Document(Document value)
internal bool get_EnableLinks()
internal void set_EnableLinks(bool value)
internal bool get_ScaleChildrenInternal()
internal bool get_ShowSelection()
internal void set_ShowSelection(bool value)
internal int get_TopMargin()
internal void set_TopMargin(int value)
internal ScrollBar get_UIAHScrollBar()
internal ScrollBar get_UIAVScrollBar()
internal Graphics CreateGraphicsInternal()
internal void OnPaintInternal(PaintEventArgs pevent)
internal void Draw(Graphics g, Rectangle clippingArea)
private void FixupHeight()
private bool IsDoubleClick(MouseEventArgs e)
private void TextBoxBase_MouseDown(object sender, MouseEventArgs e)
private void TextBoxBase_MouseUp(object sender, MouseEventArgs e)
private void SizeControls()
private void PositionControls()
internal RightToLeft GetInheritedRtoL()
private void TextBoxBase_SizeChanged(object sender, EventArgs e)
private void TextBoxBase_RightToLeftChanged(object o, EventArgs e)
private void TextBoxBase_MouseWheel(object sender, MouseEventArgs e)
internal void SelectWord()
internal void CalculateDocument()
internal void CalculateScrollBars()
private void document_WidthChanged(object sender, EventArgs e)
private void document_HeightChanged(object sender, EventArgs e)
private void ScrollLinks(int xChange, int yChange)
private void hscroll_ValueChanged(object sender, EventArgs e)
private void vscroll_ValueChanged(object sender, EventArgs e)
private void TextBoxBase_MouseMove(object sender, MouseEventArgs e)
private void TextBoxBase_FontOrColorChanged(object sender, EventArgs e)
private void ScrollTimerTickHandler(object sender, EventArgs e)
internal void CaretMoved(object sender, EventArgs e)
internal bool Paste(IDataObject clip, Format format, bool obey_length)
internal Color ChangeBackColor(Color backColor)
internal bool IsInputCharInternal(char charCode)
internal void OnTextUpdate()
protected void OnTextChanged(EventArgs e)
public int GetLineFromCharIndex(int index)
protected void OnMouseUp(MouseEventArgs mevent)
}
public System.Windows.Forms.TextBoxRenderer : object {
public bool IsSupported
public void DrawTextBox(Graphics g, Rectangle bounds, TextBoxState state)
public void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, TextBoxState state)
public void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, Rectangle textBounds, TextBoxState state)
public void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, TextFormatFlags flags, TextBoxState state)
public void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, Rectangle textBounds, TextFormatFlags flags, TextBoxState state)
public bool get_IsSupported()
}
internal System.Windows.Forms.TextBoxTextRenderer : object {
private Size max_size
private bool use_textrenderer
private StringFormat sf_nonprinting
private StringFormat sf_printing
private Hashtable measure_cache
public void DrawText(Graphics g, string text, Font font, Color color, float x, float y, bool showNonPrint)
public SizeF MeasureText(Graphics g, string text, Font font)
}
public System.Windows.Forms.TextDataFormat : Enum {
public int value__
public TextDataFormat Text
public TextDataFormat UnicodeText
public TextDataFormat Rtf
public TextDataFormat Html
public TextDataFormat CommaSeparatedValue
}
internal System.Windows.Forms.TextEntryDialog : Form {
private Label label1
private Button okButton
private TextBox newNameTextBox
private PictureBox iconPictureBox
private Button cancelButton
private GroupBox groupBox1
public Image IconPictureBoxImage
public string FileName
public void set_IconPictureBoxImage(Image value)
public string get_FileName()
public void set_FileName(string value)
}
public System.Windows.Forms.TextFormatFlags : Enum {
public int value__
public TextFormatFlags Left
public TextFormatFlags Top
public TextFormatFlags Default
public TextFormatFlags GlyphOverhangPadding
public TextFormatFlags HorizontalCenter
public TextFormatFlags Right
public TextFormatFlags VerticalCenter
public TextFormatFlags Bottom
public TextFormatFlags WordBreak
public TextFormatFlags SingleLine
public TextFormatFlags ExpandTabs
public TextFormatFlags NoClipping
public TextFormatFlags ExternalLeading
public TextFormatFlags NoPrefix
public TextFormatFlags Internal
public TextFormatFlags TextBoxControl
public TextFormatFlags PathEllipsis
public TextFormatFlags EndEllipsis
public TextFormatFlags ModifyString
public TextFormatFlags RightToLeft
public TextFormatFlags WordEllipsis
public TextFormatFlags NoFullWidthCharacterBreak
public TextFormatFlags HidePrefix
public TextFormatFlags PrefixOnly
public TextFormatFlags PreserveGraphicsClipping
public TextFormatFlags PreserveGraphicsTranslateTransform
public TextFormatFlags NoPadding
public TextFormatFlags LeftAndRightPadding
}
public System.Windows.Forms.TextImageRelation : Enum {
public int value__
public TextImageRelation Overlay
public TextImageRelation ImageAboveText
public TextImageRelation TextAboveImage
public TextImageRelation ImageBeforeText
public TextImageRelation TextBeforeImage
}
public System.Windows.Forms.TextRenderer : object {
public void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor)
public void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor)
public void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor)
public void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, TextFormatFlags flags)
public void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor)
public void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, TextFormatFlags flags)
public void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor, TextFormatFlags flags)
public void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor, TextFormatFlags flags)
public Size MeasureText(string text, Font font)
public Size MeasureText(IDeviceContext dc, string text, Font font)
public Size MeasureText(string text, Font font, Size proposedSize)
public Size MeasureText(IDeviceContext dc, string text, Font font, Size proposedSize)
public Size MeasureText(string text, Font font, Size proposedSize, TextFormatFlags flags)
public Size MeasureText(IDeviceContext dc, string text, Font font, Size proposedSize, TextFormatFlags flags)
internal void DrawTextInternal(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor, TextFormatFlags flags, bool useDrawString)
internal Size MeasureTextInternal(IDeviceContext dc, string text, Font font, Size proposedSize, TextFormatFlags flags, bool useMeasureString)
internal void DrawTextInternal(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, bool useDrawString)
internal void DrawTextInternal(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, bool useDrawString)
internal void DrawTextInternal(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor, bool useDrawString)
internal void DrawTextInternal(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, TextFormatFlags flags, bool useDrawString)
internal void DrawTextInternal(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor, bool useDrawString)
internal void DrawTextInternal(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, TextFormatFlags flags, bool useDrawString)
internal Size MeasureTextInternal(string text, Font font, bool useMeasureString)
internal void DrawTextInternal(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor, TextFormatFlags flags, bool useDrawString)
internal Size MeasureTextInternal(IDeviceContext dc, string text, Font font, bool useMeasureString)
internal Size MeasureTextInternal(string text, Font font, Size proposedSize, bool useMeasureString)
internal Size MeasureTextInternal(IDeviceContext dc, string text, Font font, Size proposedSize, bool useMeasureString)
internal Size MeasureTextInternal(string text, Font font, Size proposedSize, TextFormatFlags flags, bool useMeasureString)
internal SizeF MeasureString(string text, Font font)
internal SizeF MeasureString(string text, Font font, int width)
internal SizeF MeasureString(string text, Font font, SizeF layoutArea)
internal SizeF MeasureString(string text, Font font, int width, StringFormat format)
internal SizeF MeasureString(string text, Font font, PointF origin, StringFormat stringFormat)
internal SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat)
internal SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat, Int32& charactersFitted, Int32& linesFilled)
internal Region[] MeasureCharacterRanges(string text, Font font, RectangleF layoutRect, StringFormat stringFormat)
internal SizeF GetDpi()
private StringFormat FlagsToStringFormat(TextFormatFlags flags)
private Rectangle PadRectangle(Rectangle r, TextFormatFlags flags)
private Rectangle PadDrawStringRectangle(Rectangle r, TextFormatFlags flags)
private int Win32DrawText(IntPtr hdc, string lpStr, int nCount, RECT& lpRect, int wFormat)
private int SetTextColor(IntPtr hdc, int crColor)
private IntPtr SelectObject(IntPtr hDC, IntPtr hObject)
private int SetBkColor(IntPtr hdc, int crColor)
private int SetBkMode(IntPtr hdc, int iBkMode)
private bool DeleteObject(IntPtr objectHandle)
private bool SelectClipRgn(IntPtr hdc, IntPtr hrgn)
}
internal System.Windows.Forms.Theme : object {
protected Array syscolors
private Font default_font
protected Color defaultWindowBackColor
protected Color defaultWindowForeColor
internal SystemResPool ResPool
private MethodInfo update
public int ManagedWindowSpacingAfterLastTitleButton
public Version Version
public Color ColorScrollBar
public Color ColorDesktop
public Color ColorActiveCaption
public Color ColorInactiveCaption
public Color ColorMenu
public Color ColorWindow
public Color ColorWindowFrame
public Color ColorMenuText
public Color ColorWindowText
public Color ColorActiveCaptionText
public Color ColorActiveBorder
public Color ColorInactiveBorder
public Color ColorAppWorkspace
public Color ColorHighlight
public Color ColorHighlightText
public Color ColorControl
public Color ColorControlDark
public Color ColorGrayText
public Color ColorControlText
public Color ColorInactiveCaptionText
public Color ColorControlLight
public Color ColorControlDarkDark
public Color ColorControlLightLight
public Color ColorInfoText
public Color ColorInfo
public Color ColorHotTrack
public Color DefaultControlBackColor
public Color DefaultControlForeColor
public Font DefaultFont
public Color DefaultWindowBackColor
public Color DefaultWindowForeColor
public ArrangeDirection ArrangeDirection
public ArrangeStartingPosition ArrangeStartingPosition
public int BorderMultiplierFactor
public Size BorderSizableSize
public Size Border3DSize
public Size BorderStaticSize
public Size BorderSize
public Size CaptionButtonSize
public int CaptionHeight
public Size DoubleClickSize
public int DoubleClickTime
public Size FixedFrameBorderSize
public Size FrameBorderSize
public int HorizontalFocusThickness
public int HorizontalScrollBarArrowWidth
public int HorizontalScrollBarHeight
public int HorizontalScrollBarThumbWidth
public Size IconSpacingSize
public bool MenuAccessKeysUnderlined
public Size MenuBarButtonSize
public Size MenuButtonSize
public Size MenuCheckSize
public Font MenuFont
public int MenuHeight
public int MouseWheelScrollLines
public bool RightAlignedMenus
public Size ToolWindowCaptionButtonSize
public int ToolWindowCaptionHeight
public int VerticalFocusThickness
public int VerticalScrollBarArrowHeight
public int VerticalScrollBarThumbHeight
public int VerticalScrollBarWidth
public Font WindowBorderFont
public bool DoubleBufferingSupported
public Size ButtonBaseDefaultSize
public int DataGridPreferredColumnWidth
public int DataGridMinimumColumnCheckBoxHeight
public int DataGridMinimumColumnCheckBoxWidth
public Color DataGridAlternatingBackColor
public Color DataGridBackColor
public Color DataGridBackgroundColor
public Color DataGridCaptionBackColor
public Color DataGridCaptionForeColor
public Color DataGridGridLineColor
public Color DataGridHeaderBackColor
public Color DataGridHeaderForeColor
public Color DataGridLinkColor
public Color DataGridLinkHoverColor
public Color DataGridParentRowsBackColor
public Color DataGridParentRowsForeColor
public Color DataGridSelectionBackColor
public Color DataGridSelectionForeColor
public bool DateTimePickerBorderHasHotElementStyle
public bool DateTimePickerDropDownButtonHasHotElementStyle
public Size GroupBoxDefaultSize
public Size HScrollBarDefaultSize
public bool ListViewHasHotHeaderStyle
public Size ListViewCheckBoxSize
public int ListViewColumnHeaderHeight
public int ListViewDefaultColumnWidth
public int ListViewVerticalSpacing
public int ListViewEmptyColumnWidth
public int ListViewHorizontalSpacing
public Size ListViewDefaultSize
public int ListViewGroupHeight
public int ListViewItemPaddingWidth
public int ListViewTileWidthFactor
public int ListViewTileHeightFactor
public Size PanelDefaultSize
public Size PictureBoxDefaultSize
public int PrintPreviewControlPadding
public Size ProgressBarDefaultSize
public Size RadioButtonDefaultSize
public int ScrollBarButtonSize
public bool ScrollBarHasHotElementStyles
public bool ScrollBarHasPressedThumbStyle
public bool ScrollBarHasHoverArrowButtonStyle
public int StatusBarSizeGripWidth
public int StatusBarHorzGapWidth
public Size StatusBarDefaultSize
public Size TabControlDefaultItemSize
public Point TabControlDefaultPadding
public int TabControlMinimumTabWidth
public Rectangle TabControlSelectedDelta
public int TabControlSelectedSpacing
public int TabPanelOffsetX
public int TabPanelOffsetY
public int TabControlColSpacing
public Point TabControlImagePadding
public int TabControlScrollerWidth
public int ToolBarGripWidth
public int ToolBarImageGripWidth
public int ToolBarSeparatorWidth
public int ToolBarDropDownWidth
public int ToolBarDropDownArrowWidth
public int ToolBarDropDownArrowHeight
public Size ToolBarDefaultSize
public bool ToolBarHasHotCheckedElementStyles
public bool ToolTipTransparentBackground
public Size TrackBarDefaultSize
public bool TrackBarHasHotThumbStyle
public bool UpDownBaseHasHotButtonStyle
public Size VScrollBarDefaultSize
public Size TreeViewDefaultSize
private void SetSystemColors(KnownColor kc, Color value)
public Version get_Version()
public Color get_ColorScrollBar()
public void set_ColorScrollBar(Color value)
public Color get_ColorDesktop()
public void set_ColorDesktop(Color value)
public Color get_ColorActiveCaption()
public void set_ColorActiveCaption(Color value)
public Color get_ColorInactiveCaption()
public void set_ColorInactiveCaption(Color value)
public Color get_ColorMenu()
public void set_ColorMenu(Color value)
public Color get_ColorWindow()
public void set_ColorWindow(Color value)
public Color get_ColorWindowFrame()
public void set_ColorWindowFrame(Color value)
public Color get_ColorMenuText()
public void set_ColorMenuText(Color value)
public Color get_ColorWindowText()
public void set_ColorWindowText(Color value)
public Color get_ColorActiveCaptionText()
public void set_ColorActiveCaptionText(Color value)
public Color get_ColorActiveBorder()
public void set_ColorActiveBorder(Color value)
public Color get_ColorInactiveBorder()
public void set_ColorInactiveBorder(Color value)
public Color get_ColorAppWorkspace()
public void set_ColorAppWorkspace(Color value)
public Color get_ColorHighlight()
public void set_ColorHighlight(Color value)
public Color get_ColorHighlightText()
public void set_ColorHighlightText(Color value)
public Color get_ColorControl()
public void set_ColorControl(Color value)
public Color get_ColorControlDark()
public void set_ColorControlDark(Color value)
public Color get_ColorGrayText()
public void set_ColorGrayText(Color value)
public Color get_ColorControlText()
public void set_ColorControlText(Color value)
public Color get_ColorInactiveCaptionText()
public void set_ColorInactiveCaptionText(Color value)
public Color get_ColorControlLight()
public void set_ColorControlLight(Color value)
public Color get_ColorControlDarkDark()
public void set_ColorControlDarkDark(Color value)
public Color get_ColorControlLightLight()
public void set_ColorControlLightLight(Color value)
public Color get_ColorInfoText()
public void set_ColorInfoText(Color value)
public Color get_ColorInfo()
public void set_ColorInfo(Color value)
public Color get_ColorHotTrack()
public void set_ColorHotTrack(Color value)
public Color get_DefaultControlBackColor()
public void set_DefaultControlBackColor(Color value)
public Color get_DefaultControlForeColor()
public void set_DefaultControlForeColor(Color value)
public Font get_DefaultFont()
public Color get_DefaultWindowBackColor()
public Color get_DefaultWindowForeColor()
public Color GetColor(GetSysColorIndex idx)
public void SetColor(GetSysColorIndex idx, Color color)
public ArrangeDirection get_ArrangeDirection()
public ArrangeStartingPosition get_ArrangeStartingPosition()
public int get_BorderMultiplierFactor()
public Size get_BorderSizableSize()
public Size get_Border3DSize()
public Size get_BorderStaticSize()
public Size get_BorderSize()
public Size get_CaptionButtonSize()
public int get_CaptionHeight()
public Size get_DoubleClickSize()
public int get_DoubleClickTime()
public Size get_FixedFrameBorderSize()
public Size get_FrameBorderSize()
public int get_HorizontalFocusThickness()
public int get_HorizontalScrollBarArrowWidth()
public int get_HorizontalScrollBarHeight()
public int get_HorizontalScrollBarThumbWidth()
public Size get_IconSpacingSize()
public bool get_MenuAccessKeysUnderlined()
public Size get_MenuBarButtonSize()
public Size get_MenuButtonSize()
public Size get_MenuCheckSize()
public Font get_MenuFont()
public int get_MenuHeight()
public int get_MouseWheelScrollLines()
public bool get_RightAlignedMenus()
public Size get_ToolWindowCaptionButtonSize()
public int get_ToolWindowCaptionHeight()
public int get_VerticalFocusThickness()
public int get_VerticalScrollBarArrowHeight()
public int get_VerticalScrollBarThumbHeight()
public int get_VerticalScrollBarWidth()
public Font get_WindowBorderFont()
public int Clamp(int value, int lower, int upper)
public string Places(UIIcon index)
private Image GetSizedResourceImage(string name, int width)
public Image Images(UIIcon index)
public Image Images(UIIcon index, int size)
public Image Images(string mimetype, string extension, int size)
public void ResetDefaults()
public bool get_DoubleBufferingSupported()
public void DrawOwnerDrawBackground(DrawItemEventArgs e)
public void DrawOwnerDrawFocusRectangle(DrawItemEventArgs e)
public Size CalculateButtonAutoSize(Button button)
public void CalculateButtonTextAndImageLayout(Graphics g, ButtonBase b, Rectangle& textRectangle, Rectangle& imageRectangle)
public void DrawButton(Graphics g, Button b, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawFlatButton(Graphics g, ButtonBase b, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawPopupButton(Graphics g, Button b, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawButtonBase(Graphics dc, Rectangle clip_area, ButtonBase button)
public Size get_ButtonBaseDefaultSize()
public Size CalculateCheckBoxAutoSize(CheckBox checkBox)
public void CalculateCheckBoxTextAndImageLayout(ButtonBase b, Point offset, Rectangle& glyphArea, Rectangle& textRectangle, Rectangle& imageRectangle)
public void DrawCheckBox(Graphics g, CheckBox cb, Rectangle glyphArea, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawCheckBox(Graphics dc, Rectangle clip_area, CheckBox checkbox)
public void DrawCheckedListBoxItem(CheckedListBox ctrl, DrawItemEventArgs e)
public void DrawComboBoxItem(ComboBox ctrl, DrawItemEventArgs e)
public void DrawFlatStyleComboButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void ComboBoxDrawNormalDropDownButton(ComboBox comboBox, Graphics g, Rectangle clippingArea, Rectangle area, ButtonState state)
public bool ComboBoxNormalDropDownButtonHasTransparentBackground(ComboBox comboBox, ButtonState state)
public bool ComboBoxDropDownButtonHasHotElementStyle(ComboBox comboBox)
public void ComboBoxDrawBackground(ComboBox comboBox, Graphics g, Rectangle clippingArea, FlatStyle style)
public bool CombBoxBackgroundHasHotElementStyle(ComboBox comboBox)
public Font GetLinkFont(Control control)
public int get_DataGridPreferredColumnWidth()
public int get_DataGridMinimumColumnCheckBoxHeight()
public int get_DataGridMinimumColumnCheckBoxWidth()
public Color get_DataGridAlternatingBackColor()
public Color get_DataGridBackColor()
public Color get_DataGridBackgroundColor()
public Color get_DataGridCaptionBackColor()
public Color get_DataGridCaptionForeColor()
public Color get_DataGridGridLineColor()
public Color get_DataGridHeaderBackColor()
public Color get_DataGridHeaderForeColor()
public Color get_DataGridLinkColor()
public Color get_DataGridLinkHoverColor()
public Color get_DataGridParentRowsBackColor()
public Color get_DataGridParentRowsForeColor()
public Color get_DataGridSelectionBackColor()
public Color get_DataGridSelectionForeColor()
public void DataGridPaint(PaintEventArgs pe, DataGrid grid)
public void DataGridPaintCaption(Graphics g, Rectangle clip, DataGrid grid)
public void DataGridPaintColumnHeaders(Graphics g, Rectangle clip, DataGrid grid)
public void DataGridPaintColumnHeader(Graphics g, Rectangle bounds, DataGrid grid, int col)
public void DataGridPaintRowContents(Graphics g, int row, Rectangle row_rect, bool is_newrow, Rectangle clip, DataGrid grid)
public void DataGridPaintRowHeader(Graphics g, Rectangle bounds, int row, DataGrid grid)
public void DataGridPaintRowHeaderArrow(Graphics g, Rectangle bounds, DataGrid grid)
public void DataGridPaintRowHeaderStar(Graphics g, Rectangle bounds, DataGrid grid)
public void DataGridPaintParentRows(Graphics g, Rectangle bounds, DataGrid grid)
public void DataGridPaintParentRow(Graphics g, Rectangle bounds, DataGridDataSource row, DataGrid grid)
public void DataGridPaintRows(Graphics g, Rectangle cells, Rectangle clip, DataGrid grid)
public void DataGridPaintRow(Graphics g, int row, Rectangle row_rect, bool is_newrow, Rectangle clip, DataGrid grid)
public void DataGridPaintRelationRow(Graphics g, int row, Rectangle row_rect, bool is_newrow, Rectangle clip, DataGrid grid)
public bool DataGridViewRowHeaderCellDrawBackground(DataGridViewRowHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewRowHeaderCellDrawSelectionBackground(DataGridViewRowHeaderCell cell)
public bool DataGridViewRowHeaderCellDrawBorder(DataGridViewRowHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewColumnHeaderCellDrawBackground(DataGridViewColumnHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewColumnHeaderCellDrawBorder(DataGridViewColumnHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewHeaderCellHasPressedStyle(DataGridView dataGridView)
public bool DataGridViewHeaderCellHasHotStyle(DataGridView dataGridView)
public void DrawDateTimePicker(Graphics dc, Rectangle clip_rectangle, DateTimePicker dtp)
public bool get_DateTimePickerBorderHasHotElementStyle()
public Rectangle DateTimePickerGetDropDownButtonArea(DateTimePicker dateTimePicker)
public Rectangle DateTimePickerGetDateArea(DateTimePicker dateTimePicker)
public bool get_DateTimePickerDropDownButtonHasHotElementStyle()
public void DrawGroupBox(Graphics dc, Rectangle clip_area, GroupBox box)
public Size get_GroupBoxDefaultSize()
public Size get_HScrollBarDefaultSize()
public void DrawListBoxItem(ListBox ctrl, DrawItemEventArgs e)
public void DrawListViewItems(Graphics dc, Rectangle clip_rectangle, ListView control)
public void DrawListViewHeader(Graphics dc, Rectangle clip_rectangle, ListView control)
public void DrawListViewHeaderDragDetails(Graphics dc, ListView control, ColumnHeader drag_column, int target_x)
public bool get_ListViewHasHotHeaderStyle()
public int ListViewGetHeaderHeight(ListView listView, Font font)
public Size get_ListViewCheckBoxSize()
public int get_ListViewColumnHeaderHeight()
public int get_ListViewDefaultColumnWidth()
public int get_ListViewVerticalSpacing()
public int get_ListViewEmptyColumnWidth()
public int get_ListViewHorizontalSpacing()
public Size get_ListViewDefaultSize()
public int get_ListViewGroupHeight()
public int get_ListViewItemPaddingWidth()
public int get_ListViewTileWidthFactor()
public int get_ListViewTileHeightFactor()
public void CalcItemSize(Graphics dc, MenuItem item, int y, int x, bool menuBar)
public void CalcPopupMenuSize(Graphics dc, Menu menu)
public int CalcMenuBarSize(Graphics dc, Menu menu, int width)
public void DrawMenuBar(Graphics dc, Menu menu, Rectangle rect)
public void DrawMenuItem(MenuItem item, DrawItemEventArgs e)
public void DrawPopupMenu(Graphics dc, Menu menu, Rectangle cliparea, Rectangle rect)
public void DrawMonthCalendar(Graphics dc, Rectangle clip_rectangle, MonthCalendar month_calendar)
public Size get_PanelDefaultSize()
public void DrawPictureBox(Graphics dc, Rectangle clip, PictureBox pb)
public Size get_PictureBoxDefaultSize()
public int get_PrintPreviewControlPadding()
public Size PrintPreviewControlGetPageSize(PrintPreviewControl preview)
public void PrintPreviewControlPaint(PaintEventArgs pe, PrintPreviewControl preview, Size page_image_size)
public void DrawProgressBar(Graphics dc, Rectangle clip_rectangle, ProgressBar progress_bar)
public Size get_ProgressBarDefaultSize()
public Size CalculateRadioButtonAutoSize(RadioButton rb)
public void CalculateRadioButtonTextAndImageLayout(ButtonBase b, Point offset, Rectangle& glyphArea, Rectangle& textRectangle, Rectangle& imageRectangle)
public void DrawRadioButton(Graphics g, RadioButton rb, Rectangle glyphArea, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawRadioButton(Graphics dc, Rectangle clip_rectangle, RadioButton radio_button)
public Size get_RadioButtonDefaultSize()
public void DrawScrollBar(Graphics dc, Rectangle clip_rectangle, ScrollBar bar)
public int get_ScrollBarButtonSize()
public bool get_ScrollBarHasHotElementStyles()
public bool get_ScrollBarHasPressedThumbStyle()
public bool get_ScrollBarHasHoverArrowButtonStyle()
public void DrawStatusBar(Graphics dc, Rectangle clip_rectangle, StatusBar sb)
public int get_StatusBarSizeGripWidth()
public int get_StatusBarHorzGapWidth()
public Size get_StatusBarDefaultSize()
public Size get_TabControlDefaultItemSize()
public Point get_TabControlDefaultPadding()
public int get_TabControlMinimumTabWidth()
public Rectangle get_TabControlSelectedDelta()
public int get_TabControlSelectedSpacing()
public int get_TabPanelOffsetX()
public int get_TabPanelOffsetY()
public int get_TabControlColSpacing()
public Point get_TabControlImagePadding()
public int get_TabControlScrollerWidth()
public Rectangle TabControlGetDisplayRectangle(TabControl tab)
public Rectangle TabControlGetPanelRect(TabControl tab)
public Size TabControlGetSpacing(TabControl tab)
public void DrawTabControl(Graphics dc, Rectangle area, TabControl tab)
public void TextBoxBaseFillBackground(TextBoxBase textBoxBase, Graphics g, Rectangle clippingArea)
public bool TextBoxBaseHandleWmNcPaint(TextBoxBase textBoxBase, Message& m)
public bool TextBoxBaseShouldPaintBackground(TextBoxBase textBoxBase)
public void DrawToolBar(Graphics dc, Rectangle clip_rectangle, ToolBar control)
public int get_ToolBarGripWidth()
public int get_ToolBarImageGripWidth()
public int get_ToolBarSeparatorWidth()
public int get_ToolBarDropDownWidth()
public int get_ToolBarDropDownArrowWidth()
public int get_ToolBarDropDownArrowHeight()
public Size get_ToolBarDefaultSize()
public bool ToolBarHasHotElementStyles(ToolBar toolBar)
public bool get_ToolBarHasHotCheckedElementStyles()
public void DrawToolTip(Graphics dc, Rectangle clip_rectangle, ToolTipWindow control)
public Size ToolTipSize(ToolTipWindow tt, string text)
public bool get_ToolTipTransparentBackground()
public void ShowBalloonWindow(IntPtr handle, int timeout, string title, string text, ToolTipIcon icon)
public void HideBalloonWindow(IntPtr handle)
public void DrawBalloonWindow(Graphics dc, Rectangle clip, BalloonWindow control)
public Rectangle BalloonWindowRect(BalloonWindow control)
public void DrawTrackBar(Graphics dc, Rectangle clip_rectangle, TrackBar tb)
public Size get_TrackBarDefaultSize()
public int TrackBarValueFromMousePosition(int x, int y, TrackBar tb)
public bool get_TrackBarHasHotThumbStyle()
public void UpDownBaseDrawButton(Graphics g, Rectangle bounds, bool top, PushButtonState state)
public bool get_UpDownBaseHasHotButtonStyle()
public Size get_VScrollBarDefaultSize()
public Size get_TreeViewDefaultSize()
public void TreeViewDrawNodePlusMinus(TreeView treeView, TreeNode node, Graphics dc, int x, int middle)
public void DrawManagedWindowDecorations(Graphics dc, Rectangle clip, InternalWindowManager wm)
public int ManagedWindowTitleBarHeight(InternalWindowManager wm)
public int ManagedWindowBorderWidth(InternalWindowManager wm)
public int ManagedWindowIconWidth(InternalWindowManager wm)
public Size ManagedWindowButtonSize(InternalWindowManager wm)
public void ManagedWindowSetButtonLocations(InternalWindowManager wm)
public Rectangle ManagedWindowGetTitleBarIconArea(InternalWindowManager wm)
public Size ManagedWindowGetMenuButtonSize(InternalWindowManager wm)
public bool ManagedWindowTitleButtonHasHotElementStyle(TitleButton button, Form form)
public void ManagedWindowDrawMenuButton(Graphics dc, TitleButton button, Rectangle clip, InternalWindowManager wm)
public void ManagedWindowOnSizeInitializedOrChanged(Form form)
public void CPDrawBorder(Graphics graphics, Rectangle bounds, Color leftColor, int leftWidth, ButtonBorderStyle leftStyle, Color topColor, int topWidth, ButtonBorderStyle topStyle, Color rightColor, int rightWidth, ButtonBorderStyle rightStyle, Color bottomColor, int bottomWidth, ButtonBorderStyle bottomStyle)
public void CPDrawBorder(Graphics graphics, RectangleF bounds, Color leftColor, int leftWidth, ButtonBorderStyle leftStyle, Color topColor, int topWidth, ButtonBorderStyle topStyle, Color rightColor, int rightWidth, ButtonBorderStyle rightStyle, Color bottomColor, int bottomWidth, ButtonBorderStyle bottomStyle)
public void CPDrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style, Border3DSide sides)
public void CPDrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style, Border3DSide sides, Color control_color)
public void CPDrawButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void CPDrawCaptionButton(Graphics graphics, Rectangle rectangle, CaptionButton button, ButtonState state)
public void CPDrawCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state)
public void CPDrawComboButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void CPDrawContainerGrabHandle(Graphics graphics, Rectangle bounds)
public void CPDrawFocusRectangle(Graphics graphics, Rectangle rectangle, Color foreColor, Color backColor)
public void CPDrawGrabHandle(Graphics graphics, Rectangle rectangle, bool primary, bool enabled)
public void CPDrawGrid(Graphics graphics, Rectangle area, Size pixelsBetweenDots, Color backColor)
public void CPDrawImageDisabled(Graphics graphics, Image image, int x, int y, Color background)
public void CPDrawLockedFrame(Graphics graphics, Rectangle rectangle, bool primary)
public void CPDrawMenuGlyph(Graphics graphics, Rectangle rectangle, MenuGlyph glyph, Color color, Color backColor)
public void CPDrawMixedCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state)
public void CPDrawRadioButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void CPDrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style)
public void CPDrawReversibleLine(Point start, Point end, Color backColor)
public void CPDrawScrollButton(Graphics graphics, Rectangle rectangle, ScrollButton button, ButtonState state)
public void CPDrawSelectionFrame(Graphics graphics, bool active, Rectangle outsideRect, Rectangle insideRect, Color backColor)
public void CPDrawSizeGrip(Graphics graphics, Color backColor, Rectangle bounds)
public void CPDrawStringDisabled(Graphics graphics, string s, Font font, Color color, RectangleF layoutRectangle, StringFormat format)
public void CPDrawStringDisabled(IDeviceContext dc, string s, Font font, Color color, Rectangle layoutRectangle, TextFormatFlags format)
public void CPDrawVisualStyleBorder(Graphics graphics, Rectangle bounds)
public void CPDrawBorderStyle(Graphics dc, Rectangle area, BorderStyle border_style)
}
internal System.Windows.Forms.ThemeEngine : object {
private Theme theme
public Theme Current
public Theme get_Current()
}
internal System.Windows.Forms.ThemeVisualStyles : ThemeWin32Classic {
private bool render_client_areas
private bool render_non_client_areas
private int DateTimePickerDropDownWidthOnWindowsVista
private int DateTimePickerDropDownHeightOnWindowsVista
private int WindowsVistaMajorVersion
private bool ScrollBarHasHoverArrowButtonStyleVisualStyles
private EdgeStyle TrackBarTickEdgeStyle
private EdgeEffects TrackBarTickEdgeEffects
private Control control
public bool RenderClientAreas
public bool DateTimePickerBorderHasHotElementStyle
public bool DateTimePickerDropDownButtonHasHotElementStyle
public bool ListViewHasHotHeaderStyle
public bool ScrollBarHasHotElementStyles
public bool ScrollBarHasPressedThumbStyle
public bool ScrollBarHasHoverArrowButtonStyle
private bool ScrollBarAreElementsDefined
public bool ToolBarHasHotCheckedElementStyles
public bool ToolTipTransparentBackground
public bool TrackBarHasHotThumbStyle
public bool UpDownBaseHasHotButtonStyle
public void ResetDefaults()
private void Update()
public bool get_RenderClientAreas()
public void DrawButtonBase(Graphics dc, Rectangle clip_area, ButtonBase button)
private PushButtonState GetPushButtonState(ButtonBase button)
public void DrawButtonBackground(Graphics g, Button button, Rectangle clipArea)
protected void CheckBox_DrawCheckBox(Graphics dc, CheckBox checkbox, ButtonState state, Rectangle checkbox_rectangle)
private CheckBoxState GetCheckBoxState(CheckBox checkBox)
private VisualStyleElement ComboBoxGetVisualStyleElement(ComboBox comboBox, ButtonState state)
public void ComboBoxDrawNormalDropDownButton(ComboBox comboBox, Graphics g, Rectangle clippingArea, Rectangle area, ButtonState state)
public bool ComboBoxNormalDropDownButtonHasTransparentBackground(ComboBox comboBox, ButtonState state)
public bool ComboBoxDropDownButtonHasHotElementStyle(ComboBox comboBox)
private bool ComboBoxShouldPaintBackground(ComboBox comboBox)
public void ComboBoxDrawBackground(ComboBox comboBox, Graphics g, Rectangle clippingArea, FlatStyle style)
public bool CombBoxBackgroundHasHotElementStyle(ComboBox comboBox)
public void CPDrawButton(Graphics dc, Rectangle rectangle, ButtonState state)
public void CPDrawCaptionButton(Graphics graphics, Rectangle rectangle, CaptionButton button, ButtonState state)
private VisualStyleElement GetCaptionButtonVisualStyleElement(CaptionButton button, ButtonState state)
public void CPDrawCheckBox(Graphics dc, Rectangle rectangle, ButtonState state)
public void CPDrawComboButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void CPDrawMixedCheckBox(Graphics dc, Rectangle rectangle, ButtonState state)
public void CPDrawRadioButton(Graphics dc, Rectangle rectangle, ButtonState state)
public void CPDrawScrollButton(Graphics dc, Rectangle area, ScrollButton type, ButtonState state)
private VisualStyleElement GetScrollButtonVisualStyleElement(ScrollButton type, ButtonState state)
private bool IsDisabled(ButtonState state)
private bool IsPressed(ButtonState state)
public bool DataGridViewRowHeaderCellDrawBackground(DataGridViewRowHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewRowHeaderCellDrawSelectionBackground(DataGridViewRowHeaderCell cell)
public bool DataGridViewRowHeaderCellDrawBorder(DataGridViewRowHeaderCell cell, Graphics g, Rectangle bounds)
private VisualStyleElement DataGridViewRowHeaderCellGetVisualStyleElement(DataGridViewRowHeaderCell cell)
public bool DataGridViewColumnHeaderCellDrawBackground(DataGridViewColumnHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewColumnHeaderCellDrawBorder(DataGridViewColumnHeaderCell cell, Graphics g, Rectangle bounds)
private VisualStyleElement DataGridViewColumnHeaderCellGetVisualStyleElement(DataGridViewColumnHeaderCell cell)
public bool DataGridViewHeaderCellHasPressedStyle(DataGridView dataGridView)
public bool DataGridViewHeaderCellHasHotStyle(DataGridView dataGridView)
protected void DateTimePickerDrawBorder(DateTimePicker dateTimePicker, Graphics g, Rectangle clippingArea)
public bool get_DateTimePickerBorderHasHotElementStyle()
protected void DateTimePickerDrawDropDownButton(DateTimePicker dateTimePicker, Graphics g, Rectangle clippingArea)
public Rectangle DateTimePickerGetDropDownButtonArea(DateTimePicker dateTimePicker)
public Rectangle DateTimePickerGetDateArea(DateTimePicker dateTimePicker)
public bool get_DateTimePickerDropDownButtonHasHotElementStyle()
protected void ListViewDrawColumnHeaderBackground(ListView listView, ColumnHeader columnHeader, Graphics g, Rectangle area, Rectangle clippingArea)
protected void ListViewDrawUnusedHeaderBackground(ListView listView, Graphics g, Rectangle area, Rectangle clippingArea)
public bool get_ListViewHasHotHeaderStyle()
public int ListViewGetHeaderHeight(ListView listView, Font font)
public void DrawGroupBox(Graphics dc, Rectangle area, GroupBox box)
private Rectangle ManagedWindowGetTitleBarRectangle(InternalWindowManager wm)
private Region ManagedWindowGetWindowRegion(Form form)
public void ManagedWindowOnSizeInitializedOrChanged(Form form)
protected Rectangle ManagedWindowDrawTitleBarAndBorders(Graphics dc, Rectangle clip, InternalWindowManager wm)
private FormWindowState ManagedWindowGetWindowState(InternalWindowManager wm)
private bool ManagedWindowIsDisabled(InternalWindowManager wm)
private bool ManagedWindowIsActive(InternalWindowManager wm)
private VisualStyleElement ManagedWindowGetTitleBarVisualStyleElement(InternalWindowManager wm)
private void ManagedWindowGetBorderVisualStyleElements(InternalWindowManager wm, VisualStyleElement& left, VisualStyleElement& right, VisualStyleElement& bottom)
public bool ManagedWindowTitleButtonHasHotElementStyle(TitleButton button, Form form)
private bool ManagedWindowIsMaximizedMdiChild(Form form)
private bool ManagedWindowTitleButtonIsDisabled(TitleButton button, InternalWindowManager wm)
private bool ManagedWindowTitleButtonIsPressed(TitleButton button)
private VisualStyleElement ManagedWindowGetTitleButtonVisualStyleElement(TitleButton button, Form form)
protected void ManagedWindowDrawTitleButton(Graphics dc, TitleButton button, Rectangle clip, Form form)
public Size ManagedWindowButtonSize(InternalWindowManager wm)
public void ManagedWindowDrawMenuButton(Graphics dc, TitleButton button, Rectangle clip, InternalWindowManager wm)
private VisualStyleElement ManagedWindowGetMenuButtonVisualStyleElement(TitleButton button, InternalWindowManager wm)
public void DrawProgressBar(Graphics dc, Rectangle clip_rect, ProgressBar ctrl)
protected void RadioButton_DrawButton(RadioButton radio_button, Graphics dc, ButtonState state, Rectangle radiobutton_rectangle)
private RadioButtonState GetRadioButtonState(RadioButton checkBox)
public void DrawScrollBar(Graphics dc, Rectangle clip, ScrollBar bar)
public bool get_ScrollBarHasHotElementStyles()
public bool get_ScrollBarHasPressedThumbStyle()
public bool get_ScrollBarHasHoverArrowButtonStyle()
private bool get_ScrollBarAreElementsDefined()
protected void DrawStatusBarBackground(Graphics dc, Rectangle clip, StatusBar sb)
protected void DrawStatusBarSizingGrip(Graphics dc, Rectangle clip, StatusBar sb, Rectangle area)
protected void DrawStatusBarPanelBackground(Graphics dc, Rectangle area, StatusBarPanel panel)
private bool TextBoxBaseShouldPaint(TextBoxBase textBoxBase)
private VisualStyleElement TextBoxBaseGetVisualStyleElement(TextBoxBase textBoxBase)
public void TextBoxBaseFillBackground(TextBoxBase textBoxBase, Graphics g, Rectangle clippingArea)
public bool TextBoxBaseHandleWmNcPaint(TextBoxBase textBoxBase, Message& m)
public bool TextBoxBaseShouldPaintBackground(TextBoxBase textBoxBase)
private bool ToolBarIsDisabled(ToolBarItem item)
private bool ToolBarIsPressed(ToolBarItem item)
private bool ToolBarIsChecked(ToolBarItem item)
private bool ToolBarIsHot(ToolBarItem item)
protected void DrawToolBarButtonBorder(Graphics dc, ToolBarItem item, bool is_flat)
private VisualStyleElement ToolBarGetDropDownButtonVisualStyleElement(ToolBarItem item)
private VisualStyleElement ToolBarGetButtonVisualStyleElement(ToolBarItem item)
protected void DrawToolBarSeparator(Graphics dc, ToolBarItem item)
private VisualStyleElement ToolBarGetSeparatorVisualStyleElement(ToolBarItem toolBarItem)
protected void DrawToolBarToggleButtonBackground(Graphics dc, ToolBarItem item)
protected void DrawToolBarDropDownArrow(Graphics dc, ToolBarItem item, bool is_flat)
private VisualStyleElement ToolBarGetDropDownArrowVisualStyleElement(ToolBarItem item)
public bool ToolBarHasHotElementStyles(ToolBar toolBar)
public bool get_ToolBarHasHotCheckedElementStyles()
protected void ToolTipDrawBackground(Graphics dc, Rectangle clip_rectangle, ToolTipWindow control)
public bool get_ToolTipTransparentBackground()
protected Size TrackBarGetThumbSize(TrackBar trackBar)
private VisualStyleElement TrackBarGetThumbVisualStyleElement(TrackBar trackBar)
private Size TrackBarRotateVerticalThumbSize(Size value)
protected void TrackBarDrawHorizontalTrack(Graphics dc, Rectangle thumb_area, Point channel_startpoint, Rectangle clippingArea)
protected void TrackBarDrawVerticalTrack(Graphics dc, Rectangle thumb_area, Point channel_startpoint, Rectangle clippingArea)
private bool TrackBarIsDisabled(TrackBar trackBar)
private bool TrackBarIsHot(TrackBar trackBar)
private bool TrackBarIsPressed(TrackBar trackBar)
private bool TrackBarIsFocused(TrackBar trackBar)
protected void TrackBarDrawHorizontalThumbBottom(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
private VisualStyleElement TrackBarGetHorizontalThumbBottomVisualStyleElement(TrackBar trackBar)
protected void TrackBarDrawHorizontalThumbTop(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
private VisualStyleElement TrackBarGetHorizontalThumbTopVisualStyleElement(TrackBar trackBar)
protected void TrackBarDrawHorizontalThumb(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
private VisualStyleElement TrackBarGetHorizontalThumbVisualStyleElement(TrackBar trackBar)
private Rectangle TrackBarRotateVerticalThumbSize(Rectangle value)
protected void TrackBarDrawVerticalThumbRight(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
private VisualStyleElement TrackBarGetVerticalThumbRightVisualStyleElement(TrackBar trackBar)
protected void TrackBarDrawVerticalThumbLeft(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
private VisualStyleElement TrackBarGetVerticalThumbLeftVisualStyleElement(TrackBar trackBar)
protected void TrackBarDrawVerticalThumb(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
private VisualStyleElement TrackBarGetVerticalThumbVisualStyleElement(TrackBar trackBar)
protected ITrackBarTickPainter TrackBarGetHorizontalTickPainter(Graphics g)
protected ITrackBarTickPainter TrackBarGetVerticalTickPainter(Graphics g)
public bool get_TrackBarHasHotThumbStyle()
public void TreeViewDrawNodePlusMinus(TreeView treeView, TreeNode node, Graphics dc, int x, int middle)
public void UpDownBaseDrawButton(Graphics g, Rectangle bounds, bool top, PushButtonState state)
public bool get_UpDownBaseHasHotButtonStyle()
private bool AreEqual(VisualStyleElement value1, VisualStyleElement value2)
private IDeviceContext GetMeasurementDeviceContext()
private void ReleaseMeasurementDeviceContext(IDeviceContext dc)
}
internal System.Windows.Forms.ThemeWin32Classic : Theme {
protected Color arrow_color
protected Color pen_ticks_color
protected StringFormat string_format_menu_text
protected StringFormat string_format_menu_shortcut
protected StringFormat string_format_menu_menubar_text
private ImageAttributes imagedisabled_attributes
private Font window_border_font
private int SEPARATOR_HEIGHT
private int SEPARATOR_MIN_WIDTH
private int SM_CXBORDER
private int SM_CYBORDER
private int MENU_TAB_SPACE
private int MENU_BAR_ITEMS_SPACE
private int CheckSize
public int ProgressBarChunkSpacing
private int ProgressBarDefaultHeight
public double ProgressBarMarqueeSpeedScaling
private Border3DSide all_sides
private BalloonWindow balloon_window
private int balloon_iconsize
private int balloon_bordersize
public int TrackBarVerticalTrackWidth
public int TrackBarHorizontalTrackHeight
public Version Version
public bool DoubleBufferingSupported
public int HorizontalScrollBarHeight
public int VerticalScrollBarWidth
public Font WindowBorderFont
public Size ButtonBaseDefaultSize
public int DataGridPreferredColumnWidth
public int DataGridMinimumColumnCheckBoxHeight
public int DataGridMinimumColumnCheckBoxWidth
public Color DataGridAlternatingBackColor
public Color DataGridBackColor
public Color DataGridBackgroundColor
public Color DataGridCaptionBackColor
public Color DataGridCaptionForeColor
public Color DataGridGridLineColor
public Color DataGridHeaderBackColor
public Color DataGridHeaderForeColor
public Color DataGridLinkColor
public Color DataGridLinkHoverColor
public Color DataGridParentRowsBackColor
public Color DataGridParentRowsForeColor
public Color DataGridSelectionBackColor
public Color DataGridSelectionForeColor
public bool DateTimePickerBorderHasHotElementStyle
public bool DateTimePickerDropDownButtonHasHotElementStyle
public Size GroupBoxDefaultSize
public Size HScrollBarDefaultSize
public bool ListViewHasHotHeaderStyle
public Size ListViewCheckBoxSize
public int ListViewColumnHeaderHeight
public int ListViewDefaultColumnWidth
public int ListViewVerticalSpacing
public int ListViewEmptyColumnWidth
public int ListViewHorizontalSpacing
public int ListViewItemPaddingWidth
public Size ListViewDefaultSize
public int ListViewGroupHeight
public int ListViewGroupLineWidth
public int ListViewTileWidthFactor
public int ListViewTileHeightFactor
public Size PanelDefaultSize
public Size PictureBoxDefaultSize
public int PrintPreviewControlPadding
public Size ProgressBarDefaultSize
public Size RadioButtonDefaultSize
public int ScrollBarButtonSize
public bool ScrollBarHasHotElementStyles
public bool ScrollBarHasPressedThumbStyle
public bool ScrollBarHasHoverArrowButtonStyle
public int StatusBarSizeGripWidth
public int StatusBarHorzGapWidth
public Size StatusBarDefaultSize
public Size TabControlDefaultItemSize
public Point TabControlDefaultPadding
public int TabControlMinimumTabWidth
public Rectangle TabControlSelectedDelta
public int TabControlSelectedSpacing
public int TabPanelOffsetX
public int TabPanelOffsetY
public int TabControlColSpacing
public Point TabControlImagePadding
public int TabControlScrollerWidth
public int ToolBarGripWidth
public int ToolBarImageGripWidth
public int ToolBarSeparatorWidth
public int ToolBarDropDownWidth
public int ToolBarDropDownArrowWidth
public int ToolBarDropDownArrowHeight
public Size ToolBarDefaultSize
public bool ToolBarHasHotCheckedElementStyles
public bool ToolTipTransparentBackground
public Size TrackBarDefaultSize
public bool TrackBarHasHotThumbStyle
public bool UpDownBaseHasHotButtonStyle
public Size VScrollBarDefaultSize
public Size TreeViewDefaultSize
public Version get_Version()
public void ResetDefaults()
public bool get_DoubleBufferingSupported()
public int get_HorizontalScrollBarHeight()
public int get_VerticalScrollBarWidth()
public Font get_WindowBorderFont()
protected Brush GetControlBackBrush(Color c)
protected Brush GetControlForeBrush(Color c)
public Font GetLinkFont(Control control)
public void DrawOwnerDrawBackground(DrawItemEventArgs e)
public void DrawOwnerDrawFocusRectangle(DrawItemEventArgs e)
public void DrawButton(Graphics g, Button b, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawButtonBackground(Graphics g, Button button, Rectangle clipArea)
public void DrawButtonFocus(Graphics g, Button button)
public void DrawButtonImage(Graphics g, ButtonBase button, Rectangle imageBounds)
public void DrawButtonText(Graphics g, ButtonBase button, Rectangle textBounds)
public void DrawFlatButton(Graphics g, ButtonBase b, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawFlatButtonBackground(Graphics g, ButtonBase button, Rectangle clipArea)
public void DrawFlatButtonFocus(Graphics g, ButtonBase button)
public void DrawFlatButtonImage(Graphics g, ButtonBase button, Rectangle imageBounds)
public void DrawFlatButtonText(Graphics g, ButtonBase button, Rectangle textBounds)
public void DrawPopupButton(Graphics g, Button b, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawPopupButtonBackground(Graphics g, Button button, Rectangle clipArea)
public void DrawPopupButtonFocus(Graphics g, Button button)
public void DrawPopupButtonImage(Graphics g, Button button, Rectangle imageBounds)
public void DrawPopupButtonText(Graphics g, Button button, Rectangle textBounds)
public Size CalculateButtonAutoSize(Button button)
public void CalculateButtonTextAndImageLayout(Graphics g, ButtonBase button, Rectangle& textRectangle, Rectangle& imageRectangle)
private void LayoutTextBeforeOrAfterImage(Rectangle totalArea, bool textFirst, Size textSize, Size imageSize, ContentAlignment textAlign, ContentAlignment imageAlign, Rectangle& textRect, Rectangle& imageRect)
private void LayoutTextAboveOrBelowImage(Rectangle totalArea, bool textFirst, Size textSize, Size imageSize, ContentAlignment textAlign, ContentAlignment imageAlign, bool displayEllipsis, Rectangle& textRect, Rectangle& imageRect)
private HorizontalAlignment GetHorizontalAlignment(ContentAlignment align)
private VerticalAlignment GetVerticalAlignment(ContentAlignment align)
internal Rectangle AlignInRectangle(Rectangle outer, Size inner, ContentAlignment align)
public void DrawButtonBase(Graphics dc, Rectangle clip_area, ButtonBase button)
protected bool ShouldPaintFocusRectagle(ButtonBase button)
protected void ButtonBase_DrawButton(ButtonBase button, Graphics dc)
private void Internal_DrawButton(Graphics dc, Rectangle rect, int state, CPColor cpcolor, bool is_ColorControl, Color backcolor)
protected void ButtonBase_DrawImage(ButtonBase button, Graphics dc)
protected void ButtonBase_DrawFocus(ButtonBase button, Graphics dc)
protected void ButtonBase_DrawText(ButtonBase button, Graphics dc)
public Size get_ButtonBaseDefaultSize()
public void DrawCheckBox(Graphics g, CheckBox cb, Rectangle glyphArea, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawCheckBoxGlyph(Graphics g, CheckBox cb, Rectangle glyphArea)
public void DrawCheckBoxFocus(Graphics g, CheckBox cb, Rectangle focusArea)
public void DrawCheckBoxImage(Graphics g, CheckBox cb, Rectangle imageBounds)
public void DrawCheckBoxText(Graphics g, CheckBox cb, Rectangle textBounds)
public void CalculateCheckBoxTextAndImageLayout(ButtonBase button, Point p, Rectangle& glyphArea, Rectangle& textRectangle, Rectangle& imageRectangle)
public Size CalculateCheckBoxAutoSize(CheckBox checkBox)
public void DrawCheckBox(Graphics dc, Rectangle clip_area, CheckBox checkbox)
protected void CheckBox_DrawCheckBox(Graphics dc, CheckBox checkbox, ButtonState state, Rectangle checkbox_rectangle)
protected void CheckBox_DrawText(CheckBox checkbox, Rectangle text_rectangle, Graphics dc, StringFormat text_format)
protected void CheckBox_DrawFocus(CheckBox checkbox, Graphics dc, Rectangle text_rectangle)
protected void DrawFlatStyleCheckBox(Graphics graphics, Rectangle rectangle, CheckBox checkbox)
private void DrawCheckBox_and_RadioButtonText(ButtonBase button_base, Rectangle text_rectangle, Graphics dc, StringFormat text_format, Appearance appearance, bool ischecked)
public void DrawCheckedListBoxItem(CheckedListBox ctrl, DrawItemEventArgs e)
public void DrawComboBoxItem(ComboBox ctrl, DrawItemEventArgs e)
public void DrawFlatStyleComboButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void ComboBoxDrawNormalDropDownButton(ComboBox comboBox, Graphics g, Rectangle clippingArea, Rectangle area, ButtonState state)
public bool ComboBoxNormalDropDownButtonHasTransparentBackground(ComboBox comboBox, ButtonState state)
public bool ComboBoxDropDownButtonHasHotElementStyle(ComboBox comboBox)
public void ComboBoxDrawBackground(ComboBox comboBox, Graphics g, Rectangle clippingArea, FlatStyle style)
public bool CombBoxBackgroundHasHotElementStyle(ComboBox comboBox)
public int get_DataGridPreferredColumnWidth()
public int get_DataGridMinimumColumnCheckBoxHeight()
public int get_DataGridMinimumColumnCheckBoxWidth()
public Color get_DataGridAlternatingBackColor()
public Color get_DataGridBackColor()
public Color get_DataGridBackgroundColor()
public Color get_DataGridCaptionBackColor()
public Color get_DataGridCaptionForeColor()
public Color get_DataGridGridLineColor()
public Color get_DataGridHeaderBackColor()
public Color get_DataGridHeaderForeColor()
public Color get_DataGridLinkColor()
public Color get_DataGridLinkHoverColor()
public Color get_DataGridParentRowsBackColor()
public Color get_DataGridParentRowsForeColor()
public Color get_DataGridSelectionBackColor()
public Color get_DataGridSelectionForeColor()
public void DataGridPaint(PaintEventArgs pe, DataGrid grid)
public void DataGridPaintCaption(Graphics g, Rectangle clip, DataGrid grid)
public void DataGridPaintColumnHeaders(Graphics g, Rectangle clip, DataGrid grid)
public void DataGridPaintColumnHeader(Graphics g, Rectangle bounds, DataGrid grid, int col)
public void DataGridPaintParentRows(Graphics g, Rectangle clip, DataGrid grid)
public void DataGridPaintParentRow(Graphics g, Rectangle bounds, DataGridDataSource row, DataGrid grid)
public void DataGridPaintRowHeaderArrow(Graphics g, Rectangle bounds, DataGrid grid)
public void DataGridPaintRowHeaderStar(Graphics g, Rectangle bounds, DataGrid grid)
public void DataGridPaintRowHeader(Graphics g, Rectangle bounds, int row, DataGrid grid)
public void DataGridPaintRows(Graphics g, Rectangle cells, Rectangle clip, DataGrid grid)
public void DataGridPaintRelationRow(Graphics g, int row, Rectangle row_rect, bool is_newrow, Rectangle clip, DataGrid grid)
public void DataGridPaintRowContents(Graphics g, int row, Rectangle row_rect, bool is_newrow, Rectangle clip, DataGrid grid)
public void DataGridPaintRow(Graphics g, int row, Rectangle row_rect, bool is_newrow, Rectangle clip, DataGrid grid)
public bool DataGridViewRowHeaderCellDrawBackground(DataGridViewRowHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewRowHeaderCellDrawSelectionBackground(DataGridViewRowHeaderCell cell)
public bool DataGridViewRowHeaderCellDrawBorder(DataGridViewRowHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewColumnHeaderCellDrawBackground(DataGridViewColumnHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewColumnHeaderCellDrawBorder(DataGridViewColumnHeaderCell cell, Graphics g, Rectangle bounds)
public bool DataGridViewHeaderCellHasPressedStyle(DataGridView dataGridView)
public bool DataGridViewHeaderCellHasHotStyle(DataGridView dataGridView)
protected void DateTimePickerDrawBorder(DateTimePicker dateTimePicker, Graphics g, Rectangle clippingArea)
protected void DateTimePickerDrawDropDownButton(DateTimePicker dateTimePicker, Graphics g, Rectangle clippingArea)
public void DrawDateTimePicker(Graphics dc, Rectangle clip_rectangle, DateTimePicker dtp)
public bool get_DateTimePickerBorderHasHotElementStyle()
public Rectangle DateTimePickerGetDropDownButtonArea(DateTimePicker dateTimePicker)
public Rectangle DateTimePickerGetDateArea(DateTimePicker dateTimePicker)
public bool get_DateTimePickerDropDownButtonHasHotElementStyle()
public void DrawGroupBox(Graphics dc, Rectangle area, GroupBox box)
public Size get_GroupBoxDefaultSize()
public Size get_HScrollBarDefaultSize()
public void DrawListBoxItem(ListBox ctrl, DrawItemEventArgs e)
public void DrawListViewItems(Graphics dc, Rectangle clip, ListView control)
public void DrawListViewHeader(Graphics dc, Rectangle clip, ListView control)
protected void ListViewDrawColumnHeaderBackground(ListView listView, ColumnHeader columnHeader, Graphics g, Rectangle area, Rectangle clippingArea)
protected void ListViewDrawUnusedHeaderBackground(ListView listView, Graphics g, Rectangle area, Rectangle clippingArea)
public void DrawListViewHeaderDragDetails(Graphics dc, ListView view, ColumnHeader col, int target_x)
protected bool DrawListViewColumnHeaderOwnerDraw(Graphics dc, ListView control, ColumnHeader column, Rectangle bounds)
protected bool DrawListViewItemOwnerDraw(Graphics dc, ListViewItem item, int index)
protected void DrawListViewItem(Graphics dc, ListView control, ListViewItem item)
protected void DrawListViewSubItems(Graphics dc, ListView control, ListViewItem item)
protected void DrawListViewSubItem(Graphics dc, ListView control, ListViewItem item, int index)
protected bool DrawListViewSubItemOwnerDraw(Graphics dc, ListViewItem item, ListViewItemStates state, int index)
protected void DrawListViewGroupHeader(Graphics dc, ListView control, ListViewGroup group)
public bool get_ListViewHasHotHeaderStyle()
public int ListViewGetHeaderHeight(ListView listView, Font font)
private int ListViewGetHeaderHeight(Font font)
public int ListViewGetHeaderHeight()
public Size get_ListViewCheckBoxSize()
public int get_ListViewColumnHeaderHeight()
public int get_ListViewDefaultColumnWidth()
public int get_ListViewVerticalSpacing()
public int get_ListViewEmptyColumnWidth()
public int get_ListViewHorizontalSpacing()
public int get_ListViewItemPaddingWidth()
public Size get_ListViewDefaultSize()
public int get_ListViewGroupHeight()
public int get_ListViewGroupLineWidth()
public int get_ListViewTileWidthFactor()
public int get_ListViewTileHeightFactor()
public void CalcItemSize(Graphics dc, MenuItem item, int y, int x, bool menuBar)
public int CalcMenuBarSize(Graphics dc, Menu menu, int width)
public void CalcPopupMenuSize(Graphics dc, Menu menu)
public void DrawMenuBar(Graphics dc, Menu menu, Rectangle rect)
protected Bitmap CreateGlyphBitmap(Size size, MenuGlyph glyph, Color color)
public void DrawMenuItem(MenuItem item, DrawItemEventArgs e)
public void DrawPopupMenu(Graphics dc, Menu menu, Rectangle cliparea, Rectangle rect)
public void DrawMonthCalendar(Graphics dc, Rectangle clip_rectangle, MonthCalendar mc)
private void DrawSingleMonth(Graphics dc, Rectangle clip_rectangle, Rectangle rectangle, MonthCalendar mc, int row, int col)
private void DrawMonthCalendarButton(Graphics dc, Rectangle rectangle, MonthCalendar mc, Size title_size, int x_offset, Size button_size, bool is_previous)
private void DrawMonthCalendarDate(Graphics dc, Rectangle rectangle, MonthCalendar mc, DateTime date, DateTime month, int row, int col)
private void DrawTodayCircle(Graphics dc, Rectangle rectangle)
public Size get_PanelDefaultSize()
public void DrawPictureBox(Graphics dc, Rectangle clip, PictureBox pb)
public Size get_PictureBoxDefaultSize()
public int get_PrintPreviewControlPadding()
public Size PrintPreviewControlGetPageSize(PrintPreviewControl preview)
public void PrintPreviewControlPaint(PaintEventArgs pe, PrintPreviewControl preview, Size page_size)
public void DrawProgressBar(Graphics dc, Rectangle clip_rect, ProgressBar ctrl)
public int ProgressBarGetChunkSize()
private int ProgressBarGetChunkSize(int progressBarClientAreaHeight)
public Size get_ProgressBarDefaultSize()
public void DrawRadioButton(Graphics dc, Rectangle clip_rectangle, RadioButton radio_button)
protected void RadioButton_DrawButton(RadioButton radio_button, Graphics dc, ButtonState state, Rectangle radiobutton_rectangle)
protected void RadioButton_DrawText(RadioButton radio_button, Rectangle text_rectangle, Graphics dc, StringFormat text_format)
protected void RadioButton_DrawFocus(RadioButton radio_button, Graphics dc, Rectangle text_rectangle)
protected void DrawFlatStyleRadioButton(Graphics graphics, Rectangle rectangle, RadioButton radio_button)
public Size get_RadioButtonDefaultSize()
public void DrawRadioButton(Graphics g, RadioButton rb, Rectangle glyphArea, Rectangle textBounds, Rectangle imageBounds, Rectangle clipRectangle)
public void DrawRadioButtonGlyph(Graphics g, RadioButton rb, Rectangle glyphArea)
public void DrawRadioButtonFocus(Graphics g, RadioButton rb, Rectangle focusArea)
public void DrawRadioButtonImage(Graphics g, RadioButton rb, Rectangle imageBounds)
public void DrawRadioButtonText(Graphics g, RadioButton rb, Rectangle textBounds)
public Size CalculateRadioButtonAutoSize(RadioButton rb)
public void CalculateRadioButtonTextAndImageLayout(ButtonBase b, Point offset, Rectangle& glyphArea, Rectangle& textRectangle, Rectangle& imageRectangle)
public void DrawScrollBar(Graphics dc, Rectangle clip, ScrollBar bar)
protected void ScrollBar_DrawThumb(ScrollBar bar, Rectangle thumb_pos, Rectangle clip, Graphics dc)
public int get_ScrollBarButtonSize()
public bool get_ScrollBarHasHotElementStyles()
public bool get_ScrollBarHasPressedThumbStyle()
public bool get_ScrollBarHasHoverArrowButtonStyle()
public void DrawStatusBar(Graphics real_dc, Rectangle clip, StatusBar sb)
protected void DrawStatusBarBackground(Graphics dc, Rectangle clip, StatusBar sb)
protected void DrawStatusBarSizingGrip(Graphics dc, Rectangle clip, StatusBar sb, Rectangle area)
protected void DrawStatusBarPanel(Graphics dc, Rectangle area, int index, Brush br_forecolor, StatusBarPanel panel)
protected void DrawStatusBarPanelBackground(Graphics dc, Rectangle area, StatusBarPanel panel)
public int get_StatusBarSizeGripWidth()
public int get_StatusBarHorzGapWidth()
public Size get_StatusBarDefaultSize()
public Size get_TabControlDefaultItemSize()
public Point get_TabControlDefaultPadding()
public int get_TabControlMinimumTabWidth()
public Rectangle get_TabControlSelectedDelta()
public int get_TabControlSelectedSpacing()
public int get_TabPanelOffsetX()
public int get_TabPanelOffsetY()
public int get_TabControlColSpacing()
public Point get_TabControlImagePadding()
public int get_TabControlScrollerWidth()
public Size TabControlGetSpacing(TabControl tab)
public void DrawTabControl(Graphics dc, Rectangle area, TabControl tab)
public Rectangle TabControlGetDisplayRectangle(TabControl tab)
public Rectangle TabControlGetPanelRect(TabControl tab)
public void TextBoxBaseFillBackground(TextBoxBase textBoxBase, Graphics g, Rectangle clippingArea)
public bool TextBoxBaseHandleWmNcPaint(TextBoxBase textBoxBase, Message& m)
public bool TextBoxBaseShouldPaintBackground(TextBoxBase textBoxBase)
public void DrawToolBar(Graphics dc, Rectangle clip_rectangle, ToolBar control)
protected void DrawToolBarButton(Graphics dc, ToolBar control, ToolBarItem item, StringFormat format)
protected void DrawToolBarButtonBorder(Graphics dc, ToolBarItem item, bool is_flat)
protected void DrawToolBarSeparator(Graphics dc, ToolBarItem item)
protected void DrawToolBarToggleButtonBackground(Graphics dc, ToolBarItem item)
protected void DrawToolBarDropDownArrow(Graphics dc, ToolBarItem item, bool is_flat)
protected void DrawToolBarButtonContents(Graphics dc, ToolBar control, ToolBarItem item, StringFormat format)
public int get_ToolBarGripWidth()
public int get_ToolBarImageGripWidth()
public int get_ToolBarSeparatorWidth()
public int get_ToolBarDropDownWidth()
public int get_ToolBarDropDownArrowWidth()
public int get_ToolBarDropDownArrowHeight()
public Size get_ToolBarDefaultSize()
public bool ToolBarHasHotElementStyles(ToolBar toolBar)
public bool get_ToolBarHasHotCheckedElementStyles()
public void DrawToolTip(Graphics dc, Rectangle clip_rectangle, ToolTipWindow control)
protected void ToolTipDrawBackground(Graphics dc, Rectangle clip_rectangle, ToolTipWindow control)
public Size ToolTipSize(ToolTipWindow tt, string text)
public bool get_ToolTipTransparentBackground()
public void ShowBalloonWindow(IntPtr handle, int timeout, string title, string text, ToolTipIcon icon)
public void HideBalloonWindow(IntPtr handle)
public void DrawBalloonWindow(Graphics dc, Rectangle clip, BalloonWindow control)
public Rectangle BalloonWindowRect(BalloonWindow control)
public int TrackBarValueFromMousePosition(int x, int y, TrackBar tb)
private void GetTrackBarDrawingInfo(TrackBar tb, Single& pixels_betweenticks, Rectangle& thumb_area, Rectangle& thumb_pos, Point& channel_startpoint, Point& bottomtick_startpoint, Point& toptick_startpoint)
protected Size TrackBarGetThumbSize(TrackBar trackBar)
public Size TrackBarGetThumbSize()
protected ITrackBarTickPainter GetTrackBarTickPainter(Graphics g)
private void DrawTrackBar_Vertical(Graphics dc, Rectangle clip_rectangle, TrackBar tb, Rectangle& thumb_pos, Rectangle& thumb_area, Brush br_thumb, float ticks, int value_pos, bool mouse_value)
protected void TrackBarDrawVerticalTrack(Graphics dc, Rectangle thumb_area, Point channel_startpoint, Rectangle clippingArea)
protected void TrackBarDrawVerticalThumbRight(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
protected void TrackBarDrawVerticalThumbLeft(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
protected void TrackBarDrawVerticalThumb(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
protected ITrackBarTickPainter TrackBarGetVerticalTickPainter(Graphics g)
private void DrawTrackBar_Horizontal(Graphics dc, Rectangle clip_rectangle, TrackBar tb, Rectangle& thumb_pos, Rectangle& thumb_area, Brush br_thumb, float ticks, int value_pos, bool mouse_value)
protected void TrackBarDrawHorizontalTrack(Graphics dc, Rectangle thumb_area, Point channel_startpoint, Rectangle clippingArea)
protected void TrackBarDrawHorizontalThumbBottom(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
protected void TrackBarDrawHorizontalThumbTop(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
protected void TrackBarDrawHorizontalThumb(Graphics dc, Rectangle thumb_pos, Brush br_thumb, Rectangle clippingArea, TrackBar trackBar)
protected ITrackBarTickPainter TrackBarGetHorizontalTickPainter(Graphics g)
public void DrawTrackBar(Graphics dc, Rectangle clip_rectangle, TrackBar tb)
public Size get_TrackBarDefaultSize()
public bool get_TrackBarHasHotThumbStyle()
public void UpDownBaseDrawButton(Graphics g, Rectangle bounds, bool top, PushButtonState state)
public bool get_UpDownBaseHasHotButtonStyle()
public Size get_VScrollBarDefaultSize()
public Size get_TreeViewDefaultSize()
public void TreeViewDrawNodePlusMinus(TreeView treeView, TreeNode node, Graphics dc, int x, int middle)
public int ManagedWindowTitleBarHeight(InternalWindowManager wm)
public int ManagedWindowBorderWidth(InternalWindowManager wm)
public int ManagedWindowIconWidth(InternalWindowManager wm)
public void ManagedWindowSetButtonLocations(InternalWindowManager wm)
protected Rectangle ManagedWindowDrawTitleBarAndBorders(Graphics dc, Rectangle clip, InternalWindowManager wm)
public void DrawManagedWindowDecorations(Graphics dc, Rectangle clip, InternalWindowManager wm)
public Size ManagedWindowButtonSize(InternalWindowManager wm)
private int DrawTitleButton(Graphics dc, TitleButton button, Rectangle clip, Form form)
protected void ManagedWindowDrawTitleButton(Graphics dc, TitleButton button, Rectangle clip, Form form)
public Rectangle ManagedWindowGetTitleBarIconArea(InternalWindowManager wm)
public Size ManagedWindowGetMenuButtonSize(InternalWindowManager wm)
public bool ManagedWindowTitleButtonHasHotElementStyle(TitleButton button, Form form)
public void ManagedWindowDrawMenuButton(Graphics dc, TitleButton button, Rectangle clip, InternalWindowManager wm)
public void ManagedWindowOnSizeInitializedOrChanged(Form form)
public void CPDrawBorder(Graphics graphics, Rectangle bounds, Color leftColor, int leftWidth, ButtonBorderStyle leftStyle, Color topColor, int topWidth, ButtonBorderStyle topStyle, Color rightColor, int rightWidth, ButtonBorderStyle rightStyle, Color bottomColor, int bottomWidth, ButtonBorderStyle bottomStyle)
public void CPDrawBorder(Graphics graphics, RectangleF bounds, Color leftColor, int leftWidth, ButtonBorderStyle leftStyle, Color topColor, int topWidth, ButtonBorderStyle topStyle, Color rightColor, int rightWidth, ButtonBorderStyle rightStyle, Color bottomColor, int bottomWidth, ButtonBorderStyle bottomStyle)
public void CPDrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style, Border3DSide sides)
public void CPDrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style, Border3DSide sides, Color control_color)
public void CPDrawButton(Graphics dc, Rectangle rectangle, ButtonState state)
private void CPDrawButtonInternal(Graphics dc, Rectangle rectangle, ButtonState state, Pen DarkPen, Pen NormalPen, Pen LightPen)
public void CPDrawCaptionButton(Graphics graphics, Rectangle rectangle, CaptionButton button, ButtonState state)
public void CPDrawCheckBox(Graphics dc, Rectangle rectangle, ButtonState state)
private void CPDrawCheckBoxInternal(Graphics dc, Rectangle rectangle, ButtonState state, bool mixed)
public void CPDrawComboButton(Graphics graphics, Rectangle rectangle, ButtonState state)
public void CPDrawContainerGrabHandle(Graphics graphics, Rectangle bounds)
public void DrawFlatStyleFocusRectangle(Graphics graphics, Rectangle rectangle, ButtonBase button, Color foreColor, Color backColor)
public void DrawInnerFocusRectangle(Graphics graphics, Rectangle rectangle, Color backColor)
public void CPDrawFocusRectangle(Graphics graphics, Rectangle rectangle, Color foreColor, Color backColor)
public void CPDrawGrabHandle(Graphics graphics, Rectangle rectangle, bool primary, bool enabled)
public void CPDrawGrid(Graphics graphics, Rectangle area, Size pixelsBetweenDots, Color backColor)
public void CPDrawImageDisabled(Graphics graphics, Image image, int x, int y, Color background)
public void CPDrawLockedFrame(Graphics graphics, Rectangle rectangle, bool primary)
public void CPDrawMenuGlyph(Graphics graphics, Rectangle rectangle, MenuGlyph glyph, Color color, Color backColor)
public void CPDrawMixedCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state)
public void CPDrawRadioButton(Graphics dc, Rectangle rectangle, ButtonState state)
public void CPDrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style)
public void CPDrawReversibleLine(Point start, Point end, Color backColor)
public void CPDrawScrollButton(Graphics dc, Rectangle area, ScrollButton type, ButtonState state)
public void CPDrawSelectionFrame(Graphics graphics, bool active, Rectangle outsideRect, Rectangle insideRect, Color backColor)
public void CPDrawSizeGrip(Graphics dc, Color backColor, Rectangle bounds)
private void DrawStringDisabled20(Graphics g, string s, Font font, Rectangle layoutRectangle, Color color, TextFormatFlags flags, bool useDrawString)
public void CPDrawStringDisabled(Graphics dc, string s, Font font, Color color, RectangleF layoutRectangle, StringFormat format)
public void CPDrawStringDisabled(IDeviceContext dc, string s, Font font, Color color, Rectangle layoutRectangle, TextFormatFlags format)
public void CPDrawVisualStyleBorder(Graphics graphics, Rectangle bounds)
private void DrawBorderInternal(Graphics graphics, int startX, int startY, int endX, int endY, int width, Color color, ButtonBorderStyle style, Border3DSide side)
private void DrawBorderInternal(Graphics graphics, float startX, float startY, float endX, float endY, int width, Color color, ButtonBorderStyle style, Border3DSide side)
private void DrawCaptionHelper(Graphics graphics, Color color, Pen pen, int lineWidth, int shift, Rectangle captionRect, CaptionButton button)
public void DrawScrollButtonPrimitive(Graphics dc, Rectangle area, ButtonState state)
public void CPDrawBorderStyle(Graphics dc, Rectangle area, BorderStyle border_style)
}
internal System.Windows.Forms.Theming.ButtonThemeState : Enum {
public int value__
public ButtonThemeState Normal
public ButtonThemeState Entered
public ButtonThemeState Pressed
public ButtonThemeState Disabled
public ButtonThemeState Default
}
internal System.Windows.Forms.Theming.Default.ButtonPainter : object {
protected SystemResPool ResPool
protected SystemResPool get_ResPool()
public void Draw(Graphics g, Rectangle bounds, ButtonThemeState state, Color backColor, Color foreColor)
public void DrawFlat(Graphics g, Rectangle bounds, ButtonThemeState state, Color backColor, Color foreColor, FlatButtonAppearance appearance)
public void DrawPopup(Graphics g, Rectangle bounds, ButtonThemeState state, Color backColor, Color foreColor)
private Color ChangeIntensity(Color baseColor, float percent)
}
internal System.Windows.Forms.Theming.Default.CheckBoxPainter : object {
protected SystemResPool ResPool
private Color ColorControl
protected SystemResPool get_ResPool()
public void PaintCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, ElementState state, FlatStyle style, CheckState checkState)
public void DrawNormalCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawHotCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawPressedCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawDisabledCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawFlatNormalCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawFlatHotCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawFlatPressedCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawFlatDisabledCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawPopupNormalCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawPopupHotCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawPopupPressedCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawPopupDisabledCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawCheck(Graphics g, Rectangle bounds, Color checkColor)
private int Clamp(int value, int lower, int upper)
private Color get_ColorControl()
}
internal System.Windows.Forms.Theming.Default.LabelPainter : object {
public Size DefaultSize
public void Draw(Graphics dc, Rectangle client_rectangle, Label label)
public Size get_DefaultSize()
}
internal System.Windows.Forms.Theming.Default.LinkLabelPainter : object {
private Color GetPieceColor(LinkLabel label, Piece piece, int i)
public void Draw(Graphics dc, Rectangle clip_rectangle, LinkLabel label)
}
internal System.Windows.Forms.Theming.Default.RadioButtonPainter : object {
protected SystemResPool ResPool
protected SystemResPool get_ResPool()
public void PaintRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, ElementState state, FlatStyle style, bool isChecked)
public void DrawNormalRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawHotRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawPressedRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawDisabledRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawFlatNormalRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawFlatHotRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawFlatPressedRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawFlatDisabledRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawPopupNormalRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawPopupHotRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawPopupPressedRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawPopupDisabledRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
protected void DrawFlatRadioGlyphDot(Graphics g, Rectangle bounds, Color dotColor)
}
internal System.Windows.Forms.Theming.Default.TabControlPainter : object {
private Size defaultItemSize
private Point defaultPadding
private int minimumTabWidth
private Rectangle selectedTabDelta
private Point tabPanelOffset
private int selectedSpacing
private Size rowSpacingNormal
private Size rowSpacingButtons
private Size rowSpacingFlatButtons
private int scrollerWidth
private Point focusRectSpacing
private Rectangle tabPageSpacing
private int colSpacing
private int flatButtonSpacing
private Point imagePadding
private StringFormat defaultFormatting
private Rectangle borderThickness
protected SystemResPool ResPool
public Size DefaultItemSize
public Point DefaultPadding
public int MinimumTabWidth
public Rectangle SelectedTabDelta
public Point TabPanelOffset
public int SelectedSpacing
public Size RowSpacingNormal
public Size RowSpacingButtons
public Size RowSpacingFlatButtons
public Point FocusRectSpacing
public int ColSpacing
public int FlatButtonSpacing
public Rectangle TabPageSpacing
public Point ImagePadding
public StringFormat DefaultFormatting
public Rectangle BorderThickness
public int ScrollerWidth
protected SystemResPool get_ResPool()
public Size get_DefaultItemSize()
public void set_DefaultItemSize(Size value)
public Point get_DefaultPadding()
public void set_DefaultPadding(Point value)
public int get_MinimumTabWidth()
public void set_MinimumTabWidth(int value)
public Rectangle get_SelectedTabDelta()
public void set_SelectedTabDelta(Rectangle value)
public Point get_TabPanelOffset()
public void set_TabPanelOffset(Point value)
public int get_SelectedSpacing()
public void set_SelectedSpacing(int value)
public Size get_RowSpacingNormal()
public void set_RowSpacingNormal(Size value)
public Size get_RowSpacingButtons()
public void set_RowSpacingButtons(Size value)
public Size get_RowSpacingFlatButtons()
public void set_RowSpacingFlatButtons(Size value)
public Point get_FocusRectSpacing()
public void set_FocusRectSpacing(Point value)
public int get_ColSpacing()
public void set_ColSpacing(int value)
public int get_FlatButtonSpacing()
public void set_FlatButtonSpacing(int value)
public Rectangle get_TabPageSpacing()
public void set_TabPageSpacing(Rectangle value)
public Point get_ImagePadding()
public void set_ImagePadding(Point value)
public StringFormat get_DefaultFormatting()
public void set_DefaultFormatting(StringFormat value)
public Rectangle get_BorderThickness()
public void set_BorderThickness(Rectangle value)
public int get_ScrollerWidth()
public void set_ScrollerWidth(int value)
public Size RowSpacing(TabControl tab)
public Rectangle GetLeftScrollRect(TabControl tab)
public Rectangle GetRightScrollRect(TabControl tab)
public Rectangle GetDisplayRectangle(TabControl tab)
public Rectangle GetTabPanelRect(TabControl tab)
public void Draw(Graphics dc, Rectangle area, TabControl tab)
protected void DrawScrollButton(Graphics dc, Rectangle bounds, Rectangle clippingArea, ScrollButton button, PushButtonState state)
private ButtonState GetButtonState(PushButtonState state)
protected void DrawBackground(Graphics dc, Rectangle area, TabControl tab)
protected int DrawTab(Graphics dc, TabPage page, TabControl tab, Rectangle bounds, bool is_selected)
public bool HasHotElementStyles(TabControl tabControl)
}
internal System.Windows.Forms.Theming.Default.ToolStripPainter : object {
protected SystemResPool ResPool
protected SystemResPool get_ResPool()
public void OnRenderButtonBackground(ToolStripItemRenderEventArgs e)
public void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e)
public void OnRenderGrip(ToolStripGripRenderEventArgs e)
public void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e)
public void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e)
public void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e)
public void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e)
public void OnRenderToolStripBackground(ToolStripRenderEventArgs e)
public void OnRenderToolStripBorder(ToolStripRenderEventArgs e)
}
internal System.Windows.Forms.Theming.ElementState : Enum {
public int value__
public ElementState Normal
public ElementState Hot
public ElementState Pressed
public ElementState Disabled
}
internal System.Windows.Forms.Theming.ThemeElements : object {
private ThemeElementsDefault theme
public ThemeElementsDefault CurrentTheme
public ButtonPainter ButtonPainter
public LabelPainter LabelPainter
public LinkLabelPainter LinkLabelPainter
public TabControlPainter TabControlPainter
public CheckBoxPainter CheckBoxPainter
public RadioButtonPainter RadioButtonPainter
public ToolStripPainter ToolStripPainter
public ThemeElementsDefault get_CurrentTheme()
private ThemeElementsDefault LoadTheme(string themeName)
public void DrawButton(Graphics g, Rectangle bounds, ButtonThemeState state, Color backColor, Color foreColor)
public void DrawFlatButton(Graphics g, Rectangle bounds, ButtonThemeState state, Color backColor, Color foreColor, FlatButtonAppearance appearance)
public void DrawPopupButton(Graphics g, Rectangle bounds, ButtonThemeState state, Color backColor, Color foreColor)
public ButtonPainter get_ButtonPainter()
public LabelPainter get_LabelPainter()
public LinkLabelPainter get_LinkLabelPainter()
public TabControlPainter get_TabControlPainter()
public CheckBoxPainter get_CheckBoxPainter()
public RadioButtonPainter get_RadioButtonPainter()
public ToolStripPainter get_ToolStripPainter()
}
internal System.Windows.Forms.Theming.ThemeElementsDefault : object {
protected TabControlPainter tabControlPainter
protected ButtonPainter buttonPainter
protected LabelPainter labelPainter
protected LinkLabelPainter linklabelPainter
protected ToolStripPainter toolStripPainter
protected CheckBoxPainter checkBoxPainter
protected RadioButtonPainter radioButtonPainter
public TabControlPainter TabControlPainter
public ButtonPainter ButtonPainter
public LabelPainter LabelPainter
public LinkLabelPainter LinkLabelPainter
public ToolStripPainter ToolStripPainter
public CheckBoxPainter CheckBoxPainter
public RadioButtonPainter RadioButtonPainter
public TabControlPainter get_TabControlPainter()
public ButtonPainter get_ButtonPainter()
public LabelPainter get_LabelPainter()
public LinkLabelPainter get_LinkLabelPainter()
public ToolStripPainter get_ToolStripPainter()
public CheckBoxPainter get_CheckBoxPainter()
public RadioButtonPainter get_RadioButtonPainter()
}
internal System.Windows.Forms.Theming.ThemeElementsVisualStyles : ThemeElementsDefault {
public CheckBoxPainter CheckBoxPainter
public RadioButtonPainter RadioButtonPainter
public ToolStripPainter ToolStripPainter
public TabControlPainter TabControlPainter
public CheckBoxPainter get_CheckBoxPainter()
public RadioButtonPainter get_RadioButtonPainter()
public ToolStripPainter get_ToolStripPainter()
public TabControlPainter get_TabControlPainter()
}
internal System.Windows.Forms.Theming.VisualStyles.CheckBoxPainter : CheckBoxPainter {
public void DrawNormalCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawHotCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawPressedCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
public void DrawDisabledCheckBox(Graphics g, Rectangle bounds, Color backColor, Color foreColor, CheckState state)
private void DrawCheckBox(Graphics g, Rectangle bounds, CheckBoxState state)
}
internal System.Windows.Forms.Theming.VisualStyles.RadioButtonPainter : RadioButtonPainter {
public void DrawNormalRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawHotRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawPressedRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
public void DrawDisabledRadioButton(Graphics g, Rectangle bounds, Color backColor, Color foreColor, bool isChecked)
private void DrawRadioButton(Graphics g, Rectangle bounds, RadioButtonState state)
}
internal System.Windows.Forms.Theming.VisualStyles.TabControlPainter : TabControlPainter {
private bool ShouldPaint(TabControl tabControl)
protected void DrawBackground(Graphics dc, Rectangle area, TabControl tab)
protected int DrawTab(Graphics dc, TabPage page, TabControl tab, Rectangle bounds, bool is_selected)
private VisualStyleElement GetVisualStyleElement(TabControl tabControl, TabPage tabPage, bool selected)
public bool HasHotElementStyles(TabControl tabControl)
protected void DrawScrollButton(Graphics dc, Rectangle bounds, Rectangle clippingArea, ScrollButton button, PushButtonState state)
}
internal System.Windows.Forms.Theming.VisualStyles.ToolStripPainter : ToolStripPainter {
private bool IsDisabled(ToolStripItem toolStripItem)
private bool IsPressed(ToolStripItem toolStripItem)
private bool IsChecked(ToolStripItem toolStripItem)
private bool IsHot(ToolStripItem toolStripItem)
public void OnRenderButtonBackground(ToolStripItemRenderEventArgs e)
public void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e)
public void OnRenderGrip(ToolStripGripRenderEventArgs e)
public void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e)
public void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e)
public void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e)
public void OnRenderToolStripBackground(ToolStripRenderEventArgs e)
}
public System.Windows.Forms.ThreadExceptionDialog : Form {
private Exception e
private bool details
private Button buttonIgnore
private Button buttonAbort
private Button buttonDetails
private Label labelException
private Label label1
private TextBox textBoxDetails
private Label helpText
public bool AutoSize
private void InitializeComponent()
public void .ctor(Exception t)
private void buttonDetails_Click(object sender, EventArgs e)
private void FillExceptionDetails()
private void RefreshDetails()
private void buttonAbort_Click(object sender, EventArgs e)
private void PaintHandler(object o, PaintEventArgs args)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
}
public System.Windows.Forms.TickStyle : Enum {
public int value__
public TickStyle None
public TickStyle TopLeft
public TickStyle BottomRight
public TickStyle Both
}
public System.Windows.Forms.Timer : Component {
private bool enabled
private int interval
private DateTime expires
internal Thread thread
internal bool Busy
internal IntPtr window
private object control_tag
internal int Minimum
private EventHandler Tick
public bool Enabled
public int Interval
public object Tag
internal DateTime Expires
public void .ctor(IContainer container)
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_Interval()
public void set_Interval(int value)
public object get_Tag()
public void set_Tag(object value)
public void Start()
public void Stop()
internal DateTime get_Expires()
public void add_Tick(EventHandler value)
public void remove_Tick(EventHandler value)
public string ToString()
internal void Update(DateTime update)
internal void FireTick()
protected void OnTick(EventArgs e)
protected void Dispose(bool disposing)
internal void TickHandler(object sender, EventArgs e)
}
internal System.Windows.Forms.TitleButton : object {
public Rectangle Rectangle
public ButtonState State
public CaptionButton Caption
private EventHandler Clicked
public bool Visible
private bool entered
public bool Entered
public void .ctor(CaptionButton caption, EventHandler clicked)
public void OnClick()
public bool get_Entered()
public void set_Entered(bool value)
}
internal System.Windows.Forms.TitleButtons : object {
public TitleButton MinimizeButton
public TitleButton MaximizeButton
public TitleButton RestoreButton
public TitleButton CloseButton
public TitleButton HelpButton
public TitleButton[] AllButtons
public bool Visible
private ToolTipWindow tooltip
private Timer tooltip_timer
private TitleButton tooltip_hovered_button
private TitleButton tooltip_hidden_button
private int tooltip_hide_interval
private int tooltip_show_interval
private Form form
public bool AnyPushedTitleButtons
public void .ctor(Form frm)
private void ClickHandler(object sender, EventArgs e)
public TitleButton FindButton(int x, int y)
public bool get_AnyPushedTitleButtons()
public IEnumerator GetEnumerator()
public void ToolTipStart(TitleButton button)
public void ToolTipTimerTick(object sender, EventArgs e)
public void ToolTipShow(bool only_refresh)
public void ToolTipHide(bool reset_hidden_button)
public bool MouseMove(int x, int y)
public void MouseDown(int x, int y)
public void MouseUp(int x, int y)
internal void MouseLeave(int x, int y)
}
internal System.Windows.Forms.TitleStyle : Enum {
public int value__
public TitleStyle None
public TitleStyle Normal
public TitleStyle Tool
}
public System.Windows.Forms.ToolBar : Control {
private bool size_specified
private ToolBarItem current_item
internal ToolBarItem[] items
internal Size default_size
private object ButtonClickEvent
private object ButtonDropDownEvent
private ToolBarAppearance appearance
private bool autosize
private ToolBarButtonCollection buttons
private Size button_size
private bool divider
private bool drop_down_arrows
private ImageList image_list
private ImeMode ime_mode
private bool show_tooltips
private ToolBarTextAlign text_alignment
private bool wrappable
private ToolBarButton button_for_focus
private int requested_size
private ToolTip tip_window
private Timer tipdown_timer
internal int text_padding
protected CreateParams CreateParams
protected ImeMode DefaultImeMode
protected Size DefaultSize
protected bool DoubleBuffered
public ToolBarAppearance Appearance
public bool AutoSize
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BorderStyle BorderStyle
public ToolBarButtonCollection Buttons
public Size ButtonSize
public bool Divider
public DockStyle Dock
public bool DropDownArrows
public Color ForeColor
public ImageList ImageList
public Size ImageSize
public ImeMode ImeMode
public RightToLeft RightToLeft
public bool ShowToolTips
public bool TabStop
public string Text
public ToolBarTextAlign TextAlign
public bool Wrappable
internal int CurrentItem
private Timer TipDownTimer
internal bool SizeSpecified
internal bool Vertical
private Size AdjustedButtonSize
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_ButtonClick(ToolBarButtonClickEventHandler value)
public void remove_ButtonClick(ToolBarButtonClickEventHandler value)
public void add_ButtonDropDown(ToolBarButtonClickEventHandler value)
public void remove_ButtonDropDown(ToolBarButtonClickEventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_RightToLeftChanged(EventHandler value)
public void remove_RightToLeftChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
protected CreateParams get_CreateParams()
protected ImeMode get_DefaultImeMode()
protected Size get_DefaultSize()
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public ToolBarAppearance get_Appearance()
public void set_Appearance(ToolBarAppearance value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public ToolBarButtonCollection get_Buttons()
public Size get_ButtonSize()
public void set_ButtonSize(Size value)
public bool get_Divider()
public void set_Divider(bool value)
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public bool get_DropDownArrows()
public void set_DropDownArrows(bool value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public ImageList get_ImageList()
public void set_ImageList(ImageList value)
public Size get_ImageSize()
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public bool get_ShowToolTips()
public void set_ShowToolTips(bool value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
public ToolBarTextAlign get_TextAlign()
public void set_TextAlign(ToolBarTextAlign value)
public bool get_Wrappable()
public void set_Wrappable(bool value)
public string ToString()
protected void CreateHandle()
protected void Dispose(bool disposing)
internal void UIAPerformClick(ToolBarButton button)
private void PerformButtonClick(ToolBarButtonClickEventArgs e)
protected void OnButtonClick(ToolBarButtonClickEventArgs e)
protected void OnButtonDropDown(ToolBarButtonClickEventArgs e)
internal void ShowDropDownMenu(ToolBarItem item)
protected void OnFontChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnResize(EventArgs e)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
protected void ScaleCore(float dx, float dy)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void WndProc(Message& m)
internal bool InternalPreProcessMessage(Message& msg)
internal int get_CurrentItem()
internal void set_CurrentItem(int value)
private void FocusChanged(object sender, EventArgs args)
private bool HandleKeyDown(Message& msg, Keys key_data)
private bool HandleKeyOnDropDown(Message& msg, Keys key_data)
private void HighlightButton(int offset)
private void ToolBar_BackgroundImageChanged(object sender, EventArgs args)
private void ToolBar_MouseDown(object sender, MouseEventArgs me)
private void ToolBar_MouseUp(object sender, MouseEventArgs me)
private ToolBarItem ItemAtPoint(Point pt)
private void PopDownTip(object o, EventArgs args)
private Timer get_TipDownTimer()
private void ToolBar_MouseHover(object sender, EventArgs e)
private void ToolBar_MouseLeave(object sender, EventArgs e)
private void ToolBar_MouseMove(object sender, MouseEventArgs me)
internal void OnPaintInternal(PaintEventArgs pevent)
internal void Redraw(bool recalculate)
internal void Redraw(bool recalculate, bool force)
internal bool get_SizeSpecified()
internal bool get_Vertical()
private Size CalcButtonSize()
private Size get_AdjustedButtonSize()
private bool LayoutToolBar()
}
public System.Windows.Forms.ToolBarAppearance : Enum {
public int value__
public ToolBarAppearance Normal
public ToolBarAppearance Flat
}
public System.Windows.Forms.ToolBarButton : Component {
private bool enabled
private int image_index
private ContextMenu menu
private ToolBar parent
private bool partial_push
private bool pushed
private ToolBarButtonStyle style
private object tag
private string text
private string tooltip
private bool visible
private string image_key
private string name
private bool uiaHasFocus
private object UIAGotFocusEvent
private object UIALostFocusEvent
private object UIATextChangedEvent
private object UIAEnabledChangedEvent
private object UIADropDownMenuChangedEvent
private object UIAStyleChangedEvent
internal Image Image
public Menu DropDownMenu
public bool Enabled
public int ImageIndex
public string ImageKey
public string Name
public ToolBar Parent
public bool PartialPush
public bool Pushed
public Rectangle Rectangle
public ToolBarButtonStyle Style
public object Tag
public string Text
public string ToolTipText
public bool Visible
internal bool UIAHasFocus
public void .ctor(string text)
internal Image get_Image()
public Menu get_DropDownMenu()
public void set_DropDownMenu(Menu value)
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_ImageIndex()
public void set_ImageIndex(int value)
public string get_ImageKey()
public void set_ImageKey(string value)
public string get_Name()
public void set_Name(string value)
public ToolBar get_Parent()
public bool get_PartialPush()
public void set_PartialPush(bool value)
public bool get_Pushed()
public void set_Pushed(bool value)
public Rectangle get_Rectangle()
public ToolBarButtonStyle get_Style()
public void set_Style(ToolBarButtonStyle value)
public object get_Tag()
public void set_Tag(object value)
public string get_Text()
public void set_Text(string value)
public string get_ToolTipText()
public void set_ToolTipText(string value)
public bool get_Visible()
public void set_Visible(bool value)
internal void SetParent(ToolBar parent)
internal void Invalidate()
internal bool get_UIAHasFocus()
internal void set_UIAHasFocus(bool value)
internal void add_UIAGotFocus(EventHandler value)
internal void remove_UIAGotFocus(EventHandler value)
internal void add_UIALostFocus(EventHandler value)
internal void remove_UIALostFocus(EventHandler value)
internal void add_UIATextChanged(EventHandler value)
internal void remove_UIATextChanged(EventHandler value)
internal void add_UIAEnabledChanged(EventHandler value)
internal void remove_UIAEnabledChanged(EventHandler value)
internal void add_UIADropDownMenuChanged(EventHandler value)
internal void remove_UIADropDownMenuChanged(EventHandler value)
internal void add_UIAStyleChanged(EventHandler value)
internal void remove_UIAStyleChanged(EventHandler value)
private void OnUIATextChanged(EventArgs e)
private void OnUIAEnabledChanged(EventArgs e)
private void OnUIADropDownMenuChanged(EventArgs e)
private void OnUIAStyleChanged(EventArgs e)
protected void Dispose(bool disposing)
public string ToString()
}
public System.Windows.Forms.ToolBarButtonClickEventArgs : EventArgs {
private ToolBarButton button
public ToolBarButton Button
public void .ctor(ToolBarButton button)
public ToolBarButton get_Button()
public void set_Button(ToolBarButton value)
}
public System.Windows.Forms.ToolBarButtonClickEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolBarButtonClickEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolBarButtonClickEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolBarButtonStyle : Enum {
public int value__
public ToolBarButtonStyle PushButton
public ToolBarButtonStyle ToggleButton
public ToolBarButtonStyle Separator
public ToolBarButtonStyle DropDownButton
}
internal System.Windows.Forms.ToolBarItem : Component {
private ToolBar toolbar
private ToolBarButton button
private Rectangle bounds
private Rectangle image_rect
private Rectangle text_rect
private bool dd_pressed
private bool inside
private bool hilight
private bool pressed
public ToolBarButton Button
public Rectangle Rectangle
public Point Location
public Rectangle ImageRectangle
public Rectangle TextRectangle
private Size TextSize
public bool Pressed
public bool DDPressed
public bool Inside
public bool Hilight
public void .ctor(ToolBarButton button)
public ToolBarButton get_Button()
public Rectangle get_Rectangle()
public void set_Rectangle(Rectangle value)
public Point get_Location()
public void set_Location(Point value)
public Rectangle get_ImageRectangle()
public Rectangle get_TextRectangle()
private Size get_TextSize()
public bool get_Pressed()
public void set_Pressed(bool value)
public bool get_DDPressed()
public void set_DDPressed(bool value)
public bool get_Inside()
public void set_Inside(bool value)
public bool get_Hilight()
public void set_Hilight(bool value)
public Size CalculateSize()
public bool Layout(bool vertical, int calculated_size)
public bool Layout(Size size)
public void Invalidate()
}
internal System.Windows.Forms.ToolBarStyles : Enum {
public int value__
public ToolBarStyles TBSTYLE_TOOLTIPS
public ToolBarStyles TBSTYLE_FLAT
public ToolBarStyles TBSTYLE_LIST
public ToolBarStyles TBSTYLE_TRANSPARENT
}
public System.Windows.Forms.ToolBarTextAlign : Enum {
public int value__
public ToolBarTextAlign Underneath
public ToolBarTextAlign Right
}
public System.Windows.Forms.ToolStrip : ScrollableControl {
private bool allow_item_reorder
private bool allow_merge
private Color back_color
private bool can_overflow
private ToolStrip currently_merged_with
private ToolStripDropDownDirection default_drop_down_direction
internal ToolStripItemCollection displayed_items
private Color fore_color
private Padding grip_margin
private ToolStripGripStyle grip_style
private List`1<ToolStripItem> hidden_merged_items
private ImageList image_list
private Size image_scaling_size
private bool is_currently_merged
private ToolStripItemCollection items
private bool keyboard_active
private LayoutEngine layout_engine
private LayoutSettings layout_settings
private ToolStripLayoutStyle layout_style
private Orientation orientation
private ToolStripOverflowButton overflow_button
private List`1<ToolStripItem> pre_merge_items
private ToolStripRenderer renderer
private ToolStripRenderMode render_mode
private ToolStripTextDirection text_direction
private Timer tooltip_timer
private ToolTip tooltip_window
private bool show_item_tool_tips
private bool stretch
private ToolStripItem mouse_currently_over
internal bool menu_selected
private ToolStripItem tooltip_currently_showing
private TipState tooltip_state
private int InitialToolTipDelay
private int ToolTipDelay
private object BeginDragEvent
private object EndDragEvent
private object ItemAddedEvent
private object ItemClickedEvent
private object ItemRemovedEvent
private object LayoutCompletedEvent
private object LayoutStyleChangedEvent
private object PaintGripEvent
private object RendererChangedEvent
public bool AllowDrop
public bool AllowItemReorder
public bool AllowMerge
public AnchorStyles Anchor
public bool AutoScroll
public Size AutoScrollMargin
public Size AutoScrollMinSize
public Point AutoScrollPosition
public bool AutoSize
public Color BackColor
public BindingContext BindingContext
public bool CanOverflow
public bool CausesValidation
public ControlCollection Controls
public Cursor Cursor
public ToolStripDropDownDirection DefaultDropDownDirection
public Rectangle DisplayRectangle
public DockStyle Dock
public Font Font
public Color ForeColor
public ToolStripGripDisplayStyle GripDisplayStyle
public Padding GripMargin
public Rectangle GripRectangle
public ToolStripGripStyle GripStyle
public bool HasChildren
public HScrollProperties HorizontalScroll
public ImageList ImageList
public Size ImageScalingSize
public bool IsCurrentlyDragging
public bool IsDropDown
public ToolStripItemCollection Items
public LayoutEngine LayoutEngine
public LayoutSettings LayoutSettings
public ToolStripLayoutStyle LayoutStyle
public Orientation Orientation
public ToolStripOverflowButton OverflowButton
public ToolStripRenderer Renderer
public ToolStripRenderMode RenderMode
public bool ShowItemToolTips
public bool Stretch
public bool TabStop
public ToolStripTextDirection TextDirection
public VScrollProperties VerticalScroll
protected DockStyle DefaultDock
protected Padding DefaultGripMargin
protected Padding DefaultMargin
protected Padding DefaultPadding
protected bool DefaultShowItemToolTips
protected Size DefaultSize
protected internal ToolStripItemCollection DisplayedItems
protected internal Size MaxItemSize
internal bool KeyboardActive
private Timer ToolTipTimer
private ToolTip ToolTipWindow
internal ToolStrip CurrentlyMergedWith
internal List`1<ToolStripItem> HiddenMergedItems
internal bool IsCurrentlyMerged
public void .ctor(ToolStripItem[] items)
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public bool get_AllowItemReorder()
public void set_AllowItemReorder(bool value)
public bool get_AllowMerge()
public void set_AllowMerge(bool value)
public AnchorStyles get_Anchor()
public void set_Anchor(AnchorStyles value)
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
public Size get_AutoScrollMargin()
public void set_AutoScrollMargin(Size value)
public Size get_AutoScrollMinSize()
public void set_AutoScrollMinSize(Size value)
public Point get_AutoScrollPosition()
public void set_AutoScrollPosition(Point value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public BindingContext get_BindingContext()
public void set_BindingContext(BindingContext value)
public bool get_CanOverflow()
public void set_CanOverflow(bool value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public ControlCollection get_Controls()
public Cursor get_Cursor()
public void set_Cursor(Cursor value)
public ToolStripDropDownDirection get_DefaultDropDownDirection()
public void set_DefaultDropDownDirection(ToolStripDropDownDirection value)
public Rectangle get_DisplayRectangle()
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public ToolStripGripDisplayStyle get_GripDisplayStyle()
public Padding get_GripMargin()
public void set_GripMargin(Padding value)
public Rectangle get_GripRectangle()
public ToolStripGripStyle get_GripStyle()
public void set_GripStyle(ToolStripGripStyle value)
public bool get_HasChildren()
public HScrollProperties get_HorizontalScroll()
public ImageList get_ImageList()
public void set_ImageList(ImageList value)
public Size get_ImageScalingSize()
public void set_ImageScalingSize(Size value)
public bool get_IsCurrentlyDragging()
public bool get_IsDropDown()
public ToolStripItemCollection get_Items()
public LayoutEngine get_LayoutEngine()
public LayoutSettings get_LayoutSettings()
public void set_LayoutSettings(LayoutSettings value)
public ToolStripLayoutStyle get_LayoutStyle()
public void set_LayoutStyle(ToolStripLayoutStyle value)
public Orientation get_Orientation()
public ToolStripOverflowButton get_OverflowButton()
public ToolStripRenderer get_Renderer()
public void set_Renderer(ToolStripRenderer value)
public ToolStripRenderMode get_RenderMode()
public void set_RenderMode(ToolStripRenderMode value)
public bool get_ShowItemToolTips()
public void set_ShowItemToolTips(bool value)
public bool get_Stretch()
public void set_Stretch(bool value)
public bool get_TabStop()
public void set_TabStop(bool value)
public ToolStripTextDirection get_TextDirection()
public void set_TextDirection(ToolStripTextDirection value)
public VScrollProperties get_VerticalScroll()
protected DockStyle get_DefaultDock()
protected Padding get_DefaultGripMargin()
protected Padding get_DefaultMargin()
protected Padding get_DefaultPadding()
protected bool get_DefaultShowItemToolTips()
protected Size get_DefaultSize()
protected internal ToolStripItemCollection get_DisplayedItems()
protected internal Size get_MaxItemSize()
public Control GetChildAtPoint(Point point)
public Control GetChildAtPoint(Point pt, GetChildAtPointSkip skipValue)
public ToolStripItem GetItemAt(Point point)
public ToolStripItem GetItemAt(int x, int y)
public ToolStripItem GetNextItem(ToolStripItem start, ArrowDirection direction)
public void ResetMinimumSize()
public void SetAutoScrollMargin(int x, int y)
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected ControlCollection CreateControlsInstance()
protected internal ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick)
protected LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle layoutStyle)
protected void Dispose(bool disposing)
protected void OnBeginDrag(EventArgs e)
protected void OnDockChanged(EventArgs e)
protected void OnEndDrag(EventArgs e)
protected bool IsInputChar(char charCode)
protected bool IsInputKey(Keys keyData)
protected void OnEnabledChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnInvalidated(InvalidateEventArgs e)
protected internal void OnItemAdded(ToolStripItemEventArgs e)
protected void OnItemClicked(ToolStripItemClickedEventArgs e)
protected internal void OnItemRemoved(ToolStripItemEventArgs e)
protected void OnLayout(LayoutEventArgs e)
protected void OnLayoutCompleted(EventArgs e)
protected void OnLayoutStyleChanged(EventArgs e)
protected void OnLeave(EventArgs e)
protected void OnLostFocus(EventArgs e)
protected void OnMouseCaptureChanged(EventArgs e)
protected void OnMouseDown(MouseEventArgs mea)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseMove(MouseEventArgs mea)
protected void OnMouseUp(MouseEventArgs mea)
protected void OnPaint(PaintEventArgs e)
protected void OnPaintBackground(PaintEventArgs e)
protected internal void OnPaintGrip(PaintEventArgs e)
protected void OnRendererChanged(EventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
protected void OnScroll(ScrollEventArgs se)
protected void OnTabStopChanged(EventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected bool ProcessCmdKey(Message& m, Keys keyData)
protected bool ProcessDialogKey(Keys keyData)
protected bool ProcessMnemonic(char charCode)
protected void RestoreFocus()
protected void Select(bool directed, bool forward)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void SetDisplayedItems()
protected internal void SetItemLocation(ToolStripItem item, Point location)
protected internal void SetItemParent(ToolStripItem item, ToolStrip parent)
protected void SetVisibleCore(bool visible)
protected void WndProc(Message& m)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_BeginDrag(EventHandler value)
public void remove_BeginDrag(EventHandler value)
public void add_CausesValidationChanged(EventHandler value)
public void remove_CausesValidationChanged(EventHandler value)
public void add_ControlAdded(ControlEventHandler value)
public void remove_ControlAdded(ControlEventHandler value)
public void add_ControlRemoved(ControlEventHandler value)
public void remove_ControlRemoved(ControlEventHandler value)
public void add_CursorChanged(EventHandler value)
public void remove_CursorChanged(EventHandler value)
public void add_EndDrag(EventHandler value)
public void remove_EndDrag(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_ItemAdded(ToolStripItemEventHandler value)
public void remove_ItemAdded(ToolStripItemEventHandler value)
public void add_ItemClicked(ToolStripItemClickedEventHandler value)
public void remove_ItemClicked(ToolStripItemClickedEventHandler value)
public void add_ItemRemoved(ToolStripItemEventHandler value)
public void remove_ItemRemoved(ToolStripItemEventHandler value)
public void add_LayoutCompleted(EventHandler value)
public void remove_LayoutCompleted(EventHandler value)
public void add_LayoutStyleChanged(EventHandler value)
public void remove_LayoutStyleChanged(EventHandler value)
public void add_PaintGrip(PaintEventHandler value)
public void remove_PaintGrip(PaintEventHandler value)
public void add_RendererChanged(EventHandler value)
public void remove_RendererChanged(EventHandler value)
internal bool get_KeyboardActive()
internal void set_KeyboardActive(bool value)
internal Rectangle CalculateConnectedArea()
internal void ChangeSelection(ToolStripItem nextItem)
internal void Dismiss()
internal void Dismiss(ToolStripDropDownCloseReason reason)
internal ToolStripItem GetCurrentlySelectedItem()
internal ToolStripItem GetCurrentlyFocusedItem()
internal Size GetPreferredSizeCore(Size proposedSize)
internal Size GetToolStripPreferredSize(Size proposedSize)
internal ToolStrip GetTopLevelToolStrip()
internal void HandleItemClick(ToolStripItem dismissingItem)
internal void NotifySelectedChanged(ToolStripItem tsi)
internal bool OnMenuKey()
internal bool ProcessArrowKey(Keys keyData)
internal ToolStripItem SelectNextToolStripItem(ToolStripItem start, bool forward)
private void MouseEnteredItem(ToolStripItem item)
private void CloseToolTip(ToolStripItem item)
private void MouseLeftItem(ToolStripItem item)
private Timer get_ToolTipTimer()
private ToolTip get_ToolTipWindow()
private void ShowToolTip()
private void ToolTipTimer_Tick(object o, EventArgs args)
internal ToolStrip get_CurrentlyMergedWith()
internal void set_CurrentlyMergedWith(ToolStrip value)
internal List`1<ToolStripItem> get_HiddenMergedItems()
internal bool get_IsCurrentlyMerged()
internal void set_IsCurrentlyMerged(bool value)
internal void BeginMerge()
internal void RevertMergeItem(ToolStripItem item)
}
public System.Windows.Forms.ToolStripArrowRenderEventArgs : EventArgs {
private Color arrow_color
private Rectangle arrow_rectangle
private ArrowDirection arrow_direction
private Graphics graphics
private ToolStripItem tool_strip_item
public Color ArrowColor
public Rectangle ArrowRectangle
public ArrowDirection Direction
public Graphics Graphics
public ToolStripItem Item
public void .ctor(Graphics g, ToolStripItem toolStripItem, Rectangle arrowRectangle, Color arrowColor, ArrowDirection arrowDirection)
public Color get_ArrowColor()
public void set_ArrowColor(Color value)
public Rectangle get_ArrowRectangle()
public void set_ArrowRectangle(Rectangle value)
public ArrowDirection get_Direction()
public void set_Direction(ArrowDirection value)
public Graphics get_Graphics()
public ToolStripItem get_Item()
}
public System.Windows.Forms.ToolStripArrowRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripArrowRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripArrowRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripButton : ToolStripItem {
private CheckState checked_state
private bool check_on_click
private object CheckedChangedEvent
private object CheckStateChangedEvent
private object UIACheckOnClickChangedEvent
public bool AutoToolTip
public bool CanSelect
public bool Checked
public bool CheckOnClick
public CheckState CheckState
protected bool DefaultAutoToolTip
public void .ctor(Image image)
public void .ctor(string text)
public void .ctor(string text, Image image)
public void .ctor(string text, Image image, EventHandler onClick)
public void .ctor(string text, Image image, EventHandler onClick, string name)
public bool get_AutoToolTip()
public void set_AutoToolTip(bool value)
public bool get_CanSelect()
public bool get_Checked()
public void set_Checked(bool value)
public bool get_CheckOnClick()
public void set_CheckOnClick(bool value)
public CheckState get_CheckState()
public void set_CheckState(CheckState value)
protected bool get_DefaultAutoToolTip()
public Size GetPreferredSize(Size constrainingSize)
protected AccessibleObject CreateAccessibilityInstance()
protected void OnCheckedChanged(EventArgs e)
protected void OnCheckStateChanged(EventArgs e)
protected void OnClick(EventArgs e)
protected void OnPaint(PaintEventArgs e)
public void add_CheckedChanged(EventHandler value)
public void remove_CheckedChanged(EventHandler value)
public void add_CheckStateChanged(EventHandler value)
public void remove_CheckStateChanged(EventHandler value)
internal void add_UIACheckOnClickChanged(EventHandler value)
internal void remove_UIACheckOnClickChanged(EventHandler value)
internal void OnUIACheckOnClickChangedEvent(EventArgs args)
}
public System.Windows.Forms.ToolStripComboBox : ToolStripControlHost {
private object DropDownEvent
private object DropDownClosedEvent
private object DropDownStyleChangedEvent
private object SelectedIndexChangedEvent
private object TextUpdateEvent
public AutoCompleteStringCollection AutoCompleteCustomSource
public AutoCompleteMode AutoCompleteMode
public AutoCompleteSource AutoCompleteSource
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public ComboBox ComboBox
public int DropDownHeight
public ComboBoxStyle DropDownStyle
public int DropDownWidth
public bool DroppedDown
public FlatStyle FlatStyle
public bool IntegralHeight
public ObjectCollection Items
public int MaxDropDownItems
public int MaxLength
public int SelectedIndex
public object SelectedItem
public string SelectedText
public int SelectionLength
public int SelectionStart
public bool Sorted
protected internal Padding DefaultMargin
protected Size DefaultSize
public void .ctor(Control c)
public void .ctor(string name)
public AutoCompleteStringCollection get_AutoCompleteCustomSource()
public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value)
public AutoCompleteMode get_AutoCompleteMode()
public void set_AutoCompleteMode(AutoCompleteMode value)
public AutoCompleteSource get_AutoCompleteSource()
public void set_AutoCompleteSource(AutoCompleteSource value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public ComboBox get_ComboBox()
public int get_DropDownHeight()
public void set_DropDownHeight(int value)
public ComboBoxStyle get_DropDownStyle()
public void set_DropDownStyle(ComboBoxStyle value)
public int get_DropDownWidth()
public void set_DropDownWidth(int value)
public bool get_DroppedDown()
public void set_DroppedDown(bool value)
public FlatStyle get_FlatStyle()
public void set_FlatStyle(FlatStyle value)
public bool get_IntegralHeight()
public void set_IntegralHeight(bool value)
public ObjectCollection get_Items()
public int get_MaxDropDownItems()
public void set_MaxDropDownItems(int value)
public int get_MaxLength()
public void set_MaxLength(int value)
public int get_SelectedIndex()
public void set_SelectedIndex(int value)
public object get_SelectedItem()
public void set_SelectedItem(object value)
public string get_SelectedText()
public void set_SelectedText(string value)
public int get_SelectionLength()
public void set_SelectionLength(int value)
public int get_SelectionStart()
public void set_SelectionStart(int value)
public bool get_Sorted()
public void set_Sorted(bool value)
protected internal Padding get_DefaultMargin()
protected Size get_DefaultSize()
public void BeginUpdate()
public void EndUpdate()
public int FindString(string s)
public int FindString(string s, int startIndex)
public int FindStringExact(string s)
public int FindStringExact(string s, int startIndex)
public int GetItemHeight(int index)
public Size GetPreferredSize(Size constrainingSize)
public void Select(int start, int length)
public void SelectAll()
public string ToString()
protected void OnDropDown(EventArgs e)
protected void OnDropDownClosed(EventArgs e)
protected void OnDropDownStyleChanged(EventArgs e)
protected void OnSelectedIndexChanged(EventArgs e)
protected void OnSelectionChangeCommitted(EventArgs e)
protected void OnSubscribeControlEvents(Control control)
protected void OnTextUpdate(EventArgs e)
protected void OnUnsubscribeControlEvents(Control control)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_DropDown(EventHandler value)
public void remove_DropDown(EventHandler value)
public void add_DropDownClosed(EventHandler value)
public void remove_DropDownClosed(EventHandler value)
public void add_DropDownStyleChanged(EventHandler value)
public void remove_DropDownStyleChanged(EventHandler value)
public void add_SelectedIndexChanged(EventHandler value)
public void remove_SelectedIndexChanged(EventHandler value)
public void add_TextUpdate(EventHandler value)
public void remove_TextUpdate(EventHandler value)
private void HandleDropDown(object sender, EventArgs e)
private void HandleDropDownClosed(object sender, EventArgs e)
private void HandleDropDownStyleChanged(object sender, EventArgs e)
private void HandleSelectedIndexChanged(object sender, EventArgs e)
private void HandleTextChanged(object sender, EventArgs e)
private void HandleTextUpdate(object sender, EventArgs e)
}
public System.Windows.Forms.ToolStripContainer : ContainerControl {
private ToolStripPanel bottom_panel
private ToolStripContentPanel content_panel
private ToolStripPanel left_panel
private ToolStripPanel right_panel
private ToolStripPanel top_panel
public bool AutoScroll
public Size AutoScrollMargin
public Size AutoScrollMinSize
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public ToolStripPanel BottomToolStripPanel
public bool BottomToolStripPanelVisible
public bool CausesValidation
public ToolStripContentPanel ContentPanel
public ContextMenuStrip ContextMenuStrip
public ControlCollection Controls
public Cursor Cursor
public Color ForeColor
public ToolStripPanel LeftToolStripPanel
public bool LeftToolStripPanelVisible
public ToolStripPanel RightToolStripPanel
public bool RightToolStripPanelVisible
public ToolStripPanel TopToolStripPanel
public bool TopToolStripPanelVisible
protected Size DefaultSize
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
public Size get_AutoScrollMargin()
public void set_AutoScrollMargin(Size value)
public Size get_AutoScrollMinSize()
public void set_AutoScrollMinSize(Size value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public ToolStripPanel get_BottomToolStripPanel()
public bool get_BottomToolStripPanelVisible()
public void set_BottomToolStripPanelVisible(bool value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public ToolStripContentPanel get_ContentPanel()
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public ControlCollection get_Controls()
public Cursor get_Cursor()
public void set_Cursor(Cursor value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public ToolStripPanel get_LeftToolStripPanel()
public bool get_LeftToolStripPanelVisible()
public void set_LeftToolStripPanelVisible(bool value)
public ToolStripPanel get_RightToolStripPanel()
public bool get_RightToolStripPanelVisible()
public void set_RightToolStripPanelVisible(bool value)
public ToolStripPanel get_TopToolStripPanel()
public bool get_TopToolStripPanelVisible()
public void set_TopToolStripPanelVisible(bool value)
protected Size get_DefaultSize()
protected ControlCollection CreateControlsInstance()
protected void OnRightToLeftChanged(EventArgs e)
protected void OnSizeChanged(EventArgs e)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_CausesValidationChanged(EventHandler value)
public void remove_CausesValidationChanged(EventHandler value)
public void add_ContextMenuStripChanged(EventHandler value)
public void remove_ContextMenuStripChanged(EventHandler value)
public void add_CursorChanged(EventHandler value)
public void remove_CursorChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
}
public System.Windows.Forms.ToolStripContentPanel : Panel {
private ToolStripRenderMode render_mode
private ToolStripRenderer renderer
private object LoadEvent
private object RendererChangedEvent
public AnchorStyles Anchor
public bool AutoScroll
public Size AutoScrollMargin
public Size AutoScrollMinSize
public bool AutoSize
public AutoSizeMode AutoSizeMode
public Color BackColor
public bool CausesValidation
public DockStyle Dock
public Point Location
public Size MaximumSize
public Size MinimumSize
public string Name
public ToolStripRenderer Renderer
public ToolStripRenderMode RenderMode
public int TabIndex
public bool TabStop
public AnchorStyles get_Anchor()
public void set_Anchor(AnchorStyles value)
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
public Size get_AutoScrollMargin()
public void set_AutoScrollMargin(Size value)
public Size get_AutoScrollMinSize()
public void set_AutoScrollMinSize(Size value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public AutoSizeMode get_AutoSizeMode()
public void set_AutoSizeMode(AutoSizeMode value)
public Color get_BackColor()
public void set_BackColor(Color value)
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public Point get_Location()
public void set_Location(Point value)
public Size get_MaximumSize()
public void set_MaximumSize(Size value)
public Size get_MinimumSize()
public void set_MinimumSize(Size value)
public string get_Name()
public void set_Name(string value)
public ToolStripRenderer get_Renderer()
public void set_Renderer(ToolStripRenderer value)
public ToolStripRenderMode get_RenderMode()
public void set_RenderMode(ToolStripRenderMode value)
public int get_TabIndex()
public void set_TabIndex(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
protected void OnHandleCreated(EventArgs e)
protected void OnLoad(EventArgs e)
protected void OnPaintBackground(PaintEventArgs e)
protected void OnRendererChanged(EventArgs e)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_CausesValidationChanged(EventHandler value)
public void remove_CausesValidationChanged(EventHandler value)
public void add_DockChanged(EventHandler value)
public void remove_DockChanged(EventHandler value)
public void add_Load(EventHandler value)
public void remove_Load(EventHandler value)
public void add_LocationChanged(EventHandler value)
public void remove_LocationChanged(EventHandler value)
public void add_RendererChanged(EventHandler value)
public void remove_RendererChanged(EventHandler value)
public void add_TabIndexChanged(EventHandler value)
public void remove_TabIndexChanged(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
}
public System.Windows.Forms.ToolStripContentPanelRenderEventArgs : EventArgs {
private Graphics graphics
private bool handled
private ToolStripContentPanel tool_strip_content_panel
public Graphics Graphics
public bool Handled
public ToolStripContentPanel ToolStripContentPanel
public void .ctor(Graphics g, ToolStripContentPanel contentPanel)
public Graphics get_Graphics()
public bool get_Handled()
public void set_Handled(bool value)
public ToolStripContentPanel get_ToolStripContentPanel()
}
public System.Windows.Forms.ToolStripContentPanelRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripContentPanelRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripContentPanelRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripControlHost : ToolStripItem {
private Control control
private ContentAlignment control_align
private bool double_click_enabled
private object EnterEvent
private object GotFocusEvent
private object KeyDownEvent
private object KeyPressEvent
private object KeyUpEvent
private object LeaveEvent
private object LostFocusEvent
private object ValidatedEvent
private object ValidatingEvent
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public bool CanSelect
public bool CausesValidation
public Control Control
public ContentAlignment ControlAlign
public ToolStripItemDisplayStyle DisplayStyle
public bool DoubleClickEnabled
public bool Enabled
public bool Focused
public Font Font
public Color ForeColor
public Image Image
public ContentAlignment ImageAlign
public ToolStripItemImageScaling ImageScaling
public Color ImageTransparentColor
public RightToLeft RightToLeft
public bool RightToLeftAutoMirrorImage
public bool Selected
public ISite Site
public Size Size
public string Text
public ContentAlignment TextAlign
public ToolStripTextDirection TextDirection
public TextImageRelation TextImageRelation
protected Size DefaultSize
internal ToolStripTextDirection DefaultTextDirection
internal bool InternalVisible
public void .ctor(Control c)
public void .ctor(Control c, string name)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public bool get_CanSelect()
public bool get_CausesValidation()
public void set_CausesValidation(bool value)
public Control get_Control()
public ContentAlignment get_ControlAlign()
public void set_ControlAlign(ContentAlignment value)
public ToolStripItemDisplayStyle get_DisplayStyle()
public void set_DisplayStyle(ToolStripItemDisplayStyle value)
public bool get_DoubleClickEnabled()
public void set_DoubleClickEnabled(bool value)
public bool get_Enabled()
public void set_Enabled(bool value)
public bool get_Focused()
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public Image get_Image()
public void set_Image(Image value)
public ContentAlignment get_ImageAlign()
public void set_ImageAlign(ContentAlignment value)
public ToolStripItemImageScaling get_ImageScaling()
public void set_ImageScaling(ToolStripItemImageScaling value)
public Color get_ImageTransparentColor()
public void set_ImageTransparentColor(Color value)
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public bool get_RightToLeftAutoMirrorImage()
public void set_RightToLeftAutoMirrorImage(bool value)
public bool get_Selected()
public ISite get_Site()
public void set_Site(ISite value)
public Size get_Size()
public void set_Size(Size value)
public string get_Text()
public void set_Text(string value)
public ContentAlignment get_TextAlign()
public void set_TextAlign(ContentAlignment value)
public ToolStripTextDirection get_TextDirection()
public void set_TextDirection(ToolStripTextDirection value)
public TextImageRelation get_TextImageRelation()
public void set_TextImageRelation(TextImageRelation value)
protected Size get_DefaultSize()
public void Focus()
public Size GetPreferredSize(Size constrainingSize)
public void ResetBackColor()
public void ResetForeColor()
protected AccessibleObject CreateAccessibilityInstance()
protected void Dispose(bool disposing)
protected void OnBoundsChanged()
protected void OnEnter(EventArgs e)
protected void OnGotFocus(EventArgs e)
private void ControlResizeHandler(object obj, EventArgs args)
protected void OnHostedControlResize(EventArgs e)
protected void OnKeyDown(KeyEventArgs e)
protected void OnKeyPress(KeyPressEventArgs e)
protected void OnKeyUp(KeyEventArgs e)
protected void OnLayout(LayoutEventArgs e)
protected void OnLeave(EventArgs e)
protected void OnLostFocus(EventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnParentChanged(ToolStrip oldParent, ToolStrip newParent)
protected void OnSubscribeControlEvents(Control control)
protected void OnUnsubscribeControlEvents(Control control)
protected void OnValidated(EventArgs e)
protected void OnValidating(CancelEventArgs e)
protected internal bool ProcessCmdKey(Message& m, Keys keyData)
protected internal bool ProcessDialogKey(Keys keyData)
protected void SetVisibleCore(bool visible)
public void add_DisplayStyleChanged(EventHandler value)
public void remove_DisplayStyleChanged(EventHandler value)
public void add_Enter(EventHandler value)
public void remove_Enter(EventHandler value)
public void add_GotFocus(EventHandler value)
public void remove_GotFocus(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_Leave(EventHandler value)
public void remove_Leave(EventHandler value)
public void add_LostFocus(EventHandler value)
public void remove_LostFocus(EventHandler value)
public void add_Validated(EventHandler value)
public void remove_Validated(EventHandler value)
public void add_Validating(CancelEventHandler value)
public void remove_Validating(CancelEventHandler value)
internal ToolStripTextDirection get_DefaultTextDirection()
internal void Dismiss(ToolStripDropDownCloseReason reason)
private void HandleEnter(object sender, EventArgs e)
private void HandleGotFocus(object sender, EventArgs e)
private void HandleKeyDown(object sender, KeyEventArgs e)
private void HandleKeyPress(object sender, KeyPressEventArgs e)
private void HandleKeyUp(object sender, KeyEventArgs e)
private void HandleLeave(object sender, EventArgs e)
private void HandleLostFocus(object sender, EventArgs e)
private void HandleValidated(object sender, EventArgs e)
private void HandleValidating(object sender, CancelEventArgs e)
internal bool get_InternalVisible()
internal void set_InternalVisible(bool value)
}
public System.Windows.Forms.ToolStripDropDown : ToolStrip {
private bool allow_transparency
private bool auto_close
private bool can_overflow
private bool drop_shadow_enabled
private double opacity
private ToolStripItem owner_item
private object ClosedEvent
private object ClosingEvent
private object OpenedEvent
private object OpeningEvent
private object ScrollEvent
public bool AllowItemReorder
public bool AllowTransparency
public AnchorStyles Anchor
public bool AutoClose
public bool AutoSize
public bool CanOverflow
public ContextMenu ContextMenu
public ContextMenuStrip ContextMenuStrip
public ToolStripDropDownDirection DefaultDropDownDirection
public DockStyle Dock
public bool DropShadowEnabled
public Font Font
public ToolStripGripDisplayStyle GripDisplayStyle
public Padding GripMargin
public Rectangle GripRectangle
public ToolStripGripStyle GripStyle
public bool IsAutoGenerated
public Point Location
public double Opacity
public ToolStripOverflowButton OverflowButton
public ToolStripItem OwnerItem
public Region Region
public RightToLeft RightToLeft
public bool Stretch
public int TabIndex
public ToolStripTextDirection TextDirection
public bool TopLevel
public bool Visible
protected CreateParams CreateParams
protected DockStyle DefaultDock
protected Padding DefaultPadding
protected bool DefaultShowItemToolTips
protected internal Size MaxItemSize
protected bool TopMost
internal bool ActivateOnShow
internal ToolStripItem TopLevelOwnerItem
public bool get_AllowItemReorder()
public void set_AllowItemReorder(bool value)
public bool get_AllowTransparency()
public void set_AllowTransparency(bool value)
public AnchorStyles get_Anchor()
public void set_Anchor(AnchorStyles value)
public bool get_AutoClose()
public void set_AutoClose(bool value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public bool get_CanOverflow()
public void set_CanOverflow(bool value)
public ContextMenu get_ContextMenu()
public void set_ContextMenu(ContextMenu value)
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public ToolStripDropDownDirection get_DefaultDropDownDirection()
public void set_DefaultDropDownDirection(ToolStripDropDownDirection value)
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public bool get_DropShadowEnabled()
public void set_DropShadowEnabled(bool value)
public Font get_Font()
public void set_Font(Font value)
public ToolStripGripDisplayStyle get_GripDisplayStyle()
public Padding get_GripMargin()
public void set_GripMargin(Padding value)
public Rectangle get_GripRectangle()
public ToolStripGripStyle get_GripStyle()
public void set_GripStyle(ToolStripGripStyle value)
public bool get_IsAutoGenerated()
public Point get_Location()
public void set_Location(Point value)
public double get_Opacity()
public void set_Opacity(double value)
public ToolStripOverflowButton get_OverflowButton()
public ToolStripItem get_OwnerItem()
public void set_OwnerItem(ToolStripItem value)
public Region get_Region()
public void set_Region(Region value)
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public bool get_Stretch()
public void set_Stretch(bool value)
public int get_TabIndex()
public void set_TabIndex(int value)
public ToolStripTextDirection get_TextDirection()
public void set_TextDirection(ToolStripTextDirection value)
public bool get_TopLevel()
public void set_TopLevel(bool value)
public bool get_Visible()
public void set_Visible(bool value)
protected CreateParams get_CreateParams()
protected DockStyle get_DefaultDock()
protected Padding get_DefaultPadding()
protected bool get_DefaultShowItemToolTips()
protected internal Size get_MaxItemSize()
protected bool get_TopMost()
public void Close()
public void Close(ToolStripDropDownCloseReason reason)
public void Show()
public void Show(Point screenLocation)
public void Show(Control control, Point position)
public void Show(int x, int y)
public void Show(Point position, ToolStripDropDownDirection direction)
public void Show(Control control, int x, int y)
public void Show(Control control, Point position, ToolStripDropDownDirection direction)
protected AccessibleObject CreateAccessibilityInstance()
protected void CreateHandle()
protected LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle style)
protected void Dispose(bool disposing)
protected void OnClosed(ToolStripDropDownClosedEventArgs e)
protected void OnClosing(ToolStripDropDownClosingEventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnItemClicked(ToolStripItemClickedEventArgs e)
protected void OnLayout(LayoutEventArgs e)
protected void OnMouseUp(MouseEventArgs mea)
protected void OnOpened(EventArgs e)
protected void OnOpening(CancelEventArgs e)
protected void OnParentChanged(EventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected bool ProcessDialogChar(char charCode)
protected bool ProcessDialogKey(Keys keyData)
protected bool ProcessMnemonic(char charCode)
protected void ScaleControl(SizeF factor, BoundsSpecified specified)
protected void ScaleCore(float dx, float dy)
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
protected void SetVisibleCore(bool visible)
protected void WndProc(Message& m)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_BindingContextChanged(EventHandler value)
public void remove_BindingContextChanged(EventHandler value)
public void add_ChangeUICues(UICuesEventHandler value)
public void remove_ChangeUICues(UICuesEventHandler value)
public void add_Closed(ToolStripDropDownClosedEventHandler value)
public void remove_Closed(ToolStripDropDownClosedEventHandler value)
public void add_Closing(ToolStripDropDownClosingEventHandler value)
public void remove_Closing(ToolStripDropDownClosingEventHandler value)
public void add_ContextMenuChanged(EventHandler value)
public void remove_ContextMenuChanged(EventHandler value)
public void add_ContextMenuStripChanged(EventHandler value)
public void remove_ContextMenuStripChanged(EventHandler value)
public void add_DockChanged(EventHandler value)
public void remove_DockChanged(EventHandler value)
public void add_Enter(EventHandler value)
public void remove_Enter(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_GiveFeedback(GiveFeedbackEventHandler value)
public void remove_GiveFeedback(GiveFeedbackEventHandler value)
public void add_HelpRequested(HelpEventHandler value)
public void remove_HelpRequested(HelpEventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_Leave(EventHandler value)
public void remove_Leave(EventHandler value)
public void add_Opened(EventHandler value)
public void remove_Opened(EventHandler value)
public void add_Opening(CancelEventHandler value)
public void remove_Opening(CancelEventHandler value)
public void add_RegionChanged(EventHandler value)
public void remove_RegionChanged(EventHandler value)
public void add_Scroll(ScrollEventHandler value)
public void remove_Scroll(ScrollEventHandler value)
public void add_StyleChanged(EventHandler value)
public void remove_StyleChanged(EventHandler value)
public void add_TabIndexChanged(EventHandler value)
public void remove_TabIndexChanged(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_Validated(EventHandler value)
public void remove_Validated(EventHandler value)
public void add_Validating(CancelEventHandler value)
public void remove_Validating(CancelEventHandler value)
internal void Dismiss(ToolStripDropDownCloseReason reason)
internal ToolStrip GetTopLevelToolStrip()
internal bool ProcessArrowKey(Keys keyData)
internal ToolStripItem SelectNextToolStripItem(ToolStripItem start, bool forward)
private void ToolStripMenuTracker_AppFocusChange(object sender, EventArgs e)
private void ToolStripMenuTracker_AppClicked(object sender, EventArgs e)
internal bool get_ActivateOnShow()
internal ToolStripItem get_TopLevelOwnerItem()
}
public System.Windows.Forms.ToolStripDropDownButton : ToolStripDropDownItem {
private bool show_drop_down_arrow
public bool AutoToolTip
public bool ShowDropDownArrow
protected bool DefaultAutoToolTip
public void .ctor(Image image)
public void .ctor(string text)
public void .ctor(string text, Image image)
public void .ctor(string text, Image image, EventHandler onClick)
public void .ctor(string text, Image image, ToolStripItem[] dropDownItems)
public void .ctor(string text, Image image, EventHandler onClick, string name)
public bool get_AutoToolTip()
public void set_AutoToolTip(bool value)
public bool get_ShowDropDownArrow()
public void set_ShowDropDownArrow(bool value)
protected bool get_DefaultAutoToolTip()
protected ToolStripDropDown CreateDefaultDropDown()
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnPaint(PaintEventArgs e)
protected internal bool ProcessMnemonic(char charCode)
internal Size CalculatePreferredSize(Size constrainingSize)
}
public System.Windows.Forms.ToolStripDropDownClosedEventArgs : EventArgs {
private ToolStripDropDownCloseReason close_reason
public ToolStripDropDownCloseReason CloseReason
public void .ctor(ToolStripDropDownCloseReason reason)
public ToolStripDropDownCloseReason get_CloseReason()
}
public System.Windows.Forms.ToolStripDropDownClosedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripDropDownClosedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripDropDownClosedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripDropDownCloseReason : Enum {
public int value__
public ToolStripDropDownCloseReason AppFocusChange
public ToolStripDropDownCloseReason AppClicked
public ToolStripDropDownCloseReason ItemClicked
public ToolStripDropDownCloseReason Keyboard
public ToolStripDropDownCloseReason CloseCalled
}
public System.Windows.Forms.ToolStripDropDownClosingEventArgs : CancelEventArgs {
private ToolStripDropDownCloseReason close_reason
public ToolStripDropDownCloseReason CloseReason
public void .ctor(ToolStripDropDownCloseReason reason)
public ToolStripDropDownCloseReason get_CloseReason()
}
public System.Windows.Forms.ToolStripDropDownClosingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripDropDownClosingEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripDropDownClosingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripDropDownDirection : Enum {
public int value__
public ToolStripDropDownDirection AboveLeft
public ToolStripDropDownDirection AboveRight
public ToolStripDropDownDirection BelowLeft
public ToolStripDropDownDirection BelowRight
public ToolStripDropDownDirection Left
public ToolStripDropDownDirection Right
public ToolStripDropDownDirection Default
}
public System.Windows.Forms.ToolStripDropDownItem : ToolStripItem {
internal ToolStripDropDown drop_down
private ToolStripDropDownDirection drop_down_direction
private object DropDownClosedEvent
private object DropDownItemClickedEvent
private object DropDownOpenedEvent
private object DropDownOpeningEvent
public ToolStripDropDown DropDown
public ToolStripDropDownDirection DropDownDirection
public ToolStripItemCollection DropDownItems
public bool HasDropDownItems
public bool Pressed
protected internal Point DropDownLocation
protected void .ctor(string text, Image image, EventHandler onClick)
protected void .ctor(string text, Image image, ToolStripItem[] dropDownItems)
protected void .ctor(string text, Image image, EventHandler onClick, string name)
public ToolStripDropDown get_DropDown()
public void set_DropDown(ToolStripDropDown value)
public ToolStripDropDownDirection get_DropDownDirection()
public void set_DropDownDirection(ToolStripDropDownDirection value)
public ToolStripItemCollection get_DropDownItems()
public bool get_HasDropDownItems()
public bool get_Pressed()
protected internal Point get_DropDownLocation()
public void HideDropDown()
public void ShowDropDown()
protected AccessibleObject CreateAccessibilityInstance()
protected ToolStripDropDown CreateDefaultDropDown()
protected void Dispose(bool disposing)
protected void OnBoundsChanged()
protected internal void OnDropDownClosed(EventArgs e)
protected void OnDropDownHide(EventArgs e)
protected internal void OnDropDownItemClicked(ToolStripItemClickedEventArgs e)
protected internal void OnDropDownOpened(EventArgs e)
protected void OnDropDownShow(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
protected internal bool ProcessCmdKey(Message& m, Keys keyData)
protected internal bool ProcessDialogKey(Keys keyData)
public void add_DropDownClosed(EventHandler value)
public void remove_DropDownClosed(EventHandler value)
public void add_DropDownItemClicked(ToolStripItemClickedEventHandler value)
public void remove_DropDownItemClicked(ToolStripItemClickedEventHandler value)
public void add_DropDownOpened(EventHandler value)
public void remove_DropDownOpened(EventHandler value)
public void add_DropDownOpening(EventHandler value)
public void remove_DropDownOpening(EventHandler value)
internal void Dismiss(ToolStripDropDownCloseReason reason)
internal void HandleClick(int mouse_clicks, EventArgs e)
internal void HideDropDown(ToolStripDropDownCloseReason reason)
private void DropDown_ItemAdded(object sender, ToolStripItemEventArgs e)
}
public System.Windows.Forms.ToolStripDropDownItemAccessibleObject : ToolStripItemAccessibleObject {
public AccessibleRole Role
public void .ctor(ToolStripDropDownItem item)
public AccessibleRole get_Role()
public void DoDefaultAction()
public AccessibleObject GetChild(int index)
public int GetChildCount()
}
public System.Windows.Forms.ToolStripDropDownMenu : ToolStripDropDown {
private ToolStripLayoutStyle layout_style
private bool show_check_margin
private bool show_image_margin
public Rectangle DisplayRectangle
public LayoutEngine LayoutEngine
public ToolStripLayoutStyle LayoutStyle
public bool ShowCheckMargin
public bool ShowImageMargin
protected Padding DefaultPadding
protected internal Size MaxItemSize
public Rectangle get_DisplayRectangle()
public LayoutEngine get_LayoutEngine()
public ToolStripLayoutStyle get_LayoutStyle()
public void set_LayoutStyle(ToolStripLayoutStyle value)
public bool get_ShowCheckMargin()
public void set_ShowCheckMargin(bool value)
public bool get_ShowImageMargin()
public void set_ShowImageMargin(bool value)
protected Padding get_DefaultPadding()
protected internal Size get_MaxItemSize()
protected internal ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick)
protected void OnFontChanged(EventArgs e)
protected void OnLayout(LayoutEventArgs e)
protected void OnPaintBackground(PaintEventArgs e)
protected void SetDisplayedItems()
internal Rectangle CalculateConnectedArea()
}
public System.Windows.Forms.ToolStripGripDisplayStyle : Enum {
public int value__
public ToolStripGripDisplayStyle Horizontal
public ToolStripGripDisplayStyle Vertical
}
public System.Windows.Forms.ToolStripGripRenderEventArgs : ToolStripRenderEventArgs {
private Rectangle grip_bounds
private ToolStripGripDisplayStyle grip_display_style
private ToolStripGripStyle grip_style
public Rectangle GripBounds
public ToolStripGripDisplayStyle GripDisplayStyle
public ToolStripGripStyle GripStyle
public void .ctor(Graphics g, ToolStrip toolStrip)
internal void .ctor(Graphics g, ToolStrip toolStrip, Rectangle gripBounds, ToolStripGripDisplayStyle displayStyle, ToolStripGripStyle gripStyle)
public Rectangle get_GripBounds()
public ToolStripGripDisplayStyle get_GripDisplayStyle()
public ToolStripGripStyle get_GripStyle()
}
public System.Windows.Forms.ToolStripGripRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripGripRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripGripRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripGripStyle : Enum {
public int value__
public ToolStripGripStyle Hidden
public ToolStripGripStyle Visible
}
public System.Windows.Forms.ToolStripItem : Component {
private AccessibleObject accessibility_object
private string accessible_default_action_description
private bool allow_drop
private ToolStripItemAlignment alignment
private AnchorStyles anchor
private bool available
private bool auto_size
private bool auto_tool_tip
private Color back_color
private Image background_image
private ImageLayout background_image_layout
private Rectangle bounds
private bool can_select
private ToolStripItemDisplayStyle display_style
private DockStyle dock
private bool double_click_enabled
private bool enabled
private Size explicit_size
private Font font
private Color fore_color
private Image image
private ContentAlignment image_align
private int image_index
private string image_key
private ToolStripItemImageScaling image_scaling
private Color image_transparent_color
private bool is_disposed
internal bool is_pressed
private bool is_selected
private Padding margin
private MergeAction merge_action
private int merge_index
private string name
private ToolStripItemOverflow overflow
private ToolStrip owner
internal ToolStripItem owner_item
private Padding padding
private ToolStripItemPlacement placement
private RightToLeft right_to_left
private bool right_to_left_auto_mirror_image
private object tag
private string text
private ContentAlignment text_align
private ToolStripTextDirection text_direction
private TextImageRelation text_image_relation
private string tool_tip_text
private bool visible
private EventHandler frame_handler
private ToolStrip parent
private Size text_size
private object AvailableChangedEvent
private object BackColorChangedEvent
private object ClickEvent
private object DisplayStyleChangedEvent
private object DoubleClickEvent
private object DragDropEvent
private object DragEnterEvent
private object DragLeaveEvent
private object DragOverEvent
private object EnabledChangedEvent
private object ForeColorChangedEvent
private object GiveFeedbackEvent
private object LocationChangedEvent
private object MouseDownEvent
private object MouseEnterEvent
private object MouseHoverEvent
private object MouseLeaveEvent
private object MouseMoveEvent
private object MouseUpEvent
private object OwnerChangedEvent
private object PaintEvent
private object QueryAccessibilityHelpEvent
private object QueryContinueDragEvent
private object RightToLeftChangedEvent
private object TextChangedEvent
private object VisibleChangedEvent
private object UIASelectionChangedEvent
public AccessibleObject AccessibilityObject
public string AccessibleDefaultActionDescription
public string AccessibleDescription
public string AccessibleName
public AccessibleRole AccessibleRole
public ToolStripItemAlignment Alignment
public bool AllowDrop
public AnchorStyles Anchor
public bool AutoSize
public bool AutoToolTip
public bool Available
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public Rectangle Bounds
public bool CanSelect
public Rectangle ContentRectangle
public ToolStripItemDisplayStyle DisplayStyle
public bool IsDisposed
public DockStyle Dock
public bool DoubleClickEnabled
public bool Enabled
public Font Font
public Color ForeColor
public int Height
public Image Image
public ContentAlignment ImageAlign
public int ImageIndex
public string ImageKey
public ToolStripItemImageScaling ImageScaling
public Color ImageTransparentColor
public bool IsOnDropDown
public bool IsOnOverflow
public Padding Margin
public MergeAction MergeAction
public int MergeIndex
public string Name
public ToolStripItemOverflow Overflow
public ToolStrip Owner
public ToolStripItem OwnerItem
public Padding Padding
public ToolStripItemPlacement Placement
public bool Pressed
public RightToLeft RightToLeft
public bool RightToLeftAutoMirrorImage
public bool Selected
public Size Size
public object Tag
public string Text
public ContentAlignment TextAlign
public ToolStripTextDirection TextDirection
public TextImageRelation TextImageRelation
public string ToolTipText
public bool Visible
public int Width
protected bool DefaultAutoToolTip
protected ToolStripItemDisplayStyle DefaultDisplayStyle
protected internal Padding DefaultMargin
protected Padding DefaultPadding
protected Size DefaultSize
protected internal bool DismissWhenClicked
protected internal ToolStrip Parent
protected internal bool ShowKeyboardCues
private Font DefaultFont
internal ToolStripTextDirection DefaultTextDirection
internal bool ShowMargin
internal bool UseImageMargin
internal bool InternalVisible
internal ToolStrip InternalOwner
internal Point Location
internal int Top
internal int Left
internal int Right
internal int Bottom
protected void .ctor(string text, Image image, EventHandler onClick)
protected void .ctor(string text, Image image, EventHandler onClick, string name)
public AccessibleObject get_AccessibilityObject()
public string get_AccessibleDefaultActionDescription()
public void set_AccessibleDefaultActionDescription(string value)
public string get_AccessibleDescription()
public void set_AccessibleDescription(string value)
public string get_AccessibleName()
public void set_AccessibleName(string value)
public AccessibleRole get_AccessibleRole()
public void set_AccessibleRole(AccessibleRole value)
public ToolStripItemAlignment get_Alignment()
public void set_Alignment(ToolStripItemAlignment value)
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public AnchorStyles get_Anchor()
public void set_Anchor(AnchorStyles value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public bool get_AutoToolTip()
public void set_AutoToolTip(bool value)
public bool get_Available()
public void set_Available(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public Rectangle get_Bounds()
public bool get_CanSelect()
public Rectangle get_ContentRectangle()
public ToolStripItemDisplayStyle get_DisplayStyle()
public void set_DisplayStyle(ToolStripItemDisplayStyle value)
public bool get_IsDisposed()
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public bool get_DoubleClickEnabled()
public void set_DoubleClickEnabled(bool value)
public bool get_Enabled()
public void set_Enabled(bool value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public int get_Height()
public void set_Height(int value)
public Image get_Image()
public void set_Image(Image value)
public ContentAlignment get_ImageAlign()
public void set_ImageAlign(ContentAlignment value)
public int get_ImageIndex()
public void set_ImageIndex(int value)
public string get_ImageKey()
public void set_ImageKey(string value)
public ToolStripItemImageScaling get_ImageScaling()
public void set_ImageScaling(ToolStripItemImageScaling value)
public Color get_ImageTransparentColor()
public void set_ImageTransparentColor(Color value)
public bool get_IsOnDropDown()
public bool get_IsOnOverflow()
public Padding get_Margin()
public void set_Margin(Padding value)
public MergeAction get_MergeAction()
public void set_MergeAction(MergeAction value)
public int get_MergeIndex()
public void set_MergeIndex(int value)
public string get_Name()
public void set_Name(string value)
public ToolStripItemOverflow get_Overflow()
public void set_Overflow(ToolStripItemOverflow value)
public ToolStrip get_Owner()
public void set_Owner(ToolStrip value)
public ToolStripItem get_OwnerItem()
public Padding get_Padding()
public void set_Padding(Padding value)
public ToolStripItemPlacement get_Placement()
public bool get_Pressed()
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public bool get_RightToLeftAutoMirrorImage()
public void set_RightToLeftAutoMirrorImage(bool value)
public bool get_Selected()
public Size get_Size()
public void set_Size(Size value)
public object get_Tag()
public void set_Tag(object value)
public string get_Text()
public void set_Text(string value)
public ContentAlignment get_TextAlign()
public void set_TextAlign(ContentAlignment value)
public ToolStripTextDirection get_TextDirection()
public void set_TextDirection(ToolStripTextDirection value)
public TextImageRelation get_TextImageRelation()
public void set_TextImageRelation(TextImageRelation value)
public string get_ToolTipText()
public void set_ToolTipText(string value)
public bool get_Visible()
public void set_Visible(bool value)
public int get_Width()
public void set_Width(int value)
protected bool get_DefaultAutoToolTip()
protected ToolStripItemDisplayStyle get_DefaultDisplayStyle()
protected internal Padding get_DefaultMargin()
protected Padding get_DefaultPadding()
protected Size get_DefaultSize()
protected internal bool get_DismissWhenClicked()
protected internal ToolStrip get_Parent()
protected internal void set_Parent(ToolStrip value)
protected internal bool get_ShowKeyboardCues()
public DragDropEffects DoDragDrop(object data, DragDropEffects allowedEffects)
public ToolStrip GetCurrentParent()
public Size GetPreferredSize(Size constrainingSize)
public void Invalidate()
public void Invalidate(Rectangle r)
public void PerformClick()
public void ResetBackColor()
public void ResetDisplayStyle()
public void ResetFont()
public void ResetForeColor()
public void ResetImage()
public void ResetMargin()
public void ResetPadding()
public void ResetRightToLeft()
public void ResetTextDirection()
public void Select()
public string ToString()
protected AccessibleObject CreateAccessibilityInstance()
protected void Dispose(bool disposing)
protected internal bool IsInputChar(char charCode)
protected internal bool IsInputKey(Keys keyData)
protected void OnAvailableChanged(EventArgs e)
protected void OnBackColorChanged(EventArgs e)
protected void OnBoundsChanged()
protected void OnClick(EventArgs e)
protected void OnDisplayStyleChanged(EventArgs e)
protected void OnDoubleClick(EventArgs e)
protected void OnDragDrop(DragEventArgs dragEvent)
protected void OnDragEnter(DragEventArgs dragEvent)
protected void OnDragLeave(EventArgs e)
protected void OnDragOver(DragEventArgs dragEvent)
protected void OnEnabledChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnGiveFeedback(GiveFeedbackEventArgs giveFeedbackEvent)
protected void OnLayout(LayoutEventArgs e)
protected void OnLocationChanged(EventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseEnter(EventArgs e)
protected void OnMouseHover(EventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseMove(MouseEventArgs mea)
protected void OnMouseUp(MouseEventArgs e)
protected void OnOwnerChanged(EventArgs e)
protected internal void OnOwnerFontChanged(EventArgs e)
private void OnPaintInternal(PaintEventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnParentBackColorChanged(EventArgs e)
protected void OnParentChanged(ToolStrip oldParent, ToolStrip newParent)
protected internal void OnParentEnabledChanged(EventArgs e)
protected void OnParentForeColorChanged(EventArgs e)
protected internal void OnParentRightToLeftChanged(EventArgs e)
protected void OnQueryContinueDrag(QueryContinueDragEventArgs queryContinueDragEvent)
protected void OnRightToLeftChanged(EventArgs e)
protected void OnTextChanged(EventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected internal bool ProcessCmdKey(Message& m, Keys keyData)
protected internal bool ProcessDialogKey(Keys keyData)
protected internal bool ProcessMnemonic(char charCode)
protected internal void SetBounds(Rectangle bounds)
protected void SetVisibleCore(bool visible)
public void add_AvailableChanged(EventHandler value)
public void remove_AvailableChanged(EventHandler value)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DisplayStyleChanged(EventHandler value)
public void remove_DisplayStyleChanged(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_DragDrop(DragEventHandler value)
public void remove_DragDrop(DragEventHandler value)
public void add_DragEnter(DragEventHandler value)
public void remove_DragEnter(DragEventHandler value)
public void add_DragLeave(EventHandler value)
public void remove_DragLeave(EventHandler value)
public void add_DragOver(DragEventHandler value)
public void remove_DragOver(DragEventHandler value)
public void add_EnabledChanged(EventHandler value)
public void remove_EnabledChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_GiveFeedback(GiveFeedbackEventHandler value)
public void remove_GiveFeedback(GiveFeedbackEventHandler value)
public void add_LocationChanged(EventHandler value)
public void remove_LocationChanged(EventHandler value)
public void add_MouseDown(MouseEventHandler value)
public void remove_MouseDown(MouseEventHandler value)
public void add_MouseEnter(EventHandler value)
public void remove_MouseEnter(EventHandler value)
public void add_MouseHover(EventHandler value)
public void remove_MouseHover(EventHandler value)
public void add_MouseLeave(EventHandler value)
public void remove_MouseLeave(EventHandler value)
public void add_MouseMove(MouseEventHandler value)
public void remove_MouseMove(MouseEventHandler value)
public void add_MouseUp(MouseEventHandler value)
public void remove_MouseUp(MouseEventHandler value)
public void add_OwnerChanged(EventHandler value)
public void remove_OwnerChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value)
public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value)
public void add_QueryContinueDrag(QueryContinueDragEventHandler value)
public void remove_QueryContinueDrag(QueryContinueDragEventHandler value)
public void add_RightToLeftChanged(EventHandler value)
public void remove_RightToLeftChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_VisibleChanged(EventHandler value)
public void remove_VisibleChanged(EventHandler value)
internal Rectangle AlignInRectangle(Rectangle outer, Size inner, ContentAlignment align)
internal void CalculateAutoSize()
internal Size CalculatePreferredSize(Size constrainingSize)
internal void CalculateTextAndImageRectangles(Rectangle& text_rect, Rectangle& image_rect)
internal void CalculateTextAndImageRectangles(Rectangle contentRectangle, Rectangle& text_rect, Rectangle& image_rect)
private Font get_DefaultFont()
internal ToolStripTextDirection get_DefaultTextDirection()
internal void Dismiss(ToolStripDropDownCloseReason reason)
internal ToolStrip GetTopLevelToolStrip()
private void LayoutTextBeforeOrAfterImage(Rectangle totalArea, bool textFirst, Size textSize, Size imageSize, ContentAlignment textAlign, ContentAlignment imageAlign, Rectangle& textRect, Rectangle& imageRect)
private HorizontalAlignment GetHorizontalAlignment(ContentAlignment align)
internal Size GetImageSize()
internal string GetToolTip()
internal void FireEvent(EventArgs e, ToolStripItemEventType met)
internal void HandleClick(int mouse_clicks, EventArgs e)
internal void SetPlacement(ToolStripItemPlacement placement)
private void BeginAnimation()
private void OnAnimateImage(object sender, EventArgs e)
private void StopAnimation()
private void UpdateAnimatedImage(object sender, EventArgs e)
internal bool get_ShowMargin()
internal bool get_UseImageMargin()
internal bool get_InternalVisible()
internal void set_InternalVisible(bool value)
internal void set_InternalOwner(ToolStrip value)
internal Point get_Location()
internal void set_Location(Point value)
internal int get_Top()
internal void set_Top(int value)
internal int get_Left()
internal void set_Left(int value)
internal int get_Right()
internal int get_Bottom()
private void System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs dragEvent)
private void System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs dragEvent)
private void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs e)
private void System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs dragEvent)
internal void add_UIASelectionChanged(EventHandler value)
internal void remove_UIASelectionChanged(EventHandler value)
internal void OnUIASelectionChanged()
}
public System.Windows.Forms.ToolStripItemAlignment : Enum {
public int value__
public ToolStripItemAlignment Left
public ToolStripItemAlignment Right
}
public System.Windows.Forms.ToolStripItemClickedEventArgs : EventArgs {
private ToolStripItem clicked_item
public ToolStripItem ClickedItem
public void .ctor(ToolStripItem clickedItem)
public ToolStripItem get_ClickedItem()
}
public System.Windows.Forms.ToolStripItemClickedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripItemClickedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripItemClickedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripItemCollection : ArrangedElementCollection {
private ToolStrip owner
private bool internal_created
public bool IsReadOnly
public ToolStripItem Item
public ToolStripItem Item
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
public void .ctor(ToolStrip owner, ToolStripItem[] value)
internal void .ctor(ToolStrip owner, ToolStripItem[] value, bool internalcreated)
public bool get_IsReadOnly()
public ToolStripItem get_Item(int index)
public ToolStripItem get_Item(string key)
public ToolStripItem Add(Image image)
public ToolStripItem Add(string text)
public int Add(ToolStripItem value)
public ToolStripItem Add(string text, Image image)
public ToolStripItem Add(string text, Image image, EventHandler onClick)
public void AddRange(ToolStripItem[] toolStripItems)
public void AddRange(ToolStripItemCollection toolStripItems)
public void Clear()
internal void ClearInternal()
public bool Contains(ToolStripItem value)
public bool ContainsKey(string key)
public void CopyTo(ToolStripItem[] array, int index)
public ToolStripItem[] Find(string key, bool searchAllChildren)
public int IndexOf(ToolStripItem value)
public int IndexOfKey(string key)
public void Insert(int index, ToolStripItem value)
public void Remove(ToolStripItem value)
public void RemoveAt(int index)
public void RemoveByKey(string key)
internal int AddNoOwnerOrLayout(ToolStripItem value)
internal void InsertNoOwnerOrLayout(int index, ToolStripItem value)
internal void RemoveNoOwnerOrLayout(ToolStripItem value)
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private bool System.Collections.IList.get_IsFixedSize()
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
}
public System.Windows.Forms.ToolStripItemDisplayStyle : Enum {
public int value__
public ToolStripItemDisplayStyle None
public ToolStripItemDisplayStyle Text
public ToolStripItemDisplayStyle Image
public ToolStripItemDisplayStyle ImageAndText
}
public System.Windows.Forms.ToolStripItemEventArgs : EventArgs {
private ToolStripItem item
public ToolStripItem Item
public void .ctor(ToolStripItem item)
public ToolStripItem get_Item()
}
public System.Windows.Forms.ToolStripItemEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripItemEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripItemEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.ToolStripItemEventType : Enum {
public int value__
public ToolStripItemEventType MouseDown
public ToolStripItemEventType MouseEnter
public ToolStripItemEventType MouseHover
public ToolStripItemEventType MouseLeave
public ToolStripItemEventType MouseMove
public ToolStripItemEventType MouseUp
public ToolStripItemEventType Paint
public ToolStripItemEventType Click
}
public System.Windows.Forms.ToolStripItemImageRenderEventArgs : ToolStripItemRenderEventArgs {
private Image image
private Rectangle image_rectangle
public Image Image
public Rectangle ImageRectangle
public void .ctor(Graphics g, ToolStripItem item, Rectangle imageRectangle)
public void .ctor(Graphics g, ToolStripItem item, Image image, Rectangle imageRectangle)
public Image get_Image()
public Rectangle get_ImageRectangle()
}
public System.Windows.Forms.ToolStripItemImageRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripItemImageRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripItemImageRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripItemImageScaling : Enum {
public int value__
public ToolStripItemImageScaling None
public ToolStripItemImageScaling SizeToFit
}
public System.Windows.Forms.ToolStripItemOverflow : Enum {
public int value__
public ToolStripItemOverflow Never
public ToolStripItemOverflow Always
public ToolStripItemOverflow AsNeeded
}
public System.Windows.Forms.ToolStripItemPlacement : Enum {
public int value__
public ToolStripItemPlacement Main
public ToolStripItemPlacement Overflow
public ToolStripItemPlacement None
}
public System.Windows.Forms.ToolStripItemRenderEventArgs : EventArgs {
private Graphics graphics
private ToolStripItem item
public Graphics Graphics
public ToolStripItem Item
public ToolStrip ToolStrip
public void .ctor(Graphics g, ToolStripItem item)
public Graphics get_Graphics()
public ToolStripItem get_Item()
public ToolStrip get_ToolStrip()
}
public System.Windows.Forms.ToolStripItemRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripItemRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripItemRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripItemTextRenderEventArgs : ToolStripItemRenderEventArgs {
private string text
private Color text_color
private ToolStripTextDirection text_direction
private Font text_font
private TextFormatFlags text_format
private Rectangle text_rectangle
public string Text
public Color TextColor
public ToolStripTextDirection TextDirection
public Font TextFont
public TextFormatFlags TextFormat
public Rectangle TextRectangle
public void .ctor(Graphics g, ToolStripItem item, string text, Rectangle textRectangle, Color textColor, Font textFont, ContentAlignment textAlign)
public void .ctor(Graphics g, ToolStripItem item, string text, Rectangle textRectangle, Color textColor, Font textFont, TextFormatFlags format)
public string get_Text()
public void set_Text(string value)
public Color get_TextColor()
public void set_TextColor(Color value)
public ToolStripTextDirection get_TextDirection()
public void set_TextDirection(ToolStripTextDirection value)
public Font get_TextFont()
public void set_TextFont(Font value)
public TextFormatFlags get_TextFormat()
public void set_TextFormat(TextFormatFlags value)
public Rectangle get_TextRectangle()
public void set_TextRectangle(Rectangle value)
}
public System.Windows.Forms.ToolStripItemTextRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripItemTextRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripItemTextRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripLabel : ToolStripItem {
private Color active_link_color
private bool is_link
private LinkBehavior link_behavior
private Color link_color
private bool link_visited
private Color visited_link_color
private object UIAIsLinkChangedEvent
public Color ActiveLinkColor
public bool CanSelect
public bool IsLink
public LinkBehavior LinkBehavior
public Color LinkColor
public bool LinkVisited
public Color VisitedLinkColor
internal void add_UIAIsLinkChanged(EventHandler value)
internal void remove_UIAIsLinkChanged(EventHandler value)
internal void OnUIAIsLinkChanged(EventArgs e)
public void .ctor(Image image)
public void .ctor(string text)
public void .ctor(string text, Image image)
public void .ctor(string text, Image image, bool isLink)
public void .ctor(string text, Image image, bool isLink, EventHandler onClick)
public void .ctor(string text, Image image, bool isLink, EventHandler onClick, string name)
public Color get_ActiveLinkColor()
public void set_ActiveLinkColor(Color value)
public bool get_CanSelect()
public bool get_IsLink()
public void set_IsLink(bool value)
public LinkBehavior get_LinkBehavior()
public void set_LinkBehavior(LinkBehavior value)
public Color get_LinkColor()
public void set_LinkColor(Color value)
public bool get_LinkVisited()
public void set_LinkVisited(bool value)
public Color get_VisitedLinkColor()
public void set_VisitedLinkColor(Color value)
protected AccessibleObject CreateAccessibilityInstance()
protected void OnFontChanged(EventArgs e)
protected void OnMouseEnter(EventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnPaint(PaintEventArgs e)
protected internal bool ProcessMnemonic(char charCode)
}
public System.Windows.Forms.ToolStripLayoutStyle : Enum {
public int value__
public ToolStripLayoutStyle StackWithOverflow
public ToolStripLayoutStyle HorizontalStackWithOverflow
public ToolStripLayoutStyle VerticalStackWithOverflow
public ToolStripLayoutStyle Flow
public ToolStripLayoutStyle Table
}
public System.Windows.Forms.ToolStripManager : object {
private ToolStripRenderer renderer
private ToolStripManagerRenderMode render_mode
private bool visual_styles_enabled
private List`1<WeakReference> toolstrips
private List`1<ToolStripMenuItem> menu_items
private bool activated_by_keyboard
private EventHandler RendererChanged
private EventHandler AppClicked
private EventHandler AppFocusChange
public ToolStripRenderer Renderer
public ToolStripManagerRenderMode RenderMode
public bool VisualStylesEnabled
internal bool ActivatedByKeyboard
public ToolStripRenderer get_Renderer()
public void set_Renderer(ToolStripRenderer value)
public ToolStripManagerRenderMode get_RenderMode()
public void set_RenderMode(ToolStripManagerRenderMode value)
public bool get_VisualStylesEnabled()
public void set_VisualStylesEnabled(bool value)
public ToolStrip FindToolStrip(string toolStripName)
public bool IsShortcutDefined(Keys shortcut)
public bool IsValidShortcut(Keys shortcut)
public void LoadSettings(Form targetForm)
public void LoadSettings(Form targetForm, string key)
public bool Merge(ToolStrip sourceToolStrip, string targetName)
public bool Merge(ToolStrip sourceToolStrip, ToolStrip targetToolStrip)
public bool RevertMerge(string targetName)
public bool RevertMerge(ToolStrip targetToolStrip)
public bool RevertMerge(ToolStrip targetToolStrip, ToolStrip sourceToolStrip)
public void SaveSettings(Form sourceForm)
public void SaveSettings(Form sourceForm, string key)
public void add_RendererChanged(EventHandler value)
public void remove_RendererChanged(EventHandler value)
internal bool get_ActivatedByKeyboard()
internal void set_ActivatedByKeyboard(bool value)
internal void AddToolStrip(ToolStrip ts)
private int AdjustItemMergeIndex(ToolStrip ts, ToolStripItem tsi)
private int CountRealToolStripItems(ToolStrip ts)
internal ToolStrip GetNextToolStrip(ToolStrip ts, bool forward)
internal bool ProcessCmdKey(Message& m, Keys keyData)
internal bool ProcessMenuKey(Message& m)
internal void SetActiveToolStrip(ToolStrip toolStrip, bool keyboard)
internal void AddToolStripMenuItem(ToolStripMenuItem tsmi)
internal void RemoveToolStrip(ToolStrip ts)
internal void RemoveToolStripMenuItem(ToolStripMenuItem tsmi)
internal void FireAppClicked()
internal void FireAppFocusChanged(Form form)
internal void FireAppFocusChanged(object sender)
private void OnRendererChanged(EventArgs e)
private void RemoveItemFromParentToolStrip(ToolStripItem tsi)
internal void add_AppClicked(EventHandler value)
internal void remove_AppClicked(EventHandler value)
internal void add_AppFocusChange(EventHandler value)
internal void remove_AppFocusChange(EventHandler value)
}
public System.Windows.Forms.ToolStripManagerRenderMode : Enum {
public int value__
public ToolStripManagerRenderMode Custom
public ToolStripManagerRenderMode System
public ToolStripManagerRenderMode Professional
}
public System.Windows.Forms.ToolStripMenuItem : ToolStripDropDownItem {
private CheckState checked_state
private bool check_on_click
private bool close_on_mouse_release
private string shortcut_display_string
private Keys shortcut_keys
private bool show_shortcut_keys
private Form mdi_client_form
private object CheckedChangedEvent
private object CheckStateChangedEvent
private object UIACheckOnClickChangedEvent
public bool Checked
public bool CheckOnClick
public CheckState CheckState
public bool Enabled
public bool IsMdiWindowListEntry
public ToolStripItemOverflow Overflow
public bool ShowShortcutKeys
public string ShortcutKeyDisplayString
public Keys ShortcutKeys
protected internal Padding DefaultMargin
protected Padding DefaultPadding
protected Size DefaultSize
internal Form MdiClientForm
public void .ctor(Image image)
public void .ctor(string text)
public void .ctor(string text, Image image)
public void .ctor(string text, Image image, EventHandler onClick)
public void .ctor(string text, Image image, ToolStripItem[] dropDownItems)
public void .ctor(string text, Image image, EventHandler onClick, Keys shortcutKeys)
public void .ctor(string text, Image image, EventHandler onClick, string name)
public bool get_Checked()
public void set_Checked(bool value)
public bool get_CheckOnClick()
public void set_CheckOnClick(bool value)
public CheckState get_CheckState()
public void set_CheckState(CheckState value)
public bool get_Enabled()
public void set_Enabled(bool value)
public bool get_IsMdiWindowListEntry()
public ToolStripItemOverflow get_Overflow()
public void set_Overflow(ToolStripItemOverflow value)
public bool get_ShowShortcutKeys()
public void set_ShowShortcutKeys(bool value)
public string get_ShortcutKeyDisplayString()
public void set_ShortcutKeyDisplayString(string value)
public Keys get_ShortcutKeys()
public void set_ShortcutKeys(Keys value)
protected internal Padding get_DefaultMargin()
protected Padding get_DefaultPadding()
protected Size get_DefaultSize()
protected AccessibleObject CreateAccessibilityInstance()
protected ToolStripDropDown CreateDefaultDropDown()
protected void Dispose(bool disposing)
protected void OnCheckedChanged(EventArgs e)
protected void OnCheckStateChanged(EventArgs e)
protected void OnClick(EventArgs e)
protected void OnDropDownHide(EventArgs e)
protected void OnDropDownShow(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseEnter(EventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnOwnerChanged(EventArgs e)
protected void OnPaint(PaintEventArgs e)
protected internal bool ProcessCmdKey(Message& m, Keys keyData)
private Control GetTopLevelControl()
protected internal bool ProcessMnemonic(char charCode)
protected internal void SetBounds(Rectangle rect)
public void add_CheckedChanged(EventHandler value)
public void remove_CheckedChanged(EventHandler value)
public void add_CheckStateChanged(EventHandler value)
public void remove_CheckStateChanged(EventHandler value)
internal void add_UIACheckOnClickChanged(EventHandler value)
internal void remove_UIACheckOnClickChanged(EventHandler value)
internal void OnUIACheckOnClickChangedEvent(EventArgs args)
internal Form get_MdiClientForm()
internal void set_MdiClientForm(Form value)
internal Size CalculatePreferredSize(Size constrainingSize)
internal string GetShortcutDisplayString()
internal void HandleAutoExpansion()
internal void HandleClick(int mouse_clicks, EventArgs e)
}
public System.Windows.Forms.ToolStripOverflow : ToolStripDropDown {
private LayoutEngine layout_engine
public ToolStripItemCollection Items
public LayoutEngine LayoutEngine
protected internal ToolStripItemCollection DisplayedItems
internal ToolStrip ParentToolStrip
public void .ctor(ToolStripItem parentItem)
public ToolStripItemCollection get_Items()
public LayoutEngine get_LayoutEngine()
protected internal ToolStripItemCollection get_DisplayedItems()
public Size GetPreferredSize(Size constrainingSize)
protected AccessibleObject CreateAccessibilityInstance()
protected void OnLayout(LayoutEventArgs e)
protected void SetDisplayedItems()
internal ToolStrip get_ParentToolStrip()
}
public System.Windows.Forms.ToolStripOverflowButton : ToolStripDropDownButton {
public bool HasDropDownItems
public bool RightToLeftAutoMirrorImage
protected internal Padding DefaultMargin
internal void .ctor(ToolStrip ts)
public bool get_HasDropDownItems()
public bool get_RightToLeftAutoMirrorImage()
public void set_RightToLeftAutoMirrorImage(bool value)
protected internal Padding get_DefaultMargin()
public Size GetPreferredSize(Size constrainingSize)
protected AccessibleObject CreateAccessibilityInstance()
protected ToolStripDropDown CreateDefaultDropDown()
protected void OnPaint(PaintEventArgs e)
protected internal void SetBounds(Rectangle bounds)
}
public System.Windows.Forms.ToolStripPanel : ContainerControl {
private bool done_first_layout
private LayoutEngine layout_engine
private bool locked
private Orientation orientation
private ToolStripRenderer renderer
private ToolStripRenderMode render_mode
private Padding row_margin
private ToolStripPanelRowCollection rows
private object RendererChangedEvent
public bool AllowDrop
public bool AutoScroll
public Size AutoScrollMargin
public Size AutoScrollMinSize
public bool AutoSize
public DockStyle Dock
public LayoutEngine LayoutEngine
public bool Locked
public Orientation Orientation
public ToolStripRenderer Renderer
public ToolStripRenderMode RenderMode
public Padding RowMargin
public ToolStripPanelRow[] Rows
public int TabIndex
public bool TabStop
public string Text
protected Padding DefaultMargin
protected Padding DefaultPadding
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
public Size get_AutoScrollMargin()
public void set_AutoScrollMargin(Size value)
public Size get_AutoScrollMinSize()
public void set_AutoScrollMinSize(Size value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public DockStyle get_Dock()
public void set_Dock(DockStyle value)
public LayoutEngine get_LayoutEngine()
public bool get_Locked()
public void set_Locked(bool value)
public Orientation get_Orientation()
public void set_Orientation(Orientation value)
public ToolStripRenderer get_Renderer()
public void set_Renderer(ToolStripRenderer value)
public ToolStripRenderMode get_RenderMode()
public void set_RenderMode(ToolStripRenderMode value)
public Padding get_RowMargin()
public void set_RowMargin(Padding value)
public ToolStripPanelRow[] get_Rows()
public int get_TabIndex()
public void set_TabIndex(int value)
public bool get_TabStop()
public void set_TabStop(bool value)
public string get_Text()
public void set_Text(string value)
protected Padding get_DefaultMargin()
protected Padding get_DefaultPadding()
public void BeginInit()
public void EndInit()
public void Join(ToolStrip toolStripToDrag)
public void Join(ToolStrip toolStripToDrag, int row)
public void Join(ToolStrip toolStripToDrag, Point location)
public void Join(ToolStrip toolStripToDrag, int x, int y)
public ToolStripPanelRow PointToRow(Point clientLocation)
protected ControlCollection CreateControlsInstance()
protected void Dispose(bool disposing)
protected void OnControlAdded(ControlEventArgs e)
protected void OnControlRemoved(ControlEventArgs e)
protected void OnDockChanged(EventArgs e)
protected void OnLayout(LayoutEventArgs e)
protected void OnPaintBackground(PaintEventArgs e)
protected void OnParentChanged(EventArgs e)
protected void OnRendererChanged(EventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_RendererChanged(EventHandler value)
public void remove_RendererChanged(EventHandler value)
public void add_TabIndexChanged(EventHandler value)
public void remove_TabIndexChanged(EventHandler value)
public void add_TabStopChanged(EventHandler value)
public void remove_TabStopChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
private void AddControlToRows(Control control)
}
public System.Windows.Forms.ToolStripPanelRenderEventArgs : EventArgs {
private Graphics graphics
private bool handled
private ToolStripPanel tool_strip_panel
public Graphics Graphics
public bool Handled
public ToolStripPanel ToolStripPanel
public void .ctor(Graphics g, ToolStripPanel toolStripPanel)
public Graphics get_Graphics()
public bool get_Handled()
public void set_Handled(bool value)
public ToolStripPanel get_ToolStripPanel()
}
public System.Windows.Forms.ToolStripPanelRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripPanelRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripPanelRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripPanelRow : Component {
private Rectangle bounds
internal List`1<Control> controls
private LayoutEngine layout_engine
private Padding margin
private Padding padding
private ToolStripPanel parent
public Rectangle Bounds
public Control[] Controls
public Rectangle DisplayRectangle
public LayoutEngine LayoutEngine
public Padding Margin
public Orientation Orientation
public Padding Padding
public ToolStripPanel ToolStripPanel
protected Padding DefaultMargin
protected Padding DefaultPadding
public void .ctor(ToolStripPanel parent)
public Rectangle get_Bounds()
public Control[] get_Controls()
public Rectangle get_DisplayRectangle()
public LayoutEngine get_LayoutEngine()
public Padding get_Margin()
public void set_Margin(Padding value)
public Orientation get_Orientation()
public Padding get_Padding()
public void set_Padding(Padding value)
public ToolStripPanel get_ToolStripPanel()
protected Padding get_DefaultMargin()
protected Padding get_DefaultPadding()
public bool CanMove(ToolStrip toolStripToDrag)
protected void Dispose(bool disposing)
protected void OnBoundsChanged(Rectangle oldBounds, Rectangle newBounds)
protected internal void OnControlAdded(Control control, int index)
protected internal void OnControlRemoved(Control control, int index)
protected void OnLayout(LayoutEventArgs e)
protected internal void OnOrientationChanged()
internal void SetBounds(Rectangle bounds)
private bool Layout(object container, LayoutEventArgs args)
private void control_SizeChanged(object sender, EventArgs e)
}
public System.Windows.Forms.ToolStripProfessionalRenderer : ToolStripRenderer {
private ProfessionalColorTable color_table
private bool rounded_edges
public ProfessionalColorTable ColorTable
public bool RoundedEdges
public void .ctor(ProfessionalColorTable professionalColorTable)
public ProfessionalColorTable get_ColorTable()
public bool get_RoundedEdges()
public void set_RoundedEdges(bool value)
protected void OnRenderArrow(ToolStripArrowRenderEventArgs e)
protected void OnRenderButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderGrip(ToolStripGripRenderEventArgs e)
protected void OnRenderImageMargin(ToolStripRenderEventArgs e)
protected void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e)
protected void OnRenderItemImage(ToolStripItemImageRenderEventArgs e)
protected void OnRenderItemText(ToolStripItemTextRenderEventArgs e)
protected void OnRenderLabelBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e)
protected void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderToolStripBackground(ToolStripRenderEventArgs e)
protected void OnRenderToolStripBorder(ToolStripRenderEventArgs e)
protected void OnRenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventArgs e)
protected void OnRenderToolStripPanelBackground(ToolStripPanelRenderEventArgs e)
protected void OnRenderToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e)
private void PaintOverflowArrow(ToolStripItemRenderEventArgs e, Rectangle paint_here)
}
public System.Windows.Forms.ToolStripProgressBar : ToolStripControlHost {
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public int MarqueeAnimationSpeed
public int Maximum
public int Minimum
public ProgressBar ProgressBar
public bool RightToLeftLayout
public int Step
public ProgressBarStyle Style
public string Text
public int Value
protected internal Padding DefaultMargin
protected Size DefaultSize
public void .ctor(string name)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public int get_MarqueeAnimationSpeed()
public void set_MarqueeAnimationSpeed(int value)
public int get_Maximum()
public void set_Maximum(int value)
public int get_Minimum()
public void set_Minimum(int value)
public ProgressBar get_ProgressBar()
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public int get_Step()
public void set_Step(int value)
public ProgressBarStyle get_Style()
public void set_Style(ProgressBarStyle value)
public string get_Text()
public void set_Text(string value)
public int get_Value()
public void set_Value(int value)
protected internal Padding get_DefaultMargin()
protected Size get_DefaultSize()
public void Increment(int value)
public void PerformStep()
protected void OnRightToLeftLayoutChanged(EventArgs e)
protected void OnSubscribeControlEvents(Control control)
protected void OnUnsubscribeControlEvents(Control control)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_LocationChanged(EventHandler value)
public void remove_LocationChanged(EventHandler value)
public void add_OwnerChanged(EventHandler value)
public void remove_OwnerChanged(EventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_Validated(EventHandler value)
public void remove_Validated(EventHandler value)
public void add_Validating(CancelEventHandler value)
public void remove_Validating(CancelEventHandler value)
}
public System.Windows.Forms.ToolStripRenderer : object {
private ColorMatrix grayscale_matrix
private EventHandlerList events
private object RenderArrowEvent
private object RenderButtonBackgroundEvent
private object RenderDropDownButtonBackgroundEvent
private object RenderGripEvent
private object RenderImageMarginEvent
private object RenderItemBackgroundEvent
private object RenderItemCheckEvent
private object RenderItemImageEvent
private object RenderItemTextEvent
private object RenderLabelBackgroundEvent
private object RenderMenuItemBackgroundEvent
private object RenderOverflowButtonBackgroundEvent
private object RenderSeparatorEvent
private object RenderSplitButtonBackgroundEvent
private object RenderStatusStripSizingGripEvent
private object RenderToolStripBackgroundEvent
private object RenderToolStripBorderEvent
private object RenderToolStripContentPanelBackgroundEvent
private object RenderToolStripPanelBackgroundEvent
private object RenderToolStripStatusLabelBackgroundEvent
private EventHandlerList Events
public Image CreateDisabledImage(Image normalImage)
public void DrawArrow(ToolStripArrowRenderEventArgs e)
public void DrawButtonBackground(ToolStripItemRenderEventArgs e)
public void DrawDropDownButtonBackground(ToolStripItemRenderEventArgs e)
public void DrawGrip(ToolStripGripRenderEventArgs e)
public void DrawImageMargin(ToolStripRenderEventArgs e)
public void DrawItemBackground(ToolStripItemRenderEventArgs e)
public void DrawItemCheck(ToolStripItemImageRenderEventArgs e)
public void DrawItemImage(ToolStripItemImageRenderEventArgs e)
public void DrawItemText(ToolStripItemTextRenderEventArgs e)
public void DrawLabelBackground(ToolStripItemRenderEventArgs e)
public void DrawMenuItemBackground(ToolStripItemRenderEventArgs e)
public void DrawOverflowButtonBackground(ToolStripItemRenderEventArgs e)
public void DrawSeparator(ToolStripSeparatorRenderEventArgs e)
public void DrawSplitButton(ToolStripItemRenderEventArgs e)
public void DrawStatusStripSizingGrip(ToolStripRenderEventArgs e)
public void DrawToolStripBackground(ToolStripRenderEventArgs e)
public void DrawToolStripBorder(ToolStripRenderEventArgs e)
public void DrawToolStripContentPanelBackground(ToolStripContentPanelRenderEventArgs e)
public void DrawToolStripPanelBackground(ToolStripPanelRenderEventArgs e)
public void DrawToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e)
protected internal void Initialize(ToolStrip toolStrip)
protected internal void InitializeContentPanel(ToolStripContentPanel contentPanel)
protected internal void InitializeItem(ToolStripItem item)
protected internal void InitializePanel(ToolStripPanel toolStripPanel)
protected void OnRenderArrow(ToolStripArrowRenderEventArgs e)
protected void OnRenderButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderGrip(ToolStripGripRenderEventArgs e)
protected void OnRenderImageMargin(ToolStripRenderEventArgs e)
protected void OnRenderItemBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e)
protected void OnRenderItemImage(ToolStripItemImageRenderEventArgs e)
protected void OnRenderItemText(ToolStripItemTextRenderEventArgs e)
protected void OnRenderLabelBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e)
protected void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderStatusStripSizingGrip(ToolStripRenderEventArgs e)
protected void OnRenderToolStripBackground(ToolStripRenderEventArgs e)
protected void OnRenderToolStripBorder(ToolStripRenderEventArgs e)
protected void OnRenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventArgs e)
protected void OnRenderToolStripPanelBackground(ToolStripPanelRenderEventArgs e)
protected void OnRenderToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e)
private EventHandlerList get_Events()
public void add_RenderArrow(ToolStripArrowRenderEventHandler value)
public void remove_RenderArrow(ToolStripArrowRenderEventHandler value)
public void add_RenderButtonBackground(ToolStripItemRenderEventHandler value)
public void remove_RenderButtonBackground(ToolStripItemRenderEventHandler value)
public void add_RenderDropDownButtonBackground(ToolStripItemRenderEventHandler value)
public void remove_RenderDropDownButtonBackground(ToolStripItemRenderEventHandler value)
public void add_RenderGrip(ToolStripGripRenderEventHandler value)
public void remove_RenderGrip(ToolStripGripRenderEventHandler value)
public void add_RenderImageMargin(ToolStripRenderEventHandler value)
public void remove_RenderImageMargin(ToolStripRenderEventHandler value)
public void add_RenderItemBackground(ToolStripItemRenderEventHandler value)
public void remove_RenderItemBackground(ToolStripItemRenderEventHandler value)
public void add_RenderItemCheck(ToolStripItemImageRenderEventHandler value)
public void remove_RenderItemCheck(ToolStripItemImageRenderEventHandler value)
public void add_RenderItemImage(ToolStripItemImageRenderEventHandler value)
public void remove_RenderItemImage(ToolStripItemImageRenderEventHandler value)
public void add_RenderItemText(ToolStripItemTextRenderEventHandler value)
public void remove_RenderItemText(ToolStripItemTextRenderEventHandler value)
public void add_RenderLabelBackground(ToolStripItemRenderEventHandler value)
public void remove_RenderLabelBackground(ToolStripItemRenderEventHandler value)
public void add_RenderMenuItemBackground(ToolStripItemRenderEventHandler value)
public void remove_RenderMenuItemBackground(ToolStripItemRenderEventHandler value)
public void add_RenderOverflowButtonBackground(ToolStripItemRenderEventHandler value)
public void remove_RenderOverflowButtonBackground(ToolStripItemRenderEventHandler value)
public void add_RenderSeparator(ToolStripSeparatorRenderEventHandler value)
public void remove_RenderSeparator(ToolStripSeparatorRenderEventHandler value)
public void add_RenderSplitButtonBackground(ToolStripItemRenderEventHandler value)
public void remove_RenderSplitButtonBackground(ToolStripItemRenderEventHandler value)
public void add_RenderStatusStripSizingGrip(ToolStripRenderEventHandler value)
public void remove_RenderStatusStripSizingGrip(ToolStripRenderEventHandler value)
public void add_RenderToolStripBackground(ToolStripRenderEventHandler value)
public void remove_RenderToolStripBackground(ToolStripRenderEventHandler value)
public void add_RenderToolStripBorder(ToolStripRenderEventHandler value)
public void remove_RenderToolStripBorder(ToolStripRenderEventHandler value)
public void add_RenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventHandler value)
public void remove_RenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventHandler value)
public void add_RenderToolStripPanelBackground(ToolStripPanelRenderEventHandler value)
public void remove_RenderToolStripPanelBackground(ToolStripPanelRenderEventHandler value)
public void add_RenderToolStripStatusLabelBackground(ToolStripItemRenderEventHandler value)
public void remove_RenderToolStripStatusLabelBackground(ToolStripItemRenderEventHandler value)
internal Image CreateMirrorImage(Image normalImage)
private void DrawBackground(Graphics g, Rectangle bounds, Image image, ImageLayout layout)
internal void DrawRightArrow(Graphics g, Pen p, int x, int y)
internal void DrawDownArrow(Graphics g, Pen p, int x, int y)
private void DrawSizingGrip(Graphics g, Rectangle rect)
private void DrawGripBox(Graphics g, int x, int y)
}
public System.Windows.Forms.ToolStripRenderEventArgs : EventArgs {
private Rectangle affected_bounds
private Color back_color
private Rectangle connected_area
private Graphics graphics
private ToolStrip tool_strip
public Rectangle AffectedBounds
public Color BackColor
public Rectangle ConnectedArea
public Graphics Graphics
public ToolStrip ToolStrip
internal Rectangle InternalConnectedArea
public void .ctor(Graphics g, ToolStrip toolStrip)
public void .ctor(Graphics g, ToolStrip toolStrip, Rectangle affectedBounds, Color backColor)
public Rectangle get_AffectedBounds()
public Color get_BackColor()
public Rectangle get_ConnectedArea()
public Graphics get_Graphics()
public ToolStrip get_ToolStrip()
internal void set_InternalConnectedArea(Rectangle value)
}
public System.Windows.Forms.ToolStripRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripRenderMode : Enum {
public int value__
public ToolStripRenderMode Custom
public ToolStripRenderMode System
public ToolStripRenderMode Professional
public ToolStripRenderMode ManagerRenderMode
}
public System.Windows.Forms.ToolStripSeparator : ToolStripItem {
public bool AutoToolTip
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public bool CanSelect
public ToolStripItemDisplayStyle DisplayStyle
public bool DoubleClickEnabled
public bool Enabled
public Font Font
public Image Image
public ContentAlignment ImageAlign
public int ImageIndex
public string ImageKey
public ToolStripItemImageScaling ImageScaling
public Color ImageTransparentColor
public bool RightToLeftAutoMirrorImage
public string Text
public ContentAlignment TextAlign
public ToolStripTextDirection TextDirection
public TextImageRelation TextImageRelation
public string ToolTipText
protected internal Padding DefaultMargin
protected Size DefaultSize
internal ToolStripTextDirection DefaultTextDirection
public bool get_AutoToolTip()
public void set_AutoToolTip(bool value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public bool get_CanSelect()
public ToolStripItemDisplayStyle get_DisplayStyle()
public void set_DisplayStyle(ToolStripItemDisplayStyle value)
public bool get_DoubleClickEnabled()
public void set_DoubleClickEnabled(bool value)
public bool get_Enabled()
public void set_Enabled(bool value)
public Font get_Font()
public void set_Font(Font value)
public Image get_Image()
public void set_Image(Image value)
public ContentAlignment get_ImageAlign()
public void set_ImageAlign(ContentAlignment value)
public int get_ImageIndex()
public void set_ImageIndex(int value)
public string get_ImageKey()
public void set_ImageKey(string value)
public ToolStripItemImageScaling get_ImageScaling()
public void set_ImageScaling(ToolStripItemImageScaling value)
public Color get_ImageTransparentColor()
public void set_ImageTransparentColor(Color value)
public bool get_RightToLeftAutoMirrorImage()
public void set_RightToLeftAutoMirrorImage(bool value)
public string get_Text()
public void set_Text(string value)
public ContentAlignment get_TextAlign()
public void set_TextAlign(ContentAlignment value)
public ToolStripTextDirection get_TextDirection()
public void set_TextDirection(ToolStripTextDirection value)
public TextImageRelation get_TextImageRelation()
public void set_TextImageRelation(TextImageRelation value)
public string get_ToolTipText()
public void set_ToolTipText(string value)
protected internal Padding get_DefaultMargin()
protected Size get_DefaultSize()
public Size GetPreferredSize(Size constrainingSize)
protected AccessibleObject CreateAccessibilityInstance()
protected void OnFontChanged(EventArgs e)
protected void OnPaint(PaintEventArgs e)
protected internal void SetBounds(Rectangle rect)
public void add_DisplayStyleChanged(EventHandler value)
public void remove_DisplayStyleChanged(EventHandler value)
public void add_EnabledChanged(EventHandler value)
public void remove_EnabledChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
internal ToolStripTextDirection get_DefaultTextDirection()
}
public System.Windows.Forms.ToolStripSeparatorRenderEventArgs : ToolStripItemRenderEventArgs {
private bool vertical
public bool Vertical
public void .ctor(Graphics g, ToolStripSeparator separator, bool vertical)
public bool get_Vertical()
}
public System.Windows.Forms.ToolStripSeparatorRenderEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ToolStripSeparatorRenderEventArgs e)
public IAsyncResult BeginInvoke(object sender, ToolStripSeparatorRenderEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.ToolStripSplitButton : ToolStripDropDownItem {
private bool button_pressed
private ToolStripItem default_item
private bool drop_down_button_selected
private int drop_down_button_width
private object ButtonClickEvent
private object ButtonDoubleClickEvent
private object DefaultItemChangedEvent
public bool AutoToolTip
public Rectangle ButtonBounds
public bool ButtonPressed
public bool ButtonSelected
public ToolStripItem DefaultItem
public Rectangle DropDownButtonBounds
public bool DropDownButtonPressed
public bool DropDownButtonSelected
public int DropDownButtonWidth
public Rectangle SplitterBounds
protected bool DefaultAutoToolTip
protected internal bool DismissWhenClicked
public void .ctor(Image image)
public void .ctor(string text)
public void .ctor(string text, Image image)
public void .ctor(string text, Image image, EventHandler onClick)
public void .ctor(string text, Image image, ToolStripItem[] dropDownItems)
public void .ctor(string text, Image image, EventHandler onClick, string name)
public bool get_AutoToolTip()
public void set_AutoToolTip(bool value)
public Rectangle get_ButtonBounds()
public bool get_ButtonPressed()
public bool get_ButtonSelected()
public ToolStripItem get_DefaultItem()
public void set_DefaultItem(ToolStripItem value)
public Rectangle get_DropDownButtonBounds()
public bool get_DropDownButtonPressed()
public bool get_DropDownButtonSelected()
public int get_DropDownButtonWidth()
public void set_DropDownButtonWidth(int value)
public Rectangle get_SplitterBounds()
protected bool get_DefaultAutoToolTip()
protected internal bool get_DismissWhenClicked()
public Size GetPreferredSize(Size constrainingSize)
public void OnButtonDoubleClick(EventArgs e)
public void PerformButtonClick()
public void ResetDropDownButtonWidth()
protected AccessibleObject CreateAccessibilityInstance()
protected ToolStripDropDown CreateDefaultDropDown()
protected void OnButtonClick(EventArgs e)
protected void OnDefaultItemChanged(EventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnMouseUp(MouseEventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
protected internal bool ProcessDialogKey(Keys keyData)
protected internal bool ProcessMnemonic(char charCode)
internal void HandleClick(int mouse_clicks, EventArgs e)
public void add_ButtonClick(EventHandler value)
public void remove_ButtonClick(EventHandler value)
public void add_ButtonDoubleClick(EventHandler value)
public void remove_ButtonDoubleClick(EventHandler value)
public void add_DefaultItemChanged(EventHandler value)
public void remove_DefaultItemChanged(EventHandler value)
}
internal System.Windows.Forms.ToolStripSplitStackLayout : LayoutEngine {
public bool Layout(object container, LayoutEventArgs args)
private void LayoutHorizontalToolStrip(ToolStrip ts, Rectangle bounds)
private void LayoutVerticalToolStrip(ToolStrip ts, Rectangle bounds)
}
public System.Windows.Forms.ToolStripStatusLabel : ToolStripLabel {
private ToolStripStatusLabelBorderSides border_sides
private Border3DStyle border_style
private bool spring
public ToolStripItemAlignment Alignment
public ToolStripStatusLabelBorderSides BorderSides
public Border3DStyle BorderStyle
public bool Spring
protected internal Padding DefaultMargin
public void .ctor(Image image)
public void .ctor(string text)
public void .ctor(string text, Image image)
public void .ctor(string text, Image image, EventHandler onClick)
public void .ctor(string text, Image image, EventHandler onClick, string name)
public ToolStripItemAlignment get_Alignment()
public void set_Alignment(ToolStripItemAlignment value)
public ToolStripStatusLabelBorderSides get_BorderSides()
public void set_BorderSides(ToolStripStatusLabelBorderSides value)
public Border3DStyle get_BorderStyle()
public void set_BorderStyle(Border3DStyle value)
public bool get_Spring()
public void set_Spring(bool value)
protected internal Padding get_DefaultMargin()
public Size GetPreferredSize(Size constrainingSize)
protected void OnPaint(PaintEventArgs e)
}
public System.Windows.Forms.ToolStripStatusLabelBorderSides : Enum {
public int value__
public ToolStripStatusLabelBorderSides None
public ToolStripStatusLabelBorderSides Left
public ToolStripStatusLabelBorderSides Top
public ToolStripStatusLabelBorderSides Right
public ToolStripStatusLabelBorderSides Bottom
public ToolStripStatusLabelBorderSides All
}
public System.Windows.Forms.ToolStripSystemRenderer : ToolStripRenderer {
protected void OnRenderButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderGrip(ToolStripGripRenderEventArgs e)
protected void OnRenderImageMargin(ToolStripRenderEventArgs e)
protected void OnRenderItemBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderLabelBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e)
protected void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e)
protected void OnRenderToolStripBackground(ToolStripRenderEventArgs e)
protected void OnRenderToolStripBorder(ToolStripRenderEventArgs e)
protected void OnRenderToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e)
}
public System.Windows.Forms.ToolStripTextBox : ToolStripControlHost {
private BorderStyle border_style
private object AcceptsTabChangedEvent
private object BorderStyleChangedEvent
private object HideSelectionChangedEvent
private object ModifiedChangedEvent
private object MultilineChangedEvent
private object ReadOnlyChangedEvent
private object TextBoxTextAlignChangedEvent
public bool AcceptsReturn
public bool AcceptsTab
public AutoCompleteStringCollection AutoCompleteCustomSource
public AutoCompleteMode AutoCompleteMode
public AutoCompleteSource AutoCompleteSource
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BorderStyle BorderStyle
public bool CanUndo
public CharacterCasing CharacterCasing
public bool HideSelection
public String[] Lines
public int MaxLength
public bool Modified
public bool Multiline
public bool ReadOnly
public string SelectedText
public int SelectionLength
public int SelectionStart
public bool ShortcutsEnabled
public TextBox TextBox
public HorizontalAlignment TextBoxTextAlign
public int TextLength
public bool WordWrap
protected internal Padding DefaultMargin
protected Size DefaultSize
public void .ctor(Control c)
public void .ctor(string name)
public bool get_AcceptsReturn()
public void set_AcceptsReturn(bool value)
public bool get_AcceptsTab()
public void set_AcceptsTab(bool value)
public AutoCompleteStringCollection get_AutoCompleteCustomSource()
public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value)
public AutoCompleteMode get_AutoCompleteMode()
public void set_AutoCompleteMode(AutoCompleteMode value)
public AutoCompleteSource get_AutoCompleteSource()
public void set_AutoCompleteSource(AutoCompleteSource value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public bool get_CanUndo()
public CharacterCasing get_CharacterCasing()
public void set_CharacterCasing(CharacterCasing value)
public bool get_HideSelection()
public void set_HideSelection(bool value)
public String[] get_Lines()
public void set_Lines(String[] value)
public int get_MaxLength()
public void set_MaxLength(int value)
public bool get_Modified()
public void set_Modified(bool value)
public bool get_Multiline()
public void set_Multiline(bool value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public string get_SelectedText()
public void set_SelectedText(string value)
public int get_SelectionLength()
public void set_SelectionLength(int value)
public int get_SelectionStart()
public void set_SelectionStart(int value)
public bool get_ShortcutsEnabled()
public void set_ShortcutsEnabled(bool value)
public TextBox get_TextBox()
public HorizontalAlignment get_TextBoxTextAlign()
public void set_TextBoxTextAlign(HorizontalAlignment value)
public int get_TextLength()
public bool get_WordWrap()
public void set_WordWrap(bool value)
protected internal Padding get_DefaultMargin()
protected Size get_DefaultSize()
public void AppendText(string text)
public void Clear()
public void ClearUndo()
public void Copy()
public void Cut()
public void DeselectAll()
public char GetCharFromPosition(Point pt)
public int GetCharIndexFromPosition(Point pt)
public int GetFirstCharIndexFromLine(int lineNumber)
public int GetFirstCharIndexOfCurrentLine()
public int GetLineFromCharIndex(int index)
public Point GetPositionFromCharIndex(int index)
public Size GetPreferredSize(Size constrainingSize)
public void Paste()
public void ScrollToCaret()
public void Select(int start, int length)
public void SelectAll()
public void Undo()
protected void OnAcceptsTabChanged(EventArgs e)
protected void OnBorderStyleChanged(EventArgs e)
protected void OnHideSelectionChanged(EventArgs e)
protected void OnModifiedChanged(EventArgs e)
protected void OnMultilineChanged(EventArgs e)
protected void OnReadOnlyChanged(EventArgs e)
protected void OnSubscribeControlEvents(Control control)
protected void OnUnsubscribeControlEvents(Control control)
public void add_AcceptsTabChanged(EventHandler value)
public void remove_AcceptsTabChanged(EventHandler value)
public void add_BorderStyleChanged(EventHandler value)
public void remove_BorderStyleChanged(EventHandler value)
public void add_HideSelectionChanged(EventHandler value)
public void remove_HideSelectionChanged(EventHandler value)
public void add_ModifiedChanged(EventHandler value)
public void remove_ModifiedChanged(EventHandler value)
public void add_MultilineChanged(EventHandler value)
public void remove_MultilineChanged(EventHandler value)
public void add_ReadOnlyChanged(EventHandler value)
public void remove_ReadOnlyChanged(EventHandler value)
public void add_TextBoxTextAlignChanged(EventHandler value)
public void remove_TextBoxTextAlignChanged(EventHandler value)
private void HandleTextAlignChanged(object sender, EventArgs e)
private void HandleReadOnlyChanged(object sender, EventArgs e)
private void HandleMultilineChanged(object sender, EventArgs e)
private void HandleModifiedChanged(object sender, EventArgs e)
private void HandleHideSelectionChanged(object sender, EventArgs e)
private void HandleAcceptsTabChanged(object sender, EventArgs e)
private void HandleTextChanged(object sender, EventArgs e)
}
public System.Windows.Forms.ToolStripTextDirection : Enum {
public int value__
public ToolStripTextDirection Inherit
public ToolStripTextDirection Horizontal
public ToolStripTextDirection Vertical90
public ToolStripTextDirection Vertical270
}
public System.Windows.Forms.ToolTip : Component {
internal bool is_active
internal int automatic_delay
internal int autopop_delay
internal int initial_delay
internal int re_show_delay
internal bool show_always
internal Color back_color
internal Color fore_color
internal ToolTipWindow tooltip_window
internal Hashtable tooltip_strings
internal ArrayList controls
internal Control active_control
internal Control last_control
internal Timer timer
private Form hooked_form
private bool isBalloon
private bool owner_draw
private bool stripAmpersands
private ToolTipIcon tool_tip_icon
private bool useAnimation
private bool useFading
private object tag
private object UnPopupEvent
private PopupEventHandler UIAUnPopup
private ControlEventHandler UIAToolTipHookUp
private ControlEventHandler UIAToolTipUnhookUp
private TipState state
private object PopupEvent
private object DrawEvent
internal Rectangle UIAToolTipRectangle
public bool Active
public int AutomaticDelay
public int AutoPopDelay
public Color BackColor
public Color ForeColor
public int InitialDelay
public bool OwnerDraw
public int ReshowDelay
public bool ShowAlways
public bool IsBalloon
public bool StripAmpersands
public object Tag
public ToolTipIcon ToolTipIcon
public string ToolTipTitle
public bool UseAnimation
public bool UseFading
protected CreateParams CreateParams
internal bool Visible
internal void add_UnPopup(PopupEventHandler value)
internal void remove_UnPopup(PopupEventHandler value)
internal void add_UIAUnPopup(PopupEventHandler value)
internal void remove_UIAUnPopup(PopupEventHandler value)
internal void add_UIAToolTipHookUp(ControlEventHandler value)
internal void remove_UIAToolTipHookUp(ControlEventHandler value)
internal void add_UIAToolTipUnhookUp(ControlEventHandler value)
internal void remove_UIAToolTipUnhookUp(ControlEventHandler value)
internal Rectangle get_UIAToolTipRectangle()
internal void OnUIAUnPopup(object sender, PopupEventArgs args)
internal void OnUIAToolTipHookUp(object sender, ControlEventArgs args)
internal void OnUIAToolTipUnhookUp(object sender, ControlEventArgs args)
public void .ctor(IContainer cont)
protected void Finalize()
public bool get_Active()
public void set_Active(bool value)
public int get_AutomaticDelay()
public void set_AutomaticDelay(int value)
public int get_AutoPopDelay()
public void set_AutoPopDelay(int value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public int get_InitialDelay()
public void set_InitialDelay(int value)
public bool get_OwnerDraw()
public void set_OwnerDraw(bool value)
public int get_ReshowDelay()
public void set_ReshowDelay(int value)
public bool get_ShowAlways()
public void set_ShowAlways(bool value)
public bool get_IsBalloon()
public void set_IsBalloon(bool value)
public bool get_StripAmpersands()
public void set_StripAmpersands(bool value)
public object get_Tag()
public void set_Tag(object value)
public ToolTipIcon get_ToolTipIcon()
public void set_ToolTipIcon(ToolTipIcon value)
public string get_ToolTipTitle()
public void set_ToolTipTitle(string value)
public bool get_UseAnimation()
public void set_UseAnimation(bool value)
public bool get_UseFading()
public void set_UseFading(bool value)
protected CreateParams get_CreateParams()
public bool CanExtend(object target)
public string GetToolTip(Control control)
public void RemoveAll()
public void SetToolTip(Control control, string caption)
public string ToString()
public void Show(string text, IWin32Window window)
public void Show(string text, IWin32Window window, int duration)
public void Show(string text, IWin32Window window, Point point)
public void Show(string text, IWin32Window window, int x, int y)
public void Show(string text, IWin32Window window, Point point, int duration)
public void Show(string text, IWin32Window window, int x, int y, int duration)
public void Hide(IWin32Window win)
protected void Dispose(bool disposing)
protected void StopTimer()
private void HookupFormEvents(Form form)
private void HookupControlEvents(Control control)
private void UnhookControlEvents(Control control)
private void UnhookFormEvents()
private void Form_Resize(object sender, EventArgs e)
private void Form_Closed(object sender, EventArgs e)
private void Form_Deactivate(object sender, EventArgs e)
internal void Present(Control control, string text)
private void control_MouseEnter(object sender, EventArgs e)
private void ShowTooltip(Control control)
private void timer_Tick(object sender, EventArgs e)
private void tooltip_window_Popup(object sender, PopupEventArgs e)
private void tooltip_window_Draw(object sender, DrawToolTipEventArgs e)
private bool MouseInControl(Control control, bool fuzzy)
private void control_MouseLeave(object sender, EventArgs e)
private void control_MouseDown(object sender, MouseEventArgs e)
private void control_MouseMove(object sender, MouseEventArgs e)
internal void OnDraw(DrawToolTipEventArgs e)
internal void OnPopup(PopupEventArgs e)
internal void OnUnPopup(PopupEventArgs e)
internal bool get_Visible()
public void add_Popup(PopupEventHandler value)
public void remove_Popup(PopupEventHandler value)
public void add_Draw(DrawToolTipEventHandler value)
public void remove_Draw(DrawToolTipEventHandler value)
private void <.ctor>b__23_0(object sender, PopupEventArgs args)
}
public System.Windows.Forms.ToolTipIcon : Enum {
public int value__
public ToolTipIcon None
public ToolTipIcon Info
public ToolTipIcon Warning
public ToolTipIcon Error
}
internal System.Windows.Forms.ToolWindowManager : InternalWindowManager {
public void .ctor(Form form)
public void SetWindowState(FormWindowState old_state, FormWindowState window_state)
}
public System.Windows.Forms.TrackBar : Control {
private int minimum
private int maximum
internal int tickFrequency
private bool autosize
private int position
private int smallChange
private int largeChange
private Orientation orientation
private TickStyle tickStyle
private Rectangle thumb_pos
private Rectangle thumb_area
internal bool thumb_pressed
private Timer holdclick_timer
internal int thumb_mouseclick
private bool mouse_clickmove
private bool is_moving_right
internal int mouse_down_x_offset
internal bool mouse_moved
private int size_of_autosize
private bool right_to_left_layout
private bool thumb_entered
private object RightToLeftLayoutChangedEvent
private object ScrollEvent
private object ValueChangedEvent
private object UIAValueParamChangedEvent
internal Rectangle ThumbPos
internal Rectangle ThumbArea
internal bool ThumbEntered
public bool AutoSize
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
protected CreateParams CreateParams
protected ImeMode DefaultImeMode
protected Size DefaultSize
protected bool DoubleBuffered
public Font Font
public Color ForeColor
public ImeMode ImeMode
public int LargeChange
public int Maximum
public int Minimum
public Orientation Orientation
public Padding Padding
public bool RightToLeftLayout
public int SmallChange
public string Text
public int TickFrequency
public TickStyle TickStyle
public int Value
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
public void add_Scroll(EventHandler value)
public void remove_Scroll(EventHandler value)
public void add_ValueChanged(EventHandler value)
public void remove_ValueChanged(EventHandler value)
internal void add_UIAValueParamChanged(EventHandler value)
internal void remove_UIAValueParamChanged(EventHandler value)
internal void OnUIAValueParamChanged()
internal Rectangle get_ThumbPos()
internal void set_ThumbPos(Rectangle value)
internal Rectangle get_ThumbArea()
internal void set_ThumbArea(Rectangle value)
internal bool get_ThumbEntered()
internal void set_ThumbEntered(bool value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
protected CreateParams get_CreateParams()
protected ImeMode get_DefaultImeMode()
protected Size get_DefaultSize()
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public int get_LargeChange()
public void set_LargeChange(int value)
public int get_Maximum()
public void set_Maximum(int value)
public int get_Minimum()
public void set_Minimum(int value)
public Orientation get_Orientation()
public void set_Orientation(Orientation value)
public Padding get_Padding()
public void set_Padding(Padding value)
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public int get_SmallChange()
public void set_SmallChange(int value)
public string get_Text()
public void set_Text(string value)
public int get_TickFrequency()
public void set_TickFrequency(int value)
public TickStyle get_TickStyle()
public void set_TickStyle(TickStyle value)
public int get_Value()
public void set_Value(int value)
private void SetValue(int value, bool fire_onscroll)
public void BeginInit()
protected void CreateHandle()
protected void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
public void EndInit()
protected bool IsInputKey(Keys keyData)
protected void OnBackColorChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnMouseWheel(MouseEventArgs e)
protected void OnRightToLeftLayoutChanged(EventArgs e)
protected void OnScroll(EventArgs e)
protected void OnSystemColorsChanged(EventArgs e)
protected void OnValueChanged(EventArgs e)
public void SetRange(int minValue, int maxValue)
public string ToString()
protected void WndProc(Message& m)
private void UpdatePos(int newPos, bool update_trumbpos)
internal void LargeIncrement()
internal void LargeDecrement()
private void SmallIncrement()
private void SmallDecrement()
private void OnMouseUpTB(object sender, MouseEventArgs e)
private void OnMouseDownTB(object sender, MouseEventArgs e)
private void OnMouseMoveTB(object sender, MouseEventArgs e)
private Rectangle GetRealThumbRectangle()
internal void OnPaintInternal(PaintEventArgs pevent)
private void OnLostFocusTB(object sender, EventArgs e)
private void OnGotFocusTB(object sender, EventArgs e)
private void OnKeyDownTB(object sender, KeyEventArgs e)
private void OnFirstClickTimer(object source, ElapsedEventArgs e)
private void OnMouseLeave(object sender, EventArgs e)
}
public System.Windows.Forms.TrackBarRenderer : object {
public bool IsSupported
public void DrawBottomPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state)
public void DrawHorizontalThumb(Graphics g, Rectangle bounds, TrackBarThumbState state)
public void DrawHorizontalTicks(Graphics g, Rectangle bounds, int numTicks, EdgeStyle edgeStyle)
public void DrawHorizontalTrack(Graphics g, Rectangle bounds)
public void DrawLeftPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state)
public void DrawRightPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state)
public void DrawTopPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state)
public void DrawVerticalThumb(Graphics g, Rectangle bounds, TrackBarThumbState state)
public void DrawVerticalTicks(Graphics g, Rectangle bounds, int numTicks, EdgeStyle edgeStyle)
public void DrawVerticalTrack(Graphics g, Rectangle bounds)
public Size GetBottomPointingThumbSize(Graphics g, TrackBarThumbState state)
public Size GetLeftPointingThumbSize(Graphics g, TrackBarThumbState state)
public Size GetRightPointingThumbSize(Graphics g, TrackBarThumbState state)
public Size GetTopPointingThumbSize(Graphics g, TrackBarThumbState state)
public bool get_IsSupported()
}
internal System.Windows.Forms.TransparencySupport : Enum {
public int value__
public TransparencySupport None
public TransparencySupport Get
public TransparencySupport Set
public TransparencySupport GetSet
}
public System.Windows.Forms.TreeNode : MarshalByRefObject {
private TreeView tree_view
internal TreeNode parent
private string text
private int image_index
private int selected_image_index
private ContextMenu context_menu
private ContextMenuStrip context_menu_strip
private string image_key
private string selected_image_key
private int state_image_index
private string state_image_key
private string tool_tip_text
internal TreeNodeCollection nodes
internal TreeViewAction check_reason
internal int visible_order
internal int width
internal bool is_expanded
private bool check
internal OwnerDrawPropertyBag prop_bag
private object tag
internal IntPtr handle
private string name
public Color BackColor
public Rectangle Bounds
internal int IndentLevel
public bool Checked
public ContextMenu ContextMenu
public ContextMenuStrip ContextMenuStrip
public TreeNode FirstNode
public Color ForeColor
public string FullPath
public int ImageIndex
public string ImageKey
public bool IsEditing
public bool IsExpanded
public bool IsSelected
public bool IsVisible
public TreeNode LastNode
public int Level
public string Name
public TreeNode NextNode
public TreeNode NextVisibleNode
public Font NodeFont
public TreeNodeCollection Nodes
public TreeNode Parent
public TreeNode PrevNode
public TreeNode PrevVisibleNode
public int SelectedImageIndex
public string SelectedImageKey
public int StateImageIndex
public string StateImageKey
public object Tag
public string Text
public string ToolTipText
public TreeView TreeView
public IntPtr Handle
internal bool ArePreviousNodesExpanded
internal bool IsRoot
public int Index
internal bool NeedsWidth
private bool IsInClippingRect
internal Image StateImage
internal int Image
internal void .ctor(TreeView tree_view)
protected void .ctor(SerializationInfo serializationInfo, StreamingContext context)
public void .ctor(string text)
public void .ctor(string text, TreeNode[] children)
public void .ctor(string text, int imageIndex, int selectedImageIndex)
public void .ctor(string text, int imageIndex, int selectedImageIndex, TreeNode[] children)
public object Clone()
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
protected void Deserialize(SerializationInfo serializationInfo, StreamingContext context)
protected void Serialize(SerializationInfo si, StreamingContext context)
public Color get_BackColor()
public void set_BackColor(Color value)
public Rectangle get_Bounds()
internal int GetY()
internal int GetX()
internal int GetLinesX()
internal int GetImageX()
internal int get_IndentLevel()
public bool get_Checked()
public void set_Checked(bool value)
public ContextMenu get_ContextMenu()
public void set_ContextMenu(ContextMenu value)
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public TreeNode get_FirstNode()
public Color get_ForeColor()
public void set_ForeColor(Color value)
public string get_FullPath()
public int get_ImageIndex()
public void set_ImageIndex(int value)
public string get_ImageKey()
public void set_ImageKey(string value)
public bool get_IsEditing()
public bool get_IsExpanded()
public bool get_IsSelected()
public bool get_IsVisible()
public TreeNode get_LastNode()
public int get_Level()
public string get_Name()
public void set_Name(string value)
public TreeNode get_NextNode()
public TreeNode get_NextVisibleNode()
public Font get_NodeFont()
public void set_NodeFont(Font value)
public TreeNodeCollection get_Nodes()
public TreeNode get_Parent()
public TreeNode get_PrevNode()
public TreeNode get_PrevVisibleNode()
public int get_SelectedImageIndex()
public void set_SelectedImageIndex(int value)
public string get_SelectedImageKey()
public void set_SelectedImageKey(string value)
public int get_StateImageIndex()
public void set_StateImageIndex(int value)
public string get_StateImageKey()
public void set_StateImageKey(string value)
public object get_Tag()
public void set_Tag(object value)
public string get_Text()
public void set_Text(string value)
public string get_ToolTipText()
public void set_ToolTipText(string value)
public TreeView get_TreeView()
public IntPtr get_Handle()
public TreeNode FromHandle(TreeView tree, IntPtr handle)
public void BeginEdit()
public void Collapse()
public void Collapse(bool ignoreChildren)
public void EndEdit(bool cancel)
public void Expand()
public void ExpandAll()
public void EnsureVisible()
public int GetNodeCount(bool includeSubTrees)
public void Remove()
public void Toggle()
public string ToString()
internal bool get_ArePreviousNodesExpanded()
internal bool get_IsRoot()
private bool BuildFullPath(StringBuilder path)
public int get_Index()
private void Expand(bool byInternal)
private void CollapseInternal(bool byInternal)
private int CountToNext()
private bool HasFocusInChildren()
private void ExpandRecursive(TreeNode node)
private void ExpandParentRecursive(TreeNode node)
internal void CollapseAll()
internal void CollapseAllUncheck()
private void CollapseRecursive(TreeNode node)
private void CollapseUncheckRecursive(TreeNode node)
internal void SetNodes(TreeNodeCollection nodes)
private void GetNodeCountRecursive(TreeNode node, Int32& count)
internal bool get_NeedsWidth()
internal void Invalidate()
internal void InvalidateWidth()
internal void SetWidth(int width)
internal void SetParent(TreeNode parent)
private bool get_IsInClippingRect()
internal Image get_StateImage()
internal int get_Image()
}
public System.Windows.Forms.TreeNodeCollection : object {
private int OrigSize
private TreeNode owner
private int count
private TreeNode[] nodes
public int Count
public bool IsReadOnly
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
public TreeNode Item
public TreeNode Item
private bool UsingSorting
internal void .ctor(TreeNode owner)
public int get_Count()
public bool get_IsReadOnly()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public TreeNode get_Item(int index)
public void set_Item(int index, TreeNode value)
public TreeNode get_Item(string key)
private bool get_UsingSorting()
public TreeNode Add(string text)
public int Add(TreeNode node)
public TreeNode Add(string key, string text)
public TreeNode Add(string key, string text, int imageIndex)
public TreeNode Add(string key, string text, string imageKey)
public TreeNode Add(string key, string text, int imageIndex, int selectedImageIndex)
public TreeNode Add(string key, string text, string imageKey, string selectedImageKey)
public void AddRange(TreeNode[] nodes)
public void Clear()
public bool Contains(TreeNode node)
public bool ContainsKey(string key)
public void CopyTo(Array dest, int index)
public IEnumerator GetEnumerator()
public int IndexOf(TreeNode node)
public int IndexOfKey(string key)
public TreeNode Insert(int index, string text)
public void Insert(int index, TreeNode node)
public TreeNode Insert(int index, string key, string text)
public TreeNode Insert(int index, string key, string text, int imageIndex)
public TreeNode Insert(int index, string key, string text, string imageKey)
public TreeNode Insert(int index, string key, string text, int imageIndex, int selectedImageIndex)
public TreeNode Insert(int index, string key, string text, string imageKey, string selectedImageKey)
public void Remove(TreeNode node)
public void RemoveAt(int index)
private void RemoveAt(int index, bool update)
public void RemoveByKey(string key)
private TreeNode GetPrevNode(TreeNode node)
private void SetupNode(TreeNode node)
private int System.Collections.IList.Add(object node)
private bool System.Collections.IList.Contains(object node)
private int System.Collections.IList.IndexOf(object node)
private void System.Collections.IList.Insert(int index, object node)
private void System.Collections.IList.Remove(object node)
private int AddSorted(TreeNode node)
internal void Sort(IComparer sorter)
private void Grow()
private void Shrink()
public TreeNode[] Find(string key, bool searchAllChildren)
private void Find(string key, bool searchAllChildren, TreeNodeCollection nodes, List`1<TreeNode> results)
}
public System.Windows.Forms.TreeNodeConverter : TypeConverter {
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Windows.Forms.TreeNodeMouseClickEventArgs : MouseEventArgs {
private TreeNode node
public TreeNode Node
public void .ctor(TreeNode node, MouseButtons button, int clicks, int x, int y)
public TreeNode get_Node()
}
public System.Windows.Forms.TreeNodeMouseClickEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TreeNodeMouseClickEventArgs e)
public IAsyncResult BeginInvoke(object sender, TreeNodeMouseClickEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.TreeNodeMouseHoverEventArgs : EventArgs {
private TreeNode node
public TreeNode Node
public void .ctor(TreeNode node)
public TreeNode get_Node()
}
public System.Windows.Forms.TreeNodeMouseHoverEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TreeNodeMouseHoverEventArgs e)
public IAsyncResult BeginInvoke(object sender, TreeNodeMouseHoverEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.TreeNodeStates : Enum {
public int value__
public TreeNodeStates Selected
public TreeNodeStates Grayed
public TreeNodeStates Checked
public TreeNodeStates Focused
public TreeNodeStates Default
public TreeNodeStates Hot
public TreeNodeStates Marked
public TreeNodeStates Indeterminate
public TreeNodeStates ShowKeyboardCues
}
public System.Windows.Forms.TreeView : Control {
private string path_separator
private int item_height
internal bool sorted
internal TreeNode root_node
internal bool nodes_added
private TreeNodeCollection nodes
private TreeViewAction selection_action
internal TreeNode selected_node
private TreeNode pre_selected_node
private TreeNode focused_node
internal TreeNode highlighted_node
private Rectangle mouse_rect
private bool select_mmove
private ImageList image_list
private int image_index
private int selected_image_index
private string image_key
private bool is_hovering
private TreeNode mouse_click_node
private bool right_to_left_layout
private string selected_image_key
private bool show_node_tool_tips
private ImageList state_image_list
private TreeNode tooltip_currently_showing
private ToolTip tooltip_window
private bool full_row_select
private bool hot_tracking
private int indent
private NodeLabelEditEventArgs edit_args
private LabelEditTextBox edit_text_box
internal TreeNode edit_node
private bool checkboxes
private bool label_edit
private bool scrollable
private bool show_lines
private bool show_root_lines
private bool show_plus_minus
private bool hide_selection
private int max_visible_order
internal VScrollBar vbar
internal HScrollBar hbar
private bool vbar_bounds_set
private bool hbar_bounds_set
internal int skipped_nodes
internal int hbar_offset
private int update_stack
private bool update_needed
private Pen dash
private Color line_color
private StringFormat string_format
private int drag_begin_x
private int drag_begin_y
private long handle_count
private TreeViewDrawMode draw_mode
private IComparer tree_view_node_sorter
private object ItemDragEvent
private object AfterCheckEvent
private object AfterCollapseEvent
private object AfterExpandEvent
private object AfterLabelEditEvent
private object AfterSelectEvent
private object BeforeCheckEvent
private object BeforeCollapseEvent
private object BeforeExpandEvent
private object BeforeLabelEditEvent
private object BeforeSelectEvent
private object DrawNodeEvent
private object NodeMouseClickEvent
private object NodeMouseDoubleClickEvent
private object NodeMouseHoverEvent
private object RightToLeftLayoutChangedEvent
private object UIACheckBoxesChangedEvent
private object UIALabelEditChangedEvent
private object UIANodeTextChangedEvent
private object UIACollectionChangedEvent
public Color BackColor
public Image BackgroundImage
public BorderStyle BorderStyle
public bool CheckBoxes
public Color ForeColor
public bool FullRowSelect
public bool HideSelection
public bool HotTracking
public int ImageIndex
public ImageList ImageList
public int Indent
public int ItemHeight
internal int ActualItemHeight
public bool LabelEdit
public TreeNodeCollection Nodes
public Padding Padding
public string PathSeparator
public bool RightToLeftLayout
public bool Scrollable
public int SelectedImageIndex
public TreeNode SelectedNode
public bool ShowLines
public bool ShowNodeToolTips
public bool ShowPlusMinus
public bool ShowRootLines
public bool Sorted
public ImageList StateImageList
public string Text
public TreeNode TopNode
public IComparer TreeViewNodeSorter
public int VisibleCount
protected bool DoubleBuffered
public Color LineColor
public string ImageKey
public string SelectedImageKey
public ImageLayout BackgroundImageLayout
public TreeViewDrawMode DrawMode
internal ScrollBar UIAHScrollBar
internal ScrollBar UIAVScrollBar
protected CreateParams CreateParams
protected Size DefaultSize
internal bool ScaleChildrenInternal
internal Rectangle ViewportRectangle
private ToolTip ToolTipWindow
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public bool get_CheckBoxes()
public void set_CheckBoxes(bool value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_FullRowSelect()
public void set_FullRowSelect(bool value)
public bool get_HideSelection()
public void set_HideSelection(bool value)
public bool get_HotTracking()
public void set_HotTracking(bool value)
public int get_ImageIndex()
public void set_ImageIndex(int value)
public ImageList get_ImageList()
public void set_ImageList(ImageList value)
public int get_Indent()
public void set_Indent(int value)
public int get_ItemHeight()
public void set_ItemHeight(int value)
internal int get_ActualItemHeight()
public bool get_LabelEdit()
public void set_LabelEdit(bool value)
public TreeNodeCollection get_Nodes()
public Padding get_Padding()
public void set_Padding(Padding value)
public string get_PathSeparator()
public void set_PathSeparator(string value)
public bool get_RightToLeftLayout()
public void set_RightToLeftLayout(bool value)
public bool get_Scrollable()
public void set_Scrollable(bool value)
public int get_SelectedImageIndex()
public void set_SelectedImageIndex(int value)
public TreeNode get_SelectedNode()
public void set_SelectedNode(TreeNode value)
private Rectangle Bloat(Rectangle rect)
public bool get_ShowLines()
public void set_ShowLines(bool value)
public bool get_ShowNodeToolTips()
public void set_ShowNodeToolTips(bool value)
public bool get_ShowPlusMinus()
public void set_ShowPlusMinus(bool value)
public bool get_ShowRootLines()
public void set_ShowRootLines(bool value)
public bool get_Sorted()
public void set_Sorted(bool value)
public ImageList get_StateImageList()
public void set_StateImageList(ImageList value)
public string get_Text()
public void set_Text(string value)
public TreeNode get_TopNode()
public void set_TopNode(TreeNode value)
public IComparer get_TreeViewNodeSorter()
public void set_TreeViewNodeSorter(IComparer value)
public int get_VisibleCount()
protected bool get_DoubleBuffered()
protected void set_DoubleBuffered(bool value)
public Color get_LineColor()
public void set_LineColor(Color value)
public string get_ImageKey()
public void set_ImageKey(string value)
public string get_SelectedImageKey()
public void set_SelectedImageKey(string value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public TreeViewDrawMode get_DrawMode()
public void set_DrawMode(TreeViewDrawMode value)
internal ScrollBar get_UIAHScrollBar()
internal ScrollBar get_UIAVScrollBar()
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
public void BeginUpdate()
public void EndUpdate()
public void Sort()
private void Sort(IComparer sorter)
private void SetVScrollValue(int value)
public void ExpandAll()
public void CollapseAll()
public TreeNode GetNodeAt(Point pt)
public TreeNode GetNodeAt(int x, int y)
private TreeNode GetNodeAtUseX(int x, int y)
public int GetNodeCount(bool includeSubTrees)
public TreeViewHitTestInfo HitTest(Point pt)
public TreeViewHitTestInfo HitTest(int x, int y)
public string ToString()
protected void CreateHandle()
protected void Dispose(bool disposing)
protected OwnerDrawPropertyBag GetItemRenderStyles(TreeNode node, int state)
protected bool IsInputKey(Keys keyData)
protected void OnKeyDown(KeyEventArgs e)
protected void OnKeyPress(KeyPressEventArgs e)
protected void OnKeyUp(KeyEventArgs e)
protected void OnMouseHover(EventArgs e)
protected void OnMouseLeave(EventArgs e)
protected void OnNodeMouseClick(TreeNodeMouseClickEventArgs e)
protected void OnNodeMouseDoubleClick(TreeNodeMouseClickEventArgs e)
protected void OnNodeMouseHover(TreeNodeMouseHoverEventArgs e)
protected void OnItemDrag(ItemDragEventArgs e)
protected void OnDrawNode(DrawTreeNodeEventArgs e)
protected void OnRightToLeftLayoutChanged(EventArgs e)
protected internal void OnAfterCheck(TreeViewEventArgs e)
protected internal void OnAfterCollapse(TreeViewEventArgs e)
protected internal void OnAfterExpand(TreeViewEventArgs e)
protected void OnAfterLabelEdit(NodeLabelEditEventArgs e)
protected void OnAfterSelect(TreeViewEventArgs e)
protected internal void OnBeforeCheck(TreeViewCancelEventArgs e)
protected internal void OnBeforeCollapse(TreeViewCancelEventArgs e)
protected internal void OnBeforeExpand(TreeViewCancelEventArgs e)
protected void OnBeforeLabelEdit(NodeLabelEditEventArgs e)
protected void OnBeforeSelect(TreeViewCancelEventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void WndProc(Message& m)
internal bool get_ScaleChildrenInternal()
internal IntPtr CreateNodeHandle()
internal void HandleClick(int clicks, MouseEventArgs me)
internal bool IsInputCharInternal(char charCode)
internal TreeNode NodeFromHandle(IntPtr handle)
private TreeNode NodeFromHandleRecursive(TreeNode node, IntPtr handle)
internal Rectangle get_ViewportRectangle()
private TreeNode GetNodeAt(int y)
private bool IsTextArea(TreeNode node, int x)
private bool IsSelectableArea(TreeNode node, int x)
private bool IsPlusMinusArea(TreeNode node, int x)
private bool IsCheckboxArea(TreeNode node, int x)
private bool IsImage(TreeNode node, int x)
private int CheckBoxLeft(TreeNode node)
internal void RecalculateVisibleOrder(TreeNode start)
internal void SetTop(TreeNode node)
internal void SetBottom(TreeNode node)
internal void UpdateBelow(TreeNode node)
internal void UpdateNode(TreeNode node)
internal void UpdateNodePlusMinus(TreeNode node)
internal void OnPaintInternal(PaintEventArgs pe)
internal void CreateDashPen()
private void Draw(Rectangle clip, Graphics dc)
private void DrawNodeState(TreeNode node, Graphics dc, int x, int y)
private void DrawNodeCheckBox(TreeNode node, Graphics dc, int x, int middle)
private void DrawNodeLines(TreeNode node, Graphics dc, Rectangle clip, Pen dash, int x, int y, int middle)
private void DrawNodeImage(TreeNode node, Graphics dc, Rectangle clip, int x, int y)
private void LabelEditFinished(object sender, EventArgs e)
internal void BeginEdit(TreeNode node)
private void LabelEditCancelled(object sender, EventArgs e)
private void LabelTextChanged(object sender, EventArgs e)
internal void EndEdit(TreeNode node)
internal void CancelEdit(TreeNode node)
internal int GetNodeWidth(TreeNode node)
private void DrawSelectionAndFocus(TreeNode node, Graphics dc, Rectangle r)
private void DrawStaticNode(TreeNode node, Graphics dc)
private void DrawTreeNode(TreeNode node, Graphics dc, Rectangle clip)
internal void UpdateScrollBars(bool force)
private void SizeChangedHandler(object sender, EventArgs e)
private void VScrollBarValueChanged(object sender, EventArgs e)
private void SetVScrollPos(int pos, TreeNode new_top)
private void HScrollBarValueChanged(object sender, EventArgs e)
internal void ExpandBelow(TreeNode node, int count_to_next)
internal void CollapseBelow(TreeNode node, int count_to_next)
private void MouseWheelHandler(object sender, MouseEventArgs e)
private void VisibleChangedHandler(object sender, EventArgs e)
private void FontChangedHandler(object sender, EventArgs e)
private void InvalidateNodeWidthRecursive(TreeNode node)
private void GotFocusHandler(object sender, EventArgs e)
private void LostFocusHandler(object sender, EventArgs e)
private void MouseDownHandler(object sender, MouseEventArgs e)
private void MouseUpHandler(object sender, MouseEventArgs e)
private void MouseMoveHandler(object sender, MouseEventArgs e)
private void DoubleClickHandler(object sender, MouseEventArgs e)
private bool RectsIntersect(Rectangle r, int left, int top, int width, int height)
private bool WmContextMenu(Message& m)
private void MouseEnteredItem(TreeNode item)
private void MouseLeftItem(TreeNode item)
private ToolTip get_ToolTipWindow()
public void add_ItemDrag(ItemDragEventHandler value)
public void remove_ItemDrag(ItemDragEventHandler value)
public void add_AfterCheck(TreeViewEventHandler value)
public void remove_AfterCheck(TreeViewEventHandler value)
public void add_AfterCollapse(TreeViewEventHandler value)
public void remove_AfterCollapse(TreeViewEventHandler value)
public void add_AfterExpand(TreeViewEventHandler value)
public void remove_AfterExpand(TreeViewEventHandler value)
public void add_AfterLabelEdit(NodeLabelEditEventHandler value)
public void remove_AfterLabelEdit(NodeLabelEditEventHandler value)
public void add_AfterSelect(TreeViewEventHandler value)
public void remove_AfterSelect(TreeViewEventHandler value)
public void add_BeforeCheck(TreeViewCancelEventHandler value)
public void remove_BeforeCheck(TreeViewCancelEventHandler value)
public void add_BeforeCollapse(TreeViewCancelEventHandler value)
public void remove_BeforeCollapse(TreeViewCancelEventHandler value)
public void add_BeforeExpand(TreeViewCancelEventHandler value)
public void remove_BeforeExpand(TreeViewCancelEventHandler value)
public void add_BeforeLabelEdit(NodeLabelEditEventHandler value)
public void remove_BeforeLabelEdit(NodeLabelEditEventHandler value)
public void add_BeforeSelect(TreeViewCancelEventHandler value)
public void remove_BeforeSelect(TreeViewCancelEventHandler value)
public void add_DrawNode(DrawTreeNodeEventHandler value)
public void remove_DrawNode(DrawTreeNodeEventHandler value)
public void add_NodeMouseClick(TreeNodeMouseClickEventHandler value)
public void remove_NodeMouseClick(TreeNodeMouseClickEventHandler value)
public void add_NodeMouseDoubleClick(TreeNodeMouseClickEventHandler value)
public void remove_NodeMouseDoubleClick(TreeNodeMouseClickEventHandler value)
public void add_NodeMouseHover(TreeNodeMouseHoverEventHandler value)
public void remove_NodeMouseHover(TreeNodeMouseHoverEventHandler value)
public void add_RightToLeftLayoutChanged(EventHandler value)
public void remove_RightToLeftLayoutChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
internal void add_UIACheckBoxesChanged(EventHandler value)
internal void remove_UIACheckBoxesChanged(EventHandler value)
internal void OnUIACheckBoxesChanged(EventArgs e)
internal void add_UIALabelEditChanged(EventHandler value)
internal void remove_UIALabelEditChanged(EventHandler value)
internal void OnUIALabelEditChanged(EventArgs e)
internal void add_UIANodeTextChanged(TreeViewEventHandler value)
internal void remove_UIANodeTextChanged(TreeViewEventHandler value)
internal void OnUIANodeTextChanged(TreeViewEventArgs e)
internal void add_UIACollectionChanged(CollectionChangeEventHandler value)
internal void remove_UIACollectionChanged(CollectionChangeEventHandler value)
internal void OnUIACollectionChanged(object sender, CollectionChangeEventArgs e)
}
public System.Windows.Forms.TreeViewAction : Enum {
public int value__
public TreeViewAction Unknown
public TreeViewAction ByKeyboard
public TreeViewAction ByMouse
public TreeViewAction Collapse
public TreeViewAction Expand
}
public System.Windows.Forms.TreeViewCancelEventArgs : CancelEventArgs {
private TreeNode node
private TreeViewAction action
public TreeNode Node
public TreeViewAction Action
public void .ctor(TreeNode node, bool cancel, TreeViewAction action)
public TreeNode get_Node()
public TreeViewAction get_Action()
}
public System.Windows.Forms.TreeViewCancelEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TreeViewCancelEventArgs e)
public IAsyncResult BeginInvoke(object sender, TreeViewCancelEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.TreeViewDrawMode : Enum {
public int value__
public TreeViewDrawMode Normal
public TreeViewDrawMode OwnerDrawText
public TreeViewDrawMode OwnerDrawAll
}
public System.Windows.Forms.TreeViewEventArgs : EventArgs {
private TreeNode node
private TreeViewAction action
public TreeViewAction Action
public TreeNode Node
public void .ctor(TreeNode node)
public void .ctor(TreeNode node, TreeViewAction action)
public TreeViewAction get_Action()
public TreeNode get_Node()
}
public System.Windows.Forms.TreeViewEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TreeViewEventArgs e)
public IAsyncResult BeginInvoke(object sender, TreeViewEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.TreeViewHitTestInfo : object {
private TreeNode node
private TreeViewHitTestLocations location
public TreeNode Node
public TreeViewHitTestLocations Location
public void .ctor(TreeNode hitNode, TreeViewHitTestLocations hitLocation)
public TreeNode get_Node()
public TreeViewHitTestLocations get_Location()
}
public System.Windows.Forms.TreeViewHitTestLocations : Enum {
public int value__
public TreeViewHitTestLocations None
public TreeViewHitTestLocations Image
public TreeViewHitTestLocations Label
public TreeViewHitTestLocations Indent
public TreeViewHitTestLocations PlusMinus
public TreeViewHitTestLocations RightOfLabel
public TreeViewHitTestLocations StateImage
public TreeViewHitTestLocations AboveClientArea
public TreeViewHitTestLocations BelowClientArea
public TreeViewHitTestLocations RightOfClientArea
public TreeViewHitTestLocations LeftOfClientArea
}
public System.Windows.Forms.TreeViewImageIndexConverter : ImageIndexConverter {
protected bool IncludeNoneAsStandardValue
protected bool get_IncludeNoneAsStandardValue()
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
}
public System.Windows.Forms.TreeViewImageKeyConverter : ImageKeyConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
internal System.Windows.Forms.TtyKeys : Enum {
public int value__
public TtyKeys XK_BackSpace
public TtyKeys XK_Tab
public TtyKeys XK_Linefeed
public TtyKeys XK_Clear
public TtyKeys XK_Return
public TtyKeys XK_Pause
public TtyKeys XK_Scroll_Lock
public TtyKeys XK_Sys_Req
public TtyKeys XK_Escape
public TtyKeys XK_Delete
}
public System.Windows.Forms.TypeValidationEventArgs : EventArgs {
private bool cancel
private bool is_valid_input
private string message
private object return_value
private Type validating_type
public bool Cancel
public bool IsValidInput
public string Message
public object ReturnValue
public Type ValidatingType
public void .ctor(Type validatingType, bool isValidInput, object returnValue, string message)
public bool get_Cancel()
public void set_Cancel(bool value)
public bool get_IsValidInput()
public string get_Message()
public object get_ReturnValue()
public Type get_ValidatingType()
}
public System.Windows.Forms.TypeValidationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TypeValidationEventArgs e)
public IAsyncResult BeginInvoke(object sender, TypeValidationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.UICues : Enum {
public int value__
public UICues None
public UICues ShowFocus
public UICues ShowKeyboard
public UICues Shown
public UICues ChangeFocus
public UICues ChangeKeyboard
public UICues Changed
}
public System.Windows.Forms.UICuesEventArgs : EventArgs {
private UICues cues
public UICues Changed
public bool ChangeFocus
public bool ChangeKeyboard
public bool ShowFocus
public bool ShowKeyboard
public void .ctor(UICues uicues)
public UICues get_Changed()
public bool get_ChangeFocus()
public bool get_ChangeKeyboard()
public bool get_ShowFocus()
public bool get_ShowKeyboard()
}
public System.Windows.Forms.UICuesEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, UICuesEventArgs e)
public IAsyncResult BeginInvoke(object sender, UICuesEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.UIIcon : Enum {
public int value__
public UIIcon PlacesRecentDocuments
public UIIcon PlacesDesktop
public UIIcon PlacesPersonal
public UIIcon PlacesMyComputer
public UIIcon PlacesMyNetwork
public UIIcon MessageBoxError
public UIIcon MessageBoxQuestion
public UIIcon MessageBoxWarning
public UIIcon MessageBoxInfo
public UIIcon NormalFolder
}
internal System.Windows.Forms.UndoManager : object {
private Document document
private Stack undo_actions
private Stack redo_actions
private bool locked
internal bool CanUndo
internal bool CanRedo
internal string UndoActionName
internal string RedoActionName
internal void .ctor(Document document)
internal bool get_CanUndo()
internal bool get_CanRedo()
internal string get_UndoActionName()
internal string get_RedoActionName()
internal void Clear()
internal bool Undo()
internal bool Redo()
public void BeginUserAction(string name)
public void EndUserAction()
public void RecordDeleteString(Line start_line, int start_pos, Line end_line, int end_pos)
public void RecordInsertString(Line line, int pos, string str)
public void RecordTyping(Line line, int pos, char ch)
public Line Duplicate(Line start_line, int start_pos, Line end_line, int end_pos)
internal void Insert(Line line, int pos, Line insert, bool select)
}
public System.Windows.Forms.UnhandledExceptionMode : Enum {
public int value__
public UnhandledExceptionMode Automatic
public UnhandledExceptionMode ThrowException
public UnhandledExceptionMode CatchException
}
internal System.Windows.Forms.UnixFileSystem : FileSystem {
private MasterMount masterMount
private FSEntry desktopFSEntry
private FSEntry recentlyusedFSEntry
private FSEntry personalFSEntry
private FSEntry mycomputerpersonalFSEntry
private FSEntry mycomputerFSEntry
private FSEntry mynetworkFSEntry
private string personal_folder
private string recently_used_path
private string full_kde_recent_document_dir
public void WriteRecentlyUsedFiles(string fileToAdd)
public ArrayList GetRecentlyUsedFiles()
public ArrayList GetMyComputerContent()
public ArrayList GetMyNetworkContent()
protected FSEntry GetDesktopFSEntry()
protected FSEntry GetRecentlyUsedFSEntry()
protected FSEntry GetPersonalFSEntry()
protected FSEntry GetMyComputerPersonalFSEntry()
protected FSEntry GetMyComputerFSEntry()
protected FSEntry GetMyNetworkFSEntry()
}
public System.Windows.Forms.UpDownBase : ContainerControl {
internal UpDownTextBox txtView
private UpDownSpinner spnSpinner
private bool _InterceptArrowKeys
private LeftRightAlignment _UpDownAlign
private bool changing_text
private bool user_edit
private object UIAUpButtonClickEvent
private object UIADownButtonClickEvent
public bool AutoScroll
public Size AutoScrollMargin
public Size AutoScrollMinSize
public bool AutoSize
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public BorderStyle BorderStyle
public ContextMenu ContextMenu
public ContextMenuStrip ContextMenuStrip
public DockPaddingEdges DockPadding
public bool Focused
public Color ForeColor
public bool InterceptArrowKeys
public Size MaximumSize
public Size MinimumSize
public int PreferredHeight
public bool ReadOnly
public string Text
public HorizontalAlignment TextAlign
public LeftRightAlignment UpDownAlign
protected bool ChangingText
protected CreateParams CreateParams
protected Size DefaultSize
protected bool UserEdit
internal void add_UIAUpButtonClick(EventHandler value)
internal void remove_UIAUpButtonClick(EventHandler value)
internal void OnUIAUpButtonClick(EventArgs e)
internal void add_UIADownButtonClick(EventHandler value)
internal void remove_UIADownButtonClick(EventHandler value)
internal void OnUIADownButtonClick(EventArgs e)
private void TabIndexChangedHandler(object sender, EventArgs e)
internal void OnPaintInternal(PaintEventArgs e)
public bool get_AutoScroll()
public void set_AutoScroll(bool value)
public Size get_AutoScrollMargin()
public void set_AutoScrollMargin(Size value)
public Size get_AutoScrollMinSize()
public void set_AutoScrollMinSize(Size value)
public bool get_AutoSize()
public void set_AutoSize(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
public ContextMenu get_ContextMenu()
public void set_ContextMenu(ContextMenu value)
public ContextMenuStrip get_ContextMenuStrip()
public void set_ContextMenuStrip(ContextMenuStrip value)
public DockPaddingEdges get_DockPadding()
public bool get_Focused()
public Color get_ForeColor()
public void set_ForeColor(Color value)
public bool get_InterceptArrowKeys()
public void set_InterceptArrowKeys(bool value)
public Size get_MaximumSize()
public void set_MaximumSize(Size value)
public Size get_MinimumSize()
public void set_MinimumSize(Size value)
public int get_PreferredHeight()
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public string get_Text()
public void set_Text(string value)
public HorizontalAlignment get_TextAlign()
public void set_TextAlign(HorizontalAlignment value)
public LeftRightAlignment get_UpDownAlign()
public void set_UpDownAlign(LeftRightAlignment value)
protected bool get_ChangingText()
protected void set_ChangingText(bool value)
protected CreateParams get_CreateParams()
protected Size get_DefaultSize()
protected bool get_UserEdit()
protected void set_UserEdit(bool value)
public void DownButton()
public void Select(int start, int length)
public void UpButton()
protected void OnChanged(object source, EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnHandleDestroyed(EventArgs e)
protected void OnLayout(LayoutEventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void OnMouseUp(MouseEventArgs mevent)
protected void OnMouseWheel(MouseEventArgs e)
protected void OnPaint(PaintEventArgs e)
protected void OnTextBoxKeyDown(object source, KeyEventArgs e)
protected void OnTextBoxKeyPress(object source, KeyPressEventArgs e)
protected void OnTextBoxLostFocus(object source, EventArgs e)
protected void OnTextBoxResize(object source, EventArgs e)
protected void OnTextBoxTextChanged(object source, EventArgs e)
internal void SetBoundsCoreInternal(int x, int y, int width, int height, BoundsSpecified specified)
protected void UpdateEditText()
protected void ValidateEditText()
protected void WndProc(Message& m)
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_MouseEnter(EventHandler value)
public void remove_MouseEnter(EventHandler value)
public void add_MouseHover(EventHandler value)
public void remove_MouseHover(EventHandler value)
public void add_MouseLeave(EventHandler value)
public void remove_MouseLeave(EventHandler value)
public void add_MouseMove(MouseEventHandler value)
public void remove_MouseMove(MouseEventHandler value)
}
public System.Windows.Forms.UpDownEventArgs : EventArgs {
private int button_id
public int ButtonID
public void .ctor(int buttonPushed)
public int get_ButtonID()
}
public System.Windows.Forms.UpDownEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object source, UpDownEventArgs e)
public IAsyncResult BeginInvoke(object source, UpDownEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.UserControl : ContainerControl {
private object LoadEvent
public bool AutoSize
public AutoSizeMode AutoSizeMode
public AutoValidate AutoValidate
protected Size DefaultSize
public string Text
protected CreateParams CreateParams
public BorderStyle BorderStyle
public bool get_AutoSize()
public void set_AutoSize(bool value)
public AutoSizeMode get_AutoSizeMode()
public void set_AutoSizeMode(AutoSizeMode value)
public AutoValidate get_AutoValidate()
public void set_AutoValidate(AutoValidate value)
protected Size get_DefaultSize()
public string get_Text()
public void set_Text(string value)
public bool ValidateChildren()
public bool ValidateChildren(ValidationConstraints validationConstraints)
protected void OnCreateControl()
protected void OnLoad(EventArgs e)
protected void OnMouseDown(MouseEventArgs e)
protected void WndProc(Message& m)
protected CreateParams get_CreateParams()
public void add_AutoSizeChanged(EventHandler value)
public void remove_AutoSizeChanged(EventHandler value)
public void add_AutoValidateChanged(EventHandler value)
public void remove_AutoValidateChanged(EventHandler value)
public void add_Load(EventHandler value)
public void remove_Load(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
protected void OnResize(EventArgs e)
public BorderStyle get_BorderStyle()
public void set_BorderStyle(BorderStyle value)
internal Size GetPreferredSizeCore(Size proposedSize)
}
public System.Windows.Forms.ValidationConstraints : Enum {
public int value__
public ValidationConstraints None
public ValidationConstraints Selectable
public ValidationConstraints Enabled
public ValidationConstraints Visible
public ValidationConstraints TabStop
public ValidationConstraints ImmediateChildren
}
public System.Windows.Forms.View : Enum {
public int value__
public View LargeIcon
public View Details
public View SmallIcon
public View List
public View Tile
}
internal System.Windows.Forms.VirtualKeys : Enum {
public int value__
public VirtualKeys VK_LBUTTON
public VirtualKeys VK_RBUTTON
public VirtualKeys VK_CANCEL
public VirtualKeys VK_MBUTTON
public VirtualKeys VK_XBUTTON1
public VirtualKeys VK_XBUTTON2
public VirtualKeys VK_BACK
public VirtualKeys VK_TAB
public VirtualKeys VK_CLEAR
public VirtualKeys VK_RETURN
public VirtualKeys VK_SHIFT
public VirtualKeys VK_CONTROL
public VirtualKeys VK_MENU
public VirtualKeys VK_PAUSE
public VirtualKeys VK_CAPITAL
public VirtualKeys VK_ESCAPE
public VirtualKeys VK_CONVERT
public VirtualKeys VK_NONCONVERT
public VirtualKeys VK_SPACE
public VirtualKeys VK_PRIOR
public VirtualKeys VK_NEXT
public VirtualKeys VK_END
public VirtualKeys VK_HOME
public VirtualKeys VK_LEFT
public VirtualKeys VK_UP
public VirtualKeys VK_RIGHT
public VirtualKeys VK_DOWN
public VirtualKeys VK_SELECT
public VirtualKeys VK_PRINT
public VirtualKeys VK_EXECUTE
public VirtualKeys VK_SNAPSHOT
public VirtualKeys VK_INSERT
public VirtualKeys VK_DELETE
public VirtualKeys VK_HELP
public VirtualKeys VK_0
public VirtualKeys VK_1
public VirtualKeys VK_2
public VirtualKeys VK_3
public VirtualKeys VK_4
public VirtualKeys VK_5
public VirtualKeys VK_6
public VirtualKeys VK_7
public VirtualKeys VK_8
public VirtualKeys VK_9
public VirtualKeys VK_A
public VirtualKeys VK_B
public VirtualKeys VK_C
public VirtualKeys VK_D
public VirtualKeys VK_E
public VirtualKeys VK_F
public VirtualKeys VK_G
public VirtualKeys VK_H
public VirtualKeys VK_I
public VirtualKeys VK_J
public VirtualKeys VK_K
public VirtualKeys VK_L
public VirtualKeys VK_M
public VirtualKeys VK_N
public VirtualKeys VK_O
public VirtualKeys VK_P
public VirtualKeys VK_Q
public VirtualKeys VK_R
public VirtualKeys VK_S
public VirtualKeys VK_T
public VirtualKeys VK_U
public VirtualKeys VK_V
public VirtualKeys VK_W
public VirtualKeys VK_X
public VirtualKeys VK_Y
public VirtualKeys VK_Z
public VirtualKeys VK_LWIN
public VirtualKeys VK_RWIN
public VirtualKeys VK_APPS
public VirtualKeys VK_NUMPAD0
public VirtualKeys VK_NUMPAD1
public VirtualKeys VK_NUMPAD2
public VirtualKeys VK_NUMPAD3
public VirtualKeys VK_NUMPAD4
public VirtualKeys VK_NUMPAD5
public VirtualKeys VK_NUMPAD6
public VirtualKeys VK_NUMPAD7
public VirtualKeys VK_NUMPAD8
public VirtualKeys VK_NUMPAD9
public VirtualKeys VK_MULTIPLY
public VirtualKeys VK_ADD
public VirtualKeys VK_SEPARATOR
public VirtualKeys VK_SUBTRACT
public VirtualKeys VK_DECIMAL
public VirtualKeys VK_DIVIDE
public VirtualKeys VK_F1
public VirtualKeys VK_F2
public VirtualKeys VK_F3
public VirtualKeys VK_F4
public VirtualKeys VK_F5
public VirtualKeys VK_F6
public VirtualKeys VK_F7
public VirtualKeys VK_F8
public VirtualKeys VK_F9
public VirtualKeys VK_F10
public VirtualKeys VK_F11
public VirtualKeys VK_F12
public VirtualKeys VK_F13
public VirtualKeys VK_F14
public VirtualKeys VK_F15
public VirtualKeys VK_F16
public VirtualKeys VK_F17
public VirtualKeys VK_F18
public VirtualKeys VK_F19
public VirtualKeys VK_F20
public VirtualKeys VK_F21
public VirtualKeys VK_F22
public VirtualKeys VK_F23
public VirtualKeys VK_F24
public VirtualKeys VK_NUMLOCK
public VirtualKeys VK_SCROLL
public VirtualKeys VK_LSHIFT
public VirtualKeys VK_RSHIFT
public VirtualKeys VK_LCONTROL
public VirtualKeys VK_RCONTROL
public VirtualKeys VK_LMENU
public VirtualKeys VK_RMENU
public VirtualKeys VK_OEM_1
public VirtualKeys VK_OEM_PLUS
public VirtualKeys VK_OEM_COMMA
public VirtualKeys VK_OEM_MINUS
public VirtualKeys VK_OEM_PERIOD
public VirtualKeys VK_OEM_2
public VirtualKeys VK_OEM_3
public VirtualKeys VK_OEM_4
public VirtualKeys VK_OEM_5
public VirtualKeys VK_OEM_6
public VirtualKeys VK_OEM_7
public VirtualKeys VK_OEM_8
public VirtualKeys VK_OEM_AX
public VirtualKeys VK_OEM_102
public VirtualKeys VK_ICO_HELP
public VirtualKeys VK_ICO_00
public VirtualKeys VK_PROCESSKEY
public VirtualKeys VK_OEM_ATTN
public VirtualKeys VK_OEM_COPY
public VirtualKeys VK_OEM_AUTO
public VirtualKeys VK_OEM_ENLW
public VirtualKeys VK_OEM_BACKTAB
public VirtualKeys VK_ATTN
public VirtualKeys VK_CRSEL
public VirtualKeys VK_EXSEL
public VirtualKeys VK_EREOF
public VirtualKeys VK_PLAY
public VirtualKeys VK_ZOOM
public VirtualKeys VK_NONAME
public VirtualKeys VK_PA1
public VirtualKeys VK_OEM_CLEAR
}
internal System.Windows.Forms.VisualStyles.ARROWBTNSTATES : Enum {
public int value__
public ARROWBTNSTATES ABS_UPNORMAL
public ARROWBTNSTATES ABS_UPHOT
public ARROWBTNSTATES ABS_UPPRESSED
public ARROWBTNSTATES ABS_UPDISABLED
public ARROWBTNSTATES ABS_DOWNNORMAL
public ARROWBTNSTATES ABS_DOWNHOT
public ARROWBTNSTATES ABS_DOWNPRESSED
public ARROWBTNSTATES ABS_DOWNDISABLED
public ARROWBTNSTATES ABS_LEFTNORMAL
public ARROWBTNSTATES ABS_LEFTHOT
public ARROWBTNSTATES ABS_LEFTPRESSED
public ARROWBTNSTATES ABS_LEFTDISABLED
public ARROWBTNSTATES ABS_RIGHTNORMAL
public ARROWBTNSTATES ABS_RIGHTHOT
public ARROWBTNSTATES ABS_RIGHTPRESSED
public ARROWBTNSTATES ABS_RIGHTDISABLED
public ARROWBTNSTATES ABS_UPHOVER
public ARROWBTNSTATES ABS_DOWNHOVER
public ARROWBTNSTATES ABS_LEFTHOVER
public ARROWBTNSTATES ABS_RIGHTHOVER
}
public System.Windows.Forms.VisualStyles.BackgroundType : Enum {
public int value__
public BackgroundType ImageFile
public BackgroundType BorderFill
public BackgroundType None
}
public System.Windows.Forms.VisualStyles.BooleanProperty : Enum {
public int value__
public BooleanProperty Transparent
public BooleanProperty AutoSize
public BooleanProperty BorderOnly
public BooleanProperty Composited
public BooleanProperty BackgroundFill
public BooleanProperty GlyphTransparent
public BooleanProperty GlyphOnly
public BooleanProperty AlwaysShowSizingBar
public BooleanProperty MirrorImage
public BooleanProperty UniformSizing
public BooleanProperty IntegralSizing
public BooleanProperty SourceGrow
public BooleanProperty SourceShrink
}
internal System.Windows.Forms.VisualStyles.BORDERSTATES : Enum {
public int value__
public BORDERSTATES CBB_NORMAL
public BORDERSTATES CBB_HOT
public BORDERSTATES CBB_FOCUSED
public BORDERSTATES CBB_DISABLED
}
public System.Windows.Forms.VisualStyles.BorderType : Enum {
public int value__
public BorderType Rectangle
public BorderType RoundedRectangle
public BorderType Ellipse
}
internal System.Windows.Forms.VisualStyles.BUTTONPARTS : Enum {
public int value__
public BUTTONPARTS BP_PUSHBUTTON
public BUTTONPARTS BP_RADIOBUTTON
public BUTTONPARTS BP_CHECKBOX
public BUTTONPARTS BP_GROUPBOX
}
public System.Windows.Forms.VisualStyles.CheckBoxState : Enum {
public int value__
public CheckBoxState UncheckedNormal
public CheckBoxState UncheckedHot
public CheckBoxState UncheckedPressed
public CheckBoxState UncheckedDisabled
public CheckBoxState CheckedNormal
public CheckBoxState CheckedHot
public CheckBoxState CheckedPressed
public CheckBoxState CheckedDisabled
public CheckBoxState MixedNormal
public CheckBoxState MixedHot
public CheckBoxState MixedPressed
public CheckBoxState MixedDisabled
}
internal System.Windows.Forms.VisualStyles.CHECKBOXSTATES : Enum {
public int value__
public CHECKBOXSTATES CBS_UNCHECKEDNORMAL
public CHECKBOXSTATES CBS_UNCHECKEDHOT
public CHECKBOXSTATES CBS_UNCHECKEDPRESSED
public CHECKBOXSTATES CBS_UNCHECKEDDISABLED
public CHECKBOXSTATES CBS_CHECKEDNORMAL
public CHECKBOXSTATES CBS_CHECKEDHOT
public CHECKBOXSTATES CBS_CHECKEDPRESSED
public CHECKBOXSTATES CBS_CHECKEDDISABLED
public CHECKBOXSTATES CBS_MIXEDNORMAL
public CHECKBOXSTATES CBS_MIXEDHOT
public CHECKBOXSTATES CBS_MIXEDPRESSED
public CHECKBOXSTATES CBS_MIXEDDISABLED
}
public System.Windows.Forms.VisualStyles.ColorProperty : Enum {
public int value__
public ColorProperty BorderColor
public ColorProperty FillColor
public ColorProperty TextColor
public ColorProperty EdgeLightColor
public ColorProperty EdgeHighlightColor
public ColorProperty EdgeShadowColor
public ColorProperty EdgeDarkShadowColor
public ColorProperty EdgeFillColor
public ColorProperty TransparentColor
public ColorProperty GradientColor1
public ColorProperty GradientColor2
public ColorProperty GradientColor3
public ColorProperty GradientColor4
public ColorProperty GradientColor5
public ColorProperty ShadowColor
public ColorProperty GlowColor
public ColorProperty TextBorderColor
public ColorProperty TextShadowColor
public ColorProperty GlyphTextColor
public ColorProperty GlyphTransparentColor
public ColorProperty FillColorHint
public ColorProperty BorderColorHint
public ColorProperty AccentColorHint
}
internal System.Windows.Forms.VisualStyles.COMBOBOXPARTS : Enum {
public int value__
public COMBOBOXPARTS CP_DROPDOWNBUTTON
public COMBOBOXPARTS CP_BORDER
}
public System.Windows.Forms.VisualStyles.ComboBoxState : Enum {
public int value__
public ComboBoxState Normal
public ComboBoxState Hot
public ComboBoxState Pressed
public ComboBoxState Disabled
}
internal System.Windows.Forms.VisualStyles.COMBOBOXSTYLESTATES : Enum {
public int value__
public COMBOBOXSTYLESTATES CBXS_NORMAL
public COMBOBOXSTYLESTATES CBXS_HOT
public COMBOBOXSTYLESTATES CBXS_PRESSED
public COMBOBOXSTYLESTATES CBXS_DISABLED
}
public System.Windows.Forms.VisualStyles.ContentAlignment : Enum {
public int value__
public ContentAlignment Left
public ContentAlignment Center
public ContentAlignment Right
}
internal System.Windows.Forms.VisualStyles.DOWNHORZSTATES : Enum {
public int value__
public DOWNHORZSTATES DNHZS_NORMAL
public DOWNHORZSTATES DNHZS_HOT
public DOWNHORZSTATES DNHZS_PRESSED
public DOWNHORZSTATES DNHZS_DISABLED
}
internal System.Windows.Forms.VisualStyles.DOWNSTATES : Enum {
public int value__
public DOWNSTATES DNS_NORMAL
public DOWNSTATES DNS_HOT
public DOWNSTATES DNS_PRESSED
public DOWNSTATES DNS_DISABLED
}
public System.Windows.Forms.VisualStyles.EdgeEffects : Enum {
public int value__
public EdgeEffects None
public EdgeEffects FillInterior
public EdgeEffects Flat
public EdgeEffects Soft
public EdgeEffects Mono
}
public System.Windows.Forms.VisualStyles.Edges : Enum {
public int value__
public Edges Left
public Edges Top
public Edges Right
public Edges Bottom
public Edges Diagonal
}
public System.Windows.Forms.VisualStyles.EdgeStyle : Enum {
public int value__
public EdgeStyle Raised
public EdgeStyle Etched
public EdgeStyle Bump
public EdgeStyle Sunken
}
internal System.Windows.Forms.VisualStyles.EDITPARTS : Enum {
public int value__
public EDITPARTS EP_EDITTEXT
}
internal System.Windows.Forms.VisualStyles.EDITTEXTSTATES : Enum {
public int value__
public EDITTEXTSTATES ETS_NORMAL
public EDITTEXTSTATES ETS_HOT
public EDITTEXTSTATES ETS_SELECTED
public EDITTEXTSTATES ETS_DISABLED
public EDITTEXTSTATES ETS_FOCUSED
public EDITTEXTSTATES ETS_READONLY
public EDITTEXTSTATES ETS_ASSIST
}
public System.Windows.Forms.VisualStyles.EnumProperty : Enum {
public int value__
public EnumProperty BackgroundType
public EnumProperty BorderType
public EnumProperty FillType
public EnumProperty SizingType
public EnumProperty HorizontalAlignment
public EnumProperty ContentAlignment
public EnumProperty VerticalAlignment
public EnumProperty OffsetType
public EnumProperty IconEffect
public EnumProperty TextShadowType
public EnumProperty ImageLayout
public EnumProperty GlyphType
public EnumProperty ImageSelectType
public EnumProperty GlyphFontSizingType
public EnumProperty TrueSizeScalingType
}
public System.Windows.Forms.VisualStyles.FilenameProperty : Enum {
public int value__
public FilenameProperty ImageFile
public FilenameProperty ImageFile1
public FilenameProperty ImageFile2
public FilenameProperty ImageFile3
public FilenameProperty ImageFile4
public FilenameProperty ImageFile5
public FilenameProperty StockImageFile
public FilenameProperty GlyphImageFile
}
public System.Windows.Forms.VisualStyles.FillType : Enum {
public int value__
public FillType Solid
public FillType VerticalGradient
public FillType HorizontalGradient
public FillType RadialGradient
public FillType TileImage
}
public System.Windows.Forms.VisualStyles.FontProperty : Enum {
public int value__
public FontProperty GlyphFont
}
public System.Windows.Forms.VisualStyles.GlyphFontSizingType : Enum {
public int value__
public GlyphFontSizingType None
public GlyphFontSizingType Size
public GlyphFontSizingType Dpi
}
internal System.Windows.Forms.VisualStyles.GLYPHSTATES : Enum {
public int value__
public GLYPHSTATES GLPS_CLOSED
public GLYPHSTATES GLPS_OPENED
}
public System.Windows.Forms.VisualStyles.GlyphType : Enum {
public int value__
public GlyphType None
public GlyphType ImageGlyph
public GlyphType FontGlyph
}
public System.Windows.Forms.VisualStyles.GroupBoxState : Enum {
public int value__
public GroupBoxState Normal
public GroupBoxState Disabled
}
internal System.Windows.Forms.VisualStyles.GROUPBOXSTATES : Enum {
public int value__
public GROUPBOXSTATES GBS_NORMAL
public GROUPBOXSTATES GBS_DISABLED
}
internal System.Windows.Forms.VisualStyles.GtkPlus : object {
private GtkPlus instance
private int WidgetTypeCount
private IntPtr[] widgets
private IntPtr window
private IntPtr fixed
private IntPtr[] styles
private IntPtr combo_box_drop_down_toggle_button
private IntPtr combo_box_drop_down_arrow
private IntPtr combo_box_drop_down_toggle_button_style
private IntPtr combo_box_drop_down_arrow_style
private IntPtr tool_bar_button
private IntPtr tool_bar_toggle_button
private IntPtr tool_bar_button_style
private IntPtr tool_bar_toggle_button_style
private IntPtr tree_view_column
private IntPtr tree_view_column_button
private IntPtr tree_view_column_button_style
private ButtonPainter button_painter
private CheckBoxPainter check_box_painter
private RadioButtonPainter radio_button_painter
private ComboBoxDropDownButtonPainter combo_box_drop_down_button_painter
private ComboBoxBorderPainter combo_box_border_painter
private GroupBoxPainter group_box_painter
private HeaderPainter header_painter
private ProgressBarBarPainter progress_bar_bar_painter
private ProgressBarChunkPainter progress_bar_chunk_painter
private ScrollBarArrowButtonPainter scroll_bar_arrow_button_painter
private ScrollBarThumbButtonPainter scroll_bar_thumb_button_painter
private ScrollBarTrackPainter scroll_bar_track_painter
private StatusBarGripperPainter status_bar_gripper_painter
private TabControlPanePainter tab_control_pane_painter
private TabControlTabItemPainter tab_control_tab_item_painter
private TextBoxPainter text_box_painter
private ToolBarPainter tool_bar_painter
private ToolBarButtonPainter tool_bar_button_painter
private ToolBarCheckedButtonPainter tool_bar_checked_button_painter
private TrackBarTrackPainter track_bar_track_painter
private TrackBarThumbPainter track_bar_thumb_painter
private TreeViewGlyphPainter tree_view_glyph_painter
private UpDownPainter up_down_painter
private WidgetType WidgetTypeNotNeeded
private string GobjectLibraryName
private string GdkLibraryName
private string GdkPixbufLibraryName
private string GtkLibraryName
private int G_TYPE_FUNDAMENTAL_SHIFT
public GtkPlus Instance
public GtkPlus get_Instance()
public bool Initialize()
protected void Finalize()
public void ButtonPaint(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, bool default, GtkPlusState state)
public void CheckBoxPaint(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state, GtkPlusToggleButtonValue value)
private Size GetGtkCheckButtonIndicatorSize(WidgetType widgetType)
public Size CheckBoxGetSize()
public void ComboBoxPaintDropDownButton(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state)
public void ComboBoxPaintBorder(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea)
public void GroupBoxPaint(IDeviceContext dc, Rectangle bounds, Rectangle excludedArea, GtkPlusState state)
public void HeaderPaint(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state)
public void ProgressBarPaintBar(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea)
public void ProgressBarPaintChunk(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea)
public Rectangle ProgressBarGetBackgroundContentRectagle(Rectangle bounds)
public void RadioButtonPaint(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state, GtkPlusToggleButtonValue value)
public Size RadioButtonGetSize()
public void ScrollBarPaintArrowButton(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state, bool horizontal, bool upOrLeft)
public void ScrollBarPaintThumbButton(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state, bool horizontal)
public void ScrollBarPaintTrack(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state, bool horizontal, bool upOrLeft)
public void StatusBarPaintGripper(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea)
public void TabControlPaintPane(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea)
public void TabControlPaintTabItem(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state)
public void TextBoxPaint(IDeviceContext dc, Rectangle bounds, Rectangle excludedArea, GtkPlusState state)
public void ToolBarPaint(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea)
public void ToolBarPaintButton(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state)
public void ToolBarPaintCheckedButton(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea)
public void TrackBarPaintTrack(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, bool horizontal)
public void TrackBarPaintThumb(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, GtkPlusState state, bool horizontal)
public void TreeViewPaintGlyph(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, bool closed)
public void UpDownPaint(IDeviceContext dc, Rectangle bounds, Rectangle clippingArea, bool up, GtkPlusState state)
private void Paint(WidgetType widgetType, Rectangle bounds, IDeviceContext dc, Rectangle clippingArea, Painter painter)
private void PaintExcludingArea(WidgetType widgetType, Rectangle bounds, IDeviceContext dc, Rectangle excludedArea, Painter painter)
private void Paint(WidgetType widgetType, Rectangle bounds, IDeviceContext dc, TransparencyType transparencyType, Color background, DeviceContextType deviceContextType, Rectangle clippingArea, Painter painter, Rectangle excludedArea)
private void Paint(IntPtr drawable, IntPtr gc, Rectangle rectangle, WidgetType widgetType, IntPtr& pixbuf, IntPtr& pixelData, Int32& rowstride, Rectangle clippingArea, Painter painter, Rectangle excludedArea)
private GtkShadowType GetWidgetStyleShadowType(IntPtr widget)
private int GetWidgetStyleInteger(IntPtr widget, string propertyName)
private float GetWidgetStyleSingle(IntPtr widget, string propertyName)
private bool GetWidgetStyleBoolean(IntPtr widget, string propertyName)
private IntPtr GetWidgetStyle(IntPtr widget)
private void gdk_draw_rectangle(IntPtr drawable, IntPtr gc, bool filled, int x, int y, int width, int height)
private IntPtr gdk_gc_new(IntPtr drawable)
private void gdk_gc_set_rgb_fg_color(IntPtr gc, GdkColor& color)
private IntPtr gdk_pixbuf_get_from_drawable(IntPtr dest, IntPtr src, IntPtr cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height)
private IntPtr gdk_pixmap_new(IntPtr drawable, int width, int height, int depth)
private IntPtr gdk_pixbuf_get_pixels(IntPtr pixbuf)
private int gdk_pixbuf_get_rowstride(IntPtr pixbuf)
private IntPtr gdk_pixbuf_new(GdkColorspace colorspace, bool has_alpha, int bits_per_sample, int width, int height)
private bool gtk_init_check(Int32& argc, String[]& argv)
private IntPtr gtk_check_version(UInt32 required_major, UInt32 required_minor, UInt32 required_micro)
private void gtk_container_add(IntPtr container, IntPtr widget)
private void gtk_container_forall(IntPtr container, GtkCallback callback, IntPtr callback_data)
private void gtk_object_destroy(IntPtr object)
private IntPtr gtk_rc_get_style(IntPtr widget)
private IntPtr gtk_style_attach(IntPtr style, IntPtr window)
private void gtk_widget_realize(IntPtr widget)
private void gtk_widget_style_get(IntPtr widget, string property, Int32& value, IntPtr nullTerminator)
private void gtk_widget_style_get(IntPtr widget, string property, Single& value, IntPtr nullTerminator)
private void gtk_widget_style_get(IntPtr widget, string property1, Int32& value1, string property2, Int32& value2, IntPtr nullTerminator)
private void gtk_widget_style_get(IntPtr widget, string property, GtkShadowType& value, IntPtr nullTerminator)
private void gtk_widget_style_get(IntPtr widget, string property, Boolean& value, IntPtr nullTerminator)
private IntPtr gtk_window_new(GtkWindowType type)
private void gtk_window_set_default(IntPtr window, IntPtr default_widget)
private IntPtr gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size)
private IntPtr gtk_widget_get_style(IntPtr widget)
private IntPtr gtk_tree_view_column_new()
private int gtk_tree_view_insert_column(IntPtr tree_view, IntPtr column, int position)
private void gtk_toolbar_insert(IntPtr toolbar, IntPtr item, int pos)
private IntPtr gtk_bin_get_child(IntPtr bin)
private IntPtr gtk_arrow_get_type()
private IntPtr gtk_container_get_type()
private IntPtr gtk_toggle_button_get_type()
private IntPtr gtk_button_new()
private IntPtr gtk_check_button_new()
private IntPtr gtk_combo_box_entry_new()
private IntPtr gtk_entry_new()
private IntPtr gtk_fixed_new()
private IntPtr gtk_frame_new(string label)
private IntPtr gtk_hscale_new_with_range(double min, double max, double step)
private IntPtr gtk_hscrollbar_new(IntPtr adjustment)
private IntPtr gtk_notebook_new()
private IntPtr gtk_progress_bar_new()
private IntPtr gtk_radio_button_new(IntPtr group)
private IntPtr gtk_spin_button_new(IntPtr adjustment, double climb_rate, UInt32 digits)
private IntPtr gtk_statusbar_new()
private IntPtr gtk_toggle_tool_button_new()
private IntPtr gtk_toolbar_new()
private IntPtr gtk_tool_button_new(IntPtr icon_widget, string label)
private IntPtr gtk_tree_view_new()
private IntPtr gtk_vscale_new_with_range(double min, double max, double step)
private IntPtr gtk_vscrollbar_new(IntPtr adjustment)
private void gtk_paint_arrow(IntPtr style, IntPtr window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle& area, IntPtr widget, string detail, GtkArrowType arrow_type, bool fill, int x, int y, int width, int height)
private void gtk_paint_box(IntPtr style, IntPtr window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle& area, IntPtr widget, string detail, int x, int y, int width, int height)
private void gtk_paint_box_gap(IntPtr style, IntPtr window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle& area, IntPtr widget, string detail, int x, int y, int width, int height, GtkPositionType gap_side, int gap_x, int gap_width)
private void gtk_paint_check(IntPtr style, IntPtr window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle& area, IntPtr widget, string detail, int x, int y, int width, int height)
private void gtk_paint_expander(IntPtr style, IntPtr window, GtkStateType state_type, GdkRectangle& area, IntPtr widget, string detail, int x, int y, GtkExpanderStyle expander_style)
private void gtk_paint_extension(IntPtr style, IntPtr window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle& area, IntPtr widget, string detail, int x, int y, int width, int height, GtkPositionType gap_side)
private void gtk_paint_flat_box(IntPtr style, IntPtr window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle& area, IntPtr widget, string detail, int x, int y, int width, int height)
private void gtk_paint_option(IntPtr style, IntPtr window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle& area, IntPtr widget, string detail, int x, int y, int width, int height)
private void gtk_paint_resize_grip(IntPtr style, IntPtr window, GtkStateType state_type, GdkRectangle& area, IntPtr widget, string detail, GdkWindowEdge edge, int x, int y, int width, int height)
private void gtk_paint_shadow(IntPtr style, IntPtr window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle& area, IntPtr widget, string detail, int x, int y, int width, int height)
private void gtk_paint_slider(IntPtr style, IntPtr window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle& area, IntPtr widget, string detail, int x, int y, int width, int height, GtkOrientation orientation)
private void GTK_WIDGET_SET_FLAGS(IntPtr wid, GtkWidgetFlags flag)
private IntPtr g_object_ref(IntPtr object)
private void g_object_unref(IntPtr object)
private bool g_type_check_instance_is_a(IntPtr type_instance, IntPtr iface_type)
private void g_object_get(IntPtr object, string property_name, Boolean& value, IntPtr nullTerminator)
}
internal System.Windows.Forms.VisualStyles.GtkPlusState : Enum {
public int value__
public GtkPlusState Normal
public GtkPlusState Pressed
public GtkPlusState Hot
public GtkPlusState Selected
public GtkPlusState Disabled
}
internal System.Windows.Forms.VisualStyles.GtkPlusToggleButtonValue : Enum {
public int value__
public GtkPlusToggleButtonValue Unchecked
public GtkPlusToggleButtonValue Mixed
public GtkPlusToggleButtonValue Checked
}
internal System.Windows.Forms.VisualStyles.HEADERITEMSTATES : Enum {
public int value__
public HEADERITEMSTATES HIS_NORMAL
public HEADERITEMSTATES HIS_HOT
public HEADERITEMSTATES HIS_PRESSED
}
internal System.Windows.Forms.VisualStyles.HEADERPARTS : Enum {
public int value__
public HEADERPARTS HP_HEADERITEM
}
public System.Windows.Forms.VisualStyles.HitTestCode : Enum {
public int value__
public HitTestCode Nowhere
public HitTestCode Client
public HitTestCode Left
public HitTestCode Right
public HitTestCode Top
public HitTestCode TopLeft
public HitTestCode TopRight
public HitTestCode Bottom
public HitTestCode BottomLeft
public HitTestCode BottomRight
}
public System.Windows.Forms.VisualStyles.HitTestOptions : Enum {
public int value__
public HitTestOptions BackgroundSegment
public HitTestOptions FixedBorder
public HitTestOptions Caption
public HitTestOptions ResizingBorderLeft
public HitTestOptions ResizingBorderTop
public HitTestOptions ResizingBorderRight
public HitTestOptions ResizingBorderBottom
public HitTestOptions ResizingBorder
public HitTestOptions SizingTemplate
public HitTestOptions SystemSizingMargins
}
public System.Windows.Forms.VisualStyles.HorizontalAlign : Enum {
public int value__
public HorizontalAlign Left
public HorizontalAlign Center
public HorizontalAlign Right
}
public System.Windows.Forms.VisualStyles.IconEffect : Enum {
public int value__
public IconEffect None
public IconEffect Glow
public IconEffect Shadow
public IconEffect Pulse
public IconEffect Alpha
}
public System.Windows.Forms.VisualStyles.ImageOrientation : Enum {
public int value__
public ImageOrientation Vertical
public ImageOrientation Horizontal
}
public System.Windows.Forms.VisualStyles.ImageSelectType : Enum {
public int value__
public ImageSelectType None
public ImageSelectType Size
public ImageSelectType Dpi
}
public System.Windows.Forms.VisualStyles.IntegerProperty : Enum {
public int value__
public IntegerProperty ImageCount
public IntegerProperty AlphaLevel
public IntegerProperty BorderSize
public IntegerProperty RoundCornerWidth
public IntegerProperty RoundCornerHeight
public IntegerProperty GradientRatio1
public IntegerProperty GradientRatio2
public IntegerProperty GradientRatio3
public IntegerProperty GradientRatio4
public IntegerProperty GradientRatio5
public IntegerProperty ProgressChunkSize
public IntegerProperty ProgressSpaceSize
public IntegerProperty Saturation
public IntegerProperty TextBorderSize
public IntegerProperty AlphaThreshold
public IntegerProperty Width
public IntegerProperty Height
public IntegerProperty GlyphIndex
public IntegerProperty TrueSizeStretchMark
public IntegerProperty MinDpi1
public IntegerProperty MinDpi2
public IntegerProperty MinDpi3
public IntegerProperty MinDpi4
public IntegerProperty MinDpi5
}
internal System.Windows.Forms.VisualStyles.IVisualStyles {
public string VisualStyleInformationAuthor
public string VisualStyleInformationColorScheme
public string VisualStyleInformationCompany
public Color VisualStyleInformationControlHighlightHot
public string VisualStyleInformationCopyright
public string VisualStyleInformationDescription
public string VisualStyleInformationDisplayName
public string VisualStyleInformationFileName
public bool VisualStyleInformationIsSupportedByOS
public int VisualStyleInformationMinimumColorDepth
public string VisualStyleInformationSize
public bool VisualStyleInformationSupportsFlatMenus
public Color VisualStyleInformationTextControlBorder
public string VisualStyleInformationUrl
public string VisualStyleInformationVersion
public int UxThemeCloseThemeData(IntPtr hTheme)
public int UxThemeDrawThemeBackground(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds)
public int UxThemeDrawThemeBackground(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Rectangle clipRectangle)
public int UxThemeDrawThemeEdge(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Edges edges, EdgeStyle style, EdgeEffects effects, Rectangle& result)
public int UxThemeDrawThemeParentBackground(IDeviceContext dc, Rectangle bounds, Control childControl)
public int UxThemeDrawThemeText(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, string text, TextFormatFlags textFlags, Rectangle bounds)
public int UxThemeGetThemeBackgroundContentRect(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Rectangle& result)
public int UxThemeGetThemeBackgroundExtent(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle contentBounds, Rectangle& result)
public int UxThemeGetThemeBackgroundRegion(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Region& result)
public int UxThemeGetThemeBool(IntPtr hTheme, int iPartId, int iStateId, BooleanProperty prop, Boolean& result)
public int UxThemeGetThemeColor(IntPtr hTheme, int iPartId, int iStateId, ColorProperty prop, Color& result)
public int UxThemeGetThemeEnumValue(IntPtr hTheme, int iPartId, int iStateId, EnumProperty prop, Int32& result)
public int UxThemeGetThemeFilename(IntPtr hTheme, int iPartId, int iStateId, FilenameProperty prop, String& result)
public int UxThemeGetThemeInt(IntPtr hTheme, int iPartId, int iStateId, IntegerProperty prop, Int32& result)
public int UxThemeGetThemeMargins(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, MarginProperty prop, Padding& result)
public int UxThemeGetThemePartSize(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, ThemeSizeType type, Size& result)
public int UxThemeGetThemePartSize(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, ThemeSizeType type, Size& result)
public int UxThemeGetThemePosition(IntPtr hTheme, int iPartId, int iStateId, PointProperty prop, Point& result)
public int UxThemeGetThemeString(IntPtr hTheme, int iPartId, int iStateId, StringProperty prop, String& result)
public int UxThemeGetThemeTextExtent(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, string textToDraw, TextFormatFlags flags, Rectangle bounds, Rectangle& result)
public int UxThemeGetThemeTextExtent(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, string textToDraw, TextFormatFlags flags, Rectangle& result)
public int UxThemeGetThemeTextMetrics(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, TextMetrics& result)
public int UxThemeHitTestThemeBackground(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, HitTestOptions options, Rectangle backgroundRectangle, IntPtr hrgn, Point pt, HitTestCode& result)
public bool UxThemeIsAppThemed()
public bool UxThemeIsThemeActive()
public bool UxThemeIsThemeBackgroundPartiallyTransparent(IntPtr hTheme, int iPartId, int iStateId)
public bool UxThemeIsThemePartDefined(IntPtr hTheme, int iPartId)
public IntPtr UxThemeOpenThemeData(IntPtr hWnd, string classList)
public string get_VisualStyleInformationAuthor()
public string get_VisualStyleInformationColorScheme()
public string get_VisualStyleInformationCompany()
public Color get_VisualStyleInformationControlHighlightHot()
public string get_VisualStyleInformationCopyright()
public string get_VisualStyleInformationDescription()
public string get_VisualStyleInformationDisplayName()
public string get_VisualStyleInformationFileName()
public bool get_VisualStyleInformationIsSupportedByOS()
public int get_VisualStyleInformationMinimumColorDepth()
public string get_VisualStyleInformationSize()
public bool get_VisualStyleInformationSupportsFlatMenus()
public Color get_VisualStyleInformationTextControlBorder()
public string get_VisualStyleInformationUrl()
public string get_VisualStyleInformationVersion()
public void VisualStyleRendererDrawBackgroundExcludingArea(IntPtr theme, IDeviceContext dc, int part, int state, Rectangle bounds, Rectangle excludedArea)
}
public System.Windows.Forms.VisualStyles.MarginProperty : Enum {
public int value__
public MarginProperty SizingMargins
public MarginProperty ContentMargins
public MarginProperty CaptionMargins
}
public System.Windows.Forms.VisualStyles.OffsetType : Enum {
public int value__
public OffsetType TopLeft
public OffsetType TopRight
public OffsetType TopMiddle
public OffsetType BottomLeft
public OffsetType BottomRight
public OffsetType BottomMiddle
public OffsetType MiddleLeft
public OffsetType MiddleRight
public OffsetType LeftOfCaption
public OffsetType RightOfCaption
public OffsetType LeftOfLastButton
public OffsetType RightOfLastButton
public OffsetType AboveLastButton
public OffsetType BelowLastButton
}
public System.Windows.Forms.VisualStyles.PointProperty : Enum {
public int value__
public PointProperty Offset
public PointProperty TextShadowOffset
public PointProperty MinSize
public PointProperty MinSize1
public PointProperty MinSize2
public PointProperty MinSize3
public PointProperty MinSize4
public PointProperty MinSize5
}
internal System.Windows.Forms.VisualStyles.PROGRESSPARTS : Enum {
public int value__
public PROGRESSPARTS PP_BAR
public PROGRESSPARTS PP_BARVERT
public PROGRESSPARTS PP_CHUNK
public PROGRESSPARTS PP_CHUNKVERT
}
public System.Windows.Forms.VisualStyles.PushButtonState : Enum {
public int value__
public PushButtonState Normal
public PushButtonState Hot
public PushButtonState Pressed
public PushButtonState Disabled
public PushButtonState Default
}
internal System.Windows.Forms.VisualStyles.PUSHBUTTONSTATES : Enum {
public int value__
public PUSHBUTTONSTATES PBS_NORMAL
public PUSHBUTTONSTATES PBS_HOT
public PUSHBUTTONSTATES PBS_PRESSED
public PUSHBUTTONSTATES PBS_DISABLED
public PUSHBUTTONSTATES PBS_DEFAULTED
}
public System.Windows.Forms.VisualStyles.RadioButtonState : Enum {
public int value__
public RadioButtonState UncheckedNormal
public RadioButtonState UncheckedHot
public RadioButtonState UncheckedPressed
public RadioButtonState UncheckedDisabled
public RadioButtonState CheckedNormal
public RadioButtonState CheckedHot
public RadioButtonState CheckedPressed
public RadioButtonState CheckedDisabled
}
internal System.Windows.Forms.VisualStyles.RADIOBUTTONSTATES : Enum {
public int value__
public RADIOBUTTONSTATES RBS_UNCHECKEDNORMAL
public RADIOBUTTONSTATES RBS_UNCHECKEDHOT
public RADIOBUTTONSTATES RBS_UNCHECKEDPRESSED
public RADIOBUTTONSTATES RBS_UNCHECKEDDISABLED
public RADIOBUTTONSTATES RBS_CHECKEDNORMAL
public RADIOBUTTONSTATES RBS_CHECKEDHOT
public RADIOBUTTONSTATES RBS_CHECKEDPRESSED
public RADIOBUTTONSTATES RBS_CHECKEDDISABLED
}
internal System.Windows.Forms.VisualStyles.REBARPARTS : Enum {
public int value__
public REBARPARTS RP_BAND
}
public System.Windows.Forms.VisualStyles.ScrollBarArrowButtonState : Enum {
public int value__
public ScrollBarArrowButtonState UpNormal
public ScrollBarArrowButtonState UpHot
public ScrollBarArrowButtonState UpPressed
public ScrollBarArrowButtonState UpDisabled
public ScrollBarArrowButtonState DownNormal
public ScrollBarArrowButtonState DownHot
public ScrollBarArrowButtonState DownPressed
public ScrollBarArrowButtonState DownDisabled
public ScrollBarArrowButtonState LeftNormal
public ScrollBarArrowButtonState LeftHot
public ScrollBarArrowButtonState LeftPressed
public ScrollBarArrowButtonState LeftDisabled
public ScrollBarArrowButtonState RightNormal
public ScrollBarArrowButtonState RightHot
public ScrollBarArrowButtonState RightPressed
public ScrollBarArrowButtonState RightDisabled
}
internal System.Windows.Forms.VisualStyles.SCROLLBARPARTS : Enum {
public int value__
public SCROLLBARPARTS SBP_ARROWBTN
public SCROLLBARPARTS SBP_THUMBBTNHORZ
public SCROLLBARPARTS SBP_THUMBBTNVERT
public SCROLLBARPARTS SBP_LOWERTRACKHORZ
public SCROLLBARPARTS SBP_UPPERTRACKHORZ
public SCROLLBARPARTS SBP_LOWERTRACKVERT
public SCROLLBARPARTS SBP_UPPERTRACKVERT
public SCROLLBARPARTS SBP_GRIPPERHORZ
public SCROLLBARPARTS SBP_GRIPPERVERT
public SCROLLBARPARTS SBP_SIZEBOX
}
public System.Windows.Forms.VisualStyles.ScrollBarSizeBoxState : Enum {
public int value__
public ScrollBarSizeBoxState RightAlign
public ScrollBarSizeBoxState LeftAlign
}
public System.Windows.Forms.VisualStyles.ScrollBarState : Enum {
public int value__
public ScrollBarState Normal
public ScrollBarState Hot
public ScrollBarState Pressed
public ScrollBarState Disabled
}
internal System.Windows.Forms.VisualStyles.SCROLLBARSTYLESTATES : Enum {
public int value__
public SCROLLBARSTYLESTATES SCRBS_NORMAL
public SCROLLBARSTYLESTATES SCRBS_HOT
public SCROLLBARSTYLESTATES SCRBS_PRESSED
public SCROLLBARSTYLESTATES SCRBS_DISABLED
}
internal System.Windows.Forms.VisualStyles.SIZEBOXSTATES : Enum {
public int value__
public SIZEBOXSTATES SZB_RIGHTALIGN
public SIZEBOXSTATES SZB_LEFTALIGN
}
public System.Windows.Forms.VisualStyles.SizingType : Enum {
public int value__
public SizingType FixedSize
public SizingType Stretch
public SizingType Tile
}
internal System.Windows.Forms.VisualStyles.SPINPARTS : Enum {
public int value__
public SPINPARTS SPNP_UP
public SPINPARTS SPNP_DOWN
public SPINPARTS SPNP_UPHORZ
public SPINPARTS SPNP_DOWNHORZ
}
internal System.Windows.Forms.VisualStyles.STATUSPARTS : Enum {
public int value__
public STATUSPARTS SP_GRIPPER
}
public System.Windows.Forms.VisualStyles.StringProperty : Enum {
public int value__
public StringProperty Text
}
internal System.Windows.Forms.VisualStyles.TABITEMLEFTEDGESTATES : Enum {
public int value__
public TABITEMLEFTEDGESTATES TILES_NORMAL
public TABITEMLEFTEDGESTATES TILES_HOT
public TABITEMLEFTEDGESTATES TILES_SELECTED
public TABITEMLEFTEDGESTATES TILES_DISABLED
}
internal System.Windows.Forms.VisualStyles.TABITEMRIGHTEDGESTATES : Enum {
public int value__
public TABITEMRIGHTEDGESTATES TIRES_NORMAL
public TABITEMRIGHTEDGESTATES TIRES_HOT
public TABITEMRIGHTEDGESTATES TIRES_SELECTED
public TABITEMRIGHTEDGESTATES TIRES_DISABLED
}
public System.Windows.Forms.VisualStyles.TabItemState : Enum {
public int value__
public TabItemState Normal
public TabItemState Hot
public TabItemState Selected
public TabItemState Disabled
}
internal System.Windows.Forms.VisualStyles.TABITEMSTATES : Enum {
public int value__
public TABITEMSTATES TIS_NORMAL
public TABITEMSTATES TIS_HOT
public TABITEMSTATES TIS_SELECTED
public TABITEMSTATES TIS_DISABLED
}
internal System.Windows.Forms.VisualStyles.TABPARTS : Enum {
public int value__
public TABPARTS TABP_TABITEM
public TABPARTS TABP_TABITEMLEFTEDGE
public TABPARTS TABP_TABITEMRIGHTEDGE
public TABPARTS TABP_TABITEMBOTHEDGE
public TABPARTS TABP_TOPTABITEM
public TABPARTS TABP_TOPTABITEMLEFTEDGE
public TABPARTS TABP_TOPTABITEMRIGHTEDGE
public TABPARTS TABP_TOPTABITEMBOTHEDGE
public TABPARTS TABP_PANE
public TABPARTS TABP_BODY
}
public System.Windows.Forms.VisualStyles.TextBoxState : Enum {
public int value__
public TextBoxState Normal
public TextBoxState Hot
public TextBoxState Selected
public TextBoxState Disabled
public TextBoxState Readonly
public TextBoxState Assist
}
public System.Windows.Forms.VisualStyles.TextMetrics : ValueType {
private int ascent
private int average_char_width
private char break_char
private TextMetricsCharacterSet char_set
private char default_char
private int descent
private int digitized_aspect_x
private int digitized_aspect_y
private int external_leading
private char first_char
private int height
private int internal_leading
private bool italic
private char last_char
private int max_char_width
private int overhang
private TextMetricsPitchAndFamilyValues pitch_and_family
private bool struck_out
private bool underlined
private int weight
public int Ascent
public int AverageCharWidth
public char BreakChar
public TextMetricsCharacterSet CharSet
public char DefaultChar
public int Descent
public int DigitizedAspectX
public int DigitizedAspectY
public int ExternalLeading
public char FirstChar
public int Height
public int InternalLeading
public bool Italic
public char LastChar
public int MaxCharWidth
public int Overhang
public TextMetricsPitchAndFamilyValues PitchAndFamily
public bool StruckOut
public bool Underlined
public int Weight
public int get_Ascent()
public void set_Ascent(int value)
public int get_AverageCharWidth()
public void set_AverageCharWidth(int value)
public char get_BreakChar()
public void set_BreakChar(char value)
public TextMetricsCharacterSet get_CharSet()
public void set_CharSet(TextMetricsCharacterSet value)
public char get_DefaultChar()
public void set_DefaultChar(char value)
public int get_Descent()
public void set_Descent(int value)
public int get_DigitizedAspectX()
public void set_DigitizedAspectX(int value)
public int get_DigitizedAspectY()
public void set_DigitizedAspectY(int value)
public int get_ExternalLeading()
public void set_ExternalLeading(int value)
public char get_FirstChar()
public void set_FirstChar(char value)
public int get_Height()
public void set_Height(int value)
public int get_InternalLeading()
public void set_InternalLeading(int value)
public bool get_Italic()
public void set_Italic(bool value)
public char get_LastChar()
public void set_LastChar(char value)
public int get_MaxCharWidth()
public void set_MaxCharWidth(int value)
public int get_Overhang()
public void set_Overhang(int value)
public TextMetricsPitchAndFamilyValues get_PitchAndFamily()
public void set_PitchAndFamily(TextMetricsPitchAndFamilyValues value)
public bool get_StruckOut()
public void set_StruckOut(bool value)
public bool get_Underlined()
public void set_Underlined(bool value)
public int get_Weight()
public void set_Weight(int value)
}
public System.Windows.Forms.VisualStyles.TextMetricsCharacterSet : Enum {
public int value__
public TextMetricsCharacterSet Ansi
public TextMetricsCharacterSet Default
public TextMetricsCharacterSet Symbol
public TextMetricsCharacterSet Mac
public TextMetricsCharacterSet ShiftJis
public TextMetricsCharacterSet Hangul
public TextMetricsCharacterSet Johab
public TextMetricsCharacterSet Gb2312
public TextMetricsCharacterSet ChineseBig5
public TextMetricsCharacterSet Greek
public TextMetricsCharacterSet Turkish
public TextMetricsCharacterSet Vietnamese
public TextMetricsCharacterSet Hebrew
public TextMetricsCharacterSet Arabic
public TextMetricsCharacterSet Baltic
public TextMetricsCharacterSet Russian
public TextMetricsCharacterSet Thai
public TextMetricsCharacterSet EastEurope
public TextMetricsCharacterSet Oem
}
public System.Windows.Forms.VisualStyles.TextMetricsPitchAndFamilyValues : Enum {
public int value__
public TextMetricsPitchAndFamilyValues FixedPitch
public TextMetricsPitchAndFamilyValues Vector
public TextMetricsPitchAndFamilyValues TrueType
public TextMetricsPitchAndFamilyValues Device
}
public System.Windows.Forms.VisualStyles.TextShadowType : Enum {
public int value__
public TextShadowType None
public TextShadowType Single
public TextShadowType Continuous
}
public System.Windows.Forms.VisualStyles.ThemeSizeType : Enum {
public int value__
public ThemeSizeType Minimum
public ThemeSizeType True
public ThemeSizeType Draw
}
internal System.Windows.Forms.VisualStyles.THUMBSTATES : Enum {
public int value__
public THUMBSTATES TUS_NORMAL
public THUMBSTATES TUS_HOT
public THUMBSTATES TUS_PRESSED
public THUMBSTATES TUS_FOCUSED
public THUMBSTATES TUS_DISABLED
}
internal System.Windows.Forms.VisualStyles.THUMBVERTSTATES : Enum {
public int value__
public THUMBVERTSTATES TUVS_NORMAL
public THUMBVERTSTATES TUVS_HOT
public THUMBVERTSTATES TUVS_PRESSED
public THUMBVERTSTATES TUVS_FOCUSED
public THUMBVERTSTATES TUVS_DISABLED
}
internal System.Windows.Forms.VisualStyles.TOOLBARPARTS : Enum {
public int value__
public TOOLBARPARTS TP_BUTTON
}
public System.Windows.Forms.VisualStyles.ToolBarState : Enum {
public int value__
public ToolBarState Normal
public ToolBarState Hot
public ToolBarState Pressed
public ToolBarState Disabled
public ToolBarState Checked
public ToolBarState HotChecked
}
internal System.Windows.Forms.VisualStyles.TOOLBARSTYLESTATES : Enum {
public int value__
public TOOLBARSTYLESTATES TS_NORMAL
public TOOLBARSTYLESTATES TS_HOT
public TOOLBARSTYLESTATES TS_PRESSED
public TOOLBARSTYLESTATES TS_DISABLED
public TOOLBARSTYLESTATES TS_CHECKED
public TOOLBARSTYLESTATES TS_HOTCHECKED
}
internal System.Windows.Forms.VisualStyles.TOPTABITEMLEFTEDGESTATES : Enum {
public int value__
public TOPTABITEMLEFTEDGESTATES TTILES_NORMAL
public TOPTABITEMLEFTEDGESTATES TTILES_HOT
public TOPTABITEMLEFTEDGESTATES TTILES_SELECTED
public TOPTABITEMLEFTEDGESTATES TTILES_DISABLED
}
internal System.Windows.Forms.VisualStyles.TOPTABITEMRIGHTEDGESTATES : Enum {
public int value__
public TOPTABITEMRIGHTEDGESTATES TTIRES_NORMAL
public TOPTABITEMRIGHTEDGESTATES TTIRES_HOT
public TOPTABITEMRIGHTEDGESTATES TTIRES_SELECTED
public TOPTABITEMRIGHTEDGESTATES TTIRES_DISABLED
}
internal System.Windows.Forms.VisualStyles.TOPTABITEMSTATES : Enum {
public int value__
public TOPTABITEMSTATES TTIS_NORMAL
public TOPTABITEMSTATES TTIS_HOT
public TOPTABITEMSTATES TTIS_SELECTED
public TOPTABITEMSTATES TTIS_DISABLED
}
internal System.Windows.Forms.VisualStyles.TRACKBARPARTS : Enum {
public int value__
public TRACKBARPARTS TKP_TRACK
public TRACKBARPARTS TKP_TRACKVERT
public TRACKBARPARTS TKP_THUMB
public TRACKBARPARTS TKP_THUMBVERT
}
public System.Windows.Forms.VisualStyles.TrackBarThumbState : Enum {
public int value__
public TrackBarThumbState Normal
public TrackBarThumbState Hot
public TrackBarThumbState Pressed
public TrackBarThumbState Disabled
}
internal System.Windows.Forms.VisualStyles.TRACKSTATES : Enum {
public int value__
public TRACKSTATES TRS_NORMAL
}
internal System.Windows.Forms.VisualStyles.TRACKVERTSTATES : Enum {
public int value__
public TRACKVERTSTATES TRVS_NORMAL
}
internal System.Windows.Forms.VisualStyles.TREEVIEWPARTS : Enum {
public int value__
public TREEVIEWPARTS TVP_GLYPH
}
public System.Windows.Forms.VisualStyles.TrueSizeScalingType : Enum {
public int value__
public TrueSizeScalingType None
public TrueSizeScalingType Size
public TrueSizeScalingType Dpi
}
internal System.Windows.Forms.VisualStyles.UPHORZSTATES : Enum {
public int value__
public UPHORZSTATES UPHZS_NORMAL
public UPHORZSTATES UPHZS_HOT
public UPHORZSTATES UPHZS_PRESSED
public UPHORZSTATES UPHZS_DISABLED
}
internal System.Windows.Forms.VisualStyles.UPSTATES : Enum {
public int value__
public UPSTATES UPS_NORMAL
public UPSTATES UPS_HOT
public UPSTATES UPS_PRESSED
public UPSTATES UPS_DISABLED
}
internal System.Windows.Forms.VisualStyles.UXTheme : object {
public int CloseThemeData(IntPtr hTheme)
public int DrawThemeBackground(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, RECT& pRect, RECT& pClipRect)
public int DrawThemeBackground(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, RECT& pRect, IntPtr pClipRect)
public int DrawThemeEdge(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, RECT& pDestRect, UInt32 egde, UInt32 flags, RECT& pRect)
public int DrawThemeEdge(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, RECT& pDestRect, UInt32 edge, UInt32 flags, int pRect)
public int DrawThemeIcon(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, RECT& pRect, IntPtr himl, int iImageIndex)
public int DrawThemeParentBackground(IntPtr hWnd, IntPtr hdc, RECT& pRect)
public int DrawThemeParentBackground(IntPtr hWnd, IntPtr hdc, int pRect)
public int DrawThemeText(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, string text, int textLength, UInt32 textFlags, UInt32 textFlags2, RECT& pRect)
public int EnableTheming(int fEnable)
public IntPtr OpenThemeData(IntPtr hWnd, string classList)
public int GetThemeBackgroundContentRect(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, RECT& pBoundingRect, RECT& pContentRect)
public int GetThemeBackgroundExtent(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, RECT& pRect, RECT& pClipRect)
public int GetThemeBackgroundRegion(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, RECT& pRect, IntPtr& pRegion)
public int GetThemeBool(IntPtr hTheme, int iPartId, int iStateId, int iPropId, Int32& pfVal)
public int GetThemeColor(IntPtr hTheme, int iPartId, int iStateId, int iPropId, Int32& pColor)
public int GetThemeEnumValue(IntPtr hTheme, int iPartId, int iStateId, int iPropId, Int32& piVal)
public int GetThemeFilename(IntPtr hTheme, int iPartId, int iStateId, int iPropId, StringBuilder themeFileName, int themeFileNameLength)
public int GetThemeFont(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, int iPropId, LOGFONT& lf)
public IntPtr CreateFontIndirect(LOGFONT lplf)
public int GetThemeInt(IntPtr hTheme, int iPartId, int iStateId, int iPropId, Int32& piVal)
public int GetThemeMargins(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, int iPropId, RECT& prc, MARGINS& pMargins)
public int GetThemePartSize(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, RECT& pRect, int eSize, SIZE& size)
public int GetThemePartSize(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, IntPtr pRect, int eSize, SIZE& size)
public int GetThemePosition(IntPtr hTheme, int iPartId, int iStateId, int iPropId, POINT& pPoint)
public int GetThemeString(IntPtr hTheme, int iPartId, int iStateId, int iPropId, StringBuilder themeString, int themeStringLength)
public int GetThemeTextExtent(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, string text, int textLength, int textFlags, RECT& boundingRect, RECT& extentRect)
public int GetThemeTextExtent(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, string text, int textLength, int textFlags, int boundingRect, RECT& extentRect)
public int GetThemeTextMetrics(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, TEXTMETRIC& textMetric)
public int HitTestThemeBackground(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, UInt32 dwOptions, RECT& pRect, IntPtr hrgn, POINT ptTest, HitTestCode& code)
public int IsThemeBackgroundPartiallyTransparent(IntPtr hTheme, int iPartId, int iStateId)
public bool IsThemePartDefined(IntPtr hTheme, int iPartId, int iStateId)
public bool IsThemeActive()
public bool IsAppThemed()
public int HitTestThemeBackground(IntPtr hTheme, IntPtr hdc, int iPartId, int iStateId, UInt32 dwOptions, RECT& pRect, IntPtr hrgn, POINT ptTest, Int32& code)
public int GetThemeDocumentationProperty(string stringThemeName, string stringPropertyName, StringBuilder stringValue, int lengthValue)
public int GetCurrentThemeName(StringBuilder stringThemeName, int lengthThemeName, StringBuilder stringColorName, int lengthColorName, StringBuilder stringSizeName, int lengthSizeName)
public UInt32 GetThemeSysColor(IntPtr hTheme, int iColorId)
public int GetThemeSysInt(IntPtr hTheme, int iIntId, Int32& piVal)
public int GetThemeSysBool(IntPtr hTheme, int iBoolId)
}
public System.Windows.Forms.VisualStyles.VerticalAlignment : Enum {
public int value__
public VerticalAlignment Top
public VerticalAlignment Center
public VerticalAlignment Bottom
}
public System.Windows.Forms.VisualStyles.VisualStyleElement : object {
private string BUTTON
private string CLOCK
private string COMBOBOX
private string DATEPICKER
private string EDIT
private string EXPLORERBAR
private string HEADER
private string LISTVIEW
private string MENU
private string MENUBAND
private string PAGE
private string PROGRESS
private string REBAR
private string SCROLLBAR
private string SPIN
private string STARTPANEL
private string STATUS
private string TAB
private string TASKBAND
private string TASKBAR
private string TOOLBAR
private string TOOLTIP
private string TRACKBAR
private string TRAYNOTIFY
private string TREEVIEW
private string WINDOW
private string class_name
private int part
private int state
public string ClassName
public int Part
public int State
internal void .ctor(string className, int part, int state)
public string get_ClassName()
public int get_Part()
public int get_State()
public VisualStyleElement CreateElement(string className, int part, int state)
}
public System.Windows.Forms.VisualStyles.VisualStyleInformation : object {
public string Author
public string ColorScheme
public string Company
public Color ControlHighlightHot
public string Copyright
public string Description
public string DisplayName
public bool IsEnabledByUser
public bool IsSupportedByOS
public int MinimumColorDepth
public string Size
public bool SupportsFlatMenus
public Color TextControlBorder
public string Url
public string Version
private IVisualStyles VisualStyles
public string get_Author()
public string get_ColorScheme()
public string get_Company()
public Color get_ControlHighlightHot()
public string get_Copyright()
public string get_Description()
public string get_DisplayName()
public bool get_IsEnabledByUser()
public bool get_IsSupportedByOS()
public int get_MinimumColorDepth()
public string get_Size()
public bool get_SupportsFlatMenus()
public Color get_TextControlBorder()
public string get_Url()
public string get_Version()
private IVisualStyles get_VisualStyles()
}
public System.Windows.Forms.VisualStyles.VisualStyleRenderer : object {
private string class_name
private int part
private int state
private IntPtr theme
private int last_hresult
private ThemeHandleManager theme_handle_manager
public string Class
public IntPtr Handle
public int LastHResult
public int Part
public int State
public bool IsSupported
internal IVisualStyles VisualStyles
public void .ctor(string className, int part, int state)
public void .ctor(VisualStyleElement element)
public string get_Class()
public IntPtr get_Handle()
public int get_LastHResult()
public int get_Part()
public int get_State()
public bool get_IsSupported()
public bool IsElementDefined(VisualStyleElement element)
public void DrawBackground(IDeviceContext dc, Rectangle bounds)
public void DrawBackground(IDeviceContext dc, Rectangle bounds, Rectangle clipRectangle)
public Rectangle DrawEdge(IDeviceContext dc, Rectangle bounds, Edges edges, EdgeStyle style, EdgeEffects effects)
public void DrawImage(Graphics g, Rectangle bounds, ImageList imageList, int imageIndex)
public void DrawImage(Graphics g, Rectangle bounds, Image image)
public void DrawParentBackground(IDeviceContext dc, Rectangle bounds, Control childControl)
public void DrawText(IDeviceContext dc, Rectangle bounds, string textToDraw, bool drawDisabled, TextFormatFlags flags)
public void DrawText(IDeviceContext dc, Rectangle bounds, string textToDraw, bool drawDisabled)
public void DrawText(IDeviceContext dc, Rectangle bounds, string textToDraw)
public Rectangle GetBackgroundContentRectangle(IDeviceContext dc, Rectangle bounds)
public Rectangle GetBackgroundExtent(IDeviceContext dc, Rectangle contentBounds)
public Region GetBackgroundRegion(IDeviceContext dc, Rectangle bounds)
public bool GetBoolean(BooleanProperty prop)
public Color GetColor(ColorProperty prop)
public int GetEnumValue(EnumProperty prop)
public string GetFilename(FilenameProperty prop)
public Font GetFont(IDeviceContext dc, FontProperty prop)
public int GetInteger(IntegerProperty prop)
public Padding GetMargins(IDeviceContext dc, MarginProperty prop)
public Size GetPartSize(IDeviceContext dc, Rectangle bounds, ThemeSizeType type)
public Size GetPartSize(IDeviceContext dc, ThemeSizeType type)
public Point GetPoint(PointProperty prop)
public string GetString(StringProperty prop)
public Rectangle GetTextExtent(IDeviceContext dc, Rectangle bounds, string textToDraw, TextFormatFlags flags)
public Rectangle GetTextExtent(IDeviceContext dc, string textToDraw, TextFormatFlags flags)
public TextMetrics GetTextMetrics(IDeviceContext dc)
public HitTestCode HitTestBackground(IDeviceContext dc, Rectangle backgroundRectangle, IntPtr hRgn, Point pt, HitTestOptions options)
public HitTestCode HitTestBackground(Graphics g, Rectangle backgroundRectangle, Region region, Point pt, HitTestOptions options)
public HitTestCode HitTestBackground(IDeviceContext dc, Rectangle backgroundRectangle, Point pt, HitTestOptions options)
public bool IsBackgroundPartiallyTransparent()
public void SetParameters(string className, int part, int state)
public void SetParameters(VisualStyleElement element)
internal IVisualStyles get_VisualStyles()
internal void DrawBackgroundExcludingArea(IDeviceContext dc, Rectangle bounds, Rectangle excludedArea)
private bool IsElementKnownToBeSupported(string className, int part, int state)
}
internal System.Windows.Forms.VisualStyles.VisualStylesEngine : object {
private IVisualStyles instance
public IVisualStyles Instance
public IVisualStyles get_Instance()
private IVisualStyles Initialize()
}
internal System.Windows.Forms.VisualStyles.VisualStylesGtkPlus : object {
private GtkPlus GtkPlus
public string VisualStyleInformationAuthor
public string VisualStyleInformationColorScheme
public string VisualStyleInformationCompany
public Color VisualStyleInformationControlHighlightHot
public string VisualStyleInformationCopyright
public string VisualStyleInformationDescription
public string VisualStyleInformationDisplayName
public string VisualStyleInformationFileName
public bool VisualStyleInformationIsSupportedByOS
public int VisualStyleInformationMinimumColorDepth
public string VisualStyleInformationSize
public bool VisualStyleInformationSupportsFlatMenus
public Color VisualStyleInformationTextControlBorder
public string VisualStyleInformationUrl
public string VisualStyleInformationVersion
public bool Initialize()
private GtkPlus get_GtkPlus()
public int UxThemeCloseThemeData(IntPtr hTheme)
public int UxThemeDrawThemeParentBackground(IDeviceContext dc, Rectangle bounds, Control childControl)
public int UxThemeDrawThemeBackground(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Rectangle clipRectangle)
public int UxThemeDrawThemeBackground(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds)
private bool DrawBackground(ThemeHandle themeHandle, IDeviceContext dc, int part, int state, Rectangle bounds, Rectangle clipRectangle, Rectangle excludedArea)
private bool GetGtkPlusState(SCROLLBARSTYLESTATES state, GtkPlusState& result)
public int UxThemeDrawThemeEdge(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Edges edges, EdgeStyle style, EdgeEffects effects, Rectangle& result)
public int UxThemeDrawThemeText(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, string text, TextFormatFlags textFlags, Rectangle bounds)
public int UxThemeGetThemeBackgroundContentRect(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Rectangle& result)
private bool GetBackgroundContentRectangle(ThemeHandle handle, int part, int state, Rectangle bounds, Rectangle& result)
public int UxThemeGetThemeBackgroundExtent(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle contentBounds, Rectangle& result)
public int UxThemeGetThemeBackgroundRegion(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Region& result)
public int UxThemeGetThemeBool(IntPtr hTheme, int iPartId, int iStateId, BooleanProperty prop, Boolean& result)
public int UxThemeGetThemeColor(IntPtr hTheme, int iPartId, int iStateId, ColorProperty prop, Color& result)
public int UxThemeGetThemeEnumValue(IntPtr hTheme, int iPartId, int iStateId, EnumProperty prop, Int32& result)
public int UxThemeGetThemeFilename(IntPtr hTheme, int iPartId, int iStateId, FilenameProperty prop, String& result)
public int UxThemeGetThemeInt(IntPtr hTheme, int iPartId, int iStateId, IntegerProperty prop, Int32& result)
private bool GetInteger(ThemeHandle handle, int part, int state, IntegerProperty property, Int32& result)
public int UxThemeGetThemeMargins(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, MarginProperty prop, Padding& result)
public int UxThemeGetThemePartSize(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, ThemeSizeType type, Size& result)
public int UxThemeGetThemePartSize(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, ThemeSizeType type, Size& result)
private bool GetPartSize(ThemeHandle themeHandle, IDeviceContext dc, int part, int state, Rectangle bounds, bool rectangleSpecified, ThemeSizeType type, Size& result)
public int UxThemeGetThemePosition(IntPtr hTheme, int iPartId, int iStateId, PointProperty prop, Point& result)
public int UxThemeGetThemeString(IntPtr hTheme, int iPartId, int iStateId, StringProperty prop, String& result)
public int UxThemeGetThemeTextExtent(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, string textToDraw, TextFormatFlags flags, Rectangle bounds, Rectangle& result)
public int UxThemeGetThemeTextExtent(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, string textToDraw, TextFormatFlags flags, Rectangle& result)
public int UxThemeGetThemeTextMetrics(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, TextMetrics& result)
public int UxThemeHitTestThemeBackground(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, HitTestOptions options, Rectangle backgroundRectangle, IntPtr hrgn, Point pt, HitTestCode& result)
public bool UxThemeIsAppThemed()
public bool UxThemeIsThemeActive()
public bool UxThemeIsThemeBackgroundPartiallyTransparent(IntPtr hTheme, int iPartId, int iStateId)
public bool UxThemeIsThemePartDefined(IntPtr hTheme, int iPartId)
public IntPtr UxThemeOpenThemeData(IntPtr hWnd, string classList)
public string get_VisualStyleInformationAuthor()
public string get_VisualStyleInformationColorScheme()
public string get_VisualStyleInformationCompany()
public Color get_VisualStyleInformationControlHighlightHot()
public string get_VisualStyleInformationCopyright()
public string get_VisualStyleInformationDescription()
public string get_VisualStyleInformationDisplayName()
public string get_VisualStyleInformationFileName()
public bool get_VisualStyleInformationIsSupportedByOS()
public int get_VisualStyleInformationMinimumColorDepth()
public string get_VisualStyleInformationSize()
public bool get_VisualStyleInformationSupportsFlatMenus()
public Color get_VisualStyleInformationTextControlBorder()
public string get_VisualStyleInformationUrl()
public string get_VisualStyleInformationVersion()
public void VisualStyleRendererDrawBackgroundExcludingArea(IntPtr theme, IDeviceContext dc, int part, int state, Rectangle bounds, Rectangle excludedArea)
}
internal System.Windows.Forms.VisualStyles.VisualStylesNative : object {
public string VisualStyleInformationAuthor
public string VisualStyleInformationColorScheme
public string VisualStyleInformationCompany
public Color VisualStyleInformationControlHighlightHot
public string VisualStyleInformationCopyright
public string VisualStyleInformationDescription
public string VisualStyleInformationDisplayName
public string VisualStyleInformationFileName
public bool VisualStyleInformationIsSupportedByOS
public int VisualStyleInformationMinimumColorDepth
public string VisualStyleInformationSize
public bool VisualStyleInformationSupportsFlatMenus
public Color VisualStyleInformationTextControlBorder
public string VisualStyleInformationUrl
public string VisualStyleInformationVersion
public int UxThemeCloseThemeData(IntPtr hTheme)
public int UxThemeDrawThemeBackground(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds)
public int UxThemeDrawThemeBackground(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Rectangle clipRectangle)
public int UxThemeDrawThemeEdge(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Edges edges, EdgeStyle style, EdgeEffects effects, Rectangle& result)
public int UxThemeDrawThemeParentBackground(IDeviceContext dc, Rectangle bounds, Control childControl)
public int UxThemeDrawThemeText(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, string text, TextFormatFlags textFlags, Rectangle bounds)
public int UxThemeGetThemeBackgroundContentRect(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Rectangle& result)
public int UxThemeGetThemeBackgroundExtent(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle contentBounds, Rectangle& result)
public int UxThemeGetThemeBackgroundRegion(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, Region& result)
public int UxThemeGetThemeBool(IntPtr hTheme, int iPartId, int iStateId, BooleanProperty prop, Boolean& result)
public int UxThemeGetThemeColor(IntPtr hTheme, int iPartId, int iStateId, ColorProperty prop, Color& result)
public int UxThemeGetThemeEnumValue(IntPtr hTheme, int iPartId, int iStateId, EnumProperty prop, Int32& result)
public int UxThemeGetThemeFilename(IntPtr hTheme, int iPartId, int iStateId, FilenameProperty prop, String& result)
public int UxThemeGetThemeInt(IntPtr hTheme, int iPartId, int iStateId, IntegerProperty prop, Int32& result)
public int UxThemeGetThemeMargins(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, MarginProperty prop, Padding& result)
public int UxThemeGetThemePartSize(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, Rectangle bounds, ThemeSizeType type, Size& result)
public int UxThemeGetThemePartSize(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, ThemeSizeType type, Size& result)
public int UxThemeGetThemePosition(IntPtr hTheme, int iPartId, int iStateId, PointProperty prop, Point& result)
public int UxThemeGetThemeString(IntPtr hTheme, int iPartId, int iStateId, StringProperty prop, String& result)
public int UxThemeGetThemeTextExtent(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, string textToDraw, TextFormatFlags flags, Rectangle bounds, Rectangle& result)
public int UxThemeGetThemeTextExtent(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, string textToDraw, TextFormatFlags flags, Rectangle& result)
public int UxThemeGetThemeTextMetrics(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, TextMetrics& result)
public int UxThemeHitTestThemeBackground(IntPtr hTheme, IDeviceContext dc, int iPartId, int iStateId, HitTestOptions options, Rectangle backgroundRectangle, IntPtr hrgn, Point pt, HitTestCode& result)
public bool UxThemeIsAppThemed()
public bool UxThemeIsThemeActive()
public bool UxThemeIsThemePartDefined(IntPtr hTheme, int iPartId)
public bool UxThemeIsThemeBackgroundPartiallyTransparent(IntPtr hTheme, int iPartId, int iStateId)
public IntPtr UxThemeOpenThemeData(IntPtr hWnd, string classList)
public string get_VisualStyleInformationAuthor()
public string get_VisualStyleInformationColorScheme()
public string get_VisualStyleInformationCompany()
public Color get_VisualStyleInformationControlHighlightHot()
public string get_VisualStyleInformationCopyright()
public string get_VisualStyleInformationDescription()
public string get_VisualStyleInformationDisplayName()
public string get_VisualStyleInformationFileName()
private string GetData(string propertyName)
public bool get_VisualStyleInformationIsSupportedByOS()
public int get_VisualStyleInformationMinimumColorDepth()
public bool IsSupported()
public string get_VisualStyleInformationSize()
public bool get_VisualStyleInformationSupportsFlatMenus()
public Color get_VisualStyleInformationTextControlBorder()
public string get_VisualStyleInformationUrl()
public string get_VisualStyleInformationVersion()
public void VisualStyleRendererDrawBackgroundExcludingArea(IntPtr theme, IDeviceContext dc, int part, int state, Rectangle bounds, Rectangle excludedArea)
}
public System.Windows.Forms.VisualStyles.VisualStyleState : Enum {
public int value__
public VisualStyleState NoneEnabled
public VisualStyleState NonClientAreaEnabled
public VisualStyleState ClientAreaEnabled
public VisualStyleState ClientAndNonClientAreasEnabled
}
internal System.Windows.Forms.VKeyTableIndex : Enum {
public int value__
public VKeyTableIndex Qwerty
public VKeyTableIndex Qwertz
public VKeyTableIndex Dvorak
public VKeyTableIndex Qwertz105
public VKeyTableIndex Azerty
public VKeyTableIndex QwertyV2
public VKeyTableIndex AbntQwerty
public VKeyTableIndex QwertyJp106
public VKeyTableIndex Vnc
}
public System.Windows.Forms.VScrollBar : ScrollBar {
public RightToLeft RightToLeft
protected Size DefaultSize
protected CreateParams CreateParams
public void add_RightToLeftChanged(EventHandler value)
public void remove_RightToLeftChanged(EventHandler value)
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
protected Size get_DefaultSize()
protected CreateParams get_CreateParams()
}
public System.Windows.Forms.VScrollProperties : ScrollProperties {
public void .ctor(ScrollableControl container)
}
public System.Windows.Forms.WebBrowser : WebBrowserBase {
private bool allowNavigation
private bool allowWebBrowserDrop
private bool isWebBrowserContextMenuEnabled
private object objectForScripting
private bool webBrowserShortcutsEnabled
private bool scrollbarsEnabled
private WebBrowserReadyState readyState
private HtmlDocument document
private WebBrowserEncryptionLevel securityLevel
private Stream data
private bool isStreamSet
private string url
private EventHandler CanGoBackChanged
private EventHandler CanGoForwardChanged
private WebBrowserDocumentCompletedEventHandler DocumentCompleted
private EventHandler DocumentTitleChanged
private EventHandler EncryptionLevelChanged
private EventHandler FileDownload
private WebBrowserNavigatedEventHandler Navigated
private WebBrowserNavigatingEventHandler Navigating
private CancelEventHandler NewWindow
private WebBrowserProgressChangedEventHandler ProgressChanged
private EventHandler StatusTextChanged
private EventHandler PaddingChanged
public bool AllowNavigation
public bool AllowWebBrowserDrop
public bool CanGoBack
public bool CanGoForward
public HtmlDocument Document
public Stream DocumentStream
public string DocumentText
public string DocumentTitle
public string DocumentType
public WebBrowserEncryptionLevel EncryptionLevel
public bool Focused
public bool IsBusy
public bool IsOffline
public bool IsWebBrowserContextMenuEnabled
public object ObjectForScripting
public WebBrowserReadyState ReadyState
public bool ScriptErrorsSuppressed
public bool ScrollBarsEnabled
public string StatusText
public Uri Url
public Version Version
public bool WebBrowserShortcutsEnabled
protected Size DefaultSize
public Padding Padding
public bool get_AllowNavigation()
public void set_AllowNavigation(bool value)
public bool get_AllowWebBrowserDrop()
public void set_AllowWebBrowserDrop(bool value)
public bool get_CanGoBack()
public bool get_CanGoForward()
public HtmlDocument get_Document()
public Stream get_DocumentStream()
public void set_DocumentStream(Stream value)
public string get_DocumentText()
public void set_DocumentText(string value)
public string get_DocumentTitle()
public string get_DocumentType()
public WebBrowserEncryptionLevel get_EncryptionLevel()
public bool get_Focused()
public bool get_IsBusy()
public bool get_IsOffline()
public bool get_IsWebBrowserContextMenuEnabled()
public void set_IsWebBrowserContextMenuEnabled(bool value)
public object get_ObjectForScripting()
public void set_ObjectForScripting(object value)
public WebBrowserReadyState get_ReadyState()
public bool get_ScriptErrorsSuppressed()
public void set_ScriptErrorsSuppressed(bool value)
public bool get_ScrollBarsEnabled()
public void set_ScrollBarsEnabled(bool value)
public string get_StatusText()
public Uri get_Url()
public void set_Url(Uri value)
public Version get_Version()
public bool get_WebBrowserShortcutsEnabled()
public void set_WebBrowserShortcutsEnabled(bool value)
protected Size get_DefaultSize()
public Padding get_Padding()
public void set_Padding(Padding value)
public bool GoBack()
public bool GoForward()
public void GoHome()
public void Navigate(string urlString)
public void Navigate(Uri url)
public void Navigate(string urlString, bool newWindow)
public void Navigate(string urlString, string targetFrameName)
public void Navigate(Uri url, bool newWindow)
public void Navigate(Uri url, string targetFrameName)
public void Navigate(string urlString, string targetFrameName, Byte[] postData, string additionalHeaders)
public void Navigate(Uri url, string targetFrameName, Byte[] postData, string additionalHeaders)
public void Refresh()
public void Refresh(WebBrowserRefreshOption opt)
public void Stop()
public void GoSearch()
public void Print()
public void ShowPageSetupDialog()
public void ShowPrintDialog()
public void ShowPrintPreviewDialog()
public void ShowPropertiesDialog()
public void ShowSaveAsDialog()
protected void AttachInterfaces(object nativeActiveXObject)
protected void CreateSink()
protected WebBrowserSiteBase CreateWebBrowserSiteBase()
protected void DetachInterfaces()
protected void DetachSink()
protected void Dispose(bool disposing)
protected void WndProc(Message& m)
protected void OnCanGoBackChanged(EventArgs e)
protected void OnCanGoForwardChanged(EventArgs e)
protected void OnDocumentCompleted(WebBrowserDocumentCompletedEventArgs e)
protected void OnDocumentTitleChanged(EventArgs e)
protected void OnEncryptionLevelChanged(EventArgs e)
protected void OnFileDownload(EventArgs e)
protected void OnNavigated(WebBrowserNavigatedEventArgs e)
protected void OnNavigating(WebBrowserNavigatingEventArgs e)
protected void OnNewWindow(CancelEventArgs e)
protected void OnProgressChanged(WebBrowserProgressChangedEventArgs e)
protected void OnStatusTextChanged(EventArgs e)
public void add_CanGoBackChanged(EventHandler value)
public void remove_CanGoBackChanged(EventHandler value)
public void add_CanGoForwardChanged(EventHandler value)
public void remove_CanGoForwardChanged(EventHandler value)
public void add_DocumentCompleted(WebBrowserDocumentCompletedEventHandler value)
public void remove_DocumentCompleted(WebBrowserDocumentCompletedEventHandler value)
public void add_DocumentTitleChanged(EventHandler value)
public void remove_DocumentTitleChanged(EventHandler value)
public void add_EncryptionLevelChanged(EventHandler value)
public void remove_EncryptionLevelChanged(EventHandler value)
public void add_FileDownload(EventHandler value)
public void remove_FileDownload(EventHandler value)
public void add_Navigated(WebBrowserNavigatedEventHandler value)
public void remove_Navigated(WebBrowserNavigatedEventHandler value)
public void add_Navigating(WebBrowserNavigatingEventHandler value)
public void remove_Navigating(WebBrowserNavigatingEventHandler value)
public void add_NewWindow(CancelEventHandler value)
public void remove_NewWindow(CancelEventHandler value)
public void add_ProgressChanged(WebBrowserProgressChangedEventHandler value)
public void remove_ProgressChanged(WebBrowserProgressChangedEventHandler value)
public void add_StatusTextChanged(EventHandler value)
public void remove_StatusTextChanged(EventHandler value)
public void add_PaddingChanged(EventHandler value)
public void remove_PaddingChanged(EventHandler value)
internal bool OnNewWindowInternal()
internal void OnWebHostLoadStarted(object sender, LoadStartedEventArgs e)
internal void OnWebHostLoadCommited(object sender, LoadCommitedEventArgs e)
internal void OnWebHostProgressChanged(object sender, ProgressChangedEventArgs e)
internal void OnWebHostLoadFinished(object sender, LoadFinishedEventArgs e)
internal void OnWebHostSecurityChanged(object sender, SecurityChangedEventArgs e)
internal void OnWebHostContextMenuShown(object sender, ContextMenuEventArgs e)
internal void OnWebHostStatusChanged(object sender, StatusChangedEventArgs e)
private void SetScrollbars()
private void <OnWebHostContextMenuShown>b__153_0(object <p0>, EventArgs <p1>)
private void <OnWebHostContextMenuShown>b__153_1(object <p0>, EventArgs <p1>)
private void <OnWebHostContextMenuShown>b__153_2(object <p0>, EventArgs <p1>)
}
public System.Windows.Forms.WebBrowserBase : Control {
internal bool documentReady
private bool suppressDialogs
protected string status
private State state
private IWebBrowser webHost
internal bool SuppressDialogs
public object ActiveXInstance
public bool AllowDrop
public Color BackColor
public Image BackgroundImage
public ImageLayout BackgroundImageLayout
public Cursor Cursor
public bool Enabled
public Font Font
public Color ForeColor
public ImeMode ImeMode
public RightToLeft RightToLeft
public ISite Site
public string Text
public bool UseWaitCursor
protected Size DefaultSize
internal IWebBrowser WebHost
internal bool get_SuppressDialogs()
internal void set_SuppressDialogs(bool value)
public object get_ActiveXInstance()
public bool get_AllowDrop()
public void set_AllowDrop(bool value)
public Color get_BackColor()
public void set_BackColor(Color value)
public Image get_BackgroundImage()
public void set_BackgroundImage(Image value)
public ImageLayout get_BackgroundImageLayout()
public void set_BackgroundImageLayout(ImageLayout value)
public Cursor get_Cursor()
public void set_Cursor(Cursor value)
public bool get_Enabled()
public void set_Enabled(bool value)
public Font get_Font()
public void set_Font(Font value)
public Color get_ForeColor()
public void set_ForeColor(Color value)
public ImeMode get_ImeMode()
public void set_ImeMode(ImeMode value)
public RightToLeft get_RightToLeft()
public void set_RightToLeft(RightToLeft value)
public void set_Site(ISite value)
public string get_Text()
public void set_Text(string value)
public bool get_UseWaitCursor()
public void set_UseWaitCursor(bool value)
protected Size get_DefaultSize()
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds)
public bool PreProcessMessage(Message& msg)
protected void AttachInterfaces(object nativeActiveXObject)
protected void CreateSink()
protected WebBrowserSiteBase CreateWebBrowserSiteBase()
protected void DetachInterfaces()
protected void DetachSink()
protected void Dispose(bool disposing)
protected bool IsInputChar(char charCode)
protected void OnBackColorChanged(EventArgs e)
protected void OnFontChanged(EventArgs e)
protected void OnForeColorChanged(EventArgs e)
protected void OnGotFocus(EventArgs e)
protected void OnHandleCreated(EventArgs e)
protected void OnLostFocus(EventArgs e)
protected void OnParentChanged(EventArgs e)
protected void OnRightToLeftChanged(EventArgs e)
protected void OnVisibleChanged(EventArgs e)
protected bool ProcessMnemonic(char charCode)
protected void WndProc(Message& m)
internal IWebBrowser get_WebHost()
internal void SetBoundsCoreInternal(int x, int y, int width, int height, BoundsSpecified specified)
private void OnWebHostAlert(object sender, AlertEventArgs e)
private bool OnWebHostCreateNewWindow(object sender, CreateNewWindowEventArgs e)
internal void OnResizeInternal(EventArgs e)
private void OnWebHostMouseClick(object sender, EventArgs e)
private void OnWebHostFocus(object sender, EventArgs e)
internal bool OnNewWindowInternal()
internal void OnWebHostLoadStarted(object sender, LoadStartedEventArgs e)
internal void OnWebHostLoadCommited(object sender, LoadCommitedEventArgs e)
internal void OnWebHostProgressChanged(object sender, ProgressChangedEventArgs e)
internal void OnWebHostLoadFinished(object sender, LoadFinishedEventArgs e)
internal void OnWebHostSecurityChanged(object sender, SecurityChangedEventArgs e)
internal void OnWebHostContextMenuShown(object sender, ContextMenuEventArgs e)
internal void OnWebHostStatusChanged(object sender, StatusChangedEventArgs e)
public void add_BackColorChanged(EventHandler value)
public void remove_BackColorChanged(EventHandler value)
public void add_BackgroundImageChanged(EventHandler value)
public void remove_BackgroundImageChanged(EventHandler value)
public void add_BackgroundImageLayoutChanged(EventHandler value)
public void remove_BackgroundImageLayoutChanged(EventHandler value)
public void add_BindingContextChanged(EventHandler value)
public void remove_BindingContextChanged(EventHandler value)
public void add_ChangeUICues(UICuesEventHandler value)
public void remove_ChangeUICues(UICuesEventHandler value)
public void add_Click(EventHandler value)
public void remove_Click(EventHandler value)
public void add_CursorChanged(EventHandler value)
public void remove_CursorChanged(EventHandler value)
public void add_DoubleClick(EventHandler value)
public void remove_DoubleClick(EventHandler value)
public void add_DragDrop(DragEventHandler value)
public void remove_DragDrop(DragEventHandler value)
public void add_DragEnter(DragEventHandler value)
public void remove_DragEnter(DragEventHandler value)
public void add_DragLeave(EventHandler value)
public void remove_DragLeave(EventHandler value)
public void add_DragOver(DragEventHandler value)
public void remove_DragOver(DragEventHandler value)
public void add_EnabledChanged(EventHandler value)
public void remove_EnabledChanged(EventHandler value)
public void add_Enter(EventHandler value)
public void remove_Enter(EventHandler value)
public void add_FontChanged(EventHandler value)
public void remove_FontChanged(EventHandler value)
public void add_ForeColorChanged(EventHandler value)
public void remove_ForeColorChanged(EventHandler value)
public void add_GiveFeedback(GiveFeedbackEventHandler value)
public void remove_GiveFeedback(GiveFeedbackEventHandler value)
public void add_HelpRequested(HelpEventHandler value)
public void remove_HelpRequested(HelpEventHandler value)
public void add_ImeModeChanged(EventHandler value)
public void remove_ImeModeChanged(EventHandler value)
public void add_KeyDown(KeyEventHandler value)
public void remove_KeyDown(KeyEventHandler value)
public void add_KeyPress(KeyPressEventHandler value)
public void remove_KeyPress(KeyPressEventHandler value)
public void add_KeyUp(KeyEventHandler value)
public void remove_KeyUp(KeyEventHandler value)
public void add_Layout(LayoutEventHandler value)
public void remove_Layout(LayoutEventHandler value)
public void add_Leave(EventHandler value)
public void remove_Leave(EventHandler value)
public void add_MouseCaptureChanged(EventHandler value)
public void remove_MouseCaptureChanged(EventHandler value)
public void add_MouseClick(MouseEventHandler value)
public void remove_MouseClick(MouseEventHandler value)
public void add_MouseDoubleClick(MouseEventHandler value)
public void remove_MouseDoubleClick(MouseEventHandler value)
public void add_MouseDown(MouseEventHandler value)
public void remove_MouseDown(MouseEventHandler value)
public void add_MouseEnter(EventHandler value)
public void remove_MouseEnter(EventHandler value)
public void add_MouseHover(EventHandler value)
public void remove_MouseHover(EventHandler value)
public void add_MouseLeave(EventHandler value)
public void remove_MouseLeave(EventHandler value)
public void add_MouseMove(MouseEventHandler value)
public void remove_MouseMove(MouseEventHandler value)
public void add_MouseUp(MouseEventHandler value)
public void remove_MouseUp(MouseEventHandler value)
public void add_MouseWheel(MouseEventHandler value)
public void remove_MouseWheel(MouseEventHandler value)
public void add_Paint(PaintEventHandler value)
public void remove_Paint(PaintEventHandler value)
public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value)
public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value)
public void add_QueryContinueDrag(QueryContinueDragEventHandler value)
public void remove_QueryContinueDrag(QueryContinueDragEventHandler value)
public void add_RightToLeftChanged(EventHandler value)
public void remove_RightToLeftChanged(EventHandler value)
public void add_StyleChanged(EventHandler value)
public void remove_StyleChanged(EventHandler value)
public void add_TextChanged(EventHandler value)
public void remove_TextChanged(EventHandler value)
}
internal System.Windows.Forms.WebBrowserDialogs.AlertCheck : Generic {
private bool check
public bool Checked
public bool get_Checked()
public void .ctor(string title, string text, string checkMessage, bool checkState)
private void OkClick(object sender, EventArgs e)
private void CheckedChanged(object sender, EventArgs e)
}
internal System.Windows.Forms.WebBrowserDialogs.ConfirmCheck : Generic {
private bool check
public bool Checked
public bool get_Checked()
public void .ctor(string title, string text, string checkMessage, bool checkState)
private void OkClick(object sender, EventArgs e)
private void CancelClick(object sender, EventArgs e)
private void CheckedChanged(object sender, EventArgs e)
}
internal System.Windows.Forms.WebBrowserDialogs.Generic : Form {
private TableLayoutPanel table
public void .ctor(string title)
public DialogResult Show()
private void InitSize()
protected void InitTable(int rows, int cols)
protected void AddLabel(int row, int col, int colspan, string text, int width, int height)
protected void AddButton(int row, int col, int colspan, string text, int width, int height, bool isAccept, bool isCancel, EventHandler onClick)
protected void AddCheck(int row, int col, int colspan, string text, bool check, int width, int height, EventHandler onCheck)
protected void AddText(int row, int col, int colspan, string text, int width, int height, EventHandler onText)
protected void AddPassword(int row, int col, int colspan, string text, int width, int height, EventHandler onText)
protected DialogResult RunDialog()
}
internal System.Windows.Forms.WebBrowserDialogs.Prompt : Generic {
private string text
public string Text
public string get_Text()
public void .ctor(string title, string message, string text)
private void OkClick(object sender, EventArgs e)
private void onText(object sender, EventArgs e)
}
public System.Windows.Forms.WebBrowserDocumentCompletedEventArgs : EventArgs {
private Uri url
public Uri Url
public void .ctor(Uri url)
public Uri get_Url()
}
public System.Windows.Forms.WebBrowserDocumentCompletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebBrowserDocumentCompletedEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebBrowserDocumentCompletedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.WebBrowserEncryptionLevel : Enum {
public int value__
public WebBrowserEncryptionLevel Insecure
public WebBrowserEncryptionLevel Mixed
public WebBrowserEncryptionLevel Unknown
public WebBrowserEncryptionLevel Bit40
public WebBrowserEncryptionLevel Bit56
public WebBrowserEncryptionLevel Fortezza
public WebBrowserEncryptionLevel Bit128
}
public System.Windows.Forms.WebBrowserNavigatedEventArgs : EventArgs {
private Uri url
public Uri Url
public void .ctor(Uri url)
public Uri get_Url()
}
public System.Windows.Forms.WebBrowserNavigatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebBrowserNavigatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebBrowserNavigatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.WebBrowserNavigatingEventArgs : CancelEventArgs {
private Uri url
private string target_frame_name
public Uri Url
public string TargetFrameName
public void .ctor(Uri url, string targetFrameName)
public Uri get_Url()
public string get_TargetFrameName()
}
public System.Windows.Forms.WebBrowserNavigatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebBrowserNavigatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebBrowserNavigatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.WebBrowserProgressChangedEventArgs : EventArgs {
private long current_progress
private long maximum_progress
public long CurrentProgress
public long MaximumProgress
public void .ctor(long currentProgress, long maximumProgress)
public long get_CurrentProgress()
public long get_MaximumProgress()
}
public System.Windows.Forms.WebBrowserProgressChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WebBrowserProgressChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, WebBrowserProgressChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Windows.Forms.WebBrowserReadyState : Enum {
public int value__
public WebBrowserReadyState Uninitialized
public WebBrowserReadyState Loading
public WebBrowserReadyState Loaded
public WebBrowserReadyState Interactive
public WebBrowserReadyState Complete
}
public System.Windows.Forms.WebBrowserRefreshOption : Enum {
public int value__
public WebBrowserRefreshOption Normal
public WebBrowserRefreshOption IfExpired
public WebBrowserRefreshOption Continue
public WebBrowserRefreshOption Completely
}
public System.Windows.Forms.WebBrowserSiteBase : object {
public void Dispose()
protected void Dispose(bool disposing)
}
internal System.Windows.Forms.Win32DnD : object {
private UInt32 DATADIR_GET
private UInt32 S_OK
private UInt32 S_FALSE
private UInt32 DRAGDROP_S_DROP
private UInt32 DRAGDROP_S_CANCEL
private UInt32 DRAGDROP_S_USEDEFAULTCURSORS
private UInt32 E_NOTIMPL
private UInt32 E_NOINTERFACE
private UInt32 E_FAIL
private UInt32 OLE_E_ADVISENOTSUPPORTED
private UInt32 DV_E_FORMATETC
private QueryInterfaceDelegate DOQueryInterface
private AddRefDelegate DOAddRef
private ReleaseDelegate DORelease
private GetDataDelegate GetData
private GetDataHereDelegate GetDataHere
private QueryGetDataDelegate QueryGetData
private GetCanonicalFormatEtcDelegate GetCanonicalFormatEtc
private SetDataDelegate SetData
private EnumFormatEtcDelegate EnumFormatEtc
private DAdviseDelegate DAdvise
private DUnadviseDelegate DUnadvise
private EnumDAdviseDelegate EnumDAdvise
private QueryInterfaceDelegate DSQueryInterface
private AddRefDelegate DSAddRef
private ReleaseDelegate DSRelease
private QueryContinueDragDelegate QueryContinueDrag
private GiveFeedbackDelegate GiveFeedback
private QueryInterfaceDelegate DTQueryInterface
private AddRefDelegate DTAddRef
private ReleaseDelegate DTRelease
private DragEnterDelegate DragEnter
private DragOverDelegate DragOver
private DragLeaveDelegate DragLeave
private DropDelegate Drop
private DragEventArgs DragDropEventArgs
private GiveFeedbackEventArgs DragFeedbackEventArgs
private QueryContinueDragEventArgs DragContinueEventArgs
private ArrayList DragFormats
private FORMATETC[] DragFormatArray
private ArrayList DragMediums
private Guid IID_IUnknown
private Guid IID_IDataObject
private Guid IID_IDropSource
private Guid IID_IDropTarget
internal bool HandleWMDropFiles(MSG& msg)
private bool AddFormatAndMedium(ClipboardFormats cfFormat, object data)
private int FindFormat(FORMATETC pformatetc)
private void BuildFormats(object data)
internal DragDropEffects StartDrag(IntPtr Window, object data, DragDropEffects allowed)
internal bool UnregisterDropTarget(IntPtr Window)
internal bool RegisterDropTarget(IntPtr Window)
private MethodInfo CreateFuncPtrInterface(AssemblyBuilder assembly, string MethodName, Type ret_type, int param_count)
private UInt32 Win32RegisterDragDrop(IntPtr Window, IntPtr pDropTarget)
private int Win32RevokeDragDrop(IntPtr Window)
private UInt32 Win32DoDragDrop(IntPtr pDataObject, IntPtr pDropSource, IntPtr dwOKEffect, IntPtr& pdwEffect)
private int Win32OleInitialize(IntPtr pvReserved)
private int Win32DragQueryFile(IntPtr hDrop, int iFile, IntPtr lpszFile, int cch)
private int Win32DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch)
private UInt32 Win32SHCreateStdEnumFmtEtc(UInt32 cfmt, FORMATETC[] afmt, IntPtr& ppenumFormatEtc)
}
internal System.Windows.Forms.WindowActiveFlags : Enum {
public int value__
public WindowActiveFlags WA_INACTIVE
public WindowActiveFlags WA_ACTIVE
public WindowActiveFlags WA_CLICKACTIVE
}
internal System.Windows.Forms.WindowExStyles : Enum {
public int value__
public WindowExStyles WS_EX_DLGMODALFRAME
public WindowExStyles WS_EX_DRAGDETECT
public WindowExStyles WS_EX_NOPARENTNOTIFY
public WindowExStyles WS_EX_TOPMOST
public WindowExStyles WS_EX_ACCEPTFILES
public WindowExStyles WS_EX_TRANSPARENT
public WindowExStyles WS_EX_MDICHILD
public WindowExStyles WS_EX_TOOLWINDOW
public WindowExStyles WS_EX_WINDOWEDGE
public WindowExStyles WS_EX_CLIENTEDGE
public WindowExStyles WS_EX_CONTEXTHELP
public WindowExStyles WS_EX_RIGHT
public WindowExStyles WS_EX_LEFT
public WindowExStyles WS_EX_RTLREADING
public WindowExStyles WS_EX_LTRREADING
public WindowExStyles WS_EX_LEFTSCROLLBAR
public WindowExStyles WS_EX_LAYERED
public WindowExStyles WS_EX_RIGHTSCROLLBAR
public WindowExStyles WS_EX_CONTROLPARENT
public WindowExStyles WS_EX_STATICEDGE
public WindowExStyles WS_EX_APPWINDOW
public WindowExStyles WS_EX_NOINHERITLAYOUT
public WindowExStyles WS_EX_LAYOUTRTL
public WindowExStyles WS_EX_COMPOSITED
public WindowExStyles WS_EX_NOACTIVATE
public WindowExStyles WS_EX_OVERLAPPEDWINDOW
public WindowExStyles WS_EX_PALETTEWINDOW
}
public System.Windows.Forms.WindowsFormsSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty jit_debugging
public bool JitDebugging
protected ConfigurationPropertyCollection Properties
public bool get_JitDebugging()
public void set_JitDebugging(bool value)
protected ConfigurationPropertyCollection get_Properties()
}
public System.Windows.Forms.WindowsFormsSynchronizationContext : SynchronizationContext {
private bool auto_installed
private Control invoke_control
private SynchronizationContext previous_context
public bool AutoInstall
public bool get_AutoInstall()
public void set_AutoInstall(bool value)
public SynchronizationContext CreateCopy()
public void Dispose()
public void Post(SendOrPostCallback d, object state)
public void Send(SendOrPostCallback d, object state)
public void Uninstall()
}
internal System.Windows.Forms.WindowStyles : Enum {
public int value__
public WindowStyles WS_OVERLAPPED
public WindowStyles WS_POPUP
public WindowStyles WS_CHILD
public WindowStyles WS_MINIMIZE
public WindowStyles WS_VISIBLE
public WindowStyles WS_DISABLED
public WindowStyles WS_CLIPSIBLINGS
public WindowStyles WS_CLIPCHILDREN
public WindowStyles WS_MAXIMIZE
public WindowStyles WS_CAPTION
public WindowStyles WS_BORDER
public WindowStyles WS_DLGFRAME
public WindowStyles WS_VSCROLL
public WindowStyles WS_HSCROLL
public WindowStyles WS_SYSMENU
public WindowStyles WS_THICKFRAME
public WindowStyles WS_GROUP
public WindowStyles WS_TABSTOP
public WindowStyles WS_MINIMIZEBOX
public WindowStyles WS_MAXIMIZEBOX
public WindowStyles WS_TILED
public WindowStyles WS_ICONIC
public WindowStyles WS_SIZEBOX
public WindowStyles WS_POPUPWINDOW
public WindowStyles WS_OVERLAPPEDWINDOW
public WindowStyles WS_TILEDWINDOW
public WindowStyles WS_CHILDWINDOW
}
internal System.Windows.Forms.WindowType : Enum {
public int value__
public WindowType Client
public WindowType Whole
public WindowType Both
}
internal System.Windows.Forms.WinFileSystem : FileSystem {
private FSEntry desktopFSEntry
private FSEntry recentlyusedFSEntry
private FSEntry personalFSEntry
private FSEntry mycomputerpersonalFSEntry
private FSEntry mycomputerFSEntry
private FSEntry mynetworkFSEntry
public void WriteRecentlyUsedFiles(string fileToAdd)
public ArrayList GetRecentlyUsedFiles()
public ArrayList GetMyComputerContent()
public ArrayList GetMyNetworkContent()
protected FSEntry GetDesktopFSEntry()
protected FSEntry GetRecentlyUsedFSEntry()
protected FSEntry GetPersonalFSEntry()
protected FSEntry GetMyComputerPersonalFSEntry()
protected FSEntry GetMyComputerFSEntry()
protected FSEntry GetMyNetworkFSEntry()
}
internal System.Windows.Forms.X11DesktopColors : object {
private Desktop desktop
private string libgdk
private string libgtk
private void GtkInit()
private void FindDesktopEnvironment()
internal void Initialize()
private Color ColorFromGdkColor(GdkColorStruct gtkcolor)
private bool ReadKDEColorsheme()
private Color GetColorFromKDEString(string line)
private bool gtk_init_check(IntPtr argc, IntPtr argv)
internal IntPtr gdk_display_manager_get()
internal IntPtr gdk_display_manager_get_default_display(IntPtr display_manager)
private IntPtr gtk_invisible_new()
private IntPtr gtk_menu_new()
private void gtk_widget_ensure_style(IntPtr raw)
private IntPtr gtk_widget_get_style(IntPtr raw)
}
internal System.Windows.Forms.X11Dnd : object {
private MimeHandler[] MimeHandlers
private IntPtr[] XdndVersion
private IntPtr display
private DragData drag_data
private IntPtr XdndAware
private IntPtr XdndSelection
private IntPtr XdndEnter
private IntPtr XdndLeave
private IntPtr XdndPosition
private IntPtr XdndDrop
private IntPtr XdndFinished
private IntPtr XdndStatus
private IntPtr XdndTypeList
private IntPtr XdndActionCopy
private IntPtr XdndActionMove
private IntPtr XdndActionLink
private IntPtr XdndActionList
private int converts_pending
private bool position_recieved
private bool status_sent
private IntPtr target
private IntPtr source
private IntPtr toplevel
private IDataObject data
private Control control
private int pos_x
private int pos_y
private DragDropEffects allowed
private DragEventArgs drag_event
private Cursor CursorNo
private Cursor CursorCopy
private Cursor CursorMove
private Cursor CursorLink
private bool tracking
private bool dropped
private int motion_poll
public void .ctor(IntPtr display, X11Keyboard keyboard)
public bool InDrag()
public void SetAllowDrop(Hwnd hwnd, bool allow)
public DragDropEffects StartDrag(IntPtr handle, object data, DragDropEffects allowed_effects)
private void DndTickHandler(object sender, EventArgs e)
private void DefaultEnterLeave(object user_data)
public void HandleButtonUpMsg()
private void RemoveCapture(IntPtr handle)
public bool HandleMouseOver()
private void GetWindowsUnderPointer(IntPtr& window, IntPtr& toplevel, Int32& x_root, Int32& y_root)
public void HandleKeyMessage(MSG msg)
public bool HandleClientMessage(XEvent& xevent)
public bool HandleSelectionNotifyEvent(XEvent& xevent)
public bool HandleSelectionRequestEvent(XEvent& xevent)
private bool QueryContinue(bool escape, DragAction action)
private void RestoreDefaultCursor()
private void GiveFeedback(IntPtr action)
private void SetProperty(XEvent& xevent, IntPtr data, int length)
private void Reset()
private void ResetSourceData()
private void ResetTargetData()
private bool Accepting_HandleEnterEvent(XEvent& xevent)
private bool Accepting_HandlePositionEvent(XEvent& xevent)
private void Finish()
private bool Accepting_HandleDropEvent(XEvent& xevent)
private bool Accepting_HandleLeaveEvent(XEvent& xevent)
private bool HandleStatusEvent(XEvent& xevent)
private bool HandleFinishedEvent(XEvent& xevent)
private DragDropEffects EffectsFromX11Source(IntPtr source, IntPtr action_atom)
private DragDropEffects EffectFromAction(IntPtr action)
private IntPtr ActionFromEffect(DragDropEffects effect)
private bool ConvertData(XEvent& xevent)
private void SetDataWithFormats(object value)
private MimeHandler FindHandler(IntPtr atom)
private MimeHandler FindHandler(string name)
private void SendStatus(IntPtr source, DragDropEffects effect)
private void SendEnter(IntPtr handle, IntPtr from, IntPtr[] supported)
private void SendDrop(IntPtr handle, IntPtr from, IntPtr time)
private void SendPosition(IntPtr handle, IntPtr from, IntPtr action, int x, int y, IntPtr time)
private void SendLeave(IntPtr handle, IntPtr from)
private void SendFinished()
private void Init()
private IntPtr[] SourceSupportedList(XEvent& xevent)
private string GetText(XEvent& xevent, bool unicode)
private MemoryStream GetData(XEvent& xevent)
private Control MwfWindow(IntPtr window)
private bool IsWindowDndAware(IntPtr handle)
private IntPtr[] DetermineSupportedTypes(object data)
}
internal System.Windows.Forms.X11Keyboard : object {
internal object XlibLock
private IntPtr display
private IntPtr client_window
private IntPtr xim
private Hashtable xic_table
private XIMPositionContext positionContext
private XIMCallbackContext callbackContext
private XIMProperties ximStyle
private EventMask xic_event_mask
private StringBuilder lookup_buffer
private Byte[] lookup_byte_buffer
private int min_keycode
private int max_keycode
private int keysyms_per_keycode
private int syms
private Int32[] keyc2vkey
private Int32[] keyc2scan
private Byte[] key_state_table
private int lcid
private bool num_state
private bool cap_state
private bool initialized
private bool menu_state
private Encoding encoding
private int NumLockMask
private int AltGrMask
private bool have_Xutf8ResetIC
private string stored_keyevent_string
private XIMProperties styleRoot
private XIMProperties styleOverTheSpot
private XIMProperties styleOnTheSpot
private string ENV_NAME_XIM_STYLE
private bool have_Xutf8LookupString
private Int32[] nonchar_key_vkey
private Int32[] nonchar_key_scan
private Int32[] nonchar_vkey_key
private Encoding AnsiEncoding
public IntPtr ClientWindow
public EventMask KeyEventMask
public Keys ModifierKeys
public void .ctor(IntPtr display, IntPtr clientWindow)
private Encoding get_AnsiEncoding()
public IntPtr get_ClientWindow()
private void System.IDisposable.Dispose()
public void DestroyICForWindow(IntPtr window)
public void EnsureLayoutInitialized()
private void SetupXIM()
private void CreateXicForWindow(IntPtr window)
public EventMask get_KeyEventMask()
public Keys get_ModifierKeys()
private IntPtr GetXic(IntPtr window)
private bool FilterKey(XEvent e, int vkey)
public void FocusIn(IntPtr window)
public void FocusOut(IntPtr window)
public bool ResetKeyState(IntPtr hwnd, MSG& msg)
public void PreFilter(XEvent xevent)
public void KeyEvent(IntPtr hwnd, XEvent xevent, MSG& msg)
public bool TranslateMessage(MSG& msg)
public int ToKeycode(int key)
public int ToUnicode(int vkey, int scan, String& buffer)
internal string GetCompositionString()
private MSG SendImeComposition(string s)
private MSG SendKeyboardInput(VirtualKeys vkey, int scan, int keycode, KeybdEventFlags dw_flags, int time)
private IntPtr GenerateLParam(MSG m, int keyCode)
private void GenerateMessage(VirtualKeys vkey, int scan, int key_code, XEventName type, int event_time)
private void UpdateKeyState(XEvent xevent)
private void SetState(VirtualKeys key, bool state)
public int EventToVkey(XEvent e)
private void CreateConversionArray(KeyboardLayouts layouts, KeyboardLayout layout)
private KeyboardLayout DetectLayout(KeyboardLayouts layouts)
private int MapDeadKeySym(int val)
private XIMProperties[] GetSupportedInputStyles(IntPtr xim)
private XIMProperties[] GetPreferredStyles()
private IEnumerable GetMatchingStylesInPreferredOrder(IntPtr xim)
private IntPtr CreateXic(IntPtr window, IntPtr xim)
private IntPtr CreateOverTheSpotXic(IntPtr window, IntPtr xim)
private IntPtr CreateOnTheSpotXic(IntPtr window, IntPtr xim)
internal void SetCaretPos(CaretStruct caret, IntPtr handle, int x, int y)
internal void MoveCurrentCaretPos()
private int LookupString(XEvent& xevent, int len, XKeySym& keysym, XLookupStatus& status)
private IntPtr XOpenIM(IntPtr display, IntPtr rdb, IntPtr res_name, IntPtr res_class)
private IntPtr XCreateIC(IntPtr xim, string name, XIMProperties im_style, string name2, IntPtr value2, IntPtr terminator)
private IntPtr XCreateIC(IntPtr xim, string name, XIMProperties im_style, string name2, IntPtr value2, string name3, IntPtr value3, IntPtr terminator)
private IntPtr XVaCreateNestedList(int dummy, IntPtr name0, XPoint value0, IntPtr terminator)
private IntPtr XVaCreateNestedList(int dummy, IntPtr name0, XPoint value0, IntPtr name1, IntPtr value1, IntPtr terminator)
private IntPtr XVaCreateNestedList(int dummy, IntPtr name0, IntPtr value0, IntPtr name1, IntPtr value1, IntPtr name2, IntPtr value2, IntPtr name3, IntPtr value3, IntPtr terminator)
private IntPtr XCreateFontSet(IntPtr display, string name, IntPtr& list, Int32& count, IntPtr terminator)
internal void XFreeFontSet(IntPtr data)
private void XFreeStringList(IntPtr ptr)
private void XCloseIM(IntPtr xim)
private void XDestroyIC(IntPtr xic)
private string XGetIMValues(IntPtr xim, string name, IntPtr& value, IntPtr terminator)
private string XGetICValues(IntPtr xic, string name, EventMask& value, IntPtr terminator)
private void XSetICValues(IntPtr xic, string name, IntPtr value, IntPtr terminator)
private void XSetICFocus(IntPtr xic)
private void XUnsetICFocus(IntPtr xic)
private string Xutf8ResetIC(IntPtr xic)
private bool XSupportsLocale()
private bool XSetLocaleModifiers(string mods)
internal int XLookupString(XEvent& xevent, StringBuilder buffer, int num_bytes, IntPtr& keysym, IntPtr& status)
internal int Xutf8LookupString(IntPtr xic, XEvent& xevent, Byte[] buffer, int num_bytes, IntPtr& keysym, XLookupStatus& status)
private IntPtr XGetKeyboardMapping(IntPtr display, byte first_keycode, int keycode_count, Int32& keysyms_per_keycode_return)
private void XDisplayKeycodes(IntPtr display, Int32& min, Int32& max)
private UInt32 XKeycodeToKeysym(IntPtr display, int keycode, int index)
private int XKeysymToKeycode(IntPtr display, IntPtr keysym)
private int XKeysymToKeycode(IntPtr display, int keysym)
internal IntPtr XGetModifierMapping(IntPtr display)
internal int XFreeModifiermap(IntPtr modmap)
}
internal System.Windows.Forms.XAnyEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
}
internal System.Windows.Forms.XButtonEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal IntPtr root
internal IntPtr subwindow
internal IntPtr time
internal int x
internal int y
internal int x_root
internal int y_root
internal int state
internal int button
internal bool same_screen
}
internal System.Windows.Forms.XCirculateEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr xevent
internal IntPtr window
internal int place
}
internal System.Windows.Forms.XCirculateRequestEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr parent
internal IntPtr window
internal int place
}
internal System.Windows.Forms.XClientMessageEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal IntPtr message_type
internal int format
internal IntPtr ptr1
internal IntPtr ptr2
internal IntPtr ptr3
internal IntPtr ptr4
internal IntPtr ptr5
}
internal System.Windows.Forms.XColor : ValueType {
internal IntPtr pixel
internal ushort red
internal ushort green
internal ushort blue
internal byte flags
internal byte pad
}
internal System.Windows.Forms.XColormapEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal IntPtr colormap
internal bool c_new
internal int state
}
internal System.Windows.Forms.XConfigureEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr xevent
internal IntPtr window
internal int x
internal int y
internal int width
internal int height
internal int border_width
internal IntPtr above
internal bool override_redirect
}
internal System.Windows.Forms.XConfigureRequestEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr parent
internal IntPtr window
internal int x
internal int y
internal int width
internal int height
internal int border_width
internal IntPtr above
internal int detail
internal IntPtr value_mask
}
internal System.Windows.Forms.XCreateWindowEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr parent
internal IntPtr window
internal int x
internal int y
internal int width
internal int height
internal int border_width
internal bool override_redirect
}
internal System.Windows.Forms.XCrossingEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal IntPtr root
internal IntPtr subwindow
internal IntPtr time
internal int x
internal int y
internal int x_root
internal int y_root
internal NotifyMode mode
internal NotifyDetail detail
internal bool same_screen
internal bool focus
internal int state
}
internal System.Windows.Forms.XcursorImage : ValueType {
private int version
public int size
public int width
public int height
public int xhot
public int yhot
public int delay
public IntPtr pixels
public string ToString()
}
internal System.Windows.Forms.XcursorImages : ValueType {
public int nimage
public IntPtr images
}
internal System.Windows.Forms.XDestroyWindowEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr xevent
internal IntPtr window
}
internal System.Windows.Forms.XEmbedMessage : Enum {
public int value__
public XEmbedMessage EmbeddedNotify
public XEmbedMessage WindowActivate
public XEmbedMessage WindowDeactivate
public XEmbedMessage RequestFocus
public XEmbedMessage FocusIn
public XEmbedMessage FocusOut
public XEmbedMessage FocusNext
public XEmbedMessage FocusPrev
public XEmbedMessage ModalityOn
public XEmbedMessage ModalityOff
public XEmbedMessage RegisterAccelerator
public XEmbedMessage UnregisterAccelerator
public XEmbedMessage ActivateAccelerator
}
internal System.Windows.Forms.XErrorEvent : ValueType {
internal XEventName type
internal IntPtr display
internal IntPtr resourceid
internal IntPtr serial
internal byte error_code
internal XRequest request_code
internal byte minor_code
}
internal System.Windows.Forms.XErrorHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public int Invoke(IntPtr DisplayHandle, XErrorEvent& error_event)
public IAsyncResult BeginInvoke(IntPtr DisplayHandle, XErrorEvent& error_event, AsyncCallback callback, object object)
public int EndInvoke(XErrorEvent& error_event, IAsyncResult result)
}
internal System.Windows.Forms.XEvent : ValueType {
internal XEventName type
internal XAnyEvent AnyEvent
internal XKeyEvent KeyEvent
internal XButtonEvent ButtonEvent
internal XMotionEvent MotionEvent
internal XCrossingEvent CrossingEvent
internal XFocusChangeEvent FocusChangeEvent
internal XExposeEvent ExposeEvent
internal XGraphicsExposeEvent GraphicsExposeEvent
internal XNoExposeEvent NoExposeEvent
internal XVisibilityEvent VisibilityEvent
internal XCreateWindowEvent CreateWindowEvent
internal XDestroyWindowEvent DestroyWindowEvent
internal XUnmapEvent UnmapEvent
internal XMapEvent MapEvent
internal XMapRequestEvent MapRequestEvent
internal XReparentEvent ReparentEvent
internal XConfigureEvent ConfigureEvent
internal XGravityEvent GravityEvent
internal XResizeRequestEvent ResizeRequestEvent
internal XConfigureRequestEvent ConfigureRequestEvent
internal XCirculateEvent CirculateEvent
internal XCirculateRequestEvent CirculateRequestEvent
internal XPropertyEvent PropertyEvent
internal XSelectionClearEvent SelectionClearEvent
internal XSelectionRequestEvent SelectionRequestEvent
internal XSelectionEvent SelectionEvent
internal XColormapEvent ColormapEvent
internal XClientMessageEvent ClientMessageEvent
internal XMappingEvent MappingEvent
internal XErrorEvent ErrorEvent
internal XKeymapEvent KeymapEvent
internal XEventPad Pad
public string ToString()
public string ToString(object ev)
}
internal System.Windows.Forms.XEventName : Enum {
public int value__
public XEventName KeyPress
public XEventName KeyRelease
public XEventName ButtonPress
public XEventName ButtonRelease
public XEventName MotionNotify
public XEventName EnterNotify
public XEventName LeaveNotify
public XEventName FocusIn
public XEventName FocusOut
public XEventName KeymapNotify
public XEventName Expose
public XEventName GraphicsExpose
public XEventName NoExpose
public XEventName VisibilityNotify
public XEventName CreateNotify
public XEventName DestroyNotify
public XEventName UnmapNotify
public XEventName MapNotify
public XEventName MapRequest
public XEventName ReparentNotify
public XEventName ConfigureNotify
public XEventName ConfigureRequest
public XEventName GravityNotify
public XEventName ResizeRequest
public XEventName CirculateNotify
public XEventName CirculateRequest
public XEventName PropertyNotify
public XEventName SelectionClear
public XEventName SelectionRequest
public XEventName SelectionNotify
public XEventName ColormapNotify
public XEventName ClientMessage
public XEventName MappingNotify
public XEventName LASTEvent
}
internal System.Windows.Forms.XEventPad : ValueType {
internal IntPtr pad0
internal IntPtr pad1
internal IntPtr pad2
internal IntPtr pad3
internal IntPtr pad4
internal IntPtr pad5
internal IntPtr pad6
internal IntPtr pad7
internal IntPtr pad8
internal IntPtr pad9
internal IntPtr pad10
internal IntPtr pad11
internal IntPtr pad12
internal IntPtr pad13
internal IntPtr pad14
internal IntPtr pad15
internal IntPtr pad16
internal IntPtr pad17
internal IntPtr pad18
internal IntPtr pad19
internal IntPtr pad20
internal IntPtr pad21
internal IntPtr pad22
internal IntPtr pad23
}
internal System.Windows.Forms.XEventQueue : object {
private XQueue xqueue
private XQueue lqueue
private PaintQueue paint
internal ArrayList timer_list
private Thread thread
private bool dispatch_idle
private int InitialXEventSize
private int InitialLXEventSize
private int InitialPaintSize
public int Count
public PaintQueue Paint
public Thread Thread
public bool DispatchIdle
public void .ctor(Thread thread)
public int get_Count()
public PaintQueue get_Paint()
public Thread get_Thread()
public void Enqueue(XEvent xevent)
public void EnqueueLocked(XEvent xevent)
public XEvent Dequeue()
public XEvent Peek()
public bool get_DispatchIdle()
public void set_DispatchIdle(bool value)
}
internal System.Windows.Forms.XExposeEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal int x
internal int y
internal int width
internal int height
internal int count
}
internal System.Windows.Forms.XFocusChangeEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal int mode
internal NotifyDetail detail
}
internal System.Windows.Forms.XGCValues : ValueType {
internal GXFunction function
internal IntPtr plane_mask
internal IntPtr foreground
internal IntPtr background
internal int line_width
internal GCLineStyle line_style
internal GCCapStyle cap_style
internal GCJoinStyle join_style
internal GCFillStyle fill_style
internal GCFillRule fill_rule
internal GCArcMode arc_mode
internal IntPtr tile
internal IntPtr stipple
internal int ts_x_origin
internal int ts_y_origin
internal IntPtr font
internal GCSubwindowMode subwindow_mode
internal bool graphics_exposures
internal int clip_x_origin
internal int clib_y_origin
internal IntPtr clip_mask
internal int dash_offset
internal byte dashes
}
internal System.Windows.Forms.XGraphicsExposeEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr drawable
internal int x
internal int y
internal int width
internal int height
internal int count
internal int major_code
internal int minor_code
}
internal System.Windows.Forms.XGravityEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr xevent
internal IntPtr window
internal int x
internal int y
}
internal System.Windows.Forms.XIconSize : ValueType {
internal int min_width
internal int min_height
internal int max_width
internal int max_height
internal int width_inc
internal int height_inc
}
internal System.Windows.Forms.XIMCallback : object {
public IntPtr client_data
public XIMProc callback
private GCHandle gch
public void .ctor(IntPtr clientData, XIMProc proc)
protected void Finalize()
}
internal System.Windows.Forms.XIMCaretDirection : Enum {
public int value__
public XIMCaretDirection XIMForwardChar
public XIMCaretDirection XIMBackwardChar
public XIMCaretDirection XIMForwardWord
public XIMCaretDirection XIMBackwardWord
public XIMCaretDirection XIMCaretUp
public XIMCaretDirection XIMCaretDown
public XIMCaretDirection XIMNextLine
public XIMCaretDirection XIMPreviousLine
public XIMCaretDirection XIMLineStart
public XIMCaretDirection XIMLineEnd
public XIMCaretDirection XIMAbsolutePosition
public XIMCaretDirection XIMDontChange
}
internal System.Windows.Forms.XIMCaretStyle : Enum {
public int value__
public XIMCaretStyle IsInvisible
public XIMCaretStyle IsPrimary
public XIMCaretStyle IsSecondary
}
internal System.Windows.Forms.XIMFeedback : Enum {
public int value__
public XIMFeedback Reverse
public XIMFeedback Underline
public XIMFeedback Highlight
public XIMFeedback Primary
public XIMFeedback Secondary
public XIMFeedback Tertiary
}
internal System.Windows.Forms.XIMFeedbackStruct : ValueType {
public byte FeedbackMask
}
internal System.Windows.Forms.XIMPreeditCaretCallbackStruct : ValueType {
public int Position
public XIMCaretDirection Direction
public XIMCaretStyle Style
}
internal System.Windows.Forms.XIMPreeditDrawCallbackStruct : ValueType {
public int Caret
public int ChangeFirst
public int ChangeLength
public IntPtr Text
}
internal System.Windows.Forms.XIMProc : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public int Invoke(IntPtr xim, IntPtr clientData, IntPtr callData)
public IAsyncResult BeginInvoke(IntPtr xim, IntPtr clientData, IntPtr callData, AsyncCallback callback, object object)
public int EndInvoke(IAsyncResult result)
}
internal System.Windows.Forms.XIMProperties : Enum {
public int value__
public XIMProperties XIMPreeditArea
public XIMProperties XIMPreeditCallbacks
public XIMProperties XIMPreeditPosition
public XIMProperties XIMPreeditNothing
public XIMProperties XIMPreeditNone
public XIMProperties XIMStatusArea
public XIMProperties XIMStatusCallbacks
public XIMProperties XIMStatusNothing
public XIMProperties XIMStatusNone
}
internal System.Windows.Forms.XIMStyles : ValueType {
public ushort count_styles
public IntPtr supported_styles
}
internal System.Windows.Forms.XIMText : ValueType {
public ushort Length
public IntPtr Feedback
public bool EncodingIsWChar
public IntPtr String
}
internal System.Windows.Forms.XineramaScreenInfo : ValueType {
public int screen_number
public short x_org
public short y_org
public short width
public short height
}
internal System.Windows.Forms.XInitialState : Enum {
public int value__
public XInitialState DontCareState
public XInitialState NormalState
public XInitialState ZoomState
public XInitialState IconicState
public XInitialState InactiveState
}
internal System.Windows.Forms.XKeyBoardState : ValueType {
public int key_click_percent
public int bell_percent
public UInt32 bell_pitch
public UInt32 bell_duration
public IntPtr led_mask
public int global_auto_repeat
public AutoRepeats auto_repeats
}
internal System.Windows.Forms.XKeyEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal IntPtr root
internal IntPtr subwindow
internal IntPtr time
internal int x
internal int y
internal int x_root
internal int y_root
internal int state
internal int keycode
internal bool same_screen
}
internal System.Windows.Forms.XKeymapEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal byte key_vector0
internal byte key_vector1
internal byte key_vector2
internal byte key_vector3
internal byte key_vector4
internal byte key_vector5
internal byte key_vector6
internal byte key_vector7
internal byte key_vector8
internal byte key_vector9
internal byte key_vector10
internal byte key_vector11
internal byte key_vector12
internal byte key_vector13
internal byte key_vector14
internal byte key_vector15
internal byte key_vector16
internal byte key_vector17
internal byte key_vector18
internal byte key_vector19
internal byte key_vector20
internal byte key_vector21
internal byte key_vector22
internal byte key_vector23
internal byte key_vector24
internal byte key_vector25
internal byte key_vector26
internal byte key_vector27
internal byte key_vector28
internal byte key_vector29
internal byte key_vector30
internal byte key_vector31
}
internal System.Windows.Forms.XKeySym : Enum {
public UInt32 value__
public XKeySym XK_BackSpace
public XKeySym XK_Tab
public XKeySym XK_Clear
public XKeySym XK_Return
public XKeySym XK_Home
public XKeySym XK_Left
public XKeySym XK_Up
public XKeySym XK_Right
public XKeySym XK_Down
public XKeySym XK_Page_Up
public XKeySym XK_Page_Down
public XKeySym XK_End
public XKeySym XK_Begin
public XKeySym XK_Menu
public XKeySym XK_Shift_L
public XKeySym XK_Shift_R
public XKeySym XK_Control_L
public XKeySym XK_Control_R
public XKeySym XK_Caps_Lock
public XKeySym XK_Shift_Lock
public XKeySym XK_Meta_L
public XKeySym XK_Meta_R
public XKeySym XK_Alt_L
public XKeySym XK_Alt_R
public XKeySym XK_Super_L
public XKeySym XK_Super_R
public XKeySym XK_Hyper_L
public XKeySym XK_Hyper_R
}
public System.Windows.Forms.XLookupStatus : Enum {
public int value__
public XLookupStatus XBufferOverflow
public XLookupStatus XLookupNone
public XLookupStatus XLookupChars
public XLookupStatus XLookupKeySym
public XLookupStatus XLookupBoth
}
internal System.Windows.Forms.XMapEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr xevent
internal IntPtr window
internal bool override_redirect
}
internal System.Windows.Forms.XMappingEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal int request
internal int first_keycode
internal int count
}
internal System.Windows.Forms.XMapRequestEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr parent
internal IntPtr window
}
internal System.Windows.Forms.XModifierKeymap : ValueType {
public int max_keypermod
public IntPtr modifiermap
}
internal System.Windows.Forms.XMotionEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal IntPtr root
internal IntPtr subwindow
internal IntPtr time
internal int x
internal int y
internal int x_root
internal int y_root
internal int state
internal byte is_hint
internal bool same_screen
}
internal System.Windows.Forms.XNames : object {
public string XNVaNestedList
public string XNQueryInputStyle
public string XNClientWindow
public string XNInputStyle
public string XNFocusWindow
public string XNPreeditStartCallback
public string XNPreeditDoneCallback
public string XNPreeditDrawCallback
public string XNPreeditCaretCallback
public string XNPreeditStateNotifyCallback
public string XNPreeditAttributes
public string XNStatusStartCallback
public string XNStatusDoneCallback
public string XNStatusDrawCallback
public string XNStatusAttributes
public string XNArea
public string XNAreaNeeded
public string XNSpotLocation
public string XNFontSet
}
internal System.Windows.Forms.XNoExposeEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr drawable
internal int major_code
internal int minor_code
}
internal System.Windows.Forms.XplatUI : object {
private XplatUIDriver driver
internal ArrayList key_filters
public bool RunningOnUnix
public int ActiveWindowTrackingDelay
public Size Border3DSize
public Size BorderSize
public Size CaptionButtonSize
public int CaptionHeight
public int CaretBlinkTime
public int CaretWidth
public Size CursorSize
public Size DoubleClickSize
public int DoubleClickTime
public bool DragFullWindows
public Size DragSize
public Size FixedFrameBorderSize
public int FontSmoothingContrast
public int FontSmoothingType
public Size FrameBorderSize
public int HorizontalResizeBorderThickness
public int HorizontalScrollBarHeight
public Size IconSize
public bool IsActiveWindowTrackingEnabled
public bool IsComboBoxAnimationEnabled
public bool IsDropShadowEnabled
public bool IsFontSmoothingEnabled
public bool IsHotTrackingEnabled
public bool IsIconTitleWrappingEnabled
public bool IsKeyboardPreferred
public bool IsListBoxSmoothScrollingEnabled
public bool IsMenuAnimationEnabled
public bool IsMenuFadeEnabled
public bool IsMinimizeRestoreAnimationEnabled
public bool IsSelectionFadeEnabled
public bool IsSnapToDefaultEnabled
public bool IsTitleBarGradientEnabled
public bool IsToolTipAnimationEnabled
public int KeyboardSpeed
public int KeyboardDelay
public Size MaxWindowTrackSize
public bool MenuAccessKeysUnderlined
public Size MenuBarButtonSize
public Size MenuButtonSize
public int MenuShowDelay
public Size MinimizedWindowSize
public Size MinimizedWindowSpacingSize
public Size MinimumWindowSize
public Size MinimumFixedToolWindowSize
public Size MinimumSizeableToolWindowSize
public Size MinimumNoBorderWindowSize
public Size MinWindowTrackSize
public int MouseSpeed
public Size SmallIconSize
public int MenuHeight
public int MouseButtonCount
public bool MouseButtonsSwapped
public Size MouseHoverSize
public int MouseHoverTime
public int MouseWheelScrollDelta
public bool MouseWheelPresent
public LeftRightAlignment PopupMenuAlignment
public PowerStatus PowerStatus
public bool RequiresPositiveClientAreaSize
public int SizingBorderWidth
public Size SmallCaptionButtonSize
public bool UIEffectsEnabled
public bool UserClipWontExposeParent
public int VerticalResizeBorderThickness
public int VerticalScrollBarWidth
public Rectangle VirtualScreen
public Rectangle WorkingArea
public Screen[] AllScreens
public bool ThemesEnabled
public int ToolWindowCaptionHeight
public Size ToolWindowCaptionButtonSize
internal string Window(IntPtr handle)
private void DriverDebug(string format, Object[] args)
public bool get_RunningOnUnix()
public int get_ActiveWindowTrackingDelay()
internal string GetDefaultClassName(Type type)
public Size get_Border3DSize()
public Size get_BorderSize()
public Size get_CaptionButtonSize()
public int get_CaptionHeight()
public int get_CaretBlinkTime()
public int get_CaretWidth()
public Size get_CursorSize()
public Size get_DoubleClickSize()
public int get_DoubleClickTime()
public bool get_DragFullWindows()
public Size get_DragSize()
public Size get_FixedFrameBorderSize()
public int get_FontSmoothingContrast()
public int get_FontSmoothingType()
public Size get_FrameBorderSize()
public int get_HorizontalResizeBorderThickness()
public int get_HorizontalScrollBarHeight()
public Size get_IconSize()
public bool get_IsActiveWindowTrackingEnabled()
public bool get_IsComboBoxAnimationEnabled()
public bool get_IsDropShadowEnabled()
public bool get_IsFontSmoothingEnabled()
public bool get_IsHotTrackingEnabled()
public bool get_IsIconTitleWrappingEnabled()
public bool get_IsKeyboardPreferred()
public bool get_IsListBoxSmoothScrollingEnabled()
public bool get_IsMenuAnimationEnabled()
public bool get_IsMenuFadeEnabled()
public bool get_IsMinimizeRestoreAnimationEnabled()
public bool get_IsSelectionFadeEnabled()
public bool get_IsSnapToDefaultEnabled()
public bool get_IsTitleBarGradientEnabled()
public bool get_IsToolTipAnimationEnabled()
public int get_KeyboardSpeed()
public int get_KeyboardDelay()
public Size get_MaxWindowTrackSize()
public bool get_MenuAccessKeysUnderlined()
public Size get_MenuBarButtonSize()
public Size get_MenuButtonSize()
public int get_MenuShowDelay()
public Size get_MinimizedWindowSize()
public Size get_MinimizedWindowSpacingSize()
public Size get_MinimumWindowSize()
public Size get_MinimumFixedToolWindowSize()
public Size get_MinimumSizeableToolWindowSize()
public Size get_MinimumNoBorderWindowSize()
public Size get_MinWindowTrackSize()
public int get_MouseSpeed()
public Size get_SmallIconSize()
public int get_MenuHeight()
public int get_MouseButtonCount()
public bool get_MouseButtonsSwapped()
public Size get_MouseHoverSize()
public int get_MouseHoverTime()
public int get_MouseWheelScrollDelta()
public bool get_MouseWheelPresent()
public LeftRightAlignment get_PopupMenuAlignment()
public PowerStatus get_PowerStatus()
public bool get_RequiresPositiveClientAreaSize()
public int get_SizingBorderWidth()
public Size get_SmallCaptionButtonSize()
public bool get_UIEffectsEnabled()
public bool get_UserClipWontExposeParent()
public int get_VerticalResizeBorderThickness()
public int get_VerticalScrollBarWidth()
public Rectangle get_VirtualScreen()
public Rectangle get_WorkingArea()
public Screen[] get_AllScreens()
public bool get_ThemesEnabled()
public int get_ToolWindowCaptionHeight()
public Size get_ToolWindowCaptionButtonSize()
internal void add_Idle(EventHandler value)
internal void remove_Idle(EventHandler value)
internal void Activate(IntPtr handle)
internal void AudibleAlert(AlertType alert)
internal void BeginMoveResize(IntPtr handle)
internal bool CalculateWindowRect(Rectangle& ClientRect, CreateParams cp, Menu menu, Rectangle& WindowRect)
internal void CaretVisible(IntPtr handle, bool visible)
internal void CreateCaret(IntPtr handle, int width, int height)
internal IntPtr CreateWindow(CreateParams cp)
internal IntPtr CreateWindow(IntPtr Parent, int X, int Y, int Width, int Height)
internal void ClientToScreen(IntPtr handle, Int32& x, Int32& y)
internal Int32[] ClipboardAvailableFormats(IntPtr handle)
internal void ClipboardClose(IntPtr handle)
internal int ClipboardGetID(IntPtr handle, string format)
internal IntPtr ClipboardOpen(bool primary_selection)
internal void ClipboardStore(IntPtr handle, object obj, int type, ObjectToClipboard converter, bool copy)
internal object ClipboardRetrieve(IntPtr handle, int type, ClipboardToObject converter)
internal IntPtr DefineCursor(Bitmap bitmap, Bitmap mask, Color cursor_pixel, Color mask_pixel, int xHotSpot, int yHotSpot)
internal IntPtr DefineStdCursor(StdCursor id)
internal Bitmap DefineStdCursorBitmap(StdCursor id)
internal IntPtr DefWndProc(Message& msg)
internal void DestroyCaret(IntPtr handle)
internal void DestroyCursor(IntPtr cursor)
internal void DestroyWindow(IntPtr handle)
internal IntPtr DispatchMessage(MSG& msg)
internal void DoEvents()
internal void DrawReversibleRectangle(IntPtr handle, Rectangle rect, int line_width)
internal void FillReversibleRectangle(Rectangle rectangle, Color backColor)
internal void DrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style)
internal void DrawReversibleLine(Point start, Point end, Color backColor)
internal void EnableThemes()
internal void EnableWindow(IntPtr handle, bool Enable)
internal void EndLoop(Thread thread)
internal IntPtr GetActive()
internal SizeF GetAutoScaleSize(Font font)
internal Region GetClipRegion(IntPtr handle)
internal void GetCursorInfo(IntPtr cursor, Int32& width, Int32& height, Int32& hotspot_x, Int32& hotspot_y)
internal void GetCursorPos(IntPtr handle, Int32& x, Int32& y)
internal void GetDisplaySize(Size& size)
internal IntPtr GetFocus()
internal bool GetFontMetrics(Graphics g, Font font, Int32& ascent, Int32& descent)
internal Point GetMenuOrigin(IntPtr handle)
internal bool GetMessage(object queue_id, MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax)
internal IntPtr GetParent(IntPtr handle)
internal IntPtr GetPreviousWindow(IntPtr handle)
internal bool GetText(IntPtr handle, String& text)
internal void GetWindowPos(IntPtr handle, bool is_toplevel, Int32& x, Int32& y, Int32& width, Int32& height, Int32& client_width, Int32& client_height)
internal FormWindowState GetWindowState(IntPtr handle)
internal void GrabInfo(IntPtr& handle, Boolean& GrabConfined, Rectangle& GrabArea)
internal void GrabWindow(IntPtr handle, IntPtr ConfineToHwnd)
internal void HandleException(Exception e)
internal void Invalidate(IntPtr handle, Rectangle rc, bool clear)
internal void InvalidateNC(IntPtr handle)
internal bool IsEnabled(IntPtr handle)
internal bool IsKeyLocked(VirtualKeys key)
internal bool IsVisible(IntPtr handle)
internal void KillTimer(Timer timer)
internal void MenuToScreen(IntPtr handle, Int32& x, Int32& y)
internal void OverrideCursor(IntPtr cursor)
internal void PaintEventEnd(Message& msg, IntPtr handle, bool client)
internal PaintEventArgs PaintEventStart(Message& msg, IntPtr handle, bool client)
internal bool PeekMessage(object queue_id, MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax, UInt32 flags)
internal bool PostMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
internal bool PostMessage(MSG& msg)
internal void PostQuitMessage(int exitCode)
internal void RaiseIdle(EventArgs e)
internal void RequestAdditionalWM_NCMessages(IntPtr handle, bool hover, bool leave)
internal void RequestNCRecalc(IntPtr handle)
internal void ResetMouseHover(IntPtr handle)
internal void ScreenToClient(IntPtr handle, Int32& x, Int32& y)
internal void ScreenToMenu(IntPtr handle, Int32& x, Int32& y)
internal void ScrollWindow(IntPtr handle, Rectangle rectangle, int XAmount, int YAmount, bool with_children)
internal void ScrollWindow(IntPtr handle, int XAmount, int YAmount, bool with_children)
internal void SendAsyncMethod(AsyncMethodData data)
internal int SendInput(IntPtr hwnd, Queue keys)
internal IntPtr SendMessage(IntPtr handle, Msg message, IntPtr wParam, IntPtr lParam)
internal void SendMessage(Message& m)
internal void SetAllowDrop(IntPtr handle, bool value)
internal void SetBorderStyle(IntPtr handle, FormBorderStyle border_style)
internal void SetCaretPos(IntPtr handle, int x, int y)
internal void SetClipRegion(IntPtr handle, Region region)
internal void SetCursor(IntPtr handle, IntPtr cursor)
internal void SetCursorPos(IntPtr handle, int x, int y)
internal void SetFocus(IntPtr handle)
internal void SetForegroundWindow(IntPtr handle)
internal void SetIcon(IntPtr handle, Icon icon)
internal void SetMenu(IntPtr handle, Menu menu)
internal void SetModal(IntPtr handle, bool Modal)
internal IntPtr SetParent(IntPtr handle, IntPtr hParent)
internal void SetTimer(Timer timer)
internal bool SetTopmost(IntPtr handle, bool Enabled)
internal bool SetOwner(IntPtr handle, IntPtr hWndOwner)
internal bool SetVisible(IntPtr handle, bool visible, bool activate)
internal void SetWindowMinMax(IntPtr handle, Rectangle maximized, Size min, Size max)
internal void SetWindowPos(IntPtr handle, int x, int y, int width, int height)
internal void SetWindowState(IntPtr handle, FormWindowState state)
internal void SetWindowStyle(IntPtr handle, CreateParams cp)
internal double GetWindowTransparency(IntPtr handle)
internal void SetWindowTransparency(IntPtr handle, double transparency, Color key)
internal bool SetZOrder(IntPtr handle, IntPtr AfterhWnd, bool Top, bool Bottom)
internal void ShowCursor(bool show)
internal DragDropEffects StartDrag(IntPtr handle, object data, DragDropEffects allowedEffects)
internal object StartLoop(Thread thread)
internal TransparencySupport SupportsTransparency()
internal bool SystrayAdd(IntPtr handle, string tip, Icon icon, ToolTip& tt)
internal void SystrayChange(IntPtr handle, string tip, Icon icon, ToolTip& tt)
internal void SystrayRemove(IntPtr handle, ToolTip& tt)
internal void SystrayBalloon(IntPtr handle, int timeout, string title, string text, ToolTipIcon icon)
internal bool Text(IntPtr handle, string text)
internal bool TranslateMessage(MSG& msg)
internal void UngrabWindow(IntPtr handle)
internal void UpdateWindow(IntPtr handle)
internal void CreateOffscreenDrawable(IntPtr handle, int width, int height, Object& offscreen_drawable)
internal void DestroyOffscreenDrawable(object offscreen_drawable)
internal Graphics GetOffscreenGraphics(object offscreen_drawable)
internal void BlitFromOffscreen(IntPtr dest_handle, Graphics dest_dc, object offscreen_drawable, Graphics offscreen_dc, Rectangle r)
internal void Version()
internal void AddKeyFilter(IKeyFilter value)
internal bool FilterKey(KeyFilterData key)
private int uname(IntPtr buf)
}
internal System.Windows.Forms.XplatUICarbon : XplatUIDriver {
private XplatUICarbon Instance
private int RefCount
private bool themes_enabled
internal IntPtr FocusWindow
internal IntPtr ActiveWindow
internal IntPtr UnactiveWindow
internal IntPtr ReverseWindow
internal IntPtr CaretWindow
internal Hwnd MouseHwnd
internal MouseButtons MouseState
internal Hover Hover
internal HwndDelegate HwndDelegate
internal Point mouse_position
internal ApplicationHandler ApplicationHandler
internal ControlHandler ControlHandler
internal HIObjectHandler HIObjectHandler
internal KeyboardHandler KeyboardHandler
internal MouseHandler MouseHandler
internal WindowHandler WindowHandler
internal GrabStruct Grab
internal Caret Caret
private Dnd Dnd
private Hashtable WindowMapping
private Hashtable HandleMapping
private IntPtr FosterParent
private IntPtr Subclass
private int MenuBarHeight
internal ArrayList UtilityWindows
private Queue MessageQueue
private bool GetMessageResult
private bool ReverseWindowMapped
private ArrayList TimerList
private bool in_doevents
private object instancelock
private object queuelock
private EventHandler Idle
public int Reference
internal Point MousePosition
internal int KeyboardSpeed
internal int KeyboardDelay
internal int CaptionHeight
internal Size CursorSize
internal bool DragFullWindows
internal Size DragSize
internal Size FrameBorderSize
internal Size IconSize
internal Size MaxWindowTrackSize
internal bool MenuAccessKeysUnderlined
internal Size MinimizedWindowSpacingSize
internal Size MinimumWindowSize
internal Keys ModifierKeys
internal Size SmallIconSize
internal int MouseButtonCount
internal bool MouseButtonsSwapped
internal bool MouseWheelPresent
internal MouseButtons MouseButtons
internal Rectangle VirtualScreen
internal Rectangle WorkingArea
internal Screen[] AllScreens
internal bool ThemesEnabled
internal void add_Idle(EventHandler value)
internal void remove_Idle(EventHandler value)
protected void Finalize()
public XplatUICarbon GetInstance()
public int get_Reference()
internal void AddExpose(Hwnd hwnd, bool client, HIRect rect)
internal void AddExpose(Hwnd hwnd, bool client, Rectangle rect)
internal void FlushQueue()
internal Rectangle[] GetClippingRectangles(IntPtr handle)
internal IntPtr GetMousewParam(int Delta)
internal IntPtr HandleToWindow(IntPtr handle)
internal void Initialize()
internal void PerformNCCalc(Hwnd hwnd)
internal void ScreenToClient(IntPtr handle, QDPoint& point)
internal Rectangle TranslateClientRectangleToQuartzClientRectangle(Hwnd hwnd)
internal Rectangle TranslateClientRectangleToQuartzClientRectangle(Hwnd hwnd, Control ctrl)
internal Size TranslateWindowSizeToQuartzWindowSize(CreateParams cp)
internal Size TranslateWindowSizeToQuartzWindowSize(CreateParams cp, Size size)
internal Size TranslateQuartzWindowSizeToWindowSize(CreateParams cp, int width, int height)
private void CaretCallback(object sender, EventArgs e)
private void HoverCallback(object sender, EventArgs e)
private Point ConvertScreenPointToClient(IntPtr handle, Point point)
private Point ConvertClientPointToScreen(IntPtr handle, Point point)
private double NextTimeout()
private void CheckTimers(DateTime now)
private void WaitForHwndMessage(Hwnd hwnd, Msg message)
private void SendParentNotify(IntPtr child, Msg cause, int x, int y)
private bool StyleSet(int s, WindowStyles ws)
private bool ExStyleSet(int ex, WindowExStyles exws)
private void DeriveStyles(int Style, int ExStyle, FormBorderStyle& border_style, Boolean& border_static, TitleStyle& title_style, Int32& caption_height, Int32& tool_caption_height)
private void SetHwndStyles(Hwnd hwnd, CreateParams cp)
private void ShowCaret()
private void HideCaret()
private void AccumulateDestroyedHandles(Control c, ArrayList list)
private void CleanupCachedWindows(Hwnd hwnd)
private void AddExpose(Hwnd hwnd, bool client, int x, int y, int width, int height)
internal void EnqueueMessage(MSG msg)
internal void RaiseIdle(EventArgs e)
internal IntPtr InitializeDriver()
internal void ShutdownDriver(IntPtr token)
internal void EnableThemes()
internal void Activate(IntPtr handle)
internal void AudibleAlert(AlertType alert)
internal void BeginMoveResize(IntPtr handle)
internal void CaretVisible(IntPtr hwnd, bool visible)
internal bool CalculateWindowRect(Rectangle& ClientRect, CreateParams cp, Menu menu, Rectangle& WindowRect)
internal void ClientToScreen(IntPtr handle, Int32& x, Int32& y)
internal void MenuToScreen(IntPtr handle, Int32& x, Int32& y)
internal Int32[] ClipboardAvailableFormats(IntPtr handle)
internal void ClipboardClose(IntPtr handle)
internal int ClipboardGetID(IntPtr handle, string format)
internal IntPtr ClipboardOpen(bool primary_selection)
internal object ClipboardRetrieve(IntPtr handle, int type, ClipboardToObject converter)
internal void ClipboardStore(IntPtr handle, object obj, int type, ObjectToClipboard converter, bool copy)
internal void CreateCaret(IntPtr hwnd, int width, int height)
internal IntPtr CreateWindow(CreateParams cp)
internal IntPtr CreateWindow(IntPtr Parent, int X, int Y, int Width, int Height)
internal Bitmap DefineStdCursorBitmap(StdCursor id)
internal IntPtr DefineCursor(Bitmap bitmap, Bitmap mask, Color cursor_pixel, Color mask_pixel, int xHotSpot, int yHotSpot)
internal IntPtr DefineStdCursor(StdCursor id)
internal IntPtr DefWndProc(Message& msg)
internal void DestroyCaret(IntPtr hwnd)
internal void DestroyCursor(IntPtr cursor)
internal void DestroyWindow(IntPtr handle)
internal IntPtr DispatchMessage(MSG& msg)
internal void DoEvents()
internal void EnableWindow(IntPtr handle, bool Enable)
internal void EndLoop(Thread thread)
internal void Exit()
internal IntPtr GetActive()
internal Region GetClipRegion(IntPtr hwnd)
internal void GetCursorInfo(IntPtr cursor, Int32& width, Int32& height, Int32& hotspot_x, Int32& hotspot_y)
internal void GetDisplaySize(Size& size)
internal IntPtr GetParent(IntPtr handle)
internal IntPtr GetPreviousWindow(IntPtr handle)
internal void GetCursorPos(IntPtr handle, Int32& x, Int32& y)
internal IntPtr GetFocus()
internal bool GetFontMetrics(Graphics g, Font font, Int32& ascent, Int32& descent)
internal Point GetMenuOrigin(IntPtr handle)
internal bool GetMessage(object queue_id, MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax)
internal bool GetText(IntPtr handle, String& text)
internal void GetWindowPos(IntPtr handle, bool is_toplevel, Int32& x, Int32& y, Int32& width, Int32& height, Int32& client_width, Int32& client_height)
internal FormWindowState GetWindowState(IntPtr hwnd)
internal void GrabInfo(IntPtr& handle, Boolean& GrabConfined, Rectangle& GrabArea)
internal void GrabWindow(IntPtr handle, IntPtr confine_to_handle)
internal void UngrabWindow(IntPtr hwnd)
internal void HandleException(Exception e)
internal void Invalidate(IntPtr handle, Rectangle rc, bool clear)
internal void InvalidateNC(IntPtr handle)
internal bool IsEnabled(IntPtr handle)
internal bool IsVisible(IntPtr handle)
internal void KillTimer(Timer timer)
internal void OverrideCursor(IntPtr cursor)
internal PaintEventArgs PaintEventStart(Message& msg, IntPtr handle, bool client)
internal void PaintEventEnd(Message& msg, IntPtr handle, bool client)
internal bool PeekMessage(object queue_id, MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax, UInt32 flags)
internal bool PostMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
internal void PostQuitMessage(int exitCode)
internal void RequestAdditionalWM_NCMessages(IntPtr hwnd, bool hover, bool leave)
internal void RequestNCRecalc(IntPtr handle)
internal void ResetMouseHover(IntPtr handle)
internal void ScreenToClient(IntPtr handle, Int32& x, Int32& y)
internal void ScreenToMenu(IntPtr handle, Int32& x, Int32& y)
internal void ScrollWindow(IntPtr handle, Rectangle area, int XAmount, int YAmount, bool clear)
internal void ScrollWindow(IntPtr handle, int XAmount, int YAmount, bool clear)
internal void SendAsyncMethod(AsyncMethodData method)
internal IntPtr SendMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
internal int SendInput(IntPtr hwnd, Queue keys)
internal void SetCaretPos(IntPtr hwnd, int x, int y)
internal void SetClipRegion(IntPtr hwnd, Region region)
internal void SetCursor(IntPtr window, IntPtr cursor)
internal void SetCursorPos(IntPtr handle, int x, int y)
internal void SetFocus(IntPtr handle)
internal void SetIcon(IntPtr handle, Icon icon)
internal void SetModal(IntPtr handle, bool Modal)
internal IntPtr SetParent(IntPtr handle, IntPtr parent)
internal void SetTimer(Timer timer)
internal bool SetTopmost(IntPtr hWnd, bool Enabled)
internal bool SetOwner(IntPtr hWnd, IntPtr hWndOwner)
internal bool SetVisible(IntPtr handle, bool visible, bool activate)
internal void SetAllowDrop(IntPtr handle, bool value)
internal DragDropEffects StartDrag(IntPtr handle, object data, DragDropEffects allowed_effects)
internal void SetBorderStyle(IntPtr handle, FormBorderStyle border_style)
internal void SetMenu(IntPtr handle, Menu menu)
internal void SetWindowMinMax(IntPtr handle, Rectangle maximized, Size min, Size max)
internal void SetWindowPos(IntPtr handle, int x, int y, int width, int height)
internal void SetWindowState(IntPtr handle, FormWindowState state)
internal void SetWindowStyle(IntPtr handle, CreateParams cp)
internal void SetWindowTransparency(IntPtr handle, double transparency, Color key)
internal double GetWindowTransparency(IntPtr handle)
internal TransparencySupport SupportsTransparency()
internal bool SetZOrder(IntPtr handle, IntPtr after_handle, bool Top, bool Bottom)
internal void ShowCursor(bool show)
internal object StartLoop(Thread thread)
internal bool SystrayAdd(IntPtr hwnd, string tip, Icon icon, ToolTip& tt)
internal bool SystrayChange(IntPtr hwnd, string tip, Icon icon, ToolTip& tt)
internal void SystrayRemove(IntPtr hwnd, ToolTip& tt)
internal void SystrayBalloon(IntPtr hwnd, int timeout, string title, string text, ToolTipIcon icon)
internal bool Text(IntPtr handle, string text)
internal void UpdateWindow(IntPtr handle)
internal bool TranslateMessage(MSG& msg)
internal void SizeWindow(Rectangle rect, IntPtr window)
internal void DrawReversibleLine(Point start, Point end, Color backColor)
internal void FillReversibleRectangle(Rectangle rectangle, Color backColor)
internal void DrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style)
internal void DrawReversibleRectangle(IntPtr handle, Rectangle rect, int line_width)
internal SizeF GetAutoScaleSize(Font font)
internal Point get_MousePosition()
internal int get_KeyboardSpeed()
internal int get_KeyboardDelay()
internal int get_CaptionHeight()
internal Size get_CursorSize()
internal bool get_DragFullWindows()
internal Size get_DragSize()
internal Size get_FrameBorderSize()
internal Size get_IconSize()
internal Size get_MaxWindowTrackSize()
internal bool get_MenuAccessKeysUnderlined()
internal Size get_MinimizedWindowSpacingSize()
internal Size get_MinimumWindowSize()
internal Keys get_ModifierKeys()
internal Size get_SmallIconSize()
internal int get_MouseButtonCount()
internal bool get_MouseButtonsSwapped()
internal bool get_MouseWheelPresent()
internal MouseButtons get_MouseButtons()
internal Rectangle get_VirtualScreen()
internal Rectangle get_WorkingArea()
internal Screen[] get_AllScreens()
internal bool get_ThemesEnabled()
private int HIViewConvertPoint(CGPoint& point, IntPtr pView, IntPtr cView)
private int HIViewChangeFeatures(IntPtr aView, ulong bitsin, ulong bitsout)
private int HIViewFindByID(IntPtr rootWnd, HIViewID id, IntPtr& outPtr)
private int HIGrowBoxViewSetTransparent(IntPtr GrowBox, bool transparency)
private IntPtr HIViewGetRoot(IntPtr hWnd)
private int HIObjectCreate(IntPtr cfStr, UInt32 what, IntPtr& hwnd)
private int HIObjectRegisterSubclass(IntPtr classid, IntPtr superclassid, UInt32 options, EventDelegate upp, UInt32 count, EventTypeSpec[] list, IntPtr state, IntPtr& cls)
private int HIViewPlaceInSuperviewAt(IntPtr view, float x, float y)
private int HIViewAddSubview(IntPtr parentHnd, IntPtr childHnd)
private IntPtr HIViewGetPreviousView(IntPtr aView)
private IntPtr HIViewGetSuperview(IntPtr aView)
private int HIViewRemoveFromSuperview(IntPtr aView)
private int HIViewSetVisible(IntPtr vHnd, bool visible)
private bool HIViewIsVisible(IntPtr vHnd)
private int HIViewGetBounds(IntPtr vHnd, HIRect& r)
private int HIViewScrollRect(IntPtr vHnd, HIRect& rect, float x, float y)
private int HIViewSetZOrder(IntPtr hWnd, int cmd, IntPtr oHnd)
private int HIViewNewTrackingArea(IntPtr inView, IntPtr inShape, ulong inID, IntPtr& outRef)
private IntPtr HIViewGetWindow(IntPtr aView)
private int HIViewSetFrame(IntPtr view_handle, HIRect& bounds)
internal int HIViewSetNeedsDisplayInRect(IntPtr view_handle, HIRect& rect, bool needs_display)
private void SetRect(Rect& r, short left, short top, short right, short bottom)
private int ActivateWindow(IntPtr windowHnd, bool inActivate)
private bool IsWindowActive(IntPtr windowHnd)
private int SetAutomaticControlDragTrackingEnabledForWindow(IntPtr window, bool enabled)
private IntPtr GetEventDispatcherTarget()
private int SendEventToEventTarget(IntPtr evt, IntPtr target)
private int ReleaseEvent(IntPtr evt)
private int ReceiveNextEvent(UInt32 evtCount, IntPtr evtTypes, double timeout, bool processEvt, IntPtr& evt)
private bool IsWindowCollapsed(IntPtr hWnd)
private bool IsWindowInStandardState(IntPtr hWnd, IntPtr a, IntPtr b)
private void CollapseWindow(IntPtr hWnd, bool collapse)
private void ZoomWindow(IntPtr hWnd, short partCode, bool front)
private int GetWindowAttributes(IntPtr hWnd, WindowAttributes& outAttributes)
private int ChangeWindowAttributes(IntPtr hWnd, WindowAttributes inAttributes, WindowAttributes outAttributes)
internal int GetGlobalMouse(QDPoint& outData)
private int BeginAppModalStateForWindow(IntPtr window)
private int EndAppModalStateForWindow(IntPtr window)
private int CreateNewWindow(WindowClass klass, WindowAttributes attributes, Rect& r, IntPtr& window)
private int DisposeWindow(IntPtr wHnd)
internal int ShowWindow(IntPtr wHnd)
internal int HideWindow(IntPtr wHnd)
internal bool IsWindowVisible(IntPtr wHnd)
private int SetWindowBounds(IntPtr wHnd, UInt32 reg, Rect& rect)
private int GetWindowBounds(IntPtr wHnd, UInt32 reg, Rect& rect)
private int SetControlTitleWithCFString(IntPtr hWnd, IntPtr titleCFStr)
private int SetWindowTitleWithCFString(IntPtr hWnd, IntPtr titleCFStr)
internal IntPtr __CFStringMakeConstantString(string cString)
internal int CFRelease(IntPtr wHnd)
private short GetMBarHeight()
private void AlertSoundPlay()
private HIRect CGDisplayBounds(IntPtr displayID)
private IntPtr CGMainDisplayID()
private void CGDisplayShowCursor(IntPtr display)
private void CGDisplayHideCursor(IntPtr display)
private void CGDisplayMoveCursorToPoint(IntPtr display, CGPoint point)
private int GetCurrentProcess(ProcessSerialNumber& psn)
private int TransformProcessType(ProcessSerialNumber& psn, UInt32 type)
private int SetFrontProcess(ProcessSerialNumber& psn)
private IntPtr CGColorSpaceCreateDeviceRGB()
private IntPtr CGDataProviderCreateWithData(IntPtr info, IntPtr[] data, int size, IntPtr releasefunc)
private IntPtr CGImageCreate(int width, int height, int bitsPerComponent, int bitsPerPixel, int bytesPerRow, IntPtr colorspace, UInt32 bitmapInfo, IntPtr provider, IntPtr decode, int shouldInterpolate, int intent)
private void SetApplicationDockTileImage(IntPtr imageRef)
private void RestoreApplicationDockTileImage()
}
internal System.Windows.Forms.XplatUIDriver : object {
internal int ActiveWindowTrackingDelay
internal Color ForeColor
internal Color BackColor
internal Size Border3DSize
internal Size BorderSize
internal Size CaptionButtonSize
internal int CaretBlinkTime
internal int CaretWidth
internal Size DoubleClickSize
internal int DoubleClickTime
internal Size FixedFrameBorderSize
internal Font Font
internal int FontSmoothingContrast
internal int FontSmoothingType
internal int HorizontalResizeBorderThickness
internal bool IsActiveWindowTrackingEnabled
internal bool IsComboBoxAnimationEnabled
internal bool IsDropShadowEnabled
internal bool IsFontSmoothingEnabled
internal bool IsHotTrackingEnabled
internal bool IsIconTitleWrappingEnabled
internal bool IsKeyboardPreferred
internal bool IsListBoxSmoothScrollingEnabled
internal bool IsMenuAnimationEnabled
internal bool IsMenuFadeEnabled
internal bool IsMinimizeRestoreAnimationEnabled
internal bool IsSelectionFadeEnabled
internal bool IsSnapToDefaultEnabled
internal bool IsTitleBarGradientEnabled
internal bool IsToolTipAnimationEnabled
internal Size MenuBarButtonSize
public Size MenuButtonSize
internal int MenuShowDelay
internal Keys ModifierKeys
internal MouseButtons MouseButtons
internal Size MouseHoverSize
internal int MouseHoverTime
internal int MouseSpeed
internal int MouseWheelScrollDelta
internal Point MousePosition
internal int MenuHeight
internal LeftRightAlignment PopupMenuAlignment
internal PowerStatus PowerStatus
internal int SizingBorderWidth
internal Size SmallCaptionButtonSize
internal bool UIEffectsEnabled
internal bool DropTarget
internal int HorizontalScrollBarHeight
internal bool UserClipWontExposeParent
internal int VerticalResizeBorderThickness
internal int VerticalScrollBarWidth
internal int CaptionHeight
internal Size CursorSize
internal bool DragFullWindows
internal Size DragSize
internal Size FrameBorderSize
internal Size IconSize
internal Size MaxWindowTrackSize
internal bool MenuAccessKeysUnderlined
internal Size MinimizedWindowSize
internal Size MinimizedWindowSpacingSize
internal Size MinimumWindowSize
internal Size MinimumFixedToolWindowSize
internal Size MinimumSizeableToolWindowSize
internal Size MinimumNoBorderWindowSize
internal Size MinWindowTrackSize
internal Size SmallIconSize
internal int MouseButtonCount
internal bool MouseButtonsSwapped
internal bool MouseWheelPresent
internal Rectangle VirtualScreen
internal Rectangle WorkingArea
internal Screen[] AllScreens
internal bool ThemesEnabled
internal bool RequiresPositiveClientAreaSize
public int ToolWindowCaptionHeight
public Size ToolWindowCaptionButtonSize
internal int KeyboardSpeed
internal int KeyboardDelay
internal IntPtr InitializeDriver()
internal void ShutdownDriver(IntPtr token)
internal int get_ActiveWindowTrackingDelay()
internal Color get_ForeColor()
internal Color get_BackColor()
internal Size get_Border3DSize()
internal Size get_BorderSize()
internal Size get_CaptionButtonSize()
internal int get_CaretBlinkTime()
internal int get_CaretWidth()
internal Size get_DoubleClickSize()
internal int get_DoubleClickTime()
internal Size get_FixedFrameBorderSize()
internal Font get_Font()
internal int get_FontSmoothingContrast()
internal int get_FontSmoothingType()
internal int get_HorizontalResizeBorderThickness()
internal bool get_IsActiveWindowTrackingEnabled()
internal bool get_IsComboBoxAnimationEnabled()
internal bool get_IsDropShadowEnabled()
internal bool get_IsFontSmoothingEnabled()
internal bool get_IsHotTrackingEnabled()
internal bool get_IsIconTitleWrappingEnabled()
internal bool get_IsKeyboardPreferred()
internal bool get_IsListBoxSmoothScrollingEnabled()
internal bool get_IsMenuAnimationEnabled()
internal bool get_IsMenuFadeEnabled()
internal bool get_IsMinimizeRestoreAnimationEnabled()
internal bool get_IsSelectionFadeEnabled()
internal bool get_IsSnapToDefaultEnabled()
internal bool get_IsTitleBarGradientEnabled()
internal bool get_IsToolTipAnimationEnabled()
internal Size get_MenuBarButtonSize()
public Size get_MenuButtonSize()
internal int get_MenuShowDelay()
internal Keys get_ModifierKeys()
internal MouseButtons get_MouseButtons()
internal Size get_MouseHoverSize()
internal int get_MouseHoverTime()
internal int get_MouseSpeed()
internal int get_MouseWheelScrollDelta()
internal Point get_MousePosition()
internal int get_MenuHeight()
internal LeftRightAlignment get_PopupMenuAlignment()
internal PowerStatus get_PowerStatus()
internal int get_SizingBorderWidth()
internal Size get_SmallCaptionButtonSize()
internal bool get_UIEffectsEnabled()
internal bool get_DropTarget()
internal void set_DropTarget(bool value)
internal int get_HorizontalScrollBarHeight()
internal bool get_UserClipWontExposeParent()
internal int get_VerticalResizeBorderThickness()
internal int get_VerticalScrollBarWidth()
internal int get_CaptionHeight()
internal Size get_CursorSize()
internal bool get_DragFullWindows()
internal Size get_DragSize()
internal Size get_FrameBorderSize()
internal Size get_IconSize()
internal Size get_MaxWindowTrackSize()
internal bool get_MenuAccessKeysUnderlined()
internal Size get_MinimizedWindowSize()
internal Size get_MinimizedWindowSpacingSize()
internal Size get_MinimumWindowSize()
internal Size get_MinimumFixedToolWindowSize()
internal Size get_MinimumSizeableToolWindowSize()
internal Size get_MinimumNoBorderWindowSize()
internal Size get_MinWindowTrackSize()
internal Size get_SmallIconSize()
internal int get_MouseButtonCount()
internal bool get_MouseButtonsSwapped()
internal bool get_MouseWheelPresent()
internal Rectangle get_VirtualScreen()
internal Rectangle get_WorkingArea()
internal Screen[] get_AllScreens()
internal bool get_ThemesEnabled()
internal bool get_RequiresPositiveClientAreaSize()
public int get_ToolWindowCaptionHeight()
public Size get_ToolWindowCaptionButtonSize()
internal void add_Idle(EventHandler value)
internal void remove_Idle(EventHandler value)
internal void AudibleAlert(AlertType alert)
internal void BeginMoveResize(IntPtr handle)
internal void EnableThemes()
internal void GetDisplaySize(Size& size)
internal IntPtr CreateWindow(CreateParams cp)
internal IntPtr CreateWindow(IntPtr Parent, int X, int Y, int Width, int Height)
internal void DestroyWindow(IntPtr handle)
internal FormWindowState GetWindowState(IntPtr handle)
internal void SetWindowState(IntPtr handle, FormWindowState state)
internal void SetWindowMinMax(IntPtr handle, Rectangle maximized, Size min, Size max)
internal void SetWindowStyle(IntPtr handle, CreateParams cp)
internal double GetWindowTransparency(IntPtr handle)
internal void SetWindowTransparency(IntPtr handle, double transparency, Color key)
internal TransparencySupport SupportsTransparency()
internal void SetAllowDrop(IntPtr handle, bool value)
internal DragDropEffects StartDrag(IntPtr handle, object data, DragDropEffects allowedEffects)
internal void SetBorderStyle(IntPtr handle, FormBorderStyle border_style)
internal void SetMenu(IntPtr handle, Menu menu)
internal bool GetText(IntPtr handle, String& text)
internal bool Text(IntPtr handle, string text)
internal bool SetVisible(IntPtr handle, bool visible, bool activate)
internal bool IsVisible(IntPtr handle)
internal bool IsEnabled(IntPtr handle)
internal bool IsKeyLocked(VirtualKeys key)
internal IntPtr SetParent(IntPtr handle, IntPtr parent)
internal IntPtr GetParent(IntPtr handle)
internal void UpdateWindow(IntPtr handle)
internal PaintEventArgs PaintEventStart(Message& msg, IntPtr handle, bool client)
internal void PaintEventEnd(Message& msg, IntPtr handle, bool client)
internal void SetWindowPos(IntPtr handle, int x, int y, int width, int height)
internal void GetWindowPos(IntPtr handle, bool is_toplevel, Int32& x, Int32& y, Int32& width, Int32& height, Int32& client_width, Int32& client_height)
internal void Activate(IntPtr handle)
internal void EnableWindow(IntPtr handle, bool Enable)
internal void SetModal(IntPtr handle, bool Modal)
internal void Invalidate(IntPtr handle, Rectangle rc, bool clear)
internal void InvalidateNC(IntPtr handle)
internal IntPtr DefWndProc(Message& msg)
internal void HandleException(Exception e)
internal void DoEvents()
internal bool PeekMessage(object queue_id, MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax, UInt32 flags)
internal void PostQuitMessage(int exitCode)
internal bool GetMessage(object queue_id, MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax)
internal bool TranslateMessage(MSG& msg)
internal IntPtr DispatchMessage(MSG& msg)
internal bool SetZOrder(IntPtr hWnd, IntPtr AfterhWnd, bool Top, bool Bottom)
internal bool SetTopmost(IntPtr hWnd, bool Enabled)
internal bool SetOwner(IntPtr hWnd, IntPtr hWndOwner)
internal bool CalculateWindowRect(Rectangle& ClientRect, CreateParams cp, Menu menu, Rectangle& WindowRect)
internal Region GetClipRegion(IntPtr hwnd)
internal void SetClipRegion(IntPtr hwnd, Region region)
internal void SetCursor(IntPtr hwnd, IntPtr cursor)
internal void ShowCursor(bool show)
internal void OverrideCursor(IntPtr cursor)
internal IntPtr DefineCursor(Bitmap bitmap, Bitmap mask, Color cursor_pixel, Color mask_pixel, int xHotSpot, int yHotSpot)
internal IntPtr DefineStdCursor(StdCursor id)
internal Bitmap DefineStdCursorBitmap(StdCursor id)
internal void DestroyCursor(IntPtr cursor)
internal void GetCursorInfo(IntPtr cursor, Int32& width, Int32& height, Int32& hotspot_x, Int32& hotspot_y)
internal void GetCursorPos(IntPtr hwnd, Int32& x, Int32& y)
internal void SetCursorPos(IntPtr hwnd, int x, int y)
internal void ScreenToClient(IntPtr hwnd, Int32& x, Int32& y)
internal void ClientToScreen(IntPtr hwnd, Int32& x, Int32& y)
internal void GrabWindow(IntPtr hwnd, IntPtr ConfineToHwnd)
internal void GrabInfo(IntPtr& hwnd, Boolean& GrabConfined, Rectangle& GrabArea)
internal void UngrabWindow(IntPtr hwnd)
internal void SendAsyncMethod(AsyncMethodData method)
internal void SetTimer(Timer timer)
internal void KillTimer(Timer timer)
internal void CreateCaret(IntPtr hwnd, int width, int height)
internal void DestroyCaret(IntPtr hwnd)
internal void SetCaretPos(IntPtr hwnd, int x, int y)
internal void CaretVisible(IntPtr hwnd, bool visible)
internal IntPtr GetFocus()
internal void SetFocus(IntPtr hwnd)
internal IntPtr GetActive()
internal IntPtr GetPreviousWindow(IntPtr hwnd)
internal void ScrollWindow(IntPtr hwnd, Rectangle rectangle, int XAmount, int YAmount, bool with_children)
internal void ScrollWindow(IntPtr hwnd, int XAmount, int YAmount, bool with_children)
internal bool GetFontMetrics(Graphics g, Font font, Int32& ascent, Int32& descent)
internal bool SystrayAdd(IntPtr hwnd, string tip, Icon icon, ToolTip& tt)
internal bool SystrayChange(IntPtr hwnd, string tip, Icon icon, ToolTip& tt)
internal void SystrayRemove(IntPtr hwnd, ToolTip& tt)
internal void SystrayBalloon(IntPtr hwnd, int timeout, string title, string text, ToolTipIcon icon)
internal Point GetMenuOrigin(IntPtr hwnd)
internal void MenuToScreen(IntPtr hwnd, Int32& x, Int32& y)
internal void ScreenToMenu(IntPtr hwnd, Int32& x, Int32& y)
internal void SetIcon(IntPtr handle, Icon icon)
internal void ClipboardClose(IntPtr handle)
internal IntPtr ClipboardOpen(bool primary_selection)
internal int ClipboardGetID(IntPtr handle, string format)
internal void ClipboardStore(IntPtr handle, object obj, int id, ObjectToClipboard converter, bool copy)
internal Int32[] ClipboardAvailableFormats(IntPtr handle)
internal object ClipboardRetrieve(IntPtr handle, int id, ClipboardToObject converter)
internal void DrawReversibleLine(Point start, Point end, Color backColor)
internal void DrawReversibleRectangle(IntPtr handle, Rectangle rect, int line_width)
internal void FillReversibleRectangle(Rectangle rectangle, Color backColor)
internal void DrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style)
internal SizeF GetAutoScaleSize(Font font)
internal IntPtr SendMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
internal bool PostMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
internal int SendInput(IntPtr hwnd, Queue keys)
internal object StartLoop(Thread thread)
internal void EndLoop(Thread thread)
internal void RequestNCRecalc(IntPtr hwnd)
internal void ResetMouseHover(IntPtr hwnd)
internal void RequestAdditionalWM_NCMessages(IntPtr hwnd, bool hover, bool leave)
internal void RaiseIdle(EventArgs e)
internal int get_KeyboardSpeed()
internal int get_KeyboardDelay()
internal void CreateOffscreenDrawable(IntPtr handle, int width, int height, Object& offscreen_drawable)
internal void DestroyOffscreenDrawable(object offscreen_drawable)
internal Graphics GetOffscreenGraphics(object offscreen_drawable)
internal void BlitFromOffscreen(IntPtr dest_handle, Graphics dest_dc, object offscreen_drawable, Graphics offscreen_dc, Rectangle r)
internal void SetForegroundWindow(IntPtr handle)
}
internal System.Windows.Forms.XplatUIDriverSupport : object {
internal void ExecutionCallback(AsyncMethodData data)
private void ExecutionCallbackInContext(object state)
internal void ExecuteClientMessage(GCHandle gchandle)
}
internal System.Windows.Forms.XplatUIWin32 : XplatUIDriver {
private XplatUIWin32 instance
private int ref_count
private IntPtr FosterParentLast
internal MouseButtons mouse_state
internal Point mouse_position
internal bool grab_confined
internal IntPtr grab_hwnd
internal Rectangle grab_area
internal WndProc wnd_proc
internal IntPtr prev_mouse_hwnd
internal bool caret_visible
internal bool themes_enabled
private Hashtable timer_list
private Queue message_queue
private IntPtr clip_magic
private int scroll_width
private int scroll_height
private Hashtable wm_nc_registered
private RECT clipped_cursor_rect
private Hashtable registered_classes
private Hwnd HwndCreating
private TransparencySupport support
private bool queried_transparency_support
private EventHandler Idle
internal int ActiveWindowTrackingDelay
internal int CaretWidth
internal int FontSmoothingContrast
internal int FontSmoothingType
internal int HorizontalResizeBorderThickness
internal bool IsActiveWindowTrackingEnabled
internal bool IsComboBoxAnimationEnabled
internal bool IsDropShadowEnabled
internal bool IsFontSmoothingEnabled
internal bool IsHotTrackingEnabled
internal bool IsIconTitleWrappingEnabled
internal bool IsKeyboardPreferred
internal bool IsListBoxSmoothScrollingEnabled
internal bool IsMenuAnimationEnabled
internal bool IsMenuFadeEnabled
internal bool IsMinimizeRestoreAnimationEnabled
internal bool IsSelectionFadeEnabled
internal bool IsSnapToDefaultEnabled
internal bool IsTitleBarGradientEnabled
internal bool IsToolTipAnimationEnabled
internal Size MenuBarButtonSize
public Size MenuButtonSize
internal int MenuShowDelay
internal int MouseSpeed
internal LeftRightAlignment PopupMenuAlignment
internal PowerStatus PowerStatus
internal int SizingBorderWidth
internal Size SmallCaptionButtonSize
internal bool UIEffectsEnabled
internal int VerticalResizeBorderThickness
internal Keys ModifierKeys
internal MouseButtons MouseButtons
internal Point MousePosition
internal Size MouseHoverSize
internal int MouseHoverTime
internal int MouseWheelScrollDelta
internal int HorizontalScrollBarHeight
internal bool UserClipWontExposeParent
internal int VerticalScrollBarWidth
internal int MenuHeight
internal Size Border3DSize
internal Size BorderSize
internal bool DropTarget
internal Size CaptionButtonSize
internal int CaptionHeight
internal Size CursorSize
internal bool DragFullWindows
internal Size DragSize
internal Size DoubleClickSize
internal int DoubleClickTime
internal Size FixedFrameBorderSize
internal Size FrameBorderSize
internal Size IconSize
internal Size MaxWindowTrackSize
internal bool MenuAccessKeysUnderlined
internal Size MinimizedWindowSize
internal Size MinimizedWindowSpacingSize
internal Size MinimumWindowSize
internal Size MinWindowTrackSize
internal Size SmallIconSize
internal int MouseButtonCount
internal bool MouseButtonsSwapped
internal bool MouseWheelPresent
internal Rectangle VirtualScreen
internal Rectangle WorkingArea
internal Screen[] AllScreens
internal bool ThemesEnabled
internal bool RequiresPositiveClientAreaSize
public int ToolWindowCaptionHeight
public Size ToolWindowCaptionButtonSize
public int Reference
internal int KeyboardSpeed
internal int KeyboardDelay
private IntPtr GetFosterParent()
private string RegisterWindowClass(int classStyle)
private bool RetrieveMessage(MSG& msg)
private bool StoreMessage(MSG& msg)
internal string AnsiToString(IntPtr ansi_data)
internal string UnicodeToString(IntPtr unicode_data)
internal Image DIBtoImage(IntPtr dib_data)
internal Byte[] ImageToDIB(Image image)
internal IntPtr DupGlobalMem(IntPtr mem)
private int GetSystemParametersInfoInt(SPIAction spi)
private bool GetSystemParametersInfoBool(SPIAction spi)
internal int get_ActiveWindowTrackingDelay()
internal int get_CaretWidth()
internal int get_FontSmoothingContrast()
internal int get_FontSmoothingType()
internal int get_HorizontalResizeBorderThickness()
internal bool get_IsActiveWindowTrackingEnabled()
internal bool get_IsComboBoxAnimationEnabled()
internal bool get_IsDropShadowEnabled()
internal bool get_IsFontSmoothingEnabled()
internal bool get_IsHotTrackingEnabled()
internal bool get_IsIconTitleWrappingEnabled()
internal bool get_IsKeyboardPreferred()
internal bool get_IsListBoxSmoothScrollingEnabled()
internal bool get_IsMenuAnimationEnabled()
internal bool get_IsMenuFadeEnabled()
internal bool get_IsMinimizeRestoreAnimationEnabled()
internal bool get_IsSelectionFadeEnabled()
internal bool get_IsSnapToDefaultEnabled()
internal bool get_IsTitleBarGradientEnabled()
internal bool get_IsToolTipAnimationEnabled()
internal Size get_MenuBarButtonSize()
public Size get_MenuButtonSize()
internal int get_MenuShowDelay()
internal int get_MouseSpeed()
internal LeftRightAlignment get_PopupMenuAlignment()
internal PowerStatus get_PowerStatus()
internal int get_SizingBorderWidth()
internal Size get_SmallCaptionButtonSize()
internal bool get_UIEffectsEnabled()
internal int get_VerticalResizeBorderThickness()
internal void RaiseIdle(EventArgs e)
internal Keys get_ModifierKeys()
internal MouseButtons get_MouseButtons()
internal Point get_MousePosition()
internal Size get_MouseHoverSize()
internal int get_MouseHoverTime()
internal int get_MouseWheelScrollDelta()
internal int get_HorizontalScrollBarHeight()
internal bool get_UserClipWontExposeParent()
internal int get_VerticalScrollBarWidth()
internal int get_MenuHeight()
internal Size get_Border3DSize()
internal Size get_BorderSize()
internal bool get_DropTarget()
internal void set_DropTarget(bool value)
internal Size get_CaptionButtonSize()
internal int get_CaptionHeight()
internal Size get_CursorSize()
internal bool get_DragFullWindows()
internal Size get_DragSize()
internal Size get_DoubleClickSize()
internal int get_DoubleClickTime()
internal Size get_FixedFrameBorderSize()
internal Size get_FrameBorderSize()
internal Size get_IconSize()
internal Size get_MaxWindowTrackSize()
internal bool get_MenuAccessKeysUnderlined()
internal Size get_MinimizedWindowSize()
internal Size get_MinimizedWindowSpacingSize()
internal Size get_MinimumWindowSize()
internal Size get_MinWindowTrackSize()
internal Size get_SmallIconSize()
internal int get_MouseButtonCount()
internal bool get_MouseButtonsSwapped()
internal bool get_MouseWheelPresent()
internal Rectangle get_VirtualScreen()
internal Rectangle get_WorkingArea()
internal Screen[] get_AllScreens()
internal bool get_ThemesEnabled()
internal bool get_RequiresPositiveClientAreaSize()
public int get_ToolWindowCaptionHeight()
public Size get_ToolWindowCaptionButtonSize()
public XplatUIWin32 GetInstance()
public int get_Reference()
internal IntPtr InitializeDriver()
internal void ShutdownDriver(IntPtr token)
internal void Version()
private string GetSoundAlias(AlertType alert)
internal void AudibleAlert(AlertType alert)
internal void BeginMoveResize(IntPtr handle)
internal void GetDisplaySize(Size& size)
internal void EnableThemes()
internal IntPtr CreateWindow(CreateParams cp)
internal IntPtr CreateWindow(IntPtr Parent, int X, int Y, int Width, int Height)
internal void DestroyWindow(IntPtr handle)
internal void SetWindowMinMax(IntPtr handle, Rectangle maximized, Size min, Size max)
internal FormWindowState GetWindowState(IntPtr handle)
internal void SetWindowState(IntPtr hwnd, FormWindowState state)
internal void SetWindowStyle(IntPtr handle, CreateParams cp)
internal double GetWindowTransparency(IntPtr handle)
internal void SetWindowTransparency(IntPtr handle, double transparency, Color key)
internal TransparencySupport SupportsTransparency()
internal void UpdateWindow(IntPtr handle)
internal PaintEventArgs PaintEventStart(Message& msg, IntPtr handle, bool client)
internal void PaintEventEnd(Message& m, IntPtr handle, bool client)
internal void SetWindowPos(IntPtr handle, int x, int y, int width, int height)
internal void GetWindowPos(IntPtr handle, bool is_toplevel, Int32& x, Int32& y, Int32& width, Int32& height, Int32& client_width, Int32& client_height)
internal void Activate(IntPtr handle)
internal void Invalidate(IntPtr handle, Rectangle rc, bool clear)
internal void InvalidateNC(IntPtr handle)
private IntPtr InternalWndProc(IntPtr hWnd, Msg msg, IntPtr wParam, IntPtr lParam)
internal IntPtr DefWndProc(Message& msg)
internal void HandleException(Exception e)
internal void DoEvents()
internal bool PeekMessage(object queue_id, MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax, UInt32 flags)
internal void PostQuitMessage(int exitCode)
internal void RequestAdditionalWM_NCMessages(IntPtr hwnd, bool hover, bool leave)
internal void RequestNCRecalc(IntPtr handle)
internal void ResetMouseHover(IntPtr handle)
internal bool GetMessage(object queue_id, MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax)
private bool GetMessage(MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax, bool blocking)
internal bool TranslateMessage(MSG& msg)
internal IntPtr DispatchMessage(MSG& msg)
internal bool SetZOrder(IntPtr hWnd, IntPtr AfterhWnd, bool Top, bool Bottom)
internal bool SetTopmost(IntPtr hWnd, bool Enabled)
internal bool SetOwner(IntPtr hWnd, IntPtr hWndOwner)
internal bool Text(IntPtr handle, string text)
internal bool GetText(IntPtr handle, String& text)
internal bool SetVisible(IntPtr handle, bool visible, bool activate)
internal bool IsEnabled(IntPtr handle)
internal bool IsKeyLocked(VirtualKeys key)
internal bool IsVisible(IntPtr handle)
internal IntPtr SetParent(IntPtr handle, IntPtr parent)
internal IntPtr GetParent(IntPtr handle)
internal IntPtr GetPreviousWindow(IntPtr handle)
internal void GrabWindow(IntPtr hWnd, IntPtr ConfineToHwnd)
internal void GrabInfo(IntPtr& hWnd, Boolean& GrabConfined, Rectangle& GrabArea)
internal void UngrabWindow(IntPtr hWnd)
internal bool CalculateWindowRect(Rectangle& ClientRect, CreateParams cp, Menu menu, Rectangle& WindowRect)
internal void SetCursor(IntPtr window, IntPtr cursor)
internal void ShowCursor(bool show)
internal void OverrideCursor(IntPtr cursor)
internal IntPtr DefineCursor(Bitmap bitmap, Bitmap mask, Color cursor_pixel, Color mask_pixel, int xHotSpot, int yHotSpot)
internal Bitmap DefineStdCursorBitmap(StdCursor id)
internal IntPtr DefineStdCursor(StdCursor id)
internal void DestroyCursor(IntPtr cursor)
internal void GetCursorInfo(IntPtr cursor, Int32& width, Int32& height, Int32& hotspot_x, Int32& hotspot_y)
internal void SetCursorPos(IntPtr handle, int x, int y)
internal Region GetClipRegion(IntPtr hwnd)
internal void SetClipRegion(IntPtr hwnd, Region region)
internal void EnableWindow(IntPtr handle, bool Enable)
internal void EndLoop(Thread thread)
internal object StartLoop(Thread thread)
internal void SetModal(IntPtr handle, bool Modal)
internal void GetCursorPos(IntPtr handle, Int32& x, Int32& y)
internal void ScreenToClient(IntPtr handle, Int32& x, Int32& y)
internal void ClientToScreen(IntPtr handle, Int32& x, Int32& y)
internal void ScreenToMenu(IntPtr handle, Int32& x, Int32& y)
internal void MenuToScreen(IntPtr handle, Int32& x, Int32& y)
internal void SendAsyncMethod(AsyncMethodData method)
internal void SetTimer(Timer timer)
internal void KillTimer(Timer timer)
internal void CreateCaret(IntPtr hwnd, int width, int height)
internal void DestroyCaret(IntPtr hwnd)
internal void SetCaretPos(IntPtr hwnd, int x, int y)
internal void CaretVisible(IntPtr hwnd, bool visible)
internal IntPtr GetFocus()
internal void SetFocus(IntPtr hwnd)
internal IntPtr GetActive()
internal bool GetFontMetrics(Graphics g, Font font, Int32& ascent, Int32& descent)
internal void ScrollWindow(IntPtr hwnd, Rectangle rectangle, int XAmount, int YAmount, bool with_children)
internal void ScrollWindow(IntPtr hwnd, int XAmount, int YAmount, bool with_children)
internal bool SystrayAdd(IntPtr hwnd, string tip, Icon icon, ToolTip& tt)
internal bool SystrayChange(IntPtr hwnd, string tip, Icon icon, ToolTip& tt)
internal void SystrayRemove(IntPtr hwnd, ToolTip& tt)
internal void SystrayBalloon(IntPtr hwnd, int timeout, string title, string text, ToolTipIcon icon)
internal void SetBorderStyle(IntPtr handle, FormBorderStyle border_style)
internal void SetMenu(IntPtr handle, Menu menu)
internal Point GetMenuOrigin(IntPtr handle)
internal void SetIcon(IntPtr hwnd, Icon icon)
internal void ClipboardClose(IntPtr handle)
internal int ClipboardGetID(IntPtr handle, string format)
internal IntPtr ClipboardOpen(bool primary_selection)
internal Int32[] ClipboardAvailableFormats(IntPtr handle)
internal object ClipboardRetrieve(IntPtr handle, int type, ClipboardToObject converter)
internal void ClipboardStore(IntPtr handle, object obj, int type, ObjectToClipboard converter, bool copy)
internal Byte[] StringToUnicode(string text)
internal Byte[] StringToAnsi(string text)
private void SetClipboardData(UInt32 type, Byte[] data)
internal IntPtr CopyToMoveableMemory(Byte[] data)
internal void SetAllowDrop(IntPtr hwnd, bool allowed)
internal DragDropEffects StartDrag(IntPtr hwnd, object data, DragDropEffects allowedEffects)
internal void DrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style)
internal void DrawReversibleLine(Point start, Point end, Color backColor)
internal void FillReversibleRectangle(Rectangle rectangle, Color backColor)
internal void DrawReversibleRectangle(IntPtr handle, Rectangle rect, int line_width)
internal SizeF GetAutoScaleSize(Font font)
internal IntPtr SendMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
internal bool PostMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
internal int SendInput(IntPtr hwnd, Queue keys)
internal int get_KeyboardSpeed()
internal int get_KeyboardDelay()
internal void CreateOffscreenDrawable(IntPtr handle, int width, int height, Object& offscreen_drawable)
internal Graphics GetOffscreenGraphics(object offscreen_drawable)
internal void BlitFromOffscreen(IntPtr dest_handle, Graphics dest_dc, object offscreen_drawable, Graphics offscreen_dc, Rectangle r)
internal void DestroyOffscreenDrawable(object offscreen_drawable)
internal void SetForegroundWindow(IntPtr handle)
internal void add_Idle(EventHandler value)
internal void remove_Idle(EventHandler value)
private UInt32 Win32GetLastError()
internal IntPtr Win32CreateWindow(WindowExStyles dwExStyle, string lpClassName, string lpWindowName, WindowStyles dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lParam)
internal bool Win32DestroyWindow(IntPtr hWnd)
internal bool Win32PeekMessage(MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax, UInt32 flags)
internal bool Win32GetMessage(MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax)
internal bool Win32TranslateMessage(MSG& msg)
internal IntPtr Win32DispatchMessage(MSG& msg)
internal bool Win32MoveWindow(IntPtr hWnd, int x, int y, int width, int height, bool repaint)
internal bool Win32SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, SetWindowPosFlags Flags)
internal bool Win32SetWindowPos(IntPtr hWnd, SetWindowPosZOrder pos, int x, int y, int cx, int cy, SetWindowPosFlags Flags)
internal bool Win32SetWindowText(IntPtr hWnd, string lpString)
internal bool Win32GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount)
internal IntPtr Win32SetParent(IntPtr hWnd, IntPtr hParent)
private bool Win32RegisterClass(WNDCLASS& wndClass)
private IntPtr Win32LoadCursor(IntPtr hInstance, LoadCursorType type)
private IntPtr Win32ShowCursor(bool bShow)
private IntPtr Win32SetCursor(IntPtr hCursor)
private IntPtr Win32CreateCursor(IntPtr hInstance, int xHotSpot, int yHotSpot, int nWidth, int nHeight, Byte[] pvANDPlane, Byte[] pvORPlane)
private bool Win32DestroyCursor(IntPtr hCursor)
private bool Win32DrawIcon(IntPtr hDC, int X, int Y, IntPtr hIcon)
private IntPtr Win32DefWindowProc(IntPtr hWnd, Msg Msg, IntPtr wParam, IntPtr lParam)
private IntPtr Win32PostQuitMessage(int nExitCode)
private IntPtr Win32UpdateWindow(IntPtr hWnd)
private bool Win32GetUpdateRect(IntPtr hWnd, RECT& rect, bool erase)
private IntPtr Win32BeginPaint(IntPtr hWnd, PAINTSTRUCT& ps)
private IntPtr Win32ValidateRect(IntPtr hWnd, RECT& rect)
private bool Win32EndPaint(IntPtr hWnd, PAINTSTRUCT& ps)
private IntPtr Win32GetDC(IntPtr hWnd)
private IntPtr Win32GetWindowDC(IntPtr hWnd)
private IntPtr Win32ReleaseDC(IntPtr hWnd, IntPtr hDC)
private IntPtr Win32MessageBox(IntPtr hParent, string pText, string pCaption, UInt32 uType)
private IntPtr Win32InvalidateRect(IntPtr hWnd, RECT& lpRect, bool bErase)
private IntPtr Win32SetCapture(IntPtr hWnd)
private IntPtr Win32ReleaseCapture()
private IntPtr Win32GetWindowRect(IntPtr hWnd, RECT& rect)
private IntPtr Win32GetClientRect(IntPtr hWnd, RECT& rect)
private bool Win32ScreenToClient(IntPtr hWnd, POINT& pt)
private bool Win32ClientToScreen(IntPtr hWnd, POINT& pt)
private IntPtr Win32GetParent(IntPtr hWnd)
private IntPtr Win32GetAncestor(IntPtr hWnd, AncestorType flags)
private IntPtr Win32SetActiveWindow(IntPtr hWnd)
private bool Win32AdjustWindowRectEx(RECT& lpRect, int dwStyle, bool bMenu, int dwExStyle)
private bool Win32GetCursorPos(POINT& lpPoint)
private bool Win32SetCursorPos(int x, int y)
private bool Win32TrackMouseEvent(TRACKMOUSEEVENT& tme)
private IntPtr Win32CreateSolidBrush(COLORREF clrRef)
private int Win32PatBlt(IntPtr hdc, int nXLeft, int nYLeft, int nWidth, int nHeight, PatBltRop dwRop)
private UInt32 Win32SetWindowLong(IntPtr hwnd, WindowLong index, UInt32 value)
private UInt32 Win32GetWindowLong(IntPtr hwnd, WindowLong index)
private UInt32 Win32SetLayeredWindowAttributes(IntPtr hwnd, COLORREF crKey, byte bAlpha, LayeredWindowAttributes dwFlags)
private UInt32 Win32GetLayeredWindowAttributes(IntPtr hwnd, COLORREF& pcrKey, Byte& pbAlpha, LayeredWindowAttributes& pwdFlags)
public bool Win32DeleteObject(IntPtr o)
private short Win32GetKeyState(VirtualKeys nVirtKey)
private IntPtr Win32GetDesktopWindow()
private IntPtr Win32SetTimer(IntPtr hwnd, int nIDEvent, UInt32 uElapse, IntPtr timerProc)
private IntPtr Win32KillTimer(IntPtr hwnd, int nIDEvent)
private IntPtr Win32ShowWindow(IntPtr hwnd, WindowPlacementFlags nCmdShow)
private IntPtr Win32EnableWindow(IntPtr hwnd, bool Enabled)
internal IntPtr Win32SetFocus(IntPtr hwnd)
internal IntPtr Win32GetFocus()
internal bool Win32CreateCaret(IntPtr hwnd, IntPtr hBitmap, int nWidth, int nHeight)
private bool Win32DestroyCaret()
private bool Win32ShowCaret(IntPtr hwnd)
private bool Win32HideCaret(IntPtr hwnd)
private bool Win32SetCaretPos(int X, int Y)
internal bool Win32GetTextMetrics(IntPtr hdc, TEXTMETRIC& tm)
internal IntPtr Win32SelectObject(IntPtr hdc, IntPtr hgdiobject)
private bool Win32ScrollWindowEx(IntPtr hwnd, int dx, int dy, IntPtr prcScroll, RECT& prcClip, IntPtr hrgnUpdate, IntPtr prcUpdate, ScrollWindowExFlags flags)
private bool Win32ScrollWindowEx(IntPtr hwnd, int dx, int dy, IntPtr prcScroll, IntPtr prcClip, IntPtr hrgnUpdate, IntPtr prcUpdate, ScrollWindowExFlags flags)
private IntPtr Win32GetActiveWindow()
private int Win32GetSystemMetrics(SystemMetrics nIndex)
private bool Win32Shell_NotifyIcon(NotifyIconMessage dwMessage, NOTIFYICONDATA& lpData)
internal IntPtr Win32CreateRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)
private bool IsWindowEnabled(IntPtr hwnd)
private bool IsWindowVisible(IntPtr hwnd)
private bool IsWindow(IntPtr hwnd)
private IntPtr Win32SendMessage(IntPtr hwnd, Msg msg, IntPtr wParam, IntPtr lParam)
private bool Win32PostMessage(IntPtr hwnd, Msg msg, IntPtr wParam, IntPtr lParam)
private UInt32 Win32SendInput(UInt32 nInputs, INPUT[] inputs, int cbSize)
private bool Win32SystemParametersInfo(SPIAction uiAction, UInt32 uiParam, RECT& rect, UInt32 fWinIni)
private bool Win32SystemParametersInfo(SPIAction uiAction, UInt32 uiParam, Int32& value, UInt32 fWinIni)
private bool Win32SystemParametersInfo(SPIAction uiAction, UInt32 uiParam, Boolean& value, UInt32 fWinIni)
private bool Win32SystemParametersInfo(SPIAction uiAction, UInt32 uiParam, ANIMATIONINFO& value, UInt32 fWinIni)
private bool Win32OpenClipboard(IntPtr hwnd)
private bool Win32EmptyClipboard()
private UInt32 Win32RegisterClipboardFormat(string format)
private bool Win32CloseClipboard()
private UInt32 Win32EnumClipboardFormats(UInt32 format)
private IntPtr Win32GetClipboardData(UInt32 format)
private IntPtr Win32SetClipboardData(UInt32 format, IntPtr handle)
internal IntPtr Win32GlobalAlloc(GAllocFlags Flags, int dwBytes)
internal void Win32CopyMemory(IntPtr Destination, IntPtr Source, int length)
internal IntPtr Win32GlobalFree(IntPtr hMem)
internal UInt32 Win32GlobalSize(IntPtr hMem)
internal IntPtr Win32GlobalLock(IntPtr hMem)
internal IntPtr Win32GlobalUnlock(IntPtr hMem)
internal int Win32SetROP2(IntPtr hdc, ROP2DrawMode fnDrawMode)
internal bool Win32MoveToEx(IntPtr hdc, int x, int y, POINT& lpPoint)
internal bool Win32MoveToEx(IntPtr hdc, int x, int y, IntPtr lpPoint)
internal bool Win32LineTo(IntPtr hdc, int x, int y)
internal IntPtr Win32CreatePen(PenStyle fnPenStyle, int nWidth, COLORREF& color)
internal IntPtr Win32CreatePen(PenStyle fnPenStyle, int nWidth, IntPtr color)
internal IntPtr Win32GetStockObject(StockObject fnObject)
internal IntPtr Win32CreateHatchBrush(HatchStyle fnStyle, IntPtr color)
internal IntPtr Win32CreateHatchBrush(HatchStyle fnStyle, COLORREF& color)
internal int Win32ExcludeClipRect(IntPtr hdc, int left, int top, int right, int bottom)
internal int Win32ExtSelectClipRgn(IntPtr hdc, IntPtr hrgn, int mode)
internal IntPtr Win32PlaySound(string pszSound, IntPtr hmod, SndFlags fdwSound)
private int Win32GetDoubleClickTime()
internal int Win32SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool redraw)
internal IntPtr Win32GetWindowRgn(IntPtr hWnd, IntPtr hRgn)
internal bool Win32ClipCursor(RECT& lpRect)
internal bool Win32GetClipCursor(RECT& lpRect)
internal bool Win32BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjSource, int nXSrc, int nYSrc, TernaryRasterOperations dwRop)
internal IntPtr Win32CreateCompatibleDC(IntPtr hdc)
internal bool Win32DeleteDC(IntPtr hdc)
internal IntPtr Win32CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight)
internal bool Win32GetSystemPowerStatus(SYSTEMPOWERSTATUS sps)
internal bool Win32GetIconInfo(IntPtr hIcon, ICONINFO& piconinfo)
private bool Win32SetForegroundWindow(IntPtr hWnd)
}
internal System.Windows.Forms.XplatUIX11 : XplatUIDriver {
private XplatUIX11 modreq(System.Runtime.CompilerServices.IsVolatile) Instance
private int RefCount
private object XlibLock
private bool themes_enabled
private IntPtr DisplayHandle
private int ScreenNo
private IntPtr DefaultColormap
private IntPtr CustomVisual
private IntPtr CustomColormap
private IntPtr RootWindow
private IntPtr FosterParent
private XErrorHandler ErrorHandler
private bool ErrorExceptions
private int render_major_opcode
private int render_first_event
private int render_first_error
private IntPtr ClipMagic
private ClipboardData Clipboard
private IntPtr PostAtom
private IntPtr AsyncAtom
private Hashtable MessageQueues
private ArrayList unattached_timer_list
private Pollfd[] pollfds
private bool wake_waiting
private object wake_waiting_lock
private X11Keyboard Keyboard
private X11Dnd Dnd
private Socket listen
private Socket wake
private Socket wake_receive
private Byte[] network_buffer
private bool detectable_key_auto_repeat
private IntPtr ActiveWindow
private IntPtr FocusWindow
private Stack ModalWindows
private IntPtr SystrayMgrWindow
private IntPtr LastCursorWindow
private IntPtr LastCursorHandle
private IntPtr OverrideCursorHandle
private CaretStruct Caret
private IntPtr LastPointerWindow
private IntPtr WM_PROTOCOLS
private IntPtr WM_DELETE_WINDOW
private IntPtr WM_TAKE_FOCUS
private IntPtr _NET_DESKTOP_GEOMETRY
private IntPtr _NET_CURRENT_DESKTOP
private IntPtr _NET_ACTIVE_WINDOW
private IntPtr _NET_WORKAREA
private IntPtr _NET_WM_MOVERESIZE
private IntPtr _NET_WM_NAME
private IntPtr _NET_WM_WINDOW_TYPE
private IntPtr _NET_WM_STATE
private IntPtr _NET_WM_ICON
private IntPtr _NET_WM_USER_TIME
private IntPtr _NET_FRAME_EXTENTS
private IntPtr _NET_SYSTEM_TRAY_S
private IntPtr _NET_SYSTEM_TRAY_OPCODE
private IntPtr _NET_WM_STATE_MAXIMIZED_HORZ
private IntPtr _NET_WM_STATE_MAXIMIZED_VERT
private IntPtr _XEMBED
private IntPtr _XEMBED_INFO
private IntPtr _MOTIF_WM_HINTS
private IntPtr _NET_WM_STATE_SKIP_TASKBAR
private IntPtr _NET_WM_STATE_ABOVE
private IntPtr _NET_WM_STATE_MODAL
private IntPtr _NET_WM_STATE_HIDDEN
private IntPtr _NET_WM_CONTEXT_HELP
private IntPtr _NET_WM_WINDOW_OPACITY
private IntPtr _NET_WM_WINDOW_TYPE_UTILITY
private IntPtr _NET_WM_WINDOW_TYPE_NORMAL
private IntPtr CLIPBOARD
private IntPtr PRIMARY
private IntPtr OEMTEXT
private IntPtr UTF8_STRING
private IntPtr UTF16_STRING
private IntPtr RICHTEXTFORMAT
private IntPtr TARGETS
private HoverStruct HoverState
private ClickStruct ClickPending
private GrabStruct Grab
private Point mouse_position
internal MouseButtons MouseState
internal bool in_doevents
private int DoubleClickInterval
private EventMask SelectInputMask
private object lockobj
private Hashtable messageHold
private EventHandler Idle
private bool XineramaNotInstalled
public int Reference
internal IntPtr Display
internal int Screen
internal IntPtr RootWindowHandle
internal IntPtr Visual
internal IntPtr ColorMap
internal int CaptionHeight
internal Size CursorSize
internal bool DragFullWindows
internal Size DragSize
internal Size FrameBorderSize
internal Size IconSize
internal int KeyboardSpeed
internal int KeyboardDelay
internal Size MaxWindowTrackSize
internal bool MenuAccessKeysUnderlined
internal Size MinimizedWindowSpacingSize
internal Size MinimumWindowSize
internal Size MinimumFixedToolWindowSize
internal Size MinimumSizeableToolWindowSize
internal Size MinimumNoBorderWindowSize
internal Keys ModifierKeys
internal Size SmallIconSize
internal int MouseButtonCount
internal bool MouseButtonsSwapped
internal Point MousePosition
internal Size MouseHoverSize
internal int MouseHoverTime
internal bool MouseWheelPresent
internal MouseButtons MouseButtons
internal Rectangle VirtualScreen
internal Rectangle WorkingArea
internal Screen[] AllScreens
internal bool ThemesEnabled
protected void Finalize()
public XplatUIX11 GetInstance()
public int get_Reference()
internal IntPtr get_Display()
internal void set_Display(IntPtr value)
internal int get_Screen()
internal void set_Screen(int value)
internal IntPtr get_RootWindowHandle()
internal void set_RootWindowHandle(IntPtr value)
internal IntPtr get_Visual()
internal void set_Visual(IntPtr value)
internal IntPtr get_ColorMap()
internal void set_ColorMap(IntPtr value)
internal void SetDisplay(IntPtr display_handle)
private void DriverDebug(string format, Object[] args)
private int unixtime()
private void SetupAtoms()
private void GetSystrayManagerWindow()
private void SendNetWMMessage(IntPtr window, IntPtr message_type, IntPtr l0, IntPtr l1, IntPtr l2)
private void SendNetWMMessage(IntPtr window, IntPtr message_type, IntPtr l0, IntPtr l1, IntPtr l2, IntPtr l3)
private void SendNetClientMessage(IntPtr window, IntPtr message_type, IntPtr l0, IntPtr l1, IntPtr l2)
private void SendParentNotify(IntPtr child, Msg cause, int x, int y)
private bool StyleSet(int s, WindowStyles ws)
private bool ExStyleSet(int ex, WindowExStyles exws)
internal Rectangle TranslateClientRectangleToXClientRectangle(Hwnd hwnd)
internal Rectangle TranslateClientRectangleToXClientRectangle(Hwnd hwnd, Control ctrl)
internal Size TranslateWindowSizeToXWindowSize(CreateParams cp)
internal Size TranslateWindowSizeToXWindowSize(CreateParams cp, Size size)
internal Size TranslateXWindowSizeToWindowSize(CreateParams cp, int xWidth, int xHeight)
internal Point GetTopLevelWindowLocation(Hwnd hwnd)
private void DeriveStyles(int Style, int ExStyle, FormBorderStyle& border_style, Boolean& border_static, TitleStyle& title_style, Int32& caption_height, Int32& tool_caption_height)
private void SetHwndStyles(Hwnd hwnd, CreateParams cp)
private void SetWMStyles(Hwnd hwnd, CreateParams cp)
private void SetIcon(Hwnd hwnd, Icon icon)
private void WakeupMain()
private XEventQueue ThreadQueue(Thread thread)
private void TranslatePropertyToClipboard(IntPtr property)
private string UnescapeUnicodeFromAnsi(string value)
private bool ValidHexDigit(char e)
private void AddExpose(Hwnd hwnd, bool client, int x, int y, int width, int height)
private Borders FrameExtents(IntPtr window)
private void AddConfigureNotify(XEvent xevent)
private void ShowCaret()
private void HideCaret()
private int NextTimeout(ArrayList timers, DateTime now)
private void CheckTimers(ArrayList timers, DateTime now)
private void WaitForHwndMessage(Hwnd hwnd, Msg message)
private void WaitForHwndMessage(Hwnd hwnd, Msg message, bool process)
private void MapWindow(Hwnd hwnd, WindowType windows)
private void UnmapWindow(Hwnd hwnd, WindowType windows)
private void UpdateMessageQueue(XEventQueue queue)
private void UpdateMessageQueue(XEventQueue queue, bool allowIdle)
private IntPtr GetMousewParam(int Delta)
private IntPtr XGetParent(IntPtr handle)
private int HandleError(IntPtr display, XErrorEvent& error_event)
private void AccumulateDestroyedHandles(Control c, ArrayList list)
private void CleanupCachedWindows(Hwnd hwnd)
private void PerformNCCalc(Hwnd hwnd)
private void MouseHover(object sender, EventArgs e)
private void CaretCallback(object sender, EventArgs e)
internal int get_CaptionHeight()
internal Size get_CursorSize()
internal bool get_DragFullWindows()
internal Size get_DragSize()
internal Size get_FrameBorderSize()
internal Size get_IconSize()
internal int get_KeyboardSpeed()
internal int get_KeyboardDelay()
internal Size get_MaxWindowTrackSize()
internal bool get_MenuAccessKeysUnderlined()
internal Size get_MinimizedWindowSpacingSize()
internal Size get_MinimumWindowSize()
internal Size get_MinimumFixedToolWindowSize()
internal Size get_MinimumSizeableToolWindowSize()
internal Size get_MinimumNoBorderWindowSize()
internal Keys get_ModifierKeys()
internal Size get_SmallIconSize()
internal int get_MouseButtonCount()
internal bool get_MouseButtonsSwapped()
internal Point get_MousePosition()
internal Size get_MouseHoverSize()
internal int get_MouseHoverTime()
internal bool get_MouseWheelPresent()
internal MouseButtons get_MouseButtons()
internal Rectangle get_VirtualScreen()
internal Rectangle get_WorkingArea()
internal Screen[] get_AllScreens()
internal bool get_ThemesEnabled()
internal void RaiseIdle(EventArgs e)
internal IntPtr InitializeDriver()
internal void ShutdownDriver(IntPtr token)
internal void EnableThemes()
internal void Activate(IntPtr handle)
internal void AudibleAlert(AlertType alert)
internal void CaretVisible(IntPtr handle, bool visible)
internal bool CalculateWindowRect(Rectangle& ClientRect, CreateParams cp, Menu menu, Rectangle& WindowRect)
internal void ClientToScreen(IntPtr handle, Int32& x, Int32& y)
internal Int32[] ClipboardAvailableFormats(IntPtr handle)
internal void ClipboardClose(IntPtr handle)
internal int ClipboardGetID(IntPtr handle, string format)
internal IntPtr ClipboardOpen(bool primary_selection)
internal object ClipboardRetrieve(IntPtr handle, int type, ClipboardToObject converter)
internal void ClipboardStore(IntPtr handle, object obj, int type, ObjectToClipboard converter, bool copy)
internal void CreateCaret(IntPtr handle, int width, int height)
internal IntPtr CreateWindow(CreateParams cp)
internal IntPtr CreateWindow(IntPtr Parent, int X, int Y, int Width, int Height)
internal IntPtr DefineCursor(Bitmap bitmap, Bitmap mask, Color cursor_pixel, Color mask_pixel, int xHotSpot, int yHotSpot)
internal Bitmap DefineStdCursorBitmap(StdCursor id)
internal IntPtr DefineStdCursor(StdCursor id)
internal CursorFontShape StdCursorToFontShape(StdCursor id)
internal IntPtr DefWndProc(Message& msg)
internal void DestroyCaret(IntPtr handle)
internal void DestroyCursor(IntPtr cursor)
internal void DestroyWindow(IntPtr handle)
internal IntPtr DispatchMessage(MSG& msg)
private IntPtr GetReversibleScreenGC(Color backColor)
private IntPtr GetReversibleControlGC(Control control, int line_width)
internal void DrawReversibleLine(Point start, Point end, Color backColor)
internal void DrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style)
internal void FillReversibleRectangle(Rectangle rectangle, Color backColor)
internal void DrawReversibleRectangle(IntPtr handle, Rectangle rect, int line_width)
internal void DoEvents()
internal void EnableWindow(IntPtr handle, bool Enable)
internal void EndLoop(Thread thread)
internal IntPtr GetActive()
internal Region GetClipRegion(IntPtr handle)
internal void GetCursorInfo(IntPtr cursor, Int32& width, Int32& height, Int32& hotspot_x, Int32& hotspot_y)
internal void GetDisplaySize(Size& size)
internal SizeF GetAutoScaleSize(Font font)
internal IntPtr GetParent(IntPtr handle)
internal IntPtr GetPreviousWindow(IntPtr handle)
internal void GetCursorPos(IntPtr handle, Int32& x, Int32& y)
internal IntPtr GetFocus()
internal bool GetFontMetrics(Graphics g, Font font, Int32& ascent, Int32& descent)
internal Point GetMenuOrigin(IntPtr handle)
internal bool GetMessage(object queue_id, MSG& msg, IntPtr handle, int wFilterMin, int wFilterMax)
private HitTest NCHitTest(Hwnd hwnd, int x, int y)
internal void BeginMoveResize(IntPtr handle)
internal bool GetText(IntPtr handle, String& text)
internal void GetWindowPos(IntPtr handle, bool is_toplevel, Int32& x, Int32& y, Int32& width, Int32& height, Int32& client_width, Int32& client_height)
internal FormWindowState GetWindowState(IntPtr handle)
private FormWindowState UpdateWindowState(IntPtr handle)
internal void GrabInfo(IntPtr& handle, Boolean& GrabConfined, Rectangle& GrabArea)
internal void GrabWindow(IntPtr handle, IntPtr confine_to_handle)
internal void UngrabWindow(IntPtr hwnd)
private void WindowUngrabbed(IntPtr hwnd)
internal void HandleException(Exception e)
internal void Invalidate(IntPtr handle, Rectangle rc, bool clear)
internal void InvalidateNC(IntPtr handle)
internal bool IsEnabled(IntPtr handle)
internal bool IsVisible(IntPtr handle)
internal void KillTimer(Timer timer)
internal void MenuToScreen(IntPtr handle, Int32& x, Int32& y)
internal void OverrideCursor(IntPtr cursor)
internal PaintEventArgs PaintEventStart(Message& msg, IntPtr handle, bool client)
internal void PaintEventEnd(Message& msg, IntPtr handle, bool client)
internal bool PeekMessage(object queue_id, MSG& msg, IntPtr hWnd, int wFilterMin, int wFilterMax, UInt32 flags)
internal bool PostMessage(IntPtr handle, Msg message, IntPtr wparam, IntPtr lparam)
internal void PostQuitMessage(int exitCode)
internal void RequestAdditionalWM_NCMessages(IntPtr hwnd, bool hover, bool leave)
internal void RequestNCRecalc(IntPtr handle)
internal void ResetMouseHover(IntPtr handle)
internal void ScreenToClient(IntPtr handle, Int32& x, Int32& y)
internal void ScreenToMenu(IntPtr handle, Int32& x, Int32& y)
private bool GraphicsExposePredicate(IntPtr display, XEvent& xevent, IntPtr arg)
private void ProcessGraphicsExpose(Hwnd hwnd)
internal void ScrollWindow(IntPtr handle, Rectangle area, int XAmount, int YAmount, bool with_children)
internal void ScrollWindow(IntPtr handle, int XAmount, int YAmount, bool with_children)
private Rectangle GetDirtyArea(Rectangle total_area, Rectangle valid_area, int XAmount, int YAmount)
private Rectangle GetTotalVisibleArea(IntPtr handle)
internal void SendAsyncMethod(AsyncMethodData method)
internal IntPtr SendMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
internal int SendInput(IntPtr handle, Queue keys)
internal void SetAllowDrop(IntPtr handle, bool value)
internal DragDropEffects StartDrag(IntPtr handle, object data, DragDropEffects allowed_effects)
internal void SetBorderStyle(IntPtr handle, FormBorderStyle border_style)
internal void SetCaretPos(IntPtr handle, int x, int y)
internal void SetClipRegion(IntPtr handle, Region region)
internal void SetCursor(IntPtr handle, IntPtr cursor)
private void QueryPointer(IntPtr display, IntPtr w, IntPtr& root, IntPtr& child, Int32& root_x, Int32& root_y, Int32& child_x, Int32& child_y, Int32& mask)
internal void SetCursorPos(IntPtr handle, int x, int y)
internal void SetFocus(IntPtr handle)
internal void SetIcon(IntPtr handle, Icon icon)
internal void SetMenu(IntPtr handle, Menu menu)
internal void SetModal(IntPtr handle, bool Modal)
internal IntPtr SetParent(IntPtr handle, IntPtr parent)
internal void SetTimer(Timer timer)
internal bool SetTopmost(IntPtr handle, bool enabled)
internal bool SetOwner(IntPtr handle, IntPtr handle_owner)
internal bool SetVisible(IntPtr handle, bool visible, bool activate)
internal void SetWindowMinMax(IntPtr handle, Rectangle maximized, Size min, Size max)
internal void SetWindowMinMax(IntPtr handle, Rectangle maximized, Size min, Size max, CreateParams cp)
internal void SetWindowPos(IntPtr handle, int x, int y, int width, int height)
internal void SetWindowState(IntPtr handle, FormWindowState state)
internal void SetWindowStyle(IntPtr handle, CreateParams cp)
internal double GetWindowTransparency(IntPtr handle)
internal void SetWindowTransparency(IntPtr handle, double transparency, Color key)
internal bool SetZOrder(IntPtr handle, IntPtr after_handle, bool top, bool bottom)
internal void ShowCursor(bool show)
internal object StartLoop(Thread thread)
internal TransparencySupport SupportsTransparency()
internal bool SystrayAdd(IntPtr handle, string tip, Icon icon, ToolTip& tt)
internal bool SystrayChange(IntPtr handle, string tip, Icon icon, ToolTip& tt)
internal void SystrayRemove(IntPtr handle, ToolTip& tt)
internal void SystrayBalloon(IntPtr handle, int timeout, string title, string text, ToolTipIcon icon)
internal bool Text(IntPtr handle, string text)
internal bool TranslateMessage(MSG& msg)
internal void UpdateWindow(IntPtr handle)
internal void CreateOffscreenDrawable(IntPtr handle, int width, int height, Object& offscreen_drawable)
internal void DestroyOffscreenDrawable(object offscreen_drawable)
internal Graphics GetOffscreenGraphics(object offscreen_drawable)
internal void BlitFromOffscreen(IntPtr dest_handle, Graphics dest_dc, object offscreen_drawable, Graphics offscreen_dc, Rectangle r)
internal void add_Idle(EventHandler value)
internal void remove_Idle(EventHandler value)
internal IntPtr XcursorLibraryLoadCursor(IntPtr display, string name)
internal IntPtr XcursorLibraryLoadImages(string file, IntPtr theme, int size)
internal void XcursorImagesDestroy(IntPtr images)
internal int XcursorGetDefaultSize(IntPtr display)
internal IntPtr XcursorImageLoadCursor(IntPtr display, IntPtr image)
internal IntPtr XcursorGetTheme(IntPtr display)
internal IntPtr XOpenDisplay(IntPtr display)
internal int XCloseDisplay(IntPtr display)
internal IntPtr XSynchronize(IntPtr display, bool onoff)
internal IntPtr XCreateWindow(IntPtr display, IntPtr parent, int x, int y, int width, int height, int border_width, int depth, int xclass, IntPtr visual, UIntPtr valuemask, XSetWindowAttributes& attributes)
internal IntPtr XCreateSimpleWindow(IntPtr display, IntPtr parent, int x, int y, int width, int height, int border_width, UIntPtr border, UIntPtr background)
internal int XMapWindow(IntPtr display, IntPtr window)
internal int XMapRaised(IntPtr display, IntPtr window)
internal int XUnmapWindow(IntPtr display, IntPtr window)
internal int XMapSubindows(IntPtr display, IntPtr window)
internal int XUnmapSubwindows(IntPtr display, IntPtr window)
internal IntPtr XRootWindow(IntPtr display, int screen_number)
internal IntPtr XNextEvent(IntPtr display, XEvent& xevent)
internal int XConnectionNumber(IntPtr display)
internal int XPending(IntPtr display)
internal IntPtr XSelectInput(IntPtr display, IntPtr window, IntPtr mask)
internal int XDestroyWindow(IntPtr display, IntPtr window)
internal int XReparentWindow(IntPtr display, IntPtr window, IntPtr parent, int x, int y)
private int XMoveResizeWindow(IntPtr display, IntPtr window, int x, int y, int width, int height)
internal int MoveResizeWindow(IntPtr display, IntPtr window, int x, int y, int width, int height)
internal int XResizeWindow(IntPtr display, IntPtr window, int width, int height)
internal int XGetWindowAttributes(IntPtr display, IntPtr window, XWindowAttributes& attributes)
internal int XFlush(IntPtr display)
internal int XSetWMName(IntPtr display, IntPtr window, XTextProperty& text_prop)
internal int XStoreName(IntPtr display, IntPtr window, string window_name)
internal int XFetchName(IntPtr display, IntPtr window, IntPtr& window_name)
internal int XSendEvent(IntPtr display, IntPtr window, bool propagate, IntPtr event_mask, XEvent& send_event)
internal int XQueryTree(IntPtr display, IntPtr window, IntPtr& root_return, IntPtr& parent_return, IntPtr& children_return, Int32& nchildren_return)
internal int XFree(IntPtr data)
internal int XRaiseWindow(IntPtr display, IntPtr window)
internal UInt32 XLowerWindow(IntPtr display, IntPtr window)
internal UInt32 XConfigureWindow(IntPtr display, IntPtr window, ChangeWindowFlags value_mask, XWindowChanges& values)
internal IntPtr XInternAtom(IntPtr display, string atom_name, bool only_if_exists)
internal int XInternAtoms(IntPtr display, String[] atom_names, int atom_count, bool only_if_exists, IntPtr[] atoms)
internal int XSetWMProtocols(IntPtr display, IntPtr window, IntPtr[] protocols, int count)
internal int XGrabPointer(IntPtr display, IntPtr window, bool owner_events, EventMask event_mask, GrabMode pointer_mode, GrabMode keyboard_mode, IntPtr confine_to, IntPtr cursor, IntPtr timestamp)
internal int XUngrabPointer(IntPtr display, IntPtr timestamp)
internal bool XQueryPointer(IntPtr display, IntPtr window, IntPtr& root, IntPtr& child, Int32& root_x, Int32& root_y, Int32& win_x, Int32& win_y, Int32& keys_buttons)
internal bool XTranslateCoordinates(IntPtr display, IntPtr src_w, IntPtr dest_w, int src_x, int src_y, Int32& intdest_x_return, Int32& dest_y_return, IntPtr& child_return)
internal bool XGetGeometry(IntPtr display, IntPtr window, IntPtr& root, Int32& x, Int32& y, Int32& width, Int32& height, Int32& border_width, Int32& depth)
internal bool XGetGeometry(IntPtr display, IntPtr window, IntPtr root, Int32& x, Int32& y, Int32& width, Int32& height, IntPtr border_width, IntPtr depth)
internal bool XGetGeometry(IntPtr display, IntPtr window, IntPtr root, Int32& x, Int32& y, IntPtr width, IntPtr height, IntPtr border_width, IntPtr depth)
internal bool XGetGeometry(IntPtr display, IntPtr window, IntPtr root, IntPtr x, IntPtr y, Int32& width, Int32& height, IntPtr border_width, IntPtr depth)
internal UInt32 XWarpPointer(IntPtr display, IntPtr src_w, IntPtr dest_w, int src_x, int src_y, UInt32 src_width, UInt32 src_height, int dest_x, int dest_y)
internal int XClearWindow(IntPtr display, IntPtr window)
internal int XClearArea(IntPtr display, IntPtr window, int x, int y, int width, int height, bool exposures)
internal IntPtr XDefaultScreenOfDisplay(IntPtr display)
internal int XScreenNumberOfScreen(IntPtr display, IntPtr Screen)
internal IntPtr XDefaultVisual(IntPtr display, int screen_number)
internal UInt32 XDefaultDepth(IntPtr display, int screen_number)
internal int XDefaultScreen(IntPtr display)
internal IntPtr XDefaultColormap(IntPtr display, int screen_number)
internal int XLookupColor(IntPtr display, IntPtr Colormap, string Coloranem, XColor& exact_def_color, XColor& screen_def_color)
internal int XAllocColor(IntPtr display, IntPtr Colormap, XColor& colorcell_def)
internal int XSetTransientForHint(IntPtr display, IntPtr window, IntPtr prop_window)
internal int XChangeProperty(IntPtr display, IntPtr window, IntPtr property, IntPtr type, int format, PropertyMode mode, MotifWmHints& data, int nelements)
internal int XChangeProperty(IntPtr display, IntPtr window, IntPtr property, IntPtr type, int format, PropertyMode mode, UInt32& value, int nelements)
internal int XChangeProperty(IntPtr display, IntPtr window, IntPtr property, IntPtr type, int format, PropertyMode mode, IntPtr& value, int nelements)
internal int XChangeProperty(IntPtr display, IntPtr window, IntPtr property, IntPtr type, int format, PropertyMode mode, UInt32[] data, int nelements)
internal int XChangeProperty(IntPtr display, IntPtr window, IntPtr property, IntPtr type, int format, PropertyMode mode, Int32[] data, int nelements)
internal int XChangeProperty(IntPtr display, IntPtr window, IntPtr property, IntPtr type, int format, PropertyMode mode, IntPtr[] data, int nelements)
internal int XChangeProperty(IntPtr display, IntPtr window, IntPtr property, IntPtr type, int format, PropertyMode mode, IntPtr atoms, int nelements)
internal int XChangeProperty(IntPtr display, IntPtr window, IntPtr property, IntPtr type, int format, PropertyMode mode, string text, int text_length)
internal int XDeleteProperty(IntPtr display, IntPtr window, IntPtr property)
internal IntPtr XCreateGC(IntPtr display, IntPtr window, IntPtr valuemask, XGCValues& values)
internal int XFreeGC(IntPtr display, IntPtr gc)
internal int XSetFunction(IntPtr display, IntPtr gc, GXFunction function)
internal int XSetLineAttributes(IntPtr display, IntPtr gc, int line_width, GCLineStyle line_style, GCCapStyle cap_style, GCJoinStyle join_style)
internal int XDrawLine(IntPtr display, IntPtr drawable, IntPtr gc, int x1, int y1, int x2, int y2)
internal int XDrawRectangle(IntPtr display, IntPtr drawable, IntPtr gc, int x1, int y1, int width, int height)
internal int XFillRectangle(IntPtr display, IntPtr drawable, IntPtr gc, int x1, int y1, int width, int height)
internal int XSetWindowBackground(IntPtr display, IntPtr window, IntPtr background)
internal int XCopyArea(IntPtr display, IntPtr src, IntPtr dest, IntPtr gc, int src_x, int src_y, int width, int height, int dest_x, int dest_y)
internal int XGetWindowProperty(IntPtr display, IntPtr window, IntPtr atom, IntPtr long_offset, IntPtr long_length, bool delete, IntPtr req_type, IntPtr& actual_type, Int32& actual_format, IntPtr& nitems, IntPtr& bytes_after, IntPtr& prop)
internal int XSetInputFocus(IntPtr display, IntPtr window, RevertTo revert_to, IntPtr time)
internal int XIconifyWindow(IntPtr display, IntPtr window, int screen_number)
internal int XDefineCursor(IntPtr display, IntPtr window, IntPtr cursor)
internal int XUndefineCursor(IntPtr display, IntPtr window)
internal int XFreeCursor(IntPtr display, IntPtr cursor)
internal IntPtr XCreateFontCursor(IntPtr display, CursorFontShape shape)
internal IntPtr XCreatePixmapCursor(IntPtr display, IntPtr source, IntPtr mask, XColor& foreground_color, XColor& background_color, int x_hot, int y_hot)
internal IntPtr XCreatePixmapFromBitmapData(IntPtr display, IntPtr drawable, Byte[] data, int width, int height, IntPtr fg, IntPtr bg, int depth)
internal IntPtr XCreatePixmap(IntPtr display, IntPtr d, int width, int height, int depth)
internal IntPtr XFreePixmap(IntPtr display, IntPtr pixmap)
internal int XQueryBestCursor(IntPtr display, IntPtr drawable, int width, int height, Int32& best_width, Int32& best_height)
internal int XQueryExtension(IntPtr display, string extension_name, Int32& major, Int32& first_event, Int32& first_error)
internal IntPtr XWhitePixel(IntPtr display, int screen_no)
internal IntPtr XBlackPixel(IntPtr display, int screen_no)
internal void XGrabServer(IntPtr display)
internal void XUngrabServer(IntPtr display)
internal void XGetWMNormalHints(IntPtr display, IntPtr window, XSizeHints& hints, IntPtr& supplied_return)
internal void XSetWMNormalHints(IntPtr display, IntPtr window, XSizeHints& hints)
internal void XSetZoomHints(IntPtr display, IntPtr window, XSizeHints& hints)
internal void XSetWMHints(IntPtr display, IntPtr window, XWMHints& wmhints)
internal int XGetIconSizes(IntPtr display, IntPtr window, IntPtr& size_list, Int32& count)
internal IntPtr XSetErrorHandler(XErrorHandler error_handler)
internal IntPtr XGetErrorText(IntPtr display, byte code, StringBuilder buffer, int length)
internal int XInitThreads()
internal int XConvertSelection(IntPtr display, IntPtr selection, IntPtr target, IntPtr property, IntPtr requestor, IntPtr time)
internal IntPtr XGetSelectionOwner(IntPtr display, IntPtr selection)
internal int XSetSelectionOwner(IntPtr display, IntPtr selection, IntPtr owner, IntPtr time)
internal int XSetPlaneMask(IntPtr display, IntPtr gc, IntPtr mask)
internal int XSetForeground(IntPtr display, IntPtr gc, UIntPtr foreground)
internal int XSetBackground(IntPtr display, IntPtr gc, UIntPtr background)
internal int XBell(IntPtr display, int percent)
internal int XChangeActivePointerGrab(IntPtr display, EventMask event_mask, IntPtr cursor, IntPtr time)
internal bool XFilterEvent(XEvent& xevent, IntPtr window)
internal void XkbSetDetectableAutoRepeat(IntPtr display, bool detectable, IntPtr supported)
internal void XPeekEvent(IntPtr display, XEvent& xevent)
internal void XIfEvent(IntPtr display, XEvent& xevent, Delegate event_predicate, IntPtr arg)
internal void XGetInputFocus(IntPtr display, IntPtr& focus, IntPtr& revert_to)
internal IntPtr gdk_atom_intern(string atomName, bool onlyIfExists)
internal IntPtr gtk_clipboard_get(IntPtr atom)
internal void gtk_clipboard_store(IntPtr clipboard)
internal void gtk_clipboard_set_text(IntPtr clipboard, string text, int len)
internal IntPtr XineramaQueryScreens(IntPtr display, Int32& number)
private bool _XineramaIsActive(IntPtr display)
internal bool XineramaIsActive(IntPtr display)
}
internal System.Windows.Forms.XPoint : object {
public short X
public short Y
}
internal System.Windows.Forms.XPropertyEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal IntPtr atom
internal IntPtr time
internal int state
}
internal System.Windows.Forms.XReparentEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr xevent
internal IntPtr window
internal IntPtr parent
internal int x
internal int y
internal bool override_redirect
}
internal System.Windows.Forms.XRequest : Enum {
public byte value__
public XRequest X_CreateWindow
public XRequest X_ChangeWindowAttributes
public XRequest X_GetWindowAttributes
public XRequest X_DestroyWindow
public XRequest X_DestroySubwindows
public XRequest X_ChangeSaveSet
public XRequest X_ReparentWindow
public XRequest X_MapWindow
public XRequest X_MapSubwindows
public XRequest X_UnmapWindow
public XRequest X_UnmapSubwindows
public XRequest X_ConfigureWindow
public XRequest X_CirculateWindow
public XRequest X_GetGeometry
public XRequest X_QueryTree
public XRequest X_InternAtom
public XRequest X_GetAtomName
public XRequest X_ChangeProperty
public XRequest X_DeleteProperty
public XRequest X_GetProperty
public XRequest X_ListProperties
public XRequest X_SetSelectionOwner
public XRequest X_GetSelectionOwner
public XRequest X_ConvertSelection
public XRequest X_SendEvent
public XRequest X_GrabPointer
public XRequest X_UngrabPointer
public XRequest X_GrabButton
public XRequest X_UngrabButton
public XRequest X_ChangeActivePointerGrab
public XRequest X_GrabKeyboard
public XRequest X_UngrabKeyboard
public XRequest X_GrabKey
public XRequest X_UngrabKey
public XRequest X_AllowEvents
public XRequest X_GrabServer
public XRequest X_UngrabServer
public XRequest X_QueryPointer
public XRequest X_GetMotionEvents
public XRequest X_TranslateCoords
public XRequest X_WarpPointer
public XRequest X_SetInputFocus
public XRequest X_GetInputFocus
public XRequest X_QueryKeymap
public XRequest X_OpenFont
public XRequest X_CloseFont
public XRequest X_QueryFont
public XRequest X_QueryTextExtents
public XRequest X_ListFonts
public XRequest X_ListFontsWithInfo
public XRequest X_SetFontPath
public XRequest X_GetFontPath
public XRequest X_CreatePixmap
public XRequest X_FreePixmap
public XRequest X_CreateGC
public XRequest X_ChangeGC
public XRequest X_CopyGC
public XRequest X_SetDashes
public XRequest X_SetClipRectangles
public XRequest X_FreeGC
public XRequest X_ClearArea
public XRequest X_CopyArea
public XRequest X_CopyPlane
public XRequest X_PolyPoint
public XRequest X_PolyLine
public XRequest X_PolySegment
public XRequest X_PolyRectangle
public XRequest X_PolyArc
public XRequest X_FillPoly
public XRequest X_PolyFillRectangle
public XRequest X_PolyFillArc
public XRequest X_PutImage
public XRequest X_GetImage
public XRequest X_PolyText8
public XRequest X_PolyText16
public XRequest X_ImageText8
public XRequest X_ImageText16
public XRequest X_CreateColormap
public XRequest X_FreeColormap
public XRequest X_CopyColormapAndFree
public XRequest X_InstallColormap
public XRequest X_UninstallColormap
public XRequest X_ListInstalledColormaps
public XRequest X_AllocColor
public XRequest X_AllocNamedColor
public XRequest X_AllocColorCells
public XRequest X_AllocColorPlanes
public XRequest X_FreeColors
public XRequest X_StoreColors
public XRequest X_StoreNamedColor
public XRequest X_QueryColors
public XRequest X_LookupColor
public XRequest X_CreateCursor
public XRequest X_CreateGlyphCursor
public XRequest X_FreeCursor
public XRequest X_RecolorCursor
public XRequest X_QueryBestSize
public XRequest X_QueryExtension
public XRequest X_ListExtensions
public XRequest X_ChangeKeyboardMapping
public XRequest X_GetKeyboardMapping
public XRequest X_ChangeKeyboardControl
public XRequest X_GetKeyboardControl
public XRequest X_Bell
public XRequest X_ChangePointerControl
public XRequest X_GetPointerControl
public XRequest X_SetScreenSaver
public XRequest X_GetScreenSaver
public XRequest X_ChangeHosts
public XRequest X_ListHosts
public XRequest X_SetAccessControl
public XRequest X_SetCloseDownMode
public XRequest X_KillClient
public XRequest X_RotateProperties
public XRequest X_ForceScreenSaver
public XRequest X_SetPointerMapping
public XRequest X_GetPointerMapping
public XRequest X_SetModifierMapping
public XRequest X_GetModifierMapping
public XRequest X_NoOperation
}
internal System.Windows.Forms.XResizeRequestEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal int width
internal int height
}
internal System.Windows.Forms.XScreen : ValueType {
internal IntPtr ext_data
internal IntPtr display
internal IntPtr root
internal int width
internal int height
internal int mwidth
internal int mheight
internal int ndepths
internal IntPtr depths
internal int root_depth
internal IntPtr root_visual
internal IntPtr default_gc
internal IntPtr cmap
internal IntPtr white_pixel
internal IntPtr black_pixel
internal int max_maps
internal int min_maps
internal int backing_store
internal bool save_unders
internal IntPtr root_input_mask
}
internal System.Windows.Forms.XSelectionClearEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal IntPtr selection
internal IntPtr time
}
internal System.Windows.Forms.XSelectionEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr requestor
internal IntPtr selection
internal IntPtr target
internal IntPtr property
internal IntPtr time
}
internal System.Windows.Forms.XSelectionRequestEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr owner
internal IntPtr requestor
internal IntPtr selection
internal IntPtr target
internal IntPtr property
internal IntPtr time
}
internal System.Windows.Forms.XSetWindowAttributes : ValueType {
internal IntPtr background_pixmap
internal IntPtr background_pixel
internal IntPtr border_pixmap
internal IntPtr border_pixel
internal Gravity bit_gravity
internal Gravity win_gravity
internal int backing_store
internal IntPtr backing_planes
internal IntPtr backing_pixel
internal bool save_under
internal IntPtr event_mask
internal IntPtr do_not_propagate_mask
internal bool override_redirect
internal IntPtr colormap
internal IntPtr cursor
}
internal System.Windows.Forms.XSizeHints : ValueType {
internal IntPtr flags
internal int x
internal int y
internal int width
internal int height
internal int min_width
internal int min_height
internal int max_width
internal int max_height
internal int width_inc
internal int height_inc
internal int min_aspect_x
internal int min_aspect_y
internal int max_aspect_x
internal int max_aspect_y
internal int base_width
internal int base_height
internal int win_gravity
}
internal System.Windows.Forms.XSizeHintsFlags : Enum {
public int value__
public XSizeHintsFlags USPosition
public XSizeHintsFlags USSize
public XSizeHintsFlags PPosition
public XSizeHintsFlags PSize
public XSizeHintsFlags PMinSize
public XSizeHintsFlags PMaxSize
public XSizeHintsFlags PResizeInc
public XSizeHintsFlags PAspect
public XSizeHintsFlags PAllHints
public XSizeHintsFlags PBaseSize
public XSizeHintsFlags PWinGravity
}
internal System.Windows.Forms.XStandardColormap : ValueType {
internal IntPtr colormap
internal IntPtr red_max
internal IntPtr red_mult
internal IntPtr green_max
internal IntPtr green_mult
internal IntPtr blue_max
internal IntPtr blue_mult
internal IntPtr base_pixel
internal IntPtr visualid
internal IntPtr killid
}
internal System.Windows.Forms.XTextProperty : ValueType {
internal string value
internal IntPtr encoding
internal int format
internal IntPtr nitems
}
internal System.Windows.Forms.XUnmapEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr xevent
internal IntPtr window
internal bool from_configure
}
internal System.Windows.Forms.XVisibilityEvent : ValueType {
internal XEventName type
internal IntPtr serial
internal bool send_event
internal IntPtr display
internal IntPtr window
internal int state
}
internal System.Windows.Forms.XWindowAttributes : ValueType {
internal int x
internal int y
internal int width
internal int height
internal int border_width
internal int depth
internal IntPtr visual
internal IntPtr root
internal int c_class
internal Gravity bit_gravity
internal Gravity win_gravity
internal int backing_store
internal IntPtr backing_planes
internal IntPtr backing_pixel
internal bool save_under
internal IntPtr colormap
internal bool map_installed
internal MapState map_state
internal IntPtr all_event_masks
internal IntPtr your_event_mask
internal IntPtr do_not_propagate_mask
internal bool override_direct
internal IntPtr screen
public string ToString()
}
internal System.Windows.Forms.XWindowChanges : ValueType {
internal int x
internal int y
internal int width
internal int height
internal int border_width
internal IntPtr sibling
internal StackMode stack_mode
}
internal System.Windows.Forms.XWindowClass : Enum {
public int value__
public XWindowClass InputOutput
public XWindowClass InputOnly
}
internal System.Windows.Forms.XWMHints : ValueType {
internal IntPtr flags
internal bool input
internal XInitialState initial_state
internal IntPtr icon_pixmap
internal IntPtr icon_window
internal int icon_x
internal int icon_y
internal IntPtr icon_mask
internal IntPtr window_group
}
internal System.Windows.Forms.XWMHintsFlags : Enum {
public int value__
public XWMHintsFlags InputHint
public XWMHintsFlags StateHint
public XWMHintsFlags IconPixmapHint
public XWMHintsFlags IconWindowHint
public XWMHintsFlags IconPositionHint
public XWMHintsFlags IconMaskHint
public XWMHintsFlags WindowGroupHint
public XWMHintsFlags AllHints
}
