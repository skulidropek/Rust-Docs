public System.BinaryData : object {
private int CopyToBufferSize
private ReadOnlyMemory`1<byte> _bytes
public void .ctor(Byte[] data)
public void .ctor(object jsonSerializable, JsonSerializerOptions options, Type type)
public void .ctor(ReadOnlyMemory`1<byte> data)
public void .ctor(string data)
public BinaryData FromBytes(ReadOnlyMemory`1<byte> data)
public BinaryData FromBytes(Byte[] data)
public BinaryData FromString(string data)
public BinaryData FromStream(Stream stream)
public Task`1<BinaryData> FromStreamAsync(Stream stream, CancellationToken cancellationToken)
private Task`1<BinaryData> FromStreamAsync(Stream stream, bool async, CancellationToken cancellationToken)
public BinaryData FromObjectAsJson(T jsonSerializable, JsonSerializerOptions options)
public string ToString()
public Stream ToStream()
public ReadOnlyMemory`1<byte> ToMemory()
public Byte[] ToArray()
public T ToObjectFromJson(JsonSerializerOptions options)
public ReadOnlyMemory`1<byte> op_Implicit(BinaryData data)
public ReadOnlySpan`1<byte> op_Implicit(BinaryData data)
public bool Equals(object obj)
public int GetHashCode()
}
internal System.IO.ReadOnlyMemoryStream : Stream {
private ReadOnlyMemory`1<byte> _content
private bool _isOpen
private int _position
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(ReadOnlyMemory`1<byte> content)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public int ReadByte()
public int Read(Byte[] buffer, int offset, int count)
private int ReadBuffer(Span`1<byte> buffer)
public Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken)
public void Flush()
public Task FlushAsync(CancellationToken cancellationToken)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
private void ValidateReadArrayArguments(Byte[] buffer, int offset, int count)
private void ValidateNotClosed()
protected void Dispose(bool disposing)
}
internal System.Runtime.CompilerServices.NullableAttribute : Attribute {
public Byte[] NullableFlags
public void .ctor(byte )
public void .ctor(Byte[] )
}
internal System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
public byte Flag
public void .ctor(byte )
}
