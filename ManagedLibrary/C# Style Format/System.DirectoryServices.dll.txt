internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport : object {
public bool BridgeAllSiteLinks
public bool IgnoreReplicationSchedule
public ReadOnlySiteLinkBridgeCollection SiteLinkBridges
public ReadOnlySiteLinkCollection SiteLinks
public ActiveDirectoryTransportType TransportType
public bool get_BridgeAllSiteLinks()
public void set_BridgeAllSiteLinks(bool value)
public bool get_IgnoreReplicationSchedule()
public void set_IgnoreReplicationSchedule(bool value)
public ReadOnlySiteLinkBridgeCollection get_SiteLinkBridges()
public ReadOnlySiteLinkCollection get_SiteLinks()
public ActiveDirectoryTransportType get_TransportType()
public void Dispose()
protected void Dispose(bool disposing)
public ActiveDirectoryInterSiteTransport FindByTransportType(DirectoryContext context, ActiveDirectoryTransportType transport)
public DirectoryEntry GetDirectoryEntry()
public void Save()
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException : Exception {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception inner)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException : Exception {
public string Name
public Type Type
public void .ctor(string message, Type type, string name)
public void .ctor(string message, Exception inner)
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
public string get_Name()
public Type get_Type()
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException : Exception {
public int ErrorCode
public int get_ErrorCode()
public void .ctor(string message, Exception inner, int errorCode)
public void .ctor(string message, int errorCode)
public void .ctor(string message, Exception inner)
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition : object {
public string Name
public string get_Name()
public void Dispose()
protected void Dispose(bool disposing)
public string ToString()
public DirectoryEntry GetDirectoryEntry()
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata : DictionaryBase {
public AttributeMetadata Item
public ReadOnlyStringCollection AttributeNames
public AttributeMetadataCollection Values
public AttributeMetadata get_Item(string name)
public ReadOnlyStringCollection get_AttributeNames()
public AttributeMetadataCollection get_Values()
public bool Contains(string attributeName)
public void CopyTo(AttributeMetadata[] array, int index)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole : Enum {
public int value__
public ActiveDirectoryRole SchemaRole
public ActiveDirectoryRole NamingRole
public ActiveDirectoryRole PdcRole
public ActiveDirectoryRole RidRole
public ActiveDirectoryRole InfrastructureRole
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection : ReadOnlyCollectionBase {
public ActiveDirectoryRole Item
public ActiveDirectoryRole get_Item(int index)
public bool Contains(ActiveDirectoryRole role)
public int IndexOf(ActiveDirectoryRole role)
public void CopyTo(ActiveDirectoryRole[] roles, int index)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule : object {
public Boolean[0...,0...,0...] RawSchedule
public Boolean[0...,0...,0...] get_RawSchedule()
public void set_RawSchedule(Boolean[0...,0...,0...] value)
public void .ctor(ActiveDirectorySchedule schedule)
public void SetSchedule(DayOfWeek day, HourOfDay fromHour, MinuteOfHour fromMinute, HourOfDay toHour, MinuteOfHour toMinute)
public void SetSchedule(DayOfWeek[] days, HourOfDay fromHour, MinuteOfHour fromMinute, HourOfDay toHour, MinuteOfHour toMinute)
public void SetDailySchedule(HourOfDay fromHour, MinuteOfHour fromMinute, HourOfDay toHour, MinuteOfHour toMinute)
public void ResetSchedule()
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema : ActiveDirectoryPartition {
public DirectoryServer SchemaRoleOwner
public DirectoryServer get_SchemaRoleOwner()
protected void Dispose(bool disposing)
public ActiveDirectorySchema GetSchema(DirectoryContext context)
public void RefreshSchema()
public ActiveDirectorySchemaClass FindClass(string ldapDisplayName)
public ActiveDirectorySchemaClass FindDefunctClass(string commonName)
public ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses()
public ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses(SchemaClassType type)
public ReadOnlyActiveDirectorySchemaClassCollection FindAllDefunctClasses()
public ActiveDirectorySchemaProperty FindProperty(string ldapDisplayName)
public ActiveDirectorySchemaProperty FindDefunctProperty(string commonName)
public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties()
public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties(PropertyTypes type)
public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllDefunctProperties()
public DirectoryEntry GetDirectoryEntry()
public ActiveDirectorySchema GetCurrentSchema()
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass : object {
public string Name
public string CommonName
public string Oid
public string Description
public bool IsDefunct
public ActiveDirectorySchemaClassCollection PossibleSuperiors
public ReadOnlyActiveDirectorySchemaClassCollection PossibleInferiors
public ActiveDirectorySchemaPropertyCollection MandatoryProperties
public ActiveDirectorySchemaPropertyCollection OptionalProperties
public ActiveDirectorySchemaClassCollection AuxiliaryClasses
public ActiveDirectorySchemaClass SubClassOf
public SchemaClassType Type
public Guid SchemaGuid
public ActiveDirectorySecurity DefaultObjectSecurityDescriptor
public string get_Name()
public string get_CommonName()
public void set_CommonName(string value)
public string get_Oid()
public void set_Oid(string value)
public string get_Description()
public void set_Description(string value)
public bool get_IsDefunct()
public void set_IsDefunct(bool value)
public ActiveDirectorySchemaClassCollection get_PossibleSuperiors()
public ReadOnlyActiveDirectorySchemaClassCollection get_PossibleInferiors()
public ActiveDirectorySchemaPropertyCollection get_MandatoryProperties()
public ActiveDirectorySchemaPropertyCollection get_OptionalProperties()
public ActiveDirectorySchemaClassCollection get_AuxiliaryClasses()
public ActiveDirectorySchemaClass get_SubClassOf()
public void set_SubClassOf(ActiveDirectorySchemaClass value)
public SchemaClassType get_Type()
public void set_Type(SchemaClassType value)
public Guid get_SchemaGuid()
public void set_SchemaGuid(Guid value)
public ActiveDirectorySecurity get_DefaultObjectSecurityDescriptor()
public void set_DefaultObjectSecurityDescriptor(ActiveDirectorySecurity value)
public void .ctor(DirectoryContext context, string ldapDisplayName)
public void Dispose()
protected void Dispose(bool disposing)
public ActiveDirectorySchemaClass FindByName(DirectoryContext context, string ldapDisplayName)
public ReadOnlyActiveDirectorySchemaPropertyCollection GetAllProperties()
public void Save()
public string ToString()
public DirectoryEntry GetDirectoryEntry()
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection : CollectionBase {
public ActiveDirectorySchemaClass Item
public ActiveDirectorySchemaClass get_Item(int index)
public void set_Item(int index, ActiveDirectorySchemaClass value)
public int Add(ActiveDirectorySchemaClass schemaClass)
public void AddRange(ActiveDirectorySchemaClass[] schemaClasses)
public void AddRange(ActiveDirectorySchemaClassCollection schemaClasses)
public void AddRange(ReadOnlyActiveDirectorySchemaClassCollection schemaClasses)
public void Remove(ActiveDirectorySchemaClass schemaClass)
public void Insert(int index, ActiveDirectorySchemaClass schemaClass)
public bool Contains(ActiveDirectorySchemaClass schemaClass)
public void CopyTo(ActiveDirectorySchemaClass[] schemaClasses, int index)
public int IndexOf(ActiveDirectorySchemaClass schemaClass)
protected void OnClearComplete()
protected void OnInsertComplete(int index, object value)
protected void OnRemoveComplete(int index, object value)
protected void OnSetComplete(int index, object oldValue, object newValue)
protected void OnValidate(object value)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty : object {
public string Name
public string CommonName
public string Oid
public ActiveDirectorySyntax Syntax
public string Description
public bool IsSingleValued
public bool IsIndexed
public bool IsIndexedOverContainer
public bool IsInAnr
public bool IsOnTombstonedObject
public bool IsTupleIndexed
public bool IsInGlobalCatalog
public int RangeLower
public int RangeUpper
public bool IsDefunct
public ActiveDirectorySchemaProperty Link
public Nullable`1<int> LinkId
public Guid SchemaGuid
public string get_Name()
public string get_CommonName()
public void set_CommonName(string value)
public string get_Oid()
public void set_Oid(string value)
public ActiveDirectorySyntax get_Syntax()
public void set_Syntax(ActiveDirectorySyntax value)
public string get_Description()
public void set_Description(string value)
public bool get_IsSingleValued()
public void set_IsSingleValued(bool value)
public bool get_IsIndexed()
public void set_IsIndexed(bool value)
public bool get_IsIndexedOverContainer()
public void set_IsIndexedOverContainer(bool value)
public bool get_IsInAnr()
public void set_IsInAnr(bool value)
public bool get_IsOnTombstonedObject()
public void set_IsOnTombstonedObject(bool value)
public bool get_IsTupleIndexed()
public void set_IsTupleIndexed(bool value)
public bool get_IsInGlobalCatalog()
public void set_IsInGlobalCatalog(bool value)
public int get_RangeLower()
public void set_RangeLower(int value)
public int get_RangeUpper()
public void set_RangeUpper(int value)
public bool get_IsDefunct()
public void set_IsDefunct(bool value)
public ActiveDirectorySchemaProperty get_Link()
public Nullable`1<int> get_LinkId()
public void set_LinkId(Nullable`1<int> value)
public Guid get_SchemaGuid()
public void set_SchemaGuid(Guid value)
public void .ctor(DirectoryContext context, string ldapDisplayName)
public void Dispose()
protected void Dispose(bool disposing)
public ActiveDirectorySchemaProperty FindByName(DirectoryContext context, string ldapDisplayName)
public void Save()
public string ToString()
public DirectoryEntry GetDirectoryEntry()
public void set_RangeLower(Nullable`1<int> value)
public void set_RangeUpper(Nullable`1<int> value)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection : CollectionBase {
public ActiveDirectorySchemaProperty Item
public ActiveDirectorySchemaProperty get_Item(int index)
public void set_Item(int index, ActiveDirectorySchemaProperty value)
public int Add(ActiveDirectorySchemaProperty schemaProperty)
public void AddRange(ActiveDirectorySchemaProperty[] properties)
public void AddRange(ActiveDirectorySchemaPropertyCollection properties)
public void AddRange(ReadOnlyActiveDirectorySchemaPropertyCollection properties)
public void Remove(ActiveDirectorySchemaProperty schemaProperty)
public void Insert(int index, ActiveDirectorySchemaProperty schemaProperty)
public bool Contains(ActiveDirectorySchemaProperty schemaProperty)
public void CopyTo(ActiveDirectorySchemaProperty[] properties, int index)
public int IndexOf(ActiveDirectorySchemaProperty schemaProperty)
protected void OnClearComplete()
protected void OnInsertComplete(int index, object value)
protected void OnRemoveComplete(int index, object value)
protected void OnSetComplete(int index, object oldValue, object newValue)
protected void OnValidate(object value)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException : Exception {
public int ErrorCode
public string Name
public string Message
public int get_ErrorCode()
public string get_Name()
public string get_Message()
public void .ctor(string message, Exception inner, int errorCode, string name)
public void .ctor(string message, int errorCode, string name)
public void .ctor(string message, Exception inner)
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySite : object {
public string Name
public DomainCollection Domains
public ActiveDirectorySubnetCollection Subnets
public ReadOnlyDirectoryServerCollection Servers
public ReadOnlySiteCollection AdjacentSites
public ReadOnlySiteLinkCollection SiteLinks
public DirectoryServer InterSiteTopologyGenerator
public ActiveDirectorySiteOptions Options
public string Location
public ReadOnlyDirectoryServerCollection BridgeheadServers
public DirectoryServerCollection PreferredSmtpBridgeheadServers
public DirectoryServerCollection PreferredRpcBridgeheadServers
public ActiveDirectorySchedule IntraSiteReplicationSchedule
public string get_Name()
public DomainCollection get_Domains()
public ActiveDirectorySubnetCollection get_Subnets()
public ReadOnlyDirectoryServerCollection get_Servers()
public ReadOnlySiteCollection get_AdjacentSites()
public ReadOnlySiteLinkCollection get_SiteLinks()
public DirectoryServer get_InterSiteTopologyGenerator()
public void set_InterSiteTopologyGenerator(DirectoryServer value)
public ActiveDirectorySiteOptions get_Options()
public void set_Options(ActiveDirectorySiteOptions value)
public string get_Location()
public void set_Location(string value)
public ReadOnlyDirectoryServerCollection get_BridgeheadServers()
public DirectoryServerCollection get_PreferredSmtpBridgeheadServers()
public DirectoryServerCollection get_PreferredRpcBridgeheadServers()
public ActiveDirectorySchedule get_IntraSiteReplicationSchedule()
public void set_IntraSiteReplicationSchedule(ActiveDirectorySchedule value)
public ActiveDirectorySite FindByName(DirectoryContext context, string siteName)
public void .ctor(DirectoryContext context, string siteName)
public ActiveDirectorySite GetComputerSite()
public void Save()
public void Delete()
public string ToString()
public DirectoryEntry GetDirectoryEntry()
public void Dispose()
protected void Dispose(bool disposing)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection : CollectionBase {
public ActiveDirectorySite Item
public ActiveDirectorySite get_Item(int index)
public void set_Item(int index, ActiveDirectorySite value)
public int Add(ActiveDirectorySite site)
public void AddRange(ActiveDirectorySite[] sites)
public void AddRange(ActiveDirectorySiteCollection sites)
public bool Contains(ActiveDirectorySite site)
public void CopyTo(ActiveDirectorySite[] array, int index)
public int IndexOf(ActiveDirectorySite site)
public void Insert(int index, ActiveDirectorySite site)
public void Remove(ActiveDirectorySite site)
protected void OnClearComplete()
protected void OnInsertComplete(int index, object value)
protected void OnRemoveComplete(int index, object value)
protected void OnSetComplete(int index, object oldValue, object newValue)
protected void OnValidate(object value)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink : object {
public string Name
public ActiveDirectoryTransportType TransportType
public ActiveDirectorySiteCollection Sites
public int Cost
public TimeSpan ReplicationInterval
public bool ReciprocalReplicationEnabled
public bool NotificationEnabled
public bool DataCompressionEnabled
public ActiveDirectorySchedule InterSiteReplicationSchedule
public string get_Name()
public ActiveDirectoryTransportType get_TransportType()
public ActiveDirectorySiteCollection get_Sites()
public int get_Cost()
public void set_Cost(int value)
public TimeSpan get_ReplicationInterval()
public void set_ReplicationInterval(TimeSpan value)
public bool get_ReciprocalReplicationEnabled()
public void set_ReciprocalReplicationEnabled(bool value)
public bool get_NotificationEnabled()
public void set_NotificationEnabled(bool value)
public bool get_DataCompressionEnabled()
public void set_DataCompressionEnabled(bool value)
public ActiveDirectorySchedule get_InterSiteReplicationSchedule()
public void set_InterSiteReplicationSchedule(ActiveDirectorySchedule value)
public void .ctor(DirectoryContext context, string siteLinkName)
public void .ctor(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport)
public void .ctor(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport, ActiveDirectorySchedule schedule)
public ActiveDirectorySiteLink FindByName(DirectoryContext context, string siteLinkName)
public ActiveDirectorySiteLink FindByName(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport)
public void Save()
public void Delete()
public string ToString()
public DirectoryEntry GetDirectoryEntry()
public void Dispose()
protected void Dispose(bool disposing)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge : object {
public string Name
public ActiveDirectorySiteLinkCollection SiteLinks
public ActiveDirectoryTransportType TransportType
public string get_Name()
public ActiveDirectorySiteLinkCollection get_SiteLinks()
public ActiveDirectoryTransportType get_TransportType()
public void .ctor(DirectoryContext context, string bridgeName)
public void .ctor(DirectoryContext context, string bridgeName, ActiveDirectoryTransportType transport)
public ActiveDirectorySiteLinkBridge FindByName(DirectoryContext context, string bridgeName)
public ActiveDirectorySiteLinkBridge FindByName(DirectoryContext context, string bridgeName, ActiveDirectoryTransportType transport)
public void Save()
public void Delete()
public string ToString()
public DirectoryEntry GetDirectoryEntry()
public void Dispose()
protected void Dispose(bool disposing)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection : CollectionBase {
public ActiveDirectorySiteLink Item
public ActiveDirectorySiteLink get_Item(int index)
public void set_Item(int index, ActiveDirectorySiteLink value)
public int Add(ActiveDirectorySiteLink link)
public void AddRange(ActiveDirectorySiteLink[] links)
public void AddRange(ActiveDirectorySiteLinkCollection links)
public bool Contains(ActiveDirectorySiteLink link)
public void CopyTo(ActiveDirectorySiteLink[] array, int index)
public int IndexOf(ActiveDirectorySiteLink link)
public void Insert(int index, ActiveDirectorySiteLink link)
public void Remove(ActiveDirectorySiteLink link)
protected void OnClearComplete()
protected void OnInsertComplete(int index, object value)
protected void OnRemoveComplete(int index, object value)
protected void OnSetComplete(int index, object oldValue, object newValue)
protected void OnValidate(object value)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions : Enum {
public int value__
public ActiveDirectorySiteOptions None
public ActiveDirectorySiteOptions AutoTopologyDisabled
public ActiveDirectorySiteOptions TopologyCleanupDisabled
public ActiveDirectorySiteOptions AutoMinimumHopDisabled
public ActiveDirectorySiteOptions StaleServerDetectDisabled
public ActiveDirectorySiteOptions AutoInterSiteTopologyDisabled
public ActiveDirectorySiteOptions GroupMembershipCachingEnabled
public ActiveDirectorySiteOptions ForceKccWindows2003Behavior
public ActiveDirectorySiteOptions UseWindows2000IstgElection
public ActiveDirectorySiteOptions RandomBridgeHeaderServerSelectionDisabled
public ActiveDirectorySiteOptions UseHashingForReplicationSchedule
public ActiveDirectorySiteOptions RedundantServerTopologyEnabled
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet : object {
public string Name
public ActiveDirectorySite Site
public string Location
public string get_Name()
public ActiveDirectorySite get_Site()
public void set_Site(ActiveDirectorySite value)
public string get_Location()
public void set_Location(string value)
public ActiveDirectorySubnet FindByName(DirectoryContext context, string subnetName)
public void .ctor(DirectoryContext context, string subnetName)
public void .ctor(DirectoryContext context, string subnetName, string siteName)
public void Save()
public void Delete()
public string ToString()
public DirectoryEntry GetDirectoryEntry()
public void Dispose()
protected void Dispose(bool disposing)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection : CollectionBase {
public ActiveDirectorySubnet Item
public ActiveDirectorySubnet get_Item(int index)
public void set_Item(int index, ActiveDirectorySubnet value)
public int Add(ActiveDirectorySubnet subnet)
public void AddRange(ActiveDirectorySubnet[] subnets)
public void AddRange(ActiveDirectorySubnetCollection subnets)
public bool Contains(ActiveDirectorySubnet subnet)
public void CopyTo(ActiveDirectorySubnet[] array, int index)
public int IndexOf(ActiveDirectorySubnet subnet)
public void Insert(int index, ActiveDirectorySubnet subnet)
public void Remove(ActiveDirectorySubnet subnet)
protected void OnClear()
protected void OnClearComplete()
protected void OnInsertComplete(int index, object value)
protected void OnRemoveComplete(int index, object value)
protected void OnSetComplete(int index, object oldValue, object newValue)
protected void OnValidate(object value)
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax : Enum {
public int value__
public ActiveDirectorySyntax CaseExactString
public ActiveDirectorySyntax CaseIgnoreString
public ActiveDirectorySyntax NumericString
public ActiveDirectorySyntax DirectoryString
public ActiveDirectorySyntax OctetString
public ActiveDirectorySyntax SecurityDescriptor
public ActiveDirectorySyntax Int
public ActiveDirectorySyntax Int64
public ActiveDirectorySyntax Bool
public ActiveDirectorySyntax Oid
public ActiveDirectorySyntax GeneralizedTime
public ActiveDirectorySyntax UtcTime
public ActiveDirectorySyntax DN
public ActiveDirectorySyntax DNWithBinary
public ActiveDirectorySyntax DNWithString
public ActiveDirectorySyntax Enumeration
public ActiveDirectorySyntax IA5String
public ActiveDirectorySyntax PrintableString
public ActiveDirectorySyntax Sid
public ActiveDirectorySyntax AccessPointDN
public ActiveDirectorySyntax ORName
public ActiveDirectorySyntax PresentationAddress
public ActiveDirectorySyntax ReplicaLink
}
public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType : Enum {
public int value__
public ActiveDirectoryTransportType Rpc
public ActiveDirectoryTransportType Smtp
}
public System.DirectoryServices.ActiveDirectory.AdamInstance : DirectoryServer {
public ConfigurationSet ConfigurationSet
public string DefaultPartition
public string HostName
public ReplicationConnectionCollection InboundConnections
public string IPAddress
public int LdapPort
public ReplicationConnectionCollection OutboundConnections
public AdamRoleCollection Roles
public string SiteName
public int SslPort
public SyncUpdateCallback SyncFromAllServersCallback
public ConfigurationSet get_ConfigurationSet()
public string get_DefaultPartition()
public void set_DefaultPartition(string value)
public string get_HostName()
public ReplicationConnectionCollection get_InboundConnections()
public string get_IPAddress()
public int get_LdapPort()
public ReplicationConnectionCollection get_OutboundConnections()
public AdamRoleCollection get_Roles()
public string get_SiteName()
public int get_SslPort()
public SyncUpdateCallback get_SyncFromAllServersCallback()
public void set_SyncFromAllServersCallback(SyncUpdateCallback value)
public void CheckReplicationConsistency()
public AdamInstanceCollection FindAll(DirectoryContext context, string partitionName)
public AdamInstance FindOne(DirectoryContext context, string partitionName)
public AdamInstance GetAdamInstance(DirectoryContext context)
public ReplicationNeighborCollection GetAllReplicationNeighbors()
public ReplicationFailureCollection GetReplicationConnectionFailures()
public ReplicationCursorCollection GetReplicationCursors(string partition)
public ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath)
public ReplicationNeighborCollection GetReplicationNeighbors(string partition)
public ReplicationOperationInformation GetReplicationOperationInformation()
public void Save()
public void SeizeRoleOwnership(AdamRole role)
public void SyncReplicaFromAllServers(string partition, SyncFromAllServersOptions options)
public void SyncReplicaFromServer(string partition, string sourceServer)
public void TransferRoleOwnership(AdamRole role)
public void TriggerSyncReplicaFromNeighbors(string partition)
}
public System.DirectoryServices.ActiveDirectory.AdamInstanceCollection : ReadOnlyCollectionBase {
public AdamInstance Item
public AdamInstance get_Item(int index)
public bool Contains(AdamInstance adamInstance)
public void CopyTo(AdamInstance[] adamInstances, int index)
public int IndexOf(AdamInstance adamInstance)
}
public System.DirectoryServices.ActiveDirectory.AdamRole : Enum {
public int value__
public AdamRole NamingRole
public AdamRole SchemaRole
}
public System.DirectoryServices.ActiveDirectory.AdamRoleCollection : ReadOnlyCollectionBase {
public AdamRole Item
public AdamRole get_Item(int index)
public bool Contains(AdamRole role)
public void CopyTo(AdamRole[] roles, int index)
public int IndexOf(AdamRole role)
}
public System.DirectoryServices.ActiveDirectory.ApplicationPartition : ActiveDirectoryPartition {
public DirectoryServerCollection DirectoryServers
public string SecurityReferenceDomain
public DirectoryServerCollection get_DirectoryServers()
public string get_SecurityReferenceDomain()
public void set_SecurityReferenceDomain(string value)
public void .ctor(DirectoryContext context, string distinguishedName)
public void .ctor(DirectoryContext context, string distinguishedName, string objectClass)
protected void Dispose(bool disposing)
public ApplicationPartition GetApplicationPartition(DirectoryContext context)
public ApplicationPartition FindByName(DirectoryContext context, string distinguishedName)
public DirectoryServer FindDirectoryServer()
public DirectoryServer FindDirectoryServer(string siteName)
public DirectoryServer FindDirectoryServer(bool forceRediscovery)
public DirectoryServer FindDirectoryServer(string siteName, bool forceRediscovery)
public ReadOnlyDirectoryServerCollection FindAllDirectoryServers()
public ReadOnlyDirectoryServerCollection FindAllDirectoryServers(string siteName)
public ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers()
public ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers(string siteName)
public void Delete()
public void Save()
public DirectoryEntry GetDirectoryEntry()
}
public System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection : ReadOnlyCollectionBase {
public ApplicationPartition Item
public ApplicationPartition get_Item(int index)
public bool Contains(ApplicationPartition applicationPartition)
public int IndexOf(ApplicationPartition applicationPartition)
public void CopyTo(ApplicationPartition[] applicationPartitions, int index)
}
public System.DirectoryServices.ActiveDirectory.AttributeMetadata : object {
public string Name
public int Version
public DateTime LastOriginatingChangeTime
public Guid LastOriginatingInvocationId
public long OriginatingChangeUsn
public long LocalChangeUsn
public string OriginatingServer
public string get_Name()
public int get_Version()
public DateTime get_LastOriginatingChangeTime()
public Guid get_LastOriginatingInvocationId()
public long get_OriginatingChangeUsn()
public long get_LocalChangeUsn()
public string get_OriginatingServer()
}
public System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection : ReadOnlyCollectionBase {
public AttributeMetadata Item
public AttributeMetadata get_Item(int index)
public bool Contains(AttributeMetadata metadata)
public int IndexOf(AttributeMetadata metadata)
public void CopyTo(AttributeMetadata[] metadata, int index)
}
public System.DirectoryServices.ActiveDirectory.ConfigurationSet : object {
public AdamInstanceCollection AdamInstances
public ApplicationPartitionCollection ApplicationPartitions
public string Name
public AdamInstance NamingRoleOwner
public ActiveDirectorySchema Schema
public AdamInstance SchemaRoleOwner
public ReadOnlySiteCollection Sites
public AdamInstanceCollection get_AdamInstances()
public ApplicationPartitionCollection get_ApplicationPartitions()
public string get_Name()
public AdamInstance get_NamingRoleOwner()
public ActiveDirectorySchema get_Schema()
public AdamInstance get_SchemaRoleOwner()
public ReadOnlySiteCollection get_Sites()
public void Dispose()
protected void Dispose(bool disposing)
public AdamInstance FindAdamInstance()
public AdamInstance FindAdamInstance(string partitionName)
public AdamInstance FindAdamInstance(string partitionName, string siteName)
public AdamInstanceCollection FindAllAdamInstances()
public AdamInstanceCollection FindAllAdamInstances(string partitionName)
public AdamInstanceCollection FindAllAdamInstances(string partitionName, string siteName)
public ConfigurationSet GetConfigurationSet(DirectoryContext context)
public DirectoryEntry GetDirectoryEntry()
public ReplicationSecurityLevel GetSecurityLevel()
public void SetSecurityLevel(ReplicationSecurityLevel securityLevel)
}
public System.DirectoryServices.ActiveDirectory.DirectoryContext : object {
public string Name
public string UserName
public DirectoryContextType ContextType
public string get_Name()
public string get_UserName()
public DirectoryContextType get_ContextType()
public void .ctor(DirectoryContextType contextType)
public void .ctor(DirectoryContextType contextType, string name)
public void .ctor(DirectoryContextType contextType, string username, string password)
public void .ctor(DirectoryContextType contextType, string name, string username, string password)
}
public System.DirectoryServices.ActiveDirectory.DirectoryContextType : Enum {
public int value__
public DirectoryContextType Domain
public DirectoryContextType Forest
public DirectoryContextType DirectoryServer
public DirectoryContextType ConfigurationSet
public DirectoryContextType ApplicationPartition
}
public System.DirectoryServices.ActiveDirectory.DirectoryServer : object {
public string Name
public ReadOnlyStringCollection Partitions
public string IPAddress
public string SiteName
public SyncUpdateCallback SyncFromAllServersCallback
public ReplicationConnectionCollection InboundConnections
public ReplicationConnectionCollection OutboundConnections
internal DirectoryContext Context
public string get_Name()
public ReadOnlyStringCollection get_Partitions()
public string get_IPAddress()
public string get_SiteName()
public SyncUpdateCallback get_SyncFromAllServersCallback()
public void set_SyncFromAllServersCallback(SyncUpdateCallback value)
public ReplicationConnectionCollection get_InboundConnections()
public ReplicationConnectionCollection get_OutboundConnections()
internal DirectoryContext get_Context()
public void Dispose()
protected void Dispose(bool disposing)
public string ToString()
public void MoveToAnotherSite(string siteName)
public DirectoryEntry GetDirectoryEntry()
public void CheckReplicationConsistency()
public ReplicationCursorCollection GetReplicationCursors(string partition)
public ReplicationOperationInformation GetReplicationOperationInformation()
public ReplicationNeighborCollection GetReplicationNeighbors(string partition)
public ReplicationNeighborCollection GetAllReplicationNeighbors()
public ReplicationFailureCollection GetReplicationConnectionFailures()
public ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath)
public void SyncReplicaFromServer(string partition, string sourceServer)
public void TriggerSyncReplicaFromNeighbors(string partition)
public void SyncReplicaFromAllServers(string partition, SyncFromAllServersOptions options)
}
public System.DirectoryServices.ActiveDirectory.DirectoryServerCollection : CollectionBase {
public DirectoryServer Item
public DirectoryServer get_Item(int index)
public void set_Item(int index, DirectoryServer value)
public int Add(DirectoryServer server)
public void AddRange(DirectoryServer[] servers)
public bool Contains(DirectoryServer server)
public void CopyTo(DirectoryServer[] array, int index)
public int IndexOf(DirectoryServer server)
public void Insert(int index, DirectoryServer server)
public void Remove(DirectoryServer server)
protected void OnClear()
protected void OnClearComplete()
protected void OnInsertComplete(int index, object value)
protected void OnRemoveComplete(int index, object value)
protected void OnSetComplete(int index, object oldValue, object newValue)
protected void OnValidate(object value)
}
public System.DirectoryServices.ActiveDirectory.Domain : ActiveDirectoryPartition {
public Forest Forest
public DomainControllerCollection DomainControllers
public DomainCollection Children
public DomainMode DomainMode
public Domain Parent
public DomainController PdcRoleOwner
public DomainController RidRoleOwner
public DomainController InfrastructureRoleOwner
public int DomainModeLevel
public Forest get_Forest()
public DomainControllerCollection get_DomainControllers()
public DomainCollection get_Children()
public DomainMode get_DomainMode()
public Domain get_Parent()
public DomainController get_PdcRoleOwner()
public DomainController get_RidRoleOwner()
public DomainController get_InfrastructureRoleOwner()
public Domain GetDomain(DirectoryContext context)
public Domain GetComputerDomain()
public void RaiseDomainFunctionality(DomainMode domainMode)
public DomainController FindDomainController()
public DomainController FindDomainController(string siteName)
public DomainController FindDomainController(LocatorOptions flag)
public DomainController FindDomainController(string siteName, LocatorOptions flag)
public DomainControllerCollection FindAllDomainControllers()
public DomainControllerCollection FindAllDomainControllers(string siteName)
public DomainControllerCollection FindAllDiscoverableDomainControllers()
public DomainControllerCollection FindAllDiscoverableDomainControllers(string siteName)
public DirectoryEntry GetDirectoryEntry()
public TrustRelationshipInformationCollection GetAllTrustRelationships()
public TrustRelationshipInformation GetTrustRelationship(string targetDomainName)
public bool GetSelectiveAuthenticationStatus(string targetDomainName)
public void SetSelectiveAuthenticationStatus(string targetDomainName, bool enable)
public bool GetSidFilteringStatus(string targetDomainName)
public void SetSidFilteringStatus(string targetDomainName, bool enable)
public void DeleteLocalSideOfTrustRelationship(string targetDomainName)
public void DeleteTrustRelationship(Domain targetDomain)
public void VerifyOutboundTrustRelationship(string targetDomainName)
public void VerifyTrustRelationship(Domain targetDomain, TrustDirection direction)
public void CreateLocalSideOfTrustRelationship(string targetDomainName, TrustDirection direction, string trustPassword)
public void CreateTrustRelationship(Domain targetDomain, TrustDirection direction)
public void UpdateLocalSideOfTrustRelationship(string targetDomainName, string newTrustPassword)
public void UpdateLocalSideOfTrustRelationship(string targetDomainName, TrustDirection newTrustDirection, string newTrustPassword)
public void UpdateTrustRelationship(Domain targetDomain, TrustDirection newTrustDirection)
public void RepairTrustRelationship(Domain targetDomain)
public Domain GetCurrentDomain()
public int get_DomainModeLevel()
public void RaiseDomainFunctionalityLevel(int domainMode)
}
public System.DirectoryServices.ActiveDirectory.DomainCollection : ReadOnlyCollectionBase {
public Domain Item
public Domain get_Item(int index)
public bool Contains(Domain domain)
public int IndexOf(Domain domain)
public void CopyTo(Domain[] domains, int index)
}
public System.DirectoryServices.ActiveDirectory.DomainCollisionOptions : Enum {
public int value__
public DomainCollisionOptions None
public DomainCollisionOptions SidDisabledByAdmin
public DomainCollisionOptions SidDisabledByConflict
public DomainCollisionOptions NetBiosNameDisabledByAdmin
public DomainCollisionOptions NetBiosNameDisabledByConflict
}
public System.DirectoryServices.ActiveDirectory.DomainController : DirectoryServer {
public Forest Forest
public DateTime CurrentTime
public long HighestCommittedUsn
public string OSVersion
public ActiveDirectoryRoleCollection Roles
public Domain Domain
public string IPAddress
public string SiteName
public SyncUpdateCallback SyncFromAllServersCallback
public ReplicationConnectionCollection InboundConnections
public ReplicationConnectionCollection OutboundConnections
public Forest get_Forest()
public DateTime get_CurrentTime()
public long get_HighestCommittedUsn()
public string get_OSVersion()
public ActiveDirectoryRoleCollection get_Roles()
public Domain get_Domain()
public string get_IPAddress()
public string get_SiteName()
public SyncUpdateCallback get_SyncFromAllServersCallback()
public void set_SyncFromAllServersCallback(SyncUpdateCallback value)
public ReplicationConnectionCollection get_InboundConnections()
public ReplicationConnectionCollection get_OutboundConnections()
protected void Dispose(bool disposing)
public DomainController GetDomainController(DirectoryContext context)
public DomainController FindOne(DirectoryContext context)
public DomainController FindOne(DirectoryContext context, string siteName)
public DomainController FindOne(DirectoryContext context, LocatorOptions flag)
public DomainController FindOne(DirectoryContext context, string siteName, LocatorOptions flag)
public DomainControllerCollection FindAll(DirectoryContext context)
public DomainControllerCollection FindAll(DirectoryContext context, string siteName)
public GlobalCatalog EnableGlobalCatalog()
public bool IsGlobalCatalog()
public void TransferRoleOwnership(ActiveDirectoryRole role)
public void SeizeRoleOwnership(ActiveDirectoryRole role)
public DirectorySearcher GetDirectorySearcher()
public void CheckReplicationConsistency()
public ReplicationCursorCollection GetReplicationCursors(string partition)
public ReplicationOperationInformation GetReplicationOperationInformation()
public ReplicationNeighborCollection GetReplicationNeighbors(string partition)
public ReplicationNeighborCollection GetAllReplicationNeighbors()
public ReplicationFailureCollection GetReplicationConnectionFailures()
public ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath)
public void SyncReplicaFromServer(string partition, string sourceServer)
public void TriggerSyncReplicaFromNeighbors(string partition)
public void SyncReplicaFromAllServers(string partition, SyncFromAllServersOptions options)
}
public System.DirectoryServices.ActiveDirectory.DomainControllerCollection : ReadOnlyCollectionBase {
public DomainController Item
public DomainController get_Item(int index)
public bool Contains(DomainController domainController)
public int IndexOf(DomainController domainController)
public void CopyTo(DomainController[] domainControllers, int index)
}
public System.DirectoryServices.ActiveDirectory.DomainMode : Enum {
public int value__
public DomainMode Windows2000MixedDomain
public DomainMode Windows2000NativeDomain
public DomainMode Windows2003InterimDomain
public DomainMode Windows2003Domain
public DomainMode Windows2008Domain
public DomainMode Windows2008R2Domain
public DomainMode Unknown
public DomainMode Windows2012R2Domain
public DomainMode Windows8Domain
}
public System.DirectoryServices.ActiveDirectory.Forest : object {
public string Name
public ReadOnlySiteCollection Sites
public DomainCollection Domains
public GlobalCatalogCollection GlobalCatalogs
public ApplicationPartitionCollection ApplicationPartitions
public ForestMode ForestMode
public Domain RootDomain
public ActiveDirectorySchema Schema
public DomainController SchemaRoleOwner
public DomainController NamingRoleOwner
public int ForestModeLevel
public string get_Name()
public ReadOnlySiteCollection get_Sites()
public DomainCollection get_Domains()
public GlobalCatalogCollection get_GlobalCatalogs()
public ApplicationPartitionCollection get_ApplicationPartitions()
public ForestMode get_ForestMode()
public Domain get_RootDomain()
public ActiveDirectorySchema get_Schema()
public DomainController get_SchemaRoleOwner()
public DomainController get_NamingRoleOwner()
public void Dispose()
protected void Dispose(bool disposing)
public Forest GetForest(DirectoryContext context)
public void RaiseForestFunctionality(ForestMode forestMode)
public string ToString()
public GlobalCatalog FindGlobalCatalog()
public GlobalCatalog FindGlobalCatalog(string siteName)
public GlobalCatalog FindGlobalCatalog(LocatorOptions flag)
public GlobalCatalog FindGlobalCatalog(string siteName, LocatorOptions flag)
public GlobalCatalogCollection FindAllGlobalCatalogs()
public GlobalCatalogCollection FindAllGlobalCatalogs(string siteName)
public GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs()
public GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs(string siteName)
public TrustRelationshipInformationCollection GetAllTrustRelationships()
public ForestTrustRelationshipInformation GetTrustRelationship(string targetForestName)
public bool GetSelectiveAuthenticationStatus(string targetForestName)
public void SetSelectiveAuthenticationStatus(string targetForestName, bool enable)
public bool GetSidFilteringStatus(string targetForestName)
public void SetSidFilteringStatus(string targetForestName, bool enable)
public void DeleteLocalSideOfTrustRelationship(string targetForestName)
public void DeleteTrustRelationship(Forest targetForest)
public void VerifyOutboundTrustRelationship(string targetForestName)
public void VerifyTrustRelationship(Forest targetForest, TrustDirection direction)
public void CreateLocalSideOfTrustRelationship(string targetForestName, TrustDirection direction, string trustPassword)
public void CreateTrustRelationship(Forest targetForest, TrustDirection direction)
public void UpdateLocalSideOfTrustRelationship(string targetForestName, string newTrustPassword)
public void UpdateLocalSideOfTrustRelationship(string targetForestName, TrustDirection newTrustDirection, string newTrustPassword)
public void UpdateTrustRelationship(Forest targetForest, TrustDirection newTrustDirection)
public void RepairTrustRelationship(Forest targetForest)
public Forest GetCurrentForest()
public int get_ForestModeLevel()
public void RaiseForestFunctionalityLevel(int forestMode)
}
public System.DirectoryServices.ActiveDirectory.ForestMode : Enum {
public int value__
public ForestMode Windows2000Forest
public ForestMode Windows2003InterimForest
public ForestMode Windows2003Forest
public ForestMode Windows2008Forest
public ForestMode Windows2008R2Forest
public ForestMode Unknown
public ForestMode Windows2012R2Forest
public ForestMode Windows8Forest
}
public System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException : ActiveDirectoryOperationException {
public ForestTrustRelationshipCollisionCollection Collisions
public ForestTrustRelationshipCollisionCollection get_Collisions()
public void .ctor(string message, Exception inner, ForestTrustRelationshipCollisionCollection collisions)
public void .ctor(string message, Exception inner)
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
}
public System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType : Enum {
public int value__
public ForestTrustCollisionType TopLevelName
public ForestTrustCollisionType Domain
public ForestTrustCollisionType Other
}
public System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection : ReadOnlyCollectionBase {
public ForestTrustDomainInformation Item
public ForestTrustDomainInformation get_Item(int index)
public bool Contains(ForestTrustDomainInformation information)
public int IndexOf(ForestTrustDomainInformation information)
public void CopyTo(ForestTrustDomainInformation[] array, int index)
}
public System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation : object {
public string DnsName
public string NetBiosName
public string DomainSid
public ForestTrustDomainStatus Status
public string get_DnsName()
public string get_NetBiosName()
public string get_DomainSid()
public ForestTrustDomainStatus get_Status()
public void set_Status(ForestTrustDomainStatus value)
}
public System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus : Enum {
public int value__
public ForestTrustDomainStatus Enabled
public ForestTrustDomainStatus SidAdminDisabled
public ForestTrustDomainStatus SidConflictDisabled
public ForestTrustDomainStatus NetBiosNameAdminDisabled
public ForestTrustDomainStatus NetBiosNameConflictDisabled
}
public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision : object {
public ForestTrustCollisionType CollisionType
public TopLevelNameCollisionOptions TopLevelNameCollisionOption
public DomainCollisionOptions DomainCollisionOption
public string CollisionRecord
public ForestTrustCollisionType get_CollisionType()
public TopLevelNameCollisionOptions get_TopLevelNameCollisionOption()
public DomainCollisionOptions get_DomainCollisionOption()
public string get_CollisionRecord()
}
public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection : ReadOnlyCollectionBase {
public ForestTrustRelationshipCollision Item
public ForestTrustRelationshipCollision get_Item(int index)
public bool Contains(ForestTrustRelationshipCollision collision)
public int IndexOf(ForestTrustRelationshipCollision collision)
public void CopyTo(ForestTrustRelationshipCollision[] array, int index)
}
public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation : TrustRelationshipInformation {
public TopLevelNameCollection TopLevelNames
public StringCollection ExcludedTopLevelNames
public ForestTrustDomainInfoCollection TrustedDomainInformation
public TopLevelNameCollection get_TopLevelNames()
public StringCollection get_ExcludedTopLevelNames()
public ForestTrustDomainInfoCollection get_TrustedDomainInformation()
public void Save()
}
public System.DirectoryServices.ActiveDirectory.GlobalCatalog : DomainController {
public GlobalCatalog GetGlobalCatalog(DirectoryContext context)
public GlobalCatalog FindOne(DirectoryContext context)
public GlobalCatalog FindOne(DirectoryContext context, string siteName)
public GlobalCatalog FindOne(DirectoryContext context, LocatorOptions flag)
public GlobalCatalog FindOne(DirectoryContext context, string siteName, LocatorOptions flag)
public GlobalCatalogCollection FindAll(DirectoryContext context)
public GlobalCatalogCollection FindAll(DirectoryContext context, string siteName)
public GlobalCatalog EnableGlobalCatalog()
public DomainController DisableGlobalCatalog()
public bool IsGlobalCatalog()
public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties()
public DirectorySearcher GetDirectorySearcher()
}
public System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection : ReadOnlyCollectionBase {
public GlobalCatalog Item
public GlobalCatalog get_Item(int index)
public bool Contains(GlobalCatalog globalCatalog)
public int IndexOf(GlobalCatalog globalCatalog)
public void CopyTo(GlobalCatalog[] globalCatalogs, int index)
}
public System.DirectoryServices.ActiveDirectory.HourOfDay : Enum {
public int value__
public HourOfDay Zero
public HourOfDay One
public HourOfDay Two
public HourOfDay Three
public HourOfDay Four
public HourOfDay Five
public HourOfDay Six
public HourOfDay Seven
public HourOfDay Eight
public HourOfDay Nine
public HourOfDay Ten
public HourOfDay Eleven
public HourOfDay Twelve
public HourOfDay Thirteen
public HourOfDay Fourteen
public HourOfDay Fifteen
public HourOfDay Sixteen
public HourOfDay Seventeen
public HourOfDay Eighteen
public HourOfDay Nineteen
public HourOfDay Twenty
public HourOfDay TwentyOne
public HourOfDay TwentyTwo
public HourOfDay TwentyThree
}
public System.DirectoryServices.ActiveDirectory.LocatorOptions : Enum {
public long value__
public LocatorOptions ForceRediscovery
public LocatorOptions KdcRequired
public LocatorOptions TimeServerRequired
public LocatorOptions WriteableRequired
public LocatorOptions AvoidSelf
}
public System.DirectoryServices.ActiveDirectory.MinuteOfHour : Enum {
public int value__
public MinuteOfHour Zero
public MinuteOfHour Fifteen
public MinuteOfHour Thirty
public MinuteOfHour FortyFive
}
public System.DirectoryServices.ActiveDirectory.NotificationStatus : Enum {
public int value__
public NotificationStatus NoNotification
public NotificationStatus IntraSiteOnly
public NotificationStatus NotificationAlways
}
public System.DirectoryServices.ActiveDirectory.PropertyTypes : Enum {
public int value__
public PropertyTypes Indexed
public PropertyTypes InGlobalCatalog
}
public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection : ReadOnlyCollectionBase {
public ActiveDirectorySchemaClass Item
public ActiveDirectorySchemaClass get_Item(int index)
public bool Contains(ActiveDirectorySchemaClass schemaClass)
public int IndexOf(ActiveDirectorySchemaClass schemaClass)
public void CopyTo(ActiveDirectorySchemaClass[] classes, int index)
}
public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection : ReadOnlyCollectionBase {
public ActiveDirectorySchemaProperty Item
public ActiveDirectorySchemaProperty get_Item(int index)
public bool Contains(ActiveDirectorySchemaProperty schemaProperty)
public int IndexOf(ActiveDirectorySchemaProperty schemaProperty)
public void CopyTo(ActiveDirectorySchemaProperty[] properties, int index)
}
public System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection : ReadOnlyCollectionBase {
public DirectoryServer Item
public DirectoryServer get_Item(int index)
public bool Contains(DirectoryServer directoryServer)
public int IndexOf(DirectoryServer directoryServer)
public void CopyTo(DirectoryServer[] directoryServers, int index)
}
public System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection : ReadOnlyCollectionBase {
public ActiveDirectorySite Item
public ActiveDirectorySite get_Item(int index)
public bool Contains(ActiveDirectorySite site)
public int IndexOf(ActiveDirectorySite site)
public void CopyTo(ActiveDirectorySite[] sites, int index)
}
public System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection : ReadOnlyCollectionBase {
public ActiveDirectorySiteLinkBridge Item
public ActiveDirectorySiteLinkBridge get_Item(int index)
public bool Contains(ActiveDirectorySiteLinkBridge bridge)
public int IndexOf(ActiveDirectorySiteLinkBridge bridge)
public void CopyTo(ActiveDirectorySiteLinkBridge[] bridges, int index)
}
public System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection : ReadOnlyCollectionBase {
public ActiveDirectorySiteLink Item
public ActiveDirectorySiteLink get_Item(int index)
public bool Contains(ActiveDirectorySiteLink link)
public int IndexOf(ActiveDirectorySiteLink link)
public void CopyTo(ActiveDirectorySiteLink[] links, int index)
}
public System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection : ReadOnlyCollectionBase {
public string Item
public string get_Item(int index)
public bool Contains(string value)
public int IndexOf(string value)
public void CopyTo(String[] values, int index)
}
public System.DirectoryServices.ActiveDirectory.ReplicationConnection : object {
public string Name
public string SourceServer
public string DestinationServer
public bool Enabled
public ActiveDirectoryTransportType TransportType
public bool GeneratedByKcc
public bool ReciprocalReplicationEnabled
public NotificationStatus ChangeNotificationStatus
public bool DataCompressionEnabled
public bool ReplicationScheduleOwnedByUser
public ReplicationSpan ReplicationSpan
public ActiveDirectorySchedule ReplicationSchedule
public string get_Name()
public string get_SourceServer()
public string get_DestinationServer()
public bool get_Enabled()
public void set_Enabled(bool value)
public ActiveDirectoryTransportType get_TransportType()
public bool get_GeneratedByKcc()
public void set_GeneratedByKcc(bool value)
public bool get_ReciprocalReplicationEnabled()
public void set_ReciprocalReplicationEnabled(bool value)
public NotificationStatus get_ChangeNotificationStatus()
public void set_ChangeNotificationStatus(NotificationStatus value)
public bool get_DataCompressionEnabled()
public void set_DataCompressionEnabled(bool value)
public bool get_ReplicationScheduleOwnedByUser()
public void set_ReplicationScheduleOwnedByUser(bool value)
public ReplicationSpan get_ReplicationSpan()
public ActiveDirectorySchedule get_ReplicationSchedule()
public void set_ReplicationSchedule(ActiveDirectorySchedule value)
public ReplicationConnection FindByName(DirectoryContext context, string name)
public void .ctor(DirectoryContext context, string name, DirectoryServer sourceServer)
public void .ctor(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectorySchedule schedule)
public void .ctor(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectoryTransportType transport)
public void .ctor(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectorySchedule schedule, ActiveDirectoryTransportType transport)
public void Dispose()
protected void Dispose(bool disposing)
public void Delete()
public void Save()
public string ToString()
public DirectoryEntry GetDirectoryEntry()
}
public System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection : ReadOnlyCollectionBase {
public ReplicationConnection Item
public ReplicationConnection get_Item(int index)
public bool Contains(ReplicationConnection connection)
public int IndexOf(ReplicationConnection connection)
public void CopyTo(ReplicationConnection[] connections, int index)
}
public System.DirectoryServices.ActiveDirectory.ReplicationCursor : object {
public string PartitionName
public Guid SourceInvocationId
public long UpToDatenessUsn
public string SourceServer
public DateTime LastSuccessfulSyncTime
public string get_PartitionName()
public Guid get_SourceInvocationId()
public long get_UpToDatenessUsn()
public string get_SourceServer()
public DateTime get_LastSuccessfulSyncTime()
}
public System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection : ReadOnlyCollectionBase {
public ReplicationCursor Item
public ReplicationCursor get_Item(int index)
public bool Contains(ReplicationCursor cursor)
public int IndexOf(ReplicationCursor cursor)
public void CopyTo(ReplicationCursor[] values, int index)
}
public System.DirectoryServices.ActiveDirectory.ReplicationFailure : object {
public string SourceServer
public DateTime FirstFailureTime
public int ConsecutiveFailureCount
public int LastErrorCode
public string LastErrorMessage
public string get_SourceServer()
public DateTime get_FirstFailureTime()
public int get_ConsecutiveFailureCount()
public int get_LastErrorCode()
public string get_LastErrorMessage()
}
public System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection : ReadOnlyCollectionBase {
public ReplicationFailure Item
public ReplicationFailure get_Item(int index)
public bool Contains(ReplicationFailure failure)
public int IndexOf(ReplicationFailure failure)
public void CopyTo(ReplicationFailure[] failures, int index)
}
public System.DirectoryServices.ActiveDirectory.ReplicationNeighbor : object {
public string PartitionName
public string SourceServer
public ActiveDirectoryTransportType TransportType
public ReplicationNeighborOptions ReplicationNeighborOption
public Guid SourceInvocationId
public long UsnLastObjectChangeSynced
public long UsnAttributeFilter
public DateTime LastSuccessfulSync
public DateTime LastAttemptedSync
public int LastSyncResult
public string LastSyncMessage
public int ConsecutiveFailureCount
public string get_PartitionName()
public string get_SourceServer()
public ActiveDirectoryTransportType get_TransportType()
public ReplicationNeighborOptions get_ReplicationNeighborOption()
public Guid get_SourceInvocationId()
public long get_UsnLastObjectChangeSynced()
public long get_UsnAttributeFilter()
public DateTime get_LastSuccessfulSync()
public DateTime get_LastAttemptedSync()
public int get_LastSyncResult()
public string get_LastSyncMessage()
public int get_ConsecutiveFailureCount()
}
public System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection : ReadOnlyCollectionBase {
public ReplicationNeighbor Item
public ReplicationNeighbor get_Item(int index)
public bool Contains(ReplicationNeighbor neighbor)
public int IndexOf(ReplicationNeighbor neighbor)
public void CopyTo(ReplicationNeighbor[] neighbors, int index)
}
public System.DirectoryServices.ActiveDirectory.ReplicationOperation : object {
public DateTime TimeEnqueued
public int OperationNumber
public int Priority
public ReplicationOperationType OperationType
public string PartitionName
public string SourceServer
public DateTime get_TimeEnqueued()
public int get_OperationNumber()
public int get_Priority()
public ReplicationOperationType get_OperationType()
public string get_PartitionName()
public string get_SourceServer()
}
public System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection : ReadOnlyCollectionBase {
public ReplicationOperation Item
public ReplicationOperation get_Item(int index)
public bool Contains(ReplicationOperation operation)
public int IndexOf(ReplicationOperation operation)
public void CopyTo(ReplicationOperation[] operations, int index)
private int Add(ReplicationOperation operation)
}
public System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation : object {
public DateTime OperationStartTime
public ReplicationOperation CurrentOperation
public ReplicationOperationCollection PendingOperations
public DateTime get_OperationStartTime()
public ReplicationOperation get_CurrentOperation()
public ReplicationOperationCollection get_PendingOperations()
}
public System.DirectoryServices.ActiveDirectory.ReplicationOperationType : Enum {
public int value__
public ReplicationOperationType Sync
public ReplicationOperationType Add
public ReplicationOperationType Delete
public ReplicationOperationType Modify
public ReplicationOperationType UpdateReference
}
public System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel : Enum {
public int value__
public ReplicationSecurityLevel MutualAuthentication
public ReplicationSecurityLevel Negotiate
public ReplicationSecurityLevel NegotiatePassThrough
}
public System.DirectoryServices.ActiveDirectory.ReplicationSpan : Enum {
public int value__
public ReplicationSpan IntraSite
public ReplicationSpan InterSite
}
public System.DirectoryServices.ActiveDirectory.SchemaClassType : Enum {
public int value__
public SchemaClassType Type88
public SchemaClassType Structural
public SchemaClassType Abstract
public SchemaClassType Auxiliary
}
public System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory : Enum {
public int value__
public SyncFromAllServersErrorCategory ErrorContactingServer
public SyncFromAllServersErrorCategory ErrorReplicating
public SyncFromAllServersErrorCategory ServerUnreachable
}
public System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation : object {
public SyncFromAllServersErrorCategory ErrorCategory
public int ErrorCode
public string ErrorMessage
public string TargetServer
public string SourceServer
public SyncFromAllServersErrorCategory get_ErrorCategory()
public int get_ErrorCode()
public string get_ErrorMessage()
public string get_TargetServer()
public string get_SourceServer()
}
public System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent : Enum {
public int value__
public SyncFromAllServersEvent Error
public SyncFromAllServersEvent SyncStarted
public SyncFromAllServersEvent SyncCompleted
public SyncFromAllServersEvent Finished
}
public System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException : ActiveDirectoryOperationException {
public SyncFromAllServersErrorInformation[] ErrorInformation
public SyncFromAllServersErrorInformation[] get_ErrorInformation()
public void .ctor(string message, Exception inner, SyncFromAllServersErrorInformation[] errors)
public void .ctor(string message, Exception inner)
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
}
public System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions : Enum {
public int value__
public SyncFromAllServersOptions None
public SyncFromAllServersOptions AbortIfServerUnavailable
public SyncFromAllServersOptions SyncAdjacentServerOnly
public SyncFromAllServersOptions CheckServerAlivenessOnly
public SyncFromAllServersOptions SkipInitialCheck
public SyncFromAllServersOptions PushChangeOutward
public SyncFromAllServersOptions CrossSite
}
public System.DirectoryServices.ActiveDirectory.SyncUpdateCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(SyncFromAllServersEvent eventType, string targetServer, string sourceServer, SyncFromAllServersOperationException exception)
public IAsyncResult BeginInvoke(SyncFromAllServersEvent eventType, string targetServer, string sourceServer, SyncFromAllServersOperationException exception, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
public System.DirectoryServices.ActiveDirectory.TopLevelName : object {
public string Name
public TopLevelNameStatus Status
public string get_Name()
public TopLevelNameStatus get_Status()
public void set_Status(TopLevelNameStatus value)
}
public System.DirectoryServices.ActiveDirectory.TopLevelNameCollection : ReadOnlyCollectionBase {
public TopLevelName Item
public TopLevelName get_Item(int index)
public bool Contains(TopLevelName name)
public int IndexOf(TopLevelName name)
public void CopyTo(TopLevelName[] names, int index)
}
public System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions : Enum {
public int value__
public TopLevelNameCollisionOptions None
public TopLevelNameCollisionOptions NewlyCreated
public TopLevelNameCollisionOptions DisabledByAdmin
public TopLevelNameCollisionOptions DisabledByConflict
}
public System.DirectoryServices.ActiveDirectory.TopLevelNameStatus : Enum {
public int value__
public TopLevelNameStatus Enabled
public TopLevelNameStatus NewlyCreated
public TopLevelNameStatus AdminDisabled
public TopLevelNameStatus ConflictDisabled
}
public System.DirectoryServices.ActiveDirectory.TrustDirection : Enum {
public int value__
public TrustDirection Inbound
public TrustDirection Outbound
public TrustDirection Bidirectional
}
public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation : object {
public string SourceName
public string TargetName
public TrustType TrustType
public TrustDirection TrustDirection
public string get_SourceName()
public string get_TargetName()
public TrustType get_TrustType()
public TrustDirection get_TrustDirection()
}
public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection : ReadOnlyCollectionBase {
public TrustRelationshipInformation Item
public TrustRelationshipInformation get_Item(int index)
public bool Contains(TrustRelationshipInformation information)
public int IndexOf(TrustRelationshipInformation information)
public void CopyTo(TrustRelationshipInformation[] array, int index)
}
public System.DirectoryServices.ActiveDirectory.TrustType : Enum {
public int value__
public TrustType TreeRoot
public TrustType ParentChild
public TrustType CrossLink
public TrustType External
public TrustType Forest
public TrustType Kerberos
public TrustType Unknown
}
public System.DirectoryServices.ActiveDirectoryAccessRule : ObjectAccessRule {
public ActiveDirectoryRights ActiveDirectoryRights
public ActiveDirectorySecurityInheritance InheritanceType
public ActiveDirectoryRights get_ActiveDirectoryRights()
public ActiveDirectorySecurityInheritance get_InheritanceType()
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, Guid objectType)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
internal void .ctor(IdentityReference identity, int accessMask, AccessControlType type, Guid objectType, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid inheritedObjectType)
}
public System.DirectoryServices.ActiveDirectoryAuditRule : ObjectAuditRule {
public ActiveDirectoryRights ActiveDirectoryRights
public ActiveDirectorySecurityInheritance InheritanceType
public ActiveDirectoryRights get_ActiveDirectoryRights()
public ActiveDirectorySecurityInheritance get_InheritanceType()
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, Guid objectType)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
public void .ctor(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
internal void .ctor(IdentityReference identity, int accessMask, AuditFlags auditFlags, Guid objectGuid, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid inheritedObjectType)
}
public System.DirectoryServices.ActiveDirectoryRights : Enum {
public int value__
public ActiveDirectoryRights Delete
public ActiveDirectoryRights ReadControl
public ActiveDirectoryRights WriteDacl
public ActiveDirectoryRights WriteOwner
public ActiveDirectoryRights Synchronize
public ActiveDirectoryRights AccessSystemSecurity
public ActiveDirectoryRights GenericRead
public ActiveDirectoryRights GenericWrite
public ActiveDirectoryRights GenericExecute
public ActiveDirectoryRights GenericAll
public ActiveDirectoryRights CreateChild
public ActiveDirectoryRights DeleteChild
public ActiveDirectoryRights ListChildren
public ActiveDirectoryRights Self
public ActiveDirectoryRights ReadProperty
public ActiveDirectoryRights WriteProperty
public ActiveDirectoryRights DeleteTree
public ActiveDirectoryRights ListObject
public ActiveDirectoryRights ExtendedRight
}
public System.DirectoryServices.ActiveDirectorySecurity : DirectoryObjectSecurity {
public Type AccessRightType
public Type AccessRuleType
public Type AuditRuleType
public Type get_AccessRightType()
public Type get_AccessRuleType()
public Type get_AuditRuleType()
public void AddAccessRule(ActiveDirectoryAccessRule rule)
public void SetAccessRule(ActiveDirectoryAccessRule rule)
public void ResetAccessRule(ActiveDirectoryAccessRule rule)
public void RemoveAccess(IdentityReference identity, AccessControlType type)
public bool RemoveAccessRule(ActiveDirectoryAccessRule rule)
public void RemoveAccessRuleSpecific(ActiveDirectoryAccessRule rule)
public bool ModifyAccessRule(AccessControlModification modification, AccessRule rule, Boolean& modified)
public void PurgeAccessRules(IdentityReference identity)
public void AddAuditRule(ActiveDirectoryAuditRule rule)
public void SetAuditRule(ActiveDirectoryAuditRule rule)
public void RemoveAudit(IdentityReference identity)
public bool RemoveAuditRule(ActiveDirectoryAuditRule rule)
public void RemoveAuditRuleSpecific(ActiveDirectoryAuditRule rule)
public bool ModifyAuditRule(AccessControlModification modification, AuditRule rule, Boolean& modified)
public void PurgeAuditRules(IdentityReference identity)
public AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
public AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, Guid objectGuid, Guid inheritedObjectGuid)
public AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)
public AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, Guid objectGuid, Guid inheritedObjectGuid)
}
public System.DirectoryServices.ActiveDirectorySecurityInheritance : Enum {
public int value__
public ActiveDirectorySecurityInheritance None
public ActiveDirectorySecurityInheritance All
public ActiveDirectorySecurityInheritance Descendents
public ActiveDirectorySecurityInheritance SelfAndChildren
public ActiveDirectorySecurityInheritance Children
}
public System.DirectoryServices.AuthenticationTypes : Enum {
public int value__
public AuthenticationTypes Anonymous
public AuthenticationTypes Delegation
public AuthenticationTypes Encryption
public AuthenticationTypes FastBind
public AuthenticationTypes None
public AuthenticationTypes ReadonlyServer
public AuthenticationTypes Sealing
public AuthenticationTypes Secure
public AuthenticationTypes SecureSocketsLayer
public AuthenticationTypes ServerBind
public AuthenticationTypes Signing
}
public System.DirectoryServices.CreateChildAccessRule : ActiveDirectoryAccessRule {
public void .ctor(IdentityReference identity, AccessControlType type)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
public void .ctor(IdentityReference identity, AccessControlType type, Guid childType)
public void .ctor(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
}
public System.DirectoryServices.DeleteChildAccessRule : ActiveDirectoryAccessRule {
public void .ctor(IdentityReference identity, AccessControlType type)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
public void .ctor(IdentityReference identity, AccessControlType type, Guid childType)
public void .ctor(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
}
public System.DirectoryServices.DeleteTreeAccessRule : ActiveDirectoryAccessRule {
public void .ctor(IdentityReference identity, AccessControlType type)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
}
public System.DirectoryServices.DereferenceAlias : Enum {
public int value__
public DereferenceAlias Always
public DereferenceAlias FindingBaseObject
public DereferenceAlias InSearching
public DereferenceAlias Never
}
public System.DirectoryServices.DirectoryEntries : object {
private LdapConnection _Conn
private string _Bpath
private string _Buser
private string _Bpass
private string _Basedn
private ArrayList m_oValues
internal string Basedn
internal string Bpath
internal LdapConnection Conn
public SchemaNameCollection SchemaFilter
private void InitBlock()
internal string get_Basedn()
internal string get_Bpath()
internal void set_Bpath(string value)
internal LdapConnection get_Conn()
internal void set_Conn(LdapConnection value)
internal void .ctor(string path, string uname, string passwd)
internal void .ctor(string path, LdapConnection lc)
public SchemaNameCollection get_SchemaFilter()
public IEnumerator GetEnumerator()
public DirectoryEntry Add(string name, string schemaClassName)
public void Remove(DirectoryEntry entry)
public DirectoryEntry Find(string name)
public DirectoryEntry Find(string name, string schemaClassName)
private DirectoryEntry CheckEntry(string rdn)
}
public System.DirectoryServices.DirectoryEntry : Component {
private string DEFAULT_LDAP_HOST
private string DEFAULT_LDAP_PORT
private LdapConnection _conn
private AuthenticationTypes _AuthenticationType
private DirectoryEntries _Children
private string _Fdn
private string _Path
private string _Name
private DirectoryEntry _Parent
private string _Username
private string _Password
private PropertyCollection _Properties
private string _SchemaClassName
private bool _Nflag
private bool _usePropertyCache
private bool _inPropertiesLoading
internal string Fdn
internal LdapConnection conn
internal bool Nflag
public AuthenticationTypes AuthenticationType
public DirectoryEntries Children
public Guid Guid
public string Name
public DirectoryEntry Parent
public string NativeGuid
public object NativeObject
public ActiveDirectorySecurity ObjectSecurity
public bool UsePropertyCache
public DirectoryEntryConfiguration Options
public string Password
public string Username
public string Path
internal string ADsPath
public PropertyCollection Properties
public string SchemaClassName
public DirectoryEntry SchemaEntry
private string DefaultHost
private int DefaultPort
internal string get_Fdn()
internal LdapConnection get_conn()
internal void set_conn(LdapConnection value)
internal bool get_Nflag()
internal void set_Nflag(bool value)
private void InitBlock()
private void InitEntry()
public void .ctor(object adsObject)
public void .ctor(string path)
public void .ctor(string path, string username, string password)
public void .ctor(string path, string username, string password, AuthenticationTypes authenticationType)
internal void .ctor(LdapConnection lconn)
public AuthenticationTypes get_AuthenticationType()
public void set_AuthenticationType(AuthenticationTypes value)
public DirectoryEntries get_Children()
public Guid get_Guid()
public string get_Name()
public DirectoryEntry get_Parent()
public string get_NativeGuid()
public object get_NativeObject()
public ActiveDirectorySecurity get_ObjectSecurity()
public void set_ObjectSecurity(ActiveDirectorySecurity value)
public bool get_UsePropertyCache()
public void set_UsePropertyCache(bool value)
public DirectoryEntryConfiguration get_Options()
public string get_Password()
public void set_Password(string value)
public string get_Username()
public void set_Username(string value)
public string get_Path()
public void set_Path(string value)
internal string get_ADsPath()
public PropertyCollection get_Properties()
public string get_SchemaClassName()
public DirectoryEntry get_SchemaEntry()
private string get_DefaultHost()
private int get_DefaultPort()
private void InitToRootDse(string host, int port)
private void SetProperties(PropertyCollection pcoll)
private PropertyCollection GetProperties(bool forceLoad)
private void LoadProperties(PropertyCollection properties, String[] propertyNames)
private string FindAttrValue(string attrName)
private void ModEntry(LdapModification[] mods)
private bool CheckEntry(LdapConnection lconn, string epath)
public void Close()
public DirectoryEntry CopyTo(DirectoryEntry newParent)
public void DeleteTree()
public bool Exists(string path)
public void MoveTo(DirectoryEntry newParent)
public void MoveTo(DirectoryEntry newParent, string newName)
public void Rename(string newName)
public object Invoke(string methodName, Object[] args)
public object InvokeGet(string propertyName)
public void InvokeSet(string propertyName, Object[] args)
public DirectoryEntry CopyTo(DirectoryEntry newParent, string newName)
public void CommitChanges()
private void CommitEntry()
internal void CommitDeferred()
private void RefreshEntry()
public void RefreshCache()
public void RefreshCache(String[] propertyNames)
protected void Dispose(bool disposing)
internal string GetLdapUrlString(string host, int port, string dn)
}
public System.DirectoryServices.DirectoryEntryConfiguration : object {
public ReferralChasingOption Referral
public SecurityMasks SecurityMasks
public int PageSize
public int PasswordPort
public PasswordEncodingMethod PasswordEncoding
public ReferralChasingOption get_Referral()
public void set_Referral(ReferralChasingOption value)
public SecurityMasks get_SecurityMasks()
public void set_SecurityMasks(SecurityMasks value)
public int get_PageSize()
public void set_PageSize(int value)
public int get_PasswordPort()
public void set_PasswordPort(int value)
public PasswordEncodingMethod get_PasswordEncoding()
public void set_PasswordEncoding(PasswordEncodingMethod value)
public string GetCurrentServerName()
public bool IsMutuallyAuthenticated()
public void SetUserNameQueryQuota(string accountName)
}
public System.DirectoryServices.DirectorySearcher : Component {
private TimeSpan DefaultTimeSpan
private DirectoryEntry _SearchRoot
private bool _CacheResults
private TimeSpan _ClientTimeout
private string _Filter
private int _PageSize
private StringCollection _PropertiesToLoad
private bool _PropertyNamesOnly
private ReferralChasingOption _ReferralChasing
private SearchScope _SearchScope
private TimeSpan _ServerPageTimeLimit
private TimeSpan _serverTimeLimit
private int _SizeLimit
private LdapConnection _conn
private string _Host
private int _Port
private SearchResultCollection _SrchColl
internal SearchResultCollection SrchColl
public bool CacheResults
public TimeSpan ClientTimeout
public string Filter
public int PageSize
public StringCollection PropertiesToLoad
public bool PropertyNamesOnly
public ReferralChasingOption ReferralChasing
public DirectoryEntry SearchRoot
public SearchScope SearchScope
public TimeSpan ServerPageTimeLimit
public TimeSpan ServerTimeLimit
public int SizeLimit
public SortOption Sort
public bool Asynchronous
public string AttributeScopeQuery
public DereferenceAlias DerefAlias
public DirectorySynchronization DirectorySynchronization
public ExtendedDN ExtendedDN
public SecurityMasks SecurityMasks
public bool Tombstone
public DirectoryVirtualListView VirtualListView
internal SearchResultCollection get_SrchColl()
private void InitBlock()
public bool get_CacheResults()
public void set_CacheResults(bool value)
public TimeSpan get_ClientTimeout()
public void set_ClientTimeout(TimeSpan value)
public string get_Filter()
public void set_Filter(string value)
public int get_PageSize()
public void set_PageSize(int value)
public StringCollection get_PropertiesToLoad()
public bool get_PropertyNamesOnly()
public void set_PropertyNamesOnly(bool value)
public ReferralChasingOption get_ReferralChasing()
public void set_ReferralChasing(ReferralChasingOption value)
public DirectoryEntry get_SearchRoot()
public void set_SearchRoot(DirectoryEntry value)
public SearchScope get_SearchScope()
public void set_SearchScope(SearchScope value)
public TimeSpan get_ServerPageTimeLimit()
public void set_ServerPageTimeLimit(TimeSpan value)
public TimeSpan get_ServerTimeLimit()
public void set_ServerTimeLimit(TimeSpan value)
public int get_SizeLimit()
public void set_SizeLimit(int value)
public SortOption get_Sort()
public void set_Sort(SortOption value)
public void .ctor(DirectoryEntry searchRoot)
public void .ctor(string filter)
public void .ctor(DirectoryEntry searchRoot, string filter)
public void .ctor(string filter, String[] propertiesToLoad)
public void .ctor(DirectoryEntry searchRoot, string filter, String[] propertiesToLoad)
public void .ctor(string filter, String[] propertiesToLoad, SearchScope scope)
public void .ctor(DirectoryEntry searchRoot, string filter, String[] propertiesToLoad, SearchScope scope)
public SearchResult FindOne()
public SearchResultCollection FindAll()
private void DoSearch()
protected void Dispose(bool disposing)
private void ClearCachedResults()
public bool get_Asynchronous()
public void set_Asynchronous(bool value)
public string get_AttributeScopeQuery()
public void set_AttributeScopeQuery(string value)
public DereferenceAlias get_DerefAlias()
public void set_DerefAlias(DereferenceAlias value)
public DirectorySynchronization get_DirectorySynchronization()
public void set_DirectorySynchronization(DirectorySynchronization value)
public ExtendedDN get_ExtendedDN()
public void set_ExtendedDN(ExtendedDN value)
public SecurityMasks get_SecurityMasks()
public void set_SecurityMasks(SecurityMasks value)
public bool get_Tombstone()
public void set_Tombstone(bool value)
public DirectoryVirtualListView get_VirtualListView()
public void set_VirtualListView(DirectoryVirtualListView value)
}
public System.DirectoryServices.DirectoryServicesCOMException : COMException {
public int ExtendedError
public string ExtendedErrorMessage
public int get_ExtendedError()
public string get_ExtendedErrorMessage()
public void .ctor(string message)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext)
}
public System.DirectoryServices.DirectoryServicesPermission : ResourcePermissionBase {
private DirectoryServicesPermissionEntryCollection innerCollection
public DirectoryServicesPermissionEntryCollection PermissionEntries
public void .ctor(DirectoryServicesPermissionEntry[] permissionAccessEntries)
public void .ctor(PermissionState state)
public void .ctor(DirectoryServicesPermissionAccess permissionAccess, string path)
public DirectoryServicesPermissionEntryCollection get_PermissionEntries()
private void SetUp()
internal ResourcePermissionBaseEntry[] GetEntries()
internal void ClearEntries()
internal void Add(object obj)
internal void Remove(object obj)
}
public System.DirectoryServices.DirectoryServicesPermissionAccess : Enum {
public int value__
public DirectoryServicesPermissionAccess None
public DirectoryServicesPermissionAccess Browse
public DirectoryServicesPermissionAccess Write
}
public System.DirectoryServices.DirectoryServicesPermissionAttribute : CodeAccessSecurityAttribute {
private string path
private DirectoryServicesPermissionAccess access
public string Path
public DirectoryServicesPermissionAccess PermissionAccess
public void .ctor(SecurityAction action)
public string get_Path()
public void set_Path(string value)
public DirectoryServicesPermissionAccess get_PermissionAccess()
public void set_PermissionAccess(DirectoryServicesPermissionAccess value)
public IPermission CreatePermission()
}
public System.DirectoryServices.DirectoryServicesPermissionEntry : object {
private DirectoryServicesPermissionAccess permissionAccess
private string path
public string Path
public DirectoryServicesPermissionAccess PermissionAccess
public void .ctor(DirectoryServicesPermissionAccess permissionAccess, string path)
public string get_Path()
public DirectoryServicesPermissionAccess get_PermissionAccess()
internal ResourcePermissionBaseEntry GetBaseEntry()
}
public System.DirectoryServices.DirectoryServicesPermissionEntryCollection : CollectionBase {
private DirectoryServicesPermission owner
public DirectoryServicesPermissionEntry Item
internal void .ctor(DirectoryServicesPermission owner)
public DirectoryServicesPermissionEntry get_Item(int index)
public void set_Item(int index, DirectoryServicesPermissionEntry value)
public int Add(DirectoryServicesPermissionEntry value)
public void AddRange(DirectoryServicesPermissionEntry[] value)
public void AddRange(DirectoryServicesPermissionEntryCollection value)
public void CopyTo(DirectoryServicesPermissionEntry[] array, int index)
public bool Contains(DirectoryServicesPermissionEntry value)
public int IndexOf(DirectoryServicesPermissionEntry value)
public void Insert(int index, DirectoryServicesPermissionEntry value)
public void Remove(DirectoryServicesPermissionEntry value)
protected void OnClear()
protected void OnInsert(int index, object value)
protected void OnRemove(int index, object value)
protected void OnSet(int index, object oldValue, object newValue)
}
public System.DirectoryServices.DirectorySynchronization : object {
public DirectorySynchronizationOptions Option
public DirectorySynchronizationOptions get_Option()
public void set_Option(DirectorySynchronizationOptions value)
public void .ctor(DirectorySynchronizationOptions option)
public void .ctor(DirectorySynchronization sync)
public void .ctor(Byte[] cookie)
public void .ctor(DirectorySynchronizationOptions option, Byte[] cookie)
public Byte[] GetDirectorySynchronizationCookie()
public void ResetDirectorySynchronizationCookie()
public void ResetDirectorySynchronizationCookie(Byte[] cookie)
public DirectorySynchronization Copy()
}
public System.DirectoryServices.DirectorySynchronizationOptions : Enum {
public long value__
public DirectorySynchronizationOptions None
public DirectorySynchronizationOptions ObjectSecurity
public DirectorySynchronizationOptions ParentsFirst
public DirectorySynchronizationOptions PublicDataOnly
public DirectorySynchronizationOptions IncrementalValues
}
public System.DirectoryServices.DirectoryVirtualListView : object {
public int BeforeCount
public int AfterCount
public int Offset
public int TargetPercentage
public string Target
public int ApproximateTotal
public DirectoryVirtualListViewContext DirectoryVirtualListViewContext
public int get_BeforeCount()
public void set_BeforeCount(int value)
public int get_AfterCount()
public void set_AfterCount(int value)
public int get_Offset()
public void set_Offset(int value)
public int get_TargetPercentage()
public void set_TargetPercentage(int value)
public string get_Target()
public void set_Target(string value)
public int get_ApproximateTotal()
public void set_ApproximateTotal(int value)
public DirectoryVirtualListViewContext get_DirectoryVirtualListViewContext()
public void set_DirectoryVirtualListViewContext(DirectoryVirtualListViewContext value)
public void .ctor(int afterCount)
public void .ctor(int beforeCount, int afterCount, int offset)
public void .ctor(int beforeCount, int afterCount, string target)
public void .ctor(int beforeCount, int afterCount, int offset, DirectoryVirtualListViewContext context)
public void .ctor(int beforeCount, int afterCount, string target, DirectoryVirtualListViewContext context)
}
public System.DirectoryServices.DirectoryVirtualListViewContext : object {
public DirectoryVirtualListViewContext Copy()
}
public System.DirectoryServices.DSDescriptionAttribute : DescriptionAttribute {
public string Description
public void .ctor(string description)
public string get_Description()
}
public System.DirectoryServices.ExtendedDN : Enum {
public int value__
public ExtendedDN None
public ExtendedDN HexString
public ExtendedDN Standard
}
public System.DirectoryServices.ExtendedRightAccessRule : ActiveDirectoryAccessRule {
public void .ctor(IdentityReference identity, AccessControlType type)
public void .ctor(IdentityReference identity, AccessControlType type, Guid extendedRightType)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, Guid extendedRightType, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
public void .ctor(IdentityReference identity, AccessControlType type, Guid extendedRightType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
}
public System.DirectoryServices.ListChildrenAccessRule : ActiveDirectoryAccessRule {
public void .ctor(IdentityReference identity, AccessControlType type)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
}
public System.DirectoryServices.PasswordEncodingMethod : Enum {
public int value__
public PasswordEncodingMethod PasswordEncodingSsl
public PasswordEncodingMethod PasswordEncodingClear
}
public System.DirectoryServices.PropertyAccess : Enum {
public int value__
public PropertyAccess Read
public PropertyAccess Write
}
public System.DirectoryServices.PropertyAccessRule : ActiveDirectoryAccessRule {
public void .ctor(IdentityReference identity, AccessControlType type, PropertyAccess access)
public void .ctor(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertyType)
public void .ctor(IdentityReference identity, AccessControlType type, PropertyAccess access, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertyType, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, PropertyAccess access, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
public void .ctor(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertyType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
}
public System.DirectoryServices.PropertyCollection : object {
private ArrayList m_oKeys
private Hashtable m_oValues
private DirectoryEntry _parent
public int Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IDictionary.IsFixedSize
private bool System.Collections.IDictionary.IsReadOnly
private ICollection System.Collections.IDictionary.Keys
public ICollection PropertyNames
private object System.Collections.IDictionary.Item
public ICollection Values
public PropertyValueCollection Item
internal void .ctor(DirectoryEntry parent)
public int get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private void ICopyTo(Array oArray, int iArrayIndex)
private void System.Collections.ICollection.CopyTo(Array oArray, int iArrayIndex)
public void CopyTo(PropertyValueCollection[] array, int index)
private void Add(object oKey, object oValue)
private void System.Collections.IDictionary.Add(object oKey, object oValue)
private bool System.Collections.IDictionary.get_IsFixedSize()
private bool System.Collections.IDictionary.get_IsReadOnly()
private ICollection System.Collections.IDictionary.get_Keys()
public ICollection get_PropertyNames()
private void System.Collections.IDictionary.Clear()
private bool IContains(object oKey)
private bool System.Collections.IDictionary.Contains(object oKey)
public bool Contains(string propertyName)
public IDictionaryEnumerator GetEnumerator()
private void System.Collections.IDictionary.Remove(object oKey)
private object System.Collections.IDictionary.get_Item(object oKey)
private void System.Collections.IDictionary.set_Item(object oKey, object value)
public ICollection get_Values()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public PropertyValueCollection get_Item(string propertyName)
}
public System.DirectoryServices.PropertySetAccessRule : ActiveDirectoryAccessRule {
public void .ctor(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertySetType)
public void .ctor(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertySetType, ActiveDirectorySecurityInheritance inheritanceType)
public void .ctor(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertySetType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType)
}
public System.DirectoryServices.PropertyValueCollection : CollectionBase {
private bool _Mbit
private DirectoryEntry _parent
internal bool Mbit
public object Item
public string PropertyName
public object Value
internal void .ctor(DirectoryEntry parent)
internal bool get_Mbit()
internal void set_Mbit(bool value)
public object get_Item(int index)
public void set_Item(int index, object value)
public int Add(object value)
public void AddRange(Object[] value)
public void AddRange(PropertyValueCollection value)
public int IndexOf(object value)
public void Insert(int index, object value)
public void Remove(object value)
public bool Contains(object value)
internal bool ContainsCaselessStringValue(string value)
public void CopyTo(Object[] array, int index)
protected void OnClearComplete()
protected void OnInsertComplete(int index, object value)
protected void OnRemoveComplete(int index, object value)
protected void OnSetComplete(int index, object oldValue, object newValue)
public string get_PropertyName()
public object get_Value()
public void set_Value(object value)
}
public System.DirectoryServices.ReferralChasingOption : Enum {
public int value__
public ReferralChasingOption All
public ReferralChasingOption External
public ReferralChasingOption None
public ReferralChasingOption Subordinate
}
public System.DirectoryServices.ResultPropertyCollection : DictionaryBase {
public ResultPropertyValueCollection Item
public ICollection PropertyNames
public ICollection Values
public ResultPropertyValueCollection get_Item(string name)
internal void Add(string key, ResultPropertyValueCollection rpcoll)
public bool Contains(string propertyName)
public ICollection get_PropertyNames()
public ICollection get_Values()
public void CopyTo(ResultPropertyValueCollection[] array, int index)
}
public System.DirectoryServices.ResultPropertyValueCollection : ReadOnlyCollectionBase {
public object Item
internal void Add(object component)
internal void AddRange(Object[] components)
public object get_Item(int index)
public bool Contains(object value)
public void CopyTo(Object[] values, int index)
public int IndexOf(object value)
}
public System.DirectoryServices.SchemaNameCollection : object {
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
public string Item
public int Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private int System.Collections.IList.Add(object avalue)
public int Add(string value)
public void Clear()
private bool System.Collections.IList.Contains(object cvalue)
private int System.Collections.IList.IndexOf(object ivalue)
private void System.Collections.IList.Insert(int index, object ivalue)
private void System.Collections.IList.Remove(object rvalue)
public void RemoveAt(int index)
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int recordIndex)
private void System.Collections.IList.set_Item(int recordIndex, object value)
public string get_Item(int index)
public void set_Item(int index, string value)
public int get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
public IEnumerator GetEnumerator()
public void AddRange(SchemaNameCollection value)
public void AddRange(String[] value)
public bool Contains(string value)
private void System.Collections.ICollection.CopyTo(Array arr, int pos)
public void CopyTo(String[] stringArray, int index)
public int IndexOf(string value)
public void Insert(int index, string value)
public void Remove(string value)
}
public System.DirectoryServices.SearchResult : object {
private string _Path
private ResultPropertyCollection _Properties
private DirectoryEntry _Entry
private StringCollection _PropsToLoad
private bool ispropnull
private PropertyCollection _Rproperties
internal PropertyCollection Rproperties
internal StringCollection PropsToLoad
public ResultPropertyCollection Properties
public string Path
internal PropertyCollection get_Rproperties()
private void InitBlock()
internal StringCollection get_PropsToLoad()
public ResultPropertyCollection get_Properties()
internal void .ctor(DirectoryEntry entry)
internal void .ctor(DirectoryEntry entry, PropertyCollection props)
public string get_Path()
public DirectoryEntry GetDirectoryEntry()
}
public System.DirectoryServices.SearchResultCollection : MarshalByRefObject {
private ArrayList sValues
public int Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
public SearchResult Item
public String[] PropertiesLoaded
public IntPtr Handle
public int get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private void System.Collections.ICollection.CopyTo(Array oArray, int iArrayIndex)
public void CopyTo(SearchResult[] results, int index)
internal void Add(object oValue)
private bool Contains(object oValues)
public bool Contains(SearchResult result)
public SearchResult get_Item(int index)
public int IndexOf(SearchResult result)
public IEnumerator GetEnumerator()
public void Dispose()
protected void Dispose(bool disposing)
public String[] get_PropertiesLoaded()
public IntPtr get_Handle()
protected void Finalize()
}
public System.DirectoryServices.SearchScope : Enum {
public int value__
public SearchScope Base
public SearchScope OneLevel
public SearchScope Subtree
}
public System.DirectoryServices.SecurityMasks : Enum {
public int value__
public SecurityMasks None
public SecurityMasks Owner
public SecurityMasks Group
public SecurityMasks Dacl
public SecurityMasks Sacl
}
public System.DirectoryServices.SortDirection : Enum {
public int value__
public SortDirection Ascending
public SortDirection Descending
}
public System.DirectoryServices.SortOption : object {
private string propertyName
private SortDirection direction
public string PropertyName
public SortDirection Direction
public void .ctor(string propertyName, SortDirection direction)
public string get_PropertyName()
public void set_PropertyName(string value)
public SortDirection get_Direction()
public void set_Direction(SortDirection value)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
