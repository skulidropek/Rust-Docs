internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string VsVersion
public string FxFileVersion
public string VsFileVersion
public string AssemblyI18N
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_Core
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal System.Runtime.Serialization.CollectionContractTypeMap : CollectionTypeMap {
internal string CurrentNamespace
public void .ctor(Type type, CollectionDataContractAttribute a, Type elementType, XmlQualifiedName qname, KnownTypeCollection knownTypes)
internal string get_CurrentNamespace()
}
public System.Runtime.Serialization.CollectionDataContractAttribute : Attribute {
private string name
private string ns
private string item_name
private string key_name
private string value_name
private bool is_reference
private bool <IsReference>k__BackingField
public string Name
public string Namespace
public string ItemName
public string KeyName
public string ValueName
public bool IsReference
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_ItemName()
public void set_ItemName(string value)
public string get_KeyName()
public void set_KeyName(string value)
public string get_ValueName()
public void set_ValueName(string value)
public bool get_IsReference()
public void set_IsReference(bool value)
}
internal System.Runtime.Serialization.CollectionTypeMap : SerializationMap {
private Type element_type
internal XmlQualifiedName element_qname
private MethodInfo add_method
public bool OutputXsiType
internal string CurrentNamespace
public void .ctor(Type type, Type elementType, XmlQualifiedName qname, KnownTypeCollection knownTypes)
private Type GetGenericCollectionInterface(Type type)
public bool get_OutputXsiType()
internal string get_CurrentNamespace()
public void SerializeNonReference(object graph, XmlFormatterSerializer serializer)
private object CreateInstance()
public object DeserializeEmptyContent(XmlReader reader, XmlFormatterDeserializer deserializer)
public object DeserializeContent(XmlReader reader, XmlFormatterDeserializer deserializer)
public List`1<DataMemberInfo> GetMembers()
public XmlSchemaType GetSchemaType(XmlSchemaSet schemas, Dictionary`2<XmlQualifiedName, XmlSchemaType> generated_schema_types)
}
public System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection : ConfigurationElementCollection {
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
}
public System.Runtime.Serialization.Configuration.ParameterElementCollection : ConfigurationElementCollection {
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
}
public System.Runtime.Serialization.Configuration.TypeElementCollection : ConfigurationElementCollection {
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
}
public System.Runtime.Serialization.ContractNamespaceAttribute : Attribute {
private string clr_ns
private string contract_ns
public string ClrNamespace
public string ContractNamespace
public void .ctor(string ns)
public string get_ClrNamespace()
public void set_ClrNamespace(string value)
public string get_ContractNamespace()
}
public System.Runtime.Serialization.DataContractAttribute : Attribute {
private string name
private string ns
private bool <IsReference>k__BackingField
public string Name
public string Namespace
public bool IsReference
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public bool get_IsReference()
public void set_IsReference(bool value)
}
public System.Runtime.Serialization.DataContractSerializer : XmlObjectSerializer {
private string xmlns
private Type type
private bool ignore_ext
private bool preserve_refs
private StreamingContext context
private ReadOnlyCollection`1<Type> known_runtime_types
private KnownTypeCollection known_types
private IDataContractSurrogate surrogate
private int max_items
private bool names_filled
private XmlDictionaryString root_name
private XmlDictionaryString root_ns
public bool IgnoreExtensionDataObject
public ReadOnlyCollection`1<Type> KnownTypes
public IDataContractSurrogate DataContractSurrogate
public int MaxItemsInObjectGraph
public bool PreserveObjectReferences
public void .ctor(Type type)
public void .ctor(Type type, IEnumerable`1<Type> knownTypes)
public void .ctor(Type type, string rootName, string rootNamespace)
public void .ctor(Type type, XmlDictionaryString rootName, XmlDictionaryString rootNamespace)
public void .ctor(Type type, string rootName, string rootNamespace, IEnumerable`1<Type> knownTypes)
public void .ctor(Type type, XmlDictionaryString rootName, XmlDictionaryString rootNamespace, IEnumerable`1<Type> knownTypes)
public void .ctor(Type type, IEnumerable`1<Type> knownTypes, int maxObjectsInGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate)
public void .ctor(Type type, string rootName, string rootNamespace, IEnumerable`1<Type> knownTypes, int maxObjectsInGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate)
public void .ctor(Type type, XmlDictionaryString rootName, XmlDictionaryString rootNamespace, IEnumerable`1<Type> knownTypes, int maxObjectsInGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate)
private void PopulateTypes(IEnumerable`1<Type> knownTypes)
private void FillDictionaryString(string name, string ns)
private void Initialize(int maxObjectsInGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate)
public bool get_IgnoreExtensionDataObject()
public ReadOnlyCollection`1<Type> get_KnownTypes()
public IDataContractSurrogate get_DataContractSurrogate()
public int get_MaxItemsInObjectGraph()
public bool get_PreserveObjectReferences()
public bool IsStartObject(XmlDictionaryReader reader)
public bool IsStartObject(XmlReader reader)
public object ReadObject(XmlReader reader)
public object ReadObject(XmlReader reader, bool verifyObjectName)
public object ReadObject(XmlDictionaryReader reader, bool verifyObjectName)
private void ReadRootStartElement(XmlReader reader, Type type)
public void WriteObject(XmlWriter writer, object graph)
public void WriteObjectContent(XmlDictionaryWriter writer, object graph)
public void WriteObjectContent(XmlWriter writer, object graph)
public void WriteStartObject(XmlWriter writer, object graph)
public void WriteStartObject(XmlDictionaryWriter writer, object graph)
public void WriteEndObject(XmlDictionaryWriter writer)
public void WriteEndObject(XmlWriter writer)
}
public System.Runtime.Serialization.DataMemberAttribute : Attribute {
private bool is_required
private bool emit_default
private string name
private int order
public bool EmitDefaultValue
public bool IsRequired
public string Name
public int Order
public bool get_EmitDefaultValue()
public void set_EmitDefaultValue(bool value)
public bool get_IsRequired()
public void set_IsRequired(bool value)
public string get_Name()
public void set_Name(string value)
public int get_Order()
public void set_Order(int value)
}
internal System.Runtime.Serialization.DataMemberInfo : object {
public int Order
public bool IsRequired
public string XmlName
public MemberInfo Member
public string XmlNamespace
public string XmlRootNamespace
public Type MemberType
public void .ctor(MemberInfo member, DataMemberAttribute dma, string rootNamespce, string ns)
}
internal System.Runtime.Serialization.DefaultTypeMap : SerializationMap {
public void .ctor(Type type, KnownTypeCollection knownTypes)
private List`1<DataMemberInfo> GetDefaultMembers()
}
internal System.Runtime.Serialization.DictionaryTypeMap : SerializationMap {
private Type key_type
private Type value_type
private XmlQualifiedName dict_qname
private XmlQualifiedName item_qname
private XmlQualifiedName key_qname
private XmlQualifiedName value_qname
private MethodInfo add_method
private CollectionDataContractAttribute a
private XmlQualifiedName kvpair_key_qname
private XmlQualifiedName kvpair_value_qname
private Type pair_type
private PropertyInfo pair_key_property
private PropertyInfo pair_value_property
private string ContractNamespace
public Type KeyType
public Type ValueType
internal string CurrentNamespace
public void .ctor(Type type, CollectionDataContractAttribute a, KnownTypeCollection knownTypes)
private Type GetGenericDictionaryInterface(Type type)
private string get_ContractNamespace()
public Type get_KeyType()
public Type get_ValueType()
internal XmlQualifiedName GetDictionaryQName()
internal XmlQualifiedName GetItemQName()
internal XmlQualifiedName GetKeyQName()
internal XmlQualifiedName GetValueQName()
internal string get_CurrentNamespace()
public void SerializeNonReference(object graph, XmlFormatterSerializer serializer)
private object CreateInstance()
public object DeserializeEmptyContent(XmlReader reader, XmlFormatterDeserializer deserializer)
public object DeserializeContent(XmlReader reader, XmlFormatterDeserializer deserializer)
public List`1<DataMemberInfo> GetMembers()
public XmlSchemaType GetSchemaType(XmlSchemaSet schemas, Dictionary`2<XmlQualifiedName, XmlSchemaType> generated_schema_types)
}
internal System.Runtime.Serialization.EnumMap : SerializationMap {
private List`1<EnumMemberInfo> enum_members
private bool flag_attr
public void .ctor(Type type, XmlQualifiedName qname, KnownTypeCollection knownTypes)
private EnumMemberAttribute GetEnumMemberAttribute(MemberInfo mi)
public XmlSchemaType GetSchemaType(XmlSchemaSet schemas, Dictionary`2<XmlQualifiedName, XmlSchemaType> generated_schema_types)
public void Serialize(object graph, XmlFormatterSerializer serializer)
public object DeserializeEmptyContent(XmlReader reader, XmlFormatterDeserializer deserializer)
public object DeserializeContent(XmlReader reader, XmlFormatterDeserializer deserializer)
}
public System.Runtime.Serialization.EnumMemberAttribute : Attribute {
private string value
public string Value
public string get_Value()
public void set_Value(string value)
}
internal System.Runtime.Serialization.EnumMemberInfo : ValueType {
public string XmlName
public object Value
public void .ctor(string name, object value)
}
public System.Runtime.Serialization.ExportOptions : object {
private IDataContractSurrogate surrogate
private KnownTypeCollection known_types
public IDataContractSurrogate DataContractSurrogate
public Collection`1<Type> KnownTypes
public IDataContractSurrogate get_DataContractSurrogate()
public void set_DataContractSurrogate(IDataContractSurrogate value)
public Collection`1<Type> get_KnownTypes()
}
public System.Runtime.Serialization.ExtensionDataObject : object {
private object target
internal void .ctor(object target)
}
public System.Runtime.Serialization.IDataContractSurrogate {
public object GetCustomDataToExport(MemberInfo memberInfo, Type dataContractType)
public object GetCustomDataToExport(Type clrType, Type dataContractType)
public Type GetDataContractType(Type type)
public object GetDeserializedObject(object obj, Type targetType)
public void GetKnownCustomDataTypes(Collection`1<Type> customDataTypes)
public object GetObjectToSerialize(object obj, Type targetType)
public Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData)
public CodeTypeDeclaration ProcessImportedType(CodeTypeDeclaration typeDeclaration, CodeCompileUnit compileUnit)
}
public System.Runtime.Serialization.IExtensibleDataObject {
public ExtensionDataObject ExtensionData
public ExtensionDataObject get_ExtensionData()
public void set_ExtensionData(ExtensionDataObject value)
}
public System.Runtime.Serialization.ImportOptions : object {
private IDataContractSurrogate surrogate
private ICollection`1<Type> referenced_collection_types
private ICollection`1<Type> referenced_types
private bool enable_data_binding
private bool generate_internal
private bool generate_serializable
private bool import_xml_type
private IDictionary`2<string, string> namespaces
private CodeDomProvider code_provider
public CodeDomProvider CodeProvider
public IDataContractSurrogate DataContractSurrogate
public bool EnableDataBinding
public bool GenerateInternal
public bool GenerateSerializable
public bool ImportXmlType
public IDictionary`2<string, string> Namespaces
public ICollection`1<Type> ReferencedCollectionTypes
public ICollection`1<Type> ReferencedTypes
public CodeDomProvider get_CodeProvider()
public void set_CodeProvider(CodeDomProvider value)
public IDataContractSurrogate get_DataContractSurrogate()
public void set_DataContractSurrogate(IDataContractSurrogate value)
public bool get_EnableDataBinding()
public void set_EnableDataBinding(bool value)
public bool get_GenerateInternal()
public void set_GenerateInternal(bool value)
public bool get_GenerateSerializable()
public void set_GenerateSerializable(bool value)
public bool get_ImportXmlType()
public void set_ImportXmlType(bool value)
public IDictionary`2<string, string> get_Namespaces()
public ICollection`1<Type> get_ReferencedCollectionTypes()
public ICollection`1<Type> get_ReferencedTypes()
}
public System.Runtime.Serialization.InvalidDataContractException : Exception {
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception innerException)
}
public System.Runtime.Serialization.KnownTypeAttribute : Attribute {
private string method_name
private Type type
public string MethodName
public Type Type
public void .ctor(string methodName)
public void .ctor(Type type)
public string get_MethodName()
public Type get_Type()
}
internal System.Runtime.Serialization.KnownTypeCollection : Collection`1<Type> {
internal string MSSimpleNamespace
internal string MSArraysNamespace
internal string DefaultClrNamespaceBase
private XmlQualifiedName any_type
private XmlQualifiedName bool_type
private XmlQualifiedName byte_type
private XmlQualifiedName date_type
private XmlQualifiedName decimal_type
private XmlQualifiedName double_type
private XmlQualifiedName float_type
private XmlQualifiedName string_type
private XmlQualifiedName short_type
private XmlQualifiedName int_type
private XmlQualifiedName long_type
private XmlQualifiedName ubyte_type
private XmlQualifiedName ushort_type
private XmlQualifiedName uint_type
private XmlQualifiedName ulong_type
private XmlQualifiedName any_uri_type
private XmlQualifiedName base64_type
private XmlQualifiedName duration_type
private XmlQualifiedName qname_type
private XmlQualifiedName char_type
private XmlQualifiedName guid_type
private XmlQualifiedName dbnull_type
private List`1<SerializationMap> contracts
private Dictionary`2<string, int> <>f__switch$map0
private Dictionary`2<string, int> <>f__switch$map1
private Dictionary`2<string, int> <>f__switch$map2
internal XmlQualifiedName GetXmlName(Type type)
internal XmlQualifiedName GetPredefinedTypeName(Type type)
internal XmlQualifiedName GetPrimitiveTypeName(Type type)
internal string PredefinedTypeObjectToString(object obj)
internal Type GetPrimitiveTypeFromName(string name)
internal object PredefinedTypeStringToObject(string s, string name, XmlReader reader)
protected void ClearItems()
protected void InsertItem(int index, Type type)
protected void RemoveItem(int index)
protected void SetItem(int index, Type type)
internal SerializationMap FindUserMap(XmlQualifiedName qname)
internal Type GetSerializedType(Type type)
internal SerializationMap FindUserMap(Type type)
internal XmlQualifiedName GetQName(Type type)
private XmlQualifiedName GetContractQName(Type type)
private XmlQualifiedName GetCollectionContractQName(Type type)
internal XmlQualifiedName GetContractQName(Type type, string name, string ns)
private XmlQualifiedName GetEnumQName(Type type)
private XmlQualifiedName GetCollectionQName(Type element)
private XmlQualifiedName GetSerializableQName(Type type)
internal bool IsPrimitiveNotEnum(Type type)
internal bool TryRegister(Type type)
internal Type GetCollectionElementType(Type type)
internal T GetAttribute(MemberInfo mi)
private CollectionContractTypeMap RegisterCollectionContract(Type type)
private CollectionTypeMap RegisterCollection(Type type)
private bool TypeImplementsIDictionary(Type type)
private DictionaryTypeMap RegisterDictionary(Type type)
private SerializationMap RegisterSerializable(Type type)
private SerializationMap RegisterIXmlSerializable(Type type)
private void CheckStandardQName(XmlQualifiedName qname)
private SharedContractMap RegisterContract(Type type)
private DefaultTypeMap RegisterDefaultTypeMap(Type type)
private EnumMap RegisterEnum(Type type)
}
public System.Runtime.Serialization.NetDataContractSerializer : XmlObjectSerializer {
private string xmlns
private string default_ns
private StreamingContext context
private SerializationBinder binder
private ISurrogateSelector selector
private int max_items
private bool ignore_extensions
private FormatterAssemblyStyle ass_style
private XmlDictionaryString root_name
private XmlDictionaryString root_ns
public FormatterAssemblyStyle AssemblyFormat
public SerializationBinder Binder
public bool IgnoreExtensionDataObject
public ISurrogateSelector SurrogateSelector
public StreamingContext Context
public int MaxItemsInObjectGraph
public void .ctor(StreamingContext context)
public void .ctor(string rootName, string rootNamespace)
public void .ctor(XmlDictionaryString rootName, XmlDictionaryString rootNamespace)
public void .ctor(StreamingContext context, int maxItemsInObjectGraph, bool ignoreExtensibleDataObject, FormatterAssemblyStyle assemblyFormat, ISurrogateSelector surrogateSelector)
public void .ctor(string rootName, string rootNamespace, StreamingContext context, int maxItemsInObjectGraph, bool ignoreExtensibleDataObject, FormatterAssemblyStyle assemblyFormat, ISurrogateSelector surrogateSelector)
public void .ctor(XmlDictionaryString rootName, XmlDictionaryString rootNamespace, StreamingContext context, int maxItemsInObjectGraph, bool ignoreExtensibleDataObject, FormatterAssemblyStyle assemblyFormat, ISurrogateSelector surrogateSelector)
private void FillDictionaryString(string rootName, string rootNamespace)
public FormatterAssemblyStyle get_AssemblyFormat()
public void set_AssemblyFormat(FormatterAssemblyStyle value)
public SerializationBinder get_Binder()
public void set_Binder(SerializationBinder value)
public bool get_IgnoreExtensionDataObject()
public ISurrogateSelector get_SurrogateSelector()
public void set_SurrogateSelector(ISurrogateSelector value)
public StreamingContext get_Context()
public void set_Context(StreamingContext value)
public int get_MaxItemsInObjectGraph()
public object Deserialize(Stream stream)
public bool IsStartObject(XmlDictionaryReader reader)
public object ReadObject(XmlDictionaryReader reader, bool readContentOnly)
public void Serialize(Stream stream, object graph)
public void WriteObjectContent(XmlDictionaryWriter writer, object graph)
public void WriteStartObject(XmlDictionaryWriter writer, object graph)
public void WriteEndObject(XmlDictionaryWriter writer)
}
internal System.Runtime.Serialization.SerializationMap : object {
public BindingFlags AllInstanceFlags
public KnownTypeCollection KnownTypes
public Type RuntimeType
public bool IsReference
public List`1<DataMemberInfo> Members
private XmlSchemaSet schema_set
private Dictionary`2<Type, XmlQualifiedName> qname_table
private XmlQualifiedName <XmlName>k__BackingField
public bool OutputXsiType
public XmlQualifiedName XmlName
protected void .ctor(Type type, XmlQualifiedName qname, KnownTypeCollection knownTypes)
public bool get_OutputXsiType()
public XmlQualifiedName get_XmlName()
public void set_XmlName(XmlQualifiedName value)
public CollectionDataContractAttribute GetCollectionDataContractAttribute(Type type)
public DataMemberAttribute GetDataMemberAttribute(MemberInfo mi)
private bool IsPrimitive(Type type)
public XmlSchemaType GetSchemaType(XmlSchemaSet schemas, Dictionary`2<XmlQualifiedName, XmlSchemaType> generated_schema_types)
private XmlSchemaSequence GetSequence(XmlSchemaSet schemas, Dictionary`2<XmlQualifiedName, XmlSchemaType> generated_schema_types)
private void AddImport(XmlSchema schema, string ns)
public List`1<DataMemberInfo> GetMembers()
protected XmlSchemaElement GetSchemaElement(XmlQualifiedName qname, XmlSchemaType schemaType)
protected XmlSchema GetSchema(XmlSchemaSet schemas, string ns)
protected XmlQualifiedName GetQualifiedName(Type type)
public void Serialize(object graph, XmlFormatterSerializer serializer)
public void SerializeNonReference(object graph, XmlFormatterSerializer serializer)
public object DeserializeObject(XmlReader reader, XmlFormatterDeserializer deserializer)
public object DeserializeEmptyContent(XmlReader reader, XmlFormatterDeserializer deserializer)
public object DeserializeContent(XmlReader reader, XmlFormatterDeserializer deserializer)
private object DeserializeContent(XmlReader reader, XmlFormatterDeserializer deserializer, bool empty)
protected Exception MissingRequiredMember(DataMemberInfo dmi, XmlReader reader)
protected void SetValue(DataMemberInfo dmi, object obj, object value)
protected DataMemberInfo CreateDataMemberInfo(DataMemberAttribute dma, MemberInfo mi, Type type)
}
internal System.Runtime.Serialization.SharedContractMap : SerializationMap {
public void .ctor(Type type, XmlQualifiedName qname, KnownTypeCollection knownTypes)
internal void Initialize()
private List`1<DataMemberInfo> GetMembers(Type type, XmlQualifiedName qname, bool declared_only)
public List`1<DataMemberInfo> GetMembers()
}
internal System.Runtime.Serialization.SharedTypeMap : SerializationMap {
public void .ctor(Type type, XmlQualifiedName qname, KnownTypeCollection knownTypes)
private List`1<DataMemberInfo> GetMembers(Type type, XmlQualifiedName qname, bool declared_only)
public List`1<DataMemberInfo> GetMembers()
}
internal System.Runtime.Serialization.TypeExtensions : object {
public T GetCustomAttribute(Type type, bool inherit)
}
internal System.Runtime.Serialization.XmlFormatterDeserializer : object {
private KnownTypeCollection types
private IDataContractSurrogate surrogate
private Hashtable references
public Hashtable References
private void .ctor(KnownTypeCollection knownTypes, IDataContractSurrogate surrogate)
public object Deserialize(XmlReader reader, Type type, KnownTypeCollection knownTypes, IDataContractSurrogate surrogate, string name, string ns, bool verifyObjectName)
private void Verify(KnownTypeCollection knownTypes, Type type, string name, string Namespace, XmlReader reader)
public Hashtable get_References()
public object Deserialize(Type type, XmlReader reader)
public object DeserializeCore(Type type, XmlReader reader)
private object DeserializeByMap(XmlQualifiedName name, Type type, XmlReader reader)
private Type GetTypeFromNamePair(string name, string ns)
}
internal System.Runtime.Serialization.XmlFormatterSerializer : object {
private XmlDictionaryWriter writer
private object graph
private KnownTypeCollection types
private bool save_id
private bool ignore_unknown
private IDataContractSurrogate surrogate
private int max_items
private ArrayList objects
private Hashtable references
public ArrayList SerializingObjects
public IDictionary References
public XmlDictionaryWriter Writer
public void .ctor(XmlDictionaryWriter writer, KnownTypeCollection types, bool ignoreUnknown, int maxItems, string root_ns)
public void Serialize(XmlDictionaryWriter writer, object graph, KnownTypeCollection types, bool ignoreUnknown, int maxItems, string root_ns)
public ArrayList get_SerializingObjects()
public IDictionary get_References()
public XmlDictionaryWriter get_Writer()
public void Serialize(Type type, object graph)
public void SerializePrimitive(Type type, object graph, XmlQualifiedName qname)
public void WriteStartElement(string rootName, string rootNamespace, string currentNamespace)
public void WriteEndElement()
}
public System.Runtime.Serialization.XmlObjectSerializer : object {
private IDataContractSurrogate surrogate
private SerializationBinder binder
private ISurrogateSelector selector
private int max_items
public bool IsStartObject(XmlReader reader)
public bool IsStartObject(XmlDictionaryReader reader)
public object ReadObject(Stream stream)
public object ReadObject(XmlReader reader)
public object ReadObject(XmlDictionaryReader reader)
public object ReadObject(XmlReader reader, bool readContentOnly)
public object ReadObject(XmlDictionaryReader reader, bool readContentOnly)
public void WriteObject(Stream stream, object graph)
public void WriteObject(XmlWriter writer, object graph)
public void WriteStartObject(XmlWriter writer, object graph)
public void WriteObject(XmlDictionaryWriter writer, object graph)
public void WriteStartObject(XmlDictionaryWriter writer, object graph)
public void WriteObjectContent(XmlWriter writer, object graph)
public void WriteObjectContent(XmlDictionaryWriter writer, object graph)
public void WriteEndObject(XmlWriter writer)
public void WriteEndObject(XmlDictionaryWriter writer)
}
internal System.Runtime.Serialization.XmlSerializableMap : SerializationMap {
public void .ctor(Type type, XmlQualifiedName qname, KnownTypeCollection knownTypes)
public void Serialize(object graph, XmlFormatterSerializer serializer)
public object DeserializeObject(XmlReader reader, XmlFormatterDeserializer deserializer)
public XmlSchemaType GetSchemaType(XmlSchemaSet schemas, Dictionary`2<XmlQualifiedName, XmlSchemaType> generated_schema_types)
}
public System.Runtime.Serialization.XmlSerializableServices : object {
private Dictionary`2<XmlQualifiedName, XmlSchemaSet> defaultSchemas
public void AddDefaultSchema(XmlSchemaSet schemas, XmlQualifiedName typeQName)
public XmlNode[] ReadNodes(XmlReader xmlReader)
public void WriteNodes(XmlWriter xmlWriter, XmlNode[] nodes)
}
public System.Runtime.Serialization.XsdDataContractExporter : object {
private ExportOptions options
private KnownTypeCollection known_types
private XmlSchemaSet schemas
private Dictionary`2<XmlQualifiedName, XmlSchemaType> generated_schema_types
private XmlSchema mstypes_schema
public XmlSchemaSet Schemas
public ExportOptions Options
private KnownTypeCollection KnownTypes
private Dictionary`2<XmlQualifiedName, XmlSchemaType> GeneratedTypes
private XmlSchema MSTypesSchema
public void .ctor(XmlSchemaSet schemas)
public XmlSchemaSet get_Schemas()
public ExportOptions get_Options()
public void set_Options(ExportOptions value)
public bool CanExport(ICollection`1<Type> types)
public bool CanExport(ICollection`1<Assembly> assemblies)
public bool CanExport(Type type)
public void Export(ICollection`1<Type> types)
public void Export(ICollection`1<Assembly> assemblies)
public void Export(Type type)
public XmlQualifiedName GetRootElementName(Type type)
public XmlSchemaType GetSchemaType(Type type)
public XmlQualifiedName GetSchemaTypeName(Type type)
private KnownTypeCollection get_KnownTypes()
private Dictionary`2<XmlQualifiedName, XmlSchemaType> get_GeneratedTypes()
private XmlSchema get_MSTypesSchema()
}
public System.Runtime.Serialization.XsdDataContractImporter : object {
private string default_ns_prefix
private ImportOptions options
private CodeCompileUnit ccu
private Dictionary`2<XmlQualifiedName, XmlQualifiedName> imported_names
private Char[] split_tokens
public CodeCompileUnit CodeCompileUnit
public ImportOptions Options
public void .ctor(CodeCompileUnit ccu)
public CodeCompileUnit get_CodeCompileUnit()
public ImportOptions get_Options()
public void set_Options(ImportOptions value)
public ICollection`1<CodeTypeReference> GetKnownTypeReferences(XmlQualifiedName typeName)
public CodeTypeReference GetCodeTypeReference(XmlQualifiedName typeName)
public CodeTypeReference GetCodeTypeReference(XmlQualifiedName typeName, XmlSchemaElement element)
public bool CanImport(XmlSchemaSet schemas)
public bool CanImport(XmlSchemaSet schemas, ICollection`1<XmlQualifiedName> typeNames)
public bool CanImport(XmlSchemaSet schemas, XmlQualifiedName name)
public bool CanImport(XmlSchemaSet schemas, XmlSchemaElement element)
public void Import(XmlSchemaSet schemas)
public void Import(XmlSchemaSet schemas, ICollection`1<XmlQualifiedName> typeNames)
public void Import(XmlSchemaSet schemas, XmlQualifiedName name)
public XmlQualifiedName Import(XmlSchemaSet schemas, XmlSchemaElement element)
private XmlQualifiedName ImportInternal(XmlSchemaSet schemas, XmlQualifiedName qname)
private void ImportFromTypeMapping(XmlTypeMapping mapping)
private string FromXmlnsToClrName(string xns)
private string MakeStringNamespaceComponentsValid(string ns)
private string GetNamespace(CodeTypeDeclaration type)
}
internal System.Xml.DummyStateXmlReader : XmlReader {
private string base_uri
private XmlNameTable name_table
private ReadState read_state
public string BaseURI
public bool EOF
public int AttributeCount
public bool IsEmptyElement
public string LocalName
public string NamespaceURI
public XmlNameTable NameTable
public string Prefix
public ReadState ReadState
protected void .ctor(string baseUri, XmlNameTable nameTable, ReadState readState)
public string get_BaseURI()
public bool get_EOF()
public void Close()
public bool Read()
public int get_AttributeCount()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public string get_Prefix()
public ReadState get_ReadState()
public bool MoveToElement()
public string GetAttribute(int index)
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int index)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public string LookupNamespace(string prefix)
public bool ReadAttributeValue()
public void ResolveEntity()
}
public System.Xml.IFragmentCapableXmlDictionaryWriter {
public bool CanFragment
public bool get_CanFragment()
public void StartFragment(Stream stream, bool generateSelfContainedTextFragment)
public void WriteFragment(Byte[] buffer, int offset, int count)
public void EndFragment()
}
public System.Xml.IStreamProvider {
public Stream GetStream()
public void ReleaseStream(Stream stream)
}
public System.Xml.IXmlBinaryReaderInitializer {
public void SetInput(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quota, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public void SetInput(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quota, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
}
public System.Xml.IXmlBinaryWriterInitializer {
public void SetOutput(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session, bool ownsStream)
}
public System.Xml.IXmlDictionary {
public bool TryLookup(int key, XmlDictionaryString& result)
public bool TryLookup(string value, XmlDictionaryString& result)
public bool TryLookup(XmlDictionaryString value, XmlDictionaryString& result)
}
public System.Xml.IXmlMtomReaderInitializer {
public void SetInput(Stream stream, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
public void SetInput(Byte[] buffer, int offset, int count, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
}
public System.Xml.IXmlMtomWriterInitializer {
public void SetOutput(Stream stream, Encoding encoding, int maxSizeInBytes, string startInfo, string boundary, string startUri, bool writeMessageHeaders, bool ownsStream)
}
public System.Xml.IXmlTextReaderInitializer {
public void SetInput(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quota, OnXmlDictionaryReaderClose onClose)
public void SetInput(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quota, OnXmlDictionaryReaderClose onClose)
}
public System.Xml.IXmlTextWriterInitializer {
public void SetOutput(Stream stream, Encoding encoding, bool ownsStream)
}
internal System.Xml.MimeEncodedStream : object {
private string <Id>k__BackingField
private string <ContentEncoding>k__BackingField
private string <EncodedString>k__BackingField
private Dictionary`2<string, int> <>f__switch$map9
public string Id
public string ContentEncoding
public string EncodedString
public string DecodedBase64String
public void .ctor(string id, string contentEncoding, string value)
public string get_Id()
public void set_Id(string value)
public string get_ContentEncoding()
public void set_ContentEncoding(string value)
public string get_EncodedString()
public void set_EncodedString(string value)
public string get_DecodedBase64String()
public TextReader CreateTextReader()
}
internal System.Xml.MultiPartedXmlReader : DummyStateXmlReader {
private XmlReader owner
private string value
public int Depth
public bool HasValue
public string Value
public XmlNodeType NodeType
public void .ctor(XmlReader reader, MimeEncodedStream value)
public int get_Depth()
public bool get_HasValue()
public string get_Value()
public XmlNodeType get_NodeType()
}
internal System.Xml.NonInteractiveStateXmlReader : DummyStateXmlReader {
public int Depth
public bool HasValue
public string Value
public XmlNodeType NodeType
public void .ctor(string baseUri, XmlNameTable nameTable, ReadState readState)
public int get_Depth()
public bool get_HasValue()
public string get_Value()
public XmlNodeType get_NodeType()
}
public System.Xml.OnXmlDictionaryReaderClose : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlDictionaryReader reader)
public IAsyncResult BeginInvoke(XmlDictionaryReader reader, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.UniqueId : object {
private Guid guid
private string id
public int CharArrayLength
public bool IsGuid
public void .ctor(Byte[] id)
public void .ctor(Guid id)
public void .ctor(string value)
public void .ctor(Byte[] id, int offset)
public void .ctor(Char[] id, int offset, int count)
public int get_CharArrayLength()
public bool get_IsGuid()
public bool Equals(object obj)
public int GetHashCode()
public int ToCharArray(Char[] array, int offset)
public string ToString()
public bool TryGetGuid(Guid& guid)
public bool TryGetGuid(Byte[] buffer, int offset)
public bool op_Equality(UniqueId id1, UniqueId id2)
public bool op_Inequality(UniqueId id1, UniqueId id2)
}
internal System.Xml.XmlBinaryDictionaryReader : XmlDictionaryReader {
private ISource source
private IXmlDictionary dictionary
private XmlDictionaryReaderQuotas quota
private XmlBinaryReaderSession session
private OnXmlDictionaryReaderClose on_close
private XmlParserContext context
private ReadState state
private NodeInfo node
private NodeInfo current
private List`1<AttrNodeInfo> attributes
private List`1<NodeInfo> attr_values
private List`1<NodeInfo> node_stack
private List`1<XmlQualifiedName> ns_store
private Dictionary`2<int, XmlDictionaryString> ns_dict_store
private int attr_count
private int attr_value_count
private int current_attr
private int depth
private int ns_slot
private int next
private bool is_next_end_element
private Byte[] tmp_buffer
private UTF8Encoding utf8enc
private int array_item_remaining
private byte array_item_type
private XmlNodeType array_state
public int AttributeCount
public string BaseURI
public int Depth
public bool EOF
public bool HasValue
public bool IsEmptyElement
public XmlNodeType NodeType
public string Prefix
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlDictionaryReaderQuotas Quotas
public ReadState ReadState
public string Value
public void .ctor(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quota, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public void .ctor(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quota, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
private void Initialize(IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public int get_AttributeCount()
public string get_BaseURI()
public int get_Depth()
public bool get_EOF()
public bool get_HasValue()
public bool get_IsEmptyElement()
public XmlNodeType get_NodeType()
public string get_Prefix()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlDictionaryReaderQuotas get_Quotas()
public ReadState get_ReadState()
public string get_Value()
public void Close()
public string GetAttribute(int i)
public string GetAttribute(string name)
public string GetAttribute(string localName, string ns)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupPrefix(string ns)
public string LookupNamespace(string prefix)
public bool IsArray(Type& type)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string ns)
public bool ReadAttributeValue()
public bool Read()
private void ReadArrayItem()
private void ShiftToArrayItemEndElement()
private void ShiftToArrayItemElement()
private void VerifyValidArrayItemType(int ident)
private Type GetArrayType(int ident)
private void ProcessEndElement()
private void ReadElementBinary(int ident)
private void ReadAttribute(byte ident)
private void ReadNamespace(byte ident)
private void ReadAttributeValueBinary(AttrNodeInfo a)
private bool ReadTextOrValue(byte ident, NodeInfo node, bool canSkip)
private Byte[] Alloc(int size)
private int ReadVariantSize()
private string ReadUTF8()
private XmlDictionaryString ReadDictName()
private byte ReadByteOrError()
public void ResolveEntity()
public bool TryGetBase64ContentLength(Int32& length)
public string ReadContentAsString()
public int ReadContentAsInt()
private int GetIntValue()
public long ReadContentAsLong()
public float ReadContentAsFloat()
public double ReadContentAsDouble()
private bool IsBase64Node(byte b)
public Byte[] ReadContentAsBase64()
public Guid ReadContentAsGuid()
public UniqueId ReadContentAsUniqueId()
}
internal System.Xml.XmlBinaryDictionaryWriter : XmlDictionaryWriter {
private string XmlNamespace
private string XmlnsNamespace
private MyBinaryWriter original
private MyBinaryWriter writer
private MyBinaryWriter buffer_writer
private IXmlDictionary dict_ext
private XmlDictionary dict_int
private XmlBinaryWriterSession session
private bool owns_stream
private Encoding utf8Enc
private MemoryStream buffer
private WriteState state
private bool open_start_element
private List`1<KeyValuePair`2<string, object>> namespaces
private string xml_lang
private XmlSpace xml_space
private int ns_index
private Stack`1<int> ns_index_stack
private Stack`1<string> xml_lang_stack
private Stack`1<XmlSpace> xml_space_stack
private Stack`1<string> element_ns_stack
private string element_ns
private int element_count
private string element_prefix
private string attr_value
private string current_attr_prefix
private object current_attr_name
private object current_attr_ns
private bool attr_typed_value
private SaveTarget save_target
private Dictionary`2<string, int> <>f__switch$map3
private Dictionary`2<string, int> <>f__switch$map4
private Dictionary`2<string, int> <>f__switch$map5
private Dictionary`2<string, int> <>f__switch$map6
private Dictionary`2<string, int> <>f__switch$map7
public WriteState WriteState
public string XmlLang
public XmlSpace XmlSpace
public void .ctor(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session, bool ownsStream)
public WriteState get_WriteState()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
private void AddMissingElementXmlns()
private void CheckState()
private void ProcessStateForContent()
private void ProcessTypedValue()
private void ProcessPendingBuffer(bool last, bool endElement)
public void Close()
private void CloseOpenAttributeAndElements()
private void CloseStartElement()
public void Flush()
public string LookupPrefix(string ns)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteCData(string text)
public void WriteCharEntity(char ch)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteComment(string text)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteEndAttribute()
public void WriteEndDocument()
private bool SupportsCombinedEndElementSupport(byte operation)
public void WriteEndElement()
public void WriteEntityRef(string name)
public void WriteFullEndElement()
public void WriteProcessingInstruction(string name, string text)
public void WriteQualifiedName(XmlDictionaryString local, XmlDictionaryString ns)
public void WriteRaw(string data)
public void WriteRaw(Char[] buffer, int index, int count)
private void CheckStateForAttribute()
private string CreateNewPrefix()
private string CreateNewPrefix(string p)
private bool CollectionContains(ICollection col, string value)
private void ProcessStartAttributeCommon(String& prefix, string localName, string ns, object nameObj, object nsObj)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
private void PrepareStartElement()
public void WriteStartElement(string prefix, string localName, string ns)
private void OpenElement(string prefix, object nsobj)
private void AddNamespace(string prefix, object nsobj)
private void CheckIfTextAllowed()
public void WriteString(string text)
public void WriteString(XmlDictionaryString text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public void WriteXmlnsAttribute(string prefix, string namespaceUri)
private void AddNamespaceChecked(string prefix, object ns)
private void WriteDictionaryIndex(XmlDictionaryString ds)
public void WriteStartElement(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteStartAttribute(string prefix, XmlDictionaryString localName, XmlDictionaryString ns)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString namespaceUri)
public void WriteValue(bool value)
public void WriteValue(int value)
public void WriteValue(long value)
public void WriteValue(float value)
private void WriteValueContent(float value)
public void WriteValue(double value)
private void WriteValueContent(double value)
public void WriteValue(decimal value)
private void WriteValueContent(decimal value)
public void WriteValue(DateTime value)
private void WriteValueContent(DateTime value)
public void WriteValue(Guid value)
private void WriteValueContent(Guid value)
public void WriteValue(UniqueId value)
public void WriteValue(TimeSpan value)
private void WriteValueContent(TimeSpan value)
private void WriteBigEndian(long value, int digits)
private void WriteTextBinary(string text)
private void WriteValueContent(bool value)
private void WriteValueContent(short value)
private void WriteValueContent(int value)
private void WriteValueContent(long value)
private void CheckWriteArrayArguments(Array array, int offset, int length)
private void CheckDictionaryStringArgs(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Boolean[] array, int offset, int length)
private void WriteArrayRemaining(Boolean[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, DateTime[] array, int offset, int length)
private void WriteArrayRemaining(DateTime[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Decimal[] array, int offset, int length)
private void WriteArrayRemaining(Decimal[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Double[] array, int offset, int length)
private void WriteArrayRemaining(Double[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Guid[] array, int offset, int length)
private void WriteArrayRemaining(Guid[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Int16[] array, int offset, int length)
private void WriteArrayRemaining(Int16[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Int32[] array, int offset, int length)
private void WriteArrayRemaining(Int32[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Int64[] array, int offset, int length)
private void WriteArrayRemaining(Int64[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Single[] array, int offset, int length)
private void WriteArrayRemaining(Single[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, TimeSpan[] array, int offset, int length)
private void WriteArrayRemaining(TimeSpan[] array, int offset, int length)
}
internal System.Xml.XmlBinaryFormat : object {
public byte EndElement
public byte Comment
public byte Array
public byte AttrString
public byte AttrStringPrefix
public byte AttrIndex
public byte AttrIndexPrefix
public byte DefaultNSString
public byte PrefixNSString
public byte DefaultNSIndex
public byte PrefixNSIndex
public byte PrefixNAttrIndexStart
public byte PrefixNAttrIndexEnd
public byte PrefixNAttrStringStart
public byte PrefixNAttrStringEnd
public byte ElemString
public byte ElemStringPrefix
public byte ElemIndex
public byte ElemIndexPrefix
public byte PrefixNElemIndexStart
public byte PrefixNElemIndexEnd
public byte PrefixNElemStringStart
public byte PrefixNElemStringEnd
public byte Zero
public byte One
public byte BoolFalse
public byte BoolTrue
public byte Int8
public byte Int16
public byte Int32
public byte Int64
public byte Single
public byte Double
public byte Decimal
public byte DateTime
public byte Chars8
public byte Chars16
public byte Chars32
public byte Bytes8
public byte Bytes16
public byte Bytes32
public byte EmptyText
public byte TextIndex
public byte UniqueId
public byte TimeSpan
public byte Guid
public byte UInt64
public byte Bool
public byte Utf16_8
public byte Utf16_16
public byte Utf16_32
public byte QNameIndex
}
public System.Xml.XmlBinaryReaderSession : object {
private XmlDictionary dic
private Dictionary`2<int, XmlDictionaryString> store
public XmlDictionaryString Add(int id, string value)
public void Clear()
public bool TryLookup(int key, XmlDictionaryString& result)
public bool TryLookup(string value, XmlDictionaryString& result)
public bool TryLookup(XmlDictionaryString value, XmlDictionaryString& result)
}
public System.Xml.XmlBinaryWriterSession : object {
private Dictionary`2<int, XmlDictionaryString> dic
public void Reset()
public bool TryAdd(XmlDictionaryString value, Int32& key)
internal bool TryLookup(XmlDictionaryString value, Int32& key)
}
public System.Xml.XmlDictionary : object {
private XmlDictionary empty
private bool is_readonly
private Dictionary`2<string, XmlDictionaryString> dict
private List`1<XmlDictionaryString> list
public IXmlDictionary Empty
public void .ctor(int capacity)
private void .ctor(bool isReadOnly)
public IXmlDictionary get_Empty()
public XmlDictionaryString Add(string value)
public bool TryLookup(int key, XmlDictionaryString& result)
public bool TryLookup(string value, XmlDictionaryString& result)
public bool TryLookup(XmlDictionaryString value, XmlDictionaryString& result)
}
public System.Xml.XmlDictionaryReader : XmlReader {
private XmlDictionaryReaderQuotas quotas
private MethodInfo xmlconv_from_bin_hex
private Char[] wsChars
public bool CanCanonicalize
public XmlDictionaryReaderQuotas Quotas
public bool get_CanCanonicalize()
public XmlDictionaryReaderQuotas get_Quotas()
public void EndCanonicalization()
public string GetAttribute(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int IndexOfLocalName(String[] localNames, string namespaceUri)
public int IndexOfLocalName(XmlDictionaryString[] localNames, XmlDictionaryString namespaceUri)
public bool IsArray(Type& type)
public bool IsLocalName(string localName)
public bool IsLocalName(XmlDictionaryString localName)
public bool IsNamespaceUri(string namespaceUri)
public bool IsNamespaceUri(XmlDictionaryString namespaceUri)
public bool IsStartArray(Type& type)
public bool IsStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
protected bool IsTextNode(XmlNodeType nodeType)
private XmlException XmlError(string message)
public void MoveToStartElement()
public void MoveToStartElement(string name)
public void MoveToStartElement(string localName, string namespaceUri)
public void MoveToStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void StartCanonicalization(Stream stream, bool includeComments, String[] inclusivePrefixes)
public bool TryGetArrayLength(Int32& count)
public bool TryGetBase64ContentLength(Int32& count)
public bool TryGetLocalNameAsDictionaryString(XmlDictionaryString& localName)
public bool TryGetNamespaceUriAsDictionaryString(XmlDictionaryString& namespaceUri)
public object ReadContentAs(Type type, IXmlNamespaceResolver nsResolver)
public Byte[] ReadContentAsBase64()
private Byte[] FromBinHexString(string s)
public Byte[] ReadContentAsBinHex()
protected Byte[] ReadContentAsBinHex(int maxByteArrayContentLength)
public int ReadContentAsChars(Char[] chars, int offset, int count)
public decimal ReadContentAsDecimal()
public float ReadContentAsFloat()
public Guid ReadContentAsGuid()
public void ReadContentAsQualifiedName(String& localName, String& namespaceUri)
public string ReadContentAsString()
protected string ReadContentAsString(int maxStringContentLength)
public string ReadContentAsString(String[] strings, Int32& index)
public string ReadContentAsString(XmlDictionaryString[] strings, Int32& index)
public TimeSpan ReadContentAsTimeSpan()
public UniqueId ReadContentAsUniqueId()
public Byte[] ReadElementContentAsBase64()
public Byte[] ReadElementContentAsBinHex()
public Guid ReadElementContentAsGuid()
public TimeSpan ReadElementContentAsTimeSpan()
public UniqueId ReadElementContentAsUniqueId()
public string ReadElementContentAsString()
public void ReadFullStartElement()
public void ReadFullStartElement(string name)
public void ReadFullStartElement(string localName, string namespaceUri)
public void ReadFullStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void ReadStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public string ReadString()
protected string ReadString(int maxStringContentLength)
public int ReadValueAsBase64(Byte[] bytes, int start, int length)
public bool TryGetValueAsDictionaryString(XmlDictionaryString& value)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, int offset, int count, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateBinaryReader(Stream stream, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session)
public XmlDictionaryReader CreateBinaryReader(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateDictionaryReader(XmlReader reader)
public XmlDictionaryReader CreateMtomReader(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Stream stream, Encoding[] encodings, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Stream stream, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Stream stream, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateMtomReader(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Byte[] buffer, int offset, int count, Encoding[] encodings, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Byte[] buffer, int offset, int count, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Byte[] buffer, int offset, int count, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateTextReader(Byte[] buffer, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateTextReader(Byte[] buffer, int offset, int count, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateTextReader(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateTextReader(Stream stream, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateTextReader(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
private void CheckReadArrayArguments(Array array, int offset, int length)
private void CheckDictionaryStringArgs(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, Boolean[] array, int offset, int length)
public Boolean[] ReadBooleanArray(string localName, string namespaceUri)
public Boolean[] ReadBooleanArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, DateTime[] array, int offset, int length)
public DateTime[] ReadDateTimeArray(string localName, string namespaceUri)
public DateTime[] ReadDateTimeArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, Decimal[] array, int offset, int length)
public Decimal[] ReadDecimalArray(string localName, string namespaceUri)
public Decimal[] ReadDecimalArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, Double[] array, int offset, int length)
public Double[] ReadDoubleArray(string localName, string namespaceUri)
public Double[] ReadDoubleArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, Guid[] array, int offset, int length)
public Guid[] ReadGuidArray(string localName, string namespaceUri)
public Guid[] ReadGuidArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, Int16[] array, int offset, int length)
public Int16[] ReadInt16Array(string localName, string namespaceUri)
public Int16[] ReadInt16Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, Int32[] array, int offset, int length)
public Int32[] ReadInt32Array(string localName, string namespaceUri)
public Int32[] ReadInt32Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, Int64[] array, int offset, int length)
public Int64[] ReadInt64Array(string localName, string namespaceUri)
public Int64[] ReadInt64Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, Single[] array, int offset, int length)
public Single[] ReadSingleArray(string localName, string namespaceUri)
public Single[] ReadSingleArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int length)
public int ReadArray(string localName, string namespaceUri, TimeSpan[] array, int offset, int length)
public TimeSpan[] ReadTimeSpanArray(string localName, string namespaceUri)
public TimeSpan[] ReadTimeSpanArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public bool ReadElementContentAsBoolean()
public DateTime ReadElementContentAsDateTime()
public decimal ReadElementContentAsDecimal()
public double ReadElementContentAsDouble()
public float ReadElementContentAsFloat()
public int ReadElementContentAsInt()
public long ReadElementContentAsLong()
}
public System.Xml.XmlDictionaryReaderQuotas : object {
private XmlDictionaryReaderQuotas max
private bool is_readonly
private int array_len
private int bytes
private int depth
private int nt_chars
private int text_len
public XmlDictionaryReaderQuotas Max
public int MaxArrayLength
public int MaxBytesPerRead
public int MaxDepth
public int MaxNameTableCharCount
public int MaxStringContentLength
private void .ctor(bool max)
public XmlDictionaryReaderQuotas get_Max()
public int get_MaxArrayLength()
public void set_MaxArrayLength(int value)
public int get_MaxBytesPerRead()
public void set_MaxBytesPerRead(int value)
public int get_MaxDepth()
public void set_MaxDepth(int value)
public int get_MaxNameTableCharCount()
public void set_MaxNameTableCharCount(int value)
public int get_MaxStringContentLength()
public void set_MaxStringContentLength(int value)
private int Check(int value)
public void CopyTo(XmlDictionaryReaderQuotas quota)
}
public System.Xml.XmlDictionaryString : object {
private XmlDictionaryString empty
private IXmlDictionary dict
private string value
private int key
public XmlDictionaryString Empty
public IXmlDictionary Dictionary
public int Key
public string Value
public void .ctor(IXmlDictionary dictionary, string value, int key)
public XmlDictionaryString get_Empty()
public IXmlDictionary get_Dictionary()
public int get_Key()
public string get_Value()
public string ToString()
}
public System.Xml.XmlDictionaryWriter : XmlWriter {
private Encoding utf8_unmarked
private int depth
internal int Depth
public bool CanCanonicalize
internal int get_Depth()
internal void set_Depth(int value)
public bool get_CanCanonicalize()
public XmlDictionaryWriter CreateBinaryWriter(Stream stream)
public XmlDictionaryWriter CreateBinaryWriter(Stream stream, IXmlDictionary dictionary)
public XmlDictionaryWriter CreateBinaryWriter(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session)
public XmlDictionaryWriter CreateBinaryWriter(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session, bool ownsStream)
public XmlDictionaryWriter CreateDictionaryWriter(XmlWriter writer)
public XmlDictionaryWriter CreateMtomWriter(Stream stream, Encoding encoding, int maxSizeInBytes, string startInfo)
public XmlDictionaryWriter CreateMtomWriter(Stream stream, Encoding encoding, int maxSizeInBytes, string startInfo, string boundary, string startUri, bool writeMessageHeaders, bool ownsStream)
public XmlDictionaryWriter CreateTextWriter(Stream stream)
public XmlDictionaryWriter CreateTextWriter(Stream stream, Encoding encoding)
public XmlDictionaryWriter CreateTextWriter(Stream stream, Encoding encoding, bool ownsStream)
public void EndCanonicalization()
public void StartCanonicalization(Stream stream, bool includeComments, String[] inclusivePrefixes)
public void WriteAttributeString(XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)
public void WriteAttributeString(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)
public void WriteElementString(XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)
public void WriteElementString(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)
public void WriteNode(XmlDictionaryReader reader, bool defattr)
private void WriteAttribute(XmlDictionaryReader reader, bool defattr)
public void WriteNode(XmlReader reader, bool defattr)
public void WriteQualifiedName(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteStartAttribute(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteStartAttribute(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteStartElement(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteString(XmlDictionaryString value)
protected void WriteTextNode(XmlDictionaryReader reader, bool isAttribute)
public void WriteValue(Guid guid)
public void WriteValue(IStreamProvider value)
public void WriteValue(TimeSpan duration)
public void WriteValue(UniqueId id)
public void WriteValue(XmlDictionaryString value)
public void WriteXmlAttribute(string localName, string value)
public void WriteXmlAttribute(XmlDictionaryString localName, XmlDictionaryString value)
public void WriteXmlnsAttribute(string prefix, string namespaceUri)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString namespaceUri)
private void CheckWriteArrayArguments(Array array, int offset, int length)
private void CheckDictionaryStringArgs(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Boolean[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, DateTime[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Decimal[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Double[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Guid[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Int16[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Int32[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Int64[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, Single[] array, int offset, int length)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int length)
public void WriteArray(string prefix, string localName, string namespaceUri, TimeSpan[] array, int offset, int length)
}
internal System.Xml.XmlMtomDictionaryReader : XmlDictionaryReader {
private Stream stream
private Encoding encoding
private Encoding[] encodings
private ContentType content_type
private XmlDictionaryReaderQuotas quotas
private int max_buffer_size
private OnXmlDictionaryReaderClose on_close
private Dictionary`2<string, MimeEncodedStream> readers
private XmlReader xml_reader
private XmlReader initial_reader
private XmlReader eof_reader
private XmlReader part_reader
private int buffer_length
private Byte[] buffer
private int peek_char
private ContentType current_content_type
private int content_index
private string current_content_id
private string current_content_encoding
private Dictionary`2<string, int> <>f__switch$map8
private XmlReader Reader
public bool EOF
public int AttributeCount
public string BaseURI
public int Depth
public bool HasValue
public bool IsEmptyElement
public string LocalName
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public ReadState ReadState
public string Value
public void .ctor(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas)
public void .ctor(Stream stream, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
private void Initialize()
private ContentType CreateContentType(string contentTypeString)
private XmlReader get_Reader()
public bool get_EOF()
public void Close()
public bool Read()
private void SetupPrimaryReader()
private void ReadToIdentifiedStream(string id)
private bool ReadNextStream()
private void ReadOptionalMimeHeaders()
private string ReadAllHeaderLines()
private void ReadMimeHeaders()
private string StripBraces(string s)
private string ReadAsciiLine()
public int get_AttributeCount()
public string get_BaseURI()
public int get_Depth()
public bool get_HasValue()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
public ReadState get_ReadState()
public string get_Value()
public bool MoveToElement()
public string GetAttribute(int index)
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int index)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public string LookupNamespace(string prefix)
public bool ReadAttributeValue()
public void ResolveEntity()
}
internal System.Xml.XmlMtomDictionaryWriter : XmlDictionaryWriter {
private TextWriter writer
private XmlWriterSettings xml_writer_settings
private Encoding encoding
private int max_bytes
private bool write_headers
private bool owns_stream
private ContentType content_type
private XmlWriter w
private int depth
private int section_count
public WriteState WriteState
public string XmlLang
public XmlSpace XmlSpace
public void .ctor(Stream stream, Encoding encoding, int maxSizeInBytes, string startInfo, string boundary, string startUri, bool writeMessageHeaders, bool ownsStream)
private XmlWriter CreateWriter()
public void Close()
public void Flush()
public string LookupPrefix(string namespaceUri)
public void WriteBase64(Byte[] bytes, int start, int length)
public void WriteCData(string text)
public void WriteCharEntity(char c)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteComment(string comment)
public void WriteDocType(string name, string pubid, string sysid, string intSubset)
public void WriteEndAttribute()
public void WriteEndDocument()
public void WriteEndElement()
public void WriteEntityRef(string name)
public void WriteFullEndElement()
public void WriteProcessingInstruction(string name, string data)
public void WriteRaw(string raw)
public void WriteRaw(Char[] chars, int index, int count)
public void WriteStartAttribute(string prefix, string localName, string namespaceURI)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteStartElement(string prefix, string localName, string namespaceURI)
public WriteState get_WriteState()
public void WriteString(string text)
public void WriteSurrogateCharEntity(char low, char high)
public void WriteWhitespace(string text)
public string get_XmlLang()
public XmlSpace get_XmlSpace()
private void CheckState()
private void WriteMimeHeaders()
private void WriteStartOfMimeSection()
private void WriteEndOfMimeSection()
}
internal System.Xml.XmlSimpleDictionaryReader : XmlDictionaryReader {
private XmlDictionary dict
private XmlReader reader
private XmlDictionaryReader as_dict_reader
private IXmlLineInfo as_line_info
private OnXmlDictionaryReaderClose onClose
public int LineNumber
public int LinePosition
public bool CanCanonicalize
public int AttributeCount
public string BaseURI
public int Depth
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public string XmlLang
public XmlSpace XmlSpace
public string Item
public string Item
public string Item
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public void .ctor(XmlReader reader)
public void .ctor(XmlReader reader, XmlDictionary dictionary)
public void .ctor(XmlReader reader, XmlDictionary dictionary, OnXmlDictionaryReaderClose onClose)
public int get_LineNumber()
public int get_LinePosition()
public bool HasLineInfo()
public bool get_CanCanonicalize()
public void EndCanonicalization()
public bool TryGetLocalNameAsDictionaryString(XmlDictionaryString& localName)
public bool TryGetNamespaceUriAsDictionaryString(XmlDictionaryString& namespaceUri)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupPrefix(string ns)
public int get_AttributeCount()
public string get_BaseURI()
public int get_Depth()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string localName, string namespaceURI)
public bool get_EOF()
public ReadState get_ReadState()
public XmlNameTable get_NameTable()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public void Close()
public bool Read()
public string ReadString()
public string ReadInnerXml()
public string ReadOuterXml()
public string LookupNamespace(string prefix)
public void ResolveEntity()
public bool ReadAttributeValue()
}
internal System.Xml.XmlSimpleDictionaryWriter : XmlDictionaryWriter {
private XmlWriter writer
public WriteState WriteState
public string XmlLang
public XmlSpace XmlSpace
public void .ctor(XmlWriter writer)
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void WriteCData(string text)
public void WriteCharEntity(char ch)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteComment(string text)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteEndAttribute()
public void WriteEndDocument()
public void WriteEndElement()
public void WriteEntityRef(string name)
public void WriteFullEndElement()
public void WriteName(string name)
public void WriteNmToken(string name)
public void WriteNode(XmlReader reader, bool defattr)
public void WriteProcessingInstruction(string name, string text)
public void WriteQualifiedName(string localName, string ns)
public void WriteRaw(string data)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteStartDocument(bool standalone)
public void WriteStartDocument()
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public WriteState get_WriteState()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
}
