internal SR : object {
internal string GetString(string name, Object[] args)
internal string GetString(CultureInfo culture, string name, Object[] args)
internal string GetString(string name)
internal string GetString(CultureInfo culture, string name)
internal string Format(string resourceFormat, Object[] args)
internal string Format(string resourceFormat, object p1)
internal string Format(string resourceFormat, object p1, object p2)
internal string Format(string resourceFormat, object p1, object p2, object p3)
}
internal System.LocalAppContextSwitches : object {
public bool DoNotUseTimeZoneInfo
public bool DoNotUseEcmaScriptV6EscapeControlCharacter
}
internal System.Runtime.Serialization.AppSettings : object {
internal string MaxMimePartsAppSettingsString
private int DefaultMaxMimeParts
private int maxMimeParts
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) settingsInitalized
private object appSettingsLock
internal int MaxMimeParts
internal int get_MaxMimeParts()
private void EnsureSettingsLoaded()
}
internal System.Runtime.Serialization.AttributeData : object {
public string prefix
public string ns
public string localName
public string value
}
internal System.Runtime.Serialization.Attributes : object {
private XmlDictionaryString[] serializationLocalNames
private XmlDictionaryString[] schemaInstanceLocalNames
internal string Id
internal string Ref
internal string XsiTypeName
internal string XsiTypeNamespace
internal string XsiTypePrefix
internal bool XsiNil
internal string ClrAssembly
internal string ClrType
internal int ArraySZSize
internal string FactoryTypeName
internal string FactoryTypeNamespace
internal string FactoryTypePrefix
internal bool UnrecognizedAttributesFound
internal void Read(XmlReaderDelegator reader)
internal void Reset()
private void ReadId(XmlReaderDelegator reader)
private void ReadRef(XmlReaderDelegator reader)
private void ReadXsiNil(XmlReaderDelegator reader)
private void ReadArraySize(XmlReaderDelegator reader)
private void ReadXsiType(XmlReaderDelegator reader)
private void ReadFactoryType(XmlReaderDelegator reader)
}
internal System.Runtime.Serialization.BitFlagsGenerator : object {
private int bitCount
private Byte[] locals
public void .ctor(int bitCount)
public void Store(int bitIndex, bool value)
public bool Load(int bitIndex)
public Byte[] LoadArray()
public int GetLocalCount()
public int GetBitCount()
public byte GetLocal(int i)
public bool IsBitSet(Byte[] bytes, int bitIndex)
public void SetBit(Byte[] bytes, int bitIndex)
private int GetByteIndex(int bitIndex)
private byte GetBitValue(int bitIndex)
}
internal System.Runtime.Serialization.BooleanDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.ByteArrayDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.CharDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal void .ctor(XmlDictionaryString name, XmlDictionaryString ns)
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.ClassDataContract : DataContract {
public XmlDictionaryString[] ContractNamespaces
public XmlDictionaryString[] MemberNames
public XmlDictionaryString[] MemberNamespaces
private XmlDictionaryString[] childElementNamespaces
private ClassDataContractCriticalHelper helper
internal ClassDataContract BaseContract
internal List`1<DataMember> Members
public XmlDictionaryString[] ChildElementNamespaces
internal MethodInfo OnSerializing
internal MethodInfo OnSerialized
internal MethodInfo OnDeserializing
internal MethodInfo OnDeserialized
internal MethodInfo ExtensionDataSetMethod
internal Dictionary`2<XmlQualifiedName, DataContract> KnownDataContracts
internal bool IsISerializable
internal bool IsNonAttributedType
internal bool HasDataContract
internal bool HasExtensionData
internal string SerializationExceptionMessage
internal string DeserializationExceptionMessage
internal bool IsReadOnlyContract
internal XmlFormatClassWriterDelegate XmlFormatWriterDelegate
internal XmlFormatClassReaderDelegate XmlFormatReaderDelegate
internal void .ctor(Type type)
private void .ctor(Type type, XmlDictionaryString ns, String[] memberNames)
private void InitClassDataContract()
internal ClassDataContract get_BaseContract()
internal void set_BaseContract(ClassDataContract value)
internal List`1<DataMember> get_Members()
internal void set_Members(List`1<DataMember> value)
public XmlDictionaryString[] get_ChildElementNamespaces()
internal MethodInfo get_OnSerializing()
internal MethodInfo get_OnSerialized()
internal MethodInfo get_OnDeserializing()
internal MethodInfo get_OnDeserialized()
internal MethodInfo get_ExtensionDataSetMethod()
internal Dictionary`2<XmlQualifiedName, DataContract> get_KnownDataContracts()
internal void set_KnownDataContracts(Dictionary`2<XmlQualifiedName, DataContract> value)
internal bool get_IsISerializable()
internal void set_IsISerializable(bool value)
internal bool get_IsNonAttributedType()
internal bool get_HasDataContract()
internal bool get_HasExtensionData()
internal string get_SerializationExceptionMessage()
internal string get_DeserializationExceptionMessage()
internal bool get_IsReadOnlyContract()
internal ConstructorInfo GetISerializableConstructor()
internal ConstructorInfo GetNonAttributedTypeConstructor()
internal XmlFormatClassWriterDelegate get_XmlFormatWriterDelegate()
internal XmlFormatClassReaderDelegate get_XmlFormatReaderDelegate()
internal ClassDataContract CreateClassDataContractForKeyValue(Type type, XmlDictionaryString ns, String[] memberNames)
internal void CheckAndAddMember(List`1<DataMember> members, DataMember memberContract, Dictionary`2<string, DataMember> memberNamesTable)
internal XmlDictionaryString GetChildNamespaceToDeclare(DataContract dataContract, Type childType, XmlDictionary dictionary)
internal bool IsNonAttributedTypeValidForSerialization(Type type)
private XmlDictionaryString[] CreateChildElementNamespaces()
private void EnsureMethodsImported()
public void WriteXmlValue(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context)
internal DataContract BindGenericParameters(DataContract[] paramContracts, Dictionary`2<DataContract, DataContract> boundContracts)
internal bool Equals(object other, Dictionary`2<DataContractPairKey, object> checkedContracts)
private bool IsEveryDataMemberOptional(IEnumerable`1<DataMember> dataMembers)
public int GetHashCode()
}
internal System.Runtime.Serialization.ClassDataNode : DataNode`1<object> {
private IList`1<ExtensionDataMember> members
internal IList`1<ExtensionDataMember> Members
internal IList`1<ExtensionDataMember> get_Members()
internal void set_Members(IList`1<ExtensionDataMember> value)
public void Clear()
}
internal System.Runtime.Serialization.CodeExporter : object {
private DataContractSet dataContractSet
private CodeCompileUnit codeCompileUnit
private ImportOptions options
private Dictionary`2<string, string> namespaces
private Dictionary`2<string, string> clrNamespaces
private string wildcardNamespaceMapping
private string typeNameFieldName
private object codeUserDataActualTypeKey
private object surrogateDataKey
private int MaxIdentifierLength
private bool GenerateSerializableTypes
private bool GenerateInternalTypes
private bool EnableDataBinding
private CodeDomProvider CodeProvider
private bool SupportsDeclareEvents
private bool SupportsDeclareValueTypes
private bool SupportsGenericTypeReference
private bool SupportsAssemblyAttributes
private bool SupportsPartialTypes
private bool SupportsNestedTypes
private string FileExtension
private Dictionary`2<string, string> Namespaces
private Dictionary`2<string, string> ClrNamespaces
private XmlQualifiedName GenericListName
private CollectionDataContract GenericListContract
private XmlQualifiedName GenericDictionaryName
private CollectionDataContract GenericDictionaryContract
private CodeTypeReference CodeTypeIPropertyChange
private CodeThisReferenceExpression ThisReference
private CodePrimitiveExpression NullReference
private CodeParameterDeclarationExpression SerializationInfoParameter
private CodeParameterDeclarationExpression StreamingContextParameter
private CodeAttributeDeclaration SerializableAttribute
private CodeMemberProperty NodeArrayProperty
private CodeMemberField NodeArrayField
private CodeMemberMethod ReadXmlMethod
private CodeMemberMethod WriteXmlMethod
private CodeMemberMethod GetSchemaMethod
private CodeMemberMethod GetSchemaStaticMethod
private CodeConstructor ISerializableBaseConstructor
private CodeConstructor ISerializableDerivedConstructor
private CodeMemberField SerializationInfoField
private CodeMemberProperty SerializationInfoProperty
private CodeMemberMethod GetObjectDataMethod
private CodeMemberField ExtensionDataObjectField
private CodeMemberProperty ExtensionDataObjectProperty
private CodeMemberMethod RaisePropertyChangedEventMethod
private CodeMemberEvent PropertyChangedEvent
internal void .ctor(DataContractSet dataContractSet, ImportOptions options, CodeCompileUnit codeCompileUnit)
private void AddReferencedAssembly(Assembly assembly)
private bool get_GenerateSerializableTypes()
private bool get_GenerateInternalTypes()
private bool get_EnableDataBinding()
private CodeDomProvider get_CodeProvider()
private bool get_SupportsDeclareEvents()
private bool get_SupportsDeclareValueTypes()
private bool get_SupportsGenericTypeReference()
private bool get_SupportsAssemblyAttributes()
private bool get_SupportsPartialTypes()
private bool get_SupportsNestedTypes()
private string get_FileExtension()
private Dictionary`2<string, string> get_Namespaces()
private Dictionary`2<string, string> get_ClrNamespaces()
private bool TryGetReferencedType(XmlQualifiedName stableName, DataContract dataContract, Type& type)
internal void Export()
private void ExportClassDataContractHierarchy(XmlQualifiedName typeName, ClassDataContract classContract, ContractCodeDomInfo contractCodeDomInfo, Dictionary`2<XmlQualifiedName, object> contractNamesInHierarchy)
private void InvokeProcessImportedType(CollectionBase collection)
internal CodeTypeReference GetCodeTypeReference(DataContract dataContract)
private CodeTypeReference GetCodeTypeReference(Type type)
internal CodeTypeReference GetElementTypeReference(DataContract dataContract, bool isElementTypeNullable)
private XmlQualifiedName get_GenericListName()
private CollectionDataContract get_GenericListContract()
private XmlQualifiedName get_GenericDictionaryName()
private CollectionDataContract get_GenericDictionaryContract()
private ContractCodeDomInfo GetContractCodeDomInfo(DataContract dataContract)
private void GenerateType(DataContract dataContract, ContractCodeDomInfo contractCodeDomInfo)
private CodeTypeDeclaration GetNestedType(DataContract dataContract, ContractCodeDomInfo contractCodeDomInfo)
private CodeTypeDeclaration CreateTypeDeclaration(string typeName, DataContract dataContract)
private CodeTypeReference GetReferencedType(DataContract dataContract)
private CodeTypeReference GetReferencedCollectionType(CollectionDataContract collectionContract)
private bool HasDefaultCollectionNames(CollectionDataContract collectionContract)
private bool TryGetReferencedDictionaryType(CollectionDataContract collectionContract, CodeTypeReference& typeReference)
private bool TryGetReferencedListType(DataContract itemContract, bool isItemTypeNullable, CodeTypeReference& typeReference)
private CodeTypeReference GetSurrogatedTypeReference(DataContract dataContract)
private CodeTypeReference GetReferencedGenericType(GenericInfo genInfo, DataContract& dataContract)
private bool NamespaceContainsType(CodeNamespace ns, string typeName)
private bool GlobalTypeNameConflicts(string clrNamespace, string typeName)
private void AddGlobalTypeName(string typeName)
private bool TypeContainsNestedType(CodeTypeDeclaration containingType, string typeName)
private string GetNameForAttribute(string name)
private void AddSerializableAttribute(bool generateSerializable, CodeTypeDeclaration type, ContractCodeDomInfo contractCodeDomInfo)
private void ExportClassDataContract(ClassDataContract classDataContract, ContractCodeDomInfo contractCodeDomInfo)
private bool CanDeclareAssemblyAttribute(ContractCodeDomInfo contractCodeDomInfo)
private bool NeedsExplicitNamespace(string dataContractNamespace, string clrNamespace)
internal ICollection`1<CodeTypeReference> GetKnownTypeReferences(DataContract dataContract)
private Dictionary`2<XmlQualifiedName, DataContract> GetKnownTypeContracts(DataContract dataContract)
private Dictionary`2<XmlQualifiedName, DataContract> GetKnownTypeContracts(ClassDataContract dataContract, Dictionary`2<DataContract, object> handledContracts)
private void AddKnownTypeContracts(ClassDataContract dataContract, Dictionary`2<XmlQualifiedName, DataContract> knownContracts)
private void AddKnownTypes(ClassDataContract dataContract, ContractCodeDomInfo contractCodeDomInfo)
private CodeTypeReference WrapNullable(CodeTypeReference memberType)
private void AddExtensionData(ContractCodeDomInfo contractCodeDomInfo)
private void AddPropertyChangedNotifier(ContractCodeDomInfo contractCodeDomInfo, bool isValueType)
private void ThrowIfReferencedBaseTypeSealed(Type baseType, DataContract dataContract)
private void ExportEnumDataContract(EnumDataContract enumDataContract, ContractCodeDomInfo contractCodeDomInfo)
private void ExportISerializableDataContract(ClassDataContract dataContract, ContractCodeDomInfo contractCodeDomInfo)
private void GenerateKeyValueType(ClassDataContract keyValueContract)
private void ExportCollectionDataContract(CollectionDataContract collectionContract, ContractCodeDomInfo contractCodeDomInfo)
private void ExportXmlDataContract(XmlDataContract xmlDataContract, ContractCodeDomInfo contractCodeDomInfo)
private CodeNamespace GetCodeNamespace(string clrNamespace, string dataContractNamespace, ContractCodeDomInfo contractCodeDomInfo)
private string GetMemberName(string memberName, ContractCodeDomInfo contractCodeDomInfo)
private void AddBaseMemberNames(ContractCodeDomInfo baseContractCodeDomInfo, ContractCodeDomInfo contractCodeDomInfo)
private string GetClrIdentifier(string identifier, string defaultIdentifier)
private string AppendToValidClrIdentifier(string identifier, string appendString)
private string GetClrNamespace(DataContract dataContract, ContractCodeDomInfo contractCodeDomInfo)
private void AddNamespacePair(string dataContractNamespace, string clrNamespace)
private void AddImportStatement(string clrNamespace, CodeNamespace codeNamespace)
private string GetClrNamespace(string dataContractNamespace)
private void AddToNamespace(StringBuilder builder, string fragment, Dictionary`2<string, object> fragments)
private void AddNamespaceFragment(StringBuilder builder, int fragmentOffset, int fragmentLength, Dictionary`2<string, object> fragments)
private bool IsValidStart(char c)
private bool IsValid(char c)
private CodeTypeReference get_CodeTypeIPropertyChange()
private CodeThisReferenceExpression get_ThisReference()
private CodePrimitiveExpression get_NullReference()
private CodeParameterDeclarationExpression get_SerializationInfoParameter()
private CodeParameterDeclarationExpression get_StreamingContextParameter()
private CodeAttributeDeclaration get_SerializableAttribute()
private CodeMemberProperty get_NodeArrayProperty()
private CodeMemberField get_NodeArrayField()
private CodeMemberMethod get_ReadXmlMethod()
private CodeMemberMethod get_WriteXmlMethod()
private CodeMemberMethod get_GetSchemaMethod()
private CodeMemberMethod get_GetSchemaStaticMethod()
private CodeConstructor get_ISerializableBaseConstructor()
private CodeConstructor get_ISerializableDerivedConstructor()
private CodeMemberField get_SerializationInfoField()
private CodeMemberProperty get_SerializationInfoProperty()
private CodeMemberMethod get_GetObjectDataMethod()
private CodeMemberField get_ExtensionDataObjectField()
private CodeMemberProperty get_ExtensionDataObjectProperty()
private CodeMemberMethod get_RaisePropertyChangedEventMethod()
private CodeMemberEvent get_PropertyChangedEvent()
private CodeMemberProperty CreateProperty(CodeTypeReference type, string propertyName, string fieldName, bool isValueType)
private CodeMemberProperty CreateProperty(CodeTypeReference type, string propertyName, string fieldName, bool isValueType, bool raisePropertyChanged)
}
internal System.Runtime.Serialization.CodeInterpreter : object {
internal object ConvertValue(object arg, Type source, Type target)
private bool CanConvert(TypeCode typeCode)
private object InternalConvert(object arg, Type source, Type target, bool isAddress)
public object GetMember(MemberInfo memberInfo, object instance)
public void SetMember(MemberInfo memberInfo, object instance, object value)
}
internal System.Runtime.Serialization.CollectionDataContract : DataContract {
private XmlDictionaryString collectionItemName
private XmlDictionaryString childElementNamespace
private DataContract itemContract
private CollectionDataContractCriticalHelper helper
private Type[] KnownInterfaces
internal CollectionKind Kind
internal Type ItemType
public DataContract ItemContract
internal DataContract SharedTypeContract
internal string ItemName
public XmlDictionaryString CollectionItemName
internal string KeyName
internal string ValueName
internal bool IsDictionary
public XmlDictionaryString ChildElementNamespace
internal bool IsItemTypeNullable
internal bool IsConstructorCheckRequired
internal MethodInfo GetEnumeratorMethod
internal MethodInfo AddMethod
internal ConstructorInfo Constructor
internal Dictionary`2<XmlQualifiedName, DataContract> KnownDataContracts
internal string InvalidCollectionInSharedContractMessage
internal string SerializationExceptionMessage
internal string DeserializationExceptionMessage
internal bool IsReadOnlyContract
private bool ItemNameSetExplicit
internal XmlFormatCollectionWriterDelegate XmlFormatWriterDelegate
internal XmlFormatCollectionReaderDelegate XmlFormatReaderDelegate
internal XmlFormatGetOnlyCollectionReaderDelegate XmlFormatGetOnlyCollectionReaderDelegate
internal void .ctor(CollectionKind kind)
internal void .ctor(Type type)
internal void .ctor(Type type, DataContract itemContract)
private void .ctor(Type type, CollectionKind kind, Type itemType, MethodInfo getEnumeratorMethod, string serializationExceptionMessage, string deserializationExceptionMessage)
private void .ctor(Type type, CollectionKind kind, Type itemType, MethodInfo getEnumeratorMethod, MethodInfo addMethod, ConstructorInfo constructor)
private void .ctor(Type type, CollectionKind kind, Type itemType, MethodInfo getEnumeratorMethod, MethodInfo addMethod, ConstructorInfo constructor, bool isConstructorCheckRequired)
private void .ctor(Type type, string invalidCollectionInSharedContractMessage)
private void InitCollectionDataContract(DataContract sharedTypeContract)
private void InitSharedTypeContract()
private Type[] get_KnownInterfaces()
internal CollectionKind get_Kind()
internal Type get_ItemType()
public DataContract get_ItemContract()
public void set_ItemContract(DataContract value)
internal DataContract get_SharedTypeContract()
internal string get_ItemName()
internal void set_ItemName(string value)
public XmlDictionaryString get_CollectionItemName()
internal string get_KeyName()
internal void set_KeyName(string value)
internal string get_ValueName()
internal void set_ValueName(string value)
internal bool get_IsDictionary()
public XmlDictionaryString get_ChildElementNamespace()
internal bool get_IsItemTypeNullable()
internal void set_IsItemTypeNullable(bool value)
internal bool get_IsConstructorCheckRequired()
internal void set_IsConstructorCheckRequired(bool value)
internal MethodInfo get_GetEnumeratorMethod()
internal MethodInfo get_AddMethod()
internal ConstructorInfo get_Constructor()
internal Dictionary`2<XmlQualifiedName, DataContract> get_KnownDataContracts()
internal void set_KnownDataContracts(Dictionary`2<XmlQualifiedName, DataContract> value)
internal string get_InvalidCollectionInSharedContractMessage()
internal string get_SerializationExceptionMessage()
internal string get_DeserializationExceptionMessage()
internal bool get_IsReadOnlyContract()
private bool get_ItemNameSetExplicit()
internal XmlFormatCollectionWriterDelegate get_XmlFormatWriterDelegate()
internal XmlFormatCollectionReaderDelegate get_XmlFormatReaderDelegate()
internal XmlFormatGetOnlyCollectionReaderDelegate get_XmlFormatGetOnlyCollectionReaderDelegate()
private DataContract GetSharedTypeContract(Type type)
internal bool IsCollectionInterface(Type type)
internal bool IsCollection(Type type)
internal bool IsCollection(Type type, Type& itemType)
internal bool IsCollection(Type type, bool constructorRequired, bool skipIfReadOnlyContract)
private bool IsCollectionHelper(Type type, Type& itemType, bool constructorRequired, bool skipIfReadOnlyContract)
internal bool TryCreate(Type type, DataContract& dataContract)
internal bool TryCreateGetOnlyCollectionDataContract(Type type, DataContract& dataContract)
internal MethodInfo GetTargetMethodWithName(string name, Type type, Type interfaceType)
private bool IsArraySegment(Type t)
private bool IsCollectionOrTryCreate(Type type, bool tryCreate, DataContract& dataContract, Type& itemType, bool constructorRequired, bool skipIfReadOnlyContract)
internal bool IsCollectionDataContract(Type type)
private bool HandleIfInvalidCollection(Type type, bool tryCreate, bool hasCollectionDataContract, bool createContractWithException, string message, string param, DataContract& dataContract)
private void GetReadOnlyCollectionExceptionMessages(Type type, bool hasCollectionDataContract, string message, string param, String& serializationExceptionMessage, String& deserializationExceptionMessage)
private string GetInvalidCollectionMessage(string message, string nestedMessage, string param)
private void FindCollectionMethodsOnInterface(Type type, Type interfaceType, MethodInfo& addMethod, MethodInfo& getEnumeratorMethod)
private void GetCollectionMethods(Type type, Type interfaceType, Type[] addMethodTypeArray, bool addMethodOnInterface, MethodInfo& getEnumeratorMethod, MethodInfo& addMethod)
private bool IsKnownInterface(Type type)
internal DataContract BindGenericParameters(DataContract[] paramContracts, Dictionary`2<DataContract, DataContract> boundContracts)
internal DataContract GetValidContract(SerializationMode mode)
private void ThrowIfInvalid()
internal DataContract GetValidContract()
private void CheckConstructor()
internal bool IsValidContract(SerializationMode mode)
internal bool Equals(object other, Dictionary`2<DataContractPairKey, object> checkedContracts)
public int GetHashCode()
public void WriteXmlValue(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context)
}
public System.Runtime.Serialization.CollectionDataContractAttribute : Attribute {
private string name
private string ns
private string itemName
private string keyName
private string valueName
private bool isReference
private bool isNameSetExplicitly
private bool isNamespaceSetExplicitly
private bool isReferenceSetExplicitly
private bool isItemNameSetExplicitly
private bool isKeyNameSetExplicitly
private bool isValueNameSetExplicitly
public string Namespace
public bool IsNamespaceSetExplicitly
public string Name
public bool IsNameSetExplicitly
public string ItemName
public bool IsItemNameSetExplicitly
public string KeyName
public bool IsReference
public bool IsReferenceSetExplicitly
public bool IsKeyNameSetExplicitly
public string ValueName
public bool IsValueNameSetExplicitly
public string get_Namespace()
public void set_Namespace(string value)
public bool get_IsNamespaceSetExplicitly()
public string get_Name()
public void set_Name(string value)
public bool get_IsNameSetExplicitly()
public string get_ItemName()
public void set_ItemName(string value)
public bool get_IsItemNameSetExplicitly()
public string get_KeyName()
public void set_KeyName(string value)
public bool get_IsReference()
public void set_IsReference(bool value)
public bool get_IsReferenceSetExplicitly()
public bool get_IsKeyNameSetExplicitly()
public string get_ValueName()
public void set_ValueName(string value)
public bool get_IsValueNameSetExplicitly()
}
internal System.Runtime.Serialization.CollectionDataNode : DataNode`1<Array> {
private IList`1<IDataNode> items
private string itemName
private string itemNamespace
private int size
internal IList`1<IDataNode> Items
internal string ItemName
internal string ItemNamespace
internal int Size
internal IList`1<IDataNode> get_Items()
internal void set_Items(IList`1<IDataNode> value)
internal string get_ItemName()
internal void set_ItemName(string value)
internal string get_ItemNamespace()
internal void set_ItemNamespace(string value)
internal int get_Size()
internal void set_Size(int value)
public void GetData(ElementData element)
public void Clear()
}
internal System.Runtime.Serialization.CollectionKind : Enum {
public byte value__
public CollectionKind None
public CollectionKind GenericDictionary
public CollectionKind Dictionary
public CollectionKind GenericList
public CollectionKind GenericCollection
public CollectionKind List
public CollectionKind GenericEnumerable
public CollectionKind Collection
public CollectionKind Enumerable
public CollectionKind Array
}
internal System.Runtime.Serialization.Configuration.ConfigurationStrings : object {
internal string SectionGroupName
internal string DefaultCollectionName
internal string DeclaredTypes
internal string Index
internal string Parameter
internal string Type
internal string EnableUnsafeTypeForwarding
internal string DataContractSerializerSectionName
internal string NetDataContractSerializerSectionName
internal string DataContractSerializerSectionPath
internal string NetDataContractSerializerSectionPath
private string GetSectionPath(string sectionName)
internal string get_DataContractSerializerSectionPath()
internal string get_NetDataContractSerializerSectionPath()
}
public System.Runtime.Serialization.Configuration.DataContractSerializerSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
public DeclaredTypeElementCollection DeclaredTypes
protected ConfigurationPropertyCollection Properties
internal DataContractSerializerSection UnsafeGetSection()
public DeclaredTypeElementCollection get_DeclaredTypes()
protected ConfigurationPropertyCollection get_Properties()
}
public System.Runtime.Serialization.Configuration.DeclaredTypeElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
public TypeElementCollection KnownTypes
public string Type
protected ConfigurationPropertyCollection Properties
public void .ctor(string typeName)
public TypeElementCollection get_KnownTypes()
public string get_Type()
public void set_Type(string value)
protected void PostDeserialize()
protected ConfigurationPropertyCollection get_Properties()
}
public System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection : ConfigurationElementCollection {
public DeclaredTypeElement Item
public DeclaredTypeElement Item
public DeclaredTypeElement get_Item(int index)
public void set_Item(int index, DeclaredTypeElement value)
public DeclaredTypeElement get_Item(string typeName)
public void set_Item(string typeName, DeclaredTypeElement value)
public void Add(DeclaredTypeElement element)
public void Clear()
public bool Contains(string typeName)
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(DeclaredTypeElement element)
public void Remove(DeclaredTypeElement element)
public void Remove(string typeName)
public void RemoveAt(int index)
}
internal System.Runtime.Serialization.Configuration.DeclaredTypeValidator : ConfigurationValidatorBase {
public bool CanValidate(Type type)
public void Validate(object value)
}
internal System.Runtime.Serialization.Configuration.DeclaredTypeValidatorAttribute : ConfigurationValidatorAttribute {
public ConfigurationValidatorBase ValidatorInstance
public ConfigurationValidatorBase get_ValidatorInstance()
}
public System.Runtime.Serialization.Configuration.NetDataContractSerializerSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
public bool EnableUnsafeTypeForwarding
protected ConfigurationPropertyCollection Properties
internal bool TryUnsafeGetSection(NetDataContractSerializerSection& section)
public bool get_EnableUnsafeTypeForwarding()
protected ConfigurationPropertyCollection get_Properties()
}
public System.Runtime.Serialization.Configuration.ParameterElement : ConfigurationElement {
internal Guid identity
private ConfigurationPropertyCollection properties
public int Index
public ParameterElementCollection Parameters
public string Type
protected ConfigurationPropertyCollection Properties
public void .ctor(string typeName)
public void .ctor(int index)
public int get_Index()
public void set_Index(int value)
public ParameterElementCollection get_Parameters()
protected void PostDeserialize()
protected void PreSerialize(XmlWriter writer)
public string get_Type()
public void set_Type(string value)
private void Validate()
internal Type GetType(string rootType, Type[] typeArgs)
protected ConfigurationPropertyCollection get_Properties()
}
public System.Runtime.Serialization.Configuration.ParameterElementCollection : ConfigurationElementCollection {
public ParameterElement Item
public ConfigurationElementCollectionType CollectionType
protected string ElementName
public ParameterElement get_Item(int index)
public void set_Item(int index, ParameterElement value)
public void Add(ParameterElement element)
public void Clear()
public ConfigurationElementCollectionType get_CollectionType()
public bool Contains(string typeName)
protected ConfigurationElement CreateNewElement()
protected string get_ElementName()
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(ParameterElement element)
public void Remove(ParameterElement element)
public void RemoveAt(int index)
}
public System.Runtime.Serialization.Configuration.SerializationSectionGroup : ConfigurationSectionGroup {
public DataContractSerializerSection DataContractSerializer
public NetDataContractSerializerSection NetDataContractSerializer
public SerializationSectionGroup GetSectionGroup(Configuration config)
public DataContractSerializerSection get_DataContractSerializer()
public NetDataContractSerializerSection get_NetDataContractSerializer()
}
public System.Runtime.Serialization.Configuration.TypeElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private string key
protected ConfigurationPropertyCollection Properties
internal string Key
public ParameterElementCollection Parameters
public string Type
public int Index
protected ConfigurationPropertyCollection get_Properties()
public void .ctor(string typeName)
internal string get_Key()
public ParameterElementCollection get_Parameters()
protected void Reset(ConfigurationElement parentElement)
public string get_Type()
public void set_Type(string value)
public int get_Index()
public void set_Index(int value)
internal Type GetType(string rootType, Type[] typeArgs)
internal Type GetType(string rootType, Type[] typeArgs, string type, int index, ParameterElementCollection parameters)
}
public System.Runtime.Serialization.Configuration.TypeElementCollection : ConfigurationElementCollection {
private string KnownTypeConfig
public TypeElement Item
public ConfigurationElementCollectionType CollectionType
protected string ElementName
public TypeElement get_Item(int index)
public void set_Item(int index, TypeElement value)
public void Add(TypeElement element)
public void Clear()
public ConfigurationElementCollectionType get_CollectionType()
protected ConfigurationElement CreateNewElement()
protected string get_ElementName()
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(TypeElement element)
public void Remove(TypeElement element)
public void RemoveAt(int index)
}
internal System.Runtime.Serialization.ContractCodeDomInfo : object {
internal bool IsProcessed
internal CodeTypeDeclaration TypeDeclaration
internal CodeTypeReference TypeReference
internal CodeNamespace CodeNamespace
internal bool ReferencedTypeExists
internal bool UsesWildcardNamespace
private string clrNamespace
private Dictionary`2<string, object> memberNames
internal string ClrNamespace
internal string get_ClrNamespace()
internal void set_ClrNamespace(string value)
internal Dictionary`2<string, object> GetMemberNames()
}
public System.Runtime.Serialization.ContractNamespaceAttribute : Attribute {
private string clrNamespace
private string contractNamespace
public string ClrNamespace
public string ContractNamespace
public void .ctor(string contractNamespace)
public string get_ClrNamespace()
public void set_ClrNamespace(string value)
public string get_ContractNamespace()
}
internal System.Runtime.Serialization.CreateXmlSerializableDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public IXmlSerializable Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public IXmlSerializable EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.DataContract : object {
private XmlDictionaryString name
private XmlDictionaryString ns
private DataContractCriticalHelper helper
private DataContractSerializerSection configSection
protected DataContractCriticalHelper Helper
internal Type UnderlyingType
internal Type OriginalUnderlyingType
internal bool IsBuiltInDataContract
internal Type TypeForInitialization
internal bool IsValueType
internal bool IsReference
internal XmlQualifiedName StableName
internal GenericInfo GenericInfo
internal Dictionary`2<XmlQualifiedName, DataContract> KnownDataContracts
internal bool IsISerializable
internal XmlDictionaryString Name
public XmlDictionaryString Namespace
internal bool HasRoot
internal XmlDictionaryString TopLevelElementName
internal XmlDictionaryString TopLevelElementNamespace
internal bool CanContainReferences
internal bool IsPrimitive
internal MethodInfo ParseMethod
private DataContractSerializerSection ConfigSection
protected void .ctor(DataContractCriticalHelper helper)
internal DataContract GetDataContract(Type type)
internal DataContract GetDataContract(RuntimeTypeHandle typeHandle, Type type, SerializationMode mode)
internal DataContract GetDataContract(int id, RuntimeTypeHandle typeHandle, SerializationMode mode)
internal DataContract GetDataContractSkipValidation(int id, RuntimeTypeHandle typeHandle, Type type)
internal DataContract GetGetOnlyCollectionDataContract(int id, RuntimeTypeHandle typeHandle, Type type, SerializationMode mode)
internal DataContract GetGetOnlyCollectionDataContractSkipValidation(int id, RuntimeTypeHandle typeHandle, Type type)
internal DataContract GetDataContractForInitialization(int id)
internal int GetIdForInitialization(ClassDataContract classContract)
internal int GetId(RuntimeTypeHandle typeHandle)
public DataContract GetBuiltInDataContract(Type type)
public DataContract GetBuiltInDataContract(string name, string ns)
public DataContract GetBuiltInDataContract(string typeName)
internal string GetNamespace(string key)
internal XmlDictionaryString GetClrTypeString(string key)
internal void ThrowInvalidDataContractException(string message, Type type)
protected DataContractCriticalHelper get_Helper()
internal Type get_UnderlyingType()
internal Type get_OriginalUnderlyingType()
internal bool get_IsBuiltInDataContract()
internal Type get_TypeForInitialization()
public void WriteXmlValue(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context)
internal bool get_IsValueType()
internal void set_IsValueType(bool value)
internal bool get_IsReference()
internal void set_IsReference(bool value)
internal XmlQualifiedName get_StableName()
internal void set_StableName(XmlQualifiedName value)
internal GenericInfo get_GenericInfo()
internal void set_GenericInfo(GenericInfo value)
internal Dictionary`2<XmlQualifiedName, DataContract> get_KnownDataContracts()
internal void set_KnownDataContracts(Dictionary`2<XmlQualifiedName, DataContract> value)
internal bool get_IsISerializable()
internal void set_IsISerializable(bool value)
internal XmlDictionaryString get_Name()
public XmlDictionaryString get_Namespace()
internal bool get_HasRoot()
internal void set_HasRoot(bool value)
internal XmlDictionaryString get_TopLevelElementName()
internal void set_TopLevelElementName(XmlDictionaryString value)
internal XmlDictionaryString get_TopLevelElementNamespace()
internal void set_TopLevelElementNamespace(XmlDictionaryString value)
internal bool get_CanContainReferences()
internal bool get_IsPrimitive()
internal void WriteRootElement(XmlWriterDelegator writer, XmlDictionaryString name, XmlDictionaryString ns)
internal DataContract BindGenericParameters(DataContract[] paramContracts, Dictionary`2<DataContract, DataContract> boundContracts)
internal DataContract GetValidContract(SerializationMode mode)
internal DataContract GetValidContract()
internal bool IsValidContract(SerializationMode mode)
internal MethodInfo get_ParseMethod()
internal bool IsTypeSerializable(Type type)
private bool IsTypeSerializable(Type type, Dictionary`2<Type, object> previousCollectionTypes)
private void ValidatePreviousCollectionTypes(Type collectionType, Type itemType, Dictionary`2<Type, object> previousCollectionTypes)
internal Type UnwrapRedundantNullableType(Type type)
internal Type UnwrapNullableType(Type type)
private bool IsAlpha(char ch)
private bool IsDigit(char ch)
private bool IsAsciiLocalName(string localName)
internal string EncodeLocalName(string localName)
internal bool IsValidNCName(string name)
internal XmlQualifiedName GetStableName(Type type)
internal XmlQualifiedName GetStableName(Type type, Boolean& hasDataContract)
private XmlQualifiedName GetStableName(Type type, Dictionary`2<Type, object> previousCollectionTypes, Boolean& hasDataContract)
private XmlQualifiedName GetDCTypeStableName(Type type, DataContractAttribute dataContractAttribute)
private XmlQualifiedName GetNonDCTypeStableName(Type type, Dictionary`2<Type, object> previousCollectionTypes)
private bool TryGetBuiltInXmlAndArrayTypeStableName(Type type, Dictionary`2<Type, object> previousCollectionTypes, XmlQualifiedName& stableName)
internal bool TryGetDCAttribute(Type type, DataContractAttribute& dataContractAttribute)
internal XmlQualifiedName GetCollectionStableName(Type type, Type itemType, CollectionDataContractAttribute& collectionContractAttribute)
private XmlQualifiedName GetCollectionStableName(Type type, Type itemType, Dictionary`2<Type, object> previousCollectionTypes, CollectionDataContractAttribute& collectionContractAttribute)
private string GetArrayPrefix(Type& itemType)
internal XmlQualifiedName GetArrayTypeName(bool isNullable)
internal string GetCollectionNamespace(string elementNs)
internal XmlQualifiedName GetDefaultStableName(Type type)
private string GetDefaultStableLocalName(Type type)
private string GetDefaultDataContractNamespace(Type type)
internal IList`1<int> GetDataContractNameForGenericName(string typeName, StringBuilder localName)
internal bool IsBuiltInNamespace(string ns)
internal string GetDefaultStableNamespace(Type type)
internal XmlQualifiedName CreateQualifiedName(string localName, string ns)
internal string GetDefaultStableNamespace(string clrNs)
private void CheckExplicitDataContractNamespaceUri(string dataContractNs, Type type)
internal string GetClrTypeFullName(Type type)
internal string GetClrAssemblyName(Type type, Boolean& hasTypeForwardedFrom)
internal string GetClrTypeFullNameUsingTypeForwardedFromAttribute(Type type)
private string GetClrTypeFullNameForArray(Type type)
private string GetClrTypeFullNameForNonArrayTypes(Type type)
internal void GetClrNameAndNamespace(string fullTypeName, String& localName, String& ns)
internal void GetDefaultStableName(string fullTypeName, String& localName, String& ns)
private void GetDefaultStableName(CodeTypeReference typeReference, String& localName, String& ns)
internal string GetDataContractNamespaceFromUri(string uriString)
private string GetGlobalDataContractNamespace(string clrNs, ICustomAttributeProvider customAttribuetProvider)
private string GetNamespacesDigest(string namespaces)
private string ExpandGenericParameters(string format, Type type)
internal string ExpandGenericParameters(string format, IGenericNameProvider genericNameProvider)
internal bool IsTypeNullable(Type type)
public void ThrowTypeNotSerializable(Type type)
private DataContractSerializerSection get_ConfigSection()
internal Dictionary`2<XmlQualifiedName, DataContract> ImportKnownTypeAttributes(Type type)
private void ImportKnownTypeAttributes(Type type, Dictionary`2<Type, Type> typesChecked, Dictionary`2& knownDataContracts)
private void LoadKnownTypesFromConfig(Type type, Dictionary`2<Type, Type> typesChecked, Dictionary`2& knownDataContracts)
private void CheckRootTypeInConfigIsGeneric(Type type, Type& rootType, Type[]& genArgs)
private bool IsElemTypeNullOrNotEqualToRootType(string elemTypeName, Type rootType)
private bool IsCollectionElementTypeEqualToRootType(string collectionElementTypeName, Type rootType)
internal void CheckAndAdd(Type type, Dictionary`2<Type, Type> typesChecked, Dictionary`2& nameToDataContractTable)
private bool IsOpenGenericType(Type t)
public bool Equals(object other)
internal bool Equals(object other, Dictionary`2<DataContractPairKey, object> checkedContracts)
internal bool IsEqualOrChecked(object other, Dictionary`2<DataContractPairKey, object> checkedContracts)
public int GetHashCode()
internal void ThrowInvalidDataContractException(string message)
internal bool IsTypeVisible(Type t)
}
public System.Runtime.Serialization.DataContractAttribute : Attribute {
private string name
private string ns
private bool isNameSetExplicitly
private bool isNamespaceSetExplicitly
private bool isReference
private bool isReferenceSetExplicitly
public bool IsReference
public bool IsReferenceSetExplicitly
public string Namespace
public bool IsNamespaceSetExplicitly
public string Name
public bool IsNameSetExplicitly
public bool get_IsReference()
public void set_IsReference(bool value)
public bool get_IsReferenceSetExplicitly()
public string get_Namespace()
public void set_Namespace(string value)
public bool get_IsNamespaceSetExplicitly()
public string get_Name()
public void set_Name(string value)
public bool get_IsNameSetExplicitly()
}
internal System.Runtime.Serialization.DataContractPairKey : object {
private object object1
private object object2
public void .ctor(object object1, object object2)
public bool Equals(object other)
public int GetHashCode()
}
public System.Runtime.Serialization.DataContractResolver : object {
public bool TryResolveType(Type type, Type declaredType, DataContractResolver knownTypeResolver, XmlDictionaryString& typeName, XmlDictionaryString& typeNamespace)
public Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
}
public System.Runtime.Serialization.DataContractSerializer : XmlObjectSerializer {
private Type rootType
private DataContract rootContract
private bool needsContractNsAtRoot
private XmlDictionaryString rootName
private XmlDictionaryString rootNamespace
private int maxItemsInObjectGraph
private bool ignoreExtensionDataObject
private bool preserveObjectReferences
private IDataContractSurrogate dataContractSurrogate
private ReadOnlyCollection`1<Type> knownTypeCollection
internal IList`1<Type> knownTypeList
internal Dictionary`2<XmlQualifiedName, DataContract> knownDataContracts
private DataContractResolver dataContractResolver
private bool serializeReadOnlyTypes
public ReadOnlyCollection`1<Type> KnownTypes
internal Dictionary`2<XmlQualifiedName, DataContract> KnownDataContracts
public int MaxItemsInObjectGraph
public IDataContractSurrogate DataContractSurrogate
public bool PreserveObjectReferences
public bool IgnoreExtensionDataObject
public DataContractResolver DataContractResolver
public bool SerializeReadOnlyTypes
private DataContract RootContract
public void .ctor(Type type)
public void .ctor(Type type, IEnumerable`1<Type> knownTypes)
public void .ctor(Type type, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate)
public void .ctor(Type type, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate, DataContractResolver dataContractResolver)
public void .ctor(Type type, string rootName, string rootNamespace)
public void .ctor(Type type, string rootName, string rootNamespace, IEnumerable`1<Type> knownTypes)
public void .ctor(Type type, string rootName, string rootNamespace, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate)
public void .ctor(Type type, string rootName, string rootNamespace, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate, DataContractResolver dataContractResolver)
public void .ctor(Type type, XmlDictionaryString rootName, XmlDictionaryString rootNamespace)
public void .ctor(Type type, XmlDictionaryString rootName, XmlDictionaryString rootNamespace, IEnumerable`1<Type> knownTypes)
public void .ctor(Type type, XmlDictionaryString rootName, XmlDictionaryString rootNamespace, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate)
public void .ctor(Type type, XmlDictionaryString rootName, XmlDictionaryString rootNamespace, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate, DataContractResolver dataContractResolver)
public void .ctor(Type type, DataContractSerializerSettings settings)
private void Initialize(Type type, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate, DataContractResolver dataContractResolver, bool serializeReadOnlyTypes)
private void Initialize(Type type, XmlDictionaryString rootName, XmlDictionaryString rootNamespace, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, bool preserveObjectReferences, IDataContractSurrogate dataContractSurrogate, DataContractResolver dataContractResolver, bool serializeReadOnlyTypes)
public ReadOnlyCollection`1<Type> get_KnownTypes()
internal Dictionary`2<XmlQualifiedName, DataContract> get_KnownDataContracts()
public int get_MaxItemsInObjectGraph()
public IDataContractSurrogate get_DataContractSurrogate()
public bool get_PreserveObjectReferences()
public bool get_IgnoreExtensionDataObject()
public DataContractResolver get_DataContractResolver()
public bool get_SerializeReadOnlyTypes()
private DataContract get_RootContract()
internal void InternalWriteObject(XmlWriterDelegator writer, object graph)
internal void InternalWriteObject(XmlWriterDelegator writer, object graph, DataContractResolver dataContractResolver)
public void WriteObject(XmlWriter writer, object graph)
public void WriteStartObject(XmlWriter writer, object graph)
public void WriteObjectContent(XmlWriter writer, object graph)
public void WriteEndObject(XmlWriter writer)
public void WriteStartObject(XmlDictionaryWriter writer, object graph)
public void WriteObjectContent(XmlDictionaryWriter writer, object graph)
public void WriteEndObject(XmlDictionaryWriter writer)
public void WriteObject(XmlDictionaryWriter writer, object graph, DataContractResolver dataContractResolver)
public object ReadObject(XmlReader reader)
public object ReadObject(XmlReader reader, bool verifyObjectName)
public bool IsStartObject(XmlReader reader)
public object ReadObject(XmlDictionaryReader reader, bool verifyObjectName)
public bool IsStartObject(XmlDictionaryReader reader)
public object ReadObject(XmlDictionaryReader reader, bool verifyObjectName, DataContractResolver dataContractResolver)
internal void InternalWriteStartObject(XmlWriterDelegator writer, object graph)
internal void InternalWriteObjectContent(XmlWriterDelegator writer, object graph)
internal void InternalWriteObjectContent(XmlWriterDelegator writer, object graph, DataContractResolver dataContractResolver)
internal DataContract GetDataContract(DataContract declaredTypeContract, Type declaredType, Type objectType)
internal void SetDataContractSurrogate(IDataContractSurrogate adapter)
internal void InternalWriteEndObject(XmlWriterDelegator writer)
internal object InternalReadObject(XmlReaderDelegator xmlReader, bool verifyObjectName)
internal object InternalReadObject(XmlReaderDelegator xmlReader, bool verifyObjectName, DataContractResolver dataContractResolver)
internal bool InternalIsStartObject(XmlReaderDelegator reader)
internal Type GetSerializeType(object graph)
internal Type GetDeserializeType()
internal object SurrogateToDataContractType(IDataContractSurrogate dataContractSurrogate, object oldObj, Type surrogatedDeclaredType, Type& objType)
internal Type GetSurrogatedType(IDataContractSurrogate dataContractSurrogate, Type type)
}
public System.Runtime.Serialization.DataContractSerializerExtensions : object {
public ISerializationSurrogateProvider GetSerializationSurrogateProvider(DataContractSerializer serializer)
public void SetSerializationSurrogateProvider(DataContractSerializer serializer, ISerializationSurrogateProvider provider)
}
public System.Runtime.Serialization.DataContractSerializerSettings : object {
private int maxItemsInObjectGraph
private XmlDictionaryString <RootName>k__BackingField
private XmlDictionaryString <RootNamespace>k__BackingField
private IEnumerable`1<Type> <KnownTypes>k__BackingField
private bool <IgnoreExtensionDataObject>k__BackingField
private bool <PreserveObjectReferences>k__BackingField
private IDataContractSurrogate <DataContractSurrogate>k__BackingField
private DataContractResolver <DataContractResolver>k__BackingField
private bool <SerializeReadOnlyTypes>k__BackingField
public XmlDictionaryString RootName
public XmlDictionaryString RootNamespace
public IEnumerable`1<Type> KnownTypes
public int MaxItemsInObjectGraph
public bool IgnoreExtensionDataObject
public bool PreserveObjectReferences
public IDataContractSurrogate DataContractSurrogate
public DataContractResolver DataContractResolver
public bool SerializeReadOnlyTypes
public XmlDictionaryString get_RootName()
public void set_RootName(XmlDictionaryString value)
public XmlDictionaryString get_RootNamespace()
public void set_RootNamespace(XmlDictionaryString value)
public IEnumerable`1<Type> get_KnownTypes()
public void set_KnownTypes(IEnumerable`1<Type> value)
public int get_MaxItemsInObjectGraph()
public void set_MaxItemsInObjectGraph(int value)
public bool get_IgnoreExtensionDataObject()
public void set_IgnoreExtensionDataObject(bool value)
public bool get_PreserveObjectReferences()
public void set_PreserveObjectReferences(bool value)
public IDataContractSurrogate get_DataContractSurrogate()
public void set_DataContractSurrogate(IDataContractSurrogate value)
public DataContractResolver get_DataContractResolver()
public void set_DataContractResolver(DataContractResolver value)
public bool get_SerializeReadOnlyTypes()
public void set_SerializeReadOnlyTypes(bool value)
}
internal System.Runtime.Serialization.DataContractSet : object {
private Dictionary`2<XmlQualifiedName, DataContract> contracts
private Dictionary`2<DataContract, object> processedContracts
private IDataContractSurrogate dataContractSurrogate
private Hashtable surrogateDataTable
private Dictionary`2<XmlQualifiedName, DataContract> knownTypesForObject
private ICollection`1<Type> referencedTypes
private ICollection`1<Type> referencedCollectionTypes
private Dictionary`2<XmlQualifiedName, object> referencedTypesDictionary
private Dictionary`2<XmlQualifiedName, object> referencedCollectionTypesDictionary
private Dictionary`2<XmlQualifiedName, DataContract> Contracts
private Dictionary`2<DataContract, object> ProcessedContracts
private Hashtable SurrogateDataTable
internal Dictionary`2<XmlQualifiedName, DataContract> KnownTypesForObject
public DataContract Item
public IDataContractSurrogate DataContractSurrogate
internal void .ctor(IDataContractSurrogate dataContractSurrogate)
internal void .ctor(IDataContractSurrogate dataContractSurrogate, ICollection`1<Type> referencedTypes, ICollection`1<Type> referencedCollectionTypes)
internal void .ctor(DataContractSet dataContractSet)
private Dictionary`2<XmlQualifiedName, DataContract> get_Contracts()
private Dictionary`2<DataContract, object> get_ProcessedContracts()
private Hashtable get_SurrogateDataTable()
internal Dictionary`2<XmlQualifiedName, DataContract> get_KnownTypesForObject()
internal void set_KnownTypesForObject(Dictionary`2<XmlQualifiedName, DataContract> value)
internal void Add(Type type)
internal void EnsureTypeNotGeneric(Type type)
private void Add(DataContract dataContract)
public void Add(XmlQualifiedName name, DataContract dataContract)
internal void InternalAdd(XmlQualifiedName name, DataContract dataContract)
private void AddClassDataContract(ClassDataContract classDataContract)
private void AddCollectionDataContract(CollectionDataContract collectionDataContract)
private void AddXmlDataContract(XmlDataContract xmlDataContract)
private void AddKnownDataContracts(Dictionary`2<XmlQualifiedName, DataContract> knownDataContracts)
internal XmlQualifiedName GetStableName(Type clrType)
internal DataContract GetDataContract(Type clrType)
internal DataContract GetMemberTypeDataContract(DataMember dataMember)
internal DataContract GetItemTypeDataContract(CollectionDataContract collectionContract)
internal object GetSurrogateData(object key)
internal void SetSurrogateData(object key, object surrogateData)
public DataContract get_Item(XmlQualifiedName key)
public IDataContractSurrogate get_DataContractSurrogate()
public bool Remove(XmlQualifiedName key)
public IEnumerator`1<KeyValuePair`2<XmlQualifiedName, DataContract>> GetEnumerator()
internal bool IsContractProcessed(DataContract dataContract)
internal void SetContractProcessed(DataContract dataContract)
internal ContractCodeDomInfo GetContractCodeDomInfo(DataContract dataContract)
internal void SetContractCodeDomInfo(DataContract dataContract, ContractCodeDomInfo info)
private Dictionary`2<XmlQualifiedName, object> GetReferencedTypes()
private Dictionary`2<XmlQualifiedName, object> GetReferencedCollectionTypes()
private void AddReferencedType(Dictionary`2<XmlQualifiedName, object> referencedTypes, Type type)
internal bool TryGetReferencedType(XmlQualifiedName stableName, DataContract dataContract, Type& type)
internal bool TryGetReferencedCollectionType(XmlQualifiedName stableName, DataContract dataContract, Type& type)
private bool TryGetReferencedType(XmlQualifiedName stableName, DataContract dataContract, bool useReferencedCollectionTypes, Type& type)
private bool IsTypeReferenceable(Type type)
}
internal System.Runtime.Serialization.DataContractSurrogateCaller : object {
internal Type GetDataContractType(IDataContractSurrogate surrogate, Type type)
internal object GetObjectToSerialize(IDataContractSurrogate surrogate, object obj, Type objType, Type membertype)
internal object GetDeserializedObject(IDataContractSurrogate surrogate, object obj, Type objType, Type memberType)
internal object GetCustomDataToExport(IDataContractSurrogate surrogate, MemberInfo memberInfo, Type dataContractType)
internal object GetCustomDataToExport(IDataContractSurrogate surrogate, Type clrType, Type dataContractType)
internal void GetKnownCustomDataTypes(IDataContractSurrogate surrogate, Collection`1<Type> customDataTypes)
internal Type GetReferencedTypeOnImport(IDataContractSurrogate surrogate, string typeName, string typeNamespace, object customData)
internal CodeTypeDeclaration ProcessImportedType(IDataContractSurrogate surrogate, CodeTypeDeclaration typeDeclaration, CodeCompileUnit compileUnit)
}
internal System.Runtime.Serialization.DataMember : object {
private CriticalHelper helper
internal MemberInfo MemberInfo
internal string Name
internal int Order
internal bool IsRequired
internal bool EmitDefaultValue
internal bool IsNullable
internal bool IsGetOnlyCollection
internal Type MemberType
internal DataContract MemberTypeContract
internal bool HasConflictingNameAndType
internal DataMember ConflictingMember
internal void .ctor(MemberInfo memberInfo)
internal void .ctor(string name)
internal void .ctor(DataContract memberTypeContract, string name, bool isNullable, bool isRequired, bool emitDefaultValue, int order)
internal MemberInfo get_MemberInfo()
internal string get_Name()
internal void set_Name(string value)
internal int get_Order()
internal void set_Order(int value)
internal bool get_IsRequired()
internal void set_IsRequired(bool value)
internal bool get_EmitDefaultValue()
internal void set_EmitDefaultValue(bool value)
internal bool get_IsNullable()
internal void set_IsNullable(bool value)
internal bool get_IsGetOnlyCollection()
internal void set_IsGetOnlyCollection(bool value)
internal Type get_MemberType()
internal DataContract get_MemberTypeContract()
internal void set_MemberTypeContract(DataContract value)
internal bool get_HasConflictingNameAndType()
internal void set_HasConflictingNameAndType(bool value)
internal DataMember get_ConflictingMember()
internal void set_ConflictingMember(DataMember value)
internal DataMember BindGenericParameters(DataContract[] paramContracts, Dictionary`2<DataContract, DataContract> boundContracts)
internal bool Equals(object other, Dictionary`2<DataContractPairKey, object> checkedContracts)
public int GetHashCode()
}
public System.Runtime.Serialization.DataMemberAttribute : Attribute {
private string name
private bool isNameSetExplicitly
private int order
private bool isRequired
private bool emitDefaultValue
public string Name
public bool IsNameSetExplicitly
public int Order
public bool IsRequired
public bool EmitDefaultValue
public string get_Name()
public void set_Name(string value)
public bool get_IsNameSetExplicitly()
public int get_Order()
public void set_Order(int value)
public bool get_IsRequired()
public void set_IsRequired(bool value)
public bool get_EmitDefaultValue()
public void set_EmitDefaultValue(bool value)
}
internal System.Runtime.Serialization.DataNode`1 : object {
protected Type dataType
private T value
private string dataContractName
private string dataContractNamespace
private string clrTypeName
private string clrAssemblyName
private string id
private bool isFinalValue
public Type DataType
public object Value
private bool System.Runtime.Serialization.IDataNode.IsFinalValue
public string DataContractName
public string DataContractNamespace
public string ClrTypeName
public string ClrAssemblyName
public bool PreservesReferences
public string Id
internal void .ctor(T value)
public Type get_DataType()
public object get_Value()
public void set_Value(object value)
private bool System.Runtime.Serialization.IDataNode.get_IsFinalValue()
private void System.Runtime.Serialization.IDataNode.set_IsFinalValue(bool value)
public T GetValue()
public string get_DataContractName()
public void set_DataContractName(string value)
public string get_DataContractNamespace()
public void set_DataContractNamespace(string value)
public string get_ClrTypeName()
public void set_ClrTypeName(string value)
public string get_ClrAssemblyName()
public void set_ClrAssemblyName(string value)
public bool get_PreservesReferences()
public string get_Id()
public void set_Id(string value)
public void GetData(ElementData element)
public void Clear()
internal void AddQualifiedNameAttribute(ElementData element, string elementPrefix, string elementName, string elementNs, string valueName, string valueNs)
}
internal System.Runtime.Serialization.DateTimeDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
public System.Runtime.Serialization.DateTimeFormat : object {
private string formatString
private IFormatProvider formatProvider
private DateTimeStyles dateTimeStyles
public string FormatString
public IFormatProvider FormatProvider
public DateTimeStyles DateTimeStyles
public void .ctor(string formatString)
public void .ctor(string formatString, IFormatProvider formatProvider)
public string get_FormatString()
public IFormatProvider get_FormatProvider()
public DateTimeStyles get_DateTimeStyles()
public void set_DateTimeStyles(DateTimeStyles value)
}
internal System.Runtime.Serialization.DateTimeOffsetAdapter : ValueType {
private DateTime utcDateTime
private short offsetMinutes
public DateTime UtcDateTime
public short OffsetMinutes
public void .ctor(DateTime dateTime, short offsetMinutes)
public DateTime get_UtcDateTime()
public void set_UtcDateTime(DateTime value)
public short get_OffsetMinutes()
public void set_OffsetMinutes(short value)
public DateTimeOffset GetDateTimeOffset(DateTimeOffsetAdapter value)
public DateTimeOffsetAdapter GetDateTimeOffsetAdapter(DateTimeOffset value)
public string ToString(IFormatProvider provider)
}
internal System.Runtime.Serialization.DecimalDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.Diagnostics.Application.TD : object {
private ResourceManager resourceManager
private CultureInfo resourceCulture
private EventDescriptor[] eventDescriptors
private object syncLock
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) eventDescriptorsCreated
private ResourceManager ResourceManager
internal CultureInfo Culture
private ResourceManager get_ResourceManager()
internal CultureInfo get_Culture()
internal void set_Culture(CultureInfo value)
internal bool ReaderQuotaExceededIsEnabled()
internal void ReaderQuotaExceeded(string param0)
internal bool DCSerializeWithSurrogateStartIsEnabled()
internal void DCSerializeWithSurrogateStart(string SurrogateType)
internal bool DCSerializeWithSurrogateStopIsEnabled()
internal void DCSerializeWithSurrogateStop()
internal bool DCDeserializeWithSurrogateStartIsEnabled()
internal void DCDeserializeWithSurrogateStart(string SurrogateType)
internal bool DCDeserializeWithSurrogateStopIsEnabled()
internal void DCDeserializeWithSurrogateStop()
internal bool ImportKnownTypesStartIsEnabled()
internal void ImportKnownTypesStart()
internal bool ImportKnownTypesStopIsEnabled()
internal void ImportKnownTypesStop()
internal bool DCResolverResolveIsEnabled()
internal void DCResolverResolve(string TypeName)
internal bool DCGenWriterStartIsEnabled()
internal void DCGenWriterStart(string Kind, string TypeName)
internal bool DCGenWriterStopIsEnabled()
internal void DCGenWriterStop()
internal bool DCGenReaderStartIsEnabled()
internal void DCGenReaderStart(string Kind, string TypeName)
internal bool DCGenReaderStopIsEnabled()
internal void DCGenReaderStop()
internal bool DCJsonGenReaderStartIsEnabled()
internal void DCJsonGenReaderStart(string Kind, string TypeName)
internal bool DCJsonGenReaderStopIsEnabled()
internal void DCJsonGenReaderStop()
internal bool DCJsonGenWriterStartIsEnabled()
internal void DCJsonGenWriterStart(string Kind, string TypeName)
internal bool DCJsonGenWriterStopIsEnabled()
internal void DCJsonGenWriterStop()
internal bool GenXmlSerializableStartIsEnabled()
internal void GenXmlSerializableStart(string DCType)
internal bool GenXmlSerializableStopIsEnabled()
internal void GenXmlSerializableStop()
private void CreateEventDescriptors()
private void EnsureEventDescriptors()
private bool IsEtwEventEnabled(int eventIndex)
private bool WriteEtwEvent(int eventIndex, EventTraceActivity eventParam0, string eventParam1, string eventParam2)
private bool WriteEtwEvent(int eventIndex, EventTraceActivity eventParam0, string eventParam1)
private bool WriteEtwEvent(int eventIndex, EventTraceActivity eventParam0, string eventParam1, string eventParam2, string eventParam3)
}
internal System.Runtime.Serialization.Diagnostics.TraceCode : object {
public int Serialization
public int WriteObjectBegin
public int WriteObjectEnd
public int WriteObjectContentBegin
public int WriteObjectContentEnd
public int ReadObjectBegin
public int ReadObjectEnd
public int ElementIgnored
public int XsdExportBegin
public int XsdExportEnd
public int XsdImportBegin
public int XsdImportEnd
public int XsdExportError
public int XsdImportError
public int XsdExportAnnotationFailed
public int XsdImportAnnotationFailed
public int XsdExportDupItems
public int FactoryTypeNotFound
public int ObjectWithLargeDepth
}
internal System.Runtime.Serialization.Diagnostics.TraceUtility : object {
private Dictionary`2<int, string> traceCodes
internal void Trace(TraceEventType severity, int traceCode, string traceDescription)
internal void Trace(TraceEventType severity, int traceCode, string traceDescription, TraceRecord record)
internal void Trace(TraceEventType severity, int traceCode, string traceDescription, TraceRecord record, Exception exception)
}
internal System.Runtime.Serialization.DiagnosticUtility : object {
internal bool ShouldTraceError
internal bool ShouldTraceWarning
internal bool ShouldTraceInformation
internal bool ShouldTraceVerbose
}
internal System.Runtime.Serialization.DictionaryGlobals : object {
public XmlDictionaryString EmptyString
public XmlDictionaryString SchemaInstanceNamespace
public XmlDictionaryString SchemaNamespace
public XmlDictionaryString SerializationNamespace
public XmlDictionaryString XmlnsNamespace
public XmlDictionaryString XsiTypeLocalName
public XmlDictionaryString XsiNilLocalName
public XmlDictionaryString ClrTypeLocalName
public XmlDictionaryString ClrAssemblyLocalName
public XmlDictionaryString ArraySizeLocalName
public XmlDictionaryString IdLocalName
public XmlDictionaryString RefLocalName
public XmlDictionaryString ISerializableFactoryTypeLocalName
public XmlDictionaryString CharLocalName
public XmlDictionaryString BooleanLocalName
public XmlDictionaryString SignedByteLocalName
public XmlDictionaryString UnsignedByteLocalName
public XmlDictionaryString ShortLocalName
public XmlDictionaryString UnsignedShortLocalName
public XmlDictionaryString IntLocalName
public XmlDictionaryString UnsignedIntLocalName
public XmlDictionaryString LongLocalName
public XmlDictionaryString UnsignedLongLocalName
public XmlDictionaryString FloatLocalName
public XmlDictionaryString DoubleLocalName
public XmlDictionaryString DecimalLocalName
public XmlDictionaryString DateTimeLocalName
public XmlDictionaryString StringLocalName
public XmlDictionaryString ByteArrayLocalName
public XmlDictionaryString ObjectLocalName
public XmlDictionaryString TimeSpanLocalName
public XmlDictionaryString GuidLocalName
public XmlDictionaryString UriLocalName
public XmlDictionaryString QNameLocalName
public XmlDictionaryString Space
public XmlDictionaryString timeLocalName
public XmlDictionaryString dateLocalName
public XmlDictionaryString hexBinaryLocalName
public XmlDictionaryString gYearMonthLocalName
public XmlDictionaryString gYearLocalName
public XmlDictionaryString gMonthDayLocalName
public XmlDictionaryString gDayLocalName
public XmlDictionaryString gMonthLocalName
public XmlDictionaryString integerLocalName
public XmlDictionaryString positiveIntegerLocalName
public XmlDictionaryString negativeIntegerLocalName
public XmlDictionaryString nonPositiveIntegerLocalName
public XmlDictionaryString nonNegativeIntegerLocalName
public XmlDictionaryString normalizedStringLocalName
public XmlDictionaryString tokenLocalName
public XmlDictionaryString languageLocalName
public XmlDictionaryString NameLocalName
public XmlDictionaryString NCNameLocalName
public XmlDictionaryString XSDIDLocalName
public XmlDictionaryString IDREFLocalName
public XmlDictionaryString IDREFSLocalName
public XmlDictionaryString ENTITYLocalName
public XmlDictionaryString ENTITIESLocalName
public XmlDictionaryString NMTOKENLocalName
public XmlDictionaryString NMTOKENSLocalName
public XmlDictionaryString AsmxTypesNamespace
}
internal System.Runtime.Serialization.DoubleDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.ElementData : object {
public string localName
public string ns
public string prefix
public int attributeCount
public AttributeData[] attributes
public IDataNode dataNode
public int childElementIndex
public void AddAttribute(string prefix, string ns, string name, string value)
private void GrowAttributesIfNeeded()
}
public System.Runtime.Serialization.EmitTypeInformation : Enum {
public int value__
public EmitTypeInformation AsNeeded
public EmitTypeInformation Always
public EmitTypeInformation Never
}
internal System.Runtime.Serialization.EnumDataContract : DataContract {
private EnumDataContractCriticalHelper helper
internal XmlQualifiedName BaseContractName
internal List`1<DataMember> Members
internal List`1<long> Values
internal bool IsFlags
internal bool IsULong
private XmlDictionaryString[] ChildElementNames
internal bool CanContainReferences
internal void .ctor(Type type)
internal XmlQualifiedName GetBaseContractName(Type type)
internal Type GetBaseType(XmlQualifiedName baseContractName)
internal XmlQualifiedName get_BaseContractName()
internal void set_BaseContractName(XmlQualifiedName value)
internal List`1<DataMember> get_Members()
internal void set_Members(List`1<DataMember> value)
internal List`1<long> get_Values()
internal void set_Values(List`1<long> value)
internal bool get_IsFlags()
internal void set_IsFlags(bool value)
internal bool get_IsULong()
private XmlDictionaryString[] get_ChildElementNames()
internal bool get_CanContainReferences()
internal void WriteEnumValue(XmlWriterDelegator writer, object value)
internal object ReadEnumValue(XmlReaderDelegator reader)
private long ReadEnumValue(string value, int index, int count)
internal string GetStringFromEnumValue(long value)
internal long GetEnumValueFromString(string value)
internal bool Equals(object other, Dictionary`2<DataContractPairKey, object> checkedContracts)
public int GetHashCode()
public void WriteXmlValue(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context)
}
public System.Runtime.Serialization.EnumMemberAttribute : Attribute {
private string value
private bool isValueSetExplicitly
public string Value
public bool IsValueSetExplicitly
public string get_Value()
public void set_Value(string value)
public bool get_IsValueSetExplicitly()
}
public System.Runtime.Serialization.ExportOptions : object {
private Collection`1<Type> knownTypes
private IDataContractSurrogate dataContractSurrogate
public IDataContractSurrogate DataContractSurrogate
public Collection`1<Type> KnownTypes
public IDataContractSurrogate get_DataContractSurrogate()
public void set_DataContractSurrogate(IDataContractSurrogate value)
internal IDataContractSurrogate GetSurrogate()
public Collection`1<Type> get_KnownTypes()
}
internal System.Runtime.Serialization.ExtensionDataMember : object {
private string name
private string ns
private IDataNode value
private int memberIndex
public string Name
public string Namespace
public IDataNode Value
public int MemberIndex
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public IDataNode get_Value()
public void set_Value(IDataNode value)
public int get_MemberIndex()
public void set_MemberIndex(int value)
}
public System.Runtime.Serialization.ExtensionDataObject : object {
private IList`1<ExtensionDataMember> members
internal IList`1<ExtensionDataMember> Members
internal IList`1<ExtensionDataMember> get_Members()
internal void set_Members(IList`1<ExtensionDataMember> value)
}
internal System.Runtime.Serialization.ExtensionDataReader : XmlReader {
private Hashtable cache
private ElementData[] elements
private ElementData element
private ElementData nextElement
private ReadState readState
private ExtensionDataNodeType internalNodeType
private XmlNodeType nodeType
private int depth
private string localName
private string ns
private string prefix
private string value
private int attributeCount
private int attributeIndex
private XmlNodeReader xmlNodeReader
private Queue`1<IDataNode> deserializedDataNodes
private XmlObjectSerializerReadContext context
private Dictionary`2<string, string> nsToPrefixTable
private Dictionary`2<string, string> prefixToNsTable
private bool IsXmlDataNode
public XmlNodeType NodeType
public string LocalName
public string NamespaceURI
public string Prefix
public string Value
public int Depth
public int AttributeCount
public bool EOF
public ReadState ReadState
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public string Item
public string Item
public string Item
public string Name
public bool HasValue
public string BaseURI
public XmlNameTable NameTable
internal void .ctor(XmlObjectSerializerReadContext context)
internal void SetDeserializedValue(object obj)
internal IDataNode GetCurrentNode()
internal void SetDataNode(IDataNode dataNode, string name, string ns)
internal void Reset()
private bool get_IsXmlDataNode()
public XmlNodeType get_NodeType()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public string get_Value()
public int get_Depth()
public int get_AttributeCount()
public bool get_EOF()
public ReadState get_ReadState()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string namespaceURI)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public void MoveToAttribute(int index)
public string GetAttribute(string name, string namespaceURI)
public bool MoveToAttribute(string name, string namespaceURI)
public bool MoveToElement()
private void SetElement()
public string LookupNamespace(string prefix)
public void Skip()
private bool IsElementNode(ExtensionDataNodeType nodeType)
public void Close()
public bool Read()
public string get_Name()
public bool get_HasValue()
public string get_BaseURI()
public XmlNameTable get_NameTable()
public string GetAttribute(string name)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public void ResolveEntity()
public bool ReadAttributeValue()
private void MoveNext(IDataNode dataNode)
private void SetNextElement(IDataNode node, string name, string ns, string prefix)
private void AddDeserializedDataNode(IDataNode node)
private bool CheckIfNodeHandled(IDataNode node)
private void MoveNextInClass(ClassDataNode dataNode)
private void MoveNextInCollection(CollectionDataNode dataNode)
private void MoveNextInISerializable(ISerializableDataNode dataNode)
private void MoveNextInXml(XmlDataNode dataNode)
private void MoveToDeserializedObject(IDataNode dataNode)
private bool MoveToText(Type type, IDataNode dataNode, bool isTypedNode)
private void PushElement()
private void PopElement()
private void GrowElementsIfNeeded()
private ElementData GetNextElement()
internal string GetPrefix(string ns)
private void AddPrefix(string prefix, string ns)
}
internal System.Runtime.Serialization.FloatDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.FxTrace : object {
public bool ShouldTraceError
public bool ShouldTraceVerbose
public EtwDiagnosticTrace Trace
public ExceptionTrace Exception
public EtwDiagnosticTrace get_Trace()
public ExceptionTrace get_Exception()
public bool IsEventEnabled(int index)
public void UpdateEventDefinitions(EventDescriptor[] ed, UInt16[] events)
}
internal System.Runtime.Serialization.GenericInfo : object {
private string genericTypeName
private XmlQualifiedName stableName
private List`1<GenericInfo> paramGenericInfos
private List`1<int> nestedParamCounts
internal XmlQualifiedName StableName
internal IList`1<GenericInfo> Parameters
public bool ParametersFromBuiltInNamespaces
internal void .ctor(XmlQualifiedName stableName, string genericTypeName)
internal void Add(GenericInfo actualParamInfo)
internal void AddToLevel(int level, int count)
internal XmlQualifiedName GetExpandedStableName()
internal string GetStableNamespace()
internal XmlQualifiedName get_StableName()
internal IList`1<GenericInfo> get_Parameters()
public int GetParameterCount()
public IList`1<int> GetNestedParameterCounts()
public string GetParameterName(int paramIndex)
public string GetNamespaces()
public string GetGenericTypeName()
public bool get_ParametersFromBuiltInNamespaces()
}
internal System.Runtime.Serialization.GenericNameProvider : object {
private string genericTypeName
private Object[] genericParams
private IList`1<int> nestedParamCounts
public bool ParametersFromBuiltInNamespaces
internal void .ctor(Type type)
internal void .ctor(string genericTypeName, Object[] genericParams)
public int GetParameterCount()
public IList`1<int> GetNestedParameterCounts()
public string GetParameterName(int paramIndex)
public string GetNamespaces()
public string GetGenericTypeName()
public bool get_ParametersFromBuiltInNamespaces()
private XmlQualifiedName GetStableName(int i)
}
internal System.Runtime.Serialization.GenericParameterDataContract : DataContract {
private GenericParameterDataContractCriticalHelper helper
internal int ParameterPosition
internal bool IsBuiltInDataContract
internal void .ctor(Type type)
internal int get_ParameterPosition()
internal bool get_IsBuiltInDataContract()
internal DataContract BindGenericParameters(DataContract[] paramContracts, Dictionary`2<DataContract, DataContract> boundContracts)
}
internal System.Runtime.Serialization.Globals : object {
internal BindingFlags ScanAllMembers
private XmlQualifiedName idQualifiedName
private XmlQualifiedName refQualifiedName
private Type typeOfObject
private Type typeOfValueType
private Type typeOfArray
private Type typeOfString
private Type typeOfInt
private Type typeOfULong
private Type typeOfVoid
private Type typeOfByteArray
private Type typeOfTimeSpan
private Type typeOfGuid
private Type typeOfDateTimeOffset
private Type typeOfDateTimeOffsetAdapter
private Type typeOfUri
private Type typeOfTypeEnumerable
private Type typeOfStreamingContext
private Type typeOfISerializable
private Type typeOfIDeserializationCallback
private Type typeOfIObjectReference
private Type typeOfXmlFormatClassWriterDelegate
private Type typeOfXmlFormatCollectionWriterDelegate
private Type typeOfXmlFormatClassReaderDelegate
private Type typeOfXmlFormatCollectionReaderDelegate
private Type typeOfXmlFormatGetOnlyCollectionReaderDelegate
private Type typeOfKnownTypeAttribute
private Type typeOfDataContractAttribute
private Type typeOfContractNamespaceAttribute
private Type typeOfDataMemberAttribute
private Type typeOfEnumMemberAttribute
private Type typeOfCollectionDataContractAttribute
private Type typeOfOptionalFieldAttribute
private Type typeOfObjectArray
private Type typeOfOnSerializingAttribute
private Type typeOfOnSerializedAttribute
private Type typeOfOnDeserializingAttribute
private Type typeOfOnDeserializedAttribute
private Type typeOfFlagsAttribute
private Type typeOfSerializableAttribute
private Type typeOfNonSerializedAttribute
private Type typeOfSerializationInfo
private Type typeOfSerializationInfoEnumerator
private Type typeOfSerializationEntry
private Type typeOfIXmlSerializable
private Type typeOfXmlSchemaProviderAttribute
private Type typeOfXmlRootAttribute
private Type typeOfXmlQualifiedName
private Type typeOfXmlSchemaType
private Type typeOfXmlSerializableServices
private Type typeOfXmlNodeArray
private Type typeOfXmlSchemaSet
private Object[] emptyObjectArray
private Type[] emptyTypeArray
private Type typeOfIPropertyChange
private Type typeOfIExtensibleDataObject
private Type typeOfExtensionDataObject
private Type typeOfISerializableDataNode
private Type typeOfClassDataNode
private Type typeOfCollectionDataNode
private Type typeOfXmlDataNode
private Type typeOfNullable
private Type typeOfReflectionPointer
private Type typeOfIDictionaryGeneric
private Type typeOfIDictionary
private Type typeOfIListGeneric
private Type typeOfIList
private Type typeOfICollectionGeneric
private Type typeOfICollection
private Type typeOfIEnumerableGeneric
private Type typeOfIEnumerable
private Type typeOfIEnumeratorGeneric
private Type typeOfIEnumerator
private Type typeOfKeyValuePair
private Type typeOfKeyValue
private Type typeOfIDictionaryEnumerator
private Type typeOfDictionaryEnumerator
private Type typeOfGenericDictionaryEnumerator
private Type typeOfDictionaryGeneric
private Type typeOfHashtable
private Type typeOfListGeneric
private Type typeOfXmlElement
private Type typeOfDBNull
private Uri dataContractXsdBaseNamespaceUri
public bool DefaultIsRequired
public bool DefaultEmitDefaultValue
public int DefaultOrder
public bool DefaultIsReference
public string NewObjectId
public string SimpleSRSInternalsVisiblePattern
public string FullSRSInternalsVisiblePattern
public string NullObjectId
public string Space
public string OpenBracket
public string CloseBracket
public string Comma
public string XsiPrefix
public string XsdPrefix
public string SerPrefix
public string SerPrefixForSchema
public string ElementPrefix
public string DataContractXsdBaseNamespace
public string DataContractXmlNamespace
public string SchemaInstanceNamespace
public string SchemaNamespace
public string XsiNilLocalName
public string XsiTypeLocalName
public string TnsPrefix
public string OccursUnbounded
public string AnyTypeLocalName
public string StringLocalName
public string IntLocalName
public string True
public string False
public string ArrayPrefix
public string XmlnsNamespace
public string XmlnsPrefix
public string SchemaLocalName
public string CollectionsNamespace
public string DefaultClrNamespace
public string DefaultTypeName
public string DefaultGeneratedMember
public string DefaultFieldSuffix
public string DefaultPropertySuffix
public string DefaultMemberSuffix
public string NameProperty
public string NamespaceProperty
public string OrderProperty
public string IsReferenceProperty
public string IsRequiredProperty
public string EmitDefaultValueProperty
public string ClrNamespaceProperty
public string ItemNameProperty
public string KeyNameProperty
public string ValueNameProperty
public string SerializationInfoPropertyName
public string SerializationInfoFieldName
public string NodeArrayPropertyName
public string NodeArrayFieldName
public string ExportSchemaMethod
public string IsAnyProperty
public string ContextFieldName
public string GetObjectDataMethodName
public string GetEnumeratorMethodName
public string MoveNextMethodName
public string AddValueMethodName
public string CurrentPropertyName
public string ValueProperty
public string EnumeratorFieldName
public string SerializationEntryFieldName
public string ExtensionDataSetMethod
public string ExtensionDataSetExplicitMethod
public string ExtensionDataObjectPropertyName
public string ExtensionDataObjectFieldName
public string AddMethodName
public string ParseMethodName
public string GetCurrentMethodName
public string SerializationNamespace
public string ClrTypeLocalName
public string ClrAssemblyLocalName
public string IsValueTypeLocalName
public string EnumerationValueLocalName
public string SurrogateDataLocalName
public string GenericTypeLocalName
public string GenericParameterLocalName
public string GenericNameAttribute
public string GenericNamespaceAttribute
public string GenericParameterNestedLevelAttribute
public string IsDictionaryLocalName
public string ActualTypeLocalName
public string ActualTypeNameAttribute
public string ActualTypeNamespaceAttribute
public string DefaultValueLocalName
public string EmitDefaultValueAttribute
public string ISerializableFactoryTypeLocalName
public string IdLocalName
public string RefLocalName
public string ArraySizeLocalName
public string KeyLocalName
public string ValueLocalName
public string MscorlibAssemblyName
public string MscorlibAssemblySimpleName
public string MscorlibFileName
public string SerializationSchema
internal XmlQualifiedName IdQualifiedName
internal XmlQualifiedName RefQualifiedName
internal Type TypeOfObject
internal Type TypeOfValueType
internal Type TypeOfArray
internal Type TypeOfString
internal Type TypeOfInt
internal Type TypeOfULong
internal Type TypeOfVoid
internal Type TypeOfByteArray
internal Type TypeOfTimeSpan
internal Type TypeOfGuid
internal Type TypeOfDateTimeOffset
internal Type TypeOfDateTimeOffsetAdapter
internal Type TypeOfUri
internal Type TypeOfTypeEnumerable
internal Type TypeOfStreamingContext
internal Type TypeOfISerializable
internal Type TypeOfIDeserializationCallback
internal Type TypeOfIObjectReference
internal Type TypeOfXmlFormatClassWriterDelegate
internal Type TypeOfXmlFormatCollectionWriterDelegate
internal Type TypeOfXmlFormatClassReaderDelegate
internal Type TypeOfXmlFormatCollectionReaderDelegate
internal Type TypeOfXmlFormatGetOnlyCollectionReaderDelegate
internal Type TypeOfKnownTypeAttribute
internal Type TypeOfDataContractAttribute
internal Type TypeOfContractNamespaceAttribute
internal Type TypeOfDataMemberAttribute
internal Type TypeOfEnumMemberAttribute
internal Type TypeOfCollectionDataContractAttribute
internal Type TypeOfOptionalFieldAttribute
internal Type TypeOfObjectArray
internal Type TypeOfOnSerializingAttribute
internal Type TypeOfOnSerializedAttribute
internal Type TypeOfOnDeserializingAttribute
internal Type TypeOfOnDeserializedAttribute
internal Type TypeOfFlagsAttribute
internal Type TypeOfSerializableAttribute
internal Type TypeOfNonSerializedAttribute
internal Type TypeOfSerializationInfo
internal Type TypeOfSerializationInfoEnumerator
internal Type TypeOfSerializationEntry
internal Type TypeOfIXmlSerializable
internal Type TypeOfXmlSchemaProviderAttribute
internal Type TypeOfXmlRootAttribute
internal Type TypeOfXmlQualifiedName
internal Type TypeOfXmlSchemaType
internal Type TypeOfXmlSerializableServices
internal Type TypeOfXmlNodeArray
internal Type TypeOfXmlSchemaSet
internal Object[] EmptyObjectArray
internal Type[] EmptyTypeArray
internal Type TypeOfIPropertyChange
internal Type TypeOfIExtensibleDataObject
internal Type TypeOfExtensionDataObject
internal Type TypeOfISerializableDataNode
internal Type TypeOfClassDataNode
internal Type TypeOfCollectionDataNode
internal Type TypeOfXmlDataNode
internal Type TypeOfNullable
internal Type TypeOfReflectionPointer
internal Type TypeOfIDictionaryGeneric
internal Type TypeOfIDictionary
internal Type TypeOfIListGeneric
internal Type TypeOfIList
internal Type TypeOfICollectionGeneric
internal Type TypeOfICollection
internal Type TypeOfIEnumerableGeneric
internal Type TypeOfIEnumerable
internal Type TypeOfIEnumeratorGeneric
internal Type TypeOfIEnumerator
internal Type TypeOfKeyValuePair
internal Type TypeOfKeyValue
internal Type TypeOfIDictionaryEnumerator
internal Type TypeOfDictionaryEnumerator
internal Type TypeOfGenericDictionaryEnumerator
internal Type TypeOfDictionaryGeneric
internal Type TypeOfHashtable
internal Type TypeOfListGeneric
internal Type TypeOfXmlElement
internal Type TypeOfDBNull
internal Uri DataContractXsdBaseNamespaceUri
internal XmlQualifiedName get_IdQualifiedName()
internal XmlQualifiedName get_RefQualifiedName()
internal Type get_TypeOfObject()
internal Type get_TypeOfValueType()
internal Type get_TypeOfArray()
internal Type get_TypeOfString()
internal Type get_TypeOfInt()
internal Type get_TypeOfULong()
internal Type get_TypeOfVoid()
internal Type get_TypeOfByteArray()
internal Type get_TypeOfTimeSpan()
internal Type get_TypeOfGuid()
internal Type get_TypeOfDateTimeOffset()
internal Type get_TypeOfDateTimeOffsetAdapter()
internal Type get_TypeOfUri()
internal Type get_TypeOfTypeEnumerable()
internal Type get_TypeOfStreamingContext()
internal Type get_TypeOfISerializable()
internal Type get_TypeOfIDeserializationCallback()
internal Type get_TypeOfIObjectReference()
internal Type get_TypeOfXmlFormatClassWriterDelegate()
internal Type get_TypeOfXmlFormatCollectionWriterDelegate()
internal Type get_TypeOfXmlFormatClassReaderDelegate()
internal Type get_TypeOfXmlFormatCollectionReaderDelegate()
internal Type get_TypeOfXmlFormatGetOnlyCollectionReaderDelegate()
internal Type get_TypeOfKnownTypeAttribute()
internal Type get_TypeOfDataContractAttribute()
internal Type get_TypeOfContractNamespaceAttribute()
internal Type get_TypeOfDataMemberAttribute()
internal Type get_TypeOfEnumMemberAttribute()
internal Type get_TypeOfCollectionDataContractAttribute()
internal Type get_TypeOfOptionalFieldAttribute()
internal Type get_TypeOfObjectArray()
internal Type get_TypeOfOnSerializingAttribute()
internal Type get_TypeOfOnSerializedAttribute()
internal Type get_TypeOfOnDeserializingAttribute()
internal Type get_TypeOfOnDeserializedAttribute()
internal Type get_TypeOfFlagsAttribute()
internal Type get_TypeOfSerializableAttribute()
internal Type get_TypeOfNonSerializedAttribute()
internal Type get_TypeOfSerializationInfo()
internal Type get_TypeOfSerializationInfoEnumerator()
internal Type get_TypeOfSerializationEntry()
internal Type get_TypeOfIXmlSerializable()
internal Type get_TypeOfXmlSchemaProviderAttribute()
internal Type get_TypeOfXmlRootAttribute()
internal Type get_TypeOfXmlQualifiedName()
internal Type get_TypeOfXmlSchemaType()
internal Type get_TypeOfXmlSerializableServices()
internal Type get_TypeOfXmlNodeArray()
internal Type get_TypeOfXmlSchemaSet()
internal Object[] get_EmptyObjectArray()
internal Type[] get_EmptyTypeArray()
internal Type get_TypeOfIPropertyChange()
internal Type get_TypeOfIExtensibleDataObject()
internal Type get_TypeOfExtensionDataObject()
internal Type get_TypeOfISerializableDataNode()
internal Type get_TypeOfClassDataNode()
internal Type get_TypeOfCollectionDataNode()
internal Type get_TypeOfXmlDataNode()
internal Type get_TypeOfNullable()
internal Type get_TypeOfReflectionPointer()
internal Type get_TypeOfIDictionaryGeneric()
internal Type get_TypeOfIDictionary()
internal Type get_TypeOfIListGeneric()
internal Type get_TypeOfIList()
internal Type get_TypeOfICollectionGeneric()
internal Type get_TypeOfICollection()
internal Type get_TypeOfIEnumerableGeneric()
internal Type get_TypeOfIEnumerable()
internal Type get_TypeOfIEnumeratorGeneric()
internal Type get_TypeOfIEnumerator()
internal Type get_TypeOfKeyValuePair()
internal Type get_TypeOfKeyValue()
internal Type get_TypeOfIDictionaryEnumerator()
internal Type get_TypeOfDictionaryEnumerator()
internal Type get_TypeOfGenericDictionaryEnumerator()
internal Type get_TypeOfDictionaryGeneric()
internal Type get_TypeOfHashtable()
internal Type get_TypeOfListGeneric()
internal Type get_TypeOfXmlElement()
internal Type get_TypeOfDBNull()
internal Uri get_DataContractXsdBaseNamespaceUri()
}
internal System.Runtime.Serialization.GuidDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal void .ctor(XmlDictionaryString name, XmlDictionaryString ns)
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.HybridObjectCache : object {
private Dictionary`2<string, object> objectDictionary
private Dictionary`2<string, object> referencedObjectDictionary
internal void Add(string id, object obj)
internal void Remove(string id)
internal object GetObject(string id)
internal bool IsObjectReferenced(string id)
}
public System.Runtime.Serialization.IDataContractSurrogate {
public Type GetDataContractType(Type type)
public object GetObjectToSerialize(object obj, Type targetType)
public object GetDeserializedObject(object obj, Type targetType)
public object GetCustomDataToExport(MemberInfo memberInfo, Type dataContractType)
public object GetCustomDataToExport(Type clrType, Type dataContractType)
public void GetKnownCustomDataTypes(Collection`1<Type> customDataTypes)
public Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData)
public CodeTypeDeclaration ProcessImportedType(CodeTypeDeclaration typeDeclaration, CodeCompileUnit compileUnit)
}
internal System.Runtime.Serialization.IDataNode {
public Type DataType
public object Value
public string DataContractName
public string DataContractNamespace
public string ClrTypeName
public string ClrAssemblyName
public string Id
public bool PreservesReferences
public bool IsFinalValue
public Type get_DataType()
public object get_Value()
public void set_Value(object value)
public string get_DataContractName()
public void set_DataContractName(string value)
public string get_DataContractNamespace()
public void set_DataContractNamespace(string value)
public string get_ClrTypeName()
public void set_ClrTypeName(string value)
public string get_ClrAssemblyName()
public void set_ClrAssemblyName(string value)
public string get_Id()
public void set_Id(string value)
public bool get_PreservesReferences()
public void GetData(ElementData element)
public bool get_IsFinalValue()
public void set_IsFinalValue(bool value)
public void Clear()
}
public System.Runtime.Serialization.IExtensibleDataObject {
public ExtensionDataObject ExtensionData
public ExtensionDataObject get_ExtensionData()
public void set_ExtensionData(ExtensionDataObject value)
}
internal System.Runtime.Serialization.IGenericNameProvider {
public bool ParametersFromBuiltInNamespaces
public int GetParameterCount()
public IList`1<int> GetNestedParameterCounts()
public string GetParameterName(int paramIndex)
public string GetNamespaces()
public string GetGenericTypeName()
public bool get_ParametersFromBuiltInNamespaces()
}
public System.Runtime.Serialization.ImportOptions : object {
private bool generateSerializable
private bool generateInternal
private bool enableDataBinding
private CodeDomProvider codeProvider
private ICollection`1<Type> referencedTypes
private ICollection`1<Type> referencedCollectionTypes
private IDictionary`2<string, string> namespaces
private bool importXmlType
private IDataContractSurrogate dataContractSurrogate
public bool GenerateSerializable
public bool GenerateInternal
public bool EnableDataBinding
public CodeDomProvider CodeProvider
public ICollection`1<Type> ReferencedTypes
public ICollection`1<Type> ReferencedCollectionTypes
public IDictionary`2<string, string> Namespaces
public bool ImportXmlType
public IDataContractSurrogate DataContractSurrogate
public bool get_GenerateSerializable()
public void set_GenerateSerializable(bool value)
public bool get_GenerateInternal()
public void set_GenerateInternal(bool value)
public bool get_EnableDataBinding()
public void set_EnableDataBinding(bool value)
public CodeDomProvider get_CodeProvider()
public void set_CodeProvider(CodeDomProvider value)
public ICollection`1<Type> get_ReferencedTypes()
public ICollection`1<Type> get_ReferencedCollectionTypes()
public IDictionary`2<string, string> get_Namespaces()
public bool get_ImportXmlType()
public void set_ImportXmlType(bool value)
public IDataContractSurrogate get_DataContractSurrogate()
public void set_DataContractSurrogate(IDataContractSurrogate value)
}
internal System.Runtime.Serialization.IntDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.IntRef : object {
private int value
public int Value
public void .ctor(int value)
public int get_Value()
}
public System.Runtime.Serialization.InvalidDataContractException : Exception {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Runtime.Serialization.ISerializableDataMember : object {
private string name
private IDataNode value
internal string Name
internal IDataNode Value
internal string get_Name()
internal void set_Name(string value)
internal IDataNode get_Value()
internal void set_Value(IDataNode value)
}
internal System.Runtime.Serialization.ISerializableDataNode : DataNode`1<object> {
private string factoryTypeName
private string factoryTypeNamespace
private IList`1<ISerializableDataMember> members
internal string FactoryTypeName
internal string FactoryTypeNamespace
internal IList`1<ISerializableDataMember> Members
internal string get_FactoryTypeName()
internal void set_FactoryTypeName(string value)
internal string get_FactoryTypeNamespace()
internal void set_FactoryTypeNamespace(string value)
internal IList`1<ISerializableDataMember> get_Members()
internal void set_Members(IList`1<ISerializableDataMember> value)
public void GetData(ElementData element)
public void Clear()
}
public System.Runtime.Serialization.ISerializationSurrogateProvider {
public Type GetSurrogateType(Type type)
public object GetObjectToSerialize(object obj, Type targetType)
public object GetDeserializedObject(object obj, Type targetType)
}
internal System.Runtime.Serialization.Json.ByteArrayHelperWithString : ArrayHelper`2<string, byte> {
public ByteArrayHelperWithString Instance
internal void WriteArray(XmlWriter writer, Byte[] array, int offset, int count)
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, Byte[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, Byte[] array, int offset, int count)
private void ThrowConversionException(string value, string type)
private byte ToByte(int value)
}
public System.Runtime.Serialization.Json.DataContractJsonSerializer : XmlObjectSerializer {
internal IList`1<Type> knownTypeList
internal Dictionary`2<XmlQualifiedName, DataContract> knownDataContracts
private EmitTypeInformation emitTypeInformation
private IDataContractSurrogate dataContractSurrogate
private bool ignoreExtensionDataObject
private ReadOnlyCollection`1<Type> knownTypeCollection
private int maxItemsInObjectGraph
private DataContract rootContract
private XmlDictionaryString rootName
private bool rootNameRequiresMapping
private Type rootType
private bool serializeReadOnlyTypes
private DateTimeFormat dateTimeFormat
private bool useSimpleDictionaryFormat
public IDataContractSurrogate DataContractSurrogate
public bool IgnoreExtensionDataObject
public ReadOnlyCollection`1<Type> KnownTypes
internal Dictionary`2<XmlQualifiedName, DataContract> KnownDataContracts
public int MaxItemsInObjectGraph
internal bool AlwaysEmitTypeInformation
public EmitTypeInformation EmitTypeInformation
public bool SerializeReadOnlyTypes
public DateTimeFormat DateTimeFormat
public bool UseSimpleDictionaryFormat
private DataContract RootContract
private XmlDictionaryString RootName
public void .ctor(Type type)
public void .ctor(Type type, string rootName)
public void .ctor(Type type, XmlDictionaryString rootName)
public void .ctor(Type type, IEnumerable`1<Type> knownTypes)
public void .ctor(Type type, string rootName, IEnumerable`1<Type> knownTypes)
public void .ctor(Type type, XmlDictionaryString rootName, IEnumerable`1<Type> knownTypes)
public void .ctor(Type type, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, bool alwaysEmitTypeInformation)
public void .ctor(Type type, string rootName, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, bool alwaysEmitTypeInformation)
public void .ctor(Type type, XmlDictionaryString rootName, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, bool alwaysEmitTypeInformation)
public void .ctor(Type type, DataContractJsonSerializerSettings settings)
public IDataContractSurrogate get_DataContractSurrogate()
public bool get_IgnoreExtensionDataObject()
public ReadOnlyCollection`1<Type> get_KnownTypes()
internal Dictionary`2<XmlQualifiedName, DataContract> get_KnownDataContracts()
public int get_MaxItemsInObjectGraph()
internal bool get_AlwaysEmitTypeInformation()
public EmitTypeInformation get_EmitTypeInformation()
public bool get_SerializeReadOnlyTypes()
public DateTimeFormat get_DateTimeFormat()
public bool get_UseSimpleDictionaryFormat()
private DataContract get_RootContract()
private XmlDictionaryString get_RootName()
public bool IsStartObject(XmlReader reader)
public bool IsStartObject(XmlDictionaryReader reader)
public object ReadObject(Stream stream)
public object ReadObject(XmlReader reader)
public object ReadObject(XmlReader reader, bool verifyObjectName)
public object ReadObject(XmlDictionaryReader reader)
public object ReadObject(XmlDictionaryReader reader, bool verifyObjectName)
public void WriteEndObject(XmlWriter writer)
public void WriteEndObject(XmlDictionaryWriter writer)
public void WriteObject(Stream stream, object graph)
public void WriteObject(XmlWriter writer, object graph)
public void WriteObject(XmlDictionaryWriter writer, object graph)
public void WriteObjectContent(XmlWriter writer, object graph)
public void WriteObjectContent(XmlDictionaryWriter writer, object graph)
public void WriteStartObject(XmlWriter writer, object graph)
public void WriteStartObject(XmlDictionaryWriter writer, object graph)
internal bool CheckIfJsonNameRequiresMapping(string jsonName)
internal bool CheckIfJsonNameRequiresMapping(XmlDictionaryString jsonName)
internal bool CheckIfXmlNameRequiresMapping(string xmlName)
internal bool CheckIfXmlNameRequiresMapping(XmlDictionaryString xmlName)
internal string ConvertXmlNameToJsonName(string xmlName)
internal XmlDictionaryString ConvertXmlNameToJsonName(XmlDictionaryString xmlName)
internal bool IsJsonLocalName(XmlReaderDelegator reader, string elementName)
internal object ReadJsonValue(DataContract contract, XmlReaderDelegator reader, XmlObjectSerializerReadContextComplexJson context)
internal void WriteJsonNull(XmlWriterDelegator writer)
internal void WriteJsonValue(JsonDataContract contract, XmlWriterDelegator writer, object graph, XmlObjectSerializerWriteContextComplexJson context, RuntimeTypeHandle declaredTypeHandle)
internal Type GetDeserializeType()
internal Type GetSerializeType(object graph)
internal bool InternalIsStartObject(XmlReaderDelegator reader)
internal object InternalReadObject(XmlReaderDelegator xmlReader, bool verifyObjectName)
internal void InternalWriteEndObject(XmlWriterDelegator writer)
internal void InternalWriteObject(XmlWriterDelegator writer, object graph)
internal void InternalWriteObjectContent(XmlWriterDelegator writer, object graph)
internal void InternalWriteStartObject(XmlWriterDelegator writer, object graph)
private void AddCollectionItemTypeToKnownTypes(Type knownType)
private void Initialize(Type type, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, EmitTypeInformation emitTypeInformation, bool serializeReadOnlyTypes, DateTimeFormat dateTimeFormat, bool useSimpleDictionaryFormat)
private void Initialize(Type type, XmlDictionaryString rootName, IEnumerable`1<Type> knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, EmitTypeInformation emitTypeInformation, bool serializeReadOnlyTypes, DateTimeFormat dateTimeFormat, bool useSimpleDictionaryFormat)
internal void CheckIfTypeIsReference(DataContract dataContract)
internal DataContract GetDataContract(DataContract declaredTypeContract, Type declaredType, Type objectType)
}
public System.Runtime.Serialization.Json.DataContractJsonSerializerSettings : object {
private int maxItemsInObjectGraph
private string <RootName>k__BackingField
private IEnumerable`1<Type> <KnownTypes>k__BackingField
private bool <IgnoreExtensionDataObject>k__BackingField
private IDataContractSurrogate <DataContractSurrogate>k__BackingField
private EmitTypeInformation <EmitTypeInformation>k__BackingField
private DateTimeFormat <DateTimeFormat>k__BackingField
private bool <SerializeReadOnlyTypes>k__BackingField
private bool <UseSimpleDictionaryFormat>k__BackingField
public string RootName
public IEnumerable`1<Type> KnownTypes
public int MaxItemsInObjectGraph
public bool IgnoreExtensionDataObject
public IDataContractSurrogate DataContractSurrogate
public EmitTypeInformation EmitTypeInformation
public DateTimeFormat DateTimeFormat
public bool SerializeReadOnlyTypes
public bool UseSimpleDictionaryFormat
public string get_RootName()
public void set_RootName(string value)
public IEnumerable`1<Type> get_KnownTypes()
public void set_KnownTypes(IEnumerable`1<Type> value)
public int get_MaxItemsInObjectGraph()
public void set_MaxItemsInObjectGraph(int value)
public bool get_IgnoreExtensionDataObject()
public void set_IgnoreExtensionDataObject(bool value)
public IDataContractSurrogate get_DataContractSurrogate()
public void set_DataContractSurrogate(IDataContractSurrogate value)
public EmitTypeInformation get_EmitTypeInformation()
public void set_EmitTypeInformation(EmitTypeInformation value)
public DateTimeFormat get_DateTimeFormat()
public void set_DateTimeFormat(DateTimeFormat value)
public bool get_SerializeReadOnlyTypes()
public void set_SerializeReadOnlyTypes(bool value)
public bool get_UseSimpleDictionaryFormat()
public void set_UseSimpleDictionaryFormat(bool value)
}
public System.Runtime.Serialization.Json.IXmlJsonReaderInitializer {
public void SetInput(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public void SetInput(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
}
public System.Runtime.Serialization.Json.IXmlJsonWriterInitializer {
public void SetOutput(Stream stream, Encoding encoding, bool ownsStream)
}
internal System.Runtime.Serialization.Json.JsonByteArrayDataContract : JsonDataContract {
public void .ctor(ByteArrayDataContract traditionalByteArrayDataContract)
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
}
internal System.Runtime.Serialization.Json.JsonClassDataContract : JsonDataContract {
private JsonClassDataContractCriticalHelper helper
internal JsonFormatClassReaderDelegate JsonFormatReaderDelegate
internal JsonFormatClassWriterDelegate JsonFormatWriterDelegate
internal XmlDictionaryString[] MemberNames
internal string TypeName
private ClassDataContract TraditionalClassDataContract
public void .ctor(ClassDataContract traditionalDataContract)
internal JsonFormatClassReaderDelegate get_JsonFormatReaderDelegate()
internal JsonFormatClassWriterDelegate get_JsonFormatWriterDelegate()
internal XmlDictionaryString[] get_MemberNames()
internal string get_TypeName()
private ClassDataContract get_TraditionalClassDataContract()
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
public void WriteJsonValueCore(XmlWriterDelegator jsonWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, RuntimeTypeHandle declaredTypeHandle)
}
internal System.Runtime.Serialization.Json.JsonCollectionDataContract : JsonDataContract {
private JsonCollectionDataContractCriticalHelper helper
internal JsonFormatCollectionReaderDelegate JsonFormatReaderDelegate
internal JsonFormatGetOnlyCollectionReaderDelegate JsonFormatGetOnlyReaderDelegate
internal JsonFormatCollectionWriterDelegate JsonFormatWriterDelegate
private CollectionDataContract TraditionalCollectionDataContract
public void .ctor(CollectionDataContract traditionalDataContract)
internal JsonFormatCollectionReaderDelegate get_JsonFormatReaderDelegate()
internal JsonFormatGetOnlyCollectionReaderDelegate get_JsonFormatGetOnlyReaderDelegate()
internal JsonFormatCollectionWriterDelegate get_JsonFormatWriterDelegate()
private CollectionDataContract get_TraditionalCollectionDataContract()
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
public void WriteJsonValueCore(XmlWriterDelegator jsonWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, RuntimeTypeHandle declaredTypeHandle)
}
internal System.Runtime.Serialization.Json.JsonDataContract : object {
private JsonDataContractCriticalHelper helper
internal string TypeName
protected JsonDataContractCriticalHelper Helper
protected DataContract TraditionalDataContract
private Dictionary`2<XmlQualifiedName, DataContract> KnownDataContracts
protected void .ctor(DataContract traditionalDataContract)
protected void .ctor(JsonDataContractCriticalHelper helper)
internal string get_TypeName()
protected JsonDataContractCriticalHelper get_Helper()
protected DataContract get_TraditionalDataContract()
private Dictionary`2<XmlQualifiedName, DataContract> get_KnownDataContracts()
public JsonDataContract GetJsonDataContract(DataContract traditionalDataContract)
public object ReadJsonValue(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
public void WriteJsonValue(XmlWriterDelegator jsonWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, RuntimeTypeHandle declaredTypeHandle)
public void WriteJsonValueCore(XmlWriterDelegator jsonWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, RuntimeTypeHandle declaredTypeHandle)
protected object HandleReadValue(object obj, XmlObjectSerializerReadContext context)
protected bool TryReadNullAtTopLevel(XmlReaderDelegator reader)
protected void PopKnownDataContracts(XmlObjectSerializerContext context)
protected void PushKnownDataContracts(XmlObjectSerializerContext context)
}
internal System.Runtime.Serialization.Json.JsonEncodingStreamWrapper : Stream {
private UnicodeEncoding SafeBEUTF16
private UnicodeEncoding SafeUTF16
private UTF8Encoding SafeUTF8
private UnicodeEncoding ValidatingBEUTF16
private UnicodeEncoding ValidatingUTF16
private UTF8Encoding ValidatingUTF8
private int BufferLength
private Byte[] byteBuffer
private int byteCount
private int byteOffset
private Byte[] bytes
private Char[] chars
private Decoder dec
private Encoder enc
private Encoding encoding
private SupportedEncoding encodingCode
private bool isReading
private Stream stream
public bool CanRead
public bool CanSeek
public bool CanTimeout
public bool CanWrite
public long Length
public long Position
public int ReadTimeout
public int WriteTimeout
public void .ctor(Stream stream, Encoding encoding, bool isReader)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanTimeout()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public int get_ReadTimeout()
public void set_ReadTimeout(int value)
public int get_WriteTimeout()
public void set_WriteTimeout(int value)
public ArraySegment`1<byte> ProcessBuffer(Byte[] buffer, int offset, int count, Encoding encoding)
public void Close()
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
public void WriteByte(byte b)
private Encoding GetEncoding(SupportedEncoding e)
private string GetEncodingName(SupportedEncoding enc)
private SupportedEncoding GetSupportedEncoding(Encoding encoding)
private SupportedEncoding ReadEncoding(byte b1, byte b2)
private void ThrowExpectedEncodingMismatch(SupportedEncoding expEnc, SupportedEncoding actualEnc)
private void CleanupCharBreak()
private void EnsureBuffers()
private void EnsureByteBuffer()
private void FillBuffer(int count)
private void InitForReading(Stream inputStream, Encoding expectedEncoding)
private void InitForWriting(Stream outputStream, Encoding writeEncoding)
private SupportedEncoding ReadEncoding()
}
internal System.Runtime.Serialization.Json.JsonEnumDataContract : JsonDataContract {
private JsonEnumDataContractCriticalHelper helper
public bool IsULong
public void .ctor(EnumDataContract traditionalDataContract)
public bool get_IsULong()
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
public void WriteJsonValueCore(XmlWriterDelegator jsonWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, RuntimeTypeHandle declaredTypeHandle)
}
internal System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContextComplexJson context, XmlDictionaryString emptyDictionaryString, XmlDictionaryString[] memberNames)
public IAsyncResult BeginInvoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContextComplexJson context, XmlDictionaryString emptyDictionaryString, XmlDictionaryString[] memberNames, AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, ClassDataContract dataContract, XmlDictionaryString[] memberNames)
public IAsyncResult BeginInvoke(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, ClassDataContract dataContract, XmlDictionaryString[] memberNames, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContextComplexJson context, XmlDictionaryString emptyDictionaryString, XmlDictionaryString itemName, CollectionDataContract collectionContract)
public IAsyncResult BeginInvoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContextComplexJson context, XmlDictionaryString emptyDictionaryString, XmlDictionaryString itemName, CollectionDataContract collectionContract, AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, CollectionDataContract dataContract)
public IAsyncResult BeginInvoke(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, CollectionDataContract dataContract, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContextComplexJson context, XmlDictionaryString emptyDictionaryString, XmlDictionaryString itemName, CollectionDataContract collectionContract)
public IAsyncResult BeginInvoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContextComplexJson context, XmlDictionaryString emptyDictionaryString, XmlDictionaryString itemName, CollectionDataContract collectionContract, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.Json.JsonFormatReaderGenerator : object {
private CriticalHelper helper
public JsonFormatClassReaderDelegate GenerateClassReader(ClassDataContract classContract)
public JsonFormatCollectionReaderDelegate GenerateCollectionReader(CollectionDataContract collectionContract)
public JsonFormatGetOnlyCollectionReaderDelegate GenerateGetOnlyCollectionReader(CollectionDataContract collectionContract)
}
internal System.Runtime.Serialization.Json.JsonFormatReaderInterpreter : object {
private bool is_get_only_collection
private ClassDataContract classContract
private CollectionDataContract collectionContract
private object objectLocal
private Type objectType
private XmlReaderDelegator xmlReader
private XmlObjectSerializerReadContextComplexJson context
private XmlDictionaryString[] memberNames
private XmlDictionaryString emptyDictionaryString
private XmlDictionaryString itemName
private XmlDictionaryString itemNamespace
public void .ctor(ClassDataContract classContract)
public void .ctor(CollectionDataContract collectionContract, bool isGetOnly)
public object ReadFromJson(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContextComplexJson context, XmlDictionaryString emptyDictionaryString, XmlDictionaryString[] memberNames)
public object ReadCollectionFromJson(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContextComplexJson context, XmlDictionaryString emptyDictionaryString, XmlDictionaryString itemName, CollectionDataContract collectionContract)
public void ReadGetOnlyCollectionFromJson(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContextComplexJson context, XmlDictionaryString emptyDictionaryString, XmlDictionaryString itemName, CollectionDataContract collectionContract)
private void CreateObject(ClassDataContract classContract)
private void InvokeOnDeserializing(ClassDataContract classContract)
private void InvokeOnDeserialized(ClassDataContract classContract)
private bool HasFactoryMethod(ClassDataContract classContract)
private bool InvokeFactoryMethod(ClassDataContract classContract)
private void ReadISerializable(ClassDataContract classContract)
private void ReadClass(ClassDataContract classContract)
private void ReadMembers(ClassDataContract classContract, ExtensionDataObject extensionData)
private int ReadMembers(int index, ClassDataContract classContract, BitFlagsGenerator expectedElements, Int32& memberIndex)
private bool CheckRequiredElements(BitFlagsGenerator expectedElements, Byte[] requiredElements)
private int SetRequiredElements(ClassDataContract contract, Byte[] requiredElements)
private void SetExpectedElements(BitFlagsGenerator expectedElements, int startIndex)
private void ResetExpectedElements(BitFlagsGenerator expectedElements, int index)
private object ReadValue(Type type, string name)
private object InternalDeserialize(Type type, string name)
private object WrapNullableObject(Type innerType, object innerValue, Type outerType, int nullables)
private void ReadCollection(CollectionDataContract collectionContract)
private void ReadSimpleDictionary(CollectionDataContract collectionContract, Type keyValueType)
private void ReadGetOnlyCollection(CollectionDataContract collectionContract)
private bool TryReadPrimitiveArray(Type itemType, Boolean& readResult)
private object ReadCollectionItem(CollectionDataContract collectionContract, Type itemType)
private void StoreCollectionValue(object collection, Type valueType, object value, CollectionDataContract collectionContract)
private void HandleUnexpectedItemInCollection(Int32& iterator)
private bool IsStartElement(XmlDictionaryString name, XmlDictionaryString ns)
private bool IsStartElement()
private bool IsEndElement()
private void ThrowUnexpectedStateException(XmlNodeType expectedState)
private void ThrowSerializationException(string msg, Object[] values)
}
internal System.Runtime.Serialization.Json.JsonFormatWriterGenerator : object {
private CriticalHelper helper
internal JsonFormatClassWriterDelegate GenerateClassWriter(ClassDataContract classContract)
internal JsonFormatCollectionWriterDelegate GenerateCollectionWriter(CollectionDataContract collectionContract)
}
internal System.Runtime.Serialization.Json.JsonFormatWriterInterpreter : object {
private ClassDataContract classContract
private CollectionDataContract collectionContract
private XmlWriterDelegator writer
private object obj
private XmlObjectSerializerWriteContextComplexJson context
private DataContract dataContract
private object objLocal
private XmlDictionaryString[] memberNames
private int typeIndex
private int childElementIndex
private ClassDataContract classDataContract
private CollectionDataContract collectionDataContract
public void .ctor(ClassDataContract classContract)
public void .ctor(CollectionDataContract collectionContract)
private ClassDataContract get_classDataContract()
private CollectionDataContract get_collectionDataContract()
public void WriteToJson(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, ClassDataContract dataContract, XmlDictionaryString[] memberNames)
public void WriteCollectionToJson(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, CollectionDataContract dataContract)
private void InitArgs(Type objType)
private void InvokeOnSerializing(ClassDataContract classContract, object objSerialized, XmlObjectSerializerWriteContext context)
private void InvokeOnSerialized(ClassDataContract classContract, object objSerialized, XmlObjectSerializerWriteContext context)
private void WriteClass(ClassDataContract classContract)
private void WriteCollection(CollectionDataContract collectionContract)
private int WriteMembers(ClassDataContract classContract, ExtensionDataObject extensionData, ClassDataContract derivedMostClassContract)
internal bool IsDefaultValue(Type type, object value)
internal object GetDefaultValue(Type type)
private void WriteStartElement(object nameLocal, int nameIndex)
private void WriteEndElement()
private void WriteArrayAttribute()
private void WriteObjectAttribute()
private void WriteValue(Type memberType, object memberValue)
private void InternalSerialize(MethodInfo methodInfo, Func`1<object> memberValue, Type memberType, bool writeXsiType)
private object UnwrapNullableObject(Func`1<object> memberValue, Type& memberType, Boolean& isNull)
private bool TryWritePrimitive(Type type, Func`1<object> value, MemberInfo memberInfo, Nullable`1<int> arrayItemIndex, XmlDictionaryString name, int nameIndex)
private bool TryWritePrimitiveArray(Type type, Type itemType, Func`1<object> value, XmlDictionaryString itemName)
private object LoadMemberValue(DataMember member)
private object <WriteCollection>b__22_0()
}
internal System.Runtime.Serialization.Json.JsonGlobals : object {
public int DataContractXsdBaseNamespaceLength
public XmlDictionaryString dDictionaryString
public Char[] floatingPointCharacters
public XmlDictionaryString itemDictionaryString
public XmlDictionaryString rootDictionaryString
public long unixEpochTicks
public string applicationJsonMediaType
public string arrayString
public string booleanString
public string CacheControlString
public byte CollectionByte
public char CollectionChar
public string DateTimeEndGuardReader
public string DateTimeEndGuardWriter
public string DateTimeStartGuardReader
public string DateTimeStartGuardWriter
public string dString
public byte EndCollectionByte
public char EndCollectionChar
public byte EndObjectByte
public char EndObjectChar
public string ExpiresString
public string IfModifiedSinceString
public string itemString
public string jsonerrorString
public string KeyString
public string LastModifiedString
public int maxScopeSize
public byte MemberSeparatorByte
public char MemberSeparatorChar
public byte NameValueSeparatorByte
public char NameValueSeparatorChar
public string NameValueSeparatorString
public string nullString
public string numberString
public byte ObjectByte
public char ObjectChar
public string objectString
public string publicString
public byte QuoteByte
public char QuoteChar
public string rootString
public string serverTypeString
public string stringString
public string textJsonMediaType
public string trueString
public string typeString
public string ValueString
public char WhitespaceChar
public string xmlnsPrefix
public string xmlPrefix
}
internal System.Runtime.Serialization.Json.JsonNodeType : Enum {
public int value__
public JsonNodeType None
public JsonNodeType Object
public JsonNodeType Element
public JsonNodeType EndElement
public JsonNodeType QuotedText
public JsonNodeType StandaloneText
public JsonNodeType Collection
}
internal System.Runtime.Serialization.Json.JsonObjectDataContract : JsonDataContract {
public void .ctor(DataContract traditionalDataContract)
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
public void WriteJsonValueCore(XmlWriterDelegator jsonWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, RuntimeTypeHandle declaredTypeHandle)
internal object ParseJsonNumber(string value, TypeCode& objectTypeCode)
private object ParseJsonNumber(string value)
}
internal System.Runtime.Serialization.Json.JsonQNameDataContract : JsonDataContract {
public void .ctor(QNameDataContract traditionalQNameDataContract)
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
}
internal System.Runtime.Serialization.Json.JsonReaderDelegator : XmlReaderDelegator {
private DateTimeFormat dateTimeFormat
private DateTimeArrayJsonHelperWithString dateTimeArrayHelper
internal XmlDictionaryReaderQuotas ReaderQuotas
private DateTimeArrayJsonHelperWithString DateTimeArrayHelper
public void .ctor(XmlReader reader)
public void .ctor(XmlReader reader, DateTimeFormat dateTimeFormat)
internal XmlDictionaryReaderQuotas get_ReaderQuotas()
private DateTimeArrayJsonHelperWithString get_DateTimeArrayHelper()
internal XmlQualifiedName ParseQualifiedName(string qname)
internal char ReadContentAsChar()
internal XmlQualifiedName ReadContentAsQName()
internal char ReadElementContentAsChar()
internal Byte[] ReadContentAsBase64()
internal Byte[] ReadElementContentAsBase64()
internal DateTime ReadContentAsDateTime()
internal DateTime ParseJsonDate(string originalDateTimeValue, DateTimeFormat dateTimeFormat)
internal DateTime ParseJsonDateInDefaultFormat(string originalDateTimeValue)
internal DateTime ReadElementContentAsDateTime()
internal bool TryReadJsonDateTimeArray(XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, int arrayLength, DateTime[]& array)
internal ulong ReadContentAsUnsignedLong()
internal ulong ReadElementContentAsUnsignedLong()
}
public System.Runtime.Serialization.Json.JsonReaderWriterFactory : object {
private string DefaultIndentChars
public XmlDictionaryReader CreateJsonReader(Stream stream, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateJsonReader(Byte[] buffer, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateJsonReader(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateJsonReader(Byte[] buffer, int offset, int count, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateJsonReader(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryWriter CreateJsonWriter(Stream stream)
public XmlDictionaryWriter CreateJsonWriter(Stream stream, Encoding encoding)
public XmlDictionaryWriter CreateJsonWriter(Stream stream, Encoding encoding, bool ownsStream)
public XmlDictionaryWriter CreateJsonWriter(Stream stream, Encoding encoding, bool ownsStream, bool indent)
public XmlDictionaryWriter CreateJsonWriter(Stream stream, Encoding encoding, bool ownsStream, bool indent, string indentChars)
}
internal System.Runtime.Serialization.Json.JsonStringDataContract : JsonDataContract {
public void .ctor(StringDataContract traditionalStringDataContract)
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
}
internal System.Runtime.Serialization.Json.JsonUriDataContract : JsonDataContract {
public void .ctor(UriDataContract traditionalUriDataContract)
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
}
internal System.Runtime.Serialization.Json.JsonWriterDelegator : XmlWriterDelegator {
private DateTimeFormat dateTimeFormat
public void .ctor(XmlWriter writer)
public void .ctor(XmlWriter writer, DateTimeFormat dateTimeFormat)
internal void WriteChar(char value)
internal void WriteBase64(Byte[] bytes)
internal void WriteQName(XmlQualifiedName value)
internal void WriteUnsignedLong(ulong value)
internal void WriteDecimal(decimal value)
internal void WriteDouble(double value)
internal void WriteFloat(float value)
internal void WriteLong(long value)
internal void WriteSignedByte(sbyte value)
internal void WriteUnsignedInt(UInt32 value)
internal void WriteUnsignedShort(ushort value)
internal void WriteUnsignedByte(byte value)
internal void WriteShort(short value)
internal void WriteBoolean(bool value)
internal void WriteInt(int value)
internal void WriteJsonBooleanArray(Boolean[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
internal void WriteJsonDateTimeArray(DateTime[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
internal void WriteJsonDecimalArray(Decimal[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
internal void WriteJsonInt32Array(Int32[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
internal void WriteJsonInt64Array(Int64[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
internal void WriteDateTime(DateTime value)
private void WriteDateTimeInDefaultFormat(DateTime value)
internal void WriteJsonSingleArray(Single[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
internal void WriteJsonDoubleArray(Double[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
internal void WriteStartElement(string prefix, string localName, string ns)
}
internal System.Runtime.Serialization.Json.JsonXmlDataContract : JsonDataContract {
public void .ctor(XmlDataContract traditionalXmlDataContract)
public object ReadJsonValueCore(XmlReaderDelegator jsonReader, XmlObjectSerializerReadContextComplexJson context)
public void WriteJsonValueCore(XmlWriterDelegator jsonWriter, object obj, XmlObjectSerializerWriteContextComplexJson context, RuntimeTypeHandle declaredTypeHandle)
private List`1<Type> GetKnownTypesFromContext(XmlObjectSerializerContext context, IList`1<Type> serializerKnownTypeList)
}
internal System.Runtime.Serialization.Json.XmlJsonReader : XmlBaseReader {
private int MaxTextChunk
private Byte[] charType
private bool buffered
private Byte[] charactersToSkipOnNextRead
private JsonComplexTextMode complexTextMode
private bool expectingFirstElementInNonPrimitiveChild
private int maxBytesPerRead
private OnXmlDictionaryReaderClose onReaderClose
private bool readServerTypeElement
private int scopeDepth
private JsonNodeType[] scopes
public bool CanCanonicalize
public string Value
private bool IsAttributeValue
private bool IsReadingCollection
private bool IsReadingComplexText
public bool get_CanCanonicalize()
public string get_Value()
private bool get_IsAttributeValue()
private bool get_IsReadingCollection()
private bool get_IsReadingComplexText()
public void Close()
public void EndCanonicalization()
public string GetAttribute(int index)
public string GetAttribute(string localName, string namespaceUri)
public string GetAttribute(string name)
public string GetAttribute(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public bool Read()
public decimal ReadContentAsDecimal()
public int ReadContentAsInt()
public long ReadContentAsLong()
public int ReadValueAsBase64(Byte[] buffer, int offset, int count)
public int ReadValueChunk(Char[] chars, int offset, int count)
public void SetInput(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public void SetInput(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public void StartCanonicalization(Stream stream, bool includeComments, String[] inclusivePrefixes)
internal void CheckArray(Array array, int offset, int count)
protected XmlSigningNodeWriter CreateSigningNodeWriter()
private int BreakText(Byte[] buffer, int offset, int length)
private int ComputeNumericalTextLength(Byte[] buffer, int offset, int offsetMax)
private int ComputeQuotedTextLengthUntilEndQuote(Byte[] buffer, int offset, int offsetMax, Boolean& escaped)
private bool IsWhitespace(byte ch)
private char ParseChar(string value, NumberStyles style)
private int ParseInt(string value, NumberStyles style)
private void BufferElement()
private void EnterJsonScope(JsonNodeType currentNodeType)
private JsonNodeType ExitJsonScope()
private void MoveToEndElement()
private void MoveToInitial(XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
private void ParseAndSetLocalName()
private void ParseStartElement()
private void ReadAttributes()
private void ReadEscapedCharacter(bool moveToText)
private void ReadNonExistentElementName(StringHandleConstStringType elementName)
private int ReadNonFFFE()
private void ReadNumericalText()
private void ReadQuotedText(bool moveToText)
private void ReadServerTypeAttribute(bool consumedObjectChar)
private void ResetState()
private void SetJsonNameWithMapping(XmlElementNode elementNode)
private void SkipExpectedByteInBufferReader(byte characterToSkip)
private void SkipWhitespaceInBufferReader()
private bool TryGetByte(Byte& ch)
private string UnescapeJsonString(string val)
}
internal System.Runtime.Serialization.Json.XmlJsonWriter : XmlDictionaryWriter {
private char BACK_SLASH
private char FORWARD_SLASH
private char HIGH_SURROGATE_START
private char LOW_SURROGATE_END
private char MAX_CHAR
private char WHITESPACE
private char CARRIAGE_RETURN
private char NEWLINE
private char BACKSPACE
private char FORM_FEED
private char HORIZONTAL_TABULATION
private string xmlNamespace
private string xmlnsNamespace
private BinHexEncoding binHexEncoding
private Char[] CharacterAbbrevs
private string attributeText
private JsonDataType dataType
private int depth
private bool endElementBuffer
private bool isWritingDataTypeAttribute
private bool isWritingServerTypeAttribute
private bool isWritingXmlnsAttribute
private bool isWritingXmlnsAttributeDefaultNs
private NameState nameState
private JsonNodeType nodeType
private JsonNodeWriter nodeWriter
private JsonNodeType[] scopes
private string serverTypeValue
private WriteState writeState
private bool wroteServerTypeAttribute
private bool indent
private string indentChars
private int indentLevel
public XmlWriterSettings Settings
public WriteState WriteState
public string XmlLang
public XmlSpace XmlSpace
private BinHexEncoding BinHexEncoding
private bool HasOpenAttribute
private bool IsClosed
private bool IsWritingCollection
private bool IsWritingNameAttribute
private bool IsWritingNameWithMapping
private bool WrittenNameWithMapping
public void .ctor(bool indent, string indentChars)
private Char[] GetCharacterAbbrevs()
private bool TryEscapeControlCharacter(char ch, Char& abbrev)
public XmlWriterSettings get_Settings()
public WriteState get_WriteState()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
private BinHexEncoding get_BinHexEncoding()
private bool get_HasOpenAttribute()
private bool get_IsClosed()
private bool get_IsWritingCollection()
private bool get_IsWritingNameAttribute()
private bool get_IsWritingNameWithMapping()
private bool get_WrittenNameWithMapping()
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void SetOutput(Stream stream, Encoding encoding, bool ownsStream)
public void WriteArray(string prefix, string localName, string namespaceUri, Boolean[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Int16[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Int32[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Int64[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Single[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Double[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Decimal[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, DateTime[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Guid[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, TimeSpan[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int count)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void WriteCData(string text)
public void WriteCharEntity(char ch)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteComment(string text)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteEndAttribute()
public void WriteEndDocument()
public void WriteEndElement()
public void WriteEntityRef(string name)
public void WriteFullEndElement()
public void WriteProcessingInstruction(string name, string text)
public void WriteQualifiedName(string localName, string ns)
public void WriteRaw(string data)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteStartDocument(bool standalone)
public void WriteStartDocument()
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteValue(bool value)
public void WriteValue(decimal value)
public void WriteValue(double value)
public void WriteValue(float value)
public void WriteValue(int value)
public void WriteValue(long value)
public void WriteValue(Guid value)
public void WriteValue(DateTime value)
public void WriteValue(string value)
public void WriteValue(TimeSpan value)
public void WriteValue(UniqueId value)
public void WriteValue(object value)
public void WriteWhitespace(string ws)
public void WriteXmlAttribute(string localName, string value)
public void WriteXmlAttribute(XmlDictionaryString localName, XmlDictionaryString value)
public void WriteXmlnsAttribute(string prefix, string namespaceUri)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString namespaceUri)
internal bool CharacterNeedsEscaping(char ch)
private void ThrowClosed()
private void CheckText(JsonNodeType nextNodeType)
private void EnterScope(JsonNodeType currentNodeType)
private JsonNodeType ExitScope()
private void InitializeWriter()
private bool IsUnicodeNewlineCharacter(char c)
private void StartText()
private void ThrowIfServerTypeWritten(string dataTypeSpecified)
private void ThrowInvalidAttributeContent()
private bool TrySetWritingNameWithMapping(string localName, string ns)
private void WriteDataTypeServerType()
private void WriteEscapedJsonString(string str)
private void WriteIndent()
private void WriteNewLine()
private void WriteJsonElementName(string localName)
private void WriteJsonQuote()
private void WritePrimitiveValue(object value)
private void WriteServerTypeAttribute()
private void WriteValue(ulong value)
private void WriteValue(Array array)
}
internal System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson : XmlObjectSerializerReadContextComplex {
private string extensionDataValueType
private DateTimeFormat dateTimeFormat
private bool useSimpleDictionaryFormat
internal IList`1<Type> SerializerKnownTypeList
public bool UseSimpleDictionaryFormat
public void .ctor(DataContractJsonSerializer serializer, DataContract rootTypeDataContract)
internal IList`1<Type> get_SerializerKnownTypeList()
public bool get_UseSimpleDictionaryFormat()
protected void StartReadExtensionDataValue(XmlReaderDelegator xmlReader)
protected IDataNode ReadPrimitiveExtensionDataValue(XmlReaderDelegator xmlReader, string dataContractName, string dataContractNamespace)
private IDataNode ReadNumericalPrimitiveExtensionDataValue(XmlReaderDelegator xmlReader)
internal XmlObjectSerializerReadContextComplexJson CreateContext(DataContractJsonSerializer serializer, DataContract rootTypeDataContract)
internal int GetArraySize()
protected object ReadDataContractValue(DataContract dataContract, XmlReaderDelegator reader)
internal void ReadAttributes(XmlReaderDelegator xmlReader)
public int GetJsonMemberIndex(XmlReaderDelegator xmlReader, XmlDictionaryString[] memberNames, int memberIndex, ExtensionDataObject extensionData)
internal bool TryGetJsonLocalName(XmlReaderDelegator xmlReader, String& name)
public string GetJsonMemberName(XmlReaderDelegator xmlReader)
public void ThrowMissingRequiredMembers(object obj, XmlDictionaryString[] memberNames, Byte[] expectedElements, Byte[] requiredElements)
public void ThrowDuplicateMemberException(object obj, XmlDictionaryString[] memberNames, int memberIndex)
private bool IsBitSet(Byte[] bytes, int bitIndex)
protected bool IsReadingCollectionExtensionData(XmlReaderDelegator xmlReader)
protected bool IsReadingClassExtensionData(XmlReaderDelegator xmlReader)
protected XmlReaderDelegator CreateReaderDelegatorForReader(XmlReader xmlReader)
internal DataContract GetDataContract(RuntimeTypeHandle typeHandle, Type type)
internal DataContract GetDataContractSkipValidation(int typeId, RuntimeTypeHandle typeHandle, Type type)
internal DataContract GetDataContract(int id, RuntimeTypeHandle typeHandle)
protected DataContract ResolveDataContractFromRootDataContract(XmlQualifiedName typeQName)
}
internal System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson : XmlObjectSerializerWriteContextComplex {
private EmitTypeInformation emitXsiType
private bool perCallXsiTypeAlreadyEmitted
private bool useSimpleDictionaryFormat
internal IList`1<Type> SerializerKnownTypeList
public bool UseSimpleDictionaryFormat
internal XmlDictionaryString CollectionItemName
public void .ctor(DataContractJsonSerializer serializer, DataContract rootTypeDataContract)
internal XmlObjectSerializerWriteContextComplexJson CreateContext(DataContractJsonSerializer serializer, DataContract rootTypeDataContract)
internal IList`1<Type> get_SerializerKnownTypeList()
public bool get_UseSimpleDictionaryFormat()
internal bool WriteClrTypeInfo(XmlWriterDelegator xmlWriter, Type dataContractType, string clrTypeName, string clrAssemblyName)
internal bool WriteClrTypeInfo(XmlWriterDelegator xmlWriter, DataContract dataContract)
internal void WriteArraySize(XmlWriterDelegator xmlWriter, int size)
protected void WriteTypeInfo(XmlWriterDelegator writer, string dataContractName, string dataContractNamespace)
internal string TruncateDefaultDataContractNamespace(string dataContractNamespace)
private bool RequiresJsonTypeInfo(DataContract contract)
private void WriteTypeInfo(XmlWriterDelegator writer, string typeInformation)
protected bool WriteTypeInfo(XmlWriterDelegator writer, DataContract contract, DataContract declaredContract)
internal void WriteJsonISerializable(XmlWriterDelegator xmlWriter, ISerializable obj)
internal DataContract GetRevisedItemContract(DataContract oldItemContract)
protected void WriteDataContractValue(DataContract dataContract, XmlWriterDelegator xmlWriter, object obj, RuntimeTypeHandle declaredTypeHandle)
protected void WriteNull(XmlWriterDelegator xmlWriter)
internal XmlDictionaryString get_CollectionItemName()
internal void WriteJsonNameWithMapping(XmlWriterDelegator xmlWriter, XmlDictionaryString[] memberNames, int index)
internal void WriteExtensionDataTypeInfo(XmlWriterDelegator xmlWriter, IDataNode dataNode)
protected void SerializeWithXsiType(XmlWriterDelegator xmlWriter, object obj, RuntimeTypeHandle objectTypeHandle, Type objectType, int declaredTypeID, RuntimeTypeHandle declaredTypeHandle, Type declaredType)
private void VerifyObjectCompatibilityWithInterface(DataContract contract, object graph, Type declaredType)
private void HandleCollectionAssignedToObject(Type declaredType, DataContract& dataContract, Object& obj, Boolean& verifyKnownType)
internal void SerializeWithXsiTypeAtTopLevel(DataContract dataContract, XmlWriterDelegator xmlWriter, object obj, RuntimeTypeHandle originalDeclaredTypeHandle, Type graphType)
private void VerifyType(DataContract dataContract, Type declaredType)
internal DataContract GetDataContract(RuntimeTypeHandle typeHandle, Type type)
internal DataContract GetDataContractSkipValidation(int typeId, RuntimeTypeHandle typeHandle, Type type)
internal DataContract GetDataContract(int id, RuntimeTypeHandle typeHandle)
internal DataContract ResolveJsonDataContractFromRootDataContract(XmlObjectSerializerContext context, XmlQualifiedName typeQName, DataContract rootTypeDataContract)
protected DataContract ResolveDataContractFromRootDataContract(XmlQualifiedName typeQName)
}
internal System.Runtime.Serialization.JsonFormatGeneratorStatics : object {
private MethodInfo boxPointer
private PropertyInfo collectionItemNameProperty
private ConstructorInfo extensionDataObjectCtor
private PropertyInfo extensionDataProperty
private MethodInfo getItemContractMethod
private MethodInfo getJsonDataContractMethod
private MethodInfo getJsonMemberIndexMethod
private MethodInfo getRevisedItemContractMethod
private MethodInfo getUninitializedObjectMethod
private MethodInfo ienumeratorGetCurrentMethod
private MethodInfo ienumeratorMoveNextMethod
private MethodInfo isStartElementMethod0
private MethodInfo isStartElementMethod2
private PropertyInfo localNameProperty
private PropertyInfo namespaceProperty
private MethodInfo moveToContentMethod
private PropertyInfo nodeTypeProperty
private MethodInfo onDeserializationMethod
private MethodInfo readJsonValueMethod
private ConstructorInfo serializationExceptionCtor
private Type[] serInfoCtorArgs
private MethodInfo throwDuplicateMemberExceptionMethod
private MethodInfo throwMissingRequiredMembersMethod
private PropertyInfo typeHandleProperty
private MethodInfo unboxPointer
private PropertyInfo useSimpleDictionaryFormatReadProperty
private PropertyInfo useSimpleDictionaryFormatWriteProperty
private MethodInfo writeAttributeStringMethod
private MethodInfo writeEndElementMethod
private MethodInfo writeJsonISerializableMethod
private MethodInfo writeJsonNameWithMappingMethod
private MethodInfo writeJsonValueMethod
private MethodInfo writeStartElementMethod
private MethodInfo writeStartElementStringMethod
private MethodInfo parseEnumMethod
private MethodInfo getJsonMemberNameMethod
public MethodInfo BoxPointer
public PropertyInfo CollectionItemNameProperty
public ConstructorInfo ExtensionDataObjectCtor
public PropertyInfo ExtensionDataProperty
public MethodInfo GetCurrentMethod
public MethodInfo GetItemContractMethod
public MethodInfo GetJsonDataContractMethod
public MethodInfo GetJsonMemberIndexMethod
public MethodInfo GetRevisedItemContractMethod
public MethodInfo GetUninitializedObjectMethod
public MethodInfo IsStartElementMethod0
public MethodInfo IsStartElementMethod2
public PropertyInfo LocalNameProperty
public PropertyInfo NamespaceProperty
public MethodInfo MoveNextMethod
public MethodInfo MoveToContentMethod
public PropertyInfo NodeTypeProperty
public MethodInfo OnDeserializationMethod
public MethodInfo ReadJsonValueMethod
public ConstructorInfo SerializationExceptionCtor
public Type[] SerInfoCtorArgs
public MethodInfo ThrowDuplicateMemberExceptionMethod
public MethodInfo ThrowMissingRequiredMembersMethod
public PropertyInfo TypeHandleProperty
public MethodInfo UnboxPointer
public PropertyInfo UseSimpleDictionaryFormatReadProperty
public PropertyInfo UseSimpleDictionaryFormatWriteProperty
public MethodInfo WriteAttributeStringMethod
public MethodInfo WriteEndElementMethod
public MethodInfo WriteJsonISerializableMethod
public MethodInfo WriteJsonNameWithMappingMethod
public MethodInfo WriteJsonValueMethod
public MethodInfo WriteStartElementMethod
public MethodInfo WriteStartElementStringMethod
public MethodInfo ParseEnumMethod
public MethodInfo GetJsonMemberNameMethod
public MethodInfo get_BoxPointer()
public PropertyInfo get_CollectionItemNameProperty()
public ConstructorInfo get_ExtensionDataObjectCtor()
public PropertyInfo get_ExtensionDataProperty()
public MethodInfo get_GetCurrentMethod()
public MethodInfo get_GetItemContractMethod()
public MethodInfo get_GetJsonDataContractMethod()
public MethodInfo get_GetJsonMemberIndexMethod()
public MethodInfo get_GetRevisedItemContractMethod()
public MethodInfo get_GetUninitializedObjectMethod()
public MethodInfo get_IsStartElementMethod0()
public MethodInfo get_IsStartElementMethod2()
public PropertyInfo get_LocalNameProperty()
public PropertyInfo get_NamespaceProperty()
public MethodInfo get_MoveNextMethod()
public MethodInfo get_MoveToContentMethod()
public PropertyInfo get_NodeTypeProperty()
public MethodInfo get_OnDeserializationMethod()
public MethodInfo get_ReadJsonValueMethod()
public ConstructorInfo get_SerializationExceptionCtor()
public Type[] get_SerInfoCtorArgs()
public MethodInfo get_ThrowDuplicateMemberExceptionMethod()
public MethodInfo get_ThrowMissingRequiredMembersMethod()
public PropertyInfo get_TypeHandleProperty()
public MethodInfo get_UnboxPointer()
public PropertyInfo get_UseSimpleDictionaryFormatReadProperty()
public PropertyInfo get_UseSimpleDictionaryFormatWriteProperty()
public MethodInfo get_WriteAttributeStringMethod()
public MethodInfo get_WriteEndElementMethod()
public MethodInfo get_WriteJsonISerializableMethod()
public MethodInfo get_WriteJsonNameWithMappingMethod()
public MethodInfo get_WriteJsonValueMethod()
public MethodInfo get_WriteStartElementMethod()
public MethodInfo get_WriteStartElementStringMethod()
public MethodInfo get_ParseEnumMethod()
public MethodInfo get_GetJsonMemberNameMethod()
}
internal System.Runtime.Serialization.KeyValue`2 : ValueType {
private K key
private V value
public K Key
public V Value
internal void .ctor(K key, V value)
public K get_Key()
public void set_Key(K value)
public V get_Value()
public void set_Value(V value)
}
public System.Runtime.Serialization.KnownTypeAttribute : Attribute {
private string methodName
private Type type
public string MethodName
public Type Type
public void .ctor(Type type)
public void .ctor(string methodName)
public string get_MethodName()
public Type get_Type()
}
internal System.Runtime.Serialization.KnownTypeDataContractResolver : DataContractResolver {
private XmlObjectSerializerContext context
internal void .ctor(XmlObjectSerializerContext context)
public bool TryResolveType(Type type, Type declaredType, DataContractResolver knownTypeResolver, XmlDictionaryString& typeName, XmlDictionaryString& typeNamespace)
public Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
}
internal System.Runtime.Serialization.LongDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal void .ctor(XmlDictionaryString name, XmlDictionaryString ns)
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
public System.Runtime.Serialization.NetDataContractSerializer : XmlObjectSerializer {
private XmlDictionaryString rootName
private XmlDictionaryString rootNamespace
private StreamingContext context
private SerializationBinder binder
private ISurrogateSelector surrogateSelector
private int maxItemsInObjectGraph
private bool ignoreExtensionDataObject
private FormatterAssemblyStyle assemblyFormat
private DataContract cachedDataContract
private Hashtable typeNameCache
private Nullable`1<bool> unsafeTypeForwardingEnabled
internal bool UnsafeTypeForwardingEnabled
public StreamingContext Context
public SerializationBinder Binder
public ISurrogateSelector SurrogateSelector
public FormatterAssemblyStyle AssemblyFormat
public int MaxItemsInObjectGraph
public bool IgnoreExtensionDataObject
public void .ctor(StreamingContext context)
public void .ctor(StreamingContext context, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, FormatterAssemblyStyle assemblyFormat, ISurrogateSelector surrogateSelector)
public void .ctor(string rootName, string rootNamespace)
public void .ctor(string rootName, string rootNamespace, StreamingContext context, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, FormatterAssemblyStyle assemblyFormat, ISurrogateSelector surrogateSelector)
public void .ctor(XmlDictionaryString rootName, XmlDictionaryString rootNamespace)
public void .ctor(XmlDictionaryString rootName, XmlDictionaryString rootNamespace, StreamingContext context, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, FormatterAssemblyStyle assemblyFormat, ISurrogateSelector surrogateSelector)
private void Initialize(StreamingContext context, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, FormatterAssemblyStyle assemblyFormat, ISurrogateSelector surrogateSelector)
private void Initialize(XmlDictionaryString rootName, XmlDictionaryString rootNamespace, StreamingContext context, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, FormatterAssemblyStyle assemblyFormat, ISurrogateSelector surrogateSelector)
internal bool get_UnsafeTypeForwardingEnabled()
public StreamingContext get_Context()
public void set_Context(StreamingContext value)
public SerializationBinder get_Binder()
public void set_Binder(SerializationBinder value)
public ISurrogateSelector get_SurrogateSelector()
public void set_SurrogateSelector(ISurrogateSelector value)
public FormatterAssemblyStyle get_AssemblyFormat()
public void set_AssemblyFormat(FormatterAssemblyStyle value)
public int get_MaxItemsInObjectGraph()
public bool get_IgnoreExtensionDataObject()
public void Serialize(Stream stream, object graph)
public object Deserialize(Stream stream)
internal void InternalWriteObject(XmlWriterDelegator writer, object graph)
public void WriteObject(XmlWriter writer, object graph)
public void WriteStartObject(XmlWriter writer, object graph)
public void WriteObjectContent(XmlWriter writer, object graph)
public void WriteEndObject(XmlWriter writer)
public void WriteStartObject(XmlDictionaryWriter writer, object graph)
internal void InternalWriteStartObject(XmlWriterDelegator writer, object graph)
private void InternalWriteStartObject(XmlWriterDelegator writer, object graph, DataContract contract)
public void WriteObjectContent(XmlDictionaryWriter writer, object graph)
internal void InternalWriteObjectContent(XmlWriterDelegator writer, object graph)
private void InternalWriteObjectContent(XmlWriterDelegator writer, object graph, DataContract contract, Hashtable surrogateDataContracts)
internal void WriteClrTypeInfo(XmlWriterDelegator writer, DataContract dataContract, SerializationBinder binder)
internal void WriteClrTypeInfo(XmlWriterDelegator writer, Type dataContractType, SerializationBinder binder, string defaultClrTypeName, string defaultClrAssemblyName)
internal void WriteClrTypeInfo(XmlWriterDelegator writer, Type dataContractType, SerializationBinder binder, SerializationInfo serInfo)
private void WriteClrTypeInfo(XmlWriterDelegator writer, string clrTypeName, string clrAssemblyName)
public void WriteEndObject(XmlDictionaryWriter writer)
internal void InternalWriteEndObject(XmlWriterDelegator writer)
public object ReadObject(XmlReader reader)
public object ReadObject(XmlReader reader, bool verifyObjectName)
public bool IsStartObject(XmlReader reader)
public object ReadObject(XmlDictionaryReader reader, bool verifyObjectName)
public bool IsStartObject(XmlDictionaryReader reader)
internal object InternalReadObject(XmlReaderDelegator xmlReader, bool verifyObjectName)
internal bool InternalIsStartObject(XmlReaderDelegator reader)
internal DataContract GetDataContract(object obj, Hashtable& surrogateDataContracts)
internal DataContract GetDataContract(Type type, Hashtable& surrogateDataContracts)
internal DataContract GetDataContract(RuntimeTypeHandle typeHandle, Type type, Hashtable& surrogateDataContracts)
private ISerializationSurrogate GetSurrogate(Type type, ISurrogateSelector surrogateSelector, StreamingContext context)
internal DataContract GetDataContractFromSurrogateSelector(ISurrogateSelector surrogateSelector, StreamingContext context, RuntimeTypeHandle typeHandle, Type type, Hashtable& surrogateDataContracts)
internal TypeInformation GetTypeInformation(Type type)
private bool IsAssemblyNameForwardingSafe(string originalAssemblyName, string newAssemblyName)
private bool IsPublicKeyTokenForwardingSafe(Byte[] sourceToken, Byte[] destinationToken)
}
internal System.Runtime.Serialization.ObjectDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal bool CanContainReferences
internal bool IsPrimitive
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
internal bool get_CanContainReferences()
internal bool get_IsPrimitive()
}
internal System.Runtime.Serialization.ObjectReferenceStack : ValueType {
private int MaximumArraySize
private int InitialArraySize
private int count
private Object[] objectArray
private Boolean[] isReferenceArray
private Dictionary`2<object, object> objectDictionary
internal int Count
internal void Push(object obj)
internal void EnsureSetAsIsReference(object obj)
internal void Pop(object obj)
internal bool Contains(object obj)
internal int get_Count()
}
internal System.Runtime.Serialization.ObjectToIdCache : object {
internal int m_currentCount
internal Int32[] m_ids
internal Object[] m_objs
private Boolean[] m_isWrapped
internal Int32[] primes
public int GetId(object obj, Boolean& newId)
public int ReassignId(int oldObjId, object oldObj, object newObj)
private int FindElement(object obj, Boolean& isEmpty, Boolean& isWrapped)
private void RemoveAt(int position)
private int ComputeStartPosition(object o)
private void Rehash()
private int GetPrime(int min)
private bool IsPrime(int candidate)
}
internal System.Runtime.Serialization.PrimitiveDataContract : DataContract {
private PrimitiveDataContractCriticalHelper helper
internal string WriteMethodName
internal string ReadMethodName
internal XmlDictionaryString TopLevelElementNamespace
internal bool CanContainReferences
internal bool IsPrimitive
internal bool IsBuiltInDataContract
internal MethodInfo XmlFormatWriterMethod
internal MethodInfo XmlFormatContentWriterMethod
internal MethodInfo XmlFormatReaderMethod
protected void .ctor(Type type, XmlDictionaryString name, XmlDictionaryString ns)
internal PrimitiveDataContract GetPrimitiveDataContract(Type type)
internal PrimitiveDataContract GetPrimitiveDataContract(string name, string ns)
internal string get_WriteMethodName()
internal string get_ReadMethodName()
internal XmlDictionaryString get_TopLevelElementNamespace()
internal void set_TopLevelElementNamespace(XmlDictionaryString value)
internal bool get_CanContainReferences()
internal bool get_IsPrimitive()
internal bool get_IsBuiltInDataContract()
internal MethodInfo get_XmlFormatWriterMethod()
internal MethodInfo get_XmlFormatContentWriterMethod()
internal MethodInfo get_XmlFormatReaderMethod()
public void WriteXmlValue(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context)
protected object HandleReadValue(object obj, XmlObjectSerializerReadContext context)
protected bool TryReadNullAtTopLevel(XmlReaderDelegator reader)
internal bool Equals(object other, Dictionary`2<DataContractPairKey, object> checkedContracts)
}
internal System.Runtime.Serialization.QNameDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal bool IsPrimitive
internal string get_WriteMethodName()
internal string get_ReadMethodName()
internal bool get_IsPrimitive()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
internal void WriteRootElement(XmlWriterDelegator writer, XmlDictionaryString name, XmlDictionaryString ns)
}
internal System.Runtime.Serialization.SchemaExporter : object {
private XmlSchemaSet schemas
private XmlDocument xmlDoc
private DataContractSet dataContractSet
private XmlQualifiedName anytypeQualifiedName
private XmlQualifiedName stringQualifiedName
private XmlQualifiedName defaultEnumBaseTypeName
private XmlQualifiedName enumerationValueAnnotationName
private XmlQualifiedName surrogateDataAnnotationName
private XmlQualifiedName defaultValueAnnotation
private XmlQualifiedName actualTypeAnnotationName
private XmlQualifiedName isDictionaryAnnotationName
private XmlQualifiedName isValueTypeName
private XmlSchemaSet Schemas
private XmlDocument XmlDoc
internal XmlSchemaSequence ISerializableSequence
internal XmlSchemaAny ISerializableWildcardElement
internal XmlQualifiedName AnytypeQualifiedName
internal XmlQualifiedName StringQualifiedName
internal XmlQualifiedName DefaultEnumBaseTypeName
internal XmlQualifiedName EnumerationValueAnnotationName
internal XmlQualifiedName SurrogateDataAnnotationName
internal XmlQualifiedName DefaultValueAnnotation
internal XmlQualifiedName ActualTypeAnnotationName
internal XmlQualifiedName IsDictionaryAnnotationName
internal XmlQualifiedName IsValueTypeName
internal XmlSchemaAttribute ISerializableFactoryTypeAttribute
internal XmlSchemaAttribute RefAttribute
internal XmlSchemaAttribute IdAttribute
internal void .ctor(XmlSchemaSet schemas, DataContractSet dataContractSet)
private XmlSchemaSet get_Schemas()
private XmlDocument get_XmlDoc()
internal void Export()
private void ExportSerializationSchema()
private void ExportDataContract(DataContract dataContract)
private XmlSchemaElement ExportTopLevelElement(DataContract dataContract, XmlSchema schema)
private void ExportClassDataContract(ClassDataContract classDataContract, XmlSchema schema)
private void AddReferenceAttributes(XmlSchemaObjectCollection attributes, XmlSchema schema)
private void SetElementType(XmlSchemaElement element, DataContract dataContract, XmlSchema schema)
private bool CheckIfMemberHasConflict(DataMember dataMember)
private XmlElement ExportEmitDefaultValue(DataMember dataMember)
private XmlElement ExportActualType(XmlQualifiedName typeName)
private XmlElement ExportActualType(XmlQualifiedName typeName, XmlDocument xmlDoc)
private XmlElement ExportGenericInfo(Type clrType, string elementName, string elementNs)
private XmlElement ExportSurrogateData(object key)
private void ExportCollectionDataContract(CollectionDataContract collectionDataContract, XmlSchema schema)
private XmlElement ExportIsDictionary()
private void ExportEnumDataContract(EnumDataContract enumDataContract, XmlSchema schema)
internal long GetDefaultEnumValue(bool isFlags, int index)
private void ExportISerializableDataContract(ClassDataContract dataContract, XmlSchema schema)
private XmlSchemaComplexContentExtension CreateTypeContent(XmlSchemaComplexType type, XmlQualifiedName baseTypeName, XmlSchema schema)
private void ExportXmlDataContract(XmlDataContract dataContract)
private void ReprocessAll(XmlSchemaSet schemas)
internal void GetXmlTypeInfo(Type type, XmlQualifiedName& stableName, XmlSchemaType& xsdType, Boolean& hasRoot)
private bool InvokeSchemaProviderMethod(Type clrType, XmlSchemaSet schemas, XmlQualifiedName& stableName, XmlSchemaType& xsdType, Boolean& hasRoot)
private void InvokeGetSchemaMethod(Type clrType, XmlSchemaSet schemas, XmlQualifiedName stableName)
internal void AddDefaultXmlType(XmlSchemaSet schemas, string localName, string ns)
private XmlSchemaComplexType CreateAnyType()
private XmlSchemaComplexType CreateAnyElementType()
internal bool IsSpecialXmlType(Type type, XmlQualifiedName& typeName, XmlSchemaType& xsdType, Boolean& hasRoot)
private void AddDefaultDatasetType(XmlSchemaSet schemas, string localName, string ns)
private void AddDefaultTypedDatasetType(XmlSchemaSet schemas, XmlSchema datasetSchema, string localName, string ns)
private XmlSchemaAnnotation GetSchemaAnnotation(XmlQualifiedName annotationQualifiedName, string innerText, XmlSchema schema)
private XmlSchemaAnnotation GetSchemaAnnotation(XmlNode[] nodes)
private XmlElement GetAnnotationMarkup(XmlQualifiedName annotationQualifiedName, string innerText, XmlSchema schema)
private XmlSchema GetSchema(string ns)
internal XmlSchemaSequence get_ISerializableSequence()
internal XmlSchemaAny get_ISerializableWildcardElement()
internal XmlQualifiedName get_AnytypeQualifiedName()
internal XmlQualifiedName get_StringQualifiedName()
internal XmlQualifiedName get_DefaultEnumBaseTypeName()
internal XmlQualifiedName get_EnumerationValueAnnotationName()
internal XmlQualifiedName get_SurrogateDataAnnotationName()
internal XmlQualifiedName get_DefaultValueAnnotation()
internal XmlQualifiedName get_ActualTypeAnnotationName()
internal XmlQualifiedName get_IsDictionaryAnnotationName()
internal XmlQualifiedName get_IsValueTypeName()
internal XmlSchemaAttribute get_ISerializableFactoryTypeAttribute()
internal XmlSchemaAttribute get_RefAttribute()
internal XmlSchemaAttribute get_IdAttribute()
}
internal System.Runtime.Serialization.SchemaHelper : object {
internal bool NamespacesEqual(string ns1, string ns2)
internal XmlSchemaType GetSchemaType(XmlSchemaSet schemas, XmlQualifiedName typeQName, XmlSchema& outSchema)
internal XmlSchemaType GetSchemaType(Dictionary`2<XmlQualifiedName, SchemaObjectInfo> schemaInfo, XmlQualifiedName typeName)
internal XmlSchema GetSchemaWithType(Dictionary`2<XmlQualifiedName, SchemaObjectInfo> schemaInfo, XmlSchemaSet schemas, XmlQualifiedName typeName)
internal XmlSchemaElement GetSchemaElement(XmlSchemaSet schemas, XmlQualifiedName elementQName, XmlSchema& outSchema)
internal XmlSchemaElement GetSchemaElement(Dictionary`2<XmlQualifiedName, SchemaObjectInfo> schemaInfo, XmlQualifiedName elementName)
internal XmlSchema GetSchema(string ns, XmlSchemaSet schemas)
private XmlSchema CreateSchema(string ns, XmlSchemaSet schemas)
internal void AddElementForm(XmlSchemaElement element, XmlSchema schema)
internal void AddSchemaImport(string ns, XmlSchema schema)
internal XmlSchema GetSchemaWithGlobalElementDeclaration(XmlSchemaElement element, XmlSchemaSet schemas)
internal XmlQualifiedName GetGlobalElementDeclaration(XmlSchemaSet schemas, XmlQualifiedName typeQName, Boolean& isNullable)
}
internal System.Runtime.Serialization.SchemaImporter : object {
private DataContractSet dataContractSet
private XmlSchemaSet schemaSet
private ICollection`1<XmlQualifiedName> typeNames
private ICollection`1<XmlSchemaElement> elements
private XmlQualifiedName[] elementTypeNames
private bool importXmlDataType
private Dictionary`2<XmlQualifiedName, SchemaObjectInfo> schemaObjects
private List`1<XmlSchemaRedefine> redefineList
private bool needToImportKnownTypesForObject
private Hashtable serializationSchemaElements
private Dictionary`2<XmlQualifiedName, SchemaObjectInfo> SchemaObjects
private List`1<XmlSchemaRedefine> RedefineList
internal void .ctor(XmlSchemaSet schemas, ICollection`1<XmlQualifiedName> typeNames, ICollection`1<XmlSchemaElement> elements, XmlQualifiedName[] elementTypeNames, DataContractSet dataContractSet, bool importXmlDataType)
internal void Import()
internal void CompileSchemaSet(XmlSchemaSet schemaSet)
private Dictionary`2<XmlQualifiedName, SchemaObjectInfo> get_SchemaObjects()
private List`1<XmlSchemaRedefine> get_RedefineList()
private void ImportKnownTypes(XmlQualifiedName typeName)
internal bool IsObjectContract(DataContract dataContract)
private void ImportKnownTypesForObject()
internal Dictionary`2<XmlQualifiedName, SchemaObjectInfo> CreateSchemaObjects()
private XmlQualifiedName GetBaseTypeName(XmlSchemaType type)
private List`1<XmlSchemaRedefine> CreateRedefineList()
private DataContract ImportAnonymousGlobalElement(XmlSchemaElement element, XmlQualifiedName typeQName, string ns)
private DataContract ImportAnonymousElement(XmlSchemaElement element, XmlQualifiedName typeQName)
private DataContract ImportType(XmlQualifiedName typeName)
private DataContract ImportType(XmlSchemaType type)
private DataContract ImportType(XmlSchemaType type, XmlQualifiedName typeName, bool isAnonymous)
private void RemoveFailedContract(XmlQualifiedName typeName)
private bool CheckIfEnum(XmlSchemaSimpleTypeRestriction restriction)
private bool CheckIfCollection(XmlSchemaSequence rootSequence)
private bool CheckIfISerializable(XmlSchemaSequence rootSequence, XmlSchemaObjectCollection attributes)
private void RemoveOptionalUnknownSerializationElements(XmlSchemaObjectCollection items)
private DataContract ImportType(XmlQualifiedName typeName, XmlSchemaParticle rootParticle, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlQualifiedName baseTypeName, XmlSchemaAnnotation annotation)
private ClassDataContract ImportClass(XmlQualifiedName typeName, XmlSchemaSequence rootSequence, XmlQualifiedName baseTypeName, XmlSchemaAnnotation annotation, bool isReference)
private DataContract ImportXmlDataType(XmlQualifiedName typeName, XmlSchemaType xsdType, bool isAnonymous)
private XmlDataContract ImportSpecialXmlDataType(XmlSchemaType xsdType, bool isAnonymous)
private bool IsXmlAnyElementType(XmlSchemaComplexType xsdType)
private bool IsXmlAnyType(XmlSchemaComplexType xsdType)
private bool IsValueType(XmlQualifiedName typeName, XmlSchemaAnnotation annotation)
private ClassDataContract ImportISerializable(XmlQualifiedName typeName, XmlSchemaSequence rootSequence, XmlQualifiedName baseTypeName, XmlSchemaObjectCollection attributes, XmlSchemaAnnotation annotation)
private void CheckISerializableBase(XmlQualifiedName typeName, XmlSchemaSequence rootSequence, XmlSchemaObjectCollection attributes)
private bool IsISerializableDerived(XmlQualifiedName typeName, XmlSchemaSequence rootSequence)
private void ImportBaseContract(XmlQualifiedName baseTypeName, ClassDataContract dataContract)
private void ImportTopLevelElement(XmlQualifiedName typeName)
private void ImportClassMember(XmlSchemaElement element, ClassDataContract dataContract)
private Nullable`1<bool> ImportEmitDefaultValue(XmlSchemaAnnotation annotation, XmlQualifiedName typeName)
internal XmlQualifiedName ImportActualType(XmlSchemaAnnotation annotation, XmlQualifiedName defaultTypeName, XmlQualifiedName typeName)
private CollectionDataContract ImportCollection(XmlQualifiedName typeName, XmlSchemaSequence rootSequence, XmlSchemaObjectCollection attributes, XmlSchemaAnnotation annotation, bool isReference)
private GenericInfo GetGenericInfoForDataMember(DataMember dataMember)
private bool IsDictionary(XmlQualifiedName typeName, XmlSchemaAnnotation annotation)
private EnumDataContract ImportFlagsEnum(XmlQualifiedName typeName, XmlSchemaSimpleTypeList list, XmlSchemaAnnotation annotation)
private EnumDataContract ImportEnum(XmlQualifiedName typeName, XmlSchemaSimpleTypeRestriction restriction, bool isFlags, XmlSchemaAnnotation annotation)
private DataContract ImportSimpleTypeRestriction(XmlQualifiedName typeName, XmlSchemaSimpleTypeRestriction restriction)
private void ImportDataContractExtension(XmlSchemaType type, DataContract dataContract)
private void ImportGenericInfo(XmlSchemaType type, DataContract dataContract)
private GenericInfo ImportGenericInfo(XmlElement typeElement, XmlSchemaType type)
private object ImportSurrogateData(XmlElement typeElement, string name, string ns)
private void CheckComplexType(XmlQualifiedName typeName, XmlSchemaComplexType type)
private void CheckIfElementUsesUnsupportedConstructs(XmlQualifiedName typeName, XmlSchemaElement element)
private void ImportAttributes(XmlQualifiedName typeName, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, Boolean& isReference)
private bool TryCheckIfAttribute(XmlQualifiedName typeName, XmlSchemaAttribute attribute, XmlQualifiedName refName, Boolean& foundAttribute)
private void AddDataContract(DataContract dataContract)
private string GetInnerText(XmlQualifiedName typeName, XmlElement xmlElement)
private XmlElement ImportAnnotation(XmlSchemaAnnotation annotation, XmlQualifiedName annotationQualifiedName)
private void ThrowTypeCannotBeImportedException(string name, string ns, string message)
private void ThrowArrayTypeCannotBeImportedException(string name, string ns, string message)
private void ThrowEnumTypeCannotBeImportedException(string name, string ns, string message)
private void ThrowISerializableTypeCannotBeImportedException(string name, string ns, string message)
private void ThrowTypeCannotBeImportedException(string message)
}
internal System.Runtime.Serialization.SchemaObjectInfo : object {
internal XmlSchemaType type
internal XmlSchemaElement element
internal XmlSchema schema
internal List`1<XmlSchemaType> knownTypes
internal void .ctor(XmlSchemaType type, XmlSchemaElement element, XmlSchema schema, List`1<XmlSchemaType> knownTypes)
}
internal System.Runtime.Serialization.ScopedKnownTypes : ValueType {
internal Dictionary`2[] dataContractDictionaries
private int count
internal void Push(Dictionary`2<XmlQualifiedName, DataContract> dataContractDictionary)
internal void Pop()
internal DataContract GetDataContract(XmlQualifiedName qname)
}
internal System.Runtime.Serialization.SerializationMode : Enum {
public int value__
public SerializationMode SharedContract
public SerializationMode SharedType
}
internal System.Runtime.Serialization.SerializationTrace : object {
private TraceSource codeGen
internal SourceSwitch CodeGenerationSwitch
private TraceSource CodeGenerationTraceSource
internal SourceSwitch get_CodeGenerationSwitch()
internal void WriteInstruction(int lineNumber, string instruction)
internal void TraceInstruction(string instruction)
private TraceSource get_CodeGenerationTraceSource()
}
internal System.Runtime.Serialization.ShortDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.SignedByteDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.SpecialTypeDataContract : DataContract {
private SpecialTypeDataContractCriticalHelper helper
internal bool IsBuiltInDataContract
public void .ctor(Type type)
public void .ctor(Type type, XmlDictionaryString name, XmlDictionaryString ns)
internal bool get_IsBuiltInDataContract()
}
internal System.Runtime.Serialization.SR : object {
public string ArrayExceededSize
public string ArrayExceededSizeAttribute
public string ArrayTypeIsNotSupported
public string CannotDeserializeRefAtTopLevel
public string CannotLoadMemberType
public string CannotSerializeObjectWithCycles
public string CanOnlyStoreIntoArgOrLocGot0
public string CharIsInvalidPrimitive
public string CallbackMustReturnVoid
public string CallbackParameterInvalid
public string CallbacksCannotBeVirtualMethods
public string CollectionMustHaveAddMethod
public string CollectionMustHaveGetEnumeratorMethod
public string CollectionMustHaveItemType
public string CollectionTypeCannotBeBuiltIn
public string CollectionTypeCannotHaveDataContract
public string CollectionTypeDoesNotHaveAddMethod
public string CollectionTypeDoesNotHaveDefaultCtor
public string CollectionTypeHasMultipleDefinitionsOfInterface
public string CollectionTypeIsNotIEnumerable
public string DataContractCacheOverflow
public string DataContractNamespaceAlreadySet
public string DataContractNamespaceIsNotValid
public string DataContractNamespaceReserved
public string DataMemberOnEnumField
public string DcTypeNotFoundOnDeserialize
public string DcTypeNotFoundOnSerialize
public string DcTypeNotResolvedOnDeserialize
public string DeserializedObjectWithIdNotFound
public string DupContractInKnownTypes
public string DupKeyValueName
public string DupEnumMemberValue
public string DupMemberName
public string DuplicateAttribute
public string DuplicateCallback
public string EncounteredWithNameNamespace
public string EnumTypeCannotHaveIsReference
public string ErrorDeserializing
public string ErrorInLine
public string ErrorIsStartObject
public string ErrorSerializing
public string ErrorTypeInfo
public string ErrorWriteEndObject
public string ErrorWriteStartObject
public string ExceededMaxItemsQuota
public string ExpectingElement
public string ExpectingElementAtDeserialize
public string ExpectingEnd
public string ExpectingState
public string GenericNameBraceMismatch
public string GenericParameterNotValid
public string InconsistentIsReference
public string IndexedPropertyCannotBeSerialized
public string InterfaceTypeCannotBeCreated
public string InvalidCollectionContractItemName
public string InvalidCollectionContractKeyName
public string InvalidCollectionContractKeyNoDictionary
public string InvalidCollectionContractName
public string InvalidCollectionContractNamespace
public string InvalidCollectionContractValueName
public string InvalidCollectionContractValueNoDictionary
public string InvalidCollectionDataContract
public string InvalidCollectionType
public string InvalidDataContractName
public string InvalidDataContractNamespace
public string InvalidDataMemberName
public string InvalidEnumMemberValue
public string InvalidEnumValueOnRead
public string InvalidEnumValueOnWrite
public string InvalidGetSchemaMethod
public string InvalidGlobalDataContractNamespace
public string InvalidMember
public string InvalidNonNullReturnValueByIsAny
public string InvalidPrimitiveType
public string InvalidReturnTypeOnGetSchemaMethod
public string InvalidSizeDefinition
public string InvalidXmlDataContractName
public string InvalidXsIdDefinition
public string InvalidXsRefDefinition
public string IsAnyCannotBeNull
public string IsAnyCannotBeSerializedAsDerivedType
public string IsAnyCannotHaveXmlRoot
public string IsNotAssignableFrom
public string IsRequiredDataMemberOnIsReferenceDataContractType
public string IXmlSerializableCannotHaveCollectionDataContract
public string IXmlSerializableCannotHaveDataContract
public string IXmlSerializableIllegalOperation
public string IXmlSerializableMissingEndElements
public string IXmlSerializableMustHaveDefaultConstructor
public string IXmlSerializableWritePastSubTree
public string KnownTypeAttributeEmptyString
public string KnownTypeAttributeUnknownMethod
public string KnownTypeAttributeReturnType
public string KnownTypeAttributeOneScheme
public string KnownTypeAttributeNoType
public string KnownTypeConfigClosedGenericDeclared
public string KnownTypeAttributeValidMethodTypes
public string KnownTypeAttributeNoData
public string KnownTypeAttributeMethodNull
public string MaxArrayLengthExceeded
public string MissingGetSchemaMethod
public string MultipleIdDefinition
public string NoConversionPossibleTo
public string NoGetMethodForProperty
public string NoSetMethodForProperty
public string NullKnownType
public string NullValueReturnedForGetOnlyCollection
public string ObjectTableOverflow
public string OrderCannotBeNegative
public string ParameterCountMismatch
public string PartialTrustCollectionContractAddMethodNotPublic
public string PartialTrustCollectionContractNoPublicConstructor
public string PartialTrustCollectionContractTypeNotPublic
public string PartialTrustDataContractOnSerializingNotPublic
public string PartialTrustDataContractOnSerializedNotPublic
public string PartialTrustDataContractOnDeserializingNotPublic
public string PartialTrustDataContractOnDeserializedNotPublic
public string PartialTrustDataContractFieldGetNotPublic
public string PartialTrustDataContractFieldSetNotPublic
public string PartialTrustDataContractPropertyGetNotPublic
public string PartialTrustDataContractPropertySetNotPublic
public string PartialTrustDataContractTypeNotPublic
public string PartialTrustNonAttributedSerializableTypeNoPublicConstructor
public string PartialTrustIXmlSerializableTypeNotPublic
public string PartialTrustIXmlSerialzableNoPublicConstructor
public string NonAttributedSerializableTypesMustHaveDefaultConstructor
public string AttributedTypesCannotInheritFromNonAttributedSerializableTypes
public string GetOnlyCollectionsNotSupported
public string QuotaMustBePositive
public string QuotaIsReadOnly
public string QuotaCopyReadOnly
public string RequiredMemberMustBeEmitted
public string ResolveTypeReturnedFalse
public string ResolveTypeReturnedNull
public string SupportForMultidimensionalArraysNotPresent
public string TooManyCollectionContracts
public string TooManyDataContracts
public string TooManyDataMembers
public string TooManyEnumMembers
public string TooManyIgnoreDataMemberAttributes
public string TypeMustBeConcrete
public string TypeNotSerializable
public string UnexpectedContractType
public string UnexpectedElementExpectingElements
public string UnexpectedEndOfFile
public string UnknownConstantType
public string UnsupportedIDictionaryAsDataMemberType
public string ValueMustBeNonNegative
public string ValueTypeCannotBeNull
public string ValueTypeCannotHaveBaseType
public string ValueTypeCannotHaveId
public string ValueTypeCannotHaveIsReference
public string ValueTypeCannotHaveRef
public string XmlElementAttributes
public string XmlForObjectCannotHaveContent
public string XmlInvalidConversion
public string XmlInvalidConversionWithoutValue
public string XmlStartElementExpected
public string XmlWriterMustBeInElement
public string OffsetExceedsBufferSize
public string SizeExceedsRemainingBufferSpace
public string ValueMustBeInRange
public string XmlArrayTooSmallOutput
public string XmlInvalidBase64Length
public string XmlInvalidBase64Sequence
public string XmlInvalidBinHexLength
public string XmlInvalidBinHexSequence
public string XmlInvalidHighSurrogate
public string XmlInvalidLowSurrogate
public string XmlInvalidSurrogate
public string CombinedPrefixNSLength
public string InvalidInclusivePrefixListCollection
public string InvalidLocalNameEmpty
public string XmlArrayTooSmall
public string XmlArrayTooSmallInput
public string XmlBadBOM
public string XmlBase64DataExpected
public string XmlCDATAInvalidAtTopLevel
public string XmlCloseCData
public string XmlConversionOverflow
public string XmlDeclarationRequired
public string XmlDeclMissingVersion
public string XmlDeclMissing
public string XmlDeclNotFirst
public string XmlDictionaryStringIDRange
public string XmlDictionaryStringIDUndefinedSession
public string XmlDictionaryStringIDUndefinedStatic
public string XmlDuplicateAttribute
public string XmlEmptyNamespaceRequiresNullPrefix
public string XmlEncodingMismatch
public string XmlEncodingNotSupported
public string XmlEndElementExpected
public string XmlEndElementNoOpenNodes
public string XmlExpectedEncoding
public string XmlFoundCData
public string XmlFoundComment
public string XmlFoundElement
public string XmlFoundEndElement
public string XmlFoundEndOfFile
public string XmlFoundNodeType
public string XmlFoundText
public string XmlFullStartElementExpected
public string XmlFullStartElementLocalNameNsExpected
public string XmlFullStartElementNameExpected
public string XmlIDDefined
public string XmlKeyAlreadyExists
public string XmlIllegalOutsideRoot
public string XmlInvalidBytes
public string XmlInvalidCharRef
public string XmlInvalidCommentChars
public string XmlInvalidDeclaration
public string XmlInvalidDepth
public string XmlInvalidEncoding
public string XmlInvalidFFFE
public string XmlInvalidFormat
public string XmlInvalidID
public string XmlInvalidOperation
public string XmlInvalidPrefixState
public string XmlInvalidQualifiedName
public string XmlInvalidRootData
public string XmlInvalidStandalone
public string XmlInvalidStream
public string XmlInvalidUniqueId
public string XmlInvalidUTF8Bytes
public string XmlInvalidVersion
public string XmlInvalidWriteState
public string XmlInvalidXmlByte
public string XmlInvalidXmlSpace
public string XmlLineInfo
public string XmlMalformedDecl
public string XmlMaxArrayLengthExceeded
public string XmlMaxNameTableCharCountExceeded
public string XmlMethodNotSupported
public string XmlMissingLowSurrogate
public string XmlMultipleRootElements
public string XmlNamespaceNotFound
public string XmlNestedArraysNotSupported
public string XmlNoRootElement
public string XmlOnlyOneRoot
public string XmlOnlyWhitespace
public string XmlOnlySingleValue
public string XmlPrefixBoundToNamespace
public string XmlProcessingInstructionNotSupported
public string XmlReservedPrefix
public string XmlSpaceBetweenAttributes
public string XmlSpecificBindingNamespace
public string XmlSpecificBindingPrefix
public string XmlStartElementLocalNameNsExpected
public string XmlStartElementNameExpected
public string XmlTagMismatch
public string XmlTokenExpected
public string XmlUndefinedPrefix
public string XmlUnexpectedEndElement
public string XmlUnexpectedEndOfFile
public string XmlWriterClosed
public string Xml_InvalidNmToken
public string AbstractElementNotSupported
public string AbstractTypeNotSupported
public string AmbiguousReferencedCollectionTypes1
public string AmbiguousReferencedCollectionTypes3
public string AmbiguousReferencedTypes1
public string AmbiguousReferencedTypes3
public string AnnotationAttributeNotFound
public string AnonymousTypeNotSupported
public string AnyAttributeNotSupported
public string ArrayItemFormMustBe
public string ArraySizeAttributeIncorrect
public string ArrayTypeCannotBeImported
public string AssemblyNotFound
public string AttributeNotFound
public string BaseTypeNotISerializable
public string CannotComputeUniqueName
public string CannotDeriveFromSealedReferenceType
public string CannotDeserializeForwardedType
public string CannotExportNullAssembly
public string CannotExportNullKnownType
public string CannotExportNullType
public string CannotHaveDuplicateAttributeNames
public string CannotHaveDuplicateElementNames
public string CannotImportInvalidSchemas
public string CannotImportNullDataContractName
public string CannotImportNullSchema
public string CannotSetMembersForReferencedType
public string CannotSetNamespaceForReferencedType
public string CannotUseGenericTypeAsBase
public string ChangingFullTypeNameNotSupported
public string CircularTypeReference
public string ClassDataContractReturnedForGetOnlyCollection
public string CLRNamespaceMappedMultipleTimes
public string ClrTypeNotFound
public string CollectionAssignedToIncompatibleInterface
public string ComplexTypeRestrictionNotSupported
public string ConfigDataContractSerializerSectionLoadError
public string ConfigIndexOutOfRange
public string ConfigMustOnlyAddParamsWithType
public string ConfigMustOnlySetTypeOrIndex
public string ConfigMustSetTypeOrIndex
public string CouldNotReadSerializationSchema
public string DefaultOnElementNotSupported
public string DerivedTypeNotISerializable
public string DupContractInDataContractSet
public string DuplicateExtensionDataSetMethod
public string DupTypeContractInDataContractSet
public string ElementMaxOccursMustBe
public string ElementMinOccursMustBe
public string ElementRefOnLocalElementNotSupported
public string EnumEnumerationFacetsMustHaveValue
public string EnumListInAnonymousTypeNotSupported
public string EnumListMustContainAnonymousType
public string EnumOnlyEnumerationFacetsSupported
public string EnumRestrictionInvalid
public string EnumTypeCannotBeImported
public string EnumTypeNotSupportedByDataContractJsonSerializer
public string EnumUnionInAnonymousTypeNotSupported
public string ExtensionDataSetMustReturnVoid
public string ExtensionDataSetParameterInvalid
public string FactoryObjectContainsSelfReference
public string FactoryTypeNotISerializable
public string FixedOnElementNotSupported
public string FlushBufferAlreadyInUse
public string FormMustBeQualified
public string GenericAnnotationAttributeNotFound
public string GenericAnnotationForNestedLevelMustBeIncreasing
public string GenericAnnotationHasInvalidAttributeValue
public string GenericAnnotationHasInvalidElement
public string GenericTypeNameMismatch
public string GenericTypeNotExportable
public string GetOnlyCollectionMustHaveAddMethod
public string GetRealObjectReturnedNull
public string InvalidAnnotationExpectingText
public string InvalidAssemblyFormat
public string InvalidCharacterEncountered
public string InvalidClassDerivation
public string InvalidClrNameGeneratedForISerializable
public string InvalidClrNamespaceGeneratedForISerializable
public string InvalidDataNode
public string InvalidEmitDefaultAnnotation
public string InvalidEnumBaseType
public string InvalidISerializableDerivation
public string InvalidKeyValueType
public string InvalidKeyValueTypeNamespace
public string InvalidReturnSchemaOnGetSchemaMethod
public string InvalidStateInExtensionDataReader
public string InvalidXmlDeserializingExtensionData
public string IsAnyNotSupportedByNetDataContractSerializer
public string IsDictionaryFormattedIncorrectly
public string ISerializableAssemblyNameSetToZero
public string ISerializableCannotHaveDataContract
public string ISerializableContainsMoreThanOneItems
public string ISerializableDerivedContainsOneOrMoreItems
public string ISerializableDoesNotContainAny
public string ISerializableMustRefFactoryTypeAttribute
public string ISerializableTypeCannotBeImported
public string ISerializableWildcardMaxOccursMustBe
public string ISerializableWildcardMinOccursMustBe
public string ISerializableWildcardNamespaceInvalid
public string ISerializableWildcardProcessContentsInvalid
public string IsReferenceGetOnlyCollectionsNotSupported
public string IsValueTypeFormattedIncorrectly
public string JsonAttributeAlreadyWritten
public string JsonAttributeMustHaveElement
public string JsonCannotWriteStandaloneTextAfterQuotedText
public string JsonCannotWriteTextAfterNonTextAttribute
public string JsonDateTimeOutOfRange
public string JsonDuplicateMemberInInput
public string JsonDuplicateMemberNames
public string JsonEncodingNotSupported
public string JsonEncounteredUnexpectedCharacter
public string JsonEndElementNoOpenNodes
public string JsonExpectedEncoding
public string JsonInvalidBytes
public string JsonInvalidDataTypeSpecifiedForServerType
public string JsonInvalidDateTimeString
public string JsonInvalidFFFE
public string JsonInvalidItemNameForArrayElement
public string JsonInvalidLocalNameEmpty
public string JsonInvalidMethodBetweenStartEndAttribute
public string JsonInvalidRootElementName
public string JsonInvalidStartElementCall
public string JsonInvalidWriteState
public string JsonMethodNotSupported
public string JsonMultipleRootElementsNotAllowedOnWriter
public string JsonMustSpecifyDataType
public string JsonMustUseWriteStringForWritingAttributeValues
public string JsonNamespaceMustBeEmpty
public string JsonNestedArraysNotSupported
public string JsonNodeTypeArrayOrObjectNotSpecified
public string JsonNoMatchingStartAttribute
public string JsonOffsetExceedsBufferSize
public string JsonOneRequiredMemberNotFound
public string JsonOnlyWhitespace
public string JsonOpenAttributeMustBeClosedFirst
public string JsonPrefixMustBeNullOrEmpty
public string JsonRequiredMembersNotFound
public string JsonServerTypeSpecifiedForInvalidDataType
public string JsonSizeExceedsRemainingBufferSpace
public string JsonTypeNotSupportedByDataContractJsonSerializer
public string JsonUnexpectedAttributeLocalName
public string JsonUnexpectedAttributeValue
public string JsonUnexpectedEndOfFile
public string JsonUnsupportedForIsReference
public string JsonWriteArrayNotSupported
public string JsonWriterClosed
public string JsonXmlInvalidDeclaration
public string JsonXmlProcessingInstructionNotSupported
public string KeyTypeCannotBeParsedInSimpleDictionary
public string KnownTypeConfigGenericParamMismatch
public string KnownTypeConfigIndexOutOfBounds
public string KnownTypeConfigIndexOutOfBoundsZero
public string KnownTypeConfigObject
public string MaxMimePartsExceeded
public string MimeContentTypeHeaderInvalid
public string MimeHeaderInvalidCharacter
public string MimeMessageGetContentStreamCalledAlready
public string MimeReaderHeaderAlreadyExists
public string MimeReaderMalformedHeader
public string MimeReaderResetCalledBeforeEOF
public string MimeReaderTruncated
public string MimeVersionHeaderInvalid
public string MimeWriterInvalidStateForClose
public string MimeWriterInvalidStateForContent
public string MimeWriterInvalidStateForHeader
public string MimeWriterInvalidStateForStartPart
public string MimeWriterInvalidStateForStartPreface
public string MissingSchemaType
public string MixedContentNotSupported
public string MtomBoundaryInvalid
public string MtomBufferQuotaExceeded
public string MtomContentTransferEncodingNotPresent
public string MtomContentTransferEncodingNotSupported
public string MtomContentTypeInvalid
public string MtomDataMustNotContainXopInclude
public string MtomExceededMaxSizeInBytes
public string MtomInvalidCIDUri
public string MtomInvalidEmptyURI
public string MtomInvalidStartUri
public string MtomInvalidTransferEncodingForMimePart
public string MtomMessageContentTypeNotFound
public string MtomMessageInvalidContent
public string MtomMessageInvalidContentInMimePart
public string MtomMessageInvalidMimeVersion
public string MtomMessageNotApplicationXopXml
public string MtomMessageNotMultipart
public string MtomMessageRequiredParamNotSpecified
public string MtomMimePartReferencedMoreThanOnce
public string MtomPartNotFound
public string MtomRootContentTypeNotFound
public string MtomRootNotApplicationXopXml
public string MtomRootPartNotFound
public string MtomRootRequiredParamNotSpecified
public string MtomRootUnexpectedCharset
public string MtomRootUnexpectedType
public string MtomXopIncludeHrefNotSpecified
public string MtomXopIncludeInvalidXopAttributes
public string MtomXopIncludeInvalidXopElement
public string MustContainOnlyLocalElements
public string NoAsyncWritePending
public string NonOptionalFieldMemberOnIsReferenceSerializableType
public string OnlyDataContractTypesCanHaveExtensionData
public string PartialTrustISerializableNoPublicConstructor
public string QueryGeneratorPathToMemberNotFound
public string ReadNotSupportedOnStream
public string ReadOnlyClassDeserialization
public string ReadOnlyCollectionDeserialization
public string RecursiveCollectionType
public string RedefineNotSupported
public string ReferencedBaseTypeDoesNotExist
public string ReferencedCollectionTypesCannotContainNull
public string ReferencedTypeDoesNotMatch
public string ReferencedTypeMatchingMessage
public string ReferencedTypeNotMatchingMessage
public string ReferencedTypesCannotContainNull
public string RequiresClassDataContractToSetIsISerializable
public string RootParticleMustBeSequence
public string RootSequenceMaxOccursMustBe
public string RootSequenceMustBeRequired
public string SeekNotSupportedOnStream
public string SerializationInfo_ConstructorNotFound
public string SimpleContentNotSupported
public string SimpleTypeRestrictionDoesNotSpecifyBase
public string SimpleTypeUnionNotSupported
public string SpecifiedTypeNotFoundInSchema
public string SubstitutionGroupOnElementNotSupported
public string SurrogatesWithGetOnlyCollectionsNotSupported
public string SurrogatesWithGetOnlyCollectionsNotSupportedSerDeser
public string TopLevelElementRepresentsDifferentType
public string TraceCodeElementIgnored
public string TraceCodeFactoryTypeNotFound
public string TraceCodeObjectWithLargeDepth
public string TraceCodeReadObjectBegin
public string TraceCodeReadObjectEnd
public string TraceCodeWriteObjectBegin
public string TraceCodeWriteObjectContentBegin
public string TraceCodeWriteObjectContentEnd
public string TraceCodeWriteObjectEnd
public string TraceCodeXsdExportAnnotationFailed
public string TraceCodeXsdExportBegin
public string TraceCodeXsdExportDupItems
public string TraceCodeXsdExportEnd
public string TraceCodeXsdExportError
public string TraceCodeXsdImportAnnotationFailed
public string TraceCodeXsdImportBegin
public string TraceCodeXsdImportEnd
public string TraceCodeXsdImportError
public string TypeCannotBeForwardedFrom
public string TypeCannotBeImported
public string TypeCannotBeImportedHowToFix
public string TypeHasNotBeenImported
public string TypeMustBeIXmlSerializable
public string TypeShouldNotContainAttributes
public string UnknownXmlType
public string WriteBufferOverflow
public string WriteNotSupportedOnStream
public string XmlCanonicalizationNotStarted
public string XmlCanonicalizationStarted
public string XmlMaxArrayLengthOrMaxItemsQuotaExceeded
public string XmlMaxBytesPerReadExceeded
public string XmlMaxDepthExceeded
public string XmlMaxStringContentLengthExceeded
public string XmlObjectAssignedToIncompatibleInterface
internal string GetString(string name, Object[] args)
internal string GetString(CultureInfo culture, string name, Object[] args)
internal string GetString(string name)
internal string GetString(CultureInfo culture, string name)
}
internal System.Runtime.Serialization.StringDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal void .ctor(XmlDictionaryString name, XmlDictionaryString ns)
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.SurrogateDataContract : DataContract {
private SurrogateDataContractCriticalHelper helper
internal ISerializationSurrogate SerializationSurrogate
internal void .ctor(Type type, ISerializationSurrogate serializationSurrogate)
internal ISerializationSurrogate get_SerializationSurrogate()
public void WriteXmlValue(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context)
private object SerializationSurrogateSetObjectData(object obj, SerializationInfo serInfo, StreamingContext context)
internal object GetRealObject(IObjectReference obj, StreamingContext context)
private object GetUninitializedObject(Type objType)
private void SerializationSurrogateGetObjectData(object obj, SerializationInfo serInfo, StreamingContext context)
public object ReadXmlValue(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.TimeSpanDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal void .ctor(XmlDictionaryString name, XmlDictionaryString ns)
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.TypeHandleRef : object {
private RuntimeTypeHandle value
public RuntimeTypeHandle Value
public void .ctor(RuntimeTypeHandle value)
public RuntimeTypeHandle get_Value()
public void set_Value(RuntimeTypeHandle value)
}
internal System.Runtime.Serialization.TypeHandleRefEqualityComparer : object {
public bool Equals(TypeHandleRef x, TypeHandleRef y)
public int GetHashCode(TypeHandleRef obj)
}
internal System.Runtime.Serialization.TypeInformation : object {
private string fullTypeName
private string assemblyString
private bool hasTypeForwardedFrom
internal string FullTypeName
internal string AssemblyString
internal bool HasTypeForwardedFrom
internal void .ctor(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom)
internal string get_FullTypeName()
internal string get_AssemblyString()
internal bool get_HasTypeForwardedFrom()
}
internal System.Runtime.Serialization.UnsignedByteDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.UnsignedIntDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.UnsignedLongDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.UnsignedShortDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.UriDataContract : PrimitiveDataContract {
internal string WriteMethodName
internal string ReadMethodName
internal string get_WriteMethodName()
internal string get_ReadMethodName()
public void WriteXmlValue(XmlWriterDelegator writer, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator reader, XmlObjectSerializerReadContext context)
}
internal System.Runtime.Serialization.XmlDataContract : DataContract {
private XmlDataContractCriticalHelper helper
internal Dictionary`2<XmlQualifiedName, DataContract> KnownDataContracts
internal XmlSchemaType XsdType
internal bool IsAnonymous
internal bool HasRoot
internal XmlDictionaryString TopLevelElementName
internal XmlDictionaryString TopLevelElementNamespace
internal bool IsTopLevelElementNullable
internal bool IsTypeDefinedOnImport
internal CreateXmlSerializableDelegate CreateXmlSerializableDelegate
internal bool CanContainReferences
internal bool IsBuiltInDataContract
internal void .ctor(Type type)
internal Dictionary`2<XmlQualifiedName, DataContract> get_KnownDataContracts()
internal void set_KnownDataContracts(Dictionary`2<XmlQualifiedName, DataContract> value)
internal XmlSchemaType get_XsdType()
internal void set_XsdType(XmlSchemaType value)
internal bool get_IsAnonymous()
internal bool get_HasRoot()
internal void set_HasRoot(bool value)
internal XmlDictionaryString get_TopLevelElementName()
internal void set_TopLevelElementName(XmlDictionaryString value)
internal XmlDictionaryString get_TopLevelElementNamespace()
internal void set_TopLevelElementNamespace(XmlDictionaryString value)
internal bool get_IsTopLevelElementNullable()
internal void set_IsTopLevelElementNullable(bool value)
internal bool get_IsTypeDefinedOnImport()
internal void set_IsTypeDefinedOnImport(bool value)
internal CreateXmlSerializableDelegate get_CreateXmlSerializableDelegate()
internal bool get_CanContainReferences()
internal bool get_IsBuiltInDataContract()
private ConstructorInfo GetConstructor()
internal void SetTopLevelElementName(XmlQualifiedName elementName)
internal bool Equals(object other, Dictionary`2<DataContractPairKey, object> checkedContracts)
public int GetHashCode()
public void WriteXmlValue(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context)
public object ReadXmlValue(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context)
internal CreateXmlSerializableDelegate GenerateCreateXmlSerializableDelegate()
private IXmlSerializable <GenerateCreateXmlSerializableDelegate>b__39_0()
}
internal System.Runtime.Serialization.XmlDataContractInterpreter : object {
private XmlDataContract contract
public void .ctor(XmlDataContract contract)
public IXmlSerializable CreateXmlSerializable()
private ConstructorInfo GetConstructor()
}
internal System.Runtime.Serialization.XmlDataNode : DataNode`1<object> {
private IList`1<XmlAttribute> xmlAttributes
private IList`1<XmlNode> xmlChildNodes
private XmlDocument ownerDocument
internal IList`1<XmlAttribute> XmlAttributes
internal IList`1<XmlNode> XmlChildNodes
internal XmlDocument OwnerDocument
internal IList`1<XmlAttribute> get_XmlAttributes()
internal void set_XmlAttributes(IList`1<XmlAttribute> value)
internal IList`1<XmlNode> get_XmlChildNodes()
internal void set_XmlChildNodes(IList`1<XmlNode> value)
internal XmlDocument get_OwnerDocument()
internal void set_OwnerDocument(XmlDocument value)
public void Clear()
}
internal System.Runtime.Serialization.XmlFormatClassReaderDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context, XmlDictionaryString[] memberNames, XmlDictionaryString[] memberNamespaces)
public IAsyncResult BeginInvoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context, XmlDictionaryString[] memberNames, XmlDictionaryString[] memberNamespaces, AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.XmlFormatClassWriterDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context, ClassDataContract dataContract)
public IAsyncResult BeginInvoke(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context, ClassDataContract dataContract, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.XmlFormatCollectionReaderDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, CollectionDataContract collectionContract)
public IAsyncResult BeginInvoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, CollectionDataContract collectionContract, AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.XmlFormatCollectionWriterDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context, CollectionDataContract dataContract)
public IAsyncResult BeginInvoke(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context, CollectionDataContract dataContract, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.XmlFormatGeneratorStatics : object {
private MethodInfo writeStartElementMethod2
private MethodInfo writeStartElementMethod3
private MethodInfo writeEndElementMethod
private MethodInfo writeNamespaceDeclMethod
private PropertyInfo extensionDataProperty
private MethodInfo boxPointer
private ConstructorInfo dictionaryEnumeratorCtor
private MethodInfo ienumeratorMoveNextMethod
private MethodInfo ienumeratorGetCurrentMethod
private MethodInfo getItemContractMethod
private MethodInfo isStartElementMethod2
private MethodInfo isStartElementMethod0
private MethodInfo getUninitializedObjectMethod
private MethodInfo onDeserializationMethod
private MethodInfo unboxPointer
private PropertyInfo nodeTypeProperty
private ConstructorInfo serializationExceptionCtor
private ConstructorInfo extensionDataObjectCtor
private ConstructorInfo hashtableCtor
private MethodInfo getStreamingContextMethod
private MethodInfo getCollectionMemberMethod
private MethodInfo storeCollectionMemberInfoMethod
private MethodInfo storeIsGetOnlyCollectionMethod
private MethodInfo throwNullValueReturnedForGetOnlyCollectionExceptionMethod
private MethodInfo throwArrayExceededSizeExceptionMethod
private MethodInfo incrementItemCountMethod
private MethodInfo demandSerializationFormatterPermissionMethod
private MethodInfo demandMemberAccessPermissionMethod
private MethodInfo internalDeserializeMethod
private MethodInfo moveToNextElementMethod
private MethodInfo getMemberIndexMethod
private MethodInfo getMemberIndexWithRequiredMembersMethod
private MethodInfo throwRequiredMemberMissingExceptionMethod
private MethodInfo skipUnknownElementMethod
private MethodInfo readIfNullOrRefMethod
private MethodInfo readAttributesMethod
private MethodInfo resetAttributesMethod
private MethodInfo getObjectIdMethod
private MethodInfo getArraySizeMethod
private MethodInfo addNewObjectMethod
private MethodInfo addNewObjectWithIdMethod
private MethodInfo replaceDeserializedObjectMethod
private MethodInfo getExistingObjectMethod
private MethodInfo getRealObjectMethod
private MethodInfo readMethod
private MethodInfo ensureArraySizeMethod
private MethodInfo trimArraySizeMethod
private MethodInfo checkEndOfArrayMethod
private MethodInfo getArrayLengthMethod
private MethodInfo readSerializationInfoMethod
private MethodInfo createUnexpectedStateExceptionMethod
private MethodInfo internalSerializeReferenceMethod
private MethodInfo internalSerializeMethod
private MethodInfo writeNullMethod
private MethodInfo incrementArrayCountMethod
private MethodInfo incrementCollectionCountMethod
private MethodInfo incrementCollectionCountGenericMethod
private MethodInfo getDefaultValueMethod
private MethodInfo getNullableValueMethod
private MethodInfo throwRequiredMemberMustBeEmittedMethod
private MethodInfo getHasValueMethod
private MethodInfo writeISerializableMethod
private MethodInfo writeExtensionDataMethod
private MethodInfo writeXmlValueMethod
private MethodInfo readXmlValueMethod
private MethodInfo throwTypeNotSerializableMethod
private PropertyInfo namespaceProperty
private FieldInfo contractNamespacesField
private FieldInfo memberNamesField
private MethodInfo extensionDataSetExplicitMethodInfo
private PropertyInfo childElementNamespacesProperty
private PropertyInfo collectionItemNameProperty
private PropertyInfo childElementNamespaceProperty
private MethodInfo getDateTimeOffsetMethod
private MethodInfo getDateTimeOffsetAdapterMethod
private MethodInfo traceInstructionMethod
private MethodInfo throwInvalidDataContractExceptionMethod
private PropertyInfo serializeReadOnlyTypesProperty
private PropertyInfo classSerializationExceptionMessageProperty
private PropertyInfo collectionSerializationExceptionMessageProperty
internal MethodInfo WriteStartElementMethod2
internal MethodInfo WriteStartElementMethod3
internal MethodInfo WriteEndElementMethod
internal MethodInfo WriteNamespaceDeclMethod
internal PropertyInfo ExtensionDataProperty
internal MethodInfo BoxPointer
internal ConstructorInfo DictionaryEnumeratorCtor
internal MethodInfo MoveNextMethod
internal MethodInfo GetCurrentMethod
internal MethodInfo GetItemContractMethod
internal MethodInfo IsStartElementMethod2
internal MethodInfo IsStartElementMethod0
internal MethodInfo GetUninitializedObjectMethod
internal MethodInfo OnDeserializationMethod
internal MethodInfo UnboxPointer
internal PropertyInfo NodeTypeProperty
internal ConstructorInfo SerializationExceptionCtor
internal ConstructorInfo ExtensionDataObjectCtor
internal ConstructorInfo HashtableCtor
internal MethodInfo GetStreamingContextMethod
internal MethodInfo GetCollectionMemberMethod
internal MethodInfo StoreCollectionMemberInfoMethod
internal MethodInfo StoreIsGetOnlyCollectionMethod
internal MethodInfo ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod
internal MethodInfo ThrowArrayExceededSizeExceptionMethod
internal MethodInfo IncrementItemCountMethod
internal MethodInfo DemandSerializationFormatterPermissionMethod
internal MethodInfo DemandMemberAccessPermissionMethod
internal MethodInfo InternalDeserializeMethod
internal MethodInfo MoveToNextElementMethod
internal MethodInfo GetMemberIndexMethod
internal MethodInfo GetMemberIndexWithRequiredMembersMethod
internal MethodInfo ThrowRequiredMemberMissingExceptionMethod
internal MethodInfo SkipUnknownElementMethod
internal MethodInfo ReadIfNullOrRefMethod
internal MethodInfo ReadAttributesMethod
internal MethodInfo ResetAttributesMethod
internal MethodInfo GetObjectIdMethod
internal MethodInfo GetArraySizeMethod
internal MethodInfo AddNewObjectMethod
internal MethodInfo AddNewObjectWithIdMethod
internal MethodInfo ReplaceDeserializedObjectMethod
internal MethodInfo GetExistingObjectMethod
internal MethodInfo GetRealObjectMethod
internal MethodInfo ReadMethod
internal MethodInfo EnsureArraySizeMethod
internal MethodInfo TrimArraySizeMethod
internal MethodInfo CheckEndOfArrayMethod
internal MethodInfo GetArrayLengthMethod
internal MethodInfo ReadSerializationInfoMethod
internal MethodInfo CreateUnexpectedStateExceptionMethod
internal MethodInfo InternalSerializeReferenceMethod
internal MethodInfo InternalSerializeMethod
internal MethodInfo WriteNullMethod
internal MethodInfo IncrementArrayCountMethod
internal MethodInfo IncrementCollectionCountMethod
internal MethodInfo IncrementCollectionCountGenericMethod
internal MethodInfo GetDefaultValueMethod
internal MethodInfo GetNullableValueMethod
internal MethodInfo ThrowRequiredMemberMustBeEmittedMethod
internal MethodInfo GetHasValueMethod
internal MethodInfo WriteISerializableMethod
internal MethodInfo WriteExtensionDataMethod
internal MethodInfo WriteXmlValueMethod
internal MethodInfo ReadXmlValueMethod
internal MethodInfo ThrowTypeNotSerializableMethod
internal PropertyInfo NamespaceProperty
internal FieldInfo ContractNamespacesField
internal FieldInfo MemberNamesField
internal MethodInfo ExtensionDataSetExplicitMethodInfo
internal PropertyInfo ChildElementNamespacesProperty
internal PropertyInfo CollectionItemNameProperty
internal PropertyInfo ChildElementNamespaceProperty
internal MethodInfo GetDateTimeOffsetMethod
internal MethodInfo GetDateTimeOffsetAdapterMethod
internal MethodInfo TraceInstructionMethod
internal MethodInfo ThrowInvalidDataContractExceptionMethod
internal PropertyInfo SerializeReadOnlyTypesProperty
internal PropertyInfo ClassSerializationExceptionMessageProperty
internal PropertyInfo CollectionSerializationExceptionMessageProperty
internal MethodInfo get_WriteStartElementMethod2()
internal MethodInfo get_WriteStartElementMethod3()
internal MethodInfo get_WriteEndElementMethod()
internal MethodInfo get_WriteNamespaceDeclMethod()
internal PropertyInfo get_ExtensionDataProperty()
internal MethodInfo get_BoxPointer()
internal ConstructorInfo get_DictionaryEnumeratorCtor()
internal MethodInfo get_MoveNextMethod()
internal MethodInfo get_GetCurrentMethod()
internal MethodInfo get_GetItemContractMethod()
internal MethodInfo get_IsStartElementMethod2()
internal MethodInfo get_IsStartElementMethod0()
internal MethodInfo get_GetUninitializedObjectMethod()
internal MethodInfo get_OnDeserializationMethod()
internal MethodInfo get_UnboxPointer()
internal PropertyInfo get_NodeTypeProperty()
internal ConstructorInfo get_SerializationExceptionCtor()
internal ConstructorInfo get_ExtensionDataObjectCtor()
internal ConstructorInfo get_HashtableCtor()
internal MethodInfo get_GetStreamingContextMethod()
internal MethodInfo get_GetCollectionMemberMethod()
internal MethodInfo get_StoreCollectionMemberInfoMethod()
internal MethodInfo get_StoreIsGetOnlyCollectionMethod()
internal MethodInfo get_ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod()
internal MethodInfo get_ThrowArrayExceededSizeExceptionMethod()
internal MethodInfo get_IncrementItemCountMethod()
internal MethodInfo get_DemandSerializationFormatterPermissionMethod()
internal MethodInfo get_DemandMemberAccessPermissionMethod()
internal MethodInfo get_InternalDeserializeMethod()
internal MethodInfo get_MoveToNextElementMethod()
internal MethodInfo get_GetMemberIndexMethod()
internal MethodInfo get_GetMemberIndexWithRequiredMembersMethod()
internal MethodInfo get_ThrowRequiredMemberMissingExceptionMethod()
internal MethodInfo get_SkipUnknownElementMethod()
internal MethodInfo get_ReadIfNullOrRefMethod()
internal MethodInfo get_ReadAttributesMethod()
internal MethodInfo get_ResetAttributesMethod()
internal MethodInfo get_GetObjectIdMethod()
internal MethodInfo get_GetArraySizeMethod()
internal MethodInfo get_AddNewObjectMethod()
internal MethodInfo get_AddNewObjectWithIdMethod()
internal MethodInfo get_ReplaceDeserializedObjectMethod()
internal MethodInfo get_GetExistingObjectMethod()
internal MethodInfo get_GetRealObjectMethod()
internal MethodInfo get_ReadMethod()
internal MethodInfo get_EnsureArraySizeMethod()
internal MethodInfo get_TrimArraySizeMethod()
internal MethodInfo get_CheckEndOfArrayMethod()
internal MethodInfo get_GetArrayLengthMethod()
internal MethodInfo get_ReadSerializationInfoMethod()
internal MethodInfo get_CreateUnexpectedStateExceptionMethod()
internal MethodInfo get_InternalSerializeReferenceMethod()
internal MethodInfo get_InternalSerializeMethod()
internal MethodInfo get_WriteNullMethod()
internal MethodInfo get_IncrementArrayCountMethod()
internal MethodInfo get_IncrementCollectionCountMethod()
internal MethodInfo get_IncrementCollectionCountGenericMethod()
internal MethodInfo get_GetDefaultValueMethod()
internal MethodInfo get_GetNullableValueMethod()
internal MethodInfo get_ThrowRequiredMemberMustBeEmittedMethod()
internal MethodInfo get_GetHasValueMethod()
internal MethodInfo get_WriteISerializableMethod()
internal MethodInfo get_WriteExtensionDataMethod()
internal MethodInfo get_WriteXmlValueMethod()
internal MethodInfo get_ReadXmlValueMethod()
internal MethodInfo get_ThrowTypeNotSerializableMethod()
internal PropertyInfo get_NamespaceProperty()
internal FieldInfo get_ContractNamespacesField()
internal FieldInfo get_MemberNamesField()
internal MethodInfo get_ExtensionDataSetExplicitMethodInfo()
internal PropertyInfo get_ChildElementNamespacesProperty()
internal PropertyInfo get_CollectionItemNameProperty()
internal PropertyInfo get_ChildElementNamespaceProperty()
internal MethodInfo get_GetDateTimeOffsetMethod()
internal MethodInfo get_GetDateTimeOffsetAdapterMethod()
internal MethodInfo get_TraceInstructionMethod()
internal MethodInfo get_ThrowInvalidDataContractExceptionMethod()
internal PropertyInfo get_SerializeReadOnlyTypesProperty()
internal PropertyInfo get_ClassSerializationExceptionMessageProperty()
internal PropertyInfo get_CollectionSerializationExceptionMessageProperty()
}
internal System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, CollectionDataContract collectionContract)
public IAsyncResult BeginInvoke(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, CollectionDataContract collectionContract, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Runtime.Serialization.XmlFormatReaderGenerator : object {
private CriticalHelper helper
public XmlFormatClassReaderDelegate GenerateClassReader(ClassDataContract classContract)
public XmlFormatCollectionReaderDelegate GenerateCollectionReader(CollectionDataContract collectionContract)
public XmlFormatGetOnlyCollectionReaderDelegate GenerateGetOnlyCollectionReader(CollectionDataContract collectionContract)
internal object UnsafeGetUninitializedObject(int id)
}
internal System.Runtime.Serialization.XmlFormatReaderInterpreter : object {
private bool is_get_only_collection
private ClassDataContract classContract
private CollectionDataContract collectionContract
private object objectLocal
private Type objectType
private XmlReaderDelegator xmlReader
private XmlObjectSerializerReadContext context
private XmlDictionaryString[] memberNames
private XmlDictionaryString[] memberNamespaces
private XmlDictionaryString itemName
private XmlDictionaryString itemNamespace
public void .ctor(ClassDataContract classContract)
public void .ctor(CollectionDataContract collectionContract, bool isGetOnly)
public object ReadFromXml(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context, XmlDictionaryString[] memberNames, XmlDictionaryString[] memberNamespaces)
public object ReadCollectionFromXml(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, CollectionDataContract collectionContract)
public void ReadGetOnlyCollectionFromXml(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, CollectionDataContract collectionContract)
private void CreateObject(ClassDataContract classContract)
private void InvokeOnDeserializing(ClassDataContract classContract)
private void InvokeOnDeserialized(ClassDataContract classContract)
private bool HasFactoryMethod(ClassDataContract classContract)
private bool InvokeFactoryMethod(ClassDataContract classContract, string objectId)
private void ReadISerializable(ClassDataContract classContract)
private void ReadClass(ClassDataContract classContract)
private void ReadMembers(ClassDataContract classContract, ExtensionDataObject extensionData)
private int ReadMembers(int index, ClassDataContract classContract, Boolean[] requiredMembers, Int32& memberIndex, Int32& requiredIndex)
private Boolean[] GetRequiredMembers(ClassDataContract contract, Int32& firstRequiredMember)
private int GetRequiredMembers(ClassDataContract contract, Boolean[] requiredMembers)
private object ReadValue(Type type, string name, string ns)
private object InternalDeserialize(Type type, string name, string ns)
private object WrapNullableObject(Type innerType, object innerValue, Type outerType, int nullables)
private void ReadCollection(CollectionDataContract collectionContract)
private void ReadGetOnlyCollection(CollectionDataContract collectionContract)
private bool TryReadPrimitiveArray(Type type, Type itemType, int size, Boolean& readResult)
private object ReadCollectionItem(CollectionDataContract collectionContract, Type itemType, string itemName, string itemNs)
private void StoreCollectionValue(object collection, Type valueType, object value, CollectionDataContract collectionContract)
private void HandleUnexpectedItemInCollection(Int32& iterator)
private bool IsStartElement(XmlDictionaryString name, XmlDictionaryString ns)
private bool IsStartElement()
private bool IsEndElement()
}
internal System.Runtime.Serialization.XmlFormatWriterGenerator : object {
private CriticalHelper helper
internal XmlFormatClassWriterDelegate GenerateClassWriter(ClassDataContract classContract)
internal XmlFormatCollectionWriterDelegate GenerateCollectionWriter(CollectionDataContract collectionContract)
}
internal System.Runtime.Serialization.XmlFormatWriterInterpreter : object {
private ClassDataContract classContract
private CollectionDataContract collectionContract
private XmlWriterDelegator writer
private object obj
private XmlObjectSerializerWriteContext ctx
private DataContract dataContract
private object objLocal
private XmlDictionaryString[] contractNamespaces
private XmlDictionaryString[] memberNames
private XmlDictionaryString[] childElementNamespaces
private int typeIndex
private int childElementIndex
private ClassDataContract classDataContract
private CollectionDataContract collectionDataContract
public void .ctor(ClassDataContract classContract)
public void .ctor(CollectionDataContract collectionContract)
private ClassDataContract get_classDataContract()
private CollectionDataContract get_collectionDataContract()
public void WriteToXml(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context, ClassDataContract dataContract)
public void WriteCollectionToXml(XmlWriterDelegator xmlWriter, object obj, XmlObjectSerializerWriteContext context, CollectionDataContract collectionContract)
private void InitArgs(Type objType)
private void InvokeOnSerializing(ClassDataContract classContract, object objSerialized, XmlObjectSerializerWriteContext ctx)
private void InvokeOnSerialized(ClassDataContract classContract, object objSerialized, XmlObjectSerializerWriteContext ctx)
private void WriteClass(ClassDataContract classContract)
private void WriteCollection(CollectionDataContract collectionContract)
private int WriteMembers(ClassDataContract classContract, ExtensionDataObject extensionData, ClassDataContract derivedMostClassContract)
internal bool IsDefaultValue(Type type, object value)
internal object GetDefaultValue(Type type)
private bool CheckIfMemberHasConflict(DataMember member, ClassDataContract classContract, ClassDataContract derivedMostClassContract)
private bool CheckIfConflictingMembersHaveDifferentTypes(DataMember member)
private bool NeedsPrefix(Type type, XmlDictionaryString ns)
private void WriteStartElement(Type type, XmlDictionaryString ns, XmlDictionaryString namespaceLocal, XmlDictionaryString nameLocal, int nameIndex)
private void WriteEndElement()
private void WriteValue(Type memberType, object memberValue, bool writeXsiType)
private object UnwrapNullableObject(Func`1<object> memberValue, Type& memberType, Boolean& isNull)
private bool TryWritePrimitive(Type type, Func`1<object> value, MemberInfo memberInfo, Nullable`1<int> arrayItemIndex, XmlDictionaryString ns, XmlDictionaryString name, int nameIndex)
private bool TryWritePrimitiveArray(Type type, Type itemType, Func`1<object> value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
private object LoadMemberValue(DataMember member)
private object <WriteCollection>b__24_0()
}
public System.Runtime.Serialization.XmlObjectSerializer : object {
private IFormatterConverter formatterConverter
internal Dictionary`2<XmlQualifiedName, DataContract> KnownDataContracts
internal IFormatterConverter FormatterConverter
public void WriteStartObject(XmlDictionaryWriter writer, object graph)
public void WriteObjectContent(XmlDictionaryWriter writer, object graph)
public void WriteEndObject(XmlDictionaryWriter writer)
public void WriteObject(Stream stream, object graph)
public void WriteObject(XmlWriter writer, object graph)
public void WriteStartObject(XmlWriter writer, object graph)
public void WriteObjectContent(XmlWriter writer, object graph)
public void WriteEndObject(XmlWriter writer)
public void WriteObject(XmlDictionaryWriter writer, object graph)
internal void WriteObjectHandleExceptions(XmlWriterDelegator writer, object graph)
internal void WriteObjectHandleExceptions(XmlWriterDelegator writer, object graph, DataContractResolver dataContractResolver)
internal Dictionary`2<XmlQualifiedName, DataContract> get_KnownDataContracts()
internal void InternalWriteObject(XmlWriterDelegator writer, object graph)
internal void InternalWriteObject(XmlWriterDelegator writer, object graph, DataContractResolver dataContractResolver)
internal void InternalWriteStartObject(XmlWriterDelegator writer, object graph)
internal void InternalWriteObjectContent(XmlWriterDelegator writer, object graph)
internal void InternalWriteEndObject(XmlWriterDelegator writer)
internal void WriteStartObjectHandleExceptions(XmlWriterDelegator writer, object graph)
internal void WriteObjectContentHandleExceptions(XmlWriterDelegator writer, object graph)
internal void WriteEndObjectHandleExceptions(XmlWriterDelegator writer)
internal void WriteRootElement(XmlWriterDelegator writer, DataContract contract, XmlDictionaryString name, XmlDictionaryString ns, bool needsContractNsAtRoot)
internal bool CheckIfNeedsContractNsAtRoot(XmlDictionaryString name, XmlDictionaryString ns, DataContract contract)
internal void WriteNull(XmlWriterDelegator writer)
internal bool IsContractDeclared(DataContract contract, DataContract declaredContract)
public object ReadObject(Stream stream)
public object ReadObject(XmlReader reader)
public object ReadObject(XmlDictionaryReader reader)
public object ReadObject(XmlReader reader, bool verifyObjectName)
public object ReadObject(XmlDictionaryReader reader, bool verifyObjectName)
public bool IsStartObject(XmlReader reader)
public bool IsStartObject(XmlDictionaryReader reader)
internal object InternalReadObject(XmlReaderDelegator reader, bool verifyObjectName)
internal object InternalReadObject(XmlReaderDelegator reader, bool verifyObjectName, DataContractResolver dataContractResolver)
internal bool InternalIsStartObject(XmlReaderDelegator reader)
internal object ReadObjectHandleExceptions(XmlReaderDelegator reader, bool verifyObjectName)
internal object ReadObjectHandleExceptions(XmlReaderDelegator reader, bool verifyObjectName, DataContractResolver dataContractResolver)
internal bool IsStartObjectHandleExceptions(XmlReaderDelegator reader)
internal bool IsRootXmlAny(XmlDictionaryString rootName, DataContract contract)
internal bool IsStartElement(XmlReaderDelegator reader)
internal bool IsRootElement(XmlReaderDelegator reader, DataContract contract, XmlDictionaryString name, XmlDictionaryString ns)
internal void CheckNull(object obj, string name)
internal string TryAddLineInfo(XmlReaderDelegator reader, string errorMessage)
internal Exception CreateSerializationExceptionWithReaderDetails(string errorMessage, XmlReaderDelegator reader)
internal SerializationException CreateSerializationException(string errorMessage)
internal SerializationException CreateSerializationException(string errorMessage, Exception innerException)
private string GetTypeInfo(Type type)
private string GetTypeInfoError(string errorMessage, Type type, Exception innerException)
internal Type GetSerializeType(object graph)
internal Type GetDeserializeType()
internal IFormatterConverter get_FormatterConverter()
}
internal System.Runtime.Serialization.XmlObjectSerializerContext : object {
protected XmlObjectSerializer serializer
protected DataContract rootTypeDataContract
internal ScopedKnownTypes scopedKnownTypes
protected Dictionary`2<XmlQualifiedName, DataContract> serializerKnownDataContracts
private bool isSerializerKnownDataContractsSetExplicit
protected IList`1<Type> serializerKnownTypeList
private bool demandedSerializationFormatterPermission
private bool demandedMemberAccessPermission
private int itemCount
private int maxItemsInObjectGraph
private StreamingContext streamingContext
private bool ignoreExtensionDataObject
private DataContractResolver dataContractResolver
private KnownTypeDataContractResolver knownTypeResolver
private MethodInfo incrementItemCountMethod
internal SerializationMode Mode
internal bool IsGetOnlyCollection
internal MethodInfo IncrementItemCountMethod
internal int RemainingItemCount
internal bool IgnoreExtensionDataObject
protected DataContractResolver DataContractResolver
protected KnownTypeDataContractResolver KnownTypeResolver
private Dictionary`2<XmlQualifiedName, DataContract> SerializerKnownDataContracts
internal void .ctor(XmlObjectSerializer serializer, int maxItemsInObjectGraph, StreamingContext streamingContext, bool ignoreExtensionDataObject, DataContractResolver dataContractResolver)
internal void .ctor(XmlObjectSerializer serializer, int maxItemsInObjectGraph, StreamingContext streamingContext, bool ignoreExtensionDataObject)
internal void .ctor(DataContractSerializer serializer, DataContract rootTypeDataContract, DataContractResolver dataContractResolver)
internal void .ctor(NetDataContractSerializer serializer)
internal SerializationMode get_Mode()
internal bool get_IsGetOnlyCollection()
internal void set_IsGetOnlyCollection(bool value)
public void DemandSerializationFormatterPermission()
public void DemandMemberAccessPermission()
public StreamingContext GetStreamingContext()
internal MethodInfo get_IncrementItemCountMethod()
public void IncrementItemCount(int count)
internal int get_RemainingItemCount()
internal bool get_IgnoreExtensionDataObject()
protected DataContractResolver get_DataContractResolver()
protected KnownTypeDataContractResolver get_KnownTypeResolver()
internal DataContract GetDataContract(Type type)
internal DataContract GetDataContract(RuntimeTypeHandle typeHandle, Type type)
internal DataContract GetDataContractSkipValidation(int typeId, RuntimeTypeHandle typeHandle, Type type)
internal DataContract GetDataContract(int id, RuntimeTypeHandle typeHandle)
internal void CheckIfTypeSerializable(Type memberType, bool isMemberTypeSerializable)
internal Type GetSurrogatedType(Type type)
private Dictionary`2<XmlQualifiedName, DataContract> get_SerializerKnownDataContracts()
private DataContract GetDataContractFromSerializerKnownTypes(XmlQualifiedName qname)
internal Dictionary`2<XmlQualifiedName, DataContract> GetDataContractsForKnownTypes(IList`1<Type> knownTypeList)
internal bool IsKnownType(DataContract dataContract, Dictionary`2<XmlQualifiedName, DataContract> knownDataContracts, Type declaredType)
internal bool IsKnownType(DataContract dataContract, Type declaredType)
private DataContract ResolveDataContractFromKnownTypes(XmlQualifiedName typeName)
private DataContract ResolveDataContractFromDataContractResolver(XmlQualifiedName typeName, Type declaredType)
internal Type ResolveNameFromKnownTypes(XmlQualifiedName typeName)
protected DataContract ResolveDataContractFromKnownTypes(string typeName, string typeNs, DataContract memberTypeContract, Type declaredType)
protected DataContract ResolveDataContractFromRootDataContract(XmlQualifiedName typeQName)
}
internal System.Runtime.Serialization.XmlObjectSerializerReadContext : XmlObjectSerializerContext {
internal Attributes attributes
private HybridObjectCache deserializedObjects
private XmlSerializableReader xmlSerializableReader
private XmlDocument xmlDocument
private Attributes attributesInXmlData
private XmlReaderDelegator extensionDataReader
private object getOnlyCollectionValue
private bool isGetOnlyCollection
private HybridObjectCache DeserializedObjects
private XmlDocument Document
internal bool IsGetOnlyCollection
private HybridObjectCache get_DeserializedObjects()
private XmlDocument get_Document()
internal bool get_IsGetOnlyCollection()
internal void set_IsGetOnlyCollection(bool value)
internal object GetCollectionMember()
internal void StoreCollectionMemberInfo(object collectionMember)
internal void ThrowNullValueReturnedForGetOnlyCollectionException(Type type)
internal void ThrowArrayExceededSizeException(int arraySize, Type type)
internal XmlObjectSerializerReadContext CreateContext(DataContractSerializer serializer, DataContract rootTypeDataContract, DataContractResolver dataContractResolver)
internal XmlObjectSerializerReadContext CreateContext(NetDataContractSerializer serializer)
internal void .ctor(XmlObjectSerializer serializer, int maxItemsInObjectGraph, StreamingContext streamingContext, bool ignoreExtensionDataObject)
internal void .ctor(DataContractSerializer serializer, DataContract rootTypeDataContract, DataContractResolver dataContractResolver)
protected void .ctor(NetDataContractSerializer serializer)
public object InternalDeserialize(XmlReaderDelegator xmlReader, int id, RuntimeTypeHandle declaredTypeHandle, string name, string ns)
internal object InternalDeserialize(XmlReaderDelegator xmlReader, Type declaredType, string name, string ns)
internal object InternalDeserialize(XmlReaderDelegator xmlReader, Type declaredType, DataContract dataContract, string name, string ns)
protected bool TryHandleNullOrRef(XmlReaderDelegator reader, Type declaredType, string name, string ns, Object& retObj)
protected object InternalDeserialize(XmlReaderDelegator reader, string name, string ns, Type declaredType, DataContract& dataContract)
private bool ReplaceScopedKnownTypesTop(Dictionary`2<XmlQualifiedName, DataContract> knownDataContracts, bool knownTypesAddedInCurrentScope)
public bool MoveToNextElement(XmlReaderDelegator xmlReader)
public int GetMemberIndex(XmlReaderDelegator xmlReader, XmlDictionaryString[] memberNames, XmlDictionaryString[] memberNamespaces, int memberIndex, ExtensionDataObject extensionData)
public int GetMemberIndexWithRequiredMembers(XmlReaderDelegator xmlReader, XmlDictionaryString[] memberNames, XmlDictionaryString[] memberNamespaces, int memberIndex, int requiredIndex, ExtensionDataObject extensionData)
public void ThrowRequiredMemberMissingException(XmlReaderDelegator xmlReader, int memberIndex, int requiredIndex, XmlDictionaryString[] memberNames)
protected void HandleMemberNotFound(XmlReaderDelegator xmlReader, ExtensionDataObject extensionData, int memberIndex)
internal void HandleUnknownElement(XmlReaderDelegator xmlReader, ExtensionDataObject extensionData, int memberIndex)
public void SkipUnknownElement(XmlReaderDelegator xmlReader)
public string ReadIfNullOrRef(XmlReaderDelegator xmlReader, Type memberType, bool isMemberTypeSerializable)
internal void ReadAttributes(XmlReaderDelegator xmlReader)
public void ResetAttributes()
public string GetObjectId()
internal int GetArraySize()
public void AddNewObject(object obj)
public void AddNewObjectWithId(string id, object obj)
public void ReplaceDeserializedObject(string id, object oldObj, object newObj)
public object GetExistingObject(string id, Type type, string name, string ns)
private object GetExistingObjectOrExtensionData(string id)
public object GetRealObject(IObjectReference obj, string id)
private object DeserializeFromExtensionData(IDataNode dataNode, Type type, string name, string ns)
public void Read(XmlReaderDelegator xmlReader)
internal void ParseQualifiedName(string qname, XmlReaderDelegator xmlReader, String& name, String& ns, String& prefix)
public T[] EnsureArraySize(T[] array, int index)
public T[] TrimArraySize(T[] array, int size)
public void CheckEndOfArray(XmlReaderDelegator xmlReader, int arraySize, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
internal object ReadIXmlSerializable(XmlReaderDelegator xmlReader, XmlDataContract xmlDataContract, bool isMemberType)
internal object ReadRootIXmlSerializable(XmlReaderDelegator xmlReader, XmlDataContract xmlDataContract, bool isMemberType)
internal object ReadIXmlSerializable(XmlSerializableReader xmlSerializableReader, XmlReaderDelegator xmlReader, XmlDataContract xmlDataContract, bool isMemberType)
public SerializationInfo ReadSerializationInfo(XmlReaderDelegator xmlReader, Type type)
protected DataContract ResolveDataContractFromTypeName()
private ExtensionDataMember ReadExtensionDataMember(XmlReaderDelegator xmlReader, int memberIndex)
public IDataNode ReadExtensionDataValue(XmlReaderDelegator xmlReader)
protected void StartReadExtensionDataValue(XmlReaderDelegator xmlReader)
private IDataNode ReadExtensionDataValue(XmlReaderDelegator xmlReader, string dataContractName, string dataContractNamespace)
protected IDataNode ReadPrimitiveExtensionDataValue(XmlReaderDelegator xmlReader, string dataContractName, string dataContractNamespace)
protected void InitializeExtensionDataNode(IDataNode dataNode, string dataContractName, string dataContractNamespace)
private IDataNode ReadUnknownPrimitiveData(XmlReaderDelegator xmlReader, Type type, string dataContractName, string dataContractNamespace)
private ClassDataNode ReadUnknownClassData(XmlReaderDelegator xmlReader, string dataContractName, string dataContractNamespace)
private CollectionDataNode ReadUnknownCollectionData(XmlReaderDelegator xmlReader, string dataContractName, string dataContractNamespace)
private ISerializableDataNode ReadUnknownISerializableData(XmlReaderDelegator xmlReader, string dataContractName, string dataContractNamespace)
private IDataNode ReadUnknownXmlData(XmlReaderDelegator xmlReader, string dataContractName, string dataContractNamespace)
private IDataNode ReadAndResolveUnknownXmlData(XmlReaderDelegator xmlReader, IDictionary`2<string, string> namespaces, string dataContractName, string dataContractNamespace)
private bool IsContentNode(XmlNodeType nodeType)
internal XmlReaderDelegator CreateReaderOverChildNodes(IList`1<XmlAttribute> xmlAttributes, IList`1<XmlNode> xmlChildNodes)
internal XmlNode CreateWrapperXmlElement(XmlDocument document, IList`1<XmlAttribute> xmlAttributes, IList`1<XmlNode> xmlChildNodes, string prefix, string localName, string ns)
private XmlAttribute AddNamespaceDeclaration(string prefix, string ns)
public Exception CreateUnexpectedStateException(XmlNodeType expectedState, XmlReaderDelegator xmlReader)
protected object ReadDataContractValue(DataContract dataContract, XmlReaderDelegator reader)
protected XmlReaderDelegator CreateReaderDelegatorForReader(XmlReader xmlReader)
protected bool IsReadingCollectionExtensionData(XmlReaderDelegator xmlReader)
protected bool IsReadingClassExtensionData(XmlReaderDelegator xmlReader)
}
internal System.Runtime.Serialization.XmlObjectSerializerReadContextComplex : XmlObjectSerializerReadContext {
private Hashtable dataContractTypeCache
private bool preserveObjectReferences
protected IDataContractSurrogate dataContractSurrogate
private SerializationMode mode
private SerializationBinder binder
private ISurrogateSelector surrogateSelector
private FormatterAssemblyStyle assemblyFormat
private Hashtable surrogateDataContracts
internal SerializationMode Mode
internal void .ctor(DataContractSerializer serializer, DataContract rootTypeDataContract, DataContractResolver dataContractResolver)
internal void .ctor(NetDataContractSerializer serializer)
internal void .ctor(XmlObjectSerializer serializer, int maxItemsInObjectGraph, StreamingContext streamingContext, bool ignoreExtensionDataObject)
internal SerializationMode get_Mode()
internal DataContract GetDataContract(int id, RuntimeTypeHandle typeHandle)
internal DataContract GetDataContract(RuntimeTypeHandle typeHandle, Type type)
public object InternalDeserialize(XmlReaderDelegator xmlReader, int declaredTypeID, RuntimeTypeHandle declaredTypeHandle, string name, string ns)
internal object InternalDeserialize(XmlReaderDelegator xmlReader, Type declaredType, string name, string ns)
internal object InternalDeserialize(XmlReaderDelegator xmlReader, Type declaredType, DataContract dataContract, string name, string ns)
private object InternalDeserializeInSharedTypeMode(XmlReaderDelegator xmlReader, int declaredTypeID, Type declaredType, string name, string ns)
private object InternalDeserializeWithSurrogate(XmlReaderDelegator xmlReader, Type declaredType, DataContract surrogateDataContract, string name, string ns)
private Type ResolveDataContractTypeInSharedTypeMode(string assemblyName, string typeName, Assembly& assembly)
private DataContract ResolveDataContractInSharedTypeMode(string assemblyName, string typeName, Assembly& assembly, Type& type)
protected DataContract ResolveDataContractFromTypeName()
private bool CheckIfTypeSerializableForSharedTypeMode(Type memberType)
internal void CheckIfTypeSerializable(Type memberType, bool isMemberTypeSerializable)
internal Type GetSurrogatedType(Type type)
internal int GetArraySize()
private Assembly ResolveSimpleAssemblyName(AssemblyName assemblyName)
private Assembly ResolveSimpleAssemblyName(string assemblyName)
private void CheckTypeForwardedTo(Assembly sourceAssembly, Assembly destinationAssembly, Type resolvedType)
}
internal System.Runtime.Serialization.XmlObjectSerializerWriteContext : XmlObjectSerializerContext {
private ObjectReferenceStack byValObjectsInScope
private XmlSerializableWriter xmlSerializableWriter
private int depthToCheckCyclicReference
protected bool preserveObjectReferences
private ObjectToIdCache serializedObjects
private bool isGetOnlyCollection
private bool unsafeTypeForwardingEnabled
protected bool serializeReadOnlyTypes
protected ObjectToIdCache SerializedObjects
internal bool IsGetOnlyCollection
internal bool SerializeReadOnlyTypes
internal bool UnsafeTypeForwardingEnabled
internal XmlObjectSerializerWriteContext CreateContext(DataContractSerializer serializer, DataContract rootTypeDataContract, DataContractResolver dataContractResolver)
internal XmlObjectSerializerWriteContext CreateContext(NetDataContractSerializer serializer, Hashtable surrogateDataContracts)
protected void .ctor(DataContractSerializer serializer, DataContract rootTypeDataContract, DataContractResolver resolver)
protected void .ctor(NetDataContractSerializer serializer)
internal void .ctor(XmlObjectSerializer serializer, int maxItemsInObjectGraph, StreamingContext streamingContext, bool ignoreExtensionDataObject)
protected ObjectToIdCache get_SerializedObjects()
internal bool get_IsGetOnlyCollection()
internal void set_IsGetOnlyCollection(bool value)
internal bool get_SerializeReadOnlyTypes()
internal bool get_UnsafeTypeForwardingEnabled()
internal void StoreIsGetOnlyCollection()
public void InternalSerializeReference(XmlWriterDelegator xmlWriter, object obj, bool isDeclaredType, bool writeXsiType, int declaredTypeID, RuntimeTypeHandle declaredTypeHandle)
public void InternalSerialize(XmlWriterDelegator xmlWriter, object obj, bool isDeclaredType, bool writeXsiType, int declaredTypeID, RuntimeTypeHandle declaredTypeHandle)
internal void SerializeWithoutXsiType(DataContract dataContract, XmlWriterDelegator xmlWriter, object obj, RuntimeTypeHandle declaredTypeHandle)
internal void SerializeWithXsiTypeAtTopLevel(DataContract dataContract, XmlWriterDelegator xmlWriter, object obj, RuntimeTypeHandle originalDeclaredTypeHandle, Type graphType)
protected void SerializeWithXsiType(XmlWriterDelegator xmlWriter, object obj, RuntimeTypeHandle objectTypeHandle, Type objectType, int declaredTypeID, RuntimeTypeHandle declaredTypeHandle, Type declaredType)
internal bool OnHandleIsReference(XmlWriterDelegator xmlWriter, DataContract contract, object obj)
protected void SerializeAndVerifyType(DataContract dataContract, XmlWriterDelegator xmlWriter, object obj, bool verifyKnownType, RuntimeTypeHandle declaredTypeHandle, Type declaredType)
internal bool WriteClrTypeInfo(XmlWriterDelegator xmlWriter, DataContract dataContract)
internal bool WriteClrTypeInfo(XmlWriterDelegator xmlWriter, Type dataContractType, string clrTypeName, string clrAssemblyName)
internal bool WriteClrTypeInfo(XmlWriterDelegator xmlWriter, Type dataContractType, SerializationInfo serInfo)
public void WriteAnyType(XmlWriterDelegator xmlWriter, object value)
public void WriteString(XmlWriterDelegator xmlWriter, string value)
public void WriteString(XmlWriterDelegator xmlWriter, string value, XmlDictionaryString name, XmlDictionaryString ns)
public void WriteBase64(XmlWriterDelegator xmlWriter, Byte[] value)
public void WriteBase64(XmlWriterDelegator xmlWriter, Byte[] value, XmlDictionaryString name, XmlDictionaryString ns)
public void WriteUri(XmlWriterDelegator xmlWriter, Uri value)
public void WriteUri(XmlWriterDelegator xmlWriter, Uri value, XmlDictionaryString name, XmlDictionaryString ns)
public void WriteQName(XmlWriterDelegator xmlWriter, XmlQualifiedName value)
public void WriteQName(XmlWriterDelegator xmlWriter, XmlQualifiedName value, XmlDictionaryString name, XmlDictionaryString ns)
internal void HandleGraphAtTopLevel(XmlWriterDelegator writer, object obj, DataContract contract)
internal bool OnHandleReference(XmlWriterDelegator xmlWriter, object obj, bool canContainCyclicReference)
internal void OnEndHandleReference(XmlWriterDelegator xmlWriter, object obj, bool canContainCyclicReference)
public void WriteNull(XmlWriterDelegator xmlWriter, Type memberType, bool isMemberTypeSerializable)
internal void WriteNull(XmlWriterDelegator xmlWriter, Type memberType, bool isMemberTypeSerializable, XmlDictionaryString name, XmlDictionaryString ns)
public void IncrementArrayCount(XmlWriterDelegator xmlWriter, Array array)
public void IncrementCollectionCount(XmlWriterDelegator xmlWriter, ICollection collection)
public void IncrementCollectionCountGeneric(XmlWriterDelegator xmlWriter, ICollection`1<T> collection)
private void IncrementCollectionCount(XmlWriterDelegator xmlWriter, int size)
internal void WriteArraySize(XmlWriterDelegator xmlWriter, int size)
public T GetDefaultValue()
public T GetNullableValue(Nullable`1<T> value)
public void ThrowRequiredMemberMustBeEmitted(string memberName, Type type)
public bool GetHasValue(Nullable`1<T> value)
internal void WriteIXmlSerializable(XmlWriterDelegator xmlWriter, object obj)
internal void WriteRootIXmlSerializable(XmlWriterDelegator xmlWriter, object obj)
private void WriteIXmlSerializable(XmlWriterDelegator xmlWriter, object obj, XmlSerializableWriter xmlSerializableWriter)
internal void GetObjectData(ISerializable obj, SerializationInfo serInfo, StreamingContext context)
public void WriteISerializable(XmlWriterDelegator xmlWriter, ISerializable obj)
internal void WriteSerializationInfo(XmlWriterDelegator xmlWriter, Type objType, SerializationInfo serInfo)
public void WriteExtensionData(XmlWriterDelegator xmlWriter, ExtensionDataObject extensionData, int memberIndex)
private void WriteExtensionDataMember(XmlWriterDelegator xmlWriter, ExtensionDataMember member)
internal void WriteExtensionDataTypeInfo(XmlWriterDelegator xmlWriter, IDataNode dataNode)
internal void WriteExtensionDataValue(XmlWriterDelegator xmlWriter, IDataNode dataNode)
internal bool TryWriteDeserializedExtensionData(XmlWriterDelegator xmlWriter, IDataNode dataNode)
private void WriteExtensionClassData(XmlWriterDelegator xmlWriter, ClassDataNode dataNode)
private void WriteExtensionCollectionData(XmlWriterDelegator xmlWriter, CollectionDataNode dataNode)
private void WriteExtensionISerializableData(XmlWriterDelegator xmlWriter, ISerializableDataNode dataNode)
private void WriteExtensionXmlData(XmlWriterDelegator xmlWriter, XmlDataNode dataNode)
protected void WriteDataContractValue(DataContract dataContract, XmlWriterDelegator xmlWriter, object obj, RuntimeTypeHandle declaredTypeHandle)
protected void WriteNull(XmlWriterDelegator xmlWriter)
private void WriteResolvedTypeInfo(XmlWriterDelegator writer, Type objectType, Type declaredType)
private bool ResolveType(Type objectType, Type declaredType, XmlDictionaryString& typeName, XmlDictionaryString& typeNamespace)
protected bool WriteTypeInfo(XmlWriterDelegator writer, DataContract contract, DataContract declaredContract)
protected void WriteTypeInfo(XmlWriterDelegator writer, string dataContractName, string dataContractNamespace)
protected void WriteTypeInfo(XmlWriterDelegator writer, XmlDictionaryString dataContractName, XmlDictionaryString dataContractNamespace)
}
internal System.Runtime.Serialization.XmlObjectSerializerWriteContextComplex : XmlObjectSerializerWriteContext {
protected IDataContractSurrogate dataContractSurrogate
private SerializationMode mode
private SerializationBinder binder
private ISurrogateSelector surrogateSelector
private StreamingContext streamingContext
private Hashtable surrogateDataContracts
internal SerializationMode Mode
internal void .ctor(DataContractSerializer serializer, DataContract rootTypeDataContract, DataContractResolver dataContractResolver)
internal void .ctor(NetDataContractSerializer serializer, Hashtable surrogateDataContracts)
internal void .ctor(XmlObjectSerializer serializer, int maxItemsInObjectGraph, StreamingContext streamingContext, bool ignoreExtensionDataObject)
internal SerializationMode get_Mode()
internal DataContract GetDataContract(RuntimeTypeHandle typeHandle, Type type)
internal DataContract GetDataContract(int id, RuntimeTypeHandle typeHandle)
internal DataContract GetDataContractSkipValidation(int typeId, RuntimeTypeHandle typeHandle, Type type)
internal bool WriteClrTypeInfo(XmlWriterDelegator xmlWriter, DataContract dataContract)
internal bool WriteClrTypeInfo(XmlWriterDelegator xmlWriter, Type dataContractType, string clrTypeName, string clrAssemblyName)
internal bool WriteClrTypeInfo(XmlWriterDelegator xmlWriter, Type dataContractType, SerializationInfo serInfo)
public void WriteAnyType(XmlWriterDelegator xmlWriter, object value)
public void WriteString(XmlWriterDelegator xmlWriter, string value)
public void WriteString(XmlWriterDelegator xmlWriter, string value, XmlDictionaryString name, XmlDictionaryString ns)
public void WriteBase64(XmlWriterDelegator xmlWriter, Byte[] value)
public void WriteBase64(XmlWriterDelegator xmlWriter, Byte[] value, XmlDictionaryString name, XmlDictionaryString ns)
public void WriteUri(XmlWriterDelegator xmlWriter, Uri value)
public void WriteUri(XmlWriterDelegator xmlWriter, Uri value, XmlDictionaryString name, XmlDictionaryString ns)
public void WriteQName(XmlWriterDelegator xmlWriter, XmlQualifiedName value)
public void WriteQName(XmlWriterDelegator xmlWriter, XmlQualifiedName value, XmlDictionaryString name, XmlDictionaryString ns)
public void InternalSerialize(XmlWriterDelegator xmlWriter, object obj, bool isDeclaredType, bool writeXsiType, int declaredTypeID, RuntimeTypeHandle declaredTypeHandle)
internal bool OnHandleReference(XmlWriterDelegator xmlWriter, object obj, bool canContainCyclicReference)
internal void OnEndHandleReference(XmlWriterDelegator xmlWriter, object obj, bool canContainCyclicReference)
private bool CheckIfTypeSerializableForSharedTypeMode(Type memberType)
internal void CheckIfTypeSerializable(Type memberType, bool isMemberTypeSerializable)
internal Type GetSurrogatedType(Type type)
private void InternalSerializeWithSurrogate(XmlWriterDelegator xmlWriter, object obj, bool isDeclaredType, bool writeXsiType, int declaredTypeID, RuntimeTypeHandle declaredTypeHandle)
internal void WriteArraySize(XmlWriterDelegator xmlWriter, int size)
}
internal System.Runtime.Serialization.XmlReaderDelegator : object {
protected XmlReader reader
protected XmlDictionaryReader dictionaryReader
protected bool isEndOfEmptyElement
internal XmlReader UnderlyingReader
internal ExtensionDataReader UnderlyingExtensionDataReader
internal int AttributeCount
internal bool IsEmptyElement
public XmlNodeType NodeType
internal int LineNumber
internal int LinePosition
internal bool Normalized
internal WhitespaceHandling WhitespaceHandling
internal string Name
public string LocalName
internal string NamespaceURI
internal string Value
internal Type ValueType
internal int Depth
internal bool EOF
public void .ctor(XmlReader reader)
internal XmlReader get_UnderlyingReader()
internal ExtensionDataReader get_UnderlyingExtensionDataReader()
internal int get_AttributeCount()
internal string GetAttribute(string name)
internal string GetAttribute(string name, string namespaceUri)
internal string GetAttribute(int i)
internal bool get_IsEmptyElement()
internal bool IsNamespaceURI(string ns)
internal bool IsLocalName(string localName)
internal bool IsNamespaceUri(XmlDictionaryString ns)
internal bool IsLocalName(XmlDictionaryString localName)
internal int IndexOfLocalName(XmlDictionaryString[] localNames, XmlDictionaryString ns)
public bool IsStartElement()
internal bool IsStartElement(string localname, string ns)
public bool IsStartElement(XmlDictionaryString localname, XmlDictionaryString ns)
internal bool MoveToAttribute(string name)
internal bool MoveToAttribute(string name, string ns)
internal void MoveToAttribute(int i)
internal bool MoveToElement()
internal bool MoveToFirstAttribute()
internal bool MoveToNextAttribute()
public XmlNodeType get_NodeType()
internal bool Read()
internal XmlNodeType MoveToContent()
internal bool ReadAttributeValue()
public void ReadEndElement()
private Exception CreateInvalidPrimitiveTypeException(Type type)
public object ReadElementContentAsAnyType(Type valueType)
internal object ReadContentAsAnyType(Type valueType)
internal IDataNode ReadExtensionData(Type valueType)
private void ThrowConversionException(string value, string type)
private void ThrowNotAtElement()
internal char ReadElementContentAsChar()
internal char ReadContentAsChar()
private char ToChar(int value)
public string ReadElementContentAsString()
internal string ReadContentAsString()
public bool ReadElementContentAsBoolean()
internal bool ReadContentAsBoolean()
public float ReadElementContentAsFloat()
internal float ReadContentAsSingle()
public double ReadElementContentAsDouble()
internal double ReadContentAsDouble()
public decimal ReadElementContentAsDecimal()
internal decimal ReadContentAsDecimal()
internal Byte[] ReadElementContentAsBase64()
internal Byte[] ReadContentAsBase64()
internal Byte[] ReadContentAsBase64(string str)
internal DateTime ReadElementContentAsDateTime()
internal DateTime ReadContentAsDateTime()
public int ReadElementContentAsInt()
internal int ReadContentAsInt()
public long ReadElementContentAsLong()
internal long ReadContentAsLong()
public short ReadElementContentAsShort()
internal short ReadContentAsShort()
private short ToShort(int value)
public byte ReadElementContentAsUnsignedByte()
internal byte ReadContentAsUnsignedByte()
private byte ToByte(int value)
public sbyte ReadElementContentAsSignedByte()
internal sbyte ReadContentAsSignedByte()
private sbyte ToSByte(int value)
public UInt32 ReadElementContentAsUnsignedInt()
internal UInt32 ReadContentAsUnsignedInt()
private UInt32 ToUInt32(long value)
internal ulong ReadElementContentAsUnsignedLong()
internal ulong ReadContentAsUnsignedLong()
public ushort ReadElementContentAsUnsignedShort()
internal ushort ReadContentAsUnsignedShort()
private ushort ToUInt16(int value)
public TimeSpan ReadElementContentAsTimeSpan()
internal TimeSpan ReadContentAsTimeSpan()
public Guid ReadElementContentAsGuid()
internal Guid ReadContentAsGuid()
public Uri ReadElementContentAsUri()
internal Uri ReadContentAsUri()
public XmlQualifiedName ReadElementContentAsQName()
internal XmlQualifiedName ReadContentAsQName()
private XmlQualifiedName ParseQualifiedName(string str)
private void CheckExpectedArrayLength(XmlObjectSerializerReadContext context, int arrayLength)
protected int GetArrayLengthQuota(XmlObjectSerializerReadContext context)
private void CheckActualArrayLength(int expectedLength, int actualLength, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
internal bool TryReadBooleanArray(XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, int arrayLength, Boolean[]& array)
internal bool TryReadDateTimeArray(XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, int arrayLength, DateTime[]& array)
internal bool TryReadDecimalArray(XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, int arrayLength, Decimal[]& array)
internal bool TryReadInt32Array(XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, int arrayLength, Int32[]& array)
internal bool TryReadInt64Array(XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, int arrayLength, Int64[]& array)
internal bool TryReadSingleArray(XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, int arrayLength, Single[]& array)
internal bool TryReadDoubleArray(XmlObjectSerializerReadContext context, XmlDictionaryString itemName, XmlDictionaryString itemNamespace, int arrayLength, Double[]& array)
internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
internal bool HasLineInfo()
internal int get_LineNumber()
internal int get_LinePosition()
internal bool get_Normalized()
internal void set_Normalized(bool value)
internal WhitespaceHandling get_WhitespaceHandling()
internal void set_WhitespaceHandling(WhitespaceHandling value)
internal string get_Name()
public string get_LocalName()
internal string get_NamespaceURI()
internal string get_Value()
internal Type get_ValueType()
internal int get_Depth()
internal string LookupNamespace(string prefix)
internal bool get_EOF()
internal void Skip()
}
internal System.Runtime.Serialization.XmlSerializableReader : XmlReader {
private XmlReaderDelegator xmlReader
private int startDepth
private bool isRootEmptyElement
private XmlReader innerReader
private XmlReader InnerReader
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public IXmlSchemaInfo SchemaInfo
public Type ValueType
public int AttributeCount
public string Item
public string Item
public string Item
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public bool CanResolveEntity
public bool CanReadBinaryContent
public bool CanReadValueChunk
public bool HasAttributes
private bool System.Xml.Serialization.IXmlTextParser.Normalized
private WhitespaceHandling System.Xml.Serialization.IXmlTextParser.WhitespaceHandling
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
private XmlReader get_InnerReader()
internal void BeginRead(XmlReaderDelegator xmlReader)
internal void EndRead()
public bool Read()
public void Close()
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public IXmlSchemaInfo get_SchemaInfo()
public Type get_ValueType()
public int get_AttributeCount()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string namespaceURI)
public bool get_EOF()
public ReadState get_ReadState()
public XmlNameTable get_NameTable()
public bool get_CanResolveEntity()
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public bool get_HasAttributes()
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public string LookupNamespace(string prefix)
public bool ReadAttributeValue()
public void ResolveEntity()
public bool IsStartElement()
public bool IsStartElement(string name)
public bool IsStartElement(string localname, string ns)
public XmlNodeType MoveToContent()
public object ReadContentAsObject()
public bool ReadContentAsBoolean()
public DateTime ReadContentAsDateTime()
public double ReadContentAsDouble()
public int ReadContentAsInt()
public long ReadContentAsLong()
public string ReadContentAsString()
public object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadValueChunk(Char[] buffer, int index, int count)
public string ReadString()
private bool System.Xml.Serialization.IXmlTextParser.get_Normalized()
private void System.Xml.Serialization.IXmlTextParser.set_Normalized(bool value)
private WhitespaceHandling System.Xml.Serialization.IXmlTextParser.get_WhitespaceHandling()
private void System.Xml.Serialization.IXmlTextParser.set_WhitespaceHandling(WhitespaceHandling value)
private bool System.Xml.IXmlLineInfo.HasLineInfo()
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
}
public System.Runtime.Serialization.XmlSerializableServices : object {
internal string ReadNodesMethodName
internal string WriteNodesMethodName
internal string AddDefaultSchemaMethodName
public XmlNode[] ReadNodes(XmlReader xmlReader)
private bool IsValidAttribute(XmlReader xmlReader)
public void WriteNodes(XmlWriter xmlWriter, XmlNode[] nodes)
public void AddDefaultSchema(XmlSchemaSet schemas, XmlQualifiedName typeQName)
}
internal System.Runtime.Serialization.XmlSerializableWriter : XmlWriter {
private XmlWriter xmlWriter
private int depth
private object obj
public WriteState WriteState
public XmlSpace XmlSpace
public string XmlLang
internal void BeginWrite(XmlWriter xmlWriter, object obj)
internal void EndWrite()
public void WriteStartDocument()
public void WriteEndDocument()
public void WriteStartDocument(bool standalone)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void Close()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public WriteState get_WriteState()
public void Flush()
public void WriteName(string name)
public void WriteQualifiedName(string localName, string ns)
public string LookupPrefix(string ns)
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public void WriteNmToken(string name)
}
internal System.Runtime.Serialization.XmlWriterDelegator : object {
protected XmlWriter writer
protected XmlDictionaryWriter dictionaryWriter
internal int depth
private int prefixes
private int CharChunkSize
private int ByteChunkSize
internal XmlWriter Writer
internal WriteState WriteState
internal string XmlLang
internal XmlSpace XmlSpace
public void .ctor(XmlWriter writer)
internal XmlWriter get_Writer()
internal void Flush()
internal string LookupPrefix(string ns)
private void WriteEndAttribute()
public void WriteEndElement()
internal void WriteRaw(Char[] buffer, int index, int count)
internal void WriteRaw(string data)
internal void WriteXmlnsAttribute(XmlDictionaryString ns)
internal void WriteXmlnsAttribute(string ns)
internal void WriteXmlnsAttribute(string prefix, XmlDictionaryString ns)
private void WriteStartAttribute(string prefix, string localName, string ns)
private void WriteStartAttribute(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)
internal void WriteAttributeString(string prefix, string localName, string ns, string value)
internal void WriteAttributeString(string prefix, XmlDictionaryString attrName, XmlDictionaryString attrNs, string value)
private void WriteAttributeStringValue(string value)
internal void WriteAttributeString(string prefix, XmlDictionaryString attrName, XmlDictionaryString attrNs, XmlDictionaryString value)
private void WriteAttributeStringValue(XmlDictionaryString value)
internal void WriteAttributeInt(string prefix, XmlDictionaryString attrName, XmlDictionaryString attrNs, int value)
private void WriteAttributeIntValue(int value)
internal void WriteAttributeBool(string prefix, XmlDictionaryString attrName, XmlDictionaryString attrNs, bool value)
private void WriteAttributeBoolValue(bool value)
internal void WriteAttributeQualifiedName(string attrPrefix, XmlDictionaryString attrName, XmlDictionaryString attrNs, string name, string ns)
private void WriteAttributeQualifiedNameValue(string name, string ns)
internal void WriteAttributeQualifiedName(string attrPrefix, XmlDictionaryString attrName, XmlDictionaryString attrNs, XmlDictionaryString name, XmlDictionaryString ns)
private void WriteAttributeQualifiedNameValue(XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteStartElement(string localName, string ns)
internal void WriteStartElement(string prefix, string localName, string ns)
public void WriteStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
internal void WriteStartElement(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)
internal void WriteStartElementPrimitive(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
internal void WriteEndElementPrimitive()
internal WriteState get_WriteState()
internal string get_XmlLang()
internal XmlSpace get_XmlSpace()
public void WriteNamespaceDecl(XmlDictionaryString ns)
private Exception CreateInvalidPrimitiveTypeException(Type type)
internal void WriteAnyType(object value)
internal void WriteAnyType(object value, Type valueType)
internal void WriteExtensionData(IDataNode dataNode)
internal void WriteString(string value)
internal void WriteBoolean(bool value)
public void WriteBoolean(bool value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteDateTime(DateTime value)
public void WriteDateTime(DateTime value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteDecimal(decimal value)
public void WriteDecimal(decimal value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteDouble(double value)
public void WriteDouble(double value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteInt(int value)
public void WriteInt(int value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteLong(long value)
public void WriteLong(long value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteFloat(float value)
public void WriteFloat(float value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteBase64(Byte[] bytes)
internal void WriteShort(short value)
public void WriteShort(short value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteUnsignedByte(byte value)
public void WriteUnsignedByte(byte value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteSignedByte(sbyte value)
public void WriteSignedByte(sbyte value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteUnsignedInt(UInt32 value)
public void WriteUnsignedInt(UInt32 value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteUnsignedLong(ulong value)
public void WriteUnsignedLong(ulong value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteUnsignedShort(ushort value)
public void WriteUnsignedShort(ushort value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteChar(char value)
public void WriteChar(char value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteTimeSpan(TimeSpan value)
public void WriteTimeSpan(TimeSpan value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteGuid(Guid value)
public void WriteGuid(Guid value, XmlDictionaryString name, XmlDictionaryString ns)
internal void WriteUri(Uri value)
internal void WriteQName(XmlQualifiedName value)
internal void WriteQualifiedName(string localName, string ns)
internal void WriteQualifiedName(XmlDictionaryString localName, XmlDictionaryString ns)
public void WriteBooleanArray(Boolean[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
public void WriteDateTimeArray(DateTime[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
public void WriteDecimalArray(Decimal[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
public void WriteInt32Array(Int32[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
public void WriteInt64Array(Int64[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
public void WriteSingleArray(Single[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
public void WriteDoubleArray(Double[] value, XmlDictionaryString itemName, XmlDictionaryString itemNamespace)
}
public System.Runtime.Serialization.XPathQueryGenerator : object {
private string XPathSeparator
private string NsSeparator
public string CreateFromDataContractSerializer(Type type, MemberInfo[] pathToMember, XmlNamespaceManager& namespaces)
public string CreateFromDataContractSerializer(Type type, MemberInfo[] pathToMember, StringBuilder rootElementXpath, XmlNamespaceManager& namespaces)
private DataContract ProcessDataContract(DataContract contract, ExportContext context, MemberInfo memberNode)
private DataContract ProcessClassDataContract(ClassDataContract contract, ExportContext context, MemberInfo memberNode)
private IEnumerable`1<DataMember> GetDataMembers(ClassDataContract contract)
}
public System.Runtime.Serialization.XsdDataContractExporter : object {
private ExportOptions options
private XmlSchemaSet schemas
private DataContractSet dataContractSet
public ExportOptions Options
public XmlSchemaSet Schemas
private DataContractSet DataContractSet
public void .ctor(XmlSchemaSet schemas)
public ExportOptions get_Options()
public void set_Options(ExportOptions value)
public XmlSchemaSet get_Schemas()
private XmlSchemaSet GetSchemaSet()
private DataContractSet get_DataContractSet()
private void TraceExportBegin()
private void TraceExportEnd()
private void TraceExportError(Exception exception)
public void Export(ICollection`1<Assembly> assemblies)
public void Export(ICollection`1<Type> types)
public void Export(Type type)
public XmlQualifiedName GetSchemaTypeName(Type type)
public XmlSchemaType GetSchemaType(Type type)
public XmlQualifiedName GetRootElementName(Type type)
private Type GetSurrogatedType(Type type)
private void CheckAndAddType(Type type)
private void AddType(Type type)
private void Export()
private void AddKnownTypes()
public bool CanExport(ICollection`1<Assembly> assemblies)
public bool CanExport(ICollection`1<Type> types)
public bool CanExport(Type type)
}
public System.Runtime.Serialization.XsdDataContractImporter : object {
private ImportOptions options
private CodeCompileUnit codeCompileUnit
private DataContractSet dataContractSet
private XmlQualifiedName[] emptyTypeNameArray
private XmlSchemaElement[] emptyElementArray
private XmlQualifiedName[] singleTypeNameArray
private XmlSchemaElement[] singleElementArray
public ImportOptions Options
public CodeCompileUnit CodeCompileUnit
private DataContractSet DataContractSet
private XmlQualifiedName[] SingleTypeNameArray
private XmlSchemaElement[] SingleElementArray
private bool ImportXmlDataType
public void .ctor(CodeCompileUnit codeCompileUnit)
public ImportOptions get_Options()
public void set_Options(ImportOptions value)
public CodeCompileUnit get_CodeCompileUnit()
private CodeCompileUnit GetCodeCompileUnit()
private DataContractSet get_DataContractSet()
public void Import(XmlSchemaSet schemas)
public void Import(XmlSchemaSet schemas, ICollection`1<XmlQualifiedName> typeNames)
public void Import(XmlSchemaSet schemas, XmlQualifiedName typeName)
public XmlQualifiedName Import(XmlSchemaSet schemas, XmlSchemaElement element)
public bool CanImport(XmlSchemaSet schemas)
public bool CanImport(XmlSchemaSet schemas, ICollection`1<XmlQualifiedName> typeNames)
public bool CanImport(XmlSchemaSet schemas, XmlQualifiedName typeName)
public bool CanImport(XmlSchemaSet schemas, XmlSchemaElement element)
public CodeTypeReference GetCodeTypeReference(XmlQualifiedName typeName)
public CodeTypeReference GetCodeTypeReference(XmlQualifiedName typeName, XmlSchemaElement element)
internal DataContract FindDataContract(XmlQualifiedName typeName)
public ICollection`1<CodeTypeReference> GetKnownTypeReferences(XmlQualifiedName typeName)
private XmlQualifiedName[] get_SingleTypeNameArray()
private XmlSchemaElement[] get_SingleElementArray()
private void InternalImport(XmlSchemaSet schemas, ICollection`1<XmlQualifiedName> typeNames, ICollection`1<XmlSchemaElement> elements, XmlQualifiedName[] elementTypeNames)
private bool get_ImportXmlDataType()
private void TraceImportError(Exception exception)
private bool InternalCanImport(XmlSchemaSet schemas, ICollection`1<XmlQualifiedName> typeNames, ICollection`1<XmlSchemaElement> elements, XmlQualifiedName[] elementTypeNames)
}
internal System.Text.Base64Encoding : Encoding {
private Byte[] char2val
private string val2char
private Byte[] val2byte
public int GetMaxByteCount(int charCount)
private bool IsValidLeadBytes(int v1, int v2, int v3, int v4)
private bool IsValidTailBytes(int v3, int v4)
public int GetByteCount(Char[] chars, int index, int count)
public int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex)
public int GetBytes(Byte[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex)
public int GetMaxCharCount(int byteCount)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Byte[] chars, int charIndex)
}
internal System.Text.BinHexEncoding : Encoding {
private Byte[] char2val
private string val2char
public int GetMaxByteCount(int charCount)
public int GetByteCount(Char[] chars, int index, int count)
public int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex)
public int GetMaxCharCount(int byteCount)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
}
internal System.Text.SurrogateChar : ValueType {
private char lowChar
private char highChar
public int MinValue
public int MaxValue
private char surHighMin
private char surHighMax
private char surLowMin
private char surLowMax
public char LowChar
public char HighChar
public int Char
public void .ctor(int ch)
public void .ctor(char lowChar, char highChar)
public char get_LowChar()
public char get_HighChar()
public int get_Char()
}
internal System.Xml.ArrayHelper`2 : object {
public TArray[] ReadArray(XmlDictionaryReader reader, TArgument localName, TArgument namespaceUri, int maxArrayLength)
public void WriteArray(XmlDictionaryWriter writer, string prefix, TArgument localName, TArgument namespaceUri, XmlDictionaryReader reader)
protected int ReadArray(XmlDictionaryReader reader, TArgument localName, TArgument namespaceUri, TArray[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, TArgument localName, TArgument namespaceUri, TArray[] array, int offset, int count)
}
internal System.Xml.BooleanArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, bool> {
public BooleanArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int count)
}
internal System.Xml.BooleanArrayHelperWithString : ArrayHelper`2<string, bool> {
public BooleanArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, Boolean[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, Boolean[] array, int offset, int count)
}
internal System.Xml.BufferedReadStream : Stream {
private Stream stream
private Byte[] storedBuffer
private int storedLength
private int storedOffset
private bool readMore
public bool CanWrite
public bool CanSeek
public bool CanRead
public long Length
public long Position
public void .ctor(Stream stream)
public void .ctor(Stream stream, bool readMore)
public bool get_CanWrite()
public bool get_CanSeek()
public bool get_CanRead()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public void Close()
public int EndRead(IAsyncResult asyncResult)
public void EndWrite(IAsyncResult asyncResult)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public int ReadBlock(Byte[] buffer, int offset, int count)
public void Push(Byte[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
}
internal System.Xml.BufferedWrite : object {
private Byte[] buffer
private int offset
internal int Length
internal void .ctor(int initialSize)
private void EnsureBuffer(int count)
internal int get_Length()
internal Byte[] GetBuffer()
internal void Reset()
internal void Write(Byte[] value)
internal void Write(Byte[] value, int index, int count)
internal void Write(string value)
internal void Write(string value, int index, int count)
}
internal System.Xml.ContentIDHeader : MimeHeader {
public void .ctor(string name, string value)
}
internal System.Xml.ContentTransferEncoding : Enum {
public int value__
public ContentTransferEncoding SevenBit
public ContentTransferEncoding EightBit
public ContentTransferEncoding Binary
public ContentTransferEncoding Other
public ContentTransferEncoding Unspecified
}
internal System.Xml.ContentTransferEncodingHeader : MimeHeader {
private ContentTransferEncoding contentTransferEncoding
private string contentTransferEncodingValue
public ContentTransferEncodingHeader Binary
public ContentTransferEncodingHeader EightBit
public ContentTransferEncodingHeader SevenBit
public ContentTransferEncoding ContentTransferEncoding
public string ContentTransferEncodingValue
public void .ctor(string value)
public void .ctor(ContentTransferEncoding contentTransferEncoding, string value)
public ContentTransferEncoding get_ContentTransferEncoding()
public string get_ContentTransferEncodingValue()
private void ParseValue()
}
internal System.Xml.ContentTypeHeader : MimeHeader {
public ContentTypeHeader Default
private string mediaType
private string subType
private Dictionary`2<string, string> parameters
public string MediaType
public string MediaSubtype
public Dictionary`2<string, string> Parameters
public void .ctor(string value)
public string get_MediaType()
public string get_MediaSubtype()
public Dictionary`2<string, string> get_Parameters()
private void ParseValue()
}
internal System.Xml.DateTimeArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, DateTime> {
public DateTimeArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int count)
}
internal System.Xml.DateTimeArrayHelperWithString : ArrayHelper`2<string, DateTime> {
public DateTimeArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, DateTime[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, DateTime[] array, int offset, int count)
}
internal System.Xml.DecimalArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, decimal> {
public DecimalArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int count)
}
internal System.Xml.DecimalArrayHelperWithString : ArrayHelper`2<string, decimal> {
public DecimalArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, Decimal[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, Decimal[] array, int offset, int count)
}
internal System.Xml.DelimittedStreamReader : object {
private bool canGetNextStream
private DelimittedReadStream currentStream
private Byte[] delimitter
private Byte[] matchBuffer
private Byte[] scratch
private BufferedReadStream stream
public void .ctor(Stream stream)
public void Close()
private void Close(DelimittedReadStream caller)
public Stream GetNextStream(Byte[] delimitter)
private MatchState MatchDelimitter(Byte[] buffer, int start, int end)
private int ProcessRead(Byte[] buffer, int offset, int read)
private int Read(DelimittedReadStream caller, Byte[] buffer, int offset, int count)
private bool MatchRemainder(int start, int count)
internal void Push(Byte[] buffer, int offset, int count)
}
internal System.Xml.DoubleArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, double> {
public DoubleArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int count)
}
internal System.Xml.DoubleArrayHelperWithString : ArrayHelper`2<string, double> {
public DoubleArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, Double[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, Double[] array, int offset, int count)
}
internal System.Xml.EncodingStreamWrapper : Stream {
private UTF8Encoding SafeUTF8
private UnicodeEncoding SafeUTF16
private UnicodeEncoding SafeBEUTF16
private UTF8Encoding ValidatingUTF8
private UnicodeEncoding ValidatingUTF16
private UnicodeEncoding ValidatingBEUTF16
private int BufferLength
private Byte[] encodingAttr
private Byte[] encodingUTF8
private Byte[] encodingUnicode
private Byte[] encodingUnicodeLE
private Byte[] encodingUnicodeBE
private SupportedEncoding encodingCode
private Encoding encoding
private Encoder enc
private Decoder dec
private bool isReading
private Stream stream
private Char[] chars
private Byte[] bytes
private int byteOffset
private int byteCount
private Byte[] byteBuffer
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Position
public bool CanTimeout
public long Length
public int ReadTimeout
public int WriteTimeout
public void .ctor(Stream stream, Encoding encoding)
private void SetReadDocumentEncoding(SupportedEncoding e)
private Encoding GetEncoding(SupportedEncoding e)
private Encoding GetSafeEncoding(SupportedEncoding e)
private string GetEncodingName(SupportedEncoding enc)
private SupportedEncoding GetSupportedEncoding(Encoding encoding)
public void .ctor(Stream stream, Encoding encoding, bool emitBOM)
private SupportedEncoding ReadBOMEncoding(bool notOutOfBand)
private SupportedEncoding ReadBOMEncoding(byte b1, byte b2, byte b3, byte b4, bool notOutOfBand, Int32& preserve)
private void FillBuffer(int count)
private void EnsureBuffers()
private void EnsureByteBuffer()
private void CheckUTF8DeclarationEncoding(Byte[] buffer, int offset, int count, SupportedEncoding e, SupportedEncoding expectedEnc)
private bool CompareCaseInsensitive(Byte[] key, Byte[] buffer, int offset)
private bool Compare(Byte[] key, Byte[] buffer, int offset)
private bool IsWhitespace(byte ch)
internal ArraySegment`1<byte> ProcessBuffer(Byte[] buffer, int offset, int count, Encoding encoding)
private void ThrowExpectedEncodingMismatch(SupportedEncoding expEnc, SupportedEncoding actualEnc)
private void ThrowEncodingMismatch(string declEnc, SupportedEncoding enc)
private void ThrowEncodingMismatch(string declEnc, string docEnc)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Position()
public void set_Position(long value)
public void Close()
public void Flush()
public int ReadByte()
public int Read(Byte[] buffer, int offset, int count)
private void CleanupCharBreak()
public long Seek(long offset, SeekOrigin origin)
public void WriteByte(byte b)
public void Write(Byte[] buffer, int offset, int count)
public bool get_CanTimeout()
public long get_Length()
public int get_ReadTimeout()
public void set_ReadTimeout(int value)
public int get_WriteTimeout()
public void set_WriteTimeout(int value)
public void SetLength(long value)
}
internal System.Xml.GuidArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, Guid> {
public GuidArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int count)
}
internal System.Xml.GuidArrayHelperWithString : ArrayHelper`2<string, Guid> {
public GuidArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, Guid[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, Guid[] array, int offset, int count)
}
public System.Xml.IFragmentCapableXmlDictionaryWriter {
public bool CanFragment
public bool get_CanFragment()
public void StartFragment(Stream stream, bool generateSelfContainedTextFragment)
public void EndFragment()
public void WriteFragment(Byte[] buffer, int offset, int count)
}
internal System.Xml.Int16ArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, short> {
public Int16ArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int count)
}
internal System.Xml.Int16ArrayHelperWithString : ArrayHelper`2<string, short> {
public Int16ArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, Int16[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, Int16[] array, int offset, int count)
}
internal System.Xml.Int32ArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, int> {
public Int32ArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int count)
}
internal System.Xml.Int32ArrayHelperWithString : ArrayHelper`2<string, int> {
public Int32ArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, Int32[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, Int32[] array, int offset, int count)
}
internal System.Xml.Int64ArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, long> {
public Int64ArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int count)
}
internal System.Xml.Int64ArrayHelperWithString : ArrayHelper`2<string, long> {
public Int64ArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, Int64[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, Int64[] array, int offset, int count)
}
public System.Xml.IStreamProvider {
public Stream GetStream()
public void ReleaseStream(Stream stream)
}
public System.Xml.IXmlBinaryReaderInitializer {
public void SetInput(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public void SetInput(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
}
public System.Xml.IXmlBinaryWriterInitializer {
public void SetOutput(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session, bool ownsStream)
}
public System.Xml.IXmlDictionary {
public bool TryLookup(string value, XmlDictionaryString& result)
public bool TryLookup(int key, XmlDictionaryString& result)
public bool TryLookup(XmlDictionaryString value, XmlDictionaryString& result)
}
public System.Xml.IXmlMtomReaderInitializer {
public void SetInput(Byte[] buffer, int offset, int count, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
public void SetInput(Stream stream, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
}
public System.Xml.IXmlMtomWriterInitializer {
public void SetOutput(Stream stream, Encoding encoding, int maxSizeInBytes, string startInfo, string boundary, string startUri, bool writeMessageHeaders, bool ownsStream)
}
public System.Xml.IXmlTextReaderInitializer {
public void SetInput(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public void SetInput(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
}
public System.Xml.IXmlTextWriterInitializer {
public void SetOutput(Stream stream, Encoding encoding, bool ownsStream)
}
internal System.Xml.MailBnfHelper : object {
private Boolean[] s_fqtext
private Boolean[] s_ttext
private Boolean[] s_digits
private Boolean[] s_boundary
public bool SkipCFWS(string data, Int32& offset)
public string ReadQuotedString(string data, Int32& offset, StringBuilder builder)
public string ReadParameterAttribute(string data, Int32& offset, StringBuilder builder)
public string ReadParameterValue(string data, Int32& offset, StringBuilder builder)
public string ReadToken(string data, Int32& offset, StringBuilder builder)
public string ReadDigits(string data, Int32& offset, StringBuilder builder)
public bool IsValidMimeBoundary(string data)
}
internal System.Xml.MimeGlobals : object {
internal string MimeVersionHeader
internal string DefaultVersion
internal string ContentIDScheme
internal string ContentIDHeader
internal string ContentTypeHeader
internal string ContentTransferEncodingHeader
internal string EncodingBinary
internal string Encoding8bit
internal Byte[] COLONSPACE
internal Byte[] DASHDASH
internal Byte[] CRLF
internal Byte[] BoundaryPrefix
}
internal System.Xml.MimeHeader : object {
private string name
private string value
public string Name
public string Value
public void .ctor(string name, string value)
public string get_Name()
public string get_Value()
}
internal System.Xml.MimeHeaderReader : object {
private string value
private Byte[] buffer
private int maxOffset
private string name
private int offset
private ReadState readState
private Stream stream
public string Value
public string Name
public void .ctor(Stream stream)
public string get_Value()
public string get_Name()
public void Close()
public bool Read(int maxBuffer, Int32& remaining)
private bool ProcessBuffer(int maxBuffer, Int32& remaining)
private bool BufferEnd()
public void Reset(Stream stream)
private void AppendValue(string value, int maxBuffer, Int32& remaining)
private void AppendName(string value, int maxBuffer, Int32& remaining)
}
internal System.Xml.MimeHeaders : object {
private Dictionary`2<string, MimeHeader> headers
public ContentTypeHeader ContentType
public ContentIDHeader ContentID
public ContentTransferEncodingHeader ContentTransferEncoding
public MimeVersionHeader MimeVersion
public ContentTypeHeader get_ContentType()
public ContentIDHeader get_ContentID()
public ContentTransferEncodingHeader get_ContentTransferEncoding()
public MimeVersionHeader get_MimeVersion()
public void Add(string name, string value, Int32& remaining)
public void Add(MimeHeader header)
public void Release(Int32& remaining)
}
internal System.Xml.MimeMessageReader : object {
private Byte[] CRLFCRLF
private bool getContentStreamCalled
private MimeHeaderReader mimeHeaderReader
private DelimittedStreamReader reader
public void .ctor(Stream stream)
public Stream GetContentStream()
public MimeHeaders ReadHeaders(int maxBuffer, Int32& remaining)
}
internal System.Xml.MimeReader : object {
private Byte[] CRLFCRLF
private Byte[] boundaryBytes
private string content
private Stream currentStream
private MimeHeaderReader mimeHeaderReader
private DelimittedStreamReader reader
private Byte[] scratch
public string Preface
public void .ctor(Stream stream, string boundary)
public void Close()
public string get_Preface()
public Stream GetContentStream()
public bool ReadNextPart()
public MimeHeaders ReadHeaders(int maxBuffer, Int32& remaining)
private int BlockRead(Stream stream, Byte[] buffer, int offset, int count)
}
internal System.Xml.MimeVersionHeader : MimeHeader {
public MimeVersionHeader Default
private string version
public string Version
public void .ctor(string value)
public string get_Version()
private void ParseValue()
}
internal System.Xml.MimeWriter : object {
private Stream stream
private Byte[] boundaryBytes
private MimeWriterState state
private BufferedWrite bufferedWrite
private Stream contentStream
internal MimeWriterState WriteState
internal void .ctor(Stream stream, string boundary)
internal int GetHeaderSize(string name, string value, int maxSizeInBytes)
internal Byte[] GetBoundaryBytes(string boundary)
internal MimeWriterState get_WriteState()
internal int GetBoundarySize()
internal void StartPreface()
internal void StartPart()
internal void Close()
private void Flush()
internal void WriteHeader(string name, string value)
internal Stream GetContentStream()
}
internal System.Xml.MimeWriterState : Enum {
public int value__
public MimeWriterState Start
public MimeWriterState StartPreface
public MimeWriterState StartPart
public MimeWriterState Header
public MimeWriterState Content
public MimeWriterState Closed
}
internal System.Xml.MtomBinaryData : object {
internal MtomBinaryDataType type
internal IStreamProvider provider
internal Byte[] chunk
internal long Length
internal void .ctor(IStreamProvider provider)
internal void .ctor(Byte[] buffer, int offset, int count)
internal long get_Length()
}
internal System.Xml.MtomBinaryDataType : Enum {
public int value__
public MtomBinaryDataType Provider
public MtomBinaryDataType Segment
}
internal System.Xml.MtomGlobals : object {
internal string XopIncludeLocalName
internal string XopIncludeNamespace
internal string XopIncludePrefix
internal string XopIncludeHrefLocalName
internal string XopIncludeHrefNamespace
internal string MediaType
internal string MediaSubtype
internal string BoundaryParam
internal string TypeParam
internal string XopMediaType
internal string XopMediaSubtype
internal string XopType
internal string StartParam
internal string StartInfoParam
internal string ActionParam
internal string CharsetParam
internal string MimeContentTypeLocalName
internal string MimeContentTypeNamespace200406
internal string MimeContentTypeNamespace200505
internal string DefaultContentTypeForBinary
}
public System.Xml.OnXmlDictionaryReaderClose : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlDictionaryReader reader)
public IAsyncResult BeginInvoke(XmlDictionaryReader reader, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Xml.PrefixHandle : object {
private XmlBufferReader bufferReader
private PrefixHandleType type
private int offset
private int length
private String[] prefixStrings
private Byte[] prefixBuffer
public bool IsEmpty
public bool IsXmlns
public bool IsXml
public void .ctor(XmlBufferReader bufferReader)
public void SetValue(PrefixHandleType type)
public void SetValue(PrefixHandle prefix)
public void SetValue(int offset, int length)
public bool get_IsEmpty()
public bool get_IsXmlns()
public bool get_IsXml()
public bool TryGetShortPrefix(PrefixHandleType& type)
public string GetString(PrefixHandleType type)
public PrefixHandleType GetAlphaPrefix(int index)
public Byte[] GetString(PrefixHandleType type, Int32& offset, Int32& length)
public string GetString(XmlNameTable nameTable)
public string GetString()
public Byte[] GetString(Int32& offset, Int32& length)
public int CompareTo(PrefixHandle that)
private bool Equals2(PrefixHandle prefix2)
private bool Equals2(string prefix2)
private bool Equals2(XmlDictionaryString prefix2)
public bool op_Equality(PrefixHandle prefix1, string prefix2)
public bool op_Inequality(PrefixHandle prefix1, string prefix2)
public bool op_Equality(PrefixHandle prefix1, XmlDictionaryString prefix2)
public bool op_Inequality(PrefixHandle prefix1, XmlDictionaryString prefix2)
public bool op_Equality(PrefixHandle prefix1, PrefixHandle prefix2)
public bool op_Inequality(PrefixHandle prefix1, PrefixHandle prefix2)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
internal System.Xml.PrefixHandleType : Enum {
public int value__
public PrefixHandleType Empty
public PrefixHandleType A
public PrefixHandleType B
public PrefixHandleType C
public PrefixHandleType D
public PrefixHandleType E
public PrefixHandleType F
public PrefixHandleType G
public PrefixHandleType H
public PrefixHandleType I
public PrefixHandleType J
public PrefixHandleType K
public PrefixHandleType L
public PrefixHandleType M
public PrefixHandleType N
public PrefixHandleType O
public PrefixHandleType P
public PrefixHandleType Q
public PrefixHandleType R
public PrefixHandleType S
public PrefixHandleType T
public PrefixHandleType U
public PrefixHandleType V
public PrefixHandleType W
public PrefixHandleType X
public PrefixHandleType Y
public PrefixHandleType Z
public PrefixHandleType Buffer
public PrefixHandleType Max
}
internal System.Xml.SingleArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, float> {
public SingleArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int count)
}
internal System.Xml.SingleArrayHelperWithString : ArrayHelper`2<string, float> {
public SingleArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, Single[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, Single[] array, int offset, int count)
}
internal System.Xml.StringHandle : object {
private XmlBufferReader bufferReader
private StringHandleType type
private int key
private int offset
private int length
private String[] constStrings
public bool IsEmpty
public bool IsXmlns
public void .ctor(XmlBufferReader bufferReader)
public void SetValue(int offset, int length)
public void SetConstantValue(StringHandleConstStringType constStringType)
public void SetValue(int offset, int length, bool escaped)
public void SetValue(int key)
public void SetValue(StringHandle value)
public bool get_IsEmpty()
public bool get_IsXmlns()
public void ToPrefixHandle(PrefixHandle prefix)
public string GetString(XmlNameTable nameTable)
public string GetString()
public Byte[] GetString(Int32& offset, Int32& length)
public bool TryGetDictionaryString(XmlDictionaryString& value)
public string ToString()
private bool Equals2(int key2, XmlBufferReader bufferReader2)
private bool Equals2(XmlDictionaryString xmlString2)
private bool Equals2(string s2)
private bool Equals2(int offset2, int length2, XmlBufferReader bufferReader2)
private bool Equals2(StringHandle s2)
public bool op_Equality(StringHandle s1, XmlDictionaryString xmlString2)
public bool op_Inequality(StringHandle s1, XmlDictionaryString xmlString2)
public bool op_Equality(StringHandle s1, string s2)
public bool op_Inequality(StringHandle s1, string s2)
public bool op_Equality(StringHandle s1, StringHandle s2)
public bool op_Inequality(StringHandle s1, StringHandle s2)
public int CompareTo(StringHandle that)
public bool Equals(object obj)
public int GetHashCode()
}
internal System.Xml.StringHandleConstStringType : Enum {
public int value__
public StringHandleConstStringType Type
public StringHandleConstStringType Root
public StringHandleConstStringType Item
}
internal System.Xml.TimeSpanArrayHelperWithDictionaryString : ArrayHelper`2<XmlDictionaryString, TimeSpan> {
public TimeSpanArrayHelperWithDictionaryString Instance
protected int ReadArray(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int count)
}
internal System.Xml.TimeSpanArrayHelperWithString : ArrayHelper`2<string, TimeSpan> {
public TimeSpanArrayHelperWithString Instance
protected int ReadArray(XmlDictionaryReader reader, string localName, string namespaceUri, TimeSpan[] array, int offset, int count)
protected void WriteArray(XmlDictionaryWriter writer, string prefix, string localName, string namespaceUri, TimeSpan[] array, int offset, int count)
}
public System.Xml.UniqueId : object {
private long idLow
private long idHigh
private string s
private int guidLength
private int uuidLength
private Int16[] char2val
private string val2char
public int CharArrayLength
public bool IsGuid
public void .ctor(Guid guid)
public void .ctor(Byte[] guid)
public void .ctor(Byte[] guid, int offset)
public void .ctor(string value)
public void .ctor(Char[] chars, int offset, int count)
public int get_CharArrayLength()
private int UnsafeDecode(Int16* char2val, char ch1, char ch2)
private void UnsafeEncode(Char* val2char, byte b, Char* pch)
public bool get_IsGuid()
private void UnsafeParse(Char* chars, int charCount)
public int ToCharArray(Char[] chars, int offset)
public bool TryGetGuid(Guid& guid)
public bool TryGetGuid(Byte[] buffer, int offset)
public string ToString()
public bool op_Equality(UniqueId id1, UniqueId id2)
public bool op_Inequality(UniqueId id1, UniqueId id2)
public bool Equals(object obj)
public int GetHashCode()
private long UnsafeGetInt64(Byte* pb)
private int UnsafeGetInt32(Byte* pb)
private void UnsafeSetInt64(long value, Byte* pb)
private void UnsafeSetInt32(int value, Byte* pb)
}
internal System.Xml.ValueHandle : object {
private XmlBufferReader bufferReader
private ValueHandleType type
private int offset
private int length
private Base64Encoding base64Encoding
private String[] constStrings
private Base64Encoding Base64Encoding
public void .ctor(XmlBufferReader bufferReader)
private Base64Encoding get_Base64Encoding()
public void SetConstantValue(ValueHandleConstStringType constStringType)
public void SetValue(ValueHandleType type)
public void SetDictionaryValue(int key)
public void SetCharValue(int ch)
public void SetQNameValue(int prefix, int key)
public void SetValue(ValueHandleType type, int offset, int length)
public bool IsWhitespace()
public Type ToType()
public bool ToBoolean()
public int ToInt()
public long ToLong()
public ulong ToULong()
public float ToSingle()
public double ToDouble()
public decimal ToDecimal()
public DateTime ToDateTime()
public UniqueId ToUniqueId()
public TimeSpan ToTimeSpan()
public Guid ToGuid()
public string ToString()
public Byte[] ToByteArray()
public string GetString()
public bool Equals2(string str, bool checkLower)
public void Sign(XmlSigningNodeWriter writer)
public Object[] ToList()
public object ToObject()
public bool TryReadBase64(Byte[] buffer, int offset, int count, Int32& actual)
public bool TryReadChars(Char[] chars, int offset, int count, Int32& actual)
private bool TryReadUnicodeChars(Char[] chars, int offset, int count, Int32& actual)
public bool TryGetDictionaryString(XmlDictionaryString& value)
public bool TryGetByteArrayLength(Int32& length)
private string GetCharsText()
private string GetUnicodeCharsText()
private string GetEscapedCharsText()
private string GetCharText()
private int GetChar()
private int GetInt8()
private int GetInt16()
private int GetInt32()
private long GetInt64()
private ulong GetUInt64()
private float GetSingle()
private double GetDouble()
private decimal GetDecimal()
private UniqueId GetUniqueId()
private Guid GetGuid()
private void GetBase64(Byte[] buffer, int offset, int count)
private XmlDictionaryString GetDictionaryString()
private string GetQNameDictionaryText()
}
internal System.Xml.ValueHandleConstStringType : Enum {
public int value__
public ValueHandleConstStringType String
public ValueHandleConstStringType Number
public ValueHandleConstStringType Array
public ValueHandleConstStringType Object
public ValueHandleConstStringType Boolean
public ValueHandleConstStringType Null
}
internal System.Xml.ValueHandleLength : object {
public int Int8
public int Int16
public int Int32
public int Int64
public int UInt64
public int Single
public int Double
public int Decimal
public int DateTime
public int TimeSpan
public int Guid
public int UniqueId
}
internal System.Xml.ValueHandleType : Enum {
public int value__
public ValueHandleType Empty
public ValueHandleType True
public ValueHandleType False
public ValueHandleType Zero
public ValueHandleType One
public ValueHandleType Int8
public ValueHandleType Int16
public ValueHandleType Int32
public ValueHandleType Int64
public ValueHandleType UInt64
public ValueHandleType Single
public ValueHandleType Double
public ValueHandleType Decimal
public ValueHandleType DateTime
public ValueHandleType TimeSpan
public ValueHandleType Guid
public ValueHandleType UniqueId
public ValueHandleType UTF8
public ValueHandleType EscapedUTF8
public ValueHandleType Base64
public ValueHandleType Dictionary
public ValueHandleType List
public ValueHandleType Char
public ValueHandleType Unicode
public ValueHandleType QName
public ValueHandleType ConstString
}
internal System.Xml.XmlBaseReader : XmlDictionaryReader {
private XmlBufferReader bufferReader
private XmlNode node
private NamespaceManager nsMgr
private XmlElementNode[] elementNodes
private XmlAttributeNode[] attributeNodes
private XmlAtomicTextNode atomicTextNode
private int depth
private int attributeCount
private int attributeStart
private XmlDictionaryReaderQuotas quotas
private XmlNameTable nameTable
private XmlDeclarationNode declarationNode
private XmlComplexTextNode complexTextNode
private XmlWhitespaceTextNode whitespaceTextNode
private XmlCDataNode cdataNode
private XmlCommentNode commentNode
private XmlElementNode rootElementNode
private int attributeIndex
private Char[] chars
private string prefix
private string localName
private string ns
private string value
private int trailCharCount
private int trailByteCount
private Char[] trailChars
private Byte[] trailBytes
private bool rootElement
private bool readingElement
private XmlSigningNodeWriter signingWriter
private bool signing
private AttributeSorter attributeSorter
private XmlInitialNode initialNode
private XmlEndOfFileNode endOfFileNode
private XmlClosedNode closedNode
private BinHexEncoding binhexEncoding
private Base64Encoding base64Encoding
private string xmlns
private string xml
private string xmlnsNamespace
private string xmlNamespace
private BinHexEncoding BinHexEncoding
private Base64Encoding Base64Encoding
protected XmlBufferReader BufferReader
public XmlDictionaryReaderQuotas Quotas
protected XmlNode Node
protected XmlElementNode ElementNode
protected bool OutsideRootElement
public bool CanReadBinaryContent
public bool CanReadValueChunk
public string BaseURI
public bool HasValue
public bool IsDefault
public string Item
public string Item
public string Item
public int AttributeCount
public int Depth
public bool EOF
public bool IsEmptyElement
public string LocalName
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public char QuoteChar
public ReadState ReadState
public string Value
public Type ValueType
public string XmlLang
public XmlSpace XmlSpace
public bool CanCanonicalize
protected bool Signing
private BinHexEncoding get_BinHexEncoding()
private Base64Encoding get_Base64Encoding()
protected XmlBufferReader get_BufferReader()
public XmlDictionaryReaderQuotas get_Quotas()
protected XmlNode get_Node()
protected void MoveToNode(XmlNode node)
protected void MoveToInitial(XmlDictionaryReaderQuotas quotas)
protected XmlDeclarationNode MoveToDeclaration()
private bool CheckStandalone(int attr)
private bool CheckDeclAttribute(int index, string localName, string value, bool checkLower, string valueSR)
protected XmlCommentNode MoveToComment()
protected XmlCDataNode MoveToCData()
protected XmlAtomicTextNode MoveToAtomicText()
protected XmlComplexTextNode MoveToComplexText()
protected XmlTextNode MoveToWhitespaceText()
protected XmlElementNode get_ElementNode()
protected void MoveToEndElement()
protected void MoveToEndOfFile()
protected XmlElementNode EnterScope()
protected void ExitScope()
private XmlAttributeNode AddAttribute(QNameType qnameType, bool isAtomicValue)
protected Namespace AddNamespace()
protected XmlAttributeNode AddAttribute()
protected XmlAttributeNode AddXmlAttribute()
protected XmlAttributeNode AddXmlnsAttribute(Namespace ns)
protected void FixXmlAttribute(XmlAttributeNode attributeNode)
protected bool get_OutsideRootElement()
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public string get_BaseURI()
public bool get_HasValue()
public bool get_IsDefault()
public string get_Item(int index)
public string get_Item(string name)
public string get_Item(string localName, string namespaceUri)
public int get_AttributeCount()
public void Close()
public int get_Depth()
public bool get_EOF()
private XmlAttributeNode GetAttributeNode(int index)
private XmlAttributeNode GetAttributeNode(string name)
private XmlAttributeNode GetAttributeNode(string localName, string namespaceUri)
private XmlAttributeNode GetAttributeNode(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public string GetAttribute(int index)
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceUri)
public string GetAttribute(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public bool get_IsEmptyElement()
public string get_LocalName()
public string LookupNamespace(string prefix)
protected Namespace LookupNamespace(PrefixHandleType prefix)
protected Namespace LookupNamespace(PrefixHandle prefix)
protected void ProcessAttributes()
private void ProcessAttributes(XmlAttributeNode[] attributeNodes, int attributeCount)
private void CheckAttributes(XmlAttributeNode[] attributeNodes, int attributeCount)
public void MoveToAttribute(int index)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceUri)
public bool MoveToElement()
public XmlNodeType MoveToContent()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
public char get_QuoteChar()
private string GetLocalName(bool enforceAtomization)
private string GetNamespaceUri(bool enforceAtomization)
public void GetNonAtomizedNames(String& localName, String& namespaceUri)
public bool IsLocalName(string localName)
public bool IsLocalName(XmlDictionaryString localName)
public bool IsNamespaceUri(string namespaceUri)
public bool IsNamespaceUri(XmlDictionaryString namespaceUri)
public bool IsStartElement()
public bool IsStartElement(string name)
public bool IsStartElement(string localName, string namespaceUri)
public bool IsStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int IndexOfLocalName(String[] localNames, string namespaceUri)
public int IndexOfLocalName(XmlDictionaryString[] localNames, XmlDictionaryString namespaceUri)
public int ReadValueChunk(Char[] chars, int offset, int count)
public int ReadValueAsBase64(Byte[] buffer, int offset, int count)
public string ReadElementContentAsString()
public string ReadElementString()
public string ReadElementString(string name)
public string ReadElementString(string localName, string namespaceUri)
public void ReadStartElement()
public void ReadStartElement(string name)
public void ReadStartElement(string localName, string namespaceUri)
public void ReadEndElement()
public bool ReadAttributeValue()
public ReadState get_ReadState()
private void SkipValue(XmlNode node)
public bool TryGetBase64ContentLength(Int32& length)
public Byte[] ReadContentAsBase64()
public int ReadElementContentAsBase64(Byte[] buffer, int offset, int count)
public int ReadContentAsBase64(Byte[] buffer, int offset, int count)
public Byte[] ReadContentAsBinHex()
public int ReadElementContentAsBinHex(Byte[] buffer, int offset, int count)
public int ReadContentAsBinHex(Byte[] buffer, int offset, int count)
private int ReadBytes(Encoding encoding, int byteBlock, int charBlock, Byte[] buffer, int offset, int byteCount, bool readContent)
public string ReadContentAsString()
public bool ReadContentAsBoolean()
public long ReadContentAsLong()
public int ReadContentAsInt()
public DateTime ReadContentAsDateTime()
public double ReadContentAsDouble()
public float ReadContentAsFloat()
public decimal ReadContentAsDecimal()
public UniqueId ReadContentAsUniqueId()
public TimeSpan ReadContentAsTimeSpan()
public Guid ReadContentAsGuid()
public object ReadContentAsObject()
public object ReadContentAs(Type type, IXmlNamespaceResolver namespaceResolver)
public void ResolveEntity()
public void Skip()
public string get_Value()
public Type get_ValueType()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public bool TryGetLocalNameAsDictionaryString(XmlDictionaryString& localName)
public bool TryGetNamespaceUriAsDictionaryString(XmlDictionaryString& localName)
public bool TryGetValueAsDictionaryString(XmlDictionaryString& value)
public Int16[] ReadInt16Array(string localName, string namespaceUri)
public Int16[] ReadInt16Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public Int32[] ReadInt32Array(string localName, string namespaceUri)
public Int32[] ReadInt32Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public Int64[] ReadInt64Array(string localName, string namespaceUri)
public Int64[] ReadInt64Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public Single[] ReadSingleArray(string localName, string namespaceUri)
public Single[] ReadSingleArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public Double[] ReadDoubleArray(string localName, string namespaceUri)
public Double[] ReadDoubleArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public Decimal[] ReadDecimalArray(string localName, string namespaceUri)
public Decimal[] ReadDecimalArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public DateTime[] ReadDateTimeArray(string localName, string namespaceUri)
public DateTime[] ReadDateTimeArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public Guid[] ReadGuidArray(string localName, string namespaceUri)
public Guid[] ReadGuidArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public TimeSpan[] ReadTimeSpanArray(string localName, string namespaceUri)
public TimeSpan[] ReadTimeSpanArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public string GetOpenElements()
private Char[] GetCharBuffer(int count)
private void SignStartElement(XmlSigningNodeWriter writer)
private void SignAttribute(XmlSigningNodeWriter writer, XmlAttributeNode attributeNode)
private void SignEndElement(XmlSigningNodeWriter writer)
private void SignNode(XmlSigningNodeWriter writer)
public bool get_CanCanonicalize()
protected bool get_Signing()
protected void SignNode()
public void StartCanonicalization(Stream stream, bool includeComments, String[] inclusivePrefixes)
public void EndCanonicalization()
protected XmlSigningNodeWriter CreateSigningNodeWriter()
}
internal System.Xml.XmlBaseWriter : XmlDictionaryWriter {
private XmlNodeWriter writer
private NamespaceManager nsMgr
private Element[] elements
private int depth
private string attributeLocalName
private string attributeValue
private bool isXmlAttribute
private bool isXmlnsAttribute
private WriteState writeState
private DocumentState documentState
private Byte[] trailBytes
private int trailByteCount
private XmlStreamNodeWriter nodeWriter
private XmlSigningNodeWriter signingWriter
private XmlUTF8NodeWriter textFragmentWriter
private XmlNodeWriter oldWriter
private Stream oldStream
private int oldNamespaceBoundary
private bool inList
private string xmlnsNamespace
private string xmlNamespace
private BinHexEncoding binhexEncoding
private String[] prefixes
private XmlBaseWriterNodeWriterAsyncHelper nodeWriterAsyncHelper
protected bool IsClosed
private BinHexEncoding BinHexEncoding
public string XmlLang
public XmlSpace XmlSpace
public WriteState WriteState
protected int NamespaceBoundary
public bool CanCanonicalize
protected bool Signing
public bool CanFragment
protected void SetOutput(XmlStreamNodeWriter writer)
public void Flush()
public void Close()
protected bool get_IsClosed()
protected void ThrowClosed()
private BinHexEncoding get_BinHexEncoding()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public WriteState get_WriteState()
public void WriteXmlnsAttribute(string prefix, string ns)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString ns)
private void StartAttribute(String& prefix, string localName, string ns, XmlDictionaryString xNs)
public void WriteStartAttribute(string prefix, string localName, string namespaceUri)
public void WriteStartAttribute(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteEndAttribute()
public void WriteComment(string text)
public void WriteFullEndElement()
public void WriteCData(string text)
public void WriteDocType(string name, string pubid, string sysid, string subset)
private void StartElement(String& prefix, string localName, string ns, XmlDictionaryString xNs)
public void WriteStartElement(string prefix, string localName, string namespaceUri)
public void WriteStartElement(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteEndElement()
private Element EnterScope()
private void ExitScope()
protected void FlushElement()
protected void StartComment()
protected void EndComment()
protected void StartContent()
protected void StartContent(char ch)
protected void StartContent(string s)
protected void StartContent(Char[] chars, int offset, int count)
private void VerifyWhitespace(char ch)
private void VerifyWhitespace(string s)
private void VerifyWhitespace(Char[] chars, int offset, int count)
private bool IsWhitespace(char ch)
protected void EndContent()
private void AutoComplete(WriteState writeState)
private void EndStartElement()
public string LookupPrefix(string ns)
internal string LookupNamespace(string prefix)
private string GetQualifiedNamePrefix(string namespaceUri, XmlDictionaryString xNs)
public void WriteQualifiedName(string localName, string namespaceUri)
public void WriteQualifiedName(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteProcessingInstruction(string name, string text)
private void FinishDocument()
public void WriteEndDocument()
protected int get_NamespaceBoundary()
protected void set_NamespaceBoundary(int value)
public void WriteEntityRef(string name)
public void WriteName(string name)
public void WriteNmToken(string name)
public void WriteWhitespace(string whitespace)
public void WriteString(string value)
public void WriteString(XmlDictionaryString value)
public void WriteChars(Char[] chars, int offset, int count)
public void WriteRaw(string value)
public void WriteRaw(Char[] chars, int offset, int count)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteValue(object value)
protected void WritePrimitiveValue(object value)
public void WriteValue(string value)
public void WriteValue(int value)
public void WriteValue(long value)
private void WriteValue(ulong value)
public void WriteValue(bool value)
public void WriteValue(decimal value)
public void WriteValue(float value)
public void WriteValue(double value)
public void WriteValue(XmlDictionaryString value)
public void WriteValue(DateTime value)
public void WriteValue(UniqueId value)
public void WriteValue(Guid value)
public void WriteValue(TimeSpan value)
public void WriteBase64(Byte[] buffer, int offset, int count)
internal IAsyncResult BeginWriteBase64(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
internal void EndWriteBase64(IAsyncResult result)
internal AsyncCompletionResult WriteBase64Async(AsyncEventArgs`1<XmlWriteBase64AsyncArguments> state)
public void WriteBinHex(Byte[] buffer, int offset, int count)
public bool get_CanCanonicalize()
protected bool get_Signing()
public void StartCanonicalization(Stream stream, bool includeComments, String[] inclusivePrefixes)
public void EndCanonicalization()
protected XmlSigningNodeWriter CreateSigningNodeWriter()
public bool get_CanFragment()
public void StartFragment(Stream stream, bool generateSelfContainedTextFragment)
public void EndFragment()
public void WriteFragment(Byte[] buffer, int offset, int count)
private void FlushBase64()
private void FlushTrailBytes()
private void WriteValue(Object[] array)
private void WriteValue(Array array)
protected void StartArray(int count)
protected void EndArray()
private void EnsureBufferBounds(Byte[] buffer, int offset, int count)
private string GeneratePrefix(string ns, XmlDictionaryString xNs)
protected void SignScope(XmlCanonicalWriter signingWriter)
private void WriteAttributeText(string value)
}
internal System.Xml.XmlBinaryNodeType : Enum {
public int value__
public XmlBinaryNodeType EndElement
public XmlBinaryNodeType Comment
public XmlBinaryNodeType Array
public XmlBinaryNodeType MinAttribute
public XmlBinaryNodeType ShortAttribute
public XmlBinaryNodeType Attribute
public XmlBinaryNodeType ShortDictionaryAttribute
public XmlBinaryNodeType DictionaryAttribute
public XmlBinaryNodeType ShortXmlnsAttribute
public XmlBinaryNodeType XmlnsAttribute
public XmlBinaryNodeType ShortDictionaryXmlnsAttribute
public XmlBinaryNodeType DictionaryXmlnsAttribute
public XmlBinaryNodeType PrefixDictionaryAttributeA
public XmlBinaryNodeType PrefixDictionaryAttributeB
public XmlBinaryNodeType PrefixDictionaryAttributeC
public XmlBinaryNodeType PrefixDictionaryAttributeD
public XmlBinaryNodeType PrefixDictionaryAttributeE
public XmlBinaryNodeType PrefixDictionaryAttributeF
public XmlBinaryNodeType PrefixDictionaryAttributeG
public XmlBinaryNodeType PrefixDictionaryAttributeH
public XmlBinaryNodeType PrefixDictionaryAttributeI
public XmlBinaryNodeType PrefixDictionaryAttributeJ
public XmlBinaryNodeType PrefixDictionaryAttributeK
public XmlBinaryNodeType PrefixDictionaryAttributeL
public XmlBinaryNodeType PrefixDictionaryAttributeM
public XmlBinaryNodeType PrefixDictionaryAttributeN
public XmlBinaryNodeType PrefixDictionaryAttributeO
public XmlBinaryNodeType PrefixDictionaryAttributeP
public XmlBinaryNodeType PrefixDictionaryAttributeQ
public XmlBinaryNodeType PrefixDictionaryAttributeR
public XmlBinaryNodeType PrefixDictionaryAttributeS
public XmlBinaryNodeType PrefixDictionaryAttributeT
public XmlBinaryNodeType PrefixDictionaryAttributeU
public XmlBinaryNodeType PrefixDictionaryAttributeV
public XmlBinaryNodeType PrefixDictionaryAttributeW
public XmlBinaryNodeType PrefixDictionaryAttributeX
public XmlBinaryNodeType PrefixDictionaryAttributeY
public XmlBinaryNodeType PrefixDictionaryAttributeZ
public XmlBinaryNodeType PrefixAttributeA
public XmlBinaryNodeType PrefixAttributeB
public XmlBinaryNodeType PrefixAttributeC
public XmlBinaryNodeType PrefixAttributeD
public XmlBinaryNodeType PrefixAttributeE
public XmlBinaryNodeType PrefixAttributeF
public XmlBinaryNodeType PrefixAttributeG
public XmlBinaryNodeType PrefixAttributeH
public XmlBinaryNodeType PrefixAttributeI
public XmlBinaryNodeType PrefixAttributeJ
public XmlBinaryNodeType PrefixAttributeK
public XmlBinaryNodeType PrefixAttributeL
public XmlBinaryNodeType PrefixAttributeM
public XmlBinaryNodeType PrefixAttributeN
public XmlBinaryNodeType PrefixAttributeO
public XmlBinaryNodeType PrefixAttributeP
public XmlBinaryNodeType PrefixAttributeQ
public XmlBinaryNodeType PrefixAttributeR
public XmlBinaryNodeType PrefixAttributeS
public XmlBinaryNodeType PrefixAttributeT
public XmlBinaryNodeType PrefixAttributeU
public XmlBinaryNodeType PrefixAttributeV
public XmlBinaryNodeType PrefixAttributeW
public XmlBinaryNodeType PrefixAttributeX
public XmlBinaryNodeType PrefixAttributeY
public XmlBinaryNodeType PrefixAttributeZ
public XmlBinaryNodeType MaxAttribute
public XmlBinaryNodeType MinElement
public XmlBinaryNodeType ShortElement
public XmlBinaryNodeType Element
public XmlBinaryNodeType ShortDictionaryElement
public XmlBinaryNodeType DictionaryElement
public XmlBinaryNodeType PrefixDictionaryElementA
public XmlBinaryNodeType PrefixDictionaryElementB
public XmlBinaryNodeType PrefixDictionaryElementC
public XmlBinaryNodeType PrefixDictionaryElementD
public XmlBinaryNodeType PrefixDictionaryElementE
public XmlBinaryNodeType PrefixDictionaryElementF
public XmlBinaryNodeType PrefixDictionaryElementG
public XmlBinaryNodeType PrefixDictionaryElementH
public XmlBinaryNodeType PrefixDictionaryElementI
public XmlBinaryNodeType PrefixDictionaryElementJ
public XmlBinaryNodeType PrefixDictionaryElementK
public XmlBinaryNodeType PrefixDictionaryElementL
public XmlBinaryNodeType PrefixDictionaryElementM
public XmlBinaryNodeType PrefixDictionaryElementN
public XmlBinaryNodeType PrefixDictionaryElementO
public XmlBinaryNodeType PrefixDictionaryElementP
public XmlBinaryNodeType PrefixDictionaryElementQ
public XmlBinaryNodeType PrefixDictionaryElementR
public XmlBinaryNodeType PrefixDictionaryElementS
public XmlBinaryNodeType PrefixDictionaryElementT
public XmlBinaryNodeType PrefixDictionaryElementU
public XmlBinaryNodeType PrefixDictionaryElementV
public XmlBinaryNodeType PrefixDictionaryElementW
public XmlBinaryNodeType PrefixDictionaryElementX
public XmlBinaryNodeType PrefixDictionaryElementY
public XmlBinaryNodeType PrefixDictionaryElementZ
public XmlBinaryNodeType PrefixElementA
public XmlBinaryNodeType PrefixElementB
public XmlBinaryNodeType PrefixElementC
public XmlBinaryNodeType PrefixElementD
public XmlBinaryNodeType PrefixElementE
public XmlBinaryNodeType PrefixElementF
public XmlBinaryNodeType PrefixElementG
public XmlBinaryNodeType PrefixElementH
public XmlBinaryNodeType PrefixElementI
public XmlBinaryNodeType PrefixElementJ
public XmlBinaryNodeType PrefixElementK
public XmlBinaryNodeType PrefixElementL
public XmlBinaryNodeType PrefixElementM
public XmlBinaryNodeType PrefixElementN
public XmlBinaryNodeType PrefixElementO
public XmlBinaryNodeType PrefixElementP
public XmlBinaryNodeType PrefixElementQ
public XmlBinaryNodeType PrefixElementR
public XmlBinaryNodeType PrefixElementS
public XmlBinaryNodeType PrefixElementT
public XmlBinaryNodeType PrefixElementU
public XmlBinaryNodeType PrefixElementV
public XmlBinaryNodeType PrefixElementW
public XmlBinaryNodeType PrefixElementX
public XmlBinaryNodeType PrefixElementY
public XmlBinaryNodeType PrefixElementZ
public XmlBinaryNodeType MaxElement
public XmlBinaryNodeType MinText
public XmlBinaryNodeType ZeroText
public XmlBinaryNodeType OneText
public XmlBinaryNodeType FalseText
public XmlBinaryNodeType TrueText
public XmlBinaryNodeType Int8Text
public XmlBinaryNodeType Int16Text
public XmlBinaryNodeType Int32Text
public XmlBinaryNodeType Int64Text
public XmlBinaryNodeType FloatText
public XmlBinaryNodeType DoubleText
public XmlBinaryNodeType DecimalText
public XmlBinaryNodeType DateTimeText
public XmlBinaryNodeType Chars8Text
public XmlBinaryNodeType Chars16Text
public XmlBinaryNodeType Chars32Text
public XmlBinaryNodeType Bytes8Text
public XmlBinaryNodeType Bytes16Text
public XmlBinaryNodeType Bytes32Text
public XmlBinaryNodeType StartListText
public XmlBinaryNodeType EndListText
public XmlBinaryNodeType EmptyText
public XmlBinaryNodeType DictionaryText
public XmlBinaryNodeType UniqueIdText
public XmlBinaryNodeType TimeSpanText
public XmlBinaryNodeType GuidText
public XmlBinaryNodeType UInt64Text
public XmlBinaryNodeType BoolText
public XmlBinaryNodeType UnicodeChars8Text
public XmlBinaryNodeType UnicodeChars16Text
public XmlBinaryNodeType UnicodeChars32Text
public XmlBinaryNodeType QNameDictionaryText
public XmlBinaryNodeType ZeroTextWithEndElement
public XmlBinaryNodeType OneTextWithEndElement
public XmlBinaryNodeType FalseTextWithEndElement
public XmlBinaryNodeType TrueTextWithEndElement
public XmlBinaryNodeType Int8TextWithEndElement
public XmlBinaryNodeType Int16TextWithEndElement
public XmlBinaryNodeType Int32TextWithEndElement
public XmlBinaryNodeType Int64TextWithEndElement
public XmlBinaryNodeType FloatTextWithEndElement
public XmlBinaryNodeType DoubleTextWithEndElement
public XmlBinaryNodeType DecimalTextWithEndElement
public XmlBinaryNodeType DateTimeTextWithEndElement
public XmlBinaryNodeType Chars8TextWithEndElement
public XmlBinaryNodeType Chars16TextWithEndElement
public XmlBinaryNodeType Chars32TextWithEndElement
public XmlBinaryNodeType Bytes8TextWithEndElement
public XmlBinaryNodeType Bytes16TextWithEndElement
public XmlBinaryNodeType Bytes32TextWithEndElement
public XmlBinaryNodeType StartListTextWithEndElement
public XmlBinaryNodeType EndListTextWithEndElement
public XmlBinaryNodeType EmptyTextWithEndElement
public XmlBinaryNodeType DictionaryTextWithEndElement
public XmlBinaryNodeType UniqueIdTextWithEndElement
public XmlBinaryNodeType TimeSpanTextWithEndElement
public XmlBinaryNodeType GuidTextWithEndElement
public XmlBinaryNodeType UInt64TextWithEndElement
public XmlBinaryNodeType BoolTextWithEndElement
public XmlBinaryNodeType UnicodeChars8TextWithEndElement
public XmlBinaryNodeType UnicodeChars16TextWithEndElement
public XmlBinaryNodeType UnicodeChars32TextWithEndElement
public XmlBinaryNodeType QNameDictionaryTextWithEndElement
public XmlBinaryNodeType MaxText
}
internal System.Xml.XmlBinaryNodeWriter : XmlStreamNodeWriter {
private IXmlDictionary dictionary
private XmlBinaryWriterSession session
private bool inAttribute
private bool inList
private bool wroteAttributeValue
private AttributeValue attributeValue
private int maxBytesPerChar
private int textNodeOffset
public void SetOutput(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session, bool ownsStream)
private void WriteNode(XmlBinaryNodeType nodeType)
private void WroteAttributeValue()
private void WriteTextNode(XmlBinaryNodeType nodeType)
private Byte[] GetTextNodeBuffer(int size, Int32& offset)
private void WriteTextNodeWithLength(XmlBinaryNodeType nodeType, int length)
private void WriteTextNodeWithInt64(XmlBinaryNodeType nodeType, long value)
public void WriteDeclaration()
public void WriteStartElement(string prefix, string localName)
private void WritePrefixNode(XmlBinaryNodeType nodeType, int ch)
public void WriteStartElement(string prefix, XmlDictionaryString localName)
public void WriteEndStartElement(bool isEmpty)
public void WriteEndElement(string prefix, string localName)
private void WriteEndElement()
public void WriteStartAttribute(string prefix, string localName)
public void WriteStartAttribute(string prefix, XmlDictionaryString localName)
public void WriteEndAttribute()
public void WriteXmlnsAttribute(string prefix, string ns)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString ns)
private bool TryGetKey(XmlDictionaryString s, Int32& key)
private void WriteDictionaryString(XmlDictionaryString s, int key)
private void WriteName(string s)
private void UnsafeWriteName(Char* chars, int charCount)
private void WriteMultiByteInt32(int i)
public void WriteComment(string value)
public void WriteCData(string value)
private void WriteEmptyText()
public void WriteBoolText(bool value)
public void WriteInt32Text(int value)
public void WriteInt64Text(long value)
public void WriteUInt64Text(ulong value)
private void WriteInt64(long value)
public void WriteBase64Text(Byte[] trailBytes, int trailByteCount, Byte[] base64Buffer, int base64Offset, int base64Count)
public void WriteText(XmlDictionaryString value)
public void WriteText(string value)
public void WriteText(Char[] chars, int offset, int count)
public void WriteText(Byte[] chars, int charOffset, int charCount)
private void UnsafeWriteText(Char* chars, int charCount)
public void WriteEscapedText(string value)
public void WriteEscapedText(XmlDictionaryString value)
public void WriteEscapedText(Char[] chars, int offset, int count)
public void WriteEscapedText(Byte[] chars, int offset, int count)
public void WriteCharEntity(int ch)
public void WriteFloatText(float f)
public void WriteDoubleText(double d)
public void WriteDecimalText(decimal d)
public void WriteDateTimeText(DateTime dt)
public void WriteUniqueIdText(UniqueId value)
public void WriteGuidText(Guid guid)
public void WriteTimeSpanText(TimeSpan value)
public void WriteStartListText()
public void WriteListSeparator()
public void WriteEndListText()
public void WriteArrayNode()
private void WriteArrayInfo(XmlBinaryNodeType nodeType, int count)
public void UnsafeWriteArray(XmlBinaryNodeType nodeType, int count, Byte* array, Byte* arrayMax)
private void UnsafeWriteArray(Byte* array, int byteCount)
public void WriteDateTimeArray(DateTime[] array, int offset, int count)
public void WriteGuidArray(Guid[] array, int offset, int count)
public void WriteTimeSpanArray(TimeSpan[] array, int offset, int count)
public void WriteQualifiedName(string prefix, XmlDictionaryString localName)
protected void FlushBuffer()
public void Close()
}
internal System.Xml.XmlBinaryReader : XmlBaseReader {
private bool isTextWithEndElement
private bool buffered
private ArrayState arrayState
private int arrayCount
private int maxBytesPerRead
private XmlBinaryNodeType arrayNodeType
private OnXmlDictionaryReaderClose onClose
public void SetInput(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public void SetInput(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
private void MoveToInitial(XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public void Close()
public string ReadElementContentAsString()
public bool ReadElementContentAsBoolean()
public int ReadElementContentAsInt()
private bool CanOptimizeReadElementContent()
public float ReadElementContentAsFloat()
public double ReadElementContentAsDouble()
public decimal ReadElementContentAsDecimal()
public DateTime ReadElementContentAsDateTime()
public TimeSpan ReadElementContentAsTimeSpan()
public Guid ReadElementContentAsGuid()
public UniqueId ReadElementContentAsUniqueId()
public bool TryGetBase64ContentLength(Int32& length)
private void ReadTextWithEndElement()
private XmlAtomicTextNode MoveToAtomicTextWithEndElement()
public bool Read()
private bool ReadNode()
private void VerifyWhitespace()
private void ReadAttributes()
private void ReadAttributes2()
private void ReadText(XmlTextNode textNode, ValueHandleType type, int length)
private void ReadBinaryText(XmlTextNode textNode, int length)
private void ReadPartialUTF8Text(bool withEndElement, int length)
private void ReadUnicodeText(bool withEndElement, int length)
private void ReadPartialUnicodeText(bool withEndElement, int length)
private void ReadPartialBinaryText(bool withEndElement, int length)
private void InsertNode(XmlBinaryNodeType nodeType, int length)
private void ReadAttributeText(XmlAttributeTextNode textNode)
private void ReadName(ValueHandle value)
private void ReadName(StringHandle handle)
private void ReadName(PrefixHandle prefix)
private void ReadDictionaryName(StringHandle s)
private XmlBinaryNodeType GetNodeType()
private void SkipNodeType()
private int ReadDictionaryKey()
private int ReadMultiByteUInt31()
private int ReadUInt8()
private int ReadUInt16()
private int ReadUInt31()
private bool IsValidArrayType(XmlBinaryNodeType nodeType)
private void ReadArray()
private void MoveToArrayElement()
private void SkipArrayElements(int count)
public bool IsStartArray(Type& type)
public bool TryGetArrayLength(Int32& count)
private bool IsStartArray(string localName, string namespaceUri, XmlBinaryNodeType nodeType)
private bool IsStartArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, XmlBinaryNodeType nodeType)
private void CheckArray(Array array, int offset, int count)
private int ReadArray(Boolean[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, Boolean[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int count)
private int ReadArray(Int16[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, Int16[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int count)
private int ReadArray(Int32[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, Int32[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int count)
private int ReadArray(Int64[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, Int64[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int count)
private int ReadArray(Single[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, Single[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int count)
private int ReadArray(Double[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, Double[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int count)
private int ReadArray(Decimal[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, Decimal[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int count)
private int ReadArray(DateTime[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, DateTime[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int count)
private int ReadArray(Guid[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, Guid[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int count)
private int ReadArray(TimeSpan[] array, int offset, int count)
public int ReadArray(string localName, string namespaceUri, TimeSpan[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int count)
protected XmlSigningNodeWriter CreateSigningNodeWriter()
}
public System.Xml.XmlBinaryReaderSession : object {
private int MaxArrayEntries
private XmlDictionaryString[] strings
private Dictionary`2<int, XmlDictionaryString> stringDict
public XmlDictionaryString Add(int id, string value)
public bool TryLookup(int key, XmlDictionaryString& result)
public bool TryLookup(string value, XmlDictionaryString& result)
public bool TryLookup(XmlDictionaryString value, XmlDictionaryString& result)
public void Clear()
}
internal System.Xml.XmlBinaryWriter : XmlBaseWriter {
private XmlBinaryNodeWriter writer
private Char[] chars
private Byte[] bytes
public void SetOutput(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session, bool ownsStream)
protected XmlSigningNodeWriter CreateSigningNodeWriter()
protected void WriteTextNode(XmlDictionaryReader reader, bool attribute)
private void WriteStartArray(string prefix, string localName, string namespaceUri, int count)
private void WriteStartArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, int count)
private void WriteEndArray()
private void UnsafeWriteArray(string prefix, string localName, string namespaceUri, XmlBinaryNodeType nodeType, int count, Byte* array, Byte* arrayMax)
private void UnsafeWriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, XmlBinaryNodeType nodeType, int count, Byte* array, Byte* arrayMax)
private void CheckArray(Array array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Boolean[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Int16[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Int32[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Int64[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Single[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Double[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Decimal[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, DateTime[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Guid[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, TimeSpan[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int count)
}
public System.Xml.XmlBinaryWriterSession : object {
private PriorityDictionary`2<string, int> strings
private PriorityDictionary`2<IXmlDictionary, IntArray> maps
private int nextKey
public bool TryAdd(XmlDictionaryString value, Int32& key)
private int Add(string s)
private IntArray AddKeys(IXmlDictionary dictionary, int minCount)
public void Reset()
internal bool TryLookup(XmlDictionaryString s, Int32& key)
}
internal System.Xml.XmlBufferReader : object {
private XmlDictionaryReader reader
private Stream stream
private Byte[] streamBuffer
private Byte[] buffer
private int offsetMin
private int offsetMax
private IXmlDictionary dictionary
private XmlBinaryReaderSession session
private Byte[] guid
private int offset
private int maxBytesPerChar
private Char[] chars
private int windowOffset
private int windowOffsetMax
private ValueHandle listValue
private Byte[] emptyByteArray
private XmlBufferReader empty
public XmlBufferReader Empty
public Byte[] Buffer
public bool IsStreamed
public bool EndOfFile
public int Offset
public void .ctor(XmlDictionaryReader reader)
public void .ctor(Byte[] buffer)
public XmlBufferReader get_Empty()
public Byte[] get_Buffer()
public bool get_IsStreamed()
public void SetBuffer(Stream stream, IXmlDictionary dictionary, XmlBinaryReaderSession session)
public void SetBuffer(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlBinaryReaderSession session)
private void SetBuffer(Stream stream, Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlBinaryReaderSession session)
public void Close()
public bool get_EndOfFile()
public byte GetByte()
public void SkipByte()
private byte GetByteHard()
public Byte[] GetBuffer(int count, Int32& offset)
public Byte[] GetBuffer(int count, Int32& offset, Int32& offsetMax)
public Byte[] GetBuffer(Int32& offset, Int32& offsetMax)
private Byte[] GetBufferHard(int count, Int32& offset)
private void EnsureByte()
private bool TryEnsureByte()
private void EnsureBytes(int count)
private bool TryEnsureBytes(int count)
public void Advance(int count)
public void InsertBytes(Byte[] buffer, int offset, int count)
public void SetWindow(int windowOffset, int windowLength)
public int get_Offset()
public void set_Offset(int value)
public int ReadBytes(int count)
public int ReadMultiByteUInt31()
public int ReadUInt8()
public int ReadInt8()
public int ReadUInt16()
public int ReadInt16()
public int ReadInt32()
public int ReadUInt31()
public long ReadInt64()
public float ReadSingle()
public double ReadDouble()
public decimal ReadDecimal()
public UniqueId ReadUniqueId()
public DateTime ReadDateTime()
public TimeSpan ReadTimeSpan()
public Guid ReadGuid()
public string ReadUTF8String(int length)
public void UnsafeReadArray(Byte* dst, Byte* dstMax)
private void UnsafeReadArray(Byte* dst, int length)
private Char[] GetCharBuffer(int count)
private int GetChars(int offset, int length, Char[] chars)
private int GetChars(int offset, int length, Char[] chars, int charOffset)
public string GetString(int offset, int length)
public string GetUnicodeString(int offset, int length)
public string GetString(int offset, int length, XmlNameTable nameTable)
public int GetEscapedChars(int offset, int length, Char[] chars)
private bool IsAttrChar(int ch)
public string GetEscapedString(int offset, int length)
public string GetEscapedString(int offset, int length, XmlNameTable nameTable)
private int GetLessThanCharEntity(int offset, int length)
private int GetGreaterThanCharEntity(int offset, int length)
private int GetQuoteCharEntity(int offset, int length)
private int GetAmpersandCharEntity(int offset, int length)
private int GetApostropheCharEntity(int offset, int length)
private int GetDecimalCharEntity(int offset, int length)
private int GetHexCharEntity(int offset, int length)
public int GetCharEntity(int offset, int length)
public bool IsWhitespaceKey(int key)
public bool IsWhitespaceUTF8(int offset, int length)
public bool IsWhitespaceUnicode(int offset, int length)
public bool Equals2(int key1, int key2, XmlBufferReader bufferReader2)
public bool Equals2(int key1, XmlDictionaryString xmlString2)
public bool Equals2(int offset1, int length1, Byte[] buffer2)
public bool Equals2(int offset1, int length1, XmlBufferReader bufferReader2, int offset2, int length2)
public bool Equals2(int offset1, int length1, int offset2, int length2)
public bool Equals2(int offset1, int length1, string s2)
public int Compare(int offset1, int length1, int offset2, int length2)
public byte GetByte(int offset)
public int GetInt8(int offset)
public int GetInt16(int offset)
public int GetInt32(int offset)
public long GetInt64(int offset)
public ulong GetUInt64(int offset)
public float GetSingle(int offset)
public double GetDouble(int offset)
public decimal GetDecimal(int offset)
public UniqueId GetUniqueId(int offset)
public Guid GetGuid(int offset)
public void GetBase64(int srcOffset, Byte[] buffer, int dstOffset, int count)
public XmlBinaryNodeType GetNodeType()
public void SkipNodeType()
public Object[] GetList(int offset, int count)
public XmlDictionaryString GetDictionaryString(int key)
public int ReadDictionaryKey()
public void ReadValue(XmlBinaryNodeType nodeType, ValueHandle value)
private void ReadValue(ValueHandle value, ValueHandleType type, int length)
private void ReadUnicodeValue(ValueHandle value, int length)
private void ReadList(ValueHandle value)
public void ReadQName(ValueHandle value)
public Int32[] GetRows()
}
internal System.Xml.XmlCanonicalWriter : object {
private XmlUTF8NodeWriter writer
private MemoryStream elementStream
private Byte[] elementBuffer
private XmlUTF8NodeWriter elementWriter
private bool inStartElement
private int depth
private Scope[] scopes
private int xmlnsAttributeCount
private XmlnsAttribute[] xmlnsAttributes
private int attributeCount
private Attribute[] attributes
private Attribute attribute
private Element element
private Byte[] xmlnsBuffer
private int xmlnsOffset
private int maxBytesPerChar
private int xmlnsStartOffset
private bool includeComments
private String[] inclusivePrefixes
private string xmlnsNamespace
private Boolean[] isEscapedAttributeChar
private Boolean[] isEscapedElementChar
public void SetOutput(Stream stream, bool includeComments, String[] inclusivePrefixes)
public void Flush()
public void Close()
public void WriteDeclaration()
public void WriteComment(string value)
private void StartElement()
private void EndElement()
public void WriteStartElement(string prefix, string localName)
public void WriteStartElement(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
private bool IsInclusivePrefix(XmlnsAttribute& xmlnsAttribute)
public void WriteEndStartElement(bool isEmpty)
public void WriteEndElement(string prefix, string localName)
private void EnsureXmlnsBuffer(int byteCount)
public void WriteXmlnsAttribute(string prefix, string ns)
public void WriteXmlnsAttribute(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] nsBuffer, int nsOffset, int nsLength)
public void WriteStartAttribute(string prefix, string localName)
public void WriteStartAttribute(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
public void WriteEndAttribute()
public void WriteCharEntity(int ch)
public void WriteEscapedText(string value)
public void WriteEscapedText(Byte[] chars, int offset, int count)
public void WriteEscapedText(Char[] chars, int offset, int count)
public void WriteText(int ch)
public void WriteText(Byte[] chars, int offset, int count)
public void WriteText(string value)
public void WriteText(Char[] chars, int offset, int count)
private void ThrowIfClosed()
private void ThrowClosed()
private void WriteXmlnsAttribute(XmlnsAttribute& xmlnsAttribute)
private void SortAttributes()
private void AddAttribute(Attribute& attribute)
private void AddXmlnsAttribute(XmlnsAttribute& xmlnsAttribute)
private void ResolvePrefix(int prefixOffset, int prefixLength, Int32& nsOffset, Int32& nsLength)
private void ResolvePrefix(Attribute& attribute)
private void ResolvePrefixes()
private int Compare(XmlnsAttribute& xmlnsAttribute1, XmlnsAttribute& xmlnsAttribute2)
private int Compare(Attribute& attribute1, Attribute& attribute2)
private int Compare(Byte[] buffer, int offset1, int length1, int offset2, int length2)
private int Compare(Byte[] buffer1, int offset1, int length1, Byte[] buffer2, int offset2, int length2)
private bool Equals(Byte[] buffer1, int offset1, int length1, Byte[] buffer2, int offset2, int length2)
}
internal System.Xml.XmlConverter : object {
public int MaxDateTimeChars
public int MaxInt32Chars
public int MaxInt64Chars
public int MaxBoolChars
public int MaxFloatChars
public int MaxDoubleChars
public int MaxDecimalChars
public int MaxUInt64Chars
public int MaxPrimitiveChars
private Char[] whiteSpaceChars
private UTF8Encoding utf8Encoding
private UnicodeEncoding unicodeEncoding
private Base64Encoding base64Encoding
public Base64Encoding Base64Encoding
private UTF8Encoding UTF8Encoding
private UnicodeEncoding UnicodeEncoding
public Base64Encoding get_Base64Encoding()
private UTF8Encoding get_UTF8Encoding()
private UnicodeEncoding get_UnicodeEncoding()
public bool ToBoolean(string value)
public bool ToBoolean(Byte[] buffer, int offset, int count)
public int ToInt32(string value)
public int ToInt32(Byte[] buffer, int offset, int count)
public long ToInt64(string value)
public long ToInt64(Byte[] buffer, int offset, int count)
public float ToSingle(string value)
public float ToSingle(Byte[] buffer, int offset, int count)
public double ToDouble(string value)
public double ToDouble(Byte[] buffer, int offset, int count)
public decimal ToDecimal(string value)
public decimal ToDecimal(Byte[] buffer, int offset, int count)
public DateTime ToDateTime(long value)
public DateTime ToDateTime(string value)
public DateTime ToDateTime(Byte[] buffer, int offset, int count)
public UniqueId ToUniqueId(string value)
public UniqueId ToUniqueId(Byte[] buffer, int offset, int count)
public TimeSpan ToTimeSpan(string value)
public TimeSpan ToTimeSpan(Byte[] buffer, int offset, int count)
public Guid ToGuid(string value)
public Guid ToGuid(Byte[] buffer, int offset, int count)
public ulong ToUInt64(string value)
public ulong ToUInt64(Byte[] buffer, int offset, int count)
public string ToString(Byte[] buffer, int offset, int count)
public string ToStringUnicode(Byte[] buffer, int offset, int count)
public Byte[] ToBytes(string value)
public int ToChars(Byte[] buffer, int offset, int count, Char[] chars, int charOffset)
public string ToString(bool value)
public string ToString(int value)
public string ToString(long value)
public string ToString(float value)
public string ToString(double value)
public string ToString(decimal value)
public string ToString(TimeSpan value)
public string ToString(UniqueId value)
public string ToString(Guid value)
public string ToString(ulong value)
public string ToString(DateTime value)
private string ToString(object value)
public string ToString(Object[] objects)
public void ToQualifiedName(string qname, String& prefix, String& localName)
private bool TryParseInt32(Byte[] chars, int offset, int count, Int32& result)
private bool TryParseInt64(Byte[] chars, int offset, int count, Int64& result)
private bool TryParseSingle(Byte[] chars, int offset, int count, Single& result)
private bool TryParseDouble(Byte[] chars, int offset, int count, Double& result)
private int ToInt32D2(Byte[] chars, int offset)
private int ToInt32D4(Byte[] chars, int offset, int count)
private int ToInt32D7(Byte[] chars, int offset, int count)
private bool TryParseDateTime(Byte[] chars, int offset, int count, DateTime& result)
public int ToChars(bool value, Byte[] buffer, int offset)
public int ToCharsR(int value, Byte[] chars, int offset)
public int ToChars(int value, Byte[] chars, int offset)
public int ToCharsR(long value, Byte[] chars, int offset)
public int ToChars(long value, Byte[] chars, int offset)
private bool IsNegativeZero(float value)
private bool IsNegativeZero(double value)
private int ToInfinity(bool isNegative, Byte[] buffer, int offset)
private int ToZero(bool isNegative, Byte[] buffer, int offset)
public int ToChars(double value, Byte[] buffer, int offset)
public int ToChars(float value, Byte[] buffer, int offset)
public int ToChars(decimal value, Byte[] buffer, int offset)
public int ToChars(ulong value, Byte[] buffer, int offset)
private int ToAsciiChars(string s, Byte[] buffer, int offset)
private int ToCharsD2(int value, Byte[] chars, int offset)
private int ToCharsD4(int value, Byte[] chars, int offset)
private int ToCharsD7(int value, Byte[] chars, int offset)
public int ToChars(DateTime value, Byte[] chars, int offset)
public bool IsWhitespace(string s)
public bool IsWhitespace(char ch)
public string StripWhitespace(string s)
private string Trim(string s)
}
public System.Xml.XmlDictionary : object {
private IXmlDictionary empty
private Dictionary`2<string, XmlDictionaryString> lookup
private XmlDictionaryString[] strings
private int nextId
public IXmlDictionary Empty
public IXmlDictionary get_Empty()
public void .ctor(int capacity)
public XmlDictionaryString Add(string value)
public bool TryLookup(string value, XmlDictionaryString& result)
public bool TryLookup(int key, XmlDictionaryString& result)
public bool TryLookup(XmlDictionaryString value, XmlDictionaryString& result)
}
public System.Xml.XmlDictionaryReader : XmlReader {
internal int MaxInitialArrayLength
public bool CanCanonicalize
public XmlDictionaryReaderQuotas Quotas
public XmlDictionaryReader CreateDictionaryReader(XmlReader reader)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, int offset, int count, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session)
public XmlDictionaryReader CreateBinaryReader(Byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateBinaryReader(Stream stream, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateBinaryReader(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session)
public XmlDictionaryReader CreateBinaryReader(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateTextReader(Byte[] buffer, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateTextReader(Byte[] buffer, int offset, int count, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateTextReader(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateTextReader(Stream stream, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateTextReader(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateMtomReader(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Stream stream, Encoding[] encodings, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Stream stream, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Stream stream, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
public XmlDictionaryReader CreateMtomReader(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Byte[] buffer, int offset, int count, Encoding[] encodings, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Byte[] buffer, int offset, int count, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas)
public XmlDictionaryReader CreateMtomReader(Byte[] buffer, int offset, int count, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
public bool get_CanCanonicalize()
public XmlDictionaryReaderQuotas get_Quotas()
public void StartCanonicalization(Stream stream, bool includeComments, String[] inclusivePrefixes)
public void EndCanonicalization()
public void MoveToStartElement()
public void MoveToStartElement(string name)
public void MoveToStartElement(string localName, string namespaceUri)
public void MoveToStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public bool IsLocalName(string localName)
public bool IsLocalName(XmlDictionaryString localName)
public bool IsNamespaceUri(string namespaceUri)
public bool IsNamespaceUri(XmlDictionaryString namespaceUri)
public void ReadFullStartElement()
public void ReadFullStartElement(string name)
public void ReadFullStartElement(string localName, string namespaceUri)
public void ReadFullStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void ReadStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public bool IsStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int IndexOfLocalName(String[] localNames, string namespaceUri)
public int IndexOfLocalName(XmlDictionaryString[] localNames, XmlDictionaryString namespaceUri)
public string GetAttribute(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public bool TryGetBase64ContentLength(Int32& length)
public int ReadValueAsBase64(Byte[] buffer, int offset, int count)
public Byte[] ReadContentAsBase64()
internal Byte[] ReadContentAsBase64(int maxByteArrayContentLength, int maxInitialCount)
public string ReadContentAsString()
protected string ReadContentAsString(int maxStringContentLength)
public string ReadString()
protected string ReadString(int maxStringContentLength)
public Byte[] ReadContentAsBinHex()
protected Byte[] ReadContentAsBinHex(int maxByteArrayContentLength)
private Byte[] ReadContentAsBytes(bool base64, int maxByteArrayContentLength)
protected bool IsTextNode(XmlNodeType nodeType)
public int ReadContentAsChars(Char[] chars, int offset, int count)
public object ReadContentAs(Type type, IXmlNamespaceResolver namespaceResolver)
public string ReadContentAsString(String[] strings, Int32& index)
public string ReadContentAsString(XmlDictionaryString[] strings, Int32& index)
public decimal ReadContentAsDecimal()
public float ReadContentAsFloat()
public UniqueId ReadContentAsUniqueId()
public Guid ReadContentAsGuid()
public TimeSpan ReadContentAsTimeSpan()
public void ReadContentAsQualifiedName(String& localName, String& namespaceUri)
public string ReadElementContentAsString()
public bool ReadElementContentAsBoolean()
public int ReadElementContentAsInt()
public long ReadElementContentAsLong()
public float ReadElementContentAsFloat()
public double ReadElementContentAsDouble()
public decimal ReadElementContentAsDecimal()
public DateTime ReadElementContentAsDateTime()
public UniqueId ReadElementContentAsUniqueId()
public Guid ReadElementContentAsGuid()
public TimeSpan ReadElementContentAsTimeSpan()
public Byte[] ReadElementContentAsBase64()
public Byte[] ReadElementContentAsBinHex()
public void GetNonAtomizedNames(String& localName, String& namespaceUri)
public bool TryGetLocalNameAsDictionaryString(XmlDictionaryString& localName)
public bool TryGetNamespaceUriAsDictionaryString(XmlDictionaryString& namespaceUri)
public bool TryGetValueAsDictionaryString(XmlDictionaryString& value)
private void CheckArray(Array array, int offset, int count)
public bool IsStartArray(Type& type)
public bool TryGetArrayLength(Int32& count)
public Boolean[] ReadBooleanArray(string localName, string namespaceUri)
public Boolean[] ReadBooleanArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, Boolean[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int count)
public Int16[] ReadInt16Array(string localName, string namespaceUri)
public Int16[] ReadInt16Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, Int16[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int count)
public Int32[] ReadInt32Array(string localName, string namespaceUri)
public Int32[] ReadInt32Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, Int32[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int count)
public Int64[] ReadInt64Array(string localName, string namespaceUri)
public Int64[] ReadInt64Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, Int64[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int count)
public Single[] ReadSingleArray(string localName, string namespaceUri)
public Single[] ReadSingleArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, Single[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int count)
public Double[] ReadDoubleArray(string localName, string namespaceUri)
public Double[] ReadDoubleArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, Double[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int count)
public Decimal[] ReadDecimalArray(string localName, string namespaceUri)
public Decimal[] ReadDecimalArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, Decimal[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int count)
public DateTime[] ReadDateTimeArray(string localName, string namespaceUri)
public DateTime[] ReadDateTimeArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, DateTime[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int count)
public Guid[] ReadGuidArray(string localName, string namespaceUri)
public Guid[] ReadGuidArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, Guid[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int count)
public TimeSpan[] ReadTimeSpanArray(string localName, string namespaceUri)
public TimeSpan[] ReadTimeSpanArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public int ReadArray(string localName, string namespaceUri, TimeSpan[] array, int offset, int count)
public int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int count)
}
public System.Xml.XmlDictionaryReaderQuotas : object {
private bool readOnly
private int maxStringContentLength
private int maxArrayLength
private int maxDepth
private int maxNameTableCharCount
private int maxBytesPerRead
private XmlDictionaryReaderQuotaTypes modifiedQuotas
private int DefaultMaxDepth
private int DefaultMaxStringContentLength
private int DefaultMaxArrayLength
private int DefaultMaxBytesPerRead
private int DefaultMaxNameTableCharCount
private XmlDictionaryReaderQuotas defaultQuota
private XmlDictionaryReaderQuotas maxQuota
public XmlDictionaryReaderQuotas Max
public int MaxStringContentLength
public int MaxArrayLength
public int MaxBytesPerRead
public int MaxDepth
public int MaxNameTableCharCount
public XmlDictionaryReaderQuotaTypes ModifiedQuotas
private void .ctor(int maxDepth, int maxStringContentLength, int maxArrayLength, int maxBytesPerRead, int maxNameTableCharCount, XmlDictionaryReaderQuotaTypes modifiedQuotas)
public XmlDictionaryReaderQuotas get_Max()
public void CopyTo(XmlDictionaryReaderQuotas quotas)
internal void InternalCopyTo(XmlDictionaryReaderQuotas quotas)
public int get_MaxStringContentLength()
public void set_MaxStringContentLength(int value)
public int get_MaxArrayLength()
public void set_MaxArrayLength(int value)
public int get_MaxBytesPerRead()
public void set_MaxBytesPerRead(int value)
public int get_MaxDepth()
public void set_MaxDepth(int value)
public int get_MaxNameTableCharCount()
public void set_MaxNameTableCharCount(int value)
public XmlDictionaryReaderQuotaTypes get_ModifiedQuotas()
internal void MakeReadOnly()
}
public System.Xml.XmlDictionaryReaderQuotaTypes : Enum {
public int value__
public XmlDictionaryReaderQuotaTypes MaxDepth
public XmlDictionaryReaderQuotaTypes MaxStringContentLength
public XmlDictionaryReaderQuotaTypes MaxArrayLength
public XmlDictionaryReaderQuotaTypes MaxBytesPerRead
public XmlDictionaryReaderQuotaTypes MaxNameTableCharCount
}
public System.Xml.XmlDictionaryString : object {
internal int MinKey
internal int MaxKey
private IXmlDictionary dictionary
private string value
private int key
private Byte[] buffer
private EmptyStringDictionary emptyStringDictionary
public XmlDictionaryString Empty
public IXmlDictionary Dictionary
public int Key
public string Value
public void .ctor(IXmlDictionary dictionary, string value, int key)
internal string GetString(XmlDictionaryString s)
public XmlDictionaryString get_Empty()
public IXmlDictionary get_Dictionary()
public int get_Key()
public string get_Value()
internal Byte[] ToUTF8()
public string ToString()
}
public System.Xml.XmlDictionaryWriter : XmlWriter {
internal bool FastAsync
public bool CanCanonicalize
internal bool get_FastAsync()
internal AsyncCompletionResult WriteBase64Async(AsyncEventArgs`1<XmlWriteBase64AsyncArguments> state)
public Task WriteBase64Async(Byte[] buffer, int index, int count)
internal IAsyncResult BeginWriteBase64(Byte[] buffer, int index, int count, AsyncCallback callback, object state)
internal void EndWriteBase64(IAsyncResult result)
public XmlDictionaryWriter CreateBinaryWriter(Stream stream)
public XmlDictionaryWriter CreateBinaryWriter(Stream stream, IXmlDictionary dictionary)
public XmlDictionaryWriter CreateBinaryWriter(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session)
public XmlDictionaryWriter CreateBinaryWriter(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session, bool ownsStream)
public XmlDictionaryWriter CreateTextWriter(Stream stream)
public XmlDictionaryWriter CreateTextWriter(Stream stream, Encoding encoding)
public XmlDictionaryWriter CreateTextWriter(Stream stream, Encoding encoding, bool ownsStream)
public XmlDictionaryWriter CreateMtomWriter(Stream stream, Encoding encoding, int maxSizeInBytes, string startInfo)
public XmlDictionaryWriter CreateMtomWriter(Stream stream, Encoding encoding, int maxSizeInBytes, string startInfo, string boundary, string startUri, bool writeMessageHeaders, bool ownsStream)
public XmlDictionaryWriter CreateDictionaryWriter(XmlWriter writer)
public void WriteStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteStartElement(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteStartAttribute(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteStartAttribute(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteAttributeString(XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)
public void WriteXmlnsAttribute(string prefix, string namespaceUri)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString namespaceUri)
public void WriteXmlAttribute(string localName, string value)
public void WriteXmlAttribute(XmlDictionaryString localName, XmlDictionaryString value)
public void WriteAttributeString(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)
public void WriteElementString(XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)
public void WriteElementString(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)
public void WriteString(XmlDictionaryString value)
public void WriteQualifiedName(XmlDictionaryString localName, XmlDictionaryString namespaceUri)
public void WriteValue(XmlDictionaryString value)
public void WriteValue(IStreamProvider value)
public Task WriteValueAsync(IStreamProvider value)
internal IAsyncResult BeginWriteValue(IStreamProvider value, AsyncCallback callback, object state)
internal void EndWriteValue(IAsyncResult result)
public void WriteValue(UniqueId value)
public void WriteValue(Guid value)
public void WriteValue(TimeSpan value)
public bool get_CanCanonicalize()
public void StartCanonicalization(Stream stream, bool includeComments, String[] inclusivePrefixes)
public void EndCanonicalization()
private void WriteElementNode(XmlDictionaryReader reader, bool defattr)
private void WriteArrayNode(XmlDictionaryReader reader, string prefix, string localName, string namespaceUri, Type type)
private void WriteArrayNode(XmlDictionaryReader reader, string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Type type)
private void WriteArrayNode(XmlDictionaryReader reader, Type type)
protected void WriteTextNode(XmlDictionaryReader reader, bool isAttribute)
public void WriteNode(XmlReader reader, bool defattr)
public void WriteNode(XmlDictionaryReader reader, bool defattr)
private void CheckArray(Array array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Boolean[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Boolean[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Int16[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int16[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Int32[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int32[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Int64[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Int64[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Single[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Single[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Double[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Double[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Decimal[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Decimal[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, DateTime[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, Guid[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int count)
public void WriteArray(string prefix, string localName, string namespaceUri, TimeSpan[] array, int offset, int count)
public void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int count)
}
internal System.Xml.XmlExceptionHelper : object {
private void ThrowXmlException(XmlDictionaryReader reader, string res)
private void ThrowXmlException(XmlDictionaryReader reader, string res, string arg1)
private void ThrowXmlException(XmlDictionaryReader reader, string res, string arg1, string arg2)
private void ThrowXmlException(XmlDictionaryReader reader, string res, string arg1, string arg2, string arg3)
public void ThrowXmlException(XmlDictionaryReader reader, XmlException exception)
private string GetName(string prefix, string localName)
private string GetWhatWasFound(XmlDictionaryReader reader)
public void ThrowStartElementExpected(XmlDictionaryReader reader)
public void ThrowStartElementExpected(XmlDictionaryReader reader, string name)
public void ThrowStartElementExpected(XmlDictionaryReader reader, string localName, string ns)
public void ThrowStartElementExpected(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString ns)
public void ThrowFullStartElementExpected(XmlDictionaryReader reader)
public void ThrowFullStartElementExpected(XmlDictionaryReader reader, string name)
public void ThrowFullStartElementExpected(XmlDictionaryReader reader, string localName, string ns)
public void ThrowFullStartElementExpected(XmlDictionaryReader reader, XmlDictionaryString localName, XmlDictionaryString ns)
public void ThrowEndElementExpected(XmlDictionaryReader reader, string localName, string ns)
public void ThrowMaxStringContentLengthExceeded(XmlDictionaryReader reader, int maxStringContentLength)
public void ThrowMaxArrayLengthExceeded(XmlDictionaryReader reader, int maxArrayLength)
public void ThrowMaxArrayLengthOrMaxItemsQuotaExceeded(XmlDictionaryReader reader, int maxQuota)
public void ThrowMaxDepthExceeded(XmlDictionaryReader reader, int maxDepth)
public void ThrowMaxBytesPerReadExceeded(XmlDictionaryReader reader, int maxBytesPerRead)
public void ThrowMaxNameTableCharCountExceeded(XmlDictionaryReader reader, int maxNameTableCharCount)
public void ThrowBase64DataExpected(XmlDictionaryReader reader)
public void ThrowUndefinedPrefix(XmlDictionaryReader reader, string prefix)
public void ThrowProcessingInstructionNotSupported(XmlDictionaryReader reader)
public void ThrowInvalidXml(XmlDictionaryReader reader, byte b)
public void ThrowUnexpectedEndOfFile(XmlDictionaryReader reader)
public void ThrowUnexpectedEndElement(XmlDictionaryReader reader)
public void ThrowTokenExpected(XmlDictionaryReader reader, string expected, char found)
public void ThrowTokenExpected(XmlDictionaryReader reader, string expected, string found)
public void ThrowInvalidCharRef(XmlDictionaryReader reader)
public void ThrowTagMismatch(XmlDictionaryReader reader, string expectedPrefix, string expectedLocalName, string foundPrefix, string foundLocalName)
public void ThrowDuplicateXmlnsAttribute(XmlDictionaryReader reader, string localName, string ns)
public void ThrowDuplicateAttribute(XmlDictionaryReader reader, string prefix1, string prefix2, string localName, string ns)
public void ThrowInvalidBinaryFormat(XmlDictionaryReader reader)
public void ThrowInvalidRootData(XmlDictionaryReader reader)
public void ThrowMultipleRootElements(XmlDictionaryReader reader)
public void ThrowDeclarationNotFirst(XmlDictionaryReader reader)
public void ThrowConversionOverflow(XmlDictionaryReader reader, string value, string type)
public void ThrowXmlDictionaryStringIDOutOfRange(XmlDictionaryReader reader)
public void ThrowXmlDictionaryStringIDUndefinedStatic(XmlDictionaryReader reader, int key)
public void ThrowXmlDictionaryStringIDUndefinedSession(XmlDictionaryReader reader, int key)
public void ThrowEmptyNamespace(XmlDictionaryReader reader)
public XmlException CreateConversionException(string value, string type, Exception exception)
public XmlException CreateEncodingException(Byte[] buffer, int offset, int count, Exception exception)
public XmlException CreateEncodingException(string value, Exception exception)
}
internal System.Xml.XmlMtomReader : XmlDictionaryReader {
private Encoding[] encodings
private XmlDictionaryReader xmlReader
private XmlDictionaryReader infosetReader
private MimeReader mimeReader
private Dictionary`2<string, MimePart> mimeParts
private OnXmlDictionaryReaderClose onClose
private bool readingBinaryElement
private int maxBufferSize
private int bufferRemaining
private MimePart part
public XmlDictionaryReaderQuotas Quotas
public int AttributeCount
public string BaseURI
public bool CanReadBinaryContent
public bool CanReadValueChunk
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasAttributes
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public char QuoteChar
public ReadState ReadState
public XmlReaderSettings Settings
public string Item
public string Item
public string Item
public string Value
public Type ValueType
public string XmlLang
public XmlSpace XmlSpace
public int LineNumber
public int LinePosition
internal void DecrementBufferQuota(int maxBuffer, Int32& remaining, int size)
private void SetReadEncodings(Encoding[] encodings)
private void CheckContentType(string contentType)
public void SetInput(Byte[] buffer, int offset, int count, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
public void SetInput(Stream stream, Encoding[] encodings, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize, OnXmlDictionaryReaderClose onClose)
private void Initialize(Stream stream, string contentType, XmlDictionaryReaderQuotas quotas, int maxBufferSize)
public XmlDictionaryReaderQuotas get_Quotas()
private void ReadMessageMimeVersionHeader(MimeVersionHeader header)
private void ReadMessageContentTypeHeader(ContentTypeHeader header, String& boundary, String& start, String& startInfo)
private Encoding ReadRootContentTypeHeader(ContentTypeHeader header, Encoding[] expectedEncodings, string expectedType)
private void CheckContentTransferEncodingOnRoot(ContentTransferEncodingHeader header)
private void CheckContentTransferEncodingOnBinaryPart(ContentTransferEncodingHeader header)
private string GetStartUri(string startUri)
public bool Read()
private MimePart ReadMimePart(string uri)
private MimePart ReadRootMimePart()
private void AdvanceToContentOnElement()
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public bool get_CanResolveEntity()
public void Close()
public int get_Depth()
public bool get_EOF()
public string GetAttribute(int index)
public string GetAttribute(string name)
public string GetAttribute(string name, string ns)
public string GetAttribute(XmlDictionaryString localName, XmlDictionaryString ns)
public bool get_HasAttributes()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public bool IsLocalName(string localName)
public bool IsLocalName(XmlDictionaryString localName)
public bool IsNamespaceUri(string ns)
public bool IsNamespaceUri(XmlDictionaryString ns)
public bool IsStartElement()
public bool IsStartElement(string localName)
public bool IsStartElement(string localName, string ns)
public bool IsStartElement(XmlDictionaryString localName, XmlDictionaryString ns)
public string get_LocalName()
public string LookupNamespace(string ns)
public void MoveToAttribute(int index)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
public char get_QuoteChar()
public bool ReadAttributeValue()
public object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public Byte[] ReadContentAsBase64()
public int ReadValueAsBase64(Byte[] buffer, int offset, int count)
public int ReadContentAsBase64(Byte[] buffer, int offset, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int offset, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int offset, int count)
public int ReadContentAsBinHex(Byte[] buffer, int offset, int count)
public bool ReadContentAsBoolean()
public int ReadContentAsChars(Char[] chars, int index, int count)
public DateTime ReadContentAsDateTime()
public decimal ReadContentAsDecimal()
public double ReadContentAsDouble()
public int ReadContentAsInt()
public long ReadContentAsLong()
public object ReadContentAsObject()
public float ReadContentAsFloat()
public string ReadContentAsString()
public string ReadInnerXml()
public string ReadOuterXml()
public ReadState get_ReadState()
public int ReadValueChunk(Char[] buffer, int index, int count)
public void ResolveEntity()
public XmlReaderSettings get_Settings()
public void Skip()
public string get_Item(int index)
public string get_Item(string name)
public string get_Item(string name, string ns)
public string get_Value()
public Type get_ValueType()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
}
internal System.Xml.XmlMtomWriter : XmlDictionaryWriter {
private int MaxInlinedBytes
private int maxSizeInBytes
private XmlDictionaryWriter writer
private XmlDictionaryWriter infosetWriter
private MimeWriter mimeWriter
private Encoding encoding
private bool isUTF8
private string contentID
private string contentType
private string initialContentTypeForRootPart
private string initialContentTypeForMimeMessage
private MemoryStream contentTypeStream
private List`1<MimePart> mimeParts
private IList`1<MtomBinaryData> binaryDataChunks
private int depth
private int totalSizeOfMimeParts
private int sizeOfBufferedBinaryData
private Char[] chars
private Byte[] bytes
private bool isClosed
private bool ownsStream
private XmlDictionaryWriter Writer
private bool IsInitialized
public XmlWriterSettings Settings
public WriteState WriteState
public string XmlLang
public XmlSpace XmlSpace
public void SetOutput(Stream stream, Encoding encoding, int maxSizeInBytes, string startInfo, string boundary, string startUri, bool writeMessageHeaders, bool ownsStream)
private XmlDictionaryWriter get_Writer()
private bool get_IsInitialized()
private void Initialize(Stream stream, string startInfo, string boundary, string startUri, bool writeMessageHeaders, bool ownsStream)
private void Initialize()
private string GetBoundaryString()
internal bool IsUTF8Encoding(Encoding encoding)
private string GetContentTypeForMimeMessage(string boundary, string startUri, string startInfo)
private string GetContentTypeForRootMimePart(Encoding encoding, string startInfo)
private string CharSet(Encoding enc)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteStartElement(string prefix, XmlDictionaryString localName, XmlDictionaryString ns)
private void ThrowIfElementIsXOPInclude(string prefix, string localName, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteValue(IStreamProvider value)
public void WriteBase64(Byte[] buffer, int index, int count)
internal int ValidateSizeOfMessage(int maxSize, int offset, int size)
private void WriteBase64InlineIfPresent()
private void WriteBase64Inline()
private void WriteXOPInclude()
public string GenerateUriForMimePart(int index)
private void WriteXOPBinaryParts()
private void WriteMimeHeaders(string contentID, string contentType, string contentTransferEncoding)
public void Close()
private void CheckIfStartContentTypeAttribute(string localName, string ns)
private void CheckIfEndContentTypeAttribute()
public void Flush()
public string LookupPrefix(string ns)
public XmlWriterSettings get_Settings()
public void WriteAttributes(XmlReader reader, bool defattr)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void WriteCData(string text)
public void WriteCharEntity(char ch)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteComment(string text)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteEndAttribute()
public void WriteEndDocument()
public void WriteEntityRef(string name)
public void WriteName(string name)
public void WriteNmToken(string name)
protected void WriteTextNode(XmlDictionaryReader reader, bool attribute)
public void WriteNode(XPathNavigator navigator, bool defattr)
public void WriteProcessingInstruction(string name, string text)
public void WriteQualifiedName(string localName, string namespaceUri)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, XmlDictionaryString localName, XmlDictionaryString ns)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public WriteState get_WriteState()
public void WriteString(string text)
public void WriteString(XmlDictionaryString value)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string whitespace)
public void WriteValue(object value)
public void WriteValue(string value)
public void WriteValue(bool value)
public void WriteValue(DateTime value)
public void WriteValue(double value)
public void WriteValue(int value)
public void WriteValue(long value)
public void WriteValue(XmlDictionaryString value)
public void WriteXmlnsAttribute(string prefix, string ns)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString ns)
public string get_XmlLang()
public XmlSpace get_XmlSpace()
}
internal System.Xml.XmlNodeWriter : object {
private XmlNodeWriter nullNodeWriter
public XmlNodeWriter Null
public XmlNodeWriter get_Null()
internal AsyncCompletionResult WriteBase64TextAsync(AsyncEventArgs`1<XmlNodeWriterWriteBase64TextArgs> state)
public IAsyncResult BeginWriteBase64Text(Byte[] trailBuffer, int trailCount, Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public void EndWriteBase64Text(IAsyncResult result)
public void Flush()
public void Close()
public void WriteDeclaration()
public void WriteComment(string text)
public void WriteCData(string text)
public void WriteStartElement(string prefix, string localName)
public void WriteStartElement(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
public void WriteStartElement(string prefix, XmlDictionaryString localName)
public void WriteEndStartElement(bool isEmpty)
public void WriteEndElement(string prefix, string localName)
public void WriteEndElement(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
public void WriteXmlnsAttribute(string prefix, string ns)
public void WriteXmlnsAttribute(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] nsBuffer, int nsOffset, int nsLength)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString ns)
public void WriteStartAttribute(string prefix, string localName)
public void WriteStartAttribute(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
public void WriteStartAttribute(string prefix, XmlDictionaryString localName)
public void WriteEndAttribute()
public void WriteCharEntity(int ch)
public void WriteEscapedText(string value)
public void WriteEscapedText(XmlDictionaryString value)
public void WriteEscapedText(Char[] chars, int offset, int count)
public void WriteEscapedText(Byte[] buffer, int offset, int count)
public void WriteText(string value)
public void WriteText(XmlDictionaryString value)
public void WriteText(Char[] chars, int offset, int count)
public void WriteText(Byte[] buffer, int offset, int count)
public void WriteInt32Text(int value)
public void WriteInt64Text(long value)
public void WriteBoolText(bool value)
public void WriteUInt64Text(ulong value)
public void WriteFloatText(float value)
public void WriteDoubleText(double value)
public void WriteDecimalText(decimal value)
public void WriteDateTimeText(DateTime value)
public void WriteUniqueIdText(UniqueId value)
public void WriteTimeSpanText(TimeSpan value)
public void WriteGuidText(Guid value)
public void WriteStartListText()
public void WriteListSeparator()
public void WriteEndListText()
public void WriteBase64Text(Byte[] trailBuffer, int trailCount, Byte[] buffer, int offset, int count)
public void WriteQualifiedName(string prefix, XmlDictionaryString localName)
}
internal System.Xml.XmlNodeWriterWriteBase64TextArgs : object {
private Byte[] <TrailBuffer>k__BackingField
private int <TrailCount>k__BackingField
private Byte[] <Buffer>k__BackingField
private int <Offset>k__BackingField
private int <Count>k__BackingField
internal Byte[] TrailBuffer
internal int TrailCount
internal Byte[] Buffer
internal int Offset
internal int Count
internal Byte[] get_TrailBuffer()
internal void set_TrailBuffer(Byte[] value)
internal int get_TrailCount()
internal void set_TrailCount(int value)
internal Byte[] get_Buffer()
internal void set_Buffer(Byte[] value)
internal int get_Offset()
internal void set_Offset(int value)
internal int get_Count()
internal void set_Count(int value)
}
internal System.Xml.XmlSigningNodeWriter : XmlNodeWriter {
private XmlNodeWriter writer
private XmlCanonicalWriter signingWriter
private Byte[] chars
private Byte[] base64Chars
private bool text
public XmlNodeWriter NodeWriter
public XmlCanonicalWriter CanonicalWriter
public void .ctor(bool text)
public void SetOutput(XmlNodeWriter writer, Stream stream, bool includeComments, String[] inclusivePrefixes)
public XmlNodeWriter get_NodeWriter()
public void set_NodeWriter(XmlNodeWriter value)
public XmlCanonicalWriter get_CanonicalWriter()
public void Flush()
public void Close()
public void WriteDeclaration()
public void WriteComment(string text)
public void WriteCData(string text)
public void WriteStartElement(string prefix, string localName)
public void WriteStartElement(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
public void WriteStartElement(string prefix, XmlDictionaryString localName)
public void WriteEndStartElement(bool isEmpty)
public void WriteEndElement(string prefix, string localName)
public void WriteXmlnsAttribute(string prefix, string ns)
public void WriteXmlnsAttribute(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] nsBuffer, int nsOffset, int nsLength)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString ns)
public void WriteStartAttribute(string prefix, string localName)
public void WriteStartAttribute(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
public void WriteStartAttribute(string prefix, XmlDictionaryString localName)
public void WriteEndAttribute()
public void WriteCharEntity(int ch)
public void WriteEscapedText(string value)
public void WriteEscapedText(Char[] chars, int offset, int count)
public void WriteEscapedText(XmlDictionaryString value)
public void WriteEscapedText(Byte[] chars, int offset, int count)
public void WriteText(string value)
public void WriteText(Char[] chars, int offset, int count)
public void WriteText(Byte[] chars, int offset, int count)
public void WriteText(XmlDictionaryString value)
public void WriteInt32Text(int value)
public void WriteInt64Text(long value)
public void WriteBoolText(bool value)
public void WriteUInt64Text(ulong value)
public void WriteFloatText(float value)
public void WriteDoubleText(double value)
public void WriteDecimalText(decimal value)
public void WriteDateTimeText(DateTime value)
public void WriteUniqueIdText(UniqueId value)
public void WriteTimeSpanText(TimeSpan value)
public void WriteGuidText(Guid value)
public void WriteStartListText()
public void WriteListSeparator()
public void WriteEndListText()
public void WriteBase64Text(Byte[] trailBytes, int trailByteCount, Byte[] buffer, int offset, int count)
private void WriteBase64Text(Byte[] buffer, int offset, int count)
public void WriteQualifiedName(string prefix, XmlDictionaryString localName)
}
internal System.Xml.XmlStreamNodeWriter : XmlNodeWriter {
private Stream stream
private Byte[] buffer
private int offset
private bool ownsStream
private int bufferLength
private int maxEntityLength
private int maxBytesPerChar
private Encoding encoding
private int hasPendingWrite
private AsyncEventArgs`1<object> flushBufferState
private UTF8Encoding UTF8Encoding
private AsyncCallback onFlushBufferComplete
private AsyncEventArgsCallback onGetFlushComplete
public Stream Stream
public Byte[] StreamBuffer
public int BufferOffset
public int Position
protected void SetOutput(Stream stream, bool ownsStream, Encoding encoding)
public Stream get_Stream()
public void set_Stream(Stream value)
public Byte[] get_StreamBuffer()
public int get_BufferOffset()
public int get_Position()
protected Byte[] GetBuffer(int count, Int32& offset)
internal AsyncCompletionResult GetBufferAsync(GetBufferAsyncEventArgs getBufferState)
private void GetBufferFlushComplete(IAsyncEventArgs completionState)
private AsyncCompletionResult FlushBufferAsync(AsyncEventArgs`1<object> state)
private void OnFlushBufferCompete(IAsyncResult result)
protected IAsyncResult BeginGetBuffer(int count, AsyncCallback callback, object state)
protected Byte[] EndGetBuffer(IAsyncResult result, Int32& offset)
protected void Advance(int count)
private void EnsureByte()
protected void WriteByte(byte b)
protected void WriteByte(char ch)
protected void WriteBytes(byte b1, byte b2)
protected void WriteBytes(char ch1, char ch2)
public void WriteBytes(Byte[] byteBuffer, int byteOffset, int byteCount)
public IAsyncResult BeginWriteBytes(Byte[] byteBuffer, int byteOffset, int byteCount, AsyncCallback callback, object state)
public void EndWriteBytes(IAsyncResult result)
protected void UnsafeWriteBytes(Byte* bytes, int byteCount)
protected void WriteUTF8Char(int ch)
protected void WriteUTF8Chars(Byte[] chars, int charOffset, int charCount)
protected void WriteUTF8Chars(string value)
protected void UnsafeWriteUTF8Chars(Char* chars, int charCount)
protected void UnsafeWriteUnicodeChars(Char* chars, int charCount)
protected int UnsafeGetUnicodeChars(Char* chars, int charCount, Byte[] buffer, int offset)
protected int UnsafeGetUTF8Length(Char* chars, int charCount)
protected int UnsafeGetUTF8Chars(Char* chars, int charCount, Byte[] buffer, int offset)
protected void FlushBuffer()
protected IAsyncResult BeginFlushBuffer(AsyncCallback callback, object state)
protected void EndFlushBuffer(IAsyncResult result)
public void Flush()
public void Close()
}
internal System.Xml.XmlUTF8NodeWriter : XmlStreamNodeWriter {
private Byte[] entityChars
private Boolean[] isEscapedAttributeChar
private Boolean[] isEscapedElementChar
private bool inAttribute
private int bufferLength
private int maxEntityLength
private int maxBytesPerChar
private Encoding encoding
private Char[] chars
private InternalWriteBase64TextAsyncWriter internalWriteBase64TextAsyncWriter
private Byte[] startDecl
private Byte[] endDecl
private Byte[] utf8Decl
private Byte[] digits
private Boolean[] defaultIsEscapedAttributeChar
private Boolean[] defaultIsEscapedElementChar
public Encoding Encoding
public void .ctor(Boolean[] isEscapedAttributeChar, Boolean[] isEscapedElementChar)
public void SetOutput(Stream stream, bool ownsStream, Encoding encoding)
public Encoding get_Encoding()
private Byte[] GetCharEntityBuffer()
private Char[] GetCharBuffer(int charCount)
public void WriteDeclaration()
public void WriteCData(string text)
private void WriteStartComment()
private void WriteEndComment()
public void WriteComment(string text)
public void WriteStartElement(string prefix, string localName)
public void WriteStartElement(string prefix, XmlDictionaryString localName)
public void WriteStartElement(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
public void WriteEndStartElement(bool isEmpty)
public void WriteEndElement(string prefix, string localName)
public void WriteEndElement(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
private void WriteStartXmlnsAttribute()
public void WriteXmlnsAttribute(string prefix, string ns)
public void WriteXmlnsAttribute(string prefix, XmlDictionaryString ns)
public void WriteXmlnsAttribute(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] nsBuffer, int nsOffset, int nsLength)
public void WriteStartAttribute(string prefix, string localName)
public void WriteStartAttribute(string prefix, XmlDictionaryString localName)
public void WriteStartAttribute(Byte[] prefixBuffer, int prefixOffset, int prefixLength, Byte[] localNameBuffer, int localNameOffset, int localNameLength)
public void WriteEndAttribute()
private void WritePrefix(string prefix)
private void WritePrefix(Byte[] prefixBuffer, int prefixOffset, int prefixLength)
private void WriteLocalName(string localName)
private void WriteLocalName(Byte[] localNameBuffer, int localNameOffset, int localNameLength)
public void WriteEscapedText(XmlDictionaryString s)
public void WriteEscapedText(string s)
public void WriteEscapedText(Char[] s, int offset, int count)
private void UnsafeWriteEscapedText(Char* chars, int count)
public void WriteEscapedText(Byte[] chars, int offset, int count)
public void WriteText(int ch)
public void WriteText(Byte[] chars, int offset, int count)
public void WriteText(Char[] chars, int offset, int count)
public void WriteText(string value)
public void WriteText(XmlDictionaryString value)
public void WriteLessThanCharEntity()
public void WriteGreaterThanCharEntity()
public void WriteAmpersandCharEntity()
public void WriteApostropheCharEntity()
public void WriteQuoteCharEntity()
private void WriteHexCharEntity(int ch)
public void WriteCharEntity(int ch)
private int ToBase16(Byte[] chars, int offset, UInt32 value)
public void WriteBoolText(bool value)
public void WriteDecimalText(decimal value)
public void WriteDoubleText(double value)
public void WriteFloatText(float value)
public void WriteDateTimeText(DateTime value)
public void WriteUniqueIdText(UniqueId value)
public void WriteInt32Text(int value)
public void WriteInt64Text(long value)
public void WriteUInt64Text(ulong value)
public void WriteGuidText(Guid value)
public void WriteBase64Text(Byte[] trailBytes, int trailByteCount, Byte[] buffer, int offset, int count)
private void InternalWriteBase64Text(Byte[] buffer, int offset, int count)
internal AsyncCompletionResult WriteBase64TextAsync(AsyncEventArgs`1<XmlNodeWriterWriteBase64TextArgs> xmlNodeWriterState)
public IAsyncResult BeginWriteBase64Text(Byte[] trailBytes, int trailByteCount, Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public void EndWriteBase64Text(IAsyncResult result)
private IAsyncResult BeginInternalWriteBase64Text(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
private void EndInternalWriteBase64Text(IAsyncResult result)
public void WriteTimeSpanText(TimeSpan value)
public void WriteStartListText()
public void WriteListSeparator()
public void WriteEndListText()
public void WriteQualifiedName(string prefix, XmlDictionaryString localName)
}
internal System.Xml.XmlUTF8TextReader : XmlBaseReader {
private int MaxTextChunk
private PrefixHandle prefix
private StringHandle localName
private Int32[] rowOffsets
private OnXmlDictionaryReaderClose onClose
private bool buffered
private int maxBytesPerRead
private Byte[] charType
public int LineNumber
public int LinePosition
public void SetInput(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public void SetInput(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
private void MoveToInitial(XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)
public void Close()
private void SkipWhitespace()
private void ReadDeclaration()
private void VerifyNCName(string s)
private void ReadQualifiedName(PrefixHandle prefix, StringHandle localName)
private int ReadAttributeText(Byte[] buffer, int offset, int offsetMax)
private void ReadAttributes()
private void ReadNonFFFE()
private bool IsNextCharacterNonFFFE(Byte[] buffer, int offset)
private void BufferElement()
private void ReadStartElement()
private void ReadEndElement()
private void ReadComment()
private void ReadCData()
private int ReadCharRef()
private void ReadWhitespace()
private int ReadWhitespace(Byte[] buffer, int offset, int offsetMax)
private int ReadText(Byte[] buffer, int offset, int offsetMax)
private int ReadTextAndWatchForInvalidCharacters(Byte[] buffer, int offset, int offsetMax)
private int BreakText(Byte[] buffer, int offset, int length)
private void ReadText(bool hasLeadingByteOf0xEF)
private void ReadEscapedText()
public bool Read()
protected XmlSigningNodeWriter CreateSigningNodeWriter()
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
private void GetPosition(Int32& row, Int32& column)
}
internal System.Xml.XmlUTF8TextWriter : XmlBaseWriter {
private XmlUTF8NodeWriter writer
internal bool FastAsync
public bool CanFragment
internal bool get_FastAsync()
public void SetOutput(Stream stream, Encoding encoding, bool ownsStream)
public bool get_CanFragment()
protected XmlSigningNodeWriter CreateSigningNodeWriter()
}
internal System.Xml.XmlWriteBase64AsyncArguments : object {
private Byte[] <Buffer>k__BackingField
private int <Index>k__BackingField
private int <Count>k__BackingField
private int <Offset>k__BackingField
internal Byte[] Buffer
internal int Index
internal int Count
internal int Offset
internal Byte[] get_Buffer()
internal void set_Buffer(Byte[] value)
internal int get_Index()
internal void set_Index(int value)
internal int get_Count()
internal void set_Count(int value)
internal int get_Offset()
internal void set_Offset(int value)
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
