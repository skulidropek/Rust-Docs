public UnityEngine.WheelCollider : Collider {
public Vector3 center
public float radius
public float suspensionDistance
public JointSpring suspensionSpring
public float forceAppPointDistance
public float mass
public float wheelDampingRate
public WheelFrictionCurve forwardFriction
public WheelFrictionCurve sidewaysFriction
public float motorTorque
public float brakeTorque
public float steerAngle
public bool isGrounded
public float rpm
public float sprungMass
public Vector3 get_center()
public void set_center(Vector3 value)
public float get_radius()
public void set_radius(float value)
public float get_suspensionDistance()
public void set_suspensionDistance(float value)
public JointSpring get_suspensionSpring()
public void set_suspensionSpring(JointSpring value)
public float get_forceAppPointDistance()
public void set_forceAppPointDistance(float value)
public float get_mass()
public void set_mass(float value)
public float get_wheelDampingRate()
public void set_wheelDampingRate(float value)
public WheelFrictionCurve get_forwardFriction()
public void set_forwardFriction(WheelFrictionCurve value)
public WheelFrictionCurve get_sidewaysFriction()
public void set_sidewaysFriction(WheelFrictionCurve value)
public float get_motorTorque()
public void set_motorTorque(float value)
public float get_brakeTorque()
public void set_brakeTorque(float value)
public float get_steerAngle()
public void set_steerAngle(float value)
public bool get_isGrounded()
public float get_rpm()
public float get_sprungMass()
public void ConfigureVehicleSubsteps(float speedThreshold, int stepsBelowThreshold, int stepsAboveThreshold)
public void GetWorldPose(Vector3& pos, Quaternion& quat)
public bool GetGroundHit(WheelHit& hit)
private void get_center_Injected(Vector3& ret)
private void set_center_Injected(Vector3& value)
private void get_suspensionSpring_Injected(JointSpring& ret)
private void set_suspensionSpring_Injected(JointSpring& value)
private void get_forwardFriction_Injected(WheelFrictionCurve& ret)
private void set_forwardFriction_Injected(WheelFrictionCurve& value)
private void get_sidewaysFriction_Injected(WheelFrictionCurve& ret)
private void set_sidewaysFriction_Injected(WheelFrictionCurve& value)
}
public UnityEngine.WheelHit : ValueType {
private Vector3 m_Point
private Vector3 m_Normal
private Vector3 m_ForwardDir
private Vector3 m_SidewaysDir
private float m_Force
private float m_ForwardSlip
private float m_SidewaysSlip
private Collider m_Collider
public Collider collider
public Vector3 point
public Vector3 normal
public Vector3 forwardDir
public Vector3 sidewaysDir
public float force
public float forwardSlip
public float sidewaysSlip
public Collider get_collider()
public void set_collider(Collider value)
public Vector3 get_point()
public void set_point(Vector3 value)
public Vector3 get_normal()
public void set_normal(Vector3 value)
public Vector3 get_forwardDir()
public void set_forwardDir(Vector3 value)
public Vector3 get_sidewaysDir()
public void set_sidewaysDir(Vector3 value)
public float get_force()
public void set_force(float value)
public float get_forwardSlip()
public void set_forwardSlip(float value)
public float get_sidewaysSlip()
public void set_sidewaysSlip(float value)
}
