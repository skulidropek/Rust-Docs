[NativeHeaderAttribute("Modules/Vehicles/WheelCollider.h")]
[NativeHeaderAttribute("PhysicsScriptingClasses.h")]
public class UnityEngine.WheelCollider : Collider {
    public Vector3 center { get; public set; }
    public float radius { get; public set; }
    public float suspensionDistance { get; public set; }
    public JointSpring suspensionSpring { get; public set; }
    public bool suspensionExpansionLimited { get; public set; }
    public float forceAppPointDistance { get; public set; }
    public float mass { get; public set; }
    public float wheelDampingRate { get; public set; }
    public WheelFrictionCurve forwardFriction { get; public set; }
    public WheelFrictionCurve sidewaysFriction { get; public set; }
    public float motorTorque { get; public set; }
    public float brakeTorque { get; public set; }
    public float steerAngle { get; public set; }
    public bool isGrounded { get; }
    public float rpm { get; }
    public float sprungMass { get; public set; }
    public float rotationSpeed { get; public set; }
    public Vector3 get_center();
    public void set_center(Vector3 value);
    public float get_radius();
    public void set_radius(float value);
    public float get_suspensionDistance();
    public void set_suspensionDistance(float value);
    public JointSpring get_suspensionSpring();
    public void set_suspensionSpring(JointSpring value);
    public bool get_suspensionExpansionLimited();
    public void set_suspensionExpansionLimited(bool value);
    public float get_forceAppPointDistance();
    public void set_forceAppPointDistance(float value);
    public float get_mass();
    public void set_mass(float value);
    public float get_wheelDampingRate();
    public void set_wheelDampingRate(float value);
    public WheelFrictionCurve get_forwardFriction();
    public void set_forwardFriction(WheelFrictionCurve value);
    public WheelFrictionCurve get_sidewaysFriction();
    public void set_sidewaysFriction(WheelFrictionCurve value);
    public float get_motorTorque();
    public void set_motorTorque(float value);
    public float get_brakeTorque();
    public void set_brakeTorque(float value);
    public float get_steerAngle();
    public void set_steerAngle(float value);
    [NativeNameAttribute("IsGrounded")]
public bool get_isGrounded();
    public float get_rpm();
    public float get_sprungMass();
    public void set_sprungMass(float value);
    public float get_rotationSpeed();
    public void set_rotationSpeed(float value);
    public void ResetSprungMasses();
    public void ConfigureVehicleSubsteps(float speedThreshold, int stepsBelowThreshold, int stepsAboveThreshold);
    public void GetWorldPose(Vector3& pos, Quaternion& quat);
    public bool GetGroundHit(WheelHit& hit);
    private void get_center_Injected(Vector3& ret);
    private void set_center_Injected(Vector3& value);
    private void get_suspensionSpring_Injected(JointSpring& ret);
    private void set_suspensionSpring_Injected(JointSpring& value);
    private void get_forwardFriction_Injected(WheelFrictionCurve& ret);
    private void set_forwardFriction_Injected(WheelFrictionCurve& value);
    private void get_sidewaysFriction_Injected(WheelFrictionCurve& ret);
    private void set_sidewaysFriction_Injected(WheelFrictionCurve& value);
}
[NativeHeaderAttribute("Modules/Vehicles/WheelCollider.h")]
public class UnityEngine.WheelHit : ValueType {
    [NativeNameAttribute("point")]
private Vector3 m_Point;
    [NativeNameAttribute("normal")]
private Vector3 m_Normal;
    [NativeNameAttribute("forwardDir")]
private Vector3 m_ForwardDir;
    [NativeNameAttribute("sidewaysDir")]
private Vector3 m_SidewaysDir;
    [NativeNameAttribute("force")]
private float m_Force;
    [NativeNameAttribute("forwardSlip")]
private float m_ForwardSlip;
    [NativeNameAttribute("sidewaysSlip")]
private float m_SidewaysSlip;
    [NativeNameAttribute("collider")]
private Collider m_Collider;
    public Collider collider { get; public set; }
    public Vector3 point { get; public set; }
    public Vector3 normal { get; public set; }
    public Vector3 forwardDir { get; public set; }
    public Vector3 sidewaysDir { get; public set; }
    public float force { get; public set; }
    public float forwardSlip { get; public set; }
    public float sidewaysSlip { get; public set; }
    public Collider get_collider();
    public void set_collider(Collider value);
    public Vector3 get_point();
    public void set_point(Vector3 value);
    public Vector3 get_normal();
    public void set_normal(Vector3 value);
    public Vector3 get_forwardDir();
    public void set_forwardDir(Vector3 value);
    public Vector3 get_sidewaysDir();
    public void set_sidewaysDir(Vector3 value);
    public float get_force();
    public void set_force(float value);
    public float get_forwardSlip();
    public void set_forwardSlip(float value);
    public float get_sidewaysSlip();
    public void set_sidewaysSlip(float value);
}
