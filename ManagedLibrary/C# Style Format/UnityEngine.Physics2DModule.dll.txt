public UnityEngine.AnchoredJoint2D : Joint2D {
public Vector2 anchor
public Vector2 connectedAnchor
public bool autoConfigureConnectedAnchor
public Vector2 get_anchor()
public void set_anchor(Vector2 value)
public Vector2 get_connectedAnchor()
public void set_connectedAnchor(Vector2 value)
public bool get_autoConfigureConnectedAnchor()
public void set_autoConfigureConnectedAnchor(bool value)
private void get_anchor_Injected(Vector2& ret)
private void set_anchor_Injected(Vector2& value)
private void get_connectedAnchor_Injected(Vector2& ret)
private void set_connectedAnchor_Injected(Vector2& value)
}
public UnityEngine.AreaEffector2D : Effector2D {
public float forceAngle
public bool useGlobalAngle
public float forceMagnitude
public float forceVariation
public float drag
public float angularDrag
public EffectorSelection2D forceTarget
public float get_forceAngle()
public void set_forceAngle(float value)
public bool get_useGlobalAngle()
public void set_useGlobalAngle(bool value)
public float get_forceMagnitude()
public void set_forceMagnitude(float value)
public float get_forceVariation()
public void set_forceVariation(float value)
public float get_drag()
public void set_drag(float value)
public float get_angularDrag()
public void set_angularDrag(float value)
public EffectorSelection2D get_forceTarget()
public void set_forceTarget(EffectorSelection2D value)
}
public UnityEngine.BoxCollider2D : Collider2D {
public Vector2 size
public float edgeRadius
public bool autoTiling
public Vector2 get_size()
public void set_size(Vector2 value)
public float get_edgeRadius()
public void set_edgeRadius(float value)
public bool get_autoTiling()
public void set_autoTiling(bool value)
private void get_size_Injected(Vector2& ret)
private void set_size_Injected(Vector2& value)
}
public UnityEngine.BuoyancyEffector2D : Effector2D {
public float surfaceLevel
public float density
public float linearDrag
public float angularDrag
public float flowAngle
public float flowMagnitude
public float flowVariation
public float get_surfaceLevel()
public void set_surfaceLevel(float value)
public float get_density()
public void set_density(float value)
public float get_linearDrag()
public void set_linearDrag(float value)
public float get_angularDrag()
public void set_angularDrag(float value)
public float get_flowAngle()
public void set_flowAngle(float value)
public float get_flowMagnitude()
public void set_flowMagnitude(float value)
public float get_flowVariation()
public void set_flowVariation(float value)
}
public UnityEngine.CapsuleCollider2D : Collider2D {
public Vector2 size
public CapsuleDirection2D direction
public Vector2 get_size()
public void set_size(Vector2 value)
public CapsuleDirection2D get_direction()
public void set_direction(CapsuleDirection2D value)
private void get_size_Injected(Vector2& ret)
private void set_size_Injected(Vector2& value)
}
public UnityEngine.CapsuleDirection2D : Enum {
public int value__
public CapsuleDirection2D Vertical
public CapsuleDirection2D Horizontal
}
public UnityEngine.CircleCollider2D : Collider2D {
public float radius
public float get_radius()
public void set_radius(float value)
}
public UnityEngine.Collider2D : Behaviour {
public float density
public bool isTrigger
public bool usedByEffector
public bool usedByComposite
public CompositeCollider2D composite
public Vector2 offset
public Rigidbody2D attachedRigidbody
public int shapeCount
public Bounds bounds
public ColliderErrorState2D errorState
internal bool compositeCapable
public PhysicsMaterial2D sharedMaterial
public float friction
public float bounciness
public float get_density()
public void set_density(float value)
public bool get_isTrigger()
public void set_isTrigger(bool value)
public bool get_usedByEffector()
public void set_usedByEffector(bool value)
public bool get_usedByComposite()
public void set_usedByComposite(bool value)
public CompositeCollider2D get_composite()
public Vector2 get_offset()
public void set_offset(Vector2 value)
public Rigidbody2D get_attachedRigidbody()
public int get_shapeCount()
public Mesh CreateMesh(bool useBodyPosition, bool useBodyRotation)
public UInt32 GetShapeHash()
public int GetShapes(PhysicsShapeGroup2D physicsShapeGroup)
public int GetShapes(PhysicsShapeGroup2D physicsShapeGroup, int shapeIndex, int shapeCount)
private int GetShapes_Internal(GroupState& physicsShapeGroupState, int shapeIndex, int shapeCount)
public Bounds get_bounds()
public ColliderErrorState2D get_errorState()
internal bool get_compositeCapable()
public PhysicsMaterial2D get_sharedMaterial()
public void set_sharedMaterial(PhysicsMaterial2D value)
public float get_friction()
public float get_bounciness()
public bool IsTouching(Collider2D collider)
public bool IsTouching(Collider2D collider, ContactFilter2D contactFilter)
private bool IsTouching_OtherColliderWithFilter(Collider2D collider, ContactFilter2D contactFilter)
public bool IsTouching(ContactFilter2D contactFilter)
private bool IsTouching_AnyColliderWithFilter(ContactFilter2D contactFilter)
public bool IsTouchingLayers()
public bool IsTouchingLayers(int layerMask)
public bool OverlapPoint(Vector2 point)
public ColliderDistance2D Distance(Collider2D collider)
public int OverlapCollider(ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapCollider(ContactFilter2D contactFilter, List`1<Collider2D> results)
public int GetContacts(ContactPoint2D[] contacts)
public int GetContacts(List`1<ContactPoint2D> contacts)
public int GetContacts(ContactFilter2D contactFilter, ContactPoint2D[] contacts)
public int GetContacts(ContactFilter2D contactFilter, List`1<ContactPoint2D> contacts)
public int GetContacts(Collider2D[] colliders)
public int GetContacts(List`1<Collider2D> colliders)
public int GetContacts(ContactFilter2D contactFilter, Collider2D[] colliders)
public int GetContacts(ContactFilter2D contactFilter, List`1<Collider2D> colliders)
public int Cast(Vector2 direction, RaycastHit2D[] results)
public int Cast(Vector2 direction, RaycastHit2D[] results, float distance)
public int Cast(Vector2 direction, RaycastHit2D[] results, float distance, bool ignoreSiblingColliders)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance, bool ignoreSiblingColliders)
private int CastArray_Internal(Vector2 direction, float distance, ContactFilter2D contactFilter, bool ignoreSiblingColliders, RaycastHit2D[] results)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, List`1<RaycastHit2D> results, float distance, bool ignoreSiblingColliders)
private int CastList_Internal(Vector2 direction, float distance, ContactFilter2D contactFilter, bool ignoreSiblingColliders, List`1<RaycastHit2D> results)
public int Raycast(Vector2 direction, RaycastHit2D[] results)
public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance)
public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
public int Raycast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Raycast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
private int RaycastArray_Internal(Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Raycast(Vector2 direction, ContactFilter2D contactFilter, List`1<RaycastHit2D> results, float distance)
private int RaycastList_Internal(Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
public Vector2 ClosestPoint(Vector2 position)
private void get_offset_Injected(Vector2& ret)
private void set_offset_Injected(Vector2& value)
private void get_bounds_Injected(Bounds& ret)
private bool IsTouching_OtherColliderWithFilter_Injected(Collider2D collider, ContactFilter2D& contactFilter)
private bool IsTouching_AnyColliderWithFilter_Injected(ContactFilter2D& contactFilter)
private bool OverlapPoint_Injected(Vector2& point)
private int CastArray_Internal_Injected(Vector2& direction, float distance, ContactFilter2D& contactFilter, bool ignoreSiblingColliders, RaycastHit2D[] results)
private int CastList_Internal_Injected(Vector2& direction, float distance, ContactFilter2D& contactFilter, bool ignoreSiblingColliders, List`1<RaycastHit2D> results)
private int RaycastArray_Internal_Injected(Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
private int RaycastList_Internal_Injected(Vector2& direction, float distance, ContactFilter2D& contactFilter, List`1<RaycastHit2D> results)
}
public UnityEngine.ColliderDistance2D : ValueType {
private Vector2 m_PointA
private Vector2 m_PointB
private Vector2 m_Normal
private float m_Distance
private int m_IsValid
public Vector2 pointA
public Vector2 pointB
public Vector2 normal
public float distance
public bool isOverlapped
public bool isValid
public Vector2 get_pointA()
public void set_pointA(Vector2 value)
public Vector2 get_pointB()
public void set_pointB(Vector2 value)
public Vector2 get_normal()
public float get_distance()
public void set_distance(float value)
public bool get_isOverlapped()
public bool get_isValid()
public void set_isValid(bool value)
}
public UnityEngine.ColliderErrorState2D : Enum {
public int value__
public ColliderErrorState2D None
public ColliderErrorState2D NoShapes
public ColliderErrorState2D RemovedShapes
}
public UnityEngine.Collision2D : object {
internal int m_Collider
internal int m_OtherCollider
internal int m_Rigidbody
internal int m_OtherRigidbody
internal Vector2 m_RelativeVelocity
internal int m_Enabled
internal int m_ContactCount
internal ContactPoint2D[] m_ReusedContacts
internal ContactPoint2D[] m_LegacyContacts
public Collider2D collider
public Collider2D otherCollider
public Rigidbody2D rigidbody
public Rigidbody2D otherRigidbody
public Transform transform
public GameObject gameObject
public Vector2 relativeVelocity
public bool enabled
public ContactPoint2D[] contacts
public int contactCount
private ContactPoint2D[] GetContacts_Internal()
public Collider2D get_collider()
public Collider2D get_otherCollider()
public Rigidbody2D get_rigidbody()
public Rigidbody2D get_otherRigidbody()
public Transform get_transform()
public GameObject get_gameObject()
public Vector2 get_relativeVelocity()
public bool get_enabled()
public ContactPoint2D[] get_contacts()
public int get_contactCount()
public ContactPoint2D GetContact(int index)
public int GetContacts(ContactPoint2D[] contacts)
public int GetContacts(List`1<ContactPoint2D> contacts)
}
public UnityEngine.CollisionDetectionMode2D : Enum {
public int value__
public CollisionDetectionMode2D None
public CollisionDetectionMode2D Discrete
public CollisionDetectionMode2D Continuous
}
public UnityEngine.CompositeCollider2D : Collider2D {
public GeometryType geometryType
public GenerationType generationType
public float vertexDistance
public float edgeRadius
public float offsetDistance
public int pathCount
public int pointCount
public GeometryType get_geometryType()
public void set_geometryType(GeometryType value)
public GenerationType get_generationType()
public void set_generationType(GenerationType value)
public float get_vertexDistance()
public void set_vertexDistance(float value)
public float get_edgeRadius()
public void set_edgeRadius(float value)
public float get_offsetDistance()
public void set_offsetDistance(float value)
public void GenerateGeometry()
public int GetPathPointCount(int index)
private int GetPathPointCount_Internal(int index)
public int get_pathCount()
public int get_pointCount()
public int GetPath(int index, Vector2[] points)
private int GetPathArray_Internal(int index, Vector2[] points)
public int GetPath(int index, List`1<Vector2> points)
private int GetPathList_Internal(int index, List`1<Vector2> points)
}
public UnityEngine.ConstantForce2D : PhysicsUpdateBehaviour2D {
public Vector2 force
public Vector2 relativeForce
public float torque
public Vector2 get_force()
public void set_force(Vector2 value)
public Vector2 get_relativeForce()
public void set_relativeForce(Vector2 value)
public float get_torque()
public void set_torque(float value)
private void get_force_Injected(Vector2& ret)
private void set_force_Injected(Vector2& value)
private void get_relativeForce_Injected(Vector2& ret)
private void set_relativeForce_Injected(Vector2& value)
}
public UnityEngine.ContactFilter2D : ValueType {
public bool useTriggers
public bool useLayerMask
public bool useDepth
public bool useOutsideDepth
public bool useNormalAngle
public bool useOutsideNormalAngle
public LayerMask layerMask
public float minDepth
public float maxDepth
public float minNormalAngle
public float maxNormalAngle
public float NormalAngleUpperLimit
public bool isFiltering
public ContactFilter2D NoFilter()
private void CheckConsistency()
public void ClearLayerMask()
public void SetLayerMask(LayerMask layerMask)
public void ClearDepth()
public void SetDepth(float minDepth, float maxDepth)
public void ClearNormalAngle()
public void SetNormalAngle(float minNormalAngle, float maxNormalAngle)
public bool get_isFiltering()
public bool IsFilteringTrigger(Collider2D collider)
public bool IsFilteringLayerMask(GameObject obj)
public bool IsFilteringDepth(GameObject obj)
public bool IsFilteringNormalAngle(Vector2 normal)
public bool IsFilteringNormalAngle(float angle)
private bool IsFilteringNormalAngleUsingAngle(float angle)
internal ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth)
private void CheckConsistency_Injected(ContactFilter2D& _unity_self)
private bool IsFilteringNormalAngle_Injected(ContactFilter2D& _unity_self, Vector2& normal)
private bool IsFilteringNormalAngleUsingAngle_Injected(ContactFilter2D& _unity_self, float angle)
}
public UnityEngine.ContactPoint2D : ValueType {
private Vector2 m_Point
private Vector2 m_Normal
private Vector2 m_RelativeVelocity
private float m_Separation
private float m_NormalImpulse
private float m_TangentImpulse
private int m_Collider
private int m_OtherCollider
private int m_Rigidbody
private int m_OtherRigidbody
private int m_Enabled
public Vector2 point
public Vector2 normal
public float separation
public float normalImpulse
public float tangentImpulse
public Vector2 relativeVelocity
public Collider2D collider
public Collider2D otherCollider
public Rigidbody2D rigidbody
public Rigidbody2D otherRigidbody
public bool enabled
public Vector2 get_point()
public Vector2 get_normal()
public float get_separation()
public float get_normalImpulse()
public float get_tangentImpulse()
public Vector2 get_relativeVelocity()
public Collider2D get_collider()
public Collider2D get_otherCollider()
public Rigidbody2D get_rigidbody()
public Rigidbody2D get_otherRigidbody()
public bool get_enabled()
}
public UnityEngine.CustomCollider2D : Collider2D {
public int customShapeCount
public int customVertexCount
public int get_customShapeCount()
public int get_customVertexCount()
public int GetCustomShapes(PhysicsShapeGroup2D physicsShapeGroup)
public int GetCustomShapes(PhysicsShapeGroup2D physicsShapeGroup, int shapeIndex, int shapeCount)
private int GetCustomShapes_Internal(GroupState& physicsShapeGroupState, int shapeIndex, int shapeCount)
public int GetCustomShapes(NativeArray`1<PhysicsShape2D> shapes, NativeArray`1<Vector2> vertices)
private int GetCustomShapesNative_Internal(IntPtr shapesPtr, int shapeCount, IntPtr verticesPtr, int vertexCount)
public void SetCustomShapes(PhysicsShapeGroup2D physicsShapeGroup)
private void SetCustomShapesAll_Internal(GroupState& physicsShapeGroupState)
public void SetCustomShapes(NativeArray`1<PhysicsShape2D> shapes, NativeArray`1<Vector2> vertices)
private void SetCustomShapesNative_Internal(IntPtr shapesPtr, int shapeCount, IntPtr verticesPtr, int vertexCount)
public void SetCustomShape(PhysicsShapeGroup2D physicsShapeGroup, int srcShapeIndex, int dstShapeIndex)
private void SetCustomShape_Internal(GroupState& physicsShapeGroupState, int srcShapeIndex, int dstShapeIndex)
public void SetCustomShape(NativeArray`1<PhysicsShape2D> shapes, NativeArray`1<Vector2> vertices, int srcShapeIndex, int dstShapeIndex)
private void SetCustomShapeNative_Internal(IntPtr shapesPtr, int shapeCount, IntPtr verticesPtr, int vertexCount, int srcShapeIndex, int dstShapeIndex)
public void ClearCustomShapes(int shapeIndex, int shapeCount)
private void ClearCustomShapes_Internal(int shapeIndex, int shapeCount)
public void ClearCustomShapes()
}
public UnityEngine.DistanceJoint2D : AnchoredJoint2D {
public bool autoConfigureDistance
public float distance
public bool maxDistanceOnly
public bool get_autoConfigureDistance()
public void set_autoConfigureDistance(bool value)
public float get_distance()
public void set_distance(float value)
public bool get_maxDistanceOnly()
public void set_maxDistanceOnly(bool value)
}
public UnityEngine.EdgeCollider2D : Collider2D {
public float edgeRadius
public int edgeCount
public int pointCount
public Vector2[] points
public bool useAdjacentStartPoint
public bool useAdjacentEndPoint
public Vector2 adjacentStartPoint
public Vector2 adjacentEndPoint
public void Reset()
public float get_edgeRadius()
public void set_edgeRadius(float value)
public int get_edgeCount()
public int get_pointCount()
public Vector2[] get_points()
public void set_points(Vector2[] value)
public int GetPoints(List`1<Vector2> points)
public bool SetPoints(List`1<Vector2> points)
public bool get_useAdjacentStartPoint()
public void set_useAdjacentStartPoint(bool value)
public bool get_useAdjacentEndPoint()
public void set_useAdjacentEndPoint(bool value)
public Vector2 get_adjacentStartPoint()
public void set_adjacentStartPoint(Vector2 value)
public Vector2 get_adjacentEndPoint()
public void set_adjacentEndPoint(Vector2 value)
private void get_adjacentStartPoint_Injected(Vector2& ret)
private void set_adjacentStartPoint_Injected(Vector2& value)
private void get_adjacentEndPoint_Injected(Vector2& ret)
private void set_adjacentEndPoint_Injected(Vector2& value)
}
public UnityEngine.Effector2D : Behaviour {
public bool useColliderMask
public int colliderMask
internal bool requiresCollider
internal bool designedForTrigger
internal bool designedForNonTrigger
public bool get_useColliderMask()
public void set_useColliderMask(bool value)
public int get_colliderMask()
public void set_colliderMask(int value)
internal bool get_requiresCollider()
internal bool get_designedForTrigger()
internal bool get_designedForNonTrigger()
}
public UnityEngine.EffectorForceMode2D : Enum {
public int value__
public EffectorForceMode2D Constant
public EffectorForceMode2D InverseLinear
public EffectorForceMode2D InverseSquared
}
public UnityEngine.EffectorSelection2D : Enum {
public int value__
public EffectorSelection2D Rigidbody
public EffectorSelection2D Collider
}
public UnityEngine.FixedJoint2D : AnchoredJoint2D {
public float dampingRatio
public float frequency
public float referenceAngle
public float get_dampingRatio()
public void set_dampingRatio(float value)
public float get_frequency()
public void set_frequency(float value)
public float get_referenceAngle()
}
public UnityEngine.ForceMode2D : Enum {
public int value__
public ForceMode2D Force
public ForceMode2D Impulse
}
public UnityEngine.FrictionJoint2D : AnchoredJoint2D {
public float maxForce
public float maxTorque
public float get_maxForce()
public void set_maxForce(float value)
public float get_maxTorque()
public void set_maxTorque(float value)
}
public UnityEngine.HingeJoint2D : AnchoredJoint2D {
public bool useMotor
public bool useLimits
public JointMotor2D motor
public JointAngleLimits2D limits
public JointLimitState2D limitState
public float referenceAngle
public float jointAngle
public float jointSpeed
public bool get_useMotor()
public void set_useMotor(bool value)
public bool get_useLimits()
public void set_useLimits(bool value)
public JointMotor2D get_motor()
public void set_motor(JointMotor2D value)
public JointAngleLimits2D get_limits()
public void set_limits(JointAngleLimits2D value)
public JointLimitState2D get_limitState()
public float get_referenceAngle()
public float get_jointAngle()
public float get_jointSpeed()
public float GetMotorTorque(float timeStep)
private void get_motor_Injected(JointMotor2D& ret)
private void set_motor_Injected(JointMotor2D& value)
private void get_limits_Injected(JointAngleLimits2D& ret)
private void set_limits_Injected(JointAngleLimits2D& value)
}
public UnityEngine.Joint2D : Behaviour {
public Rigidbody2D attachedRigidbody
public Rigidbody2D connectedBody
public bool enableCollision
public float breakForce
public float breakTorque
public Vector2 reactionForce
public float reactionTorque
public Rigidbody2D get_attachedRigidbody()
public Rigidbody2D get_connectedBody()
public void set_connectedBody(Rigidbody2D value)
public bool get_enableCollision()
public void set_enableCollision(bool value)
public float get_breakForce()
public void set_breakForce(float value)
public float get_breakTorque()
public void set_breakTorque(float value)
public Vector2 get_reactionForce()
public float get_reactionTorque()
public Vector2 GetReactionForce(float timeStep)
public float GetReactionTorque(float timeStep)
private void get_reactionForce_Injected(Vector2& ret)
private void GetReactionForce_Injected(float timeStep, Vector2& ret)
}
public UnityEngine.JointAngleLimits2D : ValueType {
private float m_LowerAngle
private float m_UpperAngle
public float min
public float max
public float get_min()
public void set_min(float value)
public float get_max()
public void set_max(float value)
}
public UnityEngine.JointLimitState2D : Enum {
public int value__
public JointLimitState2D Inactive
public JointLimitState2D LowerLimit
public JointLimitState2D UpperLimit
public JointLimitState2D EqualLimits
}
public UnityEngine.JointMotor2D : ValueType {
private float m_MotorSpeed
private float m_MaximumMotorTorque
public float motorSpeed
public float maxMotorTorque
public float get_motorSpeed()
public void set_motorSpeed(float value)
public float get_maxMotorTorque()
public void set_maxMotorTorque(float value)
}
public UnityEngine.JointSuspension2D : ValueType {
private float m_DampingRatio
private float m_Frequency
private float m_Angle
public float dampingRatio
public float frequency
public float angle
public float get_dampingRatio()
public void set_dampingRatio(float value)
public float get_frequency()
public void set_frequency(float value)
public float get_angle()
public void set_angle(float value)
}
public UnityEngine.JointTranslationLimits2D : ValueType {
private float m_LowerTranslation
private float m_UpperTranslation
public float min
public float max
public float get_min()
public void set_min(float value)
public float get_max()
public void set_max(float value)
}
public UnityEngine.Physics2D : object {
public int IgnoreRaycastLayer
public int DefaultRaycastLayers
public int AllLayers
public int MaxPolygonShapeVertices
private List`1<Rigidbody2D> m_LastDisabledRigidbody2D
public PhysicsScene2D defaultPhysicsScene
public int velocityIterations
public int positionIterations
public Vector2 gravity
public bool queriesHitTriggers
public bool queriesStartInColliders
public bool callbacksOnDisable
public bool reuseCollisionCallbacks
public bool autoSyncTransforms
public SimulationMode2D simulationMode
public PhysicsJobOptions2D jobOptions
public float velocityThreshold
public float maxLinearCorrection
public float maxAngularCorrection
public float maxTranslationSpeed
public float maxRotationSpeed
public float defaultContactOffset
public float baumgarteScale
public float baumgarteTOIScale
public float timeToSleep
public float linearSleepTolerance
public float angularSleepTolerance
public bool alwaysShowColliders
public bool showColliderSleep
public bool showColliderContacts
public bool showColliderAABB
public float contactArrowScale
public Color colliderAwakeColor
public Color colliderAsleepColor
public Color colliderContactColor
public Color colliderAABBColor
public PhysicsScene2D get_defaultPhysicsScene()
public int get_velocityIterations()
public void set_velocityIterations(int value)
public int get_positionIterations()
public void set_positionIterations(int value)
public Vector2 get_gravity()
public void set_gravity(Vector2 value)
public bool get_queriesHitTriggers()
public void set_queriesHitTriggers(bool value)
public bool get_queriesStartInColliders()
public void set_queriesStartInColliders(bool value)
public bool get_callbacksOnDisable()
public void set_callbacksOnDisable(bool value)
public bool get_reuseCollisionCallbacks()
public void set_reuseCollisionCallbacks(bool value)
public bool get_autoSyncTransforms()
public void set_autoSyncTransforms(bool value)
public SimulationMode2D get_simulationMode()
public void set_simulationMode(SimulationMode2D value)
public PhysicsJobOptions2D get_jobOptions()
public void set_jobOptions(PhysicsJobOptions2D value)
public float get_velocityThreshold()
public void set_velocityThreshold(float value)
public float get_maxLinearCorrection()
public void set_maxLinearCorrection(float value)
public float get_maxAngularCorrection()
public void set_maxAngularCorrection(float value)
public float get_maxTranslationSpeed()
public void set_maxTranslationSpeed(float value)
public float get_maxRotationSpeed()
public void set_maxRotationSpeed(float value)
public float get_defaultContactOffset()
public void set_defaultContactOffset(float value)
public float get_baumgarteScale()
public void set_baumgarteScale(float value)
public float get_baumgarteTOIScale()
public void set_baumgarteTOIScale(float value)
public float get_timeToSleep()
public void set_timeToSleep(float value)
public float get_linearSleepTolerance()
public void set_linearSleepTolerance(float value)
public float get_angularSleepTolerance()
public void set_angularSleepTolerance(float value)
public bool get_alwaysShowColliders()
public void set_alwaysShowColliders(bool value)
public bool get_showColliderSleep()
public void set_showColliderSleep(bool value)
public bool get_showColliderContacts()
public void set_showColliderContacts(bool value)
public bool get_showColliderAABB()
public void set_showColliderAABB(bool value)
public float get_contactArrowScale()
public void set_contactArrowScale(float value)
public Color get_colliderAwakeColor()
public void set_colliderAwakeColor(Color value)
public Color get_colliderAsleepColor()
public void set_colliderAsleepColor(Color value)
public Color get_colliderContactColor()
public void set_colliderContactColor(Color value)
public Color get_colliderAABBColor()
public void set_colliderAABBColor(Color value)
public bool Simulate(float step)
internal bool Simulate_Internal(PhysicsScene2D physicsScene, float step)
public void SyncTransforms()
public void IgnoreCollision(Collider2D collider1, Collider2D collider2)
public void IgnoreCollision(Collider2D collider1, Collider2D collider2, bool ignore)
public bool GetIgnoreCollision(Collider2D collider1, Collider2D collider2)
public void IgnoreLayerCollision(int layer1, int layer2)
public void IgnoreLayerCollision(int layer1, int layer2, bool ignore)
private void IgnoreLayerCollision_Internal(int layer1, int layer2, bool ignore)
public bool GetIgnoreLayerCollision(int layer1, int layer2)
private bool GetIgnoreLayerCollision_Internal(int layer1, int layer2)
public void SetLayerCollisionMask(int layer, int layerMask)
private void SetLayerCollisionMask_Internal(int layer, int layerMask)
public int GetLayerCollisionMask(int layer)
private int GetLayerCollisionMask_Internal(int layer)
public bool IsTouching(Collider2D collider1, Collider2D collider2)
public bool IsTouching(Collider2D collider1, Collider2D collider2, ContactFilter2D contactFilter)
private bool IsTouching_TwoCollidersWithFilter(Collider2D collider1, Collider2D collider2, ContactFilter2D contactFilter)
public bool IsTouching(Collider2D collider, ContactFilter2D contactFilter)
private bool IsTouching_SingleColliderWithFilter(Collider2D collider, ContactFilter2D contactFilter)
public bool IsTouchingLayers(Collider2D collider)
public bool IsTouchingLayers(Collider2D collider, int layerMask)
public ColliderDistance2D Distance(Collider2D colliderA, Collider2D colliderB)
private ColliderDistance2D Distance_Internal(Collider2D colliderA, Collider2D colliderB)
public Vector2 ClosestPoint(Vector2 position, Collider2D collider)
public Vector2 ClosestPoint(Vector2 position, Rigidbody2D rigidbody)
private Vector2 ClosestPoint_Collider(Vector2 position, Collider2D collider)
private Vector2 ClosestPoint_Rigidbody(Vector2 position, Rigidbody2D rigidbody)
public RaycastHit2D Linecast(Vector2 start, Vector2 end)
public RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask)
public RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask, float minDepth)
public RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth)
public int Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
public RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end)
public RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask)
public RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask, float minDepth)
public RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth)
private RaycastHit2D[] LinecastAll_Internal(PhysicsScene2D physicsScene, Vector2 start, Vector2 end, ContactFilter2D contactFilter)
public int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results)
public int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask)
public int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask, float minDepth)
public int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
public int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, List`1<RaycastHit2D> results, float distance)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
private RaycastHit2D[] RaycastAll_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public int CircleCast(Vector2 origin, float radius, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int CircleCast(Vector2 origin, float radius, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
public int CircleCast(Vector2 origin, float radius, Vector2 direction, ContactFilter2D contactFilter, List`1<RaycastHit2D> results, float distance)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
private RaycastHit2D[] CircleCastAll_Internal(PhysicsScene2D physicsScene, Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
public int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, ContactFilter2D contactFilter, List`1<RaycastHit2D> results, float distance)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
private RaycastHit2D[] BoxCastAll_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
public int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, ContactFilter2D contactFilter, List`1<RaycastHit2D> results, float distance)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance)
private RaycastHit2D[] CapsuleCastAll_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth)
public RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth)
public int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth)
public RaycastHit2D GetRayIntersection(Ray ray)
public RaycastHit2D GetRayIntersection(Ray ray, float distance)
public RaycastHit2D GetRayIntersection(Ray ray, float distance, int layerMask)
public RaycastHit2D[] GetRayIntersectionAll(Ray ray)
public RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance)
public RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance, int layerMask)
private RaycastHit2D[] GetRayIntersectionAll_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask)
public int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results)
public int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance)
public int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance, int layerMask)
public Collider2D OverlapPoint(Vector2 point)
public Collider2D OverlapPoint(Vector2 point, int layerMask)
public Collider2D OverlapPoint(Vector2 point, int layerMask, float minDepth)
public Collider2D OverlapPoint(Vector2 point, int layerMask, float minDepth, float maxDepth)
public int OverlapPoint(Vector2 point, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapPoint(Vector2 point, ContactFilter2D contactFilter, List`1<Collider2D> results)
public Collider2D[] OverlapPointAll(Vector2 point)
public Collider2D[] OverlapPointAll(Vector2 point, int layerMask)
public Collider2D[] OverlapPointAll(Vector2 point, int layerMask, float minDepth)
public Collider2D[] OverlapPointAll(Vector2 point, int layerMask, float minDepth, float maxDepth)
private Collider2D[] OverlapPointAll_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter)
public int OverlapPointNonAlloc(Vector2 point, Collider2D[] results)
public int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, int layerMask)
public int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, int layerMask, float minDepth)
public int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public Collider2D OverlapCircle(Vector2 point, float radius)
public Collider2D OverlapCircle(Vector2 point, float radius, int layerMask)
public Collider2D OverlapCircle(Vector2 point, float radius, int layerMask, float minDepth)
public Collider2D OverlapCircle(Vector2 point, float radius, int layerMask, float minDepth, float maxDepth)
public int OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter, List`1<Collider2D> results)
public Collider2D[] OverlapCircleAll(Vector2 point, float radius)
public Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask)
public Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask, float minDepth)
public Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask, float minDepth, float maxDepth)
private Collider2D[] OverlapCircleAll_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter)
public int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results)
public int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask)
public int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask, float minDepth)
public int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, float maxDepth)
public int OverlapBox(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapBox(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, List`1<Collider2D> results)
public Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle)
public Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask)
public Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth)
public Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, float maxDepth)
private Collider2D[] OverlapBoxAll_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter)
public int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results)
public int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask)
public int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask, float minDepth)
public int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth)
public int OverlapArea(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapArea(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, List`1<Collider2D> results)
public Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB)
public Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask)
public Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth)
public Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth)
private Collider2D[] OverlapAreaAllToBox_Internal(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth)
public int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results)
public int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask)
public int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask, float minDepth)
public int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth, float maxDepth)
public int OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, List`1<Collider2D> results)
public Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle)
public Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask)
public Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth)
public Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth, float maxDepth)
private Collider2D[] OverlapCapsuleAll_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter)
public int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results)
public int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask)
public int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask, float minDepth)
public int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask, float minDepth, float maxDepth)
public int OverlapCollider(Collider2D collider, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapCollider(Collider2D collider, ContactFilter2D contactFilter, List`1<Collider2D> results)
public int GetContacts(Collider2D collider1, Collider2D collider2, ContactFilter2D contactFilter, ContactPoint2D[] contacts)
public int GetContacts(Collider2D collider, ContactPoint2D[] contacts)
public int GetContacts(Collider2D collider, ContactFilter2D contactFilter, ContactPoint2D[] contacts)
public int GetContacts(Collider2D collider, Collider2D[] colliders)
public int GetContacts(Collider2D collider, ContactFilter2D contactFilter, Collider2D[] colliders)
public int GetContacts(Rigidbody2D rigidbody, ContactPoint2D[] contacts)
public int GetContacts(Rigidbody2D rigidbody, ContactFilter2D contactFilter, ContactPoint2D[] contacts)
public int GetContacts(Rigidbody2D rigidbody, Collider2D[] colliders)
public int GetContacts(Rigidbody2D rigidbody, ContactFilter2D contactFilter, Collider2D[] colliders)
private int GetColliderContactsArray(Collider2D collider, ContactFilter2D contactFilter, ContactPoint2D[] results)
private int GetColliderColliderContactsArray(Collider2D collider1, Collider2D collider2, ContactFilter2D contactFilter, ContactPoint2D[] results)
private int GetRigidbodyContactsArray(Rigidbody2D rigidbody, ContactFilter2D contactFilter, ContactPoint2D[] results)
private int GetColliderContactsCollidersOnlyArray(Collider2D collider, ContactFilter2D contactFilter, Collider2D[] results)
private int GetRigidbodyContactsCollidersOnlyArray(Rigidbody2D rigidbody, ContactFilter2D contactFilter, Collider2D[] results)
public int GetContacts(Collider2D collider1, Collider2D collider2, ContactFilter2D contactFilter, List`1<ContactPoint2D> contacts)
public int GetContacts(Collider2D collider, List`1<ContactPoint2D> contacts)
public int GetContacts(Collider2D collider, ContactFilter2D contactFilter, List`1<ContactPoint2D> contacts)
public int GetContacts(Collider2D collider, List`1<Collider2D> colliders)
public int GetContacts(Collider2D collider, ContactFilter2D contactFilter, List`1<Collider2D> colliders)
public int GetContacts(Rigidbody2D rigidbody, List`1<ContactPoint2D> contacts)
public int GetContacts(Rigidbody2D rigidbody, ContactFilter2D contactFilter, List`1<ContactPoint2D> contacts)
public int GetContacts(Rigidbody2D rigidbody, List`1<Collider2D> colliders)
public int GetContacts(Rigidbody2D rigidbody, ContactFilter2D contactFilter, List`1<Collider2D> colliders)
private int GetColliderContactsList(Collider2D collider, ContactFilter2D contactFilter, List`1<ContactPoint2D> results)
private int GetColliderColliderContactsList(Collider2D collider1, Collider2D collider2, ContactFilter2D contactFilter, List`1<ContactPoint2D> results)
private int GetRigidbodyContactsList(Rigidbody2D rigidbody, ContactFilter2D contactFilter, List`1<ContactPoint2D> results)
private int GetColliderContactsCollidersOnlyList(Collider2D collider, ContactFilter2D contactFilter, List`1<Collider2D> results)
private int GetRigidbodyContactsCollidersOnlyList(Rigidbody2D rigidbody, ContactFilter2D contactFilter, List`1<Collider2D> results)
internal void SetEditorDragMovement(bool dragging, GameObject[] objs)
private void get_gravity_Injected(Vector2& ret)
private void set_gravity_Injected(Vector2& value)
private void get_jobOptions_Injected(PhysicsJobOptions2D& ret)
private void set_jobOptions_Injected(PhysicsJobOptions2D& value)
private void get_colliderAwakeColor_Injected(Color& ret)
private void set_colliderAwakeColor_Injected(Color& value)
private void get_colliderAsleepColor_Injected(Color& ret)
private void set_colliderAsleepColor_Injected(Color& value)
private void get_colliderContactColor_Injected(Color& ret)
private void set_colliderContactColor_Injected(Color& value)
private void get_colliderAABBColor_Injected(Color& ret)
private void set_colliderAABBColor_Injected(Color& value)
private bool Simulate_Internal_Injected(PhysicsScene2D& physicsScene, float step)
private bool IsTouching_TwoCollidersWithFilter_Injected(Collider2D collider1, Collider2D collider2, ContactFilter2D& contactFilter)
private bool IsTouching_SingleColliderWithFilter_Injected(Collider2D collider, ContactFilter2D& contactFilter)
private void Distance_Internal_Injected(Collider2D colliderA, Collider2D colliderB, ColliderDistance2D& ret)
private void ClosestPoint_Collider_Injected(Vector2& position, Collider2D collider, Vector2& ret)
private void ClosestPoint_Rigidbody_Injected(Vector2& position, Rigidbody2D rigidbody, Vector2& ret)
private RaycastHit2D[] LinecastAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& start, Vector2& end, ContactFilter2D& contactFilter)
private RaycastHit2D[] RaycastAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& direction, float distance, ContactFilter2D& contactFilter)
private RaycastHit2D[] CircleCastAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, float radius, Vector2& direction, float distance, ContactFilter2D& contactFilter)
private RaycastHit2D[] BoxCastAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& size, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter)
private RaycastHit2D[] CapsuleCastAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& size, CapsuleDirection2D capsuleDirection, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter)
private RaycastHit2D[] GetRayIntersectionAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector3& origin, Vector3& direction, float distance, int layerMask)
private Collider2D[] OverlapPointAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, ContactFilter2D& contactFilter)
private Collider2D[] OverlapCircleAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, float radius, ContactFilter2D& contactFilter)
private Collider2D[] OverlapBoxAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, Vector2& size, float angle, ContactFilter2D& contactFilter)
private Collider2D[] OverlapCapsuleAll_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, Vector2& size, CapsuleDirection2D direction, float angle, ContactFilter2D& contactFilter)
private int GetColliderContactsArray_Injected(Collider2D collider, ContactFilter2D& contactFilter, ContactPoint2D[] results)
private int GetColliderColliderContactsArray_Injected(Collider2D collider1, Collider2D collider2, ContactFilter2D& contactFilter, ContactPoint2D[] results)
private int GetRigidbodyContactsArray_Injected(Rigidbody2D rigidbody, ContactFilter2D& contactFilter, ContactPoint2D[] results)
private int GetColliderContactsCollidersOnlyArray_Injected(Collider2D collider, ContactFilter2D& contactFilter, Collider2D[] results)
private int GetRigidbodyContactsCollidersOnlyArray_Injected(Rigidbody2D rigidbody, ContactFilter2D& contactFilter, Collider2D[] results)
private int GetColliderContactsList_Injected(Collider2D collider, ContactFilter2D& contactFilter, List`1<ContactPoint2D> results)
private int GetColliderColliderContactsList_Injected(Collider2D collider1, Collider2D collider2, ContactFilter2D& contactFilter, List`1<ContactPoint2D> results)
private int GetRigidbodyContactsList_Injected(Rigidbody2D rigidbody, ContactFilter2D& contactFilter, List`1<ContactPoint2D> results)
private int GetColliderContactsCollidersOnlyList_Injected(Collider2D collider, ContactFilter2D& contactFilter, List`1<Collider2D> results)
private int GetRigidbodyContactsCollidersOnlyList_Injected(Rigidbody2D rigidbody, ContactFilter2D& contactFilter, List`1<Collider2D> results)
}
public UnityEngine.PhysicsJobOptions2D : ValueType {
private bool m_UseMultithreading
private bool m_UseConsistencySorting
private int m_InterpolationPosesPerJob
private int m_NewContactsPerJob
private int m_CollideContactsPerJob
private int m_ClearFlagsPerJob
private int m_ClearBodyForcesPerJob
private int m_SyncDiscreteFixturesPerJob
private int m_SyncContinuousFixturesPerJob
private int m_FindNearestContactsPerJob
private int m_UpdateTriggerContactsPerJob
private int m_IslandSolverCostThreshold
private int m_IslandSolverBodyCostScale
private int m_IslandSolverContactCostScale
private int m_IslandSolverJointCostScale
private int m_IslandSolverBodiesPerJob
private int m_IslandSolverContactsPerJob
public bool useMultithreading
public bool useConsistencySorting
public int interpolationPosesPerJob
public int newContactsPerJob
public int collideContactsPerJob
public int clearFlagsPerJob
public int clearBodyForcesPerJob
public int syncDiscreteFixturesPerJob
public int syncContinuousFixturesPerJob
public int findNearestContactsPerJob
public int updateTriggerContactsPerJob
public int islandSolverCostThreshold
public int islandSolverBodyCostScale
public int islandSolverContactCostScale
public int islandSolverJointCostScale
public int islandSolverBodiesPerJob
public int islandSolverContactsPerJob
public bool get_useMultithreading()
public void set_useMultithreading(bool value)
public bool get_useConsistencySorting()
public void set_useConsistencySorting(bool value)
public int get_interpolationPosesPerJob()
public void set_interpolationPosesPerJob(int value)
public int get_newContactsPerJob()
public void set_newContactsPerJob(int value)
public int get_collideContactsPerJob()
public void set_collideContactsPerJob(int value)
public int get_clearFlagsPerJob()
public void set_clearFlagsPerJob(int value)
public int get_clearBodyForcesPerJob()
public void set_clearBodyForcesPerJob(int value)
public int get_syncDiscreteFixturesPerJob()
public void set_syncDiscreteFixturesPerJob(int value)
public int get_syncContinuousFixturesPerJob()
public void set_syncContinuousFixturesPerJob(int value)
public int get_findNearestContactsPerJob()
public void set_findNearestContactsPerJob(int value)
public int get_updateTriggerContactsPerJob()
public void set_updateTriggerContactsPerJob(int value)
public int get_islandSolverCostThreshold()
public void set_islandSolverCostThreshold(int value)
public int get_islandSolverBodyCostScale()
public void set_islandSolverBodyCostScale(int value)
public int get_islandSolverContactCostScale()
public void set_islandSolverContactCostScale(int value)
public int get_islandSolverJointCostScale()
public void set_islandSolverJointCostScale(int value)
public int get_islandSolverBodiesPerJob()
public void set_islandSolverBodiesPerJob(int value)
public int get_islandSolverContactsPerJob()
public void set_islandSolverContactsPerJob(int value)
}
public UnityEngine.PhysicsMaterial2D : Object {
public float bounciness
public float friction
public void .ctor(string name)
private void Create_Internal(PhysicsMaterial2D scriptMaterial, string name)
public float get_bounciness()
public void set_bounciness(float value)
public float get_friction()
public void set_friction(float value)
}
public UnityEngine.PhysicsScene2D : ValueType {
private int m_Handle
public string ToString()
public bool op_Equality(PhysicsScene2D lhs, PhysicsScene2D rhs)
public bool op_Inequality(PhysicsScene2D lhs, PhysicsScene2D rhs)
public int GetHashCode()
public bool Equals(object other)
public bool Equals(PhysicsScene2D other)
public bool IsValid()
private bool IsValid_Internal(PhysicsScene2D physicsScene)
public bool IsEmpty()
private bool IsEmpty_Internal(PhysicsScene2D physicsScene)
public bool Simulate(float step)
public RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask)
public RaycastHit2D Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter)
private RaycastHit2D Linecast_Internal(PhysicsScene2D physicsScene, Vector2 start, Vector2 end, ContactFilter2D contactFilter)
public int Linecast(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask)
public int Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int LinecastArray_Internal(PhysicsScene2D physicsScene, Vector2 start, Vector2 end, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
private int LinecastNonAllocList_Internal(PhysicsScene2D physicsScene, Vector2 start, Vector2 end, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask)
public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter)
private RaycastHit2D Raycast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter)
public int Raycast(Vector2 origin, Vector2 direction, float distance, RaycastHit2D[] results, int layerMask)
public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int RaycastArray_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
private int RaycastList_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask)
public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter)
private RaycastHit2D CircleCast_Internal(PhysicsScene2D physicsScene, Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter)
public int CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, RaycastHit2D[] results, int layerMask)
public int CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int CircleCastArray_Internal(PhysicsScene2D physicsScene, Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
private int CircleCastList_Internal(PhysicsScene2D physicsScene, Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter)
private RaycastHit2D BoxCast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter)
public int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, RaycastHit2D[] results, int layerMask)
public int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int BoxCastArray_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
private int BoxCastList_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask)
public RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter)
private RaycastHit2D CapsuleCast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter)
public int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, RaycastHit2D[] results, int layerMask)
public int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
private int CapsuleCastArray_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
private int CapsuleCastList_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
public RaycastHit2D GetRayIntersection(Ray ray, float distance, int layerMask)
private RaycastHit2D GetRayIntersection_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask)
public int GetRayIntersection(Ray ray, float distance, RaycastHit2D[] results, int layerMask)
private int GetRayIntersectionArray_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask, RaycastHit2D[] results)
private int GetRayIntersectionList_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask, List`1<RaycastHit2D> results)
public Collider2D OverlapPoint(Vector2 point, int layerMask)
public Collider2D OverlapPoint(Vector2 point, ContactFilter2D contactFilter)
private Collider2D OverlapPoint_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter)
public int OverlapPoint(Vector2 point, Collider2D[] results, int layerMask)
public int OverlapPoint(Vector2 point, ContactFilter2D contactFilter, Collider2D[] results)
private int OverlapPointArray_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapPoint(Vector2 point, ContactFilter2D contactFilter, List`1<Collider2D> results)
private int OverlapPointList_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter, List`1<Collider2D> results)
public Collider2D OverlapCircle(Vector2 point, float radius, int layerMask)
public Collider2D OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter)
private Collider2D OverlapCircle_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter)
public int OverlapCircle(Vector2 point, float radius, Collider2D[] results, int layerMask)
public int OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter, Collider2D[] results)
private int OverlapCircleArray_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter, List`1<Collider2D> results)
private int OverlapCircleList_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter, List`1<Collider2D> results)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask)
public Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter)
private Collider2D OverlapBox_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter)
public int OverlapBox(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask)
public int OverlapBox(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, Collider2D[] results)
private int OverlapBoxArray_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapBox(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, List`1<Collider2D> results)
private int OverlapBoxList_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, List`1<Collider2D> results)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask)
public Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter)
private Collider2D OverlapAreaToBoxArray_Internal(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter)
public int OverlapArea(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask)
public int OverlapArea(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, Collider2D[] results)
private int OverlapAreaToBoxArray_Internal(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapArea(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, List`1<Collider2D> results)
private int OverlapAreaToBoxList_Internal(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, List`1<Collider2D> results)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask)
public Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter)
private Collider2D OverlapCapsule_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter)
public int OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask)
public int OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, Collider2D[] results)
private int OverlapCapsuleArray_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, List`1<Collider2D> results)
private int OverlapCapsuleList_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, List`1<Collider2D> results)
public int OverlapCollider(Collider2D collider, Collider2D[] results, int layerMask)
public int OverlapCollider(Collider2D collider, ContactFilter2D contactFilter, Collider2D[] results)
private int OverlapColliderArray_Internal(Collider2D collider, ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapCollider(Collider2D collider, ContactFilter2D contactFilter, List`1<Collider2D> results)
private int OverlapColliderList_Internal(Collider2D collider, ContactFilter2D contactFilter, List`1<Collider2D> results)
private bool IsValid_Internal_Injected(PhysicsScene2D& physicsScene)
private bool IsEmpty_Internal_Injected(PhysicsScene2D& physicsScene)
private void Linecast_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& start, Vector2& end, ContactFilter2D& contactFilter, RaycastHit2D& ret)
private int LinecastArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& start, Vector2& end, ContactFilter2D& contactFilter, RaycastHit2D[] results)
private int LinecastNonAllocList_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& start, Vector2& end, ContactFilter2D& contactFilter, List`1<RaycastHit2D> results)
private void Raycast_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D& ret)
private int RaycastArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
private int RaycastList_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& direction, float distance, ContactFilter2D& contactFilter, List`1<RaycastHit2D> results)
private void CircleCast_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, float radius, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D& ret)
private int CircleCastArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, float radius, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
private int CircleCastList_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, float radius, Vector2& direction, float distance, ContactFilter2D& contactFilter, List`1<RaycastHit2D> results)
private void BoxCast_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& size, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D& ret)
private int BoxCastArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& size, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
private int BoxCastList_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& size, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, List`1<RaycastHit2D> results)
private void CapsuleCast_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& size, CapsuleDirection2D capsuleDirection, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D& ret)
private int CapsuleCastArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& size, CapsuleDirection2D capsuleDirection, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
private int CapsuleCastList_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& origin, Vector2& size, CapsuleDirection2D capsuleDirection, float angle, Vector2& direction, float distance, ContactFilter2D& contactFilter, List`1<RaycastHit2D> results)
private void GetRayIntersection_Internal_Injected(PhysicsScene2D& physicsScene, Vector3& origin, Vector3& direction, float distance, int layerMask, RaycastHit2D& ret)
private int GetRayIntersectionArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector3& origin, Vector3& direction, float distance, int layerMask, RaycastHit2D[] results)
private int GetRayIntersectionList_Internal_Injected(PhysicsScene2D& physicsScene, Vector3& origin, Vector3& direction, float distance, int layerMask, List`1<RaycastHit2D> results)
private Collider2D OverlapPoint_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, ContactFilter2D& contactFilter)
private int OverlapPointArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, ContactFilter2D& contactFilter, Collider2D[] results)
private int OverlapPointList_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, ContactFilter2D& contactFilter, List`1<Collider2D> results)
private Collider2D OverlapCircle_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, float radius, ContactFilter2D& contactFilter)
private int OverlapCircleArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, float radius, ContactFilter2D& contactFilter, Collider2D[] results)
private int OverlapCircleList_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, float radius, ContactFilter2D& contactFilter, List`1<Collider2D> results)
private Collider2D OverlapBox_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, Vector2& size, float angle, ContactFilter2D& contactFilter)
private int OverlapBoxArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, Vector2& size, float angle, ContactFilter2D& contactFilter, Collider2D[] results)
private int OverlapBoxList_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, Vector2& size, float angle, ContactFilter2D& contactFilter, List`1<Collider2D> results)
private Collider2D OverlapCapsule_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, Vector2& size, CapsuleDirection2D direction, float angle, ContactFilter2D& contactFilter)
private int OverlapCapsuleArray_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, Vector2& size, CapsuleDirection2D direction, float angle, ContactFilter2D& contactFilter, Collider2D[] results)
private int OverlapCapsuleList_Internal_Injected(PhysicsScene2D& physicsScene, Vector2& point, Vector2& size, CapsuleDirection2D direction, float angle, ContactFilter2D& contactFilter, List`1<Collider2D> results)
private int OverlapColliderArray_Internal_Injected(Collider2D collider, ContactFilter2D& contactFilter, Collider2D[] results)
private int OverlapColliderList_Internal_Injected(Collider2D collider, ContactFilter2D& contactFilter, List`1<Collider2D> results)
}
public UnityEngine.PhysicsSceneExtensions2D : object {
public PhysicsScene2D GetPhysicsScene2D(Scene scene)
private PhysicsScene2D GetPhysicsScene_Internal(Scene scene)
private void GetPhysicsScene_Internal_Injected(Scene& scene, PhysicsScene2D& ret)
}
public UnityEngine.PhysicsShape2D : ValueType {
private PhysicsShapeType2D m_ShapeType
private float m_Radius
private int m_VertexStartIndex
private int m_VertexCount
private int m_UseAdjacentStart
private int m_UseAdjacentEnd
private Vector2 m_AdjacentStart
private Vector2 m_AdjacentEnd
public PhysicsShapeType2D shapeType
public float radius
public int vertexStartIndex
public int vertexCount
public bool useAdjacentStart
public bool useAdjacentEnd
public Vector2 adjacentStart
public Vector2 adjacentEnd
public PhysicsShapeType2D get_shapeType()
public void set_shapeType(PhysicsShapeType2D value)
public float get_radius()
public void set_radius(float value)
public int get_vertexStartIndex()
public void set_vertexStartIndex(int value)
public int get_vertexCount()
public void set_vertexCount(int value)
public bool get_useAdjacentStart()
public void set_useAdjacentStart(bool value)
public bool get_useAdjacentEnd()
public void set_useAdjacentEnd(bool value)
public Vector2 get_adjacentStart()
public void set_adjacentStart(Vector2 value)
public Vector2 get_adjacentEnd()
public void set_adjacentEnd(Vector2 value)
}
public UnityEngine.PhysicsShapeGroup2D : object {
internal GroupState m_GroupState
private float MinVertexSeparation
internal List`1<Vector2> groupVertices
internal List`1<PhysicsShape2D> groupShapes
public int shapeCount
public int vertexCount
public Matrix4x4 localToWorldMatrix
internal List`1<Vector2> get_groupVertices()
internal List`1<PhysicsShape2D> get_groupShapes()
public int get_shapeCount()
public int get_vertexCount()
public Matrix4x4 get_localToWorldMatrix()
public void set_localToWorldMatrix(Matrix4x4 value)
public void .ctor(int shapeCapacity, int vertexCapacity)
public void Clear()
public void Add(PhysicsShapeGroup2D physicsShapeGroup)
public void GetShapeData(List`1<PhysicsShape2D> shapes, List`1<Vector2> vertices)
public void GetShapeData(NativeArray`1<PhysicsShape2D> shapes, NativeArray`1<Vector2> vertices)
public void GetShapeVertices(int shapeIndex, List`1<Vector2> vertices)
public Vector2 GetShapeVertex(int shapeIndex, int vertexIndex)
public void SetShapeVertex(int shapeIndex, int vertexIndex, Vector2 vertex)
public void SetShapeRadius(int shapeIndex, float radius)
public void SetShapeAdjacentVertices(int shapeIndex, bool useAdjacentStart, bool useAdjacentEnd, Vector2 adjacentStart, Vector2 adjacentEnd)
public void DeleteShape(int shapeIndex)
public PhysicsShape2D GetShape(int shapeIndex)
public int AddCircle(Vector2 center, float radius)
public int AddCapsule(Vector2 vertex0, Vector2 vertex1, float radius)
public int AddBox(Vector2 center, Vector2 size, float angle, float edgeRadius)
public int AddPolygon(List`1<Vector2> vertices)
public int AddEdges(List`1<Vector2> vertices, float edgeRadius)
public int AddEdges(List`1<Vector2> vertices, bool useAdjacentStart, bool useAdjacentEnd, Vector2 adjacentStart, Vector2 adjacentEnd, float edgeRadius)
internal Vector2 <AddBox>g__Rotate|28_0(float cos, float sin, Vector2 value)
}
public UnityEngine.PhysicsShapeType2D : Enum {
public int value__
public PhysicsShapeType2D Circle
public PhysicsShapeType2D Capsule
public PhysicsShapeType2D Polygon
public PhysicsShapeType2D Edges
}
public UnityEngine.PlatformEffector2D : Effector2D {
public bool useOneWay
public bool useOneWayGrouping
public bool useSideFriction
public bool useSideBounce
public float surfaceArc
public float sideArc
public float rotationalOffset
public bool get_useOneWay()
public void set_useOneWay(bool value)
public bool get_useOneWayGrouping()
public void set_useOneWayGrouping(bool value)
public bool get_useSideFriction()
public void set_useSideFriction(bool value)
public bool get_useSideBounce()
public void set_useSideBounce(bool value)
public float get_surfaceArc()
public void set_surfaceArc(float value)
public float get_sideArc()
public void set_sideArc(float value)
public float get_rotationalOffset()
public void set_rotationalOffset(float value)
}
public UnityEngine.PointEffector2D : Effector2D {
public float forceMagnitude
public float forceVariation
public float distanceScale
public float drag
public float angularDrag
public EffectorSelection2D forceSource
public EffectorSelection2D forceTarget
public EffectorForceMode2D forceMode
public float get_forceMagnitude()
public void set_forceMagnitude(float value)
public float get_forceVariation()
public void set_forceVariation(float value)
public float get_distanceScale()
public void set_distanceScale(float value)
public float get_drag()
public void set_drag(float value)
public float get_angularDrag()
public void set_angularDrag(float value)
public EffectorSelection2D get_forceSource()
public void set_forceSource(EffectorSelection2D value)
public EffectorSelection2D get_forceTarget()
public void set_forceTarget(EffectorSelection2D value)
public EffectorForceMode2D get_forceMode()
public void set_forceMode(EffectorForceMode2D value)
}
public UnityEngine.PolygonCollider2D : Collider2D {
public bool autoTiling
public Vector2[] points
public int pathCount
public bool get_autoTiling()
public void set_autoTiling(bool value)
public int GetTotalPointCount()
public Vector2[] get_points()
public void set_points(Vector2[] value)
public int get_pathCount()
public void set_pathCount(int value)
public Vector2[] GetPath(int index)
private Vector2[] GetPath_Internal(int index)
public void SetPath(int index, Vector2[] points)
private void SetPath_Internal(int index, Vector2[] points)
public int GetPath(int index, List`1<Vector2> points)
private int GetPathList_Internal(int index, List`1<Vector2> points)
public void SetPath(int index, List`1<Vector2> points)
private void SetPathList_Internal(int index, List`1<Vector2> points)
public void CreatePrimitive(int sides)
public void CreatePrimitive(int sides, Vector2 scale)
public void CreatePrimitive(int sides, Vector2 scale, Vector2 offset)
private void CreatePrimitive_Internal(int sides, Vector2 scale, Vector2 offset, bool autoRefresh)
private void CreatePrimitive_Internal_Injected(int sides, Vector2& scale, Vector2& offset, bool autoRefresh)
}
public UnityEngine.RaycastHit2D : ValueType {
private Vector2 m_Centroid
private Vector2 m_Point
private Vector2 m_Normal
private float m_Distance
private float m_Fraction
private int m_Collider
public Vector2 centroid
public Vector2 point
public Vector2 normal
public float distance
public float fraction
public Collider2D collider
public Rigidbody2D rigidbody
public Transform transform
public Vector2 get_centroid()
public void set_centroid(Vector2 value)
public Vector2 get_point()
public void set_point(Vector2 value)
public Vector2 get_normal()
public void set_normal(Vector2 value)
public float get_distance()
public void set_distance(float value)
public float get_fraction()
public void set_fraction(float value)
public Collider2D get_collider()
public Rigidbody2D get_rigidbody()
public Transform get_transform()
public bool op_Implicit(RaycastHit2D hit)
public int CompareTo(RaycastHit2D other)
}
public UnityEngine.RelativeJoint2D : Joint2D {
public float maxForce
public float maxTorque
public float correctionScale
public bool autoConfigureOffset
public Vector2 linearOffset
public float angularOffset
public Vector2 target
public float get_maxForce()
public void set_maxForce(float value)
public float get_maxTorque()
public void set_maxTorque(float value)
public float get_correctionScale()
public void set_correctionScale(float value)
public bool get_autoConfigureOffset()
public void set_autoConfigureOffset(bool value)
public Vector2 get_linearOffset()
public void set_linearOffset(Vector2 value)
public float get_angularOffset()
public void set_angularOffset(float value)
public Vector2 get_target()
private void get_linearOffset_Injected(Vector2& ret)
private void set_linearOffset_Injected(Vector2& value)
private void get_target_Injected(Vector2& ret)
}
public UnityEngine.Rigidbody2D : Component {
public Vector2 position
public float rotation
public Vector2 velocity
public float angularVelocity
public bool useAutoMass
public float mass
public PhysicsMaterial2D sharedMaterial
public Vector2 centerOfMass
public Vector2 worldCenterOfMass
public float inertia
public float drag
public float angularDrag
public float gravityScale
public RigidbodyType2D bodyType
public bool useFullKinematicContacts
public bool isKinematic
public bool fixedAngle
public bool freezeRotation
public RigidbodyConstraints2D constraints
public bool simulated
public RigidbodyInterpolation2D interpolation
public RigidbodySleepMode2D sleepMode
public CollisionDetectionMode2D collisionDetectionMode
public int attachedColliderCount
public Vector2 get_position()
public void set_position(Vector2 value)
public float get_rotation()
public void set_rotation(float value)
public void SetRotation(float angle)
private void SetRotation_Angle(float angle)
public void SetRotation(Quaternion rotation)
private void SetRotation_Quaternion(Quaternion rotation)
public void MovePosition(Vector2 position)
public void MoveRotation(float angle)
private void MoveRotation_Angle(float angle)
public void MoveRotation(Quaternion rotation)
private void MoveRotation_Quaternion(Quaternion rotation)
public Vector2 get_velocity()
public void set_velocity(Vector2 value)
public float get_angularVelocity()
public void set_angularVelocity(float value)
public bool get_useAutoMass()
public void set_useAutoMass(bool value)
public float get_mass()
public void set_mass(float value)
public PhysicsMaterial2D get_sharedMaterial()
public void set_sharedMaterial(PhysicsMaterial2D value)
public Vector2 get_centerOfMass()
public void set_centerOfMass(Vector2 value)
public Vector2 get_worldCenterOfMass()
public float get_inertia()
public void set_inertia(float value)
public float get_drag()
public void set_drag(float value)
public float get_angularDrag()
public void set_angularDrag(float value)
public float get_gravityScale()
public void set_gravityScale(float value)
public RigidbodyType2D get_bodyType()
public void set_bodyType(RigidbodyType2D value)
internal void SetDragBehaviour(bool dragged)
public bool get_useFullKinematicContacts()
public void set_useFullKinematicContacts(bool value)
public bool get_isKinematic()
public void set_isKinematic(bool value)
public bool get_fixedAngle()
public void set_fixedAngle(bool value)
public bool get_freezeRotation()
public void set_freezeRotation(bool value)
public RigidbodyConstraints2D get_constraints()
public void set_constraints(RigidbodyConstraints2D value)
public bool IsSleeping()
public bool IsAwake()
public void Sleep()
public void WakeUp()
public bool get_simulated()
public void set_simulated(bool value)
public RigidbodyInterpolation2D get_interpolation()
public void set_interpolation(RigidbodyInterpolation2D value)
public RigidbodySleepMode2D get_sleepMode()
public void set_sleepMode(RigidbodySleepMode2D value)
public CollisionDetectionMode2D get_collisionDetectionMode()
public void set_collisionDetectionMode(CollisionDetectionMode2D value)
public int get_attachedColliderCount()
public bool IsTouching(Collider2D collider)
public bool IsTouching(Collider2D collider, ContactFilter2D contactFilter)
private bool IsTouching_OtherColliderWithFilter_Internal(Collider2D collider, ContactFilter2D contactFilter)
public bool IsTouching(ContactFilter2D contactFilter)
private bool IsTouching_AnyColliderWithFilter_Internal(ContactFilter2D contactFilter)
public bool IsTouchingLayers()
public bool IsTouchingLayers(int layerMask)
public bool OverlapPoint(Vector2 point)
public ColliderDistance2D Distance(Collider2D collider)
private ColliderDistance2D Distance_Internal(Collider2D collider)
public Vector2 ClosestPoint(Vector2 position)
public void AddForce(Vector2 force)
public void AddForce(Vector2 force, ForceMode2D mode)
public void AddRelativeForce(Vector2 relativeForce)
public void AddRelativeForce(Vector2 relativeForce, ForceMode2D mode)
public void AddForceAtPosition(Vector2 force, Vector2 position)
public void AddForceAtPosition(Vector2 force, Vector2 position, ForceMode2D mode)
public void AddTorque(float torque)
public void AddTorque(float torque, ForceMode2D mode)
public Vector2 GetPoint(Vector2 point)
public Vector2 GetRelativePoint(Vector2 relativePoint)
public Vector2 GetVector(Vector2 vector)
public Vector2 GetRelativeVector(Vector2 relativeVector)
public Vector2 GetPointVelocity(Vector2 point)
public Vector2 GetRelativePointVelocity(Vector2 relativePoint)
public int OverlapCollider(ContactFilter2D contactFilter, Collider2D[] results)
private int OverlapColliderArray_Internal(ContactFilter2D contactFilter, Collider2D[] results)
public int OverlapCollider(ContactFilter2D contactFilter, List`1<Collider2D> results)
private int OverlapColliderList_Internal(ContactFilter2D contactFilter, List`1<Collider2D> results)
public int GetContacts(ContactPoint2D[] contacts)
public int GetContacts(List`1<ContactPoint2D> contacts)
public int GetContacts(ContactFilter2D contactFilter, ContactPoint2D[] contacts)
public int GetContacts(ContactFilter2D contactFilter, List`1<ContactPoint2D> contacts)
public int GetContacts(Collider2D[] colliders)
public int GetContacts(List`1<Collider2D> colliders)
public int GetContacts(ContactFilter2D contactFilter, Collider2D[] colliders)
public int GetContacts(ContactFilter2D contactFilter, List`1<Collider2D> colliders)
public int GetAttachedColliders(Collider2D[] results)
private int GetAttachedCollidersArray_Internal(Collider2D[] results)
public int GetAttachedColliders(List`1<Collider2D> results)
private int GetAttachedCollidersList_Internal(List`1<Collider2D> results)
public int Cast(Vector2 direction, RaycastHit2D[] results)
public int Cast(Vector2 direction, RaycastHit2D[] results, float distance)
private int CastArray_Internal(Vector2 direction, float distance, RaycastHit2D[] results)
public int Cast(Vector2 direction, List`1<RaycastHit2D> results, float distance)
private int CastList_Internal(Vector2 direction, float distance, List`1<RaycastHit2D> results)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance)
private int CastFilteredArray_Internal(Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results)
public int Cast(Vector2 direction, ContactFilter2D contactFilter, List`1<RaycastHit2D> results, float distance)
private int CastFilteredList_Internal(Vector2 direction, float distance, ContactFilter2D contactFilter, List`1<RaycastHit2D> results)
public int GetShapes(PhysicsShapeGroup2D physicsShapeGroup)
private int GetShapes_Internal(GroupState& physicsShapeGroupState)
private void get_position_Injected(Vector2& ret)
private void set_position_Injected(Vector2& value)
private void SetRotation_Quaternion_Injected(Quaternion& rotation)
private void MovePosition_Injected(Vector2& position)
private void MoveRotation_Quaternion_Injected(Quaternion& rotation)
private void get_velocity_Injected(Vector2& ret)
private void set_velocity_Injected(Vector2& value)
private void get_centerOfMass_Injected(Vector2& ret)
private void set_centerOfMass_Injected(Vector2& value)
private void get_worldCenterOfMass_Injected(Vector2& ret)
private bool IsTouching_OtherColliderWithFilter_Internal_Injected(Collider2D collider, ContactFilter2D& contactFilter)
private bool IsTouching_AnyColliderWithFilter_Internal_Injected(ContactFilter2D& contactFilter)
private bool OverlapPoint_Injected(Vector2& point)
private void Distance_Internal_Injected(Collider2D collider, ColliderDistance2D& ret)
private void AddForce_Injected(Vector2& force, ForceMode2D mode)
private void AddRelativeForce_Injected(Vector2& relativeForce, ForceMode2D mode)
private void AddForceAtPosition_Injected(Vector2& force, Vector2& position, ForceMode2D mode)
private void GetPoint_Injected(Vector2& point, Vector2& ret)
private void GetRelativePoint_Injected(Vector2& relativePoint, Vector2& ret)
private void GetVector_Injected(Vector2& vector, Vector2& ret)
private void GetRelativeVector_Injected(Vector2& relativeVector, Vector2& ret)
private void GetPointVelocity_Injected(Vector2& point, Vector2& ret)
private void GetRelativePointVelocity_Injected(Vector2& relativePoint, Vector2& ret)
private int OverlapColliderArray_Internal_Injected(ContactFilter2D& contactFilter, Collider2D[] results)
private int OverlapColliderList_Internal_Injected(ContactFilter2D& contactFilter, List`1<Collider2D> results)
private int CastArray_Internal_Injected(Vector2& direction, float distance, RaycastHit2D[] results)
private int CastList_Internal_Injected(Vector2& direction, float distance, List`1<RaycastHit2D> results)
private int CastFilteredArray_Internal_Injected(Vector2& direction, float distance, ContactFilter2D& contactFilter, RaycastHit2D[] results)
private int CastFilteredList_Internal_Injected(Vector2& direction, float distance, ContactFilter2D& contactFilter, List`1<RaycastHit2D> results)
}
public UnityEngine.RigidbodyConstraints2D : Enum {
public int value__
public RigidbodyConstraints2D None
public RigidbodyConstraints2D FreezePositionX
public RigidbodyConstraints2D FreezePositionY
public RigidbodyConstraints2D FreezeRotation
public RigidbodyConstraints2D FreezePosition
public RigidbodyConstraints2D FreezeAll
}
public UnityEngine.RigidbodyInterpolation2D : Enum {
public int value__
public RigidbodyInterpolation2D None
public RigidbodyInterpolation2D Interpolate
public RigidbodyInterpolation2D Extrapolate
}
public UnityEngine.RigidbodySleepMode2D : Enum {
public int value__
public RigidbodySleepMode2D NeverSleep
public RigidbodySleepMode2D StartAwake
public RigidbodySleepMode2D StartAsleep
}
public UnityEngine.RigidbodyType2D : Enum {
public int value__
public RigidbodyType2D Dynamic
public RigidbodyType2D Kinematic
public RigidbodyType2D Static
}
public UnityEngine.SimulationMode2D : Enum {
public int value__
public SimulationMode2D FixedUpdate
public SimulationMode2D Update
public SimulationMode2D Script
}
public UnityEngine.SliderJoint2D : AnchoredJoint2D {
public bool autoConfigureAngle
public float angle
public bool useMotor
public bool useLimits
public JointMotor2D motor
public JointTranslationLimits2D limits
public JointLimitState2D limitState
public float referenceAngle
public float jointTranslation
public float jointSpeed
public bool get_autoConfigureAngle()
public void set_autoConfigureAngle(bool value)
public float get_angle()
public void set_angle(float value)
public bool get_useMotor()
public void set_useMotor(bool value)
public bool get_useLimits()
public void set_useLimits(bool value)
public JointMotor2D get_motor()
public void set_motor(JointMotor2D value)
public JointTranslationLimits2D get_limits()
public void set_limits(JointTranslationLimits2D value)
public JointLimitState2D get_limitState()
public float get_referenceAngle()
public float get_jointTranslation()
public float get_jointSpeed()
public float GetMotorForce(float timeStep)
private void get_motor_Injected(JointMotor2D& ret)
private void set_motor_Injected(JointMotor2D& value)
private void get_limits_Injected(JointTranslationLimits2D& ret)
private void set_limits_Injected(JointTranslationLimits2D& value)
}
public UnityEngine.SpringJoint2D : AnchoredJoint2D {
public bool autoConfigureDistance
public float distance
public float dampingRatio
public float frequency
public bool get_autoConfigureDistance()
public void set_autoConfigureDistance(bool value)
public float get_distance()
public void set_distance(float value)
public float get_dampingRatio()
public void set_dampingRatio(float value)
public float get_frequency()
public void set_frequency(float value)
}
public UnityEngine.SurfaceEffector2D : Effector2D {
public float speed
public float speedVariation
public float forceScale
public bool useContactForce
public bool useFriction
public bool useBounce
public float get_speed()
public void set_speed(float value)
public float get_speedVariation()
public void set_speedVariation(float value)
public float get_forceScale()
public void set_forceScale(float value)
public bool get_useContactForce()
public void set_useContactForce(bool value)
public bool get_useFriction()
public void set_useFriction(bool value)
public bool get_useBounce()
public void set_useBounce(bool value)
}
public UnityEngine.TargetJoint2D : Joint2D {
public Vector2 anchor
public Vector2 target
public bool autoConfigureTarget
public float maxForce
public float dampingRatio
public float frequency
public Vector2 get_anchor()
public void set_anchor(Vector2 value)
public Vector2 get_target()
public void set_target(Vector2 value)
public bool get_autoConfigureTarget()
public void set_autoConfigureTarget(bool value)
public float get_maxForce()
public void set_maxForce(float value)
public float get_dampingRatio()
public void set_dampingRatio(float value)
public float get_frequency()
public void set_frequency(float value)
private void get_anchor_Injected(Vector2& ret)
private void set_anchor_Injected(Vector2& value)
private void get_target_Injected(Vector2& ret)
private void set_target_Injected(Vector2& value)
}
public UnityEngine.WheelJoint2D : AnchoredJoint2D {
public JointSuspension2D suspension
public bool useMotor
public JointMotor2D motor
public float jointTranslation
public float jointLinearSpeed
public float jointSpeed
public float jointAngle
public JointSuspension2D get_suspension()
public void set_suspension(JointSuspension2D value)
public bool get_useMotor()
public void set_useMotor(bool value)
public JointMotor2D get_motor()
public void set_motor(JointMotor2D value)
public float get_jointTranslation()
public float get_jointLinearSpeed()
public float get_jointSpeed()
public float get_jointAngle()
public float GetMotorTorque(float timeStep)
private void get_suspension_Injected(JointSuspension2D& ret)
private void set_suspension_Injected(JointSuspension2D& value)
private void get_motor_Injected(JointMotor2D& ret)
private void set_motor_Injected(JointMotor2D& value)
}
