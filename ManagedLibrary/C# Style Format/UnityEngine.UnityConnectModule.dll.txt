internal UnityEngine.Advertisements.UnityAdsSettings : object {
public bool enabled
public bool initializeOnStartup
public bool testMode
public bool get_enabled()
public void set_enabled(bool value)
public bool IsPlatformEnabled(RuntimePlatform platform)
public void SetPlatformEnabled(RuntimePlatform platform, bool value)
public bool get_initializeOnStartup()
public void set_initializeOnStartup(bool value)
public bool get_testMode()
public void set_testMode(bool value)
public string GetGameId(RuntimePlatform platform)
public void SetGameId(RuntimePlatform platform, string gameId)
}
public UnityEngine.Analytics.AnalyticsSessionInfo : object {
private SessionStateChanged sessionStateChanged
public AnalyticsSessionState sessionState
public long sessionId
public long sessionElapsedTime
public string userId
public void add_sessionStateChanged(SessionStateChanged value)
public void remove_sessionStateChanged(SessionStateChanged value)
internal void CallSessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged)
public AnalyticsSessionState get_sessionState()
public long get_sessionId()
public long get_sessionElapsedTime()
public string get_userId()
}
public UnityEngine.Analytics.AnalyticsSessionState : Enum {
public int value__
public AnalyticsSessionState kSessionStopped
public AnalyticsSessionState kSessionStarted
public AnalyticsSessionState kSessionPaused
public AnalyticsSessionState kSessionResumed
}
internal UnityEngine.Connect.UnityConnectSettings : Object {
public bool enabled
public bool testMode
public string testEventUrl
public string testConfigUrl
public int testInitMode
public bool get_enabled()
public void set_enabled(bool value)
public bool get_testMode()
public void set_testMode(bool value)
public string get_testEventUrl()
public void set_testEventUrl(string value)
public string get_testConfigUrl()
public void set_testConfigUrl(string value)
public int get_testInitMode()
public void set_testInitMode(int value)
}
public UnityEngine.RemoteConfigSettings : object {
internal IntPtr m_Ptr
private Action`1<bool> Updated
public void .ctor(string configKey)
public void add_Updated(Action`1<bool> value)
public void remove_Updated(Action`1<bool> value)
protected void Finalize()
private void Destroy()
public void Dispose()
internal IntPtr Internal_Create(RemoteConfigSettings rcs, string configKey)
internal void Internal_Destroy(IntPtr ptr)
internal void RemoteConfigSettingsUpdated(RemoteConfigSettings rcs, bool wasLastUpdatedFromServer)
public bool QueueConfig(string name, object param, int ver, string prefix)
public void ForceUpdate()
public bool WasLastUpdatedFromServer()
public int GetInt(string key)
public int GetInt(string key, int defaultValue)
public long GetLong(string key)
public long GetLong(string key, long defaultValue)
public float GetFloat(string key)
public float GetFloat(string key, float defaultValue)
public string GetString(string key)
public string GetString(string key, string defaultValue)
public bool GetBool(string key)
public bool GetBool(string key, bool defaultValue)
public bool HasKey(string key)
public int GetCount()
public String[] GetKeys()
}
public UnityEngine.RemoteSettings : object {
private UpdatedEventHandler Updated
private Action BeforeFetchFromServer
private Action`3<bool, bool, int> Completed
public void add_Updated(UpdatedEventHandler value)
public void remove_Updated(UpdatedEventHandler value)
public void add_BeforeFetchFromServer(Action value)
public void remove_BeforeFetchFromServer(Action value)
public void add_Completed(Action`3<bool, bool, int> value)
public void remove_Completed(Action`3<bool, bool, int> value)
internal void RemoteSettingsUpdated(bool wasLastUpdatedFromServer)
internal void RemoteSettingsBeforeFetchFromServer()
internal void RemoteSettingsUpdateCompleted(bool wasLastUpdatedFromServer, bool settingsChanged, int response)
public void CallOnUpdate()
public void ForceUpdate()
public bool WasLastUpdatedFromServer()
public int GetInt(string key)
public int GetInt(string key, int defaultValue)
public long GetLong(string key)
public long GetLong(string key, long defaultValue)
public float GetFloat(string key)
public float GetFloat(string key, float defaultValue)
public string GetString(string key)
public string GetString(string key, string defaultValue)
public bool GetBool(string key)
public bool GetBool(string key, bool defaultValue)
public bool HasKey(string key)
public int GetCount()
public String[] GetKeys()
}
