public delaunayER : object {
private void Start()
private void Update()
public int FindVertice(Vector3 v, List`1<Vector3> vecs)
public List`1<TriangleER> Triangulate(List`1<PointER> triangulationPoints)
public TriangleER SuperTriangle(List`1<PointER> triangulationPoints)
}
public EdgeER : object {
public PointER StartPoint
public PointER EndPoint
public void .ctor(PointER startPoint, PointER endPoint)
public int GetHashCode()
public bool Equals(object obj)
public bool op_Equality(EdgeER left, EdgeER right)
public bool op_Inequality(EdgeER left, EdgeER right)
}
public PointER : object {
public float x
public float y
public float z
public void .ctor(float x, float y, float z)
public int GetHashCode()
public bool Equals(object obj)
public bool op_Equality(PointER left, PointER right)
public bool op_Inequality(PointER left, PointER right)
}
public TriangleER : object {
public PointER Vertex1
public PointER Vertex2
public PointER Vertex3
public void .ctor(PointER vertex1, PointER vertex2, PointER vertex3)
public double ContainsInCircumcircle(PointER point)
public bool SharesVertexWith(TriangleER triangle)
}
