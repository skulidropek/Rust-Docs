public class delaunayER : object {
    private void Start();
    private void Update();
    public static int FindVertice(Vector3 v, List`1<Vector3> vecs);
    public static List`1<TriangleER> Triangulate(List`1<PointER> triangulationPoints);
    public static TriangleER SuperTriangle(List`1<PointER> triangulationPoints);
}
public class EdgeER : object {
    public PointER StartPoint;
    public PointER EndPoint;
    public EdgeER(PointER startPoint, PointER endPoint);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(EdgeER left, EdgeER right);
    public static bool op_Inequality(EdgeER left, EdgeER right);
}
public class PointER : object {
    public float x;
    public float y;
    public float z;
    public PointER(float x, float y, float z);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(PointER left, PointER right);
    public static bool op_Inequality(PointER left, PointER right);
}
public class TriangleER : object {
    public PointER Vertex1;
    public PointER Vertex2;
    public PointER Vertex3;
    public TriangleER(PointER vertex1, PointER vertex2, PointER vertex3);
    public double ContainsInCircumcircle(PointER point);
    public bool SharesVertexWith(TriangleER triangle);
}
