public UnityEngine.NVIDIA.DLSSCommandExecutionData : ValueType {
private int m_Reset
private float m_Sharpness
private float m_MVScaleX
private float m_MVScaleY
private float m_JitterOffsetX
private float m_JitterOffsetY
private float m_PreExposure
private UInt32 m_SubrectOffsetX
private UInt32 m_SubrectOffsetY
private UInt32 m_SubrectWidth
private UInt32 m_SubrectHeight
private UInt32 m_InvertXAxis
private UInt32 m_InvertYAxis
private UInt32 m_FeatureSlot
public int reset
public float sharpness
public float mvScaleX
public float mvScaleY
public float jitterOffsetX
public float jitterOffsetY
public float preExposure
public UInt32 subrectOffsetX
public UInt32 subrectOffsetY
public UInt32 subrectWidth
public UInt32 subrectHeight
public UInt32 invertXAxis
public UInt32 invertYAxis
internal UInt32 featureSlot
public void set_reset(int value)
public int get_reset()
public void set_sharpness(float value)
public float get_sharpness()
public void set_mvScaleX(float value)
public float get_mvScaleX()
public void set_mvScaleY(float value)
public float get_mvScaleY()
public void set_jitterOffsetX(float value)
public float get_jitterOffsetX()
public void set_jitterOffsetY(float value)
public float get_jitterOffsetY()
public void set_preExposure(float value)
public float get_preExposure()
public void set_subrectOffsetX(UInt32 value)
public UInt32 get_subrectOffsetX()
public void set_subrectOffsetY(UInt32 value)
public UInt32 get_subrectOffsetY()
public void set_subrectWidth(UInt32 value)
public UInt32 get_subrectWidth()
public void set_subrectHeight(UInt32 value)
public UInt32 get_subrectHeight()
public void set_invertXAxis(UInt32 value)
public UInt32 get_invertXAxis()
public void set_invertYAxis(UInt32 value)
public UInt32 get_invertYAxis()
internal void set_featureSlot(UInt32 value)
internal UInt32 get_featureSlot()
}
public UnityEngine.NVIDIA.DLSSCommandInitializationData : ValueType {
private UInt32 m_InputRTWidth
private UInt32 m_InputRTHeight
private UInt32 m_OutputRTWidth
private UInt32 m_OutputRTHeight
private DLSSQuality m_Quality
private DLSSFeatureFlags m_Flags
private UInt32 m_FeatureSlot
public UInt32 inputRTWidth
public UInt32 inputRTHeight
public UInt32 outputRTWidth
public UInt32 outputRTHeight
public DLSSQuality quality
public DLSSFeatureFlags featureFlags
internal UInt32 featureSlot
public void set_inputRTWidth(UInt32 value)
public UInt32 get_inputRTWidth()
public void set_inputRTHeight(UInt32 value)
public UInt32 get_inputRTHeight()
public void set_outputRTWidth(UInt32 value)
public UInt32 get_outputRTWidth()
public void set_outputRTHeight(UInt32 value)
public UInt32 get_outputRTHeight()
public void set_quality(DLSSQuality value)
public DLSSQuality get_quality()
public void set_featureFlags(DLSSFeatureFlags value)
public DLSSFeatureFlags get_featureFlags()
internal void set_featureSlot(UInt32 value)
internal UInt32 get_featureSlot()
public void SetFlag(DLSSFeatureFlags flag, bool value)
public bool GetFlag(DLSSFeatureFlags flag)
}
public UnityEngine.NVIDIA.DLSSContext : object {
private NativeData`1<DLSSCommandInitializationData> m_InitData
private NativeData`1<DLSSCommandExecutionData> m_ExecData
public DLSSCommandInitializationData& modreq(System.Runtime.InteropServices.InAttribute) initData
public DLSSCommandExecutionData& executeData
internal UInt32 featureSlot
public DLSSCommandInitializationData& modreq(System.Runtime.InteropServices.InAttribute) get_initData()
public DLSSCommandExecutionData& get_executeData()
internal UInt32 get_featureSlot()
internal void Init(DLSSCommandInitializationData initSettings, UInt32 featureSlot)
internal void Reset()
internal IntPtr GetInitCmdPtr()
internal IntPtr GetExecuteCmdPtr()
}
public UnityEngine.NVIDIA.DLSSDebugFeatureInfos : ValueType {
private bool m_ValidFeature
private UInt32 m_FeatureSlot
private DLSSCommandExecutionData m_ExecData
private DLSSCommandInitializationData m_InitData
public bool validFeature
public UInt32 featureSlot
public DLSSCommandExecutionData execData
public DLSSCommandInitializationData initData
public bool get_validFeature()
public UInt32 get_featureSlot()
public DLSSCommandExecutionData get_execData()
public DLSSCommandInitializationData get_initData()
}
public UnityEngine.NVIDIA.DLSSFeatureFlags : Enum {
public int value__
public DLSSFeatureFlags None
public DLSSFeatureFlags IsHDR
public DLSSFeatureFlags MVLowRes
public DLSSFeatureFlags MVJittered
public DLSSFeatureFlags DepthInverted
public DLSSFeatureFlags DoSharpening
}
public UnityEngine.NVIDIA.DLSSQuality : Enum {
public int value__
public DLSSQuality MaximumQuality
public DLSSQuality Balanced
public DLSSQuality MaximumPerformance
public DLSSQuality UltraPerformance
}
public UnityEngine.NVIDIA.DLSSTextureTable : ValueType {
private Texture <colorInput>k__BackingField
private Texture <colorOutput>k__BackingField
private Texture <depth>k__BackingField
private Texture <motionVectors>k__BackingField
private Texture <transparencyMask>k__BackingField
private Texture <exposureTexture>k__BackingField
private Texture <biasColorMask>k__BackingField
public Texture colorInput
public Texture colorOutput
public Texture depth
public Texture motionVectors
public Texture transparencyMask
public Texture exposureTexture
public Texture biasColorMask
public void set_colorInput(Texture value)
public Texture get_colorInput()
public void set_colorOutput(Texture value)
public Texture get_colorOutput()
public void set_depth(Texture value)
public Texture get_depth()
public void set_motionVectors(Texture value)
public Texture get_motionVectors()
public void set_transparencyMask(Texture value)
public Texture get_transparencyMask()
public void set_exposureTexture(Texture value)
public Texture get_exposureTexture()
public void set_biasColorMask(Texture value)
public Texture get_biasColorMask()
}
public UnityEngine.NVIDIA.GraphicsDevice : object {
private string s_DefaultProjectID
private string s_DefaultAppDir
private GraphicsDevice sGraphicsDeviceInstance
private InitDeviceContext m_InitDeviceContext
private Stack`1<DLSSContext> s_ContextObjectPool
public GraphicsDevice device
public UInt32 version
private void .ctor(string projectId, string engineVersion, string appDir)
private bool Initialize()
private void Shutdown()
protected void Finalize()
private void InsertEventCall(CommandBuffer cmd, PluginEvent pluginEvent, IntPtr ptr)
private GraphicsDevice InternalCreate(string appIdOrProjectId, string engineVersion, string appDir)
private int CreateSetTextureUserData(int featureId, int textureSlot, bool clearTextureTable)
private void SetTexture(CommandBuffer cmd, DLSSContext dlssContext, Textures textureSlot, Texture texture, bool clearTextureTable)
internal GraphicsDeviceDebugInfo GetDebugInfo(UInt32 debugViewId)
internal UInt32 CreateDebugViewId()
internal void DeleteDebugViewId(UInt32 debugViewId)
public GraphicsDevice CreateGraphicsDevice()
public GraphicsDevice CreateGraphicsDevice(string projectID)
public GraphicsDevice CreateGraphicsDevice(string projectID, string appDir)
public GraphicsDevice get_device()
public UInt32 get_version()
public bool IsFeatureAvailable(GraphicsDeviceFeature featureID)
public DLSSContext CreateFeature(CommandBuffer cmd, DLSSCommandInitializationData& initSettings)
public void DestroyFeature(CommandBuffer cmd, DLSSContext dlssContext)
public void ExecuteDLSS(CommandBuffer cmd, DLSSContext dlssContext, DLSSTextureTable& textures)
public bool GetOptimalSettings(UInt32 targetWidth, UInt32 targetHeight, DLSSQuality quality, OptimalDLSSSettingsData& optimalSettings)
public GraphicsDeviceDebugView CreateDebugView()
public void UpdateDebugView(GraphicsDeviceDebugView debugView)
public void DeleteDebugView(GraphicsDeviceDebugView debugView)
private bool NVUP_InitApi(IntPtr initData)
private void NVUP_ShutdownApi()
private bool NVUP_IsFeatureAvailable(GraphicsDeviceFeature featureID)
private bool NVUP_GetOptimalSettings(UInt32 inTargetWidth, UInt32 inTargetHeight, DLSSQuality inPerfVQuality, OptimalDLSSSettingsData& data)
private IntPtr NVUP_GetRenderEventCallback()
private IntPtr NVUP_GetSetTextureEventCallback()
private UInt32 NVUP_CreateFeatureSlot()
private UInt32 NVUP_GetDeviceVersion()
private UInt32 NVUP_CreateDebugView()
private void NVUP_GetGraphicsDeviceDebugInfo(UInt32 debugViewId, GraphicsDeviceDebugInfo& data)
private void NVUP_DeleteDebugView(UInt32 debugViewId)
private int NVUP_GetBaseEventId()
}
internal UnityEngine.NVIDIA.GraphicsDeviceDebugInfo : ValueType {
public UInt32 NVDeviceVersion
public UInt32 NGXVersion
public DLSSDebugFeatureInfos* dlssInfos
public UInt32 dlssInfosCount
}
public UnityEngine.NVIDIA.GraphicsDeviceDebugView : object {
internal UInt32 m_ViewId
internal UInt32 m_DeviceVersion
internal UInt32 m_NgxVersion
internal DLSSDebugFeatureInfos[] m_DlssDebugFeatures
public UInt32 deviceVersion
public UInt32 ngxVersion
public IEnumerable`1<DLSSDebugFeatureInfos> dlssFeatureInfos
internal void .ctor(UInt32 viewId)
public UInt32 get_deviceVersion()
public UInt32 get_ngxVersion()
public IEnumerable`1<DLSSDebugFeatureInfos> get_dlssFeatureInfos()
}
public UnityEngine.NVIDIA.GraphicsDeviceFeature : Enum {
public int value__
public GraphicsDeviceFeature DLSS
}
internal UnityEngine.NVIDIA.InitDeviceCmdData : ValueType {
private IntPtr m_ProjectId
private IntPtr m_EngineVersion
private IntPtr m_AppDir
public IntPtr projectId
public IntPtr engineVersion
public IntPtr appDir
public void set_projectId(IntPtr value)
public IntPtr get_projectId()
public void set_engineVersion(IntPtr value)
public IntPtr get_engineVersion()
public void set_appDir(IntPtr value)
public IntPtr get_appDir()
}
internal UnityEngine.NVIDIA.InitDeviceContext : object {
private NativeStr m_ProjectId
private NativeStr m_EngineVersion
private NativeStr m_AppDir
private NativeData`1<InitDeviceCmdData> m_InitData
public void .ctor(string projectId, string engineVersion, string appDir)
internal IntPtr GetInitCmdPtr()
}
internal UnityEngine.NVIDIA.NativeData`1 : object {
private IntPtr m_MarshalledValue
public T Value
public IntPtr Ptr
public IntPtr get_Ptr()
public void Dispose()
protected void Dispose(bool disposing)
protected void Finalize()
}
internal UnityEngine.NVIDIA.NativeStr : object {
private string m_Str
private IntPtr m_MarshalledString
public string Str
public IntPtr Ptr
public void set_Str(string value)
public IntPtr get_Ptr()
public void Dispose()
protected void Dispose(bool disposing)
protected void Finalize()
}
public UnityEngine.NVIDIA.NVUnityPlugin : object {
public bool Load()
public bool IsLoaded()
}
public UnityEngine.NVIDIA.OptimalDLSSSettingsData : ValueType {
private UInt32 m_OutRenderWidth
private UInt32 m_OutRenderHeight
private float m_Sharpness
private UInt32 m_MaxWidth
private UInt32 m_MaxHeight
private UInt32 m_MinWidth
private UInt32 m_MinHeight
public UInt32 outRenderWidth
public UInt32 outRenderHeight
public float sharpness
public UInt32 maxWidth
public UInt32 maxHeight
public UInt32 minWidth
public UInt32 minHeight
public UInt32 get_outRenderWidth()
public UInt32 get_outRenderHeight()
public float get_sharpness()
public UInt32 get_maxWidth()
public UInt32 get_maxHeight()
public UInt32 get_minWidth()
public UInt32 get_minHeight()
}
internal UnityEngine.NVIDIA.PluginEvent : Enum {
public int value__
public PluginEvent DestroyFeature
public PluginEvent DLSSExecute
public PluginEvent DLSSInit
}
