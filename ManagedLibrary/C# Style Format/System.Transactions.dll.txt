internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
public System.Transactions.CommittableTransaction : Transaction {
private TransactionOptions options
private AsyncCallback callback
private object user_defined_state
private IAsyncResult asyncResult
private object System.IAsyncResult.AsyncState
private WaitHandle System.IAsyncResult.AsyncWaitHandle
private bool System.IAsyncResult.CompletedSynchronously
private bool System.IAsyncResult.IsCompleted
public void .ctor(TimeSpan timeout)
public void .ctor(TransactionOptions options)
public IAsyncResult BeginCommit(AsyncCallback asyncCallback, object asyncState)
public void EndCommit(IAsyncResult asyncResult)
private void CommitCallback(IAsyncResult ar)
public void Commit()
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
private object System.IAsyncResult.get_AsyncState()
private WaitHandle System.IAsyncResult.get_AsyncWaitHandle()
private bool System.IAsyncResult.get_CompletedSynchronously()
private bool System.IAsyncResult.get_IsCompleted()
}
public System.Transactions.Configuration.DefaultSettingsSection : ConfigurationSection {
public TimeSpan Timeout
public string DistributedTransactionManagerName
public TimeSpan get_Timeout()
public void set_Timeout(TimeSpan value)
public string get_DistributedTransactionManagerName()
public void set_DistributedTransactionManagerName(string value)
}
public System.Transactions.Configuration.MachineSettingsSection : ConfigurationSection {
public TimeSpan MaxTimeout
public TimeSpan get_MaxTimeout()
public void set_MaxTimeout(TimeSpan value)
}
public System.Transactions.Configuration.TransactionsSectionGroup : ConfigurationSectionGroup {
public DefaultSettingsSection DefaultSettings
public MachineSettingsSection MachineSettings
public TransactionsSectionGroup GetSectionGroup(Configuration config)
public DefaultSettingsSection get_DefaultSettings()
public MachineSettingsSection get_MachineSettings()
}
public System.Transactions.DependentCloneOption : Enum {
public int value__
public DependentCloneOption BlockCommitUntilComplete
public DependentCloneOption RollbackIfNotComplete
}
public System.Transactions.DependentTransaction : Transaction {
private bool completed
internal bool Completed
internal void .ctor(Transaction parent, DependentCloneOption option)
internal bool get_Completed()
public void Complete()
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Transactions.DistributedTransactionPermission : CodeAccessPermission {
public void .ctor(PermissionState state)
public IPermission Copy()
public void FromXml(SecurityElement securityElement)
public IPermission Intersect(IPermission target)
public bool IsSubsetOf(IPermission target)
public bool IsUnrestricted()
public SecurityElement ToXml()
}
public System.Transactions.DistributedTransactionPermissionAttribute : CodeAccessSecurityAttribute {
public void .ctor(SecurityAction action)
public IPermission CreatePermission()
}
public System.Transactions.Enlistment : object {
internal bool done
public void Done()
internal void InternalOnDone()
}
public System.Transactions.EnlistmentOptions : Enum {
public int value__
public EnlistmentOptions None
public EnlistmentOptions EnlistDuringPrepareRequired
}
public System.Transactions.EnterpriseServicesInteropOption : Enum {
public int value__
public EnterpriseServicesInteropOption None
public EnterpriseServicesInteropOption Automatic
public EnterpriseServicesInteropOption Full
}
public System.Transactions.HostCurrentTransactionCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Transaction Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public Transaction EndInvoke(IAsyncResult result)
}
public System.Transactions.IDtcTransaction {
public void Abort(IntPtr reason, int retaining, int async)
public void Commit(int retaining, int commitType, int reserved)
public void GetTransactionInfo(IntPtr transactionInformation)
}
public System.Transactions.IEnlistmentNotification {
public void Commit(Enlistment enlistment)
public void InDoubt(Enlistment enlistment)
public void Prepare(PreparingEnlistment preparingEnlistment)
public void Rollback(Enlistment enlistment)
}
public System.Transactions.IPromotableSinglePhaseNotification {
public void Initialize()
public void Rollback(SinglePhaseEnlistment singlePhaseEnlistment)
public void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment)
}
public System.Transactions.ISimpleTransactionSuperior {
public void Rollback()
}
public System.Transactions.ISinglePhaseNotification {
public void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment)
}
public System.Transactions.IsolationLevel : Enum {
public int value__
public IsolationLevel Serializable
public IsolationLevel RepeatableRead
public IsolationLevel ReadCommitted
public IsolationLevel ReadUncommitted
public IsolationLevel Snapshot
public IsolationLevel Chaos
public IsolationLevel Unspecified
}
public System.Transactions.ITransactionPromoter {
public Byte[] Promote()
}
public System.Transactions.PreparingEnlistment : Enlistment {
private bool prepared
private Transaction tx
private IEnlistmentNotification enlisted
private WaitHandle waitHandle
private Exception ex
internal bool IsPrepared
internal WaitHandle WaitHandle
internal IEnlistmentNotification EnlistmentNotification
internal Exception Exception
internal void .ctor(Transaction tx, IEnlistmentNotification enlisted)
public void ForceRollback()
internal void InternalOnDone()
public void ForceRollback(Exception e)
public void Prepared()
public Byte[] RecoveryInformation()
internal bool get_IsPrepared()
internal WaitHandle get_WaitHandle()
internal IEnlistmentNotification get_EnlistmentNotification()
internal Exception get_Exception()
internal void set_Exception(Exception value)
}
public System.Transactions.SinglePhaseEnlistment : Enlistment {
private Transaction tx
private object abortingEnlisted
internal void .ctor(Transaction tx, object abortingEnlisted)
public void Aborted()
public void Aborted(Exception e)
public void Committed()
public void InDoubt()
public void InDoubt(Exception e)
}
public System.Transactions.SubordinateTransaction : Transaction {
public void .ctor(IsolationLevel isoLevel, ISimpleTransactionSuperior superior)
}
public System.Transactions.Transaction : object {
private Transaction ambient
private IsolationLevel level
private TransactionInformation info
private ArrayList dependents
private List`1<IEnlistmentNotification> volatiles
private List`1<ISinglePhaseNotification> durables
private IPromotableSinglePhaseNotification pspe
private AsyncCommit asyncCommit
private bool committing
private bool committed
private bool aborted
private TransactionScope scope
private Exception innerException
private Guid tag
private TransactionCompletedEventHandler TransactionCompleted
internal List`1<IEnlistmentNotification> Volatiles
internal List`1<ISinglePhaseNotification> Durables
internal IPromotableSinglePhaseNotification Pspe
public Transaction Current
internal Transaction CurrentInternal
public IsolationLevel IsolationLevel
public TransactionInformation TransactionInformation
public Guid PromoterType
private bool Aborted
internal TransactionScope Scope
internal List`1<IEnlistmentNotification> get_Volatiles()
internal List`1<ISinglePhaseNotification> get_Durables()
internal IPromotableSinglePhaseNotification get_Pspe()
internal void .ctor(Transaction other)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
public void add_TransactionCompleted(TransactionCompletedEventHandler value)
public void remove_TransactionCompleted(TransactionCompletedEventHandler value)
public Transaction get_Current()
public void set_Current(Transaction value)
internal Transaction get_CurrentInternal()
internal void set_CurrentInternal(Transaction value)
public IsolationLevel get_IsolationLevel()
public TransactionInformation get_TransactionInformation()
public Transaction Clone()
public void Dispose()
public DependentTransaction DependentClone(DependentCloneOption cloneOption)
public Enlistment EnlistDurable(Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions)
public Enlistment EnlistDurable(Guid resourceManagerIdentifier, ISinglePhaseNotification singlePhaseNotification, EnlistmentOptions enlistmentOptions)
public bool EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification promotableSinglePhaseNotification)
public void SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier)
public bool EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType)
public Byte[] GetPromotedToken()
public Guid get_PromoterType()
public Enlistment EnlistVolatile(IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions)
public Enlistment EnlistVolatile(ISinglePhaseNotification singlePhaseNotification, EnlistmentOptions enlistmentOptions)
private Enlistment EnlistVolatileInternal(IEnlistmentNotification notification, EnlistmentOptions options)
public Enlistment PromoteAndEnlistDurable(Guid manager, IPromotableSinglePhaseNotification promotableNotification, ISinglePhaseNotification notification, EnlistmentOptions options)
public bool Equals(object obj)
private bool Equals(Transaction t)
public bool op_Equality(Transaction x, Transaction y)
public bool op_Inequality(Transaction x, Transaction y)
public int GetHashCode()
public void Rollback()
public void Rollback(Exception e)
internal void Rollback(Exception ex, object abortingEnlisted)
private bool get_Aborted()
private void set_Aborted(bool value)
internal TransactionScope get_Scope()
internal void set_Scope(TransactionScope value)
protected IAsyncResult BeginCommitInternal(AsyncCallback callback)
protected void EndCommitInternal(IAsyncResult ar)
internal void CommitInternal()
private void DoCommit()
private void Complete()
internal void InitScope(TransactionScope scope)
private void PrepareCallbackWrapper(object state)
private void DoPreparePhase()
private void DoCommitPhase()
private void DoSingleCommit(ISinglePhaseNotification single)
private void DoSingleCommit(IPromotableSinglePhaseNotification single)
private void CheckAborted()
private void FireCompleted()
private void EnsureIncompleteCurrentScope()
}
public System.Transactions.TransactionAbortedException : TransactionException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Transactions.TransactionCompletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TransactionEventArgs e)
public IAsyncResult BeginInvoke(object sender, TransactionEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Transactions.TransactionEventArgs : EventArgs {
private Transaction transaction
public Transaction Transaction
internal void .ctor(Transaction transaction)
public Transaction get_Transaction()
}
public System.Transactions.TransactionException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Transactions.TransactionInDoubtException : TransactionException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Transactions.TransactionInformation : object {
private string local_id
private Guid dtcId
private DateTime creation_time
private TransactionStatus status
public DateTime CreationTime
public Guid DistributedIdentifier
public string LocalIdentifier
public TransactionStatus Status
private void .ctor(TransactionInformation other)
public DateTime get_CreationTime()
public Guid get_DistributedIdentifier()
internal void set_DistributedIdentifier(Guid value)
public string get_LocalIdentifier()
public TransactionStatus get_Status()
internal void set_Status(TransactionStatus value)
internal TransactionInformation Clone(TransactionInformation other)
}
public System.Transactions.TransactionInterop : object {
public Guid PromoterTypeDtc
public IDtcTransaction GetDtcTransaction(Transaction transaction)
public Byte[] GetExportCookie(Transaction transaction, Byte[] whereabouts)
public Transaction GetTransactionFromDtcTransaction(IDtcTransaction transactionNative)
public Transaction GetTransactionFromExportCookie(Byte[] cookie)
public Transaction GetTransactionFromTransmitterPropagationToken(Byte[] propagationToken)
public Byte[] GetTransmitterPropagationToken(Transaction transaction)
public Byte[] GetWhereabouts()
}
public System.Transactions.TransactionManager : object {
private DefaultSettingsSection defaultSettings
private MachineSettingsSection machineSettings
private TimeSpan defaultTimeout
private TimeSpan maxTimeout
private TransactionStartedEventHandler DistributedTransactionStarted
public TimeSpan DefaultTimeout
public HostCurrentTransactionCallback HostCurrentCallback
public TimeSpan MaximumTimeout
public TimeSpan get_DefaultTimeout()
public HostCurrentTransactionCallback get_HostCurrentCallback()
public void set_HostCurrentCallback(HostCurrentTransactionCallback value)
public TimeSpan get_MaximumTimeout()
public void RecoveryComplete(Guid resourceManagerIdentifier)
public Enlistment Reenlist(Guid resourceManagerIdentifier, Byte[] recoveryInformation, IEnlistmentNotification enlistmentNotification)
public void add_DistributedTransactionStarted(TransactionStartedEventHandler value)
public void remove_DistributedTransactionStarted(TransactionStartedEventHandler value)
}
public System.Transactions.TransactionManagerCommunicationException : TransactionException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Transactions.TransactionOptions : ValueType {
private IsolationLevel level
private TimeSpan timeout
public IsolationLevel IsolationLevel
public TimeSpan Timeout
internal void .ctor(IsolationLevel level, TimeSpan timeout)
public IsolationLevel get_IsolationLevel()
public void set_IsolationLevel(IsolationLevel value)
public TimeSpan get_Timeout()
public void set_Timeout(TimeSpan value)
public bool op_Equality(TransactionOptions x, TransactionOptions y)
public bool op_Inequality(TransactionOptions x, TransactionOptions y)
public bool Equals(object obj)
public int GetHashCode()
}
public System.Transactions.TransactionPromotionException : TransactionException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Transactions.TransactionScope : object {
private TransactionOptions defaultOptions
private Transaction transaction
private Transaction oldTransaction
private TransactionScope parentScope
private TimeSpan timeout
private int nested
private bool disposed
private bool completed
private bool isRoot
private bool asyncFlowEnabled
internal bool IsComplete
internal TimeSpan Timeout
public void .ctor(TransactionScopeAsyncFlowOption asyncFlowOption)
public void .ctor(Transaction transactionToUse)
public void .ctor(Transaction transactionToUse, TimeSpan scopeTimeout)
public void .ctor(Transaction transactionToUse, TimeSpan scopeTimeout, EnterpriseServicesInteropOption interopOption)
public void .ctor(TransactionScopeOption scopeOption)
public void .ctor(TransactionScopeOption scopeOption, TimeSpan scopeTimeout)
public void .ctor(TransactionScopeOption option, TransactionScopeAsyncFlowOption asyncFlow)
public void .ctor(TransactionScopeOption scopeOption, TimeSpan scopeTimeout, TransactionScopeAsyncFlowOption asyncFlow)
public void .ctor(TransactionScopeOption scopeOption, TransactionOptions transactionOptions)
public void .ctor(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, EnterpriseServicesInteropOption interopOption)
public void .ctor(Transaction transactionToUse, TransactionScopeAsyncFlowOption asyncFlowOption)
public void .ctor(Transaction transactionToUse, TimeSpan scopeTimeout, TransactionScopeAsyncFlowOption asyncFlowOption)
public void .ctor(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, TransactionScopeAsyncFlowOption asyncFlowOption)
private void Initialize(TransactionScopeOption scopeOption, Transaction tx, TransactionOptions options, EnterpriseServicesInteropOption interop, TimeSpan scopeTimeout, TransactionScopeAsyncFlowOption asyncFlow)
private Transaction InitTransaction(Transaction tx, TransactionScopeOption scopeOption)
public void Complete()
internal bool get_IsComplete()
internal TimeSpan get_Timeout()
public void Dispose()
}
public System.Transactions.TransactionScopeAsyncFlowOption : Enum {
public int value__
public TransactionScopeAsyncFlowOption Suppress
public TransactionScopeAsyncFlowOption Enabled
}
public System.Transactions.TransactionScopeOption : Enum {
public int value__
public TransactionScopeOption Required
public TransactionScopeOption RequiresNew
public TransactionScopeOption Suppress
}
public System.Transactions.TransactionStartedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TransactionEventArgs e)
public IAsyncResult BeginInvoke(object sender, TransactionEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Transactions.TransactionStatus : Enum {
public int value__
public TransactionStatus Active
public TransactionStatus Committed
public TransactionStatus Aborted
public TransactionStatus InDoubt
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
