public UnityEngine.Experimental.Video.VideoClipPlayable : ValueType {
private PlayableHandle m_Handle
public VideoClipPlayable Create(PlayableGraph graph, VideoClip clip, bool looping)
private PlayableHandle CreateHandle(PlayableGraph graph, VideoClip clip, bool looping)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(VideoClipPlayable playable)
public VideoClipPlayable op_Explicit(Playable playable)
public bool Equals(VideoClipPlayable other)
public VideoClip GetClip()
public void SetClip(VideoClip value)
public bool GetLooped()
public void SetLooped(bool value)
public bool IsPlaying()
public double GetStartDelay()
internal void SetStartDelay(double value)
public double GetPauseDelay()
internal void GetPauseDelay(double value)
public void Seek(double startTime, double startDelay)
public void Seek(double startTime, double startDelay, double duration)
private void ValidateStartDelayInternal(double startDelay)
private VideoClip GetClipInternal(PlayableHandle& hdl)
private void SetClipInternal(PlayableHandle& hdl, VideoClip clip)
private bool GetLoopedInternal(PlayableHandle& hdl)
private void SetLoopedInternal(PlayableHandle& hdl, bool looped)
private bool GetIsPlayingInternal(PlayableHandle& hdl)
private double GetStartDelayInternal(PlayableHandle& hdl)
private void SetStartDelayInternal(PlayableHandle& hdl, double delay)
private double GetPauseDelayInternal(PlayableHandle& hdl)
private void SetPauseDelayInternal(PlayableHandle& hdl, double delay)
private bool InternalCreateVideoClipPlayable(PlayableGraph& graph, VideoClip clip, bool looping, PlayableHandle& handle)
private bool ValidateType(PlayableHandle& hdl)
}
public UnityEngine.Experimental.Video.VideoPlayerExtensions : object {
public AudioSampleProvider GetAudioSampleProvider(VideoPlayer vp, ushort trackIndex)
internal UInt32 InternalGetAudioSampleProviderId(VideoPlayer vp, ushort trackIndex)
}
public UnityEngine.Video.Video3DLayout : Enum {
public int value__
public Video3DLayout No3D
public Video3DLayout SideBySide3D
public Video3DLayout OverUnder3D
}
public UnityEngine.Video.VideoAspectRatio : Enum {
public int value__
public VideoAspectRatio NoScaling
public VideoAspectRatio FitVertically
public VideoAspectRatio FitHorizontally
public VideoAspectRatio FitInside
public VideoAspectRatio FitOutside
public VideoAspectRatio Stretch
}
public UnityEngine.Video.VideoAudioOutputMode : Enum {
public int value__
public VideoAudioOutputMode None
public VideoAudioOutputMode AudioSource
public VideoAudioOutputMode Direct
public VideoAudioOutputMode APIOnly
}
public UnityEngine.Video.VideoClip : Object {
public string originalPath
public ulong frameCount
public double frameRate
public double length
public UInt32 width
public UInt32 height
public UInt32 pixelAspectRatioNumerator
public UInt32 pixelAspectRatioDenominator
public bool sRGB
public ushort audioTrackCount
public string get_originalPath()
public ulong get_frameCount()
public double get_frameRate()
public double get_length()
public UInt32 get_width()
public UInt32 get_height()
public UInt32 get_pixelAspectRatioNumerator()
public UInt32 get_pixelAspectRatioDenominator()
public bool get_sRGB()
public ushort get_audioTrackCount()
public ushort GetAudioChannelCount(ushort audioTrackIdx)
public UInt32 GetAudioSampleRate(ushort audioTrackIdx)
public string GetAudioLanguage(ushort audioTrackIdx)
}
public UnityEngine.Video.VideoPlayer : Behaviour {
private EventHandler prepareCompleted
private EventHandler loopPointReached
private EventHandler started
private EventHandler frameDropped
private ErrorEventHandler errorReceived
private EventHandler seekCompleted
private TimeEventHandler clockResyncOccurred
private FrameReadyEventHandler frameReady
public VideoSource source
public VideoTimeUpdateMode timeUpdateMode
public string url
public VideoClip clip
public VideoRenderMode renderMode
public bool canSetTimeUpdateMode
public Camera targetCamera
public RenderTexture targetTexture
public Renderer targetMaterialRenderer
public string targetMaterialProperty
public VideoAspectRatio aspectRatio
public float targetCameraAlpha
public Video3DLayout targetCamera3DLayout
public Texture texture
public bool isPrepared
public bool waitForFirstFrame
public bool playOnAwake
public bool isPlaying
public bool isPaused
public bool canSetTime
public double time
public long frame
public double clockTime
public bool canStep
public bool canSetPlaybackSpeed
public float playbackSpeed
public bool isLooping
public bool canSetTimeSource
public VideoTimeSource timeSource
public VideoTimeReference timeReference
public double externalReferenceTime
public bool canSetSkipOnDrop
public bool skipOnDrop
public ulong frameCount
public float frameRate
public double length
public UInt32 width
public UInt32 height
public UInt32 pixelAspectRatioNumerator
public UInt32 pixelAspectRatioDenominator
public ushort audioTrackCount
public ushort controlledAudioTrackMaxCount
public ushort controlledAudioTrackCount
public VideoAudioOutputMode audioOutputMode
public bool canSetDirectAudioVolume
public bool sendFrameReadyEvents
public VideoSource get_source()
public void set_source(VideoSource value)
public VideoTimeUpdateMode get_timeUpdateMode()
public void set_timeUpdateMode(VideoTimeUpdateMode value)
public string get_url()
public void set_url(string value)
public VideoClip get_clip()
public void set_clip(VideoClip value)
public VideoRenderMode get_renderMode()
public void set_renderMode(VideoRenderMode value)
public bool get_canSetTimeUpdateMode()
public Camera get_targetCamera()
public void set_targetCamera(Camera value)
public RenderTexture get_targetTexture()
public void set_targetTexture(RenderTexture value)
public Renderer get_targetMaterialRenderer()
public void set_targetMaterialRenderer(Renderer value)
public string get_targetMaterialProperty()
public void set_targetMaterialProperty(string value)
public VideoAspectRatio get_aspectRatio()
public void set_aspectRatio(VideoAspectRatio value)
public float get_targetCameraAlpha()
public void set_targetCameraAlpha(float value)
public Video3DLayout get_targetCamera3DLayout()
public void set_targetCamera3DLayout(Video3DLayout value)
public Texture get_texture()
public void Prepare()
public bool get_isPrepared()
public bool get_waitForFirstFrame()
public void set_waitForFirstFrame(bool value)
public bool get_playOnAwake()
public void set_playOnAwake(bool value)
public void Play()
public void Pause()
public void Stop()
public bool get_isPlaying()
public bool get_isPaused()
public bool get_canSetTime()
public double get_time()
public void set_time(double value)
public long get_frame()
public void set_frame(long value)
public double get_clockTime()
public bool get_canStep()
public void StepForward()
public bool get_canSetPlaybackSpeed()
public float get_playbackSpeed()
public void set_playbackSpeed(float value)
public bool get_isLooping()
public void set_isLooping(bool value)
public bool get_canSetTimeSource()
public VideoTimeSource get_timeSource()
public void set_timeSource(VideoTimeSource value)
public VideoTimeReference get_timeReference()
public void set_timeReference(VideoTimeReference value)
public double get_externalReferenceTime()
public void set_externalReferenceTime(double value)
public bool get_canSetSkipOnDrop()
public bool get_skipOnDrop()
public void set_skipOnDrop(bool value)
public ulong get_frameCount()
public float get_frameRate()
public double get_length()
public UInt32 get_width()
public UInt32 get_height()
public UInt32 get_pixelAspectRatioNumerator()
public UInt32 get_pixelAspectRatioDenominator()
public ushort get_audioTrackCount()
public string GetAudioLanguageCode(ushort trackIndex)
public ushort GetAudioChannelCount(ushort trackIndex)
public UInt32 GetAudioSampleRate(ushort trackIndex)
public ushort get_controlledAudioTrackMaxCount()
public ushort get_controlledAudioTrackCount()
public void set_controlledAudioTrackCount(ushort value)
private ushort GetControlledAudioTrackCount()
private void SetControlledAudioTrackCount(ushort value)
public void EnableAudioTrack(ushort trackIndex, bool enabled)
public bool IsAudioTrackEnabled(ushort trackIndex)
public VideoAudioOutputMode get_audioOutputMode()
public void set_audioOutputMode(VideoAudioOutputMode value)
public bool get_canSetDirectAudioVolume()
public float GetDirectAudioVolume(ushort trackIndex)
public void SetDirectAudioVolume(ushort trackIndex, float volume)
public bool GetDirectAudioMute(ushort trackIndex)
public void SetDirectAudioMute(ushort trackIndex, bool mute)
public AudioSource GetTargetAudioSource(ushort trackIndex)
public void SetTargetAudioSource(ushort trackIndex, AudioSource source)
public void add_prepareCompleted(EventHandler value)
public void remove_prepareCompleted(EventHandler value)
public void add_loopPointReached(EventHandler value)
public void remove_loopPointReached(EventHandler value)
public void add_started(EventHandler value)
public void remove_started(EventHandler value)
public void add_frameDropped(EventHandler value)
public void remove_frameDropped(EventHandler value)
public void add_errorReceived(ErrorEventHandler value)
public void remove_errorReceived(ErrorEventHandler value)
public void add_seekCompleted(EventHandler value)
public void remove_seekCompleted(EventHandler value)
public void add_clockResyncOccurred(TimeEventHandler value)
public void remove_clockResyncOccurred(TimeEventHandler value)
public bool get_sendFrameReadyEvents()
public void set_sendFrameReadyEvents(bool value)
public void add_frameReady(FrameReadyEventHandler value)
public void remove_frameReady(FrameReadyEventHandler value)
private void InvokePrepareCompletedCallback_Internal(VideoPlayer source)
private void InvokeFrameReadyCallback_Internal(VideoPlayer source, long frameIdx)
private void InvokeLoopPointReachedCallback_Internal(VideoPlayer source)
private void InvokeStartedCallback_Internal(VideoPlayer source)
private void InvokeFrameDroppedCallback_Internal(VideoPlayer source)
private void InvokeErrorReceivedCallback_Internal(VideoPlayer source, string errorStr)
private void InvokeSeekCompletedCallback_Internal(VideoPlayer source)
private void InvokeClockResyncOccurredCallback_Internal(VideoPlayer source, double seconds)
}
public UnityEngine.Video.VideoRenderMode : Enum {
public int value__
public VideoRenderMode CameraFarPlane
public VideoRenderMode CameraNearPlane
public VideoRenderMode RenderTexture
public VideoRenderMode MaterialOverride
public VideoRenderMode APIOnly
}
public UnityEngine.Video.VideoSource : Enum {
public int value__
public VideoSource VideoClip
public VideoSource Url
}
public UnityEngine.Video.VideoTimeReference : Enum {
public int value__
public VideoTimeReference Freerun
public VideoTimeReference InternalTime
public VideoTimeReference ExternalTime
}
public UnityEngine.Video.VideoTimeSource : Enum {
public int value__
public VideoTimeSource AudioDSPTimeSource
public VideoTimeSource GameTimeSource
}
public UnityEngine.Video.VideoTimeUpdateMode : Enum {
public int value__
public VideoTimeUpdateMode DSPTime
public VideoTimeUpdateMode GameTime
public VideoTimeUpdateMode UnscaledGameTime
}
internal UnityEngineInternal.Video.VideoAlphaLayout : Enum {
public int value__
public VideoAlphaLayout Native
public VideoAlphaLayout Split
}
internal UnityEngineInternal.Video.VideoError : Enum {
public int value__
public VideoError NoErr
public VideoError OutOfMemoryErr
public VideoError CantReadFile
public VideoError CantWriteFile
public VideoError BadParams
public VideoError NoData
public VideoError BadPermissions
public VideoError DeviceNotAvailable
public VideoError ResourceNotAvailable
public VideoError NetworkErr
}
internal UnityEngineInternal.Video.VideoPixelFormat : Enum {
public int value__
public VideoPixelFormat RGB
public VideoPixelFormat RGBA
public VideoPixelFormat YUV
public VideoPixelFormat YUVA
}
internal UnityEngineInternal.Video.VideoPlayback : object {
internal IntPtr m_Ptr
public void StartPlayback()
public void PausePlayback()
public void StopPlayback()
public VideoError GetStatus()
public bool IsReady()
public bool IsPlaying()
public void Step()
public bool CanStep()
public UInt32 GetWidth()
public UInt32 GetHeight()
public float GetFrameRate()
public float GetDuration()
public ulong GetFrameCount()
public UInt32 GetPixelAspectRatioNumerator()
public UInt32 GetPixelAspectRatioDenominator()
public VideoPixelFormat GetPixelFormat()
public bool CanNotSkipOnDrop()
public void SetSkipOnDrop(bool skipOnDrop)
public bool GetTexture(Texture texture, Int64& outputFrameNum)
public void SeekToFrame(long frameIndex, Callback seekCompletedCallback)
public void SeekToTime(double secs, Callback seekCompletedCallback)
public float GetPlaybackSpeed()
public void SetPlaybackSpeed(float value)
public bool GetLoop()
public void SetLoop(bool value)
public void SetAdjustToLinearSpace(bool enable)
public ushort GetAudioTrackCount()
public ushort GetAudioChannelCount(ushort trackIdx)
public UInt32 GetAudioSampleRate(ushort trackIdx)
public void SetAudioTarget(ushort trackIdx, bool enabled, bool softwareOutput, AudioSource audioSource)
private UInt32 GetAudioSampleProviderId(ushort trackIndex)
public AudioSampleProvider GetAudioSampleProvider(ushort trackIndex)
internal bool PlatformSupportsH265()
}
internal UnityEngineInternal.Video.VideoPlaybackMgr : object {
internal IntPtr m_Ptr
public ulong videoPlaybackCount
public void Dispose()
private IntPtr Internal_Create()
private void Internal_Destroy(IntPtr ptr)
public VideoPlayback CreateVideoPlayback(string fileName, MessageCallback errorCallback, Callback readyCallback, Callback reachedEndCallback, bool splitAlpha)
public void ReleaseVideoPlayback(VideoPlayback playback)
public ulong get_videoPlaybackCount()
public void Update()
internal void ProcessOSMainLoopMessagesForTesting()
}
