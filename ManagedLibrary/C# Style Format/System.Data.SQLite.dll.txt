public System.Data.SQLite.AssemblySourceIdAttribute : Attribute {
private string sourceId
public string SourceId
public void .ctor(string value)
public string get_SourceId()
}
public System.Data.SQLite.AssemblySourceTimeStampAttribute : Attribute {
private string sourceTimeStamp
public string SourceTimeStamp
public void .ctor(string value)
public string get_SourceTimeStamp()
}
public System.Data.SQLite.AuthorizerEventArgs : EventArgs {
public IntPtr UserData
public SQLiteAuthorizerActionCode ActionCode
public string Argument1
public string Argument2
public string Database
public string Context
public SQLiteAuthorizerReturnCode ReturnCode
internal void .ctor(IntPtr pUserData, SQLiteAuthorizerActionCode actionCode, string argument1, string argument2, string database, string context, SQLiteAuthorizerReturnCode returnCode)
}
public System.Data.SQLite.CollationEncodingEnum : Enum {
public int value__
public CollationEncodingEnum UTF8
public CollationEncodingEnum UTF16LE
public CollationEncodingEnum UTF16BE
}
public System.Data.SQLite.CollationSequence : ValueType {
public string Name
public CollationTypeEnum Type
public CollationEncodingEnum Encoding
internal SQLiteFunction _func
public int Compare(string s1, string s2)
public int Compare(Char[] c1, Char[] c2)
}
public System.Data.SQLite.CollationTypeEnum : Enum {
public int value__
public CollationTypeEnum Binary
public CollationTypeEnum NoCase
public CollationTypeEnum Reverse
public CollationTypeEnum Custom
}
public System.Data.SQLite.CommitEventArgs : EventArgs {
public bool AbortTransaction
}
public System.Data.SQLite.ConnectionEventArgs : EventArgs {
public SQLiteConnectionEventType EventType
public StateChangeEventArgs EventArgs
public IDbTransaction Transaction
public IDbCommand Command
public IDataReader DataReader
public CriticalHandle CriticalHandle
public string Text
public object Data
internal void .ctor(SQLiteConnectionEventType eventType, StateChangeEventArgs eventArgs, IDbTransaction transaction, IDbCommand command, IDataReader dataReader, CriticalHandle criticalHandle, string text, object data)
}
public System.Data.SQLite.FunctionType : Enum {
public int value__
public FunctionType Scalar
public FunctionType Aggregate
public FunctionType Collation
}
public System.Data.SQLite.Generic.SQLiteModuleEnumerable`1 : SQLiteModuleEnumerable {
private IEnumerable`1<T> enumerable
private bool disposed
public void .ctor(string name, IEnumerable`1<T> enumerable)
public SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor)
public SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index)
private void CheckDisposed()
protected void Dispose(bool disposing)
}
public System.Data.SQLite.Generic.SQLiteVirtualTableCursorEnumerator`1 : SQLiteVirtualTableCursorEnumerator {
private IEnumerator`1<T> enumerator
private bool disposed
private T System.Collections.Generic.IEnumerator<T>.Current
public void .ctor(SQLiteVirtualTable table, IEnumerator`1<T> enumerator)
private T System.Collections.Generic.IEnumerator<T>.get_Current()
public void Close()
private void CheckDisposed()
protected void Dispose(bool disposing)
}
public System.Data.SQLite.ISQLiteConnectionPool {
public void GetCounts(string fileName, Dictionary`2& counts, Int32& openCount, Int32& closeCount, Int32& totalCount)
public void ClearPool(string fileName)
public void ClearAllPools()
public void Add(string fileName, object handle, int version)
public object Remove(string fileName, int maxPoolSize, Int32& version)
}
public System.Data.SQLite.ISQLiteManagedModule {
public bool Declared
public string Name
public bool get_Declared()
public string get_Name()
public SQLiteErrorCode Create(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error)
public SQLiteErrorCode Connect(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error)
public SQLiteErrorCode BestIndex(SQLiteVirtualTable table, SQLiteIndex index)
public SQLiteErrorCode Disconnect(SQLiteVirtualTable table)
public SQLiteErrorCode Destroy(SQLiteVirtualTable table)
public SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor)
public SQLiteErrorCode Close(SQLiteVirtualTableCursor cursor)
public SQLiteErrorCode Filter(SQLiteVirtualTableCursor cursor, int indexNumber, string indexString, SQLiteValue[] values)
public SQLiteErrorCode Next(SQLiteVirtualTableCursor cursor)
public bool Eof(SQLiteVirtualTableCursor cursor)
public SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index)
public SQLiteErrorCode RowId(SQLiteVirtualTableCursor cursor, Int64& rowId)
public SQLiteErrorCode Update(SQLiteVirtualTable table, SQLiteValue[] values, Int64& rowId)
public SQLiteErrorCode Begin(SQLiteVirtualTable table)
public SQLiteErrorCode Sync(SQLiteVirtualTable table)
public SQLiteErrorCode Commit(SQLiteVirtualTable table)
public SQLiteErrorCode Rollback(SQLiteVirtualTable table)
public bool FindFunction(SQLiteVirtualTable table, int argumentCount, string name, SQLiteFunction& function, IntPtr& pClientData)
public SQLiteErrorCode Rename(SQLiteVirtualTable table, string newName)
public SQLiteErrorCode Savepoint(SQLiteVirtualTable table, int savepoint)
public SQLiteErrorCode Release(SQLiteVirtualTable table, int savepoint)
public SQLiteErrorCode RollbackTo(SQLiteVirtualTable table, int savepoint)
}
public System.Data.SQLite.ISQLiteNativeHandle {
public IntPtr NativeHandle
public IntPtr get_NativeHandle()
}
public System.Data.SQLite.ISQLiteNativeModule {
public SQLiteErrorCode xCreate(IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError)
public SQLiteErrorCode xConnect(IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError)
public SQLiteErrorCode xBestIndex(IntPtr pVtab, IntPtr pIndex)
public SQLiteErrorCode xDisconnect(IntPtr pVtab)
public SQLiteErrorCode xDestroy(IntPtr pVtab)
public SQLiteErrorCode xOpen(IntPtr pVtab, IntPtr& pCursor)
public SQLiteErrorCode xClose(IntPtr pCursor)
public SQLiteErrorCode xFilter(IntPtr pCursor, int idxNum, IntPtr idxStr, int argc, IntPtr argv)
public SQLiteErrorCode xNext(IntPtr pCursor)
public int xEof(IntPtr pCursor)
public SQLiteErrorCode xColumn(IntPtr pCursor, IntPtr pContext, int index)
public SQLiteErrorCode xRowId(IntPtr pCursor, Int64& rowId)
public SQLiteErrorCode xUpdate(IntPtr pVtab, int argc, IntPtr argv, Int64& rowId)
public SQLiteErrorCode xBegin(IntPtr pVtab)
public SQLiteErrorCode xSync(IntPtr pVtab)
public SQLiteErrorCode xCommit(IntPtr pVtab)
public SQLiteErrorCode xRollback(IntPtr pVtab)
public int xFindFunction(IntPtr pVtab, int nArg, IntPtr zName, SQLiteCallback& callback, IntPtr& pClientData)
public SQLiteErrorCode xRename(IntPtr pVtab, IntPtr zNew)
public SQLiteErrorCode xSavepoint(IntPtr pVtab, int iSavepoint)
public SQLiteErrorCode xRelease(IntPtr pVtab, int iSavepoint)
public SQLiteErrorCode xRollbackTo(IntPtr pVtab, int iSavepoint)
}
public System.Data.SQLite.ISQLiteSchemaExtensions {
public void BuildTempSchema(SQLiteConnection connection)
}
public System.Data.SQLite.LogEventArgs : EventArgs {
public object ErrorCode
public string Message
public object Data
internal void .ctor(IntPtr pUserData, object errorCode, string message, object data)
}
internal System.Data.SQLite.SQLite3 : SQLiteBase {
internal string PublicKey
internal string DesignerVersion
private object syncRoot
protected internal SQLiteConnectionHandle _sql
protected string _fileName
protected bool _usePool
protected int _poolVersion
private bool _buildingSchema
protected List`1<SQLiteFunction> _functions
protected Dictionary`2<string, SQLiteModule> _modules
private bool disposed
private Nullable`1<bool> have_errstr
private Nullable`1<bool> have_stmt_readonly
private Nullable`1<bool> forceLogPrepare
internal string Version
internal int VersionNumber
internal string DefineConstants
internal string SQLiteVersion
internal int SQLiteVersionNumber
internal string SQLiteSourceId
internal string SQLiteCompileOptions
internal string InteropVersion
internal string InteropSourceId
internal string InteropCompileOptions
internal bool AutoCommit
internal long LastInsertRowId
internal int Changes
internal long MemoryUsed
internal long StaticMemoryUsed
internal long MemoryHighwater
internal long StaticMemoryHighwater
internal bool OwnHandle
internal void .ctor(SQLiteDateFormats fmt, DateTimeKind kind, string fmtString, IntPtr db, string fileName, bool ownHandle)
private void CheckDisposed()
protected void Dispose(bool disposing)
private void DisposeModules()
internal void Close(bool canThrow)
internal void Cancel()
internal void BindFunction(SQLiteFunctionAttribute functionAttribute, SQLiteFunction function, SQLiteConnectionFlags flags)
internal string get_Version()
internal int get_VersionNumber()
internal string get_DefineConstants()
internal string get_SQLiteVersion()
internal int get_SQLiteVersionNumber()
internal string get_SQLiteSourceId()
internal string get_SQLiteCompileOptions()
internal string get_InteropVersion()
internal string get_InteropSourceId()
internal string get_InteropCompileOptions()
internal bool get_AutoCommit()
internal long get_LastInsertRowId()
internal int get_Changes()
internal long get_MemoryUsed()
internal long get_StaticMemoryUsed()
internal long get_MemoryHighwater()
internal long get_StaticMemoryHighwater()
internal bool get_OwnHandle()
internal SQLiteErrorCode SetMemoryStatus(bool value)
internal SQLiteErrorCode StaticSetMemoryStatus(bool value)
internal SQLiteErrorCode ReleaseMemory()
internal SQLiteErrorCode StaticReleaseMemory(int nBytes, bool reset, bool compact, Int32& nFree, Boolean& resetOk, UInt32& nLargest)
internal SQLiteErrorCode Shutdown()
internal SQLiteErrorCode StaticShutdown(bool directories)
internal bool IsOpen()
internal void Open(string strFilename, SQLiteConnectionFlags connectionFlags, SQLiteOpenFlagsEnum openFlags, int maxPoolSize, bool usePool)
internal void ClearPool()
internal int CountPool()
internal void SetTimeout(int nTimeoutMS)
internal bool Step(SQLiteStatement stmt)
internal string GetErrorString(SQLiteErrorCode rc)
internal bool IsReadOnly(SQLiteStatement stmt)
internal SQLiteErrorCode Reset(SQLiteStatement stmt)
internal string GetLastError()
internal string GetLastError(string defValue)
private bool ForceLogPrepare()
internal SQLiteStatement Prepare(SQLiteConnection cnn, string strSql, SQLiteStatement previous, UInt32 timeoutMS, String& strRemain)
protected void LogBind(SQLiteStatementHandle handle, int index)
protected void LogBind(SQLiteStatementHandle handle, int index, ValueType value)
private string FormatDateTime(DateTime value)
protected void LogBind(SQLiteStatementHandle handle, int index, DateTime value)
protected void LogBind(SQLiteStatementHandle handle, int index, string value)
private string ToHexadecimalString(Byte[] array)
protected void LogBind(SQLiteStatementHandle handle, int index, Byte[] value)
internal void Bind_Double(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, double value)
internal void Bind_Int32(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, int value)
internal void Bind_UInt32(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, UInt32 value)
internal void Bind_Int64(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, long value)
internal void Bind_UInt64(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, ulong value)
internal void Bind_Text(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, string value)
internal void Bind_DateTime(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, DateTime dt)
internal void Bind_Blob(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, Byte[] blobData)
internal void Bind_Null(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index)
internal int Bind_ParamCount(SQLiteStatement stmt, SQLiteConnectionFlags flags)
internal string Bind_ParamName(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index)
internal int Bind_ParamIndex(SQLiteStatement stmt, SQLiteConnectionFlags flags, string paramName)
internal int ColumnCount(SQLiteStatement stmt)
internal string ColumnName(SQLiteStatement stmt, int index)
internal TypeAffinity ColumnAffinity(SQLiteStatement stmt, int index)
internal string ColumnType(SQLiteStatement stmt, int index, TypeAffinity& nAffinity)
internal int ColumnIndex(SQLiteStatement stmt, string columnName)
internal string ColumnOriginalName(SQLiteStatement stmt, int index)
internal string ColumnDatabaseName(SQLiteStatement stmt, int index)
internal string ColumnTableName(SQLiteStatement stmt, int index)
internal void ColumnMetaData(string dataBase, string table, string column, String& dataType, String& collateSequence, Boolean& notNull, Boolean& primaryKey, Boolean& autoIncrement)
internal double GetDouble(SQLiteStatement stmt, int index)
internal sbyte GetSByte(SQLiteStatement stmt, int index)
internal byte GetByte(SQLiteStatement stmt, int index)
internal short GetInt16(SQLiteStatement stmt, int index)
internal ushort GetUInt16(SQLiteStatement stmt, int index)
internal int GetInt32(SQLiteStatement stmt, int index)
internal UInt32 GetUInt32(SQLiteStatement stmt, int index)
internal long GetInt64(SQLiteStatement stmt, int index)
internal ulong GetUInt64(SQLiteStatement stmt, int index)
internal string GetText(SQLiteStatement stmt, int index)
internal DateTime GetDateTime(SQLiteStatement stmt, int index)
internal long GetBytes(SQLiteStatement stmt, int index, int nDataOffset, Byte[] bDest, int nStart, int nLength)
internal long GetChars(SQLiteStatement stmt, int index, int nDataOffset, Char[] bDest, int nStart, int nLength)
internal bool IsNull(SQLiteStatement stmt, int index)
internal int AggregateCount(IntPtr context)
internal void CreateFunction(string strFunction, int nArgs, bool needCollSeq, SQLiteCallback func, SQLiteCallback funcstep, SQLiteFinalCallback funcfinal)
internal void CreateCollation(string strCollation, SQLiteCollation func, SQLiteCollation func16)
internal int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, string s1, string s2)
internal int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, Char[] c1, Char[] c2)
internal CollationSequence GetCollationSequence(SQLiteFunction func, IntPtr context)
internal long GetParamValueBytes(IntPtr p, int nDataOffset, Byte[] bDest, int nStart, int nLength)
internal double GetParamValueDouble(IntPtr ptr)
internal int GetParamValueInt32(IntPtr ptr)
internal long GetParamValueInt64(IntPtr ptr)
internal string GetParamValueText(IntPtr ptr)
internal TypeAffinity GetParamValueType(IntPtr ptr)
internal void ReturnBlob(IntPtr context, Byte[] value)
internal void ReturnDouble(IntPtr context, double value)
internal void ReturnError(IntPtr context, string value)
internal void ReturnInt32(IntPtr context, int value)
internal void ReturnInt64(IntPtr context, long value)
internal void ReturnNull(IntPtr context)
internal void ReturnText(IntPtr context, string value)
internal void CreateModule(SQLiteModule module, SQLiteConnectionFlags flags)
internal void DisposeModule(SQLiteModule module, SQLiteConnectionFlags flags)
internal IntPtr AggregateContext(IntPtr context)
internal SQLiteErrorCode DeclareVirtualTable(SQLiteModule module, string strSql, String& error)
internal SQLiteErrorCode DeclareVirtualFunction(SQLiteModule module, int argumentCount, string name, String& error)
internal void SetLoadExtension(bool bOnOff)
internal void LoadExtension(string fileName, string procName)
internal void SetExtendedResultCodes(bool bOnOff)
internal SQLiteErrorCode ResultCode()
internal SQLiteErrorCode ExtendedResultCode()
internal void LogMessage(SQLiteErrorCode iErrCode, string zMessage)
internal void StaticLogMessage(SQLiteErrorCode iErrCode, string zMessage)
internal void SetPassword(Byte[] passwordBytes)
internal void ChangePassword(Byte[] newPasswordBytes)
internal void SetAuthorizerHook(SQLiteAuthorizerCallback func)
internal void SetUpdateHook(SQLiteUpdateCallback func)
internal void SetCommitHook(SQLiteCommitCallback func)
internal void SetTraceCallback(SQLiteTraceCallback func)
internal void SetRollbackHook(SQLiteRollbackCallback func)
internal SQLiteErrorCode SetLogCallback(SQLiteLogCallback func)
internal SQLiteBackup InitializeBackup(SQLiteConnection destCnn, string destName, string sourceName)
internal bool StepBackup(SQLiteBackup backup, int nPage, Boolean& retry)
internal int RemainingBackup(SQLiteBackup backup)
internal int PageCountBackup(SQLiteBackup backup)
internal void FinishBackup(SQLiteBackup backup)
internal bool IsInitialized()
internal bool StaticIsInitialized()
internal object GetValue(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, SQLiteType typ)
internal int GetCursorForTable(SQLiteStatement stmt, int db, int rootPage)
internal long GetRowIdForCursor(SQLiteStatement stmt, int cursor)
internal void GetIndexColumnExtendedInfo(string database, string index, string column, Int32& sortMode, Int32& onError, String& collationSequence)
internal SQLiteErrorCode FileControl(string zDbName, int op, IntPtr pArg)
}
internal System.Data.SQLite.SQLite3_UTF16 : SQLite3 {
private bool disposed
internal void .ctor(SQLiteDateFormats fmt, DateTimeKind kind, string fmtString, IntPtr db, string fileName, bool ownHandle)
private void CheckDisposed()
protected void Dispose(bool disposing)
public string ToString(IntPtr b, int nbytelen)
public string UTF16ToString(IntPtr b, int nbytelen)
internal void Open(string strFilename, SQLiteConnectionFlags connectionFlags, SQLiteOpenFlagsEnum openFlags, int maxPoolSize, bool usePool)
internal void Bind_DateTime(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, DateTime dt)
internal void Bind_Text(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, string value)
internal DateTime GetDateTime(SQLiteStatement stmt, int index)
internal string ColumnName(SQLiteStatement stmt, int index)
internal string GetText(SQLiteStatement stmt, int index)
internal string ColumnOriginalName(SQLiteStatement stmt, int index)
internal string ColumnDatabaseName(SQLiteStatement stmt, int index)
internal string ColumnTableName(SQLiteStatement stmt, int index)
internal string GetParamValueText(IntPtr ptr)
internal void ReturnError(IntPtr context, string value)
internal void ReturnText(IntPtr context, string value)
}
public System.Data.SQLite.SQLiteAuthorizerActionCode : Enum {
public int value__
public SQLiteAuthorizerActionCode None
public SQLiteAuthorizerActionCode Copy
public SQLiteAuthorizerActionCode CreateIndex
public SQLiteAuthorizerActionCode CreateTable
public SQLiteAuthorizerActionCode CreateTempIndex
public SQLiteAuthorizerActionCode CreateTempTable
public SQLiteAuthorizerActionCode CreateTempTrigger
public SQLiteAuthorizerActionCode CreateTempView
public SQLiteAuthorizerActionCode CreateTrigger
public SQLiteAuthorizerActionCode CreateView
public SQLiteAuthorizerActionCode Delete
public SQLiteAuthorizerActionCode DropIndex
public SQLiteAuthorizerActionCode DropTable
public SQLiteAuthorizerActionCode DropTempIndex
public SQLiteAuthorizerActionCode DropTempTable
public SQLiteAuthorizerActionCode DropTempTrigger
public SQLiteAuthorizerActionCode DropTempView
public SQLiteAuthorizerActionCode DropTrigger
public SQLiteAuthorizerActionCode DropView
public SQLiteAuthorizerActionCode Insert
public SQLiteAuthorizerActionCode Pragma
public SQLiteAuthorizerActionCode Read
public SQLiteAuthorizerActionCode Select
public SQLiteAuthorizerActionCode Transaction
public SQLiteAuthorizerActionCode Update
public SQLiteAuthorizerActionCode Attach
public SQLiteAuthorizerActionCode Detach
public SQLiteAuthorizerActionCode AlterTable
public SQLiteAuthorizerActionCode Reindex
public SQLiteAuthorizerActionCode Analyze
public SQLiteAuthorizerActionCode CreateVtable
public SQLiteAuthorizerActionCode DropVtable
public SQLiteAuthorizerActionCode Function
public SQLiteAuthorizerActionCode Savepoint
public SQLiteAuthorizerActionCode Recursive
}
internal System.Data.SQLite.SQLiteAuthorizerCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public SQLiteAuthorizerReturnCode Invoke(IntPtr pUserData, SQLiteAuthorizerActionCode actionCode, IntPtr pArgument1, IntPtr pArgument2, IntPtr pDatabase, IntPtr pAuthContext)
public IAsyncResult BeginInvoke(IntPtr pUserData, SQLiteAuthorizerActionCode actionCode, IntPtr pArgument1, IntPtr pArgument2, IntPtr pDatabase, IntPtr pAuthContext, AsyncCallback callback, object object)
public SQLiteAuthorizerReturnCode EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteAuthorizerEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, AuthorizerEventArgs e)
public IAsyncResult BeginInvoke(object sender, AuthorizerEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteAuthorizerReturnCode : Enum {
public int value__
public SQLiteAuthorizerReturnCode Ok
public SQLiteAuthorizerReturnCode Deny
public SQLiteAuthorizerReturnCode Ignore
}
internal System.Data.SQLite.SQLiteBackup : object {
internal SQLiteBase _sql
internal SQLiteBackupHandle _sqlite_backup
internal IntPtr _destDb
internal Byte[] _zDestName
internal IntPtr _sourceDb
internal Byte[] _zSourceName
internal SQLiteErrorCode _stepResult
private bool disposed
internal void .ctor(SQLiteBase sqlbase, SQLiteBackupHandle backup, IntPtr destDb, Byte[] zDestName, IntPtr sourceDb, Byte[] zSourceName)
public void Dispose()
private void CheckDisposed()
private void Dispose(bool disposing)
protected void Finalize()
}
public System.Data.SQLite.SQLiteBackupCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(SQLiteConnection source, string sourceName, SQLiteConnection destination, string destinationName, int pages, int remainingPages, int totalPages, bool retry)
public IAsyncResult BeginInvoke(SQLiteConnection source, string sourceName, SQLiteConnection destination, string destinationName, int pages, int remainingPages, int totalPages, bool retry, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
internal System.Data.SQLite.SQLiteBackupHandle : CriticalHandle {
private SQLiteConnectionHandle cnn
public bool IsInvalid
public IntPtr op_Implicit(SQLiteBackupHandle backup)
internal void .ctor(SQLiteConnectionHandle cnn, IntPtr backup)
protected bool ReleaseHandle()
public bool get_IsInvalid()
}
internal System.Data.SQLite.SQLiteBase : SQLiteConvert {
internal int COR_E_EXCEPTION
private bool disposed
private String[] _errorMessages
internal string Version
internal int VersionNumber
internal long LastInsertRowId
internal int Changes
internal long MemoryUsed
internal long MemoryHighwater
internal bool OwnHandle
internal bool AutoCommit
internal void .ctor(SQLiteDateFormats fmt, DateTimeKind kind, string fmtString)
internal string get_Version()
internal int get_VersionNumber()
internal long get_LastInsertRowId()
internal int get_Changes()
internal long get_MemoryUsed()
internal long get_MemoryHighwater()
internal bool get_OwnHandle()
internal SQLiteErrorCode SetMemoryStatus(bool value)
internal SQLiteErrorCode ReleaseMemory()
internal SQLiteErrorCode Shutdown()
internal bool IsOpen()
internal void Open(string strFilename, SQLiteConnectionFlags connectionFlags, SQLiteOpenFlagsEnum openFlags, int maxPoolSize, bool usePool)
internal void Close(bool canThrow)
internal void SetTimeout(int nTimeoutMS)
internal string GetLastError()
internal string GetLastError(string defValue)
internal void ClearPool()
internal int CountPool()
internal SQLiteStatement Prepare(SQLiteConnection cnn, string strSql, SQLiteStatement previous, UInt32 timeoutMS, String& strRemain)
internal bool Step(SQLiteStatement stmt)
internal bool IsReadOnly(SQLiteStatement stmt)
internal SQLiteErrorCode Reset(SQLiteStatement stmt)
internal void Cancel()
internal void BindFunction(SQLiteFunctionAttribute functionAttribute, SQLiteFunction function, SQLiteConnectionFlags flags)
internal void Bind_Double(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, double value)
internal void Bind_Int32(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, int value)
internal void Bind_UInt32(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, UInt32 value)
internal void Bind_Int64(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, long value)
internal void Bind_UInt64(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, ulong value)
internal void Bind_Text(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, string value)
internal void Bind_Blob(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, Byte[] blobData)
internal void Bind_DateTime(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, DateTime dt)
internal void Bind_Null(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index)
internal int Bind_ParamCount(SQLiteStatement stmt, SQLiteConnectionFlags flags)
internal string Bind_ParamName(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index)
internal int Bind_ParamIndex(SQLiteStatement stmt, SQLiteConnectionFlags flags, string paramName)
internal int ColumnCount(SQLiteStatement stmt)
internal string ColumnName(SQLiteStatement stmt, int index)
internal TypeAffinity ColumnAffinity(SQLiteStatement stmt, int index)
internal string ColumnType(SQLiteStatement stmt, int index, TypeAffinity& nAffinity)
internal int ColumnIndex(SQLiteStatement stmt, string columnName)
internal string ColumnOriginalName(SQLiteStatement stmt, int index)
internal string ColumnDatabaseName(SQLiteStatement stmt, int index)
internal string ColumnTableName(SQLiteStatement stmt, int index)
internal void ColumnMetaData(string dataBase, string table, string column, String& dataType, String& collateSequence, Boolean& notNull, Boolean& primaryKey, Boolean& autoIncrement)
internal void GetIndexColumnExtendedInfo(string database, string index, string column, Int32& sortMode, Int32& onError, String& collationSequence)
internal double GetDouble(SQLiteStatement stmt, int index)
internal sbyte GetSByte(SQLiteStatement stmt, int index)
internal byte GetByte(SQLiteStatement stmt, int index)
internal short GetInt16(SQLiteStatement stmt, int index)
internal ushort GetUInt16(SQLiteStatement stmt, int index)
internal int GetInt32(SQLiteStatement stmt, int index)
internal UInt32 GetUInt32(SQLiteStatement stmt, int index)
internal long GetInt64(SQLiteStatement stmt, int index)
internal ulong GetUInt64(SQLiteStatement stmt, int index)
internal string GetText(SQLiteStatement stmt, int index)
internal long GetBytes(SQLiteStatement stmt, int index, int nDataoffset, Byte[] bDest, int nStart, int nLength)
internal long GetChars(SQLiteStatement stmt, int index, int nDataoffset, Char[] bDest, int nStart, int nLength)
internal DateTime GetDateTime(SQLiteStatement stmt, int index)
internal bool IsNull(SQLiteStatement stmt, int index)
internal void CreateCollation(string strCollation, SQLiteCollation func, SQLiteCollation func16)
internal void CreateFunction(string strFunction, int nArgs, bool needCollSeq, SQLiteCallback func, SQLiteCallback funcstep, SQLiteFinalCallback funcfinal)
internal CollationSequence GetCollationSequence(SQLiteFunction func, IntPtr context)
internal int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, string s1, string s2)
internal int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, Char[] c1, Char[] c2)
internal int AggregateCount(IntPtr context)
internal IntPtr AggregateContext(IntPtr context)
internal long GetParamValueBytes(IntPtr ptr, int nDataOffset, Byte[] bDest, int nStart, int nLength)
internal double GetParamValueDouble(IntPtr ptr)
internal int GetParamValueInt32(IntPtr ptr)
internal long GetParamValueInt64(IntPtr ptr)
internal string GetParamValueText(IntPtr ptr)
internal TypeAffinity GetParamValueType(IntPtr ptr)
internal void ReturnBlob(IntPtr context, Byte[] value)
internal void ReturnDouble(IntPtr context, double value)
internal void ReturnError(IntPtr context, string value)
internal void ReturnInt32(IntPtr context, int value)
internal void ReturnInt64(IntPtr context, long value)
internal void ReturnNull(IntPtr context)
internal void ReturnText(IntPtr context, string value)
internal void CreateModule(SQLiteModule module, SQLiteConnectionFlags flags)
internal void DisposeModule(SQLiteModule module, SQLiteConnectionFlags flags)
internal SQLiteErrorCode DeclareVirtualTable(SQLiteModule module, string strSql, String& error)
internal SQLiteErrorCode DeclareVirtualFunction(SQLiteModule module, int argumentCount, string name, String& error)
internal void SetLoadExtension(bool bOnOff)
internal void LoadExtension(string fileName, string procName)
internal void SetExtendedResultCodes(bool bOnOff)
internal SQLiteErrorCode ResultCode()
internal SQLiteErrorCode ExtendedResultCode()
internal void LogMessage(SQLiteErrorCode iErrCode, string zMessage)
internal void SetPassword(Byte[] passwordBytes)
internal void ChangePassword(Byte[] newPasswordBytes)
internal void SetAuthorizerHook(SQLiteAuthorizerCallback func)
internal void SetUpdateHook(SQLiteUpdateCallback func)
internal void SetCommitHook(SQLiteCommitCallback func)
internal void SetTraceCallback(SQLiteTraceCallback func)
internal void SetRollbackHook(SQLiteRollbackCallback func)
internal SQLiteErrorCode SetLogCallback(SQLiteLogCallback func)
internal bool IsInitialized()
internal int GetCursorForTable(SQLiteStatement stmt, int database, int rootPage)
internal long GetRowIdForCursor(SQLiteStatement stmt, int cursor)
internal object GetValue(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, SQLiteType typ)
internal bool get_AutoCommit()
internal SQLiteErrorCode FileControl(string zDbName, int op, IntPtr pArg)
internal SQLiteBackup InitializeBackup(SQLiteConnection destCnn, string destName, string sourceName)
internal bool StepBackup(SQLiteBackup backup, int nPage, Boolean& retry)
internal int RemainingBackup(SQLiteBackup backup)
internal int PageCountBackup(SQLiteBackup backup)
internal void FinishBackup(SQLiteBackup backup)
public void Dispose()
private void CheckDisposed()
protected void Dispose(bool disposing)
protected void Finalize()
protected string FallbackGetErrorString(SQLiteErrorCode rc)
internal string GetLastError(SQLiteConnectionHandle hdl, IntPtr db)
internal void FinishBackup(SQLiteConnectionHandle hdl, IntPtr backup)
internal void FinalizeStatement(SQLiteConnectionHandle hdl, IntPtr stmt)
internal void CloseConnection(SQLiteConnectionHandle hdl, IntPtr db)
internal void CloseConnectionV2(SQLiteConnectionHandle hdl, IntPtr db)
internal bool ResetConnection(SQLiteConnectionHandle hdl, IntPtr db, bool canThrow)
internal bool IsAutocommit(SQLiteConnectionHandle hdl, IntPtr db)
}
internal System.Data.SQLite.SQLiteBytes : object {
public Byte[] FromIntPtr(IntPtr pValue, int length)
public IntPtr ToIntPtr(Byte[] value)
}
public System.Data.SQLite.SQLiteCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr context, int argc, IntPtr argv)
public IAsyncResult BeginInvoke(IntPtr context, int argc, IntPtr argv, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.SQLite.SQLiteCollation : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public int Invoke(IntPtr puser, int len1, IntPtr pv1, int len2, IntPtr pv2)
public IAsyncResult BeginInvoke(IntPtr puser, int len1, IntPtr pv1, int len2, IntPtr pv2, AsyncCallback callback, object object)
public int EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteCommand : DbCommand {
private string DefaultConnectionString
private string _commandText
private SQLiteConnection _cnn
private int _version
private WeakReference _activeReader
internal int _commandTimeout
private bool _designTimeVisible
private UpdateRowSource _updateRowSource
private SQLiteParameterCollection _parameterCollection
internal List`1<SQLiteStatement> _statementList
internal string _remainingText
private SQLiteTransaction _transaction
private bool disposed
public string CommandText
public int CommandTimeout
public CommandType CommandType
public SQLiteConnection Connection
protected DbConnection DbConnection
public SQLiteParameterCollection Parameters
protected DbParameterCollection DbParameterCollection
public SQLiteTransaction Transaction
protected DbTransaction DbTransaction
public UpdateRowSource UpdatedRowSource
public bool DesignTimeVisible
public void .ctor(string commandText)
public void .ctor(string commandText, SQLiteConnection connection)
public void .ctor(SQLiteConnection connection)
private void .ctor(SQLiteCommand source)
public void .ctor(string commandText, SQLiteConnection connection, SQLiteTransaction transaction)
internal void Check(SQLiteCommand command)
private void CheckDisposed()
protected void Dispose(bool disposing)
internal SQLiteConnectionFlags GetFlags(SQLiteCommand command)
private void DisposeStatements()
internal void ClearCommands()
internal SQLiteStatement BuildNextCommand()
internal SQLiteStatement GetStatement(int index)
public void Cancel()
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
protected DbParameter CreateDbParameter()
public SQLiteParameter CreateParameter()
public SQLiteConnection get_Connection()
public void set_Connection(SQLiteConnection value)
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
public SQLiteParameterCollection get_Parameters()
protected DbParameterCollection get_DbParameterCollection()
public SQLiteTransaction get_Transaction()
public void set_Transaction(SQLiteTransaction value)
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
private void InitializeForReader()
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
public object Execute(string commandText, SQLiteExecuteType executeType, string connectionString, Object[] args)
public object Execute(string commandText, SQLiteExecuteType executeType, CommandBehavior commandBehavior, string connectionString, Object[] args)
public SQLiteDataReader ExecuteReader(CommandBehavior behavior)
public SQLiteDataReader ExecuteReader()
internal void ClearDataReader()
public int ExecuteNonQuery()
public int ExecuteNonQuery(CommandBehavior behavior)
public object ExecuteScalar()
public object ExecuteScalar(CommandBehavior behavior)
public void Prepare()
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
public object Clone()
}
public System.Data.SQLite.SQLiteCommandBuilder : DbCommandBuilder {
private bool disposed
public SQLiteDataAdapter DataAdapter
public CatalogLocation CatalogLocation
public string CatalogSeparator
public string QuotePrefix
public string QuoteSuffix
public string SchemaSeparator
public void .ctor(SQLiteDataAdapter adp)
private void CheckDisposed()
protected void Dispose(bool disposing)
protected void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause)
protected string GetParameterName(string parameterName)
protected string GetParameterName(int parameterOrdinal)
protected string GetParameterPlaceholder(int parameterOrdinal)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
private void RowUpdatingEventHandler(object sender, RowUpdatingEventArgs e)
public SQLiteDataAdapter get_DataAdapter()
public void set_DataAdapter(SQLiteDataAdapter value)
public SQLiteCommand GetDeleteCommand()
public SQLiteCommand GetDeleteCommand(bool useColumnsForParameterNames)
public SQLiteCommand GetUpdateCommand()
public SQLiteCommand GetUpdateCommand(bool useColumnsForParameterNames)
public SQLiteCommand GetInsertCommand()
public SQLiteCommand GetInsertCommand(bool useColumnsForParameterNames)
public CatalogLocation get_CatalogLocation()
public void set_CatalogLocation(CatalogLocation value)
public string get_CatalogSeparator()
public void set_CatalogSeparator(string value)
public string get_QuotePrefix()
public void set_QuotePrefix(string value)
public string get_QuoteSuffix()
public void set_QuoteSuffix(string value)
public string QuoteIdentifier(string unquotedIdentifier)
public string UnquoteIdentifier(string quotedIdentifier)
public string get_SchemaSeparator()
public void set_SchemaSeparator(string value)
protected DataTable GetSchemaTable(DbCommand sourceCommand)
private bool HasSchemaPrimaryKey(DataTable schema)
private void ResetIsUniqueSchemaColumn(DataTable schema)
}
internal System.Data.SQLite.SQLiteCommitCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public int Invoke(IntPtr puser)
public IAsyncResult BeginInvoke(IntPtr puser, AsyncCallback callback, object object)
public int EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteCommitHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, CommitEventArgs e)
public IAsyncResult BeginInvoke(object sender, CommitEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.SQLite.SQLiteConfigOpsEnum : Enum {
public int value__
public SQLiteConfigOpsEnum SQLITE_CONFIG_NONE
public SQLiteConfigOpsEnum SQLITE_CONFIG_SINGLETHREAD
public SQLiteConfigOpsEnum SQLITE_CONFIG_MULTITHREAD
public SQLiteConfigOpsEnum SQLITE_CONFIG_SERIALIZED
public SQLiteConfigOpsEnum SQLITE_CONFIG_MALLOC
public SQLiteConfigOpsEnum SQLITE_CONFIG_GETMALLOC
public SQLiteConfigOpsEnum SQLITE_CONFIG_SCRATCH
public SQLiteConfigOpsEnum SQLITE_CONFIG_PAGECACHE
public SQLiteConfigOpsEnum SQLITE_CONFIG_HEAP
public SQLiteConfigOpsEnum SQLITE_CONFIG_MEMSTATUS
public SQLiteConfigOpsEnum SQLITE_CONFIG_MUTEX
public SQLiteConfigOpsEnum SQLITE_CONFIG_GETMUTEX
public SQLiteConfigOpsEnum SQLITE_CONFIG_LOOKASIDE
public SQLiteConfigOpsEnum SQLITE_CONFIG_PCACHE
public SQLiteConfigOpsEnum SQLITE_CONFIG_GETPCACHE
public SQLiteConfigOpsEnum SQLITE_CONFIG_LOG
public SQLiteConfigOpsEnum SQLITE_CONFIG_URI
public SQLiteConfigOpsEnum SQLITE_CONFIG_PCACHE2
public SQLiteConfigOpsEnum SQLITE_CONFIG_GETPCACHE2
public SQLiteConfigOpsEnum SQLITE_CONFIG_COVERING_INDEX_SCAN
public SQLiteConfigOpsEnum SQLITE_CONFIG_SQLLOG
public SQLiteConfigOpsEnum SQLITE_CONFIG_MMAP_SIZE
public SQLiteConfigOpsEnum SQLITE_CONFIG_WIN32_HEAPSIZE
}
public System.Data.SQLite.SQLiteConnection : DbConnection {
internal DbType BadDbType
internal string DefaultBaseSchemaName
private string MemoryFileName
internal IsolationLevel DeferredIsolationLevel
internal IsolationLevel ImmediateIsolationLevel
private SQLiteConnectionFlags FallbackDefaultFlags
private SQLiteSynchronousEnum DefaultSynchronous
private SQLiteJournalModeEnum DefaultJournalMode
private IsolationLevel DefaultIsolationLevel
internal SQLiteDateFormats DefaultDateTimeFormat
internal DateTimeKind DefaultDateTimeKind
internal string DefaultDateTimeFormatString
private string DefaultDataSource
private string DefaultUri
private string DefaultFullUri
private string DefaultHexPassword
private string DefaultPassword
private int DefaultVersion
private int DefaultPageSize
private int DefaultMaxPageCount
private int DefaultCacheSize
private int DefaultMaxPoolSize
private int DefaultConnectionTimeout
private bool DefaultNoSharedFlags
private bool DefaultFailIfMissing
private bool DefaultReadOnly
internal bool DefaultBinaryGUID
private bool DefaultUseUTF16Encoding
private bool DefaultToFullPath
private bool DefaultPooling
private bool DefaultLegacyFormat
private bool DefaultForeignKeys
private bool DefaultEnlist
private bool DefaultSetDefaults
internal int DefaultPrepareRetries
private int SQLITE_FCNTL_CHUNK_SIZE
private int SQLITE_FCNTL_WIN32_AV_RETRY
private string _dataDirectory
private string _masterdb
private string _tempmasterdb
private Assembly _assembly
private object _syncRoot
private SQLiteConnectionEventHandler _handlers
private SQLiteConnectionFlags _sharedFlags
private int _versionNumber
private ConnectionState _connectionState
private string _connectionString
internal int _transactionLevel
internal bool _noDispose
private bool _disposing
private IsolationLevel _defaultIsolation
internal SQLiteEnlistment _enlistment
internal SQLiteDbTypeMap _typeNames
internal SQLiteBase _sql
private string _dataSource
private Byte[] _password
internal string _baseSchemaName
private SQLiteConnectionFlags _flags
private Dictionary`2<string, object> _cachedSettings
private Nullable`1<DbType> _defaultDbType
private string _defaultTypeName
private int _defaultTimeout
internal int _prepareRetries
private bool _parseViaFramework
internal bool _binaryGuid
internal int _version
private SQLiteAuthorizerEventHandler _authorizerHandler
private SQLiteUpdateEventHandler _updateHandler
private SQLiteCommitHandler _commitHandler
private SQLiteTraceEventHandler _traceHandler
private EventHandler _rollbackHandler
private SQLiteAuthorizerCallback _authorizerCallback
private SQLiteUpdateCallback _updateCallback
private SQLiteCommitCallback _commitCallback
private SQLiteTraceCallback _traceCallback
private SQLiteRollbackCallback _rollbackCallback
private StateChangeEventHandler StateChange
private bool disposed
public ISQLiteConnectionPool ConnectionPool
public int PoolCount
public string ConnectionString
public string DataSource
public string Database
public int DefaultTimeout
public int PrepareRetries
public bool ParseViaFramework
public SQLiteConnectionFlags Flags
public Nullable`1<DbType> DefaultDbType
public string DefaultTypeName
public bool OwnHandle
public string ServerVersion
public long LastInsertRowId
public int Changes
public bool AutoCommit
public long MemoryUsed
public long MemoryHighwater
public string DefineConstants
public string SQLiteVersion
public string SQLiteSourceId
public string SQLiteCompileOptions
public string InteropVersion
public string InteropSourceId
public string InteropCompileOptions
public string ProviderVersion
public string ProviderSourceId
public SQLiteConnectionFlags DefaultFlags
public SQLiteConnectionFlags SharedFlags
public ConnectionState State
protected DbProviderFactory DbProviderFactory
private void add__handlers(SQLiteConnectionEventHandler value)
private void remove__handlers(SQLiteConnectionEventHandler value)
private void add__authorizerHandler(SQLiteAuthorizerEventHandler value)
private void remove__authorizerHandler(SQLiteAuthorizerEventHandler value)
private void add__updateHandler(SQLiteUpdateEventHandler value)
private void remove__updateHandler(SQLiteUpdateEventHandler value)
private void add__commitHandler(SQLiteCommitHandler value)
private void remove__commitHandler(SQLiteCommitHandler value)
private void add__traceHandler(SQLiteTraceEventHandler value)
private void remove__traceHandler(SQLiteTraceEventHandler value)
private void add__rollbackHandler(EventHandler value)
private void remove__rollbackHandler(EventHandler value)
public void add_StateChange(StateChangeEventHandler value)
public void remove_StateChange(StateChangeEventHandler value)
public void .ctor(string connectionString)
internal void .ctor(IntPtr db, string fileName, bool ownHandle)
public void .ctor(string connectionString, bool parseViaFramework)
public void .ctor(SQLiteConnection connection)
internal void OnChanged(SQLiteConnection connection, ConnectionEventArgs e)
public void add_Changed(SQLiteConnectionEventHandler value)
public void remove_Changed(SQLiteConnectionEventHandler value)
public ISQLiteConnectionPool get_ConnectionPool()
public void set_ConnectionPool(ISQLiteConnectionPool value)
public object CreateHandle(IntPtr nativeHandle)
public void BackupDatabase(SQLiteConnection destination, string destinationName, string sourceName, int pages, SQLiteBackupCallback callback, int retryMilliseconds)
public int ClearCachedSettings()
internal bool TryGetCachedSetting(string name, string default, Object& value)
internal void SetCachedSetting(string name, object value)
public int ClearTypeMappings()
public Dictionary`2<string, object> GetTypeMappings()
public int AddTypeMapping(string typeName, DbType dataType, bool primary)
public void BindFunction(SQLiteFunctionAttribute functionAttribute, SQLiteFunction function)
internal void Check(SQLiteConnection connection)
internal SortedList`2<string, string> ParseConnectionString(string connectionString, bool parseViaFramework, bool allowNameOnly)
private void SetupSQLiteBase(SortedList`2<string, string> opts)
public void Dispose()
private void CheckDisposed()
protected void Dispose(bool disposing)
public object Clone()
public void CreateFile(string databaseFileName)
internal void OnStateChange(ConnectionState newState, StateChangeEventArgs& eventArgs)
private IsolationLevel GetFallbackDefaultIsolationLevel()
internal IsolationLevel GetDefaultIsolationLevel()
public SQLiteTransaction BeginTransaction(IsolationLevel isolationLevel, bool deferredLock)
public SQLiteTransaction BeginTransaction(bool deferredLock)
public SQLiteTransaction BeginTransaction(IsolationLevel isolationLevel)
public SQLiteTransaction BeginTransaction()
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
public void ChangeDatabase(string databaseName)
public void Close()
public int get_PoolCount()
public void ClearPool(SQLiteConnection connection)
public void ClearAllPools()
public string get_ConnectionString()
public void set_ConnectionString(string value)
public SQLiteCommand CreateCommand()
protected DbCommand CreateDbCommand()
public string get_DataSource()
public string get_Database()
internal string MapUriPath(string path)
private SortedList`2<string, string> ParseConnectionString(string connectionString, bool allowNameOnly)
private SortedList`2<string, string> ParseConnectionStringViaFramework(string connectionString, bool strict)
public void EnlistTransaction(Transaction transaction)
internal string FindKey(SortedList`2<string, string> items, string key, string defValue)
internal object TryParseEnum(Type type, string value, bool ignoreCase)
private bool TryParseByte(string value, NumberStyles style, Byte& result)
public void EnableExtensions(bool enable)
public void LoadExtension(string fileName)
public void LoadExtension(string fileName, string procName)
public void CreateModule(SQLiteModule module)
internal Byte[] FromHexString(string text)
internal string ToHexString(Byte[] array)
private Byte[] FromHexString(string text, String& error)
private bool GetDefaultPooling()
private IsolationLevel GetEffectiveIsolationLevel(IsolationLevel isolationLevel)
public void Open()
public SQLiteConnection OpenAndReturn()
public int get_DefaultTimeout()
public void set_DefaultTimeout(int value)
public int get_PrepareRetries()
public void set_PrepareRetries(int value)
public bool get_ParseViaFramework()
public void set_ParseViaFramework(bool value)
public SQLiteConnectionFlags get_Flags()
public void set_Flags(SQLiteConnectionFlags value)
public Nullable`1<DbType> get_DefaultDbType()
public void set_DefaultDbType(Nullable`1<DbType> value)
public string get_DefaultTypeName()
public void set_DefaultTypeName(string value)
public bool get_OwnHandle()
public string get_ServerVersion()
public long get_LastInsertRowId()
public void Cancel()
public int get_Changes()
public bool get_AutoCommit()
public long get_MemoryUsed()
public long get_MemoryHighwater()
public void GetMemoryStatistics(IDictionary`2& statistics)
public void ReleaseMemory()
public SQLiteErrorCode ReleaseMemory(int nBytes, bool reset, bool compact, Int32& nFree, Boolean& resetOk, UInt32& nLargest)
public SQLiteErrorCode SetMemoryStatus(bool value)
public string get_DefineConstants()
public string get_SQLiteVersion()
public string get_SQLiteSourceId()
public string get_SQLiteCompileOptions()
public string get_InteropVersion()
public string get_InteropSourceId()
public string get_InteropCompileOptions()
public string get_ProviderVersion()
public string get_ProviderSourceId()
public SQLiteConnectionFlags get_DefaultFlags()
public SQLiteConnectionFlags get_SharedFlags()
public void set_SharedFlags(SQLiteConnectionFlags value)
public ConnectionState get_State()
public SQLiteErrorCode Shutdown()
public void Shutdown(bool directories, bool noThrow)
public void SetExtendedResultCodes(bool bOnOff)
public SQLiteErrorCode ResultCode()
public SQLiteErrorCode ExtendedResultCode()
public void LogMessage(SQLiteErrorCode iErrCode, string zMessage)
public void LogMessage(int iErrCode, string zMessage)
public void ChangePassword(string newPassword)
public void ChangePassword(Byte[] newPassword)
public void SetPassword(string databasePassword)
public void SetPassword(Byte[] databasePassword)
public SQLiteErrorCode SetAvRetry(Int32& count, Int32& interval)
public SQLiteErrorCode SetChunkSize(int size)
private string UnwrapString(string value)
private string ExpandFileName(string sourceFile, bool toFullPath)
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
private DataTable Schema_ReservedWords()
private DataTable Schema_MetaDataCollections()
private DataTable Schema_DataSourceInformation()
private DataTable Schema_Columns(string strCatalog, string strTable, string strColumn)
private DataTable Schema_Indexes(string strCatalog, string strTable, string strIndex)
private DataTable Schema_Triggers(string catalog, string table, string triggerName)
private DataTable Schema_Tables(string strCatalog, string strTable, string strType)
private DataTable Schema_Views(string strCatalog, string strView)
private DataTable Schema_Catalogs(string strCatalog)
private DataTable Schema_DataTypes()
private DataTable Schema_IndexColumns(string strCatalog, string strTable, string strIndex, string strColumn)
private DataTable Schema_ViewColumns(string strCatalog, string strView, string strColumn)
private DataTable Schema_ForeignKeys(string strCatalog, string strTable, string strKeyName)
public void add_Authorize(SQLiteAuthorizerEventHandler value)
public void remove_Authorize(SQLiteAuthorizerEventHandler value)
public void add_Update(SQLiteUpdateEventHandler value)
public void remove_Update(SQLiteUpdateEventHandler value)
private SQLiteAuthorizerReturnCode AuthorizerCallback(IntPtr pUserData, SQLiteAuthorizerActionCode actionCode, IntPtr pArgument1, IntPtr pArgument2, IntPtr pDatabase, IntPtr pAuthContext)
private void UpdateCallback(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid)
public void add_Commit(SQLiteCommitHandler value)
public void remove_Commit(SQLiteCommitHandler value)
public void add_Trace(SQLiteTraceEventHandler value)
public void remove_Trace(SQLiteTraceEventHandler value)
private void TraceCallback(IntPtr puser, IntPtr statement)
public void add_RollBack(EventHandler value)
public void remove_RollBack(EventHandler value)
private int CommitCallback(IntPtr parg)
private void RollbackCallback(IntPtr parg)
protected DbProviderFactory get_DbProviderFactory()
}
public System.Data.SQLite.SQLiteConnectionEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ConnectionEventArgs e)
public IAsyncResult BeginInvoke(object sender, ConnectionEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteConnectionEventType : Enum {
public int value__
public SQLiteConnectionEventType Invalid
public SQLiteConnectionEventType Unknown
public SQLiteConnectionEventType Opening
public SQLiteConnectionEventType ConnectionString
public SQLiteConnectionEventType Opened
public SQLiteConnectionEventType ChangeDatabase
public SQLiteConnectionEventType NewTransaction
public SQLiteConnectionEventType EnlistTransaction
public SQLiteConnectionEventType NewCommand
public SQLiteConnectionEventType NewDataReader
public SQLiteConnectionEventType NewCriticalHandle
public SQLiteConnectionEventType Closing
public SQLiteConnectionEventType Closed
public SQLiteConnectionEventType DisposingCommand
public SQLiteConnectionEventType DisposingDataReader
public SQLiteConnectionEventType ClosingDataReader
}
public System.Data.SQLite.SQLiteConnectionFlags : Enum {
public int value__
public SQLiteConnectionFlags None
public SQLiteConnectionFlags LogPrepare
public SQLiteConnectionFlags LogPreBind
public SQLiteConnectionFlags LogBind
public SQLiteConnectionFlags LogCallbackException
public SQLiteConnectionFlags LogBackup
public SQLiteConnectionFlags NoExtensionFunctions
public SQLiteConnectionFlags BindUInt32AsInt64
public SQLiteConnectionFlags BindAllAsText
public SQLiteConnectionFlags GetAllAsText
public SQLiteConnectionFlags NoLoadExtension
public SQLiteConnectionFlags NoCreateModule
public SQLiteConnectionFlags NoBindFunctions
public SQLiteConnectionFlags NoLogModule
public SQLiteConnectionFlags LogModuleError
public SQLiteConnectionFlags LogModuleException
public SQLiteConnectionFlags TraceWarning
public SQLiteConnectionFlags ConvertInvariantText
public SQLiteConnectionFlags BindInvariantText
public SQLiteConnectionFlags NoConnectionPool
public SQLiteConnectionFlags UseConnectionPool
public SQLiteConnectionFlags UseConnectionTypes
public SQLiteConnectionFlags NoGlobalTypes
public SQLiteConnectionFlags StickyHasRows
public SQLiteConnectionFlags StrictEnlistment
public SQLiteConnectionFlags MapIsolationLevels
public SQLiteConnectionFlags DetectTextAffinity
public SQLiteConnectionFlags DetectStringType
public SQLiteConnectionFlags NoConvertSettings
public SQLiteConnectionFlags BindDateTimeWithKind
public SQLiteConnectionFlags BindAndGetAllAsText
public SQLiteConnectionFlags ConvertAndBindInvariantText
public SQLiteConnectionFlags BindAndGetAllAsInvariantText
public SQLiteConnectionFlags ConvertAndBindAndGetAllAsInvariantText
public SQLiteConnectionFlags LogAll
public SQLiteConnectionFlags Default
public SQLiteConnectionFlags DefaultAndLogAll
}
internal System.Data.SQLite.SQLiteConnectionHandle : CriticalHandle {
internal CloseConnectionCallback closeConnection
private bool ownHandle
public bool OwnHandle
public bool IsInvalid
public IntPtr op_Implicit(SQLiteConnectionHandle db)
internal void .ctor(IntPtr db, bool ownHandle)
private void .ctor(bool ownHandle)
protected bool ReleaseHandle()
public bool get_OwnHandle()
public bool get_IsInvalid()
}
internal System.Data.SQLite.SQLiteConnectionPool : object {
private object _syncRoot
private ISQLiteConnectionPool _connectionPool
private SortedList`2<string, PoolQueue> _queueList
private int _poolVersion
private int _poolOpened
private int _poolClosed
internal void GetCounts(string fileName, Dictionary`2& counts, Int32& openCount, Int32& closeCount, Int32& totalCount)
internal void ClearPool(string fileName)
internal void ClearAllPools()
internal void Add(string fileName, SQLiteConnectionHandle handle, int version)
internal SQLiteConnectionHandle Remove(string fileName, int maxPoolSize, Int32& version)
internal ISQLiteConnectionPool GetConnectionPool()
internal void SetConnectionPool(ISQLiteConnectionPool connectionPool)
private void ResizePool(PoolQueue queue, bool add)
}
public System.Data.SQLite.SQLiteConnectionStringBuilder : DbConnectionStringBuilder {
private Hashtable _properties
public int Version
public SynchronizationModes SyncMode
public bool UseUTF16Encoding
public bool Pooling
public bool BinaryGUID
public string DataSource
public string Uri
public string FullUri
public int DefaultTimeout
public int PrepareRetries
public bool Enlist
public bool FailIfMissing
public bool LegacyFormat
public bool ReadOnly
public string Password
public Byte[] HexPassword
public int PageSize
public int MaxPageCount
public int CacheSize
public SQLiteDateFormats DateTimeFormat
public DateTimeKind DateTimeKind
public string DateTimeFormatString
public string BaseSchemaName
public SQLiteJournalModeEnum JournalMode
public IsolationLevel DefaultIsolationLevel
public DbType DefaultDbType
public string DefaultTypeName
public bool ForeignKeys
public SQLiteConnectionFlags Flags
public bool SetDefaults
public bool ToFullPath
public bool NoSharedFlags
public void .ctor(string connectionString)
private void Initialize(string cnnString)
public int get_Version()
public void set_Version(int value)
public SynchronizationModes get_SyncMode()
public void set_SyncMode(SynchronizationModes value)
public bool get_UseUTF16Encoding()
public void set_UseUTF16Encoding(bool value)
public bool get_Pooling()
public void set_Pooling(bool value)
public bool get_BinaryGUID()
public void set_BinaryGUID(bool value)
public string get_DataSource()
public void set_DataSource(string value)
public string get_Uri()
public void set_Uri(string value)
public string get_FullUri()
public void set_FullUri(string value)
public int get_DefaultTimeout()
public void set_DefaultTimeout(int value)
public int get_PrepareRetries()
public void set_PrepareRetries(int value)
public bool get_Enlist()
public void set_Enlist(bool value)
public bool get_FailIfMissing()
public void set_FailIfMissing(bool value)
public bool get_LegacyFormat()
public void set_LegacyFormat(bool value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public string get_Password()
public void set_Password(string value)
public Byte[] get_HexPassword()
public void set_HexPassword(Byte[] value)
public int get_PageSize()
public void set_PageSize(int value)
public int get_MaxPageCount()
public void set_MaxPageCount(int value)
public int get_CacheSize()
public void set_CacheSize(int value)
public SQLiteDateFormats get_DateTimeFormat()
public void set_DateTimeFormat(SQLiteDateFormats value)
public DateTimeKind get_DateTimeKind()
public void set_DateTimeKind(DateTimeKind value)
public string get_DateTimeFormatString()
public void set_DateTimeFormatString(string value)
public string get_BaseSchemaName()
public void set_BaseSchemaName(string value)
public SQLiteJournalModeEnum get_JournalMode()
public void set_JournalMode(SQLiteJournalModeEnum value)
public IsolationLevel get_DefaultIsolationLevel()
public void set_DefaultIsolationLevel(IsolationLevel value)
public DbType get_DefaultDbType()
public void set_DefaultDbType(DbType value)
public string get_DefaultTypeName()
public void set_DefaultTypeName(string value)
public bool get_ForeignKeys()
public void set_ForeignKeys(bool value)
public SQLiteConnectionFlags get_Flags()
public void set_Flags(SQLiteConnectionFlags value)
public bool get_SetDefaults()
public void set_SetDefaults(bool value)
public bool get_ToFullPath()
public void set_ToFullPath(bool value)
public bool get_NoSharedFlags()
public void set_NoSharedFlags(bool value)
public bool TryGetValue(string keyword, Object& value)
private void FallbackGetProperties(Hashtable propertyList)
}
public System.Data.SQLite.SQLiteContext : object {
private IntPtr pContext
public IntPtr NativeHandle
internal void .ctor(IntPtr pContext)
public IntPtr get_NativeHandle()
public void SetNull()
public void SetDouble(double value)
public void SetInt(int value)
public void SetInt64(long value)
public void SetString(string value)
public void SetError(string value)
public void SetErrorCode(SQLiteErrorCode value)
public void SetErrorTooBig()
public void SetErrorNoMemory()
public void SetBlob(Byte[] value)
public void SetZeroBlob(int value)
public void SetValue(SQLiteValue value)
}
public System.Data.SQLite.SQLiteConvert : object {
private DbType FallbackDefaultDbType
private string FullFormat
private string FallbackDefaultTypeName
protected DateTime UnixEpoch
private double OleAutomationEpochAsJulianDay
private long MinimumJd
private long MaximumJd
private String[] _datetimeFormats
private string _datetimeFormatUtc
private string _datetimeFormatLocal
private Encoding _utf8
internal SQLiteDateFormats _datetimeFormat
internal DateTimeKind _datetimeKind
internal string _datetimeFormatString
private Type[] _affinitytotype
private DbType[] _typetodbtype
private Int32[] _dbtypetocolumnsize
private Object[] _dbtypetonumericprecision
private Object[] _dbtypetonumericscale
private Type[] _dbtypeToType
private TypeAffinity[] _typecodeAffinities
private object _syncRoot
private SQLiteDbTypeMap _typeNames
internal void .ctor(SQLiteDateFormats fmt, DateTimeKind kind, string fmtString)
public Byte[] ToUTF8(string sourceText)
public Byte[] ToUTF8(DateTime dateTimeValue)
public string ToString(IntPtr nativestring, int nativestringlen)
public string UTF8ToString(IntPtr nativestring, int nativestringlen)
private bool isValidJd(long jd)
private long DoubleToJd(double julianDay)
private double JdToDouble(long jd)
private DateTime computeYMD(long jd, Nullable`1<DateTime> badValue)
private DateTime computeHMS(long jd, Nullable`1<DateTime> badValue)
private long computeJD(DateTime dateTime)
public DateTime ToDateTime(string dateText)
public DateTime ToDateTime(string dateText, SQLiteDateFormats format, DateTimeKind kind, string formatString)
public DateTime ToDateTime(double julianDay)
public DateTime ToDateTime(double julianDay, DateTimeKind kind)
internal DateTime ToDateTime(int seconds, DateTimeKind kind)
internal DateTime ToDateTime(long ticks, DateTimeKind kind)
public double ToJulianDay(DateTime value)
public long ToUnixEpoch(DateTime value)
private string GetDateTimeKindFormat(DateTimeKind kind, string formatString)
public string ToString(DateTime dateValue)
public string ToString(DateTime dateValue, SQLiteDateFormats format, DateTimeKind kind, string formatString)
internal DateTime ToDateTime(IntPtr ptr, int len)
public String[] Split(string source, char separator)
internal String[] NewSplit(string value, char separator, bool keepQuote, String& error)
public string ToStringWithProvider(object obj, IFormatProvider provider)
internal bool ToBoolean(object obj, IFormatProvider provider, bool viaFramework)
public bool ToBoolean(object source)
public bool ToBoolean(string source)
internal Type SQLiteTypeToType(SQLiteType t)
internal DbType TypeToDbType(Type typ)
internal int DbTypeToColumnSize(DbType typ)
internal object DbTypeToNumericPrecision(DbType typ)
internal object DbTypeToNumericScale(DbType typ)
private string GetDefaultTypeName(SQLiteConnection connection)
private void DefaultTypeNameWarning(DbType dbType, SQLiteConnectionFlags flags, string typeName)
private void DefaultDbTypeWarning(string typeName, SQLiteConnectionFlags flags, Nullable`1<DbType> dbType)
internal string DbTypeToTypeName(SQLiteConnection connection, DbType dbType, SQLiteConnectionFlags flags)
internal Type DbTypeToType(DbType typ)
internal TypeAffinity TypeToAffinity(Type typ)
private SQLiteDbTypeMap GetSQLiteDbTypeMap()
internal bool IsStringDbType(DbType type)
private string SettingValueToString(object value)
private DbType GetDefaultDbType(SQLiteConnection connection)
internal bool LooksLikeNull(string text)
internal bool LooksLikeInt64(string text)
internal bool LooksLikeDouble(string text)
internal bool LooksLikeDateTime(SQLiteConvert convert, string text)
internal DbType TypeNameToDbType(SQLiteConnection connection, string typeName, SQLiteConnectionFlags flags)
}
public System.Data.SQLite.SQLiteDataAdapter : DbDataAdapter {
private bool disposeSelect
private object _updatingEventPH
private object _updatedEventPH
private bool disposed
public SQLiteCommand SelectCommand
public SQLiteCommand InsertCommand
public SQLiteCommand UpdateCommand
public SQLiteCommand DeleteCommand
public void .ctor(SQLiteCommand cmd)
public void .ctor(string commandText, SQLiteConnection connection)
public void .ctor(string commandText, string connectionString)
public void .ctor(string commandText, string connectionString, bool parseViaFramework)
private void CheckDisposed()
protected void Dispose(bool disposing)
public void add_RowUpdating(EventHandler`1<RowUpdatingEventArgs> value)
public void remove_RowUpdating(EventHandler`1<RowUpdatingEventArgs> value)
internal Delegate FindBuilder(MulticastDelegate mcd)
public void add_RowUpdated(EventHandler`1<RowUpdatedEventArgs> value)
public void remove_RowUpdated(EventHandler`1<RowUpdatedEventArgs> value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
protected void OnRowUpdated(RowUpdatedEventArgs value)
public SQLiteCommand get_SelectCommand()
public void set_SelectCommand(SQLiteCommand value)
public SQLiteCommand get_InsertCommand()
public void set_InsertCommand(SQLiteCommand value)
public SQLiteCommand get_UpdateCommand()
public void set_UpdateCommand(SQLiteCommand value)
public SQLiteCommand get_DeleteCommand()
public void set_DeleteCommand(SQLiteCommand value)
}
public System.Data.SQLite.SQLiteDataReader : DbDataReader {
private SQLiteCommand _command
private SQLiteConnectionFlags _flags
private int _activeStatementIndex
private SQLiteStatement _activeStatement
private int _readingState
private int _rowsAffected
private int _fieldCount
private int _stepCount
private Dictionary`2<string, int> _fieldIndexes
private SQLiteType[] _fieldTypeArray
private CommandBehavior _commandBehavior
internal bool _disposeCommand
internal bool _throwOnDisposed
private SQLiteKeyReader _keyInfo
internal int _version
private string _baseSchemaName
private bool disposed
public int Depth
public int FieldCount
public int StepCount
private int PrivateVisibleFieldCount
public int VisibleFieldCount
public bool HasRows
public bool IsClosed
public int RecordsAffected
public object Item
public object Item
internal void .ctor(SQLiteCommand cmd, CommandBehavior behave)
private void CheckDisposed()
protected void Dispose(bool disposing)
internal void Cancel()
public void Close()
private void CheckClosed()
private void CheckValidRow()
public IEnumerator GetEnumerator()
public int get_Depth()
public int get_FieldCount()
public void RefreshFlags()
public int get_StepCount()
private int get_PrivateVisibleFieldCount()
public int get_VisibleFieldCount()
private void VerifyForGet()
private TypeAffinity VerifyType(int i, DbType typ)
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length)
public char GetChar(int i)
public long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length)
public string GetDataTypeName(int i)
public DateTime GetDateTime(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public DataTable GetSchemaTable()
private void GetStatementColumnParents(SQLiteBase sql, SQLiteStatement stmt, int fieldCount, Dictionary`2& parentToColumns, Dictionary`2& columnToParent)
private int CountParents(Dictionary`2<ColumnParent, List`1<int>> parentToColumns)
internal DataTable GetSchemaTable(bool wantUniqueInfo, bool wantDefaultValue)
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public NameValueCollection GetValues()
public bool get_HasRows()
public bool get_IsClosed()
public bool IsDBNull(int i)
public bool NextResult()
private SQLiteConnection GetConnection(SQLiteDataReader dataReader)
private SQLiteType GetSQLiteType(SQLiteType oldType, string text)
private SQLiteType GetSQLiteType(SQLiteConnectionFlags flags, int i)
public bool Read()
public int get_RecordsAffected()
public object get_Item(string name)
public object get_Item(int i)
private void LoadKeyInfo()
}
public System.Data.SQLite.SQLiteDateFormats : Enum {
public int value__
public SQLiteDateFormats Ticks
public SQLiteDateFormats ISO8601
public SQLiteDateFormats JulianDay
public SQLiteDateFormats UnixEpoch
public SQLiteDateFormats InvariantCulture
public SQLiteDateFormats CurrentCulture
public SQLiteDateFormats Default
}
internal System.Data.SQLite.SQLiteDbTypeMap : Dictionary`2<string, SQLiteDbTypeMapping> {
private Dictionary`2<DbType, SQLiteDbTypeMapping> reverse
public void .ctor(IEnumerable`1<SQLiteDbTypeMapping> collection)
public int Clear()
public void Add(IEnumerable`1<SQLiteDbTypeMapping> collection)
public void Add(SQLiteDbTypeMapping item)
public bool ContainsKey(DbType key)
public bool TryGetValue(DbType key, SQLiteDbTypeMapping& value)
public bool Remove(DbType key)
}
internal System.Data.SQLite.SQLiteDbTypeMapping : object {
internal string typeName
internal DbType dataType
internal bool primary
internal void .ctor(string newTypeName, DbType newDataType, bool newPrimary)
}
internal System.Data.SQLite.SQLiteDefineConstants : object {
public IList`1<string> OptionList
}
internal System.Data.SQLite.SQLiteEnlistment : object {
internal SQLiteTransaction _transaction
internal Transaction _scope
internal bool _disposeConnection
private bool disposed
internal void .ctor(SQLiteConnection cnn, Transaction scope, IsolationLevel defaultIsolationLevel, bool throwOnUnavailable, bool throwOnUnsupported)
private IsolationLevel GetSystemDataIsolationLevel(SQLiteConnection connection, Transaction transaction, IsolationLevel defaultIsolationLevel, bool throwOnUnavailable, bool throwOnUnsupported)
private void Cleanup(SQLiteConnection cnn)
public void Dispose()
private void CheckDisposed()
private void Dispose(bool disposing)
protected void Finalize()
public void Commit(Enlistment enlistment)
public void InDoubt(Enlistment enlistment)
public void Prepare(PreparingEnlistment preparingEnlistment)
public void Rollback(Enlistment enlistment)
}
public System.Data.SQLite.SQLiteErrorCode : Enum {
public int value__
public SQLiteErrorCode Unknown
public SQLiteErrorCode Ok
public SQLiteErrorCode Error
public SQLiteErrorCode Internal
public SQLiteErrorCode Perm
public SQLiteErrorCode Abort
public SQLiteErrorCode Busy
public SQLiteErrorCode Locked
public SQLiteErrorCode NoMem
public SQLiteErrorCode ReadOnly
public SQLiteErrorCode Interrupt
public SQLiteErrorCode IoErr
public SQLiteErrorCode Corrupt
public SQLiteErrorCode NotFound
public SQLiteErrorCode Full
public SQLiteErrorCode CantOpen
public SQLiteErrorCode Protocol
public SQLiteErrorCode Empty
public SQLiteErrorCode Schema
public SQLiteErrorCode TooBig
public SQLiteErrorCode Constraint
public SQLiteErrorCode Mismatch
public SQLiteErrorCode Misuse
public SQLiteErrorCode NoLfs
public SQLiteErrorCode Auth
public SQLiteErrorCode Format
public SQLiteErrorCode Range
public SQLiteErrorCode NotADb
public SQLiteErrorCode Notice
public SQLiteErrorCode Warning
public SQLiteErrorCode Row
public SQLiteErrorCode Done
public SQLiteErrorCode NonExtendedMask
}
public System.Data.SQLite.SQLiteException : DbException {
private SQLiteErrorCode _errorCode
public SQLiteErrorCode ResultCode
public int ErrorCode
private void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(SQLiteErrorCode errorCode, string message)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public SQLiteErrorCode get_ResultCode()
public int get_ErrorCode()
private string GetErrorString(SQLiteErrorCode errorCode)
private string GetStockErrorMessage(SQLiteErrorCode errorCode, string message)
}
public System.Data.SQLite.SQLiteExecuteType : Enum {
public int value__
public SQLiteExecuteType None
public SQLiteExecuteType NonQuery
public SQLiteExecuteType Scalar
public SQLiteExecuteType Reader
public SQLiteExecuteType Default
}
public System.Data.SQLite.SQLiteFactory : DbProviderFactory {
private bool disposed
public SQLiteFactory Instance
private string DefaultTypeName
private BindingFlags DefaultBindingFlags
private Type _dbProviderServicesType
private object _sqliteServices
public void Dispose()
private void CheckDisposed()
private void Dispose(bool disposing)
protected void Finalize()
public void add_Log(SQLiteLogEventHandler value)
public void remove_Log(SQLiteLogEventHandler value)
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnection CreateConnection()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public DbDataAdapter CreateDataAdapter()
public DbParameter CreateParameter()
private object System.IServiceProvider.GetService(Type serviceType)
private object GetSQLiteProviderServicesInstance()
}
internal System.Data.SQLite.SQLiteFinalCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr context)
public IAsyncResult BeginInvoke(IntPtr context, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteFunction : object {
internal SQLiteBase _base
private Dictionary`2<IntPtr, AggregateData> _contextDataList
private SQLiteConnectionFlags _flags
private SQLiteCallback _InvokeFunc
private SQLiteCallback _StepFunc
private SQLiteFinalCallback _FinalFunc
private SQLiteCollation _CompareFunc
private SQLiteCollation _CompareFunc16
internal IntPtr _context
private List`1<SQLiteFunctionAttribute> _registeredFunctions
private bool disposed
public SQLiteConvert SQLiteConvert
protected void .ctor(SQLiteDateFormats format, DateTimeKind kind, string formatString, bool utf16)
public void Dispose()
private void CheckDisposed()
protected void Dispose(bool disposing)
protected void Finalize()
public SQLiteConvert get_SQLiteConvert()
public object Invoke(Object[] args)
public void Step(Object[] args, int stepNumber, Object& contextData)
public object Final(object contextData)
public int Compare(string param1, string param2)
internal Object[] ConvertParams(int nArgs, IntPtr argsptr)
private void SetReturnValue(IntPtr context, object returnValue)
internal void ScalarCallback(IntPtr context, int nArgs, IntPtr argsptr)
internal int CompareCallback(IntPtr ptr, int len1, IntPtr ptr1, int len2, IntPtr ptr2)
internal int CompareCallback16(IntPtr ptr, int len1, IntPtr ptr1, int len2, IntPtr ptr2)
internal void StepCallback(IntPtr context, int nArgs, IntPtr argsptr)
internal void FinalCallback(IntPtr context)
public void RegisterFunction(Type typ)
internal IEnumerable`1<SQLiteFunction> BindFunctions(SQLiteBase sqlbase, SQLiteConnectionFlags flags)
internal void BindFunction(SQLiteBase sqliteBase, SQLiteFunctionAttribute functionAttribute, SQLiteFunction function, SQLiteConnectionFlags flags)
}
public System.Data.SQLite.SQLiteFunctionAttribute : Attribute {
private string _name
private int _argumentCount
private FunctionType _functionType
private Type _instanceType
public string Name
public int Arguments
public FunctionType FuncType
internal Type InstanceType
public void .ctor(string name, int argumentCount, FunctionType functionType)
public string get_Name()
public void set_Name(string value)
public int get_Arguments()
public void set_Arguments(int value)
public FunctionType get_FuncType()
public void set_FuncType(FunctionType value)
internal Type get_InstanceType()
internal void set_InstanceType(Type value)
}
public System.Data.SQLite.SQLiteFunctionEx : SQLiteFunction {
private bool disposed
protected CollationSequence GetCollationSequence()
private void CheckDisposed()
protected void Dispose(bool disposing)
}
public System.Data.SQLite.SQLiteIndex : object {
private SQLiteIndexInputs inputs
private SQLiteIndexOutputs outputs
public SQLiteIndexInputs Inputs
public SQLiteIndexOutputs Outputs
internal void .ctor(int nConstraint, int nOrderBy)
internal void FromIntPtr(IntPtr pIndex, SQLiteIndex& index)
internal void ToIntPtr(SQLiteIndex index, IntPtr pIndex)
public SQLiteIndexInputs get_Inputs()
public SQLiteIndexOutputs get_Outputs()
}
public System.Data.SQLite.SQLiteIndexConstraint : object {
public int iColumn
public SQLiteIndexConstraintOp op
public byte usable
public int iTermOffset
internal void .ctor(sqlite3_index_constraint constraint)
private void .ctor(int iColumn, SQLiteIndexConstraintOp op, byte usable, int iTermOffset)
}
public System.Data.SQLite.SQLiteIndexConstraintOp : Enum {
public byte value__
public SQLiteIndexConstraintOp EqualTo
public SQLiteIndexConstraintOp GreaterThan
public SQLiteIndexConstraintOp LessThanOrEqualTo
public SQLiteIndexConstraintOp LessThan
public SQLiteIndexConstraintOp GreaterThanOrEqualTo
public SQLiteIndexConstraintOp Match
}
public System.Data.SQLite.SQLiteIndexConstraintUsage : object {
public int argvIndex
public byte omit
internal void .ctor(sqlite3_index_constraint_usage constraintUsage)
private void .ctor(int argvIndex, byte omit)
}
public System.Data.SQLite.SQLiteIndexInputs : object {
private SQLiteIndexConstraint[] constraints
private SQLiteIndexOrderBy[] orderBys
public SQLiteIndexConstraint[] Constraints
public SQLiteIndexOrderBy[] OrderBys
internal void .ctor(int nConstraint, int nOrderBy)
public SQLiteIndexConstraint[] get_Constraints()
public SQLiteIndexOrderBy[] get_OrderBys()
}
public System.Data.SQLite.SQLiteIndexOrderBy : object {
public int iColumn
public byte desc
internal void .ctor(sqlite3_index_orderby orderBy)
private void .ctor(int iColumn, byte desc)
}
public System.Data.SQLite.SQLiteIndexOutputs : object {
private SQLiteIndexConstraintUsage[] constraintUsages
private int indexNumber
private string indexString
private int needToFreeIndexString
private int orderByConsumed
private Nullable`1<double> estimatedCost
private Nullable`1<long> estimatedRows
public SQLiteIndexConstraintUsage[] ConstraintUsages
public int IndexNumber
public string IndexString
public int NeedToFreeIndexString
public int OrderByConsumed
public Nullable`1<double> EstimatedCost
public Nullable`1<long> EstimatedRows
internal void .ctor(int nConstraint)
public bool CanUseEstimatedRows()
public SQLiteIndexConstraintUsage[] get_ConstraintUsages()
public int get_IndexNumber()
public void set_IndexNumber(int value)
public string get_IndexString()
public void set_IndexString(string value)
public int get_NeedToFreeIndexString()
public void set_NeedToFreeIndexString(int value)
public int get_OrderByConsumed()
public void set_OrderByConsumed(int value)
public Nullable`1<double> get_EstimatedCost()
public void set_EstimatedCost(Nullable`1<double> value)
public Nullable`1<long> get_EstimatedRows()
public void set_EstimatedRows(Nullable`1<long> value)
}
public System.Data.SQLite.SQLiteJournalModeEnum : Enum {
public int value__
public SQLiteJournalModeEnum Default
public SQLiteJournalModeEnum Delete
public SQLiteJournalModeEnum Persist
public SQLiteJournalModeEnum Off
public SQLiteJournalModeEnum Truncate
public SQLiteJournalModeEnum Memory
public SQLiteJournalModeEnum Wal
}
internal System.Data.SQLite.SQLiteKeyReader : object {
private KeyInfo[] _keyInfo
private SQLiteStatement _stmt
private bool _isValid
private bool disposed
internal int Count
internal void .ctor(SQLiteConnection cnn, SQLiteDataReader reader, SQLiteStatement stmt)
public void Dispose()
private void CheckDisposed()
private void Dispose(bool disposing)
protected void Finalize()
internal int get_Count()
internal void Sync(int i)
internal void Sync()
internal void Reset()
internal string GetDataTypeName(int i)
internal Type GetFieldType(int i)
internal string GetName(int i)
internal int GetOrdinal(string name)
internal bool GetBoolean(int i)
internal byte GetByte(int i)
internal long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length)
internal char GetChar(int i)
internal long GetChars(int i, long fieldOffset, Char[] buffer, int bufferoffset, int length)
internal DateTime GetDateTime(int i)
internal decimal GetDecimal(int i)
internal double GetDouble(int i)
internal float GetFloat(int i)
internal Guid GetGuid(int i)
internal short GetInt16(int i)
internal int GetInt32(int i)
internal long GetInt64(int i)
internal string GetString(int i)
internal object GetValue(int i)
internal bool IsDBNull(int i)
internal void AppendSchemaTable(DataTable tbl)
}
public System.Data.SQLite.SQLiteLog : object {
private object syncRoot
private EventHandler _domainUnload
private SQLiteLogEventHandler _handlers
private SQLiteLogEventHandler _defaultHandler
private SQLiteLogCallback _callback
private SQLiteBase _sql
private bool _enabled
public bool Enabled
private void add__handlers(SQLiteLogEventHandler value)
private void remove__handlers(SQLiteLogEventHandler value)
public void Initialize()
private void DomainUnload(object sender, EventArgs e)
public void add_Log(SQLiteLogEventHandler value)
public void remove_Log(SQLiteLogEventHandler value)
public bool get_Enabled()
public void set_Enabled(bool value)
public void LogMessage(string message)
public void LogMessage(SQLiteErrorCode errorCode, string message)
public void LogMessage(int errorCode, string message)
private void LogMessage(object errorCode, string message)
private void InitializeDefaultHandler()
public void AddDefaultHandler()
public void RemoveDefaultHandler()
private void LogCallback(IntPtr pUserData, int errorCode, IntPtr pMessage)
private void LogEventHandler(object sender, LogEventArgs e)
}
internal System.Data.SQLite.SQLiteLogCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr pUserData, int errorCode, IntPtr pMessage)
public IAsyncResult BeginInvoke(IntPtr pUserData, int errorCode, IntPtr pMessage, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteLogEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LogEventArgs e)
public IAsyncResult BeginInvoke(object sender, LogEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.SQLite.SQLiteMarshal : object {
public IntPtr IntPtrForOffset(IntPtr pointer, int offset)
public int RoundUp(int size, int alignment)
public int NextOffsetOf(int offset, int size, int alignment)
public int ReadInt32(IntPtr pointer, int offset)
public double ReadDouble(IntPtr pointer, int offset)
public IntPtr ReadIntPtr(IntPtr pointer, int offset)
public void WriteInt32(IntPtr pointer, int offset, int value)
public void WriteInt64(IntPtr pointer, int offset, long value)
public void WriteDouble(IntPtr pointer, int offset, double value)
public void WriteIntPtr(IntPtr pointer, int offset, IntPtr value)
public int GetHashCode(object value, bool identity)
}
internal System.Data.SQLite.SQLiteMemory : object {
public IntPtr Allocate(int size)
public int Size(IntPtr pMemory)
public void Free(IntPtr pMemory)
}
public System.Data.SQLite.SQLiteMetaDataCollectionNames : object {
public string Catalogs
public string Columns
public string Indexes
public string IndexColumns
public string Tables
public string Views
public string ViewColumns
public string ForeignKeys
public string Triggers
}
public System.Data.SQLite.SQLiteModule : object {
private int DefaultModuleVersion
private sqlite3_module nativeModule
private xDestroyModule destroyModule
private IntPtr disposableModule
private Dictionary`2<IntPtr, SQLiteVirtualTable> tables
private Dictionary`2<IntPtr, SQLiteVirtualTableCursor> cursors
private Dictionary`2<string, SQLiteFunction> functions
private bool logErrors
private bool logExceptions
private bool declared
private string name
private bool disposed
protected bool LogErrorsNoThrow
protected bool LogExceptionsNoThrow
public bool LogErrors
public bool LogExceptions
public bool Declared
public string Name
public void .ctor(string name)
internal bool CreateDisposableModule(IntPtr pDb)
private void xDestroyModule(IntPtr pClientData)
private sqlite3_module AllocateNativeModule()
private sqlite3_module AllocateNativeModule(ISQLiteNativeModule module)
private sqlite3_module CopyNativeModule(sqlite3_module module)
private SQLiteErrorCode CreateOrConnect(bool create, IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError)
private SQLiteErrorCode DestroyOrDisconnect(bool destroy, IntPtr pVtab)
private bool SetTableError(SQLiteModule module, IntPtr pVtab, bool logErrors, bool logExceptions, string error)
private bool SetTableError(SQLiteModule module, SQLiteVirtualTable table, bool logErrors, bool logExceptions, string error)
private bool SetCursorError(SQLiteModule module, IntPtr pCursor, bool logErrors, bool logExceptions, string error)
private bool SetCursorError(SQLiteModule module, SQLiteVirtualTableCursor cursor, bool logErrors, bool logExceptions, string error)
protected ISQLiteNativeModule GetNativeModuleImpl()
protected ISQLiteNativeModule CreateNativeModuleImpl()
protected IntPtr AllocateTable()
protected void ZeroTable(IntPtr pVtab)
protected void FreeTable(IntPtr pVtab)
protected IntPtr AllocateCursor()
protected void FreeCursor(IntPtr pCursor)
private IntPtr TableFromCursor(SQLiteModule module, IntPtr pCursor)
protected IntPtr TableFromCursor(IntPtr pCursor)
protected SQLiteVirtualTable TableFromIntPtr(IntPtr pVtab)
protected IntPtr TableToIntPtr(SQLiteVirtualTable table)
protected SQLiteVirtualTableCursor CursorFromIntPtr(IntPtr pVtab, IntPtr pCursor)
protected IntPtr CursorToIntPtr(SQLiteVirtualTableCursor cursor)
protected string GetFunctionKey(int argumentCount, string name, SQLiteFunction function)
protected SQLiteErrorCode DeclareTable(SQLiteConnection connection, string sql, String& error)
protected SQLiteErrorCode DeclareFunction(SQLiteConnection connection, int argumentCount, string name, String& error)
protected bool get_LogErrorsNoThrow()
protected void set_LogErrorsNoThrow(bool value)
protected bool get_LogExceptionsNoThrow()
protected void set_LogExceptionsNoThrow(bool value)
protected bool SetTableError(IntPtr pVtab, string error)
protected bool SetTableError(SQLiteVirtualTable table, string error)
protected bool SetCursorError(SQLiteVirtualTableCursor cursor, string error)
protected bool SetEstimatedCost(SQLiteIndex index, Nullable`1<double> estimatedCost)
protected bool SetEstimatedCost(SQLiteIndex index)
protected bool SetEstimatedRows(SQLiteIndex index, Nullable`1<long> estimatedRows)
protected bool SetEstimatedRows(SQLiteIndex index)
public bool get_LogErrors()
public void set_LogErrors(bool value)
public bool get_LogExceptions()
public void set_LogExceptions(bool value)
private SQLiteErrorCode xCreate(IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError)
private SQLiteErrorCode xConnect(IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError)
private SQLiteErrorCode xBestIndex(IntPtr pVtab, IntPtr pIndex)
private SQLiteErrorCode xDisconnect(IntPtr pVtab)
private SQLiteErrorCode xDestroy(IntPtr pVtab)
private SQLiteErrorCode xOpen(IntPtr pVtab, IntPtr& pCursor)
private SQLiteErrorCode xClose(IntPtr pCursor)
private SQLiteErrorCode xFilter(IntPtr pCursor, int idxNum, IntPtr idxStr, int argc, IntPtr argv)
private SQLiteErrorCode xNext(IntPtr pCursor)
private int xEof(IntPtr pCursor)
private SQLiteErrorCode xColumn(IntPtr pCursor, IntPtr pContext, int index)
private SQLiteErrorCode xRowId(IntPtr pCursor, Int64& rowId)
private SQLiteErrorCode xUpdate(IntPtr pVtab, int argc, IntPtr argv, Int64& rowId)
private SQLiteErrorCode xBegin(IntPtr pVtab)
private SQLiteErrorCode xSync(IntPtr pVtab)
private SQLiteErrorCode xCommit(IntPtr pVtab)
private SQLiteErrorCode xRollback(IntPtr pVtab)
private int xFindFunction(IntPtr pVtab, int nArg, IntPtr zName, SQLiteCallback& callback, IntPtr& pClientData)
private SQLiteErrorCode xRename(IntPtr pVtab, IntPtr zNew)
private SQLiteErrorCode xSavepoint(IntPtr pVtab, int iSavepoint)
private SQLiteErrorCode xRelease(IntPtr pVtab, int iSavepoint)
private SQLiteErrorCode xRollbackTo(IntPtr pVtab, int iSavepoint)
public bool get_Declared()
internal void set_Declared(bool value)
public string get_Name()
public SQLiteErrorCode Create(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error)
public SQLiteErrorCode Connect(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error)
public SQLiteErrorCode BestIndex(SQLiteVirtualTable table, SQLiteIndex index)
public SQLiteErrorCode Disconnect(SQLiteVirtualTable table)
public SQLiteErrorCode Destroy(SQLiteVirtualTable table)
public SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor)
public SQLiteErrorCode Close(SQLiteVirtualTableCursor cursor)
public SQLiteErrorCode Filter(SQLiteVirtualTableCursor cursor, int indexNumber, string indexString, SQLiteValue[] values)
public SQLiteErrorCode Next(SQLiteVirtualTableCursor cursor)
public bool Eof(SQLiteVirtualTableCursor cursor)
public SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index)
public SQLiteErrorCode RowId(SQLiteVirtualTableCursor cursor, Int64& rowId)
public SQLiteErrorCode Update(SQLiteVirtualTable table, SQLiteValue[] values, Int64& rowId)
public SQLiteErrorCode Begin(SQLiteVirtualTable table)
public SQLiteErrorCode Sync(SQLiteVirtualTable table)
public SQLiteErrorCode Commit(SQLiteVirtualTable table)
public SQLiteErrorCode Rollback(SQLiteVirtualTable table)
public bool FindFunction(SQLiteVirtualTable table, int argumentCount, string name, SQLiteFunction& function, IntPtr& pClientData)
public SQLiteErrorCode Rename(SQLiteVirtualTable table, string newName)
public SQLiteErrorCode Savepoint(SQLiteVirtualTable table, int savepoint)
public SQLiteErrorCode Release(SQLiteVirtualTable table, int savepoint)
public SQLiteErrorCode RollbackTo(SQLiteVirtualTable table, int savepoint)
public void Dispose()
private void CheckDisposed()
protected void Dispose(bool disposing)
protected void Finalize()
}
public System.Data.SQLite.SQLiteModuleCommon : SQLiteModuleNoop {
private string declareSql
private bool objectIdentity
private bool disposed
public void .ctor(string name)
public void .ctor(string name, bool objectIdentity)
protected string GetSqlForDeclareTable()
protected SQLiteErrorCode CursorTypeMismatchError(SQLiteVirtualTableCursor cursor, Type type)
protected string GetStringFromObject(SQLiteVirtualTableCursor cursor, object value)
protected long MakeRowId(int rowIndex, int hashCode)
protected long GetRowIdFromObject(SQLiteVirtualTableCursor cursor, object value)
private void CheckDisposed()
protected void Dispose(bool disposing)
}
public System.Data.SQLite.SQLiteModuleEnumerable : SQLiteModuleCommon {
private IEnumerable enumerable
private bool objectIdentity
private bool disposed
public void .ctor(string name, IEnumerable enumerable)
public void .ctor(string name, IEnumerable enumerable, bool objectIdentity)
protected SQLiteErrorCode CursorEndOfEnumeratorError(SQLiteVirtualTableCursor cursor)
public SQLiteErrorCode Create(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error)
public SQLiteErrorCode Connect(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error)
public SQLiteErrorCode BestIndex(SQLiteVirtualTable table, SQLiteIndex index)
public SQLiteErrorCode Disconnect(SQLiteVirtualTable table)
public SQLiteErrorCode Destroy(SQLiteVirtualTable table)
public SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor)
public SQLiteErrorCode Close(SQLiteVirtualTableCursor cursor)
public SQLiteErrorCode Filter(SQLiteVirtualTableCursor cursor, int indexNumber, string indexString, SQLiteValue[] values)
public SQLiteErrorCode Next(SQLiteVirtualTableCursor cursor)
public bool Eof(SQLiteVirtualTableCursor cursor)
public SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index)
public SQLiteErrorCode RowId(SQLiteVirtualTableCursor cursor, Int64& rowId)
public SQLiteErrorCode Update(SQLiteVirtualTable table, SQLiteValue[] values, Int64& rowId)
public SQLiteErrorCode Rename(SQLiteVirtualTable table, string newName)
private void CheckDisposed()
protected void Dispose(bool disposing)
}
public System.Data.SQLite.SQLiteModuleNoop : SQLiteModule {
private Dictionary`2<string, SQLiteErrorCode> resultCodes
private bool disposed
public void .ctor(string name)
protected SQLiteErrorCode GetDefaultResultCode()
protected bool ResultCodeToEofResult(SQLiteErrorCode resultCode)
protected bool ResultCodeToFindFunctionResult(SQLiteErrorCode resultCode)
protected SQLiteErrorCode GetMethodResultCode(string methodName)
protected bool SetMethodResultCode(string methodName, SQLiteErrorCode resultCode)
public SQLiteErrorCode Create(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error)
public SQLiteErrorCode Connect(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error)
public SQLiteErrorCode BestIndex(SQLiteVirtualTable table, SQLiteIndex index)
public SQLiteErrorCode Disconnect(SQLiteVirtualTable table)
public SQLiteErrorCode Destroy(SQLiteVirtualTable table)
public SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor)
public SQLiteErrorCode Close(SQLiteVirtualTableCursor cursor)
public SQLiteErrorCode Filter(SQLiteVirtualTableCursor cursor, int indexNumber, string indexString, SQLiteValue[] values)
public SQLiteErrorCode Next(SQLiteVirtualTableCursor cursor)
public bool Eof(SQLiteVirtualTableCursor cursor)
public SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index)
public SQLiteErrorCode RowId(SQLiteVirtualTableCursor cursor, Int64& rowId)
public SQLiteErrorCode Update(SQLiteVirtualTable table, SQLiteValue[] values, Int64& rowId)
public SQLiteErrorCode Begin(SQLiteVirtualTable table)
public SQLiteErrorCode Sync(SQLiteVirtualTable table)
public SQLiteErrorCode Commit(SQLiteVirtualTable table)
public SQLiteErrorCode Rollback(SQLiteVirtualTable table)
public bool FindFunction(SQLiteVirtualTable table, int argumentCount, string name, SQLiteFunction& function, IntPtr& pClientData)
public SQLiteErrorCode Rename(SQLiteVirtualTable table, string newName)
public SQLiteErrorCode Savepoint(SQLiteVirtualTable table, int savepoint)
public SQLiteErrorCode Release(SQLiteVirtualTable table, int savepoint)
public SQLiteErrorCode RollbackTo(SQLiteVirtualTable table, int savepoint)
private void CheckDisposed()
protected void Dispose(bool disposing)
}
internal System.Data.SQLite.SQLiteOpenFlagsEnum : Enum {
public int value__
public SQLiteOpenFlagsEnum None
public SQLiteOpenFlagsEnum ReadOnly
public SQLiteOpenFlagsEnum ReadWrite
public SQLiteOpenFlagsEnum Create
public SQLiteOpenFlagsEnum Uri
public SQLiteOpenFlagsEnum SharedCache
public SQLiteOpenFlagsEnum Default
}
public System.Data.SQLite.SQLiteParameter : DbParameter {
private DbType UnknownDbType
private IDbCommand _command
internal DbType _dbType
private DataRowVersion _rowVersion
private object _objValue
private string _sourceColumn
private string _parameterName
private int _dataSize
private bool _nullable
private bool _nullMapping
public IDbCommand Command
public bool IsNullable
public DbType DbType
public ParameterDirection Direction
public string ParameterName
public int Size
public string SourceColumn
public bool SourceColumnNullMapping
public DataRowVersion SourceVersion
public object Value
internal void .ctor(IDbCommand command)
public void .ctor(string parameterName)
public void .ctor(string parameterName, object value)
public void .ctor(string parameterName, DbType dbType)
public void .ctor(string parameterName, DbType dbType, string sourceColumn)
public void .ctor(string parameterName, DbType dbType, string sourceColumn, DataRowVersion rowVersion)
public void .ctor(DbType dbType)
public void .ctor(DbType dbType, object value)
public void .ctor(DbType dbType, string sourceColumn)
public void .ctor(DbType dbType, string sourceColumn, DataRowVersion rowVersion)
public void .ctor(string parameterName, DbType parameterType, int parameterSize)
public void .ctor(string parameterName, DbType parameterType, int parameterSize, string sourceColumn)
public void .ctor(string parameterName, DbType parameterType, int parameterSize, string sourceColumn, DataRowVersion rowVersion)
private void .ctor(SQLiteParameter source)
public void .ctor(string parameterName, DbType parameterType, int parameterSize, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion rowVersion, object value)
public void .ctor(string parameterName, DbType parameterType, int parameterSize, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion rowVersion, bool sourceColumnNullMapping, object value)
public void .ctor(DbType parameterType, int parameterSize)
public void .ctor(DbType parameterType, int parameterSize, string sourceColumn)
public void .ctor(DbType parameterType, int parameterSize, string sourceColumn, DataRowVersion rowVersion)
public IDbCommand get_Command()
public void set_Command(IDbCommand value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public DbType get_DbType()
public void set_DbType(DbType value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public string get_ParameterName()
public void set_ParameterName(string value)
public void ResetDbType()
public int get_Size()
public void set_Size(int value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public object get_Value()
public void set_Value(object value)
public object Clone()
}
public System.Data.SQLite.SQLiteParameterCollection : DbParameterCollection {
private SQLiteCommand _command
private List`1<SQLiteParameter> _parameterList
private bool _unboundFlag
public bool IsSynchronized
public bool IsFixedSize
public bool IsReadOnly
public object SyncRoot
public int Count
public SQLiteParameter Item
public SQLiteParameter Item
internal void .ctor(SQLiteCommand cmd)
public bool get_IsSynchronized()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public object get_SyncRoot()
public IEnumerator GetEnumerator()
public SQLiteParameter Add(string parameterName, DbType parameterType, int parameterSize, string sourceColumn)
public SQLiteParameter Add(string parameterName, DbType parameterType, int parameterSize)
public SQLiteParameter Add(string parameterName, DbType parameterType)
public int Add(SQLiteParameter parameter)
public int Add(object value)
public SQLiteParameter AddWithValue(string parameterName, object value)
public void AddRange(SQLiteParameter[] values)
public void AddRange(Array values)
public void Clear()
public bool Contains(string parameterName)
public bool Contains(object value)
public void CopyTo(Array array, int index)
public int get_Count()
public SQLiteParameter get_Item(string parameterName)
public void set_Item(string parameterName, SQLiteParameter value)
public SQLiteParameter get_Item(int index)
public void set_Item(int index, SQLiteParameter value)
protected DbParameter GetParameter(string parameterName)
protected DbParameter GetParameter(int index)
public int IndexOf(string parameterName)
public int IndexOf(object value)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(string parameterName)
public void RemoveAt(int index)
protected void SetParameter(string parameterName, DbParameter value)
protected void SetParameter(int index, DbParameter value)
internal void Unbind()
internal void MapParameters(SQLiteStatement activeStatement)
}
internal System.Data.SQLite.SQLiteRollbackCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr puser)
public IAsyncResult BeginInvoke(IntPtr puser, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.SQLite.SQLiteStatement : object {
internal SQLiteBase _sql
internal string _sqlStatement
internal SQLiteStatementHandle _sqlite_stmt
internal int _unnamedParameters
internal String[] _paramNames
internal SQLiteParameter[] _paramValues
internal SQLiteCommand _command
private SQLiteConnectionFlags _flags
private String[] _types
private bool disposed
internal String[] TypeDefinitions
internal void .ctor(SQLiteBase sqlbase, SQLiteConnectionFlags flags, SQLiteStatementHandle stmt, string strCommand, SQLiteStatement previous)
public void Dispose()
private void CheckDisposed()
private void Dispose(bool disposing)
protected void Finalize()
internal bool TryGetChanges(Int32& changes, Boolean& readOnly)
internal bool MapParameter(string s, SQLiteParameter p)
internal void BindParameters()
private void BindParameter(int index, SQLiteParameter param)
internal String[] get_TypeDefinitions()
internal void SetTypes(string typedefs)
}
internal System.Data.SQLite.SQLiteStatementHandle : CriticalHandle {
private SQLiteConnectionHandle cnn
public bool IsInvalid
public IntPtr op_Implicit(SQLiteStatementHandle stmt)
internal void .ctor(SQLiteConnectionHandle cnn, IntPtr stmt)
protected bool ReleaseHandle()
public bool get_IsInvalid()
}
internal System.Data.SQLite.SQLiteString : object {
private int ThirtyBits
private Encoding Utf8Encoding
public Byte[] GetUtf8BytesFromString(string value)
public string GetStringFromUtf8Bytes(Byte[] bytes)
public int ProbeForUtf8ByteLength(IntPtr pValue, int limit)
public string StringFromUtf8IntPtr(IntPtr pValue)
public string StringFromUtf8IntPtr(IntPtr pValue, int length)
public IntPtr Utf8IntPtrFromString(string value)
public String[] StringArrayFromUtf8SizeAndIntPtr(int argc, IntPtr argv)
public IntPtr[] Utf8IntPtrArrayFromStringArray(String[] values)
}
internal System.Data.SQLite.SQLiteSynchronousEnum : Enum {
public int value__
public SQLiteSynchronousEnum Default
public SQLiteSynchronousEnum Off
public SQLiteSynchronousEnum Normal
public SQLiteSynchronousEnum Full
}
internal System.Data.SQLite.SQLiteTraceCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr puser, IntPtr statement)
public IAsyncResult BeginInvoke(IntPtr puser, IntPtr statement, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteTraceEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, TraceEventArgs e)
public IAsyncResult BeginInvoke(object sender, TraceEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteTransaction : DbTransaction {
internal SQLiteConnection _cnn
internal int _version
private IsolationLevel _level
private bool disposed
public SQLiteConnection Connection
protected DbConnection DbConnection
public IsolationLevel IsolationLevel
internal void .ctor(SQLiteConnection connection, bool deferredLock)
private void CheckDisposed()
protected void Dispose(bool disposing)
public void Commit()
public SQLiteConnection get_Connection()
protected DbConnection get_DbConnection()
public IsolationLevel get_IsolationLevel()
public void Rollback()
internal void IssueRollback(bool throwError)
internal bool IsValid(bool throwError)
}
internal System.Data.SQLite.SQLiteType : object {
internal DbType Type
internal TypeAffinity Affinity
public void .ctor(TypeAffinity affinity, DbType type)
}
internal System.Data.SQLite.SQLiteUpdateCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid)
public IAsyncResult BeginInvoke(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteUpdateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, UpdateEventArgs e)
public IAsyncResult BeginInvoke(object sender, UpdateEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SQLite.SQLiteValue : object {
private IntPtr pValue
private bool persisted
private object value
public IntPtr NativeHandle
public bool Persisted
public object Value
private void .ctor(IntPtr pValue)
private void PreventNativeAccess()
internal SQLiteValue[] ArrayFromSizeAndIntPtr(int argc, IntPtr argv)
public IntPtr get_NativeHandle()
public bool get_Persisted()
public object get_Value()
public TypeAffinity GetTypeAffinity()
public int GetBytes()
public int GetInt()
public long GetInt64()
public double GetDouble()
public string GetString()
public Byte[] GetBlob()
public bool Persist()
}
public System.Data.SQLite.SQLiteVirtualTable : object {
private int ModuleNameIndex
private int DatabaseNameIndex
private int TableNameIndex
private String[] arguments
private SQLiteIndex index
private IntPtr nativeHandle
private bool disposed
public String[] Arguments
public string ModuleName
public string DatabaseName
public string TableName
public SQLiteIndex Index
public IntPtr NativeHandle
public void .ctor(String[] arguments)
public String[] get_Arguments()
public string get_ModuleName()
public string get_DatabaseName()
public string get_TableName()
public SQLiteIndex get_Index()
public bool BestIndex(SQLiteIndex index)
public bool Rename(string name)
public IntPtr get_NativeHandle()
internal void set_NativeHandle(IntPtr value)
public void Dispose()
private void CheckDisposed()
protected void Dispose(bool disposing)
protected void Finalize()
}
public System.Data.SQLite.SQLiteVirtualTableCursor : object {
protected int InvalidRowIndex
private int rowIndex
private SQLiteVirtualTable table
private int indexNumber
private string indexString
private SQLiteValue[] values
private IntPtr nativeHandle
private bool disposed
public SQLiteVirtualTable Table
public int IndexNumber
public string IndexString
public SQLiteValue[] Values
public IntPtr NativeHandle
public void .ctor(SQLiteVirtualTable table)
public SQLiteVirtualTable get_Table()
public int get_IndexNumber()
public string get_IndexString()
public SQLiteValue[] get_Values()
protected int TryPersistValues(SQLiteValue[] values)
public void Filter(int indexNumber, string indexString, SQLiteValue[] values)
public int GetRowIndex()
public void NextRowIndex()
public IntPtr get_NativeHandle()
internal void set_NativeHandle(IntPtr value)
public void Dispose()
private void CheckDisposed()
protected void Dispose(bool disposing)
protected void Finalize()
}
public System.Data.SQLite.SQLiteVirtualTableCursorEnumerator : SQLiteVirtualTableCursor {
private IEnumerator enumerator
private bool endOfEnumerator
private bool disposed
public object Current
public bool EndOfEnumerator
public bool IsOpen
public void .ctor(SQLiteVirtualTable table, IEnumerator enumerator)
public bool MoveNext()
public object get_Current()
public void Reset()
public bool get_EndOfEnumerator()
public bool get_IsOpen()
public void Close()
public void CheckClosed()
private void CheckDisposed()
protected void Dispose(bool disposing)
}
internal System.Data.SQLite.SR : object {
private ResourceManager resourceMan
private CultureInfo resourceCulture
internal ResourceManager ResourceManager
internal CultureInfo Culture
internal string DataTypes
internal string Keywords
internal string MetaDataCollections
internal ResourceManager get_ResourceManager()
internal CultureInfo get_Culture()
internal void set_Culture(CultureInfo value)
internal string get_DataTypes()
internal string get_Keywords()
internal string get_MetaDataCollections()
}
public System.Data.SQLite.SynchronizationModes : Enum {
public int value__
public SynchronizationModes Normal
public SynchronizationModes Full
public SynchronizationModes Off
}
public System.Data.SQLite.TraceEventArgs : EventArgs {
public string Statement
internal void .ctor(string statement)
}
public System.Data.SQLite.TypeAffinity : Enum {
public int value__
public TypeAffinity Uninitialized
public TypeAffinity Int64
public TypeAffinity Double
public TypeAffinity Text
public TypeAffinity Blob
public TypeAffinity Null
public TypeAffinity DateTime
public TypeAffinity None
}
internal System.Data.SQLite.TypeNameStringComparer : object {
public bool Equals(string left, string right)
public int GetHashCode(string value)
}
internal System.Data.SQLite.UnsafeNativeMethods : object {
internal string SQLITE_DLL
private string DllFileExtension
private string ConfigFileExtension
private string XmlConfigFileName
private object staticSyncRoot
private Dictionary`2<string, string> processorArchitecturePlatforms
private string PROCESSOR_ARCHITECTURE
private string _SQLiteNativeModuleFileName
private IntPtr _SQLiteNativeModuleHandle
internal void Initialize()
private string GetXmlConfigFileName()
internal string GetSettingValue(string name, string default)
private string ListToString(IList`1<string> list)
private int CheckForArchitecturesAndPlatforms(string directory, List`1& matches)
private bool CheckAssemblyCodeBase(Assembly assembly, String& fileName)
private string GetAssemblyDirectory()
private IntPtr LoadLibrary(string fileName)
private bool SearchForDirectory(String& baseDirectory, String& processorArchitecture)
private string GetBaseDirectory()
private string FixUpDllFileName(string fileName)
private string GetProcessorArchitecture()
private string GetPlatformName(string processorArchitecture)
private bool PreLoadSQLiteDll(string baseDirectory, string processorArchitecture, String& nativeModuleFileName, IntPtr& nativeModuleHandle)
internal SQLiteErrorCode sqlite3_close(IntPtr db)
internal SQLiteErrorCode sqlite3_close_v2(IntPtr db)
internal SQLiteErrorCode sqlite3_create_function(IntPtr db, Byte[] strName, int nArgs, int nType, IntPtr pvUser, SQLiteCallback func, SQLiteCallback fstep, SQLiteFinalCallback ffinal)
internal SQLiteErrorCode sqlite3_finalize(IntPtr stmt)
internal SQLiteErrorCode sqlite3_backup_finish(IntPtr backup)
internal SQLiteErrorCode sqlite3_reset(IntPtr stmt)
internal IntPtr sqlite3_bind_parameter_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_database_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_database_name16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_decltype(IntPtr stmt, int index)
internal IntPtr sqlite3_column_decltype16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_name16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_origin_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_origin_name16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_table_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_table_name16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_text(IntPtr stmt, int index)
internal IntPtr sqlite3_column_text16(IntPtr stmt, int index)
internal IntPtr sqlite3_errmsg(IntPtr db)
internal SQLiteErrorCode sqlite3_prepare(IntPtr db, IntPtr pSql, int nBytes, IntPtr& stmt, IntPtr& ptrRemain)
internal SQLiteErrorCode sqlite3_prepare_v2(IntPtr db, IntPtr pSql, int nBytes, IntPtr& stmt, IntPtr& ptrRemain)
internal SQLiteErrorCode sqlite3_table_column_metadata(IntPtr db, Byte[] dbName, Byte[] tblName, Byte[] colName, IntPtr& ptrDataType, IntPtr& ptrCollSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc)
internal IntPtr sqlite3_value_text(IntPtr p)
internal IntPtr sqlite3_value_text16(IntPtr p)
internal IntPtr sqlite3_libversion()
internal int sqlite3_libversion_number()
internal IntPtr sqlite3_sourceid()
internal int sqlite3_compileoption_used(IntPtr zOptName)
internal IntPtr sqlite3_compileoption_get(int N)
internal SQLiteErrorCode sqlite3_enable_shared_cache(int enable)
internal SQLiteErrorCode sqlite3_enable_load_extension(IntPtr db, int enable)
internal SQLiteErrorCode sqlite3_load_extension(IntPtr db, Byte[] fileName, Byte[] procName, IntPtr& pError)
internal SQLiteErrorCode sqlite3_overload_function(IntPtr db, IntPtr zName, int nArgs)
internal SQLiteErrorCode sqlite3_win32_set_directory(UInt32 type, string value)
internal SQLiteErrorCode sqlite3_win32_reset_heap()
internal SQLiteErrorCode sqlite3_win32_compact_heap(UInt32& largest)
internal IntPtr sqlite3_malloc(int n)
internal IntPtr sqlite3_realloc(IntPtr p, int n)
internal void sqlite3_free(IntPtr p)
internal SQLiteErrorCode sqlite3_open_v2(Byte[] utf8Filename, IntPtr& db, SQLiteOpenFlagsEnum flags, IntPtr vfs)
internal SQLiteErrorCode sqlite3_open16(string fileName, IntPtr& db)
internal void sqlite3_interrupt(IntPtr db)
internal long sqlite3_last_insert_rowid(IntPtr db)
internal int sqlite3_changes(IntPtr db)
internal long sqlite3_memory_used()
internal long sqlite3_memory_highwater(int resetFlag)
internal SQLiteErrorCode sqlite3_shutdown()
internal SQLiteErrorCode sqlite3_busy_timeout(IntPtr db, int ms)
internal SQLiteErrorCode sqlite3_bind_blob(IntPtr stmt, int index, Byte[] value, int nSize, IntPtr nTransient)
internal SQLiteErrorCode sqlite3_bind_double(IntPtr stmt, int index, double value)
internal SQLiteErrorCode sqlite3_bind_int(IntPtr stmt, int index, int value)
internal SQLiteErrorCode sqlite3_bind_uint(IntPtr stmt, int index, UInt32 value)
internal SQLiteErrorCode sqlite3_bind_int64(IntPtr stmt, int index, long value)
internal SQLiteErrorCode sqlite3_bind_uint64(IntPtr stmt, int index, ulong value)
internal SQLiteErrorCode sqlite3_bind_null(IntPtr stmt, int index)
internal SQLiteErrorCode sqlite3_bind_text(IntPtr stmt, int index, Byte[] value, int nlen, IntPtr pvReserved)
internal int sqlite3_bind_parameter_count(IntPtr stmt)
internal int sqlite3_bind_parameter_index(IntPtr stmt, Byte[] strName)
internal int sqlite3_column_count(IntPtr stmt)
internal SQLiteErrorCode sqlite3_step(IntPtr stmt)
internal int sqlite3_stmt_readonly(IntPtr stmt)
internal double sqlite3_column_double(IntPtr stmt, int index)
internal int sqlite3_column_int(IntPtr stmt, int index)
internal long sqlite3_column_int64(IntPtr stmt, int index)
internal IntPtr sqlite3_column_blob(IntPtr stmt, int index)
internal int sqlite3_column_bytes(IntPtr stmt, int index)
internal int sqlite3_column_bytes16(IntPtr stmt, int index)
internal TypeAffinity sqlite3_column_type(IntPtr stmt, int index)
internal SQLiteErrorCode sqlite3_create_collation(IntPtr db, Byte[] strName, int nType, IntPtr pvUser, SQLiteCollation func)
internal int sqlite3_aggregate_count(IntPtr context)
internal IntPtr sqlite3_value_blob(IntPtr p)
internal int sqlite3_value_bytes(IntPtr p)
internal int sqlite3_value_bytes16(IntPtr p)
internal double sqlite3_value_double(IntPtr p)
internal int sqlite3_value_int(IntPtr p)
internal long sqlite3_value_int64(IntPtr p)
internal TypeAffinity sqlite3_value_type(IntPtr p)
internal void sqlite3_result_blob(IntPtr context, Byte[] value, int nSize, IntPtr pvReserved)
internal void sqlite3_result_double(IntPtr context, double value)
internal void sqlite3_result_error(IntPtr context, Byte[] strErr, int nLen)
internal void sqlite3_result_error_code(IntPtr context, SQLiteErrorCode value)
internal void sqlite3_result_error_toobig(IntPtr context)
internal void sqlite3_result_error_nomem(IntPtr context)
internal void sqlite3_result_value(IntPtr context, IntPtr value)
internal void sqlite3_result_zeroblob(IntPtr context, int nLen)
internal void sqlite3_result_int(IntPtr context, int value)
internal void sqlite3_result_int64(IntPtr context, long value)
internal void sqlite3_result_null(IntPtr context)
internal void sqlite3_result_text(IntPtr context, Byte[] value, int nLen, IntPtr pvReserved)
internal IntPtr sqlite3_aggregate_context(IntPtr context, int nBytes)
internal SQLiteErrorCode sqlite3_bind_text16(IntPtr stmt, int index, string value, int nlen, IntPtr pvReserved)
internal void sqlite3_result_error16(IntPtr context, string strName, int nLen)
internal void sqlite3_result_text16(IntPtr context, string strName, int nLen, IntPtr pvReserved)
internal SQLiteErrorCode sqlite3_key(IntPtr db, Byte[] key, int keylen)
internal SQLiteErrorCode sqlite3_rekey(IntPtr db, Byte[] key, int keylen)
internal IntPtr sqlite3_set_authorizer(IntPtr db, SQLiteAuthorizerCallback func, IntPtr pvUser)
internal IntPtr sqlite3_update_hook(IntPtr db, SQLiteUpdateCallback func, IntPtr pvUser)
internal IntPtr sqlite3_commit_hook(IntPtr db, SQLiteCommitCallback func, IntPtr pvUser)
internal IntPtr sqlite3_trace(IntPtr db, SQLiteTraceCallback func, IntPtr pvUser)
internal SQLiteErrorCode sqlite3_config_none(SQLiteConfigOpsEnum op)
internal SQLiteErrorCode sqlite3_config_int(SQLiteConfigOpsEnum op, int value)
internal SQLiteErrorCode sqlite3_config_log(SQLiteConfigOpsEnum op, SQLiteLogCallback func, IntPtr pvUser)
internal IntPtr sqlite3_rollback_hook(IntPtr db, SQLiteRollbackCallback func, IntPtr pvUser)
internal IntPtr sqlite3_db_handle(IntPtr stmt)
internal SQLiteErrorCode sqlite3_db_release_memory(IntPtr db)
internal IntPtr sqlite3_db_filename(IntPtr db, IntPtr dbName)
internal IntPtr sqlite3_next_stmt(IntPtr db, IntPtr stmt)
internal SQLiteErrorCode sqlite3_exec(IntPtr db, Byte[] strSql, IntPtr pvCallback, IntPtr pvParam, IntPtr& errMsg)
internal int sqlite3_release_memory(int nBytes)
internal int sqlite3_get_autocommit(IntPtr db)
internal SQLiteErrorCode sqlite3_extended_result_codes(IntPtr db, int onoff)
internal SQLiteErrorCode sqlite3_errcode(IntPtr db)
internal SQLiteErrorCode sqlite3_extended_errcode(IntPtr db)
internal IntPtr sqlite3_errstr(SQLiteErrorCode rc)
internal void sqlite3_log(SQLiteErrorCode iErrCode, Byte[] zFormat)
internal SQLiteErrorCode sqlite3_file_control(IntPtr db, Byte[] zDbName, int op, IntPtr pArg)
internal IntPtr sqlite3_backup_init(IntPtr destDb, Byte[] zDestName, IntPtr sourceDb, Byte[] zSourceName)
internal SQLiteErrorCode sqlite3_backup_step(IntPtr backup, int nPage)
internal int sqlite3_backup_remaining(IntPtr backup)
internal int sqlite3_backup_pagecount(IntPtr backup)
internal SQLiteErrorCode sqlite3_declare_vtab(IntPtr db, IntPtr zSQL)
internal IntPtr sqlite3_mprintf(IntPtr format)
internal IntPtr sqlite3_create_disposable_module(IntPtr db, IntPtr name, sqlite3_module& module, IntPtr pClientData, xDestroyModule xDestroy)
internal void sqlite3_dispose_module(IntPtr pModule)
}
public System.Data.SQLite.UpdateEventArgs : EventArgs {
public string Database
public string Table
public UpdateEventType Event
public long RowId
internal void .ctor(string database, string table, UpdateEventType eventType, long rowid)
}
public System.Data.SQLite.UpdateEventType : Enum {
public int value__
public UpdateEventType Delete
public UpdateEventType Insert
public UpdateEventType Update
}
