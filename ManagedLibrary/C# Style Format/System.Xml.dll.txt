internal AssemblyRef : object {
internal string SystemConfiguration
internal string System
public string EcmaPublicKey
public string FrameworkPublicKeyFull
public string FrameworkPublicKeyFull2
public string MicrosoftPublicKey
public string MicrosoftJScript
public string MicrosoftVSDesigner
public string SystemData
public string SystemDesign
public string SystemDrawing
public string SystemWeb
public string SystemWebExtensions
public string SystemWindowsForms
}
internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Microsoft.Win32.UnsafeNativeMethods : object {
internal string KERNEL32
internal int ERROR_INSUFFICIENT_BUFFER
internal int ERROR_NO_PACKAGE_IDENTITY
internal Lazy`1<bool> IsPackagedProcess
private int _GetCurrentPackageId(Int32& pBufferLength, Byte[] pBuffer)
private IntPtr GetProcAddress(IntPtr hModule, string methodName)
private IntPtr GetModuleHandle(string moduleName)
private bool DoesWin32MethodExist(string moduleName, string methodName)
private bool _IsPackagedProcess()
}
internal MS.Internal.Xml.Cache.TextBlockType : Enum {
public int value__
public TextBlockType None
public TextBlockType Text
public TextBlockType SignificantWhitespace
public TextBlockType Whitespace
}
internal MS.Internal.Xml.Cache.XPathDocumentBaseIterator : XPathNodeIterator {
protected XPathDocumentNavigator ctxt
protected int pos
public XPathNavigator Current
public int CurrentPosition
protected void .ctor(XPathDocumentNavigator ctxt)
protected void .ctor(XPathDocumentBaseIterator iter)
public XPathNavigator get_Current()
public int get_CurrentPosition()
}
internal MS.Internal.Xml.Cache.XPathDocumentBuilder : XmlRawWriter {
private NodePageFactory nodePageFact
private NodePageFactory nmspPageFact
private TextBlockBuilder textBldr
private Stack`1<XPathNodeRef> stkNmsp
private XPathNodeInfoTable infoTable
private XPathDocument doc
private IXmlLineInfo lineInfo
private XmlNameTable nameTable
private bool atomizeNames
private XPathNode[] pageNmsp
private int idxNmsp
private XPathNode[] pageParent
private int idxParent
private XPathNode[] pageSibling
private int idxSibling
private int lineNumBase
private int linePosBase
private XmlQualifiedName idAttrName
private Hashtable elemIdMap
private XPathNodeRef[] elemNameIndex
private int ElementIndexSize
public void .ctor(XPathDocument doc, IXmlLineInfo lineInfo, string baseUri, LoadFlags flags)
public void Initialize(XPathDocument doc, IXmlLineInfo lineInfo, string baseUri, LoadFlags flags)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteStartElement(string prefix, string localName, string ns, string baseUri)
public void WriteEndElement()
public void WriteFullEndElement()
internal void WriteEndElement(string prefix, string localName, string namespaceName)
internal void WriteFullEndElement(string prefix, string localName, string namespaceName)
public void WriteEndElement(bool allowShortcutTag)
public void WriteStartAttribute(string prefix, string localName, string namespaceName)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteProcessingInstruction(string name, string text, string baseUri)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteString(string text, TextBlockType textType)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void Close()
public void Flush()
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
internal void StartElementContent()
internal void WriteNamespaceDeclaration(string prefix, string namespaceName)
public void CreateIdTables(IDtdInfo dtdInfo)
private XPathNodeRef LinkSimilarElements(XPathNode[] pagePrev, int idxPrev, XPathNode[] pageNext, int idxNext)
private int NewNamespaceNode(XPathNode[]& page, string prefix, string namespaceUri, XPathNode[] pageElem, int idxElem)
private int NewNode(XPathNode[]& page, XPathNodeType xptyp, string localName, string namespaceUri, string prefix, string baseUri)
private void ComputeLineInfo(bool isTextNode, Int32& lineNumOffset, Int32& linePosOffset)
private void AddSibling(XPathNodeType xptyp, string localName, string namespaceUri, string prefix, string baseUri)
private void CachedTextNode()
}
internal MS.Internal.Xml.Cache.XPathDocumentElementChildIterator : XPathDocumentBaseIterator {
private string localName
private string namespaceUri
public void .ctor(XPathDocumentNavigator parent, string name, string namespaceURI)
public void .ctor(XPathDocumentElementChildIterator iter)
public XPathNodeIterator Clone()
public bool MoveNext()
}
internal MS.Internal.Xml.Cache.XPathDocumentElementDescendantIterator : XPathDocumentBaseIterator {
private XPathDocumentNavigator end
private string localName
private string namespaceUri
private bool matchSelf
public void .ctor(XPathDocumentNavigator root, string name, string namespaceURI, bool matchSelf)
public void .ctor(XPathDocumentElementDescendantIterator iter)
public XPathNodeIterator Clone()
public bool MoveNext()
}
internal MS.Internal.Xml.Cache.XPathDocumentKindChildIterator : XPathDocumentBaseIterator {
private XPathNodeType typ
public void .ctor(XPathDocumentNavigator parent, XPathNodeType typ)
public void .ctor(XPathDocumentKindChildIterator iter)
public XPathNodeIterator Clone()
public bool MoveNext()
}
internal MS.Internal.Xml.Cache.XPathDocumentKindDescendantIterator : XPathDocumentBaseIterator {
private XPathDocumentNavigator end
private XPathNodeType typ
private bool matchSelf
public void .ctor(XPathDocumentNavigator root, XPathNodeType typ, bool matchSelf)
public void .ctor(XPathDocumentKindDescendantIterator iter)
public XPathNodeIterator Clone()
public bool MoveNext()
}
internal MS.Internal.Xml.Cache.XPathDocumentNavigator : XPathNavigator {
private XPathNode[] pageCurrent
private XPathNode[] pageParent
private int idxCurrent
private int idxParent
private string atomizedLocalName
public string Value
public XPathNodeType NodeType
public string LocalName
public string NamespaceURI
public string Name
public string Prefix
public string BaseURI
public bool IsEmptyElement
public XmlNameTable NameTable
public bool HasAttributes
public bool HasChildren
internal string UniqueId
public object UnderlyingObject
public int LineNumber
public int LinePosition
public void .ctor(XPathNode[] pageCurrent, int idxCurrent, XPathNode[] pageParent, int idxParent)
public void .ctor(XPathDocumentNavigator nav)
public string get_Value()
public XPathNavigator Clone()
public XPathNodeType get_NodeType()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Name()
public string get_Prefix()
public string get_BaseURI()
public bool get_IsEmptyElement()
public XmlNameTable get_NameTable()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool get_HasAttributes()
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToNextNamespace(XPathNamespaceScope scope)
public bool MoveToNext()
public bool MoveToPrevious()
public bool MoveToFirstChild()
public bool MoveToParent()
public bool MoveTo(XPathNavigator other)
public bool MoveToId(string id)
public bool IsSamePosition(XPathNavigator other)
public bool get_HasChildren()
public void MoveToRoot()
public bool MoveToChild(string localName, string namespaceURI)
public bool MoveToNext(string localName, string namespaceURI)
public bool MoveToChild(XPathNodeType type)
public bool MoveToNext(XPathNodeType type)
public bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end)
public bool MoveToFollowing(XPathNodeType type, XPathNavigator end)
public XPathNodeIterator SelectChildren(XPathNodeType type)
public XPathNodeIterator SelectChildren(string name, string namespaceURI)
public XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf)
public XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf)
public XmlNodeOrder ComparePosition(XPathNavigator other)
public bool IsDescendant(XPathNavigator other)
private int GetPrimaryLocation()
private int GetSecondaryLocation()
internal string get_UniqueId()
public object get_UnderlyingObject()
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
public int GetPositionHashCode()
public bool IsElementMatch(string localName, string namespaceURI)
public bool IsContentKindMatch(XPathNodeType typ)
public bool IsKindMatch(XPathNodeType typ)
private int GetFollowingEnd(XPathDocumentNavigator end, bool useParentOfVirtual, XPathNode[]& pageEnd)
}
internal MS.Internal.Xml.Cache.XPathNode : ValueType {
private XPathNodeInfoAtom info
private ushort idxSibling
private ushort idxParent
private ushort idxSimilar
private ushort posOffset
private UInt32 props
private string value
private UInt32 NodeTypeMask
private UInt32 HasAttributeBit
private UInt32 HasContentChildBit
private UInt32 HasElementChildBit
private UInt32 HasCollapsedTextBit
private UInt32 AllowShortcutTagBit
private UInt32 HasNmspDeclsBit
private UInt32 LineNumberMask
private int LineNumberShift
private int CollapsedPositionShift
public int MaxLineNumberOffset
public int MaxLinePositionOffset
public int MaxCollapsedPositionOffset
public XPathNodeType NodeType
public string Prefix
public string LocalName
public string Name
public string NamespaceUri
public XPathDocument Document
public string BaseUri
public int LineNumber
public int LinePosition
public int CollapsedLinePosition
public XPathNodePageInfo PageInfo
public bool IsXmlNamespaceNode
public bool HasSibling
public bool HasCollapsedText
public bool HasAttribute
public bool HasContentChild
public bool HasElementChild
public bool IsAttrNmsp
public bool IsText
public bool HasNamespaceDecls
public bool AllowShortcutTag
public int LocalNameHashCode
public string Value
public XPathNodeType get_NodeType()
public string get_Prefix()
public string get_LocalName()
public string get_Name()
public string get_NamespaceUri()
public XPathDocument get_Document()
public string get_BaseUri()
public int get_LineNumber()
public int get_LinePosition()
public int get_CollapsedLinePosition()
public XPathNodePageInfo get_PageInfo()
public int GetRoot(XPathNode[]& pageNode)
public int GetParent(XPathNode[]& pageNode)
public int GetSibling(XPathNode[]& pageNode)
public int GetSimilarElement(XPathNode[]& pageNode)
public bool NameMatch(string localName, string namespaceName)
public bool ElementMatch(string localName, string namespaceName)
public bool get_IsXmlNamespaceNode()
public bool get_HasSibling()
public bool get_HasCollapsedText()
public bool get_HasAttribute()
public bool get_HasContentChild()
public bool get_HasElementChild()
public bool get_IsAttrNmsp()
public bool get_IsText()
public bool get_HasNamespaceDecls()
public void set_HasNamespaceDecls(bool value)
public bool get_AllowShortcutTag()
public int get_LocalNameHashCode()
public string get_Value()
public void Create(XPathNodePageInfo pageInfo)
public void Create(XPathNodeInfoAtom info, XPathNodeType xptyp, int idxParent)
public void SetLineInfoOffsets(int lineNumOffset, int linePosOffset)
public void SetCollapsedLineInfoOffset(int posOffset)
public void SetValue(string value)
public void SetEmptyValue(bool allowShortcutTag)
public void SetCollapsedValue(string value)
public void SetParentProperties(XPathNodeType xptyp)
public void SetSibling(XPathNodeInfoTable infoTable, XPathNode[] pageSibling, int idxSibling)
public void SetSimilarElement(XPathNodeInfoTable infoTable, XPathNode[] pageSimilar, int idxSimilar)
}
internal MS.Internal.Xml.Cache.XPathNodeHelper : object {
public int GetLocalNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp)
public int GetInScopeNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp)
public bool GetFirstAttribute(XPathNode[]& pageNode, Int32& idxNode)
public bool GetNextAttribute(XPathNode[]& pageNode, Int32& idxNode)
public bool GetContentChild(XPathNode[]& pageNode, Int32& idxNode)
public bool GetContentSibling(XPathNode[]& pageNode, Int32& idxNode)
public bool GetParent(XPathNode[]& pageNode, Int32& idxNode)
public int GetLocation(XPathNode[] pageNode, int idxNode)
public bool GetElementChild(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName)
public bool GetElementSibling(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName)
public bool GetContentChild(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ)
public bool GetContentSibling(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ)
public bool GetPreviousContentSibling(XPathNode[]& pageNode, Int32& idxNode)
public bool GetPreviousElementSibling(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName)
public bool GetPreviousContentSibling(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ)
public bool GetAttribute(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName)
public bool GetFollowing(XPathNode[]& pageNode, Int32& idxNode)
public bool GetElementFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd, string localName, string namespaceName)
public bool GetContentFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd, XPathNodeType typ)
public bool GetTextFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd)
public bool GetNonDescendant(XPathNode[]& pageNode, Int32& idxNode)
private void GetChild(XPathNode[]& pageNode, Int32& idxNode)
}
internal MS.Internal.Xml.Cache.XPathNodeInfoAtom : object {
private string localName
private string namespaceUri
private string prefix
private string baseUri
private XPathNode[] pageParent
private XPathNode[] pageSibling
private XPathNode[] pageSimilar
private XPathDocument doc
private int lineNumBase
private int linePosBase
private int hashCode
private int localNameHash
private XPathNodeInfoAtom next
private XPathNodePageInfo pageInfo
public XPathNodePageInfo PageInfo
public string LocalName
public string NamespaceUri
public string Prefix
public string BaseUri
public XPathNode[] SiblingPage
public XPathNode[] SimilarElementPage
public XPathNode[] ParentPage
public XPathDocument Document
public int LineNumberBase
public int LinePositionBase
public int LocalNameHashCode
public XPathNodeInfoAtom Next
public void .ctor(XPathNodePageInfo pageInfo)
public void .ctor(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase)
public void Init(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase)
public XPathNodePageInfo get_PageInfo()
public string get_LocalName()
public string get_NamespaceUri()
public string get_Prefix()
public string get_BaseUri()
public XPathNode[] get_SiblingPage()
public XPathNode[] get_SimilarElementPage()
public XPathNode[] get_ParentPage()
public XPathDocument get_Document()
public int get_LineNumberBase()
public int get_LinePositionBase()
public int get_LocalNameHashCode()
public XPathNodeInfoAtom get_Next()
public void set_Next(XPathNodeInfoAtom value)
public int GetHashCode()
public bool Equals(object other)
public string ToString()
}
internal MS.Internal.Xml.Cache.XPathNodeInfoTable : object {
private XPathNodeInfoAtom[] hashTable
private int sizeTable
private XPathNodeInfoAtom infoCached
private int DefaultTableSize
public XPathNodeInfoAtom Create(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase)
private XPathNodeInfoAtom Atomize(XPathNodeInfoAtom info)
private void AddInfo(XPathNodeInfoAtom info)
public string ToString()
}
internal MS.Internal.Xml.Cache.XPathNodePageInfo : object {
private int pageNum
private int nodeCount
private XPathNode[] pagePrev
private XPathNode[] pageNext
public int PageNumber
public int NodeCount
public XPathNode[] PreviousPage
public XPathNode[] NextPage
public void .ctor(XPathNode[] pagePrev, int pageNum)
public int get_PageNumber()
public int get_NodeCount()
public void set_NodeCount(int value)
public XPathNode[] get_PreviousPage()
public XPathNode[] get_NextPage()
public void set_NextPage(XPathNode[] value)
}
internal MS.Internal.Xml.Cache.XPathNodeRef : ValueType {
private XPathNode[] page
private int idx
public XPathNodeRef Null
public bool IsNull
public XPathNode[] Page
public int Index
public XPathNodeRef get_Null()
public void .ctor(XPathNode[] page, int idx)
public bool get_IsNull()
public XPathNode[] get_Page()
public int get_Index()
public int GetHashCode()
}
internal MS.Internal.Xml.XPath.AbsoluteQuery : ContextQuery {
private void .ctor(AbsoluteQuery other)
public object Evaluate(XPathNodeIterator context)
public XPathNavigator MatchNode(XPathNavigator context)
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.AstNode : object {
public AstType Type
public XPathResultType ReturnType
public AstType get_Type()
public XPathResultType get_ReturnType()
}
internal MS.Internal.Xml.XPath.AttributeQuery : BaseAxisQuery {
private bool onAttribute
public void .ctor(Query qyParent, string Name, string Prefix, XPathNodeType Type)
private void .ctor(AttributeQuery other)
public void Reset()
public XPathNavigator Advance()
public XPathNavigator MatchNode(XPathNavigator context)
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.Axis : AstNode {
private AxisType axisType
private AstNode input
private string prefix
private string name
private XPathNodeType nodeType
protected bool abbrAxis
private string urn
public AstType Type
public XPathResultType ReturnType
public AstNode Input
public string Prefix
public string Name
public XPathNodeType NodeType
public AxisType TypeOfAxis
public bool AbbrAxis
public string Urn
public void .ctor(AxisType axisType, AstNode input, string prefix, string name, XPathNodeType nodetype)
public void .ctor(AxisType axisType, AstNode input)
public AstType get_Type()
public XPathResultType get_ReturnType()
public AstNode get_Input()
public void set_Input(AstNode value)
public string get_Prefix()
public string get_Name()
public XPathNodeType get_NodeType()
public AxisType get_TypeOfAxis()
public bool get_AbbrAxis()
public string get_Urn()
public void set_Urn(string value)
}
internal MS.Internal.Xml.XPath.BaseAxisQuery : Query {
internal Query qyInput
private bool nameTest
private string name
private string prefix
private string nsUri
private XPathNodeType typeTest
protected XPathNavigator currentNode
protected int position
protected string Name
protected string Prefix
protected string Namespace
protected bool NameTest
protected XPathNodeType TypeTest
public int CurrentPosition
public XPathNavigator Current
public double XsltDefaultPriority
public XPathResultType StaticType
protected void .ctor(Query qyInput)
protected void .ctor(Query qyInput, string name, string prefix, XPathNodeType typeTest)
protected void .ctor(BaseAxisQuery other)
public void Reset()
public void SetXsltContext(XsltContext context)
protected string get_Name()
protected string get_Prefix()
protected string get_Namespace()
protected bool get_NameTest()
protected XPathNodeType get_TypeTest()
public int get_CurrentPosition()
public XPathNavigator get_Current()
public bool matches(XPathNavigator e)
public object Evaluate(XPathNodeIterator nodeIterator)
public double get_XsltDefaultPriority()
public XPathResultType get_StaticType()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.BooleanExpr : ValueQuery {
private Query opnd1
private Query opnd2
private bool isOr
public XPathResultType StaticType
public void .ctor(Op op, Query opnd1, Query opnd2)
private void .ctor(BooleanExpr other)
public void SetXsltContext(XsltContext context)
public object Evaluate(XPathNodeIterator nodeIterator)
public XPathNodeIterator Clone()
public XPathResultType get_StaticType()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.BooleanFunctions : ValueQuery {
private Query arg
private FunctionType funcType
public XPathResultType StaticType
public void .ctor(FunctionType funcType, Query arg)
private void .ctor(BooleanFunctions other)
public void SetXsltContext(XsltContext context)
public object Evaluate(XPathNodeIterator nodeIterator)
internal bool toBoolean(double number)
internal bool toBoolean(string str)
internal bool toBoolean(XPathNodeIterator nodeIterator)
public XPathResultType get_StaticType()
private bool Not(XPathNodeIterator nodeIterator)
private bool Lang(XPathNodeIterator nodeIterator)
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.CacheAxisQuery : BaseAxisQuery {
protected List`1<XPathNavigator> outputBuffer
public XPathNavigator Current
public int CurrentPosition
public int Count
public QueryProps Properties
public void .ctor(Query qyInput, string name, string prefix, XPathNodeType typeTest)
protected void .ctor(CacheAxisQuery other)
public void Reset()
public object Evaluate(XPathNodeIterator context)
public XPathNavigator Advance()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public int get_Count()
public QueryProps get_Properties()
}
internal MS.Internal.Xml.XPath.CacheChildrenQuery : ChildrenQuery {
private XPathNavigator nextInput
private ClonableStack`1<XPathNavigator> elementStk
private ClonableStack`1<int> positionStk
private bool needInput
public void .ctor(Query qyInput, string name, string prefix, XPathNodeType type)
private void .ctor(CacheChildrenQuery other)
public void Reset()
public XPathNavigator Advance()
private bool DecideNextNode()
private XPathNavigator GetNextInput()
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.CacheOutputQuery : Query {
internal Query input
protected List`1<XPathNavigator> outputBuffer
public XPathNavigator Current
public XPathResultType StaticType
public int CurrentPosition
public int Count
public QueryProps Properties
public void .ctor(Query input)
protected void .ctor(CacheOutputQuery other)
public void Reset()
public void SetXsltContext(XsltContext context)
public object Evaluate(XPathNodeIterator context)
public XPathNavigator Advance()
public XPathNavigator get_Current()
public XPathResultType get_StaticType()
public int get_CurrentPosition()
public int get_Count()
public QueryProps get_Properties()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.ChildrenQuery : BaseAxisQuery {
private XPathNodeIterator iterator
public void .ctor(Query qyInput, string name, string prefix, XPathNodeType type)
protected void .ctor(ChildrenQuery other)
public void Reset()
public XPathNavigator Advance()
public XPathNavigator MatchNode(XPathNavigator context)
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.ClonableStack`1 : List`1<T> {
public void .ctor(int capacity)
private void .ctor(IEnumerable`1<T> collection)
public void Push(T value)
public T Pop()
public T Peek()
public ClonableStack`1<T> Clone()
}
internal MS.Internal.Xml.XPath.CompiledXpathExpr : XPathExpression {
private Query query
private string expr
private bool needContext
internal Query QueryTree
public string Expression
public XPathResultType ReturnType
internal void .ctor(Query query, string expression, bool needContext)
internal Query get_QueryTree()
public string get_Expression()
public void CheckErrors()
public void AddSort(object expr, IComparer comparer)
public void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType)
public XPathExpression Clone()
public void SetContext(XmlNamespaceManager nsManager)
public void SetContext(IXmlNamespaceResolver nsResolver)
public XPathResultType get_ReturnType()
}
internal MS.Internal.Xml.XPath.ContextQuery : Query {
protected XPathNavigator contextNode
public XPathNavigator Current
public XPathResultType StaticType
public int CurrentPosition
public int Count
public QueryProps Properties
protected void .ctor(ContextQuery other)
public void Reset()
public XPathNavigator get_Current()
public object Evaluate(XPathNodeIterator context)
public XPathNavigator Advance()
public XPathNavigator MatchNode(XPathNavigator current)
public XPathNodeIterator Clone()
public XPathResultType get_StaticType()
public int get_CurrentPosition()
public int get_Count()
public QueryProps get_Properties()
}
internal MS.Internal.Xml.XPath.DescendantBaseQuery : BaseAxisQuery {
protected bool matchSelf
protected bool abbrAxis
public void .ctor(Query qyParent, string Name, string Prefix, XPathNodeType Type, bool matchSelf, bool abbrAxis)
public void .ctor(DescendantBaseQuery other)
public XPathNavigator MatchNode(XPathNavigator context)
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.DescendantOverDescendantQuery : DescendantBaseQuery {
private int level
public void .ctor(Query qyParent, bool matchSelf, string name, string prefix, XPathNodeType typeTest, bool abbrAxis)
private void .ctor(DescendantOverDescendantQuery other)
public void Reset()
public XPathNavigator Advance()
private bool MoveToFirstChild()
private bool MoveUpUntillNext()
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.DescendantQuery : DescendantBaseQuery {
private XPathNodeIterator nodeIterator
internal void .ctor(Query qyParent, string Name, string Prefix, XPathNodeType Type, bool matchSelf, bool abbrAxis)
public void .ctor(DescendantQuery other)
public void Reset()
public XPathNavigator Advance()
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.DocumentOrderQuery : CacheOutputQuery {
public void .ctor(Query qyParent)
private void .ctor(DocumentOrderQuery other)
public object Evaluate(XPathNodeIterator context)
public XPathNavigator MatchNode(XPathNavigator context)
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.EmptyQuery : Query {
public int CurrentPosition
public int Count
public QueryProps Properties
public XPathResultType StaticType
public XPathNavigator Current
public XPathNavigator Advance()
public XPathNodeIterator Clone()
public object Evaluate(XPathNodeIterator context)
public int get_CurrentPosition()
public int get_Count()
public QueryProps get_Properties()
public XPathResultType get_StaticType()
public void Reset()
public XPathNavigator get_Current()
}
internal MS.Internal.Xml.XPath.ExtensionQuery : Query {
protected string prefix
protected string name
protected XsltContext xsltContext
private ResetableIterator queryIterator
public XPathNavigator Current
public int CurrentPosition
protected string QName
public int Count
public XPathResultType StaticType
public void .ctor(string prefix, string name)
protected void .ctor(ExtensionQuery other)
public void Reset()
public XPathNavigator get_Current()
public XPathNavigator Advance()
public int get_CurrentPosition()
protected object ProcessResult(object value)
protected string get_QName()
public int get_Count()
public XPathResultType get_StaticType()
}
internal MS.Internal.Xml.XPath.Filter : AstNode {
private AstNode input
private AstNode condition
public AstType Type
public XPathResultType ReturnType
public AstNode Input
public AstNode Condition
public void .ctor(AstNode input, AstNode condition)
public AstType get_Type()
public XPathResultType get_ReturnType()
public AstNode get_Input()
public AstNode get_Condition()
}
internal MS.Internal.Xml.XPath.FilterQuery : BaseAxisQuery {
private Query cond
private bool noPosition
public Query Condition
public QueryProps Properties
public void .ctor(Query qyParent, Query cond, bool noPosition)
private void .ctor(FilterQuery other)
public void Reset()
public Query get_Condition()
public void SetXsltContext(XsltContext input)
public XPathNavigator Advance()
internal bool EvaluatePredicate()
public XPathNavigator MatchNode(XPathNavigator current)
public QueryProps get_Properties()
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.FollowingQuery : BaseAxisQuery {
private XPathNavigator input
private XPathNodeIterator iterator
public void .ctor(Query qyInput, string name, string prefix, XPathNodeType typeTest)
private void .ctor(FollowingQuery other)
public void Reset()
public XPathNavigator Advance()
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.FollSiblingQuery : BaseAxisQuery {
private ClonableStack`1<XPathNavigator> elementStk
private List`1<XPathNavigator> parentStk
private XPathNavigator nextInput
public void .ctor(Query qyInput, string name, string prefix, XPathNodeType type)
private void .ctor(FollSiblingQuery other)
public void Reset()
private bool Visited(XPathNavigator nav)
private XPathNavigator FetchInput()
public XPathNavigator Advance()
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.ForwardPositionQuery : CacheOutputQuery {
public void .ctor(Query input)
protected void .ctor(ForwardPositionQuery other)
public object Evaluate(XPathNodeIterator context)
public XPathNavigator MatchNode(XPathNavigator context)
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.Function : AstNode {
private FunctionType functionType
private ArrayList argumentList
private string name
private string prefix
internal XPathResultType[] ReturnTypes
public AstType Type
public XPathResultType ReturnType
public FunctionType TypeOfFunction
public ArrayList ArgumentList
public string Prefix
public string Name
public void .ctor(FunctionType ftype, ArrayList argumentList)
public void .ctor(string prefix, string name, ArrayList argumentList)
public void .ctor(FunctionType ftype)
public void .ctor(FunctionType ftype, AstNode arg)
public AstType get_Type()
public XPathResultType get_ReturnType()
public FunctionType get_TypeOfFunction()
public ArrayList get_ArgumentList()
public string get_Prefix()
public string get_Name()
}
internal MS.Internal.Xml.XPath.FunctionQuery : ExtensionQuery {
private IList`1<Query> args
private IXsltContextFunction function
public XPathResultType StaticType
public void .ctor(string prefix, string name, List`1<Query> args)
private void .ctor(FunctionQuery other)
public void SetXsltContext(XsltContext context)
public object Evaluate(XPathNodeIterator nodeIterator)
public XPathNavigator MatchNode(XPathNavigator navigator)
public XPathResultType get_StaticType()
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.Group : AstNode {
private AstNode groupNode
public AstType Type
public XPathResultType ReturnType
public AstNode GroupNode
public void .ctor(AstNode groupNode)
public AstType get_Type()
public XPathResultType get_ReturnType()
public AstNode get_GroupNode()
}
internal MS.Internal.Xml.XPath.GroupQuery : BaseAxisQuery {
public XPathResultType StaticType
public QueryProps Properties
public void .ctor(Query qy)
private void .ctor(GroupQuery other)
public XPathNavigator Advance()
public object Evaluate(XPathNodeIterator nodeIterator)
public XPathNodeIterator Clone()
public XPathResultType get_StaticType()
public QueryProps get_Properties()
}
internal MS.Internal.Xml.XPath.IDQuery : CacheOutputQuery {
public void .ctor(Query arg)
private void .ctor(IDQuery other)
public object Evaluate(XPathNodeIterator context)
private void ProcessIds(XPathNavigator contextNode, string val)
public XPathNavigator MatchNode(XPathNavigator context)
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.IteratorFilter : XPathNodeIterator {
private XPathNodeIterator innerIterator
private string name
private int position
public XPathNavigator Current
public int CurrentPosition
internal void .ctor(XPathNodeIterator innerIterator, string name)
private void .ctor(IteratorFilter it)
public XPathNodeIterator Clone()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public bool MoveNext()
}
internal MS.Internal.Xml.XPath.LogicalExpr : ValueQuery {
private Op op
private Query opnd1
private Query opnd2
private cmpXslt[][] CompXsltE
private cmpXslt[][] CompXsltO
public XPathResultType StaticType
public void .ctor(Op op, Query opnd1, Query opnd2)
private void .ctor(LogicalExpr other)
public void SetXsltContext(XsltContext context)
public object Evaluate(XPathNodeIterator nodeIterator)
private bool cmpQueryQueryE(Op op, object val1, object val2)
private bool cmpQueryQueryO(Op op, object val1, object val2)
private bool cmpQueryNumber(Op op, object val1, object val2)
private bool cmpQueryStringE(Op op, object val1, object val2)
private bool cmpQueryStringO(Op op, object val1, object val2)
private bool cmpRtfQueryE(Op op, object val1, object val2)
private bool cmpRtfQueryO(Op op, object val1, object val2)
private bool cmpQueryBoolE(Op op, object val1, object val2)
private bool cmpQueryBoolO(Op op, object val1, object val2)
private bool cmpBoolBoolE(Op op, bool n1, bool n2)
private bool cmpBoolBoolE(Op op, object val1, object val2)
private bool cmpBoolBoolO(Op op, object val1, object val2)
private bool cmpBoolNumberE(Op op, object val1, object val2)
private bool cmpBoolNumberO(Op op, object val1, object val2)
private bool cmpBoolStringE(Op op, object val1, object val2)
private bool cmpRtfBoolE(Op op, object val1, object val2)
private bool cmpBoolStringO(Op op, object val1, object val2)
private bool cmpRtfBoolO(Op op, object val1, object val2)
private bool cmpNumberNumber(Op op, double n1, double n2)
private bool cmpNumberNumberO(Op op, double n1, double n2)
private bool cmpNumberNumber(Op op, object val1, object val2)
private bool cmpStringNumber(Op op, object val1, object val2)
private bool cmpRtfNumber(Op op, object val1, object val2)
private bool cmpStringStringE(Op op, string n1, string n2)
private bool cmpStringStringE(Op op, object val1, object val2)
private bool cmpRtfStringE(Op op, object val1, object val2)
private bool cmpRtfRtfE(Op op, object val1, object val2)
private bool cmpStringStringO(Op op, object val1, object val2)
private bool cmpRtfStringO(Op op, object val1, object val2)
private bool cmpRtfRtfO(Op op, object val1, object val2)
public XPathNodeIterator Clone()
private string Rtf(object o)
public XPathResultType get_StaticType()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.MergeFilterQuery : CacheOutputQuery {
private Query child
public void .ctor(Query input, Query child)
private void .ctor(MergeFilterQuery other)
public void SetXsltContext(XsltContext xsltContext)
public object Evaluate(XPathNodeIterator nodeIterator)
public XPathNavigator MatchNode(XPathNavigator current)
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.NamespaceQuery : BaseAxisQuery {
private bool onNamespace
public void .ctor(Query qyParent, string Name, string Prefix, XPathNodeType Type)
private void .ctor(NamespaceQuery other)
public void Reset()
public XPathNavigator Advance()
public bool matches(XPathNavigator e)
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.NodeFunctions : ValueQuery {
private Query arg
private FunctionType funcType
private XsltContext xsltContext
public XPathResultType StaticType
public void .ctor(FunctionType funcType, Query arg)
public void SetXsltContext(XsltContext context)
private XPathNavigator EvaluateArg(XPathNodeIterator context)
public object Evaluate(XPathNodeIterator context)
public XPathResultType get_StaticType()
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.NumberFunctions : ValueQuery {
private Query arg
private FunctionType ftype
public XPathResultType StaticType
public void .ctor(FunctionType ftype, Query arg)
private void .ctor(NumberFunctions other)
public void SetXsltContext(XsltContext context)
internal double Number(bool arg)
internal double Number(string arg)
public object Evaluate(XPathNodeIterator nodeIterator)
private double Number(XPathNodeIterator nodeIterator)
private double Sum(XPathNodeIterator nodeIterator)
private double Floor(XPathNodeIterator nodeIterator)
private double Ceiling(XPathNodeIterator nodeIterator)
private double Round(XPathNodeIterator nodeIterator)
public XPathResultType get_StaticType()
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.NumericExpr : ValueQuery {
private Op op
private Query opnd1
private Query opnd2
public XPathResultType StaticType
public void .ctor(Op op, Query opnd1, Query opnd2)
private void .ctor(NumericExpr other)
public void SetXsltContext(XsltContext context)
public object Evaluate(XPathNodeIterator nodeIterator)
private double GetValue(Op op, double n1, double n2)
public XPathResultType get_StaticType()
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.Operand : AstNode {
private XPathResultType type
private object val
public AstType Type
public XPathResultType ReturnType
public object OperandValue
public void .ctor(string val)
public void .ctor(double val)
public void .ctor(bool val)
public AstType get_Type()
public XPathResultType get_ReturnType()
public object get_OperandValue()
}
internal MS.Internal.Xml.XPath.OperandQuery : ValueQuery {
internal object val
public XPathResultType StaticType
public void .ctor(object val)
public object Evaluate(XPathNodeIterator nodeIterator)
public XPathResultType get_StaticType()
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.Operator : AstNode {
private Op[] invertOp
private Op opType
private AstNode opnd1
private AstNode opnd2
public AstType Type
public XPathResultType ReturnType
public Op OperatorType
public AstNode Operand1
public AstNode Operand2
public Op InvertOperator(Op op)
public void .ctor(Op op, AstNode opnd1, AstNode opnd2)
public AstType get_Type()
public XPathResultType get_ReturnType()
public Op get_OperatorType()
public AstNode get_Operand1()
public AstNode get_Operand2()
}
internal MS.Internal.Xml.XPath.ParentQuery : CacheAxisQuery {
public void .ctor(Query qyInput, string Name, string Prefix, XPathNodeType Type)
private void .ctor(ParentQuery other)
public object Evaluate(XPathNodeIterator context)
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.PrecedingQuery : BaseAxisQuery {
private XPathNodeIterator workIterator
private ClonableStack`1<XPathNavigator> ancestorStk
public QueryProps Properties
public void .ctor(Query qyInput, string name, string prefix, XPathNodeType typeTest)
private void .ctor(PrecedingQuery other)
public void Reset()
public XPathNavigator Advance()
public XPathNodeIterator Clone()
public QueryProps get_Properties()
}
internal MS.Internal.Xml.XPath.PreSiblingQuery : CacheAxisQuery {
public QueryProps Properties
public void .ctor(Query qyInput, string name, string prefix, XPathNodeType typeTest)
protected void .ctor(PreSiblingQuery other)
private bool NotVisited(XPathNavigator nav, List`1<XPathNavigator> parentStk)
public object Evaluate(XPathNodeIterator context)
public XPathNodeIterator Clone()
public QueryProps get_Properties()
}
internal MS.Internal.Xml.XPath.Query : ResetableIterator {
public XPathResultType XPathResultType_Navigator
public int Count
public double XsltDefaultPriority
public XPathResultType StaticType
public QueryProps Properties
protected void .ctor(Query other)
public bool MoveNext()
public int get_Count()
public void SetXsltContext(XsltContext context)
public object Evaluate(XPathNodeIterator nodeIterator)
public XPathNavigator Advance()
public XPathNavigator MatchNode(XPathNavigator current)
public double get_XsltDefaultPriority()
public XPathResultType get_StaticType()
public QueryProps get_Properties()
public Query Clone(Query input)
protected XPathNodeIterator Clone(XPathNodeIterator input)
protected XPathNavigator Clone(XPathNavigator input)
public bool Insert(List`1<XPathNavigator> buffer, XPathNavigator nav)
private int GetMedian(int l, int r)
public XmlNodeOrder CompareNodes(XPathNavigator l, XPathNavigator r)
private void AssertDOD(List`1<XPathNavigator> buffer, XPathNavigator nav, int pos)
public void AssertQuery(Query query)
protected XPathResultType GetXPathType(object value)
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.QueryBuilder : object {
private string query
private bool allowVar
private bool allowKey
private bool allowCurrent
private bool needContext
private BaseAxisQuery firstInput
private int parseDepth
private int MaxParseDepth
private void Reset()
private Query ProcessAxis(Axis root, Flags flags, Props& props)
private bool CanBeNumber(Query q)
private Query ProcessFilter(Filter root, Flags flags, Props& props)
private Query ProcessOperator(Operator root, Props& props)
private Query ProcessVariable(Variable root)
private Query ProcessFunction(Function root, Props& props)
private List`1<Query> ProcessArguments(ArrayList args, Props& props)
private Query ProcessNode(AstNode root, Flags flags, Props& props)
private Query Build(AstNode root, string query)
internal Query Build(string query, bool allowVar, bool allowKey)
internal Query Build(string query, Boolean& needContext)
internal Query BuildPatternQuery(string query, bool allowVar, bool allowKey)
internal Query BuildPatternQuery(string query, Boolean& needContext)
}
internal MS.Internal.Xml.XPath.QueryProps : Enum {
public int value__
public QueryProps None
public QueryProps Position
public QueryProps Count
public QueryProps Cached
public QueryProps Reverse
public QueryProps Merge
}
internal MS.Internal.Xml.XPath.ResetableIterator : XPathNodeIterator {
public int CurrentPosition
protected void .ctor(ResetableIterator other)
protected void ResetCount()
public void Reset()
public bool MoveToPosition(int pos)
public int get_CurrentPosition()
}
internal MS.Internal.Xml.XPath.ReversePositionQuery : ForwardPositionQuery {
public int CurrentPosition
public QueryProps Properties
public void .ctor(Query input)
private void .ctor(ReversePositionQuery other)
public XPathNodeIterator Clone()
public int get_CurrentPosition()
public QueryProps get_Properties()
}
internal MS.Internal.Xml.XPath.Root : AstNode {
public AstType Type
public XPathResultType ReturnType
public AstType get_Type()
public XPathResultType get_ReturnType()
}
internal MS.Internal.Xml.XPath.SortKey : object {
private int numKeys
private Object[] keys
private int originalPosition
private XPathNavigator node
public object Item
public int NumKeys
public int OriginalPosition
public XPathNavigator Node
public void .ctor(int numKeys, int originalPosition, XPathNavigator node)
public object get_Item(int index)
public void set_Item(int index, object value)
public int get_NumKeys()
public int get_OriginalPosition()
public XPathNavigator get_Node()
}
internal MS.Internal.Xml.XPath.SortQuery : Query {
private List`1<SortKey> results
private XPathSortComparer comparer
private Query qyInput
public XPathNavigator Current
public XPathResultType StaticType
public int CurrentPosition
public int Count
public QueryProps Properties
public void .ctor(Query qyInput)
private void .ctor(SortQuery other)
public void Reset()
public void SetXsltContext(XsltContext xsltContext)
private void BuildResultsList()
public object Evaluate(XPathNodeIterator context)
public XPathNavigator Advance()
public XPathNavigator get_Current()
internal void AddSort(Query evalQuery, IComparer comparer)
public XPathNodeIterator Clone()
public XPathResultType get_StaticType()
public int get_CurrentPosition()
public int get_Count()
public QueryProps get_Properties()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.StringFunctions : ValueQuery {
private FunctionType funcType
private IList`1<Query> argList
private CompareInfo compareInfo
public XPathResultType StaticType
public void .ctor(FunctionType funcType, IList`1<Query> argList)
private void .ctor(StringFunctions other)
public void SetXsltContext(XsltContext context)
public object Evaluate(XPathNodeIterator nodeIterator)
internal string toString(double num)
internal string toString(bool b)
private string toString(XPathNodeIterator nodeIterator)
public XPathResultType get_StaticType()
private string Concat(XPathNodeIterator nodeIterator)
private bool StartsWith(XPathNodeIterator nodeIterator)
private bool Contains(XPathNodeIterator nodeIterator)
private string SubstringBefore(XPathNodeIterator nodeIterator)
private string SubstringAfter(XPathNodeIterator nodeIterator)
private string Substring(XPathNodeIterator nodeIterator)
private double StringLength(XPathNodeIterator nodeIterator)
private string Normalize(XPathNodeIterator nodeIterator)
private string Translate(XPathNodeIterator nodeIterator)
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.UnionExpr : Query {
internal Query qy1
internal Query qy2
private bool advance1
private bool advance2
private XPathNavigator currentNode
private XPathNavigator nextNode
public XPathResultType StaticType
public XPathNavigator Current
public int CurrentPosition
public void .ctor(Query query1, Query query2)
private void .ctor(UnionExpr other)
public void Reset()
public void SetXsltContext(XsltContext xsltContext)
public object Evaluate(XPathNodeIterator context)
private XPathNavigator ProcessSamePosition(XPathNavigator result)
private XPathNavigator ProcessBeforePosition(XPathNavigator res1, XPathNavigator res2)
private XPathNavigator ProcessAfterPosition(XPathNavigator res1, XPathNavigator res2)
public XPathNavigator Advance()
public XPathNavigator MatchNode(XPathNavigator xsltContext)
public XPathResultType get_StaticType()
public XPathNodeIterator Clone()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.ValueQuery : Query {
public XPathNavigator Current
public int CurrentPosition
public int Count
protected void .ctor(ValueQuery other)
public void Reset()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public int get_Count()
public XPathNavigator Advance()
}
internal MS.Internal.Xml.XPath.Variable : AstNode {
private string localname
private string prefix
public AstType Type
public XPathResultType ReturnType
public string Localname
public string Prefix
public void .ctor(string name, string prefix)
public AstType get_Type()
public XPathResultType get_ReturnType()
public string get_Localname()
public string get_Prefix()
}
internal MS.Internal.Xml.XPath.VariableQuery : ExtensionQuery {
private IXsltContextVariable variable
public XPathResultType StaticType
public void .ctor(string name, string prefix)
private void .ctor(VariableQuery other)
public void SetXsltContext(XsltContext context)
public object Evaluate(XPathNodeIterator nodeIterator)
public XPathResultType get_StaticType()
public XPathNodeIterator Clone()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.XPathAncestorIterator : XPathAxisIterator {
public void .ctor(XPathNavigator nav, XPathNodeType type, bool matchSelf)
public void .ctor(XPathNavigator nav, string name, string namespaceURI, bool matchSelf)
public void .ctor(XPathAncestorIterator other)
public bool MoveNext()
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.XPathAncestorQuery : CacheAxisQuery {
private bool matchSelf
public int CurrentPosition
public QueryProps Properties
public void .ctor(Query qyInput, string name, string prefix, XPathNodeType typeTest, bool matchSelf)
private void .ctor(XPathAncestorQuery other)
public object Evaluate(XPathNodeIterator context)
public XPathNodeIterator Clone()
public int get_CurrentPosition()
public QueryProps get_Properties()
public void PrintQuery(XmlWriter w)
}
internal MS.Internal.Xml.XPath.XPathArrayIterator : ResetableIterator {
protected IList list
protected int index
public IList AsList
public XPathNavigator Current
public int CurrentPosition
public int Count
private object debuggerDisplayProxy
public void .ctor(IList list)
public void .ctor(XPathArrayIterator it)
public void .ctor(XPathNodeIterator nodeIterator)
public IList get_AsList()
public XPathNodeIterator Clone()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public int get_Count()
public bool MoveNext()
public void Reset()
public IEnumerator GetEnumerator()
private object get_debuggerDisplayProxy()
}
internal MS.Internal.Xml.XPath.XPathAxisIterator : XPathNodeIterator {
internal XPathNavigator nav
internal XPathNodeType type
internal string name
internal string uri
internal int position
internal bool matchSelf
internal bool first
public XPathNavigator Current
public int CurrentPosition
protected bool Matches
public void .ctor(XPathNavigator nav, bool matchSelf)
public void .ctor(XPathNavigator nav, XPathNodeType type, bool matchSelf)
public void .ctor(XPathNavigator nav, string name, string namespaceURI, bool matchSelf)
public void .ctor(XPathAxisIterator it)
public XPathNavigator get_Current()
public int get_CurrentPosition()
protected bool get_Matches()
}
internal MS.Internal.Xml.XPath.XPathChildIterator : XPathAxisIterator {
public void .ctor(XPathNavigator nav, XPathNodeType type)
public void .ctor(XPathNavigator nav, string name, string namespaceURI)
public void .ctor(XPathChildIterator it)
public XPathNodeIterator Clone()
public bool MoveNext()
}
internal MS.Internal.Xml.XPath.XPathComparerHelper : object {
private XmlSortOrder order
private XmlCaseOrder caseOrder
private CultureInfo cinfo
private XmlDataType dataType
public void .ctor(XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType)
public int Compare(object x, object y)
}
internal MS.Internal.Xml.XPath.XPathDescendantIterator : XPathAxisIterator {
private int level
public void .ctor(XPathNavigator nav, XPathNodeType type, bool matchSelf)
public void .ctor(XPathNavigator nav, string name, string namespaceURI, bool matchSelf)
public void .ctor(XPathDescendantIterator it)
public XPathNodeIterator Clone()
public bool MoveNext()
}
internal MS.Internal.Xml.XPath.XPathEmptyIterator : ResetableIterator {
public XPathEmptyIterator Instance
public XPathNavigator Current
public int CurrentPosition
public int Count
public XPathNodeIterator Clone()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public int get_Count()
public bool MoveNext()
public void Reset()
}
internal MS.Internal.Xml.XPath.XPathMultyIterator : ResetableIterator {
protected ResetableIterator[] arr
protected int firstNotEmpty
protected int position
public XPathNavigator Current
public int CurrentPosition
public void .ctor(ArrayList inputArray)
private void Init()
private bool Advance(int pos)
private bool SiftItem(int item)
public void Reset()
public void .ctor(XPathMultyIterator it)
public XPathNodeIterator Clone()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public bool MoveNext()
}
internal MS.Internal.Xml.XPath.XPathParser : object {
private XPathScanner scanner
private int parseDepth
private int MaxParseDepth
private XPathResultType[] temparray1
private XPathResultType[] temparray2
private XPathResultType[] temparray3
private XPathResultType[] temparray4
private XPathResultType[] temparray5
private XPathResultType[] temparray6
private XPathResultType[] temparray7
private XPathResultType[] temparray8
private XPathResultType[] temparray9
private Hashtable functionTable
private Hashtable AxesTable
private void .ctor(XPathScanner scanner)
public AstNode ParseXPathExpresion(string xpathExpresion)
public AstNode ParseXPathPattern(string xpathPattern)
private AstNode ParseExpresion(AstNode qyInput)
private AstNode ParseOrExpr(AstNode qyInput)
private AstNode ParseAndExpr(AstNode qyInput)
private AstNode ParseEqualityExpr(AstNode qyInput)
private AstNode ParseRelationalExpr(AstNode qyInput)
private AstNode ParseAdditiveExpr(AstNode qyInput)
private AstNode ParseMultiplicativeExpr(AstNode qyInput)
private AstNode ParseUnaryExpr(AstNode qyInput)
private AstNode ParseUnionExpr(AstNode qyInput)
private bool IsNodeType(XPathScanner scaner)
private AstNode ParsePathExpr(AstNode qyInput)
private AstNode ParseFilterExpr(AstNode qyInput)
private AstNode ParsePredicate(AstNode qyInput)
private AstNode ParseLocationPath(AstNode qyInput)
private AstNode ParseRelativeLocationPath(AstNode qyInput)
private bool IsStep(LexKind lexKind)
private AstNode ParseStep(AstNode qyInput)
private AstNode ParseNodeTest(AstNode qyInput, AxisType axisType, XPathNodeType nodeType)
private bool IsPrimaryExpr(XPathScanner scanner)
private AstNode ParsePrimaryExpr(AstNode qyInput)
private AstNode ParseMethod(AstNode qyInput)
private AstNode ParsePattern(AstNode qyInput)
private AstNode ParseLocationPathPattern(AstNode qyInput)
private AstNode ParseIdKeyPattern(AstNode qyInput)
private AstNode ParseRelativePathPattern(AstNode qyInput)
private AstNode ParseStepPattern(AstNode qyInput)
private void CheckToken(LexKind t)
private void PassToken(LexKind t)
private void NextLex()
private bool TestOp(string op)
private void CheckNodeSet(XPathResultType t)
private Hashtable CreateFunctionTable()
private Hashtable CreateAxesTable()
private AxisType GetAxis(XPathScanner scaner)
}
internal MS.Internal.Xml.XPath.XPathScanner : object {
private string xpathExpr
private int xpathExprIndex
private LexKind kind
private char currentChar
private string name
private string prefix
private string stringValue
private double numberValue
private bool canBeFunction
private XmlCharType xmlCharType
public string SourceText
private char CurerntChar
public LexKind Kind
public string Name
public string Prefix
public string StringValue
public double NumberValue
public bool CanBeFunction
public void .ctor(string xpathExpr)
public string get_SourceText()
private char get_CurerntChar()
private bool NextChar()
public LexKind get_Kind()
public string get_Name()
public string get_Prefix()
public string get_StringValue()
public double get_NumberValue()
public bool get_CanBeFunction()
private void SkipSpace()
public bool NextLex()
private double ScanNumber()
private double ScanFraction()
private string ScanString()
private string ScanName()
}
internal MS.Internal.Xml.XPath.XPathSelectionIterator : ResetableIterator {
private XPathNavigator nav
private Query query
private int position
public int Count
public XPathNavigator Current
public int CurrentPosition
internal void .ctor(XPathNavigator nav, Query query)
protected void .ctor(XPathSelectionIterator it)
public void Reset()
public bool MoveNext()
public int get_Count()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.XPathSelfQuery : BaseAxisQuery {
public void .ctor(Query qyInput, string Name, string Prefix, XPathNodeType Type)
private void .ctor(XPathSelfQuery other)
public XPathNavigator Advance()
public XPathNodeIterator Clone()
}
internal MS.Internal.Xml.XPath.XPathSingletonIterator : ResetableIterator {
private XPathNavigator nav
private int position
public XPathNavigator Current
public int CurrentPosition
public int Count
public void .ctor(XPathNavigator nav)
public void .ctor(XPathNavigator nav, bool moved)
public void .ctor(XPathSingletonIterator it)
public XPathNodeIterator Clone()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public int get_Count()
public bool MoveNext()
public void Reset()
}
internal MS.Internal.Xml.XPath.XPathSortComparer : object {
private int minSize
private Query[] expressions
private IComparer[] comparers
private int numSorts
public int NumSorts
public void .ctor(int size)
public void AddSort(Query evalQuery, IComparer comparer)
public int get_NumSorts()
public Query Expression(int i)
private int System.Collections.Generic.IComparer<MS.Internal.Xml.XPath.SortKey>.Compare(SortKey x, SortKey y)
internal XPathSortComparer Clone()
}
internal SR : object {
internal string GetString(string name, Object[] args)
internal string GetString(CultureInfo culture, string name, Object[] args)
internal string GetString(string name)
internal string GetString(CultureInfo culture, string name)
internal string Format(string resourceFormat, Object[] args)
internal string Format(string resourceFormat, object p1)
internal string Format(string resourceFormat, object p1, object p2)
internal string Format(string resourceFormat, object p1, object p2, object p3)
}
internal System.Configuration.PrivilegedConfigurationManager : object {
internal ConnectionStringSettingsCollection ConnectionStrings
internal ConnectionStringSettingsCollection get_ConnectionStrings()
internal object GetSection(string sectionName)
}
internal System.HResults : object {
internal int Configuration
internal int Xml
internal int XmlSchema
internal int XmlXslt
internal int XmlXPath
internal int Data
internal int DataDeletedRowInaccessible
internal int DataDuplicateName
internal int DataInRowChangingEvent
internal int DataInvalidConstraint
internal int DataMissingPrimaryKey
internal int DataNoNullAllowed
internal int DataReadOnly
internal int DataRowNotInTable
internal int DataVersionNotFound
internal int DataConstraint
internal int StrongTyping
internal int SqlType
internal int SqlNullValue
internal int SqlTruncate
internal int AdapterMapping
internal int DataAdapter
internal int DBConcurrency
internal int OperationAborted
internal int InvalidUdt
internal int Metadata
internal int InvalidQuery
internal int CommandCompilation
internal int CommandExecution
internal int SqlException
internal int OdbcException
internal int OracleException
internal int ConnectionPlanException
internal int NteBadKeySet
internal int Win32AccessDenied
internal int Win32InvalidHandle
internal int License
internal int InternalBufferOverflow
internal int ServiceControllerTimeout
internal int Install
internal int EFail
}
internal System.InvariantComparer : object {
private CompareInfo m_compareInfo
internal InvariantComparer Default
public int Compare(object a, object b)
}
internal System.LocalAppContextSwitches : object {
public bool IgnoreEmptyKeySequences
public bool DontThrowOnInvalidSurrogatePairs
public bool IgnoreKindInUtcTimeSerialization
public bool EnableTimeSpanSerialization
}
internal System.Xml.AsyncHelper : object {
public Task DoneTask
public Task`1<bool> DoneTaskTrue
public Task`1<bool> DoneTaskFalse
public Task`1<int> DoneTaskZero
public bool IsSuccess(Task task)
public Task CallVoidFuncWhenFinish(Task task, Action func)
private Task _CallVoidFuncWhenFinish(Task task, Action func)
public Task`1<bool> ReturnTaskBoolWhenFinish(Task task, bool ret)
public Task`1<bool> _ReturnTaskBoolWhenFinish(Task task, bool ret)
public Task CallTaskFuncWhenFinish(Task task, Func`1<Task> func)
private Task _CallTaskFuncWhenFinish(Task task, Func`1<Task> func)
public Task`1<bool> CallBoolTaskFuncWhenFinish(Task task, Func`1<Task`1<bool>> func)
private Task`1<bool> _CallBoolTaskFuncWhenFinish(Task task, Func`1<Task`1<bool>> func)
public Task`1<bool> ContinueBoolTaskFuncWhenFalse(Task`1<bool> task, Func`1<Task`1<bool>> func)
private Task`1<bool> _ContinueBoolTaskFuncWhenFalse(Task`1<bool> task, Func`1<Task`1<bool>> func)
}
internal System.Xml.AttributeProperties : Enum {
public UInt32 value__
public AttributeProperties DEFAULT
public AttributeProperties URI
public AttributeProperties BOOLEAN
public AttributeProperties NAME
}
internal System.Xml.AttributePSVIInfo : object {
internal string localName
internal string namespaceUri
internal object typedAttributeValue
internal XmlSchemaInfo attributeSchemaInfo
internal void Reset()
}
internal System.Xml.Base64Decoder : IncrementalReadDecoder {
private Byte[] buffer
private int startIndex
private int curIndex
private int endIndex
private int bits
private int bitsFilled
private string CharsBase64
private Byte[] MapBase64
private int MaxValidChar
private byte Invalid
internal int DecodedCount
internal bool IsFull
internal int get_DecodedCount()
internal bool get_IsFull()
internal int Decode(Char[] chars, int startPos, int len)
internal int Decode(string str, int startPos, int len)
internal void Reset()
internal void SetNextOutputBuffer(Array buffer, int index, int count)
private Byte[] ConstructMapBase64()
private void Decode(Char* pChars, Char* pCharsEndPos, Byte* pBytes, Byte* pBytesEndPos, Int32& charsDecoded, Int32& bytesDecoded)
}
internal System.Xml.Base64Encoder : object {
private Byte[] leftOverBytes
private int leftOverBytesCount
private Char[] charsLine
internal int Base64LineSize
internal int LineSizeInBytes
internal void WriteChars(Char[] chars, int index, int count)
internal void Encode(Byte[] buffer, int index, int count)
internal void Flush()
internal Task WriteCharsAsync(Char[] chars, int index, int count)
internal Task EncodeAsync(Byte[] buffer, int index, int count)
internal Task FlushAsync()
}
internal System.Xml.BinaryCompatibility : object {
private bool _targetsAtLeast_Desktop_V4_5_2
internal bool TargetsAtLeast_Desktop_V4_5_2
internal bool get_TargetsAtLeast_Desktop_V4_5_2()
private bool RunningOnCheck(string propertyName)
}
internal System.Xml.BinHexDecoder : IncrementalReadDecoder {
private Byte[] buffer
private int startIndex
private int curIndex
private int endIndex
private bool hasHalfByteCached
private byte cachedHalfByte
internal int DecodedCount
internal bool IsFull
internal int get_DecodedCount()
internal bool get_IsFull()
internal int Decode(Char[] chars, int startPos, int len)
internal int Decode(string str, int startPos, int len)
internal void Reset()
internal void SetNextOutputBuffer(Array buffer, int index, int count)
public Byte[] Decode(Char[] chars, bool allowOddChars)
private void Decode(Char* pChars, Char* pCharsEndPos, Byte* pBytes, Byte* pBytesEndPos, Boolean& hasHalfByteCached, Byte& cachedHalfByte, Int32& charsDecoded, Int32& bytesDecoded)
}
internal System.Xml.BinHexEncoder : object {
private string s_hexDigits
private int CharsChunkSize
internal void Encode(Byte[] buffer, int index, int count, XmlWriter writer)
internal string Encode(Byte[] inArray, int offsetIn, int count)
private int Encode(Byte[] inArray, int offsetIn, int count, Char[] outArray)
internal Task EncodeAsync(Byte[] buffer, int index, int count, XmlWriter writer)
}
internal System.Xml.BinXmlDateTime : object {
private int MaxFractionDigits
internal Int32[] KatmaiTimeScaleMultiplicator
private double SQLTicksPerMillisecond
public int SQLTicksPerSecond
public int SQLTicksPerMinute
public int SQLTicksPerHour
private int SQLTicksPerDay
private void Write2Dig(StringBuilder sb, int val)
private void Write4DigNeg(StringBuilder sb, int val)
private void Write3Dec(StringBuilder sb, int val)
private void WriteDate(StringBuilder sb, int yr, int mnth, int day)
private void WriteTime(StringBuilder sb, int hr, int min, int sec, int ms)
private void WriteTimeFullPrecision(StringBuilder sb, int hr, int min, int sec, int fraction)
private void WriteTimeZone(StringBuilder sb, TimeSpan zone)
private void WriteTimeZone(StringBuilder sb, bool negTimeZone, int hr, int min)
private void BreakDownXsdDateTime(long val, Int32& yr, Int32& mnth, Int32& day, Int32& hr, Int32& min, Int32& sec, Int32& ms)
private void BreakDownXsdDate(long val, Int32& yr, Int32& mnth, Int32& day, Boolean& negTimeZone, Int32& hr, Int32& min)
private void BreakDownXsdTime(long val, Int32& hr, Int32& min, Int32& sec, Int32& ms)
public string XsdDateTimeToString(long val)
public DateTime XsdDateTimeToDateTime(long val)
public string XsdDateToString(long val)
public DateTime XsdDateToDateTime(long val)
public string XsdTimeToString(long val)
public DateTime XsdTimeToDateTime(long val)
public string SqlDateTimeToString(int dateticks, UInt32 timeticks)
public DateTime SqlDateTimeToDateTime(int dateticks, UInt32 timeticks)
public string SqlSmallDateTimeToString(short dateticks, ushort timeticks)
public DateTime SqlSmallDateTimeToDateTime(short dateticks, ushort timeticks)
public DateTime XsdKatmaiDateToDateTime(Byte[] data, int offset)
public DateTime XsdKatmaiDateTimeToDateTime(Byte[] data, int offset)
public DateTime XsdKatmaiTimeToDateTime(Byte[] data, int offset)
public DateTime XsdKatmaiDateOffsetToDateTime(Byte[] data, int offset)
public DateTime XsdKatmaiDateTimeOffsetToDateTime(Byte[] data, int offset)
public DateTime XsdKatmaiTimeOffsetToDateTime(Byte[] data, int offset)
public DateTimeOffset XsdKatmaiDateToDateTimeOffset(Byte[] data, int offset)
public DateTimeOffset XsdKatmaiDateTimeToDateTimeOffset(Byte[] data, int offset)
public DateTimeOffset XsdKatmaiTimeToDateTimeOffset(Byte[] data, int offset)
public DateTimeOffset XsdKatmaiDateOffsetToDateTimeOffset(Byte[] data, int offset)
public DateTimeOffset XsdKatmaiDateTimeOffsetToDateTimeOffset(Byte[] data, int offset)
public DateTimeOffset XsdKatmaiTimeOffsetToDateTimeOffset(Byte[] data, int offset)
public string XsdKatmaiDateToString(Byte[] data, int offset)
public string XsdKatmaiDateTimeToString(Byte[] data, int offset)
public string XsdKatmaiTimeToString(Byte[] data, int offset)
public string XsdKatmaiDateOffsetToString(Byte[] data, int offset)
public string XsdKatmaiDateTimeOffsetToString(Byte[] data, int offset)
public string XsdKatmaiTimeOffsetToString(Byte[] data, int offset)
private long GetKatmaiDateTicks(Byte[] data, Int32& pos)
private long GetKatmaiTimeTicks(Byte[] data, Int32& pos)
private long GetKatmaiTimeZoneTicks(Byte[] data, int pos)
private int GetFractions(DateTime dt)
private int GetFractions(DateTimeOffset dt)
}
internal System.Xml.BinXmlSqlDecimal : ValueType {
internal byte m_bLen
internal byte m_bPrec
internal byte m_bScale
internal byte m_bSign
internal UInt32 m_data1
internal UInt32 m_data2
internal UInt32 m_data3
internal UInt32 m_data4
private byte NUMERIC_MAX_PRECISION
private byte MaxPrecision
private byte MaxScale
private int x_cNumeMax
private long x_lInt32Base
private ulong x_ulInt32Base
private ulong x_ulInt32BaseForMod
internal ulong x_llMax
private double DUINT_BASE
private double DUINT_BASE2
private double DUINT_BASE3
private UInt32[] x_rgulShiftBase
private Byte[] rgCLenFromPrec
public bool IsPositive
public bool get_IsPositive()
public void .ctor(Byte[] data, int offset, bool trim)
public void Write(Stream strm)
private void WriteUI4(UInt32 val, Stream strm)
private UInt32 UIntFromByteArray(Byte[] data, int offset)
private bool FZero()
private void StoreFromWorkingArray(UInt32[] rguiData)
private bool FGt10_38(UInt32[] rglData)
private void MpDiv1(UInt32[] rgulU, Int32& ciulU, UInt32 iulD, UInt32& iulR)
private void MpNormalize(UInt32[] rgulU, Int32& ciulU)
internal void AdjustScale(int digits, bool fRound)
private void AddULong(UInt32 ulAdd)
private void MultByULong(UInt32 uiMultiplier)
internal UInt32 DivByULong(UInt32 iDivisor)
private byte CLenFromPrec(byte bPrec)
private char ChFromDigit(UInt32 uiDigit)
public decimal ToDecimal()
private void TrimTrailingZeros()
public string ToString()
private void AssertValid()
}
internal System.Xml.BinXmlSqlMoney : ValueType {
private long data
public void .ctor(int v)
public void .ctor(long v)
public decimal ToDecimal()
public string ToString()
}
internal System.Xml.BinXmlToken : Enum {
public int value__
public BinXmlToken Error
public BinXmlToken NotImpl
public BinXmlToken EOF
public BinXmlToken XmlDecl
public BinXmlToken Encoding
public BinXmlToken DocType
public BinXmlToken System
public BinXmlToken Public
public BinXmlToken Subset
public BinXmlToken Element
public BinXmlToken EndElem
public BinXmlToken Attr
public BinXmlToken EndAttrs
public BinXmlToken PI
public BinXmlToken Comment
public BinXmlToken CData
public BinXmlToken EndCData
public BinXmlToken Name
public BinXmlToken QName
public BinXmlToken XmlText
public BinXmlToken Nest
public BinXmlToken EndNest
public BinXmlToken Extn
public BinXmlToken NmFlush
public BinXmlToken SQL_BIT
public BinXmlToken SQL_TINYINT
public BinXmlToken SQL_SMALLINT
public BinXmlToken SQL_INT
public BinXmlToken SQL_BIGINT
public BinXmlToken SQL_REAL
public BinXmlToken SQL_FLOAT
public BinXmlToken SQL_MONEY
public BinXmlToken SQL_SMALLMONEY
public BinXmlToken SQL_DATETIME
public BinXmlToken SQL_SMALLDATETIME
public BinXmlToken SQL_DECIMAL
public BinXmlToken SQL_NUMERIC
public BinXmlToken SQL_UUID
public BinXmlToken SQL_VARBINARY
public BinXmlToken SQL_BINARY
public BinXmlToken SQL_IMAGE
public BinXmlToken SQL_CHAR
public BinXmlToken SQL_VARCHAR
public BinXmlToken SQL_TEXT
public BinXmlToken SQL_NVARCHAR
public BinXmlToken SQL_NCHAR
public BinXmlToken SQL_NTEXT
public BinXmlToken SQL_UDT
public BinXmlToken XSD_KATMAI_DATE
public BinXmlToken XSD_KATMAI_DATETIME
public BinXmlToken XSD_KATMAI_TIME
public BinXmlToken XSD_KATMAI_DATEOFFSET
public BinXmlToken XSD_KATMAI_DATETIMEOFFSET
public BinXmlToken XSD_KATMAI_TIMEOFFSET
public BinXmlToken XSD_BOOLEAN
public BinXmlToken XSD_TIME
public BinXmlToken XSD_DATETIME
public BinXmlToken XSD_DATE
public BinXmlToken XSD_BINHEX
public BinXmlToken XSD_BASE64
public BinXmlToken XSD_DECIMAL
public BinXmlToken XSD_BYTE
public BinXmlToken XSD_UNSIGNEDSHORT
public BinXmlToken XSD_UNSIGNEDINT
public BinXmlToken XSD_UNSIGNEDLONG
public BinXmlToken XSD_QNAME
}
internal System.Xml.Bits : object {
private UInt32 MASK_0101010101010101
private UInt32 MASK_0011001100110011
private UInt32 MASK_0000111100001111
private UInt32 MASK_0000000011111111
private UInt32 MASK_1111111111111111
public int Count(UInt32 num)
public bool ExactlyOne(UInt32 num)
public bool MoreThanOne(UInt32 num)
public UInt32 ClearLeast(UInt32 num)
public int LeastPosition(UInt32 num)
}
internal System.Xml.BitStack : object {
private UInt32[] bitStack
private int stackPos
private UInt32 curr
public bool IsEmpty
public void PushBit(bool bit)
public bool PopBit()
public bool PeekBit()
public bool get_IsEmpty()
private void PushCurr()
private void PopCurr()
}
internal System.Xml.ByteStack : object {
private Byte[] stack
private int growthRate
private int top
private int size
public int Length
public void .ctor(int growthRate)
public void Push(byte data)
public byte Pop()
public byte Peek()
public int get_Length()
}
internal System.Xml.CachingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XsdCachingReader cachingReader)
public IAsyncResult BeginInvoke(XsdCachingReader cachingReader, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Xml.CharEntityEncoderFallback : EncoderFallback {
private CharEntityEncoderFallbackBuffer fallbackBuffer
private Int32[] textContentMarks
private int endMarkPos
private int curMarkPos
private int startOffset
public int MaxCharCount
internal int StartOffset
public EncoderFallbackBuffer CreateFallbackBuffer()
public int get_MaxCharCount()
internal int get_StartOffset()
internal void set_StartOffset(int value)
internal void Reset(Int32[] textContentMarks, int endMarkPos)
internal bool CanReplaceAt(int index)
}
internal System.Xml.CharEntityEncoderFallbackBuffer : EncoderFallbackBuffer {
private CharEntityEncoderFallback parent
private string charEntity
private int charEntityIndex
public int Remaining
internal void .ctor(CharEntityEncoderFallback parent)
public bool Fallback(char charUnknown, int index)
public bool Fallback(char charUnknownHigh, char charUnknownLow, int index)
public char GetNextChar()
public bool MovePrevious()
public int get_Remaining()
public void Reset()
private int SurrogateCharToUtf32(char highSurrogate, char lowSurrogate)
}
public System.Xml.ConformanceLevel : Enum {
public int value__
public ConformanceLevel Auto
public ConformanceLevel Fragment
public ConformanceLevel Document
}
internal System.Xml.DebuggerDisplayXmlNodeProxy : ValueType {
private XmlNode node
public void .ctor(XmlNode node)
public string ToString()
}
internal System.Xml.DiagnosticsSwitches : object {
private BooleanSwitch modreq(System.Runtime.CompilerServices.IsVolatile) xmlSchemaContentModel
private TraceSwitch modreq(System.Runtime.CompilerServices.IsVolatile) xmlSchema
private BooleanSwitch modreq(System.Runtime.CompilerServices.IsVolatile) keepTempFiles
private BooleanSwitch modreq(System.Runtime.CompilerServices.IsVolatile) pregenEventLog
private TraceSwitch modreq(System.Runtime.CompilerServices.IsVolatile) xmlSerialization
private TraceSwitch modreq(System.Runtime.CompilerServices.IsVolatile) xslTypeInference
private BooleanSwitch modreq(System.Runtime.CompilerServices.IsVolatile) nonRecursiveTypeLoading
public BooleanSwitch XmlSchemaContentModel
public TraceSwitch XmlSchema
public BooleanSwitch KeepTempFiles
public BooleanSwitch PregenEventLog
public TraceSwitch XmlSerialization
public TraceSwitch XslTypeInference
public BooleanSwitch NonRecursiveTypeLoading
public BooleanSwitch get_XmlSchemaContentModel()
public TraceSwitch get_XmlSchema()
public BooleanSwitch get_KeepTempFiles()
public BooleanSwitch get_PregenEventLog()
public TraceSwitch get_XmlSerialization()
public TraceSwitch get_XslTypeInference()
public BooleanSwitch get_NonRecursiveTypeLoading()
}
internal System.Xml.DocumentSchemaValidator : object {
private XmlSchemaValidator validator
private XmlSchemaSet schemas
private XmlNamespaceManager nsManager
private XmlNameTable nameTable
private ArrayList defaultAttributes
private XmlValueGetter nodeValueGetter
private XmlSchemaInfo attributeSchemaInfo
private XmlSchemaInfo schemaInfo
private ValidationEventHandler eventHandler
private ValidationEventHandler internalEventHandler
private XmlNode startNode
private XmlNode currentNode
private XmlDocument document
private XmlNode[] nodeSequenceToValidate
private bool isPartialTreeValid
private bool psviAugmentation
private bool isValid
private string NsXmlNs
private string NsXsi
private string XsiType
private string XsiNil
public bool PsviAugmentation
private IXmlNamespaceResolver NamespaceResolver
public void .ctor(XmlDocument ownerDocument, XmlSchemaSet schemas, ValidationEventHandler eventHandler)
public bool get_PsviAugmentation()
public void set_PsviAugmentation(bool value)
public bool Validate(XmlNode nodeToValidate)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupNamespace(string prefix)
public string LookupPrefix(string namespaceName)
private IXmlNamespaceResolver get_NamespaceResolver()
private void CreateValidator(XmlSchemaObject partialValidationType, XmlSchemaValidationFlags validationFlags)
private void ValidateNode(XmlNode node)
private void ValidateElement()
private void ValidateAttributes(XmlElement elementNode)
private void SetDefaultAttributeSchemaInfo(XmlSchemaAttribute schemaAttribute)
private string GetDefaultPrefix(string attributeNS)
private object GetNodeValue()
private XmlSchemaObject FindSchemaInfo(XmlElement elementToValidate)
private void CheckNodeSequenceCapacity(int currentIndex)
private XmlSchemaAttribute FindSchemaInfo(XmlAttribute attributeToValidate)
private XmlSchemaObject GetTypeFromAncestors(XmlElement elementToValidate, XmlSchemaObject ancestorType, int ancestorsCount)
private bool AncestorTypeHasWildcard(XmlSchemaObject ancestorType)
private XmlSchemaComplexType GetComplexType(XmlSchemaObject schemaObject)
private void ValidateSingleElement(XmlElement elementNode, bool skipToEnd, XmlSchemaInfo newSchemaInfo)
private void ValidateChildrenTillNextAncestor(XmlNode parentNode, XmlNode childToStopAt)
private XmlSchemaValidator CreateTypeFinderValidator(XmlSchemaObject partialValidationType)
private void TypeFinderCallBack(object sender, ValidationEventArgs arg)
private void InternalValidationCallBack(object sender, ValidationEventArgs arg)
}
internal System.Xml.DocumentXmlWriter : XmlRawWriter {
private DocumentXmlWriterType type
private XmlNode start
private XmlDocument document
private XmlNamespaceManager namespaceManager
private State state
private XmlNode write
private List`1<XmlNode> fragment
private XmlWriterSettings settings
private DocumentXPathNavigator navigator
private XmlNode end
private State[] changeState
public XmlNamespaceManager NamespaceManager
public XmlWriterSettings Settings
public DocumentXPathNavigator Navigator
public XmlNode EndNode
internal bool SupportsNamespaceDeclarationInChunks
public void .ctor(DocumentXmlWriterType type, XmlNode start, XmlDocument document)
public void set_NamespaceManager(XmlNamespaceManager value)
public XmlWriterSettings get_Settings()
internal void SetSettings(XmlWriterSettings value)
public void set_Navigator(DocumentXPathNavigator value)
public void set_EndNode(XmlNode value)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteEndElement()
internal void WriteEndElement(string prefix, string localName, string ns)
public void WriteFullEndElement()
internal void WriteFullEndElement(string prefix, string localName, string ns)
internal void StartElementContent()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
internal void WriteNamespaceDeclaration(string prefix, string ns)
internal bool get_SupportsNamespaceDeclarationInChunks()
internal void WriteStartNamespaceDeclaration(string prefix)
internal void WriteEndNamespaceDeclaration()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteWhitespace(string text)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowCh, char highCh)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void Close()
internal void Close(WriteState currentState)
private void CloseWithAppendAttribute()
private void CloseWithReplaceToFollowingSibling()
public void Flush()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
private void AddAttribute(XmlAttribute attr, XmlNode parent)
private void AddChild(XmlNode node, XmlNode parent)
private State StartState()
private void VerifyState(Method method)
}
internal System.Xml.DocumentXmlWriterType : Enum {
public int value__
public DocumentXmlWriterType InsertSiblingAfter
public DocumentXmlWriterType InsertSiblingBefore
public DocumentXmlWriterType PrependChild
public DocumentXmlWriterType AppendChild
public DocumentXmlWriterType AppendAttribute
public DocumentXmlWriterType ReplaceToFollowingSibling
}
internal System.Xml.DocumentXPathNavigator : XPathNavigator {
private XmlDocument document
private XmlNode source
private int attributeIndex
private XmlElement namespaceParent
public XmlNameTable NameTable
public XPathNodeType NodeType
public string LocalName
public string NamespaceURI
public string Name
public string Prefix
public string Value
private string ValueDocument
private string ValueText
public string BaseURI
public bool IsEmptyElement
public string XmlLang
public object UnderlyingObject
public bool HasAttributes
public bool HasChildren
public IXmlSchemaInfo SchemaInfo
public bool CanEdit
public void .ctor(XmlDocument document, XmlNode node)
public void .ctor(DocumentXPathNavigator other)
public XPathNavigator Clone()
public void SetValue(string value)
public XmlNameTable get_NameTable()
public XPathNodeType get_NodeType()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Name()
public string get_Prefix()
public string get_Value()
private string get_ValueDocument()
private string get_ValueText()
public string get_BaseURI()
public bool get_IsEmptyElement()
public string get_XmlLang()
public object get_UnderlyingObject()
public bool get_HasAttributes()
public string GetAttribute(string localName, string namespaceURI)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public string GetNamespace(string name)
public bool MoveToNamespace(string name)
public bool MoveToFirstNamespace(XPathNamespaceScope scope)
private bool MoveToFirstNamespaceLocal(XmlAttributeCollection attributes, Int32& index)
private bool MoveToFirstNamespaceGlobal(XmlAttributeCollection& attributes, Int32& index)
public bool MoveToNextNamespace(XPathNamespaceScope scope)
private bool MoveToNextNamespaceLocal(XmlAttributeCollection attributes, Int32& index)
private bool MoveToNextNamespaceGlobal(XmlAttributeCollection& attributes, Int32& index)
private bool PathHasDuplicateNamespace(XmlElement top, XmlElement bottom, string localName)
public string LookupNamespace(string prefix)
public bool MoveToNext()
public bool MoveToPrevious()
public bool MoveToFirst()
public bool MoveToFirstChild()
public bool MoveToParent()
public void MoveToRoot()
public bool MoveTo(XPathNavigator other)
public bool MoveToId(string id)
public bool MoveToChild(string localName, string namespaceUri)
public bool MoveToChild(XPathNodeType type)
public bool MoveToFollowing(string localName, string namespaceUri, XPathNavigator end)
public bool MoveToFollowing(XPathNodeType type, XPathNavigator end)
public bool MoveToNext(string localName, string namespaceUri)
public bool MoveToNext(XPathNodeType type)
public bool get_HasChildren()
public bool IsSamePosition(XPathNavigator other)
public bool IsDescendant(XPathNavigator other)
public IXmlSchemaInfo get_SchemaInfo()
public bool CheckValidity(XmlSchemaSet schemas, ValidationEventHandler validationEventHandler)
private XmlNode OwnerNode(XmlNode node)
private int GetDepth(XmlNode node)
private XmlNodeOrder Compare(XmlNode node1, XmlNode node2)
public XmlNodeOrder ComparePosition(XPathNavigator other)
private XmlNode System.Xml.IHasXmlNode.GetNode()
public XPathNodeIterator SelectDescendants(string localName, string namespaceURI, bool matchSelf)
public XPathNodeIterator SelectDescendants(XPathNodeType nt, bool includeSelf)
public bool get_CanEdit()
public XmlWriter PrependChild()
public XmlWriter AppendChild()
public XmlWriter InsertAfter()
public XmlWriter InsertBefore()
public XmlWriter CreateAttributes()
public XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace)
public void DeleteRange(XPathNavigator lastSiblingToDelete)
public void DeleteSelf()
private void DeleteAttribute(XmlAttribute attribute, int index)
internal void DeleteToFollowingSibling(XmlNode node, XmlNode end)
private XmlNamespaceManager GetNamespaceManager(XmlNode node, XmlDocument document)
internal void ResetPosition(XmlNode node)
private bool ResetAttributePosition(XmlAttribute attribute, XmlAttributeCollection attributes, Int32& index)
private bool CheckAttributePosition(XmlAttribute attribute, XmlAttributeCollection& attributes, int index)
private void CalibrateText()
private XmlNode ParentNode(XmlNode node)
private XmlNode ParentNodeTail(XmlNode parent)
private XmlNode FirstChild(XmlNode node)
private XmlNode FirstChildTail(XmlNode child)
private XmlNode NextSibling(XmlNode node)
private XmlNode NextSiblingTail(XmlNode node, XmlNode sibling)
private XmlNode PreviousSibling(XmlNode node)
private XmlNode PreviousSiblingTail(XmlNode node, XmlNode sibling)
private XmlNode PreviousText(XmlNode node)
private XmlNode PreviousTextTail(XmlNode node, XmlNode text)
internal bool IsFollowingSibling(XmlNode left, XmlNode right)
private bool IsDescendant(XmlNode top, XmlNode bottom)
private bool IsValidChild(XmlNode parent, XmlNode child)
private XmlNode TextStart(XmlNode node)
private XmlNode TextEnd(XmlNode node)
}
internal System.Xml.DocumentXPathNodeIterator_AllElemChildren : DocumentXPathNodeIterator_ElemDescendants {
internal void .ctor(DocumentXPathNavigator nav)
internal void .ctor(DocumentXPathNodeIterator_AllElemChildren other)
public XPathNodeIterator Clone()
protected bool Match(XmlNode node)
}
internal System.Xml.DocumentXPathNodeIterator_AllElemChildren_AndSelf : DocumentXPathNodeIterator_AllElemChildren {
internal void .ctor(DocumentXPathNavigator nav)
internal void .ctor(DocumentXPathNodeIterator_AllElemChildren_AndSelf other)
public XPathNodeIterator Clone()
public bool MoveNext()
}
internal System.Xml.DocumentXPathNodeIterator_ElemChildren : DocumentXPathNodeIterator_ElemDescendants {
protected string localNameAtom
protected string nsAtom
internal void .ctor(DocumentXPathNavigator nav, string localNameAtom, string nsAtom)
internal void .ctor(DocumentXPathNodeIterator_ElemChildren other)
public XPathNodeIterator Clone()
protected bool Match(XmlNode node)
}
internal System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf : DocumentXPathNodeIterator_ElemChildren {
internal void .ctor(DocumentXPathNavigator nav, string localNameAtom, string nsAtom)
internal void .ctor(DocumentXPathNodeIterator_ElemChildren_AndSelf other)
public XPathNodeIterator Clone()
public bool MoveNext()
}
internal System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName : DocumentXPathNodeIterator_ElemChildren_NoLocalName {
internal void .ctor(DocumentXPathNavigator nav, string nsAtom)
internal void .ctor(DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName other)
public XPathNodeIterator Clone()
public bool MoveNext()
}
internal System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName : DocumentXPathNodeIterator_ElemDescendants {
private string nsAtom
internal void .ctor(DocumentXPathNavigator nav, string nsAtom)
internal void .ctor(DocumentXPathNodeIterator_ElemChildren_NoLocalName other)
public XPathNodeIterator Clone()
protected bool Match(XmlNode node)
}
internal System.Xml.DocumentXPathNodeIterator_ElemDescendants : XPathNodeIterator {
private DocumentXPathNavigator nav
private int level
private int position
public XPathNavigator Current
public int CurrentPosition
internal void .ctor(DocumentXPathNavigator nav)
internal void .ctor(DocumentXPathNodeIterator_ElemDescendants other)
protected bool Match(XmlNode node)
public XPathNavigator get_Current()
public int get_CurrentPosition()
protected void SetPosition(int pos)
public bool MoveNext()
}
internal System.Xml.DocumentXPathNodeIterator_Empty : XPathNodeIterator {
private XPathNavigator nav
public XPathNavigator Current
public int CurrentPosition
public int Count
internal void .ctor(DocumentXPathNavigator nav)
internal void .ctor(DocumentXPathNodeIterator_Empty other)
public XPathNodeIterator Clone()
public bool MoveNext()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public int get_Count()
}
internal System.Xml.DomNameTable : object {
private XmlName[] entries
private int count
private int mask
private XmlDocument ownerDocument
private XmlNameTable nameTable
private int InitialSize
public void .ctor(XmlDocument document)
public XmlName GetName(string prefix, string localName, string ns, IXmlSchemaInfo schemaInfo)
public XmlName AddName(string prefix, string localName, string ns, IXmlSchemaInfo schemaInfo)
private void Grow()
}
internal System.Xml.DtdParser : object {
private IDtdParserAdapter readerAdapter
private IDtdParserAdapterWithValidation readerAdapterWithValidation
private XmlNameTable nameTable
private SchemaInfo schemaInfo
private XmlCharType xmlCharType
private string systemId
private string publicId
private bool normalize
private bool validate
private bool supportNamespaces
private bool v1Compat
private Char[] chars
private int charsUsed
private int curPos
private ScanningFunction scanningFunction
private ScanningFunction nextScaningFunction
private ScanningFunction savedScanningFunction
private bool whitespaceSeen
private int tokenStartPos
private int colonPos
private StringBuilder internalSubsetValueSb
private int externalEntitiesDepth
private int currentEntityId
private bool freeFloatingDtd
private bool hasFreeFloatingInternalSubset
private StringBuilder stringBuilder
private int condSectionDepth
private LineInfo literalLineInfo
private char literalQuoteChar
private string documentBaseUri
private string externalDtdBaseUri
private Dictionary`2<string, UndeclaredNotation> undeclaredNotations
private Int32[] condSectionEntityIds
private int CondSectionEntityIdsInitialSize
private bool ParsingInternalSubset
private bool IgnoreEntityReferences
private bool SaveInternalSubsetValue
private bool ParsingTopLevelMarkup
private bool SupportNamespaces
private bool Normalize
private int LineNo
private int LinePos
private string BaseUriStr
internal IDtdParser Create()
private void Initialize(IDtdParserAdapter readerAdapter)
private void InitializeFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter)
private IDtdInfo System.Xml.IDtdParser.ParseInternalDtd(IDtdParserAdapter adapter, bool saveInternalSubset)
private IDtdInfo System.Xml.IDtdParser.ParseFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter)
private bool get_ParsingInternalSubset()
private bool get_IgnoreEntityReferences()
private bool get_SaveInternalSubsetValue()
private bool get_ParsingTopLevelMarkup()
private bool get_SupportNamespaces()
private bool get_Normalize()
private void Parse(bool saveInternalSubset)
private void ParseInDocumentDtd(bool saveInternalSubset)
private void ParseFreeFloatingDtd()
private void ParseInternalSubset()
private void ParseExternalSubset()
private void ParseSubset()
private void ParseAttlistDecl()
private void ParseAttlistType(SchemaAttDef attrDef, SchemaElementDecl elementDecl, bool ignoreErrors)
private void ParseAttlistDefault(SchemaAttDef attrDef, bool ignoreErrors)
private void ParseElementDecl()
private void ParseElementOnlyContent(ParticleContentValidator pcv, int startParenEntityId)
private void ParseHowMany(ParticleContentValidator pcv)
private void ParseElementMixedContent(ParticleContentValidator pcv, int startParenEntityId)
private void ParseEntityDecl()
private void ParseNotationDecl()
private void AddUndeclaredNotation(string notationName)
private void ParseComment()
private void ParsePI()
private void ParseCondSection()
private void ParseExternalId(Token idTokenType, Token declType, String& publicId, String& systemId)
private Token GetToken(bool needWhiteSpace)
private Token ScanSubsetContent()
private Token ScanNameExpected()
private Token ScanQNameExpected()
private Token ScanNmtokenExpected()
private Token ScanDoctype1()
private Token ScanDoctype2()
private Token ScanClosingTag()
private Token ScanElement1()
private Token ScanElement2()
private Token ScanElement3()
private Token ScanElement4()
private Token ScanElement5()
private Token ScanElement6()
private Token ScanElement7()
private Token ScanAttlist1()
private Token ScanAttlist2()
private Token ScanAttlist3()
private Token ScanAttlist4()
private Token ScanAttlist5()
private Token ScanAttlist6()
private Token ScanAttlist7()
private Token ScanLiteral(LiteralType literalType)
private XmlQualifiedName ScanEntityName()
private Token ScanNotation1()
private Token ScanSystemId()
private Token ScanEntity1()
private Token ScanEntity2()
private Token ScanEntity3()
private Token ScanPublicId1()
private Token ScanPublicId2()
private Token ScanCondSection1()
private Token ScanCondSection2()
private Token ScanCondSection3()
private void ScanName()
private void ScanQName()
private void ScanQName(bool isQName)
private bool ReadDataInName()
private void ScanNmtoken()
private bool EatPublicKeyword()
private bool EatSystemKeyword()
private XmlQualifiedName GetNameQualified(bool canHavePrefix)
private string GetNameString()
private string GetNmtokenString()
private string GetValue()
private string GetValueWithStrippedSpaces()
private int ReadData()
private void LoadParsingBuffer()
private void SaveParsingBuffer()
private void SaveParsingBuffer(int internalSubsetValueEndPos)
private bool HandleEntityReference(bool paramEntity, bool inLiteral, bool inAttribute)
private bool HandleEntityReference(XmlQualifiedName entityName, bool paramEntity, bool inLiteral, bool inAttribute)
private bool HandleEntityEnd(bool inLiteral)
private SchemaEntity VerifyEntityReference(XmlQualifiedName entityName, bool paramEntity, bool mustBeDeclared, bool inAttribute)
private void SendValidationEvent(int pos, XmlSeverityType severity, string code, string arg)
private void SendValidationEvent(XmlSeverityType severity, string code, string arg)
private void SendValidationEvent(XmlSeverityType severity, XmlSchemaException e)
private bool IsAttributeValueType(Token token)
private int get_LineNo()
private int get_LinePos()
private string get_BaseUriStr()
private void OnUnexpectedError()
private void Throw(int curPos, string res)
private void Throw(int curPos, string res, string arg)
private void Throw(int curPos, string res, String[] args)
private void Throw(string res, string arg, int lineNo, int linePos)
private void ThrowInvalidChar(int pos, string data, int invCharPos)
private void ThrowInvalidChar(Char[] data, int length, int invCharPos)
private void ThrowUnexpectedToken(int pos, string expectedToken)
private void ThrowUnexpectedToken(int pos, string expectedToken1, string expectedToken2)
private string ParseUnexpectedToken(int startPos)
internal string StripSpaces(string value)
private Task`1<IDtdInfo> System.Xml.IDtdParser.ParseInternalDtdAsync(IDtdParserAdapter adapter, bool saveInternalSubset)
private Task`1<IDtdInfo> System.Xml.IDtdParser.ParseFreeFloatingDtdAsync(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter)
private Task ParseAsync(bool saveInternalSubset)
private Task ParseInDocumentDtdAsync(bool saveInternalSubset)
private Task ParseFreeFloatingDtdAsync()
private Task ParseInternalSubsetAsync()
private Task ParseExternalSubsetAsync()
private Task ParseSubsetAsync()
private Task ParseAttlistDeclAsync()
private Task ParseAttlistTypeAsync(SchemaAttDef attrDef, SchemaElementDecl elementDecl, bool ignoreErrors)
private Task ParseAttlistDefaultAsync(SchemaAttDef attrDef, bool ignoreErrors)
private Task ParseElementDeclAsync()
private Task ParseElementOnlyContentAsync(ParticleContentValidator pcv, int startParenEntityId)
private Task ParseHowManyAsync(ParticleContentValidator pcv)
private Task ParseElementMixedContentAsync(ParticleContentValidator pcv, int startParenEntityId)
private Task ParseEntityDeclAsync()
private Task ParseNotationDeclAsync()
private Task ParseCommentAsync()
private Task ParsePIAsync()
private Task ParseCondSectionAsync()
private Task`1<Tuple`2<string, string>> ParseExternalIdAsync(Token idTokenType, Token declType)
private Task`1<Token> GetTokenAsync(bool needWhiteSpace)
private Task`1<Token> ScanSubsetContentAsync()
private Task`1<Token> ScanNameExpectedAsync()
private Task`1<Token> ScanQNameExpectedAsync()
private Task`1<Token> ScanNmtokenExpectedAsync()
private Task`1<Token> ScanDoctype1Async()
private Task`1<Token> ScanElement1Async()
private Task`1<Token> ScanElement2Async()
private Task`1<Token> ScanElement3Async()
private Task`1<Token> ScanAttlist1Async()
private Task`1<Token> ScanAttlist2Async()
private Task`1<Token> ScanAttlist6Async()
private Task`1<Token> ScanLiteralAsync(LiteralType literalType)
private Task`1<Token> ScanNotation1Async()
private Task`1<Token> ScanSystemIdAsync()
private Task`1<Token> ScanEntity1Async()
private Task`1<Token> ScanEntity2Async()
private Task`1<Token> ScanEntity3Async()
private Task`1<Token> ScanPublicId1Async()
private Task`1<Token> ScanPublicId2Async()
private Task`1<Token> ScanCondSection1Async()
private Task`1<Token> ScanCondSection3Async()
private Task ScanNameAsync()
private Task ScanQNameAsync()
private Task ScanQNameAsync(bool isQName)
private Task`1<bool> ReadDataInNameAsync()
private Task ScanNmtokenAsync()
private Task`1<bool> EatPublicKeywordAsync()
private Task`1<bool> EatSystemKeywordAsync()
private Task`1<int> ReadDataAsync()
private Task`1<bool> HandleEntityReferenceAsync(bool paramEntity, bool inLiteral, bool inAttribute)
private Task`1<bool> HandleEntityReferenceAsync(XmlQualifiedName entityName, bool paramEntity, bool inLiteral, bool inAttribute)
}
public System.Xml.DtdProcessing : Enum {
public int value__
public DtdProcessing Prohibit
public DtdProcessing Ignore
public DtdProcessing Parse
}
internal System.Xml.ElementProperties : Enum {
public UInt32 value__
public ElementProperties DEFAULT
public ElementProperties URI_PARENT
public ElementProperties BOOL_PARENT
public ElementProperties NAME_PARENT
public ElementProperties EMPTY
public ElementProperties NO_ENTITIES
public ElementProperties HEAD
public ElementProperties BLOCK_WS
public ElementProperties HAS_NS
}
internal System.Xml.EmptyEnumerator : object {
private object System.Collections.IEnumerator.Current
private bool System.Collections.IEnumerator.MoveNext()
private void System.Collections.IEnumerator.Reset()
private object System.Collections.IEnumerator.get_Current()
}
public System.Xml.EntityHandling : Enum {
public int value__
public EntityHandling ExpandEntities
public EntityHandling ExpandCharEntities
}
internal System.Xml.ExceptionType : Enum {
public int value__
public ExceptionType ArgumentException
public ExceptionType XmlException
}
public System.Xml.Formatting : Enum {
public int value__
public Formatting None
public Formatting Indented
}
internal System.Xml.HtmlEncodedRawTextWriter : XmlEncodedRawTextWriter {
protected ByteStack elementScope
protected ElementProperties currentElementProperties
private AttributeProperties currentAttributeProperties
private bool endsWithAmpersand
private Byte[] uriEscapingBuffer
private string mediaType
private bool doNotEscapeUriAttributes
protected TernaryTreeReadOnly elementPropertySearch
protected TernaryTreeReadOnly attributePropertySearch
private int StackIncrement
public void .ctor(TextWriter writer, XmlWriterSettings settings)
public void .ctor(Stream stream, XmlWriterSettings settings)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void StartElementContent()
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteProcessingInstruction(string target, string text)
public void WriteString(string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
private void Init(XmlWriterSettings settings)
protected void WriteMetaElement()
protected void WriteHtmlElementTextBlock(Char* pSrc, Char* pSrcEnd)
protected void WriteHtmlAttributeTextBlock(Char* pSrc, Char* pSrcEnd)
private void WriteHtmlAttributeText(Char* pSrc, Char* pSrcEnd)
private void WriteUriAttributeText(Char* pSrc, Char* pSrcEnd)
private void OutputRestAmps()
}
internal System.Xml.HtmlEncodedRawTextWriterIndent : HtmlEncodedRawTextWriter {
private int indentLevel
private int endBlockPos
private string indentChars
private bool newLineOnAttributes
public void .ctor(TextWriter writer, XmlWriterSettings settings)
public void .ctor(Stream stream, XmlWriterSettings settings)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void StartElementContent()
internal void WriteEndElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
protected void FlushBuffer()
private void Init(XmlWriterSettings settings)
private void WriteIndent()
}
internal System.Xml.HtmlTernaryTree : object {
internal Byte[] htmlElements
internal Byte[] htmlAttributes
}
internal System.Xml.HtmlUtf8RawTextWriter : XmlUtf8RawTextWriter {
protected ByteStack elementScope
protected ElementProperties currentElementProperties
private AttributeProperties currentAttributeProperties
private bool endsWithAmpersand
private Byte[] uriEscapingBuffer
private string mediaType
private bool doNotEscapeUriAttributes
protected TernaryTreeReadOnly elementPropertySearch
protected TernaryTreeReadOnly attributePropertySearch
private int StackIncrement
public void .ctor(Stream stream, XmlWriterSettings settings)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void StartElementContent()
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteProcessingInstruction(string target, string text)
public void WriteString(string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
private void Init(XmlWriterSettings settings)
protected void WriteMetaElement()
protected void WriteHtmlElementTextBlock(Char* pSrc, Char* pSrcEnd)
protected void WriteHtmlAttributeTextBlock(Char* pSrc, Char* pSrcEnd)
private void WriteHtmlAttributeText(Char* pSrc, Char* pSrcEnd)
private void WriteUriAttributeText(Char* pSrc, Char* pSrcEnd)
private void OutputRestAmps()
}
internal System.Xml.HtmlUtf8RawTextWriterIndent : HtmlUtf8RawTextWriter {
private int indentLevel
private int endBlockPos
private string indentChars
private bool newLineOnAttributes
public void .ctor(Stream stream, XmlWriterSettings settings)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void StartElementContent()
internal void WriteEndElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
protected void FlushBuffer()
private void Init(XmlWriterSettings settings)
private void WriteIndent()
}
internal System.Xml.HWStack : object {
private Object[] stack
private int growthRate
private int used
private int size
private int limit
internal object Item
internal int Length
internal void .ctor(int GrowthRate)
internal void .ctor(int GrowthRate, int limit)
internal object Push()
internal object Pop()
internal object Peek()
internal void AddToTop(object o)
internal object get_Item(int index)
internal void set_Item(int index, object value)
internal int get_Length()
private void .ctor(Object[] stack, int growthRate, int used, int size)
public object Clone()
}
public System.Xml.IApplicationResourceStreamResolver {
public Stream GetApplicationResourceStream(Uri relativeUri)
}
internal System.Xml.IDtdAttributeInfo {
public string Prefix
public string LocalName
public int LineNumber
public int LinePosition
public bool IsNonCDataType
public bool IsDeclaredInExternal
public bool IsXmlAttribute
public string get_Prefix()
public string get_LocalName()
public int get_LineNumber()
public int get_LinePosition()
public bool get_IsNonCDataType()
public bool get_IsDeclaredInExternal()
public bool get_IsXmlAttribute()
}
internal System.Xml.IDtdAttributeListInfo {
public string Prefix
public string LocalName
public bool HasNonCDataAttributes
public string get_Prefix()
public string get_LocalName()
public bool get_HasNonCDataAttributes()
public IDtdAttributeInfo LookupAttribute(string prefix, string localName)
public IEnumerable`1<IDtdDefaultAttributeInfo> LookupDefaultAttributes()
public IDtdAttributeInfo LookupIdAttribute()
}
internal System.Xml.IDtdDefaultAttributeInfo {
public string DefaultValueExpanded
public object DefaultValueTyped
public int ValueLineNumber
public int ValueLinePosition
public string get_DefaultValueExpanded()
public object get_DefaultValueTyped()
public int get_ValueLineNumber()
public int get_ValueLinePosition()
}
internal System.Xml.IDtdEntityInfo {
public string Name
public bool IsExternal
public bool IsDeclaredInExternal
public bool IsUnparsedEntity
public bool IsParameterEntity
public string BaseUriString
public string DeclaredUriString
public string SystemId
public string PublicId
public string Text
public int LineNumber
public int LinePosition
public string get_Name()
public bool get_IsExternal()
public bool get_IsDeclaredInExternal()
public bool get_IsUnparsedEntity()
public bool get_IsParameterEntity()
public string get_BaseUriString()
public string get_DeclaredUriString()
public string get_SystemId()
public string get_PublicId()
public string get_Text()
public int get_LineNumber()
public int get_LinePosition()
}
internal System.Xml.IDtdInfo {
public XmlQualifiedName Name
public string InternalDtdSubset
public bool HasDefaultAttributes
public bool HasNonCDataAttributes
public XmlQualifiedName get_Name()
public string get_InternalDtdSubset()
public bool get_HasDefaultAttributes()
public bool get_HasNonCDataAttributes()
public IDtdAttributeListInfo LookupAttributeList(string prefix, string localName)
public IEnumerable`1<IDtdAttributeListInfo> GetAttributeLists()
public IDtdEntityInfo LookupEntity(string name)
}
internal System.Xml.IDtdParser {
public IDtdInfo ParseInternalDtd(IDtdParserAdapter adapter, bool saveInternalSubset)
public IDtdInfo ParseFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter)
public Task`1<IDtdInfo> ParseInternalDtdAsync(IDtdParserAdapter adapter, bool saveInternalSubset)
public Task`1<IDtdInfo> ParseFreeFloatingDtdAsync(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter)
}
internal System.Xml.IDtdParserAdapter {
public XmlNameTable NameTable
public IXmlNamespaceResolver NamespaceResolver
public Uri BaseUri
public Char[] ParsingBuffer
public int ParsingBufferLength
public int CurrentPosition
public int LineNo
public int LineStartPosition
public bool IsEof
public int EntityStackLength
public bool IsEntityEolNormalized
public XmlNameTable get_NameTable()
public IXmlNamespaceResolver get_NamespaceResolver()
public Uri get_BaseUri()
public Char[] get_ParsingBuffer()
public int get_ParsingBufferLength()
public int get_CurrentPosition()
public void set_CurrentPosition(int value)
public int get_LineNo()
public int get_LineStartPosition()
public bool get_IsEof()
public int get_EntityStackLength()
public bool get_IsEntityEolNormalized()
public int ReadData()
public void OnNewLine(int pos)
public int ParseNumericCharRef(StringBuilder internalSubsetBuilder)
public int ParseNamedCharRef(bool expand, StringBuilder internalSubsetBuilder)
public void ParsePI(StringBuilder sb)
public void ParseComment(StringBuilder sb)
public bool PushEntity(IDtdEntityInfo entity, Int32& entityId)
public bool PopEntity(IDtdEntityInfo& oldEntity, Int32& newEntityId)
public bool PushExternalSubset(string systemId, string publicId)
public void PushInternalDtd(string baseUri, string internalDtd)
public void OnSystemId(string systemId, LineInfo keywordLineInfo, LineInfo systemLiteralLineInfo)
public void OnPublicId(string publicId, LineInfo keywordLineInfo, LineInfo publicLiteralLineInfo)
public void Throw(Exception e)
public Task`1<int> ReadDataAsync()
public Task`1<int> ParseNumericCharRefAsync(StringBuilder internalSubsetBuilder)
public Task`1<int> ParseNamedCharRefAsync(bool expand, StringBuilder internalSubsetBuilder)
public Task ParsePIAsync(StringBuilder sb)
public Task ParseCommentAsync(StringBuilder sb)
public Task`1<Tuple`2<int, bool>> PushEntityAsync(IDtdEntityInfo entity)
public Task`1<bool> PushExternalSubsetAsync(string systemId, string publicId)
}
internal System.Xml.IDtdParserAdapterV1 {
public bool V1CompatibilityMode
public bool Normalization
public bool Namespaces
public bool get_V1CompatibilityMode()
public bool get_Normalization()
public bool get_Namespaces()
}
internal System.Xml.IDtdParserAdapterWithValidation {
public bool DtdValidation
public IValidationEventHandling ValidationEventHandling
public bool get_DtdValidation()
public IValidationEventHandling get_ValidationEventHandling()
}
public System.Xml.IHasXmlNode {
public XmlNode GetNode()
}
internal System.Xml.IncrementalReadCharsDecoder : IncrementalReadDecoder {
private Char[] buffer
private int startIndex
private int curIndex
private int endIndex
internal int DecodedCount
internal bool IsFull
internal int get_DecodedCount()
internal bool get_IsFull()
internal int Decode(Char[] chars, int startPos, int len)
internal int Decode(string str, int startPos, int len)
internal void Reset()
internal void SetNextOutputBuffer(Array buffer, int index, int count)
}
internal System.Xml.IncrementalReadDecoder : object {
internal int DecodedCount
internal bool IsFull
internal int get_DecodedCount()
internal bool get_IsFull()
internal void SetNextOutputBuffer(Array array, int offset, int len)
internal int Decode(Char[] chars, int startPos, int len)
internal int Decode(string str, int startPos, int len)
internal void Reset()
}
internal System.Xml.IncrementalReadDummyDecoder : IncrementalReadDecoder {
internal int DecodedCount
internal bool IsFull
internal int get_DecodedCount()
internal bool get_IsFull()
internal void SetNextOutputBuffer(Array array, int offset, int len)
internal int Decode(Char[] chars, int startPos, int len)
internal int Decode(string str, int startPos, int len)
internal void Reset()
}
internal System.Xml.IRemovableWriter {
public OnRemoveWriter OnRemoveWriterEvent
public OnRemoveWriter get_OnRemoveWriterEvent()
public void set_OnRemoveWriterEvent(OnRemoveWriter value)
}
internal System.Xml.IValidationEventHandling {
public object EventHandler
public object get_EventHandler()
public void SendEvent(Exception exception, XmlSeverityType severity)
}
public System.Xml.IXmlLineInfo {
public int LineNumber
public int LinePosition
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
}
public System.Xml.IXmlNamespaceResolver {
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupNamespace(string prefix)
public string LookupPrefix(string namespaceName)
}
internal System.Xml.LineInfo : ValueType {
internal int lineNo
internal int linePos
public void .ctor(int lineNo, int linePos)
public void Set(int lineNo, int linePos)
}
public System.Xml.NamespaceHandling : Enum {
public int value__
public NamespaceHandling Default
public NamespaceHandling OmitDuplicates
}
public System.Xml.NameTable : XmlNameTable {
private Entry[] entries
private int count
private int mask
private int hashCodeRandomizer
public string Add(string key)
public string Add(Char[] key, int start, int len)
public string Get(string value)
public string Get(Char[] key, int start, int len)
private string AddEntry(string str, int hashCode)
private void Grow()
private bool TextEquals(string str1, Char[] str2, int str2Start, int str2Length)
}
public System.Xml.NewLineHandling : Enum {
public int value__
public NewLineHandling Replace
public NewLineHandling Entitize
public NewLineHandling None
}
internal System.Xml.OnRemoveWriter : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlRawWriter writer)
public IAsyncResult BeginInvoke(XmlRawWriter writer, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Xml.OpenedHost : object {
internal int nonCachedConnectionsCount
}
internal System.Xml.PositionInfo : object {
public int LineNumber
public int LinePosition
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
public PositionInfo GetPositionInfo(object o)
}
internal System.Xml.QueryOutputWriter : XmlRawWriter {
private XmlRawWriter wrapped
private bool inCDataSection
private Dictionary`2<XmlQualifiedName, int> lookupCDataElems
private BitStack bitsCData
private XmlQualifiedName qnameCData
private bool outputDocType
private bool checkWellFormedDoc
private bool hasDocElem
private bool inAttr
private string systemId
private string publicId
private int depth
internal IXmlNamespaceResolver NamespaceResolver
public XmlWriterSettings Settings
internal bool SupportsNamespaceDeclarationInChunks
public void .ctor(XmlRawWriter writer, XmlWriterSettings settings)
internal IXmlNamespaceResolver get_NamespaceResolver()
internal void set_NamespaceResolver(IXmlNamespaceResolver value)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
public XmlWriterSettings get_Settings()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
internal void StartElementContent()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
internal void WriteNamespaceDeclaration(string prefix, string ns)
internal bool get_SupportsNamespaceDeclarationInChunks()
internal void WriteStartNamespaceDeclaration(string prefix)
internal void WriteEndNamespaceDeclaration()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void Close()
public void Flush()
private bool StartCDataSection()
private void EndCDataSection()
}
internal System.Xml.QueryOutputWriterV1 : XmlWriter {
private XmlWriter wrapped
private bool inCDataSection
private Dictionary`2<XmlQualifiedName, XmlQualifiedName> lookupCDataElems
private BitStack bitsCData
private XmlQualifiedName qnameCData
private bool outputDocType
private bool inAttr
private string systemId
private string publicId
private XmlStandalone standalone
public WriteState WriteState
public void .ctor(XmlWriter writer, XmlWriterSettings settings)
public WriteState get_WriteState()
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void Close()
public void Flush()
public string LookupPrefix(string ns)
private bool StartCDataSection()
private void EndCDataSection()
}
internal System.Xml.ReadContentAsBinaryHelper : object {
private XmlReader reader
private State state
private int valueOffset
private bool isEnd
private bool canReadValueChunk
private Char[] valueChunk
private int valueChunkLength
private IncrementalReadDecoder decoder
private Base64Decoder base64Decoder
private BinHexDecoder binHexDecoder
private int ChunkSize
internal void .ctor(XmlReader reader)
internal ReadContentAsBinaryHelper CreateOrReset(ReadContentAsBinaryHelper helper, XmlReader reader)
internal int ReadContentAsBase64(Byte[] buffer, int index, int count)
internal int ReadContentAsBinHex(Byte[] buffer, int index, int count)
internal int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
internal int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
internal void Finish()
internal void Reset()
private bool Init()
private bool InitOnElement()
private void InitBase64Decoder()
private void InitBinHexDecoder()
private int ReadContentAsBinary(Byte[] buffer, int index, int count)
private int ReadElementContentAsBinary(Byte[] buffer, int index, int count)
private bool MoveToNextContentNode(bool moveIfOnContentNode)
internal Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count)
internal Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count)
internal Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count)
internal Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count)
internal Task FinishAsync()
private Task`1<bool> InitAsync()
private Task`1<bool> InitOnElementAsync()
private Task`1<int> ReadContentAsBinaryAsync(Byte[] buffer, int index, int count)
private Task`1<int> ReadElementContentAsBinaryAsync(Byte[] buffer, int index, int count)
private Task`1<bool> MoveToNextContentNodeAsync(bool moveIfOnContentNode)
}
internal System.Xml.ReaderPositionInfo : PositionInfo {
private IXmlLineInfo lineInfo
public int LineNumber
public int LinePosition
public void .ctor(IXmlLineInfo lineInfo)
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
}
public System.Xml.ReadState : Enum {
public int value__
public ReadState Initial
public ReadState Interactive
public ReadState Error
public ReadState EndOfFile
public ReadState Closed
}
internal System.Xml.Ref : object {
public bool Equal(string strA, string strB)
public void Equals(object objA, object objB)
}
internal System.Xml.Res : object {
public string Xml_UserException
public string Xml_DefaultException
public string Xml_InvalidOperation
public string Xml_ErrorFilePosition
public string Xml_StackOverflow
public string Xslt_NoStylesheetLoaded
public string Xslt_NotCompiledStylesheet
public string Xslt_IncompatibleCompiledStylesheetVersion
public string Xml_AsyncIsRunningException
public string Xml_ReaderAsyncNotSetException
public string Xml_UnclosedQuote
public string Xml_UnexpectedEOF
public string Xml_UnexpectedEOF1
public string Xml_UnexpectedEOFInElementContent
public string Xml_BadStartNameChar
public string Xml_BadNameChar
public string Xml_BadDecimalEntity
public string Xml_BadHexEntity
public string Xml_MissingByteOrderMark
public string Xml_UnknownEncoding
public string Xml_InternalError
public string Xml_InvalidCharInThisEncoding
public string Xml_ErrorPosition
public string Xml_MessageWithErrorPosition
public string Xml_UnexpectedTokenEx
public string Xml_UnexpectedTokens2
public string Xml_ExpectingWhiteSpace
public string Xml_TagMismatch
public string Xml_TagMismatchEx
public string Xml_UnexpectedEndTag
public string Xml_UnknownNs
public string Xml_BadAttributeChar
public string Xml_ExpectExternalOrClose
public string Xml_MissingRoot
public string Xml_MultipleRoots
public string Xml_InvalidRootData
public string Xml_XmlDeclNotFirst
public string Xml_InvalidXmlDecl
public string Xml_InvalidNodeType
public string Xml_InvalidPIName
public string Xml_InvalidXmlSpace
public string Xml_InvalidVersionNumber
public string Xml_DupAttributeName
public string Xml_BadDTDLocation
public string Xml_ElementNotFound
public string Xml_ElementNotFoundNs
public string Xml_PartialContentNodeTypeNotSupportedEx
public string Xml_MultipleDTDsProvided
public string Xml_CanNotBindToReservedNamespace
public string Xml_InvalidCharacter
public string Xml_InvalidBinHexValue
public string Xml_InvalidBinHexValueOddCount
public string Xml_InvalidTextDecl
public string Xml_InvalidBase64Value
public string Xml_UndeclaredEntity
public string Xml_RecursiveParEntity
public string Xml_RecursiveGenEntity
public string Xml_ExternalEntityInAttValue
public string Xml_UnparsedEntityRef
public string Xml_NotSameNametable
public string Xml_NametableMismatch
public string Xml_BadNamespaceDecl
public string Xml_ErrorParsingEntityName
public string Xml_InvalidNmToken
public string Xml_EntityRefNesting
public string Xml_CannotResolveEntity
public string Xml_CannotResolveEntityDtdIgnored
public string Xml_CannotResolveExternalSubset
public string Xml_CannotResolveUrl
public string Xml_CDATAEndInText
public string Xml_ExternalEntityInStandAloneDocument
public string Xml_DtdAfterRootElement
public string Xml_ReadOnlyProperty
public string Xml_DtdIsProhibited
public string Xml_DtdIsProhibitedEx
public string Xml_ReadSubtreeNotOnElement
public string Xml_DtdNotAllowedInFragment
public string Xml_CannotStartDocumentOnFragment
public string Xml_ErrorOpeningExternalDtd
public string Xml_ErrorOpeningExternalEntity
public string Xml_ReadBinaryContentNotSupported
public string Xml_ReadValueChunkNotSupported
public string Xml_InvalidReadContentAs
public string Xml_InvalidReadElementContentAs
public string Xml_MixedReadElementContentAs
public string Xml_MixingReadValueChunkWithBinary
public string Xml_MixingBinaryContentMethods
public string Xml_MixingV1StreamingWithV2Binary
public string Xml_InvalidReadValueChunk
public string Xml_ReadContentAsFormatException
public string Xml_DoubleBaseUri
public string Xml_NotEnoughSpaceForSurrogatePair
public string Xml_EmptyUrl
public string Xml_UnexpectedNodeInSimpleContent
public string Xml_InvalidWhitespaceCharacter
public string Xml_IncompatibleConformanceLevel
public string Xml_LimitExceeded
public string Xml_ClosedOrErrorReader
public string Xml_CharEntityOverflow
public string Xml_BadNameCharWithPos
public string Xml_XmlnsBelongsToReservedNs
public string Xml_UndeclaredParEntity
public string Xml_InvalidXmlDocument
public string Xml_NoDTDPresent
public string Xml_MultipleValidaitonTypes
public string Xml_NoValidation
public string Xml_WhitespaceHandling
public string Xml_InvalidResetStateCall
public string Xml_EntityHandling
public string Xml_AttlistDuplEnumValue
public string Xml_AttlistDuplNotationValue
public string Xml_EncodingSwitchAfterResetState
public string Xml_UnexpectedNodeType
public string Xml_InvalidConditionalSection
public string Xml_UnexpectedCDataEnd
public string Xml_UnclosedConditionalSection
public string Xml_ExpectDtdMarkup
public string Xml_IncompleteDtdContent
public string Xml_EnumerationRequired
public string Xml_InvalidContentModel
public string Xml_FragmentId
public string Xml_ExpectPcData
public string Xml_ExpectNoWhitespace
public string Xml_ExpectOp
public string Xml_InvalidAttributeType
public string Xml_InvalidAttributeType1
public string Xml_ExpectAttType
public string Xml_ColonInLocalName
public string Xml_InvalidParEntityRef
public string Xml_ExpectSubOrClose
public string Xml_ExpectExternalOrPublicId
public string Xml_ExpectExternalIdOrEntityValue
public string Xml_ExpectIgnoreOrInclude
public string Xml_UnsupportedClass
public string Xml_NullResolver
public string Xml_RelativeUriNotSupported
public string Xml_UntrustedCodeSettingResolver
public string Xml_WriterAsyncNotSetException
public string Xml_PrefixForEmptyNs
public string Xml_InvalidCommentChars
public string Xml_UndefNamespace
public string Xml_EmptyName
public string Xml_EmptyLocalName
public string Xml_InvalidNameCharsDetail
public string Xml_NoStartTag
public string Xml_ClosedOrError
public string Xml_WrongToken
public string Xml_XmlPrefix
public string Xml_XmlnsPrefix
public string Xml_NamespaceDeclXmlXmlns
public string Xml_NonWhitespace
public string Xml_DupXmlDecl
public string Xml_CannotWriteXmlDecl
public string Xml_NoRoot
public string Xml_InvalidPosition
public string Xml_IncompleteEntity
public string Xml_InvalidSurrogateHighChar
public string Xml_InvalidSurrogateMissingLowChar
public string Xml_InvalidSurrogatePairWithArgs
public string Xml_RedefinePrefix
public string Xml_DtdAlreadyWritten
public string Xml_InvalidCharsInIndent
public string Xml_IndentCharsNotWhitespace
public string Xml_ConformanceLevelFragment
public string Xml_InvalidQuote
public string Xml_UndefPrefix
public string Xml_NoNamespaces
public string Xml_InvalidCDataChars
public string Xml_NotTheFirst
public string Xml_InvalidPiChars
public string Xml_InvalidNameChars
public string Xml_Closed
public string Xml_InvalidPrefix
public string Xml_InvalidIndentation
public string Xml_NotInWriteState
public string Xml_SurrogatePairSplit
public string Xml_NoMultipleRoots
public string XmlBadName
public string XmlNoNameAllowed
public string XmlConvert_BadUri
public string XmlConvert_BadFormat
public string XmlConvert_Overflow
public string XmlConvert_TypeBadMapping
public string XmlConvert_TypeBadMapping2
public string XmlConvert_TypeListBadMapping
public string XmlConvert_TypeListBadMapping2
public string XmlConvert_TypeToString
public string XmlConvert_TypeFromString
public string XmlConvert_TypeNoPrefix
public string XmlConvert_TypeNoNamespace
public string XmlConvert_NotOneCharString
public string Sch_ParEntityRefNesting
public string Sch_NotTokenString
public string Sch_XsdDateTimeCompare
public string Sch_InvalidNullCast
public string Sch_InvalidDateTimeOption
public string Sch_StandAloneNormalization
public string Sch_UnSpecifiedDefaultAttributeInExternalStandalone
public string Sch_DefaultException
public string Sch_DupElementDecl
public string Sch_IdAttrDeclared
public string Sch_RootMatchDocType
public string Sch_DupId
public string Sch_UndeclaredElement
public string Sch_UndeclaredAttribute
public string Sch_UndeclaredNotation
public string Sch_UndeclaredId
public string Sch_SchemaRootExpected
public string Sch_XSDSchemaRootExpected
public string Sch_UnsupportedAttribute
public string Sch_UnsupportedElement
public string Sch_MissAttribute
public string Sch_AnnotationLocation
public string Sch_DataTypeTextOnly
public string Sch_UnknownModel
public string Sch_UnknownOrder
public string Sch_UnknownContent
public string Sch_UnknownRequired
public string Sch_UnknownDtType
public string Sch_MixedMany
public string Sch_GroupDisabled
public string Sch_MissDtvalue
public string Sch_MissDtvaluesAttribute
public string Sch_DupDtType
public string Sch_DupAttribute
public string Sch_RequireEnumeration
public string Sch_DefaultIdValue
public string Sch_ElementNotAllowed
public string Sch_ElementMissing
public string Sch_ManyMaxOccurs
public string Sch_MaxOccursInvalid
public string Sch_MinOccursInvalid
public string Sch_DtMaxLengthInvalid
public string Sch_DtMinLengthInvalid
public string Sch_DupDtMaxLength
public string Sch_DupDtMinLength
public string Sch_DtMinMaxLength
public string Sch_DupElement
public string Sch_DupGroupParticle
public string Sch_InvalidValue
public string Sch_InvalidValueDetailed
public string Sch_InvalidValueDetailedAttribute
public string Sch_MissRequiredAttribute
public string Sch_FixedAttributeValue
public string Sch_FixedElementValue
public string Sch_AttributeValueDataTypeDetailed
public string Sch_AttributeDefaultDataType
public string Sch_IncludeLocation
public string Sch_ImportLocation
public string Sch_RedefineLocation
public string Sch_InvalidBlockDefaultValue
public string Sch_InvalidFinalDefaultValue
public string Sch_InvalidElementBlockValue
public string Sch_InvalidElementFinalValue
public string Sch_InvalidSimpleTypeFinalValue
public string Sch_InvalidComplexTypeBlockValue
public string Sch_InvalidComplexTypeFinalValue
public string Sch_DupIdentityConstraint
public string Sch_DupGlobalElement
public string Sch_DupGlobalAttribute
public string Sch_DupSimpleType
public string Sch_DupComplexType
public string Sch_DupGroup
public string Sch_DupAttributeGroup
public string Sch_DupNotation
public string Sch_DefaultFixedAttributes
public string Sch_FixedInRef
public string Sch_FixedDefaultInRef
public string Sch_DupXsdElement
public string Sch_ForbiddenAttribute
public string Sch_AttributeIgnored
public string Sch_ElementRef
public string Sch_TypeMutualExclusive
public string Sch_ElementNameRef
public string Sch_AttributeNameRef
public string Sch_TextNotAllowed
public string Sch_UndeclaredType
public string Sch_UndeclaredSimpleType
public string Sch_UndeclaredEquivClass
public string Sch_AttListPresence
public string Sch_NotationValue
public string Sch_EnumerationValue
public string Sch_EmptyAttributeValue
public string Sch_InvalidLanguageId
public string Sch_XmlSpace
public string Sch_InvalidXsdAttributeValue
public string Sch_InvalidXsdAttributeDatatypeValue
public string Sch_ElementValueDataTypeDetailed
public string Sch_InvalidElementDefaultValue
public string Sch_NonDeterministic
public string Sch_NonDeterministicAnyEx
public string Sch_NonDeterministicAnyAny
public string Sch_StandAlone
public string Sch_XmlNsAttribute
public string Sch_AllElement
public string Sch_MismatchTargetNamespaceInclude
public string Sch_MismatchTargetNamespaceImport
public string Sch_MismatchTargetNamespaceEx
public string Sch_XsiTypeNotFound
public string Sch_XsiTypeAbstract
public string Sch_ListFromNonatomic
public string Sch_UnionFromUnion
public string Sch_DupLengthFacet
public string Sch_DupMinLengthFacet
public string Sch_DupMaxLengthFacet
public string Sch_DupWhiteSpaceFacet
public string Sch_DupMaxInclusiveFacet
public string Sch_DupMaxExclusiveFacet
public string Sch_DupMinInclusiveFacet
public string Sch_DupMinExclusiveFacet
public string Sch_DupTotalDigitsFacet
public string Sch_DupFractionDigitsFacet
public string Sch_LengthFacetProhibited
public string Sch_MinLengthFacetProhibited
public string Sch_MaxLengthFacetProhibited
public string Sch_PatternFacetProhibited
public string Sch_EnumerationFacetProhibited
public string Sch_WhiteSpaceFacetProhibited
public string Sch_MaxInclusiveFacetProhibited
public string Sch_MaxExclusiveFacetProhibited
public string Sch_MinInclusiveFacetProhibited
public string Sch_MinExclusiveFacetProhibited
public string Sch_TotalDigitsFacetProhibited
public string Sch_FractionDigitsFacetProhibited
public string Sch_LengthFacetInvalid
public string Sch_MinLengthFacetInvalid
public string Sch_MaxLengthFacetInvalid
public string Sch_MaxInclusiveFacetInvalid
public string Sch_MaxExclusiveFacetInvalid
public string Sch_MinInclusiveFacetInvalid
public string Sch_MinExclusiveFacetInvalid
public string Sch_TotalDigitsFacetInvalid
public string Sch_FractionDigitsFacetInvalid
public string Sch_PatternFacetInvalid
public string Sch_EnumerationFacetInvalid
public string Sch_InvalidWhiteSpace
public string Sch_UnknownFacet
public string Sch_LengthAndMinMax
public string Sch_MinLengthGtMaxLength
public string Sch_FractionDigitsGtTotalDigits
public string Sch_LengthConstraintFailed
public string Sch_MinLengthConstraintFailed
public string Sch_MaxLengthConstraintFailed
public string Sch_PatternConstraintFailed
public string Sch_EnumerationConstraintFailed
public string Sch_MaxInclusiveConstraintFailed
public string Sch_MaxExclusiveConstraintFailed
public string Sch_MinInclusiveConstraintFailed
public string Sch_MinExclusiveConstraintFailed
public string Sch_TotalDigitsConstraintFailed
public string Sch_FractionDigitsConstraintFailed
public string Sch_UnionFailedEx
public string Sch_NotationRequired
public string Sch_DupNotationAttribute
public string Sch_MissingPublicSystemAttribute
public string Sch_NotationAttributeOnEmptyElement
public string Sch_RefNotInScope
public string Sch_UndeclaredIdentityConstraint
public string Sch_RefInvalidIdentityConstraint
public string Sch_RefInvalidCardin
public string Sch_ReftoKeyref
public string Sch_EmptyXPath
public string Sch_UnresolvedPrefix
public string Sch_UnresolvedKeyref
public string Sch_ICXpathError
public string Sch_SelectorAttr
public string Sch_FieldSimpleTypeExpected
public string Sch_FieldSingleValueExpected
public string Sch_MissingKey
public string Sch_DuplicateKey
public string Sch_TargetNamespaceXsi
public string Sch_UndeclaredEntity
public string Sch_UnparsedEntityRef
public string Sch_MaxOccursInvalidXsd
public string Sch_MinOccursInvalidXsd
public string Sch_MaxInclusiveExclusive
public string Sch_MinInclusiveExclusive
public string Sch_MinInclusiveGtMaxInclusive
public string Sch_MinExclusiveGtMaxExclusive
public string Sch_MinInclusiveGtMaxExclusive
public string Sch_MinExclusiveGtMaxInclusive
public string Sch_SimpleTypeRestriction
public string Sch_InvalidFacetPosition
public string Sch_AttributeMutuallyExclusive
public string Sch_AnyAttributeLastChild
public string Sch_ComplexTypeContentModel
public string Sch_ComplexContentContentModel
public string Sch_NotNormalizedString
public string Sch_FractionDigitsNotOnDecimal
public string Sch_ContentInNill
public string Sch_NoElementSchemaFound
public string Sch_NoAttributeSchemaFound
public string Sch_InvalidNamespace
public string Sch_InvalidTargetNamespaceAttribute
public string Sch_InvalidNamespaceAttribute
public string Sch_InvalidSchemaLocation
public string Sch_ImportTargetNamespace
public string Sch_ImportTargetNamespaceNull
public string Sch_GroupDoubleRedefine
public string Sch_ComponentRedefineNotFound
public string Sch_GroupRedefineNotFound
public string Sch_AttrGroupDoubleRedefine
public string Sch_AttrGroupRedefineNotFound
public string Sch_ComplexTypeDoubleRedefine
public string Sch_ComplexTypeRedefineNotFound
public string Sch_SimpleToComplexTypeRedefine
public string Sch_SimpleTypeDoubleRedefine
public string Sch_ComplexToSimpleTypeRedefine
public string Sch_SimpleTypeRedefineNotFound
public string Sch_MinMaxGroupRedefine
public string Sch_MultipleGroupSelfRef
public string Sch_MultipleAttrGroupSelfRef
public string Sch_InvalidTypeRedefine
public string Sch_InvalidElementRef
public string Sch_MinGtMax
public string Sch_DupSelector
public string Sch_IdConstraintNoSelector
public string Sch_IdConstraintNoFields
public string Sch_IdConstraintNoRefer
public string Sch_SelectorBeforeFields
public string Sch_NoSimpleTypeContent
public string Sch_SimpleTypeRestRefBase
public string Sch_SimpleTypeRestRefBaseNone
public string Sch_SimpleTypeListRefBase
public string Sch_SimpleTypeListRefBaseNone
public string Sch_SimpleTypeUnionNoBase
public string Sch_NoRestOrExtQName
public string Sch_NoRestOrExt
public string Sch_NoGroupParticle
public string Sch_InvalidAllMin
public string Sch_InvalidAllMax
public string Sch_InvalidFacet
public string Sch_AbstractElement
public string Sch_XsiTypeBlockedEx
public string Sch_InvalidXsiNill
public string Sch_SubstitutionNotAllowed
public string Sch_SubstitutionBlocked
public string Sch_InvalidElementInEmptyEx
public string Sch_InvalidElementInTextOnlyEx
public string Sch_InvalidTextInElement
public string Sch_InvalidElementContent
public string Sch_InvalidElementContentComplex
public string Sch_IncompleteContent
public string Sch_IncompleteContentComplex
public string Sch_InvalidTextInElementExpecting
public string Sch_InvalidElementContentExpecting
public string Sch_InvalidElementContentExpectingComplex
public string Sch_IncompleteContentExpecting
public string Sch_IncompleteContentExpectingComplex
public string Sch_InvalidElementSubstitution
public string Sch_ElementNameAndNamespace
public string Sch_ElementName
public string Sch_ContinuationString
public string Sch_AnyElementNS
public string Sch_AnyElement
public string Sch_InvalidTextInEmpty
public string Sch_InvalidWhitespaceInEmpty
public string Sch_InvalidPIComment
public string Sch_InvalidAttributeRef
public string Sch_OptionalDefaultAttribute
public string Sch_AttributeCircularRef
public string Sch_IdentityConstraintCircularRef
public string Sch_SubstitutionCircularRef
public string Sch_InvalidAnyAttribute
public string Sch_DupIdAttribute
public string Sch_InvalidAllElementMax
public string Sch_InvalidAny
public string Sch_InvalidAnyDetailed
public string Sch_InvalidExamplar
public string Sch_NoExamplar
public string Sch_InvalidSubstitutionMember
public string Sch_RedefineNoSchema
public string Sch_ProhibitedAttribute
public string Sch_TypeCircularRef
public string Sch_TwoIdAttrUses
public string Sch_AttrUseAndWildId
public string Sch_MoreThanOneWildId
public string Sch_BaseFinalExtension
public string Sch_NotSimpleContent
public string Sch_NotComplexContent
public string Sch_BaseFinalRestriction
public string Sch_BaseFinalList
public string Sch_BaseFinalUnion
public string Sch_UndefBaseRestriction
public string Sch_UndefBaseExtension
public string Sch_DifContentType
public string Sch_InvalidContentRestriction
public string Sch_InvalidContentRestrictionDetailed
public string Sch_InvalidBaseToEmpty
public string Sch_InvalidBaseToMixed
public string Sch_DupAttributeUse
public string Sch_InvalidParticleRestriction
public string Sch_InvalidParticleRestrictionDetailed
public string Sch_ForbiddenDerivedParticleForAll
public string Sch_ForbiddenDerivedParticleForElem
public string Sch_ForbiddenDerivedParticleForChoice
public string Sch_ForbiddenDerivedParticleForSeq
public string Sch_ElementFromElement
public string Sch_ElementFromAnyRule1
public string Sch_ElementFromAnyRule2
public string Sch_AnyFromAnyRule1
public string Sch_AnyFromAnyRule2
public string Sch_AnyFromAnyRule3
public string Sch_GroupBaseFromAny1
public string Sch_GroupBaseFromAny2
public string Sch_ElementFromGroupBase1
public string Sch_ElementFromGroupBase2
public string Sch_ElementFromGroupBase3
public string Sch_GroupBaseRestRangeInvalid
public string Sch_GroupBaseRestNoMap
public string Sch_GroupBaseRestNotEmptiable
public string Sch_SeqFromAll
public string Sch_SeqFromChoice
public string Sch_UndefGroupRef
public string Sch_GroupCircularRef
public string Sch_AllRefNotRoot
public string Sch_AllRefMinMax
public string Sch_NotAllAlone
public string Sch_AttributeGroupCircularRef
public string Sch_UndefAttributeGroupRef
public string Sch_InvalidAttributeExtension
public string Sch_InvalidAnyAttributeRestriction
public string Sch_AttributeRestrictionProhibited
public string Sch_AttributeRestrictionInvalid
public string Sch_AttributeFixedInvalid
public string Sch_AttributeUseInvalid
public string Sch_AttributeRestrictionInvalidFromWildcard
public string Sch_NoDerivedAttribute
public string Sch_UnexpressibleAnyAttribute
public string Sch_RefInvalidAttribute
public string Sch_ElementCircularRef
public string Sch_RefInvalidElement
public string Sch_ElementCannotHaveValue
public string Sch_ElementInMixedWithFixed
public string Sch_ElementTypeCollision
public string Sch_InvalidIncludeLocation
public string Sch_CannotLoadSchema
public string Sch_CannotLoadSchemaLocation
public string Sch_LengthGtBaseLength
public string Sch_MinLengthGtBaseMinLength
public string Sch_MaxLengthGtBaseMaxLength
public string Sch_MaxMinLengthBaseLength
public string Sch_MaxInclusiveMismatch
public string Sch_MaxExclusiveMismatch
public string Sch_MinInclusiveMismatch
public string Sch_MinExclusiveMismatch
public string Sch_MinExlIncMismatch
public string Sch_MinExlMaxExlMismatch
public string Sch_MinIncMaxExlMismatch
public string Sch_MinIncExlMismatch
public string Sch_MaxIncExlMismatch
public string Sch_MaxExlIncMismatch
public string Sch_TotalDigitsMismatch
public string Sch_FacetBaseFixed
public string Sch_WhiteSpaceRestriction1
public string Sch_WhiteSpaceRestriction2
public string Sch_XsiNilAndFixed
public string Sch_MixSchemaTypes
public string Sch_XSDSchemaOnly
public string Sch_InvalidPublicAttribute
public string Sch_InvalidSystemAttribute
public string Sch_TypeAfterConstraints
public string Sch_XsiNilAndType
public string Sch_DupSimpleTypeChild
public string Sch_InvalidIdAttribute
public string Sch_InvalidNameAttributeEx
public string Sch_InvalidAttribute
public string Sch_EmptyChoice
public string Sch_DerivedNotFromBase
public string Sch_NeedSimpleTypeChild
public string Sch_InvalidCollection
public string Sch_UnrefNS
public string Sch_InvalidSimpleTypeRestriction
public string Sch_MultipleRedefine
public string Sch_NullValue
public string Sch_ComplexContentModel
public string Sch_SchemaNotPreprocessed
public string Sch_SchemaNotRemoved
public string Sch_ComponentAlreadySeenForNS
public string Sch_DefaultAttributeNotApplied
public string Sch_NotXsiAttribute
public string Sch_SchemaDoesNotExist
public string XmlDocument_ValidateInvalidNodeType
public string XmlDocument_NodeNotFromDocument
public string XmlDocument_NoNodeSchemaInfo
public string XmlDocument_NoSchemaInfo
public string Sch_InvalidStartTransition
public string Sch_InvalidStateTransition
public string Sch_InvalidEndValidation
public string Sch_InvalidEndElementCall
public string Sch_InvalidEndElementCallTyped
public string Sch_InvalidEndElementMultiple
public string Sch_DuplicateAttribute
public string Sch_InvalidPartialValidationType
public string Sch_SchemaElementNameMismatch
public string Sch_SchemaAttributeNameMismatch
public string Sch_ValidateAttributeInvalidCall
public string Sch_ValidateElementInvalidCall
public string Sch_EnumNotStarted
public string Sch_EnumFinished
public string SchInf_schema
public string SchInf_entity
public string SchInf_simplecontent
public string SchInf_extension
public string SchInf_particle
public string SchInf_ct
public string SchInf_seq
public string SchInf_noseq
public string SchInf_noct
public string SchInf_UnknownParticle
public string SchInf_schematype
public string SchInf_NoElement
public string Xp_UnclosedString
public string Xp_ExprExpected
public string Xp_InvalidArgumentType
public string Xp_InvalidNumArgs
public string Xp_InvalidName
public string Xp_InvalidToken
public string Xp_NodeSetExpected
public string Xp_NotSupported
public string Xp_InvalidPattern
public string Xp_InvalidKeyPattern
public string Xp_BadQueryObject
public string Xp_UndefinedXsltContext
public string Xp_NoContext
public string Xp_UndefVar
public string Xp_UndefFunc
public string Xp_FunctionFailed
public string Xp_CurrentNotAllowed
public string Xp_QueryTooComplex
public string Xdom_DualDocumentTypeNode
public string Xdom_DualDocumentElementNode
public string Xdom_DualDeclarationNode
public string Xdom_Import
public string Xdom_Import_NullNode
public string Xdom_NoRootEle
public string Xdom_Attr_Name
public string Xdom_AttrCol_Object
public string Xdom_AttrCol_Insert
public string Xdom_NamedNode_Context
public string Xdom_Version
public string Xdom_standalone
public string Xdom_Ele_Prefix
public string Xdom_Ent_Innertext
public string Xdom_EntRef_SetVal
public string Xdom_WS_Char
public string Xdom_Node_SetVal
public string Xdom_Empty_LocalName
public string Xdom_Set_InnerXml
public string Xdom_Attr_InUse
public string Xdom_Enum_ElementList
public string Xdom_Invalid_NT_String
public string Xdom_InvalidCharacter_EntityReference
public string Xdom_IndexOutOfRange
public string Xdom_Document_Innertext
public string Xpn_BadPosition
public string Xpn_MissingParent
public string Xpn_NoContent
public string Xdom_Load_NoDocument
public string Xdom_Load_NoReader
public string Xdom_Node_Null_Doc
public string Xdom_Node_Insert_Child
public string Xdom_Node_Insert_Contain
public string Xdom_Node_Insert_Path
public string Xdom_Node_Insert_Context
public string Xdom_Node_Insert_Location
public string Xdom_Node_Insert_TypeConflict
public string Xdom_Node_Remove_Contain
public string Xdom_Node_Remove_Child
public string Xdom_Node_Modify_ReadOnly
public string Xdom_TextNode_SplitText
public string Xdom_Attr_Reserved_XmlNS
public string Xdom_Node_Cloning
public string Xnr_ResolveEntity
public string XPathDocument_MissingSchemas
public string XPathDocument_NotEnoughSchemaInfo
public string XPathDocument_ValidateInvalidNodeType
public string XPathDocument_SchemaSetNotAllowed
public string XmlBin_MissingEndCDATA
public string XmlBin_InvalidQNameID
public string XmlBinary_UnexpectedToken
public string XmlBinary_InvalidSqlDecimal
public string XmlBinary_InvalidSignature
public string XmlBinary_InvalidProtocolVersion
public string XmlBinary_UnsupportedCodePage
public string XmlBinary_InvalidStandalone
public string XmlBinary_NoParserContext
public string XmlBinary_ListsOfValuesNotSupported
public string XmlBinary_CastNotSupported
public string XmlBinary_NoRemapPrefix
public string XmlBinary_AttrWithNsNoPrefix
public string XmlBinary_ValueTooBig
public string SqlTypes_ArithOverflow
public string SqlTypes_ArithTruncation
public string SqlTypes_DivideByZero
public string XmlMissingType
public string XmlUnsupportedType
public string XmlSerializerUnsupportedType
public string XmlSerializerUnsupportedMember
public string XmlUnsupportedTypeKind
public string XmlUnsupportedSoapTypeKind
public string XmlUnsupportedIDictionary
public string XmlUnsupportedIDictionaryDetails
public string XmlDuplicateTypeName
public string XmlSerializableNameMissing1
public string XmlConstructorInaccessible
public string XmlTypeInaccessible
public string XmlTypeStatic
public string XmlNoDefaultAccessors
public string XmlNoAddMethod
public string XmlReadOnlyPropertyError
public string XmlAttributeSetAgain
public string XmlIllegalWildcard
public string XmlIllegalArrayElement
public string XmlIllegalForm
public string XmlBareTextMember
public string XmlBareAttributeMember
public string XmlReflectionError
public string XmlTypeReflectionError
public string XmlPropertyReflectionError
public string XmlFieldReflectionError
public string XmlInvalidDataTypeUsage
public string XmlInvalidXsdDataType
public string XmlDataTypeMismatch
public string XmlIllegalTypeContext
public string XmlUdeclaredXsdType
public string XmlAnyElementNamespace
public string XmlInvalidConstantAttribute
public string XmlIllegalDefault
public string XmlIllegalAttributesArrayAttribute
public string XmlIllegalElementsArrayAttribute
public string XmlIllegalArrayArrayAttribute
public string XmlIllegalAttribute
public string XmlIllegalType
public string XmlIllegalAttrOrText
public string XmlIllegalSoapAttribute
public string XmlIllegalAttrOrTextInterface
public string XmlIllegalAttributeFlagsArray
public string XmlIllegalAnyElement
public string XmlInvalidIsNullable
public string XmlInvalidNotNullable
public string XmlInvalidFormUnqualified
public string XmlDuplicateNamespace
public string XmlElementHasNoName
public string XmlAttributeHasNoName
public string XmlElementImportedTwice
public string XmlHiddenMember
public string XmlInvalidXmlOverride
public string XmlMembersDeriveError
public string XmlTypeUsedTwice
public string XmlMissingGroup
public string XmlMissingAttributeGroup
public string XmlMissingDataType
public string XmlInvalidEncoding
public string XmlMissingElement
public string XmlMissingAttribute
public string XmlMissingMethodEnum
public string XmlNoAttributeHere
public string XmlNeedAttributeHere
public string XmlElementNameMismatch
public string XmlUnsupportedDefaultType
public string XmlUnsupportedDefaultValue
public string XmlInvalidDefaultValue
public string XmlInvalidDefaultEnumValue
public string XmlUnknownNode
public string XmlUnknownConstant
public string XmlSerializeError
public string XmlSerializeErrorDetails
public string XmlCompilerError
public string XmlSchemaDuplicateNamespace
public string XmlSchemaCompiled
public string XmlInvalidSchemaExtension
public string XmlInvalidArrayDimentions
public string XmlInvalidArrayTypeName
public string XmlInvalidArrayTypeNamespace
public string XmlMissingArrayType
public string XmlEmptyArrayType
public string XmlInvalidArraySyntax
public string XmlInvalidArrayTypeSyntax
public string XmlMismatchedArrayBrackets
public string XmlInvalidArrayLength
public string XmlMissingHref
public string XmlInvalidHref
public string XmlUnknownType
public string XmlAbstractType
public string XmlMappingsScopeMismatch
public string XmlMethodTypeNameConflict
public string XmlCannotReconcileAccessor
public string XmlCannotReconcileAttributeAccessor
public string XmlCannotReconcileAccessorDefault
public string XmlInvalidTypeAttributes
public string XmlInvalidAttributeUse
public string XmlTypesDuplicate
public string XmlInvalidSoapArray
public string XmlCannotIncludeInSchema
public string XmlSoapCannotIncludeInSchema
public string XmlInvalidSerializable
public string XmlInvalidUseOfType
public string XmlUnxpectedType
public string XmlUnknownAnyElement
public string XmlMultipleAttributeOverrides
public string XmlInvalidEnumAttribute
public string XmlInvalidReturnPosition
public string XmlInvalidElementAttribute
public string XmlInvalidVoid
public string XmlInvalidContent
public string XmlInvalidSchemaElementType
public string XmlInvalidSubstitutionGroupUse
public string XmlElementMissingType
public string XmlInvalidAnyAttributeUse
public string XmlSoapInvalidAttributeUse
public string XmlSoapInvalidChoice
public string XmlSoapUnsupportedGroupRef
public string XmlSoapUnsupportedGroupRepeat
public string XmlSoapUnsupportedGroupNested
public string XmlSoapUnsupportedGroupAny
public string XmlInvalidEnumContent
public string XmlInvalidAttributeType
public string XmlInvalidBaseType
public string XmlPrimitiveBaseType
public string XmlInvalidIdentifier
public string XmlGenError
public string XmlInvalidXmlns
public string XmlCircularReference
public string XmlCircularReference2
public string XmlAnonymousBaseType
public string XmlMissingSchema
public string XmlNoSerializableMembers
public string XmlIllegalOverride
public string XmlReadOnlyCollection
public string XmlRpcNestedValueType
public string XmlRpcRefsInValueType
public string XmlRpcArrayOfValueTypes
public string XmlDuplicateElementName
public string XmlDuplicateAttributeName
public string XmlBadBaseElement
public string XmlBadBaseType
public string XmlUndefinedAlias
public string XmlChoiceIdentifierType
public string XmlChoiceIdentifierArrayType
public string XmlChoiceIdentifierTypeEnum
public string XmlChoiceIdentiferMemberMissing
public string XmlChoiceIdentiferAmbiguous
public string XmlChoiceIdentiferMissing
public string XmlChoiceMissingValue
public string XmlChoiceMissingAnyValue
public string XmlChoiceMismatchChoiceException
public string XmlArrayItemAmbiguousTypes
public string XmlUnsupportedInterface
public string XmlUnsupportedInterfaceDetails
public string XmlUnsupportedRank
public string XmlUnsupportedInheritance
public string XmlIllegalMultipleText
public string XmlIllegalMultipleTextMembers
public string XmlIllegalArrayTextAttribute
public string XmlIllegalTypedTextAttribute
public string XmlIllegalSimpleContentExtension
public string XmlInvalidCast
public string XmlInvalidCastWithId
public string XmlInvalidArrayRef
public string XmlInvalidNullCast
public string XmlMultipleXmlns
public string XmlMultipleXmlnsMembers
public string XmlXmlnsInvalidType
public string XmlSoleXmlnsAttribute
public string XmlConstructorHasSecurityAttributes
public string XmlPropertyHasSecurityAttributes
public string XmlMethodHasSecurityAttributes
public string XmlDefaultAccessorHasSecurityAttributes
public string XmlInvalidChoiceIdentifierValue
public string XmlAnyElementDuplicate
public string XmlChoiceIdDuplicate
public string XmlChoiceIdentifierMismatch
public string XmlUnsupportedRedefine
public string XmlDuplicateElementInScope
public string XmlDuplicateElementInScope1
public string XmlNoPartialTrust
public string XmlInvalidEncodingNotEncoded1
public string XmlInvalidEncoding3
public string XmlInvalidSpecifiedType
public string XmlUnsupportedOpenGenericType
public string XmlMismatchSchemaObjects
public string XmlCircularTypeReference
public string XmlCircularGroupReference
public string XmlRpcLitElementNamespace
public string XmlRpcLitElementNullable
public string XmlRpcLitElements
public string XmlRpcLitArrayElement
public string XmlRpcLitAttributeAttributes
public string XmlRpcLitAttributes
public string XmlSequenceMembers
public string XmlRpcLitXmlns
public string XmlDuplicateNs
public string XmlAnonymousInclude
public string RefSyntaxNotSupportedForElements0
public string XmlSchemaIncludeLocation
public string XmlSerializableSchemaError
public string XmlGetSchemaMethodName
public string XmlGetSchemaMethodMissing
public string XmlGetSchemaMethodReturnType
public string XmlGetSchemaEmptyTypeName
public string XmlGetSchemaTypeMissing
public string XmlGetSchemaInclude
public string XmlSerializableAttributes
public string XmlSerializableMergeItem
public string XmlSerializableBadDerivation
public string XmlSerializableMissingClrType
public string XmlCircularDerivation
public string XmlSerializerAccessDenied
public string XmlIdentityAccessDenied
public string XmlMelformMapping
public string XmlSchemaSyntaxErrorDetails
public string XmlSchemaElementReference
public string XmlSchemaAttributeReference
public string XmlSchemaItem
public string XmlSchemaNamedItem
public string XmlSchemaContentDef
public string XmlSchema
public string XmlSerializerCompileFailed
public string XmlSerializableRootDupName
public string XmlDropDefaultAttribute
public string XmlDropAttributeValue
public string XmlDropArrayAttributeValue
public string XmlDropNonPrimitiveAttributeValue
public string XmlNotKnownDefaultValue
public string XmlRemarks
public string XmlCodegenWarningDetails
public string XmlExtensionComment
public string XmlExtensionDuplicateDefinition
public string XmlImporterExtensionBadLocalTypeName
public string XmlImporterExtensionBadTypeName
public string XmlConfigurationDuplicateExtension
public string XmlPregenMissingDirectory
public string XmlPregenMissingTempDirectory
public string XmlPregenTypeDynamic
public string XmlSerializerExpiredDetails
public string XmlSerializerExpired
public string XmlPregenAssemblyDynamic
public string XmlNotSerializable
public string XmlPregenOrphanType
public string XmlPregenCannotLoad
public string XmlPregenInvalidXmlSerializerAssemblyAttribute
public string XmlSequenceInconsistent
public string XmlSequenceUnique
public string XmlSequenceHierarchy
public string XmlSequenceMatch
public string XmlDisallowNegativeValues
public string Xml_BadComment
public string Xml_NumEntityOverflow
public string Xml_UnexpectedCharacter
public string Xml_UnexpectedToken1
public string Xml_TagMismatchFileName
public string Xml_ReservedNs
public string Xml_BadElementData
public string Xml_UnexpectedElement
public string Xml_TagNotInTheSameEntity
public string Xml_InvalidPartialContentData
public string Xml_CanNotStartWithXmlInNamespace
public string Xml_UnparsedEntity
public string Xml_InvalidContentForThisNode
public string Xml_MissingEncodingDecl
public string Xml_InvalidSurrogatePair
public string Sch_ErrorPosition
public string Sch_ReservedNsDecl
public string Sch_NotInSchemaCollection
public string Sch_NotationNotAttr
public string Sch_InvalidContent
public string Sch_InvalidContentExpecting
public string Sch_InvalidTextWhiteSpace
public string Sch_XSCHEMA
public string Sch_DubSchema
public string Xp_TokenExpected
public string Xp_NodeTestExpected
public string Xp_NumberExpected
public string Xp_QueryExpected
public string Xp_InvalidArgument
public string Xp_FunctionExpected
public string Xp_InvalidPatternString
public string Xp_BadQueryString
public string XdomXpNav_NullParam
public string Xdom_Load_NodeType
public string XmlMissingMethod
public string XmlIncludeSerializableError
public string XmlCompilerDynModule
public string XmlInvalidSchemaType
public string XmlInvalidAnyUse
public string XmlSchemaSyntaxError
public string XmlDuplicateChoiceElement
public string XmlConvert_BadTimeSpan
public string XmlConvert_BadBoolean
public string Xml_UnexpectedToken
public string Xml_PartialContentNodeTypeNotSupported
public string Sch_AttributeValueDataType
public string Sch_ElementValueDataType
public string Sch_NonDeterministicAny
public string Sch_MismatchTargetNamespace
public string Sch_UnionFailed
public string Sch_XsiTypeBlocked
public string Sch_InvalidElementInEmpty
public string Sch_InvalidElementInTextOnly
public string Sch_InvalidNameAttribute
public string XmlInternalError
public string XmlInternalErrorDetails
public string XmlInternalErrorMethod
public string XmlInternalErrorReaderAdvance
public string Enc_InvalidByteInEncoding
public string Arg_ExpectingXmlTextReader
public string Arg_CannotCreateNode
public string Arg_IncompatibleParamType
public string XmlNonCLSCompliantException
public string Xml_CannotFindFileInXapPackage
public string Xml_XapResolverCannotOpenUri
public string GetString(string name)
public string GetString(string name, Object[] args)
}
public System.Xml.Resolvers.XmlKnownDtds : Enum {
public int value__
public XmlKnownDtds None
public XmlKnownDtds Xhtml10
public XmlKnownDtds Rss091
public XmlKnownDtds All
}
public System.Xml.Resolvers.XmlPreloadedResolver : XmlResolver {
private XmlResolver fallbackResolver
private Dictionary`2<Uri, PreloadedData> mappings
private XmlKnownDtds preloadedDtds
private XmlKnownDtdData[] Xhtml10_Dtd
private XmlKnownDtdData[] Rss091_Dtd
public ICredentials Credentials
public IEnumerable`1<Uri> PreloadedUris
public void .ctor(XmlKnownDtds preloadedDtds)
public void .ctor(XmlResolver fallbackResolver)
public void .ctor(XmlResolver fallbackResolver, XmlKnownDtds preloadedDtds)
public void .ctor(XmlResolver fallbackResolver, XmlKnownDtds preloadedDtds, IEqualityComparer`1<Uri> uriComparer)
public Uri ResolveUri(Uri baseUri, string relativeUri)
public object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn)
public void set_Credentials(ICredentials value)
public bool SupportsType(Uri absoluteUri, Type type)
public void Add(Uri uri, Byte[] value)
public void Add(Uri uri, Byte[] value, int offset, int count)
public void Add(Uri uri, Stream value)
public void Add(Uri uri, string value)
public IEnumerable`1<Uri> get_PreloadedUris()
public void Remove(Uri uri)
private void Add(Uri uri, PreloadedData data)
private void AddKnownDtd(XmlKnownDtdData[] dtdSet)
public Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn)
}
internal System.Xml.SafeAsciiDecoder : Decoder {
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed)
}
internal System.Xml.Schema.ActiveAxis : object {
private int currentDepth
private bool isActive
private Asttree axisTree
private ArrayList axisStack
public int CurrentDepth
public int get_CurrentDepth()
internal void Reactivate()
internal void .ctor(Asttree axisTree)
public bool MoveToStartElement(string localname, string URN)
public bool EndElement(string localname, string URN)
public bool MoveToAttribute(string localname, string URN)
}
internal System.Xml.Schema.AllElementsContentValidator : ContentValidator {
private Hashtable elements
private Object[] particles
private BitSet isRequired
private int countRequired
public bool IsEmptiable
public void .ctor(XmlSchemaContentType contentType, int size, bool isEmptiable)
public bool AddElement(XmlQualifiedName name, object particle, bool isEmptiable)
public bool get_IsEmptiable()
public void InitValidation(ValidationState context)
public object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode)
public bool CompleteValidation(ValidationState context)
public ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly)
public ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet)
}
internal System.Xml.Schema.Asttree : object {
private ArrayList fAxisArray
private string xpathexpr
private bool isField
private XmlNamespaceManager nsmgr
internal ArrayList SubtreeArray
internal ArrayList get_SubtreeArray()
public void .ctor(string xPath, bool isField, XmlNamespaceManager nsmgr)
private bool IsNameTest(Axis ast)
internal bool IsAttribute(Axis ast)
private bool IsDescendantOrSelf(Axis ast)
internal bool IsSelf(Axis ast)
public void CompileXPath(string xPath, bool isField, XmlNamespaceManager nsmgr)
private void SetURN(Axis axis, XmlNamespaceManager nsmgr)
}
internal System.Xml.Schema.AttributeMatchState : Enum {
public int value__
public AttributeMatchState AttributeFound
public AttributeMatchState AnyIdAttributeFound
public AttributeMatchState UndeclaredElementAndAttribute
public AttributeMatchState UndeclaredAttribute
public AttributeMatchState AnyAttributeLax
public AttributeMatchState AnyAttributeSkip
public AttributeMatchState ProhibitedAnyAttribute
public AttributeMatchState ProhibitedAttribute
public AttributeMatchState AttributeNameMismatch
public AttributeMatchState ValidateAttributeInvalidCall
}
internal System.Xml.Schema.AutoValidator : BaseValidator {
private string x_schema
public bool PreserveWhitespace
public void .ctor(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling)
public bool get_PreserveWhitespace()
public void Validate()
public void CompleteValidation()
public object FindId(string name)
private ValidationType DetectValidationType()
}
internal System.Xml.Schema.AxisElement : object {
internal DoubleLinkAxis curNode
internal int rootDepth
internal int curDepth
internal bool isMatch
internal DoubleLinkAxis CurNode
internal DoubleLinkAxis get_CurNode()
internal void .ctor(DoubleLinkAxis node, int depth)
internal void SetDepth(int depth)
internal void MoveToParent(int depth, ForwardAxis parent)
internal bool MoveToChild(string name, string URN, int depth, ForwardAxis parent)
}
internal System.Xml.Schema.AxisStack : object {
private ArrayList stack
private ForwardAxis subtree
private ActiveAxis parent
internal ForwardAxis Subtree
internal int Length
internal ForwardAxis get_Subtree()
internal int get_Length()
public void .ctor(ForwardAxis faxis, ActiveAxis parent)
internal void Push(int depth)
internal void Pop()
internal bool Equal(string thisname, string thisURN, string name, string URN)
internal void MoveToParent(string name, string URN, int depth)
internal bool MoveToChild(string name, string URN, int depth)
internal bool MoveToAttribute(string name, string URN, int depth)
}
internal System.Xml.Schema.BaseProcessor : object {
private XmlNameTable nameTable
private SchemaNames schemaNames
private ValidationEventHandler eventHandler
private XmlSchemaCompilationSettings compilationSettings
private int errorCount
private string NsXml
protected XmlNameTable NameTable
protected SchemaNames SchemaNames
protected ValidationEventHandler EventHandler
protected XmlSchemaCompilationSettings CompilationSettings
protected bool HasErrors
public void .ctor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler)
public void .ctor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler, XmlSchemaCompilationSettings compilationSettings)
protected XmlNameTable get_NameTable()
protected SchemaNames get_SchemaNames()
protected ValidationEventHandler get_EventHandler()
protected XmlSchemaCompilationSettings get_CompilationSettings()
protected bool get_HasErrors()
protected void AddToTable(XmlSchemaObjectTable table, XmlQualifiedName qname, XmlSchemaObject item)
private bool IsValidAttributeGroupRedefine(XmlSchemaObject existingObject, XmlSchemaObject item, XmlSchemaObjectTable table)
private bool IsValidGroupRedefine(XmlSchemaObject existingObject, XmlSchemaObject item, XmlSchemaObjectTable table)
private bool IsValidTypeRedefine(XmlSchemaObject existingObject, XmlSchemaObject item, XmlSchemaObjectTable table)
protected void SendValidationEvent(string code, XmlSchemaObject source)
protected void SendValidationEvent(string code, string msg, XmlSchemaObject source)
protected void SendValidationEvent(string code, string msg1, string msg2, XmlSchemaObject source)
protected void SendValidationEvent(string code, String[] args, Exception innerException, XmlSchemaObject source)
protected void SendValidationEvent(string code, string msg1, string msg2, string sourceUri, int lineNumber, int linePosition)
protected void SendValidationEvent(string code, XmlSchemaObject source, XmlSeverityType severity)
protected void SendValidationEvent(XmlSchemaException e)
protected void SendValidationEvent(string code, string msg, XmlSchemaObject source, XmlSeverityType severity)
protected void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity)
protected void SendValidationEventNoThrow(XmlSchemaException e, XmlSeverityType severity)
}
internal System.Xml.Schema.BaseValidator : object {
private XmlSchemaCollection schemaCollection
private IValidationEventHandling eventHandling
private XmlNameTable nameTable
private SchemaNames schemaNames
private PositionInfo positionInfo
private XmlResolver xmlResolver
private Uri baseUri
protected SchemaInfo schemaInfo
protected XmlValidatingReaderImpl reader
protected XmlQualifiedName elementName
protected ValidationState context
protected StringBuilder textValue
protected string textString
protected bool hasSibling
protected bool checkDatatype
public XmlValidatingReaderImpl Reader
public XmlSchemaCollection SchemaCollection
public XmlNameTable NameTable
public SchemaNames SchemaNames
public PositionInfo PositionInfo
public XmlResolver XmlResolver
public Uri BaseUri
public ValidationEventHandler EventHandler
public SchemaInfo SchemaInfo
public IDtdInfo DtdInfo
public bool PreserveWhitespace
public void .ctor(BaseValidator other)
public void .ctor(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling)
public XmlValidatingReaderImpl get_Reader()
public XmlSchemaCollection get_SchemaCollection()
public XmlNameTable get_NameTable()
public SchemaNames get_SchemaNames()
public PositionInfo get_PositionInfo()
public XmlResolver get_XmlResolver()
public void set_XmlResolver(XmlResolver value)
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public ValidationEventHandler get_EventHandler()
public SchemaInfo get_SchemaInfo()
public void set_SchemaInfo(SchemaInfo value)
public IDtdInfo get_DtdInfo()
public void set_DtdInfo(IDtdInfo value)
public bool get_PreserveWhitespace()
public void Validate()
public void CompleteValidation()
public object FindId(string name)
public void ValidateText()
public void ValidateWhitespace()
private void SaveTextValue(string value)
protected void SendValidationEvent(string code)
protected void SendValidationEvent(string code, String[] args)
protected void SendValidationEvent(string code, string arg)
protected void SendValidationEvent(string code, string arg1, string arg2)
protected void SendValidationEvent(XmlSchemaException e)
protected void SendValidationEvent(string code, string msg, XmlSeverityType severity)
protected void SendValidationEvent(string code, String[] args, XmlSeverityType severity)
protected void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity)
protected void ProcessEntity(SchemaInfo sinfo, string name, object sender, ValidationEventHandler eventhandler, string baseUri, int lineNumber, int linePosition)
protected void ProcessEntity(SchemaInfo sinfo, string name, IValidationEventHandling eventHandling, string baseUriStr, int lineNumber, int linePosition)
public BaseValidator CreateInstance(ValidationType valType, XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling, bool processIdentityConstraints)
}
internal System.Xml.Schema.BinaryFacetsChecker : FacetsChecker {
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(Byte[] value, XmlSchemaDatatype datatype)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
private bool MatchEnumeration(Byte[] value, ArrayList enumeration, XmlSchemaDatatype datatype)
}
internal System.Xml.Schema.BitSet : object {
private int bitSlotShift
private int bitSlotMask
private int count
private UInt32[] bits
public int Count
public bool Item
public bool IsEmpty
public void .ctor(int count)
public int get_Count()
public bool get_Item(int index)
public void Clear()
public void Clear(int index)
public void Set(int index)
public bool Get(int index)
public int NextSet(int startFrom)
public void And(BitSet other)
public void Or(BitSet other)
public int GetHashCode()
public bool Equals(object obj)
public BitSet Clone()
public bool get_IsEmpty()
public bool Intersects(BitSet other)
private int Subscript(int bitIndex)
private void EnsureLength(int nRequiredLength)
}
internal System.Xml.Schema.ChameleonKey : object {
internal string targetNS
internal Uri chameleonLocation
internal XmlSchema originalSchema
private int hashCode
public void .ctor(string ns, XmlSchema originalSchema)
public int GetHashCode()
public bool Equals(object obj)
}
internal System.Xml.Schema.ChoiceNode : InteriorNode {
public bool IsNullable
private void ConstructChildPos(SyntaxTreeNode child, BitSet firstpos, BitSet lastpos, BitSet[] followpos)
public void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos)
public bool get_IsNullable()
public void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions)
}
internal System.Xml.Schema.CompiledIdentityConstraint : object {
internal XmlQualifiedName name
private ConstraintRole role
private Asttree selector
private Asttree[] fields
internal XmlQualifiedName refer
public CompiledIdentityConstraint Empty
public ConstraintRole Role
public Asttree Selector
public Asttree[] Fields
public ConstraintRole get_Role()
public Asttree get_Selector()
public Asttree[] get_Fields()
public void .ctor(XmlSchemaIdentityConstraint constraint, XmlNamespaceManager nsmgr)
}
internal System.Xml.Schema.Compiler : BaseProcessor {
private string restrictionErrorMsg
private XmlSchemaObjectTable attributes
private XmlSchemaObjectTable attributeGroups
private XmlSchemaObjectTable elements
private XmlSchemaObjectTable schemaTypes
private XmlSchemaObjectTable groups
private XmlSchemaObjectTable notations
private XmlSchemaObjectTable examplars
private XmlSchemaObjectTable identityConstraints
private Stack complexTypeStack
private Hashtable schemasToCompile
private Hashtable importedSchemas
private XmlSchema schemaForSchema
public void .ctor(XmlNameTable nameTable, ValidationEventHandler eventHandler, XmlSchema schemaForSchema, XmlSchemaCompilationSettings compilationSettings)
public bool Execute(XmlSchemaSet schemaSet, SchemaInfo schemaCompiledInfo)
internal void Prepare(XmlSchema schema, bool cleanup)
private void UpdateSForSSimpleTypes()
private void Output(SchemaInfo schemaInfo)
internal void ImportAllCompiledSchemas(XmlSchemaSet schemaSet)
internal bool Compile()
private void CleanupAttribute(XmlSchemaAttribute attribute)
private void CleanupAttributeGroup(XmlSchemaAttributeGroup attributeGroup)
private void CleanupComplexType(XmlSchemaComplexType complexType)
private void CleanupSimpleType(XmlSchemaSimpleType simpleType)
private void CleanupElement(XmlSchemaElement element)
private void CleanupAttributes(XmlSchemaObjectCollection attributes)
private void CleanupGroup(XmlSchemaGroup group)
private void CleanupParticle(XmlSchemaParticle particle)
private void ProcessSubstitutionGroups()
private void CompileSubstitutionGroup(XmlSchemaSubstitutionGroup substitutionGroup)
private void RecursivelyCheckRedefinedGroups(XmlSchemaGroup redefinedGroup, XmlSchemaGroup baseGroup)
private void RecursivelyCheckRedefinedAttributeGroups(XmlSchemaAttributeGroup attributeGroup, XmlSchemaAttributeGroup baseAttributeGroup)
private void CompileGroup(XmlSchemaGroup group)
private void CompileSimpleType(XmlSchemaSimpleType simpleType)
private XmlSchemaSimpleType[] CompileBaseMemberTypes(XmlSchemaSimpleType simpleType)
private void CheckUnionType(XmlSchemaSimpleType unionMember, ArrayList memberTypeDefinitions, XmlSchemaSimpleType parentType)
private void CompileComplexType(XmlSchemaComplexType complexType)
private void CompileSimpleContentExtension(XmlSchemaComplexType complexType, XmlSchemaSimpleContentExtension simpleExtension)
private void CompileSimpleContentRestriction(XmlSchemaComplexType complexType, XmlSchemaSimpleContentRestriction simpleRestriction)
private void CompileComplexContentExtension(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaComplexContentExtension complexExtension)
private void CompileComplexContentRestriction(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaComplexContentRestriction complexRestriction)
private void CheckParticleDerivation(XmlSchemaComplexType complexType)
private void CheckParticleDerivation(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle)
private XmlSchemaParticle CompileContentTypeParticle(XmlSchemaParticle particle)
private XmlSchemaParticle CannonicalizeParticle(XmlSchemaParticle particle, bool root)
private XmlSchemaParticle CannonicalizeElement(XmlSchemaElement element)
private XmlSchemaParticle CannonicalizeGroupRef(XmlSchemaGroupRef groupRef, bool root)
private XmlSchemaParticle CannonicalizeAll(XmlSchemaAll all, bool root)
private XmlSchemaParticle CannonicalizeChoice(XmlSchemaChoice choice, bool root)
private XmlSchemaParticle CannonicalizeSequence(XmlSchemaSequence sequence, bool root)
private XmlSchemaParticle CannonicalizePointlessRoot(XmlSchemaParticle particle)
private bool IsValidRestriction(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle)
private bool IsElementFromElement(XmlSchemaElement derivedElement, XmlSchemaElement baseElement)
private bool IsElementFromAny(XmlSchemaElement derivedElement, XmlSchemaAny baseAny)
private bool IsAnyFromAny(XmlSchemaAny derivedAny, XmlSchemaAny baseAny)
private bool IsGroupBaseFromAny(XmlSchemaGroupBase derivedGroupBase, XmlSchemaAny baseAny)
private bool IsElementFromGroupBase(XmlSchemaElement derivedElement, XmlSchemaGroupBase baseGroupBase)
private bool IsChoiceFromChoiceSubstGroup(XmlSchemaChoice derivedChoice, XmlSchemaChoice baseChoice)
private bool IsGroupBaseFromGroupBase(XmlSchemaGroupBase derivedGroupBase, XmlSchemaGroupBase baseGroupBase, bool skipEmptableOnly)
private bool IsSequenceFromAll(XmlSchemaSequence derivedSequence, XmlSchemaAll baseAll)
private bool IsSequenceFromChoice(XmlSchemaSequence derivedSequence, XmlSchemaChoice baseChoice)
private bool IsValidOccurrenceRangeRestriction(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle)
private bool IsValidOccurrenceRangeRestriction(decimal minOccurs, decimal maxOccurs, decimal baseMinOccurs, decimal baseMaxOccurs)
private int GetMappingParticle(XmlSchemaParticle particle, XmlSchemaObjectCollection collection)
private bool IsParticleEmptiable(XmlSchemaParticle particle)
private void CalculateEffectiveTotalRange(XmlSchemaParticle particle, Decimal& minOccurs, Decimal& maxOccurs)
private void PushComplexType(XmlSchemaComplexType complexType)
private XmlSchemaContentType GetSchemaContentType(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaParticle particle)
private void CompileAttributeGroup(XmlSchemaAttributeGroup attributeGroup)
private void CompileLocalAttributes(XmlSchemaComplexType baseType, XmlSchemaComplexType derivedType, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaDerivationMethod derivedBy)
private void CheckAtrributeGroupRestriction(XmlSchemaAttributeGroup baseAttributeGroup, XmlSchemaAttributeGroup derivedAttributeGroup)
private bool IsProcessContentsRestricted(XmlSchemaComplexType baseType, XmlSchemaAnyAttribute derivedAttributeWildcard, XmlSchemaAnyAttribute baseAttributeWildcard)
private XmlSchemaAnyAttribute CompileAnyAttributeUnion(XmlSchemaAnyAttribute a, XmlSchemaAnyAttribute b)
private XmlSchemaAnyAttribute CompileAnyAttributeIntersection(XmlSchemaAnyAttribute a, XmlSchemaAnyAttribute b)
private void CompileAttribute(XmlSchemaAttribute xa)
private void SetDefaultFixed(XmlSchemaAttribute xa, SchemaAttDef decl)
private void CompileIdentityConstraint(XmlSchemaIdentityConstraint xi)
private void CompileElement(XmlSchemaElement xe)
private ContentValidator CompileComplexContent(XmlSchemaComplexType complexType)
private bool BuildParticleContentModel(ParticleContentValidator contentValidator, XmlSchemaParticle particle)
private void CompileParticleElements(XmlSchemaComplexType complexType, XmlSchemaParticle particle)
private void CompileParticleElements(XmlSchemaParticle particle)
private void CompileComplexTypeElements(XmlSchemaComplexType complexType)
private XmlSchemaSimpleType GetSimpleType(XmlQualifiedName name)
private XmlSchemaComplexType GetComplexType(XmlQualifiedName name)
private XmlSchemaType GetAnySchemaType(XmlQualifiedName name)
private void CopyPosition(XmlSchemaAnnotated to, XmlSchemaAnnotated from, bool copyParent)
private bool IsFixedEqual(SchemaDeclBase baseDecl, SchemaDeclBase derivedDecl)
}
internal System.Xml.Schema.Compositor : Enum {
public int value__
public Compositor Root
public Compositor Include
public Compositor Import
public Compositor Redefine
}
internal System.Xml.Schema.ConstraintStruct : object {
internal CompiledIdentityConstraint constraint
internal SelectorActiveAxis axisSelector
internal ArrayList axisFields
internal Hashtable qualifiedTable
internal Hashtable keyrefTable
private int tableDim
internal int TableDim
internal int get_TableDim()
internal void .ctor(CompiledIdentityConstraint constraint)
}
internal System.Xml.Schema.ContentValidator : object {
private XmlSchemaContentType contentType
private bool isOpen
private bool isEmptiable
public ContentValidator Empty
public ContentValidator TextOnly
public ContentValidator Mixed
public ContentValidator Any
public XmlSchemaContentType ContentType
public bool PreserveWhitespace
public bool IsEmptiable
public bool IsOpen
public void .ctor(XmlSchemaContentType contentType)
protected void .ctor(XmlSchemaContentType contentType, bool isOpen, bool isEmptiable)
public XmlSchemaContentType get_ContentType()
public bool get_PreserveWhitespace()
public bool get_IsEmptiable()
public bool get_IsOpen()
public void set_IsOpen(bool value)
public void InitValidation(ValidationState context)
public object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode)
public bool CompleteValidation(ValidationState context)
public ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly)
public ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet)
public void AddParticleToExpected(XmlSchemaParticle p, XmlSchemaSet schemaSet, ArrayList particles)
public void AddParticleToExpected(XmlSchemaParticle p, XmlSchemaSet schemaSet, ArrayList particles, bool global)
}
internal System.Xml.Schema.Datatype_anyAtomicType : Datatype_anySimpleType {
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
public XmlTypeCode TypeCode
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_anySimpleType : DatatypeImplementation {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public Type ValueType
public XmlTypeCode TypeCode
internal Type ListValueType
public XmlTokenizedType TokenizedType
internal RestrictionFlags ValidRestrictionFlags
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public Type get_ValueType()
public XmlTypeCode get_TypeCode()
internal Type get_ListValueType()
public XmlTokenizedType get_TokenizedType()
internal RestrictionFlags get_ValidRestrictionFlags()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_anyURI : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal bool HasValueFacets
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
internal bool get_HasValueFacets()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_base64Binary : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_boolean : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_byte : Datatype_short {
private Type atomicValueType
private Type listValueType
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal int Compare(object value1, object value2)
public Type get_ValueType()
internal Type get_ListValueType()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_char : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
public Type ValueType
internal Type ListValueType
internal RestrictionFlags ValidRestrictionFlags
public Type get_ValueType()
internal Type get_ListValueType()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_date : Datatype_dateTimeBase {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_dateTimeBase : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
private XsdDateTimeFlags dateTimeFlags
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal void .ctor(XsdDateTimeFlags dateTimeFlags)
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_day : Datatype_dateTimeBase {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_dayTimeDuration : Datatype_duration {
public XmlTypeCode TypeCode
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_decimal : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_double : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_doubleXdr : Datatype_double {
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal System.Xml.Schema.Datatype_duration : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_ENTITY : Datatype_NCName {
public XmlTypeCode TypeCode
public XmlTokenizedType TokenizedType
public XmlTypeCode get_TypeCode()
public XmlTokenizedType get_TokenizedType()
}
internal System.Xml.Schema.Datatype_ENUMERATION : Datatype_NMTOKEN {
public XmlTokenizedType TokenizedType
public XmlTokenizedType get_TokenizedType()
}
internal System.Xml.Schema.Datatype_fixed : Datatype_decimal {
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_float : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_floatXdr : Datatype_float {
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal System.Xml.Schema.Datatype_hexBinary : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_ID : Datatype_NCName {
public XmlTypeCode TypeCode
public XmlTokenizedType TokenizedType
public XmlTypeCode get_TypeCode()
public XmlTokenizedType get_TokenizedType()
}
internal System.Xml.Schema.Datatype_IDREF : Datatype_NCName {
public XmlTypeCode TypeCode
public XmlTokenizedType TokenizedType
public XmlTypeCode get_TypeCode()
public XmlTokenizedType get_TokenizedType()
}
internal System.Xml.Schema.Datatype_int : Datatype_long {
private Type atomicValueType
private Type listValueType
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal int Compare(object value1, object value2)
public Type get_ValueType()
internal Type get_ListValueType()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_integer : Datatype_decimal {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_language : Datatype_token {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_List : Datatype_anySimpleType {
private DatatypeImplementation itemType
private int minListSize
public Type ValueType
public XmlTokenizedType TokenizedType
internal Type ListValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
internal RestrictionFlags ValidRestrictionFlags
internal DatatypeImplementation ItemType
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal void .ctor(DatatypeImplementation type)
internal void .ctor(DatatypeImplementation type, int minListSize)
internal int Compare(object value1, object value2)
public Type get_ValueType()
public XmlTokenizedType get_TokenizedType()
internal Type get_ListValueType()
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal RestrictionFlags get_ValidRestrictionFlags()
internal DatatypeImplementation get_ItemType()
internal Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver namespaceResolver, Object& typedValue)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_long : Datatype_integer {
private Type atomicValueType
private Type listValueType
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
internal bool HasValueFacets
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal FacetsChecker get_FacetsChecker()
internal bool get_HasValueFacets()
public XmlTypeCode get_TypeCode()
internal int Compare(object value1, object value2)
public Type get_ValueType()
internal Type get_ListValueType()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_month : Datatype_dateTimeBase {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_monthDay : Datatype_dateTimeBase {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_Name : Datatype_token {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_NCName : Datatype_Name {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_negativeInteger : Datatype_nonPositiveInteger {
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_NMTOKEN : Datatype_token {
public XmlTypeCode TypeCode
public XmlTokenizedType TokenizedType
public XmlTypeCode get_TypeCode()
public XmlTokenizedType get_TokenizedType()
}
internal System.Xml.Schema.Datatype_nonNegativeInteger : Datatype_integer {
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
internal bool HasValueFacets
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal bool get_HasValueFacets()
}
internal System.Xml.Schema.Datatype_nonPositiveInteger : Datatype_integer {
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
internal bool HasValueFacets
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal bool get_HasValueFacets()
}
internal System.Xml.Schema.Datatype_normalizedString : Datatype_string {
public XmlTypeCode TypeCode
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal bool HasValueFacets
public XmlTypeCode get_TypeCode()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal bool get_HasValueFacets()
}
internal System.Xml.Schema.Datatype_normalizedStringV1Compat : Datatype_string {
public XmlTypeCode TypeCode
internal bool HasValueFacets
public XmlTypeCode get_TypeCode()
internal bool get_HasValueFacets()
}
internal System.Xml.Schema.Datatype_NOTATION : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public XmlTokenizedType TokenizedType
internal RestrictionFlags ValidRestrictionFlags
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public XmlTokenizedType get_TokenizedType()
internal RestrictionFlags get_ValidRestrictionFlags()
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
internal void VerifySchemaValid(XmlSchemaObjectTable notations, XmlSchemaObject caller)
}
internal System.Xml.Schema.Datatype_positiveInteger : Datatype_nonNegativeInteger {
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_QName : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public XmlTokenizedType TokenizedType
internal RestrictionFlags ValidRestrictionFlags
public Type ValueType
internal Type ListValueType
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public XmlTokenizedType get_TokenizedType()
internal RestrictionFlags get_ValidRestrictionFlags()
public Type get_ValueType()
internal Type get_ListValueType()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_QNameXdr : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
public XmlTokenizedType TokenizedType
public Type ValueType
internal Type ListValueType
public XmlTokenizedType get_TokenizedType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
public Type get_ValueType()
internal Type get_ListValueType()
}
internal System.Xml.Schema.Datatype_short : Datatype_int {
private Type atomicValueType
private Type listValueType
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal int Compare(object value1, object value2)
public Type get_ValueType()
internal Type get_ListValueType()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_string : Datatype_anySimpleType {
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public XmlTokenizedType TokenizedType
internal RestrictionFlags ValidRestrictionFlags
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
public XmlTokenizedType get_TokenizedType()
internal RestrictionFlags get_ValidRestrictionFlags()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_time : Datatype_dateTimeBase {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_token : Datatype_normalizedString {
public XmlTypeCode TypeCode
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
public XmlTypeCode get_TypeCode()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
}
internal System.Xml.Schema.Datatype_tokenV1Compat : Datatype_normalizedStringV1Compat {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_union : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
private XmlSchemaSimpleType[] types
public Type ValueType
public XmlTypeCode TypeCode
internal FacetsChecker FacetsChecker
internal Type ListValueType
internal RestrictionFlags ValidRestrictionFlags
internal XmlSchemaSimpleType[] BaseMemberTypes
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal void .ctor(XmlSchemaSimpleType[] types)
internal int Compare(object value1, object value2)
public Type get_ValueType()
public XmlTypeCode get_TypeCode()
internal FacetsChecker get_FacetsChecker()
internal Type get_ListValueType()
internal RestrictionFlags get_ValidRestrictionFlags()
internal XmlSchemaSimpleType[] get_BaseMemberTypes()
internal bool HasAtomicMembers()
internal bool IsUnionBaseOf(DatatypeImplementation derivedType)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
internal Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_unsignedByte : Datatype_unsignedShort {
private Type atomicValueType
private Type listValueType
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal int Compare(object value1, object value2)
public Type get_ValueType()
internal Type get_ListValueType()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_unsignedInt : Datatype_unsignedLong {
private Type atomicValueType
private Type listValueType
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal int Compare(object value1, object value2)
public Type get_ValueType()
internal Type get_ListValueType()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_unsignedLong : Datatype_nonNegativeInteger {
private Type atomicValueType
private Type listValueType
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal int Compare(object value1, object value2)
public Type get_ValueType()
internal Type get_ListValueType()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_unsignedShort : Datatype_unsignedInt {
private Type atomicValueType
private Type listValueType
private FacetsChecker numeric10FacetsChecker
internal FacetsChecker FacetsChecker
public XmlTypeCode TypeCode
public Type ValueType
internal Type ListValueType
internal FacetsChecker get_FacetsChecker()
public XmlTypeCode get_TypeCode()
internal int Compare(object value1, object value2)
public Type get_ValueType()
internal Type get_ListValueType()
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_untypedAtomicType : Datatype_anyAtomicType {
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
public XmlTypeCode TypeCode
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_uuid : Datatype_anySimpleType {
private Type atomicValueType
private Type listValueType
public Type ValueType
internal Type ListValueType
internal RestrictionFlags ValidRestrictionFlags
public Type get_ValueType()
internal Type get_ListValueType()
internal RestrictionFlags get_ValidRestrictionFlags()
internal int Compare(object value1, object value2)
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
}
internal System.Xml.Schema.Datatype_year : Datatype_dateTimeBase {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_yearMonth : Datatype_dateTimeBase {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.Datatype_yearMonthDuration : Datatype_duration {
public XmlTypeCode TypeCode
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
public XmlTypeCode get_TypeCode()
}
internal System.Xml.Schema.DatatypeImplementation : XmlSchemaDatatype {
private XmlSchemaDatatypeVariety variety
private RestrictionFacets restriction
private DatatypeImplementation baseType
private XmlValueConverter valueConverter
private XmlSchemaType parentSchemaType
private Hashtable builtinTypes
private XmlSchemaSimpleType[] enumToTypeCode
private XmlSchemaSimpleType anySimpleType
private XmlSchemaSimpleType anyAtomicType
private XmlSchemaSimpleType untypedAtomicType
private XmlSchemaSimpleType yearMonthDurationType
private XmlSchemaSimpleType dayTimeDurationType
private XmlSchemaSimpleType modreq(System.Runtime.CompilerServices.IsVolatile) normalizedStringTypeV1Compat
private XmlSchemaSimpleType modreq(System.Runtime.CompilerServices.IsVolatile) tokenTypeV1Compat
private int anySimpleTypeIndex
internal XmlQualifiedName QnAnySimpleType
internal XmlQualifiedName QnAnyType
internal FacetsChecker stringFacetsChecker
internal FacetsChecker miscFacetsChecker
internal FacetsChecker numeric2FacetsChecker
internal FacetsChecker binaryFacetsChecker
internal FacetsChecker dateTimeFacetsChecker
internal FacetsChecker durationFacetsChecker
internal FacetsChecker listFacetsChecker
internal FacetsChecker qnameFacetsChecker
internal FacetsChecker unionFacetsChecker
private DatatypeImplementation c_anySimpleType
private DatatypeImplementation c_anyURI
private DatatypeImplementation c_base64Binary
private DatatypeImplementation c_boolean
private DatatypeImplementation c_byte
private DatatypeImplementation c_char
private DatatypeImplementation c_date
private DatatypeImplementation c_dateTime
private DatatypeImplementation c_dateTimeNoTz
private DatatypeImplementation c_dateTimeTz
private DatatypeImplementation c_day
private DatatypeImplementation c_decimal
private DatatypeImplementation c_double
private DatatypeImplementation c_doubleXdr
private DatatypeImplementation c_duration
private DatatypeImplementation c_ENTITY
private DatatypeImplementation c_ENTITIES
private DatatypeImplementation c_ENUMERATION
private DatatypeImplementation c_fixed
private DatatypeImplementation c_float
private DatatypeImplementation c_floatXdr
private DatatypeImplementation c_hexBinary
private DatatypeImplementation c_ID
private DatatypeImplementation c_IDREF
private DatatypeImplementation c_IDREFS
private DatatypeImplementation c_int
private DatatypeImplementation c_integer
private DatatypeImplementation c_language
private DatatypeImplementation c_long
private DatatypeImplementation c_month
private DatatypeImplementation c_monthDay
private DatatypeImplementation c_Name
private DatatypeImplementation c_NCName
private DatatypeImplementation c_negativeInteger
private DatatypeImplementation c_NMTOKEN
private DatatypeImplementation c_NMTOKENS
private DatatypeImplementation c_nonNegativeInteger
private DatatypeImplementation c_nonPositiveInteger
private DatatypeImplementation c_normalizedString
private DatatypeImplementation c_NOTATION
private DatatypeImplementation c_positiveInteger
private DatatypeImplementation c_QName
private DatatypeImplementation c_QNameXdr
private DatatypeImplementation c_short
private DatatypeImplementation c_string
private DatatypeImplementation c_time
private DatatypeImplementation c_timeNoTz
private DatatypeImplementation c_timeTz
private DatatypeImplementation c_token
private DatatypeImplementation c_unsignedByte
private DatatypeImplementation c_unsignedInt
private DatatypeImplementation c_unsignedLong
private DatatypeImplementation c_unsignedShort
private DatatypeImplementation c_uuid
private DatatypeImplementation c_year
private DatatypeImplementation c_yearMonth
internal DatatypeImplementation c_normalizedStringV1Compat
internal DatatypeImplementation c_tokenV1Compat
private DatatypeImplementation c_anyAtomicType
private DatatypeImplementation c_dayTimeDuration
private DatatypeImplementation c_untypedAtomicType
private DatatypeImplementation c_yearMonthDuration
private DatatypeImplementation[] c_tokenizedTypes
private DatatypeImplementation[] c_tokenizedTypesXsd
private SchemaDatatypeMap[] c_XdrTypes
private SchemaDatatypeMap[] c_XsdTypes
internal XmlSchemaSimpleType AnySimpleType
internal XmlSchemaSimpleType AnyAtomicType
internal XmlSchemaSimpleType UntypedAtomicType
internal XmlSchemaSimpleType YearMonthDurationType
internal XmlSchemaSimpleType DayTimeDurationType
internal FacetsChecker FacetsChecker
internal XmlValueConverter ValueConverter
public XmlTokenizedType TokenizedType
public Type ValueType
public XmlSchemaDatatypeVariety Variety
public XmlTypeCode TypeCode
internal RestrictionFacets Restriction
internal bool HasLexicalFacets
internal bool HasValueFacets
protected DatatypeImplementation Base
internal Type ListValueType
internal RestrictionFlags ValidRestrictionFlags
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal XmlSchemaSimpleType get_AnySimpleType()
internal XmlSchemaSimpleType get_AnyAtomicType()
internal XmlSchemaSimpleType get_UntypedAtomicType()
internal XmlSchemaSimpleType get_YearMonthDurationType()
internal XmlSchemaSimpleType get_DayTimeDurationType()
internal DatatypeImplementation FromXmlTokenizedType(XmlTokenizedType token)
internal DatatypeImplementation FromXmlTokenizedTypeXsd(XmlTokenizedType token)
internal DatatypeImplementation FromXdrName(string name)
private DatatypeImplementation FromTypeName(string name)
internal XmlSchemaSimpleType StartBuiltinType(XmlQualifiedName qname, XmlSchemaDatatype dataType)
internal void FinishBuiltinType(XmlSchemaSimpleType derivedType, XmlSchemaSimpleType baseType)
internal void CreateBuiltinTypes()
internal XmlSchemaSimpleType GetSimpleTypeFromTypeCode(XmlTypeCode typeCode)
internal XmlSchemaSimpleType GetSimpleTypeFromXsdType(XmlQualifiedName qname)
internal XmlSchemaSimpleType GetNormalizedStringTypeV1Compat()
internal XmlSchemaSimpleType GetTokenTypeV1Compat()
internal XmlSchemaSimpleType[] GetBuiltInTypes()
internal XmlTypeCode GetPrimitiveTypeCode(XmlTypeCode typeCode)
internal XmlSchemaDatatype DeriveByRestriction(XmlSchemaObjectCollection facets, XmlNameTable nameTable, XmlSchemaType schemaType)
internal XmlSchemaDatatype DeriveByList(XmlSchemaType schemaType)
internal XmlSchemaDatatype DeriveByList(int minSize, XmlSchemaType schemaType)
internal DatatypeImplementation DeriveByUnion(XmlSchemaSimpleType[] types, XmlSchemaType schemaType)
internal void VerifySchemaValid(XmlSchemaObjectTable notations, XmlSchemaObject caller)
public bool IsDerivedFrom(XmlSchemaDatatype datatype)
internal bool IsEqual(object o1, object o2)
internal bool IsComparable(XmlSchemaDatatype dtype)
internal XmlValueConverter CreateValueConverter(XmlSchemaType schemaType)
internal FacetsChecker get_FacetsChecker()
internal XmlValueConverter get_ValueConverter()
public XmlTokenizedType get_TokenizedType()
public Type get_ValueType()
public XmlSchemaDatatypeVariety get_Variety()
public XmlTypeCode get_TypeCode()
internal RestrictionFacets get_Restriction()
internal void set_Restriction(RestrictionFacets value)
internal bool get_HasLexicalFacets()
internal bool get_HasValueFacets()
protected DatatypeImplementation get_Base()
internal Type get_ListValueType()
internal RestrictionFlags get_ValidRestrictionFlags()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal object ParseValue(string s, Type typDest, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, bool createAtomicValue)
internal Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver namespaceResolver, Object& typedValue)
internal string GetTypeName()
protected int Compare(Byte[] value1, Byte[] value2)
}
internal System.Xml.Schema.DateTimeFacetsChecker : FacetsChecker {
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(DateTime value, XmlSchemaDatatype datatype)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
private bool MatchEnumeration(DateTime value, ArrayList enumeration, XmlSchemaDatatype datatype)
}
internal System.Xml.Schema.DfaContentValidator : ContentValidator {
private Int32[][] transitionTable
private SymbolsDictionary symbols
internal void .ctor(Int32[][] transitionTable, SymbolsDictionary symbols, XmlSchemaContentType contentType, bool isOpen, bool isEmptiable)
public void InitValidation(ValidationState context)
public object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode)
public bool CompleteValidation(ValidationState context)
public ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly)
public ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet)
}
internal System.Xml.Schema.DoubleLinkAxis : Axis {
internal Axis next
internal Axis Next
internal Axis get_Next()
internal void set_Next(Axis value)
internal void .ctor(Axis axis, DoubleLinkAxis inputaxis)
internal DoubleLinkAxis ConvertTree(Axis axis)
}
internal System.Xml.Schema.DtdValidator : BaseValidator {
private NamespaceManager namespaceManager
private int STACK_INCREMENT
private HWStack validationStack
private Hashtable attPresence
private XmlQualifiedName name
private Hashtable IDs
private IdRefNode idRefListHead
private bool processIdentityConstraints
public bool PreserveWhitespace
internal void .ctor(XmlValidatingReaderImpl reader, IValidationEventHandling eventHandling, bool processIdentityConstraints)
private void Init()
public void Validate()
private bool MeetsStandAloneConstraint()
private void ValidatePIComment()
private void ValidateElement()
private void ValidateChildElement()
private void ValidateStartElement()
private void ValidateEndStartElement()
private void ProcessElement()
public void CompleteValidation()
private void ValidateEndElement()
public bool get_PreserveWhitespace()
private void ProcessTokenizedType(XmlTokenizedType ttype, string name)
private void CheckValue(string value, SchemaAttDef attdef)
internal void AddID(string name, object node)
public object FindId(string name)
private bool GenEntity(XmlQualifiedName qname)
private SchemaEntity GetEntity(XmlQualifiedName qname, bool fParameterEntity)
private void CheckForwardRefs()
private void Push(XmlQualifiedName elementName)
private bool Pop()
public void SetDefaultTypedValue(SchemaAttDef attdef, IDtdParserAdapter readerAdapter)
public void CheckDefaultValue(SchemaAttDef attdef, SchemaInfo sinfo, IValidationEventHandling eventHandling, string baseUriStr)
}
internal System.Xml.Schema.DurationFacetsChecker : FacetsChecker {
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(TimeSpan value, XmlSchemaDatatype datatype)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
private bool MatchEnumeration(TimeSpan value, ArrayList enumeration)
}
internal System.Xml.Schema.FacetsChecker : object {
internal Exception CheckLexicalFacets(String& parseString, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(decimal value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(long value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(int value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(short value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(byte value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(DateTime value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(double value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(float value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(string value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(Byte[] value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(TimeSpan value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(XmlQualifiedName value, XmlSchemaDatatype datatype)
internal void CheckWhitespaceFacets(String& s, XmlSchemaDatatype datatype)
internal Exception CheckPatternFacets(RestrictionFacets restriction, string value)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
internal RestrictionFacets ConstructRestriction(DatatypeImplementation datatype, XmlSchemaObjectCollection facets, XmlNameTable nameTable)
internal decimal Power(int x, int y)
}
internal System.Xml.Schema.FacetType : Enum {
public int value__
public FacetType None
public FacetType Length
public FacetType MinLength
public FacetType MaxLength
public FacetType Pattern
public FacetType Whitespace
public FacetType Enumeration
public FacetType MinExclusive
public FacetType MinInclusive
public FacetType MaxExclusive
public FacetType MaxInclusive
public FacetType TotalDigits
public FacetType FractionDigits
}
internal System.Xml.Schema.ForwardAxis : object {
private DoubleLinkAxis topNode
private DoubleLinkAxis rootNode
private bool isAttribute
private bool isDss
private bool isSelfAxis
internal DoubleLinkAxis RootNode
internal DoubleLinkAxis TopNode
internal bool IsAttribute
internal bool IsDss
internal bool IsSelfAxis
internal DoubleLinkAxis get_RootNode()
internal DoubleLinkAxis get_TopNode()
internal bool get_IsAttribute()
internal bool get_IsDss()
internal bool get_IsSelfAxis()
public void .ctor(DoubleLinkAxis axis, bool isdesorself)
}
internal System.Xml.Schema.IdRefNode : object {
internal string Id
internal int LineNo
internal int LinePos
internal IdRefNode Next
internal void .ctor(IdRefNode next, string id, int lineNo, int linePos)
}
internal System.Xml.Schema.InteriorNode : SyntaxTreeNode {
private SyntaxTreeNode leftChild
private SyntaxTreeNode rightChild
public SyntaxTreeNode LeftChild
public SyntaxTreeNode RightChild
public SyntaxTreeNode get_LeftChild()
public void set_LeftChild(SyntaxTreeNode value)
public SyntaxTreeNode get_RightChild()
public void set_RightChild(SyntaxTreeNode value)
public SyntaxTreeNode Clone(Positions positions)
protected void ExpandTreeNoRecursive(InteriorNode parent, SymbolsDictionary symbols, Positions positions)
public void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions)
}
public System.Xml.Schema.IXmlSchemaInfo {
public XmlSchemaValidity Validity
public bool IsDefault
public bool IsNil
public XmlSchemaSimpleType MemberType
public XmlSchemaType SchemaType
public XmlSchemaElement SchemaElement
public XmlSchemaAttribute SchemaAttribute
public XmlSchemaValidity get_Validity()
public bool get_IsDefault()
public bool get_IsNil()
public XmlSchemaSimpleType get_MemberType()
public XmlSchemaType get_SchemaType()
public XmlSchemaElement get_SchemaElement()
public XmlSchemaAttribute get_SchemaAttribute()
}
internal System.Xml.Schema.KeySequence : object {
private TypedObject[] ks
private int dim
private int hashcode
private int posline
private int poscol
public int PosLine
public int PosCol
public object Item
internal void .ctor(int dim, int line, int col)
public int get_PosLine()
public int get_PosCol()
public void .ctor(TypedObject[] ks)
public object get_Item(int index)
public void set_Item(int index, object value)
internal bool IsQualified()
public int GetHashCode()
public bool Equals(object other)
public string ToString()
}
internal System.Xml.Schema.KSStruct : object {
public int depth
public KeySequence ks
public LocatedActiveAxis[] fields
public void .ctor(KeySequence ks, int dim)
}
internal System.Xml.Schema.LeafNode : SyntaxTreeNode {
private int pos
public int Pos
public bool IsNullable
public void .ctor(int pos)
public int get_Pos()
public void set_Pos(int value)
public void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions)
public SyntaxTreeNode Clone(Positions positions)
public void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos)
public bool get_IsNullable()
}
internal System.Xml.Schema.LeafRangeNode : LeafNode {
private decimal min
private decimal max
private BitSet nextIteration
public decimal Max
public decimal Min
public BitSet NextIteration
public bool IsRangeNode
public void .ctor(decimal min, decimal max)
public void .ctor(int pos, decimal min, decimal max)
public decimal get_Max()
public decimal get_Min()
public BitSet get_NextIteration()
public void set_NextIteration(BitSet value)
public SyntaxTreeNode Clone(Positions positions)
public bool get_IsRangeNode()
public void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions)
}
internal System.Xml.Schema.ListFacetsChecker : FacetsChecker {
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
}
internal System.Xml.Schema.LocatedActiveAxis : ActiveAxis {
private int column
internal bool isMatched
internal KeySequence Ks
internal int Column
internal int get_Column()
internal void .ctor(Asttree astfield, KeySequence ks, int column)
internal void Reactivate(KeySequence ks)
}
internal System.Xml.Schema.NamespaceList : object {
private ListType type
private Hashtable set
private string targetNamespace
public ListType Type
public string Excluded
public ICollection Enumerate
public void .ctor(string namespaces, string targetNamespace)
public NamespaceList Clone()
public ListType get_Type()
public string get_Excluded()
public ICollection get_Enumerate()
public bool Allows(string ns)
public bool Allows(XmlQualifiedName qname)
public string ToString()
public bool IsSubset(NamespaceList sub, NamespaceList super)
public NamespaceList Union(NamespaceList o1, NamespaceList o2, bool v1Compat)
private NamespaceList CompareSetToOther(NamespaceList other)
public NamespaceList Intersection(NamespaceList o1, NamespaceList o2, bool v1Compat)
private void RemoveNamespace(string tns)
public bool IsEmpty()
}
internal System.Xml.Schema.NamespaceListNode : SyntaxTreeNode {
protected NamespaceList namespaceList
protected object particle
public bool IsNullable
public void .ctor(NamespaceList namespaceList, object particle)
public SyntaxTreeNode Clone(Positions positions)
public ICollection GetResolvedSymbols(SymbolsDictionary symbols)
public void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions)
public void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos)
public bool get_IsNullable()
}
internal System.Xml.Schema.NamespaceListV1Compat : NamespaceList {
public void .ctor(string namespaces, string targetNamespace)
public bool Allows(string ns)
}
internal System.Xml.Schema.NfaContentValidator : ContentValidator {
private BitSet firstpos
private BitSet[] followpos
private SymbolsDictionary symbols
private Positions positions
private int endMarkerPos
internal void .ctor(BitSet firstpos, BitSet[] followpos, SymbolsDictionary symbols, Positions positions, int endMarkerPos, XmlSchemaContentType contentType, bool isOpen, bool isEmptiable)
public void InitValidation(ValidationState context)
public object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode)
public bool CompleteValidation(ValidationState context)
public ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly)
public ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet)
}
internal System.Xml.Schema.Numeric10FacetsChecker : FacetsChecker {
private Char[] signs
private decimal maxValue
private decimal minValue
internal void .ctor(decimal minVal, decimal maxVal)
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(decimal value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(long value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(int value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(short value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(byte value, XmlSchemaDatatype datatype)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
internal bool MatchEnumeration(decimal value, ArrayList enumeration, XmlValueConverter valueConverter)
internal Exception CheckTotalAndFractionDigits(decimal value, int totalDigits, int fractionDigits, bool checkTotal, bool checkFraction)
}
internal System.Xml.Schema.Numeric2FacetsChecker : FacetsChecker {
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(double value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(float value, XmlSchemaDatatype datatype)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
private bool MatchEnumeration(double value, ArrayList enumeration, XmlValueConverter valueConverter)
}
internal System.Xml.Schema.Parser : object {
private SchemaType schemaType
private XmlNameTable nameTable
private SchemaNames schemaNames
private ValidationEventHandler eventHandler
private XmlNamespaceManager namespaceManager
private XmlReader reader
private PositionInfo positionInfo
private bool isProcessNamespaces
private int schemaXmlDepth
private int markupDepth
private SchemaBuilder builder
private XmlSchema schema
private SchemaInfo xdrSchema
private XmlResolver xmlResolver
private XmlDocument dummyDocument
private bool processMarkup
private XmlNode parentNode
private XmlNamespaceManager annotationNSManager
private string xmlns
private XmlCharType xmlCharType
public XmlSchema XmlSchema
internal XmlResolver XmlResolver
public SchemaInfo XdrSchema
public void .ctor(SchemaType schemaType, XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler)
public SchemaType Parse(XmlReader reader, string targetNamespace)
public void StartParsing(XmlReader reader, string targetNamespace)
private bool CheckSchemaRoot(SchemaType rootType, String& code)
public SchemaType FinishParsing()
public XmlSchema get_XmlSchema()
internal void set_XmlResolver(XmlResolver value)
public SchemaInfo get_XdrSchema()
public bool ParseReaderNode()
private void ProcessAppInfoDocMarkup(bool root)
private XmlElement LoadElementNode(bool root)
private XmlAttribute CreateXmlNsAttribute(string prefix, string value)
private XmlAttribute LoadAttributeNode()
private XmlEntityReference LoadEntityReferenceInAttribute()
public Task`1<SchemaType> ParseAsync(XmlReader reader, string targetNamespace)
public Task StartParsingAsync(XmlReader reader, string targetNamespace)
}
internal System.Xml.Schema.ParticleContentValidator : ContentValidator {
private SymbolsDictionary symbols
private Positions positions
private Stack stack
private SyntaxTreeNode contentNode
private bool isPartial
private int minMaxNodesCount
private bool enableUpaCheck
public void .ctor(XmlSchemaContentType contentType)
public void .ctor(XmlSchemaContentType contentType, bool enableUpaCheck)
public void InitValidation(ValidationState context)
public object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode)
public bool CompleteValidation(ValidationState context)
public void Start()
public void OpenGroup()
public void CloseGroup()
public bool Exists(XmlQualifiedName name)
public void AddName(XmlQualifiedName name, object particle)
public void AddNamespaceList(NamespaceList namespaceList, object particle)
private void AddLeafNode(SyntaxTreeNode node)
public void AddChoice()
public void AddSequence()
public void AddStar()
public void AddPlus()
public void AddQMark()
public void AddLeafRange(decimal min, decimal max)
private void Closure(InteriorNode node)
public ContentValidator Finish()
public ContentValidator Finish(bool useDFA)
private BitSet[] CalculateTotalFollowposForRangeNodes(BitSet firstpos, BitSet[] followpos, BitSet& posWithRangeTerminals)
private void CheckCMUPAWithLeafRangeNodes(BitSet curpos)
private BitSet GetApplicableMinMaxFollowPos(BitSet curpos, BitSet posWithRangeTerminals, BitSet[] minmaxFollowPos)
private void CheckUniqueParticleAttribution(BitSet firstpos, BitSet[] followpos)
private void CheckUniqueParticleAttribution(BitSet curpos)
private Int32[][] BuildTransitionTable(BitSet firstpos, BitSet[] followpos, int endMarkerPos)
}
internal System.Xml.Schema.PlusNode : InteriorNode {
public bool IsNullable
public void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos)
public bool get_IsNullable()
}
internal System.Xml.Schema.Position : ValueType {
public int symbol
public object particle
public void .ctor(int symbol, object particle)
}
internal System.Xml.Schema.Positions : object {
private ArrayList positions
public Position Item
public int Count
public int Add(int symbol, object particle)
public Position get_Item(int pos)
public int get_Count()
}
internal System.Xml.Schema.Preprocessor : BaseProcessor {
private string Xmlns
private string NsXsi
private string targetNamespace
private XmlSchema rootSchema
private XmlSchema currentSchema
private XmlSchemaForm elementFormDefault
private XmlSchemaForm attributeFormDefault
private XmlSchemaDerivationMethod blockDefault
private XmlSchemaDerivationMethod finalDefault
private Hashtable schemaLocations
private Hashtable chameleonSchemas
private Hashtable referenceNamespaces
private Hashtable processedExternals
private SortedList lockList
private XmlReaderSettings readerSettings
private XmlSchema rootSchemaForRedefine
private ArrayList redefinedList
private XmlSchema builtInSchemaForXmlNS
private XmlSchemaDerivationMethod schemaBlockDefaultAllowed
private XmlSchemaDerivationMethod schemaFinalDefaultAllowed
private XmlSchemaDerivationMethod elementBlockAllowed
private XmlSchemaDerivationMethod elementFinalAllowed
private XmlSchemaDerivationMethod simpleTypeFinalAllowed
private XmlSchemaDerivationMethod complexTypeBlockAllowed
private XmlSchemaDerivationMethod complexTypeFinalAllowed
private XmlResolver xmlResolver
internal XmlResolver XmlResolver
internal XmlReaderSettings ReaderSettings
internal Hashtable SchemaLocations
internal Hashtable ChameleonSchemas
internal XmlSchema RootSchema
public void .ctor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler)
public void .ctor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler, XmlSchemaCompilationSettings compilationSettings)
public bool Execute(XmlSchema schema, string targetNamespace, bool loadExternals)
private void Cleanup(XmlSchema schema)
private void CleanupRedefine(XmlSchemaExternal include)
internal void set_XmlResolver(XmlResolver value)
internal XmlReaderSettings get_ReaderSettings()
internal void set_ReaderSettings(XmlReaderSettings value)
internal void set_SchemaLocations(Hashtable value)
internal void set_ChameleonSchemas(Hashtable value)
internal XmlSchema get_RootSchema()
private void BuildSchemaList(XmlSchema schema)
private void LoadExternals(XmlSchema schema)
internal XmlSchema GetBuildInSchema()
private void BuildRefNamespaces(XmlSchema schema)
private void ParseUri(string uri, string code, XmlSchemaObject sourceSchemaObject)
private void Preprocess(XmlSchema schema, string targetNamespace, ArrayList imports)
private void CopyIncludedComponents(XmlSchema includedSchema, XmlSchema schema)
private void PreprocessRedefine(RedefineEntry redefineEntry)
private void GetIncludedSet(XmlSchema schema, ArrayList includesList)
internal XmlSchema GetParentSchema(XmlSchemaObject currentSchemaObject)
private void SetSchemaDefaults(XmlSchema schema)
private int CountGroupSelfReference(XmlSchemaObjectCollection items, XmlQualifiedName name, XmlSchemaGroup redefined)
private void CheckRefinedGroup(XmlSchemaGroup group)
private void CheckRefinedAttributeGroup(XmlSchemaAttributeGroup attributeGroup)
private void CheckRefinedSimpleType(XmlSchemaSimpleType stype)
private void CheckRefinedComplexType(XmlSchemaComplexType ctype)
private void PreprocessAttribute(XmlSchemaAttribute attribute)
private void PreprocessLocalAttribute(XmlSchemaAttribute attribute)
private void PreprocessAttributeContent(XmlSchemaAttribute attribute)
private void PreprocessAttributeGroup(XmlSchemaAttributeGroup attributeGroup)
private void PreprocessElement(XmlSchemaElement element)
private void PreprocessLocalElement(XmlSchemaElement element)
private void PreprocessElementContent(XmlSchemaElement element)
private void PreprocessIdentityConstraint(XmlSchemaIdentityConstraint constraint)
private void PreprocessSimpleType(XmlSchemaSimpleType simpleType, bool local)
private void PreprocessComplexType(XmlSchemaComplexType complexType, bool local)
private void PreprocessGroup(XmlSchemaGroup group)
private void PreprocessNotation(XmlSchemaNotation notation)
private void PreprocessParticle(XmlSchemaParticle particle)
private void PreprocessAttributes(XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaObject parent)
private void ValidateIdAttribute(XmlSchemaObject xso)
private void ValidateNameAttribute(XmlSchemaObject xso)
private void ValidateQNameAttribute(XmlSchemaObject xso, string attributeName, XmlQualifiedName value)
private Uri ResolveSchemaLocationUri(XmlSchema enclosingSchema, string location)
private object GetSchemaEntity(Uri ruri)
private XmlSchema GetChameleonSchema(string targetNamespace, XmlSchema schema)
private void SetParent(XmlSchemaObject child, XmlSchemaObject parent)
private void PreprocessAnnotation(XmlSchemaObject schemaObject)
private void PreprocessAnnotation(XmlSchemaAnnotation annotation)
}
internal System.Xml.Schema.QmarkNode : InteriorNode {
public bool IsNullable
public void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos)
public bool get_IsNullable()
}
internal System.Xml.Schema.QNameFacetsChecker : FacetsChecker {
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(XmlQualifiedName value, XmlSchemaDatatype datatype)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
private bool MatchEnumeration(XmlQualifiedName value, ArrayList enumeration)
}
internal System.Xml.Schema.RangeContentValidator : ContentValidator {
private BitSet firstpos
private BitSet[] followpos
private BitSet positionsWithRangeTerminals
private SymbolsDictionary symbols
private Positions positions
private int minMaxNodesCount
private int endMarkerPos
internal void .ctor(BitSet firstpos, BitSet[] followpos, SymbolsDictionary symbols, Positions positions, int endMarkerPos, XmlSchemaContentType contentType, bool isEmptiable, BitSet positionsWithRangeTerminals, int minmaxNodesCount)
public void InitValidation(ValidationState context)
public object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode)
public bool CompleteValidation(ValidationState context)
public ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly)
public ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet)
}
internal System.Xml.Schema.RangePositionInfo : ValueType {
public BitSet curpos
public Decimal[] rangeCounters
}
internal System.Xml.Schema.RedefineEntry : object {
internal XmlSchemaRedefine redefine
internal XmlSchema schemaToUpdate
public void .ctor(XmlSchemaRedefine external, XmlSchema schema)
}
internal System.Xml.Schema.RestrictionFacets : object {
internal int Length
internal int MinLength
internal int MaxLength
internal ArrayList Patterns
internal ArrayList Enumeration
internal XmlSchemaWhiteSpace WhiteSpace
internal object MaxInclusive
internal object MaxExclusive
internal object MinInclusive
internal object MinExclusive
internal int TotalDigits
internal int FractionDigits
internal RestrictionFlags Flags
internal RestrictionFlags FixedFlags
}
internal System.Xml.Schema.RestrictionFlags : Enum {
public int value__
public RestrictionFlags Length
public RestrictionFlags MinLength
public RestrictionFlags MaxLength
public RestrictionFlags Pattern
public RestrictionFlags Enumeration
public RestrictionFlags WhiteSpace
public RestrictionFlags MaxInclusive
public RestrictionFlags MaxExclusive
public RestrictionFlags MinInclusive
public RestrictionFlags MinExclusive
public RestrictionFlags TotalDigits
public RestrictionFlags FractionDigits
}
internal System.Xml.Schema.SchemaAttDef : SchemaDeclBase {
private string defExpanded
private int lineNum
private int linePos
private int valueLineNum
private int valueLinePos
private Reserve reserved
private bool defaultValueChecked
private bool hasEntityRef
private XmlSchemaAttribute schemaAttribute
public SchemaAttDef Empty
private string System.Xml.IDtdAttributeInfo.Prefix
private string System.Xml.IDtdAttributeInfo.LocalName
private int System.Xml.IDtdAttributeInfo.LineNumber
private int System.Xml.IDtdAttributeInfo.LinePosition
private bool System.Xml.IDtdAttributeInfo.IsNonCDataType
private bool System.Xml.IDtdAttributeInfo.IsDeclaredInExternal
private bool System.Xml.IDtdAttributeInfo.IsXmlAttribute
private string System.Xml.IDtdDefaultAttributeInfo.DefaultValueExpanded
private object System.Xml.IDtdDefaultAttributeInfo.DefaultValueTyped
private int System.Xml.IDtdDefaultAttributeInfo.ValueLineNumber
private int System.Xml.IDtdDefaultAttributeInfo.ValueLinePosition
internal int LinePosition
internal int LineNumber
internal int ValueLinePosition
internal int ValueLineNumber
internal string DefaultValueExpanded
internal XmlTokenizedType TokenizedType
internal Reserve Reserved
internal bool DefaultValueChecked
internal bool HasEntityRef
internal XmlSchemaAttribute SchemaAttribute
public void .ctor(XmlQualifiedName name, string prefix)
public void .ctor(XmlQualifiedName name)
private string System.Xml.IDtdAttributeInfo.get_Prefix()
private string System.Xml.IDtdAttributeInfo.get_LocalName()
private int System.Xml.IDtdAttributeInfo.get_LineNumber()
private int System.Xml.IDtdAttributeInfo.get_LinePosition()
private bool System.Xml.IDtdAttributeInfo.get_IsNonCDataType()
private bool System.Xml.IDtdAttributeInfo.get_IsDeclaredInExternal()
private bool System.Xml.IDtdAttributeInfo.get_IsXmlAttribute()
private string System.Xml.IDtdDefaultAttributeInfo.get_DefaultValueExpanded()
private object System.Xml.IDtdDefaultAttributeInfo.get_DefaultValueTyped()
private int System.Xml.IDtdDefaultAttributeInfo.get_ValueLineNumber()
private int System.Xml.IDtdDefaultAttributeInfo.get_ValueLinePosition()
internal int get_LinePosition()
internal void set_LinePosition(int value)
internal int get_LineNumber()
internal void set_LineNumber(int value)
internal int get_ValueLinePosition()
internal void set_ValueLinePosition(int value)
internal int get_ValueLineNumber()
internal void set_ValueLineNumber(int value)
internal string get_DefaultValueExpanded()
internal void set_DefaultValueExpanded(string value)
internal XmlTokenizedType get_TokenizedType()
internal void set_TokenizedType(XmlTokenizedType value)
internal Reserve get_Reserved()
internal void set_Reserved(Reserve value)
internal bool get_DefaultValueChecked()
internal bool get_HasEntityRef()
internal void set_HasEntityRef(bool value)
internal XmlSchemaAttribute get_SchemaAttribute()
internal void set_SchemaAttribute(XmlSchemaAttribute value)
internal void CheckXmlSpace(IValidationEventHandling validationEventHandling)
internal SchemaAttDef Clone()
}
internal System.Xml.Schema.SchemaBuilder : object {
internal bool ProcessElement(string prefix, string name, string ns)
internal void ProcessAttribute(string prefix, string name, string ns, string value)
internal bool IsContentParsed()
internal void ProcessMarkup(XmlNode[] markup)
internal void ProcessCData(string value)
internal void StartChildren()
internal void EndChildren()
}
internal System.Xml.Schema.SchemaCollectionCompiler : BaseProcessor {
private bool compileContentModel
private XmlSchemaObjectTable examplars
private Stack complexTypeStack
private XmlSchema schema
public void .ctor(XmlNameTable nameTable, ValidationEventHandler eventHandler)
public bool Execute(XmlSchema schema, SchemaInfo schemaInfo, bool compileContentModel)
private void Prepare()
private void Cleanup()
internal void Cleanup(XmlSchema schema)
private void Compile()
private void Output(SchemaInfo schemaInfo)
private void CleanupAttribute(XmlSchemaAttribute attribute)
private void CleanupAttributeGroup(XmlSchemaAttributeGroup attributeGroup)
private void CleanupComplexType(XmlSchemaComplexType complexType)
private void CleanupSimpleType(XmlSchemaSimpleType simpleType)
private void CleanupElement(XmlSchemaElement element)
private void CleanupAttributes(XmlSchemaObjectCollection attributes)
private void CleanupGroup(XmlSchemaGroup group)
private void CleanupParticle(XmlSchemaParticle particle)
private void CompileSubstitutionGroup(XmlSchemaSubstitutionGroupV1Compat substitutionGroup)
private void CheckSubstitutionGroup(XmlSchemaSubstitutionGroup substitutionGroup)
private void CompileGroup(XmlSchemaGroup group)
private void CompileSimpleType(XmlSchemaSimpleType simpleType)
private XmlSchemaSimpleType[] CompileBaseMemberTypes(XmlSchemaSimpleType simpleType)
private void CheckUnionType(XmlSchemaSimpleType unionMember, ArrayList memberTypeDefinitions, XmlSchemaSimpleType parentType)
private void CompileComplexType(XmlSchemaComplexType complexType)
private void CompileSimpleContentExtension(XmlSchemaComplexType complexType, XmlSchemaSimpleContentExtension simpleExtension)
private void CompileSimpleContentRestriction(XmlSchemaComplexType complexType, XmlSchemaSimpleContentRestriction simpleRestriction)
private void CompileComplexContentExtension(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaComplexContentExtension complexExtension)
private void CompileComplexContentRestriction(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaComplexContentRestriction complexRestriction)
private void CheckParticleDerivation(XmlSchemaComplexType complexType)
private XmlSchemaParticle CompileContentTypeParticle(XmlSchemaParticle particle, bool substitution)
private XmlSchemaParticle CannonicalizeParticle(XmlSchemaParticle particle, bool root, bool substitution)
private XmlSchemaParticle CannonicalizeElement(XmlSchemaElement element, bool substitution)
private XmlSchemaParticle CannonicalizeGroupRef(XmlSchemaGroupRef groupRef, bool root, bool substitution)
private XmlSchemaParticle CannonicalizeAll(XmlSchemaAll all, bool root, bool substitution)
private XmlSchemaParticle CannonicalizeChoice(XmlSchemaChoice choice, bool root, bool substitution)
private XmlSchemaParticle CannonicalizeSequence(XmlSchemaSequence sequence, bool root, bool substitution)
private bool IsValidRestriction(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle)
private bool IsElementFromElement(XmlSchemaElement derivedElement, XmlSchemaElement baseElement)
private bool IsElementFromAny(XmlSchemaElement derivedElement, XmlSchemaAny baseAny)
private bool IsAnyFromAny(XmlSchemaAny derivedAny, XmlSchemaAny baseAny)
private bool IsGroupBaseFromAny(XmlSchemaGroupBase derivedGroupBase, XmlSchemaAny baseAny)
private bool IsElementFromGroupBase(XmlSchemaElement derivedElement, XmlSchemaGroupBase baseGroupBase, bool skipEmptableOnly)
private bool IsGroupBaseFromGroupBase(XmlSchemaGroupBase derivedGroupBase, XmlSchemaGroupBase baseGroupBase, bool skipEmptableOnly)
private bool IsSequenceFromAll(XmlSchemaSequence derivedSequence, XmlSchemaAll baseAll)
private bool IsSequenceFromChoice(XmlSchemaSequence derivedSequence, XmlSchemaChoice baseChoice)
private void CalculateSequenceRange(XmlSchemaSequence sequence, Decimal& minOccurs, Decimal& maxOccurs)
private bool IsValidOccurrenceRangeRestriction(XmlSchemaParticle derivedParticle, XmlSchemaParticle baseParticle)
private bool IsValidOccurrenceRangeRestriction(decimal minOccurs, decimal maxOccurs, decimal baseMinOccurs, decimal baseMaxOccurs)
private int GetMappingParticle(XmlSchemaParticle particle, XmlSchemaObjectCollection collection)
private bool IsParticleEmptiable(XmlSchemaParticle particle)
private void CalculateEffectiveTotalRange(XmlSchemaParticle particle, Decimal& minOccurs, Decimal& maxOccurs)
private void PushComplexType(XmlSchemaComplexType complexType)
private XmlSchemaContentType GetSchemaContentType(XmlSchemaComplexType complexType, XmlSchemaComplexContent complexContent, XmlSchemaParticle particle)
private void CompileAttributeGroup(XmlSchemaAttributeGroup attributeGroup)
private void CompileLocalAttributes(XmlSchemaComplexType baseType, XmlSchemaComplexType derivedType, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaDerivationMethod derivedBy)
private XmlSchemaAnyAttribute CompileAnyAttributeUnion(XmlSchemaAnyAttribute a, XmlSchemaAnyAttribute b)
private XmlSchemaAnyAttribute CompileAnyAttributeIntersection(XmlSchemaAnyAttribute a, XmlSchemaAnyAttribute b)
private void CompileAttribute(XmlSchemaAttribute xa)
private void CompileIdentityConstraint(XmlSchemaIdentityConstraint xi)
private void CompileElement(XmlSchemaElement xe)
private ContentValidator CompileComplexContent(XmlSchemaComplexType complexType)
private void BuildParticleContentModel(ParticleContentValidator contentValidator, XmlSchemaParticle particle)
private void CompileParticleElements(XmlSchemaComplexType complexType, XmlSchemaParticle particle)
private void CompileCompexTypeElements(XmlSchemaComplexType complexType)
private XmlSchemaSimpleType GetSimpleType(XmlQualifiedName name)
private XmlSchemaComplexType GetComplexType(XmlQualifiedName name)
private XmlSchemaType GetAnySchemaType(XmlQualifiedName name)
}
internal System.Xml.Schema.SchemaCollectionPreprocessor : BaseProcessor {
private XmlSchema schema
private string targetNamespace
private bool buildinIncluded
private XmlSchemaForm elementFormDefault
private XmlSchemaForm attributeFormDefault
private XmlSchemaDerivationMethod blockDefault
private XmlSchemaDerivationMethod finalDefault
private Hashtable schemaLocations
private Hashtable referenceNamespaces
private string Xmlns
private XmlSchemaDerivationMethod schemaBlockDefaultAllowed
private XmlSchemaDerivationMethod schemaFinalDefaultAllowed
private XmlSchemaDerivationMethod elementBlockAllowed
private XmlSchemaDerivationMethod elementFinalAllowed
private XmlSchemaDerivationMethod simpleTypeFinalAllowed
private XmlSchemaDerivationMethod complexTypeBlockAllowed
private XmlSchemaDerivationMethod complexTypeFinalAllowed
private XmlResolver xmlResolver
internal XmlResolver XmlResolver
public void .ctor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler)
public bool Execute(XmlSchema schema, string targetNamespace, bool loadExternals, XmlSchemaCollection xsc)
private void Cleanup(XmlSchema schema)
internal void set_XmlResolver(XmlResolver value)
private void LoadExternals(XmlSchema schema, XmlSchemaCollection xsc)
private void BuildRefNamespaces(XmlSchema schema)
private void Preprocess(XmlSchema schema, string targetNamespace, Compositor compositor)
private void PreprocessRedefine(XmlSchemaRedefine redefine)
private int CountGroupSelfReference(XmlSchemaObjectCollection items, XmlQualifiedName name)
private void CheckRefinedGroup(XmlSchemaGroup group)
private void CheckRefinedAttributeGroup(XmlSchemaAttributeGroup attributeGroup)
private void CheckRefinedSimpleType(XmlSchemaSimpleType stype)
private void CheckRefinedComplexType(XmlSchemaComplexType ctype)
private void PreprocessAttribute(XmlSchemaAttribute attribute)
private void PreprocessLocalAttribute(XmlSchemaAttribute attribute)
private void PreprocessAttributeContent(XmlSchemaAttribute attribute)
private void PreprocessAttributeGroup(XmlSchemaAttributeGroup attributeGroup)
private void PreprocessElement(XmlSchemaElement element)
private void PreprocessLocalElement(XmlSchemaElement element)
private void PreprocessElementContent(XmlSchemaElement element)
private void PreprocessIdentityConstraint(XmlSchemaIdentityConstraint constraint)
private void PreprocessSimpleType(XmlSchemaSimpleType simpleType, bool local)
private void PreprocessComplexType(XmlSchemaComplexType complexType, bool local)
private void PreprocessGroup(XmlSchemaGroup group)
private void PreprocessNotation(XmlSchemaNotation notation)
private void PreprocessParticle(XmlSchemaParticle particle)
private void PreprocessAttributes(XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaObject parent)
private void ValidateIdAttribute(XmlSchemaObject xso)
private void ValidateNameAttribute(XmlSchemaObject xso)
private void ValidateQNameAttribute(XmlSchemaObject xso, string attributeName, XmlQualifiedName value)
private void SetParent(XmlSchemaObject child, XmlSchemaObject parent)
private void PreprocessAnnotation(XmlSchemaObject schemaObject)
private Uri ResolveSchemaLocationUri(XmlSchema enclosingSchema, string location)
private Stream GetSchemaEntity(Uri ruri)
}
internal System.Xml.Schema.SchemaDeclBase : object {
protected XmlQualifiedName name
protected string prefix
protected bool isDeclaredInExternal
protected Use presence
protected XmlSchemaType schemaType
protected XmlSchemaDatatype datatype
protected string defaultValueRaw
protected object defaultValueTyped
protected long maxLength
protected long minLength
protected List`1<string> values
internal XmlQualifiedName Name
internal string Prefix
internal bool IsDeclaredInExternal
internal Use Presence
internal long MaxLength
internal long MinLength
internal XmlSchemaType SchemaType
internal XmlSchemaDatatype Datatype
internal List`1<string> Values
internal string DefaultValueRaw
internal object DefaultValueTyped
protected void .ctor(XmlQualifiedName name, string prefix)
internal XmlQualifiedName get_Name()
internal void set_Name(XmlQualifiedName value)
internal string get_Prefix()
internal void set_Prefix(string value)
internal bool get_IsDeclaredInExternal()
internal void set_IsDeclaredInExternal(bool value)
internal Use get_Presence()
internal void set_Presence(Use value)
internal long get_MaxLength()
internal void set_MaxLength(long value)
internal long get_MinLength()
internal void set_MinLength(long value)
internal XmlSchemaType get_SchemaType()
internal void set_SchemaType(XmlSchemaType value)
internal XmlSchemaDatatype get_Datatype()
internal void set_Datatype(XmlSchemaDatatype value)
internal void AddValue(string value)
internal List`1<string> get_Values()
internal void set_Values(List`1<string> value)
internal string get_DefaultValueRaw()
internal void set_DefaultValueRaw(string value)
internal object get_DefaultValueTyped()
internal void set_DefaultValueTyped(object value)
internal bool CheckEnumeration(object pVal)
internal bool CheckValue(object pVal)
}
internal System.Xml.Schema.SchemaElementDecl : SchemaDeclBase {
private Dictionary`2<XmlQualifiedName, SchemaAttDef> attdefs
private List`1<IDtdDefaultAttributeInfo> defaultAttdefs
private bool isIdDeclared
private bool hasNonCDataAttribute
private bool isAbstract
private bool isNillable
private bool hasRequiredAttribute
private bool isNotationDeclared
private Dictionary`2<XmlQualifiedName, XmlQualifiedName> prohibitedAttributes
private ContentValidator contentValidator
private XmlSchemaAnyAttribute anyAttribute
private XmlSchemaDerivationMethod block
private CompiledIdentityConstraint[] constraints
private XmlSchemaElement schemaElement
internal SchemaElementDecl Empty
private string System.Xml.IDtdAttributeListInfo.Prefix
private string System.Xml.IDtdAttributeListInfo.LocalName
private bool System.Xml.IDtdAttributeListInfo.HasNonCDataAttributes
internal bool IsIdDeclared
internal bool HasNonCDataAttribute
internal bool IsAbstract
internal bool IsNillable
internal XmlSchemaDerivationMethod Block
internal bool IsNotationDeclared
internal bool HasDefaultAttribute
internal bool HasRequiredAttribute
internal ContentValidator ContentValidator
internal XmlSchemaAnyAttribute AnyAttribute
internal CompiledIdentityConstraint[] Constraints
internal XmlSchemaElement SchemaElement
internal IList`1<IDtdDefaultAttributeInfo> DefaultAttDefs
internal Dictionary`2<XmlQualifiedName, SchemaAttDef> AttDefs
internal Dictionary`2<XmlQualifiedName, XmlQualifiedName> ProhibitedAttributes
internal void .ctor(XmlSchemaDatatype dtype)
internal void .ctor(XmlQualifiedName name, string prefix)
internal SchemaElementDecl CreateAnyTypeElementDecl()
private string System.Xml.IDtdAttributeListInfo.get_Prefix()
private string System.Xml.IDtdAttributeListInfo.get_LocalName()
private bool System.Xml.IDtdAttributeListInfo.get_HasNonCDataAttributes()
private IDtdAttributeInfo System.Xml.IDtdAttributeListInfo.LookupAttribute(string prefix, string localName)
private IEnumerable`1<IDtdDefaultAttributeInfo> System.Xml.IDtdAttributeListInfo.LookupDefaultAttributes()
private IDtdAttributeInfo System.Xml.IDtdAttributeListInfo.LookupIdAttribute()
internal bool get_IsIdDeclared()
internal void set_IsIdDeclared(bool value)
internal bool get_HasNonCDataAttribute()
internal void set_HasNonCDataAttribute(bool value)
internal SchemaElementDecl Clone()
internal bool get_IsAbstract()
internal void set_IsAbstract(bool value)
internal bool get_IsNillable()
internal void set_IsNillable(bool value)
internal XmlSchemaDerivationMethod get_Block()
internal void set_Block(XmlSchemaDerivationMethod value)
internal bool get_IsNotationDeclared()
internal void set_IsNotationDeclared(bool value)
internal bool get_HasDefaultAttribute()
internal bool get_HasRequiredAttribute()
internal void set_HasRequiredAttribute(bool value)
internal ContentValidator get_ContentValidator()
internal void set_ContentValidator(ContentValidator value)
internal XmlSchemaAnyAttribute get_AnyAttribute()
internal void set_AnyAttribute(XmlSchemaAnyAttribute value)
internal CompiledIdentityConstraint[] get_Constraints()
internal void set_Constraints(CompiledIdentityConstraint[] value)
internal XmlSchemaElement get_SchemaElement()
internal void set_SchemaElement(XmlSchemaElement value)
internal void AddAttDef(SchemaAttDef attdef)
internal SchemaAttDef GetAttDef(XmlQualifiedName qname)
internal IList`1<IDtdDefaultAttributeInfo> get_DefaultAttDefs()
internal Dictionary`2<XmlQualifiedName, SchemaAttDef> get_AttDefs()
internal Dictionary`2<XmlQualifiedName, XmlQualifiedName> get_ProhibitedAttributes()
internal void CheckAttributes(Hashtable presence, bool standalone)
}
internal System.Xml.Schema.SchemaEntity : object {
private XmlQualifiedName qname
private string url
private string pubid
private string text
private XmlQualifiedName ndata
private int lineNumber
private int linePosition
private bool isParameter
private bool isExternal
private bool parsingInProgress
private bool isDeclaredInExternal
private string baseURI
private string declaredURI
private string System.Xml.IDtdEntityInfo.Name
private bool System.Xml.IDtdEntityInfo.IsExternal
private bool System.Xml.IDtdEntityInfo.IsDeclaredInExternal
private bool System.Xml.IDtdEntityInfo.IsUnparsedEntity
private bool System.Xml.IDtdEntityInfo.IsParameterEntity
private string System.Xml.IDtdEntityInfo.BaseUriString
private string System.Xml.IDtdEntityInfo.DeclaredUriString
private string System.Xml.IDtdEntityInfo.SystemId
private string System.Xml.IDtdEntityInfo.PublicId
private string System.Xml.IDtdEntityInfo.Text
private int System.Xml.IDtdEntityInfo.LineNumber
private int System.Xml.IDtdEntityInfo.LinePosition
internal XmlQualifiedName Name
internal string Url
internal string Pubid
internal bool IsExternal
internal bool DeclaredInExternal
internal XmlQualifiedName NData
internal string Text
internal int Line
internal int Pos
internal string BaseURI
internal bool ParsingInProgress
internal string DeclaredURI
internal void .ctor(XmlQualifiedName qname, bool isParameter)
private string System.Xml.IDtdEntityInfo.get_Name()
private bool System.Xml.IDtdEntityInfo.get_IsExternal()
private bool System.Xml.IDtdEntityInfo.get_IsDeclaredInExternal()
private bool System.Xml.IDtdEntityInfo.get_IsUnparsedEntity()
private bool System.Xml.IDtdEntityInfo.get_IsParameterEntity()
private string System.Xml.IDtdEntityInfo.get_BaseUriString()
private string System.Xml.IDtdEntityInfo.get_DeclaredUriString()
private string System.Xml.IDtdEntityInfo.get_SystemId()
private string System.Xml.IDtdEntityInfo.get_PublicId()
private string System.Xml.IDtdEntityInfo.get_Text()
private int System.Xml.IDtdEntityInfo.get_LineNumber()
private int System.Xml.IDtdEntityInfo.get_LinePosition()
internal bool IsPredefinedEntity(string n)
internal XmlQualifiedName get_Name()
internal string get_Url()
internal void set_Url(string value)
internal string get_Pubid()
internal void set_Pubid(string value)
internal bool get_IsExternal()
internal void set_IsExternal(bool value)
internal bool get_DeclaredInExternal()
internal void set_DeclaredInExternal(bool value)
internal XmlQualifiedName get_NData()
internal void set_NData(XmlQualifiedName value)
internal string get_Text()
internal void set_Text(string value)
internal int get_Line()
internal void set_Line(int value)
internal int get_Pos()
internal void set_Pos(int value)
internal string get_BaseURI()
internal void set_BaseURI(string value)
internal bool get_ParsingInProgress()
internal void set_ParsingInProgress(bool value)
internal string get_DeclaredURI()
internal void set_DeclaredURI(string value)
}
internal System.Xml.Schema.SchemaInfo : object {
private Dictionary`2<XmlQualifiedName, SchemaElementDecl> elementDecls
private Dictionary`2<XmlQualifiedName, SchemaElementDecl> undeclaredElementDecls
private Dictionary`2<XmlQualifiedName, SchemaEntity> generalEntities
private Dictionary`2<XmlQualifiedName, SchemaEntity> parameterEntities
private XmlQualifiedName docTypeName
private string internalDtdSubset
private bool hasNonCDataAttributes
private bool hasDefaultAttributes
private Dictionary`2<string, bool> targetNamespaces
private Dictionary`2<XmlQualifiedName, SchemaAttDef> attributeDecls
private int errorCount
private SchemaType schemaType
private Dictionary`2<XmlQualifiedName, SchemaElementDecl> elementDeclsByType
private Dictionary`2<string, SchemaNotation> notations
public XmlQualifiedName DocTypeName
internal string InternalDtdSubset
internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> ElementDecls
internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> UndeclaredElementDecls
internal Dictionary`2<XmlQualifiedName, SchemaEntity> GeneralEntities
internal Dictionary`2<XmlQualifiedName, SchemaEntity> ParameterEntities
internal SchemaType SchemaType
internal Dictionary`2<string, bool> TargetNamespaces
internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> ElementDeclsByType
internal Dictionary`2<XmlQualifiedName, SchemaAttDef> AttributeDecls
internal Dictionary`2<string, SchemaNotation> Notations
internal int ErrorCount
private bool System.Xml.IDtdInfo.HasDefaultAttributes
private bool System.Xml.IDtdInfo.HasNonCDataAttributes
private XmlQualifiedName System.Xml.IDtdInfo.Name
private string System.Xml.IDtdInfo.InternalDtdSubset
public XmlQualifiedName get_DocTypeName()
public void set_DocTypeName(XmlQualifiedName value)
internal string get_InternalDtdSubset()
internal void set_InternalDtdSubset(string value)
internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_ElementDecls()
internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_UndeclaredElementDecls()
internal Dictionary`2<XmlQualifiedName, SchemaEntity> get_GeneralEntities()
internal Dictionary`2<XmlQualifiedName, SchemaEntity> get_ParameterEntities()
internal SchemaType get_SchemaType()
internal void set_SchemaType(SchemaType value)
internal Dictionary`2<string, bool> get_TargetNamespaces()
internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_ElementDeclsByType()
internal Dictionary`2<XmlQualifiedName, SchemaAttDef> get_AttributeDecls()
internal Dictionary`2<string, SchemaNotation> get_Notations()
internal int get_ErrorCount()
internal void set_ErrorCount(int value)
internal SchemaElementDecl GetElementDecl(XmlQualifiedName qname)
internal SchemaElementDecl GetTypeDecl(XmlQualifiedName qname)
internal XmlSchemaElement GetElement(XmlQualifiedName qname)
internal XmlSchemaAttribute GetAttribute(XmlQualifiedName qname)
internal XmlSchemaElement GetType(XmlQualifiedName qname)
internal bool HasSchema(string ns)
internal bool Contains(string ns)
internal SchemaAttDef GetAttributeXdr(SchemaElementDecl ed, XmlQualifiedName qname)
internal SchemaAttDef GetAttributeXsd(SchemaElementDecl ed, XmlQualifiedName qname, XmlSchemaObject partialValidationType, AttributeMatchState& attributeMatchState)
internal SchemaAttDef GetAttributeXsd(SchemaElementDecl ed, XmlQualifiedName qname, Boolean& skip)
internal void Add(SchemaInfo sinfo, ValidationEventHandler eventhandler)
internal void Finish()
private bool System.Xml.IDtdInfo.get_HasDefaultAttributes()
private bool System.Xml.IDtdInfo.get_HasNonCDataAttributes()
private IDtdAttributeListInfo System.Xml.IDtdInfo.LookupAttributeList(string prefix, string localName)
private IEnumerable`1<IDtdAttributeListInfo> System.Xml.IDtdInfo.GetAttributeLists()
private IDtdEntityInfo System.Xml.IDtdInfo.LookupEntity(string name)
private XmlQualifiedName System.Xml.IDtdInfo.get_Name()
private string System.Xml.IDtdInfo.get_InternalDtdSubset()
}
internal System.Xml.Schema.SchemaNames : object {
private XmlNameTable nameTable
public string NsDataType
public string NsDataTypeAlias
public string NsDataTypeOld
public string NsXml
public string NsXmlNs
public string NsXdr
public string NsXdrAlias
public string NsXs
public string NsXsi
public string XsiType
public string XsiNil
public string XsiSchemaLocation
public string XsiNoNamespaceSchemaLocation
public string XsdSchema
public string XdrSchema
public XmlQualifiedName QnPCData
public XmlQualifiedName QnXml
public XmlQualifiedName QnXmlNs
public XmlQualifiedName QnDtDt
public XmlQualifiedName QnXmlLang
public XmlQualifiedName QnName
public XmlQualifiedName QnType
public XmlQualifiedName QnMaxOccurs
public XmlQualifiedName QnMinOccurs
public XmlQualifiedName QnInfinite
public XmlQualifiedName QnModel
public XmlQualifiedName QnOpen
public XmlQualifiedName QnClosed
public XmlQualifiedName QnContent
public XmlQualifiedName QnMixed
public XmlQualifiedName QnEmpty
public XmlQualifiedName QnEltOnly
public XmlQualifiedName QnTextOnly
public XmlQualifiedName QnOrder
public XmlQualifiedName QnSeq
public XmlQualifiedName QnOne
public XmlQualifiedName QnMany
public XmlQualifiedName QnRequired
public XmlQualifiedName QnYes
public XmlQualifiedName QnNo
public XmlQualifiedName QnString
public XmlQualifiedName QnID
public XmlQualifiedName QnIDRef
public XmlQualifiedName QnIDRefs
public XmlQualifiedName QnEntity
public XmlQualifiedName QnEntities
public XmlQualifiedName QnNmToken
public XmlQualifiedName QnNmTokens
public XmlQualifiedName QnEnumeration
public XmlQualifiedName QnDefault
public XmlQualifiedName QnXdrSchema
public XmlQualifiedName QnXdrElementType
public XmlQualifiedName QnXdrElement
public XmlQualifiedName QnXdrGroup
public XmlQualifiedName QnXdrAttributeType
public XmlQualifiedName QnXdrAttribute
public XmlQualifiedName QnXdrDataType
public XmlQualifiedName QnXdrDescription
public XmlQualifiedName QnXdrExtends
public XmlQualifiedName QnXdrAliasSchema
public XmlQualifiedName QnDtType
public XmlQualifiedName QnDtValues
public XmlQualifiedName QnDtMaxLength
public XmlQualifiedName QnDtMinLength
public XmlQualifiedName QnDtMax
public XmlQualifiedName QnDtMin
public XmlQualifiedName QnDtMinExclusive
public XmlQualifiedName QnDtMaxExclusive
public XmlQualifiedName QnTargetNamespace
public XmlQualifiedName QnVersion
public XmlQualifiedName QnFinalDefault
public XmlQualifiedName QnBlockDefault
public XmlQualifiedName QnFixed
public XmlQualifiedName QnAbstract
public XmlQualifiedName QnBlock
public XmlQualifiedName QnSubstitutionGroup
public XmlQualifiedName QnFinal
public XmlQualifiedName QnNillable
public XmlQualifiedName QnRef
public XmlQualifiedName QnBase
public XmlQualifiedName QnDerivedBy
public XmlQualifiedName QnNamespace
public XmlQualifiedName QnProcessContents
public XmlQualifiedName QnRefer
public XmlQualifiedName QnPublic
public XmlQualifiedName QnSystem
public XmlQualifiedName QnSchemaLocation
public XmlQualifiedName QnValue
public XmlQualifiedName QnUse
public XmlQualifiedName QnForm
public XmlQualifiedName QnElementFormDefault
public XmlQualifiedName QnAttributeFormDefault
public XmlQualifiedName QnItemType
public XmlQualifiedName QnMemberTypes
public XmlQualifiedName QnXPath
public XmlQualifiedName QnXsdSchema
public XmlQualifiedName QnXsdAnnotation
public XmlQualifiedName QnXsdInclude
public XmlQualifiedName QnXsdImport
public XmlQualifiedName QnXsdElement
public XmlQualifiedName QnXsdAttribute
public XmlQualifiedName QnXsdAttributeGroup
public XmlQualifiedName QnXsdAnyAttribute
public XmlQualifiedName QnXsdGroup
public XmlQualifiedName QnXsdAll
public XmlQualifiedName QnXsdChoice
public XmlQualifiedName QnXsdSequence
public XmlQualifiedName QnXsdAny
public XmlQualifiedName QnXsdNotation
public XmlQualifiedName QnXsdSimpleType
public XmlQualifiedName QnXsdComplexType
public XmlQualifiedName QnXsdUnique
public XmlQualifiedName QnXsdKey
public XmlQualifiedName QnXsdKeyRef
public XmlQualifiedName QnXsdSelector
public XmlQualifiedName QnXsdField
public XmlQualifiedName QnXsdMinExclusive
public XmlQualifiedName QnXsdMinInclusive
public XmlQualifiedName QnXsdMaxInclusive
public XmlQualifiedName QnXsdMaxExclusive
public XmlQualifiedName QnXsdTotalDigits
public XmlQualifiedName QnXsdFractionDigits
public XmlQualifiedName QnXsdLength
public XmlQualifiedName QnXsdMinLength
public XmlQualifiedName QnXsdMaxLength
public XmlQualifiedName QnXsdEnumeration
public XmlQualifiedName QnXsdPattern
public XmlQualifiedName QnXsdDocumentation
public XmlQualifiedName QnXsdAppinfo
public XmlQualifiedName QnSource
public XmlQualifiedName QnXsdComplexContent
public XmlQualifiedName QnXsdSimpleContent
public XmlQualifiedName QnXsdRestriction
public XmlQualifiedName QnXsdExtension
public XmlQualifiedName QnXsdUnion
public XmlQualifiedName QnXsdList
public XmlQualifiedName QnXsdWhiteSpace
public XmlQualifiedName QnXsdRedefine
public XmlQualifiedName QnXsdAnyType
internal XmlQualifiedName[] TokenToQName
public XmlNameTable NameTable
public XmlNameTable get_NameTable()
public void .ctor(XmlNameTable nameTable)
public void CreateTokenToQNameTable()
public SchemaType SchemaTypeFromRoot(string localName, string ns)
public bool IsXSDRoot(string localName, string ns)
public bool IsXDRRoot(string localName, string ns)
public XmlQualifiedName GetName(Token token)
}
internal System.Xml.Schema.SchemaNamespaceManager : XmlNamespaceManager {
private XmlSchemaObject node
public void .ctor(XmlSchemaObject node)
public string LookupNamespace(string prefix)
public string LookupPrefix(string ns)
}
internal System.Xml.Schema.SchemaNotation : object {
internal int SYSTEM
internal int PUBLIC
private XmlQualifiedName name
private string systemLiteral
private string pubid
internal XmlQualifiedName Name
internal string SystemLiteral
internal string Pubid
internal void .ctor(XmlQualifiedName name)
internal XmlQualifiedName get_Name()
internal string get_SystemLiteral()
internal void set_SystemLiteral(string value)
internal string get_Pubid()
internal void set_Pubid(string value)
}
internal System.Xml.Schema.SchemaType : Enum {
public int value__
public SchemaType None
public SchemaType DTD
public SchemaType XDR
public SchemaType XSD
}
internal System.Xml.Schema.SelectorActiveAxis : ActiveAxis {
private ConstraintStruct cs
private ArrayList KSs
private int KSpointer
public bool EmptyStack
public int lastDepth
public bool get_EmptyStack()
public int get_lastDepth()
public void .ctor(Asttree axisTree, ConstraintStruct cs)
public bool EndElement(string localname, string URN)
public int PushKS(int errline, int errcol)
public KeySequence PopKS()
}
internal System.Xml.Schema.SequenceNode : InteriorNode {
public bool IsNullable
public void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos)
public bool get_IsNullable()
public void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions)
}
internal System.Xml.Schema.StarNode : InteriorNode {
public bool IsNullable
public void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos)
public bool get_IsNullable()
}
internal System.Xml.Schema.StateUnion : ValueType {
public int State
public int AllElementsRequired
public int CurPosIndex
public int NumberOfRunningPos
}
internal System.Xml.Schema.StringFacetsChecker : FacetsChecker {
private Regex languagePattern
private Regex LanguagePattern
private Regex get_LanguagePattern()
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(string value, XmlSchemaDatatype datatype)
internal Exception CheckValueFacets(string value, XmlSchemaDatatype datatype, bool verifyUri)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
private bool MatchEnumeration(string value, ArrayList enumeration, XmlSchemaDatatype datatype)
private Exception CheckBuiltInFacets(string s, XmlTypeCode typeCode, bool verifyUri)
}
internal System.Xml.Schema.SymbolsDictionary : object {
private int last
private Hashtable names
private Hashtable wildcards
private ArrayList particles
private object particleLast
private bool isUpaEnforced
public int Count
public int CountOfNames
public bool IsUpaEnforced
public int Item
public int get_Count()
public int get_CountOfNames()
public bool get_IsUpaEnforced()
public void set_IsUpaEnforced(bool value)
public int AddName(XmlQualifiedName name, object particle)
public void AddNamespaceList(NamespaceList list, object particle, bool allowLocal)
private void AddWildcard(string wildcard, object particle)
public ICollection GetNamespaceListSymbols(NamespaceList list)
public int get_Item(XmlQualifiedName name)
public bool Exists(XmlQualifiedName name)
public object GetParticle(int symbol)
public string NameOf(int symbol)
}
internal System.Xml.Schema.SyntaxTreeNode : object {
public bool IsNullable
public bool IsRangeNode
public void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions)
public SyntaxTreeNode Clone(Positions positions)
public void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos)
public bool get_IsNullable()
public bool get_IsRangeNode()
}
internal System.Xml.Schema.TypedObject : object {
private DecimalStruct dstruct
private object ovalue
private string svalue
private XmlSchemaDatatype xsdtype
private int dim
private bool isList
public int Dim
public bool IsList
public bool IsDecimal
public Decimal[] Dvalue
public object Value
public XmlSchemaDatatype Type
public int get_Dim()
public bool get_IsList()
public bool get_IsDecimal()
public Decimal[] get_Dvalue()
public object get_Value()
public void set_Value(object value)
public XmlSchemaDatatype get_Type()
public void set_Type(XmlSchemaDatatype value)
public void .ctor(object obj, string svalue, XmlSchemaDatatype xsdtype)
public string ToString()
public void SetDecimal()
private bool ListDValueEquals(TypedObject other)
public bool Equals(TypedObject other)
}
internal System.Xml.Schema.UnionFacetsChecker : FacetsChecker {
internal Exception CheckValueFacets(object value, XmlSchemaDatatype datatype)
internal bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype)
}
internal System.Xml.Schema.UpaException : Exception {
private object particle1
private object particle2
public object Particle1
public object Particle2
public void .ctor(object particle1, object particle2)
public object get_Particle1()
public object get_Particle2()
}
public System.Xml.Schema.ValidationEventArgs : EventArgs {
private XmlSchemaException ex
private XmlSeverityType severity
public XmlSeverityType Severity
public XmlSchemaException Exception
public string Message
internal void .ctor(XmlSchemaException ex)
internal void .ctor(XmlSchemaException ex, XmlSeverityType severity)
public XmlSeverityType get_Severity()
public XmlSchemaException get_Exception()
public string get_Message()
}
public System.Xml.Schema.ValidationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ValidationEventArgs e)
public IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Xml.Schema.ValidationState : object {
public bool IsNill
public bool IsDefault
public bool NeedValidateChildren
public bool CheckRequiredAttribute
public bool ValidationSkipped
public int Depth
public XmlSchemaContentProcessing ProcessContents
public XmlSchemaValidity Validity
public SchemaElementDecl ElementDecl
public SchemaElementDecl ElementDeclBeforeXsi
public string LocalName
public string Namespace
public ConstraintStruct[] Constr
public StateUnion CurrentState
public bool HasMatched
public BitSet[] CurPos
public BitSet AllElementsSet
public List`1<RangePositionInfo> RunningPositions
public bool TooComplex
}
internal System.Xml.Schema.ValidatorState : Enum {
public int value__
public ValidatorState None
public ValidatorState Start
public ValidatorState TopLevelAttribute
public ValidatorState TopLevelTextOrWS
public ValidatorState Element
public ValidatorState Attribute
public ValidatorState EndOfAttributes
public ValidatorState Text
public ValidatorState Whitespace
public ValidatorState EndElement
public ValidatorState SkipToEndElement
public ValidatorState Finish
}
internal System.Xml.Schema.XdrBuilder : SchemaBuilder {
private int XdrSchema
private int XdrElementType
private int XdrAttributeType
private int XdrElement
private int XdrAttribute
private int XdrGroup
private int XdrElementDatatype
private int XdrAttributeDatatype
private int SchemaFlagsNs
private int StackIncrement
private int SchemaOrderNone
private int SchemaOrderMany
private int SchemaOrderSequence
private int SchemaOrderChoice
private int SchemaOrderAll
private int SchemaContentNone
private int SchemaContentEmpty
private int SchemaContentText
private int SchemaContentMixed
private int SchemaContentElement
private Int32[] S_XDR_Root_Element
private Int32[] S_XDR_Root_SubElements
private Int32[] S_XDR_ElementType_SubElements
private Int32[] S_XDR_AttributeType_SubElements
private Int32[] S_XDR_Group_SubElements
private XdrAttributeEntry[] S_XDR_Root_Attributes
private XdrAttributeEntry[] S_XDR_ElementType_Attributes
private XdrAttributeEntry[] S_XDR_AttributeType_Attributes
private XdrAttributeEntry[] S_XDR_Element_Attributes
private XdrAttributeEntry[] S_XDR_Attribute_Attributes
private XdrAttributeEntry[] S_XDR_Group_Attributes
private XdrAttributeEntry[] S_XDR_ElementDataType_Attributes
private XdrAttributeEntry[] S_XDR_AttributeDataType_Attributes
private XdrEntry[] S_SchemaEntries
private SchemaInfo _SchemaInfo
private string _TargetNamespace
private XmlReader _reader
private PositionInfo positionInfo
private ParticleContentValidator _contentValidator
private XdrEntry _CurState
private XdrEntry _NextState
private HWStack _StateHistory
private HWStack _GroupStack
private string _XdrName
private string _XdrPrefix
private ElementContent _ElementDef
private GroupContent _GroupDef
private AttributeContent _AttributeDef
private DeclBaseInfo _UndefinedAttributeTypes
private DeclBaseInfo _BaseDecl
private XmlNameTable _NameTable
private SchemaNames _SchemaNames
private XmlNamespaceManager _CurNsMgr
private string _Text
private ValidationEventHandler validationEventHandler
private Hashtable _UndeclaredElements
private string x_schema
private XmlResolver xmlResolver
internal XmlResolver XmlResolver
internal void .ctor(XmlReader reader, XmlNamespaceManager curmgr, SchemaInfo sinfo, string targetNamspace, XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventhandler)
internal bool ProcessElement(string prefix, string name, string ns)
internal void ProcessAttribute(string prefix, string name, string ns, string value)
internal void set_XmlResolver(XmlResolver value)
private bool LoadSchema(string uri)
internal bool IsXdrSchema(string uri)
internal bool IsContentParsed()
internal void ProcessMarkup(XmlNode[] markup)
internal void ProcessCData(string value)
internal void StartChildren()
internal void EndChildren()
private void Push()
private void Pop()
private void PushGroupInfo()
private void PopGroupInfo()
private void XDR_InitRoot(XdrBuilder builder, object obj)
private void XDR_BuildRoot_Name(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildRoot_ID(XdrBuilder builder, object obj, string prefix)
private void XDR_BeginRoot(XdrBuilder builder)
private void XDR_EndRoot(XdrBuilder builder)
private void XDR_InitElementType(XdrBuilder builder, object obj)
private void XDR_BuildElementType_Name(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildElementType_Content(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildElementType_Model(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildElementType_Order(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildElementType_DtType(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildElementType_DtValues(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildElementType_DtMaxLength(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildElementType_DtMinLength(XdrBuilder builder, object obj, string prefix)
private void XDR_BeginElementType(XdrBuilder builder)
private void XDR_EndElementType(XdrBuilder builder)
private void XDR_InitAttributeType(XdrBuilder builder, object obj)
private void XDR_BuildAttributeType_Name(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildAttributeType_Required(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildAttributeType_Default(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildAttributeType_DtType(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildAttributeType_DtValues(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildAttributeType_DtMaxLength(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildAttributeType_DtMinLength(XdrBuilder builder, object obj, string prefix)
private void XDR_BeginAttributeType(XdrBuilder builder)
private void XDR_EndAttributeType(XdrBuilder builder)
private void XDR_InitElement(XdrBuilder builder, object obj)
private void XDR_BuildElement_Type(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildElement_MinOccurs(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildElement_MaxOccurs(XdrBuilder builder, object obj, string prefix)
private void XDR_EndElement(XdrBuilder builder)
private void XDR_InitAttribute(XdrBuilder builder, object obj)
private void XDR_BuildAttribute_Type(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildAttribute_Required(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildAttribute_Default(XdrBuilder builder, object obj, string prefix)
private void XDR_BeginAttribute(XdrBuilder builder)
private void XDR_EndAttribute(XdrBuilder builder)
private void XDR_InitGroup(XdrBuilder builder, object obj)
private void XDR_BuildGroup_Order(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildGroup_MinOccurs(XdrBuilder builder, object obj, string prefix)
private void XDR_BuildGroup_MaxOccurs(XdrBuilder builder, object obj, string prefix)
private void XDR_EndGroup(XdrBuilder builder)
private void XDR_InitElementDtType(XdrBuilder builder, object obj)
private void XDR_EndElementDtType(XdrBuilder builder)
private void XDR_InitAttributeDtType(XdrBuilder builder, object obj)
private void XDR_EndAttributeDtType(XdrBuilder builder)
private bool GetNextState(XmlQualifiedName qname)
private bool IsSkipableElement(XmlQualifiedName qname)
private bool IsSkipableAttribute(XmlQualifiedName qname)
private int GetOrder(XmlQualifiedName qname)
private void AddOrder()
private bool IsYes(object obj, XdrBuilder builder)
private UInt32 ParseMinOccurs(object obj, XdrBuilder builder)
private UInt32 ParseMaxOccurs(object obj, XdrBuilder builder)
private void HandleMinMax(ParticleContentValidator pContent, UInt32 cMin, UInt32 cMax)
private void ParseDtMaxLength(UInt32& cVal, object obj, XdrBuilder builder)
private void ParseDtMinLength(UInt32& cVal, object obj, XdrBuilder builder)
private void CompareMinMaxLength(UInt32 cMin, UInt32 cMax, XdrBuilder builder)
private bool ParseInteger(string str, UInt32& n)
private void XDR_CheckAttributeDefault(DeclBaseInfo decl, SchemaAttDef pAttdef)
private void SetAttributePresence(SchemaAttDef pAttdef, bool fRequired)
private int GetContent(XmlQualifiedName qname)
private bool GetModel(XmlQualifiedName qname)
private XmlSchemaDatatype CheckDatatype(string str)
private void CheckDefaultAttValue(SchemaAttDef attDef)
private bool IsGlobal(int flags)
private void SendValidationEvent(string code, String[] args, XmlSeverityType severity)
private void SendValidationEvent(string code)
private void SendValidationEvent(string code, string msg)
private void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity)
}
internal System.Xml.Schema.XdrValidator : BaseValidator {
private int STACK_INCREMENT
private HWStack validationStack
private Hashtable attPresence
private XmlQualifiedName name
private XmlNamespaceManager nsManager
private bool isProcessContents
private Hashtable IDs
private IdRefNode idRefListHead
private Parser inlineSchemaParser
private string x_schema
private bool IsInlineSchemaStarted
private bool HasSchema
public bool PreserveWhitespace
internal void .ctor(BaseValidator validator)
internal void .ctor(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling)
private void Init()
public void Validate()
private void ValidateElement()
private void ValidateChildElement()
private bool get_IsInlineSchemaStarted()
private void ProcessInlineSchema()
private void ProcessElement()
private void ValidateEndElement()
private SchemaElementDecl ThoroughGetElementDecl()
private void ValidateStartElement()
private void ValidateEndStartElement()
private void LoadSchemaFromLocation(string uri)
private void LoadSchema(string uri)
private bool get_HasSchema()
public bool get_PreserveWhitespace()
private void ProcessTokenizedType(XmlTokenizedType ttype, string name)
public void CompleteValidation()
private void CheckValue(string value, SchemaAttDef attdef)
public void CheckDefaultValue(string value, SchemaAttDef attdef, SchemaInfo sinfo, XmlNamespaceManager nsManager, XmlNameTable NameTable, object sender, ValidationEventHandler eventhandler, string baseUri, int lineNo, int linePos)
internal void AddID(string name, object node)
public object FindId(string name)
private void Push(XmlQualifiedName elementName)
private void Pop()
private void CheckForwardRefs()
private XmlQualifiedName QualifiedName(string name, string ns)
}
internal System.Xml.Schema.XmlAnyConverter : XmlBaseConverter {
public XmlValueConverter Item
public XmlValueConverter AnyAtomic
protected void .ctor(XmlTypeCode typeCode)
public bool ToBoolean(object value)
public DateTime ToDateTime(object value)
public DateTimeOffset ToDateTimeOffset(object value)
public decimal ToDecimal(object value)
public double ToDouble(object value)
public int ToInt32(object value)
public long ToInt64(object value)
public float ToSingle(object value)
public object ChangeType(bool value, Type destinationType)
public object ChangeType(DateTime value, Type destinationType)
public object ChangeType(DateTimeOffset value, Type destinationType)
public object ChangeType(decimal value, Type destinationType)
public object ChangeType(double value, Type destinationType)
public object ChangeType(int value, Type destinationType)
public object ChangeType(long value, Type destinationType)
public object ChangeType(float value, Type destinationType)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private XPathNavigator ToNavigator(XPathNavigator nav)
}
internal System.Xml.Schema.XmlAnyListConverter : XmlListConverter {
public XmlValueConverter ItemList
public XmlValueConverter AnyAtomicList
protected void .ctor(XmlBaseConverter atomicConverter)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
public System.Xml.Schema.XmlAtomicValue : XPathItem {
private XmlSchemaType xmlType
private object objVal
private TypeCode clrType
private Union unionVal
private NamespacePrefixForQName nsPrefix
public bool IsNode
public XmlSchemaType XmlType
public Type ValueType
public object TypedValue
public bool ValueAsBoolean
public DateTime ValueAsDateTime
public double ValueAsDouble
public int ValueAsInt
public long ValueAsLong
public string Value
internal void .ctor(XmlSchemaType xmlType, bool value)
internal void .ctor(XmlSchemaType xmlType, DateTime value)
internal void .ctor(XmlSchemaType xmlType, double value)
internal void .ctor(XmlSchemaType xmlType, int value)
internal void .ctor(XmlSchemaType xmlType, long value)
internal void .ctor(XmlSchemaType xmlType, string value)
internal void .ctor(XmlSchemaType xmlType, string value, IXmlNamespaceResolver nsResolver)
internal void .ctor(XmlSchemaType xmlType, object value)
internal void .ctor(XmlSchemaType xmlType, object value, IXmlNamespaceResolver nsResolver)
public XmlAtomicValue Clone()
private object System.ICloneable.Clone()
public bool get_IsNode()
public XmlSchemaType get_XmlType()
public Type get_ValueType()
public object get_TypedValue()
public bool get_ValueAsBoolean()
public DateTime get_ValueAsDateTime()
public double get_ValueAsDouble()
public int get_ValueAsInt()
public long get_ValueAsLong()
public object ValueAs(Type type, IXmlNamespaceResolver nsResolver)
public string get_Value()
public string ToString()
private string GetPrefixFromQName(string value)
}
internal System.Xml.Schema.XmlBaseConverter : XmlValueConverter {
private XmlSchemaType schemaType
private XmlTypeCode typeCode
private Type clrTypeDefault
protected Type ICollectionType
protected Type IEnumerableType
protected Type IListType
protected Type ObjectArrayType
protected Type StringArrayType
protected Type XmlAtomicValueArrayType
protected Type DecimalType
protected Type Int32Type
protected Type Int64Type
protected Type StringType
protected Type XmlAtomicValueType
protected Type ObjectType
protected Type ByteType
protected Type Int16Type
protected Type SByteType
protected Type UInt16Type
protected Type UInt32Type
protected Type UInt64Type
protected Type XPathItemType
protected Type DoubleType
protected Type SingleType
protected Type DateTimeType
protected Type DateTimeOffsetType
protected Type BooleanType
protected Type ByteArrayType
protected Type XmlQualifiedNameType
protected Type UriType
protected Type TimeSpanType
protected Type XPathNavigatorType
protected XmlSchemaType SchemaType
protected XmlTypeCode TypeCode
protected string XmlTypeName
protected Type DefaultClrType
protected void .ctor(XmlSchemaType schemaType)
protected void .ctor(XmlTypeCode typeCode)
protected void .ctor(XmlBaseConverter converterAtomic)
protected void .ctor(XmlBaseConverter converterAtomic, Type clrTypeDefault)
public bool ToBoolean(bool value)
public bool ToBoolean(DateTime value)
public bool ToBoolean(DateTimeOffset value)
public bool ToBoolean(decimal value)
public bool ToBoolean(double value)
public bool ToBoolean(int value)
public bool ToBoolean(long value)
public bool ToBoolean(float value)
public bool ToBoolean(string value)
public bool ToBoolean(object value)
public DateTime ToDateTime(bool value)
public DateTime ToDateTime(DateTime value)
public DateTime ToDateTime(DateTimeOffset value)
public DateTime ToDateTime(decimal value)
public DateTime ToDateTime(double value)
public DateTime ToDateTime(int value)
public DateTime ToDateTime(long value)
public DateTime ToDateTime(float value)
public DateTime ToDateTime(string value)
public DateTime ToDateTime(object value)
public DateTimeOffset ToDateTimeOffset(bool value)
public DateTimeOffset ToDateTimeOffset(DateTime value)
public DateTimeOffset ToDateTimeOffset(DateTimeOffset value)
public DateTimeOffset ToDateTimeOffset(decimal value)
public DateTimeOffset ToDateTimeOffset(double value)
public DateTimeOffset ToDateTimeOffset(int value)
public DateTimeOffset ToDateTimeOffset(long value)
public DateTimeOffset ToDateTimeOffset(float value)
public DateTimeOffset ToDateTimeOffset(string value)
public DateTimeOffset ToDateTimeOffset(object value)
public decimal ToDecimal(bool value)
public decimal ToDecimal(DateTime value)
public decimal ToDecimal(DateTimeOffset value)
public decimal ToDecimal(decimal value)
public decimal ToDecimal(double value)
public decimal ToDecimal(int value)
public decimal ToDecimal(long value)
public decimal ToDecimal(float value)
public decimal ToDecimal(string value)
public decimal ToDecimal(object value)
public double ToDouble(bool value)
public double ToDouble(DateTime value)
public double ToDouble(DateTimeOffset value)
public double ToDouble(decimal value)
public double ToDouble(double value)
public double ToDouble(int value)
public double ToDouble(long value)
public double ToDouble(float value)
public double ToDouble(string value)
public double ToDouble(object value)
public int ToInt32(bool value)
public int ToInt32(DateTime value)
public int ToInt32(DateTimeOffset value)
public int ToInt32(decimal value)
public int ToInt32(double value)
public int ToInt32(int value)
public int ToInt32(long value)
public int ToInt32(float value)
public int ToInt32(string value)
public int ToInt32(object value)
public long ToInt64(bool value)
public long ToInt64(DateTime value)
public long ToInt64(DateTimeOffset value)
public long ToInt64(decimal value)
public long ToInt64(double value)
public long ToInt64(int value)
public long ToInt64(long value)
public long ToInt64(float value)
public long ToInt64(string value)
public long ToInt64(object value)
public float ToSingle(bool value)
public float ToSingle(DateTime value)
public float ToSingle(DateTimeOffset value)
public float ToSingle(decimal value)
public float ToSingle(double value)
public float ToSingle(int value)
public float ToSingle(long value)
public float ToSingle(float value)
public float ToSingle(string value)
public float ToSingle(object value)
public string ToString(bool value)
public string ToString(DateTime value)
public string ToString(DateTimeOffset value)
public string ToString(decimal value)
public string ToString(double value)
public string ToString(int value)
public string ToString(long value)
public string ToString(float value)
public string ToString(string value, IXmlNamespaceResolver nsResolver)
public string ToString(object value, IXmlNamespaceResolver nsResolver)
public string ToString(string value)
public string ToString(object value)
public object ChangeType(bool value, Type destinationType)
public object ChangeType(DateTime value, Type destinationType)
public object ChangeType(DateTimeOffset value, Type destinationType)
public object ChangeType(decimal value, Type destinationType)
public object ChangeType(double value, Type destinationType)
public object ChangeType(int value, Type destinationType)
public object ChangeType(long value, Type destinationType)
public object ChangeType(float value, Type destinationType)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(string value, Type destinationType)
public object ChangeType(object value, Type destinationType)
protected XmlSchemaType get_SchemaType()
protected XmlTypeCode get_TypeCode()
protected string get_XmlTypeName()
protected Type get_DefaultClrType()
protected bool IsDerivedFrom(Type derivedType, Type baseType)
protected Exception CreateInvalidClrMappingException(Type sourceType, Type destinationType)
protected string QNameToString(XmlQualifiedName name)
protected object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
protected Byte[] StringToBase64Binary(string value)
protected DateTime StringToDate(string value)
protected DateTime StringToDateTime(string value)
protected TimeSpan StringToDayTimeDuration(string value)
protected TimeSpan StringToDuration(string value)
protected DateTime StringToGDay(string value)
protected DateTime StringToGMonth(string value)
protected DateTime StringToGMonthDay(string value)
protected DateTime StringToGYear(string value)
protected DateTime StringToGYearMonth(string value)
protected DateTimeOffset StringToDateOffset(string value)
protected DateTimeOffset StringToDateTimeOffset(string value)
protected DateTimeOffset StringToGDayOffset(string value)
protected DateTimeOffset StringToGMonthOffset(string value)
protected DateTimeOffset StringToGMonthDayOffset(string value)
protected DateTimeOffset StringToGYearOffset(string value)
protected DateTimeOffset StringToGYearMonthOffset(string value)
protected Byte[] StringToHexBinary(string value)
protected XmlQualifiedName StringToQName(string value, IXmlNamespaceResolver nsResolver)
protected DateTime StringToTime(string value)
protected DateTimeOffset StringToTimeOffset(string value)
protected TimeSpan StringToYearMonthDuration(string value)
protected string AnyUriToString(Uri value)
protected string Base64BinaryToString(Byte[] value)
protected string DateToString(DateTime value)
protected string DateTimeToString(DateTime value)
protected string DayTimeDurationToString(TimeSpan value)
protected string DurationToString(TimeSpan value)
protected string GDayToString(DateTime value)
protected string GMonthToString(DateTime value)
protected string GMonthDayToString(DateTime value)
protected string GYearToString(DateTime value)
protected string GYearMonthToString(DateTime value)
protected string DateOffsetToString(DateTimeOffset value)
protected string DateTimeOffsetToString(DateTimeOffset value)
protected string GDayOffsetToString(DateTimeOffset value)
protected string GMonthOffsetToString(DateTimeOffset value)
protected string GMonthDayOffsetToString(DateTimeOffset value)
protected string GYearOffsetToString(DateTimeOffset value)
protected string GYearMonthOffsetToString(DateTimeOffset value)
protected string QNameToString(XmlQualifiedName qname, IXmlNamespaceResolver nsResolver)
protected string TimeToString(DateTime value)
protected string TimeOffsetToString(DateTimeOffset value)
protected string YearMonthDurationToString(TimeSpan value)
internal DateTime DateTimeOffsetToDateTime(DateTimeOffset value)
internal int DecimalToInt32(decimal value)
protected long DecimalToInt64(decimal value)
protected ulong DecimalToUInt64(decimal value)
protected byte Int32ToByte(int value)
protected short Int32ToInt16(int value)
protected sbyte Int32ToSByte(int value)
protected ushort Int32ToUInt16(int value)
protected int Int64ToInt32(long value)
protected UInt32 Int64ToUInt32(long value)
protected DateTime UntypedAtomicToDateTime(string value)
protected DateTimeOffset UntypedAtomicToDateTimeOffset(string value)
}
internal System.Xml.Schema.XmlBooleanConverter : XmlBaseConverter {
protected void .ctor(XmlSchemaType schemaType)
public XmlValueConverter Create(XmlSchemaType schemaType)
public bool ToBoolean(bool value)
public bool ToBoolean(string value)
public bool ToBoolean(object value)
public string ToString(bool value)
public string ToString(string value, IXmlNamespaceResolver nsResolver)
public string ToString(object value, IXmlNamespaceResolver nsResolver)
public object ChangeType(bool value, Type destinationType)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
internal System.Xml.Schema.XmlDateTimeConverter : XmlBaseConverter {
protected void .ctor(XmlSchemaType schemaType)
public XmlValueConverter Create(XmlSchemaType schemaType)
public DateTime ToDateTime(DateTime value)
public DateTime ToDateTime(DateTimeOffset value)
public DateTime ToDateTime(string value)
public DateTime ToDateTime(object value)
public DateTimeOffset ToDateTimeOffset(DateTime value)
public DateTimeOffset ToDateTimeOffset(DateTimeOffset value)
public DateTimeOffset ToDateTimeOffset(string value)
public DateTimeOffset ToDateTimeOffset(object value)
public string ToString(DateTime value)
public string ToString(DateTimeOffset value)
public string ToString(string value, IXmlNamespaceResolver nsResolver)
public string ToString(object value, IXmlNamespaceResolver nsResolver)
public object ChangeType(DateTime value, Type destinationType)
public object ChangeType(DateTimeOffset value, Type destinationType)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
internal System.Xml.Schema.XmlListConverter : XmlBaseConverter {
protected XmlValueConverter atomicConverter
protected void .ctor(XmlBaseConverter atomicConverter)
protected void .ctor(XmlBaseConverter atomicConverter, Type clrTypeDefault)
protected void .ctor(XmlSchemaType schemaType)
public XmlValueConverter Create(XmlValueConverter atomicConverter)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
protected object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private bool IsListType(Type type)
private T[] ToArray(object list, IXmlNamespaceResolver nsResolver)
private IList ToList(object list, IXmlNamespaceResolver nsResolver)
private List`1<string> StringAsList(string value)
private string ListAsString(IEnumerable list, IXmlNamespaceResolver nsResolver)
private Exception CreateInvalidClrMappingException(Type sourceType, Type destinationType)
}
internal System.Xml.Schema.XmlMiscConverter : XmlBaseConverter {
protected void .ctor(XmlSchemaType schemaType)
public XmlValueConverter Create(XmlSchemaType schemaType)
public string ToString(string value, IXmlNamespaceResolver nsResolver)
public string ToString(object value, IXmlNamespaceResolver nsResolver)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
internal System.Xml.Schema.XmlNodeConverter : XmlBaseConverter {
public XmlValueConverter Node
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
internal System.Xml.Schema.XmlNumeric10Converter : XmlBaseConverter {
protected void .ctor(XmlSchemaType schemaType)
public XmlValueConverter Create(XmlSchemaType schemaType)
public decimal ToDecimal(decimal value)
public decimal ToDecimal(int value)
public decimal ToDecimal(long value)
public decimal ToDecimal(string value)
public decimal ToDecimal(object value)
public int ToInt32(decimal value)
public int ToInt32(int value)
public int ToInt32(long value)
public int ToInt32(string value)
public int ToInt32(object value)
public long ToInt64(decimal value)
public long ToInt64(int value)
public long ToInt64(long value)
public long ToInt64(string value)
public long ToInt64(object value)
public string ToString(decimal value)
public string ToString(int value)
public string ToString(long value)
public string ToString(string value, IXmlNamespaceResolver nsResolver)
public string ToString(object value, IXmlNamespaceResolver nsResolver)
public object ChangeType(decimal value, Type destinationType)
public object ChangeType(int value, Type destinationType)
public object ChangeType(long value, Type destinationType)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
internal System.Xml.Schema.XmlNumeric2Converter : XmlBaseConverter {
protected void .ctor(XmlSchemaType schemaType)
public XmlValueConverter Create(XmlSchemaType schemaType)
public double ToDouble(double value)
public double ToDouble(float value)
public double ToDouble(string value)
public double ToDouble(object value)
public float ToSingle(double value)
public float ToSingle(float value)
public float ToSingle(string value)
public float ToSingle(object value)
public string ToString(double value)
public string ToString(float value)
public string ToString(string value, IXmlNamespaceResolver nsResolver)
public string ToString(object value, IXmlNamespaceResolver nsResolver)
public object ChangeType(double value, Type destinationType)
public object ChangeType(float value, Type destinationType)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
public System.Xml.Schema.XmlSchema : XmlSchemaObject {
public string Namespace
public string InstanceNamespace
private XmlSchemaForm attributeFormDefault
private XmlSchemaForm elementFormDefault
private XmlSchemaDerivationMethod blockDefault
private XmlSchemaDerivationMethod finalDefault
private string targetNs
private string version
private XmlSchemaObjectCollection includes
private XmlSchemaObjectCollection items
private string id
private XmlAttribute[] moreAttributes
private bool isCompiled
private bool isCompiledBySet
private bool isPreprocessed
private bool isRedefined
private int errorCount
private XmlSchemaObjectTable attributes
private XmlSchemaObjectTable attributeGroups
private XmlSchemaObjectTable elements
private XmlSchemaObjectTable types
private XmlSchemaObjectTable groups
private XmlSchemaObjectTable notations
private XmlSchemaObjectTable identityConstraints
private int globalIdCounter
private ArrayList importedSchemas
private ArrayList importedNamespaces
private int schemaId
private Uri baseUri
private bool isChameleon
private Hashtable ids
private XmlDocument document
private XmlNameTable nameTable
public XmlSchemaForm AttributeFormDefault
public XmlSchemaDerivationMethod BlockDefault
public XmlSchemaDerivationMethod FinalDefault
public XmlSchemaForm ElementFormDefault
public string TargetNamespace
public string Version
public XmlSchemaObjectCollection Includes
public XmlSchemaObjectCollection Items
public bool IsCompiled
internal bool IsCompiledBySet
internal bool IsPreprocessed
internal bool IsRedefined
public XmlSchemaObjectTable Attributes
public XmlSchemaObjectTable AttributeGroups
public XmlSchemaObjectTable SchemaTypes
public XmlSchemaObjectTable Elements
public string Id
public XmlAttribute[] UnhandledAttributes
public XmlSchemaObjectTable Groups
public XmlSchemaObjectTable Notations
internal XmlSchemaObjectTable IdentityConstraints
internal Uri BaseUri
internal int SchemaId
internal bool IsChameleon
internal Hashtable Ids
internal XmlDocument Document
internal int ErrorCount
internal string IdAttribute
internal XmlNameTable NameTable
internal ArrayList ImportedSchemas
internal ArrayList ImportedNamespaces
public XmlSchema Read(TextReader reader, ValidationEventHandler validationEventHandler)
public XmlSchema Read(Stream stream, ValidationEventHandler validationEventHandler)
public XmlSchema Read(XmlReader reader, ValidationEventHandler validationEventHandler)
public void Write(Stream stream)
public void Write(Stream stream, XmlNamespaceManager namespaceManager)
public void Write(TextWriter writer)
public void Write(TextWriter writer, XmlNamespaceManager namespaceManager)
public void Write(XmlWriter writer)
public void Write(XmlWriter writer, XmlNamespaceManager namespaceManager)
public void Compile(ValidationEventHandler validationEventHandler)
public void Compile(ValidationEventHandler validationEventHandler, XmlResolver resolver)
internal bool CompileSchema(XmlSchemaCollection xsc, XmlResolver resolver, SchemaInfo schemaInfo, string ns, ValidationEventHandler validationEventHandler, XmlNameTable nameTable, bool CompileContentModel)
internal void CompileSchemaInSet(XmlNameTable nameTable, ValidationEventHandler eventHandler, XmlSchemaCompilationSettings compilationSettings)
public XmlSchemaForm get_AttributeFormDefault()
public void set_AttributeFormDefault(XmlSchemaForm value)
public XmlSchemaDerivationMethod get_BlockDefault()
public void set_BlockDefault(XmlSchemaDerivationMethod value)
public XmlSchemaDerivationMethod get_FinalDefault()
public void set_FinalDefault(XmlSchemaDerivationMethod value)
public XmlSchemaForm get_ElementFormDefault()
public void set_ElementFormDefault(XmlSchemaForm value)
public string get_TargetNamespace()
public void set_TargetNamespace(string value)
public string get_Version()
public void set_Version(string value)
public XmlSchemaObjectCollection get_Includes()
public XmlSchemaObjectCollection get_Items()
public bool get_IsCompiled()
internal bool get_IsCompiledBySet()
internal void set_IsCompiledBySet(bool value)
internal bool get_IsPreprocessed()
internal void set_IsPreprocessed(bool value)
internal bool get_IsRedefined()
internal void set_IsRedefined(bool value)
public XmlSchemaObjectTable get_Attributes()
public XmlSchemaObjectTable get_AttributeGroups()
public XmlSchemaObjectTable get_SchemaTypes()
public XmlSchemaObjectTable get_Elements()
public string get_Id()
public void set_Id(string value)
public XmlAttribute[] get_UnhandledAttributes()
public void set_UnhandledAttributes(XmlAttribute[] value)
public XmlSchemaObjectTable get_Groups()
public XmlSchemaObjectTable get_Notations()
internal XmlSchemaObjectTable get_IdentityConstraints()
internal Uri get_BaseUri()
internal void set_BaseUri(Uri value)
internal int get_SchemaId()
internal bool get_IsChameleon()
internal void set_IsChameleon(bool value)
internal Hashtable get_Ids()
internal XmlDocument get_Document()
internal int get_ErrorCount()
internal void set_ErrorCount(int value)
internal XmlSchema Clone()
internal XmlSchema DeepClone()
internal string get_IdAttribute()
internal void set_IdAttribute(string value)
internal void SetIsCompiled(bool isCompiled)
internal void SetUnhandledAttributes(XmlAttribute[] moreAttributes)
internal void AddAnnotation(XmlSchemaAnnotation annotation)
internal XmlNameTable get_NameTable()
internal ArrayList get_ImportedSchemas()
internal ArrayList get_ImportedNamespaces()
internal void GetExternalSchemasList(IList extList, XmlSchema schema)
}
public System.Xml.Schema.XmlSchemaAll : XmlSchemaGroupBase {
private XmlSchemaObjectCollection items
public XmlSchemaObjectCollection Items
internal bool IsEmpty
public XmlSchemaObjectCollection get_Items()
internal bool get_IsEmpty()
internal void SetItems(XmlSchemaObjectCollection newItems)
}
public System.Xml.Schema.XmlSchemaAnnotated : XmlSchemaObject {
private string id
private XmlSchemaAnnotation annotation
private XmlAttribute[] moreAttributes
public string Id
public XmlSchemaAnnotation Annotation
public XmlAttribute[] UnhandledAttributes
internal string IdAttribute
public string get_Id()
public void set_Id(string value)
public XmlSchemaAnnotation get_Annotation()
public void set_Annotation(XmlSchemaAnnotation value)
public XmlAttribute[] get_UnhandledAttributes()
public void set_UnhandledAttributes(XmlAttribute[] value)
internal string get_IdAttribute()
internal void set_IdAttribute(string value)
internal void SetUnhandledAttributes(XmlAttribute[] moreAttributes)
internal void AddAnnotation(XmlSchemaAnnotation annotation)
}
public System.Xml.Schema.XmlSchemaAnnotation : XmlSchemaObject {
private string id
private XmlSchemaObjectCollection items
private XmlAttribute[] moreAttributes
public string Id
public XmlSchemaObjectCollection Items
public XmlAttribute[] UnhandledAttributes
internal string IdAttribute
public string get_Id()
public void set_Id(string value)
public XmlSchemaObjectCollection get_Items()
public XmlAttribute[] get_UnhandledAttributes()
public void set_UnhandledAttributes(XmlAttribute[] value)
internal string get_IdAttribute()
internal void set_IdAttribute(string value)
internal void SetUnhandledAttributes(XmlAttribute[] moreAttributes)
}
public System.Xml.Schema.XmlSchemaAny : XmlSchemaParticle {
private string ns
private XmlSchemaContentProcessing processContents
private NamespaceList namespaceList
public string Namespace
public XmlSchemaContentProcessing ProcessContents
internal NamespaceList NamespaceList
internal string ResolvedNamespace
internal XmlSchemaContentProcessing ProcessContentsCorrect
internal string NameString
public string get_Namespace()
public void set_Namespace(string value)
public XmlSchemaContentProcessing get_ProcessContents()
public void set_ProcessContents(XmlSchemaContentProcessing value)
internal NamespaceList get_NamespaceList()
internal string get_ResolvedNamespace()
internal XmlSchemaContentProcessing get_ProcessContentsCorrect()
internal string get_NameString()
internal void BuildNamespaceList(string targetNamespace)
internal void BuildNamespaceListV1Compat(string targetNamespace)
internal bool Allows(XmlQualifiedName qname)
}
public System.Xml.Schema.XmlSchemaAnyAttribute : XmlSchemaAnnotated {
private string ns
private XmlSchemaContentProcessing processContents
private NamespaceList namespaceList
public string Namespace
public XmlSchemaContentProcessing ProcessContents
internal NamespaceList NamespaceList
internal XmlSchemaContentProcessing ProcessContentsCorrect
public string get_Namespace()
public void set_Namespace(string value)
public XmlSchemaContentProcessing get_ProcessContents()
public void set_ProcessContents(XmlSchemaContentProcessing value)
internal NamespaceList get_NamespaceList()
internal XmlSchemaContentProcessing get_ProcessContentsCorrect()
internal void BuildNamespaceList(string targetNamespace)
internal void BuildNamespaceListV1Compat(string targetNamespace)
internal bool Allows(XmlQualifiedName qname)
internal bool IsSubset(XmlSchemaAnyAttribute sub, XmlSchemaAnyAttribute super)
internal XmlSchemaAnyAttribute Intersection(XmlSchemaAnyAttribute o1, XmlSchemaAnyAttribute o2, bool v1Compat)
internal XmlSchemaAnyAttribute Union(XmlSchemaAnyAttribute o1, XmlSchemaAnyAttribute o2, bool v1Compat)
}
public System.Xml.Schema.XmlSchemaAppInfo : XmlSchemaObject {
private string source
private XmlNode[] markup
public string Source
public XmlNode[] Markup
public string get_Source()
public void set_Source(string value)
public XmlNode[] get_Markup()
public void set_Markup(XmlNode[] value)
}
public System.Xml.Schema.XmlSchemaAttribute : XmlSchemaAnnotated {
private string defaultValue
private string fixedValue
private string name
private XmlSchemaForm form
private XmlSchemaUse use
private XmlQualifiedName refName
private XmlQualifiedName typeName
private XmlQualifiedName qualifiedName
private XmlSchemaSimpleType type
private XmlSchemaSimpleType attributeType
private SchemaAttDef attDef
public string DefaultValue
public string FixedValue
public XmlSchemaForm Form
public string Name
public XmlQualifiedName RefName
public XmlQualifiedName SchemaTypeName
public XmlSchemaSimpleType SchemaType
public XmlSchemaUse Use
public XmlQualifiedName QualifiedName
public object AttributeType
public XmlSchemaSimpleType AttributeSchemaType
internal XmlSchemaDatatype Datatype
internal SchemaAttDef AttDef
internal bool HasDefault
internal string NameAttribute
public string get_DefaultValue()
public void set_DefaultValue(string value)
public string get_FixedValue()
public void set_FixedValue(string value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public string get_Name()
public void set_Name(string value)
public XmlQualifiedName get_RefName()
public void set_RefName(XmlQualifiedName value)
public XmlQualifiedName get_SchemaTypeName()
public void set_SchemaTypeName(XmlQualifiedName value)
public XmlSchemaSimpleType get_SchemaType()
public void set_SchemaType(XmlSchemaSimpleType value)
public XmlSchemaUse get_Use()
public void set_Use(XmlSchemaUse value)
public XmlQualifiedName get_QualifiedName()
public object get_AttributeType()
public XmlSchemaSimpleType get_AttributeSchemaType()
internal XmlReader Validate(XmlReader reader, XmlResolver resolver, XmlSchemaSet schemaSet, ValidationEventHandler valEventHandler)
internal XmlSchemaDatatype get_Datatype()
internal void SetQualifiedName(XmlQualifiedName value)
internal void SetAttributeType(XmlSchemaSimpleType value)
internal SchemaAttDef get_AttDef()
internal void set_AttDef(SchemaAttDef value)
internal bool get_HasDefault()
internal string get_NameAttribute()
internal void set_NameAttribute(string value)
internal XmlSchemaObject Clone()
}
public System.Xml.Schema.XmlSchemaAttributeGroup : XmlSchemaAnnotated {
private string name
private XmlSchemaObjectCollection attributes
private XmlSchemaAnyAttribute anyAttribute
private XmlQualifiedName qname
private XmlSchemaAttributeGroup redefined
private XmlSchemaObjectTable attributeUses
private XmlSchemaAnyAttribute attributeWildcard
private int selfReferenceCount
public string Name
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
public XmlQualifiedName QualifiedName
internal XmlSchemaObjectTable AttributeUses
internal XmlSchemaAnyAttribute AttributeWildcard
public XmlSchemaAttributeGroup RedefinedAttributeGroup
internal XmlSchemaAttributeGroup Redefined
internal int SelfReferenceCount
internal string NameAttribute
public string get_Name()
public void set_Name(string value)
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
public XmlQualifiedName get_QualifiedName()
internal XmlSchemaObjectTable get_AttributeUses()
internal XmlSchemaAnyAttribute get_AttributeWildcard()
internal void set_AttributeWildcard(XmlSchemaAnyAttribute value)
public XmlSchemaAttributeGroup get_RedefinedAttributeGroup()
internal XmlSchemaAttributeGroup get_Redefined()
internal void set_Redefined(XmlSchemaAttributeGroup value)
internal int get_SelfReferenceCount()
internal void set_SelfReferenceCount(int value)
internal string get_NameAttribute()
internal void set_NameAttribute(string value)
internal void SetQualifiedName(XmlQualifiedName value)
internal XmlSchemaObject Clone()
}
public System.Xml.Schema.XmlSchemaAttributeGroupRef : XmlSchemaAnnotated {
private XmlQualifiedName refName
public XmlQualifiedName RefName
public XmlQualifiedName get_RefName()
public void set_RefName(XmlQualifiedName value)
}
public System.Xml.Schema.XmlSchemaChoice : XmlSchemaGroupBase {
private XmlSchemaObjectCollection items
public XmlSchemaObjectCollection Items
internal bool IsEmpty
public XmlSchemaObjectCollection get_Items()
internal bool get_IsEmpty()
internal void SetItems(XmlSchemaObjectCollection newItems)
}
public System.Xml.Schema.XmlSchemaCollection : object {
private Hashtable collection
private XmlNameTable nameTable
private SchemaNames schemaNames
private ReaderWriterLock wLock
private int timeout
private bool isThreadSafe
private ValidationEventHandler validationEventHandler
private XmlResolver xmlResolver
public int Count
public XmlNameTable NameTable
internal XmlResolver XmlResolver
public XmlSchema Item
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private int System.Collections.ICollection.Count
internal ValidationEventHandler EventHandler
public void .ctor(XmlNameTable nametable)
public int get_Count()
public XmlNameTable get_NameTable()
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
internal void set_XmlResolver(XmlResolver value)
public XmlSchema Add(string ns, string uri)
public XmlSchema Add(string ns, XmlReader reader)
public XmlSchema Add(string ns, XmlReader reader, XmlResolver resolver)
public XmlSchema Add(XmlSchema schema)
public XmlSchema Add(XmlSchema schema, XmlResolver resolver)
public void Add(XmlSchemaCollection schema)
public XmlSchema get_Item(string ns)
public bool Contains(XmlSchema schema)
public bool Contains(string ns)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public XmlSchemaCollectionEnumerator GetEnumerator()
private void System.Collections.ICollection.CopyTo(Array array, int index)
public void CopyTo(XmlSchema[] array, int index)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private int System.Collections.ICollection.get_Count()
internal SchemaInfo GetSchemaInfo(string ns)
internal SchemaNames GetSchemaNames(XmlNameTable nt)
internal XmlSchema Add(string ns, SchemaInfo schemaInfo, XmlSchema schema, bool compile)
private XmlSchema Add(string ns, SchemaInfo schemaInfo, XmlSchema schema, bool compile, XmlResolver resolver)
private void Add(string ns, XmlSchemaCollectionNode node)
private void SendValidationEvent(XmlSchemaException e)
internal ValidationEventHandler get_EventHandler()
internal void set_EventHandler(ValidationEventHandler value)
}
public System.Xml.Schema.XmlSchemaCollectionEnumerator : object {
private IDictionaryEnumerator enumerator
private object System.Collections.IEnumerator.Current
public XmlSchema Current
internal XmlSchemaCollectionNode CurrentNode
internal void .ctor(Hashtable collection)
private void System.Collections.IEnumerator.Reset()
private bool System.Collections.IEnumerator.MoveNext()
public bool MoveNext()
private object System.Collections.IEnumerator.get_Current()
public XmlSchema get_Current()
internal XmlSchemaCollectionNode get_CurrentNode()
}
internal System.Xml.Schema.XmlSchemaCollectionNode : object {
private string namespaceUri
private SchemaInfo schemaInfo
private XmlSchema schema
internal string NamespaceURI
internal SchemaInfo SchemaInfo
internal XmlSchema Schema
internal string get_NamespaceURI()
internal void set_NamespaceURI(string value)
internal SchemaInfo get_SchemaInfo()
internal void set_SchemaInfo(SchemaInfo value)
internal XmlSchema get_Schema()
internal void set_Schema(XmlSchema value)
}
public System.Xml.Schema.XmlSchemaCompilationSettings : object {
private bool enableUpaCheck
public bool EnableUpaCheck
public bool get_EnableUpaCheck()
public void set_EnableUpaCheck(bool value)
}
public System.Xml.Schema.XmlSchemaComplexContent : XmlSchemaContentModel {
private XmlSchemaContent content
private bool isMixed
private bool hasMixedAttribute
public bool IsMixed
public XmlSchemaContent Content
internal bool HasMixedAttribute
public bool get_IsMixed()
public void set_IsMixed(bool value)
public XmlSchemaContent get_Content()
public void set_Content(XmlSchemaContent value)
internal bool get_HasMixedAttribute()
}
public System.Xml.Schema.XmlSchemaComplexContentExtension : XmlSchemaContent {
private XmlSchemaParticle particle
private XmlSchemaObjectCollection attributes
private XmlSchemaAnyAttribute anyAttribute
private XmlQualifiedName baseTypeName
public XmlQualifiedName BaseTypeName
public XmlSchemaParticle Particle
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaParticle get_Particle()
public void set_Particle(XmlSchemaParticle value)
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
internal void SetAttributes(XmlSchemaObjectCollection newAttributes)
}
public System.Xml.Schema.XmlSchemaComplexContentRestriction : XmlSchemaContent {
private XmlSchemaParticle particle
private XmlSchemaObjectCollection attributes
private XmlSchemaAnyAttribute anyAttribute
private XmlQualifiedName baseTypeName
public XmlQualifiedName BaseTypeName
public XmlSchemaParticle Particle
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaParticle get_Particle()
public void set_Particle(XmlSchemaParticle value)
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
internal void SetAttributes(XmlSchemaObjectCollection newAttributes)
}
public System.Xml.Schema.XmlSchemaComplexType : XmlSchemaType {
private XmlSchemaDerivationMethod block
private XmlSchemaContentModel contentModel
private XmlSchemaParticle particle
private XmlSchemaObjectCollection attributes
private XmlSchemaAnyAttribute anyAttribute
private XmlSchemaParticle contentTypeParticle
private XmlSchemaDerivationMethod blockResolved
private XmlSchemaObjectTable localElements
private XmlSchemaObjectTable attributeUses
private XmlSchemaAnyAttribute attributeWildcard
private XmlSchemaComplexType anyTypeLax
private XmlSchemaComplexType anyTypeSkip
private XmlSchemaComplexType untypedAnyType
private byte pvFlags
private byte wildCardMask
private byte isMixedMask
private byte isAbstractMask
internal XmlSchemaComplexType AnyType
internal XmlSchemaComplexType UntypedAnyType
internal XmlSchemaComplexType AnyTypeSkip
internal ContentValidator AnyTypeContentValidator
public bool IsAbstract
public XmlSchemaDerivationMethod Block
public bool IsMixed
public XmlSchemaContentModel ContentModel
public XmlSchemaParticle Particle
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
public XmlSchemaContentType ContentType
public XmlSchemaParticle ContentTypeParticle
public XmlSchemaDerivationMethod BlockResolved
public XmlSchemaObjectTable AttributeUses
public XmlSchemaAnyAttribute AttributeWildcard
internal XmlSchemaObjectTable LocalElements
internal bool HasWildCard
internal XmlQualifiedName DerivedFrom
private XmlSchemaComplexType CreateAnyType(XmlSchemaContentProcessing processContents)
internal XmlSchemaComplexType get_AnyType()
internal XmlSchemaComplexType get_UntypedAnyType()
internal XmlSchemaComplexType get_AnyTypeSkip()
internal ContentValidator get_AnyTypeContentValidator()
public bool get_IsAbstract()
public void set_IsAbstract(bool value)
public XmlSchemaDerivationMethod get_Block()
public void set_Block(XmlSchemaDerivationMethod value)
public bool get_IsMixed()
public void set_IsMixed(bool value)
public XmlSchemaContentModel get_ContentModel()
public void set_ContentModel(XmlSchemaContentModel value)
public XmlSchemaParticle get_Particle()
public void set_Particle(XmlSchemaParticle value)
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
public XmlSchemaContentType get_ContentType()
public XmlSchemaParticle get_ContentTypeParticle()
public XmlSchemaDerivationMethod get_BlockResolved()
public XmlSchemaObjectTable get_AttributeUses()
public XmlSchemaAnyAttribute get_AttributeWildcard()
internal XmlSchemaObjectTable get_LocalElements()
internal void SetContentTypeParticle(XmlSchemaParticle value)
internal void SetBlockResolved(XmlSchemaDerivationMethod value)
internal void SetAttributeWildcard(XmlSchemaAnyAttribute value)
internal bool get_HasWildCard()
internal void set_HasWildCard(bool value)
internal XmlQualifiedName get_DerivedFrom()
internal void SetAttributes(XmlSchemaObjectCollection newAttributes)
internal bool ContainsIdAttribute(bool findAll)
internal XmlSchemaObject Clone()
internal XmlSchemaObject Clone(XmlSchema parentSchema)
private void ClearCompiledState()
internal XmlSchemaObjectCollection CloneAttributes(XmlSchemaObjectCollection attributes)
private XmlSchemaObjectCollection CloneGroupBaseParticles(XmlSchemaObjectCollection groupBaseParticles, XmlSchema parentSchema)
internal XmlSchemaParticle CloneParticle(XmlSchemaParticle particle, XmlSchema parentSchema)
private XmlSchemaForm GetResolvedElementForm(XmlSchema parentSchema, XmlSchemaElement element)
internal bool HasParticleRef(XmlSchemaParticle particle, XmlSchema parentSchema)
internal bool HasAttributeQNameRef(XmlSchemaObjectCollection attributes)
}
public System.Xml.Schema.XmlSchemaContentModel : XmlSchemaAnnotated {
public XmlSchemaContent Content
public XmlSchemaContent get_Content()
public void set_Content(XmlSchemaContent value)
}
public System.Xml.Schema.XmlSchemaContentProcessing : Enum {
public int value__
public XmlSchemaContentProcessing None
public XmlSchemaContentProcessing Skip
public XmlSchemaContentProcessing Lax
public XmlSchemaContentProcessing Strict
}
public System.Xml.Schema.XmlSchemaContentType : Enum {
public int value__
public XmlSchemaContentType TextOnly
public XmlSchemaContentType Empty
public XmlSchemaContentType ElementOnly
public XmlSchemaContentType Mixed
}
public System.Xml.Schema.XmlSchemaDatatype : object {
public Type ValueType
public XmlTokenizedType TokenizedType
public XmlSchemaDatatypeVariety Variety
public XmlTypeCode TypeCode
internal bool HasLexicalFacets
internal bool HasValueFacets
internal XmlValueConverter ValueConverter
internal RestrictionFacets Restriction
internal FacetsChecker FacetsChecker
internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet
internal string TypeCodeString
public Type get_ValueType()
public XmlTokenizedType get_TokenizedType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
public XmlSchemaDatatypeVariety get_Variety()
public object ChangeType(object value, Type targetType)
public object ChangeType(object value, Type targetType, IXmlNamespaceResolver namespaceResolver)
public XmlTypeCode get_TypeCode()
public bool IsDerivedFrom(XmlSchemaDatatype datatype)
internal bool get_HasLexicalFacets()
internal bool get_HasValueFacets()
internal XmlValueConverter get_ValueConverter()
internal RestrictionFacets get_Restriction()
internal void set_Restriction(RestrictionFacets value)
internal int Compare(object value1, object value2)
internal object ParseValue(string s, Type typDest, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, bool createAtomicValue)
internal Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue)
internal Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver namespaceResolver, Object& typedValue)
internal FacetsChecker get_FacetsChecker()
internal XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet()
internal XmlSchemaDatatype DeriveByRestriction(XmlSchemaObjectCollection facets, XmlNameTable nameTable, XmlSchemaType schemaType)
internal XmlSchemaDatatype DeriveByList(XmlSchemaType schemaType)
internal void VerifySchemaValid(XmlSchemaObjectTable notations, XmlSchemaObject caller)
internal bool IsEqual(object o1, object o2)
internal bool IsComparable(XmlSchemaDatatype dtype)
internal string get_TypeCodeString()
internal string TypeCodeToString(XmlTypeCode typeCode)
internal string ConcatenatedToString(object value)
internal XmlSchemaDatatype FromXmlTokenizedType(XmlTokenizedType token)
internal XmlSchemaDatatype FromXmlTokenizedTypeXsd(XmlTokenizedType token)
internal XmlSchemaDatatype FromXdrName(string name)
internal XmlSchemaDatatype DeriveByUnion(XmlSchemaSimpleType[] types, XmlSchemaType schemaType)
internal string XdrCanonizeUri(string uri, XmlNameTable nameTable, SchemaNames schemaNames)
}
public System.Xml.Schema.XmlSchemaDatatypeVariety : Enum {
public int value__
public XmlSchemaDatatypeVariety Atomic
public XmlSchemaDatatypeVariety List
public XmlSchemaDatatypeVariety Union
}
public System.Xml.Schema.XmlSchemaDerivationMethod : Enum {
public int value__
public XmlSchemaDerivationMethod Empty
public XmlSchemaDerivationMethod Substitution
public XmlSchemaDerivationMethod Extension
public XmlSchemaDerivationMethod Restriction
public XmlSchemaDerivationMethod List
public XmlSchemaDerivationMethod Union
public XmlSchemaDerivationMethod All
public XmlSchemaDerivationMethod None
}
public System.Xml.Schema.XmlSchemaDocumentation : XmlSchemaObject {
private string source
private string language
private XmlNode[] markup
private XmlSchemaSimpleType languageType
public string Source
public string Language
public XmlNode[] Markup
public string get_Source()
public void set_Source(string value)
public string get_Language()
public void set_Language(string value)
public XmlNode[] get_Markup()
public void set_Markup(XmlNode[] value)
}
public System.Xml.Schema.XmlSchemaElement : XmlSchemaParticle {
private bool isAbstract
private bool hasAbstractAttribute
private bool isNillable
private bool hasNillableAttribute
private bool isLocalTypeDerivationChecked
private XmlSchemaDerivationMethod block
private XmlSchemaDerivationMethod final
private XmlSchemaForm form
private string defaultValue
private string fixedValue
private string name
private XmlQualifiedName refName
private XmlQualifiedName substitutionGroup
private XmlQualifiedName typeName
private XmlSchemaType type
private XmlQualifiedName qualifiedName
private XmlSchemaType elementType
private XmlSchemaDerivationMethod blockResolved
private XmlSchemaDerivationMethod finalResolved
private XmlSchemaObjectCollection constraints
private SchemaElementDecl elementDecl
public bool IsAbstract
public XmlSchemaDerivationMethod Block
public string DefaultValue
public XmlSchemaDerivationMethod Final
public string FixedValue
public XmlSchemaForm Form
public string Name
public bool IsNillable
internal bool HasNillableAttribute
internal bool HasAbstractAttribute
public XmlQualifiedName RefName
public XmlQualifiedName SubstitutionGroup
public XmlQualifiedName SchemaTypeName
public XmlSchemaType SchemaType
public XmlSchemaObjectCollection Constraints
public XmlQualifiedName QualifiedName
public object ElementType
public XmlSchemaType ElementSchemaType
public XmlSchemaDerivationMethod BlockResolved
public XmlSchemaDerivationMethod FinalResolved
internal bool HasDefault
internal bool HasConstraints
internal bool IsLocalTypeDerivationChecked
internal SchemaElementDecl ElementDecl
internal string NameAttribute
internal string NameString
public bool get_IsAbstract()
public void set_IsAbstract(bool value)
public XmlSchemaDerivationMethod get_Block()
public void set_Block(XmlSchemaDerivationMethod value)
public string get_DefaultValue()
public void set_DefaultValue(string value)
public XmlSchemaDerivationMethod get_Final()
public void set_Final(XmlSchemaDerivationMethod value)
public string get_FixedValue()
public void set_FixedValue(string value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public string get_Name()
public void set_Name(string value)
public bool get_IsNillable()
public void set_IsNillable(bool value)
internal bool get_HasNillableAttribute()
internal bool get_HasAbstractAttribute()
public XmlQualifiedName get_RefName()
public void set_RefName(XmlQualifiedName value)
public XmlQualifiedName get_SubstitutionGroup()
public void set_SubstitutionGroup(XmlQualifiedName value)
public XmlQualifiedName get_SchemaTypeName()
public void set_SchemaTypeName(XmlQualifiedName value)
public XmlSchemaType get_SchemaType()
public void set_SchemaType(XmlSchemaType value)
public XmlSchemaObjectCollection get_Constraints()
public XmlQualifiedName get_QualifiedName()
public object get_ElementType()
public XmlSchemaType get_ElementSchemaType()
public XmlSchemaDerivationMethod get_BlockResolved()
public XmlSchemaDerivationMethod get_FinalResolved()
internal XmlReader Validate(XmlReader reader, XmlResolver resolver, XmlSchemaSet schemaSet, ValidationEventHandler valEventHandler)
internal void SetQualifiedName(XmlQualifiedName value)
internal void SetElementType(XmlSchemaType value)
internal void SetBlockResolved(XmlSchemaDerivationMethod value)
internal void SetFinalResolved(XmlSchemaDerivationMethod value)
internal bool get_HasDefault()
internal bool get_HasConstraints()
internal bool get_IsLocalTypeDerivationChecked()
internal void set_IsLocalTypeDerivationChecked(bool value)
internal SchemaElementDecl get_ElementDecl()
internal void set_ElementDecl(SchemaElementDecl value)
internal string get_NameAttribute()
internal void set_NameAttribute(string value)
internal string get_NameString()
internal XmlSchemaObject Clone()
internal XmlSchemaObject Clone(XmlSchema parentSchema)
}
public System.Xml.Schema.XmlSchemaException : SystemException {
private string res
private String[] args
private string sourceUri
private int lineNumber
private int linePosition
private XmlSchemaObject sourceSchemaObject
private string message
internal string GetRes
internal String[] Args
public string SourceUri
public int LineNumber
public int LinePosition
public XmlSchemaObject SourceSchemaObject
public string Message
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, Exception innerException, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args)
internal void .ctor(string res, string arg)
internal void .ctor(string res, string arg, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, XmlSchemaObject source)
internal void .ctor(string res, string arg, XmlSchemaObject source)
internal void .ctor(string res, String[] args, XmlSchemaObject source)
internal void .ctor(string res, String[] args, Exception innerException, string sourceUri, int lineNumber, int linePosition, XmlSchemaObject source)
internal string CreateMessage(string res, String[] args)
internal string get_GetRes()
internal String[] get_Args()
public string get_SourceUri()
public int get_LineNumber()
public int get_LinePosition()
public XmlSchemaObject get_SourceSchemaObject()
internal void SetSource(string sourceUri, int lineNumber, int linePosition)
internal void SetSchemaObject(XmlSchemaObject source)
internal void SetSource(XmlSchemaObject source)
internal void SetResourceId(string resourceId)
public string get_Message()
}
public System.Xml.Schema.XmlSchemaExternal : XmlSchemaObject {
private string location
private Uri baseUri
private XmlSchema schema
private string id
private XmlAttribute[] moreAttributes
private Compositor compositor
public string SchemaLocation
public XmlSchema Schema
public string Id
public XmlAttribute[] UnhandledAttributes
internal Uri BaseUri
internal string IdAttribute
internal Compositor Compositor
public string get_SchemaLocation()
public void set_SchemaLocation(string value)
public XmlSchema get_Schema()
public void set_Schema(XmlSchema value)
public string get_Id()
public void set_Id(string value)
public XmlAttribute[] get_UnhandledAttributes()
public void set_UnhandledAttributes(XmlAttribute[] value)
internal Uri get_BaseUri()
internal void set_BaseUri(Uri value)
internal string get_IdAttribute()
internal void set_IdAttribute(string value)
internal void SetUnhandledAttributes(XmlAttribute[] moreAttributes)
internal Compositor get_Compositor()
internal void set_Compositor(Compositor value)
}
public System.Xml.Schema.XmlSchemaFacet : XmlSchemaAnnotated {
private string value
private bool isFixed
private FacetType facetType
public string Value
public bool IsFixed
internal FacetType FacetType
public string get_Value()
public void set_Value(string value)
public bool get_IsFixed()
public void set_IsFixed(bool value)
internal FacetType get_FacetType()
internal void set_FacetType(FacetType value)
}
public System.Xml.Schema.XmlSchemaForm : Enum {
public int value__
public XmlSchemaForm None
public XmlSchemaForm Qualified
public XmlSchemaForm Unqualified
}
public System.Xml.Schema.XmlSchemaGroup : XmlSchemaAnnotated {
private string name
private XmlSchemaGroupBase particle
private XmlSchemaParticle canonicalParticle
private XmlQualifiedName qname
private XmlSchemaGroup redefined
private int selfReferenceCount
public string Name
public XmlSchemaGroupBase Particle
public XmlQualifiedName QualifiedName
internal XmlSchemaParticle CanonicalParticle
internal XmlSchemaGroup Redefined
internal int SelfReferenceCount
internal string NameAttribute
public string get_Name()
public void set_Name(string value)
public XmlSchemaGroupBase get_Particle()
public void set_Particle(XmlSchemaGroupBase value)
public XmlQualifiedName get_QualifiedName()
internal XmlSchemaParticle get_CanonicalParticle()
internal void set_CanonicalParticle(XmlSchemaParticle value)
internal XmlSchemaGroup get_Redefined()
internal void set_Redefined(XmlSchemaGroup value)
internal int get_SelfReferenceCount()
internal void set_SelfReferenceCount(int value)
internal string get_NameAttribute()
internal void set_NameAttribute(string value)
internal void SetQualifiedName(XmlQualifiedName value)
internal XmlSchemaObject Clone()
internal XmlSchemaObject Clone(XmlSchema parentSchema)
}
public System.Xml.Schema.XmlSchemaGroupBase : XmlSchemaParticle {
public XmlSchemaObjectCollection Items
public XmlSchemaObjectCollection get_Items()
internal void SetItems(XmlSchemaObjectCollection newItems)
}
public System.Xml.Schema.XmlSchemaGroupRef : XmlSchemaParticle {
private XmlQualifiedName refName
private XmlSchemaGroupBase particle
private XmlSchemaGroup refined
public XmlQualifiedName RefName
public XmlSchemaGroupBase Particle
internal XmlSchemaGroup Redefined
public XmlQualifiedName get_RefName()
public void set_RefName(XmlQualifiedName value)
public XmlSchemaGroupBase get_Particle()
internal void SetParticle(XmlSchemaGroupBase value)
internal XmlSchemaGroup get_Redefined()
internal void set_Redefined(XmlSchemaGroup value)
}
public System.Xml.Schema.XmlSchemaIdentityConstraint : XmlSchemaAnnotated {
private string name
private XmlSchemaXPath selector
private XmlSchemaObjectCollection fields
private XmlQualifiedName qualifiedName
private CompiledIdentityConstraint compiledConstraint
public string Name
public XmlSchemaXPath Selector
public XmlSchemaObjectCollection Fields
public XmlQualifiedName QualifiedName
internal CompiledIdentityConstraint CompiledConstraint
internal string NameAttribute
public string get_Name()
public void set_Name(string value)
public XmlSchemaXPath get_Selector()
public void set_Selector(XmlSchemaXPath value)
public XmlSchemaObjectCollection get_Fields()
public XmlQualifiedName get_QualifiedName()
internal void SetQualifiedName(XmlQualifiedName value)
internal CompiledIdentityConstraint get_CompiledConstraint()
internal void set_CompiledConstraint(CompiledIdentityConstraint value)
internal string get_NameAttribute()
internal void set_NameAttribute(string value)
}
public System.Xml.Schema.XmlSchemaImport : XmlSchemaExternal {
private string ns
private XmlSchemaAnnotation annotation
public string Namespace
public XmlSchemaAnnotation Annotation
public string get_Namespace()
public void set_Namespace(string value)
public XmlSchemaAnnotation get_Annotation()
public void set_Annotation(XmlSchemaAnnotation value)
internal void AddAnnotation(XmlSchemaAnnotation annotation)
}
public System.Xml.Schema.XmlSchemaInclude : XmlSchemaExternal {
private XmlSchemaAnnotation annotation
public XmlSchemaAnnotation Annotation
public XmlSchemaAnnotation get_Annotation()
public void set_Annotation(XmlSchemaAnnotation value)
internal void AddAnnotation(XmlSchemaAnnotation annotation)
}
public System.Xml.Schema.XmlSchemaInference : object {
internal XmlQualifiedName ST_boolean
internal XmlQualifiedName ST_byte
internal XmlQualifiedName ST_unsignedByte
internal XmlQualifiedName ST_short
internal XmlQualifiedName ST_unsignedShort
internal XmlQualifiedName ST_int
internal XmlQualifiedName ST_unsignedInt
internal XmlQualifiedName ST_long
internal XmlQualifiedName ST_unsignedLong
internal XmlQualifiedName ST_integer
internal XmlQualifiedName ST_decimal
internal XmlQualifiedName ST_float
internal XmlQualifiedName ST_double
internal XmlQualifiedName ST_duration
internal XmlQualifiedName ST_dateTime
internal XmlQualifiedName ST_time
internal XmlQualifiedName ST_date
internal XmlQualifiedName ST_gYearMonth
internal XmlQualifiedName ST_string
internal XmlQualifiedName ST_anySimpleType
internal XmlQualifiedName[] SimpleTypes
internal short HC_ST_boolean
internal short HC_ST_byte
internal short HC_ST_unsignedByte
internal short HC_ST_short
internal short HC_ST_unsignedShort
internal short HC_ST_int
internal short HC_ST_unsignedInt
internal short HC_ST_long
internal short HC_ST_unsignedLong
internal short HC_ST_integer
internal short HC_ST_decimal
internal short HC_ST_float
internal short HC_ST_double
internal short HC_ST_duration
internal short HC_ST_dateTime
internal short HC_ST_time
internal short HC_ST_date
internal short HC_ST_gYearMonth
internal short HC_ST_string
internal short HC_ST_Count
internal int TF_boolean
internal int TF_byte
internal int TF_unsignedByte
internal int TF_short
internal int TF_unsignedShort
internal int TF_int
internal int TF_unsignedInt
internal int TF_long
internal int TF_unsignedLong
internal int TF_integer
internal int TF_decimal
internal int TF_float
internal int TF_double
internal int TF_duration
internal int TF_dateTime
internal int TF_time
internal int TF_date
internal int TF_gYearMonth
internal int TF_string
private XmlSchema rootSchema
private XmlSchemaSet schemaSet
private XmlReader xtr
private NameTable nametable
private string TargetNamespace
private XmlNamespaceManager NamespaceManager
private ArrayList schemaList
private InferenceOption occurrence
private InferenceOption typeInference
public InferenceOption Occurrence
public InferenceOption TypeInference
public void set_Occurrence(InferenceOption value)
public InferenceOption get_Occurrence()
public void set_TypeInference(InferenceOption value)
public InferenceOption get_TypeInference()
public XmlSchemaSet InferSchema(XmlReader instanceDocument)
public XmlSchemaSet InferSchema(XmlReader instanceDocument, XmlSchemaSet schemas)
internal XmlSchemaSet InferSchema1(XmlReader instanceDocument, XmlSchemaSet schemas)
private XmlSchemaAttribute AddAttribute(string localName, string prefix, string childURI, string attrValue, bool bCreatingNewType, XmlSchema parentSchema, XmlSchemaObjectCollection addLocation, XmlSchemaObjectTable compiledAttributes)
private XmlSchema CreateXmlSchema(string targetNS)
private XmlSchemaElement AddElement(string localName, string prefix, string childURI, XmlSchema parentSchema, XmlSchemaObjectCollection addLocation, int positionWithinCollection)
internal void InferElement(XmlSchemaElement xse, bool bCreatingNewType, XmlSchema parentSchema)
private XmlSchemaSimpleContentExtension CheckSimpleContentExtension(XmlSchemaComplexType ct)
private XmlSchemaType GetEffectiveSchemaType(XmlSchemaElement elem, bool bCreatingNewType)
internal XmlSchemaElement FindMatchingElement(bool bCreatingNewType, XmlReader xtr, XmlSchemaComplexType ct, Int32& lastUsedSeqItem, Boolean& bParticleChanged, XmlSchema parentSchema, bool setMaxoccurs)
internal void ProcessAttributes(XmlSchemaElement& xse, XmlSchemaType effectiveSchemaType, bool bCreatingNewType, XmlSchema parentSchema)
private void MoveAttributes(XmlSchemaSimpleContentExtension scExtension, XmlSchemaComplexType ct)
private void MoveAttributes(XmlSchemaComplexType ct, XmlSchemaSimpleContentExtension simpleContentExtension, bool bCreatingNewType)
internal XmlSchemaAttribute FindAttribute(ICollection attributes, string attrName)
internal XmlSchemaElement FindGlobalElement(string namespaceURI, string localName, XmlSchema& parentSchema)
internal XmlSchemaElement FindElement(XmlSchemaObjectCollection elements, string elementName)
internal XmlSchemaAttribute FindAttributeRef(ICollection attributes, string attributeName, string nsURI)
internal XmlSchemaElement FindElementRef(XmlSchemaObjectCollection elements, string elementName, string nsURI)
internal void MakeExistingAttributesOptional(XmlSchemaComplexType ct, XmlSchemaObjectCollection attributesInInstance)
private void SwitchUseToOptional(XmlSchemaObjectCollection attributes, XmlSchemaObjectCollection attributesInInstance)
internal XmlQualifiedName RefineSimpleType(string s, Int32& iTypeFlags)
internal int InferSimpleType(string s, Boolean& bNeedsRangeCheck)
internal int DateTime(string s, bool bDate, bool bTime)
private XmlSchemaElement CreateNewElementforChoice(XmlSchemaElement copyElement)
private int GetSchemaType(XmlQualifiedName qname)
internal void SetMinMaxOccurs(XmlSchemaElement el, bool setMaxOccurs)
}
public System.Xml.Schema.XmlSchemaInferenceException : XmlSchemaException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, Exception innerException, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args)
internal void .ctor(string res, string arg)
internal void .ctor(string res, string arg, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, int lineNumber, int linePosition)
}
public System.Xml.Schema.XmlSchemaInfo : object {
private bool isDefault
private bool isNil
private XmlSchemaElement schemaElement
private XmlSchemaAttribute schemaAttribute
private XmlSchemaType schemaType
private XmlSchemaSimpleType memberType
private XmlSchemaValidity validity
private XmlSchemaContentType contentType
public XmlSchemaValidity Validity
public bool IsDefault
public bool IsNil
public XmlSchemaSimpleType MemberType
public XmlSchemaType SchemaType
public XmlSchemaElement SchemaElement
public XmlSchemaAttribute SchemaAttribute
public XmlSchemaContentType ContentType
internal XmlSchemaType XmlType
internal bool HasDefaultValue
internal bool IsUnionType
internal void .ctor(XmlSchemaValidity validity)
public XmlSchemaValidity get_Validity()
public void set_Validity(XmlSchemaValidity value)
public bool get_IsDefault()
public void set_IsDefault(bool value)
public bool get_IsNil()
public void set_IsNil(bool value)
public XmlSchemaSimpleType get_MemberType()
public void set_MemberType(XmlSchemaSimpleType value)
public XmlSchemaType get_SchemaType()
public void set_SchemaType(XmlSchemaType value)
public XmlSchemaElement get_SchemaElement()
public void set_SchemaElement(XmlSchemaElement value)
public XmlSchemaAttribute get_SchemaAttribute()
public void set_SchemaAttribute(XmlSchemaAttribute value)
public XmlSchemaContentType get_ContentType()
public void set_ContentType(XmlSchemaContentType value)
internal XmlSchemaType get_XmlType()
internal bool get_HasDefaultValue()
internal bool get_IsUnionType()
internal void Clear()
}
public System.Xml.Schema.XmlSchemaKeyref : XmlSchemaIdentityConstraint {
private XmlQualifiedName refer
public XmlQualifiedName Refer
public XmlQualifiedName get_Refer()
public void set_Refer(XmlQualifiedName value)
}
public System.Xml.Schema.XmlSchemaNotation : XmlSchemaAnnotated {
private string name
private string publicId
private string systemId
private XmlQualifiedName qname
public string Name
public string Public
public string System
internal XmlQualifiedName QualifiedName
internal string NameAttribute
public string get_Name()
public void set_Name(string value)
public string get_Public()
public void set_Public(string value)
public string get_System()
public void set_System(string value)
internal XmlQualifiedName get_QualifiedName()
internal void set_QualifiedName(XmlQualifiedName value)
internal string get_NameAttribute()
internal void set_NameAttribute(string value)
}
public System.Xml.Schema.XmlSchemaObject : object {
private int lineNum
private int linePos
private string sourceUri
private XmlSerializerNamespaces namespaces
private XmlSchemaObject parent
private bool isProcessing
public int LineNumber
public int LinePosition
public string SourceUri
public XmlSchemaObject Parent
public XmlSerializerNamespaces Namespaces
internal string IdAttribute
internal string NameAttribute
internal bool IsProcessing
public int get_LineNumber()
public void set_LineNumber(int value)
public int get_LinePosition()
public void set_LinePosition(int value)
public string get_SourceUri()
public void set_SourceUri(string value)
public XmlSchemaObject get_Parent()
public void set_Parent(XmlSchemaObject value)
public XmlSerializerNamespaces get_Namespaces()
public void set_Namespaces(XmlSerializerNamespaces value)
internal void OnAdd(XmlSchemaObjectCollection container, object item)
internal void OnRemove(XmlSchemaObjectCollection container, object item)
internal void OnClear(XmlSchemaObjectCollection container)
internal string get_IdAttribute()
internal void set_IdAttribute(string value)
internal void SetUnhandledAttributes(XmlAttribute[] moreAttributes)
internal void AddAnnotation(XmlSchemaAnnotation annotation)
internal string get_NameAttribute()
internal void set_NameAttribute(string value)
internal bool get_IsProcessing()
internal void set_IsProcessing(bool value)
internal XmlSchemaObject Clone()
}
public System.Xml.Schema.XmlSchemaObjectCollection : CollectionBase {
private XmlSchemaObject parent
public XmlSchemaObject Item
public void .ctor(XmlSchemaObject parent)
public XmlSchemaObject get_Item(int index)
public void set_Item(int index, XmlSchemaObject value)
public XmlSchemaObjectEnumerator GetEnumerator()
public int Add(XmlSchemaObject item)
public void Insert(int index, XmlSchemaObject item)
public int IndexOf(XmlSchemaObject item)
public bool Contains(XmlSchemaObject item)
public void Remove(XmlSchemaObject item)
public void CopyTo(XmlSchemaObject[] array, int index)
protected void OnInsert(int index, object item)
protected void OnSet(int index, object oldValue, object newValue)
protected void OnClear()
protected void OnRemove(int index, object item)
internal XmlSchemaObjectCollection Clone()
private void Add(XmlSchemaObjectCollection collToAdd)
}
public System.Xml.Schema.XmlSchemaObjectEnumerator : object {
private IEnumerator enumerator
public XmlSchemaObject Current
private object System.Collections.IEnumerator.Current
internal void .ctor(IEnumerator enumerator)
public void Reset()
public bool MoveNext()
public XmlSchemaObject get_Current()
private void System.Collections.IEnumerator.Reset()
private bool System.Collections.IEnumerator.MoveNext()
private object System.Collections.IEnumerator.get_Current()
}
public System.Xml.Schema.XmlSchemaObjectTable : object {
private Dictionary`2<XmlQualifiedName, XmlSchemaObject> table
private List`1<XmlSchemaObjectEntry> entries
public int Count
public XmlSchemaObject Item
public ICollection Names
public ICollection Values
internal void Add(XmlQualifiedName name, XmlSchemaObject value)
internal void Insert(XmlQualifiedName name, XmlSchemaObject value)
internal void Replace(XmlQualifiedName name, XmlSchemaObject value)
internal void Clear()
internal void Remove(XmlQualifiedName name)
private int FindIndexByValue(XmlSchemaObject xso)
public int get_Count()
public bool Contains(XmlQualifiedName name)
public XmlSchemaObject get_Item(XmlQualifiedName name)
public ICollection get_Names()
public ICollection get_Values()
public IDictionaryEnumerator GetEnumerator()
}
public System.Xml.Schema.XmlSchemaParticle : XmlSchemaAnnotated {
private decimal minOccurs
private decimal maxOccurs
private Occurs flags
internal XmlSchemaParticle Empty
public string MinOccursString
public string MaxOccursString
public decimal MinOccurs
public decimal MaxOccurs
internal bool IsEmpty
internal bool IsMultipleOccurrence
internal string NameString
public string get_MinOccursString()
public void set_MinOccursString(string value)
public string get_MaxOccursString()
public void set_MaxOccursString(string value)
public decimal get_MinOccurs()
public void set_MinOccurs(decimal value)
public decimal get_MaxOccurs()
public void set_MaxOccurs(decimal value)
internal bool get_IsEmpty()
internal bool get_IsMultipleOccurrence()
internal string get_NameString()
internal XmlQualifiedName GetQualifiedName()
}
public System.Xml.Schema.XmlSchemaRedefine : XmlSchemaExternal {
private XmlSchemaObjectCollection items
private XmlSchemaObjectTable attributeGroups
private XmlSchemaObjectTable types
private XmlSchemaObjectTable groups
public XmlSchemaObjectCollection Items
public XmlSchemaObjectTable AttributeGroups
public XmlSchemaObjectTable SchemaTypes
public XmlSchemaObjectTable Groups
public XmlSchemaObjectCollection get_Items()
public XmlSchemaObjectTable get_AttributeGroups()
public XmlSchemaObjectTable get_SchemaTypes()
public XmlSchemaObjectTable get_Groups()
internal void AddAnnotation(XmlSchemaAnnotation annotation)
}
public System.Xml.Schema.XmlSchemaSequence : XmlSchemaGroupBase {
private XmlSchemaObjectCollection items
public XmlSchemaObjectCollection Items
internal bool IsEmpty
public XmlSchemaObjectCollection get_Items()
internal bool get_IsEmpty()
internal void SetItems(XmlSchemaObjectCollection newItems)
}
public System.Xml.Schema.XmlSchemaSet : object {
private XmlNameTable nameTable
private SchemaNames schemaNames
private SortedList schemas
private ValidationEventHandler internalEventHandler
private ValidationEventHandler eventHandler
private bool isCompiled
private Hashtable schemaLocations
private Hashtable chameleonSchemas
private Hashtable targetNamespaces
private bool compileAll
private SchemaInfo cachedCompiledInfo
private XmlReaderSettings readerSettings
private XmlSchema schemaForSchema
private XmlSchemaCompilationSettings compilationSettings
internal XmlSchemaObjectTable elements
internal XmlSchemaObjectTable attributes
internal XmlSchemaObjectTable schemaTypes
internal XmlSchemaObjectTable substitutionGroups
private XmlSchemaObjectTable typeExtensions
private object internalSyncObject
internal object InternalSyncObject
public XmlNameTable NameTable
public bool IsCompiled
public XmlResolver XmlResolver
public XmlSchemaCompilationSettings CompilationSettings
public int Count
public XmlSchemaObjectTable GlobalElements
public XmlSchemaObjectTable GlobalAttributes
public XmlSchemaObjectTable GlobalTypes
internal XmlSchemaObjectTable SubstitutionGroups
internal Hashtable SchemaLocations
internal XmlSchemaObjectTable TypeExtensions
internal SchemaInfo CompiledInfo
internal XmlReaderSettings ReaderSettings
internal SortedList SortedSchemas
internal bool CompileAll
internal object get_InternalSyncObject()
public void .ctor(XmlNameTable nameTable)
public XmlNameTable get_NameTable()
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
public bool get_IsCompiled()
public void set_XmlResolver(XmlResolver value)
public XmlSchemaCompilationSettings get_CompilationSettings()
public void set_CompilationSettings(XmlSchemaCompilationSettings value)
public int get_Count()
public XmlSchemaObjectTable get_GlobalElements()
public XmlSchemaObjectTable get_GlobalAttributes()
public XmlSchemaObjectTable get_GlobalTypes()
internal XmlSchemaObjectTable get_SubstitutionGroups()
internal Hashtable get_SchemaLocations()
internal XmlSchemaObjectTable get_TypeExtensions()
public XmlSchema Add(string targetNamespace, string schemaUri)
public XmlSchema Add(string targetNamespace, XmlReader schemaDocument)
public void Add(XmlSchemaSet schemas)
public XmlSchema Add(XmlSchema schema)
public XmlSchema Remove(XmlSchema schema)
public bool RemoveRecursive(XmlSchema schemaToRemove)
public bool Contains(string targetNamespace)
public bool Contains(XmlSchema schema)
public void Compile()
public XmlSchema Reprocess(XmlSchema schema)
public void CopyTo(XmlSchema[] schemas, int index)
public ICollection Schemas()
public ICollection Schemas(string targetNamespace)
private XmlSchema Add(string targetNamespace, XmlSchema schema)
internal void Add(string targetNamespace, XmlReader reader, Hashtable validatedNamespaces)
internal XmlSchema FindSchemaByNSAndUrl(Uri schemaUri, string ns, DictionaryEntry[] locationsTable)
private void SetDtdProcessing(XmlReader reader)
private void AddSchemaToSet(XmlSchema schema)
private void ProcessNewSubstitutionGroups(XmlSchemaObjectTable substitutionGroupsTable, bool resolve)
private void ResolveSubstitutionGroup(XmlSchemaSubstitutionGroup substitutionGroup, XmlSchemaObjectTable substTable)
internal XmlSchema Remove(XmlSchema schema, bool forceCompile)
private void ClearTables()
internal bool PreprocessSchema(XmlSchema& schema, string targetNamespace)
internal XmlSchema ParseSchema(string targetNamespace, XmlReader reader)
internal void CopyFromCompiledSet(XmlSchemaSet otherSet)
internal SchemaInfo get_CompiledInfo()
internal XmlReaderSettings get_ReaderSettings()
internal XmlResolver GetResolver()
internal ValidationEventHandler GetEventHandler()
internal SchemaNames GetSchemaNames(XmlNameTable nt)
internal bool IsSchemaLoaded(Uri schemaUri, string targetNamespace, XmlSchema& schema)
internal bool GetSchemaByUri(Uri schemaUri, XmlSchema& schema)
internal string GetTargetNamespace(XmlSchema schema)
internal SortedList get_SortedSchemas()
internal bool get_CompileAll()
private void RemoveSchemaFromCaches(XmlSchema schema)
private void RemoveSchemaFromGlobalTables(XmlSchema schema)
private bool AddToTable(XmlSchemaObjectTable table, XmlQualifiedName qname, XmlSchemaObject item)
private void VerifyTables()
private void InternalValidationCallback(object sender, ValidationEventArgs e)
private void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity)
}
public System.Xml.Schema.XmlSchemaSimpleContent : XmlSchemaContentModel {
private XmlSchemaContent content
public XmlSchemaContent Content
public XmlSchemaContent get_Content()
public void set_Content(XmlSchemaContent value)
}
public System.Xml.Schema.XmlSchemaSimpleContentExtension : XmlSchemaContent {
private XmlSchemaObjectCollection attributes
private XmlSchemaAnyAttribute anyAttribute
private XmlQualifiedName baseTypeName
public XmlQualifiedName BaseTypeName
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
internal void SetAttributes(XmlSchemaObjectCollection newAttributes)
}
public System.Xml.Schema.XmlSchemaSimpleContentRestriction : XmlSchemaContent {
private XmlQualifiedName baseTypeName
private XmlSchemaSimpleType baseType
private XmlSchemaObjectCollection facets
private XmlSchemaObjectCollection attributes
private XmlSchemaAnyAttribute anyAttribute
public XmlQualifiedName BaseTypeName
public XmlSchemaSimpleType BaseType
public XmlSchemaObjectCollection Facets
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaSimpleType get_BaseType()
public void set_BaseType(XmlSchemaSimpleType value)
public XmlSchemaObjectCollection get_Facets()
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
internal void SetAttributes(XmlSchemaObjectCollection newAttributes)
}
public System.Xml.Schema.XmlSchemaSimpleType : XmlSchemaType {
private XmlSchemaSimpleTypeContent content
public XmlSchemaSimpleTypeContent Content
internal XmlQualifiedName DerivedFrom
public XmlSchemaSimpleTypeContent get_Content()
public void set_Content(XmlSchemaSimpleTypeContent value)
internal XmlQualifiedName get_DerivedFrom()
internal XmlSchemaObject Clone()
}
public System.Xml.Schema.XmlSchemaSimpleTypeList : XmlSchemaSimpleTypeContent {
private XmlQualifiedName itemTypeName
private XmlSchemaSimpleType itemType
private XmlSchemaSimpleType baseItemType
public XmlQualifiedName ItemTypeName
public XmlSchemaSimpleType ItemType
public XmlSchemaSimpleType BaseItemType
public XmlQualifiedName get_ItemTypeName()
public void set_ItemTypeName(XmlQualifiedName value)
public XmlSchemaSimpleType get_ItemType()
public void set_ItemType(XmlSchemaSimpleType value)
public XmlSchemaSimpleType get_BaseItemType()
public void set_BaseItemType(XmlSchemaSimpleType value)
internal XmlSchemaObject Clone()
}
public System.Xml.Schema.XmlSchemaSimpleTypeRestriction : XmlSchemaSimpleTypeContent {
private XmlQualifiedName baseTypeName
private XmlSchemaSimpleType baseType
private XmlSchemaObjectCollection facets
public XmlQualifiedName BaseTypeName
public XmlSchemaSimpleType BaseType
public XmlSchemaObjectCollection Facets
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaSimpleType get_BaseType()
public void set_BaseType(XmlSchemaSimpleType value)
public XmlSchemaObjectCollection get_Facets()
internal XmlSchemaObject Clone()
}
public System.Xml.Schema.XmlSchemaSimpleTypeUnion : XmlSchemaSimpleTypeContent {
private XmlSchemaObjectCollection baseTypes
private XmlQualifiedName[] memberTypes
private XmlSchemaSimpleType[] baseMemberTypes
public XmlSchemaObjectCollection BaseTypes
public XmlQualifiedName[] MemberTypes
public XmlSchemaSimpleType[] BaseMemberTypes
public XmlSchemaObjectCollection get_BaseTypes()
public XmlQualifiedName[] get_MemberTypes()
public void set_MemberTypes(XmlQualifiedName[] value)
public XmlSchemaSimpleType[] get_BaseMemberTypes()
internal void SetBaseMemberTypes(XmlSchemaSimpleType[] baseMemberTypes)
internal XmlSchemaObject Clone()
}
internal System.Xml.Schema.XmlSchemaSubstitutionGroup : XmlSchemaObject {
private ArrayList membersList
private XmlQualifiedName examplar
internal ArrayList Members
internal XmlQualifiedName Examplar
internal ArrayList get_Members()
internal XmlQualifiedName get_Examplar()
internal void set_Examplar(XmlQualifiedName value)
}
internal System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat : XmlSchemaSubstitutionGroup {
private XmlSchemaChoice choice
internal XmlSchemaChoice Choice
internal XmlSchemaChoice get_Choice()
}
public System.Xml.Schema.XmlSchemaType : XmlSchemaAnnotated {
private string name
private XmlSchemaDerivationMethod final
private XmlSchemaDerivationMethod derivedBy
private XmlSchemaType baseSchemaType
private XmlSchemaDatatype datatype
private XmlSchemaDerivationMethod finalResolved
private SchemaElementDecl modreq(System.Runtime.CompilerServices.IsVolatile) elementDecl
private XmlQualifiedName modreq(System.Runtime.CompilerServices.IsVolatile) qname
private XmlSchemaType redefined
private XmlSchemaContentType contentType
public string Name
public XmlSchemaDerivationMethod Final
public XmlQualifiedName QualifiedName
public XmlSchemaDerivationMethod FinalResolved
public object BaseSchemaType
public XmlSchemaType BaseXmlSchemaType
public XmlSchemaDerivationMethod DerivedBy
public XmlSchemaDatatype Datatype
public bool IsMixed
public XmlTypeCode TypeCode
internal XmlValueConverter ValueConverter
internal XmlSchemaContentType SchemaContentType
internal SchemaElementDecl ElementDecl
internal XmlSchemaType Redefined
internal XmlQualifiedName DerivedFrom
internal string NameAttribute
public XmlSchemaSimpleType GetBuiltInSimpleType(XmlQualifiedName qualifiedName)
public XmlSchemaSimpleType GetBuiltInSimpleType(XmlTypeCode typeCode)
public XmlSchemaComplexType GetBuiltInComplexType(XmlTypeCode typeCode)
public XmlSchemaComplexType GetBuiltInComplexType(XmlQualifiedName qualifiedName)
public string get_Name()
public void set_Name(string value)
public XmlSchemaDerivationMethod get_Final()
public void set_Final(XmlSchemaDerivationMethod value)
public XmlQualifiedName get_QualifiedName()
public XmlSchemaDerivationMethod get_FinalResolved()
public object get_BaseSchemaType()
public XmlSchemaType get_BaseXmlSchemaType()
public XmlSchemaDerivationMethod get_DerivedBy()
public XmlSchemaDatatype get_Datatype()
public bool get_IsMixed()
public void set_IsMixed(bool value)
public XmlTypeCode get_TypeCode()
internal XmlValueConverter get_ValueConverter()
internal XmlReader Validate(XmlReader reader, XmlResolver resolver, XmlSchemaSet schemaSet, ValidationEventHandler valEventHandler)
internal XmlSchemaContentType get_SchemaContentType()
internal void SetQualifiedName(XmlQualifiedName value)
internal void SetFinalResolved(XmlSchemaDerivationMethod value)
internal void SetBaseSchemaType(XmlSchemaType value)
internal void SetDerivedBy(XmlSchemaDerivationMethod value)
internal void SetDatatype(XmlSchemaDatatype value)
internal SchemaElementDecl get_ElementDecl()
internal void set_ElementDecl(SchemaElementDecl value)
internal XmlSchemaType get_Redefined()
internal void set_Redefined(XmlSchemaType value)
internal XmlQualifiedName get_DerivedFrom()
internal void SetContentType(XmlSchemaContentType value)
public bool IsDerivedFrom(XmlSchemaType derivedType, XmlSchemaType baseType, XmlSchemaDerivationMethod except)
internal bool IsDerivedFromDatatype(XmlSchemaDatatype derivedDataType, XmlSchemaDatatype baseDataType, XmlSchemaDerivationMethod except)
internal string get_NameAttribute()
internal void set_NameAttribute(string value)
}
public System.Xml.Schema.XmlSchemaUse : Enum {
public int value__
public XmlSchemaUse None
public XmlSchemaUse Optional
public XmlSchemaUse Prohibited
public XmlSchemaUse Required
}
public System.Xml.Schema.XmlSchemaValidationException : XmlSchemaException {
private object sourceNodeObject
public object SourceObject
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, Exception innerException, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args)
internal void .ctor(string res, string arg)
internal void .ctor(string res, string arg, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args, Exception innerException, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args, object sourceNode)
internal void .ctor(string res, String[] args, string sourceUri, object sourceNode)
internal void .ctor(string res, String[] args, string sourceUri, int lineNumber, int linePosition, XmlSchemaObject source, object sourceNode)
public object get_SourceObject()
protected internal void SetSourceObject(object sourceObject)
}
public System.Xml.Schema.XmlSchemaValidationFlags : Enum {
public int value__
public XmlSchemaValidationFlags None
public XmlSchemaValidationFlags ProcessInlineSchema
public XmlSchemaValidationFlags ProcessSchemaLocation
public XmlSchemaValidationFlags ReportValidationWarnings
public XmlSchemaValidationFlags ProcessIdentityConstraints
public XmlSchemaValidationFlags AllowXmlAttributes
}
public System.Xml.Schema.XmlSchemaValidator : object {
private XmlSchemaSet schemaSet
private XmlSchemaValidationFlags validationFlags
private int startIDConstraint
private int STACK_INCREMENT
private bool isRoot
private bool rootHasSchema
private bool attrValid
private bool checkEntity
private SchemaInfo compiledSchemaInfo
private IDtdInfo dtdSchemaInfo
private Hashtable validatedNamespaces
private HWStack validationStack
private ValidationState context
private ValidatorState currentState
private Hashtable attPresence
private SchemaAttDef wildID
private Hashtable IDs
private IdRefNode idRefListHead
private XmlQualifiedName contextQName
private string NsXs
private string NsXsi
private string NsXmlNs
private string NsXml
private XmlSchemaObject partialValidationType
private StringBuilder textValue
private ValidationEventHandler eventHandler
private object validationEventSender
private XmlNameTable nameTable
private IXmlLineInfo positionInfo
private IXmlLineInfo dummyPositionInfo
private XmlResolver xmlResolver
private Uri sourceUri
private string sourceUriString
private IXmlNamespaceResolver nsResolver
private XmlSchemaContentProcessing processContents
private XmlSchemaAttribute xsiTypeSO
private XmlSchemaAttribute xsiNilSO
private XmlSchemaAttribute xsiSLSO
private XmlSchemaAttribute xsiNoNsSLSO
private string xsiTypeString
private string xsiNilString
private string xsiSchemaLocationString
private string xsiNoNamespaceSchemaLocationString
private XmlSchemaDatatype dtQName
private XmlSchemaDatatype dtCDATA
private XmlSchemaDatatype dtStringArray
private string Quote
private XmlSchemaParticle[] EmptyParticleArray
private XmlSchemaAttribute[] EmptyAttributeArray
private XmlCharType xmlCharType
internal Boolean[0...,0...] ValidStates
private String[] MethodNames
public XmlResolver XmlResolver
public IXmlLineInfo LineInfoProvider
public Uri SourceUri
public object ValidationEventSender
internal XmlSchemaSet SchemaSet
internal XmlSchemaValidationFlags ValidationFlags
internal XmlSchemaContentType CurrentContentType
internal XmlSchemaContentProcessing CurrentProcessContents
private bool StrictlyAssessed
private bool HasSchema
private bool HasIdentityConstraints
internal bool ProcessIdentityConstraints
internal bool ReportValidationWarnings
internal bool ProcessInlineSchema
internal bool ProcessSchemaLocation
internal bool ProcessSchemaHints
public void .ctor(XmlNameTable nameTable, XmlSchemaSet schemas, IXmlNamespaceResolver namespaceResolver, XmlSchemaValidationFlags validationFlags)
private void Init()
private void Reset()
public void set_XmlResolver(XmlResolver value)
public IXmlLineInfo get_LineInfoProvider()
public void set_LineInfoProvider(IXmlLineInfo value)
public Uri get_SourceUri()
public void set_SourceUri(Uri value)
public object get_ValidationEventSender()
public void set_ValidationEventSender(object value)
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
public void AddSchema(XmlSchema schema)
public void Initialize()
public void Initialize(XmlSchemaObject partialValidationType)
public void ValidateElement(string localName, string namespaceUri, XmlSchemaInfo schemaInfo)
public void ValidateElement(string localName, string namespaceUri, XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation)
public object ValidateAttribute(string localName, string namespaceUri, string attributeValue, XmlSchemaInfo schemaInfo)
public object ValidateAttribute(string localName, string namespaceUri, XmlValueGetter attributeValue, XmlSchemaInfo schemaInfo)
private object ValidateAttribute(string lName, string ns, XmlValueGetter attributeValueGetter, string attributeStringValue, XmlSchemaInfo schemaInfo)
public void GetUnspecifiedDefaultAttributes(ArrayList defaultAttributes)
public void ValidateEndOfAttributes(XmlSchemaInfo schemaInfo)
public void ValidateText(string elementValue)
public void ValidateText(XmlValueGetter elementValue)
private void ValidateText(string elementStringValue, XmlValueGetter elementValueGetter)
public void ValidateWhitespace(string elementValue)
public void ValidateWhitespace(XmlValueGetter elementValue)
private void ValidateWhitespace(string elementStringValue, XmlValueGetter elementValueGetter)
public object ValidateEndElement(XmlSchemaInfo schemaInfo)
public object ValidateEndElement(XmlSchemaInfo schemaInfo, object typedValue)
public void SkipToEndElement(XmlSchemaInfo schemaInfo)
public void EndValidation()
public XmlSchemaParticle[] GetExpectedParticles()
public XmlSchemaAttribute[] GetExpectedAttributes()
internal void GetUnspecifiedDefaultAttributes(ArrayList defaultAttributes, bool createNodeData)
internal XmlSchemaSet get_SchemaSet()
internal XmlSchemaValidationFlags get_ValidationFlags()
internal XmlSchemaContentType get_CurrentContentType()
internal XmlSchemaContentProcessing get_CurrentProcessContents()
internal void SetDtdSchemaInfo(IDtdInfo dtdSchemaInfo)
private bool get_StrictlyAssessed()
private bool get_HasSchema()
internal string GetConcatenatedValue()
private object InternalValidateEndElement(XmlSchemaInfo schemaInfo, object typedValue)
private void ProcessSchemaLocations(string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation)
private object ValidateElementContext(XmlQualifiedName elementName, Boolean& invalidElementInContext)
private XmlSchemaElement GetSubstitutionGroupHead(XmlQualifiedName member)
private object ValidateAtomicValue(string stringValue, XmlSchemaSimpleType& memberType)
private object ValidateAtomicValue(object parsedValue, XmlSchemaSimpleType& memberType)
private string GetTypeName(SchemaDeclBase decl)
private void SaveTextValue(object value)
private void Push(XmlQualifiedName elementName)
private void Pop()
private void AddXsiAttributes(ArrayList attList)
private SchemaElementDecl FastGetElementDecl(XmlQualifiedName elementName, object particle)
private SchemaElementDecl CheckXsiTypeAndNil(SchemaElementDecl elementDecl, string xsiType, string xsiNil, Boolean& declFound)
private void ThrowDeclNotFoundWarningOrError(bool declFound)
private void CheckElementProperties()
private void ValidateStartElementIdentityConstraints()
private SchemaAttDef CheckIsXmlAttribute(XmlQualifiedName attQName)
private void AddXmlNamespaceSchema()
internal object CheckMixedValueConstraint(string elementValue)
private void LoadSchema(string uri, string url)
internal void RecompileSchemaSet()
private void ProcessTokenizedType(XmlTokenizedType ttype, string name, bool attrValue)
private object CheckAttributeValue(object value, SchemaAttDef attdef)
private object CheckElementValue(string stringValue)
private void CheckTokenizedTypes(XmlSchemaDatatype dtype, object typedValue, bool attrValue)
private object FindId(string name)
private void CheckForwardRefs()
private bool get_HasIdentityConstraints()
internal bool get_ProcessIdentityConstraints()
internal bool get_ReportValidationWarnings()
internal bool get_ProcessInlineSchema()
internal bool get_ProcessSchemaLocation()
internal bool get_ProcessSchemaHints()
private void CheckStateTransition(ValidatorState toState, string methodName)
private void ClearPSVI()
private void CheckRequiredAttributes(SchemaElementDecl currentElementDecl)
private XmlSchemaElement GetSchemaElement()
internal string GetDefaultAttributePrefix(string attributeNS)
private void AddIdentityConstraints()
private void ElementIdentityConstraints()
private void AttributeIdentityConstraints(string name, string ns, object obj, string sobj, XmlSchemaDatatype datatype)
private void EndElementIdentityConstraints(object typedValue, string stringValue, XmlSchemaDatatype datatype)
private void BuildXsiAttributes()
internal void ElementValidationError(XmlQualifiedName name, ValidationState context, ValidationEventHandler eventHandler, object sender, string sourceUri, int lineNo, int linePos, XmlSchemaSet schemaSet)
internal void CompleteValidationError(ValidationState context, ValidationEventHandler eventHandler, object sender, string sourceUri, int lineNo, int linePos, XmlSchemaSet schemaSet)
internal string PrintExpectedElements(ArrayList expected, bool getParticles)
private string PrintNames(ArrayList expected)
private void PrintNamesWithNS(ArrayList expected, StringBuilder builder)
private void EnumerateAny(StringBuilder builder, string namespaces)
internal string QNameString(string localName, string ns)
internal string BuildElementName(XmlQualifiedName qname)
internal string BuildElementName(string localName, string ns)
private void ProcessEntity(string name)
private void SendValidationEvent(string code)
private void SendValidationEvent(string code, String[] args)
private void SendValidationEvent(string code, string arg)
private void SendValidationEvent(string code, string arg1, string arg2)
private void SendValidationEvent(string code, String[] args, Exception innerException, XmlSeverityType severity)
private void SendValidationEvent(string code, String[] args, Exception innerException)
private void SendValidationEvent(XmlSchemaValidationException e)
private void SendValidationEvent(XmlSchemaException e)
private void SendValidationEvent(string code, string msg, XmlSeverityType severity)
private void SendValidationEvent(XmlSchemaValidationException e, XmlSeverityType severity)
internal void SendValidationEvent(ValidationEventHandler eventHandler, object sender, XmlSchemaValidationException e, XmlSeverityType severity)
}
public System.Xml.Schema.XmlSchemaValidity : Enum {
public int value__
public XmlSchemaValidity NotKnown
public XmlSchemaValidity Valid
public XmlSchemaValidity Invalid
}
internal System.Xml.Schema.XmlSchemaWhiteSpace : Enum {
public int value__
public XmlSchemaWhiteSpace Preserve
public XmlSchemaWhiteSpace Replace
public XmlSchemaWhiteSpace Collapse
}
public System.Xml.Schema.XmlSchemaXPath : XmlSchemaAnnotated {
private string xpath
public string XPath
public string get_XPath()
public void set_XPath(string value)
}
public System.Xml.Schema.XmlSeverityType : Enum {
public int value__
public XmlSeverityType Error
public XmlSeverityType Warning
}
internal System.Xml.Schema.XmlStringConverter : XmlBaseConverter {
protected void .ctor(XmlSchemaType schemaType)
public XmlValueConverter Create(XmlSchemaType schemaType)
public string ToString(string value, IXmlNamespaceResolver nsResolver)
public string ToString(object value, IXmlNamespaceResolver nsResolver)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
public System.Xml.Schema.XmlTypeCode : Enum {
public int value__
public XmlTypeCode None
public XmlTypeCode Item
public XmlTypeCode Node
public XmlTypeCode Document
public XmlTypeCode Element
public XmlTypeCode Attribute
public XmlTypeCode Namespace
public XmlTypeCode ProcessingInstruction
public XmlTypeCode Comment
public XmlTypeCode Text
public XmlTypeCode AnyAtomicType
public XmlTypeCode UntypedAtomic
public XmlTypeCode String
public XmlTypeCode Boolean
public XmlTypeCode Decimal
public XmlTypeCode Float
public XmlTypeCode Double
public XmlTypeCode Duration
public XmlTypeCode DateTime
public XmlTypeCode Time
public XmlTypeCode Date
public XmlTypeCode GYearMonth
public XmlTypeCode GYear
public XmlTypeCode GMonthDay
public XmlTypeCode GDay
public XmlTypeCode GMonth
public XmlTypeCode HexBinary
public XmlTypeCode Base64Binary
public XmlTypeCode AnyUri
public XmlTypeCode QName
public XmlTypeCode Notation
public XmlTypeCode NormalizedString
public XmlTypeCode Token
public XmlTypeCode Language
public XmlTypeCode NmToken
public XmlTypeCode Name
public XmlTypeCode NCName
public XmlTypeCode Id
public XmlTypeCode Idref
public XmlTypeCode Entity
public XmlTypeCode Integer
public XmlTypeCode NonPositiveInteger
public XmlTypeCode NegativeInteger
public XmlTypeCode Long
public XmlTypeCode Int
public XmlTypeCode Short
public XmlTypeCode Byte
public XmlTypeCode NonNegativeInteger
public XmlTypeCode UnsignedLong
public XmlTypeCode UnsignedInt
public XmlTypeCode UnsignedShort
public XmlTypeCode UnsignedByte
public XmlTypeCode PositiveInteger
public XmlTypeCode YearMonthDuration
public XmlTypeCode DayTimeDuration
}
internal System.Xml.Schema.XmlUnionConverter : XmlBaseConverter {
private XmlValueConverter[] converters
private bool hasAtomicMember
private bool hasListMember
protected void .ctor(XmlSchemaType schemaType)
public XmlValueConverter Create(XmlSchemaType schemaType)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
internal System.Xml.Schema.XmlUntypedConverter : XmlListConverter {
private bool allowListToList
public XmlValueConverter Untyped
public XmlValueConverter UntypedList
protected void .ctor(XmlUntypedConverter atomicConverter, bool allowListToList)
public bool ToBoolean(string value)
public bool ToBoolean(object value)
public DateTime ToDateTime(string value)
public DateTime ToDateTime(object value)
public DateTimeOffset ToDateTimeOffset(string value)
public DateTimeOffset ToDateTimeOffset(object value)
public decimal ToDecimal(string value)
public decimal ToDecimal(object value)
public double ToDouble(string value)
public double ToDouble(object value)
public int ToInt32(string value)
public int ToInt32(object value)
public long ToInt64(string value)
public long ToInt64(object value)
public float ToSingle(string value)
public float ToSingle(object value)
public string ToString(bool value)
public string ToString(DateTime value)
public string ToString(DateTimeOffset value)
public string ToString(decimal value)
public string ToString(double value)
public string ToString(int value)
public string ToString(long value)
public string ToString(float value)
public string ToString(string value, IXmlNamespaceResolver nsResolver)
public string ToString(object value, IXmlNamespaceResolver nsResolver)
public object ChangeType(bool value, Type destinationType)
public object ChangeType(DateTime value, Type destinationType)
public object ChangeType(DateTimeOffset value, Type destinationType)
public object ChangeType(decimal value, Type destinationType)
public object ChangeType(double value, Type destinationType)
public object ChangeType(int value, Type destinationType)
public object ChangeType(long value, Type destinationType)
public object ChangeType(float value, Type destinationType)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
protected object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
private bool SupportsType(Type clrType)
}
internal System.Xml.Schema.XmlValueConverter : object {
public bool ToBoolean(bool value)
public bool ToBoolean(long value)
public bool ToBoolean(int value)
public bool ToBoolean(decimal value)
public bool ToBoolean(float value)
public bool ToBoolean(double value)
public bool ToBoolean(DateTime value)
public bool ToBoolean(DateTimeOffset value)
public bool ToBoolean(string value)
public bool ToBoolean(object value)
public int ToInt32(bool value)
public int ToInt32(int value)
public int ToInt32(long value)
public int ToInt32(decimal value)
public int ToInt32(float value)
public int ToInt32(double value)
public int ToInt32(DateTime value)
public int ToInt32(DateTimeOffset value)
public int ToInt32(string value)
public int ToInt32(object value)
public long ToInt64(bool value)
public long ToInt64(int value)
public long ToInt64(long value)
public long ToInt64(decimal value)
public long ToInt64(float value)
public long ToInt64(double value)
public long ToInt64(DateTime value)
public long ToInt64(DateTimeOffset value)
public long ToInt64(string value)
public long ToInt64(object value)
public decimal ToDecimal(bool value)
public decimal ToDecimal(int value)
public decimal ToDecimal(long value)
public decimal ToDecimal(decimal value)
public decimal ToDecimal(float value)
public decimal ToDecimal(double value)
public decimal ToDecimal(DateTime value)
public decimal ToDecimal(DateTimeOffset value)
public decimal ToDecimal(string value)
public decimal ToDecimal(object value)
public double ToDouble(bool value)
public double ToDouble(int value)
public double ToDouble(long value)
public double ToDouble(decimal value)
public double ToDouble(float value)
public double ToDouble(double value)
public double ToDouble(DateTime value)
public double ToDouble(DateTimeOffset value)
public double ToDouble(string value)
public double ToDouble(object value)
public float ToSingle(bool value)
public float ToSingle(int value)
public float ToSingle(long value)
public float ToSingle(decimal value)
public float ToSingle(float value)
public float ToSingle(double value)
public float ToSingle(DateTime value)
public float ToSingle(DateTimeOffset value)
public float ToSingle(string value)
public float ToSingle(object value)
public DateTime ToDateTime(bool value)
public DateTime ToDateTime(int value)
public DateTime ToDateTime(long value)
public DateTime ToDateTime(decimal value)
public DateTime ToDateTime(float value)
public DateTime ToDateTime(double value)
public DateTime ToDateTime(DateTime value)
public DateTime ToDateTime(DateTimeOffset value)
public DateTime ToDateTime(string value)
public DateTime ToDateTime(object value)
public DateTimeOffset ToDateTimeOffset(bool value)
public DateTimeOffset ToDateTimeOffset(int value)
public DateTimeOffset ToDateTimeOffset(long value)
public DateTimeOffset ToDateTimeOffset(decimal value)
public DateTimeOffset ToDateTimeOffset(float value)
public DateTimeOffset ToDateTimeOffset(double value)
public DateTimeOffset ToDateTimeOffset(DateTime value)
public DateTimeOffset ToDateTimeOffset(DateTimeOffset value)
public DateTimeOffset ToDateTimeOffset(string value)
public DateTimeOffset ToDateTimeOffset(object value)
public string ToString(bool value)
public string ToString(int value)
public string ToString(long value)
public string ToString(decimal value)
public string ToString(float value)
public string ToString(double value)
public string ToString(DateTime value)
public string ToString(DateTimeOffset value)
public string ToString(string value)
public string ToString(string value, IXmlNamespaceResolver nsResolver)
public string ToString(object value)
public string ToString(object value, IXmlNamespaceResolver nsResolver)
public object ChangeType(bool value, Type destinationType)
public object ChangeType(int value, Type destinationType)
public object ChangeType(long value, Type destinationType)
public object ChangeType(decimal value, Type destinationType)
public object ChangeType(float value, Type destinationType)
public object ChangeType(double value, Type destinationType)
public object ChangeType(DateTime value, Type destinationType)
public object ChangeType(DateTimeOffset value, Type destinationType)
public object ChangeType(string value, Type destinationType)
public object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
public object ChangeType(object value, Type destinationType)
public object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
}
public System.Xml.Schema.XmlValueGetter : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
internal System.Xml.Schema.XsdBuilder : SchemaBuilder {
private int STACK_INCREMENT
private State[] SchemaElement
private State[] SchemaSubelements
private State[] AttributeSubelements
private State[] ElementSubelements
private State[] ComplexTypeSubelements
private State[] SimpleContentSubelements
private State[] SimpleContentExtensionSubelements
private State[] SimpleContentRestrictionSubelements
private State[] ComplexContentSubelements
private State[] ComplexContentExtensionSubelements
private State[] ComplexContentRestrictionSubelements
private State[] SimpleTypeSubelements
private State[] SimpleTypeRestrictionSubelements
private State[] SimpleTypeListSubelements
private State[] SimpleTypeUnionSubelements
private State[] RedefineSubelements
private State[] AttributeGroupSubelements
private State[] GroupSubelements
private State[] AllSubelements
private State[] ChoiceSequenceSubelements
private State[] IdentityConstraintSubelements
private State[] AnnotationSubelements
private State[] AnnotatedSubelements
private XsdAttributeEntry[] SchemaAttributes
private XsdAttributeEntry[] AttributeAttributes
private XsdAttributeEntry[] ElementAttributes
private XsdAttributeEntry[] ComplexTypeAttributes
private XsdAttributeEntry[] SimpleContentAttributes
private XsdAttributeEntry[] SimpleContentExtensionAttributes
private XsdAttributeEntry[] SimpleContentRestrictionAttributes
private XsdAttributeEntry[] ComplexContentAttributes
private XsdAttributeEntry[] ComplexContentExtensionAttributes
private XsdAttributeEntry[] ComplexContentRestrictionAttributes
private XsdAttributeEntry[] SimpleTypeAttributes
private XsdAttributeEntry[] SimpleTypeRestrictionAttributes
private XsdAttributeEntry[] SimpleTypeUnionAttributes
private XsdAttributeEntry[] SimpleTypeListAttributes
private XsdAttributeEntry[] AttributeGroupAttributes
private XsdAttributeEntry[] AttributeGroupRefAttributes
private XsdAttributeEntry[] GroupAttributes
private XsdAttributeEntry[] GroupRefAttributes
private XsdAttributeEntry[] ParticleAttributes
private XsdAttributeEntry[] AnyAttributes
private XsdAttributeEntry[] IdentityConstraintAttributes
private XsdAttributeEntry[] SelectorAttributes
private XsdAttributeEntry[] FieldAttributes
private XsdAttributeEntry[] NotationAttributes
private XsdAttributeEntry[] IncludeAttributes
private XsdAttributeEntry[] ImportAttributes
private XsdAttributeEntry[] FacetAttributes
private XsdAttributeEntry[] AnyAttributeAttributes
private XsdAttributeEntry[] DocumentationAttributes
private XsdAttributeEntry[] AppinfoAttributes
private XsdAttributeEntry[] RedefineAttributes
private XsdAttributeEntry[] AnnotationAttributes
private XsdEntry[] SchemaEntries
private Int32[] DerivationMethodValues
private String[] DerivationMethodStrings
private String[] FormStringValues
private String[] UseStringValues
private String[] ProcessContentsStringValues
private XmlReader reader
private PositionInfo positionInfo
private XsdEntry currentEntry
private XsdEntry nextEntry
private bool hasChild
private HWStack stateHistory
private Stack containerStack
private XmlNameTable nameTable
private SchemaNames schemaNames
private XmlNamespaceManager namespaceManager
private bool canIncludeImport
private XmlSchema schema
private XmlSchemaObject xso
private XmlSchemaElement element
private XmlSchemaAny anyElement
private XmlSchemaAttribute attribute
private XmlSchemaAnyAttribute anyAttribute
private XmlSchemaComplexType complexType
private XmlSchemaSimpleType simpleType
private XmlSchemaComplexContent complexContent
private XmlSchemaComplexContentExtension complexContentExtension
private XmlSchemaComplexContentRestriction complexContentRestriction
private XmlSchemaSimpleContent simpleContent
private XmlSchemaSimpleContentExtension simpleContentExtension
private XmlSchemaSimpleContentRestriction simpleContentRestriction
private XmlSchemaSimpleTypeUnion simpleTypeUnion
private XmlSchemaSimpleTypeList simpleTypeList
private XmlSchemaSimpleTypeRestriction simpleTypeRestriction
private XmlSchemaGroup group
private XmlSchemaGroupRef groupRef
private XmlSchemaAll all
private XmlSchemaChoice choice
private XmlSchemaSequence sequence
private XmlSchemaParticle particle
private XmlSchemaAttributeGroup attributeGroup
private XmlSchemaAttributeGroupRef attributeGroupRef
private XmlSchemaNotation notation
private XmlSchemaIdentityConstraint identityConstraint
private XmlSchemaXPath xpath
private XmlSchemaInclude include
private XmlSchemaImport import
private XmlSchemaAnnotation annotation
private XmlSchemaAppInfo appInfo
private XmlSchemaDocumentation documentation
private XmlSchemaFacet facet
private XmlNode[] markup
private XmlSchemaRedefine redefine
private ValidationEventHandler validationEventHandler
private ArrayList unhandledAttributes
private Hashtable namespaces
private Token CurrentElement
private Token ParentElement
private XmlSchemaObject ParentContainer
internal void .ctor(XmlReader reader, XmlNamespaceManager curmgr, XmlSchema schema, XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventhandler)
internal bool ProcessElement(string prefix, string name, string ns)
internal void ProcessAttribute(string prefix, string name, string ns, string value)
internal bool IsContentParsed()
internal void ProcessMarkup(XmlNode[] markup)
internal void ProcessCData(string value)
internal void StartChildren()
internal void EndChildren()
private void Push()
private void Pop()
private Token get_CurrentElement()
private Token get_ParentElement()
private XmlSchemaObject get_ParentContainer()
private XmlSchemaObject GetContainer(State state)
private void SetContainer(State state, object container)
private void BuildAnnotated_Id(XsdBuilder builder, string value)
private void BuildSchema_AttributeFormDefault(XsdBuilder builder, string value)
private void BuildSchema_ElementFormDefault(XsdBuilder builder, string value)
private void BuildSchema_TargetNamespace(XsdBuilder builder, string value)
private void BuildSchema_Version(XsdBuilder builder, string value)
private void BuildSchema_FinalDefault(XsdBuilder builder, string value)
private void BuildSchema_BlockDefault(XsdBuilder builder, string value)
private void InitSchema(XsdBuilder builder, string value)
private void InitInclude(XsdBuilder builder, string value)
private void BuildInclude_SchemaLocation(XsdBuilder builder, string value)
private void InitImport(XsdBuilder builder, string value)
private void BuildImport_Namespace(XsdBuilder builder, string value)
private void BuildImport_SchemaLocation(XsdBuilder builder, string value)
private void InitRedefine(XsdBuilder builder, string value)
private void BuildRedefine_SchemaLocation(XsdBuilder builder, string value)
private void EndRedefine(XsdBuilder builder)
private void InitAttribute(XsdBuilder builder, string value)
private void BuildAttribute_Default(XsdBuilder builder, string value)
private void BuildAttribute_Fixed(XsdBuilder builder, string value)
private void BuildAttribute_Form(XsdBuilder builder, string value)
private void BuildAttribute_Use(XsdBuilder builder, string value)
private void BuildAttribute_Ref(XsdBuilder builder, string value)
private void BuildAttribute_Name(XsdBuilder builder, string value)
private void BuildAttribute_Type(XsdBuilder builder, string value)
private void InitElement(XsdBuilder builder, string value)
private void BuildElement_Abstract(XsdBuilder builder, string value)
private void BuildElement_Block(XsdBuilder builder, string value)
private void BuildElement_Default(XsdBuilder builder, string value)
private void BuildElement_Form(XsdBuilder builder, string value)
private void BuildElement_SubstitutionGroup(XsdBuilder builder, string value)
private void BuildElement_Final(XsdBuilder builder, string value)
private void BuildElement_Fixed(XsdBuilder builder, string value)
private void BuildElement_MaxOccurs(XsdBuilder builder, string value)
private void BuildElement_MinOccurs(XsdBuilder builder, string value)
private void BuildElement_Name(XsdBuilder builder, string value)
private void BuildElement_Nillable(XsdBuilder builder, string value)
private void BuildElement_Ref(XsdBuilder builder, string value)
private void BuildElement_Type(XsdBuilder builder, string value)
private void InitSimpleType(XsdBuilder builder, string value)
private void BuildSimpleType_Name(XsdBuilder builder, string value)
private void BuildSimpleType_Final(XsdBuilder builder, string value)
private void InitSimpleTypeUnion(XsdBuilder builder, string value)
private void BuildSimpleTypeUnion_MemberTypes(XsdBuilder builder, string value)
private void InitSimpleTypeList(XsdBuilder builder, string value)
private void BuildSimpleTypeList_ItemType(XsdBuilder builder, string value)
private void InitSimpleTypeRestriction(XsdBuilder builder, string value)
private void BuildSimpleTypeRestriction_Base(XsdBuilder builder, string value)
private void InitComplexType(XsdBuilder builder, string value)
private void BuildComplexType_Abstract(XsdBuilder builder, string value)
private void BuildComplexType_Block(XsdBuilder builder, string value)
private void BuildComplexType_Final(XsdBuilder builder, string value)
private void BuildComplexType_Mixed(XsdBuilder builder, string value)
private void BuildComplexType_Name(XsdBuilder builder, string value)
private void InitComplexContent(XsdBuilder builder, string value)
private void BuildComplexContent_Mixed(XsdBuilder builder, string value)
private void InitComplexContentExtension(XsdBuilder builder, string value)
private void BuildComplexContentExtension_Base(XsdBuilder builder, string value)
private void InitComplexContentRestriction(XsdBuilder builder, string value)
private void BuildComplexContentRestriction_Base(XsdBuilder builder, string value)
private void InitSimpleContent(XsdBuilder builder, string value)
private void InitSimpleContentExtension(XsdBuilder builder, string value)
private void BuildSimpleContentExtension_Base(XsdBuilder builder, string value)
private void InitSimpleContentRestriction(XsdBuilder builder, string value)
private void BuildSimpleContentRestriction_Base(XsdBuilder builder, string value)
private void InitAttributeGroup(XsdBuilder builder, string value)
private void BuildAttributeGroup_Name(XsdBuilder builder, string value)
private void InitAttributeGroupRef(XsdBuilder builder, string value)
private void BuildAttributeGroupRef_Ref(XsdBuilder builder, string value)
private void InitAnyAttribute(XsdBuilder builder, string value)
private void BuildAnyAttribute_Namespace(XsdBuilder builder, string value)
private void BuildAnyAttribute_ProcessContents(XsdBuilder builder, string value)
private void InitGroup(XsdBuilder builder, string value)
private void BuildGroup_Name(XsdBuilder builder, string value)
private void InitGroupRef(XsdBuilder builder, string value)
private void BuildParticle_MaxOccurs(XsdBuilder builder, string value)
private void BuildParticle_MinOccurs(XsdBuilder builder, string value)
private void BuildGroupRef_Ref(XsdBuilder builder, string value)
private void InitAll(XsdBuilder builder, string value)
private void InitChoice(XsdBuilder builder, string value)
private void InitSequence(XsdBuilder builder, string value)
private void InitAny(XsdBuilder builder, string value)
private void BuildAny_Namespace(XsdBuilder builder, string value)
private void BuildAny_ProcessContents(XsdBuilder builder, string value)
private void InitNotation(XsdBuilder builder, string value)
private void BuildNotation_Name(XsdBuilder builder, string value)
private void BuildNotation_Public(XsdBuilder builder, string value)
private void BuildNotation_System(XsdBuilder builder, string value)
private void InitFacet(XsdBuilder builder, string value)
private void BuildFacet_Fixed(XsdBuilder builder, string value)
private void BuildFacet_Value(XsdBuilder builder, string value)
private void InitIdentityConstraint(XsdBuilder builder, string value)
private void BuildIdentityConstraint_Name(XsdBuilder builder, string value)
private void BuildIdentityConstraint_Refer(XsdBuilder builder, string value)
private void InitSelector(XsdBuilder builder, string value)
private void BuildSelector_XPath(XsdBuilder builder, string value)
private void InitField(XsdBuilder builder, string value)
private void BuildField_XPath(XsdBuilder builder, string value)
private void InitAnnotation(XsdBuilder builder, string value)
private void InitAppinfo(XsdBuilder builder, string value)
private void BuildAppinfo_Source(XsdBuilder builder, string value)
private void EndAppinfo(XsdBuilder builder)
private void InitDocumentation(XsdBuilder builder, string value)
private void BuildDocumentation_Source(XsdBuilder builder, string value)
private void BuildDocumentation_XmlLang(XsdBuilder builder, string value)
private void EndDocumentation(XsdBuilder builder)
private void AddAttribute(XmlSchemaObject value)
private void AddParticle(XmlSchemaParticle particle)
private bool GetNextState(XmlQualifiedName qname)
private bool IsSkipableElement(XmlQualifiedName qname)
private void SetMinOccurs(XmlSchemaParticle particle, string value)
private void SetMaxOccurs(XmlSchemaParticle particle, string value)
private bool ParseBoolean(string value, string attributeName)
private int ParseEnum(string value, string attributeName, String[] values)
private XmlQualifiedName ParseQName(string value, string attributeName)
private int ParseBlockFinalEnum(string value, string attributeName)
private string ParseUriReference(string s)
private void SendValidationEvent(string code, string arg0, string arg1, string arg2)
private void SendValidationEvent(string code, string msg)
private void SendValidationEvent(string code, String[] args, XmlSeverityType severity)
private void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity)
private void SendValidationEvent(XmlSchemaException e)
private void RecordPosition()
}
internal System.Xml.Schema.XsdDateTime : ValueType {
private DateTime dt
private UInt32 extra
private UInt32 TypeMask
private UInt32 KindMask
private UInt32 ZoneHourMask
private UInt32 ZoneMinuteMask
private int TypeShift
private int KindShift
private int ZoneHourShift
private short maxFractionDigits
private int Lzyyyy
private int Lzyyyy_
private int Lzyyyy_MM
private int Lzyyyy_MM_
private int Lzyyyy_MM_dd
private int Lzyyyy_MM_ddT
private int LzHH
private int LzHH_
private int LzHH_mm
private int LzHH_mm_
private int LzHH_mm_ss
private int Lz_
private int Lz_zz
private int Lz_zz_
private int Lz_zz_zz
private int Lz__
private int Lz__mm
private int Lz__mm_
private int Lz__mm__
private int Lz__mm_dd
private int Lz___
private int Lz___dd
private XmlTypeCode[] typeCodes
private DateTimeTypeCode InternalTypeCode
private XsdDateTimeKind InternalKind
public XmlTypeCode TypeCode
public DateTimeKind Kind
public int Year
public int Month
public int Day
public int Hour
public int Minute
public int Second
public int Fraction
public int ZoneHour
public int ZoneMinute
public void .ctor(string text)
public void .ctor(string text, XsdDateTimeFlags kinds)
private void .ctor(Parser parser)
private void InitiateXsdDateTime(Parser parser)
internal bool TryParse(string text, XsdDateTimeFlags kinds, XsdDateTime& result)
public void .ctor(DateTime dateTime, XsdDateTimeFlags kinds)
public void .ctor(DateTimeOffset dateTimeOffset)
public void .ctor(DateTimeOffset dateTimeOffset, XsdDateTimeFlags kinds)
private DateTimeTypeCode get_InternalTypeCode()
private XsdDateTimeKind get_InternalKind()
public XmlTypeCode get_TypeCode()
public DateTimeKind get_Kind()
public int get_Year()
public int get_Month()
public int get_Day()
public int get_Hour()
public int get_Minute()
public int get_Second()
public int get_Fraction()
public int get_ZoneHour()
public int get_ZoneMinute()
public DateTime ToZulu()
public DateTime op_Implicit(XsdDateTime xdt)
public DateTimeOffset op_Implicit(XsdDateTime xdt)
public int Compare(XsdDateTime left, XsdDateTime right)
public int CompareTo(object value)
public string ToString()
private void PrintDate(StringBuilder sb)
private void PrintTime(StringBuilder sb)
private void PrintZone(StringBuilder sb)
private void IntToCharArray(Char[] text, int start, int value, int digits)
private void ShortToCharArray(Char[] text, int start, int value)
private DateTime GetZuluDateTime()
}
internal System.Xml.Schema.XsdDateTimeFlags : Enum {
public int value__
public XsdDateTimeFlags DateTime
public XsdDateTimeFlags Time
public XsdDateTimeFlags Date
public XsdDateTimeFlags GYearMonth
public XsdDateTimeFlags GYear
public XsdDateTimeFlags GMonthDay
public XsdDateTimeFlags GDay
public XsdDateTimeFlags GMonth
public XsdDateTimeFlags XdrDateTimeNoTz
public XsdDateTimeFlags XdrDateTime
public XsdDateTimeFlags XdrTimeNoTz
public XsdDateTimeFlags AllXsd
}
internal System.Xml.Schema.XsdDuration : ValueType {
private int years
private int months
private int days
private int hours
private int minutes
private int seconds
private UInt32 nanoseconds
private UInt32 NegativeBit
public bool IsNegative
public int Years
public int Months
public int Days
public int Hours
public int Minutes
public int Seconds
public int Nanoseconds
public int Microseconds
public int Milliseconds
public void .ctor(bool isNegative, int years, int months, int days, int hours, int minutes, int seconds, int nanoseconds)
public void .ctor(TimeSpan timeSpan)
public void .ctor(TimeSpan timeSpan, DurationType durationType)
public void .ctor(string s)
public void .ctor(string s, DurationType durationType)
public bool get_IsNegative()
public int get_Years()
public int get_Months()
public int get_Days()
public int get_Hours()
public int get_Minutes()
public int get_Seconds()
public int get_Nanoseconds()
public int get_Microseconds()
public int get_Milliseconds()
public XsdDuration Normalize()
public TimeSpan ToTimeSpan()
public TimeSpan ToTimeSpan(DurationType durationType)
internal Exception TryToTimeSpan(TimeSpan& result)
internal Exception TryToTimeSpan(DurationType durationType, TimeSpan& result)
public string ToString()
internal string ToString(DurationType durationType)
internal Exception TryParse(string s, XsdDuration& result)
internal Exception TryParse(string s, DurationType durationType, XsdDuration& result)
private string TryParseDigits(string s, Int32& offset, bool eatDigits, Int32& result, Int32& numDigits)
}
internal System.Xml.Schema.XsdSimpleValue : object {
private XmlSchemaSimpleType xmlType
private object typedValue
public XmlSchemaSimpleType XmlType
public object TypedValue
public void .ctor(XmlSchemaSimpleType st, object value)
public XmlSchemaSimpleType get_XmlType()
public object get_TypedValue()
}
internal System.Xml.Schema.XsdValidator : BaseValidator {
private int startIDConstraint
private int STACK_INCREMENT
private HWStack validationStack
private Hashtable attPresence
private XmlNamespaceManager nsManager
private bool bManageNamespaces
private Hashtable IDs
private IdRefNode idRefListHead
private Parser inlineSchemaParser
private XmlSchemaContentProcessing processContents
private XmlSchemaDatatype dtCDATA
private XmlSchemaDatatype dtQName
private XmlSchemaDatatype dtStringArray
private string NsXmlNs
private string NsXs
private string NsXsi
private string XsiType
private string XsiNil
private string XsiSchemaLocation
private string XsiNoNamespaceSchemaLocation
private string XsdSchema
public ValidationState Context
public XmlSchemaDatatype DtQName
private bool IsInlineSchemaStarted
private bool HasSchema
public bool PreserveWhitespace
private bool HasIdentityConstraints
internal void .ctor(BaseValidator validator)
internal void .ctor(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling)
private void Init()
public void Validate()
public void CompleteValidation()
public void set_Context(ValidationState value)
public XmlSchemaDatatype get_DtQName()
private bool get_IsInlineSchemaStarted()
private void ProcessInlineSchema()
private void ValidateElement()
private object ValidateChildElement()
private void ProcessElement(object particle)
private void ProcessXsiAttributes(XmlQualifiedName& xsiType, String& xsiNil)
private void ValidateEndElement()
private SchemaElementDecl FastGetElementDecl(object particle)
private SchemaElementDecl ThoroughGetElementDecl(SchemaElementDecl elementDecl, XmlQualifiedName xsiType, string xsiNil)
private void ValidateStartElement()
private void ValidateEndStartElement()
private void LoadSchemaFromLocation(string uri, string url)
private void LoadSchema(string uri, string url)
private bool get_HasSchema()
public bool get_PreserveWhitespace()
private void ProcessTokenizedType(XmlTokenizedType ttype, string name)
private void CheckValue(string value, SchemaAttDef attdef)
internal void AddID(string name, object node)
public object FindId(string name)
public bool IsXSDRoot(string localName, string ns)
private void Push(XmlQualifiedName elementName)
private void Pop()
private void CheckForwardRefs()
private void ValidateStartElementIdentityConstraints()
private bool get_HasIdentityConstraints()
private void AddIdentityConstraints()
private void ElementIdentityConstraints()
private void AttributeIdentityConstraints(string name, string ns, object obj, string sobj, SchemaAttDef attdef)
private object UnWrapUnion(object typedValue)
private void EndElementIdentityConstraints()
}
internal System.Xml.SecureStringHasher : object {
private HashCodeOfStringDelegate hashCodeDelegate
private int hashCodeRandomizer
public bool Equals(string x, string y)
public int GetHashCode(string key)
private int GetHashCodeOfString(string key, int sLen, long additionalEntropy)
private HashCodeOfStringDelegate GetHashCodeDelegate()
}
internal System.Xml.Serialization.Accessor : object {
private string name
private object defaultValue
private string ns
private TypeMapping mapping
private bool any
private string anyNs
private bool topLevelInSchema
private bool isFixed
private bool isOptional
private XmlSchemaForm form
internal TypeMapping Mapping
internal object Default
internal bool HasDefault
internal string Name
internal bool Any
internal string AnyNamespaces
internal string Namespace
internal XmlSchemaForm Form
internal bool IsFixed
internal bool IsOptional
internal bool IsTopLevelInSchema
internal TypeMapping get_Mapping()
internal void set_Mapping(TypeMapping value)
internal object get_Default()
internal void set_Default(object value)
internal bool get_HasDefault()
internal string get_Name()
internal void set_Name(string value)
internal bool get_Any()
internal void set_Any(bool value)
internal string get_AnyNamespaces()
internal void set_AnyNamespaces(string value)
internal string get_Namespace()
internal void set_Namespace(string value)
internal XmlSchemaForm get_Form()
internal void set_Form(XmlSchemaForm value)
internal bool get_IsFixed()
internal void set_IsFixed(bool value)
internal bool get_IsOptional()
internal void set_IsOptional(bool value)
internal bool get_IsTopLevelInSchema()
internal void set_IsTopLevelInSchema(bool value)
internal string EscapeName(string name)
internal string EscapeQName(string name)
internal string UnescapeName(string name)
internal string ToString(string defaultNs)
}
internal System.Xml.Serialization.AccessorMapping : Mapping {
private TypeDesc typeDesc
private AttributeAccessor attribute
private ElementAccessor[] elements
private ElementAccessor[] sortedElements
private TextAccessor text
private ChoiceIdentifierAccessor choiceIdentifier
private XmlnsAccessor xmlns
private bool ignore
internal bool IsAttribute
internal bool IsText
internal bool IsParticle
internal TypeDesc TypeDesc
internal AttributeAccessor Attribute
internal ElementAccessor[] Elements
internal ElementAccessor[] ElementsSortedByDerivation
internal TextAccessor Text
internal ChoiceIdentifierAccessor ChoiceIdentifier
internal XmlnsAccessor Xmlns
internal bool Ignore
internal Accessor Accessor
internal bool IsNeedNullable
protected void .ctor(AccessorMapping mapping)
internal bool get_IsAttribute()
internal bool get_IsText()
internal bool get_IsParticle()
internal TypeDesc get_TypeDesc()
internal void set_TypeDesc(TypeDesc value)
internal AttributeAccessor get_Attribute()
internal void set_Attribute(AttributeAccessor value)
internal ElementAccessor[] get_Elements()
internal void set_Elements(ElementAccessor[] value)
internal void SortMostToLeastDerived(ElementAccessor[] elements)
internal ElementAccessor[] get_ElementsSortedByDerivation()
internal TextAccessor get_Text()
internal void set_Text(TextAccessor value)
internal ChoiceIdentifierAccessor get_ChoiceIdentifier()
internal void set_ChoiceIdentifier(ChoiceIdentifierAccessor value)
internal XmlnsAccessor get_Xmlns()
internal void set_Xmlns(XmlnsAccessor value)
internal bool get_Ignore()
internal void set_Ignore(bool value)
internal Accessor get_Accessor()
private bool IsNeedNullableMember(ElementAccessor element)
internal bool get_IsNeedNullable()
internal bool ElementsMatch(ElementAccessor[] a, ElementAccessor[] b)
internal bool Match(AccessorMapping mapping)
}
internal System.Xml.Serialization.Advanced.MappedTypeDesc : object {
private string name
private string ns
private XmlSchemaType xsdType
private XmlSchemaObject context
private string clrType
private SchemaImporterExtension extension
private CodeNamespace code
private bool exported
private StringCollection references
internal SchemaImporterExtension Extension
internal string Name
internal StringCollection ReferencedAssemblies
internal void .ctor(string clrType, string name, string ns, XmlSchemaType xsdType, XmlSchemaObject context, SchemaImporterExtension extension, CodeNamespace code, StringCollection references)
internal SchemaImporterExtension get_Extension()
internal string get_Name()
internal StringCollection get_ReferencedAssemblies()
internal CodeTypeDeclaration ExportTypeDefinition(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit)
}
public System.Xml.Serialization.Advanced.SchemaImporterExtension : object {
public string ImportSchemaType(string name, string ns, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
public string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
public string ImportAnyElement(XmlSchemaAny any, bool mixed, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
public CodeExpression ImportDefaultValue(string value, string type)
}
public System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection : CollectionBase {
private Hashtable exNames
internal Hashtable Names
public SchemaImporterExtension Item
internal Hashtable get_Names()
public int Add(SchemaImporterExtension extension)
public int Add(string name, Type type)
public void Remove(string name)
public void Clear()
internal SchemaImporterExtensionCollection Clone()
public SchemaImporterExtension get_Item(int index)
public void set_Item(int index, SchemaImporterExtension value)
internal int Add(string name, SchemaImporterExtension extension)
public void Insert(int index, SchemaImporterExtension extension)
public int IndexOf(SchemaImporterExtension extension)
public bool Contains(SchemaImporterExtension extension)
public void Remove(SchemaImporterExtension extension)
public void CopyTo(SchemaImporterExtension[] array, int index)
}
internal System.Xml.Serialization.AppSettings : object {
private string UseLegacySerializerGenerationAppSettingsString
private Nullable`1<bool> useLegacySerializerGeneration
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) settingsInitalized
private object appSettingsLock
internal Nullable`1<bool> UseLegacySerializerGeneration
internal Nullable`1<bool> get_UseLegacySerializerGeneration()
private void EnsureSettingsLoaded()
}
internal System.Xml.Serialization.ArgBuilder : object {
internal string Name
internal int Index
internal Type ArgType
internal void .ctor(string name, int index, Type argType)
}
internal System.Xml.Serialization.ArrayMapping : TypeMapping {
private ElementAccessor[] elements
private ElementAccessor[] sortedElements
private ArrayMapping next
private StructMapping topLevelMapping
internal ElementAccessor[] Elements
internal ElementAccessor[] ElementsSortedByDerivation
internal ArrayMapping Next
internal StructMapping TopLevelMapping
internal ElementAccessor[] get_Elements()
internal void set_Elements(ElementAccessor[] value)
internal ElementAccessor[] get_ElementsSortedByDerivation()
internal ArrayMapping get_Next()
internal void set_Next(ArrayMapping value)
internal StructMapping get_TopLevelMapping()
internal void set_TopLevelMapping(StructMapping value)
}
internal System.Xml.Serialization.ArrayModel : TypeModel {
internal TypeModel Element
internal void .ctor(Type type, TypeDesc typeDesc, ModelScope scope)
internal TypeModel get_Element()
}
internal System.Xml.Serialization.AttributeAccessor : Accessor {
private bool isSpecial
private bool isList
internal bool IsSpecialXmlNamespace
internal bool IsList
internal bool get_IsSpecialXmlNamespace()
internal bool get_IsList()
internal void set_IsList(bool value)
internal void CheckSpecial()
}
internal System.Xml.Serialization.CaseInsensitiveKeyComparer : CaseInsensitiveComparer {
private bool System.Collections.IEqualityComparer.Equals(object x, object y)
private int System.Collections.IEqualityComparer.GetHashCode(object obj)
}
internal System.Xml.Serialization.ChoiceIdentifierAccessor : Accessor {
private string memberName
private String[] memberIds
private MemberInfo memberInfo
internal string MemberName
internal String[] MemberIds
internal MemberInfo MemberInfo
internal string get_MemberName()
internal void set_MemberName(string value)
internal String[] get_MemberIds()
internal void set_MemberIds(String[] value)
internal MemberInfo get_MemberInfo()
internal void set_MemberInfo(MemberInfo value)
}
internal System.Xml.Serialization.Cmp : Enum {
public int value__
public Cmp LessThan
public Cmp EqualTo
public Cmp LessThanOrEqualTo
public Cmp GreaterThan
public Cmp NotEqualTo
public Cmp GreaterThanOrEqualTo
}
public System.Xml.Serialization.CodeExporter : object {
private Hashtable exportedMappings
private Hashtable exportedClasses
private CodeNamespace codeNamespace
private CodeCompileUnit codeCompileUnit
private bool rootExported
private TypeScope scope
private CodeAttributeDeclarationCollection includeMetadata
private CodeGenerationOptions options
private CodeDomProvider codeProvider
private CodeAttributeDeclaration generatedCodeAttribute
internal CodeCompileUnit CodeCompileUnit
internal CodeNamespace CodeNamespace
internal CodeDomProvider CodeProvider
internal Hashtable ExportedClasses
internal Hashtable ExportedMappings
internal bool GenerateProperties
internal CodeAttributeDeclaration GeneratedCodeAttribute
public CodeAttributeDeclarationCollection IncludeMetadata
internal TypeScope Scope
private bool EnableDataBinding
internal CodeMemberMethod RaisePropertyChangedEventMethod
internal CodeMemberEvent PropertyChangedEvent
internal void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable exportedMappings)
internal CodeCompileUnit get_CodeCompileUnit()
internal CodeNamespace get_CodeNamespace()
internal CodeDomProvider get_CodeProvider()
internal Hashtable get_ExportedClasses()
internal Hashtable get_ExportedMappings()
internal bool get_GenerateProperties()
internal CodeAttributeDeclaration get_GeneratedCodeAttribute()
internal CodeAttributeDeclaration FindAttributeDeclaration(Type type, CodeAttributeDeclarationCollection metadata)
private string GetProductVersion(Assembly assembly)
public CodeAttributeDeclarationCollection get_IncludeMetadata()
internal TypeScope get_Scope()
internal void CheckScope(TypeScope scope)
internal void ExportDerivedStructs(StructMapping mapping)
internal void EnsureTypesExported(Accessor[] accessors, string ns)
internal void AddWarningComment(CodeCommentStatementCollection comments, string text)
internal void ExportRoot(StructMapping mapping, Type includeType)
private bool ShouldInclude(ArrayMapping arrayMapping)
internal CodeTypeDeclaration ExportEnum(EnumMapping mapping, Type type)
internal void AddTypeMetadata(CodeAttributeDeclarationCollection metadata, Type type, string defaultName, string name, string ns, bool includeInSchema)
internal void AddIncludeMetadata(CodeAttributeDeclarationCollection metadata, StructMapping mapping, Type type)
internal void ExportConstant(CodeTypeDeclaration codeClass, ConstantMapping constant, Type type, bool init, long enumValue)
internal object PromoteType(Type type, object value)
internal CodeMemberProperty CreatePropertyDeclaration(CodeMemberField field, string name, string typeName)
internal string MakeFieldName(string name)
internal void AddPropertyChangedNotifier(CodeTypeDeclaration codeClass)
private bool get_EnableDataBinding()
internal CodeMemberMethod get_RaisePropertyChangedEventMethod()
internal CodeMemberEvent get_PropertyChangedEvent()
}
public System.Xml.Serialization.CodeGenerationOptions : Enum {
public int value__
public CodeGenerationOptions None
public CodeGenerationOptions GenerateProperties
public CodeGenerationOptions GenerateNewAsync
public CodeGenerationOptions GenerateOldAsync
public CodeGenerationOptions GenerateOrder
public CodeGenerationOptions EnableDataBinding
}
internal System.Xml.Serialization.CodeGenerator : object {
internal BindingFlags InstancePublicBindingFlags
internal BindingFlags InstanceBindingFlags
internal BindingFlags StaticBindingFlags
internal MethodAttributes PublicMethodAttributes
internal MethodAttributes PublicOverrideMethodAttributes
internal MethodAttributes ProtectedOverrideMethodAttributes
internal MethodAttributes PrivateMethodAttributes
internal Type[] EmptyTypeArray
internal String[] EmptyStringArray
private TypeBuilder typeBuilder
private MethodBuilder methodBuilder
private ILGenerator ilGen
private Dictionary`2<string, ArgBuilder> argList
private LocalScope currentScope
private Dictionary`2<Tuple`2<Type, string>, Queue`1<LocalBuilder>> freeLocals
private Stack blockStack
private Label methodEndLabel
internal LocalBuilder retLocal
internal Label retLabel
private Dictionary`2<Type, LocalBuilder> TmpLocals
private OpCode[] BranchCodes
private Stack leaveLabels
private OpCode[] LdindOpCodes
private OpCode[] LdelemOpCodes
private OpCode[] StelemOpCodes
private OpCode[] ConvOpCodes
private string tempFilesLocation
private int initElseIfStack
private IfState elseIfState
private int initIfStack
private Stack whileStack
internal MethodBuilder MethodBuilder
internal LocalBuilder ReturnLocal
internal Label ReturnLabel
internal string TempFilesLocation
internal bool IsValidLanguageIndependentIdentifier(string ident)
internal void ValidateIdentifiers(CodeObject e)
internal void .ctor(TypeBuilder typeBuilder)
internal bool IsNullableGenericType(Type type)
internal void AssertHasInterface(Type type, Type iType)
internal void BeginMethod(Type returnType, string methodName, Type[] argTypes, String[] argNames, MethodAttributes methodAttributes)
internal void BeginMethod(Type returnType, MethodBuilderInfo methodBuilderInfo, Type[] argTypes, String[] argNames, MethodAttributes methodAttributes)
private void InitILGeneration(Type[] argTypes, String[] argNames, bool isStatic)
internal MethodBuilder EndMethod()
internal MethodBuilder get_MethodBuilder()
internal Exception NotSupported(string msg)
internal ArgBuilder GetArg(string name)
internal LocalBuilder GetLocal(string name)
internal LocalBuilder get_ReturnLocal()
internal Label get_ReturnLabel()
internal LocalBuilder GetTempLocal(Type type)
internal Type GetVariableType(object var)
internal object GetVariable(string name)
internal bool TryGetVariable(string name, Object& variable)
internal void EnterScope()
internal void ExitScope()
private bool TryDequeueLocal(Type type, string name, LocalBuilder& local)
internal LocalBuilder DeclareLocal(Type type, string name)
internal LocalBuilder DeclareOrGetLocal(Type type, string name)
internal object For(LocalBuilder local, object start, object end)
internal void EndFor()
internal void If()
internal void IfNot()
private OpCode GetBranchCode(Cmp cmp)
internal void If(Cmp cmpOp)
internal void If(object value1, Cmp cmpOp, object value2)
internal void Else()
internal void EndIf()
internal void BeginExceptionBlock()
internal void BeginCatchBlock(Type exception)
internal void EndExceptionBlock()
internal void Leave()
internal void Call(MethodInfo methodInfo)
internal void Call(ConstructorInfo ctor)
internal void New(ConstructorInfo constructorInfo)
internal void InitObj(Type valueType)
internal void NewArray(Type elementType, object len)
internal void LoadArrayElement(object obj, object arrayIndex)
internal void StoreArrayElement(object obj, object arrayIndex, object value)
private bool IsStruct(Type objType)
internal Type LoadMember(object obj, MemberInfo memberInfo)
private MethodInfo GetPropertyMethodFromBaseType(PropertyInfo propertyInfo, bool isGetter)
internal Type LoadMember(MemberInfo memberInfo)
internal Type LoadMemberAddress(MemberInfo memberInfo)
internal void StoreMember(MemberInfo memberInfo)
internal void Load(object obj)
internal void LoadAddress(object obj)
internal void ConvertAddress(Type source, Type target)
internal void ConvertValue(Type source, Type target)
internal void Castclass(Type target)
internal void Box(Type type)
internal void Unbox(Type type)
private OpCode GetLdindOpCode(TypeCode typeCode)
internal void Ldobj(Type type)
internal void Stobj(Type type)
internal void Ceq()
internal void Clt()
internal void Cne()
internal void Ble(Label label)
internal void Throw()
internal void Ldtoken(Type t)
internal void Ldc(object o)
internal void Ldc(bool boolVar)
internal void Ldc(int intVar)
internal void Ldc(long l)
internal void Ldc(float f)
internal void Ldc(double d)
internal void Ldstr(string strVar)
internal void LdlocAddress(LocalBuilder localBuilder)
internal void Ldloc(LocalBuilder localBuilder)
internal void Ldloc(string name)
internal void Stloc(Type type, string name)
internal void Stloc(LocalBuilder local)
internal void Ldloc(Type type, string name)
internal void Ldloca(LocalBuilder localBuilder)
internal void LdargAddress(ArgBuilder argBuilder)
internal void Ldarg(string arg)
internal void Ldarg(ArgBuilder arg)
internal void Ldarg(int slot)
internal void Ldarga(ArgBuilder argBuilder)
internal void Ldarga(int slot)
internal void Ldlen()
private OpCode GetLdelemOpCode(TypeCode typeCode)
internal void Ldelem(Type arrayElementType)
internal void Ldelema(Type arrayElementType)
private OpCode GetStelemOpCode(TypeCode typeCode)
internal void Stelem(Type arrayElementType)
internal Label DefineLabel()
internal void MarkLabel(Label label)
internal void Nop()
internal void Add()
internal void Ret()
internal void Br(Label label)
internal void Br_S(Label label)
internal void Blt(Label label)
internal void Brfalse(Label label)
internal void Brtrue(Label label)
internal void Pop()
internal void Dup()
internal void Ldftn(MethodInfo methodInfo)
private void InternalIf(bool negate)
private OpCode GetConvOpCode(TypeCode typeCode)
private void InternalConvert(Type source, Type target, bool isAddress)
private IfState PopIfState()
internal AssemblyBuilder CreateAssemblyBuilder(AppDomain appDomain, string name)
internal string get_TempFilesLocation()
internal void set_TempFilesLocation(string value)
internal ModuleBuilder CreateModuleBuilder(AssemblyBuilder assemblyBuilder, string name)
internal TypeBuilder CreateTypeBuilder(ModuleBuilder moduleBuilder, string name, TypeAttributes attributes, Type parent, Type[] interfaces)
internal void InitElseIf()
internal void InitIf()
internal void AndIf(Cmp cmpOp)
internal void AndIf()
internal void IsInst(Type type)
internal void Beq(Label label)
internal void Bne(Label label)
internal void GotoMethodEnd()
internal void WhileBegin()
internal void WhileEnd()
internal void WhileBreak()
internal void WhileContinue()
internal void WhileBeginCondition()
internal void WhileEndCondition()
}
internal System.Xml.Serialization.CodeGeneratorConversionException : Exception {
private Type sourceType
private Type targetType
private bool isAddress
private string reason
public void .ctor(Type sourceType, Type targetType, bool isAddress, string reason)
}
public System.Xml.Serialization.CodeIdentifier : object {
internal CodeDomProvider csharp
internal int MaxIdentifierLength
public string MakePascal(string identifier)
public string MakeCamel(string identifier)
public string MakeValid(string identifier)
internal string MakeValidInternal(string identifier)
private bool IsValidStart(char c)
private bool IsValid(char c)
internal void CheckValidIdentifier(string ident)
internal string GetCSharpName(string name)
private int GetCSharpName(Type t, Type[] parameters, int index, StringBuilder sb)
internal string GetCSharpName(Type t)
private void EscapeKeywords(string identifier, CodeDomProvider codeProvider, StringBuilder sb)
private string EscapeKeywords(string identifier, CodeDomProvider codeProvider)
}
public System.Xml.Serialization.CodeIdentifiers : object {
private Hashtable identifiers
private Hashtable reservedIdentifiers
private ArrayList list
private bool camelCase
public bool UseCamelCasing
public void .ctor(bool caseSensitive)
public void Clear()
public bool get_UseCamelCasing()
public void set_UseCamelCasing(bool value)
public string MakeRightCase(string identifier)
public string MakeUnique(string identifier)
public void AddReserved(string identifier)
public void RemoveReserved(string identifier)
public string AddUnique(string identifier, object value)
public bool IsInUse(string identifier)
public void Add(string identifier, object value)
public void Remove(string identifier)
public object ToArray(Type type)
internal CodeIdentifiers Clone()
}
internal System.Xml.Serialization.Compiler : object {
private bool debugEnabled
private Hashtable imports
private StringWriter writer
protected String[] Imports
internal TextWriter Source
protected String[] get_Imports()
internal void AddImport(Type type, Hashtable types)
internal void AddImport(Assembly assembly)
internal TextWriter get_Source()
internal void Close()
internal string GetTempAssemblyPath(string baseDir, Assembly assembly, string defaultNamespace)
internal string GetTempAssemblyName(AssemblyName parent, string ns)
internal Assembly Compile(Assembly parent, string ns, XmlSerializerCompilerParameters xmlParameters, Evidence evidence)
private string AssemblyNameFromOptions(string options)
internal string GetCurrentUser()
}
internal System.Xml.Serialization.Configuration.ConfigurationStrings : object {
internal string Name
internal string SchemaImporterExtensionsSectionName
internal string DateTimeSerializationSectionName
internal string XmlSerializerSectionName
internal string SectionGroupName
internal string SqlTypesSchemaImporterChar
internal string SqlTypesSchemaImporterNChar
internal string SqlTypesSchemaImporterVarChar
internal string SqlTypesSchemaImporterNVarChar
internal string SqlTypesSchemaImporterText
internal string SqlTypesSchemaImporterNText
internal string SqlTypesSchemaImporterVarBinary
internal string SqlTypesSchemaImporterBinary
internal string SqlTypesSchemaImporterImage
internal string SqlTypesSchemaImporterDecimal
internal string SqlTypesSchemaImporterNumeric
internal string SqlTypesSchemaImporterBigInt
internal string SqlTypesSchemaImporterInt
internal string SqlTypesSchemaImporterSmallInt
internal string SqlTypesSchemaImporterTinyInt
internal string SqlTypesSchemaImporterBit
internal string SqlTypesSchemaImporterFloat
internal string SqlTypesSchemaImporterReal
internal string SqlTypesSchemaImporterDateTime
internal string SqlTypesSchemaImporterSmallDateTime
internal string SqlTypesSchemaImporterMoney
internal string SqlTypesSchemaImporterSmallMoney
internal string SqlTypesSchemaImporterUniqueIdentifier
internal string Type
internal string Mode
internal string CheckDeserializeAdvances
internal string TempFilesLocation
internal string UseLegacySerializerGeneration
internal string SchemaImporterExtensionsSectionPath
internal string DateTimeSerializationSectionPath
internal string XmlSerializerSectionPath
private string GetSectionPath(string sectionName)
internal string get_SchemaImporterExtensionsSectionPath()
internal string get_DateTimeSerializationSectionPath()
internal string get_XmlSerializerSectionPath()
}
public System.Xml.Serialization.Configuration.DateTimeSerializationSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty mode
protected ConfigurationPropertyCollection Properties
public DateTimeSerializationMode Mode
protected ConfigurationPropertyCollection get_Properties()
public DateTimeSerializationMode get_Mode()
public void set_Mode(DateTimeSerializationMode value)
}
public System.Xml.Serialization.Configuration.RootedPathValidator : ConfigurationValidatorBase {
public bool CanValidate(Type type)
public void Validate(object value)
}
public System.Xml.Serialization.Configuration.SchemaImporterExtensionElement : ConfigurationElement {
private ConfigurationPropertyCollection properties
private ConfigurationProperty name
private ConfigurationProperty type
public string Name
protected ConfigurationPropertyCollection Properties
public Type Type
internal string Key
public void .ctor(string name, string type)
public void .ctor(string name, Type type)
public string get_Name()
public void set_Name(string value)
protected ConfigurationPropertyCollection get_Properties()
public Type get_Type()
public void set_Type(Type value)
internal string get_Key()
}
public System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection : ConfigurationElementCollection {
public SchemaImporterExtensionElement Item
public SchemaImporterExtensionElement Item
public SchemaImporterExtensionElement get_Item(int index)
public void set_Item(int index, SchemaImporterExtensionElement value)
public SchemaImporterExtensionElement get_Item(string name)
public void set_Item(string name, SchemaImporterExtensionElement value)
public void Add(SchemaImporterExtensionElement element)
public void Clear()
protected ConfigurationElement CreateNewElement()
protected object GetElementKey(ConfigurationElement element)
public int IndexOf(SchemaImporterExtensionElement element)
public void Remove(SchemaImporterExtensionElement element)
public void Remove(string name)
public void RemoveAt(int index)
}
public System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty schemaImporterExtensions
protected ConfigurationPropertyCollection Properties
public SchemaImporterExtensionElementCollection SchemaImporterExtensions
internal SchemaImporterExtensionCollection SchemaImporterExtensionsInternal
private string GetSqlTypeSchemaImporter(string typeName)
protected void InitializeDefault()
protected ConfigurationPropertyCollection get_Properties()
public SchemaImporterExtensionElementCollection get_SchemaImporterExtensions()
internal SchemaImporterExtensionCollection get_SchemaImporterExtensionsInternal()
}
public System.Xml.Serialization.Configuration.SerializationSectionGroup : ConfigurationSectionGroup {
public SchemaImporterExtensionsSection SchemaImporterExtensions
public DateTimeSerializationSection DateTimeSerialization
public XmlSerializerSection XmlSerializer
public SchemaImporterExtensionsSection get_SchemaImporterExtensions()
public DateTimeSerializationSection get_DateTimeSerialization()
public XmlSerializerSection get_XmlSerializer()
}
public System.Xml.Serialization.Configuration.XmlSerializerSection : ConfigurationSection {
private ConfigurationPropertyCollection properties
private ConfigurationProperty checkDeserializeAdvances
private ConfigurationProperty tempFilesLocation
private ConfigurationProperty useLegacySerializerGeneration
protected ConfigurationPropertyCollection Properties
public bool CheckDeserializeAdvances
public string TempFilesLocation
public bool UseLegacySerializerGeneration
protected ConfigurationPropertyCollection get_Properties()
public bool get_CheckDeserializeAdvances()
public void set_CheckDeserializeAdvances(bool value)
public string get_TempFilesLocation()
public void set_TempFilesLocation(string value)
public bool get_UseLegacySerializerGeneration()
public void set_UseLegacySerializerGeneration(bool value)
}
internal System.Xml.Serialization.ConstantMapping : Mapping {
private string xmlName
private string name
private long value
internal string XmlName
internal string Name
internal long Value
internal string get_XmlName()
internal void set_XmlName(string value)
internal string get_Name()
internal void set_Name(string value)
internal long get_Value()
internal void set_Value(long value)
}
internal System.Xml.Serialization.ConstantModel : object {
private FieldInfo fieldInfo
private long value
internal string Name
internal long Value
internal FieldInfo FieldInfo
internal void .ctor(FieldInfo fieldInfo, long value)
internal string get_Name()
internal long get_Value()
internal FieldInfo get_FieldInfo()
}
internal System.Xml.Serialization.DynamicAssemblies : object {
private ArrayList assembliesInConfig
private Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) nameToAssemblyMap
private Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) assemblyToNameMap
private Hashtable tableIsTypeDynamic
private FileIOPermission modreq(System.Runtime.CompilerServices.IsVolatile) fileIOPermission
private FileIOPermission UnrestrictedFileIOPermission
private FileIOPermission get_UnrestrictedFileIOPermission()
internal bool IsTypeDynamic(Type type)
internal bool IsTypeDynamic(Type[] arguments)
internal void Add(Assembly a)
internal Assembly Get(string fullName)
internal string GetName(Assembly a)
}
internal System.Xml.Serialization.ElementAccessor : Accessor {
private bool nullable
private bool isSoap
private bool unbounded
internal bool IsSoap
internal bool IsNullable
internal bool IsUnbounded
internal bool get_IsSoap()
internal void set_IsSoap(bool value)
internal bool get_IsNullable()
internal void set_IsNullable(bool value)
internal bool get_IsUnbounded()
internal void set_IsUnbounded(bool value)
internal ElementAccessor Clone()
}
internal System.Xml.Serialization.EnumMapping : PrimitiveMapping {
private ConstantMapping[] constants
private bool isFlags
internal bool IsFlags
internal ConstantMapping[] Constants
internal bool get_IsFlags()
internal void set_IsFlags(bool value)
internal ConstantMapping[] get_Constants()
internal void set_Constants(ConstantMapping[] value)
}
internal System.Xml.Serialization.EnumModel : TypeModel {
private ConstantModel[] constants
internal ConstantModel[] Constants
internal void .ctor(Type type, TypeDesc typeDesc, ModelScope scope)
internal ConstantModel[] get_Constants()
private ConstantModel GetConstantModel(FieldInfo fieldInfo)
}
internal System.Xml.Serialization.FieldModel : object {
private SpecifiedAccessor checkSpecified
private MemberInfo memberInfo
private MemberInfo checkSpecifiedMemberInfo
private MethodInfo checkShouldPersistMethodInfo
private bool checkShouldPersist
private bool readOnly
private bool isProperty
private Type fieldType
private string name
private TypeDesc fieldTypeDesc
internal string Name
internal Type FieldType
internal TypeDesc FieldTypeDesc
internal bool CheckShouldPersist
internal SpecifiedAccessor CheckSpecified
internal MemberInfo MemberInfo
internal MemberInfo CheckSpecifiedMemberInfo
internal MethodInfo CheckShouldPersistMethodInfo
internal bool ReadOnly
internal bool IsProperty
internal void .ctor(string name, Type fieldType, TypeDesc fieldTypeDesc, bool checkSpecified, bool checkShouldPersist)
internal void .ctor(string name, Type fieldType, TypeDesc fieldTypeDesc, bool checkSpecified, bool checkShouldPersist, bool readOnly)
internal void .ctor(MemberInfo memberInfo, Type fieldType, TypeDesc fieldTypeDesc)
internal string get_Name()
internal Type get_FieldType()
internal TypeDesc get_FieldTypeDesc()
internal bool get_CheckShouldPersist()
internal SpecifiedAccessor get_CheckSpecified()
internal MemberInfo get_MemberInfo()
internal MemberInfo get_CheckSpecifiedMemberInfo()
internal MethodInfo get_CheckShouldPersistMethodInfo()
internal bool get_ReadOnly()
internal bool get_IsProperty()
}
internal System.Xml.Serialization.ForState : object {
private LocalBuilder indexVar
private Label beginLabel
private Label testLabel
private object end
internal LocalBuilder Index
internal Label BeginLabel
internal Label TestLabel
internal object End
internal void .ctor(LocalBuilder indexVar, Label beginLabel, Label testLabel, object end)
internal LocalBuilder get_Index()
internal Label get_BeginLabel()
internal Label get_TestLabel()
internal object get_End()
}
internal System.Xml.Serialization.IfState : object {
private Label elseBegin
private Label endIf
internal Label EndIf
internal Label ElseBegin
internal Label get_EndIf()
internal void set_EndIf(Label value)
internal Label get_ElseBegin()
internal void set_ElseBegin(Label value)
}
public System.Xml.Serialization.ImportContext : object {
private bool shareTypes
private SchemaObjectCache cache
private Hashtable mappings
private Hashtable elements
private CodeIdentifiers typeIdentifiers
internal SchemaObjectCache Cache
internal Hashtable Elements
internal Hashtable Mappings
public CodeIdentifiers TypeIdentifiers
public bool ShareTypes
public StringCollection Warnings
public void .ctor(CodeIdentifiers identifiers, bool shareTypes)
internal SchemaObjectCache get_Cache()
internal Hashtable get_Elements()
internal Hashtable get_Mappings()
public CodeIdentifiers get_TypeIdentifiers()
public bool get_ShareTypes()
public StringCollection get_Warnings()
}
internal System.Xml.Serialization.ImportStructWorkItem : object {
private StructModel model
private StructMapping mapping
internal StructModel Model
internal StructMapping Mapping
internal void .ctor(StructModel model, StructMapping mapping)
internal StructModel get_Model()
internal StructMapping get_Mapping()
}
internal System.Xml.Serialization.INameScope {
public object Item
public object get_Item(string name, string ns)
public void set_Item(string name, string ns, object value)
}
internal System.Xml.Serialization.IndentedWriter : object {
private TextWriter writer
private bool needIndent
private int indentLevel
private bool compact
internal int Indent
internal void .ctor(TextWriter writer, bool compact)
internal int get_Indent()
internal void set_Indent(int value)
internal void Write(string s)
internal void Write(char c)
internal void WriteLine(string s)
internal void WriteLine()
internal void WriteIndent()
}
public System.Xml.Serialization.IXmlSerializable {
public XmlSchema GetSchema()
public void ReadXml(XmlReader reader)
public void WriteXml(XmlWriter writer)
}
public System.Xml.Serialization.IXmlTextParser {
public bool Normalized
public WhitespaceHandling WhitespaceHandling
public bool get_Normalized()
public void set_Normalized(bool value)
public WhitespaceHandling get_WhitespaceHandling()
public void set_WhitespaceHandling(WhitespaceHandling value)
}
internal System.Xml.Serialization.LocalScope : object {
public LocalScope parent
private Dictionary`2<string, LocalBuilder> locals
public LocalBuilder Item
public void .ctor(LocalScope parent)
public void Add(string key, LocalBuilder value)
public bool ContainsKey(string key)
public bool TryGetValue(string key, LocalBuilder& value)
public LocalBuilder get_Item(string key)
public void set_Item(string key, LocalBuilder value)
public void AddToFreeLocals(Dictionary`2<Tuple`2<Type, string>, Queue`1<LocalBuilder>> freeLocals)
}
internal System.Xml.Serialization.Mapping : object {
private bool isSoap
internal bool IsSoap
protected void .ctor(Mapping mapping)
internal bool get_IsSoap()
internal void set_IsSoap(bool value)
}
internal System.Xml.Serialization.MemberMapping : AccessorMapping {
private string name
private bool checkShouldPersist
private SpecifiedAccessor checkSpecified
private bool isReturnValue
private bool readOnly
private int sequenceId
private MemberInfo memberInfo
private MemberInfo checkSpecifiedMemberInfo
private MethodInfo checkShouldPersistMethodInfo
internal bool CheckShouldPersist
internal SpecifiedAccessor CheckSpecified
internal string Name
internal MemberInfo MemberInfo
internal MemberInfo CheckSpecifiedMemberInfo
internal MethodInfo CheckShouldPersistMethodInfo
internal bool IsReturnValue
internal bool ReadOnly
internal bool IsSequence
internal int SequenceId
private void .ctor(MemberMapping mapping)
internal bool get_CheckShouldPersist()
internal void set_CheckShouldPersist(bool value)
internal SpecifiedAccessor get_CheckSpecified()
internal void set_CheckSpecified(SpecifiedAccessor value)
internal string get_Name()
internal void set_Name(string value)
internal MemberInfo get_MemberInfo()
internal void set_MemberInfo(MemberInfo value)
internal MemberInfo get_CheckSpecifiedMemberInfo()
internal void set_CheckSpecifiedMemberInfo(MemberInfo value)
internal MethodInfo get_CheckShouldPersistMethodInfo()
internal void set_CheckShouldPersistMethodInfo(MethodInfo value)
internal bool get_IsReturnValue()
internal void set_IsReturnValue(bool value)
internal bool get_ReadOnly()
internal void set_ReadOnly(bool value)
internal bool get_IsSequence()
internal int get_SequenceId()
internal void set_SequenceId(int value)
private string GetNullableType(TypeDesc td)
internal MemberMapping Clone()
internal string GetTypeName(CodeDomProvider codeProvider)
}
internal System.Xml.Serialization.MemberMappingComparer : object {
public int Compare(object o1, object o2)
}
internal System.Xml.Serialization.MembersMapping : TypeMapping {
private MemberMapping[] members
private bool hasWrapperElement
private bool validateRpcWrapperElement
private bool writeAccessors
private MemberMapping xmlnsMember
internal MemberMapping[] Members
internal MemberMapping XmlnsMember
internal bool HasWrapperElement
internal bool ValidateRpcWrapperElement
internal bool WriteAccessors
internal MemberMapping[] get_Members()
internal void set_Members(MemberMapping[] value)
internal MemberMapping get_XmlnsMember()
internal void set_XmlnsMember(MemberMapping value)
internal bool get_HasWrapperElement()
internal void set_HasWrapperElement(bool value)
internal bool get_ValidateRpcWrapperElement()
internal void set_ValidateRpcWrapperElement(bool value)
internal bool get_WriteAccessors()
internal void set_WriteAccessors(bool value)
}
internal System.Xml.Serialization.MethodBuilderInfo : object {
public MethodBuilder MethodBuilder
public Type[] ParameterTypes
public void .ctor(MethodBuilder methodBuilder, Type[] parameterTypes)
public void Validate(Type returnType, Type[] parameterTypes, MethodAttributes attributes)
}
internal System.Xml.Serialization.ModelScope : object {
private TypeScope typeScope
private Hashtable models
private Hashtable arrayModels
internal TypeScope TypeScope
internal void .ctor(TypeScope typeScope)
internal TypeScope get_TypeScope()
internal TypeModel GetTypeModel(Type type)
internal TypeModel GetTypeModel(Type type, bool directReference)
internal ArrayModel GetArrayModel(Type type)
}
internal System.Xml.Serialization.NameKey : object {
private string ns
private string name
internal void .ctor(string name, string ns)
public bool Equals(object other)
public int GetHashCode()
}
internal System.Xml.Serialization.NameTable : object {
private Hashtable table
internal object Item
internal object Item
private object System.Xml.Serialization.INameScope.Item
internal ICollection Values
internal void Add(XmlQualifiedName qname, object value)
internal void Add(string name, string ns, object value)
internal object get_Item(XmlQualifiedName qname)
internal void set_Item(XmlQualifiedName qname, object value)
internal object get_Item(string name, string ns)
internal void set_Item(string name, string ns, object value)
private object System.Xml.Serialization.INameScope.get_Item(string name, string ns)
private void System.Xml.Serialization.INameScope.set_Item(string name, string ns, object value)
internal ICollection get_Values()
internal Array ToArray(Type type)
}
internal System.Xml.Serialization.NullableMapping : TypeMapping {
private TypeMapping baseMapping
internal TypeMapping BaseMapping
internal string DefaultElementName
internal TypeMapping get_BaseMapping()
internal void set_BaseMapping(TypeMapping value)
internal string get_DefaultElementName()
}
internal System.Xml.Serialization.PrimitiveMapping : TypeMapping {
private bool isList
internal bool IsList
internal bool get_IsList()
internal void set_IsList(bool value)
}
internal System.Xml.Serialization.PrimitiveModel : TypeModel {
internal void .ctor(Type type, TypeDesc typeDesc, ModelScope scope)
}
internal System.Xml.Serialization.QNameComparer : object {
public int Compare(object o1, object o2)
}
internal System.Xml.Serialization.RecursionLimiter : object {
private int maxDepth
private int depth
private WorkItems deferredWorkItems
internal bool IsExceededLimit
internal int Depth
internal WorkItems DeferredWorkItems
internal bool get_IsExceededLimit()
internal int get_Depth()
internal void set_Depth(int value)
internal WorkItems get_DeferredWorkItems()
}
internal System.Xml.Serialization.ReflectionAwareCodeGen : object {
private string hexDigits
private string arrayMemberKey
private Hashtable reflectionVariables
private int nextReflectionVariableNumber
private IndentedWriter writer
private string helperClassesForUseReflection
internal void .ctor(IndentedWriter writer)
internal void WriteReflectionInit(TypeScope scope)
private string WriteTypeInfo(TypeScope scope, TypeDesc typeDesc, Type type)
private void InitTheFirstTime()
private void WriteMappingInfo(TypeMapping mapping, string typeVariable, Type type)
private void WriteCollectionInfo(string typeVariable, TypeDesc typeDesc, Type type)
private string WriteAssemblyInfo(Type type)
private string WriteMemberInfo(Type type, string escapedName, string typeVariable, string memberName)
private string WriteMethodInfo(string escapedName, string typeVariable, string memberName, bool isNonPublic, String[] paramTypes)
private string WriteDefaultIndexerInit(Type type, string escapedName, bool collectionUseReflection, bool elementUseReflection)
private string GenerateVariableName(string prefix, string fullName)
internal string GetReflectionVariable(string typeFullName, string memberName)
internal string GetStringForMethodInvoke(string obj, string escapedTypeName, string methodName, bool useReflection, String[] args)
internal string GetStringForEnumCompare(EnumMapping mapping, string memberName, bool useReflection)
internal string GetStringForEnumLongValue(string variable, bool useReflection)
internal string GetStringForTypeof(string typeFullName, bool useReflection)
internal string GetStringForMember(string obj, string memberName, TypeDesc typeDesc)
internal string GetStringForEnumMember(string typeFullName, string memberName, bool useReflection)
internal string GetStringForArrayMember(string arrayName, string subscript, TypeDesc arrayTypeDesc)
internal string GetStringForMethod(string obj, string typeFullName, string memberName, bool useReflection)
internal string GetStringForCreateInstance(string escapedTypeName, bool useReflection, bool ctorInaccessible, bool cast)
internal string GetStringForCreateInstance(string escapedTypeName, bool useReflection, bool ctorInaccessible, bool cast, string arg)
internal string GetStringForCreateInstance(string type, string cast, bool nonPublic, string arg)
internal void WriteLocalDecl(string typeFullName, string variableName, string initValue, bool useReflection)
internal void WriteCreateInstance(string escapedName, string source, bool useReflection, bool ctorInaccessible)
internal void WriteInstanceOf(string source, string escapedTypeName, bool useReflection)
internal void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc)
internal void WriteEnumCase(string fullTypeName, ConstantMapping c, bool useReflection)
internal void WriteTypeCompare(string variable, string escapedTypeName, bool useReflection)
internal void WriteArrayTypeCompare(string variable, string escapedTypeName, string elementTypeName, bool useReflection)
internal void WriteQuotedCSharpString(IndentedWriter writer, string value)
internal void WriteQuotedCSharpString(string value)
}
internal System.Xml.Serialization.ReflectionAwareILGen : object {
private string hexDigits
private string arrayMemberKey
internal void WriteReflectionInit(TypeScope scope)
internal void ILGenForEnumLongValue(CodeGenerator ilg, string variable)
internal string GetStringForTypeof(string typeFullName)
internal string GetStringForMember(string obj, string memberName, TypeDesc typeDesc)
internal SourceInfo GetSourceForMember(string obj, MemberMapping member, TypeDesc typeDesc, CodeGenerator ilg)
internal SourceInfo GetSourceForMember(string obj, MemberMapping member, MemberInfo memberInfo, TypeDesc typeDesc, CodeGenerator ilg)
internal void ILGenForEnumMember(CodeGenerator ilg, Type type, string memberName)
internal string GetStringForArrayMember(string arrayName, string subscript, TypeDesc arrayTypeDesc)
internal string GetStringForMethod(string obj, string typeFullName, string memberName)
internal void ILGenForCreateInstance(CodeGenerator ilg, Type type, bool ctorInaccessible, bool cast)
internal void ILGenForCreateInstance(CodeGenerator ilg, Type type, Type cast, bool nonPublic)
internal void WriteLocalDecl(string variableName, SourceInfo initValue)
internal void WriteCreateInstance(string source, bool ctorInaccessible, Type type, CodeGenerator ilg)
internal void WriteInstanceOf(SourceInfo source, Type type, CodeGenerator ilg)
internal void WriteArrayLocalDecl(string typeName, string variableName, SourceInfo initValue, TypeDesc arrayTypeDesc)
internal void WriteTypeCompare(string variable, Type type, CodeGenerator ilg)
internal void WriteArrayTypeCompare(string variable, Type arrayType, CodeGenerator ilg)
internal string GetQuotedCSharpString(IndentedWriter notUsed, string value)
internal string GetCSharpString(string value)
}
internal System.Xml.Serialization.SchemaGraph : object {
private ArrayList empty
private XmlSchemas schemas
private Hashtable scope
private int items
internal void .ctor(Hashtable scope, XmlSchemas schemas)
internal ArrayList GetItems()
internal void AddRef(ArrayList list, XmlSchemaObject o)
internal ArrayList Depends(XmlSchemaObject item)
internal void Depends(XmlSchemaObject item, ArrayList refs)
}
public System.Xml.Serialization.SchemaImporter : object {
private XmlSchemas schemas
private StructMapping root
private CodeGenerationOptions options
private CodeDomProvider codeProvider
private TypeScope scope
private ImportContext context
private bool rootImported
private NameTable typesInUse
private NameTable groupsInUse
private SchemaImporterExtensionCollection extensions
internal ImportContext Context
internal CodeDomProvider CodeProvider
public SchemaImporterExtensionCollection Extensions
internal Hashtable ImportedElements
internal Hashtable ImportedMappings
internal CodeIdentifiers TypeIdentifiers
internal XmlSchemas Schemas
internal TypeScope Scope
internal NameTable GroupsInUse
internal NameTable TypesInUse
internal CodeGenerationOptions Options
internal void .ctor(XmlSchemas schemas, CodeGenerationOptions options, CodeDomProvider codeProvider, ImportContext context)
internal ImportContext get_Context()
internal CodeDomProvider get_CodeProvider()
public SchemaImporterExtensionCollection get_Extensions()
internal Hashtable get_ImportedElements()
internal Hashtable get_ImportedMappings()
internal CodeIdentifiers get_TypeIdentifiers()
internal XmlSchemas get_Schemas()
internal TypeScope get_Scope()
internal NameTable get_GroupsInUse()
internal NameTable get_TypesInUse()
internal CodeGenerationOptions get_Options()
internal void MakeDerived(StructMapping structMapping, Type baseType, bool baseTypeCanBeIndirect)
internal string GenerateUniqueTypeName(string typeName)
private StructMapping CreateRootMapping()
internal StructMapping GetRootMapping()
internal StructMapping ImportRootMapping()
internal void ImportDerivedTypes(XmlQualifiedName baseName)
internal void AddReference(XmlQualifiedName name, NameTable references, string error)
internal void RemoveReference(XmlQualifiedName name, NameTable references)
internal void AddReservedIdentifiersForDataBinding(CodeIdentifiers scope)
}
internal System.Xml.Serialization.SchemaObjectCache : object {
private Hashtable graph
private Hashtable hash
private Hashtable objectCache
private StringCollection warnings
internal Hashtable looks
private Hashtable Graph
private Hashtable Hash
private Hashtable ObjectCache
internal StringCollection Warnings
private Hashtable get_Graph()
private Hashtable get_Hash()
private Hashtable get_ObjectCache()
internal StringCollection get_Warnings()
internal XmlSchemaObject AddItem(XmlSchemaObject item, XmlQualifiedName qname, XmlSchemas schemas)
internal bool Match(XmlSchemaObject o1, XmlSchemaObject o2, bool shareTypes)
private ArrayList GetDependencies(XmlSchemaObject o, ArrayList deps, Hashtable refs)
private int CompositeHash(XmlSchemaObject o, int hash)
internal void GenerateSchemaGraph(XmlSchemas schemas)
private int GetHash(XmlSchemaObject o)
private string ToString(XmlSchemaObject o, SchemaObjectWriter writer)
}
internal System.Xml.Serialization.SchemaObjectWriter : object {
private StringBuilder w
private int indentLevel
private void WriteIndent()
protected void WriteAttribute(string localName, string ns, string value)
protected void WriteAttribute(string localName, string ns, XmlQualifiedName value)
protected void WriteStartElement(string name)
protected void WriteEndElement()
protected void NewLine()
protected string GetString()
private void WriteAttribute(XmlAttribute a)
private void WriteAttributes(XmlAttribute[] a, XmlSchemaObject o)
internal string ToString(NamespaceList list)
internal string WriteXmlSchemaObject(XmlSchemaObject o)
private void WriteSortedItems(XmlSchemaObjectCollection items)
private void Write1_XmlSchemaAttribute(XmlSchemaAttribute o)
private void Write3_XmlSchemaObject(XmlSchemaObject o)
private void Write5_XmlSchemaAnnotation(XmlSchemaAnnotation o)
private void Write6_XmlSchemaDocumentation(XmlSchemaDocumentation o)
private void Write7_XmlSchemaAppInfo(XmlSchemaAppInfo o)
private void Write9_XmlSchemaSimpleType(XmlSchemaSimpleType o)
private string Write11_XmlSchemaDerivationMethod(XmlSchemaDerivationMethod v)
private void Write12_XmlSchemaSimpleTypeUnion(XmlSchemaSimpleTypeUnion o)
private void Write14_XmlSchemaSimpleTypeList(XmlSchemaSimpleTypeList o)
private void Write15_XmlSchemaSimpleTypeRestriction(XmlSchemaSimpleTypeRestriction o)
private void WriteFacets(XmlSchemaObjectCollection facets)
private void Write_XmlSchemaFacet(string name, XmlSchemaFacet o)
private string Write30_XmlSchemaUse(XmlSchemaUse v)
private void Write31_XmlSchemaAttributeGroup(XmlSchemaAttributeGroup o)
private void Write32_XmlSchemaAttributeGroupRef(XmlSchemaAttributeGroupRef o)
private void Write33_XmlSchemaAnyAttribute(XmlSchemaAnyAttribute o)
private string Write34_XmlSchemaContentProcessing(XmlSchemaContentProcessing v)
private void Write35_XmlSchemaComplexType(XmlSchemaComplexType o)
private void Write36_XmlSchemaSimpleContent(XmlSchemaSimpleContent o)
private void Write38_XmlSchemaSimpleContentExtension(XmlSchemaSimpleContentExtension o)
private void Write40_XmlSchemaSimpleContentRestriction(XmlSchemaSimpleContentRestriction o)
private void Write41_XmlSchemaComplexContent(XmlSchemaComplexContent o)
private void Write42_XmlSchemaComplexContentExtension(XmlSchemaComplexContentExtension o)
private void Write43_XmlSchemaAll(XmlSchemaAll o)
private void Write46_XmlSchemaElement(XmlSchemaElement o)
private void Write47_XmlSchemaKey(XmlSchemaKey o)
private void Write48_XmlSchemaIdentityConstraint(XmlSchemaIdentityConstraint o)
private void Write49_XmlSchemaXPath(string name, string ns, XmlSchemaXPath o)
private void Write50_XmlSchemaKeyref(XmlSchemaKeyref o)
private void Write51_XmlSchemaUnique(XmlSchemaUnique o)
private void Write52_XmlSchemaChoice(XmlSchemaChoice o)
private void Write53_XmlSchemaAny(XmlSchemaAny o)
private void Write54_XmlSchemaSequence(XmlSchemaSequence o)
private void Write55_XmlSchemaGroupRef(XmlSchemaGroupRef o)
private void Write56_XmlSchemaComplexContentRestriction(XmlSchemaComplexContentRestriction o)
private void Write57_XmlSchemaGroup(XmlSchemaGroup o)
}
internal System.Xml.Serialization.SerializableMapping : SpecialMapping {
private XmlSchema schema
private Type type
private bool needSchema
private MethodInfo getSchemaMethod
private XmlQualifiedName xsiType
private XmlSchemaType xsdType
private XmlSchemaSet schemas
private bool any
private string namespaces
private SerializableMapping baseMapping
private SerializableMapping derivedMappings
private SerializableMapping nextDerivedMapping
private SerializableMapping next
internal bool IsAny
internal string NamespaceList
internal SerializableMapping DerivedMappings
internal SerializableMapping NextDerivedMapping
internal SerializableMapping Next
internal Type Type
internal XmlSchemaSet Schemas
internal XmlSchema Schema
internal XmlQualifiedName XsiType
internal XmlSchemaType XsdType
internal void .ctor(MethodInfo getSchemaMethod, bool any, string ns)
internal void .ctor(XmlQualifiedName xsiType, XmlSchemaSet schemas)
internal void SetBaseMapping(SerializableMapping mapping)
internal bool get_IsAny()
internal string get_NamespaceList()
internal SerializableMapping get_DerivedMappings()
internal SerializableMapping get_NextDerivedMapping()
internal SerializableMapping get_Next()
internal void set_Next(SerializableMapping value)
internal Type get_Type()
internal void set_Type(Type value)
internal XmlSchemaSet get_Schemas()
internal XmlSchema get_Schema()
internal XmlQualifiedName get_XsiType()
internal XmlSchemaType get_XsdType()
internal void ValidationCallbackWithErrorCode(object sender, ValidationEventArgs args)
internal void CheckDuplicateElement(XmlSchemaElement element, string elementNs)
private bool Match(XmlSchemaElement e1, XmlSchemaElement e2)
private void RetrieveSerializableSchema()
}
internal System.Xml.Serialization.Soap : object {
internal string Encoding
internal string UrType
internal string Array
internal string ArrayType
}
internal System.Xml.Serialization.Soap12 : object {
internal string Encoding
internal string RpcNamespace
internal string RpcResult
}
public System.Xml.Serialization.SoapAttributeAttribute : Attribute {
private string attributeName
private string ns
private string dataType
public string AttributeName
public string Namespace
public string DataType
public void .ctor(string attributeName)
public string get_AttributeName()
public void set_AttributeName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_DataType()
public void set_DataType(string value)
}
internal System.Xml.Serialization.SoapAttributeFlags : Enum {
public int value__
public SoapAttributeFlags Enum
public SoapAttributeFlags Type
public SoapAttributeFlags Element
public SoapAttributeFlags Attribute
}
public System.Xml.Serialization.SoapAttributeOverrides : object {
private Hashtable types
public SoapAttributes Item
public SoapAttributes Item
public void Add(Type type, SoapAttributes attributes)
public void Add(Type type, string member, SoapAttributes attributes)
public SoapAttributes get_Item(Type type)
public SoapAttributes get_Item(Type type, string member)
}
public System.Xml.Serialization.SoapAttributes : object {
private bool soapIgnore
private SoapTypeAttribute soapType
private SoapElementAttribute soapElement
private SoapAttributeAttribute soapAttribute
private SoapEnumAttribute soapEnum
private object soapDefaultValue
internal SoapAttributeFlags SoapFlags
public SoapTypeAttribute SoapType
public SoapEnumAttribute SoapEnum
public bool SoapIgnore
public SoapElementAttribute SoapElement
public SoapAttributeAttribute SoapAttribute
public object SoapDefaultValue
public void .ctor(ICustomAttributeProvider provider)
internal SoapAttributeFlags get_SoapFlags()
public SoapTypeAttribute get_SoapType()
public void set_SoapType(SoapTypeAttribute value)
public SoapEnumAttribute get_SoapEnum()
public void set_SoapEnum(SoapEnumAttribute value)
public bool get_SoapIgnore()
public void set_SoapIgnore(bool value)
public SoapElementAttribute get_SoapElement()
public void set_SoapElement(SoapElementAttribute value)
public SoapAttributeAttribute get_SoapAttribute()
public void set_SoapAttribute(SoapAttributeAttribute value)
public object get_SoapDefaultValue()
public void set_SoapDefaultValue(object value)
}
public System.Xml.Serialization.SoapCodeExporter : CodeExporter {
public void .ctor(CodeNamespace codeNamespace)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options, Hashtable mappings)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable mappings)
public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping)
private void ExportElement(ElementAccessor element)
private void ExportType(TypeMapping mapping)
private CodeTypeDeclaration ExportStruct(StructMapping mapping)
internal void ExportDerivedStructs(StructMapping mapping)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member, bool forceUseMemberName)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member)
private void AddElementMetadata(CodeAttributeDeclarationCollection metadata, string elementName, TypeDesc typeDesc, bool isNullable)
private void AddMemberMetadata(CodeAttributeDeclarationCollection metadata, MemberMapping member, bool forceUseMemberName)
private void ExportMember(CodeTypeDeclaration codeClass, MemberMapping member)
private void ExportProperty(CodeTypeDeclaration codeClass, MemberMapping member, CodeIdentifiers memberScope)
internal void EnsureTypesExported(Accessor[] accessors, string ns)
}
public System.Xml.Serialization.SoapElementAttribute : Attribute {
private string elementName
private string dataType
private bool nullable
public string ElementName
public string DataType
public bool IsNullable
public void .ctor(string elementName)
public string get_ElementName()
public void set_ElementName(string value)
public string get_DataType()
public void set_DataType(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
}
public System.Xml.Serialization.SoapEnumAttribute : Attribute {
private string name
public string Name
public void .ctor(string name)
public string get_Name()
public void set_Name(string value)
}
public System.Xml.Serialization.SoapIncludeAttribute : Attribute {
private Type type
public Type Type
public void .ctor(Type type)
public Type get_Type()
public void set_Type(Type value)
}
public System.Xml.Serialization.SoapReflectionImporter : object {
private TypeScope typeScope
private SoapAttributeOverrides attributeOverrides
private NameTable types
private NameTable nullables
private StructMapping root
private string defaultNs
private ModelScope modelScope
public void .ctor(string defaultNamespace)
public void .ctor(SoapAttributeOverrides attributeOverrides)
public void .ctor(SoapAttributeOverrides attributeOverrides, string defaultNamespace)
public void IncludeTypes(ICustomAttributeProvider provider)
private void IncludeTypes(ICustomAttributeProvider provider, RecursionLimiter limiter)
public void IncludeType(Type type)
private void IncludeType(Type type, RecursionLimiter limiter)
public XmlTypeMapping ImportTypeMapping(Type type)
public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate, XmlMappingAccess access)
private Exception ReflectionException(string context, Exception e)
private SoapAttributes GetAttributes(Type type)
private SoapAttributes GetAttributes(MemberInfo memberInfo)
private TypeMapping ImportTypeMapping(TypeModel model, RecursionLimiter limiter)
private TypeMapping ImportTypeMapping(TypeModel model, string dataType, RecursionLimiter limiter)
private StructMapping CreateRootMapping()
private StructMapping GetRootMapping()
private TypeMapping GetTypeMapping(string typeName, string ns, TypeDesc typeDesc)
private NullableMapping CreateNullableMapping(TypeMapping baseMapping, Type type)
private StructMapping ImportStructLikeMapping(StructModel model, RecursionLimiter limiter)
private bool InitializeStructMembers(StructMapping mapping, StructModel model, RecursionLimiter limiter)
private ArrayMapping ImportArrayLikeMapping(ArrayModel model, RecursionLimiter limiter)
private void SetArrayMappingType(ArrayMapping mapping)
private PrimitiveMapping ImportPrimitiveMapping(PrimitiveModel model, string dataType)
private EnumMapping ImportEnumMapping(EnumModel model)
private ConstantMapping ImportConstantMapping(ConstantModel model)
private MembersMapping ImportMembersMapping(XmlReflectionMember[] xmlReflectionMembers, string ns, bool hasWrapperElement, bool writeAccessors, bool validateWrapperElement, RecursionLimiter limiter)
private MemberMapping ImportMemberMapping(XmlReflectionMember xmlReflectionMember, string ns, XmlReflectionMember[] xmlReflectionMembers, XmlSchemaForm form, RecursionLimiter limiter)
private MemberMapping ImportFieldMapping(FieldModel model, SoapAttributes a, string ns, RecursionLimiter limiter)
private void ImportAccessorMapping(MemberMapping accessor, FieldModel model, SoapAttributes a, string ns, XmlSchemaForm form, RecursionLimiter limiter)
private ElementAccessor CreateElementAccessor(TypeMapping mapping, string ns)
private object GetDefaultValue(TypeDesc fieldTypeDesc, SoapAttributes a)
internal string XsdTypeName(Type type)
internal string XsdTypeName(Type type, SoapAttributes a, string name)
}
public System.Xml.Serialization.SoapSchemaExporter : object {
internal XmlSchemaForm elementFormDefault
private XmlSchemas schemas
private Hashtable types
private bool exportedRoot
private TypeScope scope
private XmlDocument document
private XmlQualifiedName ArrayQName
private XmlQualifiedName ArrayTypeQName
internal XmlDocument Document
public void .ctor(XmlSchemas schemas)
public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping, bool exportEnclosingType)
private void CheckScope(TypeScope scope)
internal XmlDocument get_Document()
private void CheckForDuplicateType(string newTypeName, string newNamespace)
private void AddSchemaItem(XmlSchemaObject item, string ns, string referencingNs)
private void AddSchemaImport(string ns, string referencingNs)
private bool SchemaContainsItem(XmlSchemaObject item, string ns)
private XmlSchemaImport FindImport(XmlSchema schema, string ns)
private XmlQualifiedName ExportTypeMapping(TypeMapping mapping, string ns)
private XmlQualifiedName ExportNonXsdPrimitiveMapping(PrimitiveMapping mapping, string ns)
private XmlQualifiedName ExportPrimitiveMapping(PrimitiveMapping mapping)
private XmlQualifiedName ExportArrayMapping(ArrayMapping mapping, string ns)
private void ExportElementAccessors(XmlSchemaGroupBase group, ElementAccessor[] accessors, bool repeats, bool valueTypeOptional, string ns)
private void ExportElementAccessor(XmlSchemaGroupBase group, ElementAccessor accessor, bool repeats, bool valueTypeOptional, string ns)
private XmlQualifiedName ExportRootMapping(StructMapping mapping)
private XmlQualifiedName ExportStructMapping(StructMapping mapping, string ns)
private XmlQualifiedName ExportMembersMapping(MembersMapping mapping, string ns)
private void ExportTypeMembers(XmlSchemaComplexType type, MemberMapping[] members, string ns)
private void ExportDerivedMappings(StructMapping mapping)
private XmlQualifiedName ExportEnumMapping(EnumMapping mapping, string ns)
}
public System.Xml.Serialization.SoapSchemaImporter : SchemaImporter {
public void .ctor(XmlSchemas schemas)
public void .ctor(XmlSchemas schemas, CodeIdentifiers typeIdentifiers)
public void .ctor(XmlSchemas schemas, CodeIdentifiers typeIdentifiers, CodeGenerationOptions options)
public void .ctor(XmlSchemas schemas, CodeGenerationOptions options, ImportContext context)
public void .ctor(XmlSchemas schemas, CodeGenerationOptions options, CodeDomProvider codeProvider, ImportContext context)
public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType, bool baseTypeCanBeIndirect)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember member)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members, bool hasWrapperElement)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members, bool hasWrapperElement, Type baseType, bool baseTypeCanBeIndirect)
private ElementAccessor ImportElement(XmlSchemaElement element, string ns)
private TypeMapping ImportElementType(XmlSchemaElement element, string ns)
internal void ImportDerivedTypes(XmlQualifiedName baseName)
private TypeMapping ImportType(XmlQualifiedName name, bool excludeFromImport)
private TypeMapping ImportType(XmlSchemaComplexType type, string typeNs, bool excludeFromImport)
private TypeMapping ImportAnyType(XmlSchemaComplexType type, string typeNs)
private StructMapping ImportStructType(XmlSchemaComplexType type, string typeNs, bool excludeFromImport)
private MemberMapping[] ImportTypeMembers(XmlSchemaComplexType type, string typeNs, CodeIdentifiers members)
private void ImportGroup(XmlSchemaParticle group, CodeIdentifiers members, string ns)
private void ImportGroupMembers(XmlSchemaParticle particle, CodeIdentifiers members, string ns)
private ElementAccessor ImportArray(XmlSchemaElement element, string ns)
private ArrayMapping ImportArrayMapping(XmlSchemaType type, string ns)
private void ImportElementMember(XmlSchemaElement element, CodeIdentifiers members, string ns)
private TypeMapping ImportDataType(XmlSchemaSimpleType dataType, string typeNs, string identifier, bool isList)
private TypeMapping ImportEnumeratedDataType(XmlSchemaSimpleType dataType, string typeNs, string identifier, bool isList)
private PrimitiveMapping ImportPrimitiveDataType(XmlSchemaSimpleType dataType)
private PrimitiveMapping ImportNonXsdPrimitiveDataType(XmlSchemaSimpleType dataType, string ns)
private TypeDesc GetDataTypeSource(XmlSchemaSimpleType dataType)
private XmlSchemaSimpleType FindDataType(XmlQualifiedName name)
private object FindType(XmlQualifiedName name)
}
public System.Xml.Serialization.SoapSchemaMember : object {
private string memberName
private XmlQualifiedName type
public XmlQualifiedName MemberType
public string MemberName
public XmlQualifiedName get_MemberType()
public void set_MemberType(XmlQualifiedName value)
public string get_MemberName()
public void set_MemberName(string value)
}
public System.Xml.Serialization.SoapTypeAttribute : Attribute {
private string ns
private string typeName
private bool includeInSchema
public bool IncludeInSchema
public string TypeName
public string Namespace
public void .ctor(string typeName)
public void .ctor(string typeName, string ns)
public bool get_IncludeInSchema()
public void set_IncludeInSchema(bool value)
public string get_TypeName()
public void set_TypeName(string value)
public string get_Namespace()
public void set_Namespace(string value)
}
internal System.Xml.Serialization.SourceInfo : object {
private Regex regex
private Regex regex2
private Lazy`1<MethodInfo> iListGetItemMethod
public string Source
public string Arg
public MemberInfo MemberInfo
public Type Type
public CodeGenerator ILG
public void .ctor(string source, string arg, MemberInfo memberInfo, Type type, CodeGenerator ilg)
public SourceInfo CastTo(TypeDesc td)
public void LoadAddress(Type elementType)
public void Load(Type elementType)
private void InternalLoad(Type elementType, bool asAddress)
private void Convert(Type sourceType, Type targetType, bool asAddress)
private void ConvertNullableValue(Type nullableType, Type targetType)
public string op_Implicit(SourceInfo source)
public bool op_Inequality(SourceInfo a, SourceInfo b)
public bool op_Equality(SourceInfo a, SourceInfo b)
public bool Equals(object obj)
public int GetHashCode()
}
internal System.Xml.Serialization.SpecialMapping : TypeMapping {
private bool namedAny
internal bool NamedAny
internal bool get_NamedAny()
internal void set_NamedAny(bool value)
}
internal System.Xml.Serialization.SpecialModel : TypeModel {
internal void .ctor(Type type, TypeDesc typeDesc, ModelScope scope)
}
internal System.Xml.Serialization.SpecifiedAccessor : Enum {
public int value__
public SpecifiedAccessor None
public SpecifiedAccessor ReadOnly
public SpecifiedAccessor ReadWrite
}
internal System.Xml.Serialization.StructMapping : TypeMapping {
private MemberMapping[] members
private StructMapping baseMapping
private StructMapping derivedMappings
private StructMapping nextDerivedMapping
private MemberMapping xmlnsMember
private bool hasSimpleContent
private bool openModel
private bool isSequence
private NameTable elements
private NameTable attributes
private CodeIdentifiers scope
internal StructMapping BaseMapping
internal StructMapping DerivedMappings
internal bool IsFullyInitialized
internal NameTable LocalElements
internal NameTable LocalAttributes
private object System.Xml.Serialization.INameScope.Item
internal StructMapping NextDerivedMapping
internal bool HasSimpleContent
internal bool HasXmlnsMember
internal MemberMapping[] Members
internal MemberMapping XmlnsMember
internal bool IsOpenModel
internal CodeIdentifiers Scope
internal bool HasElements
internal bool IsSequence
internal StructMapping get_BaseMapping()
internal void set_BaseMapping(StructMapping value)
internal StructMapping get_DerivedMappings()
internal bool get_IsFullyInitialized()
internal NameTable get_LocalElements()
internal NameTable get_LocalAttributes()
private object System.Xml.Serialization.INameScope.get_Item(string name, string ns)
private void System.Xml.Serialization.INameScope.set_Item(string name, string ns, object value)
internal StructMapping get_NextDerivedMapping()
internal bool get_HasSimpleContent()
internal bool get_HasXmlnsMember()
internal MemberMapping[] get_Members()
internal void set_Members(MemberMapping[] value)
internal MemberMapping get_XmlnsMember()
internal void set_XmlnsMember(MemberMapping value)
internal bool get_IsOpenModel()
internal void set_IsOpenModel(bool value)
internal CodeIdentifiers get_Scope()
internal void set_Scope(CodeIdentifiers value)
internal MemberMapping FindDeclaringMapping(MemberMapping member, StructMapping& declaringMapping, string parent)
internal bool Declares(MemberMapping member, string parent)
internal void SetContentModel(TextAccessor text, bool hasElements)
internal bool get_HasElements()
internal bool HasExplicitSequence()
internal void SetSequence()
internal bool get_IsSequence()
internal void set_IsSequence(bool value)
}
internal System.Xml.Serialization.StructModel : TypeModel {
internal void .ctor(Type type, TypeDesc typeDesc, ModelScope scope)
internal MemberInfo[] GetMemberInfos()
internal FieldModel GetFieldModel(MemberInfo memberInfo)
private void CheckSupportedMember(TypeDesc typeDesc, MemberInfo member, Type type)
private FieldModel GetFieldModel(FieldInfo fieldInfo)
private FieldModel GetPropertyModel(PropertyInfo propertyInfo)
internal bool CheckPropertyRead(PropertyInfo propertyInfo)
}
internal System.Xml.Serialization.TempAssembly : object {
internal string GeneratedAssemblyNamespace
private Assembly assembly
private bool pregeneratedAssmbly
private XmlSerializerImplementation contract
private Hashtable writerMethods
private Hashtable readerMethods
private TempMethodDictionary methods
private Object[] emptyObjectArray
private Hashtable assemblies
private FileIOPermission modreq(System.Runtime.CompilerServices.IsVolatile) fileIOPermission
internal bool UseLegacySerializerGeneration
internal XmlSerializerImplementation Contract
internal FileIOPermission FileIOPermission
internal bool NeedAssembyResolve
internal void .ctor(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, string location, Evidence evidence)
internal void .ctor(XmlMapping[] xmlMappings, Assembly assembly, XmlSerializerImplementation contract)
internal bool get_UseLegacySerializerGeneration()
internal void .ctor(XmlSerializerImplementation contract)
internal XmlSerializerImplementation get_Contract()
internal void InitAssemblyMethods(XmlMapping[] xmlMappings)
internal Assembly LoadGeneratedAssembly(Type type, string defaultNamespace, XmlSerializerImplementation& contract)
private void Log(string message, EventLogEntryType type)
private AssemblyName GetName(Assembly assembly, bool copyName)
private bool IsSerializerVersionMatch(Assembly serializer, Type type, string defaultNamespace, string location)
private string GenerateAssemblyId(Type type)
internal Assembly GenerateAssembly(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, Evidence evidence, XmlSerializerCompilerParameters parameters, Assembly assembly, Hashtable assemblies)
internal Assembly GenerateRefEmitAssembly(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, Evidence evidence)
private MethodInfo GetMethodFromType(Type type, string methodName, Assembly assembly)
internal Type GetTypeFromAssembly(Assembly assembly, string typeName)
internal bool CanRead(XmlMapping mapping, XmlReader xmlReader)
private string ValidateEncodingStyle(string encodingStyle, string methodKey)
internal FileIOPermission get_FileIOPermission()
internal object InvokeReader(XmlMapping mapping, XmlReader xmlReader, XmlDeserializationEvents events, string encodingStyle)
internal void InvokeWriter(XmlMapping mapping, XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id)
internal Assembly GetReferencedAssembly(string name)
internal bool get_NeedAssembyResolve()
}
internal System.Xml.Serialization.TempAssemblyCache : object {
private Hashtable cache
internal TempAssembly Item
internal TempAssembly get_Item(string ns, object o)
internal void Add(string ns, object o, TempAssembly assembly)
}
internal System.Xml.Serialization.TempAssemblyCacheKey : object {
private string ns
private object type
internal void .ctor(string ns, object type)
public bool Equals(object o)
public int GetHashCode()
}
internal System.Xml.Serialization.TypeDesc : object {
private string name
private string fullName
private string cSharpName
private TypeDesc arrayElementTypeDesc
private TypeDesc arrayTypeDesc
private TypeDesc nullableTypeDesc
private TypeKind kind
private XmlSchemaType dataType
private Type type
private TypeDesc baseTypeDesc
private TypeFlags flags
private string formatterName
private bool isXsdType
private bool isMixed
private MappedTypeDesc extendedType
private int weight
private Exception exception
internal TypeFlags Flags
internal bool IsXsdType
internal bool IsMappedType
internal MappedTypeDesc ExtendedType
internal string Name
internal string FullName
internal string CSharpName
internal XmlSchemaType DataType
internal Type Type
internal string FormatterName
internal TypeKind Kind
internal bool IsValueType
internal bool CanBeAttributeValue
internal bool XmlEncodingNotRequired
internal bool CanBeElementValue
internal bool CanBeTextValue
internal bool IsMixed
internal bool IsSpecial
internal bool IsAmbiguousDataType
internal bool HasCustomFormatter
internal bool HasDefaultSupport
internal bool HasIsEmpty
internal bool CollapseWhitespace
internal bool HasDefaultConstructor
internal bool IsUnsupported
internal bool IsGenericInterface
internal bool IsPrivateImplementation
internal bool CannotNew
internal bool IsAbstract
internal bool IsOptionalValue
internal bool UseReflection
internal bool IsVoid
internal bool IsClass
internal bool IsStructLike
internal bool IsArrayLike
internal bool IsCollection
internal bool IsEnumerable
internal bool IsArray
internal bool IsPrimitive
internal bool IsEnum
internal bool IsNullable
internal bool IsRoot
internal bool ConstructorInaccessible
internal Exception Exception
internal string ArrayLengthName
internal TypeDesc ArrayElementTypeDesc
internal int Weight
internal TypeDesc BaseTypeDesc
internal void .ctor(string name, string fullName, XmlSchemaType dataType, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags, string formatterName)
internal void .ctor(string name, string fullName, XmlSchemaType dataType, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags)
internal void .ctor(string name, string fullName, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags)
internal void .ctor(Type type, bool isXsdType, XmlSchemaType dataType, string formatterName, TypeFlags flags)
internal void .ctor(Type type, string name, string fullName, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags, TypeDesc arrayElementTypeDesc)
public string ToString()
internal TypeFlags get_Flags()
internal bool get_IsXsdType()
internal bool get_IsMappedType()
internal MappedTypeDesc get_ExtendedType()
internal string get_Name()
internal string get_FullName()
internal string get_CSharpName()
internal XmlSchemaType get_DataType()
internal Type get_Type()
internal string get_FormatterName()
internal TypeKind get_Kind()
internal bool get_IsValueType()
internal bool get_CanBeAttributeValue()
internal bool get_XmlEncodingNotRequired()
internal bool get_CanBeElementValue()
internal bool get_CanBeTextValue()
internal bool get_IsMixed()
internal void set_IsMixed(bool value)
internal bool get_IsSpecial()
internal bool get_IsAmbiguousDataType()
internal bool get_HasCustomFormatter()
internal bool get_HasDefaultSupport()
internal bool get_HasIsEmpty()
internal bool get_CollapseWhitespace()
internal bool get_HasDefaultConstructor()
internal bool get_IsUnsupported()
internal bool get_IsGenericInterface()
internal bool get_IsPrivateImplementation()
internal bool get_CannotNew()
internal bool get_IsAbstract()
internal bool get_IsOptionalValue()
internal bool get_UseReflection()
internal bool get_IsVoid()
internal bool get_IsClass()
internal bool get_IsStructLike()
internal bool get_IsArrayLike()
internal bool get_IsCollection()
internal bool get_IsEnumerable()
internal bool get_IsArray()
internal bool get_IsPrimitive()
internal bool get_IsEnum()
internal bool get_IsNullable()
internal bool get_IsRoot()
internal bool get_ConstructorInaccessible()
internal Exception get_Exception()
internal void set_Exception(Exception value)
internal TypeDesc GetNullableTypeDesc(Type type)
internal void CheckSupported()
internal void CheckNeedConstructor()
internal string get_ArrayLengthName()
internal TypeDesc get_ArrayElementTypeDesc()
internal void set_ArrayElementTypeDesc(TypeDesc value)
internal int get_Weight()
internal TypeDesc CreateArrayTypeDesc()
internal TypeDesc CreateMappedTypeDesc(MappedTypeDesc extension)
internal TypeDesc get_BaseTypeDesc()
internal void set_BaseTypeDesc(TypeDesc value)
internal bool IsDerivedFrom(TypeDesc baseTypeDesc)
internal TypeDesc FindCommonBaseTypeDesc(TypeDesc[] typeDescs)
}
internal System.Xml.Serialization.TypeExtensions : object {
private string ImplicitCastOperatorName
public bool TryConvertTo(Type targetType, object data, Object& returnValue)
}
internal System.Xml.Serialization.TypeFlags : Enum {
public int value__
public TypeFlags None
public TypeFlags Abstract
public TypeFlags Reference
public TypeFlags Special
public TypeFlags CanBeAttributeValue
public TypeFlags CanBeTextValue
public TypeFlags CanBeElementValue
public TypeFlags HasCustomFormatter
public TypeFlags AmbiguousDataType
public TypeFlags IgnoreDefault
public TypeFlags HasIsEmpty
public TypeFlags HasDefaultConstructor
public TypeFlags XmlEncodingNotRequired
public TypeFlags UseReflection
public TypeFlags CollapseWhitespace
public TypeFlags OptionalValue
public TypeFlags CtorInaccessible
public TypeFlags UsePrivateImplementation
public TypeFlags GenericInterface
public TypeFlags Unsupported
}
internal System.Xml.Serialization.TypeKind : Enum {
public int value__
public TypeKind Root
public TypeKind Primitive
public TypeKind Enum
public TypeKind Struct
public TypeKind Class
public TypeKind Array
public TypeKind Collection
public TypeKind Enumerable
public TypeKind Void
public TypeKind Node
public TypeKind Attribute
public TypeKind Serializable
}
internal System.Xml.Serialization.TypeMapping : Mapping {
private TypeDesc typeDesc
private string typeNs
private string typeName
private bool referencedByElement
private bool referencedByTopLevelElement
private bool includeInSchema
private bool reference
internal bool ReferencedByTopLevelElement
internal bool ReferencedByElement
internal string Namespace
internal string TypeName
internal TypeDesc TypeDesc
internal bool IncludeInSchema
internal bool IsList
internal bool IsReference
internal bool IsAnonymousType
internal string DefaultElementName
internal bool get_ReferencedByTopLevelElement()
internal void set_ReferencedByTopLevelElement(bool value)
internal bool get_ReferencedByElement()
internal void set_ReferencedByElement(bool value)
internal string get_Namespace()
internal void set_Namespace(string value)
internal string get_TypeName()
internal void set_TypeName(string value)
internal TypeDesc get_TypeDesc()
internal void set_TypeDesc(TypeDesc value)
internal bool get_IncludeInSchema()
internal void set_IncludeInSchema(bool value)
internal bool get_IsList()
internal void set_IsList(bool value)
internal bool get_IsReference()
internal void set_IsReference(bool value)
internal bool get_IsAnonymousType()
internal string get_DefaultElementName()
}
internal System.Xml.Serialization.TypeModel : object {
private TypeDesc typeDesc
private Type type
private ModelScope scope
internal Type Type
internal ModelScope ModelScope
internal TypeDesc TypeDesc
protected void .ctor(Type type, TypeDesc typeDesc, ModelScope scope)
internal Type get_Type()
internal ModelScope get_ModelScope()
internal TypeDesc get_TypeDesc()
}
internal System.Xml.Serialization.TypeScope : object {
private Hashtable typeDescs
private Hashtable arrayTypeDescs
private ArrayList typeMappings
private Hashtable primitiveTypes
private Hashtable primitiveDataTypes
private NameTable primitiveNames
private String[] unsupportedTypes
internal ICollection Types
internal ICollection TypeMappings
internal Hashtable PrimtiveTypes
internal bool IsKnownType(Type type)
private void AddSoapEncodedTypes(string ns)
private void AddPrimitive(Type type, string dataTypeName, string formatterName, TypeFlags flags)
private void AddNonXsdPrimitive(Type type, string dataTypeName, string ns, string formatterName, XmlQualifiedName baseTypeName, XmlSchemaFacet[] facets, TypeFlags flags)
private void AddSoapEncodedPrimitive(Type type, string dataTypeName, string ns, string formatterName, XmlQualifiedName baseTypeName, TypeFlags flags)
internal TypeDesc GetTypeDesc(string name, string ns)
internal TypeDesc GetTypeDesc(string name, string ns, TypeFlags flags)
internal TypeDesc GetTypeDesc(XmlSchemaSimpleType dataType)
internal TypeDesc GetTypeDesc(Type type)
internal TypeDesc GetTypeDesc(Type type, MemberInfo source)
internal TypeDesc GetTypeDesc(Type type, MemberInfo source, bool directReference)
internal TypeDesc GetTypeDesc(Type type, MemberInfo source, bool directReference, bool throwOnError)
internal TypeDesc GetArrayTypeDesc(Type type)
internal TypeMapping GetTypeMappingFromTypeDesc(TypeDesc typeDesc)
internal Type GetTypeFromTypeDesc(TypeDesc typeDesc)
private TypeDesc ImportTypeDesc(Type type, MemberInfo memberInfo, bool directReference)
private bool IsArraySegment(Type t)
internal bool IsOptionalValue(Type type)
internal string TypeName(Type t)
internal Type GetArrayElementType(Type type, string memberInfo)
internal MemberMapping[] GetAllMembers(StructMapping mapping)
internal void GetAllMembers(StructMapping mapping, ArrayList list)
internal MemberMapping[] GetAllMembers(StructMapping mapping, Dictionary`2<string, MemberInfo> memberInfos)
internal MemberMapping[] GetSettableMembers(StructMapping structMapping)
private void GetSettableMembers(StructMapping mapping, ArrayList list)
private bool CanWriteProperty(PropertyInfo propertyInfo, TypeDesc typeDesc)
internal MemberMapping[] GetSettableMembers(StructMapping mapping, Dictionary`2<string, MemberInfo> memberInfos)
private void PopulateMemberInfos(StructMapping structMapping, MemberMapping[] mappings, Dictionary`2<string, MemberInfo> memberInfos)
private bool ShouldBeReplaced(MemberInfo memberInfoToBeReplaced, Type derivedType, MemberInfo& replacedInfo)
private TypeFlags GetConstructorFlags(Type type, Exception& exception)
private Type GetEnumeratorElementType(Type type, TypeFlags& flags)
internal PropertyInfo GetDefaultIndexer(Type type, string memberInfo)
private Type GetCollectionElementType(Type type, string memberInfo)
internal XmlQualifiedName ParseWsdlArrayType(string type, String& dims, XmlSchemaObject parent)
internal ICollection get_Types()
internal void AddTypeMapping(TypeMapping typeMapping)
internal ICollection get_TypeMappings()
internal Hashtable get_PrimtiveTypes()
}
public System.Xml.Serialization.UnreferencedObjectEventArgs : EventArgs {
private object o
private string id
public object UnreferencedObject
public string UnreferencedId
public void .ctor(object o, string id)
public object get_UnreferencedObject()
public string get_UnreferencedId()
}
public System.Xml.Serialization.UnreferencedObjectEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, UnreferencedObjectEventArgs e)
public IAsyncResult BeginInvoke(object sender, UnreferencedObjectEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Xml.Serialization.UrtTypes : object {
internal string Namespace
}
internal System.Xml.Serialization.WorkItems : object {
private ArrayList list
internal ImportStructWorkItem Item
internal int Count
internal ImportStructWorkItem get_Item(int index)
internal void set_Item(int index, ImportStructWorkItem value)
internal int get_Count()
internal void Add(ImportStructWorkItem item)
internal bool Contains(StructMapping mapping)
internal int IndexOf(StructMapping mapping)
internal void RemoveAt(int index)
}
internal System.Xml.Serialization.Wsdl : object {
internal string Namespace
internal string ArrayType
}
public System.Xml.Serialization.XmlAnyElementAttribute : Attribute {
private string name
private string ns
private int order
private bool nsSpecified
public string Name
public string Namespace
public int Order
internal bool NamespaceSpecified
public void .ctor(string name)
public void .ctor(string name, string ns)
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public int get_Order()
public void set_Order(int value)
internal bool get_NamespaceSpecified()
}
public System.Xml.Serialization.XmlAnyElementAttributes : CollectionBase {
public XmlAnyElementAttribute Item
public XmlAnyElementAttribute get_Item(int index)
public void set_Item(int index, XmlAnyElementAttribute value)
public int Add(XmlAnyElementAttribute attribute)
public void Insert(int index, XmlAnyElementAttribute attribute)
public int IndexOf(XmlAnyElementAttribute attribute)
public bool Contains(XmlAnyElementAttribute attribute)
public void Remove(XmlAnyElementAttribute attribute)
public void CopyTo(XmlAnyElementAttribute[] array, int index)
}
public System.Xml.Serialization.XmlArrayAttribute : Attribute {
private string elementName
private string ns
private bool nullable
private XmlSchemaForm form
private int order
public string ElementName
public string Namespace
public bool IsNullable
public XmlSchemaForm Form
public int Order
public void .ctor(string elementName)
public string get_ElementName()
public void set_ElementName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public int get_Order()
public void set_Order(int value)
}
public System.Xml.Serialization.XmlArrayItemAttribute : Attribute {
private string elementName
private Type type
private string ns
private string dataType
private bool nullable
private bool nullableSpecified
private XmlSchemaForm form
private int nestingLevel
public Type Type
public string ElementName
public string Namespace
public int NestingLevel
public string DataType
public bool IsNullable
internal bool IsNullableSpecified
public XmlSchemaForm Form
public void .ctor(string elementName)
public void .ctor(Type type)
public void .ctor(string elementName, Type type)
public Type get_Type()
public void set_Type(Type value)
public string get_ElementName()
public void set_ElementName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public int get_NestingLevel()
public void set_NestingLevel(int value)
public string get_DataType()
public void set_DataType(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
internal bool get_IsNullableSpecified()
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
}
public System.Xml.Serialization.XmlArrayItemAttributes : CollectionBase {
public XmlArrayItemAttribute Item
public XmlArrayItemAttribute get_Item(int index)
public void set_Item(int index, XmlArrayItemAttribute value)
public int Add(XmlArrayItemAttribute attribute)
public void Insert(int index, XmlArrayItemAttribute attribute)
public int IndexOf(XmlArrayItemAttribute attribute)
public bool Contains(XmlArrayItemAttribute attribute)
public void Remove(XmlArrayItemAttribute attribute)
public void CopyTo(XmlArrayItemAttribute[] array, int index)
}
public System.Xml.Serialization.XmlAttributeAttribute : Attribute {
private string attributeName
private Type type
private string ns
private string dataType
private XmlSchemaForm form
public Type Type
public string AttributeName
public string Namespace
public string DataType
public XmlSchemaForm Form
public void .ctor(string attributeName)
public void .ctor(Type type)
public void .ctor(string attributeName, Type type)
public Type get_Type()
public void set_Type(Type value)
public string get_AttributeName()
public void set_AttributeName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_DataType()
public void set_DataType(string value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
}
internal System.Xml.Serialization.XmlAttributeComparer : object {
public int Compare(object o1, object o2)
}
public System.Xml.Serialization.XmlAttributeEventArgs : EventArgs {
private object o
private XmlAttribute attr
private string qnames
private int lineNumber
private int linePosition
public object ObjectBeingDeserialized
public XmlAttribute Attr
public int LineNumber
public int LinePosition
public string ExpectedAttributes
internal void .ctor(XmlAttribute attr, int lineNumber, int linePosition, object o, string qnames)
public object get_ObjectBeingDeserialized()
public XmlAttribute get_Attr()
public int get_LineNumber()
public int get_LinePosition()
public string get_ExpectedAttributes()
}
public System.Xml.Serialization.XmlAttributeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XmlAttributeEventArgs e)
public IAsyncResult BeginInvoke(object sender, XmlAttributeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Xml.Serialization.XmlAttributeFlags : Enum {
public int value__
public XmlAttributeFlags Enum
public XmlAttributeFlags Array
public XmlAttributeFlags Text
public XmlAttributeFlags ArrayItems
public XmlAttributeFlags Elements
public XmlAttributeFlags Attribute
public XmlAttributeFlags Root
public XmlAttributeFlags Type
public XmlAttributeFlags AnyElements
public XmlAttributeFlags AnyAttribute
public XmlAttributeFlags ChoiceIdentifier
public XmlAttributeFlags XmlnsDeclarations
}
public System.Xml.Serialization.XmlAttributeOverrides : object {
private Hashtable types
public XmlAttributes Item
public XmlAttributes Item
public void Add(Type type, XmlAttributes attributes)
public void Add(Type type, string member, XmlAttributes attributes)
public XmlAttributes get_Item(Type type)
public XmlAttributes get_Item(Type type, string member)
}
public System.Xml.Serialization.XmlAttributes : object {
private XmlElementAttributes xmlElements
private XmlArrayItemAttributes xmlArrayItems
private XmlAnyElementAttributes xmlAnyElements
private XmlArrayAttribute xmlArray
private XmlAttributeAttribute xmlAttribute
private XmlTextAttribute xmlText
private XmlEnumAttribute xmlEnum
private bool xmlIgnore
private bool xmlns
private object xmlDefaultValue
private XmlRootAttribute xmlRoot
private XmlTypeAttribute xmlType
private XmlAnyAttributeAttribute xmlAnyAttribute
private XmlChoiceIdentifierAttribute xmlChoiceIdentifier
private Type modreq(System.Runtime.CompilerServices.IsVolatile) ignoreAttributeType
internal XmlAttributeFlags XmlFlags
private Type IgnoreAttribute
public XmlElementAttributes XmlElements
public XmlAttributeAttribute XmlAttribute
public XmlEnumAttribute XmlEnum
public XmlTextAttribute XmlText
public XmlArrayAttribute XmlArray
public XmlArrayItemAttributes XmlArrayItems
public object XmlDefaultValue
public bool XmlIgnore
public XmlTypeAttribute XmlType
public XmlRootAttribute XmlRoot
public XmlAnyElementAttributes XmlAnyElements
public XmlAnyAttributeAttribute XmlAnyAttribute
public XmlChoiceIdentifierAttribute XmlChoiceIdentifier
public bool Xmlns
internal XmlAttributeFlags get_XmlFlags()
private Type get_IgnoreAttribute()
public void .ctor(ICustomAttributeProvider provider)
internal object GetAttr(ICustomAttributeProvider provider, Type attrType)
public XmlElementAttributes get_XmlElements()
public XmlAttributeAttribute get_XmlAttribute()
public void set_XmlAttribute(XmlAttributeAttribute value)
public XmlEnumAttribute get_XmlEnum()
public void set_XmlEnum(XmlEnumAttribute value)
public XmlTextAttribute get_XmlText()
public void set_XmlText(XmlTextAttribute value)
public XmlArrayAttribute get_XmlArray()
public void set_XmlArray(XmlArrayAttribute value)
public XmlArrayItemAttributes get_XmlArrayItems()
public object get_XmlDefaultValue()
public void set_XmlDefaultValue(object value)
public bool get_XmlIgnore()
public void set_XmlIgnore(bool value)
public XmlTypeAttribute get_XmlType()
public void set_XmlType(XmlTypeAttribute value)
public XmlRootAttribute get_XmlRoot()
public void set_XmlRoot(XmlRootAttribute value)
public XmlAnyElementAttributes get_XmlAnyElements()
public XmlAnyAttributeAttribute get_XmlAnyAttribute()
public void set_XmlAnyAttribute(XmlAnyAttributeAttribute value)
public XmlChoiceIdentifierAttribute get_XmlChoiceIdentifier()
public bool get_Xmlns()
public void set_Xmlns(bool value)
}
public System.Xml.Serialization.XmlChoiceIdentifierAttribute : Attribute {
private string name
private MemberInfo memberInfo
public string MemberName
internal MemberInfo MemberInfo
public void .ctor(string name)
public string get_MemberName()
public void set_MemberName(string value)
internal MemberInfo get_MemberInfo()
internal void set_MemberInfo(MemberInfo value)
}
public System.Xml.Serialization.XmlCodeExporter : CodeExporter {
public void .ctor(CodeNamespace codeNamespace)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options, Hashtable mappings)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable mappings)
public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping)
private void ExportElement(ElementAccessor element)
private void ExportType(TypeMapping mapping, string ns)
private void ExportType(TypeMapping mapping, string name, string ns, ElementAccessor rootElement, bool checkReference)
private void AddRootMetadata(CodeAttributeDeclarationCollection metadata, TypeMapping typeMapping, string name, string ns, ElementAccessor rootElement)
private CodeAttributeArgument[] GetDefaultValueArguments(PrimitiveMapping mapping, object value, CodeExpression& initExpression)
private object ImportDefault(TypeMapping mapping, string defaultValue)
private object ImportDefaultValue(TypeMapping mapping, string defaultValue)
private void AddDefaultValueAttribute(CodeMemberField field, CodeAttributeDeclarationCollection metadata, object defaultValue, TypeMapping mapping, CodeCommentStatementCollection comments, TypeDesc memberTypeDesc, Accessor accessor, CodeConstructor ctor)
private void AddInitializationStatement(CodeConstructor ctor, CodeMemberField field, CodeExpression init)
private void DropDefaultAttribute(Accessor accessor, CodeCommentStatementCollection comments, string type)
private CodeTypeDeclaration ExportStruct(StructMapping mapping)
internal void ExportDerivedStructs(StructMapping mapping)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlTypeMapping mapping, string ns)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member, string ns, bool forceUseMemberName)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member, string ns)
private void ExportArrayElements(CodeAttributeDeclarationCollection metadata, ArrayMapping array, string ns, TypeDesc elementTypeDesc, int nestingLevel)
private void AddMemberMetadata(CodeMemberField field, CodeAttributeDeclarationCollection metadata, MemberMapping member, string ns, bool forceUseMemberName, CodeCommentStatementCollection comments, CodeConstructor ctor)
private void ExportMember(CodeTypeDeclaration codeClass, MemberMapping member, string ns, CodeConstructor ctor)
private void ExportProperty(CodeTypeDeclaration codeClass, MemberMapping member, string ns, CodeIdentifiers memberScope, CodeConstructor ctor)
private void ExportText(CodeAttributeDeclarationCollection metadata, TypeDesc typeDesc, string dataType)
private void ExportAttribute(CodeAttributeDeclarationCollection metadata, string name, string ns, TypeDesc typeDesc, TypeDesc dataTypeDesc, XmlSchemaForm form)
private void ExportArrayItem(CodeAttributeDeclarationCollection metadata, string name, string ns, TypeDesc typeDesc, TypeDesc dataTypeDesc, bool isNullable, XmlSchemaForm form, int nestingLevel)
private void ExportElement(CodeAttributeDeclarationCollection metadata, string name, string ns, TypeDesc typeDesc, TypeDesc dataTypeDesc, bool isNullable, XmlSchemaForm form, int sequenceId)
private void ExportArray(CodeAttributeDeclarationCollection metadata, string name, string ns, bool isNullable, XmlSchemaForm form, int sequenceId)
private void ExportMetadata(CodeAttributeDeclarationCollection metadata, Type attributeType, string name, string ns, TypeDesc typeDesc, TypeDesc dataTypeDesc, object isNullable, XmlSchemaForm form, int nestingLevel, int sequenceId)
private void ExportAnyElement(CodeAttributeDeclarationCollection metadata, string name, string ns, int sequenceId)
private void ExportAnyAttribute(CodeAttributeDeclarationCollection metadata)
internal void EnsureTypesExported(Accessor[] accessors, string ns)
private void EnsureTypesExported(Accessor accessor, string ns)
}
internal System.Xml.Serialization.XmlCountingReader : XmlReader {
private XmlReader innerReader
private int advanceCount
internal int AdvanceCount
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public IXmlSchemaInfo SchemaInfo
public Type ValueType
public int AttributeCount
public string Item
public string Item
public string Item
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public bool CanResolveEntity
public bool CanReadBinaryContent
public bool CanReadValueChunk
public bool HasAttributes
private bool System.Xml.Serialization.IXmlTextParser.Normalized
private WhitespaceHandling System.Xml.Serialization.IXmlTextParser.WhitespaceHandling
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
internal void .ctor(XmlReader xmlReader)
internal int get_AdvanceCount()
private void IncrementCount()
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public IXmlSchemaInfo get_SchemaInfo()
public Type get_ValueType()
public int get_AttributeCount()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string namespaceURI)
public bool get_EOF()
public ReadState get_ReadState()
public XmlNameTable get_NameTable()
public bool get_CanResolveEntity()
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public bool get_HasAttributes()
public void Close()
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public string LookupNamespace(string prefix)
public bool ReadAttributeValue()
public void ResolveEntity()
public bool IsStartElement()
public bool IsStartElement(string name)
public bool IsStartElement(string localname, string ns)
public XmlReader ReadSubtree()
public XmlNodeType MoveToContent()
public bool Read()
public void Skip()
public string ReadInnerXml()
public string ReadOuterXml()
public object ReadContentAsObject()
public bool ReadContentAsBoolean()
public DateTime ReadContentAsDateTime()
public double ReadContentAsDouble()
public int ReadContentAsInt()
public long ReadContentAsLong()
public string ReadContentAsString()
public object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public object ReadElementContentAsObject()
public object ReadElementContentAsObject(string localName, string namespaceURI)
public bool ReadElementContentAsBoolean()
public bool ReadElementContentAsBoolean(string localName, string namespaceURI)
public DateTime ReadElementContentAsDateTime()
public DateTime ReadElementContentAsDateTime(string localName, string namespaceURI)
public double ReadElementContentAsDouble()
public double ReadElementContentAsDouble(string localName, string namespaceURI)
public int ReadElementContentAsInt()
public int ReadElementContentAsInt(string localName, string namespaceURI)
public long ReadElementContentAsLong()
public long ReadElementContentAsLong(string localName, string namespaceURI)
public string ReadElementContentAsString()
public string ReadElementContentAsString(string localName, string namespaceURI)
public object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI)
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadValueChunk(Char[] buffer, int index, int count)
public string ReadString()
public void ReadStartElement()
public void ReadStartElement(string name)
public void ReadStartElement(string localname, string ns)
public string ReadElementString()
public string ReadElementString(string name)
public string ReadElementString(string localname, string ns)
public void ReadEndElement()
public bool ReadToFollowing(string name)
public bool ReadToFollowing(string localName, string namespaceURI)
public bool ReadToDescendant(string name)
public bool ReadToDescendant(string localName, string namespaceURI)
public bool ReadToNextSibling(string name)
public bool ReadToNextSibling(string localName, string namespaceURI)
protected void Dispose(bool disposing)
private bool System.Xml.Serialization.IXmlTextParser.get_Normalized()
private void System.Xml.Serialization.IXmlTextParser.set_Normalized(bool value)
private WhitespaceHandling System.Xml.Serialization.IXmlTextParser.get_WhitespaceHandling()
private void System.Xml.Serialization.IXmlTextParser.set_WhitespaceHandling(WhitespaceHandling value)
private bool System.Xml.IXmlLineInfo.HasLineInfo()
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
}
internal System.Xml.Serialization.XmlCustomFormatter : object {
private DateTimeSerializationMode mode
private String[] allDateTimeFormats
private String[] allDateFormats
private String[] allTimeFormats
private DateTimeSerializationMode Mode
private DateTimeSerializationMode get_Mode()
internal string FromDefaultValue(object value, string formatter)
internal string FromDate(DateTime value)
internal string FromTime(DateTime value)
internal string FromDateTime(DateTime value)
internal string FromChar(char value)
internal string FromXmlName(string name)
internal string FromXmlNCName(string ncName)
internal string FromXmlNmToken(string nmToken)
internal string FromXmlNmTokens(string nmTokens)
internal void WriteArrayBase64(XmlWriter writer, Byte[] inData, int start, int count)
internal string FromByteArrayHex(Byte[] value)
internal string FromEnum(long val, String[] vals, Int64[] ids, string typeName)
internal object ToDefaultValue(string value, string formatter)
internal DateTime ToDateTime(string value)
internal DateTime ToDateTime(string value, String[] formats)
internal DateTime ToDate(string value)
internal DateTime ToTime(string value)
internal char ToChar(string value)
internal string ToXmlName(string value)
internal string ToXmlNCName(string value)
internal string ToXmlNmToken(string value)
internal string ToXmlNmTokens(string value)
internal Byte[] ToByteArrayBase64(string value)
internal Byte[] ToByteArrayHex(string value)
internal long ToEnum(string val, Hashtable vals, string typeName, bool validate)
private string CollapseWhitespace(string value)
}
public System.Xml.Serialization.XmlDeserializationEvents : ValueType {
private XmlNodeEventHandler onUnknownNode
private XmlAttributeEventHandler onUnknownAttribute
private XmlElementEventHandler onUnknownElement
private UnreferencedObjectEventHandler onUnreferencedObject
internal object sender
public XmlNodeEventHandler OnUnknownNode
public XmlAttributeEventHandler OnUnknownAttribute
public XmlElementEventHandler OnUnknownElement
public UnreferencedObjectEventHandler OnUnreferencedObject
public XmlNodeEventHandler get_OnUnknownNode()
public void set_OnUnknownNode(XmlNodeEventHandler value)
public XmlAttributeEventHandler get_OnUnknownAttribute()
public void set_OnUnknownAttribute(XmlAttributeEventHandler value)
public XmlElementEventHandler get_OnUnknownElement()
public void set_OnUnknownElement(XmlElementEventHandler value)
public UnreferencedObjectEventHandler get_OnUnreferencedObject()
public void set_OnUnreferencedObject(UnreferencedObjectEventHandler value)
}
public System.Xml.Serialization.XmlElementAttribute : Attribute {
private string elementName
private Type type
private string ns
private string dataType
private bool nullable
private bool nullableSpecified
private XmlSchemaForm form
private int order
public Type Type
public string ElementName
public string Namespace
public string DataType
public bool IsNullable
internal bool IsNullableSpecified
public XmlSchemaForm Form
public int Order
public void .ctor(string elementName)
public void .ctor(Type type)
public void .ctor(string elementName, Type type)
public Type get_Type()
public void set_Type(Type value)
public string get_ElementName()
public void set_ElementName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_DataType()
public void set_DataType(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
internal bool get_IsNullableSpecified()
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public int get_Order()
public void set_Order(int value)
}
public System.Xml.Serialization.XmlElementAttributes : CollectionBase {
public XmlElementAttribute Item
public XmlElementAttribute get_Item(int index)
public void set_Item(int index, XmlElementAttribute value)
public int Add(XmlElementAttribute attribute)
public void Insert(int index, XmlElementAttribute attribute)
public int IndexOf(XmlElementAttribute attribute)
public bool Contains(XmlElementAttribute attribute)
public void Remove(XmlElementAttribute attribute)
public void CopyTo(XmlElementAttribute[] array, int index)
}
public System.Xml.Serialization.XmlElementEventArgs : EventArgs {
private object o
private XmlElement elem
private string qnames
private int lineNumber
private int linePosition
public object ObjectBeingDeserialized
public XmlElement Element
public int LineNumber
public int LinePosition
public string ExpectedElements
internal void .ctor(XmlElement elem, int lineNumber, int linePosition, object o, string qnames)
public object get_ObjectBeingDeserialized()
public XmlElement get_Element()
public int get_LineNumber()
public int get_LinePosition()
public string get_ExpectedElements()
}
public System.Xml.Serialization.XmlElementEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XmlElementEventArgs e)
public IAsyncResult BeginInvoke(object sender, XmlElementEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlEnumAttribute : Attribute {
private string name
public string Name
public void .ctor(string name)
public string get_Name()
public void set_Name(string value)
}
internal System.Xml.Serialization.XmlFacetComparer : object {
public int Compare(object o1, object o2)
}
public System.Xml.Serialization.XmlIncludeAttribute : Attribute {
private Type type
public Type Type
public void .ctor(Type type)
public Type get_Type()
public void set_Type(Type value)
}
public System.Xml.Serialization.XmlMapping : object {
private TypeScope scope
private bool generateSerializer
private bool isSoap
private ElementAccessor accessor
private string key
private bool shallow
private XmlMappingAccess access
internal ElementAccessor Accessor
internal TypeScope Scope
public string ElementName
public string XsdElementName
public string Namespace
internal bool GenerateSerializer
internal bool IsReadable
internal bool IsWriteable
internal bool IsSoap
internal string Key
internal void .ctor(TypeScope scope, ElementAccessor accessor)
internal void .ctor(TypeScope scope, ElementAccessor accessor, XmlMappingAccess access)
internal ElementAccessor get_Accessor()
internal TypeScope get_Scope()
public string get_ElementName()
public string get_XsdElementName()
public string get_Namespace()
internal bool get_GenerateSerializer()
internal void set_GenerateSerializer(bool value)
internal bool get_IsReadable()
internal bool get_IsWriteable()
internal bool get_IsSoap()
internal void set_IsSoap(bool value)
public void SetKey(string key)
internal void SetKeyInternal(string key)
internal string GenerateKey(Type type, XmlRootAttribute root, string ns)
internal string get_Key()
internal void CheckShallow()
internal bool IsShallow(XmlMapping[] mappings)
}
public System.Xml.Serialization.XmlMappingAccess : Enum {
public int value__
public XmlMappingAccess None
public XmlMappingAccess Read
public XmlMappingAccess Write
}
public System.Xml.Serialization.XmlMemberMapping : object {
private MemberMapping mapping
internal MemberMapping Mapping
internal Accessor Accessor
public bool Any
public string ElementName
public string XsdElementName
public string Namespace
public string MemberName
public string TypeName
public string TypeNamespace
public string TypeFullName
public bool CheckSpecified
internal bool IsNullable
internal void .ctor(MemberMapping mapping)
internal MemberMapping get_Mapping()
internal Accessor get_Accessor()
public bool get_Any()
public string get_ElementName()
public string get_XsdElementName()
public string get_Namespace()
public string get_MemberName()
public string get_TypeName()
public string get_TypeNamespace()
public string get_TypeFullName()
public bool get_CheckSpecified()
internal bool get_IsNullable()
public string GenerateTypeName(CodeDomProvider codeProvider)
}
public System.Xml.Serialization.XmlMembersMapping : XmlMapping {
private XmlMemberMapping[] mappings
public string TypeName
public string TypeNamespace
public XmlMemberMapping Item
public int Count
internal void .ctor(TypeScope scope, ElementAccessor accessor, XmlMappingAccess access)
public string get_TypeName()
public string get_TypeNamespace()
public XmlMemberMapping get_Item(int index)
public int get_Count()
}
public System.Xml.Serialization.XmlNodeEventArgs : EventArgs {
private object o
private XmlNode xmlNode
private int lineNumber
private int linePosition
public object ObjectBeingDeserialized
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Text
public int LineNumber
public int LinePosition
internal void .ctor(XmlNode xmlNode, int lineNumber, int linePosition, object o)
public object get_ObjectBeingDeserialized()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Text()
public int get_LineNumber()
public int get_LinePosition()
}
public System.Xml.Serialization.XmlNodeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XmlNodeEventArgs e)
public IAsyncResult BeginInvoke(object sender, XmlNodeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlReflectionImporter : object {
private TypeScope typeScope
private XmlAttributeOverrides attributeOverrides
private XmlAttributes defaultAttributes
private NameTable types
private NameTable nullables
private NameTable elements
private NameTable xsdAttributes
private Hashtable specials
private Hashtable anonymous
private NameTable serializables
private StructMapping root
private string defaultNs
private ModelScope modelScope
private int arrayNestingLevel
private XmlArrayItemAttributes savedArrayItemAttributes
private string savedArrayNamespace
private int choiceNum
public void .ctor(string defaultNamespace)
public void .ctor(XmlAttributeOverrides attributeOverrides)
public void .ctor(XmlAttributeOverrides attributeOverrides, string defaultNamespace)
public void IncludeTypes(ICustomAttributeProvider provider)
private void IncludeTypes(ICustomAttributeProvider provider, RecursionLimiter limiter)
public void IncludeType(Type type)
private void IncludeType(Type type, RecursionLimiter limiter)
public XmlTypeMapping ImportTypeMapping(Type type)
public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace)
public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root)
public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root, string defaultNamespace)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel, XmlMappingAccess access)
private XmlAttributes GetAttributes(Type type, bool canBeSimpleType)
private XmlAttributes GetAttributes(MemberInfo memberInfo)
private ElementAccessor ImportElement(TypeModel model, XmlRootAttribute root, string defaultNamespace, RecursionLimiter limiter)
private string GetMappingName(Mapping mapping)
private ElementAccessor ReconcileLocalAccessor(ElementAccessor accessor, string ns)
private Accessor ReconcileAccessor(Accessor accessor, NameTable accessors)
private Exception CreateReflectionException(string context, Exception e)
private Exception CreateTypeReflectionException(string context, Exception e)
private Exception CreateMemberReflectionException(FieldModel model, Exception e)
private TypeMapping ImportTypeMapping(TypeModel model, string ns, ImportContext context, string dataType, XmlAttributes a, RecursionLimiter limiter)
private TypeMapping ImportTypeMapping(TypeModel model, string ns, ImportContext context, string dataType, XmlAttributes a, bool repeats, bool openModel, RecursionLimiter limiter)
internal MethodInfo GetMethodFromSchemaProvider(XmlSchemaProviderAttribute provider, Type type)
private SpecialMapping ImportSpecialMapping(Type type, TypeDesc typeDesc, string ns, ImportContext context, RecursionLimiter limiter)
internal void ValidationCallbackWithErrorCode(object sender, ValidationEventArgs args)
internal void SetBase(SerializableMapping mapping, XmlQualifiedName baseQname)
private string GetContextName(ImportContext context)
private Exception InvalidAttributeUseException(Type type)
private Exception UnsupportedException(TypeDesc typeDesc, ImportContext context)
private StructMapping CreateRootMapping()
private NullableMapping CreateNullableMapping(TypeMapping baseMapping, Type type)
private StructMapping GetRootMapping()
private TypeMapping GetTypeMapping(string typeName, string ns, TypeDesc typeDesc, NameTable typeLib, Type type)
private StructMapping ImportStructLikeMapping(StructModel model, string ns, bool openModel, XmlAttributes a, RecursionLimiter limiter)
private bool InitializeStructMembers(StructMapping mapping, StructModel model, bool openModel, string typeName, RecursionLimiter limiter)
private bool IsAnonymousType(XmlAttributes a, string contextNs)
internal string XsdTypeName(Type type)
internal string XsdTypeName(Type type, XmlAttributes a, string name)
private int CountAtLevel(XmlArrayItemAttributes attributes, int level)
private void SetArrayMappingType(ArrayMapping mapping, string defaultNs, Type type)
private ArrayMapping ImportArrayLikeMapping(ArrayModel model, string ns, RecursionLimiter limiter)
private void CheckContext(TypeDesc typeDesc, ImportContext context)
private PrimitiveMapping ImportPrimitiveMapping(PrimitiveModel model, ImportContext context, string dataType, bool repeats)
private EnumMapping ImportEnumMapping(EnumModel model, string ns, bool repeats)
private ConstantMapping ImportConstantMapping(ConstantModel model)
private MembersMapping ImportMembersMapping(XmlReflectionMember[] xmlReflectionMembers, string ns, bool hasWrapperElement, bool rpc, bool openModel, RecursionLimiter limiter)
private MemberMapping ImportMemberMapping(XmlReflectionMember xmlReflectionMember, string ns, XmlReflectionMember[] xmlReflectionMembers, bool rpc, bool openModel, RecursionLimiter limiter)
internal XmlReflectionMember FindSpecifiedMember(string memberName, XmlReflectionMember[] reflectionMembers)
private MemberMapping ImportFieldMapping(StructModel parent, FieldModel model, XmlAttributes a, string ns, RecursionLimiter limiter)
private Type CheckChoiceIdentifierType(Type type, bool isArrayLike, string identifierName, string memberName)
private Type GetChoiceIdentifierType(XmlChoiceIdentifierAttribute choice, XmlReflectionMember[] xmlReflectionMembers, bool isArrayLike, string accessorName)
private Type GetChoiceIdentifierType(XmlChoiceIdentifierAttribute choice, StructModel structModel, bool isArrayLike, string accessorName)
private void CreateArrayElementsFromAttributes(ArrayMapping arrayMapping, XmlArrayItemAttributes attributes, Type arrayElementType, string arrayElementNs, RecursionLimiter limiter)
private void ImportAccessorMapping(MemberMapping accessor, FieldModel model, XmlAttributes a, string ns, Type choiceIdentifierType, bool rpc, bool openModel, RecursionLimiter limiter)
private void CheckTopLevelAttributes(XmlAttributes a, string accessorName)
private void CheckAmbiguousChoice(XmlAttributes a, Type accessorType, string accessorName)
private void CheckChoiceIdentifierMapping(EnumMapping choiceMapping)
private object GetDefaultValue(TypeDesc fieldTypeDesc, Type t, XmlAttributes a)
private XmlArrayItemAttribute CreateArrayItemAttribute(TypeDesc typeDesc, int nestingLevel)
private XmlArrayAttribute CreateArrayAttribute(TypeDesc typeDesc)
private XmlElementAttribute CreateElementAttribute(TypeDesc typeDesc)
private void AddUniqueAccessor(INameScope scope, Accessor accessor)
private void AddUniqueAccessor(MemberMapping member, INameScope elements, INameScope attributes, bool isSequence)
private void CheckForm(XmlSchemaForm form, bool isQualified)
private void CheckNullable(bool isNullable, TypeDesc typeDesc, TypeMapping mapping)
private ElementAccessor CreateElementAccessor(TypeMapping mapping, string ns)
internal XmlTypeMapping GetTopLevelMapping(Type type, string defaultNamespace)
}
public System.Xml.Serialization.XmlReflectionMember : object {
private string memberName
private Type type
private XmlAttributes xmlAttributes
private SoapAttributes soapAttributes
private bool isReturnValue
private bool overrideIsNullable
public Type MemberType
public XmlAttributes XmlAttributes
public SoapAttributes SoapAttributes
public string MemberName
public bool IsReturnValue
public bool OverrideIsNullable
public Type get_MemberType()
public void set_MemberType(Type value)
public XmlAttributes get_XmlAttributes()
public void set_XmlAttributes(XmlAttributes value)
public SoapAttributes get_SoapAttributes()
public void set_SoapAttributes(SoapAttributes value)
public string get_MemberName()
public void set_MemberName(string value)
public bool get_IsReturnValue()
public void set_IsReturnValue(bool value)
public bool get_OverrideIsNullable()
public void set_OverrideIsNullable(bool value)
}
public System.Xml.Serialization.XmlRootAttribute : Attribute {
private string elementName
private string ns
private string dataType
private bool nullable
private bool nullableSpecified
public string ElementName
public string Namespace
public string DataType
public bool IsNullable
internal bool IsNullableSpecified
internal string Key
public void .ctor(string elementName)
public string get_ElementName()
public void set_ElementName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_DataType()
public void set_DataType(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
internal bool get_IsNullableSpecified()
internal string get_Key()
}
public System.Xml.Serialization.XmlSchemaEnumerator : object {
private XmlSchemas list
private int idx
private int end
public XmlSchema Current
private object System.Collections.IEnumerator.Current
public void .ctor(XmlSchemas list)
public void Dispose()
public bool MoveNext()
public XmlSchema get_Current()
private object System.Collections.IEnumerator.get_Current()
private void System.Collections.IEnumerator.Reset()
}
public System.Xml.Serialization.XmlSchemaExporter : object {
internal XmlSchemaForm elementFormDefault
internal XmlSchemaForm attributeFormDefault
private XmlSchemas schemas
private Hashtable elements
private Hashtable attributes
private Hashtable types
private Hashtable references
private bool needToExportRoot
private TypeScope scope
public void .ctor(XmlSchemas schemas)
public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping)
public XmlQualifiedName ExportTypeMapping(XmlMembersMapping xmlMembersMapping)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping, bool exportEnclosingType)
private XmlSchemaType FindSchemaType(string name, XmlSchemaObjectCollection items)
private bool IsAnyType(XmlSchemaType schemaType, bool mixed, bool unbounded)
public string ExportAnyType(string ns)
public string ExportAnyType(XmlMembersMapping members)
private void CheckScope(TypeScope scope)
private XmlSchemaElement ExportElement(ElementAccessor accessor)
private void CheckForDuplicateType(TypeMapping mapping, string newNamespace)
private XmlSchema AddSchema(string targetNamespace)
private void AddSchemaItem(XmlSchemaObject item, string ns, string referencingNs)
private void AddSchemaImport(string ns, string referencingNs)
private bool NamespacesEqual(string ns1, string ns2)
private bool SchemaContainsItem(XmlSchemaObject item, string ns)
private XmlSchemaImport FindImport(XmlSchema schema, string ns)
private void ExportMapping(Mapping mapping, string ns, bool isAny)
private void ExportElementMapping(XmlSchemaElement element, Mapping mapping, string ns, bool isAny)
private XmlQualifiedName ExportNonXsdPrimitiveMapping(PrimitiveMapping mapping, string ns)
private XmlSchemaType ExportSpecialMapping(SpecialMapping mapping, string ns, bool isAny, XmlSchemaElement element)
private XmlSchemaType ExportMembersMapping(MembersMapping mapping, string ns)
private XmlSchemaType ExportAnonymousPrimitiveMapping(PrimitiveMapping mapping)
private XmlQualifiedName ExportPrimitiveMapping(PrimitiveMapping mapping, string ns)
private void ExportArrayMapping(ArrayMapping mapping, string ns, XmlSchemaElement element)
private void ExportElementAccessors(XmlSchemaGroupBase group, ElementAccessor[] accessors, bool repeats, bool valueTypeOptional, string ns)
private void ExportAttributeAccessor(XmlSchemaComplexType type, AttributeAccessor accessor, bool valueTypeOptional, string ns)
private void ExportElementAccessor(XmlSchemaGroupBase group, ElementAccessor accessor, bool repeats, bool valueTypeOptional, string ns)
internal string ExportDefaultValue(TypeMapping mapping, object value)
private void ExportRootIfNecessary(TypeScope typeScope)
private XmlQualifiedName ExportStructMapping(StructMapping mapping, string ns, XmlSchemaElement element)
private void ExportTypeMembers(XmlSchemaComplexType type, MemberMapping[] members, string name, string ns, bool hasSimpleContent, bool openModel)
private void ExportDerivedMappings(StructMapping mapping)
private XmlSchemaType ExportEnumMapping(EnumMapping mapping, string ns)
private void AddXmlnsAnnotation(XmlSchemaComplexType type, string xmlnsMemberName)
}
public System.Xml.Serialization.XmlSchemaImporter : SchemaImporter {
internal bool GenerateOrder
public void .ctor(XmlSchemas schemas)
public void .ctor(XmlSchemas schemas, CodeIdentifiers typeIdentifiers)
public void .ctor(XmlSchemas schemas, CodeIdentifiers typeIdentifiers, CodeGenerationOptions options)
public void .ctor(XmlSchemas schemas, CodeGenerationOptions options, ImportContext context)
public void .ctor(XmlSchemas schemas, CodeGenerationOptions options, CodeDomProvider codeProvider, ImportContext context)
public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType)
internal bool get_GenerateOrder()
internal TypeMapping GetDefaultMapping(TypeFlags flags)
public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType, bool baseTypeCanBeIndirect)
public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName)
public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType)
public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType, bool baseTypeCanBeIndirect)
public XmlTypeMapping ImportTypeMapping(XmlQualifiedName name)
public XmlMembersMapping ImportMembersMapping(XmlQualifiedName name)
public XmlMembersMapping ImportAnyType(XmlQualifiedName typeName, string elementName)
public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names)
public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names, Type baseType, bool baseTypeCanBeIndirect)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members)
private ElementAccessor ImportElement(XmlQualifiedName name, Type desiredMappingType, Type baseType)
private ElementAccessor ImportElement(XmlSchemaElement element, string identifier, Type desiredMappingType, Type baseType, string ns, bool topLevelElement)
private TypeMapping ImportElementType(XmlSchemaElement element, string identifier, Type desiredMappingType, Type baseType, string ns)
private void RunSchemaExtensions(TypeMapping mapping, XmlQualifiedName qname, XmlSchemaType type, XmlSchemaObject context, TypeFlags flags)
private string GenerateUniqueTypeName(string desiredName, string ns)
internal void ImportDerivedTypes(XmlQualifiedName baseName)
private TypeMapping ImportType(XmlQualifiedName name, Type desiredMappingType, Type baseType, TypeFlags flags, bool addref)
private TypeMapping ImportType(XmlSchemaComplexType type, string typeNs, string identifier, Type desiredMappingType, Type baseType, TypeFlags flags)
private MembersMapping ImportMembersType(XmlSchemaType type, string typeNs, string identifier)
private StructMapping ImportStructType(XmlSchemaType type, string typeNs, string identifier, Type baseType, bool arrayLike)
private bool IsAllGroup(XmlSchemaType type)
private StructMapping ImportStructDataType(XmlSchemaSimpleType dataType, string typeNs, string identifier, Type baseType)
private MemberMapping[] ImportTypeMembers(XmlSchemaType type, string typeNs, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, Boolean& needExplicitOrder, bool order, bool allowUnboundedElements)
internal bool IsMixed(XmlSchemaType type)
private TypeItems GetTypeItems(XmlSchemaType type)
private void ImportGroup(XmlSchemaGroupBase group, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, bool mixed, Boolean& needExplicitOrder, bool allowDuplicates, bool groupRepeats, bool allowUnboundedElements)
private MemberMapping ImportChoiceGroup(XmlSchemaGroupBase group, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, bool groupRepeats, Boolean& needExplicitOrder, bool allowDuplicates)
private bool IsNeedXmlSerializationAttributes(ArrayMapping arrayMapping)
private bool GatherGroupChoices(XmlSchemaGroup group, NameTable choiceElements, string identifier, string ns, Boolean& needExplicitOrder, bool allowDuplicates)
private bool GatherGroupChoices(XmlSchemaParticle particle, NameTable choiceElements, string identifier, string ns, Boolean& needExplicitOrder, bool allowDuplicates)
private void AddScopeElement(INameScope scope, ElementAccessor element, Boolean& duplicateElements, bool allowDuplicates)
private void AddScopeElements(INameScope scope, ElementAccessor[] elements, Boolean& duplicateElements, bool allowDuplicates)
private void ImportGroupMembers(XmlSchemaParticle particle, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, bool groupRepeats, Boolean& mixed, Boolean& needExplicitOrder, bool allowDuplicates, bool allowUnboundedElements)
private XmlSchemaElement GetTopLevelElement(XmlSchemaElement element)
private XmlSchemaElement[] GetEquivalentElements(XmlSchemaElement element)
private bool ImportSubstitutionGroupMember(XmlSchemaElement element, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, string ns, bool repeats, Boolean& needExplicitOrder, bool allowDuplicates)
private void ImportTextMember(CodeIdentifiers members, CodeIdentifiers membersScope, XmlQualifiedName simpleContentType)
private MemberMapping ImportAnyMember(XmlSchemaAny any, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, Boolean& mixed, Boolean& needExplicitOrder, bool allowDuplicates)
private ElementAccessor[] ImportAny(XmlSchemaAny any, bool makeElement, string targetNamespace)
private ElementAccessor ImportArray(XmlSchemaElement element, string identifier, string ns, bool repeats)
private ArrayMapping ImportArrayMapping(XmlSchemaType type, string identifier, string ns, bool repeats)
private bool IsCyclicReferencedType(XmlSchemaElement element, List`1<string> identifiers)
private SpecialMapping ImportAnyMapping(XmlSchemaType type, string identifier, string ns, bool repeats)
private void ImportElementMember(XmlSchemaElement element, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, INameScope elementsScope, string ns, bool repeats, Boolean& needExplicitOrder, bool allowDuplicates, bool allowUnboundedElements)
private void ImportAttributeMember(XmlSchemaAttribute attribute, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, string ns)
private void ImportAnyAttributeMember(XmlSchemaAnyAttribute any, CodeIdentifiers members, CodeIdentifiers membersScope)
private bool KeepXmlnsDeclarations(XmlSchemaType type, String& xmlnsMemberName)
private void ImportXmlnsDeclarationsMember(XmlSchemaType type, CodeIdentifiers members, CodeIdentifiers membersScope)
private void ImportAttributeGroupMembers(XmlSchemaAttributeGroup group, string identifier, CodeIdentifiers members, CodeIdentifiers membersScope, string ns)
private AttributeAccessor ImportSpecialAttribute(XmlQualifiedName name, string identifier)
private AttributeAccessor ImportAttribute(XmlSchemaAttribute attribute, string identifier, string ns, XmlSchemaAttribute defaultValueProvider)
private TypeMapping ImportDataType(XmlSchemaSimpleType dataType, string typeNs, string identifier, Type baseType, TypeFlags flags, bool isList)
private TypeMapping ImportEnumeratedDataType(XmlSchemaSimpleType dataType, string typeNs, string identifier, TypeFlags flags, bool isList)
private EnumMapping ImportEnumeratedChoice(ElementAccessor[] choice, string typeNs, string typeName)
private PrimitiveMapping ImportPrimitiveDataType(XmlSchemaSimpleType dataType, TypeFlags flags)
private PrimitiveMapping ImportNonXsdPrimitiveDataType(XmlSchemaSimpleType dataType, string ns, TypeFlags flags)
private XmlSchemaGroup FindGroup(XmlQualifiedName name)
private XmlSchemaAttributeGroup FindAttributeGroup(XmlQualifiedName name)
internal XmlQualifiedName BaseTypeName(XmlSchemaSimpleType dataType)
private TypeDesc GetDataTypeSource(XmlSchemaSimpleType dataType, TypeFlags flags)
private XmlSchemaSimpleType FindDataType(XmlQualifiedName name, TypeFlags flags)
private XmlSchemaType FindType(XmlQualifiedName name, TypeFlags flags)
private XmlSchemaElement FindElement(XmlQualifiedName name)
private XmlSchemaAttribute FindAttribute(XmlQualifiedName name)
private XmlSchemaForm ElementForm(string ns, XmlSchemaElement element)
internal string FindExtendedAnyElement(XmlSchemaAny any, bool mixed, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, SchemaImporterExtension& extension)
internal string FindExtendedType(string name, string ns, XmlSchemaObject context, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, SchemaImporterExtension& extension)
internal string FindExtendedType(XmlSchemaType type, XmlSchemaObject context, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, SchemaImporterExtension& extension)
private XmlSchemaForm AttributeForm(string ns, XmlSchemaAttribute attribute)
}
internal System.Xml.Serialization.XmlSchemaObjectComparer : object {
private QNameComparer comparer
public int Compare(object o1, object o2)
internal XmlQualifiedName NameOf(XmlSchemaObject o)
internal XmlQualifiedName NameOf(XmlSchemaObjectCollection items)
internal string Namespace(XmlSchemaObject o)
}
public System.Xml.Serialization.XmlSchemaProviderAttribute : Attribute {
private string methodName
private bool any
public string MethodName
public bool IsAny
public void .ctor(string methodName)
public string get_MethodName()
public bool get_IsAny()
public void set_IsAny(bool value)
}
public System.Xml.Serialization.XmlSchemas : CollectionBase {
private XmlSchemaSet schemaSet
private Hashtable references
private SchemaObjectCache cache
private bool shareTypes
private Hashtable mergedSchemas
internal Hashtable delayedSchemas
private bool isCompiled
private XmlSchema modreq(System.Runtime.CompilerServices.IsVolatile) xsd
private XmlSchema modreq(System.Runtime.CompilerServices.IsVolatile) xml
internal string xmlSchema
public XmlSchema Item
public XmlSchema Item
internal SchemaObjectCache Cache
internal Hashtable MergedSchemas
internal Hashtable References
internal XmlSchemaSet SchemaSet
public bool IsCompiled
internal XmlSchema XsdSchema
internal XmlSchema XmlSchema
public XmlSchema get_Item(int index)
public void set_Item(int index, XmlSchema value)
public XmlSchema get_Item(string ns)
public IList GetSchemas(string ns)
internal SchemaObjectCache get_Cache()
internal Hashtable get_MergedSchemas()
internal Hashtable get_References()
internal XmlSchemaSet get_SchemaSet()
internal int Add(XmlSchema schema, bool delay)
public int Add(XmlSchema schema)
public int Add(XmlSchema schema, Uri baseUri)
public void Add(XmlSchemas schemas)
public void AddReference(XmlSchema schema)
public void Insert(int index, XmlSchema schema)
public int IndexOf(XmlSchema schema)
public bool Contains(XmlSchema schema)
public bool Contains(string targetNamespace)
public void Remove(XmlSchema schema)
public void CopyTo(XmlSchema[] array, int index)
protected void OnInsert(int index, object value)
protected void OnRemove(int index, object value)
protected void OnClear()
protected void OnSet(int index, object oldValue, object newValue)
private void AddName(XmlSchema schema)
private void Prepare(XmlSchema schema)
private void RemoveName(XmlSchema schema)
public object Find(XmlQualifiedName name, Type type)
internal object Find(XmlQualifiedName name, Type type, bool checkCache)
private IEnumerator`1<XmlSchema> System.Collections.Generic.IEnumerable<System.Xml.Schema.XmlSchema>.GetEnumerator()
internal void Preprocess(XmlSchema schema)
public bool IsDataSet(XmlSchema schema)
private void Merge(XmlSchema schema)
private void AddImport(IList schemas, string ns)
private void Merge(IList originals, XmlSchema schema)
private string ItemName(XmlSchemaObject o)
internal XmlQualifiedName GetParentName(XmlSchemaObject item)
private string GetSchemaItem(XmlSchemaObject o, string ns, string details)
private string Dump(XmlSchemaObject o)
private string MergeFailedMessage(XmlSchemaObject src, XmlSchemaObject dest, string ns)
internal XmlSchemaObject Find(XmlSchemaObject o, IList originals)
public bool get_IsCompiled()
public void Compile(ValidationEventHandler handler, bool fullCompile)
internal Exception CreateValidationException(XmlSchemaException exception, string message)
internal void IgnoreCompileErrors(object sender, ValidationEventArgs args)
internal XmlSchema get_XsdSchema()
internal XmlSchema get_XmlSchema()
private XmlSchema CreateFakeXsdSchema(string ns, string name)
internal void SetCache(SchemaObjectCache cache, bool shareTypes)
internal bool IsReference(XmlSchemaObject type)
}
internal System.Xml.Serialization.XmlSerializationCodeGen : object {
private IndentedWriter writer
private int nextMethodNumber
private Hashtable methodNames
private ReflectionAwareCodeGen raCodeGen
private TypeScope[] scopes
private TypeDesc stringTypeDesc
private TypeDesc qnameTypeDesc
private string access
private string className
private TypeMapping[] referencedMethods
private int references
private Hashtable generatedMethods
internal IndentedWriter Writer
internal int NextMethodNumber
internal ReflectionAwareCodeGen RaCodeGen
internal TypeDesc StringTypeDesc
internal TypeDesc QnameTypeDesc
internal string ClassName
internal string Access
internal TypeScope[] Scopes
internal Hashtable MethodNames
internal Hashtable GeneratedMethods
internal void .ctor(IndentedWriter writer, TypeScope[] scopes, string access, string className)
internal IndentedWriter get_Writer()
internal int get_NextMethodNumber()
internal void set_NextMethodNumber(int value)
internal ReflectionAwareCodeGen get_RaCodeGen()
internal TypeDesc get_StringTypeDesc()
internal TypeDesc get_QnameTypeDesc()
internal string get_ClassName()
internal string get_Access()
internal TypeScope[] get_Scopes()
internal Hashtable get_MethodNames()
internal Hashtable get_GeneratedMethods()
internal void GenerateMethod(TypeMapping mapping)
internal void GenerateReferencedMethods()
internal string ReferenceMapping(TypeMapping mapping)
private TypeMapping[] EnsureArrayIndex(TypeMapping[] a, int index)
internal void WriteQuotedCSharpString(string value)
internal void GenerateHashtableGetBegin(string privateName, string publicName)
internal void GenerateHashtableGetEnd(string privateName)
internal void GeneratePublicMethods(string privateName, string publicName, String[] methods, XmlMapping[] xmlMappings)
internal void GenerateSupportedTypes(Type[] types)
internal string GenerateBaseSerializer(string baseSerializer, string readerClass, string writerClass, CodeIdentifiers classes)
internal string GenerateTypedSerializer(string readMethod, string writeMethod, XmlMapping mapping, CodeIdentifiers classes, string baseSerializer, string readerClass, string writerClass)
private void GenerateTypedSerializers(Hashtable serializers)
private void GenerateGetSerializer(Hashtable serializers, XmlMapping[] xmlMappings)
internal void GenerateSerializerContract(string className, XmlMapping[] xmlMappings, Type[] types, string readerType, String[] readMethods, string writerType, String[] writerMethods, Hashtable serializers)
internal bool IsWildcard(SpecialMapping mapping)
}
public System.Xml.Serialization.XmlSerializationCollectionFixupCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object collection, object collectionItems)
public IAsyncResult BeginInvoke(object collection, object collectionItems, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlSerializationFixupCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object fixup)
public IAsyncResult BeginInvoke(object fixup, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlSerializationGeneratedCode : object {
private TempAssembly tempAssembly
private int threadCode
private ResolveEventHandler assemblyResolver
internal void Init(TempAssembly tempAssembly)
internal void Dispose()
internal Assembly OnAssemblyResolve(object sender, ResolveEventArgs args)
}
internal System.Xml.Serialization.XmlSerializationILGen : object {
private int nextMethodNumber
private Hashtable methodNames
private Dictionary`2<string, MethodBuilderInfo> methodBuilders
internal Dictionary`2<string, Type> CreatedTypes
internal Dictionary`2<string, MemberInfo> memberInfos
private ReflectionAwareILGen raCodeGen
private TypeScope[] scopes
private TypeDesc stringTypeDesc
private TypeDesc qnameTypeDesc
private string className
private TypeMapping[] referencedMethods
private int references
private Hashtable generatedMethods
private ModuleBuilder moduleBuilder
private TypeAttributes typeAttributes
protected TypeBuilder typeBuilder
protected CodeGenerator ilg
private Dictionary`2<string, Regex> regexs
internal int NextMethodNumber
internal ReflectionAwareILGen RaCodeGen
internal TypeDesc StringTypeDesc
internal TypeDesc QnameTypeDesc
internal string ClassName
internal TypeScope[] Scopes
internal Hashtable MethodNames
internal Hashtable GeneratedMethods
internal ModuleBuilder ModuleBuilder
internal TypeAttributes TypeAttributes
internal void .ctor(TypeScope[] scopes, string access, string className)
internal int get_NextMethodNumber()
internal void set_NextMethodNumber(int value)
internal ReflectionAwareILGen get_RaCodeGen()
internal TypeDesc get_StringTypeDesc()
internal TypeDesc get_QnameTypeDesc()
internal string get_ClassName()
internal TypeScope[] get_Scopes()
internal Hashtable get_MethodNames()
internal Hashtable get_GeneratedMethods()
internal ModuleBuilder get_ModuleBuilder()
internal void set_ModuleBuilder(ModuleBuilder value)
internal TypeAttributes get_TypeAttributes()
internal Regex NewRegex(string pattern)
internal MethodBuilder EnsureMethodBuilder(TypeBuilder typeBuilder, string methodName, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
internal MethodBuilderInfo GetMethodBuilder(string methodName)
internal void GenerateMethod(TypeMapping mapping)
internal void GenerateReferencedMethods()
internal string ReferenceMapping(TypeMapping mapping)
private TypeMapping[] EnsureArrayIndex(TypeMapping[] a, int index)
internal FieldBuilder GenerateHashtableGetBegin(string privateName, string publicName, TypeBuilder serializerContractTypeBuilder)
internal void GenerateHashtableGetEnd(FieldBuilder fieldBuilder)
internal FieldBuilder GeneratePublicMethods(string privateName, string publicName, String[] methods, XmlMapping[] xmlMappings, TypeBuilder serializerContractTypeBuilder)
internal void GenerateSupportedTypes(Type[] types, TypeBuilder serializerContractTypeBuilder)
internal string GenerateBaseSerializer(string baseSerializer, string readerClass, string writerClass, CodeIdentifiers classes)
internal string GenerateTypedSerializer(string readMethod, string writeMethod, XmlMapping mapping, CodeIdentifiers classes, string baseSerializer, string readerClass, string writerClass)
private FieldBuilder GenerateTypedSerializers(Hashtable serializers, TypeBuilder serializerContractTypeBuilder)
private void GenerateGetSerializer(Hashtable serializers, XmlMapping[] xmlMappings, TypeBuilder serializerContractTypeBuilder)
internal void GenerateSerializerContract(string className, XmlMapping[] xmlMappings, Type[] types, string readerType, String[] readMethods, string writerType, String[] writerMethods, Hashtable serializers)
internal bool IsWildcard(SpecialMapping mapping)
internal void ILGenLoad(string source)
internal void ILGenLoad(string source, Type type)
}
internal System.Xml.Serialization.XmlSerializationPrimitiveReader : XmlSerializationReader {
private string id4_boolean
private string id14_unsignedInt
private string id15_unsignedLong
private string id7_float
private string id10_dateTime
private string id6_long
private string id9_decimal
private string id8_double
private string id17_guid
private string id19_TimeSpan
private string id2_Item
private string id13_unsignedShort
private string id18_char
private string id3_int
private string id12_byte
private string id16_base64Binary
private string id11_unsignedByte
private string id5_short
private string id1_string
private string id1_QName
internal object Read_string()
internal object Read_int()
internal object Read_boolean()
internal object Read_short()
internal object Read_long()
internal object Read_float()
internal object Read_double()
internal object Read_decimal()
internal object Read_dateTime()
internal object Read_unsignedByte()
internal object Read_byte()
internal object Read_unsignedShort()
internal object Read_unsignedInt()
internal object Read_unsignedLong()
internal object Read_base64Binary()
internal object Read_guid()
internal object Read_TimeSpan()
internal object Read_char()
internal object Read_QName()
protected void InitCallbacks()
protected void InitIDs()
}
internal System.Xml.Serialization.XmlSerializationPrimitiveWriter : XmlSerializationWriter {
internal void Write_string(object o)
internal void Write_int(object o)
internal void Write_boolean(object o)
internal void Write_short(object o)
internal void Write_long(object o)
internal void Write_float(object o)
internal void Write_double(object o)
internal void Write_decimal(object o)
internal void Write_dateTime(object o)
internal void Write_unsignedByte(object o)
internal void Write_byte(object o)
internal void Write_unsignedShort(object o)
internal void Write_unsignedInt(object o)
internal void Write_unsignedLong(object o)
internal void Write_base64Binary(object o)
internal void Write_guid(object o)
internal void Write_TimeSpan(object o)
internal void Write_char(object o)
internal void Write_QName(object o)
protected void InitCallbacks()
}
public System.Xml.Serialization.XmlSerializationReadCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlSerializationReader : XmlSerializationGeneratedCode {
private XmlReader r
private XmlCountingReader countingReader
private XmlDocument d
private Hashtable callbacks
private Hashtable types
private Hashtable typesReverse
private XmlDeserializationEvents events
private Hashtable targets
private Hashtable referencedTargets
private ArrayList targetsWithoutIds
private ArrayList fixups
private ArrayList collectionFixups
private bool soap12
private bool isReturnValue
private bool decodeName
private string schemaNsID
private string schemaNs1999ID
private string schemaNs2000ID
private string schemaNonXsdTypesNsID
private string instanceNsID
private string instanceNs2000ID
private string instanceNs1999ID
private string soapNsID
private string soap12NsID
private string schemaID
private string wsdlNsID
private string wsdlArrayTypeID
private string nullID
private string nilID
private string typeID
private string arrayTypeID
private string itemTypeID
private string arraySizeID
private string arrayID
private string urTypeID
private string stringID
private string intID
private string booleanID
private string shortID
private string longID
private string floatID
private string doubleID
private string decimalID
private string dateTimeID
private string qnameID
private string dateID
private string timeID
private string hexBinaryID
private string base64BinaryID
private string base64ID
private string unsignedByteID
private string byteID
private string unsignedShortID
private string unsignedIntID
private string unsignedLongID
private string oldDecimalID
private string oldTimeInstantID
private string anyURIID
private string durationID
private string ENTITYID
private string ENTITIESID
private string gDayID
private string gMonthID
private string gMonthDayID
private string gYearID
private string gYearMonthID
private string IDID
private string IDREFID
private string IDREFSID
private string integerID
private string languageID
private string NameID
private string NCNameID
private string NMTOKENID
private string NMTOKENSID
private string negativeIntegerID
private string nonPositiveIntegerID
private string nonNegativeIntegerID
private string normalizedStringID
private string NOTATIONID
private string positiveIntegerID
private string tokenID
private string charID
private string guidID
private string timeSpanID
private bool checkDeserializeAdvances
protected bool DecodeName
protected XmlReader Reader
protected int ReaderCount
protected XmlDocument Document
protected bool IsReturnValue
protected void InitIDs()
internal void Init(XmlReader r, XmlDeserializationEvents events, string encodingStyle, TempAssembly tempAssembly)
protected bool get_DecodeName()
protected void set_DecodeName(bool value)
protected XmlReader get_Reader()
protected int get_ReaderCount()
protected XmlDocument get_Document()
protected Assembly ResolveDynamicAssembly(string assemblyFullName)
private void InitPrimitiveIDs()
protected XmlQualifiedName GetXsiType()
private Type GetPrimitiveType(XmlQualifiedName typeName, bool throwOnUnknown)
private bool IsPrimitiveNamespace(string ns)
private string ReadStringValue()
private XmlQualifiedName ReadXmlQualifiedName()
private Byte[] ReadByteArray(bool isBase64)
protected object ReadTypedPrimitive(XmlQualifiedName type)
private object ReadTypedPrimitive(XmlQualifiedName type, bool elementCanBeType)
protected object ReadTypedNull(XmlQualifiedName type)
protected bool IsXmlnsAttribute(string name)
protected void ParseWsdlArrayType(XmlAttribute attr)
protected bool get_IsReturnValue()
protected void set_IsReturnValue(bool value)
protected bool ReadNull()
protected bool GetNullAttr()
protected string ReadNullableString()
protected XmlQualifiedName ReadNullableQualifiedName()
protected XmlQualifiedName ReadElementQualifiedName()
protected XmlDocument ReadXmlDocument(bool wrapped)
protected string CollapseWhitespace(string value)
protected XmlNode ReadXmlNode(bool wrapped)
protected Byte[] ToByteArrayBase64(string value)
protected Byte[] ToByteArrayBase64(bool isNull)
protected Byte[] ToByteArrayHex(string value)
protected Byte[] ToByteArrayHex(bool isNull)
protected int GetArrayLength(string name, string ns)
private SoapArrayInfo ParseArrayType(string value)
private SoapArrayInfo ParseSoap12ArrayType(string itemType, string arraySize)
protected DateTime ToDateTime(string value)
protected DateTime ToDate(string value)
protected DateTime ToTime(string value)
protected char ToChar(string value)
protected long ToEnum(string value, Hashtable h, string typeName)
protected string ToXmlName(string value)
protected string ToXmlNCName(string value)
protected string ToXmlNmToken(string value)
protected string ToXmlNmTokens(string value)
protected XmlQualifiedName ToXmlQualifiedName(string value)
internal XmlQualifiedName ToXmlQualifiedName(string value, bool decodeName)
protected void UnknownAttribute(object o, XmlAttribute attr)
protected void UnknownAttribute(object o, XmlAttribute attr, string qnames)
protected void UnknownElement(object o, XmlElement elem)
protected void UnknownElement(object o, XmlElement elem, string qnames)
protected void UnknownNode(object o)
protected void UnknownNode(object o, string qnames)
private void UnknownNode(XmlNode unknownNode, object o, string qnames)
private void GetCurrentPosition(Int32& lineNumber, Int32& linePosition)
protected void UnreferencedObject(string id, object o)
private string CurrentTag()
protected Exception CreateUnknownTypeException(XmlQualifiedName type)
protected Exception CreateReadOnlyCollectionException(string name)
protected Exception CreateAbstractTypeException(string name, string ns)
protected Exception CreateInaccessibleConstructorException(string typeName)
protected Exception CreateCtorHasSecurityException(string typeName)
protected Exception CreateUnknownNodeException()
protected Exception CreateUnknownConstantException(string value, Type enumType)
protected Exception CreateInvalidCastException(Type type, object value)
protected Exception CreateInvalidCastException(Type type, object value, string id)
protected Exception CreateBadDerivationException(string xsdDerived, string nsDerived, string xsdBase, string nsBase, string clrDerived, string clrBase)
protected Exception CreateMissingIXmlSerializableType(string name, string ns, string clrType)
protected Array EnsureArrayIndex(Array a, int index, Type elementType)
protected Array ShrinkArray(Array a, int length, Type elementType, bool isNullable)
protected string ReadString(string value)
protected string ReadString(string value, bool trim)
protected IXmlSerializable ReadSerializable(IXmlSerializable serializable)
protected IXmlSerializable ReadSerializable(IXmlSerializable serializable, bool wrappedAny)
protected bool ReadReference(String& fixupReference)
protected void AddTarget(string id, object o)
protected void AddFixup(Fixup fixup)
protected void AddFixup(CollectionFixup fixup)
protected object GetTarget(string id)
protected void Referenced(object o)
private void HandleUnreferencedObjects()
private void DoFixups()
protected void FixupArrayRefs(object fixup)
private object ReadArray(string typeName, string typeNs)
protected void InitCallbacks()
protected void ReadReferencedElements()
protected object ReadReferencedElement()
protected object ReadReferencedElement(string name, string ns)
protected object ReadReferencingElement(String& fixupReference)
protected object ReadReferencingElement(string name, string ns, String& fixupReference)
protected object ReadReferencingElement(string name, string ns, bool elementCanBeType, String& fixupReference)
protected void AddReadCallback(string name, string ns, Type type, XmlSerializationReadCallback read)
protected void ReadEndElement()
private object ReadXmlNodes(bool elementCanBeType)
protected void CheckReaderCount(Int32& whileIterations, Int32& readerCount)
}
internal System.Xml.Serialization.XmlSerializationReaderCodeGen : XmlSerializationCodeGen {
private Hashtable idNames
private Hashtable enums
private Hashtable createMethods
private int nextCreateMethodNumber
private int nextIdNumber
private int nextWhileLoopIndex
internal Hashtable Enums
internal Hashtable get_Enums()
internal void .ctor(IndentedWriter writer, TypeScope[] scopes, string access, string className)
internal void GenerateBegin()
internal void GenerateMethod(TypeMapping mapping)
internal void GenerateEnd()
internal void GenerateEnd(String[] methods, XmlMapping[] xmlMappings, Type[] types)
internal string GenerateElement(XmlMapping xmlMapping)
private void WriteIsStartTag(string name, string ns)
private void WriteUnknownNode(string func, string node, ElementAccessor e, bool anyIfs)
private void GenerateInitCallbacksMethod()
private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping)
private string GetChoiceIdentifierSource(MemberMapping[] mappings, MemberMapping member)
private string GetChoiceIdentifierSource(MemberMapping mapping, string parent, TypeDesc parentTypeDesc)
private string GenerateLiteralMembersElement(XmlMembersMapping xmlMembersMapping)
private void InitializeValueTypes(string arrayName, MemberMapping[] mappings)
private string GenerateEncodedMembersElement(XmlMembersMapping xmlMembersMapping)
private void WriteCreateCollection(TypeDesc td, string source)
private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping)
private string NextMethodName(string name)
private string NextIdName(string name)
private void WritePrimitive(TypeMapping mapping, string source)
private string MakeUnique(EnumMapping mapping, string name)
private string WriteHashtable(EnumMapping mapping, string typeName)
private void WriteEnumMethod(EnumMapping mapping)
private void WriteDerivedTypes(StructMapping mapping, bool isTypedReturn, string returnTypeName)
private void WriteEnumAndArrayTypes()
private void WriteNullableMethod(NullableMapping nullableMapping)
private void WriteStructMethod(StructMapping structMapping)
private void WriteLiteralStructMethod(StructMapping structMapping)
private void WriteEncodedStructMethod(StructMapping structMapping)
private void WriteFixupMethod(string fixupMethodName, Member[] members, string typeName, bool useReflection, bool typed, string source)
private void WriteAddCollectionFixup(TypeDesc typeDesc, bool readOnly, string memberSource, string targetSource)
private void WriteCreateCollectionMethod(CreateCollectionInfo c)
private void WriteQNameEqual(string source, string name, string ns)
private void WriteXmlNodeEqual(string source, string name, string ns)
private void WriteID(string name)
private void WriteAttributes(Member[] members, Member anyAttribute, string elseCall, string firstParam)
private void WriteAttribute(Member member)
private bool WriteMemberFixupBegin(Member[] members, string fixupMethodName, string source)
private void WriteMemberBegin(Member[] members)
private string ExpectedElements(Member[] members)
private void WriteMemberElements(Member[] members, string elementElseString, string elseString, Member anyElement, Member anyText, string checkTypeHrefsSource)
private void WriteMemberText(Member anyText, string elseString)
private void WriteText(Member member)
private void WriteMemberElementsCheckType(string checkTypeHrefsSource)
private void WriteMemberElementsElse(Member anyElement, string elementElseString)
private bool IsSequence(Member[] members)
private void WriteMemberElementsIf(Member[] members, Member anyElement, string elementElseString, string checkTypeSource)
private string GetArraySource(TypeDesc typeDesc, string arrayName)
private string GetArraySource(TypeDesc typeDesc, string arrayName, bool multiRef)
private void WriteMemberEnd(Member[] members)
private void WriteMemberEnd(Member[] members, bool soapRefs)
private void WriteSourceBeginTyped(string source, TypeDesc typeDesc)
private void WriteSourceBegin(string source)
private void WriteSourceEnd(string source)
private void WriteArray(string source, string arrayName, ArrayMapping arrayMapping, bool readOnly, bool isNullable, int fixupIndex)
private void WriteElement(string source, string arrayName, string choiceSource, ElementAccessor element, ChoiceIdentifierAccessor choice, string checkSpecified, bool checkForNull, bool readOnly, int fixupIndex, int elementIndex)
private void WriteDerivedSerializable(SerializableMapping head, SerializableMapping mapping, string source, bool isWrappedAny)
private int WriteWhileNotLoopStart()
private void WriteWhileLoopEnd(int loopIndex)
private int WriteWhileLoopStartCheck()
private void WriteWhileLoopEndCheck(int loopIndex)
private void WriteParamsRead(int length)
private void WriteReadNonRoots()
private void WriteBooleanValue(bool value)
private void WriteInitCheckTypeHrefList(string source)
private void WriteHandleHrefList(Member[] members, string listSource)
private void WriteIfNotSoapRoot(string source)
private void WriteCreateMapping(TypeMapping mapping, string local)
private void WriteCatchException(Type exceptionType)
private void WriteCatchCastException(TypeDesc typeDesc, string source, string id)
private void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc)
private void WriteCreateInstance(string escapedName, string source, bool useReflection, bool ctorInaccessible)
private void WriteLocalDecl(string typeFullName, string variableName, string initValue, bool useReflection)
}
internal System.Xml.Serialization.XmlSerializationReaderILGen : XmlSerializationILGen {
private Hashtable idNames
private Dictionary`2<string, FieldBuilder> idNameFields
private Hashtable enums
private int nextIdNumber
private int nextWhileLoopIndex
internal Hashtable Enums
internal Hashtable get_Enums()
internal void .ctor(TypeScope[] scopes, string access, string className)
internal void GenerateBegin()
internal void GenerateMethod(TypeMapping mapping)
internal void GenerateEnd(String[] methods, XmlMapping[] xmlMappings, Type[] types)
internal string GenerateElement(XmlMapping xmlMapping)
private void WriteIsStartTag(string name, string ns)
private void WriteUnknownNode(string func, string node, ElementAccessor e, bool anyIfs)
private void GenerateInitCallbacksMethod()
private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping)
private string GetChoiceIdentifierSource(MemberMapping[] mappings, MemberMapping member)
private string GetChoiceIdentifierSource(MemberMapping mapping, string parent, TypeDesc parentTypeDesc)
private string GenerateLiteralMembersElement(XmlMembersMapping xmlMembersMapping)
private void InitializeValueTypes(string arrayName, MemberMapping[] mappings)
private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping)
private string NextMethodName(string name)
private string NextIdName(string name)
private void WritePrimitive(TypeMapping mapping, string source)
private string MakeUnique(EnumMapping mapping, string name)
private string WriteHashtable(EnumMapping mapping, string typeName, MethodBuilder& get_TableName)
private void WriteEnumMethod(EnumMapping mapping)
private void WriteDerivedTypes(StructMapping mapping, bool isTypedReturn, string returnTypeName)
private void WriteEnumAndArrayTypes()
private void WriteNullableMethod(NullableMapping nullableMapping)
private void WriteStructMethod(StructMapping structMapping)
private void WriteLiteralStructMethod(StructMapping structMapping)
private void WriteQNameEqual(string source, string name, string ns)
private void WriteXmlNodeEqual(string source, string name, string ns)
private void WriteXmlNodeEqual(string source, string name, string ns, bool doAndIf)
private void WriteID(string name)
private void WriteAttributes(Member[] members, Member anyAttribute, string elseCall, LocalBuilder firstParam)
private void WriteAttribute(Member member)
private void WriteMemberBegin(Member[] members)
private string ExpectedElements(Member[] members)
private void WriteMemberElements(Member[] members, string elementElseString, string elseString, Member anyElement, Member anyText)
private void WriteMemberText(Member anyText, string elseString)
private void WriteText(Member member)
private void WriteMemberElementsElse(Member anyElement, string elementElseString)
private bool IsSequence(Member[] members)
private void WriteMemberElementsIf(Member[] members, Member anyElement, string elementElseString)
private string GetArraySource(TypeDesc typeDesc, string arrayName)
private string GetArraySource(TypeDesc typeDesc, string arrayName, bool multiRef)
private void WriteMemberEnd(Member[] members)
private void WriteMemberEnd(Member[] members, bool soapRefs)
private void WriteSourceBeginTyped(string source, TypeDesc typeDesc)
private void WriteSourceBegin(string source)
private void WriteSourceEnd(string source, Type elementType)
private void WriteSourceEnd(string source, Type elementType, Type stackType)
private void WriteArray(string source, string arrayName, ArrayMapping arrayMapping, bool readOnly, bool isNullable, int fixupIndex, int elementIndex)
private void WriteElement(string source, string arrayName, string choiceSource, ElementAccessor element, ChoiceIdentifierAccessor choice, string checkSpecified, bool checkForNull, bool readOnly, int fixupIndex, int elementIndex)
private void WriteDerivedSerializable(SerializableMapping head, SerializableMapping mapping, string source, bool isWrappedAny)
private int WriteWhileNotLoopStart()
private void WriteWhileLoopEnd(int loopIndex)
private int WriteWhileLoopStartCheck()
private void WriteWhileLoopEndCheck(int loopIndex)
private void WriteParamsRead(int length)
private void WriteCreateMapping(TypeMapping mapping, string local)
private void WriteCatchException(Type exceptionType)
private void WriteCatchCastException(TypeDesc typeDesc, string source, string id)
private void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc)
private void WriteCreateInstance(string source, bool ctorInaccessible, Type type)
private void WriteLocalDecl(string variableName, SourceInfo initValue)
private void ILGenElseString(string elseString)
private void ILGenParamsReadSource(string paramsReadSource)
private void ILGenParamsReadSource(string paramsReadSource, bool value)
private void ILGenElementElseString(string elementElseString)
private void ILGenSet(string source, object value)
}
public System.Xml.Serialization.XmlSerializationWriteCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object o)
public IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlSerializationWriter : XmlSerializationGeneratedCode {
private XmlWriter w
private XmlSerializerNamespaces namespaces
private int tempNamespacePrefix
private Hashtable usedPrefixes
private Hashtable references
private string idBase
private int nextId
private Hashtable typeEntries
private ArrayList referencesToWrite
private Hashtable objectsInUse
private string aliasBase
private bool soap12
private bool escapeName
protected bool EscapeName
protected XmlWriter Writer
protected ArrayList Namespaces
internal void Init(XmlWriter w, XmlSerializerNamespaces namespaces, string encodingStyle, string idBase, TempAssembly tempAssembly)
protected bool get_EscapeName()
protected void set_EscapeName(bool value)
protected XmlWriter get_Writer()
protected void set_Writer(XmlWriter value)
protected ArrayList get_Namespaces()
protected void set_Namespaces(ArrayList value)
protected Byte[] FromByteArrayBase64(Byte[] value)
protected Assembly ResolveDynamicAssembly(string assemblyFullName)
protected string FromByteArrayHex(Byte[] value)
protected string FromDateTime(DateTime value)
protected string FromDate(DateTime value)
protected string FromTime(DateTime value)
protected string FromChar(char value)
protected string FromEnum(long value, String[] values, Int64[] ids)
protected string FromEnum(long value, String[] values, Int64[] ids, string typeName)
protected string FromXmlName(string name)
protected string FromXmlNCName(string ncName)
protected string FromXmlNmToken(string nmToken)
protected string FromXmlNmTokens(string nmTokens)
protected void WriteXsiType(string name, string ns)
private XmlQualifiedName GetPrimitiveTypeName(Type type)
private XmlQualifiedName GetPrimitiveTypeName(Type type, bool throwIfUnknown)
internal XmlQualifiedName GetPrimitiveTypeNameInternal(Type type)
protected void WriteTypedPrimitive(string name, string ns, object o, bool xsiType)
private string GetQualifiedName(string name, string ns)
protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName)
protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName, bool ignoreEmpty)
protected void WriteStartElement(string name)
protected void WriteStartElement(string name, string ns)
protected void WriteStartElement(string name, string ns, bool writePrefixed)
protected void WriteStartElement(string name, string ns, object o)
protected void WriteStartElement(string name, string ns, object o, bool writePrefixed)
protected void WriteStartElement(string name, string ns, object o, bool writePrefixed, XmlSerializerNamespaces xmlns)
private Hashtable ListUsedPrefixes(Hashtable nsList, string prefix)
protected void WriteNullTagEncoded(string name)
protected void WriteNullTagEncoded(string name, string ns)
protected void WriteNullTagLiteral(string name)
protected void WriteNullTagLiteral(string name, string ns)
protected void WriteEmptyTag(string name)
protected void WriteEmptyTag(string name, string ns)
protected void WriteEndElement()
protected void WriteEndElement(object o)
protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable)
protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable, bool wrapped)
protected void WriteNullableStringEncoded(string name, string ns, string value, XmlQualifiedName xsiType)
protected void WriteNullableStringLiteral(string name, string ns, string value)
protected void WriteNullableStringEncodedRaw(string name, string ns, string value, XmlQualifiedName xsiType)
protected void WriteNullableStringEncodedRaw(string name, string ns, Byte[] value, XmlQualifiedName xsiType)
protected void WriteNullableStringLiteralRaw(string name, string ns, string value)
protected void WriteNullableStringLiteralRaw(string name, string ns, Byte[] value)
protected void WriteNullableQualifiedNameEncoded(string name, string ns, XmlQualifiedName value, XmlQualifiedName xsiType)
protected void WriteNullableQualifiedNameLiteral(string name, string ns, XmlQualifiedName value)
protected void WriteElementEncoded(XmlNode node, string name, string ns, bool isNullable, bool any)
protected void WriteElementLiteral(XmlNode node, string name, string ns, bool isNullable, bool any)
private void WriteElement(XmlNode node, string name, string ns, bool isNullable, bool any)
protected Exception CreateUnknownTypeException(object o)
protected Exception CreateUnknownTypeException(Type type)
protected Exception CreateMismatchChoiceException(string value, string elementName, string enumValue)
protected Exception CreateUnknownAnyElementException(string name, string ns)
protected Exception CreateInvalidChoiceIdentifierValueException(string type, string identifier)
protected Exception CreateChoiceIdentifierValueException(string value, string identifier, string name, string ns)
protected Exception CreateInvalidEnumValueException(object value, string typeName)
protected Exception CreateInvalidAnyTypeException(object o)
protected Exception CreateInvalidAnyTypeException(Type type)
protected void WriteReferencingElement(string n, string ns, object o)
protected void WriteReferencingElement(string n, string ns, object o, bool isNullable)
private bool IsIdDefined(object o)
private string GetId(object o, bool addToReferencesList)
protected void WriteId(object o)
private void WriteId(object o, bool addToReferencesList)
protected void WriteXmlAttribute(XmlNode node)
protected void WriteXmlAttribute(XmlNode node, object container)
protected void WriteAttribute(string localName, string ns, string value)
protected void WriteAttribute(string localName, string ns, Byte[] value)
protected void WriteAttribute(string localName, string value)
protected void WriteAttribute(string localName, Byte[] value)
protected void WriteAttribute(string prefix, string localName, string ns, string value)
protected void WriteValue(string value)
protected void WriteValue(Byte[] value)
protected void WriteStartDocument()
protected void WriteElementString(string localName, string value)
protected void WriteElementString(string localName, string ns, string value)
protected void WriteElementString(string localName, string value, XmlQualifiedName xsiType)
protected void WriteElementString(string localName, string ns, string value, XmlQualifiedName xsiType)
protected void WriteElementStringRaw(string localName, string value)
protected void WriteElementStringRaw(string localName, Byte[] value)
protected void WriteElementStringRaw(string localName, string ns, string value)
protected void WriteElementStringRaw(string localName, string ns, Byte[] value)
protected void WriteElementStringRaw(string localName, string value, XmlQualifiedName xsiType)
protected void WriteElementStringRaw(string localName, Byte[] value, XmlQualifiedName xsiType)
protected void WriteElementStringRaw(string localName, string ns, string value, XmlQualifiedName xsiType)
protected void WriteElementStringRaw(string localName, string ns, Byte[] value, XmlQualifiedName xsiType)
protected void WriteRpcResult(string name, string ns)
protected void WriteElementQualifiedName(string localName, XmlQualifiedName value)
protected void WriteElementQualifiedName(string localName, XmlQualifiedName value, XmlQualifiedName xsiType)
protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value)
protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value, XmlQualifiedName xsiType)
protected void AddWriteCallback(Type type, string typeName, string typeNs, XmlSerializationWriteCallback callback)
private void WriteArray(string name, string ns, object o, Type type)
protected void WritePotentiallyReferencingElement(string n, string ns, object o)
protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType)
protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference)
protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference, bool isNullable)
private void WriteReferencedElement(object o, Type ambientType)
private void WriteReferencedElement(string name, string ns, object o, Type ambientType)
private TypeEntry GetTypeEntry(Type t)
protected void InitCallbacks()
protected void WriteReferencedElements()
protected void TopLevelElement()
protected void WriteNamespaceDeclarations(XmlSerializerNamespaces xmlns)
private string NextPrefix()
}
internal System.Xml.Serialization.XmlSerializationWriterCodeGen : XmlSerializationCodeGen {
internal void .ctor(IndentedWriter writer, TypeScope[] scopes, string access, string className)
internal void GenerateBegin()
internal void GenerateMethod(TypeMapping mapping)
internal void GenerateEnd()
internal string GenerateElement(XmlMapping xmlMapping)
private void GenerateInitCallbacksMethod()
private void WriteQualifiedNameElement(string name, string ns, object defaultValue, string source, bool nullable, bool IsSoap, TypeMapping mapping)
private void WriteEnumValue(EnumMapping mapping, string source)
private void WritePrimitiveValue(TypeDesc typeDesc, string source, bool isElement)
private void WritePrimitive(string method, string name, string ns, object defaultValue, string source, TypeMapping mapping, bool writeXsiType, bool isElement, bool isNullable)
private void WriteTag(string methodName, string name, string ns)
private void WriteTag(string methodName, string name, string ns, bool writePrefixed)
private void WriteStartElement(string name, string ns, bool writePrefixed)
private void WriteEndElement()
private void WriteEndElement(string source)
private void WriteEncodedNullTag(string name, string ns)
private void WriteLiteralNullTag(string name, string ns)
private void WriteEmptyTag(string name, string ns)
private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping)
private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping)
private string NextMethodName(string name)
private void WriteEnumMethod(EnumMapping mapping)
private void WriteDerivedTypes(StructMapping mapping)
private void WriteEnumAndArrayTypes()
private void WriteStructMethod(StructMapping mapping)
private bool CanOptimizeWriteListSequence(TypeDesc listElementTypeDesc)
private void WriteMember(string source, AttributeAccessor attribute, TypeDesc memberTypeDesc, string parent)
private void WriteAttribute(string source, AttributeAccessor attribute, string parent)
private void WriteMember(string source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc memberTypeDesc, bool writeAccessors)
private void WriteArray(string source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc)
private void WriteArrayItems(ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc, string arrayName, string choiceName)
private void WriteElements(string source, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, string arrayName, bool writeAccessors, bool isNullable)
private void WriteElements(string source, string enumSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, string arrayName, bool writeAccessors, bool isNullable)
private void WriteText(string source, TextAccessor text)
private void WriteElement(string source, ElementAccessor element, string arrayName, bool writeAccessor)
private void WriteElementCall(string func, Type cast, string source, string name, string ns, bool isNullable, bool isAny)
private void WriteCheckDefault(string source, object value, bool isNullable)
private void WriteChoiceTypeCheck(string source, string fullTypeName, bool useReflection, ChoiceIdentifierAccessor choice, string enumName, TypeDesc typeDesc)
private void WriteNullCheckBegin(string source, ElementAccessor element)
private void WriteValue(object value)
private void WriteNamespaces(string source)
private int FindXmlnsIndex(MemberMapping[] members)
private void WriteExtraMembers(string loopStartSource, string loopEndSource)
private void WriteLocalDecl(string typeName, string variableName, string initValue, bool useReflection)
private void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc)
private void WriteTypeCompare(string variable, string escapedTypeName, bool useReflection)
private void WriteInstanceOf(string source, string escapedTypeName, bool useReflection)
private void WriteArrayTypeCompare(string variable, string escapedTypeName, string elementTypeName, bool useReflection)
private void WriteEnumCase(string fullTypeName, ConstantMapping c, bool useReflection)
private string FindChoiceEnumValue(ElementAccessor element, EnumMapping choiceMapping, bool useReflection)
}
internal System.Xml.Serialization.XmlSerializationWriterILGen : XmlSerializationILGen {
internal void .ctor(TypeScope[] scopes, string access, string className)
internal void GenerateBegin()
internal void GenerateMethod(TypeMapping mapping)
internal Type GenerateEnd()
internal string GenerateElement(XmlMapping xmlMapping)
private void GenerateInitCallbacksMethod()
private void WriteQualifiedNameElement(string name, string ns, object defaultValue, SourceInfo source, bool nullable, TypeMapping mapping)
private void WriteEnumValue(EnumMapping mapping, SourceInfo source, Type& returnType)
private void WritePrimitiveValue(TypeDesc typeDesc, SourceInfo source, Type& returnType)
private void WritePrimitive(string method, string name, string ns, object defaultValue, SourceInfo source, TypeMapping mapping, bool writeXsiType, bool isElement, bool isNullable)
private void WriteTag(string methodName, string name, string ns)
private void WriteTag(string methodName, string name, string ns, bool writePrefixed)
private void WriteStartElement(string name, string ns, bool writePrefixed)
private void WriteEndElement()
private void WriteEndElement(string source)
private void WriteLiteralNullTag(string name, string ns)
private void WriteEmptyTag(string name, string ns)
private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping)
private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping)
private string NextMethodName(string name)
private void WriteEnumMethod(EnumMapping mapping)
private void WriteDerivedTypes(StructMapping mapping)
private void WriteEnumAndArrayTypes()
private void WriteStructMethod(StructMapping mapping)
private bool CanOptimizeWriteListSequence(TypeDesc listElementTypeDesc)
private void WriteMember(SourceInfo source, AttributeAccessor attribute, TypeDesc memberTypeDesc, string parent)
private void WriteAttribute(SourceInfo source, AttributeAccessor attribute, string parent)
private object GetConvertedDefaultValue(Type targetType, object rawDefaultValue)
private void WriteMember(SourceInfo source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc memberTypeDesc, bool writeAccessors)
private void WriteArray(SourceInfo source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc)
private void WriteArrayItems(ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc, string arrayName, string choiceName)
private void WriteElements(SourceInfo source, string enumSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, string arrayName, bool writeAccessors, bool isNullable)
private void WriteText(SourceInfo source, TextAccessor text)
private void WriteElement(SourceInfo source, ElementAccessor element, string arrayName, bool writeAccessor)
private void WriteElementCall(string func, Type cast, SourceInfo source, string name, string ns, bool isNullable, bool isAny)
private void WriteCheckDefault(SourceInfo source, object value, bool isNullable)
private void WriteChoiceTypeCheck(SourceInfo source, string fullTypeName, ChoiceIdentifierAccessor choice, string enumName, TypeDesc typeDesc)
private void WriteNullCheckBegin(string source, ElementAccessor element)
private void WriteNamespaces(string source)
private int FindXmlnsIndex(MemberMapping[] members)
private void WriteLocalDecl(string variableName, string initValue, Type type)
private void WriteArrayLocalDecl(string typeName, string variableName, SourceInfo initValue, TypeDesc arrayTypeDesc)
private void WriteTypeCompare(string variable, Type type)
private void WriteInstanceOf(SourceInfo source, Type type)
private void WriteArrayTypeCompare(string variable, Type arrayType)
private string FindChoiceEnumValue(ElementAccessor element, EnumMapping choiceMapping, Object& eValue)
}
public System.Xml.Serialization.XmlSerializer : object {
private TempAssembly tempAssembly
private bool typedSerializer
private Type primitiveType
private XmlMapping mapping
private XmlDeserializationEvents events
private TempAssemblyCache cache
private XmlSerializerNamespaces modreq(System.Runtime.CompilerServices.IsVolatile) defaultNamespaces
private Hashtable xmlSerializerTable
private XmlSerializerNamespaces DefaultNamespaces
private XmlSerializerNamespaces get_DefaultNamespaces()
public void .ctor(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace)
public void .ctor(Type type, XmlRootAttribute root)
public void .ctor(Type type, Type[] extraTypes)
public void .ctor(Type type, XmlAttributeOverrides overrides)
public void .ctor(XmlTypeMapping xmlTypeMapping)
public void .ctor(Type type)
public void .ctor(Type type, string defaultNamespace)
public void .ctor(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location)
public void .ctor(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location, Evidence evidence)
private void DemandForUserLocationOrEvidence()
internal TempAssembly GenerateTempAssembly(XmlMapping xmlMapping)
internal TempAssembly GenerateTempAssembly(XmlMapping xmlMapping, Type type, string defaultNamespace)
internal TempAssembly GenerateTempAssembly(XmlMapping xmlMapping, Type type, string defaultNamespace, string location, Evidence evidence)
public void Serialize(TextWriter textWriter, object o)
public void Serialize(TextWriter textWriter, object o, XmlSerializerNamespaces namespaces)
public void Serialize(Stream stream, object o)
public void Serialize(Stream stream, object o, XmlSerializerNamespaces namespaces)
public void Serialize(XmlWriter xmlWriter, object o)
public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces)
public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle)
public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id)
public object Deserialize(Stream stream)
public object Deserialize(TextReader textReader)
public object Deserialize(XmlReader xmlReader)
public object Deserialize(XmlReader xmlReader, XmlDeserializationEvents events)
public object Deserialize(XmlReader xmlReader, string encodingStyle)
public object Deserialize(XmlReader xmlReader, string encodingStyle, XmlDeserializationEvents events)
public bool CanDeserialize(XmlReader xmlReader)
public XmlSerializer[] FromMappings(XmlMapping[] mappings)
public XmlSerializer[] FromMappings(XmlMapping[] mappings, Type type)
private XmlSerializer[] GetSerializersFromCache(XmlMapping[] mappings, Type type)
public XmlSerializer[] FromMappings(XmlMapping[] mappings, Evidence evidence)
public Assembly GenerateSerializer(Type[] types, XmlMapping[] mappings)
public Assembly GenerateSerializer(Type[] types, XmlMapping[] mappings, CompilerParameters parameters)
public XmlSerializer[] FromTypes(Type[] types)
public string GetXmlSerializerAssemblyName(Type type)
public string GetXmlSerializerAssemblyName(Type type, string defaultNamespace)
public void add_UnknownNode(XmlNodeEventHandler value)
public void remove_UnknownNode(XmlNodeEventHandler value)
public void add_UnknownAttribute(XmlAttributeEventHandler value)
public void remove_UnknownAttribute(XmlAttributeEventHandler value)
public void add_UnknownElement(XmlElementEventHandler value)
public void remove_UnknownElement(XmlElementEventHandler value)
public void add_UnreferencedObject(UnreferencedObjectEventHandler value)
public void remove_UnreferencedObject(UnreferencedObjectEventHandler value)
protected XmlSerializationReader CreateReader()
protected object Deserialize(XmlSerializationReader reader)
protected XmlSerializationWriter CreateWriter()
protected void Serialize(object o, XmlSerializationWriter writer)
internal void SetTempAssembly(TempAssembly tempAssembly, XmlMapping mapping)
private XmlTypeMapping GetKnownMapping(Type type, string ns)
private void SerializePrimitive(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces)
private object DeserializePrimitive(XmlReader xmlReader, XmlDeserializationEvents events)
}
public System.Xml.Serialization.XmlSerializerAssemblyAttribute : Attribute {
private string assemblyName
private string codeBase
public string CodeBase
public string AssemblyName
public void .ctor(string assemblyName)
public void .ctor(string assemblyName, string codeBase)
public string get_CodeBase()
public void set_CodeBase(string value)
public string get_AssemblyName()
public void set_AssemblyName(string value)
}
internal System.Xml.Serialization.XmlSerializerCompilerParameters : object {
private bool needTempDirAccess
private CompilerParameters parameters
internal bool IsNeedTempDirAccess
internal CompilerParameters CodeDomParameters
private void .ctor(CompilerParameters parameters, bool needTempDirAccess)
internal bool get_IsNeedTempDirAccess()
internal CompilerParameters get_CodeDomParameters()
internal XmlSerializerCompilerParameters Create(string location)
internal XmlSerializerCompilerParameters Create(CompilerParameters parameters, bool needTempDirAccess)
}
public System.Xml.Serialization.XmlSerializerFactory : object {
private TempAssemblyCache cache
public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace)
public XmlSerializer CreateSerializer(Type type, XmlRootAttribute root)
public XmlSerializer CreateSerializer(Type type, Type[] extraTypes)
public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides)
public XmlSerializer CreateSerializer(XmlTypeMapping xmlTypeMapping)
public XmlSerializer CreateSerializer(Type type)
public XmlSerializer CreateSerializer(Type type, string defaultNamespace)
public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location)
public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location, Evidence evidence)
private void DemandForUserLocationOrEvidence()
}
public System.Xml.Serialization.XmlSerializerImplementation : object {
public XmlSerializationReader Reader
public XmlSerializationWriter Writer
public Hashtable ReadMethods
public Hashtable WriteMethods
public Hashtable TypedSerializers
public XmlSerializationReader get_Reader()
public XmlSerializationWriter get_Writer()
public Hashtable get_ReadMethods()
public Hashtable get_WriteMethods()
public Hashtable get_TypedSerializers()
public bool CanSerialize(Type type)
public XmlSerializer GetSerializer(Type type)
}
public System.Xml.Serialization.XmlSerializerNamespaces : object {
private Hashtable namespaces
public int Count
internal ArrayList NamespaceList
internal Hashtable Namespaces
public void .ctor(XmlSerializerNamespaces namespaces)
public void .ctor(XmlQualifiedName[] namespaces)
public void Add(string prefix, string ns)
internal void AddInternal(string prefix, string ns)
public XmlQualifiedName[] ToArray()
public int get_Count()
internal ArrayList get_NamespaceList()
internal Hashtable get_Namespaces()
internal void set_Namespaces(Hashtable value)
internal string LookupPrefix(string ns)
}
public System.Xml.Serialization.XmlSerializerVersionAttribute : Attribute {
private string mvid
private string serializerVersion
private string ns
private Type type
public string ParentAssemblyId
public string Version
public string Namespace
public Type Type
public void .ctor(Type type)
public string get_ParentAssemblyId()
public void set_ParentAssemblyId(string value)
public string get_Version()
public void set_Version(string value)
public string get_Namespace()
public void set_Namespace(string value)
public Type get_Type()
public void set_Type(Type value)
}
public System.Xml.Serialization.XmlTextAttribute : Attribute {
private Type type
private string dataType
public Type Type
public string DataType
public void .ctor(Type type)
public Type get_Type()
public void set_Type(Type value)
public string get_DataType()
public void set_DataType(string value)
}
public System.Xml.Serialization.XmlTypeAttribute : Attribute {
private bool includeInSchema
private bool anonymousType
private string ns
private string typeName
public bool AnonymousType
public bool IncludeInSchema
public string TypeName
public string Namespace
public void .ctor(string typeName)
public bool get_AnonymousType()
public void set_AnonymousType(bool value)
public bool get_IncludeInSchema()
public void set_IncludeInSchema(bool value)
public string get_TypeName()
public void set_TypeName(string value)
public string get_Namespace()
public void set_Namespace(string value)
}
public System.Xml.Serialization.XmlTypeMapping : XmlMapping {
internal TypeMapping Mapping
public string TypeName
public string TypeFullName
public string XsdTypeName
public string XsdTypeNamespace
internal void .ctor(TypeScope scope, ElementAccessor accessor)
internal TypeMapping get_Mapping()
public string get_TypeName()
public string get_TypeFullName()
public string get_XsdTypeName()
public string get_XsdTypeNamespace()
}
internal System.Xml.TernaryTreeByte : Enum {
public int value__
public TernaryTreeByte characterByte
public TernaryTreeByte leftTree
public TernaryTreeByte rightTree
public TernaryTreeByte data
}
internal System.Xml.TernaryTreeReadOnly : object {
private Byte[] nodeBuffer
public void .ctor(Byte[] nodeBuffer)
public byte FindCaseInsensitiveString(string stringToFind)
}
internal System.Xml.TextEncodedRawTextWriter : XmlEncodedRawTextWriter {
internal bool SupportsNamespaceDeclarationInChunks
public void .ctor(TextWriter writer, XmlWriterSettings settings)
public void .ctor(Stream stream, XmlWriterSettings settings)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
internal void StartElementContent()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
internal void WriteNamespaceDeclaration(string prefix, string ns)
internal bool get_SupportsNamespaceDeclarationInChunks()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public void WriteString(string textBlock)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
}
internal System.Xml.TextUtf8RawTextWriter : XmlUtf8RawTextWriter {
internal bool SupportsNamespaceDeclarationInChunks
public void .ctor(Stream stream, XmlWriterSettings settings)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
internal void StartElementContent()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
internal void WriteNamespaceDeclaration(string prefix, string ns)
internal bool get_SupportsNamespaceDeclarationInChunks()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public void WriteString(string textBlock)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
}
internal System.Xml.TriState : Enum {
public int value__
public TriState Unknown
public TriState False
public TriState True
}
internal System.Xml.Ucs4Decoder : Decoder {
internal Byte[] lastBytes
internal int lastBytesCount
public int GetCharCount(Byte[] bytes, int index, int count)
internal int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed)
internal void Ucs4ToUTF16(UInt32 code, Char[] chars, int charIndex)
}
internal System.Xml.Ucs4Decoder1234 : Ucs4Decoder {
internal int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
}
internal System.Xml.Ucs4Decoder2143 : Ucs4Decoder {
internal int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
}
internal System.Xml.Ucs4Decoder3412 : Ucs4Decoder {
internal int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
}
internal System.Xml.Ucs4Decoder4321 : Ucs4Decoder {
internal int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
}
internal System.Xml.Ucs4Encoding : Encoding {
internal Ucs4Decoder ucs4Decoder
public string WebName
public int CodePage
internal Encoding UCS4_Littleendian
internal Encoding UCS4_Bigendian
internal Encoding UCS4_2143
internal Encoding UCS4_3412
public string get_WebName()
public Decoder GetDecoder()
public int GetByteCount(Char[] chars, int index, int count)
public int GetByteCount(Char[] chars)
public Byte[] GetBytes(string s)
public int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex)
public int GetMaxByteCount(int charCount)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetMaxCharCount(int byteCount)
public int get_CodePage()
public int GetCharCount(Byte[] bytes)
public Encoder GetEncoder()
internal Encoding get_UCS4_Littleendian()
internal Encoding get_UCS4_Bigendian()
internal Encoding get_UCS4_2143()
internal Encoding get_UCS4_3412()
}
internal System.Xml.Ucs4Encoding1234 : Ucs4Encoding {
public string EncodingName
public string get_EncodingName()
public Byte[] GetPreamble()
}
internal System.Xml.Ucs4Encoding2143 : Ucs4Encoding {
public string EncodingName
public string get_EncodingName()
public Byte[] GetPreamble()
}
internal System.Xml.Ucs4Encoding3412 : Ucs4Encoding {
public string EncodingName
public string get_EncodingName()
public Byte[] GetPreamble()
}
internal System.Xml.Ucs4Encoding4321 : Ucs4Encoding {
public string EncodingName
public string get_EncodingName()
public Byte[] GetPreamble()
}
internal System.Xml.UTF16Decoder : Decoder {
private bool bigEndian
private int lastByte
private int CharSize
public void .ctor(bool bigEndian)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetCharCount(Byte[] bytes, int index, int count, bool flush)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed)
}
internal System.Xml.Utils.Res : object {
public string Xml_UserException
public string Xml_ErrorFilePosition
public string Xml_InvalidOperation
public string Xml_EndOfInnerExceptionStack
public string XPath_UnclosedString
public string XPath_ScientificNotation
public string XPath_UnexpectedToken
public string XPath_NodeTestExpected
public string XPath_EofExpected
public string XPath_TokenExpected
public string XPath_InvalidAxisInPattern
public string XPath_PredicateAfterDot
public string XPath_PredicateAfterDotDot
public string XPath_NArgsExpected
public string XPath_NOrMArgsExpected
public string XPath_AtLeastNArgsExpected
public string XPath_AtMostMArgsExpected
public string XPath_NodeSetArgumentExpected
public string XPath_NodeSetExpected
public string XPath_RtfInPathExpr
public string Xslt_WarningAsError
public string Xslt_InputTooComplex
public string Xslt_CannotLoadStylesheet
public string Xslt_WrongStylesheetElement
public string Xslt_WdXslNamespace
public string Xslt_NotAtTop
public string Xslt_UnexpectedElement
public string Xslt_NullNsAtTopLevel
public string Xslt_TextNodesNotAllowed
public string Xslt_NotEmptyContents
public string Xslt_InvalidAttribute
public string Xslt_MissingAttribute
public string Xslt_InvalidAttrValue
public string Xslt_BistateAttribute
public string Xslt_CharAttribute
public string Xslt_CircularInclude
public string Xslt_SingleRightBraceInAvt
public string Xslt_VariableCntSel2
public string Xslt_KeyCntUse
public string Xslt_DupTemplateName
public string Xslt_BothMatchNameAbsent
public string Xslt_InvalidVariable
public string Xslt_DupGlobalVariable
public string Xslt_DupLocalVariable
public string Xslt_DupNsAlias
public string Xslt_EmptyAttrValue
public string Xslt_EmptyNsAlias
public string Xslt_UnknownXsltFunction
public string Xslt_UnsupportedXsltFunction
public string Xslt_NoAttributeSet
public string Xslt_UndefinedKey
public string Xslt_CircularAttributeSet
public string Xslt_InvalidCallTemplate
public string Xslt_InvalidPrefix
public string Xslt_ScriptXsltNamespace
public string Xslt_ScriptInvalidLanguage
public string Xslt_ScriptMixedLanguages
public string Xslt_ScriptCompileException
public string Xslt_ScriptNotAtTop
public string Xslt_AssemblyNameHref
public string Xslt_ScriptAndExtensionClash
public string Xslt_NoDecimalFormat
public string Xslt_DecimalFormatSignsNotDistinct
public string Xslt_DecimalFormatRedefined
public string Xslt_UnknownExtensionElement
public string Xslt_ModeWithoutMatch
public string Xslt_ModeListEmpty
public string Xslt_ModeListDup
public string Xslt_ModeListAll
public string Xslt_PriorityWithoutMatch
public string Xslt_InvalidApplyImports
public string Xslt_DuplicateWithParam
public string Xslt_ReservedNS
public string Xslt_XmlnsAttr
public string Xslt_NoWhen
public string Xslt_WhenAfterOtherwise
public string Xslt_DupOtherwise
public string Xslt_AttributeRedefinition
public string Xslt_InvalidMethod
public string Xslt_InvalidEncoding
public string Xslt_InvalidLanguage
public string Xslt_InvalidCompareOption
public string Xslt_KeyNotAllowed
public string Xslt_VariablesNotAllowed
public string Xslt_CurrentNotAllowed
public string Xslt_DocumentFuncProhibited
public string Xslt_ScriptsProhibited
public string Xslt_ItemNull
public string Xslt_NodeSetNotNode
public string Xslt_UnsupportedClrType
public string Xslt_NotYetImplemented
public string Xslt_SchemaDeclaration
public string Xslt_SchemaAttribute
public string Xslt_SchemaAttributeValue
public string Xslt_ElementCntSel
public string Xslt_PerformSortCntSel
public string Xslt_RequiredAndSelect
public string Xslt_NoSelectNoContent
public string Xslt_NonTemplateTunnel
public string Xslt_RequiredOnFunction
public string Xslt_ExcludeDefault
public string Xslt_CollationSyntax
public string Xslt_AnalyzeStringDupChild
public string Xslt_AnalyzeStringChildOrder
public string Xslt_AnalyzeStringEmpty
public string Xslt_SortStable
public string Xslt_InputTypeAnnotations
public string Coll_BadOptFormat
public string Coll_Unsupported
public string Coll_UnsupportedLanguage
public string Coll_UnsupportedOpt
public string Coll_UnsupportedOptVal
public string Coll_UnsupportedSortOpt
public string Qil_Validation
public string XmlIl_TooManyParameters
public string XmlIl_BadXmlState
public string XmlIl_BadXmlStateAttr
public string XmlIl_NmspAfterAttr
public string XmlIl_NmspConflict
public string XmlIl_CantResolveEntity
public string XmlIl_NoDefaultDocument
public string XmlIl_UnknownDocument
public string XmlIl_UnknownParam
public string XmlIl_UnknownExtObj
public string XmlIl_CantStripNav
public string XmlIl_ExtensionError
public string XmlIl_TopLevelAttrNmsp
public string XmlIl_NoExtensionMethod
public string XmlIl_AmbiguousExtensionMethod
public string XmlIl_NonPublicExtensionMethod
public string XmlIl_GenericExtensionMethod
public string XmlIl_ByRefType
public string XmlIl_DocumentLoadError
public string Xslt_CompileError
public string Xslt_CompileError2
public string Xslt_UnsuppFunction
public string Xslt_NotFirstImport
public string Xslt_UnexpectedKeyword
public string Xslt_InvalidContents
public string Xslt_CantResolve
public string Xslt_SingleRightAvt
public string Xslt_OpenBracesAvt
public string Xslt_OpenLiteralAvt
public string Xslt_NestedAvt
public string Xslt_EmptyAvtExpr
public string Xslt_InvalidXPath
public string Xslt_InvalidQName
public string Xslt_NoStylesheetLoaded
public string Xslt_TemplateNoAttrib
public string Xslt_DupVarName
public string Xslt_WrongNumberArgs
public string Xslt_NoNodeSetConversion
public string Xslt_NoNavigatorConversion
public string Xslt_FunctionFailed
public string Xslt_InvalidFormat
public string Xslt_InvalidFormat1
public string Xslt_InvalidFormat2
public string Xslt_InvalidFormat3
public string Xslt_InvalidFormat4
public string Xslt_InvalidFormat5
public string Xslt_InvalidFormat8
public string Xslt_ScriptCompileErrors
public string Xslt_ScriptInvalidPrefix
public string Xslt_ScriptDub
public string Xslt_ScriptEmpty
public string Xslt_DupDecimalFormat
public string Xslt_CircularReference
public string Xslt_InvalidExtensionNamespace
public string Xslt_InvalidModeAttribute
public string Xslt_MultipleRoots
public string Xslt_ApplyImports
public string Xslt_Terminate
public string Xslt_InvalidPattern
public string Xslt_EmptyTagRequired
public string Xslt_WrongNamespace
public string Xslt_InvalidFormat6
public string Xslt_InvalidFormat7
public string Xslt_ScriptMixLang
public string Xslt_ScriptInvalidLang
public string Xslt_InvalidExtensionPermitions
public string Xslt_InvalidParamNamespace
public string Xslt_DuplicateParametr
public string Xslt_VariableCntSel
public string GetString(string name)
public string GetString(string name, Object[] args)
}
internal System.Xml.ValidateNames : object {
private XmlCharType xmlCharType
internal int ParseNmtoken(string s, int offset)
internal int ParseNmtokenNoNamespaces(string s, int offset)
internal bool IsNmtokenNoNamespaces(string s)
internal int ParseNameNoNamespaces(string s, int offset)
internal bool IsNameNoNamespaces(string s)
internal int ParseNCName(string s, int offset)
internal int ParseNCName(string s)
internal string ParseNCNameThrow(string s)
private bool ParseNCNameInternal(string s, bool throwOnError)
internal int ParseQName(string s, int offset, Int32& colonOffset)
internal void ParseQNameThrow(string s, String& prefix, String& localName)
internal void ParseNameTestThrow(string s, String& prefix, String& localName)
internal void ThrowInvalidName(string s, int offsetStartChar, int offsetBadChar)
internal Exception GetInvalidNameException(string s, int offsetStartChar, int offsetBadChar)
internal bool StartsWithXml(string s)
internal bool IsReservedNamespace(string s)
internal void ValidateNameThrow(string prefix, string localName, string ns, XPathNodeType nodeKind, Flags flags)
internal bool ValidateName(string prefix, string localName, string ns, XPathNodeType nodeKind, Flags flags)
private bool ValidateNameInternal(string prefix, string localName, string ns, XPathNodeType nodeKind, Flags flags, bool throwOnError)
private string CreateName(string prefix, string localName)
internal void SplitQName(string name, String& prefix, String& lname)
}
internal System.Xml.ValidatingReaderNodeData : object {
private string localName
private string namespaceUri
private string prefix
private string nameWPrefix
private string rawValue
private string originalStringValue
private int depth
private AttributePSVIInfo attributePSVIInfo
private XmlNodeType nodeType
private int lineNo
private int linePos
public string LocalName
public string Namespace
public string Prefix
public int Depth
public string RawValue
public string OriginalStringValue
public XmlNodeType NodeType
public AttributePSVIInfo AttInfo
public int LineNumber
public int LinePosition
public void .ctor(XmlNodeType nodeType)
public string get_LocalName()
public void set_LocalName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_Prefix()
public void set_Prefix(string value)
public string GetAtomizedNameWPrefix(XmlNameTable nameTable)
public int get_Depth()
public void set_Depth(int value)
public string get_RawValue()
public void set_RawValue(string value)
public string get_OriginalStringValue()
public void set_OriginalStringValue(string value)
public XmlNodeType get_NodeType()
public void set_NodeType(XmlNodeType value)
public AttributePSVIInfo get_AttInfo()
public void set_AttInfo(AttributePSVIInfo value)
public int get_LineNumber()
public int get_LinePosition()
internal void Clear(XmlNodeType nodeType)
internal void ClearName()
internal void SetLineInfo(int lineNo, int linePos)
internal void SetLineInfo(IXmlLineInfo lineInfo)
internal void SetItemData(string localName, string prefix, string ns, string value)
internal void SetItemData(string localName, string prefix, string ns, int depth)
internal void SetItemData(string value)
internal void SetItemData(string value, string originalStringValue)
}
public System.Xml.ValidationType : Enum {
public int value__
public ValidationType None
public ValidationType Auto
public ValidationType DTD
public ValidationType XDR
public ValidationType Schema
}
public System.Xml.WhitespaceHandling : Enum {
public int value__
public WhitespaceHandling All
public WhitespaceHandling Significant
public WhitespaceHandling None
}
public System.Xml.WriteState : Enum {
public int value__
public WriteState Start
public WriteState Prolog
public WriteState Element
public WriteState Attribute
public WriteState Content
public WriteState Closed
public WriteState Error
}
internal System.Xml.XmlAsyncCheckReader : XmlReader {
private XmlReader coreReader
private Task lastTask
internal XmlReader CoreReader
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public IXmlSchemaInfo SchemaInfo
public Type ValueType
public int AttributeCount
public string Item
public string Item
public string Item
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public bool CanResolveEntity
public bool CanReadBinaryContent
public bool CanReadValueChunk
public bool HasAttributes
internal XmlNamespaceManager NamespaceManager
internal IDtdInfo DtdInfo
internal XmlReader get_CoreReader()
public XmlAsyncCheckReader CreateAsyncCheckWrapper(XmlReader reader)
public void .ctor(XmlReader reader)
private void CheckAsync()
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public IXmlSchemaInfo get_SchemaInfo()
public Type get_ValueType()
public object ReadContentAsObject()
public bool ReadContentAsBoolean()
public DateTime ReadContentAsDateTime()
public double ReadContentAsDouble()
public float ReadContentAsFloat()
public decimal ReadContentAsDecimal()
public int ReadContentAsInt()
public long ReadContentAsLong()
public string ReadContentAsString()
public object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public object ReadElementContentAsObject()
public object ReadElementContentAsObject(string localName, string namespaceURI)
public bool ReadElementContentAsBoolean()
public bool ReadElementContentAsBoolean(string localName, string namespaceURI)
public DateTime ReadElementContentAsDateTime()
public DateTime ReadElementContentAsDateTime(string localName, string namespaceURI)
public DateTimeOffset ReadContentAsDateTimeOffset()
public double ReadElementContentAsDouble()
public double ReadElementContentAsDouble(string localName, string namespaceURI)
public float ReadElementContentAsFloat()
public float ReadElementContentAsFloat(string localName, string namespaceURI)
public decimal ReadElementContentAsDecimal()
public decimal ReadElementContentAsDecimal(string localName, string namespaceURI)
public int ReadElementContentAsInt()
public int ReadElementContentAsInt(string localName, string namespaceURI)
public long ReadElementContentAsLong()
public long ReadElementContentAsLong(string localName, string namespaceURI)
public string ReadElementContentAsString()
public string ReadElementContentAsString(string localName, string namespaceURI)
public object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI)
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string GetAttribute(int i)
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string namespaceURI)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool ReadAttributeValue()
public bool Read()
public bool get_EOF()
public void Close()
public ReadState get_ReadState()
public void Skip()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public bool get_CanResolveEntity()
public void ResolveEntity()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public bool get_CanReadValueChunk()
public int ReadValueChunk(Char[] buffer, int index, int count)
public string ReadString()
public XmlNodeType MoveToContent()
public void ReadStartElement()
public void ReadStartElement(string name)
public void ReadStartElement(string localname, string ns)
public string ReadElementString()
public string ReadElementString(string name)
public string ReadElementString(string localname, string ns)
public void ReadEndElement()
public bool IsStartElement()
public bool IsStartElement(string name)
public bool IsStartElement(string localname, string ns)
public bool ReadToFollowing(string name)
public bool ReadToFollowing(string localName, string namespaceURI)
public bool ReadToDescendant(string name)
public bool ReadToDescendant(string localName, string namespaceURI)
public bool ReadToNextSibling(string name)
public bool ReadToNextSibling(string localName, string namespaceURI)
public string ReadInnerXml()
public string ReadOuterXml()
public XmlReader ReadSubtree()
public bool get_HasAttributes()
protected void Dispose(bool disposing)
internal XmlNamespaceManager get_NamespaceManager()
internal IDtdInfo get_DtdInfo()
public Task`1<string> GetValueAsync()
public Task`1<object> ReadContentAsObjectAsync()
public Task`1<string> ReadContentAsStringAsync()
public Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
public Task`1<object> ReadElementContentAsObjectAsync()
public Task`1<string> ReadElementContentAsStringAsync()
public Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
public Task`1<bool> ReadAsync()
public Task SkipAsync()
public Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count)
public Task`1<XmlNodeType> MoveToContentAsync()
public Task`1<string> ReadInnerXmlAsync()
public Task`1<string> ReadOuterXmlAsync()
}
internal System.Xml.XmlAsyncCheckReaderWithLineInfo : XmlAsyncCheckReader {
private IXmlLineInfo readerAsIXmlLineInfo
public int LineNumber
public int LinePosition
public void .ctor(XmlReader reader)
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
}
internal System.Xml.XmlAsyncCheckReaderWithLineInfoNS : XmlAsyncCheckReaderWithLineInfo {
private IXmlNamespaceResolver readerAsIXmlNamespaceResolver
public void .ctor(XmlReader reader)
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
}
internal System.Xml.XmlAsyncCheckReaderWithLineInfoNSSchema : XmlAsyncCheckReaderWithLineInfoNS {
private IXmlSchemaInfo readerAsIXmlSchemaInfo
private XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.Validity
private bool System.Xml.Schema.IXmlSchemaInfo.IsDefault
private bool System.Xml.Schema.IXmlSchemaInfo.IsNil
private XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.MemberType
private XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.SchemaType
private XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.SchemaElement
private XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute
public void .ctor(XmlReader reader)
private XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.get_Validity()
private bool System.Xml.Schema.IXmlSchemaInfo.get_IsDefault()
private bool System.Xml.Schema.IXmlSchemaInfo.get_IsNil()
private XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.get_MemberType()
private XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.get_SchemaType()
private XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.get_SchemaElement()
private XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.get_SchemaAttribute()
}
internal System.Xml.XmlAsyncCheckReaderWithNS : XmlAsyncCheckReader {
private IXmlNamespaceResolver readerAsIXmlNamespaceResolver
public void .ctor(XmlReader reader)
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
}
internal System.Xml.XmlAsyncCheckWriter : XmlWriter {
private XmlWriter coreWriter
private Task lastTask
internal XmlWriter CoreWriter
public XmlWriterSettings Settings
public WriteState WriteState
public XmlSpace XmlSpace
public string XmlLang
internal XmlWriter get_CoreWriter()
public void .ctor(XmlWriter writer)
private void CheckAsync()
public XmlWriterSettings get_Settings()
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public WriteState get_WriteState()
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public void WriteNmToken(string name)
public void WriteName(string name)
public void WriteQualifiedName(string localName, string ns)
public void WriteValue(object value)
public void WriteValue(string value)
public void WriteValue(bool value)
public void WriteValue(DateTime value)
public void WriteValue(DateTimeOffset value)
public void WriteValue(double value)
public void WriteValue(float value)
public void WriteValue(decimal value)
public void WriteValue(int value)
public void WriteValue(long value)
public void WriteAttributes(XmlReader reader, bool defattr)
public void WriteNode(XmlReader reader, bool defattr)
public void WriteNode(XPathNavigator navigator, bool defattr)
protected void Dispose(bool disposing)
public Task WriteStartDocumentAsync()
public Task WriteStartDocumentAsync(bool standalone)
public Task WriteEndDocumentAsync()
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
public Task WriteStartElementAsync(string prefix, string localName, string ns)
public Task WriteEndElementAsync()
public Task WriteFullEndElementAsync()
protected internal Task WriteStartAttributeAsync(string prefix, string localName, string ns)
protected internal Task WriteEndAttributeAsync()
public Task WriteCDataAsync(string text)
public Task WriteCommentAsync(string text)
public Task WriteProcessingInstructionAsync(string name, string text)
public Task WriteEntityRefAsync(string name)
public Task WriteCharEntityAsync(char ch)
public Task WriteWhitespaceAsync(string ws)
public Task WriteStringAsync(string text)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(string data)
public Task WriteBase64Async(Byte[] buffer, int index, int count)
public Task WriteBinHexAsync(Byte[] buffer, int index, int count)
public Task FlushAsync()
public Task WriteNmTokenAsync(string name)
public Task WriteNameAsync(string name)
public Task WriteQualifiedNameAsync(string localName, string ns)
public Task WriteAttributesAsync(XmlReader reader, bool defattr)
public Task WriteNodeAsync(XmlReader reader, bool defattr)
public Task WriteNodeAsync(XPathNavigator navigator, bool defattr)
}
public System.Xml.XmlAttribute : XmlNode {
private XmlName name
private XmlLinkedNode lastChild
internal int LocalNameHash
internal XmlName XmlName
public XmlNode ParentNode
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public XmlNodeType NodeType
public XmlDocument OwnerDocument
public string Value
public IXmlSchemaInfo SchemaInfo
public string InnerText
internal bool IsContainer
internal XmlLinkedNode LastNode
public bool Specified
public XmlElement OwnerElement
public string InnerXml
public string BaseURI
internal XmlSpace XmlSpace
internal string XmlLang
internal XPathNodeType XPNodeType
internal string XPLocalName
internal bool IsNamespace
internal void .ctor(XmlName name, XmlDocument doc)
internal int get_LocalNameHash()
protected internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc)
internal XmlName get_XmlName()
internal void set_XmlName(XmlName value)
public XmlNode CloneNode(bool deep)
public XmlNode get_ParentNode()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public void set_Prefix(string value)
public XmlNodeType get_NodeType()
public XmlDocument get_OwnerDocument()
public string get_Value()
public void set_Value(string value)
public IXmlSchemaInfo get_SchemaInfo()
public void set_InnerText(string value)
internal bool PrepareOwnerElementInElementIdAttrMap()
internal void ResetOwnerElementInElementIdAttrMap(string oldInnerText)
internal bool get_IsContainer()
internal XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc)
internal XmlLinkedNode get_LastNode()
internal void set_LastNode(XmlLinkedNode value)
internal bool IsValidChildType(XmlNodeType type)
public bool get_Specified()
public XmlNode InsertBefore(XmlNode newChild, XmlNode refChild)
public XmlNode InsertAfter(XmlNode newChild, XmlNode refChild)
public XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild)
public XmlNode RemoveChild(XmlNode oldChild)
public XmlNode PrependChild(XmlNode newChild)
public XmlNode AppendChild(XmlNode newChild)
public XmlElement get_OwnerElement()
public void set_InnerXml(string value)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
public string get_BaseURI()
internal void SetParent(XmlNode node)
internal XmlSpace get_XmlSpace()
internal string get_XmlLang()
internal XPathNodeType get_XPNodeType()
internal string get_XPLocalName()
internal bool get_IsNamespace()
}
public System.Xml.XmlAttributeCollection : XmlNamedNodeMap {
public XmlAttribute ItemOf
public XmlAttribute ItemOf
public XmlAttribute ItemOf
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private int System.Collections.ICollection.Count
internal void .ctor(XmlNode parent)
public XmlAttribute get_ItemOf(int i)
public XmlAttribute get_ItemOf(string name)
public XmlAttribute get_ItemOf(string localName, string namespaceURI)
internal int FindNodeOffset(XmlAttribute node)
internal int FindNodeOffsetNS(XmlAttribute node)
public XmlNode SetNamedItem(XmlNode node)
public XmlAttribute Prepend(XmlAttribute node)
public XmlAttribute Append(XmlAttribute node)
public XmlAttribute InsertBefore(XmlAttribute newNode, XmlAttribute refNode)
public XmlAttribute InsertAfter(XmlAttribute newNode, XmlAttribute refNode)
public XmlAttribute Remove(XmlAttribute node)
public XmlAttribute RemoveAt(int i)
public void RemoveAll()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private int System.Collections.ICollection.get_Count()
public void CopyTo(XmlAttribute[] array, int index)
internal XmlNode AddNode(XmlNode node)
internal XmlNode InsertNodeAt(int i, XmlNode node)
internal XmlNode RemoveNodeAt(int i)
internal void Detach(XmlAttribute attr)
internal void InsertParentIntoElementIdAttrMap(XmlAttribute attr)
internal void RemoveParentFromElementIdAttrMap(XmlAttribute attr)
internal int RemoveDuplicateAttribute(XmlAttribute attr)
internal bool PrepareParentInElementIdAttrMap(string attrPrefix, string attrLocalName)
internal void ResetParentInElementIdAttrMap(string oldVal, string newVal)
internal XmlAttribute InternalAppendAttribute(XmlAttribute node)
}
internal System.Xml.XmlAutoDetectWriter : XmlRawWriter {
private XmlRawWriter wrapped
private OnRemoveWriter onRemove
private XmlWriterSettings writerSettings
private XmlEventCache eventCache
private TextWriter textWriter
private Stream strm
public OnRemoveWriter OnRemoveWriterEvent
public XmlWriterSettings Settings
internal IXmlNamespaceResolver NamespaceResolver
internal bool SupportsNamespaceDeclarationInChunks
private void .ctor(XmlWriterSettings writerSettings)
public void .ctor(TextWriter textWriter, XmlWriterSettings writerSettings)
public void .ctor(Stream strm, XmlWriterSettings writerSettings)
public OnRemoveWriter get_OnRemoveWriterEvent()
public void set_OnRemoveWriterEvent(OnRemoveWriter value)
public XmlWriterSettings get_Settings()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void Close()
public void Flush()
public void WriteValue(object value)
public void WriteValue(string value)
public void WriteValue(bool value)
public void WriteValue(DateTime value)
public void WriteValue(DateTimeOffset value)
public void WriteValue(double value)
public void WriteValue(float value)
public void WriteValue(decimal value)
public void WriteValue(int value)
public void WriteValue(long value)
internal IXmlNamespaceResolver get_NamespaceResolver()
internal void set_NamespaceResolver(IXmlNamespaceResolver value)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
internal void StartElementContent()
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
internal void WriteNamespaceDeclaration(string prefix, string ns)
internal bool get_SupportsNamespaceDeclarationInChunks()
internal void WriteStartNamespaceDeclaration(string prefix)
internal void WriteEndNamespaceDeclaration()
private bool IsHtmlTag(string tagName)
private void EnsureWrappedWriter(XmlOutputMethod outMethod)
private bool TextBlockCreatesWriter(string textBlock)
private void CreateWrappedWriter(XmlOutputMethod outMethod)
}
internal System.Xml.XmlCachedStream : MemoryStream {
private int MoveBufferSize
private Uri uri
internal void .ctor(Uri uri, Stream stream)
}
public System.Xml.XmlCDataSection : XmlCharacterData {
public string Name
public string LocalName
public XmlNodeType NodeType
public XmlNode ParentNode
internal XPathNodeType XPNodeType
internal bool IsText
public XmlNode PreviousText
protected internal void .ctor(string data, XmlDocument doc)
public string get_Name()
public string get_LocalName()
public XmlNodeType get_NodeType()
public XmlNode get_ParentNode()
public XmlNode CloneNode(bool deep)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
internal XPathNodeType get_XPNodeType()
internal bool get_IsText()
public XmlNode get_PreviousText()
}
public System.Xml.XmlCharacterData : XmlLinkedNode {
private string data
public string Value
public string InnerText
public string Data
public int Length
protected internal void .ctor(string data, XmlDocument doc)
public string get_Value()
public void set_Value(string value)
public string get_InnerText()
public void set_InnerText(string value)
public string get_Data()
public void set_Data(string value)
public int get_Length()
public string Substring(int offset, int count)
public void AppendData(string strData)
public void InsertData(int offset, string strData)
public void DeleteData(int offset, int count)
public void ReplaceData(int offset, int count, string strData)
internal bool CheckOnData(string data)
internal bool DecideXPNodeTypeForTextNodes(XmlNode node, XPathNodeType& xnt)
}
internal System.Xml.XmlCharCheckingReader : XmlWrappingReader {
private State state
private bool checkCharacters
private bool ignoreWhitespace
private bool ignoreComments
private bool ignorePis
private DtdProcessing dtdProcessing
private XmlNodeType lastNodeType
private XmlCharType xmlCharType
private ReadContentAsBinaryHelper readBinaryHelper
public XmlReaderSettings Settings
public ReadState ReadState
public bool CanReadBinaryContent
internal void .ctor(XmlReader reader, bool checkCharacters, bool ignoreWhitespace, bool ignoreComments, bool ignorePis, DtdProcessing dtdProcessing)
public XmlReaderSettings get_Settings()
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool Read()
public ReadState get_ReadState()
public bool ReadAttributeValue()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
private void Throw(string res, string arg)
private void Throw(string res, String[] args)
private void CheckWhitespace(string value)
private void ValidateQName(string name)
private void ValidateQName(string prefix, string localName)
private void CheckCharacters(string value)
private void FinishReadBinary()
public Task`1<bool> ReadAsync()
public Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count)
private Task FinishReadBinaryAsync()
private bool <>n__0()
private Task`1<int> <>n__1(Byte[] buffer, int index, int count)
private Task`1<int> <>n__2(Byte[] buffer, int index, int count)
private Task`1<int> <>n__3(Byte[] buffer, int index, int count)
private Task`1<int> <>n__4(Byte[] buffer, int index, int count)
}
internal System.Xml.XmlCharCheckingReaderWithNS : XmlCharCheckingReader {
internal IXmlNamespaceResolver readerAsNSResolver
internal void .ctor(XmlReader reader, IXmlNamespaceResolver readerAsNSResolver, bool checkCharacters, bool ignoreWhitespace, bool ignoreComments, bool ignorePis, DtdProcessing dtdProcessing)
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
}
internal System.Xml.XmlCharCheckingWriter : XmlWrappingWriter {
private bool checkValues
private bool checkNames
private bool replaceNewLines
private string newLineChars
private XmlCharType xmlCharType
public XmlWriterSettings Settings
internal void .ctor(XmlWriter baseWriter, bool checkValues, bool checkNames, bool replaceNewLines, string newLineChars)
public XmlWriterSettings get_Settings()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteNmToken(string name)
public void WriteName(string name)
public void WriteQualifiedName(string localName, string ns)
private void CheckCharacters(string str)
private void CheckCharacters(Char[] data, int offset, int len)
private void ValidateNCName(string ncname)
private void ValidateQName(string name)
private string ReplaceNewLines(string str)
private string ReplaceNewLines(Char[] data, int offset, int len)
private string InterleaveInvalidChars(string text, char invChar1, char invChar2)
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
public Task WriteStartElementAsync(string prefix, string localName, string ns)
protected internal Task WriteStartAttributeAsync(string prefix, string localName, string ns)
public Task WriteCDataAsync(string text)
public Task WriteCommentAsync(string text)
public Task WriteProcessingInstructionAsync(string name, string text)
public Task WriteEntityRefAsync(string name)
public Task WriteWhitespaceAsync(string ws)
public Task WriteStringAsync(string text)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteNmTokenAsync(string name)
public Task WriteNameAsync(string name)
public Task WriteQualifiedNameAsync(string localName, string ns)
}
internal System.Xml.XmlCharType : ValueType {
internal int SurHighStart
internal int SurHighEnd
internal int SurLowStart
internal int SurLowEnd
internal int SurMask
internal int fWhitespace
internal int fLetter
internal int fNCStartNameSC
internal int fNCNameSC
internal int fCharData
internal int fNCNameXml4e
internal int fText
internal int fAttrValue
private string s_PublicIdBitmap
private UInt32 CharPropertiesSize
internal string s_Whitespace
private string s_NCStartName
private string s_NCName
private string s_CharData
private string s_PublicID
private string s_Text
private string s_AttrValue
private string s_LetterXml4e
private string s_NCNameXml4e
private object s_Lock
private Byte[] modreq(System.Runtime.CompilerServices.IsVolatile) s_CharProperties
internal Byte[] charProperties
private object StaticLock
public XmlCharType Instance
private object get_StaticLock()
private void InitInstance()
private void SetProperties(string ranges, byte value)
private void .ctor(Byte[] charProperties)
public XmlCharType get_Instance()
public bool IsWhiteSpace(char ch)
public bool IsExtender(char ch)
public bool IsNCNameSingleChar(char ch)
public bool IsStartNCNameSingleChar(char ch)
public bool IsNameSingleChar(char ch)
public bool IsStartNameSingleChar(char ch)
public bool IsCharData(char ch)
public bool IsPubidChar(char ch)
internal bool IsTextChar(char ch)
internal bool IsAttributeValueChar(char ch)
public bool IsLetter(char ch)
public bool IsNCNameCharXml4e(char ch)
public bool IsStartNCNameCharXml4e(char ch)
public bool IsNameCharXml4e(char ch)
public bool IsStartNameCharXml4e(char ch)
public bool IsDigit(char ch)
public bool IsHexDigit(char ch)
internal bool IsHighSurrogate(int ch)
internal bool IsLowSurrogate(int ch)
internal bool IsSurrogate(int ch)
internal int CombineSurrogateChar(int lowChar, int highChar)
internal void SplitSurrogateChar(int combinedChar, Char& lowChar, Char& highChar)
internal bool IsOnlyWhitespace(string str)
internal int IsOnlyWhitespaceWithPos(string str)
internal int IsOnlyCharData(string str)
internal bool IsOnlyDigits(string str, int startPos, int len)
internal bool IsOnlyDigits(Char[] chars, int startPos, int len)
internal int IsPublicId(string str)
private bool InRange(int value, int start, int end)
}
internal System.Xml.XmlChildEnumerator : object {
internal XmlNode container
internal XmlNode child
internal bool isFirst
private object System.Collections.IEnumerator.Current
internal XmlNode Current
internal void .ctor(XmlNode container)
private bool System.Collections.IEnumerator.MoveNext()
internal bool MoveNext()
private void System.Collections.IEnumerator.Reset()
private object System.Collections.IEnumerator.get_Current()
internal XmlNode get_Current()
}
internal System.Xml.XmlChildNodes : XmlNodeList {
private XmlNode container
public int Count
public void .ctor(XmlNode container)
public XmlNode Item(int i)
public int get_Count()
public IEnumerator GetEnumerator()
}
public System.Xml.XmlComment : XmlCharacterData {
public string Name
public string LocalName
public XmlNodeType NodeType
internal XPathNodeType XPNodeType
protected internal void .ctor(string comment, XmlDocument doc)
public string get_Name()
public string get_LocalName()
public XmlNodeType get_NodeType()
public XmlNode CloneNode(bool deep)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
internal XPathNodeType get_XPNodeType()
}
internal System.Xml.XmlComplianceUtil : object {
public string NonCDataNormalize(string value)
public string CDataNormalize(string value)
public bool IsValidLanguageID(Char[] value, int startPos, int length)
}
internal System.Xml.XmlConfiguration.XmlConfigurationString : object {
internal string XmlReaderSectionName
internal string XsltSectionName
internal string ProhibitDefaultResolverName
internal string LimitXPathComplexityName
internal string EnableMemberAccessForXslCompiledTransformName
internal string CollapseWhiteSpaceIntoEmptyStringName
internal string XmlConfigurationSectionName
internal string XmlReaderSectionPath
internal string XsltSectionPath
}
public System.Xml.XmlConfiguration.XmlReaderSection : ConfigurationSection {
public string ProhibitDefaultResolverString
private bool _ProhibitDefaultResolver
internal bool ProhibitDefaultUrlResolver
public string CollapseWhiteSpaceIntoEmptyStringString
private bool _CollapseWhiteSpaceIntoEmptyString
internal bool CollapseWhiteSpaceIntoEmptyString
public string get_ProhibitDefaultResolverString()
public void set_ProhibitDefaultResolverString(string value)
private bool get__ProhibitDefaultResolver()
internal bool get_ProhibitDefaultUrlResolver()
internal XmlResolver CreateDefaultResolver()
public string get_CollapseWhiteSpaceIntoEmptyStringString()
public void set_CollapseWhiteSpaceIntoEmptyStringString(string value)
private bool get__CollapseWhiteSpaceIntoEmptyString()
internal bool get_CollapseWhiteSpaceIntoEmptyString()
}
public System.Xml.XmlConfiguration.XsltConfigSection : ConfigurationSection {
public string ProhibitDefaultResolverString
private bool _ProhibitDefaultResolver
private bool s_ProhibitDefaultUrlResolver
internal string LimitXPathComplexityString
private bool _LimitXPathComplexity
internal bool LimitXPathComplexity
internal string EnableMemberAccessForXslCompiledTransformString
private bool _EnableMemberAccessForXslCompiledTransform
internal bool EnableMemberAccessForXslCompiledTransform
public string get_ProhibitDefaultResolverString()
public void set_ProhibitDefaultResolverString(string value)
private bool get__ProhibitDefaultResolver()
private bool get_s_ProhibitDefaultUrlResolver()
internal XmlResolver CreateDefaultResolver()
internal string get_LimitXPathComplexityString()
internal void set_LimitXPathComplexityString(string value)
private bool get__LimitXPathComplexity()
internal bool get_LimitXPathComplexity()
internal string get_EnableMemberAccessForXslCompiledTransformString()
internal void set_EnableMemberAccessForXslCompiledTransformString(string value)
private bool get__EnableMemberAccessForXslCompiledTransform()
internal bool get_EnableMemberAccessForXslCompiledTransform()
}
public System.Xml.XmlConvert : object {
private XmlCharType xmlCharType
internal Char[] crt
private int c_EncodedCharLength
private Regex modreq(System.Runtime.CompilerServices.IsVolatile) c_EncodeCharPattern
private Regex modreq(System.Runtime.CompilerServices.IsVolatile) c_DecodeCharPattern
private String[] modreq(System.Runtime.CompilerServices.IsVolatile) s_allDateTimeFormats
internal Char[] WhitespaceChars
private String[] AllDateTimeFormats
public string EncodeName(string name)
public string EncodeNmToken(string name)
public string EncodeLocalName(string name)
public string DecodeName(string name)
private string EncodeName(string name, bool first, bool local)
private int FromHex(char digit)
internal Byte[] FromBinHexString(string s)
internal Byte[] FromBinHexString(string s, bool allowOddCount)
internal string ToBinHexString(Byte[] inArray)
public string VerifyName(string name)
internal Exception TryVerifyName(string name)
internal string VerifyQName(string name)
internal string VerifyQName(string name, ExceptionType exceptionType)
public string VerifyNCName(string name)
internal string VerifyNCName(string name, ExceptionType exceptionType)
internal Exception TryVerifyNCName(string name)
public string VerifyTOKEN(string token)
internal Exception TryVerifyTOKEN(string token)
public string VerifyNMTOKEN(string name)
internal string VerifyNMTOKEN(string name, ExceptionType exceptionType)
internal Exception TryVerifyNMTOKEN(string name)
internal string VerifyNormalizedString(string str)
internal Exception TryVerifyNormalizedString(string str)
public string VerifyXmlChars(string content)
public string VerifyPublicId(string publicId)
public string VerifyWhitespace(string content)
public bool IsStartNCNameChar(char ch)
public bool IsNCNameChar(char ch)
public bool IsXmlChar(char ch)
public bool IsXmlSurrogatePair(char lowChar, char highChar)
public bool IsPublicIdChar(char ch)
public bool IsWhitespaceChar(char ch)
public string ToString(bool value)
public string ToString(char value)
public string ToString(decimal value)
public string ToString(sbyte value)
public string ToString(short value)
public string ToString(int value)
public string ToString(long value)
public string ToString(byte value)
public string ToString(ushort value)
public string ToString(UInt32 value)
public string ToString(ulong value)
public string ToString(float value)
public string ToString(double value)
public string ToString(TimeSpan value)
public string ToString(DateTime value)
public string ToString(DateTime value, string format)
public string ToString(DateTime value, XmlDateTimeSerializationMode dateTimeOption)
public string ToString(DateTimeOffset value)
public string ToString(DateTimeOffset value, string format)
public string ToString(Guid value)
public bool ToBoolean(string s)
internal Exception TryToBoolean(string s, Boolean& result)
public char ToChar(string s)
internal Exception TryToChar(string s, Char& result)
public decimal ToDecimal(string s)
internal Exception TryToDecimal(string s, Decimal& result)
internal decimal ToInteger(string s)
internal Exception TryToInteger(string s, Decimal& result)
public sbyte ToSByte(string s)
internal Exception TryToSByte(string s, SByte& result)
public short ToInt16(string s)
internal Exception TryToInt16(string s, Int16& result)
public int ToInt32(string s)
internal Exception TryToInt32(string s, Int32& result)
public long ToInt64(string s)
internal Exception TryToInt64(string s, Int64& result)
public byte ToByte(string s)
internal Exception TryToByte(string s, Byte& result)
public ushort ToUInt16(string s)
internal Exception TryToUInt16(string s, UInt16& result)
public UInt32 ToUInt32(string s)
internal Exception TryToUInt32(string s, UInt32& result)
public ulong ToUInt64(string s)
internal Exception TryToUInt64(string s, UInt64& result)
public float ToSingle(string s)
internal Exception TryToSingle(string s, Single& result)
public double ToDouble(string s)
internal Exception TryToDouble(string s, Double& result)
internal double ToXPathDouble(object o)
internal string ToXPathString(object value)
internal double XPathRound(double value)
public TimeSpan ToTimeSpan(string s)
internal Exception TryToTimeSpan(string s, TimeSpan& result)
private String[] get_AllDateTimeFormats()
private void CreateAllDateTimeFormats()
public DateTime ToDateTime(string s)
public DateTime ToDateTime(string s, string format)
public DateTime ToDateTime(string s, String[] formats)
public DateTime ToDateTime(string s, XmlDateTimeSerializationMode dateTimeOption)
public DateTimeOffset ToDateTimeOffset(string s)
public DateTimeOffset ToDateTimeOffset(string s, string format)
public DateTimeOffset ToDateTimeOffset(string s, String[] formats)
public Guid ToGuid(string s)
internal Exception TryToGuid(string s, Guid& result)
private DateTime SwitchToLocalTime(DateTime value)
private DateTime SwitchToUtcTime(DateTime value)
internal Uri ToUri(string s)
internal Exception TryToUri(string s, Uri& result)
internal bool StrEqual(Char[] chars, int strPos1, int strLen1, string str2)
internal string TrimString(string value)
internal string TrimStringStart(string value)
internal string TrimStringEnd(string value)
internal String[] SplitString(string value)
internal String[] SplitString(string value, StringSplitOptions splitStringOptions)
internal bool IsNegativeZero(double value)
private long DoubleToInt64Bits(double value)
internal void VerifyCharData(string data, ExceptionType exceptionType)
internal void VerifyCharData(string data, ExceptionType invCharExceptionType, ExceptionType invSurrogateExceptionType)
internal void VerifyCharData(Char[] data, int offset, int len, ExceptionType exceptionType)
internal string EscapeValueForDebuggerDisplay(string value)
internal Exception CreateException(string res, ExceptionType exceptionType)
internal Exception CreateException(string res, ExceptionType exceptionType, int lineNo, int linePos)
internal Exception CreateException(string res, string arg, ExceptionType exceptionType)
internal Exception CreateException(string res, string arg, ExceptionType exceptionType, int lineNo, int linePos)
internal Exception CreateException(string res, String[] args, ExceptionType exceptionType)
internal Exception CreateException(string res, String[] args, ExceptionType exceptionType, int lineNo, int linePos)
internal Exception CreateInvalidSurrogatePairException(char low, char hi)
internal Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType)
internal Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType, int lineNo, int linePos)
internal Exception CreateInvalidHighSurrogateCharException(char hi)
internal Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType)
internal Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType, int lineNo, int linePos)
internal Exception CreateInvalidCharException(Char[] data, int length, int invCharPos)
internal Exception CreateInvalidCharException(Char[] data, int length, int invCharPos, ExceptionType exceptionType)
internal Exception CreateInvalidCharException(string data, int invCharPos)
internal Exception CreateInvalidCharException(string data, int invCharPos, ExceptionType exceptionType)
internal Exception CreateInvalidCharException(char invChar, char nextChar)
internal Exception CreateInvalidCharException(char invChar, char nextChar, ExceptionType exceptionType)
internal Exception CreateInvalidNameCharException(string name, int index, ExceptionType exceptionType)
internal ArgumentException CreateInvalidNameArgumentException(string name, string argumentName)
}
public System.Xml.XmlDateTimeSerializationMode : Enum {
public int value__
public XmlDateTimeSerializationMode Local
public XmlDateTimeSerializationMode Utc
public XmlDateTimeSerializationMode Unspecified
public XmlDateTimeSerializationMode RoundtripKind
}
public System.Xml.XmlDeclaration : XmlLinkedNode {
private string YES
private string NO
private string version
private string encoding
private string standalone
public string Version
public string Encoding
public string Standalone
public string Value
public string InnerText
public string Name
public string LocalName
public XmlNodeType NodeType
protected internal void .ctor(string version, string encoding, string standalone, XmlDocument doc)
public string get_Version()
internal void set_Version(string value)
public string get_Encoding()
public void set_Encoding(string value)
public string get_Standalone()
public void set_Standalone(string value)
public string get_Value()
public void set_Value(string value)
public string get_InnerText()
public void set_InnerText(string value)
public string get_Name()
public string get_LocalName()
public XmlNodeType get_NodeType()
public XmlNode CloneNode(bool deep)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
private bool IsValidXmlVersion(string ver)
}
public System.Xml.XmlDocument : XmlNode {
private XmlImplementation implementation
private DomNameTable domNameTable
private XmlLinkedNode lastChild
private XmlNamedNodeMap entities
private Hashtable htElementIdMap
private Hashtable htElementIDAttrDecl
private SchemaInfo schemaInfo
private XmlSchemaSet schemas
private bool reportValidity
private bool actualLoadingStatus
private XmlNodeChangedEventHandler onNodeInsertingDelegate
private XmlNodeChangedEventHandler onNodeInsertedDelegate
private XmlNodeChangedEventHandler onNodeRemovingDelegate
private XmlNodeChangedEventHandler onNodeRemovedDelegate
private XmlNodeChangedEventHandler onNodeChangingDelegate
private XmlNodeChangedEventHandler onNodeChangedDelegate
internal bool fEntRefNodesPresent
internal bool fCDataNodesPresent
private bool preserveWhitespace
private bool isLoading
internal string strDocumentName
internal string strDocumentFragmentName
internal string strCommentName
internal string strTextName
internal string strCDataSectionName
internal string strEntityName
internal string strID
internal string strXmlns
internal string strXml
internal string strSpace
internal string strLang
internal string strEmpty
internal string strNonSignificantWhitespaceName
internal string strSignificantWhitespaceName
internal string strReservedXmlns
internal string strReservedXml
internal string baseURI
private XmlResolver resolver
internal bool bSetResolver
internal object objLock
private XmlAttribute namespaceXml
internal EmptyEnumerator EmptyEnumerator
internal IXmlSchemaInfo NotKnownSchemaInfo
internal IXmlSchemaInfo ValidSchemaInfo
internal IXmlSchemaInfo InvalidSchemaInfo
internal SchemaInfo DtdSchemaInfo
public XmlNodeType NodeType
public XmlNode ParentNode
public XmlDocumentType DocumentType
internal XmlDeclaration Declaration
public XmlImplementation Implementation
public string Name
public string LocalName
public XmlElement DocumentElement
internal bool IsContainer
internal XmlLinkedNode LastNode
public XmlDocument OwnerDocument
public XmlSchemaSet Schemas
internal bool CanReportValidity
internal bool HasSetResolver
public XmlResolver XmlResolver
public XmlNameTable NameTable
public bool PreserveWhitespace
public bool IsReadOnly
internal XmlNamedNodeMap Entities
internal bool IsLoading
internal bool ActualLoadingStatus
internal Encoding TextEncoding
public string InnerText
public string InnerXml
internal string Version
internal string Encoding
internal string Standalone
public IXmlSchemaInfo SchemaInfo
public string BaseURI
internal XPathNodeType XPNodeType
internal bool HasEntityReferences
internal XmlAttribute NamespaceXml
public void .ctor(XmlNameTable nt)
protected internal void .ctor(XmlImplementation imp)
internal SchemaInfo get_DtdSchemaInfo()
internal void set_DtdSchemaInfo(SchemaInfo value)
internal void CheckName(string name)
internal XmlName AddXmlName(string prefix, string localName, string namespaceURI, IXmlSchemaInfo schemaInfo)
internal XmlName GetXmlName(string prefix, string localName, string namespaceURI, IXmlSchemaInfo schemaInfo)
internal XmlName AddAttrXmlName(string prefix, string localName, string namespaceURI, IXmlSchemaInfo schemaInfo)
internal bool AddIdInfo(XmlName eleName, XmlName attrName)
private XmlName GetIDInfoByElement_(XmlName eleName)
internal XmlName GetIDInfoByElement(XmlName eleName)
private WeakReference GetElement(ArrayList elementList, XmlElement elem)
internal void AddElementWithId(string id, XmlElement elem)
internal void RemoveElementWithId(string id, XmlElement elem)
public XmlNode CloneNode(bool deep)
public XmlNodeType get_NodeType()
public XmlNode get_ParentNode()
public XmlDocumentType get_DocumentType()
internal XmlDeclaration get_Declaration()
public XmlImplementation get_Implementation()
public string get_Name()
public string get_LocalName()
public XmlElement get_DocumentElement()
internal bool get_IsContainer()
internal XmlLinkedNode get_LastNode()
internal void set_LastNode(XmlLinkedNode value)
public XmlDocument get_OwnerDocument()
public XmlSchemaSet get_Schemas()
public void set_Schemas(XmlSchemaSet value)
internal bool get_CanReportValidity()
internal bool get_HasSetResolver()
internal XmlResolver GetResolver()
public void set_XmlResolver(XmlResolver value)
internal bool IsValidChildType(XmlNodeType type)
private bool HasNodeTypeInPrevSiblings(XmlNodeType nt, XmlNode refNode)
private bool HasNodeTypeInNextSiblings(XmlNodeType nt, XmlNode refNode)
internal bool CanInsertBefore(XmlNode newChild, XmlNode refChild)
internal bool CanInsertAfter(XmlNode newChild, XmlNode refChild)
public XmlAttribute CreateAttribute(string name)
internal void SetDefaultNamespace(string prefix, string localName, String& namespaceURI)
public XmlCDataSection CreateCDataSection(string data)
public XmlComment CreateComment(string data)
public XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset)
public XmlDocumentFragment CreateDocumentFragment()
public XmlElement CreateElement(string name)
internal void AddDefaultAttributes(XmlElement elem)
private SchemaElementDecl GetSchemaElementDecl(XmlElement elem)
private XmlAttribute PrepareDefaultAttribute(SchemaAttDef attdef, string attrPrefix, string attrLocalname, string attrNamespaceURI)
public XmlEntityReference CreateEntityReference(string name)
public XmlProcessingInstruction CreateProcessingInstruction(string target, string data)
public XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone)
public XmlText CreateTextNode(string text)
public XmlSignificantWhitespace CreateSignificantWhitespace(string text)
public XPathNavigator CreateNavigator()
protected internal XPathNavigator CreateNavigator(XmlNode node)
internal bool IsTextNode(XmlNodeType nt)
private XmlNode NormalizeText(XmlNode n)
public XmlWhitespace CreateWhitespace(string text)
public XmlNodeList GetElementsByTagName(string name)
public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI)
public XmlElement CreateElement(string qualifiedName, string namespaceURI)
public XmlNodeList GetElementsByTagName(string localName, string namespaceURI)
public XmlElement GetElementById(string elementId)
public XmlNode ImportNode(XmlNode node, bool deep)
private XmlNode ImportNodeInternal(XmlNode node, bool deep)
private void ImportAttributes(XmlNode fromElem, XmlNode toElem)
private void ImportChildren(XmlNode fromNode, XmlNode toNode, bool deep)
public XmlNameTable get_NameTable()
public XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI)
protected internal XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI)
public XmlElement CreateElement(string prefix, string localName, string namespaceURI)
public bool get_PreserveWhitespace()
public void set_PreserveWhitespace(bool value)
public bool get_IsReadOnly()
internal XmlNamedNodeMap get_Entities()
internal void set_Entities(XmlNamedNodeMap value)
internal bool get_IsLoading()
internal void set_IsLoading(bool value)
internal bool get_ActualLoadingStatus()
internal void set_ActualLoadingStatus(bool value)
public XmlNode CreateNode(XmlNodeType type, string prefix, string name, string namespaceURI)
public XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI)
public XmlNode CreateNode(XmlNodeType type, string name, string namespaceURI)
public XmlNode ReadNode(XmlReader reader)
internal XmlNodeType ConvertToNodeType(string nodeTypeString)
private XmlTextReader SetupReader(XmlTextReader tr)
public void Load(string filename)
public void Load(Stream inStream)
public void Load(TextReader txtReader)
public void Load(XmlReader reader)
public void LoadXml(string xml)
internal Encoding get_TextEncoding()
public void set_InnerText(string value)
public string get_InnerXml()
public void set_InnerXml(string value)
public void Save(string filename)
public void Save(Stream outStream)
public void Save(TextWriter writer)
public void Save(XmlWriter w)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter xw)
public void Validate(ValidationEventHandler validationEventHandler)
public void Validate(ValidationEventHandler validationEventHandler, XmlNode nodeToValidate)
public void add_NodeInserting(XmlNodeChangedEventHandler value)
public void remove_NodeInserting(XmlNodeChangedEventHandler value)
public void add_NodeInserted(XmlNodeChangedEventHandler value)
public void remove_NodeInserted(XmlNodeChangedEventHandler value)
public void add_NodeRemoving(XmlNodeChangedEventHandler value)
public void remove_NodeRemoving(XmlNodeChangedEventHandler value)
public void add_NodeRemoved(XmlNodeChangedEventHandler value)
public void remove_NodeRemoved(XmlNodeChangedEventHandler value)
public void add_NodeChanging(XmlNodeChangedEventHandler value)
public void remove_NodeChanging(XmlNodeChangedEventHandler value)
public void add_NodeChanged(XmlNodeChangedEventHandler value)
public void remove_NodeChanged(XmlNodeChangedEventHandler value)
internal XmlNodeChangedEventArgs GetEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action)
internal XmlNodeChangedEventArgs GetInsertEventArgsForLoad(XmlNode node, XmlNode newParent)
internal void BeforeEvent(XmlNodeChangedEventArgs args)
internal void AfterEvent(XmlNodeChangedEventArgs args)
internal XmlAttribute GetDefaultAttribute(XmlElement elem, string attrPrefix, string attrLocalname, string attrNamespaceURI)
internal string get_Version()
internal string get_Encoding()
internal string get_Standalone()
internal XmlEntity GetEntityNode(string name)
public IXmlSchemaInfo get_SchemaInfo()
public string get_BaseURI()
internal void SetBaseURI(string inBaseURI)
internal XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc)
internal XPathNodeType get_XPNodeType()
internal bool get_HasEntityReferences()
internal XmlAttribute get_NamespaceXml()
}
public System.Xml.XmlDocumentFragment : XmlNode {
private XmlLinkedNode lastChild
public string Name
public string LocalName
public XmlNodeType NodeType
public XmlNode ParentNode
public XmlDocument OwnerDocument
public string InnerXml
internal bool IsContainer
internal XmlLinkedNode LastNode
internal XPathNodeType XPNodeType
protected internal void .ctor(XmlDocument ownerDocument)
public string get_Name()
public string get_LocalName()
public XmlNodeType get_NodeType()
public XmlNode get_ParentNode()
public XmlDocument get_OwnerDocument()
public string get_InnerXml()
public void set_InnerXml(string value)
public XmlNode CloneNode(bool deep)
internal bool get_IsContainer()
internal XmlLinkedNode get_LastNode()
internal void set_LastNode(XmlLinkedNode value)
internal bool IsValidChildType(XmlNodeType type)
internal bool CanInsertAfter(XmlNode newChild, XmlNode refChild)
internal bool CanInsertBefore(XmlNode newChild, XmlNode refChild)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
internal XPathNodeType get_XPNodeType()
}
public System.Xml.XmlDocumentType : XmlLinkedNode {
private string name
private string publicId
private string systemId
private string internalSubset
private bool namespaces
private XmlNamedNodeMap entities
private XmlNamedNodeMap notations
private SchemaInfo schemaInfo
public string Name
public string LocalName
public XmlNodeType NodeType
public bool IsReadOnly
public XmlNamedNodeMap Entities
public XmlNamedNodeMap Notations
public string PublicId
public string SystemId
public string InternalSubset
internal bool ParseWithNamespaces
internal SchemaInfo DtdSchemaInfo
protected internal void .ctor(string name, string publicId, string systemId, string internalSubset, XmlDocument doc)
public string get_Name()
public string get_LocalName()
public XmlNodeType get_NodeType()
public XmlNode CloneNode(bool deep)
public bool get_IsReadOnly()
public XmlNamedNodeMap get_Entities()
public XmlNamedNodeMap get_Notations()
public string get_PublicId()
public string get_SystemId()
public string get_InternalSubset()
internal bool get_ParseWithNamespaces()
internal void set_ParseWithNamespaces(bool value)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
internal SchemaInfo get_DtdSchemaInfo()
internal void set_DtdSchemaInfo(SchemaInfo value)
}
internal System.Xml.XmlDOMTextWriter : XmlTextWriter {
public void .ctor(Stream w, Encoding encoding)
public void .ctor(string filename, Encoding encoding)
public void .ctor(TextWriter w)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
}
internal System.Xml.XmlDownloadManager : object {
private Hashtable connections
internal Stream GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)
private Stream GetNonFileStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)
internal void Remove(string host)
internal Task`1<Stream> GetStreamAsync(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)
private Task`1<Stream> GetNonFileStreamAsync(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)
}
public System.Xml.XmlElement : XmlLinkedNode {
private XmlName name
private XmlAttributeCollection attributes
private XmlLinkedNode lastChild
internal XmlName XmlName
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public XmlNodeType NodeType
public XmlNode ParentNode
public XmlDocument OwnerDocument
internal bool IsContainer
public bool IsEmpty
internal XmlLinkedNode LastNode
public XmlAttributeCollection Attributes
public bool HasAttributes
public IXmlSchemaInfo SchemaInfo
public string InnerXml
public string InnerText
public XmlNode NextSibling
internal XPathNodeType XPNodeType
internal string XPLocalName
internal void .ctor(XmlName name, bool empty, XmlDocument doc)
protected internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc)
internal XmlName get_XmlName()
internal void set_XmlName(XmlName value)
public XmlNode CloneNode(bool deep)
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public void set_Prefix(string value)
public XmlNodeType get_NodeType()
public XmlNode get_ParentNode()
public XmlDocument get_OwnerDocument()
internal bool get_IsContainer()
internal XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc)
public bool get_IsEmpty()
public void set_IsEmpty(bool value)
internal XmlLinkedNode get_LastNode()
internal void set_LastNode(XmlLinkedNode value)
internal bool IsValidChildType(XmlNodeType type)
public XmlAttributeCollection get_Attributes()
public bool get_HasAttributes()
public string GetAttribute(string name)
public void SetAttribute(string name, string value)
public void RemoveAttribute(string name)
public XmlAttribute GetAttributeNode(string name)
public XmlAttribute SetAttributeNode(XmlAttribute newAttr)
public XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr)
public XmlNodeList GetElementsByTagName(string name)
public string GetAttribute(string localName, string namespaceURI)
public string SetAttribute(string localName, string namespaceURI, string value)
public void RemoveAttribute(string localName, string namespaceURI)
public XmlAttribute GetAttributeNode(string localName, string namespaceURI)
public XmlAttribute SetAttributeNode(string localName, string namespaceURI)
public XmlAttribute RemoveAttributeNode(string localName, string namespaceURI)
public XmlNodeList GetElementsByTagName(string localName, string namespaceURI)
public bool HasAttribute(string name)
public bool HasAttribute(string localName, string namespaceURI)
public void WriteTo(XmlWriter w)
private void WriteElementTo(XmlWriter writer, XmlElement e)
private void WriteStartElement(XmlWriter w)
public void WriteContentTo(XmlWriter w)
public XmlNode RemoveAttributeAt(int i)
public void RemoveAllAttributes()
public void RemoveAll()
internal void RemoveAllChildren()
public IXmlSchemaInfo get_SchemaInfo()
public string get_InnerXml()
public void set_InnerXml(string value)
public string get_InnerText()
public void set_InnerText(string value)
public XmlNode get_NextSibling()
internal void SetParent(XmlNode node)
internal XPathNodeType get_XPNodeType()
internal string get_XPLocalName()
internal string GetXPAttribute(string localName, string ns)
}
internal System.Xml.XmlElementList : XmlNodeList {
private string asterisk
private int changeCount
private string name
private string localName
private string namespaceURI
private XmlNode rootNode
private int curInd
private XmlNode curElem
private bool empty
private bool atomized
private int matchCount
private WeakReference listener
internal int ChangeCount
public int Count
private void .ctor(XmlNode parent)
protected void Finalize()
internal void ConcurrencyCheck(XmlNodeChangedEventArgs args)
internal void .ctor(XmlNode parent, string name)
internal void .ctor(XmlNode parent, string localName, string namespaceURI)
internal int get_ChangeCount()
private XmlNode NextElemInPreOrder(XmlNode curNode)
private XmlNode PrevElemInPreOrder(XmlNode curNode)
private bool IsMatch(XmlNode curNode)
private XmlNode GetMatchingNode(XmlNode n, bool bNext)
private XmlNode GetNthMatchingNode(XmlNode n, bool bNext, int nCount)
public XmlNode GetNextNode(XmlNode n)
public XmlNode Item(int index)
public int get_Count()
public IEnumerator GetEnumerator()
protected void PrivateDisposeNodeList()
protected void Dispose(bool disposing)
}
internal System.Xml.XmlElementListEnumerator : object {
private XmlElementList list
private XmlNode curElem
private int changeCount
public object Current
public void .ctor(XmlElementList list)
public bool MoveNext()
public void Reset()
public object get_Current()
}
internal System.Xml.XmlElementListListener : object {
private WeakReference elemList
private XmlDocument doc
private XmlNodeChangedEventHandler nodeChangeHandler
internal void .ctor(XmlDocument doc, XmlElementList elemList)
private void OnListChanged(object sender, XmlNodeChangedEventArgs args)
internal void Unregister()
}
internal System.Xml.XmlEmptyElementListEnumerator : object {
public object Current
public void .ctor(XmlElementList list)
public bool MoveNext()
public void Reset()
public object get_Current()
}
internal System.Xml.XmlEncodedRawTextWriter : XmlRawWriter {
private bool useAsync
protected Byte[] bufBytes
protected Stream stream
protected Encoding encoding
protected XmlCharType xmlCharType
protected int bufPos
protected int textPos
protected int contentPos
protected int cdataPos
protected int attrEndPos
protected int bufLen
protected bool writeToNull
protected bool hadDoubleBracket
protected bool inAttributeValue
protected int bufBytesUsed
protected Char[] bufChars
protected Encoder encoder
protected TextWriter writer
protected bool trackTextContent
protected bool inTextContent
private int lastMarkPos
private Int32[] textContentMarks
private CharEntityEncoderFallback charEntityFallback
protected NewLineHandling newLineHandling
protected bool closeOutput
protected bool omitXmlDeclaration
protected string newLineChars
protected bool checkCharacters
protected XmlStandalone standalone
protected XmlOutputMethod outputMethod
protected bool autoXmlDeclaration
protected bool mergeCDataSections
private int BUFSIZE
private int ASYNCBUFSIZE
private int OVERFLOW
private int INIT_MARKS_COUNT
public XmlWriterSettings Settings
internal bool SupportsNamespaceDeclarationInChunks
protected void .ctor(XmlWriterSettings settings)
public void .ctor(TextWriter writer, XmlWriterSettings settings)
public void .ctor(Stream stream, XmlWriterSettings settings)
public XmlWriterSettings get_Settings()
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void StartElementContent()
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
internal void WriteNamespaceDeclaration(string prefix, string namespaceName)
internal bool get_SupportsNamespaceDeclarationInChunks()
internal void WriteStartNamespaceDeclaration(string prefix)
internal void WriteEndNamespaceDeclaration()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void Close()
public void Flush()
protected void FlushBuffer()
private void EncodeChars(int startOffset, int endOffset, bool writeAllToStream)
private void FlushEncoder()
protected void WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd)
protected void WriteElementTextBlock(Char* pSrc, Char* pSrcEnd)
protected void RawText(string s)
protected void RawText(Char* pSrcBegin, Char* pSrcEnd)
protected void WriteRawWithCharChecking(Char* pSrcBegin, Char* pSrcEnd)
protected void WriteCommentOrPi(string text, int stopChar)
protected void WriteCDataSection(string text)
private Char* EncodeSurrogate(Char* pSrc, Char* pSrcEnd, Char* pDst)
private Char* InvalidXmlChar(int ch, Char* pDst, bool entitize)
internal void EncodeChar(Char*& pSrc, Char* pSrcEnd, Char*& pDst)
protected void ChangeTextContentMark(bool value)
private void GrowTextContentMarks()
protected Char* WriteNewLine(Char* pDst)
protected Char* LtEntity(Char* pDst)
protected Char* GtEntity(Char* pDst)
protected Char* AmpEntity(Char* pDst)
protected Char* QuoteEntity(Char* pDst)
protected Char* TabEntity(Char* pDst)
protected Char* LineFeedEntity(Char* pDst)
protected Char* CarriageReturnEntity(Char* pDst)
private Char* CharEntity(Char* pDst, char ch)
protected Char* RawStartCData(Char* pDst)
protected Char* RawEndCData(Char* pDst)
protected void ValidateContentChars(string chars, string propertyName, bool allowOnlyWhitespace)
protected void CheckAsyncCall()
internal Task WriteXmlDeclarationAsync(XmlStandalone standalone)
internal Task WriteXmlDeclarationAsync(string xmldecl)
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
public Task WriteStartElementAsync(string prefix, string localName, string ns)
private void WriteStartElementAsync_SetAttEndPos()
internal Task WriteEndElementAsync(string prefix, string localName, string ns)
internal Task WriteFullEndElementAsync(string prefix, string localName, string ns)
protected internal Task WriteStartAttributeAsync(string prefix, string localName, string ns)
private void WriteStartAttribute_SetInAttribute()
protected internal Task WriteEndAttributeAsync()
internal Task WriteNamespaceDeclarationAsync(string prefix, string namespaceName)
internal Task WriteStartNamespaceDeclarationAsync(string prefix)
internal Task WriteEndNamespaceDeclarationAsync()
public Task WriteCDataAsync(string text)
public Task WriteCommentAsync(string text)
public Task WriteProcessingInstructionAsync(string name, string text)
public Task WriteEntityRefAsync(string name)
public Task WriteCharEntityAsync(char ch)
public Task WriteWhitespaceAsync(string ws)
public Task WriteStringAsync(string text)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(string data)
public Task FlushAsync()
protected Task FlushBufferAsync()
private Task EncodeCharsAsync(int startOffset, int endOffset, bool writeAllToStream)
private Task FlushEncoderAsync()
protected int WriteAttributeTextBlockNoFlush(Char* pSrc, Char* pSrcEnd)
protected int WriteAttributeTextBlockNoFlush(Char[] chars, int index, int count)
protected int WriteAttributeTextBlockNoFlush(string text, int index, int count)
protected Task WriteAttributeTextBlockAsync(Char[] chars, int index, int count)
protected Task WriteAttributeTextBlockAsync(string text)
private Task _WriteAttributeTextBlockAsync(string text, int curIndex, int leftCount)
protected int WriteElementTextBlockNoFlush(Char* pSrc, Char* pSrcEnd, Boolean& needWriteNewLine)
protected int WriteElementTextBlockNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine)
protected int WriteElementTextBlockNoFlush(string text, int index, int count, Boolean& needWriteNewLine)
protected Task WriteElementTextBlockAsync(Char[] chars, int index, int count)
protected Task WriteElementTextBlockAsync(string text)
private Task _WriteElementTextBlockAsync(bool newLine, string text, int curIndex, int leftCount)
protected int RawTextNoFlush(Char* pSrcBegin, Char* pSrcEnd)
protected int RawTextNoFlush(string text, int index, int count)
protected Task RawTextAsync(string text)
private Task _RawTextAsync(string text, int curIndex, int leftCount)
protected int WriteRawWithCharCheckingNoFlush(Char* pSrcBegin, Char* pSrcEnd, Boolean& needWriteNewLine)
protected int WriteRawWithCharCheckingNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine)
protected int WriteRawWithCharCheckingNoFlush(string text, int index, int count, Boolean& needWriteNewLine)
protected Task WriteRawWithCharCheckingAsync(Char[] chars, int index, int count)
protected Task WriteRawWithCharCheckingAsync(string text)
protected int WriteCommentOrPiNoFlush(string text, int index, int count, int stopChar, Boolean& needWriteNewLine)
protected Task WriteCommentOrPiAsync(string text, int stopChar)
protected int WriteCDataSectionNoFlush(string text, int index, int count, Boolean& needWriteNewLine)
protected Task WriteCDataSectionAsync(string text)
}
internal System.Xml.XmlEncodedRawTextWriterIndent : XmlEncodedRawTextWriter {
protected int indentLevel
protected bool newLineOnAttributes
protected string indentChars
protected bool mixedContent
private BitStack mixedContentStack
protected ConformanceLevel conformanceLevel
public XmlWriterSettings Settings
public void .ctor(TextWriter writer, XmlWriterSettings settings)
public void .ctor(Stream stream, XmlWriterSettings settings)
public XmlWriterSettings get_Settings()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void StartElementContent()
internal void OnRootElement(ConformanceLevel currentConformanceLevel)
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string target, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteBase64(Byte[] buffer, int index, int count)
private void Init(XmlWriterSettings settings)
private void WriteIndent()
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
public Task WriteStartElementAsync(string prefix, string localName, string ns)
internal Task WriteEndElementAsync(string prefix, string localName, string ns)
internal Task WriteFullEndElementAsync(string prefix, string localName, string ns)
protected internal Task WriteStartAttributeAsync(string prefix, string localName, string ns)
public Task WriteCDataAsync(string text)
public Task WriteCommentAsync(string text)
public Task WriteProcessingInstructionAsync(string target, string text)
public Task WriteEntityRefAsync(string name)
public Task WriteCharEntityAsync(char ch)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteWhitespaceAsync(string ws)
public Task WriteStringAsync(string text)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(string data)
public Task WriteBase64Async(Byte[] buffer, int index, int count)
private Task WriteIndentAsync()
private Task <>n__0(string name, string pubid, string sysid, string subset)
private Task <>n__1(string prefix, string localName, string ns)
private Task <>n__2(string prefix, string localName, string ns)
private Task <>n__3(string prefix, string localName, string ns)
private Task <>n__4(string prefix, string localName, string ns)
private Task <>n__5(string text)
private Task <>n__6(string name, string text)
}
public System.Xml.XmlEntity : XmlNode {
private string publicId
private string systemId
private string notationName
private string name
private string unparsedReplacementStr
private string baseURI
private XmlLinkedNode lastChild
private bool childrenFoliating
public bool IsReadOnly
public string Name
public string LocalName
public string InnerText
internal bool IsContainer
internal XmlLinkedNode LastNode
public XmlNodeType NodeType
public string PublicId
public string SystemId
public string NotationName
public string OuterXml
public string InnerXml
public string BaseURI
internal void .ctor(string name, string strdata, string publicId, string systemId, string notationName, XmlDocument doc)
public XmlNode CloneNode(bool deep)
public bool get_IsReadOnly()
public string get_Name()
public string get_LocalName()
public string get_InnerText()
public void set_InnerText(string value)
internal bool get_IsContainer()
internal XmlLinkedNode get_LastNode()
internal void set_LastNode(XmlLinkedNode value)
internal bool IsValidChildType(XmlNodeType type)
public XmlNodeType get_NodeType()
public string get_PublicId()
public string get_SystemId()
public string get_NotationName()
public string get_OuterXml()
public string get_InnerXml()
public void set_InnerXml(string value)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
public string get_BaseURI()
internal void SetBaseURI(string inBaseURI)
}
public System.Xml.XmlEntityReference : XmlLinkedNode {
private string name
private XmlLinkedNode lastChild
public string Name
public string LocalName
public string Value
public XmlNodeType NodeType
public bool IsReadOnly
internal bool IsContainer
internal XmlLinkedNode LastNode
public string BaseURI
internal string ChildBaseURI
protected internal void .ctor(string name, XmlDocument doc)
public string get_Name()
public string get_LocalName()
public string get_Value()
public void set_Value(string value)
public XmlNodeType get_NodeType()
public XmlNode CloneNode(bool deep)
public bool get_IsReadOnly()
internal bool get_IsContainer()
internal void SetParent(XmlNode node)
internal void SetParentForLoad(XmlNode node)
internal XmlLinkedNode get_LastNode()
internal void set_LastNode(XmlLinkedNode value)
internal bool IsValidChildType(XmlNodeType type)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
public string get_BaseURI()
private string ConstructBaseURI(string baseURI, string systemId)
internal string get_ChildBaseURI()
}
internal System.Xml.XmlEventCache : XmlRawWriter {
private List`1<XmlEvent[]> pages
private XmlEvent[] pageCurr
private int pageSize
private bool hasRootNode
private StringConcat singleText
private string baseUri
private int InitialPageSize
public string BaseUri
public bool HasRootNode
public XmlWriterSettings Settings
public void .ctor(string baseUri, bool hasRootNode)
public void EndEvents()
public string get_BaseUri()
public bool get_HasRootNode()
public void EventsToWriter(XmlWriter writer)
public string EventsToString()
public XmlWriterSettings get_Settings()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void Close()
public void Flush()
public void WriteValue(object value)
public void WriteValue(string value)
protected void Dispose(bool disposing)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
internal void StartElementContent()
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
internal void WriteNamespaceDeclaration(string prefix, string ns)
internal void WriteEndBase64()
private void AddEvent(XmlEventType eventType)
private void AddEvent(XmlEventType eventType, string s1)
private void AddEvent(XmlEventType eventType, string s1, string s2)
private void AddEvent(XmlEventType eventType, string s1, string s2, string s3)
private void AddEvent(XmlEventType eventType, string s1, string s2, string s3, object o)
private void AddEvent(XmlEventType eventType, object o)
private int NewEvent()
private Byte[] ToBytes(Byte[] buffer, int index, int count)
}
public System.Xml.XmlException : SystemException {
private string res
private String[] args
private int lineNumber
private int linePosition
private string sourceUri
private string message
public int LineNumber
public int LinePosition
public string SourceUri
public string Message
internal string ResString
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, Exception innerException, int lineNumber, int linePosition)
internal void .ctor(string message, Exception innerException, int lineNumber, int linePosition, string sourceUri)
internal void .ctor(string res, String[] args)
internal void .ctor(string res, String[] args, string sourceUri)
internal void .ctor(string res, string arg)
internal void .ctor(string res, string arg, string sourceUri)
internal void .ctor(string res, string arg, IXmlLineInfo lineInfo)
internal void .ctor(string res, string arg, Exception innerException, IXmlLineInfo lineInfo)
internal void .ctor(string res, string arg, IXmlLineInfo lineInfo, string sourceUri)
internal void .ctor(string res, String[] args, IXmlLineInfo lineInfo)
internal void .ctor(string res, String[] args, IXmlLineInfo lineInfo, string sourceUri)
internal void .ctor(string res, int lineNumber, int linePosition)
internal void .ctor(string res, string arg, int lineNumber, int linePosition)
internal void .ctor(string res, string arg, int lineNumber, int linePosition, string sourceUri)
internal void .ctor(string res, String[] args, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args, int lineNumber, int linePosition, string sourceUri)
internal void .ctor(string res, String[] args, Exception innerException, int lineNumber, int linePosition)
internal void .ctor(string res, String[] args, Exception innerException, int lineNumber, int linePosition, string sourceUri)
private string FormatUserMessage(string message, int lineNumber, int linePosition)
private string CreateMessage(string res, String[] args, int lineNumber, int linePosition)
internal String[] BuildCharExceptionArgs(string data, int invCharIndex)
internal String[] BuildCharExceptionArgs(Char[] data, int invCharIndex)
internal String[] BuildCharExceptionArgs(Char[] data, int length, int invCharIndex)
internal String[] BuildCharExceptionArgs(char invChar, char nextChar)
public int get_LineNumber()
public int get_LinePosition()
public string get_SourceUri()
public string get_Message()
internal string get_ResString()
internal bool IsCatchableException(Exception e)
}
public System.Xml.XmlImplementation : object {
private XmlNameTable nameTable
internal XmlNameTable NameTable
public void .ctor(XmlNameTable nt)
public bool HasFeature(string strFeature, string strVersion)
public XmlDocument CreateDocument()
internal XmlNameTable get_NameTable()
}
public System.Xml.XmlLinkedNode : XmlNode {
internal XmlLinkedNode next
public XmlNode PreviousSibling
public XmlNode NextSibling
internal void .ctor(XmlDocument doc)
public XmlNode get_PreviousSibling()
public XmlNode get_NextSibling()
}
internal System.Xml.XmlLoader : object {
private XmlDocument doc
private XmlReader reader
private bool preserveWhitespace
internal void Load(XmlDocument doc, XmlReader reader, bool preserveWhitespace)
private void LoadDocSequence(XmlDocument parentDoc)
internal XmlNode ReadCurrentNode(XmlDocument doc, XmlReader reader)
private XmlNode LoadNode(bool skipOverWhitespace)
private XmlAttribute LoadAttributeNode()
private XmlAttribute LoadDefaultAttribute()
private void LoadAttributeValue(XmlNode parent, bool direct)
private XmlEntityReference LoadEntityReferenceNode(bool direct)
private XmlDeclaration LoadDeclarationNode()
private XmlDocumentType LoadDocumentTypeNode()
private XmlNode LoadNodeDirect()
private XmlAttribute LoadAttributeNodeDirect()
internal void ParseDocumentType(XmlDocumentType dtNode)
private void ParseDocumentType(XmlDocumentType dtNode, bool bUseResolver, XmlResolver resolver)
private void LoadDocumentType(IDtdInfo dtdInfo, XmlDocumentType dtNode)
private XmlParserContext GetContext(XmlNode node)
internal XmlNamespaceManager ParsePartialContent(XmlNode parentNode, string innerxmltext, XmlNodeType nt)
internal void LoadInnerXmlElement(XmlElement node, string innerxmltext)
internal void LoadInnerXmlAttribute(XmlAttribute node, string innerxmltext)
private void RemoveDuplicateNamespace(XmlElement elem, XmlNamespaceManager mgr, bool fCheckElemAttrs)
private string EntitizeName(string name)
internal void ExpandEntity(XmlEntity ent)
internal void ExpandEntityReference(XmlEntityReference eref)
private XmlReader CreateInnerXmlReader(string xmlFragment, XmlNodeType nt, XmlParserContext context, XmlDocument doc)
internal void ParseXmlDeclarationValue(string strValue, String& version, String& encoding, String& standalone)
internal Exception UnexpectedNodeType(XmlNodeType nodetype)
}
internal System.Xml.XmlName : object {
private string prefix
private string localName
private string ns
private string name
private int hashCode
internal XmlDocument ownerDoc
internal XmlName next
public string LocalName
public string NamespaceURI
public string Prefix
public int HashCode
public XmlDocument OwnerDocument
public string Name
public XmlSchemaValidity Validity
public bool IsDefault
public bool IsNil
public XmlSchemaSimpleType MemberType
public XmlSchemaType SchemaType
public XmlSchemaElement SchemaElement
public XmlSchemaAttribute SchemaAttribute
public XmlName Create(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next, IXmlSchemaInfo schemaInfo)
internal void .ctor(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next)
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public int get_HashCode()
public XmlDocument get_OwnerDocument()
public string get_Name()
public XmlSchemaValidity get_Validity()
public bool get_IsDefault()
public bool get_IsNil()
public XmlSchemaSimpleType get_MemberType()
public XmlSchemaType get_SchemaType()
public XmlSchemaElement get_SchemaElement()
public XmlSchemaAttribute get_SchemaAttribute()
public bool Equals(IXmlSchemaInfo schemaInfo)
public int GetHashCode(string name)
}
public System.Xml.XmlNamedNodeMap : object {
internal XmlNode parent
internal SmallXmlNodeList nodes
public int Count
internal void .ctor(XmlNode parent)
public XmlNode GetNamedItem(string name)
public XmlNode SetNamedItem(XmlNode node)
public XmlNode RemoveNamedItem(string name)
public int get_Count()
public XmlNode Item(int index)
public XmlNode GetNamedItem(string localName, string namespaceURI)
public XmlNode RemoveNamedItem(string localName, string namespaceURI)
public IEnumerator GetEnumerator()
internal int FindNodeOffset(string name)
internal int FindNodeOffset(string localName, string namespaceURI)
internal XmlNode AddNode(XmlNode node)
internal XmlNode AddNodeForLoad(XmlNode node, XmlDocument doc)
internal XmlNode RemoveNodeAt(int i)
internal XmlNode ReplaceNodeAt(int i, XmlNode node)
internal XmlNode InsertNodeAt(int i, XmlNode node)
}
internal System.Xml.XmlNameEx : XmlName {
private byte flags
private XmlSchemaSimpleType memberType
private XmlSchemaType schemaType
private object decl
private byte ValidityMask
private byte IsDefaultBit
private byte IsNilBit
public XmlSchemaValidity Validity
public bool IsDefault
public bool IsNil
public XmlSchemaSimpleType MemberType
public XmlSchemaType SchemaType
public XmlSchemaElement SchemaElement
public XmlSchemaAttribute SchemaAttribute
internal void .ctor(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next, IXmlSchemaInfo schemaInfo)
public XmlSchemaValidity get_Validity()
public bool get_IsDefault()
public bool get_IsNil()
public XmlSchemaSimpleType get_MemberType()
public XmlSchemaType get_SchemaType()
public XmlSchemaElement get_SchemaElement()
public XmlSchemaAttribute get_SchemaAttribute()
public void SetValidity(XmlSchemaValidity value)
public void SetIsDefault(bool value)
public void SetIsNil(bool value)
public bool Equals(IXmlSchemaInfo schemaInfo)
}
public System.Xml.XmlNamespaceManager : object {
private IXmlNamespaceResolver modreq(System.Runtime.CompilerServices.IsVolatile) s_EmptyResolver
private NamespaceDeclaration[] nsdecls
private int lastDecl
private XmlNameTable nameTable
private int scopeId
private Dictionary`2<string, int> hashTable
private bool useHashtable
private string xml
private string xmlNs
private int MinDeclsCountForHashtable
internal IXmlNamespaceResolver EmptyResolver
public XmlNameTable NameTable
public string DefaultNamespace
internal IXmlNamespaceResolver get_EmptyResolver()
public void .ctor(XmlNameTable nameTable)
public XmlNameTable get_NameTable()
public string get_DefaultNamespace()
public void PushScope()
public bool PopScope()
public void AddNamespace(string prefix, string uri)
public void RemoveNamespace(string prefix, string uri)
public IEnumerator GetEnumerator()
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupNamespace(string prefix)
private int LookupNamespaceDecl(string prefix)
public string LookupPrefix(string uri)
public bool HasNamespace(string prefix)
internal bool GetNamespaceDeclaration(int idx, String& prefix, String& uri)
}
public System.Xml.XmlNamespaceScope : Enum {
public int value__
public XmlNamespaceScope All
public XmlNamespaceScope ExcludeXml
public XmlNamespaceScope Local
}
public System.Xml.XmlNameTable : object {
public string Get(Char[] array, int offset, int length)
public string Get(string array)
public string Add(Char[] array, int offset, int length)
public string Add(string array)
}
public System.Xml.XmlNode : object {
internal XmlNode parentNode
public string Name
public string Value
public XmlNodeType NodeType
public XmlNode ParentNode
public XmlNodeList ChildNodes
public XmlNode PreviousSibling
public XmlNode NextSibling
public XmlAttributeCollection Attributes
public XmlDocument OwnerDocument
public XmlNode FirstChild
public XmlNode LastChild
internal bool IsContainer
internal XmlLinkedNode LastNode
public bool HasChildNodes
public string NamespaceURI
public string Prefix
public string LocalName
public bool IsReadOnly
public string InnerText
public string OuterXml
public string InnerXml
public IXmlSchemaInfo SchemaInfo
public string BaseURI
internal XmlDocument Document
public XmlElement Item
public XmlElement Item
internal XmlSpace XmlSpace
internal string XmlLang
internal XPathNodeType XPNodeType
internal string XPLocalName
internal bool IsText
public XmlNode PreviousText
private object debuggerDisplayProxy
internal void .ctor(XmlDocument doc)
public XPathNavigator CreateNavigator()
public XmlNode SelectSingleNode(string xpath)
public XmlNode SelectSingleNode(string xpath, XmlNamespaceManager nsmgr)
public XmlNodeList SelectNodes(string xpath)
public XmlNodeList SelectNodes(string xpath, XmlNamespaceManager nsmgr)
public string get_Name()
public string get_Value()
public void set_Value(string value)
public XmlNodeType get_NodeType()
public XmlNode get_ParentNode()
public XmlNodeList get_ChildNodes()
public XmlNode get_PreviousSibling()
public XmlNode get_NextSibling()
public XmlAttributeCollection get_Attributes()
public XmlDocument get_OwnerDocument()
public XmlNode get_FirstChild()
public XmlNode get_LastChild()
internal bool get_IsContainer()
internal XmlLinkedNode get_LastNode()
internal void set_LastNode(XmlLinkedNode value)
internal bool AncestorNode(XmlNode node)
internal bool IsConnected()
public XmlNode InsertBefore(XmlNode newChild, XmlNode refChild)
public XmlNode InsertAfter(XmlNode newChild, XmlNode refChild)
public XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild)
public XmlNode RemoveChild(XmlNode oldChild)
public XmlNode PrependChild(XmlNode newChild)
public XmlNode AppendChild(XmlNode newChild)
internal XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc)
internal bool IsValidChildType(XmlNodeType type)
internal bool CanInsertBefore(XmlNode newChild, XmlNode refChild)
internal bool CanInsertAfter(XmlNode newChild, XmlNode refChild)
public bool get_HasChildNodes()
public XmlNode CloneNode(bool deep)
internal void CopyChildren(XmlDocument doc, XmlNode container, bool deep)
public void Normalize()
private XmlNode NormalizeWinner(XmlNode firstNode, XmlNode secondNode)
public bool Supports(string feature, string version)
public string get_NamespaceURI()
public string get_Prefix()
public void set_Prefix(string value)
public string get_LocalName()
public bool get_IsReadOnly()
internal bool HasReadOnlyParent(XmlNode n)
public XmlNode Clone()
private object System.ICloneable.Clone()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public IEnumerator GetEnumerator()
private void AppendChildText(StringBuilder builder)
public string get_InnerText()
public void set_InnerText(string value)
public string get_OuterXml()
public string get_InnerXml()
public void set_InnerXml(string value)
public IXmlSchemaInfo get_SchemaInfo()
public string get_BaseURI()
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
public void RemoveAll()
internal XmlDocument get_Document()
public string GetNamespaceOfPrefix(string prefix)
internal string GetNamespaceOfPrefixStrict(string prefix)
public string GetPrefixOfNamespace(string namespaceURI)
internal string GetPrefixOfNamespaceStrict(string namespaceURI)
public XmlElement get_Item(string name)
public XmlElement get_Item(string localname, string ns)
internal void SetParent(XmlNode node)
internal void SetParentForLoad(XmlNode node)
internal void SplitName(string name, String& prefix, String& localName)
internal XmlNode FindChild(XmlNodeType type)
internal XmlNodeChangedEventArgs GetEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action)
internal void BeforeEvent(XmlNodeChangedEventArgs args)
internal void AfterEvent(XmlNodeChangedEventArgs args)
internal XmlSpace get_XmlSpace()
internal string get_XmlLang()
internal XPathNodeType get_XPNodeType()
internal string get_XPLocalName()
internal string GetXPAttribute(string localName, string namespaceURI)
internal bool get_IsText()
public XmlNode get_PreviousText()
internal void NestTextNodes(XmlNode prevNode, XmlNode nextNode)
internal void UnnestTextNodes(XmlNode prevNode, XmlNode nextNode)
private object get_debuggerDisplayProxy()
}
public System.Xml.XmlNodeChangedAction : Enum {
public int value__
public XmlNodeChangedAction Insert
public XmlNodeChangedAction Remove
public XmlNodeChangedAction Change
}
public System.Xml.XmlNodeChangedEventArgs : EventArgs {
private XmlNodeChangedAction action
private XmlNode node
private XmlNode oldParent
private XmlNode newParent
private string oldValue
private string newValue
public XmlNodeChangedAction Action
public XmlNode Node
public XmlNode OldParent
public XmlNode NewParent
public string OldValue
public string NewValue
public void .ctor(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action)
public XmlNodeChangedAction get_Action()
public XmlNode get_Node()
public XmlNode get_OldParent()
public XmlNode get_NewParent()
public string get_OldValue()
public string get_NewValue()
}
public System.Xml.XmlNodeChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XmlNodeChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, XmlNodeChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.XmlNodeList : object {
public int Count
public XmlNode ItemOf
public XmlNode Item(int index)
public int get_Count()
public IEnumerator GetEnumerator()
public XmlNode get_ItemOf(int i)
private void System.IDisposable.Dispose()
protected void PrivateDisposeNodeList()
}
internal System.Xml.XmlNodeListEnumerator : object {
private XPathNodeList list
private int index
private bool valid
public object Current
public void .ctor(XPathNodeList list)
public void Reset()
public bool MoveNext()
public object get_Current()
}
public System.Xml.XmlNodeOrder : Enum {
public int value__
public XmlNodeOrder Before
public XmlNodeOrder After
public XmlNodeOrder Same
public XmlNodeOrder Unknown
}
public System.Xml.XmlNodeReader : XmlReader {
private XmlNodeReaderNavigator readerNav
private XmlNodeType nodeType
private int curDepth
private ReadState readState
private bool fEOF
private bool bResolveEntity
private bool bStartFromDocument
private bool bInReadBinary
private ReadContentAsBinaryHelper readBinaryHelper
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool CanResolveEntity
public bool IsEmptyElement
public bool IsDefault
public XmlSpace XmlSpace
public string XmlLang
public IXmlSchemaInfo SchemaInfo
public int AttributeCount
public bool EOF
public ReadState ReadState
public bool HasAttributes
public XmlNameTable NameTable
public bool CanReadBinaryContent
internal IDtdInfo DtdInfo
public void .ctor(XmlNode node)
internal bool IsInReadingStates()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_CanResolveEntity()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public IXmlSchemaInfo get_SchemaInfo()
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string GetAttribute(int attributeIndex)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string namespaceURI)
public void MoveToAttribute(int attributeIndex)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool Read()
private bool Read(bool fSkipChildren)
private bool ReadNextNode(bool fSkipChildren)
private void SetEndOfFile()
private bool ReadAtZeroLevel(bool fSkipChildren)
private bool ReadForward(bool fSkipChildren)
private void ReSetReadingMarks()
public bool get_EOF()
public void Close()
public ReadState get_ReadState()
public void Skip()
public string ReadString()
public bool get_HasAttributes()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public void ResolveEntity()
public bool ReadAttributeValue()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
private void FinishReadBinary()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
internal IDtdInfo get_DtdInfo()
}
internal System.Xml.XmlNodeReaderNavigator : object {
private XmlNode curNode
private XmlNode elemNode
private XmlNode logNode
private int attrIndex
private int logAttrIndex
private XmlNameTable nameTable
private XmlDocument doc
private int nAttrInd
private string strPublicID
private string strSystemID
private string strVersion
private string strStandalone
private string strEncoding
private int nDeclarationAttrCount
private int nDocTypeAttrCount
private int nLogLevel
private int nLogAttrInd
private bool bLogOnAttrVal
private bool bCreatedOnAttribute
internal VirtualAttribute[] decNodeAttributes
internal VirtualAttribute[] docTypeNodeAttributes
private bool bOnAttrVal
public XmlNodeType NodeType
public string NamespaceURI
public string Name
public string LocalName
internal bool IsOnAttrVal
internal XmlNode OwnerElementNode
internal bool CreatedOnAttribute
public string Prefix
public bool HasValue
public string Value
public string BaseURI
public XmlSpace XmlSpace
public string XmlLang
public bool IsEmptyElement
public bool IsDefault
public IXmlSchemaInfo SchemaInfo
public XmlNameTable NameTable
public int AttributeCount
private bool IsOnDeclOrDocType
public XmlDocument Document
public void .ctor(XmlNode node)
public XmlNodeType get_NodeType()
public string get_NamespaceURI()
public string get_Name()
public string get_LocalName()
internal bool get_IsOnAttrVal()
internal XmlNode get_OwnerElementNode()
internal bool get_CreatedOnAttribute()
private bool IsLocalNameEmpty(XmlNodeType nt)
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public string get_BaseURI()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public IXmlSchemaInfo get_SchemaInfo()
public XmlNameTable get_NameTable()
public int get_AttributeCount()
private void CheckIndexCondition(int attributeIndex)
private void InitDecAttr()
public string GetDeclarationAttr(XmlDeclaration decl, string name)
public string GetDeclarationAttr(int i)
public int GetDecAttrInd(string name)
private void InitDocTypeAttr()
public string GetDocumentTypeAttr(XmlDocumentType docType, string name)
public string GetDocumentTypeAttr(int i)
public int GetDocTypeAttrInd(string name)
private string GetAttributeFromElement(XmlElement elem, string name)
public string GetAttribute(string name)
private string GetAttributeFromElement(XmlElement elem, string name, string ns)
public string GetAttribute(string name, string ns)
public string GetAttribute(int attributeIndex)
public void LogMove(int level)
public void RollBackMove(Int32& level)
private bool get_IsOnDeclOrDocType()
public void ResetToAttribute(Int32& level)
public void ResetMove(Int32& level, XmlNodeType& nt)
public bool MoveToAttribute(string name)
private bool MoveToAttributeFromElement(XmlElement elem, string name, string ns)
public bool MoveToAttribute(string name, string namespaceURI)
public void MoveToAttribute(int attributeIndex)
public bool MoveToNextAttribute(Int32& level)
public bool MoveToParent()
public bool MoveToFirstChild()
private bool MoveToNextSibling(XmlNode node)
public bool MoveToNext()
public bool MoveToElement()
public string LookupNamespace(string prefix)
internal string DefaultLookupNamespace(string prefix)
internal string LookupPrefix(string namespaceName)
internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public bool ReadAttributeValue(Int32& level, Boolean& bResolveEntity, XmlNodeType& nt)
public XmlDocument get_Document()
}
public System.Xml.XmlNodeType : Enum {
public int value__
public XmlNodeType None
public XmlNodeType Element
public XmlNodeType Attribute
public XmlNodeType Text
public XmlNodeType CDATA
public XmlNodeType EntityReference
public XmlNodeType Entity
public XmlNodeType ProcessingInstruction
public XmlNodeType Comment
public XmlNodeType Document
public XmlNodeType DocumentType
public XmlNodeType DocumentFragment
public XmlNodeType Notation
public XmlNodeType Whitespace
public XmlNodeType SignificantWhitespace
public XmlNodeType EndElement
public XmlNodeType EndEntity
public XmlNodeType XmlDeclaration
}
public System.Xml.XmlNotation : XmlNode {
private string publicId
private string systemId
private string name
public string Name
public string LocalName
public XmlNodeType NodeType
public bool IsReadOnly
public string PublicId
public string SystemId
public string OuterXml
public string InnerXml
internal void .ctor(string name, string publicId, string systemId, XmlDocument doc)
public string get_Name()
public string get_LocalName()
public XmlNodeType get_NodeType()
public XmlNode CloneNode(bool deep)
public bool get_IsReadOnly()
public string get_PublicId()
public string get_SystemId()
public string get_OuterXml()
public string get_InnerXml()
public void set_InnerXml(string value)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
}
internal System.Xml.XmlNullResolver : XmlResolver {
public XmlNullResolver Singleton
public ICredentials Credentials
public object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn)
public void set_Credentials(ICredentials value)
}
public System.Xml.XmlOutputMethod : Enum {
public int value__
public XmlOutputMethod Xml
public XmlOutputMethod Html
public XmlOutputMethod Text
public XmlOutputMethod AutoDetect
}
public System.Xml.XmlParserContext : object {
private XmlNameTable _nt
private XmlNamespaceManager _nsMgr
private string _docTypeName
private string _pubId
private string _sysId
private string _internalSubset
private string _xmlLang
private XmlSpace _xmlSpace
private string _baseURI
private Encoding _encoding
public XmlNameTable NameTable
public XmlNamespaceManager NamespaceManager
public string DocTypeName
public string PublicId
public string SystemId
public string BaseURI
public string InternalSubset
public string XmlLang
public XmlSpace XmlSpace
public Encoding Encoding
internal bool HasDtdInfo
public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace)
public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace, Encoding enc)
public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace)
public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc)
public XmlNameTable get_NameTable()
public void set_NameTable(XmlNameTable value)
public XmlNamespaceManager get_NamespaceManager()
public void set_NamespaceManager(XmlNamespaceManager value)
public string get_DocTypeName()
public void set_DocTypeName(string value)
public string get_PublicId()
public void set_PublicId(string value)
public string get_SystemId()
public void set_SystemId(string value)
public string get_BaseURI()
public void set_BaseURI(string value)
public string get_InternalSubset()
public void set_InternalSubset(string value)
public string get_XmlLang()
public void set_XmlLang(string value)
public XmlSpace get_XmlSpace()
public void set_XmlSpace(XmlSpace value)
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
internal bool get_HasDtdInfo()
}
public System.Xml.XmlProcessingInstruction : XmlLinkedNode {
private string target
private string data
public string Name
public string LocalName
public string Value
public string Target
public string Data
public string InnerText
public XmlNodeType NodeType
internal string XPLocalName
internal XPathNodeType XPNodeType
protected internal void .ctor(string target, string data, XmlDocument doc)
public string get_Name()
public string get_LocalName()
public string get_Value()
public void set_Value(string value)
public string get_Target()
public string get_Data()
public void set_Data(string value)
public string get_InnerText()
public void set_InnerText(string value)
public XmlNodeType get_NodeType()
public XmlNode CloneNode(bool deep)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
internal string get_XPLocalName()
internal XPathNodeType get_XPNodeType()
}
public System.Xml.XmlQualifiedName : object {
private HashCodeOfStringDelegate hashCodeDelegate
private string name
private string ns
private int hash
public XmlQualifiedName Empty
public string Namespace
public string Name
public bool IsEmpty
public void .ctor(string name)
public void .ctor(string name, string ns)
public string get_Namespace()
public string get_Name()
public int GetHashCode()
public bool get_IsEmpty()
public string ToString()
public bool Equals(object other)
public bool op_Equality(XmlQualifiedName a, XmlQualifiedName b)
public bool op_Inequality(XmlQualifiedName a, XmlQualifiedName b)
public string ToString(string name, string ns)
private HashCodeOfStringDelegate GetHashCodeDelegate()
private bool IsRandomizedHashingDisabled()
private int GetHashCodeOfString(string s, int length, long additionalEntropy)
internal void Init(string name, string ns)
internal void SetNamespace(string ns)
internal void Verify()
internal void Atomize(XmlNameTable nameTable)
internal XmlQualifiedName Parse(string s, IXmlNamespaceResolver nsmgr, String& prefix)
internal XmlQualifiedName Clone()
internal int Compare(XmlQualifiedName a, XmlQualifiedName b)
}
internal System.Xml.XmlRawWriter : XmlWriter {
protected XmlRawWriterBase64Encoder base64Encoder
protected IXmlNamespaceResolver resolver
public WriteState WriteState
public XmlSpace XmlSpace
public string XmlLang
internal IXmlNamespaceResolver NamespaceResolver
internal bool SupportsNamespaceDeclarationInChunks
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteBase64(Byte[] buffer, int index, int count)
public string LookupPrefix(string ns)
public WriteState get_WriteState()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public void WriteNmToken(string name)
public void WriteName(string name)
public void WriteQualifiedName(string localName, string ns)
public void WriteCData(string text)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteValue(object value)
public void WriteValue(string value)
public void WriteValue(DateTimeOffset value)
public void WriteAttributes(XmlReader reader, bool defattr)
public void WriteNode(XmlReader reader, bool defattr)
public void WriteNode(XPathNavigator navigator, bool defattr)
internal IXmlNamespaceResolver get_NamespaceResolver()
internal void set_NamespaceResolver(IXmlNamespaceResolver value)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
internal void StartElementContent()
internal void OnRootElement(ConformanceLevel conformanceLevel)
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
internal void WriteQualifiedName(string prefix, string localName, string ns)
internal void WriteNamespaceDeclaration(string prefix, string ns)
internal bool get_SupportsNamespaceDeclarationInChunks()
internal void WriteStartNamespaceDeclaration(string prefix)
internal void WriteEndNamespaceDeclaration()
internal void WriteEndBase64()
internal void Close(WriteState currentState)
public Task WriteStartDocumentAsync()
public Task WriteStartDocumentAsync(bool standalone)
public Task WriteEndDocumentAsync()
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
public Task WriteEndElementAsync()
public Task WriteFullEndElementAsync()
public Task WriteBase64Async(Byte[] buffer, int index, int count)
public Task WriteNmTokenAsync(string name)
public Task WriteNameAsync(string name)
public Task WriteQualifiedNameAsync(string localName, string ns)
public Task WriteCDataAsync(string text)
public Task WriteCharEntityAsync(char ch)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteWhitespaceAsync(string ws)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(string data)
public Task WriteAttributesAsync(XmlReader reader, bool defattr)
public Task WriteNodeAsync(XmlReader reader, bool defattr)
public Task WriteNodeAsync(XPathNavigator navigator, bool defattr)
internal Task WriteXmlDeclarationAsync(XmlStandalone standalone)
internal Task WriteXmlDeclarationAsync(string xmldecl)
internal Task StartElementContentAsync()
internal Task WriteEndElementAsync(string prefix, string localName, string ns)
internal Task WriteFullEndElementAsync(string prefix, string localName, string ns)
internal Task WriteQualifiedNameAsync(string prefix, string localName, string ns)
internal Task WriteNamespaceDeclarationAsync(string prefix, string ns)
internal Task WriteStartNamespaceDeclarationAsync(string prefix)
internal Task WriteEndNamespaceDeclarationAsync()
internal Task WriteEndBase64Async()
}
internal System.Xml.XmlRawWriterBase64Encoder : Base64Encoder {
private XmlRawWriter rawWriter
internal void .ctor(XmlRawWriter rawWriter)
internal void WriteChars(Char[] chars, int index, int count)
internal Task WriteCharsAsync(Char[] chars, int index, int count)
}
public System.Xml.XmlReader : object {
private UInt32 IsTextualNodeBitmap
private UInt32 CanReadContentAsBitmap
private UInt32 HasValueBitmap
internal int DefaultBufferSize
internal int BiggerBufferSize
internal int MaxStreamLengthForDefaultBufferSize
internal int AsyncBufferSize
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public IXmlSchemaInfo SchemaInfo
public Type ValueType
public int AttributeCount
public string Item
public string Item
public string Item
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public bool CanResolveEntity
public bool CanReadBinaryContent
public bool CanReadValueChunk
public bool HasAttributes
internal XmlNamespaceManager NamespaceManager
internal bool IsDefaultInternal
internal IDtdInfo DtdInfo
private object debuggerDisplayProxy
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public IXmlSchemaInfo get_SchemaInfo()
public Type get_ValueType()
public object ReadContentAsObject()
public bool ReadContentAsBoolean()
public DateTime ReadContentAsDateTime()
public DateTimeOffset ReadContentAsDateTimeOffset()
public double ReadContentAsDouble()
public float ReadContentAsFloat()
public decimal ReadContentAsDecimal()
public int ReadContentAsInt()
public long ReadContentAsLong()
public string ReadContentAsString()
public object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public object ReadElementContentAsObject()
public object ReadElementContentAsObject(string localName, string namespaceURI)
public bool ReadElementContentAsBoolean()
public bool ReadElementContentAsBoolean(string localName, string namespaceURI)
public DateTime ReadElementContentAsDateTime()
public DateTime ReadElementContentAsDateTime(string localName, string namespaceURI)
public double ReadElementContentAsDouble()
public double ReadElementContentAsDouble(string localName, string namespaceURI)
public float ReadElementContentAsFloat()
public float ReadElementContentAsFloat(string localName, string namespaceURI)
public decimal ReadElementContentAsDecimal()
public decimal ReadElementContentAsDecimal(string localName, string namespaceURI)
public int ReadElementContentAsInt()
public int ReadElementContentAsInt(string localName, string namespaceURI)
public long ReadElementContentAsLong()
public long ReadElementContentAsLong(string localName, string namespaceURI)
public string ReadElementContentAsString()
public string ReadElementContentAsString(string localName, string namespaceURI)
public object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI)
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string GetAttribute(int i)
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string namespaceURI)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool ReadAttributeValue()
public bool Read()
public bool get_EOF()
public void Close()
public ReadState get_ReadState()
public void Skip()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public bool get_CanResolveEntity()
public void ResolveEntity()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public bool get_CanReadValueChunk()
public int ReadValueChunk(Char[] buffer, int index, int count)
public string ReadString()
public XmlNodeType MoveToContent()
public void ReadStartElement()
public void ReadStartElement(string name)
public void ReadStartElement(string localname, string ns)
public string ReadElementString()
public string ReadElementString(string name)
public string ReadElementString(string localname, string ns)
public void ReadEndElement()
public bool IsStartElement()
public bool IsStartElement(string name)
public bool IsStartElement(string localname, string ns)
public bool ReadToFollowing(string name)
public bool ReadToFollowing(string localName, string namespaceURI)
public bool ReadToDescendant(string name)
public bool ReadToDescendant(string localName, string namespaceURI)
public bool ReadToNextSibling(string name)
public bool ReadToNextSibling(string localName, string namespaceURI)
public bool IsName(string str)
public bool IsNameToken(string str)
public string ReadInnerXml()
private void WriteNode(XmlWriter xtw, bool defattr)
private void WriteAttributeValue(XmlWriter xtw)
public string ReadOuterXml()
private XmlWriter CreateWriterForInnerOuterXml(StringWriter sw)
private void SetNamespacesFlag(XmlTextWriter xtw)
public XmlReader ReadSubtree()
public bool get_HasAttributes()
public void Dispose()
protected void Dispose(bool disposing)
internal XmlNamespaceManager get_NamespaceManager()
internal bool IsTextualNode(XmlNodeType nodeType)
internal bool CanReadContentAs(XmlNodeType nodeType)
internal bool HasValueInternal(XmlNodeType nodeType)
private bool SkipSubtree()
internal void CheckElement(string localName, string namespaceURI)
internal Exception CreateReadContentAsException(string methodName)
internal Exception CreateReadElementContentAsException(string methodName)
internal bool CanReadContentAs()
internal Exception CreateReadContentAsException(string methodName, XmlNodeType nodeType, IXmlLineInfo lineInfo)
internal Exception CreateReadElementContentAsException(string methodName, XmlNodeType nodeType, IXmlLineInfo lineInfo)
private string AddLineInfo(string message, IXmlLineInfo lineInfo)
internal string InternalReadContentAsString()
private bool SetupReadElementContentAsXxx(string methodName)
private void FinishReadElementContentAsXxx()
internal bool get_IsDefaultInternal()
internal IDtdInfo get_DtdInfo()
internal Encoding GetEncoding(XmlReader reader)
internal ConformanceLevel GetV1ConformanceLevel(XmlReader reader)
private XmlTextReaderImpl GetXmlTextReaderImpl(XmlReader reader)
public XmlReader Create(string inputUri)
public XmlReader Create(string inputUri, XmlReaderSettings settings)
public XmlReader Create(string inputUri, XmlReaderSettings settings, XmlParserContext inputContext)
public XmlReader Create(Stream input)
public XmlReader Create(Stream input, XmlReaderSettings settings)
public XmlReader Create(Stream input, XmlReaderSettings settings, string baseUri)
public XmlReader Create(Stream input, XmlReaderSettings settings, XmlParserContext inputContext)
public XmlReader Create(TextReader input)
public XmlReader Create(TextReader input, XmlReaderSettings settings)
public XmlReader Create(TextReader input, XmlReaderSettings settings, string baseUri)
public XmlReader Create(TextReader input, XmlReaderSettings settings, XmlParserContext inputContext)
public XmlReader Create(XmlReader reader, XmlReaderSettings settings)
internal XmlReader CreateSqlReader(Stream input, XmlReaderSettings settings, XmlParserContext inputContext)
internal int CalcBufferSize(Stream input)
private object get_debuggerDisplayProxy()
public Task`1<string> GetValueAsync()
public Task`1<object> ReadContentAsObjectAsync()
public Task`1<string> ReadContentAsStringAsync()
public Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
public Task`1<object> ReadElementContentAsObjectAsync()
public Task`1<string> ReadElementContentAsStringAsync()
public Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
public Task`1<bool> ReadAsync()
public Task SkipAsync()
public Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count)
public Task`1<XmlNodeType> MoveToContentAsync()
public Task`1<string> ReadInnerXmlAsync()
private Task WriteNodeAsync(XmlWriter xtw, bool defattr)
public Task`1<string> ReadOuterXmlAsync()
private Task`1<bool> SkipSubtreeAsync()
internal Task`1<string> InternalReadContentAsStringAsync()
private Task`1<bool> SetupReadElementContentAsXxxAsync(string methodName)
private Task FinishReadElementContentAsXxxAsync()
}
public System.Xml.XmlReaderSettings : object {
private bool useAsync
private XmlNameTable nameTable
private XmlResolver xmlResolver
private int lineNumberOffset
private int linePositionOffset
private ConformanceLevel conformanceLevel
private bool checkCharacters
private long maxCharactersInDocument
private long maxCharactersFromEntities
private bool ignoreWhitespace
private bool ignorePIs
private bool ignoreComments
private DtdProcessing dtdProcessing
private ValidationType validationType
private XmlSchemaValidationFlags validationFlags
private XmlSchemaSet schemas
private ValidationEventHandler valEventHandler
private bool closeInput
private bool isReadOnly
private bool <IsXmlResolverSet>k__BackingField
private Nullable`1<bool> s_enableLegacyXmlSettings
public bool Async
public XmlNameTable NameTable
internal bool IsXmlResolverSet
public XmlResolver XmlResolver
public int LineNumberOffset
public int LinePositionOffset
public ConformanceLevel ConformanceLevel
public bool CheckCharacters
public long MaxCharactersInDocument
public long MaxCharactersFromEntities
public bool IgnoreWhitespace
public bool IgnoreProcessingInstructions
public bool IgnoreComments
public bool ProhibitDtd
public DtdProcessing DtdProcessing
public bool CloseInput
public ValidationType ValidationType
public XmlSchemaValidationFlags ValidationFlags
public XmlSchemaSet Schemas
internal bool ReadOnly
public void .ctor(XmlResolver resolver)
public bool get_Async()
public void set_Async(bool value)
public XmlNameTable get_NameTable()
public void set_NameTable(XmlNameTable value)
internal bool get_IsXmlResolverSet()
internal void set_IsXmlResolverSet(bool value)
public void set_XmlResolver(XmlResolver value)
internal XmlResolver GetXmlResolver()
internal XmlResolver GetXmlResolver_CheckConfig()
public int get_LineNumberOffset()
public void set_LineNumberOffset(int value)
public int get_LinePositionOffset()
public void set_LinePositionOffset(int value)
public ConformanceLevel get_ConformanceLevel()
public void set_ConformanceLevel(ConformanceLevel value)
public bool get_CheckCharacters()
public void set_CheckCharacters(bool value)
public long get_MaxCharactersInDocument()
public void set_MaxCharactersInDocument(long value)
public long get_MaxCharactersFromEntities()
public void set_MaxCharactersFromEntities(long value)
public bool get_IgnoreWhitespace()
public void set_IgnoreWhitespace(bool value)
public bool get_IgnoreProcessingInstructions()
public void set_IgnoreProcessingInstructions(bool value)
public bool get_IgnoreComments()
public void set_IgnoreComments(bool value)
public bool get_ProhibitDtd()
public void set_ProhibitDtd(bool value)
public DtdProcessing get_DtdProcessing()
public void set_DtdProcessing(DtdProcessing value)
public bool get_CloseInput()
public void set_CloseInput(bool value)
public ValidationType get_ValidationType()
public void set_ValidationType(ValidationType value)
public XmlSchemaValidationFlags get_ValidationFlags()
public void set_ValidationFlags(XmlSchemaValidationFlags value)
public XmlSchemaSet get_Schemas()
public void set_Schemas(XmlSchemaSet value)
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
public void Reset()
public XmlReaderSettings Clone()
internal ValidationEventHandler GetEventHandler()
internal XmlReader CreateReader(string inputUri, XmlParserContext inputContext)
internal XmlReader CreateReader(Stream input, Uri baseUri, string baseUriString, XmlParserContext inputContext)
internal XmlReader CreateReader(TextReader input, string baseUriString, XmlParserContext inputContext)
internal XmlReader CreateReader(XmlReader reader)
internal bool get_ReadOnly()
internal void set_ReadOnly(bool value)
private void CheckReadOnly(string propertyName)
private void Initialize()
private void Initialize(XmlResolver resolver)
private XmlResolver CreateDefaultResolver()
internal XmlReader AddValidation(XmlReader reader)
private XmlReader AddValidationAndConformanceWrapper(XmlReader reader)
private XmlValidatingReaderImpl CreateDtdValidatingReader(XmlReader baseReader)
internal XmlReader AddConformanceWrapper(XmlReader baseReader)
internal bool EnableLegacyXmlSettings()
private bool ReadSettingsFromRegistry(RegistryKey hive, Boolean& value)
}
internal System.Xml.XmlRegisteredNonCachedStream : Stream {
protected Stream stream
private XmlDownloadManager downloadManager
private string host
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
internal void .ctor(Stream stream, XmlDownloadManager downloadManager, string host)
protected void Finalize()
protected void Dispose(bool disposing)
public IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public int EndRead(IAsyncResult asyncResult)
public void EndWrite(IAsyncResult asyncResult)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
public void WriteByte(byte value)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
}
internal System.Xml.XmlReservedNs : object {
internal string NsXml
internal string NsXmlNs
internal string NsDataType
internal string NsDataTypeAlias
internal string NsDataTypeOld
internal string NsMsxsl
internal string NsXdr
internal string NsXslDebug
internal string NsXdrAlias
internal string NsWdXsl
internal string NsXs
internal string NsXsd
internal string NsXsi
internal string NsXslt
internal string NsExsltCommon
internal string NsExsltDates
internal string NsExsltMath
internal string NsExsltRegExps
internal string NsExsltSets
internal string NsExsltStrings
internal string NsXQueryFunc
internal string NsXQueryDataType
internal string NsCollationBase
internal string NsCollCodePoint
internal string NsXsltInternal
}
public System.Xml.XmlResolver : object {
public ICredentials Credentials
public object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn)
public Uri ResolveUri(Uri baseUri, string relativeUri)
public void set_Credentials(ICredentials value)
public bool SupportsType(Uri absoluteUri, Type type)
public Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn)
}
public System.Xml.XmlSecureResolver : XmlResolver {
private XmlResolver resolver
public ICredentials Credentials
public void .ctor(XmlResolver resolver, string securityUrl)
public void .ctor(XmlResolver resolver, Evidence evidence)
public void .ctor(XmlResolver resolver, PermissionSet permissionSet)
public void set_Credentials(ICredentials value)
public object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn)
public Uri ResolveUri(Uri baseUri, string relativeUri)
public Evidence CreateEvidenceForUrl(string securityUrl)
public Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn)
}
public System.Xml.XmlSignificantWhitespace : XmlCharacterData {
public string Name
public string LocalName
public XmlNodeType NodeType
public XmlNode ParentNode
public string Value
internal XPathNodeType XPNodeType
internal bool IsText
public XmlNode PreviousText
protected internal void .ctor(string strData, XmlDocument doc)
public string get_Name()
public string get_LocalName()
public XmlNodeType get_NodeType()
public XmlNode get_ParentNode()
public XmlNode CloneNode(bool deep)
public string get_Value()
public void set_Value(string value)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
internal XPathNodeType get_XPNodeType()
internal bool get_IsText()
public XmlNode get_PreviousText()
}
public System.Xml.XmlSpace : Enum {
public int value__
public XmlSpace None
public XmlSpace Default
public XmlSpace Preserve
}
internal System.Xml.XmlSqlBinaryReader : XmlReader {
internal Type TypeOfObject
internal Type TypeOfString
private Type[] modreq(System.Runtime.CompilerServices.IsVolatile) TokenTypeMap
private Byte[] XsdKatmaiTimeScaleToValueLengthMap
private ReadState[] ScanState2ReadState
private Stream inStrm
private Byte[] data
private int pos
private int mark
private int end
private long offset
private bool eof
private bool sniffed
private bool isEmpty
private int docState
private SymbolTables symbolTables
private XmlNameTable xnt
private bool xntFromSettings
private string xml
private string xmlns
private string nsxmlns
private string baseUri
private ScanState state
private XmlNodeType nodetype
private BinXmlToken token
private int attrIndex
private QName qnameOther
private QName qnameElement
private XmlNodeType parentNodeType
private ElemInfo[] elementStack
private int elemDepth
private AttrInfo[] attributes
private Int32[] attrHashTbl
private int attrCount
private int posAfterAttrs
private bool xmlspacePreserve
private int tokLen
private int tokDataPos
private bool hasTypedValue
private Type valueType
private string stringValue
private Dictionary`2<string, NamespaceDecl> namespaces
private NestedBinXml prevNameInfo
private XmlReader textXmlReader
private bool closeInput
private bool checkCharacters
private bool ignoreWhitespace
private bool ignorePIs
private bool ignoreComments
private DtdProcessing dtdProcessing
private SecureStringHasher hasher
private XmlCharType xmlCharType
private Encoding unicode
private byte version
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public XmlSpace XmlSpace
public string XmlLang
public Type ValueType
public int AttributeCount
public bool EOF
public XmlNameTable NameTable
public ReadState ReadState
public void .ctor(Stream stream, Byte[] data, int len, string baseUri, bool closeInput, XmlReaderSettings settings)
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public Type get_ValueType()
public int get_AttributeCount()
public string GetAttribute(string name, string ns)
public string GetAttribute(string name)
public string GetAttribute(int i)
public bool MoveToAttribute(string name, string ns)
public bool MoveToAttribute(string name)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool get_EOF()
public bool ReadAttributeValue()
public void Close()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public void ResolveEntity()
public ReadState get_ReadState()
public bool Read()
private bool SetupContentAsXXX(string name)
private int FinishContentAsXXX(int origPos)
public bool ReadContentAsBoolean()
public DateTime ReadContentAsDateTime()
public double ReadContentAsDouble()
public float ReadContentAsFloat()
public decimal ReadContentAsDecimal()
public int ReadContentAsInt()
public long ReadContentAsLong()
public object ReadContentAsObject()
public object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
private void VerifyVersion(int requiredVersion, BinXmlToken token)
private void AddInitNamespace(string prefix, string uri)
private void AddName()
private void AddQName()
private void NameFlush()
private void SkipExtn()
private int ReadQNameRef()
private int ReadNameRef()
private bool FillAllowEOF()
private void Fill_(int require)
private void Fill(int require)
private byte ReadByte()
private ushort ReadUShort()
private int ParseMB32()
private int ParseMB32_(byte b)
private int ParseMB32(int pos)
private int ParseMB64()
private BinXmlToken PeekToken()
private BinXmlToken ReadToken()
private BinXmlToken NextToken2(BinXmlToken token)
private BinXmlToken NextToken1()
private BinXmlToken NextToken()
private BinXmlToken PeekNextToken()
private BinXmlToken RescanNextToken()
private string ParseText()
private int ScanText(Int32& start)
private string GetString(int pos, int cch)
private string GetStringAligned(Byte[] data, int offset, int cch)
private string GetAttributeText(int i)
private int LocateAttribute(string name, string ns)
private int LocateAttribute(string name)
private void PositionOnAttribute(int i)
private void GrowElements()
private void GrowAttributes()
private void ClearAttributes()
private void PushNamespace(string prefix, string ns, bool implied)
private void PopNamespaces(NamespaceDecl firstInScopeChain)
private void GenerateImpliedXmlnsAttrs()
private bool ReadInit(bool skipXmlDecl)
private void ScanAttributes()
private void SimpleCheckForDuplicateAttributes()
private void HashCheckForDuplicateAttributes()
private string XmlDeclValue()
private string CDATAValue()
private void FinishCDATA()
private void FinishEndElement()
private bool ReadDoc()
private void ImplReadData(BinXmlToken tokenType)
private void ImplReadElement()
private void ImplReadEndElement()
private void ImplReadDoctype()
private void ImplReadPI()
private void ImplReadComment()
private void ImplReadCDATA()
private void ImplReadNest()
private void ImplReadEndNest()
private void ImplReadXmlText()
private void UpdateFromTextReader()
private bool UpdateFromTextReader(bool needUpdate)
private void CheckAllowContent()
private void GenerateTokenTypeMap()
private Type GetValueType(BinXmlToken token)
private void ReScanOverValue(BinXmlToken token)
private XmlNodeType ScanOverValue(BinXmlToken token, bool attr, bool checkChars)
private XmlNodeType ScanOverAnyValue(BinXmlToken token, bool attr, bool checkChars)
private XmlNodeType CheckText(bool attr)
private XmlNodeType CheckTextIsWS()
private void CheckValueTokenBounds()
private int GetXsdKatmaiTokenLength(BinXmlToken token)
private int XsdKatmaiTimeScaleToValueLength(byte scale)
private long ValueAsLong()
private ulong ValueAsULong()
private decimal ValueAsDecimal()
private double ValueAsDouble()
private DateTime ValueAsDateTime()
private DateTimeOffset ValueAsDateTimeOffset()
private string ValueAsDateTimeString()
private string ValueAsString(BinXmlToken token)
private object ValueAsObject(BinXmlToken token, bool returnInternalTypes)
private XmlValueConverter GetValueConverter(XmlTypeCode typeCode)
private object ValueAs(BinXmlToken token, Type returnType, IXmlNamespaceResolver namespaceResolver)
private short GetInt16(int pos)
private ushort GetUInt16(int pos)
private int GetInt32(int pos)
private UInt32 GetUInt32(int pos)
private long GetInt64(int pos)
private ulong GetUInt64(int pos)
private float GetSingle(int offset)
private double GetDouble(int offset)
private Exception ThrowUnexpectedToken(BinXmlToken token)
private Exception ThrowXmlException(string res)
private Exception ThrowXmlException(string res, string arg1, string arg2)
private Exception ThrowNotSupported(string res)
public Task`1<string> GetValueAsync()
public Task`1<bool> ReadAsync()
public Task`1<object> ReadContentAsObjectAsync()
public Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
public Task`1<XmlNodeType> MoveToContentAsync()
public Task`1<string> ReadContentAsStringAsync()
public Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
public Task`1<object> ReadElementContentAsObjectAsync()
public Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<string> ReadInnerXmlAsync()
public Task`1<string> ReadOuterXmlAsync()
public Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count)
public Task SkipAsync()
public Task`1<string> ReadElementContentAsStringAsync()
}
internal System.Xml.XmlStandalone : Enum {
public int value__
public XmlStandalone Omit
public XmlStandalone Yes
public XmlStandalone No
}
internal System.Xml.XmlSubtreeReader : XmlWrappingReader {
private int AttributeActiveStates
private int NamespaceActiveStates
private int initialDepth
private State state
private XmlNamespaceManager nsManager
private NodeData[] nsAttributes
private int nsAttrCount
private int curNsAttr
private string xmlns
private string xmlnsUri
private int nsIncReadOffset
private IncrementalReadDecoder binDecoder
private bool useCurNode
private NodeData curNode
private NodeData tmpNode
internal int InitialNamespaceAttributeCount
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public int AttributeCount
public bool CanReadBinaryContent
public bool CanReadValueChunk
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
private bool InAttributeActiveState
private bool InNamespaceActiveState
internal void .ctor(XmlReader reader)
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_EOF()
public ReadState get_ReadState()
public XmlNameTable get_NameTable()
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool ReadAttributeValue()
public bool Read()
public void Close()
public void Skip()
public object ReadContentAsObject()
public bool ReadContentAsBoolean()
public DateTime ReadContentAsDateTime()
public double ReadContentAsDouble()
public float ReadContentAsFloat()
public decimal ReadContentAsDecimal()
public int ReadContentAsInt()
public long ReadContentAsLong()
public string ReadContentAsString()
public object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public bool get_CanReadValueChunk()
public int ReadValueChunk(Char[] buffer, int index, int count)
public string LookupNamespace(string prefix)
protected void Dispose(bool disposing)
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
private bool System.Xml.IXmlLineInfo.HasLineInfo()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
private void ProcessNamespaces()
private void AddNamespace(string prefix, string ns)
private void RemoveNamespace(string prefix, string localName)
private void MoveToNsAttribute(int index)
private bool InitReadElementContentAsBinary(State binaryState)
private bool FinishReadElementContentAsBinary()
private bool FinishReadContentAsBinary()
private bool get_InAttributeActiveState()
private bool get_InNamespaceActiveState()
private void SetEmptyNode()
private void SetCurrentNode(NodeData node)
private void InitReadContentAsType(string methodName)
private void FinishReadContentAsType()
private void CheckBuffer(Array buffer, int index, int count)
public Task`1<string> GetValueAsync()
public Task`1<bool> ReadAsync()
public Task SkipAsync()
public Task`1<object> ReadContentAsObjectAsync()
public Task`1<string> ReadContentAsStringAsync()
public Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
public Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count)
private Task`1<bool> InitReadElementContentAsBinaryAsync(State binaryState)
private Task`1<bool> FinishReadElementContentAsBinaryAsync()
private Task`1<bool> FinishReadContentAsBinaryAsync()
}
public System.Xml.XmlText : XmlCharacterData {
public string Name
public string LocalName
public XmlNodeType NodeType
public XmlNode ParentNode
public string Value
internal XPathNodeType XPNodeType
internal bool IsText
public XmlNode PreviousText
internal void .ctor(string strData)
protected internal void .ctor(string strData, XmlDocument doc)
public string get_Name()
public string get_LocalName()
public XmlNodeType get_NodeType()
public XmlNode get_ParentNode()
public XmlNode CloneNode(bool deep)
public string get_Value()
public void set_Value(string value)
public XmlText SplitText(int offset)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
internal XPathNodeType get_XPNodeType()
internal bool get_IsText()
public XmlNode get_PreviousText()
}
internal System.Xml.XmlTextEncoder : object {
private TextWriter textWriter
private bool inAttribute
private char quoteChar
private StringBuilder attrValue
private bool cacheAttrValue
private XmlCharType xmlCharType
internal char QuoteChar
internal string AttributeValue
internal void .ctor(TextWriter textWriter)
internal void set_QuoteChar(char value)
internal void StartAttribute(bool cacheAttrValue)
internal void EndAttribute()
internal string get_AttributeValue()
internal void WriteSurrogateChar(char lowChar, char highChar)
internal void Write(Char[] array, int offset, int count)
internal void WriteSurrogateCharEntity(char lowChar, char highChar)
internal void Write(string text)
internal void WriteRawWithSurrogateChecking(string text)
internal void WriteRaw(string value)
internal void WriteRaw(Char[] array, int offset, int count)
internal void WriteCharEntity(char ch)
internal void WriteEntityRef(string name)
internal void Flush()
private void WriteStringFragment(string str, int offset, int count, Char[] helperBuffer)
private void WriteCharEntityImpl(char ch)
private void WriteCharEntityImpl(string strVal)
private void WriteEntityRefImpl(string name)
}
public System.Xml.XmlTextReader : XmlReader {
private XmlTextReaderImpl impl
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public int AttributeCount
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public bool CanResolveEntity
public bool CanReadBinaryContent
public bool CanReadValueChunk
public int LineNumber
public int LinePosition
public bool Namespaces
public bool Normalization
public Encoding Encoding
public WhitespaceHandling WhitespaceHandling
public bool ProhibitDtd
public DtdProcessing DtdProcessing
public EntityHandling EntityHandling
public XmlResolver XmlResolver
internal XmlTextReaderImpl Impl
internal XmlNamespaceManager NamespaceManager
internal bool XmlValidatingReaderCompatibilityMode
internal IDtdInfo DtdInfo
protected void .ctor(XmlNameTable nt)
public void .ctor(Stream input)
public void .ctor(string url, Stream input)
public void .ctor(Stream input, XmlNameTable nt)
public void .ctor(string url, Stream input, XmlNameTable nt)
public void .ctor(TextReader input)
public void .ctor(string url, TextReader input)
public void .ctor(TextReader input, XmlNameTable nt)
public void .ctor(string url, TextReader input, XmlNameTable nt)
public void .ctor(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context)
public void .ctor(string xmlFragment, XmlNodeType fragType, XmlParserContext context)
public void .ctor(string url)
public void .ctor(string url, XmlNameTable nt)
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool ReadAttributeValue()
public bool Read()
public bool get_EOF()
public void Close()
public ReadState get_ReadState()
public void Skip()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public bool get_CanResolveEntity()
public void ResolveEntity()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public bool get_CanReadValueChunk()
public string ReadString()
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public bool get_Namespaces()
public void set_Namespaces(bool value)
public bool get_Normalization()
public void set_Normalization(bool value)
public Encoding get_Encoding()
public WhitespaceHandling get_WhitespaceHandling()
public void set_WhitespaceHandling(WhitespaceHandling value)
public bool get_ProhibitDtd()
public void set_ProhibitDtd(bool value)
public DtdProcessing get_DtdProcessing()
public void set_DtdProcessing(DtdProcessing value)
public EntityHandling get_EntityHandling()
public void set_EntityHandling(EntityHandling value)
public void set_XmlResolver(XmlResolver value)
public void ResetState()
public TextReader GetRemainder()
public int ReadChars(Char[] buffer, int index, int count)
public int ReadBase64(Byte[] array, int offset, int len)
public int ReadBinHex(Byte[] array, int offset, int len)
internal XmlTextReaderImpl get_Impl()
internal XmlNamespaceManager get_NamespaceManager()
internal void set_XmlValidatingReaderCompatibilityMode(bool value)
internal IDtdInfo get_DtdInfo()
}
internal System.Xml.XmlTextReaderImpl : XmlReader {
private bool useAsync
private LaterInitParam laterInitParam
private XmlCharType xmlCharType
private ParsingState ps
private ParsingFunction parsingFunction
private ParsingFunction nextParsingFunction
private ParsingFunction nextNextParsingFunction
private NodeData[] nodes
private NodeData curNode
private int index
private int curAttrIndex
private int attrCount
private int attrHashtable
private int attrDuplWalkCount
private bool attrNeedNamespaceLookup
private bool fullAttrCleanup
private NodeData[] attrDuplSortingArray
private XmlNameTable nameTable
private bool nameTableFromSettings
private XmlResolver xmlResolver
private string url
private bool normalize
private bool supportNamespaces
private WhitespaceHandling whitespaceHandling
private DtdProcessing dtdProcessing
private EntityHandling entityHandling
private bool ignorePIs
private bool ignoreComments
private bool checkCharacters
private int lineNumberOffset
private int linePositionOffset
private bool closeInput
private long maxCharactersInDocument
private long maxCharactersFromEntities
private bool v1Compat
private XmlNamespaceManager namespaceManager
private string lastPrefix
private XmlContext xmlContext
private ParsingState[] parsingStatesStack
private int parsingStatesStackTop
private string reportedBaseUri
private Encoding reportedEncoding
private IDtdInfo dtdInfo
private XmlNodeType fragmentType
private XmlParserContext fragmentParserContext
private bool fragment
private IncrementalReadDecoder incReadDecoder
private IncrementalReadState incReadState
private LineInfo incReadLineInfo
private BinHexDecoder binHexDecoder
private Base64Decoder base64Decoder
private int incReadDepth
private int incReadLeftStartPos
private int incReadLeftEndPos
private IncrementalReadCharsDecoder readCharsDecoder
private int attributeValueBaseEntityId
private bool emptyEntityInAttributeResolved
private IValidationEventHandling validationEventHandling
private OnDefaultAttributeUseDelegate onDefaultAttributeUse
private bool validatingReaderCompatFlag
private bool addDefaultAttributesAndNormalize
private StringBuilder stringBuilder
private bool rootElementParsed
private bool standalone
private int nextEntityId
private ParsingMode parsingMode
private ReadState readState
private IDtdEntityInfo lastEntity
private bool afterResetState
private int documentStartBytePos
private int readValueOffset
private long charactersInDocument
private long charactersFromEntities
private Dictionary`2<IDtdEntityInfo, IDtdEntityInfo> currentEntities
private bool disableUndeclaredEntityCheck
private XmlReader outerReader
private bool xmlResolverIsSet
private string Xml
private string XmlNs
private int MaxBytesToMove
private int ApproxXmlDeclLength
private int NodesInitialSize
private int InitialAttributesCount
private int InitialParsingStateStackSize
private int InitialParsingStatesDepth
private int DtdChidrenInitialSize
private int MaxByteSequenceLen
private int MaxAttrDuplWalkCount
private int MinWhitespaceLookahedCount
private string XmlDeclarationBegining
private ParseEndElementParseFunction parseEndElement_NextFunc
private ParseTextFunction parseText_NextFunction
private ParseTextState lastParseTextState
private Task`1<Tuple`4<int, int, int, bool>> parseText_dummyTask
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public ReadState ReadState
public bool EOF
public XmlNameTable NameTable
public bool CanResolveEntity
public int AttributeCount
internal XmlReader OuterReader
public bool CanReadBinaryContent
public bool CanReadValueChunk
public int LineNumber
public int LinePosition
internal bool Namespaces
internal bool Normalization
internal Encoding Encoding
internal WhitespaceHandling WhitespaceHandling
internal DtdProcessing DtdProcessing
internal EntityHandling EntityHandling
internal bool IsResolverSet
internal XmlResolver XmlResolver
internal XmlNameTable DtdParserProxy_NameTable
internal IXmlNamespaceResolver DtdParserProxy_NamespaceResolver
internal bool DtdParserProxy_DtdValidation
internal bool DtdParserProxy_Normalization
internal bool DtdParserProxy_Namespaces
internal bool DtdParserProxy_V1CompatibilityMode
internal Uri DtdParserProxy_BaseUri
internal bool DtdParserProxy_IsEof
internal Char[] DtdParserProxy_ParsingBuffer
internal int DtdParserProxy_ParsingBufferLength
internal int DtdParserProxy_CurrentPosition
internal int DtdParserProxy_EntityStackLength
internal bool DtdParserProxy_IsEntityEolNormalized
internal IValidationEventHandling DtdParserProxy_ValidationEventHandling
internal int DtdParserProxy_LineNo
internal int DtdParserProxy_LineStartPosition
private bool IsResolverNull
private bool InAttributeValueIterator
private bool DtdValidation
private bool InEntity
internal IDtdInfo DtdInfo
internal IValidationEventHandling ValidationEventHandling
internal OnDefaultAttributeUseDelegate OnDefaultAttributeUse
internal bool XmlValidatingReaderCompatibilityMode
internal XmlNodeType FragmentType
internal object InternalSchemaType
internal object InternalTypedValue
internal bool StandAlone
internal XmlNamespaceManager NamespaceManager
internal bool V1Compat
internal ConformanceLevel V1ComformanceLevel
internal bool DisableUndeclaredEntityCheck
internal void .ctor(XmlNameTable nt)
private void .ctor(XmlResolver resolver, XmlReaderSettings settings, XmlParserContext context)
internal void .ctor(Stream input)
internal void .ctor(Stream input, XmlNameTable nt)
internal void .ctor(string url, Stream input)
internal void .ctor(string url, Stream input, XmlNameTable nt)
internal void .ctor(TextReader input)
internal void .ctor(TextReader input, XmlNameTable nt)
internal void .ctor(string url, TextReader input)
internal void .ctor(string url, TextReader input, XmlNameTable nt)
internal void .ctor(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context)
internal void .ctor(string xmlFragment, XmlNodeType fragType, XmlParserContext context)
internal void .ctor(string xmlFragment, XmlParserContext context)
public void .ctor(string url)
public void .ctor(string url, XmlNameTable nt)
internal void .ctor(string uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver)
private void FinishInitUriString()
internal void .ctor(Stream stream, Byte[] bytes, int byteCount, XmlReaderSettings settings, Uri baseUri, string baseUriStr, XmlParserContext context, bool closeInput)
private void FinishInitStream()
internal void .ctor(TextReader input, XmlReaderSettings settings, string baseUriStr, XmlParserContext context)
private void FinishInitTextReader()
internal void .ctor(string xmlFragment, XmlParserContext context, XmlReaderSettings settings)
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public ReadState get_ReadState()
public bool get_EOF()
public XmlNameTable get_NameTable()
public bool get_CanResolveEntity()
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
private void FinishInit()
public bool Read()
public void Close()
public void Skip()
public string LookupNamespace(string prefix)
public bool ReadAttributeValue()
public void ResolveEntity()
internal XmlReader get_OuterReader()
internal void set_OuterReader(XmlReader value)
internal void MoveOffEntityReference()
public string ReadString()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public bool get_CanReadValueChunk()
public int ReadValueChunk(Char[] buffer, int index, int count)
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
internal string LookupPrefix(string namespaceName)
internal bool get_Namespaces()
internal void set_Namespaces(bool value)
internal bool get_Normalization()
internal void set_Normalization(bool value)
internal Encoding get_Encoding()
internal WhitespaceHandling get_WhitespaceHandling()
internal void set_WhitespaceHandling(WhitespaceHandling value)
internal DtdProcessing get_DtdProcessing()
internal void set_DtdProcessing(DtdProcessing value)
internal EntityHandling get_EntityHandling()
internal void set_EntityHandling(EntityHandling value)
internal bool get_IsResolverSet()
internal void set_XmlResolver(XmlResolver value)
internal void ResetState()
internal TextReader GetRemainder()
internal int ReadChars(Char[] buffer, int index, int count)
internal int ReadBase64(Byte[] array, int offset, int len)
internal int ReadBinHex(Byte[] array, int offset, int len)
internal XmlNameTable get_DtdParserProxy_NameTable()
internal IXmlNamespaceResolver get_DtdParserProxy_NamespaceResolver()
internal bool get_DtdParserProxy_DtdValidation()
internal bool get_DtdParserProxy_Normalization()
internal bool get_DtdParserProxy_Namespaces()
internal bool get_DtdParserProxy_V1CompatibilityMode()
internal Uri get_DtdParserProxy_BaseUri()
internal bool get_DtdParserProxy_IsEof()
internal Char[] get_DtdParserProxy_ParsingBuffer()
internal int get_DtdParserProxy_ParsingBufferLength()
internal int get_DtdParserProxy_CurrentPosition()
internal void set_DtdParserProxy_CurrentPosition(int value)
internal int get_DtdParserProxy_EntityStackLength()
internal bool get_DtdParserProxy_IsEntityEolNormalized()
internal IValidationEventHandling get_DtdParserProxy_ValidationEventHandling()
internal void set_DtdParserProxy_ValidationEventHandling(IValidationEventHandling value)
internal void DtdParserProxy_OnNewLine(int pos)
internal int get_DtdParserProxy_LineNo()
internal int get_DtdParserProxy_LineStartPosition()
internal int DtdParserProxy_ReadData()
internal int DtdParserProxy_ParseNumericCharRef(StringBuilder internalSubsetBuilder)
internal int DtdParserProxy_ParseNamedCharRef(bool expand, StringBuilder internalSubsetBuilder)
internal void DtdParserProxy_ParsePI(StringBuilder sb)
internal void DtdParserProxy_ParseComment(StringBuilder sb)
private bool get_IsResolverNull()
private XmlResolver GetTempResolver()
internal bool DtdParserProxy_PushEntity(IDtdEntityInfo entity, Int32& entityId)
internal bool DtdParserProxy_PopEntity(IDtdEntityInfo& oldEntity, Int32& newEntityId)
internal bool DtdParserProxy_PushExternalSubset(string systemId, string publicId)
internal void DtdParserProxy_PushInternalDtd(string baseUri, string internalDtd)
internal void DtdParserProxy_Throw(Exception e)
internal void DtdParserProxy_OnSystemId(string systemId, LineInfo keywordLineInfo, LineInfo systemLiteralLineInfo)
internal void DtdParserProxy_OnPublicId(string publicId, LineInfo keywordLineInfo, LineInfo publicLiteralLineInfo)
private void Throw(int pos, string res, string arg)
private void Throw(int pos, string res, String[] args)
private void Throw(int pos, string res)
private void Throw(string res)
private void Throw(string res, int lineNo, int linePos)
private void Throw(string res, string arg)
private void Throw(string res, string arg, int lineNo, int linePos)
private void Throw(string res, String[] args)
private void Throw(string res, string arg, Exception innerException)
private void Throw(string res, String[] args, Exception innerException)
private void Throw(Exception e)
private void ReThrow(Exception e, int lineNo, int linePos)
private void ThrowWithoutLineInfo(string res)
private void ThrowWithoutLineInfo(string res, string arg)
private void ThrowWithoutLineInfo(string res, String[] args, Exception innerException)
private void ThrowInvalidChar(Char[] data, int length, int invCharPos)
private void SetErrorState()
private void SendValidationEvent(XmlSeverityType severity, string code, string arg, int lineNo, int linePos)
private void SendValidationEvent(XmlSeverityType severity, XmlSchemaException exception)
private bool get_InAttributeValueIterator()
private void FinishAttributeValueIterator()
private bool get_DtdValidation()
private void InitStreamInput(Stream stream, Encoding encoding)
private void InitStreamInput(string baseUriStr, Stream stream, Encoding encoding)
private void InitStreamInput(Uri baseUri, Stream stream, Encoding encoding)
private void InitStreamInput(Uri baseUri, string baseUriStr, Stream stream, Encoding encoding)
private void InitStreamInput(Uri baseUri, string baseUriStr, Stream stream, Byte[] bytes, int byteCount, Encoding encoding)
private void InitTextReaderInput(string baseUriStr, TextReader input)
private void InitTextReaderInput(string baseUriStr, Uri baseUri, TextReader input)
private void InitStringInput(string baseUriStr, Encoding originalEncoding, string str)
private void InitFragmentReader(XmlNodeType fragmentType, XmlParserContext parserContext, bool allowXmlDeclFragment)
private void ProcessDtdFromParserContext(XmlParserContext context)
private void OpenUrl()
private void OpenUrlDelegate(object xmlResolver)
private Encoding DetectEncoding()
private void SetupEncoding(Encoding encoding)
private void SwitchEncoding(Encoding newEncoding)
private Encoding CheckEncoding(string newEncodingName)
private void UnDecodeChars()
private void SwitchEncodingToUTF8()
private int ReadData()
private int GetChars(int maxCharsCount)
private void InvalidCharRecovery(Int32& bytesCount, Int32& charsCount)
internal void Close(bool closeInput)
private void ShiftBuffer(int sourcePos, int destPos, int count)
private bool ParseXmlDeclaration(bool isTextDecl)
private bool ParseDocumentContent()
private bool ParseElementContent()
private void ThrowUnclosedElements()
private void ParseElement()
private void AddDefaultAttributesAndNormalize()
private void ParseEndElement()
private void ThrowTagMismatch(NodeData startTag)
private void ParseAttributes()
private void ElementNamespaceLookup()
private void AttributeNamespaceLookup()
private void AttributeDuplCheck()
private void OnDefaultNamespaceDecl(NodeData attr)
private void OnNamespaceDecl(NodeData attr)
private void OnXmlReservedAttribute(NodeData attr)
private void ParseAttributeValueSlow(int curPos, char quoteChar, NodeData attr)
private void AddAttributeChunkToList(NodeData attr, NodeData chunk, NodeData& lastChunk)
private bool ParseText()
private bool ParseText(Int32& startPos, Int32& endPos, Int32& outOrChars)
private void FinishPartialValue()
private void FinishOtherValueIterator()
private void SkipPartialTextValue()
private void FinishReadValueChunk()
private void FinishReadContentAsBinary()
private void FinishReadElementContentAsBinary()
private bool ParseRootLevelWhitespace()
private void ParseEntityReference()
private EntityType HandleEntityReference(bool isInAttributeValue, EntityExpandType expandType, Int32& charRefEndPos)
private EntityType HandleGeneralEntityReference(string name, bool isInAttributeValue, bool pushFakeEntityIfNullResolver, int entityStartLinePos)
private bool get_InEntity()
private bool HandleEntityEnd(bool checkEntityNesting)
private void SetupEndEntityNodeInContent()
private void SetupEndEntityNodeInAttribute()
private bool ParsePI()
private bool ParsePI(StringBuilder piInDtdStringBuilder)
private bool ParsePIValue(Int32& outStartPos, Int32& outEndPos)
private bool ParseComment()
private void ParseCData()
private void ParseCDataOrComment(XmlNodeType type)
private bool ParseCDataOrComment(XmlNodeType type, Int32& outStartPos, Int32& outEndPos)
private bool ParseDoctypeDecl()
private void ParseDtd()
private void SkipDtd()
private void SkipPublicOrSystemIdLiteral()
private void SkipUntil(char stopChar, bool recognizeLiterals)
private int EatWhitespaces(StringBuilder sb)
private int ParseCharRefInline(int startPos, Int32& charCount, EntityType& entityType)
private int ParseNumericCharRef(bool expand, StringBuilder internalSubsetBuilder, EntityType& entityType)
private int ParseNumericCharRefInline(int startPos, bool expand, StringBuilder internalSubsetBuilder, Int32& charCount, EntityType& entityType)
private int ParseNamedCharRef(bool expand, StringBuilder internalSubsetBuilder)
private int ParseNamedCharRefInline(int startPos, bool expand, StringBuilder internalSubsetBuilder)
private int ParseName()
private int ParseQName(Int32& colonPos)
private int ParseQName(bool isQName, int startOffset, Int32& colonPos)
private bool ReadDataInName(Int32& pos)
private string ParseEntityName()
private NodeData AddNode(int nodeIndex, int nodeDepth)
private NodeData AllocNode(int nodeIndex, int nodeDepth)
private NodeData AddAttributeNoChecks(string name, int attrDepth)
private NodeData AddAttribute(int endNamePos, int colonPos)
private NodeData AddAttribute(string localName, string prefix, string nameWPrefix)
private void PopElementContext()
private void OnNewLine(int pos)
private void OnEof()
private string LookupNamespace(NodeData node)
private void AddNamespace(string prefix, string uri, NodeData attr)
private void ResetAttributes()
private void FullAttributeCleanup()
private void PushXmlContext()
private void PopXmlContext()
private XmlNodeType GetWhitespaceType()
private XmlNodeType GetTextNodeType(int orChars)
private void PushExternalEntityOrSubset(string publicId, string systemId, Uri baseUri, string entityName)
private bool OpenAndPush(Uri uri)
private bool PushExternalEntity(IDtdEntityInfo entity)
private void PushInternalEntity(IDtdEntityInfo entity)
private void PopEntity()
private void RegisterEntity(IDtdEntityInfo entity)
private void UnregisterEntity()
private void PushParsingState()
private void PopParsingState()
private void InitIncrementalRead(IncrementalReadDecoder decoder)
private int IncrementalRead(Array array, int index, int count)
private int IncrementalRead()
private void FinishIncrementalRead()
private bool ParseFragmentAttribute()
private bool ParseAttributeValueChunk()
private void ParseXmlDeclarationFragment()
private void ThrowUnexpectedToken(int pos, string expectedToken)
private void ThrowUnexpectedToken(string expectedToken1)
private void ThrowUnexpectedToken(int pos, string expectedToken1, string expectedToken2)
private void ThrowUnexpectedToken(string expectedToken1, string expectedToken2)
private string ParseUnexpectedToken(int pos)
private string ParseUnexpectedToken()
private void ThrowExpectingWhitespace(int pos)
private int GetIndexOfAttributeWithoutPrefix(string name)
private int GetIndexOfAttributeWithPrefix(string name)
private bool ZeroEndingStream(int pos)
private void ParseDtdFromParserContext()
private bool InitReadContentAsBinary()
private bool InitReadElementContentAsBinary()
private bool MoveToNextContentNode(bool moveIfOnContentNode)
private void SetupReadContentAsBinaryState(ParsingFunction inReadBinaryFunction)
private void SetupFromParserContext(XmlParserContext context, XmlReaderSettings settings)
internal IDtdInfo get_DtdInfo()
internal void SetDtdInfo(IDtdInfo newDtdInfo)
internal void set_ValidationEventHandling(IValidationEventHandling value)
internal void set_OnDefaultAttributeUse(OnDefaultAttributeUseDelegate value)
internal void set_XmlValidatingReaderCompatibilityMode(bool value)
internal XmlNodeType get_FragmentType()
internal void ChangeCurrentNodeType(XmlNodeType newNodeType)
internal XmlResolver GetResolver()
internal object get_InternalSchemaType()
internal void set_InternalSchemaType(object value)
internal object get_InternalTypedValue()
internal void set_InternalTypedValue(object value)
internal bool get_StandAlone()
internal XmlNamespaceManager get_NamespaceManager()
internal bool get_V1Compat()
internal ConformanceLevel get_V1ComformanceLevel()
private bool AddDefaultAttributeDtd(IDtdDefaultAttributeInfo defAttrInfo, bool definedInDtd, NodeData[] nameSortedNodeData)
internal bool AddDefaultAttributeNonDtd(SchemaAttDef attrDef)
private NodeData AddDefaultAttributeInternal(string localName, string ns, string prefix, string value, int lineNo, int linePos, int valueLineNo, int valueLinePos, bool isXmlAttribute)
internal void set_DisableUndeclaredEntityCheck(bool value)
private int ReadContentAsBinary(Byte[] buffer, int index, int count)
private int ReadElementContentAsBinary(Byte[] buffer, int index, int count)
private void InitBase64Decoder()
private void InitBinHexDecoder()
private bool UriEqual(Uri uri1, string uri1Str, string uri2Str, XmlResolver resolver)
private void RegisterConsumedCharacters(long characters, bool inEntityReference)
internal void AdjustLineInfo(Char[] chars, int startPos, int endPos, bool isNormalized, LineInfo& lineInfo)
internal void AdjustLineInfo(string str, int startPos, int endPos, bool isNormalized, LineInfo& lineInfo)
internal void AdjustLineInfo(Char* pChars, int length, bool isNormalized, LineInfo& lineInfo)
internal string StripSpaces(string value)
internal void StripSpaces(Char[] value, int index, Int32& len)
internal void BlockCopyChars(Char[] src, int srcOffset, Char[] dst, int dstOffset, int count)
internal void BlockCopy(Byte[] src, int srcOffset, Byte[] dst, int dstOffset, int count)
private void CheckAsyncCall()
public Task`1<string> GetValueAsync()
private Task`1<string> _GetValueAsync()
private Task FinishInitAsync()
private Task FinishInitUriStringAsync()
private Task FinishInitStreamAsync()
private Task FinishInitTextReaderAsync()
public Task`1<bool> ReadAsync()
private Task`1<bool> ReadAsync_SwitchToInteractiveXmlDecl()
private Task`1<bool> _ReadAsync_SwitchToInteractiveXmlDecl(Task`1<bool> task)
private Task`1<bool> ReadAsync_SwitchToInteractiveXmlDecl_Helper(bool finish)
public Task SkipAsync()
private Task`1<int> ReadContentAsBase64_AsyncHelper(Task`1<bool> task, Byte[] buffer, int index, int count)
public Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count)
private Task`1<int> ReadElementContentAsBase64Async_Helper(Task`1<bool> task, Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count)
internal Task`1<int> DtdParserProxy_ReadDataAsync()
internal Task`1<int> DtdParserProxy_ParseNumericCharRefAsync(StringBuilder internalSubsetBuilder)
internal Task`1<int> DtdParserProxy_ParseNamedCharRefAsync(bool expand, StringBuilder internalSubsetBuilder)
internal Task DtdParserProxy_ParsePIAsync(StringBuilder sb)
internal Task DtdParserProxy_ParseCommentAsync(StringBuilder sb)
internal Task`1<Tuple`2<int, bool>> DtdParserProxy_PushEntityAsync(IDtdEntityInfo entity)
internal Task`1<bool> DtdParserProxy_PushExternalSubsetAsync(string systemId, string publicId)
private Task InitStreamInputAsync(Uri baseUri, Stream stream, Encoding encoding)
private Task InitStreamInputAsync(Uri baseUri, string baseUriStr, Stream stream, Encoding encoding)
private Task InitStreamInputAsync(Uri baseUri, string baseUriStr, Stream stream, Byte[] bytes, int byteCount, Encoding encoding)
private Task InitTextReaderInputAsync(string baseUriStr, TextReader input)
private Task InitTextReaderInputAsync(string baseUriStr, Uri baseUri, TextReader input)
private Task ProcessDtdFromParserContextAsync(XmlParserContext context)
private Task SwitchEncodingAsync(Encoding newEncoding)
private Task SwitchEncodingToUTF8Async()
private Task`1<int> ReadDataAsync()
private Task`1<bool> ParseXmlDeclarationAsync(bool isTextDecl)
private Task`1<bool> ParseDocumentContentAsync()
private Task`1<bool> ParseDocumentContentAsync_CData()
private Task`1<bool> ParseDocumentContentAsync_ParseEntity()
private Task`1<bool> ParseDocumentContentAsync_WhiteSpace()
private Task`1<bool> _ParseDocumentContentAsync_WhiteSpace(Task`1<bool> task)
private Task`1<bool> ParseDocumentContentAsync_ReadData(bool needMoreChars)
private Task`1<bool> ParseElementContentAsync()
private Task`1<bool> ParseElementContent_ReadData()
private Task ParseElementAsync()
private Task ParseElementAsync_ContinueWithSetElement(Task`1<Tuple`2<int, int>> task)
private Task _ParseElementAsync_ContinueWithSetElement(Task`1<Tuple`2<int, int>> task)
private Task ParseElementAsync_SetElement(int colonPos, int pos)
private Task ParseElementAsync_NoAttributes()
private Task ParseElementAsync_ReadData(int pos)
private Task ParseEndElementAsync()
private Task _ParseEndElmentAsync()
private Task ParseEndElmentAsync_PrepareData()
private Task ParseEndElementAsync_CheckNameAndParse()
private Task ParseEndElementAsync_Finish(int nameLen, NodeData startTagNode, LineInfo endTagLineInfo)
private Task ParseEndElementAsync_Finish(Task task, int nameLen, NodeData startTagNode, LineInfo endTagLineInfo)
private Task ParseEndElementAsync_CheckEndTag(int nameLen, NodeData startTagNode, LineInfo endTagLineInfo)
private Task ParseEndElementAsync_ReadData()
private Task ThrowTagMismatchAsync(NodeData startTag)
private Task ParseAttributesAsync()
private Task ParseAttributeValueSlowAsync(int curPos, char quoteChar, NodeData attr)
private Task`1<bool> ParseTextAsync()
private Task`1<bool> _ParseTextAsync(Task`1<Tuple`4<int, int, int, bool>> parseTask)
private Task`1<bool> ParseTextAsync_IgnoreNode()
private Task`1<Tuple`4<int, int, int, bool>> ParseTextAsync(int outOrChars)
private Task`1<Tuple`4<int, int, int, bool>> ParseTextAsync_AsyncFunc(Task`1<Tuple`4<int, int, int, bool>> task)
private Task`1<Tuple`4<int, int, int, bool>> ParseTextAsync(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c)
private Task`1<Tuple`4<int, int, int, bool>> ParseTextAsync_ParseEntity(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c)
private Task`1<Tuple`4<int, int, int, bool>> ParseTextAsync_Surrogate(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c)
private Task`1<Tuple`4<int, int, int, bool>> ParseTextAsync_ReadData(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c)
private Task`1<Tuple`4<int, int, int, bool>> ParseTextAsync_NoValue(int outOrChars, int pos)
private Task`1<Tuple`4<int, int, int, bool>> ParseTextAsync_PartialValue(int pos, int rcount, int rpos, int orChars, char c)
private Task FinishPartialValueAsync()
private Task FinishOtherValueIteratorAsync()
private Task SkipPartialTextValueAsync()
private Task FinishReadValueChunkAsync()
private Task FinishReadContentAsBinaryAsync()
private Task FinishReadElementContentAsBinaryAsync()
private Task`1<bool> ParseRootLevelWhitespaceAsync()
private Task ParseEntityReferenceAsync()
private Task`1<Tuple`2<int, EntityType>> HandleEntityReferenceAsync(bool isInAttributeValue, EntityExpandType expandType)
private Task`1<EntityType> HandleGeneralEntityReferenceAsync(string name, bool isInAttributeValue, bool pushFakeEntityIfNullResolver, int entityStartLinePos)
private Task`1<bool> ParsePIAsync()
private Task`1<bool> ParsePIAsync(StringBuilder piInDtdStringBuilder)
private Task`1<Tuple`3<int, int, bool>> ParsePIValueAsync()
private Task`1<bool> ParseCommentAsync()
private Task ParseCDataAsync()
private Task ParseCDataOrCommentAsync(XmlNodeType type)
private Task`1<Tuple`3<int, int, bool>> ParseCDataOrCommentTupleAsync(XmlNodeType type)
private Task`1<bool> ParseDoctypeDeclAsync()
private Task ParseDtdAsync()
private Task SkipDtdAsync()
private Task SkipPublicOrSystemIdLiteralAsync()
private Task SkipUntilAsync(char stopChar, bool recognizeLiterals)
private Task`1<int> EatWhitespacesAsync(StringBuilder sb)
private Task`1<Tuple`2<EntityType, int>> ParseNumericCharRefAsync(bool expand, StringBuilder internalSubsetBuilder)
private Task`1<int> ParseNamedCharRefAsync(bool expand, StringBuilder internalSubsetBuilder)
private Task`1<int> ParseNameAsync()
private Task`1<Tuple`2<int, int>> ParseQNameAsync()
private Task`1<Tuple`2<int, int>> ParseQNameAsync(bool isQName, int startOffset)
private Task`1<Tuple`2<int, bool>> ReadDataInNameAsync(int pos)
private Task`1<string> ParseEntityNameAsync()
private Task PushExternalEntityOrSubsetAsync(string publicId, string systemId, Uri baseUri, string entityName)
private Task`1<bool> OpenAndPushAsync(Uri uri)
private Task`1<bool> PushExternalEntityAsync(IDtdEntityInfo entity)
private Task`1<bool> ZeroEndingStreamAsync(int pos)
private Task ParseDtdFromParserContextAsync()
private Task`1<bool> InitReadContentAsBinaryAsync()
private Task`1<bool> InitReadElementContentAsBinaryAsync()
private Task`1<bool> MoveToNextContentNodeAsync(bool moveIfOnContentNode)
private Task`1<int> ReadContentAsBinaryAsync(Byte[] buffer, int index, int count)
private Task`1<int> ReadElementContentAsBinaryAsync(Byte[] buffer, int index, int count)
}
public System.Xml.XmlTextWriter : XmlWriter {
private TextWriter textWriter
private XmlTextEncoder xmlEncoder
private Encoding encoding
private Formatting formatting
private bool indented
private int indentation
private char indentChar
private TagInfo[] stack
private int top
private State[] stateTable
private State currentState
private Token lastToken
private XmlTextWriterBase64Encoder base64Encoder
private char quoteChar
private char curQuoteChar
private bool namespaces
private SpecialAttr specialAttr
private string prefixForXmlNs
private bool flush
private Namespace[] nsStack
private int nsTop
private Dictionary`2<string, int> nsHashtable
private bool useNsHashtable
private XmlCharType xmlCharType
private int NamespaceStackInitialSize
private int MaxNamespacesWalkCount
private String[] stateName
private String[] tokenName
private State[] stateTableDefault
private State[] stateTableDocument
public Stream BaseStream
public bool Namespaces
public Formatting Formatting
public int Indentation
public char IndentChar
public char QuoteChar
public WriteState WriteState
public XmlSpace XmlSpace
public string XmlLang
public void .ctor(Stream w, Encoding encoding)
public void .ctor(string filename, Encoding encoding)
public void .ctor(TextWriter w)
public Stream get_BaseStream()
public bool get_Namespaces()
public void set_Namespaces(bool value)
public Formatting get_Formatting()
public void set_Formatting(Formatting value)
public int get_Indentation()
public void set_Indentation(int value)
public char get_IndentChar()
public void set_IndentChar(char value)
public char get_QuoteChar()
public void set_QuoteChar(char value)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public WriteState get_WriteState()
public void Close()
public void Flush()
public void WriteName(string name)
public void WriteQualifiedName(string localName, string ns)
public string LookupPrefix(string ns)
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public void WriteNmToken(string name)
private void StartDocument(int standalone)
private void AutoComplete(Token token)
private void AutoCompleteAll()
private void InternalWriteEndElement(bool longFormat)
private void WriteEndStartTag(bool empty)
private void WriteEndAttributeQuote()
private void Indent(bool beforeEndElement)
private void PushNamespace(string prefix, string ns, bool declared)
private void AddNamespace(string prefix, string ns, bool declared)
private void AddToNamespaceHashtable(int namespaceIndex)
private void PopNamespaces(int indexFrom, int indexTo)
private string GeneratePrefix()
private void InternalWriteProcessingInstruction(string name, string text)
private int LookupNamespace(string prefix)
private int LookupNamespaceInCurrentScope(string prefix)
private string FindPrefix(string ns)
private void InternalWriteName(string name, bool isNCName)
private void ValidateName(string name, bool isNCName)
private void HandleSpecialAttribute()
private void VerifyPrefixXml(string prefix, string ns)
private void PushStack()
private void FlushEncoders()
}
internal System.Xml.XmlTextWriterBase64Encoder : Base64Encoder {
private XmlTextEncoder xmlTextEncoder
internal void .ctor(XmlTextEncoder xmlTextEncoder)
internal void WriteChars(Char[] chars, int index, int count)
internal Task WriteCharsAsync(Char[] chars, int index, int count)
}
public System.Xml.XmlTokenizedType : Enum {
public int value__
public XmlTokenizedType CDATA
public XmlTokenizedType ID
public XmlTokenizedType IDREF
public XmlTokenizedType IDREFS
public XmlTokenizedType ENTITY
public XmlTokenizedType ENTITIES
public XmlTokenizedType NMTOKEN
public XmlTokenizedType NMTOKENS
public XmlTokenizedType NOTATION
public XmlTokenizedType ENUMERATION
public XmlTokenizedType QName
public XmlTokenizedType NCName
public XmlTokenizedType None
}
internal System.Xml.XmlUnspecifiedAttribute : XmlAttribute {
private bool fSpecified
public bool Specified
public string InnerText
protected internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc)
public bool get_Specified()
public XmlNode CloneNode(bool deep)
public void set_InnerText(string value)
public XmlNode InsertBefore(XmlNode newChild, XmlNode refChild)
public XmlNode InsertAfter(XmlNode newChild, XmlNode refChild)
public XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild)
public XmlNode RemoveChild(XmlNode oldChild)
public XmlNode AppendChild(XmlNode newChild)
public void WriteTo(XmlWriter w)
internal void SetSpecified(bool f)
}
public System.Xml.XmlUrlResolver : XmlResolver {
private object s_DownloadManager
private ICredentials _credentials
private IWebProxy _proxy
private RequestCachePolicy _cachePolicy
private XmlDownloadManager DownloadManager
public ICredentials Credentials
public IWebProxy Proxy
public RequestCachePolicy CachePolicy
private XmlDownloadManager get_DownloadManager()
public void set_Credentials(ICredentials value)
public void set_Proxy(IWebProxy value)
public void set_CachePolicy(RequestCachePolicy value)
public object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn)
public Uri ResolveUri(Uri baseUri, string relativeUri)
public Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn)
}
internal System.Xml.XmlUtf8RawTextWriter : XmlRawWriter {
private bool useAsync
protected Byte[] bufBytes
protected Stream stream
protected Encoding encoding
protected XmlCharType xmlCharType
protected int bufPos
protected int textPos
protected int contentPos
protected int cdataPos
protected int attrEndPos
protected int bufLen
protected bool writeToNull
protected bool hadDoubleBracket
protected bool inAttributeValue
protected NewLineHandling newLineHandling
protected bool closeOutput
protected bool omitXmlDeclaration
protected string newLineChars
protected bool checkCharacters
protected XmlStandalone standalone
protected XmlOutputMethod outputMethod
protected bool autoXmlDeclaration
protected bool mergeCDataSections
private int BUFSIZE
private int ASYNCBUFSIZE
private int OVERFLOW
private int INIT_MARKS_COUNT
public XmlWriterSettings Settings
internal bool SupportsNamespaceDeclarationInChunks
protected void .ctor(XmlWriterSettings settings)
public void .ctor(Stream stream, XmlWriterSettings settings)
public XmlWriterSettings get_Settings()
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void StartElementContent()
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
internal void WriteNamespaceDeclaration(string prefix, string namespaceName)
internal bool get_SupportsNamespaceDeclarationInChunks()
internal void WriteStartNamespaceDeclaration(string prefix)
internal void WriteEndNamespaceDeclaration()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void Close()
public void Flush()
protected void FlushBuffer()
private void FlushEncoder()
protected void WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd)
protected void WriteElementTextBlock(Char* pSrc, Char* pSrcEnd)
protected void RawText(string s)
protected void RawText(Char* pSrcBegin, Char* pSrcEnd)
protected void WriteRawWithCharChecking(Char* pSrcBegin, Char* pSrcEnd)
protected void WriteCommentOrPi(string text, int stopChar)
protected void WriteCDataSection(string text)
private bool IsSurrogateByte(byte b)
private Byte* EncodeSurrogate(Char* pSrc, Char* pSrcEnd, Byte* pDst)
private Byte* InvalidXmlChar(int ch, Byte* pDst, bool entitize)
internal void EncodeChar(Char*& pSrc, Char* pSrcEnd, Byte*& pDst)
internal Byte* EncodeMultibyteUTF8(int ch, Byte* pDst)
internal void CharToUTF8(Char*& pSrc, Char* pSrcEnd, Byte*& pDst)
protected Byte* WriteNewLine(Byte* pDst)
protected Byte* LtEntity(Byte* pDst)
protected Byte* GtEntity(Byte* pDst)
protected Byte* AmpEntity(Byte* pDst)
protected Byte* QuoteEntity(Byte* pDst)
protected Byte* TabEntity(Byte* pDst)
protected Byte* LineFeedEntity(Byte* pDst)
protected Byte* CarriageReturnEntity(Byte* pDst)
private Byte* CharEntity(Byte* pDst, char ch)
protected Byte* RawStartCData(Byte* pDst)
protected Byte* RawEndCData(Byte* pDst)
protected void ValidateContentChars(string chars, string propertyName, bool allowOnlyWhitespace)
protected void CheckAsyncCall()
internal Task WriteXmlDeclarationAsync(XmlStandalone standalone)
internal Task WriteXmlDeclarationAsync(string xmldecl)
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
public Task WriteStartElementAsync(string prefix, string localName, string ns)
private void WriteStartElementAsync_SetAttEndPos()
internal Task WriteEndElementAsync(string prefix, string localName, string ns)
internal Task WriteFullEndElementAsync(string prefix, string localName, string ns)
protected internal Task WriteStartAttributeAsync(string prefix, string localName, string ns)
private void WriteStartAttribute_SetInAttribute()
protected internal Task WriteEndAttributeAsync()
internal Task WriteNamespaceDeclarationAsync(string prefix, string namespaceName)
internal Task WriteStartNamespaceDeclarationAsync(string prefix)
internal Task WriteEndNamespaceDeclarationAsync()
public Task WriteCDataAsync(string text)
public Task WriteCommentAsync(string text)
public Task WriteProcessingInstructionAsync(string name, string text)
public Task WriteEntityRefAsync(string name)
public Task WriteCharEntityAsync(char ch)
public Task WriteWhitespaceAsync(string ws)
public Task WriteStringAsync(string text)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(string data)
public Task FlushAsync()
protected Task FlushBufferAsync()
private Task FlushEncoderAsync()
protected int WriteAttributeTextBlockNoFlush(Char* pSrc, Char* pSrcEnd)
protected int WriteAttributeTextBlockNoFlush(Char[] chars, int index, int count)
protected int WriteAttributeTextBlockNoFlush(string text, int index, int count)
protected Task WriteAttributeTextBlockAsync(Char[] chars, int index, int count)
protected Task WriteAttributeTextBlockAsync(string text)
private Task _WriteAttributeTextBlockAsync(string text, int curIndex, int leftCount)
protected int WriteElementTextBlockNoFlush(Char* pSrc, Char* pSrcEnd, Boolean& needWriteNewLine)
protected int WriteElementTextBlockNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine)
protected int WriteElementTextBlockNoFlush(string text, int index, int count, Boolean& needWriteNewLine)
protected Task WriteElementTextBlockAsync(Char[] chars, int index, int count)
protected Task WriteElementTextBlockAsync(string text)
private Task _WriteElementTextBlockAsync(bool newLine, string text, int curIndex, int leftCount)
protected int RawTextNoFlush(Char* pSrcBegin, Char* pSrcEnd)
protected int RawTextNoFlush(string text, int index, int count)
protected Task RawTextAsync(string text)
private Task _RawTextAsync(string text, int curIndex, int leftCount)
protected int WriteRawWithCharCheckingNoFlush(Char* pSrcBegin, Char* pSrcEnd, Boolean& needWriteNewLine)
protected int WriteRawWithCharCheckingNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine)
protected int WriteRawWithCharCheckingNoFlush(string text, int index, int count, Boolean& needWriteNewLine)
protected Task WriteRawWithCharCheckingAsync(Char[] chars, int index, int count)
protected Task WriteRawWithCharCheckingAsync(string text)
protected int WriteCommentOrPiNoFlush(string text, int index, int count, int stopChar, Boolean& needWriteNewLine)
protected Task WriteCommentOrPiAsync(string text, int stopChar)
protected int WriteCDataSectionNoFlush(string text, int index, int count, Boolean& needWriteNewLine)
protected Task WriteCDataSectionAsync(string text)
}
internal System.Xml.XmlUtf8RawTextWriterIndent : XmlUtf8RawTextWriter {
protected int indentLevel
protected bool newLineOnAttributes
protected string indentChars
protected bool mixedContent
private BitStack mixedContentStack
protected ConformanceLevel conformanceLevel
public XmlWriterSettings Settings
public void .ctor(Stream stream, XmlWriterSettings settings)
public XmlWriterSettings get_Settings()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
internal void StartElementContent()
internal void OnRootElement(ConformanceLevel currentConformanceLevel)
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string target, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteBase64(Byte[] buffer, int index, int count)
private void Init(XmlWriterSettings settings)
private void WriteIndent()
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
public Task WriteStartElementAsync(string prefix, string localName, string ns)
internal Task WriteEndElementAsync(string prefix, string localName, string ns)
internal Task WriteFullEndElementAsync(string prefix, string localName, string ns)
protected internal Task WriteStartAttributeAsync(string prefix, string localName, string ns)
public Task WriteCDataAsync(string text)
public Task WriteCommentAsync(string text)
public Task WriteProcessingInstructionAsync(string target, string text)
public Task WriteEntityRefAsync(string name)
public Task WriteCharEntityAsync(char ch)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteWhitespaceAsync(string ws)
public Task WriteStringAsync(string text)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(string data)
public Task WriteBase64Async(Byte[] buffer, int index, int count)
private Task WriteIndentAsync()
private Task <>n__0(string name, string pubid, string sysid, string subset)
private Task <>n__1(string prefix, string localName, string ns)
private Task <>n__2(string prefix, string localName, string ns)
private Task <>n__3(string prefix, string localName, string ns)
private Task <>n__4(string prefix, string localName, string ns)
private Task <>n__5(string text)
private Task <>n__6(string name, string text)
}
public System.Xml.XmlValidatingReader : XmlReader {
private XmlValidatingReaderImpl impl
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public int AttributeCount
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public bool CanResolveEntity
public bool CanReadBinaryContent
public int LineNumber
public int LinePosition
public object SchemaType
public XmlReader Reader
public ValidationType ValidationType
public XmlSchemaCollection Schemas
public EntityHandling EntityHandling
public XmlResolver XmlResolver
public bool Namespaces
public Encoding Encoding
internal XmlValidatingReaderImpl Impl
internal IDtdInfo DtdInfo
public void .ctor(XmlReader reader)
public void .ctor(string xmlFragment, XmlNodeType fragType, XmlParserContext context)
public void .ctor(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context)
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool ReadAttributeValue()
public bool Read()
public bool get_EOF()
public void Close()
public ReadState get_ReadState()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public bool get_CanResolveEntity()
public void ResolveEntity()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public string ReadString()
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
public object get_SchemaType()
public XmlReader get_Reader()
public ValidationType get_ValidationType()
public void set_ValidationType(ValidationType value)
public XmlSchemaCollection get_Schemas()
public EntityHandling get_EntityHandling()
public void set_EntityHandling(EntityHandling value)
public void set_XmlResolver(XmlResolver value)
public bool get_Namespaces()
public void set_Namespaces(bool value)
public object ReadTypedValue()
public Encoding get_Encoding()
internal XmlValidatingReaderImpl get_Impl()
internal IDtdInfo get_DtdInfo()
}
internal System.Xml.XmlValidatingReaderImpl : XmlReader {
private XmlReader coreReader
private XmlTextReaderImpl coreReaderImpl
private IXmlNamespaceResolver coreReaderNSResolver
private ValidationType validationType
private BaseValidator validator
private XmlSchemaCollection schemaCollection
private bool processIdentityConstraints
private ParsingFunction parsingFunction
private ValidationEventHandling eventHandling
private XmlParserContext parserContext
private ReadContentAsBinaryHelper readBinaryHelper
private XmlReader outerReader
private XmlResolver s_tempResolver
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public ReadState ReadState
public bool EOF
public XmlNameTable NameTable
internal Encoding Encoding
public int AttributeCount
public bool CanReadBinaryContent
public bool CanResolveEntity
internal XmlReader OuterReader
public int LineNumber
public int LinePosition
internal object SchemaType
internal XmlReader Reader
internal XmlTextReaderImpl ReaderImpl
internal ValidationType ValidationType
internal XmlSchemaCollection Schemas
internal EntityHandling EntityHandling
internal XmlResolver XmlResolver
internal bool Namespaces
internal BaseValidator Validator
internal XmlNamespaceManager NamespaceManager
internal bool StandAlone
internal object SchemaTypeObject
internal object TypedValueObject
internal bool Normalization
internal IDtdInfo DtdInfo
internal void .ctor(XmlReader reader)
internal void .ctor(string xmlFragment, XmlNodeType fragType, XmlParserContext context)
internal void .ctor(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context)
internal void .ctor(XmlReader reader, ValidationEventHandler settingsEventHandler, bool processIdentityConstraints)
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public ReadState get_ReadState()
public bool get_EOF()
public XmlNameTable get_NameTable()
internal Encoding get_Encoding()
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool Read()
public void Close()
public string LookupNamespace(string prefix)
public bool ReadAttributeValue()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public bool get_CanResolveEntity()
public void ResolveEntity()
internal XmlReader get_OuterReader()
internal void set_OuterReader(XmlReader value)
internal void MoveOffEntityReference()
public string ReadString()
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
internal string LookupPrefix(string namespaceName)
internal void add_ValidationEventHandler(ValidationEventHandler value)
internal void remove_ValidationEventHandler(ValidationEventHandler value)
internal object get_SchemaType()
internal XmlReader get_Reader()
internal XmlTextReaderImpl get_ReaderImpl()
internal ValidationType get_ValidationType()
internal void set_ValidationType(ValidationType value)
internal XmlSchemaCollection get_Schemas()
internal EntityHandling get_EntityHandling()
internal void set_EntityHandling(EntityHandling value)
internal void set_XmlResolver(XmlResolver value)
internal bool get_Namespaces()
internal void set_Namespaces(bool value)
public object ReadTypedValue()
private void ParseDtdFromParserContext()
private void ValidateDtd()
private void ResolveEntityInternally()
private void SetupValidation(ValidationType valType)
private XmlResolver GetResolver()
private void ProcessCoreReaderEvent()
internal void Close(bool closeStream)
internal BaseValidator get_Validator()
internal void set_Validator(BaseValidator value)
internal XmlNamespaceManager get_NamespaceManager()
internal bool get_StandAlone()
internal void set_SchemaTypeObject(object value)
internal object get_TypedValueObject()
internal void set_TypedValueObject(object value)
internal bool get_Normalization()
internal bool AddDefaultAttribute(SchemaAttDef attdef)
internal IDtdInfo get_DtdInfo()
internal void ValidateDefaultAttributeOnUse(IDtdDefaultAttributeInfo defaultAttribute, XmlTextReaderImpl coreReader)
public Task`1<string> GetValueAsync()
public Task`1<bool> ReadAsync()
public Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count)
internal Task MoveOffEntityReferenceAsync()
public Task`1<object> ReadTypedValueAsync()
private Task ParseDtdFromParserContextAsync()
private Task ResolveEntityInternallyAsync()
}
internal System.Xml.XmlWellFormedWriter : XmlWriter {
private XmlWriter writer
private XmlRawWriter rawWriter
private IXmlNamespaceResolver predefinedNamespaces
private Namespace[] nsStack
private int nsTop
private Dictionary`2<string, int> nsHashtable
private bool useNsHashtable
private ElementScope[] elemScopeStack
private int elemTop
private AttrName[] attrStack
private int attrCount
private Dictionary`2<string, int> attrHashTable
private SpecialAttribute specAttr
private AttributeValueCache attrValueCache
private string curDeclPrefix
private State[] stateTable
private State currentState
private bool checkCharacters
private bool omitDuplNamespaces
private bool writeEndDocumentOnClose
private ConformanceLevel conformanceLevel
private bool dtdWritten
private bool xmlDeclFollows
private XmlCharType xmlCharType
private SecureStringHasher hasher
private int ElementStackInitialSize
private int NamespaceStackInitialSize
private int AttributeArrayInitialSize
private int MaxAttrDuplWalkCount
private int MaxNamespacesWalkCount
internal String[] stateName
internal String[] tokenName
private WriteState[] state2WriteState
private State[] StateTableDocument
private State[] StateTableAuto
public WriteState WriteState
public XmlWriterSettings Settings
public XmlSpace XmlSpace
public string XmlLang
internal XmlWriter InnerWriter
internal XmlRawWriter RawWriter
private bool SaveAttrValue
private bool InBase64
private bool IsClosedOrErrorState
internal void .ctor(XmlWriter writer, XmlWriterSettings settings)
public WriteState get_WriteState()
public XmlWriterSettings get_Settings()
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteStartAttribute(string prefix, string localName, string namespaceName)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteBase64(Byte[] buffer, int index, int count)
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public void WriteQualifiedName(string localName, string ns)
public void WriteValue(bool value)
public void WriteValue(DateTime value)
public void WriteValue(DateTimeOffset value)
public void WriteValue(double value)
public void WriteValue(float value)
public void WriteValue(decimal value)
public void WriteValue(int value)
public void WriteValue(long value)
public void WriteValue(string value)
public void WriteValue(object value)
public void WriteBinHex(Byte[] buffer, int index, int count)
internal XmlWriter get_InnerWriter()
internal XmlRawWriter get_RawWriter()
private bool get_SaveAttrValue()
private bool get_InBase64()
private void SetSpecialAttribute(SpecialAttribute special)
private void WriteStartDocumentImpl(XmlStandalone standalone)
private void StartFragment()
private void PushNamespaceImplicit(string prefix, string ns)
private bool PushNamespaceExplicit(string prefix, string ns)
private void AddNamespace(string prefix, string ns, NamespaceKind kind)
private void AddToNamespaceHashtable(int namespaceIndex)
private int LookupNamespaceIndex(string prefix)
private void PopNamespaces(int indexFrom, int indexTo)
private XmlException DupAttrException(string prefix, string localName)
private void AdvanceState(Token token)
private void StartElementContent()
private string GetStateName(State state)
internal string LookupNamespace(string prefix)
private string LookupLocalNamespace(string prefix)
private string GeneratePrefix()
private void CheckNCName(string ncname)
private Exception InvalidCharsException(string name, int badCharIndex)
private void ThrowInvalidStateTransition(Token token, State currentState)
private bool get_IsClosedOrErrorState()
private void AddAttribute(string prefix, string localName, string namespaceName)
private void AddToAttrHashTable(int attributeIndex)
public Task WriteStartDocumentAsync()
public Task WriteStartDocumentAsync(bool standalone)
public Task WriteEndDocumentAsync()
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
private Task TryReturnTask(Task task)
private Task _TryReturnTask(Task task)
private Task SequenceRun(Task task, Func`1<Task> nextTaskFun)
private Task _SequenceRun(Task task, Func`1<Task> nextTaskFun)
public Task WriteStartElementAsync(string prefix, string localName, string ns)
private Task WriteStartElementAsync_NoAdvanceState(string prefix, string localName, string ns)
private Task WriteStartElementAsync_NoAdvanceState(Task task, string prefix, string localName, string ns)
private void WriteStartElementAsync_FinishWrite(string prefix, string localName, string ns)
private Task WriteStartElementAsync_FinishWrite(Task t, string prefix, string localName, string ns)
public Task WriteEndElementAsync()
private Task WriteEndElementAsync_NoAdvanceState()
private Task WriteEndElementAsync_FinishWrite()
public Task WriteFullEndElementAsync()
private Task WriteFullEndElementAsync_NoAdvanceState()
protected internal Task WriteStartAttributeAsync(string prefix, string localName, string namespaceName)
private Task WriteStartAttributeAsync_NoAdvanceState(string prefix, string localName, string namespaceName)
private Task WriteStartAttributeAsync_NoAdvanceState(Task task, string prefix, string localName, string namespaceName)
protected internal Task WriteEndAttributeAsync()
private Task WriteEndAttributeAsync_NoAdvance()
private Task WriteEndAttributeAsync_SepcialAtt()
public Task WriteCDataAsync(string text)
public Task WriteCommentAsync(string text)
public Task WriteProcessingInstructionAsync(string name, string text)
public Task WriteEntityRefAsync(string name)
public Task WriteCharEntityAsync(char ch)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteWhitespaceAsync(string ws)
public Task WriteStringAsync(string text)
private Task WriteStringAsync_NoAdvanceState(string text)
private Task WriteStringAsync_NoAdvanceState(Task task, string text)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(string data)
public Task WriteBase64Async(Byte[] buffer, int index, int count)
private Task WriteBase64Async_NoAdvanceState(Task task, Byte[] buffer, int index, int count)
public Task FlushAsync()
public Task WriteQualifiedNameAsync(string localName, string ns)
public Task WriteBinHexAsync(Byte[] buffer, int index, int count)
private Task WriteStartDocumentImplAsync(XmlStandalone standalone)
private Task AdvanceStateAsync_ReturnWhenFinish(Task task, State newState)
private Task _AdvanceStateAsync_ReturnWhenFinish(Task task, State newState)
private Task AdvanceStateAsync_ContinueWhenFinish(Task task, State newState, Token token)
private Task _AdvanceStateAsync_ContinueWhenFinish(Task task, State newState, Token token)
private Task AdvanceStateAsync(Token token)
private Task StartElementContentAsync_WithNS()
private Task StartElementContentAsync()
private Task <>n__0(Byte[] buffer, int index, int count)
}
public System.Xml.XmlWhitespace : XmlCharacterData {
public string Name
public string LocalName
public XmlNodeType NodeType
public XmlNode ParentNode
public string Value
internal XPathNodeType XPNodeType
internal bool IsText
public XmlNode PreviousText
protected internal void .ctor(string strData, XmlDocument doc)
public string get_Name()
public string get_LocalName()
public XmlNodeType get_NodeType()
public XmlNode get_ParentNode()
public string get_Value()
public void set_Value(string value)
public XmlNode CloneNode(bool deep)
public void WriteTo(XmlWriter w)
public void WriteContentTo(XmlWriter w)
internal XPathNodeType get_XPNodeType()
internal bool get_IsText()
public XmlNode get_PreviousText()
}
internal System.Xml.XmlWrappingReader : XmlReader {
protected XmlReader reader
protected IXmlLineInfo readerAsIXmlLineInfo
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public XmlSpace XmlSpace
public string XmlLang
public Type ValueType
public int AttributeCount
public bool EOF
public ReadState ReadState
public bool HasAttributes
public XmlNameTable NameTable
public bool CanResolveEntity
public IXmlSchemaInfo SchemaInfo
public char QuoteChar
public int LineNumber
public int LinePosition
internal IDtdInfo DtdInfo
internal void .ctor(XmlReader baseReader)
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public Type get_ValueType()
public int get_AttributeCount()
public bool get_EOF()
public ReadState get_ReadState()
public bool get_HasAttributes()
public XmlNameTable get_NameTable()
public bool get_CanResolveEntity()
public IXmlSchemaInfo get_SchemaInfo()
public char get_QuoteChar()
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool Read()
public void Close()
public void Skip()
public string LookupNamespace(string prefix)
public void ResolveEntity()
public bool ReadAttributeValue()
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
internal IDtdInfo get_DtdInfo()
public Task`1<string> GetValueAsync()
public Task`1<bool> ReadAsync()
public Task SkipAsync()
}
internal System.Xml.XmlWrappingWriter : XmlWriter {
protected XmlWriter writer
public XmlWriterSettings Settings
public WriteState WriteState
public XmlSpace XmlSpace
public string XmlLang
internal void .ctor(XmlWriter baseWriter)
public XmlWriterSettings get_Settings()
public WriteState get_WriteState()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteBase64(Byte[] buffer, int index, int count)
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void WriteValue(object value)
public void WriteValue(string value)
public void WriteValue(bool value)
public void WriteValue(DateTime value)
public void WriteValue(DateTimeOffset value)
public void WriteValue(double value)
public void WriteValue(float value)
public void WriteValue(decimal value)
public void WriteValue(int value)
public void WriteValue(long value)
protected void Dispose(bool disposing)
public Task WriteStartDocumentAsync()
public Task WriteStartDocumentAsync(bool standalone)
public Task WriteEndDocumentAsync()
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
public Task WriteStartElementAsync(string prefix, string localName, string ns)
public Task WriteEndElementAsync()
public Task WriteFullEndElementAsync()
protected internal Task WriteStartAttributeAsync(string prefix, string localName, string ns)
protected internal Task WriteEndAttributeAsync()
public Task WriteCDataAsync(string text)
public Task WriteCommentAsync(string text)
public Task WriteProcessingInstructionAsync(string name, string text)
public Task WriteEntityRefAsync(string name)
public Task WriteCharEntityAsync(char ch)
public Task WriteWhitespaceAsync(string ws)
public Task WriteStringAsync(string text)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(string data)
public Task WriteBase64Async(Byte[] buffer, int index, int count)
public Task FlushAsync()
}
public System.Xml.XmlWriter : object {
private Char[] writeNodeBuffer
private int WriteNodeBufferSize
public XmlWriterSettings Settings
public WriteState WriteState
public XmlSpace XmlSpace
public string XmlLang
public XmlWriterSettings get_Settings()
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string localName, string ns)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteStartElement(string localName)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteAttributeString(string localName, string ns, string value)
public void WriteAttributeString(string localName, string value)
public void WriteAttributeString(string prefix, string localName, string ns, string value)
public void WriteStartAttribute(string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteStartAttribute(string localName)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public WriteState get_WriteState()
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public void WriteNmToken(string name)
public void WriteName(string name)
public void WriteQualifiedName(string localName, string ns)
public void WriteValue(object value)
public void WriteValue(string value)
public void WriteValue(bool value)
public void WriteValue(DateTime value)
public void WriteValue(DateTimeOffset value)
public void WriteValue(double value)
public void WriteValue(float value)
public void WriteValue(decimal value)
public void WriteValue(int value)
public void WriteValue(long value)
public void WriteAttributes(XmlReader reader, bool defattr)
public void WriteNode(XmlReader reader, bool defattr)
public void WriteNode(XPathNavigator navigator, bool defattr)
public void WriteElementString(string localName, string value)
public void WriteElementString(string localName, string ns, string value)
public void WriteElementString(string prefix, string localName, string ns, string value)
public void Dispose()
protected void Dispose(bool disposing)
private void WriteLocalNamespaces(XPathNavigator nsNav)
public XmlWriter Create(string outputFileName)
public XmlWriter Create(string outputFileName, XmlWriterSettings settings)
public XmlWriter Create(Stream output)
public XmlWriter Create(Stream output, XmlWriterSettings settings)
public XmlWriter Create(TextWriter output)
public XmlWriter Create(TextWriter output, XmlWriterSettings settings)
public XmlWriter Create(StringBuilder output)
public XmlWriter Create(StringBuilder output, XmlWriterSettings settings)
public XmlWriter Create(XmlWriter output)
public XmlWriter Create(XmlWriter output, XmlWriterSettings settings)
public Task WriteStartDocumentAsync()
public Task WriteStartDocumentAsync(bool standalone)
public Task WriteEndDocumentAsync()
public Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset)
public Task WriteStartElementAsync(string prefix, string localName, string ns)
public Task WriteEndElementAsync()
public Task WriteFullEndElementAsync()
public Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value)
private Task WriteAttributeStringAsyncHelper(Task task, string value)
protected internal Task WriteStartAttributeAsync(string prefix, string localName, string ns)
protected internal Task WriteEndAttributeAsync()
public Task WriteCDataAsync(string text)
public Task WriteCommentAsync(string text)
public Task WriteProcessingInstructionAsync(string name, string text)
public Task WriteEntityRefAsync(string name)
public Task WriteCharEntityAsync(char ch)
public Task WriteWhitespaceAsync(string ws)
public Task WriteStringAsync(string text)
public Task WriteSurrogateCharEntityAsync(char lowChar, char highChar)
public Task WriteCharsAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(Char[] buffer, int index, int count)
public Task WriteRawAsync(string data)
public Task WriteBase64Async(Byte[] buffer, int index, int count)
public Task WriteBinHexAsync(Byte[] buffer, int index, int count)
public Task FlushAsync()
public Task WriteNmTokenAsync(string name)
public Task WriteNameAsync(string name)
public Task WriteQualifiedNameAsync(string localName, string ns)
public Task WriteAttributesAsync(XmlReader reader, bool defattr)
public Task WriteNodeAsync(XmlReader reader, bool defattr)
internal Task WriteNodeAsync_CallSyncReader(XmlReader reader, bool defattr)
internal Task WriteNodeAsync_CallAsyncReader(XmlReader reader, bool defattr)
public Task WriteNodeAsync(XPathNavigator navigator, bool defattr)
public Task WriteElementStringAsync(string prefix, string localName, string ns, string value)
private Task WriteLocalNamespacesAsync(XPathNavigator nsNav)
}
public System.Xml.XmlWriterSettings : object {
private bool useAsync
private Encoding encoding
private bool omitXmlDecl
private NewLineHandling newLineHandling
private string newLineChars
private TriState indent
private string indentChars
private bool newLineOnAttributes
private bool closeOutput
private NamespaceHandling namespaceHandling
private ConformanceLevel conformanceLevel
private bool checkCharacters
private bool writeEndDocumentOnClose
private XmlOutputMethod outputMethod
private List`1<XmlQualifiedName> cdataSections
private bool doNotEscapeUriAttributes
private bool mergeCDataSections
private string mediaType
private string docTypeSystem
private string docTypePublic
private XmlStandalone standalone
private bool autoXmlDecl
private bool isReadOnly
public bool Async
public Encoding Encoding
public bool OmitXmlDeclaration
public NewLineHandling NewLineHandling
public string NewLineChars
public bool Indent
public string IndentChars
public bool NewLineOnAttributes
public bool CloseOutput
public ConformanceLevel ConformanceLevel
public bool CheckCharacters
public NamespaceHandling NamespaceHandling
public bool WriteEndDocumentOnClose
public XmlOutputMethod OutputMethod
internal List`1<XmlQualifiedName> CDataSectionElements
public bool DoNotEscapeUriAttributes
internal bool MergeCDataSections
internal string MediaType
internal string DocTypeSystem
internal string DocTypePublic
internal XmlStandalone Standalone
internal bool AutoXmlDeclaration
internal TriState IndentInternal
internal bool IsQuerySpecific
internal bool ReadOnly
public bool get_Async()
public void set_Async(bool value)
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
public bool get_OmitXmlDeclaration()
public void set_OmitXmlDeclaration(bool value)
public NewLineHandling get_NewLineHandling()
public void set_NewLineHandling(NewLineHandling value)
public string get_NewLineChars()
public void set_NewLineChars(string value)
public bool get_Indent()
public void set_Indent(bool value)
public string get_IndentChars()
public void set_IndentChars(string value)
public bool get_NewLineOnAttributes()
public void set_NewLineOnAttributes(bool value)
public bool get_CloseOutput()
public void set_CloseOutput(bool value)
public ConformanceLevel get_ConformanceLevel()
public void set_ConformanceLevel(ConformanceLevel value)
public bool get_CheckCharacters()
public void set_CheckCharacters(bool value)
public NamespaceHandling get_NamespaceHandling()
public void set_NamespaceHandling(NamespaceHandling value)
public bool get_WriteEndDocumentOnClose()
public void set_WriteEndDocumentOnClose(bool value)
public XmlOutputMethod get_OutputMethod()
internal void set_OutputMethod(XmlOutputMethod value)
public void Reset()
public XmlWriterSettings Clone()
internal List`1<XmlQualifiedName> get_CDataSectionElements()
public bool get_DoNotEscapeUriAttributes()
public void set_DoNotEscapeUriAttributes(bool value)
internal bool get_MergeCDataSections()
internal void set_MergeCDataSections(bool value)
internal string get_MediaType()
internal void set_MediaType(string value)
internal string get_DocTypeSystem()
internal void set_DocTypeSystem(string value)
internal string get_DocTypePublic()
internal void set_DocTypePublic(string value)
internal XmlStandalone get_Standalone()
internal void set_Standalone(XmlStandalone value)
internal bool get_AutoXmlDeclaration()
internal void set_AutoXmlDeclaration(bool value)
internal TriState get_IndentInternal()
internal void set_IndentInternal(TriState value)
internal bool get_IsQuerySpecific()
internal XmlWriter CreateWriter(string outputFileName)
internal XmlWriter CreateWriter(Stream output)
internal XmlWriter CreateWriter(TextWriter output)
internal XmlWriter CreateWriter(XmlWriter output)
internal bool get_ReadOnly()
internal void set_ReadOnly(bool value)
private void CheckReadOnly(string propertyName)
private void Initialize()
private XmlWriter AddConformanceWrapper(XmlWriter baseWriter)
internal void GetObjectData(XmlQueryDataWriter writer)
internal void .ctor(XmlQueryDataReader reader)
}
public System.Xml.XmlXapResolver : XmlResolver {
public object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn)
public void RegisterApplicationResourceStreamResolver(IApplicationResourceStreamResolver appStreamResolver)
}
public System.Xml.XPath.IXPathNavigable {
public XPathNavigator CreateNavigator()
}
public System.Xml.XPath.XmlCaseOrder : Enum {
public int value__
public XmlCaseOrder None
public XmlCaseOrder UpperFirst
public XmlCaseOrder LowerFirst
}
public System.Xml.XPath.XmlDataType : Enum {
public int value__
public XmlDataType Text
public XmlDataType Number
}
internal System.Xml.XPath.XmlEmptyNavigator : XPathNavigator {
private XmlEmptyNavigator modreq(System.Runtime.CompilerServices.IsVolatile) singleton
public XmlEmptyNavigator Singleton
public XPathNodeType NodeType
public string NamespaceURI
public string LocalName
public string Name
public string Prefix
public string BaseURI
public string Value
public bool IsEmptyElement
public string XmlLang
public bool HasAttributes
public bool HasChildren
public XmlNameTable NameTable
public XmlEmptyNavigator get_Singleton()
public XPathNodeType get_NodeType()
public string get_NamespaceURI()
public string get_LocalName()
public string get_Name()
public string get_Prefix()
public string get_BaseURI()
public string get_Value()
public bool get_IsEmptyElement()
public string get_XmlLang()
public bool get_HasAttributes()
public bool get_HasChildren()
public XmlNameTable get_NameTable()
public bool MoveToFirstChild()
public void MoveToRoot()
public bool MoveToNext()
public bool MoveToPrevious()
public bool MoveToFirst()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToId(string id)
public string GetAttribute(string localName, string namespaceName)
public bool MoveToAttribute(string localName, string namespaceName)
public string GetNamespace(string name)
public bool MoveToNamespace(string prefix)
public bool MoveToFirstNamespace(XPathNamespaceScope scope)
public bool MoveToNextNamespace(XPathNamespaceScope scope)
public bool MoveToParent()
public bool MoveTo(XPathNavigator other)
public XmlNodeOrder ComparePosition(XPathNavigator other)
public bool IsSamePosition(XPathNavigator other)
public XPathNavigator Clone()
}
public System.Xml.XPath.XmlSortOrder : Enum {
public int value__
public XmlSortOrder Ascending
public XmlSortOrder Descending
}
public System.Xml.XPath.XPathDocument : object {
private XPathNode[] pageText
private XPathNode[] pageRoot
private XPathNode[] pageXmlNmsp
private int idxText
private int idxRoot
private int idxXmlNmsp
private XmlNameTable nameTable
private bool hasLineInfo
private Dictionary`2<XPathNodeRef, XPathNodeRef> mapNmsp
private Dictionary`2<string, XPathNodeRef> idValueMap
internal XmlNameTable NameTable
internal bool HasLineInfo
internal void .ctor(XmlNameTable nameTable)
public void .ctor(XmlReader reader)
public void .ctor(XmlReader reader, XmlSpace space)
public void .ctor(TextReader textReader)
public void .ctor(Stream stream)
public void .ctor(string uri)
public void .ctor(string uri, XmlSpace space)
internal XmlRawWriter LoadFromWriter(LoadFlags flags, string baseUri)
internal void LoadFromReader(XmlReader reader, XmlSpace space)
public XPathNavigator CreateNavigator()
internal XmlNameTable get_NameTable()
internal bool get_HasLineInfo()
internal int GetCollapsedTextNode(XPathNode[]& pageText)
internal void SetCollapsedTextNode(XPathNode[] pageText, int idxText)
internal int GetRootNode(XPathNode[]& pageRoot)
internal void SetRootNode(XPathNode[] pageRoot, int idxRoot)
internal int GetXmlNamespaceNode(XPathNode[]& pageXmlNmsp)
internal void SetXmlNamespaceNode(XPathNode[] pageXmlNmsp, int idxXmlNmsp)
internal void AddNamespace(XPathNode[] pageElem, int idxElem, XPathNode[] pageNmsp, int idxNmsp)
internal int LookupNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp)
internal void AddIdElement(string id, XPathNode[] pageElem, int idxElem)
internal int LookupIdElement(string id, XPathNode[]& pageElem)
private XmlTextReaderImpl SetupReader(XmlTextReaderImpl reader)
}
public System.Xml.XPath.XPathException : SystemException {
private string res
private String[] args
private string message
public string Message
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
internal XPathException Create(string res)
internal XPathException Create(string res, string arg)
internal XPathException Create(string res, string arg, string arg2)
internal XPathException Create(string res, string arg, Exception innerException)
private void .ctor(string res, String[] args)
private void .ctor(string res, String[] args, Exception inner)
private string CreateMessage(string res, String[] args)
public string get_Message()
}
public System.Xml.XPath.XPathExpression : object {
public string Expression
public XPathResultType ReturnType
public string get_Expression()
public void AddSort(object expr, IComparer comparer)
public void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType)
public XPathExpression Clone()
public void SetContext(XmlNamespaceManager nsManager)
public void SetContext(IXmlNamespaceResolver nsResolver)
public XPathResultType get_ReturnType()
public XPathExpression Compile(string xpath)
public XPathExpression Compile(string xpath, IXmlNamespaceResolver nsResolver)
private void PrintQuery(XmlWriter w)
}
public System.Xml.XPath.XPathItem : object {
public bool IsNode
public XmlSchemaType XmlType
public string Value
public object TypedValue
public Type ValueType
public bool ValueAsBoolean
public DateTime ValueAsDateTime
public double ValueAsDouble
public int ValueAsInt
public long ValueAsLong
public bool get_IsNode()
public XmlSchemaType get_XmlType()
public string get_Value()
public object get_TypedValue()
public Type get_ValueType()
public bool get_ValueAsBoolean()
public DateTime get_ValueAsDateTime()
public double get_ValueAsDouble()
public int get_ValueAsInt()
public long get_ValueAsLong()
public object ValueAs(Type returnType)
public object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver)
}
public System.Xml.XPath.XPathNamespaceScope : Enum {
public int value__
public XPathNamespaceScope All
public XPathNamespaceScope ExcludeXml
public XPathNamespaceScope Local
}
public System.Xml.XPath.XPathNavigator : XPathItem {
internal XPathNavigatorKeyComparer comparer
internal Char[] NodeTypeLetter
internal Char[] UniqueIdTbl
internal int AllMask
internal int NoAttrNmspMask
internal int TextMask
internal Int32[] ContentKindMasks
public bool IsNode
public XmlSchemaType XmlType
public object TypedValue
public Type ValueType
public bool ValueAsBoolean
public DateTime ValueAsDateTime
public double ValueAsDouble
public int ValueAsInt
public long ValueAsLong
public XmlNameTable NameTable
public IEqualityComparer NavigatorComparer
public XPathNodeType NodeType
public string LocalName
public string Name
public string NamespaceURI
public string Prefix
public string BaseURI
public bool IsEmptyElement
public string XmlLang
public object UnderlyingObject
public bool HasAttributes
public bool HasChildren
public IXmlSchemaInfo SchemaInfo
public bool CanEdit
public string OuterXml
public string InnerXml
internal UInt32 IndexInParent
internal string UniqueId
private object debuggerDisplayProxy
public string ToString()
public bool get_IsNode()
public XmlSchemaType get_XmlType()
public void SetValue(string value)
public object get_TypedValue()
public void SetTypedValue(object typedValue)
public Type get_ValueType()
public bool get_ValueAsBoolean()
public DateTime get_ValueAsDateTime()
public double get_ValueAsDouble()
public int get_ValueAsInt()
public long get_ValueAsLong()
public object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver)
private object System.ICloneable.Clone()
public XPathNavigator CreateNavigator()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public string LookupPrefix(string namespaceURI)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public IEqualityComparer get_NavigatorComparer()
public XPathNavigator Clone()
public XPathNodeType get_NodeType()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public string get_Prefix()
public string get_BaseURI()
public bool get_IsEmptyElement()
public string get_XmlLang()
public XmlReader ReadSubtree()
public void WriteSubtree(XmlWriter writer)
public object get_UnderlyingObject()
public bool get_HasAttributes()
public string GetAttribute(string localName, string namespaceURI)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public string GetNamespace(string name)
public bool MoveToNamespace(string name)
public bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToNextNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToFirstNamespace()
public bool MoveToNextNamespace()
public bool MoveToNext()
public bool MoveToPrevious()
public bool MoveToFirst()
public bool MoveToFirstChild()
public bool MoveToParent()
public void MoveToRoot()
public bool MoveTo(XPathNavigator other)
public bool MoveToId(string id)
public bool MoveToChild(string localName, string namespaceURI)
public bool MoveToChild(XPathNodeType type)
public bool MoveToFollowing(string localName, string namespaceURI)
public bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end)
public bool MoveToFollowing(XPathNodeType type)
public bool MoveToFollowing(XPathNodeType type, XPathNavigator end)
public bool MoveToNext(string localName, string namespaceURI)
public bool MoveToNext(XPathNodeType type)
public bool get_HasChildren()
public bool IsSamePosition(XPathNavigator other)
public bool IsDescendant(XPathNavigator nav)
public XmlNodeOrder ComparePosition(XPathNavigator nav)
public IXmlSchemaInfo get_SchemaInfo()
public bool CheckValidity(XmlSchemaSet schemas, ValidationEventHandler validationEventHandler)
private XmlReader GetValidatingReader(XmlReader reader, XmlSchemaSet schemas, ValidationEventHandler validationEvent, XmlSchemaType schemaType, XmlSchemaElement schemaElement, XmlSchemaAttribute schemaAttribute)
public XPathExpression Compile(string xpath)
public XPathNavigator SelectSingleNode(string xpath)
public XPathNavigator SelectSingleNode(string xpath, IXmlNamespaceResolver resolver)
public XPathNavigator SelectSingleNode(XPathExpression expression)
public XPathNodeIterator Select(string xpath)
public XPathNodeIterator Select(string xpath, IXmlNamespaceResolver resolver)
public XPathNodeIterator Select(XPathExpression expr)
public object Evaluate(string xpath)
public object Evaluate(string xpath, IXmlNamespaceResolver resolver)
public object Evaluate(XPathExpression expr)
public object Evaluate(XPathExpression expr, XPathNodeIterator context)
public bool Matches(XPathExpression expr)
public bool Matches(string xpath)
public XPathNodeIterator SelectChildren(XPathNodeType type)
public XPathNodeIterator SelectChildren(string name, string namespaceURI)
public XPathNodeIterator SelectAncestors(XPathNodeType type, bool matchSelf)
public XPathNodeIterator SelectAncestors(string name, string namespaceURI, bool matchSelf)
public XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf)
public XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf)
public bool get_CanEdit()
public XmlWriter PrependChild()
public XmlWriter AppendChild()
public XmlWriter InsertAfter()
public XmlWriter InsertBefore()
public XmlWriter CreateAttributes()
public XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace)
public void ReplaceSelf(string newNode)
public void ReplaceSelf(XmlReader newNode)
public void ReplaceSelf(XPathNavigator newNode)
public string get_OuterXml()
public void set_OuterXml(string value)
public string get_InnerXml()
public void set_InnerXml(string value)
public void AppendChild(string newChild)
public void AppendChild(XmlReader newChild)
public void AppendChild(XPathNavigator newChild)
public void PrependChild(string newChild)
public void PrependChild(XmlReader newChild)
public void PrependChild(XPathNavigator newChild)
public void InsertBefore(string newSibling)
public void InsertBefore(XmlReader newSibling)
public void InsertBefore(XPathNavigator newSibling)
public void InsertAfter(string newSibling)
public void InsertAfter(XmlReader newSibling)
public void InsertAfter(XPathNavigator newSibling)
public void DeleteRange(XPathNavigator lastSiblingToDelete)
public void DeleteSelf()
public void PrependChildElement(string prefix, string localName, string namespaceURI, string value)
public void AppendChildElement(string prefix, string localName, string namespaceURI, string value)
public void InsertElementBefore(string prefix, string localName, string namespaceURI, string value)
public void InsertElementAfter(string prefix, string localName, string namespaceURI, string value)
public void CreateAttribute(string prefix, string localName, string namespaceURI, string value)
internal bool MoveToPrevious(string localName, string namespaceURI)
internal bool MoveToPrevious(XPathNodeType type)
internal bool MoveToNonDescendant()
internal UInt32 get_IndexInParent()
internal string get_UniqueId()
private XPathExpression CompileMatchPattern(string xpath)
private int GetDepth(XPathNavigator nav)
private XmlNodeOrder CompareSiblings(XPathNavigator n1, XPathNavigator n2)
internal XmlNamespaceManager GetNamespaces(IXmlNamespaceResolver resolver)
internal int GetContentKindMask(XPathNodeType type)
internal int GetKindMask(XPathNodeType type)
internal bool IsText(XPathNodeType type)
private bool IsValidChildType(XPathNodeType type)
private bool IsValidSiblingType(XPathNodeType type)
private XmlReader CreateReader()
private XmlReader CreateContextReader(string xml, bool fromCurrentNode)
internal void BuildSubtree(XmlReader reader, XmlWriter writer)
private object get_debuggerDisplayProxy()
}
internal System.Xml.XPath.XPathNavigatorKeyComparer : object {
private bool System.Collections.IEqualityComparer.Equals(object obj1, object obj2)
private int System.Collections.IEqualityComparer.GetHashCode(object obj)
}
internal System.Xml.XPath.XPathNavigatorReader : XmlReader {
private XPathNavigator nav
private XPathNavigator navToRead
private int depth
private State state
private XmlNodeType nodeType
private int attrCount
private bool readEntireDocument
protected IXmlLineInfo lineInfo
protected IXmlSchemaInfo schemaInfo
private ReadContentAsBinaryHelper readBinaryHelper
private State savedState
internal string space
internal XmlNodeType[] convertFromXPathNodeType
internal object UnderlyingObject
protected bool IsReading
internal XmlNamespaceManager NamespaceManager
public XmlNameTable NameTable
public XmlReaderSettings Settings
public IXmlSchemaInfo SchemaInfo
public Type ValueType
public XmlNodeType NodeType
public string NamespaceURI
public string LocalName
public string Prefix
public string BaseURI
public bool IsEmptyElement
public XmlSpace XmlSpace
public string XmlLang
public bool HasValue
public string Value
public int AttributeCount
public bool EOF
public ReadState ReadState
public bool CanReadBinaryContent
public int Depth
internal XmlNodeType ToXmlNodeType(XPathNodeType typ)
internal object get_UnderlyingObject()
public XPathNavigatorReader Create(XPathNavigator navToRead)
protected void .ctor(XPathNavigator navToRead, IXmlLineInfo xli, IXmlSchemaInfo xsi)
protected bool get_IsReading()
internal XmlNamespaceManager get_NamespaceManager()
public XmlNameTable get_NameTable()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
public XmlReaderSettings get_Settings()
public IXmlSchemaInfo get_SchemaInfo()
public Type get_ValueType()
public XmlNodeType get_NodeType()
public string get_NamespaceURI()
public string get_LocalName()
public string get_Prefix()
public string get_BaseURI()
public bool get_IsEmptyElement()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public bool get_HasValue()
public string get_Value()
private XPathNavigator GetElemNav()
private XPathNavigator GetElemNav(Int32& depth)
private void MoveToAttr(XPathNavigator nav, int depth)
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
private string GetNamespaceByIndex(XPathNavigator nav, int index, Int32& count)
public string GetAttribute(int index)
public bool MoveToAttribute(string localName, string namespaceName)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToAttribute(string name)
public bool MoveToElement()
public bool get_EOF()
public ReadState get_ReadState()
public void ResolveEntity()
public bool ReadAttributeValue()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public string LookupNamespace(string prefix)
public int get_Depth()
public bool Read()
public void Close()
private void SetEOF()
}
internal System.Xml.XPath.XPathNavigatorReaderWithSI : XPathNavigatorReader {
public XmlSchemaValidity Validity
public bool IsDefault
public bool IsNil
public XmlSchemaSimpleType MemberType
public XmlSchemaType SchemaType
public XmlSchemaElement SchemaElement
public XmlSchemaAttribute SchemaAttribute
internal void .ctor(XPathNavigator navToRead, IXmlLineInfo xli, IXmlSchemaInfo xsi)
public XmlSchemaValidity get_Validity()
public bool get_IsDefault()
public bool get_IsNil()
public XmlSchemaSimpleType get_MemberType()
public XmlSchemaType get_SchemaType()
public XmlSchemaElement get_SchemaElement()
public XmlSchemaAttribute get_SchemaAttribute()
}
public System.Xml.XPath.XPathNodeIterator : object {
internal int count
public XPathNavigator Current
public int CurrentPosition
public int Count
private object debuggerDisplayProxy
private object System.ICloneable.Clone()
public XPathNodeIterator Clone()
public bool MoveNext()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public int get_Count()
public IEnumerator GetEnumerator()
private object get_debuggerDisplayProxy()
}
public System.Xml.XPath.XPathNodeType : Enum {
public int value__
public XPathNodeType Root
public XPathNodeType Element
public XPathNodeType Attribute
public XPathNodeType Namespace
public XPathNodeType Text
public XPathNodeType SignificantWhitespace
public XPathNodeType Whitespace
public XPathNodeType ProcessingInstruction
public XPathNodeType Comment
public XPathNodeType All
}
public System.Xml.XPath.XPathResultType : Enum {
public int value__
public XPathResultType Number
public XPathResultType String
public XPathResultType Boolean
public XPathResultType NodeSet
public XPathResultType Navigator
public XPathResultType Any
public XPathResultType Error
}
internal System.Xml.XPathNodeList : XmlNodeList {
private List`1<XmlNode> list
private XPathNodeIterator nodeIterator
private bool done
private Object[] nullparams
public int Count
public void .ctor(XPathNodeIterator nodeIterator)
public int get_Count()
private XmlNode GetNode(XPathNavigator n)
internal int ReadUntil(int index)
public XmlNode Item(int index)
public IEnumerator GetEnumerator()
}
internal System.Xml.XsdCachingReader : XmlReader {
private XmlReader coreReader
private XmlNameTable coreReaderNameTable
private ValidatingReaderNodeData[] contentEvents
private ValidatingReaderNodeData[] attributeEvents
private ValidatingReaderNodeData cachedNode
private CachingReaderState cacheState
private int contentIndex
private int attributeCount
private bool returnOriginalStringValues
private CachingEventHandler cacheHandler
private int currentAttrIndex
private int currentContentIndex
private bool readAhead
private IXmlLineInfo lineInfo
private ValidatingReaderNodeData textNode
private int InitialAttributeCount
private int InitialContentCount
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public int AttributeCount
public string Item
public string Item
public string Item
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
internal void .ctor(XmlReader reader, IXmlLineInfo lineInfo, CachingEventHandler handlerMethod)
private void Init()
internal void Reset(XmlReader reader)
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string GetAttribute(int i)
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string namespaceURI)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool Read()
internal ValidatingReaderNodeData RecordTextNode(string textValue, string originalStringValue, int depth, int lineNo, int linePos)
internal void SwitchTextNodeAndEndElement(string textValue, string originalStringValue)
internal void RecordEndElementNode()
internal string ReadOriginalContentAsString()
public bool get_EOF()
public void Close()
public ReadState get_ReadState()
public void Skip()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public void ResolveEntity()
public bool ReadAttributeValue()
private bool System.Xml.IXmlLineInfo.HasLineInfo()
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
internal void SetToReplayMode()
internal XmlReader GetCoreReader()
internal IXmlLineInfo GetLineInfo()
private void ClearAttributesInfo()
private ValidatingReaderNodeData AddAttribute(int attIndex)
private ValidatingReaderNodeData AddContent(XmlNodeType nodeType)
private void RecordAttributes()
private int GetAttributeIndexWithoutPrefix(string name)
private int GetAttributeIndexWithPrefix(string name)
private ValidatingReaderNodeData CreateDummyTextNode(string attributeValue, int depth)
public Task`1<string> GetValueAsync()
public Task`1<bool> ReadAsync()
public Task SkipAsync()
internal Task SetToReplayModeAsync()
}
internal System.Xml.XsdValidatingReader : XmlReader {
private XmlReader coreReader
private IXmlNamespaceResolver coreReaderNSResolver
private IXmlNamespaceResolver thisNSResolver
private XmlSchemaValidator validator
private XmlResolver xmlResolver
private ValidationEventHandler validationEvent
private ValidatingReaderState validationState
private XmlValueGetter valueGetter
private XmlNamespaceManager nsManager
private bool manageNamespaces
private bool processInlineSchema
private bool replayCache
private ValidatingReaderNodeData cachedNode
private AttributePSVIInfo attributePSVI
private int attributeCount
private int coreReaderAttributeCount
private int currentAttrIndex
private AttributePSVIInfo[] attributePSVINodes
private ArrayList defaultAttributes
private Parser inlineSchemaParser
private object atomicValue
private XmlSchemaInfo xmlSchemaInfo
private string originalAtomicValueString
private XmlNameTable coreReaderNameTable
private XsdCachingReader cachingReader
private ValidatingReaderNodeData textNode
private string NsXmlNs
private string NsXs
private string NsXsi
private string XsiType
private string XsiNil
private string XsdSchema
private string XsiSchemaLocation
private string XsiNoNamespaceSchemaLocation
private XmlCharType xmlCharType
private IXmlLineInfo lineInfo
private ReadContentAsBinaryHelper readBinaryHelper
private ValidatingReaderState savedState
private int InitialAttributeCount
private Type modreq(System.Runtime.CompilerServices.IsVolatile) TypeOfString
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public IXmlSchemaInfo SchemaInfo
public Type ValueType
public int AttributeCount
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public bool CanReadBinaryContent
private bool System.Xml.Schema.IXmlSchemaInfo.IsDefault
private bool System.Xml.Schema.IXmlSchemaInfo.IsNil
private XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.Validity
private XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.MemberType
private XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.SchemaType
private XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.SchemaElement
private XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute
public int LineNumber
public int LinePosition
private XmlSchemaType ElementXmlType
private XmlSchemaType AttributeXmlType
private XmlSchemaInfo AttributeSchemaInfo
internal void .ctor(XmlReader reader, XmlResolver xmlResolver, XmlReaderSettings readerSettings, XmlSchemaObject partialValidationType)
internal void .ctor(XmlReader reader, XmlResolver xmlResolver, XmlReaderSettings readerSettings)
private void Init()
private void SetupValidator(XmlReaderSettings readerSettings, XmlReader reader, XmlSchemaObject partialValidationType)
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public IXmlSchemaInfo get_SchemaInfo()
public Type get_ValueType()
public object ReadContentAsObject()
public bool ReadContentAsBoolean()
public DateTime ReadContentAsDateTime()
public double ReadContentAsDouble()
public float ReadContentAsFloat()
public decimal ReadContentAsDecimal()
public int ReadContentAsInt()
public long ReadContentAsLong()
public string ReadContentAsString()
public object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public object ReadElementContentAsObject()
public bool ReadElementContentAsBoolean()
public DateTime ReadElementContentAsDateTime()
public double ReadElementContentAsDouble()
public float ReadElementContentAsFloat()
public decimal ReadElementContentAsDecimal()
public int ReadElementContentAsInt()
public long ReadElementContentAsLong()
public string ReadElementContentAsString()
public object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool Read()
public bool get_EOF()
public void Close()
public ReadState get_ReadState()
public void Skip()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public void ResolveEntity()
public bool ReadAttributeValue()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
private bool System.Xml.Schema.IXmlSchemaInfo.get_IsDefault()
private bool System.Xml.Schema.IXmlSchemaInfo.get_IsNil()
private XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.get_Validity()
private XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.get_MemberType()
private XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.get_SchemaType()
private XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.get_SchemaElement()
private XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.get_SchemaAttribute()
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName)
private object GetStringValue()
private XmlSchemaType get_ElementXmlType()
private XmlSchemaType get_AttributeXmlType()
private XmlSchemaInfo get_AttributeSchemaInfo()
private void ProcessReaderEvent()
private void ProcessElementEvent()
private void ProcessEndElementEvent()
private void ValidateAttributes()
private void ClearAttributesInfo()
private AttributePSVIInfo GetAttributePSVI(string name)
private AttributePSVIInfo GetAttributePSVI(string localName, string ns)
private ValidatingReaderNodeData GetDefaultAttribute(string name, bool updatePosition)
private ValidatingReaderNodeData GetDefaultAttribute(string attrLocalName, string ns, bool updatePosition)
private AttributePSVIInfo AddAttributePSVI(int attIndex)
private bool IsXSDRoot(string localName, string ns)
private void ProcessInlineSchema()
private object InternalReadContentAsObject()
private object InternalReadContentAsObject(bool unwrapTypedValue)
private object InternalReadContentAsObject(bool unwrapTypedValue, String& originalStringValue)
private object InternalReadElementContentAsObject(XmlSchemaType& xmlType)
private object InternalReadElementContentAsObject(XmlSchemaType& xmlType, bool unwrapTypedValue)
private object InternalReadElementContentAsObject(XmlSchemaType& xmlType, bool unwrapTypedValue, String& originalString)
private object ReadTillEndElement()
private void SwitchReader()
private void ReadAheadForMemberType()
private void GetIsDefault()
private void GetMemberType()
private object ReturnBoxedValue(object typedValue, XmlSchemaType xmlType, bool unWrap)
private XsdCachingReader GetCachingReader()
internal ValidatingReaderNodeData CreateDummyTextNode(string attributeValue, int depth)
internal void CachingCallBack(XsdCachingReader cachingReader)
private string GetOriginalAtomicValueStringOfElement()
public Task`1<string> GetValueAsync()
public Task`1<object> ReadContentAsObjectAsync()
public Task`1<string> ReadContentAsStringAsync()
public Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
public Task`1<object> ReadElementContentAsObjectAsync()
public Task`1<string> ReadElementContentAsStringAsync()
public Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
private Task`1<bool> ReadAsync_Read(Task`1<bool> task)
private Task`1<bool> _ReadAsync_Read(Task`1<bool> task)
private Task`1<bool> ReadAsync_ReadAhead(Task task)
private Task`1<bool> _ReadAsync_ReadAhead(Task task)
public Task`1<bool> ReadAsync()
public Task SkipAsync()
public Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count)
public Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count)
private Task ProcessReaderEventAsync()
private Task ProcessElementEventAsync()
private Task ProcessEndElementEventAsync()
private Task ProcessInlineSchemaAsync()
private Task`1<object> InternalReadContentAsObjectAsync()
private Task`1<object> InternalReadContentAsObjectAsync(bool unwrapTypedValue)
private Task`1<Tuple`2<string, object>> InternalReadContentAsObjectTupleAsync(bool unwrapTypedValue)
private Task`1<Tuple`2<XmlSchemaType, object>> InternalReadElementContentAsObjectAsync()
private Task`1<Tuple`2<XmlSchemaType, object>> InternalReadElementContentAsObjectAsync(bool unwrapTypedValue)
private Task`1<Tuple`3<XmlSchemaType, string, object>> InternalReadElementContentAsObjectTupleAsync(bool unwrapTypedValue)
private Task`1<object> ReadTillEndElementAsync()
}
internal System.Xml.Xsl.ExecuteDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlQueryRuntime runtime)
public IAsyncResult BeginInvoke(XmlQueryRuntime runtime, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Xml.Xsl.IErrorHelper {
public void ReportError(string res, String[] args)
public void ReportWarning(string res, String[] args)
}
internal System.Xml.Xsl.IlGen.BranchingContext : Enum {
public int value__
public BranchingContext None
public BranchingContext OnTrue
public BranchingContext OnFalse
}
internal System.Xml.Xsl.IlGen.GenerateHelper : object {
private MethodBase methInfo
private ILGenerator ilgen
private LocalBuilder locXOut
private XmlILModule module
private bool isDebug
private bool initWriters
private StaticDataManager staticData
private ISourceLineInfo lastSourceInfo
private MethodInfo methSyncToNav
private string lastUriString
private string lastFileName
public StaticDataManager StaticData
public void .ctor(XmlILModule module, bool isDebug)
public void MethodBegin(MethodBase methInfo, ISourceLineInfo sourceInfo, bool initWriters)
public void MethodEnd()
public void CallSyncToNavigator()
public StaticDataManager get_StaticData()
public void LoadInteger(int intVal)
public void LoadBoolean(bool boolVal)
public void LoadType(Type clrTyp)
public LocalBuilder DeclareLocal(string name, Type type)
public void LoadQueryRuntime()
public void LoadQueryContext()
public void LoadXsltLibrary()
public void LoadQueryOutput()
public void LoadParameter(int paramPos)
public void SetParameter(object paramId)
public void BranchAndMark(Label lblBranch, Label lblMark)
public void TestAndBranch(int i4, Label lblBranch, OpCode opcodeBranch)
public void ConvBranchToBool(Label lblBranch, bool isTrueBranch)
public void TailCall(MethodInfo meth)
private void TraceCall(OpCode opcode, MethodInfo meth)
public void Call(MethodInfo meth)
public void CallToken(MethodInfo meth)
public void Construct(ConstructorInfo constr)
public void CallConcatStrings(int cStrings)
public void TreatAs(Type clrTypeSrc, Type clrTypeDst)
public void ConstructLiteralDecimal(decimal dec)
public void ConstructLiteralQName(string localName, string namespaceName)
public void CallArithmeticOp(QilNodeType opType, XmlTypeCode code)
public void CallCompareEquals(XmlTypeCode code)
public void CallCompare(XmlTypeCode code)
public void CallStartRtfConstruction(string baseUri)
public void CallEndRtfConstruction()
public void CallStartSequenceConstruction()
public void CallEndSequenceConstruction()
public void CallGetEarlyBoundObject(int idxObj, Type clrType)
public void CallGetAtomizedName(int idxName)
public void CallGetNameFilter(int idxFilter)
public void CallGetTypeFilter(XPathNodeType nodeType)
public void CallParseTagName(GenerateNameType nameType)
public void CallGetGlobalValue(int idxValue, Type clrType)
public void CallSetGlobalValue(Type clrType)
public void CallGetCollation(int idxName)
private void EnsureWriter()
public void CallGetParameter(string localName, string namespaceUri)
public void CallStartTree(XPathNodeType rootType)
public void CallEndTree()
public void CallWriteStartRoot()
public void CallWriteEndRoot()
public void CallWriteStartElement(GenerateNameType nameType, bool callChk)
public void CallWriteEndElement(GenerateNameType nameType, bool callChk)
public void CallStartElementContent()
public void CallWriteStartAttribute(GenerateNameType nameType, bool callChk)
public void CallWriteEndAttribute(bool callChk)
public void CallWriteNamespaceDecl(bool callChk)
public void CallWriteString(bool disableOutputEscaping, bool callChk)
public void CallWriteStartPI()
public void CallWriteEndPI()
public void CallWriteStartComment()
public void CallWriteEndComment()
public void CallCacheCount(Type itemStorageType)
public void CallCacheItem(Type itemStorageType)
public void CallValueAs(Type clrType)
public void AddSortKey(XmlQueryType keyType)
public void DebugStartScope()
public void DebugEndScope()
public void DebugSequencePoint(ISourceLineInfo sourceInfo)
private string GetFileName(ISourceLineInfo sourceInfo)
private void MarkSequencePoint(ISourceLineInfo sourceInfo)
public Label DefineLabel()
public void MarkLabel(Label lbl)
public void Emit(OpCode opcode)
public void Emit(OpCode opcode, byte byteVal)
public void Emit(OpCode opcode, ConstructorInfo constrInfo)
public void Emit(OpCode opcode, double dblVal)
public void Emit(OpCode opcode, float fltVal)
public void Emit(OpCode opcode, FieldInfo fldInfo)
public void Emit(OpCode opcode, short shrtVal)
public void Emit(OpCode opcode, int intVal)
public void Emit(OpCode opcode, long longVal)
public void Emit(OpCode opcode, Label lblVal)
public void Emit(OpCode opcode, Label[] arrLabels)
public void Emit(OpCode opcode, LocalBuilder locBldr)
public void Emit(OpCode opcode, MethodInfo methInfo)
public void Emit(OpCode opcode, sbyte sbyteVal)
public void Emit(OpCode opcode, string strVal)
public void Emit(OpCode opcode, Type typVal)
public void EmitUnconditionalBranch(OpCode opcode, Label lblTarget)
}
internal System.Xml.Xsl.IlGen.GenerateNameType : Enum {
public int value__
public GenerateNameType LiteralLocalName
public GenerateNameType LiteralName
public GenerateNameType CopiedName
public GenerateNameType TagNameAndMappings
public GenerateNameType TagNameAndNamespace
public GenerateNameType QName
public GenerateNameType StackName
}
internal System.Xml.Xsl.IlGen.ItemLocation : Enum {
public int value__
public ItemLocation None
public ItemLocation Stack
public ItemLocation Parameter
public ItemLocation Local
public ItemLocation Current
public ItemLocation Global
}
internal System.Xml.Xsl.IlGen.IteratorDescriptor : object {
private GenerateHelper helper
private IteratorDescriptor iterParent
private Label lblNext
private bool hasNext
private LocalBuilder locPos
private BranchingContext brctxt
private Label lblBranch
private StorageDescriptor storage
public IteratorDescriptor ParentIterator
public bool HasLabelNext
public LocalBuilder LocalPosition
public bool IsBranching
public Label LabelBranch
public BranchingContext CurrentBranchingContext
public StorageDescriptor Storage
public void .ctor(GenerateHelper helper)
public void .ctor(IteratorDescriptor iterParent)
private void Init(IteratorDescriptor iterParent, GenerateHelper helper)
public IteratorDescriptor get_ParentIterator()
public bool get_HasLabelNext()
public Label GetLabelNext()
public void SetIterator(Label lblNext, StorageDescriptor storage)
public void SetIterator(IteratorDescriptor iterInfo)
public void LoopToEnd(Label lblOnEnd)
public LocalBuilder get_LocalPosition()
public void set_LocalPosition(LocalBuilder value)
public void CacheCount()
public void EnsureNoCache()
public void SetBranching(BranchingContext brctxt, Label lblBranch)
public bool get_IsBranching()
public Label get_LabelBranch()
public BranchingContext get_CurrentBranchingContext()
public StorageDescriptor get_Storage()
public void set_Storage(StorageDescriptor value)
public void PushValue()
public void EnsureStack()
public void EnsureNoStack(string locName)
public void EnsureLocal(string locName)
public void EnsureLocal(LocalBuilder bldr)
public void DiscardStack()
public void EnsureStackNoCache()
public void EnsureNoStackNoCache(string locName)
public void EnsureLocalNoCache(string locName)
public void EnsureLocalNoCache(LocalBuilder bldr)
public void EnsureItemStorageType(XmlQueryType xmlType, Type storageTypeDest)
}
internal System.Xml.Xsl.IlGen.OptimizerPatternArgument : Enum {
public int value__
public OptimizerPatternArgument StepNode
public OptimizerPatternArgument StepInput
public OptimizerPatternArgument ElementQName
public OptimizerPatternArgument KindTestType
public OptimizerPatternArgument IndexedNodes
public OptimizerPatternArgument KeyExpression
public OptimizerPatternArgument DodStep
public OptimizerPatternArgument MaxPosition
public OptimizerPatternArgument RtfText
}
internal System.Xml.Xsl.IlGen.OptimizerPatternName : Enum {
public int value__
public OptimizerPatternName None
public OptimizerPatternName DodReverse
public OptimizerPatternName EqualityIndex
public OptimizerPatternName FilterAttributeKind
public OptimizerPatternName FilterContentKind
public OptimizerPatternName FilterElements
public OptimizerPatternName IsDocOrderDistinct
public OptimizerPatternName IsPositional
public OptimizerPatternName JoinAndDod
public OptimizerPatternName MaxPosition
public OptimizerPatternName SameDepth
public OptimizerPatternName Step
public OptimizerPatternName SingleTextRtf
public OptimizerPatternName Axis
public OptimizerPatternName MaybeSideEffects
public OptimizerPatternName TailCall
public OptimizerPatternName DodMerge
public OptimizerPatternName IsReferenced
}
internal System.Xml.Xsl.IlGen.OptimizerPatterns : object {
private int PatternCount
private int patterns
private bool isReadOnly
private object arg0
private object arg1
private object arg2
private OptimizerPatterns modreq(System.Runtime.CompilerServices.IsVolatile) ZeroOrOneDefault
private OptimizerPatterns modreq(System.Runtime.CompilerServices.IsVolatile) MaybeManyDefault
private OptimizerPatterns modreq(System.Runtime.CompilerServices.IsVolatile) DodDefault
public string Name
public OptimizerPatterns Read(QilNode nd)
public OptimizerPatterns Write(QilNode nd)
public void Inherit(QilNode ndSrc, QilNode ndDst, OptimizerPatternName pattern)
public void AddArgument(OptimizerPatternArgument argId, object arg)
public object GetArgument(OptimizerPatternArgument argNum)
public void AddPattern(OptimizerPatternName pattern)
public bool MatchesPattern(OptimizerPatternName pattern)
public string get_Name()
public string ToString()
}
internal System.Xml.Xsl.IlGen.PossibleXmlStates : Enum {
public int value__
public PossibleXmlStates None
public PossibleXmlStates WithinSequence
public PossibleXmlStates EnumAttrs
public PossibleXmlStates WithinContent
public PossibleXmlStates WithinAttr
public PossibleXmlStates WithinComment
public PossibleXmlStates WithinPI
public PossibleXmlStates Any
}
internal System.Xml.Xsl.IlGen.StaticDataManager : object {
private UniqueList`1<string> uniqueNames
private UniqueList`1<Int32Pair> uniqueFilters
private List`1<StringPair[]> prefixMappingsList
private List`1<string> globalNames
private UniqueList`1<EarlyBoundInfo> earlyInfo
private UniqueList`1<XmlQueryType> uniqueXmlTypes
private UniqueList`1<XmlCollation> uniqueCollations
public String[] Names
public Int32Pair[] NameFilters
public StringPair[][] PrefixMappingsList
public String[] GlobalNames
public EarlyBoundInfo[] EarlyBound
public XmlQueryType[] XmlTypes
public XmlCollation[] Collations
public int DeclareName(string name)
public String[] get_Names()
public int DeclareNameFilter(string locName, string nsUri)
public Int32Pair[] get_NameFilters()
public int DeclarePrefixMappings(IList`1<QilNode> list)
public StringPair[][] get_PrefixMappingsList()
public int DeclareGlobalValue(string name)
public String[] get_GlobalNames()
public int DeclareEarlyBound(string namespaceUri, Type ebType)
public EarlyBoundInfo[] get_EarlyBound()
public int DeclareXmlType(XmlQueryType type)
public XmlQueryType[] get_XmlTypes()
public int DeclareCollation(string collation)
public XmlCollation[] get_Collations()
}
internal System.Xml.Xsl.IlGen.StorageDescriptor : ValueType {
private ItemLocation location
private object locationObject
private Type itemStorageType
private bool isCached
public ItemLocation Location
public int ParameterLocation
public LocalBuilder LocalLocation
public LocalBuilder CurrentLocation
public MethodInfo GlobalLocation
public bool IsCached
public Type ItemStorageType
public StorageDescriptor None()
public StorageDescriptor Stack(Type itemStorageType, bool isCached)
public StorageDescriptor Parameter(int paramIndex, Type itemStorageType, bool isCached)
public StorageDescriptor Local(LocalBuilder loc, Type itemStorageType, bool isCached)
public StorageDescriptor Current(LocalBuilder locIter, Type itemStorageType)
public StorageDescriptor Global(MethodInfo methGlobal, Type itemStorageType, bool isCached)
public StorageDescriptor ToStack()
public StorageDescriptor ToLocal(LocalBuilder loc)
public StorageDescriptor ToStorageType(Type itemStorageType)
public ItemLocation get_Location()
public int get_ParameterLocation()
public LocalBuilder get_LocalLocation()
public LocalBuilder get_CurrentLocation()
public MethodInfo get_GlobalLocation()
public bool get_IsCached()
public Type get_ItemStorageType()
}
internal System.Xml.Xsl.IlGen.TailCallAnalyzer : object {
public void Analyze(QilExpression qil)
private void AnalyzeDefinition(QilNode nd)
}
internal System.Xml.Xsl.IlGen.UniqueList`1 : object {
private Dictionary`2<T, int> lookup
private List`1<T> list
public int Add(T value)
public T[] ToArray()
}
internal System.Xml.Xsl.IlGen.XmlILAnnotation : ListBase`1<object> {
private object annPrev
private MethodInfo funcMethod
private int argPos
private IteratorDescriptor iterInfo
private XmlILConstructInfo constrInfo
private OptimizerPatterns optPatt
public MethodInfo FunctionBinding
public int ArgumentPosition
public IteratorDescriptor CachedIteratorDescriptor
public XmlILConstructInfo ConstructInfo
public OptimizerPatterns Patterns
public int Count
public object Item
public XmlILAnnotation Write(QilNode nd)
private void .ctor(object annPrev)
public MethodInfo get_FunctionBinding()
public void set_FunctionBinding(MethodInfo value)
public int get_ArgumentPosition()
public void set_ArgumentPosition(int value)
public IteratorDescriptor get_CachedIteratorDescriptor()
public void set_CachedIteratorDescriptor(IteratorDescriptor value)
public XmlILConstructInfo get_ConstructInfo()
public void set_ConstructInfo(XmlILConstructInfo value)
public OptimizerPatterns get_Patterns()
public void set_Patterns(OptimizerPatterns value)
public int get_Count()
public object get_Item(int index)
public void set_Item(int index, object value)
}
internal System.Xml.Xsl.IlGen.XmlILConstructInfo : object {
private QilNodeType nodeType
private PossibleXmlStates xstatesInitial
private PossibleXmlStates xstatesFinal
private PossibleXmlStates xstatesBeginLoop
private PossibleXmlStates xstatesEndLoop
private bool isNmspInScope
private bool mightHaveNmsp
private bool mightHaveAttrs
private bool mightHaveDupAttrs
private bool mightHaveNmspAfterAttrs
private XmlILConstructMethod constrMeth
private XmlILConstructInfo parentInfo
private ArrayList callersInfo
private bool isReadOnly
private XmlILConstructInfo modreq(System.Runtime.CompilerServices.IsVolatile) Default
public PossibleXmlStates InitialStates
public PossibleXmlStates FinalStates
public PossibleXmlStates BeginLoopStates
public PossibleXmlStates EndLoopStates
public XmlILConstructMethod ConstructMethod
public bool PushToWriterFirst
public bool PushToWriterLast
public bool PullFromIteratorFirst
public XmlILConstructInfo ParentInfo
public XmlILConstructInfo ParentElementInfo
public bool IsNamespaceInScope
public bool MightHaveNamespaces
public bool MightHaveNamespacesAfterAttributes
public bool MightHaveAttributes
public bool MightHaveDuplicateAttributes
public ArrayList CallersInfo
public string Name
public XmlILConstructInfo Read(QilNode nd)
public XmlILConstructInfo Write(QilNode nd)
private void .ctor(QilNodeType nodeType)
public PossibleXmlStates get_InitialStates()
public void set_InitialStates(PossibleXmlStates value)
public PossibleXmlStates get_FinalStates()
public void set_FinalStates(PossibleXmlStates value)
public void set_BeginLoopStates(PossibleXmlStates value)
public void set_EndLoopStates(PossibleXmlStates value)
public XmlILConstructMethod get_ConstructMethod()
public void set_ConstructMethod(XmlILConstructMethod value)
public bool get_PushToWriterFirst()
public void set_PushToWriterFirst(bool value)
public bool get_PushToWriterLast()
public void set_PushToWriterLast(bool value)
public bool get_PullFromIteratorFirst()
public void set_PullFromIteratorFirst(bool value)
public void set_ParentInfo(XmlILConstructInfo value)
public XmlILConstructInfo get_ParentElementInfo()
public bool get_IsNamespaceInScope()
public void set_IsNamespaceInScope(bool value)
public bool get_MightHaveNamespaces()
public void set_MightHaveNamespaces(bool value)
public bool get_MightHaveNamespacesAfterAttributes()
public void set_MightHaveNamespacesAfterAttributes(bool value)
public bool get_MightHaveAttributes()
public void set_MightHaveAttributes(bool value)
public bool get_MightHaveDuplicateAttributes()
public void set_MightHaveDuplicateAttributes(bool value)
public ArrayList get_CallersInfo()
public string get_Name()
public string ToString()
}
internal System.Xml.Xsl.IlGen.XmlILConstructMethod : Enum {
public int value__
public XmlILConstructMethod Iterator
public XmlILConstructMethod Writer
public XmlILConstructMethod WriterThenIterator
public XmlILConstructMethod IteratorThenWriter
}
internal System.Xml.Xsl.IlGen.XmlILConstructors : object {
public ConstructorInfo DecFromParts
public ConstructorInfo DecFromInt32
public ConstructorInfo DecFromInt64
public ConstructorInfo Debuggable
public ConstructorInfo NonUserCode
public ConstructorInfo QName
public ConstructorInfo StepThrough
public ConstructorInfo Transparent
private ConstructorInfo GetConstructor(Type className)
private ConstructorInfo GetConstructor(Type className, Type[] args)
}
internal System.Xml.Xsl.IlGen.XmlILElementAnalyzer : XmlILStateAnalyzer {
private NameTable attrNames
private ArrayList dupAttrs
public void .ctor(QilFactory fac)
public QilNode Analyze(QilNode ndElem, QilNode ndContent)
protected void AnalyzeLoop(QilLoop ndLoop, XmlILConstructInfo info)
protected void AnalyzeCopy(QilNode ndCopy, XmlILConstructInfo info)
private void AnalyzeAttributeCtor(QilBinary ndAttr, XmlILConstructInfo info)
private void CheckAttributeNamespaceConstruct(XmlQueryType typ)
}
internal System.Xml.Xsl.IlGen.XmlILMethodAttributes : Enum {
public int value__
public XmlILMethodAttributes None
public XmlILMethodAttributes NonUser
public XmlILMethodAttributes Raw
}
internal System.Xml.Xsl.IlGen.XmlILMethods : object {
public MethodInfo AncCreate
public MethodInfo AncNext
public MethodInfo AncDOCreate
public MethodInfo AncDONext
public MethodInfo AttrContentCreate
public MethodInfo AttrContentNext
public MethodInfo AttrCreate
public MethodInfo AttrNext
public MethodInfo ContentCreate
public MethodInfo ContentNext
public MethodInfo ContentMergeCreate
public MethodInfo ContentMergeNext
public MethodInfo DescCreate
public MethodInfo DescNext
public MethodInfo DescMergeCreate
public MethodInfo DescMergeNext
public MethodInfo DiffCreate
public MethodInfo DiffNext
public MethodInfo DodMergeCreate
public MethodInfo DodMergeAdd
public MethodInfo DodMergeSeq
public MethodInfo ElemContentCreate
public MethodInfo ElemContentNext
public MethodInfo FollSibCreate
public MethodInfo FollSibNext
public MethodInfo FollSibMergeCreate
public MethodInfo FollSibMergeNext
public MethodInfo IdCreate
public MethodInfo IdNext
public MethodInfo InterCreate
public MethodInfo InterNext
public MethodInfo KindContentCreate
public MethodInfo KindContentNext
public MethodInfo NmspCreate
public MethodInfo NmspNext
public MethodInfo NodeRangeCreate
public MethodInfo NodeRangeNext
public MethodInfo ParentCreate
public MethodInfo ParentNext
public MethodInfo PrecCreate
public MethodInfo PrecNext
public MethodInfo PreSibCreate
public MethodInfo PreSibNext
public MethodInfo PreSibDOCreate
public MethodInfo PreSibDONext
public MethodInfo SortKeyCreate
public MethodInfo SortKeyDateTime
public MethodInfo SortKeyDecimal
public MethodInfo SortKeyDouble
public MethodInfo SortKeyEmpty
public MethodInfo SortKeyFinish
public MethodInfo SortKeyInt
public MethodInfo SortKeyInteger
public MethodInfo SortKeyKeys
public MethodInfo SortKeyString
public MethodInfo UnionCreate
public MethodInfo UnionNext
public MethodInfo XPFollCreate
public MethodInfo XPFollNext
public MethodInfo XPFollMergeCreate
public MethodInfo XPFollMergeNext
public MethodInfo XPPrecCreate
public MethodInfo XPPrecNext
public MethodInfo XPPrecDOCreate
public MethodInfo XPPrecDONext
public MethodInfo XPPrecMergeCreate
public MethodInfo XPPrecMergeNext
public MethodInfo AddNewIndex
public MethodInfo ChangeTypeXsltArg
public MethodInfo ChangeTypeXsltResult
public MethodInfo CompPos
public MethodInfo Context
public MethodInfo CreateCollation
public MethodInfo DocOrder
public MethodInfo EndRtfConstr
public MethodInfo EndSeqConstr
public MethodInfo FindIndex
public MethodInfo GenId
public MethodInfo GetAtomizedName
public MethodInfo GetCollation
public MethodInfo GetEarly
public MethodInfo GetNameFilter
public MethodInfo GetOutput
public MethodInfo GetGlobalValue
public MethodInfo GetTypeFilter
public MethodInfo GlobalComputed
public MethodInfo ItemMatchesCode
public MethodInfo ItemMatchesType
public MethodInfo QNameEqualLit
public MethodInfo QNameEqualNav
public MethodInfo RtfConstr
public MethodInfo SendMessage
public MethodInfo SeqMatchesCode
public MethodInfo SeqMatchesType
public MethodInfo SetGlobalValue
public MethodInfo StartRtfConstr
public MethodInfo StartSeqConstr
public MethodInfo TagAndMappings
public MethodInfo TagAndNamespace
public MethodInfo ThrowException
public MethodInfo XsltLib
public MethodInfo GetDataSource
public MethodInfo GetDefaultDataSource
public MethodInfo GetParam
public MethodInfo InvokeXsltLate
public MethodInfo IndexAdd
public MethodInfo IndexLookup
public MethodInfo ItemIsNode
public MethodInfo Value
public MethodInfo ValueAsAny
public MethodInfo NavClone
public MethodInfo NavLocalName
public MethodInfo NavMoveAttr
public MethodInfo NavMoveId
public MethodInfo NavMoveParent
public MethodInfo NavMoveRoot
public MethodInfo NavMoveTo
public MethodInfo NavNmsp
public MethodInfo NavPrefix
public MethodInfo NavSamePos
public MethodInfo NavType
public MethodInfo StartElemLitName
public MethodInfo StartElemLocName
public MethodInfo EndElemStackName
public MethodInfo StartAttrLitName
public MethodInfo StartAttrLocName
public MethodInfo EndAttr
public MethodInfo Text
public MethodInfo NoEntText
public MethodInfo StartTree
public MethodInfo EndTree
public MethodInfo StartElemLitNameUn
public MethodInfo StartElemLocNameUn
public MethodInfo StartContentUn
public MethodInfo EndElemLitNameUn
public MethodInfo EndElemLocNameUn
public MethodInfo StartAttrLitNameUn
public MethodInfo StartAttrLocNameUn
public MethodInfo EndAttrUn
public MethodInfo NamespaceDeclUn
public MethodInfo TextUn
public MethodInfo NoEntTextUn
public MethodInfo StartRoot
public MethodInfo EndRoot
public MethodInfo StartElemCopyName
public MethodInfo StartElemMapName
public MethodInfo StartElemNmspName
public MethodInfo StartElemQName
public MethodInfo StartAttrCopyName
public MethodInfo StartAttrMapName
public MethodInfo StartAttrNmspName
public MethodInfo StartAttrQName
public MethodInfo NamespaceDecl
public MethodInfo StartComment
public MethodInfo CommentText
public MethodInfo EndComment
public MethodInfo StartPI
public MethodInfo PIText
public MethodInfo EndPI
public MethodInfo WriteItem
public MethodInfo CopyOf
public MethodInfo StartCopy
public MethodInfo EndCopy
public MethodInfo DecAdd
public MethodInfo DecCmp
public MethodInfo DecEq
public MethodInfo DecSub
public MethodInfo DecMul
public MethodInfo DecDiv
public MethodInfo DecRem
public MethodInfo DecNeg
public MethodInfo QNameEq
public MethodInfo StrEq
public MethodInfo StrCat2
public MethodInfo StrCat3
public MethodInfo StrCat4
public MethodInfo StrCmp
public MethodInfo StrLen
public MethodInfo DblToDec
public MethodInfo DblToInt
public MethodInfo DblToLng
public MethodInfo DblToStr
public MethodInfo DecToDbl
public MethodInfo DTToStr
public MethodInfo IntToDbl
public MethodInfo LngToDbl
public MethodInfo StrToDbl
public MethodInfo StrToDT
public MethodInfo ItemToBool
public MethodInfo ItemToDbl
public MethodInfo ItemToStr
public MethodInfo ItemToNode
public MethodInfo ItemToNodes
public MethodInfo ItemsToBool
public MethodInfo ItemsToDbl
public MethodInfo ItemsToNode
public MethodInfo ItemsToNodes
public MethodInfo ItemsToStr
public MethodInfo StrCatCat
public MethodInfo StrCatClear
public MethodInfo StrCatResult
public MethodInfo StrCatDelim
public MethodInfo NavsToItems
public MethodInfo ItemsToNavs
public MethodInfo SetDod
public MethodInfo GetTypeFromHandle
public MethodInfo InitializeArray
public Dictionary`2<Type, XmlILStorageMethods> StorageMethods
public MethodInfo GetMethod(Type className, string methName)
public MethodInfo GetMethod(Type className, string methName, Type[] args)
}
internal System.Xml.Xsl.IlGen.XmlILModule : object {
public PermissionSet CreateModulePermissionSet
private long AssemblyId
private ModuleBuilder LREModule
private TypeBuilder typeBldr
private Hashtable methods
private Hashtable urlToSymWriter
private string modFile
private bool persistAsm
private bool useLRE
private bool emitSymbols
private Guid LanguageGuid
private Guid VendorGuid
private string RuntimeName
public bool EmitSymbols
public void .ctor(TypeBuilder typeBldr)
public bool get_EmitSymbols()
public void .ctor(bool useLRE, bool emitSymbols)
public MethodInfo DefineMethod(string name, Type returnType, Type[] paramTypes, String[] paramNames, XmlILMethodAttributes xmlAttrs)
public ILGenerator DefineMethodBody(MethodBase methInfo)
public MethodInfo FindMethod(string name)
public FieldInfo DefineInitializedData(string name, Byte[] data)
public FieldInfo DefineField(string fieldName, Type type)
public ConstructorInfo DefineTypeInitializer()
public ISymbolDocumentWriter AddSourceDocument(string fileName)
public void BakeMethods()
public Delegate CreateDelegate(string name, Type typDelegate)
private AssemblyName CreateAssemblyName()
}
internal System.Xml.Xsl.IlGen.XmlILNamespaceAnalyzer : object {
private XmlNamespaceManager nsmgr
private bool addInScopeNmsp
private int cntNmsp
public void Analyze(QilNode nd, bool defaultNmspInScope)
private void AnalyzeContent(QilNode nd)
private bool CheckNamespaceInScope(QilBinary nd)
}
internal System.Xml.Xsl.IlGen.XmlILOptimization : Enum {
public int value__
public XmlILOptimization None
public XmlILOptimization EliminateLiteralVariables
public XmlILOptimization TailCall
public XmlILOptimization AnnotateAncestor
public XmlILOptimization AnnotateAncestorSelf
public XmlILOptimization AnnotateAttribute
public XmlILOptimization AnnotateAttrNmspLoop
public XmlILOptimization AnnotateBarrier
public XmlILOptimization AnnotateConstruction
public XmlILOptimization AnnotateContent
public XmlILOptimization AnnotateContentLoop
public XmlILOptimization AnnotateDescendant
public XmlILOptimization AnnotateDescendantLoop
public XmlILOptimization AnnotateDescendantSelf
public XmlILOptimization AnnotateDifference
public XmlILOptimization AnnotateDod
public XmlILOptimization AnnotateDodMerge
public XmlILOptimization AnnotateDodReverse
public XmlILOptimization AnnotateFilter
public XmlILOptimization AnnotateFilterAttributeKind
public XmlILOptimization AnnotateFilterContentKind
public XmlILOptimization AnnotateFilterElements
public XmlILOptimization AnnotateFollowingSibling
public XmlILOptimization AnnotateIndex1
public XmlILOptimization AnnotateIndex2
public XmlILOptimization AnnotateIntersect
public XmlILOptimization AnnotateInvoke
public XmlILOptimization AnnotateJoinAndDod
public XmlILOptimization AnnotateLet
public XmlILOptimization AnnotateMaxLengthEq
public XmlILOptimization AnnotateMaxLengthGe
public XmlILOptimization AnnotateMaxLengthGt
public XmlILOptimization AnnotateMaxLengthLe
public XmlILOptimization AnnotateMaxLengthLt
public XmlILOptimization AnnotateMaxLengthNe
public XmlILOptimization AnnotateMaxPositionEq
public XmlILOptimization AnnotateMaxPositionLe
public XmlILOptimization AnnotateMaxPositionLt
public XmlILOptimization AnnotateNamespace
public XmlILOptimization AnnotateNodeRange
public XmlILOptimization AnnotateParent
public XmlILOptimization AnnotatePositionalIterator
public XmlILOptimization AnnotatePreceding
public XmlILOptimization AnnotatePrecedingSibling
public XmlILOptimization AnnotateRoot
public XmlILOptimization AnnotateRootLoop
public XmlILOptimization AnnotateSingleTextRtf
public XmlILOptimization AnnotateSingletonLoop
public XmlILOptimization AnnotateTrackCallers
public XmlILOptimization AnnotateUnion
public XmlILOptimization AnnotateUnionContent
public XmlILOptimization AnnotateXPathFollowing
public XmlILOptimization AnnotateXPathPreceding
public XmlILOptimization CommuteDodFilter
public XmlILOptimization CommuteFilterLoop
public XmlILOptimization EliminateAdd
public XmlILOptimization EliminateAfter
public XmlILOptimization EliminateAnd
public XmlILOptimization EliminateAverage
public XmlILOptimization EliminateBefore
public XmlILOptimization EliminateConditional
public XmlILOptimization EliminateDifference
public XmlILOptimization EliminateDivide
public XmlILOptimization EliminateDod
public XmlILOptimization EliminateEq
public XmlILOptimization EliminateFilter
public XmlILOptimization EliminateGe
public XmlILOptimization EliminateGt
public XmlILOptimization EliminateIntersection
public XmlILOptimization EliminateIs
public XmlILOptimization EliminateIsEmpty
public XmlILOptimization EliminateIsType
public XmlILOptimization EliminateIterator
public XmlILOptimization EliminateIteratorUsedAtMostOnce
public XmlILOptimization EliminateLe
public XmlILOptimization EliminateLength
public XmlILOptimization EliminateLoop
public XmlILOptimization EliminateLt
public XmlILOptimization EliminateMaximum
public XmlILOptimization EliminateMinimum
public XmlILOptimization EliminateModulo
public XmlILOptimization EliminateMultiply
public XmlILOptimization EliminateNamespaceDecl
public XmlILOptimization EliminateNe
public XmlILOptimization EliminateNegate
public XmlILOptimization EliminateNop
public XmlILOptimization EliminateNot
public XmlILOptimization EliminateOr
public XmlILOptimization EliminatePositionOf
public XmlILOptimization EliminateReturnDod
public XmlILOptimization EliminateSequence
public XmlILOptimization EliminateSort
public XmlILOptimization EliminateStrConcat
public XmlILOptimization EliminateStrConcatSingle
public XmlILOptimization EliminateStrLength
public XmlILOptimization EliminateSubtract
public XmlILOptimization EliminateSum
public XmlILOptimization EliminateTypeAssert
public XmlILOptimization EliminateTypeAssertOptional
public XmlILOptimization EliminateUnion
public XmlILOptimization EliminateUnusedGlobals
public XmlILOptimization EliminateXsltConvert
public XmlILOptimization FoldConditionalNot
public XmlILOptimization FoldNamedDescendants
public XmlILOptimization FoldNone
public XmlILOptimization FoldXsltConvertLiteral
public XmlILOptimization IntroduceDod
public XmlILOptimization IntroducePrecedingDod
public XmlILOptimization NormalizeAddEq
public XmlILOptimization NormalizeAddLiteral
public XmlILOptimization NormalizeAttribute
public XmlILOptimization NormalizeConditionalText
public XmlILOptimization NormalizeDifference
public XmlILOptimization NormalizeEqLiteral
public XmlILOptimization NormalizeGeLiteral
public XmlILOptimization NormalizeGtLiteral
public XmlILOptimization NormalizeIdEq
public XmlILOptimization NormalizeIdNe
public XmlILOptimization NormalizeIntersect
public XmlILOptimization NormalizeInvokeEmpty
public XmlILOptimization NormalizeLeLiteral
public XmlILOptimization NormalizeLengthGt
public XmlILOptimization NormalizeLengthNe
public XmlILOptimization NormalizeLoopConditional
public XmlILOptimization NormalizeLoopInvariant
public XmlILOptimization NormalizeLoopLoop
public XmlILOptimization NormalizeLoopText
public XmlILOptimization NormalizeLtLiteral
public XmlILOptimization NormalizeMuenchian
public XmlILOptimization NormalizeMultiplyLiteral
public XmlILOptimization NormalizeNeLiteral
public XmlILOptimization NormalizeNestedSequences
public XmlILOptimization NormalizeSingletonLet
public XmlILOptimization NormalizeSortXsltConvert
public XmlILOptimization NormalizeUnion
public XmlILOptimization NormalizeXsltConvertEq
public XmlILOptimization NormalizeXsltConvertGe
public XmlILOptimization NormalizeXsltConvertGt
public XmlILOptimization NormalizeXsltConvertLe
public XmlILOptimization NormalizeXsltConvertLt
public XmlILOptimization NormalizeXsltConvertNe
public XmlILOptimization Last_
}
internal System.Xml.Xsl.IlGen.XmlILOptimizerVisitor : QilPatternVisitor {
private QilPatterns PatternsNoOpt
private QilPatterns PatternsOpt
private QilExpression qil
private XmlILElementAnalyzer elemAnalyzer
private XmlILStateAnalyzer contentAnalyzer
private XmlILNamespaceAnalyzer nmspAnalyzer
private NodeCounter nodeCounter
private SubstitutionList subs
private bool Item
public void .ctor(QilExpression qil, bool optimize)
public QilExpression Optimize()
protected QilNode Visit(QilNode nd)
protected QilNode VisitReference(QilNode oldNode)
protected bool AllowReplace(XmlILOptimization pattern, QilNode original)
protected QilNode Replace(XmlILOptimization pattern, QilNode original, QilNode replacement)
protected QilNode NoReplace(QilNode node)
protected void RecalculateType(QilNode node, XmlQueryType oldType)
protected QilNode VisitQilExpression(QilExpression local0)
protected QilNode VisitOptimizeBarrier(QilUnary local0)
protected QilNode VisitDataSource(QilDataSource local0)
protected QilNode VisitNop(QilUnary local0)
protected QilNode VisitError(QilUnary local0)
protected QilNode VisitWarning(QilUnary local0)
protected QilNode VisitLet(QilIterator local0)
protected QilNode VisitPositionOf(QilUnary local0)
protected QilNode VisitAnd(QilBinary local0)
protected QilNode VisitOr(QilBinary local0)
protected QilNode VisitNot(QilUnary local0)
protected QilNode VisitConditional(QilTernary local0)
protected QilNode VisitChoice(QilChoice local0)
protected QilNode VisitLength(QilUnary local0)
protected QilNode VisitSequence(QilList local0)
protected QilNode VisitUnion(QilBinary local0)
protected QilNode VisitIntersection(QilBinary local0)
protected QilNode VisitDifference(QilBinary local0)
protected QilNode VisitAverage(QilUnary local0)
protected QilNode VisitSum(QilUnary local0)
protected QilNode VisitMinimum(QilUnary local0)
protected QilNode VisitMaximum(QilUnary local0)
protected QilNode VisitNegate(QilUnary local0)
protected QilNode VisitAdd(QilBinary local0)
protected QilNode VisitSubtract(QilBinary local0)
protected QilNode VisitMultiply(QilBinary local0)
protected QilNode VisitDivide(QilBinary local0)
protected QilNode VisitModulo(QilBinary local0)
protected QilNode VisitStrLength(QilUnary local0)
protected QilNode VisitStrConcat(QilStrConcat local0)
protected QilNode VisitStrParseQName(QilBinary local0)
protected QilNode VisitNe(QilBinary local0)
protected QilNode VisitEq(QilBinary local0)
protected QilNode VisitGt(QilBinary local0)
protected QilNode VisitGe(QilBinary local0)
protected QilNode VisitLt(QilBinary local0)
protected QilNode VisitLe(QilBinary local0)
protected QilNode VisitIs(QilBinary local0)
protected QilNode VisitAfter(QilBinary local0)
protected QilNode VisitBefore(QilBinary local0)
protected QilNode VisitLoop(QilLoop local0)
protected QilNode VisitFilter(QilLoop local0)
protected QilNode VisitSort(QilLoop local0)
protected QilNode VisitSortKey(QilSortKey local0)
protected QilNode VisitDocOrderDistinct(QilUnary local0)
protected QilNode VisitFunction(QilFunction local0)
protected QilNode VisitInvoke(QilInvoke local0)
protected QilNode VisitContent(QilUnary local0)
protected QilNode VisitAttribute(QilBinary local0)
protected QilNode VisitParent(QilUnary local0)
protected QilNode VisitRoot(QilUnary local0)
protected QilNode VisitDescendant(QilUnary local0)
protected QilNode VisitDescendantOrSelf(QilUnary local0)
protected QilNode VisitAncestor(QilUnary local0)
protected QilNode VisitAncestorOrSelf(QilUnary local0)
protected QilNode VisitPreceding(QilUnary local0)
protected QilNode VisitFollowingSibling(QilUnary local0)
protected QilNode VisitPrecedingSibling(QilUnary local0)
protected QilNode VisitNodeRange(QilBinary local0)
protected QilNode VisitDeref(QilBinary local0)
protected QilNode VisitElementCtor(QilBinary local0)
protected QilNode VisitAttributeCtor(QilBinary local0)
protected QilNode VisitCommentCtor(QilUnary local0)
protected QilNode VisitPICtor(QilBinary local0)
protected QilNode VisitTextCtor(QilUnary local0)
protected QilNode VisitRawTextCtor(QilUnary local0)
protected QilNode VisitDocumentCtor(QilUnary local0)
protected QilNode VisitNamespaceDecl(QilBinary local0)
protected QilNode VisitRtfCtor(QilBinary local0)
protected QilNode VisitNameOf(QilUnary local0)
protected QilNode VisitLocalNameOf(QilUnary local0)
protected QilNode VisitNamespaceUriOf(QilUnary local0)
protected QilNode VisitPrefixOf(QilUnary local0)
protected QilNode VisitTypeAssert(QilTargetType local0)
protected QilNode VisitIsType(QilTargetType local0)
protected QilNode VisitIsEmpty(QilUnary local0)
protected QilNode VisitXPathNodeValue(QilUnary local0)
protected QilNode VisitXPathFollowing(QilUnary local0)
protected QilNode VisitXPathPreceding(QilUnary local0)
protected QilNode VisitXPathNamespace(QilUnary local0)
protected QilNode VisitXsltGenerateId(QilUnary local0)
protected QilNode VisitXsltCopy(QilBinary local0)
protected QilNode VisitXsltCopyOf(QilUnary local0)
protected QilNode VisitXsltConvert(QilTargetType local0)
private bool get_Item(XmlILOptimization ann)
private bool DependsOn(QilNode expr, QilNode target)
protected bool NonPositional(QilNode expr, QilNode iter)
private QilNode Subs(QilNode expr, QilNode refOld, QilNode refNew)
private bool IsGlobalVariable(QilIterator iter)
private bool IsGlobalValue(QilNode nd)
private bool IsPrimitiveNumeric(XmlQueryType typ)
private bool MatchesContentTest(XmlQueryType typ)
private bool IsConstructedExpression(QilNode nd)
private bool IsLiteral(QilNode nd)
private bool AreLiteralArgs(QilNode nd)
private object ExtractLiteralValue(QilNode nd)
private bool HasNestedSequence(QilNode nd)
private bool AllowJoinAndDod(QilNode nd)
private bool AllowDodReverse(QilNode nd)
private bool CanFoldXsltConvert(QilNode ndLiteral, XmlQueryType typTarget)
private bool CanFoldXsltConvertNonLossy(QilNode ndLiteral, XmlQueryType typTarget)
private QilNode FoldXsltConvert(QilNode ndLiteral, XmlQueryType typTarget)
private QilNode FoldComparison(QilNodeType opType, QilNode left, QilNode right)
private bool CanFoldArithmetic(QilNodeType opType, QilLiteral left, QilLiteral right)
private QilNode FoldArithmetic(QilNodeType opType, QilLiteral left, QilLiteral right)
private void AddStepPattern(QilNode nd, QilNode input)
private bool IsDocOrderDistinct(QilNode nd)
private bool IsStepPattern(QilNode nd, QilNodeType stepType)
private bool IsStepPattern(OptimizerPatterns patt, QilNodeType stepType)
private void EliminateUnusedGlobals(IList`1<QilNode> globals)
}
internal System.Xml.Xsl.IlGen.XmlILStateAnalyzer : object {
protected XmlILConstructInfo parentInfo
protected QilFactory fac
protected PossibleXmlStates xstates
protected bool withinElem
public void .ctor(QilFactory fac)
public QilNode Analyze(QilNode ndConstr, QilNode ndContent)
protected QilNode AnalyzeContent(QilNode nd)
protected void AnalyzeLoop(QilLoop ndLoop, XmlILConstructInfo info)
protected void AnalyzeSequence(QilList ndSeq, XmlILConstructInfo info)
protected void AnalyzeConditional(QilTernary ndCond, XmlILConstructInfo info)
protected void AnalyzeChoice(QilChoice ndChoice, XmlILConstructInfo info)
protected void AnalyzeCopy(QilNode ndCopy, XmlILConstructInfo info)
private void StartLoop(XmlQueryType typ, XmlILConstructInfo info)
private void EndLoop(XmlQueryType typ, XmlILConstructInfo info)
private bool MaybeAttrNmsp(XmlQueryType typ)
private bool MaybeContent(XmlQueryType typ)
}
internal System.Xml.Xsl.IlGen.XmlILStorageMethods : object {
public MethodInfo AggAvg
public MethodInfo AggAvgResult
public MethodInfo AggCreate
public MethodInfo AggIsEmpty
public MethodInfo AggMax
public MethodInfo AggMaxResult
public MethodInfo AggMin
public MethodInfo AggMinResult
public MethodInfo AggSum
public MethodInfo AggSumResult
public Type SeqType
public FieldInfo SeqEmpty
public MethodInfo SeqReuse
public MethodInfo SeqReuseSgl
public MethodInfo SeqAdd
public MethodInfo SeqSortByKeys
public Type IListType
public MethodInfo IListCount
public MethodInfo IListItem
public MethodInfo ValueAs
public MethodInfo ToAtomicValue
public void .ctor(Type storageType)
}
internal System.Xml.Xsl.IlGen.XmlILTypeHelper : object {
private Type[] TypeCodeToStorage
private Type[] TypeCodeToCachedStorage
public Type GetStorageType(XmlQueryType qyTyp)
}
internal System.Xml.Xsl.IlGen.XmlILVisitor : QilVisitor {
private QilExpression qil
private GenerateHelper helper
private IteratorDescriptor iterCurr
private IteratorDescriptor iterNested
private int indexId
public void Visit(QilExpression qil, GenerateHelper helper, MethodInfo methRoot)
private void PrepareGlobalValues(QilList globalIterators)
private void VisitGlobalValues(QilList globalIterators)
private void Function(QilFunction ndFunc)
protected QilNode Visit(QilNode nd)
protected QilNode VisitChildren(QilNode parent)
private void NestedConstruction(QilNode nd)
private void CopySequence(QilNode nd)
protected QilNode VisitDataSource(QilDataSource ndSrc)
protected QilNode VisitNop(QilUnary ndNop)
protected QilNode VisitOptimizeBarrier(QilUnary ndBarrier)
protected QilNode VisitError(QilUnary ndErr)
protected QilNode VisitWarning(QilUnary ndWarning)
protected QilNode VisitTrue(QilNode ndTrue)
protected QilNode VisitFalse(QilNode ndFalse)
protected QilNode VisitLiteralString(QilLiteral ndStr)
protected QilNode VisitLiteralInt32(QilLiteral ndInt)
protected QilNode VisitLiteralInt64(QilLiteral ndLong)
protected QilNode VisitLiteralDouble(QilLiteral ndDbl)
protected QilNode VisitLiteralDecimal(QilLiteral ndDec)
protected QilNode VisitLiteralQName(QilName ndQName)
protected QilNode VisitAnd(QilBinary ndAnd)
private Label StartConjunctiveTests(BranchingContext brctxt, Label lblBranch)
private void StartLastConjunctiveTest(BranchingContext brctxt, Label lblBranch, Label lblOnFalse)
private void EndConjunctiveTests(BranchingContext brctxt, Label lblBranch, Label lblOnFalse)
protected QilNode VisitOr(QilBinary ndOr)
protected QilNode VisitNot(QilUnary ndNot)
protected QilNode VisitConditional(QilTernary ndCond)
private void ConditionalBranch(QilNode ndBranch, Type itemStorageType, LocalBuilder locResult)
protected QilNode VisitChoice(QilChoice ndChoice)
protected QilNode VisitLength(QilUnary ndSetLen)
protected QilNode VisitSequence(QilList ndSeq)
private void VisitEmpty(QilNode nd)
private void Sequence(QilList ndSeq)
protected QilNode VisitUnion(QilBinary ndUnion)
protected QilNode VisitIntersection(QilBinary ndInter)
protected QilNode VisitDifference(QilBinary ndDiff)
private QilNode CreateSetIterator(QilBinary ndSet, string iterName, Type iterType, MethodInfo methCreate, MethodInfo methNext)
protected QilNode VisitAverage(QilUnary ndAvg)
protected QilNode VisitSum(QilUnary ndSum)
protected QilNode VisitMinimum(QilUnary ndMin)
protected QilNode VisitMaximum(QilUnary ndMax)
private QilNode CreateAggregator(QilUnary ndAgg, string aggName, XmlILStorageMethods methods, MethodInfo methAgg, MethodInfo methResult)
protected QilNode VisitNegate(QilUnary ndNeg)
protected QilNode VisitAdd(QilBinary ndPlus)
protected QilNode VisitSubtract(QilBinary ndMinus)
protected QilNode VisitMultiply(QilBinary ndMul)
protected QilNode VisitDivide(QilBinary ndDiv)
protected QilNode VisitModulo(QilBinary ndMod)
private QilNode ArithmeticOp(QilBinary ndOp)
protected QilNode VisitStrLength(QilUnary ndLen)
protected QilNode VisitStrConcat(QilStrConcat ndStrConcat)
private void GenerateConcat(QilNode ndStr, LocalBuilder locStringConcat)
protected QilNode VisitStrParseQName(QilBinary ndParsedTagName)
private void VisitStrParseQName(QilBinary ndParsedTagName, bool preservePrefix)
protected QilNode VisitNe(QilBinary ndNe)
protected QilNode VisitEq(QilBinary ndEq)
protected QilNode VisitGt(QilBinary ndGt)
protected QilNode VisitGe(QilBinary ndGe)
protected QilNode VisitLt(QilBinary ndLt)
protected QilNode VisitLe(QilBinary ndLe)
private void Compare(QilBinary ndComp)
protected QilNode VisitIs(QilBinary ndIs)
protected QilNode VisitBefore(QilBinary ndBefore)
protected QilNode VisitAfter(QilBinary ndAfter)
private void ComparePosition(QilBinary ndComp)
protected QilNode VisitFor(QilIterator ndFor)
protected QilNode VisitLet(QilIterator ndLet)
protected QilNode VisitParameter(QilParameter ndParameter)
protected QilNode VisitLoop(QilLoop ndLoop)
protected QilNode VisitFilter(QilLoop ndFilter)
private bool HandleFilterPatterns(QilLoop ndFilter)
private void StartBinding(QilIterator ndIter)
private void StartForBinding(QilIterator ndFor, OptimizerPatterns patt)
public void StartLetBinding(QilIterator ndLet)
private void EndBinding(QilIterator ndIter)
protected QilNode VisitPositionOf(QilUnary ndPos)
protected QilNode VisitSort(QilLoop ndSort)
private void VisitSortKey(QilSortKey ndKey, LocalBuilder locKeys)
protected QilNode VisitDocOrderDistinct(QilUnary ndDod)
private bool HandleDodPatterns(QilUnary ndDod)
protected QilNode VisitInvoke(QilInvoke ndInvoke)
protected QilNode VisitContent(QilUnary ndContent)
protected QilNode VisitAttribute(QilBinary ndAttr)
protected QilNode VisitParent(QilUnary ndParent)
protected QilNode VisitRoot(QilUnary ndRoot)
protected QilNode VisitXmlContext(QilNode ndCtxt)
protected QilNode VisitDescendant(QilUnary ndDesc)
protected QilNode VisitDescendantOrSelf(QilUnary ndDesc)
protected QilNode VisitAncestor(QilUnary ndAnc)
protected QilNode VisitAncestorOrSelf(QilUnary ndAnc)
protected QilNode VisitPreceding(QilUnary ndPrec)
protected QilNode VisitFollowingSibling(QilUnary ndFollSib)
protected QilNode VisitPrecedingSibling(QilUnary ndPreSib)
protected QilNode VisitNodeRange(QilBinary ndRange)
protected QilNode VisitDeref(QilBinary ndDeref)
protected QilNode VisitElementCtor(QilBinary ndElem)
protected QilNode VisitAttributeCtor(QilBinary ndAttr)
protected QilNode VisitCommentCtor(QilUnary ndComment)
protected QilNode VisitPICtor(QilBinary ndPI)
protected QilNode VisitTextCtor(QilUnary ndText)
protected QilNode VisitRawTextCtor(QilUnary ndText)
private QilNode VisitTextCtor(QilUnary ndText, bool disableOutputEscaping)
protected QilNode VisitDocumentCtor(QilUnary ndDoc)
protected QilNode VisitNamespaceDecl(QilBinary ndNmsp)
protected QilNode VisitRtfCtor(QilBinary ndRtf)
protected QilNode VisitNameOf(QilUnary ndName)
protected QilNode VisitLocalNameOf(QilUnary ndName)
protected QilNode VisitNamespaceUriOf(QilUnary ndName)
protected QilNode VisitPrefixOf(QilUnary ndName)
private QilNode VisitNodeProperty(QilUnary ndProp)
protected QilNode VisitTypeAssert(QilTargetType ndTypeAssert)
protected QilNode VisitIsType(QilTargetType ndIsType)
private bool MatchesNodeKinds(QilTargetType ndIsType, XmlQueryType typDerived, XmlQueryType typBase)
protected QilNode VisitIsEmpty(QilUnary ndIsEmpty)
protected QilNode VisitXPathNodeValue(QilUnary ndVal)
protected QilNode VisitXPathFollowing(QilUnary ndFoll)
protected QilNode VisitXPathPreceding(QilUnary ndPrec)
protected QilNode VisitXPathNamespace(QilUnary ndNmsp)
protected QilNode VisitXsltGenerateId(QilUnary ndGenId)
protected QilNode VisitXsltInvokeLateBound(QilInvokeLateBound ndInvoke)
protected QilNode VisitXsltInvokeEarlyBound(QilInvokeEarlyBound ndInvoke)
protected QilNode VisitXsltCopy(QilBinary ndCopy)
protected QilNode VisitXsltCopyOf(QilUnary ndCopyOf)
protected QilNode VisitXsltConvert(QilTargetType ndConv)
private bool GetXsltConvertMethod(XmlQueryType typSrc, XmlQueryType typDst, MethodInfo& meth)
private void SyncToNavigator(LocalBuilder locNav, QilNode ndCtxt)
private void CreateSimpleIterator(QilNode ndCtxt, string iterName, Type iterType, MethodInfo methCreate, MethodInfo methNext)
private void CreateFilteredIterator(QilNode ndCtxt, string iterName, Type iterType, MethodInfo methCreate, MethodInfo methNext, XmlNodeKindFlags kinds, QilName ndName, TriState orSelf, QilNode ndEnd)
private void CreateContainerIterator(QilUnary ndDod, string iterName, Type iterType, MethodInfo methCreate, MethodInfo methNext, XmlNodeKindFlags kinds, QilName ndName, TriState orSelf)
private void GenerateSimpleIterator(Type itemStorageType, LocalBuilder locIter, MethodInfo methNext)
private void GenerateContainerIterator(QilNode nd, LocalBuilder locIter, Label lblOnEndNested, MethodInfo methNext, Type itemStorageType)
private GenerateNameType LoadNameAndType(XPathNodeType nodeType, QilNode ndName, bool isStart, bool callChk)
private bool TryZeroCompare(QilNodeType relOp, QilNode ndFirst, QilNode ndSecond)
private bool TryNameCompare(QilNodeType relOp, QilNode ndFirst, QilNode ndSecond)
private void ClrCompare(QilNodeType relOp, XmlTypeCode code)
private void ZeroCompare(QilNodeType relOp, bool isBoolVal)
private void StartWriterLoop(QilNode nd, Boolean& hasOnEnd, Label& lblOnEnd)
private void EndWriterLoop(QilNode nd, bool hasOnEnd, Label lblOnEnd)
private bool MightHaveNamespacesAfterAttributes(XmlILConstructInfo info)
private bool ElementCachesAttributes(XmlILConstructInfo info)
private void BeforeStartChecks(QilNode ndCtor)
private void AfterEndChecks(QilNode ndCtor)
private bool CheckWithinContent(XmlILConstructInfo info)
private bool CheckEnumAttrs(XmlILConstructInfo info)
private XPathNodeType QilXmlToXPathNodeType(XmlNodeKindFlags xmlTypes)
private XPathNodeType QilConstructorToNodeType(QilNodeType typ)
private void LoadSelectFilter(XmlNodeKindFlags xmlTypes, QilName ndName)
private bool IsNodeTypeUnion(XmlNodeKindFlags xmlTypes)
private void StartNestedIterator(QilNode nd)
private void StartNestedIterator(QilNode nd, Label lblOnEnd)
private void EndNestedIterator(QilNode nd)
private void NestedVisit(QilNode nd, Type itemStorageType, bool isCached)
private void NestedVisit(QilNode nd)
private void NestedVisit(QilNode nd, Label lblOnEnd)
private void NestedVisitEnsureStack(QilNode nd)
private void NestedVisitEnsureStack(QilNode ndLeft, QilNode ndRight)
private void NestedVisitEnsureStack(QilNode nd, Type itemStorageType, bool isCached)
private void NestedVisitEnsureLocal(QilNode nd, LocalBuilder loc)
private void NestedVisitWithBranch(QilNode nd, BranchingContext brctxt, Label lblBranch)
private void NestedVisitEnsureCache(QilNode nd, Type itemStorageType)
private bool CachesResult(QilNode nd)
private Type GetStorageType(QilNode nd)
private Type GetStorageType(XmlQueryType typ)
private Type GetItemStorageType(QilNode nd)
private Type GetItemStorageType(XmlQueryType typ)
}
internal System.Xml.Xsl.IListEnumerator`1 : ValueType {
private IList`1<T> sequence
private int index
private T current
public T Current
private object System.Collections.IEnumerator.Current
public void .ctor(IList`1<T> sequence)
public void Dispose()
public T get_Current()
private object System.Collections.IEnumerator.get_Current()
public bool MoveNext()
private void System.Collections.IEnumerator.Reset()
}
internal System.Xml.Xsl.Int32Pair : ValueType {
private int left
private int right
public int Left
public int Right
public void .ctor(int left, int right)
public int get_Left()
public int get_Right()
public bool Equals(object other)
public int GetHashCode()
}
internal System.Xml.Xsl.ISourceLineInfo {
public string Uri
public bool IsNoSource
public Location Start
public Location End
public string get_Uri()
public bool get_IsNoSource()
public Location get_Start()
public Location get_End()
}
public System.Xml.Xsl.IXsltContextFunction {
public int Minargs
public int Maxargs
public XPathResultType ReturnType
public XPathResultType[] ArgTypes
public int get_Minargs()
public int get_Maxargs()
public XPathResultType get_ReturnType()
public XPathResultType[] get_ArgTypes()
public object Invoke(XsltContext xsltContext, Object[] args, XPathNavigator docContext)
}
public System.Xml.Xsl.IXsltContextVariable {
public bool IsLocal
public bool IsParam
public XPathResultType VariableType
public bool get_IsLocal()
public bool get_IsParam()
public XPathResultType get_VariableType()
public object Evaluate(XsltContext xsltContext)
}
internal System.Xml.Xsl.ListBase`1 : object {
public int Count
public T Item
public bool IsFixedSize
public bool IsReadOnly
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private object System.Collections.IList.Item
public int get_Count()
public T get_Item(int index)
public void set_Item(int index, T value)
public bool Contains(T value)
public int IndexOf(T value)
public void CopyTo(T[] array, int index)
public IListEnumerator`1<T> GetEnumerator()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public void Add(T value)
public void Insert(int index, T value)
public bool Remove(T value)
public void RemoveAt(int index)
public void Clear()
private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private bool IsCompatibleType(object value)
}
internal System.Xml.Xsl.Location : ValueType {
private ulong value
public int Line
public int Pos
public int get_Line()
public int get_Pos()
public void .ctor(int line, int pos)
public void .ctor(Location that)
public bool LessOrEqual(Location that)
}
internal System.Xml.Xsl.Qil.IQilAnnotation {
public string Name
public string get_Name()
}
internal System.Xml.Xsl.Qil.QilBinary : QilNode {
private QilNode left
private QilNode right
public int Count
public QilNode Item
public QilNode Left
public QilNode Right
public void .ctor(QilNodeType nodeType, QilNode left, QilNode right)
public int get_Count()
public QilNode get_Item(int index)
public void set_Item(int index, QilNode value)
public QilNode get_Left()
public void set_Left(QilNode value)
public QilNode get_Right()
public void set_Right(QilNode value)
}
internal System.Xml.Xsl.Qil.QilChoice : QilBinary {
public QilNode Expression
public QilList Branches
public void .ctor(QilNodeType nodeType, QilNode expression, QilNode branches)
public QilNode get_Expression()
public void set_Expression(QilNode value)
public QilList get_Branches()
public void set_Branches(QilList value)
}
internal System.Xml.Xsl.Qil.QilCloneVisitor : QilScopedVisitor {
private QilFactory fac
private SubstitutionList subs
public void .ctor(QilFactory fac)
public void .ctor(QilFactory fac, SubstitutionList subs)
public QilNode Clone(QilNode node)
protected QilNode Visit(QilNode oldNode)
protected QilNode VisitChildren(QilNode parent)
protected QilNode VisitReference(QilNode oldNode)
protected void BeginScope(QilNode node)
protected void EndScope(QilNode node)
protected QilNode FindClonedReference(QilNode node)
}
internal System.Xml.Xsl.Qil.QilDataSource : QilBinary {
public QilNode Name
public QilNode BaseUri
public void .ctor(QilNodeType nodeType, QilNode name, QilNode baseUri)
public QilNode get_Name()
public void set_Name(QilNode value)
public QilNode get_BaseUri()
public void set_BaseUri(QilNode value)
}
internal System.Xml.Xsl.Qil.QilDepthChecker : object {
private int MAX_QIL_DEPTH
private Dictionary`2<QilNode, bool> visitedRef
public void Check(QilNode input)
private void Check(QilNode input, int depth)
}
internal System.Xml.Xsl.Qil.QilExpression : QilNode {
private QilFactory factory
private QilNode isDebug
private QilNode defWSet
private QilNode wsRules
private QilNode gloVars
private QilNode gloParams
private QilNode earlBnd
private QilNode funList
private QilNode rootNod
public int Count
public QilNode Item
public QilFactory Factory
public bool IsDebug
public XmlWriterSettings DefaultWriterSettings
public IList`1<WhitespaceRule> WhitespaceRules
public QilList GlobalParameterList
public QilList GlobalVariableList
public IList`1<EarlyBoundInfo> EarlyBoundTypes
public QilList FunctionList
public QilNode Root
public void .ctor(QilNodeType nodeType, QilNode root)
public void .ctor(QilNodeType nodeType, QilNode root, QilFactory factory)
public int get_Count()
public QilNode get_Item(int index)
public void set_Item(int index, QilNode value)
public QilFactory get_Factory()
public void set_Factory(QilFactory value)
public bool get_IsDebug()
public void set_IsDebug(bool value)
public XmlWriterSettings get_DefaultWriterSettings()
public void set_DefaultWriterSettings(XmlWriterSettings value)
public IList`1<WhitespaceRule> get_WhitespaceRules()
public void set_WhitespaceRules(IList`1<WhitespaceRule> value)
public QilList get_GlobalParameterList()
public void set_GlobalParameterList(QilList value)
public QilList get_GlobalVariableList()
public void set_GlobalVariableList(QilList value)
public IList`1<EarlyBoundInfo> get_EarlyBoundTypes()
public void set_EarlyBoundTypes(IList`1<EarlyBoundInfo> value)
public QilList get_FunctionList()
public void set_FunctionList(QilList value)
public QilNode get_Root()
public void set_Root(QilNode value)
}
internal System.Xml.Xsl.Qil.QilFactory : object {
private QilTypeChecker typeCheck
public QilTypeChecker TypeChecker
public QilTypeChecker get_TypeChecker()
public QilExpression QilExpression(QilNode root, QilFactory factory)
public QilList FunctionList(IList`1<QilNode> values)
public QilList GlobalVariableList(IList`1<QilNode> values)
public QilList GlobalParameterList(IList`1<QilNode> values)
public QilList ActualParameterList(IList`1<QilNode> values)
public QilList FormalParameterList(IList`1<QilNode> values)
public QilList SortKeyList(IList`1<QilNode> values)
public QilList BranchList(IList`1<QilNode> values)
public QilList Sequence(IList`1<QilNode> values)
public QilParameter Parameter(XmlQueryType xmlType)
public QilStrConcat StrConcat(QilNode values)
public QilName LiteralQName(string local)
public QilTargetType TypeAssert(QilNode expr, XmlQueryType xmlType)
public QilTargetType IsType(QilNode expr, XmlQueryType xmlType)
public QilTargetType XsltConvert(QilNode expr, XmlQueryType xmlType)
public QilFunction Function(QilNode arguments, QilNode sideEffects, XmlQueryType xmlType)
public QilExpression QilExpression(QilNode root)
public QilList FunctionList()
public QilList GlobalVariableList()
public QilList GlobalParameterList()
public QilList ActualParameterList()
public QilList FormalParameterList()
public QilList SortKeyList()
public QilList BranchList()
public QilUnary OptimizeBarrier(QilNode child)
public QilNode Unknown(XmlQueryType xmlType)
public QilDataSource DataSource(QilNode name, QilNode baseUri)
public QilUnary Nop(QilNode child)
public QilUnary Error(QilNode child)
public QilUnary Warning(QilNode child)
public QilIterator For(QilNode binding)
public QilIterator Let(QilNode binding)
public QilParameter Parameter(QilNode defaultValue, QilNode name, XmlQueryType xmlType)
public QilUnary PositionOf(QilNode child)
public QilNode True()
public QilNode False()
public QilLiteral LiteralString(string value)
public QilLiteral LiteralInt32(int value)
public QilLiteral LiteralInt64(long value)
public QilLiteral LiteralDouble(double value)
public QilLiteral LiteralDecimal(decimal value)
public QilName LiteralQName(string localName, string namespaceUri, string prefix)
public QilLiteral LiteralType(XmlQueryType value)
public QilLiteral LiteralObject(object value)
public QilBinary And(QilNode left, QilNode right)
public QilBinary Or(QilNode left, QilNode right)
public QilUnary Not(QilNode child)
public QilTernary Conditional(QilNode left, QilNode center, QilNode right)
public QilChoice Choice(QilNode expression, QilNode branches)
public QilUnary Length(QilNode child)
public QilList Sequence()
public QilBinary Union(QilNode left, QilNode right)
public QilBinary Intersection(QilNode left, QilNode right)
public QilBinary Difference(QilNode left, QilNode right)
public QilUnary Average(QilNode child)
public QilUnary Sum(QilNode child)
public QilUnary Minimum(QilNode child)
public QilUnary Maximum(QilNode child)
public QilUnary Negate(QilNode child)
public QilBinary Add(QilNode left, QilNode right)
public QilBinary Subtract(QilNode left, QilNode right)
public QilBinary Multiply(QilNode left, QilNode right)
public QilBinary Divide(QilNode left, QilNode right)
public QilBinary Modulo(QilNode left, QilNode right)
public QilUnary StrLength(QilNode child)
public QilStrConcat StrConcat(QilNode delimiter, QilNode values)
public QilBinary StrParseQName(QilNode left, QilNode right)
public QilBinary Ne(QilNode left, QilNode right)
public QilBinary Eq(QilNode left, QilNode right)
public QilBinary Gt(QilNode left, QilNode right)
public QilBinary Ge(QilNode left, QilNode right)
public QilBinary Lt(QilNode left, QilNode right)
public QilBinary Le(QilNode left, QilNode right)
public QilBinary Is(QilNode left, QilNode right)
public QilBinary After(QilNode left, QilNode right)
public QilBinary Before(QilNode left, QilNode right)
public QilLoop Loop(QilNode variable, QilNode body)
public QilLoop Filter(QilNode variable, QilNode body)
public QilLoop Sort(QilNode variable, QilNode body)
public QilSortKey SortKey(QilNode key, QilNode collation)
public QilUnary DocOrderDistinct(QilNode child)
public QilFunction Function(QilNode arguments, QilNode definition, QilNode sideEffects, XmlQueryType xmlType)
public QilInvoke Invoke(QilNode function, QilNode arguments)
public QilUnary Content(QilNode child)
public QilBinary Attribute(QilNode left, QilNode right)
public QilUnary Parent(QilNode child)
public QilUnary Root(QilNode child)
public QilNode XmlContext()
public QilUnary Descendant(QilNode child)
public QilUnary DescendantOrSelf(QilNode child)
public QilUnary Ancestor(QilNode child)
public QilUnary AncestorOrSelf(QilNode child)
public QilUnary Preceding(QilNode child)
public QilUnary FollowingSibling(QilNode child)
public QilUnary PrecedingSibling(QilNode child)
public QilBinary NodeRange(QilNode left, QilNode right)
public QilBinary Deref(QilNode left, QilNode right)
public QilBinary ElementCtor(QilNode left, QilNode right)
public QilBinary AttributeCtor(QilNode left, QilNode right)
public QilUnary CommentCtor(QilNode child)
public QilBinary PICtor(QilNode left, QilNode right)
public QilUnary TextCtor(QilNode child)
public QilUnary RawTextCtor(QilNode child)
public QilUnary DocumentCtor(QilNode child)
public QilBinary NamespaceDecl(QilNode left, QilNode right)
public QilBinary RtfCtor(QilNode left, QilNode right)
public QilUnary NameOf(QilNode child)
public QilUnary LocalNameOf(QilNode child)
public QilUnary NamespaceUriOf(QilNode child)
public QilUnary PrefixOf(QilNode child)
public QilTargetType TypeAssert(QilNode source, QilNode targetType)
public QilTargetType IsType(QilNode source, QilNode targetType)
public QilUnary IsEmpty(QilNode child)
public QilUnary XPathNodeValue(QilNode child)
public QilUnary XPathFollowing(QilNode child)
public QilUnary XPathPreceding(QilNode child)
public QilUnary XPathNamespace(QilNode child)
public QilUnary XsltGenerateId(QilNode child)
public QilInvokeLateBound XsltInvokeLateBound(QilNode name, QilNode arguments)
public QilInvokeEarlyBound XsltInvokeEarlyBound(QilNode name, QilNode clrMethod, QilNode arguments, XmlQueryType xmlType)
public QilBinary XsltCopy(QilNode left, QilNode right)
public QilUnary XsltCopyOf(QilNode child)
public QilTargetType XsltConvert(QilNode source, QilNode targetType)
public void TraceNode(QilNode n)
}
internal System.Xml.Xsl.Qil.QilFunction : QilReference {
private QilNode arguments
private QilNode definition
private QilNode sideEffects
public int Count
public QilNode Item
public QilList Arguments
public QilNode Definition
public bool MaybeSideEffects
public void .ctor(QilNodeType nodeType, QilNode arguments, QilNode definition, QilNode sideEffects, XmlQueryType resultType)
public int get_Count()
public QilNode get_Item(int index)
public void set_Item(int index, QilNode value)
public QilList get_Arguments()
public void set_Arguments(QilList value)
public QilNode get_Definition()
public void set_Definition(QilNode value)
public bool get_MaybeSideEffects()
public void set_MaybeSideEffects(bool value)
}
internal System.Xml.Xsl.Qil.QilInvoke : QilBinary {
public QilFunction Function
public QilList Arguments
public void .ctor(QilNodeType nodeType, QilNode function, QilNode arguments)
public QilFunction get_Function()
public void set_Function(QilFunction value)
public QilList get_Arguments()
public void set_Arguments(QilList value)
}
internal System.Xml.Xsl.Qil.QilInvokeEarlyBound : QilTernary {
public QilName Name
public MethodInfo ClrMethod
public QilList Arguments
public void .ctor(QilNodeType nodeType, QilNode name, QilNode method, QilNode arguments, XmlQueryType resultType)
public QilName get_Name()
public void set_Name(QilName value)
public MethodInfo get_ClrMethod()
public void set_ClrMethod(MethodInfo value)
public QilList get_Arguments()
public void set_Arguments(QilList value)
}
internal System.Xml.Xsl.Qil.QilInvokeLateBound : QilBinary {
public QilName Name
public QilList Arguments
public void .ctor(QilNodeType nodeType, QilNode name, QilNode arguments)
public QilName get_Name()
public void set_Name(QilName value)
public QilList get_Arguments()
public void set_Arguments(QilList value)
}
internal System.Xml.Xsl.Qil.QilIterator : QilReference {
private QilNode binding
public int Count
public QilNode Item
public QilNode Binding
public void .ctor(QilNodeType nodeType, QilNode binding)
public int get_Count()
public QilNode get_Item(int index)
public void set_Item(int index, QilNode value)
public QilNode get_Binding()
public void set_Binding(QilNode value)
}
internal System.Xml.Xsl.Qil.QilList : QilNode {
private int count
private QilNode[] members
public XmlQueryType XmlType
public int Count
public QilNode Item
public void .ctor(QilNodeType nodeType)
public XmlQueryType get_XmlType()
public QilNode ShallowClone(QilFactory f)
public int get_Count()
public QilNode get_Item(int index)
public void set_Item(int index, QilNode value)
public void Insert(int index, QilNode node)
public void RemoveAt(int index)
}
internal System.Xml.Xsl.Qil.QilLiteral : QilNode {
private object value
public object Value
public void .ctor(QilNodeType nodeType, object value)
public object get_Value()
public void set_Value(object value)
public string op_Implicit(QilLiteral literal)
public int op_Implicit(QilLiteral literal)
public long op_Implicit(QilLiteral literal)
public double op_Implicit(QilLiteral literal)
public decimal op_Implicit(QilLiteral literal)
public XmlQueryType op_Implicit(QilLiteral literal)
}
internal System.Xml.Xsl.Qil.QilLoop : QilBinary {
public QilIterator Variable
public QilNode Body
public void .ctor(QilNodeType nodeType, QilNode variable, QilNode body)
public QilIterator get_Variable()
public void set_Variable(QilIterator value)
public QilNode get_Body()
public void set_Body(QilNode value)
}
internal System.Xml.Xsl.Qil.QilName : QilLiteral {
private string local
private string uri
private string prefix
public string LocalName
public string NamespaceUri
public string Prefix
public string QualifiedName
public void .ctor(QilNodeType nodeType, string local, string uri, string prefix)
public string get_LocalName()
public void set_LocalName(string value)
public string get_NamespaceUri()
public void set_NamespaceUri(string value)
public string get_Prefix()
public void set_Prefix(string value)
public string get_QualifiedName()
public int GetHashCode()
public bool Equals(object other)
public bool op_Equality(QilName a, QilName b)
public bool op_Inequality(QilName a, QilName b)
public string ToString()
}
internal System.Xml.Xsl.Qil.QilNode : object {
protected QilNodeType nodeType
protected XmlQueryType xmlType
protected ISourceLineInfo sourceLine
protected object annotation
public QilNodeType NodeType
public XmlQueryType XmlType
public ISourceLineInfo SourceLine
public object Annotation
public int Count
public QilNode Item
public bool IsReadOnly
public void .ctor(QilNodeType nodeType)
public void .ctor(QilNodeType nodeType, XmlQueryType xmlType)
public QilNodeType get_NodeType()
public void set_NodeType(QilNodeType value)
public XmlQueryType get_XmlType()
public void set_XmlType(XmlQueryType value)
public ISourceLineInfo get_SourceLine()
public void set_SourceLine(ISourceLineInfo value)
public object get_Annotation()
public void set_Annotation(object value)
public QilNode DeepClone(QilFactory f)
public QilNode ShallowClone(QilFactory f)
public int get_Count()
public QilNode get_Item(int index)
public void set_Item(int index, QilNode value)
public void Insert(int index, QilNode node)
public void RemoveAt(int index)
public IEnumerator`1<QilNode> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool get_IsReadOnly()
public void Add(QilNode node)
public void Add(IList`1<QilNode> list)
public void Clear()
public bool Contains(QilNode node)
public void CopyTo(QilNode[] array, int index)
public bool Remove(QilNode node)
public int IndexOf(QilNode node)
}
internal System.Xml.Xsl.Qil.QilNodeType : Enum {
public int value__
public QilNodeType QilExpression
public QilNodeType FunctionList
public QilNodeType GlobalVariableList
public QilNodeType GlobalParameterList
public QilNodeType ActualParameterList
public QilNodeType FormalParameterList
public QilNodeType SortKeyList
public QilNodeType BranchList
public QilNodeType OptimizeBarrier
public QilNodeType Unknown
public QilNodeType DataSource
public QilNodeType Nop
public QilNodeType Error
public QilNodeType Warning
public QilNodeType For
public QilNodeType Let
public QilNodeType Parameter
public QilNodeType PositionOf
public QilNodeType True
public QilNodeType False
public QilNodeType LiteralString
public QilNodeType LiteralInt32
public QilNodeType LiteralInt64
public QilNodeType LiteralDouble
public QilNodeType LiteralDecimal
public QilNodeType LiteralQName
public QilNodeType LiteralType
public QilNodeType LiteralObject
public QilNodeType And
public QilNodeType Or
public QilNodeType Not
public QilNodeType Conditional
public QilNodeType Choice
public QilNodeType Length
public QilNodeType Sequence
public QilNodeType Union
public QilNodeType Intersection
public QilNodeType Difference
public QilNodeType Average
public QilNodeType Sum
public QilNodeType Minimum
public QilNodeType Maximum
public QilNodeType Negate
public QilNodeType Add
public QilNodeType Subtract
public QilNodeType Multiply
public QilNodeType Divide
public QilNodeType Modulo
public QilNodeType StrLength
public QilNodeType StrConcat
public QilNodeType StrParseQName
public QilNodeType Ne
public QilNodeType Eq
public QilNodeType Gt
public QilNodeType Ge
public QilNodeType Lt
public QilNodeType Le
public QilNodeType Is
public QilNodeType After
public QilNodeType Before
public QilNodeType Loop
public QilNodeType Filter
public QilNodeType Sort
public QilNodeType SortKey
public QilNodeType DocOrderDistinct
public QilNodeType Function
public QilNodeType Invoke
public QilNodeType Content
public QilNodeType Attribute
public QilNodeType Parent
public QilNodeType Root
public QilNodeType XmlContext
public QilNodeType Descendant
public QilNodeType DescendantOrSelf
public QilNodeType Ancestor
public QilNodeType AncestorOrSelf
public QilNodeType Preceding
public QilNodeType FollowingSibling
public QilNodeType PrecedingSibling
public QilNodeType NodeRange
public QilNodeType Deref
public QilNodeType ElementCtor
public QilNodeType AttributeCtor
public QilNodeType CommentCtor
public QilNodeType PICtor
public QilNodeType TextCtor
public QilNodeType RawTextCtor
public QilNodeType DocumentCtor
public QilNodeType NamespaceDecl
public QilNodeType RtfCtor
public QilNodeType NameOf
public QilNodeType LocalNameOf
public QilNodeType NamespaceUriOf
public QilNodeType PrefixOf
public QilNodeType TypeAssert
public QilNodeType IsType
public QilNodeType IsEmpty
public QilNodeType XPathNodeValue
public QilNodeType XPathFollowing
public QilNodeType XPathPreceding
public QilNodeType XPathNamespace
public QilNodeType XsltGenerateId
public QilNodeType XsltInvokeLateBound
public QilNodeType XsltInvokeEarlyBound
public QilNodeType XsltCopy
public QilNodeType XsltCopyOf
public QilNodeType XsltConvert
}
internal System.Xml.Xsl.Qil.QilParameter : QilIterator {
private QilNode name
public int Count
public QilNode Item
public QilNode DefaultValue
public QilName Name
public void .ctor(QilNodeType nodeType, QilNode defaultValue, QilNode name, XmlQueryType xmlType)
public int get_Count()
public QilNode get_Item(int index)
public void set_Item(int index, QilNode value)
public QilNode get_DefaultValue()
public void set_DefaultValue(QilNode value)
public QilName get_Name()
public void set_Name(QilName value)
}
internal System.Xml.Xsl.Qil.QilPatternFactory : object {
private bool debug
private QilFactory f
public QilFactory BaseFactory
public bool IsDebug
public void .ctor(QilFactory f, bool debug)
public QilFactory get_BaseFactory()
public bool get_IsDebug()
public QilLiteral String(string val)
public QilLiteral Int32(int val)
public QilLiteral Double(double val)
public QilName QName(string local, string uri, string prefix)
public QilName QName(string local, string uri)
public QilName QName(string local)
public QilNode Unknown(XmlQueryType t)
public QilExpression QilExpression(QilNode root, QilFactory factory)
public QilList FunctionList()
public QilList GlobalVariableList()
public QilList GlobalParameterList()
public QilList ActualParameterList()
public QilList ActualParameterList(QilNode arg1)
public QilList ActualParameterList(QilNode arg1, QilNode arg2)
public QilList ActualParameterList(QilNode[] args)
public QilList FormalParameterList()
public QilList FormalParameterList(QilNode arg1)
public QilList FormalParameterList(QilNode arg1, QilNode arg2)
public QilList FormalParameterList(QilNode[] args)
public QilList SortKeyList()
public QilList SortKeyList(QilSortKey key)
public QilList BranchList(QilNode[] args)
public QilNode OptimizeBarrier(QilNode child)
public QilNode DataSource(QilNode name, QilNode baseUri)
public QilNode Nop(QilNode child)
public QilNode Error(QilNode text)
public QilNode Warning(QilNode text)
public QilIterator For(QilNode binding)
public QilIterator Let(QilNode binding)
public QilParameter Parameter(XmlQueryType t)
public QilParameter Parameter(QilNode defaultValue, QilName name, XmlQueryType t)
public QilNode PositionOf(QilIterator expr)
public QilNode True()
public QilNode False()
public QilNode Boolean(bool b)
private void CheckLogicArg(QilNode arg)
public QilNode And(QilNode left, QilNode right)
public QilNode Or(QilNode left, QilNode right)
public QilNode Not(QilNode child)
public QilNode Conditional(QilNode condition, QilNode trueBranch, QilNode falseBranch)
public QilNode Choice(QilNode expr, QilList branches)
public QilNode Length(QilNode child)
public QilNode Sequence()
public QilNode Sequence(QilNode child)
public QilNode Sequence(QilNode child1, QilNode child2)
public QilNode Sequence(QilNode[] args)
public QilNode Union(QilNode left, QilNode right)
public QilNode Sum(QilNode collection)
public QilNode Negate(QilNode child)
public QilNode Add(QilNode left, QilNode right)
public QilNode Subtract(QilNode left, QilNode right)
public QilNode Multiply(QilNode left, QilNode right)
public QilNode Divide(QilNode left, QilNode right)
public QilNode Modulo(QilNode left, QilNode right)
public QilNode StrLength(QilNode str)
public QilNode StrConcat(QilNode values)
public QilNode StrConcat(QilNode[] args)
public QilNode StrConcat(IList`1<QilNode> args)
public QilNode StrParseQName(QilNode str, QilNode ns)
public QilNode Ne(QilNode left, QilNode right)
public QilNode Eq(QilNode left, QilNode right)
public QilNode Gt(QilNode left, QilNode right)
public QilNode Ge(QilNode left, QilNode right)
public QilNode Lt(QilNode left, QilNode right)
public QilNode Le(QilNode left, QilNode right)
public QilNode Is(QilNode left, QilNode right)
public QilNode After(QilNode left, QilNode right)
public QilNode Before(QilNode left, QilNode right)
public QilNode Loop(QilIterator variable, QilNode body)
public QilNode Filter(QilIterator variable, QilNode expr)
public QilNode Sort(QilIterator iter, QilNode keys)
public QilSortKey SortKey(QilNode key, QilNode collation)
public QilNode DocOrderDistinct(QilNode collection)
public QilFunction Function(QilList args, QilNode sideEffects, XmlQueryType resultType)
public QilFunction Function(QilList args, QilNode defn, QilNode sideEffects)
public QilNode Invoke(QilFunction func, QilList args)
public QilNode Content(QilNode context)
public QilNode Parent(QilNode context)
public QilNode Root(QilNode context)
public QilNode XmlContext()
public QilNode Descendant(QilNode expr)
public QilNode DescendantOrSelf(QilNode context)
public QilNode Ancestor(QilNode expr)
public QilNode AncestorOrSelf(QilNode expr)
public QilNode Preceding(QilNode expr)
public QilNode FollowingSibling(QilNode expr)
public QilNode PrecedingSibling(QilNode expr)
public QilNode NodeRange(QilNode left, QilNode right)
public QilBinary Deref(QilNode context, QilNode id)
public QilNode ElementCtor(QilNode name, QilNode content)
public QilNode AttributeCtor(QilNode name, QilNode val)
public QilNode CommentCtor(QilNode content)
public QilNode PICtor(QilNode name, QilNode content)
public QilNode TextCtor(QilNode content)
public QilNode RawTextCtor(QilNode content)
public QilNode DocumentCtor(QilNode child)
public QilNode NamespaceDecl(QilNode prefix, QilNode uri)
public QilNode RtfCtor(QilNode content, QilNode baseUri)
public QilNode NameOf(QilNode expr)
public QilNode LocalNameOf(QilNode expr)
public QilNode NamespaceUriOf(QilNode expr)
public QilNode PrefixOf(QilNode expr)
public QilNode TypeAssert(QilNode expr, XmlQueryType t)
public QilNode IsType(QilNode expr, XmlQueryType t)
public QilNode IsEmpty(QilNode set)
public QilNode XPathNodeValue(QilNode expr)
public QilNode XPathFollowing(QilNode expr)
public QilNode XPathNamespace(QilNode expr)
public QilNode XPathPreceding(QilNode expr)
public QilNode XsltGenerateId(QilNode expr)
public QilNode XsltInvokeEarlyBound(QilNode name, MethodInfo d, XmlQueryType t, IList`1<QilNode> args)
public QilNode XsltInvokeLateBound(QilNode name, IList`1<QilNode> args)
public QilNode XsltCopy(QilNode expr, QilNode content)
public QilNode XsltCopyOf(QilNode expr)
public QilNode XsltConvert(QilNode expr, XmlQueryType t)
}
internal System.Xml.Xsl.Qil.QilPatternVisitor : QilReplaceVisitor {
private QilPatterns patterns
private int replacementCnt
private int lastReplacement
private int threshold
public QilPatterns Patterns
public int Threshold
public int ReplacementCount
public int LastReplacement
public bool Matching
public void .ctor(QilPatterns patterns, QilFactory f)
public QilPatterns get_Patterns()
public void set_Patterns(QilPatterns value)
public int get_Threshold()
public void set_Threshold(int value)
public int get_ReplacementCount()
public int get_LastReplacement()
public bool get_Matching()
protected bool AllowReplace(int pattern, QilNode original)
protected QilNode Replace(int pattern, QilNode original, QilNode replacement)
protected QilNode NoReplace(QilNode node)
protected QilNode Visit(QilNode node)
protected QilNode VisitQilExpression(QilExpression n)
protected QilNode VisitFunctionList(QilList n)
protected QilNode VisitGlobalVariableList(QilList n)
protected QilNode VisitGlobalParameterList(QilList n)
protected QilNode VisitActualParameterList(QilList n)
protected QilNode VisitFormalParameterList(QilList n)
protected QilNode VisitSortKeyList(QilList n)
protected QilNode VisitBranchList(QilList n)
protected QilNode VisitOptimizeBarrier(QilUnary n)
protected QilNode VisitUnknown(QilNode n)
protected QilNode VisitDataSource(QilDataSource n)
protected QilNode VisitNop(QilUnary n)
protected QilNode VisitError(QilUnary n)
protected QilNode VisitWarning(QilUnary n)
protected QilNode VisitFor(QilIterator n)
protected QilNode VisitForReference(QilIterator n)
protected QilNode VisitLet(QilIterator n)
protected QilNode VisitLetReference(QilIterator n)
protected QilNode VisitParameter(QilParameter n)
protected QilNode VisitParameterReference(QilParameter n)
protected QilNode VisitPositionOf(QilUnary n)
protected QilNode VisitTrue(QilNode n)
protected QilNode VisitFalse(QilNode n)
protected QilNode VisitLiteralString(QilLiteral n)
protected QilNode VisitLiteralInt32(QilLiteral n)
protected QilNode VisitLiteralInt64(QilLiteral n)
protected QilNode VisitLiteralDouble(QilLiteral n)
protected QilNode VisitLiteralDecimal(QilLiteral n)
protected QilNode VisitLiteralQName(QilName n)
protected QilNode VisitLiteralType(QilLiteral n)
protected QilNode VisitLiteralObject(QilLiteral n)
protected QilNode VisitAnd(QilBinary n)
protected QilNode VisitOr(QilBinary n)
protected QilNode VisitNot(QilUnary n)
protected QilNode VisitConditional(QilTernary n)
protected QilNode VisitChoice(QilChoice n)
protected QilNode VisitLength(QilUnary n)
protected QilNode VisitSequence(QilList n)
protected QilNode VisitUnion(QilBinary n)
protected QilNode VisitIntersection(QilBinary n)
protected QilNode VisitDifference(QilBinary n)
protected QilNode VisitAverage(QilUnary n)
protected QilNode VisitSum(QilUnary n)
protected QilNode VisitMinimum(QilUnary n)
protected QilNode VisitMaximum(QilUnary n)
protected QilNode VisitNegate(QilUnary n)
protected QilNode VisitAdd(QilBinary n)
protected QilNode VisitSubtract(QilBinary n)
protected QilNode VisitMultiply(QilBinary n)
protected QilNode VisitDivide(QilBinary n)
protected QilNode VisitModulo(QilBinary n)
protected QilNode VisitStrLength(QilUnary n)
protected QilNode VisitStrConcat(QilStrConcat n)
protected QilNode VisitStrParseQName(QilBinary n)
protected QilNode VisitNe(QilBinary n)
protected QilNode VisitEq(QilBinary n)
protected QilNode VisitGt(QilBinary n)
protected QilNode VisitGe(QilBinary n)
protected QilNode VisitLt(QilBinary n)
protected QilNode VisitLe(QilBinary n)
protected QilNode VisitIs(QilBinary n)
protected QilNode VisitAfter(QilBinary n)
protected QilNode VisitBefore(QilBinary n)
protected QilNode VisitLoop(QilLoop n)
protected QilNode VisitFilter(QilLoop n)
protected QilNode VisitSort(QilLoop n)
protected QilNode VisitSortKey(QilSortKey n)
protected QilNode VisitDocOrderDistinct(QilUnary n)
protected QilNode VisitFunction(QilFunction n)
protected QilNode VisitFunctionReference(QilFunction n)
protected QilNode VisitInvoke(QilInvoke n)
protected QilNode VisitContent(QilUnary n)
protected QilNode VisitAttribute(QilBinary n)
protected QilNode VisitParent(QilUnary n)
protected QilNode VisitRoot(QilUnary n)
protected QilNode VisitXmlContext(QilNode n)
protected QilNode VisitDescendant(QilUnary n)
protected QilNode VisitDescendantOrSelf(QilUnary n)
protected QilNode VisitAncestor(QilUnary n)
protected QilNode VisitAncestorOrSelf(QilUnary n)
protected QilNode VisitPreceding(QilUnary n)
protected QilNode VisitFollowingSibling(QilUnary n)
protected QilNode VisitPrecedingSibling(QilUnary n)
protected QilNode VisitNodeRange(QilBinary n)
protected QilNode VisitDeref(QilBinary n)
protected QilNode VisitElementCtor(QilBinary n)
protected QilNode VisitAttributeCtor(QilBinary n)
protected QilNode VisitCommentCtor(QilUnary n)
protected QilNode VisitPICtor(QilBinary n)
protected QilNode VisitTextCtor(QilUnary n)
protected QilNode VisitRawTextCtor(QilUnary n)
protected QilNode VisitDocumentCtor(QilUnary n)
protected QilNode VisitNamespaceDecl(QilBinary n)
protected QilNode VisitRtfCtor(QilBinary n)
protected QilNode VisitNameOf(QilUnary n)
protected QilNode VisitLocalNameOf(QilUnary n)
protected QilNode VisitNamespaceUriOf(QilUnary n)
protected QilNode VisitPrefixOf(QilUnary n)
protected QilNode VisitTypeAssert(QilTargetType n)
protected QilNode VisitIsType(QilTargetType n)
protected QilNode VisitIsEmpty(QilUnary n)
protected QilNode VisitXPathNodeValue(QilUnary n)
protected QilNode VisitXPathFollowing(QilUnary n)
protected QilNode VisitXPathPreceding(QilUnary n)
protected QilNode VisitXPathNamespace(QilUnary n)
protected QilNode VisitXsltGenerateId(QilUnary n)
protected QilNode VisitXsltInvokeLateBound(QilInvokeLateBound n)
protected QilNode VisitXsltInvokeEarlyBound(QilInvokeEarlyBound n)
protected QilNode VisitXsltCopy(QilBinary n)
protected QilNode VisitXsltCopyOf(QilUnary n)
protected QilNode VisitXsltConvert(QilTargetType n)
}
internal System.Xml.Xsl.Qil.QilReference : QilNode {
private int MaxDebugNameLength
private string debugName
public string DebugName
public void .ctor(QilNodeType nodeType)
public string get_DebugName()
public void set_DebugName(string value)
}
internal System.Xml.Xsl.Qil.QilReplaceVisitor : QilVisitor {
protected QilFactory f
public void .ctor(QilFactory f)
protected QilNode VisitChildren(QilNode parent)
protected void RecalculateType(QilNode node, XmlQueryType oldType)
}
internal System.Xml.Xsl.Qil.QilScopedVisitor : QilVisitor {
protected void BeginScope(QilNode node)
protected void EndScope(QilNode node)
protected void BeforeVisit(QilNode node)
protected void AfterVisit(QilNode node)
protected QilNode Visit(QilNode n)
}
internal System.Xml.Xsl.Qil.QilSortKey : QilBinary {
public QilNode Key
public QilNode Collation
public void .ctor(QilNodeType nodeType, QilNode key, QilNode collation)
public QilNode get_Key()
public void set_Key(QilNode value)
public QilNode get_Collation()
public void set_Collation(QilNode value)
}
internal System.Xml.Xsl.Qil.QilStrConcat : QilBinary {
public QilNode Delimiter
public QilNode Values
public void .ctor(QilNodeType nodeType, QilNode delimiter, QilNode values)
public QilNode get_Delimiter()
public void set_Delimiter(QilNode value)
public QilNode get_Values()
public void set_Values(QilNode value)
}
internal System.Xml.Xsl.Qil.QilTargetType : QilBinary {
public QilNode Source
public XmlQueryType TargetType
public void .ctor(QilNodeType nodeType, QilNode expr, QilNode targetType)
public QilNode get_Source()
public void set_Source(QilNode value)
public XmlQueryType get_TargetType()
public void set_TargetType(XmlQueryType value)
}
internal System.Xml.Xsl.Qil.QilTernary : QilNode {
private QilNode left
private QilNode center
private QilNode right
public int Count
public QilNode Item
public QilNode Left
public QilNode Center
public QilNode Right
public void .ctor(QilNodeType nodeType, QilNode left, QilNode center, QilNode right)
public int get_Count()
public QilNode get_Item(int index)
public void set_Item(int index, QilNode value)
public QilNode get_Left()
public void set_Left(QilNode value)
public QilNode get_Center()
public void set_Center(QilNode value)
public QilNode get_Right()
public void set_Right(QilNode value)
}
internal System.Xml.Xsl.Qil.QilTypeChecker : object {
public XmlQueryType Check(QilNode n)
public XmlQueryType CheckQilExpression(QilExpression node)
public XmlQueryType CheckFunctionList(QilList node)
public XmlQueryType CheckGlobalVariableList(QilList node)
public XmlQueryType CheckGlobalParameterList(QilList node)
public XmlQueryType CheckActualParameterList(QilList node)
public XmlQueryType CheckFormalParameterList(QilList node)
public XmlQueryType CheckSortKeyList(QilList node)
public XmlQueryType CheckBranchList(QilList node)
public XmlQueryType CheckOptimizeBarrier(QilUnary node)
public XmlQueryType CheckUnknown(QilNode node)
public XmlQueryType CheckDataSource(QilDataSource node)
public XmlQueryType CheckNop(QilUnary node)
public XmlQueryType CheckError(QilUnary node)
public XmlQueryType CheckWarning(QilUnary node)
public XmlQueryType CheckFor(QilIterator node)
public XmlQueryType CheckLet(QilIterator node)
public XmlQueryType CheckParameter(QilParameter node)
public XmlQueryType CheckPositionOf(QilUnary node)
public XmlQueryType CheckTrue(QilNode node)
public XmlQueryType CheckFalse(QilNode node)
public XmlQueryType CheckLiteralString(QilLiteral node)
public XmlQueryType CheckLiteralInt32(QilLiteral node)
public XmlQueryType CheckLiteralInt64(QilLiteral node)
public XmlQueryType CheckLiteralDouble(QilLiteral node)
public XmlQueryType CheckLiteralDecimal(QilLiteral node)
public XmlQueryType CheckLiteralQName(QilName node)
public XmlQueryType CheckLiteralType(QilLiteral node)
public XmlQueryType CheckLiteralObject(QilLiteral node)
public XmlQueryType CheckAnd(QilBinary node)
public XmlQueryType CheckOr(QilBinary node)
public XmlQueryType CheckNot(QilUnary node)
public XmlQueryType CheckConditional(QilTernary node)
public XmlQueryType CheckChoice(QilChoice node)
public XmlQueryType CheckLength(QilUnary node)
public XmlQueryType CheckSequence(QilList node)
public XmlQueryType CheckUnion(QilBinary node)
public XmlQueryType CheckIntersection(QilBinary node)
public XmlQueryType CheckDifference(QilBinary node)
public XmlQueryType CheckAverage(QilUnary node)
public XmlQueryType CheckSum(QilUnary node)
public XmlQueryType CheckMinimum(QilUnary node)
public XmlQueryType CheckMaximum(QilUnary node)
public XmlQueryType CheckNegate(QilUnary node)
public XmlQueryType CheckAdd(QilBinary node)
public XmlQueryType CheckSubtract(QilBinary node)
public XmlQueryType CheckMultiply(QilBinary node)
public XmlQueryType CheckDivide(QilBinary node)
public XmlQueryType CheckModulo(QilBinary node)
public XmlQueryType CheckStrLength(QilUnary node)
public XmlQueryType CheckStrConcat(QilStrConcat node)
public XmlQueryType CheckStrParseQName(QilBinary node)
public XmlQueryType CheckNe(QilBinary node)
public XmlQueryType CheckEq(QilBinary node)
public XmlQueryType CheckGt(QilBinary node)
public XmlQueryType CheckGe(QilBinary node)
public XmlQueryType CheckLt(QilBinary node)
public XmlQueryType CheckLe(QilBinary node)
public XmlQueryType CheckIs(QilBinary node)
public XmlQueryType CheckAfter(QilBinary node)
public XmlQueryType CheckBefore(QilBinary node)
public XmlQueryType CheckLoop(QilLoop node)
public XmlQueryType CheckFilter(QilLoop node)
public XmlQueryType CheckSort(QilLoop node)
public XmlQueryType CheckSortKey(QilSortKey node)
public XmlQueryType CheckDocOrderDistinct(QilUnary node)
public XmlQueryType CheckFunction(QilFunction node)
public XmlQueryType CheckInvoke(QilInvoke node)
public XmlQueryType CheckContent(QilUnary node)
public XmlQueryType CheckAttribute(QilBinary node)
public XmlQueryType CheckParent(QilUnary node)
public XmlQueryType CheckRoot(QilUnary node)
public XmlQueryType CheckXmlContext(QilNode node)
public XmlQueryType CheckDescendant(QilUnary node)
public XmlQueryType CheckDescendantOrSelf(QilUnary node)
public XmlQueryType CheckAncestor(QilUnary node)
public XmlQueryType CheckAncestorOrSelf(QilUnary node)
public XmlQueryType CheckPreceding(QilUnary node)
public XmlQueryType CheckFollowingSibling(QilUnary node)
public XmlQueryType CheckPrecedingSibling(QilUnary node)
public XmlQueryType CheckNodeRange(QilBinary node)
public XmlQueryType CheckDeref(QilBinary node)
public XmlQueryType CheckElementCtor(QilBinary node)
public XmlQueryType CheckAttributeCtor(QilBinary node)
public XmlQueryType CheckCommentCtor(QilUnary node)
public XmlQueryType CheckPICtor(QilBinary node)
public XmlQueryType CheckTextCtor(QilUnary node)
public XmlQueryType CheckRawTextCtor(QilUnary node)
public XmlQueryType CheckDocumentCtor(QilUnary node)
public XmlQueryType CheckNamespaceDecl(QilBinary node)
public XmlQueryType CheckRtfCtor(QilBinary node)
public XmlQueryType CheckNameOf(QilUnary node)
public XmlQueryType CheckLocalNameOf(QilUnary node)
public XmlQueryType CheckNamespaceUriOf(QilUnary node)
public XmlQueryType CheckPrefixOf(QilUnary node)
public XmlQueryType CheckDeepCopy(QilUnary node)
public XmlQueryType CheckTypeAssert(QilTargetType node)
public XmlQueryType CheckIsType(QilTargetType node)
public XmlQueryType CheckIsEmpty(QilUnary node)
public XmlQueryType CheckXPathNodeValue(QilUnary node)
public XmlQueryType CheckXPathFollowing(QilUnary node)
public XmlQueryType CheckXPathPreceding(QilUnary node)
public XmlQueryType CheckXPathNamespace(QilUnary node)
public XmlQueryType CheckXsltGenerateId(QilUnary node)
public XmlQueryType CheckXsltInvokeLateBound(QilInvokeLateBound node)
public XmlQueryType CheckXsltInvokeEarlyBound(QilInvokeEarlyBound node)
public XmlQueryType CheckXsltCopy(QilBinary node)
public XmlQueryType CheckXsltCopyOf(QilUnary node)
public XmlQueryType CheckXsltConvert(QilTargetType node)
private void Check(bool value, QilNode node, string message)
private void CheckLiteralValue(QilNode node, Type clrTypeValue)
private void CheckClass(QilNode node, Type clrTypeClass)
private void CheckClassAndNodeType(QilNode node, Type clrTypeClass, QilNodeType nodeType)
private void CheckXmlType(QilNode node, XmlQueryType xmlType)
private void CheckNumericX(QilNode node)
private void CheckNumericXS(QilNode node)
private void CheckAtomicX(QilNode node)
private void CheckNotDisjoint(QilBinary node)
private XmlQueryType DistinctType(XmlQueryType type)
private XmlQueryType FindFilterType(QilIterator variable, QilNode body)
}
internal System.Xml.Xsl.Qil.QilUnary : QilNode {
private QilNode child
public int Count
public QilNode Item
public QilNode Child
public void .ctor(QilNodeType nodeType, QilNode child)
public int get_Count()
public QilNode get_Item(int index)
public void set_Item(int index, QilNode value)
public QilNode get_Child()
public void set_Child(QilNode value)
}
internal System.Xml.Xsl.Qil.QilValidationVisitor : QilScopedVisitor {
private SubstitutionList subs
private QilTypeChecker typeCheck
public void Validate(QilNode node)
internal void SetError(QilNode n, string message)
}
internal System.Xml.Xsl.Qil.QilVisitor : object {
protected QilNode VisitAssumeReference(QilNode expr)
protected QilNode VisitChildren(QilNode parent)
protected bool IsReference(QilNode parent, int childNum)
protected QilNode Visit(QilNode n)
protected QilNode VisitReference(QilNode n)
protected QilNode VisitNull()
protected QilNode VisitQilExpression(QilExpression n)
protected QilNode VisitFunctionList(QilList n)
protected QilNode VisitGlobalVariableList(QilList n)
protected QilNode VisitGlobalParameterList(QilList n)
protected QilNode VisitActualParameterList(QilList n)
protected QilNode VisitFormalParameterList(QilList n)
protected QilNode VisitSortKeyList(QilList n)
protected QilNode VisitBranchList(QilList n)
protected QilNode VisitOptimizeBarrier(QilUnary n)
protected QilNode VisitUnknown(QilNode n)
protected QilNode VisitDataSource(QilDataSource n)
protected QilNode VisitNop(QilUnary n)
protected QilNode VisitError(QilUnary n)
protected QilNode VisitWarning(QilUnary n)
protected QilNode VisitFor(QilIterator n)
protected QilNode VisitForReference(QilIterator n)
protected QilNode VisitLet(QilIterator n)
protected QilNode VisitLetReference(QilIterator n)
protected QilNode VisitParameter(QilParameter n)
protected QilNode VisitParameterReference(QilParameter n)
protected QilNode VisitPositionOf(QilUnary n)
protected QilNode VisitTrue(QilNode n)
protected QilNode VisitFalse(QilNode n)
protected QilNode VisitLiteralString(QilLiteral n)
protected QilNode VisitLiteralInt32(QilLiteral n)
protected QilNode VisitLiteralInt64(QilLiteral n)
protected QilNode VisitLiteralDouble(QilLiteral n)
protected QilNode VisitLiteralDecimal(QilLiteral n)
protected QilNode VisitLiteralQName(QilName n)
protected QilNode VisitLiteralType(QilLiteral n)
protected QilNode VisitLiteralObject(QilLiteral n)
protected QilNode VisitAnd(QilBinary n)
protected QilNode VisitOr(QilBinary n)
protected QilNode VisitNot(QilUnary n)
protected QilNode VisitConditional(QilTernary n)
protected QilNode VisitChoice(QilChoice n)
protected QilNode VisitLength(QilUnary n)
protected QilNode VisitSequence(QilList n)
protected QilNode VisitUnion(QilBinary n)
protected QilNode VisitIntersection(QilBinary n)
protected QilNode VisitDifference(QilBinary n)
protected QilNode VisitAverage(QilUnary n)
protected QilNode VisitSum(QilUnary n)
protected QilNode VisitMinimum(QilUnary n)
protected QilNode VisitMaximum(QilUnary n)
protected QilNode VisitNegate(QilUnary n)
protected QilNode VisitAdd(QilBinary n)
protected QilNode VisitSubtract(QilBinary n)
protected QilNode VisitMultiply(QilBinary n)
protected QilNode VisitDivide(QilBinary n)
protected QilNode VisitModulo(QilBinary n)
protected QilNode VisitStrLength(QilUnary n)
protected QilNode VisitStrConcat(QilStrConcat n)
protected QilNode VisitStrParseQName(QilBinary n)
protected QilNode VisitNe(QilBinary n)
protected QilNode VisitEq(QilBinary n)
protected QilNode VisitGt(QilBinary n)
protected QilNode VisitGe(QilBinary n)
protected QilNode VisitLt(QilBinary n)
protected QilNode VisitLe(QilBinary n)
protected QilNode VisitIs(QilBinary n)
protected QilNode VisitAfter(QilBinary n)
protected QilNode VisitBefore(QilBinary n)
protected QilNode VisitLoop(QilLoop n)
protected QilNode VisitFilter(QilLoop n)
protected QilNode VisitSort(QilLoop n)
protected QilNode VisitSortKey(QilSortKey n)
protected QilNode VisitDocOrderDistinct(QilUnary n)
protected QilNode VisitFunction(QilFunction n)
protected QilNode VisitFunctionReference(QilFunction n)
protected QilNode VisitInvoke(QilInvoke n)
protected QilNode VisitContent(QilUnary n)
protected QilNode VisitAttribute(QilBinary n)
protected QilNode VisitParent(QilUnary n)
protected QilNode VisitRoot(QilUnary n)
protected QilNode VisitXmlContext(QilNode n)
protected QilNode VisitDescendant(QilUnary n)
protected QilNode VisitDescendantOrSelf(QilUnary n)
protected QilNode VisitAncestor(QilUnary n)
protected QilNode VisitAncestorOrSelf(QilUnary n)
protected QilNode VisitPreceding(QilUnary n)
protected QilNode VisitFollowingSibling(QilUnary n)
protected QilNode VisitPrecedingSibling(QilUnary n)
protected QilNode VisitNodeRange(QilBinary n)
protected QilNode VisitDeref(QilBinary n)
protected QilNode VisitElementCtor(QilBinary n)
protected QilNode VisitAttributeCtor(QilBinary n)
protected QilNode VisitCommentCtor(QilUnary n)
protected QilNode VisitPICtor(QilBinary n)
protected QilNode VisitTextCtor(QilUnary n)
protected QilNode VisitRawTextCtor(QilUnary n)
protected QilNode VisitDocumentCtor(QilUnary n)
protected QilNode VisitNamespaceDecl(QilBinary n)
protected QilNode VisitRtfCtor(QilBinary n)
protected QilNode VisitNameOf(QilUnary n)
protected QilNode VisitLocalNameOf(QilUnary n)
protected QilNode VisitNamespaceUriOf(QilUnary n)
protected QilNode VisitPrefixOf(QilUnary n)
protected QilNode VisitTypeAssert(QilTargetType n)
protected QilNode VisitIsType(QilTargetType n)
protected QilNode VisitIsEmpty(QilUnary n)
protected QilNode VisitXPathNodeValue(QilUnary n)
protected QilNode VisitXPathFollowing(QilUnary n)
protected QilNode VisitXPathPreceding(QilUnary n)
protected QilNode VisitXPathNamespace(QilUnary n)
protected QilNode VisitXsltGenerateId(QilUnary n)
protected QilNode VisitXsltInvokeLateBound(QilInvokeLateBound n)
protected QilNode VisitXsltInvokeEarlyBound(QilInvokeEarlyBound n)
protected QilNode VisitXsltCopy(QilBinary n)
protected QilNode VisitXsltCopyOf(QilUnary n)
protected QilNode VisitXsltConvert(QilTargetType n)
}
internal System.Xml.Xsl.Qil.QilXmlReader : object {
private Regex lineInfoRegex
private Regex typeInfoRegex
private Dictionary`2<string, MethodInfo> nameToFactoryMethod
private QilFactory f
private XmlReader r
private Stack`1<QilList> stk
private bool inFwdDecls
private Dictionary`2<string, QilNode> scope
private Dictionary`2<string, QilNode> fwdDecls
public void .ctor(XmlReader r)
public QilExpression Read()
private bool StartElement()
private void EndElement()
private string ReadText()
private ISourceLineInfo ParseLineInfo(string s)
private XmlQueryType ParseType(string s)
private QilName ParseName(string name)
}
internal System.Xml.Xsl.Qil.QilXmlWriter : QilScopedVisitor {
protected XmlWriter writer
protected Options options
private NameGenerator ngen
public void .ctor(XmlWriter writer)
public void .ctor(XmlWriter writer, Options options)
public void ToXml(QilNode node)
protected void WriteAnnotations(object ann)
protected void WriteLineInfo(QilNode node)
protected void WriteXmlType(QilNode node)
protected QilNode VisitChildren(QilNode node)
protected QilNode VisitReference(QilNode node)
protected QilNode VisitQilExpression(QilExpression qil)
protected QilNode VisitLiteralType(QilLiteral value)
protected QilNode VisitLiteralQName(QilName value)
protected void BeginScope(QilNode node)
protected void EndScope(QilNode node)
protected void BeforeVisit(QilNode node)
protected void AfterVisit(QilNode node)
}
internal System.Xml.Xsl.Qil.SerializationHints : Enum {
public int value__
public SerializationHints None
public SerializationHints CData
public SerializationHints DisableOutputEscaping
}
internal System.Xml.Xsl.Qil.SubstitutionList : object {
private ArrayList s
public void AddSubstitutionPair(QilNode find, QilNode replace)
public void RemoveLastSubstitutionPair()
public void RemoveLastNSubstitutionPairs(int n)
public QilNode FindReplacement(QilNode n)
}
internal System.Xml.Xsl.Qil.WhitespaceRule : object {
private string localName
private string namespaceName
private bool preserveSpace
public string LocalName
public string NamespaceName
public bool PreserveSpace
public void .ctor(string localName, string namespaceName, bool preserveSpace)
protected void Init(string localName, string namespaceName, bool preserveSpace)
public string get_LocalName()
public void set_LocalName(string value)
public string get_NamespaceName()
public void set_NamespaceName(string value)
public bool get_PreserveSpace()
public void GetObjectData(XmlQueryDataWriter writer)
public void .ctor(XmlQueryDataReader reader)
}
internal System.Xml.Xsl.QueryReaderSettings : object {
private bool validatingReader
private XmlReaderSettings xmlReaderSettings
private XmlNameTable xmlNameTable
private EntityHandling entityHandling
private bool namespaces
private bool normalization
private bool prohibitDtd
private WhitespaceHandling whitespaceHandling
private XmlResolver xmlResolver
public XmlNameTable NameTable
public void .ctor(XmlNameTable xmlNameTable)
public void .ctor(XmlReader reader)
public XmlReader CreateReader(Stream stream, string baseUri)
public XmlNameTable get_NameTable()
}
public System.Xml.Xsl.Runtime.AncestorDocOrderIterator : ValueType {
private XmlNavigatorStack stack
private XPathNavigator navCurrent
public XPathNavigator Current
public void Create(XPathNavigator context, XmlNavigatorFilter filter, bool orSelf)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.AncestorIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
private bool haveCurrent
public XPathNavigator Current
public void Create(XPathNavigator context, XmlNavigatorFilter filter, bool orSelf)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.AttributeContentIterator : ValueType {
private XPathNavigator navCurrent
private bool needFirst
public XPathNavigator Current
public void Create(XPathNavigator context)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.AttributeIterator : ValueType {
private XPathNavigator navCurrent
private bool needFirst
public XPathNavigator Current
public void Create(XPathNavigator context)
public bool MoveNext()
public XPathNavigator get_Current()
}
internal System.Xml.Xsl.Runtime.CharUtil : object {
public bool IsAlphaNumeric(char ch)
public bool IsDecimalDigitOne(char ch)
}
public System.Xml.Xsl.Runtime.ContentIterator : ValueType {
private XPathNavigator navCurrent
private bool needFirst
public XPathNavigator Current
public void Create(XPathNavigator context)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.ContentMergeIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
private XPathNavigator navNext
private XmlNavigatorStack navStack
private IteratorState state
public XPathNavigator Current
public void Create(XmlNavigatorFilter filter)
public IteratorResult MoveNext(XPathNavigator input)
internal IteratorResult MoveNext(XPathNavigator input, bool isContent)
public XPathNavigator get_Current()
private IteratorResult DocOrderMerge()
}
public System.Xml.Xsl.Runtime.DecimalAggregator : ValueType {
private decimal result
private int cnt
public decimal SumResult
public decimal AverageResult
public decimal MinimumResult
public decimal MaximumResult
public bool IsEmpty
public void Create()
public void Sum(decimal value)
public void Average(decimal value)
public void Minimum(decimal value)
public void Maximum(decimal value)
public decimal get_SumResult()
public decimal get_AverageResult()
public decimal get_MinimumResult()
public decimal get_MaximumResult()
public bool get_IsEmpty()
}
internal System.Xml.Xsl.Runtime.DecimalFormat : object {
public NumberFormatInfo info
public char digit
public char zeroDigit
public char patternSeparator
internal void .ctor(NumberFormatInfo info, char digit, char zeroDigit, char patternSeparator)
}
internal System.Xml.Xsl.Runtime.DecimalFormatter : object {
private NumberFormatInfo posFormatInfo
private NumberFormatInfo negFormatInfo
private string posFormat
private string negFormat
private char zeroDigit
private string ClrSpecialChars
private char EscChar
public void .ctor(string formatPicture, DecimalFormat decimalFormat)
private int RemoveTrailingComma(StringBuilder builder, int commaIndex, int decimalIndex)
public string Format(double value)
public string Format(double value, string formatPicture, DecimalFormat decimalFormat)
}
public System.Xml.Xsl.Runtime.DescendantIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
private XPathNavigator navEnd
private bool hasFirst
public XPathNavigator Current
public void Create(XPathNavigator input, XmlNavigatorFilter filter, bool orSelf)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.DescendantMergeIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
private XPathNavigator navRoot
private XPathNavigator navEnd
private IteratorState state
private bool orSelf
public XPathNavigator Current
public void Create(XmlNavigatorFilter filter, bool orSelf)
public IteratorResult MoveNext(XPathNavigator input)
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.DifferenceIterator : ValueType {
private XmlQueryRuntime runtime
private XPathNavigator navLeft
private XPathNavigator navRight
private IteratorState state
public XPathNavigator Current
public void Create(XmlQueryRuntime runtime)
public SetIteratorResult MoveNext(XPathNavigator nestedNavigator)
public XPathNavigator get_Current()
}
internal System.Xml.Xsl.Runtime.DocumentOrderComparer : object {
private List`1<XPathNavigator> roots
public int Compare(XPathNavigator navThis, XPathNavigator navThat)
public int GetDocumentIndex(XPathNavigator nav)
}
public System.Xml.Xsl.Runtime.DodSequenceMerge : ValueType {
private IList`1<XPathNavigator> firstSequence
private List`1<IEnumerator`1<XPathNavigator>> sequencesToMerge
private int nodeCount
private XmlQueryRuntime runtime
public void Create(XmlQueryRuntime runtime)
public void AddSequence(IList`1<XPathNavigator> sequence)
public IList`1<XPathNavigator> MergeSequences()
private void MoveAndInsertSequence(IEnumerator`1<XPathNavigator> sequence)
private void InsertSequence(IEnumerator`1<XPathNavigator> sequence)
}
public System.Xml.Xsl.Runtime.DoubleAggregator : ValueType {
private double result
private int cnt
public double SumResult
public double AverageResult
public double MinimumResult
public double MaximumResult
public bool IsEmpty
public void Create()
public void Sum(double value)
public void Average(double value)
public void Minimum(double value)
public void Maximum(double value)
public double get_SumResult()
public double get_AverageResult()
public double get_MinimumResult()
public double get_MaximumResult()
public bool get_IsEmpty()
}
internal System.Xml.Xsl.Runtime.EarlyBoundInfo : object {
private string namespaceUri
private ConstructorInfo constrInfo
public string NamespaceUri
public Type EarlyBoundType
public void .ctor(string namespaceUri, Type ebType)
public string get_NamespaceUri()
public Type get_EarlyBoundType()
public object CreateObject()
public bool Equals(object obj)
public int GetHashCode()
}
public System.Xml.Xsl.Runtime.ElementContentIterator : ValueType {
private string localName
private string ns
private XPathNavigator navCurrent
private bool needFirst
public XPathNavigator Current
public void Create(XPathNavigator context, string localName, string ns)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.FollowingSiblingIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
public XPathNavigator Current
public void Create(XPathNavigator context, XmlNavigatorFilter filter)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator : ValueType {
private ContentMergeIterator wrapped
public XPathNavigator Current
public void Create(XmlNavigatorFilter filter)
public IteratorResult MoveNext(XPathNavigator navigator)
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.IdIterator : ValueType {
private XPathNavigator navCurrent
private String[] idrefs
private int idx
public XPathNavigator Current
public void Create(XPathNavigator context, string value)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.Int32Aggregator : ValueType {
private int result
private int cnt
public int SumResult
public int AverageResult
public int MinimumResult
public int MaximumResult
public bool IsEmpty
public void Create()
public void Sum(int value)
public void Average(int value)
public void Minimum(int value)
public void Maximum(int value)
public int get_SumResult()
public int get_AverageResult()
public int get_MinimumResult()
public int get_MaximumResult()
public bool get_IsEmpty()
}
public System.Xml.Xsl.Runtime.Int64Aggregator : ValueType {
private long result
private int cnt
public long SumResult
public long AverageResult
public long MinimumResult
public long MaximumResult
public bool IsEmpty
public void Create()
public void Sum(long value)
public void Average(long value)
public void Minimum(long value)
public void Maximum(long value)
public long get_SumResult()
public long get_AverageResult()
public long get_MinimumResult()
public long get_MaximumResult()
public bool get_IsEmpty()
}
public System.Xml.Xsl.Runtime.IntersectIterator : ValueType {
private XmlQueryRuntime runtime
private XPathNavigator navLeft
private XPathNavigator navRight
private IteratorState state
public XPathNavigator Current
public void Create(XmlQueryRuntime runtime)
public SetIteratorResult MoveNext(XPathNavigator nestedNavigator)
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.IteratorResult : Enum {
public int value__
public IteratorResult NoMoreNodes
public IteratorResult NeedInputNode
public IteratorResult HaveCurrentNode
}
public System.Xml.Xsl.Runtime.NamespaceIterator : ValueType {
private XPathNavigator navCurrent
private XmlNavigatorStack navStack
public XPathNavigator Current
public void Create(XPathNavigator context)
public bool MoveNext()
public XPathNavigator get_Current()
}
internal System.Xml.Xsl.Runtime.NavigatorConstructor : object {
private object cache
public XPathNavigator GetNavigator(XmlEventCache events, XmlNameTable nameTable)
public XPathNavigator GetNavigator(string text, string baseUri, XmlNameTable nameTable)
}
public System.Xml.Xsl.Runtime.NodeKindContentIterator : ValueType {
private XPathNodeType nodeType
private XPathNavigator navCurrent
private bool needFirst
public XPathNavigator Current
public void Create(XPathNavigator context, XPathNodeType nodeType)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.NodeRangeIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
private XPathNavigator navEnd
private IteratorState state
public XPathNavigator Current
public void Create(XPathNavigator start, XmlNavigatorFilter filter, XPathNavigator end)
public bool MoveNext()
public XPathNavigator get_Current()
}
internal System.Xml.Xsl.Runtime.NumberFormatter : NumberFormatterBase {
private string formatString
private int lang
private string letterValue
private string groupingSeparator
private int groupingSize
private List`1<TokenInfo> tokens
public char DefaultStartChar
private TokenInfo DefaultFormat
private TokenInfo DefaultSeparator
public void .ctor(string formatString, int lang, string letterValue, string groupingSeparator, int groupingSize)
public string FormatSequence(IList`1<XPathItem> val)
private void FormatItem(StringBuilder sb, XPathItem item, char startChar, int length)
private string ConvertToDecimal(double val, int minLen, char zero, string groupSeparator, int groupSize)
}
internal System.Xml.Xsl.Runtime.NumberFormatterBase : object {
protected int MaxAlphabeticValue
private int MaxAlphabeticLength
protected int MaxRomanValue
private string RomanDigitsUC
private string RomanDigitsLC
private Int32[] RomanDigitValue
private string hiraganaAiueo
private string hiraganaIroha
private string katakanaAiueo
private string katakanaIroha
private string katakanaAiueoHw
private string katakanaIrohaHw
private string cjkIdeographic
public void ConvertToAlphabetic(StringBuilder sb, double val, char firstChar, int totalChars)
public void ConvertToRoman(StringBuilder sb, double val, bool upperCase)
}
internal System.Xml.Xsl.Runtime.NumberingSequence : Enum {
public int value__
public NumberingSequence Nil
public NumberingSequence FirstDecimal
public NumberingSequence Arabic
public NumberingSequence DArabic
public NumberingSequence Hindi3
public NumberingSequence Thai2
public NumberingSequence FEDecimal
public NumberingSequence KorDbNum1
public NumberingSequence LastNum
public NumberingSequence FirstAlpha
public NumberingSequence UCLetter
public NumberingSequence LCLetter
public NumberingSequence UCRus
public NumberingSequence LCRus
public NumberingSequence Thai1
public NumberingSequence Hindi1
public NumberingSequence Hindi2
public NumberingSequence Aiueo
public NumberingSequence DAiueo
public NumberingSequence Iroha
public NumberingSequence DIroha
public NumberingSequence DChosung
public NumberingSequence Ganada
public NumberingSequence ArabicScript
public NumberingSequence LastAlpha
public NumberingSequence FirstSpecial
public NumberingSequence UCRoman
public NumberingSequence LCRoman
public NumberingSequence Hebrew
public NumberingSequence DbNum3
public NumberingSequence ChnCmplx
public NumberingSequence KorDbNum3
public NumberingSequence Zodiac1
public NumberingSequence Zodiac2
public NumberingSequence Zodiac3
public NumberingSequence LastSpecial
}
public System.Xml.Xsl.Runtime.ParentIterator : ValueType {
private XPathNavigator navCurrent
private bool haveCurrent
public XPathNavigator Current
public void Create(XPathNavigator context, XmlNavigatorFilter filter)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.PrecedingIterator : ValueType {
private XmlNavigatorStack stack
private XPathNavigator navCurrent
public XPathNavigator Current
public void Create(XPathNavigator context, XmlNavigatorFilter filter)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
private XPathNavigator navEnd
private bool needFirst
private bool useCompPos
public XPathNavigator Current
public void Create(XPathNavigator context, XmlNavigatorFilter filter)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.PrecedingSiblingIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
public XPathNavigator Current
public void Create(XPathNavigator context, XmlNavigatorFilter filter)
public bool MoveNext()
public XPathNavigator get_Current()
}
internal System.Xml.Xsl.Runtime.RtfNavigator : XPathNavigator {
public XPathNodeType NodeType
public string LocalName
public string NamespaceURI
public string Name
public string Prefix
public bool IsEmptyElement
public XmlNameTable NameTable
public void CopyToWriter(XmlWriter writer)
public XPathNavigator ToNavigator()
public XPathNodeType get_NodeType()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Name()
public string get_Prefix()
public bool get_IsEmptyElement()
public XmlNameTable get_NameTable()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToNextNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToNext()
public bool MoveToPrevious()
public bool MoveToFirstChild()
public bool MoveToParent()
public bool MoveToId(string id)
public bool IsSamePosition(XPathNavigator other)
}
internal System.Xml.Xsl.Runtime.RtfTextNavigator : RtfNavigator {
private string text
private string baseUri
private NavigatorConstructor constr
public string Value
public string BaseURI
public void .ctor(string text, string baseUri)
public void .ctor(RtfTextNavigator that)
public void CopyToWriter(XmlWriter writer)
public XPathNavigator ToNavigator()
public string get_Value()
public string get_BaseURI()
public XPathNavigator Clone()
public bool MoveTo(XPathNavigator other)
}
internal System.Xml.Xsl.Runtime.RtfTreeNavigator : RtfNavigator {
private XmlEventCache events
private NavigatorConstructor constr
private XmlNameTable nameTable
public string Value
public string BaseURI
public void .ctor(XmlEventCache events, XmlNameTable nameTable)
public void .ctor(RtfTreeNavigator that)
public void CopyToWriter(XmlWriter writer)
public XPathNavigator ToNavigator()
public string get_Value()
public string get_BaseURI()
public XPathNavigator Clone()
public bool MoveTo(XPathNavigator other)
}
public System.Xml.Xsl.Runtime.SetIteratorResult : Enum {
public int value__
public SetIteratorResult NoMoreNodes
public SetIteratorResult InitRightIterator
public SetIteratorResult NeedLeftNode
public SetIteratorResult NeedRightNode
public SetIteratorResult HaveCurrentNode
}
public System.Xml.Xsl.Runtime.StringConcat : ValueType {
private string s1
private string s2
private string s3
private string s4
private string delimiter
private List`1<string> strList
private int idxStr
public string Delimiter
internal int Count
public void Clear()
public string get_Delimiter()
public void set_Delimiter(string value)
internal int get_Count()
public void Concat(string value)
public string GetResult()
internal void ConcatNoDelimiter(string s)
}
internal System.Xml.Xsl.Runtime.TokenInfo : object {
public char startChar
public int startIdx
public string formatString
public int length
public void AssertSeparator(bool isSeparator)
public TokenInfo CreateSeparator(string formatString, int startIdx, int tokLen)
public TokenInfo CreateFormat(string formatString, int startIdx, int tokLen)
}
public System.Xml.Xsl.Runtime.UnionIterator : ValueType {
private XmlQueryRuntime runtime
private XPathNavigator navCurr
private XPathNavigator navOther
private IteratorState state
public XPathNavigator Current
public void Create(XmlQueryRuntime runtime)
public SetIteratorResult MoveNext(XPathNavigator nestedNavigator)
public XPathNavigator get_Current()
private void Swap()
}
internal System.Xml.Xsl.Runtime.WhitespaceRuleLookup : object {
private Hashtable qnames
private ArrayList wildcards
private InternalWhitespaceRule ruleTemp
private XmlNameTable nameTable
public void .ctor(IList`1<WhitespaceRule> rules)
public void Atomize(XmlNameTable nameTable)
public bool ShouldStripSpace(string localName, string namespaceName)
}
internal System.Xml.Xsl.Runtime.WhitespaceRuleReader : XmlWrappingReader {
private WhitespaceRuleLookup wsRules
private BitStack stkStrip
private bool shouldStrip
private bool preserveAdjacent
private string val
private XmlCharType xmlCharType
public string Value
public XmlReader CreateReader(XmlReader baseReader, WhitespaceRuleLookup wsRules)
private void .ctor(XmlReader baseReader, WhitespaceRuleLookup wsRules)
public string get_Value()
public bool Read()
}
internal System.Xml.Xsl.Runtime.XmlAttributeCache : XmlRawWriter {
private XmlRawWriter wrapped
private OnRemoveWriter onRemove
private AttrNameVal[] arrAttrs
private int numEntries
private int idxLastName
private int hashCodeUnion
private int DefaultCacheSize
public int Count
public OnRemoveWriter OnRemoveWriterEvent
public void Init(XmlRawWriter wrapped)
public int get_Count()
public OnRemoveWriter get_OnRemoveWriterEvent()
public void set_OnRemoveWriterEvent(OnRemoveWriter value)
private void SetWrappedWriter(XmlRawWriter writer)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
internal void WriteNamespaceDeclaration(string prefix, string ns)
public void WriteString(string text)
public void WriteValue(object value)
public void WriteValue(string value)
internal void StartElementContent()
public void WriteStartElement(string prefix, string localName, string ns)
internal void WriteEndElement(string prefix, string localName, string ns)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void Close()
public void Flush()
private void FlushAttributes()
private void EnsureAttributeCache()
}
internal System.Xml.Xsl.Runtime.XmlCachedSequenceWriter : XmlSequenceWriter {
private XmlQueryItemSequence seqTyped
private XPathDocument doc
private XmlRawWriter writer
public XmlQueryItemSequence ResultSequence
public XmlQueryItemSequence get_ResultSequence()
public XmlRawWriter StartTree(XPathNodeType rootType, IXmlNamespaceResolver nsResolver, XmlNameTable nameTable)
public void EndTree()
public void WriteItem(XPathItem item)
}
public System.Xml.Xsl.Runtime.XmlCollation : object {
private int deDE
private int huHU
private int jaJP
private int kaGE
private int koKR
private int zhTW
private int zhCN
private int zhHK
private int zhSG
private int zhMO
private int zhTWbopo
private int deDEphon
private int huHUtech
private int kaGEmode
private CultureInfo cultInfo
private Options options
private CompareOptions compops
private XmlCollation cp
private int LOCALE_CURRENT
internal XmlCollation CodePointCollation
internal bool UpperFirst
internal bool EmptyGreatest
internal bool DescendingOrder
internal CultureInfo Culture
private void .ctor(CultureInfo cultureInfo, Options options)
internal XmlCollation get_CodePointCollation()
internal XmlCollation Create(string collationLiteral)
internal XmlCollation Create(string collationLiteral, bool throwOnError)
public bool Equals(object obj)
public int GetHashCode()
internal void GetObjectData(BinaryWriter writer)
internal void .ctor(BinaryReader reader)
internal bool get_UpperFirst()
internal bool get_EmptyGreatest()
internal bool get_DescendingOrder()
internal CultureInfo get_Culture()
internal XmlSortKey CreateSortKey(string s)
private int MakeLCID(int langid, int sortid)
private int GetLangID(int lcid)
}
internal System.Xml.Xsl.Runtime.XmlDateTimeSortKey : XmlIntegerSortKey {
public void .ctor(DateTime value, XmlCollation collation)
}
internal System.Xml.Xsl.Runtime.XmlDecimalSortKey : XmlSortKey {
private decimal decVal
public void .ctor(decimal value, XmlCollation collation)
public int CompareTo(object obj)
}
internal System.Xml.Xsl.Runtime.XmlDoubleSortKey : XmlSortKey {
private double dblVal
private bool isNaN
public void .ctor(double value, XmlCollation collation)
public int CompareTo(object obj)
}
internal System.Xml.Xsl.Runtime.XmlEmptySortKey : XmlSortKey {
private bool isEmptyGreatest
public bool IsEmptyGreatest
public void .ctor(XmlCollation collation)
public bool get_IsEmptyGreatest()
public int CompareTo(object obj)
}
internal System.Xml.Xsl.Runtime.XmlExtensionFunction : object {
private string namespaceUri
private string name
private int numArgs
private Type objectType
private BindingFlags flags
private int hashCode
private MethodInfo meth
private Type[] argClrTypes
private Type retClrType
private XmlQueryType[] argXmlTypes
private XmlQueryType retXmlType
public MethodInfo Method
public Type ClrReturnType
public XmlQueryType XmlReturnType
public void .ctor(string name, string namespaceUri, MethodInfo meth)
public void .ctor(string name, string namespaceUri, int numArgs, Type objectType, BindingFlags flags)
public void Init(string name, string namespaceUri, int numArgs, Type objectType, BindingFlags flags)
public MethodInfo get_Method()
public Type GetClrArgumentType(int index)
public Type get_ClrReturnType()
public XmlQueryType GetXmlArgumentType(int index)
public XmlQueryType get_XmlReturnType()
public bool CanBind()
public void Bind()
private void Bind(MethodInfo meth)
public object Invoke(object extObj, Object[] args)
public bool Equals(object other)
public int GetHashCode()
private Type GetClrType(Type clrType)
private XmlQueryType InferXmlType(Type clrType)
}
internal System.Xml.Xsl.Runtime.XmlExtensionFunctionTable : object {
private Dictionary`2<XmlExtensionFunction, XmlExtensionFunction> table
private XmlExtensionFunction funcCached
public XmlExtensionFunction Bind(string name, string namespaceUri, int numArgs, Type objectType, BindingFlags flags)
}
public System.Xml.Xsl.Runtime.XmlILIndex : object {
private Dictionary`2<string, XmlQueryNodeSequence> table
public void Add(string key, XPathNavigator navigator)
public XmlQueryNodeSequence Lookup(string key)
}
internal System.Xml.Xsl.Runtime.XmlILQueryEventArgs : XsltMessageEncounteredEventArgs {
private string message
public string Message
public void .ctor(string message)
public string get_Message()
}
public System.Xml.Xsl.Runtime.XmlILStorageConverter : object {
public XmlAtomicValue StringToAtomicValue(string value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue DecimalToAtomicValue(decimal value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue Int64ToAtomicValue(long value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue Int32ToAtomicValue(int value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue BooleanToAtomicValue(bool value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue DoubleToAtomicValue(double value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue SingleToAtomicValue(float value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue DateTimeToAtomicValue(DateTime value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue XmlQualifiedNameToAtomicValue(XmlQualifiedName value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue TimeSpanToAtomicValue(TimeSpan value, int index, XmlQueryRuntime runtime)
public XmlAtomicValue BytesToAtomicValue(Byte[] value, int index, XmlQueryRuntime runtime)
public IList`1<XPathItem> NavigatorsToItems(IList`1<XPathNavigator> listNavigators)
public IList`1<XPathNavigator> ItemsToNavigators(IList`1<XPathItem> listItems)
}
internal System.Xml.Xsl.Runtime.XmlIntegerSortKey : XmlSortKey {
private long longVal
public void .ctor(long value, XmlCollation collation)
public int CompareTo(object obj)
}
internal System.Xml.Xsl.Runtime.XmlIntSortKey : XmlSortKey {
private int intVal
public void .ctor(int value, XmlCollation collation)
public int CompareTo(object obj)
}
internal System.Xml.Xsl.Runtime.XmlMergeSequenceWriter : XmlSequenceWriter {
private XmlRawWriter xwrt
private bool lastItemWasAtomic
public void .ctor(XmlRawWriter xwrt)
public XmlRawWriter StartTree(XPathNodeType rootType, IXmlNamespaceResolver nsResolver, XmlNameTable nameTable)
public void EndTree()
public void WriteItem(XPathItem item)
private void WriteString(string value)
private void CopyNode(XPathNavigator nav)
private bool CopyShallowNode(XPathNavigator nav)
private void CopyNamespaces(XPathNavigator nav, XPathNamespaceScope nsScope)
}
internal System.Xml.Xsl.Runtime.XmlNavAttrFilter : XmlNavigatorFilter {
private XmlNavigatorFilter Singleton
public XmlNavigatorFilter Create()
public bool MoveToContent(XPathNavigator navigator)
public bool MoveToNextContent(XPathNavigator navigator)
public bool MoveToFollowingSibling(XPathNavigator navigator)
public bool MoveToPreviousSibling(XPathNavigator navigator)
public bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navEnd)
public bool IsFiltered(XPathNavigator navigator)
}
public System.Xml.Xsl.Runtime.XmlNavigatorFilter : object {
public bool MoveToContent(XPathNavigator navigator)
public bool MoveToNextContent(XPathNavigator navigator)
public bool MoveToFollowingSibling(XPathNavigator navigator)
public bool MoveToPreviousSibling(XPathNavigator navigator)
public bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navigatorEnd)
public bool IsFiltered(XPathNavigator navigator)
}
internal System.Xml.Xsl.Runtime.XmlNavigatorStack : ValueType {
private XPathNavigator[] stkNav
private int sp
private int InitialStackSize
public bool IsEmpty
public void Push(XPathNavigator nav)
public XPathNavigator Pop()
public XPathNavigator Peek()
public void Reset()
public bool get_IsEmpty()
}
internal System.Xml.Xsl.Runtime.XmlNavNameFilter : XmlNavigatorFilter {
private string localName
private string namespaceUri
public XmlNavigatorFilter Create(string localName, string namespaceUri)
private void .ctor(string localName, string namespaceUri)
public bool MoveToContent(XPathNavigator navigator)
public bool MoveToNextContent(XPathNavigator navigator)
public bool MoveToFollowingSibling(XPathNavigator navigator)
public bool MoveToPreviousSibling(XPathNavigator navigator)
public bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navEnd)
public bool IsFiltered(XPathNavigator navigator)
}
internal System.Xml.Xsl.Runtime.XmlNavNeverFilter : XmlNavigatorFilter {
private XmlNavigatorFilter Singleton
public XmlNavigatorFilter Create()
public bool MoveToContent(XPathNavigator navigator)
public bool MoveToNextContent(XPathNavigator navigator)
public bool MoveToFollowingSibling(XPathNavigator navigator)
public bool MoveToPreviousSibling(XPathNavigator navigator)
public bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navEnd)
public bool IsFiltered(XPathNavigator navigator)
public bool MoveToFirstAttributeContent(XPathNavigator navigator)
public bool MoveToNextAttributeContent(XPathNavigator navigator)
}
internal System.Xml.Xsl.Runtime.XmlNavTypeFilter : XmlNavigatorFilter {
private XmlNavigatorFilter[] TypeFilters
private XPathNodeType nodeType
private int mask
public XmlNavigatorFilter Create(XPathNodeType nodeType)
private void .ctor(XPathNodeType nodeType)
public bool MoveToContent(XPathNavigator navigator)
public bool MoveToNextContent(XPathNavigator navigator)
public bool MoveToFollowingSibling(XPathNavigator navigator)
public bool MoveToPreviousSibling(XPathNavigator navigator)
public bool MoveToFollowing(XPathNavigator navigator, XPathNavigator navEnd)
public bool IsFiltered(XPathNavigator navigator)
}
public System.Xml.Xsl.Runtime.XmlQueryContext : object {
private XmlQueryRuntime runtime
private XPathNavigator defaultDataSource
private XmlResolver dataSources
private Hashtable dataSourceCache
private XsltArgumentList argList
private XmlExtensionFunctionTable extFuncsLate
private WhitespaceRuleLookup wsRules
private QueryReaderSettings readerSettings
public XmlNameTable QueryNameTable
public XmlNameTable DefaultNameTable
public XPathNavigator DefaultDataSource
internal void .ctor(XmlQueryRuntime runtime, object defaultDataSource, XmlResolver dataSources, XsltArgumentList argList, WhitespaceRuleLookup wsRules)
public XmlNameTable get_QueryNameTable()
public XmlNameTable get_DefaultNameTable()
public XPathNavigator get_DefaultDataSource()
public XPathNavigator GetDataSource(string uriRelative, string uriBase)
private XPathNavigator ConstructDocument(object dataSource, string uriRelative, Uri uriResolved)
public object GetParameter(string localName, string namespaceUri)
public object GetLateBoundObject(string namespaceUri)
public bool LateBoundFunctionExists(string name, string namespaceUri)
public IList`1<XPathItem> InvokeXsltLateBoundFunction(string name, string namespaceUri, IList`1[] args)
public void OnXsltMessageEncountered(string message)
}
internal System.Xml.Xsl.Runtime.XmlQueryDataReader : BinaryReader {
public void .ctor(Stream input)
public int ReadInt32Encoded()
public string ReadStringQ()
public sbyte ReadSByte(sbyte minValue, sbyte maxValue)
}
internal System.Xml.Xsl.Runtime.XmlQueryDataWriter : BinaryWriter {
public void .ctor(Stream output)
public void WriteInt32Encoded(int value)
public void WriteStringQ(string value)
}
public System.Xml.Xsl.Runtime.XmlQueryItemSequence : XmlQuerySequence`1<XPathItem> {
public XmlQueryItemSequence Empty
public XmlQueryItemSequence CreateOrReuse(XmlQueryItemSequence seq)
public XmlQueryItemSequence CreateOrReuse(XmlQueryItemSequence seq, XPathItem item)
public void .ctor(int capacity)
public void .ctor(XPathItem item)
public void AddClone(XPathItem item)
}
public System.Xml.Xsl.Runtime.XmlQueryNodeSequence : XmlQuerySequence`1<XPathNavigator> {
public XmlQueryNodeSequence Empty
private XmlQueryNodeSequence docOrderDistinct
public bool IsDocOrderDistinct
private bool System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.IsReadOnly
private XPathItem System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.Item
public XmlQueryNodeSequence CreateOrReuse(XmlQueryNodeSequence seq)
public XmlQueryNodeSequence CreateOrReuse(XmlQueryNodeSequence seq, XPathNavigator navigator)
public void .ctor(int capacity)
public void .ctor(IList`1<XPathNavigator> list)
public void .ctor(XPathNavigator[] array, int size)
public void .ctor(XPathNavigator navigator)
public bool get_IsDocOrderDistinct()
public void set_IsDocOrderDistinct(bool value)
public XmlQueryNodeSequence DocOrderDistinct(IComparer`1<XPathNavigator> comparer)
public void AddClone(XPathNavigator navigator)
protected void OnItemsChanged()
private IEnumerator`1<XPathItem> System.Collections.Generic.IEnumerable<System.Xml.XPath.XPathItem>.GetEnumerator()
private bool System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.get_IsReadOnly()
private void System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.Add(XPathItem value)
private void System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.Clear()
private bool System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.Contains(XPathItem value)
private void System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.CopyTo(XPathItem[] array, int index)
private bool System.Collections.Generic.ICollection<System.Xml.XPath.XPathItem>.Remove(XPathItem value)
private XPathItem System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.get_Item(int index)
private void System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.set_Item(int index, XPathItem value)
private int System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.IndexOf(XPathItem value)
private void System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.Insert(int index, XPathItem value)
private void System.Collections.Generic.IList<System.Xml.XPath.XPathItem>.RemoveAt(int index)
}
public System.Xml.Xsl.Runtime.XmlQueryOutput : XmlWriter {
private XmlRawWriter xwrt
private XmlQueryRuntime runtime
private XmlAttributeCache attrCache
private int depth
private XmlState xstate
private XmlSequenceWriter seqwrt
private XmlNamespaceManager nsmgr
private int cntNmsp
private Dictionary`2<string, string> conflictPrefixes
private int prefixIndex
private string piTarget
private StringConcat nodeText
private Stack`1<string> stkNames
private XPathNodeType rootType
private Dictionary`2<string, string> usedPrefixes
internal XmlSequenceWriter SequenceWriter
internal XmlRawWriter Writer
public WriteState WriteState
public XmlSpace XmlSpace
public string XmlLang
internal void .ctor(XmlQueryRuntime runtime, XmlSequenceWriter seqwrt)
internal void .ctor(XmlQueryRuntime runtime, XmlEventCache xwrt)
internal XmlSequenceWriter get_SequenceWriter()
internal XmlRawWriter get_Writer()
internal void set_Writer(XmlRawWriter value)
private void SetWrappedWriter(XmlRawWriter writer)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteComment(string text)
public void WriteProcessingInstruction(string target, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteCData(string text)
public void WriteBase64(Byte[] buffer, int index, int count)
public WriteState get_WriteState()
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public void StartTree(XPathNodeType rootType)
public void EndTree()
public void WriteStartElementUnchecked(string prefix, string localName, string ns)
public void WriteStartElementUnchecked(string localName)
public void StartElementContentUnchecked()
public void WriteEndElementUnchecked(string prefix, string localName, string ns)
public void WriteEndElementUnchecked(string localName)
public void WriteStartAttributeUnchecked(string prefix, string localName, string ns)
public void WriteStartAttributeUnchecked(string localName)
public void WriteEndAttributeUnchecked()
public void WriteNamespaceDeclarationUnchecked(string prefix, string ns)
public void WriteStringUnchecked(string text)
public void WriteRawUnchecked(string text)
public void WriteStartRoot()
public void WriteEndRoot()
public void WriteStartElementLocalName(string localName)
public void WriteStartAttributeLocalName(string localName)
public void WriteStartElementComputed(string tagName, int prefixMappingsIndex)
public void WriteStartElementComputed(string tagName, string ns)
public void WriteStartElementComputed(XPathNavigator navigator)
public void WriteStartElementComputed(XmlQualifiedName name)
public void WriteStartAttributeComputed(string tagName, int prefixMappingsIndex)
public void WriteStartAttributeComputed(string tagName, string ns)
public void WriteStartAttributeComputed(XPathNavigator navigator)
public void WriteStartAttributeComputed(XmlQualifiedName name)
public void WriteNamespaceDeclaration(string prefix, string ns)
public void WriteStartNamespace(string prefix)
public void WriteNamespaceString(string text)
public void WriteEndNamespace()
public void WriteStartComment()
public void WriteCommentString(string text)
public void WriteEndComment()
public void WriteStartProcessingInstruction(string target)
public void WriteProcessingInstructionString(string text)
public void WriteEndProcessingInstruction()
public void WriteItem(XPathItem item)
public void XsltCopyOf(XPathNavigator navigator)
public bool StartCopy(XPathNavigator navigator)
public void EndCopy(XPathNavigator navigator)
private void AddNamespace(string prefix, string ns)
private void WriteString(string text, bool disableOutputEscaping)
private void CopyNode(XPathNavigator navigator)
private bool StartCopy(XPathNavigator navigator, bool callChk)
private void EndCopy(XPathNavigator navigator, bool callChk)
private void CopyNamespaces(XPathNavigator navigator, XPathNamespaceScope nsScope)
private void CopyNamespacesHelper(XPathNavigator navigator, XPathNamespaceScope nsScope)
private void ConstructWithinContent(XPathNodeType rootType)
private void ConstructInEnumAttrs(XPathNodeType rootType)
private void WriteCachedNamespaces()
private XPathNodeType XmlStateToNodeType(XmlState xstate)
private string CheckAttributePrefix(string prefix, string ns)
private string RemapPrefix(string prefix, string ns, bool isElemPrefix)
private void WriteStartComputed(XPathNodeType nodeType, string tagName, int prefixMappingsIndex)
private void WriteStartComputed(XPathNodeType nodeType, string tagName, string ns)
private void WriteStartComputed(XPathNodeType nodeType, XPathNavigator navigator)
private void WriteStartComputed(XPathNodeType nodeType, XmlQualifiedName name)
private string EnsureValidName(string prefix, string localName, string ns, XPathNodeType nodeType)
private void PushElementNames(string prefix, string localName, string ns)
private void PopElementNames(String& prefix, String& localName, String& ns)
private void ThrowInvalidStateError(XPathNodeType constructorType)
}
public System.Xml.Xsl.Runtime.XmlQueryRuntime : object {
private XmlQueryContext ctxt
private XsltLibrary xsltLib
private EarlyBoundInfo[] earlyInfo
private Object[] earlyObjects
private String[] globalNames
private Object[] globalValues
private XmlNameTable nameTableQuery
private String[] atomizedNames
private XmlNavigatorFilter[] filters
private StringPair[][] prefixMappingsList
private XmlQueryType[] types
private XmlCollation[] collations
private DocumentOrderComparer docOrderCmp
private ArrayList[] indexes
private XmlQueryOutput output
private Stack`1<XmlQueryOutput> stkOutput
internal BindingFlags EarlyBoundFlags
internal BindingFlags LateBoundFlags
public XmlQueryContext ExternalContext
public XsltLibrary XsltFunctions
public XmlNameTable NameTable
internal XmlQueryType[] XmlTypes
public XmlQueryOutput Output
internal void .ctor(XmlQueryStaticData data, object defaultDataSource, XmlResolver dataSources, XsltArgumentList argList, XmlSequenceWriter seqWrt)
public String[] DebugGetGlobalNames()
public IList DebugGetGlobalValue(string name)
public void DebugSetGlobalValue(string name, object value)
public object DebugGetXsltValue(IList seq)
public XmlQueryContext get_ExternalContext()
public XsltLibrary get_XsltFunctions()
public object GetEarlyBoundObject(int index)
public bool EarlyBoundFunctionExists(string name, string namespaceUri)
public bool IsGlobalComputed(int index)
public object GetGlobalValue(int index)
public void SetGlobalValue(int index, object value)
public XmlNameTable get_NameTable()
public string GetAtomizedName(int index)
public XmlNavigatorFilter GetNameFilter(int index)
public XmlNavigatorFilter GetTypeFilter(XPathNodeType nodeType)
public XmlQualifiedName ParseTagName(string tagName, int indexPrefixMappings)
public XmlQualifiedName ParseTagName(string tagName, string ns)
internal void ParseTagName(string tagName, int idxPrefixMappings, String& prefix, String& localName, String& ns)
public bool IsQNameEqual(XPathNavigator n1, XPathNavigator n2)
public bool IsQNameEqual(XPathNavigator navigator, int indexLocalName, int indexNamespaceUri)
internal XmlQueryType[] get_XmlTypes()
internal XmlQueryType GetXmlType(int idxType)
public object ChangeTypeXsltArgument(int indexType, object value, Type destinationType)
internal object ChangeTypeXsltArgument(XmlQueryType xmlType, object value, Type destinationType)
public object ChangeTypeXsltResult(int indexType, object value)
internal object ChangeTypeXsltResult(XmlQueryType xmlType, object value)
private XPathNavigator EnsureNavigator(object value)
public bool MatchesXmlType(IList`1<XPathItem> seq, int indexType)
public bool MatchesXmlType(XPathItem item, int indexType)
public bool MatchesXmlType(IList`1<XPathItem> seq, XmlTypeCode code)
public bool MatchesXmlType(XPathItem item, XmlTypeCode code)
private XmlQueryType CreateXmlType(XPathItem item)
public XmlCollation GetCollation(int index)
public XmlCollation CreateCollation(string collation)
public int ComparePosition(XPathNavigator navigatorThis, XPathNavigator navigatorThat)
public IList`1<XPathNavigator> DocOrderDistinct(IList`1<XPathNavigator> seq)
public string GenerateId(XPathNavigator navigator)
public bool FindIndex(XPathNavigator context, int indexId, XmlILIndex& index)
public void AddNewIndex(XPathNavigator context, int indexId, XmlILIndex index)
public XmlQueryOutput get_Output()
public void StartSequenceConstruction(XmlQueryOutput& output)
public IList`1<XPathItem> EndSequenceConstruction(XmlQueryOutput& output)
public void StartRtfConstruction(string baseUri, XmlQueryOutput& output)
public XPathNavigator EndRtfConstruction(XmlQueryOutput& output)
public XPathNavigator TextRtfConstruction(string text, string baseUri)
public void SendMessage(string message)
public void ThrowException(string text)
internal XPathNavigator SyncToNavigator(XPathNavigator navigatorThis, XPathNavigator navigatorThat)
public int OnCurrentNodeChanged(XPathNavigator currentNode)
private bool IsInheritedNamespace(XPathNavigator node)
private void OnCurrentNodeChanged2(string baseUri, int lineNumber, int linePosition)
}
public System.Xml.Xsl.Runtime.XmlQuerySequence`1 : object {
public XmlQuerySequence`1<T> Empty
private Type XPathItemType
private T[] items
private int size
private int DefaultCacheSize
public int Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.Generic.ICollection<T>.IsReadOnly
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
public T Item
public XmlQuerySequence`1<T> CreateOrReuse(XmlQuerySequence`1<T> seq)
public XmlQuerySequence`1<T> CreateOrReuse(XmlQuerySequence`1<T> seq, T item)
public void .ctor(int capacity)
public void .ctor(T[] array, int size)
public void .ctor(T value)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public IEnumerator`1<T> GetEnumerator()
public int get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly()
private void System.Collections.Generic.ICollection<T>.Add(T value)
private void System.Collections.Generic.ICollection<T>.Clear()
public bool Contains(T value)
public void CopyTo(T[] array, int index)
private bool System.Collections.Generic.ICollection<T>.Remove(T value)
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
public T get_Item(int index)
public void set_Item(int index, T value)
public int IndexOf(T value)
private void System.Collections.Generic.IList<T>.Insert(int index, T value)
private void System.Collections.Generic.IList<T>.RemoveAt(int index)
public void Clear()
public void Add(T value)
public void SortByKeys(Array keys)
private void EnsureCache()
protected void OnItemsChanged()
}
internal System.Xml.Xsl.Runtime.XmlQueryStaticData : object {
public string DataFieldName
public string TypesFieldName
private int CurrentFormatVersion
private XmlWriterSettings defaultWriterSettings
private IList`1<WhitespaceRule> whitespaceRules
private String[] names
private StringPair[][] prefixMappingsList
private Int32Pair[] filters
private XmlQueryType[] types
private XmlCollation[] collations
private String[] globalNames
private EarlyBoundInfo[] earlyBound
public XmlWriterSettings DefaultWriterSettings
public IList`1<WhitespaceRule> WhitespaceRules
public String[] Names
public StringPair[][] PrefixMappingsList
public Int32Pair[] Filters
public XmlQueryType[] Types
public XmlCollation[] Collations
public String[] GlobalNames
public EarlyBoundInfo[] EarlyBound
public void .ctor(XmlWriterSettings defaultWriterSettings, IList`1<WhitespaceRule> whitespaceRules, StaticDataManager staticData)
public void .ctor(Byte[] data, Type[] ebTypes)
public void GetObjectData(Byte[]& data, Type[]& ebTypes)
public XmlWriterSettings get_DefaultWriterSettings()
public IList`1<WhitespaceRule> get_WhitespaceRules()
public String[] get_Names()
public StringPair[][] get_PrefixMappingsList()
public Int32Pair[] get_Filters()
public XmlQueryType[] get_Types()
public XmlCollation[] get_Collations()
public String[] get_GlobalNames()
public EarlyBoundInfo[] get_EarlyBound()
}
internal System.Xml.Xsl.Runtime.XmlRawWriterWrapper : XmlRawWriter {
private XmlWriter wrapped
public XmlWriterSettings Settings
public void .ctor(XmlWriter writer)
public XmlWriterSettings get_Settings()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void Close()
public void Flush()
public void WriteValue(object value)
public void WriteValue(string value)
public void WriteValue(bool value)
public void WriteValue(DateTime value)
public void WriteValue(float value)
public void WriteValue(decimal value)
public void WriteValue(double value)
public void WriteValue(int value)
public void WriteValue(long value)
protected void Dispose(bool disposing)
internal void WriteXmlDeclaration(XmlStandalone standalone)
internal void WriteXmlDeclaration(string xmldecl)
internal void StartElementContent()
internal void WriteEndElement(string prefix, string localName, string ns)
internal void WriteFullEndElement(string prefix, string localName, string ns)
internal void WriteNamespaceDeclaration(string prefix, string ns)
}
internal System.Xml.Xsl.Runtime.XmlSequenceWriter : object {
public XmlRawWriter StartTree(XPathNodeType rootType, IXmlNamespaceResolver nsResolver, XmlNameTable nameTable)
public void EndTree()
public void WriteItem(XPathItem item)
}
internal System.Xml.Xsl.Runtime.XmlSortKey : object {
private int priority
private XmlSortKey nextKey
public int Priority
public void set_Priority(int value)
public XmlSortKey AddSortKey(XmlSortKey sortKey)
protected int BreakSortingTie(XmlSortKey that)
protected int CompareToEmpty(object obj)
public int CompareTo(object that)
}
public System.Xml.Xsl.Runtime.XmlSortKeyAccumulator : ValueType {
private XmlSortKey[] keys
private int pos
private int DefaultSortKeyCount
public Array Keys
public void Create()
public void AddStringSortKey(XmlCollation collation, string value)
public void AddDecimalSortKey(XmlCollation collation, decimal value)
public void AddIntegerSortKey(XmlCollation collation, long value)
public void AddIntSortKey(XmlCollation collation, int value)
public void AddDoubleSortKey(XmlCollation collation, double value)
public void AddDateTimeSortKey(XmlCollation collation, DateTime value)
public void AddEmptySortKey(XmlCollation collation)
public void FinishSortKeys()
private void AppendSortKey(XmlSortKey key)
public Array get_Keys()
}
internal System.Xml.Xsl.Runtime.XmlState : Enum {
public int value__
public XmlState WithinSequence
public XmlState EnumAttrs
public XmlState WithinContent
public XmlState WithinAttr
public XmlState WithinNmsp
public XmlState WithinComment
public XmlState WithinPI
}
internal System.Xml.Xsl.Runtime.XmlStringSortKey : XmlSortKey {
private SortKey sortKey
private Byte[] sortKeyBytes
private bool descendingOrder
public void .ctor(SortKey sortKey, bool descendingOrder)
public void .ctor(Byte[] sortKey, bool descendingOrder)
public int CompareTo(object obj)
}
public System.Xml.Xsl.Runtime.XPathFollowingIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
private bool needFirst
public XPathNavigator Current
public void Create(XPathNavigator input, XmlNavigatorFilter filter)
public bool MoveNext()
public XPathNavigator get_Current()
internal bool MoveFirst(XmlNavigatorFilter filter, XPathNavigator nav)
}
public System.Xml.Xsl.Runtime.XPathFollowingMergeIterator : ValueType {
private XmlNavigatorFilter filter
private IteratorState state
private XPathNavigator navCurrent
private XPathNavigator navNext
public XPathNavigator Current
public void Create(XmlNavigatorFilter filter)
public IteratorResult MoveNext(XPathNavigator input)
public XPathNavigator get_Current()
private IteratorResult MoveFailed()
private IteratorResult MoveFirst()
}
public System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator : ValueType {
private XmlNavigatorFilter filter
private XPathNavigator navCurrent
private XmlNavigatorStack navStack
public XPathNavigator Current
public void Create(XPathNavigator input, XmlNavigatorFilter filter)
public bool MoveNext()
public XPathNavigator get_Current()
private void PushAncestors()
}
public System.Xml.Xsl.Runtime.XPathPrecedingIterator : ValueType {
private XmlNavigatorStack stack
private XPathNavigator navCurrent
public XPathNavigator Current
public void Create(XPathNavigator context, XmlNavigatorFilter filter)
public bool MoveNext()
public XPathNavigator get_Current()
}
public System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator : ValueType {
private XmlNavigatorFilter filter
private IteratorState state
private XPathNavigator navCurrent
private XPathNavigator navNext
private XmlNavigatorStack navStack
public XPathNavigator Current
public void Create(XmlNavigatorFilter filter)
public IteratorResult MoveNext(XPathNavigator input)
public XPathNavigator get_Current()
private void PushAncestors()
}
public System.Xml.Xsl.Runtime.XsltConvert : object {
internal Type BooleanType
internal Type ByteArrayType
internal Type ByteType
internal Type DateTimeType
internal Type DecimalType
internal Type DoubleType
internal Type ICollectionType
internal Type IEnumerableType
internal Type IListType
internal Type Int16Type
internal Type Int32Type
internal Type Int64Type
internal Type IXPathNavigableType
internal Type ObjectType
internal Type SByteType
internal Type SingleType
internal Type StringType
internal Type TimeSpanType
internal Type UInt16Type
internal Type UInt32Type
internal Type UInt64Type
internal Type UriType
internal Type VoidType
internal Type XmlAtomicValueType
internal Type XmlQualifiedNameType
internal Type XPathItemType
internal Type XPathNavigatorArrayType
internal Type XPathNavigatorType
internal Type XPathNodeIteratorType
public bool ToBoolean(XPathItem item)
public bool ToBoolean(IList`1<XPathItem> listItems)
public double ToDouble(string value)
public double ToDouble(XPathItem item)
public double ToDouble(IList`1<XPathItem> listItems)
public XPathNavigator ToNode(XPathItem item)
public XPathNavigator ToNode(IList`1<XPathItem> listItems)
public IList`1<XPathNavigator> ToNodeSet(XPathItem item)
public IList`1<XPathNavigator> ToNodeSet(IList`1<XPathItem> listItems)
public string ToString(double value)
public string ToString(XPathItem item)
public string ToString(IList`1<XPathItem> listItems)
public string ToString(DateTime value)
public double ToDouble(decimal value)
public double ToDouble(int value)
public double ToDouble(long value)
public decimal ToDecimal(double value)
public int ToInt(double value)
public long ToLong(double value)
public DateTime ToDateTime(string value)
internal XmlAtomicValue ConvertToType(XmlAtomicValue value, XmlQueryType destinationType)
public IList`1<XPathNavigator> EnsureNodeSet(IList`1<XPathItem> listItems)
internal XmlQueryType InferXsltType(Type clrType)
}
public System.Xml.Xsl.Runtime.XsltFunctions : object {
private CompareInfo compareInfo
public bool StartsWith(string s1, string s2)
public bool Contains(string s1, string s2)
public string SubstringBefore(string s1, string s2)
public string SubstringAfter(string s1, string s2)
public string Substring(string value, double startIndex)
public string Substring(string value, double startIndex, double length)
public string NormalizeSpace(string value)
public string Translate(string arg, string mapString, string transString)
public bool Lang(string value, XPathNavigator context)
public double Round(double value)
public XPathItem SystemProperty(XmlQualifiedName name)
public string BaseUri(XPathNavigator navigator)
public string OuterXml(XPathNavigator navigator)
public string EXslObjectType(IList`1<XPathItem> value)
public double MSNumber(IList`1<XPathItem> value)
public string MSFormatDateTime(string dateTime, string format, string lang, bool isDate)
public double MSStringCompare(string s1, string s2, string lang, string options)
public string MSUtc(string dateTime)
public string MSLocalName(string name)
public string MSNamespaceUri(string name, XPathNavigator currentNode)
private CultureInfo GetCultureInfo(string lang)
private void PrintDate(Char[] text, DateTime dt)
private void PrintTime(Char[] text, DateTime dt)
private void PrintYear(Char[] text, int value)
private void PrintMsec(Char[] text, int value)
private void ShortToCharArray(Char[] text, int start, int value)
}
public System.Xml.Xsl.Runtime.XsltLibrary : object {
private XmlQueryRuntime runtime
private HybridDictionary functionsAvail
private Dictionary`2<XmlQualifiedName, DecimalFormat> decimalFormats
private List`1<DecimalFormatter> decimalFormatters
internal int InvariantCultureLcid
internal void .ctor(XmlQueryRuntime runtime)
public string FormatMessage(string res, IList`1<string> args)
public int CheckScriptNamespace(string nsUri)
public bool ElementAvailable(XmlQualifiedName name)
public bool FunctionAvailable(XmlQualifiedName name)
private bool FunctionAvailableHelper(XmlQualifiedName name)
public int RegisterDecimalFormat(XmlQualifiedName name, string infinitySymbol, string nanSymbol, string characters)
private DecimalFormat CreateDecimalFormat(string infinitySymbol, string nanSymbol, string characters)
public double RegisterDecimalFormatter(string formatPicture, string infinitySymbol, string nanSymbol, string characters)
public string FormatNumberStatic(double value, double decimalFormatterIndex)
public string FormatNumberDynamic(double value, string formatPicture, XmlQualifiedName decimalFormatName, string errorMessageName)
public string NumberFormat(IList`1<XPathItem> value, string formatString, double lang, string letterValue, string groupingSeparator, double groupingSize)
public int LangToLcid(string lang, bool forwardCompatibility)
internal int LangToLcidInternal(string lang, bool forwardCompatibility, IErrorHelper errorHelper)
private TypeCode GetTypeCode(XPathItem item)
private TypeCode WeakestTypeCode(TypeCode typeCode1, TypeCode typeCode2)
private bool CompareNumbers(ComparisonOperator op, double left, double right)
private bool CompareValues(ComparisonOperator op, XPathItem left, XPathItem right, TypeCode compType)
private bool CompareNodeSetAndValue(ComparisonOperator op, IList`1<XPathNavigator> nodeset, XPathItem val, TypeCode compType)
private bool CompareNodeSetAndNodeSet(ComparisonOperator op, IList`1<XPathNavigator> left, IList`1<XPathNavigator> right, TypeCode compType)
public bool EqualityOperator(double opCode, IList`1<XPathItem> left, IList`1<XPathItem> right)
private ComparisonOperator InvertOperator(ComparisonOperator op)
public bool RelationalOperator(double opCode, IList`1<XPathItem> left, IList`1<XPathItem> right)
public bool IsSameNodeSort(XPathNavigator nav1, XPathNavigator nav2)
internal void CheckXsltValue(XPathItem item)
internal void CheckXsltValue(IList`1<XPathItem> val)
private bool IsNodeSetOrRtf(IList`1<XPathItem> val)
private IList`1<XPathNavigator> ToNodeSetOrRtf(IList`1<XPathItem> val)
}
internal System.Xml.Xsl.Runtime.XsltMethods : object {
public MethodInfo FormatMessage
public MethodInfo EnsureNodeSet
public MethodInfo EqualityOperator
public MethodInfo RelationalOperator
public MethodInfo StartsWith
public MethodInfo Contains
public MethodInfo SubstringBefore
public MethodInfo SubstringAfter
public MethodInfo Substring2
public MethodInfo Substring3
public MethodInfo NormalizeSpace
public MethodInfo Translate
public MethodInfo Lang
public MethodInfo Floor
public MethodInfo Ceiling
public MethodInfo Round
public MethodInfo SystemProperty
public MethodInfo BaseUri
public MethodInfo OuterXml
public MethodInfo OnCurrentNodeChanged
public MethodInfo MSFormatDateTime
public MethodInfo MSStringCompare
public MethodInfo MSUtc
public MethodInfo MSNumber
public MethodInfo MSLocalName
public MethodInfo MSNamespaceUri
public MethodInfo EXslObjectType
public MethodInfo CheckScriptNamespace
public MethodInfo FunctionAvailable
public MethodInfo ElementAvailable
public MethodInfo RegisterDecimalFormat
public MethodInfo RegisterDecimalFormatter
public MethodInfo FormatNumberStatic
public MethodInfo FormatNumberDynamic
public MethodInfo IsSameNodeSort
public MethodInfo LangToLcid
public MethodInfo NumberFormat
public MethodInfo GetMethod(Type className, string methName)
public MethodInfo GetMethod(Type className, string methName, Type[] args)
}
internal System.Xml.Xsl.SourceLineInfo : object {
protected string uriString
protected Location start
protected Location end
protected int NoSourceMagicNumber
public SourceLineInfo NoSource
public string Uri
public int StartLine
public int StartPos
public int EndLine
public int EndPos
public Location End
public Location Start
public bool IsNoSource
public void .ctor(string uriString, int startLine, int startPos, int endLine, int endPos)
public void .ctor(string uriString, Location start, Location end)
public string get_Uri()
public int get_StartLine()
public int get_StartPos()
public int get_EndLine()
public int get_EndPos()
public Location get_End()
public Location get_Start()
public bool get_IsNoSource()
public void Validate(ISourceLineInfo lineInfo)
public string GetFileName(string uriString)
}
internal System.Xml.Xsl.StringPair : ValueType {
private string left
private string right
public string Left
public string Right
public void .ctor(string left, string right)
public string get_Left()
public string get_Right()
}
internal System.Xml.Xsl.XmlILCommand : object {
private ExecuteDelegate delExec
private XmlQueryStaticData staticData
public ExecuteDelegate ExecuteDelegate
public XmlQueryStaticData StaticData
public void .ctor(ExecuteDelegate delExec, XmlQueryStaticData staticData)
public ExecuteDelegate get_ExecuteDelegate()
public XmlQueryStaticData get_StaticData()
public IList Evaluate(string contextDocumentUri, XmlResolver dataSources, XsltArgumentList argumentList)
public void Execute(object defaultDocument, XmlResolver dataSources, XsltArgumentList argumentList, XmlWriter writer)
private void Execute(object defaultDocument, XmlResolver dataSources, XsltArgumentList argumentList, XmlSequenceWriter results)
}
internal System.Xml.Xsl.XmlILGenerator : object {
private QilExpression qil
private GenerateHelper helper
private XmlILOptimizerVisitor optVisitor
private XmlILVisitor xmlIlVisitor
private XmlILModule module
public XmlILCommand Generate(QilExpression query, TypeBuilder typeBldr)
private void CreateFunctionMetadata(IList`1<QilNode> funcList)
private void CreateGlobalValueMetadata(IList`1<QilNode> globalList)
private MethodInfo GenerateExecuteFunction(MethodInfo methExec, MethodInfo methRoot)
private void CreateHelperFunctions()
private void EvaluateGlobalValues(IList`1<QilNode> iterList)
public void CreateTypeInitializer(XmlQueryStaticData staticData)
}
internal System.Xml.Xsl.XmlNodeKindFlags : Enum {
public int value__
public XmlNodeKindFlags None
public XmlNodeKindFlags Document
public XmlNodeKindFlags Element
public XmlNodeKindFlags Attribute
public XmlNodeKindFlags Text
public XmlNodeKindFlags Comment
public XmlNodeKindFlags PI
public XmlNodeKindFlags Namespace
public XmlNodeKindFlags Content
public XmlNodeKindFlags Any
}
internal System.Xml.Xsl.XmlQualifiedNameTest : XmlQualifiedName {
private bool exclude
private string wildcard
private XmlQualifiedNameTest wc
public XmlQualifiedNameTest Wildcard
public bool IsWildcard
public bool IsNameWildcard
public bool IsNamespaceWildcard
public XmlQualifiedNameTest get_Wildcard()
private void .ctor(string name, string ns, bool exclude)
public XmlQualifiedNameTest New(string name, string ns)
public bool get_IsWildcard()
public bool get_IsNameWildcard()
public bool get_IsNamespaceWildcard()
private bool IsNameSubsetOf(XmlQualifiedNameTest other)
private bool IsNamespaceSubsetOf(XmlQualifiedNameTest other)
public bool IsSubsetOf(XmlQualifiedNameTest other)
public bool HasIntersection(XmlQualifiedNameTest other)
public string ToString()
}
internal System.Xml.Xsl.XmlQueryCardinality : ValueType {
private int value
private XmlQueryCardinality[0...,0...] cardinalityProduct
private XmlQueryCardinality[0...,0...] cardinalitySum
private String[] toString
private String[] serialized
public XmlQueryCardinality None
public XmlQueryCardinality Zero
public XmlQueryCardinality One
public XmlQueryCardinality ZeroOrOne
public XmlQueryCardinality More
public XmlQueryCardinality NotOne
public XmlQueryCardinality OneOrMore
public XmlQueryCardinality ZeroOrMore
private void .ctor(int value)
public XmlQueryCardinality get_None()
public XmlQueryCardinality get_Zero()
public XmlQueryCardinality get_One()
public XmlQueryCardinality get_ZeroOrOne()
public XmlQueryCardinality get_More()
public XmlQueryCardinality get_NotOne()
public XmlQueryCardinality get_OneOrMore()
public XmlQueryCardinality get_ZeroOrMore()
public bool Equals(XmlQueryCardinality other)
public bool op_Equality(XmlQueryCardinality left, XmlQueryCardinality right)
public bool op_Inequality(XmlQueryCardinality left, XmlQueryCardinality right)
public bool Equals(object other)
public int GetHashCode()
public XmlQueryCardinality op_BitwiseOr(XmlQueryCardinality left, XmlQueryCardinality right)
public XmlQueryCardinality op_BitwiseAnd(XmlQueryCardinality left, XmlQueryCardinality right)
public XmlQueryCardinality op_Multiply(XmlQueryCardinality left, XmlQueryCardinality right)
public XmlQueryCardinality op_Addition(XmlQueryCardinality left, XmlQueryCardinality right)
public bool op_LessThanOrEqual(XmlQueryCardinality left, XmlQueryCardinality right)
public bool op_GreaterThanOrEqual(XmlQueryCardinality left, XmlQueryCardinality right)
public XmlQueryCardinality AtMost()
public bool NeverSubset(XmlQueryCardinality other)
public string ToString(string format)
public string ToString()
public void .ctor(string s)
public void GetObjectData(BinaryWriter writer)
public void .ctor(BinaryReader reader)
}
internal System.Xml.Xsl.XmlQueryType : ListBase`1<XmlQueryType> {
private BitMatrix TypeCodeDerivation
private int hashCode
private TypeFlags[] TypeCodeToFlags
private XmlTypeCode[] BaseTypeCodes
private String[] TypeNames
public XmlTypeCode TypeCode
public XmlQualifiedNameTest NameTest
public XmlSchemaType SchemaType
public bool IsNillable
public XmlNodeKindFlags NodeKinds
public bool IsStrict
public XmlQueryCardinality Cardinality
public XmlQueryType Prime
public bool IsNotRtf
public bool IsDod
public XmlValueConverter ClrMapping
public bool IsEmpty
public bool IsSingleton
public bool MaybeEmpty
public bool MaybeMany
public bool IsNode
public bool IsAtomicValue
public bool IsNumeric
public XmlTypeCode get_TypeCode()
public XmlQualifiedNameTest get_NameTest()
public XmlSchemaType get_SchemaType()
public bool get_IsNillable()
public XmlNodeKindFlags get_NodeKinds()
public bool get_IsStrict()
public XmlQueryCardinality get_Cardinality()
public XmlQueryType get_Prime()
public bool get_IsNotRtf()
public bool get_IsDod()
public XmlValueConverter get_ClrMapping()
public bool IsSubtypeOf(XmlQueryType baseType)
public bool NeverSubtypeOf(XmlQueryType baseType)
public bool Equals(XmlQueryType that)
public bool op_Equality(XmlQueryType left, XmlQueryType right)
public bool op_Inequality(XmlQueryType left, XmlQueryType right)
public bool get_IsEmpty()
public bool get_IsSingleton()
public bool get_MaybeEmpty()
public bool get_MaybeMany()
public bool get_IsNode()
public bool get_IsAtomicValue()
public bool get_IsNumeric()
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public string ToString(string format)
public void GetObjectData(BinaryWriter writer)
private bool IsSubtypeOfItemType(XmlQueryType baseType)
private bool HasIntersectionItemType(XmlQueryType other)
private string ItemTypeToString(bool isXQ)
private string NameAndType(bool isXQ)
private string QNameToString(XmlQualifiedName name)
}
internal System.Xml.Xsl.XmlQueryTypeFactory : object {
public XmlQueryType None
public XmlQueryType Empty
public XmlQueryType Item
public XmlQueryType ItemS
public XmlQueryType Node
public XmlQueryType NodeS
public XmlQueryType Element
public XmlQueryType ElementS
public XmlQueryType Document
public XmlQueryType DocumentS
public XmlQueryType Attribute
public XmlQueryType AttributeQ
public XmlQueryType AttributeS
public XmlQueryType Namespace
public XmlQueryType NamespaceS
public XmlQueryType Text
public XmlQueryType TextS
public XmlQueryType Comment
public XmlQueryType CommentS
public XmlQueryType PI
public XmlQueryType PIS
public XmlQueryType DocumentOrElement
public XmlQueryType DocumentOrElementQ
public XmlQueryType DocumentOrElementS
public XmlQueryType Content
public XmlQueryType ContentS
public XmlQueryType DocumentOrContent
public XmlQueryType DocumentOrContentS
public XmlQueryType AttributeOrContent
public XmlQueryType AttributeOrContentS
public XmlQueryType AnyAtomicType
public XmlQueryType AnyAtomicTypeS
public XmlQueryType String
public XmlQueryType StringX
public XmlQueryType StringXS
public XmlQueryType Boolean
public XmlQueryType BooleanX
public XmlQueryType Int
public XmlQueryType IntX
public XmlQueryType IntXS
public XmlQueryType IntegerX
public XmlQueryType LongX
public XmlQueryType DecimalX
public XmlQueryType FloatX
public XmlQueryType Double
public XmlQueryType DoubleX
public XmlQueryType DateTimeX
public XmlQueryType QNameX
public XmlQueryType UntypedDocument
public XmlQueryType UntypedElement
public XmlQueryType UntypedAttribute
public XmlQueryType UntypedNode
public XmlQueryType UntypedNodeS
public XmlQueryType NodeNotRtf
public XmlQueryType NodeNotRtfQ
public XmlQueryType NodeNotRtfS
public XmlQueryType NodeSDod
private XmlTypeCode[] NodeKindToTypeCode
public XmlQueryType Type(XmlTypeCode code, bool isStrict)
public XmlQueryType Type(XmlSchemaSimpleType schemaType, bool isStrict)
public XmlQueryType Choice(XmlQueryType left, XmlQueryType right)
public XmlQueryType Choice(XmlQueryType[] types)
public XmlQueryType NodeChoice(XmlNodeKindFlags kinds)
public XmlQueryType Sequence(XmlQueryType left, XmlQueryType right)
public XmlQueryType PrimeProduct(XmlQueryType t, XmlQueryCardinality c)
public XmlQueryType Product(XmlQueryType t, XmlQueryCardinality c)
public XmlQueryType AtMost(XmlQueryType t, XmlQueryCardinality c)
private List`1<XmlQueryType> PrimeChoice(List`1<XmlQueryType> accumulator, IList`1<XmlQueryType> types)
private void AddItemToChoice(List`1<XmlQueryType> accumulator, XmlQueryType itemType)
public XmlQueryType Type(XPathNodeType kind, XmlQualifiedNameTest nameTest, XmlSchemaType contentType, bool isNillable)
public void CheckSerializability(XmlQueryType type)
public void Serialize(BinaryWriter writer, XmlQueryType type)
public XmlQueryType Deserialize(BinaryReader reader)
}
internal System.Xml.Xsl.XPath.IFocus {
public QilNode GetCurrent()
public QilNode GetPosition()
public QilNode GetLast()
}
internal System.Xml.Xsl.XPath.IXPathBuilder`1 {
public void StartBuild()
public Node EndBuild(Node result)
public Node String(string value)
public Node Number(double value)
public Node Operator(XPathOperator op, Node left, Node right)
public Node Axis(XPathAxis xpathAxis, XPathNodeType nodeType, string prefix, string name)
public Node JoinStep(Node left, Node right)
public Node Predicate(Node node, Node condition, bool reverseStep)
public Node Variable(string prefix, string name)
public Node Function(string prefix, string name, IList`1<Node> args)
}
internal System.Xml.Xsl.XPath.IXPathEnvironment {
public XPathQilFactory Factory
public XPathQilFactory get_Factory()
public QilNode ResolveVariable(string prefix, string name)
public QilNode ResolveFunction(string prefix, string name, IList`1<QilNode> args, IFocus env)
public string ResolvePrefix(string prefix)
}
internal System.Xml.Xsl.XPath.LexKind : Enum {
public int value__
public LexKind Unknown
public LexKind Or
public LexKind And
public LexKind Eq
public LexKind Ne
public LexKind Lt
public LexKind Le
public LexKind Gt
public LexKind Ge
public LexKind Plus
public LexKind Minus
public LexKind Multiply
public LexKind Divide
public LexKind Modulo
public LexKind UnaryMinus
public LexKind Union
public LexKind LastOperator
public LexKind DotDot
public LexKind ColonColon
public LexKind SlashSlash
public LexKind Number
public LexKind Axis
public LexKind Name
public LexKind String
public LexKind Eof
public LexKind FirstStringable
public LexKind LastNonChar
public LexKind LParens
public LexKind RParens
public LexKind LBracket
public LexKind RBracket
public LexKind Dot
public LexKind At
public LexKind Comma
public LexKind Star
public LexKind Slash
public LexKind Dollar
public LexKind RBrace
}
internal System.Xml.Xsl.XPath.XPathAxis : Enum {
public int value__
public XPathAxis Unknown
public XPathAxis Ancestor
public XPathAxis AncestorOrSelf
public XPathAxis Attribute
public XPathAxis Child
public XPathAxis Descendant
public XPathAxis DescendantOrSelf
public XPathAxis Following
public XPathAxis FollowingSibling
public XPathAxis Namespace
public XPathAxis Parent
public XPathAxis Preceding
public XPathAxis PrecedingSibling
public XPathAxis Self
public XPathAxis Root
}
internal System.Xml.Xsl.XPath.XPathBuilder : object {
private XPathQilFactory f
private IXPathEnvironment environment
private bool inTheBuild
protected QilNode fixupCurrent
protected QilNode fixupPosition
protected QilNode fixupLast
protected int numFixupCurrent
protected int numFixupPosition
protected int numFixupLast
private FixupVisitor fixupVisitor
private XmlNodeKindFlags[] XPathNodeType2QilXmlNodeKind
private XPathOperatorGroup[] OperatorGroup
private QilNodeType[] QilOperator
private XmlNodeKindFlags[] XPathAxisMask
public XmlTypeCode[] argAny
public XmlTypeCode[] argNodeSet
public XmlTypeCode[] argBoolean
public XmlTypeCode[] argDouble
public XmlTypeCode[] argString
public XmlTypeCode[] argString2
public XmlTypeCode[] argString3
public XmlTypeCode[] argFnSubstr
public Dictionary`2<string, FunctionInfo`1<FuncId>> FunctionTable
private XPathQilFactory System.Xml.Xsl.XPath.IXPathEnvironment.Factory
private QilNode System.Xml.Xsl.XPath.IFocus.GetCurrent()
private QilNode System.Xml.Xsl.XPath.IFocus.GetPosition()
private QilNode System.Xml.Xsl.XPath.IFocus.GetLast()
private XPathQilFactory System.Xml.Xsl.XPath.IXPathEnvironment.get_Factory()
private QilNode System.Xml.Xsl.XPath.IXPathEnvironment.ResolveVariable(string prefix, string name)
private QilNode System.Xml.Xsl.XPath.IXPathEnvironment.ResolveFunction(string prefix, string name, IList`1<QilNode> args, IFocus env)
private string System.Xml.Xsl.XPath.IXPathEnvironment.ResolvePrefix(string prefix)
public void .ctor(IXPathEnvironment environment)
public void StartBuild()
public QilNode EndBuild(QilNode result)
private QilNode GetCurrentNode()
private QilNode GetCurrentPosition()
private QilNode GetLastPosition()
public QilNode String(string value)
public QilNode Number(double value)
public QilNode Operator(XPathOperator op, QilNode left, QilNode right)
private QilNode LogicalOperator(XPathOperator op, QilNode left, QilNode right)
private QilNode CompareValues(XPathOperator op, QilNode left, QilNode right, XmlTypeCode compType)
private QilNode CompareNodeSetAndValue(XPathOperator op, QilNode nodeset, QilNode val, XmlTypeCode compType)
private XPathOperator InvertOp(XPathOperator op)
private QilNode CompareNodeSetAndNodeSet(XPathOperator op, QilNode left, QilNode right, XmlTypeCode compType)
private QilNode EqualityOperator(XPathOperator op, QilNode left, QilNode right)
private QilNode RelationalOperator(XPathOperator op, QilNode left, QilNode right)
private QilNode NegateOperator(XPathOperator op, QilNode left, QilNode right)
private QilNode ArithmeticOperator(XPathOperator op, QilNode left, QilNode right)
private QilNode UnionOperator(XPathOperator op, QilNode left, QilNode right)
public XmlNodeKindFlags AxisTypeMask(XmlNodeKindFlags inputTypeMask, XPathNodeType nodeType, XPathAxis xpathAxis)
private QilNode BuildAxisFilter(QilNode qilAxis, XPathAxis xpathAxis, XPathNodeType nodeType, string name, string nsUri)
private QilNode BuildAxis(XPathAxis xpathAxis, XPathNodeType nodeType, string nsUri, string name)
public QilNode Axis(XPathAxis xpathAxis, XPathNodeType nodeType, string prefix, string name)
public QilNode JoinStep(QilNode left, QilNode right)
public QilNode Predicate(QilNode nodeset, QilNode predicate, bool isReverseStep)
public QilNode PredicateToBoolean(QilNode predicate, XPathQilFactory f, IXPathEnvironment env)
public QilNode BuildOnePredicate(QilNode nodeset, QilNode predicate, bool isReverseStep, XPathQilFactory f, FixupVisitor fixupVisitor, Int32& numFixupCurrent, Int32& numFixupPosition, Int32& numFixupLast)
public QilNode Variable(string prefix, string name)
public QilNode Function(string prefix, string name, IList`1<QilNode> args)
private QilNode LocalNameOfFirstNode(QilNode arg)
private QilNode NamespaceOfFirstNode(QilNode arg)
private QilNode NameOf(QilNode arg)
private QilNode NameOfFirstNode(QilNode arg)
private QilNode Sum(QilNode arg)
private Dictionary`2<string, FunctionInfo`1<FuncId>> CreateFunctionTable()
public bool IsFunctionAvailable(string localName, string nsUri)
}
internal System.Xml.Xsl.XPath.XPathCompileException : XslLoadException {
public string queryString
public int startChar
public int endChar
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
internal void .ctor(string queryString, int startChar, int endChar, string resId, String[] args)
internal void .ctor(string resId, String[] args)
private void AppendTrimmed(StringBuilder sb, string value, int startIndex, int count, TrimType trimType)
internal string MarkOutError()
internal string FormatDetailedMessage()
}
internal System.Xml.Xsl.XPath.XPathOperator : Enum {
public int value__
public XPathOperator Unknown
public XPathOperator Or
public XPathOperator And
public XPathOperator Eq
public XPathOperator Ne
public XPathOperator Lt
public XPathOperator Le
public XPathOperator Gt
public XPathOperator Ge
public XPathOperator Plus
public XPathOperator Minus
public XPathOperator Multiply
public XPathOperator Divide
public XPathOperator Modulo
public XPathOperator UnaryMinus
public XPathOperator Union
public XPathOperator LastXPath1Operator
public XPathOperator UnaryPlus
public XPathOperator Idiv
public XPathOperator Is
public XPathOperator After
public XPathOperator Before
public XPathOperator Range
public XPathOperator Except
public XPathOperator Intersect
public XPathOperator ValEq
public XPathOperator ValNe
public XPathOperator ValLt
public XPathOperator ValLe
public XPathOperator ValGt
public XPathOperator ValGe
}
internal System.Xml.Xsl.XPath.XPathParser`1 : object {
private XPathScanner scanner
private IXPathBuilder`1<Node> builder
private Stack`1<int> posInfo
private int MaxParseRelativePathDepth
private int parseRelativePath
private int MaxParseSubExprDepth
private int parseSubExprDepth
private Int32[] XPathOperatorPrecedence
public Node Parse(XPathScanner scanner, IXPathBuilder`1<Node> builder, LexKind endLex)
internal bool IsStep(LexKind lexKind)
private Node ParseLocationPath()
private Node ParseRelativeLocationPath()
private Node ParseStep()
private bool IsReverseAxis(XPathAxis axis)
private Node ParseNodeTest(XPathAxis axis)
private bool IsNodeType(XPathScanner scanner)
private XPathNodeType PrincipalNodeType(XPathAxis axis)
internal void InternalParseNodeTest(XPathScanner scanner, XPathAxis axis, XPathNodeType& nodeType, String& nodePrefix, String& nodeName)
private Node ParsePredicate()
private Node ParseExpr()
private Node ParseSubExpr(int callerPrec)
private Node ParseUnionExpr()
private Node ParsePathExpr()
private Node ParseFilterExpr()
private bool IsPrimaryExpr()
private Node ParsePrimaryExpr()
private Node ParseFunctionCall()
private void PushPosInfo(int startChar, int endChar)
private void PopPosInfo()
private void PopPosInfo(Int32& startChar, Int32& endChar)
}
internal System.Xml.Xsl.XPath.XPathQilFactory : QilPatternFactory {
public void .ctor(QilFactory f, bool debug)
public QilNode Error(string res, QilNode args)
public QilNode Error(ISourceLineInfo lineInfo, string res, String[] args)
public QilIterator FirstNode(QilNode n)
public bool IsAnyType(QilNode n)
public void CheckAny(QilNode n)
public void CheckNode(QilNode n)
public void CheckNodeSet(QilNode n)
public void CheckNodeNotRtf(QilNode n)
public void CheckString(QilNode n)
public void CheckStringS(QilNode n)
public void CheckDouble(QilNode n)
public void CheckBool(QilNode n)
public bool CannotBeNodeSet(QilNode n)
public QilNode SafeDocOrderDistinct(QilNode n)
public QilNode InvokeFormatMessage(QilNode res, QilNode args)
public QilNode InvokeEqualityOperator(QilNodeType op, QilNode left, QilNode right)
public QilNode InvokeRelationalOperator(QilNodeType op, QilNode left, QilNode right)
private void ExpectAny(QilNode n)
public QilNode ConvertToType(XmlTypeCode requiredType, QilNode n)
public QilNode ConvertToString(QilNode n)
public QilNode ConvertToBoolean(QilNode n)
public QilNode ConvertToNumber(QilNode n)
public QilNode ConvertToNode(QilNode n)
public QilNode ConvertToNodeSet(QilNode n)
public QilNode TryEnsureNodeSet(QilNode n)
public QilNode EnsureNodeSet(QilNode n)
public QilNode InvokeEnsureNodeSet(QilNode n)
public QilNode Id(QilNode context, QilNode id)
public QilNode InvokeStartsWith(QilNode str1, QilNode str2)
public QilNode InvokeContains(QilNode str1, QilNode str2)
public QilNode InvokeSubstringBefore(QilNode str1, QilNode str2)
public QilNode InvokeSubstringAfter(QilNode str1, QilNode str2)
public QilNode InvokeSubstring(QilNode str, QilNode start)
public QilNode InvokeSubstring(QilNode str, QilNode start, QilNode length)
public QilNode InvokeNormalizeSpace(QilNode str)
public QilNode InvokeTranslate(QilNode str1, QilNode str2, QilNode str3)
public QilNode InvokeLang(QilNode lang, QilNode context)
public QilNode InvokeFloor(QilNode value)
public QilNode InvokeCeiling(QilNode value)
public QilNode InvokeRound(QilNode value)
}
internal System.Xml.Xsl.XPath.XPathScanner : object {
private string xpathExpr
private int curIndex
private char curChar
private LexKind kind
private string name
private string prefix
private string stringValue
private bool canBeFunction
private int lexStart
private int prevLexEnd
private LexKind prevKind
private XPathAxis axis
private XmlCharType xmlCharType
public string Source
public LexKind Kind
public int LexStart
public int LexSize
public int PrevLexEnd
public string Name
public string Prefix
public string RawValue
public string StringValue
public bool CanBeFunction
public XPathAxis Axis
public void .ctor(string xpathExpr)
public void .ctor(string xpathExpr, int startFrom)
public string get_Source()
public LexKind get_Kind()
public int get_LexStart()
public int get_LexSize()
public int get_PrevLexEnd()
private void SetSourceIndex(int index)
private void NextChar()
public string get_Name()
public string get_Prefix()
public string get_RawValue()
public string get_StringValue()
public bool get_CanBeFunction()
public XPathAxis get_Axis()
private void SkipSpace()
private bool IsAsciiDigit(char ch)
public void NextLex()
private bool CheckOperator(bool star)
private XPathAxis CheckAxis()
private void ScanNumber()
private void ScanString()
private string ScanNCName()
public void PassToken(LexKind t)
public void CheckToken(LexKind t)
private string LexKindToString(LexKind t)
public XPathCompileException CreateException(string resId, String[] args)
}
internal System.Xml.Xsl.XPathConvert : object {
public Double[] C10toN
public UInt32 DblHi(double dbl)
public UInt32 DblLo(double dbl)
public bool IsSpecial(double dbl)
public UInt32 NotZero(UInt32 u)
public UInt32 AddU(UInt32& u1, UInt32 u2)
public UInt32 MulU(UInt32 u1, UInt32 u2, UInt32& uHi)
public int CbitZeroLeft(UInt32 u)
public bool IsInteger(double dbl, Int32& value)
private string IntToString(int val)
public string DoubleToString(double dbl)
private bool IsAsciiDigit(char ch)
private bool IsWhitespace(char ch)
private Char* SkipWhitespace(Char* pch)
public double StringToDouble(string s)
}
public System.Xml.Xsl.XslCompiledTransform : object {
private XmlReaderSettings ReaderSettings
private PermissionSet MemberAccessPermissionSet
private string Version
private bool enableDebug
private CompilerResults compilerResults
private XmlWriterSettings outputSettings
private QilExpression qil
private XmlILCommand command
private ConstructorInfo modreq(System.Runtime.CompilerServices.IsVolatile) GeneratedCodeCtor
internal CompilerErrorCollection Errors
public XmlWriterSettings OutputSettings
public TempFileCollection TemporaryFiles
public void .ctor(bool enableDebug)
private void Reset()
internal CompilerErrorCollection get_Errors()
public XmlWriterSettings get_OutputSettings()
public TempFileCollection get_TemporaryFiles()
public void Load(XmlReader stylesheet)
public void Load(XmlReader stylesheet, XsltSettings settings, XmlResolver stylesheetResolver)
public void Load(IXPathNavigable stylesheet)
public void Load(IXPathNavigable stylesheet, XsltSettings settings, XmlResolver stylesheetResolver)
public void Load(string stylesheetUri)
public void Load(string stylesheetUri, XsltSettings settings, XmlResolver stylesheetResolver)
private CompilerResults LoadInternal(object stylesheet, XsltSettings settings, XmlResolver stylesheetResolver)
private void CompileXsltToQil(object stylesheet, XsltSettings settings, XmlResolver stylesheetResolver)
private CompilerError GetFirstError()
private void CompileQilToMsil(XsltSettings settings)
public CompilerErrorCollection CompileToType(XmlReader stylesheet, XsltSettings settings, XmlResolver stylesheetResolver, bool debug, TypeBuilder typeBuilder, string scriptAssemblyPath)
public void Load(Type compiledStylesheet)
public void Load(MethodInfo executeMethod, Byte[] queryData, Type[] earlyBoundTypes)
public void Transform(IXPathNavigable input, XmlWriter results)
public void Transform(IXPathNavigable input, XsltArgumentList arguments, XmlWriter results)
public void Transform(IXPathNavigable input, XsltArgumentList arguments, TextWriter results)
public void Transform(IXPathNavigable input, XsltArgumentList arguments, Stream results)
public void Transform(XmlReader input, XmlWriter results)
public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results)
public void Transform(XmlReader input, XsltArgumentList arguments, TextWriter results)
public void Transform(XmlReader input, XsltArgumentList arguments, Stream results)
public void Transform(string inputUri, XmlWriter results)
public void Transform(string inputUri, XsltArgumentList arguments, XmlWriter results)
public void Transform(string inputUri, XsltArgumentList arguments, TextWriter results)
public void Transform(string inputUri, XsltArgumentList arguments, Stream results)
public void Transform(string inputUri, string resultsFile)
public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver)
public void Transform(IXPathNavigable input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver)
private void CheckArguments(object input, object results)
private void CheckArguments(string inputUri, object results)
private void CheckCommand()
private QilExpression TestCompile(object stylesheet, XsltSettings settings, XmlResolver stylesheetResolver)
private void TestGenerate(XsltSettings settings)
private void Transform(string inputUri, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver)
internal void PrintQil(object qil, XmlWriter xw, bool printComments, bool printTypes, bool printLineInfo)
}
internal System.Xml.Xsl.XslFlags : Enum {
public int value__
public XslFlags None
public XslFlags String
public XslFlags Number
public XslFlags Boolean
public XslFlags Node
public XslFlags Nodeset
public XslFlags Rtf
public XslFlags TypeFilter
public XslFlags AnyType
public XslFlags Current
public XslFlags Position
public XslFlags Last
public XslFlags FocusFilter
public XslFlags FullFocus
public XslFlags HasCalls
public XslFlags MayBeDefault
public XslFlags SideEffects
public XslFlags Stop
}
internal System.Xml.Xsl.XslLoadException : XslTransformException {
private ISourceLineInfo lineInfo
public string SourceUri
public int LineNumber
public int LinePosition
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
internal void .ctor(string res, String[] args)
internal void .ctor(Exception inner, ISourceLineInfo lineInfo)
internal void .ctor(CompilerError error)
internal void SetSourceLineInfo(ISourceLineInfo lineInfo)
public string get_SourceUri()
public int get_LineNumber()
public int get_LinePosition()
private string AppendLineInfoMessage(string message, ISourceLineInfo lineInfo)
internal string CreateMessage(ISourceLineInfo lineInfo, string res, String[] args)
internal string FormatDetailedMessage()
}
internal System.Xml.Xsl.Xslt.AstFactory : object {
private QilFactory f
public XslNode XslNode(XslNodeType nodeType, QilName name, string arg, XslVersion xslVer)
public XslNode ApplyImports(QilName mode, Stylesheet sheet, XslVersion xslVer)
public XslNodeEx ApplyTemplates(QilName mode, string select, ContextInfo ctxInfo, XslVersion xslVer)
public XslNodeEx ApplyTemplates(QilName mode)
public NodeCtor Attribute(string nameAvt, string nsAvt, XslVersion xslVer)
public AttributeSet AttributeSet(QilName name)
public XslNodeEx CallTemplate(QilName name, ContextInfo ctxInfo)
public XslNode Choose()
public XslNode Comment()
public XslNode Copy()
public XslNode CopyOf(string select, XslVersion xslVer)
public NodeCtor Element(string nameAvt, string nsAvt, XslVersion xslVer)
public XslNode Error(string message)
public XslNodeEx ForEach(string select, ContextInfo ctxInfo, XslVersion xslVer)
public XslNode If(string test, XslVersion xslVer)
public Key Key(QilName name, string match, string use, XslVersion xslVer)
public XslNode List()
public XslNode LiteralAttribute(QilName name, string value, XslVersion xslVer)
public XslNode LiteralElement(QilName name)
public XslNode Message(bool term)
public XslNode Nop()
public Number Number(NumberLevel level, string count, string from, string value, string format, string lang, string letterValue, string groupingSeparator, string groupingSize, XslVersion xslVer)
public XslNode Otherwise()
public XslNode PI(string name, XslVersion xslVer)
public Sort Sort(string select, string lang, string dataType, string order, string caseOrder, XslVersion xslVer)
public Template Template(QilName name, string match, QilName mode, double priority, XslVersion xslVer)
public XslNode Text(string data)
public XslNode Text(string data, SerializationHints hints)
public XslNode UseAttributeSet(QilName name)
public VarPar VarPar(XslNodeType nt, QilName name, string select, XslVersion xslVer)
public VarPar WithParam(QilName name)
public QilName QName(string local, string uri, string prefix)
public QilName QName(string local)
}
internal System.Xml.Xsl.Xslt.AttributeSet : ProtoTemplate {
public CycleCheck CycleCheck
public void .ctor(QilName name, XslVersion xslVer)
public string GetDebugName()
public void AddContent(XslNode node)
public void MergeContent(AttributeSet other)
}
internal System.Xml.Xsl.Xslt.Compiler : object {
public XsltSettings Settings
public bool IsDebug
public string ScriptAssemblyPath
public int Version
public string inputTypeAnnotations
public CompilerResults CompilerResults
public int CurrentPrecedence
public XslNode StartApplyTemplates
public RootLevel Root
public Scripts Scripts
public Output Output
public List`1<VarPar> ExternalPars
public List`1<VarPar> GlobalVars
public List`1<WhitespaceRule> WhitespaceRules
public DecimalFormats DecimalFormats
public Keys Keys
public List`1<ProtoTemplate> AllTemplates
public Dictionary`2<QilName, VarPar> AllGlobalVarPars
public Dictionary`2<QilName, Template> NamedTemplates
public Dictionary`2<QilName, AttributeSet> AttributeSets
public Dictionary`2<string, NsAlias> NsAliases
private Dictionary`2<string, int> moduleOrder
public string PhantomNCName
private int phantomNsCounter
private int savedErrorCount
private int ErrorCount
public void .ctor(XsltSettings settings, bool debug, string scriptAssemblyPath)
public CompilerResults Compile(object stylesheet, XmlResolver xmlResolver, QilExpression& qil)
public Stylesheet CreateStylesheet()
public void AddModule(string baseUri)
public void ApplyNsAliases(String& prefix, String& nsUri)
public bool SetNsAlias(string ssheetNsUri, string resultNsUri, string resultPrefix, int importPrecedence)
private void MergeWhitespaceRules(Stylesheet sheet)
private void MergeAttributeSets(Stylesheet sheet)
private void MergeGlobalVarPars(Stylesheet sheet)
public void MergeWithStylesheet(Stylesheet sheet)
public string ConstructQName(string prefix, string localName)
public bool ParseQName(string qname, String& prefix, String& localName, IErrorHelper errorHelper)
public bool ParseNameTest(string nameTest, String& prefix, String& localName, IErrorHelper errorHelper)
public void ValidatePiName(string name, IErrorHelper errorHelper)
public string CreatePhantomNamespace()
public bool IsPhantomNamespace(string namespaceName)
public bool IsPhantomName(QilName qname)
private int get_ErrorCount()
private void set_ErrorCount(int value)
public void EnterForwardsCompatible()
public bool ExitForwardsCompatible(bool fwdCompat)
public CompilerError CreateError(ISourceLineInfo lineInfo, string res, String[] args)
public void ReportError(ISourceLineInfo lineInfo, string res, String[] args)
public void ReportWarning(ISourceLineInfo lineInfo, string res, String[] args)
private void SortErrors()
}
internal System.Xml.Xsl.Xslt.CompilerScopeManager`1 : object {
private int LastPredefRecord
private ScopeRecord[] records
private int lastRecord
private int lastScopes
public bool ForwardCompatibility
public bool BackwardCompatibility
public bool CanHaveApplyImports
public void .ctor(KeywordsTable atoms)
public void EnterScope()
public void ExitScope()
public void CheckEmpty()
public bool EnterScope(NsDecl nsDecl)
private void AddRecord()
private void AddRecord(ScopeFlags<V> flag, string ncName, string uri, V value)
private void SetFlag(ScopeFlags<V> flag, bool value)
public void AddVariable(QilName varName, V value)
private string LookupNamespace(string prefix, int from, int to)
public string LookupNamespace(string prefix)
private ScopeFlags<V> GetName(ScopeRecord& re, String& prefix, String& nsUri)
public void AddNsDeclaration(string prefix, string nsUri)
public void AddExNamespace(string nsUri)
public bool IsExNamespace(string nsUri)
private int SearchVariable(string localName, string uri)
public V LookupVariable(string localName, string uri)
public bool IsLocalVariable(string localName, string uri)
public bool get_ForwardCompatibility()
public void set_ForwardCompatibility(bool value)
public bool get_BackwardCompatibility()
public void set_BackwardCompatibility(bool value)
public bool get_CanHaveApplyImports()
public void set_CanHaveApplyImports(bool value)
internal IEnumerable`1<ScopeRecord<V>> GetActiveRecords()
public NamespaceEnumerator<V> GetEnumerator()
}
internal System.Xml.Xsl.Xslt.CycleCheck : Enum {
public int value__
public CycleCheck NotStarted
public CycleCheck Processing
public CycleCheck Completed
}
internal System.Xml.Xsl.Xslt.DecimalFormatDecl : object {
public XmlQualifiedName Name
public string InfinitySymbol
public string NanSymbol
public Char[] Characters
public DecimalFormatDecl Default
public void .ctor(XmlQualifiedName name, string infinitySymbol, string nanSymbol, string characters)
}
internal System.Xml.Xsl.Xslt.DecimalFormats : KeyedCollection`2<XmlQualifiedName, DecimalFormatDecl> {
protected XmlQualifiedName GetKeyForItem(DecimalFormatDecl format)
}
internal System.Xml.Xsl.Xslt.FunctionFocus : ValueType {
private bool isSet
private QilParameter current
private QilParameter position
private QilParameter last
public bool IsFocusSet
public void StartFocus(IList`1<QilNode> args, XslFlags flags)
public void StopFocus()
public bool get_IsFocusSet()
public QilNode GetCurrent()
public QilNode GetPosition()
public QilNode GetLast()
}
internal System.Xml.Xsl.Xslt.InvokeGenerator : QilCloneVisitor {
private bool debug
private Stack`1<QilIterator> iterStack
private QilList formalArgs
private QilList invokeArgs
private int curArg
private XsltQilFactory fac
public void .ctor(XsltQilFactory f, bool debug)
public QilNode GenerateInvoke(QilFunction func, IList`1<XslNode> actualArgs)
private QilNode FindActualArg(QilParameter formalArg, IList`1<XslNode> actualArgs)
protected QilNode VisitReference(QilNode n)
protected QilNode VisitFunction(QilFunction n)
}
internal System.Xml.Xsl.Xslt.Key : XslNode {
public string Match
public string Use
public QilFunction Function
public void .ctor(QilName name, string match, string use, XslVersion xslVer)
public string GetDebugName()
}
internal System.Xml.Xsl.Xslt.KeyMatchBuilder : XPathBuilder {
private int depth
private PathConvertor convertor
public void .ctor(IXPathEnvironment env)
public void StartBuild()
public QilNode EndBuild(QilNode result)
public IXPathBuilder`1<QilNode> GetPredicateBuilder(QilNode ctx)
}
internal System.Xml.Xsl.Xslt.Keys : KeyedCollection`2<QilName, List`1<Key>> {
protected QilName GetKeyForItem(List`1<Key> list)
}
internal System.Xml.Xsl.Xslt.KeywordsTable : object {
public XmlNameTable NameTable
public string AnalyzeString
public string ApplyImports
public string ApplyTemplates
public string Assembly
public string Attribute
public string AttributeSet
public string CallTemplate
public string CaseOrder
public string CDataSectionElements
public string Character
public string CharacterMap
public string Choose
public string Comment
public string Copy
public string CopyOf
public string Count
public string DataType
public string DecimalFormat
public string DecimalSeparator
public string DefaultCollation
public string DefaultValidation
public string Digit
public string DisableOutputEscaping
public string DocTypePublic
public string DocTypeSystem
public string Document
public string Element
public string Elements
public string Encoding
public string ExcludeResultPrefixes
public string ExtensionElementPrefixes
public string Fallback
public string ForEach
public string ForEachGroup
public string Format
public string From
public string Function
public string GroupingSeparator
public string GroupingSize
public string Href
public string Id
public string If
public string ImplementsPrefix
public string Import
public string ImportSchema
public string Include
public string Indent
public string Infinity
public string Key
public string Lang
public string Language
public string LetterValue
public string Level
public string Match
public string MatchingSubstring
public string MediaType
public string Message
public string Method
public string MinusSign
public string Mode
public string Name
public string Namespace
public string NamespaceAlias
public string NaN
public string NextMatch
public string NonMatchingSubstring
public string Number
public string OmitXmlDeclaration
public string Order
public string Otherwise
public string Output
public string OutputCharacter
public string OutputVersion
public string Param
public string PatternSeparator
public string Percent
public string PerformSort
public string PerMille
public string PreserveSpace
public string Priority
public string ProcessingInstruction
public string Required
public string ResultDocument
public string ResultPrefix
public string Script
public string Select
public string Separator
public string Sequence
public string Sort
public string Space
public string Standalone
public string StripSpace
public string Stylesheet
public string StylesheetPrefix
public string Template
public string Terminate
public string Test
public string Text
public string Transform
public string UrnMsxsl
public string UriXml
public string UriXsl
public string UriWdXsl
public string Use
public string UseAttributeSets
public string UseWhen
public string Using
public string Value
public string ValueOf
public string Variable
public string Version
public string When
public string WithParam
public string Xml
public string Xmlns
public string XPathDefaultNamespace
public string ZeroDigit
public void .ctor(XmlNameTable nt)
}
internal System.Xml.Xsl.Xslt.LoopFocus : ValueType {
private XPathQilFactory f
private QilIterator current
private QilIterator cached
private QilIterator last
public bool IsFocusSet
public void .ctor(XPathQilFactory f)
public void SetFocus(QilIterator current)
public bool get_IsFocusSet()
public QilNode GetCurrent()
public QilNode GetPosition()
public QilNode GetLast()
public void EnsureCache()
public void Sort(QilNode sortKeys)
public QilLoop ConstructLoop(QilNode body)
}
internal System.Xml.Xsl.Xslt.MatcherBuilder : object {
private XPathQilFactory f
private ReferenceReplacer refReplacer
private InvokeGenerator invkGen
private int NoMatch
private int priority
private PatternBag elementPatterns
private PatternBag attributePatterns
private List`1<Pattern> textPatterns
private List`1<Pattern> documentPatterns
private List`1<Pattern> commentPatterns
private PatternBag piPatterns
private List`1<Pattern> heterogenousPatterns
private List`1<List`1<TemplateMatch>> allMatches
public void .ctor(XPathQilFactory f, ReferenceReplacer refReplacer, InvokeGenerator invkGen)
private void Clear()
private void AddPatterns(List`1<TemplateMatch> matches)
private void CollectPatternsInternal(Stylesheet sheet, QilName mode)
public void CollectPatterns(StylesheetLevel sheet, QilName mode)
private QilNode MatchPattern(QilIterator it, TemplateMatch match)
private QilNode MatchPatterns(QilIterator it, List`1<Pattern> patternList)
private QilNode MatchPatterns(QilIterator it, XmlQueryType xt, List`1<Pattern> patternList, QilNode otherwise)
private bool IsNoMatch(QilNode matcher)
private QilNode MatchPatternsWhosePriorityGreater(QilIterator it, List`1<Pattern> patternList, QilNode matcher)
private QilNode MatchPatterns(QilIterator it, XmlQueryType xt, PatternBag patternBag, QilNode otherwise)
public QilNode BuildMatcher(QilIterator it, IList`1<XslNode> actualArgs, QilNode otherwise)
}
internal System.Xml.Xsl.Xslt.NodeCtor : XslNode {
public string NameAvt
public string NsAvt
public void .ctor(XslNodeType nt, string nameAvt, string nsAvt, XslVersion xslVer)
}
internal System.Xml.Xsl.Xslt.NsAlias : object {
public string ResultNsUri
public string ResultPrefix
public int ImportPrecedence
public void .ctor(string resultNsUri, string resultPrefix, int importPrecedence)
}
internal System.Xml.Xsl.Xslt.NsDecl : object {
public NsDecl Prev
public string Prefix
public string NsUri
public void .ctor(NsDecl prev, string prefix, string nsUri)
}
internal System.Xml.Xsl.Xslt.Number : XslNode {
public NumberLevel Level
public string Count
public string From
public string Value
public string Format
public string Lang
public string LetterValue
public string GroupingSeparator
public string GroupingSize
public void .ctor(NumberLevel level, string count, string from, string value, string format, string lang, string letterValue, string groupingSeparator, string groupingSize, XslVersion xslVer)
}
internal System.Xml.Xsl.Xslt.NumberLevel : Enum {
public int value__
public NumberLevel Single
public NumberLevel Multiple
public NumberLevel Any
}
internal System.Xml.Xsl.Xslt.Output : object {
public XmlWriterSettings Settings
public string Version
public string Encoding
public XmlQualifiedName Method
public int NeverDeclaredPrec
public int MethodPrec
public int VersionPrec
public int EncodingPrec
public int OmitXmlDeclarationPrec
public int StandalonePrec
public int DocTypePublicPrec
public int DocTypeSystemPrec
public int IndentPrec
public int MediaTypePrec
}
internal System.Xml.Xsl.Xslt.OutputScopeManager : object {
private ScopeReord[] records
private int lastRecord
private int lastScopes
public void Reset()
public void PushScope()
public void PopScope()
public void AddNamespace(string prefix, string uri)
private void AddRecord(string prefix, string uri)
public void InvalidateAllPrefixes()
public void InvalidateNonDefaultPrefixes()
public string LookupNamespace(string prefix)
}
internal System.Xml.Xsl.Xslt.Pattern : ValueType {
public TemplateMatch Match
public int Priority
public void .ctor(TemplateMatch match, int priority)
}
internal System.Xml.Xsl.Xslt.PatternBag : object {
public Dictionary`2<QilName, List`1<Pattern>> FixedNamePatterns
public List`1<QilName> FixedNamePatternsNames
public List`1<Pattern> NonFixedNamePatterns
public void Clear()
public void Add(Pattern pattern)
}
internal System.Xml.Xsl.Xslt.ProtoTemplate : XslNode {
public QilFunction Function
public void .ctor(XslNodeType nt, QilName name, XslVersion xslVer)
public string GetDebugName()
}
internal System.Xml.Xsl.Xslt.QilGenerator : object {
private CompilerScopeManager`1<QilIterator> scope
private OutputScopeManager outputScope
private HybridDictionary prefixesInUse
private XsltQilFactory f
private XPathBuilder xpathBuilder
private XPathParser`1<QilNode> xpathParser
private XPathPatternBuilder ptrnBuilder
private XPathPatternParser ptrnParser
private ReferenceReplacer refReplacer
private KeyMatchBuilder keyMatchBuilder
private InvokeGenerator invkGen
private MatcherBuilder matcherBuilder
private QilStrConcatenator strConcat
private VariableHelper varHelper
private Compiler compiler
private QilList functions
private QilFunction generalKey
private bool formatNumberDynamicUsed
private QilList extPars
private QilList gloVars
private QilList nsVars
private XmlQueryType elementOrDocumentType
private XmlQueryType textOrAttributeType
private XslNode lastScope
private XslVersion xslVersion
private QilName nameCurrent
private QilName namePosition
private QilName nameLast
private QilName nameNamespaces
private QilName nameInit
private SingletonFocus singlFocus
private FunctionFocus funcFocus
private LoopFocus curLoop
private int formatterCnt
private StringBuilder unescapedText
private Char[] curlyBraces
private XmlNodeKindFlags InvalidatingNodes
private bool allowVariables
private bool allowCurrent
private bool allowKey
private XmlTypeCode[] argFnDocument
private XmlTypeCode[] argFnKey
private XmlTypeCode[] argFnFormatNumber
public Dictionary`2<string, FunctionInfo`1<FuncId>> FunctionTable
private bool IsDebug
private bool EvaluateFuncCalls
private bool InferXPathTypes
private XPathQilFactory System.Xml.Xsl.XPath.IXPathEnvironment.Factory
public QilExpression CompileStylesheet(Compiler compiler)
private void .ctor(bool debug)
private bool get_IsDebug()
private bool get_EvaluateFuncCalls()
private bool get_InferXPathTypes()
private QilExpression Compile(Compiler compiler)
private QilNode InvokeOnCurrentNodeChanged()
private void CheckSingletonFocus()
private void CompileInitializationCode()
private QilNode CompileRootExpression(XslNode applyTmpls)
private QilList EnterScope(XslNode node)
private void ExitScope()
private QilList BuildDebuggerNamespaces()
private QilNode GetCurrentNode()
private QilNode GetCurrentPosition()
private QilNode GetLastPosition()
private XmlQueryType ChooseBestType(VarPar var)
private QilIterator GetNsVar(QilList nsList)
private void PrecompileProtoTemplatesHeaders()
private QilParameter CreateXslParam(QilName name, XmlQueryType xt)
private void CompileProtoTemplate(ProtoTemplate tmpl)
private QilList InstructionList()
private QilNode CompileInstructions(IList`1<XslNode> instructions)
private QilNode CompileInstructions(IList`1<XslNode> instructions, int from)
private QilNode CompileInstructions(IList`1<XslNode> instructions, QilList content)
private QilNode CompileInstructions(IList`1<XslNode> instructions, int from, QilList content)
private QilNode CompileList(XslNode node)
private QilNode CompileNop(XslNode node)
private void AddNsDecl(QilList content, string prefix, string nsUri)
private QilNode CompileLiteralElement(XslNode node)
private QilNode CompileElement(NodeCtor node)
private QilNode CompileLiteralAttribute(XslNode node)
private QilNode CompileAttribute(NodeCtor node)
private QilNode ExtractText(string source, Int32& pos)
private QilNode CompileAvt(string source)
private QilNode CompileStringAvt(string avt)
private QilNode CompileTextAvt(string avt)
private QilNode CompileText(Text node)
private QilNode CompilePI(XslNode node)
private QilNode CompileComment(XslNode node)
private QilNode CompileError(XslNode node)
private QilNode WrapLoopBody(ISourceLineInfo before, QilNode expr, ISourceLineInfo after)
private QilNode CompileForEach(XslNodeEx node)
private QilNode CompileApplyTemplates(XslNodeEx node)
private QilNode CompileApplyImports(XslNode node)
private QilNode CompileCallTemplate(XslNodeEx node)
private QilNode CompileUseAttributeSet(XslNode node)
private QilNode CompileCopy(XslNode copy)
private QilNode CompileCopyOf(XslNode node)
private QilNode CompileValueOf(XslNode valueOf)
private QilNode CompileValueOfDoe(XslNode valueOf)
private QilNode CompileWhen(XslNode whenNode, QilNode otherwise)
private QilNode CompileIf(XslNode ifNode)
private QilNode CompileChoose(XslNode node)
private QilNode CompileMessage(XslNode node)
private QilNode CompileVariable(XslNode node)
private QilNode CompileVarParValue(XslNode node)
private void CompileWithParam(VarPar withParam)
private QilNode CompileSorts(IList`1<XslNode> content, LoopFocus& parentLoop)
private QilNode CompileLangAttribute(string attValue, bool fwdCompat)
private QilNode CompileLangAttributeToLcid(string attValue, bool fwdCompat)
private QilNode CompileLangToLcid(QilNode lang, bool fwdCompat)
private void CompileDataTypeAttribute(string attValue, bool fwdCompat, QilNode& select, QilNode& select2)
private QilNode CompileOrderAttribute(string attName, string attValue, string value0, string value1, bool fwdCompat)
private void CompileSort(Sort sort, QilList keyList, LoopFocus& parentLoop)
private QilNode MatchPattern(QilNode pattern, QilIterator testNode)
private QilNode MatchCountPattern(QilNode countPattern, QilIterator testNode)
private QilNode PlaceMarker(QilNode countPattern, QilNode fromPattern, bool multiple)
private QilNode PlaceMarkerAny(QilNode countPattern, QilNode fromPattern)
private QilNode CompileLetterValueAttribute(string attValue, bool fwdCompat)
private QilNode CompileGroupingSeparatorAttribute(string attValue, bool fwdCompat)
private QilNode CompileGroupingSizeAttribute(string attValue, bool fwdCompat)
private QilNode CompileNumber(Number num)
private void CompileAndSortMatches(Stylesheet sheet)
private void CompileKeys()
private void CreateGlobalVarPars()
private void CreateGlobalVarPar(VarPar varPar)
private void CompileGlobalVariables()
private QilIterator CompileGlobalVarPar(VarPar varPar)
private void ReportErrorInXPath(XslLoadException e)
private QilNode PhantomXPathExpression()
private QilNode PhantomKeyMatch()
private QilNode CompileXPathExpression(string expr)
private QilNode CompileNodeSetExpression(string expr)
private QilNode CompileXPathExpressionWithinAvt(string expr, Int32& pos)
private QilNode CompileMatchPattern(string pttrn)
private QilNode CompileNumberPattern(string pttrn)
private QilNode CompileKeyMatch(string pttrn)
private QilNode CompileKeyUse(Key key)
private QilNode ResolveQNameDynamic(bool ignoreDefaultNs, QilNode qilName)
private QilNode GenerateApply(StylesheetLevel sheet, XslNode node)
private void SetArg(IList`1<XslNode> args, int pos, QilName name, QilNode value)
private IList`1<XslNode> AddRemoveImplicitArgs(IList`1<XslNode> args, XslFlags flags)
private bool FillupInvokeArgs(IList`1<QilNode> formalArgs, IList`1<XslNode> actualArgs, QilList invokeArgs)
private QilNode InvokeApplyFunction(StylesheetLevel sheet, QilName mode, IList`1<XslNode> actualArgs)
public void ReportError(string res, String[] args)
public void ReportWarning(string res, String[] args)
private void VerifyXPathQName(QilName qname)
private string ResolvePrefix(bool ignoreDefaultNs, string prefix)
private void SetLineInfoCheck(QilNode n, ISourceLineInfo lineInfo)
private QilNode SetLineInfo(QilNode n, ISourceLineInfo lineInfo)
private QilNode AddDebugVariable(QilName name, QilNode value, QilNode content)
private QilNode SetDebugNs(QilNode n, QilList nsList)
private QilNode AddCurrentPositionLast(QilNode content)
private QilName CloneName(QilName name)
private void SetEnvironmentFlags(bool allowVariables, bool allowCurrent, bool allowKey)
private XPathQilFactory System.Xml.Xsl.XPath.IXPathEnvironment.get_Factory()
private QilNode System.Xml.Xsl.XPath.IFocus.GetCurrent()
private QilNode System.Xml.Xsl.XPath.IFocus.GetPosition()
private QilNode System.Xml.Xsl.XPath.IFocus.GetLast()
private string System.Xml.Xsl.XPath.IXPathEnvironment.ResolvePrefix(string prefix)
private QilNode System.Xml.Xsl.XPath.IXPathEnvironment.ResolveVariable(string prefix, string name)
private QilNode System.Xml.Xsl.XPath.IXPathEnvironment.ResolveFunction(string prefix, string name, IList`1<QilNode> args, IFocus env)
private QilNode GenerateScriptCall(QilName name, XmlExtensionFunction scrFunc, IList`1<QilNode> args)
private string ResolvePrefixThrow(bool ignoreDefaultNs, string prefix)
private Dictionary`2<string, FunctionInfo`1<FuncId>> CreateFunctionTable()
public bool IsFunctionAvailable(string localName, string nsUri)
public bool IsElementAvailable(XmlQualifiedName name)
private QilNode CompileFnKey(QilNode name, QilNode keys, IFocus env)
private QilNode CompileSingleKey(QilNode name, QilNode key, IFocus env)
private QilNode CompileSingleKey(List`1<Key> defList, QilNode key, IFocus env)
private QilNode CompileSingleKey(List`1<Key> defList, QilIterator key, QilIterator context)
private QilFunction CreateGeneralKeyFunction()
private QilNode CompileFnDocument(QilNode uris, QilNode baseNode)
private QilNode CompileSingleDocument(QilNode uri, QilNode baseNode)
private QilNode CompileFormatNumber(QilNode value, QilNode formatPicture, QilNode formatName)
private QilNode CompileUnparsedEntityUri(QilNode n)
private QilNode CompileGenerateId(QilNode n)
private XmlQualifiedName ResolveQNameThrow(bool ignoreDefaultNs, QilNode qilName)
private QilNode CompileSystemProperty(QilNode name)
private QilNode CompileElementAvailable(QilNode name)
private QilNode CompileFunctionAvailable(QilNode name)
private QilNode CompileMsNodeSet(QilNode n)
private QilNode EXslObjectType(QilNode n)
}
internal System.Xml.Xsl.Xslt.QilStrConcatenator : object {
private XPathQilFactory f
private StringBuilder builder
private QilList concat
private bool inUse
public void .ctor(XPathQilFactory f)
public void Reset()
private void FlushBuilder()
public void Append(string value)
public void Append(char value)
public void Append(QilNode value)
public QilNode ToQil()
}
internal System.Xml.Xsl.Xslt.ReferenceReplacer : QilReplaceVisitor {
private QilReference lookFor
private QilReference replaceBy
public void .ctor(QilFactory f)
public QilNode Replace(QilNode expr, QilReference lookFor, QilReference replaceBy)
protected QilNode VisitReference(QilNode n)
}
internal System.Xml.Xsl.Xslt.RootLevel : StylesheetLevel {
public void .ctor(Stylesheet principal)
}
internal System.Xml.Xsl.Xslt.ScriptClass : object {
public string ns
public CompilerInfo compilerInfo
public StringCollection refAssemblies
public StringCollection nsImports
public CodeTypeDeclaration typeDecl
public bool refAssembliesByHref
public Dictionary`2<string, string> scriptUris
public string endUri
public Location endLoc
private long scriptClassCounter
public ISourceLineInfo EndLineInfo
public void .ctor(string ns, CompilerInfo compilerInfo)
private string GenerateUniqueClassName()
public void AddScriptBlock(string source, string uriString, int lineNumber, Location end)
public ISourceLineInfo get_EndLineInfo()
}
internal System.Xml.Xsl.Xslt.Scripts : object {
private string ScriptClassesNamespace
private Compiler compiler
private List`1<ScriptClass> scriptClasses
private Dictionary`2<string, Type> nsToType
private XmlExtensionFunctionTable extFuncs
private String[] defaultNamespaces
private int assemblyCounter
public Dictionary`2<string, Type> ScriptClasses
public void .ctor(Compiler compiler)
public Dictionary`2<string, Type> get_ScriptClasses()
public XmlExtensionFunction ResolveFunction(string name, string ns, int numArgs, IErrorHelper errorHelper)
public ScriptClass GetScriptClass(string ns, string language, IErrorHelper errorHelper)
public void CompileScripts()
private Assembly CompileAssembly(List`1<ScriptClass> scriptsForLang)
private string GetLanguageName(CompilerInfo compilerInfo)
private void FixErrorPosition(CompilerError error, List`1<ScriptClass> scriptsForLang)
}
internal System.Xml.Xsl.Xslt.SingletonFocus : ValueType {
private XPathQilFactory f
private SingletonFocusType focusType
private QilIterator current
public void .ctor(XPathQilFactory f)
public void SetFocus(SingletonFocusType focusType)
public void SetFocus(QilIterator current)
private void CheckFocus()
public QilNode GetCurrent()
public QilNode GetPosition()
public QilNode GetLast()
}
internal System.Xml.Xsl.Xslt.SingletonFocusType : Enum {
public int value__
public SingletonFocusType None
public SingletonFocusType InitialDocumentNode
public SingletonFocusType InitialContextNode
public SingletonFocusType Iterator
}
internal System.Xml.Xsl.Xslt.Sort : XslNode {
public string Lang
public string DataType
public string Order
public string CaseOrder
public void .ctor(string select, string lang, string dataType, string order, string caseOrder, XslVersion xslVer)
}
internal System.Xml.Xsl.Xslt.Stylesheet : StylesheetLevel {
private Compiler compiler
public List`1<Uri> ImportHrefs
public List`1<XslNode> GlobalVarPars
public Dictionary`2<QilName, AttributeSet> AttributeSets
private int importPrecedence
private int orderNumber
public List`1[] WhitespaceRules
public List`1<Template> Templates
public Dictionary`2<QilName, List`1<TemplateMatch>> TemplateMatches
public int ImportPrecedence
public void AddTemplateMatch(Template template, QilLoop filter)
public void SortTemplateMatches()
public void .ctor(Compiler compiler, int importPrecedence)
public int get_ImportPrecedence()
public void AddWhitespaceRule(int index, WhitespaceRule rule)
public bool AddVarPar(VarPar var)
public bool AddTemplate(Template template)
}
internal System.Xml.Xsl.Xslt.StylesheetLevel : object {
public Stylesheet[] Imports
public Dictionary`2<QilName, XslFlags> ModeFlags
public Dictionary`2<QilName, List`1<QilFunction>> ApplyFunctions
}
internal System.Xml.Xsl.Xslt.Template : ProtoTemplate {
public string Match
public QilName Mode
public double Priority
public int ImportPrecedence
public int OrderNumber
public void .ctor(QilName name, string match, QilName mode, double priority, XslVersion xslVer)
public string GetDebugName()
}
internal System.Xml.Xsl.Xslt.TemplateMatch : object {
public TemplateMatchComparer Comparer
private Template template
private double priority
private XmlNodeKindFlags nodeKind
private QilName qname
private QilIterator iterator
private QilNode condition
public XmlNodeKindFlags NodeKind
public QilName QName
public QilIterator Iterator
public QilNode Condition
public QilFunction TemplateFunction
public XmlNodeKindFlags get_NodeKind()
public QilName get_QName()
public QilIterator get_Iterator()
public QilNode get_Condition()
public QilFunction get_TemplateFunction()
public void .ctor(Template template, QilLoop filter)
private void NipOffTypeNameCheck()
}
internal System.Xml.Xsl.Xslt.Text : XslNode {
public SerializationHints Hints
public void .ctor(string data, SerializationHints hints, XslVersion xslVer)
}
internal System.Xml.Xsl.Xslt.VarPar : XslNode {
public XslFlags DefValueFlags
public QilNode Value
public void .ctor(XslNodeType nt, QilName name, string select, XslVersion xslVer)
}
internal System.Xml.Xsl.Xslt.XPathPatternBuilder : object {
private XPathPredicateEnvironment predicateEnvironment
private XPathBuilder predicateBuilder
private bool inTheBuild
private XPathQilFactory f
private QilNode fixupNode
private IXPathEnvironment environment
public QilNode FixupNode
public void .ctor(IXPathEnvironment environment)
public QilNode get_FixupNode()
public void StartBuild()
public void AssertFilter(QilLoop filter)
private void FixupFilterBinding(QilLoop filter, QilNode newBinding)
public QilNode EndBuild(QilNode result)
public QilNode Operator(XPathOperator op, QilNode left, QilNode right)
private QilLoop BuildAxisFilter(QilPatternFactory f, QilIterator itr, XPathAxis xpathAxis, XPathNodeType nodeType, string name, string nsUri)
public QilNode Axis(XPathAxis xpathAxis, XPathNodeType nodeType, string prefix, string name)
public QilNode JoinStep(QilNode left, QilNode right)
private QilNode System.Xml.Xsl.XPath.IXPathBuilder<System.Xml.Xsl.Qil.QilNode>.Predicate(QilNode node, QilNode condition, bool isReverseStep)
public QilNode BuildPredicates(QilNode nodeset, List`1<QilNode> predicates)
public QilNode Function(string prefix, string name, IList`1<QilNode> args)
public QilNode String(string value)
public QilNode Number(double value)
public QilNode Variable(string prefix, string name)
private QilNode UnexpectedToken(string tokenName)
public void SetPriority(QilNode node, double priority)
public double GetPriority(QilNode node)
private void SetLastParent(QilNode node, QilLoop parent)
private QilLoop GetLastParent(QilNode node)
public void CleanAnnotation(QilNode node)
public IXPathBuilder`1<QilNode> GetPredicateBuilder(QilNode ctx)
}
internal System.Xml.Xsl.Xslt.XPathPatternParser : object {
private XPathScanner scanner
private IPatternBuilder ptrnBuilder
private XPathParser`1<QilNode> predicateParser
private int MaxParseRelativePathDepth
private int parseRelativePath
public QilNode Parse(XPathScanner scanner, IPatternBuilder ptrnBuilder)
private QilNode ParsePattern()
private QilNode ParseLocationPathPattern()
private QilNode ParseIdKeyPattern()
private QilNode ParseRelativePathPattern()
private QilNode ParseStepPattern()
private QilNode ParsePredicate(QilNode context)
}
internal System.Xml.Xsl.Xslt.XslAstAnalyzer : XslVisitor`1<XslFlags> {
private CompilerScopeManager`1<VarPar> scope
private Compiler compiler
private int forEachDepth
private XPathAnalyzer xpathAnalyzer
private ProtoTemplate currentTemplate
private VarPar typeDonor
private Graph`1<ProtoTemplate> revCall0Graph
private Graph`1<ProtoTemplate> revCall1Graph
private Dictionary`2<Template, Stylesheet> fwdApplyImportsGraph
private Dictionary`2<QilName, List`1<ProtoTemplate>> revApplyTemplatesGraph
private Graph`1<VarPar> dataFlow
private Dictionary`2<ModeName, VarPar> applyTemplatesParams
public XslFlags Analyze(Compiler compiler)
private void AddImportDependencies(Stylesheet sheet, Template focusDonor)
private void FillModeFlags(Dictionary`2<QilName, XslFlags> parentModeFlags, Stylesheet sheet)
private void TraceResults()
protected XslFlags Visit(XslNode node)
protected XslFlags VisitChildren(XslNode node)
protected XslFlags VisitAttributeSet(AttributeSet node)
protected XslFlags VisitTemplate(Template node)
protected XslFlags VisitApplyImports(XslNode node)
protected XslFlags VisitApplyTemplates(XslNode node)
protected XslFlags VisitAttribute(NodeCtor node)
protected XslFlags VisitCallTemplate(XslNode node)
protected XslFlags VisitComment(XslNode node)
protected XslFlags VisitCopy(XslNode node)
protected XslFlags VisitCopyOf(XslNode node)
protected XslFlags VisitElement(NodeCtor node)
protected XslFlags VisitError(XslNode node)
protected XslFlags VisitForEach(XslNode node)
protected XslFlags VisitIf(XslNode node)
protected XslFlags VisitLiteralAttribute(XslNode node)
protected XslFlags VisitLiteralElement(XslNode node)
protected XslFlags VisitMessage(XslNode node)
protected XslFlags VisitNumber(Number node)
protected XslFlags VisitPI(XslNode node)
protected XslFlags VisitSort(Sort node)
protected XslFlags VisitText(Text node)
protected XslFlags VisitUseAttributeSet(XslNode node)
protected XslFlags VisitValueOf(XslNode node)
protected XslFlags VisitValueOfDoe(XslNode node)
protected XslFlags VisitParam(VarPar node)
protected XslFlags VisitVariable(VarPar node)
protected XslFlags VisitWithParam(VarPar node)
private XslFlags ProcessVarPar(VarPar node)
private XslFlags ProcessExpr(string expr)
private XslFlags ProcessAvt(string avt)
private XslFlags ProcessPattern(string pattern)
private void AddApplyTemplatesEdge(QilName mode, ProtoTemplate dependentTemplate)
private void PropagateSideEffectsFlag()
private void DepthFirstSearch(ProtoTemplate t)
}
internal System.Xml.Xsl.Xslt.XslAstRewriter : object {
private QilName nullMode
private CompilerScopeManager`1<VarPar> scope
private Stack`1<Template> newTemplates
private Compiler compiler
private int FixedNodeCost
private int IteratorNodeCost
private int CallTemplateCost
private int RewriteThreshold
private int NodesWithSelect
private int ParentsOfCallTemplate
public void Rewrite(Compiler compiler)
private int NodeCostForXPath(string xpath)
private bool NodeTypeTest(XslNodeType nodetype, int flags)
private int CheckNodeCost(XslNode node)
private void Refactor(XslNode parent, int split)
}
internal System.Xml.Xsl.Xslt.XslNode : object {
public XslNodeType NodeType
public ISourceLineInfo SourceLine
public NsDecl Namespaces
public QilName Name
public object Arg
public XslVersion XslVersion
public XslFlags Flags
private List`1<XslNode> content
private IList`1<XslNode> EmptyList
public string Select
public bool ForwardsCompatible
public IList`1<XslNode> Content
internal string TraceName
public void .ctor(XslNodeType nodeType, QilName name, object arg, XslVersion xslVer)
public void .ctor(XslNodeType nodeType)
public string get_Select()
public bool get_ForwardsCompatible()
public IList`1<XslNode> get_Content()
public void SetContent(List`1<XslNode> content)
public void AddContent(XslNode node)
public void InsertContent(IEnumerable`1<XslNode> collection)
internal string get_TraceName()
}
internal System.Xml.Xsl.Xslt.XslNodeEx : XslNode {
public ISourceLineInfo ElemNameLi
public ISourceLineInfo EndTagLi
public void .ctor(XslNodeType t, QilName name, object arg, ContextInfo ctxInfo, XslVersion xslVer)
public void .ctor(XslNodeType t, QilName name, object arg, XslVersion xslVer)
}
internal System.Xml.Xsl.Xslt.XslNodeType : Enum {
public int value__
public XslNodeType Unknown
public XslNodeType ApplyImports
public XslNodeType ApplyTemplates
public XslNodeType Attribute
public XslNodeType AttributeSet
public XslNodeType CallTemplate
public XslNodeType Choose
public XslNodeType Comment
public XslNodeType Copy
public XslNodeType CopyOf
public XslNodeType Element
public XslNodeType Error
public XslNodeType ForEach
public XslNodeType If
public XslNodeType Key
public XslNodeType List
public XslNodeType LiteralAttribute
public XslNodeType LiteralElement
public XslNodeType Message
public XslNodeType Nop
public XslNodeType Number
public XslNodeType Otherwise
public XslNodeType Param
public XslNodeType PI
public XslNodeType Sort
public XslNodeType Template
public XslNodeType Text
public XslNodeType UseAttributeSet
public XslNodeType ValueOf
public XslNodeType ValueOfDoe
public XslNodeType Variable
public XslNodeType WithParam
}
internal System.Xml.Xsl.Xslt.XsltInput : object {
private int InitRecordsSize
private XmlReader reader
private IXmlLineInfo readerLineInfo
private bool topLevelReader
private CompilerScopeManager`1<VarPar> scopeManager
private KeywordsTable atoms
private Compiler compiler
private bool reatomize
private XmlNodeType nodeType
private Record[] records
private int currentRecord
private bool isEmptyElement
private int lastTextNode
private int numAttributes
private ContextInfo ctxInfo
private bool attributesRead
private StringConcat strConcat
private XsltAttribute[] attributes
private Int32[] xsltAttributeNumber
private XsltAttribute[] noAttributes
public XmlNodeType NodeType
public string LocalName
public string NamespaceUri
public string Prefix
public string Value
public string BaseUri
public string QualifiedName
public bool IsEmptyElement
public string Uri
public Location Start
public Location End
public DelayedQName ElementName
public bool CanHaveApplyImports
public bool ForwardCompatibility
public bool BackwardCompatibility
public XslVersion XslVersion
public void .ctor(XmlReader reader, Compiler compiler, KeywordsTable atoms)
public XmlNodeType get_NodeType()
public string get_LocalName()
public string get_NamespaceUri()
public string get_Prefix()
public string get_Value()
public string get_BaseUri()
public string get_QualifiedName()
public bool get_IsEmptyElement()
public string get_Uri()
public Location get_Start()
public Location get_End()
private void EnsureExpandEntities(XmlReader reader)
private void ExtendRecordBuffer(int position)
public bool FindStylesheetElement()
public void Finish()
private void FillupRecord(Record& rec)
private void SetRecordEnd(Record& rec)
private void FillupTextRecord(Record& rec)
private void FillupCharacterEntityRecord(Record& rec)
private bool ReadAttribute(Record& rec)
public bool MoveToFirstChild()
public bool MoveToNextSibling()
public void SkipNode()
private int ReadTextNodes()
private bool ReadNextSibling()
private int ReadElement()
public void MoveToElement()
private bool MoveToAttributeBase(int attNum)
public bool MoveToLiteralAttribute(int attNum)
public bool MoveToXsltAttribute(int attNum, string attName)
public bool IsRequiredAttribute(int attNum)
public bool AttributeExists(int attNum, string attName)
public DelayedQName get_ElementName()
public bool IsNs(string ns)
public bool IsKeyword(string kwd)
public bool IsXsltNamespace()
public bool IsNullNamespace()
public bool IsXsltAttribute(string kwd)
public bool IsXsltKeyword(string kwd)
public bool get_CanHaveApplyImports()
public void set_CanHaveApplyImports(bool value)
public bool IsExtensionNamespace(string uri)
public bool get_ForwardCompatibility()
public bool get_BackwardCompatibility()
public XslVersion get_XslVersion()
private void SetVersion(int attVersion)
private void SetVersion(double version)
public ContextInfo GetAttributes()
public ContextInfo GetAttributes(XsltAttribute[] attributes)
public ContextInfo GetLiteralAttributes(bool asStylesheet)
public void GetVersionAttribute()
private void InsertExNamespaces(int attExPrefixes, ContextInfo ctxInfo, bool extensions)
private void SetXPathDefaultNamespace(int attNamespace)
private void SetDefaultCollation(int attCollation)
private int PositionAdjustment(XmlNodeType nt)
public ISourceLineInfo BuildLineInfo()
public ISourceLineInfo BuildNameLineInfo()
public ISourceLineInfo BuildReaderLineInfo()
public string LookupXmlNamespace(string prefix)
public void ReportError(string res, String[] args)
public void ReportErrorFC(string res, String[] args)
public void ReportWarning(string res, String[] args)
private void ReportNYI(string arg)
}
internal System.Xml.Xsl.Xslt.XsltLoader : object {
private Compiler compiler
private XmlResolver xmlResolver
private QueryReaderSettings readerSettings
private KeywordsTable atoms
private XsltInput input
private Stylesheet curStylesheet
private Template curTemplate
private object curFunction
internal QilName nullMode
public int V1Opt
public int V1Req
public int V2Opt
public int V2Req
private HybridDictionary documentUriInUse
private XsltAttribute[] stylesheetAttributes
private XsltAttribute[] importIncludeAttributes
private XsltAttribute[] loadStripSpaceAttributes
private XsltAttribute[] outputAttributes
private XsltAttribute[] keyAttributes
private XsltAttribute[] decimalFormatAttributes
private XsltAttribute[] namespaceAliasAttributes
private XsltAttribute[] attributeSetAttributes
private XsltAttribute[] templateAttributes
private XsltAttribute[] scriptAttributes
private XsltAttribute[] assemblyAttributes
private XsltAttribute[] usingAttributes
private int MAX_LOADINSTRUCTIONS_DEPTH
private int loadInstructionsDepth
private XsltAttribute[] applyTemplatesAttributes
private XsltAttribute[] callTemplateAttributes
private XsltAttribute[] copyAttributes
private XsltAttribute[] copyOfAttributes
private XsltAttribute[] ifAttributes
private XsltAttribute[] forEachAttributes
private XsltAttribute[] messageAttributes
private XsltAttribute[] numberAttributes
private XsltAttribute[] valueOfAttributes
private XsltAttribute[] variableAttributes
private XsltAttribute[] paramAttributes
private XsltAttribute[] withParamAttributes
private XsltAttribute[] commentAttributes
private XsltAttribute[] processingInstructionAttributes
private XsltAttribute[] textAttributes
private XsltAttribute[] elementAttributes
private XsltAttribute[] attributeAttributes
private XsltAttribute[] sortAttributes
private bool V1
public void Load(Compiler compiler, object stylesheet, XmlResolver xmlResolver)
private void Load(XmlReader reader)
private void AtomizeAttributes(XsltAttribute[] attributes)
private void AtomizeAttributes()
private bool get_V1()
private Uri ResolveUri(string relativeUri, string baseUri)
private XmlReader CreateReader(Uri uri, XmlResolver xmlResolver)
private Stylesheet LoadStylesheet(Uri uri, bool include)
private Stylesheet LoadStylesheet(XmlReader reader, bool include)
private void LoadDocument()
private void LoadSimplifiedStylesheet()
private void LoadRealStylesheet()
private void LoadImport()
private void LoadInclude()
private void LoadStripSpace(NsDecl stylesheetNsList)
private void LoadPreserveSpace(NsDecl stylesheetNsList)
private void LoadOutput()
private void ProcessOutputSettings()
private void CheckUseAttrubuteSetInList(IList`1<XslNode> list)
private void CheckAttributeSetsDfs(AttributeSet attSet)
private void LoadKey(NsDecl stylesheetNsList)
private void LoadDecimalFormat(NsDecl stylesheetNsList)
private void LoadNamespaceAlias(NsDecl stylesheetNsList)
private void LoadAttributeSet(NsDecl stylesheetNsList)
private void LoadGlobalVariableOrParameter(NsDecl stylesheetNsList, XslNodeType nodeType)
private void LoadTemplate(NsDecl stylesheetNsList)
private void LoadMsScript(NsDecl stylesheetNsList)
private void LoadMsAssembly(ScriptClass scriptClass)
private void LoadMsUsing(ScriptClass scriptClass)
private List`1<XslNode> LoadInstructions()
private List`1<XslNode> LoadInstructions(InstructionFlags flags)
private List`1<XslNode> LoadInstructions(List`1<XslNode> content)
private List`1<XslNode> LoadInstructions(List`1<XslNode> content, InstructionFlags flags)
private List`1<XslNode> LoadWithParams(InstructionFlags flags)
private XslNode XslApplyImports()
private XslNode XslApplyTemplates()
private XslNode XslCallTemplate()
private XslNode XslCopy()
private XslNode XslCopyOf()
private XslNode XslFallback()
private XslNode XslIf()
private XslNode XslChoose()
private XslNode XslOtherwise()
private XslNode XslForEach()
private XslNode XslMessage()
private XslNode XslNumber()
private XslNode XslValueOf()
private VarPar XslVarPar()
private XslNode XslComment()
private List`1<XslNode> LoadContent(bool hasSelect)
private XslNode XslProcessingInstruction()
private XslNode XslText()
private XslNode XslElement()
private XslNode XslAttribute()
private XslNode XslSort(int sortNumber)
private XslNode LoadLiteralResultElement(bool asStylesheet)
private void CheckWithParam(List`1<XslNode> content, XslNode withParam)
private void AddInstruction(List`1<XslNode> content, XslNode instruction)
private List`1<XslNode> LoadEndTag(List`1<XslNode> content)
private XslNode LoadUnknownXsltInstruction(string parentName)
private List`1<XslNode> LoadFallbacks(string instrName)
private QilName ParseModeAttribute(int attNum)
private QilName ParseModeListAttribute(int attNum)
private string ParseCollationAttribute(int attNum)
private bool ResolveQName(bool ignoreDefaultNs, string qname, String& localName, String& namespaceName, String& prefix)
private QilName ParseQNameAttribute(int attNum)
private string ParseNCNameAttribute(int attNum)
private QilName CreateXPathQName(string qname)
private XmlQualifiedName ResolveQName(bool ignoreDefaultNs, string qname)
private void ParseWhitespaceRules(string elements, bool preserveSpace)
private XmlQualifiedName ParseOutputMethod(string attValue, XmlOutputMethod& method)
private void AddUseAttributeSets(List`1<XslNode> list)
private List`1<QilName> ParseUseCharacterMaps(int attNum)
private string ParseStringAttribute(int attNum, string attName)
private char ParseCharAttribute(int attNum, string attName, char defVal)
private TriState ParseYesNoAttribute(int attNum, string attName)
private void ParseTypeAttribute(int attNum)
private void ParseValidationAttribute(int attNum, bool defVal)
private void ParseInputTypeAnnotationsAttribute(int attNum)
private void CheckNoContent()
private ISourceLineInfo SkipEmptyContent()
private XslNode SetLineInfo(XslNode node, ISourceLineInfo lineInfo)
private void SetContent(XslNode node, List`1<XslNode> content)
internal XslNode SetInfo(XslNode to, List`1<XslNode> content, ContextInfo info)
private NsDecl MergeNamespaces(NsDecl thisList, NsDecl parentList)
public void ReportError(string res, String[] args)
public void ReportWarning(string res, String[] args)
private void ReportNYI(string arg)
public void CheckError(bool cond, string res, String[] args)
}
internal System.Xml.Xsl.Xslt.XsltQilFactory : XPathQilFactory {
public void .ctor(QilFactory f, bool debug)
public void CheckXsltType(QilNode n)
public void CheckQName(QilNode n)
public QilNode DefaultValueMarker()
public QilNode IsDefaultValueMarker(QilNode n)
public QilNode InvokeIsSameNodeSort(QilNode n1, QilNode n2)
public QilNode InvokeSystemProperty(QilNode n)
public QilNode InvokeElementAvailable(QilNode n)
public QilNode InvokeCheckScriptNamespace(string nsUri)
public QilNode InvokeFunctionAvailable(QilNode n)
public QilNode InvokeBaseUri(QilNode n)
public QilNode InvokeOnCurrentNodeChanged(QilNode n)
public QilNode InvokeLangToLcid(QilNode n, bool fwdCompat)
public QilNode InvokeNumberFormat(QilNode value, QilNode format, QilNode lang, QilNode letterValue, QilNode groupingSeparator, QilNode groupingSize)
public QilNode InvokeRegisterDecimalFormat(DecimalFormatDecl format)
public QilNode InvokeRegisterDecimalFormatter(QilNode formatPicture, DecimalFormatDecl format)
public QilNode InvokeFormatNumberStatic(QilNode value, QilNode decimalFormatIndex)
public QilNode InvokeFormatNumberDynamic(QilNode value, QilNode formatPicture, QilNode decimalFormatName, QilNode errorMessageName)
public QilNode InvokeOuterXml(QilNode n)
public QilNode InvokeMsFormatDateTime(QilNode datetime, QilNode format, QilNode lang, QilNode isDate)
public QilNode InvokeMsStringCompare(QilNode x, QilNode y, QilNode lang, QilNode options)
public QilNode InvokeMsUtc(QilNode n)
public QilNode InvokeMsNumber(QilNode n)
public QilNode InvokeMsLocalName(QilNode n)
public QilNode InvokeMsNamespaceUri(QilNode n, QilNode currentNode)
public QilNode InvokeEXslObjectType(QilNode n)
}
internal System.Xml.Xsl.Xslt.XslVersion : Enum {
public int value__
public XslVersion Version10
public XslVersion ForwardsCompatible
public XslVersion Current
}
internal System.Xml.Xsl.Xslt.XslVisitor`1 : object {
protected T Visit(XslNode node)
protected T VisitApplyImports(XslNode node)
protected T VisitApplyTemplates(XslNode node)
protected T VisitAttribute(NodeCtor node)
protected T VisitAttributeSet(AttributeSet node)
protected T VisitCallTemplate(XslNode node)
protected T VisitChoose(XslNode node)
protected T VisitComment(XslNode node)
protected T VisitCopy(XslNode node)
protected T VisitCopyOf(XslNode node)
protected T VisitElement(NodeCtor node)
protected T VisitError(XslNode node)
protected T VisitForEach(XslNode node)
protected T VisitIf(XslNode node)
protected T VisitKey(Key node)
protected T VisitList(XslNode node)
protected T VisitLiteralAttribute(XslNode node)
protected T VisitLiteralElement(XslNode node)
protected T VisitMessage(XslNode node)
protected T VisitNop(XslNode node)
protected T VisitNumber(Number node)
protected T VisitOtherwise(XslNode node)
protected T VisitParam(VarPar node)
protected T VisitPI(XslNode node)
protected T VisitSort(Sort node)
protected T VisitTemplate(Template node)
protected T VisitText(Text node)
protected T VisitUseAttributeSet(XslNode node)
protected T VisitValueOf(XslNode node)
protected T VisitValueOfDoe(XslNode node)
protected T VisitVariable(VarPar node)
protected T VisitWithParam(VarPar node)
protected T VisitUnknown(XslNode node)
protected T VisitChildren(XslNode node)
}
public System.Xml.Xsl.XsltArgumentList : object {
private Hashtable parameters
private Hashtable extensions
internal XsltMessageEncounteredEventHandler xsltMessageEncountered
public object GetParam(string name, string namespaceUri)
public object GetExtensionObject(string namespaceUri)
public void AddParam(string name, string namespaceUri, object parameter)
public void AddExtensionObject(string namespaceUri, object extension)
public object RemoveParam(string name, string namespaceUri)
public object RemoveExtensionObject(string namespaceUri)
public void add_XsltMessageEncountered(XsltMessageEncounteredEventHandler value)
public void remove_XsltMessageEncountered(XsltMessageEncounteredEventHandler value)
public void Clear()
private void CheckArgumentNull(object param, string paramName)
}
public System.Xml.Xsl.XsltCompileException : XsltException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(Exception inner, string sourceUri, int lineNumber, int linePosition)
}
public System.Xml.Xsl.XsltContext : XmlNamespaceManager {
public bool Whitespace
protected void .ctor(NameTable table)
internal void .ctor(bool dummy)
public IXsltContextVariable ResolveVariable(string prefix, string name)
public IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] ArgTypes)
public bool get_Whitespace()
public bool PreserveWhitespace(XPathNavigator node)
public int CompareDocument(string baseUri, string nextbaseUri)
}
public System.Xml.Xsl.XsltException : SystemException {
private string res
private String[] args
private string sourceUri
private int lineNumber
private int linePosition
private string message
public string SourceUri
public int LineNumber
public int LinePosition
public string Message
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
internal XsltException Create(string res, String[] args)
internal XsltException Create(string res, String[] args, Exception inner)
internal void .ctor(string res, String[] args, string sourceUri, int lineNumber, int linePosition, Exception inner)
public string get_SourceUri()
public int get_LineNumber()
public int get_LinePosition()
public string get_Message()
private string CreateMessage(string res, String[] args, string sourceUri, int lineNumber, int linePosition)
private string FormatMessage(string key, String[] args)
}
public System.Xml.Xsl.XsltMessageEncounteredEventArgs : EventArgs {
public string Message
public string get_Message()
}
public System.Xml.Xsl.XsltMessageEncounteredEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XsltMessageEncounteredEventArgs e)
public IAsyncResult BeginInvoke(object sender, XsltMessageEncounteredEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Xml.Xsl.XsltOld.Action : object {
internal int Initialized
internal int Finished
internal void Execute(Processor processor, ActionFrame frame)
internal void ReplaceNamespaceAlias(Compiler compiler)
internal DbgData GetDbgData(ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.ActionFrame : object {
private int state
private int counter
private Object[] variables
private Hashtable withParams
private Action action
private ActionFrame container
private int currentAction
private XPathNodeIterator nodeSet
private XPathNodeIterator newNodeSet
private PrefixQName calulatedName
private string storedOutput
internal PrefixQName CalulatedName
internal string StoredOutput
internal int State
internal int Counter
internal ActionFrame Container
internal XPathNavigator Node
internal XPathNodeIterator NodeSet
internal XPathNodeIterator NewNodeSet
private XPathNavigator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.Instruction
private XPathNodeIterator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.NodeSet
internal PrefixQName get_CalulatedName()
internal void set_CalulatedName(PrefixQName value)
internal string get_StoredOutput()
internal void set_StoredOutput(string value)
internal int get_State()
internal void set_State(int value)
internal int get_Counter()
internal void set_Counter(int value)
internal ActionFrame get_Container()
internal XPathNavigator get_Node()
internal XPathNodeIterator get_NodeSet()
internal XPathNodeIterator get_NewNodeSet()
internal int IncrementCounter()
internal void AllocateVariables(int count)
internal object GetVariable(int index)
internal void SetVariable(int index, object value)
internal void SetParameter(XmlQualifiedName name, object value)
internal void ResetParams()
internal object GetParameter(XmlQualifiedName name)
internal void InitNodeSet(XPathNodeIterator nodeSet)
internal void InitNewNodeSet(XPathNodeIterator nodeSet)
internal void SortNewNodeSet(Processor proc, ArrayList sortarray)
internal void Finished()
internal void Inherit(ActionFrame parent)
private void Init(Action action, ActionFrame container, XPathNodeIterator nodeSet)
internal void Init(Action action, XPathNodeIterator nodeSet)
internal void Init(ActionFrame containerFrame, XPathNodeIterator nodeSet)
internal void SetAction(Action action)
internal void SetAction(Action action, int state)
private Action GetAction(int actionIndex)
internal void Exit()
internal bool Execute(Processor processor)
internal bool NextNode(Processor proc)
internal bool NewNextNode(Processor proc)
private XPathNavigator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.get_Instruction()
private XPathNodeIterator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.get_NodeSet()
private int System.Xml.Xsl.XsltOld.Debugger.IStackFrame.GetVariablesCount()
private XPathNavigator System.Xml.Xsl.XsltOld.Debugger.IStackFrame.GetVariable(int varIndex)
private object System.Xml.Xsl.XsltOld.Debugger.IStackFrame.GetVariableValue(int varIndex)
}
internal System.Xml.Xsl.XsltOld.ApplyImportsAction : CompiledAction {
private XmlQualifiedName mode
private Stylesheet stylesheet
private int TemplateProcessed
internal void Compile(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.ApplyTemplatesAction : ContainerAction {
private int ProcessedChildren
private int ProcessNextNode
private int PositionAdvanced
private int TemplateProcessed
private int selectKey
private XmlQualifiedName mode
private ApplyTemplatesAction s_BuiltInRule
internal ApplyTemplatesAction BuiltInRule()
internal ApplyTemplatesAction BuiltInRule(XmlQualifiedName mode)
private void .ctor(XmlQualifiedName mode)
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
private void CompileContent(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.AttributeAction : ContainerAction {
private int NameDone
private Avt nameAvt
private Avt nsAvt
private InputScopeManager manager
private string name
private string nsUri
private PrefixQName qname
private PrefixQName CreateAttributeQName(string name, string nsUri, InputScopeManager manager)
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.AttributeSetAction : ContainerAction {
internal XmlQualifiedName name
internal XmlQualifiedName Name
internal XmlQualifiedName get_Name()
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
private void CompileContent(Compiler compiler)
internal void Merge(AttributeSetAction attributeAction)
}
internal System.Xml.Xsl.XsltOld.Avt : object {
private string constAvt
private TextEvent[] events
public bool IsConstant
private void .ctor(string constAvt)
private void .ctor(ArrayList eventList)
public bool get_IsConstant()
internal string Evaluate(Processor processor, ActionFrame frame)
internal Avt CompileAvt(Compiler compiler, string avtText)
}
internal System.Xml.Xsl.XsltOld.AvtEvent : TextEvent {
private int key
public void .ctor(int key)
public bool Output(Processor processor, ActionFrame frame)
public string Evaluate(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.BeginEvent : Event {
private XPathNodeType nodeType
private string namespaceUri
private string name
private string prefix
private bool empty
private object htmlProps
public void .ctor(Compiler compiler)
public void ReplaceNamespaceAlias(Compiler compiler)
public bool Output(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.BuilderInfo : object {
private string name
private string localName
private string namespaceURI
private string prefix
private XmlNodeType nodeType
private int depth
private bool isEmptyTag
internal String[] TextInfo
internal int TextInfoCount
internal bool search
internal HtmlElementProps htmlProps
internal HtmlAttributeProps htmlAttrProps
internal string Name
internal string LocalName
internal string NamespaceURI
internal string Prefix
internal string Value
internal XmlNodeType NodeType
internal int Depth
internal bool IsEmptyTag
internal void Initialize(string prefix, string name, string nspace)
internal void Initialize(BuilderInfo src)
private void EnsureTextInfoSize(int newSize)
internal BuilderInfo Clone()
internal string get_Name()
internal string get_LocalName()
internal void set_LocalName(string value)
internal string get_NamespaceURI()
internal void set_NamespaceURI(string value)
internal string get_Prefix()
internal void set_Prefix(string value)
internal string get_Value()
internal void set_Value(string value)
internal void ValueAppend(string s, bool disableEscaping)
internal XmlNodeType get_NodeType()
internal void set_NodeType(XmlNodeType value)
internal int get_Depth()
internal void set_Depth(int value)
internal bool get_IsEmptyTag()
internal void set_IsEmptyTag(bool value)
}
internal System.Xml.Xsl.XsltOld.BuiltInRuleTextAction : Action {
private int ResultStored
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.CallTemplateAction : ContainerAction {
private int ProcessedChildren
private int ProcessedTemplate
private XmlQualifiedName name
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
private void CompileContent(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.ChooseAction : ContainerAction {
internal void Compile(Compiler compiler)
private void CompileConditions(Compiler compiler)
}
internal System.Xml.Xsl.XsltOld.CommentAction : ContainerAction {
internal void Compile(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.CompiledAction : Action {
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
public void CompileAttributes(Compiler compiler)
internal string PrecalculateAvt(Avt& avt)
public void CheckEmpty(Compiler compiler)
public void CheckRequiredAttribute(Compiler compiler, object attrValue, string attrName)
public void CheckRequiredAttribute(Compiler compiler, bool attr, string attrName)
}
internal System.Xml.Xsl.XsltOld.Compiler : object {
internal int InvalidQueryKey
internal double RootPriority
internal StringBuilder AvtStringBuilder
private int stylesheetid
private InputScope rootScope
private XmlResolver xmlResolver
private TemplateBaseAction currentTemplate
private XmlQualifiedName currentMode
private Hashtable globalNamespaceAliasTable
private Stack stylesheets
private HybridDictionary documentURIs
private NavigatorInput input
private KeywordsTable atoms
private InputScopeManager scopeManager
internal Stylesheet stylesheet
internal Stylesheet rootStylesheet
private RootAction rootAction
private List`1<TheQuery> queryStore
private QueryBuilder queryBuilder
private int rtfCount
public bool AllowBuiltInMode
public XmlQualifiedName BuiltInMode
private Hashtable[] _typeDeclsByLang
private ArrayList scriptFiles
private String[] _defaultNamespaces
private int scriptClassCounter
internal KeywordsTable Atoms
internal int Stylesheetid
internal NavigatorInput Document
internal NavigatorInput Input
internal Stylesheet CompiledStylesheet
internal RootAction RootAction
internal List`1<TheQuery> QueryStore
public IXsltDebugger Debugger
internal bool ForwardCompatibility
internal bool CanHaveApplyImports
protected InputScopeManager ScopeManager
internal string DefaultNamespace
internal XmlQualifiedName CurrentMode
internal KeywordsTable get_Atoms()
internal int get_Stylesheetid()
internal void set_Stylesheetid(int value)
internal NavigatorInput get_Document()
internal NavigatorInput get_Input()
internal bool Advance()
internal bool Recurse()
internal bool ToParent()
internal Stylesheet get_CompiledStylesheet()
internal RootAction get_RootAction()
internal void set_RootAction(RootAction value)
internal List`1<TheQuery> get_QueryStore()
public IXsltDebugger get_Debugger()
internal string GetUnicRtfId()
internal void Compile(NavigatorInput input, XmlResolver xmlResolver, Evidence evidence)
internal bool get_ForwardCompatibility()
internal void set_ForwardCompatibility(bool value)
internal bool get_CanHaveApplyImports()
internal void set_CanHaveApplyImports(bool value)
internal void InsertExtensionNamespace(string value)
internal void InsertExcludedNamespace(string value)
internal void InsertExtensionNamespace()
internal void InsertExcludedNamespace()
internal bool IsExtensionNamespace(string nspace)
internal bool IsExcludedNamespace(string nspace)
internal void PushLiteralScope()
internal void PushNamespaceScope()
protected InputScopeManager get_ScopeManager()
internal void PopScope()
internal InputScopeManager CloneScopeManager()
internal int InsertVariable(VariableAction variable)
internal void AddNamespaceAlias(string StylesheetURI, NamespaceInfo AliasInfo)
internal bool IsNamespaceAlias(string StylesheetURI)
internal NamespaceInfo FindNamespaceAlias(string StylesheetURI)
internal string ResolveXmlNamespace(string prefix)
internal string ResolveXPathNamespace(string prefix)
internal string get_DefaultNamespace()
internal void InsertKey(XmlQualifiedName name, int MatchKey, int UseKey)
internal void AddDecimalFormat(XmlQualifiedName name, DecimalFormat formatinfo)
private String[] ResolvePrefixes(string tokens)
internal bool GetYesNo(string value)
internal string GetSingleAttribute(string attributeAtom)
internal XmlQualifiedName CreateXPathQName(string qname)
internal XmlQualifiedName CreateXmlQName(string qname)
internal XPathDocument LoadDocument(XmlTextReaderImpl reader)
private void AddDocumentURI(string href)
private void RemoveDocumentURI(string href)
internal bool IsCircularReference(string href)
internal Uri ResolveUri(string relativeUri)
internal NavigatorInput ResolveDocument(Uri absoluteUri)
internal void PushInputDocument(NavigatorInput newInput)
internal void PopInputDocument()
internal void PushStylesheet(Stylesheet stylesheet)
internal Stylesheet PopStylesheet()
internal void AddAttributeSet(AttributeSetAction attributeSet)
internal void AddTemplate(TemplateAction template)
internal void BeginTemplate(TemplateAction template)
internal void EndTemplate()
internal XmlQualifiedName get_CurrentMode()
internal int AddQuery(string xpathQuery)
internal int AddQuery(string xpathQuery, bool allowVar, bool allowKey, bool isPattern)
internal int AddStringQuery(string xpathQuery)
internal int AddBooleanQuery(string xpathQuery)
private string GenerateUniqueClassName()
internal void AddScript(string source, ScriptingLanguage lang, string ns, string fileName, int lineNumber)
private void ValidateExtensionNamespace(string nsUri)
private void FixCompilerError(CompilerError e)
private CodeDomProvider ChooseCodeDomProvider(ScriptingLanguage lang)
private void CompileScript(Evidence evidence)
private void CompileAssembly(ScriptingLanguage lang, Hashtable typeDecls, string nsName, Evidence evidence)
public string GetNsAlias(String& prefix)
private void getTextLex(string avt, Int32& start, StringBuilder lex)
private void getXPathLex(string avt, Int32& start, StringBuilder lex)
private bool GetNextAvtLex(string avt, Int32& start, StringBuilder lex, Boolean& isAvt)
internal ArrayList CompileAvt(string avtText, Boolean& constant)
internal ArrayList CompileAvt(string avtText)
public ApplyImportsAction CreateApplyImportsAction()
public ApplyTemplatesAction CreateApplyTemplatesAction()
public AttributeAction CreateAttributeAction()
public AttributeSetAction CreateAttributeSetAction()
public CallTemplateAction CreateCallTemplateAction()
public ChooseAction CreateChooseAction()
public CommentAction CreateCommentAction()
public CopyAction CreateCopyAction()
public CopyOfAction CreateCopyOfAction()
public ElementAction CreateElementAction()
public ForEachAction CreateForEachAction()
public IfAction CreateIfAction(ConditionType type)
public MessageAction CreateMessageAction()
public NewInstructionAction CreateNewInstructionAction()
public NumberAction CreateNumberAction()
public ProcessingInstructionAction CreateProcessingInstructionAction()
public void CreateRootAction()
public SortAction CreateSortAction()
public TemplateAction CreateTemplateAction()
public TemplateAction CreateSingleTemplateAction()
public TextAction CreateTextAction()
public UseAttributeSetsAction CreateUseAttributeSetsAction()
public ValueOfAction CreateValueOfAction()
public VariableAction CreateVariableAction(VariableType type)
public WithParamAction CreateWithParamAction()
public BeginEvent CreateBeginEvent()
public TextEvent CreateTextEvent()
public XsltException UnexpectedKeyword()
}
internal System.Xml.Xsl.XsltOld.ContainerAction : CompiledAction {
internal ArrayList containedActions
internal CopyCodeAction lastCopyCodeAction
private int maxid
protected int ProcessingChildren
internal void Compile(Compiler compiler)
internal void CompileStylesheetAttributes(Compiler compiler)
internal void CompileSingleTemplate(Compiler compiler)
protected void CompileDocument(Compiler compiler, bool inInclude)
internal Stylesheet CompileImport(Compiler compiler, Uri uri, int id)
private void CompileImports(Compiler compiler)
private void CompileInclude(Compiler compiler)
internal void CompileNamespaceAlias(Compiler compiler)
internal void CompileKey(Compiler compiler)
protected void CompileDecimalFormat(Compiler compiler)
internal bool CheckAttribute(bool valid, Compiler compiler)
protected void CompileSpace(Compiler compiler, bool preserve)
private double NameTest(string name)
protected void CompileTopLevelElements(Compiler compiler)
protected void CompileTemplate(Compiler compiler)
protected void CompileOnceTemplate(Compiler compiler)
private void CompileInstruction(Compiler compiler)
private void CompileLiteral(Compiler compiler)
private void CompileLiteralAttributesAndNamespaces(Compiler compiler)
private void CompileOutput(Compiler compiler)
internal void AddAction(Action action)
private void EnsureCopyCodeAction()
protected void AddEvent(Event copyEvent)
protected void AddEvents(ArrayList copyEvents)
private void AddScript(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
internal Action GetAction(int actionIndex)
internal void CheckDuplicateParams(XmlQualifiedName name)
internal void ReplaceNamespaceAlias(Compiler compiler)
}
internal System.Xml.Xsl.XsltOld.CopyAction : ContainerAction {
private int CopyText
private int NamespaceCopy
private int ContentsCopy
private int ProcessChildren
private int ChildrenOnly
private string useAttributeSets
private bool empty
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.CopyAttributesAction : Action {
private int BeginEvent
private int TextEvent
private int EndEvent
private int Advance
private CopyAttributesAction s_Action
internal CopyAttributesAction GetAction()
internal void Execute(Processor processor, ActionFrame frame)
private bool SendBeginEvent(Processor processor, XPathNavigator node)
private bool SendTextEvent(Processor processor, XPathNavigator node)
private bool SendEndEvent(Processor processor, XPathNavigator node)
}
internal System.Xml.Xsl.XsltOld.CopyCodeAction : Action {
private int Outputting
private ArrayList copyEvents
internal void AddEvent(Event copyEvent)
internal void AddEvents(ArrayList copyEvents)
internal void ReplaceNamespaceAlias(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
internal DbgData GetDbgData(ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.CopyNamespacesAction : Action {
private int BeginEvent
private int TextEvent
private int EndEvent
private int Advance
private CopyNamespacesAction s_Action
internal CopyNamespacesAction GetAction()
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.CopyNodeSetAction : Action {
private int BeginEvent
private int Contents
private int Namespaces
private int Attributes
private int Subtree
private int EndEvent
private CopyNodeSetAction s_Action
internal CopyNodeSetAction GetAction()
internal void Execute(Processor processor, ActionFrame frame)
private bool SendBeginEvent(Processor processor, XPathNavigator node)
private bool SendTextEvent(Processor processor, XPathNavigator node)
private bool SendEndEvent(Processor processor, XPathNavigator node)
}
internal System.Xml.Xsl.XsltOld.CopyOfAction : CompiledAction {
private int ResultStored
private int NodeSetCopied
private int selectKey
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.DbgCompiler : Compiler {
private IXsltDebugger debugger
private ArrayList globalVars
private ArrayList localVars
private VariableAction[] globalVarsCache
private VariableAction[] localVarsCache
public IXsltDebugger Debugger
public VariableAction[] GlobalVariables
public VariableAction[] LocalVariables
public void .ctor(IXsltDebugger debugger)
public IXsltDebugger get_Debugger()
public VariableAction[] get_GlobalVariables()
public VariableAction[] get_LocalVariables()
private void DefineVariable(VariableAction variable)
private void UnDefineVariables(int count)
internal void PopScope()
public ApplyImportsAction CreateApplyImportsAction()
public ApplyTemplatesAction CreateApplyTemplatesAction()
public AttributeAction CreateAttributeAction()
public AttributeSetAction CreateAttributeSetAction()
public CallTemplateAction CreateCallTemplateAction()
public ChooseAction CreateChooseAction()
public CommentAction CreateCommentAction()
public CopyAction CreateCopyAction()
public CopyOfAction CreateCopyOfAction()
public ElementAction CreateElementAction()
public ForEachAction CreateForEachAction()
public IfAction CreateIfAction(ConditionType type)
public MessageAction CreateMessageAction()
public NewInstructionAction CreateNewInstructionAction()
public NumberAction CreateNumberAction()
public ProcessingInstructionAction CreateProcessingInstructionAction()
public void CreateRootAction()
public SortAction CreateSortAction()
public TemplateAction CreateTemplateAction()
public TemplateAction CreateSingleTemplateAction()
public TextAction CreateTextAction()
public UseAttributeSetsAction CreateUseAttributeSetsAction()
public ValueOfAction CreateValueOfAction()
public VariableAction CreateVariableAction(VariableType type)
public WithParamAction CreateWithParamAction()
public BeginEvent CreateBeginEvent()
public TextEvent CreateTextEvent()
}
internal System.Xml.Xsl.XsltOld.DbgData : object {
private XPathNavigator styleSheet
private VariableAction[] variables
private DbgData s_nullDbgData
public XPathNavigator StyleSheet
public VariableAction[] Variables
public DbgData Empty
public XPathNavigator get_StyleSheet()
public VariableAction[] get_Variables()
public void .ctor(Compiler compiler)
internal void ReplaceVariables(VariableAction[] vars)
public DbgData get_Empty()
}
internal System.Xml.Xsl.XsltOld.Debugger.IStackFrame {
public XPathNavigator Instruction
public XPathNodeIterator NodeSet
public XPathNavigator get_Instruction()
public XPathNodeIterator get_NodeSet()
public int GetVariablesCount()
public XPathNavigator GetVariable(int varIndex)
public object GetVariableValue(int varIndex)
}
internal System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger {
public string GetBuiltInTemplatesUri()
public void OnInstructionCompile(XPathNavigator styleSheetNavigator)
public void OnInstructionExecute(IXsltProcessor xsltProcessor)
}
internal System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor {
public int StackDepth
public int get_StackDepth()
public IStackFrame GetStackFrame(int depth)
}
internal System.Xml.Xsl.XsltOld.DocumentKeyList : ValueType {
private XPathNavigator rootNav
private Hashtable keyTable
public XPathNavigator RootNav
public Hashtable KeyTable
public void .ctor(XPathNavigator rootNav, Hashtable keyTable)
public XPathNavigator get_RootNav()
public Hashtable get_KeyTable()
}
internal System.Xml.Xsl.XsltOld.DocumentScope : object {
protected NamespaceDecl scopes
internal NamespaceDecl Scopes
internal NamespaceDecl get_Scopes()
internal NamespaceDecl AddNamespace(string prefix, string uri, string prevDefaultNsUri)
internal string ResolveAtom(string prefix)
internal string ResolveNonAtom(string prefix)
}
internal System.Xml.Xsl.XsltOld.ElementAction : ContainerAction {
private int NameDone
private Avt nameAvt
private Avt nsAvt
private bool empty
private InputScopeManager manager
private string name
private string nsUri
private PrefixQName qname
private PrefixQName CreateElementQName(string name, string nsUri, InputScopeManager manager)
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.EndEvent : Event {
private XPathNodeType nodeType
internal void .ctor(XPathNodeType nodeType)
public bool Output(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.Event : object {
internal DbgData DbgData
public void ReplaceNamespaceAlias(Compiler compiler)
public bool Output(Processor processor, ActionFrame frame)
internal void OnInstructionExecute(Processor processor)
internal DbgData get_DbgData()
}
internal System.Xml.Xsl.XsltOld.ForEachAction : ContainerAction {
private int ProcessedSort
private int ProcessNextNode
private int PositionAdvanced
private int ContentsProcessed
private int selectKey
private ContainerAction sortContainer
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
protected void CompileSortElements(Compiler compiler)
}
internal System.Xml.Xsl.XsltOld.HtmlAttributeProps : object {
private bool abr
private bool uri
private bool name
private Hashtable s_table
public bool Abr
public bool Uri
public bool Name
public HtmlAttributeProps Create(bool abr, bool uri, bool name)
public bool get_Abr()
public bool get_Uri()
public bool get_Name()
public HtmlAttributeProps GetProps(string name)
private Hashtable CreatePropsTable()
}
internal System.Xml.Xsl.XsltOld.HtmlElementProps : object {
private bool empty
private bool abrParent
private bool uriParent
private bool noEntities
private bool blockWS
private bool head
private bool nameParent
private Hashtable s_table
public bool Empty
public bool AbrParent
public bool UriParent
public bool NoEntities
public bool BlockWS
public bool Head
public bool NameParent
public HtmlElementProps Create(bool empty, bool abrParent, bool uriParent, bool noEntities, bool blockWS, bool head, bool nameParent)
public bool get_Empty()
public bool get_AbrParent()
public bool get_UriParent()
public bool get_NoEntities()
public bool get_BlockWS()
public bool get_Head()
public bool get_NameParent()
public HtmlElementProps GetProps(string name)
private Hashtable CreatePropsTable()
}
internal System.Xml.Xsl.XsltOld.IfAction : ContainerAction {
private ConditionType type
private int testKey
internal void .ctor(ConditionType type)
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.InputScope : DocumentScope {
private InputScope parent
private bool forwardCompatibility
private bool canHaveApplyImports
private Hashtable variables
private Hashtable extensionNamespaces
private Hashtable excludedNamespaces
internal InputScope Parent
internal Hashtable Variables
internal bool ForwardCompatibility
internal bool CanHaveApplyImports
internal InputScope get_Parent()
internal Hashtable get_Variables()
internal bool get_ForwardCompatibility()
internal void set_ForwardCompatibility(bool value)
internal bool get_CanHaveApplyImports()
internal void set_CanHaveApplyImports(bool value)
internal void .ctor(InputScope parent)
internal void Init(InputScope parent)
internal void InsertExtensionNamespace(string nspace)
internal bool IsExtensionNamespace(string nspace)
internal void InsertExcludedNamespace(string nspace)
internal bool IsExcludedNamespace(string nspace)
internal void InsertVariable(VariableAction variable)
internal int GetVeriablesCount()
public VariableAction ResolveVariable(XmlQualifiedName qname)
public VariableAction ResolveGlobalVariable(XmlQualifiedName qname)
}
internal System.Xml.Xsl.XsltOld.InputScopeManager : object {
private InputScope scopeStack
private string defaultNS
private XPathNavigator navigator
internal InputScope CurrentScope
internal InputScope VariableScope
public XPathNavigator Navigator
public string DefaultNamespace
public void .ctor(XPathNavigator navigator, InputScope rootScope)
internal InputScope get_CurrentScope()
internal InputScope get_VariableScope()
internal InputScopeManager Clone()
public XPathNavigator get_Navigator()
internal InputScope PushScope()
internal void PopScope()
internal void PushNamespace(string prefix, string nspace)
public string get_DefaultNamespace()
private string ResolveNonEmptyPrefix(string prefix)
public string ResolveXmlNamespace(string prefix)
public string ResolveXPathNamespace(string prefix)
internal void InsertExtensionNamespaces(String[] nsList)
internal bool IsExtensionNamespace(string nspace)
internal void InsertExcludedNamespaces(String[] nsList)
internal bool IsExcludedNamespace(string nspace)
}
internal System.Xml.Xsl.XsltOld.Key : object {
private XmlQualifiedName name
private int matchKey
private int useKey
private ArrayList keyNodes
public XmlQualifiedName Name
public int MatchKey
public int UseKey
public void .ctor(XmlQualifiedName name, int matchkey, int usekey)
public XmlQualifiedName get_Name()
public int get_MatchKey()
public int get_UseKey()
public void AddKey(XPathNavigator root, Hashtable table)
public Hashtable GetKeys(XPathNavigator root)
public Key Clone()
}
internal System.Xml.Xsl.XsltOld.MessageAction : ContainerAction {
private bool _Terminate
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.NamespaceDecl : object {
private string prefix
private string nsUri
private string prevDefaultNsUri
private NamespaceDecl next
internal string Prefix
internal string Uri
internal string PrevDefaultNsUri
internal NamespaceDecl Next
internal string get_Prefix()
internal string get_Uri()
internal string get_PrevDefaultNsUri()
internal NamespaceDecl get_Next()
internal void .ctor(string prefix, string nsUri, string prevDefaultNsUri, NamespaceDecl next)
internal void Init(string prefix, string nsUri, string prevDefaultNsUri, NamespaceDecl next)
}
internal System.Xml.Xsl.XsltOld.NamespaceEvent : Event {
private string namespaceUri
private string name
public void .ctor(NavigatorInput input)
public void ReplaceNamespaceAlias(Compiler compiler)
public bool Output(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.NamespaceInfo : object {
internal string prefix
internal string nameSpace
internal int stylesheetId
internal void .ctor(string prefix, string nameSpace, int stylesheetId)
}
internal System.Xml.Xsl.XsltOld.NavigatorInput : object {
private XPathNavigator _Navigator
private PositionInfo _PositionInfo
private InputScopeManager _Manager
private NavigatorInput _Next
private string _Href
private KeywordsTable _Atoms
internal NavigatorInput Next
internal string Href
internal KeywordsTable Atoms
internal XPathNavigator Navigator
internal InputScopeManager InputScopeManager
internal int LineNumber
internal int LinePosition
internal XPathNodeType NodeType
internal string Name
internal string LocalName
internal string NamespaceURI
internal string Prefix
internal string Value
internal bool IsEmptyTag
internal string BaseURI
internal NavigatorInput get_Next()
internal void set_Next(NavigatorInput value)
internal string get_Href()
internal KeywordsTable get_Atoms()
internal XPathNavigator get_Navigator()
internal InputScopeManager get_InputScopeManager()
internal bool Advance()
internal bool Recurse()
internal bool ToParent()
internal void Close()
internal int get_LineNumber()
internal int get_LinePosition()
internal XPathNodeType get_NodeType()
internal string get_Name()
internal string get_LocalName()
internal string get_NamespaceURI()
internal string get_Prefix()
internal string get_Value()
internal bool get_IsEmptyTag()
internal string get_BaseURI()
internal bool MoveToFirstAttribute()
internal bool MoveToNextAttribute()
internal bool MoveToFirstNamespace()
internal bool MoveToNextNamespace()
internal void .ctor(XPathNavigator navigator, string baseUri, InputScope rootScope)
internal void .ctor(XPathNavigator navigator)
internal void AssertInput()
}
internal System.Xml.Xsl.XsltOld.NavigatorOutput : object {
private XPathDocument doc
private int documentIndex
private XmlRawWriter wr
internal XPathNavigator Navigator
internal XPathNavigator get_Navigator()
internal void .ctor(string baseUri)
public OutputResult RecordDone(RecordBuilder record)
public void TheEnd()
}
internal System.Xml.Xsl.XsltOld.NewInstructionAction : ContainerAction {
private string name
private string parent
private bool fallback
internal void Compile(Compiler compiler)
internal void CompileSelectiveTemplate(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.NumberAction : ContainerAction {
private long msofnfcNil
private long msofnfcTraditional
private long msofnfcAlwaysFormat
private int cchMaxFormat
private int cchMaxFormatDecimal
private FormatInfo DefaultFormat
private FormatInfo DefaultSeparator
private int OutputNumber
private string level
private string countPattern
private int countKey
private string from
private int fromKey
private string value
private int valueKey
private Avt formatAvt
private Avt langAvt
private Avt letterAvt
private Avt groupingSepAvt
private Avt groupingSizeAvt
private List`1<FormatInfo> formatTokens
private string lang
private string letter
private string groupingSep
private string groupingSize
private bool forwardCompatibility
internal bool CompileAttribute(Compiler compiler)
internal void Compile(Compiler compiler)
private int numberAny(Processor processor, ActionFrame frame)
private bool checkFrom(Processor processor, XPathNavigator nav)
private bool moveToCount(XPathNavigator nav, Processor processor, XPathNavigator contextNode)
private int numberCount(XPathNavigator nav, Processor processor, XPathNavigator contextNode)
private object SimplifyValue(object value)
internal void Execute(Processor processor, ActionFrame frame)
private bool MatchCountKey(Processor processor, XPathNavigator contextNode, XPathNavigator nav)
private XPathNodeType BasicNodeType(XPathNodeType type)
private string Format(ArrayList numberlist, List`1<FormatInfo> tokens, string lang, string letter, string groupingSep, string groupingSize)
private void mapFormatToken(string wsToken, int startLen, int tokLen, NumberingSequence& seq, Int32& pminlen)
private List`1<FormatInfo> ParseFormat(string formatString)
private string ParseLetter(string letter)
}
internal System.Xml.Xsl.XsltOld.OutKeywords : object {
private string _AtomEmpty
private string _AtomLang
private string _AtomSpace
private string _AtomXmlns
private string _AtomXml
private string _AtomXmlNamespace
private string _AtomXmlnsNamespace
internal string Empty
internal string Lang
internal string Space
internal string Xmlns
internal string Xml
internal string XmlNamespace
internal string XmlnsNamespace
internal void .ctor(XmlNameTable nameTable)
internal string get_Empty()
internal string get_Lang()
internal string get_Space()
internal string get_Xmlns()
internal string get_Xml()
internal string get_XmlNamespace()
internal string get_XmlnsNamespace()
private void CheckKeyword(string keyword)
}
internal System.Xml.Xsl.XsltOld.OutputScope : DocumentScope {
private string name
private string nsUri
private string prefix
private XmlSpace space
private string lang
private bool mixed
private bool toCData
private HtmlElementProps htmlElementProps
internal string Name
internal string Namespace
internal string Prefix
internal XmlSpace Space
internal string Lang
internal bool Mixed
internal bool ToCData
internal HtmlElementProps HtmlElementProps
internal string get_Name()
internal string get_Namespace()
internal string get_Prefix()
internal void set_Prefix(string value)
internal XmlSpace get_Space()
internal void set_Space(XmlSpace value)
internal string get_Lang()
internal void set_Lang(string value)
internal bool get_Mixed()
internal void set_Mixed(bool value)
internal bool get_ToCData()
internal void set_ToCData(bool value)
internal HtmlElementProps get_HtmlElementProps()
internal void set_HtmlElementProps(HtmlElementProps value)
internal void Init(string name, string nspace, string prefix, XmlSpace space, string lang, bool mixed)
internal bool FindPrefix(string urn, String& prefix)
}
internal System.Xml.Xsl.XsltOld.OutputScopeManager : object {
private int STACK_INCREMENT
private HWStack elementScopesStack
private string defaultNS
private OutKeywords atoms
private XmlNameTable nameTable
private int prefixIndex
internal string DefaultNamespace
internal OutputScope CurrentElementScope
internal XmlSpace XmlSpace
internal string XmlLang
internal string get_DefaultNamespace()
internal OutputScope get_CurrentElementScope()
internal XmlSpace get_XmlSpace()
internal string get_XmlLang()
internal void .ctor(XmlNameTable nameTable, OutKeywords atoms)
internal void PushNamespace(string prefix, string nspace)
internal void PushScope(string name, string nspace, string prefix)
internal void PopScope()
internal string ResolveNamespace(string prefix)
internal string ResolveNamespace(string prefix, Boolean& thisScope)
internal bool FindPrefix(string nspace, String& prefix)
internal string GeneratePrefix(string format)
}
internal System.Xml.Xsl.XsltOld.PrefixQName : object {
public string Prefix
public string Name
public string Namespace
internal void ClearPrefix()
internal void SetQName(string qname)
public void ParseQualifiedName(string qname, String& prefix, String& local)
public bool ValidatePrefix(string prefix)
}
internal System.Xml.Xsl.XsltOld.ProcessingInstructionAction : ContainerAction {
private int NameEvaluated
private int NameReady
private Avt nameAvt
private string name
private char CharX
private char Charx
private char CharM
private char Charm
private char CharL
private char Charl
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
internal bool IsProcessingInstructionName(string name)
}
internal System.Xml.Xsl.XsltOld.Processor : object {
private int StackIncrement
private ExecResult execResult
private Stylesheet stylesheet
private RootAction rootAction
private Key[] keyList
private List`1<TheQuery> queryStore
public PermissionSet permissions
private XPathNavigator document
private HWStack actionStack
private HWStack debuggerStack
private StringBuilder sharedStringBuilder
private int ignoreLevel
private StateMachine xsm
private RecordBuilder builder
private XsltOutput output
private XmlNameTable nameTable
private XmlResolver resolver
private XsltArgumentList args
private Hashtable scriptExtensions
private ArrayList numberList
private TemplateLookupAction templateLookup
private IXsltDebugger debugger
private Query[] queryList
private ArrayList sortArray
private Hashtable documentCache
private XsltCompileContext valueOfContext
private XsltCompileContext matchesContext
internal XPathNavigator Current
internal ExecResult ExecutionResult
internal Stylesheet Stylesheet
internal XmlResolver Resolver
internal ArrayList SortArray
internal Key[] KeyList
internal RootAction RootAction
internal XPathNavigator Document
internal ArrayList NumberList
internal IXsltDebugger Debugger
internal HWStack ActionStack
internal RecordBuilder Builder
internal XsltOutput Output
internal XmlNameTable NameTable
internal bool CanContinue
internal bool ExecutionDone
private int System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor.StackDepth
internal XPathNavigator get_Current()
internal ExecResult get_ExecutionResult()
internal void set_ExecutionResult(ExecResult value)
internal Stylesheet get_Stylesheet()
internal XmlResolver get_Resolver()
internal ArrayList get_SortArray()
internal Key[] get_KeyList()
internal XPathNavigator GetNavigator(Uri ruri)
internal void AddSort(Sort sortinfo)
internal void InitSortArray()
internal object GetGlobalParameter(XmlQualifiedName qname)
internal object GetExtensionObject(string nsUri)
internal object GetScriptObject(string nsUri)
internal RootAction get_RootAction()
internal XPathNavigator get_Document()
internal StringBuilder GetSharedStringBuilder()
internal void ReleaseSharedStringBuilder()
internal ArrayList get_NumberList()
internal IXsltDebugger get_Debugger()
internal HWStack get_ActionStack()
internal RecordBuilder get_Builder()
internal XsltOutput get_Output()
public void .ctor(XPathNavigator doc, XsltArgumentList args, XmlResolver resolver, Stylesheet stylesheet, List`1<TheQuery> queryStore, RootAction rootAction, IXsltDebugger debugger)
public ReaderOutput StartReader()
public void Execute(Stream stream)
public void Execute(TextWriter writer)
public void Execute(XmlWriter writer)
internal void Execute()
internal ActionFrame PushNewFrame()
internal void PushActionFrame(Action action, XPathNodeIterator nodeSet)
internal void PushActionFrame(ActionFrame container)
internal void PushActionFrame(ActionFrame container, XPathNodeIterator nodeSet)
internal void PushTemplateLookup(XPathNodeIterator nodeSet, XmlQualifiedName mode, Stylesheet importsOf)
internal string GetQueryExpression(int key)
internal Query GetCompiledQuery(int key)
internal Query GetValueQuery(int key)
internal Query GetValueQuery(int key, XsltCompileContext context)
private XsltCompileContext GetValueOfContext()
private void RecycleValueOfContext()
private XsltCompileContext GetMatchesContext()
private void RecycleMatchesContext()
internal string ValueOf(ActionFrame context, int key)
internal string ValueOf(XPathNavigator n)
private void ElementValueWithoutWS(XPathNavigator nav, StringBuilder builder)
internal XPathNodeIterator StartQuery(XPathNodeIterator context, int key)
internal object Evaluate(ActionFrame context, int key)
internal object RunQuery(ActionFrame context, int key)
internal string EvaluateString(ActionFrame context, int key)
internal bool EvaluateBoolean(ActionFrame context, int key)
internal bool Matches(XPathNavigator context, int key)
internal XmlNameTable get_NameTable()
internal bool get_CanContinue()
internal bool get_ExecutionDone()
internal void ResetOutput()
internal bool BeginEvent(XPathNodeType nodeType, string prefix, string name, string nspace, bool empty)
internal bool BeginEvent(XPathNodeType nodeType, string prefix, string name, string nspace, bool empty, object htmlProps, bool search)
internal bool TextEvent(string text)
internal bool TextEvent(string text, bool disableOutputEscaping)
internal bool EndEvent(XPathNodeType nodeType)
internal bool CopyBeginEvent(XPathNavigator node, bool emptyflag)
internal bool CopyTextEvent(XPathNavigator node)
internal bool CopyEndEvent(XPathNavigator node)
internal bool IsRoot(XPathNavigator navigator)
internal void PushOutput(RecordOutput output)
internal RecordOutput PopOutput()
internal bool SetDefaultOutput(OutputMethod method)
internal object GetVariableValue(VariableAction variable)
internal void SetParameter(XmlQualifiedName name, object value)
internal void ResetParams()
internal object GetParameter(XmlQualifiedName name)
internal void PushDebuggerStack()
internal void PopDebuggerStack()
internal void OnInstructionExecute()
internal XmlQualifiedName GetPrevioseMode()
internal void SetCurrentMode(XmlQualifiedName mode)
private int System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor.get_StackDepth()
private IStackFrame System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor.GetStackFrame(int depth)
}
internal System.Xml.Xsl.XsltOld.ReaderOutput : XmlReader {
private Processor processor
private XmlNameTable nameTable
private RecordBuilder builder
private BuilderInfo mainNode
private ArrayList attributeList
private int attributeCount
private BuilderInfo attributeValue
private OutputScopeManager manager
private int currentIndex
private BuilderInfo currentInfo
private ReadState state
private bool haveRecord
private BuilderInfo s_DefaultInfo
private XmlEncoder encoder
private XmlCharType xmlCharType
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public char QuoteChar
public bool IsDefault
public XmlSpace XmlSpace
public string XmlLang
public int AttributeCount
public string Item
public string Item
public string Item
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
internal void .ctor(Processor processor)
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public char get_QuoteChar()
public bool get_IsDefault()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public string GetAttribute(int i)
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string namespaceURI)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool Read()
public bool get_EOF()
public void Close()
public ReadState get_ReadState()
public string ReadString()
public string ReadInnerXml()
public string ReadOuterXml()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public void ResolveEntity()
public bool ReadAttributeValue()
public OutputResult RecordDone(RecordBuilder record)
public void TheEnd()
private void SetMainNode()
private void SetAttribute(int attrib)
private BuilderInfo GetBuilderInfo(int attrib)
private bool FindAttribute(string localName, string namespaceURI, Int32& attrIndex)
private bool FindAttribute(string name, Int32& attrIndex)
private void Reset()
private void CheckCurrentInfo()
}
internal System.Xml.Xsl.XsltOld.RecordBuilder : object {
private int outputState
private RecordBuilder next
private RecordOutput output
private XmlNameTable nameTable
private OutKeywords atoms
private OutputScopeManager scopeManager
private BuilderInfo mainNode
private ArrayList attributeList
private int attributeCount
private ArrayList namespaceList
private int namespaceCount
private BuilderInfo dummy
private BuilderInfo currentInfo
private bool popScope
private int recordState
private int recordDepth
private int NoRecord
private int SomeRecord
private int HaveRecord
private char s_Minus
private string s_Space
private string s_SpaceMinus
private char s_Question
private char s_Greater
private string s_SpaceGreater
private string PrefixFormat
internal int OutputState
internal RecordBuilder Next
internal RecordOutput Output
internal BuilderInfo MainNode
internal ArrayList AttributeList
internal int AttributeCount
internal OutputScopeManager Manager
internal void .ctor(RecordOutput output, XmlNameTable nameTable)
internal int get_OutputState()
internal void set_OutputState(int value)
internal RecordBuilder get_Next()
internal void set_Next(RecordBuilder value)
internal RecordOutput get_Output()
internal BuilderInfo get_MainNode()
internal ArrayList get_AttributeList()
internal int get_AttributeCount()
internal OutputScopeManager get_Manager()
private void ValueAppend(string s, bool disableOutputEscaping)
private bool CanOutput(int state)
internal OutputResult BeginEvent(int state, XPathNodeType nodeType, string prefix, string name, string nspace, bool empty, object htmlProps, bool search)
internal OutputResult TextEvent(int state, string text, bool disableOutputEscaping)
internal OutputResult EndEvent(int state, XPathNodeType nodeType)
internal void Reset()
internal void TheEnd()
private int FindAttribute(string name, string nspace, String& prefix)
private void BeginElement(string prefix, string name, string nspace, bool empty)
private void EndElement()
private int NewAttribute()
private void BeginAttribute(string prefix, string name, string nspace, object htmlAttrProps, bool search)
private void BeginNamespace(string name, string nspace)
private bool BeginProcessingInstruction(string prefix, string name, string nspace)
private void BeginComment()
private void AdjustDepth(int state)
private void ResetRecord(int state)
private void PopElementScope()
private OutputResult CheckRecordBegin(int state)
private OutputResult CheckRecordEnd(int state)
private void SetEmptyFlag(int state)
private void AnalyzeSpaceLang()
private void FixupElement()
private void FixupAttributes(int attributeCount)
private void AppendNamespaces()
private void AnalyzeComment()
private void AnalyzeProcessingInstruction()
private void FinalizeRecord()
private int NewNamespace()
private void DeclareNamespace(string nspace, string prefix)
private string DeclareNewNamespace(string nspace)
internal string GetPrefixForNamespace(string nspace)
private XmlSpace TranslateXmlSpace(string space)
}
internal System.Xml.Xsl.XsltOld.RecordOutput {
public OutputResult RecordDone(RecordBuilder record)
public void TheEnd()
}
internal System.Xml.Xsl.XsltOld.RootAction : TemplateBaseAction {
private int QueryInitialized
private int RootProcessed
private Hashtable attributeSetTable
private Hashtable decimalFormatTable
private List`1<Key> keyList
private XsltOutput output
public Stylesheet builtInSheet
public PermissionSet permissions
internal XsltOutput Output
internal List`1<Key> KeyList
internal XsltOutput get_Output()
internal void Compile(Compiler compiler)
internal void InsertKey(XmlQualifiedName name, int MatchKey, int UseKey)
internal AttributeSetAction GetAttributeSet(XmlQualifiedName name)
public void PorcessAttributeSets(Stylesheet rootStylesheet)
private void MirgeAttributeSets(Stylesheet stylesheet)
private void CheckAttributeSets_RecurceInList(Hashtable markTable, ICollection setQNames)
private void CheckAttributeSets_RecurceInContainer(Hashtable markTable, ContainerAction container)
internal void AddDecimalFormat(XmlQualifiedName name, DecimalFormat formatinfo)
internal DecimalFormat GetDecimalFormat(XmlQualifiedName name)
internal List`1<Key> get_KeyList()
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.ScriptingLanguage : Enum {
public int value__
public ScriptingLanguage JScript
public ScriptingLanguage VisualBasic
public ScriptingLanguage CSharp
}
internal System.Xml.Xsl.XsltOld.SequentialOutput : object {
private char s_Colon
private char s_GreaterThan
private char s_LessThan
private char s_Space
private char s_Quote
private char s_Semicolon
private char s_NewLine
private char s_Return
private char s_Ampersand
private string s_LessThanQuestion
private string s_QuestionGreaterThan
private string s_LessThanSlash
private string s_SlashGreaterThan
private string s_EqualQuote
private string s_DocType
private string s_CommentBegin
private string s_CommentEnd
private string s_CDataBegin
private string s_CDataEnd
private string s_VersionAll
private string s_Standalone
private string s_EncodingStart
private string s_Public
private string s_System
private string s_Html
private string s_QuoteSpace
private string s_CDataSplit
private string s_EnLessThan
private string s_EnGreaterThan
private string s_EnAmpersand
private string s_EnQuote
private string s_EnNewLine
private string s_EnReturn
private string s_EndOfLine
private Char[] s_TextValueFind
private String[] s_TextValueReplace
private Char[] s_XmlAttributeValueFind
private String[] s_XmlAttributeValueReplace
private Processor processor
protected Encoding encoding
private ArrayList outputCache
private bool firstLine
private bool secondRoot
private XsltOutput output
private bool isHtmlOutput
private bool isXmlOutput
private Hashtable cdataElements
private bool indentOutput
private bool outputDoctype
private bool outputXmlDecl
private bool omitXmlDeclCalled
private Byte[] byteBuffer
private Encoding utf8Encoding
private XmlCharType xmlCharType
private void CacheOuptutProps(XsltOutput output)
internal void .ctor(Processor processor)
public void OmitXmlDecl()
private void WriteStartElement(RecordBuilder record)
private void WriteTextNode(RecordBuilder record)
private void WriteTextNode(BuilderInfo node)
private void WriteCDataSection(string value)
private void WriteDoctype(BuilderInfo mainNode)
private void WriteXmlDeclaration()
private void WriteProcessingInstruction(RecordBuilder record)
private void WriteProcessingInstruction(BuilderInfo node)
private void WriteEndElement(RecordBuilder record)
public OutputResult RecordDone(RecordBuilder record)
public void TheEnd()
private bool DecideDefaultOutput(BuilderInfo node)
private void CacheRecord(RecordBuilder record)
private void OutputCachedRecords()
private void OutputRecord(RecordBuilder record)
private void OutputRecord(BuilderInfo node)
private void WriteName(string prefix, string name)
private void WriteXmlAttributeValue(string value)
private void WriteHtmlAttributeValue(string value)
private void WriteHtmlUri(string value)
private void WriteWithReplace(string value, Char[] find, String[] replace)
private void WriteCData(string value)
private void WriteAttributes(ArrayList list, int count, HtmlElementProps htmlElementsProps)
private void Indent(RecordBuilder record)
private void Indent(int depth)
internal void Write(char outputChar)
internal void Write(string outputText)
internal void Close()
}
internal System.Xml.Xsl.XsltOld.Sort : object {
internal int select
internal string lang
internal XmlDataType dataType
internal XmlSortOrder order
internal XmlCaseOrder caseOrder
public void .ctor(int sortkey, string xmllang, XmlDataType datatype, XmlSortOrder xmlorder, XmlCaseOrder xmlcaseorder)
}
internal System.Xml.Xsl.XsltOld.SortAction : CompiledAction {
private int selectKey
private Avt langAvt
private Avt dataTypeAvt
private Avt orderAvt
private Avt caseOrderAvt
private string lang
private XmlDataType dataType
private XmlSortOrder order
private XmlCaseOrder caseOrder
private Sort sort
private bool forwardCompatibility
private InputScopeManager manager
private string ParseLang(string value)
private XmlDataType ParseDataType(string value, InputScopeManager manager)
private XmlSortOrder ParseOrder(string value)
private XmlCaseOrder ParseCaseOrder(string value)
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.StateMachine : object {
private int Init
private int Elem
private int NsN
private int NsV
private int Ns
private int AttrN
private int AttrV
private int Attr
private int InElm
private int EndEm
private int InCmt
private int InPI
private int StateMask
internal int Error
private int Ignor
private int Assrt
private int U
private int D
internal int DepthMask
internal int DepthUp
internal int DepthDown
private int C
private int H
private int M
internal int BeginChild
internal int HadChild
internal int EmptyTag
private int B
private int E
internal int BeginRecord
internal int EndRecord
private int S
private int P
internal int PushScope
internal int PopScope
private int _State
private Int32[][] s_BeginTransitions
private Int32[][] s_EndTransitions
internal int State
internal int get_State()
internal void set_State(int value)
internal void Reset()
internal int StateOnly(int state)
internal int BeginOutlook(XPathNodeType nodeType)
internal int Begin(XPathNodeType nodeType)
internal int EndOutlook(XPathNodeType nodeType)
internal int End(XPathNodeType nodeType)
}
internal System.Xml.Xsl.XsltOld.StringOutput : SequentialOutput {
private StringBuilder builder
private string result
internal string Result
internal string get_Result()
internal void .ctor(Processor processor)
internal void Write(char outputChar)
internal void Write(string outputText)
internal void Close()
}
internal System.Xml.Xsl.XsltOld.Stylesheet : object {
private ArrayList imports
private Hashtable modeManagers
private Hashtable templateNameTable
private Hashtable attributeSetTable
private int templateCount
private Hashtable queryKeyTable
private ArrayList whitespaceList
private bool whitespace
private Hashtable scriptObjectTypes
private TemplateManager templates
internal bool Whitespace
internal ArrayList Imports
internal Hashtable AttributeSetTable
internal Hashtable ScriptObjectTypes
internal bool get_Whitespace()
internal ArrayList get_Imports()
internal Hashtable get_AttributeSetTable()
internal void AddSpace(Compiler compiler, string query, double Priority, bool PreserveSpace)
internal void SortWhiteSpace()
internal bool PreserveWhiteSpace(Processor proc, XPathNavigator node)
internal void AddAttributeSet(AttributeSetAction attributeSet)
internal void AddTemplate(TemplateAction template)
internal void ProcessTemplates()
internal void ReplaceNamespaceAlias(Compiler compiler)
internal TemplateAction FindTemplate(Processor processor, XPathNavigator navigator, XmlQualifiedName mode)
internal TemplateAction FindTemplateImports(Processor processor, XPathNavigator navigator, XmlQualifiedName mode)
internal TemplateAction FindTemplate(Processor processor, XPathNavigator navigator)
internal TemplateAction FindTemplate(XmlQualifiedName name)
internal TemplateAction FindTemplateImports(Processor processor, XPathNavigator navigator)
internal Hashtable get_ScriptObjectTypes()
}
internal System.Xml.Xsl.XsltOld.TemplateAction : TemplateBaseAction {
private int matchKey
private XmlQualifiedName name
private double priority
private XmlQualifiedName mode
private int templateId
private bool replaceNSAliasesDone
internal int MatchKey
internal XmlQualifiedName Name
internal double Priority
internal XmlQualifiedName Mode
internal int TemplateId
internal int get_MatchKey()
internal XmlQualifiedName get_Name()
internal double get_Priority()
internal XmlQualifiedName get_Mode()
internal int get_TemplateId()
internal void set_TemplateId(int value)
internal void Compile(Compiler compiler)
internal void CompileSingle(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
private void AnalyzePriority(Compiler compiler)
protected void CompileParameters(Compiler compiler)
private TemplateAction CloneWithoutName()
internal void ReplaceNamespaceAlias(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.TemplateBaseAction : ContainerAction {
protected int variableCount
private int variableFreeSlot
public int AllocateVariableSlot()
public void ReleaseVariableSlots(int n)
}
internal System.Xml.Xsl.XsltOld.TemplateLookupAction : Action {
protected XmlQualifiedName mode
protected Stylesheet importsOf
internal void Initialize(XmlQualifiedName mode, Stylesheet importsOf)
internal void Execute(Processor processor, ActionFrame frame)
internal Action BuiltInTemplate(XPathNavigator node)
}
internal System.Xml.Xsl.XsltOld.TemplateLookupActionDbg : TemplateLookupAction {
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.TemplateManager : object {
private XmlQualifiedName mode
internal ArrayList templates
private Stylesheet stylesheet
private TemplateComparer s_TemplateComparer
internal XmlQualifiedName Mode
internal XmlQualifiedName get_Mode()
internal void .ctor(Stylesheet stylesheet, XmlQualifiedName mode)
internal void AddTemplate(TemplateAction template)
internal void ProcessTemplates()
internal TemplateAction FindTemplate(Processor processor, XPathNavigator navigator)
}
internal System.Xml.Xsl.XsltOld.TextAction : CompiledAction {
private bool disableOutputEscaping
private string text
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
private void CompileContent(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.TextEvent : Event {
private string text
public void .ctor(string text)
public void .ctor(Compiler compiler)
public bool Output(Processor processor, ActionFrame frame)
public string Evaluate(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.TextOnlyOutput : object {
private Processor processor
private TextWriter writer
internal XsltOutput Output
public TextWriter Writer
internal XsltOutput get_Output()
public TextWriter get_Writer()
internal void .ctor(Processor processor, Stream stream)
internal void .ctor(Processor processor, TextWriter writer)
public OutputResult RecordDone(RecordBuilder record)
public void TheEnd()
}
internal System.Xml.Xsl.XsltOld.TextOutput : SequentialOutput {
private TextWriter writer
internal void .ctor(Processor processor, Stream stream)
internal void .ctor(Processor processor, TextWriter writer)
internal void Write(char outputChar)
internal void Write(string outputText)
internal void Close()
}
internal System.Xml.Xsl.XsltOld.TheQuery : object {
internal InputScopeManager _ScopeManager
private CompiledXpathExpr _CompiledQuery
internal CompiledXpathExpr CompiledQuery
internal CompiledXpathExpr get_CompiledQuery()
internal void .ctor(CompiledXpathExpr compiledQuery, InputScopeManager manager)
}
internal System.Xml.Xsl.XsltOld.UseAttributeSetsAction : CompiledAction {
private XmlQualifiedName[] useAttributeSets
private string useString
private int ProcessingSets
internal XmlQualifiedName[] UsedSets
internal XmlQualifiedName[] get_UsedSets()
internal void Compile(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.ValueOfAction : CompiledAction {
private int ResultStored
private int selectKey
private bool disableOutputEscaping
private Action s_BuiltInRule
internal Action BuiltInRule()
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.VariableAction : ContainerAction {
public object BeingComputedMark
private int ValueCalculated
protected XmlQualifiedName name
protected string nameStr
protected string baseUri
protected int selectKey
protected int stylesheetid
protected VariableType varType
private int varKey
internal int Stylesheetid
internal XmlQualifiedName Name
internal string NameStr
internal VariableType VarType
internal int VarKey
internal bool IsGlobal
private XPathResultType System.Xml.Xsl.IXsltContextVariable.VariableType
private bool System.Xml.Xsl.IXsltContextVariable.IsLocal
private bool System.Xml.Xsl.IXsltContextVariable.IsParam
internal int get_Stylesheetid()
internal XmlQualifiedName get_Name()
internal string get_NameStr()
internal VariableType get_VarType()
internal int get_VarKey()
internal bool get_IsGlobal()
internal void .ctor(VariableType type)
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
private XPathResultType System.Xml.Xsl.IXsltContextVariable.get_VariableType()
private object System.Xml.Xsl.IXsltContextVariable.Evaluate(XsltContext xsltContext)
private bool System.Xml.Xsl.IXsltContextVariable.get_IsLocal()
private bool System.Xml.Xsl.IXsltContextVariable.get_IsParam()
}
internal System.Xml.Xsl.XsltOld.VariableType : Enum {
public int value__
public VariableType GlobalVariable
public VariableType GlobalParameter
public VariableType LocalVariable
public VariableType LocalParameter
public VariableType WithParameter
}
internal System.Xml.Xsl.XsltOld.WithParamAction : VariableAction {
internal void Compile(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
}
internal System.Xml.Xsl.XsltOld.WriterOutput : object {
private XmlWriter writer
private Processor processor
internal void .ctor(Processor processor, XmlWriter writer)
public OutputResult RecordDone(RecordBuilder record)
public void TheEnd()
private void WriteAttributes(ArrayList list, int count)
}
internal System.Xml.Xsl.XsltOld.XsltCompileContext : XsltContext {
private InputScopeManager manager
private Processor processor
private Hashtable s_FunctionTable
private IXsltContextFunction s_FuncNodeSet
private string f_NodeSet
private BindingFlags bindingFlags
public string DefaultNamespace
public bool Whitespace
internal void .ctor(InputScopeManager manager, Processor processor)
internal void Recycle()
internal void Reinitialize(InputScopeManager manager, Processor processor)
public int CompareDocument(string baseUri, string nextbaseUri)
public string get_DefaultNamespace()
public string LookupNamespace(string prefix)
public IXsltContextVariable ResolveVariable(string prefix, string name)
internal object EvaluateVariable(VariableAction variable)
public bool get_Whitespace()
public bool PreserveWhitespace(XPathNavigator node)
private MethodInfo FindBestMethod(MethodInfo[] methods, bool ignoreCase, bool publicOnly, string name, XPathResultType[] argTypes)
private IXsltContextFunction GetExtentionMethod(string ns, string name, XPathResultType[] argTypes, Object& extension)
public IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] argTypes)
private Uri ComposeUri(string thisUri, string baseUri)
private XPathNodeIterator Document(object arg0, string baseUri)
private Hashtable BuildKeyTable(Key key, XPathNavigator root)
private void AddKeyValue(Hashtable keyTable, string key, XPathNavigator value, bool checkDuplicates)
private void EvaluateKey(XPathNavigator node, Query matchExpr, string matchStr, Query useExpr, Hashtable keyTable)
private DecimalFormat ResolveFormatName(string formatName)
private bool ElementAvailable(string qname)
private bool FunctionAvailable(string qname)
private XPathNodeIterator Current()
private string SystemProperty(string qname)
public XPathResultType GetXPathType(Type type)
private Hashtable CreateFunctionTable()
}
internal System.Xml.Xsl.XsltOld.XsltOutput : CompiledAction {
private OutputMethod method
private int methodSId
private Encoding encoding
private int encodingSId
private string version
private int versionSId
private bool omitXmlDecl
private int omitXmlDeclSId
private bool standalone
private int standaloneSId
private string doctypePublic
private int doctypePublicSId
private string doctypeSystem
private int doctypeSystemSId
private bool indent
private int indentSId
private string mediaType
private int mediaTypeSId
private Hashtable cdataElements
internal OutputMethod Method
internal bool OmitXmlDeclaration
internal bool HasStandalone
internal bool Standalone
internal string DoctypePublic
internal string DoctypeSystem
internal Hashtable CDataElements
internal bool Indent
internal Encoding Encoding
internal string MediaType
internal OutputMethod get_Method()
internal bool get_OmitXmlDeclaration()
internal bool get_HasStandalone()
internal bool get_Standalone()
internal string get_DoctypePublic()
internal string get_DoctypeSystem()
internal Hashtable get_CDataElements()
internal bool get_Indent()
internal Encoding get_Encoding()
internal string get_MediaType()
internal XsltOutput CreateDerivedOutput(OutputMethod method)
internal void Compile(Compiler compiler)
internal bool CompileAttribute(Compiler compiler)
internal void Execute(Processor processor, ActionFrame frame)
private OutputMethod ParseOutputMethod(string value, Compiler compiler)
}
public System.Xml.Xsl.XslTransform : object {
private XmlResolver _documentResolver
private bool isDocumentResolverSet
private Stylesheet _CompiledStylesheet
private List`1<TheQuery> _QueryStore
private RootAction _RootAction
private IXsltDebugger debugger
private XmlResolver _DocumentResolver
public XmlResolver XmlResolver
internal IXsltDebugger Debugger
private XmlResolver get__DocumentResolver()
public void set_XmlResolver(XmlResolver value)
public void Load(XmlReader stylesheet)
public void Load(XmlReader stylesheet, XmlResolver resolver)
public void Load(IXPathNavigable stylesheet)
public void Load(IXPathNavigable stylesheet, XmlResolver resolver)
public void Load(XPathNavigator stylesheet)
public void Load(XPathNavigator stylesheet, XmlResolver resolver)
public void Load(string url)
public void Load(string url, XmlResolver resolver)
public void Load(IXPathNavigable stylesheet, XmlResolver resolver, Evidence evidence)
public void Load(XmlReader stylesheet, XmlResolver resolver, Evidence evidence)
public void Load(XPathNavigator stylesheet, XmlResolver resolver, Evidence evidence)
private void CheckCommand()
public XmlReader Transform(XPathNavigator input, XsltArgumentList args, XmlResolver resolver)
public XmlReader Transform(XPathNavigator input, XsltArgumentList args)
public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output, XmlResolver resolver)
public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output)
public void Transform(XPathNavigator input, XsltArgumentList args, Stream output, XmlResolver resolver)
public void Transform(XPathNavigator input, XsltArgumentList args, Stream output)
public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output, XmlResolver resolver)
public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output)
public XmlReader Transform(IXPathNavigable input, XsltArgumentList args, XmlResolver resolver)
public XmlReader Transform(IXPathNavigable input, XsltArgumentList args)
public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output, XmlResolver resolver)
public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output)
public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output, XmlResolver resolver)
public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output)
public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output, XmlResolver resolver)
public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output)
public void Transform(string inputfile, string outputfile, XmlResolver resolver)
public void Transform(string inputfile, string outputfile)
private void Compile(XPathNavigator stylesheet, XmlResolver resolver, Evidence evidence)
internal IXsltDebugger get_Debugger()
internal void .ctor(object debugger)
}
internal System.Xml.Xsl.XslTransformException : XsltException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(Exception inner, string res, String[] args)
public void .ctor(string message)
internal void .ctor(string res, String[] args)
internal string CreateMessage(string res, String[] args)
internal string FormatDetailedMessage()
public string ToString()
}
public System.Xml.Xsl.XsltSettings : object {
private bool enableDocumentFunction
private bool enableScript
private bool checkOnly
private bool includeDebugInformation
private int warningLevel
private bool treatWarningsAsErrors
private TempFileCollection tempFiles
public XsltSettings Default
public XsltSettings TrustedXslt
public bool EnableDocumentFunction
public bool EnableScript
internal bool CheckOnly
internal bool IncludeDebugInformation
internal int WarningLevel
internal bool TreatWarningsAsErrors
internal TempFileCollection TempFiles
public void .ctor(bool enableDocumentFunction, bool enableScript)
public XsltSettings get_Default()
public XsltSettings get_TrustedXslt()
public bool get_EnableDocumentFunction()
public void set_EnableDocumentFunction(bool value)
public bool get_EnableScript()
public void set_EnableScript(bool value)
internal bool get_CheckOnly()
internal void set_CheckOnly(bool value)
internal bool get_IncludeDebugInformation()
internal void set_IncludeDebugInformation(bool value)
internal int get_WarningLevel()
internal void set_WarningLevel(int value)
internal bool get_TreatWarningsAsErrors()
internal void set_TreatWarningsAsErrors(bool value)
internal TempFileCollection get_TempFiles()
internal void set_TempFiles(TempFileCollection value)
}
internal ThisAssembly : object {
public string Version
}
