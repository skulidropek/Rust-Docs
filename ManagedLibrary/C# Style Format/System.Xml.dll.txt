internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string VsVersion
public string FxFileVersion
public string VsFileVersion
public string AssemblyI18N
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_Core
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal Mono.Xml.DictionaryBase : List`1<KeyValuePair`2<string, DTDNode>> {
public IEnumerable`1<DTDNode> Values
public IEnumerable`1<DTDNode> get_Values()
}
internal Mono.Xml.DTDAnyAutomata : DTDAutomata {
public bool Emptiable
public void .ctor(DTDObjectModel root)
public DTDAutomata TryEndElement()
public DTDAutomata TryStartElement(string name)
public bool get_Emptiable()
}
internal Mono.Xml.DTDAttListDeclaration : DTDNode {
private string name
private Hashtable attributeOrders
private ArrayList attributes
public string Name
public DTDAttributeDefinition Item
public DTDAttributeDefinition Item
public IList Definitions
public int Count
internal void .ctor(DTDObjectModel root)
public string get_Name()
public void set_Name(string value)
public DTDAttributeDefinition get_Item(int i)
public DTDAttributeDefinition get_Item(string name)
public DTDAttributeDefinition Get(int i)
public DTDAttributeDefinition Get(string name)
public IList get_Definitions()
public void Add(DTDAttributeDefinition def)
public int get_Count()
}
internal Mono.Xml.DTDAttListDeclarationCollection : DTDCollectionBase {
public DTDAttListDeclaration Item
public void .ctor(DTDObjectModel root)
public DTDAttListDeclaration get_Item(string name)
public void Add(string name, DTDAttListDeclaration decl)
}
internal Mono.Xml.DTDAttributeDefinition : DTDNode {
private string name
private XmlSchemaDatatype datatype
private ArrayList enumeratedLiterals
private string unresolvedDefault
private ArrayList enumeratedNotations
private DTDAttributeOccurenceType occurenceType
private string resolvedDefaultValue
private string resolvedNormalizedDefaultValue
public string Name
public XmlSchemaDatatype Datatype
public DTDAttributeOccurenceType OccurenceType
public ArrayList EnumeratedAttributeDeclaration
public ArrayList EnumeratedNotations
public string DefaultValue
public string NormalizedDefaultValue
public string UnresolvedDefaultValue
public char QuoteChar
internal void .ctor(DTDObjectModel root)
public string get_Name()
public void set_Name(string value)
public XmlSchemaDatatype get_Datatype()
public void set_Datatype(XmlSchemaDatatype value)
public DTDAttributeOccurenceType get_OccurenceType()
public void set_OccurenceType(DTDAttributeOccurenceType value)
public ArrayList get_EnumeratedAttributeDeclaration()
public ArrayList get_EnumeratedNotations()
public string get_DefaultValue()
public string get_NormalizedDefaultValue()
public string get_UnresolvedDefaultValue()
public void set_UnresolvedDefaultValue(string value)
public char get_QuoteChar()
internal XmlSchemaAttribute CreateXsdAttribute()
internal string ComputeDefaultValue()
}
internal Mono.Xml.DTDAttributeOccurenceType : Enum {
public int value__
public DTDAttributeOccurenceType None
public DTDAttributeOccurenceType Required
public DTDAttributeOccurenceType Optional
public DTDAttributeOccurenceType Fixed
}
internal Mono.Xml.DTDAutomata : object {
private DTDObjectModel root
public DTDObjectModel Root
public bool Emptiable
public void .ctor(DTDObjectModel root)
public DTDObjectModel get_Root()
public DTDAutomata MakeChoice(DTDAutomata other)
public DTDAutomata MakeSequence(DTDAutomata other)
public DTDAutomata TryStartElement(string name)
public DTDAutomata TryEndElement()
public bool get_Emptiable()
}
internal Mono.Xml.DTDAutomataFactory : object {
private DTDObjectModel root
private Hashtable choiceTable
private Hashtable sequenceTable
public void .ctor(DTDObjectModel root)
public DTDChoiceAutomata Choice(DTDAutomata left, DTDAutomata right)
public DTDSequenceAutomata Sequence(DTDAutomata left, DTDAutomata right)
}
internal Mono.Xml.DTDChoiceAutomata : DTDAutomata {
private DTDAutomata left
private DTDAutomata right
private bool hasComputedEmptiable
private bool cachedEmptiable
public DTDAutomata Left
public DTDAutomata Right
public bool Emptiable
public void .ctor(DTDObjectModel root, DTDAutomata left, DTDAutomata right)
public DTDAutomata get_Left()
public DTDAutomata get_Right()
public DTDAutomata TryStartElement(string name)
public DTDAutomata TryEndElement()
public bool get_Emptiable()
}
internal Mono.Xml.DTDCollectionBase : DictionaryBase {
private DTDObjectModel root
protected DTDObjectModel Root
public DictionaryBase InnerHashtable
protected void .ctor(DTDObjectModel root)
protected DTDObjectModel get_Root()
public DictionaryBase get_InnerHashtable()
protected void BaseAdd(string name, DTDNode value)
public bool Contains(string key)
protected object BaseGet(string name)
}
internal Mono.Xml.DTDContentModel : DTDNode {
private DTDObjectModel root
private DTDAutomata compiledAutomata
private string ownerElementName
private string elementName
private DTDContentOrderType orderType
private DTDContentModelCollection childModels
private DTDOccurence occurence
public DTDContentModelCollection ChildModels
public DTDElementDeclaration ElementDecl
public string ElementName
public DTDOccurence Occurence
public DTDContentOrderType OrderType
internal void .ctor(DTDObjectModel root, string ownerElementName)
public DTDContentModelCollection get_ChildModels()
public void set_ChildModels(DTDContentModelCollection value)
public DTDElementDeclaration get_ElementDecl()
public string get_ElementName()
public void set_ElementName(string value)
public DTDOccurence get_Occurence()
public void set_Occurence(DTDOccurence value)
public DTDContentOrderType get_OrderType()
public void set_OrderType(DTDContentOrderType value)
public DTDAutomata GetAutomata()
public DTDAutomata Compile()
internal XmlSchemaParticle CreateXsdParticle()
private XmlSchemaParticle CreateXsdParticleCore()
private DTDAutomata CompileInternal()
private DTDAutomata GetBasicContentAutomata()
private DTDAutomata Sequence(DTDAutomata l, DTDAutomata r)
private DTDAutomata Choice(DTDAutomata l, DTDAutomata r)
}
internal Mono.Xml.DTDContentModelCollection : object {
private ArrayList contentModel
public IList Items
public DTDContentModel Item
public int Count
public IList get_Items()
public DTDContentModel get_Item(int i)
public int get_Count()
public void Add(DTDContentModel model)
}
internal Mono.Xml.DTDContentOrderType : Enum {
public int value__
public DTDContentOrderType None
public DTDContentOrderType Seq
public DTDContentOrderType Or
}
internal Mono.Xml.DTDElementAutomata : DTDAutomata {
private string name
public string Name
public void .ctor(DTDObjectModel root, string name)
public string get_Name()
public DTDAutomata TryStartElement(string name)
}
internal Mono.Xml.DTDElementDeclaration : DTDNode {
private DTDObjectModel root
private DTDContentModel contentModel
private string name
private bool isEmpty
private bool isAny
private bool isMixedContent
public string Name
public bool IsEmpty
public bool IsAny
public bool IsMixedContent
public DTDContentModel ContentModel
public DTDAttListDeclaration Attributes
internal void .ctor(DTDObjectModel root)
public string get_Name()
public void set_Name(string value)
public bool get_IsEmpty()
public void set_IsEmpty(bool value)
public bool get_IsAny()
public void set_IsAny(bool value)
public bool get_IsMixedContent()
public void set_IsMixedContent(bool value)
public DTDContentModel get_ContentModel()
public DTDAttListDeclaration get_Attributes()
internal XmlSchemaElement CreateXsdElement()
}
internal Mono.Xml.DTDElementDeclarationCollection : DTDCollectionBase {
public DTDElementDeclaration Item
public void .ctor(DTDObjectModel root)
public DTDElementDeclaration get_Item(string name)
public DTDElementDeclaration Get(string name)
public void Add(string name, DTDElementDeclaration decl)
}
internal Mono.Xml.DTDEmptyAutomata : DTDAutomata {
public bool Emptiable
public void .ctor(DTDObjectModel root)
public DTDAutomata TryEndElement()
public DTDAutomata TryStartElement(string name)
public bool get_Emptiable()
}
internal Mono.Xml.DTDEntityBase : DTDNode {
private string name
private string publicId
private string systemId
private string literalValue
private string replacementText
private string uriString
private Uri absUri
private bool isInvalid
private bool loadFailed
private XmlResolver resolver
internal bool IsInvalid
public bool LoadFailed
public string Name
public string PublicId
public string SystemId
public string LiteralEntityValue
public string ReplacementText
public XmlResolver XmlResolver
public string ActualUri
protected void .ctor(DTDObjectModel root)
internal bool get_IsInvalid()
internal void set_IsInvalid(bool value)
public bool get_LoadFailed()
public void set_LoadFailed(bool value)
public string get_Name()
public void set_Name(string value)
public string get_PublicId()
public void set_PublicId(string value)
public string get_SystemId()
public void set_SystemId(string value)
public string get_LiteralEntityValue()
public void set_LiteralEntityValue(string value)
public string get_ReplacementText()
public void set_ReplacementText(string value)
public void set_XmlResolver(XmlResolver value)
public string get_ActualUri()
public void Resolve()
}
internal Mono.Xml.DTDEntityDeclaration : DTDEntityBase {
private string entityValue
private string notationName
private ArrayList ReferencingEntities
private bool scanned
private bool recursed
private bool hasExternalReference
public string NotationName
public bool HasExternalReference
public string EntityValue
internal void .ctor(DTDObjectModel root)
public string get_NotationName()
public void set_NotationName(string value)
public bool get_HasExternalReference()
public string get_EntityValue()
public void ScanEntityValue(ArrayList refs)
}
internal Mono.Xml.DTDEntityDeclarationCollection : DTDCollectionBase {
public DTDEntityDeclaration Item
public void .ctor(DTDObjectModel root)
public DTDEntityDeclaration get_Item(string name)
public void Add(string name, DTDEntityDeclaration decl)
}
internal Mono.Xml.DTDInvalidAutomata : DTDAutomata {
public void .ctor(DTDObjectModel root)
public DTDAutomata TryEndElement()
public DTDAutomata TryStartElement(string name)
}
internal Mono.Xml.DTDNode : object {
private DTDObjectModel root
private bool isInternalSubset
private string baseURI
private int lineNumber
private int linePosition
public string BaseURI
public bool IsInternalSubset
public int LineNumber
public int LinePosition
protected DTDObjectModel Root
public string get_BaseURI()
public void set_BaseURI(string value)
public bool get_IsInternalSubset()
public void set_IsInternalSubset(bool value)
public int get_LineNumber()
public void set_LineNumber(int value)
public int get_LinePosition()
public void set_LinePosition(int value)
public bool HasLineInfo()
internal void SetRoot(DTDObjectModel root)
protected DTDObjectModel get_Root()
internal XmlException NotWFError(string message)
public void SetLineInfo(XmlSchemaObject obj)
}
internal Mono.Xml.DTDNotationDeclaration : DTDNode {
private string name
private string localName
private string prefix
private string publicId
private string systemId
public string Name
public string PublicId
public string SystemId
public string LocalName
public string Prefix
internal void .ctor(DTDObjectModel root)
public string get_Name()
public void set_Name(string value)
public string get_PublicId()
public void set_PublicId(string value)
public string get_SystemId()
public void set_SystemId(string value)
public string get_LocalName()
public void set_LocalName(string value)
public string get_Prefix()
public void set_Prefix(string value)
}
internal Mono.Xml.DTDNotationDeclarationCollection : DTDCollectionBase {
public DTDNotationDeclaration Item
public void .ctor(DTDObjectModel root)
public DTDNotationDeclaration get_Item(string name)
public void Add(string name, DTDNotationDeclaration decl)
}
internal Mono.Xml.DTDObjectModel : object {
public int AllowedExternalEntitiesMax
private DTDAutomataFactory factory
private DTDElementAutomata rootAutomata
private DTDEmptyAutomata emptyAutomata
private DTDAnyAutomata anyAutomata
private DTDInvalidAutomata invalidAutomata
private DTDElementDeclarationCollection elementDecls
private DTDAttListDeclarationCollection attListDecls
private DTDParameterEntityDeclarationCollection peDecls
private DTDEntityDeclarationCollection entityDecls
private DTDNotationDeclarationCollection notationDecls
private ArrayList validationErrors
private XmlResolver resolver
private XmlNameTable nameTable
private Hashtable externalResources
private string baseURI
private string name
private string publicId
private string systemId
private string intSubset
private bool intSubsetHasPERef
private bool isStandalone
private int lineNumber
private int linePosition
public string BaseURI
public bool IsStandalone
public string Name
public XmlNameTable NameTable
public string PublicId
public string SystemId
public string InternalSubset
public bool InternalSubsetHasPEReference
public int LineNumber
public int LinePosition
internal XmlResolver Resolver
public XmlResolver XmlResolver
internal Hashtable ExternalResources
public DTDAutomataFactory Factory
public DTDElementDeclaration RootElement
public DTDElementDeclarationCollection ElementDecls
public DTDAttListDeclarationCollection AttListDecls
public DTDEntityDeclarationCollection EntityDecls
public DTDParameterEntityDeclarationCollection PEDecls
public DTDNotationDeclarationCollection NotationDecls
public DTDAutomata RootAutomata
public DTDEmptyAutomata Empty
public DTDAnyAutomata Any
public DTDInvalidAutomata Invalid
public XmlSchemaException[] Errors
public void .ctor(XmlNameTable nameTable)
public string get_BaseURI()
public void set_BaseURI(string value)
public bool get_IsStandalone()
public void set_IsStandalone(bool value)
public string get_Name()
public void set_Name(string value)
public XmlNameTable get_NameTable()
public string get_PublicId()
public void set_PublicId(string value)
public string get_SystemId()
public void set_SystemId(string value)
public string get_InternalSubset()
public void set_InternalSubset(string value)
public bool get_InternalSubsetHasPEReference()
public void set_InternalSubsetHasPEReference(bool value)
public int get_LineNumber()
public void set_LineNumber(int value)
public int get_LinePosition()
public void set_LinePosition(int value)
internal XmlSchema CreateXsdSchema()
public string ResolveEntity(string name)
internal XmlResolver get_Resolver()
public void set_XmlResolver(XmlResolver value)
internal Hashtable get_ExternalResources()
public DTDAutomataFactory get_Factory()
public DTDElementDeclaration get_RootElement()
public DTDElementDeclarationCollection get_ElementDecls()
public DTDAttListDeclarationCollection get_AttListDecls()
public DTDEntityDeclarationCollection get_EntityDecls()
public DTDParameterEntityDeclarationCollection get_PEDecls()
public DTDNotationDeclarationCollection get_NotationDecls()
public DTDAutomata get_RootAutomata()
public DTDEmptyAutomata get_Empty()
public DTDAnyAutomata get_Any()
public DTDInvalidAutomata get_Invalid()
public XmlSchemaException[] get_Errors()
public void AddError(XmlSchemaException ex)
internal string GenerateEntityAttributeText(string entityName)
internal XmlTextReader GenerateEntityContentReader(string entityName, XmlParserContext context)
}
internal Mono.Xml.DTDOccurence : Enum {
public int value__
public DTDOccurence One
public DTDOccurence Optional
public DTDOccurence ZeroOrMore
public DTDOccurence OneOrMore
}
internal Mono.Xml.DTDOneOrMoreAutomata : DTDAutomata {
private DTDAutomata children
public DTDAutomata Children
public void .ctor(DTDObjectModel root, DTDAutomata children)
public DTDAutomata get_Children()
public DTDAutomata TryStartElement(string name)
public DTDAutomata TryEndElement()
}
internal Mono.Xml.DTDParameterEntityDeclaration : DTDEntityBase {
internal void .ctor(DTDObjectModel root)
}
internal Mono.Xml.DTDParameterEntityDeclarationCollection : object {
private Hashtable peDecls
private DTDObjectModel root
public DTDParameterEntityDeclaration Item
public ICollection Keys
public ICollection Values
public void .ctor(DTDObjectModel root)
public DTDParameterEntityDeclaration get_Item(string name)
public void Add(string name, DTDParameterEntityDeclaration decl)
public ICollection get_Keys()
public ICollection get_Values()
}
internal Mono.Xml.DTDSequenceAutomata : DTDAutomata {
private DTDAutomata left
private DTDAutomata right
private bool hasComputedEmptiable
private bool cachedEmptiable
public DTDAutomata Left
public DTDAutomata Right
public bool Emptiable
public void .ctor(DTDObjectModel root, DTDAutomata left, DTDAutomata right)
public DTDAutomata get_Left()
public DTDAutomata get_Right()
public DTDAutomata TryStartElement(string name)
public DTDAutomata TryEndElement()
public bool get_Emptiable()
}
internal Mono.Xml.DTDValidatingReader : XmlReader {
private EntityResolvingXmlReader reader
private XmlTextReader sourceTextReader
private XmlValidatingReader validatingReader
private DTDObjectModel dtd
private XmlResolver resolver
private string currentElement
private AttributeSlot[] attributes
private int attributeCount
private int currentAttribute
private bool consumedAttribute
private Stack elementStack
private Stack automataStack
private bool popScope
private bool isStandalone
private DTDAutomata currentAutomata
private DTDAutomata previousAutomata
private ArrayList idList
private ArrayList missingIDReferences
private XmlNamespaceManager nsmgr
private string currentTextValue
private string constructingTextValue
private bool shouldResetCurrentTextValue
private bool isSignificantWhitespace
private bool isWhitespace
private bool isText
private Stack attributeValueEntityStack
private StringBuilder valueBuilder
private Char[] whitespaceChars
private Dictionary`2<string, int> <>f__switch$map2A
internal EntityResolvingXmlReader Source
public DTDObjectModel DTD
public EntityHandling EntityHandling
public int AttributeCount
public string BaseURI
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public string Item
public string Item
public string Item
public int LineNumber
public int LinePosition
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public XmlParserContext ParserContext
public string Prefix
public char QuoteChar
public ReadState ReadState
public object SchemaType
public string Value
public string XmlLang
internal XmlResolver Resolver
public XmlResolver XmlResolver
public XmlSpace XmlSpace
public void .ctor(XmlReader reader)
internal void .ctor(XmlReader reader, XmlValidatingReader validatingReader)
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private bool System.Xml.IXmlLineInfo.HasLineInfo()
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string ns)
internal EntityResolvingXmlReader get_Source()
public DTDObjectModel get_DTD()
public EntityHandling get_EntityHandling()
public void set_EntityHandling(EntityHandling value)
public void Close()
private int GetAttributeIndex(string name)
private int GetAttributeIndex(string localName, string ns)
public string GetAttribute(int i)
public string GetAttribute(string name)
public string GetAttribute(string name, string ns)
public string LookupNamespace(string prefix)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
private bool ReadContent()
private bool ProcessContent()
private void FillAttributes()
private void ValidateText()
private void ValidateWhitespaceNode()
private void HandleError(string message, XmlSeverityType severity)
private void HandleError(XmlSchemaException ex, XmlSeverityType severity)
private void ValidateAttributes(DTDAttListDeclaration decl, bool validate)
private AttributeSlot GetAttributeSlot()
private void DtdValidateAttributes(DTDAttListDeclaration decl, bool validate)
private void ReadDoctype()
private void ProcessStartElement()
private void ProcessEndElement()
private void VerifyDeclaredAttributes(DTDAttListDeclaration decl)
public bool ReadAttributeValue()
public void ResolveEntity()
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanResolveEntity()
public int get_Depth()
public bool get_EOF()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string ns)
public int get_LineNumber()
public int get_LinePosition()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public XmlParserContext get_ParserContext()
public string get_Prefix()
public char get_QuoteChar()
public ReadState get_ReadState()
public object get_SchemaType()
private string FilterNormalization(string attrName, string rawValue)
public string get_Value()
public string get_XmlLang()
internal XmlResolver get_Resolver()
public void set_XmlResolver(XmlResolver value)
public XmlSpace get_XmlSpace()
}
internal Mono.Xml.EntityResolvingXmlReader : XmlReader {
private EntityResolvingXmlReader entity
private XmlReader source
private XmlParserContext context
private XmlResolver resolver
private EntityHandling entity_handling
private bool entity_inside_attr
private bool inside_attr
private bool do_resolve
private XmlParserContext Mono.Xml.IHasXmlParserContext.ParserContext
private XmlReader Current
public int AttributeCount
public string BaseURI
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
internal XmlParserContext ParserContext
public string Prefix
public char QuoteChar
public ReadState ReadState
public string Value
public string XmlLang
public XmlSpace XmlSpace
public EntityHandling EntityHandling
public int LineNumber
public int LinePosition
public XmlResolver XmlResolver
public void .ctor(XmlReader source)
private void .ctor(XmlReader entityContainer, bool inside_attr)
private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string ns)
private XmlReader get_Current()
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanResolveEntity()
public int get_Depth()
public bool get_EOF()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
internal XmlParserContext get_ParserContext()
public string get_Prefix()
public char get_QuoteChar()
public ReadState get_ReadState()
public string get_Value()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
private void CopyProperties(EntityResolvingXmlReader other)
public EntityHandling get_EntityHandling()
public void set_EntityHandling(EntityHandling value)
public int get_LineNumber()
public int get_LinePosition()
public void set_XmlResolver(XmlResolver value)
public void Close()
public string GetAttribute(int i)
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupNamespace(string prefix)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceName)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
public bool ReadAttributeValue()
public string ReadString()
public void ResolveEntity()
private void DoResolveEntity()
public void Skip()
public bool HasLineInfo()
}
internal Mono.Xml.IHasXmlParserContext {
public XmlParserContext ParserContext
public XmlParserContext get_ParserContext()
}
internal Mono.Xml.IHasXmlSchemaInfo {
public object SchemaType
public object get_SchemaType()
}
internal Mono.Xml.Schema.XdtAnyAtomicType : XsdAnySimpleType {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal Mono.Xml.Schema.XdtDayTimeDuration : XsdDuration {
public XmlTypeCode TypeCode
public Type ValueType
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XdtUntypedAtomic : XdtAnyAtomicType {
public XmlTypeCode TypeCode
public XmlTypeCode get_TypeCode()
}
internal Mono.Xml.Schema.XdtYearMonthDuration : XsdDuration {
public XmlTypeCode TypeCode
public Type ValueType
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XmlSchemaUri : Uri {
public string value
public void .ctor(string src)
private void .ctor(string src, bool formal)
private bool HasValidScheme(string src)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public bool op_Equality(XmlSchemaUri v1, XmlSchemaUri v2)
public bool op_Inequality(XmlSchemaUri v1, XmlSchemaUri v2)
}
internal Mono.Xml.Schema.XmlSchemaValidatingReader : XmlReader {
private XmlSchemaAttribute[] emptyAttributeArray
private XmlReader reader
private XmlSchemaValidationFlags options
private XmlSchemaValidator v
private XmlValueGetter getter
private XmlSchemaInfo xsinfo
private IXmlLineInfo readerLineInfo
private ValidationType validationType
private IXmlNamespaceResolver nsResolver
private XmlSchemaAttribute[] defaultAttributes
private int currentDefaultAttribute
private ArrayList defaultAttributesCache
private bool defaultAttributeConsumed
private XmlSchemaType currentAttrType
private bool validationDone
private XmlSchemaElement element
private Dictionary`2<string, int> <>f__switch$map0
private Dictionary`2<string, int> <>f__switch$map1
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
public XmlSchemaType ElementSchemaType
public int LineNumber
public int LinePosition
public XmlSchemaType SchemaType
public ValidationType ValidationType
public int AttributeCount
public string BaseURI
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public string Item
public string Item
public string Item
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public XmlParserContext ParserContext
public string Prefix
public char QuoteChar
public ReadState ReadState
public IXmlSchemaInfo SchemaInfo
public string Value
public string XmlLang
public XmlSpace XmlSpace
public bool IsNil
public XmlSchemaSimpleType MemberType
public XmlSchemaAttribute SchemaAttribute
public XmlSchemaElement SchemaElement
public XmlSchemaValidity Validity
public void .ctor(XmlReader reader, XmlReaderSettings settings)
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
private bool System.Xml.IXmlLineInfo.HasLineInfo()
public XmlSchemaType get_ElementSchemaType()
private void ResetStateOnRead()
public int get_LineNumber()
public int get_LinePosition()
public XmlSchemaType get_SchemaType()
public ValidationType get_ValidationType()
public void set_ValidationType(ValidationType value)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupPrefix(string ns)
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanResolveEntity()
public int get_Depth()
public bool get_EOF()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string localName, string ns)
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public XmlParserContext get_ParserContext()
public string get_Prefix()
public char get_QuoteChar()
public ReadState get_ReadState()
public IXmlSchemaInfo get_SchemaInfo()
public string get_Value()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public void Close()
public string GetAttribute(int i)
public string GetAttribute(string name)
private XmlQualifiedName SplitQName(string name)
public string GetAttribute(string localName, string ns)
private string GetDefaultAttribute(string localName, string ns)
private int FindDefaultAttribute(string localName, string ns)
public string LookupNamespace(string prefix)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string ns)
private bool MoveToDefaultAttribute(string localName, string ns)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
public bool ReadAttributeValue()
public void ResolveEntity()
public bool get_IsNil()
public XmlSchemaSimpleType get_MemberType()
public XmlSchemaAttribute get_SchemaAttribute()
public XmlSchemaElement get_SchemaElement()
public XmlSchemaValidity get_Validity()
}
internal Mono.Xml.Schema.XsdAllValidationState : XsdValidationState {
private XmlSchemaAll all
private ArrayList consumed
public void .ctor(XmlSchemaAll all, XsdParticleStateManager manager)
public void GetExpectedParticles(ArrayList al)
public XsdValidationState EvaluateStartElement(string localName, string ns)
public bool EvaluateEndElement()
internal bool EvaluateIsEmptiable()
}
internal Mono.Xml.Schema.XsdAnySimpleType : XmlSchemaDatatype {
private XsdAnySimpleType instance
private Char[] whitespaceArray
internal Facet booleanAllowedFacets
internal Facet decimalAllowedFacets
internal Facet durationAllowedFacets
internal Facet stringAllowedFacets
public XsdAnySimpleType Instance
public XmlTypeCode TypeCode
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
public Type ValueType
public XmlTokenizedType TokenizedType
internal Facet AllowedFacets
public XsdAnySimpleType get_Instance()
public XmlTypeCode get_TypeCode()
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
public Type get_ValueType()
public XmlTokenizedType get_TokenizedType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal String[] ParseListValue(string s, XmlNameTable nameTable)
internal bool AllowsFacet(XmlSchemaFacet xsf)
internal XsdOrdering Compare(object x, object y)
internal int Length(string s)
internal Facet get_AllowedFacets()
}
internal Mono.Xml.Schema.XsdAnyURI : XsdString {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdAnyValidationState : XsdValidationState {
private XmlSchemaAny any
public void .ctor(XmlSchemaAny any, XsdParticleStateManager manager)
public void GetExpectedParticles(ArrayList al)
public XsdValidationState EvaluateStartElement(string name, string ns)
private bool MatchesNamespace(string ns)
public bool EvaluateEndElement()
internal bool EvaluateIsEmptiable()
}
internal Mono.Xml.Schema.XsdAppendedValidationState : XsdValidationState {
private XsdValidationState head
private XsdValidationState rest
public void .ctor(XsdParticleStateManager manager, XsdValidationState head, XsdValidationState rest)
public void GetExpectedParticles(ArrayList al)
public XsdValidationState EvaluateStartElement(string name, string ns)
public bool EvaluateEndElement()
internal bool EvaluateIsEmptiable()
}
internal Mono.Xml.Schema.XsdBase64Binary : XsdString {
private string ALPHABET
private Byte[] decodeTable
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal int Length(string s)
protected bool isPad(char octect)
protected bool isData(char octect)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdBoolean : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
internal Facet get_AllowedFacets()
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XsdByte : XsdShort {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdChoiceValidationState : XsdValidationState {
private XmlSchemaChoice choice
private bool emptiable
private bool emptiableComputed
public void .ctor(XmlSchemaChoice choice, XsdParticleStateManager manager)
public void GetExpectedParticles(ArrayList al)
public XsdValidationState EvaluateStartElement(string localName, string ns)
public bool EvaluateEndElement()
internal bool EvaluateIsEmptiable()
}
internal Mono.Xml.Schema.XsdDate : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XsdOrderedFacet Ordered
internal Facet get_AllowedFacets()
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XsdDateTime : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
internal Facet get_AllowedFacets()
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XsdDecimal : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
internal Facet get_AllowedFacets()
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XsdDouble : XsdAnySimpleType {
internal Facet AllowedFacets
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
public XmlTypeCode TypeCode
public Type ValueType
internal Facet get_AllowedFacets()
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdDuration : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
internal Facet get_AllowedFacets()
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XsdElementValidationState : XsdValidationState {
private XmlSchemaElement element
private string Name
private string NS
public void .ctor(XmlSchemaElement element, XsdParticleStateManager manager)
private string get_Name()
private string get_NS()
public void GetExpectedParticles(ArrayList al)
public XsdValidationState EvaluateStartElement(string name, string ns)
private XsdValidationState CheckOccurence(XmlSchemaElement maybeSubstituted)
public bool EvaluateEndElement()
internal bool EvaluateIsEmptiable()
}
internal Mono.Xml.Schema.XsdEmptyValidationState : XsdValidationState {
public void .ctor(XsdParticleStateManager manager)
public void GetExpectedParticles(ArrayList al)
public XsdValidationState EvaluateStartElement(string name, string ns)
public bool EvaluateEndElement()
internal bool EvaluateIsEmptiable()
}
internal Mono.Xml.Schema.XsdEntities : XsdName {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
private String[] GetValidatedArray(string value, XmlNameTable nt)
}
internal Mono.Xml.Schema.XsdEntity : XsdName {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
}
internal Mono.Xml.Schema.XsdFloat : XsdAnySimpleType {
public XmlTypeCode TypeCode
internal Facet AllowedFacets
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
public Type ValueType
public XmlTypeCode get_TypeCode()
internal Facet get_AllowedFacets()
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdGDay : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTypeCode TypeCode
public Type ValueType
internal Facet get_AllowedFacets()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdGMonth : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTypeCode TypeCode
public Type ValueType
internal Facet get_AllowedFacets()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdGMonthDay : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTypeCode TypeCode
public Type ValueType
internal Facet get_AllowedFacets()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdGYear : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTypeCode TypeCode
public Type ValueType
internal Facet get_AllowedFacets()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdGYearMonth : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTypeCode TypeCode
public Type ValueType
internal Facet get_AllowedFacets()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdHexBinary : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTypeCode TypeCode
public XmlTokenizedType TokenizedType
public Type ValueType
internal Facet get_AllowedFacets()
public XmlTypeCode get_TypeCode()
public XmlTokenizedType get_TokenizedType()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal int Length(string s)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdID : XsdName {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdIdentityField : object {
private XsdIdentityPath[] fieldPaths
private int index
public XsdIdentityPath[] Paths
public int Index
public void .ctor(XmlSchemaXPath field, int index)
public XsdIdentityPath[] get_Paths()
public int get_Index()
}
internal Mono.Xml.Schema.XsdIdentityPath : object {
public XsdIdentityStep[] OrderedSteps
public bool Descendants
public bool IsAttribute
public bool get_IsAttribute()
}
internal Mono.Xml.Schema.XsdIdentitySelector : object {
private XsdIdentityPath[] selectorPaths
private ArrayList fields
private XsdIdentityField[] cachedFields
public XsdIdentityPath[] Paths
public XsdIdentityField[] Fields
public void .ctor(XmlSchemaXPath selector)
public XsdIdentityPath[] get_Paths()
public void AddField(XsdIdentityField field)
public XsdIdentityField[] get_Fields()
}
internal Mono.Xml.Schema.XsdIdentityStep : object {
public bool IsCurrent
public bool IsAttribute
public bool IsAnyName
public string NsName
public string Name
public string Namespace
}
internal Mono.Xml.Schema.XsdIDManager : object {
private Hashtable idList
private ArrayList missingIDReferences
private string thisElementId
private ArrayList MissingIDReferences
private ArrayList get_MissingIDReferences()
public void OnStartElement()
public string AssessEachAttributeIdentityConstraint(XmlSchemaDatatype dt, object parsedValue, string elementName)
public bool HasMissingIDReferences()
public string GetMissingIDString()
}
internal Mono.Xml.Schema.XsdIDRef : XsdName {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdIDRefs : XsdName {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
private String[] GetValidatedArray(string value, XmlNameTable nt)
}
internal Mono.Xml.Schema.XsdInt : XsdLong {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdInteger : XsdDecimal {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdInvalidValidationState : XsdValidationState {
internal void .ctor(XsdParticleStateManager manager)
public void GetExpectedParticles(ArrayList al)
public XsdValidationState EvaluateStartElement(string name, string ns)
public bool EvaluateEndElement()
internal bool EvaluateIsEmptiable()
}
internal Mono.Xml.Schema.XsdKeyEntry : object {
public int StartDepth
public int SelectorLineNumber
public int SelectorLinePosition
public bool SelectorHasLineInfo
public XsdKeyEntryFieldCollection KeyFields
public bool KeyRefFound
public XsdKeyTable OwnerSequence
private bool keyFound
public bool KeyFound
public void .ctor(XsdKeyTable keyseq, int depth, IXmlLineInfo li)
public bool get_KeyFound()
private void Init(XsdKeyTable keyseq, int depth, IXmlLineInfo li)
public bool CompareIdentity(XsdKeyEntry other)
public void ProcessMatch(bool isAttribute, ArrayList qnameStack, object sender, XmlNameTable nameTable, string sourceUri, object schemaType, IXmlNamespaceResolver nsResolver, IXmlLineInfo li, int depth, string attrName, string attrNS, object attrValue, bool isXsiNil, ArrayList currentKeyFieldConsumers)
}
internal Mono.Xml.Schema.XsdKeyEntryCollection : CollectionBase {
public XsdKeyEntry Item
public void Add(XsdKeyEntry entry)
public XsdKeyEntry get_Item(int i)
public void set_Item(int i, XsdKeyEntry value)
}
internal Mono.Xml.Schema.XsdKeyEntryField : object {
private XsdKeyEntry entry
private XsdIdentityField field
public bool FieldFound
public int FieldLineNumber
public int FieldLinePosition
public bool FieldHasLineInfo
public XsdAnySimpleType FieldType
public object Identity
public bool IsXsiNil
public int FieldFoundDepth
public XsdIdentityPath FieldFoundPath
public bool Consuming
public bool Consumed
public XsdIdentityField Field
public void .ctor(XsdKeyEntry entry, XsdIdentityField field)
public XsdIdentityField get_Field()
public bool SetIdentityField(object identity, bool isXsiNil, XsdAnySimpleType type, int depth, IXmlLineInfo li)
internal XsdIdentityPath Matches(bool matchesAttr, object sender, XmlNameTable nameTable, ArrayList qnameStack, string sourceUri, object schemaType, IXmlNamespaceResolver nsResolver, IXmlLineInfo lineInfo, int depth, string attrName, string attrNS, object attrValue)
private void FillAttributeFieldValue(object sender, XmlNameTable nameTable, string sourceUri, object schemaType, IXmlNamespaceResolver nsResolver, object identity, IXmlLineInfo lineInfo, int depth)
}
internal Mono.Xml.Schema.XsdKeyEntryFieldCollection : CollectionBase {
public XsdKeyEntryField Item
public XsdKeyEntryField get_Item(int i)
public void set_Item(int i, XsdKeyEntryField value)
public int Add(XsdKeyEntryField value)
}
internal Mono.Xml.Schema.XsdKeyTable : object {
public bool alwaysTrue
private XsdIdentitySelector selector
private XmlSchemaIdentityConstraint source
private XmlQualifiedName qname
private XmlQualifiedName refKeyName
public XsdKeyEntryCollection Entries
public XsdKeyEntryCollection FinishedEntries
public int StartDepth
public XsdKeyTable ReferencedKey
public XmlQualifiedName QualifiedName
public XmlQualifiedName RefKeyName
public XmlSchemaIdentityConstraint SourceSchemaIdentity
public XsdIdentitySelector Selector
public void .ctor(XmlSchemaIdentityConstraint source)
public XmlQualifiedName get_QualifiedName()
public XmlQualifiedName get_RefKeyName()
public XmlSchemaIdentityConstraint get_SourceSchemaIdentity()
public XsdIdentitySelector get_Selector()
public void Reset(XmlSchemaIdentityConstraint source)
public XsdIdentityPath SelectorMatches(ArrayList qnameStack, int depth)
}
internal Mono.Xml.Schema.XsdLanguage : XsdToken {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
}
internal Mono.Xml.Schema.XsdLong : XsdInteger {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdName : XsdToken {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdNCName : XsdName {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdNegativeInteger : XsdNonPositiveInteger {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdNMToken : XsdToken {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdNMTokens : XsdNMToken {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
private String[] GetValidatedArray(string value, XmlNameTable nt)
}
internal Mono.Xml.Schema.XsdNonNegativeInteger : XsdInteger {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdNonPositiveInteger : XsdInteger {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdNormalizedString : XsdString {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
}
internal Mono.Xml.Schema.XsdNotation : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
internal Facet get_AllowedFacets()
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XsdOrderedFacet : Enum {
public int value__
public XsdOrderedFacet False
public XsdOrderedFacet Partial
public XsdOrderedFacet Total
}
internal Mono.Xml.Schema.XsdOrdering : Enum {
public int value__
public XsdOrdering LessThan
public XsdOrdering Equal
public XsdOrdering GreaterThan
public XsdOrdering Indeterminate
}
internal Mono.Xml.Schema.XsdParticleStateManager : object {
private Hashtable table
private XmlSchemaContentProcessing processContents
public XmlSchemaElement CurrentElement
public Stack ContextStack
public XsdValidationContext Context
private Dictionary`2<string, int> <>f__switch$map2
public XmlSchemaContentProcessing ProcessContents
public XmlSchemaContentProcessing get_ProcessContents()
public void PushContext()
public void PopContext()
internal void SetProcessContents(XmlSchemaContentProcessing value)
public XsdValidationState Get(XmlSchemaParticle xsobj)
public XsdValidationState Create(XmlSchemaObject xsobj)
internal XsdValidationState MakeSequence(XsdValidationState head, XsdValidationState rest)
private XsdElementValidationState AddElement(XmlSchemaElement element)
private XsdSequenceValidationState AddSequence(XmlSchemaSequence sequence)
private XsdChoiceValidationState AddChoice(XmlSchemaChoice choice)
private XsdAllValidationState AddAll(XmlSchemaAll all)
private XsdAnyValidationState AddAny(XmlSchemaAny any)
private XsdEmptyValidationState AddEmpty()
}
internal Mono.Xml.Schema.XsdPositiveInteger : XsdNonNegativeInteger {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdQName : XsdName {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
}
internal Mono.Xml.Schema.XsdSequenceValidationState : XsdValidationState {
private XmlSchemaSequence seq
private int current
private XsdValidationState currentAutomata
private bool emptiable
public void .ctor(XmlSchemaSequence sequence, XsdParticleStateManager manager)
public void GetExpectedParticles(ArrayList al)
public XsdValidationState EvaluateStartElement(string name, string ns)
public bool EvaluateEndElement()
internal bool EvaluateIsEmptiable()
}
internal Mono.Xml.Schema.XsdShort : XsdInt {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdString : XsdAnySimpleType {
internal Facet AllowedFacets
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public bool Bounded
public bool Finite
public bool Numeric
public XsdOrderedFacet Ordered
internal Facet get_AllowedFacets()
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public bool get_Bounded()
public bool get_Finite()
public bool get_Numeric()
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XsdTime : XsdAnySimpleType {
private String[] timeFormats
internal Facet AllowedFacets
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XsdOrderedFacet Ordered
internal Facet get_AllowedFacets()
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
public XsdOrderedFacet get_Ordered()
}
internal Mono.Xml.Schema.XsdToken : XsdNormalizedString {
public XmlTokenizedType TokenizedType
public XmlTypeCode TypeCode
public Type ValueType
public XmlTokenizedType get_TokenizedType()
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
}
internal Mono.Xml.Schema.XsdUnsignedByte : XsdUnsignedShort {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdUnsignedInt : XsdUnsignedLong {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdUnsignedLong : XsdNonNegativeInteger {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdUnsignedShort : XsdUnsignedInt {
public XmlTypeCode TypeCode
public Type ValueType
public XmlTypeCode get_TypeCode()
public Type get_ValueType()
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal XsdOrdering Compare(object x, object y)
}
internal Mono.Xml.Schema.XsdValidatingReader : XmlReader {
private XmlSchemaAttribute[] emptyAttributeArray
private XmlReader reader
private XmlResolver resolver
private IHasXmlSchemaInfo sourceReaderSchemaInfo
private IXmlLineInfo readerLineInfo
private ValidationType validationType
private XmlSchemaSet schemas
private bool namespaces
private bool validationStarted
private bool checkIdentity
private XsdIDManager idManager
private bool checkKeyConstraints
private ArrayList keyTables
private ArrayList currentKeyFieldConsumers
private ArrayList tmpKeyrefPool
private ArrayList elementQNameStack
private XsdParticleStateManager state
private int skipValidationDepth
private int xsiNilDepth
private StringBuilder storedCharacters
private bool shouldValidateCharacters
private XmlSchemaAttribute[] defaultAttributes
private int currentDefaultAttribute
private ArrayList defaultAttributesCache
private bool defaultAttributeConsumed
private object currentAttrType
public ValidationEventHandler ValidationEventHandler
private Dictionary`2<string, int> <>f__switch$map3
private Dictionary`2<string, int> <>f__switch$map4
private Dictionary`2<string, int> <>f__switch$map5
private XsdValidationContext Context
internal ArrayList CurrentKeyFieldConsumers
public int XsiNilDepth
public bool Namespaces
public XmlResolver XmlResolver
public XmlSchemaSet Schemas
public object SchemaType
private object SourceReaderSchemaType
public ValidationType ValidationType
public int AttributeCount
public string BaseURI
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public string Item
public string Item
public string Item
public int LineNumber
public int LinePosition
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public XmlParserContext ParserContext
internal XmlNamespaceManager NamespaceManager
public string Prefix
public char QuoteChar
public ReadState ReadState
public string Value
public string XmlLang
public XmlSpace XmlSpace
public void .ctor(XmlReader reader)
private XsdValidationContext get_Context()
internal ArrayList get_CurrentKeyFieldConsumers()
public int get_XsiNilDepth()
public bool get_Namespaces()
public void set_Namespaces(bool value)
public void set_XmlResolver(XmlResolver value)
public XmlSchemaSet get_Schemas()
public void set_Schemas(XmlSchemaSet value)
public object get_SchemaType()
private object get_SourceReaderSchemaType()
public ValidationType get_ValidationType()
public void set_ValidationType(ValidationType value)
public object ReadTypedValue()
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanResolveEntity()
public int get_Depth()
public bool get_EOF()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string localName, string ns)
public int get_LineNumber()
public int get_LinePosition()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public XmlParserContext get_ParserContext()
internal XmlNamespaceManager get_NamespaceManager()
public string get_Prefix()
public char get_QuoteChar()
public ReadState get_ReadState()
public string get_Value()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
private void HandleError(string error)
private void HandleError(string error, Exception innerException)
private void HandleError(string error, Exception innerException, bool isWarning)
private void HandleError(XmlSchemaValidationException schemaException)
private void HandleError(XmlSchemaValidationException schemaException, bool isWarning)
private XmlSchemaElement FindElement(string name, string ns)
private XmlSchemaType FindType(XmlQualifiedName qname)
private void ValidateStartElementParticle()
private void ValidateEndElementParticle()
private void ValidateCharacters()
private void ValidateEndSimpleContent()
private void ValidateEndSimpleContentCore()
private void AssessStringValid(XmlSchemaSimpleType st, XmlSchemaDatatype dt, string value)
private void ValidateRestrictedSimpleTypeValue(XmlSchemaSimpleType st, XmlSchemaDatatype& dt, string normalized)
private object GetXsiType(string name)
private void AssessLocalTypeDerivationOK(object xsiType, object baseType, XmlSchemaDerivationMethod flag)
private void AssessStartElementSchemaValidity()
private void AssessElementLocallyValidElement(string xsiNilValue)
private void AssessStartElementLocallyValidType(object schemaType)
private void AssessElementLocallyValidComplexType(XmlSchemaComplexType cType)
private void AssessAttributeLocallyValid(XmlSchemaAttribute attr)
private void AssessAttributeLocallyValidUse(XmlSchemaAttribute attr)
private void AssessEndElementSchemaValidity()
private void ValidateEndElementKeyConstraints()
private void ValidateKeySelectors()
private void ValidateKeyFields()
private void ProcessKeyEntry(XsdKeyEntry entry)
private XsdKeyTable CreateNewKeyTable(XmlSchemaIdentityConstraint ident)
private void ValidateSimpleContentIdentity(XmlSchemaDatatype dt, string value)
private void EndIdentityValidation(XsdKeyTable seq)
private void EndKeyrefValidation(XsdKeyTable seq, XmlSchemaIdentityConstraint targetIdent)
public void Close()
public string GetAttribute(int i)
public string GetAttribute(string name)
private XmlQualifiedName SplitQName(string name)
public string GetAttribute(string localName, string ns)
private string GetDefaultAttribute(string localName, string ns)
private int FindDefaultAttribute(string localName, string ns)
public bool HasLineInfo()
public string LookupNamespace(string prefix)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string ns)
private bool MoveToDefaultAttribute(string localName, string ns)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
private XmlSchema ReadExternalSchema(string uri)
private void ExamineAdditionalSchema()
public bool Read()
public bool ReadAttributeValue()
public string ReadString()
public void ResolveEntity()
}
internal Mono.Xml.Schema.XsdValidationContext : object {
private object xsi_type
internal XsdValidationState State
private Stack element_stack
public object XsiType
public XmlSchemaElement Element
public object ActualType
public XmlSchemaType ActualSchemaType
public bool IsInvalid
public object get_XsiType()
public void set_XsiType(object value)
public XmlSchemaElement get_Element()
public void PushCurrentElement(XmlSchemaElement element)
public void PopCurrentElement()
public object get_ActualType()
public XmlSchemaType get_ActualSchemaType()
public bool get_IsInvalid()
public object Clone()
public void EvaluateStartElement(string localName, string ns)
public bool EvaluateEndElement()
}
internal Mono.Xml.Schema.XsdValidationState : object {
private XsdInvalidValidationState invalid
private int occured
private XsdParticleStateManager manager
public XsdInvalidValidationState Invalid
public XsdParticleStateManager Manager
public int Occured
internal int OccuredInternal
public void .ctor(XsdParticleStateManager manager)
public XsdInvalidValidationState get_Invalid()
public XsdValidationState EvaluateStartElement(string localName, string ns)
public bool EvaluateEndElement()
internal bool EvaluateIsEmptiable()
public void GetExpectedParticles(ArrayList al)
public XsdParticleStateManager get_Manager()
public int get_Occured()
internal int get_OccuredInternal()
internal void set_OccuredInternal(int value)
}
internal Mono.Xml.Schema.XsdWhitespaceFacet : Enum {
public int value__
public XsdWhitespaceFacet Preserve
public XsdWhitespaceFacet Replace
public XsdWhitespaceFacet Collapse
}
internal Mono.Xml.Schema.XsdWildcard : object {
private XmlSchemaObject xsobj
public XmlSchemaContentProcessing ResolvedProcessing
public string TargetNamespace
public bool SkipCompile
public bool HasValueAny
public bool HasValueLocal
public bool HasValueOther
public bool HasValueTargetNamespace
public StringCollection ResolvedNamespaces
private Dictionary`2<string, int> <>f__switch$map6
public void .ctor(XmlSchemaObject wildcard)
private void Reset()
public void Compile(string nss, ValidationEventHandler h, XmlSchema schema)
public bool ExamineAttributeWildcardIntersection(XmlSchemaAny other, ValidationEventHandler h, XmlSchema schema)
public bool ValidateWildcardAllowsNamespaceName(string ns, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal void ValidateWildcardSubset(XsdWildcard other, ValidationEventHandler h, XmlSchema schema)
internal bool ValidateWildcardSubset(XsdWildcard other, ValidationEventHandler h, XmlSchema schema, bool raiseError)
}
internal Mono.Xml.SubtreeXmlReader : XmlReader {
private int startDepth
private bool eof
private bool initial
private bool read
private XmlReader Reader
private IXmlLineInfo li
private IXmlNamespaceResolver nsResolver
public int AttributeCount
public bool CanReadBinaryContent
public bool CanReadValueChunk
public int Depth
public string BaseURI
public bool EOF
public bool IsEmptyElement
public int LineNumber
public int LinePosition
public bool HasValue
public string LocalName
public string Name
public XmlNameTable NameTable
public string NamespaceURI
public XmlNodeType NodeType
public string Prefix
public ReadState ReadState
public IXmlSchemaInfo SchemaInfo
public XmlReaderSettings Settings
public string Value
public void .ctor(XmlReader reader)
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string ns)
public int get_AttributeCount()
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public int get_Depth()
public string get_BaseURI()
public bool get_EOF()
public bool get_IsEmptyElement()
public int get_LineNumber()
public int get_LinePosition()
public bool get_HasValue()
public string get_LocalName()
public string get_Name()
public XmlNameTable get_NameTable()
public string get_NamespaceURI()
public XmlNodeType get_NodeType()
public string get_Prefix()
public ReadState get_ReadState()
public IXmlSchemaInfo get_SchemaInfo()
public XmlReaderSettings get_Settings()
public string get_Value()
public void Close()
public string GetAttribute(int i)
public string GetAttribute(string name)
public string GetAttribute(string local, string ns)
public bool HasLineInfo()
public string LookupNamespace(string prefix)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string local, string ns)
public bool MoveToElement()
public bool Read()
public bool ReadAttributeValue()
public void ResolveEntity()
}
internal Mono.Xml.XmlFilterReader : XmlReader {
private XmlReader reader
private XmlReaderSettings settings
private IXmlLineInfo lineInfo
public bool CanReadBinaryContent
public bool CanReadValueChunk
public XmlReader Reader
public int LineNumber
public int LinePosition
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public int Depth
public string Value
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public string XmlLang
public XmlSpace XmlSpace
public int AttributeCount
public string Item
public string Item
public string Item
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public IXmlSchemaInfo SchemaInfo
public XmlReaderSettings Settings
public void .ctor(XmlReader reader, XmlReaderSettings settings)
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public XmlReader get_Reader()
public int get_LineNumber()
public int get_LinePosition()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public int get_Depth()
public string get_Value()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public int get_AttributeCount()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string localName, string namespaceURI)
public bool get_EOF()
public ReadState get_ReadState()
public XmlNameTable get_NameTable()
public IXmlSchemaInfo get_SchemaInfo()
public XmlReaderSettings get_Settings()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public string GetAttribute(int i)
public bool HasLineInfo()
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public void Close()
public bool Read()
public string ReadString()
public string LookupNamespace(string prefix)
public void ResolveEntity()
public bool ReadAttributeValue()
}
internal Mono.Xml.XPath.DTMXPathAttributeNode : ValueType {
public int OwnerElement
public int NextAttribute
public string LocalName
public string NamespaceURI
public string Prefix
public string Value
public int LineNumber
public int LinePosition
}
internal Mono.Xml.XPath.DTMXPathAttributeNode2 : ValueType {
public int OwnerElement
public int NextAttribute
public int LocalName
public int NamespaceURI
public int Prefix
public int Value
public int LineNumber
public int LinePosition
}
internal Mono.Xml.XPath.DTMXPathDocument : object {
private XPathNavigator root
public void .ctor(XmlNameTable nameTable, DTMXPathLinkedNode[] nodes, DTMXPathAttributeNode[] attributes, DTMXPathNamespaceNode[] namespaces, Hashtable idTable)
public XPathNavigator CreateNavigator()
}
internal Mono.Xml.XPath.DTMXPathDocument2 : object {
private XPathNavigator root
internal XmlNameTable NameTable
internal DTMXPathLinkedNode2[] Nodes
internal DTMXPathAttributeNode2[] Attributes
internal DTMXPathNamespaceNode2[] Namespaces
internal String[] AtomicStringPool
internal String[] NonAtomicStringPool
internal Hashtable IdTable
public void .ctor(XmlNameTable nameTable, DTMXPathLinkedNode2[] nodes, DTMXPathAttributeNode2[] attributes, DTMXPathNamespaceNode2[] namespaces, String[] atomicStringPool, String[] nonAtomicStringPool, Hashtable idTable)
public XPathNavigator CreateNavigator()
}
internal Mono.Xml.XPath.DTMXPathDocumentBuilder : object {
private XmlReader xmlReader
private XmlValidatingReader validatingReader
private XmlSpace xmlSpace
private XmlNameTable nameTable
private IXmlLineInfo lineInfo
private int nodeCapacity
private int attributeCapacity
private int nsCapacity
private DTMXPathLinkedNode[] nodes
private DTMXPathAttributeNode[] attributes
private DTMXPathNamespaceNode[] namespaces
private Hashtable idTable
private int nodeIndex
private int attributeIndex
private int nsIndex
private bool hasAttributes
private bool hasLocalNs
private int attrIndexAtStart
private int nsIndexAtStart
private int lastNsInScope
private bool skipRead
private Int32[] parentStack
private int parentStackIndex
public void .ctor(string url)
public void .ctor(string url, XmlSpace space)
public void .ctor(string url, XmlSpace space, int defaultCapacity)
public void .ctor(XmlReader reader)
public void .ctor(XmlReader reader, XmlSpace space)
public void .ctor(XmlReader reader, XmlSpace space, int defaultCapacity)
private void Init(XmlReader reader, XmlSpace space, int defaultCapacity)
public DTMXPathDocument CreateDocument()
public void Compile()
public void Read()
private void ProcessElement(int parent, int previousSibling)
private void PrepareStartElement(int previousSibling)
private void WriteStartElement(int parent, int previousSibling)
private void CloseStartElement()
private void ProcessNamespace(string prefix, string ns)
private void ProcessAttribute(string prefix, string localName, string ns, string value)
private void SetNodeArrayLength(int size)
private void SetAttributeArrayLength(int size)
private void SetNsArrayLength(int size)
public void AddNode(int parent, int firstAttribute, int previousSibling, XPathNodeType nodeType, string baseUri, bool isEmptyElement, string localName, string ns, string prefix, string value, string xmlLang, int namespaceNode, int lineNumber, int linePosition)
public void AddAttribute(int ownerElement, string localName, string ns, string prefix, string value, int lineNumber, int linePosition)
public void AddNsNode(int declaredElement, string name, string ns, int nextNs)
}
internal Mono.Xml.XPath.DTMXPathDocumentBuilder2 : object {
private XmlReader xmlReader
private XmlValidatingReader validatingReader
private XmlSpace xmlSpace
private XmlNameTable nameTable
private IXmlLineInfo lineInfo
private int nodeCapacity
private int attributeCapacity
private int nsCapacity
private DTMXPathLinkedNode2[] nodes
private DTMXPathAttributeNode2[] attributes
private DTMXPathNamespaceNode2[] namespaces
private String[] atomicStringPool
private int atomicIndex
private String[] nonAtomicStringPool
private int nonAtomicIndex
private Hashtable idTable
private int nodeIndex
private int attributeIndex
private int nsIndex
private bool hasAttributes
private bool hasLocalNs
private int attrIndexAtStart
private int nsIndexAtStart
private int lastNsInScope
private bool skipRead
private Int32[] parentStack
private int parentStackIndex
public void .ctor(string url)
public void .ctor(string url, XmlSpace space)
public void .ctor(string url, XmlSpace space, int defaultCapacity)
public void .ctor(XmlReader reader)
public void .ctor(XmlReader reader, XmlSpace space)
public void .ctor(XmlReader reader, XmlSpace space, int defaultCapacity)
private void Init(XmlReader reader, XmlSpace space, int defaultCapacity)
public DTMXPathDocument2 CreateDocument()
public void Compile()
public void Read()
private void ProcessElement(int parent, int previousSibling)
private void PrepareStartElement(int previousSibling)
private void AdjustLastNsInScope(int target)
private void WriteStartElement(int parent, int previousSibling)
private void CloseStartElement()
private void ProcessNamespace(string prefix, string ns)
private void ProcessAttribute(string prefix, string localName, string ns, string value)
private int AtomicIndex(string s)
private int NonAtomicIndex(string s)
private void SetNodeArrayLength(int size)
private void SetAttributeArrayLength(int size)
private void SetNsArrayLength(int size)
public void AddNode(int parent, int firstAttribute, int previousSibling, XPathNodeType nodeType, int baseUri, bool isEmptyElement, int localName, int ns, int prefix, int value, int xmlLang, int namespaceNode, int lineNumber, int linePosition)
public void AddAttribute(int ownerElement, int localName, int ns, int prefix, int value, int lineNumber, int linePosition)
public void AddNsNode(int declaredElement, int name, int ns, int nextNs)
}
internal Mono.Xml.XPath.DTMXPathDocumentWriter : XmlWriter {
private XmlNameTable nameTable
private int nodeCapacity
private int attributeCapacity
private int nsCapacity
private DTMXPathLinkedNode[] nodes
private DTMXPathAttributeNode[] attributes
private DTMXPathNamespaceNode[] namespaces
private Hashtable idTable
private int nodeIndex
private int attributeIndex
private int nsIndex
private Int32[] parentStack
private int parentStackIndex
private bool hasAttributes
private bool hasLocalNs
private int attrIndexAtStart
private int nsIndexAtStart
private int lastNsInScope
private int prevSibling
private WriteState state
private bool openNamespace
private bool isClosed
public string XmlLang
public XmlSpace XmlSpace
public WriteState WriteState
public void .ctor(XmlNameTable nt, int defaultCapacity)
public DTMXPathDocument CreateDocument()
public void Init()
private int GetParentIndex()
private int GetPreviousSiblingIndex()
private void UpdateTreeForAddition()
private void CloseStartElement()
private void SetNodeArrayLength(int size)
private void SetAttributeArrayLength(int size)
private void SetNsArrayLength(int size)
public void AddNode(int parent, int firstAttribute, int previousSibling, XPathNodeType nodeType, string baseUri, bool isEmptyElement, string localName, string ns, string prefix, string value, string xmlLang, int namespaceNode, int lineNumber, int linePosition)
public void AddAttribute(int ownerElement, string localName, string ns, string prefix, string value, int lineNumber, int linePosition)
public void AddNsNode(int declaredElement, string name, string ns, int nextNs)
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public WriteState get_WriteState()
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void WriteCData(string data)
private void AddTextNode(string data)
private void CheckTopLevelNode()
public void WriteComment(string data)
public void WriteProcessingInstruction(string name, string data)
public void WriteWhitespace(string data)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteStartElement(string prefix, string localName, string ns)
private void WriteStartElement(int parent, int previousSibling, string prefix, string localName, string ns)
private void PrepareStartElement(int previousSibling)
public void WriteEndElement()
public void WriteFullEndElement()
private void WriteEndElement(bool full)
public void WriteStartAttribute(string prefix, string localName, string ns)
private void ProcessNamespace(string prefix, string ns)
private void ProcessAttribute(string prefix, string localName, string ns, string value)
public void WriteEndAttribute()
public void WriteString(string text)
public void WriteRaw(string data)
public void WriteRaw(Char[] data, int start, int len)
public void WriteName(string name)
public void WriteNmToken(string name)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteCharEntity(char c)
public void WriteDocType(string name, string pub, string sys, string intSubset)
public void WriteEntityRef(string name)
public void WriteQualifiedName(string localName, string ns)
public void WriteSurrogateCharEntity(char high, char low)
private bool IsWhitespace(string data)
}
internal Mono.Xml.XPath.DTMXPathDocumentWriter2 : XmlWriter {
private XmlNameTable nameTable
private int nodeCapacity
private int attributeCapacity
private int nsCapacity
private DTMXPathLinkedNode2[] nodes
private DTMXPathAttributeNode2[] attributes
private DTMXPathNamespaceNode2[] namespaces
private String[] atomicStringPool
private int atomicIndex
private String[] nonAtomicStringPool
private int nonAtomicIndex
private Hashtable idTable
private int nodeIndex
private int attributeIndex
private int nsIndex
private Int32[] parentStack
private int parentStackIndex
private bool hasAttributes
private bool hasLocalNs
private int attrIndexAtStart
private int nsIndexAtStart
private int lastNsInScope
private int prevSibling
private WriteState state
private bool openNamespace
private bool isClosed
public string XmlLang
public XmlSpace XmlSpace
public WriteState WriteState
public void .ctor(XmlNameTable nt, int defaultCapacity)
public DTMXPathDocument2 CreateDocument()
public void Init()
private int GetParentIndex()
private int GetPreviousSiblingIndex()
private void UpdateTreeForAddition()
private void CloseStartElement()
private int AtomicIndex(string s)
private int NonAtomicIndex(string s)
private void SetNodeArrayLength(int size)
private void SetAttributeArrayLength(int size)
private void SetNsArrayLength(int size)
public void AddNode(int parent, int firstAttribute, int previousSibling, XPathNodeType nodeType, string baseUri, bool isEmptyElement, string localName, string ns, string prefix, string value, string xmlLang, int namespaceNode, int lineNumber, int linePosition)
public void AddAttribute(int ownerElement, string localName, string ns, string prefix, string value, int lineNumber, int linePosition)
public void AddNsNode(int declaredElement, string name, string ns, int nextNs)
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public WriteState get_WriteState()
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void WriteCData(string data)
private void AddTextNode(string data)
private void CheckTopLevelNode()
public void WriteComment(string data)
public void WriteProcessingInstruction(string name, string data)
public void WriteWhitespace(string data)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteStartElement(string prefix, string localName, string ns)
private void WriteStartElement(int parent, int previousSibling, string prefix, string localName, string ns)
private void PrepareStartElement(int previousSibling)
public void WriteEndElement()
public void WriteFullEndElement()
private void WriteEndElement(bool full)
public void WriteStartAttribute(string prefix, string localName, string ns)
private void ProcessNamespace(string prefix, string ns)
private void ProcessAttribute(string prefix, string localName, string ns, string value)
public void WriteEndAttribute()
public void WriteString(string text)
public void WriteRaw(string data)
public void WriteRaw(Char[] data, int start, int len)
public void WriteName(string name)
public void WriteNmToken(string name)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteCharEntity(char c)
public void WriteDocType(string name, string pub, string sys, string intSubset)
public void WriteEntityRef(string name)
public void WriteQualifiedName(string localName, string ns)
public void WriteSurrogateCharEntity(char high, char low)
private bool IsWhitespace(string data)
}
internal Mono.Xml.XPath.DTMXPathLinkedNode : ValueType {
public int FirstChild
public int Parent
public int PreviousSibling
public int NextSibling
public int FirstAttribute
public int FirstNamespace
public XPathNodeType NodeType
public string BaseURI
public bool IsEmptyElement
public string LocalName
public string NamespaceURI
public string Prefix
public string Value
public string XmlLang
public int LineNumber
public int LinePosition
}
internal Mono.Xml.XPath.DTMXPathLinkedNode2 : ValueType {
public int FirstChild
public int Parent
public int PreviousSibling
public int NextSibling
public int FirstAttribute
public int FirstNamespace
public XPathNodeType NodeType
public int BaseURI
public bool IsEmptyElement
public int LocalName
public int NamespaceURI
public int Prefix
public int Value
public int XmlLang
public int LineNumber
public int LinePosition
}
internal Mono.Xml.XPath.DTMXPathNamespaceNode : ValueType {
public int DeclaredElement
public int NextNamespace
public string Name
public string Namespace
}
internal Mono.Xml.XPath.DTMXPathNamespaceNode2 : ValueType {
public int DeclaredElement
public int NextNamespace
public int Name
public int Namespace
}
internal Mono.Xml.XPath.DTMXPathNavigator : XPathNavigator {
private XmlNameTable nameTable
private DTMXPathDocument document
private DTMXPathLinkedNode[] nodes
private DTMXPathAttributeNode[] attributes
private DTMXPathNamespaceNode[] namespaces
private Hashtable idTable
private bool currentIsNode
private bool currentIsAttr
private int currentNode
private int currentAttr
private int currentNs
private StringBuilder valueBuilder
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
public string BaseURI
public bool HasAttributes
public bool HasChildren
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XPathNodeType NodeType
public string Prefix
public string Value
public string XmlLang
public void .ctor(DTMXPathDocument document, XmlNameTable nameTable, DTMXPathLinkedNode[] nodes, DTMXPathAttributeNode[] attributes, DTMXPathNamespaceNode[] namespaces, Hashtable idTable)
public void .ctor(DTMXPathNavigator org)
internal void .ctor(XmlNameTable nt)
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
private bool System.Xml.IXmlLineInfo.HasLineInfo()
public string get_BaseURI()
public bool get_HasAttributes()
public bool get_HasChildren()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XPathNodeType get_NodeType()
public string get_Prefix()
public string get_Value()
public string get_XmlLang()
public XPathNavigator Clone()
public XmlNodeOrder ComparePosition(XPathNavigator nav)
private int findAttribute(string localName, string namespaceURI)
public string GetAttribute(string localName, string namespaceURI)
public string GetNamespace(string name)
public bool IsDescendant(XPathNavigator nav)
public bool IsSamePosition(XPathNavigator other)
public bool MoveTo(XPathNavigator other)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirst()
public bool MoveToFirstAttribute()
public bool MoveToFirstChild()
private bool moveToSpecifiedNamespace(int cur, XPathNamespaceScope namespaceScope)
public bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToId(string id)
private void moveToNamespace(int nsNode)
public bool MoveToNamespace(string name)
public bool MoveToNext()
public bool MoveToNextAttribute()
public bool MoveToNextNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToParent()
public bool MoveToPrevious()
public void MoveToRoot()
}
internal Mono.Xml.XPath.DTMXPathNavigator2 : XPathNavigator {
private DTMXPathDocument2 document
private bool currentIsNode
private bool currentIsAttr
private int currentNode
private int currentAttr
private int currentNs
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
private XmlNameTable nameTable
private DTMXPathLinkedNode2[] nodes
private DTMXPathAttributeNode2[] attributes
private DTMXPathNamespaceNode2[] namespaces
private String[] atomicStringPool
private String[] nonAtomicStringPool
private Hashtable idTable
public string BaseURI
public bool HasAttributes
public bool HasChildren
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XPathNodeType NodeType
public string Prefix
public string Value
public string XmlLang
public void .ctor(DTMXPathDocument2 document)
public void .ctor(DTMXPathNavigator2 org)
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
private bool System.Xml.IXmlLineInfo.HasLineInfo()
private XmlNameTable get_nameTable()
private DTMXPathLinkedNode2[] get_nodes()
private DTMXPathAttributeNode2[] get_attributes()
private DTMXPathNamespaceNode2[] get_namespaces()
private String[] get_atomicStringPool()
private String[] get_nonAtomicStringPool()
private Hashtable get_idTable()
public string get_BaseURI()
public bool get_HasAttributes()
public bool get_HasChildren()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XPathNodeType get_NodeType()
public string get_Prefix()
public string get_Value()
private void BuildValue(int iter, StringBuilder& valueBuilder)
public string get_XmlLang()
public XPathNavigator Clone()
public XmlNodeOrder ComparePosition(XPathNavigator nav)
private int findAttribute(string localName, string namespaceURI)
public string GetAttribute(string localName, string namespaceURI)
public string GetNamespace(string name)
public bool IsDescendant(XPathNavigator nav)
public bool IsSamePosition(XPathNavigator other)
public bool MoveTo(XPathNavigator other)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirst()
public bool MoveToFirstAttribute()
public bool MoveToFirstChild()
private bool moveToSpecifiedNamespace(int cur, XPathNamespaceScope namespaceScope)
public bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToId(string id)
private void moveToNamespace(int nsNode)
public bool MoveToNamespace(string name)
public bool MoveToNext()
public bool MoveToNextAttribute()
public bool MoveToNextNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToParent()
public bool MoveToPrevious()
public void MoveToRoot()
}
internal Mono.Xml.XPath.IdPattern : LocationPathPattern {
private String[] ids
public XPathNodeType EvaluatedNodeType
public double DefaultPriority
public void .ctor(string arg0)
public XPathNodeType get_EvaluatedNodeType()
public bool Matches(XPathNavigator node, XsltContext ctx)
public double get_DefaultPriority()
}
internal Mono.Xml.XPath.KeyPattern : LocationPathPattern {
private XsltKey key
public double DefaultPriority
public void .ctor(XsltKey key)
public bool Matches(XPathNavigator node, XsltContext ctx)
public double get_DefaultPriority()
}
internal Mono.Xml.XPath.LocationPathPattern : Pattern {
private LocationPathPattern patternPrevious
private bool isAncestor
private NodeTest nodeTest
private ExprFilter filter
public double DefaultPriority
public XPathNodeType EvaluatedNodeType
public LocationPathPattern LastPathPattern
public void .ctor(NodeTest nodeTest)
public void .ctor(ExprFilter filter)
internal void SetPreviousPattern(Pattern prev, bool isAncestor)
public double get_DefaultPriority()
public XPathNodeType get_EvaluatedNodeType()
public bool Matches(XPathNavigator node, XsltContext ctx)
public string ToString()
public LocationPathPattern get_LastPathPattern()
}
internal Mono.Xml.XPath.Pattern : object {
public double DefaultPriority
public XPathNodeType EvaluatedNodeType
internal Pattern Compile(string s, Compiler comp)
internal Pattern Compile(Expression e)
public double get_DefaultPriority()
public XPathNodeType get_EvaluatedNodeType()
public bool Matches(XPathNavigator node, XsltContext ctx)
}
internal Mono.Xml.XPath.Token : object {
public int ERROR
public int EOF
public int SLASH
public int SLASH2
public int DOT
public int DOT2
public int COLON2
public int COMMA
public int AT
public int FUNCTION_NAME
public int BRACKET_OPEN
public int BRACKET_CLOSE
public int PAREN_OPEN
public int PAREN_CLOSE
public int AND
public int and
public int OR
public int or
public int DIV
public int div
public int MOD
public int mod
public int PLUS
public int MINUS
public int ASTERISK
public int DOLLAR
public int BAR
public int EQ
public int NE
public int LE
public int GE
public int LT
public int GT
public int ANCESTOR
public int ancestor
public int ANCESTOR_OR_SELF
public int ATTRIBUTE
public int attribute
public int CHILD
public int child
public int DESCENDANT
public int descendant
public int DESCENDANT_OR_SELF
public int FOLLOWING
public int following
public int FOLLOWING_SIBLING
public int sibling
public int NAMESPACE
public int NameSpace
public int PARENT
public int parent
public int PRECEDING
public int preceding
public int PRECEDING_SIBLING
public int SELF
public int self
public int COMMENT
public int comment
public int TEXT
public int text
public int PROCESSING_INSTRUCTION
public int NODE
public int node
public int MULTIPLY
public int NUMBER
public int LITERAL
public int QName
public int yyErrorCode
}
internal Mono.Xml.XPath.Tokenizer : object {
private char EOL
private string m_rgchInput
private int m_ich
private int m_cch
private int m_iToken
private int m_iTokenPrev
private object m_objToken
private bool m_fPrevWasOperator
private bool m_fThisIsOperator
private Hashtable s_mapTokens
private Object[] s_rgTokenMap
private bool IsFirstToken
public void .ctor(string strInput)
private char Peek(int iOffset)
private char Peek()
private char GetChar()
private char PutBack()
private bool SkipWhitespace()
private int ParseNumber()
private int ParseLiteral()
private string ReadIdentifier()
private int ParseIdentifier()
private bool IsWhitespace(char ch)
private bool IsDigit(char ch)
private int ParseToken()
public bool advance()
public int token()
public object value()
private bool get_IsFirstToken()
private bool IsNodeType(int iToken)
private bool IsOperatorName(int iToken)
private bool IsAxisName(int iToken)
}
internal Mono.Xml.XPath.UnionPattern : Pattern {
public Pattern p0
public Pattern p1
public XPathNodeType EvaluatedNodeType
public void .ctor(Pattern p0, Pattern p1)
public XPathNodeType get_EvaluatedNodeType()
public bool Matches(XPathNavigator node, XsltContext ctx)
public string ToString()
}
internal Mono.Xml.XPath.XmlDocumentAttributeWriter : XmlWriter {
private XmlElement element
private WriteState state
private XmlAttribute attribute
public WriteState WriteState
public void .ctor(XmlNode owner)
public WriteState get_WriteState()
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void WriteStartAttribute(string prefix, string name, string ns)
public void WriteProcessingInstruction(string name, string value)
public void WriteComment(string text)
public void WriteCData(string text)
public void WriteStartElement(string prefix, string name, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteDocType(string name, string pubid, string systemId, string intsubset)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteBase64(Byte[] data, int start, int length)
public void WriteRaw(Char[] raw, int start, int length)
public void WriteRaw(string raw)
public void WriteSurrogateCharEntity(char msb, char lsb)
public void WriteCharEntity(char c)
public void WriteEntityRef(string entname)
public void WriteChars(Char[] data, int start, int length)
public void WriteString(string text)
public void WriteWhitespace(string text)
public void WriteEndAttribute()
}
internal Mono.Xml.XPath.XmlDocumentEditableNavigator : XPathNavigator {
private bool isXmlDocumentNavigatorImpl
private XPathEditableDocument document
private XPathNavigator navigator
public string BaseURI
public bool CanEdit
public bool IsEmptyElement
public string LocalName
public XmlNameTable NameTable
public string Name
public string NamespaceURI
public XPathNodeType NodeType
public string Prefix
public IXmlSchemaInfo SchemaInfo
public object UnderlyingObject
public string Value
public string XmlLang
public bool HasChildren
public bool HasAttributes
public void .ctor(XPathEditableDocument doc)
public void .ctor(XmlDocumentEditableNavigator nav)
public string get_BaseURI()
public bool get_CanEdit()
public bool get_IsEmptyElement()
public string get_LocalName()
public XmlNameTable get_NameTable()
public string get_Name()
public string get_NamespaceURI()
public XPathNodeType get_NodeType()
public string get_Prefix()
public IXmlSchemaInfo get_SchemaInfo()
public object get_UnderlyingObject()
public string get_Value()
public string get_XmlLang()
public bool get_HasChildren()
public bool get_HasAttributes()
public XPathNavigator Clone()
public XPathNavigator CreateNavigator()
public XmlNode GetNode()
public bool IsSamePosition(XPathNavigator other)
public bool MoveTo(XPathNavigator other)
public bool MoveToFirstAttribute()
public bool MoveToFirstChild()
public bool MoveToFirstNamespace(XPathNamespaceScope scope)
public bool MoveToId(string id)
public bool MoveToNext()
public bool MoveToNextAttribute()
public bool MoveToNextNamespace(XPathNamespaceScope scope)
public bool MoveToParent()
public bool MoveToPrevious()
public XmlWriter AppendChild()
public void DeleteRange(XPathNavigator lastSiblingToDelete)
public XmlWriter ReplaceRange(XPathNavigator nav)
public XmlWriter InsertBefore()
public XmlWriter CreateAttributes()
public void DeleteSelf()
public void ReplaceSelf(XmlReader reader)
public void SetValue(string value)
public void MoveToRoot()
public bool MoveToNamespace(string name)
public bool MoveToFirst()
public bool MoveToAttribute(string localName, string namespaceURI)
public bool IsDescendant(XPathNavigator nav)
public string GetNamespace(string name)
public string GetAttribute(string localName, string namespaceURI)
public XmlNodeOrder ComparePosition(XPathNavigator nav)
}
internal Mono.Xml.XPath.XmlDocumentInsertionWriter : XmlWriter {
private XmlNode parent
private XmlNode current
private XmlNode nextSibling
private WriteState state
private XmlAttribute attribute
private XmlWriterClosedEventHandler Closed
public WriteState WriteState
public void .ctor(XmlNode owner, XmlNode nextSibling)
internal void add_Closed(XmlWriterClosedEventHandler value)
internal void remove_Closed(XmlWriterClosedEventHandler value)
public WriteState get_WriteState()
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void WriteStartAttribute(string prefix, string name, string ns)
public void WriteProcessingInstruction(string name, string value)
public void WriteComment(string text)
public void WriteCData(string text)
public void WriteStartElement(string prefix, string name, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteDocType(string name, string pubid, string systemId, string intsubset)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteBase64(Byte[] data, int start, int length)
public void WriteRaw(Char[] raw, int start, int length)
public void WriteRaw(string raw)
public void WriteSurrogateCharEntity(char msb, char lsb)
public void WriteCharEntity(char c)
public void WriteEntityRef(string entname)
public void WriteChars(Char[] data, int start, int length)
public void WriteString(string text)
public void WriteWhitespace(string text)
public void WriteEndAttribute()
}
internal Mono.Xml.XPath.XmlNamespaces : object {
public string XML
public string XMLNS
public int IndexXML
public int IndexXMLNS
}
internal Mono.Xml.XPath.XmlWriterClosedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(XmlWriter writer)
public IAsyncResult BeginInvoke(XmlWriter writer, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Xml.XPath.XPathEditableDocument : object {
private XmlNode node
public XmlNode Node
public void .ctor(XmlNode node)
public XmlNode get_Node()
public XPathNavigator CreateNavigator()
}
internal Mono.Xml.XPath.XPathNavigatorReader : XmlReader {
private XPathNavigator root
private XPathNavigator current
private bool started
private bool closed
private bool endElement
private bool attributeValueConsumed
private StringBuilder readStringBuffer
private StringBuilder innerXmlBuilder
private int depth
private int attributeCount
private bool eof
public bool CanReadBinaryContent
public bool CanReadValueChunk
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public int Depth
public string Value
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public IXmlSchemaInfo SchemaInfo
public string XmlLang
public XmlSpace XmlSpace
public int AttributeCount
public string Item
public string Item
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public void .ctor(XPathNavigator nav)
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public int get_Depth()
public string get_Value()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public IXmlSchemaInfo get_SchemaInfo()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public int get_AttributeCount()
private int GetAttributeCount()
private void SplitName(string name, String& localName, String& ns)
public string get_Item(string name)
public string get_Item(string localName, string namespaceURI)
public bool get_EOF()
public ReadState get_ReadState()
public XmlNameTable get_NameTable()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public string GetAttribute(int i)
private bool CheckAttributeMove(bool b)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public void Close()
public bool Read()
public string ReadString()
public string LookupNamespace(string prefix)
public void ResolveEntity()
public bool ReadAttributeValue()
}
internal Mono.Xml.XPath.XPathParser : object {
internal IStaticXsltContext Context
private int yacc_verbose_flag
public TextWriter ErrorOutput
public int eof_token
internal yyDebug debug
protected int yyFinal
protected String[] yyNames
private int yyExpectingState
protected int yyMax
private Int16[] yyLhs
private Int16[] yyLen
private Int16[] yyDefRed
protected Int16[] yyDgoto
protected Int16[] yySindex
protected Int16[] yyRindex
protected Int16[] yyGindex
protected Int16[] yyTable
protected Int16[] yyCheck
internal void .ctor(IStaticXsltContext context)
internal Expression Compile(string xpath)
private NodeSet CreateNodeTest(Axes axis, object nodeTest, ArrayList plist)
private NodeTest CreateNodeTest(Axes axis, object test)
public void yyerror(string message)
public void yyerror(string message, String[] expected)
public string yyname(int token)
protected Int32[] yyExpectingTokens(int state)
protected String[] yyExpecting(int state)
internal object yyparse(yyInput yyLex, object yyd)
protected object yyDefault(object first)
internal object yyparse(yyInput yyLex)
}
internal Mono.Xml.XPath.yydebug.yyDebug {
public void push(int state, object value)
public void lex(int state, int token, string name, object value)
public void shift(int from, int to, int errorFlag)
public void pop(int state)
public void discard(int state, int token, string name, object value)
public void reduce(int from, int to, int rule, string text, int len)
public void shift(int from, int to)
public void accept(object value)
public void error(string message)
public void reject()
}
internal Mono.Xml.XPath.yydebug.yyDebugSimple : object {
private void println(string s)
public void push(int state, object value)
public void lex(int state, int token, string name, object value)
public void shift(int from, int to, int errorFlag)
public void pop(int state)
public void discard(int state, int token, string name, object value)
public void reduce(int from, int to, int rule, string text, int len)
public void shift(int from, int to)
public void accept(object value)
public void error(string message)
public void reject()
}
internal Mono.Xml.XPath.yyParser.yyException : Exception {
public void .ctor(string message)
}
internal Mono.Xml.XPath.yyParser.yyInput {
public bool advance()
public int token()
public object value()
}
internal Mono.Xml.XPath.yyParser.yyUnexpectedEof : yyException {
public void .ctor(string message)
}
internal Mono.Xml.Xsl.Attribute : ValueType {
public string Prefix
public string Namespace
public string LocalName
public string Value
public void .ctor(string prefix, string namespaceUri, string localName, string value)
}
internal Mono.Xml.Xsl.CompiledStylesheet : object {
private XslStylesheet style
private Hashtable globalVariables
private Hashtable attrSets
private XmlNamespaceManager nsMgr
private Hashtable keys
private Hashtable outputs
private Hashtable decimalFormats
private MSXslScriptManager msScripts
public Hashtable Variables
public XslStylesheet Style
public XmlNamespaceManager NamespaceManager
public Hashtable Keys
public Hashtable Outputs
public MSXslScriptManager ScriptManager
public void .ctor(XslStylesheet style, Hashtable globalVariables, Hashtable attrSets, XmlNamespaceManager nsMgr, Hashtable keys, Hashtable outputs, Hashtable decimalFormats, MSXslScriptManager msScripts)
public Hashtable get_Variables()
public XslStylesheet get_Style()
public XmlNamespaceManager get_NamespaceManager()
public Hashtable get_Keys()
public Hashtable get_Outputs()
public MSXslScriptManager get_ScriptManager()
public XslDecimalFormat LookupDecimalFormat(XmlQualifiedName name)
public XslGeneralVariable ResolveVariable(XmlQualifiedName name)
public ArrayList ResolveKey(XmlQualifiedName name)
public XslAttributeSet ResolveAttributeSet(XmlQualifiedName name)
}
internal Mono.Xml.Xsl.Compiler : object {
public string XsltNamespace
private ArrayList inputStack
private XPathNavigator currentInput
private Stack styleStack
private XslStylesheet currentStyle
private Hashtable keys
private Hashtable globalVariables
private Hashtable attrSets
private XmlNamespaceManager nsMgr
private XmlResolver res
private Evidence evidence
private XslStylesheet rootStyle
private Hashtable outputs
private bool keyCompilationMode
private string stylesheetVersion
private XsltDebuggerWrapper debugger
private MSXslScriptManager msScripts
internal XPathParser xpathParser
internal XsltPatternParser patternParser
private VariableScope curVarScope
private Hashtable decimalFormats
private Dictionary`2<string, int> <>f__switch$mapE
private Dictionary`2<string, int> <>f__switch$mapF
public XsltDebuggerWrapper Debugger
public MSXslScriptManager ScriptManager
public bool KeyCompilationMode
internal Evidence Evidence
public XPathNavigator Input
public XslStylesheet CurrentStylesheet
public VariableScope CurrentVariableScope
public void .ctor(object debugger)
private Expression System.Xml.Xsl.IStaticXsltContext.TryGetVariable(string nm)
private Expression System.Xml.Xsl.IStaticXsltContext.TryGetFunction(XmlQualifiedName name, FunctionArguments args)
private XmlQualifiedName System.Xml.Xsl.IStaticXsltContext.LookupQName(string s)
public XsltDebuggerWrapper get_Debugger()
public void CheckExtraAttributes(string element, String[] validNames)
public CompiledStylesheet Compile(XPathNavigator nav, XmlResolver res, Evidence evidence)
public MSXslScriptManager get_ScriptManager()
public bool get_KeyCompilationMode()
public void set_KeyCompilationMode(bool value)
internal Evidence get_Evidence()
public XPathNavigator get_Input()
public XslStylesheet get_CurrentStylesheet()
public void PushStylesheet(XslStylesheet style)
public void PopStylesheet()
public void PushInputDocument(string url)
public void PushInputDocument(XPathNavigator nav)
public void PopInputDocument()
public XmlQualifiedName ParseQNameAttribute(string localName)
public XmlQualifiedName ParseQNameAttribute(string localName, string ns)
public XmlQualifiedName[] ParseQNameListAttribute(string localName)
public XmlQualifiedName[] ParseQNameListAttribute(string localName, string ns)
public bool ParseYesNoAttribute(string localName, bool defaultVal)
public bool ParseYesNoAttribute(string localName, string ns, bool defaultVal)
public string GetAttribute(string localName)
public string GetAttribute(string localName, string ns)
public XslAvt ParseAvtAttribute(string localName)
public XslAvt ParseAvtAttribute(string localName, string ns)
public void AssertAttribute(string localName)
public void AssertAttribute(string localName, string ns)
public XslAvt ParseAvt(string s)
public Pattern CompilePattern(string pattern, XPathNavigator loc)
internal CompiledExpression CompileExpression(string expression)
internal CompiledExpression CompileExpression(string expression, bool isKey)
public XslOperation CompileTemplateContent()
public XslOperation CompileTemplateContent(XPathNodeType parentType)
public XslOperation CompileTemplateContent(XPathNodeType parentType, bool xslForEach)
public void AddGlobalVariable(XslGlobalVariable var)
public void AddKey(XslKey key)
public void AddAttributeSet(XslAttributeSet set)
public void PushScope()
public VariableScope PopScope()
public int AddVariable(XslLocalVariable v)
public VariableScope get_CurrentVariableScope()
public bool IsExtensionNamespace(string nsUri)
public Hashtable GetNamespacesToCopy()
public void CompileDecimalFormat()
public string LookupNamespace(string prefix)
public void CompileOutput()
}
internal Mono.Xml.Xsl.CSharpCompilerInfo : ScriptCompilerInfo {
public CodeDomProvider CodeDomProvider
public string Extension
public string SourceTemplate
public CodeDomProvider get_CodeDomProvider()
public string get_Extension()
public string get_SourceTemplate()
public string FormatSource(IXmlLineInfo li, string file, string source)
}
internal Mono.Xml.Xsl.Debug : object {
internal void TraceContext(XPathNavigator context)
internal void Assert(bool condition, string message)
internal void WriteLine(object value)
internal void WriteLine(string message)
internal void EnterNavigator(Compiler c)
internal void ExitNavigator(Compiler c)
}
internal Mono.Xml.Xsl.DecimalFormatPattern : object {
public string Prefix
public string Suffix
public string NumberPart
private NumberFormatInfo info
private StringBuilder builder
internal int ParsePattern(int start, string pattern, XslDecimalFormat format)
private int ParseNumber(int start, string pattern, XslDecimalFormat format)
public string FormatNumber(double number)
}
internal Mono.Xml.Xsl.DecimalFormatPatternSet : object {
private DecimalFormatPattern positivePattern
private DecimalFormatPattern negativePattern
public void .ctor(string pattern, XslDecimalFormat decimalFormat)
private void Parse(string pattern, XslDecimalFormat format)
public string FormatNumber(double number)
}
internal Mono.Xml.Xsl.Emitter : object {
public void WriteStartDocument(Encoding encoding, StandaloneType standalone)
public void WriteEndDocument()
public void WriteDocType(string type, string publicId, string systemId)
public void WriteStartElement(string prefix, string localName, string nsURI)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteAttributeString(string prefix, string localName, string nsURI, string value)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteString(string text)
public void WriteCDataSection(string text)
public void WriteRaw(string data)
public void Done()
public void WriteWhitespace(string text)
}
internal Mono.Xml.Xsl.ExprKeyContainer : Expression {
private Expression expr
public Expression BodyExpression
internal XPathNodeType EvaluatedNodeType
public XPathResultType ReturnType
public void .ctor(Expression expr)
public Expression get_BodyExpression()
public object Evaluate(BaseIterator iter)
internal XPathNodeType get_EvaluatedNodeType()
public XPathResultType get_ReturnType()
}
internal Mono.Xml.Xsl.GenericOutputter : Outputter {
private Hashtable _outputs
private XslOutput _currentOutput
private Emitter _emitter
private TextWriter pendingTextWriter
private StringBuilder pendingFirstSpaces
private WriteState _state
private Attribute[] pendingAttributes
private int pendingAttributesPos
private XmlNamespaceManager _nsManager
private ListDictionary _currentNamespaceDecls
private ArrayList newNamespaces
private NameTable _nt
private Encoding _encoding
private bool _canProcessAttributes
private bool _insideCData
private bool _omitXmlDeclaration
private int _xpCount
private Emitter Emitter
public bool CanProcessAttributes
public bool InsideCDataSection
private void .ctor(Hashtable outputs, Encoding encoding)
public void .ctor(XmlWriter writer, Hashtable outputs, Encoding encoding)
internal void .ctor(XmlWriter writer, Hashtable outputs, Encoding encoding, bool isVariable)
public void .ctor(TextWriter writer, Hashtable outputs, Encoding encoding)
internal void .ctor(TextWriter writer, Hashtable outputs)
internal void .ctor(XmlWriter writer, Hashtable outputs)
private Emitter get_Emitter()
private void DetermineOutputMethod(string localName, string ns)
private void CheckState()
public void WriteStartElement(string prefix, string localName, string nsURI)
public void WriteEndElement()
public void WriteFullEndElement()
private void WriteEndElementInternal(bool fullEndElement)
public void WriteAttributeString(string prefix, string localName, string nsURI, string value)
public void WriteNamespaceDecl(string prefix, string nsUri)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteString(string text)
public void WriteRaw(string data)
public void WriteWhitespace(string text)
public void Done()
public bool get_CanProcessAttributes()
public bool get_InsideCDataSection()
public void set_InsideCDataSection(bool value)
}
internal Mono.Xml.Xsl.HtmlEmitter : Emitter {
private TextWriter writer
private Stack elementNameStack
private bool openElement
private bool openAttribute
private int nonHtmlDepth
private bool indent
private Encoding outputEncoding
private string mediaType
private Dictionary`2<string, int> <>f__switch$map13
private Dictionary`2<string, int> <>f__switch$map14
private Dictionary`2<string, int> <>f__switch$map15
private Dictionary`2<string, int> <>f__switch$map16
private Dictionary`2<string, int> <>f__switch$map17
private Dictionary`2<string, int> <>f__switch$map18
public void .ctor(TextWriter writer, XslOutput output)
public void WriteStartDocument(Encoding encoding, StandaloneType standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string publicId, string systemId)
private void CloseAttribute()
private void CloseStartElement()
private void Indent(string elementName, bool endIndent)
public void WriteStartElement(string prefix, string localName, string nsURI)
private bool IsHtmlElement(string localName)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteAttributeString(string prefix, string localName, string nsURI, string value)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteString(string text)
private void WriteFormattedString(string text)
public void WriteRaw(string data)
public void WriteCDataSection(string text)
public void WriteWhitespace(string value)
public void Done()
}
internal Mono.Xml.Xsl.JScriptCompilerInfo : ScriptCompilerInfo {
private Type providerType
public CodeDomProvider CodeDomProvider
public string Extension
public string SourceTemplate
public CodeDomProvider get_CodeDomProvider()
public string get_Extension()
public string get_SourceTemplate()
public string FormatSource(IXmlLineInfo li, string file, string source)
}
internal Mono.Xml.Xsl.KeyIndexTable : object {
private XsltCompiledContext ctx
private ArrayList keys
private Hashtable mappedDocuments
public ArrayList Keys
public void .ctor(XsltCompiledContext ctx, ArrayList keys)
public ArrayList get_Keys()
private void CollectTable(XPathNavigator doc, XsltContext ctx, Hashtable map)
private void CollectTable(XPathNavigator doc, XsltContext ctx, Hashtable map, XslKey key)
private bool MoveNavigatorToNext(XPathNavigator nav, bool matchesAttributes)
private void CollectIndex(XPathNavigator nav, XPathNavigator target, Hashtable map)
private void CollectIndex(XPathNavigator nav, XPathNavigator target, Hashtable map, XslKey key)
private void AddIndex(string key, XPathNavigator target, Hashtable map)
private ArrayList GetNodesByValue(XPathNavigator nav, string value, XsltContext ctx)
public bool Matches(XPathNavigator nav, string value, XsltContext ctx)
public BaseIterator Evaluate(BaseIterator iter, Expression valueExpr)
}
internal Mono.Xml.Xsl.MSXslNodeSet : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
}
internal Mono.Xml.Xsl.MSXslScriptManager : object {
private Hashtable scripts
public void AddScript(Compiler c)
public object GetExtensionObject(string ns)
}
internal Mono.Xml.Xsl.Operations.XPathVariableBinding : Expression {
private XslGeneralVariable v
public XPathResultType ReturnType
public void .ctor(XslGeneralVariable v)
public string ToString()
public XPathResultType get_ReturnType()
public XPathResultType GetReturnType(BaseIterator iter)
public object Evaluate(BaseIterator iter)
}
internal Mono.Xml.Xsl.Operations.XslApplyImports : XslCompiledElement {
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslApplyTemplates : XslCompiledElement {
private XPathExpression select
private XmlQualifiedName mode
private ArrayList withParams
private XslSortEvaluator sortEvaluator
private Dictionary`2<string, int> <>f__switch$map7
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslAttribute : XslCompiledElement {
private XslAvt name
private XslAvt ns
private string calcName
private string calcNs
private string calcPrefix
private Hashtable nsDecls
private XslOperation value
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslAvt : object {
private string simpleString
private ArrayList avtParts
public void .ctor(string str, Compiler comp)
public string AttemptPreCalc(XslAvt& avt)
public string Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslCallTemplate : XslCompiledElement {
private XmlQualifiedName name
private ArrayList withParams
private Dictionary`2<string, int> <>f__switch$map8
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslChoose : XslCompiledElement {
private XslOperation defaultChoice
private ArrayList conditions
private Dictionary`2<string, int> <>f__switch$map9
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslComment : XslCompiledElement {
private XslOperation value
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslCompiledElement : XslCompiledElementBase {
public void .ctor(Compiler c)
}
internal Mono.Xml.Xsl.Operations.XslCompiledElementBase : XslOperation {
private int lineNumber
private int linePosition
private XPathNavigator debugInput
public XPathNavigator DebugInput
public int LineNumber
public int LinePosition
public void .ctor(Compiler c)
public XPathNavigator get_DebugInput()
public int get_LineNumber()
public int get_LinePosition()
protected void Compile(Compiler c)
}
internal Mono.Xml.Xsl.Operations.XslCopy : XslCompiledElement {
private XslOperation children
private XmlQualifiedName[] useAttributeSets
private Hashtable nsDecls
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslCopyOf : XslCompiledElement {
private XPathExpression select
public void .ctor(Compiler c)
protected void Compile(Compiler c)
private void CopyNode(XslTransformProcessor p, XPathNavigator nav)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslElement : XslCompiledElement {
private XslAvt name
private XslAvt ns
private string calcName
private string calcNs
private string calcPrefix
private Hashtable nsDecls
private bool isEmptyElement
private XslOperation value
private XmlQualifiedName[] useAttributeSets
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslFallback : XslCompiledElement {
private XslOperation children
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslForEach : XslCompiledElement {
private XPathExpression select
private XslOperation children
private XslSortEvaluator sortEvaluator
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslGeneralVariable : XslCompiledElement {
protected XslVariableInformation var
public XmlQualifiedName Name
public XPathResultType VariableType
public bool IsLocal
public bool IsParam
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
protected object GetValue(XslTransformProcessor p)
public object Evaluate(XsltContext xsltContext)
public XmlQualifiedName get_Name()
public XPathResultType get_VariableType()
public bool get_IsLocal()
public bool get_IsParam()
}
internal Mono.Xml.Xsl.Operations.XslGlobalParam : XslGlobalVariable {
public bool IsParam
public void .ctor(Compiler c)
public void Override(XslTransformProcessor p, object paramVal)
public bool get_IsParam()
}
internal Mono.Xml.Xsl.Operations.XslGlobalVariable : XslGeneralVariable {
private object busyObject
public bool IsLocal
public bool IsParam
public void .ctor(Compiler c)
public void Evaluate(XslTransformProcessor p)
protected object GetValue(XslTransformProcessor p)
public bool get_IsLocal()
public bool get_IsParam()
}
internal Mono.Xml.Xsl.Operations.XslIf : XslCompiledElement {
private CompiledExpression test
private XslOperation children
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public bool EvaluateIfTrue(XslTransformProcessor p)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslLiteralElement : XslCompiledElement {
private XslOperation children
private string localname
private string prefix
private string nsUri
private bool isEmptyElement
private ArrayList attrs
private XmlQualifiedName[] useAttributeSets
private Hashtable nsDecls
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslLocalParam : XslLocalVariable {
public bool IsParam
public void .ctor(Compiler c)
public void Evaluate(XslTransformProcessor p)
public void Override(XslTransformProcessor p, object paramVal)
public bool get_IsParam()
}
internal Mono.Xml.Xsl.Operations.XslLocalVariable : XslGeneralVariable {
protected int slot
public bool IsLocal
public bool IsParam
public void .ctor(Compiler c)
public void Evaluate(XslTransformProcessor p)
protected object GetValue(XslTransformProcessor p)
public bool IsEvaluated(XslTransformProcessor p)
public bool get_IsLocal()
public bool get_IsParam()
}
internal Mono.Xml.Xsl.Operations.XslMessage : XslCompiledElement {
private TextWriter output
private bool terminate
private XslOperation children
private Dictionary`2<string, int> <>f__switch$mapA
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslNotSupportedOperation : XslCompiledElement {
private string name
private ArrayList fallbacks
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslNumber : XslCompiledElement {
private XslNumberingLevel level
private Pattern count
private Pattern from
private XPathExpression value
private XslAvt format
private XslAvt lang
private XslAvt letterValue
private XslAvt groupingSeparator
private XslAvt groupingSize
private Dictionary`2<string, int> <>f__switch$mapB
public void .ctor(Compiler c)
public double Round(double n)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
private XslNumberFormatter GetNumberFormatter(XslTransformProcessor p)
private string GetFormat(XslTransformProcessor p)
private Int32[] NumberMultiple(XslTransformProcessor p)
private int NumberAny(XslTransformProcessor p)
private int NumberSingle(XslTransformProcessor p)
private bool MatchesCount(XPathNavigator item, XslTransformProcessor p)
private bool MatchesFrom(XPathNavigator item, XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslNumberingLevel : Enum {
public int value__
public XslNumberingLevel Single
public XslNumberingLevel Multiple
public XslNumberingLevel Any
}
internal Mono.Xml.Xsl.Operations.XslOperation : object {
public string XsltNamespace
public void Evaluate(XslTransformProcessor p)
public string EvaluateAsString(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslProcessingInstruction : XslCompiledElement {
private XslAvt name
private XslOperation value
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslTemplateContent : XslCompiledElementBase {
private ArrayList content
private bool hasStack
private int stackSize
private XPathNodeType parentType
private bool xslForEach
private Dictionary`2<string, int> <>f__switch$mapC
private Dictionary`2<string, int> <>f__switch$mapD
public XPathNodeType ParentType
public void .ctor(Compiler c, XPathNodeType parentType, bool xslForEach)
public XPathNodeType get_ParentType()
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslText : XslCompiledElement {
private bool disableOutputEscaping
private string text
private bool isWhitespace
public void .ctor(Compiler c, bool isWhitespace)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslValueOf : XslCompiledElement {
private XPathExpression select
private bool disableOutputEscaping
public void .ctor(Compiler c)
protected void Compile(Compiler c)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.Operations.XslVariableInformation : object {
private XmlQualifiedName name
private XPathExpression select
private XslOperation content
public XmlQualifiedName Name
internal XPathExpression Select
internal XslOperation Content
public void .ctor(Compiler c)
public object Evaluate(XslTransformProcessor p)
public XmlQualifiedName get_Name()
internal XPathExpression get_Select()
internal XslOperation get_Content()
}
internal Mono.Xml.Xsl.OutputMethod : Enum {
public int value__
public OutputMethod XML
public OutputMethod HTML
public OutputMethod Text
public OutputMethod Custom
public OutputMethod Unknown
}
internal Mono.Xml.Xsl.Outputter : object {
public bool CanProcessAttributes
public bool InsideCDataSection
public void WriteStartElement(string localName, string nsURI)
public void WriteStartElement(string prefix, string localName, string nsURI)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteAttributeString(string localName, string value)
public void WriteAttributeString(string prefix, string localName, string nsURI, string value)
public void WriteNamespaceDecl(string prefix, string nsUri)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteString(string text)
public void WriteRaw(string data)
public void WriteWhitespace(string text)
public void Done()
public bool get_CanProcessAttributes()
public bool get_InsideCDataSection()
public void set_InsideCDataSection(bool value)
}
internal Mono.Xml.Xsl.ScriptCompilerInfo : object {
private string compilerCommand
private string defaultCompilerOptions
public string CompilerCommand
public string DefaultCompilerOptions
public CodeDomProvider CodeDomProvider
public string Extension
public string SourceTemplate
public string get_CompilerCommand()
public void set_CompilerCommand(string value)
public string get_DefaultCompilerOptions()
public void set_DefaultCompilerOptions(string value)
public CodeDomProvider get_CodeDomProvider()
public string get_Extension()
public string get_SourceTemplate()
public string FormatSource(IXmlLineInfo li, string file, string code)
public string GetCompilerArguments(string targetFileName)
public Type GetScriptClass(string code, string classSuffix, XPathNavigator scriptNode, Evidence evidence)
private string FormatErrorMessage(CompilerResults res)
}
internal Mono.Xml.Xsl.Sort : object {
private string lang
private XmlDataType dataType
private XmlSortOrder order
private XmlCaseOrder caseOrder
private XslAvt langAvt
private XslAvt dataTypeAvt
private XslAvt orderAvt
private XslAvt caseOrderAvt
private XPathExpression expr
private Dictionary`2<string, int> <>f__switch$map10
private Dictionary`2<string, int> <>f__switch$map11
private Dictionary`2<string, int> <>f__switch$map12
public bool IsContextDependent
public void .ctor(Compiler c)
public bool get_IsContextDependent()
private string ParseLang(string value)
private XmlDataType ParseDataType(string value)
private XmlSortOrder ParseOrder(string value)
private XmlCaseOrder ParseCaseOrder(string value)
public void AddToExpr(XPathExpression e, XslTransformProcessor p)
public XPathSorter ToXPathSorter(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.StandaloneType : Enum {
public int value__
public StandaloneType NONE
public StandaloneType YES
public StandaloneType NO
}
internal Mono.Xml.Xsl.TextEmitter : Emitter {
private TextWriter writer
public void .ctor(TextWriter writer)
public void WriteStartDocument(Encoding encoding, StandaloneType standalone)
public void WriteEndDocument()
public void WriteDocType(string type, string publicId, string systemId)
public void WriteStartElement(string prefix, string localName, string nsURI)
public void WriteEndElement()
public void WriteAttributeString(string prefix, string localName, string nsURI, string value)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteString(string text)
public void WriteRaw(string data)
public void WriteCDataSection(string text)
public void Done()
}
internal Mono.Xml.Xsl.TextOutputter : Outputter {
private TextWriter _writer
private int _depth
private bool _ignoreNestedText
public bool CanProcessAttributes
public bool InsideCDataSection
public void .ctor(TextWriter w, bool ignoreNestedText)
public void WriteStartElement(string prefix, string localName, string nsURI)
public void WriteEndElement()
public void WriteAttributeString(string prefix, string localName, string nsURI, string value)
public void WriteNamespaceDecl(string prefix, string nsUri)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteString(string text)
public void WriteRaw(string data)
public void WriteWhitespace(string text)
private void WriteImpl(string text)
public void Done()
public bool get_CanProcessAttributes()
public bool get_InsideCDataSection()
public void set_InsideCDataSection(bool value)
}
internal Mono.Xml.Xsl.Token : object {
public int ERROR
public int EOF
public int SLASH
public int SLASH2
public int DOT
public int DOT2
public int COLON2
public int COMMA
public int AT
public int FUNCTION_NAME
public int BRACKET_OPEN
public int BRACKET_CLOSE
public int PAREN_OPEN
public int PAREN_CLOSE
public int AND
public int and
public int OR
public int or
public int DIV
public int div
public int MOD
public int mod
public int PLUS
public int MINUS
public int ASTERISK
public int DOLLAR
public int BAR
public int EQ
public int NE
public int LE
public int GE
public int LT
public int GT
public int ANCESTOR
public int ancestor
public int ANCESTOR_OR_SELF
public int ATTRIBUTE
public int attribute
public int CHILD
public int child
public int DESCENDANT
public int descendant
public int DESCENDANT_OR_SELF
public int FOLLOWING
public int following
public int FOLLOWING_SIBLING
public int sibling
public int NAMESPACE
public int NameSpace
public int PARENT
public int parent
public int PRECEDING
public int preceding
public int PRECEDING_SIBLING
public int SELF
public int self
public int COMMENT
public int comment
public int TEXT
public int text
public int PROCESSING_INSTRUCTION
public int NODE
public int node
public int MULTIPLY
public int NUMBER
public int LITERAL
public int QName
public int yyErrorCode
}
internal Mono.Xml.Xsl.Tokenizer : object {
private char EOL
private string m_rgchInput
private int m_ich
private int m_cch
private int m_iToken
private int m_iTokenPrev
private object m_objToken
private bool m_fPrevWasOperator
private bool m_fThisIsOperator
private Hashtable s_mapTokens
private Object[] s_rgTokenMap
private bool IsFirstToken
public void .ctor(string strInput)
private char Peek(int iOffset)
private char Peek()
private char GetChar()
private char PutBack()
private bool SkipWhitespace()
private int ParseNumber()
private int ParseLiteral()
private string ReadIdentifier()
private int ParseIdentifier()
private bool IsWhitespace(char ch)
private bool IsDigit(char ch)
private int ParseToken()
public bool advance()
public int token()
public object value()
private bool get_IsFirstToken()
private bool IsNodeType(int iToken)
private bool IsOperatorName(int iToken)
private bool IsAxisName(int iToken)
}
internal Mono.Xml.Xsl.VariableScope : object {
private ArrayList variableNames
private Hashtable variables
private VariableScope parent
private int nextSlot
private int highTide
public int VariableHighTide
public VariableScope Parent
public void .ctor(VariableScope parent)
internal void giveHighTideToParent()
public int get_VariableHighTide()
public VariableScope get_Parent()
public int AddVariable(XslLocalVariable v)
public XslLocalVariable ResolveStatic(XmlQualifiedName name)
public XslLocalVariable Resolve(XslTransformProcessor p, XmlQualifiedName name)
}
internal Mono.Xml.Xsl.VBCompilerInfo : ScriptCompilerInfo {
public CodeDomProvider CodeDomProvider
public string Extension
public string SourceTemplate
public CodeDomProvider get_CodeDomProvider()
public string get_Extension()
public string get_SourceTemplate()
public string FormatSource(IXmlLineInfo li, string file, string source)
}
internal Mono.Xml.Xsl.XmlWriterEmitter : Emitter {
private XmlWriter writer
public void .ctor(XmlWriter writer)
public void WriteStartDocument(Encoding encoding, StandaloneType standalone)
public void WriteEndDocument()
public void WriteDocType(string type, string publicId, string systemId)
public void WriteStartElement(string prefix, string localName, string nsURI)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteAttributeString(string prefix, string localName, string nsURI, string value)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteString(string text)
public void WriteRaw(string data)
public void WriteCDataSection(string text)
public void WriteWhitespace(string value)
public void Done()
}
internal Mono.Xml.Xsl.XPFuncImpl : object {
private int minargs
private int maxargs
private XPathResultType returnType
private XPathResultType[] argTypes
public int Minargs
public int Maxargs
public XPathResultType ReturnType
public XPathResultType[] ArgTypes
public void .ctor(int minArgs, int maxArgs, XPathResultType returnType, XPathResultType[] argTypes)
protected void Init(int minArgs, int maxArgs, XPathResultType returnType, XPathResultType[] argTypes)
public int get_Minargs()
public int get_Maxargs()
public XPathResultType get_ReturnType()
public XPathResultType[] get_ArgTypes()
public object Invoke(XsltContext xsltContext, Object[] args, XPathNavigator docContext)
public object Invoke(XsltCompiledContext xsltContext, Object[] args, XPathNavigator docContext)
public XPathResultType GetXPathType(Type type, XPathNavigator node)
}
internal Mono.Xml.Xsl.XslAttributeSet : XslCompiledElement {
private XmlQualifiedName name
private ArrayList usedAttributeSets
private ArrayList attributes
public XmlQualifiedName Name
public void .ctor(Compiler c)
public XmlQualifiedName get_Name()
protected void Compile(Compiler c)
public void Merge(XslAttributeSet s)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.XslDecimalFormat : object {
private NumberFormatInfo info
private char digit
private char zeroDigit
private char patternSeparator
private string baseUri
private int lineNumber
private int linePosition
public XslDecimalFormat Default
private Dictionary`2<string, int> <>f__switch$map1B
public char Digit
public char ZeroDigit
public NumberFormatInfo Info
public char PatternSeparator
public void .ctor(Compiler c)
public char get_Digit()
public char get_ZeroDigit()
public NumberFormatInfo get_Info()
public char get_PatternSeparator()
public void CheckSameAs(XslDecimalFormat other)
public string FormatNumber(double number, string pattern)
private DecimalFormatPatternSet ParsePatternSet(string pattern)
}
internal Mono.Xml.Xsl.XslDefaultNodeTemplate : XslTemplate {
private XmlQualifiedName mode
private XslDefaultNodeTemplate instance
public XslTemplate Instance
public void .ctor(XmlQualifiedName mode)
public XslTemplate get_Instance()
public void Evaluate(XslTransformProcessor p, Hashtable withParams)
}
internal Mono.Xml.Xsl.XslDefaultTextTemplate : XslTemplate {
private XslDefaultTextTemplate instance
public XslTemplate Instance
public XslTemplate get_Instance()
public void Evaluate(XslTransformProcessor p, Hashtable withParams)
}
internal Mono.Xml.Xsl.XslEmptyTemplate : XslTemplate {
private XslEmptyTemplate instance
public XslTemplate Instance
public XslTemplate get_Instance()
public void Evaluate(XslTransformProcessor p, Hashtable withParams)
}
internal Mono.Xml.Xsl.XslKey : object {
private XmlQualifiedName name
private CompiledExpression useExpr
private Pattern matchPattern
public XmlQualifiedName Name
internal CompiledExpression Use
internal Pattern Match
public void .ctor(Compiler c)
public XmlQualifiedName get_Name()
internal CompiledExpression get_Use()
internal Pattern get_Match()
}
internal Mono.Xml.Xsl.XslModedTemplateTable : object {
private ArrayList unnamedTemplates
private XmlQualifiedName mode
private bool sorted
public XmlQualifiedName Mode
public void .ctor(XmlQualifiedName mode)
public XmlQualifiedName get_Mode()
public void Add(XslTemplate t)
public void Add(XslTemplate t, Pattern p)
public XslTemplate FindMatch(XPathNavigator node, XslTransformProcessor p)
}
internal Mono.Xml.Xsl.XslNameUtil : object {
public XmlQualifiedName[] FromListString(string names, XPathNavigator current)
public XmlQualifiedName FromString(string name, XPathNavigator current)
public XmlQualifiedName FromString(string name, XPathNavigator current, bool useDefaultXmlns)
public XmlQualifiedName FromString(string name, Hashtable nsDecls)
public XmlQualifiedName FromString(string name, IStaticXsltContext ctx)
public XmlQualifiedName FromString(string name, XmlNamespaceManager ctx)
public string LocalNameOf(string name)
}
internal Mono.Xml.Xsl.XslOutput : object {
private string uri
private XmlQualifiedName customMethod
private OutputMethod method
private string version
private Encoding encoding
private bool omitXmlDeclaration
private StandaloneType standalone
private string doctypePublic
private string doctypeSystem
private XmlQualifiedName[] cdataSectionElements
private string indent
private string mediaType
private string stylesheetVersion
private ArrayList cdSectsList
private Dictionary`2<string, int> <>f__switch$map1C
private Dictionary`2<string, int> <>f__switch$map1D
private Dictionary`2<string, int> <>f__switch$map1E
private Dictionary`2<string, int> <>f__switch$map1F
private Dictionary`2<string, int> <>f__switch$map20
public OutputMethod Method
public XmlQualifiedName CustomMethod
public string Version
public Encoding Encoding
public string Uri
public bool OmitXmlDeclaration
public StandaloneType Standalone
public string DoctypePublic
public string DoctypeSystem
public XmlQualifiedName[] CDataSectionElements
public string Indent
public string MediaType
public void .ctor(string uri, string stylesheetVersion)
public OutputMethod get_Method()
public XmlQualifiedName get_CustomMethod()
public string get_Version()
public Encoding get_Encoding()
public string get_Uri()
public bool get_OmitXmlDeclaration()
public StandaloneType get_Standalone()
public string get_DoctypePublic()
public string get_DoctypeSystem()
public XmlQualifiedName[] get_CDataSectionElements()
public string get_Indent()
public string get_MediaType()
public void Fill(XPathNavigator nav)
private void ProcessAttribute(XPathNavigator nav)
}
internal Mono.Xml.Xsl.XslSortEvaluator : object {
private XPathExpression select
private Sort[] sorterTemplates
private XPathSorter[] sorters
private XPathSorters sortRunner
private bool isSorterContextDependent
public void .ctor(XPathExpression select, Sort[] sorterTemplates)
private void PopulateConstantSorters()
public BaseIterator SortedSelect(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.XslStylesheet : object {
public string XsltNamespace
public string MSXsltNamespace
private ArrayList imports
private Hashtable spaceControls
private NameValueCollection namespaceAliases
private Hashtable parameters
private Hashtable keys
private Hashtable variables
private XslTemplateTable templates
private string baseURI
private string version
private XmlQualifiedName[] extensionElementPrefixes
private XmlQualifiedName[] excludeResultPrefixes
private ArrayList stylesheetNamespaces
private Hashtable inProcessIncludes
private bool countedSpaceControlExistence
private bool cachedHasSpaceControls
private XmlQualifiedName allMatchName
private bool countedNamespaceAliases
private bool cachedHasNamespaceAliases
private Dictionary`2<string, int> <>f__switch$map21
private Dictionary`2<string, int> <>f__switch$map22
private Dictionary`2<string, int> <>f__switch$map23
public XmlQualifiedName[] ExtensionElementPrefixes
public XmlQualifiedName[] ExcludeResultPrefixes
public ArrayList StylesheetNamespaces
public ArrayList Imports
public Hashtable SpaceControls
public NameValueCollection NamespaceAliases
public Hashtable Parameters
public XslTemplateTable Templates
public string BaseURI
public string Version
public bool HasSpaceControls
public bool HasNamespaceAliases
public XmlQualifiedName[] get_ExtensionElementPrefixes()
public XmlQualifiedName[] get_ExcludeResultPrefixes()
public ArrayList get_StylesheetNamespaces()
public ArrayList get_Imports()
public Hashtable get_SpaceControls()
public NameValueCollection get_NamespaceAliases()
public Hashtable get_Parameters()
public XslTemplateTable get_Templates()
public string get_BaseURI()
public string get_Version()
internal void Compile(Compiler c)
private XmlQualifiedName[] ParseMappedPrefixes(string list, XPathNavigator nav)
public bool get_HasSpaceControls()
private bool ComputeHasSpaceControls()
private bool HasStripSpace(IDictionary table)
public bool GetPreserveWhitespace(XPathNavigator nav)
private object GetDefaultXmlSpace()
public bool get_HasNamespaceAliases()
public string GetActualPrefix(string prefix)
private void StoreInclude(Compiler c)
private void HandleImportsInInclude(Compiler c)
private void HandleInclude(Compiler c)
private void HandleImport(Compiler c, string href)
private void HandleTopLevelElement(Compiler c)
private XPathNavigator HandleIncludesImports(Compiler c)
private void ProcessTopLevelElements(Compiler c)
private void AddSpaceControls(XmlQualifiedName[] names, XmlSpace result, XPathNavigator styleElem)
}
internal Mono.Xml.Xsl.XsltCompiledContext : XsltContext {
private Hashtable keyNameCache
private Hashtable keyIndexTables
private Hashtable patternNavCaches
private XslTransformProcessor p
private XsltContextInfo[] scopes
private int scopeAt
public XslTransformProcessor Processor
public string DefaultNamespace
public bool Whitespace
public bool IsCData
public bool WhitespaceHandling
public string ElementPrefix
public string ElementNamespace
public void .ctor(XslTransformProcessor p)
public XslTransformProcessor get_Processor()
public string get_DefaultNamespace()
public XPathNavigator GetNavCache(Pattern p, XPathNavigator node)
public object EvaluateKey(IStaticXsltContext staticContext, BaseIterator iter, Expression nameExpr, Expression valueExpr)
public bool MatchesKey(XPathNavigator nav, IStaticXsltContext staticContext, string name, string value)
private XmlQualifiedName GetKeyName(IStaticXsltContext staticContext, BaseIterator iter, Expression nameExpr)
private KeyIndexTable GetIndexTable(XmlQualifiedName name)
public string LookupNamespace(string prefix)
internal IXsltContextFunction ResolveFunction(XmlQualifiedName name, XPathResultType[] argTypes)
private MethodInfo FindBestMethod(Type t, string name, XPathResultType[] argTypes, bool isScript)
public IXsltContextVariable ResolveVariable(string prefix, string name)
public IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] ArgTypes)
internal IXsltContextVariable ResolveVariable(XmlQualifiedName q)
public int CompareDocument(string baseUri, string nextBaseUri)
public bool PreserveWhitespace(XPathNavigator nav)
public bool get_Whitespace()
public bool get_IsCData()
public void set_IsCData(bool value)
public bool get_WhitespaceHandling()
public void set_WhitespaceHandling(bool value)
public string get_ElementPrefix()
public void set_ElementPrefix(string value)
public string get_ElementNamespace()
public void set_ElementNamespace(string value)
private void ExtendScope()
public bool PopScope()
public void PushScope()
}
internal Mono.Xml.Xsl.XsltCurrent : XPathFunction {
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
public object Evaluate(BaseIterator iter)
internal bool get_Peer()
public string ToString()
}
internal Mono.Xml.Xsl.XsltDebuggerWrapper : object {
private MethodInfo on_compile
private MethodInfo on_execute
private object impl
public void .ctor(object impl)
public void DebugCompile(XPathNavigator style)
public void DebugExecute(XslTransformProcessor p, XPathNavigator style)
}
internal Mono.Xml.Xsl.XsltDocument : XPathFunction {
private Expression arg0
private Expression arg1
private XPathNavigator doc
private string VoidBaseUriFlag
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args, Compiler c)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
private Uri Resolve(string thisUri, string baseUri, XslTransformProcessor p)
private XPathNodeIterator GetDocument(XsltCompiledContext xsltContext, XPathNodeIterator itr, string baseUri)
private XPathNodeIterator GetDocument(XsltCompiledContext xsltContext, string arg0, string baseUri)
public string ToString()
}
internal Mono.Xml.Xsl.XsltElementAvailable : XPathFunction {
private Expression arg0
private IStaticXsltContext ctx
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args, IStaticXsltContext ctx)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
}
internal Mono.Xml.Xsl.XslTemplate : object {
private XmlQualifiedName name
private Pattern match
private XmlQualifiedName mode
private double priority
private ArrayList parameters
private XslOperation content
private int nextId
public int Id
private XslStylesheet style
private int stackSize
public XmlQualifiedName Name
public Pattern Match
public XmlQualifiedName Mode
public double Priority
public XslStylesheet Parent
private string LocationMessage
public void .ctor(Compiler c)
public XmlQualifiedName get_Name()
public Pattern get_Match()
public XmlQualifiedName get_Mode()
public double get_Priority()
public XslStylesheet get_Parent()
private void Parse(Compiler c)
private string get_LocationMessage()
private void AppendTemplateFrame(XsltException ex)
public void Evaluate(XslTransformProcessor p, Hashtable withParams)
private void EvaluateCore(XslTransformProcessor p, Hashtable withParams)
public void Evaluate(XslTransformProcessor p)
}
internal Mono.Xml.Xsl.XslTemplateTable : object {
private Hashtable templateTables
private Hashtable namedTemplates
private XslStylesheet parent
public Hashtable TemplateTables
public XslModedTemplateTable Item
public void .ctor(XslStylesheet parent)
public Hashtable get_TemplateTables()
public XslModedTemplateTable get_Item(XmlQualifiedName mode)
public void Add(XslTemplate template)
public void Add(XslModedTemplateTable table)
public XslTemplate FindMatch(XPathNavigator node, XmlQualifiedName mode, XslTransformProcessor p)
public XslTemplate FindTemplate(XmlQualifiedName name)
}
internal Mono.Xml.Xsl.XsltExtensionFunction : XPFuncImpl {
private object extension
private MethodInfo method
private TypeCode[] typeCodes
private Dictionary`2<string, int> <>f__switch$map26
private Dictionary`2<string, int> <>f__switch$map27
public void .ctor(object extension, MethodInfo method, XPathNavigator currentNode)
public object Invoke(XsltCompiledContext xsltContext, Object[] args, XPathNavigator docContext)
}
internal Mono.Xml.Xsl.XsltFormatNumber : XPathFunction {
private Expression arg0
private Expression arg1
private Expression arg2
private IStaticXsltContext ctx
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args, IStaticXsltContext ctx)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
}
internal Mono.Xml.Xsl.XsltFunctionAvailable : XPathFunction {
private Expression arg0
private IStaticXsltContext ctx
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args, IStaticXsltContext ctx)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
}
internal Mono.Xml.Xsl.XsltGenerateId : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
private int IndexInParent(XPathNavigator nav)
}
internal Mono.Xml.Xsl.XsltKey : XPathFunction {
private Expression arg0
private Expression arg1
private IStaticXsltContext staticContext
public Expression KeyName
public Expression Field
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args, IStaticXsltContext ctx)
public Expression get_KeyName()
public Expression get_Field()
public XPathResultType get_ReturnType()
internal bool get_Peer()
public bool PatternMatches(XPathNavigator nav, XsltContext nsmgr)
public object Evaluate(BaseIterator iter)
}
internal Mono.Xml.Xsl.XsltPatternParser : object {
internal IStaticXsltContext Context
private int yacc_verbose_flag
public TextWriter ErrorOutput
public int eof_token
internal yyDebug debug
protected int yyFinal
protected String[] yyNames
private int yyExpectingState
protected int yyMax
private Int16[] yyLhs
private Int16[] yyLen
private Int16[] yyDefRed
protected Int16[] yyDgoto
protected Int16[] yySindex
protected Int16[] yyRindex
protected Int16[] yyGindex
protected Int16[] yyTable
protected Int16[] yyCheck
internal void .ctor(IStaticXsltContext context)
internal Expression Compile(string xpath)
private NodeSet CreateNodeTest(Axes axis, object nodeTest, ArrayList plist)
private NodeTest CreateNodeTest(Axes axis, object test)
public void yyerror(string message)
public void yyerror(string message, String[] expected)
public string yyname(int token)
protected Int32[] yyExpectingTokens(int state)
protected String[] yyExpecting(int state)
internal object yyparse(yyInput yyLex, object yyd)
protected object yyDefault(object first)
internal object yyparse(yyInput yyLex)
}
internal Mono.Xml.Xsl.XslTransformProcessor : object {
private XsltDebuggerWrapper debugger
private CompiledStylesheet compiledStyle
private XslStylesheet style
private Stack currentTemplateStack
private XPathNavigator root
private XsltArgumentList args
private XmlResolver resolver
private string currentOutputUri
internal XsltCompiledContext XPathContext
internal Hashtable globalVariableTable
private Hashtable docCache
private Stack outputStack
private StringBuilder avtSB
private Stack paramPassingCache
private ArrayList nodesetStack
private Stack variableStack
private Object[] currentStack
private Hashtable busyTable
private object busyObject
private Dictionary`2<string, int> <>f__switch$map24
public XsltDebuggerWrapper Debugger
public CompiledStylesheet CompiledStyle
public XsltArgumentList Arguments
public XPathNavigator Root
public MSXslScriptManager ScriptManager
public XmlResolver Resolver
public Outputter Out
public Hashtable Outputs
public XslOutput Output
public string CurrentOutputUri
public bool InsideCDataElement
public XPathNodeIterator CurrentNodeset
public XPathNavigator CurrentNode
public int StackItemCount
public bool PreserveOutputWhitespace
public void .ctor(CompiledStylesheet style, object debugger)
public void Process(XPathNavigator root, Outputter outputtter, XsltArgumentList args, XmlResolver resolver)
public XsltDebuggerWrapper get_Debugger()
public CompiledStylesheet get_CompiledStyle()
public XsltArgumentList get_Arguments()
public XPathNavigator get_Root()
public MSXslScriptManager get_ScriptManager()
public XmlResolver get_Resolver()
public XPathNavigator GetDocument(Uri uri)
public Outputter get_Out()
public void PushOutput(Outputter newOutput)
public Outputter PopOutput()
public Hashtable get_Outputs()
public XslOutput get_Output()
public string get_CurrentOutputUri()
public bool get_InsideCDataElement()
public StringBuilder GetAvtStringBuilder()
public string ReleaseAvtStringBuilder()
private Hashtable GetParams(ArrayList withParams)
public void ApplyTemplates(XPathNodeIterator nodes, XmlQualifiedName mode, ArrayList withParams)
public void CallTemplate(XmlQualifiedName name, ArrayList withParams)
public void ApplyImports()
internal void OutputLiteralNamespaceUriNodes(Hashtable nsDecls, ArrayList excludedPrefixes, string localPrefixInCopy)
private XslTemplate FindTemplate(XPathNavigator node, XmlQualifiedName mode)
private XslTemplate FindTemplate(XmlQualifiedName name)
public void PushForEachContext()
public void PopForEachContext()
public XPathNodeIterator get_CurrentNodeset()
public XPathNavigator get_CurrentNode()
public bool NodesetMoveNext()
public bool NodesetMoveNext(XPathNodeIterator iter)
public void PushNodeset(XPathNodeIterator itr)
public void PopNodeset()
public bool Matches(Pattern p, XPathNavigator n)
public object Evaluate(XPathExpression expr)
public string EvaluateString(XPathExpression expr)
public bool EvaluateBoolean(XPathExpression expr)
public double EvaluateNumber(XPathExpression expr)
public XPathNodeIterator Select(XPathExpression expr)
public XslAttributeSet ResolveAttributeSet(XmlQualifiedName name)
public int get_StackItemCount()
public object GetStackItem(int slot)
public void SetStackItem(int slot, object o)
public void PushStack(int stackSize)
public void PopStack()
public void SetBusy(object o)
public void SetFree(object o)
public bool IsBusy(object o)
public bool PushElementState(string prefix, string name, string ns, bool preserveWhitespace)
private bool IsCData(string name, string ns)
public void PopCDataState(bool isCData)
public bool get_PreserveOutputWhitespace()
}
internal Mono.Xml.Xsl.XsltSystemProperty : XPathFunction {
private Expression arg0
private IStaticXsltContext ctx
private Dictionary`2<string, int> <>f__switch$map28
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args, IStaticXsltContext ctx)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
}
internal Mono.Xml.Xsl.XsltUnparsedEntityUri : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
}
internal Mono.Xml.Xsl.yydebug.yyDebug {
public void push(int state, object value)
public void lex(int state, int token, string name, object value)
public void shift(int from, int to, int errorFlag)
public void pop(int state)
public void discard(int state, int token, string name, object value)
public void reduce(int from, int to, int rule, string text, int len)
public void shift(int from, int to)
public void accept(object value)
public void error(string message)
public void reject()
}
internal Mono.Xml.Xsl.yydebug.yyDebugSimple : object {
private void println(string s)
public void push(int state, object value)
public void lex(int state, int token, string name, object value)
public void shift(int from, int to, int errorFlag)
public void pop(int state)
public void discard(int state, int token, string name, object value)
public void reduce(int from, int to, int rule, string text, int len)
public void shift(int from, int to)
public void accept(object value)
public void error(string message)
public void reject()
}
internal Mono.Xml.Xsl.yyParser.yyException : Exception {
public void .ctor(string message)
}
internal Mono.Xml.Xsl.yyParser.yyInput {
public bool advance()
public int token()
public object value()
}
internal Mono.Xml.Xsl.yyParser.yyUnexpectedEof : yyException {
public void .ctor(string message)
}
internal Mono.Xml2.XmlTextReader : XmlReader {
private int peekCharCapacity
private XmlTokenInfo cursorToken
private XmlTokenInfo currentToken
private XmlAttributeTokenInfo currentAttributeToken
private XmlTokenInfo currentAttributeValueToken
private XmlAttributeTokenInfo[] attributeTokens
private XmlTokenInfo[] attributeValueTokens
private int currentAttribute
private int currentAttributeValue
private int attributeCount
private XmlParserContext parserContext
private XmlNameTable nameTable
private XmlNamespaceManager nsmgr
private ReadState readState
private bool disallowReset
private int depth
private int elementDepth
private bool depthUp
private bool popScope
private TagName[] elementNames
private int elementNameStackPos
private bool allowMultipleRoot
private bool isStandalone
private bool returnEntityReference
private string entityReferenceName
private StringBuilder valueBuffer
private TextReader reader
private Char[] peekChars
private int peekCharsIndex
private int peekCharsLength
private int curNodePeekIndex
private bool preserveCurrentTag
private int line
private int column
private int currentLinkedNodeLineNumber
private int currentLinkedNodeLinePosition
private bool useProceedingLineInfo
private XmlNodeType startNodeType
private XmlNodeType currentState
private int nestLevel
private bool readCharsInProgress
private CharGetter binaryCharGetter
private bool namespaces
private WhitespaceHandling whitespaceHandling
private XmlResolver resolver
private bool normalization
private bool checkCharacters
private bool prohibitDtd
private bool closeInput
private EntityHandling entityHandling
private NameTable whitespacePool
private Char[] whitespaceCache
private DtdInputStateStack stateStack
private Dictionary`2<string, int> <>f__switch$map38
private Dictionary`2<string, int> <>f__switch$map39
private XmlParserContext Mono.Xml.IHasXmlParserContext.ParserContext
public int AttributeCount
public string BaseURI
public bool CanReadBinaryContent
public bool CanReadValueChunk
internal bool CharacterChecking
internal bool CloseInput
public int Depth
public Encoding Encoding
public EntityHandling EntityHandling
public bool EOF
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public int LineNumber
public int LinePosition
public string LocalName
public string Name
public bool Namespaces
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public bool Normalization
public string Prefix
public bool ProhibitDtd
public char QuoteChar
public ReadState ReadState
public XmlReaderSettings Settings
public string Value
public WhitespaceHandling WhitespaceHandling
public string XmlLang
public XmlResolver XmlResolver
public XmlSpace XmlSpace
internal DTDObjectModel DTD
internal XmlResolver Resolver
internal ConformanceLevel Conformance
private DtdInputState State
public void .ctor(Stream input)
public void .ctor(string url)
public void .ctor(TextReader input)
protected void .ctor(XmlNameTable nt)
public void .ctor(Stream input, XmlNameTable nt)
public void .ctor(string url, Stream input)
public void .ctor(string url, TextReader input)
public void .ctor(string url, XmlNameTable nt)
public void .ctor(TextReader input, XmlNameTable nt)
internal void .ctor(bool dummy, XmlResolver resolver, string url, XmlNodeType fragType, XmlParserContext context)
public void .ctor(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context)
internal void .ctor(string baseURI, TextReader xmlFragment, XmlNodeType fragType)
public void .ctor(string url, Stream input, XmlNameTable nt)
public void .ctor(string url, TextReader input, XmlNameTable nt)
public void .ctor(string xmlFragment, XmlNodeType fragType, XmlParserContext context)
internal void .ctor(string url, TextReader fragment, XmlNodeType fragType, XmlParserContext context)
private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string ns)
private Stream GetStreamFromUrl(string url, String& absoluteUriString)
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
internal bool get_CharacterChecking()
internal void set_CharacterChecking(bool value)
internal bool get_CloseInput()
internal void set_CloseInput(bool value)
public int get_Depth()
public Encoding get_Encoding()
public EntityHandling get_EntityHandling()
public void set_EntityHandling(EntityHandling value)
public bool get_EOF()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public int get_LineNumber()
public int get_LinePosition()
public string get_LocalName()
public string get_Name()
public bool get_Namespaces()
public void set_Namespaces(bool value)
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public bool get_Normalization()
public void set_Normalization(bool value)
public string get_Prefix()
public bool get_ProhibitDtd()
public void set_ProhibitDtd(bool value)
public char get_QuoteChar()
public ReadState get_ReadState()
public XmlReaderSettings get_Settings()
public string get_Value()
public WhitespaceHandling get_WhitespaceHandling()
public void set_WhitespaceHandling(WhitespaceHandling value)
public string get_XmlLang()
public void set_XmlResolver(XmlResolver value)
public XmlSpace get_XmlSpace()
public void Close()
public string GetAttribute(int i)
public string GetAttribute(string name)
private int GetIndexOfQualifiedAttribute(string localName, string namespaceURI)
public string GetAttribute(string localName, string namespaceURI)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public TextReader GetRemainder()
public bool HasLineInfo()
public string LookupNamespace(string prefix)
private string LookupNamespace(string prefix, bool atomizedNames)
public string LookupPrefix(string ns, bool atomizedName)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceName)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
public bool ReadAttributeValue()
public int ReadBase64(Byte[] buffer, int offset, int length)
public int ReadBinHex(Byte[] buffer, int offset, int length)
public int ReadChars(Char[] buffer, int offset, int length)
public void ResetState()
public void ResolveEntity()
public void Skip()
internal DTDObjectModel get_DTD()
internal XmlResolver get_Resolver()
private XmlException NotWFError(string message)
private void Init()
private void Clear()
private void InitializeContext(string url, XmlParserContext context, TextReader fragment, XmlNodeType fragType)
internal ConformanceLevel get_Conformance()
internal void set_Conformance(ConformanceLevel value)
internal void AdjustLineInfoOffset(int lineNumberOffset, int linePositionOffset)
internal void SetNameTable(XmlNameTable nameTable)
private void SetProperties(XmlNodeType nodeType, string name, string prefix, string localName, bool isEmptyElement, string value, bool clearAttributes)
private void SetTokenProperties(XmlTokenInfo token, XmlNodeType nodeType, string name, string prefix, string localName, bool isEmptyElement, string value, bool clearAttributes)
private void ClearAttributes()
private int PeekSurrogate(int c)
private int PeekChar()
private int ReadChar()
private void Advance(int ch)
private bool ReadTextReader(int remained)
private bool ReadContent()
private void SetEntityReferenceProperties()
private void ReadStartTag()
private void PushElementName(string name, string local, string prefix)
private void ReadEndTag()
private void CheckCurrentStateUpdate()
private void AppendValueChar(int ch)
private void AppendSurrogatePairValueChar(int ch)
private string CreateValueString()
private void ClearValueBuffer()
private void ReadText(bool notWhitespace)
private int ReadReference(bool ignoreEntityReferences)
private int ReadCharacterReference()
private int ReadEntityReference(bool ignoreEntityReferences)
private void ReadAttributes(bool isXmlDecl)
private void AddAttributeWithValue(string name, string value)
private void IncrementAttributeToken()
private void IncrementAttributeValueToken()
private void ReadAttributeValueTokens(int dummyQuoteChar)
private void CheckAttributeEntityReferenceWFC(string entName)
private void ReadProcessingInstruction()
private void VerifyXmlDeclaration()
private bool SkipWhitespaceInString(string text, Int32& idx)
private void ParseAttributeFromString(string src, Int32& idx, String& name, String& value)
internal void SkipTextDeclaration()
private void ReadDeclaration()
private void ReadComment()
private void ReadCDATA()
private void ReadDoctypeDecl()
internal DTDObjectModel GenerateDTDObjectModel(string name, string publicId, string systemId, string internalSubset)
internal DTDObjectModel GenerateDTDObjectModel(string name, string publicId, string systemId, string internalSubset, int intSubsetStartLine, int intSubsetStartColumn)
private DtdInputState get_State()
private int ReadValueChar()
private void ExpectAndAppend(string s)
private void ReadInternalSubset()
private string ReadSystemLiteral(bool expectSYSTEM)
private string ReadPubidLiteral()
private string ReadName()
private string ReadName(String& prefix, String& localName)
private void Expect(int expected)
private void Expect(string expected)
private void ExpectAfterWhitespace(char c)
private bool SkipWhitespace()
private bool ReadWhitespace()
private int ReadCharsInternal(Char[] buffer, int offset, int length)
private bool ReadUntilEndTag()
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
public System.Xml.ConformanceLevel : Enum {
public int value__
public ConformanceLevel Auto
public ConformanceLevel Fragment
public ConformanceLevel Document
}
internal System.Xml.DTDReader : object {
private int initialNameCapacity
private XmlParserInput currentInput
private Stack parserInputStack
private Char[] nameBuffer
private int nameLength
private int nameCapacity
private StringBuilder valueBuffer
private int currentLinkedNodeLineNumber
private int currentLinkedNodeLinePosition
private int dtdIncludeSect
private bool normalization
private bool processingInternalSubset
private string cachedPublicId
private string cachedSystemId
private DTDObjectModel DTD
public string BaseURI
public bool Normalization
public int LineNumber
public int LinePosition
public void .ctor(DTDObjectModel dtd, int startLineNumber, int startLinePosition)
public string get_BaseURI()
public bool get_Normalization()
public void set_Normalization(bool value)
public int get_LineNumber()
public int get_LinePosition()
public bool HasLineInfo()
private XmlException NotWFError(string message)
private void Init()
internal DTDObjectModel GenerateDTDObjectModel()
private bool ProcessDTDSubset()
private void CompileDeclaration()
private void ReadIgnoreSect()
private DTDElementDeclaration ReadElementDecl()
private void ReadContentSpec(DTDElementDeclaration decl)
private DTDContentModel ReadCP(DTDElementDeclaration elem)
private void AddContentModel(DTDContentModelCollection cmc, DTDContentModel cm)
private void ReadParameterEntityDecl()
private void ResolveExternalEntityReplacementText(DTDEntityBase decl)
private void ResolveInternalEntityReplacementText(DTDEntityBase decl)
private int GetCharacterReference(DTDEntityBase li, string value, Int32& index, int end)
private string GetPEValue(string peName)
private DTDParameterEntityDeclaration GetPEDecl(string peName)
private bool TryExpandPERef()
private bool TryExpandPERefSpaceKeep()
private void ExpandPERef()
private DTDEntityDeclaration ReadEntityDecl()
private void ReadEntityValueDecl(DTDEntityDeclaration decl)
private DTDAttListDeclaration ReadAttListDecl()
private DTDAttributeDefinition ReadAttributeDefinition()
private void ReadAttributeDefaultValue(DTDAttributeDefinition def)
private DTDNotationDeclaration ReadNotationDecl()
private void ReadExternalID()
private string ReadSystemLiteral(bool expectSYSTEM)
private string ReadPubidLiteral()
internal string ReadName()
private string ReadNmToken()
private string ReadNameOrNmToken(bool isNameToken)
private void Expect(int expected)
private void Expect(string expected)
private void ExpectAfterWhitespace(char c)
private bool SkipWhitespace()
private int PeekChar()
private int ReadChar()
private void ReadComment()
private void ReadProcessingInstruction()
private void ReadTextDeclaration()
private void AppendNameChar(int ch)
private void CheckNameCapacity()
private string CreateNameString()
private void AppendValueChar(int ch)
private string CreateValueString()
private void ClearValueBuffer()
private string ReadDefaultAttribute()
private void PushParserInput(string url)
private void PopParserInput()
private void HandleError(XmlSchemaException ex)
}
public System.Xml.EntityHandling : Enum {
public int value__
public EntityHandling ExpandEntities
public EntityHandling ExpandCharEntities
}
public System.Xml.Formatting : Enum {
public int value__
public Formatting None
public Formatting Indented
}
internal System.Xml.IHasXmlChildNode {
public XmlLinkedNode LastLinkedChild
public XmlLinkedNode get_LastLinkedChild()
public void set_LastLinkedChild(XmlLinkedNode value)
}
public System.Xml.IHasXmlNode {
public XmlNode GetNode()
}
public System.Xml.IXmlLineInfo {
public int LineNumber
public int LinePosition
public int get_LineNumber()
public int get_LinePosition()
public bool HasLineInfo()
}
public System.Xml.IXmlNamespaceResolver {
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupNamespace(string prefix)
public string LookupPrefix(string ns)
}
internal System.Xml.MonoFIXAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal System.Xml.NamespaceHandling : Enum {
public int value__
public NamespaceHandling Default
public NamespaceHandling OmitDuplicates
}
public System.Xml.NameTable : XmlNameTable {
private int INITIAL_BUCKETS
private int count
private Entry[] buckets
private int size
public string Add(Char[] key, int start, int len)
public string Add(string key)
public string Get(Char[] key, int start, int len)
public string Get(string value)
private string AddEntry(string str, int hash)
private bool StrEqArray(string str, Char[] str2, int start)
}
public System.Xml.NewLineHandling : Enum {
public int value__
public NewLineHandling Replace
public NewLineHandling Entitize
public NewLineHandling None
}
internal System.Xml.NonBlockingStreamReader : TextReader {
private int DefaultBufferSize
private int DefaultFileBufferSize
private int MinimumBufferSize
private Byte[] input_buffer
private Char[] decoded_buffer
private int decoded_count
private int pos
private int buffer_size
private Encoding encoding
private Decoder decoder
private Stream base_stream
private bool mayBlock
private StringBuilder line_builder
private bool foundCR
public Encoding Encoding
public void .ctor(Stream stream, Encoding encoding)
public Encoding get_Encoding()
public void Close()
protected void Dispose(bool disposing)
public void DiscardBufferedData()
private int ReadBuffer()
public int Peek()
public int Read()
public int Read(Char[] dest_buffer, int index, int count)
private int FindNextEOL()
public string ReadLine()
public string ReadToEnd()
}
public System.Xml.ReadState : Enum {
public int value__
public ReadState Initial
public ReadState Interactive
public ReadState Error
public ReadState EndOfFile
public ReadState Closed
}
public System.Xml.Schema.IXmlSchemaInfo {
public bool IsDefault
public bool IsNil
public XmlSchemaSimpleType MemberType
public XmlSchemaAttribute SchemaAttribute
public XmlSchemaElement SchemaElement
public XmlSchemaType SchemaType
public XmlSchemaValidity Validity
public bool get_IsDefault()
public bool get_IsNil()
public XmlSchemaSimpleType get_MemberType()
public XmlSchemaAttribute get_SchemaAttribute()
public XmlSchemaElement get_SchemaElement()
public XmlSchemaType get_SchemaType()
public XmlSchemaValidity get_Validity()
}
internal System.Xml.Schema.QNameValueType : ValueType {
private XmlQualifiedName value
public XmlQualifiedName Value
public void .ctor(XmlQualifiedName value)
public XmlQualifiedName get_Value()
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(QNameValueType v1, QNameValueType v2)
public bool op_Inequality(QNameValueType v1, QNameValueType v2)
}
internal System.Xml.Schema.StringArrayValueType : ValueType {
private String[] value
public String[] Value
public void .ctor(String[] value)
public String[] get_Value()
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(StringArrayValueType v1, StringArrayValueType v2)
public bool op_Inequality(StringArrayValueType v1, StringArrayValueType v2)
}
internal System.Xml.Schema.StringValueType : ValueType {
private string value
public string Value
public void .ctor(string value)
public string get_Value()
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(StringValueType v1, StringValueType v2)
public bool op_Inequality(StringValueType v1, StringValueType v2)
}
internal System.Xml.Schema.UriValueType : ValueType {
private XmlSchemaUri value
public XmlSchemaUri Value
public void .ctor(XmlSchemaUri value)
public XmlSchemaUri get_Value()
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public bool op_Equality(UriValueType v1, UriValueType v2)
public bool op_Inequality(UriValueType v1, UriValueType v2)
}
public System.Xml.Schema.ValidationEventArgs : EventArgs {
private XmlSchemaException exception
private string message
private XmlSeverityType severity
public XmlSchemaException Exception
public string Message
public XmlSeverityType Severity
internal void .ctor(XmlSchemaException ex, string message, XmlSeverityType severity)
public XmlSchemaException get_Exception()
public string get_Message()
public XmlSeverityType get_Severity()
}
public System.Xml.Schema.ValidationEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ValidationEventArgs e)
public IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Xml.Schema.ValidationHandler : object {
public void RaiseValidationEvent(ValidationEventHandler handle, Exception innerException, string message, XmlSchemaObject xsobj, object sender, string sourceUri, XmlSeverityType severity)
}
public System.Xml.Schema.XmlAtomicValue : XPathItem {
private bool booleanValue
private DateTime dateTimeValue
private decimal decimalValue
private double doubleValue
private int intValue
private long longValue
private object objectValue
private float floatValue
private string stringValue
private XmlSchemaType schemaType
private XmlTypeCode xmlTypeCode
public bool IsNode
internal XmlTypeCode ResolvedTypeCode
public object TypedValue
public string Value
public bool ValueAsBoolean
public DateTime ValueAsDateTime
public double ValueAsDouble
public int ValueAsInt
public long ValueAsLong
public Type ValueType
public XmlSchemaType XmlType
internal void .ctor(bool value, XmlSchemaType xmlType)
internal void .ctor(DateTime value, XmlSchemaType xmlType)
internal void .ctor(decimal value, XmlSchemaType xmlType)
internal void .ctor(double value, XmlSchemaType xmlType)
internal void .ctor(int value, XmlSchemaType xmlType)
internal void .ctor(long value, XmlSchemaType xmlType)
internal void .ctor(float value, XmlSchemaType xmlType)
internal void .ctor(string value, XmlSchemaType xmlType)
internal void .ctor(object value, XmlSchemaType xmlType)
private object System.ICloneable.Clone()
private void Init(bool value, XmlSchemaType xmlType)
private void Init(DateTime value, XmlSchemaType xmlType)
private void Init(decimal value, XmlSchemaType xmlType)
private void Init(double value, XmlSchemaType xmlType)
private void Init(int value, XmlSchemaType xmlType)
private void Init(long value, XmlSchemaType xmlType)
private void Init(float value, XmlSchemaType xmlType)
private void Init(string value, XmlSchemaType xmlType)
private void Init(object value, XmlSchemaType xmlType)
public XmlAtomicValue Clone()
public object ValueAs(Type type, IXmlNamespaceResolver nsResolver)
public string ToString()
public bool get_IsNode()
internal XmlTypeCode get_ResolvedTypeCode()
public object get_TypedValue()
public string get_Value()
public bool get_ValueAsBoolean()
public DateTime get_ValueAsDateTime()
public double get_ValueAsDouble()
public int get_ValueAsInt()
public long get_ValueAsLong()
public Type get_ValueType()
public XmlSchemaType get_XmlType()
internal Type RuntimeTypeFromXmlTypeCode(XmlTypeCode typeCode)
internal XmlTypeCode XmlTypeCodeFromRuntimeType(Type cliType, bool raiseError)
}
public System.Xml.Schema.XmlSchema : XmlSchemaObject {
public string Namespace
public string InstanceNamespace
internal string XdtNamespace
private string xmlname
private XmlSchemaForm attributeFormDefault
private XmlSchemaObjectTable attributeGroups
private XmlSchemaObjectTable attributes
private XmlSchemaDerivationMethod blockDefault
private XmlSchemaForm elementFormDefault
private XmlSchemaObjectTable elements
private XmlSchemaDerivationMethod finalDefault
private XmlSchemaObjectTable groups
private string id
private XmlSchemaObjectCollection includes
private XmlSchemaObjectCollection items
private XmlSchemaObjectTable notations
private XmlSchemaObjectTable schemaTypes
private string targetNamespace
private XmlAttribute[] unhandledAttributes
private string version
private XmlSchemaSet schemas
private XmlNameTable nameTable
internal bool missedSubComponents
private XmlSchemaObjectCollection compilationItems
private Dictionary`2<string, int> <>f__switch$map41
public XmlSchemaForm AttributeFormDefault
public XmlSchemaDerivationMethod BlockDefault
public XmlSchemaDerivationMethod FinalDefault
public XmlSchemaForm ElementFormDefault
public string TargetNamespace
public string Version
public XmlSchemaObjectCollection Includes
public XmlSchemaObjectCollection Items
public bool IsCompiled
public XmlSchemaObjectTable Attributes
public XmlSchemaObjectTable AttributeGroups
public XmlSchemaObjectTable SchemaTypes
public XmlSchemaObjectTable Elements
public string Id
public XmlAttribute[] UnhandledAttributes
public XmlSchemaObjectTable Groups
public XmlSchemaObjectTable Notations
internal XmlSchemaObjectTable NamedIdentities
internal XmlSchemaSet Schemas
internal Hashtable IDCollection
public XmlSchemaForm get_AttributeFormDefault()
public void set_AttributeFormDefault(XmlSchemaForm value)
public XmlSchemaDerivationMethod get_BlockDefault()
public void set_BlockDefault(XmlSchemaDerivationMethod value)
public XmlSchemaDerivationMethod get_FinalDefault()
public void set_FinalDefault(XmlSchemaDerivationMethod value)
public XmlSchemaForm get_ElementFormDefault()
public void set_ElementFormDefault(XmlSchemaForm value)
public string get_TargetNamespace()
public void set_TargetNamespace(string value)
public string get_Version()
public void set_Version(string value)
public XmlSchemaObjectCollection get_Includes()
public XmlSchemaObjectCollection get_Items()
public bool get_IsCompiled()
public XmlSchemaObjectTable get_Attributes()
public XmlSchemaObjectTable get_AttributeGroups()
public XmlSchemaObjectTable get_SchemaTypes()
public XmlSchemaObjectTable get_Elements()
public string get_Id()
public void set_Id(string value)
public XmlAttribute[] get_UnhandledAttributes()
public void set_UnhandledAttributes(XmlAttribute[] value)
public XmlSchemaObjectTable get_Groups()
public XmlSchemaObjectTable get_Notations()
internal XmlSchemaObjectTable get_NamedIdentities()
internal XmlSchemaSet get_Schemas()
internal Hashtable get_IDCollection()
public void Compile(ValidationEventHandler handler)
public void Compile(ValidationEventHandler handler, XmlResolver resolver)
internal void CompileSubset(ValidationEventHandler handler, XmlSchemaSet col, XmlResolver resolver)
internal void CompileSubset(ValidationEventHandler handler, XmlSchemaSet col, XmlResolver resolver, Hashtable handledUris)
private void SetParent()
private void DoCompile(ValidationEventHandler handler, Hashtable handledUris, XmlSchemaSet col, XmlResolver resolver)
private string GetResolvedUri(XmlResolver resolver, string relativeUri)
private void ProcessExternal(ValidationEventHandler handler, Hashtable handledUris, XmlResolver resolver, XmlSchemaExternal ext, XmlSchemaSet col)
private void AddExternalComponentsTo(XmlSchema s, XmlSchemaObjectCollection items, ValidationEventHandler handler, Hashtable handledUris, XmlResolver resolver, XmlSchemaSet col)
internal bool IsNamespaceAbsent(string ns)
internal XmlSchemaAttribute FindAttribute(XmlQualifiedName name)
internal XmlSchemaAttributeGroup FindAttributeGroup(XmlQualifiedName name)
internal XmlSchemaElement FindElement(XmlQualifiedName name)
internal XmlSchemaType FindSchemaType(XmlQualifiedName name)
internal void Validate(ValidationEventHandler handler)
public XmlSchema Read(TextReader reader, ValidationEventHandler validationEventHandler)
public XmlSchema Read(Stream stream, ValidationEventHandler validationEventHandler)
public XmlSchema Read(XmlReader rdr, ValidationEventHandler validationEventHandler)
private void ReadAttributes(XmlSchema schema, XmlSchemaReader reader, ValidationEventHandler h)
private void ReadContent(XmlSchema schema, XmlSchemaReader reader, ValidationEventHandler h)
public void Write(Stream stream)
public void Write(TextWriter writer)
public void Write(XmlWriter writer)
public void Write(Stream stream, XmlNamespaceManager namespaceManager)
public void Write(TextWriter writer, XmlNamespaceManager namespaceManager)
public void Write(XmlWriter writer, XmlNamespaceManager namespaceManager)
}
public System.Xml.Schema.XmlSchemaAll : XmlSchemaGroupBase {
private string xmlname
private XmlSchema schema
private XmlSchemaObjectCollection items
private bool emptiable
public XmlSchemaObjectCollection Items
internal bool Emptiable
public XmlSchemaObjectCollection get_Items()
internal bool get_Emptiable()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaParticle GetOptimizedParticle(bool isTop)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
private void ComputeEmptiable()
internal bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal decimal GetMinEffectiveTotalRange()
internal void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaAll Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaAnnotated : XmlSchemaObject {
private XmlSchemaAnnotation annotation
private string id
private XmlAttribute[] unhandledAttributes
public string Id
public XmlSchemaAnnotation Annotation
public XmlAttribute[] UnhandledAttributes
public string get_Id()
public void set_Id(string value)
public XmlSchemaAnnotation get_Annotation()
public void set_Annotation(XmlSchemaAnnotation value)
public XmlAttribute[] get_UnhandledAttributes()
public void set_UnhandledAttributes(XmlAttribute[] value)
}
public System.Xml.Schema.XmlSchemaAnnotation : XmlSchemaObject {
private string xmlname
private string id
private XmlSchemaObjectCollection items
private XmlAttribute[] unhandledAttributes
public string Id
public XmlSchemaObjectCollection Items
public XmlAttribute[] UnhandledAttributes
public string get_Id()
public void set_Id(string value)
public XmlSchemaObjectCollection get_Items()
public XmlAttribute[] get_UnhandledAttributes()
public void set_UnhandledAttributes(XmlAttribute[] value)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaAnnotation Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaAny : XmlSchemaParticle {
private string xmlname
private XmlSchemaAny anyTypeContent
private string nameSpace
private XmlSchemaContentProcessing processing
private XsdWildcard wildcard
internal XmlSchemaAny AnyTypeContent
public string Namespace
public XmlSchemaContentProcessing ProcessContents
internal bool HasValueAny
internal bool HasValueLocal
internal bool HasValueOther
internal bool HasValueTargetNamespace
internal StringCollection ResolvedNamespaces
internal XmlSchemaContentProcessing ResolvedProcessContents
internal string TargetNamespace
internal XmlSchemaAny get_AnyTypeContent()
public string get_Namespace()
public void set_Namespace(string value)
public XmlSchemaContentProcessing get_ProcessContents()
public void set_ProcessContents(XmlSchemaContentProcessing value)
internal bool get_HasValueAny()
internal bool get_HasValueLocal()
internal bool get_HasValueOther()
internal bool get_HasValueTargetNamespace()
internal StringCollection get_ResolvedNamespaces()
internal XmlSchemaContentProcessing get_ResolvedProcessContents()
internal string get_TargetNamespace()
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaParticle GetOptimizedParticle(bool isTop)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal bool ParticleEquals(XmlSchemaParticle other)
internal bool ExamineAttributeWildcardIntersection(XmlSchemaAny other, ValidationEventHandler h, XmlSchema schema)
internal bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema)
internal bool ValidateWildcardAllowsNamespaceName(string ns, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal XmlSchemaAny Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaAnyAttribute : XmlSchemaAnnotated {
private string xmlname
private string nameSpace
private XmlSchemaContentProcessing processing
private XsdWildcard wildcard
public string Namespace
public XmlSchemaContentProcessing ProcessContents
internal bool HasValueAny
internal bool HasValueLocal
internal bool HasValueOther
internal bool HasValueTargetNamespace
internal StringCollection ResolvedNamespaces
internal XmlSchemaContentProcessing ResolvedProcessContents
internal string TargetNamespace
public string get_Namespace()
public void set_Namespace(string value)
public XmlSchemaContentProcessing get_ProcessContents()
public void set_ProcessContents(XmlSchemaContentProcessing value)
internal bool get_HasValueAny()
internal bool get_HasValueLocal()
internal bool get_HasValueOther()
internal bool get_HasValueTargetNamespace()
internal StringCollection get_ResolvedNamespaces()
internal XmlSchemaContentProcessing get_ResolvedProcessContents()
internal string get_TargetNamespace()
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal void ValidateWildcardSubset(XmlSchemaAnyAttribute other, ValidationEventHandler h, XmlSchema schema)
internal bool ValidateWildcardAllowsNamespaceName(string ns, XmlSchema schema)
internal XmlSchemaAnyAttribute Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaAppInfo : XmlSchemaObject {
private XmlNode[] markup
private string source
public string Source
public XmlNode[] Markup
public string get_Source()
public void set_Source(string value)
public XmlNode[] get_Markup()
public void set_Markup(XmlNode[] value)
internal XmlSchemaAppInfo Read(XmlSchemaReader reader, ValidationEventHandler h, Boolean& skip)
}
public System.Xml.Schema.XmlSchemaAttribute : XmlSchemaAnnotated {
private string xmlname
private object attributeType
private XmlSchemaSimpleType attributeSchemaType
private string defaultValue
private string fixedValue
private string validatedDefaultValue
private string validatedFixedValue
private object validatedFixedTypedValue
private XmlSchemaForm form
private string name
private string targetNamespace
private XmlQualifiedName qualifiedName
private XmlQualifiedName refName
private XmlSchemaSimpleType schemaType
private XmlQualifiedName schemaTypeName
private XmlSchemaUse use
private XmlSchemaUse validatedUse
private XmlSchemaAttribute referencedAttribute
internal bool ParentIsSchema
public string DefaultValue
public string FixedValue
public XmlSchemaForm Form
public string Name
public XmlQualifiedName RefName
public XmlQualifiedName SchemaTypeName
public XmlSchemaSimpleType SchemaType
public XmlSchemaUse Use
public XmlQualifiedName QualifiedName
public object AttributeType
public XmlSchemaSimpleType AttributeSchemaType
internal string ValidatedDefaultValue
internal string ValidatedFixedValue
internal object ValidatedFixedTypedValue
internal XmlSchemaUse ValidatedUse
internal bool get_ParentIsSchema()
public string get_DefaultValue()
public void set_DefaultValue(string value)
public string get_FixedValue()
public void set_FixedValue(string value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public string get_Name()
public void set_Name(string value)
public XmlQualifiedName get_RefName()
public void set_RefName(XmlQualifiedName value)
public XmlQualifiedName get_SchemaTypeName()
public void set_SchemaTypeName(XmlQualifiedName value)
public XmlSchemaSimpleType get_SchemaType()
public void set_SchemaType(XmlSchemaSimpleType value)
public XmlSchemaUse get_Use()
public void set_Use(XmlSchemaUse value)
public XmlQualifiedName get_QualifiedName()
public object get_AttributeType()
public XmlSchemaSimpleType get_AttributeSchemaType()
internal string get_ValidatedDefaultValue()
internal string get_ValidatedFixedValue()
internal object get_ValidatedFixedTypedValue()
internal XmlSchemaUse get_ValidatedUse()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
private void CompileCommon(ValidationEventHandler h, XmlSchema schema, bool refIsNotPresent)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal bool AttributeEquals(XmlSchemaAttribute other)
internal XmlSchemaAttribute Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaAttributeGroup : XmlSchemaAnnotated {
private string xmlname
private XmlSchemaAnyAttribute anyAttribute
private XmlSchemaObjectCollection attributes
private string name
private XmlSchemaAttributeGroup redefined
private XmlQualifiedName qualifiedName
private XmlSchemaObjectTable attributeUses
private XmlSchemaAnyAttribute anyAttributeUse
internal bool AttributeGroupRecursionCheck
public string Name
public XmlSchemaObjectCollection Attributes
internal XmlSchemaObjectTable AttributeUses
internal XmlSchemaAnyAttribute AnyAttributeUse
public XmlSchemaAnyAttribute AnyAttribute
public XmlSchemaAttributeGroup RedefinedAttributeGroup
public XmlQualifiedName QualifiedName
public string get_Name()
public void set_Name(string value)
public XmlSchemaObjectCollection get_Attributes()
internal XmlSchemaObjectTable get_AttributeUses()
internal XmlSchemaAnyAttribute get_AnyAttributeUse()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
public XmlSchemaAttributeGroup get_RedefinedAttributeGroup()
public XmlQualifiedName get_QualifiedName()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaAttributeGroup Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaAttributeGroupRef : XmlSchemaAnnotated {
private string xmlname
private XmlQualifiedName refName
public XmlQualifiedName RefName
public XmlQualifiedName get_RefName()
public void set_RefName(XmlQualifiedName value)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaAttributeGroupRef Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaChoice : XmlSchemaGroupBase {
private string xmlname
private XmlSchemaObjectCollection items
private decimal minEffectiveTotalRange
public XmlSchemaObjectCollection Items
public XmlSchemaObjectCollection get_Items()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaParticle GetOptimizedParticle(bool isTop)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal decimal GetMinEffectiveTotalRange()
internal void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaChoice Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaCollection : object {
private XmlSchemaSet schemaSet
private ValidationEventHandler ValidationEventHandler
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
internal XmlSchemaSet SchemaSet
public int Count
public XmlNameTable NameTable
public XmlSchema Item
public void .ctor(XmlNameTable nameTable)
internal void .ctor(XmlSchemaSet schemaSet)
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
private int System.Collections.ICollection.get_Count()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private bool System.Collections.ICollection.get_IsSynchronized()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private object System.Collections.ICollection.get_SyncRoot()
internal XmlSchemaSet get_SchemaSet()
public int get_Count()
public XmlNameTable get_NameTable()
public XmlSchema get_Item(string ns)
public XmlSchema Add(string ns, XmlReader reader)
public XmlSchema Add(string ns, XmlReader reader, XmlResolver resolver)
public XmlSchema Add(string ns, string uri)
public XmlSchema Add(XmlSchema schema)
public XmlSchema Add(XmlSchema schema, XmlResolver resolver)
public void Add(XmlSchemaCollection schema)
public bool Contains(string ns)
public bool Contains(XmlSchema schema)
public void CopyTo(XmlSchema[] array, int index)
public XmlSchemaCollectionEnumerator GetEnumerator()
private void OnValidationError(object o, ValidationEventArgs e)
}
public System.Xml.Schema.XmlSchemaCollectionEnumerator : object {
private IEnumerator xenum
private object System.Collections.IEnumerator.Current
public XmlSchema Current
internal void .ctor(ICollection col)
private bool System.Collections.IEnumerator.MoveNext()
private void System.Collections.IEnumerator.Reset()
private object System.Collections.IEnumerator.get_Current()
public XmlSchema get_Current()
public bool MoveNext()
}
public System.Xml.Schema.XmlSchemaCompilationSettings : object {
private bool enable_upa_check
public bool EnableUpaCheck
public bool get_EnableUpaCheck()
public void set_EnableUpaCheck(bool value)
}
public System.Xml.Schema.XmlSchemaComplexContent : XmlSchemaContentModel {
private string xmlname
private XmlSchemaContent content
private bool isMixed
public bool IsMixed
public XmlSchemaContent Content
public bool get_IsMixed()
public void set_IsMixed(bool value)
public XmlSchemaContent get_Content()
public void set_Content(XmlSchemaContent value)
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaComplexContent Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaComplexContentExtension : XmlSchemaContent {
private string xmlname
private XmlSchemaAnyAttribute any
private XmlSchemaObjectCollection attributes
private XmlQualifiedName baseTypeName
private XmlSchemaParticle particle
public XmlQualifiedName BaseTypeName
public XmlSchemaParticle Particle
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
internal bool IsExtension
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaParticle get_Particle()
public void set_Particle(XmlSchemaParticle value)
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
internal bool get_IsExtension()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlQualifiedName GetBaseTypeName()
internal XmlSchemaParticle GetParticle()
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaComplexContentExtension Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaComplexContentRestriction : XmlSchemaContent {
private string xmlname
private XmlSchemaAnyAttribute any
private XmlSchemaObjectCollection attributes
private XmlQualifiedName baseTypeName
private XmlSchemaParticle particle
public XmlQualifiedName BaseTypeName
public XmlSchemaParticle Particle
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
internal bool IsExtension
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaParticle get_Particle()
public void set_Particle(XmlSchemaParticle value)
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
internal bool get_IsExtension()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlQualifiedName GetBaseTypeName()
internal XmlSchemaParticle GetParticle()
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaComplexContentRestriction Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaComplexType : XmlSchemaType {
private string xmlname
private XmlSchemaAnyAttribute anyAttribute
private XmlSchemaObjectCollection attributes
private XmlSchemaObjectTable attributeUses
private XmlSchemaAnyAttribute attributeWildcard
private XmlSchemaDerivationMethod block
private XmlSchemaDerivationMethod blockResolved
private XmlSchemaContentModel contentModel
private XmlSchemaParticle validatableParticle
private XmlSchemaParticle contentTypeParticle
private bool isAbstract
private bool isMixed
private XmlSchemaParticle particle
private XmlSchemaContentType resolvedContentType
internal bool ValidatedIsAbstract
private XmlSchemaComplexType anyType
internal XmlQualifiedName AnyTypeName
private Guid CollectProcessId
internal bool ParentIsSchema
internal XmlSchemaComplexType AnyType
public bool IsAbstract
public XmlSchemaDerivationMethod Block
public bool IsMixed
public XmlSchemaContentModel ContentModel
public XmlSchemaParticle Particle
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
public XmlSchemaContentType ContentType
public XmlSchemaParticle ContentTypeParticle
public XmlSchemaDerivationMethod BlockResolved
public XmlSchemaObjectTable AttributeUses
public XmlSchemaAnyAttribute AttributeWildcard
internal XmlSchemaParticle ValidatableParticle
internal bool get_ParentIsSchema()
internal XmlSchemaComplexType get_AnyType()
public bool get_IsAbstract()
public void set_IsAbstract(bool value)
public XmlSchemaDerivationMethod get_Block()
public void set_Block(XmlSchemaDerivationMethod value)
public bool get_IsMixed()
public void set_IsMixed(bool value)
public XmlSchemaContentModel get_ContentModel()
public void set_ContentModel(XmlSchemaContentModel value)
public XmlSchemaParticle get_Particle()
public void set_Particle(XmlSchemaParticle value)
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
public XmlSchemaContentType get_ContentType()
public XmlSchemaParticle get_ContentTypeParticle()
public XmlSchemaDerivationMethod get_BlockResolved()
public XmlSchemaObjectTable get_AttributeUses()
public XmlSchemaAnyAttribute get_AttributeWildcard()
internal XmlSchemaParticle get_ValidatableParticle()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
private void CollectSchemaComponent(ValidationEventHandler h, XmlSchema schema)
private void FillContentTypeParticle(ValidationEventHandler h, XmlSchema schema)
private void CollectContentTypeFromImmediateContent()
private void CollectContentTypeFromContentModel(ValidationEventHandler h, XmlSchema schema)
private void CollectContentTypeFromComplexExtension(ValidationEventHandler h, XmlSchema schema)
private void CollectContentTypeFromComplexRestriction()
private XmlSchemaContentType GetComplexContentType(XmlSchemaContentModel content)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
private void ValidateImmediateAttributes(ValidationEventHandler h, XmlSchema schema)
private void ValidateContentFirstPass(ValidationEventHandler h, XmlSchema schema)
private void ValidateContentModel(ValidationEventHandler h, XmlSchema schema)
internal void ValidateTypeDerivationOK(object b, ValidationEventHandler h, XmlSchema schema)
internal void ValidateComplexBaseDerivationValidExtension(XmlSchemaComplexType baseComplexType, ValidationEventHandler h, XmlSchema schema)
internal void ValidateSimpleBaseDerivationValidExtension(object baseType, ValidationEventHandler h, XmlSchema schema)
internal void ValidateDerivationValidRestriction(XmlSchemaComplexType baseType, ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaComplexType Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaContent : XmlSchemaAnnotated {
internal object actualBaseSchemaType
internal bool IsExtension
internal bool get_IsExtension()
internal XmlQualifiedName GetBaseTypeName()
internal XmlSchemaParticle GetParticle()
}
public System.Xml.Schema.XmlSchemaContentModel : XmlSchemaAnnotated {
public XmlSchemaContent Content
public XmlSchemaContent get_Content()
public void set_Content(XmlSchemaContent value)
}
public System.Xml.Schema.XmlSchemaContentProcessing : Enum {
public int value__
public XmlSchemaContentProcessing None
public XmlSchemaContentProcessing Skip
public XmlSchemaContentProcessing Lax
public XmlSchemaContentProcessing Strict
}
public System.Xml.Schema.XmlSchemaContentType : Enum {
public int value__
public XmlSchemaContentType TextOnly
public XmlSchemaContentType Empty
public XmlSchemaContentType ElementOnly
public XmlSchemaContentType Mixed
}
public System.Xml.Schema.XmlSchemaDatatype : object {
internal XsdWhitespaceFacet WhitespaceValue
private Char[] wsChars
private StringBuilder sb
private XsdAnySimpleType datatypeAnySimpleType
private XsdString datatypeString
private XsdNormalizedString datatypeNormalizedString
private XsdToken datatypeToken
private XsdLanguage datatypeLanguage
private XsdNMToken datatypeNMToken
private XsdNMTokens datatypeNMTokens
private XsdName datatypeName
private XsdNCName datatypeNCName
private XsdID datatypeID
private XsdIDRef datatypeIDRef
private XsdIDRefs datatypeIDRefs
private XsdEntity datatypeEntity
private XsdEntities datatypeEntities
private XsdNotation datatypeNotation
private XsdDecimal datatypeDecimal
private XsdInteger datatypeInteger
private XsdLong datatypeLong
private XsdInt datatypeInt
private XsdShort datatypeShort
private XsdByte datatypeByte
private XsdNonNegativeInteger datatypeNonNegativeInteger
private XsdPositiveInteger datatypePositiveInteger
private XsdUnsignedLong datatypeUnsignedLong
private XsdUnsignedInt datatypeUnsignedInt
private XsdUnsignedShort datatypeUnsignedShort
private XsdUnsignedByte datatypeUnsignedByte
private XsdNonPositiveInteger datatypeNonPositiveInteger
private XsdNegativeInteger datatypeNegativeInteger
private XsdFloat datatypeFloat
private XsdDouble datatypeDouble
private XsdBase64Binary datatypeBase64Binary
private XsdBoolean datatypeBoolean
private XsdAnyURI datatypeAnyURI
private XsdDuration datatypeDuration
private XsdDateTime datatypeDateTime
private XsdDate datatypeDate
private XsdTime datatypeTime
private XsdHexBinary datatypeHexBinary
private XsdQName datatypeQName
private XsdGYearMonth datatypeGYearMonth
private XsdGMonthDay datatypeGMonthDay
private XsdGYear datatypeGYear
private XsdGMonth datatypeGMonth
private XsdGDay datatypeGDay
private XdtAnyAtomicType datatypeAnyAtomicType
private XdtUntypedAtomic datatypeUntypedAtomic
private XdtDayTimeDuration datatypeDayTimeDuration
private XdtYearMonthDuration datatypeYearMonthDuration
private Dictionary`2<string, int> <>f__switch$map3E
private Dictionary`2<string, int> <>f__switch$map3F
private Dictionary`2<string, int> <>f__switch$map40
internal XsdWhitespaceFacet Whitespace
public XmlTypeCode TypeCode
public XmlSchemaDatatypeVariety Variety
public XmlTokenizedType TokenizedType
public Type ValueType
internal XsdWhitespaceFacet get_Whitespace()
public XmlTypeCode get_TypeCode()
public XmlSchemaDatatypeVariety get_Variety()
public XmlTokenizedType get_TokenizedType()
public Type get_ValueType()
public object ChangeType(object value, Type targetType)
public object ChangeType(object value, Type targetType, IXmlNamespaceResolver nsResolver)
public bool IsDerivedFrom(XmlSchemaDatatype datatype)
public object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr)
internal string Normalize(string s)
internal string Normalize(string s, XsdWhitespaceFacet whitespaceFacet)
internal XmlSchemaDatatype FromName(XmlQualifiedName qname)
internal XmlSchemaDatatype FromName(string localName, string ns)
}
public System.Xml.Schema.XmlSchemaDatatypeVariety : Enum {
public int value__
public XmlSchemaDatatypeVariety Atomic
public XmlSchemaDatatypeVariety List
public XmlSchemaDatatypeVariety Union
}
public System.Xml.Schema.XmlSchemaDerivationMethod : Enum {
public int value__
public XmlSchemaDerivationMethod Empty
public XmlSchemaDerivationMethod Substitution
public XmlSchemaDerivationMethod Extension
public XmlSchemaDerivationMethod Restriction
public XmlSchemaDerivationMethod List
public XmlSchemaDerivationMethod Union
public XmlSchemaDerivationMethod All
public XmlSchemaDerivationMethod None
}
public System.Xml.Schema.XmlSchemaDocumentation : XmlSchemaObject {
private string language
private XmlNode[] markup
private string source
public XmlNode[] Markup
public string Source
public string Language
public XmlNode[] get_Markup()
public void set_Markup(XmlNode[] value)
public string get_Source()
public void set_Source(string value)
public string get_Language()
public void set_Language(string value)
internal XmlSchemaDocumentation Read(XmlSchemaReader reader, ValidationEventHandler h, Boolean& skip)
}
public System.Xml.Schema.XmlSchemaElement : XmlSchemaParticle {
private string xmlname
private XmlSchemaDerivationMethod block
private XmlSchemaObjectCollection constraints
private string defaultValue
private object elementType
private XmlSchemaType elementSchemaType
private XmlSchemaDerivationMethod final
private string fixedValue
private XmlSchemaForm form
private bool isAbstract
private bool isNillable
private string name
private XmlQualifiedName refName
private XmlSchemaType schemaType
private XmlQualifiedName schemaTypeName
private XmlQualifiedName substitutionGroup
private XmlSchema schema
internal bool parentIsSchema
private XmlQualifiedName qName
private XmlSchemaDerivationMethod blockResolved
private XmlSchemaDerivationMethod finalResolved
private XmlSchemaElement referencedElement
private ArrayList substitutingElements
private XmlSchemaElement substitutionGroupElement
private bool actualIsAbstract
private bool actualIsNillable
private string validatedDefaultValue
private string validatedFixedValue
public bool IsAbstract
public XmlSchemaDerivationMethod Block
public string DefaultValue
public XmlSchemaDerivationMethod Final
public string FixedValue
public XmlSchemaForm Form
public string Name
public bool IsNillable
public XmlQualifiedName RefName
public XmlQualifiedName SubstitutionGroup
public XmlQualifiedName SchemaTypeName
public XmlSchemaType SchemaType
public XmlSchemaObjectCollection Constraints
public XmlQualifiedName QualifiedName
public object ElementType
public XmlSchemaType ElementSchemaType
public XmlSchemaDerivationMethod BlockResolved
public XmlSchemaDerivationMethod FinalResolved
internal bool ActualIsNillable
internal bool ActualIsAbstract
internal string ValidatedDefaultValue
internal string ValidatedFixedValue
internal ArrayList SubstitutingElements
internal XmlSchemaElement SubstitutionGroupElement
private void InitPostCompileInformations()
public bool get_IsAbstract()
public void set_IsAbstract(bool value)
public XmlSchemaDerivationMethod get_Block()
public void set_Block(XmlSchemaDerivationMethod value)
public string get_DefaultValue()
public void set_DefaultValue(string value)
public XmlSchemaDerivationMethod get_Final()
public void set_Final(XmlSchemaDerivationMethod value)
public string get_FixedValue()
public void set_FixedValue(string value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public string get_Name()
public void set_Name(string value)
public bool get_IsNillable()
public void set_IsNillable(bool value)
public XmlQualifiedName get_RefName()
public void set_RefName(XmlQualifiedName value)
public XmlQualifiedName get_SubstitutionGroup()
public void set_SubstitutionGroup(XmlQualifiedName value)
public XmlQualifiedName get_SchemaTypeName()
public void set_SchemaTypeName(XmlQualifiedName value)
public XmlSchemaType get_SchemaType()
public void set_SchemaType(XmlSchemaType value)
public XmlSchemaObjectCollection get_Constraints()
public XmlQualifiedName get_QualifiedName()
public object get_ElementType()
public XmlSchemaType get_ElementSchemaType()
public XmlSchemaDerivationMethod get_BlockResolved()
public XmlSchemaDerivationMethod get_FinalResolved()
internal bool get_ActualIsNillable()
internal bool get_ActualIsAbstract()
internal string get_ValidatedDefaultValue()
internal string get_ValidatedFixedValue()
internal ArrayList get_SubstitutingElements()
internal XmlSchemaElement get_SubstitutionGroupElement()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaParticle GetOptimizedParticle(bool isTop)
private void AddSubstElementRecursively(XmlSchemaObjectCollection col, XmlSchemaElement el)
internal void FillSubstitutionElementInfo()
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal bool ParticleEquals(XmlSchemaParticle other)
internal bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError)
private bool ValidateDerivationByRestrictionNameAndTypeOK(XmlSchemaElement baseElement, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema)
private void ValidateElementDefaultValidImmediate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaElement Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaEnumerationFacet : XmlSchemaFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaEnumerationFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaException : SystemException {
private bool hasLineInfo
private int lineNumber
private int linePosition
private XmlSchemaObject sourceObj
private string sourceUri
public int LineNumber
public int LinePosition
public XmlSchemaObject SourceSchemaObject
public string SourceUri
public string Message
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception innerException, int lineNumber, int linePosition)
internal void .ctor(string message, int lineNumber, int linePosition, XmlSchemaObject sourceObject, string sourceUri, Exception innerException)
internal void .ctor(string message, object sender, string sourceUri, XmlSchemaObject sourceObject, Exception innerException)
internal void .ctor(string message, XmlSchemaObject sourceObject, Exception innerException)
public void .ctor(string message, Exception innerException)
public int get_LineNumber()
public int get_LinePosition()
public XmlSchemaObject get_SourceSchemaObject()
public string get_SourceUri()
private string GetMessage(string message, string sourceUri, object sender, XmlSchemaObject sourceObj)
private string GetMessage(string message, string sourceUri, int lineNumber, int linePosition, XmlSchemaObject sourceObj)
public string get_Message()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Xml.Schema.XmlSchemaExternal : XmlSchemaObject {
private string id
private XmlSchema schema
private string location
private XmlAttribute[] unhandledAttributes
public string SchemaLocation
public XmlSchema Schema
public string Id
public XmlAttribute[] UnhandledAttributes
public string get_SchemaLocation()
public void set_SchemaLocation(string value)
public XmlSchema get_Schema()
public void set_Schema(XmlSchema value)
public string get_Id()
public void set_Id(string value)
public XmlAttribute[] get_UnhandledAttributes()
public void set_UnhandledAttributes(XmlAttribute[] value)
}
public System.Xml.Schema.XmlSchemaFacet : XmlSchemaAnnotated {
internal Facet AllFacets
private bool isFixed
private string val
internal Facet ThisFacet
public string Value
public bool IsFixed
internal Facet get_ThisFacet()
public string get_Value()
public void set_Value(string value)
public bool get_IsFixed()
public void set_IsFixed(bool value)
}
public System.Xml.Schema.XmlSchemaForm : Enum {
public int value__
public XmlSchemaForm None
public XmlSchemaForm Qualified
public XmlSchemaForm Unqualified
}
public System.Xml.Schema.XmlSchemaFractionDigitsFacet : XmlSchemaNumericFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaFractionDigitsFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaGroup : XmlSchemaAnnotated {
private string xmlname
private string name
private XmlSchemaGroupBase particle
private XmlQualifiedName qualifiedName
private bool isCircularDefinition
public string Name
public XmlSchemaGroupBase Particle
public XmlQualifiedName QualifiedName
internal bool IsCircularDefinition
public string get_Name()
public void set_Name(string value)
public XmlSchemaGroupBase get_Particle()
public void set_Particle(XmlSchemaGroupBase value)
public XmlQualifiedName get_QualifiedName()
internal bool get_IsCircularDefinition()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaGroup Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaGroupBase : XmlSchemaParticle {
private XmlSchemaObjectCollection compiledItems
public XmlSchemaObjectCollection Items
internal XmlSchemaObjectCollection CompiledItems
public XmlSchemaObjectCollection get_Items()
internal XmlSchemaObjectCollection get_CompiledItems()
internal void CopyOptimizedItems(XmlSchemaGroupBase gb)
internal bool ParticleEquals(XmlSchemaParticle other)
internal void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema)
internal bool ValidateNSRecurseCheckCardinality(XmlSchemaAny any, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal bool ValidateRecurse(XmlSchemaGroupBase baseGroup, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal bool ValidateSeqRecurseMapSumCommon(XmlSchemaGroupBase baseGroup, ValidationEventHandler h, XmlSchema schema, bool isLax, bool isMapAndSum, bool raiseError)
}
public System.Xml.Schema.XmlSchemaGroupRef : XmlSchemaParticle {
private string xmlname
private XmlSchema schema
private XmlQualifiedName refName
private XmlSchemaGroup referencedGroup
private bool busy
public XmlQualifiedName RefName
public XmlSchemaGroupBase Particle
internal XmlSchemaGroup TargetGroup
public XmlQualifiedName get_RefName()
public void set_RefName(XmlQualifiedName value)
public XmlSchemaGroupBase get_Particle()
internal XmlSchemaGroup get_TargetGroup()
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaParticle GetOptimizedParticle(bool isTop)
internal bool ParticleEquals(XmlSchemaParticle other)
internal bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaGroupRef Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaIdentityConstraint : XmlSchemaAnnotated {
private XmlSchemaObjectCollection fields
private string name
private XmlQualifiedName qName
private XmlSchemaXPath selector
private XsdIdentitySelector compiledSelector
public string Name
public XmlSchemaXPath Selector
public XmlSchemaObjectCollection Fields
public XmlQualifiedName QualifiedName
internal XsdIdentitySelector CompiledSelector
public string get_Name()
public void set_Name(string value)
public XmlSchemaXPath get_Selector()
public void set_Selector(XmlSchemaXPath value)
public XmlSchemaObjectCollection get_Fields()
public XmlQualifiedName get_QualifiedName()
internal XsdIdentitySelector get_CompiledSelector()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
}
public System.Xml.Schema.XmlSchemaImport : XmlSchemaExternal {
private string xmlname
private XmlSchemaAnnotation annotation
private string nameSpace
public string Namespace
public XmlSchemaAnnotation Annotation
public string get_Namespace()
public void set_Namespace(string value)
public XmlSchemaAnnotation get_Annotation()
public void set_Annotation(XmlSchemaAnnotation value)
internal XmlSchemaImport Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaInclude : XmlSchemaExternal {
private string xmlname
private XmlSchemaAnnotation annotation
public XmlSchemaAnnotation Annotation
public XmlSchemaAnnotation get_Annotation()
public void set_Annotation(XmlSchemaAnnotation value)
internal XmlSchemaInclude Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaInference : object {
private InferenceOption occurrence
private InferenceOption typeInference
public InferenceOption Occurrence
public InferenceOption TypeInference
public InferenceOption get_Occurrence()
public void set_Occurrence(InferenceOption value)
public InferenceOption get_TypeInference()
public void set_TypeInference(InferenceOption value)
public XmlSchemaSet InferSchema(XmlReader xmlReader)
public XmlSchemaSet InferSchema(XmlReader xmlReader, XmlSchemaSet schemas)
}
public System.Xml.Schema.XmlSchemaInferenceException : XmlSchemaException {
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception innerException)
public void .ctor(string message, Exception innerException, int line, int column)
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Xml.Schema.XmlSchemaInfo : object {
private bool isDefault
private bool isNil
private XmlSchemaSimpleType memberType
private XmlSchemaAttribute attr
private XmlSchemaElement elem
private XmlSchemaType type
private XmlSchemaValidity validity
private XmlSchemaContentType contentType
public XmlSchemaContentType ContentType
public bool IsDefault
public bool IsNil
public XmlSchemaSimpleType MemberType
public XmlSchemaAttribute SchemaAttribute
public XmlSchemaElement SchemaElement
public XmlSchemaType SchemaType
public XmlSchemaValidity Validity
internal void .ctor(IXmlSchemaInfo info)
public XmlSchemaContentType get_ContentType()
public void set_ContentType(XmlSchemaContentType value)
public bool get_IsDefault()
public void set_IsDefault(bool value)
public bool get_IsNil()
public void set_IsNil(bool value)
public XmlSchemaSimpleType get_MemberType()
public void set_MemberType(XmlSchemaSimpleType value)
public XmlSchemaAttribute get_SchemaAttribute()
public void set_SchemaAttribute(XmlSchemaAttribute value)
public XmlSchemaElement get_SchemaElement()
public void set_SchemaElement(XmlSchemaElement value)
public XmlSchemaType get_SchemaType()
public void set_SchemaType(XmlSchemaType value)
public XmlSchemaValidity get_Validity()
public void set_Validity(XmlSchemaValidity value)
}
public System.Xml.Schema.XmlSchemaKey : XmlSchemaIdentityConstraint {
private string xmlname
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaKey Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaKeyref : XmlSchemaIdentityConstraint {
private string xmlname
private XmlQualifiedName refer
private XmlSchemaIdentityConstraint target
public XmlQualifiedName Refer
internal XmlSchemaIdentityConstraint Target
public XmlQualifiedName get_Refer()
public void set_Refer(XmlQualifiedName value)
internal XmlSchemaIdentityConstraint get_Target()
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaKeyref Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaLengthFacet : XmlSchemaNumericFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaLengthFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaMaxExclusiveFacet : XmlSchemaFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaMaxExclusiveFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaMaxInclusiveFacet : XmlSchemaFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaMaxInclusiveFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaMaxLengthFacet : XmlSchemaNumericFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaMaxLengthFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaMinExclusiveFacet : XmlSchemaFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaMinExclusiveFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaMinInclusiveFacet : XmlSchemaFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaMinInclusiveFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaMinLengthFacet : XmlSchemaNumericFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaMinLengthFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaNotation : XmlSchemaAnnotated {
private string xmlname
private string name
private string pub
private string system
private XmlQualifiedName qualifiedName
public string Name
public string Public
public string System
internal XmlQualifiedName QualifiedName
public string get_Name()
public void set_Name(string value)
public string get_Public()
public void set_Public(string value)
public string get_System()
public void set_System(string value)
internal XmlQualifiedName get_QualifiedName()
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaNotation Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaObject : object {
private int lineNumber
private int linePosition
private string sourceUri
private XmlSerializerNamespaces namespaces
internal ArrayList unhandledAttributeList
internal bool isCompiled
internal int errorCount
internal Guid CompilationId
internal Guid ValidationId
internal bool isRedefineChild
internal bool isRedefinedComponent
internal XmlSchemaObject redefinedObject
private XmlSchemaObject parent
public int LineNumber
public int LinePosition
public string SourceUri
public XmlSchemaObject Parent
internal XmlSchema AncestorSchema
public XmlSerializerNamespaces Namespaces
public int get_LineNumber()
public void set_LineNumber(int value)
public int get_LinePosition()
public void set_LinePosition(int value)
public string get_SourceUri()
public void set_SourceUri(string value)
public XmlSchemaObject get_Parent()
public void set_Parent(XmlSchemaObject value)
internal XmlSchema get_AncestorSchema()
internal void SetParent(XmlSchemaObject parent)
public XmlSerializerNamespaces get_Namespaces()
public void set_Namespaces(XmlSerializerNamespaces value)
internal void error(ValidationEventHandler handle, string message)
internal void warn(ValidationEventHandler handle, string message)
internal void error(ValidationEventHandler handle, string message, Exception innerException)
internal void warn(ValidationEventHandler handle, string message, Exception innerException)
internal void error(ValidationEventHandler handle, string message, Exception innerException, XmlSchemaObject xsobj, object sender)
internal void warn(ValidationEventHandler handle, string message, Exception innerException, XmlSchemaObject xsobj, object sender)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal bool IsValidated(Guid validationId)
internal void CopyInfo(XmlSchemaParticle obj)
}
public System.Xml.Schema.XmlSchemaObjectCollection : CollectionBase {
public XmlSchemaObject Item
public void .ctor(XmlSchemaObject parent)
public XmlSchemaObject get_Item(int index)
public void set_Item(int index, XmlSchemaObject value)
public int Add(XmlSchemaObject item)
public bool Contains(XmlSchemaObject item)
public void CopyTo(XmlSchemaObject[] array, int index)
public XmlSchemaObjectEnumerator GetEnumerator()
public int IndexOf(XmlSchemaObject item)
public void Insert(int index, XmlSchemaObject item)
protected void OnClear()
protected void OnInsert(int index, object item)
protected void OnRemove(int index, object item)
protected void OnSet(int index, object oldValue, object newValue)
public void Remove(XmlSchemaObject item)
}
public System.Xml.Schema.XmlSchemaObjectEnumerator : object {
private IEnumerator ienum
private object System.Collections.IEnumerator.Current
public XmlSchemaObject Current
internal void .ctor(IList list)
private bool System.Collections.IEnumerator.MoveNext()
private void System.Collections.IEnumerator.Reset()
private object System.Collections.IEnumerator.get_Current()
public XmlSchemaObject get_Current()
public bool MoveNext()
public void Reset()
}
public System.Xml.Schema.XmlSchemaObjectTable : object {
private HybridDictionary table
public int Count
public XmlSchemaObject Item
public ICollection Names
public ICollection Values
public int get_Count()
public XmlSchemaObject get_Item(XmlQualifiedName name)
public ICollection get_Names()
public ICollection get_Values()
public bool Contains(XmlQualifiedName name)
public IDictionaryEnumerator GetEnumerator()
internal void Add(XmlQualifiedName name, XmlSchemaObject value)
internal void Clear()
internal void Set(XmlQualifiedName name, XmlSchemaObject value)
}
public System.Xml.Schema.XmlSchemaParticle : XmlSchemaAnnotated {
private decimal minOccurs
private decimal maxOccurs
private string minstr
private string maxstr
private XmlSchemaParticle empty
private decimal validatedMinOccurs
private decimal validatedMaxOccurs
internal int recursionDepth
private decimal minEffectiveTotalRange
internal bool parentIsGroupDefinition
internal XmlSchemaParticle OptimizedParticle
internal XmlSchemaParticle Empty
public string MinOccursString
public string MaxOccursString
public decimal MinOccurs
public decimal MaxOccurs
internal decimal ValidatedMinOccurs
internal decimal ValidatedMaxOccurs
internal XmlSchemaParticle get_Empty()
public string get_MinOccursString()
public void set_MinOccursString(string value)
public string get_MaxOccursString()
public void set_MaxOccursString(string value)
public decimal get_MinOccurs()
public void set_MinOccurs(decimal value)
public decimal get_MaxOccurs()
public void set_MaxOccurs(decimal value)
internal decimal get_ValidatedMinOccurs()
internal decimal get_ValidatedMaxOccurs()
internal XmlSchemaParticle GetOptimizedParticle(bool isTop)
internal XmlSchemaParticle GetShallowClone()
internal void CompileOccurence(ValidationEventHandler h, XmlSchema schema)
internal void CopyInfo(XmlSchemaParticle obj)
internal bool ValidateOccurenceRangeOK(XmlSchemaParticle other, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal decimal GetMinEffectiveTotalRange()
internal decimal GetMinEffectiveTotalRangeAllAndSequence()
internal bool ValidateIsEmptiable()
internal bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema)
internal void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema)
internal bool ParticleEquals(XmlSchemaParticle other)
}
public System.Xml.Schema.XmlSchemaPatternFacet : XmlSchemaFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaPatternFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
internal System.Xml.Schema.XmlSchemaReader : XmlReader {
private XmlReader reader
private ValidationEventHandler handler
private bool hasLineInfo
public string FullName
public XmlReader Reader
public int LineNumber
public int LinePosition
public int AttributeCount
public string BaseURI
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasAttributes
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public string Item
public string Item
public string Item
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public char QuoteChar
public ReadState ReadState
public string Value
public string XmlLang
public XmlSpace XmlSpace
public void .ctor(XmlReader reader, ValidationEventHandler handler)
public string get_FullName()
public XmlReader get_Reader()
public void RaiseInvalidElementError()
public bool ReadNextElement()
public void SkipToEnd()
public bool HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanResolveEntity()
public int get_Depth()
public bool get_EOF()
public bool get_HasAttributes()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string namespaceURI)
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
public char get_QuoteChar()
public ReadState get_ReadState()
public string get_Value()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public void Close()
public bool Equals(object obj)
public string GetAttribute(int i)
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public int GetHashCode()
public bool IsStartElement()
public bool IsStartElement(string localname, string ns)
public bool IsStartElement(string name)
public string LookupNamespace(string prefix)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string ns)
public XmlNodeType MoveToContent()
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
public bool ReadAttributeValue()
public string ReadElementString()
public string ReadElementString(string localname, string ns)
public string ReadElementString(string name)
public void ReadEndElement()
public string ReadInnerXml()
public string ReadOuterXml()
public void ReadStartElement()
public void ReadStartElement(string localname, string ns)
public void ReadStartElement(string name)
public string ReadString()
public void ResolveEntity()
public void Skip()
public string ToString()
}
public System.Xml.Schema.XmlSchemaRedefine : XmlSchemaExternal {
private string xmlname
private XmlSchemaObjectTable attributeGroups
private XmlSchemaObjectTable groups
private XmlSchemaObjectCollection items
private XmlSchemaObjectTable schemaTypes
public XmlSchemaObjectCollection Items
public XmlSchemaObjectTable AttributeGroups
public XmlSchemaObjectTable SchemaTypes
public XmlSchemaObjectTable Groups
public XmlSchemaObjectCollection get_Items()
public XmlSchemaObjectTable get_AttributeGroups()
public XmlSchemaObjectTable get_SchemaTypes()
public XmlSchemaObjectTable get_Groups()
internal void SetParent(XmlSchemaObject parent)
internal XmlSchemaRedefine Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaSequence : XmlSchemaGroupBase {
private string xmlname
private XmlSchemaObjectCollection items
public XmlSchemaObjectCollection Items
public XmlSchemaObjectCollection get_Items()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaParticle GetOptimizedParticle(bool isTop)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal decimal GetMinEffectiveTotalRange()
internal void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema)
private void ValidateUPAOnHeadingOptionalComponents(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema)
private void ValidateUPAOnItems(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema)
internal void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaSequence Read(XmlSchemaReader reader, ValidationEventHandler h)
}
internal System.Xml.Schema.XmlSchemaSerializationWriter : XmlSerializationWriter {
private string xmlNamespace
private Dictionary`2<string, int> <>f__switch$map49
public void WriteRoot_XmlSchema(object o)
private void WriteObject_XmlSchema(XmlSchema ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private string GetEnumValue_XmlSchemaForm(XmlSchemaForm val)
private string GetEnumValue_XmlSchemaDerivationMethod(XmlSchemaDerivationMethod val)
private void WriteObject_XmlSchemaInclude(XmlSchemaInclude ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaImport(XmlSchemaImport ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaRedefine(XmlSchemaRedefine ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaElement(XmlSchemaElement ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaSimpleType(XmlSchemaSimpleType ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaAttribute(XmlSchemaAttribute ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaAnnotation(XmlSchemaAnnotation ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaAttributeGroup(XmlSchemaAttributeGroup ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaGroup(XmlSchemaGroup ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaComplexType(XmlSchemaComplexType ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaNotation(XmlSchemaNotation ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaKeyref(XmlSchemaKeyref ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaKey(XmlSchemaKey ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaUnique(XmlSchemaUnique ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaSimpleTypeUnion(XmlSchemaSimpleTypeUnion ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaSimpleTypeList(XmlSchemaSimpleTypeList ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaSimpleTypeRestriction(XmlSchemaSimpleTypeRestriction ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private string GetEnumValue_XmlSchemaUse(XmlSchemaUse val)
private void WriteObject_XmlSchemaAppInfo(XmlSchemaAppInfo ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaDocumentation(XmlSchemaDocumentation ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaAttributeGroupRef(XmlSchemaAttributeGroupRef ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaAnyAttribute(XmlSchemaAnyAttribute ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaSequence(XmlSchemaSequence ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaChoice(XmlSchemaChoice ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaAll(XmlSchemaAll ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaComplexContent(XmlSchemaComplexContent ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaSimpleContent(XmlSchemaSimpleContent ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaGroupRef(XmlSchemaGroupRef ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaXPath(XmlSchemaXPath ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaMaxLengthFacet(XmlSchemaMaxLengthFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaMinLengthFacet(XmlSchemaMinLengthFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaLengthFacet(XmlSchemaLengthFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaFractionDigitsFacet(XmlSchemaFractionDigitsFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaMaxInclusiveFacet(XmlSchemaMaxInclusiveFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaMaxExclusiveFacet(XmlSchemaMaxExclusiveFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaMinExclusiveFacet(XmlSchemaMinExclusiveFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaEnumerationFacet(XmlSchemaEnumerationFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaTotalDigitsFacet(XmlSchemaTotalDigitsFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaMinInclusiveFacet(XmlSchemaMinInclusiveFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaWhiteSpaceFacet(XmlSchemaWhiteSpaceFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaPatternFacet(XmlSchemaPatternFacet ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private string GetEnumValue_XmlSchemaContentProcessing(XmlSchemaContentProcessing val)
private void WriteObject_XmlSchemaAny(XmlSchemaAny ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaComplexContentExtension(XmlSchemaComplexContentExtension ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaComplexContentRestriction(XmlSchemaComplexContentRestriction ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaSimpleContentExtension(XmlSchemaSimpleContentExtension ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
private void WriteObject_XmlSchemaSimpleContentRestriction(XmlSchemaSimpleContentRestriction ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
protected void InitCallbacks()
}
internal System.Xml.Schema.XmlSchemaSerializer : XmlSerializer {
protected void Serialize(object o, XmlSerializationWriter writer)
protected XmlSerializationWriter CreateWriter()
}
public System.Xml.Schema.XmlSchemaSet : object {
private XmlNameTable nameTable
private XmlResolver xmlResolver
private ArrayList schemas
private XmlSchemaObjectTable attributes
private XmlSchemaObjectTable elements
private XmlSchemaObjectTable types
private Hashtable idCollection
private XmlSchemaObjectTable namedIdentities
private XmlSchemaCompilationSettings settings
private bool isCompiled
internal Guid CompilationId
private ValidationEventHandler ValidationEventHandler
public int Count
public XmlSchemaObjectTable GlobalAttributes
public XmlSchemaObjectTable GlobalElements
public XmlSchemaObjectTable GlobalTypes
public bool IsCompiled
public XmlNameTable NameTable
public XmlSchemaCompilationSettings CompilationSettings
public XmlResolver XmlResolver
internal Hashtable IDCollection
internal XmlSchemaObjectTable NamedIdentities
public void .ctor(XmlNameTable nameTable)
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
public int get_Count()
public XmlSchemaObjectTable get_GlobalAttributes()
public XmlSchemaObjectTable get_GlobalElements()
public XmlSchemaObjectTable get_GlobalTypes()
public bool get_IsCompiled()
public XmlNameTable get_NameTable()
public XmlSchemaCompilationSettings get_CompilationSettings()
public void set_CompilationSettings(XmlSchemaCompilationSettings value)
public void set_XmlResolver(XmlResolver value)
internal XmlResolver get_XmlResolver()
internal Hashtable get_IDCollection()
internal XmlSchemaObjectTable get_NamedIdentities()
public XmlSchema Add(string targetNamespace, string url)
public XmlSchema Add(string targetNamespace, XmlReader reader)
public void Add(XmlSchemaSet schemaSet)
public XmlSchema Add(XmlSchema schema)
public void Compile()
private void ClearGlobalComponents()
private void AddGlobalComponents(XmlSchema schema)
public bool Contains(string targetNamespace)
public bool Contains(XmlSchema targetNamespace)
public void CopyTo(XmlSchema[] array, int index)
internal void CopyTo(Array array, int index)
private string GetSafeNs(string ns)
public XmlSchema Remove(XmlSchema schema)
private void ResetCompile()
public bool RemoveRecursive(XmlSchema schema)
public XmlSchema Reprocess(XmlSchema schema)
public ICollection Schemas()
public ICollection Schemas(string targetNamespace)
internal bool MissedSubComponents(string targetNamespace)
}
public System.Xml.Schema.XmlSchemaSimpleContent : XmlSchemaContentModel {
private string xmlname
private XmlSchemaContent content
public XmlSchemaContent Content
public XmlSchemaContent get_Content()
public void set_Content(XmlSchemaContent value)
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaSimpleContent Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaSimpleContentExtension : XmlSchemaContent {
private string xmlname
private XmlSchemaAnyAttribute any
private XmlSchemaObjectCollection attributes
private XmlQualifiedName baseTypeName
public XmlQualifiedName BaseTypeName
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
internal bool IsExtension
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
internal bool get_IsExtension()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlQualifiedName GetBaseTypeName()
internal XmlSchemaParticle GetParticle()
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaSimpleContentExtension Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaSimpleContentRestriction : XmlSchemaContent {
private string xmlname
private XmlSchemaAnyAttribute any
private XmlSchemaObjectCollection attributes
private XmlSchemaSimpleType baseType
private XmlQualifiedName baseTypeName
private XmlSchemaObjectCollection facets
public XmlQualifiedName BaseTypeName
public XmlSchemaSimpleType BaseType
public XmlSchemaObjectCollection Facets
public XmlSchemaObjectCollection Attributes
public XmlSchemaAnyAttribute AnyAttribute
internal bool IsExtension
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaSimpleType get_BaseType()
public void set_BaseType(XmlSchemaSimpleType value)
public XmlSchemaObjectCollection get_Facets()
public XmlSchemaObjectCollection get_Attributes()
public XmlSchemaAnyAttribute get_AnyAttribute()
public void set_AnyAttribute(XmlSchemaAnyAttribute value)
internal bool get_IsExtension()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XmlQualifiedName GetBaseTypeName()
internal XmlSchemaParticle GetParticle()
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaSimpleContentRestriction Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaSimpleType : XmlSchemaType {
private string xmlname
private XmlSchemaSimpleType schemaLocationType
private XmlSchemaSimpleTypeContent content
internal bool islocal
private bool recursed
private XmlSchemaDerivationMethod variety
internal XmlSchemaSimpleType XsAnySimpleType
internal XmlSchemaSimpleType XsString
internal XmlSchemaSimpleType XsBoolean
internal XmlSchemaSimpleType XsDecimal
internal XmlSchemaSimpleType XsFloat
internal XmlSchemaSimpleType XsDouble
internal XmlSchemaSimpleType XsDuration
internal XmlSchemaSimpleType XsDateTime
internal XmlSchemaSimpleType XsTime
internal XmlSchemaSimpleType XsDate
internal XmlSchemaSimpleType XsGYearMonth
internal XmlSchemaSimpleType XsGYear
internal XmlSchemaSimpleType XsGMonthDay
internal XmlSchemaSimpleType XsGDay
internal XmlSchemaSimpleType XsGMonth
internal XmlSchemaSimpleType XsHexBinary
internal XmlSchemaSimpleType XsBase64Binary
internal XmlSchemaSimpleType XsAnyUri
internal XmlSchemaSimpleType XsQName
internal XmlSchemaSimpleType XsNotation
internal XmlSchemaSimpleType XsNormalizedString
internal XmlSchemaSimpleType XsToken
internal XmlSchemaSimpleType XsLanguage
internal XmlSchemaSimpleType XsNMToken
internal XmlSchemaSimpleType XsNMTokens
internal XmlSchemaSimpleType XsName
internal XmlSchemaSimpleType XsNCName
internal XmlSchemaSimpleType XsID
internal XmlSchemaSimpleType XsIDRef
internal XmlSchemaSimpleType XsIDRefs
internal XmlSchemaSimpleType XsEntity
internal XmlSchemaSimpleType XsEntities
internal XmlSchemaSimpleType XsInteger
internal XmlSchemaSimpleType XsNonPositiveInteger
internal XmlSchemaSimpleType XsNegativeInteger
internal XmlSchemaSimpleType XsLong
internal XmlSchemaSimpleType XsInt
internal XmlSchemaSimpleType XsShort
internal XmlSchemaSimpleType XsByte
internal XmlSchemaSimpleType XsNonNegativeInteger
internal XmlSchemaSimpleType XsUnsignedLong
internal XmlSchemaSimpleType XsUnsignedInt
internal XmlSchemaSimpleType XsUnsignedShort
internal XmlSchemaSimpleType XsUnsignedByte
internal XmlSchemaSimpleType XsPositiveInteger
internal XmlSchemaSimpleType XdtUntypedAtomic
internal XmlSchemaSimpleType XdtAnyAtomicType
internal XmlSchemaSimpleType XdtYearMonthDuration
internal XmlSchemaSimpleType XdtDayTimeDuration
internal XsdAnySimpleType AnySimpleType
internal XmlSchemaSimpleType SchemaLocationType
public XmlSchemaSimpleTypeContent Content
internal XmlSchemaDerivationMethod Variety
private XmlSchemaSimpleType BuildSchemaType(string name, string baseName)
private XmlSchemaSimpleType BuildSchemaType(string name, string baseName, bool xdt, bool baseXdt)
internal XsdAnySimpleType get_AnySimpleType()
internal XmlSchemaSimpleType get_SchemaLocationType()
public XmlSchemaSimpleTypeContent get_Content()
public void set_Content(XmlSchemaSimpleTypeContent value)
internal XmlSchemaDerivationMethod get_Variety()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal void CollectBaseType(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal void ValidateDerivationValid(object baseType, XmlSchemaObjectCollection facets, ValidationEventHandler h, XmlSchema schema)
internal bool ValidateTypeDerivationOK(object baseType, ValidationEventHandler h, XmlSchema schema, bool raiseError)
internal string Normalize(string s, XmlNameTable nt, XmlNamespaceManager nsmgr)
internal XmlSchemaSimpleType Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaSimpleTypeContent : XmlSchemaAnnotated {
internal XmlSchemaSimpleType OwnerType
internal object ActualBaseSchemaType
internal object get_ActualBaseSchemaType()
internal string Normalize(string s, XmlNameTable nt, XmlNamespaceManager nsmgr)
}
public System.Xml.Schema.XmlSchemaSimpleTypeList : XmlSchemaSimpleTypeContent {
private string xmlname
private XmlSchemaSimpleType itemType
private XmlQualifiedName itemTypeName
private object validatedListItemType
private XmlSchemaSimpleType validatedListItemSchemaType
public XmlQualifiedName ItemTypeName
public XmlSchemaSimpleType ItemType
public XmlSchemaSimpleType BaseItemType
internal object ValidatedListItemType
public XmlQualifiedName get_ItemTypeName()
public void set_ItemTypeName(XmlQualifiedName value)
public XmlSchemaSimpleType get_ItemType()
public void set_ItemType(XmlSchemaSimpleType value)
public XmlSchemaSimpleType get_BaseItemType()
public void set_BaseItemType(XmlSchemaSimpleType value)
internal object get_ValidatedListItemType()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaSimpleTypeList Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaSimpleTypeRestriction : XmlSchemaSimpleTypeContent {
private string xmlname
private XmlSchemaSimpleType baseType
private XmlQualifiedName baseTypeName
private XmlSchemaObjectCollection facets
private String[] enumarationFacetValues
private String[] patternFacetValues
private Regex[] rexPatterns
private decimal lengthFacet
private decimal maxLengthFacet
private decimal minLengthFacet
private decimal fractionDigitsFacet
private decimal totalDigitsFacet
private object maxInclusiveFacet
private object maxExclusiveFacet
private object minInclusiveFacet
private object minExclusiveFacet
private Facet fixedFacets
private NumberStyles lengthStyle
private Facet listFacets
public XmlQualifiedName BaseTypeName
public XmlSchemaSimpleType BaseType
public XmlSchemaObjectCollection Facets
public XmlQualifiedName get_BaseTypeName()
public void set_BaseTypeName(XmlQualifiedName value)
public XmlSchemaSimpleType get_BaseType()
public void set_BaseType(XmlSchemaSimpleType value)
public XmlSchemaObjectCollection get_Facets()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
private bool IsAllowedFacet(XmlSchemaFacet xsf)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal void ValidateActualType(ValidationEventHandler h, XmlSchema schema)
internal object GetActualType(ValidationEventHandler h, XmlSchema schema, bool validate)
private void checkTotalDigitsFacet(XmlSchemaTotalDigitsFacet totf, ValidationEventHandler h)
private void checkFractionDigitsFacet(XmlSchemaFractionDigitsFacet fracf, ValidationEventHandler h)
private void checkMinMaxFacet(XmlSchemaFacet facet, Object& baseFacet, ValidationEventHandler h)
private void checkLengthFacet(XmlSchemaLengthFacet lf, Facet facetsDefined, ValidationEventHandler h)
private void checkMaxLengthFacet(XmlSchemaMaxLengthFacet maxlf, Facet facetsDefined, ValidationEventHandler h)
private void checkMinLengthFacet(XmlSchemaMinLengthFacet minlf, Facet facetsDefined, ValidationEventHandler h)
private XsdAnySimpleType getDatatype()
private object ValidateValueWithDatatype(string value)
internal bool ValidateValueWithFacets(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
private bool ValidateListValueWithFacets(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
private bool ValidateListValueWithFacetsCore(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
private bool ValidateNonListValueWithFacets(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
private bool ValidateNonListValueWithFacetsCore(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr)
internal XmlSchemaSimpleTypeRestriction Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaSimpleTypeUnion : XmlSchemaSimpleTypeContent {
private string xmlname
private XmlSchemaObjectCollection baseTypes
private XmlQualifiedName[] memberTypes
private Object[] validatedTypes
private XmlSchemaSimpleType[] validatedSchemaTypes
public XmlSchemaObjectCollection BaseTypes
public XmlQualifiedName[] MemberTypes
public XmlSchemaSimpleType[] BaseMemberTypes
internal Object[] ValidatedTypes
public XmlSchemaObjectCollection get_BaseTypes()
public XmlQualifiedName[] get_MemberTypes()
public void set_MemberTypes(XmlQualifiedName[] value)
public XmlSchemaSimpleType[] get_BaseMemberTypes()
internal Object[] get_ValidatedTypes()
internal void SetParent(XmlSchemaObject parent)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaSimpleTypeUnion Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaTotalDigitsFacet : XmlSchemaNumericFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaTotalDigitsFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaType : XmlSchemaAnnotated {
private XmlSchemaDerivationMethod final
private bool isMixed
private string name
private bool recursed
internal XmlQualifiedName BaseSchemaTypeName
internal XmlSchemaType BaseXmlSchemaTypeInternal
internal XmlSchemaDatatype DatatypeInternal
internal XmlSchemaDerivationMethod resolvedDerivedBy
internal XmlSchemaDerivationMethod finalResolved
internal XmlQualifiedName QNameInternal
private Dictionary`2<string, int> <>f__switch$map42
private Dictionary`2<string, int> <>f__switch$map43
public string Name
public XmlSchemaDerivationMethod Final
public XmlQualifiedName QualifiedName
public XmlSchemaDerivationMethod FinalResolved
public object BaseSchemaType
public XmlSchemaType BaseXmlSchemaType
public XmlSchemaDerivationMethod DerivedBy
public XmlSchemaDatatype Datatype
public bool IsMixed
public XmlTypeCode TypeCode
public string get_Name()
public void set_Name(string value)
public XmlSchemaDerivationMethod get_Final()
public void set_Final(XmlSchemaDerivationMethod value)
public XmlQualifiedName get_QualifiedName()
public XmlSchemaDerivationMethod get_FinalResolved()
public object get_BaseSchemaType()
public XmlSchemaType get_BaseXmlSchemaType()
public XmlSchemaDerivationMethod get_DerivedBy()
public XmlSchemaDatatype get_Datatype()
public bool get_IsMixed()
public void set_IsMixed(bool value)
public XmlTypeCode get_TypeCode()
internal XmlSchemaType GetBuiltInType(XmlQualifiedName qualifiedName)
internal XmlSchemaType GetBuiltInType(XmlTypeCode typecode)
public XmlSchemaComplexType GetBuiltInComplexType(XmlQualifiedName qualifiedName)
public XmlSchemaComplexType GetBuiltInComplexType(XmlTypeCode type)
public XmlSchemaSimpleType GetBuiltInSimpleType(XmlQualifiedName qualifiedName)
internal XmlSchemaSimpleType GetBuiltInSimpleType(XmlSchemaDatatype type)
public XmlSchemaSimpleType GetBuiltInSimpleType(XmlTypeCode type)
public bool IsDerivedFrom(XmlSchemaType derivedType, XmlSchemaType baseType, XmlSchemaDerivationMethod except)
internal bool ValidateRecursionCheck()
}
public System.Xml.Schema.XmlSchemaUnique : XmlSchemaIdentityConstraint {
private string xmlname
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal int Validate(ValidationEventHandler h, XmlSchema schema)
internal XmlSchemaUnique Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaUse : Enum {
public int value__
public XmlSchemaUse None
public XmlSchemaUse Optional
public XmlSchemaUse Prohibited
public XmlSchemaUse Required
}
internal System.Xml.Schema.XmlSchemaUtil : object {
internal XmlSchemaDerivationMethod FinalAllowed
internal XmlSchemaDerivationMethod ElementBlockAllowed
internal XmlSchemaDerivationMethod ComplexTypeBlockAllowed
internal bool StrictMsCompliant
private Dictionary`2<string, int> <>f__switch$map4B
private Dictionary`2<string, int> <>f__switch$map4C
private Dictionary`2<string, int> <>f__switch$map4D
private Dictionary`2<string, int> <>f__switch$map4E
private Dictionary`2<string, int> <>f__switch$map4F
private Dictionary`2<string, int> <>f__switch$map50
public void AddToTable(XmlSchemaObjectTable table, XmlSchemaObject obj, XmlQualifiedName qname, ValidationEventHandler h)
public void CompileID(string id, XmlSchemaObject xso, Hashtable idCollection, ValidationEventHandler h)
public bool CheckAnyUri(string uri)
public bool CheckNormalizedString(string token)
public bool CheckNCName(string name)
public bool CheckQName(XmlQualifiedName qname)
public XmlParserContext GetParserContext(XmlReader reader)
public bool IsBuiltInDatatypeName(XmlQualifiedName qname)
public bool AreSchemaDatatypeEqual(XmlSchemaSimpleType st1, object v1, XmlSchemaSimpleType st2, object v2)
public bool AreSchemaDatatypeEqual(XsdAnySimpleType st1, object v1, XsdAnySimpleType st2, object v2)
public bool IsValidQName(string qname)
public String[] SplitList(string list)
public void ReadUnhandledAttribute(XmlReader reader, XmlSchemaObject xso)
private void ParseWsdlArrayType(XmlReader reader, XmlAttribute attr)
public bool ReadBoolAttribute(XmlReader reader, Exception& innerExcpetion)
public decimal ReadDecimalAttribute(XmlReader reader, Exception& innerExcpetion)
public XmlSchemaDerivationMethod ReadDerivationAttribute(XmlReader reader, Exception& innerExcpetion, string name, XmlSchemaDerivationMethod allowed)
private XmlSchemaDerivationMethod AddFlag(XmlSchemaDerivationMethod dst, XmlSchemaDerivationMethod add, XmlSchemaDerivationMethod allowed)
public XmlSchemaForm ReadFormAttribute(XmlReader reader, Exception& innerExcpetion)
public XmlSchemaContentProcessing ReadProcessingAttribute(XmlReader reader, Exception& innerExcpetion)
public XmlSchemaUse ReadUseAttribute(XmlReader reader, Exception& innerExcpetion)
public XmlQualifiedName ReadQNameAttribute(XmlReader reader, Exception& innerEx)
public XmlQualifiedName ToQName(XmlReader reader, string qnamestr, Exception& innerEx)
public int ValidateAttributesResolved(XmlSchemaObjectTable attributesResolved, ValidationEventHandler h, XmlSchema schema, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaAnyAttribute& anyAttributeUse, XmlSchemaAttributeGroup redefined, bool skipEquivalent)
internal bool AreAttributesEqual(XmlSchemaAttribute one, XmlSchemaAttribute another)
public object ReadTypedValue(XmlReader reader, object type, IXmlNamespaceResolver nsResolver, StringBuilder tmpBuilder)
public XmlSchemaObject FindAttributeDeclaration(string ns, XmlSchemaSet schemas, XmlSchemaComplexType cType, XmlQualifiedName qname)
private bool AttributeWildcardItemValid(XmlSchemaAnyAttribute anyAttr, XmlQualifiedName qname, string ns)
}
public System.Xml.Schema.XmlSchemaValidationException : XmlSchemaException {
private object source_object
public object SourceObject
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception innerException, int lineNumber, int linePosition)
internal void .ctor(string message, int lineNumber, int linePosition, XmlSchemaObject sourceObject, string sourceUri, Exception innerException)
internal void .ctor(string message, object sender, string sourceUri, XmlSchemaObject sourceObject, Exception innerException)
internal void .ctor(string message, XmlSchemaObject sourceObject, Exception innerException)
public void .ctor(string message, Exception innerException)
public void GetObjectData(SerializationInfo info, StreamingContext context)
protected internal void SetSourceObject(object o)
public object get_SourceObject()
}
public System.Xml.Schema.XmlSchemaValidationFlags : Enum {
public int value__
public XmlSchemaValidationFlags None
public XmlSchemaValidationFlags ProcessInlineSchema
public XmlSchemaValidationFlags ProcessSchemaLocation
public XmlSchemaValidationFlags ReportValidationWarnings
public XmlSchemaValidationFlags ProcessIdentityConstraints
public XmlSchemaValidationFlags AllowXmlAttributes
}
public System.Xml.Schema.XmlSchemaValidator : object {
private XmlSchemaAttribute[] emptyAttributeArray
private object nominalEventSender
private IXmlLineInfo lineInfo
private IXmlNamespaceResolver nsResolver
private Uri sourceUri
private XmlNameTable nameTable
private XmlSchemaSet schemas
private XmlResolver xmlResolver
private XmlSchemaObject startType
private XmlSchemaValidationFlags options
private Transition transition
private XsdParticleStateManager state
private ArrayList occuredAtts
private XmlSchemaAttribute[] defaultAttributes
private ArrayList defaultAttributesCache
private XsdIDManager idManager
private ArrayList keyTables
private ArrayList currentKeyFieldConsumers
private ArrayList tmpKeyrefPool
private ArrayList elementQNameStack
private StringBuilder storedCharacters
private bool shouldValidateCharacters
private int depth
private int xsiNilDepth
private int skipValidationDepth
internal XmlSchemaDatatype CurrentAttributeType
private ValidationEventHandler ValidationEventHandler
public object ValidationEventSender
public IXmlLineInfo LineInfoProvider
public XmlResolver XmlResolver
public Uri SourceUri
private string BaseUri
private XsdValidationContext Context
private bool IgnoreWarnings
private bool IgnoreIdentity
public void .ctor(XmlNameTable nameTable, XmlSchemaSet schemas, IXmlNamespaceResolver nsResolver, XmlSchemaValidationFlags options)
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
public object get_ValidationEventSender()
public void set_ValidationEventSender(object value)
public IXmlLineInfo get_LineInfoProvider()
public void set_LineInfoProvider(IXmlLineInfo value)
public void set_XmlResolver(XmlResolver value)
public Uri get_SourceUri()
public void set_SourceUri(Uri value)
private string get_BaseUri()
private XsdValidationContext get_Context()
private bool get_IgnoreWarnings()
private bool get_IgnoreIdentity()
public XmlSchemaAttribute[] GetExpectedAttributes()
private void CollectAtomicParticles(XmlSchemaParticle p, ArrayList al)
public XmlSchemaParticle[] GetExpectedParticles()
public void GetUnspecifiedDefaultAttributes(ArrayList defaultAttributeList)
public void AddSchema(XmlSchema schema)
public void Initialize()
public void Initialize(XmlSchemaObject partialValidationType)
public void EndValidation()
public void SkipToEndElement(XmlSchemaInfo info)
public object ValidateAttribute(string localName, string ns, string attributeValue, XmlSchemaInfo info)
public object ValidateAttribute(string localName, string ns, XmlValueGetter attributeValue, XmlSchemaInfo info)
public void ValidateElement(string localName, string ns, XmlSchemaInfo info)
public void ValidateElement(string localName, string ns, XmlSchemaInfo info, string xsiType, string xsiNil, string schemaLocation, string noNsSchemaLocation)
public object ValidateEndElement(XmlSchemaInfo info)
public object ValidateEndElement(XmlSchemaInfo info, object var)
public void ValidateEndOfAttributes(XmlSchemaInfo info)
public void ValidateText(string value)
public void ValidateText(XmlValueGetter getter)
public void ValidateWhitespace(string value)
public void ValidateWhitespace(XmlValueGetter getter)
private void HandleError(string message)
private void HandleError(string message, Exception innerException)
private void HandleError(string message, Exception innerException, bool isWarning)
private void HandleError(XmlSchemaValidationException exception)
private void HandleError(XmlSchemaValidationException exception, bool isWarning)
private void CheckState(Transition expected)
private XmlSchemaElement FindElement(string name, string ns)
private XmlSchemaType FindType(XmlQualifiedName qname)
private void ValidateStartElementParticle(string localName, string ns)
private void AssessOpenStartElementSchemaValidity(string localName, string ns)
private void AssessCloseStartElementSchemaValidity(XmlSchemaInfo info)
private void AssessElementLocallyValidElement()
private void AssessCloseStartElementLocallyValidType(XmlSchemaInfo info)
private void AssessCloseStartElementLocallyValidComplexType(XmlSchemaComplexType cType, XmlSchemaInfo info)
private object AssessAttributeElementLocallyValidType(string localName, string ns, XmlValueGetter getter, XmlSchemaInfo info)
private object AssessAttributeLocallyValid(XmlSchemaAttribute attr, XmlSchemaInfo info, XmlValueGetter getter)
private void AssessAttributeLocallyValidUse(XmlSchemaAttribute attr)
private object AssessEndElementSchemaValidity(XmlSchemaInfo info)
private void ValidateEndElementParticle()
private void ValidateCharacters(XmlValueGetter getter)
private object ValidateEndSimpleContent(XmlSchemaInfo info)
private object ValidateEndSimpleContentCore(XmlSchemaInfo info)
private object AssessStringValid(XmlSchemaSimpleType st, XmlSchemaDatatype dt, string value)
private void ValidateRestrictedSimpleTypeValue(XmlSchemaSimpleType st, XmlSchemaDatatype& dt, string normalized)
private XsdKeyTable CreateNewKeyTable(XmlSchemaIdentityConstraint ident)
private void ValidateKeySelectors()
private void ValidateKeyFieldsAttribute(XmlSchemaAttribute attr, object value)
private void ValidateKeyFields(bool isAttr, bool isNil, object schemaType, string attrName, string attrNs, object value)
private void ValidateEndElementKeyConstraints()
private void ValidateEndKeyConstraint(XsdKeyTable seq)
private void ValidateSimpleContentIdentity(XmlSchemaDatatype dt, string value)
private object GetXsiType(string name)
private void HandleXsiType(string typename)
private void AssessLocalTypeDerivationOK(object xsiType, object baseType, XmlSchemaDerivationMethod flag)
private void HandleXsiNil(string value, XmlSchemaInfo info)
private XmlSchema ReadExternalSchema(string uri)
private void HandleSchemaLocation(string schemaLocation)
private void HandleNoNSSchemaLocation(string noNsSchemaLocation)
}
public System.Xml.Schema.XmlSchemaValidity : Enum {
public int value__
public XmlSchemaValidity NotKnown
public XmlSchemaValidity Valid
public XmlSchemaValidity Invalid
}
public System.Xml.Schema.XmlSchemaWhiteSpaceFacet : XmlSchemaFacet {
private string xmlname
internal Facet ThisFacet
internal Facet get_ThisFacet()
internal XmlSchemaWhiteSpaceFacet Read(XmlSchemaReader reader, ValidationEventHandler h)
}
public System.Xml.Schema.XmlSchemaXPath : XmlSchemaAnnotated {
private string xpath
private XmlNamespaceManager nsmgr
internal bool isSelector
private XsdIdentityPath[] compiledExpression
private XsdIdentityPath currentPath
private Dictionary`2<string, int> <>f__switch$map4A
public string XPath
internal XsdIdentityPath[] CompiledExpression
public string get_XPath()
public void set_XPath(string value)
internal int Compile(ValidationEventHandler h, XmlSchema schema)
internal XsdIdentityPath[] get_CompiledExpression()
private void ParseExpression(string xpath, ValidationEventHandler h, XmlSchema schema)
private void ParsePath(string xpath, int pos, ArrayList paths, ValidationEventHandler h, XmlSchema schema)
private void ParseStep(string xpath, int pos, ArrayList steps, ArrayList paths, ValidationEventHandler h, XmlSchema schema)
private int SkipWhitespace(string xpath, int pos)
internal XmlSchemaXPath Read(XmlSchemaReader reader, ValidationEventHandler h, string name)
}
public System.Xml.Schema.XmlSeverityType : Enum {
public int value__
public XmlSeverityType Error
public XmlSeverityType Warning
}
public System.Xml.Schema.XmlTypeCode : Enum {
public int value__
public XmlTypeCode None
public XmlTypeCode Item
public XmlTypeCode Node
public XmlTypeCode Document
public XmlTypeCode Element
public XmlTypeCode Attribute
public XmlTypeCode Namespace
public XmlTypeCode ProcessingInstruction
public XmlTypeCode Comment
public XmlTypeCode Text
public XmlTypeCode AnyAtomicType
public XmlTypeCode UntypedAtomic
public XmlTypeCode String
public XmlTypeCode Boolean
public XmlTypeCode Decimal
public XmlTypeCode Float
public XmlTypeCode Double
public XmlTypeCode Duration
public XmlTypeCode DateTime
public XmlTypeCode Time
public XmlTypeCode Date
public XmlTypeCode GYearMonth
public XmlTypeCode GYear
public XmlTypeCode GMonthDay
public XmlTypeCode GDay
public XmlTypeCode GMonth
public XmlTypeCode HexBinary
public XmlTypeCode Base64Binary
public XmlTypeCode AnyUri
public XmlTypeCode QName
public XmlTypeCode Notation
public XmlTypeCode NormalizedString
public XmlTypeCode Token
public XmlTypeCode Language
public XmlTypeCode NmToken
public XmlTypeCode Name
public XmlTypeCode NCName
public XmlTypeCode Id
public XmlTypeCode Idref
public XmlTypeCode Entity
public XmlTypeCode Integer
public XmlTypeCode NonPositiveInteger
public XmlTypeCode NegativeInteger
public XmlTypeCode Long
public XmlTypeCode Int
public XmlTypeCode Short
public XmlTypeCode Byte
public XmlTypeCode NonNegativeInteger
public XmlTypeCode UnsignedLong
public XmlTypeCode UnsignedInt
public XmlTypeCode UnsignedShort
public XmlTypeCode UnsignedByte
public XmlTypeCode PositiveInteger
public XmlTypeCode YearMonthDuration
public XmlTypeCode DayTimeDuration
}
public System.Xml.Schema.XmlValueGetter : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
internal System.Xml.Schema.XsdInference : object {
public string NamespaceXml
public string NamespaceXmlns
public string XdtNamespace
private XmlQualifiedName QNameString
private XmlQualifiedName QNameBoolean
private XmlQualifiedName QNameAnyType
private XmlQualifiedName QNameByte
private XmlQualifiedName QNameUByte
private XmlQualifiedName QNameShort
private XmlQualifiedName QNameUShort
private XmlQualifiedName QNameInt
private XmlQualifiedName QNameUInt
private XmlQualifiedName QNameLong
private XmlQualifiedName QNameULong
private XmlQualifiedName QNameDecimal
private XmlQualifiedName QNameUDecimal
private XmlQualifiedName QNameDouble
private XmlQualifiedName QNameFloat
private XmlQualifiedName QNameDateTime
private XmlQualifiedName QNameDuration
private XmlReader source
private XmlSchemaSet schemas
private bool laxOccurrence
private bool laxTypeInference
private Hashtable newElements
private Hashtable newAttributes
private Dictionary`2<string, int> <>f__switch$map44
private Dictionary`2<string, int> <>f__switch$map45
private Dictionary`2<string, int> <>f__switch$map46
private Dictionary`2<string, int> <>f__switch$map47
private Dictionary`2<string, int> <>f__switch$map48
private void .ctor(XmlReader xmlReader, XmlSchemaSet schemas, bool laxOccurrence, bool laxTypeInference)
public XmlSchemaSet Process(XmlReader xmlReader, XmlSchemaSet schemas, bool laxOccurrence, bool laxTypeInference)
private void Run()
private void AddImport(string current, string import)
private void IncludeXmlAttributes()
private void InferElement(XmlSchemaElement el, string ns, bool isNew)
private Hashtable CollectAttrTable(XmlSchemaObjectCollection attList)
private void InferAttributes(XmlSchemaElement el, string ns, bool isNew)
private XmlSchemaAttribute InferNewAttribute(XmlQualifiedName attrName, bool isNewTypeDefinition, string ns)
private void InferMergedAttribute(XmlSchemaAttribute attr)
private XmlQualifiedName InferMergedType(string value, XmlQualifiedName typeName)
private XmlSchemaObjectCollection GetAttributes(XmlSchemaComplexType ct)
private XmlSchemaComplexType ToComplexType(XmlSchemaElement el)
private void InferAsEmptyElement(XmlSchemaElement el, string ns, bool isNew)
private XmlSchemaSimpleType MakeBaseTypeAsEmptiable(XmlSchemaSimpleType st)
private void ToEmptiableSimpleContent(XmlSchemaSimpleContent sm, bool isNew)
private void ToEmptiableComplexContent(XmlSchemaComplexContent cm, bool isNew)
private void InferContent(XmlSchemaElement el, string ns, bool isNew)
private void InferComplexContent(XmlSchemaElement el, string ns, bool isNew)
private void InferTextContent(XmlSchemaElement el, bool isNew)
private void MarkAsMixed(XmlSchemaComplexType ct)
private void ProcessLax(XmlSchemaChoice c, string ns)
private bool ElementMatches(XmlSchemaElement el, string ns)
private void ProcessSequence(XmlSchemaComplexType ct, XmlSchemaSequence s, string ns, Int32& position, Boolean& consumed, bool isNew)
private XmlSchemaChoice ToSequenceOfChoice(XmlSchemaSequence s)
private void ToComplexContentType(XmlSchemaComplexType type)
private XmlSchemaSequence PopulateSequence(XmlSchemaComplexType ct)
private XmlSchemaSequence CreateSequence()
private XmlSchemaParticle PopulateParticle(XmlSchemaComplexType ct)
private XmlQualifiedName InferSimpleType(string value)
private XmlSchemaElement GetGlobalElement(XmlQualifiedName name)
private XmlSchemaAttribute GetGlobalAttribute(XmlQualifiedName name)
private XmlSchemaElement CreateElement(XmlQualifiedName name)
private XmlSchemaElement CreateGlobalElement(XmlQualifiedName name)
private XmlSchemaAttribute CreateGlobalAttribute(XmlQualifiedName name)
private XmlSchema PopulateSchema(string ns)
private XmlSchemaInferenceException Error(XmlSchemaObject sourceObj, string message)
private XmlSchemaInferenceException Error(XmlSchemaObject sourceObj, bool useReader, string message)
}
public System.Xml.Serialization.Advanced.SchemaImporterExtension : object {
public string ImportAnyElement(XmlSchemaAny any, bool mixed, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit codeCompileUnit, CodeNamespace codeNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
public CodeExpression ImportDefaultValue(string value, string type)
public string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit codeCompileUnit, CodeNamespace codeNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
public string ImportSchemaType(string name, string ns, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit codeCompileUnit, CodeNamespace codeNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
}
public System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection : CollectionBase {
private Dictionary`2<string, SchemaImporterExtension> named_items
public SchemaImporterExtension Item
public int Add(SchemaImporterExtension extension)
public int Add(string key, Type type)
public void Clear()
public bool Contains(SchemaImporterExtension extension)
public void CopyTo(SchemaImporterExtension[] array, int index)
public int IndexOf(SchemaImporterExtension extension)
public void Insert(int index, SchemaImporterExtension extension)
public void Remove(SchemaImporterExtension extension)
public void Remove(string name)
public SchemaImporterExtension get_Item(int index)
public void set_Item(int index, SchemaImporterExtension value)
}
internal System.Xml.Serialization.ClassMap : ObjectMap {
private Hashtable _elements
private ArrayList _elementMembers
private Hashtable _attributeMembers
private XmlTypeMapMemberAttribute[] _attributeMembersArray
private XmlTypeMapElementInfo[] _elementsByIndex
private ArrayList _flatLists
private ArrayList _allMembers
private ArrayList _membersWithDefault
private ArrayList _listMembers
private XmlTypeMapMemberAnyElement _defaultAnyElement
private XmlTypeMapMemberAnyAttribute _defaultAnyAttribute
private XmlTypeMapMemberNamespaces _namespaceDeclarations
private XmlTypeMapMember _xmlTextCollector
private XmlTypeMapMember _returnMember
private bool _ignoreMemberNamespace
private bool _canBeSimpleType
public ICollection AllElementInfos
public bool IgnoreMemberNamespace
public XmlTypeMapMemberAnyElement DefaultAnyElementMember
public XmlTypeMapMemberAnyAttribute DefaultAnyAttributeMember
public XmlTypeMapMemberNamespaces NamespaceDeclarations
public ICollection AttributeMembers
public ICollection ElementMembers
public ArrayList AllMembers
public ArrayList FlatLists
public ArrayList MembersWithDefault
public ArrayList ListMembers
public XmlTypeMapMember XmlTextCollector
public XmlTypeMapMember ReturnMember
public XmlQualifiedName SimpleContentBaseType
public bool HasSimpleContent
public void AddMember(XmlTypeMapMember member)
private void RegisterFlatList(XmlTypeMapMemberExpandable member)
public XmlTypeMapMemberAttribute GetAttribute(string name, string ns)
public XmlTypeMapElementInfo GetElement(string name, string ns)
public XmlTypeMapElementInfo GetElement(int index)
private string BuildKey(string name, string ns)
public ICollection get_AllElementInfos()
public bool get_IgnoreMemberNamespace()
public void set_IgnoreMemberNamespace(bool value)
public XmlTypeMapMember FindMember(string name)
public XmlTypeMapMemberAnyElement get_DefaultAnyElementMember()
public XmlTypeMapMemberAnyAttribute get_DefaultAnyAttributeMember()
public XmlTypeMapMemberNamespaces get_NamespaceDeclarations()
public ICollection get_AttributeMembers()
public ICollection get_ElementMembers()
public ArrayList get_AllMembers()
public ArrayList get_FlatLists()
public ArrayList get_MembersWithDefault()
public ArrayList get_ListMembers()
public XmlTypeMapMember get_XmlTextCollector()
public XmlTypeMapMember get_ReturnMember()
public XmlQualifiedName get_SimpleContentBaseType()
public void SetCanBeSimpleType(bool can)
public bool get_HasSimpleContent()
}
public System.Xml.Serialization.CodeExporter : object {
internal MapCodeGenerator codeGenerator
public CodeAttributeDeclarationCollection IncludeMetadata
public CodeAttributeDeclarationCollection get_IncludeMetadata()
}
public System.Xml.Serialization.CodeGenerationOptions : Enum {
public int value__
public CodeGenerationOptions None
public CodeGenerationOptions GenerateProperties
public CodeGenerationOptions GenerateNewAsync
public CodeGenerationOptions GenerateOldAsync
public CodeGenerationOptions GenerateOrder
public CodeGenerationOptions EnableDataBinding
}
public System.Xml.Serialization.CodeIdentifier : object {
public string MakeCamel(string identifier)
public string MakePascal(string identifier)
public string MakeValid(string identifier)
}
public System.Xml.Serialization.CodeIdentifiers : object {
private bool useCamelCasing
private Hashtable table
private Hashtable reserved
public bool UseCamelCasing
public void .ctor(bool caseSensitive)
public bool get_UseCamelCasing()
public void set_UseCamelCasing(bool value)
public void Add(string identifier, object value)
public void AddReserved(string identifier)
public string AddUnique(string identifier, object value)
public void Clear()
public bool IsInUse(string identifier)
public string MakeRightCase(string identifier)
public string MakeUnique(string identifier)
public void Remove(string identifier)
public void RemoveReserved(string identifier)
public object ToArray(Type type)
}
internal System.Xml.Serialization.EnumMap : ObjectMap {
private EnumMapMember[] _members
private bool _isFlags
private String[] _enumNames
private String[] _xmlNames
private Int64[] _values
public bool IsFlags
public EnumMapMember[] Members
public String[] EnumNames
public String[] XmlNames
public Int64[] Values
public void .ctor(EnumMapMember[] members, bool isFlags)
public bool get_IsFlags()
public EnumMapMember[] get_Members()
public String[] get_EnumNames()
public String[] get_XmlNames()
public Int64[] get_Values()
public string GetXmlName(string typeName, object enumValue)
public string GetEnumName(string typeName, string xmlName)
}
internal System.Xml.Serialization.GenerationResult : object {
public XmlMapping Mapping
public string ReaderClassName
public string ReadMethodName
public string WriterClassName
public string WriteMethodName
public string Namespace
public string SerializerClassName
public string BaseSerializerClassName
public string ImplementationClassName
}
internal System.Xml.Serialization.Hook : object {
public HookType HookType
public Select Select
public string InsertBefore
public string InsertAfter
public string Replace
public string GetCode(HookAction action)
}
internal System.Xml.Serialization.HookAction : Enum {
public int value__
public HookAction InsertBefore
public HookAction InsertAfter
public HookAction Replace
}
internal System.Xml.Serialization.HookType : Enum {
public int value__
public HookType attributes
public HookType elements
public HookType unknownAttribute
public HookType unknownElement
public HookType member
public HookType type
}
public System.Xml.Serialization.ImportContext : object {
private bool _shareTypes
private CodeIdentifiers _typeIdentifiers
private StringCollection _warnings
internal Hashtable MappedTypes
internal Hashtable DataMappedTypes
internal Hashtable SharedAnonymousTypes
public bool ShareTypes
public CodeIdentifiers TypeIdentifiers
public StringCollection Warnings
public void .ctor(CodeIdentifiers identifiers, bool shareTypes)
public bool get_ShareTypes()
public CodeIdentifiers get_TypeIdentifiers()
public StringCollection get_Warnings()
}
public System.Xml.Serialization.IXmlSerializable {
public XmlSchema GetSchema()
public void ReadXml(XmlReader reader)
public void WriteXml(XmlWriter writer)
}
public System.Xml.Serialization.IXmlTextParser {
public bool Normalized
public WhitespaceHandling WhitespaceHandling
public bool get_Normalized()
public void set_Normalized(bool value)
public WhitespaceHandling get_WhitespaceHandling()
public void set_WhitespaceHandling(WhitespaceHandling value)
}
internal System.Xml.Serialization.KeyHelper : object {
public void AddField(StringBuilder sb, int n, string val)
public void AddField(StringBuilder sb, int n, string val, string def)
public void AddField(StringBuilder sb, int n, bool val)
public void AddField(StringBuilder sb, int n, bool val, bool def)
public void AddField(StringBuilder sb, int n, int val, int def)
public void AddField(StringBuilder sb, int n, Type val)
}
internal System.Xml.Serialization.ListMap : ObjectMap {
private XmlTypeMapElementInfoList _itemInfo
private bool _gotNestedMapping
private XmlTypeMapping _nestedArrayMapping
private string _choiceMember
public bool IsMultiArray
public string ChoiceMember
public XmlTypeMapping NestedArrayMapping
public XmlTypeMapElementInfoList ItemInfo
public bool get_IsMultiArray()
public string get_ChoiceMember()
public void set_ChoiceMember(string value)
public XmlTypeMapping get_NestedArrayMapping()
public XmlTypeMapElementInfoList get_ItemInfo()
public void set_ItemInfo(XmlTypeMapElementInfoList value)
public XmlTypeMapElementInfo FindElement(object ob, int index, object memberValue)
public XmlTypeMapElementInfo FindElement(string elementName, string ns)
public XmlTypeMapElementInfo FindTextElement()
public string GetSchemaArrayName()
public void GetArrayType(int itemCount, String& localName, String& ns)
public bool Equals(object other)
public int GetHashCode()
}
internal System.Xml.Serialization.MapCodeGenerator : object {
private CodeNamespace codeNamespace
private CodeCompileUnit codeCompileUnit
private CodeAttributeDeclarationCollection includeMetadata
private XmlTypeMapping exportedAnyType
protected bool includeArrayTypes
private CodeDomProvider codeProvider
private CodeGenerationOptions options
private CodeIdentifiers identifiers
private Hashtable exportedMaps
private Hashtable includeMaps
public CodeAttributeDeclarationCollection IncludeMetadata
private CodeDomProvider CodeProvider
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable mappings)
public CodeAttributeDeclarationCollection get_IncludeMetadata()
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping)
public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping, bool isTopLevel)
private void ExportMapCode(XmlTypeMapping map, bool isTopLevel)
private void ExportClassCode(XmlTypeMapping map, bool isTopLevel)
private void ExportDerivedTypeAttributes(XmlTypeMapping map, CodeTypeDeclaration codeClass)
private void ExportDerivedTypes(XmlTypeMapping map, CodeTypeDeclaration codeClass)
private void ExportMembersMapCode(CodeTypeDeclaration codeClass, ClassMap map, string defaultNamespace, XmlTypeMapping baseMap)
private CodeTypeMember CreateFieldMember(CodeTypeDeclaration codeClass, Type type, string name)
private CodeTypeMember CreateFieldMember(CodeTypeDeclaration codeClass, TypeData type, string name)
private CodeTypeMember CreateFieldMember(CodeTypeDeclaration codeClass, XmlTypeMapMember member)
private CodeTypeMember CreateFieldMember(CodeTypeDeclaration codeClass, CodeTypeReference type, string name, object defaultValue, TypeData defaultType, string documentation)
private void AddAttributeFieldMember(CodeTypeDeclaration codeClass, XmlTypeMapMemberAttribute attinfo, string defaultNamespace)
public void AddAttributeMemberAttributes(XmlTypeMapMemberAttribute attinfo, string defaultNamespace, CodeAttributeDeclarationCollection attributes, bool forceUseMemberName)
private void AddElementFieldMember(CodeTypeDeclaration codeClass, XmlTypeMapMemberElement member, string defaultNamespace)
public void AddElementMemberAttributes(XmlTypeMapMemberElement member, string defaultNamespace, CodeAttributeDeclarationCollection attributes, bool forceUseMemberName)
private void AddAnyElementFieldMember(CodeTypeDeclaration codeClass, XmlTypeMapMemberElement member, string defaultNamespace)
private bool DefinedInBaseMap(XmlTypeMapping map, XmlTypeMapMember member)
private void AddArrayElementFieldMember(CodeTypeDeclaration codeClass, XmlTypeMapMemberList member, string defaultNamespace)
public void AddArrayAttributes(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberElement member, string defaultNamespace, bool forceUseMemberName)
public void AddArrayItemAttributes(CodeAttributeDeclarationCollection attributes, ListMap listMap, TypeData type, string defaultNamespace, int nestingLevel)
private void ExportArrayCode(XmlTypeMapping map)
private bool ExportExtraElementAttributes(CodeAttributeDeclarationCollection attributes, XmlTypeMapElementInfo einfo, string defaultNamespace, TypeData defaultType)
private void ExportEnumCode(XmlTypeMapping map, bool isTopLevel)
private void AddInclude(XmlTypeMapping map)
private void RemoveInclude(XmlTypeMapping map)
private bool IsMapExported(XmlTypeMapping map)
private void SetMapExported(XmlTypeMapping map, CodeTypeDeclaration declaration)
private CodeTypeDeclaration GetMapDeclaration(XmlTypeMapping map)
public void AddCustomAttribute(CodeTypeMember ctm, CodeAttributeDeclaration att, bool addIfNoParams)
public void AddCustomAttribute(CodeTypeMember ctm, string name, CodeAttributeArgument[] args)
public CodeAttributeArgument GetArg(string name, object value)
public CodeAttributeArgument GetArg(object value)
public CodeAttributeArgument GetTypeArg(string name, string typeName)
public CodeAttributeArgument GetEnumArg(string name, string enumType, string enumValue)
public void AddComments(CodeTypeMember member, string comments)
private void AddCodeType(CodeTypeDeclaration type, string comments)
private void AddClassAttributes(CodeTypeDeclaration codeClass)
private CodeTypeReference GetDomType(TypeData data, bool requiresNullable)
private CodeDomProvider get_CodeProvider()
protected void GenerateClass(XmlTypeMapping map, CodeTypeDeclaration codeClass, bool isTopLevel)
protected void GenerateClassInclude(CodeAttributeDeclarationCollection attributes, XmlTypeMapping map)
protected void GenerateAnyAttribute(CodeTypeMember codeField)
protected void GenerateDefaultAttribute(CodeMemberField internalField, CodeTypeMember externalField, TypeData typeData, object defaultValue)
protected void GenerateAttributeMember(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberAttribute attinfo, string defaultNamespace, bool forceUseMemberName)
protected void GenerateElementInfoMember(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberElement member, XmlTypeMapElementInfo einfo, TypeData defaultType, string defaultNamespace, bool addAlwaysAttr, bool forceUseMemberName)
protected void GenerateElementMember(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberElement member)
protected void GenerateArrayElement(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberElement member, string defaultNamespace, bool forceUseMemberName)
protected void GenerateArrayItemAttributes(CodeAttributeDeclarationCollection attributes, ListMap listMap, TypeData type, XmlTypeMapElementInfo ainfo, string defaultName, string defaultNamespace, int nestingLevel)
protected void GenerateTextElementAttribute(CodeAttributeDeclarationCollection attributes, XmlTypeMapElementInfo einfo, TypeData defaultType)
protected void GenerateUnnamedAnyElementAttribute(CodeAttributeDeclarationCollection attributes, XmlTypeMapElementInfo einfo, string defaultNamespace)
protected void GenerateEnum(XmlTypeMapping map, CodeTypeDeclaration codeEnum, bool isTopLevel)
protected void GenerateEnumItem(CodeMemberField codeField, EnumMapMember emem)
protected void GenerateSpecifierMember(CodeTypeMember codeField)
}
internal System.Xml.Serialization.MembersSerializationSource : SerializationSource {
private string elementName
private bool hasWrapperElement
private string membersHash
private bool writeAccessors
private bool literalFormat
public void .ctor(string elementName, bool hasWrapperElement, XmlReflectionMember[] members, bool writeAccessors, bool literalFormat, string namspace, Type[] includedTypes)
public bool Equals(object o)
public int GetHashCode()
}
internal System.Xml.Serialization.ReflectionHelper : object {
private Hashtable _clrTypes
private Hashtable _schemaTypes
private ParameterModifier[] empty_modifiers
public void RegisterSchemaType(XmlTypeMapping map, string xmlType, string ns)
public XmlTypeMapping GetRegisteredSchemaType(string xmlType, string ns)
public void RegisterClrType(XmlTypeMapping map, Type type, string ns)
public XmlTypeMapping GetRegisteredClrType(Type type, string ns)
public Exception CreateError(XmlTypeMapping map, string message)
public void CheckSerializableType(Type type, bool allowPrivateConstructors)
public string BuildMapKey(Type type)
public string BuildMapKey(MethodInfo method, string tag)
}
public System.Xml.Serialization.SchemaImporter : object {
private SchemaImporterExtensionCollection extensions
public SchemaImporterExtensionCollection Extensions
public SchemaImporterExtensionCollection get_Extensions()
}
internal System.Xml.Serialization.SchemaTypes : Enum {
public int value__
public SchemaTypes NotSet
public SchemaTypes Primitive
public SchemaTypes Enum
public SchemaTypes Array
public SchemaTypes Class
public SchemaTypes XmlSerializable
public SchemaTypes XmlNode
public SchemaTypes Void
}
internal System.Xml.Serialization.Select : object {
public string TypeName
public String[] TypeAttributes
public string TypeMember
}
internal System.Xml.Serialization.SerializationCodeGenerator : object {
private XmlMapping _typeMap
private SerializationFormat _format
private TextWriter _writer
private int _tempVarId
private int _indent
private Hashtable _uniqueNames
private int _methodId
private SerializerInfo _config
private ArrayList _mapsToGenerate
private ArrayList _fixupCallbacks
private ArrayList _referencedTypes
private GenerationResult[] _results
private GenerationResult _result
private XmlMapping[] _xmlMaps
private CodeIdentifiers classNames
private ArrayList _listsToFill
private Hashtable _hookVariables
private Stack _hookContexts
private Stack _hookOpenHooks
public GenerationResult[] GenerationResults
public ArrayList ReferencedTypes
public void .ctor(XmlMapping[] xmlMaps)
public void .ctor(XmlMapping[] xmlMaps, SerializerInfo config)
public void .ctor(XmlMapping xmlMap, SerializerInfo config)
public void Generate(string configFileName, string outputPath)
public void GenerateSerializers(TextWriter writer)
public GenerationResult[] get_GenerationResults()
public ArrayList get_ReferencedTypes()
private void UpdateGeneratedTypes(ArrayList list)
private string ToCSharpFullName(Type type)
public void GenerateContract(ArrayList generatedMaps)
public void GenerateWriter(string writerClassName, ArrayList maps)
private void GenerateWriteRoot()
private void GenerateWriteMessage(XmlMembersMapping membersMap)
private void GenerateGetXmlEnumValue(XmlTypeMapping map)
private void GenerateWriteObject(XmlTypeMapping typeMap)
private void GenerateWriteObjectElement(XmlMapping xmlMap, string ob, bool isValueList)
private void GenerateWriteMemberElement(XmlTypeMapElementInfo elem, string memberValue)
private void GenerateWriteListElement(XmlTypeMapping typeMap, string ob)
private void GenerateWriteAnyElementContent(XmlTypeMapMemberAnyElement member, string memberValue)
private void GenerateWritePrimitiveElement(XmlTypeMapping typeMap, string ob)
private void GenerateWriteEnumElement(XmlTypeMapping typeMap, string ob)
private string GenerateGetStringValue(XmlTypeMapping typeMap, TypeData type, string value, bool isNullable)
private string GenerateGetEnumXmlValue(XmlTypeMapping typeMap, string ob)
private string GenerateGetListCount(TypeData listType, string ob)
private void GenerateGetArrayType(ListMap map, string itemCount, String& localName, String& ns)
private string GenerateWriteListContent(string container, TypeData listType, ListMap map, string ob, bool writeToString)
private void GenerateListLoop(string container, ListMap map, string item, string index, TypeData itemTypeData, string targetString)
private void GenerateWritePrimitiveValueLiteral(string memberValue, string name, string ns, XmlTypeMapping mappedType, TypeData typeData, bool wrapped, bool isNullable)
private void GenerateWritePrimitiveValueEncoded(string memberValue, string name, string ns, XmlQualifiedName xsiType, XmlTypeMapping mappedType, TypeData typeData, bool wrapped, bool isNullable)
private string GenerateGetMemberValue(XmlTypeMapMember member, string ob, bool isValueList)
private string GenerateMemberHasValueCondition(XmlTypeMapMember member, string ob, bool isValueList)
private void GenerateWriteInitCallbacks()
private void WriteWriteEnumCallback(XmlTypeMapping map)
private void WriteWriteObjectCallback(XmlTypeMapping map)
public void GenerateReader(string readerClassName, ArrayList maps)
private void GenerateReadRoot()
private string GenerateReadMessage(XmlMembersMapping typeMap)
private void GenerateReadObject(XmlTypeMapping typeMap)
private void GenerateReadClassInstance(XmlTypeMapping typeMap, string isNullable, string checkType)
private void GenerateReadMembers(XmlMapping xmlMap, ClassMap map, string ob, bool isValueList, bool readByOrder)
private void GenerateReadAttributeMembers(XmlMapping xmlMap, ClassMap map, string ob, bool isValueList, Boolean& first)
private void GenerateSetListMembersDefaults(XmlTypeMapping typeMap, ClassMap map, string ob, bool isValueList)
private bool IsReadOnly(XmlTypeMapping map, XmlTypeMapMember member, TypeData memType, bool isValueList)
private void GenerateSetMemberValue(XmlTypeMapMember member, string ob, string value, bool isValueList)
private void GenerateSetMemberValueFromAttr(XmlTypeMapMember member, string ob, string value, bool isValueList)
private string GenerateReadObjectElement(XmlTypeMapElementInfo elem)
private string GenerateReadPrimitiveValue(XmlTypeMapElementInfo elem)
private string GenerateGetValueFromXmlString(string value, TypeData typeData, XmlTypeMapping typeMap, bool isNullable)
private string GenerateReadListElement(XmlTypeMapping typeMap, string list, string isNullable, bool canCreateInstance)
private string GenerateReadListString(XmlTypeMapping typeMap, string values)
private string GetArrayDeclaration(Type type, string length)
private void GenerateAddListValue(TypeData listType, string list, string index, string value, bool canCreateInstance)
private string GenerateCreateList(Type listType)
private string GenerateInitializeList(TypeData listType)
private void GenerateFillerCallbacks()
private void GenerateReadXmlNodeElement(XmlTypeMapping typeMap, string isNullable)
private void GenerateReadPrimitiveElement(XmlTypeMapping typeMap, string isNullable)
private void GenerateReadEnumElement(XmlTypeMapping typeMap, string isNullable)
private string GenerateGetEnumValue(XmlTypeMapping typeMap, string val, bool isNullable)
private void GenerateGetEnumValueMethod(XmlTypeMapping typeMap)
private void GenerateGetSingleEnumValue(XmlTypeMapping typeMap, string val)
private void GenerateReadXmlSerializableElement(XmlTypeMapping typeMap, string isNullable)
private void GenerateReadInitCallbacks()
private void GenerateFixupCallbacks()
private string GetReadXmlNode(TypeData type, bool wrapped)
private void InitHooks()
private void PushHookContext()
private void PopHookContext()
private void SetHookVar(string var, string value)
private bool GenerateReadHook(HookType hookType, Type type)
private bool GenerateWriteHook(HookType hookType, Type type)
private bool GenerateWriteMemberHook(Type type, XmlTypeMapMember member)
private bool GenerateReadMemberHook(Type type, XmlTypeMapMember member)
private bool GenerateReadArrayMemberHook(Type type, XmlTypeMapMember member, string index)
private bool MemberHasReadReplaceHook(Type type, XmlTypeMapMember member)
private bool GenerateHook(HookType hookType, XmlMappingAccess dir, Type type, string member)
private void GenerateEndHook()
private bool GenerateHooks(HookType hookType, XmlMappingAccess dir, Type type, string member, HookAction action)
private string GetRootTypeName()
private string GetNumTempVar()
private string GetObTempVar()
private string GetStrTempVar()
private string GetBoolTempVar()
private string GetUniqueName(string uniqueGroup, object ob, string name)
private void RegisterReferencingMap(XmlTypeMapping typeMap)
private string GetWriteObjectName(XmlTypeMapping typeMap)
private string GetReadObjectName(XmlTypeMapping typeMap)
private string GetGetEnumValueName(XmlTypeMapping typeMap)
private string GetWriteObjectCallbackName(XmlTypeMapping typeMap)
private string GetFixupCallbackName(XmlMapping typeMap)
private string GetUniqueClassName(string s)
private string GetReadObjectCall(XmlTypeMapping typeMap, string isNullable, string checkType)
private string GetFillListName(TypeData td)
private string GetCast(TypeData td, TypeData tdval, string val)
private string GetCast(TypeData td, string val)
private string GetCast(Type td, string val)
private string GetTypeOf(TypeData td)
private string GetTypeOf(Type td)
private string GetLiteral(object ob)
private void WriteLineInd(string code)
private void WriteLineUni(string code)
private void Write(string code)
private void WriteUni(string code)
private void WriteLine(string code)
private void WriteMultilineCode(string code)
private string Params(String[] pars)
private void WriteMetCall(string method, String[] pars)
private void Unindent()
}
internal System.Xml.Serialization.SerializationCodeGeneratorConfiguration : object {
public SerializerInfo[] Serializers
}
internal System.Xml.Serialization.SerializationFormat : Enum {
public int value__
public SerializationFormat Encoded
public SerializationFormat Literal
}
internal System.Xml.Serialization.SerializationSource : object {
private Type[] includedTypes
private string namspace
private bool canBeGenerated
public bool CanBeGenerated
public void .ctor(string namspace, Type[] includedTypes)
protected bool BaseEquals(SerializationSource other)
public bool get_CanBeGenerated()
public void set_CanBeGenerated(bool value)
}
internal System.Xml.Serialization.SerializerInfo : object {
public string ClassName
public string Assembly
public string ReaderClassName
public string WriterClassName
public string BaseSerializerClassName
public string ImplementationClassName
public bool NoReader
public bool NoWriter
public bool GenerateAsInternal
public string Namespace
public String[] NamespaceImports
public SerializationFormat SerializationFormat
public string OutFileName
public Hook[] ReaderHooks
public Hook[] WriterHooks
public ArrayList GetHooks(HookType hookType, XmlMappingAccess dir, HookAction action, Type type, string member)
private ArrayList FindHook(Hook[] hooks, HookType hookType, HookAction action, Type type, string member)
}
public System.Xml.Serialization.SoapAttributeAttribute : Attribute {
private string attrName
private string dataType
private string ns
public string AttributeName
public string DataType
public string Namespace
public void .ctor(string attrName)
public string get_AttributeName()
public void set_AttributeName(string value)
public string get_DataType()
public void set_DataType(string value)
public string get_Namespace()
public void set_Namespace(string value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.SoapAttributeOverrides : object {
private Hashtable overrides
public SoapAttributes Item
public SoapAttributes Item
public SoapAttributes get_Item(Type type)
public SoapAttributes get_Item(Type type, string member)
public void Add(Type type, SoapAttributes attributes)
public void Add(Type type, string member, SoapAttributes attributes)
private TypeMember GetKey(Type type, string member)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.SoapAttributes : object {
private SoapAttributeAttribute soapAttribute
private object soapDefaultValue
private SoapElementAttribute soapElement
private SoapEnumAttribute soapEnum
private bool soapIgnore
private SoapTypeAttribute soapType
public SoapAttributeAttribute SoapAttribute
public object SoapDefaultValue
public SoapElementAttribute SoapElement
public SoapEnumAttribute SoapEnum
public bool SoapIgnore
public SoapTypeAttribute SoapType
public void .ctor(ICustomAttributeProvider provider)
public SoapAttributeAttribute get_SoapAttribute()
public void set_SoapAttribute(SoapAttributeAttribute value)
public object get_SoapDefaultValue()
public void set_SoapDefaultValue(object value)
public SoapElementAttribute get_SoapElement()
public void set_SoapElement(SoapElementAttribute value)
public SoapEnumAttribute get_SoapEnum()
public void set_SoapEnum(SoapEnumAttribute value)
public bool get_SoapIgnore()
public void set_SoapIgnore(bool value)
public SoapTypeAttribute get_SoapType()
public void set_SoapType(SoapTypeAttribute value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.SoapCodeExporter : CodeExporter {
public void .ctor(CodeNamespace codeNamespace)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options, Hashtable mappings)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable mappings)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member, bool forceUseMemberName)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping)
public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping)
}
public System.Xml.Serialization.SoapElementAttribute : Attribute {
private string dataType
private string elementName
private bool isNullable
public string DataType
public string ElementName
public bool IsNullable
public void .ctor(string elementName)
public string get_DataType()
public void set_DataType(string value)
public string get_ElementName()
public void set_ElementName(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.SoapEnumAttribute : Attribute {
private string name
public string Name
public void .ctor(string name)
public string get_Name()
public void set_Name(string value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.SoapIncludeAttribute : Attribute {
private Type type
public Type Type
public void .ctor(Type type)
public Type get_Type()
public void set_Type(Type value)
}
internal System.Xml.Serialization.SoapMapCodeGenerator : MapCodeGenerator {
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable mappings)
protected void GenerateClass(XmlTypeMapping map, CodeTypeDeclaration codeClass, bool isTopLevel)
protected void GenerateClassInclude(CodeAttributeDeclarationCollection attributes, XmlTypeMapping map)
protected void GenerateAttributeMember(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberAttribute attinfo, string defaultNamespace, bool forceUseMemberName)
protected void GenerateElementInfoMember(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberElement member, XmlTypeMapElementInfo einfo, TypeData defaultType, string defaultNamespace, bool addAlwaysAttr, bool forceUseMemberName)
protected void GenerateEnum(XmlTypeMapping map, CodeTypeDeclaration codeEnum, bool isTopLevel)
protected void GenerateEnumItem(CodeMemberField codeField, EnumMapMember emem)
protected void GenerateSpecifierMember(CodeTypeMember codeField)
}
public System.Xml.Serialization.SoapReflectionImporter : object {
private SoapAttributeOverrides attributeOverrides
private string initialDefaultNamespace
private ArrayList includedTypes
private ArrayList relatedMaps
private ReflectionHelper helper
public void .ctor(SoapAttributeOverrides attributeOverrides)
public void .ctor(string defaultNamespace)
public void .ctor(SoapAttributeOverrides attributeOverrides, string defaultNamespace)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate, XmlMappingAccess access)
public XmlTypeMapping ImportTypeMapping(Type type)
public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace)
internal XmlTypeMapping ImportTypeMapping(TypeData typeData, string defaultNamespace)
private XmlTypeMapping CreateTypeMapping(TypeData typeData, string defaultXmlType, string defaultNamespace)
private XmlTypeMapping ImportClassMapping(Type type, string defaultNamespace)
private XmlTypeMapping ImportClassMapping(TypeData typeData, string defaultNamespace)
private void RegisterDerivedMap(XmlTypeMapping map, XmlTypeMapping derivedMap)
private string GetTypeNamespace(TypeData typeData, string defaultNamespace)
private XmlTypeMapping ImportListMapping(TypeData typeData, string defaultNamespace)
private XmlTypeMapping ImportPrimitiveMapping(TypeData typeData, string defaultNamespace)
private XmlTypeMapping ImportEnumMapping(TypeData typeData, string defaultNamespace)
private ICollection GetReflectionMembers(Type type)
private XmlTypeMapMember CreateMapMember(XmlReflectionMember rmember, string defaultNamespace)
public void IncludeType(Type type)
public void IncludeTypes(ICustomAttributeProvider provider)
private Exception CreateTypeException(Type type)
private Exception CreateStructException(Type type)
private object GetDefaultValue(TypeData typeData, object defaultValue)
}
public System.Xml.Serialization.SoapSchemaExporter : object {
private XmlSchemaExporter _exporter
public void .ctor(XmlSchemas schemas)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping, bool exportEnclosingType)
public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping)
}
public System.Xml.Serialization.SoapSchemaImporter : SchemaImporter {
private XmlSchemaImporter _importer
public void .ctor(XmlSchemas schemas)
public void .ctor(XmlSchemas schemas, CodeIdentifiers typeIdentifiers)
public void .ctor(XmlSchemas schemas, CodeGenerationOptions options, ImportContext context)
public void .ctor(XmlSchemas schemas, CodeIdentifiers typeIdentifiers, CodeGenerationOptions options)
public void .ctor(XmlSchemas schemas, CodeGenerationOptions options, CodeDomProvider codeProvider, ImportContext context)
public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType, bool baseTypeCanBeIndirect)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember member)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members, bool hasWrapperElement)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members, bool hasWrapperElement, Type baseType, bool baseTypeCanBeIndirect)
}
public System.Xml.Serialization.SoapSchemaMember : object {
private string memberName
private XmlQualifiedName memberType
public string MemberName
public XmlQualifiedName MemberType
public string get_MemberName()
public void set_MemberName(string value)
public XmlQualifiedName get_MemberType()
public void set_MemberType(XmlQualifiedName value)
}
public System.Xml.Serialization.SoapTypeAttribute : Attribute {
private string ns
private string typeName
private bool includeInSchema
public bool IncludeInSchema
public string Namespace
public string TypeName
public void .ctor(string typeName)
public void .ctor(string typeName, string ns)
public bool get_IncludeInSchema()
public void set_IncludeInSchema(bool value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_TypeName()
public void set_TypeName(string value)
internal void AddKeyHash(StringBuilder sb)
}
internal System.Xml.Serialization.SoapTypeSerializationSource : SerializationSource {
private string attributeOverridesHash
private Type type
public void .ctor(Type type, SoapAttributeOverrides attributeOverrides, string namspace, Type[] includedTypes)
public bool Equals(object o)
public int GetHashCode()
}
internal System.Xml.Serialization.TypeData : object {
private Type type
private string elementName
private SchemaTypes sType
private Type listItemType
private string typeName
private string fullTypeName
private string csharpName
private string csharpFullName
private TypeData listItemTypeData
private TypeData listTypeData
private TypeData mappedType
private XmlSchemaPatternFacet facet
private bool hasPublicConstructor
private bool nullableOverride
private Hashtable keywordsTable
private String[] keywords
public string TypeName
public string XmlType
public Type Type
public string FullTypeName
public string CSharpName
public string CSharpFullName
public SchemaTypes SchemaType
public bool IsListType
public bool IsComplexType
public bool IsValueType
public bool NullableOverride
public bool IsNullable
public TypeData ListItemTypeData
public Type ListItemType
public TypeData ListTypeData
public bool IsXsdType
public TypeData MappedType
public XmlSchemaPatternFacet XmlSchemaPatternFacet
public bool HasPublicConstructor
public void .ctor(Type type, string elementName, bool isPrimitive)
public void .ctor(Type type, string elementName, bool isPrimitive, TypeData mappedType, XmlSchemaPatternFacet facet)
internal void .ctor(string typeName, string fullTypeName, string xmlType, SchemaTypes schemaType, TypeData listItemTypeData)
public string get_TypeName()
public string get_XmlType()
public Type get_Type()
public string get_FullTypeName()
public string get_CSharpName()
public string get_CSharpFullName()
public string ToCSharpName(Type type, bool full)
private bool IsKeyword(string name)
public SchemaTypes get_SchemaType()
public bool get_IsListType()
public bool get_IsComplexType()
public bool get_IsValueType()
public bool get_NullableOverride()
public bool get_IsNullable()
public void set_IsNullable(bool value)
public TypeData get_ListItemTypeData()
public Type get_ListItemType()
public TypeData get_ListTypeData()
public bool get_IsXsdType()
public TypeData get_MappedType()
public XmlSchemaPatternFacet get_XmlSchemaPatternFacet()
public bool get_HasPublicConstructor()
public PropertyInfo GetIndexerProperty(Type collectionType)
private InvalidOperationException CreateMissingAddMethodException(Type type, string inheritFrom, Type argumentType)
private Type GetGenericListItemType(Type type)
}
internal System.Xml.Serialization.TypeMember : object {
private Type type
private string member
internal void .ctor(Type type, string member)
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(TypeMember tm1, TypeMember tm2)
public string ToString()
public bool op_Equality(TypeMember tm1, TypeMember tm2)
public bool op_Inequality(TypeMember tm1, TypeMember tm2)
}
internal System.Xml.Serialization.TypeTranslator : object {
private Hashtable nameCache
private Hashtable primitiveTypes
private Hashtable primitiveArrayTypes
private Hashtable nullableTypes
public TypeData GetTypeData(Type type)
public TypeData GetTypeData(Type runtimeType, string xmlDataType)
public bool IsPrimitive(Type type)
public TypeData GetPrimitiveTypeData(string typeName)
public TypeData GetPrimitiveTypeData(string typeName, bool nullable)
public TypeData FindPrimitiveTypeData(string typeName)
public TypeData GetDefaultPrimitiveTypeData(TypeData primType)
public bool IsDefaultPrimitiveTpeData(TypeData primType)
public TypeData CreateCustomType(string typeName, string fullTypeName, string xmlType, SchemaTypes schemaType, TypeData listItemTypeData)
public string GetArrayName(string elemName)
public string GetArrayName(string elemName, int dimensions)
public void ParseArrayType(string arrayType, String& type, String& ns, String& dimensions)
}
public System.Xml.Serialization.UnreferencedObjectEventArgs : EventArgs {
private object unreferencedObject
private string unreferencedId
public string UnreferencedId
public object UnreferencedObject
public void .ctor(object o, string id)
public string get_UnreferencedId()
public object get_UnreferencedObject()
}
public System.Xml.Serialization.UnreferencedObjectEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, UnreferencedObjectEventArgs e)
public IAsyncResult BeginInvoke(object sender, UnreferencedObjectEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlAnyElementAttribute : Attribute {
private string elementName
private string ns
private bool isNamespaceSpecified
private int order
public string Name
public string Namespace
internal bool NamespaceSpecified
public int Order
public void .ctor(string name)
public void .ctor(string name, string ns)
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
internal bool get_NamespaceSpecified()
public int get_Order()
public void set_Order(int value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlAnyElementAttributes : CollectionBase {
public XmlAnyElementAttribute Item
public XmlAnyElementAttribute get_Item(int index)
public void set_Item(int index, XmlAnyElementAttribute value)
public int Add(XmlAnyElementAttribute attribute)
public bool Contains(XmlAnyElementAttribute attribute)
public int IndexOf(XmlAnyElementAttribute attribute)
public void Insert(int index, XmlAnyElementAttribute attribute)
public void Remove(XmlAnyElementAttribute attribute)
public void CopyTo(XmlAnyElementAttribute[] array, int index)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlArrayAttribute : Attribute {
private string elementName
private XmlSchemaForm form
private bool isNullable
private string ns
private int order
public string ElementName
public XmlSchemaForm Form
public bool IsNullable
public string Namespace
public int Order
public void .ctor(string elementName)
public string get_ElementName()
public void set_ElementName(string value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public string get_Namespace()
public void set_Namespace(string value)
public int get_Order()
public void set_Order(int value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlArrayItemAttribute : Attribute {
private string dataType
private string elementName
private XmlSchemaForm form
private string ns
private bool isNullable
private bool isNullableSpecified
private int nestingLevel
private Type type
public string DataType
public string ElementName
public XmlSchemaForm Form
public string Namespace
public bool IsNullable
internal bool IsNullableSpecified
public Type Type
public int NestingLevel
public void .ctor(string elementName)
public void .ctor(Type type)
public void .ctor(string elementName, Type type)
public string get_DataType()
public void set_DataType(string value)
public string get_ElementName()
public void set_ElementName(string value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public string get_Namespace()
public void set_Namespace(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
internal bool get_IsNullableSpecified()
public Type get_Type()
public void set_Type(Type value)
public int get_NestingLevel()
public void set_NestingLevel(int value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlArrayItemAttributes : CollectionBase {
public XmlArrayItemAttribute Item
public XmlArrayItemAttribute get_Item(int index)
public void set_Item(int index, XmlArrayItemAttribute value)
public int Add(XmlArrayItemAttribute attribute)
public bool Contains(XmlArrayItemAttribute attribute)
public void CopyTo(XmlArrayItemAttribute[] array, int index)
public int IndexOf(XmlArrayItemAttribute attribute)
public void Insert(int index, XmlArrayItemAttribute attribute)
public void Remove(XmlArrayItemAttribute attribute)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlAttributeAttribute : Attribute {
private string attributeName
private string dataType
private Type type
private XmlSchemaForm form
private string ns
public string AttributeName
public string DataType
public XmlSchemaForm Form
public string Namespace
public Type Type
public void .ctor(string attributeName)
public void .ctor(Type type)
public void .ctor(string attributeName, Type type)
public string get_AttributeName()
public void set_AttributeName(string value)
public string get_DataType()
public void set_DataType(string value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public string get_Namespace()
public void set_Namespace(string value)
public Type get_Type()
public void set_Type(Type value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlAttributeEventArgs : EventArgs {
private XmlAttribute attr
private int lineNumber
private int linePosition
private object obj
private string expectedAttributes
public XmlAttribute Attr
public int LineNumber
public int LinePosition
public object ObjectBeingDeserialized
public string ExpectedAttributes
internal void .ctor(XmlAttribute attr, int lineNum, int linePos, object source)
public XmlAttribute get_Attr()
public int get_LineNumber()
public int get_LinePosition()
public object get_ObjectBeingDeserialized()
public string get_ExpectedAttributes()
internal void set_ExpectedAttributes(string value)
}
public System.Xml.Serialization.XmlAttributeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XmlAttributeEventArgs e)
public IAsyncResult BeginInvoke(object sender, XmlAttributeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlAttributeOverrides : object {
private Hashtable overrides
public XmlAttributes Item
public XmlAttributes Item
public XmlAttributes get_Item(Type type)
public XmlAttributes get_Item(Type type, string member)
public void Add(Type type, XmlAttributes attributes)
public void Add(Type type, string member, XmlAttributes attributes)
private TypeMember GetKey(Type type, string member)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlAttributes : object {
private XmlAnyAttributeAttribute xmlAnyAttribute
private XmlAnyElementAttributes xmlAnyElements
private XmlArrayAttribute xmlArray
private XmlArrayItemAttributes xmlArrayItems
private XmlAttributeAttribute xmlAttribute
private XmlChoiceIdentifierAttribute xmlChoiceIdentifier
private object xmlDefaultValue
private XmlElementAttributes xmlElements
private XmlEnumAttribute xmlEnum
private bool xmlIgnore
private bool xmlns
private XmlRootAttribute xmlRoot
private XmlTextAttribute xmlText
private XmlTypeAttribute xmlType
public XmlAnyAttributeAttribute XmlAnyAttribute
public XmlAnyElementAttributes XmlAnyElements
public XmlArrayAttribute XmlArray
public XmlArrayItemAttributes XmlArrayItems
public XmlAttributeAttribute XmlAttribute
public XmlChoiceIdentifierAttribute XmlChoiceIdentifier
public object XmlDefaultValue
public XmlElementAttributes XmlElements
public XmlEnumAttribute XmlEnum
public bool XmlIgnore
public bool Xmlns
public XmlRootAttribute XmlRoot
public XmlTextAttribute XmlText
public XmlTypeAttribute XmlType
public void .ctor(ICustomAttributeProvider provider)
public XmlAnyAttributeAttribute get_XmlAnyAttribute()
public void set_XmlAnyAttribute(XmlAnyAttributeAttribute value)
public XmlAnyElementAttributes get_XmlAnyElements()
public XmlArrayAttribute get_XmlArray()
public void set_XmlArray(XmlArrayAttribute value)
public XmlArrayItemAttributes get_XmlArrayItems()
public XmlAttributeAttribute get_XmlAttribute()
public void set_XmlAttribute(XmlAttributeAttribute value)
public XmlChoiceIdentifierAttribute get_XmlChoiceIdentifier()
public object get_XmlDefaultValue()
public void set_XmlDefaultValue(object value)
public XmlElementAttributes get_XmlElements()
public XmlEnumAttribute get_XmlEnum()
public void set_XmlEnum(XmlEnumAttribute value)
public bool get_XmlIgnore()
public void set_XmlIgnore(bool value)
public bool get_Xmlns()
public void set_Xmlns(bool value)
public XmlRootAttribute get_XmlRoot()
public void set_XmlRoot(XmlRootAttribute value)
public XmlTextAttribute get_XmlText()
public void set_XmlText(XmlTextAttribute value)
public XmlTypeAttribute get_XmlType()
public void set_XmlType(XmlTypeAttribute value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlChoiceIdentifierAttribute : Attribute {
private string memberName
public string MemberName
public void .ctor(string name)
public string get_MemberName()
public void set_MemberName(string value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlCodeExporter : CodeExporter {
public void .ctor(CodeNamespace codeNamespace)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options, Hashtable mappings)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable mappings)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member, string ns)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlTypeMapping member, string ns)
public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member, string ns, bool forceUseMemberName)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping)
public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping)
}
internal System.Xml.Serialization.XmlCustomFormatter : object {
private Dictionary`2<string, int> <>f__switch$map51
private Dictionary`2<string, int> <>f__switch$map52
private Dictionary`2<string, int> <>f__switch$map53
private Dictionary`2<string, int> <>f__switch$map54
internal string FromByteArrayBase64(Byte[] value)
internal string FromByteArrayHex(Byte[] value)
internal string FromChar(char value)
internal string FromDate(DateTime value)
internal string FromDateTime(DateTime value)
internal string FromTime(DateTime value)
internal string FromEnum(long value, String[] values, Int64[] ids)
internal string FromEnum(long value, String[] values, Int64[] ids, string typeName)
internal string FromXmlName(string name)
internal string FromXmlNCName(string ncName)
internal string FromXmlNmToken(string nmToken)
internal string FromXmlNmTokens(string nmTokens)
internal Byte[] ToByteArrayBase64(string value)
internal char ToChar(string value)
internal DateTime ToDate(string value)
internal DateTime ToDateTime(string value)
internal DateTime ToTime(string value)
internal long ToEnum(string value, Hashtable values, string typeName, bool validate)
internal string ToXmlName(string value)
internal string ToXmlNCName(string value)
internal string ToXmlNmToken(string value)
internal string ToXmlNmTokens(string value)
internal string ToXmlString(TypeData type, object value)
internal object FromXmlString(TypeData type, string value)
internal string GenerateToXmlString(TypeData type, string value)
private string GenerateToXmlStringCore(TypeData type, string value)
internal string GenerateFromXmlString(TypeData type, string value)
private string GenerateFromXmlStringCore(TypeData type, string value)
}
public System.Xml.Serialization.XmlDeserializationEvents : ValueType {
private XmlAttributeEventHandler onUnknownAttribute
private XmlElementEventHandler onUnknownElement
private XmlNodeEventHandler onUnknownNode
private UnreferencedObjectEventHandler onUnreferencedObject
public XmlAttributeEventHandler OnUnknownAttribute
public XmlElementEventHandler OnUnknownElement
public XmlNodeEventHandler OnUnknownNode
public UnreferencedObjectEventHandler OnUnreferencedObject
public XmlAttributeEventHandler get_OnUnknownAttribute()
public void set_OnUnknownAttribute(XmlAttributeEventHandler value)
public XmlElementEventHandler get_OnUnknownElement()
public void set_OnUnknownElement(XmlElementEventHandler value)
public XmlNodeEventHandler get_OnUnknownNode()
public void set_OnUnknownNode(XmlNodeEventHandler value)
public UnreferencedObjectEventHandler get_OnUnreferencedObject()
public void set_OnUnreferencedObject(UnreferencedObjectEventHandler value)
}
public System.Xml.Serialization.XmlElementAttribute : Attribute {
private string dataType
private string elementName
private XmlSchemaForm form
private string ns
private bool isNullable
private bool isNullableSpecified
private Type type
private int order
public string DataType
public string ElementName
public XmlSchemaForm Form
public string Namespace
public bool IsNullable
internal bool IsNullableSpecified
public int Order
public Type Type
public void .ctor(string elementName)
public void .ctor(Type type)
public void .ctor(string elementName, Type type)
public string get_DataType()
public void set_DataType(string value)
public string get_ElementName()
public void set_ElementName(string value)
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public string get_Namespace()
public void set_Namespace(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
internal bool get_IsNullableSpecified()
public int get_Order()
public void set_Order(int value)
public Type get_Type()
public void set_Type(Type value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlElementAttributes : CollectionBase {
public XmlElementAttribute Item
public XmlElementAttribute get_Item(int index)
public void set_Item(int index, XmlElementAttribute value)
public int Add(XmlElementAttribute attribute)
public bool Contains(XmlElementAttribute attribute)
public int IndexOf(XmlElementAttribute attribute)
public void Insert(int index, XmlElementAttribute attribute)
public void Remove(XmlElementAttribute attribute)
public void CopyTo(XmlElementAttribute[] array, int index)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlElementEventArgs : EventArgs {
private XmlElement attr
private int lineNumber
private int linePosition
private object obj
private string expectedElements
public XmlElement Element
public int LineNumber
public int LinePosition
public object ObjectBeingDeserialized
public string ExpectedElements
internal void .ctor(XmlElement attr, int lineNum, int linePos, object source)
public XmlElement get_Element()
public int get_LineNumber()
public int get_LinePosition()
public object get_ObjectBeingDeserialized()
public string get_ExpectedElements()
internal void set_ExpectedElements(string value)
}
public System.Xml.Serialization.XmlElementEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XmlElementEventArgs e)
public IAsyncResult BeginInvoke(object sender, XmlElementEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlEnumAttribute : Attribute {
private string name
public string Name
public void .ctor(string name)
public string get_Name()
public void set_Name(string value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlIncludeAttribute : Attribute {
private Type type
public Type Type
public void .ctor(Type type)
public Type get_Type()
public void set_Type(Type value)
}
internal System.Xml.Serialization.XmlMapCodeGenerator : MapCodeGenerator {
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options)
public void .ctor(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable mappings)
protected void GenerateClass(XmlTypeMapping map, CodeTypeDeclaration codeClass, bool isTopLevel)
protected void GenerateClassInclude(CodeAttributeDeclarationCollection attributes, XmlTypeMapping map)
protected void GenerateAnyAttribute(CodeTypeMember codeField)
protected void GenerateAttributeMember(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberAttribute attinfo, string defaultNamespace, bool forceUseMemberName)
protected void GenerateElementInfoMember(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberElement member, XmlTypeMapElementInfo einfo, TypeData defaultType, string defaultNamespace, bool addAlwaysAttr, bool forceUseMemberName)
protected void GenerateElementMember(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberElement member)
protected void GenerateArrayElement(CodeAttributeDeclarationCollection attributes, XmlTypeMapMemberElement member, string defaultNamespace, bool forceUseMemberName)
protected void GenerateArrayItemAttributes(CodeAttributeDeclarationCollection attributes, ListMap listMap, TypeData type, XmlTypeMapElementInfo ainfo, string defaultName, string defaultNamespace, int nestingLevel)
protected void GenerateTextElementAttribute(CodeAttributeDeclarationCollection attributes, XmlTypeMapElementInfo einfo, TypeData defaultType)
protected void GenerateUnnamedAnyElementAttribute(CodeAttributeDeclarationCollection attributes, XmlTypeMapElementInfo einfo, string defaultNamespace)
protected void GenerateEnum(XmlTypeMapping map, CodeTypeDeclaration codeEnum, bool isTopLevel)
protected void GenerateEnumItem(CodeMemberField codeField, EnumMapMember emem)
protected void GenerateSpecifierMember(CodeTypeMember codeField)
}
public System.Xml.Serialization.XmlMapping : object {
private ObjectMap map
private ArrayList relatedMaps
private SerializationFormat format
private SerializationSource source
internal string _elementName
internal string _namespace
private string key
public string XsdElementName
public string ElementName
public string Namespace
internal ObjectMap ObjectMap
internal ArrayList RelatedMaps
internal SerializationFormat Format
internal SerializationSource Source
internal void .ctor(string elementName, string ns)
public string get_XsdElementName()
public string get_ElementName()
public string get_Namespace()
public void SetKey(string key)
internal string GetKey()
internal ObjectMap get_ObjectMap()
internal void set_ObjectMap(ObjectMap value)
internal ArrayList get_RelatedMaps()
internal void set_RelatedMaps(ArrayList value)
internal SerializationFormat get_Format()
internal void set_Format(SerializationFormat value)
internal SerializationSource get_Source()
internal void set_Source(SerializationSource value)
}
public System.Xml.Serialization.XmlMappingAccess : Enum {
public int value__
public XmlMappingAccess None
public XmlMappingAccess Read
public XmlMappingAccess Write
}
public System.Xml.Serialization.XmlMemberMapping : object {
private XmlTypeMapMember _mapMember
private string _elementName
private string _memberName
private string _namespace
private string _typeNamespace
private XmlSchemaForm _form
public bool Any
public string ElementName
public string MemberName
public string Namespace
public string TypeFullName
public string TypeName
public string TypeNamespace
internal XmlTypeMapMember TypeMapMember
internal XmlSchemaForm Form
public string XsdElementName
public bool CheckSpecified
internal void .ctor(string memberName, string defaultNamespace, XmlTypeMapMember mapMem, bool encodedFormat)
public bool get_Any()
public string get_ElementName()
public string get_MemberName()
public string get_Namespace()
public string get_TypeFullName()
public string get_TypeName()
public string get_TypeNamespace()
internal XmlTypeMapMember get_TypeMapMember()
internal XmlSchemaForm get_Form()
public string get_XsdElementName()
public string GenerateTypeName(CodeDomProvider codeProvider)
public bool get_CheckSpecified()
}
public System.Xml.Serialization.XmlMembersMapping : XmlMapping {
private bool _hasWrapperElement
private XmlMemberMapping[] _mapping
public int Count
public XmlMemberMapping Item
public string TypeName
public string TypeNamespace
internal bool HasWrapperElement
internal void .ctor(XmlMemberMapping[] mapping)
internal void .ctor(string elementName, string ns, XmlMemberMapping[] mapping)
internal void .ctor(string elementName, string ns, bool hasWrapperElement, bool writeAccessors, XmlMemberMapping[] mapping)
public int get_Count()
public XmlMemberMapping get_Item(int index)
public string get_TypeName()
public string get_TypeNamespace()
internal bool get_HasWrapperElement()
}
public System.Xml.Serialization.XmlNodeEventArgs : EventArgs {
private int linenumber
private int lineposition
private string localname
private string name
private string nsuri
private XmlNodeType nodetype
private object source
private string text
public int LineNumber
public int LinePosition
public string LocalName
public string Name
public string NamespaceURI
public XmlNodeType NodeType
public object ObjectBeingDeserialized
public string Text
internal void .ctor(int linenumber, int lineposition, string localname, string name, string nsuri, XmlNodeType nodetype, object source, string text)
public int get_LineNumber()
public int get_LinePosition()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNodeType get_NodeType()
public object get_ObjectBeingDeserialized()
public string get_Text()
}
public System.Xml.Serialization.XmlNodeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XmlNodeEventArgs e)
public IAsyncResult BeginInvoke(object sender, XmlNodeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlReflectionImporter : object {
private string initialDefaultNamespace
private XmlAttributeOverrides attributeOverrides
private ArrayList includedTypes
private ReflectionHelper helper
private int arrayChoiceCount
private ArrayList relatedMaps
private bool allowPrivateTypes
private string errSimple
private string errSimple2
internal bool AllowPrivateTypes
public void .ctor(string defaultNamespace)
public void .ctor(XmlAttributeOverrides attributeOverrides)
public void .ctor(XmlAttributeOverrides attributeOverrides, string defaultNamespace)
internal bool get_AllowPrivateTypes()
internal void set_AllowPrivateTypes(bool value)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate)
public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate, XmlMappingAccess access)
public XmlTypeMapping ImportTypeMapping(Type type)
public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace)
public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute group)
public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root, string defaultNamespace)
internal XmlTypeMapping ImportTypeMapping(TypeData typeData, string defaultNamespace)
private XmlTypeMapping ImportTypeMapping(TypeData typeData, XmlRootAttribute root, string defaultNamespace)
private XmlTypeMapping CreateTypeMapping(TypeData typeData, XmlRootAttribute root, string defaultXmlType, string defaultNamespace)
private XmlTypeMapping ImportClassMapping(Type type, XmlRootAttribute root, string defaultNamespace)
private XmlTypeMapping ImportClassMapping(TypeData typeData, XmlRootAttribute root, string defaultNamespace)
private void RegisterDerivedMap(XmlTypeMapping map, XmlTypeMapping derivedMap)
private string GetTypeNamespace(TypeData typeData, XmlRootAttribute root, string defaultNamespace)
private XmlTypeMapping ImportListMapping(Type type, XmlRootAttribute root, string defaultNamespace, XmlAttributes atts, int nestingLevel)
private XmlTypeMapping ImportListMapping(TypeData typeData, XmlRootAttribute root, string defaultNamespace, XmlAttributes atts, int nestingLevel)
private XmlTypeMapping ImportXmlNodeMapping(TypeData typeData, XmlRootAttribute root, string defaultNamespace)
private XmlTypeMapping ImportPrimitiveMapping(TypeData typeData, XmlRootAttribute root, string defaultNamespace)
private XmlTypeMapping ImportEnumMapping(TypeData typeData, XmlRootAttribute root, string defaultNamespace)
private XmlTypeMapping ImportXmlSerializableMapping(TypeData typeData, XmlRootAttribute root, string defaultNamespace)
private void ImportIncludedTypes(Type type, string defaultNamespace)
private ICollection GetReflectionMembers(Type type)
private XmlTypeMapMember CreateMapMember(Type declaringType, XmlReflectionMember rmember, string defaultNamespace)
private XmlTypeMapElementInfoList ImportElementInfo(Type cls, string defaultName, string defaultNamespace, Type defaultType, XmlTypeMapMemberElement member, XmlAttributes atts)
private XmlTypeMapElementInfoList ImportAnyElementInfo(string defaultNamespace, XmlReflectionMember rmember, XmlTypeMapMemberElement member, XmlAttributes atts)
private void ImportTextElementInfo(XmlTypeMapElementInfoList list, Type defaultType, XmlTypeMapMemberElement member, XmlAttributes atts, string defaultNamespace)
private bool CanBeNull(TypeData type)
public void IncludeType(Type type)
public void IncludeTypes(ICustomAttributeProvider provider)
private object GetDefaultValue(TypeData typeData, object defaultValue)
}
public System.Xml.Serialization.XmlReflectionMember : object {
private bool isReturnValue
private string memberName
private Type memberType
private bool overrideIsNullable
private SoapAttributes soapAttributes
private XmlAttributes xmlAttributes
private Type declaringType
public bool IsReturnValue
public string MemberName
public Type MemberType
public bool OverrideIsNullable
public SoapAttributes SoapAttributes
public XmlAttributes XmlAttributes
internal Type DeclaringType
internal void .ctor(string name, Type type, XmlAttributes attributes)
internal void .ctor(string name, Type type, SoapAttributes attributes)
public bool get_IsReturnValue()
public void set_IsReturnValue(bool value)
public string get_MemberName()
public void set_MemberName(string value)
public Type get_MemberType()
public void set_MemberType(Type value)
public bool get_OverrideIsNullable()
public void set_OverrideIsNullable(bool value)
public SoapAttributes get_SoapAttributes()
public void set_SoapAttributes(SoapAttributes value)
public XmlAttributes get_XmlAttributes()
public void set_XmlAttributes(XmlAttributes value)
internal Type get_DeclaringType()
internal void set_DeclaringType(Type value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlRootAttribute : Attribute {
private string dataType
private string elementName
private bool isNullable
private bool isNullableSpecified
private string ns
public string DataType
public string ElementName
public bool IsNullable
public bool IsNullableSpecified
public string Namespace
internal string Key
public void .ctor(string elementName)
public string get_DataType()
public void set_DataType(string value)
public string get_ElementName()
public void set_ElementName(string value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public bool get_IsNullableSpecified()
public string get_Namespace()
public void set_Namespace(string value)
internal void AddKeyHash(StringBuilder sb)
internal string get_Key()
}
public System.Xml.Serialization.XmlSchemaEnumerator : object {
private IEnumerator e
private object System.Collections.IEnumerator.Current
public XmlSchema Current
public void .ctor(XmlSchemas list)
private object System.Collections.IEnumerator.get_Current()
private void System.Collections.IEnumerator.Reset()
public XmlSchema get_Current()
public void Dispose()
public bool MoveNext()
}
public System.Xml.Serialization.XmlSchemaExporter : object {
private XmlSchemas schemas
private Hashtable exportedMaps
private Hashtable exportedElements
private bool encodedFormat
private XmlDocument xmlDoc
private XmlDocument Document
public void .ctor(XmlSchemas schemas)
internal void .ctor(XmlSchemas schemas, bool encodedFormat)
public string ExportAnyType(string ns)
public string ExportAnyType(XmlMembersMapping members)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping)
public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping, bool exportEnclosingType)
public XmlQualifiedName ExportTypeMapping(XmlMembersMapping xmlMembersMapping)
public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping)
private void ExportXmlSerializableSchema(XmlSchema currentSchema, XmlSerializableMapping map)
private bool CanBeDuplicated(XmlSchema existingSchema, XmlSchema schema)
private void ExportClassSchema(XmlTypeMapping map)
private bool BaseHasMixedContent(XmlTypeMapping map)
private bool HasMixedContent(XmlTypeMapping map)
private void ExportMembersMapSchema(XmlSchema schema, ClassMap map, XmlTypeMapping baseMap, XmlSchemaObjectCollection outAttributes, XmlSchemaSequence& particle, XmlSchemaAnyAttribute& anyAttribute)
private XmlSchemaElement FindElement(XmlSchemaObjectCollection col, string name)
private XmlSchemaComplexType FindComplexType(XmlSchemaObjectCollection col, string name)
private XmlSchemaAttribute GetSchemaAttribute(XmlSchema currentSchema, XmlTypeMapMemberAttribute attinfo, bool isTypeMember)
private XmlSchemaParticle GetSchemaElement(XmlSchema currentSchema, XmlTypeMapElementInfo einfo, bool isTypeMember)
private XmlSchemaParticle GetSchemaElement(XmlSchema currentSchema, XmlTypeMapElementInfo einfo, bool isTypeMember, XmlSchemaObjectContainer container)
private XmlSchemaParticle GetSchemaElement(XmlSchema currentSchema, XmlTypeMapElementInfo einfo, object defaultValue, bool isTypeMember, XmlSchemaObjectContainer container)
private void ImportNamespace(XmlSchema schema, string ns)
private bool DefinedInBaseMap(XmlTypeMapping map, XmlTypeMapMember member)
private XmlSchemaType GetSchemaXmlNodeType()
private void SetSchemaXmlSerializableType(XmlSerializableMapping map, XmlSchemaElement elem)
private XmlSchemaSimpleType GetSchemaSimpleListType(TypeData typeData)
private XmlSchemaParticle GetSchemaArrayElement(XmlSchema currentSchema, XmlTypeMapElementInfoList infos)
private string ExportDefaultValue(TypeData typeData, XmlTypeMapping map, object defaultValue)
private void ExportDerivedSchema(XmlTypeMapping map)
private void ExportEnumSchema(XmlTypeMapping map)
private XmlQualifiedName ExportArraySchema(XmlTypeMapping map, string defaultNamespace)
private XmlDocument get_Document()
private bool IsMapExported(XmlTypeMapping map)
private void SetMapExported(XmlTypeMapping map)
private bool IsElementExported(XmlTypeMapping map)
private void SetElementExported(XmlTypeMapping map)
private string GetMapKey(XmlTypeMapping map)
private string GetArrayKeyName(TypeData td)
private void CompileSchemas()
private XmlSchema GetSchema(string ns)
}
public System.Xml.Serialization.XmlSchemaImporter : SchemaImporter {
private string XmlNamespace
private XmlSchemas schemas
private CodeIdentifiers typeIdentifiers
private CodeIdentifiers elemIdentifiers
private Hashtable mappedTypes
private Hashtable primitiveDerivedMappedTypes
private Hashtable dataMappedTypes
private Queue pendingMaps
private Hashtable sharedAnonymousTypes
private bool encodedFormat
private XmlReflectionImporter auxXmlRefImporter
private SoapReflectionImporter auxSoapRefImporter
private bool anyTypeImported
private CodeGenerationOptions options
private XmlQualifiedName anyType
private XmlQualifiedName arrayType
private XmlQualifiedName arrayTypeRefName
private XmlSchemaElement anyElement
internal bool UseEncodedFormat
public void .ctor(XmlSchemas schemas)
public void .ctor(XmlSchemas schemas, CodeIdentifiers typeIdentifiers)
public void .ctor(XmlSchemas schemas, CodeGenerationOptions options, CodeDomProvider codeProvider, ImportContext context)
public void .ctor(XmlSchemas schemas, CodeGenerationOptions options, ImportContext context)
public void .ctor(XmlSchemas schemas, CodeIdentifiers typeIdentifiers, CodeGenerationOptions options)
private void InitSharedData(ImportContext context)
internal bool get_UseEncodedFormat()
internal void set_UseEncodedFormat(bool value)
private void InitializeExtensions()
public XmlMembersMapping ImportAnyType(XmlQualifiedName typeName, string elementName)
public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType)
public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType, bool baseTypeCanBeIndirect)
private void SetMapBaseType(XmlTypeMapping map, Type baseType)
public XmlMembersMapping ImportMembersMapping(XmlQualifiedName name)
public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names)
public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members)
public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName)
public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType)
public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType, bool baseTypeCanBeIndirect)
internal XmlMembersMapping ImportEncodedMembersMapping(string name, string ns, SoapSchemaMember[] members, bool hasWrapperElement)
internal XmlMembersMapping ImportEncodedMembersMapping(string name, string ns, SoapSchemaMember member)
private XmlMemberMapping[] ImportMembersMappingComposite(XmlSchemaComplexType stype, XmlQualifiedName refer)
private XmlMemberMapping ImportMemberMapping(string name, string ns, bool isNullable, TypeData type, XmlTypeMapping emap)
public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names, Type baseType, bool baseTypeCanBeIndirect)
public XmlTypeMapping ImportTypeMapping(XmlQualifiedName name)
private XmlTypeMapping ImportTypeCommon(XmlQualifiedName name, XmlQualifiedName qname, XmlSchemaType stype, bool isNullable)
private bool LocateElement(XmlQualifiedName name, XmlQualifiedName& qname, XmlSchemaType& stype)
private bool LocateElement(XmlSchemaElement elem, XmlQualifiedName& qname, XmlSchemaType& stype)
private XmlTypeMapping ImportType(XmlQualifiedName name, XmlQualifiedName root, bool throwOnError)
private XmlTypeMapping ImportClass(XmlQualifiedName name)
private XmlTypeMapping ImportType(XmlQualifiedName name, XmlSchemaType stype, XmlQualifiedName root)
private XmlTypeMapping ImportClassComplexType(XmlQualifiedName typeQName, XmlSchemaComplexType stype, XmlQualifiedName root)
private XmlTypeMapping CreateClassMap(XmlQualifiedName typeQName, XmlSchemaComplexType stype, XmlQualifiedName root)
private void RegisterMapFixup(XmlTypeMapping map, XmlQualifiedName typeQName, XmlSchemaComplexType stype)
private void BuildPendingMaps()
private void BuildPendingMap(XmlTypeMapping map)
private void BuildClassMap(XmlTypeMapping map, XmlQualifiedName typeQName, XmlSchemaComplexType stype)
private void ImportAttributes(XmlQualifiedName typeQName, ClassMap cmap, XmlSchemaObjectCollection atts, XmlSchemaAnyAttribute anyat, CodeIdentifiers classIds)
private XmlSchemaObjectCollection CollectAttributeUsesNonOverlap(XmlSchemaObjectCollection src, ClassMap map)
private ListMap BuildArrayMap(XmlQualifiedName typeQName, XmlSchemaComplexType stype, TypeData& arrayTypeData)
private ListMap BuildEncodedArrayMap(string type, string ns, TypeData& arrayTypeData)
private XmlSchemaAttribute FindArrayAttribute(XmlSchemaObjectCollection atts)
private void ImportParticleComplexContent(XmlQualifiedName typeQName, ClassMap cmap, XmlSchemaParticle particle, CodeIdentifiers classIds, bool isMixed)
private void AddTextMember(XmlQualifiedName typeQName, ClassMap cmap, CodeIdentifiers classIds)
private void ImportParticleContent(XmlQualifiedName typeQName, ClassMap cmap, XmlSchemaParticle particle, CodeIdentifiers classIds, bool multiValue, Boolean& isMixed)
private void ImportSequenceContent(XmlQualifiedName typeQName, ClassMap cmap, XmlSchemaObjectCollection items, CodeIdentifiers classIds, bool multiValue, Boolean& isMixed)
private object ImportDefaultValue(TypeData typeData, string value)
private void ImportChoiceContent(XmlQualifiedName typeQName, ClassMap cmap, XmlSchemaChoice choice, CodeIdentifiers classIds, bool multiValue)
private bool ImportChoices(XmlQualifiedName typeQName, XmlTypeMapMember member, XmlTypeMapElementInfoList choices, XmlSchemaObjectCollection items)
private void ImportSimpleContent(XmlQualifiedName typeQName, XmlTypeMapping map, XmlSchemaSimpleContent content, CodeIdentifiers classIds, bool isMixed)
private TypeData FindBuiltInType(XmlQualifiedName qname)
private TypeData FindBuiltInType(XmlQualifiedName qname, XmlSchemaSimpleType st)
private XmlQualifiedName GetContentBaseType(XmlSchemaObject ob)
private void ImportComplexContent(XmlQualifiedName typeQName, XmlTypeMapping map, XmlSchemaComplexContent content, CodeIdentifiers classIds, bool isMixed)
private void ImportExtensionTypes(XmlQualifiedName qname)
private XmlTypeMapping ImportClassSimpleType(XmlQualifiedName typeQName, XmlSchemaSimpleType stype, XmlQualifiedName root)
private bool CanBeEnum(XmlSchemaSimpleType stype)
private bool CanBeArray(XmlQualifiedName typeQName, XmlSchemaComplexType stype)
private bool CanBeArray(XmlQualifiedName typeQName, XmlSchemaParticle particle, bool multiValue)
private bool CheckChoiceType(XmlQualifiedName typeQName, XmlSchemaParticle particle, ArrayList types, Boolean& multiValue)
private bool CanBeAnyElement(XmlSchemaComplexType stype)
private Type GetAnyElementType(XmlSchemaComplexType stype)
private bool CanBeIXmlSerializable(XmlSchemaComplexType stype)
private XmlTypeMapping ImportXmlSerializableMapping(string ns)
private XmlTypeMapElementInfo CreateElementInfo(string ns, XmlTypeMapMember member, string name, TypeData typeData, bool isNillable, XmlSchemaForm form)
private XmlTypeMapElementInfo CreateElementInfo(string ns, XmlTypeMapMember member, string name, TypeData typeData, bool isNillable, XmlSchemaForm form, XmlTypeMapping emap)
private XmlTypeMapElementInfo CreateTextElementInfo(string ns, XmlTypeMapMember member, TypeData typeData)
private XmlTypeMapping CreateTypeMapping(XmlQualifiedName typeQName, SchemaTypes schemaType, XmlQualifiedName root)
private XmlTypeMapping CreateArrayTypeMapping(XmlQualifiedName typeQName, TypeData arrayTypeData)
private XmlSchemaElement GetRefElement(XmlQualifiedName typeQName, XmlSchemaElement elem, String& ns)
private XmlSchemaAttribute GetRefAttribute(XmlQualifiedName typeQName, XmlSchemaAttribute attr, String& ns)
private TypeData GetElementTypeData(XmlQualifiedName typeQName, XmlSchemaElement elem, XmlQualifiedName root, XmlTypeMapping& map)
private TypeData GetAttributeTypeData(XmlQualifiedName typeQName, XmlSchemaAttribute attr)
private TypeData GetTypeData(XmlQualifiedName typeQName, XmlQualifiedName root, bool isNullable)
private TypeData GetTypeData(XmlSchemaType stype, XmlQualifiedName typeQNname, string propertyName, bool sharedAnnType, XmlQualifiedName root)
private XmlTypeMapping GetTypeMapping(TypeData typeData)
private void AddObjectDerivedMap(XmlTypeMapping map)
private XmlTypeMapping CreateSystemMap(TypeData typeData)
private void ImportAllObjectTypes()
private XmlTypeMapping GetRegisteredTypeMapping(XmlQualifiedName typeQName, Type baseType)
private XmlTypeMapping GetRegisteredTypeMapping(XmlQualifiedName typeQName)
private XmlTypeMapping GetRegisteredTypeMapping(TypeData typeData)
private void RegisterTypeMapping(XmlQualifiedName qname, TypeData typeData, XmlTypeMapping map)
private XmlSchemaParticle GetRefGroupParticle(XmlSchemaGroupRef refGroup)
private XmlSchemaElement FindRefElement(XmlSchemaElement elem)
private XmlSchemaAttribute FindRefAttribute(XmlQualifiedName refName)
private XmlSchemaAttributeGroup FindRefAttributeGroup(XmlQualifiedName refName)
private XmlTypeMapping ReflectType(Type type)
private XmlTypeMapping ReflectType(TypeData typeData, string ns)
private string GetDocumentation(XmlSchemaAnnotated elem)
private bool IsPrimitiveTypeNamespace(string ns)
}
public System.Xml.Serialization.XmlSchemaProviderAttribute : Attribute {
private string _methodName
private bool _isAny
public string MethodName
public bool IsAny
public void .ctor(string methodName)
public string get_MethodName()
public bool get_IsAny()
public void set_IsAny(bool value)
}
public System.Xml.Serialization.XmlSchemas : CollectionBase {
private string msdataNS
private Hashtable table
public XmlSchema Item
public XmlSchema Item
public bool IsCompiled
private IEnumerator`1<XmlSchema> System.Collections.Generic.IEnumerable<System.Xml.Schema.XmlSchema>.GetEnumerator()
public XmlSchema get_Item(int index)
public void set_Item(int index, XmlSchema value)
public XmlSchema get_Item(string ns)
public bool get_IsCompiled()
public void Compile(ValidationEventHandler handler, bool fullCompile)
public int Add(XmlSchema schema)
public void Add(XmlSchemas schemas)
public int Add(XmlSchema schema, Uri baseUri)
public void AddReference(XmlSchema schema)
public bool Contains(XmlSchema schema)
public bool Contains(string targetNamespace)
public void CopyTo(XmlSchema[] array, int index)
public object Find(XmlQualifiedName name, Type type)
private object Find(XmlSchema schema, XmlQualifiedName name, Type type)
public IList GetSchemas(string ns)
public int IndexOf(XmlSchema schema)
public void Insert(int index, XmlSchema schema)
public bool IsDataSet(XmlSchema schema)
protected void OnClear()
protected void OnInsert(int index, object value)
protected void OnRemove(int index, object value)
protected void OnSet(int index, object oldValue, object newValue)
public void Remove(XmlSchema schema)
}
internal System.Xml.Serialization.XmlSerializableMapping : XmlTypeMapping {
private XmlSchema _schema
private XmlSchemaComplexType _schemaType
private XmlQualifiedName _schemaTypeName
internal XmlSchema Schema
internal XmlSchemaType SchemaType
internal XmlQualifiedName SchemaTypeName
internal void .ctor(string elementName, string ns, TypeData typeData, string xmlType, string xmlTypeNamespace)
internal XmlSchema get_Schema()
internal XmlSchemaType get_SchemaType()
internal XmlQualifiedName get_SchemaTypeName()
}
public System.Xml.Serialization.XmlSerializationCollectionFixupCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object collection, object collectionItems)
public IAsyncResult BeginInvoke(object collection, object collectionItems, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlSerializationFixupCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object fixup)
public IAsyncResult BeginInvoke(object fixup, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlSerializationReadCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public object Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public object EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlSerializationReader : XmlSerializationGeneratedCode {
private XmlDocument document
private XmlReader reader
private ArrayList fixups
private Hashtable collFixups
private ArrayList collItemFixups
private Hashtable typesCallbacks
private ArrayList noIDTargets
private Hashtable targets
private Hashtable delayedListFixups
private XmlSerializer eventSource
private int delayedFixupId
private Hashtable referencedObjects
private int readCount
private int whileIterationCount
private string w3SchemaNS
private string w3InstanceNS
private string w3InstanceNS2000
private string w3InstanceNS1999
private string soapNS
private string wsdlNS
private string nullX
private string nil
private string typeX
private string arrayType
private XmlQualifiedName arrayQName
protected XmlDocument Document
protected XmlReader Reader
protected bool IsReturnValue
protected int ReaderCount
protected bool DecodeName
internal void Initialize(XmlReader reader, XmlSerializer eventSource)
private ArrayList EnsureArrayList(ArrayList list)
private Hashtable EnsureHashtable(Hashtable hash)
protected XmlDocument get_Document()
protected XmlReader get_Reader()
protected bool get_IsReturnValue()
protected void set_IsReturnValue(bool value)
protected int get_ReaderCount()
protected void AddFixup(CollectionFixup fixup)
protected void AddFixup(Fixup fixup)
private void AddFixup(CollectionItemFixup fixup)
protected void AddReadCallback(string name, string ns, Type type, XmlSerializationReadCallback read)
protected void AddTarget(string id, object o)
private string CurrentTag()
protected Exception CreateCtorHasSecurityException(string typeName)
protected Exception CreateInaccessibleConstructorException(string typeName)
protected Exception CreateAbstractTypeException(string name, string ns)
protected Exception CreateInvalidCastException(Type type, object value)
protected Exception CreateReadOnlyCollectionException(string name)
protected Exception CreateUnknownConstantException(string value, Type enumType)
protected Exception CreateUnknownNodeException()
protected Exception CreateUnknownTypeException(XmlQualifiedName type)
protected void CheckReaderCount(Int32& whileIterations, Int32& readerCount)
protected Array EnsureArrayIndex(Array a, int index, Type elementType)
protected void FixupArrayRefs(object fixup)
protected int GetArrayLength(string name, string ns)
protected bool GetNullAttr()
protected object GetTarget(string id)
private bool TargetReady(string id)
protected XmlQualifiedName GetXsiType()
protected void InitCallbacks()
protected void InitIDs()
protected bool IsXmlnsAttribute(string name)
protected void ParseWsdlArrayType(XmlAttribute attr)
protected XmlQualifiedName ReadElementQualifiedName()
protected void ReadEndElement()
protected bool ReadNull()
protected XmlQualifiedName ReadNullableQualifiedName()
protected string ReadNullableString()
protected bool ReadReference(String& fixupReference)
protected object ReadReferencedElement()
private WriteCallbackInfo GetCallbackInfo(XmlQualifiedName qname)
protected object ReadReferencedElement(string name, string ns)
private bool ReadList(Object& resultList)
protected void ReadReferencedElements()
protected object ReadReferencingElement(String& fixupReference)
protected object ReadReferencingElement(string name, string ns, String& fixupReference)
protected object ReadReferencingElement(string name, string ns, bool elementCanBeType, String& fixupReference)
protected IXmlSerializable ReadSerializable(IXmlSerializable serializable)
protected string ReadString(string value)
protected object ReadTypedPrimitive(XmlQualifiedName qname)
private object ReadTypedPrimitive(XmlQualifiedName qname, bool reportUnknown)
protected XmlNode ReadXmlNode(bool wrapped)
protected XmlDocument ReadXmlDocument(bool wrapped)
protected void Referenced(object o)
protected Array ShrinkArray(Array a, int length, Type elementType, bool isNullable)
protected Byte[] ToByteArrayBase64(bool isNull)
protected Byte[] ToByteArrayBase64(string value)
protected Byte[] ToByteArrayHex(bool isNull)
protected Byte[] ToByteArrayHex(string value)
protected char ToChar(string value)
protected DateTime ToDate(string value)
protected DateTime ToDateTime(string value)
protected long ToEnum(string value, Hashtable h, string typeName)
protected DateTime ToTime(string value)
protected string ToXmlName(string value)
protected string ToXmlNCName(string value)
protected string ToXmlNmToken(string value)
protected string ToXmlNmTokens(string value)
protected XmlQualifiedName ToXmlQualifiedName(string value)
protected void UnknownAttribute(object o, XmlAttribute attr)
protected void UnknownAttribute(object o, XmlAttribute attr, string qnames)
protected void UnknownElement(object o, XmlElement elem)
protected void UnknownElement(object o, XmlElement elem, string qnames)
protected void UnknownNode(object o)
protected void UnknownNode(object o, string qnames)
private void OnUnknownNode(XmlNode node, object o, string qnames)
protected void UnreferencedObject(string id, object o)
protected bool get_DecodeName()
protected void set_DecodeName(bool value)
protected string CollapseWhitespace(string value)
protected Exception CreateBadDerivationException(string xsdDerived, string nsDerived, string xsdBase, string nsBase, string clrDerived, string clrBase)
protected Exception CreateInvalidCastException(Type type, object value, string id)
protected Exception CreateMissingIXmlSerializableType(string name, string ns, string clrType)
protected string ReadString(string value, bool trim)
protected object ReadTypedNull(XmlQualifiedName type)
protected Assembly ResolveDynamicAssembly(string assemblyFullName)
}
internal System.Xml.Serialization.XmlSerializationReaderInterpreter : XmlSerializationReader {
private XmlMapping _typeMap
private SerializationFormat _format
private XmlQualifiedName AnyType
private Object[] empty_array
public void .ctor(XmlMapping typeMap)
protected void InitCallbacks()
protected void InitIDs()
protected XmlTypeMapping GetTypeMap(Type type)
public object ReadRoot()
private object ReadEncodedObject(XmlTypeMapping typeMap)
protected object ReadMessage(XmlMembersMapping typeMap)
private object ReadRoot(XmlTypeMapping rootMap)
protected object ReadObject(XmlTypeMapping typeMap, bool isNullable, bool checkType)
protected object ReadClassInstance(XmlTypeMapping typeMap, bool isNullable, bool checkType)
protected void ReadClassInstanceMembers(XmlTypeMapping typeMap, object ob)
private void ReadAttributeMembers(ClassMap map, object ob, bool isValueList)
private void ReadMembers(ClassMap map, object ob, bool isValueList, bool readByOrder)
private void SetListMembersDefaults(ClassMap map, object ob, bool isValueList)
internal void FixupMembers(ClassMap map, object obfixup, bool isValueList)
protected void ProcessUnknownAttribute(object target)
protected void ProcessUnknownElement(object target)
private bool IsReadOnly(XmlTypeMapMember member, TypeData memType, object ob, bool isValueList)
private void SetMemberValue(XmlTypeMapMember member, object ob, object value, bool isValueList)
private void SetMemberValueFromAttr(XmlTypeMapMember member, object ob, object value, bool isValueList)
private object GetMemberValue(XmlTypeMapMember member, object ob, bool isValueList)
private object ReadObjectElement(XmlTypeMapElementInfo elem)
private object ReadPrimitiveValue(XmlTypeMapElementInfo elem)
private object GetValueFromXmlString(string value, TypeData typeData, XmlTypeMapping typeMap)
private object ReadListElement(XmlTypeMapping typeMap, bool isNullable, object list, bool canCreateInstance)
private object ReadListString(XmlTypeMapping typeMap, string values)
private void AddListValue(TypeData listType, Object& list, int index, object value, bool canCreateInstance)
private object CreateInstance(Type type)
private object CreateList(Type listType)
private object InitializeList(TypeData listType)
private void FillList(object list, object items)
private void CopyEnumerableList(object source, object dest)
private object ReadXmlNodeElement(XmlTypeMapping typeMap, bool isNullable)
private object ReadXmlNode(TypeData type, bool wrapped)
private object ReadPrimitiveElement(XmlTypeMapping typeMap, bool isNullable)
private object ReadEnumElement(XmlTypeMapping typeMap, bool isNullable)
private object GetEnumValue(XmlTypeMapping typeMap, string val)
private object ReadXmlSerializableElement(XmlTypeMapping typeMap, bool isNullable)
}
public System.Xml.Serialization.XmlSerializationWriteCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object o)
public IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Serialization.XmlSerializationWriter : XmlSerializationGeneratedCode {
private string xmlNamespace
private string unexpectedTypeError
private ObjectIDGenerator idGenerator
private int qnameCount
private bool topLevelElement
private ArrayList namespaces
private XmlWriter writer
private Queue referencedElements
private Hashtable callbacks
private Hashtable serializedObjects
protected ArrayList Namespaces
protected XmlWriter Writer
protected bool EscapeName
internal void Initialize(XmlWriter writer, XmlSerializerNamespaces nss)
protected ArrayList get_Namespaces()
protected void set_Namespaces(ArrayList value)
protected XmlWriter get_Writer()
protected void set_Writer(XmlWriter value)
protected void AddWriteCallback(Type type, string typeName, string typeNs, XmlSerializationWriteCallback callback)
protected Exception CreateChoiceIdentifierValueException(string value, string identifier, string name, string ns)
protected Exception CreateInvalidChoiceIdentifierValueException(string type, string identifier)
protected Exception CreateMismatchChoiceException(string value, string elementName, string enumValue)
protected Exception CreateUnknownAnyElementException(string name, string ns)
protected Exception CreateUnknownTypeException(object o)
protected Exception CreateUnknownTypeException(Type type)
protected Byte[] FromByteArrayBase64(Byte[] value)
protected string FromByteArrayHex(Byte[] value)
protected string FromChar(char value)
protected string FromDate(DateTime value)
protected string FromDateTime(DateTime value)
protected string FromEnum(long value, String[] values, Int64[] ids)
protected string FromTime(DateTime value)
protected string FromXmlName(string name)
protected string FromXmlNCName(string ncName)
protected string FromXmlNmToken(string nmToken)
protected string FromXmlNmTokens(string nmTokens)
protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName)
private string GetId(object o, bool addToReferencesList)
private bool AlreadyQueued(object ob)
private string GetNamespacePrefix(string ns)
private string GetQualifiedName(string name, string ns)
protected void InitCallbacks()
protected void TopLevelElement()
protected void WriteAttribute(string localName, Byte[] value)
protected void WriteAttribute(string localName, string value)
protected void WriteAttribute(string localName, string ns, Byte[] value)
protected void WriteAttribute(string localName, string ns, string value)
protected void WriteAttribute(string prefix, string localName, string ns, string value)
private void WriteXmlNode(XmlNode node)
protected void WriteElementEncoded(XmlNode node, string name, string ns, bool isNullable, bool any)
protected void WriteElementLiteral(XmlNode node, string name, string ns, bool isNullable, bool any)
protected void WriteElementQualifiedName(string localName, XmlQualifiedName value)
protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value)
protected void WriteElementQualifiedName(string localName, XmlQualifiedName value, XmlQualifiedName xsiType)
protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value, XmlQualifiedName xsiType)
protected void WriteElementString(string localName, string value)
protected void WriteElementString(string localName, string ns, string value)
protected void WriteElementString(string localName, string value, XmlQualifiedName xsiType)
protected void WriteElementString(string localName, string ns, string value, XmlQualifiedName xsiType)
protected void WriteElementStringRaw(string localName, Byte[] value)
protected void WriteElementStringRaw(string localName, string value)
protected void WriteElementStringRaw(string localName, Byte[] value, XmlQualifiedName xsiType)
protected void WriteElementStringRaw(string localName, string ns, Byte[] value)
protected void WriteElementStringRaw(string localName, string ns, string value)
protected void WriteElementStringRaw(string localName, string value, XmlQualifiedName xsiType)
protected void WriteElementStringRaw(string localName, string ns, Byte[] value, XmlQualifiedName xsiType)
protected void WriteElementStringRaw(string localName, string ns, string value, XmlQualifiedName xsiType)
protected void WriteEmptyTag(string name)
protected void WriteEmptyTag(string name, string ns)
protected void WriteEndElement()
protected void WriteEndElement(object o)
protected void WriteId(object o)
protected void WriteNamespaceDeclarations(XmlSerializerNamespaces ns)
protected void WriteNullableQualifiedNameEncoded(string name, string ns, XmlQualifiedName value, XmlQualifiedName xsiType)
protected void WriteNullableQualifiedNameLiteral(string name, string ns, XmlQualifiedName value)
protected void WriteNullableStringEncoded(string name, string ns, string value, XmlQualifiedName xsiType)
protected void WriteNullableStringEncodedRaw(string name, string ns, Byte[] value, XmlQualifiedName xsiType)
protected void WriteNullableStringEncodedRaw(string name, string ns, string value, XmlQualifiedName xsiType)
protected void WriteNullableStringLiteral(string name, string ns, string value)
protected void WriteNullableStringLiteralRaw(string name, string ns, Byte[] value)
protected void WriteNullableStringLiteralRaw(string name, string ns, string value)
protected void WriteNullTagEncoded(string name)
protected void WriteNullTagEncoded(string name, string ns)
protected void WriteNullTagLiteral(string name)
protected void WriteNullTagLiteral(string name, string ns)
protected void WritePotentiallyReferencingElement(string n, string ns, object o)
protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType)
protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference)
protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference, bool isNullable)
protected void WriteReferencedElements()
private bool IsPrimitiveArray(TypeData td)
private void WriteArray(object o, TypeData td)
protected void WriteReferencingElement(string n, string ns, object o)
protected void WriteReferencingElement(string n, string ns, object o, bool isNullable)
private void CheckReferenceQueue()
protected void WriteRpcResult(string name, string ns)
protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable)
protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable, bool wrapped)
protected void WriteStartDocument()
protected void WriteStartElement(string name)
protected void WriteStartElement(string name, string ns)
protected void WriteStartElement(string name, string ns, bool writePrefixed)
protected void WriteStartElement(string name, string ns, object o)
protected void WriteStartElement(string name, string ns, object o, bool writePrefixed)
protected void WriteStartElement(string name, string ns, object o, bool writePrefixed, XmlSerializerNamespaces xmlns)
private void WriteStartElement(string name, string ns, object o, bool writePrefixed, ICollection namespaces)
protected void WriteTypedPrimitive(string name, string ns, object o, bool xsiType)
protected void WriteValue(Byte[] value)
protected void WriteValue(string value)
protected void WriteXmlAttribute(XmlNode node)
protected void WriteXmlAttribute(XmlNode node, object container)
protected void WriteXsiType(string name, string ns)
protected Exception CreateInvalidAnyTypeException(object o)
protected Exception CreateInvalidAnyTypeException(Type t)
protected Exception CreateInvalidEnumValueException(object value, string typeName)
protected string FromEnum(long value, String[] values, Int64[] ids, string typeName)
protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName, bool ignoreEmpty)
protected Assembly ResolveDynamicAssembly(string assemblyFullName)
protected bool get_EscapeName()
protected void set_EscapeName(bool value)
}
internal System.Xml.Serialization.XmlSerializationWriterInterpreter : XmlSerializationWriter {
private string xmlNamespace
private XmlMapping _typeMap
private SerializationFormat _format
public void .ctor(XmlMapping typeMap)
protected void InitCallbacks()
public void WriteRoot(object ob)
protected XmlTypeMapping GetTypeMap(Type type)
protected void WriteObject(XmlTypeMapping typeMap, object ob, string element, string namesp, bool isNullable, bool needType, bool writeWrappingElem)
protected void WriteMessage(XmlMembersMapping membersMap, Object[] parameters)
protected void WriteObjectElement(XmlTypeMapping typeMap, object ob, string element, string namesp)
protected void WriteObjectElementAttributes(XmlTypeMapping typeMap, object ob)
protected void WriteObjectElementElements(XmlTypeMapping typeMap, object ob)
private void WriteMembers(ClassMap map, object ob, bool isValueList)
private void WriteAttributeMembers(ClassMap map, object ob, bool isValueList)
private void WriteElementMembers(ClassMap map, object ob, bool isValueList)
private object GetMemberValue(XmlTypeMapMember member, object ob, bool isValueList)
private bool MemberHasValue(XmlTypeMapMember member, object ob, bool isValueList)
private void WriteMemberElement(XmlTypeMapElementInfo elem, object memberValue)
private object ImplicitConvert(object obj, Type type)
private void WritePrimitiveValueLiteral(object memberValue, string name, string ns, XmlTypeMapping mappedType, TypeData typeData, bool wrapped, bool isNullable)
private void WritePrimitiveValueEncoded(object memberValue, string name, string ns, XmlQualifiedName xsiType, XmlTypeMapping mappedType, TypeData typeData, bool wrapped, bool isNullable)
protected void WriteListElement(XmlTypeMapping typeMap, object ob, string element, string namesp)
private void WriteListContent(object container, TypeData listType, ListMap map, object ob, StringBuilder targetString)
private int GetListCount(TypeData listType, object ob)
private void WriteAnyElementContent(XmlTypeMapMemberAnyElement member, object memberValue)
protected void WritePrimitiveElement(XmlTypeMapping typeMap, object ob, string element, string namesp)
protected void WriteEnumElement(XmlTypeMapping typeMap, object ob, string element, string namesp)
private string GetStringValue(XmlTypeMapping typeMap, TypeData type, object value)
private string GetEnumXmlValue(XmlTypeMapping typeMap, object ob)
}
public System.Xml.Serialization.XmlSerializer : object {
internal string WsdlNamespace
internal string EncodingNamespace
internal string WsdlTypesNamespace
private int generationThreshold
private bool backgroundGeneration
private bool deleteTempFiles
private bool generatorFallback
private bool customSerializer
private XmlMapping typeMapping
private SerializerData serializerData
private Hashtable serializerTypes
private XmlAttributeEventHandler onUnknownAttribute
private XmlElementEventHandler onUnknownElement
private XmlNodeEventHandler onUnknownNode
private UnreferencedObjectEventHandler onUnreferencedObject
internal XmlMapping Mapping
public void .ctor(Type type)
public void .ctor(XmlTypeMapping xmlTypeMapping)
internal void .ctor(XmlMapping mapping, SerializerData data)
public void .ctor(Type type, string defaultNamespace)
public void .ctor(Type type, Type[] extraTypes)
public void .ctor(Type type, XmlAttributeOverrides overrides)
public void .ctor(Type type, XmlRootAttribute root)
public void .ctor(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace)
public void .ctor(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location, Evidence evidence)
public void add_UnknownAttribute(XmlAttributeEventHandler value)
public void remove_UnknownAttribute(XmlAttributeEventHandler value)
public void add_UnknownElement(XmlElementEventHandler value)
public void remove_UnknownElement(XmlElementEventHandler value)
public void add_UnknownNode(XmlNodeEventHandler value)
public void remove_UnknownNode(XmlNodeEventHandler value)
public void add_UnreferencedObject(UnreferencedObjectEventHandler value)
public void remove_UnreferencedObject(UnreferencedObjectEventHandler value)
internal XmlMapping get_Mapping()
internal void OnUnknownAttribute(XmlAttributeEventArgs e)
internal void OnUnknownElement(XmlElementEventArgs e)
internal void OnUnknownNode(XmlNodeEventArgs e)
internal void OnUnreferencedObject(UnreferencedObjectEventArgs e)
public bool CanDeserialize(XmlReader xmlReader)
protected XmlSerializationReader CreateReader()
protected XmlSerializationWriter CreateWriter()
public object Deserialize(Stream stream)
public object Deserialize(TextReader textReader)
public object Deserialize(XmlReader xmlReader)
protected object Deserialize(XmlSerializationReader reader)
public XmlSerializer[] FromMappings(XmlMapping[] mappings)
public XmlSerializer[] FromTypes(Type[] mappings)
protected void Serialize(object o, XmlSerializationWriter writer)
public void Serialize(Stream stream, object o)
public void Serialize(TextWriter textWriter, object o)
public void Serialize(XmlWriter xmlWriter, object o)
public void Serialize(Stream stream, object o, XmlSerializerNamespaces namespaces)
public void Serialize(TextWriter textWriter, object o, XmlSerializerNamespaces namespaces)
public void Serialize(XmlWriter writer, object o, XmlSerializerNamespaces namespaces)
public object Deserialize(XmlReader xmlReader, string encodingStyle, XmlDeserializationEvents events)
public object Deserialize(XmlReader xmlReader, string encodingStyle)
public object Deserialize(XmlReader xmlReader, XmlDeserializationEvents events)
public XmlSerializer[] FromMappings(XmlMapping[] mappings, Evidence evidence)
public XmlSerializer[] FromMappings(XmlMapping[] mappings, Type type)
public Assembly GenerateSerializer(Type[] types, XmlMapping[] mappings)
public Assembly GenerateSerializer(Type[] types, XmlMapping[] mappings, CompilerParameters parameters)
public string GetXmlSerializerAssemblyName(Type type)
public string GetXmlSerializerAssemblyName(Type type, string defaultNamespace)
public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle)
public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id)
private XmlSerializationWriter CreateWriter(XmlMapping typeMapping)
private XmlSerializationReader CreateReader(XmlMapping typeMapping)
private void CheckGeneratedTypes(XmlMapping typeMapping)
private void GenerateSerializersAsync(GenerationBatch batch)
private void RunSerializerGeneration(object obj)
private Assembly GenerateSerializers(GenerationBatch batch, CompilerParameters cp)
private GenerationBatch LoadFromSatelliteAssembly(GenerationBatch batch)
}
public System.Xml.Serialization.XmlSerializerAssemblyAttribute : Attribute {
private string _assemblyName
private string _codeBase
public string AssemblyName
public string CodeBase
public void .ctor(string assemblyName)
public void .ctor(string assemblyName, string codeBase)
public string get_AssemblyName()
public void set_AssemblyName(string value)
public string get_CodeBase()
public void set_CodeBase(string value)
}
public System.Xml.Serialization.XmlSerializerFactory : object {
private Hashtable serializersBySource
public XmlSerializer CreateSerializer(Type type)
public XmlSerializer CreateSerializer(XmlTypeMapping xmlTypeMapping)
public XmlSerializer CreateSerializer(Type type, string defaultNamespace)
public XmlSerializer CreateSerializer(Type type, Type[] extraTypes)
public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides)
public XmlSerializer CreateSerializer(Type type, XmlRootAttribute root)
public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace)
public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location, Evidence evidence)
}
public System.Xml.Serialization.XmlSerializerImplementation : object {
public XmlSerializationReader Reader
public Hashtable ReadMethods
public Hashtable TypedSerializers
public Hashtable WriteMethods
public XmlSerializationWriter Writer
public XmlSerializationReader get_Reader()
public Hashtable get_ReadMethods()
public Hashtable get_TypedSerializers()
public Hashtable get_WriteMethods()
public XmlSerializationWriter get_Writer()
public bool CanSerialize(Type type)
public XmlSerializer GetSerializer(Type type)
}
public System.Xml.Serialization.XmlSerializerNamespaces : object {
private ListDictionary namespaces
public int Count
internal ListDictionary Namespaces
public void .ctor(XmlQualifiedName[] namespaces)
public void .ctor(XmlSerializerNamespaces namespaces)
public void Add(string prefix, string ns)
public XmlQualifiedName[] ToArray()
public int get_Count()
internal string GetPrefix(string Ns)
internal ListDictionary get_Namespaces()
}
public System.Xml.Serialization.XmlSerializerVersionAttribute : Attribute {
private string _namespace
private string _parentAssemblyId
private Type _type
private string _version
public string Namespace
public string ParentAssemblyId
public Type Type
public string Version
public void .ctor(Type type)
public string get_Namespace()
public void set_Namespace(string value)
public string get_ParentAssemblyId()
public void set_ParentAssemblyId(string value)
public Type get_Type()
public void set_Type(Type value)
public string get_Version()
public void set_Version(string value)
}
public System.Xml.Serialization.XmlTextAttribute : Attribute {
private string dataType
private Type type
public string DataType
public Type Type
public void .ctor(Type type)
public string get_DataType()
public void set_DataType(string value)
public Type get_Type()
public void set_Type(Type value)
internal void AddKeyHash(StringBuilder sb)
}
public System.Xml.Serialization.XmlTypeAttribute : Attribute {
private bool includeInSchema
private string ns
private string typeName
private bool anonymousType
public bool AnonymousType
public bool IncludeInSchema
public string Namespace
public string TypeName
public void .ctor(string typeName)
public bool get_AnonymousType()
public void set_AnonymousType(bool value)
public bool get_IncludeInSchema()
public void set_IncludeInSchema(bool value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_TypeName()
public void set_TypeName(string value)
internal void AddKeyHash(StringBuilder sb)
}
internal System.Xml.Serialization.XmlTypeMapElementInfo : object {
private string _elementName
private string _namespace
private XmlSchemaForm _form
private XmlTypeMapMember _member
private object _choiceValue
private bool _isNullable
private int _nestingLevel
private XmlTypeMapping _mappedType
private TypeData _type
private bool _wrappedElement
public TypeData TypeData
public object ChoiceValue
public string ElementName
public string Namespace
public string DataTypeNamespace
public string DataTypeName
public XmlSchemaForm Form
public XmlTypeMapping MappedType
public bool IsNullable
internal bool IsPrimitive
public XmlTypeMapMember Member
public int NestingLevel
public bool MultiReferenceType
public bool WrappedElement
public bool IsTextElement
public bool IsUnnamedAnyElement
public void .ctor(XmlTypeMapMember member, TypeData type)
public TypeData get_TypeData()
public void set_TypeData(TypeData value)
public object get_ChoiceValue()
public void set_ChoiceValue(object value)
public string get_ElementName()
public void set_ElementName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_DataTypeNamespace()
public string get_DataTypeName()
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public XmlTypeMapping get_MappedType()
public void set_MappedType(XmlTypeMapping value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
internal bool get_IsPrimitive()
public XmlTypeMapMember get_Member()
public void set_Member(XmlTypeMapMember value)
public int get_NestingLevel()
public void set_NestingLevel(int value)
public bool get_MultiReferenceType()
public bool get_WrappedElement()
public void set_WrappedElement(bool value)
public bool get_IsTextElement()
public void set_IsTextElement(bool value)
public bool get_IsUnnamedAnyElement()
public void set_IsUnnamedAnyElement(bool value)
public bool Equals(object other)
public int GetHashCode()
}
internal System.Xml.Serialization.XmlTypeMapElementInfoList : ArrayList {
public int IndexOfElement(string name, string namspace)
}
internal System.Xml.Serialization.XmlTypeMapMember : object {
private int OPTIONAL
private int RETURN_VALUE
private int IGNORE
private string _name
private int _index
private int _globalIndex
private TypeData _typeData
private MemberInfo _member
private MemberInfo _specifiedMember
private object _defaultValue
private string documentation
private int _flags
public string Name
public object DefaultValue
public string Documentation
public TypeData TypeData
public int Index
public int GlobalIndex
public bool IsOptionalValueType
public bool IsReturnValue
public bool Ignore
public bool RequiresNullable
public string get_Name()
public void set_Name(string value)
public object get_DefaultValue()
public void set_DefaultValue(object value)
public void set_Documentation(string value)
public string get_Documentation()
public bool IsReadOnly(Type type)
public object GetValue(object ob, string name)
public object GetValue(object ob)
public void SetValue(object ob, object value)
public void SetValue(object ob, string name, object value)
private void InitMember(Type type)
public TypeData get_TypeData()
public void set_TypeData(TypeData value)
public int get_Index()
public void set_Index(int value)
public int get_GlobalIndex()
public void set_GlobalIndex(int value)
public bool get_IsOptionalValueType()
public void set_IsOptionalValueType(bool value)
public bool get_IsReturnValue()
public void set_IsReturnValue(bool value)
public bool get_Ignore()
public void set_Ignore(bool value)
public void CheckOptionalValueType(Type type)
public bool GetValueSpecified(object ob)
public void SetValueSpecified(object ob, bool value)
public bool get_RequiresNullable()
}
internal System.Xml.Serialization.XmlTypeMapMemberAnyElement : XmlTypeMapMemberExpandable {
public bool IsDefaultAny
public bool CanBeText
public bool IsElementDefined(string name, string ns)
public bool get_IsDefaultAny()
public bool get_CanBeText()
}
internal System.Xml.Serialization.XmlTypeMapMemberAttribute : XmlTypeMapMember {
private string _attributeName
private string _namespace
private XmlSchemaForm _form
private XmlTypeMapping _mappedType
public string AttributeName
public string Namespace
public string DataTypeNamespace
public XmlSchemaForm Form
public XmlTypeMapping MappedType
public string get_AttributeName()
public void set_AttributeName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_DataTypeNamespace()
public XmlSchemaForm get_Form()
public void set_Form(XmlSchemaForm value)
public XmlTypeMapping get_MappedType()
public void set_MappedType(XmlTypeMapping value)
}
internal System.Xml.Serialization.XmlTypeMapMemberElement : XmlTypeMapMember {
private XmlTypeMapElementInfoList _elementInfo
private string _choiceMember
private bool _isTextCollector
private TypeData _choiceTypeData
public XmlTypeMapElementInfoList ElementInfo
public string ChoiceMember
public TypeData ChoiceTypeData
public bool IsXmlTextCollector
public bool RequiresNullable
public XmlTypeMapElementInfoList get_ElementInfo()
public void set_ElementInfo(XmlTypeMapElementInfoList value)
public string get_ChoiceMember()
public void set_ChoiceMember(string value)
public TypeData get_ChoiceTypeData()
public void set_ChoiceTypeData(TypeData value)
public XmlTypeMapElementInfo FindElement(object ob, object memberValue)
public void SetChoice(object ob, object choice)
public bool get_IsXmlTextCollector()
public void set_IsXmlTextCollector(bool value)
public bool get_RequiresNullable()
}
internal System.Xml.Serialization.XmlTypeMapMemberExpandable : XmlTypeMapMemberElement {
private int _flatArrayIndex
public int FlatArrayIndex
public int get_FlatArrayIndex()
public void set_FlatArrayIndex(int value)
}
internal System.Xml.Serialization.XmlTypeMapMemberFlatList : XmlTypeMapMemberExpandable {
private ListMap _listMap
public ListMap ListMap
public ListMap get_ListMap()
public void set_ListMap(ListMap value)
}
internal System.Xml.Serialization.XmlTypeMapMemberList : XmlTypeMapMemberElement {
public XmlTypeMapping ListTypeMapping
public string ElementName
public string Namespace
public XmlTypeMapping get_ListTypeMapping()
public string get_ElementName()
public string get_Namespace()
}
public System.Xml.Serialization.XmlTypeMapping : XmlMapping {
private string xmlType
private string xmlTypeNamespace
private TypeData type
private XmlTypeMapping baseMap
private bool multiReferenceType
private bool isSimpleType
private string documentation
private bool includeInSchema
private bool isNullable
private ArrayList _derivedTypes
public string TypeFullName
public string TypeName
public string XsdTypeName
public string XsdTypeNamespace
internal TypeData TypeData
internal string XmlType
internal string XmlTypeNamespace
internal ArrayList DerivedTypes
internal bool MultiReferenceType
internal XmlTypeMapping BaseMap
internal bool IsSimpleType
internal string Documentation
internal bool IncludeInSchema
internal bool IsNullable
internal void .ctor(string elementName, string ns, TypeData typeData, string xmlType, string xmlTypeNamespace)
public string get_TypeFullName()
public string get_TypeName()
public string get_XsdTypeName()
public string get_XsdTypeNamespace()
internal TypeData get_TypeData()
internal string get_XmlType()
internal void set_XmlType(string value)
internal string get_XmlTypeNamespace()
internal void set_XmlTypeNamespace(string value)
internal ArrayList get_DerivedTypes()
internal void set_DerivedTypes(ArrayList value)
internal bool get_MultiReferenceType()
internal void set_MultiReferenceType(bool value)
internal XmlTypeMapping get_BaseMap()
internal void set_BaseMap(XmlTypeMapping value)
internal bool get_IsSimpleType()
internal void set_IsSimpleType(bool value)
internal void set_Documentation(string value)
internal string get_Documentation()
internal bool get_IncludeInSchema()
internal void set_IncludeInSchema(bool value)
internal bool get_IsNullable()
internal void set_IsNullable(bool value)
internal XmlTypeMapping GetRealTypeMap(Type objectType)
internal XmlTypeMapping GetRealElementMap(string name, string ens)
internal void UpdateRoot(XmlQualifiedName qname)
}
internal System.Xml.Serialization.XmlTypeSerializationSource : SerializationSource {
private string attributeOverridesHash
private Type type
private string rootHash
public void .ctor(Type type, XmlRootAttribute root, XmlAttributeOverrides attributeOverrides, string namspace, Type[] includedTypes)
public bool Equals(object o)
public int GetHashCode()
}
public System.Xml.ValidationType : Enum {
public int value__
public ValidationType None
public ValidationType Auto
public ValidationType DTD
public ValidationType XDR
public ValidationType Schema
}
public System.Xml.WhitespaceHandling : Enum {
public int value__
public WhitespaceHandling All
public WhitespaceHandling Significant
public WhitespaceHandling None
}
public System.Xml.WriteState : Enum {
public int value__
public WriteState Start
public WriteState Prolog
public WriteState Element
public WriteState Attribute
public WriteState Content
public WriteState Closed
public WriteState Error
}
public System.Xml.XmlAttribute : XmlNode {
private XmlNameEntry name
internal bool isDefault
private XmlLinkedNode lastLinkedChild
private IXmlSchemaInfo schemaInfo
private XmlLinkedNode System.Xml.IHasXmlChildNode.LastLinkedChild
public string BaseURI
public string InnerText
public string InnerXml
public string LocalName
public string Name
public string NamespaceURI
public XmlNodeType NodeType
internal XPathNodeType XPathNodeType
public XmlDocument OwnerDocument
public XmlElement OwnerElement
public XmlNode ParentNode
public string Prefix
public IXmlSchemaInfo SchemaInfo
public bool Specified
public string Value
internal string XmlLang
internal XmlSpace XmlSpace
protected internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc)
internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc, bool atomizedNames, bool checkNamespace)
private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild()
private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value)
public string get_BaseURI()
public void set_InnerText(string value)
public void set_InnerXml(string value)
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNodeType get_NodeType()
internal XPathNodeType get_XPathNodeType()
public XmlDocument get_OwnerDocument()
public XmlElement get_OwnerElement()
public XmlNode get_ParentNode()
public void set_Prefix(string value)
public string get_Prefix()
public IXmlSchemaInfo get_SchemaInfo()
internal void set_SchemaInfo(IXmlSchemaInfo value)
public bool get_Specified()
public string get_Value()
public void set_Value(string value)
internal string get_XmlLang()
internal XmlSpace get_XmlSpace()
public XmlNode AppendChild(XmlNode child)
public XmlNode InsertBefore(XmlNode newChild, XmlNode refChild)
public XmlNode InsertAfter(XmlNode newChild, XmlNode refChild)
public XmlNode PrependChild(XmlNode node)
public XmlNode RemoveChild(XmlNode node)
public XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild)
public XmlNode CloneNode(bool deep)
internal void SetDefault()
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
internal DTDAttributeDefinition GetAttributeDefinition()
}
public System.Xml.XmlAttributeCollection : XmlNamedNodeMap {
private XmlElement ownerElement
private XmlDocument ownerDocument
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool IsReadOnly
public XmlAttribute ItemOf
public XmlAttribute ItemOf
public XmlAttribute ItemOf
internal void .ctor(XmlNode parent)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private bool get_IsReadOnly()
public XmlAttribute get_ItemOf(string name)
public XmlAttribute get_ItemOf(int i)
public XmlAttribute get_ItemOf(string localName, string namespaceURI)
public XmlAttribute Append(XmlAttribute node)
public void CopyTo(XmlAttribute[] array, int index)
public XmlAttribute InsertAfter(XmlAttribute newNode, XmlAttribute refNode)
public XmlAttribute InsertBefore(XmlAttribute newNode, XmlAttribute refNode)
public XmlAttribute Prepend(XmlAttribute node)
public XmlAttribute Remove(XmlAttribute node)
public void RemoveAll()
public XmlAttribute RemoveAt(int i)
public XmlNode SetNamedItem(XmlNode node)
internal void AddIdenticalAttribute()
internal void RemoveIdenticalAttribute()
private void SetIdenticalAttribute(bool remove)
private void AdjustIdenticalAttributes(XmlAttribute node, XmlNode existing)
private XmlNode RemoveIdenticalAttribute(XmlNode existing)
}
public System.Xml.XmlCDataSection : XmlCharacterData {
public string LocalName
public string Name
public XmlNodeType NodeType
public XmlNode ParentNode
protected internal void .ctor(string data, XmlDocument doc)
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
public XmlNode get_ParentNode()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
internal System.Xml.XmlChar : object {
public Char[] WhitespaceChars
private Byte[] firstNamePages
private Byte[] namePages
private UInt32[] nameBitmap
private Dictionary`2<string, int> <>f__switch$map2F
public bool IsWhitespace(int ch)
public bool IsWhitespace(string str)
public int IndexOfNonWhitespace(string str)
public bool IsFirstNameChar(int ch)
public bool IsValid(int ch)
public bool IsInvalid(int ch)
public int IndexOfInvalid(string s, bool allowSurrogate)
public int IndexOfInvalid(Char[] s, int start, int length, bool allowSurrogate)
public bool IsNameChar(int ch)
public bool IsNCNameChar(int ch)
public bool IsName(string str)
public bool IsNCName(string str)
public bool IsNmToken(string str)
public bool IsPubidChar(int ch)
public bool IsPubid(string str)
public bool IsValidIANAEncoding(string ianaEncoding)
public int GetPredefinedEntity(string name)
}
public System.Xml.XmlCharacterData : XmlLinkedNode {
private string data
public string Data
public string InnerText
public int Length
public string Value
internal XPathNodeType XPathNodeType
protected internal void .ctor(string data, XmlDocument doc)
public string get_Data()
public void set_Data(string value)
public string get_InnerText()
public void set_InnerText(string value)
public int get_Length()
public string get_Value()
public void set_Value(string value)
internal XPathNodeType get_XPathNodeType()
public void AppendData(string strData)
public void DeleteData(int offset, int count)
public void InsertData(int offset, string strData)
public void ReplaceData(int offset, int count, string strData)
public string Substring(int offset, int count)
}
public System.Xml.XmlComment : XmlCharacterData {
public string LocalName
public string Name
public XmlNodeType NodeType
internal XPathNodeType XPathNodeType
protected internal void .ctor(string comment, XmlDocument doc)
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
internal XPathNodeType get_XPathNodeType()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
internal System.Xml.XmlConstructs : object {
internal int VALID
internal int SPACE
internal int NAME_START
internal int NAME
internal int PUBID
internal int CONTENT
internal int NCNAME_START
internal int NCNAME
internal Char[] WhitespaceChars
internal Byte[] CHARS
private Dictionary`2<string, int> <>f__switch$map2E
public bool IsValid(char c)
public bool IsValid(int c)
public bool IsInvalid(char c)
public bool IsInvalid(int c)
public bool IsContent(char c)
public bool IsContent(int c)
public bool IsMarkup(char c)
public bool IsMarkup(int c)
public bool IsWhitespace(char c)
public bool IsWhitespace(int c)
public bool IsFirstNameChar(char c)
public bool IsFirstNameChar(int c)
public bool IsNameChar(char c)
public bool IsNameChar(int c)
public bool IsNCNameStart(char c)
public bool IsNCNameStart(int c)
public bool IsNCNameChar(char c)
public bool IsNCNameChar(int c)
public bool IsPubidChar(char c)
public bool IsPubidChar(int c)
public bool IsValidName(string name, Exception& err)
public int IsValidName(string name)
public bool IsValidNCName(string ncName, Exception& err)
public bool IsValidNmtoken(string nmtoken, Exception& err)
public bool IsValidIANAEncoding(string ianaEncoding)
public bool IsName(string str)
public bool IsNCName(string str)
public bool IsNmToken(string str)
public bool IsWhitespace(string str)
public int GetPredefinedEntity(string name)
}
public System.Xml.XmlConvert : object {
private string encodedColon
private NumberStyles floatStyle
private NumberStyles integerStyle
private String[] datetimeFormats
private String[] defaultDateTimeFormats
private String[] roundtripDateTimeFormats
private String[] localDateTimeFormats
private String[] utcDateTimeFormats
private String[] unspecifiedDateTimeFormats
private DateTimeStyles _defaultStyle
private Dictionary`2<string, int> <>f__switch$map33
private string TryDecoding(string s)
public string DecodeName(string name)
public string EncodeLocalName(string name)
internal bool IsInvalid(char c, bool firstOnlyLetter)
private string EncodeName(string name, bool nmtoken)
public string EncodeName(string name)
public string EncodeNmToken(string name)
public bool ToBoolean(string s)
internal string ToBinHexString(Byte[] buffer)
internal void WriteBinHex(Byte[] buffer, int index, int count, TextWriter w)
public byte ToByte(string s)
public char ToChar(string s)
public DateTime ToDateTime(string s)
public DateTime ToDateTime(string value, XmlDateTimeSerializationMode mode)
public DateTime ToDateTime(string s, string format)
public DateTime ToDateTime(string s, String[] formats)
private DateTime ToDateTime(string s, String[] formats, DateTimeStyles style)
public decimal ToDecimal(string s)
public double ToDouble(string s)
private float TryParseStringFloatConstants(string s)
private bool TryParseStringConstant(string format, string s, int start, int end)
public Guid ToGuid(string s)
public short ToInt16(string s)
public int ToInt32(string s)
public long ToInt64(string s)
public sbyte ToSByte(string s)
public float ToSingle(string s)
public string ToString(Guid value)
public string ToString(int value)
public string ToString(short value)
public string ToString(byte value)
public string ToString(long value)
public string ToString(char value)
public string ToString(bool value)
public string ToString(sbyte value)
public string ToString(decimal value)
public string ToString(ulong value)
public string ToString(TimeSpan value)
public string ToString(double value)
public string ToString(float value)
public string ToString(UInt32 value)
public string ToString(ushort value)
public string ToString(DateTime value)
public string ToString(DateTime value, XmlDateTimeSerializationMode mode)
public string ToString(DateTime value, string format)
public TimeSpan ToTimeSpan(string s)
public ushort ToUInt16(string s)
public UInt32 ToUInt32(string s)
public ulong ToUInt64(string s)
public string VerifyName(string name)
public string VerifyNCName(string ncname)
public string VerifyTOKEN(string name)
public string VerifyNMTOKEN(string name)
internal Byte[] FromBinHexString(string s)
internal int FromBinHexString(Char[] chars, int offset, int charLength, Byte[] buffer)
public DateTimeOffset ToDateTimeOffset(string s)
public DateTimeOffset ToDateTimeOffset(string s, string format)
public DateTimeOffset ToDateTimeOffset(string s, String[] formats)
public string ToString(DateTimeOffset value)
public string ToString(DateTimeOffset value, string format)
internal Uri ToUri(string s)
}
public System.Xml.XmlDateTimeSerializationMode : Enum {
public int value__
public XmlDateTimeSerializationMode Local
public XmlDateTimeSerializationMode Utc
public XmlDateTimeSerializationMode Unspecified
public XmlDateTimeSerializationMode RoundtripKind
}
public System.Xml.XmlDeclaration : XmlLinkedNode {
private string encoding
private string standalone
private string version
private Dictionary`2<string, int> <>f__switch$map30
public string Encoding
public string InnerText
public string LocalName
public string Name
public XmlNodeType NodeType
public string Standalone
public string Value
public string Version
protected internal void .ctor(string version, string encoding, string standalone, XmlDocument doc)
public string get_Encoding()
public void set_Encoding(string value)
public string get_InnerText()
public void set_InnerText(string value)
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
public string get_Standalone()
public void set_Standalone(string value)
public string get_Value()
public void set_Value(string value)
public string get_Version()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
private int SkipWhitespace(string input, int index)
private void ParseInput(string input)
}
public System.Xml.XmlDocument : XmlNode {
private Type[] optimal_create_types
private bool optimal_create_element
private bool optimal_create_attribute
private XmlNameTable nameTable
private string baseURI
private XmlImplementation implementation
private bool preserveWhitespace
private XmlResolver resolver
private Hashtable idTable
private XmlNameEntryCache nameCache
private XmlLinkedNode lastLinkedChild
private XmlAttribute nsNodeXml
private XmlSchemaSet schemas
private IXmlSchemaInfo schemaInfo
private bool loadMode
private XmlNodeChangedEventHandler NodeChanged
private XmlNodeChangedEventHandler NodeChanging
private XmlNodeChangedEventHandler NodeInserted
private XmlNodeChangedEventHandler NodeInserting
private XmlNodeChangedEventHandler NodeRemoved
private XmlNodeChangedEventHandler NodeRemoving
private Dictionary`2<string, int> <>f__switch$map31
private XmlLinkedNode System.Xml.IHasXmlChildNode.LastLinkedChild
internal XmlAttribute NsNodeXml
public string BaseURI
public XmlElement DocumentElement
public XmlDocumentType DocumentType
public XmlImplementation Implementation
public string InnerXml
public bool IsReadOnly
internal bool IsStandalone
public string LocalName
public string Name
internal XmlNameEntryCache NameCache
public XmlNameTable NameTable
public XmlNodeType NodeType
internal XPathNodeType XPathNodeType
public XmlDocument OwnerDocument
public bool PreserveWhitespace
internal XmlResolver Resolver
internal string XmlLang
public XmlResolver XmlResolver
internal XmlSpace XmlSpace
internal Encoding TextEncoding
public XmlNode ParentNode
public XmlSchemaSet Schemas
public IXmlSchemaInfo SchemaInfo
protected internal void .ctor(XmlImplementation imp)
public void .ctor(XmlNameTable nt)
private void .ctor(XmlImplementation impl, XmlNameTable nt)
public void add_NodeChanged(XmlNodeChangedEventHandler value)
public void remove_NodeChanged(XmlNodeChangedEventHandler value)
public void add_NodeChanging(XmlNodeChangedEventHandler value)
public void remove_NodeChanging(XmlNodeChangedEventHandler value)
public void add_NodeInserted(XmlNodeChangedEventHandler value)
public void remove_NodeInserted(XmlNodeChangedEventHandler value)
public void add_NodeInserting(XmlNodeChangedEventHandler value)
public void remove_NodeInserting(XmlNodeChangedEventHandler value)
public void add_NodeRemoved(XmlNodeChangedEventHandler value)
public void remove_NodeRemoved(XmlNodeChangedEventHandler value)
public void add_NodeRemoving(XmlNodeChangedEventHandler value)
public void remove_NodeRemoving(XmlNodeChangedEventHandler value)
private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild()
private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value)
internal XmlAttribute get_NsNodeXml()
public string get_BaseURI()
public XmlElement get_DocumentElement()
public XmlDocumentType get_DocumentType()
public XmlImplementation get_Implementation()
public string get_InnerXml()
public void set_InnerXml(string value)
public bool get_IsReadOnly()
internal bool get_IsStandalone()
public string get_LocalName()
public string get_Name()
internal XmlNameEntryCache get_NameCache()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
internal XPathNodeType get_XPathNodeType()
public XmlDocument get_OwnerDocument()
public bool get_PreserveWhitespace()
public void set_PreserveWhitespace(bool value)
internal XmlResolver get_Resolver()
internal string get_XmlLang()
public void set_XmlResolver(XmlResolver value)
internal XmlSpace get_XmlSpace()
internal Encoding get_TextEncoding()
public XmlNode get_ParentNode()
public XmlSchemaSet get_Schemas()
public void set_Schemas(XmlSchemaSet value)
public IXmlSchemaInfo get_SchemaInfo()
internal void set_SchemaInfo(IXmlSchemaInfo value)
internal void AddIdenticalAttribute(XmlAttribute attr)
public XmlNode CloneNode(bool deep)
public XmlAttribute CreateAttribute(string name)
public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI)
public XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI)
internal XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI, bool atomizedNames, bool checkNamespace)
public XmlCDataSection CreateCDataSection(string data)
public XmlComment CreateComment(string data)
protected internal XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI)
public XmlDocumentFragment CreateDocumentFragment()
public XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset)
private XmlDocumentType CreateDocumentType(DTDObjectModel dtd)
public XmlElement CreateElement(string name)
public XmlElement CreateElement(string qualifiedName, string namespaceURI)
public XmlElement CreateElement(string prefix, string localName, string namespaceURI)
internal XmlElement CreateElement(string prefix, string localName, string namespaceURI, bool nameAtomized)
public XmlEntityReference CreateEntityReference(string name)
public XPathNavigator CreateNavigator()
protected internal XPathNavigator CreateNavigator(XmlNode node)
public XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI)
public XmlNode CreateNode(XmlNodeType type, string name, string namespaceURI)
public XmlNode CreateNode(XmlNodeType type, string prefix, string name, string namespaceURI)
public XmlProcessingInstruction CreateProcessingInstruction(string target, string data)
public XmlSignificantWhitespace CreateSignificantWhitespace(string text)
public XmlText CreateTextNode(string text)
public XmlWhitespace CreateWhitespace(string text)
public XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone)
public XmlElement GetElementById(string elementId)
public XmlNodeList GetElementsByTagName(string name)
public XmlNodeList GetElementsByTagName(string localName, string namespaceURI)
private XmlNodeType GetNodeTypeFromString(string nodeTypeString)
internal XmlAttribute GetIdenticalAttribute(string id)
public XmlNode ImportNode(XmlNode node, bool deep)
public void Load(Stream inStream)
public void Load(string filename)
public void Load(TextReader txtReader)
public void Load(XmlReader xmlReader)
public void LoadXml(string xml)
internal void onNodeChanged(XmlNode node, XmlNode parent, string oldValue, string newValue)
internal void onNodeChanging(XmlNode node, XmlNode parent, string oldValue, string newValue)
internal void onNodeInserted(XmlNode node, XmlNode newParent)
internal void onNodeInserting(XmlNode node, XmlNode newParent)
internal void onNodeRemoved(XmlNode node, XmlNode oldParent)
internal void onNodeRemoving(XmlNode node, XmlNode oldParent)
private void ParseName(string name, String& prefix, String& localName)
private XmlAttribute ReadAttributeNode(XmlReader reader)
internal void ReadAttributeNodeValue(XmlReader reader, XmlAttribute attribute)
public XmlNode ReadNode(XmlReader reader)
private XmlNode ReadNodeCore(XmlReader reader)
private string MakeReaderErrorMessage(string message, XmlReader reader)
internal void RemoveIdenticalAttribute(string id)
public void Save(Stream outStream)
public void Save(string filename)
public void Save(TextWriter writer)
public void Save(XmlWriter xmlWriter)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
private void AddDefaultNameTableKeys()
internal void CheckIdTableUpdate(XmlAttribute attr, string oldValue, string newValue)
public void Validate(ValidationEventHandler handler)
public void Validate(ValidationEventHandler handler, XmlNode node)
private void Validate(ValidationEventHandler handler, XmlNode node, XmlSchemaValidationFlags flags)
}
public System.Xml.XmlDocumentFragment : XmlNode {
private XmlLinkedNode lastLinkedChild
private XmlLinkedNode System.Xml.IHasXmlChildNode.LastLinkedChild
public string InnerXml
public string LocalName
public string Name
public XmlNodeType NodeType
public XmlDocument OwnerDocument
public XmlNode ParentNode
internal XPathNodeType XPathNodeType
protected internal void .ctor(XmlDocument doc)
private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild()
private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value)
public void set_InnerXml(string value)
public string get_InnerXml()
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
public XmlDocument get_OwnerDocument()
public XmlNode get_ParentNode()
internal XPathNodeType get_XPathNodeType()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
internal System.Xml.XmlDocumentNavigator : XPathNavigator {
private string Xmlns
private string XmlnsXML
private XmlNode node
private XmlAttribute nsNode
private ArrayList iteratedNsNames
internal XmlDocument Document
public string BaseURI
public bool HasAttributes
public bool HasChildren
public bool IsEmptyElement
public XmlAttribute NsNode
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XPathNodeType NodeType
public string Prefix
public IXmlSchemaInfo SchemaInfo
public object UnderlyingObject
public string Value
public string XmlLang
private XmlNode Node
internal void .ctor(XmlNode node)
private XmlNode System.Xml.IHasXmlNode.GetNode()
internal XmlDocument get_Document()
public string get_BaseURI()
public bool get_HasAttributes()
public bool get_HasChildren()
public bool get_IsEmptyElement()
public XmlAttribute get_NsNode()
public void set_NsNode(XmlAttribute value)
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XPathNodeType get_NodeType()
public string get_Prefix()
public IXmlSchemaInfo get_SchemaInfo()
public object get_UnderlyingObject()
public string get_Value()
public string get_XmlLang()
private bool CheckNsNameAppearance(string name, string ns)
public XPathNavigator Clone()
public string GetAttribute(string localName, string namespaceURI)
public string GetNamespace(string name)
public bool IsDescendant(XPathNavigator other)
public bool IsSamePosition(XPathNavigator other)
public bool MoveTo(XPathNavigator other)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirstAttribute()
public bool MoveToFirstChild()
public bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToId(string id)
public bool MoveToNamespace(string name)
public bool MoveToNext()
public bool MoveToNextAttribute()
public bool MoveToNextNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToParent()
public bool MoveToPrevious()
public void MoveToRoot()
private XmlNode get_Node()
private XmlNode GetFirstChild(XmlNode n)
private XmlNode GetLastChild(XmlNode n)
private XmlNode GetPreviousSibling(XmlNode n)
private XmlNode GetNextSibling(XmlNode n)
private XmlNode GetParentNode(XmlNode n)
public string LookupNamespace(string prefix)
public string LookupPrefix(string namespaceUri)
public bool MoveToChild(XPathNodeType type)
public bool MoveToChild(string localName, string namespaceURI)
public bool MoveToNext(string localName, string namespaceURI)
public bool MoveToNext(XPathNodeType type)
public bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end)
public bool MoveToFollowing(XPathNodeType type, XPathNavigator end)
}
public System.Xml.XmlDocumentType : XmlLinkedNode {
internal XmlNamedNodeMap entities
internal XmlNamedNodeMap notations
private DTDObjectModel dtd
internal DTDObjectModel DTD
public XmlNamedNodeMap Entities
public string InternalSubset
public bool IsReadOnly
public string LocalName
public string Name
public XmlNodeType NodeType
public XmlNamedNodeMap Notations
public string PublicId
public string SystemId
protected internal void .ctor(string name, string publicId, string systemId, string internalSubset, XmlDocument doc)
internal void .ctor(DTDObjectModel dtd, XmlDocument doc)
private void ImportFromDTD()
internal DTDObjectModel get_DTD()
public XmlNamedNodeMap get_Entities()
public string get_InternalSubset()
public bool get_IsReadOnly()
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
public XmlNamedNodeMap get_Notations()
public string get_PublicId()
public string get_SystemId()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
public System.Xml.XmlElement : XmlLinkedNode {
private XmlAttributeCollection attributes
private XmlNameEntry name
private XmlLinkedNode lastLinkedChild
private bool isNotEmpty
private IXmlSchemaInfo schemaInfo
private XmlLinkedNode System.Xml.IHasXmlChildNode.LastLinkedChild
public XmlAttributeCollection Attributes
public bool HasAttributes
public string InnerText
public string InnerXml
public bool IsEmpty
public string LocalName
public string Name
public string NamespaceURI
public XmlNode NextSibling
public XmlNodeType NodeType
internal XPathNodeType XPathNodeType
public XmlDocument OwnerDocument
public string Prefix
public XmlNode ParentNode
public IXmlSchemaInfo SchemaInfo
protected internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc)
internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc, bool atomizedNames)
private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild()
private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value)
public XmlAttributeCollection get_Attributes()
public bool get_HasAttributes()
public string get_InnerText()
public void set_InnerText(string value)
public string get_InnerXml()
public void set_InnerXml(string value)
public bool get_IsEmpty()
public void set_IsEmpty(bool value)
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNode get_NextSibling()
public XmlNodeType get_NodeType()
internal XPathNodeType get_XPathNodeType()
public XmlDocument get_OwnerDocument()
public string get_Prefix()
public void set_Prefix(string value)
public XmlNode get_ParentNode()
public IXmlSchemaInfo get_SchemaInfo()
internal void set_SchemaInfo(IXmlSchemaInfo value)
public XmlNode CloneNode(bool deep)
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public XmlAttribute GetAttributeNode(string name)
public XmlAttribute GetAttributeNode(string localName, string namespaceURI)
public XmlNodeList GetElementsByTagName(string name)
public XmlNodeList GetElementsByTagName(string localName, string namespaceURI)
public bool HasAttribute(string name)
public bool HasAttribute(string localName, string namespaceURI)
public void RemoveAll()
public void RemoveAllAttributes()
public void RemoveAttribute(string name)
public void RemoveAttribute(string localName, string namespaceURI)
public XmlNode RemoveAttributeAt(int i)
public XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr)
public XmlAttribute RemoveAttributeNode(string localName, string namespaceURI)
public void SetAttribute(string name, string value)
public string SetAttribute(string localName, string namespaceURI, string value)
public XmlAttribute SetAttributeNode(XmlAttribute newAttr)
public XmlAttribute SetAttributeNode(string localName, string namespaceURI)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
public System.Xml.XmlEntity : XmlNode {
private string name
private string NDATA
private string publicId
private string systemId
private string baseUri
private XmlLinkedNode lastLinkedChild
private bool contentAlreadySet
private XmlLinkedNode System.Xml.IHasXmlChildNode.LastLinkedChild
public string BaseURI
public string InnerText
public string InnerXml
public bool IsReadOnly
public string LocalName
public string Name
public XmlNodeType NodeType
public string NotationName
public string OuterXml
public string PublicId
public string SystemId
internal void .ctor(string name, string NDATA, string publicId, string systemId, XmlDocument doc)
private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild()
private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value)
public string get_BaseURI()
public string get_InnerText()
public void set_InnerText(string value)
public string get_InnerXml()
public void set_InnerXml(string value)
public bool get_IsReadOnly()
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
public string get_NotationName()
public string get_OuterXml()
public string get_PublicId()
public string get_SystemId()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
private void SetEntityContent()
}
public System.Xml.XmlEntityReference : XmlLinkedNode {
private string entityName
private XmlLinkedNode lastLinkedChild
private XmlLinkedNode System.Xml.IHasXmlChildNode.LastLinkedChild
public string BaseURI
private XmlEntity Entity
internal string ChildrenBaseURI
public bool IsReadOnly
public string LocalName
public string Name
public XmlNodeType NodeType
public string Value
internal XPathNodeType XPathNodeType
protected internal void .ctor(string name, XmlDocument doc)
private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild()
private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value)
public string get_BaseURI()
private XmlEntity get_Entity()
internal string get_ChildrenBaseURI()
public bool get_IsReadOnly()
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
public string get_Value()
public void set_Value(string value)
internal XPathNodeType get_XPathNodeType()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
internal void SetReferencedEntityContent()
}
public System.Xml.XmlException : SystemException {
private string Xml_DefaultException
private string Xml_UserException
private int lineNumber
private int linePosition
private string sourceUri
private string res
private String[] messages
public int LineNumber
public int LinePosition
public string SourceUri
public string Message
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
internal void .ctor(IXmlLineInfo li, string sourceUri, string message)
internal void .ctor(IXmlLineInfo li, Exception innerException, string sourceUri, string message)
public void .ctor(string message, Exception innerException, int lineNumber, int linePosition)
public int get_LineNumber()
public int get_LinePosition()
public string get_SourceUri()
public string get_Message()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Xml.XmlImplementation : object {
internal XmlNameTable InternalNameTable
private Dictionary`2<string, int> <>f__switch$map32
public void .ctor(XmlNameTable nameTable)
public XmlDocument CreateDocument()
public bool HasFeature(string strFeature, string strVersion)
}
internal System.Xml.XmlInputStream : Stream {
public Encoding StrictUTF8
private Encoding enc
private Stream stream
private Byte[] buffer
private int bufLength
private int bufPos
private XmlException encodingException
public Encoding ActualEncoding
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(Stream stream)
private string GetStringFromBytes(Byte[] bytes, int index, int count)
private void Initialize(Stream stream)
private int ReadByteSpecial()
private int SkipWhitespace()
public Encoding get_ActualEncoding()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public void Close()
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
public int ReadByte()
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
}
internal System.Xml.XmlIteratorNodeList : XmlNodeList {
private XPathNodeIterator source
private XPathNodeIterator iterator
private ArrayList list
private bool finished
public int Count
public void .ctor(XPathNodeIterator iter)
public int get_Count()
public IEnumerator GetEnumerator()
public XmlNode Item(int index)
}
public System.Xml.XmlLinkedNode : XmlNode {
private XmlLinkedNode nextSibling
internal bool IsRooted
public XmlNode NextSibling
internal XmlLinkedNode NextLinkedSibling
public XmlNode PreviousSibling
internal void .ctor(XmlDocument doc)
internal bool get_IsRooted()
public XmlNode get_NextSibling()
internal XmlLinkedNode get_NextLinkedSibling()
internal void set_NextLinkedSibling(XmlLinkedNode value)
public XmlNode get_PreviousSibling()
}
public System.Xml.XmlNamedNodeMap : object {
private IEnumerator emptyEnumerator
private XmlNode parent
private ArrayList nodeList
private bool readOnly
private ArrayList NodeList
public int Count
internal ArrayList Nodes
internal void .ctor(XmlNode parent)
private ArrayList get_NodeList()
public int get_Count()
public IEnumerator GetEnumerator()
public XmlNode GetNamedItem(string name)
public XmlNode GetNamedItem(string localName, string namespaceURI)
public XmlNode Item(int index)
public XmlNode RemoveNamedItem(string name)
public XmlNode RemoveNamedItem(string localName, string namespaceURI)
public XmlNode SetNamedItem(XmlNode node)
internal XmlNode SetNamedItem(XmlNode node, bool raiseEvent)
internal XmlNode SetNamedItem(XmlNode node, int pos, bool raiseEvent)
internal ArrayList get_Nodes()
}
internal System.Xml.XmlNameEntry : object {
public string Prefix
public string LocalName
public string NS
public int Hash
private string prefixed_name_cache
public void .ctor(string prefix, string local, string ns)
public void Update(string prefix, string local, string ns)
public bool Equals(object other)
public int GetHashCode()
public string GetPrefixedName(XmlNameEntryCache owner)
}
internal System.Xml.XmlNameEntryCache : object {
private Hashtable table
private XmlNameTable nameTable
private XmlNameEntry dummy
private Char[] cacheBuffer
public void .ctor(XmlNameTable nameTable)
public string GetAtomizedPrefixedName(string prefix, string local)
public XmlNameEntry Add(string prefix, string local, string ns, bool atomic)
public XmlNameEntry Get(string prefix, string local, string ns, bool atomic)
private XmlNameEntry GetInternal(string prefix, string local, string ns, bool atomic)
}
public System.Xml.XmlNamespaceManager : object {
internal string XmlnsXml
internal string XmlnsXmlns
internal string PrefixXml
internal string PrefixXmlns
private NsDecl[] decls
private int declPos
private NsScope[] scopes
private int scopePos
private string defaultNamespace
private int count
private XmlNameTable nameTable
internal bool internalAtomizedNames
private Dictionary`2<string, int> <>f__switch$map25
public string DefaultNamespace
public XmlNameTable NameTable
public void .ctor(XmlNameTable nameTable)
private void InitData()
private void GrowDecls()
private void GrowScopes()
public string get_DefaultNamespace()
public XmlNameTable get_NameTable()
public void AddNamespace(string prefix, string uri)
private void AddNamespace(string prefix, string uri, bool atomizedNames)
private string IsValidDeclaration(string prefix, string uri, bool throwException)
public IEnumerator GetEnumerator()
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
internal IDictionary GetNamespacesInScopeImpl(XmlNamespaceScope scope)
public bool HasNamespace(string prefix)
private bool HasNamespace(string prefix, bool atomizedNames)
public string LookupNamespace(string prefix)
internal string LookupNamespace(string prefix, bool atomizedNames)
public string LookupPrefix(string uri)
private bool CompareString(string s1, string s2, bool atomizedNames)
internal string LookupPrefix(string uri, bool atomizedName)
internal string LookupPrefixExclusive(string uri, bool atomizedName)
private string LookupPrefixCore(string uri, bool atomizedName, bool excludeOverriden)
private bool IsOverriden(int idx)
public bool PopScope()
public void PushScope()
public void RemoveNamespace(string prefix, string uri)
private void RemoveNamespace(string prefix, string uri, bool atomizedNames)
}
public System.Xml.XmlNamespaceScope : Enum {
public int value__
public XmlNamespaceScope All
public XmlNamespaceScope ExcludeXml
public XmlNamespaceScope Local
}
public System.Xml.XmlNameTable : object {
public string Add(string name)
public string Add(Char[] buffer, int offset, int length)
public string Get(string name)
public string Get(Char[] buffer, int offset, int length)
}
public System.Xml.XmlNode : object {
private EmptyNodeList emptyList
private XmlDocument ownerDocument
private XmlNode parentNode
private XmlNodeListChildren childNodes
private Dictionary`2<string, int> <>f__switch$map2B
private Dictionary`2<string, int> <>f__switch$map2C
private Dictionary`2<string, int> <>f__switch$map2D
public XmlAttributeCollection Attributes
public string BaseURI
internal string ChildrenBaseURI
public XmlNodeList ChildNodes
public XmlNode FirstChild
public bool HasChildNodes
public string InnerText
public string InnerXml
public bool IsReadOnly
public XmlElement Item
public XmlElement Item
public XmlNode LastChild
public string LocalName
public string Name
public string NamespaceURI
public XmlNode NextSibling
public XmlNodeType NodeType
internal XPathNodeType XPathNodeType
public string OuterXml
public XmlDocument OwnerDocument
public XmlNode ParentNode
public string Prefix
public XmlNode PreviousSibling
public string Value
internal string XmlLang
internal XmlSpace XmlSpace
public IXmlSchemaInfo SchemaInfo
internal XmlElement AttributeOwnerElement
internal void .ctor(XmlDocument ownerDocument)
private object System.ICloneable.Clone()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public XmlAttributeCollection get_Attributes()
public string get_BaseURI()
internal string get_ChildrenBaseURI()
public XmlNodeList get_ChildNodes()
public XmlNode get_FirstChild()
public bool get_HasChildNodes()
public string get_InnerText()
public void set_InnerText(string value)
private void AppendChildValues(StringBuilder& builder)
public string get_InnerXml()
public void set_InnerXml(string value)
public bool get_IsReadOnly()
public XmlElement get_Item(string name)
public XmlElement get_Item(string localname, string ns)
public XmlNode get_LastChild()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNode get_NextSibling()
public XmlNodeType get_NodeType()
internal XPathNodeType get_XPathNodeType()
public string get_OuterXml()
public XmlDocument get_OwnerDocument()
public XmlNode get_ParentNode()
public string get_Prefix()
public void set_Prefix(string value)
public XmlNode get_PreviousSibling()
public string get_Value()
public void set_Value(string value)
internal string get_XmlLang()
internal XmlSpace get_XmlSpace()
public IXmlSchemaInfo get_SchemaInfo()
internal void set_SchemaInfo(IXmlSchemaInfo value)
public XmlNode AppendChild(XmlNode newChild)
internal XmlNode AppendChild(XmlNode newChild, bool checkNodeType)
public XmlNode Clone()
public XmlNode CloneNode(bool deep)
public XPathNavigator CreateNavigator()
public IEnumerator GetEnumerator()
public string GetNamespaceOfPrefix(string prefix)
public string GetPrefixOfNamespace(string namespaceURI)
public XmlNode InsertAfter(XmlNode newChild, XmlNode refChild)
public XmlNode InsertBefore(XmlNode newChild, XmlNode refChild)
internal bool IsAncestor(XmlNode newChild)
internal XmlNode InsertBefore(XmlNode newChild, XmlNode refChild, bool checkNodeType, bool raiseEvent)
private void CheckNodeInsertion(XmlNode newChild, XmlNode refChild)
public void Normalize()
private void NormalizeRange(int start, int i, StringBuilder tmpBuilder)
public XmlNode PrependChild(XmlNode newChild)
public void RemoveAll()
public XmlNode RemoveChild(XmlNode oldChild)
private void CheckNodeRemoval()
internal XmlNode RemoveChild(XmlNode oldChild, bool checkNodeType)
public XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild)
internal XmlElement get_AttributeOwnerElement()
internal void set_AttributeOwnerElement(XmlElement value)
internal void SearchDescendantElements(string name, bool matchAll, ArrayList list)
internal void SearchDescendantElements(string name, bool matchAllName, string ns, bool matchAllNS, ArrayList list)
public XmlNodeList SelectNodes(string xpath)
public XmlNodeList SelectNodes(string xpath, XmlNamespaceManager nsmgr)
public XmlNode SelectSingleNode(string xpath)
public XmlNode SelectSingleNode(string xpath, XmlNamespaceManager nsmgr)
public bool Supports(string feature, string version)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
internal XmlNamespaceManager ConstructNamespaceManager()
}
internal System.Xml.XmlNodeArrayList : XmlNodeList {
private ArrayList _rgNodes
public int Count
public void .ctor(ArrayList rgNodes)
public int get_Count()
public IEnumerator GetEnumerator()
public XmlNode Item(int index)
}
public System.Xml.XmlNodeChangedAction : Enum {
public int value__
public XmlNodeChangedAction Insert
public XmlNodeChangedAction Remove
public XmlNodeChangedAction Change
}
public System.Xml.XmlNodeChangedEventArgs : EventArgs {
private XmlNode _oldParent
private XmlNode _newParent
private XmlNodeChangedAction _action
private XmlNode _node
private string _oldValue
private string _newValue
public XmlNodeChangedAction Action
public XmlNode Node
public XmlNode OldParent
public XmlNode NewParent
public string OldValue
public string NewValue
public void .ctor(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action)
public XmlNodeChangedAction get_Action()
public XmlNode get_Node()
public XmlNode get_OldParent()
public XmlNode get_NewParent()
public string get_OldValue()
public string get_NewValue()
}
public System.Xml.XmlNodeChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XmlNodeChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, XmlNodeChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.XmlNodeList : object {
public int Count
public XmlNode ItemOf
public int get_Count()
public XmlNode get_ItemOf(int i)
public IEnumerator GetEnumerator()
public XmlNode Item(int index)
}
internal System.Xml.XmlNodeListChildren : XmlNodeList {
private IHasXmlChildNode parent
public int Count
public void .ctor(IHasXmlChildNode parent)
public int get_Count()
public IEnumerator GetEnumerator()
public XmlNode Item(int index)
}
public System.Xml.XmlNodeOrder : Enum {
public int value__
public XmlNodeOrder Before
public XmlNodeOrder After
public XmlNodeOrder Same
public XmlNodeOrder Unknown
}
public System.Xml.XmlNodeReader : XmlReader {
private XmlReader entity
private XmlNodeReaderImpl source
private bool entityInsideAttribute
private bool insideAttribute
private XmlParserContext Mono.Xml.IHasXmlParserContext.ParserContext
private XmlReader Current
public int AttributeCount
public string BaseURI
public bool CanReadBinaryContent
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasAttributes
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public ReadState ReadState
public IXmlSchemaInfo SchemaInfo
public string Value
public string XmlLang
public XmlSpace XmlSpace
public void .ctor(XmlNode node)
private void .ctor(XmlNodeReaderImpl entityContainer, bool insideAttribute)
private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string ns)
private XmlReader get_Current()
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanReadBinaryContent()
public bool get_CanResolveEntity()
public int get_Depth()
public bool get_EOF()
public bool get_HasAttributes()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
public ReadState get_ReadState()
public IXmlSchemaInfo get_SchemaInfo()
public string get_Value()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public void Close()
public string GetAttribute(int attributeIndex)
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
public string LookupNamespace(string prefix)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
public bool ReadAttributeValue()
public int ReadContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadContentAsBinHex(Byte[] buffer, int offset, int length)
public int ReadElementContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadElementContentAsBinHex(Byte[] buffer, int offset, int length)
public string ReadString()
public void ResolveEntity()
public void Skip()
}
internal System.Xml.XmlNodeReaderImpl : XmlReader {
private XmlDocument document
private XmlNode startNode
private XmlNode current
private XmlNode ownerLinkedNode
private ReadState state
private int depth
private bool isEndElement
private bool ignoreStartNode
private Dictionary`2<string, int> <>f__switch$map34
private Dictionary`2<string, int> <>f__switch$map35
private Dictionary`2<string, int> <>f__switch$map36
private Dictionary`2<string, int> <>f__switch$map37
private XmlParserContext Mono.Xml.IHasXmlParserContext.ParserContext
public int AttributeCount
public string BaseURI
public bool CanReadBinaryContent
public bool CanReadValueChunk
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasAttributes
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public ReadState ReadState
public IXmlSchemaInfo SchemaInfo
public string Value
public string XmlLang
public XmlSpace XmlSpace
internal void .ctor(XmlNodeReaderImpl entityContainer)
public void .ctor(XmlNode node)
private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext()
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public bool get_CanResolveEntity()
public int get_Depth()
public bool get_EOF()
public bool get_HasAttributes()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
public ReadState get_ReadState()
public IXmlSchemaInfo get_SchemaInfo()
public string get_Value()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public void Close()
public string GetAttribute(int attributeIndex)
public string GetAttribute(string name)
public string GetAttribute(string name, string namespaceURI)
private string GetXmlDeclarationAttribute(string name)
private string GetDocumentTypeAttribute(string name)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
private XmlElement GetCurrentElement()
public string LookupNamespace(string prefix)
public string LookupPrefix(string ns)
public string LookupPrefix(string ns, bool atomizedNames)
public void MoveToAttribute(int attributeIndex)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string name, string namespaceURI)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
private bool ReadContent()
public bool ReadAttributeValue()
public string ReadString()
public void ResolveEntity()
public void Skip()
}
public System.Xml.XmlNodeType : Enum {
public int value__
public XmlNodeType None
public XmlNodeType Element
public XmlNodeType Attribute
public XmlNodeType Text
public XmlNodeType CDATA
public XmlNodeType EntityReference
public XmlNodeType Entity
public XmlNodeType ProcessingInstruction
public XmlNodeType Comment
public XmlNodeType Document
public XmlNodeType DocumentType
public XmlNodeType DocumentFragment
public XmlNodeType Notation
public XmlNodeType Whitespace
public XmlNodeType SignificantWhitespace
public XmlNodeType EndElement
public XmlNodeType EndEntity
public XmlNodeType XmlDeclaration
}
internal System.Xml.XmlNodeWriter : XmlWriter {
private XmlDocument doc
private bool isClosed
private XmlNode current
private XmlAttribute attribute
private bool isDocumentEntity
private XmlDocumentFragment fragment
private XmlNodeType state
private Dictionary`2<string, int> <>f__switch$map29
public XmlNode Document
public WriteState WriteState
public string XmlLang
public XmlSpace XmlSpace
public void .ctor(bool isDocumentEntity)
public XmlNode get_Document()
public WriteState get_WriteState()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
private void CheckState()
private void WritePossiblyTopLevelNode(XmlNode n, bool possiblyAttribute)
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
private void WriteStartDocument(string sddecl)
public void WriteEndDocument()
public void WriteDocType(string name, string publicId, string systemId, string internalSubset)
public void WriteStartElement(string prefix, string name, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
private void WriteEndElementInternal(bool forceFull)
public void WriteStartAttribute(string prefix, string name, string ns)
public void WriteEndAttribute()
public void WriteCData(string data)
public void WriteComment(string comment)
public void WriteProcessingInstruction(string name, string value)
public void WriteEntityRef(string name)
public void WriteCharEntity(char c)
public void WriteWhitespace(string ws)
public void WriteString(string data)
public void WriteName(string name)
public void WriteNmToken(string nmtoken)
public void WriteQualifiedName(string name, string ns)
public void WriteChars(Char[] chars, int start, int len)
public void WriteRaw(string data)
public void WriteRaw(Char[] chars, int start, int len)
public void WriteBase64(Byte[] data, int start, int len)
public void WriteBinHex(Byte[] data, int start, int len)
public void WriteSurrogateCharEntity(char c1, char c2)
}
public System.Xml.XmlNotation : XmlNode {
private string localName
private string publicId
private string systemId
private string prefix
public string InnerXml
public bool IsReadOnly
public string LocalName
public string Name
public XmlNodeType NodeType
public string OuterXml
public string PublicId
public string SystemId
internal void .ctor(string localName, string prefix, string publicId, string systemId, XmlDocument doc)
public string get_InnerXml()
public void set_InnerXml(string value)
public bool get_IsReadOnly()
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
public string get_OuterXml()
public string get_PublicId()
public string get_SystemId()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
public System.Xml.XmlOutputMethod : Enum {
public int value__
public XmlOutputMethod Xml
public XmlOutputMethod Html
public XmlOutputMethod Text
public XmlOutputMethod AutoDetect
}
public System.Xml.XmlParserContext : object {
private string baseURI
private string docTypeName
private Encoding encoding
private string internalSubset
private XmlNamespaceManager namespaceManager
private XmlNameTable nameTable
private string publicID
private string systemID
private string xmlLang
private XmlSpace xmlSpace
private ArrayList contextItems
private int contextItemCount
private DTDObjectModel dtd
public string BaseURI
public string DocTypeName
internal DTDObjectModel Dtd
public Encoding Encoding
public string InternalSubset
public XmlNamespaceManager NamespaceManager
public XmlNameTable NameTable
public string PublicId
public string SystemId
public string XmlLang
public XmlSpace XmlSpace
public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace)
public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace, Encoding enc)
public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace)
public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc)
internal void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, DTDObjectModel dtd, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc)
public string get_BaseURI()
public void set_BaseURI(string value)
public string get_DocTypeName()
public void set_DocTypeName(string value)
internal DTDObjectModel get_Dtd()
internal void set_Dtd(DTDObjectModel value)
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
public string get_InternalSubset()
public void set_InternalSubset(string value)
public XmlNamespaceManager get_NamespaceManager()
public void set_NamespaceManager(XmlNamespaceManager value)
public XmlNameTable get_NameTable()
public void set_NameTable(XmlNameTable value)
public string get_PublicId()
public void set_PublicId(string value)
public string get_SystemId()
public void set_SystemId(string value)
public string get_XmlLang()
public void set_XmlLang(string value)
public XmlSpace get_XmlSpace()
public void set_XmlSpace(XmlSpace value)
internal void PushScope()
internal void PopScope()
}
internal System.Xml.XmlParserInput : object {
private Stack sourceStack
private XmlParserInputSource source
private bool has_peek
private int peek_char
private bool allowTextDecl
public string BaseURI
public bool HasPEBuffer
public int LineNumber
public int LinePosition
public bool AllowTextDecl
public void .ctor(TextReader reader, string baseURI)
public void .ctor(TextReader reader, string baseURI, int line, int column)
public void Close()
public void Expect(int expected)
public void Expect(string expected)
public void PushPEBuffer(DTDParameterEntityDeclaration pe)
private int ReadSourceChar()
public int PeekChar()
public int ReadChar()
public string get_BaseURI()
public bool get_HasPEBuffer()
public int get_LineNumber()
public int get_LinePosition()
public bool get_AllowTextDecl()
public void set_AllowTextDecl(bool value)
private XmlException ReaderError(string message)
}
public System.Xml.XmlProcessingInstruction : XmlLinkedNode {
private string target
private string data
public string Data
public string InnerText
public string LocalName
public string Name
public XmlNodeType NodeType
internal XPathNodeType XPathNodeType
public string Target
public string Value
protected internal void .ctor(string target, string data, XmlDocument doc)
public string get_Data()
public void set_Data(string value)
public string get_InnerText()
public void set_InnerText(string value)
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
internal XPathNodeType get_XPathNodeType()
public string get_Target()
public string get_Value()
public void set_Value(string value)
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
public System.Xml.XmlQualifiedName : object {
public XmlQualifiedName Empty
private string name
private string ns
private int hash
public bool IsEmpty
public string Name
public string Namespace
public void .ctor(string name)
public void .ctor(string name, string ns)
public bool get_IsEmpty()
public string get_Name()
public string get_Namespace()
public bool Equals(object other)
public int GetHashCode()
public string ToString()
public string ToString(string name, string ns)
internal XmlQualifiedName Parse(string name, IXmlNamespaceResolver resolver)
internal XmlQualifiedName Parse(string name, IXmlNamespaceResolver resolver, bool considerDefaultNamespace)
internal XmlQualifiedName Parse(string name, XmlReader reader)
public bool op_Equality(XmlQualifiedName a, XmlQualifiedName b)
public bool op_Inequality(XmlQualifiedName a, XmlQualifiedName b)
}
public System.Xml.XmlReader : object {
private StringBuilder readStringBuffer
private XmlReaderBinarySupport binary
private XmlReaderSettings settings
public int AttributeCount
public string BaseURI
internal XmlReaderBinarySupport Binary
internal CharGetter BinaryCharGetter
public bool CanReadBinaryContent
public bool CanReadValueChunk
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasAttributes
public bool HasValue
public bool IsEmptyElement
public bool IsDefault
public string Item
public string Item
public string Item
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public char QuoteChar
public ReadState ReadState
public IXmlSchemaInfo SchemaInfo
public XmlReaderSettings Settings
public string Value
public string XmlLang
public XmlSpace XmlSpace
public Type ValueType
private void System.IDisposable.Dispose()
public int get_AttributeCount()
public string get_BaseURI()
internal XmlReaderBinarySupport get_Binary()
internal CharGetter get_BinaryCharGetter()
internal void set_BinaryCharGetter(CharGetter value)
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public bool get_CanResolveEntity()
public int get_Depth()
public bool get_EOF()
public bool get_HasAttributes()
public bool get_HasValue()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public string get_Item(int i)
public string get_Item(string name)
public string get_Item(string name, string namespaceURI)
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
public char get_QuoteChar()
public ReadState get_ReadState()
public IXmlSchemaInfo get_SchemaInfo()
public XmlReaderSettings get_Settings()
public string get_Value()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public void Close()
private XmlNameTable PopulateNameTable(XmlReaderSettings settings)
private XmlParserContext PopulateParserContext(XmlReaderSettings settings, string baseUri)
private XmlNodeType GetNodeType(XmlReaderSettings settings)
public XmlReader Create(Stream stream)
public XmlReader Create(string url)
public XmlReader Create(TextReader reader)
public XmlReader Create(string url, XmlReaderSettings settings)
public XmlReader Create(Stream stream, XmlReaderSettings settings)
public XmlReader Create(TextReader reader, XmlReaderSettings settings)
private XmlReaderSettings PopulateSettings(XmlReaderSettings src)
public XmlReader Create(Stream stream, XmlReaderSettings settings, string baseUri)
public XmlReader Create(TextReader reader, XmlReaderSettings settings, string baseUri)
public XmlReader Create(XmlReader reader, XmlReaderSettings settings)
public XmlReader Create(string url, XmlReaderSettings settings, XmlParserContext context)
public XmlReader Create(Stream stream, XmlReaderSettings settings, XmlParserContext context)
public XmlReader Create(TextReader reader, XmlReaderSettings settings, XmlParserContext context)
private XmlReader CreateCustomizedTextReader(XmlTextReader reader, XmlReaderSettings settings)
private XmlReader CreateFilteredXmlReader(XmlReader reader, XmlReaderSettings settings)
private XmlReader CreateValidatingXmlReader(XmlReader reader, XmlReaderSettings settings)
protected void Dispose(bool disposing)
public string GetAttribute(int i)
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceName)
public bool IsName(string s)
public bool IsNameToken(string s)
public bool IsStartElement()
public bool IsStartElement(string name)
public bool IsStartElement(string localName, string namespaceName)
public string LookupNamespace(string prefix)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceName)
private bool IsContent(XmlNodeType nodeType)
public XmlNodeType MoveToContent()
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
public bool ReadAttributeValue()
public string ReadElementString()
public string ReadElementString(string name)
public string ReadElementString(string localName, string namespaceName)
public void ReadEndElement()
public string ReadInnerXml()
public string ReadOuterXml()
public void ReadStartElement()
public void ReadStartElement(string name)
public void ReadStartElement(string localName, string namespaceName)
public string ReadString()
public Type get_ValueType()
public bool ReadToDescendant(string name)
public bool ReadToDescendant(string localName, string namespaceURI)
public bool ReadToFollowing(string name)
public bool ReadToFollowing(string localName, string namespaceURI)
public bool ReadToNextSibling(string name)
public bool ReadToNextSibling(string localName, string namespaceURI)
public XmlReader ReadSubtree()
private string ReadContentString()
private string ReadContentString(bool isText)
private string GetLocation()
public object ReadElementContentAsObject()
public object ReadElementContentAsObject(string localName, string namespaceURI)
public object ReadContentAsObject()
public object ReadElementContentAs(Type type, IXmlNamespaceResolver resolver)
public object ReadElementContentAs(Type type, IXmlNamespaceResolver resolver, string localName, string namespaceURI)
public object ReadContentAs(Type type, IXmlNamespaceResolver resolver)
private object ValueAs(string text, Type type, IXmlNamespaceResolver resolver)
public bool ReadElementContentAsBoolean()
public DateTime ReadElementContentAsDateTime()
public decimal ReadElementContentAsDecimal()
public double ReadElementContentAsDouble()
public float ReadElementContentAsFloat()
public int ReadElementContentAsInt()
public long ReadElementContentAsLong()
public string ReadElementContentAsString()
public bool ReadElementContentAsBoolean(string localName, string namespaceURI)
public DateTime ReadElementContentAsDateTime(string localName, string namespaceURI)
public decimal ReadElementContentAsDecimal(string localName, string namespaceURI)
public double ReadElementContentAsDouble(string localName, string namespaceURI)
public float ReadElementContentAsFloat(string localName, string namespaceURI)
public int ReadElementContentAsInt(string localName, string namespaceURI)
public long ReadElementContentAsLong(string localName, string namespaceURI)
public string ReadElementContentAsString(string localName, string namespaceURI)
public bool ReadContentAsBoolean()
public DateTime ReadContentAsDateTime()
public decimal ReadContentAsDecimal()
public double ReadContentAsDouble()
public float ReadContentAsFloat()
public int ReadContentAsInt()
public long ReadContentAsLong()
public string ReadContentAsString()
public int ReadContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadContentAsBinHex(Byte[] buffer, int offset, int length)
public int ReadElementContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadElementContentAsBinHex(Byte[] buffer, int offset, int length)
private void CheckSupport()
public int ReadValueChunk(Char[] buffer, int offset, int length)
public void ResolveEntity()
public void Skip()
private XmlException XmlError(string message)
private XmlException XmlError(string message, Exception innerException)
}
internal System.Xml.XmlReaderBinarySupport : object {
private XmlReader reader
private CharGetter getter
private Byte[] base64Cache
private int base64CacheStartsAt
private CommandState state
private StringBuilder textCache
private bool hasCache
private bool dontReset
public CharGetter Getter
public void .ctor(XmlReader reader)
public CharGetter get_Getter()
public void set_Getter(CharGetter value)
public void Reset()
private InvalidOperationException StateError(CommandState action)
private void CheckState(bool element, CommandState action)
public int ReadElementContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadElementContentAsBinHex(Byte[] buffer, int offset, int length)
public int ReadContentAsBinHex(Byte[] buffer, int offset, int length)
public int ReadBase64(Byte[] buffer, int offset, int length)
private byte GetBase64Byte(char ch)
private int SkipIgnorableBase64Chars(Char[] chars, int charsLength, int i)
private Exception CreateArgumentOutOfRangeException(string name, object value, string message)
public int ReadBinHex(Byte[] buffer, int offset, int length)
public int ReadValueChunk(Char[] buffer, int offset, int length)
private bool Read()
}
public System.Xml.XmlReaderSettings : object {
private bool checkCharacters
private bool closeInput
private ConformanceLevel conformance
private bool ignoreComments
private bool ignoreProcessingInstructions
private bool ignoreWhitespace
private int lineNumberOffset
private int linePositionOffset
private bool prohibitDtd
private XmlNameTable nameTable
private XmlSchemaSet schemas
private bool schemasNeedsInitialization
private XmlSchemaValidationFlags validationFlags
private ValidationType validationType
private XmlResolver xmlResolver
private ValidationEventHandler ValidationEventHandler
public bool CheckCharacters
public bool CloseInput
public ConformanceLevel ConformanceLevel
public bool IgnoreComments
public bool IgnoreProcessingInstructions
public bool IgnoreWhitespace
public int LineNumberOffset
public int LinePositionOffset
public bool ProhibitDtd
public XmlNameTable NameTable
public XmlSchemaSet Schemas
public XmlSchemaValidationFlags ValidationFlags
public ValidationType ValidationType
public XmlResolver XmlResolver
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
public XmlReaderSettings Clone()
public void Reset()
public bool get_CheckCharacters()
public void set_CheckCharacters(bool value)
public bool get_CloseInput()
public void set_CloseInput(bool value)
public ConformanceLevel get_ConformanceLevel()
public void set_ConformanceLevel(ConformanceLevel value)
public bool get_IgnoreComments()
public void set_IgnoreComments(bool value)
public bool get_IgnoreProcessingInstructions()
public void set_IgnoreProcessingInstructions(bool value)
public bool get_IgnoreWhitespace()
public void set_IgnoreWhitespace(bool value)
public int get_LineNumberOffset()
public void set_LineNumberOffset(int value)
public int get_LinePositionOffset()
public void set_LinePositionOffset(int value)
public bool get_ProhibitDtd()
public void set_ProhibitDtd(bool value)
public XmlNameTable get_NameTable()
public void set_NameTable(XmlNameTable value)
public XmlSchemaSet get_Schemas()
public void set_Schemas(XmlSchemaSet value)
internal void OnValidationError(object o, ValidationEventArgs e)
internal void SetSchemas(XmlSchemaSet schemas)
public XmlSchemaValidationFlags get_ValidationFlags()
public void set_ValidationFlags(XmlSchemaValidationFlags value)
public ValidationType get_ValidationType()
public void set_ValidationType(ValidationType value)
internal XmlResolver get_XmlResolver()
public void set_XmlResolver(XmlResolver value)
}
public System.Xml.XmlResolver : object {
public ICredentials Credentials
public void set_Credentials(ICredentials value)
public object GetEntity(Uri absoluteUri, string role, Type type)
public Uri ResolveUri(Uri baseUri, string relativeUri)
private string EscapeRelativeUriBody(string src)
}
public System.Xml.XmlSecureResolver : XmlResolver {
private XmlResolver resolver
private PermissionSet permissionSet
public ICredentials Credentials
public void .ctor(XmlResolver resolver, Evidence evidence)
public void .ctor(XmlResolver resolver, PermissionSet permissionSet)
public void .ctor(XmlResolver resolver, string securityUrl)
public Evidence CreateEvidenceForUrl(string securityUrl)
public void set_Credentials(ICredentials value)
public object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn)
public Uri ResolveUri(Uri baseUri, string relativeUri)
}
public System.Xml.XmlSignificantWhitespace : XmlCharacterData {
public string LocalName
public string Name
public XmlNodeType NodeType
internal XPathNodeType XPathNodeType
public string Value
public XmlNode ParentNode
protected internal void .ctor(string strData, XmlDocument doc)
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
internal XPathNodeType get_XPathNodeType()
public string get_Value()
public void set_Value(string value)
public XmlNode get_ParentNode()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
public System.Xml.XmlSpace : Enum {
public int value__
public XmlSpace None
public XmlSpace Default
public XmlSpace Preserve
}
internal System.Xml.XmlStreamReader : NonBlockingStreamReader {
private XmlInputStream input
private XmlException invalidDataException
private void .ctor(XmlInputStream input)
public void .ctor(Stream input)
public void Close()
public int Read(Char[] dest_buffer, int index, int count)
protected void Dispose(bool disposing)
}
public System.Xml.XmlText : XmlCharacterData {
public string LocalName
public string Name
public XmlNodeType NodeType
internal XPathNodeType XPathNodeType
public string Value
public XmlNode ParentNode
protected internal void .ctor(string strData, XmlDocument doc)
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
internal XPathNodeType get_XPathNodeType()
public string get_Value()
public void set_Value(string value)
public XmlNode get_ParentNode()
public XmlNode CloneNode(bool deep)
public XmlText SplitText(int offset)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
public System.Xml.XmlTextReader : XmlReader {
private XmlTextReader entity
private XmlTextReader source
private bool entityInsideAttribute
private bool insideAttribute
private Stack`1<string> entityNameStack
private XmlParserContext Mono.Xml.IHasXmlParserContext.ParserContext
private XmlReader Current
public int AttributeCount
public string BaseURI
public bool CanReadBinaryContent
public bool CanReadValueChunk
public bool CanResolveEntity
public int Depth
public bool EOF
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
internal XmlParserContext ParserContext
public string Prefix
public char QuoteChar
public ReadState ReadState
public XmlReaderSettings Settings
public string Value
public string XmlLang
public XmlSpace XmlSpace
internal bool CharacterChecking
internal bool CloseInput
internal ConformanceLevel Conformance
internal XmlResolver Resolver
public Encoding Encoding
public EntityHandling EntityHandling
public int LineNumber
public int LinePosition
public bool Namespaces
public bool Normalization
public bool ProhibitDtd
public WhitespaceHandling WhitespaceHandling
public XmlResolver XmlResolver
public void .ctor(Stream input)
public void .ctor(string url)
public void .ctor(TextReader input)
protected void .ctor(XmlNameTable nt)
public void .ctor(Stream input, XmlNameTable nt)
public void .ctor(string url, Stream input)
public void .ctor(string url, TextReader input)
public void .ctor(string url, XmlNameTable nt)
public void .ctor(TextReader input, XmlNameTable nt)
public void .ctor(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context)
public void .ctor(string url, Stream input, XmlNameTable nt)
public void .ctor(string url, TextReader input, XmlNameTable nt)
public void .ctor(string xmlFragment, XmlNodeType fragType, XmlParserContext context)
internal void .ctor(string baseURI, TextReader xmlFragment, XmlNodeType fragType)
internal void .ctor(string baseURI, TextReader xmlFragment, XmlNodeType fragType, XmlParserContext context)
internal void .ctor(bool dummy, XmlResolver resolver, string url, XmlNodeType fragType, XmlParserContext context)
private void .ctor(XmlTextReader entityContainer, bool insideAttribute)
private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string ns)
private XmlReader get_Current()
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanReadBinaryContent()
public bool get_CanReadValueChunk()
public bool get_CanResolveEntity()
public int get_Depth()
public bool get_EOF()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
internal XmlParserContext get_ParserContext()
public string get_Prefix()
public char get_QuoteChar()
public ReadState get_ReadState()
public XmlReaderSettings get_Settings()
public string get_Value()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
internal bool get_CharacterChecking()
internal void set_CharacterChecking(bool value)
internal bool get_CloseInput()
internal void set_CloseInput(bool value)
internal ConformanceLevel get_Conformance()
internal void set_Conformance(ConformanceLevel value)
internal XmlResolver get_Resolver()
private void CopyProperties(XmlTextReader other)
public Encoding get_Encoding()
public EntityHandling get_EntityHandling()
public void set_EntityHandling(EntityHandling value)
public int get_LineNumber()
public int get_LinePosition()
public bool get_Namespaces()
public void set_Namespaces(bool value)
public bool get_Normalization()
public void set_Normalization(bool value)
public bool get_ProhibitDtd()
public void set_ProhibitDtd(bool value)
public WhitespaceHandling get_WhitespaceHandling()
public void set_WhitespaceHandling(WhitespaceHandling value)
public void set_XmlResolver(XmlResolver value)
internal void AdjustLineInfoOffset(int lineNumberOffset, int linePositionOffset)
internal void SetNameTable(XmlNameTable nameTable)
internal void SkipTextDeclaration()
public void Close()
public string GetAttribute(int i)
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupNamespace(string prefix)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceName)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
public bool ReadAttributeValue()
public string ReadString()
public void ResetState()
public void ResolveEntity()
private void CloseEntity()
public void Skip()
public TextReader GetRemainder()
public bool HasLineInfo()
public int ReadBase64(Byte[] buffer, int offset, int length)
public int ReadBinHex(Byte[] buffer, int offset, int length)
public int ReadChars(Char[] buffer, int offset, int length)
public int ReadContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadContentAsBinHex(Byte[] buffer, int offset, int length)
public int ReadElementContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadElementContentAsBinHex(Byte[] buffer, int offset, int length)
}
public System.Xml.XmlTextWriter : XmlWriter {
private string XmlNamespace
private string XmlnsNamespace
private Encoding unmarked_utf8encoding
private Char[] escaped_text_chars
private Char[] escaped_attr_chars
private Stream base_stream
private TextWriter source
private TextWriter writer
private StringWriter preserver
private string preserved_name
private bool is_preserved_xmlns
private bool allow_doc_fragment
private bool close_output_stream
private bool ignore_encoding
private bool namespaces
private XmlDeclState xmldecl_state
private bool check_character_validity
private NewLineHandling newline_handling
private bool is_document_entity
private WriteState state
private XmlNodeType node_state
private XmlNamespaceManager nsmanager
private int open_count
private XmlNodeInfo[] elements
private Stack new_local_namespaces
private ArrayList explicit_nsdecls
private NamespaceHandling namespace_handling
private bool indent
private int indent_count
private char indent_char
private string indent_string
private string newline
private bool indent_attributes
private char quote_char
private bool v2
private Dictionary`2<string, int> <>f__switch$map3A
private Dictionary`2<string, int> <>f__switch$map3B
public Formatting Formatting
public int Indentation
public char IndentChar
public char QuoteChar
public string XmlLang
public XmlSpace XmlSpace
public WriteState WriteState
public Stream BaseStream
public bool Namespaces
public void .ctor(string filename, Encoding encoding)
public void .ctor(Stream stream, Encoding encoding)
public void .ctor(TextWriter writer)
internal void .ctor(TextWriter writer, XmlWriterSettings settings, bool closeOutput)
private void Initialize(TextWriter writer)
public Formatting get_Formatting()
public void set_Formatting(Formatting value)
public int get_Indentation()
public void set_Indentation(int value)
public char get_IndentChar()
public void set_IndentChar(char value)
public char get_QuoteChar()
public void set_QuoteChar(char value)
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public WriteState get_WriteState()
public string LookupPrefix(string namespaceUri)
public Stream get_BaseStream()
public void Close()
public void Flush()
public bool get_Namespaces()
public void set_Namespaces(bool value)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
private void WriteStartDocumentCore(bool outputStd, bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string namespaceUri)
private void CloseStartElement()
private void CloseStartElementCore()
public void WriteEndElement()
public void WriteFullEndElement()
private void WriteEndElementCore(bool full)
public void WriteStartAttribute(string prefix, string localName, string namespaceUri)
private string DetermineAttributePrefix(string prefix, string local, string ns)
private string MockupPrefix(string ns, bool skipLookup)
public void WriteEndAttribute()
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteWhitespace(string text)
public void WriteCData(string text)
public void WriteString(string text)
public void WriteRaw(string raw)
public void WriteCharEntity(char ch)
public void WriteSurrogateCharEntity(char low, char high)
private void WriteCharacterEntity(char ch, char high, bool surrogate)
public void WriteEntityRef(string name)
public void WriteName(string name)
public void WriteNmToken(string nmtoken)
public void WriteQualifiedName(string localName, string ns)
private void CheckChunkRange(Array buffer, int index, int count)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
private void WriteIndent()
private void WriteIndentEndElement()
private void WriteIndentAttribute()
private bool WriteIndentCore(int nestFix, bool attribute)
private void OutputAutoStartDocument()
private void ShiftStateTopLevel(string occured, bool allowAttribute, bool dontCheckXmlDecl, bool isCharacter)
private void CheckMixedContentState()
private void ShiftStateContent(string occured, bool allowAttribute)
private void WriteEscapedString(string text, bool isAttribute)
private void WriteCheckedString(string s)
private void WriteCheckedBuffer(Char[] text, int idx, int length)
private void WriteEscapedBuffer(Char[] text, int index, int length, bool isAttribute)
private Exception ArgumentOutOfRangeError(string name)
private Exception ArgumentError(string msg)
private Exception InvalidOperation(string msg)
private Exception StateError(string occured)
}
public System.Xml.XmlTokenizedType : Enum {
public int value__
public XmlTokenizedType CDATA
public XmlTokenizedType ID
public XmlTokenizedType IDREF
public XmlTokenizedType IDREFS
public XmlTokenizedType ENTITY
public XmlTokenizedType ENTITIES
public XmlTokenizedType NMTOKEN
public XmlTokenizedType NMTOKENS
public XmlTokenizedType NOTATION
public XmlTokenizedType ENUMERATION
public XmlTokenizedType QName
public XmlTokenizedType NCName
public XmlTokenizedType None
}
public System.Xml.XmlUrlResolver : XmlResolver {
private ICredentials credential
public ICredentials Credentials
public void set_Credentials(ICredentials value)
public object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn)
public Uri ResolveUri(Uri baseUri, string relativeUri)
private string UnescapeRelativeUriBody(string src)
}
public System.Xml.XmlValidatingReader : XmlReader {
private EntityHandling entityHandling
private XmlReader sourceReader
private XmlTextReader xmlTextReader
private XmlReader validatingReader
private XmlResolver resolver
private bool resolverSpecified
private ValidationType validationType
private XmlSchemaCollection schemas
private DTDValidatingReader dtdReader
private IHasXmlSchemaInfo schemaInfo
private StringBuilder storedCharacters
private ValidationEventHandler ValidationEventHandler
private XmlParserContext Mono.Xml.IHasXmlParserContext.ParserContext
public int AttributeCount
public string BaseURI
public bool CanReadBinaryContent
public bool CanResolveEntity
public int Depth
public Encoding Encoding
public EntityHandling EntityHandling
public bool EOF
public bool HasValue
public bool IsDefault
public bool IsEmptyElement
public int LineNumber
public int LinePosition
public string LocalName
public string Name
public bool Namespaces
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public char QuoteChar
public XmlReader Reader
public ReadState ReadState
internal XmlResolver Resolver
public XmlSchemaCollection Schemas
public object SchemaType
public XmlReaderSettings Settings
public ValidationType ValidationType
public string Value
public string XmlLang
public XmlResolver XmlResolver
public XmlSpace XmlSpace
public void .ctor(XmlReader reader)
public void .ctor(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context)
public void .ctor(string xmlFragment, XmlNodeType fragType, XmlParserContext context)
public void add_ValidationEventHandler(ValidationEventHandler value)
public void remove_ValidationEventHandler(ValidationEventHandler value)
private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext()
private IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope)
private string System.Xml.IXmlNamespaceResolver.LookupPrefix(string ns)
public int get_AttributeCount()
public string get_BaseURI()
public bool get_CanReadBinaryContent()
public bool get_CanResolveEntity()
public int get_Depth()
public Encoding get_Encoding()
public EntityHandling get_EntityHandling()
public void set_EntityHandling(EntityHandling value)
public bool get_EOF()
public bool get_HasValue()
public bool get_IsDefault()
public bool get_IsEmptyElement()
public int get_LineNumber()
public int get_LinePosition()
public string get_LocalName()
public string get_Name()
public bool get_Namespaces()
public void set_Namespaces(bool value)
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
public char get_QuoteChar()
public XmlReader get_Reader()
public ReadState get_ReadState()
internal XmlResolver get_Resolver()
public XmlSchemaCollection get_Schemas()
public object get_SchemaType()
public XmlReaderSettings get_Settings()
public ValidationType get_ValidationType()
public void set_ValidationType(ValidationType value)
public string get_Value()
public string get_XmlLang()
public void set_XmlResolver(XmlResolver value)
public XmlSpace get_XmlSpace()
public void Close()
public string GetAttribute(int i)
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceName)
public bool HasLineInfo()
public string LookupNamespace(string prefix)
public void MoveToAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceName)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
public bool ReadAttributeValue()
public string ReadString()
public object ReadTypedValue()
public void ResolveEntity()
internal void OnValidationEvent(object o, ValidationEventArgs e)
public int ReadContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadContentAsBinHex(Byte[] buffer, int offset, int length)
public int ReadElementContentAsBase64(Byte[] buffer, int offset, int length)
public int ReadElementContentAsBinHex(Byte[] buffer, int offset, int length)
}
public System.Xml.XmlWhitespace : XmlCharacterData {
public string LocalName
public string Name
public XmlNodeType NodeType
internal XPathNodeType XPathNodeType
public string Value
public XmlNode ParentNode
protected internal void .ctor(string strData, XmlDocument doc)
public string get_LocalName()
public string get_Name()
public XmlNodeType get_NodeType()
internal XPathNodeType get_XPathNodeType()
public string get_Value()
public void set_Value(string value)
public XmlNode get_ParentNode()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
}
public System.Xml.XmlWriter : object {
private XmlWriterSettings settings
public XmlWriterSettings Settings
public WriteState WriteState
public string XmlLang
public XmlSpace XmlSpace
private void System.IDisposable.Dispose()
public XmlWriterSettings get_Settings()
public WriteState get_WriteState()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
public void Close()
public XmlWriter Create(Stream stream)
public XmlWriter Create(string file)
public XmlWriter Create(TextWriter writer)
public XmlWriter Create(XmlWriter writer)
public XmlWriter Create(StringBuilder builder)
public XmlWriter Create(Stream stream, XmlWriterSettings settings)
public XmlWriter Create(string file, XmlWriterSettings settings)
public XmlWriter Create(StringBuilder builder, XmlWriterSettings settings)
public XmlWriter Create(TextWriter writer, XmlWriterSettings settings)
public XmlWriter Create(XmlWriter writer, XmlWriterSettings settings)
private XmlWriter CreateTextWriter(TextWriter writer, XmlWriterSettings settings, bool closeOutput)
protected void Dispose(bool disposing)
public void Flush()
public string LookupPrefix(string ns)
private void WriteAttribute(XmlReader reader, bool defattr)
public void WriteAttributes(XmlReader reader, bool defattr)
public void WriteAttributeString(string localName, string value)
public void WriteAttributeString(string localName, string ns, string value)
public void WriteAttributeString(string prefix, string localName, string ns, string value)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public void WriteCData(string text)
public void WriteCharEntity(char ch)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteComment(string text)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteElementString(string localName, string value)
public void WriteElementString(string localName, string ns, string value)
public void WriteElementString(string prefix, string localName, string ns, string value)
public void WriteEndAttribute()
public void WriteEndDocument()
public void WriteEndElement()
public void WriteEntityRef(string name)
public void WriteFullEndElement()
public void WriteName(string name)
public void WriteNmToken(string name)
public void WriteQualifiedName(string localName, string ns)
internal void WriteNameInternal(string name)
internal void WriteNmTokenInternal(string name)
internal void WriteQualifiedNameInternal(string localName, string ns)
public void WriteNode(XPathNavigator navigator, bool defattr)
public void WriteNode(XmlReader reader, bool defattr)
public void WriteProcessingInstruction(string name, string text)
public void WriteRaw(string data)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteStartAttribute(string localName)
public void WriteStartAttribute(string localName, string ns)
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteStartElement(string localName)
public void WriteStartElement(string localName, string ns)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteWhitespace(string ws)
public void WriteValue(bool value)
public void WriteValue(DateTime value)
public void WriteValue(decimal value)
public void WriteValue(double value)
public void WriteValue(int value)
public void WriteValue(long value)
public void WriteValue(object value)
public void WriteValue(float value)
public void WriteValue(string value)
}
public System.Xml.XmlWriterSettings : object {
private bool checkCharacters
private bool closeOutput
private ConformanceLevel conformance
private Encoding encoding
private bool indent
private string indentChars
private string newLineChars
private bool newLineOnAttributes
private NewLineHandling newLineHandling
private bool omitXmlDeclaration
private XmlOutputMethod outputMethod
private NamespaceHandling <NamespaceHandling>k__BackingField
public bool CheckCharacters
public bool CloseOutput
public ConformanceLevel ConformanceLevel
public Encoding Encoding
public bool Indent
public string IndentChars
public string NewLineChars
public bool NewLineOnAttributes
public NewLineHandling NewLineHandling
public bool OmitXmlDeclaration
public XmlOutputMethod OutputMethod
internal NamespaceHandling NamespaceHandling
public XmlWriterSettings Clone()
public void Reset()
public bool get_CheckCharacters()
public void set_CheckCharacters(bool value)
public bool get_CloseOutput()
public void set_CloseOutput(bool value)
public ConformanceLevel get_ConformanceLevel()
public void set_ConformanceLevel(ConformanceLevel value)
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
public bool get_Indent()
public void set_Indent(bool value)
public string get_IndentChars()
public void set_IndentChars(string value)
public string get_NewLineChars()
public void set_NewLineChars(string value)
public bool get_NewLineOnAttributes()
public void set_NewLineOnAttributes(bool value)
public NewLineHandling get_NewLineHandling()
public void set_NewLineHandling(NewLineHandling value)
public bool get_OmitXmlDeclaration()
public void set_OmitXmlDeclaration(bool value)
public XmlOutputMethod get_OutputMethod()
internal NamespaceHandling get_NamespaceHandling()
internal void set_NamespaceHandling(NamespaceHandling value)
}
internal System.Xml.XPath.AncestorIterator : SimpleIterator {
private int currentPosition
private ArrayList navigators
private XPathNavigator startPosition
public bool ReverseAxis
public int Count
public void .ctor(BaseIterator iter)
private void .ctor(AncestorIterator other)
public XPathNodeIterator Clone()
private void CollectResults()
public bool MoveNextCore()
public bool get_ReverseAxis()
public int get_Count()
}
internal System.Xml.XPath.AncestorOrSelfIterator : SimpleIterator {
private int currentPosition
private ArrayList navigators
private XPathNavigator startPosition
public bool ReverseAxis
public int Count
public void .ctor(BaseIterator iter)
private void .ctor(AncestorOrSelfIterator other)
public XPathNodeIterator Clone()
private void CollectResults()
public bool MoveNextCore()
public bool get_ReverseAxis()
public int get_Count()
}
internal System.Xml.XPath.AttributeIterator : SimpleIterator {
public void .ctor(BaseIterator iter)
private void .ctor(AttributeIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
}
internal System.Xml.XPath.Axes : Enum {
public int value__
public Axes Ancestor
public Axes AncestorOrSelf
public Axes Attribute
public Axes Child
public Axes Descendant
public Axes DescendantOrSelf
public Axes Following
public Axes FollowingSibling
public Axes Namespace
public Axes Parent
public Axes Preceding
public Axes PrecedingSibling
public Axes Self
}
internal System.Xml.XPath.AxisIterator : BaseIterator {
private BaseIterator _iter
private NodeTest _test
public XPathNavigator Current
public bool ReverseAxis
public void .ctor(BaseIterator iter, NodeTest test)
private void .ctor(AxisIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
public bool get_ReverseAxis()
}
internal System.Xml.XPath.AxisSpecifier : object {
protected Axes _axis
public XPathNodeType NodeType
public Axes Axis
public void .ctor(Axes axis)
public XPathNodeType get_NodeType()
public string ToString()
public Axes get_Axis()
public BaseIterator Evaluate(BaseIterator iter)
}
internal System.Xml.XPath.BaseIterator : XPathNodeIterator {
private IXmlNamespaceResolver _nsm
private int position
public IXmlNamespaceResolver NamespaceManager
public bool ReverseAxis
public int ComparablePosition
public int CurrentPosition
internal void .ctor(BaseIterator other)
internal void .ctor(IXmlNamespaceResolver nsm)
public IXmlNamespaceResolver get_NamespaceManager()
public void set_NamespaceManager(IXmlNamespaceResolver value)
public bool get_ReverseAxis()
public int get_ComparablePosition()
public int get_CurrentPosition()
internal void SetPosition(int pos)
public bool MoveNext()
public bool MoveNextCore()
internal XPathNavigator PeekNext()
public string ToString()
}
internal System.Xml.XPath.BooleanConstant : Expression {
private bool _value
public XPathResultType ReturnType
internal bool Peer
public bool HasStaticValue
public bool StaticValueAsBoolean
public void .ctor(bool value)
public string ToString()
public XPathResultType get_ReturnType()
internal bool get_Peer()
public bool get_HasStaticValue()
public bool get_StaticValueAsBoolean()
public object Evaluate(BaseIterator iter)
public bool EvaluateBoolean(BaseIterator iter)
}
internal System.Xml.XPath.ChildIterator : BaseIterator {
private XPathNavigator _nav
public XPathNavigator Current
public void .ctor(BaseIterator iter)
private void .ctor(ChildIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
}
internal System.Xml.XPath.CompiledExpression : XPathExpression {
protected IXmlNamespaceResolver _nsm
protected Expression _expr
private XPathSorters _sorters
private string rawExpression
public Expression ExpressionNode
internal IXmlNamespaceResolver NamespaceManager
public string Expression
public XPathResultType ReturnType
public void .ctor(string raw, Expression expr)
private void .ctor(CompiledExpression other)
public XPathExpression Clone()
public Expression get_ExpressionNode()
public void SetContext(XmlNamespaceManager nsManager)
public void SetContext(IXmlNamespaceResolver nsResolver)
internal IXmlNamespaceResolver get_NamespaceManager()
public string get_Expression()
public XPathResultType get_ReturnType()
public object Evaluate(BaseIterator iter)
public XPathNodeIterator EvaluateNodeSet(BaseIterator iter)
public double EvaluateNumber(BaseIterator iter)
public string EvaluateString(BaseIterator iter)
public bool EvaluateBoolean(BaseIterator iter)
public void AddSort(object obj, IComparer cmp)
public void AddSort(object expr, XmlSortOrder orderSort, XmlCaseOrder orderCase, string lang, XmlDataType dataType)
}
internal System.Xml.XPath.DescendantIterator : SimpleIterator {
private int _depth
private bool _finished
public void .ctor(BaseIterator iter)
private void .ctor(DescendantIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
}
internal System.Xml.XPath.DescendantOrSelfIterator : SimpleIterator {
private int _depth
private bool _finished
public void .ctor(BaseIterator iter)
private void .ctor(DescendantOrSelfIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
}
internal System.Xml.XPath.EqualityExpr : ExprBoolean {
private bool trueVal
public bool StaticValueAsBoolean
public void .ctor(Expression left, Expression right, bool trueVal)
public bool get_StaticValueAsBoolean()
public bool EvaluateBoolean(BaseIterator iter)
}
internal System.Xml.XPath.ExprAND : ExprBoolean {
protected string Operator
public bool StaticValueAsBoolean
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public bool get_StaticValueAsBoolean()
public bool EvaluateBoolean(BaseIterator iter)
}
internal System.Xml.XPath.ExprBinary : Expression {
protected Expression _left
protected Expression _right
public bool HasStaticValue
protected string Operator
internal XPathNodeType EvaluatedNodeType
internal bool IsPositional
internal bool Peer
public void .ctor(Expression left, Expression right)
public Expression Optimize()
public bool get_HasStaticValue()
public string ToString()
protected string get_Operator()
internal XPathNodeType get_EvaluatedNodeType()
internal bool get_IsPositional()
internal bool get_Peer()
}
internal System.Xml.XPath.ExprBoolean : ExprBinary {
public XPathResultType ReturnType
public void .ctor(Expression left, Expression right)
public Expression Optimize()
public XPathResultType get_ReturnType()
public object Evaluate(BaseIterator iter)
public double EvaluateNumber(BaseIterator iter)
public string EvaluateString(BaseIterator iter)
}
internal System.Xml.XPath.ExprDIV : ExprNumeric {
protected string Operator
public double StaticValueAsNumber
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public double get_StaticValueAsNumber()
public double EvaluateNumber(BaseIterator iter)
}
internal System.Xml.XPath.ExprEQ : EqualityExpr {
protected string Operator
public void .ctor(Expression left, Expression right)
protected string get_Operator()
}
internal System.Xml.XPath.Expression : object {
public XPathResultType ReturnType
public bool HasStaticValue
public object StaticValue
public string StaticValueAsString
public double StaticValueAsNumber
public bool StaticValueAsBoolean
public XPathNavigator StaticValueAsNavigator
internal XPathNodeType EvaluatedNodeType
internal bool IsPositional
internal bool Peer
public bool RequireSorting
public XPathResultType get_ReturnType()
public XPathResultType GetReturnType(BaseIterator iter)
public Expression Optimize()
public bool get_HasStaticValue()
public object get_StaticValue()
public string get_StaticValueAsString()
public double get_StaticValueAsNumber()
public bool get_StaticValueAsBoolean()
public XPathNavigator get_StaticValueAsNavigator()
public object Evaluate(BaseIterator iter)
public BaseIterator EvaluateNodeSet(BaseIterator iter)
protected XPathResultType GetReturnType(object obj)
internal XPathNodeType get_EvaluatedNodeType()
internal bool get_IsPositional()
internal bool get_Peer()
public double EvaluateNumber(BaseIterator iter)
public string EvaluateString(BaseIterator iter)
public bool EvaluateBoolean(BaseIterator iter)
public object EvaluateAs(BaseIterator iter, XPathResultType type)
public bool get_RequireSorting()
}
internal System.Xml.XPath.ExpressionCache : object {
private Hashtable table_per_ctx
private object dummy
private object cache_lock
public XPathExpression Get(string xpath, IStaticXsltContext ctx)
public void Set(string xpath, IStaticXsltContext ctx, XPathExpression exp)
}
internal System.Xml.XPath.ExprFilter : NodeSet {
internal Expression expr
internal Expression pred
internal Expression LeftHandSide
internal XPathNodeType EvaluatedNodeType
internal bool IsPositional
internal bool Peer
internal bool Subtree
public void .ctor(Expression expr, Expression pred)
public Expression Optimize()
internal Expression get_LeftHandSide()
public string ToString()
public object Evaluate(BaseIterator iter)
internal XPathNodeType get_EvaluatedNodeType()
internal bool get_IsPositional()
internal bool get_Peer()
internal bool get_Subtree()
}
internal System.Xml.XPath.ExprFunctionCall : Expression {
protected XmlQualifiedName _name
protected bool resolvedName
protected ArrayList _args
private Dictionary`2<string, int> <>f__switch$map3C
public XPathResultType ReturnType
internal bool Peer
public void .ctor(XmlQualifiedName name, FunctionArguments args, IStaticXsltContext ctx)
public Expression Factory(XmlQualifiedName name, FunctionArguments args, IStaticXsltContext ctx)
public string ToString()
public XPathResultType get_ReturnType()
public XPathResultType GetReturnType(BaseIterator iter)
private XPathResultType[] GetArgTypes(BaseIterator iter)
public object Evaluate(BaseIterator iter)
internal bool get_Peer()
}
internal System.Xml.XPath.ExprGE : RelationalExpr {
protected string Operator
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public bool Compare(double arg1, double arg2)
}
internal System.Xml.XPath.ExprGT : RelationalExpr {
protected string Operator
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public bool Compare(double arg1, double arg2)
}
internal System.Xml.XPath.ExprLE : RelationalExpr {
protected string Operator
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public bool Compare(double arg1, double arg2)
}
internal System.Xml.XPath.ExprLiteral : Expression {
protected string _value
public string Value
public XPathResultType ReturnType
internal bool Peer
public bool HasStaticValue
public string StaticValueAsString
public void .ctor(string value)
public string get_Value()
public string ToString()
public XPathResultType get_ReturnType()
internal bool get_Peer()
public bool get_HasStaticValue()
public string get_StaticValueAsString()
public object Evaluate(BaseIterator iter)
public string EvaluateString(BaseIterator iter)
}
internal System.Xml.XPath.ExprLT : RelationalExpr {
protected string Operator
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public bool Compare(double arg1, double arg2)
}
internal System.Xml.XPath.ExprMINUS : ExprNumeric {
protected string Operator
public double StaticValueAsNumber
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public double get_StaticValueAsNumber()
public double EvaluateNumber(BaseIterator iter)
}
internal System.Xml.XPath.ExprMOD : ExprNumeric {
protected string Operator
public double StaticValueAsNumber
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public double get_StaticValueAsNumber()
public double EvaluateNumber(BaseIterator iter)
}
internal System.Xml.XPath.ExprMULT : ExprNumeric {
protected string Operator
public double StaticValueAsNumber
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public double get_StaticValueAsNumber()
public double EvaluateNumber(BaseIterator iter)
}
internal System.Xml.XPath.ExprNE : EqualityExpr {
protected string Operator
public void .ctor(Expression left, Expression right)
protected string get_Operator()
}
internal System.Xml.XPath.ExprNEG : Expression {
private Expression _expr
public XPathResultType ReturnType
internal bool Peer
public bool HasStaticValue
public double StaticValueAsNumber
internal bool IsPositional
public void .ctor(Expression expr)
public string ToString()
public XPathResultType get_ReturnType()
public Expression Optimize()
internal bool get_Peer()
public bool get_HasStaticValue()
public double get_StaticValueAsNumber()
public object Evaluate(BaseIterator iter)
public double EvaluateNumber(BaseIterator iter)
internal bool get_IsPositional()
}
internal System.Xml.XPath.ExprNumber : Expression {
protected double _value
public XPathResultType ReturnType
internal bool Peer
public bool HasStaticValue
public double StaticValueAsNumber
internal bool IsPositional
public void .ctor(double value)
public string ToString()
public XPathResultType get_ReturnType()
internal bool get_Peer()
public bool get_HasStaticValue()
public double get_StaticValueAsNumber()
public object Evaluate(BaseIterator iter)
public double EvaluateNumber(BaseIterator iter)
internal bool get_IsPositional()
}
internal System.Xml.XPath.ExprNumeric : ExprBinary {
public XPathResultType ReturnType
public void .ctor(Expression left, Expression right)
public XPathResultType get_ReturnType()
public Expression Optimize()
public object Evaluate(BaseIterator iter)
}
internal System.Xml.XPath.ExprOR : ExprBoolean {
protected string Operator
public bool StaticValueAsBoolean
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public bool get_StaticValueAsBoolean()
public bool EvaluateBoolean(BaseIterator iter)
}
internal System.Xml.XPath.ExprParens : Expression {
protected Expression _expr
public bool HasStaticValue
public object StaticValue
public string StaticValueAsString
public double StaticValueAsNumber
public bool StaticValueAsBoolean
public XPathResultType ReturnType
internal XPathNodeType EvaluatedNodeType
internal bool IsPositional
internal bool Peer
public void .ctor(Expression expr)
public Expression Optimize()
public bool get_HasStaticValue()
public object get_StaticValue()
public string get_StaticValueAsString()
public double get_StaticValueAsNumber()
public bool get_StaticValueAsBoolean()
public string ToString()
public XPathResultType get_ReturnType()
public object Evaluate(BaseIterator iter)
internal XPathNodeType get_EvaluatedNodeType()
internal bool get_IsPositional()
internal bool get_Peer()
}
internal System.Xml.XPath.ExprPLUS : ExprNumeric {
protected string Operator
public double StaticValueAsNumber
public void .ctor(Expression left, Expression right)
protected string get_Operator()
public double get_StaticValueAsNumber()
public double EvaluateNumber(BaseIterator iter)
}
internal System.Xml.XPath.ExprRoot : NodeSet {
internal XPathNodeType EvaluatedNodeType
internal bool Peer
internal bool Subtree
public string ToString()
public object Evaluate(BaseIterator iter)
internal XPathNodeType get_EvaluatedNodeType()
internal bool get_Peer()
internal bool get_Subtree()
}
internal System.Xml.XPath.ExprSLASH : NodeSet {
public Expression left
public NodeSet right
public bool RequireSorting
internal XPathNodeType EvaluatedNodeType
internal bool IsPositional
internal bool Peer
internal bool Subtree
public void .ctor(Expression left, NodeSet right)
public Expression Optimize()
public string ToString()
public object Evaluate(BaseIterator iter)
public bool get_RequireSorting()
internal XPathNodeType get_EvaluatedNodeType()
internal bool get_IsPositional()
internal bool get_Peer()
internal bool get_Subtree()
}
internal System.Xml.XPath.ExprSLASH2 : NodeSet {
public Expression left
public NodeSet right
private NodeTest DescendantOrSelfStar
public bool RequireSorting
internal XPathNodeType EvaluatedNodeType
internal bool IsPositional
internal bool Peer
internal bool Subtree
public void .ctor(Expression left, NodeSet right)
public Expression Optimize()
public string ToString()
public object Evaluate(BaseIterator iter)
public bool get_RequireSorting()
internal XPathNodeType get_EvaluatedNodeType()
internal bool get_IsPositional()
internal bool get_Peer()
internal bool get_Subtree()
}
internal System.Xml.XPath.ExprUNION : NodeSet {
internal Expression left
internal Expression right
internal XPathNodeType EvaluatedNodeType
internal bool IsPositional
internal bool Peer
internal bool Subtree
public void .ctor(Expression left, Expression right)
public Expression Optimize()
public string ToString()
public object Evaluate(BaseIterator iter)
internal XPathNodeType get_EvaluatedNodeType()
internal bool get_IsPositional()
internal bool get_Peer()
internal bool get_Subtree()
}
internal System.Xml.XPath.ExprVariable : Expression {
protected XmlQualifiedName _name
protected bool resolvedName
public XPathResultType ReturnType
internal bool Peer
public void .ctor(XmlQualifiedName name, IStaticXsltContext ctx)
public string ToString()
public XPathResultType get_ReturnType()
public XPathResultType GetReturnType(BaseIterator iter)
public object Evaluate(BaseIterator iter)
internal bool get_Peer()
}
internal System.Xml.XPath.FollowingIterator : SimpleIterator {
private bool _finished
public void .ctor(BaseIterator iter)
private void .ctor(FollowingIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
}
internal System.Xml.XPath.FollowingSiblingIterator : SimpleIterator {
public void .ctor(BaseIterator iter)
private void .ctor(FollowingSiblingIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
}
internal System.Xml.XPath.FunctionArguments : object {
protected Expression _arg
protected FunctionArguments _tail
public Expression Arg
public FunctionArguments Tail
public void .ctor(Expression arg, FunctionArguments tail)
public Expression get_Arg()
public FunctionArguments get_Tail()
public void ToArrayList(ArrayList a)
}
public System.Xml.XPath.IXPathNavigable {
public XPathNavigator CreateNavigator()
}
internal System.Xml.XPath.ListIterator : BaseIterator {
private IList _list
public XPathNavigator Current
public int Count
public void .ctor(BaseIterator iter, IList list)
public void .ctor(IList list, IXmlNamespaceResolver nsm)
private void .ctor(ListIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
public int get_Count()
}
internal System.Xml.XPath.NamespaceIterator : SimpleIterator {
public void .ctor(BaseIterator iter)
private void .ctor(NamespaceIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
}
internal System.Xml.XPath.NodeNameTest : NodeTest {
protected XmlQualifiedName _name
protected bool resolvedName
public XmlQualifiedName Name
public void .ctor(Axes axis, XmlQualifiedName name, IStaticXsltContext ctx)
public void .ctor(Axes axis, XmlQualifiedName name, bool resolvedName)
internal void .ctor(NodeNameTest source, Axes axis)
public string ToString()
public XmlQualifiedName get_Name()
public bool Match(IXmlNamespaceResolver nsm, XPathNavigator nav)
public void GetInfo(String& name, String& ns, XPathNodeType& nodetype, IXmlNamespaceResolver nsm)
}
internal System.Xml.XPath.NodeSet : Expression {
public XPathResultType ReturnType
internal bool Subtree
public XPathResultType get_ReturnType()
internal bool get_Subtree()
}
internal System.Xml.XPath.NodeTest : NodeSet {
protected AxisSpecifier _axis
public AxisSpecifier Axis
public bool RequireSorting
internal bool Peer
internal bool Subtree
internal XPathNodeType EvaluatedNodeType
public void .ctor(Axes axis)
public bool Match(IXmlNamespaceResolver nsm, XPathNavigator nav)
public AxisSpecifier get_Axis()
public object Evaluate(BaseIterator iter)
public void GetInfo(String& name, String& ns, XPathNodeType& nodetype, IXmlNamespaceResolver nsm)
public bool get_RequireSorting()
internal bool get_Peer()
internal bool get_Subtree()
internal XPathNodeType get_EvaluatedNodeType()
}
internal System.Xml.XPath.NodeTypeTest : NodeTest {
public XPathNodeType type
protected string _param
public void .ctor(Axes axis)
public void .ctor(Axes axis, XPathNodeType type)
public void .ctor(Axes axis, XPathNodeType type, string param)
internal void .ctor(NodeTypeTest other, Axes axis)
public string ToString()
private string ToString(XPathNodeType type)
public bool Match(IXmlNamespaceResolver nsm, XPathNavigator nav)
public void GetInfo(String& name, String& ns, XPathNodeType& nodetype, IXmlNamespaceResolver nsm)
}
internal System.Xml.XPath.NullIterator : SelfIterator {
public int CurrentPosition
public XPathNavigator Current
public void .ctor(BaseIterator iter)
public void .ctor(XPathNavigator nav)
public void .ctor(XPathNavigator nav, IXmlNamespaceResolver nsm)
private void .ctor(NullIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public int get_CurrentPosition()
public XPathNavigator get_Current()
}
internal System.Xml.XPath.OrderedIterator : BaseIterator {
private BaseIterator iter
private ArrayList list
private int index
public XPathNavigator Current
public void .ctor(BaseIterator iter)
private void .ctor(OrderedIterator other, bool dummy)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
}
internal System.Xml.XPath.ParensIterator : BaseIterator {
private BaseIterator _iter
public XPathNavigator Current
public int Count
public void .ctor(BaseIterator iter)
private void .ctor(ParensIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
public int get_Count()
}
internal System.Xml.XPath.ParentIterator : SimpleIterator {
private bool canMove
public void .ctor(BaseIterator iter)
private void .ctor(ParentIterator other, bool dummy)
public void .ctor(XPathNavigator nav, IXmlNamespaceResolver nsm)
public XPathNodeIterator Clone()
public bool MoveNextCore()
}
internal System.Xml.XPath.PrecedingIterator : SimpleIterator {
private bool finished
private bool started
private XPathNavigator startPosition
public bool ReverseAxis
public void .ctor(BaseIterator iter)
private void .ctor(PrecedingIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public bool get_ReverseAxis()
}
internal System.Xml.XPath.PrecedingSiblingIterator : SimpleIterator {
private bool finished
private bool started
private XPathNavigator startPosition
public bool ReverseAxis
public void .ctor(BaseIterator iter)
private void .ctor(PrecedingSiblingIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public bool get_ReverseAxis()
}
internal System.Xml.XPath.PredicateIterator : BaseIterator {
private BaseIterator _iter
private Expression _pred
private XPathResultType resType
private bool finished
public XPathNavigator Current
public bool ReverseAxis
public void .ctor(BaseIterator iter, Expression pred)
private void .ctor(PredicateIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
public bool get_ReverseAxis()
public string ToString()
}
internal System.Xml.XPath.RelationalExpr : ExprBoolean {
public bool StaticValueAsBoolean
public void .ctor(Expression left, Expression right)
public bool get_StaticValueAsBoolean()
public bool EvaluateBoolean(BaseIterator iter)
public bool Compare(double arg1, double arg2)
public bool Compare(double arg1, double arg2, bool fReverse)
}
internal System.Xml.XPath.SelfIterator : SimpleIterator {
public XPathNavigator Current
public void .ctor(BaseIterator iter)
public void .ctor(XPathNavigator nav, IXmlNamespaceResolver nsm)
protected void .ctor(SelfIterator other, bool clone)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
}
internal System.Xml.XPath.SimpleIterator : BaseIterator {
protected XPathNavigator _nav
protected XPathNavigator _current
private bool skipfirst
public XPathNavigator Current
public void .ctor(BaseIterator iter)
protected void .ctor(SimpleIterator other, bool clone)
public void .ctor(XPathNavigator nav, IXmlNamespaceResolver nsm)
public bool MoveNext()
public XPathNavigator get_Current()
}
internal System.Xml.XPath.SimpleSlashIterator : BaseIterator {
private NodeSet _expr
private BaseIterator _left
private BaseIterator _right
private XPathNavigator _current
public XPathNavigator Current
public void .ctor(BaseIterator left, NodeSet expr)
private void .ctor(SimpleSlashIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
}
internal System.Xml.XPath.SlashIterator : BaseIterator {
private BaseIterator _iterLeft
private BaseIterator _iterRight
private NodeSet _expr
private SortedList _iterList
private bool _finished
private BaseIterator _nextIterRight
public XPathNavigator Current
public void .ctor(BaseIterator iter, NodeSet expr)
private void .ctor(SlashIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
}
internal System.Xml.XPath.SortedIterator : BaseIterator {
private ArrayList list
public XPathNavigator Current
public int Count
public void .ctor(BaseIterator iter)
public void .ctor(SortedIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
public int get_Count()
}
internal System.Xml.XPath.UnionIterator : BaseIterator {
private BaseIterator _left
private BaseIterator _right
private bool keepLeft
private bool keepRight
private XPathNavigator _current
public XPathNavigator Current
public void .ctor(BaseIterator iter, BaseIterator left, BaseIterator right)
private void .ctor(UnionIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
private void SetCurrent(XPathNodeIterator iter)
public XPathNavigator get_Current()
}
internal System.Xml.XPath.WrapperIterator : BaseIterator {
private XPathNodeIterator iter
public XPathNavigator Current
public void .ctor(XPathNodeIterator iter, IXmlNamespaceResolver nsm)
private void .ctor(WrapperIterator other)
public XPathNodeIterator Clone()
public bool MoveNextCore()
public XPathNavigator get_Current()
}
public System.Xml.XPath.XmlCaseOrder : Enum {
public int value__
public XmlCaseOrder None
public XmlCaseOrder UpperFirst
public XmlCaseOrder LowerFirst
}
public System.Xml.XPath.XmlDataType : Enum {
public int value__
public XmlDataType Text
public XmlDataType Number
}
public System.Xml.XPath.XmlSortOrder : Enum {
public int value__
public XmlSortOrder Ascending
public XmlSortOrder Descending
}
internal System.Xml.XPath.XPathBooleanFunction : XPathFunction {
public XPathResultType ReturnType
public object StaticValue
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
public object get_StaticValue()
}
public System.Xml.XPath.XPathDocument : object {
private IXPathNavigable document
public void .ctor(Stream stream)
public void .ctor(string uri)
public void .ctor(TextReader reader)
public void .ctor(XmlReader reader)
public void .ctor(string uri, XmlSpace space)
public void .ctor(XmlReader reader, XmlSpace space)
private void Initialize(XmlReader reader, XmlSpace space)
public XPathNavigator CreateNavigator()
}
public System.Xml.XPath.XPathException : SystemException {
public string Message
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception innerException)
public void .ctor(string message)
public string get_Message()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Xml.XPath.XPathExpression : object {
public string Expression
public XPathResultType ReturnType
public string get_Expression()
public XPathResultType get_ReturnType()
public void AddSort(object expr, IComparer comparer)
public void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType)
public XPathExpression Clone()
public void SetContext(XmlNamespaceManager nsManager)
public XPathExpression Compile(string xpath)
public XPathExpression Compile(string xpath, IXmlNamespaceResolver nsmgr)
internal XPathExpression Compile(string xpath, IXmlNamespaceResolver nsmgr, IStaticXsltContext ctx)
public void SetContext(IXmlNamespaceResolver nsResolver)
}
internal System.Xml.XPath.XPathFunction : Expression {
public void .ctor(FunctionArguments args)
}
internal System.Xml.XPath.XPathFunctionBoolean : XPathBooleanFunction {
private Expression arg0
internal bool Peer
public void .ctor(FunctionArguments args)
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionCeil : XPathNumericFunction {
private Expression arg0
public bool HasStaticValue
public double StaticValueAsNumber
internal bool Peer
public void .ctor(FunctionArguments args)
public bool get_HasStaticValue()
public double get_StaticValueAsNumber()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionConcat : XPathFunction {
private ArrayList rgs
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionContains : XPathFunction {
private Expression arg0
private Expression arg1
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionCount : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public bool EvaluateBoolean(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionFalse : XPathBooleanFunction {
public bool HasStaticValue
public bool StaticValueAsBoolean
internal bool Peer
public void .ctor(FunctionArguments args)
public bool get_HasStaticValue()
public bool get_StaticValueAsBoolean()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionFloor : XPathNumericFunction {
private Expression arg0
public bool HasStaticValue
public double StaticValueAsNumber
internal bool Peer
public void .ctor(FunctionArguments args)
public bool get_HasStaticValue()
public double get_StaticValueAsNumber()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionId : XPathFunction {
private Expression arg0
private Char[] rgchWhitespace
public Expression Id
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public Expression get_Id()
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionLang : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public bool EvaluateBoolean(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionLast : XPathFunction {
public XPathResultType ReturnType
internal bool Peer
internal bool IsPositional
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
internal bool get_IsPositional()
}
internal System.Xml.XPath.XPathFunctionLocalName : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionName : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionNamespaceUri : XPathFunction {
private Expression arg0
internal bool Peer
public XPathResultType ReturnType
public void .ctor(FunctionArguments args)
internal bool get_Peer()
public XPathResultType get_ReturnType()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionNormalizeSpace : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionNot : XPathBooleanFunction {
private Expression arg0
internal bool Peer
public void .ctor(FunctionArguments args)
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionNumber : XPathNumericFunction {
private Expression arg0
public bool HasStaticValue
public double StaticValueAsNumber
internal bool Peer
public void .ctor(FunctionArguments args)
public Expression Optimize()
public bool get_HasStaticValue()
public double get_StaticValueAsNumber()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionPosition : XPathFunction {
public XPathResultType ReturnType
internal bool Peer
internal bool IsPositional
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
internal bool get_IsPositional()
}
internal System.Xml.XPath.XPathFunctionRound : XPathNumericFunction {
private Expression arg0
public bool HasStaticValue
public double StaticValueAsNumber
internal bool Peer
public void .ctor(FunctionArguments args)
public bool get_HasStaticValue()
public double get_StaticValueAsNumber()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
private double Round(double arg)
public string ToString()
}
internal System.Xml.XPath.XPathFunctions : object {
public bool ToBoolean(object arg)
public bool ToBoolean(bool b)
public bool ToBoolean(double d)
public bool ToBoolean(string s)
public bool ToBoolean(BaseIterator iter)
public string ToString(object arg)
public string ToString(double d)
public double ToNumber(object arg)
public double ToNumber(string arg)
}
internal System.Xml.XPath.XPathFunctionStartsWith : XPathFunction {
private Expression arg0
private Expression arg1
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionString : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionStringLength : XPathFunction {
private Expression arg0
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionSubstring : XPathFunction {
private Expression arg0
private Expression arg1
private Expression arg2
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionSubstringAfter : XPathFunction {
private Expression arg0
private Expression arg1
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionSubstringBefore : XPathFunction {
private Expression arg0
private Expression arg1
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionSum : XPathNumericFunction {
private Expression arg0
internal bool Peer
public void .ctor(FunctionArguments args)
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionTranslate : XPathFunction {
private Expression arg0
private Expression arg1
private Expression arg2
public XPathResultType ReturnType
internal bool Peer
public void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
internal System.Xml.XPath.XPathFunctionTrue : XPathBooleanFunction {
public bool HasStaticValue
public bool StaticValueAsBoolean
internal bool Peer
public void .ctor(FunctionArguments args)
public bool get_HasStaticValue()
public bool get_StaticValueAsBoolean()
internal bool get_Peer()
public object Evaluate(BaseIterator iter)
public string ToString()
}
public System.Xml.XPath.XPathItem : object {
public bool IsNode
public object TypedValue
public string Value
public bool ValueAsBoolean
public DateTime ValueAsDateTime
public double ValueAsDouble
public int ValueAsInt
public long ValueAsLong
public Type ValueType
public XmlSchemaType XmlType
public object ValueAs(Type type)
public object ValueAs(Type type, IXmlNamespaceResolver nsResolver)
public bool get_IsNode()
public object get_TypedValue()
public string get_Value()
public bool get_ValueAsBoolean()
public DateTime get_ValueAsDateTime()
public double get_ValueAsDouble()
public int get_ValueAsInt()
public long get_ValueAsLong()
public Type get_ValueType()
public XmlSchemaType get_XmlType()
}
internal System.Xml.XPath.XPathIteratorComparer : object {
public XPathIteratorComparer Instance
public int Compare(object o1, object o2)
}
public System.Xml.XPath.XPathNamespaceScope : Enum {
public int value__
public XPathNamespaceScope All
public XPathNamespaceScope ExcludeXml
public XPathNamespaceScope Local
}
public System.Xml.XPath.XPathNavigator : XPathItem {
private Char[] escape_text_chars
private Char[] escape_attr_chars
public IEqualityComparer NavigatorComparer
public string BaseURI
public bool CanEdit
public bool HasAttributes
public bool HasChildren
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XPathNodeType NodeType
public string Prefix
public string XmlLang
public string InnerXml
public bool IsNode
public string OuterXml
public IXmlSchemaInfo SchemaInfo
public object TypedValue
public object UnderlyingObject
public bool ValueAsBoolean
public DateTime ValueAsDateTime
public double ValueAsDouble
public int ValueAsInt
public long ValueAsLong
public Type ValueType
public XmlSchemaType XmlType
private object System.ICloneable.Clone()
public IEqualityComparer get_NavigatorComparer()
public string get_BaseURI()
public bool get_CanEdit()
public bool get_HasAttributes()
public bool get_HasChildren()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XPathNodeType get_NodeType()
public string get_Prefix()
public string get_XmlLang()
public XPathNavigator Clone()
public XmlNodeOrder ComparePosition(XPathNavigator nav)
public XPathExpression Compile(string xpath)
internal XPathExpression Compile(string xpath, IStaticXsltContext ctx)
public object Evaluate(string xpath)
public object Evaluate(XPathExpression expr)
public object Evaluate(XPathExpression expr, XPathNodeIterator context)
private BaseIterator ToBaseIterator(XPathNodeIterator iter, IXmlNamespaceResolver ctx)
private object Evaluate(XPathExpression expr, XPathNodeIterator context, IXmlNamespaceResolver ctx)
internal XPathNodeIterator EvaluateNodeSet(XPathExpression expr, XPathNodeIterator context, IXmlNamespaceResolver ctx)
internal string EvaluateString(XPathExpression expr, XPathNodeIterator context, IXmlNamespaceResolver ctx)
internal double EvaluateNumber(XPathExpression expr, XPathNodeIterator context, IXmlNamespaceResolver ctx)
internal bool EvaluateBoolean(XPathExpression expr, XPathNodeIterator context, IXmlNamespaceResolver ctx)
public string GetAttribute(string localName, string namespaceURI)
public string GetNamespace(string name)
public bool IsDescendant(XPathNavigator nav)
public bool IsSamePosition(XPathNavigator other)
public bool Matches(string xpath)
public bool Matches(XPathExpression expr)
public bool MoveTo(XPathNavigator other)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToNamespace(string name)
public bool MoveToFirst()
public void MoveToRoot()
internal bool MoveToFirstImpl()
public bool MoveToFirstAttribute()
public bool MoveToFirstChild()
public bool MoveToFirstNamespace()
public bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToId(string id)
public bool MoveToNext()
public bool MoveToNextAttribute()
public bool MoveToNextNamespace()
public bool MoveToNextNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToParent()
public bool MoveToPrevious()
public XPathNodeIterator Select(string xpath)
public XPathNodeIterator Select(XPathExpression expr)
internal XPathNodeIterator Select(XPathExpression expr, IXmlNamespaceResolver ctx)
public XPathNodeIterator SelectAncestors(XPathNodeType type, bool matchSelf)
public XPathNodeIterator SelectAncestors(string name, string namespaceURI, bool matchSelf)
private IEnumerable EnumerateChildren(XPathNavigator n, XPathNodeType type)
public XPathNodeIterator SelectChildren(XPathNodeType type)
private IEnumerable EnumerateChildren(XPathNavigator n, string name, string ns)
public XPathNodeIterator SelectChildren(string name, string namespaceURI)
public XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf)
public XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf)
internal XPathNodeIterator SelectTest(NodeTest test)
public string ToString()
public bool CheckValidity(XmlSchemaSet schemas, ValidationEventHandler handler)
public XPathNavigator CreateNavigator()
public object Evaluate(string xpath, IXmlNamespaceResolver nsResolver)
public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
public string LookupNamespace(string prefix)
public string LookupPrefix(string namespaceUri)
private bool MoveTo(XPathNodeIterator iter)
public bool MoveToChild(XPathNodeType type)
public bool MoveToChild(string localName, string namespaceURI)
public bool MoveToNext(string localName, string namespaceURI)
public bool MoveToNext(XPathNodeType type)
public bool MoveToFollowing(string localName, string namespaceURI)
public bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end)
public bool MoveToFollowing(XPathNodeType type)
public bool MoveToFollowing(XPathNodeType type, XPathNavigator end)
public XmlReader ReadSubtree()
public XPathNodeIterator Select(string xpath, IXmlNamespaceResolver nsResolver)
public XPathNavigator SelectSingleNode(string xpath)
public XPathNavigator SelectSingleNode(string xpath, IXmlNamespaceResolver nsResolver)
public XPathNavigator SelectSingleNode(XPathExpression expression)
public object ValueAs(Type type, IXmlNamespaceResolver nsResolver)
public void WriteSubtree(XmlWriter writer)
private string EscapeString(string value, bool attr)
public string get_InnerXml()
public void set_InnerXml(string value)
public bool get_IsNode()
public string get_OuterXml()
public void set_OuterXml(string value)
public IXmlSchemaInfo get_SchemaInfo()
public object get_TypedValue()
public object get_UnderlyingObject()
public bool get_ValueAsBoolean()
public DateTime get_ValueAsDateTime()
public double get_ValueAsDouble()
public int get_ValueAsInt()
public long get_ValueAsLong()
public Type get_ValueType()
public XmlSchemaType get_XmlType()
private XmlReader CreateFragmentReader(string fragment)
public XmlWriter AppendChild()
public void AppendChild(string xmlFragments)
public void AppendChild(XmlReader reader)
public void AppendChild(XPathNavigator nav)
public void AppendChildElement(string prefix, string name, string ns, string value)
public void CreateAttribute(string prefix, string localName, string namespaceURI, string value)
public XmlWriter CreateAttributes()
public void DeleteSelf()
public void DeleteRange(XPathNavigator nav)
public XmlWriter ReplaceRange(XPathNavigator nav)
public XmlWriter InsertAfter()
public void InsertAfter(string xmlFragments)
public void InsertAfter(XmlReader reader)
public void InsertAfter(XPathNavigator nav)
public XmlWriter InsertBefore()
public void InsertBefore(string xmlFragments)
public void InsertBefore(XmlReader reader)
public void InsertBefore(XPathNavigator nav)
public void InsertElementAfter(string prefix, string localName, string namespaceURI, string value)
public void InsertElementBefore(string prefix, string localName, string namespaceURI, string value)
public XmlWriter PrependChild()
public void PrependChild(string xmlFragments)
public void PrependChild(XmlReader reader)
public void PrependChild(XPathNavigator nav)
public void PrependChildElement(string prefix, string localName, string namespaceURI, string value)
public void ReplaceSelf(string xmlFragment)
public void ReplaceSelf(XmlReader reader)
public void ReplaceSelf(XPathNavigator navigator)
public void SetTypedValue(object value)
public void SetValue(string value)
private void DeleteChildren()
}
internal System.Xml.XPath.XPathNavigatorComparer : object {
public XPathNavigatorComparer Instance
private bool System.Collections.IEqualityComparer.Equals(object o1, object o2)
private int System.Collections.IEqualityComparer.GetHashCode(object obj)
public int Compare(object o1, object o2)
}
public System.Xml.XPath.XPathNodeIterator : object {
private int _count
public int Count
public XPathNavigator Current
public int CurrentPosition
private object System.ICloneable.Clone()
public int get_Count()
public XPathNavigator get_Current()
public int get_CurrentPosition()
public XPathNodeIterator Clone()
public IEnumerator GetEnumerator()
public bool MoveNext()
}
public System.Xml.XPath.XPathNodeType : Enum {
public int value__
public XPathNodeType Root
public XPathNodeType Element
public XPathNodeType Attribute
public XPathNodeType Namespace
public XPathNodeType Text
public XPathNodeType SignificantWhitespace
public XPathNodeType Whitespace
public XPathNodeType ProcessingInstruction
public XPathNodeType Comment
public XPathNodeType All
}
internal System.Xml.XPath.XPathNumericFunction : XPathFunction {
public XPathResultType ReturnType
public object StaticValue
internal void .ctor(FunctionArguments args)
public XPathResultType get_ReturnType()
public object get_StaticValue()
}
public System.Xml.XPath.XPathResultType : Enum {
public int value__
public XPathResultType Number
public XPathResultType String
public XPathResultType Boolean
public XPathResultType NodeSet
public XPathResultType Navigator
public XPathResultType Any
public XPathResultType Error
}
internal System.Xml.XPath.XPathSortElement : object {
public XPathNavigator Navigator
public Object[] Values
}
internal System.Xml.XPath.XPathSorter : object {
private Expression _expr
private IComparer _cmp
private XmlDataType _type
public void .ctor(object expr, IComparer cmp)
public void .ctor(object expr, XmlSortOrder orderSort, XmlCaseOrder orderCase, string lang, XmlDataType dataType)
private Expression ExpressionFromObject(object expr)
public object Evaluate(BaseIterator iter)
public int Compare(object o1, object o2)
}
internal System.Xml.XPath.XPathSorters : object {
private ArrayList _rgSorters
private int System.Collections.IComparer.Compare(object o1, object o2)
public void Add(object expr, IComparer cmp)
public void Add(object expr, XmlSortOrder orderSort, XmlCaseOrder orderCase, string lang, XmlDataType dataType)
public void CopyFrom(XPathSorter[] sorters)
public BaseIterator Sort(BaseIterator iter)
private ArrayList ToSortElementList(BaseIterator iter)
public BaseIterator Sort(ArrayList rgElts, IXmlNamespaceResolver nsm)
}
internal System.Xml.XQueryConvert : object {
public XmlTypeCode GetFallbackType(XmlTypeCode type)
public string AnyUriToString(string value)
public Byte[] Base64BinaryToHexBinary(Byte[] value)
public string Base64BinaryToString(Byte[] value)
public decimal BooleanToDecimal(bool value)
public double BooleanToDouble(bool value)
public float BooleanToFloat(bool value)
public int BooleanToInt(bool value)
public long BooleanToInteger(bool value)
public string BooleanToString(bool value)
public DateTime DateTimeToDate(DateTime value)
public DateTime DateTimeToGDay(DateTime value)
public DateTime DateTimeToGMonth(DateTime value)
public DateTime DateTimeToGMonthDay(DateTime value)
public DateTime DateTimeToGYear(DateTime value)
public DateTime DateTimeToGYearMonth(DateTime value)
public DateTime DateTimeToTime(DateTime value)
public DateTime DateToDateTime(DateTime value)
public DateTime DateToGDay(DateTime value)
public DateTime DateToGMonth(DateTime value)
public DateTime DateToGMonthDay(DateTime value)
public DateTime DateToGYear(DateTime value)
public DateTime DateToGYearMonth(DateTime value)
public string DateToString(DateTime value)
public string DateTimeToString(DateTime value)
public string DayTimeDurationToDuration(TimeSpan value)
public string DayTimeDurationToString(TimeSpan value)
public bool DecimalToBoolean(decimal value)
public double DecimalToDouble(decimal value)
public float DecimalToFloat(decimal value)
public int DecimalToInt(decimal value)
public long DecimalToInteger(decimal value)
public string DecimalToString(decimal value)
public bool DoubleToBoolean(double value)
public decimal DoubleToDecimal(double value)
public float DoubleToFloat(double value)
public int DoubleToInt(double value)
public long DoubleToInteger(double value)
public string DoubleToString(double value)
public TimeSpan DurationToDayTimeDuration(string value)
public string DurationToString(string value)
public TimeSpan DurationToYearMonthDuration(string value)
public bool FloatToBoolean(float value)
public decimal FloatToDecimal(float value)
public double FloatToDouble(float value)
public int FloatToInt(float value)
public long FloatToInteger(float value)
public string FloatToString(float value)
public string GDayToString(DateTime value)
public string GMonthDayToString(DateTime value)
public string GMonthToString(DateTime value)
public string GYearMonthToString(DateTime value)
public string GYearToString(DateTime value)
public string HexBinaryToString(Byte[] data)
public Byte[] HexBinaryToBase64Binary(Byte[] data)
public bool IntegerToBoolean(long value)
public decimal IntegerToDecimal(long value)
public double IntegerToDouble(long value)
public float IntegerToFloat(long value)
public int IntegerToInt(long value)
public string IntegerToString(long value)
public bool IntToBoolean(int value)
public decimal IntToDecimal(int value)
public double IntToDouble(int value)
public float IntToFloat(int value)
public long IntToInteger(int value)
public string IntToString(int value)
public string NonNegativeIntegerToString(decimal value)
public string NonPositiveIntegerToString(decimal value)
public DateTime TimeToDateTime(DateTime value)
public string TimeToString(DateTime value)
public string YearMonthDurationToDuration(TimeSpan value)
public string YearMonthDurationToString(TimeSpan value)
public string StringToAnyUri(string value)
public Byte[] StringToBase64Binary(string value)
public bool StringToBoolean(string value)
public DateTime StringToDate(string value)
public DateTime StringToDateTime(string value)
public TimeSpan StringToDayTimeDuration(string value)
public decimal StringToDecimal(string value)
public double StringToDouble(string value)
public string StringToDuration(string value)
public float StringToFloat(string value)
public DateTime StringToGDay(string value)
public DateTime StringToGMonth(string value)
public DateTime StringToGMonthDay(string value)
public DateTime StringToGYear(string value)
public DateTime StringToGYearMonth(string value)
public Byte[] StringToHexBinary(string value)
public int StringToInt(string value)
public long StringToInteger(string value)
public decimal StringToNonNegativeInteger(string value)
public decimal StringToNonPositiveInteger(string value)
public DateTime StringToTime(string value)
public long StringToUnsignedInt(string value)
public decimal StringToUnsignedLong(string value)
public int StringToUnsignedShort(string value)
public TimeSpan StringToYearMonthDuration(string value)
}
internal System.Xml.Xsl.IStaticXsltContext {
public Expression TryGetVariable(string nm)
public Expression TryGetFunction(XmlQualifiedName nm, FunctionArguments args)
public XmlQualifiedName LookupQName(string s)
public string LookupNamespace(string prefix)
}
public System.Xml.Xsl.IXsltContextFunction {
public XPathResultType[] ArgTypes
public int Maxargs
public int Minargs
public XPathResultType ReturnType
public XPathResultType[] get_ArgTypes()
public int get_Maxargs()
public int get_Minargs()
public XPathResultType get_ReturnType()
public object Invoke(XsltContext xsltContext, Object[] args, XPathNavigator docContext)
}
public System.Xml.Xsl.IXsltContextVariable {
public bool IsLocal
public bool IsParam
public XPathResultType VariableType
public bool get_IsLocal()
public bool get_IsParam()
public XPathResultType get_VariableType()
public object Evaluate(XsltContext xsltContext)
}
internal System.Xml.Xsl.NoOperationDebugger : object {
protected void OnCompile(XPathNavigator input)
protected void OnExecute(XPathNodeIterator currentNodeset, XPathNavigator style, XsltContext context)
}
internal System.Xml.Xsl.SimpleXsltDebugger : object {
public void OnCompile(XPathNavigator style)
public void OnExecute(XPathNodeIterator currentNodeSet, XPathNavigator style, XsltContext xsltContext)
private void PrintXPathNavigator(XPathNavigator nav)
}
public System.Xml.Xsl.XslCompiledTransform : object {
private bool enable_debug
private object debugger
private CompiledStylesheet s
private XmlWriterSettings output_settings
public XmlWriterSettings OutputSettings
public TempFileCollection TemporaryFiles
public void .ctor(bool enableDebug)
public XmlWriterSettings get_OutputSettings()
public TempFileCollection get_TemporaryFiles()
public void Transform(string inputfile, string outputfile)
public void Transform(string inputfile, XmlWriter output)
public void Transform(string inputfile, XsltArgumentList args, Stream output)
public void Transform(string inputfile, XsltArgumentList args, TextWriter output)
public void Transform(string inputfile, XsltArgumentList args, XmlWriter output)
public void Transform(XmlReader reader, XmlWriter output)
public void Transform(XmlReader reader, XsltArgumentList args, Stream output)
public void Transform(XmlReader reader, XsltArgumentList args, TextWriter output)
public void Transform(XmlReader reader, XsltArgumentList args, XmlWriter output)
public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output)
public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output)
public void Transform(IXPathNavigable input, XmlWriter output)
public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output)
public void Transform(XmlReader input, XsltArgumentList args, XmlWriter output, XmlResolver resolver)
private void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output, XmlResolver resolver)
private void Transform(XPathNavigator input, XsltArgumentList args, Stream output)
private void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output)
private XmlReader GetXmlReader(string url)
public void Load(string url)
public void Load(XmlReader stylesheet)
public void Load(IXPathNavigable stylesheet)
public void Load(IXPathNavigable stylesheet, XsltSettings settings, XmlResolver resolver)
public void Load(XmlReader stylesheet, XsltSettings settings, XmlResolver resolver)
public void Load(string stylesheet, XsltSettings settings, XmlResolver resolver)
private void Load(XPathNavigator stylesheet, XsltSettings settings, XmlResolver resolver)
}
public System.Xml.Xsl.XsltArgumentList : object {
internal Hashtable extensionObjects
internal Hashtable parameters
private XsltMessageEncounteredEventHandler XsltMessageEncountered
public void add_XsltMessageEncountered(XsltMessageEncounteredEventHandler value)
public void remove_XsltMessageEncountered(XsltMessageEncounteredEventHandler value)
public void AddExtensionObject(string namespaceUri, object extension)
public void AddParam(string name, string namespaceUri, object parameter)
public void Clear()
public object GetExtensionObject(string namespaceUri)
public object GetParam(string name, string namespaceUri)
public object RemoveExtensionObject(string namespaceUri)
public object RemoveParam(string name, string namespaceUri)
private object ValidateParam(object parameter)
}
public System.Xml.Xsl.XsltCompileException : XsltException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(Exception inner, string sourceUri, int lineNumber, int linePosition)
internal void .ctor(string message, Exception innerException, XPathNavigator nav)
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Xml.Xsl.XsltContext : XmlNamespaceManager {
public bool Whitespace
protected void .ctor(NameTable table)
public bool get_Whitespace()
public bool PreserveWhitespace(XPathNavigator nav)
public int CompareDocument(string baseUri, string nextbaseUri)
public IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] argTypes)
public IXsltContextVariable ResolveVariable(string prefix, string name)
internal IXsltContextVariable ResolveVariable(XmlQualifiedName name)
internal IXsltContextFunction ResolveFunction(XmlQualifiedName name, XPathResultType[] argTypes)
}
public System.Xml.Xsl.XsltException : SystemException {
private int lineNumber
private int linePosition
private string sourceUri
private string templateFrames
public int LineNumber
public int LinePosition
public string Message
public string SourceUri
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
internal void .ctor(string msgFormat, string message, Exception innerException, int lineNumber, int linePosition, string sourceUri)
internal void .ctor(string message, Exception innerException, XPathNavigator nav)
private string CreateMessage(string message, XPathNavigator nav)
private string CreateMessage(string msgFormat, string message, int lineNumber, int linePosition, string sourceUri)
public int get_LineNumber()
public int get_LinePosition()
public string get_Message()
public string get_SourceUri()
public void GetObjectData(SerializationInfo info, StreamingContext context)
internal void AddTemplateFrame(string frame)
}
public System.Xml.Xsl.XsltMessageEncounteredEventArgs : EventArgs {
public string Message
public string get_Message()
}
public System.Xml.Xsl.XsltMessageEncounteredEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, XsltMessageEncounteredEventArgs e)
public IAsyncResult BeginInvoke(object sender, XsltMessageEncounteredEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Xml.Xsl.XslTransform : object {
internal bool TemplateStackFrameError
internal TextWriter TemplateStackFrameOutput
private object debugger
private CompiledStylesheet s
private XmlResolver xmlResolver
private Dictionary`2<string, int> <>f__switch$map3D
public XmlResolver XmlResolver
internal void .ctor(object debugger)
private object GetDefaultDebugger()
public void set_XmlResolver(XmlResolver value)
public XmlReader Transform(IXPathNavigable input, XsltArgumentList args)
public XmlReader Transform(IXPathNavigable input, XsltArgumentList args, XmlResolver resolver)
public XmlReader Transform(XPathNavigator input, XsltArgumentList args)
public XmlReader Transform(XPathNavigator input, XsltArgumentList args, XmlResolver resolver)
public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output)
public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output, XmlResolver resolver)
public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output)
public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output, XmlResolver resolver)
public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output)
public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output, XmlResolver resolver)
public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output)
public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output, XmlResolver resolver)
public void Transform(XPathNavigator input, XsltArgumentList args, Stream output)
public void Transform(XPathNavigator input, XsltArgumentList args, Stream output, XmlResolver resolver)
public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output)
public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output, XmlResolver resolver)
public void Transform(string inputfile, string outputfile)
public void Transform(string inputfile, string outputfile, XmlResolver resolver)
public void Load(string url)
public void Load(string url, XmlResolver resolver)
public void Load(XmlReader stylesheet)
public void Load(XmlReader stylesheet, XmlResolver resolver)
public void Load(XPathNavigator stylesheet)
public void Load(XPathNavigator stylesheet, XmlResolver resolver)
public void Load(IXPathNavigable stylesheet)
public void Load(IXPathNavigable stylesheet, XmlResolver resolver)
public void Load(IXPathNavigable stylesheet, XmlResolver resolver, Evidence evidence)
public void Load(XPathNavigator stylesheet, XmlResolver resolver, Evidence evidence)
public void Load(XmlReader stylesheet, XmlResolver resolver, Evidence evidence)
}
public System.Xml.Xsl.XsltSettings : object {
private XsltSettings defaultSettings
private XsltSettings trustedXslt
private bool readOnly
private bool enableDocument
private bool enableScript
public XsltSettings Default
public XsltSettings TrustedXslt
public bool EnableDocumentFunction
public bool EnableScript
public void .ctor(bool enableDocumentFunction, bool enableScript)
private void .ctor(bool readOnly)
public XsltSettings get_Default()
public XsltSettings get_TrustedXslt()
public bool get_EnableDocumentFunction()
public void set_EnableDocumentFunction(bool value)
public bool get_EnableScript()
public void set_EnableScript(bool value)
}
