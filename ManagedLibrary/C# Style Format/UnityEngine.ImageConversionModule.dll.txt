[ExtensionAttribute]
[NativeHeaderAttribute("Modules/ImageConversion/ScriptBindings/ImageConversion.bindings.h")]
public static class UnityEngine.ImageConversion : object {
    public static bool EnableLegacyPngGammaRuntimeLoadBehavior { get; public set; }
    public static bool get_EnableLegacyPngGammaRuntimeLoadBehavior();
    public static void set_EnableLegacyPngGammaRuntimeLoadBehavior(bool value);
    [NativeMethodAttribute]
private static bool GetEnableLegacyPngGammaRuntimeLoadBehavior();
    [NativeMethodAttribute]
private static void SetEnableLegacyPngGammaRuntimeLoadBehavior(bool enable);
    [NativeMethodAttribute]
[ExtensionAttribute]
public static Byte[] EncodeToTGA(Texture2D tex);
    [NativeMethodAttribute]
[ExtensionAttribute]
public static Byte[] EncodeToPNG(Texture2D tex);
    [ExtensionAttribute]
[NativeMethodAttribute]
public static Byte[] EncodeToJPG(Texture2D tex, int quality);
    [ExtensionAttribute]
public static Byte[] EncodeToJPG(Texture2D tex);
    [ExtensionAttribute]
[NativeMethodAttribute]
public static Byte[] EncodeToEXR(Texture2D tex, EXRFlags flags);
    [ExtensionAttribute]
public static Byte[] EncodeToEXR(Texture2D tex);
    [NativeMethodAttribute]
[ExtensionAttribute]
public static bool LoadImage(Texture2D tex, Byte[] data, bool markNonReadable);
    [ExtensionAttribute]
public static bool LoadImage(Texture2D tex, Byte[] data);
    [FreeFunctionAttribute("ImageConversionBindings::EncodeArrayToTGA", "True")]
public static Byte[] EncodeArrayToTGA(Array array, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes);
    [FreeFunctionAttribute("ImageConversionBindings::EncodeArrayToPNG", "True")]
public static Byte[] EncodeArrayToPNG(Array array, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes);
    [FreeFunctionAttribute("ImageConversionBindings::EncodeArrayToJPG", "True")]
public static Byte[] EncodeArrayToJPG(Array array, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes, int quality);
    [FreeFunctionAttribute("ImageConversionBindings::EncodeArrayToEXR", "True")]
public static Byte[] EncodeArrayToEXR(Array array, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes, EXRFlags flags);
    public static NativeArray`1<byte> EncodeNativeArrayToTGA(NativeArray`1<T> input, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes);
    public static NativeArray`1<byte> EncodeNativeArrayToPNG(NativeArray`1<T> input, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes);
    public static NativeArray`1<byte> EncodeNativeArrayToJPG(NativeArray`1<T> input, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes, int quality);
    public static NativeArray`1<byte> EncodeNativeArrayToEXR(NativeArray`1<T> input, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes, EXRFlags flags);
    [FreeFunctionAttribute("ImageConversionBindings::UnsafeEncodeNativeArrayToTGA", "True")]
private static Void* UnsafeEncodeNativeArrayToTGA(Void* array, Int32& sizeInBytes, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes);
    [FreeFunctionAttribute("ImageConversionBindings::UnsafeEncodeNativeArrayToPNG", "True")]
private static Void* UnsafeEncodeNativeArrayToPNG(Void* array, Int32& sizeInBytes, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes);
    [FreeFunctionAttribute("ImageConversionBindings::UnsafeEncodeNativeArrayToJPG", "True")]
private static Void* UnsafeEncodeNativeArrayToJPG(Void* array, Int32& sizeInBytes, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes, int quality);
    [FreeFunctionAttribute("ImageConversionBindings::UnsafeEncodeNativeArrayToEXR", "True")]
private static Void* UnsafeEncodeNativeArrayToEXR(Void* array, Int32& sizeInBytes, GraphicsFormat format, UInt32 width, UInt32 height, UInt32 rowBytes, EXRFlags flags);
}
