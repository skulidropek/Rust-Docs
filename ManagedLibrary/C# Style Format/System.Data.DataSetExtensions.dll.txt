internal Consts : object {
public string MonoCorlibVersion
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal DataSetUtil : object {
private Type s_stackOverflowType
private Type s_outOfMemoryType
private Type s_threadAbortType
private Type s_nullReferenceType
private Type s_accessViolationType
private Type s_securityType
internal void CheckArgumentNull(T argumentValue, string argumentName)
private T TraceException(string trace, T e)
private T TraceExceptionAsReturnValue(T e)
internal ArgumentException Argument(string message)
internal ArgumentNullException ArgumentNull(string message)
internal ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName)
internal InvalidCastException InvalidCast(string message)
internal InvalidOperationException InvalidOperation(string message)
internal NotSupportedException NotSupported(string message)
internal ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value)
internal ArgumentOutOfRangeException InvalidDataRowState(DataRowState value)
internal ArgumentOutOfRangeException InvalidLoadOption(LoadOption value)
internal bool IsCatchableExceptionType(Exception e)
}
internal SR : object {
public string DataSetLinq_InvalidEnumerationValue
public string DataSetLinq_EmptyDataRowSource
public string DataSetLinq_NullDataRow
public string DataSetLinq_CannotLoadDetachedRow
public string DataSetLinq_CannotCompareDeletedRow
public string DataSetLinq_CannotLoadDeletedRow
public string DataSetLinq_NonNullableCast
}
public System.Data.DataRowComparer : object {
public DataRowComparer`1<DataRow> Default
public DataRowComparer`1<DataRow> get_Default()
internal bool AreEqual(object a, object b)
private bool AreElementEqual(object a, object b)
private bool CompareArray(Array a, Array b)
private bool CompareEquatableArray(TElem[] a, TElem[] b)
}
public System.Data.DataRowComparer`1 : object {
private DataRowComparer`1<TRow> s_instance
public DataRowComparer`1<TRow> Default
public DataRowComparer`1<TRow> get_Default()
public bool Equals(TRow leftRow, TRow rightRow)
public int GetHashCode(TRow row)
}
public System.Data.DataRowExtensions : object {
public T Field(DataRow row, string columnName)
public T Field(DataRow row, DataColumn column)
public T Field(DataRow row, int columnIndex)
public T Field(DataRow row, int columnIndex, DataRowVersion version)
public T Field(DataRow row, string columnName, DataRowVersion version)
public T Field(DataRow row, DataColumn column, DataRowVersion version)
public void SetField(DataRow row, int columnIndex, T value)
public void SetField(DataRow row, string columnName, T value)
public void SetField(DataRow row, DataColumn column, T value)
}
public System.Data.DataTableExtensions : object {
public EnumerableRowCollection`1<DataRow> AsEnumerable(DataTable source)
public DataTable CopyToDataTable(IEnumerable`1<T> source)
public void CopyToDataTable(IEnumerable`1<T> source, DataTable table, LoadOption options)
public void CopyToDataTable(IEnumerable`1<T> source, DataTable table, LoadOption options, FillErrorEventHandler errorHandler)
private DataTable LoadTableFromEnumerable(IEnumerable`1<T> source, DataTable table, Nullable`1<LoadOption> options, FillErrorEventHandler errorHandler)
public DataView AsDataView(DataTable table)
public DataView AsDataView(EnumerableRowCollection`1<T> source)
}
public System.Data.EnumerableRowCollection : object {
internal Type ElementType
internal DataTable Table
internal Type get_ElementType()
internal DataTable get_Table()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public System.Data.EnumerableRowCollection`1 : EnumerableRowCollection {
private DataTable _table
private IEnumerable`1<TRow> _enumerableRows
private List`1<Func`2<TRow, bool>> _listOfPredicates
private SortExpressionBuilder`1<TRow> _sortExpression
private Func`2<TRow, TRow> _selector
internal Type ElementType
internal IEnumerable`1<TRow> EnumerableRows
internal DataTable Table
internal Type get_ElementType()
internal IEnumerable`1<TRow> get_EnumerableRows()
internal DataTable get_Table()
internal void .ctor(IEnumerable`1<TRow> enumerableRows, bool isDataViewable, DataTable table)
internal void .ctor(DataTable table)
internal void .ctor(EnumerableRowCollection`1<TRow> source, IEnumerable`1<TRow> enumerableRows, Func`2<TRow, TRow> selector)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public IEnumerator`1<TRow> GetEnumerator()
internal void AddPredicate(Func`2<TRow, bool> pred)
internal void AddSortExpression(Func`2<TRow, TKey> keySelector, bool isDescending, bool isOrderBy)
internal void AddSortExpression(Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer, bool isDescending, bool isOrderBy)
}
public System.Data.EnumerableRowCollectionExtensions : object {
public EnumerableRowCollection`1<TRow> Where(EnumerableRowCollection`1<TRow> source, Func`2<TRow, bool> predicate)
public OrderedEnumerableRowCollection`1<TRow> OrderBy(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector)
public OrderedEnumerableRowCollection`1<TRow> OrderBy(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer)
public OrderedEnumerableRowCollection`1<TRow> OrderByDescending(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector)
public OrderedEnumerableRowCollection`1<TRow> OrderByDescending(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer)
public OrderedEnumerableRowCollection`1<TRow> ThenBy(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector)
public OrderedEnumerableRowCollection`1<TRow> ThenBy(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer)
public OrderedEnumerableRowCollection`1<TRow> ThenByDescending(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector)
public OrderedEnumerableRowCollection`1<TRow> ThenByDescending(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer)
public EnumerableRowCollection`1<S> Select(EnumerableRowCollection`1<TRow> source, Func`2<TRow, S> selector)
public EnumerableRowCollection`1<TResult> Cast(EnumerableRowCollection source)
}
public System.Data.OrderedEnumerableRowCollection`1 : EnumerableRowCollection`1<TRow> {
internal void .ctor(EnumerableRowCollection`1<TRow> enumerableTable, IEnumerable`1<TRow> enumerableRows)
}
internal System.Data.SortExpressionBuilder`1 : object {
private LinkedList`1<Func`2<T, object>> _selectors
private LinkedList`1<Comparison`1<object>> _comparers
private LinkedListNode`1<Func`2<T, object>> _currentSelector
private LinkedListNode`1<Comparison`1<object>> _currentComparer
internal int Count
internal void Add(Func`2<T, object> keySelector, Comparison`1<object> compare, bool isOrderBy)
public List`1<object> Select(T row)
public int Compare(List`1<object> a, List`1<object> b)
internal int get_Count()
internal SortExpressionBuilder`1<T> Clone()
internal SortExpressionBuilder`1<TResult> CloneCast()
}
public System.Data.TypedTableBase`1 : DataTable {
protected void .ctor(SerializationInfo info, StreamingContext context)
public IEnumerator`1<T> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public EnumerableRowCollection`1<TResult> Cast()
}
public System.Data.TypedTableBaseExtensions : object {
public EnumerableRowCollection`1<TRow> Where(TypedTableBase`1<TRow> source, Func`2<TRow, bool> predicate)
public OrderedEnumerableRowCollection`1<TRow> OrderBy(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector)
public OrderedEnumerableRowCollection`1<TRow> OrderBy(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer)
public OrderedEnumerableRowCollection`1<TRow> OrderByDescending(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector)
public OrderedEnumerableRowCollection`1<TRow> OrderByDescending(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer)
public EnumerableRowCollection`1<S> Select(TypedTableBase`1<TRow> source, Func`2<TRow, S> selector)
public EnumerableRowCollection`1<TRow> AsEnumerable(TypedTableBase`1<TRow> source)
public TRow ElementAtOrDefault(TypedTableBase`1<TRow> source, int index)
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
