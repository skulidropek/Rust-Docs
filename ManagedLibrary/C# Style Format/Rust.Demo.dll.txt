public Rust.Demo.Defines : object {
public string Ident
}
public Rust.Demo.Indexer : object {
private List`1<Keyframe> keyframes
private long LastPacketTime
private long PacketCount
private Dictionary`2<UInt32, Entity> currentEnts
private long NextKeyframe
private List`1<UInt32> Updated
public TimeSpan TotalLength
public long Interval
public TimeSpan get_TotalLength()
public long get_Interval()
internal void .ctor(Reader reader)
private void ProcessPacket(Packet packet)
private void EntityUpdated(UInt32 ent)
private void EntityPosition(BinaryReader reader)
private void RpcMessage(BinaryReader reader)
internal Keyframe LookupKeyframeForTime(long time)
internal Keyframe GetKeyframe(int index)
internal HashSet`1<UInt32> GetChangedEntities(long from, long to)
private void EntityDestroy(BinaryReader reader)
private void Entities(BinaryReader reader)
private void TryCreateKeyframe(Packet packet)
}
internal Rust.Demo.MessageType : Enum {
public byte value__
public MessageType Welcome
public MessageType Auth
public MessageType Approved
public MessageType Ready
public MessageType Entities
public MessageType EntityDestroy
public MessageType GroupChange
public MessageType GroupDestroy
public MessageType RPCMessage
public MessageType EntityPosition
public MessageType ConsoleMessage
public MessageType ConsoleCommand
public MessageType Effect
public MessageType DisconnectReason
public MessageType Tick
public MessageType Message
public MessageType RequestUserInformation
public MessageType GiveUserInformation
public MessageType GroupEnter
public MessageType GroupLeave
public MessageType VoiceData
public MessageType EAC
public MessageType EntityFlags
public MessageType Last
}
public Rust.Demo.Packet : ValueType {
public long Position
public int Size
public long Time
public Byte[] Data
public bool isValid
public bool get_isValid()
}
public Rust.Demo.PlaybackStats : object {
public int Frames
public int Packets
public TimeSpan TotalTime
public TimeSpan DemoLength
public void Reset()
}
public Rust.Demo.Reader : object {
private Reader <Active>k__BackingField
private Stream stream
private BinaryReader reader
private string <Name>k__BackingField
private long <CurrentTime>k__BackingField
private Indexer <Index>k__BackingField
private DemoHeader <Header>k__BackingField
public Action`2<Keyframe, HashSet`1<UInt32>> OnScrubToKeyframe
private long <startPosition>k__BackingField
private bool <IsPaused>k__BackingField
public Reader Active
public string Name
public long CurrentTime
public Indexer Index
public DemoHeader Header
private long startPosition
public bool IsFinished
public bool IsPaused
public Reader get_Active()
internal void set_Active(Reader value)
public string get_Name()
private void set_Name(string value)
public long get_CurrentTime()
private void set_CurrentTime(long value)
public Indexer get_Index()
private void set_Index(Indexer value)
public DemoHeader get_Header()
private void set_Header(DemoHeader value)
private long get_startPosition()
private void set_startPosition(long value)
public void Play()
public void Pause()
public void .ctor(string name, Stream stream)
public void SetActive()
public void JumpTo(long time)
public void CreateIndex()
private void ReadHeader()
public bool get_IsFinished()
public bool get_IsPaused()
internal void set_IsPaused(bool value)
public Reader FromFile(string filename)
public void Stop()
public void Progress(long timeAmountMs)
public void ResetToStart()
public Packet ReadPacket()
}
