public UnityEngine.AdditionalCanvasShaderChannels : Enum {
public int value__
public AdditionalCanvasShaderChannels None
public AdditionalCanvasShaderChannels TexCoord1
public AdditionalCanvasShaderChannels TexCoord2
public AdditionalCanvasShaderChannels TexCoord3
public AdditionalCanvasShaderChannels Normal
public AdditionalCanvasShaderChannels Tangent
}
public UnityEngine.Canvas : Behaviour {
private WillRenderCanvases preWillRenderCanvases
private WillRenderCanvases willRenderCanvases
private Action`1<int> <externBeginRenderOverlays>k__BackingField
private Action`2<int, int> <externRenderOverlaysBefore>k__BackingField
private Action`1<int> <externEndRenderOverlays>k__BackingField
public RenderMode renderMode
public bool isRootCanvas
public Rect pixelRect
public float scaleFactor
public float referencePixelsPerUnit
public bool overridePixelPerfect
public bool vertexColorAlwaysGammaSpace
public bool pixelPerfect
public float planeDistance
public int renderOrder
public bool overrideSorting
public int sortingOrder
public int targetDisplay
public int sortingLayerID
public int cachedSortingLayerValue
public AdditionalCanvasShaderChannels additionalShaderChannels
public string sortingLayerName
public Canvas rootCanvas
public Vector2 renderingDisplaySize
public StandaloneRenderResize updateRectTransformForStandalone
internal Action`1<int> externBeginRenderOverlays
internal Action`2<int, int> externRenderOverlaysBefore
internal Action`1<int> externEndRenderOverlays
public Camera worldCamera
public float normalizedSortingGridSize
public int sortingGridNormalizedSize
public void add_preWillRenderCanvases(WillRenderCanvases value)
public void remove_preWillRenderCanvases(WillRenderCanvases value)
public void add_willRenderCanvases(WillRenderCanvases value)
public void remove_willRenderCanvases(WillRenderCanvases value)
public RenderMode get_renderMode()
public void set_renderMode(RenderMode value)
public bool get_isRootCanvas()
public Rect get_pixelRect()
public float get_scaleFactor()
public void set_scaleFactor(float value)
public float get_referencePixelsPerUnit()
public void set_referencePixelsPerUnit(float value)
public bool get_overridePixelPerfect()
public void set_overridePixelPerfect(bool value)
public bool get_vertexColorAlwaysGammaSpace()
public void set_vertexColorAlwaysGammaSpace(bool value)
public bool get_pixelPerfect()
public void set_pixelPerfect(bool value)
public float get_planeDistance()
public void set_planeDistance(float value)
public int get_renderOrder()
public bool get_overrideSorting()
public void set_overrideSorting(bool value)
public int get_sortingOrder()
public void set_sortingOrder(int value)
public int get_targetDisplay()
public void set_targetDisplay(int value)
public int get_sortingLayerID()
public void set_sortingLayerID(int value)
public int get_cachedSortingLayerValue()
public AdditionalCanvasShaderChannels get_additionalShaderChannels()
public void set_additionalShaderChannels(AdditionalCanvasShaderChannels value)
public string get_sortingLayerName()
public void set_sortingLayerName(string value)
public Canvas get_rootCanvas()
public Vector2 get_renderingDisplaySize()
public StandaloneRenderResize get_updateRectTransformForStandalone()
public void set_updateRectTransformForStandalone(StandaloneRenderResize value)
internal Action`1<int> get_externBeginRenderOverlays()
internal void set_externBeginRenderOverlays(Action`1<int> value)
internal Action`2<int, int> get_externRenderOverlaysBefore()
internal void set_externRenderOverlaysBefore(Action`2<int, int> value)
internal Action`1<int> get_externEndRenderOverlays()
internal void set_externEndRenderOverlays(Action`1<int> value)
internal void SetExternalCanvasEnabled(bool enabled)
public Camera get_worldCamera()
public void set_worldCamera(Camera value)
public float get_normalizedSortingGridSize()
public void set_normalizedSortingGridSize(float value)
public int get_sortingGridNormalizedSize()
public void set_sortingGridNormalizedSize(int value)
public Material GetDefaultCanvasTextMaterial()
public Material GetDefaultCanvasMaterial()
public Material GetETC1SupportedCanvasMaterial()
internal void UpdateCanvasRectTransform(bool alignWithCamera)
public void ForceUpdateCanvases()
private void SendPreWillRenderCanvases()
private void SendWillRenderCanvases()
private void BeginRenderExtraOverlays(int displayIndex)
private void RenderExtraOverlaysBefore(int displayIndex, int sortingOrder)
private void EndRenderExtraOverlays(int displayIndex)
private void get_pixelRect_Injected(Rect& ret)
private void get_renderingDisplaySize_Injected(Vector2& ret)
}
public UnityEngine.CanvasGroup : Behaviour {
public float alpha
public bool interactable
public bool blocksRaycasts
public bool ignoreParentGroups
public float get_alpha()
public void set_alpha(float value)
public bool get_interactable()
public void set_interactable(bool value)
public bool get_blocksRaycasts()
public void set_blocksRaycasts(bool value)
public bool get_ignoreParentGroups()
public void set_ignoreParentGroups(bool value)
public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
}
public UnityEngine.CanvasRenderer : Component {
private bool <isMask>k__BackingField
public bool hasPopInstruction
public int materialCount
public int popMaterialCount
public int absoluteDepth
public bool hasMoved
public bool cullTransparentMesh
public bool hasRectClipping
public int relativeDepth
public bool cull
public bool isMask
public Vector2 clippingSoftness
public bool get_hasPopInstruction()
public void set_hasPopInstruction(bool value)
public int get_materialCount()
public void set_materialCount(int value)
public int get_popMaterialCount()
public void set_popMaterialCount(int value)
public int get_absoluteDepth()
public bool get_hasMoved()
public bool get_cullTransparentMesh()
public void set_cullTransparentMesh(bool value)
public bool get_hasRectClipping()
public int get_relativeDepth()
public bool get_cull()
public void set_cull(bool value)
public bool get_isMask()
public void set_isMask(bool value)
public void SetColor(Color color)
public Color GetColor()
public void EnableRectClipping(Rect rect)
public Vector2 get_clippingSoftness()
public void set_clippingSoftness(Vector2 value)
public void DisableRectClipping()
public void SetMaterial(Material material, int index)
public Material GetMaterial(int index)
public void SetPopMaterial(Material material, int index)
public Material GetPopMaterial(int index)
public void SetTexture(Texture texture)
public void SetAlphaTexture(Texture texture)
public void SetMesh(Mesh mesh)
public Mesh GetMesh()
public void Clear()
public float GetAlpha()
public void SetAlpha(float alpha)
public float GetInheritedAlpha()
public void SetMaterial(Material material, Texture texture)
public Material GetMaterial()
public void SplitUIVertexStreams(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
public void SplitUIVertexStreams(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector4> uv2S, List`1<Vector4> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
public void CreateUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
public void CreateUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector4> uv2S, List`1<Vector4> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
public void AddUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents)
public void AddUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector4> uv2S, List`1<Vector4> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents)
public void SetVertices(List`1<UIVertex> vertices)
public void SetVertices(UIVertex[] vertices, int size)
private void SplitIndicesStreamsInternal(object verts, object indices)
private void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents)
private void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices)
private void SetColor_Injected(Color& color)
private void GetColor_Injected(Color& ret)
private void EnableRectClipping_Injected(Rect& rect)
private void get_clippingSoftness_Injected(Vector2& ret)
private void set_clippingSoftness_Injected(Vector2& value)
}
public UnityEngine.ICanvasRaycastFilter {
public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
}
public UnityEngine.RectTransformUtility : object {
private Vector3[] s_Corners
public Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas)
public Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas)
private bool PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam, Vector4 offset)
public bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint)
public bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam)
public bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam, Vector4 offset)
public bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, Vector3& worldPoint)
public bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, Vector2& localPoint)
public Ray ScreenPointToRay(Camera cam, Vector2 screenPos)
public Vector2 WorldToScreenPoint(Camera cam, Vector3 worldPoint)
public Bounds CalculateRelativeRectTransformBounds(Transform root, Transform child)
public Bounds CalculateRelativeRectTransformBounds(Transform trans)
public void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive)
public void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive)
private Vector2 GetTransposed(Vector2 input)
private void PixelAdjustPoint_Injected(Vector2& point, Transform elementTransform, Canvas canvas, Vector2& ret)
private void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, Rect& ret)
private bool PointInRectangle_Injected(Vector2& screenPoint, RectTransform rect, Camera cam, Vector4& offset)
}
public UnityEngine.RenderMode : Enum {
public int value__
public RenderMode ScreenSpaceOverlay
public RenderMode ScreenSpaceCamera
public RenderMode WorldSpace
}
public UnityEngine.StandaloneRenderResize : Enum {
public int value__
public StandaloneRenderResize Enabled
public StandaloneRenderResize Disabled
}
public UnityEngine.UISystemProfilerApi : object {
public void BeginSample(SampleType type)
public void EndSample(SampleType type)
public void AddMarker(string name, Object obj)
}
