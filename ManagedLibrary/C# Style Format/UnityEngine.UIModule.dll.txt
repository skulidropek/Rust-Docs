[FlagsAttribute]
public enum UnityEngine.AdditionalCanvasShaderChannels : Enum {
    public int value__;
    public static AdditionalCanvasShaderChannels None;
    public static AdditionalCanvasShaderChannels TexCoord1;
    public static AdditionalCanvasShaderChannels TexCoord2;
    public static AdditionalCanvasShaderChannels TexCoord3;
    public static AdditionalCanvasShaderChannels Normal;
    public static AdditionalCanvasShaderChannels Tangent;
}
[NativeHeaderAttribute("Modules/UI/UIStructs.h")]
[NativeHeaderAttribute("Modules/UI/Canvas.h")]
[NativeHeaderAttribute("Modules/UI/CanvasManager.h")]
[NativeClassAttribute("UI::Canvas")]
[RequireComponent("UnityEngine.RectTransform")]
public class UnityEngine.Canvas : Behaviour {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static WillRenderCanvases preWillRenderCanvases;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static WillRenderCanvases willRenderCanvases;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`1<int> <externBeginRenderOverlays>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`2<int, int> <externRenderOverlaysBefore>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`1<int> <externEndRenderOverlays>k__BackingField;
    public RenderMode renderMode { get; public set; }
    public bool isRootCanvas { get; }
    public Rect pixelRect { get; }
    public float scaleFactor { get; public set; }
    public float referencePixelsPerUnit { get; public set; }
    public bool overridePixelPerfect { get; public set; }
    public bool vertexColorAlwaysGammaSpace { get; public set; }
    public bool pixelPerfect { get; public set; }
    public float planeDistance { get; public set; }
    public int renderOrder { get; }
    public bool overrideSorting { get; public set; }
    public int sortingOrder { get; public set; }
    public int targetDisplay { get; public set; }
    public int sortingLayerID { get; public set; }
    public int cachedSortingLayerValue { get; }
    public AdditionalCanvasShaderChannels additionalShaderChannels { get; public set; }
    public string sortingLayerName { get; public set; }
    public Canvas rootCanvas { get; }
    public Vector2 renderingDisplaySize { get; }
    public StandaloneRenderResize updateRectTransformForStandalone { get; public set; }
    internal static Action`1<int> externBeginRenderOverlays { get; internal set; }
    internal static Action`2<int, int> externRenderOverlaysBefore { get; internal set; }
    internal static Action`1<int> externEndRenderOverlays { get; internal set; }
    [NativePropertyAttribute("Camera", "False", "0")]
public Camera worldCamera { get; public set; }
    [NativePropertyAttribute("SortingBucketNormalizedSize", "False", "0")]
public float normalizedSortingGridSize { get; public set; }
    [NativePropertyAttribute("SortingBucketNormalizedSize", "False", "0")]
[ObsoleteAttribute("Setting normalizedSize via a int is not supported. Please use normalizedSortingGridSize", "False")]
public int sortingGridNormalizedSize { get; public set; }
    [CompilerGeneratedAttribute]
public static void add_preWillRenderCanvases(WillRenderCanvases value);
    [CompilerGeneratedAttribute]
public static void remove_preWillRenderCanvases(WillRenderCanvases value);
    [CompilerGeneratedAttribute]
public static void add_willRenderCanvases(WillRenderCanvases value);
    [CompilerGeneratedAttribute]
public static void remove_willRenderCanvases(WillRenderCanvases value);
    public RenderMode get_renderMode();
    public void set_renderMode(RenderMode value);
    public bool get_isRootCanvas();
    public Rect get_pixelRect();
    public float get_scaleFactor();
    public void set_scaleFactor(float value);
    public float get_referencePixelsPerUnit();
    public void set_referencePixelsPerUnit(float value);
    public bool get_overridePixelPerfect();
    public void set_overridePixelPerfect(bool value);
    public bool get_vertexColorAlwaysGammaSpace();
    public void set_vertexColorAlwaysGammaSpace(bool value);
    public bool get_pixelPerfect();
    public void set_pixelPerfect(bool value);
    public float get_planeDistance();
    public void set_planeDistance(float value);
    public int get_renderOrder();
    public bool get_overrideSorting();
    public void set_overrideSorting(bool value);
    public int get_sortingOrder();
    public void set_sortingOrder(int value);
    public int get_targetDisplay();
    public void set_targetDisplay(int value);
    public int get_sortingLayerID();
    public void set_sortingLayerID(int value);
    public int get_cachedSortingLayerValue();
    public AdditionalCanvasShaderChannels get_additionalShaderChannels();
    public void set_additionalShaderChannels(AdditionalCanvasShaderChannels value);
    public string get_sortingLayerName();
    public void set_sortingLayerName(string value);
    public Canvas get_rootCanvas();
    public Vector2 get_renderingDisplaySize();
    public StandaloneRenderResize get_updateRectTransformForStandalone();
    public void set_updateRectTransformForStandalone(StandaloneRenderResize value);
    [CompilerGeneratedAttribute]
internal static Action`1<int> get_externBeginRenderOverlays();
    [CompilerGeneratedAttribute]
internal static void set_externBeginRenderOverlays(Action`1<int> value);
    [CompilerGeneratedAttribute]
internal static Action`2<int, int> get_externRenderOverlaysBefore();
    [CompilerGeneratedAttribute]
internal static void set_externRenderOverlaysBefore(Action`2<int, int> value);
    [CompilerGeneratedAttribute]
internal static Action`1<int> get_externEndRenderOverlays();
    [CompilerGeneratedAttribute]
internal static void set_externEndRenderOverlays(Action`1<int> value);
    [FreeFunctionAttribute("UI::CanvasManager::SetExternalCanvasEnabled")]
internal static void SetExternalCanvasEnabled(bool enabled);
    public Camera get_worldCamera();
    public void set_worldCamera(Camera value);
    public float get_normalizedSortingGridSize();
    public void set_normalizedSortingGridSize(float value);
    public int get_sortingGridNormalizedSize();
    public void set_sortingGridNormalizedSize(int value);
    [FreeFunctionAttribute("UI::GetDefaultUIMaterial")]
[ObsoleteAttribute("Shared default material now used for text and general UI elements, call Canvas.GetDefaultCanvasMaterial()", "False")]
public static Material GetDefaultCanvasTextMaterial();
    [FreeFunctionAttribute("UI::GetDefaultUIMaterial")]
public static Material GetDefaultCanvasMaterial();
    [FreeFunctionAttribute("UI::GetETC1SupportedCanvasMaterial")]
public static Material GetETC1SupportedCanvasMaterial();
    internal void UpdateCanvasRectTransform(bool alignWithCamera);
    public static void ForceUpdateCanvases();
    [RequiredByNativeCodeAttribute]
private static void SendPreWillRenderCanvases();
    [RequiredByNativeCodeAttribute]
private static void SendWillRenderCanvases();
    [RequiredByNativeCodeAttribute]
private static void BeginRenderExtraOverlays(int displayIndex);
    [RequiredByNativeCodeAttribute]
private static void RenderExtraOverlaysBefore(int displayIndex, int sortingOrder);
    [RequiredByNativeCodeAttribute]
private static void EndRenderExtraOverlays(int displayIndex);
    private void get_pixelRect_Injected(Rect& ret);
    private void get_renderingDisplaySize_Injected(Vector2& ret);
}
[NativeHeaderAttribute("Modules/UI/CanvasGroup.h")]
[NativeClassAttribute("UI::CanvasGroup")]
public class UnityEngine.CanvasGroup : Behaviour {
    [NativePropertyAttribute("Alpha", "False", "0")]
public float alpha { get; public set; }
    [NativePropertyAttribute("Interactable", "False", "0")]
public bool interactable { get; public set; }
    [NativePropertyAttribute("BlocksRaycasts", "False", "0")]
public bool blocksRaycasts { get; public set; }
    [NativePropertyAttribute("IgnoreParentGroups", "False", "0")]
public bool ignoreParentGroups { get; public set; }
    public float get_alpha();
    public void set_alpha(float value);
    public bool get_interactable();
    public void set_interactable(bool value);
    public bool get_blocksRaycasts();
    public void set_blocksRaycasts(bool value);
    public bool get_ignoreParentGroups();
    public void set_ignoreParentGroups(bool value);
    public sealed virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera);
}
[NativeHeaderAttribute("Modules/UI/CanvasRenderer.h")]
[NativeClassAttribute("UI::CanvasRenderer")]
public class UnityEngine.CanvasRenderer : Component {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <isMask>k__BackingField;
    public bool hasPopInstruction { get; public set; }
    public int materialCount { get; public set; }
    public int popMaterialCount { get; public set; }
    public int absoluteDepth { get; }
    public bool hasMoved { get; }
    public bool cullTransparentMesh { get; public set; }
    [NativePropertyAttribute("RectClipping", "False", "0")]
public bool hasRectClipping { get; }
    [NativePropertyAttribute("Depth", "False", "0")]
public int relativeDepth { get; }
    [NativePropertyAttribute("ShouldCull", "False", "0")]
public bool cull { get; public set; }
    [ObsoleteAttribute("isMask is no longer supported.See EnableClipping for vertex clipping configuration", "False")]
public bool isMask { get; public set; }
    public Vector2 clippingSoftness { get; public set; }
    public bool get_hasPopInstruction();
    public void set_hasPopInstruction(bool value);
    public int get_materialCount();
    public void set_materialCount(int value);
    public int get_popMaterialCount();
    public void set_popMaterialCount(int value);
    public int get_absoluteDepth();
    public bool get_hasMoved();
    public bool get_cullTransparentMesh();
    public void set_cullTransparentMesh(bool value);
    public bool get_hasRectClipping();
    public int get_relativeDepth();
    public bool get_cull();
    public void set_cull(bool value);
    [CompilerGeneratedAttribute]
public bool get_isMask();
    [CompilerGeneratedAttribute]
public void set_isMask(bool value);
    public void SetColor(Color color);
    public Color GetColor();
    public void EnableRectClipping(Rect rect);
    public Vector2 get_clippingSoftness();
    public void set_clippingSoftness(Vector2 value);
    public void DisableRectClipping();
    public void SetMaterial(Material material, int index);
    public Material GetMaterial(int index);
    public void SetPopMaterial(Material material, int index);
    public Material GetPopMaterial(int index);
    public void SetTexture(Texture texture);
    public void SetAlphaTexture(Texture texture);
    public void SetMesh(Mesh mesh);
    public Mesh GetMesh();
    public void Clear();
    public float GetAlpha();
    public void SetAlpha(float alpha);
    public float GetInheritedAlpha();
    public void SetMaterial(Material material, Texture texture);
    public Material GetMaterial();
    public static void SplitUIVertexStreams(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices);
    public static void SplitUIVertexStreams(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector4> uv2S, List`1<Vector4> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices);
    public static void CreateUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices);
    public static void CreateUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector4> uv2S, List`1<Vector4> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices);
    public static void AddUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents);
    public static void AddUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector4> uv0S, List`1<Vector4> uv1S, List`1<Vector4> uv2S, List`1<Vector4> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents);
    [ObsoleteAttribute("UI System now uses meshes.Generate a mesh and use 'SetMesh' instead", "False")]
public void SetVertices(List`1<UIVertex> vertices);
    [ObsoleteAttribute("UI System now uses meshes.Generate a mesh and use 'SetMesh' instead", "False")]
public void SetVertices(UIVertex[] vertices, int size);
    [StaticAccessorAttribute("UI", "2")]
private static void SplitIndicesStreamsInternal(object verts, object indices);
    [StaticAccessorAttribute("UI", "2")]
private static void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents);
    [StaticAccessorAttribute("UI", "2")]
private static void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices);
    private void SetColor_Injected(Color& color);
    private void GetColor_Injected(Color& ret);
    private void EnableRectClipping_Injected(Rect& rect);
    private void get_clippingSoftness_Injected(Vector2& ret);
    private void set_clippingSoftness_Injected(Vector2& value);
}
public interface UnityEngine.ICanvasRaycastFilter {
    public abstract virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera);
}
[StaticAccessorAttribute("UI", "2")]
[NativeHeaderAttribute("Runtime/Transform/RectTransform.h")]
[NativeHeaderAttribute("Modules/UI/RectTransformUtil.h")]
[NativeHeaderAttribute("Modules/UI/Canvas.h")]
[NativeHeaderAttribute("Runtime/Camera/Camera.h")]
public class UnityEngine.RectTransformUtility : object {
    private static Vector3[] s_Corners;
    private static RectTransformUtility();
    public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas);
    public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas);
    private static bool PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam, Vector4 offset);
    public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint);
    public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam);
    public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam, Vector4 offset);
    public static bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, Vector3& worldPoint);
    public static bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, Vector2& localPoint);
    public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos);
    public static Vector2 WorldToScreenPoint(Camera cam, Vector3 worldPoint);
    public static Bounds CalculateRelativeRectTransformBounds(Transform root, Transform child);
    public static Bounds CalculateRelativeRectTransformBounds(Transform trans);
    public static void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive);
    public static void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive);
    private static Vector2 GetTransposed(Vector2 input);
    private static void PixelAdjustPoint_Injected(Vector2& point, Transform elementTransform, Canvas canvas, Vector2& ret);
    private static void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, Rect& ret);
    private static bool PointInRectangle_Injected(Vector2& screenPoint, RectTransform rect, Camera cam, Vector4& offset);
}
public enum UnityEngine.RenderMode : Enum {
    public int value__;
    public static RenderMode ScreenSpaceOverlay;
    public static RenderMode ScreenSpaceCamera;
    public static RenderMode WorldSpace;
}
public enum UnityEngine.StandaloneRenderResize : Enum {
    public int value__;
    public static StandaloneRenderResize Enabled;
    public static StandaloneRenderResize Disabled;
}
[StaticAccessorAttribute("UI::SystemProfilerApi", "2")]
[IgnoredByDeepProfilerAttribute]
[NativeHeaderAttribute("Modules/UI/Canvas.h")]
public static class UnityEngine.UISystemProfilerApi : object {
    public static void BeginSample(SampleType type);
    public static void EndSample(SampleType type);
    public static void AddMarker(string name, Object obj);
}
