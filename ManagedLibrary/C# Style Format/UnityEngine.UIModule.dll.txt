public UnityEngine.AdditionalCanvasShaderChannels : Enum {
public int value__
public AdditionalCanvasShaderChannels None
public AdditionalCanvasShaderChannels TexCoord1
public AdditionalCanvasShaderChannels TexCoord2
public AdditionalCanvasShaderChannels TexCoord3
public AdditionalCanvasShaderChannels Normal
public AdditionalCanvasShaderChannels Tangent
}
public UnityEngine.Canvas : Behaviour {
private WillRenderCanvases willRenderCanvases
public RenderMode renderMode
public bool isRootCanvas
public Camera worldCamera
public Rect pixelRect
public float scaleFactor
public float referencePixelsPerUnit
public bool overridePixelPerfect
public bool pixelPerfect
public float planeDistance
public int renderOrder
public bool overrideSorting
public int sortingOrder
public int targetDisplay
public int sortingGridNormalizedSize
public float normalizedSortingGridSize
public int sortingLayerID
public int cachedSortingLayerValue
public AdditionalCanvasShaderChannels additionalShaderChannels
public string sortingLayerName
public Canvas rootCanvas
public RenderMode get_renderMode()
public void set_renderMode(RenderMode value)
public bool get_isRootCanvas()
public Camera get_worldCamera()
public void set_worldCamera(Camera value)
public Rect get_pixelRect()
private void INTERNAL_get_pixelRect(Rect& value)
public float get_scaleFactor()
public void set_scaleFactor(float value)
public float get_referencePixelsPerUnit()
public void set_referencePixelsPerUnit(float value)
public bool get_overridePixelPerfect()
public void set_overridePixelPerfect(bool value)
public bool get_pixelPerfect()
public void set_pixelPerfect(bool value)
public float get_planeDistance()
public void set_planeDistance(float value)
public int get_renderOrder()
public bool get_overrideSorting()
public void set_overrideSorting(bool value)
public int get_sortingOrder()
public void set_sortingOrder(int value)
public int get_targetDisplay()
public void set_targetDisplay(int value)
public int get_sortingGridNormalizedSize()
public void set_sortingGridNormalizedSize(int value)
public float get_normalizedSortingGridSize()
public void set_normalizedSortingGridSize(float value)
public int get_sortingLayerID()
public void set_sortingLayerID(int value)
public int get_cachedSortingLayerValue()
public AdditionalCanvasShaderChannels get_additionalShaderChannels()
public void set_additionalShaderChannels(AdditionalCanvasShaderChannels value)
public string get_sortingLayerName()
public void set_sortingLayerName(string value)
public Canvas get_rootCanvas()
public Material GetDefaultCanvasMaterial()
public Material GetETC1SupportedCanvasMaterial()
public Material GetDefaultCanvasTextMaterial()
public void add_willRenderCanvases(WillRenderCanvases value)
public void remove_willRenderCanvases(WillRenderCanvases value)
private void SendWillRenderCanvases()
public void ForceUpdateCanvases()
}
public UnityEngine.CanvasGroup : Component {
public float alpha
public bool interactable
public bool blocksRaycasts
public bool ignoreParentGroups
public float get_alpha()
public void set_alpha(float value)
public bool get_interactable()
public void set_interactable(bool value)
public bool get_blocksRaycasts()
public void set_blocksRaycasts(bool value)
public bool get_ignoreParentGroups()
public void set_ignoreParentGroups(bool value)
public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
}
public UnityEngine.CanvasRenderer : Component {
public bool isMask
public bool hasRectClipping
public bool hasPopInstruction
public int materialCount
public int popMaterialCount
public int relativeDepth
public bool cull
public int absoluteDepth
public bool hasMoved
public void SetColor(Color color)
private void INTERNAL_CALL_SetColor(CanvasRenderer self, Color& color)
public Color GetColor()
private void INTERNAL_CALL_GetColor(CanvasRenderer self, Color& value)
public float GetAlpha()
public void SetAlpha(float alpha)
public bool get_isMask()
public void set_isMask(bool value)
public void SetVertices(List`1<UIVertex> vertices)
public void SetVertices(UIVertex[] vertices, int size)
public void EnableRectClipping(Rect rect)
private void INTERNAL_CALL_EnableRectClipping(CanvasRenderer self, Rect& rect)
public void DisableRectClipping()
public bool get_hasRectClipping()
public bool get_hasPopInstruction()
public void set_hasPopInstruction(bool value)
public int get_materialCount()
public void set_materialCount(int value)
public void SetMaterial(Material material, int index)
public void SetMaterial(Material material, Texture texture)
public Material GetMaterial()
public Material GetMaterial(int index)
public int get_popMaterialCount()
public void set_popMaterialCount(int value)
public void SetPopMaterial(Material material, int index)
public Material GetPopMaterial(int index)
public void SetTexture(Texture texture)
public void SetAlphaTexture(Texture texture)
public void SetMesh(Mesh mesh)
public void Clear()
public void SplitUIVertexStreams(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
public void SplitUIVertexStreams(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector2> uv2S, List`1<Vector2> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
private void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents)
private void SplitIndicesStreamsInternal(object verts, object indices)
public void CreateUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
public void CreateUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector2> uv2S, List`1<Vector2> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indices)
private void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices)
public void AddUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents)
public void AddUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector2> uv2S, List`1<Vector2> uv3S, List`1<Vector3> normals, List`1<Vector4> tangents)
public int get_relativeDepth()
public bool get_cull()
public void set_cull(bool value)
public int get_absoluteDepth()
public bool get_hasMoved()
}
public UnityEngine.ICanvasRaycastFilter {
public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
}
public UnityEngine.RectTransformUtility : object {
private Vector3[] s_Corners
public bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam)
private bool INTERNAL_CALL_RectangleContainsScreenPoint(RectTransform rect, Vector2& screenPoint, Camera cam)
public Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas)
private void INTERNAL_CALL_PixelAdjustPoint(Vector2& point, Transform elementTransform, Canvas canvas, Vector2& value)
public Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas)
private void INTERNAL_CALL_PixelAdjustRect(RectTransform rectTransform, Canvas canvas, Rect& value)
public bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint)
public bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, Vector3& worldPoint)
public bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, Vector2& localPoint)
public Ray ScreenPointToRay(Camera cam, Vector2 screenPos)
public Vector2 WorldToScreenPoint(Camera cam, Vector3 worldPoint)
public Bounds CalculateRelativeRectTransformBounds(Transform root, Transform child)
public Bounds CalculateRelativeRectTransformBounds(Transform trans)
public void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive)
public void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive)
private Vector2 GetTransposed(Vector2 input)
}
public UnityEngine.RenderMode : Enum {
public int value__
public RenderMode ScreenSpaceOverlay
public RenderMode ScreenSpaceCamera
public RenderMode WorldSpace
}
public UnityEngine.UISystemProfilerApi : object {
public void BeginSample(SampleType type)
public void EndSample(SampleType type)
public void AddMarker(string name, Object obj)
}
