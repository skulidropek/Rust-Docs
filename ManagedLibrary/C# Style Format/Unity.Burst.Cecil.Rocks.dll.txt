public Mono.Cecil.Rocks.DocCommentId : object {
private StringBuilder id
private void WriteField(FieldDefinition field)
private void WriteEvent(EventDefinition event)
private void WriteType(TypeDefinition type)
private void WriteMethod(MethodDefinition method)
private bool IsConversionOperator(MethodDefinition self)
private void WriteReturnType(MethodDefinition method)
private void WriteProperty(PropertyDefinition property)
private void WriteParameters(IList`1<ParameterDefinition> parameters)
private void WriteTypeSignature(TypeReference type)
private void WriteGenericInstanceTypeSignature(GenericInstanceType type)
private void WriteList(IList`1<T> list, Action`1<T> action)
private void WriteModiferTypeSignature(IModifierType type, char id)
private void WriteFunctionPointerTypeSignature(FunctionPointerType type)
private void WriteArrayTypeSignature(ArrayType type)
private void WriteDefinition(char id, IMemberDefinition member)
private void WriteTypeFullName(TypeReference type, bool stripGenericArity)
private void WriteItemName(string name)
public string ToString()
public string GetDocCommentId(IMemberDefinition member)
private void <WriteParameters>b__9_0(ParameterDefinition p)
private void <WriteArrayTypeSignature>b__15_0(ArrayDimension dimension)
}
internal Mono.Cecil.Rocks.Functional : object {
public Func`2<A, R> Y(Func`2<Func`2<A, R>, Func`2<A, R>> f)
public IEnumerable`1<TSource> Prepend(IEnumerable`1<TSource> source, TSource element)
private IEnumerable`1<TSource> PrependIterator(IEnumerable`1<TSource> source, TSource element)
}
public Mono.Cecil.Rocks.IILVisitor {
public void OnInlineNone(OpCode opcode)
public void OnInlineSByte(OpCode opcode, sbyte value)
public void OnInlineByte(OpCode opcode, byte value)
public void OnInlineInt32(OpCode opcode, int value)
public void OnInlineInt64(OpCode opcode, long value)
public void OnInlineSingle(OpCode opcode, float value)
public void OnInlineDouble(OpCode opcode, double value)
public void OnInlineString(OpCode opcode, string value)
public void OnInlineBranch(OpCode opcode, int offset)
public void OnInlineSwitch(OpCode opcode, Int32[] offsets)
public void OnInlineVariable(OpCode opcode, VariableDefinition variable)
public void OnInlineArgument(OpCode opcode, ParameterDefinition parameter)
public void OnInlineSignature(OpCode opcode, CallSite callSite)
public void OnInlineType(OpCode opcode, TypeReference type)
public void OnInlineField(OpCode opcode, FieldReference field)
public void OnInlineMethod(OpCode opcode, MethodReference method)
}
public Mono.Cecil.Rocks.ILParser : object {
public void Parse(MethodDefinition method, IILVisitor visitor)
private ParseContext CreateContext(MethodDefinition method, IILVisitor visitor)
private void ParseFatMethod(ParseContext context)
private void ParseCode(int code_size, ParseContext context)
private VariableDefinition GetVariable(ParseContext context, int index)
}
public Mono.Cecil.Rocks.MethodBodyRocks : object {
public void SimplifyMacros(MethodBody self)
private void ExpandMacro(Instruction instruction, OpCode opcode, object operand)
private void MakeMacro(Instruction instruction, OpCode opcode)
public void Optimize(MethodBody self)
private void OptimizeLongs(MethodBody self)
public void OptimizeMacros(MethodBody self)
private void OptimizeBranches(MethodBody body)
private bool OptimizeBranch(Instruction instruction)
private void ComputeOffsets(MethodBody body)
}
public Mono.Cecil.Rocks.MethodDefinitionRocks : object {
public MethodDefinition GetBaseMethod(MethodDefinition self)
public MethodDefinition GetOriginalBaseMethod(MethodDefinition self)
private TypeDefinition ResolveBaseType(TypeDefinition type)
private MethodDefinition GetMatchingMethod(TypeDefinition type, MethodDefinition method)
}
public Mono.Cecil.Rocks.ModuleDefinitionRocks : object {
public IEnumerable`1<TypeDefinition> GetAllTypes(ModuleDefinition self)
}
public Mono.Cecil.Rocks.ParameterReferenceRocks : object {
public int GetSequence(ParameterReference self)
}
public Mono.Cecil.Rocks.SecurityDeclarationRocks : object {
public PermissionSet ToPermissionSet(SecurityDeclaration self)
private bool TryProcessPermissionSetAttribute(SecurityDeclaration declaration, PermissionSet& set)
private PermissionSet CreatePermissionSet(SecurityDeclaration declaration)
private IPermission CreatePermission(SecurityDeclaration declaration, SecurityAttribute attribute)
private void CompleteSecurityAttribute(SecurityAttribute security_attribute, SecurityAttribute attribute)
private void CompleteSecurityAttributeFields(SecurityAttribute security_attribute, SecurityAttribute attribute)
private void CompleteSecurityAttributeProperties(SecurityAttribute security_attribute, SecurityAttribute attribute)
private SecurityAttribute CreateSecurityAttribute(Type attribute_type, SecurityDeclaration declaration)
public SecurityDeclaration ToSecurityDeclaration(PermissionSet self, SecurityAction action, ModuleDefinition module)
}
public Mono.Cecil.Rocks.TypeDefinitionRocks : object {
public IEnumerable`1<MethodDefinition> GetConstructors(TypeDefinition self)
public MethodDefinition GetStaticConstructor(TypeDefinition self)
public IEnumerable`1<MethodDefinition> GetMethods(TypeDefinition self)
public TypeReference GetEnumUnderlyingType(TypeDefinition self)
}
public Mono.Cecil.Rocks.TypeReferenceRocks : object {
public ArrayType MakeArrayType(TypeReference self)
public ArrayType MakeArrayType(TypeReference self, int rank)
public PointerType MakePointerType(TypeReference self)
public ByReferenceType MakeByReferenceType(TypeReference self)
public OptionalModifierType MakeOptionalModifierType(TypeReference self, TypeReference modifierType)
public RequiredModifierType MakeRequiredModifierType(TypeReference self, TypeReference modifierType)
public GenericInstanceType MakeGenericInstanceType(TypeReference self, TypeReference[] arguments)
public PinnedType MakePinnedType(TypeReference self)
public SentinelType MakeSentinelType(TypeReference self)
}
