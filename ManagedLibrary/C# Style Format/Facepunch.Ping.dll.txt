public Facepunch.Ping.IPingEstimateResults {
public IPingRegionResult GetRegionByCode(StringView code)
public IEnumerable`1<IPingRegionResult> GetAllRegions()
}
public Facepunch.Ping.IPingRegion {
public string Location
public string Shortname
public string Code
public string get_Location()
public string get_Shortname()
public string get_Code()
}
public Facepunch.Ping.IPingRegionResult {
public string RegionCode
public string RegionShortname
public int Ping
public string get_RegionCode()
public string get_RegionShortname()
public int get_Ping()
}
public Facepunch.Ping.PingAddress : object {
private string <IP>k__BackingField
private string <Location>k__BackingField
private string <Shortname>k__BackingField
private string <Code>k__BackingField
private int <Timeout>k__BackingField
public string IP
public string Location
public string Shortname
public string Code
public int Timeout
public string get_IP()
public void set_IP(string value)
public string get_Location()
public void set_Location(string value)
public string get_Shortname()
public void set_Shortname(string value)
public string get_Code()
public void set_Code(string value)
public int get_Timeout()
public void set_Timeout(int value)
}
public Facepunch.Ping.PingEstimater : object {
private string json
private PingManifest manifest
private UInt32 seed
public int numSamples
public bool parallel
public int refreshIntervalMinutes
public bool AutoRefresh
public bool enabled
public bool logging
private IPingRegion UnknownRegion
private Task updateRegionTask
private DateTime _cachedTime
private IPingRegion _cachedRegion
private IPingEstimateResults _pingResults
public bool IsEnabled
public bool get_IsEnabled()
private List`1<PingAddress> DownloadRegions()
private void TryRefreshCache()
public void ForceRefreshCache()
public IPingRegion GetCachedClosestRegion()
public Nullable`1<int> GetCachedPingForRegion(StringView regionCode)
public IPingEstimateResults GetEstimateToAllRegions()
private Task CalculateClosestRegion()
}
internal Facepunch.Ping.PingEstimateResults : object {
private Dictionary`2<StringView, PingRegionResult> regions
public void .ctor(IReadOnlyCollection`1<PingSample> samples)
public IPingRegionResult GetRegionByCode(StringView code)
public IEnumerable`1<IPingRegionResult> GetAllRegions()
}
public Facepunch.Ping.PingManifest : object {
private List`1<PingAddress> <Addresses>k__BackingField
public List`1<PingAddress> Addresses
public List`1<PingAddress> get_Addresses()
public void set_Addresses(List`1<PingAddress> value)
}
internal Facepunch.Ping.PingRegionResult : object {
private string <RegionCode>k__BackingField
private string <RegionShortname>k__BackingField
private int <Ping>k__BackingField
public string RegionCode
public string RegionShortname
public int Ping
public string get_RegionCode()
public void set_RegionCode(string value)
public string get_RegionShortname()
public void set_RegionShortname(string value)
public int get_Ping()
public void set_Ping(int value)
}
internal PingSample : object {
private PingAddress <Region>k__BackingField
private List`1<int> _samples
private int <Value>k__BackingField
private Ping <PingInstance>k__BackingField
private DateTime <Timestamp>k__BackingField
public PingAddress Region
public IReadOnlyList`1<int> Samples
public int Value
internal Ping PingInstance
internal DateTime Timestamp
public PingAddress get_Region()
public IReadOnlyList`1<int> get_Samples()
public int get_Value()
public void set_Value(int value)
internal Ping get_PingInstance()
internal void set_PingInstance(Ping value)
internal DateTime get_Timestamp()
internal void set_Timestamp(DateTime value)
internal bool IsDone()
public void .ctor(PingAddress region)
public void AddSample(int sample)
public int CompareTo(PingSample other)
}
internal UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
private MonoScriptData Get()
}
