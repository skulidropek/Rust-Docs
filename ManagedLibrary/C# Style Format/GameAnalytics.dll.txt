public Foundation.Tasks.AsyncTask : CustomYieldInstruction {
public bool DisableMultiThread
public bool LogErrors
public TaskStrategy Strategy
private Exception <Exception>k__BackingField
private TaskStatus <Status>k__BackingField
private bool <HasContinuations>k__BackingField
protected TaskStatus _status
protected Action _action
protected IEnumerator _routine
private List`1<Delegate> _completeList
private AsyncTask _successTask
public Exception Exception
public TaskStatus Status
public bool keepWaiting
public bool IsRunning
public bool IsCompleted
public bool IsFaulted
public bool IsSuccess
public bool HasContinuations
public Exception get_Exception()
public void set_Exception(Exception value)
public TaskStatus get_Status()
public void set_Status(TaskStatus value)
public bool get_keepWaiting()
public bool get_IsRunning()
public bool get_IsCompleted()
public bool get_IsFaulted()
public bool get_IsSuccess()
public bool get_HasContinuations()
protected void set_HasContinuations(bool value)
public void .ctor(TaskStrategy mode)
public void .ctor(Exception ex)
public void .ctor(Action action)
public void .ctor(Action action, TaskStrategy mode)
public void .ctor(IEnumerator action)
protected void Execute()
protected void RunOnBackgroundThread()
protected void RunOnCurrentThread()
protected void RunOnMainThread()
protected void RunAsCoroutine()
protected void OnTaskComplete()
protected void OnRoutineComplete()
public void Complete(Exception ex)
public void Start()
public void Dispose()
public void AddContinue(Delegate action)
public AsyncTask Run(Action action)
public AsyncTask RunOnMain(Action action)
public AsyncTask RunOnCurrent(Action action)
public AsyncTask RunCoroutine(IEnumerator function)
public AsyncTask RunCoroutine(Func`1<IEnumerator> function)
public AsyncTask RunCoroutine(Func`2<AsyncTask, IEnumerator> function)
public AsyncTask`1<TResult> Run(Func`1<TResult> function)
public AsyncTask`1<TResult> RunOnMain(Func`1<TResult> function)
public AsyncTask`1<TResult> RunOnCurrent(Func`1<TResult> function)
public AsyncTask`1<TResult> RunCoroutine(IEnumerator function)
public AsyncTask`1<TResult> RunCoroutine(Func`2<AsyncTask`1<TResult>, IEnumerator> function)
public AsyncTask`1<T> SuccessTask(T result)
public AsyncTask SuccessTask()
public AsyncTask FailedTask(string exception)
public AsyncTask FailedTask(Exception ex)
public AsyncTask`1<T> FailedTask(string exception)
public AsyncTask`1<T> FailedTask(Exception ex)
private void <RunOnBackgroundThread>b__37_0(object state)
}
public Foundation.Tasks.AsyncTask`1 : AsyncTask {
public TResult Result
private Func`1<TResult> _function
public void .ctor(TResult result)
public void .ctor(Func`1<TResult> function)
public void .ctor(Func`1<TResult> function, TaskStrategy mode)
public void .ctor(IEnumerator routine)
public void .ctor(Exception ex)
public void .ctor(TaskStrategy mode)
public void Complete(Exception ex)
public void Complete(TResult result)
public void Start()
protected void Execute()
}
public Foundation.Tasks.TaskExtensions : object {
public T ThrowIfFaulted(T self)
public T ContinueWith(T self, Action`1<T> continuation)
public T AddTimeout(T self, int seconds, Action`1<AsyncTask> onTimeout)
private IEnumerator TimeOutAsync(AsyncTask task, int seconds, Action`1<AsyncTask> onTimeout)
}
public Foundation.Tasks.TaskManager : MonoBehaviour {
private TaskManager _instance
private object syncRoot
protected List`1<CoroutineCommand> PendingCoroutineInfo
protected List`1<IEnumerator> PendingAdd
protected List`1<IEnumerator> PendingRemove
protected List`1<Action> PendingActions
protected List`1<LogCommand> PendingLogs
protected bool IsApplicationQuit
private Thread <MainThread>k__BackingField
public TaskManager Instance
public bool IsMainThread
public Thread MainThread
public Thread CurrentThread
public TaskManager get_Instance()
public void ConfirmInit()
public Coroutine WaitForSeconds(int seconds)
public Coroutine StartRoutine(IEnumerator coroutine)
public void StartRoutine(CoroutineCommand info)
public void StopRoutine(IEnumerator coroutine)
public void RunOnMainThread(Action action)
public void Log(LogCommand m)
private void Write(LogCommand m)
protected void Awake()
protected void Update()
private IEnumerator RunCoroutineInfo(CoroutineCommand info)
protected void OnApplicationQuit()
private IEnumerator WaitForSecondsInternal(int seconds)
public bool get_IsMainThread()
public Thread get_MainThread()
protected void set_MainThread(Thread value)
public Thread get_CurrentThread()
}
public Foundation.Tasks.TaskStatus : Enum {
public int value__
public TaskStatus Pending
public TaskStatus Faulted
public TaskStatus Success
}
public Foundation.Tasks.TaskStrategy : Enum {
public int value__
public TaskStrategy BackgroundThread
public TaskStrategy MainThread
public TaskStrategy CurrentThread
public TaskStrategy Coroutine
public TaskStrategy Custom
}
internal GameAnalyticsSDK.Net.Device.GADevice : object {
private string _sdkWrapperVersion
private string _buildPlatform
private string _deviceModel
private string _writablepath
private string _osVersion
private string _deviceManufacturer
private string <SdkGameEngineVersion>k__BackingField
private string <GameEngineVersion>k__BackingField
private string <ConnectionType>k__BackingField
public string SdkGameEngineVersion
public string GameEngineVersion
public string ConnectionType
public string RelevantSdkVersion
public string BuildPlatform
public string OSVersion
public string DeviceModel
public string DeviceManufacturer
public string WritablePath
public void Touch()
private string get_SdkGameEngineVersion()
public void set_SdkGameEngineVersion(string value)
public string get_GameEngineVersion()
public void set_GameEngineVersion(string value)
public string get_ConnectionType()
public void set_ConnectionType(string value)
public string get_RelevantSdkVersion()
public string get_BuildPlatform()
public string get_OSVersion()
public string get_DeviceModel()
public string get_DeviceManufacturer()
public string get_WritablePath()
public void UpdateConnectionType()
private string GetOSVersionString()
private string GetPersistentPath()
private string UnityRuntimePlatformToString(RuntimePlatform platform)
}
public GameAnalyticsSDK.Net.EGAErrorSeverity : Enum {
public int value__
public EGAErrorSeverity Undefined
public EGAErrorSeverity Debug
public EGAErrorSeverity Info
public EGAErrorSeverity Warning
public EGAErrorSeverity Error
public EGAErrorSeverity Critical
}
public GameAnalyticsSDK.Net.EGAGender : Enum {
public int value__
public EGAGender Undefined
public EGAGender Male
public EGAGender Female
}
public GameAnalyticsSDK.Net.EGALoggerMessageType : Enum {
public int value__
public EGALoggerMessageType Error
public EGALoggerMessageType Warning
public EGALoggerMessageType Info
public EGALoggerMessageType Debug
}
public GameAnalyticsSDK.Net.EGAProgressionStatus : Enum {
public int value__
public EGAProgressionStatus Undefined
public EGAProgressionStatus Start
public EGAProgressionStatus Complete
public EGAProgressionStatus Fail
}
public GameAnalyticsSDK.Net.EGAResourceFlowType : Enum {
public int value__
public EGAResourceFlowType Undefined
public EGAResourceFlowType Source
public EGAResourceFlowType Sink
}
internal GameAnalyticsSDK.Net.Events.GAEvents : object {
private GAEvents _instance
private string CategorySessionStart
private string CategorySessionEnd
private string CategoryDesign
private string CategoryBusiness
private string CategoryProgression
private string CategoryResource
private string CategoryError
private bool isRunning
private bool keepRunning
private double ProcessEventsIntervalInSeconds
private int MaxEventCount
private GAEvents Instance
private GAEvents get_Instance()
public void StopEventQueue()
public void EnsureEventQueueIsRunning()
public void AddSessionStartEvent()
public void AddSessionEndEvent()
public void AddBusinessEvent(string currency, int amount, string itemType, string itemId, string cartType, IDictionary`2<string, object> fields)
public void AddResourceEvent(EGAResourceFlowType flowType, string currency, double amount, string itemType, string itemId, IDictionary`2<string, object> fields)
public void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, string progression03, double score, bool sendScore, IDictionary`2<string, object> fields)
public void AddDesignEvent(string eventId, double value, bool sendValue, IDictionary`2<string, object> fields)
public void AddErrorEvent(EGAErrorSeverity severity, string message, IDictionary`2<string, object> fields)
private void ProcessEventQueue()
private void ProcessEvents(string category, bool performCleanUp)
public void ProcessEvents(EGAHTTPApiResponse responseEnum, JSONNode dataDict, string putbackSql, string deleteSql, int eventCount)
private void CleanupEvents()
private void FixMissingSessionEndEvents()
private void AddEventToStore(JSONObject eventData)
private void AddDimensionsToEvent(JSONObject eventData)
private void AddFieldsToEvent(JSONObject eventData, JSONObject fields)
private string ResourceFlowTypeToString(EGAResourceFlowType value)
private string ProgressionStatusToString(EGAProgressionStatus value)
private void UpdateSessionTime()
private string ErrorSeverityToString(EGAErrorSeverity value)
}
public GameAnalyticsSDK.Net.GameAnalytics : object {
public void ConfigureAvailableCustomDimensions01(String[] customDimensions)
public void ConfigureAvailableCustomDimensions02(String[] customDimensions)
public void ConfigureAvailableCustomDimensions03(String[] customDimensions)
public void ConfigureAvailableResourceCurrencies(String[] resourceCurrencies)
public void ConfigureAvailableResourceItemTypes(String[] resourceItemTypes)
public void ConfigureBuild(string build)
public void ConfigureSdkGameEngineVersion(string sdkGameEngineVersion)
public void ConfigureGameEngineVersion(string gameEngineVersion)
public void ConfigureUserId(string uId)
public void Initialize(string gameKey, string gameSecret)
public void AddBusinessEvent(string currency, int amount, string itemType, string itemId, string cartType)
public void AddResourceEvent(EGAResourceFlowType flowType, string currency, float amount, string itemType, string itemId)
public void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01)
public void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, double score)
public void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02)
public void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, double score)
public void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, string progression03)
public void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, string progression03, double score)
public void AddDesignEvent(string eventId, IDictionary`2<string, object> fields)
public void AddDesignEvent(string eventId, double value)
public void AddErrorEvent(EGAErrorSeverity severity, string message)
public void SetEnabledInfoLog(bool flag)
public void SetEnabledVerboseLog(bool flag)
public void SetEnabledManualSessionHandling(bool flag)
public void SetCustomDimension01(string dimension)
public void SetCustomDimension02(string dimension)
public void SetCustomDimension03(string dimension)
public void SetFacebookId(string facebookId)
public void SetGender(EGAGender gender)
public void SetBirthYear(int birthYear)
public void StartSession()
public void EndSession()
public void OnStop()
public void OnResume()
public string GetCommandCenterValueAsString(string key, string defaultValue)
public bool IsCommandCenterReady()
public void AddCommandCenterListener(ICommandCenterListener listener)
public void RemoveCommandCenterListener(ICommandCenterListener listener)
public string GetConfigurationsAsString()
private bool IsSdkReady(bool needsInitialized)
private bool IsSdkReady(bool needsInitialized, bool warn)
private bool IsSdkReady(bool needsInitialized, bool warn, string message)
}
internal GameAnalyticsSDK.Net.Http.EGAHTTPApiResponse : Enum {
public int value__
public EGAHTTPApiResponse NoResponse
public EGAHTTPApiResponse BadResponse
public EGAHTTPApiResponse RequestTimeout
public EGAHTTPApiResponse JsonEncodeFailed
public EGAHTTPApiResponse JsonDecodeFailed
public EGAHTTPApiResponse InternalServerError
public EGAHTTPApiResponse BadRequest
public EGAHTTPApiResponse Unauthorized
public EGAHTTPApiResponse UnknownResponseCode
public EGAHTTPApiResponse Ok
}
internal GameAnalyticsSDK.Net.Http.EGASdkErrorType : Enum {
public int value__
public EGASdkErrorType Undefined
public EGASdkErrorType Rejected
}
internal GameAnalyticsSDK.Net.Http.GAHTTPApi : object {
private GAHTTPApi _instance
private string protocol
private string hostName
private string version
private string baseUrl
private string initializeUrlPath
private string eventsUrlPath
private bool useGzip
public GAHTTPApi Instance
public GAHTTPApi get_Instance()
private bool MyRemoteCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
public KeyValuePair`2<EGAHTTPApiResponse, JSONObject> RequestInitReturningDict()
public KeyValuePair`2<EGAHTTPApiResponse, JSONNode> SendEventsInArray(List`1<JSONNode> eventArray)
public void SendSdkErrorEvent(EGASdkErrorType type)
private Byte[] CreatePayloadData(string payload, bool gzip)
private string SdkErrorTypeToString(EGASdkErrorType value)
private HttpWebRequest CreateRequest(string url, Byte[] payloadData, bool gzip)
private EGAHTTPApiResponse ProcessRequestResponse(HttpStatusCode responseCode, string responseMessage, string body, string requestId)
}
public GameAnalyticsSDK.Net.ICommandCenterListener {
public void OnCommandCenterUpdated()
}
internal GameAnalyticsSDK.Net.Logging.GALogger : object {
private GALogger _instance
private bool infoLogEnabled
private bool infoLogVerboseEnabled
private bool debugEnabled
private string Tag
private GALogger Instance
public bool InfoLog
public bool VerboseLog
private GALogger get_Instance()
public void set_InfoLog(bool value)
public void set_VerboseLog(bool value)
public void I(string format)
public void W(string format)
public void E(string format)
public void II(string format)
public void D(string format)
private void SendNotificationMessage(string message, EGALoggerMessageType type)
}
internal GameAnalyticsSDK.Net.State.GAState : object {
private string CategorySdkError
private int MaxCustomFieldsCount
private int MaxCustomFieldsKeyLength
private int MaxCustomFieldsValueStringLength
private GAState _instance
private string _userId
private string _identifier
private bool _initialized
private long _sessionStart
private int _sessionNum
private int _transactionNum
private string _sessionId
private string _currentCustomDimension01
private string _currentCustomDimension02
private string _currentCustomDimension03
private string _gameKey
private string _gameSecret
private String[] _availableCustomDimensions01
private String[] _availableCustomDimensions02
private String[] _availableCustomDimensions03
private String[] _availableResourceCurrencies
private String[] _availableResourceItemTypes
private string _build
private bool _useManualSessionHandling
private string <FacebookId>k__BackingField
private string <Gender>k__BackingField
private int <BirthYear>k__BackingField
private JSONNode <SdkConfigCached>k__BackingField
private bool <InitAuthorized>k__BackingField
private long <ClientServerTimeOffset>k__BackingField
private long <SuspendBlockId>k__BackingField
private string _defaultUserId
private Dictionary`2<string, int> progressionTries
private JSONNode sdkConfigDefault
private JSONNode sdkConfig
private JSONNode sdkConfigCached
private JSONNode configurations
private bool commandCenterIsReady
private List`1<ICommandCenterListener> commandCenterListeners
private object configurationsLock
public string InMemoryPrefix
private string DefaultUserIdKey
public string SessionNumKey
public string TransactionNumKey
private string FacebookIdKey
private string GenderKey
private string BirthYearKey
private string Dimension01Key
private string Dimension02Key
private string Dimension03Key
private string SdkConfigCachedKey
private GAState Instance
public string UserId
public string Identifier
public bool Initialized
public long SessionStart
public int SessionNum
public int TransactionNum
public string SessionId
public string CurrentCustomDimension01
public string CurrentCustomDimension02
public string CurrentCustomDimension03
public string GameKey
public string GameSecret
public String[] AvailableCustomDimensions01
public String[] AvailableCustomDimensions02
public String[] AvailableCustomDimensions03
public String[] AvailableResourceCurrencies
public String[] AvailableResourceItemTypes
public string Build
public bool UseManualSessionHandling
private string FacebookId
private string Gender
private int BirthYear
private JSONNode SdkConfigCached
private bool InitAuthorized
private long ClientServerTimeOffset
private long SuspendBlockId
private string DefaultUserId
private JSONNode SdkConfig
private GAState get_Instance()
private string get_UserId()
public void set_UserId(string value)
public string get_Identifier()
private void set_Identifier(string value)
public bool get_Initialized()
private void set_Initialized(bool value)
public long get_SessionStart()
private void set_SessionStart(long value)
public int get_SessionNum()
private void set_SessionNum(int value)
public int get_TransactionNum()
private void set_TransactionNum(int value)
public string get_SessionId()
private void set_SessionId(string value)
public string get_CurrentCustomDimension01()
private void set_CurrentCustomDimension01(string value)
public string get_CurrentCustomDimension02()
private void set_CurrentCustomDimension02(string value)
public string get_CurrentCustomDimension03()
private void set_CurrentCustomDimension03(string value)
public string get_GameKey()
private void set_GameKey(string value)
public string get_GameSecret()
private void set_GameSecret(string value)
public String[] get_AvailableCustomDimensions01()
public void set_AvailableCustomDimensions01(String[] value)
public String[] get_AvailableCustomDimensions02()
public void set_AvailableCustomDimensions02(String[] value)
public String[] get_AvailableCustomDimensions03()
public void set_AvailableCustomDimensions03(String[] value)
public String[] get_AvailableResourceCurrencies()
public void set_AvailableResourceCurrencies(String[] value)
public String[] get_AvailableResourceItemTypes()
public void set_AvailableResourceItemTypes(String[] value)
public string get_Build()
public void set_Build(string value)
public bool get_UseManualSessionHandling()
private void set_UseManualSessionHandling(bool value)
private string get_FacebookId()
private void set_FacebookId(string value)
private string get_Gender()
private void set_Gender(string value)
private int get_BirthYear()
private void set_BirthYear(int value)
private JSONNode get_SdkConfigCached()
private void set_SdkConfigCached(JSONNode value)
private bool get_InitAuthorized()
private void set_InitAuthorized(bool value)
private long get_ClientServerTimeOffset()
private void set_ClientServerTimeOffset(long value)
private long get_SuspendBlockId()
private void set_SuspendBlockId(long value)
private string get_DefaultUserId()
private void set_DefaultUserId(string value)
private JSONNode get_SdkConfig()
public bool IsEnabled()
public void SetCustomDimension01(string dimension)
public void SetCustomDimension02(string dimension)
public void SetCustomDimension03(string dimension)
public void SetFacebookId(string facebookId)
public void SetGender(EGAGender gender)
public void SetBirthYear(int birthYear)
public void IncrementSessionNum()
public void IncrementTransactionNum()
public void IncrementProgressionTries(string progression)
public int GetProgressionTries(string progression)
public void ClearProgressionTries(string progression)
public bool HasAvailableCustomDimensions01(string dimension1)
public bool HasAvailableCustomDimensions02(string dimension2)
public bool HasAvailableCustomDimensions03(string dimension3)
public bool HasAvailableResourceCurrency(string currency)
public bool HasAvailableResourceItemType(string itemType)
public void SetKeys(string gameKey, string gameSecret)
public void SetManualSessionHandling(bool flag)
public void InternalInitialize()
public void EndSessionAndStopQueue()
public void ResumeSessionAndStartQueue()
public JSONObject GetEventAnnotations()
public JSONObject GetSdkErrorEventAnnotations()
public JSONObject GetInitAnnotations()
public long GetClientTsAdjusted()
public bool SessionIsStarted()
public JSONObject ValidateAndCleanCustomFields(IDictionary`2<string, object> fields)
public string GetConfigurationStringValue(string key, string defaultValue)
public bool IsCommandCenterReady()
public void AddCommandCenterListener(ICommandCenterListener listener)
public void RemoveCommandCenterListener(ICommandCenterListener listener)
public string GetConfigurationsAsString()
private void CacheIdentifier()
private void EnsurePersistedStates()
private void StartNewSession()
public void StartNewSession(EGAHTTPApiResponse initResponse, JSONObject initResponseDict)
private void ValidateAndFixCurrentDimensions()
private long CalculateServerTimeOffset(long serverTs)
private void PopulateConfigurations(JSONNode sdkConfig)
}
internal GameAnalyticsSDK.Net.Store.GAStore : object {
public bool InMemory
private long MaxDbSizeBytes
private long MaxDbSizeBytesBeforeTrim
private GAStore _instance
private string dbPath
private SqliteConnection <SqlDatabase>k__BackingField
private bool <DbReady>k__BackingField
private bool _tableReady
private GAStore Instance
private SqliteConnection SqlDatabase
private bool DbReady
public bool IsTableReady
public bool IsDbTooLargeForEvents
public long DbSizeBytes
private GAStore get_Instance()
private SqliteConnection get_SqlDatabase()
private void set_SqlDatabase(SqliteConnection value)
private bool get_DbReady()
private void set_DbReady(bool value)
public bool get_IsTableReady()
private void set_IsTableReady(bool value)
public bool get_IsDbTooLargeForEvents()
public JSONArray ExecuteQuerySync(string sql)
public JSONArray ExecuteQuerySync(string sql, Dictionary`2<string, object> parameters)
public JSONArray ExecuteQuerySync(string sql, Dictionary`2<string, object> parameters, bool useTransaction)
public bool EnsureDatabase(bool dropDatabase, string key)
public void SetState(string key, string value)
public long get_DbSizeBytes()
private void TrimEventTable()
}
internal GameAnalyticsSDK.Net.Tasks.SdkErrorTask : object {
protected EGASdkErrorType type
protected Byte[] payloadData
protected string hashHmac
protected string body
private int MaxCount
private Dictionary`2<EGASdkErrorType, int> countMap
public void .ctor(EGASdkErrorType type, Byte[] payloadData, string secretKey)
public void Execute(string url)
protected void DoInBackground(string url)
protected void OnPostExecute(HttpStatusCode responseCode, string responseDescription)
}
public GameAnalyticsSDK.Net.Threading.GAThreading : object {
private bool shouldThreadrun
private GAThreading _instance
private int ThreadWaitTimeInMs
private PriorityQueue`2<long, TimedBlock> blocks
private Dictionary`2<long, TimedBlock> id2TimedBlockMap
private object threadLock
private GAThreading Instance
private GAThreading get_Instance()
public void Run()
public void PerformTaskOnGAThread(string blockName, Action taskBlock)
public void PerformTaskOnGAThread(string blockName, Action taskBlock, long delayInSeconds)
public long ScheduleTimer(double interval, string blockName, Action callback)
public void IgnoreTimer(long blockIdentifier)
private void AddTimedBlock(TimedBlock timedBlock)
private TimedBlock GetNextBlock()
public void StartThread()
public void StopThread()
}
internal GameAnalyticsSDK.Net.Threading.PriorityQueue`2 : object {
private SortedDictionary`2<TPriority, Queue`1<TItem>> _subqueues
public bool HasItems
public int Count
public void .ctor(IComparer`1<TPriority> priorityComparer)
public void Enqueue(TPriority priority, TItem item)
private void AddQueueOfPriority(TPriority priority)
public TItem Peek()
public bool get_HasItems()
public TItem Dequeue()
private TItem DequeueFromHighPriorityQueue()
public int get_Count()
}
internal GameAnalyticsSDK.Net.TimedBlock : object {
public DateTime deadline
public Action block
public long id
public bool ignore
public string blockName
private long idCounter
public void .ctor(DateTime deadline, Action block, string blockName)
public int CompareTo(TimedBlock other)
public string ToString()
}
internal GameAnalyticsSDK.Net.Utilities.GAUtilities : object {
private DateTime origin
public Byte[] GzipCompress(string data)
public string HmacWithKey(string key, Byte[] data)
public bool StringMatch(string s, string pattern)
public string JoinStringArray(String[] v, string delimiter)
public bool StringArrayContainsString(String[] array, string search)
public long TimeIntervalSince1970()
public string ArrayOfObjectsToJsonString(List`1<JSONNode> arr)
public void CopyTo(Stream input, Stream output)
}
public GameAnalyticsSDK.Net.Utilities.JSON : object {
public JSONNode Parse(string aJSON)
}
public GameAnalyticsSDK.Net.Utilities.JSONArray : JSONNode {
private List`1<JSONNode> m_List
public bool inline
public JSONNodeType Tag
public bool IsArray
public JSONNode Item
public JSONNode Item
public int Count
public IEnumerable`1<JSONNode> Children
public JSONNodeType get_Tag()
public bool get_IsArray()
public JSONNode get_Item(int aIndex)
public void set_Item(int aIndex, JSONNode value)
public JSONNode get_Item(string aKey)
public void set_Item(string aKey, JSONNode value)
public int get_Count()
public void Add(string aKey, JSONNode aItem)
public JSONNode Remove(int aIndex)
public JSONNode Remove(JSONNode aNode)
public IEnumerable`1<JSONNode> get_Children()
public IEnumerator GetEnumerator()
public void Serialize(BinaryWriter aWriter)
internal void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
}
public GameAnalyticsSDK.Net.Utilities.JSONBool : JSONNode {
private bool m_Data
public JSONNodeType Tag
public bool IsBoolean
public string Value
public bool AsBool
public JSONNodeType get_Tag()
public bool get_IsBoolean()
public string get_Value()
public void set_Value(string value)
public bool get_AsBool()
public void set_AsBool(bool value)
public void .ctor(bool aData)
public void .ctor(string aData)
public void Serialize(BinaryWriter aWriter)
internal void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
public bool Equals(object obj)
public int GetHashCode()
}
internal GameAnalyticsSDK.Net.Utilities.JSONLazyCreator : JSONNode {
private JSONNode m_Node
private string m_Key
public JSONNodeType Tag
public JSONNode Item
public JSONNode Item
public int AsInt
public long AsLong
public float AsFloat
public double AsDouble
public bool AsBool
public JSONArray AsArray
public JSONObject AsObject
public JSONNodeType get_Tag()
public void .ctor(JSONNode aNode)
public void .ctor(JSONNode aNode, string aKey)
private void Set(JSONNode aVal)
public JSONNode get_Item(int aIndex)
public void set_Item(int aIndex, JSONNode value)
public JSONNode get_Item(string aKey)
public void set_Item(string aKey, JSONNode value)
public void Add(JSONNode aItem)
public void Add(string aKey, JSONNode aItem)
public bool op_Equality(JSONLazyCreator a, object b)
public bool op_Inequality(JSONLazyCreator a, object b)
public bool Equals(object obj)
public int GetHashCode()
public int get_AsInt()
public void set_AsInt(int value)
public long get_AsLong()
public void set_AsLong(long value)
public float get_AsFloat()
public void set_AsFloat(float value)
public double get_AsDouble()
public void set_AsDouble(double value)
public bool get_AsBool()
public void set_AsBool(bool value)
public JSONArray get_AsArray()
public JSONObject get_AsObject()
internal void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
}
public GameAnalyticsSDK.Net.Utilities.JSONNode : object {
internal StringBuilder m_EscapeBuilder
public JSONNode Item
public JSONNode Item
public string Value
public int Count
public bool IsNumber
public bool IsString
public bool IsBoolean
public bool IsNull
public bool IsArray
public bool IsObject
public IEnumerable`1<JSONNode> Children
public IEnumerable`1<JSONNode> DeepChildren
public JSONNodeType Tag
public double AsDouble
public int AsInt
public long AsLong
public float AsFloat
public bool AsBool
public JSONArray AsArray
public JSONObject AsObject
public JSONNode get_Item(int aIndex)
public void set_Item(int aIndex, JSONNode value)
public JSONNode get_Item(string aKey)
public void set_Item(string aKey, JSONNode value)
public string get_Value()
public void set_Value(string value)
public int get_Count()
public bool get_IsNumber()
public bool get_IsString()
public bool get_IsBoolean()
public bool get_IsNull()
public bool get_IsArray()
public bool get_IsObject()
public void Add(string aKey, JSONNode aItem)
public void Add(JSONNode aItem)
public bool HasKey(string aKey)
public JSONNode Remove(string aKey)
public JSONNode Remove(int aIndex)
public JSONNode Remove(JSONNode aNode)
public IEnumerable`1<JSONNode> get_Children()
public IEnumerable`1<JSONNode> get_DeepChildren()
public string ToString()
public string ToString(int aIndent)
internal void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
public JSONNodeType get_Tag()
public double get_AsDouble()
public void set_AsDouble(double value)
public int get_AsInt()
public void set_AsInt(int value)
public long get_AsLong()
public void set_AsLong(long value)
public float get_AsFloat()
public void set_AsFloat(float value)
public bool get_AsBool()
public void set_AsBool(bool value)
public JSONArray get_AsArray()
public JSONObject get_AsObject()
public JSONNode op_Implicit(string s)
public string op_Implicit(JSONNode d)
public JSONNode op_Implicit(double n)
public double op_Implicit(JSONNode d)
public JSONNode op_Implicit(float n)
public float op_Implicit(JSONNode d)
public JSONNode op_Implicit(int n)
public int op_Implicit(JSONNode d)
public long op_Implicit(JSONNode d)
public JSONNode op_Implicit(bool b)
public bool op_Implicit(JSONNode d)
public bool op_Equality(JSONNode a, object b)
public bool op_Inequality(JSONNode a, object b)
public bool Equals(object obj)
public int GetHashCode()
internal string Escape(string aText)
private void ParseElement(JSONNode ctx, string token, string tokenName, bool quoted)
public JSONNode Parse(string aJSON)
public void Serialize(BinaryWriter aWriter)
public void SaveToStream(Stream aData)
public void SaveToCompressedStream(Stream aData)
public void SaveToCompressedFile(string aFileName)
public string SaveToCompressedBase64()
public void SaveToFile(string aFileName)
public string SaveToBase64()
public JSONNode Deserialize(BinaryReader aReader)
public JSONNode LoadFromCompressedFile(string aFileName)
public JSONNode LoadFromCompressedStream(Stream aData)
public JSONNode LoadFromCompressedBase64(string aBase64)
public JSONNode LoadFromStream(Stream aData)
public JSONNode LoadFromFile(string aFileName)
public JSONNode LoadFromBase64(string aBase64)
}
public GameAnalyticsSDK.Net.Utilities.JSONNodeType : Enum {
public int value__
public JSONNodeType Array
public JSONNodeType Object
public JSONNodeType String
public JSONNodeType Number
public JSONNodeType NullValue
public JSONNodeType Boolean
public JSONNodeType None
}
public GameAnalyticsSDK.Net.Utilities.JSONNull : JSONNode {
public JSONNodeType Tag
public bool IsNull
public string Value
public bool AsBool
public JSONNodeType get_Tag()
public bool get_IsNull()
public string get_Value()
public void set_Value(string value)
public bool get_AsBool()
public void set_AsBool(bool value)
public bool Equals(object obj)
public int GetHashCode()
public void Serialize(BinaryWriter aWriter)
internal void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
}
public GameAnalyticsSDK.Net.Utilities.JSONNumber : JSONNode {
private double m_Data
public JSONNodeType Tag
public bool IsNumber
public string Value
public double AsDouble
public JSONNodeType get_Tag()
public bool get_IsNumber()
public string get_Value()
public void set_Value(string value)
public double get_AsDouble()
public void set_AsDouble(double value)
public void .ctor(double aData)
public void .ctor(string aData)
public void Serialize(BinaryWriter aWriter)
internal void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
private bool IsNumeric(object value)
public bool Equals(object obj)
public int GetHashCode()
}
public GameAnalyticsSDK.Net.Utilities.JSONObject : JSONNode {
private Dictionary`2<string, JSONNode> m_Dict
public bool inline
public JSONNodeType Tag
public bool IsObject
public JSONNode Item
public JSONNode Item
public int Count
public IEnumerable`1<JSONNode> Children
public JSONNodeType get_Tag()
public bool get_IsObject()
public JSONNode get_Item(string aKey)
public void set_Item(string aKey, JSONNode value)
public JSONNode get_Item(int aIndex)
public void set_Item(int aIndex, JSONNode value)
public int get_Count()
public void Add(string aKey, JSONNode aItem)
public bool HasKey(string aKey)
public JSONNode Remove(string aKey)
public JSONNode Remove(int aIndex)
public JSONNode Remove(JSONNode aNode)
public IEnumerable`1<JSONNode> get_Children()
public IEnumerator GetEnumerator()
public void Serialize(BinaryWriter aWriter)
internal void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
}
public GameAnalyticsSDK.Net.Utilities.JSONString : JSONNode {
private string m_Data
public JSONNodeType Tag
public bool IsString
public string Value
public JSONNodeType get_Tag()
public bool get_IsString()
public string get_Value()
public void set_Value(string value)
public void .ctor(string aData)
public void Serialize(BinaryWriter aWriter)
internal void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
public bool Equals(object obj)
public int GetHashCode()
}
public GameAnalyticsSDK.Net.Utilities.JSONTextMode : Enum {
public int value__
public JSONTextMode Compact
public JSONTextMode Indent
}
public GameAnalyticsSDK.Net.Utilities.Zip.Checksums.Adler32 : object {
private UInt32 BASE
private UInt32 checksum
public long Value
public long get_Value()
public void Reset()
public void Update(int bval)
public void Update(Byte[] buffer)
public void Update(Byte[] buf, int off, int len)
}
public GameAnalyticsSDK.Net.Utilities.Zip.Checksums.Crc32 : object {
private UInt32 CrcSeed
private UInt32[] CrcTable
private UInt32 crc
public long Value
internal UInt32 ComputeCrc32(UInt32 oldCrc, byte bval)
public long get_Value()
public void set_Value(long value)
public void Reset()
public void Update(int bval)
public void Update(Byte[] buffer)
public void Update(Byte[] buf, int off, int len)
}
public GameAnalyticsSDK.Net.Utilities.Zip.Checksums.IChecksum {
public long Value
public long get_Value()
public void Reset()
public void Update(int bval)
public void Update(Byte[] buffer)
public void Update(Byte[] buf, int off, int len)
}
public GameAnalyticsSDK.Net.Utilities.Zip.Compression.Deflater : object {
public int BEST_COMPRESSION
public int BEST_SPEED
public int DEFAULT_COMPRESSION
public int NO_COMPRESSION
public int DEFLATED
private int IS_SETDICT
private int IS_FLUSHING
private int IS_FINISHING
private int INIT_STATE
private int SETDICT_STATE
private int BUSY_STATE
private int FLUSHING_STATE
private int FINISHING_STATE
private int FINISHED_STATE
private int CLOSED_STATE
private int level
private bool noZlibHeaderOrFooter
private int state
private long totalOut
private DeflaterPending pending
private DeflaterEngine engine
public int Adler
public int TotalIn
public long TotalOut
public bool IsFinished
public bool IsNeedingInput
public void .ctor(int lvl)
public void .ctor(int level, bool noZlibHeaderOrFooter)
public void Reset()
public int get_Adler()
public int get_TotalIn()
public long get_TotalOut()
public void Flush()
public void Finish()
public bool get_IsFinished()
public bool get_IsNeedingInput()
public void SetInput(Byte[] input)
public void SetInput(Byte[] input, int off, int len)
public void SetLevel(int lvl)
public int GetLevel()
public void SetStrategy(DeflateStrategy strategy)
public int Deflate(Byte[] output)
public int Deflate(Byte[] output, int offset, int length)
public void SetDictionary(Byte[] dict)
public void SetDictionary(Byte[] dict, int offset, int length)
}
public GameAnalyticsSDK.Net.Utilities.Zip.Compression.DeflaterConstants : object {
public bool DEBUGGING
public int STORED_BLOCK
public int STATIC_TREES
public int DYN_TREES
public int PRESET_DICT
public int DEFAULT_MEM_LEVEL
public int MAX_MATCH
public int MIN_MATCH
public int MAX_WBITS
public int WSIZE
public int WMASK
public int HASH_BITS
public int HASH_SIZE
public int HASH_MASK
public int HASH_SHIFT
public int MIN_LOOKAHEAD
public int MAX_DIST
public int PENDING_BUF_SIZE
public int MAX_BLOCK_SIZE
public int DEFLATE_STORED
public int DEFLATE_FAST
public int DEFLATE_SLOW
public Int32[] GOOD_LENGTH
public Int32[] MAX_LAZY
public Int32[] NICE_LENGTH
public Int32[] MAX_CHAIN
public Int32[] COMPR_FUNC
}
public GameAnalyticsSDK.Net.Utilities.Zip.Compression.DeflaterEngine : DeflaterConstants {
private int TOO_FAR
private int ins_h
private Int16[] head
private Int16[] prev
private int matchStart
private int matchLen
private bool prevAvailable
private int blockStart
private int strstart
private int lookahead
private Byte[] window
private DeflateStrategy strategy
private int max_chain
private int max_lazy
private int niceLength
private int goodLength
private int comprFunc
private Byte[] inputBuf
private int totalIn
private int inputOff
private int inputEnd
private DeflaterPending pending
private DeflaterHuffman huffman
private Adler32 adler
public int Adler
public int TotalIn
public DeflateStrategy Strategy
public void .ctor(DeflaterPending pending)
public void Reset()
public void ResetAdler()
public int get_Adler()
public int get_TotalIn()
public DeflateStrategy get_Strategy()
public void set_Strategy(DeflateStrategy value)
public void SetLevel(int lvl)
private void UpdateHash()
private int InsertString()
private void SlideWindow()
public void FillWindow()
private bool FindLongestMatch(int curMatch)
public void SetDictionary(Byte[] buffer, int offset, int length)
private bool DeflateStored(bool flush, bool finish)
private bool DeflateFast(bool flush, bool finish)
private bool DeflateSlow(bool flush, bool finish)
public bool Deflate(bool flush, bool finish)
public void SetInput(Byte[] buf, int off, int len)
public bool NeedsInput()
}
public GameAnalyticsSDK.Net.Utilities.Zip.Compression.DeflaterHuffman : object {
private int BUFSIZE
private int LITERAL_NUM
private int DIST_NUM
private int BITLEN_NUM
private int REP_3_6
private int REP_3_10
private int REP_11_138
private int EOF_SYMBOL
private Int32[] BL_ORDER
private Byte[] bit4Reverse
public DeflaterPending pending
private Tree literalTree
private Tree distTree
private Tree blTree
private Int16[] d_buf
private Byte[] l_buf
private int last_lit
private int extra_bits
private Int16[] staticLCodes
private Byte[] staticLLength
private Int16[] staticDCodes
private Byte[] staticDLength
public short BitReverse(int toReverse)
public void .ctor(DeflaterPending pending)
public void Reset()
private int Lcode(int len)
private int Dcode(int distance)
public void SendAllTrees(int blTreeCodes)
public void CompressBlock()
public void FlushStoredBlock(Byte[] stored, int storedOffset, int storedLength, bool lastBlock)
public void FlushBlock(Byte[] stored, int storedOffset, int storedLength, bool lastBlock)
public bool IsFull()
public bool TallyLit(int lit)
public bool TallyDist(int dist, int len)
}
public GameAnalyticsSDK.Net.Utilities.Zip.Compression.DeflateStrategy : Enum {
public int value__
public DeflateStrategy Default
public DeflateStrategy Filtered
public DeflateStrategy HuffmanOnly
}
public GameAnalyticsSDK.Net.Utilities.Zip.Compression.PendingBuffer : object {
protected Byte[] buf
private int start
private int end
private UInt32 bits
private int bitCount
public int BitCount
public bool IsFlushed
public void .ctor(int bufsize)
public void Reset()
public void WriteByte(int b)
public void WriteShort(int s)
public void WriteInt(int s)
public void WriteBlock(Byte[] block, int offset, int len)
public int get_BitCount()
public void AlignToByte()
public void WriteBits(int b, int count)
public void WriteShortMSB(int s)
public bool get_IsFlushed()
public int Flush(Byte[] output, int offset, int length)
public Byte[] ToByteArray()
}
public GameAnalyticsSDK.Net.Utilities.Zip.Compression.Streams.DeflaterOutputStream : Stream {
protected Byte[] buf
protected Deflater def
protected Stream baseOutputStream
private bool isClosed
private bool isStreamOwner
private string password
private UInt32[] keys
public bool IsStreamOwner
public bool CanPatchEntries
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public string Password
public bool get_IsStreamOwner()
public void set_IsStreamOwner(bool value)
public bool get_CanPatchEntries()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long val)
public int ReadByte()
public int Read(Byte[] b, int off, int len)
public IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
public IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state)
protected void Deflate()
public void .ctor(Stream baseOutputStream)
public void .ctor(Stream baseOutputStream, Deflater defl)
public void .ctor(Stream baseOutputStream, Deflater deflater, int bufsize)
public void Flush()
public void Finish()
public void Close()
public void WriteByte(byte bval)
public void Write(Byte[] buf, int off, int len)
public string get_Password()
public void set_Password(string value)
protected byte EncryptByte()
protected void EncryptBlock(Byte[] buffer, int offset, int length)
protected void InitializePassword(string password)
protected void UpdateKeys(byte ch)
}
public GameAnalyticsSDK.Net.Utilities.Zip.GZip.GZipConstants : object {
public int GZIP_MAGIC
public int FTEXT
public int FHCRC
public int FEXTRA
public int FNAME
public int FCOMMENT
}
public GameAnalyticsSDK.Net.Utilities.Zip.GZip.GZipOutputStream : DeflaterOutputStream {
protected Crc32 crc
public void .ctor(Stream baseOutputStream)
public void .ctor(Stream baseOutputStream, int size)
private void WriteHeader()
public void Write(Byte[] buf, int off, int len)
public void Close()
public void SetLevel(int level)
public int GetLevel()
public void Finish()
}
public GameAnalyticsSDK.Net.Utilities.Zip.SharpZipBaseException : Exception {
public void .ctor(string msg)
public void .ctor(string message, Exception innerException)
}
internal GameAnalyticsSDK.Net.Validators.GAValidator : object {
public bool ValidateBusinessEvent(string currency, long amount, string cartType, string itemType, string itemId)
public bool ValidateResourceEvent(EGAResourceFlowType flowType, string currency, long amount, string itemType, string itemId)
public bool ValidateProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, string progression03)
public bool ValidateDesignEvent(string eventId, double value)
public bool ValidateErrorEvent(EGAErrorSeverity severity, string message)
public bool ValidateSdkErrorEvent(string gameKey, string gameSecret, EGASdkErrorType type)
public bool ValidateKeys(string gameKey, string gameSecret)
public bool ValidateCurrency(string currency)
public bool ValidateEventPartLength(string eventPart, bool allowNull)
public bool ValidateEventPartCharacters(string eventPart)
public bool ValidateEventIdLength(string eventId)
public bool ValidateEventIdCharacters(string eventId)
public JSONObject ValidateAndCleanInitRequestResponse(JSONNode initResponse)
public bool ValidateBuild(string build)
public bool ValidateSdkWrapperVersion(string wrapperVersion)
public bool ValidateEngineVersion(string engineVersion)
public bool ValidateUserId(string uId)
public bool ValidateShortString(string shortString, bool canBeEmpty)
public bool ValidateString(string s, bool canBeEmpty)
public bool ValidateLongString(string longString, bool canBeEmpty)
public bool ValidateConnectionType(string connectionType)
public bool ValidateCustomDimensions(String[] customDimensions)
public bool ValidateResourceCurrencies(String[] resourceCurrencies)
public bool ValidateResourceItemTypes(String[] resourceItemTypes)
public bool ValidateDimension01(string dimension01)
public bool ValidateDimension02(string dimension02)
public bool ValidateDimension03(string dimension03)
public bool ValidateArrayOfStrings(long maxCount, long maxStringLength, bool allowNoValues, string logTag, String[] arrayOfStrings)
public bool ValidateFacebookId(string facebookId)
public bool ValidateGender(EGAGender gender)
public bool ValidateBirthyear(long birthYear)
public bool ValidateClientTs(long clientTs)
}
