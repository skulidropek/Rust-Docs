internal UnityEngine.UIElements.AddressMode : Enum {
public int value__
public AddressMode Wrap
public AddressMode Clamp
public AddressMode Mirror
}
public UnityEngine.UIElements.Align : Enum {
public int value__
public Align Auto
public Align FlexStart
public Align Center
public Align FlexEnd
public Align Stretch
}
public UnityEngine.UIElements.Background : ValueType {
private Texture2D m_Texture
private VectorImage m_VectorImage
public Texture2D texture
public VectorImage vectorImage
public Texture2D get_texture()
public void set_texture(Texture2D value)
public VectorImage get_vectorImage()
public void set_vectorImage(VectorImage value)
public void .ctor(Texture2D t)
public Background FromTexture2D(Texture2D t)
public Background FromVectorImage(VectorImage vi)
public bool op_Equality(Background lhs, Background rhs)
public bool op_Inequality(Background lhs, Background rhs)
public bool Equals(Background other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.BaseField`1 : BindableElement {
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string noLabelVariantUssClassName
public string labelDraggerVariantUssClassName
private VisualElement m_VisualInput
private TValueType m_Value
private Label <labelElement>k__BackingField
internal VisualElement visualInput
protected TValueType rawValue
public TValueType value
public Label labelElement
public string label
internal VisualElement get_visualInput()
internal void set_visualInput(VisualElement value)
protected TValueType get_rawValue()
protected void set_rawValue(TValueType value)
public TValueType get_value()
public void set_value(TValueType value)
public Label get_labelElement()
private void set_labelElement(Label value)
public string get_label()
public void set_label(string value)
internal void .ctor(string label)
protected void .ctor(string label, VisualElement visualInput)
public void SetValueWithoutNotify(TValueType newValue)
internal void OnViewDataReady()
}
public UnityEngine.UIElements.BaseFieldTraits`2 : UxmlTraits<TValueType> {
private TValueUxmlAttributeType m_Value
public void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.UIElements.BaseSlider`1 : BaseField`1<TValueType> {
private VisualElement <dragElement>k__BackingField
private VisualElement <dragBorderElement>k__BackingField
private TValueType m_LowValue
private TValueType m_HighValue
private float m_PageSize
private ClampedDragger`1<TValueType> <clampedDragger>k__BackingField
private Rect m_DragElementStartPos
private SliderDirection m_Direction
internal float kDefaultPageSize
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string horizontalVariantUssClassName
public string verticalVariantUssClassName
public string trackerUssClassName
public string draggerUssClassName
public string draggerBorderUssClassName
internal VisualElement dragElement
internal VisualElement dragBorderElement
public TValueType lowValue
public TValueType highValue
public TValueType range
public float pageSize
internal ClampedDragger`1<TValueType> clampedDragger
public TValueType value
public SliderDirection direction
internal VisualElement get_dragElement()
private void set_dragElement(VisualElement value)
internal VisualElement get_dragBorderElement()
private void set_dragBorderElement(VisualElement value)
public TValueType get_lowValue()
public void set_lowValue(TValueType value)
public TValueType get_highValue()
public void set_highValue(TValueType value)
public TValueType get_range()
public float get_pageSize()
public void set_pageSize(float value)
internal ClampedDragger`1<TValueType> get_clampedDragger()
private void set_clampedDragger(ClampedDragger`1<TValueType> value)
private TValueType Clamp(TValueType value, TValueType lowBound, TValueType highBound)
private TValueType GetClampedValue(TValueType newValue)
public TValueType get_value()
public void set_value(TValueType value)
public void SetValueWithoutNotify(TValueType newValue)
public SliderDirection get_direction()
public void set_direction(SliderDirection value)
internal void .ctor(string label, TValueType start, TValueType end, SliderDirection direction, float pageSize)
private void ClampValue()
internal TValueType SliderLerpUnclamped(TValueType a, TValueType b, float interpolant)
internal float SliderNormalizeValue(TValueType currentValue, TValueType lowerValue, TValueType higherValue)
internal TValueType SliderRange()
private void SetSliderValueFromDrag()
private void ComputeValueAndDirectionFromDrag(float sliderLength, float dragElementLength, float dragElementPos)
private void SetSliderValueFromClick()
internal void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos)
public void AdjustDragElement(float factor)
private void UpdateDragElementPosition(GeometryChangedEvent evt)
internal void OnViewDataReady()
private bool SameValues(float a, float b, float epsilon)
private void UpdateDragElementPosition()
protected void ExecuteDefaultAction(EventBase evt)
}
internal UnityEngine.UIElements.BaseVisualElementPanel : object {
private float m_Scale
private float m_PixelsPerPoint
private PanelClearFlags <clearFlags>k__BackingField
private bool <duringLayoutPhase>k__BackingField
private RepaintData <repaintData>k__BackingField
private ICursorManager <cursorManager>k__BackingField
private ContextualMenuManager <contextualMenuManager>k__BackingField
private bool <disposed>k__BackingField
internal ElementUnderPointer m_TopElementUnderPointers
private Action standardShaderChanged
private HierarchyEvent hierarchyChanged
public EventInterests IMGUIEventInterests
public ScriptableObject ownerObject
public SavePersistentViewData saveViewData
public GetViewDataDictionary getViewDataDictionary
public int IMGUIContainersCount
public IMGUIContainer rootIMGUIContainer
public FocusController focusController
internal float scale
internal float pixelsPerPoint
public float scaledPixelsPerPoint
internal PanelClearFlags clearFlags
internal bool duringLayoutPhase
internal bool isDirty
internal UInt32 version
internal UInt32 repaintVersion
internal RepaintData repaintData
internal ICursorManager cursorManager
public ContextualMenuManager contextualMenuManager
public VisualElement visualTree
public EventDispatcher dispatcher
internal IScheduler scheduler
public ContextType contextType
internal bool disposed
internal Shader standardShader
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
public ScriptableObject get_ownerObject()
protected void set_ownerObject(ScriptableObject value)
public SavePersistentViewData get_saveViewData()
public void set_saveViewData(SavePersistentViewData value)
public GetViewDataDictionary get_getViewDataDictionary()
public void set_getViewDataDictionary(GetViewDataDictionary value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
public IMGUIContainer get_rootIMGUIContainer()
public void set_rootIMGUIContainer(IMGUIContainer value)
public FocusController get_focusController()
public void set_focusController(FocusController value)
public void Dispose()
protected void Dispose(bool disposing)
public void Repaint(Event e)
public void ValidateLayout()
public void UpdateAnimations()
public void UpdateBindings()
public void ApplyStyles()
internal float get_scale()
internal void set_scale(float value)
internal float get_pixelsPerPoint()
internal void set_pixelsPerPoint(float value)
public float get_scaledPixelsPerPoint()
internal PanelClearFlags get_clearFlags()
internal void set_clearFlags(PanelClearFlags value)
internal bool get_duringLayoutPhase()
internal void set_duringLayoutPhase(bool value)
internal bool get_isDirty()
internal UInt32 get_version()
internal UInt32 get_repaintVersion()
internal void OnVersionChanged(VisualElement ele, VersionChangeType changeTypeFlag)
internal void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase)
internal RepaintData get_repaintData()
internal void set_repaintData(RepaintData value)
internal ICursorManager get_cursorManager()
internal void set_cursorManager(ICursorManager value)
public ContextualMenuManager get_contextualMenuManager()
internal void set_contextualMenuManager(ContextualMenuManager value)
internal Matrix4x4 GetProjection()
internal Rect GetViewport()
public VisualElement get_visualTree()
public EventDispatcher get_dispatcher()
protected void set_dispatcher(EventDispatcher value)
internal void SendEvent(EventBase e, DispatchMode dispatchMode)
internal IScheduler get_scheduler()
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public VisualElement Pick(Vector2 point)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
internal bool get_disposed()
private void set_disposed(bool value)
internal IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase)
internal VisualElement GetTopElementUnderPointer(int pointerId)
private void SetElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, Vector2 pointerPos)
internal void SetElementUnderPointer(VisualElement newElementUnderPointer, EventBase triggerEvent)
internal void ClearCachedElementUnderPointer(EventBase triggerEvent)
internal void CommitElementUnderPointers()
internal Shader get_standardShader()
internal void set_standardShader(Shader value)
internal void add_standardShaderChanged(Action value)
internal void remove_standardShaderChanged(Action value)
protected void InvokeStandardShaderChanged()
internal void add_hierarchyChanged(HierarchyEvent value)
internal void remove_hierarchyChanged(HierarchyEvent value)
internal void InvokeHierarchyChanged(VisualElement ve, HierarchyChangeType changeType)
internal void UpdateElementUnderPointers()
public void Update()
}
internal UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater : BaseVisualTreeUpdater {
private State m_State
private VisualElement m_CurrentChangeElement
private VisualElement m_CurrentChangeParent
protected void OnHierarchyChange(VisualElement ve, HierarchyChangeType type)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void ProcessNewChange(VisualElement ve)
private void ProcessAddOrMove(VisualElement ve)
private void ProcessRemove(VisualElement ve)
}
internal UnityEngine.UIElements.BaseVisualTreeUpdater : object {
private Action`1<BaseVisualElementPanel> panelChanged
private BaseVisualElementPanel m_Panel
public BaseVisualElementPanel panel
public VisualElement visualTree
public ProfilerMarker profilerMarker
public void add_panelChanged(Action`1<BaseVisualElementPanel> value)
public void remove_panelChanged(Action`1<BaseVisualElementPanel> value)
public BaseVisualElementPanel get_panel()
public void set_panel(BaseVisualElementPanel value)
public VisualElement get_visualTree()
public ProfilerMarker get_profilerMarker()
public void Dispose()
protected void Dispose(bool disposing)
public void Update()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
}
public UnityEngine.UIElements.BindableElement : VisualElement {
private IBinding <binding>k__BackingField
private string <bindingPath>k__BackingField
public IBinding binding
public string bindingPath
public IBinding get_binding()
public void set_binding(IBinding value)
public string get_bindingPath()
public void set_bindingPath(string value)
}
public UnityEngine.UIElements.BlurEvent : FocusEventBase`1<BlurEvent> {
protected internal void PreDispatch(IPanel panel)
}
public UnityEngine.UIElements.Box : VisualElement {
public string ussClassName
}
public UnityEngine.UIElements.Button : TextElement {
public string ussClassName
private Clickable m_Clickable
private string NonEmptyString
public Clickable clickable
public Clickable get_clickable()
public void set_clickable(Clickable value)
public void add_onClick(Action value)
public void remove_onClick(Action value)
public void add_clicked(Action value)
public void remove_clicked(Action value)
public void .ctor(Action clickEvent)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
}
public UnityEngine.UIElements.CallbackEventHandler : object {
private EventCallbackRegistry m_CallbackRegistry
public void RegisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public void RegisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TUserArgsType userArgs, TrickleDown useTrickleDown)
public void UnregisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public void UnregisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TrickleDown useTrickleDown)
internal bool TryGetUserArgs(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown, TCallbackArgs& userData)
public void SendEvent(EventBase e)
internal void HandleEventAtTargetPhase(EventBase evt)
public void HandleEvent(EventBase evt)
public bool HasTrickleDownHandlers()
public bool HasBubbleUpHandlers()
protected void ExecuteDefaultActionAtTarget(EventBase evt)
protected void ExecuteDefaultAction(EventBase evt)
}
internal UnityEngine.UIElements.CallbackPhase : Enum {
public int value__
public CallbackPhase TargetAndBubbleUp
public CallbackPhase TrickleDownAndTarget
}
public UnityEngine.UIElements.ChangeEvent`1 : EventBase`1<ChangeEvent`1<T>> {
private T <previousValue>k__BackingField
private T <newValue>k__BackingField
public T previousValue
public T newValue
public T get_previousValue()
protected void set_previousValue(T value)
public T get_newValue()
protected void set_newValue(T value)
protected void Init()
private void LocalInit()
public ChangeEvent`1<T> GetPooled(T previousValue, T newValue)
}
internal UnityEngine.UIElements.ClampedDragger`1 : Clickable {
private Action dragging
private DragDirection<T> <dragDirection>k__BackingField
private BaseSlider`1<T> <slider>k__BackingField
private Vector2 <startMousePosition>k__BackingField
public DragDirection<T> dragDirection
private BaseSlider`1<T> slider
public Vector2 startMousePosition
public Vector2 delta
public void add_dragging(Action value)
public void remove_dragging(Action value)
public DragDirection<T> get_dragDirection()
public void set_dragDirection(DragDirection<T> value)
private BaseSlider`1<T> get_slider()
private void set_slider(BaseSlider`1<T> value)
public Vector2 get_startMousePosition()
private void set_startMousePosition(Vector2 value)
public Vector2 get_delta()
public void .ctor(BaseSlider`1<T> slider, Action clickHandler, Action dragHandler)
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
private void OnMouseDown(MouseDownEvent evt)
private void OnMouseMove(MouseMoveEvent evt)
}
public UnityEngine.UIElements.Clickable : MouseManipulator {
private Action`1<EventBase> clickedWithEventInfo
private Action clicked
private long m_Delay
private long m_Interval
private bool <active>k__BackingField
private Vector2 <lastMousePosition>k__BackingField
private IVisualElementScheduledItem m_Repeater
protected bool active
public Vector2 lastMousePosition
public void add_clickedWithEventInfo(Action`1<EventBase> value)
public void remove_clickedWithEventInfo(Action`1<EventBase> value)
public void add_clicked(Action value)
public void remove_clicked(Action value)
protected bool get_active()
protected void set_active(bool value)
public Vector2 get_lastMousePosition()
private void set_lastMousePosition(Vector2 value)
public void .ctor(Action handler, long delay, long interval)
public void .ctor(Action`1<EventBase> handler)
public void .ctor(Action handler)
private void OnTimer(TimerState timerState)
private bool IsRepeatable()
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
private void Invoke(EventBase evt)
protected void OnMouseDown(MouseDownEvent evt)
protected void OnMouseMove(MouseMoveEvent evt)
protected void OnMouseUp(MouseUpEvent evt)
}
public UnityEngine.UIElements.CommandEventBase`1 : EventBase`1<T> {
private string m_CommandName
public string commandName
public string get_commandName()
protected void set_commandName(string value)
protected void Init()
private void LocalInit()
public T GetPooled(Event systemEvent)
public T GetPooled(string commandName)
}
internal UnityEngine.UIElements.CommandEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
internal UnityEngine.UIElements.ComputedStyle : ValueType {
private VisualElement m_Element
private VisualElementStylesData stylesData
private InheritedStylesData inheritedStylesData
public StyleLength width
public StyleLength height
public StyleLength maxWidth
public StyleLength maxHeight
public StyleLength minWidth
public StyleLength minHeight
public StyleLength flexBasis
public StyleFloat flexGrow
public StyleFloat flexShrink
public StyleEnum`1<FlexDirection> flexDirection
public StyleEnum`1<Wrap> flexWrap
public StyleEnum`1<Overflow> overflow
public StyleEnum`1<OverflowClipBox> unityOverflowClipBox
public StyleLength left
public StyleLength top
public StyleLength right
public StyleLength bottom
public StyleLength marginLeft
public StyleLength marginTop
public StyleLength marginRight
public StyleLength marginBottom
public StyleLength paddingLeft
public StyleLength paddingTop
public StyleLength paddingRight
public StyleLength paddingBottom
public StyleEnum`1<Position> position
public StyleEnum`1<Align> alignSelf
public StyleColor backgroundColor
public StyleBackground backgroundImage
public StyleEnum`1<ScaleMode> unityBackgroundScaleMode
public StyleColor unityBackgroundImageTintColor
public StyleEnum`1<Align> alignItems
public StyleEnum`1<Align> alignContent
public StyleEnum`1<Justify> justifyContent
public StyleColor borderLeftColor
public StyleColor borderTopColor
public StyleColor borderRightColor
public StyleColor borderBottomColor
public StyleFloat borderLeftWidth
public StyleFloat borderTopWidth
public StyleFloat borderRightWidth
public StyleFloat borderBottomWidth
public StyleLength borderTopLeftRadius
public StyleLength borderTopRightRadius
public StyleLength borderBottomRightRadius
public StyleLength borderBottomLeftRadius
public StyleInt unitySliceLeft
public StyleInt unitySliceTop
public StyleInt unitySliceRight
public StyleInt unitySliceBottom
public StyleFloat opacity
public StyleEnum`1<DisplayStyle> display
public StyleCursor cursor
public StyleColor color
public StyleFont unityFont
public StyleLength fontSize
public StyleEnum`1<FontStyle> unityFontStyleAndWeight
public StyleEnum`1<TextAnchor> unityTextAlign
public StyleEnum`1<Visibility> visibility
public StyleEnum`1<WhiteSpace> whiteSpace
private VisualElementStylesData get_stylesData()
private InheritedStylesData get_inheritedStylesData()
public void .ctor(VisualElement element)
public StyleLength get_width()
public StyleLength get_height()
public StyleLength get_maxWidth()
public StyleLength get_maxHeight()
public StyleLength get_minWidth()
public StyleLength get_minHeight()
public StyleLength get_flexBasis()
public StyleFloat get_flexGrow()
public StyleFloat get_flexShrink()
public StyleEnum`1<FlexDirection> get_flexDirection()
public StyleEnum`1<Wrap> get_flexWrap()
public StyleEnum`1<Overflow> get_overflow()
public StyleEnum`1<OverflowClipBox> get_unityOverflowClipBox()
public StyleLength get_left()
public StyleLength get_top()
public StyleLength get_right()
public StyleLength get_bottom()
public StyleLength get_marginLeft()
public StyleLength get_marginTop()
public StyleLength get_marginRight()
public StyleLength get_marginBottom()
public StyleLength get_paddingLeft()
public StyleLength get_paddingTop()
public StyleLength get_paddingRight()
public StyleLength get_paddingBottom()
public StyleEnum`1<Position> get_position()
public StyleEnum`1<Align> get_alignSelf()
public StyleColor get_backgroundColor()
public StyleBackground get_backgroundImage()
public StyleEnum`1<ScaleMode> get_unityBackgroundScaleMode()
public StyleColor get_unityBackgroundImageTintColor()
public StyleEnum`1<Align> get_alignItems()
public StyleEnum`1<Align> get_alignContent()
public StyleEnum`1<Justify> get_justifyContent()
public StyleColor get_borderLeftColor()
public StyleColor get_borderTopColor()
public StyleColor get_borderRightColor()
public StyleColor get_borderBottomColor()
public StyleFloat get_borderLeftWidth()
public StyleFloat get_borderTopWidth()
public StyleFloat get_borderRightWidth()
public StyleFloat get_borderBottomWidth()
public StyleLength get_borderTopLeftRadius()
public StyleLength get_borderTopRightRadius()
public StyleLength get_borderBottomRightRadius()
public StyleLength get_borderBottomLeftRadius()
public StyleInt get_unitySliceLeft()
public StyleInt get_unitySliceTop()
public StyleInt get_unitySliceRight()
public StyleInt get_unitySliceBottom()
public StyleFloat get_opacity()
public StyleEnum`1<DisplayStyle> get_display()
public StyleCursor get_cursor()
public StyleColor get_color()
public StyleFont get_unityFont()
public StyleLength get_fontSize()
public StyleEnum`1<FontStyle> get_unityFontStyleAndWeight()
public StyleEnum`1<TextAnchor> get_unityTextAlign()
public StyleEnum`1<Visibility> get_visibility()
public StyleEnum`1<WhiteSpace> get_whiteSpace()
public float CalculatePixelFontSize(VisualElement ve)
}
public UnityEngine.UIElements.ContextType : Enum {
public int value__
public ContextType Player
public ContextType Editor
}
public UnityEngine.UIElements.ContextualMenuManager : object {
public void DisplayMenuIfEventMatches(EventBase evt, IEventHandler eventHandler)
public void DisplayMenu(EventBase triggerEvent, IEventHandler target)
protected internal void DoDisplayMenu(DropdownMenu menu, EventBase triggerEvent)
}
public UnityEngine.UIElements.ContextualMenuManipulator : MouseManipulator {
private Action`1<ContextualMenuPopulateEvent> m_MenuBuilder
public void .ctor(Action`1<ContextualMenuPopulateEvent> menuBuilder)
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
private void OnMouseUpDownEvent(IMouseEvent evt)
private void OnKeyUpEvent(KeyUpEvent evt)
private void OnContextualMenuEvent(ContextualMenuPopulateEvent evt)
}
public UnityEngine.UIElements.ContextualMenuPopulateEvent : MouseEventBase`1<ContextualMenuPopulateEvent> {
private DropdownMenu <menu>k__BackingField
private EventBase <triggerEvent>k__BackingField
private ContextualMenuManager m_ContextualMenuManager
public DropdownMenu menu
public EventBase triggerEvent
public DropdownMenu get_menu()
private void set_menu(DropdownMenu value)
public EventBase get_triggerEvent()
private void set_triggerEvent(EventBase value)
public ContextualMenuPopulateEvent GetPooled(EventBase triggerEvent, DropdownMenu menu, IEventHandler target, ContextualMenuManager menuManager)
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.CreationContext : ValueType {
public CreationContext Default
private VisualElement <target>k__BackingField
private VisualTreeAsset <visualTreeAsset>k__BackingField
private Dictionary`2<string, VisualElement> <slotInsertionPoints>k__BackingField
private List`1<AttributeOverride> <attributeOverrides>k__BackingField
public VisualElement target
public VisualTreeAsset visualTreeAsset
public Dictionary`2<string, VisualElement> slotInsertionPoints
internal List`1<AttributeOverride> attributeOverrides
public VisualElement get_target()
private void set_target(VisualElement value)
public VisualTreeAsset get_visualTreeAsset()
private void set_visualTreeAsset(VisualTreeAsset value)
public Dictionary`2<string, VisualElement> get_slotInsertionPoints()
private void set_slotInsertionPoints(Dictionary`2<string, VisualElement> value)
internal List`1<AttributeOverride> get_attributeOverrides()
private void set_attributeOverrides(List`1<AttributeOverride> value)
internal void .ctor(Dictionary`2<string, VisualElement> slotInsertionPoints, VisualTreeAsset vta, VisualElement target)
internal void .ctor(Dictionary`2<string, VisualElement> slotInsertionPoints, List`1<AttributeOverride> attributeOverrides, VisualTreeAsset vta, VisualElement target)
public bool Equals(object obj)
public bool Equals(CreationContext other)
public int GetHashCode()
public bool op_Equality(CreationContext context1, CreationContext context2)
public bool op_Inequality(CreationContext context1, CreationContext context2)
}
public UnityEngine.UIElements.Cursor : ValueType {
private Texture2D <texture>k__BackingField
private Vector2 <hotspot>k__BackingField
private int <defaultCursorId>k__BackingField
public Texture2D texture
public Vector2 hotspot
internal int defaultCursorId
public Texture2D get_texture()
public void set_texture(Texture2D value)
public Vector2 get_hotspot()
public void set_hotspot(Vector2 value)
internal int get_defaultCursorId()
internal void set_defaultCursorId(int value)
public bool Equals(object obj)
public bool Equals(Cursor other)
public int GetHashCode()
public bool op_Equality(Cursor style1, Cursor style2)
public bool op_Inequality(Cursor style1, Cursor style2)
public string ToString()
}
internal UnityEngine.UIElements.CursorManager : object {
public void SetCursor(Cursor cursor)
public void ResetCursor()
}
internal UnityEngine.UIElements.CursorPositionStylePainterParameters : ValueType {
public Rect rect
public string text
public Font font
public int fontSize
public FontStyle fontStyle
public TextAnchor anchor
public float wordWrapWidth
public bool richText
public int cursorIndex
public CursorPositionStylePainterParameters GetDefault(VisualElement ve, string text)
internal TextNativeSettings GetTextNativeSettings(float scaling)
}
public UnityEngine.UIElements.CustomStyleProperty`1 : ValueType {
private string <name>k__BackingField
public string name
public string get_name()
private void set_name(string value)
public void .ctor(string propertyName)
public bool Equals(object obj)
public bool Equals(CustomStyleProperty`1<T> other)
public int GetHashCode()
public bool op_Equality(CustomStyleProperty`1<T> a, CustomStyleProperty`1<T> b)
public bool op_Inequality(CustomStyleProperty`1<T> a, CustomStyleProperty`1<T> b)
}
public UnityEngine.UIElements.CustomStyleResolvedEvent : EventBase`1<CustomStyleResolvedEvent> {
public ICustomStyle customStyle
public ICustomStyle get_customStyle()
}
internal UnityEngine.UIElements.DebuggerEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
public void PostDispatch(EventBase evt, IPanel panel)
}
internal UnityEngine.UIElements.DefaultDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
internal UnityEngine.UIElements.DispatchMode : Enum {
public int value__
public DispatchMode Default
public DispatchMode Queued
public DispatchMode Immediate
}
public UnityEngine.UIElements.DisplayStyle : Enum {
public int value__
public DisplayStyle Flex
public DisplayStyle None
}
internal UnityEngine.UIElements.DisposeHelper : object {
public void NotifyMissingDispose(IDisposable disposable)
public void NotifyDisposedUsed(IDisposable disposable)
}
public UnityEngine.UIElements.DragEnterEvent : DragAndDropEventBase`1<DragEnterEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.DragExitedEvent : DragAndDropEventBase`1<DragExitedEvent> {
protected void Init()
private void LocalInit()
public DragExitedEvent GetPooled(Event systemEvent)
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.DragLeaveEvent : DragAndDropEventBase`1<DragLeaveEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.DragUpdatedEvent : DragAndDropEventBase`1<DragUpdatedEvent> {
public DragUpdatedEvent GetPooled(Event systemEvent)
internal DragUpdatedEvent GetPooled(PointerMoveEvent pointerEvent)
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.DropdownMenu : object {
private List`1<DropdownMenuItem> menuItems
private DropdownMenuEventInfo m_DropdownMenuEventInfo
public List`1<DropdownMenuItem> MenuItems()
public void AppendAction(string actionName, Action`1<DropdownMenuAction> action, Func`2<DropdownMenuAction, Status> actionStatusCallback, object userData)
public void AppendAction(string actionName, Action`1<DropdownMenuAction> action, Status status)
public void InsertAction(int atIndex, string actionName, Action`1<DropdownMenuAction> action, Func`2<DropdownMenuAction, Status> actionStatusCallback, object userData)
public void InsertAction(int atIndex, string actionName, Action`1<DropdownMenuAction> action, Status status)
public void AppendSeparator(string subMenuPath)
public void InsertSeparator(string subMenuPath, int atIndex)
public void RemoveItemAt(int index)
public void PrepareForDisplay(EventBase e)
}
public UnityEngine.UIElements.DropdownMenuAction : DropdownMenuItem {
private string <name>k__BackingField
private Status <status>k__BackingField
private DropdownMenuEventInfo <eventInfo>k__BackingField
private object <userData>k__BackingField
private Action`1<DropdownMenuAction> actionCallback
private Func`2<DropdownMenuAction, Status> actionStatusCallback
public string name
public Status status
public DropdownMenuEventInfo eventInfo
public object userData
public string get_name()
public Status get_status()
private void set_status(Status value)
public DropdownMenuEventInfo get_eventInfo()
private void set_eventInfo(DropdownMenuEventInfo value)
public object get_userData()
private void set_userData(object value)
public Status AlwaysEnabled(DropdownMenuAction a)
public Status AlwaysDisabled(DropdownMenuAction a)
public void .ctor(string actionName, Action`1<DropdownMenuAction> actionCallback, Func`2<DropdownMenuAction, Status> actionStatusCallback, object userData)
public void UpdateActionStatus(DropdownMenuEventInfo eventInfo)
public void Execute()
}
public UnityEngine.UIElements.DropdownMenuEventInfo : object {
private EventModifiers <modifiers>k__BackingField
private Vector2 <mousePosition>k__BackingField
private Vector2 <localMousePosition>k__BackingField
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
private char character
private KeyCode keyCode
public EventModifiers get_modifiers()
public Vector2 get_mousePosition()
public Vector2 get_localMousePosition()
private char get_character()
private KeyCode get_keyCode()
public void .ctor(EventBase e)
}
public UnityEngine.UIElements.DropdownMenuSeparator : DropdownMenuItem {
private string <subMenuPath>k__BackingField
public string subMenuPath
public string get_subMenuPath()
public void .ctor(string subMenuPath)
}
internal UnityEngine.UIElements.ElementUnderPointer : object {
private VisualElement[] m_PendingTopElementUnderPointer
private VisualElement[] m_TopElementUnderPointer
private IPointerEvent[] m_TriggerPointerEvent
private IMouseEvent[] m_TriggerMouseEvent
private Vector2[] m_PickingPointerPositions
private Boolean[] m_IsPickingPointerTemporaries
internal VisualElement GetTopElementUnderPointer(int pointerId, Vector2& pickPosition, Boolean& isTemporary)
internal VisualElement GetTopElementUnderPointer(int pointerId)
internal void SetElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, Vector2 pointerPos)
private Vector2 GetEventPointerPosition(EventBase triggerEvent)
internal void SetTemporaryElementUnderPointer(VisualElement newElementUnderPointer, EventBase triggerEvent)
internal void SetElementUnderPointer(VisualElement newElementUnderPointer, EventBase triggerEvent)
private void SetElementUnderPointer(VisualElement newElementUnderPointer, EventBase triggerEvent, bool temporary)
internal void CommitElementUnderPointers(EventDispatcher dispatcher)
}
public UnityEngine.UIElements.EventBase : object {
private long s_LastTypeId
private ulong s_NextEventId
private long <timestamp>k__BackingField
private ulong <eventId>k__BackingField
private ulong <triggerEventId>k__BackingField
private EventPropagation <propagation>k__BackingField
private PropagationPaths m_Path
private bool <doNotSendToRootIMGUIContainer>k__BackingField
private LifeCycleStatus <lifeCycleStatus>k__BackingField
private IEventHandler <leafTarget>k__BackingField
private IEventHandler m_Target
private List`1<IEventHandler> <skipElements>k__BackingField
private PropagationPhase <propagationPhase>k__BackingField
private IEventHandler m_CurrentTarget
private Event m_ImguiEvent
private Vector2 <originalMousePosition>k__BackingField
public long eventTypeId
public long timestamp
internal ulong eventId
internal ulong triggerEventId
internal EventPropagation propagation
internal PropagationPaths path
internal bool doNotSendToRootIMGUIContainer
private LifeCycleStatus lifeCycleStatus
public bool bubbles
public bool tricklesDown
internal IEventHandler leafTarget
public IEventHandler target
internal List`1<IEventHandler> skipElements
public bool isPropagationStopped
public bool isImmediatePropagationStopped
public bool isDefaultPrevented
public PropagationPhase propagationPhase
public IEventHandler currentTarget
public bool dispatch
private bool dispatched
internal bool processed
internal bool stopDispatch
internal bool propagateToIMGUI
private bool imguiEventIsValid
public Event imguiEvent
public Vector2 originalMousePosition
protected bool pooled
protected long RegisterEventType()
public long get_eventTypeId()
public long get_timestamp()
private void set_timestamp(long value)
internal ulong get_eventId()
private void set_eventId(ulong value)
internal ulong get_triggerEventId()
private void set_triggerEventId(ulong value)
internal void SetTriggerEventId(ulong id)
internal EventPropagation get_propagation()
internal void set_propagation(EventPropagation value)
internal PropagationPaths get_path()
internal void set_path(PropagationPaths value)
internal bool get_doNotSendToRootIMGUIContainer()
internal void set_doNotSendToRootIMGUIContainer(bool value)
private LifeCycleStatus get_lifeCycleStatus()
private void set_lifeCycleStatus(LifeCycleStatus value)
protected void PreDispatch()
protected internal void PreDispatch(IPanel panel)
protected void PostDispatch()
protected internal void PostDispatch(IPanel panel)
public bool get_bubbles()
public bool get_tricklesDown()
internal IEventHandler get_leafTarget()
private void set_leafTarget(IEventHandler value)
public IEventHandler get_target()
public void set_target(IEventHandler value)
internal List`1<IEventHandler> get_skipElements()
internal bool Skip(IEventHandler h)
public bool get_isPropagationStopped()
private void set_isPropagationStopped(bool value)
public void StopPropagation()
public bool get_isImmediatePropagationStopped()
private void set_isImmediatePropagationStopped(bool value)
public void StopImmediatePropagation()
public bool get_isDefaultPrevented()
private void set_isDefaultPrevented(bool value)
public void PreventDefault()
public PropagationPhase get_propagationPhase()
internal void set_propagationPhase(PropagationPhase value)
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
public bool get_dispatch()
internal void set_dispatch(bool value)
internal void MarkReceivedByDispatcher()
private bool get_dispatched()
private void set_dispatched(bool value)
internal bool get_processed()
private void set_processed(bool value)
internal bool get_stopDispatch()
internal void set_stopDispatch(bool value)
internal bool get_propagateToIMGUI()
internal void set_propagateToIMGUI(bool value)
private bool get_imguiEventIsValid()
private void set_imguiEventIsValid(bool value)
public Event get_imguiEvent()
protected void set_imguiEvent(Event value)
public Vector2 get_originalMousePosition()
private void set_originalMousePosition(Vector2 value)
protected void Init()
private void LocalInit()
protected bool get_pooled()
protected void set_pooled(bool value)
internal void Acquire()
public void Dispose()
}
public UnityEngine.UIElements.EventBase`1 : EventBase {
private long s_TypeId
private ObjectPool`1<T> s_Pool
private int m_RefCount
public long eventTypeId
public long TypeId()
protected void Init()
public T GetPooled()
internal T GetPooled(EventBase e)
private void ReleasePooled(T evt)
internal void Acquire()
public void Dispose()
public long get_eventTypeId()
}
public UnityEngine.UIElements.EventCallback`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(TEventType evt)
public IAsyncResult BeginInvoke(TEventType evt, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.UIElements.EventCallback`2 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(TEventType evt, TCallbackArgs userArgs)
public IAsyncResult BeginInvoke(TEventType evt, TCallbackArgs userArgs, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.UIElements.EventCallbackFunctor`1 : EventCallbackFunctorBase {
private EventCallback`1<TEventType> m_Callback
private long m_EventTypeId
public void .ctor(EventCallback`1<TEventType> callback, CallbackPhase phase)
public void Invoke(EventBase evt)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
}
internal UnityEngine.UIElements.EventCallbackFunctor`2 : EventCallbackFunctorBase {
private EventCallback`2<TEventType, TCallbackArgs> m_Callback
private long m_EventTypeId
private TCallbackArgs <userArgs>k__BackingField
internal TCallbackArgs userArgs
internal TCallbackArgs get_userArgs()
internal void set_userArgs(TCallbackArgs value)
public void .ctor(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, CallbackPhase phase)
public void Invoke(EventBase evt)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
}
internal UnityEngine.UIElements.EventCallbackFunctorBase : object {
private CallbackPhase <phase>k__BackingField
public CallbackPhase phase
public CallbackPhase get_phase()
private void set_phase(CallbackPhase value)
protected void .ctor(CallbackPhase phase)
public void Invoke(EventBase evt)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
protected bool PhaseMatches(EventBase evt)
}
internal UnityEngine.UIElements.EventCallbackList : object {
private List`1<EventCallbackFunctorBase> m_List
private int <trickleDownCallbackCount>k__BackingField
private int <bubbleUpCallbackCount>k__BackingField
public int trickleDownCallbackCount
public int bubbleUpCallbackCount
public int Count
public EventCallbackFunctorBase Item
public int get_trickleDownCallbackCount()
private void set_trickleDownCallbackCount(int value)
public int get_bubbleUpCallbackCount()
private void set_bubbleUpCallbackCount(int value)
public void .ctor(EventCallbackList source)
public bool Contains(long eventTypeId, Delegate callback, CallbackPhase phase)
public EventCallbackFunctorBase Find(long eventTypeId, Delegate callback, CallbackPhase phase)
public bool Remove(long eventTypeId, Delegate callback, CallbackPhase phase)
public void Add(EventCallbackFunctorBase item)
public void AddRange(EventCallbackList list)
public int get_Count()
public EventCallbackFunctorBase get_Item(int i)
public void set_Item(int i, EventCallbackFunctorBase value)
public void Clear()
}
internal UnityEngine.UIElements.EventCallbackListPool : object {
private Stack`1<EventCallbackList> m_Stack
public EventCallbackList Get(EventCallbackList initializer)
public void Release(EventCallbackList element)
}
internal UnityEngine.UIElements.EventCallbackRegistry : object {
private EventCallbackListPool s_ListPool
private EventCallbackList m_Callbacks
private EventCallbackList m_TemporaryCallbacks
private int m_IsInvoking
private EventCallbackList GetCallbackList(EventCallbackList initializer)
private void ReleaseCallbackList(EventCallbackList toRelease)
private EventCallbackList GetCallbackListForWriting()
private EventCallbackList GetCallbackListForReading()
private bool ShouldRegisterCallback(long eventTypeId, Delegate callback, CallbackPhase phase)
private bool UnregisterCallback(long eventTypeId, Delegate callback, TrickleDown useTrickleDown)
public void RegisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public void RegisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, TrickleDown useTrickleDown)
public bool UnregisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public bool UnregisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown)
internal bool TryGetUserArgs(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown, TCallbackArgs& userArgs)
public void InvokeCallbacks(EventBase evt)
public bool HasTrickleDownHandlers()
public bool HasBubbleHandlers()
}
internal UnityEngine.UIElements.EventDebugger : object {
private IPanel <panel>k__BackingField
private Dictionary`2<IPanel, List`1<EventDebuggerCallTrace>> m_EventCalledObjects
private Dictionary`2<IPanel, List`1<EventDebuggerDefaultActionTrace>> m_EventDefaultActionObjects
private Dictionary`2<IPanel, List`1<EventDebuggerPathTrace>> m_EventPathObjects
private Dictionary`2<IPanel, List`1<EventDebuggerTrace>> m_EventProcessedEvents
private Dictionary`2<IPanel, Stack`1<EventDebuggerTrace>> m_StackOfProcessedEvent
private Dictionary`2<IPanel, long> m_ModificationCount
private bool m_Log
public IPanel panel
public IPanel get_panel()
public void set_panel(IPanel value)
public void UpdateModificationCount()
public void BeginProcessEvent(EventBase evt, IEventHandler mouseCapture)
public void EndProcessEvent(EventBase evt, long duration, IEventHandler mouseCapture)
public void LogCall(int cbHashCode, string cbName, EventBase evt, bool propagationHasStopped, bool immediatePropagationHasStopped, bool defaultHasBeenPrevented, long duration, IEventHandler mouseCapture)
public void LogIMGUICall(EventBase evt, long duration, IEventHandler mouseCapture)
public void LogExecuteDefaultAction(EventBase evt, PropagationPhase phase, long duration, IEventHandler mouseCapture)
public void LogPropagationPaths(EventBase evt, PropagationPaths paths)
private void LogPropagationPathsInternal(EventBase evt, PropagationPaths paths)
public List`1<EventDebuggerCallTrace> GetCalls(IPanel panel, EventDebuggerEventRecord evt)
public List`1<EventDebuggerDefaultActionTrace> GetDefaultActions(IPanel panel, EventDebuggerEventRecord evt)
public List`1<EventDebuggerPathTrace> GetPropagationPaths(IPanel panel, EventDebuggerEventRecord evt)
public List`1<EventDebuggerTrace> GetBeginEndProcessedEvents(IPanel panel, EventDebuggerEventRecord evt)
public long GetModificationCount(IPanel panel)
public void ClearLogs()
public void ReplayEvents(List`1<EventDebuggerEventRecord> eventBases)
public Dictionary`2<string, long> ComputeHistogram(List`1<EventDebuggerEventRecord> eventBases)
private void AddCallObject(int cbHashCode, string cbName, EventBase evt, bool propagationHasStopped, bool immediatePropagationHasStopped, bool defaultHasBeenPrevented, long duration, IEventHandler mouseCapture)
private void AddExecuteDefaultAction(EventBase evt, PropagationPhase phase, long duration, IEventHandler mouseCapture)
private void AddPropagationPaths(EventBase evt, PropagationPaths paths)
private void AddIMGUICall(EventBase evt, long duration, IEventHandler mouseCapture)
private void AddBeginProcessEvent(EventBase evt, IEventHandler mouseCapture)
private void AddEndProcessEvent(EventBase evt, long duration, IEventHandler mouseCapture)
public string GetObjectDisplayName(object obj, bool withHashCode)
}
internal UnityEngine.UIElements.EventDebuggerCallTrace : EventDebuggerTrace {
private int <callbackHashCode>k__BackingField
private string <callbackName>k__BackingField
private bool <propagationHasStopped>k__BackingField
private bool <immediatePropagationHasStopped>k__BackingField
private bool <defaultHasBeenPrevented>k__BackingField
public int callbackHashCode
public string callbackName
public bool propagationHasStopped
public bool immediatePropagationHasStopped
public bool defaultHasBeenPrevented
public int get_callbackHashCode()
public string get_callbackName()
public bool get_propagationHasStopped()
public bool get_immediatePropagationHasStopped()
public bool get_defaultHasBeenPrevented()
public void .ctor(IPanel panel, EventBase evt, int cbHashCode, string cbName, bool propagationHasStopped, bool immediatePropagationHasStopped, bool defaultHasBeenPrevented, long duration, IEventHandler mouseCapture)
}
internal UnityEngine.UIElements.EventDebuggerDefaultActionTrace : EventDebuggerTrace {
private PropagationPhase <phase>k__BackingField
public PropagationPhase phase
public string targetName
public PropagationPhase get_phase()
public string get_targetName()
public void .ctor(IPanel panel, EventBase evt, PropagationPhase phase, long duration, IEventHandler mouseCapture)
}
internal UnityEngine.UIElements.EventDebuggerEventRecord : object {
private string <eventBaseName>k__BackingField
private long <eventTypeId>k__BackingField
private ulong <eventId>k__BackingField
private ulong <triggerEventId>k__BackingField
private long <timestamp>k__BackingField
private IEventHandler <target>k__BackingField
private List`1<IEventHandler> <skipElements>k__BackingField
private bool <hasUnderlyingPhysicalEvent>k__BackingField
private bool <isPropagationStopped>k__BackingField
private bool <isImmediatePropagationStopped>k__BackingField
private bool <isDefaultPrevented>k__BackingField
private PropagationPhase <propagationPhase>k__BackingField
private IEventHandler <currentTarget>k__BackingField
private bool <dispatch>k__BackingField
private Vector2 <originalMousePosition>k__BackingField
private EventModifiers <modifiers>k__BackingField
private Vector2 <mousePosition>k__BackingField
private int <clickCount>k__BackingField
private int <button>k__BackingField
private Vector3 <delta>k__BackingField
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
private string <commandName>k__BackingField
public string eventBaseName
public long eventTypeId
public ulong eventId
private ulong triggerEventId
private long timestamp
public IEventHandler target
private List`1<IEventHandler> skipElements
public bool hasUnderlyingPhysicalEvent
private bool isPropagationStopped
private bool isImmediatePropagationStopped
private bool isDefaultPrevented
public PropagationPhase propagationPhase
private IEventHandler currentTarget
private bool dispatch
private Vector2 originalMousePosition
public EventModifiers modifiers
public Vector2 mousePosition
public int clickCount
public int button
public Vector3 delta
public char character
public KeyCode keyCode
public string commandName
public string get_eventBaseName()
private void set_eventBaseName(string value)
public long get_eventTypeId()
private void set_eventTypeId(long value)
public ulong get_eventId()
private void set_eventId(ulong value)
private ulong get_triggerEventId()
private void set_triggerEventId(ulong value)
private long get_timestamp()
private void set_timestamp(long value)
public IEventHandler get_target()
private void set_target(IEventHandler value)
private List`1<IEventHandler> get_skipElements()
private void set_skipElements(List`1<IEventHandler> value)
public bool get_hasUnderlyingPhysicalEvent()
private void set_hasUnderlyingPhysicalEvent(bool value)
private bool get_isPropagationStopped()
private void set_isPropagationStopped(bool value)
private bool get_isImmediatePropagationStopped()
private void set_isImmediatePropagationStopped(bool value)
private bool get_isDefaultPrevented()
private void set_isDefaultPrevented(bool value)
public PropagationPhase get_propagationPhase()
private void set_propagationPhase(PropagationPhase value)
private IEventHandler get_currentTarget()
private void set_currentTarget(IEventHandler value)
private bool get_dispatch()
private void set_dispatch(bool value)
private Vector2 get_originalMousePosition()
private void set_originalMousePosition(Vector2 value)
public EventModifiers get_modifiers()
private void set_modifiers(EventModifiers value)
public Vector2 get_mousePosition()
private void set_mousePosition(Vector2 value)
public int get_clickCount()
private void set_clickCount(int value)
public int get_button()
private void set_button(int value)
public Vector3 get_delta()
private void set_delta(Vector3 value)
public char get_character()
private void set_character(char value)
public KeyCode get_keyCode()
private void set_keyCode(KeyCode value)
public string get_commandName()
private void set_commandName(string value)
private void Init(EventBase evt)
public void .ctor(EventBase evt)
public string TimestampString()
}
internal UnityEngine.UIElements.EventDebuggerLogCall : ValueType {
public void .ctor(Delegate callback, EventBase evt)
public void Dispose()
}
internal UnityEngine.UIElements.EventDebuggerLogExecuteDefaultAction : ValueType {
public void .ctor(EventBase evt)
public void Dispose()
}
internal UnityEngine.UIElements.EventDebuggerLogIMGUICall : ValueType {
public void .ctor(EventBase evt)
public void Dispose()
}
internal UnityEngine.UIElements.EventDebuggerPathTrace : EventDebuggerTrace {
private PropagationPaths <paths>k__BackingField
public PropagationPaths paths
public PropagationPaths get_paths()
public void .ctor(IPanel panel, EventBase evt, PropagationPaths paths)
}
internal UnityEngine.UIElements.EventDebuggerTrace : object {
private EventDebuggerEventRecord <eventBase>k__BackingField
private IEventHandler <focusedElement>k__BackingField
private IEventHandler <mouseCapture>k__BackingField
private long <duration>k__BackingField
public EventDebuggerEventRecord eventBase
public IEventHandler focusedElement
public IEventHandler mouseCapture
public long duration
public EventDebuggerEventRecord get_eventBase()
public IEventHandler get_focusedElement()
public IEventHandler get_mouseCapture()
public long get_duration()
public void set_duration(long value)
public void .ctor(IPanel panel, EventBase evt, long duration, IEventHandler mouseCapture)
}
public UnityEngine.UIElements.EventDispatcher : object {
private List`1<IEventDispatchingStrategy> m_DispatchingStrategies
private ObjectPool`1<Queue`1<EventRecord>> k_EventQueuePool
private Queue`1<EventRecord> m_Queue
private PointerDispatchState <pointerState>k__BackingField
private UInt32 m_GateCount
private Stack`1<DispatchContext> m_DispatchContexts
private bool m_Immediate
internal PointerDispatchState pointerState
private bool dispatchImmediately
internal PointerDispatchState get_pointerState()
private bool get_dispatchImmediately()
internal void Dispatch(EventBase evt, IPanel panel, DispatchMode dispatchMode)
internal void PushDispatcherContext()
internal void PopDispatcherContext()
internal void CloseGate()
internal void OpenGate()
private void ProcessEventQueue()
private void ProcessEvent(EventBase evt, IPanel panel)
private void ApplyDispatchingStrategies(EventBase evt, IPanel panel, bool imguiEventIsInitiallyUsed)
}
public UnityEngine.UIElements.EventDispatcherGate : ValueType {
private EventDispatcher m_Dispatcher
public void .ctor(EventDispatcher d)
public void Dispose()
public bool Equals(EventDispatcherGate other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(EventDispatcherGate left, EventDispatcherGate right)
public bool op_Inequality(EventDispatcherGate left, EventDispatcherGate right)
}
internal UnityEngine.UIElements.EventDispatchUtilities : object {
public void PropagateEvent(EventBase evt)
internal void PropagateToIMGUIContainer(VisualElement root, EventBase evt)
public void ExecuteDefaultAction(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.Experimental.Easing : object {
private float HalfPi
public float Step(float t)
public float Linear(float t)
public float InSine(float t)
public float OutSine(float t)
public float InOutSine(float t)
public float InQuad(float t)
public float OutQuad(float t)
public float InOutQuad(float t)
public float InCubic(float t)
public float OutCubic(float t)
public float InOutCubic(float t)
public float InPower(float t, int power)
public float OutPower(float t, int power)
public float InOutPower(float t, int power)
public float InBounce(float t)
public float OutBounce(float t)
public float InOutBounce(float t)
public float InElastic(float t)
public float OutElastic(float t)
public float InOutElastic(float t)
public float InBack(float t)
public float OutBack(float t)
public float InOutBack(float t)
public float InBack(float t, float s)
public float OutBack(float t, float s)
public float InOutBack(float t, float s)
public float InCirc(float t)
public float OutCirc(float t)
public float InOutCirc(float t)
}
public UnityEngine.UIElements.Experimental.ITransitionAnimations {
public ValueAnimation`1<float> Start(float from, float to, int durationMs, Action`2<VisualElement, float> onValueChanged)
public ValueAnimation`1<Rect> Start(Rect from, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged)
public ValueAnimation`1<Color> Start(Color from, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged)
public ValueAnimation`1<Vector3> Start(Vector3 from, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged)
public ValueAnimation`1<Vector2> Start(Vector2 from, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged)
public ValueAnimation`1<Quaternion> Start(Quaternion from, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged)
public ValueAnimation`1<StyleValues> Start(StyleValues from, StyleValues to, int durationMs)
public ValueAnimation`1<StyleValues> Start(StyleValues to, int durationMs)
public ValueAnimation`1<float> Start(Func`2<VisualElement, float> fromValueGetter, float to, int durationMs, Action`2<VisualElement, float> onValueChanged)
public ValueAnimation`1<Rect> Start(Func`2<VisualElement, Rect> fromValueGetter, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged)
public ValueAnimation`1<Color> Start(Func`2<VisualElement, Color> fromValueGetter, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged)
public ValueAnimation`1<Vector3> Start(Func`2<VisualElement, Vector3> fromValueGetter, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged)
public ValueAnimation`1<Vector2> Start(Func`2<VisualElement, Vector2> fromValueGetter, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged)
public ValueAnimation`1<Quaternion> Start(Func`2<VisualElement, Quaternion> fromValueGetter, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged)
public ValueAnimation`1<Rect> Layout(Rect to, int durationMs)
public ValueAnimation`1<Vector2> TopLeft(Vector2 to, int durationMs)
public ValueAnimation`1<Vector2> Size(Vector2 to, int durationMs)
public ValueAnimation`1<float> Scale(float to, int duration)
public ValueAnimation`1<Vector3> Position(Vector3 to, int duration)
public ValueAnimation`1<Quaternion> Rotation(Quaternion to, int duration)
}
public UnityEngine.UIElements.Experimental.IValueAnimation {
public bool isRunning
public int durationMs
public void Start()
public void Stop()
public void Recycle()
public bool get_isRunning()
public int get_durationMs()
public void set_durationMs(int value)
}
internal UnityEngine.UIElements.Experimental.IValueAnimationUpdate {
public void Tick(long currentTimeMs)
}
internal UnityEngine.UIElements.Experimental.Lerp : object {
public float Interpolate(float start, float end, float ratio)
public int Interpolate(int start, int end, float ratio)
public Rect Interpolate(Rect r1, Rect r2, float ratio)
public Color Interpolate(Color start, Color end, float ratio)
public Vector2 Interpolate(Vector2 start, Vector2 end, float ratio)
public Vector3 Interpolate(Vector3 start, Vector3 end, float ratio)
public Quaternion Interpolate(Quaternion start, Quaternion end, float ratio)
internal StyleValues Interpolate(StyleValues start, StyleValues end, float ratio)
}
public UnityEngine.UIElements.Experimental.StyleValues : ValueType {
internal StyleValueCollection m_StyleValues
public float top
public float left
public float width
public float height
public float right
public float bottom
public Color color
public Color backgroundColor
public Color unityBackgroundImageTintColor
public Color borderColor
public float marginLeft
public float marginTop
public float marginRight
public float marginBottom
public float paddingLeft
public float paddingTop
public float paddingRight
public float paddingBottom
public float borderLeftWidth
public float borderRightWidth
public float borderTopWidth
public float borderBottomWidth
public float borderTopLeftRadius
public float borderTopRightRadius
public float borderBottomLeftRadius
public float borderBottomRightRadius
public float opacity
public float flexGrow
public float flexShrink
public float get_top()
public void set_top(float value)
public float get_left()
public void set_left(float value)
public float get_width()
public void set_width(float value)
public float get_height()
public void set_height(float value)
public float get_right()
public void set_right(float value)
public float get_bottom()
public void set_bottom(float value)
public Color get_color()
public void set_color(Color value)
public Color get_backgroundColor()
public void set_backgroundColor(Color value)
public Color get_unityBackgroundImageTintColor()
public void set_unityBackgroundImageTintColor(Color value)
public Color get_borderColor()
public void set_borderColor(Color value)
public float get_marginLeft()
public void set_marginLeft(float value)
public float get_marginTop()
public void set_marginTop(float value)
public float get_marginRight()
public void set_marginRight(float value)
public float get_marginBottom()
public void set_marginBottom(float value)
public float get_paddingLeft()
public void set_paddingLeft(float value)
public float get_paddingTop()
public void set_paddingTop(float value)
public float get_paddingRight()
public void set_paddingRight(float value)
public float get_paddingBottom()
public void set_paddingBottom(float value)
public float get_borderLeftWidth()
public void set_borderLeftWidth(float value)
public float get_borderRightWidth()
public void set_borderRightWidth(float value)
public float get_borderTopWidth()
public void set_borderTopWidth(float value)
public float get_borderBottomWidth()
public void set_borderBottomWidth(float value)
public float get_borderTopLeftRadius()
public void set_borderTopLeftRadius(float value)
public float get_borderTopRightRadius()
public void set_borderTopRightRadius(float value)
public float get_borderBottomLeftRadius()
public void set_borderBottomLeftRadius(float value)
public float get_borderBottomRightRadius()
public void set_borderBottomRightRadius(float value)
public float get_opacity()
public void set_opacity(float value)
public float get_flexGrow()
public void set_flexGrow(float value)
public float get_flexShrink()
public void set_flexShrink(float value)
internal void SetValue(StylePropertyID id, float value)
internal void SetValue(StylePropertyID id, Color value)
internal StyleValueCollection Values()
}
public UnityEngine.UIElements.Experimental.ValueAnimation`1 : object {
private int k_DefaultDurationMs
private int k_DefaultMaxPoolSize
private long m_StartTimeMs
private int m_DurationMs
private Func`2<float, float> <easingCurve>k__BackingField
private bool <isRunning>k__BackingField
private Action <onAnimationCompleted>k__BackingField
private bool <autoRecycle>k__BackingField
private bool <recycled>k__BackingField
private ObjectPool`1<ValueAnimation`1<T>> sObjectPool
private VisualElement <owner>k__BackingField
private Action`2<VisualElement, T> <valueUpdated>k__BackingField
private Func`2<VisualElement, T> <initialValue>k__BackingField
private Func`4<T, T, float, T> <interpolator>k__BackingField
private T _from
private bool fromValueSet
private T <to>k__BackingField
public int durationMs
public Func`2<float, float> easingCurve
public bool isRunning
public Action onAnimationCompleted
public bool autoRecycle
private bool recycled
private VisualElement owner
public Action`2<VisualElement, T> valueUpdated
public Func`2<VisualElement, T> initialValue
public Func`4<T, T, float, T> interpolator
public T from
public T to
public int get_durationMs()
public void set_durationMs(int value)
public Func`2<float, float> get_easingCurve()
public void set_easingCurve(Func`2<float, float> value)
public bool get_isRunning()
private void set_isRunning(bool value)
public Action get_onAnimationCompleted()
public void set_onAnimationCompleted(Action value)
public bool get_autoRecycle()
public void set_autoRecycle(bool value)
private bool get_recycled()
private void set_recycled(bool value)
private VisualElement get_owner()
private void set_owner(VisualElement value)
public Action`2<VisualElement, T> get_valueUpdated()
public void set_valueUpdated(Action`2<VisualElement, T> value)
public Func`2<VisualElement, T> get_initialValue()
public void set_initialValue(Func`2<VisualElement, T> value)
public Func`4<T, T, float, T> get_interpolator()
public void set_interpolator(Func`4<T, T, float, T> value)
public T get_from()
public void set_from(T value)
public T get_to()
public void set_to(T value)
public void Start()
public void Stop()
public void Recycle()
private void UnityEngine.UIElements.Experimental.IValueAnimationUpdate.Tick(long currentTimeMs)
private void SetDefaultValues()
private void Unregister()
private void Register()
internal void SetOwner(VisualElement e)
private void CheckNotRecycled()
public ValueAnimation`1<T> Create(VisualElement e, Func`4<T, T, float, T> interpolator)
public ValueAnimation`1<T> Ease(Func`2<float, float> easing)
public ValueAnimation`1<T> OnCompleted(Action callback)
public ValueAnimation`1<T> KeepAlive()
}
public UnityEngine.UIElements.FlexDirection : Enum {
public int value__
public FlexDirection Column
public FlexDirection ColumnReverse
public FlexDirection Row
public FlexDirection RowReverse
}
public UnityEngine.UIElements.Focusable : CallbackEventHandler {
private bool <focusable>k__BackingField
private int <tabIndex>k__BackingField
private bool m_DelegatesFocus
private bool m_ExcludeFromFocusRing
internal bool isIMGUIContainer
public FocusController focusController
public bool focusable
public int tabIndex
public bool delegatesFocus
internal bool excludeFromFocusRing
public bool canGrabFocus
public FocusController get_focusController()
public bool get_focusable()
public void set_focusable(bool value)
public int get_tabIndex()
public void set_tabIndex(int value)
public bool get_delegatesFocus()
public void set_delegatesFocus(bool value)
internal bool get_excludeFromFocusRing()
internal void set_excludeFromFocusRing(bool value)
public bool get_canGrabFocus()
public void Focus()
public void Blur()
private Focusable GetFocusDelegate()
private Focusable GetFirstFocusableChild(VisualElement ve)
protected void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.UIElements.FocusChangeDirection : object {
private FocusChangeDirection <unspecified>k__BackingField
private FocusChangeDirection <none>k__BackingField
private FocusChangeDirection <lastValue>k__BackingField
private int m_Value
public FocusChangeDirection unspecified
public FocusChangeDirection none
protected FocusChangeDirection lastValue
public FocusChangeDirection get_unspecified()
public FocusChangeDirection get_none()
protected FocusChangeDirection get_lastValue()
protected void .ctor(int value)
public int op_Implicit(FocusChangeDirection fcd)
}
public UnityEngine.UIElements.FocusController : object {
private IFocusRing <focusRing>k__BackingField
private List`1<FocusedElement> m_FocusedElements
private int <imguiKeyboardControl>k__BackingField
private IFocusRing focusRing
public Focusable focusedElement
internal int imguiKeyboardControl
public void .ctor(IFocusRing focusRing)
private IFocusRing get_focusRing()
public Focusable get_focusedElement()
internal bool IsFocused(Focusable f)
internal Focusable GetRetargetedFocusedElement(VisualElement retargetAgainst)
internal Focusable GetLeafFocusedElement()
internal void DoFocusChange(Focusable f)
private void AboutToReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction)
private void ReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction)
private void AboutToGrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction)
private void GrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction)
internal void SwitchFocus(Focusable newFocusedElement)
private void SwitchFocus(Focusable newFocusedElement, FocusChangeDirection direction)
internal Focusable SwitchFocusOnEvent(EventBase e)
internal int get_imguiKeyboardControl()
internal void set_imguiKeyboardControl(int value)
internal void SyncIMGUIFocus(int imguiKeyboardControlID, Focusable imguiContainerHavingKeyboardControl, bool forceSwitch)
}
public UnityEngine.UIElements.FocusEvent : FocusEventBase`1<FocusEvent> {
protected internal void PreDispatch(IPanel panel)
}
public UnityEngine.UIElements.FocusEventBase`1 : EventBase`1<T> {
private Focusable <relatedTarget>k__BackingField
private FocusChangeDirection <direction>k__BackingField
private FocusController <focusController>k__BackingField
public Focusable relatedTarget
public FocusChangeDirection direction
protected FocusController focusController
public Focusable get_relatedTarget()
private void set_relatedTarget(Focusable value)
public FocusChangeDirection get_direction()
private void set_direction(FocusChangeDirection value)
protected FocusController get_focusController()
private void set_focusController(FocusController value)
protected void Init()
private void LocalInit()
public T GetPooled(IEventHandler target, Focusable relatedTarget, FocusChangeDirection direction, FocusController focusController)
}
public UnityEngine.UIElements.FocusInEvent : FocusEventBase`1<FocusInEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.FocusOutEvent : FocusEventBase`1<FocusOutEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.Foldout : BindableElement {
internal string ussFoldoutDepthClassName
internal int ussFoldoutMaxDepth
private Toggle m_Toggle
private VisualElement m_Container
private bool m_Value
public string ussClassName
public string toggleUssClassName
public string contentUssClassName
public VisualElement contentContainer
public string text
public bool value
public VisualElement get_contentContainer()
public string get_text()
public void set_text(string value)
public bool get_value()
public void set_value(bool value)
public void SetValueWithoutNotify(bool newValue)
internal void OnViewDataReady()
private void OnAttachToPanel(AttachToPanelEvent evt)
private void <.ctor>b__20_0(ChangeEvent`1<bool> evt)
}
public UnityEngine.UIElements.GeometryChangedEvent : EventBase`1<GeometryChangedEvent> {
private Rect <oldRect>k__BackingField
private Rect <newRect>k__BackingField
private int <layoutPass>k__BackingField
public Rect oldRect
public Rect newRect
internal int layoutPass
public GeometryChangedEvent GetPooled(Rect oldRect, Rect newRect)
protected void Init()
private void LocalInit()
public Rect get_oldRect()
private void set_oldRect(Rect value)
public Rect get_newRect()
private void set_newRect(Rect value)
internal int get_layoutPass()
internal void set_layoutPass(int value)
}
internal UnityEngine.UIElements.GetViewDataDictionary : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ISerializableJsonDictionary Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public ISerializableJsonDictionary EndInvoke(IAsyncResult result)
}
internal UnityEngine.UIElements.GlobalCallbackRegistry : object {
public void RegisterListeners(CallbackEventHandler ceh, Delegate callback, TrickleDown useTrickleDown)
public void UnregisterListeners(CallbackEventHandler ceh, Delegate callback)
}
internal UnityEngine.UIElements.GradientSettings : ValueType {
public GradientType gradientType
public AddressMode addressMode
public Vector2 radialFocus
public RectInt location
}
internal UnityEngine.UIElements.GradientType : Enum {
public int value__
public GradientType Linear
public GradientType Radial
}
internal UnityEngine.UIElements.HierarchyChangeType : Enum {
public int value__
public HierarchyChangeType Add
public HierarchyChangeType Remove
public HierarchyChangeType Move
}
internal UnityEngine.UIElements.HierarchyEvent : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(VisualElement ve, HierarchyChangeType changeType)
public IAsyncResult BeginInvoke(VisualElement ve, HierarchyChangeType changeType, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.UIElements.IBindable {
public IBinding binding
public string bindingPath
public IBinding get_binding()
public void set_binding(IBinding value)
public string get_bindingPath()
public void set_bindingPath(string value)
}
public UnityEngine.UIElements.IBinding {
public void PreUpdate()
public void Update()
public void Release()
}
public UnityEngine.UIElements.IBindingExtensions : object {
public bool IsBound(IBindable control)
}
public UnityEngine.UIElements.ICommandEvent {
public string commandName
public string get_commandName()
}
internal UnityEngine.UIElements.ICursorManager {
public void SetCursor(Cursor cursor)
public void ResetCursor()
}
public UnityEngine.UIElements.ICustomStyle {
public bool TryGetValue(CustomStyleProperty`1<float> property, Single& value)
public bool TryGetValue(CustomStyleProperty`1<int> property, Int32& value)
public bool TryGetValue(CustomStyleProperty`1<bool> property, Boolean& value)
public bool TryGetValue(CustomStyleProperty`1<Color> property, Color& value)
public bool TryGetValue(CustomStyleProperty`1<Texture2D> property, Texture2D& value)
public bool TryGetValue(CustomStyleProperty`1<VectorImage> property, VectorImage& value)
public bool TryGetValue(CustomStyleProperty`1<string> property, String& value)
}
internal UnityEngine.UIElements.IDataWatchHandle {
public Object watched
public bool disposed
public Object get_watched()
public bool get_disposed()
}
internal UnityEngine.UIElements.IDataWatchService {
public IDataWatchHandle AddWatch(Object watched, Action`1<Object> onDataChanged)
public void RemoveWatch(IDataWatchHandle handle)
public void ForceDirtyNextPoll(Object obj)
}
internal UnityEngine.UIElements.IEventDispatchingStrategy {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.IEventHandler {
public void SendEvent(EventBase e)
public void HandleEvent(EventBase evt)
public bool HasTrickleDownHandlers()
public bool HasBubbleUpHandlers()
}
public UnityEngine.UIElements.IExperimentalFeatures {
public ITransitionAnimations animation
public ITransitionAnimations get_animation()
}
public UnityEngine.UIElements.IFocusEvent {
public Focusable relatedTarget
public FocusChangeDirection direction
public Focusable get_relatedTarget()
public FocusChangeDirection get_direction()
}
public UnityEngine.UIElements.IFocusRing {
public FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e)
public Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction)
}
public UnityEngine.UIElements.IKeyboardEvent {
public EventModifiers modifiers
public char character
public KeyCode keyCode
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public EventModifiers get_modifiers()
public char get_character()
public KeyCode get_keyCode()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
}
public UnityEngine.UIElements.Image : VisualElement {
private ScaleMode m_ScaleMode
private Texture m_Image
private VectorImage m_VectorImage
private Rect m_UV
private Color m_TintColor
private bool m_ImageIsInline
private bool m_ScaleModeIsInline
private bool m_TintColorIsInline
public string ussClassName
private CustomStyleProperty`1<Texture2D> s_ImageProperty
private CustomStyleProperty`1<VectorImage> s_VectorImageProperty
private CustomStyleProperty`1<string> s_ScaleModeProperty
private CustomStyleProperty`1<Color> s_TintColorProperty
public Texture image
public VectorImage vectorImage
public Rect sourceRect
public Rect uv
public ScaleMode scaleMode
public Color tintColor
public Texture get_image()
public void set_image(Texture value)
public VectorImage get_vectorImage()
public void set_vectorImage(VectorImage value)
public Rect get_sourceRect()
public void set_sourceRect(Rect value)
public Rect get_uv()
public void set_uv(Rect value)
public ScaleMode get_scaleMode()
public void set_scaleMode(ScaleMode value)
public Color get_tintColor()
public void set_tintColor(Color value)
private Vector2 GetTextureDisplaySize(Texture texture)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
private void OnGenerateVisualContent(MeshGenerationContext mgc)
private void OnCustomStyleResolved(CustomStyleResolvedEvent e)
private void CalculateUV(Rect srcRect)
private Rect GetSourceRect()
}
public UnityEngine.UIElements.IManipulator {
public VisualElement target
public VisualElement get_target()
public void set_target(VisualElement value)
}
public UnityEngine.UIElements.IMGUIContainer : VisualElement {
private Action m_OnGUIHandler
private ObjectGUIState m_ObjectGUIState
internal bool useOwnerObjectGUIState
private Rect <lastWorldClip>k__BackingField
private LayoutCache m_Cache
private Rect m_CachedClippingRect
private Matrix4x4 m_CachedTransform
private ContextType <contextType>k__BackingField
private bool lostFocus
private bool receivedFocus
private FocusChangeDirection focusChangeDirection
private bool hasFocusableControls
private int newKeyboardFocusControlID
private bool <focusOnlyIfHasFocusableControls>k__BackingField
public string ussClassName
private GUIGlobals m_GUIGlobals
public Action onGUIHandler
internal ObjectGUIState guiState
internal Rect lastWorldClip
private LayoutCache cache
private float layoutMeasuredWidth
private float layoutMeasuredHeight
public ContextType contextType
internal bool focusOnlyIfHasFocusableControls
public bool canGrabFocus
public Action get_onGUIHandler()
public void set_onGUIHandler(Action value)
internal ObjectGUIState get_guiState()
internal Rect get_lastWorldClip()
internal void set_lastWorldClip(Rect value)
private LayoutCache get_cache()
private float get_layoutMeasuredWidth()
private float get_layoutMeasuredHeight()
public ContextType get_contextType()
public void set_contextType(ContextType value)
internal bool get_focusOnlyIfHasFocusableControls()
internal void set_focusOnlyIfHasFocusableControls(bool value)
public bool get_canGrabFocus()
public void .ctor(Action onGUIHandler)
private void OnGenerateVisualContent(MeshGenerationContext mgc)
private void SaveGlobals()
private void RestoreGlobals()
private void DoOnGUI(Event evt, Matrix4x4 parentTransform, Rect clippingRect, bool isComputingLayout, Rect layoutSize, Action onGUIHandler, bool canAffectFocus)
public void MarkDirtyLayout()
public void HandleEvent(EventBase evt)
private void DoIMGUIRepaint()
internal bool SendEventToIMGUI(EventBase evt, bool canAffectFocus)
internal bool HandleIMGUIEvent(Event e, bool canAffectFocus)
internal bool HandleIMGUIEvent(Event e, Action onGUIHandler, bool canAffectFocus)
private bool HandleIMGUIEvent(Event e, Matrix4x4 worldTransform, Rect clippingRect, Action onGUIHandler, bool canAffectFocus)
protected void ExecuteDefaultAction(EventBase evt)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
private void GetCurrentTransformAndClip(IMGUIContainer container, Event evt, Matrix4x4& transform, Rect& clipRect)
public void Dispose()
protected void Dispose(bool disposeManaged)
}
public UnityEngine.UIElements.IMGUIEvent : EventBase`1<IMGUIEvent> {
public IMGUIEvent GetPooled(Event systemEvent)
protected void Init()
private void LocalInit()
}
internal UnityEngine.UIElements.IMGUIEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.ImmediateModeElement : VisualElement {
private void OnGenerateVisualContent(MeshGenerationContext mgc)
protected void ImmediateRepaint()
}
internal UnityEngine.UIElements.ImmediateModeException : Exception {
public void .ctor(Exception inner)
}
internal UnityEngine.UIElements.ImmediateStylePainter : object {
internal void DrawRect(Rect screenRect, Color color, Vector4 borderWidths, Vector4 borderRadiuses)
internal void DrawTexture(Rect screenRect, Texture texture, Rect sourceRect, Color color, Vector4 borderWidths, Vector4 borderRadiuses, int leftBorder, int topBorder, int rightBorder, int bottomBorder, bool usePremultiplyAlpha)
internal void DrawText(Rect screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping textClipping)
private void DrawRect_Injected(Rect& screenRect, Color& color, Vector4& borderWidths, Vector4& borderRadiuses)
private void DrawTexture_Injected(Rect& screenRect, Texture texture, Rect& sourceRect, Color& color, Vector4& borderWidths, Vector4& borderRadiuses, int leftBorder, int topBorder, int rightBorder, int bottomBorder, bool usePremultiplyAlpha)
private void DrawText_Injected(Rect& screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color& fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping textClipping)
}
public UnityEngine.UIElements.IMouseEvent {
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
public Vector2 mouseDelta
public int clickCount
public int button
public int pressedButtons
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public EventModifiers get_modifiers()
public Vector2 get_mousePosition()
public Vector2 get_localMousePosition()
public Vector2 get_mouseDelta()
public int get_clickCount()
public int get_button()
public int get_pressedButtons()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
}
internal UnityEngine.UIElements.IMouseEventInternal {
public bool triggeredByOS
public bool recomputeTopElementUnderMouse
public IPointerEvent sourcePointerEvent
public bool get_triggeredByOS()
public void set_triggeredByOS(bool value)
public bool get_recomputeTopElementUnderMouse()
public void set_recomputeTopElementUnderMouse(bool value)
public IPointerEvent get_sourcePointerEvent()
public void set_sourcePointerEvent(IPointerEvent value)
}
internal UnityEngine.UIElements.InlineStyleAccess : StyleValueCollection {
private VisualElement <ve>k__BackingField
private bool m_HasInlineCursor
private StyleCursor m_InlineCursor
private VisualElement ve
private StyleLength UnityEngine.UIElements.IStyle.width
private StyleLength UnityEngine.UIElements.IStyle.height
private StyleLength UnityEngine.UIElements.IStyle.maxWidth
private StyleLength UnityEngine.UIElements.IStyle.maxHeight
private StyleLength UnityEngine.UIElements.IStyle.minWidth
private StyleLength UnityEngine.UIElements.IStyle.minHeight
private StyleLength UnityEngine.UIElements.IStyle.flexBasis
private StyleFloat UnityEngine.UIElements.IStyle.flexGrow
private StyleFloat UnityEngine.UIElements.IStyle.flexShrink
private StyleEnum`1<Overflow> UnityEngine.UIElements.IStyle.overflow
private StyleEnum`1<OverflowClipBox> UnityEngine.UIElements.IStyle.unityOverflowClipBox
private StyleLength UnityEngine.UIElements.IStyle.left
private StyleLength UnityEngine.UIElements.IStyle.top
private StyleLength UnityEngine.UIElements.IStyle.right
private StyleLength UnityEngine.UIElements.IStyle.bottom
private StyleLength UnityEngine.UIElements.IStyle.marginLeft
private StyleLength UnityEngine.UIElements.IStyle.marginTop
private StyleLength UnityEngine.UIElements.IStyle.marginRight
private StyleLength UnityEngine.UIElements.IStyle.marginBottom
private StyleColor UnityEngine.UIElements.IStyle.borderLeftColor
private StyleColor UnityEngine.UIElements.IStyle.borderTopColor
private StyleColor UnityEngine.UIElements.IStyle.borderRightColor
private StyleColor UnityEngine.UIElements.IStyle.borderBottomColor
private StyleFloat UnityEngine.UIElements.IStyle.borderLeftWidth
private StyleFloat UnityEngine.UIElements.IStyle.borderTopWidth
private StyleFloat UnityEngine.UIElements.IStyle.borderRightWidth
private StyleFloat UnityEngine.UIElements.IStyle.borderBottomWidth
private StyleLength UnityEngine.UIElements.IStyle.borderTopLeftRadius
private StyleLength UnityEngine.UIElements.IStyle.borderTopRightRadius
private StyleLength UnityEngine.UIElements.IStyle.borderBottomRightRadius
private StyleLength UnityEngine.UIElements.IStyle.borderBottomLeftRadius
private StyleLength UnityEngine.UIElements.IStyle.paddingLeft
private StyleLength UnityEngine.UIElements.IStyle.paddingTop
private StyleLength UnityEngine.UIElements.IStyle.paddingRight
private StyleLength UnityEngine.UIElements.IStyle.paddingBottom
private StyleEnum`1<Position> UnityEngine.UIElements.IStyle.position
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.alignSelf
private StyleEnum`1<TextAnchor> UnityEngine.UIElements.IStyle.unityTextAlign
private StyleEnum`1<FontStyle> UnityEngine.UIElements.IStyle.unityFontStyleAndWeight
private StyleFont UnityEngine.UIElements.IStyle.unityFont
private StyleLength UnityEngine.UIElements.IStyle.fontSize
private StyleEnum`1<WhiteSpace> UnityEngine.UIElements.IStyle.whiteSpace
private StyleColor UnityEngine.UIElements.IStyle.color
private StyleEnum`1<FlexDirection> UnityEngine.UIElements.IStyle.flexDirection
private StyleColor UnityEngine.UIElements.IStyle.backgroundColor
private StyleColor UnityEngine.UIElements.IStyle.borderColor
private StyleBackground UnityEngine.UIElements.IStyle.backgroundImage
private StyleEnum`1<ScaleMode> UnityEngine.UIElements.IStyle.unityBackgroundScaleMode
private StyleColor UnityEngine.UIElements.IStyle.unityBackgroundImageTintColor
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.alignItems
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.alignContent
private StyleEnum`1<Justify> UnityEngine.UIElements.IStyle.justifyContent
private StyleEnum`1<Wrap> UnityEngine.UIElements.IStyle.flexWrap
private StyleInt UnityEngine.UIElements.IStyle.unitySliceLeft
private StyleInt UnityEngine.UIElements.IStyle.unitySliceTop
private StyleInt UnityEngine.UIElements.IStyle.unitySliceRight
private StyleInt UnityEngine.UIElements.IStyle.unitySliceBottom
private StyleFloat UnityEngine.UIElements.IStyle.opacity
private StyleEnum`1<Visibility> UnityEngine.UIElements.IStyle.visibility
private StyleCursor UnityEngine.UIElements.IStyle.cursor
private StyleEnum`1<DisplayStyle> UnityEngine.UIElements.IStyle.display
private VisualElement get_ve()
private void set_ve(VisualElement value)
public void .ctor(VisualElement ve)
protected void Finalize()
private StyleLength UnityEngine.UIElements.IStyle.get_width()
private void UnityEngine.UIElements.IStyle.set_width(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_height()
private void UnityEngine.UIElements.IStyle.set_height(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_maxWidth()
private void UnityEngine.UIElements.IStyle.set_maxWidth(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_maxHeight()
private void UnityEngine.UIElements.IStyle.set_maxHeight(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_minWidth()
private void UnityEngine.UIElements.IStyle.set_minWidth(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_minHeight()
private void UnityEngine.UIElements.IStyle.set_minHeight(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_flexBasis()
private void UnityEngine.UIElements.IStyle.set_flexBasis(StyleLength value)
private StyleFloat UnityEngine.UIElements.IStyle.get_flexGrow()
private void UnityEngine.UIElements.IStyle.set_flexGrow(StyleFloat value)
private StyleFloat UnityEngine.UIElements.IStyle.get_flexShrink()
private void UnityEngine.UIElements.IStyle.set_flexShrink(StyleFloat value)
private StyleEnum`1<Overflow> UnityEngine.UIElements.IStyle.get_overflow()
private void UnityEngine.UIElements.IStyle.set_overflow(StyleEnum`1<Overflow> value)
private StyleEnum`1<OverflowClipBox> UnityEngine.UIElements.IStyle.get_unityOverflowClipBox()
private void UnityEngine.UIElements.IStyle.set_unityOverflowClipBox(StyleEnum`1<OverflowClipBox> value)
private StyleLength UnityEngine.UIElements.IStyle.get_left()
private void UnityEngine.UIElements.IStyle.set_left(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_top()
private void UnityEngine.UIElements.IStyle.set_top(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_right()
private void UnityEngine.UIElements.IStyle.set_right(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_bottom()
private void UnityEngine.UIElements.IStyle.set_bottom(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_marginLeft()
private void UnityEngine.UIElements.IStyle.set_marginLeft(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_marginTop()
private void UnityEngine.UIElements.IStyle.set_marginTop(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_marginRight()
private void UnityEngine.UIElements.IStyle.set_marginRight(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_marginBottom()
private void UnityEngine.UIElements.IStyle.set_marginBottom(StyleLength value)
private StyleColor UnityEngine.UIElements.IStyle.get_borderLeftColor()
private void UnityEngine.UIElements.IStyle.set_borderLeftColor(StyleColor value)
private StyleColor UnityEngine.UIElements.IStyle.get_borderTopColor()
private void UnityEngine.UIElements.IStyle.set_borderTopColor(StyleColor value)
private StyleColor UnityEngine.UIElements.IStyle.get_borderRightColor()
private void UnityEngine.UIElements.IStyle.set_borderRightColor(StyleColor value)
private StyleColor UnityEngine.UIElements.IStyle.get_borderBottomColor()
private void UnityEngine.UIElements.IStyle.set_borderBottomColor(StyleColor value)
private StyleFloat UnityEngine.UIElements.IStyle.get_borderLeftWidth()
private void UnityEngine.UIElements.IStyle.set_borderLeftWidth(StyleFloat value)
private StyleFloat UnityEngine.UIElements.IStyle.get_borderTopWidth()
private void UnityEngine.UIElements.IStyle.set_borderTopWidth(StyleFloat value)
private StyleFloat UnityEngine.UIElements.IStyle.get_borderRightWidth()
private void UnityEngine.UIElements.IStyle.set_borderRightWidth(StyleFloat value)
private StyleFloat UnityEngine.UIElements.IStyle.get_borderBottomWidth()
private void UnityEngine.UIElements.IStyle.set_borderBottomWidth(StyleFloat value)
private StyleLength UnityEngine.UIElements.IStyle.get_borderTopLeftRadius()
private void UnityEngine.UIElements.IStyle.set_borderTopLeftRadius(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_borderTopRightRadius()
private void UnityEngine.UIElements.IStyle.set_borderTopRightRadius(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_borderBottomRightRadius()
private void UnityEngine.UIElements.IStyle.set_borderBottomRightRadius(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_borderBottomLeftRadius()
private void UnityEngine.UIElements.IStyle.set_borderBottomLeftRadius(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_paddingLeft()
private void UnityEngine.UIElements.IStyle.set_paddingLeft(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_paddingTop()
private void UnityEngine.UIElements.IStyle.set_paddingTop(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_paddingRight()
private void UnityEngine.UIElements.IStyle.set_paddingRight(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_paddingBottom()
private void UnityEngine.UIElements.IStyle.set_paddingBottom(StyleLength value)
private StyleEnum`1<Position> UnityEngine.UIElements.IStyle.get_position()
private void UnityEngine.UIElements.IStyle.set_position(StyleEnum`1<Position> value)
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.get_alignSelf()
private void UnityEngine.UIElements.IStyle.set_alignSelf(StyleEnum`1<Align> value)
private StyleEnum`1<TextAnchor> UnityEngine.UIElements.IStyle.get_unityTextAlign()
private void UnityEngine.UIElements.IStyle.set_unityTextAlign(StyleEnum`1<TextAnchor> value)
private StyleEnum`1<FontStyle> UnityEngine.UIElements.IStyle.get_unityFontStyleAndWeight()
private void UnityEngine.UIElements.IStyle.set_unityFontStyleAndWeight(StyleEnum`1<FontStyle> value)
private StyleFont UnityEngine.UIElements.IStyle.get_unityFont()
private void UnityEngine.UIElements.IStyle.set_unityFont(StyleFont value)
private StyleLength UnityEngine.UIElements.IStyle.get_fontSize()
private void UnityEngine.UIElements.IStyle.set_fontSize(StyleLength value)
private StyleEnum`1<WhiteSpace> UnityEngine.UIElements.IStyle.get_whiteSpace()
private void UnityEngine.UIElements.IStyle.set_whiteSpace(StyleEnum`1<WhiteSpace> value)
private StyleColor UnityEngine.UIElements.IStyle.get_color()
private void UnityEngine.UIElements.IStyle.set_color(StyleColor value)
private StyleEnum`1<FlexDirection> UnityEngine.UIElements.IStyle.get_flexDirection()
private void UnityEngine.UIElements.IStyle.set_flexDirection(StyleEnum`1<FlexDirection> value)
private StyleColor UnityEngine.UIElements.IStyle.get_backgroundColor()
private void UnityEngine.UIElements.IStyle.set_backgroundColor(StyleColor value)
private StyleColor UnityEngine.UIElements.IStyle.get_borderColor()
private void UnityEngine.UIElements.IStyle.set_borderColor(StyleColor value)
private StyleBackground UnityEngine.UIElements.IStyle.get_backgroundImage()
private void UnityEngine.UIElements.IStyle.set_backgroundImage(StyleBackground value)
private StyleEnum`1<ScaleMode> UnityEngine.UIElements.IStyle.get_unityBackgroundScaleMode()
private void UnityEngine.UIElements.IStyle.set_unityBackgroundScaleMode(StyleEnum`1<ScaleMode> value)
private StyleColor UnityEngine.UIElements.IStyle.get_unityBackgroundImageTintColor()
private void UnityEngine.UIElements.IStyle.set_unityBackgroundImageTintColor(StyleColor value)
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.get_alignItems()
private void UnityEngine.UIElements.IStyle.set_alignItems(StyleEnum`1<Align> value)
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.get_alignContent()
private void UnityEngine.UIElements.IStyle.set_alignContent(StyleEnum`1<Align> value)
private StyleEnum`1<Justify> UnityEngine.UIElements.IStyle.get_justifyContent()
private void UnityEngine.UIElements.IStyle.set_justifyContent(StyleEnum`1<Justify> value)
private StyleEnum`1<Wrap> UnityEngine.UIElements.IStyle.get_flexWrap()
private void UnityEngine.UIElements.IStyle.set_flexWrap(StyleEnum`1<Wrap> value)
private StyleInt UnityEngine.UIElements.IStyle.get_unitySliceLeft()
private void UnityEngine.UIElements.IStyle.set_unitySliceLeft(StyleInt value)
private StyleInt UnityEngine.UIElements.IStyle.get_unitySliceTop()
private void UnityEngine.UIElements.IStyle.set_unitySliceTop(StyleInt value)
private StyleInt UnityEngine.UIElements.IStyle.get_unitySliceRight()
private void UnityEngine.UIElements.IStyle.set_unitySliceRight(StyleInt value)
private StyleInt UnityEngine.UIElements.IStyle.get_unitySliceBottom()
private void UnityEngine.UIElements.IStyle.set_unitySliceBottom(StyleInt value)
private StyleFloat UnityEngine.UIElements.IStyle.get_opacity()
private void UnityEngine.UIElements.IStyle.set_opacity(StyleFloat value)
private StyleEnum`1<Visibility> UnityEngine.UIElements.IStyle.get_visibility()
private void UnityEngine.UIElements.IStyle.set_visibility(StyleEnum`1<Visibility> value)
private StyleCursor UnityEngine.UIElements.IStyle.get_cursor()
private void UnityEngine.UIElements.IStyle.set_cursor(StyleCursor value)
private StyleEnum`1<DisplayStyle> UnityEngine.UIElements.IStyle.get_display()
private void UnityEngine.UIElements.IStyle.set_display(StyleEnum`1<DisplayStyle> value)
private bool SetStyleValue(StylePropertyID id, StyleLength inlineValue, StyleLength sharedValue)
private bool SetStyleValue(StylePropertyID id, StyleFloat inlineValue, StyleFloat sharedValue)
private bool SetStyleValue(StylePropertyID id, StyleInt inlineValue, StyleInt sharedValue)
private bool SetStyleValue(StylePropertyID id, StyleColor inlineValue, StyleColor sharedValue)
private bool SetStyleValue(StylePropertyID id, StyleEnum`1<T> inlineValue, StyleInt sharedValue)
private bool SetStyleValue(StylePropertyID id, StyleBackground inlineValue, StyleBackground sharedValue)
private bool SetStyleValue(StylePropertyID id, StyleFont inlineValue, StyleFont sharedValue)
private bool SetInlineCursor(StyleCursor inlineValue, StyleCursor sharedValue)
private void ApplyStyleValue(StyleValue value, int specificity)
public bool TryGetInlineCursor(StyleCursor& value)
public void SetInlineCursor(StyleCursor value)
}
public UnityEngine.UIElements.INotifyValueChanged`1 {
public T value
public T get_value()
public void set_value(T value)
public void SetValueWithoutNotify(T newValue)
}
public UnityEngine.UIElements.INotifyValueChangedExtensions : object {
public bool RegisterValueChangedCallback(INotifyValueChanged`1<T> control, EventCallback`1<ChangeEvent`1<T>> callback)
public bool UnregisterValueChangedCallback(INotifyValueChanged`1<T> control, EventCallback`1<ChangeEvent`1<T>> callback)
}
public UnityEngine.UIElements.InputEvent : EventBase`1<InputEvent> {
private string <previousData>k__BackingField
private string <newData>k__BackingField
public string previousData
public string newData
public string get_previousData()
protected void set_previousData(string value)
public string get_newData()
protected void set_newData(string value)
protected void Init()
private void LocalInit()
public InputEvent GetPooled(string previousData, string newData)
}
public UnityEngine.UIElements.IPanel {
public VisualElement visualTree
public EventDispatcher dispatcher
public ContextType contextType
public FocusController focusController
public ContextualMenuManager contextualMenuManager
public VisualElement get_visualTree()
public EventDispatcher get_dispatcher()
public ContextType get_contextType()
public FocusController get_focusController()
public VisualElement Pick(Vector2 point)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
public ContextualMenuManager get_contextualMenuManager()
}
public UnityEngine.UIElements.IPointerEvent {
public int pointerId
public string pointerType
public bool isPrimary
public int button
public int pressedButtons
public Vector3 position
public Vector3 localPosition
public Vector3 deltaPosition
public float deltaTime
public int clickCount
public float pressure
public float tangentialPressure
public float altitudeAngle
public float azimuthAngle
public float twist
public Vector2 radius
public Vector2 radiusVariance
public EventModifiers modifiers
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public int get_pointerId()
public string get_pointerType()
public bool get_isPrimary()
public int get_button()
public int get_pressedButtons()
public Vector3 get_position()
public Vector3 get_localPosition()
public Vector3 get_deltaPosition()
public float get_deltaTime()
public int get_clickCount()
public float get_pressure()
public float get_tangentialPressure()
public float get_altitudeAngle()
public float get_azimuthAngle()
public float get_twist()
public Vector2 get_radius()
public Vector2 get_radiusVariance()
public EventModifiers get_modifiers()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
}
internal UnityEngine.UIElements.IPointerEventInternal {
public bool triggeredByOS
public bool recomputeTopElementUnderPointer
public bool get_triggeredByOS()
public void set_triggeredByOS(bool value)
public bool get_recomputeTopElementUnderPointer()
public void set_recomputeTopElementUnderPointer(bool value)
}
public UnityEngine.UIElements.IResolvedStyle {
public float width
public float height
public StyleFloat maxWidth
public StyleFloat maxHeight
public StyleFloat minWidth
public StyleFloat minHeight
public StyleFloat flexBasis
public float flexGrow
public float flexShrink
public FlexDirection flexDirection
public Wrap flexWrap
public float left
public float top
public float right
public float bottom
public float marginLeft
public float marginTop
public float marginRight
public float marginBottom
public float paddingLeft
public float paddingTop
public float paddingRight
public float paddingBottom
public Position position
public Align alignSelf
public TextAnchor unityTextAlign
public FontStyle unityFontStyleAndWeight
public float fontSize
public WhiteSpace whiteSpace
public Color color
public Color backgroundColor
public Color borderColor
public Font unityFont
public ScaleMode unityBackgroundScaleMode
public Color unityBackgroundImageTintColor
public Align alignItems
public Align alignContent
public Justify justifyContent
public Color borderLeftColor
public Color borderRightColor
public Color borderTopColor
public Color borderBottomColor
public float borderLeftWidth
public float borderRightWidth
public float borderTopWidth
public float borderBottomWidth
public float borderTopLeftRadius
public float borderTopRightRadius
public float borderBottomRightRadius
public float borderBottomLeftRadius
public int unitySliceLeft
public int unitySliceTop
public int unitySliceRight
public int unitySliceBottom
public float opacity
public Visibility visibility
public DisplayStyle display
public float get_width()
public float get_height()
public StyleFloat get_maxWidth()
public StyleFloat get_maxHeight()
public StyleFloat get_minWidth()
public StyleFloat get_minHeight()
public StyleFloat get_flexBasis()
public float get_flexGrow()
public float get_flexShrink()
public FlexDirection get_flexDirection()
public Wrap get_flexWrap()
public float get_left()
public float get_top()
public float get_right()
public float get_bottom()
public float get_marginLeft()
public float get_marginTop()
public float get_marginRight()
public float get_marginBottom()
public float get_paddingLeft()
public float get_paddingTop()
public float get_paddingRight()
public float get_paddingBottom()
public Position get_position()
public Align get_alignSelf()
public TextAnchor get_unityTextAlign()
public FontStyle get_unityFontStyleAndWeight()
public float get_fontSize()
public WhiteSpace get_whiteSpace()
public Color get_color()
public Color get_backgroundColor()
public Color get_borderColor()
public Font get_unityFont()
public ScaleMode get_unityBackgroundScaleMode()
public Color get_unityBackgroundImageTintColor()
public Align get_alignItems()
public Align get_alignContent()
public Justify get_justifyContent()
public Color get_borderLeftColor()
public Color get_borderRightColor()
public Color get_borderTopColor()
public Color get_borderBottomColor()
public float get_borderLeftWidth()
public float get_borderRightWidth()
public float get_borderTopWidth()
public float get_borderBottomWidth()
public float get_borderTopLeftRadius()
public float get_borderTopRightRadius()
public float get_borderBottomRightRadius()
public float get_borderBottomLeftRadius()
public int get_unitySliceLeft()
public int get_unitySliceTop()
public int get_unitySliceRight()
public int get_unitySliceBottom()
public float get_opacity()
public Visibility get_visibility()
public DisplayStyle get_display()
}
internal UnityEngine.UIElements.IScheduler {
public ScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs)
public ScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition)
public ScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs)
public void Unschedule(ScheduledItem item)
public void Schedule(ScheduledItem item)
public void UpdateScheduledEvents()
}
internal UnityEngine.UIElements.ISerializableJsonDictionary {
public void Set(string key, T value)
public T Get(string key)
public T GetScriptable(string key)
public void Overwrite(object obj, string key)
public bool ContainsKey(string key)
public void OnBeforeSerialize()
public void OnAfterDeserialize()
}
public UnityEngine.UIElements.IStyle {
public StyleLength width
public StyleLength height
public StyleLength maxWidth
public StyleLength maxHeight
public StyleLength minWidth
public StyleLength minHeight
public StyleLength flexBasis
public StyleFloat flexGrow
public StyleFloat flexShrink
public StyleEnum`1<FlexDirection> flexDirection
public StyleEnum`1<Wrap> flexWrap
public StyleEnum`1<Overflow> overflow
public StyleEnum`1<OverflowClipBox> unityOverflowClipBox
public StyleLength left
public StyleLength top
public StyleLength right
public StyleLength bottom
public StyleLength marginLeft
public StyleLength marginTop
public StyleLength marginRight
public StyleLength marginBottom
public StyleLength paddingLeft
public StyleLength paddingTop
public StyleLength paddingRight
public StyleLength paddingBottom
public StyleEnum`1<Position> position
public StyleEnum`1<Align> alignSelf
public StyleEnum`1<TextAnchor> unityTextAlign
public StyleEnum`1<FontStyle> unityFontStyleAndWeight
public StyleFont unityFont
public StyleLength fontSize
public StyleEnum`1<WhiteSpace> whiteSpace
public StyleColor color
public StyleColor backgroundColor
public StyleColor borderColor
public StyleBackground backgroundImage
public StyleEnum`1<ScaleMode> unityBackgroundScaleMode
public StyleColor unityBackgroundImageTintColor
public StyleEnum`1<Align> alignItems
public StyleEnum`1<Align> alignContent
public StyleEnum`1<Justify> justifyContent
public StyleColor borderLeftColor
public StyleColor borderTopColor
public StyleColor borderRightColor
public StyleColor borderBottomColor
public StyleFloat borderLeftWidth
public StyleFloat borderTopWidth
public StyleFloat borderRightWidth
public StyleFloat borderBottomWidth
public StyleLength borderTopLeftRadius
public StyleLength borderTopRightRadius
public StyleLength borderBottomRightRadius
public StyleLength borderBottomLeftRadius
public StyleInt unitySliceLeft
public StyleInt unitySliceTop
public StyleInt unitySliceRight
public StyleInt unitySliceBottom
public StyleFloat opacity
public StyleEnum`1<Visibility> visibility
public StyleCursor cursor
public StyleEnum`1<DisplayStyle> display
public StyleLength get_width()
public void set_width(StyleLength value)
public StyleLength get_height()
public void set_height(StyleLength value)
public StyleLength get_maxWidth()
public void set_maxWidth(StyleLength value)
public StyleLength get_maxHeight()
public void set_maxHeight(StyleLength value)
public StyleLength get_minWidth()
public void set_minWidth(StyleLength value)
public StyleLength get_minHeight()
public void set_minHeight(StyleLength value)
public StyleLength get_flexBasis()
public void set_flexBasis(StyleLength value)
public StyleFloat get_flexGrow()
public void set_flexGrow(StyleFloat value)
public StyleFloat get_flexShrink()
public void set_flexShrink(StyleFloat value)
public StyleEnum`1<FlexDirection> get_flexDirection()
public void set_flexDirection(StyleEnum`1<FlexDirection> value)
public StyleEnum`1<Wrap> get_flexWrap()
public void set_flexWrap(StyleEnum`1<Wrap> value)
public StyleEnum`1<Overflow> get_overflow()
public void set_overflow(StyleEnum`1<Overflow> value)
public StyleEnum`1<OverflowClipBox> get_unityOverflowClipBox()
public void set_unityOverflowClipBox(StyleEnum`1<OverflowClipBox> value)
public StyleLength get_left()
public void set_left(StyleLength value)
public StyleLength get_top()
public void set_top(StyleLength value)
public StyleLength get_right()
public void set_right(StyleLength value)
public StyleLength get_bottom()
public void set_bottom(StyleLength value)
public StyleLength get_marginLeft()
public void set_marginLeft(StyleLength value)
public StyleLength get_marginTop()
public void set_marginTop(StyleLength value)
public StyleLength get_marginRight()
public void set_marginRight(StyleLength value)
public StyleLength get_marginBottom()
public void set_marginBottom(StyleLength value)
public StyleLength get_paddingLeft()
public void set_paddingLeft(StyleLength value)
public StyleLength get_paddingTop()
public void set_paddingTop(StyleLength value)
public StyleLength get_paddingRight()
public void set_paddingRight(StyleLength value)
public StyleLength get_paddingBottom()
public void set_paddingBottom(StyleLength value)
public StyleEnum`1<Position> get_position()
public void set_position(StyleEnum`1<Position> value)
public StyleEnum`1<Align> get_alignSelf()
public void set_alignSelf(StyleEnum`1<Align> value)
public StyleEnum`1<TextAnchor> get_unityTextAlign()
public void set_unityTextAlign(StyleEnum`1<TextAnchor> value)
public StyleEnum`1<FontStyle> get_unityFontStyleAndWeight()
public void set_unityFontStyleAndWeight(StyleEnum`1<FontStyle> value)
public StyleFont get_unityFont()
public void set_unityFont(StyleFont value)
public StyleLength get_fontSize()
public void set_fontSize(StyleLength value)
public StyleEnum`1<WhiteSpace> get_whiteSpace()
public void set_whiteSpace(StyleEnum`1<WhiteSpace> value)
public StyleColor get_color()
public void set_color(StyleColor value)
public StyleColor get_backgroundColor()
public void set_backgroundColor(StyleColor value)
public StyleColor get_borderColor()
public void set_borderColor(StyleColor value)
public StyleBackground get_backgroundImage()
public void set_backgroundImage(StyleBackground value)
public StyleEnum`1<ScaleMode> get_unityBackgroundScaleMode()
public void set_unityBackgroundScaleMode(StyleEnum`1<ScaleMode> value)
public StyleColor get_unityBackgroundImageTintColor()
public void set_unityBackgroundImageTintColor(StyleColor value)
public StyleEnum`1<Align> get_alignItems()
public void set_alignItems(StyleEnum`1<Align> value)
public StyleEnum`1<Align> get_alignContent()
public void set_alignContent(StyleEnum`1<Align> value)
public StyleEnum`1<Justify> get_justifyContent()
public void set_justifyContent(StyleEnum`1<Justify> value)
public StyleColor get_borderLeftColor()
public void set_borderLeftColor(StyleColor value)
public StyleColor get_borderTopColor()
public void set_borderTopColor(StyleColor value)
public StyleColor get_borderRightColor()
public void set_borderRightColor(StyleColor value)
public StyleColor get_borderBottomColor()
public void set_borderBottomColor(StyleColor value)
public StyleFloat get_borderLeftWidth()
public void set_borderLeftWidth(StyleFloat value)
public StyleFloat get_borderTopWidth()
public void set_borderTopWidth(StyleFloat value)
public StyleFloat get_borderRightWidth()
public void set_borderRightWidth(StyleFloat value)
public StyleFloat get_borderBottomWidth()
public void set_borderBottomWidth(StyleFloat value)
public StyleLength get_borderTopLeftRadius()
public void set_borderTopLeftRadius(StyleLength value)
public StyleLength get_borderTopRightRadius()
public void set_borderTopRightRadius(StyleLength value)
public StyleLength get_borderBottomRightRadius()
public void set_borderBottomRightRadius(StyleLength value)
public StyleLength get_borderBottomLeftRadius()
public void set_borderBottomLeftRadius(StyleLength value)
public StyleInt get_unitySliceLeft()
public void set_unitySliceLeft(StyleInt value)
public StyleInt get_unitySliceTop()
public void set_unitySliceTop(StyleInt value)
public StyleInt get_unitySliceRight()
public void set_unitySliceRight(StyleInt value)
public StyleInt get_unitySliceBottom()
public void set_unitySliceBottom(StyleInt value)
public StyleFloat get_opacity()
public void set_opacity(StyleFloat value)
public StyleEnum`1<Visibility> get_visibility()
public void set_visibility(StyleEnum`1<Visibility> value)
public StyleCursor get_cursor()
public void set_cursor(StyleCursor value)
public StyleEnum`1<DisplayStyle> get_display()
public void set_display(StyleEnum`1<DisplayStyle> value)
}
internal UnityEngine.UIElements.IStylePainter {
public VisualElement visualElement
public MeshWriteData DrawMesh(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags)
public void DrawText(TextParams textParams, TextHandle handle, float pixelsPerPoint)
public void DrawRectangle(RectangleParams rectParams)
public void DrawBorder(BorderParams borderParams)
public void DrawImmediate(Action callback)
public VisualElement get_visualElement()
}
internal UnityEngine.UIElements.IStyleValue`1 {
public T value
public int specificity
public StyleKeyword keyword
public T get_value()
public void set_value(T value)
public int get_specificity()
public void set_specificity(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public bool Apply(U otherValue, StylePropertyApplyMode mode)
}
internal UnityEngine.UIElements.ITextElement {
public string text
public string get_text()
public void set_text(string value)
}
internal UnityEngine.UIElements.ITextInputField {
public bool hasFocus
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
public bool isReadOnly
public bool isDelayed
public bool isPasswordField
public TextEditorEngine editorEngine
public bool get_hasFocus()
public bool get_doubleClickSelectsWord()
public bool get_tripleClickSelectsLine()
public bool get_isReadOnly()
public bool get_isDelayed()
public bool get_isPasswordField()
public TextEditorEngine get_editorEngine()
public void SyncTextEngine()
public bool AcceptCharacter(char c)
public string CullString(string s)
public void UpdateText(string value)
public void UpdateValueFromText()
}
public UnityEngine.UIElements.ITransform {
public Vector3 position
public Quaternion rotation
public Vector3 scale
public Matrix4x4 matrix
public Vector3 get_position()
public void set_position(Vector3 value)
public Quaternion get_rotation()
public void set_rotation(Quaternion value)
public Vector3 get_scale()
public void set_scale(Vector3 value)
public Matrix4x4 get_matrix()
}
internal UnityEngine.UIElements.ITreeViewItem {
public int id
public ITreeViewItem parent
public IEnumerable`1<ITreeViewItem> children
public bool hasChildren
public int get_id()
public ITreeViewItem get_parent()
public IEnumerable`1<ITreeViewItem> get_children()
public bool get_hasChildren()
public void AddChild(ITreeViewItem child)
public void AddChildren(IList`1<ITreeViewItem> children)
public void RemoveChild(ITreeViewItem child)
}
public UnityEngine.UIElements.IUxmlAttributes {
public bool TryGetAttributeValue(string attributeName, String& value)
}
public UnityEngine.UIElements.IUxmlFactory {
public string uxmlName
public string uxmlNamespace
public string uxmlQualifiedName
public bool canHaveAnyAttribute
public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlNamespace()
public string get_uxmlQualifiedName()
public bool get_canHaveAnyAttribute()
public IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription()
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public bool AcceptsAttributeBag(IUxmlAttributes bag, CreationContext cc)
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
internal UnityEngine.UIElements.IVisualElementPanelActivatable {
public VisualElement element
public VisualElement get_element()
public bool CanBeActivated()
public void OnPanelActivate()
public void OnPanelDeactivate()
}
public UnityEngine.UIElements.IVisualElementScheduledItem {
public VisualElement element
public bool isActive
public VisualElement get_element()
public bool get_isActive()
public void Resume()
public void Pause()
public void ExecuteLater(long delayMs)
public IVisualElementScheduledItem StartingIn(long delayMs)
public IVisualElementScheduledItem Every(long intervalMs)
public IVisualElementScheduledItem Until(Func`1<bool> stopCondition)
public IVisualElementScheduledItem ForDuration(long durationMs)
}
public UnityEngine.UIElements.IVisualElementScheduler {
public IVisualElementScheduledItem Execute(Action`1<TimerState> timerUpdateEvent)
public IVisualElementScheduledItem Execute(Action updateEvent)
}
internal UnityEngine.UIElements.IVisualTreeUpdater {
public BaseVisualElementPanel panel
public ProfilerMarker profilerMarker
public BaseVisualElementPanel get_panel()
public void set_panel(BaseVisualElementPanel value)
public ProfilerMarker get_profilerMarker()
public void Update()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
}
public UnityEngine.UIElements.Justify : Enum {
public int value__
public Justify FlexStart
public Justify Center
public Justify FlexEnd
public Justify SpaceBetween
public Justify SpaceAround
}
public UnityEngine.UIElements.KeyboardEventBase`1 : EventBase`1<T> {
private EventModifiers <modifiers>k__BackingField
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
public EventModifiers modifiers
public char character
public KeyCode keyCode
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public char get_character()
protected void set_character(char value)
public KeyCode get_keyCode()
protected void set_keyCode(KeyCode value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
protected void Init()
private void LocalInit()
public T GetPooled(char c, KeyCode keyCode, EventModifiers modifiers)
public T GetPooled(Event systemEvent)
}
internal UnityEngine.UIElements.KeyboardEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
internal UnityEngine.UIElements.KeyboardTextEditorEventHandler : TextEditorEventHandler {
internal bool m_Changed
private bool m_Dragged
private bool m_DragToPosition
private bool m_PostponeMove
private bool m_SelectAllOnMouseUp
private string m_PreDrawCursorText
public void .ctor(TextEditorEngine editorEngine, ITextInputField textInputField)
public void ExecuteDefaultActionAtTarget(EventBase evt)
private void OnFocus(FocusEvent _)
private void OnMouseDown(MouseDownEvent evt)
private void OnMouseUp(MouseUpEvent evt)
private void OnMouseMove(MouseMoveEvent evt)
private void OnKeyDown(KeyDownEvent evt)
private void OnValidateCommandEvent(ValidateCommandEvent evt)
private void OnExecuteCommandEvent(ExecuteCommandEvent evt)
public void PreDrawCursor(string newText)
public void PostDrawCursor()
}
public UnityEngine.UIElements.Label : TextElement {
public string ussClassName
public void .ctor(string text)
}
public UnityEngine.UIElements.Length : ValueType {
private float m_Value
private LengthUnit m_Unit
public float value
public LengthUnit unit
public Length Percent(float value)
public float get_value()
public void set_value(float value)
public LengthUnit get_unit()
public void set_unit(LengthUnit value)
public void .ctor(float value)
public void .ctor(float value, LengthUnit unit)
public Length op_Implicit(float value)
public bool op_Equality(Length lhs, Length rhs)
public bool op_Inequality(Length lhs, Length rhs)
public bool Equals(Length other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.LengthUnit : Enum {
public int value__
public LengthUnit Pixel
public LengthUnit Percent
}
public UnityEngine.UIElements.ListView : BindableElement {
private Action`1<object> onItemChosen
private Action`1<List`1<object>> onSelectionChanged
private IList m_ItemsSource
private Func`1<VisualElement> m_MakeItem
private Action`2<VisualElement, int> m_BindItem
private Func`2<int, int> m_GetItemId
internal int m_ItemHeight
internal bool m_ItemHeightIsInline
private float m_ScrollOffset
private List`1<int> m_SelectedIds
private List`1<int> m_SelectedIndices
private List`1<object> m_SelectedItems
private int m_RangeSelectionOrigin
private SelectionType <selectionType>k__BackingField
internal int s_DefaultItemHeight
internal CustomStyleProperty`1<int> s_ItemHeightProperty
private int m_FirstVisibleIndex
private float m_LastHeight
private List`1<RecycledItem> m_Pool
private ScrollView m_ScrollView
private List`1<RecycledItem> m_ScrollInsertionList
private int k_ExtraVisibleItems
private int m_VisibleItemCount
public string ussClassName
public string itemUssClassName
public string itemSelectedVariantUssClassName
public IList itemsSource
public Func`1<VisualElement> makeItem
public Action`2<VisualElement, int> bindItem
internal Func`2<int, int> getItemId
public int itemHeight
internal List`1<int> currentSelectionIds
public int selectedIndex
public object selectedItem
public VisualElement contentContainer
public SelectionType selectionType
public void add_onItemChosen(Action`1<object> value)
public void remove_onItemChosen(Action`1<object> value)
public void add_onSelectionChanged(Action`1<List`1<object>> value)
public void remove_onSelectionChanged(Action`1<List`1<object>> value)
public IList get_itemsSource()
public void set_itemsSource(IList value)
public Func`1<VisualElement> get_makeItem()
public void set_makeItem(Func`1<VisualElement> value)
public Action`2<VisualElement, int> get_bindItem()
public void set_bindItem(Action`2<VisualElement, int> value)
internal Func`2<int, int> get_getItemId()
internal void set_getItemId(Func`2<int, int> value)
public int get_itemHeight()
public void set_itemHeight(int value)
internal List`1<int> get_currentSelectionIds()
public int get_selectedIndex()
public void set_selectedIndex(int value)
public object get_selectedItem()
public VisualElement get_contentContainer()
public SelectionType get_selectionType()
public void set_selectionType(SelectionType value)
public void .ctor(IList itemsSource, int itemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, int> bindItem)
public void OnKeyDown(KeyDownEvent evt)
public void ScrollToItem(int index)
private void OnClick(MouseDownEvent evt)
internal void SelectAll()
private int GetIdFromIndex(int index)
protected void AddToSelection(int index)
protected void RemoveFromSelection(int index)
protected void SetSelection(int index)
private void NotifyOfSelectionChange()
protected void ClearSelection()
public void ScrollTo(VisualElement visualElement)
internal void OnViewDataReady()
private void OnScroll(float offset)
private bool HasValidDataAndBindings()
public void Refresh()
private void ResizeHeight(float height)
private void Setup(RecycledItem recycledItem, int newIndex)
private void OnSizeChanged(GeometryChangedEvent evt)
private void OnCustomStyleResolved(CustomStyleResolvedEvent e)
}
internal UnityEngine.UIElements.LoadResourceFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Object Invoke(string pathName, Type type, float dpiScaling)
public IAsyncResult BeginInvoke(string pathName, Type type, float dpiScaling, AsyncCallback callback, object object)
public Object EndInvoke(IAsyncResult result)
}
public UnityEngine.UIElements.Manipulator : object {
private VisualElement m_Target
public VisualElement target
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
public VisualElement get_target()
public void set_target(VisualElement value)
}
public UnityEngine.UIElements.ManipulatorActivationFilter : ValueType {
private MouseButton <button>k__BackingField
private EventModifiers <modifiers>k__BackingField
private int <clickCount>k__BackingField
public MouseButton button
public EventModifiers modifiers
public int clickCount
public MouseButton get_button()
public void set_button(MouseButton value)
public EventModifiers get_modifiers()
public void set_modifiers(EventModifiers value)
public int get_clickCount()
public void set_clickCount(int value)
public bool Equals(object obj)
public bool Equals(ManipulatorActivationFilter other)
public int GetHashCode()
public bool Matches(IMouseEvent e)
private bool HasModifiers(IMouseEvent e)
public bool op_Equality(ManipulatorActivationFilter filter1, ManipulatorActivationFilter filter2)
public bool op_Inequality(ManipulatorActivationFilter filter1, ManipulatorActivationFilter filter2)
}
public UnityEngine.UIElements.MeshGenerationContext : object {
internal IStylePainter painter
public VisualElement visualElement
public VisualElement get_visualElement()
internal void .ctor(IStylePainter painter)
public MeshWriteData Allocate(int vertexCount, int indexCount, Texture texture)
internal MeshWriteData Allocate(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags)
}
internal UnityEngine.UIElements.MeshGenerationContextUtils : object {
public void Rectangle(MeshGenerationContext mgc, RectangleParams rectParams)
public void Border(MeshGenerationContext mgc, BorderParams borderParams)
public void Text(MeshGenerationContext mgc, TextParams textParams, TextHandle handle, float pixelsPerPoint)
private Vector2 ConvertBorderRadiusPercentToPoints(Vector2 borderRectSize, Length length)
public void GetVisualElementRadii(VisualElement ve, Vector2& topLeft, Vector2& bottomLeft, Vector2& topRight, Vector2& bottomRight)
}
public UnityEngine.UIElements.MeshWriteData : object {
internal NativeSlice`1<Vertex> m_Vertices
internal NativeSlice`1<ushort> m_Indices
internal Rect m_UVRegion
internal int currentIndex
internal int currentVertex
public int vertexCount
public int indexCount
public Rect uvRegion
public int get_vertexCount()
public int get_indexCount()
public Rect get_uvRegion()
public void SetNextVertex(Vertex vertex)
public void SetNextIndex(ushort index)
public void SetAllVertices(Vertex[] vertices)
public void SetAllIndices(UInt16[] indices)
internal void Reset(NativeSlice`1<Vertex> vertices, NativeSlice`1<ushort> indices)
internal void Reset(NativeSlice`1<Vertex> vertices, NativeSlice`1<ushort> indices, Rect uvRegion)
}
public UnityEngine.UIElements.MinMaxSlider : BaseField`1<Vector2> {
private VisualElement <dragElement>k__BackingField
private VisualElement <dragMinThumb>k__BackingField
private VisualElement <dragMaxThumb>k__BackingField
private ClampedDragger`1<float> <clampedDragger>k__BackingField
private Vector2 m_DragElementStartPos
private Vector2 m_ValueStartPos
private Rect m_DragMinThumbRect
private Rect m_DragMaxThumbRect
private DragState m_DragState
private float m_MinLimit
private float m_MaxLimit
internal float kDefaultHighValue
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string trackerUssClassName
public string draggerUssClassName
public string minThumbUssClassName
public string maxThumbUssClassName
internal VisualElement dragElement
private VisualElement dragMinThumb
private VisualElement dragMaxThumb
internal ClampedDragger`1<float> clampedDragger
public float minValue
public float maxValue
public Vector2 value
public float range
public float lowLimit
public float highLimit
internal VisualElement get_dragElement()
private void set_dragElement(VisualElement value)
private VisualElement get_dragMinThumb()
private void set_dragMinThumb(VisualElement value)
private VisualElement get_dragMaxThumb()
private void set_dragMaxThumb(VisualElement value)
internal ClampedDragger`1<float> get_clampedDragger()
private void set_clampedDragger(ClampedDragger`1<float> value)
public float get_minValue()
public void set_minValue(float value)
public float get_maxValue()
public void set_maxValue(float value)
public Vector2 get_value()
public void set_value(Vector2 value)
public void SetValueWithoutNotify(Vector2 newValue)
public float get_range()
public float get_lowLimit()
public void set_lowLimit(float value)
public float get_highLimit()
public void set_highLimit(float value)
public void .ctor(float minValue, float maxValue, float minLimit, float maxLimit)
public void .ctor(string label, float minValue, float maxValue, float minLimit, float maxLimit)
private Vector2 ClampValues(Vector2 valueToClamp)
private void UpdateDragElementPosition(GeometryChangedEvent evt)
private void UpdateDragElementPosition()
internal float SliderLerpUnclamped(float a, float b, float interpolant)
internal float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue)
private float ComputeValueFromPosition(float positionToConvert)
protected void ExecuteDefaultAction(EventBase evt)
private void SetSliderValueFromDrag()
private void SetSliderValueFromClick()
private void ComputeValueDragStateNoThumb(float lowLimitPosition, float highLimitPosition, float dragElementPos)
private void ComputeValueFromDraggingThumb(float dragElementStartPos, float dragElementEndPos)
}
public UnityEngine.UIElements.MouseButton : Enum {
public int value__
public MouseButton LeftMouse
public MouseButton RightMouse
public MouseButton MiddleMouse
}
public UnityEngine.UIElements.MouseCaptureController : object {
private bool m_IsMouseCapturedWarningEmitted
private bool m_ReleaseMouseWarningEmitted
public bool IsMouseCaptured()
public bool HasMouseCapture(IEventHandler handler)
public void CaptureMouse(IEventHandler handler)
public void ReleaseMouse(IEventHandler handler)
public void ReleaseMouse()
}
internal UnityEngine.UIElements.MouseCaptureDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.MouseCaptureEventBase`1 : PointerCaptureEventBase`1<T> {
public IEventHandler relatedTarget
public IEventHandler get_relatedTarget()
public T GetPooled(IEventHandler target, IEventHandler relatedTarget)
protected void Init()
}
public UnityEngine.UIElements.MouseDownEvent : MouseEventBase`1<MouseDownEvent> {
public MouseDownEvent GetPooled(Event systemEvent)
private MouseDownEvent MakeFromPointerEvent(IPointerEvent pointerEvent)
internal MouseDownEvent GetPooled(PointerDownEvent pointerEvent)
internal MouseDownEvent GetPooled(PointerMoveEvent pointerEvent)
}
public UnityEngine.UIElements.MouseEnterEvent : MouseEventBase`1<MouseEnterEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.MouseEnterWindowEvent : MouseEventBase`1<MouseEnterWindowEvent> {
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.MouseEventBase`1 : EventBase`1<T> {
private EventModifiers <modifiers>k__BackingField
private Vector2 <mousePosition>k__BackingField
private Vector2 <localMousePosition>k__BackingField
private Vector2 <mouseDelta>k__BackingField
private int <clickCount>k__BackingField
private int <button>k__BackingField
private int <pressedButtons>k__BackingField
private bool <UnityEngine.UIElements.IMouseEventInternal.triggeredByOS>k__BackingField
private bool <UnityEngine.UIElements.IMouseEventInternal.recomputeTopElementUnderMouse>k__BackingField
private IPointerEvent <UnityEngine.UIElements.IMouseEventInternal.sourcePointerEvent>k__BackingField
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
public Vector2 mouseDelta
public int clickCount
public int button
public int pressedButtons
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
private bool UnityEngine.UIElements.IMouseEventInternal.triggeredByOS
private bool UnityEngine.UIElements.IMouseEventInternal.recomputeTopElementUnderMouse
private IPointerEvent UnityEngine.UIElements.IMouseEventInternal.sourcePointerEvent
public IEventHandler currentTarget
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public Vector2 get_mousePosition()
protected void set_mousePosition(Vector2 value)
public Vector2 get_localMousePosition()
internal void set_localMousePosition(Vector2 value)
public Vector2 get_mouseDelta()
protected void set_mouseDelta(Vector2 value)
public int get_clickCount()
protected void set_clickCount(int value)
public int get_button()
protected void set_button(int value)
public int get_pressedButtons()
protected void set_pressedButtons(int value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
private bool UnityEngine.UIElements.IMouseEventInternal.get_triggeredByOS()
private void UnityEngine.UIElements.IMouseEventInternal.set_triggeredByOS(bool value)
private bool UnityEngine.UIElements.IMouseEventInternal.get_recomputeTopElementUnderMouse()
private void UnityEngine.UIElements.IMouseEventInternal.set_recomputeTopElementUnderMouse(bool value)
private IPointerEvent UnityEngine.UIElements.IMouseEventInternal.get_sourcePointerEvent()
private void UnityEngine.UIElements.IMouseEventInternal.set_sourcePointerEvent(IPointerEvent value)
protected void Init()
private void LocalInit()
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
protected internal void PreDispatch(IPanel panel)
protected internal void PostDispatch(IPanel panel)
public T GetPooled(Event systemEvent)
public T GetPooled(Vector2 position, int button, int clickCount, Vector2 delta, EventModifiers modifiers)
internal T GetPooled(Vector2 position, int button, int clickCount, Vector2 delta, EventModifiers modifiers, bool fromOS)
internal T GetPooled(IMouseEvent triggerEvent, Vector2 mousePosition, bool recomputeTopElementUnderMouse)
public T GetPooled(IMouseEvent triggerEvent)
protected T GetPooled(IPointerEvent pointerEvent)
}
internal UnityEngine.UIElements.MouseEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
internal UnityEngine.UIElements.MouseEventsHelper : object {
internal void SendEnterLeave(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, IMouseEvent triggerEvent, Vector2 mousePosition)
internal void SendMouseOverMouseOut(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, IMouseEvent triggerEvent, Vector2 mousePosition)
}
public UnityEngine.UIElements.MouseLeaveEvent : MouseEventBase`1<MouseLeaveEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.MouseLeaveWindowEvent : MouseEventBase`1<MouseLeaveWindowEvent> {
protected void Init()
private void LocalInit()
public MouseLeaveWindowEvent GetPooled(Event systemEvent)
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.MouseManipulator : Manipulator {
private List`1<ManipulatorActivationFilter> <activators>k__BackingField
private ManipulatorActivationFilter m_currentActivator
public List`1<ManipulatorActivationFilter> activators
public List`1<ManipulatorActivationFilter> get_activators()
private void set_activators(List`1<ManipulatorActivationFilter> value)
protected bool CanStartManipulation(IMouseEvent e)
protected bool CanStopManipulation(IMouseEvent e)
}
public UnityEngine.UIElements.MouseMoveEvent : MouseEventBase`1<MouseMoveEvent> {
public MouseMoveEvent GetPooled(Event systemEvent)
internal MouseMoveEvent GetPooled(PointerMoveEvent pointerEvent)
}
public UnityEngine.UIElements.MouseUpEvent : MouseEventBase`1<MouseUpEvent> {
public MouseUpEvent GetPooled(Event systemEvent)
private MouseUpEvent MakeFromPointerEvent(IPointerEvent pointerEvent)
internal MouseUpEvent GetPooled(PointerUpEvent pointerEvent)
internal MouseUpEvent GetPooled(PointerMoveEvent pointerEvent)
internal MouseUpEvent GetPooled(PointerCancelEvent pointerEvent)
}
internal UnityEngine.UIElements.ObjectPool`1 : object {
private Stack`1<T> m_Stack
private int m_MaxSize
public int maxSize
public int get_maxSize()
public void set_maxSize(int value)
public void .ctor(int maxSize)
public int Size()
public void Clear()
public T Get()
public void Release(T element)
}
public UnityEngine.UIElements.Overflow : Enum {
public int value__
public Overflow Visible
public Overflow Hidden
}
public UnityEngine.UIElements.OverflowClipBox : Enum {
public int value__
public OverflowClipBox PaddingBox
public OverflowClipBox ContentBox
}
internal UnityEngine.UIElements.OverflowInternal : Enum {
public int value__
public OverflowInternal Visible
public OverflowInternal Hidden
public OverflowInternal Scroll
}
internal UnityEngine.UIElements.Panel : BaseVisualElementPanel {
private VisualElement m_RootContainer
private VisualTreeUpdater m_VisualTreeUpdater
private string m_PanelName
private UInt32 m_Version
private UInt32 m_RepaintVersion
internal Action BeforeUpdaterChange
internal Action AfterUpdaterChange
private ProfilerMarker m_MarkerUpdate
private ProfilerMarker m_MarkerLayout
private ProfilerMarker m_MarkerBindings
private ProfilerMarker m_MarkerAnimations
private ProfilerMarker s_MarkerPickAll
private EventDispatcher <dispatcher>k__BackingField
private TimerEventScheduler m_Scheduler
private ScriptableObject <ownerObject>k__BackingField
private ContextType <contextType>k__BackingField
private SavePersistentViewData <saveViewData>k__BackingField
private GetViewDataDictionary <getViewDataDictionary>k__BackingField
private FocusController <focusController>k__BackingField
private EventInterests <IMGUIEventInterests>k__BackingField
private LoadResourceFunction <loadResourceFunc>k__BackingField
private Focusable m_SavedFocusedElement
private TimeMsFunction s_TimeSinceStartup
private int <IMGUIContainersCount>k__BackingField
private IMGUIContainer <rootIMGUIContainer>k__BackingField
private Shader m_StandardShader
private bool m_ValidatingLayout
public VisualElement visualTree
public EventDispatcher dispatcher
public TimerEventScheduler timerEventScheduler
internal IScheduler scheduler
public ScriptableObject ownerObject
public ContextType contextType
public SavePersistentViewData saveViewData
public GetViewDataDictionary getViewDataDictionary
public FocusController focusController
public EventInterests IMGUIEventInterests
internal LoadResourceFunction loadResourceFunc
internal string name
internal TimeMsFunction TimeSinceStartup
public int IMGUIContainersCount
public IMGUIContainer rootIMGUIContainer
internal UInt32 version
internal UInt32 repaintVersion
internal Shader standardShader
public VisualElement get_visualTree()
public EventDispatcher get_dispatcher()
protected void set_dispatcher(EventDispatcher value)
public TimerEventScheduler get_timerEventScheduler()
internal IScheduler get_scheduler()
public ScriptableObject get_ownerObject()
protected void set_ownerObject(ScriptableObject value)
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public SavePersistentViewData get_saveViewData()
public void set_saveViewData(SavePersistentViewData value)
public GetViewDataDictionary get_getViewDataDictionary()
public void set_getViewDataDictionary(GetViewDataDictionary value)
public FocusController get_focusController()
public void set_focusController(FocusController value)
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
private LoadResourceFunction get_loadResourceFunc()
internal void set_loadResourceFunc(LoadResourceFunction value)
internal Object LoadResource(string pathName, Type type, float dpiScaling)
internal void Focus()
internal void Blur()
internal string get_name()
internal void set_name(string value)
private void CreateMarkers()
internal TimeMsFunction get_TimeSinceStartup()
internal void set_TimeSinceStartup(TimeMsFunction value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
public IMGUIContainer get_rootIMGUIContainer()
public void set_rootIMGUIContainer(IMGUIContainer value)
internal UInt32 get_version()
internal UInt32 get_repaintVersion()
internal Shader get_standardShader()
internal void set_standardShader(Shader value)
internal Panel CreateEditorPanel(ScriptableObject ownerObject)
public void .ctor(ScriptableObject ownerObject, ContextType contextType, EventDispatcher dispatcher)
protected void Dispose(bool disposing)
public long TimeSinceStartupMs()
internal long DefaultTimeSinceStartupMs()
internal VisualElement PickAllWithoutValidatingLayout(VisualElement root, Vector2 point)
private VisualElement PickAll(VisualElement root, Vector2 point, List`1<VisualElement> picked)
private VisualElement PerformPick(VisualElement root, Vector2 point, List`1<VisualElement> picked)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
public VisualElement Pick(Vector2 point)
public void ValidateLayout()
public void UpdateAnimations()
public void UpdateBindings()
public void ApplyStyles()
private void UpdateForRepaint()
public void Repaint(Event e)
internal void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
internal void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase)
internal IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase)
}
public UnityEngine.UIElements.PanelChangedEventBase`1 : EventBase`1<T> {
private IPanel <originPanel>k__BackingField
private IPanel <destinationPanel>k__BackingField
public IPanel originPanel
public IPanel destinationPanel
public IPanel get_originPanel()
private void set_originPanel(IPanel value)
public IPanel get_destinationPanel()
private void set_destinationPanel(IPanel value)
protected void Init()
private void LocalInit()
public T GetPooled(IPanel originPanel, IPanel destinationPanel)
}
internal UnityEngine.UIElements.PanelClearFlags : Enum {
public int value__
public PanelClearFlags None
public PanelClearFlags Color
public PanelClearFlags Depth
public PanelClearFlags All
}
public UnityEngine.UIElements.PickingMode : Enum {
public int value__
public PickingMode Position
public PickingMode Ignore
}
public UnityEngine.UIElements.PointerCancelEvent : PointerEventBase`1<PointerCancelEvent> {
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
internal UnityEngine.UIElements.PointerCaptureDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.PointerCaptureEventBase`1 : EventBase`1<T> {
private IEventHandler <relatedTarget>k__BackingField
private int <pointerId>k__BackingField
public IEventHandler relatedTarget
public int pointerId
public IEventHandler get_relatedTarget()
private void set_relatedTarget(IEventHandler value)
public int get_pointerId()
private void set_pointerId(int value)
protected void Init()
private void LocalInit()
public T GetPooled(IEventHandler target, IEventHandler relatedTarget, int pointerId)
}
public UnityEngine.UIElements.PointerCaptureHelper : object {
private PointerDispatchState GetStateFor(IEventHandler handler)
public bool HasPointerCapture(IEventHandler handler, int pointerId)
public void CapturePointer(IEventHandler handler, int pointerId)
public void ReleasePointer(IEventHandler handler, int pointerId)
public IEventHandler GetCapturingElement(IPanel panel, int pointerId)
public void ReleasePointer(IPanel panel, int pointerId)
internal void ActivateCompatibilityMouseEvents(IPanel panel, int pointerId)
internal void PreventCompatibilityMouseEvents(IPanel panel, int pointerId)
internal bool ShouldSendCompatibilityMouseEvents(IPanel panel, IPointerEvent evt)
internal void ProcessPointerCapture(IPanel panel, int pointerId)
internal void ResetPointerDispatchState(IPanel panel)
}
internal UnityEngine.UIElements.PointerDeviceState : object {
private Vector2[] m_Positions
private IPanel[] m_Panels
private Int32[] m_PressedButtons
internal void Reset()
public void SavePointerPosition(int pointerId, Vector2 position, IPanel panel)
public void PressButton(int pointerId, int buttonId)
public void ReleaseButton(int pointerId, int buttonId)
public void ReleaseAllButtons(int pointerId)
public Vector2 GetPointerPosition(int pointerId)
public IPanel GetPanel(int pointerId)
public int GetPressedButtons(int pointerId)
internal bool HasAdditionalPressedButtons(int pointerId, int exceptButtonId)
}
internal UnityEngine.UIElements.PointerDispatchState : object {
private IEventHandler[] m_PendingPointerCapture
private IEventHandler[] m_PointerCapture
private Boolean[] m_ShouldSendCompatibilityMouseEvents
internal void Reset()
public IEventHandler GetCapturingElement(int pointerId)
public bool HasPointerCapture(IEventHandler handler, int pointerId)
public void CapturePointer(IEventHandler handler, int pointerId)
public void ReleasePointer(int pointerId)
public void ReleasePointer(IEventHandler handler, int pointerId)
public void ProcessPointerCapture(int pointerId)
public void ActivateCompatibilityMouseEvents(int pointerId)
public void PreventCompatibilityMouseEvents(int pointerId)
public bool ShouldSendCompatibilityMouseEvents(IPointerEvent evt)
}
public UnityEngine.UIElements.PointerDownEvent : PointerEventBase`1<PointerDownEvent> {
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.PointerEnterEvent : PointerEventBase`1<PointerEnterEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.PointerEventBase`1 : EventBase`1<T> {
private int <pointerId>k__BackingField
private string <pointerType>k__BackingField
private bool <isPrimary>k__BackingField
private int <button>k__BackingField
private int <pressedButtons>k__BackingField
private Vector3 <position>k__BackingField
private Vector3 <localPosition>k__BackingField
private Vector3 <deltaPosition>k__BackingField
private float <deltaTime>k__BackingField
private int <clickCount>k__BackingField
private float <pressure>k__BackingField
private float <tangentialPressure>k__BackingField
private float <altitudeAngle>k__BackingField
private float <azimuthAngle>k__BackingField
private float <twist>k__BackingField
private Vector2 <radius>k__BackingField
private Vector2 <radiusVariance>k__BackingField
private EventModifiers <modifiers>k__BackingField
private bool <UnityEngine.UIElements.IPointerEventInternal.triggeredByOS>k__BackingField
private bool <UnityEngine.UIElements.IPointerEventInternal.recomputeTopElementUnderPointer>k__BackingField
public int pointerId
public string pointerType
public bool isPrimary
public int button
public int pressedButtons
public Vector3 position
public Vector3 localPosition
public Vector3 deltaPosition
public float deltaTime
public int clickCount
public float pressure
public float tangentialPressure
public float altitudeAngle
public float azimuthAngle
public float twist
public Vector2 radius
public Vector2 radiusVariance
public EventModifiers modifiers
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
private bool UnityEngine.UIElements.IPointerEventInternal.triggeredByOS
private bool UnityEngine.UIElements.IPointerEventInternal.recomputeTopElementUnderPointer
public IEventHandler currentTarget
public int get_pointerId()
protected void set_pointerId(int value)
public string get_pointerType()
protected void set_pointerType(string value)
public bool get_isPrimary()
protected void set_isPrimary(bool value)
public int get_button()
protected void set_button(int value)
public int get_pressedButtons()
protected void set_pressedButtons(int value)
public Vector3 get_position()
protected void set_position(Vector3 value)
public Vector3 get_localPosition()
protected void set_localPosition(Vector3 value)
public Vector3 get_deltaPosition()
protected void set_deltaPosition(Vector3 value)
public float get_deltaTime()
protected void set_deltaTime(float value)
public int get_clickCount()
protected void set_clickCount(int value)
public float get_pressure()
protected void set_pressure(float value)
public float get_tangentialPressure()
protected void set_tangentialPressure(float value)
public float get_altitudeAngle()
protected void set_altitudeAngle(float value)
public float get_azimuthAngle()
protected void set_azimuthAngle(float value)
public float get_twist()
protected void set_twist(float value)
public Vector2 get_radius()
protected void set_radius(Vector2 value)
public Vector2 get_radiusVariance()
protected void set_radiusVariance(Vector2 value)
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
private bool UnityEngine.UIElements.IPointerEventInternal.get_triggeredByOS()
private void UnityEngine.UIElements.IPointerEventInternal.set_triggeredByOS(bool value)
private bool UnityEngine.UIElements.IPointerEventInternal.get_recomputeTopElementUnderPointer()
private void UnityEngine.UIElements.IPointerEventInternal.set_recomputeTopElementUnderPointer(bool value)
protected void Init()
private void LocalInit()
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
private bool IsMouse(Event systemEvent)
public T GetPooled(Event systemEvent)
public T GetPooled(Touch touch, EventModifiers modifiers)
internal T GetPooled(IPointerEvent triggerEvent, Vector2 position, int pointerId)
public T GetPooled(IPointerEvent triggerEvent)
protected internal void PreDispatch(IPanel panel)
protected internal void PostDispatch(IPanel panel)
}
internal UnityEngine.UIElements.PointerEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
internal UnityEngine.UIElements.PointerEventsHelper : object {
internal void SendEnterLeave(VisualElement previousTopElementUnderPointer, VisualElement currentTopElementUnderPointer, IPointerEvent triggerEvent, Vector2 position, int pointerId)
internal void SendOverOut(VisualElement previousTopElementUnderPointer, VisualElement currentTopElementUnderPointer, IPointerEvent triggerEvent, Vector2 position, int pointerId)
}
public UnityEngine.UIElements.PointerId : object {
public int maxPointers
public int invalidPointerId
public int mousePointerId
public int touchPointerIdBase
public int touchPointerCount
public int penPointerIdBase
public int penPointerCount
internal IEnumerable`1<int> hoveringPointers
internal IEnumerable`1<int> get_hoveringPointers()
}
public UnityEngine.UIElements.PointerLeaveEvent : PointerEventBase`1<PointerLeaveEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.PointerMoveEvent : PointerEventBase`1<PointerMoveEvent> {
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.PointerStationaryEvent : PointerEventBase`1<PointerStationaryEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.PointerType : object {
public string mouse
public string touch
public string pen
public string unknown
internal string GetPointerType(int pointerId)
internal bool IsDirectManipulationDevice(string pointerType)
}
public UnityEngine.UIElements.PointerUpEvent : PointerEventBase`1<PointerUpEvent> {
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.PopupWindow : TextElement {
private VisualElement m_ContentContainer
public string ussClassName
public string contentUssClassName
public VisualElement contentContainer
public VisualElement get_contentContainer()
}
public UnityEngine.UIElements.Position : Enum {
public int value__
public Position Relative
public Position Absolute
}
internal UnityEngine.UIElements.ProjectionUtils : object {
public Matrix4x4 Ortho(float left, float right, float bottom, float top, float near, float far)
}
internal UnityEngine.UIElements.PropagationPaths : object {
private ObjectPool`1<PropagationPaths> s_Pool
public List`1<VisualElement> trickleDownPath
public List`1<VisualElement> targetElements
public List`1<VisualElement> bubbleUpPath
private int k_DefaultPropagationDepth
private int k_DefaultTargetCount
public void .ctor(PropagationPaths paths)
internal PropagationPaths Copy(PropagationPaths paths)
public PropagationPaths Build(VisualElement elem, Type pathTypesRequested)
public void Release()
}
public UnityEngine.UIElements.PropagationPhase : Enum {
public int value__
public PropagationPhase None
public PropagationPhase TrickleDown
public PropagationPhase AtTarget
public PropagationPhase DefaultActionAtTarget
public PropagationPhase BubbleUp
public PropagationPhase DefaultAction
}
internal UnityEngine.UIElements.PseudoStates : Enum {
public int value__
public PseudoStates Active
public PseudoStates Hover
public PseudoStates Checked
public PseudoStates Disabled
public PseudoStates Focus
public PseudoStates Root
}
internal UnityEngine.UIElements.RenderHints : Enum {
public int value__
public RenderHints None
public RenderHints GroupTransform
public RenderHints BoneTransform
public RenderHints ClipWithScissors
}
internal UnityEngine.UIElements.RepaintData : object {
private Matrix4x4 <currentOffset>k__BackingField
private Vector2 <mousePosition>k__BackingField
private Rect <currentWorldClip>k__BackingField
private Event <repaintEvent>k__BackingField
public Matrix4x4 currentOffset
public Vector2 mousePosition
public Rect currentWorldClip
public Event repaintEvent
public Matrix4x4 get_currentOffset()
public void set_currentOffset(Matrix4x4 value)
public Vector2 get_mousePosition()
public void set_mousePosition(Vector2 value)
public Rect get_currentWorldClip()
public void set_currentWorldClip(Rect value)
public Event get_repaintEvent()
public void set_repaintEvent(Event value)
}
public UnityEngine.UIElements.RepeatButton : TextElement {
private Clickable m_Clickable
public string ussClassName
public void .ctor(Action clickEvent, long delay, long interval)
public void SetAction(Action clickEvent, long delay, long interval)
}
internal UnityEngine.UIElements.RuleMatcher : ValueType {
public StyleSheet sheet
public StyleComplexSelector complexSelector
public void .ctor(StyleSheet sheet, StyleComplexSelector complexSelector, int styleSheetIndexInStack)
public string ToString()
}
internal UnityEngine.UIElements.RuntimePanel : Panel {
internal RenderTexture targetTexture
public void .ctor(ScriptableObject ownerObject, EventDispatcher dispatcher)
public void Repaint(Event e)
}
internal UnityEngine.UIElements.SavePersistentViewData : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.UIElements.ScheduledItem : object {
public Func`1<bool> timerUpdateStopCondition
public Func`1<bool> OnceCondition
public Func`1<bool> ForeverCondition
private long <startMs>k__BackingField
private long <delayMs>k__BackingField
private long <intervalMs>k__BackingField
private long <endTimeMs>k__BackingField
public long startMs
public long delayMs
public long intervalMs
public long endTimeMs
public long get_startMs()
public void set_startMs(long value)
public long get_delayMs()
public void set_delayMs(long value)
public long get_intervalMs()
public void set_intervalMs(long value)
public long get_endTimeMs()
private void set_endTimeMs(long value)
protected void ResetStartTime()
public void SetDuration(long durationMs)
public void PerformTimerUpdate(TimerState state)
internal void OnItemUnscheduled()
public bool ShouldUnschedule()
}
public UnityEngine.UIElements.Scroller : VisualElement {
private Action`1<float> valueChanged
private Slider <slider>k__BackingField
private RepeatButton <lowButton>k__BackingField
private RepeatButton <highButton>k__BackingField
internal float kDefaultPageSize
public string ussClassName
public string horizontalVariantUssClassName
public string verticalVariantUssClassName
public string sliderUssClassName
public string lowButtonUssClassName
public string highButtonUssClassName
public Slider slider
public RepeatButton lowButton
public RepeatButton highButton
public float value
public float lowValue
public float highValue
public SliderDirection direction
public void add_valueChanged(Action`1<float> value)
public void remove_valueChanged(Action`1<float> value)
public Slider get_slider()
private void set_slider(Slider value)
public RepeatButton get_lowButton()
private void set_lowButton(RepeatButton value)
public RepeatButton get_highButton()
private void set_highButton(RepeatButton value)
public float get_value()
public void set_value(float value)
public float get_lowValue()
public void set_lowValue(float value)
public float get_highValue()
public void set_highValue(float value)
public SliderDirection get_direction()
public void set_direction(SliderDirection value)
public void .ctor(float lowValue, float highValue, Action`1<float> valueChanged, SliderDirection direction)
public void Adjust(float factor)
private void OnSliderValueChange(ChangeEvent`1<float> evt)
public void ScrollPageUp()
public void ScrollPageDown()
public void ScrollPageUp(float factor)
public void ScrollPageDown(float factor)
}
public UnityEngine.UIElements.ScrollView : VisualElement {
private bool m_ShowHorizontal
private bool m_ShowVertical
private VisualElement <contentViewport>k__BackingField
private Scroller <horizontalScroller>k__BackingField
private Scroller <verticalScroller>k__BackingField
private VisualElement m_ContentContainer
public string ussClassName
public string viewportUssClassName
public string contentUssClassName
public string hScrollerUssClassName
public string vScrollerUssClassName
public string horizontalVariantUssClassName
public string verticalVariantUssClassName
public string verticalHorizontalVariantUssClassName
public string scrollVariantUssClassName
public bool showHorizontal
public bool showVertical
internal bool needsHorizontal
internal bool needsVertical
public Vector2 scrollOffset
public float horizontalPageSize
public float verticalPageSize
private float scrollableWidth
private float scrollableHeight
public VisualElement contentViewport
public Scroller horizontalScroller
public Scroller verticalScroller
public VisualElement contentContainer
public bool get_showHorizontal()
public void set_showHorizontal(bool value)
public bool get_showVertical()
public void set_showVertical(bool value)
internal bool get_needsHorizontal()
internal bool get_needsVertical()
public Vector2 get_scrollOffset()
public void set_scrollOffset(Vector2 value)
public float get_horizontalPageSize()
public void set_horizontalPageSize(float value)
public float get_verticalPageSize()
public void set_verticalPageSize(float value)
private float get_scrollableWidth()
private float get_scrollableHeight()
private void UpdateContentViewTransform()
public void ScrollTo(VisualElement child)
private float GetXDeltaOffset(VisualElement child)
private float GetYDeltaOffset(VisualElement child)
private float GetDeltaDistance(float viewMin, float viewMax, float childBoundaryMin, float childBoundaryMax)
public VisualElement get_contentViewport()
private void set_contentViewport(VisualElement value)
public Scroller get_horizontalScroller()
private void set_horizontalScroller(Scroller value)
public Scroller get_verticalScroller()
private void set_verticalScroller(Scroller value)
public VisualElement get_contentContainer()
public void .ctor(ScrollViewMode scrollViewMode)
internal void SetScrollViewMode(ScrollViewMode scrollViewMode)
private void OnGeometryChanged(GeometryChangedEvent evt)
private void UpdateScrollers(bool displayHorizontal, bool displayVertical)
private void OnScrollWheel(WheelEvent evt)
private void <.ctor>b__57_0(float value)
private void <.ctor>b__57_1(float value)
}
public UnityEngine.UIElements.ScrollViewMode : Enum {
public int value__
public ScrollViewMode Vertical
public ScrollViewMode Horizontal
public ScrollViewMode VerticalAndHorizontal
}
public UnityEngine.UIElements.SelectionType : Enum {
public int value__
public SelectionType None
public SelectionType Single
public SelectionType Multiple
}
public UnityEngine.UIElements.Slider : BaseSlider`1<float> {
internal float kDefaultHighValue
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public void .ctor(float start, float end, SliderDirection direction, float pageSize)
public void .ctor(string label, float start, float end, SliderDirection direction, float pageSize)
internal float SliderLerpUnclamped(float a, float b, float interpolant)
internal float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue)
internal float SliderRange()
}
public UnityEngine.UIElements.SliderDirection : Enum {
public int value__
public SliderDirection Horizontal
public SliderDirection Vertical
}
public UnityEngine.UIElements.SliderInt : BaseSlider`1<int> {
internal int kDefaultHighValue
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public float pageSize
public void .ctor(int start, int end, SliderDirection direction, float pageSize)
public void .ctor(string label, int start, int end, SliderDirection direction, float pageSize)
public float get_pageSize()
public void set_pageSize(float value)
internal int SliderLerpUnclamped(int a, int b, float interpolant)
internal float SliderNormalizeValue(int currentValue, int lowerValue, int higherValue)
internal int SliderRange()
internal void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos)
}
internal UnityEngine.UIElements.Spacing : ValueType {
public float left
public float top
public float right
public float bottom
public float horizontal
public float vertical
public float get_horizontal()
public float get_vertical()
public void .ctor(float left, float top, float right, float bottom)
public Rect op_Addition(Rect r, Spacing a)
public Rect op_Subtraction(Rect r, Spacing a)
}
internal UnityEngine.UIElements.StringUtils : object {
public int LevenshteinDistance(string s, string t)
}
internal UnityEngine.UIElements.StringUtilsExtensions : object {
private char NoDelimiter
private Char[] WordDelimiters
public string ToPascalCase(string text)
public string ToCamelCase(string text)
public string ToKebabCase(string text)
public string ToTrainCase(string text)
public string ToSnakeCase(string text)
private string ConvertCase(string text, char outputWordDelimiter, Func`2<char, char> startOfStringCaseHandler, Func`2<char, char> middleStringCaseHandler)
}
public UnityEngine.UIElements.StyleBackground : ValueType {
private StyleKeyword m_Keyword
private Background m_Value
private int m_Specificity
public Background value
internal int specificity
private int UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Background>.specificity
public StyleKeyword keyword
public Background get_value()
public void set_value(Background value)
internal int get_specificity()
internal void set_specificity(int value)
private int UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Background>.get_specificity()
private void UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Background>.set_specificity(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Background v)
public void .ctor(Texture2D v)
public void .ctor(VectorImage v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Texture2D v, StyleKeyword keyword)
internal void .ctor(VectorImage v, StyleKeyword keyword)
internal void .ctor(Background v, StyleKeyword keyword)
internal bool Apply(U other, StylePropertyApplyMode mode)
private bool UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Background>.Apply(U other, StylePropertyApplyMode mode)
public bool op_Equality(StyleBackground lhs, StyleBackground rhs)
public bool op_Inequality(StyleBackground lhs, StyleBackground rhs)
public StyleBackground op_Implicit(StyleKeyword keyword)
public StyleBackground op_Implicit(Background v)
public StyleBackground op_Implicit(Texture2D v)
public bool Equals(StyleBackground other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleCache : object {
private Dictionary`2<long, VisualElementStylesData> s_StyleDataCache
private Dictionary`2<int, InheritedStylesData> s_InheritedStyleDataCache
private Dictionary`2<int, StyleVariableContext> s_StyleVariableContextCache
public bool TryGetValue(long hash, VisualElementStylesData& data)
public void SetValue(long hash, VisualElementStylesData data)
public bool TryGetValue(int hash, InheritedStylesData& data)
public void SetValue(int hash, InheritedStylesData data)
public bool TryGetValue(int hash, StyleVariableContext& data)
public void SetValue(int hash, StyleVariableContext data)
public void ClearStyleCache()
}
public UnityEngine.UIElements.StyleColor : ValueType {
private StyleKeyword m_Keyword
private Color m_Value
private int m_Specificity
public Color value
internal int specificity
private int UnityEngine.UIElements.IStyleValue<UnityEngine.Color>.specificity
public StyleKeyword keyword
public Color get_value()
public void set_value(Color value)
internal int get_specificity()
internal void set_specificity(int value)
private int UnityEngine.UIElements.IStyleValue<UnityEngine.Color>.get_specificity()
private void UnityEngine.UIElements.IStyleValue<UnityEngine.Color>.set_specificity(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Color v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Color v, StyleKeyword keyword)
internal bool Apply(U other, StylePropertyApplyMode mode)
private bool UnityEngine.UIElements.IStyleValue<UnityEngine.Color>.Apply(U other, StylePropertyApplyMode mode)
public bool op_Equality(StyleColor lhs, StyleColor rhs)
public bool op_Inequality(StyleColor lhs, StyleColor rhs)
public bool op_Equality(StyleColor lhs, Color rhs)
public bool op_Inequality(StyleColor lhs, Color rhs)
public StyleColor op_Implicit(StyleKeyword keyword)
public StyleColor op_Implicit(Color v)
public bool Equals(StyleColor other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleComplexSelector : object {
private int m_Specificity
private StyleRule <rule>k__BackingField
private StyleSelector[] m_Selectors
internal int ruleIndex
internal StyleComplexSelector nextInTable
internal int orderInStyleSheet
private Dictionary`2<string, PseudoStateData> s_PseudoStates
public int specificity
public StyleRule rule
public bool isSimple
public StyleSelector[] selectors
public int get_specificity()
internal void set_specificity(int value)
public StyleRule get_rule()
internal void set_rule(StyleRule value)
public bool get_isSimple()
public StyleSelector[] get_selectors()
internal void set_selectors(StyleSelector[] value)
internal void CachePseudoStateMasks()
public string ToString()
}
public UnityEngine.UIElements.StyleCursor : ValueType {
private StyleKeyword m_Keyword
private Cursor m_Value
private int m_Specificity
public Cursor value
internal int specificity
private int UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Cursor>.specificity
public StyleKeyword keyword
public Cursor get_value()
public void set_value(Cursor value)
internal int get_specificity()
internal void set_specificity(int value)
private int UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Cursor>.get_specificity()
private void UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Cursor>.set_specificity(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Cursor v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Cursor v, StyleKeyword keyword)
internal bool Apply(U other, StylePropertyApplyMode mode)
private bool UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Cursor>.Apply(U other, StylePropertyApplyMode mode)
public bool op_Equality(StyleCursor lhs, StyleCursor rhs)
public bool op_Inequality(StyleCursor lhs, StyleCursor rhs)
public StyleCursor op_Implicit(StyleKeyword keyword)
public StyleCursor op_Implicit(Cursor v)
public bool Equals(StyleCursor other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleEnum`1 : ValueType {
private StyleKeyword m_Keyword
private T m_Value
private int m_Specificity
public T value
internal int specificity
private int UnityEngine.UIElements.IStyleValue<T>.specificity
public StyleKeyword keyword
public T get_value()
public void set_value(T value)
internal int get_specificity()
internal void set_specificity(int value)
private int UnityEngine.UIElements.IStyleValue<T>.get_specificity()
private void UnityEngine.UIElements.IStyleValue<T>.set_specificity(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(T v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(T v, StyleKeyword keyword)
internal bool Apply(U other, StylePropertyApplyMode mode)
private bool UnityEngine.UIElements.IStyleValue<T>.Apply(U other, StylePropertyApplyMode mode)
public bool op_Equality(StyleEnum`1<T> lhs, StyleEnum`1<T> rhs)
public bool op_Inequality(StyleEnum`1<T> lhs, StyleEnum`1<T> rhs)
public StyleEnum`1<T> op_Implicit(StyleKeyword keyword)
public StyleEnum`1<T> op_Implicit(T v)
public bool Equals(StyleEnum`1<T> other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleFloat : ValueType {
private StyleKeyword m_Keyword
private float m_Value
private int m_Specificity
public float value
internal int specificity
private int UnityEngine.UIElements.IStyleValue<System.Single>.specificity
public StyleKeyword keyword
public float get_value()
public void set_value(float value)
internal int get_specificity()
internal void set_specificity(int value)
private int UnityEngine.UIElements.IStyleValue<System.Single>.get_specificity()
private void UnityEngine.UIElements.IStyleValue<System.Single>.set_specificity(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(float v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(float v, StyleKeyword keyword)
internal bool Apply(U other, StylePropertyApplyMode mode)
private bool UnityEngine.UIElements.IStyleValue<System.Single>.Apply(U other, StylePropertyApplyMode mode)
public bool op_Equality(StyleFloat lhs, StyleFloat rhs)
public bool op_Inequality(StyleFloat lhs, StyleFloat rhs)
public StyleFloat op_Implicit(StyleKeyword keyword)
public StyleFloat op_Implicit(float v)
public bool Equals(StyleFloat other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleFont : ValueType {
private StyleKeyword m_Keyword
private Font m_Value
private int m_Specificity
public Font value
internal int specificity
private int UnityEngine.UIElements.IStyleValue<UnityEngine.Font>.specificity
public StyleKeyword keyword
public Font get_value()
public void set_value(Font value)
internal int get_specificity()
internal void set_specificity(int value)
private int UnityEngine.UIElements.IStyleValue<UnityEngine.Font>.get_specificity()
private void UnityEngine.UIElements.IStyleValue<UnityEngine.Font>.set_specificity(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Font v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Font v, StyleKeyword keyword)
internal bool Apply(U other, StylePropertyApplyMode mode)
private bool UnityEngine.UIElements.IStyleValue<UnityEngine.Font>.Apply(U other, StylePropertyApplyMode mode)
public bool op_Equality(StyleFont lhs, StyleFont rhs)
public bool op_Inequality(StyleFont lhs, StyleFont rhs)
public StyleFont op_Implicit(StyleKeyword keyword)
public StyleFont op_Implicit(Font v)
public bool Equals(StyleFont other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleInt : ValueType {
private StyleKeyword m_Keyword
private int m_Value
private int m_Specificity
public int value
internal int specificity
private int UnityEngine.UIElements.IStyleValue<System.Int32>.specificity
public StyleKeyword keyword
public int get_value()
public void set_value(int value)
internal int get_specificity()
internal void set_specificity(int value)
private int UnityEngine.UIElements.IStyleValue<System.Int32>.get_specificity()
private void UnityEngine.UIElements.IStyleValue<System.Int32>.set_specificity(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(int v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(int v, StyleKeyword keyword)
internal bool Apply(U other, StylePropertyApplyMode mode)
private bool UnityEngine.UIElements.IStyleValue<System.Int32>.Apply(U other, StylePropertyApplyMode mode)
public bool op_Equality(StyleInt lhs, StyleInt rhs)
public bool op_Inequality(StyleInt lhs, StyleInt rhs)
public StyleInt op_Implicit(StyleKeyword keyword)
public StyleInt op_Implicit(int v)
public bool Equals(StyleInt other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleKeyword : Enum {
public int value__
public StyleKeyword Undefined
public StyleKeyword Null
public StyleKeyword Auto
public StyleKeyword None
public StyleKeyword Initial
}
public UnityEngine.UIElements.StyleLength : ValueType {
private StyleKeyword m_Keyword
private Length m_Value
private int m_Specificity
public Length value
internal int specificity
private int UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Length>.specificity
public StyleKeyword keyword
public Length get_value()
public void set_value(Length value)
internal int get_specificity()
internal void set_specificity(int value)
private int UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Length>.get_specificity()
private void UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Length>.set_specificity(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(float v)
public void .ctor(Length v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Length v, StyleKeyword keyword)
internal bool Apply(U other, StylePropertyApplyMode mode)
private bool UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Length>.Apply(U other, StylePropertyApplyMode mode)
public bool op_Equality(StyleLength lhs, StyleLength rhs)
public bool op_Inequality(StyleLength lhs, StyleLength rhs)
public StyleLength op_Implicit(StyleKeyword keyword)
public StyleLength op_Implicit(float v)
public StyleLength op_Implicit(Length v)
public bool Equals(StyleLength other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleMatchingContext : object {
public List`1<StyleSheet> styleSheetStack
public StyleVariableContext variableContext
public VisualElement currentElement
public Action`2<VisualElement, MatchResultInfo> processResult
public InheritedStylesData inheritedStyle
public void .ctor(Action`2<VisualElement, MatchResultInfo> processResult)
}
internal UnityEngine.UIElements.StyleProperty : object {
private string m_Name
private int m_Line
private StyleValueHandle[] m_Values
internal bool isCustomProperty
internal bool requireVariableResolve
public string name
public int line
public StyleValueHandle[] values
public string get_name()
internal void set_name(string value)
public int get_line()
internal void set_line(int value)
public StyleValueHandle[] get_values()
internal void set_values(StyleValueHandle[] value)
}
internal UnityEngine.UIElements.StyleRule : object {
private StyleProperty[] m_Properties
internal int line
internal int customPropertiesCount
public StyleProperty[] properties
public StyleProperty[] get_properties()
internal void set_properties(StyleProperty[] value)
}
internal UnityEngine.UIElements.StyleSelector : object {
private StyleSelectorPart[] m_Parts
private StyleSelectorRelationship m_PreviousRelationship
internal int pseudoStateMask
internal int negatedPseudoStateMask
public StyleSelectorPart[] parts
public StyleSelectorRelationship previousRelationship
public StyleSelectorPart[] get_parts()
internal void set_parts(StyleSelectorPart[] value)
public StyleSelectorRelationship get_previousRelationship()
internal void set_previousRelationship(StyleSelectorRelationship value)
public string ToString()
}
internal UnityEngine.UIElements.StyleSelectorPart : ValueType {
private string m_Value
private StyleSelectorType m_Type
internal object tempData
public string value
public StyleSelectorType type
public string get_value()
internal void set_value(string value)
public StyleSelectorType get_type()
internal void set_type(StyleSelectorType value)
public string ToString()
public StyleSelectorPart CreateClass(string className)
public StyleSelectorPart CreatePseudoClass(string className)
public StyleSelectorPart CreateId(string Id)
public StyleSelectorPart CreateType(Type t)
public StyleSelectorPart CreateType(string typeName)
public StyleSelectorPart CreatePredicate(object predicate)
public StyleSelectorPart CreateWildCard()
}
internal UnityEngine.UIElements.StyleSelectorRelationship : Enum {
public int value__
public StyleSelectorRelationship None
public StyleSelectorRelationship Child
public StyleSelectorRelationship Descendent
}
internal UnityEngine.UIElements.StyleSelectorType : Enum {
public int value__
public StyleSelectorType Unknown
public StyleSelectorType Wildcard
public StyleSelectorType Type
public StyleSelectorType Class
public StyleSelectorType PseudoClass
public StyleSelectorType RecursivePseudoClass
public StyleSelectorType ID
public StyleSelectorType Predicate
}
public UnityEngine.UIElements.StyleSheet : ScriptableObject {
private StyleRule[] m_Rules
private StyleComplexSelector[] m_ComplexSelectors
internal Single[] floats
internal Dimension[] dimensions
internal Color[] colors
internal String[] strings
internal Object[] assets
internal ScalableImage[] scalableImages
internal Dictionary`2<string, StyleComplexSelector> orderedNameSelectors
internal Dictionary`2<string, StyleComplexSelector> orderedTypeSelectors
internal Dictionary`2<string, StyleComplexSelector> orderedClassSelectors
internal bool isUnityStyleSheet
private string kCustomPropertyMarker
internal StyleRule[] rules
internal StyleComplexSelector[] complexSelectors
internal StyleRule[] get_rules()
internal void set_rules(StyleRule[] value)
internal StyleComplexSelector[] get_complexSelectors()
internal void set_complexSelectors(StyleComplexSelector[] value)
private bool TryCheckAccess(T[] list, StyleValueType type, StyleValueHandle handle, T& value)
private T CheckAccess(T[] list, StyleValueType type, StyleValueHandle handle)
private void OnEnable()
private void SetupReferences()
internal StyleValueKeyword ReadKeyword(StyleValueHandle handle)
internal float ReadFloat(StyleValueHandle handle)
internal bool TryReadFloat(StyleValueHandle handle, Single& value)
internal Dimension ReadDimension(StyleValueHandle handle)
internal bool TryReadDimension(StyleValueHandle handle, Dimension& value)
internal Color ReadColor(StyleValueHandle handle)
internal bool TryReadColor(StyleValueHandle handle, Color& value)
internal string ReadString(StyleValueHandle handle)
internal bool TryReadString(StyleValueHandle handle, String& value)
internal string ReadEnum(StyleValueHandle handle)
internal bool TryReadEnum(StyleValueHandle handle, String& value)
internal string ReadVariable(StyleValueHandle handle)
internal bool TryReadVariable(StyleValueHandle handle, String& value)
internal string ReadResourcePath(StyleValueHandle handle)
internal bool TryReadResourcePath(StyleValueHandle handle, String& value)
internal Object ReadAssetReference(StyleValueHandle handle)
internal bool TryReadAssetReference(StyleValueHandle handle, Object& value)
internal StyleValueFunction ReadFunction(StyleValueHandle handle)
internal string ReadFunctionName(StyleValueHandle handle)
internal ScalableImage ReadScalableImage(StyleValueHandle handle)
private bool CustomStartsWith(string originalString, string pattern)
}
internal UnityEngine.UIElements.StyleSheets.BaseStyleMatcher : object {
private Stack`1<int> m_MarkStack
protected int m_CurrentIndex
private int <matchedVariableCount>k__BackingField
public int valueCount
public bool isVariable
public bool hasCurrent
public int matchedVariableCount
protected bool MatchKeyword(string keyword)
protected bool MatchNumber()
protected bool MatchInteger()
protected bool MatchLength()
protected bool MatchPercentage()
protected bool MatchColor()
protected bool MatchResource()
protected bool MatchUrl()
public int get_valueCount()
public bool get_isVariable()
public bool get_hasCurrent()
public int get_matchedVariableCount()
public void set_matchedVariableCount(int value)
protected void Initialize()
public void MoveNext()
public void SaveMark()
public void RestoreMark()
public void DropMark()
protected bool Match(Expression exp)
private bool MatchExpression(Expression exp)
private bool MatchGroup(Expression exp)
private bool MatchCombinator(Expression exp)
private bool MatchOr(Expression exp)
private bool MatchOrOr(Expression exp)
private bool MatchAndAnd(Expression exp)
private int MatchMany(Expression exp)
private bool MatchJuxtaposition(Expression exp)
private bool MatchDataType(Expression exp)
}
internal UnityEngine.UIElements.StyleSheets.CustomPropertyHandle : ValueType {
public int specificity
public StylePropertyValue value
}
internal UnityEngine.UIElements.StyleSheets.Dimension : ValueType {
public Unit unit
public float value
public void .ctor(float value, Unit unit)
public Length ToLength()
public bool op_Equality(Dimension lhs, Dimension rhs)
public bool op_Inequality(Dimension lhs, Dimension rhs)
public bool Equals(Dimension other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleSheets.HierarchyTraversal : object {
public void Traverse(VisualElement element)
public void TraverseRecursive(VisualElement element, int depth)
protected void Recurse(VisualElement element, int depth)
}
internal UnityEngine.UIElements.StyleSheets.ImageSource : ValueType {
public Texture2D texture
public VectorImage vectorImage
}
internal UnityEngine.UIElements.StyleSheets.InheritedStylesData : object {
public InheritedStylesData none
public StyleColor color
public StyleFont font
public StyleLength fontSize
public StyleInt unityFontStyle
public StyleInt unityTextAlign
public StyleInt visibility
public StyleInt whiteSpace
public void .ctor(InheritedStylesData other)
public void CopyFrom(InheritedStylesData other)
public bool Equals(InheritedStylesData other)
public bool Equals(object obj)
public int GetHashCode()
}
internal UnityEngine.UIElements.StyleSheets.IStylePropertyReader {
public StylePropertyID propertyID
public int specificity
public int valueCount
public StylePropertyID get_propertyID()
public int get_specificity()
public int get_valueCount()
public bool IsValueType(int index, StyleValueType type)
public bool IsKeyword(int index, StyleValueKeyword keyword)
public string ReadAsString(int index)
public StyleLength ReadStyleLength(int index)
public StyleFloat ReadStyleFloat(int index)
public StyleInt ReadStyleInt(int index)
public StyleColor ReadStyleColor(int index)
public StyleInt ReadStyleEnum(int index)
public StyleFont ReadStyleFont(int index)
public StyleBackground ReadStyleBackground(int index)
public StyleCursor ReadStyleCursor(int index)
}
internal UnityEngine.UIElements.StyleSheets.MatchResult : ValueType {
public MatchResultErrorCode errorCode
public string errorValue
public bool success
public bool get_success()
}
internal UnityEngine.UIElements.StyleSheets.MatchResultErrorCode : Enum {
public int value__
public MatchResultErrorCode None
public MatchResultErrorCode Syntax
public MatchResultErrorCode EmptyValue
public MatchResultErrorCode ExpectedEndOfValue
}
internal UnityEngine.UIElements.StyleSheets.MatchResultInfo : ValueType {
public bool success
public PseudoStates triggerPseudoMask
public PseudoStates dependencyPseudoMask
public void .ctor(bool success, PseudoStates triggerPseudoMask, PseudoStates dependencyPseudoMask)
}
internal UnityEngine.UIElements.StyleSheets.ScalableImage : ValueType {
public Texture2D normalImage
public Texture2D highResolutionImage
public string ToString()
}
internal UnityEngine.UIElements.StyleSheets.SelectorMatchRecord : ValueType {
public StyleSheet sheet
public int styleSheetIndexInStack
public StyleComplexSelector complexSelector
public void .ctor(StyleSheet sheet, int styleSheetIndexInStack)
public int Compare(SelectorMatchRecord a, SelectorMatchRecord b)
}
internal UnityEngine.UIElements.StyleSheets.ShorthandApplicator : object {
public void ApplyBorderColor(StylePropertyReader reader, VisualElementStylesData styleData)
public void ApplyBorderRadius(StylePropertyReader reader, VisualElementStylesData styleData)
public void ApplyBorderWidth(StylePropertyReader reader, VisualElementStylesData styleData)
public void ApplyFlex(StylePropertyReader reader, VisualElementStylesData styleData)
public void ApplyMargin(StylePropertyReader reader, VisualElementStylesData styleData)
public void ApplyPadding(StylePropertyReader reader, VisualElementStylesData styleData)
private bool CompileFlexShorthand(StylePropertyReader reader, StyleFloat& grow, StyleFloat& shrink, StyleLength& basis)
private void CompileBoxArea(StylePropertyReader reader, StyleLength& top, StyleLength& right, StyleLength& bottom, StyleLength& left)
private void CompileBoxArea(StylePropertyReader reader, StyleColor& top, StyleColor& right, StyleColor& bottom, StyleColor& left)
}
internal UnityEngine.UIElements.StyleSheets.StyleMatcher : BaseStyleMatcher {
private StylePropertyValueParser m_Parser
private String[] m_PropertyParts
private Regex s_NumberRegex
private Regex s_IntegerRegex
private Regex s_ZeroRegex
private Regex s_LengthRegex
private Regex s_PercentRegex
private Regex s_HexColorRegex
private Regex s_RgbRegex
private Regex s_RgbaRegex
private Regex s_VarFunctionRegex
private Regex s_ResourceRegex
private Regex s_UrlRegex
private string current
public int valueCount
public bool isVariable
private string get_current()
public int get_valueCount()
public bool get_isVariable()
private void Initialize(string propertyValue)
public MatchResult Match(Expression exp, string propertyValue)
protected bool MatchKeyword(string keyword)
protected bool MatchNumber()
protected bool MatchInteger()
protected bool MatchLength()
protected bool MatchPercentage()
protected bool MatchColor()
protected bool MatchResource()
protected bool MatchUrl()
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyApplyMode : Enum {
public int value__
public StylePropertyApplyMode Copy
public StylePropertyApplyMode CopyIfEqualOrGreaterSpecificity
public StylePropertyApplyMode CopyIfNotInline
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyCache : object {
private Dictionary`2<string, string> s_PropertySyntaxCache
public bool TryGetSyntax(string name, String& syntax)
public string FindClosestPropertyName(string name)
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyID : Enum {
public int value__
public StylePropertyID Unknown
public StylePropertyID MarginLeft
public StylePropertyID MarginTop
public StylePropertyID MarginRight
public StylePropertyID MarginBottom
public StylePropertyID PaddingLeft
public StylePropertyID PaddingTop
public StylePropertyID PaddingRight
public StylePropertyID PaddingBottom
public StylePropertyID Position
public StylePropertyID PositionLeft
public StylePropertyID PositionTop
public StylePropertyID PositionRight
public StylePropertyID PositionBottom
public StylePropertyID Width
public StylePropertyID Height
public StylePropertyID MinWidth
public StylePropertyID MinHeight
public StylePropertyID MaxWidth
public StylePropertyID MaxHeight
public StylePropertyID FlexBasis
public StylePropertyID FlexGrow
public StylePropertyID FlexShrink
public StylePropertyID BorderLeftColor
public StylePropertyID BorderTopColor
public StylePropertyID BorderRightColor
public StylePropertyID BorderBottomColor
public StylePropertyID BorderLeftWidth
public StylePropertyID BorderTopWidth
public StylePropertyID BorderRightWidth
public StylePropertyID BorderBottomWidth
public StylePropertyID BorderTopLeftRadius
public StylePropertyID BorderTopRightRadius
public StylePropertyID BorderBottomRightRadius
public StylePropertyID BorderBottomLeftRadius
public StylePropertyID FlexDirection
public StylePropertyID FlexWrap
public StylePropertyID JustifyContent
public StylePropertyID AlignContent
public StylePropertyID AlignSelf
public StylePropertyID AlignItems
public StylePropertyID UnityTextAlign
public StylePropertyID WhiteSpace
public StylePropertyID Font
public StylePropertyID FontSize
public StylePropertyID FontStyleAndWeight
public StylePropertyID BackgroundScaleMode
public StylePropertyID Visibility
public StylePropertyID Overflow
public StylePropertyID OverflowClipBox
public StylePropertyID Display
public StylePropertyID BackgroundImage
public StylePropertyID Color
public StylePropertyID BackgroundColor
public StylePropertyID BackgroundImageTintColor
public StylePropertyID SliceLeft
public StylePropertyID SliceTop
public StylePropertyID SliceRight
public StylePropertyID SliceBottom
public StylePropertyID Opacity
public StylePropertyID BorderColor
public StylePropertyID BorderRadius
public StylePropertyID BorderWidth
public StylePropertyID Flex
public StylePropertyID Margin
public StylePropertyID Padding
public StylePropertyID Cursor
public StylePropertyID Custom
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyReader : object {
internal GetCursorIdFunction getCursorIdFunc
private List`1<StylePropertyValue> m_Values
private List`1<int> m_ValueCount
private StyleVariableResolver m_Resolver
private StyleSheet m_Sheet
private StyleProperty[] m_Properties
private StylePropertyID[] m_PropertyIDs
private int m_CurrentValueIndex
private int m_CurrentPropertyIndex
private StyleProperty <property>k__BackingField
private StylePropertyID <propertyID>k__BackingField
private int <valueCount>k__BackingField
private int <specificity>k__BackingField
private float <dpiScaling>k__BackingField
public StyleProperty property
public StylePropertyID propertyID
public int valueCount
public int specificity
public float dpiScaling
public StyleProperty get_property()
private void set_property(StyleProperty value)
public StylePropertyID get_propertyID()
private void set_propertyID(StylePropertyID value)
public int get_valueCount()
private void set_valueCount(int value)
public int get_specificity()
private void set_specificity(int value)
public float get_dpiScaling()
private void set_dpiScaling(float value)
public void SetContext(StyleSheet sheet, StyleComplexSelector selector, StyleVariableContext varContext, float dpiScaling)
public void SetInlineContext(StyleSheet sheet, StyleRule rule, int ruleIndex, float dpiScaling)
public StylePropertyID MoveNextProperty()
public StylePropertyValue GetValue(int index)
public StyleValueType GetValueType(int index)
public bool IsValueType(int index, StyleValueType type)
public bool IsKeyword(int index, StyleValueKeyword keyword)
public string ReadAsString(int index)
public StyleLength ReadStyleLength(int index)
public StyleFloat ReadStyleFloat(int index)
public StyleInt ReadStyleInt(int index)
public StyleColor ReadStyleColor(int index)
public StyleInt ReadStyleEnum(int index)
public StyleFont ReadStyleFont(int index)
public StyleBackground ReadStyleBackground(int index)
public StyleCursor ReadStyleCursor(int index)
private void LoadProperties()
private void SetCurrentProperty()
internal bool TryGetImageSourceFromValue(StylePropertyValue propertyValue, float dpiScaling, ImageSource& source)
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyValue : ValueType {
public StyleSheet sheet
public StyleValueHandle handle
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyValueMatcher : BaseStyleMatcher {
private List`1<StylePropertyValue> m_Values
private StylePropertyValue current
public int valueCount
public bool isVariable
private StylePropertyValue get_current()
public int get_valueCount()
public bool get_isVariable()
public MatchResult Match(Expression exp, List`1<StylePropertyValue> values)
protected bool MatchKeyword(string keyword)
protected bool MatchNumber()
protected bool MatchInteger()
protected bool MatchLength()
protected bool MatchPercentage()
protected bool MatchColor()
protected bool MatchResource()
protected bool MatchUrl()
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyValueParser : object {
private string m_PropertyValue
private List`1<string> m_ValueList
private StringBuilder m_StringBuilder
private int m_ParseIndex
public String[] Parse(string propertyValue)
private void AddValuePart()
private void AppendFunction()
private void EatSpace()
}
internal UnityEngine.UIElements.StyleSheets.StyleSelectorHelper : object {
public MatchResultInfo MatchesSelector(VisualElement element, StyleSelector selector)
public bool MatchRightToLeft(VisualElement element, StyleComplexSelector complexSelector, Action`2<VisualElement, MatchResultInfo> processResult)
private void FastLookup(IDictionary`2<string, StyleComplexSelector> table, List`1<SelectorMatchRecord> matchedSelectors, StyleMatchingContext context, string input, SelectorMatchRecord& record)
public void FindMatches(StyleMatchingContext context, List`1<SelectorMatchRecord> matchedSelectors)
}
internal UnityEngine.UIElements.StyleSheets.StyleSheetApplicator : object {
public void ApplyAlign(IStylePropertyReader reader, StyleInt& property)
public void ApplyDisplay(IStylePropertyReader reader, StyleInt& property)
}
internal UnityEngine.UIElements.StyleSheets.StyleSheetCache : object {
private SheetHandleKeyComparer s_Comparer
private Dictionary`2<SheetHandleKey, int> s_EnumToIntCache
private Dictionary`2<SheetHandleKey, StylePropertyID[]> s_RulePropertyIDsCache
private Dictionary`2<string, StylePropertyID> s_NameToIDCache
private StyleValue[] s_InitialStyleValues
private Dictionary`2<string, string> s_DeprecatedNames
internal string GetPropertyIDUssName(StylePropertyID propertyId)
internal void ClearCaches()
internal bool TryParseEnum(string enumValueName, Int32& intValue)
internal int GetEnumValue(StyleSheet sheet, StyleValueHandle handle)
internal StylePropertyID[] GetPropertyIDs(StyleSheet sheet, int ruleIndex)
internal StyleValue GetInitialValue(StylePropertyID propertyId)
private string MapDeprecatedPropertyName(string name, string styleSheetName, int line)
internal StylePropertyID GetPropertyIDFromName(string name)
private StylePropertyID GetPropertyID(StyleSheet sheet, StyleRule rule, int index)
}
internal UnityEngine.UIElements.StyleSheets.StyleSheetColor : object {
private Dictionary`2<string, Color32> s_NameToColor
public bool TryGetColor(string name, Color& color)
private Color32 HexToColor32(UInt32 color)
}
internal UnityEngine.UIElements.StyleSheets.StyleSheetExtensions : object {
public string ReadAsString(StyleSheet sheet, StyleValueHandle handle)
public bool IsVarFunction(StyleValueHandle handle)
}
internal UnityEngine.UIElements.StyleSheets.StyleValidationResult : ValueType {
public StyleValidationStatus status
public string message
public string errorValue
public string hint
public bool success
public bool get_success()
}
internal UnityEngine.UIElements.StyleSheets.StyleValidationStatus : Enum {
public int value__
public StyleValidationStatus Ok
public StyleValidationStatus Error
public StyleValidationStatus Warning
}
internal UnityEngine.UIElements.StyleSheets.StyleValidator : object {
private StyleSyntaxParser m_SyntaxParser
private StyleMatcher m_StyleMatcher
public StyleValidationResult ValidateProperty(string name, string value)
private bool IsUnitMissing(string propertySyntax, string propertyValue)
private bool IsUnsupportedColor(string propertySyntax)
}
internal UnityEngine.UIElements.StyleSheets.StyleValue : ValueType {
public StylePropertyID id
public StyleKeyword keyword
public float number
public Length length
public Color color
public GCHandle resource
public StyleValue Create(StylePropertyID id)
public StyleValue Create(StylePropertyID id, StyleKeyword keyword)
public StyleValue Create(StylePropertyID id, float number)
public StyleValue Create(StylePropertyID id, int number)
public StyleValue Create(StylePropertyID id, Color color)
}
internal UnityEngine.UIElements.StyleSheets.StyleValuePropertyReader : object {
private StylePropertyID <propertyID>k__BackingField
private int <specificity>k__BackingField
private StyleValue m_CurrentStyleValue
private StyleCursor m_CurrentCursor
public StylePropertyID propertyID
public int specificity
public int valueCount
public StylePropertyID get_propertyID()
private void set_propertyID(StylePropertyID value)
public int get_specificity()
private void set_specificity(int value)
public int get_valueCount()
public void Set(StylePropertyID id, StyleValue value, int spec)
public void Set(StyleCursor cursor, int spec)
public bool IsValueType(int index, StyleValueType type)
public bool IsKeyword(int index, StyleValueKeyword keyword)
public string ReadAsString(int index)
public StyleLength ReadStyleLength(int index)
public StyleFloat ReadStyleFloat(int index)
public StyleInt ReadStyleInt(int index)
public StyleColor ReadStyleColor(int index)
public StyleInt ReadStyleEnum(int index)
public StyleFont ReadStyleFont(int index)
public StyleBackground ReadStyleBackground(int index)
public StyleCursor ReadStyleCursor(int index)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.DataType : Enum {
public int value__
public DataType None
public DataType Number
public DataType Integer
public DataType Length
public DataType Percentage
public DataType Color
public DataType Resource
public DataType Url
}
internal UnityEngine.UIElements.StyleSheets.Syntax.Expression : object {
public ExpressionType type
public ExpressionMultiplier multiplier
public DataType dataType
public ExpressionCombinator combinator
public Expression[] subExpressions
public string keyword
public void .ctor(ExpressionType type)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.ExpressionCombinator : Enum {
public int value__
public ExpressionCombinator None
public ExpressionCombinator Or
public ExpressionCombinator OrOr
public ExpressionCombinator AndAnd
public ExpressionCombinator Juxtaposition
public ExpressionCombinator Group
}
internal UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplier : ValueType {
public int Infinity
private ExpressionMultiplierType m_Type
public int min
public int max
public ExpressionMultiplierType type
public ExpressionMultiplierType get_type()
public void set_type(ExpressionMultiplierType value)
public void .ctor(ExpressionMultiplierType type)
private void SetType(ExpressionMultiplierType value)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType : Enum {
public int value__
public ExpressionMultiplierType None
public ExpressionMultiplierType ZeroOrMore
public ExpressionMultiplierType OneOrMore
public ExpressionMultiplierType ZeroOrOne
public ExpressionMultiplierType Ranges
public ExpressionMultiplierType OneOrMoreComma
public ExpressionMultiplierType GroupAtLeastOne
}
internal UnityEngine.UIElements.StyleSheets.Syntax.ExpressionType : Enum {
public int value__
public ExpressionType Unknown
public ExpressionType Data
public ExpressionType Keyword
public ExpressionType Combinator
}
internal UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxParser : object {
private List`1<Expression> m_ProcessExpressionList
private Stack`1<Expression> m_ExpressionStack
private Stack`1<ExpressionCombinator> m_CombinatorStack
private Dictionary`2<string, Expression> m_ParsedExpressionCache
public Expression Parse(string syntax)
private Expression ParseExpression(StyleSyntaxTokenizer tokenizer)
private void ProcessCombinatorStack()
private Expression ParseTerm(StyleSyntaxTokenizer tokenizer)
private ExpressionCombinator ParseCombinatorType(StyleSyntaxTokenizer tokenizer)
private Expression ParseGroup(StyleSyntaxTokenizer tokenizer)
private Expression ParseDataType(StyleSyntaxTokenizer tokenizer)
private Expression ParseProperty(StyleSyntaxTokenizer tokenizer)
private void ParseMultiplier(StyleSyntaxTokenizer tokenizer, ExpressionMultiplier& multiplier)
private void ParseRanges(StyleSyntaxTokenizer tokenizer, Int32& min, Int32& max)
private void EatSpace(StyleSyntaxTokenizer tokenizer)
private bool IsExpressionEnd(StyleSyntaxToken token)
private bool IsCombinator(StyleSyntaxToken token)
private bool IsMultiplier(StyleSyntaxToken token)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxToken : ValueType {
public StyleSyntaxTokenType type
public string text
public int number
public void .ctor(StyleSyntaxTokenType t)
public void .ctor(StyleSyntaxTokenType type, string text)
public void .ctor(StyleSyntaxTokenType type, int number)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxTokenizer : object {
private List`1<StyleSyntaxToken> m_Tokens
private int m_CurrentTokenIndex
public StyleSyntaxToken current
public StyleSyntaxToken get_current()
public StyleSyntaxToken MoveNext()
public StyleSyntaxToken PeekNext()
public void Tokenize(string syntax)
private bool IsNextCharacter(string s, int index, char c)
private bool IsNextLetterOrDash(string s, int index)
private bool IsNextNumber(string s, int index)
private int GlobCharacter(string s, int index, char c)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxTokenType : Enum {
public int value__
public StyleSyntaxTokenType Unknown
public StyleSyntaxTokenType String
public StyleSyntaxTokenType Number
public StyleSyntaxTokenType Space
public StyleSyntaxTokenType SingleBar
public StyleSyntaxTokenType DoubleBar
public StyleSyntaxTokenType DoubleAmpersand
public StyleSyntaxTokenType Comma
public StyleSyntaxTokenType SingleQuote
public StyleSyntaxTokenType Asterisk
public StyleSyntaxTokenType Plus
public StyleSyntaxTokenType QuestionMark
public StyleSyntaxTokenType HashMark
public StyleSyntaxTokenType ExclamationPoint
public StyleSyntaxTokenType OpenBracket
public StyleSyntaxTokenType CloseBracket
public StyleSyntaxTokenType OpenBrace
public StyleSyntaxTokenType CloseBrace
public StyleSyntaxTokenType LessThan
public StyleSyntaxTokenType GreaterThan
public StyleSyntaxTokenType End
}
internal UnityEngine.UIElements.StyleSheets.VisualElementStylesData : object {
private StyleValuePropertyReader s_StyleValuePropertyReader
public VisualElementStylesData none
internal bool isShared
internal YogaNode yogaNode
internal Dictionary`2<string, CustomPropertyHandle> m_CustomProperties
internal StyleLength width
internal StyleLength height
internal StyleLength maxWidth
internal StyleLength maxHeight
internal StyleLength minWidth
internal StyleLength minHeight
internal StyleLength flexBasis
internal StyleFloat flexShrink
internal StyleFloat flexGrow
internal StyleInt overflow
internal StyleInt unityOverflowClipBox
internal StyleLength left
internal StyleLength top
internal StyleLength right
internal StyleLength bottom
internal StyleLength marginLeft
internal StyleLength marginTop
internal StyleLength marginRight
internal StyleLength marginBottom
internal StyleLength paddingLeft
internal StyleLength paddingTop
internal StyleLength paddingRight
internal StyleLength paddingBottom
internal StyleInt position
internal StyleInt alignSelf
internal StyleInt unityTextAlign
internal StyleInt unityFontStyleAndWeight
internal StyleFont unityFont
internal StyleLength fontSize
internal StyleInt whiteSpace
internal StyleColor color
internal StyleInt flexDirection
internal StyleColor backgroundColor
internal StyleBackground backgroundImage
internal StyleInt unityBackgroundScaleMode
internal StyleColor unityBackgroundImageTintColor
internal StyleInt alignItems
internal StyleInt alignContent
internal StyleInt justifyContent
internal StyleInt flexWrap
internal StyleColor borderLeftColor
internal StyleColor borderTopColor
internal StyleColor borderRightColor
internal StyleColor borderBottomColor
internal StyleFloat borderLeftWidth
internal StyleFloat borderTopWidth
internal StyleFloat borderRightWidth
internal StyleFloat borderBottomWidth
internal StyleLength borderTopLeftRadius
internal StyleLength borderTopRightRadius
internal StyleLength borderBottomRightRadius
internal StyleLength borderBottomLeftRadius
internal StyleInt unitySliceLeft
internal StyleInt unitySliceTop
internal StyleInt unitySliceRight
internal StyleInt unitySliceBottom
internal StyleFloat opacity
internal StyleCursor cursor
internal StyleInt visibility
internal StyleInt display
internal float dpiScaling
public int customPropertiesCount
public int get_customPropertiesCount()
public void .ctor(bool isShared)
public void Apply(VisualElementStylesData other, StylePropertyApplyMode mode)
public void ApplyLayoutValues()
public void SyncWithLayout(YogaNode targetNode)
internal void ApplyProperties(StylePropertyReader reader, InheritedStylesData inheritedStylesData)
internal void ApplyStyleCursor(StyleCursor styleCursor, int specificity)
internal void ApplyStyleValue(StylePropertyID propertyID, StyleValue value, int specificity)
private void ApplyInitialStyleValue(StylePropertyReader reader)
private void ApplyInitialStyleValue(StylePropertyID propertyID, int specificity)
private void ApplyUnsetStyleValue(StylePropertyReader reader, InheritedStylesData inheritedStylesData)
internal void ApplyStyleProperty(IStylePropertyReader reader)
internal void ApplyShorthandProperty(StylePropertyReader reader)
private void RemoveCustomStyleProperty(string name)
private void ApplyCustomStyleProperty(StylePropertyReader reader)
public bool TryGetValue(CustomStyleProperty`1<float> property, Single& value)
public bool TryGetValue(CustomStyleProperty`1<int> property, Int32& value)
public bool TryGetValue(CustomStyleProperty`1<bool> property, Boolean& value)
public bool TryGetValue(CustomStyleProperty`1<Color> property, Color& value)
public bool TryGetValue(CustomStyleProperty`1<Texture2D> property, Texture2D& value)
public bool TryGetValue(CustomStyleProperty`1<VectorImage> property, VectorImage& value)
public bool TryGetValue(CustomStyleProperty`1<string> property, String& value)
private bool TryGetValue(string propertyName, StyleValueType valueType, CustomPropertyHandle& customPropertyHandle)
}
internal UnityEngine.UIElements.StyleValueCollection : object {
internal List`1<StyleValue> m_Values
public StyleLength GetStyleLength(StylePropertyID id)
public StyleFloat GetStyleFloat(StylePropertyID id)
public StyleInt GetStyleInt(StylePropertyID id)
public StyleColor GetStyleColor(StylePropertyID id)
public StyleBackground GetStyleBackground(StylePropertyID id)
public StyleFont GetStyleFont(StylePropertyID id)
public bool TryGetStyleValue(StylePropertyID id, StyleValue& value)
public void SetStyleValue(StyleValue value)
}
internal UnityEngine.UIElements.StyleValueExtensions : object {
internal int UndefinedSpecificity
internal int UnitySpecificity
internal int InlineSpecificity
internal StyleFloat ToStyleFloat(StyleLength styleLength)
internal StyleEnum`1<T> ToStyleEnum(StyleInt styleInt, T value)
internal StyleLength ToStyleLength(StyleValue styleValue)
internal StyleFloat ToStyleFloat(StyleValue styleValue)
internal string DebugString(IStyleValue`1<T> styleValue)
internal U GetSpecifiedValueOrDefault(T styleValue, U defaultValue)
internal float GetSpecifiedValueOrDefault(StyleLength styleValue, float defaultValue)
internal YogaValue ToYogaValue(StyleLength styleValue)
internal bool CanApply(int specificity, int otherSpecificity, StylePropertyApplyMode mode)
internal StyleKeyword ToStyleKeyword(StyleValueKeyword styleValueKeyword)
}
internal UnityEngine.UIElements.StyleValueFunction : Enum {
public int value__
public StyleValueFunction Unknown
public StyleValueFunction Var
public StyleValueFunction Env
public StyleValueFunction LinearGradient
}
internal UnityEngine.UIElements.StyleValueFunctionExtension : object {
public string k_Var
public string k_Env
public string k_LinearGradient
public StyleValueFunction FromUssString(string ussValue)
public string ToUssString(StyleValueFunction svf)
}
internal UnityEngine.UIElements.StyleValueHandle : ValueType {
private StyleValueType m_ValueType
internal int valueIndex
public StyleValueType valueType
public StyleValueType get_valueType()
internal void set_valueType(StyleValueType value)
internal void .ctor(int valueIndex, StyleValueType valueType)
}
internal UnityEngine.UIElements.StyleValueKeyword : Enum {
public int value__
public StyleValueKeyword Inherit
public StyleValueKeyword Initial
public StyleValueKeyword Auto
public StyleValueKeyword Unset
public StyleValueKeyword True
public StyleValueKeyword False
public StyleValueKeyword None
}
internal UnityEngine.UIElements.StyleValueKeywordExtension : object {
public string ToUssString(StyleValueKeyword svk)
}
internal UnityEngine.UIElements.StyleValueType : Enum {
public int value__
public StyleValueType Invalid
public StyleValueType Keyword
public StyleValueType Float
public StyleValueType Dimension
public StyleValueType Color
public StyleValueType ResourcePath
public StyleValueType AssetReference
public StyleValueType Enum
public StyleValueType Variable
public StyleValueType String
public StyleValueType Function
public StyleValueType FunctionSeparator
public StyleValueType ScalableImage
}
internal UnityEngine.UIElements.StyleVariable : ValueType {
public string name
public StyleSheet sheet
public StyleValueHandle[] handles
public void .ctor(string name, StyleSheet sheet, StyleValueHandle[] handles)
public int GetHashCode()
}
internal UnityEngine.UIElements.StyleVariableContext : object {
public StyleVariableContext none
private int m_VariableHash
private List`1<StyleVariable> m_Variables
private List`1<int> m_SortedHash
public void Add(StyleVariable sv)
public void AddInitialRange(StyleVariableContext other)
public void Clear()
public void .ctor(StyleVariableContext other)
public bool TryFindVariable(string name, StyleVariable& v)
public int GetVariableHash()
}
internal UnityEngine.UIElements.StyleVariableResolver : object {
internal int kMaxResolves
private StyleSyntaxParser s_SyntaxParser
private StylePropertyValueMatcher m_Matcher
private List`1<StylePropertyValue> m_ResolvedValues
private Stack`1<string> m_ResolvedVarStack
private Expression m_ValidationExpression
private StyleProperty m_Property
private StyleSheet m_Sheet
private StyleValueHandle[] m_Handles
private StyleVariableContext <variableContext>k__BackingField
public List`1<StylePropertyValue> resolvedValues
public StyleVariableContext variableContext
public List`1<StylePropertyValue> get_resolvedValues()
public StyleVariableContext get_variableContext()
public void set_variableContext(StyleVariableContext value)
public void Init(StyleProperty property, StyleSheet sheet, StyleValueHandle[] handles)
public void AddValue(StyleValueHandle handle)
public Result ResolveVarFunction(Int32& index)
private Result ResolveVariable(string variableName)
private Result ValidateResolve(StylePropertyValue spv)
private Result ResolveFallback(Int32& index)
private void ParseVarFunction(StyleSheet sheet, StyleValueHandle[] handles, Int32& index, Int32& argCount, String& variableName)
}
internal UnityEngine.UIElements.TemplateAsset : VisualElementAsset {
private string m_TemplateAlias
private List`1<AttributeOverride> m_AttributeOverrides
private List`1<SlotUsageEntry> m_SlotUsages
public string templateAlias
public List`1<AttributeOverride> attributeOverrides
internal List`1<SlotUsageEntry> slotUsages
public string get_templateAlias()
public void set_templateAlias(string value)
public List`1<AttributeOverride> get_attributeOverrides()
public void set_attributeOverrides(List`1<AttributeOverride> value)
internal List`1<SlotUsageEntry> get_slotUsages()
internal void set_slotUsages(List`1<SlotUsageEntry> value)
public void .ctor(string templateAlias)
public void AddSlotUsage(string slotName, int resId)
}
public UnityEngine.UIElements.TemplateContainer : BindableElement {
private string <templateId>k__BackingField
private VisualElement m_ContentContainer
public string templateId
public VisualElement contentContainer
public string get_templateId()
private void set_templateId(string value)
public void .ctor(string templateId)
public VisualElement get_contentContainer()
internal void SetContentContainer(VisualElement content)
}
internal UnityEngine.UIElements.TextEditorEngine : TextEditor {
private OnDetectFocusChangeFunction m_DetectFocusChangeFunction
private OnIndexChangeFunction m_IndexChangeFunction
internal Rect localPosition
public void .ctor(OnDetectFocusChangeFunction detectFocusChange, OnIndexChangeFunction indexChangeFunction)
internal Rect get_localPosition()
internal void OnDetectFocusChange()
internal void OnCursorIndexChange()
internal void OnSelectIndexChange()
}
internal UnityEngine.UIElements.TextEditorEventHandler : object {
private TextEditorEngine <editorEngine>k__BackingField
private ITextInputField <textInputField>k__BackingField
protected TextEditorEngine editorEngine
protected ITextInputField textInputField
protected TextEditorEngine get_editorEngine()
private void set_editorEngine(TextEditorEngine value)
protected ITextInputField get_textInputField()
private void set_textInputField(ITextInputField value)
protected void .ctor(TextEditorEngine editorEngine, ITextInputField textInputField)
public void ExecuteDefaultActionAtTarget(EventBase evt)
public void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.UIElements.TextElement : BindableElement {
public string ussClassName
private TextHandle m_TextHandle
private string m_Text
internal TextHandle textHandle
public string text
private string UnityEngine.UIElements.INotifyValueChanged<System.String>.value
internal TextHandle get_textHandle()
private void OnAttachToPanel(AttachToPanelEvent e)
public string get_text()
public void set_text(string value)
private void OnGenerateVisualContent(MeshGenerationContext mgc)
public Vector2 MeasureTextSize(string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode)
internal Vector2 MeasureVisualElementTextSize(VisualElement ve, string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode, TextHandle textHandle)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
private TextParams GetTextSettings(VisualElement ve, string text)
private string UnityEngine.UIElements.INotifyValueChanged<System.String>.get_value()
private void UnityEngine.UIElements.INotifyValueChanged<System.String>.set_value(string value)
private void UnityEngine.UIElements.INotifyValueChanged<System.String>.SetValueWithoutNotify(string newValue)
}
public UnityEngine.UIElements.TextField : TextInputBaseField`1<string> {
private int m_VisualInputTabIndex
public string ussClassName
public string labelUssClassName
public string inputUssClassName
private TextInput textInput
public bool multiline
public string value
private TextInput get_textInput()
public bool get_multiline()
public void set_multiline(bool value)
public void SelectRange(int rangeCursorIndex, int selectionIndex)
public void .ctor(int maxLength, bool multiline, bool isPasswordField, char maskChar)
public void .ctor(string label)
public void .ctor(string label, int maxLength, bool multiline, bool isPasswordField, char maskChar)
public string get_value()
public void set_value(string value)
public void SetValueWithoutNotify(string newValue)
internal void OnViewDataReady()
protected void ExecuteDefaultActionAtTarget(EventBase evt)
}
internal UnityEngine.UIElements.TextHandle : ValueType {
public bool useLegacy
private Dictionary`2<Font, FontAsset> fontAssetCache
private Vector2 m_PreferredSize
private int m_PreviousGenerationSettingsHash
private TextGenerationSettings m_CurrentGenerationSettings
private int m_PreviousLayoutSettingsHash
private TextGenerationSettings m_CurrentLayoutSettings
private TextInfo m_TextInfo
internal TextInfo textInfo
public TextHandle New()
private FontAsset GetFontAsset(Font font)
internal TextInfo get_textInfo()
internal bool IsTextInfoAllocated()
public Vector2 GetCursorPosition(CursorPositionStylePainterParameters parms, float scaling)
public float ComputeTextWidth(TextParams parms, float scaling)
public float ComputeTextHeight(TextParams parms, float scaling)
internal TextInfo Update(TextParams parms, float pixelsPerPoint)
private void UpdatePreferredValues(TextParams parms)
private void UpdateGenerationSettingsCommon(TextParams painterParams, TextGenerationSettings settings)
public float ComputeTextScaling(Matrix4x4 worldMatrix, float pixelsPerPoint)
}
public UnityEngine.UIElements.TextInputBaseField`1 : BaseField`1<TValueType> {
private CustomStyleProperty`1<Color> s_SelectionColorProperty
private CustomStyleProperty`1<Color> s_CursorColorProperty
private TextInputBase<TValueType> m_TextInputBase
internal int kMaxLengthNone
internal char kMaskCharDefault
private TextHandle <textHandle>k__BackingField
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string textInputUssName
protected TextInputBase<TValueType> textInputBase
internal TextHandle textHandle
public string text
public bool isReadOnly
public bool isPasswordField
public Color selectionColor
public Color cursorColor
public int cursorIndex
public int selectIndex
public int maxLength
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
public bool isDelayed
public char maskChar
internal TextEditorEventHandler editorEventHandler
internal TextEditorEngine editorEngine
internal bool hasFocus
protected TextInputBase<TValueType> get_textInputBase()
internal TextHandle get_textHandle()
private void set_textHandle(TextHandle value)
public string get_text()
protected void set_text(string value)
public bool get_isReadOnly()
public void set_isReadOnly(bool value)
public bool get_isPasswordField()
public void set_isPasswordField(bool value)
public Color get_selectionColor()
public Color get_cursorColor()
public int get_cursorIndex()
public int get_selectIndex()
public int get_maxLength()
public void set_maxLength(int value)
public bool get_doubleClickSelectsWord()
public void set_doubleClickSelectsWord(bool value)
public bool get_tripleClickSelectsLine()
public void set_tripleClickSelectsLine(bool value)
public bool get_isDelayed()
public void set_isDelayed(bool value)
public char get_maskChar()
public void set_maskChar(char value)
internal TextEditorEventHandler get_editorEventHandler()
internal TextEditorEngine get_editorEngine()
internal bool get_hasFocus()
public void SelectAll()
internal void SyncTextEngine()
internal void DrawWithTextSelectionAndCursor(MeshGenerationContext mgc, string newText)
protected void .ctor(int maxLength, char maskChar, TextInputBase<TValueType> textInputBase)
protected void .ctor(string label, int maxLength, char maskChar, TextInputBase<TValueType> textInputBase)
private void OnAttachToPanel(AttachToPanelEvent e)
protected void ExecuteDefaultActionAtTarget(EventBase evt)
}
internal UnityEngine.UIElements.TextNative : object {
public Vector2 GetCursorPosition(TextNativeSettings settings, Rect rect, int cursorIndex)
public float ComputeTextWidth(TextNativeSettings settings)
public float ComputeTextHeight(TextNativeSettings settings)
public NativeArray`1<TextVertex> GetVertices(TextNativeSettings settings)
public Vector2 GetOffset(TextNativeSettings settings, Rect screenRect)
public float ComputeTextScaling(Matrix4x4 worldMatrix, float pixelsPerPoint)
private float DoComputeTextWidth(TextNativeSettings settings)
private float DoComputeTextHeight(TextNativeSettings settings)
private Vector2 DoGetCursorPosition(TextNativeSettings settings, Rect rect, int cursorPosition)
private void GetVertices(TextNativeSettings settings, IntPtr buffer, int vertexSize, Int32& vertexCount)
private Vector2 DoGetOffset(TextNativeSettings settings, Rect rect)
private float DoComputeTextWidth_Injected(TextNativeSettings& settings)
private float DoComputeTextHeight_Injected(TextNativeSettings& settings)
private void DoGetCursorPosition_Injected(TextNativeSettings& settings, Rect& rect, int cursorPosition, Vector2& ret)
private void GetVertices_Injected(TextNativeSettings& settings, IntPtr buffer, int vertexSize, Int32& vertexCount)
private void DoGetOffset_Injected(TextNativeSettings& settings, Rect& rect, Vector2& ret)
}
internal UnityEngine.UIElements.TextNativeSettings : ValueType {
public string text
public Font font
public int size
public float scaling
public FontStyle style
public Color color
public TextAnchor anchor
public bool wordWrap
public float wordWrapWidth
public bool richText
}
internal UnityEngine.UIElements.TextVertex : ValueType {
public Vector3 position
public Color32 color
public Vector2 uv0
}
internal UnityEngine.UIElements.TimeMsFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public long Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public long EndInvoke(IAsyncResult result)
}
internal UnityEngine.UIElements.TimerEventScheduler : object {
private List`1<ScheduledItem> m_ScheduledItems
private bool m_TransactionMode
private List`1<ScheduledItem> m_ScheduleTransactions
private HashSet`1<ScheduledItem> m_UnscheduleTransactions
internal bool disableThrottling
private int m_LastUpdatedIndex
public void Schedule(ScheduledItem item)
public ScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs)
public ScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition)
public ScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs)
private bool RemovedScheduledItemAt(int index)
public void Unschedule(ScheduledItem item)
private bool PrivateUnSchedule(ScheduledItem sItem)
public void UpdateScheduledEvents()
}
public UnityEngine.UIElements.TimerState : ValueType {
private long <start>k__BackingField
private long <now>k__BackingField
public long start
public long now
public long deltaTime
public long get_start()
public void set_start(long value)
public long get_now()
public void set_now(long value)
public long get_deltaTime()
public bool Equals(object obj)
public bool Equals(TimerState other)
public int GetHashCode()
public bool op_Equality(TimerState state1, TimerState state2)
public bool op_Inequality(TimerState state1, TimerState state2)
}
public UnityEngine.UIElements.Toggle : BaseField`1<bool> {
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string noTextVariantUssClassName
public string checkmarkUssClassName
public string textUssClassName
private Label m_Label
public string text
public void .ctor(string label)
public string get_text()
public void set_text(string value)
public void SetValueWithoutNotify(bool newValue)
private void OnClickEvent(EventBase evt)
private void OnClick()
protected void ExecuteDefaultActionAtTarget(EventBase evt)
}
public UnityEngine.UIElements.TooltipEvent : EventBase`1<TooltipEvent> {
private string <tooltip>k__BackingField
private Rect <rect>k__BackingField
public string tooltip
public Rect rect
public string get_tooltip()
public void set_tooltip(string value)
public Rect get_rect()
public void set_rect(Rect value)
protected void Init()
private void LocalInit()
internal TooltipEvent GetPooled(string tooltip, Rect rect)
}
internal UnityEngine.UIElements.TouchScreenTextEditorEventHandler : TextEditorEventHandler {
private IVisualElementScheduledItem m_TouchKeyboardPoller
public void .ctor(TextEditorEngine editorEngine, ITextInputField textInputField)
private void PollTouchScreenKeyboard()
private void DoPollTouchScreenKeyboard()
public void ExecuteDefaultActionAtTarget(EventBase evt)
}
internal UnityEngine.UIElements.TreeView : VisualElement {
private string s_ListViewName
private string s_ItemName
private string s_ItemToggleName
private string s_ItemIndentsContainerName
private string s_ItemIndentName
private string s_ItemContentContainerName
private Func`1<VisualElement> m_MakeItem
private Action`1<ITreeViewItem> onItemChosen
private List`1<ITreeViewItem> m_CurrentSelection
private Action`1<List`1<ITreeViewItem>> onSelectionChanged
private Action`2<VisualElement, ITreeViewItem> m_BindItem
private IList`1<ITreeViewItem> m_RootItems
private List`1<int> m_ExpandedItemIds
private List`1<TreeViewItemWrapper> m_ItemWrappers
private ListView m_ListView
private ScrollView m_ScrollView
public Func`1<VisualElement> makeItem
public IEnumerable`1<ITreeViewItem> currentSelection
public Action`2<VisualElement, ITreeViewItem> bindItem
public IList`1<ITreeViewItem> rootItems
public IEnumerable`1<ITreeViewItem> items
public int itemHeight
public SelectionType selectionType
public Func`1<VisualElement> get_makeItem()
public void set_makeItem(Func`1<VisualElement> value)
public void add_onItemChosen(Action`1<ITreeViewItem> value)
public void remove_onItemChosen(Action`1<ITreeViewItem> value)
public IEnumerable`1<ITreeViewItem> get_currentSelection()
public void add_onSelectionChanged(Action`1<List`1<ITreeViewItem>> value)
public void remove_onSelectionChanged(Action`1<List`1<ITreeViewItem>> value)
public Action`2<VisualElement, ITreeViewItem> get_bindItem()
public void set_bindItem(Action`2<VisualElement, ITreeViewItem> value)
public IList`1<ITreeViewItem> get_rootItems()
public void set_rootItems(IList`1<ITreeViewItem> value)
public IEnumerable`1<ITreeViewItem> get_items()
public int get_itemHeight()
public void set_itemHeight(int value)
public SelectionType get_selectionType()
public void set_selectionType(SelectionType value)
public void .ctor(IList`1<ITreeViewItem> items, int itemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, ITreeViewItem> bindItem)
public void Refresh()
internal void OnViewDataReady()
public IEnumerable`1<ITreeViewItem> GetAllItems(IEnumerable`1<ITreeViewItem> rootItems)
public void OnKeyDown(KeyDownEvent evt)
public void SelectItem(int id)
public void ClearSelection()
public bool IsExpanded(int id)
public void CollapseItem(int id)
public void ExpandItem(int id)
public ITreeViewItem FindItem(int id)
private void ListViewRefresh()
private void OnItemChosen(object item)
private void OnSelectionChanged(List`1<object> items)
private void OnTreeViewMouseUp(MouseUpEvent evt)
private void OnItemMouseUp(MouseUpEvent evt)
private VisualElement MakeTreeItem()
private void BindTreeItem(VisualElement element, int index)
private int GetItemId(int index)
private bool IsExpandedByIndex(int index)
private void CollapseItemByIndex(int index)
private void ExpandItemByIndex(int index)
private void ToggleExpandedState(ChangeEvent`1<bool> evt)
private void CreateWrappers(IEnumerable`1<ITreeViewItem> items, int depth, List`1& wrappers)
private void RegenerateWrappers()
private void OnCustomStyleResolved(CustomStyleResolvedEvent e)
}
internal UnityEngine.UIElements.TreeViewItem`1 : object {
private int <id>k__BackingField
internal TreeViewItem`1<T> m_Parent
private List`1<ITreeViewItem> m_Children
private T <data>k__BackingField
public int id
public ITreeViewItem parent
public IEnumerable`1<ITreeViewItem> children
public bool hasChildren
public T data
public int get_id()
private void set_id(int value)
public ITreeViewItem get_parent()
public IEnumerable`1<ITreeViewItem> get_children()
public bool get_hasChildren()
public T get_data()
private void set_data(T value)
public void .ctor(int id, T data, List`1<TreeViewItem`1<T>> children)
public void AddChild(ITreeViewItem child)
public void AddChildren(IList`1<ITreeViewItem> children)
public void RemoveChild(ITreeViewItem child)
}
public UnityEngine.UIElements.TrickleDown : Enum {
public int value__
public TrickleDown NoTrickleDown
public TrickleDown TrickleDown
}
public UnityEngine.UIElements.TypedUxmlAttributeDescription`1 : UxmlAttributeDescription {
private T <defaultValue>k__BackingField
public T defaultValue
public string defaultValueAsString
public T GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public T get_defaultValue()
public void set_defaultValue(T value)
public string get_defaultValueAsString()
}
internal UnityEngine.UIElements.UIElementsRuntimeUtility : object {
private EventDispatcher s_RuntimeDispatcher
private bool s_RegisteredPlayerloopCallback
private List`1<Panel> panelsIteration
internal string s_RepaintProfilerMarkerName
private ProfilerMarker s_RepaintProfilerMarker
public EventBase CreateEvent(Event systemEvent)
public IPanel CreateRuntimePanel(ScriptableObject ownerObject)
public IPanel FindOrCreateRuntimePanel(ScriptableObject ownerObject)
public void DisposeRuntimePanel(ScriptableObject ownerObject)
public void RegisterCachedPanel(int instanceID, IPanel panel)
private void RegisterCachedPanelInternal(int instanceID, IPanel panel)
public void RemoveCachedPanel(int instanceID)
private void RemoveCachedPanelInternal(int instanceID)
public void RepaintOverlayPanels()
public void RegisterPlayerloopCallback()
public void UnregisterPlayerloopCallback()
}
internal UnityEngine.UIElements.UIElementsUtility : object {
private Stack`1<IMGUIContainer> s_ContainerStack
private Dictionary`2<int, Panel> s_UIElementsCache
private Event s_EventInstance
internal Color editorPlayModeTintColor
internal string s_RepaintProfilerMarkerName
internal string s_EventProfilerMarkerName
private ProfilerMarker s_RepaintProfilerMarker
private ProfilerMarker s_EventProfilerMarker
internal IMGUIContainer GetCurrentIMGUIContainer()
internal void MakeCurrentIMGUIContainerDirty()
private void TakeCapture()
private void ReleaseCapture()
private bool ProcessEvent(int instanceID, IntPtr nativeEventPtr)
public void RegisterCachedPanel(int instanceID, Panel panel)
public void RemoveCachedPanel(int instanceID)
public bool TryGetPanel(int instanceID, Panel& panel)
private void CleanupRoots()
private bool EndContainerGUIFromException(Exception exception)
internal void BeginContainerGUI(LayoutCache cache, Event evt, IMGUIContainer container)
internal void EndContainerGUI(Event evt, Rect layoutSize)
internal EventBase CreateEvent(Event systemEvent)
internal EventBase CreateEvent(Event systemEvent, EventType eventType)
private bool DoDispatch(BaseVisualElementPanel panel)
internal void GetAllPanels(List`1<Panel> panels, ContextType contextType)
internal Enumerator<int, Panel> GetPanelsIterator()
internal Panel FindOrCreateEditorPanel(ScriptableObject ownerObject)
}
internal UnityEngine.UIElements.UIR.Alloc : ValueType {
public UInt32 start
public UInt32 size
internal object handle
internal bool shortLived
}
internal UnityEngine.UIElements.UIR.BestFitAllocator : object {
private UInt32 <totalSize>k__BackingField
private Block m_FirstBlock
private Block m_FirstAvailableBlock
private Pool`1<Block> m_BlockPool
private UInt32 m_HighWatermark
public UInt32 totalSize
public UInt32 highWatermark
public void .ctor(UInt32 size)
public UInt32 get_totalSize()
public UInt32 get_highWatermark()
public Alloc Allocate(UInt32 size)
public void Free(Alloc alloc)
private Block CoalesceBlockWithPrevious(Block block)
internal HeapStatistics GatherStatistics()
private Block BestFitFindAvailableBlock(UInt32 size)
private void SplitBlock(Block block, UInt32 size)
}
internal UnityEngine.UIElements.UIR.BitmapAllocator32 : ValueType {
public int kPageWidth
private int m_PageHeight
private List`1<Page> m_Pages
private List`1<UInt32> m_AllocMap
private int m_EntryWidth
private int m_EntryHeight
public int entryWidth
public int entryHeight
public void Construct(int pageHeight, int entryWidth, int entryHeight)
public void ForceFirstAlloc(ushort firstPageX, ushort firstPageY)
public BMPAlloc Allocate(UIRAtlasManager atlasManager)
public void Free(BMPAlloc alloc)
public int get_entryWidth()
public int get_entryHeight()
internal void GetAllocPageAtlasLocation(int page, UInt16& x, UInt16& y)
private byte CountTrailingZeroes(UInt32 val)
}
internal UnityEngine.UIElements.UIR.BMPAlloc : ValueType {
public BMPAlloc Invalid
public int page
public ushort pageLine
public byte bitIndex
public byte owned
public bool Equals(BMPAlloc other)
public bool IsValid()
}
internal UnityEngine.UIElements.UIR.ChainBuilderStats : ValueType {
public UInt32 elementsAdded
public UInt32 elementsRemoved
public UInt32 recursiveClipUpdates
public UInt32 recursiveClipUpdatesExpanded
public UInt32 nonRecursiveClipUpdates
public UInt32 recursiveTransformUpdates
public UInt32 recursiveTransformUpdatesExpanded
public UInt32 recursiveOpacityUpdates
public UInt32 recursiveOpacityUpdatesExpanded
public UInt32 recursiveVisualUpdates
public UInt32 recursiveVisualUpdatesExpanded
public UInt32 nonRecursiveVisualUpdates
public UInt32 nudgeTransformed
public UInt32 boneTransformed
public UInt32 skipTransformed
public UInt32 visualUpdateTransformed
public UInt32 updatedMeshAllocations
public UInt32 newMeshAllocations
public UInt32 groupTransformElementsChanged
public UInt32 immedateRenderersActive
public UInt32 textUpdates
}
internal UnityEngine.UIElements.UIR.CommandType : Enum {
public int value__
public CommandType Draw
public CommandType Immediate
public CommandType PushView
public CommandType PopView
public CommandType PushScissor
public CommandType PopScissor
}
internal UnityEngine.UIElements.UIR.DrawBufferRange : ValueType {
public int firstIndex
public int indexCount
public int minIndexVal
public int vertsReferenced
}
internal UnityEngine.UIElements.UIR.DrawParams : object {
internal Rect k_UnlimitedRect
internal Rect viewport
internal Matrix4x4 projection
internal Stack`1<ViewTransform> view
internal Stack`1<Rect> scissor
public void Reset(Rect _viewport, Matrix4x4 _projection)
}
internal UnityEngine.UIElements.UIR.GfxUpdateBufferRange : ValueType {
public UInt32 offsetFromWriteStart
public UInt32 size
public UIntPtr source
}
internal UnityEngine.UIElements.UIR.GPUBufferAllocator : object {
private BestFitAllocator m_Low
private BestFitAllocator m_High
public bool isEmpty
public void .ctor(UInt32 maxSize)
public Alloc Allocate(UInt32 size, bool shortLived)
public void Free(Alloc alloc)
public bool get_isEmpty()
public HeapStatistics GatherStatistics()
private bool HighLowCollide()
}
internal UnityEngine.UIElements.UIR.GradientRemap : LinkedPoolItem`1<GradientRemap> {
public int origIndex
public int destIndex
public RectInt location
public GradientRemap next
public bool isAtlassed
public void Reset()
}
internal UnityEngine.UIElements.UIR.GradientSettingsAtlas : object {
private ProfilerMarker s_MarkerWrite
private ProfilerMarker s_MarkerCommit
private int m_Length
private int m_ElemWidth
private BestFitAllocator m_Allocator
private Texture2D m_Atlas
private RawTexture m_RawAtlas
private bool <disposed>k__BackingField
private bool <MustCommit>k__BackingField
internal int length
protected bool disposed
public Texture2D atlas
public bool MustCommit
internal int get_length()
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public void .ctor(int length)
public void Reset()
public Texture2D get_atlas()
public Alloc Add(int count)
public void Remove(Alloc alloc)
public void Write(Alloc alloc, GradientSettings[] settings, GradientRemap remap)
public bool get_MustCommit()
private void set_MustCommit(bool value)
public void Commit()
private void PrepareAtlas()
}
internal UnityEngine.UIElements.UIR.HeapStatistics : ValueType {
public UInt32 numAllocs
public UInt32 totalSize
public UInt32 allocatedSize
public UInt32 freeSize
public UInt32 largestAvailableBlock
public UInt32 availableBlocksCount
public UInt32 blockCount
public UInt32 highWatermark
public float fragmentation
public HeapStatistics[] subAllocators
}
internal UnityEngine.UIElements.UIR.Implementation.ClipMethod : Enum {
public int value__
public ClipMethod Undetermined
public ClipMethod NotClipped
public ClipMethod Scissor
public ClipMethod ShaderDiscard
public ClipMethod Stencil
}
internal UnityEngine.UIElements.UIR.Implementation.RenderEvents : object {
internal Shader ResolveShader(Shader shader)
internal void ProcessOnClippingChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, UIRenderDevice device, ChainBuilderStats& stats)
internal void ProcessOnOpacityChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats)
internal void ProcessOnTransformOrSizeChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, UIRenderDevice device, ChainBuilderStats& stats)
internal void ProcessOnVisualsChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats)
internal void ProcessRegenText(RenderChain renderChain, VisualElement ve, UIRTextUpdatePainter painter, UIRenderDevice device, ChainBuilderStats& stats)
private Matrix4x4 GetTransformIDTransformInfo(VisualElement ve)
private Vector4 GetClipRectIDClipInfo(VisualElement ve)
private void GetVerticesTransformInfo(VisualElement ve, Matrix4x4& transform)
internal UInt32 DepthFirstOnChildAdded(RenderChain renderChain, VisualElement parent, VisualElement ve, int index, bool resetState)
internal UInt32 DepthFirstOnChildRemoving(RenderChain renderChain, VisualElement ve)
private void DepthFirstOnClippingChanged(RenderChain renderChain, VisualElement parent, VisualElement ve, UInt32 dirtyID, bool hierarchical, bool isRootOfChange, bool isPendingHierarchicalRepaint, bool inheritedClipRectIDChanged, bool inheritedStencilClippedChanged, UIRenderDevice device, ChainBuilderStats& stats)
private void DepthFirstOnOpacityChanged(RenderChain renderChain, float parentCompositeOpacity, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats)
private void DepthFirstOnTransformOrSizeChanged(RenderChain renderChain, VisualElement parent, VisualElement ve, UInt32 dirtyID, UIRenderDevice device, bool isAncestorOfChangeSkinned, bool transformChanged, ChainBuilderStats& stats)
private void DepthFirstOnVisualsChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, bool parentHierarchyHidden, bool hierarchical, ChainBuilderStats& stats)
private bool IsElementHierarchyHidden(VisualElement ve)
private bool IsElementSelfHidden(VisualElement ve)
private VisualElement GetLastDeepestChild(VisualElement ve)
private VisualElement GetNextDepthFirst(VisualElement ve)
private bool IsParentOrAncestorOf(VisualElement ve, VisualElement child)
private ClipMethod DetermineSelfClipMethod(VisualElement ve)
private bool NeedsTransformID(VisualElement ve)
private bool TransformIDHasChanged(Alloc before, Alloc after)
internal UIRStylePainter PaintElement(RenderChain renderChain, VisualElement ve, ChainBuilderStats& stats)
private void ClosePaintElement(VisualElement ve, ClosingInfo closingInfo, UIRenderDevice device, ChainBuilderStats& stats)
private void UpdateOrAllocate(MeshHandle& data, int vertexCount, int indexCount, UIRenderDevice device, NativeSlice`1& verts, NativeSlice`1& indices, UInt16& indexOffset, ChainBuilderStats& stats)
private void CopyTransformVertsPos(NativeSlice`1<Vertex> source, NativeSlice`1<Vertex> target, Matrix4x4 mat, Color32 xformClipPages, Color32 idsAddFlags, Color32 opacityPage)
private void CopyTransformVertsPosAndVec(NativeSlice`1<Vertex> source, NativeSlice`1<Vertex> target, Matrix4x4 mat, Color32 xformClipPages, Color32 idsAddFlags, Color32 opacityPage)
private void CopyTriangleIndicesFlipWindingOrder(NativeSlice`1<ushort> source, NativeSlice`1<ushort> target)
private void CopyTriangleIndicesFlipWindingOrder(NativeSlice`1<ushort> source, NativeSlice`1<ushort> target, int indexOffset)
private void CopyTriangleIndices(NativeSlice`1<ushort> source, NativeSlice`1<ushort> target, int indexOffset)
private bool NudgeVerticesToNewSpace(VisualElement ve, UIRenderDevice device)
private RenderChainCommand InjectMeshDrawCommand(RenderChain renderChain, VisualElement ve, RenderChainCommand& cmdPrev, RenderChainCommand& cmdNext, MeshHandle mesh, int indexCount, int indexOffset, Material material, Texture custom, Texture font)
private RenderChainCommand InjectClosingMeshDrawCommand(RenderChain renderChain, VisualElement ve, RenderChainCommand& cmdPrev, RenderChainCommand& cmdNext, MeshHandle mesh, int indexCount, int indexOffset, Material material, Texture custom, Texture font)
private void FindCommandInsertionPoint(VisualElement ve, RenderChainCommand& prev, RenderChainCommand& next)
private void FindClosingCommandInsertionPoint(VisualElement ve, RenderChainCommand& prev, RenderChainCommand& next)
private void InjectCommandInBetween(RenderChain renderChain, RenderChainCommand cmd, RenderChainCommand& prev, RenderChainCommand& next)
private void InjectClosingCommandInBetween(RenderChainCommand cmd, RenderChainCommand& prev, RenderChainCommand& next)
private void ResetCommands(RenderChain renderChain, VisualElement ve)
}
internal UnityEngine.UIElements.UIR.Implementation.UIRStylePainter : object {
private RenderChain m_Owner
private List`1<Entry> m_Entries
private UIRAtlasManager m_AtlasManager
private VectorImageManager m_VectorImageManager
private Entry m_CurrentEntry
private ClosingInfo m_ClosingInfo
private bool m_StencilClip
private BMPAlloc m_ClipRectID
private int m_SVGBackgroundEntryIndex
private TempDataAlloc`1<Vertex> m_VertsPool
private TempDataAlloc`1<ushort> m_IndicesPool
private List`1<MeshWriteData> m_MeshWriteDataPool
private int m_NextMeshWriteDataPoolItem
private Allocator m_AllocRawVertsIndicesDelegate
private Allocator m_AllocThroughDrawMeshDelegate
private MeshGenerationContext <meshGenerationContext>k__BackingField
private VisualElement <currentElement>k__BackingField
private UIRenderDevice <device>k__BackingField
private int <totalVertices>k__BackingField
private int <totalIndices>k__BackingField
private bool <disposed>k__BackingField
public MeshGenerationContext meshGenerationContext
public VisualElement currentElement
public UIRenderDevice device
public List`1<Entry> entries
public ClosingInfo closingInfo
public int totalVertices
public int totalIndices
protected bool disposed
public VisualElement visualElement
private MeshWriteData GetPooledMeshWriteData()
private MeshWriteData AllocRawVertsIndices(UInt32 vertexCount, UInt32 indexCount, AllocMeshData& allocatorData)
private MeshWriteData AllocThroughDrawMesh(UInt32 vertexCount, UInt32 indexCount, AllocMeshData& allocatorData)
public void .ctor(RenderChain renderChain)
public MeshGenerationContext get_meshGenerationContext()
public VisualElement get_currentElement()
public void set_currentElement(VisualElement value)
public UIRenderDevice get_device()
public List`1<Entry> get_entries()
public ClosingInfo get_closingInfo()
public int get_totalVertices()
private void set_totalVertices(int value)
public int get_totalIndices()
private void set_totalIndices(int value)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public void Begin()
public void LandClipUnregisterMeshDrawCommand(RenderChainCommand cmd)
public void LandClipRegisterMesh(NativeSlice`1<Vertex> vertices, NativeSlice`1<ushort> indices, int indexOffset)
public MeshWriteData DrawMesh(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags)
public void DrawText(TextParams textParams, TextHandle handle, float pixelsPerPoint)
private void DrawTextNative(TextParams textParams, TextHandle handle, float pixelsPerPoint)
private void DrawTextCore(TextParams textParams, TextHandle handle, float pixelsPerPoint)
public void DrawRectangle(RectangleParams rectParams)
public void DrawBorder(BorderParams borderParams)
public void DrawImmediate(Action callback)
public VisualElement get_visualElement()
public void DrawVisualElementBackground()
public void DrawVisualElementBorder()
public void ApplyVisualElementClipping()
public void DrawVectorImage(RectangleParams rectParams)
internal void Reset()
private void GenerateStencilClipEntryForRoundedRectBackground()
private void GenerateStencilClipEntryForSVGBackground()
}
internal UnityEngine.UIElements.UIR.Implementation.UIRTextUpdatePainter : object {
private VisualElement m_CurrentElement
private int m_TextEntryIndex
private NativeArray`1<Vertex> m_DudVerts
private NativeArray`1<ushort> m_DudIndices
private NativeSlice`1<Vertex> m_MeshDataVerts
private Color32 m_XFormClipPages
private Color32 m_IDsFlags
private Color32 m_OpacityPagesSettingsIndex
private MeshGenerationContext <meshGenerationContext>k__BackingField
public MeshGenerationContext meshGenerationContext
public VisualElement visualElement
public MeshGenerationContext get_meshGenerationContext()
public void Begin(VisualElement ve, UIRenderDevice device)
public void End()
public void Dispose()
public void DrawRectangle(RectangleParams rectParams)
public void DrawBorder(BorderParams borderParams)
public void DrawImmediate(Action callback)
public VisualElement get_visualElement()
public MeshWriteData DrawMesh(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags)
public void DrawText(TextParams textParams, TextHandle handle, float pixelsPerPoint)
}
internal UnityEngine.UIElements.UIR.LinkedPool`1 : object {
private Func`1<T> m_CreateFunc
private Action`1<T> m_ResetAction
private int m_Limit
private T m_PoolFirst
private int <Count>k__BackingField
public int Count
public void .ctor(Func`1<T> createFunc, Action`1<T> resetAction, int limit)
public int get_Count()
private void set_Count(int value)
public void Clear()
public T Get()
public void Return(T item)
}
internal UnityEngine.UIElements.UIR.LinkedPoolItem`1 : object {
internal T poolNext
}
internal UnityEngine.UIElements.UIR.MeshBuilder : object {
private ProfilerMarker s_VectorGraphics9Slice
private ProfilerMarker s_VectorGraphicsStretch
private int k_MaxTextMeshVertices
private int k_MaxTextMeshIndices
private int k_MaxTextQuadCount
private UInt16[] slicedQuadIndices
private Single[] k_TexCoordSlicesX
private Single[] k_TexCoordSlicesY
private Single[] k_PositionSlicesX
private Single[] k_PositionSlicesY
internal void MakeBorder(BorderParams borderParams, float posZ, AllocMeshData meshAlloc)
internal void MakeSolidRect(RectangleParams rectParams, float posZ, AllocMeshData meshAlloc)
internal void MakeTexturedRect(RectangleParams rectParams, float posZ, AllocMeshData meshAlloc)
private Vertex ConvertTextVertexToUIRVertex(MeshInfo info, int index, Vector2 offset)
private Vertex ConvertTextVertexToUIRVertex(TextVertex textVertex, Vector2 offset)
internal void MakeText(MeshInfo meshInfo, Vector2 offset, AllocMeshData meshAlloc)
internal void MakeText(NativeArray`1<TextVertex> uiVertices, Vector2 offset, AllocMeshData meshAlloc)
internal void UpdateText(NativeArray`1<TextVertex> uiVertices, Vector2 offset, Matrix4x4 transform, Color32 xformClipPages, Color32 idsFlags, Color32 opacityPageSVGSettingIndex, NativeSlice`1<Vertex> vertices)
private void MakeQuad(Rect rcPosition, Rect rcTexCoord, Color color, float posZ, AllocMeshData meshAlloc)
internal void MakeSlicedQuad(RectangleParams& rectParams, float posZ, AllocMeshData meshAlloc)
internal void MakeVectorGraphics(RectangleParams rectParams, int settingIndexOffset, AllocMeshData meshAlloc, Int32& finalVertexCount, Int32& finalIndexCount)
internal void MakeVectorGraphicsStretchBackground(Vertex[] svgVertices, UInt16[] svgIndices, float svgWidth, float svgHeight, Rect targetRect, Rect sourceUV, ScaleMode scaleMode, Color tint, int settingIndexOffset, AllocMeshData meshAlloc, Int32& finalVertexCount, Int32& finalIndexCount)
private void MakeVectorGraphics9SliceBackground(Vertex[] svgVertices, UInt16[] svgIndices, float svgWidth, float svgHeight, Rect targetRect, Vector4 sliceLTRB, bool stretch, Color tint, int settingIndexOffset, AllocMeshData meshAlloc)
private ClipCounts UpperBoundApproximateRectClippingResults(Vertex[] vertices, UInt16[] indices, Vector4 clipRectMinMax)
private void RectClip(Vertex[] vertices, UInt16[] indices, Vector4 clipRectMinMax, MeshWriteData mwd, ClipCounts cc, Int32& newVertexCount)
private void RectClipTriangle(Vertex* vt, UInt16* it, Vector4 clipRectMinMax, MeshWriteData mwd, UInt16& nextNewVertex)
private Vector3 GetVertexBaryCentricCoordinates(Vertex* vt, float x, float y)
private Vertex InterpolateVertexInTriangle(Vertex* vt, float x, float y, Vector3 uvw)
private Vertex InterpolateVertexInTriangleEdge(Vertex* vt, int e0, int e1, float t)
private float IntersectSegments(float ax, float ay, float bx, float by, float cx, float cy, float dx, float dy)
}
internal UnityEngine.UIElements.UIR.MeshHandle : PoolItem {
internal Alloc allocVerts
internal Alloc allocIndices
internal UInt32 triangleCount
internal Page allocPage
internal UInt32 allocTime
internal UInt32 updateAllocID
}
internal UnityEngine.UIElements.UIR.Page : object {
private bool <disposed>k__BackingField
public DataSet`1<Vertex> vertices
public DataSet`1<ushort> indices
public Page next
protected bool disposed
public bool isEmpty
public void .ctor(UInt32 vertexMaxCount, UInt32 indexMaxCount, UInt32 maxQueuedFrameCount, bool mockPage)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public bool get_isEmpty()
}
internal UnityEngine.UIElements.UIR.Pool`1 : object {
private PoolItem m_Pool
public T Get()
public void Return(T obj)
}
internal UnityEngine.UIElements.UIR.PoolItem : object {
internal PoolItem poolNext
}
internal UnityEngine.UIElements.UIR.RenderChain : object {
private RenderChainCommand m_FirstCommand
private DepthOrderedDirtyTracking m_DirtyTracker
private Pool`1<RenderChainCommand> m_CommandPool
private bool m_BlockDirtyRegistration
private ChainBuilderStats m_Stats
private UInt32 m_StatsElementsAdded
private UInt32 m_StatsElementsRemoved
private VisualElement m_FirstTextElement
private UIRTextUpdatePainter m_TextUpdatePainter
private int m_TextElementCount
private int m_DirtyTextStartIndex
private int m_DirtyTextRemaining
private bool m_FontWasReset
private Dictionary`2<VisualElement, Vector2> m_LastGroupTransformElementScale
private ProfilerMarker s_MarkerRender
private ProfilerMarker s_MarkerClipProcessing
private ProfilerMarker s_MarkerOpacityProcessing
private ProfilerMarker s_MarkerTransformProcessing
private ProfilerMarker s_MarkerVisualsProcessing
private ProfilerMarker s_MarkerTextRegen
private bool <disposed>k__BackingField
internal Action OnPreRender
private Action`1<UIRenderDevice> BeforeDrawChain
private IPanel <panel>k__BackingField
private UIRenderDevice <device>k__BackingField
private UIRAtlasManager <atlasManager>k__BackingField
private VectorImageManager <vectorImageManager>k__BackingField
internal UIRVEShaderInfoAllocator shaderInfoAllocator
private UIRStylePainter <painter>k__BackingField
private bool <drawStats>k__BackingField
private RenderDeviceRestoreInfo m_RenderDeviceRestoreInfo
internal RenderChainCommand firstCommand
protected bool disposed
internal ChainBuilderStats stats
internal IPanel panel
internal UIRenderDevice device
internal UIRAtlasManager atlasManager
internal VectorImageManager vectorImageManager
internal UIRStylePainter painter
internal bool drawStats
internal RenderChainCommand get_firstCommand()
public void .ctor(IPanel panel, Shader standardShader)
protected void .ctor(IPanel panel, UIRenderDevice device, UIRAtlasManager atlasManager, VectorImageManager vectorImageManager)
private void Constructor(IPanel panelObj, UIRenderDevice deviceObj, UIRAtlasManager atlasMan, VectorImageManager vectorImageMan)
private void Destructor()
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
internal ChainBuilderStats get_stats()
public void Render(Rect viewport, Matrix4x4 projection, PanelClearFlags clearFlags)
private void ProcessTextRegen(bool timeSliced)
public void add_BeforeDrawChain(Action`1<UIRenderDevice> value)
public void remove_BeforeDrawChain(Action`1<UIRenderDevice> value)
public void UIEOnStandardShaderChanged(Shader standardShader)
public void UIEOnChildAdded(VisualElement parent, VisualElement ve, int index)
public void UIEOnChildrenReordered(VisualElement ve)
public void UIEOnChildRemoving(VisualElement ve)
public void StopTrackingGroupTransformElement(VisualElement ve)
public void UIEOnClippingChanged(VisualElement ve, bool hierarchical)
public void UIEOnOpacityChanged(VisualElement ve)
public void UIEOnTransformOrSizeChanged(VisualElement ve, bool transformChanged, bool clipRectSizeChanged)
public void UIEOnVisualsChanged(VisualElement ve, bool hierarchical)
internal IPanel get_panel()
private void set_panel(IPanel value)
internal UIRenderDevice get_device()
private void set_device(UIRenderDevice value)
internal UIRAtlasManager get_atlasManager()
private void set_atlasManager(UIRAtlasManager value)
internal VectorImageManager get_vectorImageManager()
private void set_vectorImageManager(VectorImageManager value)
internal UIRStylePainter get_painter()
private void set_painter(UIRStylePainter value)
internal bool get_drawStats()
internal void set_drawStats(bool value)
internal void EnsureFitsDepth(int depth)
internal void ChildWillBeRemoved(VisualElement ve)
internal RenderChainCommand AllocCommand()
internal void FreeCommand(RenderChainCommand cmd)
internal void OnRenderCommandAdded(RenderChainCommand firstCommand)
internal void OnRenderCommandRemoved(RenderChainCommand firstCommand, RenderChainCommand lastCommand)
internal void AddTextElement(VisualElement ve)
internal void RemoveTextElement(VisualElement ve)
internal void OnGroupTransformElementChangedTransform(VisualElement ve)
internal void BeforeRenderDeviceRelease()
internal void AfterRenderDeviceRelease()
internal void RecreateDevice()
private void RepaintAtlassedElements()
private void OnFontReset(Font font)
private void DrawStats()
private VisualElement GetFirstElementInPanel(VisualElement ve)
}
internal UnityEngine.UIElements.UIR.RenderChainCommand : PoolItem {
internal VisualElement owner
internal RenderChainCommand prev
internal RenderChainCommand next
internal bool closing
internal CommandType type
internal State state
internal MeshHandle mesh
internal int indexOffset
internal int indexCount
internal Action callback
internal void Reset()
internal void ExecuteNonDrawMesh(DrawParams drawParams, bool straightY, float pixelsPerPoint, Exception& immediateException)
private Vector4 RectToScreenSpace(Rect rc, Matrix4x4 projection, bool straightY)
private Rect CombineScissorRects(Rect r0, Rect r1)
private RectInt RectPointsToPixelsAndFlipYAxis(Rect rect, Rect viewport, float pixelsPerPoint)
}
internal UnityEngine.UIElements.UIR.RenderChainTextEntry : ValueType {
internal RenderChainCommand command
internal int firstVertex
internal int vertexCount
}
internal UnityEngine.UIElements.UIR.RenderChainVEData : ValueType {
internal VisualElement prev
internal VisualElement next
internal VisualElement groupTransformAncestor
internal VisualElement boneTransformAncestor
internal VisualElement prevDirty
internal VisualElement nextDirty
internal int hierarchyDepth
internal RenderDataDirtyTypes dirtiedValues
internal UInt32 dirtyID
internal ClipMethod clipMethod
internal RenderChainCommand firstCommand
internal RenderChainCommand lastCommand
internal RenderChainCommand firstClosingCommand
internal RenderChainCommand lastClosingCommand
internal bool isInChain
internal bool isStencilClipped
internal bool isHierarchyHidden
internal bool usesAtlas
internal bool disableNudging
internal bool usesLegacyText
internal MeshHandle data
internal MeshHandle closingData
internal Matrix4x4 verticesSpace
internal int displacementUVStart
internal int displacementUVEnd
internal BMPAlloc transformID
internal BMPAlloc clipRectID
internal BMPAlloc opacityID
internal float compositeOpacity
internal VisualElement prevText
internal VisualElement nextText
internal List`1<RenderChainTextEntry> textEntries
internal RenderChainCommand lastClosingOrLastCommand
internal RenderChainCommand get_lastClosingOrLastCommand()
internal bool AllocatesID(BMPAlloc alloc)
internal bool InheritsID(BMPAlloc alloc)
}
internal UnityEngine.UIElements.UIR.RenderDataDirtyTypeClasses : Enum {
public int value__
public RenderDataDirtyTypeClasses Clipping
public RenderDataDirtyTypeClasses Opacity
public RenderDataDirtyTypeClasses TransformSize
public RenderDataDirtyTypeClasses Visuals
public RenderDataDirtyTypeClasses Count
}
internal UnityEngine.UIElements.UIR.RenderDataDirtyTypes : Enum {
public int value__
public RenderDataDirtyTypes None
public RenderDataDirtyTypes Transform
public RenderDataDirtyTypes ClipRectSize
public RenderDataDirtyTypes Clipping
public RenderDataDirtyTypes ClippingHierarchy
public RenderDataDirtyTypes Visuals
public RenderDataDirtyTypes VisualsHierarchy
public RenderDataDirtyTypes Opacity
}
internal UnityEngine.UIElements.UIR.State : ValueType {
public Material material
public Texture custom
public Texture font
}
internal UnityEngine.UIElements.UIR.Tessellation : object {
internal float kEpsilon
internal ushort kSubdivisions
private ProfilerMarker s_MarkerTessellateRect
private ProfilerMarker s_MarkerTessellateBorder
public void TessellateRect(RectangleParams rectParams, float posZ, AllocMeshData meshAlloc, bool computeUVs)
public void TessellateBorder(BorderParams borderParams, float posZ, AllocMeshData meshAlloc)
private void CountRectTriangles(RectangleParams& rectParams, UInt16& vertexCount, UInt16& indexCount)
private void CountBorderTriangles(BorderParams& border, UInt16& vertexCount, UInt16& indexCount)
private void TessellateRectInternal(RectangleParams& rectParams, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateBorderInternal(BorderParams& border, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateRoundedCorners(RectangleParams& rectParams, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateRoundedBorders(BorderParams& border, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateRoundedCorner(Rect rect, Color32 color, float posZ, Vector2 radius, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateRoundedBorder(Rect rect, Color32 leftColor, Color32 topColor, float posZ, Vector2 radius, float leftWidth, float topWidth, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private Vector2 IntersectEllipseWithLine(float a, float b, Vector2 dir)
private float GetCenteredEllipseLineIntersectionTheta(float a, float b, Vector2 dir)
private Vector2 IntersectLines(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3)
private int LooseCompare(float a, float b)
private void TessellateComplexBorderCorner(Rect rect, Vector2 radius, float leftWidth, float topWidth, Color32 color, float posZ, MeshWriteData mesh, UInt16& refVertexCount, UInt16& refIndexCount, bool countOnly)
private void TessellateComplexBorderCorner(Rect rect, Vector2 radius, float leftWidth, float topWidth, Color32 leftColor, Color32 topColor, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateQuad(Rect rect, float miterOffset, float leftWidth, float topWidth, TessellationType tessellationType, Color32 color, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateFilledFan(Vector2 center, Vector2 radius, float leftWidth, float topWidth, Color32 leftColor, Color32 topColor, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateFilledFan(TessellationType tessellationType, Vector2 center, Vector2 radius, float leftWidth, float topWidth, Color32 color, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateBorderedFan(Vector2 center, Vector2 outerRadius, float leftWidth, float topWidth, Color32 leftColor, Color32 topColor, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateBorderedFan(Vector2 center, Vector2 radius, float leftWidth, float topWidth, Color32 color, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void MirrorVertices(Rect rect, NativeSlice`1<Vertex> vertices, int vertexStart, int vertexCount, bool flipHorizontal)
private void FlipWinding(NativeSlice`1<ushort> indices, int indexStart, int indexCount)
private void ComputeUVs(Rect tessellatedRect, Rect textureRect, Rect uvRegion, NativeSlice`1<Vertex> vertices)
}
internal UnityEngine.UIElements.UIR.TextureBlitter : object {
private int k_TextureSlotCount
private Int32[] k_TextureIds
private ProfilerMarker s_CommitSampler
private BlitInfo[] m_SingleBlit
private Material m_BlitMaterial
private RectInt m_Viewport
private RenderTexture m_PrevRT
private List`1<BlitInfo> m_PendingBlits
private bool <disposed>k__BackingField
protected bool disposed
public int queueLength
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public void .ctor(int capacity)
public void QueueBlit(Texture src, RectInt srcRect, Vector2Int dstPos, bool addBorder, Color tint)
public void BlitOneNow(RenderTexture dst, Texture src, RectInt srcRect, Vector2Int dstPos, bool addBorder, Color tint)
public int get_queueLength()
public void Commit(RenderTexture dst)
public void Reset()
private void BeginBlit(RenderTexture dst)
private void DoBlit(IList`1<BlitInfo> blitInfos, int startIndex)
private void EndBlit()
}
internal UnityEngine.UIElements.UIR.Transform3x4 : ValueType {
public Vector4 v0
public Vector4 v1
public Vector4 v2
}
internal UnityEngine.UIElements.UIR.UIRenderDevice : object {
private UInt32 k_MaxQueuedFrameCount
private bool m_MockDevice
private int m_LazyCreationDrawRangeRingSize
private Shader m_DefaultMaterialShader
private Material m_DefaultMaterial
private DrawingModes m_DrawingMode
private Page m_FirstPage
private UInt32 m_NextPageVertexCount
private UInt32 m_LargeMeshVertexCount
private float m_IndexToVertexCountRatio
private List`1<List`1<AllocToFree>> m_DeferredFrees
private List`1<List`1<AllocToUpdate>> m_Updates
private UInt32[] m_Fences
private NativeArray`1<DrawBufferRange> m_DrawRanges
private int m_DrawRangeStart
private UInt32 m_FrameIndex
private bool m_FrameIndexIncremented
private UInt32 m_NextUpdateID
private DrawStatistics m_DrawStats
private bool m_APIUsesStraightYCoordinateSystem
private Pool`1<MeshHandle> m_MeshHandles
private DrawParams m_DrawParams
private LinkedList`1<DeviceToFree> m_DeviceFreeQueue
private int m_ActiveDeviceCount
private bool m_SubscribedToNotifications
private bool m_SynchronousFree
private int s_FontTexPropID
private int s_CustomTexPropID
private int s_1PixelClipInvViewPropID
private int s_GradientSettingsTexID
private int s_ShaderInfoTexID
private int s_PixelClipRectPropID
private int s_TransformsPropID
private int s_ClipRectsPropID
private ProfilerMarker s_MarkerAllocate
private ProfilerMarker s_MarkerFree
private ProfilerMarker s_MarkerAdvanceFrame
private ProfilerMarker s_MarkerFence
private ProfilerMarker s_MarkerBeforeDraw
private Nullable`1<bool> s_VertexTexturingIsAvailable
private string k_VertexTexturingIsAvailableTag
private string k_VertexTexturingIsAvailableTrue
private Texture2D s_WhiteTexel
private Texture2D s_DefaultShaderInfoTexFloat
private Texture2D s_DefaultShaderInfoTexARGB8
private bool <disposed>k__BackingField
internal Texture2D whiteTexel
internal Texture2D defaultShaderInfoTexFloat
internal Texture2D defaultShaderInfoTexARGB8
internal bool vertexTexturingIsAvailable
protected bool disposed
public Shader standardShader
public void .ctor(Shader defaultMaterialShader, UInt32 initialVertexCapacity, UInt32 initialIndexCapacity, DrawingModes drawingMode, int drawRangeRingSize)
protected void .ctor(UInt32 initialVertexCapacity, UInt32 initialIndexCapacity, DrawingModes drawingMode, int drawRangeRingSize)
private void .ctor(Shader defaultMaterialShader, UInt32 initialVertexCapacity, UInt32 initialIndexCapacity, DrawingModes drawingMode, int drawRangeRingSize, bool mockDevice)
internal Texture2D get_whiteTexel()
internal Texture2D get_defaultShaderInfoTexFloat()
internal Texture2D get_defaultShaderInfoTexARGB8()
internal bool get_vertexTexturingIsAvailable()
private void CompleteCreation()
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
internal void DisposeImmediate()
protected void Dispose(bool disposing)
public MeshHandle Allocate(UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, UInt16& indexOffset)
public void Update(MeshHandle mesh, UInt32 vertexCount, NativeSlice`1& vertexData)
public void Update(MeshHandle mesh, UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, UInt16& indexOffset)
private bool TryAllocFromPage(Page page, UInt32 vertexCount, UInt32 indexCount, Alloc& va, Alloc& ia, bool shortLived)
private void Allocate(MeshHandle meshHandle, UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, bool shortLived)
private void UpdateAfterGPUUsedData(MeshHandle mesh, UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, UInt16& indexOffset, AllocToUpdate& allocToUpdate, bool copyBackIndices)
public void Free(MeshHandle mesh)
public Shader get_standardShader()
public void set_standardShader(Shader value)
public Material GetStandardMaterial()
private void SetupStandardMaterial(Material material, DrawingModes mode)
private void Set1PixelSizeOnMaterial(DrawParams drawParams, Material mat)
private void BeforeDraw()
private void EvaluateChain(RenderChainCommand head, Rect viewport, Matrix4x4 projection, PanelClearFlags clearFlags, Texture atlas, Texture gradientSettings, Texture shaderInfo, float pixelsPerPoint, NativeArray`1<Transform3x4> transforms, NativeArray`1<Vector4> clipRects, Exception& immediateException)
private void KickRanges(NativeArray`1<DrawBufferRange> ranges, Int32& rangesReady, Int32& rangesStart, int rangesCount, Page curPage)
public void DrawChain(RenderChainCommand head, Rect viewport, Matrix4x4 projection, PanelClearFlags clearFlags, Texture atlas, Texture gradientSettings, Texture shaderInfo, float pixelsPerPoint, NativeArray`1<Transform3x4> transforms, NativeArray`1<Vector4> clipRects, Exception& immediateException)
public void AdvanceFrame()
internal void PrepareForGfxDeviceRecreate()
internal void WrapUpGfxDeviceRecreate()
internal void FlushAllPendingDeviceDisposes()
internal AllocationStatistics GatherAllocationStatistics()
internal DrawStatistics GatherDrawStatistics()
private void OnEngineUpdate()
private void ProcessDeviceFreeQueue()
private void OnEngineUpdateGlobal()
private void OnFlushPendingResources()
}
internal UnityEngine.UIElements.UIR.UIRVEShaderInfoAllocator : ValueType {
private UIRAtlasManager m_Atlas
private BitmapAllocator32 m_TransformAllocator
private BitmapAllocator32 m_ClipRectAllocator
private BitmapAllocator32 m_OpacityAllocator
private bool m_AtlasReallyCreated
private bool m_VertexTexturingEnabled
private NativeArray`1<Transform3x4> m_Transforms
private NativeArray`1<Vector4> m_ClipRects
internal Vector2Int identityTransformTexel
internal Vector2Int infiniteClipRectTexel
internal Vector2Int fullOpacityTexel
internal Vector4 identityTransformRow0Value
internal Vector4 identityTransformRow1Value
internal Vector4 identityTransformRow2Value
internal Vector4 infiniteClipRectValue
internal Vector4 fullOpacityValue
public BMPAlloc identityTransform
public BMPAlloc infiniteClipRect
public BMPAlloc fullOpacity
private int pageWidth
private int pageHeight
public NativeArray`1<Transform3x4> transformConstants
public NativeArray`1<Vector4> clipRectConstants
public Texture atlas
public bool internalAtlasCreated
public bool isReleased
private int get_pageWidth()
private int get_pageHeight()
private Vector2Int AllocToTexelCoord(BitmapAllocator32& allocator, BMPAlloc alloc)
private int AllocToConstantBufferIndex(BMPAlloc alloc)
private bool AtlasRectMatchesPage(BitmapAllocator32& allocator, BMPAlloc defAlloc, RectInt atlasRect)
public NativeArray`1<Transform3x4> get_transformConstants()
public NativeArray`1<Vector4> get_clipRectConstants()
public Texture get_atlas()
public bool get_internalAtlasCreated()
public bool get_isReleased()
public void Construct()
private void ReallyCreateAtlas()
public void Dispose()
public void IssuePendingAtlasBlits()
public BMPAlloc AllocTransform()
public BMPAlloc AllocClipRect()
public BMPAlloc AllocOpacity()
public void SetTransformValue(BMPAlloc alloc, Matrix4x4 xform)
public void SetClipRectValue(BMPAlloc alloc, Vector4 clipRect)
public void SetOpacityValue(BMPAlloc alloc, float opacity)
public void FreeTransform(BMPAlloc alloc)
public void FreeClipRect(BMPAlloc alloc)
public void FreeOpacity(BMPAlloc alloc)
public Color32 TransformAllocToVertexData(BMPAlloc alloc)
public Color32 ClipRectAllocToVertexData(BMPAlloc alloc)
public Color32 OpacityAllocToVertexData(BMPAlloc alloc)
}
internal UnityEngine.UIElements.UIR.Utility : object {
private Action`1<bool> GraphicsResourcesRecreate
private Action EngineUpdate
private Action FlushPendingResources
private ProfilerMarker s_MarkerRaiseEngineUpdate
public void DrawRanges(GPUBuffer`1<I> ib, GPUBuffer`1<T> vb, NativeSlice`1<DrawBufferRange> ranges)
public void SetVectorArray(Material mat, int name, NativeSlice`1<T> vector4s)
public void add_GraphicsResourcesRecreate(Action`1<bool> value)
public void remove_GraphicsResourcesRecreate(Action`1<bool> value)
public void add_EngineUpdate(Action value)
public void remove_EngineUpdate(Action value)
public void add_FlushPendingResources(Action value)
public void remove_FlushPendingResources(Action value)
internal void RaiseGraphicsResourcesRecreate(bool recreate)
internal void RaiseEngineUpdate()
internal void RaiseFlushPendingResources()
private IntPtr AllocateBuffer(int elementCount, int elementStride, bool vertexBuffer)
private void FreeBuffer(IntPtr buffer)
private void UpdateBufferRanges(IntPtr buffer, IntPtr ranges, int rangeCount, int writeRangeStart, int writeRangeEnd)
private void DrawRanges(IntPtr ib, IntPtr vb, int vbElemStride, IntPtr ranges, int rangeCount)
private void SetVectorArray(Material mat, int name, IntPtr vector4s, int count)
public void SetScissorRect(RectInt scissorRect)
public void DisableScissor()
public bool IsScissorEnabled()
public UInt32 InsertCPUFence()
public bool CPUFencePassed(UInt32 fence)
public void WaitForCPUFencePassed(UInt32 fence)
public void SyncRenderThread()
public RectInt GetActiveViewport()
public void ProfileDrawChainBegin()
public void ProfileDrawChainEnd()
public void ProfileImmediateRendererBegin()
public void ProfileImmediateRendererEnd()
public void NotifyOfUIREvents(bool subscribe)
public bool GetInvertProjectionMatrix()
private void SetScissorRect_Injected(RectInt& scissorRect)
private void GetActiveViewport_Injected(RectInt& ret)
}
internal UnityEngine.UIElements.UIR.VectorImageManager : object {
private ProfilerMarker s_MarkerRegister
private ProfilerMarker s_MarkerUnregister
private UIRAtlasManager m_AtlasManager
private Dictionary`2<VectorImage, VectorImageRenderInfo> m_Registered
private VectorImageRenderInfoPool m_RenderInfoPool
private GradientRemapPool m_GradientRemapPool
private GradientSettingsAtlas m_GradientSettingsAtlas
private bool m_LoggedExhaustedSettingsAtlas
private bool <disposed>k__BackingField
private int s_GlobalResetVersion
private int m_ResetVersion
public Texture2D atlas
protected bool disposed
public Texture2D get_atlas()
public void .ctor(UIRAtlasManager atlasManager)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public void MarkAllForReset()
public void MarkForReset()
public bool RequiresReset()
public void Reset()
public void Commit()
public GradientRemap AddUser(VectorImage vi)
public void RemoveUser(VectorImage vi)
private VectorImageRenderInfo Register(VectorImage vi)
private void Unregister(VectorImage vi, VectorImageRenderInfo renderInfo)
}
internal UnityEngine.UIElements.UIR.VectorImageRenderInfo : LinkedPoolItem`1<VectorImageRenderInfo> {
public int useCount
public GradientRemap firstGradientRemap
public Alloc gradientSettingsAlloc
public void Reset()
}
internal UnityEngine.UIElements.UIR.VertexFlags : Enum {
public int value__
public VertexFlags IsSolid
public VertexFlags IsText
public VertexFlags IsAtlasTexturedPoint
public VertexFlags IsAtlasTexturedBilinear
public VertexFlags IsCustomTextured
public VertexFlags IsEdge
public VertexFlags IsEdgeNoShrinkX
public VertexFlags IsEdgeNoShrinkY
public VertexFlags IsSVGGradients
public VertexFlags IsCustomSVGGradients
public VertexFlags LastType
}
internal UnityEngine.UIElements.UIR.ViewTransform : ValueType {
internal Matrix4x4 transform
internal Vector4 clipRect
}
internal UnityEngine.UIElements.UIRAtlasAllocator : object {
private int <maxAtlasSize>k__BackingField
private int <maxImageWidth>k__BackingField
private int <maxImageHeight>k__BackingField
private int <virtualWidth>k__BackingField
private int <virtualHeight>k__BackingField
private int <physicalWidth>k__BackingField
private int <physicalHeight>k__BackingField
private AreaNode m_FirstUnpartitionedArea
private Row[] m_OpenRows
private int m_1SidePadding
private int m_2SidePadding
private ProfilerMarker s_MarkerTryAllocate
private bool <disposed>k__BackingField
public int maxAtlasSize
public int maxImageWidth
public int maxImageHeight
public int virtualWidth
public int virtualHeight
public int physicalWidth
public int physicalHeight
protected bool disposed
public int get_maxAtlasSize()
public int get_maxImageWidth()
public int get_maxImageHeight()
public int get_virtualWidth()
private void set_virtualWidth(int value)
public int get_virtualHeight()
private void set_virtualHeight(int value)
public int get_physicalWidth()
private void set_physicalWidth(int value)
public int get_physicalHeight()
private void set_physicalHeight(int value)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
private int GetLog2OfNextPower(int n)
public void .ctor(int initialAtlasSize, int maxAtlasSize, int sidePadding)
public bool TryAllocate(int width, int height, RectInt& location)
private bool TryPartitionArea(AreaNode areaNode, int rowIndex, int rowHeight, int minWidth)
private void BuildAreas()
}
internal UnityEngine.UIElements.UIRAtlasManager : object {
private Action`1<UIRAtlasManager> atlasManagerCreated
private Action`1<UIRAtlasManager> atlasManagerDisposed
private List`1<UIRAtlasManager> s_Instances
private ReadOnlyList`1<UIRAtlasManager> s_InstancesreadOnly
private int m_InitialSize
private UIRAtlasAllocator m_Allocator
private Dictionary`2<Texture2D, RectInt> m_UVs
private bool m_ForceReblitAll
private bool m_FloatFormat
private FilterMode m_FilterMode
private ColorSpace m_ColorSpace
private TextureBlitter m_Blitter
private int m_2SidePadding
private int m_1SidePadding
private ProfilerMarker s_MarkerReset
private int <maxImageSize>k__BackingField
private RenderTextureFormat <format>k__BackingField
private RenderTexture <atlas>k__BackingField
private bool <disposed>k__BackingField
private int s_GlobalResetVersion
private int m_ResetVersion
public int maxImageSize
public RenderTextureFormat format
public RenderTexture atlas
protected bool disposed
public void add_atlasManagerCreated(Action`1<UIRAtlasManager> value)
public void remove_atlasManagerCreated(Action`1<UIRAtlasManager> value)
public void add_atlasManagerDisposed(Action`1<UIRAtlasManager> value)
public void remove_atlasManagerDisposed(Action`1<UIRAtlasManager> value)
public ReadOnlyList`1<UIRAtlasManager> Instances()
public int get_maxImageSize()
public RenderTextureFormat get_format()
public RenderTexture get_atlas()
private void set_atlas(RenderTexture value)
public void .ctor(RenderTextureFormat format, FilterMode filterMode, int maxImageSize, int initialSize)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
private void LogDisposeError()
public void MarkAllForReset()
public void MarkForReset()
public bool RequiresReset()
public bool IsReleased()
public void Reset()
public bool TryGetLocation(Texture2D image, RectInt& uvs)
public bool AllocateRect(int width, int height, RectInt& uvs)
public void EnqueueBlit(Texture image, int x, int y, bool addBorder, Color tint)
public bool IsTextureFormatSupported(TextureFormat format)
private bool IsTextureValid(Texture2D image)
public void Commit()
private void UpdateAtlasTexture()
private RenderTexture CreateAtlasTexture()
}
internal UnityEngine.UIElements.UIRLayoutUpdater : BaseVisualTreeUpdater {
private int kMaxValidateLayoutCount
private string s_Description
private ProfilerMarker s_ProfilerMarker
public ProfilerMarker profilerMarker
public ProfilerMarker get_profilerMarker()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void UpdateSubTree(VisualElement ve, int currentLayoutPass)
}
internal UnityEngine.UIElements.UIRRepaintUpdater : BaseVisualTreeUpdater {
internal RenderChain renderChain
private ProfilerMarker s_MarkerDrawChain
private string s_Description
private ProfilerMarker s_ProfilerMarker
private bool <disposed>k__BackingField
public ProfilerMarker profilerMarker
protected bool disposed
public ProfilerMarker get_profilerMarker()
public void add_BeforeDrawChain(Action`1<UIRenderDevice> value)
public void remove_BeforeDrawChain(Action`1<UIRenderDevice> value)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
internal RenderChain DebugGetRenderChain()
protected RenderChain CreateRenderChain()
protected void DrawChain(Rect viewport, Matrix4x4 projection)
private void OnGraphicsResourcesRecreate(bool recreate)
private void OnPanelChanged(BaseVisualElementPanel obj)
private void OnPanelHierarchyChanged(VisualElement ve, HierarchyChangeType changeType)
private void OnPanelStandardShaderChanged()
private void ResetAllElementsDataRecursive(VisualElement ve)
private void DisposeRenderChain()
protected bool get_disposed()
private void set_disposed(bool value)
protected void Dispose(bool disposing)
}
internal UnityEngine.UIElements.UIRUtility : object {
public string k_DefaultShaderName
public float k_ClearZ
public float k_MeshPosZ
public float k_MaskPosZ
public Vector4 ToVector4(Rect rc)
public bool IsRoundRect(VisualElement ve)
public bool IsVectorImageBackground(VisualElement ve)
public void Destroy(Object obj)
}
public UnityEngine.UIElements.UQueryBuilder`1 : ValueType {
private List`1<StyleSelector> m_StyleSelectors
private List`1<StyleSelectorPart> m_Parts
private VisualElement m_Element
private List`1<RuleMatcher> m_Matchers
private StyleSelectorRelationship m_Relationship
private int pseudoStatesMask
private int negatedPseudoStatesMask
private List`1<StyleSelector> styleSelectors
private List`1<StyleSelectorPart> parts
private List`1<StyleSelector> get_styleSelectors()
private List`1<StyleSelectorPart> get_parts()
public void .ctor(VisualElement visualElement)
public UQueryBuilder`1<T> Class(string classname)
public UQueryBuilder`1<T> Name(string id)
public UQueryBuilder`1<T2> Descendents(string name, String[] classNames)
public UQueryBuilder`1<T2> Descendents(string name, string classname)
public UQueryBuilder`1<T2> Children(string name, String[] classes)
public UQueryBuilder`1<T2> Children(string name, string className)
public UQueryBuilder`1<T2> OfType(string name, String[] classes)
public UQueryBuilder`1<T2> OfType(string name, string className)
internal UQueryBuilder`1<T> SingleBaseType()
public UQueryBuilder`1<T> Where(Func`2<T, bool> selectorPredicate)
private void AddClass(string c)
private void AddClasses(String[] classes)
private void AddName(string id)
private void AddType()
private UQueryBuilder`1<T> AddPseudoState(PseudoStates s)
private UQueryBuilder`1<T> AddNegativePseudoState(PseudoStates s)
public UQueryBuilder`1<T> Active()
public UQueryBuilder`1<T> NotActive()
public UQueryBuilder`1<T> Visible()
public UQueryBuilder`1<T> NotVisible()
public UQueryBuilder`1<T> Hovered()
public UQueryBuilder`1<T> NotHovered()
public UQueryBuilder`1<T> Checked()
public UQueryBuilder`1<T> NotChecked()
public UQueryBuilder`1<T> Selected()
public UQueryBuilder`1<T> NotSelected()
public UQueryBuilder`1<T> Enabled()
public UQueryBuilder`1<T> NotEnabled()
public UQueryBuilder`1<T> Focused()
public UQueryBuilder`1<T> NotFocused()
private UQueryBuilder`1<T2> AddRelationship(StyleSelectorRelationship relationship)
private void AddPseudoStatesRuleIfNecessasy()
private void FinishSelector()
private bool CurrentSelectorEmpty()
private void FinishCurrentSelector()
public UQueryState`1<T> Build()
public T op_Implicit(UQueryBuilder`1<T> s)
public bool op_Equality(UQueryBuilder`1<T> builder1, UQueryBuilder`1<T> builder2)
public bool op_Inequality(UQueryBuilder`1<T> builder1, UQueryBuilder`1<T> builder2)
public T First()
public T Last()
public List`1<T> ToList()
public void ToList(List`1<T> results)
public T AtIndex(int index)
public void ForEach(List`1<T2> result, Func`2<T, T2> funcCall)
public List`1<T2> ForEach(Func`2<T, T2> funcCall)
public void ForEach(Action`1<T> funcCall)
public bool Equals(UQueryBuilder`1<T> other)
public bool Equals(object obj)
public int GetHashCode()
}
public UnityEngine.UIElements.UQueryExtensions : object {
private UQueryState`1<VisualElement> SingleElementEmptyQuery
private UQueryState`1<VisualElement> SingleElementNameQuery
private UQueryState`1<VisualElement> SingleElementClassQuery
private UQueryState`1<VisualElement> SingleElementNameAndClassQuery
private UQueryState`1<VisualElement> SingleElementTypeQuery
private UQueryState`1<VisualElement> SingleElementTypeAndNameQuery
private UQueryState`1<VisualElement> SingleElementTypeAndClassQuery
private UQueryState`1<VisualElement> SingleElementTypeAndNameAndClassQuery
public T Q(VisualElement e, string name, String[] classes)
public VisualElement Q(VisualElement e, string name, String[] classes)
public T Q(VisualElement e, string name, string className)
internal T MandatoryQ(VisualElement e, string name, string className)
public VisualElement Q(VisualElement e, string name, string className)
internal VisualElement MandatoryQ(VisualElement e, string name, string className)
public UQueryBuilder`1<VisualElement> Query(VisualElement e, string name, String[] classes)
public UQueryBuilder`1<VisualElement> Query(VisualElement e, string name, string className)
public UQueryBuilder`1<T> Query(VisualElement e, string name, String[] classes)
public UQueryBuilder`1<T> Query(VisualElement e, string name, string className)
public UQueryBuilder`1<VisualElement> Query(VisualElement e)
}
public UnityEngine.UIElements.UQueryState`1 : ValueType {
private FirstQueryMatcher s_First
private LastQueryMatcher s_Last
private IndexQueryMatcher s_Index
private ActionQueryMatcher<T> s_Action
private VisualElement m_Element
internal List`1<RuleMatcher> m_Matchers
private ListQueryMatcher<T> s_List
internal void .ctor(VisualElement element, List`1<RuleMatcher> matchers)
public UQueryState`1<T> RebuildOn(VisualElement element)
public T First()
public T Last()
public void ToList(List`1<T> results)
public List`1<T> ToList()
public T AtIndex(int index)
public void ForEach(Action`1<T> funcCall)
public void ForEach(List`1<T2> result, Func`2<T, T2> funcCall)
public List`1<T2> ForEach(Func`2<T, T2> funcCall)
public bool Equals(UQueryState`1<T> other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(UQueryState`1<T> state1, UQueryState`1<T> state2)
public bool op_Inequality(UQueryState`1<T> state1, UQueryState`1<T> state2)
}
public UnityEngine.UIElements.UsageHints : Enum {
public int value__
public UsageHints None
public UsageHints DynamicTransform
public UsageHints GroupTransform
}
public UnityEngine.UIElements.UxmlAttributeDescription : object {
protected string xmlSchemaNamespace
private string <name>k__BackingField
private String[] m_ObsoleteNames
private string <type>k__BackingField
private string <typeNamespace>k__BackingField
private Use <use>k__BackingField
private UxmlTypeRestriction <restriction>k__BackingField
public string name
public IEnumerable`1<string> obsoleteNames
public string type
public string typeNamespace
public string defaultValueAsString
public Use use
public UxmlTypeRestriction restriction
public string get_name()
public void set_name(string value)
public IEnumerable`1<string> get_obsoleteNames()
public void set_obsoleteNames(IEnumerable`1<string> value)
public string get_type()
protected void set_type(string value)
public string get_typeNamespace()
protected void set_typeNamespace(string value)
public string get_defaultValueAsString()
public Use get_use()
public void set_use(Use value)
public UxmlTypeRestriction get_restriction()
public void set_restriction(UxmlTypeRestriction value)
internal bool TryGetValueFromBagAsString(IUxmlAttributes bag, CreationContext cc, String& value)
protected bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Func`3<string, T, T> converterFunc, T defaultValue, T& value)
protected T GetValueFromBag(IUxmlAttributes bag, CreationContext cc, Func`3<string, T, T> converterFunc, T defaultValue)
}
public UnityEngine.UIElements.UxmlBoolAttributeDescription : TypedUxmlAttributeDescription`1<bool> {
public string defaultValueAsString
public string get_defaultValueAsString()
public bool GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Boolean& value)
private bool ConvertValueToBool(string v, bool defaultValue)
}
public UnityEngine.UIElements.UxmlChildElementDescription : object {
private string <elementName>k__BackingField
private string <elementNamespace>k__BackingField
public string elementName
public string elementNamespace
public void .ctor(Type t)
public string get_elementName()
protected void set_elementName(string value)
public string get_elementNamespace()
protected void set_elementNamespace(string value)
}
public UnityEngine.UIElements.UxmlColorAttributeDescription : TypedUxmlAttributeDescription`1<Color> {
public string defaultValueAsString
public string get_defaultValueAsString()
public Color GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Color& value)
private Color ConvertValueToColor(string v, Color defaultValue)
}
public UnityEngine.UIElements.UxmlDoubleAttributeDescription : TypedUxmlAttributeDescription`1<double> {
public string defaultValueAsString
public string get_defaultValueAsString()
public double GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Double& value)
private double ConvertValueToDouble(string v, double defaultValue)
}
public UnityEngine.UIElements.UxmlEnumAttributeDescription`1 : TypedUxmlAttributeDescription`1<T> {
public string defaultValueAsString
public string get_defaultValueAsString()
public T GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, T& value)
private U ConvertValueToEnum(string v, U defaultValue)
}
public UnityEngine.UIElements.UxmlEnumeration : UxmlTypeRestriction {
private List`1<string> m_Values
public IEnumerable`1<string> values
public IEnumerable`1<string> get_values()
public void set_values(IEnumerable`1<string> value)
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.UIElements.UxmlFactory`2 : object {
internal TTraits m_Traits
public string uxmlName
public string uxmlNamespace
public string uxmlQualifiedName
public bool canHaveAnyAttribute
public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlNamespace()
public string get_uxmlQualifiedName()
public bool get_canHaveAnyAttribute()
public IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription()
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public bool AcceptsAttributeBag(IUxmlAttributes bag, CreationContext cc)
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.UIElements.UxmlFloatAttributeDescription : TypedUxmlAttributeDescription`1<float> {
public string defaultValueAsString
public string get_defaultValueAsString()
public float GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Single& value)
private float ConvertValueToFloat(string v, float defaultValue)
}
public UnityEngine.UIElements.UxmlIntAttributeDescription : TypedUxmlAttributeDescription`1<int> {
public string defaultValueAsString
public string get_defaultValueAsString()
public int GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Int32& value)
private int ConvertValueToInt(string v, int defaultValue)
}
public UnityEngine.UIElements.UxmlLongAttributeDescription : TypedUxmlAttributeDescription`1<long> {
public string defaultValueAsString
public string get_defaultValueAsString()
public long GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Int64& value)
private long ConvertValueToLong(string v, long defaultValue)
}
public UnityEngine.UIElements.UxmlRootElementFactory : UxmlFactory`2<VisualElement, UxmlRootElementTraits> {
public string uxmlName
public string uxmlQualifiedName
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlQualifiedName()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.UIElements.UxmlRootElementTraits : UxmlTraits {
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
}
public UnityEngine.UIElements.UxmlStringAttributeDescription : TypedUxmlAttributeDescription`1<string> {
public string defaultValueAsString
public string get_defaultValueAsString()
public string GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, String& value)
}
public UnityEngine.UIElements.UxmlTraits : object {
private bool <canHaveAnyAttribute>k__BackingField
public bool canHaveAnyAttribute
public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public bool get_canHaveAnyAttribute()
protected void set_canHaveAnyAttribute(bool value)
public IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription()
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
public void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc)
private IEnumerable`1<UxmlAttributeDescription> GetAllAttributeDescriptionForType(Type t)
}
public UnityEngine.UIElements.UxmlTypeRestriction : object {
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.UIElements.UxmlValueBounds : UxmlTypeRestriction {
private string <min>k__BackingField
private string <max>k__BackingField
private bool <excludeMin>k__BackingField
private bool <excludeMax>k__BackingField
public string min
public string max
public bool excludeMin
public bool excludeMax
public string get_min()
public void set_min(string value)
public string get_max()
public void set_max(string value)
public bool get_excludeMin()
public void set_excludeMin(bool value)
public bool get_excludeMax()
public void set_excludeMax(bool value)
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.UIElements.UxmlValueMatches : UxmlTypeRestriction {
private string <regex>k__BackingField
public string regex
public string get_regex()
public void set_regex(string value)
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.UIElements.VectorImage : ScriptableObject {
internal Texture2D atlas
internal VectorImageVertex[] vertices
internal UInt16[] indices
internal GradientSettings[] settings
internal Vector2 size
}
internal UnityEngine.UIElements.VectorImageVertex : ValueType {
public Vector3 position
public Color32 tint
public Vector2 uv
public UInt32 settingIndex
}
internal UnityEngine.UIElements.VersionChangeType : Enum {
public int value__
public VersionChangeType Bindings
public VersionChangeType ViewData
public VersionChangeType Hierarchy
public VersionChangeType Layout
public VersionChangeType StyleSheet
public VersionChangeType Styles
public VersionChangeType Overflow
public VersionChangeType BorderRadius
public VersionChangeType BorderWidth
public VersionChangeType Transform
public VersionChangeType Size
public VersionChangeType Repaint
public VersionChangeType Opacity
}
public UnityEngine.UIElements.Vertex : ValueType {
public float nearZ
public Vector3 position
public Color32 tint
public Vector2 uv
internal Color32 xformClipPages
internal Color32 idsFlags
internal Color32 opacityPageSVGSettingIndex
}
public UnityEngine.UIElements.Visibility : Enum {
public int value__
public Visibility Visible
public Visibility Hidden
}
public UnityEngine.UIElements.VisualElement : Focusable {
private bool <isCompositeRoot>k__BackingField
private UInt32 s_NextId
private List`1<string> s_EmptyClassList
internal PropertyName userDataPropertyKey
public string disabledUssClassName
private string m_Name
private List`1<string> m_ClassList
private string m_TypeName
private string m_FullTypeName
private List`1<KeyValuePair`2<PropertyName, object>> m_PropertyBag
private string m_ViewDataKey
private bool <enableViewDataPersistence>k__BackingField
private RenderHints m_RenderHints
internal Rect lastLayout
internal RenderChainVEData renderChainData
private Vector3 m_Position
private Quaternion m_Rotation
private Vector3 m_Scale
private bool <isLayoutManual>k__BackingField
private Rect m_Layout
internal bool isBoundingBoxDirty
private Rect m_BoundingBox
internal bool isWorldBoundingBoxDirty
private Rect m_WorldBoundingBox
private bool <isWorldTransformDirty>k__BackingField
private bool <isWorldTransformInverseDirty>k__BackingField
private Matrix4x4 m_WorldTransformCache
private Matrix4x4 m_WorldTransformInverseCache
private bool <isWorldClipDirty>k__BackingField
private Rect m_WorldClip
private Rect m_WorldClipMinusGroup
private Rect s_InfiniteRect
internal PseudoStates triggerPseudoMask
internal PseudoStates dependencyPseudoMask
private PseudoStates m_PseudoStates
private PickingMode <pickingMode>k__BackingField
private YogaNode <yogaNode>k__BackingField
internal VisualElementStylesData m_SharedStyle
internal VisualElementStylesData m_Style
internal StyleVariableContext variableContext
internal InheritedStylesData propagatedStyle
private InheritedStylesData m_InheritedStylesData
private ComputedStyle <computedStyle>k__BackingField
internal UInt32 controlid
internal int imguiContainerDescendantCount
private bool <enabledSelf>k__BackingField
private Action`1<MeshGenerationContext> <generateVisualContent>k__BackingField
private bool m_RequireMeasureFunction
private List`1<IValueAnimationUpdate> m_RunningAnimations
private Hierarchy <hierarchy>k__BackingField
private bool <cacheAsBitmap>k__BackingField
private VisualElement m_PhysicalParent
private VisualElement m_LogicalParent
private List`1<VisualElement> s_EmptyList
private List`1<VisualElement> m_Children
private BaseVisualElementPanel <elementPanel>k__BackingField
private InlineStyleAccess m_InlineStyleAccess
internal List`1<StyleSheet> styleSheetList
internal bool isCompositeRoot
public string viewDataKey
internal bool enableViewDataPersistence
public object userData
public bool canGrabFocus
public FocusController focusController
public UsageHints usageHints
internal RenderHints renderHints
public ITransform transform
private Vector3 UnityEngine.UIElements.ITransform.position
private Quaternion UnityEngine.UIElements.ITransform.rotation
private Vector3 UnityEngine.UIElements.ITransform.scale
private Matrix4x4 UnityEngine.UIElements.ITransform.matrix
internal bool isLayoutManual
internal float scaledPixelsPerPoint
public Rect layout
public Rect contentRect
protected Rect paddingRect
internal Rect boundingBox
internal Rect worldBoundingBox
public Rect worldBound
public Rect localBound
internal Rect rect
internal bool isWorldTransformDirty
internal bool isWorldTransformInverseDirty
public Matrix4x4 worldTransform
internal Matrix4x4 worldTransformInverse
internal bool isWorldClipDirty
internal Rect worldClip
internal Rect worldClipMinusGroup
internal PseudoStates pseudoStates
public PickingMode pickingMode
public string name
internal List`1<string> classList
internal string fullTypeName
internal string typeName
internal YogaNode yogaNode
internal VisualElementStylesData sharedStyle
internal VisualElementStylesData specifiedStyle
internal InheritedStylesData inheritedStyle
internal bool hasInlineStyle
internal ComputedStyle computedStyle
internal float opacity
public bool enabledInHierarchy
public bool enabledSelf
public bool visible
public Action`1<MeshGenerationContext> generateVisualContent
internal bool requireMeasureFunction
public IExperimentalFeatures experimental
private ITransitionAnimations UnityEngine.UIElements.IExperimentalFeatures.animation
public Hierarchy hierarchy
public bool cacheAsBitmap
public VisualElement parent
internal BaseVisualElementPanel elementPanel
public IPanel panel
public VisualElement contentContainer
public VisualElement Item
public int childCount
public IVisualElementScheduler schedule
public IStyle style
public ICustomStyle customStyle
public IResolvedStyle resolvedStyle
private float UnityEngine.UIElements.IResolvedStyle.width
private float UnityEngine.UIElements.IResolvedStyle.height
private StyleFloat UnityEngine.UIElements.IResolvedStyle.maxWidth
private StyleFloat UnityEngine.UIElements.IResolvedStyle.maxHeight
private StyleFloat UnityEngine.UIElements.IResolvedStyle.minWidth
private StyleFloat UnityEngine.UIElements.IResolvedStyle.minHeight
private StyleFloat UnityEngine.UIElements.IResolvedStyle.flexBasis
private float UnityEngine.UIElements.IResolvedStyle.flexGrow
private float UnityEngine.UIElements.IResolvedStyle.flexShrink
private FlexDirection UnityEngine.UIElements.IResolvedStyle.flexDirection
private Wrap UnityEngine.UIElements.IResolvedStyle.flexWrap
private float UnityEngine.UIElements.IResolvedStyle.left
private float UnityEngine.UIElements.IResolvedStyle.top
private float UnityEngine.UIElements.IResolvedStyle.right
private float UnityEngine.UIElements.IResolvedStyle.bottom
private float UnityEngine.UIElements.IResolvedStyle.marginLeft
private float UnityEngine.UIElements.IResolvedStyle.marginTop
private float UnityEngine.UIElements.IResolvedStyle.marginRight
private float UnityEngine.UIElements.IResolvedStyle.marginBottom
private float UnityEngine.UIElements.IResolvedStyle.paddingLeft
private float UnityEngine.UIElements.IResolvedStyle.paddingTop
private float UnityEngine.UIElements.IResolvedStyle.paddingRight
private float UnityEngine.UIElements.IResolvedStyle.paddingBottom
private Position UnityEngine.UIElements.IResolvedStyle.position
private Align UnityEngine.UIElements.IResolvedStyle.alignSelf
private TextAnchor UnityEngine.UIElements.IResolvedStyle.unityTextAlign
private FontStyle UnityEngine.UIElements.IResolvedStyle.unityFontStyleAndWeight
private float UnityEngine.UIElements.IResolvedStyle.fontSize
private WhiteSpace UnityEngine.UIElements.IResolvedStyle.whiteSpace
private Color UnityEngine.UIElements.IResolvedStyle.color
private Color UnityEngine.UIElements.IResolvedStyle.backgroundColor
private Color UnityEngine.UIElements.IResolvedStyle.borderColor
private Font UnityEngine.UIElements.IResolvedStyle.unityFont
private ScaleMode UnityEngine.UIElements.IResolvedStyle.unityBackgroundScaleMode
private Color UnityEngine.UIElements.IResolvedStyle.unityBackgroundImageTintColor
private Align UnityEngine.UIElements.IResolvedStyle.alignItems
private Align UnityEngine.UIElements.IResolvedStyle.alignContent
private Justify UnityEngine.UIElements.IResolvedStyle.justifyContent
private Color UnityEngine.UIElements.IResolvedStyle.borderLeftColor
private Color UnityEngine.UIElements.IResolvedStyle.borderRightColor
private Color UnityEngine.UIElements.IResolvedStyle.borderTopColor
private Color UnityEngine.UIElements.IResolvedStyle.borderBottomColor
private float UnityEngine.UIElements.IResolvedStyle.borderLeftWidth
private float UnityEngine.UIElements.IResolvedStyle.borderRightWidth
private float UnityEngine.UIElements.IResolvedStyle.borderTopWidth
private float UnityEngine.UIElements.IResolvedStyle.borderBottomWidth
private float UnityEngine.UIElements.IResolvedStyle.borderTopLeftRadius
private float UnityEngine.UIElements.IResolvedStyle.borderTopRightRadius
private float UnityEngine.UIElements.IResolvedStyle.borderBottomLeftRadius
private float UnityEngine.UIElements.IResolvedStyle.borderBottomRightRadius
private int UnityEngine.UIElements.IResolvedStyle.unitySliceLeft
private int UnityEngine.UIElements.IResolvedStyle.unitySliceTop
private int UnityEngine.UIElements.IResolvedStyle.unitySliceRight
private int UnityEngine.UIElements.IResolvedStyle.unitySliceBottom
private float UnityEngine.UIElements.IResolvedStyle.opacity
private Visibility UnityEngine.UIElements.IResolvedStyle.visibility
private DisplayStyle UnityEngine.UIElements.IResolvedStyle.display
public VisualElementStyleSheetSet styleSheets
public string tooltip
internal bool get_isCompositeRoot()
internal void set_isCompositeRoot(bool value)
public string get_viewDataKey()
public void set_viewDataKey(string value)
internal bool get_enableViewDataPersistence()
private void set_enableViewDataPersistence(bool value)
public object get_userData()
public void set_userData(object value)
public bool get_canGrabFocus()
public FocusController get_focusController()
public UsageHints get_usageHints()
public void set_usageHints(UsageHints value)
internal RenderHints get_renderHints()
internal void set_renderHints(RenderHints value)
public ITransform get_transform()
private Vector3 UnityEngine.UIElements.ITransform.get_position()
private void UnityEngine.UIElements.ITransform.set_position(Vector3 value)
private Quaternion UnityEngine.UIElements.ITransform.get_rotation()
private void UnityEngine.UIElements.ITransform.set_rotation(Quaternion value)
private Vector3 UnityEngine.UIElements.ITransform.get_scale()
private void UnityEngine.UIElements.ITransform.set_scale(Vector3 value)
internal Vector3 ComputeGlobalScale()
private Matrix4x4 UnityEngine.UIElements.ITransform.get_matrix()
internal bool get_isLayoutManual()
private void set_isLayoutManual(bool value)
internal float get_scaledPixelsPerPoint()
public Rect get_layout()
internal void set_layout(Rect value)
public Rect get_contentRect()
protected Rect get_paddingRect()
internal Rect TransformAlignedRect(Matrix4x4 lhc, Rect rect)
internal Vector2 MultiplyMatrix44Point2(Matrix4x4 lhs, Vector2 point)
internal Rect get_boundingBox()
internal Rect get_worldBoundingBox()
internal void UpdateBoundingBox()
internal void UpdateWorldBoundingBox()
public Rect get_worldBound()
public Rect get_localBound()
internal Rect get_rect()
internal bool get_isWorldTransformDirty()
internal void set_isWorldTransformDirty(bool value)
internal bool get_isWorldTransformInverseDirty()
internal void set_isWorldTransformInverseDirty(bool value)
public Matrix4x4 get_worldTransform()
internal Matrix4x4 get_worldTransformInverse()
private void UpdateWorldTransform()
internal bool get_isWorldClipDirty()
internal void set_isWorldClipDirty(bool value)
internal Rect get_worldClip()
internal Rect get_worldClipMinusGroup()
private void UpdateWorldClip()
private Rect SubstractBorderPadding(Rect worldRect)
internal Rect ComputeAAAlignedBound(Rect position, Matrix4x4 mat)
internal PseudoStates get_pseudoStates()
internal void set_pseudoStates(PseudoStates value)
public PickingMode get_pickingMode()
public void set_pickingMode(PickingMode value)
public string get_name()
public void set_name(string value)
internal List`1<string> get_classList()
internal string get_fullTypeName()
internal string get_typeName()
internal YogaNode get_yogaNode()
private void set_yogaNode(YogaNode value)
internal VisualElementStylesData get_sharedStyle()
internal VisualElementStylesData get_specifiedStyle()
internal InheritedStylesData get_inheritedStyle()
internal void set_inheritedStyle(InheritedStylesData value)
internal bool get_hasInlineStyle()
internal ComputedStyle get_computedStyle()
private void set_computedStyle(ComputedStyle value)
internal float get_opacity()
internal void set_opacity(float value)
private void ChangeIMGUIContainerCount(int delta)
protected void ExecuteDefaultAction(EventBase evt)
public void Focus()
internal void SetPanel(BaseVisualElementPanel p)
private void ChangePanel(BaseVisualElementPanel p)
public void SendEvent(EventBase e)
internal void IncrementVersion(VersionChangeType changeType)
internal void InvokeHierarchyChanged(HierarchyChangeType changeType)
protected internal bool SetEnabledFromHierarchy(bool state)
public bool get_enabledInHierarchy()
public bool get_enabledSelf()
private void set_enabledSelf(bool value)
public void SetEnabled(bool value)
private void PropagateEnabledToChildren(bool value)
public bool get_visible()
public void set_visible(bool value)
public void MarkDirtyRepaint()
public Action`1<MeshGenerationContext> get_generateVisualContent()
public void set_generateVisualContent(Action`1<MeshGenerationContext> value)
internal void InvokeGenerateVisualContent(MeshGenerationContext mgc)
internal void GetFullHierarchicalViewDataKey(StringBuilder key)
internal string GetFullHierarchicalViewDataKey()
internal T GetOrCreateViewData(object existing, string key)
internal T GetOrCreateViewData(ScriptableObject existing, string key)
internal void OverwriteFromViewData(object obj, string key)
internal void SaveViewData()
internal bool IsViewDataPersitenceSupportedOnChildren(bool existingState)
internal void OnViewDataReady(bool enablePersistence)
internal void OnViewDataReady()
public bool ContainsPoint(Vector2 localPoint)
public bool Overlaps(Rect rectangle)
internal bool get_requireMeasureFunction()
internal void set_requireMeasureFunction(bool value)
private void AssignMeasureFunction()
private void RemoveMeasureFunction()
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
internal YogaSize Measure(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode)
internal void SetSize(Vector2 size)
private void FinalizeLayout()
internal void SetInlineStyles(VisualElementStylesData inlineStyleData)
internal void SetSharedStyles(VisualElementStylesData sharedStyle)
internal void ResetPositionProperties()
public string ToString()
public IEnumerable`1<string> GetClasses()
public void ClearClassList()
public void AddToClassList(string className)
public void RemoveFromClassList(string className)
public void ToggleInClassList(string className)
public void EnableInClassList(string className, bool enable)
public bool ClassListContains(string cls)
public object FindAncestorUserData()
internal object GetProperty(PropertyName key)
internal void SetProperty(PropertyName key, object value)
private object GetPropertyInternal(PropertyName key)
private void CheckUserKeyArgument(PropertyName key)
private void SetPropertyInternal(PropertyName key, object value)
private void UpdateCursorStyle(long eventType)
private VisualElementAnimationSystem GetAnimationSystem()
internal void RegisterAnimation(IValueAnimationUpdate anim)
internal void UnregisterAnimation(IValueAnimationUpdate anim)
private void UnregisterRunningAnimations()
private void RegisterRunningAnimations()
private ValueAnimation`1<float> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(float from, float to, int durationMs, Action`2<VisualElement, float> onValueChanged)
private ValueAnimation`1<Rect> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Rect from, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged)
private ValueAnimation`1<Color> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Color from, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged)
private ValueAnimation`1<Vector3> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Vector3 from, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged)
private ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Vector2 from, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged)
private ValueAnimation`1<Quaternion> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Quaternion from, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged)
private ValueAnimation`1<StyleValues> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(StyleValues from, StyleValues to, int durationMs)
private ValueAnimation`1<float> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, float> fromValueGetter, float to, int durationMs, Action`2<VisualElement, float> onValueChanged)
private ValueAnimation`1<Rect> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Rect> fromValueGetter, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged)
private ValueAnimation`1<Color> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Color> fromValueGetter, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged)
private ValueAnimation`1<Vector3> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Vector3> fromValueGetter, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged)
private ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Vector2> fromValueGetter, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged)
private ValueAnimation`1<Quaternion> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Quaternion> fromValueGetter, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged)
private ValueAnimation`1<T> StartAnimation(ValueAnimation`1<T> anim, Func`2<VisualElement, T> fromValueGetter, T to, int durationMs, Action`2<VisualElement, T> onValueChanged)
private void AssignStyleValues(VisualElement ve, StyleValues src)
private StyleValues ReadCurrentValues(VisualElement ve, StyleValues targetValuesToRead)
private ValueAnimation`1<StyleValues> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(StyleValues to, int durationMs)
private ValueAnimation`1<StyleValues> Start(Func`2<VisualElement, StyleValues> fromValueGetter, StyleValues to, int durationMs)
private ValueAnimation`1<Rect> UnityEngine.UIElements.Experimental.ITransitionAnimations.Layout(Rect to, int durationMs)
private ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.TopLeft(Vector2 to, int durationMs)
private ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.Size(Vector2 to, int durationMs)
private ValueAnimation`1<float> UnityEngine.UIElements.Experimental.ITransitionAnimations.Scale(float to, int durationMs)
private ValueAnimation`1<Vector3> UnityEngine.UIElements.Experimental.ITransitionAnimations.Position(Vector3 to, int durationMs)
private ValueAnimation`1<Quaternion> UnityEngine.UIElements.Experimental.ITransitionAnimations.Rotation(Quaternion to, int durationMs)
public IExperimentalFeatures get_experimental()
private ITransitionAnimations UnityEngine.UIElements.IExperimentalFeatures.get_animation()
public Hierarchy get_hierarchy()
private void set_hierarchy(Hierarchy value)
public bool get_cacheAsBitmap()
public void set_cacheAsBitmap(bool value)
internal bool ShouldClip()
public VisualElement get_parent()
internal BaseVisualElementPanel get_elementPanel()
private void set_elementPanel(BaseVisualElementPanel value)
public IPanel get_panel()
public VisualElement get_contentContainer()
public void Add(VisualElement child)
public void Insert(int index, VisualElement element)
public void Remove(VisualElement element)
public void RemoveAt(int index)
public void Clear()
public VisualElement ElementAt(int index)
public VisualElement get_Item(int key)
public int get_childCount()
public int IndexOf(VisualElement element)
public IEnumerable`1<VisualElement> Children()
public void Sort(Comparison`1<VisualElement> comp)
public void BringToFront()
public void SendToBack()
public void PlaceBehind(VisualElement sibling)
public void PlaceInFront(VisualElement sibling)
public void RemoveFromHierarchy()
public T GetFirstOfType()
public T GetFirstAncestorOfType()
public bool Contains(VisualElement child)
private void GatherAllChildren(List`1<VisualElement> elements)
public VisualElement FindCommonAncestor(VisualElement other)
internal VisualElement GetRoot()
internal VisualElement GetNextElementDepthFirst()
internal VisualElement GetPreviousElementDepthFirst()
internal VisualElement RetargetElement(VisualElement retargetAgainst)
public IVisualElementScheduler get_schedule()
private IVisualElementScheduledItem UnityEngine.UIElements.IVisualElementScheduler.Execute(Action`1<TimerState> timerUpdateEvent)
private IVisualElementScheduledItem UnityEngine.UIElements.IVisualElementScheduler.Execute(Action updateEvent)
public IStyle get_style()
public ICustomStyle get_customStyle()
public IResolvedStyle get_resolvedStyle()
private float UnityEngine.UIElements.IResolvedStyle.get_width()
private float UnityEngine.UIElements.IResolvedStyle.get_height()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_maxWidth()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_maxHeight()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_minWidth()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_minHeight()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_flexBasis()
private float UnityEngine.UIElements.IResolvedStyle.get_flexGrow()
private float UnityEngine.UIElements.IResolvedStyle.get_flexShrink()
private FlexDirection UnityEngine.UIElements.IResolvedStyle.get_flexDirection()
private Wrap UnityEngine.UIElements.IResolvedStyle.get_flexWrap()
private float UnityEngine.UIElements.IResolvedStyle.get_left()
private float UnityEngine.UIElements.IResolvedStyle.get_top()
private float UnityEngine.UIElements.IResolvedStyle.get_right()
private float UnityEngine.UIElements.IResolvedStyle.get_bottom()
private float UnityEngine.UIElements.IResolvedStyle.get_marginLeft()
private float UnityEngine.UIElements.IResolvedStyle.get_marginTop()
private float UnityEngine.UIElements.IResolvedStyle.get_marginRight()
private float UnityEngine.UIElements.IResolvedStyle.get_marginBottom()
private float UnityEngine.UIElements.IResolvedStyle.get_paddingLeft()
private float UnityEngine.UIElements.IResolvedStyle.get_paddingTop()
private float UnityEngine.UIElements.IResolvedStyle.get_paddingRight()
private float UnityEngine.UIElements.IResolvedStyle.get_paddingBottom()
private Position UnityEngine.UIElements.IResolvedStyle.get_position()
private Align UnityEngine.UIElements.IResolvedStyle.get_alignSelf()
private TextAnchor UnityEngine.UIElements.IResolvedStyle.get_unityTextAlign()
private FontStyle UnityEngine.UIElements.IResolvedStyle.get_unityFontStyleAndWeight()
private float UnityEngine.UIElements.IResolvedStyle.get_fontSize()
private WhiteSpace UnityEngine.UIElements.IResolvedStyle.get_whiteSpace()
private Color UnityEngine.UIElements.IResolvedStyle.get_color()
private Color UnityEngine.UIElements.IResolvedStyle.get_backgroundColor()
private Color UnityEngine.UIElements.IResolvedStyle.get_borderColor()
private Font UnityEngine.UIElements.IResolvedStyle.get_unityFont()
private ScaleMode UnityEngine.UIElements.IResolvedStyle.get_unityBackgroundScaleMode()
private Color UnityEngine.UIElements.IResolvedStyle.get_unityBackgroundImageTintColor()
private Align UnityEngine.UIElements.IResolvedStyle.get_alignItems()
private Align UnityEngine.UIElements.IResolvedStyle.get_alignContent()
private Justify UnityEngine.UIElements.IResolvedStyle.get_justifyContent()
private Color UnityEngine.UIElements.IResolvedStyle.get_borderLeftColor()
private Color UnityEngine.UIElements.IResolvedStyle.get_borderRightColor()
private Color UnityEngine.UIElements.IResolvedStyle.get_borderTopColor()
private Color UnityEngine.UIElements.IResolvedStyle.get_borderBottomColor()
private float UnityEngine.UIElements.IResolvedStyle.get_borderLeftWidth()
private float UnityEngine.UIElements.IResolvedStyle.get_borderRightWidth()
private float UnityEngine.UIElements.IResolvedStyle.get_borderTopWidth()
private float UnityEngine.UIElements.IResolvedStyle.get_borderBottomWidth()
private float UnityEngine.UIElements.IResolvedStyle.get_borderTopLeftRadius()
private float UnityEngine.UIElements.IResolvedStyle.get_borderTopRightRadius()
private float UnityEngine.UIElements.IResolvedStyle.get_borderBottomLeftRadius()
private float UnityEngine.UIElements.IResolvedStyle.get_borderBottomRightRadius()
private int UnityEngine.UIElements.IResolvedStyle.get_unitySliceLeft()
private int UnityEngine.UIElements.IResolvedStyle.get_unitySliceTop()
private int UnityEngine.UIElements.IResolvedStyle.get_unitySliceRight()
private int UnityEngine.UIElements.IResolvedStyle.get_unitySliceBottom()
private float UnityEngine.UIElements.IResolvedStyle.get_opacity()
private Visibility UnityEngine.UIElements.IResolvedStyle.get_visibility()
private DisplayStyle UnityEngine.UIElements.IResolvedStyle.get_display()
public VisualElementStyleSheetSet get_styleSheets()
internal void AddStyleSheetPath(string sheetPath)
internal bool HasStyleSheetPath(string sheetPath)
internal void RemoveStyleSheetPath(string sheetPath)
private StyleFloat ResolveLengthValue(StyleLength styleLength, bool isRow)
public string get_tooltip()
public void set_tooltip(string value)
private void OnTooltip(TooltipEvent e, string tooltip)
private YogaSize <AssignMeasureFunction>b__206_0(YogaNode node, float f, YogaMeasureMode mode, float f1, YogaMeasureMode heightMode)
}
internal UnityEngine.UIElements.VisualElementAnimationSystem : BaseVisualTreeUpdater {
private HashSet`1<IValueAnimationUpdate> m_Animations
private List`1<IValueAnimationUpdate> m_IterationList
private bool m_HasNewAnimations
private bool m_IterationListDirty
private string s_Description
private ProfilerMarker s_ProfilerMarker
private long lastUpdate
public ProfilerMarker profilerMarker
private long CurrentTimeMs()
public ProfilerMarker get_profilerMarker()
public void UnregisterAnimation(IValueAnimationUpdate anim)
public void UnregisterAnimations(List`1<IValueAnimationUpdate> anims)
public void RegisterAnimation(IValueAnimationUpdate anim)
public void RegisterAnimations(List`1<IValueAnimationUpdate> anims)
public void Update()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
}
internal UnityEngine.UIElements.VisualElementAsset : object {
private string m_Name
private int m_Id
private int m_OrderInDocument
private int m_ParentId
private int m_RuleIndex
private string m_Text
private PickingMode m_PickingMode
private string m_FullTypeName
private String[] m_Classes
private List`1<string> m_StylesheetPaths
private List`1<StyleSheet> m_Stylesheets
private List`1<string> m_Properties
public int id
public int orderInDocument
public int parentId
public int ruleIndex
public string fullTypeName
public String[] classes
public List`1<string> stylesheetPaths
public List`1<StyleSheet> stylesheets
public int get_id()
public void set_id(int value)
public int get_orderInDocument()
public void set_orderInDocument(int value)
public int get_parentId()
public void set_parentId(int value)
public int get_ruleIndex()
public void set_ruleIndex(int value)
public string get_fullTypeName()
public void set_fullTypeName(string value)
public String[] get_classes()
public void set_classes(String[] value)
public List`1<string> get_stylesheetPaths()
public void set_stylesheetPaths(List`1<string> value)
public List`1<StyleSheet> get_stylesheets()
public void set_stylesheets(List`1<StyleSheet> value)
public void .ctor(string fullTypeName)
public void OnBeforeSerialize()
public void OnAfterDeserialize()
public void AddProperty(string propertyName, string propertyValue)
private void SetOrAddProperty(string propertyName, string propertyValue)
public bool TryGetAttributeValue(string propertyName, String& value)
}
internal UnityEngine.UIElements.VisualElementDebugExtensions : object {
public string GetDisplayName(VisualElement ve, bool withHashCode)
}
public UnityEngine.UIElements.VisualElementExtensions : object {
public Vector2 WorldToLocal(VisualElement ele, Vector2 p)
public Vector2 LocalToWorld(VisualElement ele, Vector2 p)
public Rect WorldToLocal(VisualElement ele, Rect r)
public Rect LocalToWorld(VisualElement ele, Rect r)
public Vector2 ChangeCoordinatesTo(VisualElement src, VisualElement dest, Vector2 point)
public Rect ChangeCoordinatesTo(VisualElement src, VisualElement dest, Rect rect)
public void StretchToParentSize(VisualElement elem)
public void StretchToParentWidth(VisualElement elem)
public void AddManipulator(VisualElement ele, IManipulator manipulator)
public void RemoveManipulator(VisualElement ele, IManipulator manipulator)
}
internal UnityEngine.UIElements.VisualElementFactoryRegistry : object {
private Dictionary`2<string, List`1<IUxmlFactory>> s_Factories
internal Dictionary`2<string, List`1<IUxmlFactory>> factories
internal Dictionary`2<string, List`1<IUxmlFactory>> get_factories()
internal void RegisterFactory(IUxmlFactory factory)
internal bool TryGetValue(string fullTypeName, List`1& factoryList)
private void RegisterEngineFactories()
}
public UnityEngine.UIElements.VisualElementFocusChangeDirection : FocusChangeDirection {
private VisualElementFocusChangeDirection s_Left
private VisualElementFocusChangeDirection s_Right
public FocusChangeDirection left
public FocusChangeDirection right
protected VisualElementFocusChangeDirection lastValue
public FocusChangeDirection get_left()
public FocusChangeDirection get_right()
protected VisualElementFocusChangeDirection get_lastValue()
protected void .ctor(int value)
}
public UnityEngine.UIElements.VisualElementFocusRing : object {
private VisualElement root
private DefaultFocusOrder <defaultFocusOrder>k__BackingField
private List`1<FocusRingRecord> m_FocusRing
public DefaultFocusOrder defaultFocusOrder
public void .ctor(VisualElement root, DefaultFocusOrder dfo)
public DefaultFocusOrder get_defaultFocusOrder()
public void set_defaultFocusOrder(DefaultFocusOrder value)
private int FocusRingAutoIndexSort(FocusRingRecord a, FocusRingRecord b)
private int FocusRingSort(FocusRingRecord a, FocusRingRecord b)
private void DoUpdate()
private void BuildRingForScopeRecursive(VisualElement ve, Int32& scopeIndex, List`1<FocusRingRecord> scopeList)
private void SortAndFlattenScopeLists(List`1<FocusRingRecord> rootScopeList)
private int GetFocusableInternalIndex(Focusable f)
public FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e)
public Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction)
internal Focusable GetNextFocusableInTree(VisualElement currentFocusable)
internal Focusable GetPreviousFocusableInTree(VisualElement currentFocusable)
}
internal UnityEngine.UIElements.VisualElementListPool : object {
private ObjectPool`1<List`1<VisualElement>> pool
public List`1<VisualElement> Copy(List`1<VisualElement> elements)
public List`1<VisualElement> Get(int initialCapacity)
public void Release(List`1<VisualElement> elements)
}
internal UnityEngine.UIElements.VisualElementPanelActivator : object {
private IVisualElementPanelActivatable m_Activatable
private bool <isActive>k__BackingField
private bool <isDetaching>k__BackingField
public bool isActive
public bool isDetaching
public bool get_isActive()
private void set_isActive(bool value)
public bool get_isDetaching()
private void set_isDetaching(bool value)
public void .ctor(IVisualElementPanelActivatable activatable)
public void SetActive(bool action)
public void SendActivation()
public void SendDeactivation()
private void OnEnter(AttachToPanelEvent evt)
private void OnLeave(DetachFromPanelEvent evt)
}
public UnityEngine.UIElements.VisualElementStyleSheetSet : ValueType {
private VisualElement m_Element
public int count
public StyleSheet Item
internal void .ctor(VisualElement element)
public void Add(StyleSheet styleSheet)
public void Clear()
public bool Remove(StyleSheet styleSheet)
internal void Swap(StyleSheet old, StyleSheet new)
public bool Contains(StyleSheet styleSheet)
public int get_count()
public StyleSheet get_Item(int index)
public bool Equals(VisualElementStyleSheetSet other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(VisualElementStyleSheetSet left, VisualElementStyleSheetSet right)
public bool op_Inequality(VisualElementStyleSheetSet left, VisualElementStyleSheetSet right)
}
internal UnityEngine.UIElements.VisualElementUtils : object {
private HashSet`1<string> s_usedNames
public string GetUniqueName(string nameBase)
}
public UnityEngine.UIElements.VisualTreeAsset : ScriptableObject {
private StylePropertyReader s_StylePropertyReader
private Dictionary`2<string, VisualElement> s_TemporarySlotInsertionPoints
private List`1<UsingEntry> m_Usings
internal StyleSheet inlineSheet
private List`1<VisualElementAsset> m_VisualElementAssets
private List`1<TemplateAsset> m_TemplateAssets
private List`1<SlotDefinition> m_Slots
private int m_ContentContainerId
private int m_ContentHash
internal List`1<VisualElementAsset> visualElementAssets
internal List`1<TemplateAsset> templateAssets
internal List`1<SlotDefinition> slots
internal int contentContainerId
internal int contentHash
internal int GetNextChildSerialNumber()
internal List`1<VisualElementAsset> get_visualElementAssets()
internal void set_visualElementAssets(List`1<VisualElementAsset> value)
internal List`1<TemplateAsset> get_templateAssets()
internal void set_templateAssets(List`1<TemplateAsset> value)
internal List`1<SlotDefinition> get_slots()
internal void set_slots(List`1<SlotDefinition> value)
internal int get_contentContainerId()
internal void set_contentContainerId(int value)
public TemplateContainer CloneTree()
public TemplateContainer CloneTree(string bindingPath)
public void CloneTree(VisualElement target)
internal void CloneTree(VisualElement target, Dictionary`2<string, VisualElement> slotInsertionPoints)
internal void CloneTree(VisualElement target, Dictionary`2<string, VisualElement> slotInsertionPoints, List`1<AttributeOverride> attributeOverrides)
private VisualElement CloneSetupRecursively(VisualElementAsset root, Dictionary`2<int, List`1<VisualElementAsset>> idToChildren, CreationContext context)
private int CompareForOrder(VisualElementAsset a, VisualElementAsset b)
internal bool TryGetSlotInsertionPoint(int insertionPointId, String& slotName)
internal VisualTreeAsset ResolveTemplate(string templateName)
internal VisualElement Create(VisualElementAsset asset, CreationContext ctx)
internal int get_contentHash()
internal void set_contentHash(int value)
public int GetHashCode()
}
internal UnityEngine.UIElements.VisualTreeBindingsUpdater : BaseVisualTreeHierarchyTrackerUpdater {
private string s_Description
private ProfilerMarker s_ProfilerMarker
private HashSet`1<VisualElement> m_ElementsWithBindings
private HashSet`1<VisualElement> m_ElementsToAdd
private HashSet`1<VisualElement> m_ElementsToRemove
private int kMinUpdateDelay
private long m_LastUpdateTime
private ProfilerMarker s_MarkerUpdate
private ProfilerMarker s_MarkerPoll
private List`1<IBinding> updatedBindings
public ProfilerMarker profilerMarker
public ProfilerMarker get_profilerMarker()
private IBinding GetUpdaterFromElement(VisualElement ve)
private void StartTracking(VisualElement ve)
private void StopTracking(VisualElement ve)
private void StartTrackingRecursive(VisualElement ve)
private void StopTrackingRecursive(VisualElement ve)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
protected void OnHierarchyChange(VisualElement ve, HierarchyChangeType type)
private long CurrentTime()
public void PerformTrackingOperations()
public void Update()
private void UpdateBindings()
internal void PollElementsWithBindings(Action`2<VisualElement, IBinding> callback)
}
internal UnityEngine.UIElements.VisualTreeStyleUpdater : BaseVisualTreeUpdater {
private HashSet`1<VisualElement> m_ApplyStyleUpdateList
private bool m_IsApplyingStyles
private UInt32 m_Version
private UInt32 m_LastVersion
private VisualTreeStyleUpdaterTraversal m_StyleContextHierarchyTraversal
private string s_Description
private ProfilerMarker s_ProfilerMarker
public ProfilerMarker profilerMarker
public ProfilerMarker get_profilerMarker()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void ApplyStyles()
}
internal UnityEngine.UIElements.VisualTreeStyleUpdaterTraversal : HierarchyTraversal {
private InheritedStylesData s_DefaultInheritedStyles
private InheritedStylesData m_ResolveInheritData
private StyleVariableContext m_ProcessVarContext
private HashSet`1<VisualElement> m_UpdateList
private HashSet`1<VisualElement> m_ParentList
private List`1<SelectorMatchRecord> m_TempMatchResults
private float <currentPixelsPerPoint>k__BackingField
private StyleMatchingContext m_StyleMatchingContext
private StylePropertyReader m_StylePropertyReader
private float currentPixelsPerPoint
private float get_currentPixelsPerPoint()
private void set_currentPixelsPerPoint(float value)
public void PrepareTraversal(float pixelsPerPoint)
public void AddChangedElement(VisualElement ve)
public void Clear()
private void PropagateToChildren(VisualElement ve)
private void PropagateToParents(VisualElement ve)
private void OnProcessMatchResult(VisualElement current, MatchResultInfo info)
public void TraverseRecursive(VisualElement element, int depth)
private bool ShouldSkipElement(VisualElement element)
private void ProcessMatchedRules(VisualElement element, List`1<SelectorMatchRecord> matchingSelectors)
private void ProcessMatchedVariables(StyleSheet sheet, StyleRule rule)
private void ResolveInheritance(VisualElement element)
}
internal UnityEngine.UIElements.VisualTreeTransformClipUpdater : BaseVisualTreeUpdater {
private UInt32 m_Version
private UInt32 m_LastVersion
private string s_Description
private ProfilerMarker s_ProfilerMarker
public ProfilerMarker profilerMarker
public ProfilerMarker get_profilerMarker()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
private void DirtyHierarchy(VisualElement ve, bool mustDirtyWorldTransform, bool mustDirtyWorldClip)
private void DirtyBoundingBoxHierarchy(VisualElement ve)
public void Update()
}
internal UnityEngine.UIElements.VisualTreeUpdatePhase : Enum {
public int value__
public VisualTreeUpdatePhase ViewData
public VisualTreeUpdatePhase Bindings
public VisualTreeUpdatePhase Animation
public VisualTreeUpdatePhase Styles
public VisualTreeUpdatePhase Layout
public VisualTreeUpdatePhase TransformClip
public VisualTreeUpdatePhase Repaint
public VisualTreeUpdatePhase Count
}
internal UnityEngine.UIElements.VisualTreeUpdater : object {
private BaseVisualElementPanel m_Panel
private UpdaterArray m_UpdaterArray
public void .ctor(BaseVisualElementPanel panel)
public void Dispose()
public void UpdateVisualTree()
public void UpdateVisualTreePhase(VisualTreeUpdatePhase phase)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase)
public void SetUpdater(VisualTreeUpdatePhase phase)
public IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase)
private void SetDefaultUpdaters()
}
internal UnityEngine.UIElements.VisualTreeViewDataUpdater : BaseVisualTreeUpdater {
private HashSet`1<VisualElement> m_UpdateList
private HashSet`1<VisualElement> m_ParentList
private int kMaxValidatePersistentDataCount
private UInt32 m_Version
private UInt32 m_LastVersion
private string s_Description
private ProfilerMarker s_ProfilerMarker
public ProfilerMarker profilerMarker
public ProfilerMarker get_profilerMarker()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void ValidateViewDataOnSubTree(VisualElement ve, bool enablePersistence)
private void PropagateToParents(VisualElement ve)
}
public UnityEngine.UIElements.WheelEvent : MouseEventBase`1<WheelEvent> {
private Vector3 <delta>k__BackingField
public Vector3 delta
public Vector3 get_delta()
private void set_delta(Vector3 value)
public WheelEvent GetPooled(Event systemEvent)
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.WhiteSpace : Enum {
public int value__
public WhiteSpace Normal
public WhiteSpace NoWrap
}
public UnityEngine.UIElements.Wrap : Enum {
public int value__
public Wrap NoWrap
public Wrap Wrap
public Wrap WrapReverse
}
internal UnityEngine.Yoga.BaselineFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public float Invoke(YogaNode node, float width, float height)
public IAsyncResult BeginInvoke(YogaNode node, float width, float height, AsyncCallback callback, object object)
public float EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.Logger : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(YogaConfig config, YogaNode node, YogaLogLevel level, string message)
public IAsyncResult BeginInvoke(YogaConfig config, YogaNode node, YogaLogLevel level, string message, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.MeasureFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public YogaSize Invoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode)
public IAsyncResult BeginInvoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, AsyncCallback callback, object object)
public YogaSize EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.MeasureOutput : object {
public YogaSize Make(float width, float height)
}
internal UnityEngine.Yoga.Native : object {
private IntPtr YGNodeNew()
public IntPtr YGNodeNewWithConfig(IntPtr config)
public void YGNodeFree(IntPtr ygNode)
private void YGNodeFreeInternal(IntPtr ygNode)
public void YGNodeReset(IntPtr node)
public void YGSetManagedObject(IntPtr ygNode, YogaNode node)
public IntPtr YGConfigGetDefault()
public IntPtr YGConfigNew()
public void YGConfigFree(IntPtr config)
private void YGConfigFreeInternal(IntPtr config)
public int YGNodeGetInstanceCount()
public int YGConfigGetInstanceCount()
public void YGConfigSetExperimentalFeatureEnabled(IntPtr config, YogaExperimentalFeature feature, bool enabled)
public bool YGConfigIsExperimentalFeatureEnabled(IntPtr config, YogaExperimentalFeature feature)
public void YGConfigSetUseWebDefaults(IntPtr config, bool useWebDefaults)
public bool YGConfigGetUseWebDefaults(IntPtr config)
public void YGConfigSetPointScaleFactor(IntPtr config, float pixelsInPoint)
public void YGNodeInsertChild(IntPtr node, IntPtr child, UInt32 index)
public void YGNodeRemoveChild(IntPtr node, IntPtr child)
public void YGNodeCalculateLayout(IntPtr node, float availableWidth, float availableHeight, YogaDirection parentDirection)
public void YGNodeMarkDirty(IntPtr node)
public bool YGNodeIsDirty(IntPtr node)
public void YGNodePrint(IntPtr node, YogaPrintOptions options)
public void YGNodeCopyStyle(IntPtr dstNode, IntPtr srcNode)
public void YGNodeSetMeasureFunc(IntPtr node)
public void YGNodeRemoveMeasureFunc(IntPtr node)
public void YGNodeMeasureInvoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, IntPtr returnValueAddress)
public void YGNodeSetBaselineFunc(IntPtr node)
public void YGNodeRemoveBaselineFunc(IntPtr node)
public void YGNodeBaselineInvoke(YogaNode node, float width, float height, IntPtr returnValueAddress)
public void YGNodeSetHasNewLayout(IntPtr node, bool hasNewLayout)
public bool YGNodeGetHasNewLayout(IntPtr node)
public void YGNodeStyleSetDirection(IntPtr node, YogaDirection direction)
public YogaDirection YGNodeStyleGetDirection(IntPtr node)
public void YGNodeStyleSetFlexDirection(IntPtr node, YogaFlexDirection flexDirection)
public YogaFlexDirection YGNodeStyleGetFlexDirection(IntPtr node)
public void YGNodeStyleSetJustifyContent(IntPtr node, YogaJustify justifyContent)
public YogaJustify YGNodeStyleGetJustifyContent(IntPtr node)
public void YGNodeStyleSetAlignContent(IntPtr node, YogaAlign alignContent)
public YogaAlign YGNodeStyleGetAlignContent(IntPtr node)
public void YGNodeStyleSetAlignItems(IntPtr node, YogaAlign alignItems)
public YogaAlign YGNodeStyleGetAlignItems(IntPtr node)
public void YGNodeStyleSetAlignSelf(IntPtr node, YogaAlign alignSelf)
public YogaAlign YGNodeStyleGetAlignSelf(IntPtr node)
public void YGNodeStyleSetPositionType(IntPtr node, YogaPositionType positionType)
public YogaPositionType YGNodeStyleGetPositionType(IntPtr node)
public void YGNodeStyleSetFlexWrap(IntPtr node, YogaWrap flexWrap)
public YogaWrap YGNodeStyleGetFlexWrap(IntPtr node)
public void YGNodeStyleSetOverflow(IntPtr node, YogaOverflow flexWrap)
public YogaOverflow YGNodeStyleGetOverflow(IntPtr node)
public void YGNodeStyleSetDisplay(IntPtr node, YogaDisplay display)
public YogaDisplay YGNodeStyleGetDisplay(IntPtr node)
public void YGNodeStyleSetFlex(IntPtr node, float flex)
public void YGNodeStyleSetFlexGrow(IntPtr node, float flexGrow)
public float YGNodeStyleGetFlexGrow(IntPtr node)
public void YGNodeStyleSetFlexShrink(IntPtr node, float flexShrink)
public float YGNodeStyleGetFlexShrink(IntPtr node)
public void YGNodeStyleSetFlexBasis(IntPtr node, float flexBasis)
public void YGNodeStyleSetFlexBasisPercent(IntPtr node, float flexBasis)
public void YGNodeStyleSetFlexBasisAuto(IntPtr node)
public YogaValue YGNodeStyleGetFlexBasis(IntPtr node)
public float YGNodeGetComputedFlexBasis(IntPtr node)
public void YGNodeStyleSetWidth(IntPtr node, float width)
public void YGNodeStyleSetWidthPercent(IntPtr node, float width)
public void YGNodeStyleSetWidthAuto(IntPtr node)
public YogaValue YGNodeStyleGetWidth(IntPtr node)
public void YGNodeStyleSetHeight(IntPtr node, float height)
public void YGNodeStyleSetHeightPercent(IntPtr node, float height)
public void YGNodeStyleSetHeightAuto(IntPtr node)
public YogaValue YGNodeStyleGetHeight(IntPtr node)
public void YGNodeStyleSetMinWidth(IntPtr node, float minWidth)
public void YGNodeStyleSetMinWidthPercent(IntPtr node, float minWidth)
public YogaValue YGNodeStyleGetMinWidth(IntPtr node)
public void YGNodeStyleSetMinHeight(IntPtr node, float minHeight)
public void YGNodeStyleSetMinHeightPercent(IntPtr node, float minHeight)
public YogaValue YGNodeStyleGetMinHeight(IntPtr node)
public void YGNodeStyleSetMaxWidth(IntPtr node, float maxWidth)
public void YGNodeStyleSetMaxWidthPercent(IntPtr node, float maxWidth)
public YogaValue YGNodeStyleGetMaxWidth(IntPtr node)
public void YGNodeStyleSetMaxHeight(IntPtr node, float maxHeight)
public void YGNodeStyleSetMaxHeightPercent(IntPtr node, float maxHeight)
public YogaValue YGNodeStyleGetMaxHeight(IntPtr node)
public void YGNodeStyleSetAspectRatio(IntPtr node, float aspectRatio)
public float YGNodeStyleGetAspectRatio(IntPtr node)
public void YGNodeStyleSetPosition(IntPtr node, YogaEdge edge, float position)
public void YGNodeStyleSetPositionPercent(IntPtr node, YogaEdge edge, float position)
public YogaValue YGNodeStyleGetPosition(IntPtr node, YogaEdge edge)
public void YGNodeStyleSetMargin(IntPtr node, YogaEdge edge, float margin)
public void YGNodeStyleSetMarginPercent(IntPtr node, YogaEdge edge, float margin)
public void YGNodeStyleSetMarginAuto(IntPtr node, YogaEdge edge)
public YogaValue YGNodeStyleGetMargin(IntPtr node, YogaEdge edge)
public void YGNodeStyleSetPadding(IntPtr node, YogaEdge edge, float padding)
public void YGNodeStyleSetPaddingPercent(IntPtr node, YogaEdge edge, float padding)
public YogaValue YGNodeStyleGetPadding(IntPtr node, YogaEdge edge)
public void YGNodeStyleSetBorder(IntPtr node, YogaEdge edge, float border)
public float YGNodeStyleGetBorder(IntPtr node, YogaEdge edge)
public float YGNodeLayoutGetLeft(IntPtr node)
public float YGNodeLayoutGetTop(IntPtr node)
public float YGNodeLayoutGetRight(IntPtr node)
public float YGNodeLayoutGetBottom(IntPtr node)
public float YGNodeLayoutGetWidth(IntPtr node)
public float YGNodeLayoutGetHeight(IntPtr node)
public float YGNodeLayoutGetMargin(IntPtr node, YogaEdge edge)
public float YGNodeLayoutGetPadding(IntPtr node, YogaEdge edge)
public YogaDirection YGNodeLayoutGetDirection(IntPtr node)
private void YGNodeStyleGetFlexBasis_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetWidth_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetHeight_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetMinWidth_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetMinHeight_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetMaxWidth_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetMaxHeight_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetPosition_Injected(IntPtr node, YogaEdge edge, YogaValue& ret)
private void YGNodeStyleGetMargin_Injected(IntPtr node, YogaEdge edge, YogaValue& ret)
private void YGNodeStyleGetPadding_Injected(IntPtr node, YogaEdge edge, YogaValue& ret)
}
internal UnityEngine.Yoga.YogaAlign : Enum {
public int value__
public YogaAlign Auto
public YogaAlign FlexStart
public YogaAlign Center
public YogaAlign FlexEnd
public YogaAlign Stretch
public YogaAlign Baseline
public YogaAlign SpaceBetween
public YogaAlign SpaceAround
}
internal UnityEngine.Yoga.YogaBaselineFunc : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public float Invoke(IntPtr unmanagedNodePtr, float width, float height)
public IAsyncResult BeginInvoke(IntPtr unmanagedNodePtr, float width, float height, AsyncCallback callback, object object)
public float EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.YogaConfig : object {
internal YogaConfig Default
private IntPtr _ygConfig
private Logger _logger
internal IntPtr Handle
public Logger Logger
public bool UseWebDefaults
public float PointScaleFactor
private void .ctor(IntPtr ygConfig)
protected void Finalize()
internal IntPtr get_Handle()
public Logger get_Logger()
public void set_Logger(Logger value)
public void SetExperimentalFeatureEnabled(YogaExperimentalFeature feature, bool enabled)
public bool IsExperimentalFeatureEnabled(YogaExperimentalFeature feature)
public bool get_UseWebDefaults()
public void set_UseWebDefaults(bool value)
public void set_PointScaleFactor(float value)
public int GetInstanceCount()
public void SetDefaultLogger(Logger logger)
}
internal UnityEngine.Yoga.YogaConstants : object {
public float Undefined
public bool IsUndefined(float value)
public bool IsUndefined(YogaValue value)
}
internal UnityEngine.Yoga.YogaDimension : Enum {
public int value__
public YogaDimension Width
public YogaDimension Height
}
internal UnityEngine.Yoga.YogaDirection : Enum {
public int value__
public YogaDirection Inherit
public YogaDirection LTR
public YogaDirection RTL
}
internal UnityEngine.Yoga.YogaDisplay : Enum {
public int value__
public YogaDisplay Flex
public YogaDisplay None
}
internal UnityEngine.Yoga.YogaEdge : Enum {
public int value__
public YogaEdge Left
public YogaEdge Top
public YogaEdge Right
public YogaEdge Bottom
public YogaEdge Start
public YogaEdge End
public YogaEdge Horizontal
public YogaEdge Vertical
public YogaEdge All
}
internal UnityEngine.Yoga.YogaExperimentalFeature : Enum {
public int value__
public YogaExperimentalFeature WebFlexBasis
}
internal UnityEngine.Yoga.YogaFlexDirection : Enum {
public int value__
public YogaFlexDirection Column
public YogaFlexDirection ColumnReverse
public YogaFlexDirection Row
public YogaFlexDirection RowReverse
}
internal UnityEngine.Yoga.YogaJustify : Enum {
public int value__
public YogaJustify FlexStart
public YogaJustify Center
public YogaJustify FlexEnd
public YogaJustify SpaceBetween
public YogaJustify SpaceAround
}
internal UnityEngine.Yoga.YogaLogger : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr unmanagedConfigPtr, IntPtr unmanagedNotePtr, YogaLogLevel level, string message)
public IAsyncResult BeginInvoke(IntPtr unmanagedConfigPtr, IntPtr unmanagedNotePtr, YogaLogLevel level, string message, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.YogaLogLevel : Enum {
public int value__
public YogaLogLevel Error
public YogaLogLevel Warn
public YogaLogLevel Info
public YogaLogLevel Debug
public YogaLogLevel Verbose
public YogaLogLevel Fatal
}
internal UnityEngine.Yoga.YogaMeasureFunc : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public YogaSize Invoke(IntPtr unmanagedNodePtr, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode)
public IAsyncResult BeginInvoke(IntPtr unmanagedNodePtr, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, AsyncCallback callback, object object)
public YogaSize EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.YogaMeasureMode : Enum {
public int value__
public YogaMeasureMode Undefined
public YogaMeasureMode Exactly
public YogaMeasureMode AtMost
}
internal UnityEngine.Yoga.YogaNode : object {
internal IntPtr _ygNode
private YogaConfig _config
private WeakReference _parent
private List`1<YogaNode> _children
private MeasureFunction _measureFunction
private BaselineFunction _baselineFunction
private object _data
public YogaValue Left
public YogaValue Top
public YogaValue Right
public YogaValue Bottom
public YogaValue Start
public YogaValue End
public YogaValue MarginLeft
public YogaValue MarginTop
public YogaValue MarginRight
public YogaValue MarginBottom
public YogaValue MarginStart
public YogaValue MarginEnd
public YogaValue MarginHorizontal
public YogaValue MarginVertical
public YogaValue Margin
public YogaValue PaddingLeft
public YogaValue PaddingTop
public YogaValue PaddingRight
public YogaValue PaddingBottom
public YogaValue PaddingStart
public YogaValue PaddingEnd
public YogaValue PaddingHorizontal
public YogaValue PaddingVertical
public YogaValue Padding
public float BorderLeftWidth
public float BorderTopWidth
public float BorderRightWidth
public float BorderBottomWidth
public float BorderStartWidth
public float BorderEndWidth
public float BorderWidth
public float LayoutMarginLeft
public float LayoutMarginTop
public float LayoutMarginRight
public float LayoutMarginBottom
public float LayoutMarginStart
public float LayoutMarginEnd
public float LayoutPaddingLeft
public float LayoutPaddingTop
public float LayoutPaddingRight
public float LayoutPaddingBottom
public float LayoutPaddingStart
public float LayoutPaddingEnd
public float ComputedFlexBasis
public bool IsDirty
public bool HasNewLayout
public YogaNode Parent
public bool IsMeasureDefined
public bool IsBaselineDefined
public YogaDirection StyleDirection
public YogaFlexDirection FlexDirection
public YogaJustify JustifyContent
public YogaDisplay Display
public YogaAlign AlignItems
public YogaAlign AlignSelf
public YogaAlign AlignContent
public YogaPositionType PositionType
public YogaWrap Wrap
public float Flex
public float FlexGrow
public float FlexShrink
public YogaValue FlexBasis
public YogaValue Width
public YogaValue Height
public YogaValue MaxWidth
public YogaValue MaxHeight
public YogaValue MinWidth
public YogaValue MinHeight
public float AspectRatio
public float LayoutX
public float LayoutY
public float LayoutRight
public float LayoutBottom
public float LayoutWidth
public float LayoutHeight
public YogaDirection LayoutDirection
public YogaOverflow Overflow
public object Data
public YogaNode Item
public int Count
public YogaValue get_Left()
public void set_Left(YogaValue value)
public YogaValue get_Top()
public void set_Top(YogaValue value)
public YogaValue get_Right()
public void set_Right(YogaValue value)
public YogaValue get_Bottom()
public void set_Bottom(YogaValue value)
public YogaValue get_Start()
public void set_Start(YogaValue value)
public YogaValue get_End()
public void set_End(YogaValue value)
private void SetStylePosition(YogaEdge edge, YogaValue value)
public YogaValue get_MarginLeft()
public void set_MarginLeft(YogaValue value)
public YogaValue get_MarginTop()
public void set_MarginTop(YogaValue value)
public YogaValue get_MarginRight()
public void set_MarginRight(YogaValue value)
public YogaValue get_MarginBottom()
public void set_MarginBottom(YogaValue value)
public YogaValue get_MarginStart()
public void set_MarginStart(YogaValue value)
public YogaValue get_MarginEnd()
public void set_MarginEnd(YogaValue value)
public YogaValue get_MarginHorizontal()
public void set_MarginHorizontal(YogaValue value)
public YogaValue get_MarginVertical()
public void set_MarginVertical(YogaValue value)
public YogaValue get_Margin()
public void set_Margin(YogaValue value)
private void SetStyleMargin(YogaEdge edge, YogaValue value)
public YogaValue get_PaddingLeft()
public void set_PaddingLeft(YogaValue value)
public YogaValue get_PaddingTop()
public void set_PaddingTop(YogaValue value)
public YogaValue get_PaddingRight()
public void set_PaddingRight(YogaValue value)
public YogaValue get_PaddingBottom()
public void set_PaddingBottom(YogaValue value)
public YogaValue get_PaddingStart()
public void set_PaddingStart(YogaValue value)
public YogaValue get_PaddingEnd()
public void set_PaddingEnd(YogaValue value)
public YogaValue get_PaddingHorizontal()
public void set_PaddingHorizontal(YogaValue value)
public YogaValue get_PaddingVertical()
public void set_PaddingVertical(YogaValue value)
public YogaValue get_Padding()
public void set_Padding(YogaValue value)
private void SetStylePadding(YogaEdge edge, YogaValue value)
public float get_BorderLeftWidth()
public void set_BorderLeftWidth(float value)
public float get_BorderTopWidth()
public void set_BorderTopWidth(float value)
public float get_BorderRightWidth()
public void set_BorderRightWidth(float value)
public float get_BorderBottomWidth()
public void set_BorderBottomWidth(float value)
public float get_BorderStartWidth()
public void set_BorderStartWidth(float value)
public float get_BorderEndWidth()
public void set_BorderEndWidth(float value)
public float get_BorderWidth()
public void set_BorderWidth(float value)
public float get_LayoutMarginLeft()
public float get_LayoutMarginTop()
public float get_LayoutMarginRight()
public float get_LayoutMarginBottom()
public float get_LayoutMarginStart()
public float get_LayoutMarginEnd()
public float get_LayoutPaddingLeft()
public float get_LayoutPaddingTop()
public float get_LayoutPaddingRight()
public float get_LayoutPaddingBottom()
public float get_LayoutPaddingStart()
public float get_LayoutPaddingEnd()
public float get_ComputedFlexBasis()
public void .ctor(YogaConfig config)
public void .ctor(YogaNode srcNode)
protected void Finalize()
public void Reset()
public bool get_IsDirty()
public void MarkDirty()
public bool get_HasNewLayout()
public void MarkHasNewLayout()
public YogaNode get_Parent()
public bool get_IsMeasureDefined()
public bool get_IsBaselineDefined()
public void CopyStyle(YogaNode srcNode)
public YogaDirection get_StyleDirection()
public void set_StyleDirection(YogaDirection value)
public YogaFlexDirection get_FlexDirection()
public void set_FlexDirection(YogaFlexDirection value)
public YogaJustify get_JustifyContent()
public void set_JustifyContent(YogaJustify value)
public YogaDisplay get_Display()
public void set_Display(YogaDisplay value)
public YogaAlign get_AlignItems()
public void set_AlignItems(YogaAlign value)
public YogaAlign get_AlignSelf()
public void set_AlignSelf(YogaAlign value)
public YogaAlign get_AlignContent()
public void set_AlignContent(YogaAlign value)
public YogaPositionType get_PositionType()
public void set_PositionType(YogaPositionType value)
public YogaWrap get_Wrap()
public void set_Wrap(YogaWrap value)
public void set_Flex(float value)
public float get_FlexGrow()
public void set_FlexGrow(float value)
public float get_FlexShrink()
public void set_FlexShrink(float value)
public YogaValue get_FlexBasis()
public void set_FlexBasis(YogaValue value)
public YogaValue get_Width()
public void set_Width(YogaValue value)
public YogaValue get_Height()
public void set_Height(YogaValue value)
public YogaValue get_MaxWidth()
public void set_MaxWidth(YogaValue value)
public YogaValue get_MaxHeight()
public void set_MaxHeight(YogaValue value)
public YogaValue get_MinWidth()
public void set_MinWidth(YogaValue value)
public YogaValue get_MinHeight()
public void set_MinHeight(YogaValue value)
public float get_AspectRatio()
public void set_AspectRatio(float value)
public float get_LayoutX()
public float get_LayoutY()
public float get_LayoutRight()
public float get_LayoutBottom()
public float get_LayoutWidth()
public float get_LayoutHeight()
public YogaDirection get_LayoutDirection()
public YogaOverflow get_Overflow()
public void set_Overflow(YogaOverflow value)
public object get_Data()
public void set_Data(object value)
public YogaNode get_Item(int index)
public int get_Count()
public void MarkLayoutSeen()
public bool ValuesEqual(float f1, float f2)
public void Insert(int index, YogaNode node)
public void RemoveAt(int index)
public void AddChild(YogaNode child)
public void RemoveChild(YogaNode child)
public void Clear()
public int IndexOf(YogaNode node)
public void SetMeasureFunction(MeasureFunction measureFunction)
public void SetBaselineFunction(BaselineFunction baselineFunction)
public void CalculateLayout(float width, float height)
public YogaSize MeasureInternal(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode)
public float BaselineInternal(YogaNode node, float width, float height)
public string Print(YogaPrintOptions options)
public IEnumerator`1<YogaNode> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int GetInstanceCount()
}
internal UnityEngine.Yoga.YogaNodeType : Enum {
public int value__
public YogaNodeType Default
public YogaNodeType Text
}
internal UnityEngine.Yoga.YogaOverflow : Enum {
public int value__
public YogaOverflow Visible
public YogaOverflow Hidden
public YogaOverflow Scroll
}
internal UnityEngine.Yoga.YogaPositionType : Enum {
public int value__
public YogaPositionType Relative
public YogaPositionType Absolute
}
internal UnityEngine.Yoga.YogaPrintOptions : Enum {
public int value__
public YogaPrintOptions Layout
public YogaPrintOptions Style
public YogaPrintOptions Children
}
internal UnityEngine.Yoga.YogaSize : ValueType {
public float width
public float height
}
internal UnityEngine.Yoga.YogaUnit : Enum {
public int value__
public YogaUnit Undefined
public YogaUnit Point
public YogaUnit Percent
public YogaUnit Auto
}
internal UnityEngine.Yoga.YogaValue : ValueType {
private float value
private YogaUnit unit
public YogaUnit Unit
public float Value
public YogaUnit get_Unit()
public float get_Value()
public YogaValue Point(float value)
public bool Equals(YogaValue other)
public bool Equals(object obj)
public int GetHashCode()
public YogaValue Undefined()
public YogaValue Auto()
public YogaValue Percent(float value)
public YogaValue op_Implicit(float pointValue)
internal YogaValue MarshalValue(YogaValue value)
}
internal UnityEngine.Yoga.YogaValueExtensions : object {
public YogaValue Percent(float value)
public YogaValue Pt(float value)
public YogaValue Percent(int value)
public YogaValue Pt(int value)
}
internal UnityEngine.Yoga.YogaWrap : Enum {
public int value__
public YogaWrap NoWrap
public YogaWrap Wrap
public YogaWrap WrapReverse
}
