public abstract class UnityEngine.UIElements.AbstractProgressBar : BindableElement {
    public static string ussClassName;
    public static string containerUssClassName;
    public static string titleUssClassName;
    public static string titleContainerUssClassName;
    public static string progressUssClassName;
    public static string backgroundUssClassName;
    private VisualElement m_Background;
    private VisualElement m_Progress;
    private Label m_Title;
    private float m_LowValue;
    private float m_HighValue;
    private float m_Value;
    private static float k_MinVisibleProgress;
    public string title { get; public set; }
    public float lowValue { get; public set; }
    public float highValue { get; public set; }
    public float value { get; public set; }
    private static AbstractProgressBar();
    public string get_title();
    public void set_title(string value);
    public float get_lowValue();
    public void set_lowValue(float value);
    public float get_highValue();
    public void set_highValue(float value);
    private void OnGeometryChanged(GeometryChangedEvent e);
    public virtual float get_value();
    public virtual void set_value(float value);
    public sealed virtual void SetValueWithoutNotify(float newValue);
    private void SetProgress(float p);
    private float CalculateProgressWidth(float width);
}
internal enum UnityEngine.UIElements.AddressMode : Enum {
    public int value__;
    public static AddressMode Wrap;
    public static AddressMode Clamp;
    public static AddressMode Mirror;
}
public enum UnityEngine.UIElements.Align : Enum {
    public int value__;
    public static Align Auto;
    public static Align FlexStart;
    public static Align Center;
    public static Align FlexEnd;
    public static Align Stretch;
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.AlignmentUtils : object {
    internal static float RoundToPixelGrid(float v, float pixelsPerPoint, float offset);
    internal static float CeilToPixelGrid(float v, float pixelsPerPoint, float offset);
    internal static float FloorToPixelGrid(float v, float pixelsPerPoint, float offset);
    [ExtensionAttribute]
internal static float RoundToPanelPixelSize(VisualElement ve, float v);
}
public enum UnityEngine.UIElements.AlternatingRowBackground : Enum {
    public int value__;
    public static AlternatingRowBackground None;
    public static AlternatingRowBackground ContentOnly;
    public static AlternatingRowBackground All;
}
internal class UnityEngine.UIElements.AncestorFilter : object {
    private CountingBloomFilter m_CountingBloomFilter;
    private Stack`1<int> m_HashStack;
    private void AddHash(int hash);
    public bool IsCandidate(StyleComplexSelector complexSel);
    public void PushElement(VisualElement element);
    public void PopElement();
}
public class UnityEngine.UIElements.Angle : ValueType {
    private float m_Value;
    private Unit m_Unit;
    public float value { get; public set; }
    public AngleUnit unit { get; public set; }
    public Angle(float value);
    public Angle(float value, AngleUnit unit);
    private Angle(float value, Unit unit);
    public static Angle Degrees(float value);
    public static Angle Gradians(float value);
    public static Angle Radians(float value);
    public static Angle Turns(float value);
    internal static Angle None();
    public float get_value();
    public void set_value(float value);
    public AngleUnit get_unit();
    public void set_unit(AngleUnit value);
    internal bool IsNone();
    public float ToDegrees();
    public float ToGradians();
    public float ToRadians();
    public float ToTurns();
    internal void ConvertTo(AngleUnit newUnit);
    public static Angle op_Implicit(float value);
    public static bool op_Equality(Angle lhs, Angle rhs);
    public static bool op_Inequality(Angle lhs, Angle rhs);
    public sealed virtual bool Equals(Angle other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum UnityEngine.UIElements.AngleUnit : Enum {
    public int value__;
    public static AngleUnit Degree;
    public static AngleUnit Gradian;
    public static AngleUnit Radian;
    public static AngleUnit Turn;
}
public enum UnityEngine.UIElements.ArcDirection : Enum {
    public int value__;
    public static ArcDirection Clockwise;
    public static ArcDirection CounterClockwise;
}
internal abstract class UnityEngine.UIElements.AtlasBase : object {
    internal TextureRegistry textureRegistry;
    public virtual bool TryGetAtlas(VisualElement ctx, Texture2D src, TextureId& atlas, RectInt& atlasRect);
    public virtual void ReturnAtlas(VisualElement ctx, Texture2D src, TextureId atlas);
    public virtual void Reset();
    protected virtual void OnAssignedToPanel(IPanel panel);
    protected virtual void OnRemovedFromPanel(IPanel panel);
    protected virtual void OnUpdateDynamicTextures(IPanel panel);
    internal void InvokeAssignedToPanel(IPanel panel);
    internal void InvokeRemovedFromPanel(IPanel panel);
    internal void InvokeUpdateDynamicTextures(IPanel panel);
    protected static void RepaintTexturedElements(IPanel panel);
    protected TextureId AllocateDynamicTexture();
    protected void FreeDynamicTexture(TextureId id);
    protected void SetDynamicTexture(TextureId id, Texture texture);
}
public class UnityEngine.UIElements.AttachToPanelEvent : PanelChangedEventBase`1<AttachToPanelEvent> {
    private static AttachToPanelEvent();
}
public class UnityEngine.UIElements.Background : ValueType {
    private Texture2D m_Texture;
    private Sprite m_Sprite;
    private RenderTexture m_RenderTexture;
    private VectorImage m_VectorImage;
    public Texture2D texture { get; public set; }
    public Sprite sprite { get; public set; }
    public RenderTexture renderTexture { get; public set; }
    public VectorImage vectorImage { get; public set; }
    internal static IEnumerable`1<Type> allowedAssetTypes { get; }
    [ObsoleteAttribute("Use Background.FromTexture2D instead")]
public Background(Texture2D t);
    public Texture2D get_texture();
    public void set_texture(Texture2D value);
    public Sprite get_sprite();
    public void set_sprite(Sprite value);
    public RenderTexture get_renderTexture();
    public void set_renderTexture(RenderTexture value);
    public VectorImage get_vectorImage();
    public void set_vectorImage(VectorImage value);
    public static Background FromTexture2D(Texture2D t);
    public static Background FromRenderTexture(RenderTexture rt);
    public static Background FromSprite(Sprite s);
    public static Background FromVectorImage(VectorImage vi);
    internal static Background FromObject(object obj);
    [IteratorStateMachineAttribute("UnityEngine.UIElements.Background/<get_allowedAssetTypes>d__23")]
internal static IEnumerable`1<Type> get_allowedAssetTypes();
    public static bool op_Equality(Background lhs, Background rhs);
    public static bool op_Inequality(Background lhs, Background rhs);
    public static Background op_Implicit(Texture2D v);
    public sealed virtual bool Equals(Background other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.BackgroundPosition : ValueType {
    public BackgroundPositionKeyword keyword;
    public Length offset;
    public BackgroundPosition(BackgroundPositionKeyword keyword);
    public BackgroundPosition(BackgroundPositionKeyword keyword, Length offset);
    internal static BackgroundPosition Initial();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BackgroundPosition other);
    public virtual int GetHashCode();
    public static bool op_Equality(BackgroundPosition style1, BackgroundPosition style2);
    public static bool op_Inequality(BackgroundPosition style1, BackgroundPosition style2);
    public virtual string ToString();
}
public enum UnityEngine.UIElements.BackgroundPositionKeyword : Enum {
    public int value__;
    public static BackgroundPositionKeyword Center;
    public static BackgroundPositionKeyword Top;
    public static BackgroundPositionKeyword Bottom;
    public static BackgroundPositionKeyword Left;
    public static BackgroundPositionKeyword Right;
}
internal static class UnityEngine.UIElements.BackgroundPropertyHelper : object {
    public static BackgroundPosition ConvertScaleModeToBackgroundPosition(ScaleMode scaleMode);
    public static BackgroundRepeat ConvertScaleModeToBackgroundRepeat(ScaleMode scaleMode);
    public static BackgroundSize ConvertScaleModeToBackgroundSize(ScaleMode scaleMode);
    public static ScaleMode ResolveUnityBackgroundScaleMode(BackgroundPosition backgroundPositionX, BackgroundPosition backgroundPositionY, BackgroundRepeat backgroundRepeat, BackgroundSize backgroundSize, Boolean& valid);
}
public class UnityEngine.UIElements.BackgroundRepeat : ValueType {
    public Repeat x;
    public Repeat y;
    public BackgroundRepeat(Repeat repeatX, Repeat repeatY);
    internal static BackgroundRepeat Initial();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BackgroundRepeat other);
    public virtual int GetHashCode();
    public static bool op_Equality(BackgroundRepeat style1, BackgroundRepeat style2);
    public static bool op_Inequality(BackgroundRepeat style1, BackgroundRepeat style2);
    public virtual string ToString();
}
public class UnityEngine.UIElements.BackgroundSize : ValueType {
    private BackgroundSizeType m_SizeType;
    private Length m_X;
    private Length m_Y;
    public BackgroundSizeType sizeType { get; public set; }
    public Length x { get; public set; }
    public Length y { get; public set; }
    public BackgroundSize(Length sizeX, Length sizeY);
    public BackgroundSize(BackgroundSizeType sizeType);
    public BackgroundSizeType get_sizeType();
    public void set_sizeType(BackgroundSizeType value);
    public Length get_x();
    public void set_x(Length value);
    public Length get_y();
    public void set_y(Length value);
    internal static BackgroundSize Initial();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BackgroundSize other);
    public virtual int GetHashCode();
    public static bool op_Equality(BackgroundSize style1, BackgroundSize style2);
    public static bool op_Inequality(BackgroundSize style1, BackgroundSize style2);
    public virtual string ToString();
}
public enum UnityEngine.UIElements.BackgroundSizeType : Enum {
    public int value__;
    public static BackgroundSizeType Length;
    public static BackgroundSizeType Cover;
    public static BackgroundSizeType Contain;
}
public abstract class UnityEngine.UIElements.BaseBoolField : BaseField`1<bool> {
    protected Label m_Label;
    protected VisualElement m_CheckMark;
    internal Clickable m_Clickable;
    private string m_OriginalText;
    internal Label boolFieldLabelElement { get; }
    public string text { get; public set; }
    public BaseBoolField(string label);
    internal Label get_boolFieldLabelElement();
    private void OnNavigationSubmit(NavigationSubmitEvent evt);
    public string get_text();
    public void set_text(string value);
    protected virtual void InitLabel();
    public virtual void SetValueWithoutNotify(bool newValue);
    private void OnClickEvent(EventBase evt);
    protected virtual void ToggleValue();
    protected virtual void UpdateMixedValueContent();
    internal virtual void RegisterEditingCallbacks();
    internal virtual void UnregisterEditingCallbacks();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public abstract class UnityEngine.UIElements.BaseCompositeField`3 : BaseField`1<TValueType> {
    private List`1<TField> m_Fields;
    private bool m_ShouldUpdateDisplay;
    private bool m_ForceUpdateDisplay;
    private int m_PropertyIndex;
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public static string spacerUssClassName;
    public static string multilineVariantUssClassName;
    public static string fieldGroupUssClassName;
    public static string fieldUssClassName;
    public static string firstFieldVariantUssClassName;
    public static string twoLinesVariantUssClassName;
    internal List`1<TField> fields { get; }
    internal int propertyIndex { get; internal set; }
    internal bool forceUpdateDisplay { get; internal set; }
    protected BaseCompositeField`3(string label, int fieldsByLine);
    private static BaseCompositeField`3();
    private VisualElement GetSpacer();
    internal List`1<TField> get_fields();
    internal abstract virtual FieldDescription[] DescribeFields();
    internal int get_propertyIndex();
    internal void set_propertyIndex(int value);
    internal bool get_forceUpdateDisplay();
    internal void set_forceUpdateDisplay(bool value);
    private void UpdateDisplay();
    public virtual void SetValueWithoutNotify(TValueType newValue);
    internal virtual void OnViewDataReady();
    protected virtual void UpdateMixedValueContent();
}
public abstract class UnityEngine.UIElements.BaseField`1 : BindableElement {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public static string noLabelVariantUssClassName;
    public static string labelDraggerVariantUssClassName;
    public static string mixedValueLabelUssClassName;
    public static string alignedFieldUssClassName;
    private static string inspectorFieldUssClassName;
    protected internal static string mixedValueString;
    protected internal static PropertyName serializedPropertyCopyName;
    private static CustomStyleProperty`1<float> s_LabelWidthRatioProperty;
    private static CustomStyleProperty`1<float> s_LabelExtraPaddingProperty;
    private static CustomStyleProperty`1<float> s_LabelBaseMinWidthProperty;
    private static CustomStyleProperty`1<float> s_LabelExtraContextWidthProperty;
    private float m_LabelWidthRatio;
    private float m_LabelExtraPadding;
    private float m_LabelBaseMinWidth;
    private float m_LabelExtraContextWidth;
    private VisualElement m_VisualInput;
    [SerializeField]
private TValueType m_Value;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<TValueType, TValueType> onValidateValue;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Label <labelElement>k__BackingField;
    private bool m_ShowMixedValue;
    private Label m_MixedValueLabel;
    private bool m_SkipValidation;
    private VisualElement m_CachedContextWidthElement;
    private VisualElement m_CachedInspectorElement;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action <UnityEngine.UIElements.IEditableElement.editingStarted>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action <UnityEngine.UIElements.IEditableElement.editingEnded>k__BackingField;
    internal VisualElement visualInput { get; internal set; }
    protected TValueType rawValue { get; protected set; }
    public TValueType value { get; public set; }
    public Label labelElement { get; private set; }
    public string label { get; public set; }
    public bool showMixedValue { get; public set; }
    protected Label mixedValueLabel { get; }
    private Action UnityEngine.UIElements.IEditableElement.editingStarted { get; private set; }
    private Action UnityEngine.UIElements.IEditableElement.editingEnded { get; private set; }
    internal BaseField`1(string label);
    protected BaseField`1(string label, VisualElement visualInput);
    private static BaseField`1();
    internal VisualElement get_visualInput();
    internal void set_visualInput(VisualElement value);
    protected TValueType get_rawValue();
    protected void set_rawValue(TValueType value);
    [CompilerGeneratedAttribute]
internal void add_onValidateValue(Func`2<TValueType, TValueType> value);
    [CompilerGeneratedAttribute]
internal void remove_onValidateValue(Func`2<TValueType, TValueType> value);
    public virtual TValueType get_value();
    public virtual void set_value(TValueType value);
    [CompilerGeneratedAttribute]
public sealed virtual Label get_labelElement();
    [CompilerGeneratedAttribute]
private void set_labelElement(Label value);
    public sealed virtual string get_label();
    public void set_label(string value);
    public sealed virtual bool get_showMixedValue();
    public sealed virtual void set_showMixedValue(bool value);
    protected Label get_mixedValueLabel();
    [CompilerGeneratedAttribute]
private sealed virtual override Action UnityEngine.UIElements.IEditableElement.get_editingStarted();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.IEditableElement.set_editingStarted(Action value);
    [CompilerGeneratedAttribute]
private sealed virtual override Action UnityEngine.UIElements.IEditableElement.get_editingEnded();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.IEditableElement.set_editingEnded(Action value);
    internal virtual bool EqualsCurrentValue(TValueType value);
    private void OnAttachToPanel(AttachToPanelEvent e);
    private void OnDetachFromPanel(DetachFromPanelEvent e);
    internal virtual void RegisterEditingCallbacks();
    internal virtual void UnregisterEditingCallbacks();
    internal void StartEditing(EventBase e);
    internal void EndEditing(EventBase e);
    private void OnCustomStyleResolved(CustomStyleResolvedEvent evt);
    private void OnInspectorFieldGeometryChanged(GeometryChangedEvent e);
    private void AlignLabel();
    internal TValueType ValidatedValue(TValueType value);
    protected virtual void UpdateMixedValueContent();
    public virtual void SetValueWithoutNotify(TValueType newValue);
    internal void SetValueWithoutValidation(TValueType newValue);
    internal virtual void OnViewDataReady();
    internal virtual Rect GetTooltipRect();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public abstract class UnityEngine.UIElements.BaseFieldMouseDragger : object {
    public void SetDragZone(VisualElement dragElement);
    public abstract virtual void SetDragZone(VisualElement dragElement, Rect hotZone);
}
public class UnityEngine.UIElements.BaseFieldTraits`2 : UxmlTraits<TValueType> {
    private TValueUxmlAttributeType m_Value;
    public virtual void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc);
}
public abstract class UnityEngine.UIElements.BaseListView : BaseVerticalCollectionView {
    private static string k_SizeFieldLabel;
    private static int k_FoldoutTabIndex;
    private static int k_ArraySizeFieldTabIndex;
    private bool m_ShowBoundCollectionSize;
    private bool m_ShowFoldoutHeader;
    private string m_HeaderTitle;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<IEnumerable`1<int>> itemsAdded;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<int>> itemsRemoved;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action itemsSourceSizeChanged;
    private Label m_ListViewLabel;
    private Foldout m_Foldout;
    private TextField m_ArraySizeField;
    private bool m_IsOverMultiEditLimit;
    private int m_MaxMultiEditCount;
    private VisualElement m_Footer;
    private Button m_AddButton;
    private Button m_RemoveButton;
    private Action`1<IEnumerable`1<int>> m_ItemAddedCallback;
    private Action`1<IEnumerable`1<int>> m_ItemRemovedCallback;
    private Action m_ItemsSourceSizeChangedCallback;
    private ListViewReorderMode m_ReorderMode;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action reorderModeChanged;
    public static string ussClassName;
    public static string itemUssClassName;
    public static string emptyLabelUssClassName;
    public static string overMaxMultiEditLimitClassName;
    public static string reorderableUssClassName;
    public static string reorderableItemUssClassName;
    public static string reorderableItemContainerUssClassName;
    public static string reorderableItemHandleUssClassName;
    public static string reorderableItemHandleBarUssClassName;
    public static string footerUssClassName;
    public static string foldoutHeaderUssClassName;
    public static string arraySizeFieldUssClassName;
    public static string arraySizeFieldWithHeaderUssClassName;
    public static string arraySizeFieldWithFooterUssClassName;
    public static string listViewWithHeaderUssClassName;
    public static string listViewWithFooterUssClassName;
    public static string scrollViewWithFooterUssClassName;
    public static string footerAddButtonName;
    public static string footerRemoveButtonName;
    private string m_MaxMultiEditStr;
    private static string k_EmptyListStr;
    public bool showBoundCollectionSize { get; public set; }
    public bool showFoldoutHeader { get; public set; }
    public string headerTitle { get; public set; }
    public bool showAddRemoveFooter { get; public set; }
    internal Foldout headerFoldout { get; }
    internal TextField arraySizeField { get; }
    internal VisualElement footer { get; }
    public BaseListViewController viewController { get; }
    public ListViewReorderMode reorderMode { get; public set; }
    public BaseListView(IList itemsSource, float itemHeight);
    private static BaseListView();
    public bool get_showBoundCollectionSize();
    public void set_showBoundCollectionSize(bool value);
    public bool get_showFoldoutHeader();
    public void set_showFoldoutHeader(bool value);
    internal void SetupArraySizeField();
    public string get_headerTitle();
    public void set_headerTitle(string value);
    public bool get_showAddRemoveFooter();
    public void set_showAddRemoveFooter(bool value);
    internal Foldout get_headerFoldout();
    private void EnableFooter(bool enabled);
    [CompilerGeneratedAttribute]
public void add_itemsAdded(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
public void remove_itemsAdded(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
public void add_itemsRemoved(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
public void remove_itemsRemoved(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
internal void add_itemsSourceSizeChanged(Action value);
    [CompilerGeneratedAttribute]
internal void remove_itemsSourceSizeChanged(Action value);
    private void AddItems(int itemCount);
    private void RemoveItems(List`1<int> indices);
    private void OnArraySizeFieldChanged(ChangeEvent`1<string> evt);
    internal void UpdateArraySizeField();
    internal void UpdateListViewLabel();
    private void OnAddClicked();
    private void OnRemoveClicked();
    internal TextField get_arraySizeField();
    internal void SetOverMaxMultiEditLimit(bool isOverLimit, int maxMultiEditCount);
    internal VisualElement get_footer();
    public BaseListViewController get_viewController();
    private protected virtual void CreateVirtualizationController();
    public virtual void SetViewController(CollectionViewController controller);
    private void OnItemAdded(IEnumerable`1<int> indices);
    private void OnItemsRemoved(IEnumerable`1<int> indices);
    private void OnItemsSourceSizeChanged();
    [CompilerGeneratedAttribute]
internal void add_reorderModeChanged(Action value);
    [CompilerGeneratedAttribute]
internal void remove_reorderModeChanged(Action value);
    public ListViewReorderMode get_reorderMode();
    public void set_reorderMode(ListViewReorderMode value);
    internal virtual ListViewDragger CreateDragger();
    internal virtual ICollectionDragAndDropController CreateDragAndDropController();
    private protected virtual void PostRefresh();
    private protected virtual bool HandleItemNavigation(bool moveIn, bool altPressed);
    [CompilerGeneratedAttribute]
private void <OnAddClicked>b__38_0();
}
public abstract class UnityEngine.UIElements.BaseListViewController : CollectionViewController {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action itemsSourceSizeChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<IEnumerable`1<int>> itemsAdded;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<IEnumerable`1<int>> itemsRemoved;
    protected BaseListView baseListView { get; }
    [CompilerGeneratedAttribute]
public void add_itemsSourceSizeChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_itemsSourceSizeChanged(Action value);
    [CompilerGeneratedAttribute]
public void add_itemsAdded(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
public void remove_itemsAdded(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
public void add_itemsRemoved(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
public void remove_itemsRemoved(Action`1<IEnumerable`1<int>> value);
    protected BaseListView get_baseListView();
    internal virtual void InvokeMakeItem(ReusableCollectionItem reusableItem);
    internal void PostInitRegistration(ReusableListViewItem listItem);
    internal virtual void InvokeBindItem(ReusableCollectionItem reusableItem, int index);
    public virtual bool NeedsDragHandle(int index);
    public virtual void AddItems(int itemCount);
    public virtual void Move(int index, int newIndex);
    public virtual void RemoveItem(int index);
    public virtual void RemoveItems(List`1<int> indices);
    internal virtual void RemoveItems(int itemCount);
    public virtual void ClearItems();
    protected void RaiseOnSizeChanged();
    protected void RaiseItemsAdded(IEnumerable`1<int> indices);
    protected void RaiseItemsRemoved(IEnumerable`1<int> indices);
    private static Array AddToArray(Array source, int itemCount);
    private static Array RemoveFromArray(Array source, List`1<int> indicesToRemove);
    private void Swap(int lhs, int rhs);
    private void EnsureItemSourceCanBeResized();
    [CompilerGeneratedAttribute]
internal static bool <AddItems>g__IsGenericList|15_0(Type t);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public abstract class UnityEngine.UIElements.BasePopupField`2 : BaseField`1<TValueType> {
    internal List`1<TValueChoice> m_Choices;
    private TextElement m_TextElement;
    private VisualElement m_ArrowElement;
    internal Func`2<TValueChoice, string> m_FormatSelectedValueCallback;
    internal Func`2<TValueChoice, string> m_FormatListItemCallback;
    internal Func`1<IGenericMenu> createMenuCallback;
    public static string ussClassName;
    public static string textUssClassName;
    public static string arrowUssClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    protected TextElement textElement { get; }
    public List`1<TValueChoice> choices { get; public set; }
    public string text { get; }
    internal BasePopupField`2(string label);
    private static BasePopupField`2();
    protected TextElement get_textElement();
    internal abstract virtual string GetValueToDisplay();
    internal abstract virtual string GetListItemToDisplay(TValueType item);
    internal abstract virtual void AddMenuItems(IGenericMenu menu);
    public virtual List`1<TValueChoice> get_choices();
    public virtual void set_choices(List`1<TValueChoice> value);
    public virtual void SetValueWithoutNotify(TValueType newValue);
    public string get_text();
    private void OnPointerDownEvent(PointerDownEvent evt);
    private void OnPointerMoveEvent(PointerMoveEvent evt);
    private bool ContainsPointer(int pointerId);
    private void ProcessPointerDown(PointerEventBase`1<T> evt);
    private void OnNavigationSubmit(NavigationSubmitEvent evt);
    internal void ShowMenu();
    protected virtual void UpdateMixedValueContent();
}
internal abstract class UnityEngine.UIElements.BaseReorderableDragAndDropController : object {
    protected BaseVerticalCollectionView m_View;
    protected List`1<int> m_SortedSelectedIds;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <enableReordering>k__BackingField;
    public bool enableReordering { get; public set; }
    protected BaseReorderableDragAndDropController(BaseVerticalCollectionView view);
    public sealed virtual IEnumerable`1<int> GetSortedSelectedIds();
    [CompilerGeneratedAttribute]
public virtual bool get_enableReordering();
    [CompilerGeneratedAttribute]
public virtual void set_enableReordering(bool value);
    public virtual bool CanStartDrag(IEnumerable`1<int> itemIds);
    public virtual StartDragArgs SetupDragAndDrop(IEnumerable`1<int> itemIds, bool skipText);
    protected virtual int CompareId(int id1, int id2);
    public abstract virtual DragVisualMode HandleDragAndDrop(IListDragAndDropArgs args);
    public abstract virtual void OnDrop(IListDragAndDropArgs args);
    public virtual void DragCleanup();
    public virtual void HandleAutoExpand(ReusableCollectionItem item, Vector2 pointerPosition);
}
internal abstract class UnityEngine.UIElements.BaseRuntimePanel : Panel {
    private GameObject m_SelectableGameObject;
    private static int s_CurrentRuntimePanelCounter;
    internal int m_RuntimePanelCreationIndex;
    private float m_SortingPriority;
    internal int resolvedSortingIndex;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action destroyed;
    private Shader m_StandardWorldSpaceShader;
    private bool m_DrawToCameras;
    internal RenderTexture targetTexture;
    internal Matrix4x4 panelToWorld;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <targetDisplay>k__BackingField;
    internal static Func`2<Vector2, Vector2> DefaultScreenToPanelSpace;
    private Func`2<Vector2, Vector2> m_ScreenToPanelSpace;
    public GameObject selectableGameObject { get; public set; }
    public float sortingPriority { get; public set; }
    internal Shader standardWorldSpaceShader { get; internal set; }
    internal bool drawToCameras { get; internal set; }
    internal int targetDisplay { get; internal set; }
    internal int screenRenderingWidth { get; }
    internal int screenRenderingHeight { get; }
    public Func`2<Vector2, Vector2> screenToPanelSpace { get; public set; }
    protected BaseRuntimePanel(ScriptableObject ownerObject, EventDispatcher dispatcher);
    private static BaseRuntimePanel();
    public sealed virtual GameObject get_selectableGameObject();
    public sealed virtual void set_selectableGameObject(GameObject value);
    public float get_sortingPriority();
    public void set_sortingPriority(float value);
    [CompilerGeneratedAttribute]
public void add_destroyed(Action value);
    [CompilerGeneratedAttribute]
public void remove_destroyed(Action value);
    protected virtual void Dispose(bool disposing);
    internal virtual Shader get_standardWorldSpaceShader();
    internal virtual void set_standardWorldSpaceShader(Shader value);
    internal bool get_drawToCameras();
    internal void set_drawToCameras(bool value);
    [CompilerGeneratedAttribute]
internal int get_targetDisplay();
    [CompilerGeneratedAttribute]
internal void set_targetDisplay(int value);
    internal int get_screenRenderingWidth();
    internal int get_screenRenderingHeight();
    internal static int getScreenRenderingHeight(int display);
    internal static int getScreenRenderingWidth(int display);
    public virtual void Repaint(Event e);
    public Func`2<Vector2, Vector2> get_screenToPanelSpace();
    public void set_screenToPanelSpace(Func`2<Vector2, Vector2> value);
    internal Vector2 ScreenToPanel(Vector2 screen);
    internal bool ScreenToPanel(Vector2 screenPosition, Vector2 screenDelta, Vector2& panelPosition, Vector2& panelDelta, bool allowOutside);
    private void AssignPanelToComponents(BaseRuntimePanel panel);
    internal void PointerLeavesPanel(int pointerId, Vector2 position);
    internal void PointerEntersPanel(int pointerId, Vector2 position);
}
public abstract class UnityEngine.UIElements.BaseSlider`1 : BaseField`1<TValueType> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <dragContainer>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <dragElement>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <trackElement>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <dragBorderElement>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TextField <inputTextField>k__BackingField;
    private bool m_IsEditingTextField;
    [SerializeField]
private TValueType m_LowValue;
    [SerializeField]
private TValueType m_HighValue;
    private float m_PageSize;
    private bool m_ShowInputField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <clamped>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClampedDragger`1<TValueType> <clampedDragger>k__BackingField;
    private Rect m_DragElementStartPos;
    private SliderDirection m_Direction;
    private bool m_Inverted;
    internal static float kDefaultPageSize;
    internal static bool kDefaultShowInputField;
    internal static bool kDefaultInverted;
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public static string horizontalVariantUssClassName;
    public static string verticalVariantUssClassName;
    public static string dragContainerUssClassName;
    public static string trackerUssClassName;
    public static string draggerUssClassName;
    public static string draggerBorderUssClassName;
    public static string textFieldClassName;
    internal VisualElement dragContainer { get; private set; }
    internal VisualElement dragElement { get; private set; }
    internal VisualElement trackElement { get; private set; }
    internal VisualElement dragBorderElement { get; private set; }
    internal TextField inputTextField { get; private set; }
    public TValueType lowValue { get; public set; }
    public TValueType highValue { get; public set; }
    public TValueType range { get; }
    public float pageSize { get; public set; }
    public bool showInputField { get; public set; }
    internal bool clamped { get; internal set; }
    internal ClampedDragger`1<TValueType> clampedDragger { get; private set; }
    public TValueType value { get; public set; }
    public SliderDirection direction { get; public set; }
    public bool inverted { get; public set; }
    internal BaseSlider`1(string label, TValueType start, TValueType end, SliderDirection direction, float pageSize);
    private static BaseSlider`1();
    [CompilerGeneratedAttribute]
internal VisualElement get_dragContainer();
    [CompilerGeneratedAttribute]
private void set_dragContainer(VisualElement value);
    [CompilerGeneratedAttribute]
internal VisualElement get_dragElement();
    [CompilerGeneratedAttribute]
private void set_dragElement(VisualElement value);
    [CompilerGeneratedAttribute]
internal VisualElement get_trackElement();
    [CompilerGeneratedAttribute]
private void set_trackElement(VisualElement value);
    [CompilerGeneratedAttribute]
internal VisualElement get_dragBorderElement();
    [CompilerGeneratedAttribute]
private void set_dragBorderElement(VisualElement value);
    [CompilerGeneratedAttribute]
internal TextField get_inputTextField();
    [CompilerGeneratedAttribute]
private void set_inputTextField(TextField value);
    public TValueType get_lowValue();
    public void set_lowValue(TValueType value);
    public TValueType get_highValue();
    public void set_highValue(TValueType value);
    internal void SetHighValueWithoutNotify(TValueType newHighValue);
    public TValueType get_range();
    public virtual float get_pageSize();
    public virtual void set_pageSize(float value);
    public virtual bool get_showInputField();
    public virtual void set_showInputField(bool value);
    [CompilerGeneratedAttribute]
internal bool get_clamped();
    [CompilerGeneratedAttribute]
internal void set_clamped(bool value);
    [CompilerGeneratedAttribute]
internal ClampedDragger`1<TValueType> get_clampedDragger();
    [CompilerGeneratedAttribute]
private void set_clampedDragger(ClampedDragger`1<TValueType> value);
    private TValueType Clamp(TValueType value, TValueType lowBound, TValueType highBound);
    private TValueType GetClampedValue(TValueType newValue);
    public virtual TValueType get_value();
    public virtual void set_value(TValueType value);
    public virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, TValueType startValue);
    private sealed virtual override void UnityEngine.UIElements.IValueField<TValueType>.StartDragging();
    private sealed virtual override void UnityEngine.UIElements.IValueField<TValueType>.StopDragging();
    public virtual void SetValueWithoutNotify(TValueType newValue);
    public SliderDirection get_direction();
    public void set_direction(SliderDirection value);
    public bool get_inverted();
    public void set_inverted(bool value);
    protected static float GetClosestPowerOfTen(float positiveNumber);
    protected static float RoundToMultipleOf(float value, float roundingValue);
    private void ClampValue();
    internal abstract virtual TValueType SliderLerpUnclamped(TValueType a, TValueType b, float interpolant);
    internal abstract virtual float SliderNormalizeValue(TValueType currentValue, TValueType lowerValue, TValueType higherValue);
    internal abstract virtual TValueType SliderRange();
    internal abstract virtual TValueType ParseStringToValue(string previousValue, string newValue);
    internal abstract virtual void ComputeValueFromKey(SliderKey<TValueType> sliderKey, bool isShift);
    private TValueType SliderLerpDirectionalUnclamped(TValueType a, TValueType b, float positionInterpolant);
    private void SetSliderValueFromDrag();
    private void ComputeValueAndDirectionFromDrag(float sliderLength, float dragElementLength, float dragElementPos);
    private void SetSliderValueFromClick();
    private void OnKeyDown(KeyDownEvent evt);
    private void OnNavigationMove(NavigationMoveEvent evt);
    internal virtual void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos);
    public void AdjustDragElement(float factor);
    private void UpdateDragElementPosition(GeometryChangedEvent evt);
    internal virtual void OnViewDataReady();
    private bool SameValues(float a, float b, float epsilon);
    private void UpdateDragElementPosition();
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultAction(EventBase evt);
    private void UpdateTextFieldVisibility();
    private void UpdateTextFieldValue();
    private void OnTextFieldFocusIn(FocusInEvent evt);
    private void OnTextFieldFocusOut(FocusOutEvent evt);
    private void OnInputNavigationMoveEvent(NavigationMoveEvent evt);
    private void OnTextFieldValueChange(ChangeEvent`1<string> evt);
    protected virtual void UpdateMixedValueContent();
    internal virtual void RegisterEditingCallbacks();
    internal virtual void UnregisterEditingCallbacks();
}
public abstract class UnityEngine.UIElements.BaseTreeView : BaseVerticalCollectionView {
    public static string ussClassName;
    public static string itemUssClassName;
    public static string itemToggleUssClassName;
    public static string itemIndentsContainerUssClassName;
    public static string itemIndentUssClassName;
    public static string itemContentContainerUssClassName;
    private bool m_AutoExpand;
    [SerializeField]
private List`1<int> m_ExpandedItemIds;
    public IList itemsSource { get; internal set; }
    public BaseTreeViewController viewController { get; }
    public bool autoExpand { get; public set; }
    internal List`1<int> expandedItemIds { get; internal set; }
    public BaseTreeView(int itemHeight);
    private static BaseTreeView();
    public IList get_itemsSource();
    internal void set_itemsSource(IList value);
    public void SetRootItems(IList`1<TreeViewItemData`1<T>> rootItems);
    internal abstract virtual void SetRootItemsInternal(IList`1<TreeViewItemData`1<T>> rootItems);
    public IEnumerable`1<int> GetRootIds();
    public int GetTreeCount();
    public BaseTreeViewController get_viewController();
    private protected virtual void CreateVirtualizationController();
    public virtual void SetViewController(CollectionViewController controller);
    private void OnItemIndexChanged(int srcIndex, int dstIndex);
    internal virtual ICollectionDragAndDropController CreateDragAndDropController();
    public bool get_autoExpand();
    public void set_autoExpand(bool value);
    internal List`1<int> get_expandedItemIds();
    internal void set_expandedItemIds(List`1<int> value);
    public int GetIdForIndex(int index);
    public int GetParentIdForIndex(int index);
    public IEnumerable`1<int> GetChildrenIdsForIndex(int index);
    public IEnumerable`1<TreeViewItemData`1<T>> GetSelectedItems();
    private protected abstract virtual IEnumerable`1<TreeViewItemData`1<T>> GetSelectedItemsInternal();
    public T GetItemDataForIndex(int index);
    private protected abstract virtual T GetItemDataForIndexInternal(int index);
    public T GetItemDataForId(int id);
    private protected abstract virtual T GetItemDataForIdInternal(int id);
    public void AddItem(TreeViewItemData`1<T> item, int parentId, int childIndex, bool rebuildTree);
    private protected abstract virtual void AddItemInternal(TreeViewItemData`1<T> item, int parentId, int childIndex, bool rebuildTree);
    public bool TryRemoveItem(int id);
    internal virtual void OnViewDataReady();
    private protected virtual bool HandleItemNavigation(bool moveIn, bool altPressed);
    public void SetSelectionById(int id);
    public void SetSelectionById(IEnumerable`1<int> ids);
    public void SetSelectionByIdWithoutNotify(IEnumerable`1<int> ids);
    internal void SetSelectionInternalById(IEnumerable`1<int> ids, bool sendNotification);
    public void AddToSelectionById(int id);
    public void RemoveFromSelectionById(int id);
    private int GetItemIndex(int id, bool expand);
    internal void CopyExpandedStates(int sourceId, int targetId);
    public bool IsExpanded(int id);
    public void CollapseItem(int id, bool collapseAllChildren);
    public void ExpandItem(int id, bool expandAllChildren);
    public void ExpandRootItems();
    public void ExpandAll();
    public void CollapseAll();
    private void OnTreeViewPointerUp(PointerUpEvent evt);
    private bool IsExpandedByIndex(int index);
    private void CollapseItemByIndex(int index, bool collapseAll);
    private void ExpandItemByIndex(int index, bool expandAll);
    [CompilerGeneratedAttribute]
private int <SetSelectionInternalById>b__47_0(int id);
}
public abstract class UnityEngine.UIElements.BaseTreeViewController : CollectionViewController {
    private Dictionary`2<int, TreeItem> m_TreeItems;
    private List`1<int> m_RootIndices;
    private List`1<TreeViewItemWrapper> m_ItemWrappers;
    private HashSet`1<int> m_TreeItemIdsWithItemWrappers;
    private List`1<TreeViewItemWrapper> m_WrapperInsertionList;
    private static ProfilerMarker K_ExpandItemByIndex;
    private static ProfilerMarker k_CreateWrappers;
    protected BaseTreeView baseTreeView { get; }
    public IList itemsSource { get; public set; }
    private static BaseTreeViewController();
    protected BaseTreeView get_baseTreeView();
    public virtual IList get_itemsSource();
    public virtual void set_itemsSource(IList value);
    public void RebuildTree();
    public IEnumerable`1<int> GetRootItemIds();
    public abstract virtual IEnumerable`1<int> GetAllItemIds(IEnumerable`1<int> rootIds);
    public abstract virtual int GetParentId(int id);
    public abstract virtual IEnumerable`1<int> GetChildrenIds(int id);
    public abstract virtual void Move(int id, int newParentId, int childIndex, bool rebuildTree);
    public abstract virtual bool TryRemoveItem(int id, bool rebuildTree);
    internal virtual void InvokeMakeItem(ReusableCollectionItem reusableItem);
    internal virtual void InvokeBindItem(ReusableCollectionItem reusableItem, int index);
    internal virtual void InvokeDestroyItem(ReusableCollectionItem reusableItem);
    internal void PostInitRegistration(ReusableTreeViewItem treeItem);
    private void OnItemPointerUp(PointerUpEvent evt);
    private void OnToggleValueChanged(ChangeEvent`1<bool> evt);
    public virtual int GetTreeItemsCount();
    public virtual int GetIndexForId(int id);
    public virtual int GetIdForIndex(int index);
    public virtual bool HasChildren(int id);
    internal bool Exists(int id);
    public bool HasChildrenByIndex(int index);
    public IEnumerable`1<int> GetChildrenIdsByIndex(int index);
    public int GetChildIndexForId(int id);
    internal int GetIndentationDepth(int id);
    internal int GetIndentationDepthByIndex(int index);
    internal virtual bool CanChangeExpandedState(int id);
    public bool IsExpanded(int id);
    public bool IsExpandedByIndex(int index);
    public void ExpandItemByIndex(int index, bool expandAllChildren, bool refresh);
    public void ExpandItem(int id, bool expandAllChildren, bool refresh);
    public void CollapseItemByIndex(int index, bool collapseAllChildren);
    public void CollapseItem(int id, bool collapseAllChildren);
    public void ExpandAll();
    public void CollapseAll();
    internal void RegenerateWrappers();
    private void CreateWrappers(IEnumerable`1<int> treeViewItemIds, int depth, List`1& wrappers);
    private bool IsIndexValid(int index);
    internal void RaiseItemParentChanged(int id, int newParentId);
}
public abstract class UnityEngine.UIElements.BaseUxmlFactory`2 : object {
    internal TTraits m_Traits;
    public string uxmlName { get; }
    public string uxmlNamespace { get; }
    public string uxmlQualifiedName { get; }
    public Type uxmlType { get; }
    public bool canHaveAnyAttribute { get; }
    public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription { get; }
    public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription { get; }
    public string substituteForTypeName { get; }
    public string substituteForTypeNamespace { get; }
    public string substituteForTypeQualifiedName { get; }
    public virtual string get_uxmlName();
    public virtual string get_uxmlNamespace();
    public virtual string get_uxmlQualifiedName();
    public virtual Type get_uxmlType();
    public sealed virtual bool get_canHaveAnyAttribute();
    public virtual IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription();
    public virtual IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription();
    public virtual string get_substituteForTypeName();
    public virtual string get_substituteForTypeNamespace();
    public virtual string get_substituteForTypeQualifiedName();
    public virtual bool AcceptsAttributeBag(IUxmlAttributes bag, CreationContext cc);
}
public abstract class UnityEngine.UIElements.BaseUxmlTraits : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <canHaveAnyAttribute>k__BackingField;
    public bool canHaveAnyAttribute { get; protected set; }
    public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription { get; }
    public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription { get; }
    [CompilerGeneratedAttribute]
public bool get_canHaveAnyAttribute();
    [CompilerGeneratedAttribute]
protected void set_canHaveAnyAttribute(bool value);
    [IteratorStateMachineAttribute("UnityEngine.UIElements.BaseUxmlTraits/<get_uxmlAttributesDescription>d__6")]
public virtual IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription();
    [IteratorStateMachineAttribute("UnityEngine.UIElements.BaseUxmlTraits/<get_uxmlChildElementsDescription>d__8")]
public virtual IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription();
    [IteratorStateMachineAttribute("UnityEngine.UIElements.BaseUxmlTraits/<GetAllAttributeDescriptionForType>d__9")]
private IEnumerable`1<UxmlAttributeDescription> GetAllAttributeDescriptionForType(Type t);
}
public abstract class UnityEngine.UIElements.BaseVerticalCollectionView : BindableElement {
    private static ProfilerMarker k_RefreshMarker;
    private static ProfilerMarker k_RebuildMarker;
    internal static string internalBindingKey;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<object>> itemsChosen;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<object>> selectionChanged;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<int>> selectedIndicesChanged;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`2<int, int> itemIndexChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action itemsSourceChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action selectionNotChanged;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Func`2<CanStartDragArgs, bool> canStartDrag;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Func`2<SetupDragAndDropArgs, StartDragArgs> setupDragAndDrop;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<HandleDragAndDropArgs, DragVisualMode> dragAndDropUpdate;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Func`2<HandleDragAndDropArgs, DragVisualMode> handleDrop;
    private SelectionType m_SelectionType;
    private static List`1<ReusableCollectionItem> k_EmptyItems;
    private bool m_HorizontalScrollingEnabled;
    [SerializeField]
private AlternatingRowBackground m_ShowAlternatingRowBackgrounds;
    internal static int s_DefaultItemHeight;
    internal float m_FixedItemHeight;
    internal bool m_ItemHeightIsInline;
    private CollectionVirtualizationMethod m_VirtualizationMethod;
    private ScrollView m_ScrollView;
    private CollectionViewController m_ViewController;
    private CollectionVirtualizationController m_VirtualizationController;
    private KeyboardNavigationManipulator m_NavigationManipulator;
    [SerializeField]
internal SerializedVirtualizationData serializedVirtualizationData;
    [SerializeField]
private List`1<int> m_SelectedIds;
    private Selection m_Selection;
    private float m_LastHeight;
    private bool m_IsRangeSelectionDirectionUp;
    private ListViewDragger m_Dragger;
    internal static float ItemHeightUnset;
    internal static CustomStyleProperty`1<int> s_ItemHeightProperty;
    private Action`2<int, int> m_ItemIndexChangedCallback;
    private Action m_ItemsSourceChangedCallback;
    internal IVisualElementScheduledItem m_RebuildScheduled;
    public static string ussClassName;
    public static string borderUssClassName;
    public static string itemUssClassName;
    public static string dragHoverBarUssClassName;
    public static string dragHoverMarkerUssClassName;
    public static string itemDragHoverUssClassName;
    public static string itemSelectedVariantUssClassName;
    public static string itemAlternativeBackgroundUssClassName;
    public static string listScrollViewUssClassName;
    internal static string backgroundFillUssClassName;
    private Vector3 m_TouchDownPosition;
    public IList itemsSource { get; public set; }
    [ObsoleteAttribute("makeItem has been moved to ListView and TreeView. Use these ones instead.")]
public Func`1<VisualElement> makeItem { get; public set; }
    [ObsoleteAttribute("bindItem has been moved to ListView and TreeView. Use these ones instead.")]
public Action`2<VisualElement, int> bindItem { get; public set; }
    [ObsoleteAttribute("unbindItem has been moved to ListView and TreeView. Use these ones instead.")]
public Action`2<VisualElement, int> unbindItem { get; public set; }
    [ObsoleteAttribute("destroyItem has been moved to ListView and TreeView. Use these ones instead.")]
public Action`1<VisualElement> destroyItem { get; public set; }
    public VisualElement contentContainer { get; }
    public SelectionType selectionType { get; public set; }
    public object selectedItem { get; }
    public IEnumerable`1<object> selectedItems { get; }
    public int selectedIndex { get; public set; }
    public IEnumerable`1<int> selectedIndices { get; }
    internal IEnumerable`1<int> selectedIds { get; }
    internal IEnumerable`1<ReusableCollectionItem> activeItems { get; }
    internal ScrollView scrollView { get; }
    internal ListViewDragger dragger { get; }
    internal CollectionVirtualizationController virtualizationController { get; }
    public CollectionViewController viewController { get; }
    [ObsoleteAttribute("resolvedItemHeight is deprecated and will be removed from the API.", "False")]
public float resolvedItemHeight { get; }
    public bool showBorder { get; public set; }
    public bool reorderable { get; public set; }
    public bool horizontalScrollingEnabled { get; public set; }
    public AlternatingRowBackground showAlternatingRowBackgrounds { get; public set; }
    public CollectionVirtualizationMethod virtualizationMethod { get; public set; }
    [ObsoleteAttribute("itemHeight is deprecated, use fixedItemHeight instead.", "False")]
public int itemHeight { get; public set; }
    public float fixedItemHeight { get; public set; }
    internal float lastHeight { get; }
    public BaseVerticalCollectionView(IList itemsSource, float itemHeight);
    [ObsoleteAttribute("makeItem and bindItem are now in ListView and TreeView directly, please use a constructor without these parameters.")]
public BaseVerticalCollectionView(IList itemsSource, float itemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, int> bindItem);
    private static BaseVerticalCollectionView();
    public void add_onItemsChosen(Action`1<IEnumerable`1<object>> value);
    public void remove_onItemsChosen(Action`1<IEnumerable`1<object>> value);
    [CompilerGeneratedAttribute]
public void add_itemsChosen(Action`1<IEnumerable`1<object>> value);
    [CompilerGeneratedAttribute]
public void remove_itemsChosen(Action`1<IEnumerable`1<object>> value);
    public void add_onSelectionChange(Action`1<IEnumerable`1<object>> value);
    public void remove_onSelectionChange(Action`1<IEnumerable`1<object>> value);
    [CompilerGeneratedAttribute]
public void add_selectionChanged(Action`1<IEnumerable`1<object>> value);
    [CompilerGeneratedAttribute]
public void remove_selectionChanged(Action`1<IEnumerable`1<object>> value);
    public void add_onSelectedIndicesChange(Action`1<IEnumerable`1<int>> value);
    public void remove_onSelectedIndicesChange(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
public void add_selectedIndicesChanged(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
public void remove_selectedIndicesChanged(Action`1<IEnumerable`1<int>> value);
    [CompilerGeneratedAttribute]
public void add_itemIndexChanged(Action`2<int, int> value);
    [CompilerGeneratedAttribute]
public void remove_itemIndexChanged(Action`2<int, int> value);
    [CompilerGeneratedAttribute]
public void add_itemsSourceChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_itemsSourceChanged(Action value);
    [CompilerGeneratedAttribute]
internal void add_selectionNotChanged(Action value);
    [CompilerGeneratedAttribute]
internal void remove_selectionNotChanged(Action value);
    [CompilerGeneratedAttribute]
internal void add_canStartDrag(Func`2<CanStartDragArgs, bool> value);
    [CompilerGeneratedAttribute]
internal void remove_canStartDrag(Func`2<CanStartDragArgs, bool> value);
    internal bool HasCanStartDrag();
    internal bool RaiseCanStartDrag(ReusableCollectionItem item, IEnumerable`1<int> ids);
    [CompilerGeneratedAttribute]
internal void add_setupDragAndDrop(Func`2<SetupDragAndDropArgs, StartDragArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_setupDragAndDrop(Func`2<SetupDragAndDropArgs, StartDragArgs> value);
    internal StartDragArgs RaiseSetupDragAndDrop(ReusableCollectionItem item, IEnumerable`1<int> ids, StartDragArgs args);
    [CompilerGeneratedAttribute]
internal void add_dragAndDropUpdate(Func`2<HandleDragAndDropArgs, DragVisualMode> value);
    [CompilerGeneratedAttribute]
internal void remove_dragAndDropUpdate(Func`2<HandleDragAndDropArgs, DragVisualMode> value);
    internal DragVisualMode RaiseHandleDragAndDrop(Vector2 pointerPosition, DragAndDropArgs dragAndDropArgs);
    [CompilerGeneratedAttribute]
internal void add_handleDrop(Func`2<HandleDragAndDropArgs, DragVisualMode> value);
    [CompilerGeneratedAttribute]
internal void remove_handleDrop(Func`2<HandleDragAndDropArgs, DragVisualMode> value);
    internal DragVisualMode RaiseDrop(Vector2 pointerPosition, DragAndDropArgs dragAndDropArgs);
    public IList get_itemsSource();
    public void set_itemsSource(IList value);
    public Func`1<VisualElement> get_makeItem();
    public void set_makeItem(Func`1<VisualElement> value);
    public Action`2<VisualElement, int> get_bindItem();
    public void set_bindItem(Action`2<VisualElement, int> value);
    public Action`2<VisualElement, int> get_unbindItem();
    public void set_unbindItem(Action`2<VisualElement, int> value);
    public Action`1<VisualElement> get_destroyItem();
    public void set_destroyItem(Action`1<VisualElement> value);
    public virtual VisualElement get_contentContainer();
    public SelectionType get_selectionType();
    public void set_selectionType(SelectionType value);
    public object get_selectedItem();
    [IteratorStateMachineAttribute("UnityEngine.UIElements.BaseVerticalCollectionView/<get_selectedItems>d__72")]
public IEnumerable`1<object> get_selectedItems();
    public int get_selectedIndex();
    public void set_selectedIndex(int value);
    public IEnumerable`1<int> get_selectedIndices();
    internal IEnumerable`1<int> get_selectedIds();
    internal IEnumerable`1<ReusableCollectionItem> get_activeItems();
    internal ScrollView get_scrollView();
    internal ListViewDragger get_dragger();
    internal CollectionVirtualizationController get_virtualizationController();
    public CollectionViewController get_viewController();
    public float get_resolvedItemHeight();
    internal float ResolveItemHeight(float height);
    public bool get_showBorder();
    public void set_showBorder(bool value);
    public bool get_reorderable();
    public void set_reorderable(bool value);
    public bool get_horizontalScrollingEnabled();
    public void set_horizontalScrollingEnabled(bool value);
    public AlternatingRowBackground get_showAlternatingRowBackgrounds();
    public void set_showAlternatingRowBackgrounds(AlternatingRowBackground value);
    public CollectionVirtualizationMethod get_virtualizationMethod();
    public void set_virtualizationMethod(CollectionVirtualizationMethod value);
    public int get_itemHeight();
    public void set_itemHeight(int value);
    public float get_fixedItemHeight();
    public void set_fixedItemHeight(float value);
    internal float get_lastHeight();
    private protected virtual void CreateVirtualizationController();
    internal CollectionVirtualizationController GetOrCreateVirtualizationController();
    internal void CreateVirtualizationController();
    internal CollectionViewController GetOrCreateViewController();
    protected abstract virtual CollectionViewController CreateViewController();
    public virtual void SetViewController(CollectionViewController controller);
    internal virtual ListViewDragger CreateDragger();
    internal void InitializeDragAndDropController(bool enableReordering);
    internal abstract virtual ICollectionDragAndDropController CreateDragAndDropController();
    internal void SetDragAndDropController(ICollectionDragAndDropController dragAndDropController);
    public VisualElement GetRootElementForId(int id);
    public VisualElement GetRootElementForIndex(int index);
    internal virtual bool HasValidDataAndBindings();
    private void OnItemIndexChanged(int srcIndex, int dstIndex);
    private void OnItemsSourceChanged();
    public void RefreshItem(int index);
    public void RefreshItems();
    [ObsoleteAttribute("Refresh() has been deprecated. Use Rebuild() instead. (UnityUpgradable) -> Rebuild()", "False")]
public void Refresh();
    public void Rebuild();
    internal void ScheduleRebuild();
    private void RefreshSelection();
    private protected virtual void PostRefresh();
    public void ScrollTo(VisualElement visualElement);
    public void ScrollToItem(int index);
    [ObsoleteAttribute("ScrollToId() has been deprecated. Use ScrollToItemById() instead. (UnityUpgradable) -> ScrollToItemById(*)", "False")]
public void ScrollToId(int id);
    public void ScrollToItemById(int id);
    private void OnScroll(Vector2 offset);
    private void Resize(Vector2 size);
    private void OnAttachToPanel(AttachToPanelEvent evt);
    private void OnDetachFromPanel(DetachFromPanelEvent evt);
    [ObsoleteAttribute("OnKeyDown is obsolete and will be removed from ListView. Use the event system instead, i.e. SendEvent(EventBase e).", "True")]
public void OnKeyDown(KeyDownEvent evt);
    private bool Apply(KeyboardNavigationOperation op, bool shiftKey, bool altKey);
    private void Apply(KeyboardNavigationOperation op, EventBase sourceEvent);
    private protected virtual bool HandleItemNavigation(bool moveIn, bool altKey);
    private void OnPointerMove(PointerMoveEvent evt);
    private void OnPointerDown(PointerDownEvent evt);
    private void OnPointerCancel(PointerCancelEvent evt);
    private void OnPointerUp(PointerUpEvent evt);
    private void ProcessPointerDown(IPointerEvent evt);
    private void ProcessPointerUp(IPointerEvent evt);
    private void DoSelect(Vector2 localPosition, int clickCount, bool actionKey, bool shiftKey);
    internal void DoRangeSelection(int rangeSelectionFinalIndex);
    private void ProcessSingleClick(int clickedIndex);
    internal void SelectAll();
    public void AddToSelection(int index);
    internal void AddToSelection(IList`1<int> indexes);
    private void AddToSelectionWithoutValidation(int index);
    public void RemoveFromSelection(int index);
    private void RemoveFromSelectionWithoutValidation(int index);
    public void SetSelection(int index);
    public void SetSelection(IEnumerable`1<int> indices);
    public void SetSelectionWithoutNotify(IEnumerable`1<int> indices);
    internal void SetSelectionInternal(IEnumerable`1<int> indices, bool sendNotification);
    private bool MatchesExistingSelection(IEnumerable`1<int> indices);
    private void NotifyOfSelectionChange();
    public void ClearSelection();
    private void ClearSelectionWithoutValidation();
    internal virtual void OnViewDataReady();
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultAction(EventBase evt);
    private void OnSizeChanged(GeometryChangedEvent evt);
    private void OnCustomStyleResolved(CustomStyleResolvedEvent e);
    private sealed virtual override void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize();
    private sealed virtual override void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize();
    [CompilerGeneratedAttribute]
private void <.ctor>b__159_0(float v);
    [CompilerGeneratedAttribute]
private void <RefreshSelection>g__NotifyIfChanged|172_0(<>c__DisplayClass172_0& );
    [CompilerGeneratedAttribute]
private void <Apply>g__HandleSelectionAndScroll|183_0(int index, <>c__DisplayClass183_0& );
}
internal abstract class UnityEngine.UIElements.BaseVisualElementPanel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<BaseVisualElementPanel> panelDisposed;
    private UIElementsBridge m_UIElementsBridge;
    private float m_Scale;
    internal YogaConfig yogaConfig;
    private float m_PixelsPerPoint;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private float <referenceSpritePixelsPerUnit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PanelClearSettings <clearSettings>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <duringLayoutPhase>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RepaintData <repaintData>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private ICursorManager <cursorManager>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private ContextualMenuManager <contextualMenuManager>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    internal ElementUnderPointer m_TopElementUnderPointers;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action standardShaderChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action standardWorldSpaceShaderChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action atlasChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<Material> updateMaterial;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private HierarchyEvent hierarchyChanged;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<IPanel> beforeUpdate;
    public EventInterests IMGUIEventInterests { get; public set; }
    public ScriptableObject ownerObject { get; protected set; }
    public SavePersistentViewData saveViewData { get; public set; }
    public GetViewDataDictionary getViewDataDictionary { get; public set; }
    public int IMGUIContainersCount { get; public set; }
    public FocusController focusController { get; public set; }
    public IMGUIContainer rootIMGUIContainer { get; public set; }
    internal UIElementsBridge uiElementsBridge { get; internal set; }
    internal float scale { get; internal set; }
    internal float pixelsPerPoint { get; internal set; }
    public float scaledPixelsPerPoint { get; }
    public float referenceSpritePixelsPerUnit { get; public set; }
    public PanelClearFlags clearFlags { get; public set; }
    internal PanelClearSettings clearSettings { get; internal set; }
    internal bool duringLayoutPhase { get; internal set; }
    public bool isDirty { get; }
    internal UInt32 version { get; }
    internal UInt32 repaintVersion { get; }
    internal UInt32 hierarchyVersion { get; }
    internal RepaintData repaintData { get; internal set; }
    internal ICursorManager cursorManager { get; internal set; }
    public ContextualMenuManager contextualMenuManager { get; internal set; }
    public VisualElement visualTree { get; }
    public EventDispatcher dispatcher { get; public set; }
    internal IScheduler scheduler { get; }
    internal IStylePropertyAnimationSystem styleAnimationSystem { get; internal set; }
    public ContextType contextType { get; protected set; }
    internal bool disposed { get; private set; }
    internal Shader standardShader { get; internal set; }
    internal Shader standardWorldSpaceShader { get; internal set; }
    public AtlasBase atlas { get; public set; }
    public abstract virtual EventInterests get_IMGUIEventInterests();
    public abstract virtual void set_IMGUIEventInterests(EventInterests value);
    public abstract virtual ScriptableObject get_ownerObject();
    protected abstract virtual void set_ownerObject(ScriptableObject value);
    public abstract virtual SavePersistentViewData get_saveViewData();
    public abstract virtual void set_saveViewData(SavePersistentViewData value);
    public abstract virtual GetViewDataDictionary get_getViewDataDictionary();
    public abstract virtual void set_getViewDataDictionary(GetViewDataDictionary value);
    public abstract virtual int get_IMGUIContainersCount();
    public abstract virtual void set_IMGUIContainersCount(int value);
    public abstract virtual FocusController get_focusController();
    public abstract virtual void set_focusController(FocusController value);
    public abstract virtual IMGUIContainer get_rootIMGUIContainer();
    public abstract virtual void set_rootIMGUIContainer(IMGUIContainer value);
    [CompilerGeneratedAttribute]
internal void add_panelDisposed(Action`1<BaseVisualElementPanel> value);
    [CompilerGeneratedAttribute]
internal void remove_panelDisposed(Action`1<BaseVisualElementPanel> value);
    internal UIElementsBridge get_uiElementsBridge();
    internal void set_uiElementsBridge(UIElementsBridge value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Repaint(Event e);
    public abstract virtual void ValidateFocus();
    public abstract virtual void ValidateLayout();
    public abstract virtual void UpdateAnimations();
    public abstract virtual void UpdateBindings();
    public abstract virtual void ApplyStyles();
    internal float get_scale();
    internal void set_scale(float value);
    internal float get_pixelsPerPoint();
    internal void set_pixelsPerPoint(float value);
    public float get_scaledPixelsPerPoint();
    [CompilerGeneratedAttribute]
public float get_referenceSpritePixelsPerUnit();
    [CompilerGeneratedAttribute]
public void set_referenceSpritePixelsPerUnit(float value);
    public PanelClearFlags get_clearFlags();
    public void set_clearFlags(PanelClearFlags value);
    [CompilerGeneratedAttribute]
internal PanelClearSettings get_clearSettings();
    [CompilerGeneratedAttribute]
internal void set_clearSettings(PanelClearSettings value);
    [CompilerGeneratedAttribute]
internal bool get_duringLayoutPhase();
    [CompilerGeneratedAttribute]
internal void set_duringLayoutPhase(bool value);
    public sealed virtual bool get_isDirty();
    internal abstract virtual UInt32 get_version();
    internal abstract virtual UInt32 get_repaintVersion();
    internal abstract virtual UInt32 get_hierarchyVersion();
    internal abstract virtual void OnVersionChanged(VisualElement ele, VersionChangeType changeTypeFlag);
    internal abstract virtual void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase);
    [CompilerGeneratedAttribute]
internal virtual RepaintData get_repaintData();
    [CompilerGeneratedAttribute]
internal virtual void set_repaintData(RepaintData value);
    [CompilerGeneratedAttribute]
internal virtual ICursorManager get_cursorManager();
    [CompilerGeneratedAttribute]
internal virtual void set_cursorManager(ICursorManager value);
    [CompilerGeneratedAttribute]
public sealed virtual ContextualMenuManager get_contextualMenuManager();
    [CompilerGeneratedAttribute]
internal void set_contextualMenuManager(ContextualMenuManager value);
    public abstract virtual VisualElement get_visualTree();
    public abstract virtual EventDispatcher get_dispatcher();
    public abstract virtual void set_dispatcher(EventDispatcher value);
    internal void SendEvent(EventBase e, DispatchMode dispatchMode);
    internal abstract virtual IScheduler get_scheduler();
    internal abstract virtual IStylePropertyAnimationSystem get_styleAnimationSystem();
    internal abstract virtual void set_styleAnimationSystem(IStylePropertyAnimationSystem value);
    public abstract virtual ContextType get_contextType();
    protected abstract virtual void set_contextType(ContextType value);
    public abstract virtual VisualElement Pick(Vector2 point);
    public abstract virtual VisualElement PickAll(Vector2 point, List`1<VisualElement> picked);
    [CompilerGeneratedAttribute]
internal bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    internal abstract virtual IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase);
    internal VisualElement GetTopElementUnderPointer(int pointerId);
    internal VisualElement RecomputeTopElementUnderPointer(int pointerId, Vector2 pointerPos, EventBase triggerEvent);
    internal void ClearCachedElementUnderPointer(int pointerId, EventBase triggerEvent);
    internal void CommitElementUnderPointers();
    internal abstract virtual Shader get_standardShader();
    internal abstract virtual void set_standardShader(Shader value);
    internal virtual Shader get_standardWorldSpaceShader();
    internal virtual void set_standardWorldSpaceShader(Shader value);
    [CompilerGeneratedAttribute]
internal void add_standardShaderChanged(Action value);
    [CompilerGeneratedAttribute]
internal void remove_standardShaderChanged(Action value);
    [CompilerGeneratedAttribute]
internal void add_standardWorldSpaceShaderChanged(Action value);
    [CompilerGeneratedAttribute]
internal void remove_standardWorldSpaceShaderChanged(Action value);
    protected void InvokeStandardShaderChanged();
    protected void InvokeStandardWorldSpaceShaderChanged();
    [CompilerGeneratedAttribute]
internal void add_atlasChanged(Action value);
    [CompilerGeneratedAttribute]
internal void remove_atlasChanged(Action value);
    protected void InvokeAtlasChanged();
    public abstract virtual AtlasBase get_atlas();
    public abstract virtual void set_atlas(AtlasBase value);
    [CompilerGeneratedAttribute]
internal void add_updateMaterial(Action`1<Material> value);
    [CompilerGeneratedAttribute]
internal void remove_updateMaterial(Action`1<Material> value);
    internal void InvokeUpdateMaterial(Material mat);
    [CompilerGeneratedAttribute]
internal void add_hierarchyChanged(HierarchyEvent value);
    [CompilerGeneratedAttribute]
internal void remove_hierarchyChanged(HierarchyEvent value);
    internal void InvokeHierarchyChanged(VisualElement ve, HierarchyChangeType changeType);
    [CompilerGeneratedAttribute]
internal void add_beforeUpdate(Action`1<IPanel> value);
    [CompilerGeneratedAttribute]
internal void remove_beforeUpdate(Action`1<IPanel> value);
    internal void InvokeBeforeUpdate();
    internal void UpdateElementUnderPointers();
    private sealed virtual override void UnityEngine.UIElements.IGroupBox.OnOptionAdded(IGroupBoxOption option);
    private sealed virtual override void UnityEngine.UIElements.IGroupBox.OnOptionRemoved(IGroupBoxOption option);
    public virtual void Update();
}
internal abstract class UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater : BaseVisualTreeUpdater {
    private State m_State;
    private VisualElement m_CurrentChangeElement;
    private VisualElement m_CurrentChangeParent;
    protected abstract virtual void OnHierarchyChange(VisualElement ve, HierarchyChangeType type);
    public virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
    public virtual void Update();
    private void ProcessNewChange(VisualElement ve);
    private void ProcessAddOrMove(VisualElement ve);
    private void ProcessRemove(VisualElement ve);
}
internal abstract class UnityEngine.UIElements.BaseVisualTreeUpdater : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<BaseVisualElementPanel> panelChanged;
    private BaseVisualElementPanel m_Panel;
    public BaseVisualElementPanel panel { get; public set; }
    public VisualElement visualTree { get; }
    public ProfilerMarker profilerMarker { get; }
    [CompilerGeneratedAttribute]
public void add_panelChanged(Action`1<BaseVisualElementPanel> value);
    [CompilerGeneratedAttribute]
public void remove_panelChanged(Action`1<BaseVisualElementPanel> value);
    public sealed virtual BaseVisualElementPanel get_panel();
    public sealed virtual void set_panel(BaseVisualElementPanel value);
    public VisualElement get_visualTree();
    public abstract virtual ProfilerMarker get_profilerMarker();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Update();
    public abstract virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
}
public class UnityEngine.UIElements.BindableElement : VisualElement {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private IBinding <binding>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <bindingPath>k__BackingField;
    public IBinding binding { get; public set; }
    public string bindingPath { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IBinding get_binding();
    [CompilerGeneratedAttribute]
public sealed virtual void set_binding(IBinding value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_bindingPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_bindingPath(string value);
}
public class UnityEngine.UIElements.BlurEvent : FocusEventBase`1<BlurEvent> {
    private static BlurEvent();
    protected internal virtual void PreDispatch(IPanel panel);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.BoundsField : BaseField`1<Bounds> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public static string centerFieldUssClassName;
    public static string extentsFieldUssClassName;
    private Vector3Field m_CenterField;
    private Vector3Field m_ExtentsField;
    public BoundsField(string label);
    private static BoundsField();
    public virtual void SetValueWithoutNotify(Bounds newValue);
    protected virtual void UpdateMixedValueContent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(ChangeEvent`1<Vector3> e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1(ChangeEvent`1<Vector3> e);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.BoundsIntField : BaseField`1<BoundsInt> {
    private Vector3IntField m_PositionField;
    private Vector3IntField m_SizeField;
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public static string positionUssClassName;
    public static string sizeUssClassName;
    public BoundsIntField(string label);
    private static BoundsIntField();
    public virtual void SetValueWithoutNotify(BoundsInt newValue);
    protected virtual void UpdateMixedValueContent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(ChangeEvent`1<Vector3Int> e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1(ChangeEvent`1<Vector3Int> e);
}
public class UnityEngine.UIElements.Box : VisualElement {
    public static string ussClassName;
    private static Box();
}
public class UnityEngine.UIElements.Button : TextElement {
    public static string ussClassName;
    private Clickable m_Clickable;
    private static string NonEmptyString;
    public Clickable clickable { get; public set; }
    public Button(Action clickEvent);
    private static Button();
    public Clickable get_clickable();
    public void set_clickable(Clickable value);
    public void add_onClick(Action value);
    public void remove_onClick(Action value);
    public void add_clicked(Action value);
    public void remove_clicked(Action value);
    private void OnNavigationSubmit(NavigationSubmitEvent evt);
    protected internal virtual Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode);
}
internal class UnityEngine.UIElements.ButtonStripField : BaseField`1<int> {
    public static string className;
    private static string k_ButtonClass;
    private static string k_IconClass;
    private static string k_ButtonLeftClass;
    private static string k_ButtonMiddleClass;
    private static string k_ButtonRightClass;
    private static string k_ButtonAloneClass;
    private List`1<Button> m_Buttons;
    public ButtonStripField(string label);
    public void AddButton(string text, string name);
    public void AddButton(Background icon, string name);
    private Button CreateButton(string name);
    private void OnButtonDetachFromPanel(DetachFromPanelEvent evt);
    private void RefreshButtonsStyling();
    public virtual void SetValueWithoutNotify(int newValue);
    private void EnsureValueIsValid();
    private void RefreshButtonsState();
}
public abstract class UnityEngine.UIElements.CallbackEventHandler : object {
    internal bool isIMGUIContainer;
    private EventCallbackRegistry m_CallbackRegistry;
    internal static string ExecuteDefaultActionName;
    internal static string ExecuteDefaultActionAtTargetName;
    public void RegisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown);
    private void AddEventCategories();
    public void RegisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TUserArgsType userArgs, TrickleDown useTrickleDown);
    internal void RegisterCallback(EventCallback`1<TEventType> callback, InvokePolicy invokePolicy, TrickleDown useTrickleDown);
    public void UnregisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown);
    public void UnregisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TrickleDown useTrickleDown);
    internal bool TryGetUserArgs(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown, TCallbackArgs& userData);
    public abstract virtual void SendEvent(EventBase e);
    internal abstract virtual void SendEvent(EventBase e, DispatchMode dispatchMode);
    internal void HandleEventAtTargetPhase(EventBase evt);
    internal void HandleEventAtTargetAndDefaultPhase(EventBase evt);
    internal void HandleEventAtCurrentTargetAndPhase(EventBase evt);
    private sealed virtual override void UnityEngine.UIElements.IEventHandler.HandleEvent(EventBase evt);
    [ObsoleteAttribute("The virtual method CallbackEventHandler.HandleEvent is deprecated and will be removed in a future release. Please override ExecuteDefaultAction instead.")]
public virtual void HandleEvent(EventBase evt);
    public sealed virtual bool HasTrickleDownHandlers();
    public sealed virtual bool HasBubbleUpHandlers();
    [EventInterestAttribute("0")]
protected virtual void ExecuteDefaultActionAtTarget(EventBase evt);
    [EventInterestAttribute("0")]
protected virtual void ExecuteDefaultAction(EventBase evt);
    [EventInterestAttribute("0")]
internal virtual void ExecuteDefaultActionDisabledAtTarget(EventBase evt);
    [EventInterestAttribute("0")]
internal virtual void ExecuteDefaultActionDisabled(EventBase evt);
}
internal enum UnityEngine.UIElements.CallbackPhase : Enum {
    public int value__;
    public static CallbackPhase TargetAndBubbleUp;
    public static CallbackPhase TrickleDownAndTarget;
}
[IsReadOnlyAttribute]
internal class UnityEngine.UIElements.CanStartDragArgs : ValueType {
    public VisualElement draggedElement;
    public int id;
    public IEnumerable`1<int> selectedIds;
    internal CanStartDragArgs(VisualElement draggedElement, int id, IEnumerable`1<int> selectedIds);
}
[EventCategoryAttribute("8")]
public class UnityEngine.UIElements.ChangeEvent`1 : EventBase`1<ChangeEvent`1<T>> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <previousValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <newValue>k__BackingField;
    public T previousValue { get; protected set; }
    public T newValue { get; protected set; }
    private static ChangeEvent`1();
    [CompilerGeneratedAttribute]
public T get_previousValue();
    [CompilerGeneratedAttribute]
protected void set_previousValue(T value);
    [CompilerGeneratedAttribute]
public T get_newValue();
    [CompilerGeneratedAttribute]
protected void set_newValue(T value);
    protected virtual void Init();
    private void LocalInit();
    public static ChangeEvent`1<T> GetPooled(T previousValue, T newValue);
}
internal class UnityEngine.UIElements.ClampedDragger`1 : Clickable {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action dragging;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action draggingEnded;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private DragDirection<T> <dragDirection>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private BaseSlider`1<T> <slider>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Vector2 <startMousePosition>k__BackingField;
    public DragDirection<T> dragDirection { get; public set; }
    private BaseSlider`1<T> slider { get; private set; }
    public Vector2 startMousePosition { get; private set; }
    public Vector2 delta { get; }
    public ClampedDragger`1(BaseSlider`1<T> slider, Action clickHandler, Action dragHandler);
    [CompilerGeneratedAttribute]
public void add_dragging(Action value);
    [CompilerGeneratedAttribute]
public void remove_dragging(Action value);
    [CompilerGeneratedAttribute]
public void add_draggingEnded(Action value);
    [CompilerGeneratedAttribute]
public void remove_draggingEnded(Action value);
    [CompilerGeneratedAttribute]
public DragDirection<T> get_dragDirection();
    [CompilerGeneratedAttribute]
public void set_dragDirection(DragDirection<T> value);
    [CompilerGeneratedAttribute]
private BaseSlider`1<T> get_slider();
    [CompilerGeneratedAttribute]
private void set_slider(BaseSlider`1<T> value);
    [CompilerGeneratedAttribute]
public Vector2 get_startMousePosition();
    [CompilerGeneratedAttribute]
private void set_startMousePosition(Vector2 value);
    public Vector2 get_delta();
    protected virtual void ProcessDownEvent(EventBase evt, Vector2 localPosition, int pointerId);
    protected virtual void ProcessUpEvent(EventBase evt, Vector2 localPosition, int pointerId);
    protected virtual void ProcessMoveEvent(EventBase evt, Vector2 localPosition);
}
public class UnityEngine.UIElements.Clickable : PointerManipulator {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<EventBase> clickedWithEventInfo;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action clicked;
    private long m_Delay;
    private long m_Interval;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <active>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <lastMousePosition>k__BackingField;
    private int m_ActivePointerId;
    private bool m_AcceptClicksIfDisabled;
    private IVisualElementScheduledItem m_Repeater;
    protected bool active { get; protected set; }
    public Vector2 lastMousePosition { get; private set; }
    internal bool acceptClicksIfDisabled { get; internal set; }
    private InvokePolicy invokePolicy { get; }
    public Clickable(Action handler, long delay, long interval);
    public Clickable(Action`1<EventBase> handler);
    public Clickable(Action handler);
    [CompilerGeneratedAttribute]
public void add_clickedWithEventInfo(Action`1<EventBase> value);
    [CompilerGeneratedAttribute]
public void remove_clickedWithEventInfo(Action`1<EventBase> value);
    [CompilerGeneratedAttribute]
public void add_clicked(Action value);
    [CompilerGeneratedAttribute]
public void remove_clicked(Action value);
    [CompilerGeneratedAttribute]
protected bool get_active();
    [CompilerGeneratedAttribute]
protected void set_active(bool value);
    [CompilerGeneratedAttribute]
public Vector2 get_lastMousePosition();
    [CompilerGeneratedAttribute]
private void set_lastMousePosition(Vector2 value);
    internal bool get_acceptClicksIfDisabled();
    internal void set_acceptClicksIfDisabled(bool value);
    private InvokePolicy get_invokePolicy();
    private void OnTimer(TimerState timerState);
    private bool IsRepeatable();
    protected virtual void RegisterCallbacksOnTarget();
    protected virtual void UnregisterCallbacksFromTarget();
    protected void OnMouseDown(MouseDownEvent evt);
    protected void OnMouseMove(MouseMoveEvent evt);
    protected void OnMouseUp(MouseUpEvent evt);
    private void OnMouseCaptureOut(MouseCaptureOutEvent evt);
    private void OnPointerDown(PointerDownEvent evt);
    private void OnPointerMove(PointerMoveEvent evt);
    private void OnPointerUp(PointerUpEvent evt);
    private void OnPointerCancel(PointerCancelEvent evt);
    private void OnPointerCaptureOut(PointerCaptureOutEvent evt);
    private bool ContainsPointer(int pointerId);
    private static bool IsNotMouseEvent(int pointerId);
    protected void Invoke(EventBase evt);
    internal void SimulateSingleClick(EventBase evt, int delayMs);
    protected virtual void ProcessDownEvent(EventBase evt, Vector2 localPosition, int pointerId);
    protected virtual void ProcessMoveEvent(EventBase evt, Vector2 localPosition);
    protected virtual void ProcessUpEvent(EventBase evt, Vector2 localPosition, int pointerId);
    protected virtual void ProcessCancelEvent(EventBase evt, int pointerId);
    [CompilerGeneratedAttribute]
private void <SimulateSingleClick>b__43_0();
}
internal class UnityEngine.UIElements.ClickDetector : object {
    private List`1<ButtonClickStatus> m_ClickStatus;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static int <s_DoubleClickTime>k__BackingField;
    internal static int s_DoubleClickTime { get; internal set; }
    private static ClickDetector();
    [CompilerGeneratedAttribute]
internal static int get_s_DoubleClickTime();
    [CompilerGeneratedAttribute]
internal static void set_s_DoubleClickTime(int value);
    private void StartClickTracking(EventBase evt);
    private void SendClickEvent(EventBase evt);
    private void CancelClickTracking(EventBase evt);
    public void ProcessEvent(EventBase evt);
    private static bool ContainsPointer(VisualElement element, Vector2 position);
    internal void Cleanup(List`1<VisualElement> elements);
}
public class UnityEngine.UIElements.ClickEvent : PointerEventBase`1<ClickEvent> {
    private static ClickEvent();
    protected virtual void Init();
    private void LocalInit();
    internal static ClickEvent GetPooled(PointerUpEvent pointerEvent, int clickCount);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.Collections.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue Get(IDictionary`2<TKey, TValue> dict, TKey key, TValue fallbackValue);
}
public abstract class UnityEngine.UIElements.CollectionViewController : object {
    private BaseVerticalCollectionView m_View;
    private IList m_ItemsSource;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action itemsSourceChanged;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`2<int, int> itemIndexChanged;
    public IList itemsSource { get; public set; }
    protected BaseVerticalCollectionView view { get; }
    [CompilerGeneratedAttribute]
public void add_itemsSourceChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_itemsSourceChanged(Action value);
    [CompilerGeneratedAttribute]
public void add_itemIndexChanged(Action`2<int, int> value);
    [CompilerGeneratedAttribute]
public void remove_itemIndexChanged(Action`2<int, int> value);
    public virtual IList get_itemsSource();
    public virtual void set_itemsSource(IList value);
    protected void SetItemsSourceWithoutNotify(IList source);
    protected BaseVerticalCollectionView get_view();
    public void SetView(BaseVerticalCollectionView collectionView);
    protected virtual void PrepareView();
    public virtual void Dispose();
    public virtual int GetItemsCount();
    internal virtual int GetItemsMinCount();
    public virtual int GetIndexForId(int id);
    public virtual int GetIdForIndex(int index);
    public virtual object GetItemForIndex(int index);
    internal virtual object GetItemForId(int id);
    internal virtual void InvokeMakeItem(ReusableCollectionItem reusableItem);
    internal virtual void InvokeBindItem(ReusableCollectionItem reusableItem, int index);
    internal virtual void InvokeUnbindItem(ReusableCollectionItem reusableItem, int index);
    internal virtual void InvokeDestroyItem(ReusableCollectionItem reusableItem);
    protected abstract virtual VisualElement MakeItem();
    protected abstract virtual void BindItem(VisualElement element, int index);
    protected abstract virtual void UnbindItem(VisualElement element, int index);
    protected abstract virtual void DestroyItem(VisualElement element);
    protected void RaiseItemsSourceChanged();
    protected void RaiseItemIndexChanged(int srcIndex, int dstIndex);
}
internal abstract class UnityEngine.UIElements.CollectionVirtualizationController : object {
    protected ScrollView m_ScrollView;
    public int firstVisibleIndex { get; protected set; }
    public int visibleItemCount { get; }
    public IEnumerable`1<ReusableCollectionItem> activeItems { get; }
    protected CollectionVirtualizationController(ScrollView scrollView);
    public abstract virtual int get_firstVisibleIndex();
    protected abstract virtual void set_firstVisibleIndex(int value);
    public abstract virtual int get_visibleItemCount();
    public abstract virtual void Refresh(bool rebuild);
    public abstract virtual void ScrollToItem(int id);
    public abstract virtual void Resize(Vector2 size);
    public abstract virtual void OnScroll(Vector2 offset);
    public abstract virtual int GetIndexFromPosition(Vector2 position);
    public abstract virtual float GetExpectedItemHeight(int index);
    public abstract virtual float GetExpectedContentHeight();
    public abstract virtual void OnFocus(VisualElement leafTarget);
    public abstract virtual void OnBlur(VisualElement willFocus);
    public abstract virtual void UpdateBackground();
    public abstract virtual IEnumerable`1<ReusableCollectionItem> get_activeItems();
    internal abstract virtual void StartDragItem(ReusableCollectionItem item);
    internal abstract virtual void EndDrag(int dropIndex);
}
public enum UnityEngine.UIElements.CollectionVirtualizationMethod : Enum {
    public int value__;
    public static CollectionVirtualizationMethod FixedHeight;
    public static CollectionVirtualizationMethod DynamicHeight;
}
internal class UnityEngine.UIElements.ColorPage : ValueType {
    public bool isValid;
    public Color32 pageAndID;
    public static ColorPage Init(RenderChain renderChain, BMPAlloc alloc);
    public NativeColorPage ToNativeColorPage();
}
public class UnityEngine.UIElements.Column : object {
    internal static float kDefaultMinWidth;
    private static string k_InvalidTemplateError;
    private string m_Name;
    private string m_Title;
    private Background m_Icon;
    private bool m_Visible;
    private Length m_Width;
    private Length m_MinWidth;
    private Length m_MaxWidth;
    private float m_DesiredWidth;
    private bool m_Stretchable;
    private bool m_Sortable;
    private bool m_Optional;
    private bool m_Resizable;
    private Func`1<VisualElement> m_MakeHeader;
    private Action`1<VisualElement> m_BindHeader;
    private Action`1<VisualElement> m_UnbindHeader;
    private Action`1<VisualElement> m_DestroyHeader;
    private Func`1<VisualElement> m_MakeCell;
    private Action`2<VisualElement, int> m_BindCell;
    private Action`2<VisualElement, int> m_UnbindCellItem;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<VisualElement> <destroyCell>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Columns <collection>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`2<Column, ColumnDataType> changed;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<Column> resized;
    public string name { get; public set; }
    public string title { get; public set; }
    public Background icon { get; public set; }
    internal int index { get; }
    internal int displayIndex { get; }
    internal int visibleIndex { get; }
    public bool visible { get; public set; }
    public Length width { get; public set; }
    public Length minWidth { get; public set; }
    public Length maxWidth { get; public set; }
    internal float desiredWidth { get; internal set; }
    public bool sortable { get; public set; }
    public bool stretchable { get; public set; }
    public bool optional { get; public set; }
    public bool resizable { get; public set; }
    public Func`1<VisualElement> makeHeader { get; public set; }
    public Action`1<VisualElement> bindHeader { get; public set; }
    public Action`1<VisualElement> unbindHeader { get; public set; }
    public Action`1<VisualElement> destroyHeader { get; public set; }
    public Func`1<VisualElement> makeCell { get; public set; }
    public Action`2<VisualElement, int> bindCell { get; public set; }
    public Action`2<VisualElement, int> unbindCell { get; public set; }
    public Action`1<VisualElement> destroyCell { get; public set; }
    public Columns collection { get; internal set; }
    private static Column();
    public string get_name();
    public void set_name(string value);
    public string get_title();
    public void set_title(string value);
    public Background get_icon();
    public void set_icon(Background value);
    internal int get_index();
    internal int get_displayIndex();
    internal int get_visibleIndex();
    public bool get_visible();
    public void set_visible(bool value);
    public Length get_width();
    public void set_width(Length value);
    public Length get_minWidth();
    public void set_minWidth(Length value);
    public Length get_maxWidth();
    public void set_maxWidth(Length value);
    internal float get_desiredWidth();
    internal void set_desiredWidth(float value);
    public bool get_sortable();
    public void set_sortable(bool value);
    public bool get_stretchable();
    public void set_stretchable(bool value);
    public bool get_optional();
    public void set_optional(bool value);
    public bool get_resizable();
    public void set_resizable(bool value);
    public Func`1<VisualElement> get_makeHeader();
    public void set_makeHeader(Func`1<VisualElement> value);
    public Action`1<VisualElement> get_bindHeader();
    public void set_bindHeader(Action`1<VisualElement> value);
    public Action`1<VisualElement> get_unbindHeader();
    public void set_unbindHeader(Action`1<VisualElement> value);
    public Action`1<VisualElement> get_destroyHeader();
    public void set_destroyHeader(Action`1<VisualElement> value);
    public Func`1<VisualElement> get_makeCell();
    public void set_makeCell(Func`1<VisualElement> value);
    public Action`2<VisualElement, int> get_bindCell();
    public void set_bindCell(Action`2<VisualElement, int> value);
    public Action`2<VisualElement, int> get_unbindCell();
    public void set_unbindCell(Action`2<VisualElement, int> value);
    [CompilerGeneratedAttribute]
public Action`1<VisualElement> get_destroyCell();
    [CompilerGeneratedAttribute]
public void set_destroyCell(Action`1<VisualElement> value);
    [CompilerGeneratedAttribute]
public Columns get_collection();
    [CompilerGeneratedAttribute]
internal void set_collection(Columns value);
    [CompilerGeneratedAttribute]
internal void add_changed(Action`2<Column, ColumnDataType> value);
    [CompilerGeneratedAttribute]
internal void remove_changed(Action`2<Column, ColumnDataType> value);
    [CompilerGeneratedAttribute]
internal void add_resized(Action`1<Column> value);
    [CompilerGeneratedAttribute]
internal void remove_resized(Action`1<Column> value);
    private void NotifyChange(ColumnDataType type);
    internal float GetWidth(float layoutWidth);
    internal float GetMaxWidth(float layoutWidth);
    internal float GetMinWidth(float layoutWidth);
}
internal enum UnityEngine.UIElements.ColumnDataType : Enum {
    public int value__;
    public static ColumnDataType Name;
    public static ColumnDataType Title;
    public static ColumnDataType Icon;
    public static ColumnDataType Visibility;
    public static ColumnDataType Width;
    public static ColumnDataType MaxWidth;
    public static ColumnDataType MinWidth;
    public static ColumnDataType Stretchable;
    public static ColumnDataType Sortable;
    public static ColumnDataType Optional;
    public static ColumnDataType Resizable;
    public static ColumnDataType HeaderTemplate;
    public static ColumnDataType CellTemplate;
}
internal class UnityEngine.UIElements.ColumnLayout : object {
    private List`1<Column> m_StretchableColumns;
    private List`1<Column> m_FixedColumns;
    private List`1<Column> m_RelativeWidthColumns;
    private List`1<Column> m_MixedWidthColumns;
    private Columns m_Columns;
    private float m_ColumnsWidth;
    private bool m_ColumnsWidthDirty;
    private float m_MaxColumnsWidth;
    private float m_MinColumnsWidth;
    private bool m_IsDirty;
    private float m_PreviousWidth;
    private float m_LayoutWidth;
    private bool m_DragResizeInPreviewMode;
    private bool m_DragResizing;
    private float m_DragStartPos;
    private float m_DragLastPos;
    private float m_DragInitialColumnWidth;
    private List`1<Column> m_DragStretchableColumns;
    private List`1<Column> m_DragRelativeColumns;
    private List`1<Column> m_DragFixedColumns;
    private Dictionary`2<Column, float> m_PreviewDesiredWidths;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action layoutRequested;
    public Columns columns { get; }
    public bool isDirty { get; }
    public float columnsWidth { get; }
    public float layoutWidth { get; }
    public float minColumnsWidth { get; }
    public float maxColumnsWidth { get; }
    public bool hasStretchableColumns { get; }
    public bool hasRelativeWidthColumns { get; }
    public ColumnLayout(Columns columns);
    public Columns get_columns();
    public bool get_isDirty();
    public float get_columnsWidth();
    public float get_layoutWidth();
    public float get_minColumnsWidth();
    public float get_maxColumnsWidth();
    public bool get_hasStretchableColumns();
    public bool get_hasRelativeWidthColumns();
    [CompilerGeneratedAttribute]
public void add_layoutRequested(Action value);
    [CompilerGeneratedAttribute]
public void remove_layoutRequested(Action value);
    public void Dirty();
    private void OnColumnAdded(Column column, int index);
    private void OnColumnRemoved(Column column);
    private void OnColumnReordered(Column column, int from, int to);
    private bool RequiresLayoutUpdate(ColumnDataType type);
    private void OnColumnChanged(Column column, ColumnDataType type);
    private void OnColumnResized(Column column);
    private static bool IsClamped(float value, float min, float max);
    public void DoLayout(float width);
    public void StretchResizeColumns(List`1<Column> stretchableColumns, List`1<Column> fixedColumns, List`1<Column> relativeWidthColumns, Single& delta, bool resizeToFit, bool dragResize);
    private void DistributeOverflow(List`1<Column> stretchableColumns, List`1<Column> fixedColumns, List`1<Column> relativeWidthColumns, Single& delta, bool resizeToFit, bool dragResize);
    private void DistributeExcess(List`1<Column> stretchableColumns, List`1<Column> fixedColumns, List`1<Column> relativeWidthColumns, Single& delta, bool resizeToFit, bool dragResize);
    private float RecomputeToMaxWidthProportionally(List`1<Column> columns, float distributedDelta, bool setDesiredWidthOnly);
    private float RecomputeToMinWidthProportionally(List`1<Column> columns, float distributedDelta, bool setDesiredWidthOnly);
    private float RecomputeToDesiredWidth(List`1<Column> columns, float distributedDelta, bool setDesiredWidthOnly, bool distributeOverflow);
    private float RecomputeToDesiredWidth(Column column, float distributedDelta, bool setDesiredWidthOnly, bool distributeOverflow);
    private float RecomputeToMinWidth(List`1<Column> columns, float distributedDelta, bool setDesiredWidthOnly);
    private float RecomputeToMaxWidth(List`1<Column> columns, float distributedDelta, bool setDesiredWidthOnly);
    public void ResizeToFit(float width);
    private void ResizeColumn(Column column, float width, bool setDesiredWidthOnly);
    internal void BeginDragResize(Column column, float pos, bool previewMode);
    public float GetDesiredPosition(Column column);
    public float GetDesiredWidth(Column c);
    public void DragResize(Column column, float pos);
    internal void EndDragResize(Column column, bool cancelled);
    private void UpdateCache();
    private void UpdateMinAndMaxColumnsWidth();
    private void ClearCache();
    [CompilerGeneratedAttribute]
private int <DoLayout>b__49_0(Column c1, Column c2);
    [CompilerGeneratedAttribute]
private int <DoLayout>b__49_1(Column c1, Column c2);
    [CompilerGeneratedAttribute]
private int <RecomputeToMaxWidthProportionally>b__53_0(Column c1, Column c2);
    [CompilerGeneratedAttribute]
private int <RecomputeToMinWidthProportionally>b__54_0(Column c1, Column c2);
}
[DefaultMemberAttribute("Item")]
public class UnityEngine.UIElements.Columns : object {
    private IList`1<Column> m_Columns;
    private List`1<Column> m_DisplayColumns;
    private List`1<Column> m_VisibleColumns;
    private bool m_VisibleColumnsDirty;
    private StretchMode m_StretchMode;
    private bool m_Reorderable;
    private bool m_Resizable;
    private bool m_ResizePreview;
    private string m_PrimaryColumnName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<ColumnsDataType> changed;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`2<Column, int> columnAdded;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<Column> columnRemoved;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<Column, ColumnDataType> columnChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<Column> columnResized;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`3<Column, int, int> columnReordered;
    internal IList`1<Column> columns { get; }
    public string primaryColumnName { get; public set; }
    public bool reorderable { get; public set; }
    public bool resizable { get; public set; }
    public bool resizePreview { get; public set; }
    internal IEnumerable`1<Column> displayList { get; }
    internal IEnumerable`1<Column> visibleList { get; }
    public StretchMode stretchMode { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Column Item { get; }
    public Column Item { get; }
    internal IList`1<Column> get_columns();
    public string get_primaryColumnName();
    public void set_primaryColumnName(string value);
    public bool get_reorderable();
    public void set_reorderable(bool value);
    public bool get_resizable();
    public void set_resizable(bool value);
    public bool get_resizePreview();
    public void set_resizePreview(bool value);
    internal IEnumerable`1<Column> get_displayList();
    internal IEnumerable`1<Column> get_visibleList();
    [CompilerGeneratedAttribute]
internal void add_changed(Action`1<ColumnsDataType> value);
    [CompilerGeneratedAttribute]
internal void remove_changed(Action`1<ColumnsDataType> value);
    public StretchMode get_stretchMode();
    public void set_stretchMode(StretchMode value);
    [CompilerGeneratedAttribute]
internal void add_columnAdded(Action`2<Column, int> value);
    [CompilerGeneratedAttribute]
internal void remove_columnAdded(Action`2<Column, int> value);
    [CompilerGeneratedAttribute]
internal void add_columnRemoved(Action`1<Column> value);
    [CompilerGeneratedAttribute]
internal void remove_columnRemoved(Action`1<Column> value);
    [CompilerGeneratedAttribute]
internal void add_columnChanged(Action`2<Column, ColumnDataType> value);
    [CompilerGeneratedAttribute]
internal void remove_columnChanged(Action`2<Column, ColumnDataType> value);
    [CompilerGeneratedAttribute]
internal void add_columnResized(Action`1<Column> value);
    [CompilerGeneratedAttribute]
internal void remove_columnResized(Action`1<Column> value);
    [CompilerGeneratedAttribute]
internal void add_columnReordered(Action`3<Column, int, int> value);
    [CompilerGeneratedAttribute]
internal void remove_columnReordered(Action`3<Column, int, int> value);
    public bool IsPrimary(Column column);
    public sealed virtual IEnumerator`1<Column> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(Column item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Column item);
    public bool Contains(string name);
    public sealed virtual void CopyTo(Column[] array, int arrayIndex);
    public sealed virtual bool Remove(Column column);
    private void OnColumnChanged(Column column, ColumnDataType type);
    private void OnColumnResized(Column column);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public int IndexOf(Column column);
    public void Insert(int index, Column column);
    public void RemoveAt(int index);
    public Column get_Item(int index);
    public Column get_Item(string name);
    public void ReorderDisplay(int from, int to);
    private void InitOrderColumns();
    private void DirtyVisibleColumns();
    private void UpdateVisibleColumns();
    private void NotifyChange(ColumnsDataType type);
}
internal enum UnityEngine.UIElements.ColumnsDataType : Enum {
    public int value__;
    public static ColumnsDataType PrimaryColumn;
    public static ColumnsDataType StretchMode;
    public static ColumnsDataType Reorderable;
    public static ColumnsDataType Resizable;
    public static ColumnsDataType ResizePreview;
}
[EventCategoryAttribute("14")]
public abstract class UnityEngine.UIElements.CommandEventBase`1 : EventBase`1<T> {
    private string m_CommandName;
    public string commandName { get; protected set; }
    public sealed virtual string get_commandName();
    protected void set_commandName(string value);
    protected virtual void Init();
    private void LocalInit();
    public static T GetPooled(Event systemEvent);
    public static T GetPooled(string commandName);
}
internal class UnityEngine.UIElements.CommandEventDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public sealed virtual void DispatchEvent(EventBase evt, IPanel panel);
}
internal class UnityEngine.UIElements.ComputedStyle : ValueType {
    public StyleDataRef`1<InheritedData> inheritedData;
    public StyleDataRef`1<LayoutData> layoutData;
    public StyleDataRef`1<RareData> rareData;
    public StyleDataRef`1<TransformData> transformData;
    public StyleDataRef`1<TransitionData> transitionData;
    public StyleDataRef`1<VisualData> visualData;
    public YogaNode yogaNode;
    public Dictionary`2<string, StylePropertyValue> customProperties;
    public long matchingRulesHash;
    public float dpiScaling;
    public ComputedTransitionProperty[] computedTransitions;
    public int customPropertiesCount { get; }
    public bool hasTransition { get; }
    public Align alignContent { get; }
    public Align alignItems { get; }
    public Align alignSelf { get; }
    public Color backgroundColor { get; }
    public Background backgroundImage { get; }
    public BackgroundPosition backgroundPositionX { get; }
    public BackgroundPosition backgroundPositionY { get; }
    public BackgroundRepeat backgroundRepeat { get; }
    public BackgroundSize backgroundSize { get; }
    public Color borderBottomColor { get; }
    public Length borderBottomLeftRadius { get; }
    public Length borderBottomRightRadius { get; }
    public float borderBottomWidth { get; }
    public Color borderLeftColor { get; }
    public float borderLeftWidth { get; }
    public Color borderRightColor { get; }
    public float borderRightWidth { get; }
    public Color borderTopColor { get; }
    public Length borderTopLeftRadius { get; }
    public Length borderTopRightRadius { get; }
    public float borderTopWidth { get; }
    public Length bottom { get; }
    public Color color { get; }
    public Cursor cursor { get; }
    public DisplayStyle display { get; }
    public Length flexBasis { get; }
    public FlexDirection flexDirection { get; }
    public float flexGrow { get; }
    public float flexShrink { get; }
    public Wrap flexWrap { get; }
    public Length fontSize { get; }
    public Length height { get; }
    public Justify justifyContent { get; }
    public Length left { get; }
    public Length letterSpacing { get; }
    public Length marginBottom { get; }
    public Length marginLeft { get; }
    public Length marginRight { get; }
    public Length marginTop { get; }
    public Length maxHeight { get; }
    public Length maxWidth { get; }
    public Length minHeight { get; }
    public Length minWidth { get; }
    public float opacity { get; }
    public OverflowInternal overflow { get; }
    public Length paddingBottom { get; }
    public Length paddingLeft { get; }
    public Length paddingRight { get; }
    public Length paddingTop { get; }
    public Position position { get; }
    public Length right { get; }
    public Rotate rotate { get; }
    public Scale scale { get; }
    public TextOverflow textOverflow { get; }
    public TextShadow textShadow { get; }
    public Length top { get; }
    public TransformOrigin transformOrigin { get; }
    public List`1<TimeValue> transitionDelay { get; }
    public List`1<TimeValue> transitionDuration { get; }
    public List`1<StylePropertyName> transitionProperty { get; }
    public List`1<EasingFunction> transitionTimingFunction { get; }
    public Translate translate { get; }
    public Color unityBackgroundImageTintColor { get; }
    public Font unityFont { get; }
    public FontDefinition unityFontDefinition { get; }
    public FontStyle unityFontStyleAndWeight { get; }
    public OverflowClipBox unityOverflowClipBox { get; }
    public Length unityParagraphSpacing { get; }
    public int unitySliceBottom { get; }
    public int unitySliceLeft { get; }
    public int unitySliceRight { get; }
    public float unitySliceScale { get; }
    public int unitySliceTop { get; }
    public TextAnchor unityTextAlign { get; }
    public Color unityTextOutlineColor { get; }
    public float unityTextOutlineWidth { get; }
    public TextOverflowPosition unityTextOverflowPosition { get; }
    public Visibility visibility { get; }
    public WhiteSpace whiteSpace { get; }
    public Length width { get; }
    public Length wordSpacing { get; }
    public int get_customPropertiesCount();
    public bool get_hasTransition();
    public static ComputedStyle Create();
    public void FinalizeApply(ComputedStyle& parentStyle);
    public void SyncWithLayout(YogaNode targetNode);
    private bool ApplyGlobalKeyword(StylePropertyReader reader, ComputedStyle& parentStyle);
    private bool ApplyGlobalKeyword(StylePropertyId id, StyleKeyword keyword, ComputedStyle& parentStyle);
    private void RemoveCustomStyleProperty(StylePropertyReader reader);
    private void ApplyCustomStyleProperty(StylePropertyReader reader);
    private void ApplyAllPropertyInitial();
    private void ResetComputedTransitions();
    public static bool StartAnimationInlineTextShadow(VisualElement element, ComputedStyle& computedStyle, StyleTextShadow textShadow, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public static bool StartAnimationInlineRotate(VisualElement element, ComputedStyle& computedStyle, StyleRotate rotate, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public static bool StartAnimationInlineTranslate(VisualElement element, ComputedStyle& computedStyle, StyleTranslate translate, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public static bool StartAnimationInlineScale(VisualElement element, ComputedStyle& computedStyle, StyleScale scale, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public static bool StartAnimationInlineTransformOrigin(VisualElement element, ComputedStyle& computedStyle, StyleTransformOrigin transformOrigin, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public static bool StartAnimationInlineBackgroundSize(VisualElement element, ComputedStyle& computedStyle, StyleBackgroundSize backgroundSize, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public Align get_alignContent();
    public Align get_alignItems();
    public Align get_alignSelf();
    public Color get_backgroundColor();
    public Background get_backgroundImage();
    public BackgroundPosition get_backgroundPositionX();
    public BackgroundPosition get_backgroundPositionY();
    public BackgroundRepeat get_backgroundRepeat();
    public BackgroundSize get_backgroundSize();
    public Color get_borderBottomColor();
    public Length get_borderBottomLeftRadius();
    public Length get_borderBottomRightRadius();
    public float get_borderBottomWidth();
    public Color get_borderLeftColor();
    public float get_borderLeftWidth();
    public Color get_borderRightColor();
    public float get_borderRightWidth();
    public Color get_borderTopColor();
    public Length get_borderTopLeftRadius();
    public Length get_borderTopRightRadius();
    public float get_borderTopWidth();
    public Length get_bottom();
    public Color get_color();
    public Cursor get_cursor();
    public DisplayStyle get_display();
    public Length get_flexBasis();
    public FlexDirection get_flexDirection();
    public float get_flexGrow();
    public float get_flexShrink();
    public Wrap get_flexWrap();
    public Length get_fontSize();
    public Length get_height();
    public Justify get_justifyContent();
    public Length get_left();
    public Length get_letterSpacing();
    public Length get_marginBottom();
    public Length get_marginLeft();
    public Length get_marginRight();
    public Length get_marginTop();
    public Length get_maxHeight();
    public Length get_maxWidth();
    public Length get_minHeight();
    public Length get_minWidth();
    public float get_opacity();
    public OverflowInternal get_overflow();
    public Length get_paddingBottom();
    public Length get_paddingLeft();
    public Length get_paddingRight();
    public Length get_paddingTop();
    public Position get_position();
    public Length get_right();
    public Rotate get_rotate();
    public Scale get_scale();
    public TextOverflow get_textOverflow();
    public TextShadow get_textShadow();
    public Length get_top();
    public TransformOrigin get_transformOrigin();
    public List`1<TimeValue> get_transitionDelay();
    public List`1<TimeValue> get_transitionDuration();
    public List`1<StylePropertyName> get_transitionProperty();
    public List`1<EasingFunction> get_transitionTimingFunction();
    public Translate get_translate();
    public Color get_unityBackgroundImageTintColor();
    public Font get_unityFont();
    public FontDefinition get_unityFontDefinition();
    public FontStyle get_unityFontStyleAndWeight();
    public OverflowClipBox get_unityOverflowClipBox();
    public Length get_unityParagraphSpacing();
    public int get_unitySliceBottom();
    public int get_unitySliceLeft();
    public int get_unitySliceRight();
    public float get_unitySliceScale();
    public int get_unitySliceTop();
    public TextAnchor get_unityTextAlign();
    public Color get_unityTextOutlineColor();
    public float get_unityTextOutlineWidth();
    public TextOverflowPosition get_unityTextOverflowPosition();
    public Visibility get_visibility();
    public WhiteSpace get_whiteSpace();
    public Length get_width();
    public Length get_wordSpacing();
    public static ComputedStyle Create(ComputedStyle& parentStyle);
    public static ComputedStyle CreateInitial();
    public ComputedStyle Acquire();
    public void Release();
    public void CopyFrom(ComputedStyle& other);
    public void ApplyProperties(StylePropertyReader reader, ComputedStyle& parentStyle);
    public void ApplyStyleValue(StyleValue sv, ComputedStyle& parentStyle);
    public void ApplyStyleValueManaged(StyleValueManaged sv, ComputedStyle& parentStyle);
    public void ApplyStyleCursor(Cursor cursor);
    public void ApplyStyleTextShadow(TextShadow st);
    public void ApplyFromComputedStyle(StylePropertyId id, ComputedStyle& other);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Length newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, float newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, int newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, BackgroundPosition newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, BackgroundRepeat newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, BackgroundSize newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Color newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Background newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Font newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, FontDefinition newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, TextShadow newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Translate newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, TransformOrigin newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Rotate newValue);
    public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Scale newValue);
    public static bool StartAnimation(VisualElement element, StylePropertyId id, ComputedStyle& oldStyle, ComputedStyle& newStyle, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public static bool StartAnimationAllProperty(VisualElement element, ComputedStyle& oldStyle, ComputedStyle& newStyle, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public static bool StartAnimationInline(VisualElement element, StylePropertyId id, ComputedStyle& computedStyle, StyleValue sv, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public void ApplyStyleTransformOrigin(TransformOrigin st);
    public void ApplyStyleTranslate(Translate translateValue);
    public void ApplyStyleRotate(Rotate rotateValue);
    public void ApplyStyleScale(Scale scaleValue);
    public void ApplyStyleBackgroundSize(BackgroundSize backgroundSizeValue);
    public void ApplyInitialValue(StylePropertyReader reader);
    public void ApplyInitialValue(StylePropertyId id);
    public void ApplyUnsetValue(StylePropertyReader reader, ComputedStyle& parentStyle);
    public void ApplyUnsetValue(StylePropertyId id, ComputedStyle& parentStyle);
    public static VersionChangeType CompareChanges(ComputedStyle& x, ComputedStyle& y);
}
internal class UnityEngine.UIElements.ComputedTransitionProperty : ValueType {
    public StylePropertyId id;
    public int durationMs;
    public int delayMs;
    public Func`2<float, float> easingCurve;
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.ComputedTransitionUtils : object {
    private static List`1<ComputedTransitionProperty> s_ComputedTransitionsBuffer;
    private static ComputedTransitionUtils();
    internal static void UpdateComputedTransitions(ComputedStyle& computedStyle);
    [ExtensionAttribute]
internal static bool HasTransitionProperty(ComputedStyle& computedStyle, StylePropertyId id);
    [ExtensionAttribute]
internal static bool GetTransitionProperty(ComputedStyle& computedStyle, StylePropertyId id, ComputedTransitionProperty& result);
    private static ComputedTransitionProperty[] GetOrComputeTransitionPropertyData(ComputedStyle& computedStyle);
    private static int GetTransitionHashCode(ComputedStyle& cs);
    internal static bool SameTransitionProperty(ComputedStyle& x, ComputedStyle& y);
    private static bool SameTransitionProperty(List`1<StylePropertyName> a, List`1<StylePropertyName> b);
    private static bool SameTransitionProperty(List`1<TimeValue> a, List`1<TimeValue> b);
    private static void ComputeTransitionPropertyData(ComputedStyle& computedStyle, List`1<ComputedTransitionProperty> outData);
    private static T GetWrappingTransitionData(List`1<T> list, int i, T defaultValue);
    private static int ConvertTransitionTime(TimeValue time);
    private static Func`2<float, float> ConvertTransitionFunction(EasingMode mode);
}
public class UnityEngine.UIElements.ContextClickEvent : MouseEventBase`1<ContextClickEvent> {
    private static ContextClickEvent();
}
public enum UnityEngine.UIElements.ContextType : Enum {
    public int value__;
    public static ContextType Player;
    public static ContextType Editor;
}
public abstract class UnityEngine.UIElements.ContextualMenuManager : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <displayMenuHandledOSX>k__BackingField;
    internal bool displayMenuHandledOSX { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_displayMenuHandledOSX();
    [CompilerGeneratedAttribute]
internal void set_displayMenuHandledOSX(bool value);
    public abstract virtual void DisplayMenuIfEventMatches(EventBase evt, IEventHandler eventHandler);
    public void DisplayMenu(EventBase triggerEvent, IEventHandler target);
    protected internal abstract virtual void DoDisplayMenu(DropdownMenu menu, EventBase triggerEvent);
}
public class UnityEngine.UIElements.ContextualMenuManipulator : MouseManipulator {
    private Action`1<ContextualMenuPopulateEvent> m_MenuBuilder;
    public ContextualMenuManipulator(Action`1<ContextualMenuPopulateEvent> menuBuilder);
    protected virtual void RegisterCallbacksOnTarget();
    protected virtual void UnregisterCallbacksFromTarget();
    private void OnMouseUpDownEvent(IMouseEvent evt);
    private void OnMouseDownEventOSX(MouseDownEvent evt);
    private void OnMouseUpEventOSX(MouseUpEvent evt);
    private void OnKeyUpEvent(KeyUpEvent evt);
    private void DoDisplayMenu(EventBase evt);
    private void OnContextualMenuEvent(ContextualMenuPopulateEvent evt);
}
public class UnityEngine.UIElements.ContextualMenuPopulateEvent : MouseEventBase`1<ContextualMenuPopulateEvent> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DropdownMenu <menu>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventBase <triggerEvent>k__BackingField;
    private ContextualMenuManager m_ContextualMenuManager;
    public DropdownMenu menu { get; private set; }
    public EventBase triggerEvent { get; private set; }
    private static ContextualMenuPopulateEvent();
    [CompilerGeneratedAttribute]
public DropdownMenu get_menu();
    [CompilerGeneratedAttribute]
private void set_menu(DropdownMenu value);
    [CompilerGeneratedAttribute]
public EventBase get_triggerEvent();
    [CompilerGeneratedAttribute]
private void set_triggerEvent(EventBase value);
    public static ContextualMenuPopulateEvent GetPooled(EventBase triggerEvent, DropdownMenu menu, IEventHandler target, ContextualMenuManager menuManager);
    protected virtual void Init();
    private void LocalInit();
    protected internal virtual void PostDispatch(IPanel panel);
}
internal class UnityEngine.UIElements.CountingBloomFilter : ValueType {
    private static int KEY_SIZE;
    private static UInt32 ARRAY_SIZE;
    private static int KEY_MASK;
    [FixedBufferAttribute("System.Byte", "16384")]
private <m_Counters>e__FixedBuffer m_Counters;
    private void AdjustSlot(UInt32 index, bool increment);
    private UInt32 Hash1(UInt32 hash);
    private UInt32 Hash2(UInt32 hash);
    private bool IsSlotEmpty(UInt32 index);
    public void InsertHash(UInt32 hash);
    public void RemoveHash(UInt32 hash);
    public bool ContainsHash(UInt32 hash);
}
public class UnityEngine.UIElements.CreationContext : ValueType {
    public static CreationContext Default;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <target>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualTreeAsset <visualTreeAsset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, VisualElement> <slotInsertionPoints>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private List`1<AttributeOverride> <attributeOverrides>k__BackingField;
    public VisualElement target { get; private set; }
    public VisualTreeAsset visualTreeAsset { get; private set; }
    public Dictionary`2<string, VisualElement> slotInsertionPoints { get; private set; }
    internal List`1<AttributeOverride> attributeOverrides { get; private set; }
    internal CreationContext(Dictionary`2<string, VisualElement> slotInsertionPoints, VisualTreeAsset vta, VisualElement target);
    internal CreationContext(Dictionary`2<string, VisualElement> slotInsertionPoints, List`1<AttributeOverride> attributeOverrides, VisualTreeAsset vta, VisualElement target);
    private static CreationContext();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public VisualElement get_target();
    [CompilerGeneratedAttribute]
private void set_target(VisualElement value);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public VisualTreeAsset get_visualTreeAsset();
    [CompilerGeneratedAttribute]
private void set_visualTreeAsset(VisualTreeAsset value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Dictionary`2<string, VisualElement> get_slotInsertionPoints();
    [CompilerGeneratedAttribute]
private void set_slotInsertionPoints(Dictionary`2<string, VisualElement> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal List`1<AttributeOverride> get_attributeOverrides();
    [CompilerGeneratedAttribute]
private void set_attributeOverrides(List`1<AttributeOverride> value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CreationContext other);
    public virtual int GetHashCode();
    public static bool op_Equality(CreationContext context1, CreationContext context2);
    public static bool op_Inequality(CreationContext context1, CreationContext context2);
}
public class UnityEngine.UIElements.Cursor : ValueType {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Texture2D <texture>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Vector2 <hotspot>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <defaultCursorId>k__BackingField;
    public Texture2D texture { get; public set; }
    public Vector2 hotspot { get; public set; }
    internal int defaultCursorId { get; internal set; }
    internal static IEnumerable`1<Type> allowedAssetTypes { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Texture2D get_texture();
    [CompilerGeneratedAttribute]
public void set_texture(Texture2D value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Vector2 get_hotspot();
    [CompilerGeneratedAttribute]
public void set_hotspot(Vector2 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal int get_defaultCursorId();
    [CompilerGeneratedAttribute]
internal void set_defaultCursorId(int value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Cursor other);
    public virtual int GetHashCode();
    [IteratorStateMachineAttribute("UnityEngine.UIElements.Cursor/<get_allowedAssetTypes>d__16")]
internal static IEnumerable`1<Type> get_allowedAssetTypes();
    public static bool op_Equality(Cursor style1, Cursor style2);
    public static bool op_Inequality(Cursor style1, Cursor style2);
    public virtual string ToString();
}
internal class UnityEngine.UIElements.CursorManager : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <isCursorOverriden>k__BackingField;
    public bool isCursorOverriden { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_isCursorOverriden();
    [CompilerGeneratedAttribute]
private void set_isCursorOverriden(bool value);
    public sealed virtual void SetCursor(Cursor cursor);
    public sealed virtual void ResetCursor();
}
internal class UnityEngine.UIElements.CursorPositionStylePainterParameters : ValueType {
    public Rect rect;
    public string text;
    public Font font;
    public int fontSize;
    public FontStyle fontStyle;
    public TextAnchor anchor;
    public float wordWrapWidth;
    public bool richText;
    public int cursorIndex;
    public static CursorPositionStylePainterParameters GetDefault(VisualElement ve, string text);
    internal TextNativeSettings GetTextNativeSettings(float scaling);
}
public class UnityEngine.UIElements.CustomStyleProperty`1 : ValueType {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <name>k__BackingField;
    public string name { get; private set; }
    public CustomStyleProperty`1(string propertyName);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
private void set_name(string value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CustomStyleProperty`1<T> other);
    public virtual int GetHashCode();
    public static bool op_Equality(CustomStyleProperty`1<T> a, CustomStyleProperty`1<T> b);
    public static bool op_Inequality(CustomStyleProperty`1<T> a, CustomStyleProperty`1<T> b);
}
[EventCategoryAttribute("7")]
public class UnityEngine.UIElements.CustomStyleResolvedEvent : EventBase`1<CustomStyleResolvedEvent> {
    public ICustomStyle customStyle { get; }
    private static CustomStyleResolvedEvent();
    public ICustomStyle get_customStyle();
}
internal class UnityEngine.UIElements.DebuggerEventDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public sealed virtual void DispatchEvent(EventBase evt, IPanel panel);
    public void PostDispatch(EventBase evt, IPanel panel);
}
internal class UnityEngine.UIElements.DefaultDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public sealed virtual void DispatchEvent(EventBase evt, IPanel panel);
}
internal class UnityEngine.UIElements.DefaultDragAndDropClient : DragAndDropData {
    private Hashtable m_GenericData;
    private Label m_DraggedInfoLabel;
    private DragVisualMode m_VisualMode;
    private IEnumerable`1<Object> m_UnityObjectReferences;
    public DragVisualMode visualMode { get; }
    public object source { get; }
    public IEnumerable`1<Object> unityObjectReferences { get; }
    public DragAndDropData data { get; }
    public virtual DragVisualMode get_visualMode();
    public virtual object get_source();
    public virtual IEnumerable`1<Object> get_unityObjectReferences();
    public virtual object GetGenericData(string key);
    public virtual void SetGenericData(string key, object value);
    public sealed virtual void StartDrag(StartDragArgs args, Vector3 pointerPosition);
    public sealed virtual void UpdateDrag(Vector3 pointerPosition);
    public sealed virtual void AcceptDrag();
    public sealed virtual void SetVisualMode(DragVisualMode mode);
    public sealed virtual void DragCleanup();
    public sealed virtual DragAndDropData get_data();
}
internal class UnityEngine.UIElements.DefaultEventSystem : object {
    internal static Func`1<bool> IsEditorRemoteConnected;
    private IInput m_Input;
    private string m_HorizontalAxis;
    private string m_VerticalAxis;
    private string m_SubmitButton;
    private string m_CancelButton;
    private float m_InputActionsPerSecond;
    private float m_RepeatDelay;
    private bool m_SendingTouchEvents;
    private bool m_SendingPenEvent;
    private Event m_Event;
    private BaseRuntimePanel m_FocusedPanel;
    private BaseRuntimePanel m_PreviousFocusedPanel;
    private Focusable m_PreviousFocusedElement;
    private EventModifiers m_CurrentModifiers;
    private int m_LastMousePressButton;
    private float m_NextMousePressTime;
    private int m_LastMouseClickCount;
    private Vector2 m_LastMousePosition;
    private bool m_MouseProcessedAtLeastOnce;
    private int m_ConsecutiveMoveCount;
    private Vector2 m_LastMoveVector;
    private float m_PrevActionTime;
    private bool m_IsMoveFromKeyboard;
    private bool isAppFocused { get; }
    internal IInput input { get; internal set; }
    public BaseRuntimePanel focusedPanel { get; public set; }
    private static DefaultEventSystem();
    private bool get_isAppFocused();
    internal IInput get_input();
    internal void set_input(IInput value);
    private IInput GetDefaultInput();
    private bool ShouldIgnoreEventsOnAppNotFocused();
    public BaseRuntimePanel get_focusedPanel();
    public void set_focusedPanel(BaseRuntimePanel value);
    public void Reset();
    public void Update(UpdateMode updateMode);
    internal FocusBasedEventSequenceContext FocusBasedEventSequence();
    private void SendIMGUIEvents();
    private void ProcessMouseEvents();
    private void SendInputEvents();
    internal void OnFocusEvent(RuntimePanel panel, FocusEvent evt);
    internal void SendFocusBasedEvent(Func`2<TArg, EventBase> evtFactory, TArg arg);
    internal void SendPositionBasedEvent(Vector3 mousePosition, Vector3 delta, int pointerId, Func`4<Vector3, Vector3, TArg, EventBase> evtFactory, TArg arg, bool deselectIfNoTarget);
    private void SendPositionBasedEvent(Vector3 mousePosition, Vector3 delta, int pointerId, Nullable`1<int> targetDisplay, Func`4<Vector3, Vector3, TArg, EventBase> evtFactory, TArg arg, bool deselectIfNoTarget);
    private void UpdateFocusedPanel(BaseRuntimePanel runtimePanel);
    private static EventBase MakeTouchEvent(Touch touch, EventModifiers modifiers);
    private static EventBase MakePenEvent(PenData pen, EventModifiers modifiers);
    private bool ProcessTouchEvents();
    private bool ProcessPenEvents();
    private Vector2 GetRawMoveVector();
    private bool ShouldSendMoveFromInput();
    private void ProcessTabEvent(Event e, EventModifiers modifiers);
}
internal class UnityEngine.UIElements.DefaultGroupManager : object {
    private List`1<IGroupBoxOption> m_GroupOptions;
    private IGroupBoxOption m_SelectedOption;
    private IGroupBox m_GroupBox;
    public sealed virtual void Init(IGroupBox groupBox);
    public sealed virtual IGroupBoxOption GetSelectedOption();
    public sealed virtual void OnOptionSelectionChanged(IGroupBoxOption selectedOption);
    public sealed virtual void RegisterOption(IGroupBoxOption option);
    public sealed virtual void UnregisterOption(IGroupBoxOption option);
}
internal class UnityEngine.UIElements.DefaultMultiColumnTreeViewController`1 : MultiColumnTreeViewController {
    private TreeDataController`1<T> m_TreeDataController;
    private TreeDataController`1<T> treeDataController { get; }
    public IList itemsSource { get; public set; }
    public DefaultMultiColumnTreeViewController`1(Columns columns, SortColumnDescriptions sortDescriptions, List`1<SortColumnDescription> sortedColumns);
    private TreeDataController`1<T> get_treeDataController();
    public virtual IList get_itemsSource();
    public virtual void set_itemsSource(IList value);
    public sealed virtual void SetRootItems(IList`1<TreeViewItemData`1<T>> items);
    public virtual void AddItem(TreeViewItemData`1& modreq(System.Runtime.InteropServices.InAttribute) item, int parentId, int childIndex, bool rebuildTree);
    public virtual TreeViewItemData`1<T> GetTreeViewItemDataForId(int id);
    public virtual TreeViewItemData`1<T> GetTreeViewItemDataForIndex(int index);
    public virtual bool TryRemoveItem(int id, bool rebuildTree);
    public sealed virtual T GetDataForId(int id);
    public sealed virtual T GetDataForIndex(int index);
    public virtual object GetItemForIndex(int index);
    public virtual int GetParentId(int id);
    public virtual bool HasChildren(int id);
    public virtual IEnumerable`1<int> GetChildrenIds(int id);
    public virtual void Move(int id, int newParentId, int childIndex, bool rebuildTree);
    private bool IsChildOf(int childId, int id);
    public virtual IEnumerable`1<int> GetAllItemIds(IEnumerable`1<int> rootIds);
}
internal class UnityEngine.UIElements.DefaultTreeViewController`1 : TreeViewController {
    private TreeDataController`1<T> m_TreeDataController;
    private TreeDataController`1<T> treeDataController { get; }
    public IList itemsSource { get; public set; }
    private TreeDataController`1<T> get_treeDataController();
    public virtual IList get_itemsSource();
    public virtual void set_itemsSource(IList value);
    public sealed virtual void SetRootItems(IList`1<TreeViewItemData`1<T>> items);
    public virtual void AddItem(TreeViewItemData`1& modreq(System.Runtime.InteropServices.InAttribute) item, int parentId, int childIndex, bool rebuildTree);
    public virtual bool TryRemoveItem(int id, bool rebuildTree);
    public virtual object GetItemDataForId(int id);
    public virtual TreeViewItemData`1<T> GetTreeViewItemDataForId(int id);
    public virtual TreeViewItemData`1<T> GetTreeViewItemDataForIndex(int index);
    public virtual T GetDataForId(int id);
    public virtual T GetDataForIndex(int index);
    public virtual object GetItemForIndex(int index);
    public virtual int GetParentId(int id);
    public virtual bool HasChildren(int id);
    public virtual IEnumerable`1<int> GetChildrenIds(int id);
    public virtual void Move(int id, int newParentId, int childIndex, bool rebuildTree);
    private bool IsChildOf(int childId, int id);
    public virtual IEnumerable`1<int> GetAllItemIds(IEnumerable`1<int> rootIds);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public enum UnityEngine.UIElements.DeltaSpeed : Enum {
    public int value__;
    public static DeltaSpeed Fast;
    public static DeltaSpeed Normal;
    public static DeltaSpeed Slow;
}
public class UnityEngine.UIElements.DetachFromPanelEvent : PanelChangedEventBase`1<DetachFromPanelEvent> {
    private static DetachFromPanelEvent();
}
internal enum UnityEngine.UIElements.DispatchMode : Enum {
    public int value__;
    public static DispatchMode Default;
    public static DispatchMode Queued;
    public static DispatchMode Immediate;
}
public enum UnityEngine.UIElements.DisplayStyle : Enum {
    public int value__;
    public static DisplayStyle Flex;
    public static DisplayStyle None;
}
internal class UnityEngine.UIElements.DisposeHelper : object {
    [ConditionalAttribute("UNITY_UIELEMENTS_DEBUG_DISPOSE")]
public static void NotifyMissingDispose(IDisposable disposable);
    public static void NotifyDisposedUsed(IDisposable disposable);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.DoubleField : TextValueField`1<double> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    private DoubleInput doubleInput { get; }
    public DoubleField(int maxLength);
    public DoubleField(string label, int maxLength);
    private static DoubleField();
    private DoubleInput get_doubleInput();
    protected virtual string ValueToString(double v);
    protected virtual double StringToValue(string str);
    internal virtual bool CanTryParse(string textString);
    public virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, double startValue);
}
internal class UnityEngine.UIElements.DragAndDropArgs : ValueType {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private object <target>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <insertAtIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <parentId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <childIndex>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private DragAndDropPosition <dragAndDropPosition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DragAndDropData <dragAndDropData>k__BackingField;
    public object target { get; public set; }
    public int insertAtIndex { get; public set; }
    public int parentId { get; public set; }
    public int childIndex { get; public set; }
    public DragAndDropPosition dragAndDropPosition { get; public set; }
    public DragAndDropData dragAndDropData { get; public set; }
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public sealed virtual object get_target();
    [CompilerGeneratedAttribute]
public void set_target(object value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_insertAtIndex();
    [CompilerGeneratedAttribute]
public void set_insertAtIndex(int value);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public sealed virtual int get_parentId();
    [CompilerGeneratedAttribute]
public void set_parentId(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_childIndex();
    [CompilerGeneratedAttribute]
public void set_childIndex(int value);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public sealed virtual DragAndDropPosition get_dragAndDropPosition();
    [CompilerGeneratedAttribute]
public void set_dragAndDropPosition(DragAndDropPosition value);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public sealed virtual DragAndDropData get_dragAndDropData();
    [CompilerGeneratedAttribute]
public void set_dragAndDropData(DragAndDropData value);
}
internal abstract class UnityEngine.UIElements.DragAndDropData : object {
    internal static string dragSourceKey;
    private object UnityEngine.UIElements.IDragAndDropData.userData { get; }
    public object source { get; }
    public DragVisualMode visualMode { get; }
    public IEnumerable`1<Object> unityObjectReferences { get; }
    public abstract virtual object GetGenericData(string key);
    private sealed virtual override object UnityEngine.UIElements.IDragAndDropData.get_userData();
    public abstract virtual void SetGenericData(string key, object data);
    public abstract virtual object get_source();
    public abstract virtual DragVisualMode get_visualMode();
    public abstract virtual IEnumerable`1<Object> get_unityObjectReferences();
}
internal enum UnityEngine.UIElements.DragAndDropPosition : Enum {
    public int value__;
    public static DragAndDropPosition OverItem;
    public static DragAndDropPosition BetweenItems;
    public static DragAndDropPosition OutsideItems;
}
internal static class UnityEngine.UIElements.DragAndDropUtility : object {
    private static Func`1<IDragAndDrop> s_MakeDragAndDropClientFunc;
    private static IDragAndDrop s_DragAndDropEditor;
    private static IDragAndDrop s_DragAndDropPlayMode;
    internal static IDragAndDrop GetDragAndDrop(IPanel panel);
    internal static void RegisterMakeClientFunc(Func`1<IDragAndDrop> makeClient);
}
internal abstract class UnityEngine.UIElements.DragEventsProcessor : object {
    private bool m_IsRegistered;
    private DragState m_DragState;
    private Vector3 m_Start;
    protected VisualElement m_Target;
    internal bool isRegistered { get; }
    internal DragState dragState { get; }
    protected bool supportsDragEvents { get; }
    private bool useDragEvents { get; }
    protected IDragAndDrop dragAndDrop { get; }
    internal bool isEditorContext { get; }
    internal DragEventsProcessor(VisualElement target);
    internal bool get_isRegistered();
    internal DragState get_dragState();
    protected virtual bool get_supportsDragEvents();
    private bool get_useDragEvents();
    protected IDragAndDrop get_dragAndDrop();
    internal virtual bool get_isEditorContext();
    private void RegisterCallbacksFromTarget(AttachToPanelEvent evt);
    private void RegisterCallbacksFromTarget();
    private void UnregisterCallbacksFromTarget(DetachFromPanelEvent evt);
    internal void UnregisterCallbacksFromTarget(bool unregisterPanelEvents);
    protected abstract virtual bool CanStartDrag(Vector3 pointerPosition);
    protected internal abstract virtual StartDragArgs StartDrag(Vector3 pointerPosition);
    protected internal abstract virtual void UpdateDrag(Vector3 pointerPosition);
    protected internal abstract virtual void OnDrop(Vector3 pointerPosition);
    protected abstract virtual void ClearDragAndDropUI(bool dragCancelled);
    private void OnPointerDownEvent(PointerDownEvent evt);
    internal void OnPointerUpEvent(PointerUpEvent evt);
    private void OnPointerLeaveEvent(PointerLeaveEvent evt);
    private void OnPointerCancelEvent(PointerCancelEvent evt);
    private void OnPointerCapturedOut(PointerCaptureOutEvent evt);
    private void OnPointerMoveEvent(PointerMoveEvent evt);
    private DragEventsProcessor GetDropTarget(Vector2 position);
}
internal enum UnityEngine.UIElements.DragVisualMode : Enum {
    public int value__;
    public static DragVisualMode None;
    public static DragVisualMode Copy;
    public static DragVisualMode Move;
    public static DragVisualMode Rejected;
}
public class UnityEngine.UIElements.DropdownField : PopupField`1<string> {
    public DropdownField(string label);
    public DropdownField(List`1<string> choices, string defaultValue, Func`2<string, string> formatSelectedValueCallback, Func`2<string, string> formatListItemCallback);
    public DropdownField(string label, List`1<string> choices, string defaultValue, Func`2<string, string> formatSelectedValueCallback, Func`2<string, string> formatListItemCallback);
    public DropdownField(List`1<string> choices, int defaultIndex, Func`2<string, string> formatSelectedValueCallback, Func`2<string, string> formatListItemCallback);
    public DropdownField(string label, List`1<string> choices, int defaultIndex, Func`2<string, string> formatSelectedValueCallback, Func`2<string, string> formatListItemCallback);
}
public class UnityEngine.UIElements.DropdownMenu : object {
    private List`1<DropdownMenuItem> m_MenuItems;
    private DropdownMenuEventInfo m_DropdownMenuEventInfo;
    public List`1<DropdownMenuItem> MenuItems();
    public void AppendAction(string actionName, Action`1<DropdownMenuAction> action, Func`2<DropdownMenuAction, Status> actionStatusCallback, object userData);
    public void AppendAction(string actionName, Action`1<DropdownMenuAction> action, Status status);
    public void InsertAction(int atIndex, string actionName, Action`1<DropdownMenuAction> action, Func`2<DropdownMenuAction, Status> actionStatusCallback, object userData);
    public void InsertAction(int atIndex, string actionName, Action`1<DropdownMenuAction> action, Status status);
    public void AppendSeparator(string subMenuPath);
    public void InsertSeparator(string subMenuPath, int atIndex);
    public void RemoveItemAt(int index);
    public void ClearItems();
    public void PrepareForDisplay(EventBase e);
}
public class UnityEngine.UIElements.DropdownMenuAction : DropdownMenuItem {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Status <status>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private DropdownMenuEventInfo <eventInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <userData>k__BackingField;
    private Action`1<DropdownMenuAction> actionCallback;
    private Func`2<DropdownMenuAction, Status> actionStatusCallback;
    public string name { get; }
    public Status status { get; private set; }
    public DropdownMenuEventInfo eventInfo { get; private set; }
    public object userData { get; private set; }
    public DropdownMenuAction(string actionName, Action`1<DropdownMenuAction> actionCallback, Func`2<DropdownMenuAction, Status> actionStatusCallback, object userData);
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
public Status get_status();
    [CompilerGeneratedAttribute]
private void set_status(Status value);
    [CompilerGeneratedAttribute]
public DropdownMenuEventInfo get_eventInfo();
    [CompilerGeneratedAttribute]
private void set_eventInfo(DropdownMenuEventInfo value);
    [CompilerGeneratedAttribute]
public object get_userData();
    [CompilerGeneratedAttribute]
private void set_userData(object value);
    public static Status AlwaysEnabled(DropdownMenuAction a);
    public static Status AlwaysDisabled(DropdownMenuAction a);
    public void UpdateActionStatus(DropdownMenuEventInfo eventInfo);
    public void Execute();
}
public class UnityEngine.UIElements.DropdownMenuEventInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventModifiers <modifiers>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Vector2 <mousePosition>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Vector2 <localMousePosition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private char <character>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyCode <keyCode>k__BackingField;
    public EventModifiers modifiers { get; }
    public Vector2 mousePosition { get; }
    public Vector2 localMousePosition { get; }
    private char character { get; }
    private KeyCode keyCode { get; }
    public DropdownMenuEventInfo(EventBase e);
    [CompilerGeneratedAttribute]
public EventModifiers get_modifiers();
    [CompilerGeneratedAttribute]
public Vector2 get_mousePosition();
    [CompilerGeneratedAttribute]
public Vector2 get_localMousePosition();
    [CompilerGeneratedAttribute]
private char get_character();
    [CompilerGeneratedAttribute]
private KeyCode get_keyCode();
}
public abstract class UnityEngine.UIElements.DropdownMenuItem : object {
}
public class UnityEngine.UIElements.DropdownMenuSeparator : DropdownMenuItem {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <subMenuPath>k__BackingField;
    public string subMenuPath { get; }
    public DropdownMenuSeparator(string subMenuPath);
    [CompilerGeneratedAttribute]
public string get_subMenuPath();
}
internal static class UnityEngine.UIElements.DropdownUtility : object {
    internal static Func`1<IGenericMenu> MakeDropdownFunc;
    internal static IGenericMenu CreateDropdown();
}
internal class UnityEngine.UIElements.DynamicAtlas : AtlasBase {
    private Dictionary`2<Texture, TextureInfo> m_Database;
    private DynamicAtlasPage m_PointPage;
    private DynamicAtlasPage m_BilinearPage;
    private ColorSpace m_ColorSpace;
    private List`1<IPanel> m_Panels;
    private int m_MinAtlasSize;
    private int m_MaxAtlasSize;
    private int m_MaxSubTextureSize;
    private DynamicAtlasFilters m_ActiveFilters;
    private DynamicAtlasCustomFilter m_CustomFilter;
    internal bool isInitialized { get; }
    public int minAtlasSize { get; public set; }
    public int maxAtlasSize { get; public set; }
    public static DynamicAtlasFilters defaultFilters { get; }
    public DynamicAtlasFilters activeFilters { get; public set; }
    public int maxSubTextureSize { get; public set; }
    public DynamicAtlasCustomFilter customFilter { get; public set; }
    internal bool get_isInitialized();
    protected virtual void OnAssignedToPanel(IPanel panel);
    protected virtual void OnRemovedFromPanel(IPanel panel);
    public virtual void Reset();
    private void InitPages();
    private void DestroyPages();
    public virtual bool TryGetAtlas(VisualElement ve, Texture2D src, TextureId& atlas, RectInt& atlasRect);
    public virtual void ReturnAtlas(VisualElement ve, Texture2D src, TextureId atlas);
    protected virtual void OnUpdateDynamicTextures(IPanel panel);
    internal static bool IsTextureFormatSupported(TextureFormat format);
    public virtual bool IsTextureValid(Texture2D texture, FilterMode atlasFilterMode);
    public void SetDirty(Texture2D tex);
    public int get_minAtlasSize();
    public void set_minAtlasSize(int value);
    public int get_maxAtlasSize();
    public void set_maxAtlasSize(int value);
    public static DynamicAtlasFilters get_defaultFilters();
    public DynamicAtlasFilters get_activeFilters();
    public void set_activeFilters(DynamicAtlasFilters value);
    public int get_maxSubTextureSize();
    public void set_maxSubTextureSize(int value);
    public DynamicAtlasCustomFilter get_customFilter();
    public void set_customFilter(DynamicAtlasCustomFilter value);
}
internal class UnityEngine.UIElements.DynamicAtlasCore : object {
    private int m_InitialSize;
    private UIRAtlasAllocator m_Allocator;
    private Dictionary`2<Texture2D, RectInt> m_UVs;
    private bool m_ForceReblitAll;
    private FilterMode m_FilterMode;
    private ColorSpace m_ColorSpace;
    private TextureBlitter m_Blitter;
    private int m_2SidePadding;
    private int m_1SidePadding;
    private int m_MaxAtlasSize;
    private static ProfilerMarker s_MarkerReset;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <maxImageSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RenderTextureFormat <format>k__BackingField;
    private static int s_TextureCounter;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private RenderTexture <atlas>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <disposed>k__BackingField;
    public int maxImageSize { get; }
    public RenderTextureFormat format { get; }
    public RenderTexture atlas { get; private set; }
    protected bool disposed { get; private set; }
    public DynamicAtlasCore(RenderTextureFormat format, FilterMode filterMode, int maxImageSize, int initialSize, int maxAtlasSize);
    private static DynamicAtlasCore();
    [CompilerGeneratedAttribute]
public int get_maxImageSize();
    [CompilerGeneratedAttribute]
public RenderTextureFormat get_format();
    [CompilerGeneratedAttribute]
public RenderTexture get_atlas();
    [CompilerGeneratedAttribute]
private void set_atlas(RenderTexture value);
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static void LogDisposeError();
    public bool IsReleased();
    public bool TryGetRect(Texture2D image, RectInt& uvs, Func`2<Texture2D, bool> filter);
    public void UpdateTexture(Texture2D image);
    public bool AllocateRect(int width, int height, RectInt& uvs);
    public void EnqueueBlit(Texture image, RectInt srcRect, int x, int y, bool addBorder, Color tint);
    public void Commit();
    private void UpdateAtlasTexture();
    private RenderTexture CreateAtlasTexture();
}
public class UnityEngine.UIElements.DynamicAtlasCustomFilter : MulticastDelegate {
    public DynamicAtlasCustomFilter(object object, IntPtr method);
    public virtual bool Invoke(Texture2D texture, DynamicAtlasFilters& filtersToApply);
    public virtual IAsyncResult BeginInvoke(Texture2D texture, DynamicAtlasFilters& filtersToApply, AsyncCallback callback, object object);
    public virtual bool EndInvoke(DynamicAtlasFilters& filtersToApply, IAsyncResult result);
}
[FlagsAttribute]
public enum UnityEngine.UIElements.DynamicAtlasFilters : Enum {
    public int value__;
    public static DynamicAtlasFilters None;
    public static DynamicAtlasFilters Readability;
    public static DynamicAtlasFilters Size;
    public static DynamicAtlasFilters Format;
    public static DynamicAtlasFilters ColorSpace;
    public static DynamicAtlasFilters FilterMode;
}
internal class UnityEngine.UIElements.DynamicAtlasPage : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TextureId <textureId>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private RenderTexture <atlas>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RenderTextureFormat <format>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private FilterMode <filterMode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2Int <minSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2Int <maxSize>k__BackingField;
    private int m_1Padding;
    private int m_2Padding;
    private Allocator2D m_Allocator;
    private TextureBlitter m_Blitter;
    private Vector2Int m_CurrentSize;
    private static int s_TextureCounter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    public TextureId textureId { get; private set; }
    public RenderTexture atlas { get; private set; }
    public RenderTextureFormat format { get; }
    public FilterMode filterMode { get; }
    public Vector2Int minSize { get; }
    public Vector2Int maxSize { get; }
    public Vector2Int currentSize { get; }
    protected bool disposed { get; private set; }
    public DynamicAtlasPage(RenderTextureFormat format, FilterMode filterMode, Vector2Int minSize, Vector2Int maxSize);
    [CompilerGeneratedAttribute]
public TextureId get_textureId();
    [CompilerGeneratedAttribute]
private void set_textureId(TextureId value);
    [CompilerGeneratedAttribute]
public RenderTexture get_atlas();
    [CompilerGeneratedAttribute]
private void set_atlas(RenderTexture value);
    [CompilerGeneratedAttribute]
public RenderTextureFormat get_format();
    [CompilerGeneratedAttribute]
public FilterMode get_filterMode();
    [CompilerGeneratedAttribute]
public Vector2Int get_minSize();
    [CompilerGeneratedAttribute]
public Vector2Int get_maxSize();
    public Vector2Int get_currentSize();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool TryAdd(Texture2D image, Alloc2D& alloc, RectInt& rect);
    public void Update(Texture2D image, RectInt rect);
    public void Remove(Alloc2D alloc);
    public void Commit();
    private void UpdateAtlasTexture();
    private RenderTexture CreateAtlasTexture();
}
public class UnityEngine.UIElements.DynamicAtlasSettings : object {
    [SerializeField]
[HideInInspector]
private int m_MinAtlasSize;
    [HideInInspector]
[SerializeField]
private int m_MaxAtlasSize;
    [HideInInspector]
[SerializeField]
private int m_MaxSubTextureSize;
    [SerializeField]
[HideInInspector]
private DynamicAtlasFilters m_ActiveFilters;
    private DynamicAtlasCustomFilter m_CustomFilter;
    public int minAtlasSize { get; public set; }
    public int maxAtlasSize { get; public set; }
    public int maxSubTextureSize { get; public set; }
    public DynamicAtlasFilters activeFilters { get; public set; }
    public static DynamicAtlasFilters defaultFilters { get; }
    public DynamicAtlasCustomFilter customFilter { get; public set; }
    public static DynamicAtlasSettings defaults { get; }
    public int get_minAtlasSize();
    public void set_minAtlasSize(int value);
    public int get_maxAtlasSize();
    public void set_maxAtlasSize(int value);
    public int get_maxSubTextureSize();
    public void set_maxSubTextureSize(int value);
    public DynamicAtlasFilters get_activeFilters();
    public void set_activeFilters(DynamicAtlasFilters value);
    public static DynamicAtlasFilters get_defaultFilters();
    public DynamicAtlasCustomFilter get_customFilter();
    public void set_customFilter(DynamicAtlasCustomFilter value);
    public static DynamicAtlasSettings get_defaults();
}
internal class UnityEngine.UIElements.DynamicHeightVirtualizationController`1 : VerticalVirtualizationController`1<T> {
    private int m_HighestCachedIndex;
    private Dictionary`2<int, float> m_ItemHeightCache;
    private Dictionary`2<int, ContentHeightCacheInfo<T>> m_ContentHeightCache;
    private HashSet`1<int> m_WaitingCache;
    private int m_ForcedFirstVisibleItem;
    private int m_ForcedLastVisibleItem;
    private bool m_StickToBottom;
    private VirtualizationChange<T> m_LastChange;
    private ScrollDirection<T> m_ScrollDirection;
    private Vector2 m_DelayedScrollOffset;
    private float m_AccumulatedHeight;
    private float m_MinimumItemHeight;
    private Action m_FillCallback;
    private Action m_ScrollCallback;
    private Action m_ScrollResetCallback;
    private Action`1<ReusableCollectionItem> m_GeometryChangedCallback;
    private IVisualElementScheduledItem m_ScheduledItem;
    private IVisualElementScheduledItem m_ScrollScheduledItem;
    private IVisualElementScheduledItem m_ScrollResetScheduledItem;
    private Predicate`1<int> m_IndexOutOfBoundsPredicate;
    internal IReadOnlyDictionary`2<int, float> itemHeightCache { get; }
    private float defaultExpectedHeight { get; }
    private float contentPadding { get; private set; }
    private float contentHeight { get; private set; }
    private int anchoredIndex { get; private set; }
    private float anchorOffset { get; private set; }
    private float viewportMaxOffset { get; }
    protected bool alwaysRebindOnRefresh { get; }
    public DynamicHeightVirtualizationController`1(BaseVerticalCollectionView collectionView);
    internal IReadOnlyDictionary`2<int, float> get_itemHeightCache();
    private float get_defaultExpectedHeight();
    private float get_contentPadding();
    private void set_contentPadding(float value);
    private float get_contentHeight();
    private void set_contentHeight(float value);
    private int get_anchoredIndex();
    private void set_anchoredIndex(int value);
    private float get_anchorOffset();
    private void set_anchorOffset(float value);
    private float get_viewportMaxOffset();
    protected virtual bool get_alwaysRebindOnRefresh();
    public virtual void Refresh(bool rebuild);
    public virtual void ScrollToItem(int index);
    public virtual void Resize(Vector2 size);
    public virtual void OnScroll(Vector2 scrollOffset);
    private void OnScrollUpdate();
    private void CycleItems(int firstIndex);
    private bool NeedsFill();
    private void Fill();
    private void UpdateScrollViewContainer(float previousHeight, float newHeight);
    private void ApplyScrollViewUpdate(bool dimensionsOnly);
    private void UpdateAnchor();
    private void ScheduleFill();
    private void ScheduleScroll();
    private void ScheduleScrollDirectionReset();
    private void ResetScroll();
    public virtual int GetIndexFromPosition(Vector2 position);
    public virtual float GetExpectedItemHeight(int index);
    private int GetFirstVisibleItem(float offset);
    public virtual float GetExpectedContentHeight();
    private float GetContentHeightForIndex(int lastIndex);
    private ContentHeightCacheInfo<T> GetCachedContentHeight(int index);
    private void RegisterItemHeight(int index, float height);
    private void UnregisterItemHeight(int index);
    private void CleanItemHeightCache();
    private void OnRecycledItemGeometryChanged(ReusableCollectionItem item);
    private bool UpdateRegisteredHeight(ReusableCollectionItem item);
    internal virtual T GetOrMakeItemAtIndex(int activeItemIndex, int scrollViewIndex);
    internal virtual void ReleaseItem(int activeItemsIndex);
    internal virtual void StartDragItem(ReusableCollectionItem item);
    internal virtual void EndDrag(int dropIndex);
    private void HideItem(int activeItemsIndex);
    private void MarkWaitingForLayout(T item);
    private bool IsIndexOutOfBounds(int i);
}
public class UnityEngine.UIElements.EasingFunction : ValueType {
    private EasingMode m_Mode;
    public EasingMode mode { get; public set; }
    public EasingFunction(EasingMode mode);
    public EasingMode get_mode();
    public void set_mode(EasingMode value);
    public static EasingFunction op_Implicit(EasingMode easingMode);
    public static bool op_Equality(EasingFunction lhs, EasingFunction rhs);
    public static bool op_Inequality(EasingFunction lhs, EasingFunction rhs);
    public sealed virtual bool Equals(EasingFunction other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public enum UnityEngine.UIElements.EasingMode : Enum {
    public int value__;
    public static EasingMode Ease;
    public static EasingMode EaseIn;
    public static EasingMode EaseOut;
    public static EasingMode EaseInOut;
    public static EasingMode Linear;
    public static EasingMode EaseInSine;
    public static EasingMode EaseOutSine;
    public static EasingMode EaseInOutSine;
    public static EasingMode EaseInCubic;
    public static EasingMode EaseOutCubic;
    public static EasingMode EaseInOutCubic;
    public static EasingMode EaseInCirc;
    public static EasingMode EaseOutCirc;
    public static EasingMode EaseInOutCirc;
    public static EasingMode EaseInElastic;
    public static EasingMode EaseOutElastic;
    public static EasingMode EaseInOutElastic;
    public static EasingMode EaseInBack;
    public static EasingMode EaseOutBack;
    public static EasingMode EaseInOutBack;
    public static EasingMode EaseInBounce;
    public static EasingMode EaseOutBounce;
    public static EasingMode EaseInOutBounce;
}
internal class UnityEngine.UIElements.ElementUnderPointer : object {
    private VisualElement[] m_PendingTopElementUnderPointer;
    private VisualElement[] m_TopElementUnderPointer;
    private IPointerEvent[] m_TriggerPointerEvent;
    private IMouseEvent[] m_TriggerMouseEvent;
    private Vector2[] m_PickingPointerPositions;
    private Boolean[] m_IsPickingPointerTemporaries;
    internal VisualElement GetTopElementUnderPointer(int pointerId, Vector2& pickPosition, Boolean& isTemporary);
    internal VisualElement GetTopElementUnderPointer(int pointerId);
    internal void SetElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, Vector2 pointerPos);
    private Vector2 GetEventPointerPosition(EventBase triggerEvent);
    internal void SetTemporaryElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, EventBase triggerEvent);
    internal void SetElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, EventBase triggerEvent);
    private void SetElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, EventBase triggerEvent, bool temporary);
    internal void CommitElementUnderPointers(EventDispatcher dispatcher, ContextType contextType);
}
internal class UnityEngine.UIElements.EmptyStylePropertyAnimationSystem : object {
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, float startValue, float endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Length startValue, Length endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Color startValue, Color endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartAnimationEnum(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Background startValue, Background endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, FontDefinition startValue, FontDefinition endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Font startValue, Font endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public bool StartTransition(VisualElement owner, StylePropertyId prop, Cursor startValue, Cursor endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, TextShadow startValue, TextShadow endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Scale startValue, Scale endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, TransformOrigin startValue, TransformOrigin endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Translate startValue, Translate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Rotate startValue, Rotate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, BackgroundPosition startValue, BackgroundPosition endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, BackgroundRepeat startValue, BackgroundRepeat endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, BackgroundSize startValue, BackgroundSize endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual void CancelAllAnimations();
    public sealed virtual void CancelAllAnimations(VisualElement owner);
    public sealed virtual void CancelAnimation(VisualElement owner, StylePropertyId id);
    public sealed virtual bool HasRunningAnimation(VisualElement owner, StylePropertyId id);
    public sealed virtual void UpdateAnimation(VisualElement owner, StylePropertyId id);
    public sealed virtual void GetAllAnimations(VisualElement owner, List`1<StylePropertyId> propertyIds);
    public sealed virtual void Update();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.EnumField : BaseField`1<Enum> {
    private Type m_EnumType;
    private bool m_IncludeObsoleteValues;
    private TextElement m_TextElement;
    private VisualElement m_ArrowElement;
    private EnumData m_EnumData;
    internal Func`1<IGenericMenu> createMenuCallback;
    public static string ussClassName;
    public static string textUssClassName;
    public static string arrowUssClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    internal Type type { get; }
    internal bool includeObsoleteValues { get; }
    public string text { get; }
    public EnumField(Enum defaultValue);
    public EnumField(string label, Enum defaultValue);
    private static EnumField();
    internal Type get_type();
    internal bool get_includeObsoleteValues();
    public string get_text();
    private void Initialize(Enum defaultValue);
    public void Init(Enum defaultValue);
    public void Init(Enum defaultValue, bool includeObsoleteValues);
    internal void PopulateDataFromType(Type enumType);
    public virtual void SetValueWithoutNotify(Enum newValue);
    private void UpdateValueLabel(Enum value);
    private void OnPointerDownEvent(PointerDownEvent evt);
    private void OnPointerMoveEvent(PointerMoveEvent evt);
    private bool ContainsPointer(int pointerId);
    private void ProcessPointerDown(PointerEventBase`1<T> evt);
    private void OnNavigationSubmit(NavigationSubmitEvent evt);
    private void ShowMenu();
    private void ChangeValueFromMenu(object menuItem);
    protected virtual void UpdateMixedValueContent();
    [CompilerGeneratedAttribute]
private void <ShowMenu>b__33_0(object contentView);
}
internal static class UnityEngine.UIElements.EnumFieldHelpers : object {
    internal static UxmlTypeAttributeDescription`1<Enum> type;
    internal static UxmlStringAttributeDescription value;
    internal static UxmlBoolAttributeDescription includeObsoleteValues;
    private static EnumFieldHelpers();
    internal static bool ExtractValue(IUxmlAttributes bag, CreationContext cc, Type& resEnumType, Enum& resEnumValue, Boolean& resIncludeObsoleteValues);
}
public abstract class UnityEngine.UIElements.EventBase : object {
    private static long s_LastTypeId;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCategory <eventCategory>k__BackingField;
    private static ulong s_NextEventId;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private long <timestamp>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private ulong <eventId>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private ulong <triggerEventId>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventPropagation <propagation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropagationPaths <path>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private LifeCycleStatus <lifeCycleStatus>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEventHandler <leafTarget>k__BackingField;
    private IEventHandler m_Target;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private List`1<IEventHandler> <skipElements>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private PropagationPhase <propagationPhase>k__BackingField;
    private IEventHandler m_CurrentTarget;
    private Event m_ImguiEvent;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <originalMousePosition>k__BackingField;
    public long eventTypeId { get; }
    internal EventCategory eventCategory { get; }
    public long timestamp { get; private set; }
    internal ulong eventId { get; private set; }
    internal ulong triggerEventId { get; private set; }
    internal EventPropagation propagation { get; internal set; }
    internal PropagationPaths path { get; internal set; }
    private LifeCycleStatus lifeCycleStatus { get; private set; }
    public bool bubbles { get; protected set; }
    public bool tricklesDown { get; protected set; }
    internal bool bubblesOrTricklesDown { get; }
    internal bool skipDisabledElements { get; internal set; }
    internal bool ignoreCompositeRoots { get; internal set; }
    internal IEventHandler leafTarget { get; private set; }
    public IEventHandler target { get; public set; }
    internal List`1<IEventHandler> skipElements { get; }
    public bool isPropagationStopped { get; private set; }
    public bool isImmediatePropagationStopped { get; private set; }
    public bool isDefaultPrevented { get; private set; }
    public PropagationPhase propagationPhase { get; internal set; }
    public IEventHandler currentTarget { get; internal set; }
    public bool dispatch { get; internal set; }
    private bool dispatched { get; private set; }
    internal bool processed { get; private set; }
    internal bool processedByFocusController { get; internal set; }
    internal bool stopDispatch { get; internal set; }
    internal bool propagateToIMGUI { get; internal set; }
    private bool imguiEventIsValid { get; private set; }
    public Event imguiEvent { get; protected set; }
    public Vector2 originalMousePosition { get; private set; }
    protected bool pooled { get; protected set; }
    internal EventBase(EventCategory category);
    protected static long RegisterEventType();
    public virtual long get_eventTypeId();
    [CompilerGeneratedAttribute]
internal EventCategory get_eventCategory();
    [CompilerGeneratedAttribute]
public long get_timestamp();
    [CompilerGeneratedAttribute]
private void set_timestamp(long value);
    [CompilerGeneratedAttribute]
internal ulong get_eventId();
    [CompilerGeneratedAttribute]
private void set_eventId(ulong value);
    [CompilerGeneratedAttribute]
internal ulong get_triggerEventId();
    [CompilerGeneratedAttribute]
private void set_triggerEventId(ulong value);
    internal void SetTriggerEventId(ulong id);
    [CompilerGeneratedAttribute]
internal EventPropagation get_propagation();
    [CompilerGeneratedAttribute]
internal void set_propagation(EventPropagation value);
    [CompilerGeneratedAttribute]
internal PropagationPaths get_path();
    [CompilerGeneratedAttribute]
internal void set_path(PropagationPaths value);
    [CompilerGeneratedAttribute]
private LifeCycleStatus get_lifeCycleStatus();
    [CompilerGeneratedAttribute]
private void set_lifeCycleStatus(LifeCycleStatus value);
    [ObsoleteAttribute("Override PreDispatch(IPanel panel) instead.")]
protected virtual void PreDispatch();
    protected internal virtual void PreDispatch(IPanel panel);
    [ObsoleteAttribute("Override PostDispatch(IPanel panel) instead.")]
protected virtual void PostDispatch();
    protected internal virtual void PostDispatch(IPanel panel);
    public bool get_bubbles();
    protected void set_bubbles(bool value);
    public bool get_tricklesDown();
    protected void set_tricklesDown(bool value);
    internal bool get_bubblesOrTricklesDown();
    internal bool get_skipDisabledElements();
    internal void set_skipDisabledElements(bool value);
    internal bool get_ignoreCompositeRoots();
    internal void set_ignoreCompositeRoots(bool value);
    [CompilerGeneratedAttribute]
internal IEventHandler get_leafTarget();
    [CompilerGeneratedAttribute]
private void set_leafTarget(IEventHandler value);
    public IEventHandler get_target();
    public void set_target(IEventHandler value);
    [CompilerGeneratedAttribute]
internal List`1<IEventHandler> get_skipElements();
    internal bool Skip(IEventHandler h);
    public bool get_isPropagationStopped();
    private void set_isPropagationStopped(bool value);
    public void StopPropagation();
    public bool get_isImmediatePropagationStopped();
    private void set_isImmediatePropagationStopped(bool value);
    public void StopImmediatePropagation();
    public bool get_isDefaultPrevented();
    private void set_isDefaultPrevented(bool value);
    public void PreventDefault();
    [CompilerGeneratedAttribute]
public PropagationPhase get_propagationPhase();
    [CompilerGeneratedAttribute]
internal void set_propagationPhase(PropagationPhase value);
    public virtual IEventHandler get_currentTarget();
    internal virtual void set_currentTarget(IEventHandler value);
    public bool get_dispatch();
    internal void set_dispatch(bool value);
    internal void MarkReceivedByDispatcher();
    private bool get_dispatched();
    private void set_dispatched(bool value);
    internal bool get_processed();
    private void set_processed(bool value);
    internal bool get_processedByFocusController();
    internal void set_processedByFocusController(bool value);
    internal bool get_stopDispatch();
    internal void set_stopDispatch(bool value);
    internal bool get_propagateToIMGUI();
    internal void set_propagateToIMGUI(bool value);
    private bool get_imguiEventIsValid();
    private void set_imguiEventIsValid(bool value);
    public Event get_imguiEvent();
    protected void set_imguiEvent(Event value);
    [CompilerGeneratedAttribute]
public Vector2 get_originalMousePosition();
    [CompilerGeneratedAttribute]
private void set_originalMousePosition(Vector2 value);
    protected virtual void Init();
    private void LocalInit();
    protected bool get_pooled();
    protected void set_pooled(bool value);
    internal abstract virtual void Acquire();
    public abstract virtual void Dispose();
}
[EventCategoryAttribute("0")]
public abstract class UnityEngine.UIElements.EventBase`1 : EventBase {
    private static long s_TypeId;
    private static ObjectPool`1<T> s_Pool;
    private int m_RefCount;
    internal static EventCategory EventCategory;
    public long eventTypeId { get; }
    private static EventBase`1();
    internal static void SetCreateFunction(Func`1<T> createMethod);
    public static long TypeId();
    protected virtual void Init();
    public static T GetPooled();
    internal static T GetPooled(EventBase e);
    private static void ReleasePooled(T evt);
    internal virtual void Acquire();
    public sealed virtual void Dispose();
    public virtual long get_eventTypeId();
}
public class UnityEngine.UIElements.EventCallback`1 : MulticastDelegate {
    public EventCallback`1(object object, IntPtr method);
    public virtual void Invoke(TEventType evt);
    public virtual IAsyncResult BeginInvoke(TEventType evt, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class UnityEngine.UIElements.EventCallback`2 : MulticastDelegate {
    public EventCallback`2(object object, IntPtr method);
    public virtual void Invoke(TEventType evt, TCallbackArgs userArgs);
    public virtual IAsyncResult BeginInvoke(TEventType evt, TCallbackArgs userArgs, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class UnityEngine.UIElements.EventCallbackFunctor`1 : EventCallbackFunctorBase {
    private EventCallback`1<TEventType> m_Callback;
    private long m_EventTypeId;
    public EventCallbackFunctor`1(EventCallback`1<TEventType> callback, CallbackPhase phase, InvokePolicy invokePolicy);
    public virtual void Invoke(EventBase evt, PropagationPhase propagationPhase);
    public virtual bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase);
}
internal class UnityEngine.UIElements.EventCallbackFunctor`2 : EventCallbackFunctorBase {
    private EventCallback`2<TEventType, TCallbackArgs> m_Callback;
    private long m_EventTypeId;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private TCallbackArgs <userArgs>k__BackingField;
    internal TCallbackArgs userArgs { get; internal set; }
    public EventCallbackFunctor`2(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, CallbackPhase phase, InvokePolicy invokePolicy);
    [CompilerGeneratedAttribute]
internal TCallbackArgs get_userArgs();
    [CompilerGeneratedAttribute]
internal void set_userArgs(TCallbackArgs value);
    public virtual void Invoke(EventBase evt, PropagationPhase propagationPhase);
    public virtual bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase);
}
internal abstract class UnityEngine.UIElements.EventCallbackFunctorBase : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CallbackPhase <phase>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private InvokePolicy <invokePolicy>k__BackingField;
    public CallbackPhase phase { get; }
    public InvokePolicy invokePolicy { get; }
    protected EventCallbackFunctorBase(CallbackPhase phase, InvokePolicy invokePolicy);
    [CompilerGeneratedAttribute]
public CallbackPhase get_phase();
    [CompilerGeneratedAttribute]
public InvokePolicy get_invokePolicy();
    public abstract virtual void Invoke(EventBase evt, PropagationPhase propagationPhase);
    public abstract virtual bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase);
    protected bool PhaseMatches(PropagationPhase propagationPhase);
}
[DefaultMemberAttribute("Item")]
internal class UnityEngine.UIElements.EventCallbackList : object {
    private List`1<EventCallbackFunctorBase> m_List;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <trickleDownCallbackCount>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <bubbleUpCallbackCount>k__BackingField;
    public int trickleDownCallbackCount { get; private set; }
    public int bubbleUpCallbackCount { get; private set; }
    public int Count { get; }
    public EventCallbackFunctorBase Item { get; public set; }
    public EventCallbackList(EventCallbackList source);
    [CompilerGeneratedAttribute]
public int get_trickleDownCallbackCount();
    [CompilerGeneratedAttribute]
private void set_trickleDownCallbackCount(int value);
    [CompilerGeneratedAttribute]
public int get_bubbleUpCallbackCount();
    [CompilerGeneratedAttribute]
private void set_bubbleUpCallbackCount(int value);
    public bool Contains(long eventTypeId, Delegate callback, CallbackPhase phase);
    public EventCallbackFunctorBase Find(long eventTypeId, Delegate callback, CallbackPhase phase);
    public bool Remove(long eventTypeId, Delegate callback, CallbackPhase phase);
    public void Add(EventCallbackFunctorBase item);
    public void AddRange(EventCallbackList list);
    public int get_Count();
    public EventCallbackFunctorBase get_Item(int i);
    public void set_Item(int i, EventCallbackFunctorBase value);
    public void Clear();
}
internal class UnityEngine.UIElements.EventCallbackListPool : object {
    private Stack`1<EventCallbackList> m_Stack;
    public EventCallbackList Get(EventCallbackList initializer);
    public void Release(EventCallbackList element);
}
internal class UnityEngine.UIElements.EventCallbackRegistry : object {
    private static EventCallbackListPool s_ListPool;
    private EventCallbackList m_Callbacks;
    private EventCallbackList m_TemporaryCallbacks;
    private int m_IsInvoking;
    private static EventCallbackRegistry();
    private static EventCallbackList GetCallbackList(EventCallbackList initializer);
    private static void ReleaseCallbackList(EventCallbackList toRelease);
    private EventCallbackList GetCallbackListForWriting();
    private EventCallbackList GetCallbackListForReading();
    private bool ShouldRegisterCallback(long eventTypeId, Delegate callback, CallbackPhase phase);
    private bool UnregisterCallback(long eventTypeId, Delegate callback, TrickleDown useTrickleDown);
    public void RegisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown, InvokePolicy invokePolicy);
    public void RegisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, TrickleDown useTrickleDown, InvokePolicy invokePolicy);
    public bool UnregisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown);
    public bool UnregisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown);
    internal bool TryGetUserArgs(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown, TCallbackArgs& userArgs);
    public void InvokeCallbacks(EventBase evt, PropagationPhase propagationPhase);
    public bool HasTrickleDownHandlers();
    public bool HasBubbleHandlers();
}
internal enum UnityEngine.UIElements.EventCategory : Enum {
    public int value__;
    public static EventCategory Default;
    public static EventCategory Pointer;
    public static EventCategory PointerMove;
    public static EventCategory EnterLeave;
    public static EventCategory EnterLeaveWindow;
    public static EventCategory Keyboard;
    public static EventCategory Geometry;
    public static EventCategory Style;
    public static EventCategory ChangeValue;
    public static EventCategory Bind;
    public static EventCategory Focus;
    public static EventCategory ChangePanel;
    public static EventCategory StyleTransition;
    public static EventCategory Navigation;
    public static EventCategory Command;
    public static EventCategory Tooltip;
    public static EventCategory IMGUI;
    public static EventCategory Reserved;
}
[AttributeUsageAttribute("4")]
internal class UnityEngine.UIElements.EventCategoryAttribute : Attribute {
    internal EventCategory category;
    public EventCategoryAttribute(EventCategory category);
}
[FlagsAttribute]
internal enum UnityEngine.UIElements.EventCategoryFlags : Enum {
    public int value__;
    public static EventCategoryFlags None;
    public static EventCategoryFlags All;
    public static EventCategoryFlags TriggeredByOS;
    public static EventCategoryFlags TargetOnly;
}
internal class UnityEngine.UIElements.EventDebugger : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPanel <panel>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <isReplaying>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <playbackSpeed>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <isPlaybackPaused>k__BackingField;
    private Dictionary`2<IPanel, List`1<EventDebuggerCallTrace>> m_EventCalledObjects;
    private Dictionary`2<IPanel, List`1<EventDebuggerDefaultActionTrace>> m_EventDefaultActionObjects;
    private Dictionary`2<IPanel, List`1<EventDebuggerPathTrace>> m_EventPathObjects;
    private Dictionary`2<IPanel, List`1<EventDebuggerTrace>> m_EventProcessedEvents;
    private Dictionary`2<IPanel, Stack`1<EventDebuggerTrace>> m_StackOfProcessedEvent;
    private Dictionary`2<IPanel, Dictionary`2<long, int>> m_EventTypeProcessedCount;
    private Dictionary`2<IPanel, long> m_ModificationCount;
    private bool m_Log;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <suspended>k__BackingField;
    public IPanel panel { get; public set; }
    public bool isReplaying { get; private set; }
    public float playbackSpeed { get; public set; }
    public bool isPlaybackPaused { get; public set; }
    public Dictionary`2<long, int> eventTypeProcessedCount { get; }
    public bool suspended { get; public set; }
    [CompilerGeneratedAttribute]
public IPanel get_panel();
    [CompilerGeneratedAttribute]
public void set_panel(IPanel value);
    [CompilerGeneratedAttribute]
public bool get_isReplaying();
    [CompilerGeneratedAttribute]
private void set_isReplaying(bool value);
    [CompilerGeneratedAttribute]
public float get_playbackSpeed();
    [CompilerGeneratedAttribute]
public void set_playbackSpeed(float value);
    [CompilerGeneratedAttribute]
public bool get_isPlaybackPaused();
    [CompilerGeneratedAttribute]
public void set_isPlaybackPaused(bool value);
    public void UpdateModificationCount();
    public void BeginProcessEvent(EventBase evt, IEventHandler mouseCapture);
    public void EndProcessEvent(EventBase evt, long duration, IEventHandler mouseCapture);
    public void LogCall(int cbHashCode, string cbName, EventBase evt, bool propagationHasStopped, bool immediatePropagationHasStopped, bool defaultHasBeenPrevented, long duration, IEventHandler mouseCapture);
    public void LogIMGUICall(EventBase evt, long duration, IEventHandler mouseCapture);
    public void LogExecuteDefaultAction(EventBase evt, PropagationPhase phase, long duration, IEventHandler mouseCapture);
    public static void LogPropagationPaths(EventBase evt, PropagationPaths paths);
    private void LogPropagationPathsInternal(EventBase evt, PropagationPaths paths);
    public List`1<EventDebuggerCallTrace> GetCalls(IPanel panel, EventDebuggerEventRecord evt);
    public List`1<EventDebuggerDefaultActionTrace> GetDefaultActions(IPanel panel, EventDebuggerEventRecord evt);
    public List`1<EventDebuggerPathTrace> GetPropagationPaths(IPanel panel, EventDebuggerEventRecord evt);
    public List`1<EventDebuggerTrace> GetBeginEndProcessedEvents(IPanel panel, EventDebuggerEventRecord evt);
    public long GetModificationCount(IPanel panel);
    public void ClearLogs();
    public void SaveReplaySessionFromSelection(string path, List`1<EventDebuggerEventRecord> eventList);
    public EventDebuggerRecordList LoadReplaySession(string path);
    [IteratorStateMachineAttribute("UnityEngine.UIElements.EventDebugger/<ReplayEvents>d__32")]
public IEnumerator ReplayEvents(IEnumerable`1<EventDebuggerEventRecord> eventBases, Action`2<int, int> refreshList);
    public void StopPlayback();
    [IteratorStateMachineAttribute("UnityEngine.UIElements.EventDebugger/<DoReplayEvents>d__34")]
private IEnumerator DoReplayEvents(IEnumerable`1<EventDebuggerEventRecord> eventBases, Action`2<int, int> refreshList);
    public Dictionary`2<string, HistogramRecord> ComputeHistogram(List`1<EventDebuggerEventRecord> eventBases);
    public Dictionary`2<long, int> get_eventTypeProcessedCount();
    [CompilerGeneratedAttribute]
public bool get_suspended();
    [CompilerGeneratedAttribute]
public void set_suspended(bool value);
    private void AddCallObject(int cbHashCode, string cbName, EventBase evt, bool propagationHasStopped, bool immediatePropagationHasStopped, bool defaultHasBeenPrevented, long duration, IEventHandler mouseCapture);
    private void AddExecuteDefaultAction(EventBase evt, PropagationPhase phase, long duration, IEventHandler mouseCapture);
    private void AddPropagationPaths(EventBase evt, PropagationPaths paths);
    private void AddIMGUICall(EventBase evt, long duration, IEventHandler mouseCapture);
    private void AddBeginProcessEvent(EventBase evt, IEventHandler mouseCapture);
    private void AddEndProcessEvent(EventBase evt, long duration, IEventHandler mouseCapture);
    public static string GetObjectDisplayName(object obj, bool withHashCode);
    public static string GetTypeDisplayName(Type type);
}
internal class UnityEngine.UIElements.EventDebuggerCallTrace : EventDebuggerTrace {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <callbackHashCode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <callbackName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <propagationHasStopped>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <immediatePropagationHasStopped>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <defaultHasBeenPrevented>k__BackingField;
    public int callbackHashCode { get; }
    public string callbackName { get; }
    public bool propagationHasStopped { get; }
    public bool immediatePropagationHasStopped { get; }
    public bool defaultHasBeenPrevented { get; }
    public EventDebuggerCallTrace(IPanel panel, EventBase evt, int cbHashCode, string cbName, bool propagationHasStopped, bool immediatePropagationHasStopped, bool defaultHasBeenPrevented, long duration, IEventHandler mouseCapture);
    [CompilerGeneratedAttribute]
public int get_callbackHashCode();
    [CompilerGeneratedAttribute]
public string get_callbackName();
    [CompilerGeneratedAttribute]
public bool get_propagationHasStopped();
    [CompilerGeneratedAttribute]
public bool get_immediatePropagationHasStopped();
    [CompilerGeneratedAttribute]
public bool get_defaultHasBeenPrevented();
}
internal class UnityEngine.UIElements.EventDebuggerDefaultActionTrace : EventDebuggerTrace {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropagationPhase <phase>k__BackingField;
    public PropagationPhase phase { get; }
    public string targetName { get; }
    public EventDebuggerDefaultActionTrace(IPanel panel, EventBase evt, PropagationPhase phase, long duration, IEventHandler mouseCapture);
    [CompilerGeneratedAttribute]
public PropagationPhase get_phase();
    public string get_targetName();
}
internal class UnityEngine.UIElements.EventDebuggerEventRecord : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private string <eventBaseName>k__BackingField;
    [SerializeField]
[DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private long <eventTypeId>k__BackingField;
    [SerializeField]
[DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private ulong <eventId>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[SerializeField]
private ulong <triggerEventId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private long <timestamp>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private IEventHandler <target>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private List`1<IEventHandler> <skipElements>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private bool <hasUnderlyingPhysicalEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isPropagationStopped>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isImmediatePropagationStopped>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isDefaultPrevented>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private PropagationPhase <propagationPhase>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEventHandler <currentTarget>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <dispatch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <originalMousePosition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventModifiers <modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private Vector2 <mousePosition>k__BackingField;
    [SerializeField]
[DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <clickCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private int <button>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private int <pressedButtons>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[SerializeField]
private Vector3 <delta>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private char <character>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private KeyCode <keyCode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private string <commandName>k__BackingField;
    [SerializeField]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NavigationDeviceType <deviceType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
[SerializeField]
private Direction <navigationDirection>k__BackingField;
    public string eventBaseName { get; private set; }
    public long eventTypeId { get; private set; }
    public ulong eventId { get; private set; }
    private ulong triggerEventId { get; private set; }
    internal long timestamp { get; private set; }
    public IEventHandler target { get; public set; }
    private List`1<IEventHandler> skipElements { get; private set; }
    public bool hasUnderlyingPhysicalEvent { get; private set; }
    private bool isPropagationStopped { get; private set; }
    private bool isImmediatePropagationStopped { get; private set; }
    private bool isDefaultPrevented { get; private set; }
    public PropagationPhase propagationPhase { get; private set; }
    private IEventHandler currentTarget { get; private set; }
    private bool dispatch { get; private set; }
    private Vector2 originalMousePosition { get; private set; }
    public EventModifiers modifiers { get; private set; }
    public Vector2 mousePosition { get; private set; }
    public int clickCount { get; private set; }
    public int button { get; private set; }
    public int pressedButtons { get; private set; }
    public Vector3 delta { get; private set; }
    public char character { get; private set; }
    public KeyCode keyCode { get; private set; }
    public string commandName { get; private set; }
    public NavigationDeviceType deviceType { get; private set; }
    public Direction navigationDirection { get; private set; }
    public EventDebuggerEventRecord(EventBase evt);
    [CompilerGeneratedAttribute]
public string get_eventBaseName();
    [CompilerGeneratedAttribute]
private void set_eventBaseName(string value);
    [CompilerGeneratedAttribute]
public long get_eventTypeId();
    [CompilerGeneratedAttribute]
private void set_eventTypeId(long value);
    [CompilerGeneratedAttribute]
public ulong get_eventId();
    [CompilerGeneratedAttribute]
private void set_eventId(ulong value);
    [CompilerGeneratedAttribute]
private ulong get_triggerEventId();
    [CompilerGeneratedAttribute]
private void set_triggerEventId(ulong value);
    [CompilerGeneratedAttribute]
internal long get_timestamp();
    [CompilerGeneratedAttribute]
private void set_timestamp(long value);
    [CompilerGeneratedAttribute]
public IEventHandler get_target();
    [CompilerGeneratedAttribute]
public void set_target(IEventHandler value);
    [CompilerGeneratedAttribute]
private List`1<IEventHandler> get_skipElements();
    [CompilerGeneratedAttribute]
private void set_skipElements(List`1<IEventHandler> value);
    [CompilerGeneratedAttribute]
public bool get_hasUnderlyingPhysicalEvent();
    [CompilerGeneratedAttribute]
private void set_hasUnderlyingPhysicalEvent(bool value);
    [CompilerGeneratedAttribute]
private bool get_isPropagationStopped();
    [CompilerGeneratedAttribute]
private void set_isPropagationStopped(bool value);
    [CompilerGeneratedAttribute]
private bool get_isImmediatePropagationStopped();
    [CompilerGeneratedAttribute]
private void set_isImmediatePropagationStopped(bool value);
    [CompilerGeneratedAttribute]
private bool get_isDefaultPrevented();
    [CompilerGeneratedAttribute]
private void set_isDefaultPrevented(bool value);
    [CompilerGeneratedAttribute]
public PropagationPhase get_propagationPhase();
    [CompilerGeneratedAttribute]
private void set_propagationPhase(PropagationPhase value);
    [CompilerGeneratedAttribute]
private IEventHandler get_currentTarget();
    [CompilerGeneratedAttribute]
private void set_currentTarget(IEventHandler value);
    [CompilerGeneratedAttribute]
private bool get_dispatch();
    [CompilerGeneratedAttribute]
private void set_dispatch(bool value);
    [CompilerGeneratedAttribute]
private Vector2 get_originalMousePosition();
    [CompilerGeneratedAttribute]
private void set_originalMousePosition(Vector2 value);
    [CompilerGeneratedAttribute]
public EventModifiers get_modifiers();
    [CompilerGeneratedAttribute]
private void set_modifiers(EventModifiers value);
    [CompilerGeneratedAttribute]
public Vector2 get_mousePosition();
    [CompilerGeneratedAttribute]
private void set_mousePosition(Vector2 value);
    [CompilerGeneratedAttribute]
public int get_clickCount();
    [CompilerGeneratedAttribute]
private void set_clickCount(int value);
    [CompilerGeneratedAttribute]
public int get_button();
    [CompilerGeneratedAttribute]
private void set_button(int value);
    [CompilerGeneratedAttribute]
public int get_pressedButtons();
    [CompilerGeneratedAttribute]
private void set_pressedButtons(int value);
    [CompilerGeneratedAttribute]
public Vector3 get_delta();
    [CompilerGeneratedAttribute]
private void set_delta(Vector3 value);
    [CompilerGeneratedAttribute]
public char get_character();
    [CompilerGeneratedAttribute]
private void set_character(char value);
    [CompilerGeneratedAttribute]
public KeyCode get_keyCode();
    [CompilerGeneratedAttribute]
private void set_keyCode(KeyCode value);
    [CompilerGeneratedAttribute]
public string get_commandName();
    [CompilerGeneratedAttribute]
private void set_commandName(string value);
    [CompilerGeneratedAttribute]
public NavigationDeviceType get_deviceType();
    [CompilerGeneratedAttribute]
private void set_deviceType(NavigationDeviceType value);
    [CompilerGeneratedAttribute]
public Direction get_navigationDirection();
    [CompilerGeneratedAttribute]
private void set_navigationDirection(Direction value);
    private void Init(EventBase evt);
    public string TimestampString();
}
internal class UnityEngine.UIElements.EventDebuggerLogCall : ValueType {
    public EventDebuggerLogCall(Delegate callback, EventBase evt);
    public sealed virtual void Dispose();
}
internal class UnityEngine.UIElements.EventDebuggerLogExecuteDefaultAction : ValueType {
    public EventDebuggerLogExecuteDefaultAction(EventBase evt);
    public sealed virtual void Dispose();
}
internal class UnityEngine.UIElements.EventDebuggerLogIMGUICall : ValueType {
    public EventDebuggerLogIMGUICall(EventBase evt);
    public sealed virtual void Dispose();
}
internal class UnityEngine.UIElements.EventDebuggerPathTrace : EventDebuggerTrace {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private PropagationPaths <paths>k__BackingField;
    public PropagationPaths paths { get; }
    public EventDebuggerPathTrace(IPanel panel, EventBase evt, PropagationPaths paths);
    [CompilerGeneratedAttribute]
public PropagationPaths get_paths();
}
internal class UnityEngine.UIElements.EventDebuggerRecordList : object {
    public List`1<EventDebuggerEventRecord> eventList;
}
internal class UnityEngine.UIElements.EventDebuggerTrace : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventDebuggerEventRecord <eventBase>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private IEventHandler <focusedElement>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private IEventHandler <mouseCapture>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <duration>k__BackingField;
    public EventDebuggerEventRecord eventBase { get; }
    public IEventHandler focusedElement { get; }
    public IEventHandler mouseCapture { get; }
    public long duration { get; public set; }
    public EventDebuggerTrace(IPanel panel, EventBase evt, long duration, IEventHandler mouseCapture);
    [CompilerGeneratedAttribute]
public EventDebuggerEventRecord get_eventBase();
    [CompilerGeneratedAttribute]
public IEventHandler get_focusedElement();
    [CompilerGeneratedAttribute]
public IEventHandler get_mouseCapture();
    [CompilerGeneratedAttribute]
public long get_duration();
    [CompilerGeneratedAttribute]
public void set_duration(long value);
}
public class UnityEngine.UIElements.EventDispatcher : object {
    internal ClickDetector m_ClickDetector;
    private List`1<IEventDispatchingStrategy> m_DispatchingStrategies;
    private static ObjectPool`1<Queue`1<EventRecord>> k_EventQueuePool;
    private Queue`1<EventRecord> m_Queue;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private PointerDispatchState <pointerState>k__BackingField;
    private UInt32 m_GateCount;
    private UInt32 m_GateDepth;
    internal static int k_MaxGateDepth;
    internal static int k_NumberOfEventsWithStackInfo;
    internal static int k_NumberOfEventsWithEventInfo;
    private int m_DispatchStackFrame;
    private EventBase m_CurrentEvent;
    private Stack`1<DispatchContext> m_DispatchContexts;
    private static IEventDispatchingStrategy[] s_EditorStrategies;
    private bool m_Immediate;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <processingEvents>k__BackingField;
    internal PointerDispatchState pointerState { get; }
    internal UInt32 GateDepth { get; }
    private bool dispatchImmediately { get; }
    internal bool processingEvents { get; private set; }
    private EventDispatcher(IList`1<IEventDispatchingStrategy> strategies);
    private static EventDispatcher();
    [CompilerGeneratedAttribute]
internal PointerDispatchState get_pointerState();
    internal UInt32 get_GateDepth();
    internal static EventDispatcher CreateDefault();
    internal static EventDispatcher CreateForRuntime(IList`1<IEventDispatchingStrategy> strategies);
    private bool get_dispatchImmediately();
    [CompilerGeneratedAttribute]
internal bool get_processingEvents();
    [CompilerGeneratedAttribute]
private void set_processingEvents(bool value);
    internal void Dispatch(EventBase evt, IPanel panel, DispatchMode dispatchMode);
    private bool HandleRecursiveState(EventBase evt);
    internal void PushDispatcherContext();
    internal void PopDispatcherContext();
    internal void CloseGate();
    internal void OpenGate();
    private void ProcessEventQueue();
    private void ProcessEvent(EventBase evt, IPanel panel);
    private void ApplyDispatchingStrategies(EventBase evt, IPanel panel, bool imguiEventIsInitiallyUsed);
}
public class UnityEngine.UIElements.EventDispatcherGate : ValueType {
    private EventDispatcher m_Dispatcher;
    public EventDispatcherGate(EventDispatcher d);
    public sealed virtual void Dispose();
    public sealed virtual bool Equals(EventDispatcherGate other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(EventDispatcherGate left, EventDispatcherGate right);
    public static bool op_Inequality(EventDispatcherGate left, EventDispatcherGate right);
}
internal static class UnityEngine.UIElements.EventDispatchUtilities : object {
    public static void PropagateEvent(EventBase evt);
    private static void HandleEventAcrossPropagationPath(EventBase evt);
    internal static void PropagateToIMGUIContainer(VisualElement root, EventBase evt);
    public static void ExecuteDefaultAction(EventBase evt);
}
[AttributeUsageAttribute("64")]
public class UnityEngine.UIElements.EventInterestAttribute : Attribute {
    internal Type[] eventTypes;
    internal EventCategoryFlags categoryFlags;
    public EventInterestAttribute(Type[] eventTypes);
    public EventInterestAttribute(EventInterestOptions interests);
    internal EventInterestAttribute(EventInterestOptionsInternal interests);
}
public enum UnityEngine.UIElements.EventInterestOptions : Enum {
    public int value__;
    public static EventInterestOptions Inherit;
    public static EventInterestOptions AllEventTypes;
}
internal enum UnityEngine.UIElements.EventInterestOptionsInternal : Enum {
    public int value__;
    public static EventInterestOptionsInternal TriggeredByOS;
}
internal static class UnityEngine.UIElements.EventInterestReflectionUtils : object {
    private static Dictionary`2<Type, DefaultEventInterests> s_DefaultEventInterests;
    private static Dictionary`2<Type, EventCategory> s_EventCategories;
    private static EventInterestReflectionUtils();
    internal static void GetDefaultEventInterests(Type elementType, Int32& defaultActionCategories, Int32& defaultActionAtTargetCategories);
    private static int ComputeDefaultEventInterests(Type elementType, string methodName);
    internal static EventCategory GetEventCategory(Type eventType);
}
public class UnityEngine.UIElements.ExecuteCommandEvent : CommandEventBase`1<ExecuteCommandEvent> {
    private static ExecuteCommandEvent();
}
public static class UnityEngine.UIElements.Experimental.Easing : object {
    private static float HalfPi;
    public static float Step(float t);
    public static float Linear(float t);
    public static float InSine(float t);
    public static float OutSine(float t);
    public static float InOutSine(float t);
    public static float InQuad(float t);
    public static float OutQuad(float t);
    public static float InOutQuad(float t);
    public static float InCubic(float t);
    public static float OutCubic(float t);
    public static float InOutCubic(float t);
    public static float InPower(float t, int power);
    public static float OutPower(float t, int power);
    public static float InOutPower(float t, int power);
    public static float InBounce(float t);
    public static float OutBounce(float t);
    public static float InOutBounce(float t);
    public static float InElastic(float t);
    public static float OutElastic(float t);
    public static float InOutElastic(float t);
    public static float InBack(float t);
    public static float OutBack(float t);
    public static float InOutBack(float t);
    public static float InBack(float t, float s);
    public static float OutBack(float t, float s);
    public static float InOutBack(float t, float s);
    public static float InCirc(float t);
    public static float OutCirc(float t);
    public static float InOutCirc(float t);
}
public interface UnityEngine.UIElements.Experimental.ITransitionAnimations {
    public abstract virtual ValueAnimation`1<float> Start(float from, float to, int durationMs, Action`2<VisualElement, float> onValueChanged);
    public abstract virtual ValueAnimation`1<Rect> Start(Rect from, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged);
    public abstract virtual ValueAnimation`1<Color> Start(Color from, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged);
    public abstract virtual ValueAnimation`1<Vector3> Start(Vector3 from, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged);
    public abstract virtual ValueAnimation`1<Vector2> Start(Vector2 from, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged);
    public abstract virtual ValueAnimation`1<Quaternion> Start(Quaternion from, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged);
    public abstract virtual ValueAnimation`1<StyleValues> Start(StyleValues from, StyleValues to, int durationMs);
    public abstract virtual ValueAnimation`1<StyleValues> Start(StyleValues to, int durationMs);
    public abstract virtual ValueAnimation`1<float> Start(Func`2<VisualElement, float> fromValueGetter, float to, int durationMs, Action`2<VisualElement, float> onValueChanged);
    public abstract virtual ValueAnimation`1<Rect> Start(Func`2<VisualElement, Rect> fromValueGetter, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged);
    public abstract virtual ValueAnimation`1<Color> Start(Func`2<VisualElement, Color> fromValueGetter, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged);
    public abstract virtual ValueAnimation`1<Vector3> Start(Func`2<VisualElement, Vector3> fromValueGetter, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged);
    public abstract virtual ValueAnimation`1<Vector2> Start(Func`2<VisualElement, Vector2> fromValueGetter, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged);
    public abstract virtual ValueAnimation`1<Quaternion> Start(Func`2<VisualElement, Quaternion> fromValueGetter, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged);
    public abstract virtual ValueAnimation`1<Rect> Layout(Rect to, int durationMs);
    public abstract virtual ValueAnimation`1<Vector2> TopLeft(Vector2 to, int durationMs);
    public abstract virtual ValueAnimation`1<Vector2> Size(Vector2 to, int durationMs);
    public abstract virtual ValueAnimation`1<float> Scale(float to, int duration);
    public abstract virtual ValueAnimation`1<Vector3> Position(Vector3 to, int duration);
    public abstract virtual ValueAnimation`1<Quaternion> Rotation(Quaternion to, int duration);
}
public interface UnityEngine.UIElements.Experimental.IValueAnimation {
    public bool isRunning { get; }
    public int durationMs { get; public set; }
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual void Recycle();
    public abstract virtual bool get_isRunning();
    public abstract virtual int get_durationMs();
    public abstract virtual void set_durationMs(int value);
}
internal interface UnityEngine.UIElements.Experimental.IValueAnimationUpdate {
    public abstract virtual void Tick(long currentTimeMs);
}
internal static class UnityEngine.UIElements.Experimental.Lerp : object {
    public static float Interpolate(float start, float end, float ratio);
    public static int Interpolate(int start, int end, float ratio);
    public static Rect Interpolate(Rect r1, Rect r2, float ratio);
    public static Color Interpolate(Color start, Color end, float ratio);
    public static Vector2 Interpolate(Vector2 start, Vector2 end, float ratio);
    public static Vector3 Interpolate(Vector3 start, Vector3 end, float ratio);
    public static Quaternion Interpolate(Quaternion start, Quaternion end, float ratio);
    internal static StyleValues Interpolate(StyleValues start, StyleValues end, float ratio);
}
public class UnityEngine.UIElements.Experimental.PointerDownLinkTagEvent : PointerEventBase`1<PointerDownLinkTagEvent> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <linkID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <linkText>k__BackingField;
    public string linkID { get; private set; }
    public string linkText { get; private set; }
    private static PointerDownLinkTagEvent();
    [CompilerGeneratedAttribute]
public string get_linkID();
    [CompilerGeneratedAttribute]
private void set_linkID(string value);
    [CompilerGeneratedAttribute]
public string get_linkText();
    [CompilerGeneratedAttribute]
private void set_linkText(string value);
    protected virtual void Init();
    private void LocalInit();
    public static PointerDownLinkTagEvent GetPooled(IPointerEvent evt, string linkID, string linkText);
}
[EventCategoryAttribute("2")]
public class UnityEngine.UIElements.Experimental.PointerMoveLinkTagEvent : PointerEventBase`1<PointerMoveLinkTagEvent> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <linkID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <linkText>k__BackingField;
    public string linkID { get; private set; }
    public string linkText { get; private set; }
    private static PointerMoveLinkTagEvent();
    [CompilerGeneratedAttribute]
public string get_linkID();
    [CompilerGeneratedAttribute]
private void set_linkID(string value);
    [CompilerGeneratedAttribute]
public string get_linkText();
    [CompilerGeneratedAttribute]
private void set_linkText(string value);
    protected virtual void Init();
    private void LocalInit();
    public static PointerMoveLinkTagEvent GetPooled(IPointerEvent evt, string linkID, string linkText);
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.Experimental.PointerOutLinkTagEvent : PointerEventBase`1<PointerOutLinkTagEvent> {
    private static PointerOutLinkTagEvent();
    protected virtual void Init();
    private void LocalInit();
    public static PointerOutLinkTagEvent GetPooled(IPointerEvent evt, string linkID);
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.Experimental.PointerOverLinkTagEvent : PointerEventBase`1<PointerOverLinkTagEvent> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <linkID>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <linkText>k__BackingField;
    public string linkID { get; private set; }
    public string linkText { get; private set; }
    private static PointerOverLinkTagEvent();
    [CompilerGeneratedAttribute]
public string get_linkID();
    [CompilerGeneratedAttribute]
private void set_linkID(string value);
    [CompilerGeneratedAttribute]
public string get_linkText();
    [CompilerGeneratedAttribute]
private void set_linkText(string value);
    protected virtual void Init();
    private void LocalInit();
    public static PointerOverLinkTagEvent GetPooled(IPointerEvent evt, string linkID, string linkText);
}
public class UnityEngine.UIElements.Experimental.PointerUpLinkTagEvent : PointerEventBase`1<PointerUpLinkTagEvent> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <linkID>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <linkText>k__BackingField;
    public string linkID { get; private set; }
    public string linkText { get; private set; }
    private static PointerUpLinkTagEvent();
    [CompilerGeneratedAttribute]
public string get_linkID();
    [CompilerGeneratedAttribute]
private void set_linkID(string value);
    [CompilerGeneratedAttribute]
public string get_linkText();
    [CompilerGeneratedAttribute]
private void set_linkText(string value);
    protected virtual void Init();
    private void LocalInit();
    public static PointerUpLinkTagEvent GetPooled(IPointerEvent evt, string linkID, string linkText);
}
public class UnityEngine.UIElements.Experimental.StyleValues : ValueType {
    internal StyleValueCollection m_StyleValues;
    public float top { get; public set; }
    public float left { get; public set; }
    public float width { get; public set; }
    public float height { get; public set; }
    public float right { get; public set; }
    public float bottom { get; public set; }
    public Color color { get; public set; }
    public Color backgroundColor { get; public set; }
    public Color unityBackgroundImageTintColor { get; public set; }
    public Color borderColor { get; public set; }
    public float marginLeft { get; public set; }
    public float marginTop { get; public set; }
    public float marginRight { get; public set; }
    public float marginBottom { get; public set; }
    public float paddingLeft { get; public set; }
    public float paddingTop { get; public set; }
    public float paddingRight { get; public set; }
    public float paddingBottom { get; public set; }
    public float borderLeftWidth { get; public set; }
    public float borderRightWidth { get; public set; }
    public float borderTopWidth { get; public set; }
    public float borderBottomWidth { get; public set; }
    public float borderTopLeftRadius { get; public set; }
    public float borderTopRightRadius { get; public set; }
    public float borderBottomLeftRadius { get; public set; }
    public float borderBottomRightRadius { get; public set; }
    public float opacity { get; public set; }
    public float flexGrow { get; public set; }
    public float flexShrink { get; public set; }
    public float get_top();
    public void set_top(float value);
    public float get_left();
    public void set_left(float value);
    public float get_width();
    public void set_width(float value);
    public float get_height();
    public void set_height(float value);
    public float get_right();
    public void set_right(float value);
    public float get_bottom();
    public void set_bottom(float value);
    public Color get_color();
    public void set_color(Color value);
    public Color get_backgroundColor();
    public void set_backgroundColor(Color value);
    public Color get_unityBackgroundImageTintColor();
    public void set_unityBackgroundImageTintColor(Color value);
    public Color get_borderColor();
    public void set_borderColor(Color value);
    public float get_marginLeft();
    public void set_marginLeft(float value);
    public float get_marginTop();
    public void set_marginTop(float value);
    public float get_marginRight();
    public void set_marginRight(float value);
    public float get_marginBottom();
    public void set_marginBottom(float value);
    public float get_paddingLeft();
    public void set_paddingLeft(float value);
    public float get_paddingTop();
    public void set_paddingTop(float value);
    public float get_paddingRight();
    public void set_paddingRight(float value);
    public float get_paddingBottom();
    public void set_paddingBottom(float value);
    public float get_borderLeftWidth();
    public void set_borderLeftWidth(float value);
    public float get_borderRightWidth();
    public void set_borderRightWidth(float value);
    public float get_borderTopWidth();
    public void set_borderTopWidth(float value);
    public float get_borderBottomWidth();
    public void set_borderBottomWidth(float value);
    public float get_borderTopLeftRadius();
    public void set_borderTopLeftRadius(float value);
    public float get_borderTopRightRadius();
    public void set_borderTopRightRadius(float value);
    public float get_borderBottomLeftRadius();
    public void set_borderBottomLeftRadius(float value);
    public float get_borderBottomRightRadius();
    public void set_borderBottomRightRadius(float value);
    public float get_opacity();
    public void set_opacity(float value);
    public float get_flexGrow();
    public void set_flexGrow(float value);
    public float get_flexShrink();
    public void set_flexShrink(float value);
    internal void SetValue(StylePropertyId id, float value);
    internal void SetValue(StylePropertyId id, Color value);
    internal StyleValueCollection Values();
}
public class UnityEngine.UIElements.Experimental.ValueAnimation`1 : object {
    private static int k_DefaultDurationMs;
    private static int k_DefaultMaxPoolSize;
    private long m_StartTimeMs;
    private int m_DurationMs;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Func`2<float, float> <easingCurve>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isRunning>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action <onAnimationCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <autoRecycle>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <recycled>k__BackingField;
    private static ObjectPool`1<ValueAnimation`1<T>> sObjectPool;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <owner>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`2<VisualElement, T> <valueUpdated>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Func`2<VisualElement, T> <initialValue>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Func`4<T, T, float, T> <interpolator>k__BackingField;
    private T _from;
    private bool fromValueSet;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T <to>k__BackingField;
    public int durationMs { get; public set; }
    public Func`2<float, float> easingCurve { get; public set; }
    public bool isRunning { get; private set; }
    public Action onAnimationCompleted { get; public set; }
    public bool autoRecycle { get; public set; }
    private bool recycled { get; private set; }
    private VisualElement owner { get; private set; }
    public Action`2<VisualElement, T> valueUpdated { get; public set; }
    public Func`2<VisualElement, T> initialValue { get; public set; }
    public Func`4<T, T, float, T> interpolator { get; public set; }
    public T from { get; public set; }
    public T to { get; public set; }
    private static ValueAnimation`1();
    public sealed virtual int get_durationMs();
    public sealed virtual void set_durationMs(int value);
    [CompilerGeneratedAttribute]
public Func`2<float, float> get_easingCurve();
    [CompilerGeneratedAttribute]
public void set_easingCurve(Func`2<float, float> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_isRunning();
    [CompilerGeneratedAttribute]
private void set_isRunning(bool value);
    [CompilerGeneratedAttribute]
public Action get_onAnimationCompleted();
    [CompilerGeneratedAttribute]
public void set_onAnimationCompleted(Action value);
    [CompilerGeneratedAttribute]
public bool get_autoRecycle();
    [CompilerGeneratedAttribute]
public void set_autoRecycle(bool value);
    [CompilerGeneratedAttribute]
private bool get_recycled();
    [CompilerGeneratedAttribute]
private void set_recycled(bool value);
    [CompilerGeneratedAttribute]
private VisualElement get_owner();
    [CompilerGeneratedAttribute]
private void set_owner(VisualElement value);
    [CompilerGeneratedAttribute]
public Action`2<VisualElement, T> get_valueUpdated();
    [CompilerGeneratedAttribute]
public void set_valueUpdated(Action`2<VisualElement, T> value);
    [CompilerGeneratedAttribute]
public Func`2<VisualElement, T> get_initialValue();
    [CompilerGeneratedAttribute]
public void set_initialValue(Func`2<VisualElement, T> value);
    [CompilerGeneratedAttribute]
public Func`4<T, T, float, T> get_interpolator();
    [CompilerGeneratedAttribute]
public void set_interpolator(Func`4<T, T, float, T> value);
    public T get_from();
    public void set_from(T value);
    [CompilerGeneratedAttribute]
public T get_to();
    [CompilerGeneratedAttribute]
public void set_to(T value);
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual void Recycle();
    private sealed virtual override void UnityEngine.UIElements.Experimental.IValueAnimationUpdate.Tick(long currentTimeMs);
    private void SetDefaultValues();
    private void Unregister();
    private void Register();
    internal void SetOwner(VisualElement e);
    private void CheckNotRecycled();
    public static ValueAnimation`1<T> Create(VisualElement e, Func`4<T, T, float, T> interpolator);
    public ValueAnimation`1<T> Ease(Func`2<float, float> easing);
    public ValueAnimation`1<T> OnCompleted(Action callback);
    public ValueAnimation`1<T> KeepAlive();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.FieldMouseDragger`1 : BaseFieldMouseDragger {
    private IValueField`1<T> m_DrivenField;
    private VisualElement m_DragElement;
    private Rect m_DragHotZone;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <dragging>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <startValue>k__BackingField;
    public bool dragging { get; public set; }
    public T startValue { get; public set; }
    public FieldMouseDragger`1(IValueField`1<T> drivenField);
    [CompilerGeneratedAttribute]
public bool get_dragging();
    [CompilerGeneratedAttribute]
public void set_dragging(bool value);
    [CompilerGeneratedAttribute]
public T get_startValue();
    [CompilerGeneratedAttribute]
public void set_startValue(T value);
    public sealed virtual void SetDragZone(VisualElement dragElement, Rect hotZone);
    private bool CanStartDrag(int button, Vector2 localPosition);
    private void UpdateValueOnPointerDown(PointerDownEvent evt);
    private void ProcessDownEvent(EventBase evt);
    private void UpdateValueOnPointerMove(PointerMoveEvent evt);
    private void ProcessMoveEvent(bool shiftKey, bool altKey, Vector2 deltaPosition);
    private void UpdateValueOnPointerUp(PointerUpEvent evt);
    private void ProcessUpEvent(EventBase evt, int pointerId);
    private void UpdateValueOnKeyDown(KeyDownEvent evt);
}
public enum UnityEngine.UIElements.FillRule : Enum {
    public int value__;
    public static FillRule NonZero;
    public static FillRule OddEven;
}
internal class UnityEngine.UIElements.FixedHeightVirtualizationController`1 : VerticalVirtualizationController`1<T> {
    private float resolvedItemHeight { get; }
    public FixedHeightVirtualizationController`1(BaseVerticalCollectionView collectionView);
    private float get_resolvedItemHeight();
    protected virtual bool VisibleItemPredicate(T i);
    public virtual int GetIndexFromPosition(Vector2 position);
    public virtual float GetExpectedItemHeight(int index);
    public virtual float GetExpectedContentHeight();
    public virtual void ScrollToItem(int index);
    public virtual void Resize(Vector2 size);
    public virtual void OnScroll(Vector2 scrollOffset);
    internal virtual T GetOrMakeItemAtIndex(int activeItemIndex, int scrollViewIndex);
    internal virtual void EndDrag(int dropIndex);
}
public enum UnityEngine.UIElements.FlexDirection : Enum {
    public int value__;
    public static FlexDirection Column;
    public static FlexDirection ColumnReverse;
    public static FlexDirection Row;
    public static FlexDirection RowReverse;
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.FloatField : TextValueField`1<float> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    private FloatInput floatInput { get; }
    public FloatField(int maxLength);
    public FloatField(string label, int maxLength);
    private static FloatField();
    private FloatInput get_floatInput();
    protected virtual string ValueToString(float v);
    protected virtual float StringToValue(string str);
    internal virtual bool CanTryParse(string textString);
    public virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, float startValue);
}
public abstract class UnityEngine.UIElements.Focusable : CallbackEventHandler {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <focusable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <tabIndex>k__BackingField;
    private bool m_DelegatesFocus;
    private bool m_ExcludeFromFocusRing;
    public FocusController focusController { get; }
    public bool focusable { get; public set; }
    public int tabIndex { get; public set; }
    public bool delegatesFocus { get; public set; }
    internal bool excludeFromFocusRing { get; internal set; }
    public bool canGrabFocus { get; }
    public abstract virtual FocusController get_focusController();
    [CompilerGeneratedAttribute]
public bool get_focusable();
    [CompilerGeneratedAttribute]
public void set_focusable(bool value);
    [CompilerGeneratedAttribute]
public int get_tabIndex();
    [CompilerGeneratedAttribute]
public void set_tabIndex(int value);
    public bool get_delegatesFocus();
    public void set_delegatesFocus(bool value);
    internal bool get_excludeFromFocusRing();
    internal void set_excludeFromFocusRing(bool value);
    public virtual bool get_canGrabFocus();
    public virtual void Focus();
    public virtual void Blur();
    internal void BlurImmediately();
    private Focusable GetFocusDelegate();
    private static Focusable GetFirstFocusableChild(VisualElement ve);
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultAction(EventBase evt);
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal virtual void ExecuteDefaultActionDisabled(EventBase evt);
    private void ProcessEvent(EventBase evt);
}
public class UnityEngine.UIElements.FocusChangeDirection : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static FocusChangeDirection <unspecified>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static FocusChangeDirection <none>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static FocusChangeDirection <lastValue>k__BackingField;
    private int m_Value;
    public static FocusChangeDirection unspecified { get; }
    public static FocusChangeDirection none { get; }
    protected static FocusChangeDirection lastValue { get; }
    protected FocusChangeDirection(int value);
    private static FocusChangeDirection();
    [CompilerGeneratedAttribute]
public static FocusChangeDirection get_unspecified();
    [CompilerGeneratedAttribute]
public static FocusChangeDirection get_none();
    [CompilerGeneratedAttribute]
protected static FocusChangeDirection get_lastValue();
    public static int op_Implicit(FocusChangeDirection fcd);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose();
    internal virtual void ApplyTo(FocusController focusController, Focusable f);
}
public class UnityEngine.UIElements.FocusController : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IFocusRing <focusRing>k__BackingField;
    private TextElement m_SelectedTextElement;
    private List`1<FocusedElement> m_FocusedElements;
    private Focusable m_LastFocusedElement;
    internal Focusable m_LastPendingFocusedElement;
    private int m_PendingFocusCount;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <imguiKeyboardControl>k__BackingField;
    private IFocusRing focusRing { get; }
    internal TextElement selectedTextElement { get; internal set; }
    public Focusable focusedElement { get; }
    internal int imguiKeyboardControl { get; internal set; }
    public FocusController(IFocusRing focusRing);
    [CompilerGeneratedAttribute]
private IFocusRing get_focusRing();
    internal TextElement get_selectedTextElement();
    internal void set_selectedTextElement(TextElement value);
    public Focusable get_focusedElement();
    internal bool IsFocused(Focusable f);
    internal Focusable GetRetargetedFocusedElement(VisualElement retargetAgainst);
    internal Focusable GetLeafFocusedElement();
    private bool IsLocalElement(Focusable f);
    internal void ClearPendingFocusEvents();
    internal bool IsPendingFocus(Focusable f);
    internal void SetFocusToLastFocusedElement();
    internal void BlurLastFocusedElement();
    internal void DoFocusChange(Focusable f);
    internal void ProcessPendingFocusChange(Focusable f);
    internal Focusable FocusNextInDirection(FocusChangeDirection direction);
    private void AboutToReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction, DispatchMode dispatchMode);
    private void ReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction, DispatchMode dispatchMode);
    private void AboutToGrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction, DispatchMode dispatchMode);
    private void GrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction, bool bIsFocusDelegated, DispatchMode dispatchMode);
    internal void Blur(Focusable focusable, bool bIsFocusDelegated, DispatchMode dispatchMode);
    internal void SwitchFocus(Focusable newFocusedElement, bool bIsFocusDelegated, DispatchMode dispatchMode);
    internal void SwitchFocus(Focusable newFocusedElement, FocusChangeDirection direction, bool bIsFocusDelegated, DispatchMode dispatchMode);
    internal void SwitchFocusOnEvent(EventBase e);
    internal void ReevaluateFocus();
    internal bool GetFocusableParentForPointerEvent(Focusable target, Focusable& effectiveTarget);
    [CompilerGeneratedAttribute]
internal int get_imguiKeyboardControl();
    [CompilerGeneratedAttribute]
internal void set_imguiKeyboardControl(int value);
    internal void SyncIMGUIFocus(int imguiKeyboardControlID, Focusable imguiContainerHavingKeyboardControl, bool forceSwitch);
}
public class UnityEngine.UIElements.FocusEvent : FocusEventBase`1<FocusEvent> {
    private static FocusEvent();
    protected internal virtual void PreDispatch(IPanel panel);
}
[EventCategoryAttribute("10")]
public abstract class UnityEngine.UIElements.FocusEventBase`1 : EventBase`1<T> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Focusable <relatedTarget>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FocusChangeDirection <direction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FocusController <focusController>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsFocusDelegated>k__BackingField;
    public Focusable relatedTarget { get; private set; }
    public FocusChangeDirection direction { get; private set; }
    protected FocusController focusController { get; private set; }
    internal bool IsFocusDelegated { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual Focusable get_relatedTarget();
    [CompilerGeneratedAttribute]
private void set_relatedTarget(Focusable value);
    [CompilerGeneratedAttribute]
public sealed virtual FocusChangeDirection get_direction();
    [CompilerGeneratedAttribute]
private void set_direction(FocusChangeDirection value);
    [CompilerGeneratedAttribute]
protected FocusController get_focusController();
    [CompilerGeneratedAttribute]
private void set_focusController(FocusController value);
    [CompilerGeneratedAttribute]
internal bool get_IsFocusDelegated();
    [CompilerGeneratedAttribute]
private void set_IsFocusDelegated(bool value);
    protected virtual void Init();
    private void LocalInit();
    public static T GetPooled(IEventHandler target, Focusable relatedTarget, FocusChangeDirection direction, FocusController focusController, bool bIsFocusDelegated);
}
public class UnityEngine.UIElements.FocusInEvent : FocusEventBase`1<FocusInEvent> {
    private static FocusInEvent();
    protected virtual void Init();
    private void LocalInit();
}
public class UnityEngine.UIElements.FocusOutEvent : FocusEventBase`1<FocusOutEvent> {
    private static FocusOutEvent();
    protected virtual void Init();
    private void LocalInit();
}
public class UnityEngine.UIElements.Foldout : BindableElement {
    private Toggle m_Toggle;
    private VisualElement m_Container;
    [SerializeField]
private bool m_Value;
    public static string ussClassName;
    public static string toggleUssClassName;
    public static string contentUssClassName;
    public static string inputUssClassName;
    public static string checkmarkUssClassName;
    public static string textUssClassName;
    internal static string toggleInspectorUssClassName;
    internal static string ussFoldoutDepthClassName;
    internal static int ussFoldoutMaxDepth;
    private KeyboardNavigationManipulator m_NavigationManipulator;
    internal Toggle toggle { get; }
    public VisualElement contentContainer { get; }
    public string text { get; public set; }
    public bool value { get; public set; }
    private static Foldout();
    internal Toggle get_toggle();
    public virtual VisualElement get_contentContainer();
    public string get_text();
    public void set_text(string value);
    public sealed virtual bool get_value();
    public sealed virtual void set_value(bool value);
    public sealed virtual void SetValueWithoutNotify(bool newValue);
    internal virtual void OnViewDataReady();
    private void Apply(KeyboardNavigationOperation op, EventBase sourceEvent);
    private bool Apply(KeyboardNavigationOperation op);
    private void OnAttachToPanel(AttachToPanelEvent evt);
    [CompilerGeneratedAttribute]
private void <.ctor>b__29_0(ChangeEvent`1<bool> evt);
}
public class UnityEngine.UIElements.FontDefinition : ValueType {
    private Font m_Font;
    private FontAsset m_FontAsset;
    public Font font { get; public set; }
    public FontAsset fontAsset { get; public set; }
    internal static IEnumerable`1<Type> allowedAssetTypes { get; }
    public Font get_font();
    public void set_font(Font value);
    public FontAsset get_fontAsset();
    public void set_fontAsset(FontAsset value);
    public static FontDefinition FromFont(Font f);
    public static FontDefinition FromSDFFont(FontAsset f);
    internal static FontDefinition FromObject(object obj);
    [IteratorStateMachineAttribute("UnityEngine.UIElements.FontDefinition/<get_allowedAssetTypes>d__12")]
internal static IEnumerable`1<Type> get_allowedAssetTypes();
    internal bool IsEmpty();
    public virtual string ToString();
    public sealed virtual bool Equals(FontDefinition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(FontDefinition left, FontDefinition right);
    public static bool op_Inequality(FontDefinition left, FontDefinition right);
}
public class UnityEngine.UIElements.GenericDropdownMenu : object {
    public static string ussClassName;
    public static string itemUssClassName;
    public static string labelUssClassName;
    public static string containerInnerUssClassName;
    public static string containerOuterUssClassName;
    public static string checkmarkUssClassName;
    public static string separatorUssClassName;
    private List`1<MenuItem> m_Items;
    private VisualElement m_MenuContainer;
    private VisualElement m_OuterContainer;
    private ScrollView m_ScrollView;
    private VisualElement m_PanelRootVisualContainer;
    private VisualElement m_TargetElement;
    private Rect m_DesiredRect;
    private KeyboardNavigationManipulator m_NavigationManipulator;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <isSingleSelectionDropdown>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <closeOnParentResize>k__BackingField;
    private Vector2 m_MousePosition;
    internal List`1<MenuItem> items { get; }
    internal VisualElement menuContainer { get; }
    internal VisualElement outerContainer { get; }
    internal ScrollView scrollView { get; }
    internal bool isSingleSelectionDropdown { get; internal set; }
    internal bool closeOnParentResize { get; internal set; }
    public VisualElement contentContainer { get; }
    private static GenericDropdownMenu();
    internal List`1<MenuItem> get_items();
    internal VisualElement get_menuContainer();
    internal VisualElement get_outerContainer();
    internal ScrollView get_scrollView();
    [CompilerGeneratedAttribute]
internal bool get_isSingleSelectionDropdown();
    [CompilerGeneratedAttribute]
internal void set_isSingleSelectionDropdown(bool value);
    [CompilerGeneratedAttribute]
internal bool get_closeOnParentResize();
    [CompilerGeneratedAttribute]
internal void set_closeOnParentResize(bool value);
    public VisualElement get_contentContainer();
    private void OnAttachToPanel(AttachToPanelEvent evt);
    private void OnDetachFromPanel(DetachFromPanelEvent evt);
    private void Hide(bool giveFocusBack);
    private void Apply(KeyboardNavigationOperation op, EventBase sourceEvent);
    private bool Apply(KeyboardNavigationOperation op);
    private void OnPointerDown(PointerDownEvent evt);
    private void OnPointerMove(PointerMoveEvent evt);
    private void OnPointerUp(PointerUpEvent evt);
    private void OnFocusOut(FocusOutEvent evt);
    private void OnParentResized(GeometryChangedEvent evt);
    private void UpdateSelection(VisualElement target);
    private void ChangeSelectedIndex(int newIndex, int previousIndex);
    private int GetSelectedIndex();
    public sealed virtual void AddItem(string itemName, bool isChecked, Action action);
    public sealed virtual void AddItem(string itemName, bool isChecked, Action`1<object> action, object data);
    public sealed virtual void AddDisabledItem(string itemName, bool isChecked);
    public sealed virtual void AddSeparator(string path);
    private MenuItem AddItem(string itemName, bool isChecked, bool isEnabled, object data);
    internal void UpdateItem(string itemName, bool isChecked);
    public sealed virtual void DropDown(Rect position, VisualElement targetElement, bool anchored);
    private void OnTargetElementDetachFromPanel(DetachFromPanelEvent evt);
    private void OnContainerGeometryChanged(GeometryChangedEvent evt);
    private void EnsureVisibilityInParent();
    [CompilerGeneratedAttribute]
private void <Apply>g__UpdateSelectionDown|39_0(int newIndex, <>c__DisplayClass39_0& );
    [CompilerGeneratedAttribute]
private void <Apply>g__UpdateSelectionUp|39_1(int newIndex, <>c__DisplayClass39_0& );
}
[EventCategoryAttribute("6")]
public class UnityEngine.UIElements.GeometryChangedEvent : EventBase`1<GeometryChangedEvent> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Rect <oldRect>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Rect <newRect>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <layoutPass>k__BackingField;
    public Rect oldRect { get; private set; }
    public Rect newRect { get; private set; }
    internal int layoutPass { get; internal set; }
    private static GeometryChangedEvent();
    public static GeometryChangedEvent GetPooled(Rect oldRect, Rect newRect);
    protected virtual void Init();
    private void LocalInit();
    [CompilerGeneratedAttribute]
public Rect get_oldRect();
    [CompilerGeneratedAttribute]
private void set_oldRect(Rect value);
    [CompilerGeneratedAttribute]
public Rect get_newRect();
    [CompilerGeneratedAttribute]
private void set_newRect(Rect value);
    [CompilerGeneratedAttribute]
internal int get_layoutPass();
    [CompilerGeneratedAttribute]
internal void set_layoutPass(int value);
}
internal class UnityEngine.UIElements.GetViewDataDictionary : MulticastDelegate {
    public GetViewDataDictionary(object object, IntPtr method);
    public virtual ISerializableJsonDictionary Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual ISerializableJsonDictionary EndInvoke(IAsyncResult result);
}
internal class UnityEngine.UIElements.GradientSettings : ValueType {
    public GradientType gradientType;
    public AddressMode addressMode;
    public Vector2 radialFocus;
    public RectInt location;
}
internal enum UnityEngine.UIElements.GradientType : Enum {
    public int value__;
    public static GradientType Linear;
    public static GradientType Radial;
}
public class UnityEngine.UIElements.GroupBox : BindableElement {
    public static string ussClassName;
    public static string labelUssClassName;
    private Label m_TitleLabel;
    internal Label titleLabel { get; }
    public string text { get; public set; }
    public GroupBox(string text);
    private static GroupBox();
    internal Label get_titleLabel();
    public string get_text();
    public void set_text(string value);
    private sealed virtual override void UnityEngine.UIElements.IGroupBox.OnOptionAdded(IGroupBoxOption option);
    private sealed virtual override void UnityEngine.UIElements.IGroupBox.OnOptionRemoved(IGroupBoxOption option);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.GroupBoxUtility : object {
    private static Dictionary`2<IGroupBox, IGroupManager> s_GroupManagers;
    private static Dictionary`2<IGroupBoxOption, IGroupManager> s_GroupOptionManagerCache;
    private static Type k_GenericGroupBoxType;
    private static GroupBoxUtility();
    [ExtensionAttribute]
public static void RegisterGroupBoxOption(T option);
    [ExtensionAttribute]
public static void UnregisterGroupBoxOption(T option);
    [ExtensionAttribute]
public static void OnOptionSelected(T selectedOption);
    [ExtensionAttribute]
public static IGroupBoxOption GetSelectedOption(IGroupBox groupBox);
    [ExtensionAttribute]
public static IGroupManager GetGroupManager(IGroupBox groupBox);
    private static IGroupManager FindOrCreateGroupManager(IGroupBox groupBox);
    private static void OnGroupBoxDetachedFromPanel(DetachFromPanelEvent evt);
    private static void OnPanelDestroyed(BaseVisualElementPanel panel);
}
[IsReadOnlyAttribute]
internal class UnityEngine.UIElements.HandleDragAndDropArgs : ValueType {
    private DragAndDropArgs m_DragAndDropArgs;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Vector2 <position>k__BackingField;
    public Vector2 position { get; }
    public object target { get; }
    public int insertAtIndex { get; }
    public int parentId { get; }
    public int childIndex { get; }
    public DragAndDropPosition dropPosition { get; }
    public DragAndDropData dragAndDropData { get; }
    internal HandleDragAndDropArgs(Vector2 position, DragAndDropArgs dragAndDropArgs);
    [CompilerGeneratedAttribute]
public Vector2 get_position();
    public object get_target();
    public int get_insertAtIndex();
    public int get_parentId();
    public int get_childIndex();
    public DragAndDropPosition get_dropPosition();
    public DragAndDropData get_dragAndDropData();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.Hash128Field : TextInputBaseField`1<Hash128> {
    internal bool m_UpdateTextFromValue;
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    private Hash128Input integerInput { get; }
    public Hash128 value { get; public set; }
    public Hash128Field(int maxLength);
    public Hash128Field(string label, int maxLength);
    private static Hash128Field();
    private Hash128Input get_integerInput();
    public virtual Hash128 get_value();
    public virtual void set_value(Hash128 value);
    internal virtual void UpdateValueFromText();
    internal virtual void UpdateTextFromValue();
    public virtual void SetValueWithoutNotify(Hash128 newValue);
    protected virtual string ValueToString(Hash128 value);
    protected virtual Hash128 StringToValue(string str);
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultAction(EventBase evt);
}
internal class UnityEngine.UIElements.Hashes : ValueType {
    public static int kSize;
    [FixedBufferAttribute("System.Int32", "4")]
public <hashes>e__FixedBuffer hashes;
}
public class UnityEngine.UIElements.HelpBox : VisualElement {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string iconUssClassName;
    public static string iconInfoUssClassName;
    public static string iconwarningUssClassName;
    public static string iconErrorUssClassName;
    private HelpBoxMessageType m_HelpBoxMessageType;
    private VisualElement m_Icon;
    private string m_IconClass;
    private Label m_Label;
    public string text { get; public set; }
    public HelpBoxMessageType messageType { get; public set; }
    public HelpBox(string text, HelpBoxMessageType messageType);
    private static HelpBox();
    public string get_text();
    public void set_text(string value);
    public HelpBoxMessageType get_messageType();
    public void set_messageType(HelpBoxMessageType value);
    private string GetIconClass(HelpBoxMessageType messageType);
    private void UpdateIcon(HelpBoxMessageType messageType);
}
public enum UnityEngine.UIElements.HelpBoxMessageType : Enum {
    public int value__;
    public static HelpBoxMessageType None;
    public static HelpBoxMessageType Info;
    public static HelpBoxMessageType Warning;
    public static HelpBoxMessageType Error;
}
internal enum UnityEngine.UIElements.HierarchyChangeType : Enum {
    public int value__;
    public static HierarchyChangeType Add;
    public static HierarchyChangeType Remove;
    public static HierarchyChangeType Move;
}
internal class UnityEngine.UIElements.HierarchyEvent : MulticastDelegate {
    public HierarchyEvent(object object, IntPtr method);
    public virtual void Invoke(VisualElement ve, HierarchyChangeType changeType);
    public virtual IAsyncResult BeginInvoke(VisualElement ve, HierarchyChangeType changeType, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface UnityEngine.UIElements.IBaseUxmlFactory {
    public string uxmlName { get; }
    public string uxmlNamespace { get; }
    public string uxmlQualifiedName { get; }
    public Type uxmlType { get; }
    public bool canHaveAnyAttribute { get; }
    public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription { get; }
    public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription { get; }
    public string substituteForTypeName { get; }
    public string substituteForTypeNamespace { get; }
    public string substituteForTypeQualifiedName { get; }
    public abstract virtual string get_uxmlName();
    public abstract virtual string get_uxmlNamespace();
    public abstract virtual string get_uxmlQualifiedName();
    public abstract virtual Type get_uxmlType();
    public abstract virtual bool get_canHaveAnyAttribute();
    public abstract virtual IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription();
    public abstract virtual IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription();
    public abstract virtual string get_substituteForTypeName();
    public abstract virtual string get_substituteForTypeNamespace();
    public abstract virtual string get_substituteForTypeQualifiedName();
    public abstract virtual bool AcceptsAttributeBag(IUxmlAttributes bag, CreationContext cc);
}
internal interface UnityEngine.UIElements.IBaseUxmlObjectFactory {
}
public interface UnityEngine.UIElements.IBindable {
    public IBinding binding { get; public set; }
    public string bindingPath { get; public set; }
    public abstract virtual IBinding get_binding();
    public abstract virtual void set_binding(IBinding value);
    public abstract virtual string get_bindingPath();
    public abstract virtual void set_bindingPath(string value);
}
public interface UnityEngine.UIElements.IBinding {
    public abstract virtual void PreUpdate();
    public abstract virtual void Update();
    public abstract virtual void Release();
}
[ExtensionAttribute]
public static class UnityEngine.UIElements.IBindingExtensions : object {
    [ExtensionAttribute]
public static bool IsBound(IBindable control);
}
internal interface UnityEngine.UIElements.IBindingRequest {
    public abstract virtual void Bind(VisualElement element);
    public abstract virtual void Release();
}
public interface UnityEngine.UIElements.IChangeEvent {
}
internal interface UnityEngine.UIElements.ICollectionDragAndDropController {
}
public interface UnityEngine.UIElements.ICommandEvent {
    public string commandName { get; }
    public abstract virtual string get_commandName();
}
internal interface UnityEngine.UIElements.ICursorManager {
    public abstract virtual void SetCursor(Cursor cursor);
    public abstract virtual void ResetCursor();
}
public interface UnityEngine.UIElements.ICustomStyle {
    public abstract virtual bool TryGetValue(CustomStyleProperty`1<float> property, Single& value);
    public abstract virtual bool TryGetValue(CustomStyleProperty`1<int> property, Int32& value);
    public abstract virtual bool TryGetValue(CustomStyleProperty`1<bool> property, Boolean& value);
    public abstract virtual bool TryGetValue(CustomStyleProperty`1<Color> property, Color& value);
    public abstract virtual bool TryGetValue(CustomStyleProperty`1<Texture2D> property, Texture2D& value);
    public abstract virtual bool TryGetValue(CustomStyleProperty`1<Sprite> property, Sprite& value);
    public abstract virtual bool TryGetValue(CustomStyleProperty`1<VectorImage> property, VectorImage& value);
    public abstract virtual bool TryGetValue(CustomStyleProperty`1<T> property, T& value);
    public abstract virtual bool TryGetValue(CustomStyleProperty`1<string> property, String& value);
}
[ObsoleteAttribute("IDataWatchHandle is no longer supported and will be removed soon", "True")]
internal interface UnityEngine.UIElements.IDataWatchHandle {
    public Object watched { get; }
    public bool disposed { get; }
    public abstract virtual Object get_watched();
    public abstract virtual bool get_disposed();
}
[ObsoleteAttribute("IDataWatchService is no longer supported and will be removed soon", "True")]
internal interface UnityEngine.UIElements.IDataWatchService {
    public abstract virtual IDataWatchHandle AddWatch(Object watched, Action`1<Object> onDataChanged);
    public abstract virtual void RemoveWatch(IDataWatchHandle handle);
    public abstract virtual void ForceDirtyNextPoll(Object obj);
}
internal interface UnityEngine.UIElements.IDefaultTreeViewController {
    public abstract virtual object GetItemDataForId(int id);
}
internal interface UnityEngine.UIElements.IDefaultTreeViewController`1 {
    public abstract virtual void SetRootItems(IList`1<TreeViewItemData`1<T>> items);
    public abstract virtual void AddItem(TreeViewItemData`1& modreq(System.Runtime.InteropServices.InAttribute) item, int parentId, int childIndex, bool rebuildTree);
    public abstract virtual TreeViewItemData`1<T> GetTreeViewItemDataForId(int id);
    public abstract virtual TreeViewItemData`1<T> GetTreeViewItemDataForIndex(int index);
    public abstract virtual T GetDataForId(int id);
    public abstract virtual T GetDataForIndex(int index);
}
internal interface UnityEngine.UIElements.IDragAndDrop {
    public DragAndDropData data { get; }
    public abstract virtual void StartDrag(StartDragArgs args, Vector3 pointerPosition);
    public abstract virtual void UpdateDrag(Vector3 pointerPosition);
    public abstract virtual void AcceptDrag();
    public abstract virtual void DragCleanup();
    public abstract virtual void SetVisualMode(DragVisualMode visualMode);
    public abstract virtual DragAndDropData get_data();
}
internal interface UnityEngine.UIElements.IDragAndDropController`1 {
    public abstract virtual bool CanStartDrag(IEnumerable`1<int> itemIds);
    public abstract virtual StartDragArgs SetupDragAndDrop(IEnumerable`1<int> itemIds, bool skipText);
    public abstract virtual DragVisualMode HandleDragAndDrop(TArgs args);
    public abstract virtual void OnDrop(TArgs args);
    public virtual void DragCleanup();
    public virtual void HandleAutoExpand(ReusableCollectionItem item, Vector2 pointerPosition);
    public virtual IEnumerable`1<int> GetSortedSelectedIds();
}
internal interface UnityEngine.UIElements.IDragAndDropData {
    public object userData { get; }
    public IEnumerable`1<Object> unityObjectReferences { get; }
    public abstract virtual object GetGenericData(string key);
    public abstract virtual object get_userData();
    public abstract virtual IEnumerable`1<Object> get_unityObjectReferences();
}
internal interface UnityEngine.UIElements.IEditableElement {
    internal Action editingStarted { get; internal set; }
    internal Action editingEnded { get; internal set; }
    internal abstract virtual Action get_editingStarted();
    internal abstract virtual void set_editingStarted(Action value);
    internal abstract virtual Action get_editingEnded();
    internal abstract virtual void set_editingEnded(Action value);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.IEnumerableExtensions : object {
    [ExtensionAttribute]
internal static bool HasValues(IEnumerable`1<string> collection);
}
internal interface UnityEngine.UIElements.IEventDispatchingStrategy {
    public abstract virtual bool CanDispatchEvent(EventBase evt);
    public abstract virtual void DispatchEvent(EventBase evt, IPanel panel);
}
public interface UnityEngine.UIElements.IEventHandler {
    public abstract virtual void SendEvent(EventBase e);
    public abstract virtual void HandleEvent(EventBase evt);
    public abstract virtual bool HasTrickleDownHandlers();
    public abstract virtual bool HasBubbleUpHandlers();
}
public interface UnityEngine.UIElements.IExperimentalFeatures {
    public ITransitionAnimations animation { get; }
    public abstract virtual ITransitionAnimations get_animation();
}
public interface UnityEngine.UIElements.IFocusEvent {
    public Focusable relatedTarget { get; }
    public FocusChangeDirection direction { get; }
    public abstract virtual Focusable get_relatedTarget();
    public abstract virtual FocusChangeDirection get_direction();
}
public interface UnityEngine.UIElements.IFocusRing {
    public abstract virtual FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e);
    public abstract virtual Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction);
}
internal interface UnityEngine.UIElements.IGenericMenu {
    public abstract virtual void AddItem(string itemName, bool isChecked, Action action);
    public abstract virtual void AddItem(string itemName, bool isChecked, Action`1<object> action, object data);
    public abstract virtual void AddDisabledItem(string itemName, bool isChecked);
    public abstract virtual void AddSeparator(string path);
    public abstract virtual void DropDown(Rect position, VisualElement targetElement, bool anchored);
}
internal interface UnityEngine.UIElements.IGroupBox {
    public abstract virtual void OnOptionAdded(IGroupBoxOption option);
    public abstract virtual void OnOptionRemoved(IGroupBoxOption option);
}
internal interface UnityEngine.UIElements.IGroupBox`1 {
}
internal interface UnityEngine.UIElements.IGroupBoxOption {
    public abstract virtual void SetSelected(bool selected);
}
internal interface UnityEngine.UIElements.IGroupManager {
    public abstract virtual void Init(IGroupBox groupBox);
    public abstract virtual IGroupBoxOption GetSelectedOption();
    public abstract virtual void OnOptionSelectionChanged(IGroupBoxOption selectedOption);
    public abstract virtual void RegisterOption(IGroupBoxOption option);
    public abstract virtual void UnregisterOption(IGroupBoxOption option);
}
public interface UnityEngine.UIElements.IKeyboardEvent {
    public EventModifiers modifiers { get; }
    public char character { get; }
    public KeyCode keyCode { get; }
    public bool shiftKey { get; }
    public bool ctrlKey { get; }
    public bool commandKey { get; }
    public bool altKey { get; }
    public bool actionKey { get; }
    public abstract virtual EventModifiers get_modifiers();
    public abstract virtual char get_character();
    public abstract virtual KeyCode get_keyCode();
    public abstract virtual bool get_shiftKey();
    public abstract virtual bool get_ctrlKey();
    public abstract virtual bool get_commandKey();
    public abstract virtual bool get_altKey();
    public abstract virtual bool get_actionKey();
}
internal interface UnityEngine.UIElements.IListDragAndDropArgs {
    public object target { get; }
    public int insertAtIndex { get; }
    public int parentId { get; }
    public int childIndex { get; }
    public DragAndDropData dragAndDropData { get; }
    public DragAndDropPosition dragAndDropPosition { get; }
    public abstract virtual object get_target();
    public abstract virtual int get_insertAtIndex();
    public abstract virtual int get_parentId();
    public abstract virtual int get_childIndex();
    public abstract virtual DragAndDropData get_dragAndDropData();
    public abstract virtual DragAndDropPosition get_dragAndDropPosition();
}
internal interface UnityEngine.UIElements.ILiveReloadAssetTracker`1 {
    public abstract virtual int StartTrackingAsset(T asset);
    public abstract virtual void StopTrackingAsset(T asset);
    public abstract virtual bool IsTrackingAsset(T asset);
    public abstract virtual bool IsTrackingAssets();
    public abstract virtual bool CheckTrackedAssetsDirty();
    public abstract virtual void UpdateAssetTrackerCounts(T asset, int newDirtyCount, int newElementCount, int newInlinePropertiesCount, int newAttributePropertiesDirtyCount);
    public abstract virtual bool OnAssetsImported(HashSet`1<T> changedAssets, HashSet`1<string> deletedAssets);
    public abstract virtual void OnTrackedAssetChanged();
}
public class UnityEngine.UIElements.Image : VisualElement {
    private ScaleMode m_ScaleMode;
    private Texture m_Image;
    private Sprite m_Sprite;
    private VectorImage m_VectorImage;
    private Rect m_UV;
    private Color m_TintColor;
    internal bool m_ImageIsInline;
    private bool m_ScaleModeIsInline;
    private bool m_TintColorIsInline;
    public static string ussClassName;
    private static CustomStyleProperty`1<Texture2D> s_ImageProperty;
    private static CustomStyleProperty`1<Sprite> s_SpriteProperty;
    private static CustomStyleProperty`1<VectorImage> s_VectorImageProperty;
    private static CustomStyleProperty`1<string> s_ScaleModeProperty;
    private static CustomStyleProperty`1<Color> s_TintColorProperty;
    public Texture image { get; public set; }
    public Sprite sprite { get; public set; }
    public VectorImage vectorImage { get; public set; }
    public Rect sourceRect { get; public set; }
    public Rect uv { get; public set; }
    public ScaleMode scaleMode { get; public set; }
    public Color tintColor { get; public set; }
    private static Image();
    public Texture get_image();
    public void set_image(Texture value);
    public Sprite get_sprite();
    public void set_sprite(Sprite value);
    public VectorImage get_vectorImage();
    public void set_vectorImage(VectorImage value);
    public Rect get_sourceRect();
    public void set_sourceRect(Rect value);
    public Rect get_uv();
    public void set_uv(Rect value);
    public ScaleMode get_scaleMode();
    public void set_scaleMode(ScaleMode value);
    public Color get_tintColor();
    public void set_tintColor(Color value);
    private Vector2 GetTextureDisplaySize(Texture texture);
    private Vector2 GetTextureDisplaySize(Sprite sprite);
    protected internal virtual Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode);
    private void OnGenerateVisualContent(MeshGenerationContext mgc);
    private void OnCustomStyleResolved(CustomStyleResolvedEvent e);
    private void ReadCustomProperties(ICustomStyle customStyleProvider);
    private void SetProperty(T0 src, T0& dst, T1& alt0, T2& alt1);
    private void ClearProperty();
    private void SetScaleMode(ScaleMode mode);
    private void SetTintColor(Color color);
    private void CalculateUV(Rect srcRect);
    private Rect GetSourceRect();
}
public interface UnityEngine.UIElements.IManipulator {
    public VisualElement target { get; public set; }
    public abstract virtual VisualElement get_target();
    public abstract virtual void set_target(VisualElement value);
}
public class UnityEngine.UIElements.IMGUIContainer : VisualElement {
    private Action m_OnGUIHandler;
    private ObjectGUIState m_ObjectGUIState;
    internal bool useOwnerObjectGUIState;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Rect <lastWorldClip>k__BackingField;
    private bool m_CullingEnabled;
    private bool m_IsFocusDelegated;
    private bool m_RefreshCachedLayout;
    private LayoutCache m_Cache;
    private Rect m_CachedClippingRect;
    private Matrix4x4 m_CachedTransform;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ContextType <contextType>k__BackingField;
    private bool lostFocus;
    private bool receivedFocus;
    private FocusChangeDirection focusChangeDirection;
    private bool hasFocusableControls;
    private int newKeyboardFocusControlID;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <focusOnlyIfHasFocusableControls>k__BackingField;
    public static string ussClassName;
    internal static string ussFoldoutChildDepthClassName;
    internal static List`1<string> ussFoldoutChildDepthClassNames;
    private GUIGlobals m_GUIGlobals;
    private static ProfilerMarker k_OnGUIMarker;
    private static ProfilerMarker k_ImmediateCallbackMarker;
    private static Event s_DefaultMeasureEvent;
    private static Event s_MeasureEvent;
    private static Event s_CurrentEvent;
    public Action onGUIHandler { get; public set; }
    internal ObjectGUIState guiState { get; }
    internal Rect lastWorldClip { get; internal set; }
    public bool cullingEnabled { get; public set; }
    private LayoutCache cache { get; }
    private float layoutMeasuredWidth { get; }
    private float layoutMeasuredHeight { get; }
    public ContextType contextType { get; public set; }
    internal bool focusOnlyIfHasFocusableControls { get; internal set; }
    public bool canGrabFocus { get; }
    private static IMGUIContainer();
    public IMGUIContainer(Action onGUIHandler);
    public Action get_onGUIHandler();
    public void set_onGUIHandler(Action value);
    internal ObjectGUIState get_guiState();
    [CompilerGeneratedAttribute]
internal Rect get_lastWorldClip();
    [CompilerGeneratedAttribute]
internal void set_lastWorldClip(Rect value);
    public bool get_cullingEnabled();
    public void set_cullingEnabled(bool value);
    private LayoutCache get_cache();
    private float get_layoutMeasuredWidth();
    private float get_layoutMeasuredHeight();
    [CompilerGeneratedAttribute]
public ContextType get_contextType();
    [CompilerGeneratedAttribute]
public void set_contextType(ContextType value);
    [CompilerGeneratedAttribute]
internal bool get_focusOnlyIfHasFocusableControls();
    [CompilerGeneratedAttribute]
internal void set_focusOnlyIfHasFocusableControls(bool value);
    public virtual bool get_canGrabFocus();
    private void OnGenerateVisualContent(MeshGenerationContext mgc);
    private void SaveGlobals();
    private void RestoreGlobals();
    private void DoOnGUI(Event evt, Matrix4x4 parentTransform, Rect clippingRect, bool isComputingLayout, Rect layoutSize, Action onGUIHandler, bool canAffectFocus);
    public void MarkDirtyLayout();
    internal void ProcessEvent(EventBase evt);
    private void DoIMGUIRepaint();
    internal bool SendEventToIMGUI(EventBase evt, bool canAffectFocus, bool verifyBounds);
    private bool SendEventToIMGUIRaw(EventBase evt, bool canAffectFocus, bool verifyBounds);
    private bool VerifyBounds(EventBase evt);
    private bool IsContainerCapturingTheMouse();
    private bool IsLocalEvent(EventBase evt);
    private bool IsEventInsideLocalWindow(EventBase evt);
    private static bool IsDockAreaMouseUp(EventBase evt);
    private bool HandleIMGUIEvent(Event e, bool canAffectFocus);
    internal bool HandleIMGUIEvent(Event e, Action onGUIHandler, bool canAffectFocus);
    private bool HandleIMGUIEvent(Event e, Matrix4x4 worldTransform, Rect clippingRect, Action onGUIHandler, bool canAffectFocus);
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultAction(EventBase evt);
    private void SetFoldoutDepthClass();
    protected internal virtual Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode);
    private Rect GetCurrentClipRect();
    private static void GetCurrentTransformAndClip(IMGUIContainer container, Event evt, Matrix4x4& transform, Rect& clipRect);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposeManaged);
    [CompilerGeneratedAttribute]
private void <DoOnGUI>b__56_0();
}
[EventCategoryAttribute("16")]
public class UnityEngine.UIElements.IMGUIEvent : EventBase`1<IMGUIEvent> {
    private static IMGUIEvent();
    public static IMGUIEvent GetPooled(Event systemEvent);
    protected virtual void Init();
    private void LocalInit();
}
internal class UnityEngine.UIElements.IMGUIEventDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public sealed virtual void DispatchEvent(EventBase evt, IPanel panel);
}
public interface UnityEngine.UIElements.IMixedValueSupport {
    public bool showMixedValue { get; public set; }
    public abstract virtual bool get_showMixedValue();
    public abstract virtual void set_showMixedValue(bool value);
}
public abstract class UnityEngine.UIElements.ImmediateModeElement : VisualElement {
    private static Dictionary`2<Type, ProfilerMarker> s_Markers;
    private ProfilerMarker m_ImmediateRepaintMarker;
    private bool m_CullingEnabled;
    public bool cullingEnabled { get; public set; }
    private static ImmediateModeElement();
    public bool get_cullingEnabled();
    public void set_cullingEnabled(bool value);
    private void OnGenerateVisualContent(MeshGenerationContext mgc);
    private void CallImmediateRepaint();
    protected abstract virtual void ImmediateRepaint();
}
internal class UnityEngine.UIElements.ImmediateModeException : Exception {
    public ImmediateModeException(Exception inner);
}
[NativeHeaderAttribute("ModuleOverrides/com.unity.ui/Core/Native/ImmediateStylePainter.h")]
internal class UnityEngine.UIElements.ImmediateStylePainter : object {
    internal static void DrawRect(Rect screenRect, Color color, Vector4 borderWidths, Vector4 borderRadiuses);
    internal static void DrawTexture(Rect screenRect, Texture texture, Rect sourceRect, Color color, Vector4 borderWidths, Vector4 borderRadiuses, int leftBorder, int topBorder, int rightBorder, int bottomBorder, bool usePremultiplyAlpha);
    internal static void DrawText(Rect screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping textClipping);
    private static void DrawRect_Injected(Rect& screenRect, Color& color, Vector4& borderWidths, Vector4& borderRadiuses);
    private static void DrawTexture_Injected(Rect& screenRect, Texture texture, Rect& sourceRect, Color& color, Vector4& borderWidths, Vector4& borderRadiuses, int leftBorder, int topBorder, int rightBorder, int bottomBorder, bool usePremultiplyAlpha);
    private static void DrawText_Injected(Rect& screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color& fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping textClipping);
}
public interface UnityEngine.UIElements.IMouseCaptureEvent {
}
public interface UnityEngine.UIElements.IMouseEvent {
    public EventModifiers modifiers { get; }
    public Vector2 mousePosition { get; }
    public Vector2 localMousePosition { get; }
    public Vector2 mouseDelta { get; }
    public int clickCount { get; }
    public int button { get; }
    public int pressedButtons { get; }
    public bool shiftKey { get; }
    public bool ctrlKey { get; }
    public bool commandKey { get; }
    public bool altKey { get; }
    public bool actionKey { get; }
    public abstract virtual EventModifiers get_modifiers();
    public abstract virtual Vector2 get_mousePosition();
    public abstract virtual Vector2 get_localMousePosition();
    public abstract virtual Vector2 get_mouseDelta();
    public abstract virtual int get_clickCount();
    public abstract virtual int get_button();
    public abstract virtual int get_pressedButtons();
    public abstract virtual bool get_shiftKey();
    public abstract virtual bool get_ctrlKey();
    public abstract virtual bool get_commandKey();
    public abstract virtual bool get_altKey();
    public abstract virtual bool get_actionKey();
}
internal interface UnityEngine.UIElements.IMouseEventInternal {
    public bool triggeredByOS { get; public set; }
    public bool recomputeTopElementUnderMouse { get; public set; }
    public IPointerEvent sourcePointerEvent { get; public set; }
    public abstract virtual bool get_triggeredByOS();
    public abstract virtual void set_triggeredByOS(bool value);
    public abstract virtual bool get_recomputeTopElementUnderMouse();
    public abstract virtual void set_recomputeTopElementUnderMouse(bool value);
    public abstract virtual IPointerEvent get_sourcePointerEvent();
    public abstract virtual void set_sourcePointerEvent(IPointerEvent value);
}
public interface UnityEngine.UIElements.INavigationEvent {
    public EventModifiers modifiers { get; }
    internal NavigationDeviceType deviceType { get; }
    public bool shiftKey { get; }
    public bool ctrlKey { get; }
    public bool commandKey { get; }
    public bool altKey { get; }
    public bool actionKey { get; }
    public abstract virtual EventModifiers get_modifiers();
    internal abstract virtual NavigationDeviceType get_deviceType();
    public abstract virtual bool get_shiftKey();
    public abstract virtual bool get_ctrlKey();
    public abstract virtual bool get_commandKey();
    public abstract virtual bool get_altKey();
    public abstract virtual bool get_actionKey();
}
internal class UnityEngine.UIElements.InheritedData : ValueType {
    public Color color;
    public Length fontSize;
    public Length letterSpacing;
    public TextShadow textShadow;
    public Font unityFont;
    public FontDefinition unityFontDefinition;
    public FontStyle unityFontStyleAndWeight;
    public Length unityParagraphSpacing;
    public TextAnchor unityTextAlign;
    public Color unityTextOutlineColor;
    public float unityTextOutlineWidth;
    public Visibility visibility;
    public WhiteSpace whiteSpace;
    public Length wordSpacing;
    public sealed virtual InheritedData Copy();
    public sealed virtual void CopyFrom(InheritedData& other);
    public static bool op_Equality(InheritedData lhs, InheritedData rhs);
    public static bool op_Inequality(InheritedData lhs, InheritedData rhs);
    public sealed virtual bool Equals(InheritedData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class UnityEngine.UIElements.InlineStyleAccess : StyleValueCollection {
    private static StylePropertyReader s_StylePropertyReader;
    private List`1<StyleValueManaged> m_ValuesManaged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <ve>k__BackingField;
    private bool m_HasInlineCursor;
    private StyleCursor m_InlineCursor;
    private bool m_HasInlineTextShadow;
    private StyleTextShadow m_InlineTextShadow;
    private bool m_HasInlineTransformOrigin;
    private StyleTransformOrigin m_InlineTransformOrigin;
    private bool m_HasInlineTranslate;
    private StyleTranslate m_InlineTranslateOperation;
    private bool m_HasInlineRotate;
    private StyleRotate m_InlineRotateOperation;
    private bool m_HasInlineScale;
    private StyleScale m_InlineScale;
    private bool m_HasInlineBackgroundSize;
    public StyleBackgroundSize m_InlineBackgroundSize;
    private InlineRule m_InlineRule;
    private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.alignContent { get; private set; }
    private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.alignItems { get; private set; }
    private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.alignSelf { get; private set; }
    private StyleColor UnityEngine.UIElements.IStyle.backgroundColor { get; private set; }
    private StyleBackground UnityEngine.UIElements.IStyle.backgroundImage { get; private set; }
    private StyleBackgroundPosition UnityEngine.UIElements.IStyle.backgroundPositionX { get; private set; }
    private StyleBackgroundPosition UnityEngine.UIElements.IStyle.backgroundPositionY { get; private set; }
    private StyleBackgroundRepeat UnityEngine.UIElements.IStyle.backgroundRepeat { get; private set; }
    private StyleColor UnityEngine.UIElements.IStyle.borderBottomColor { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.borderBottomLeftRadius { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.borderBottomRightRadius { get; private set; }
    private StyleFloat UnityEngine.UIElements.IStyle.borderBottomWidth { get; private set; }
    private StyleColor UnityEngine.UIElements.IStyle.borderLeftColor { get; private set; }
    private StyleFloat UnityEngine.UIElements.IStyle.borderLeftWidth { get; private set; }
    private StyleColor UnityEngine.UIElements.IStyle.borderRightColor { get; private set; }
    private StyleFloat UnityEngine.UIElements.IStyle.borderRightWidth { get; private set; }
    private StyleColor UnityEngine.UIElements.IStyle.borderTopColor { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.borderTopLeftRadius { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.borderTopRightRadius { get; private set; }
    private StyleFloat UnityEngine.UIElements.IStyle.borderTopWidth { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.bottom { get; private set; }
    private StyleColor UnityEngine.UIElements.IStyle.color { get; private set; }
    private StyleEnum`1<DisplayStyle> UnityEngine.UIElements.IStyle.display { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.flexBasis { get; private set; }
    private StyleEnum`1<FlexDirection> UnityEngine.UIElements.IStyle.flexDirection { get; private set; }
    private StyleFloat UnityEngine.UIElements.IStyle.flexGrow { get; private set; }
    private StyleFloat UnityEngine.UIElements.IStyle.flexShrink { get; private set; }
    private StyleEnum`1<Wrap> UnityEngine.UIElements.IStyle.flexWrap { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.fontSize { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.height { get; private set; }
    private StyleEnum`1<Justify> UnityEngine.UIElements.IStyle.justifyContent { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.left { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.letterSpacing { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.marginBottom { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.marginLeft { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.marginRight { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.marginTop { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.maxHeight { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.maxWidth { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.minHeight { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.minWidth { get; private set; }
    private StyleFloat UnityEngine.UIElements.IStyle.opacity { get; private set; }
    private StyleEnum`1<Overflow> UnityEngine.UIElements.IStyle.overflow { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.paddingBottom { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.paddingLeft { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.paddingRight { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.paddingTop { get; private set; }
    private StyleEnum`1<Position> UnityEngine.UIElements.IStyle.position { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.right { get; private set; }
    private StyleEnum`1<TextOverflow> UnityEngine.UIElements.IStyle.textOverflow { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.top { get; private set; }
    private StyleList`1<TimeValue> UnityEngine.UIElements.IStyle.transitionDelay { get; private set; }
    private StyleList`1<TimeValue> UnityEngine.UIElements.IStyle.transitionDuration { get; private set; }
    private StyleList`1<StylePropertyName> UnityEngine.UIElements.IStyle.transitionProperty { get; private set; }
    private StyleList`1<EasingFunction> UnityEngine.UIElements.IStyle.transitionTimingFunction { get; private set; }
    private StyleColor UnityEngine.UIElements.IStyle.unityBackgroundImageTintColor { get; private set; }
    private StyleFont UnityEngine.UIElements.IStyle.unityFont { get; private set; }
    private StyleFontDefinition UnityEngine.UIElements.IStyle.unityFontDefinition { get; private set; }
    private StyleEnum`1<FontStyle> UnityEngine.UIElements.IStyle.unityFontStyleAndWeight { get; private set; }
    private StyleEnum`1<OverflowClipBox> UnityEngine.UIElements.IStyle.unityOverflowClipBox { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.unityParagraphSpacing { get; private set; }
    private StyleInt UnityEngine.UIElements.IStyle.unitySliceBottom { get; private set; }
    private StyleInt UnityEngine.UIElements.IStyle.unitySliceLeft { get; private set; }
    private StyleInt UnityEngine.UIElements.IStyle.unitySliceRight { get; private set; }
    private StyleFloat UnityEngine.UIElements.IStyle.unitySliceScale { get; private set; }
    private StyleInt UnityEngine.UIElements.IStyle.unitySliceTop { get; private set; }
    private StyleEnum`1<TextAnchor> UnityEngine.UIElements.IStyle.unityTextAlign { get; private set; }
    private StyleColor UnityEngine.UIElements.IStyle.unityTextOutlineColor { get; private set; }
    private StyleFloat UnityEngine.UIElements.IStyle.unityTextOutlineWidth { get; private set; }
    private StyleEnum`1<TextOverflowPosition> UnityEngine.UIElements.IStyle.unityTextOverflowPosition { get; private set; }
    private StyleEnum`1<Visibility> UnityEngine.UIElements.IStyle.visibility { get; private set; }
    private StyleEnum`1<WhiteSpace> UnityEngine.UIElements.IStyle.whiteSpace { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.width { get; private set; }
    private StyleLength UnityEngine.UIElements.IStyle.wordSpacing { get; private set; }
    private VisualElement ve { get; private set; }
    public InlineRule inlineRule { get; }
    private StyleCursor UnityEngine.UIElements.IStyle.cursor { get; private set; }
    private StyleTextShadow UnityEngine.UIElements.IStyle.textShadow { get; private set; }
    private StyleBackgroundSize UnityEngine.UIElements.IStyle.backgroundSize { get; private set; }
    private StyleTransformOrigin UnityEngine.UIElements.IStyle.transformOrigin { get; private set; }
    private StyleTranslate UnityEngine.UIElements.IStyle.translate { get; private set; }
    private StyleRotate UnityEngine.UIElements.IStyle.rotate { get; private set; }
    private StyleScale UnityEngine.UIElements.IStyle.scale { get; private set; }
    private StyleEnum`1<ScaleMode> UnityEngine.UIElements.IStyle.unityBackgroundScaleMode { get; private set; }
    public InlineStyleAccess(VisualElement ve);
    private static InlineStyleAccess();
    private sealed virtual override StyleEnum`1<Align> UnityEngine.UIElements.IStyle.get_alignContent();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_alignContent(StyleEnum`1<Align> value);
    private sealed virtual override StyleEnum`1<Align> UnityEngine.UIElements.IStyle.get_alignItems();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_alignItems(StyleEnum`1<Align> value);
    private sealed virtual override StyleEnum`1<Align> UnityEngine.UIElements.IStyle.get_alignSelf();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_alignSelf(StyleEnum`1<Align> value);
    private sealed virtual override StyleColor UnityEngine.UIElements.IStyle.get_backgroundColor();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_backgroundColor(StyleColor value);
    private sealed virtual override StyleBackground UnityEngine.UIElements.IStyle.get_backgroundImage();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_backgroundImage(StyleBackground value);
    private sealed virtual override StyleBackgroundPosition UnityEngine.UIElements.IStyle.get_backgroundPositionX();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_backgroundPositionX(StyleBackgroundPosition value);
    private sealed virtual override StyleBackgroundPosition UnityEngine.UIElements.IStyle.get_backgroundPositionY();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_backgroundPositionY(StyleBackgroundPosition value);
    private sealed virtual override StyleBackgroundRepeat UnityEngine.UIElements.IStyle.get_backgroundRepeat();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_backgroundRepeat(StyleBackgroundRepeat value);
    private sealed virtual override StyleColor UnityEngine.UIElements.IStyle.get_borderBottomColor();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderBottomColor(StyleColor value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_borderBottomLeftRadius();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderBottomLeftRadius(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_borderBottomRightRadius();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderBottomRightRadius(StyleLength value);
    private sealed virtual override StyleFloat UnityEngine.UIElements.IStyle.get_borderBottomWidth();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderBottomWidth(StyleFloat value);
    private sealed virtual override StyleColor UnityEngine.UIElements.IStyle.get_borderLeftColor();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderLeftColor(StyleColor value);
    private sealed virtual override StyleFloat UnityEngine.UIElements.IStyle.get_borderLeftWidth();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderLeftWidth(StyleFloat value);
    private sealed virtual override StyleColor UnityEngine.UIElements.IStyle.get_borderRightColor();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderRightColor(StyleColor value);
    private sealed virtual override StyleFloat UnityEngine.UIElements.IStyle.get_borderRightWidth();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderRightWidth(StyleFloat value);
    private sealed virtual override StyleColor UnityEngine.UIElements.IStyle.get_borderTopColor();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderTopColor(StyleColor value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_borderTopLeftRadius();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderTopLeftRadius(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_borderTopRightRadius();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderTopRightRadius(StyleLength value);
    private sealed virtual override StyleFloat UnityEngine.UIElements.IStyle.get_borderTopWidth();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_borderTopWidth(StyleFloat value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_bottom();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_bottom(StyleLength value);
    private sealed virtual override StyleColor UnityEngine.UIElements.IStyle.get_color();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_color(StyleColor value);
    private sealed virtual override StyleEnum`1<DisplayStyle> UnityEngine.UIElements.IStyle.get_display();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_display(StyleEnum`1<DisplayStyle> value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_flexBasis();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_flexBasis(StyleLength value);
    private sealed virtual override StyleEnum`1<FlexDirection> UnityEngine.UIElements.IStyle.get_flexDirection();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_flexDirection(StyleEnum`1<FlexDirection> value);
    private sealed virtual override StyleFloat UnityEngine.UIElements.IStyle.get_flexGrow();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_flexGrow(StyleFloat value);
    private sealed virtual override StyleFloat UnityEngine.UIElements.IStyle.get_flexShrink();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_flexShrink(StyleFloat value);
    private sealed virtual override StyleEnum`1<Wrap> UnityEngine.UIElements.IStyle.get_flexWrap();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_flexWrap(StyleEnum`1<Wrap> value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_fontSize();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_fontSize(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_height();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_height(StyleLength value);
    private sealed virtual override StyleEnum`1<Justify> UnityEngine.UIElements.IStyle.get_justifyContent();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_justifyContent(StyleEnum`1<Justify> value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_left();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_left(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_letterSpacing();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_letterSpacing(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_marginBottom();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_marginBottom(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_marginLeft();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_marginLeft(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_marginRight();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_marginRight(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_marginTop();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_marginTop(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_maxHeight();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_maxHeight(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_maxWidth();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_maxWidth(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_minHeight();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_minHeight(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_minWidth();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_minWidth(StyleLength value);
    private sealed virtual override StyleFloat UnityEngine.UIElements.IStyle.get_opacity();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_opacity(StyleFloat value);
    private sealed virtual override StyleEnum`1<Overflow> UnityEngine.UIElements.IStyle.get_overflow();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_overflow(StyleEnum`1<Overflow> value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_paddingBottom();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_paddingBottom(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_paddingLeft();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_paddingLeft(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_paddingRight();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_paddingRight(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_paddingTop();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_paddingTop(StyleLength value);
    private sealed virtual override StyleEnum`1<Position> UnityEngine.UIElements.IStyle.get_position();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_position(StyleEnum`1<Position> value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_right();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_right(StyleLength value);
    private sealed virtual override StyleEnum`1<TextOverflow> UnityEngine.UIElements.IStyle.get_textOverflow();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_textOverflow(StyleEnum`1<TextOverflow> value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_top();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_top(StyleLength value);
    private sealed virtual override StyleList`1<TimeValue> UnityEngine.UIElements.IStyle.get_transitionDelay();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_transitionDelay(StyleList`1<TimeValue> value);
    private sealed virtual override StyleList`1<TimeValue> UnityEngine.UIElements.IStyle.get_transitionDuration();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_transitionDuration(StyleList`1<TimeValue> value);
    private sealed virtual override StyleList`1<StylePropertyName> UnityEngine.UIElements.IStyle.get_transitionProperty();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_transitionProperty(StyleList`1<StylePropertyName> value);
    private sealed virtual override StyleList`1<EasingFunction> UnityEngine.UIElements.IStyle.get_transitionTimingFunction();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_transitionTimingFunction(StyleList`1<EasingFunction> value);
    private sealed virtual override StyleColor UnityEngine.UIElements.IStyle.get_unityBackgroundImageTintColor();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityBackgroundImageTintColor(StyleColor value);
    private sealed virtual override StyleFont UnityEngine.UIElements.IStyle.get_unityFont();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityFont(StyleFont value);
    private sealed virtual override StyleFontDefinition UnityEngine.UIElements.IStyle.get_unityFontDefinition();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityFontDefinition(StyleFontDefinition value);
    private sealed virtual override StyleEnum`1<FontStyle> UnityEngine.UIElements.IStyle.get_unityFontStyleAndWeight();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityFontStyleAndWeight(StyleEnum`1<FontStyle> value);
    private sealed virtual override StyleEnum`1<OverflowClipBox> UnityEngine.UIElements.IStyle.get_unityOverflowClipBox();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityOverflowClipBox(StyleEnum`1<OverflowClipBox> value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_unityParagraphSpacing();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityParagraphSpacing(StyleLength value);
    private sealed virtual override StyleInt UnityEngine.UIElements.IStyle.get_unitySliceBottom();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unitySliceBottom(StyleInt value);
    private sealed virtual override StyleInt UnityEngine.UIElements.IStyle.get_unitySliceLeft();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unitySliceLeft(StyleInt value);
    private sealed virtual override StyleInt UnityEngine.UIElements.IStyle.get_unitySliceRight();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unitySliceRight(StyleInt value);
    private sealed virtual override StyleFloat UnityEngine.UIElements.IStyle.get_unitySliceScale();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unitySliceScale(StyleFloat value);
    private sealed virtual override StyleInt UnityEngine.UIElements.IStyle.get_unitySliceTop();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unitySliceTop(StyleInt value);
    private sealed virtual override StyleEnum`1<TextAnchor> UnityEngine.UIElements.IStyle.get_unityTextAlign();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityTextAlign(StyleEnum`1<TextAnchor> value);
    private sealed virtual override StyleColor UnityEngine.UIElements.IStyle.get_unityTextOutlineColor();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityTextOutlineColor(StyleColor value);
    private sealed virtual override StyleFloat UnityEngine.UIElements.IStyle.get_unityTextOutlineWidth();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityTextOutlineWidth(StyleFloat value);
    private sealed virtual override StyleEnum`1<TextOverflowPosition> UnityEngine.UIElements.IStyle.get_unityTextOverflowPosition();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityTextOverflowPosition(StyleEnum`1<TextOverflowPosition> value);
    private sealed virtual override StyleEnum`1<Visibility> UnityEngine.UIElements.IStyle.get_visibility();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_visibility(StyleEnum`1<Visibility> value);
    private sealed virtual override StyleEnum`1<WhiteSpace> UnityEngine.UIElements.IStyle.get_whiteSpace();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_whiteSpace(StyleEnum`1<WhiteSpace> value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_width();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_width(StyleLength value);
    private sealed virtual override StyleLength UnityEngine.UIElements.IStyle.get_wordSpacing();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_wordSpacing(StyleLength value);
    [CompilerGeneratedAttribute]
private VisualElement get_ve();
    [CompilerGeneratedAttribute]
private void set_ve(VisualElement value);
    public InlineRule get_inlineRule();
    protected virtual override void Finalize();
    public void SetInlineRule(StyleSheet sheet, StyleRule rule);
    public bool IsValueSet(StylePropertyId id);
    public void ApplyInlineStyles(ComputedStyle& computedStyle);
    private sealed virtual override StyleCursor UnityEngine.UIElements.IStyle.get_cursor();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_cursor(StyleCursor value);
    private sealed virtual override StyleTextShadow UnityEngine.UIElements.IStyle.get_textShadow();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_textShadow(StyleTextShadow value);
    private sealed virtual override StyleBackgroundSize UnityEngine.UIElements.IStyle.get_backgroundSize();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_backgroundSize(StyleBackgroundSize value);
    private StyleList`1<T> GetStyleList(StylePropertyId id);
    private void SetStyleValueManaged(StyleValueManaged value);
    private bool TryGetStyleValueManaged(StylePropertyId id, StyleValueManaged& value);
    private sealed virtual override StyleTransformOrigin UnityEngine.UIElements.IStyle.get_transformOrigin();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_transformOrigin(StyleTransformOrigin value);
    private sealed virtual override StyleTranslate UnityEngine.UIElements.IStyle.get_translate();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_translate(StyleTranslate value);
    private sealed virtual override StyleRotate UnityEngine.UIElements.IStyle.get_rotate();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_rotate(StyleRotate value);
    private sealed virtual override StyleScale UnityEngine.UIElements.IStyle.get_scale();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_scale(StyleScale value);
    private bool SetStyleValue(StylePropertyId id, StyleBackgroundPosition inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleBackgroundRepeat inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleLength inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleFloat inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleInt inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleColor inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleEnum`1<T> inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleBackground inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleFontDefinition inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleFont inlineValue);
    private bool SetStyleValue(StylePropertyId id, StyleList`1<T> inlineValue);
    private bool SetInlineCursor(StyleCursor inlineValue);
    private void ApplyStyleCursor(StyleCursor cursor);
    private bool SetInlineTextShadow(StyleTextShadow inlineValue);
    private void ApplyStyleTextShadow(StyleTextShadow textShadow);
    private bool SetInlineTransformOrigin(StyleTransformOrigin inlineValue);
    private void ApplyStyleTransformOrigin(StyleTransformOrigin transformOrigin);
    private bool SetInlineTranslate(StyleTranslate inlineValue);
    private void ApplyStyleTranslate(StyleTranslate translate);
    private bool SetInlineScale(StyleScale inlineValue);
    private void ApplyStyleScale(StyleScale scale);
    private bool SetInlineRotate(StyleRotate inlineValue);
    private void ApplyStyleRotate(StyleRotate rotate);
    private bool SetInlineBackgroundSize(StyleBackgroundSize inlineValue);
    private void ApplyStyleBackgroundSize(StyleBackgroundSize backgroundSize);
    private void ApplyStyleValue(StyleValue value);
    private void ApplyStyleValue(StyleValueManaged value);
    private bool RemoveInlineStyle(StylePropertyId id);
    private void ApplyFromComputedStyle(StylePropertyId id, ComputedStyle& newStyle);
    public bool TryGetInlineCursor(StyleCursor& value);
    public bool TryGetInlineTextShadow(StyleTextShadow& value);
    public bool TryGetInlineTransformOrigin(StyleTransformOrigin& value);
    public bool TryGetInlineTranslate(StyleTranslate& value);
    public bool TryGetInlineRotate(StyleRotate& value);
    public bool TryGetInlineScale(StyleScale& value);
    public bool TryGetInlineBackgroundSize(StyleBackgroundSize& value);
    private sealed virtual override StyleEnum`1<ScaleMode> UnityEngine.UIElements.IStyle.get_unityBackgroundScaleMode();
    private sealed virtual override void UnityEngine.UIElements.IStyle.set_unityBackgroundScaleMode(StyleEnum`1<ScaleMode> value);
}
public interface UnityEngine.UIElements.INotifyValueChanged`1 {
    public T value { get; public set; }
    public abstract virtual T get_value();
    public abstract virtual void set_value(T value);
    public abstract virtual void SetValueWithoutNotify(T newValue);
}
[ExtensionAttribute]
public static class UnityEngine.UIElements.INotifyValueChangedExtensions : object {
    [ExtensionAttribute]
public static bool RegisterValueChangedCallback(INotifyValueChanged`1<T> control, EventCallback`1<ChangeEvent`1<T>> callback);
    [ExtensionAttribute]
public static bool UnregisterValueChangedCallback(INotifyValueChanged`1<T> control, EventCallback`1<ChangeEvent`1<T>> callback);
}
public class UnityEngine.UIElements.InputEvent : EventBase`1<InputEvent> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <previousData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <newData>k__BackingField;
    public string previousData { get; protected set; }
    public string newData { get; protected set; }
    private static InputEvent();
    [CompilerGeneratedAttribute]
public string get_previousData();
    [CompilerGeneratedAttribute]
protected void set_previousData(string value);
    [CompilerGeneratedAttribute]
public string get_newData();
    [CompilerGeneratedAttribute]
protected void set_newData(string value);
    protected virtual void Init();
    private void LocalInit();
    public static InputEvent GetPooled(string previousData, string newData);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.IntegerField : TextValueField`1<int> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    private IntegerInput integerInput { get; }
    public IntegerField(int maxLength);
    public IntegerField(string label, int maxLength);
    private static IntegerField();
    private IntegerInput get_integerInput();
    protected virtual string ValueToString(int v);
    protected virtual int StringToValue(string str);
    internal virtual bool CanTryParse(string textString);
    public virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, int startValue);
}
internal class UnityEngine.UIElements.Internal.ColumnMover : PointerManipulator {
    private static float k_StartDragDistance;
    private float m_StartPos;
    private float m_LastPos;
    private bool m_Active;
    private bool m_Moving;
    private bool m_Cancelled;
    private MultiColumnCollectionHeader m_Header;
    private VisualElement m_PreviewElement;
    private MultiColumnHeaderColumnMoveLocationPreview m_LocationPreviewElement;
    private Column m_ColumnToMove;
    private float m_ColumnToMovePos;
    private float m_ColumnToMoveWidth;
    private Column m_DestinationColumn;
    private bool m_MoveBeforeDestination;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private ColumnLayout <columnLayout>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<ColumnMover> activeChanged;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<ColumnMover> movingChanged;
    public ColumnLayout columnLayout { get; public set; }
    public bool active { get; public set; }
    public bool moving { get; public set; }
    [CompilerGeneratedAttribute]
public ColumnLayout get_columnLayout();
    [CompilerGeneratedAttribute]
public void set_columnLayout(ColumnLayout value);
    public bool get_active();
    public void set_active(bool value);
    public bool get_moving();
    public void set_moving(bool value);
    [CompilerGeneratedAttribute]
public void add_activeChanged(Action`1<ColumnMover> value);
    [CompilerGeneratedAttribute]
public void remove_activeChanged(Action`1<ColumnMover> value);
    [CompilerGeneratedAttribute]
public void add_movingChanged(Action`1<ColumnMover> value);
    [CompilerGeneratedAttribute]
public void remove_movingChanged(Action`1<ColumnMover> value);
    protected virtual void RegisterCallbacksOnTarget();
    protected virtual void UnregisterCallbacksFromTarget();
    protected void OnMouseDown(MouseDownEvent evt);
    protected void OnMouseMove(MouseMoveEvent evt);
    protected void OnMouseUp(MouseUpEvent evt);
    private void OnMouseCaptureOut(MouseCaptureOutEvent evt);
    private void OnPointerDown(PointerDownEvent evt);
    private void OnPointerMove(PointerMoveEvent evt);
    private void OnPointerUp(PointerUpEvent evt);
    private void OnPointerCancel(PointerCancelEvent evt);
    private void OnPointerCaptureOut(PointerCaptureOutEvent evt);
    private static bool IsNotMouseEvent(int pointerId);
    protected void ProcessCancelEvent(EventBase evt, int pointerId);
    private void OnKeyDown(KeyDownEvent e);
    private void ProcessDownEvent(EventBase evt, Vector2 localPosition, int pointerId);
    private void ProcessMoveEvent(EventBase e, Vector2 localPosition);
    private void ProcessUpEvent(EventBase evt, Vector2 localPosition, int pointerId);
    private void BeginDragMove(float pos);
    internal void DragMove(float pos);
    private void UpdatePreviewPosition();
    private void UpdateMoveLocation();
    private void EndDragMove(bool cancelled);
}
internal class UnityEngine.UIElements.Internal.ColumnResizer : PointerManipulator {
    private Vector2 m_Start;
    protected bool m_Active;
    private bool m_Resizing;
    private MultiColumnCollectionHeader m_Header;
    private Column m_Column;
    private VisualElement m_PreviewElement;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private ColumnLayout <columnLayout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <preview>k__BackingField;
    public ColumnLayout columnLayout { get; public set; }
    public bool preview { get; public set; }
    public ColumnResizer(Column column);
    [CompilerGeneratedAttribute]
public ColumnLayout get_columnLayout();
    [CompilerGeneratedAttribute]
public void set_columnLayout(ColumnLayout value);
    [CompilerGeneratedAttribute]
public bool get_preview();
    [CompilerGeneratedAttribute]
public void set_preview(bool value);
    protected virtual void RegisterCallbacksOnTarget();
    protected virtual void UnregisterCallbacksFromTarget();
    private void OnKeyDown(KeyDownEvent e);
    private void OnPointerDown(PointerDownEvent e);
    private void OnPointerMove(PointerMoveEvent e);
    private void OnPointerUp(PointerUpEvent e);
    private void BeginDragResize(float pos);
    private void DragResize(float pos);
    private void UpdatePreviewPosition();
    private void EndDragResize(float pos, bool cancelled);
}
internal class UnityEngine.UIElements.Internal.MultiColumnCollectionHeader : VisualElement {
    private static int kMaxStableLayoutPassCount;
    public static string ussClassName;
    public static string columnContainerUssClassName;
    public static string handleContainerUssClassName;
    public static string reorderableUssClassName;
    private bool m_SortingEnabled;
    private List`1<SortColumnDescription> m_SortedColumns;
    private SortColumnDescriptions m_SortDescriptions;
    private List`1<SortedColumnState> m_OldSortedColumnStates;
    private bool m_SortingUpdatesTemporarilyDisabled;
    private ViewState m_ViewState;
    private bool m_ApplyingViewState;
    private bool m_DoLayoutScheduled;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<Column, ColumnData> <columnDataMap>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnLayout <columnLayout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <columnContainer>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private VisualElement <resizeHandleContainer>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Columns <columns>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`2<int, float> columnResized;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action columnSortingChanged;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`2<ContextualMenuPopulateEvent, Column> contextMenuPopulateEvent;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action viewDataRestored;
    internal bool isApplyingViewState { get; }
    public Dictionary`2<Column, ColumnData> columnDataMap { get; }
    public ColumnLayout columnLayout { get; }
    public VisualElement columnContainer { get; }
    public VisualElement resizeHandleContainer { get; }
    public IEnumerable`1<SortColumnDescription> sortedColumns { get; }
    public SortColumnDescriptions sortDescriptions { get; protected internal set; }
    public Columns columns { get; }
    public bool sortingEnabled { get; public set; }
    public MultiColumnCollectionHeader(Columns columns, SortColumnDescriptions sortDescriptions, List`1<SortColumnDescription> sortedColumns);
    private static MultiColumnCollectionHeader();
    internal bool get_isApplyingViewState();
    [CompilerGeneratedAttribute]
public Dictionary`2<Column, ColumnData> get_columnDataMap();
    [CompilerGeneratedAttribute]
public ColumnLayout get_columnLayout();
    [CompilerGeneratedAttribute]
public VisualElement get_columnContainer();
    [CompilerGeneratedAttribute]
public VisualElement get_resizeHandleContainer();
    public IEnumerable`1<SortColumnDescription> get_sortedColumns();
    public SortColumnDescriptions get_sortDescriptions();
    protected internal void set_sortDescriptions(SortColumnDescriptions value);
    [CompilerGeneratedAttribute]
public Columns get_columns();
    public bool get_sortingEnabled();
    public void set_sortingEnabled(bool value);
    [CompilerGeneratedAttribute]
public void add_columnResized(Action`2<int, float> value);
    [CompilerGeneratedAttribute]
public void remove_columnResized(Action`2<int, float> value);
    [CompilerGeneratedAttribute]
public void add_columnSortingChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_columnSortingChanged(Action value);
    [CompilerGeneratedAttribute]
public void add_contextMenuPopulateEvent(Action`2<ContextualMenuPopulateEvent, Column> value);
    [CompilerGeneratedAttribute]
public void remove_contextMenuPopulateEvent(Action`2<ContextualMenuPopulateEvent, Column> value);
    [CompilerGeneratedAttribute]
internal void add_viewDataRestored(Action value);
    [CompilerGeneratedAttribute]
internal void remove_viewDataRestored(Action value);
    private void ScheduleDoLayout();
    private void ResizeToFit();
    private void UpdateSortedColumns();
    private void UpdateColumnControls();
    private void OnColumnAdded(Column column, int index);
    private void OnColumnAdded(Column column);
    private void OnColumnRemoved(Column column);
    private void OnColumnChanged(Column column, ColumnDataType type);
    private void OnColumnReordered(Column column, int from, int to);
    private void OnColumnResized(Column column);
    private void OnContextualMenuManipulator(ContextualMenuPopulateEvent evt);
    private void OnMoveManipulatorActivated(ColumnMover mover);
    private void OnGeometryChanged(GeometryChangedEvent e);
    private void DoLayout();
    private void OnColumnControlGeometryChanged(GeometryChangedEvent evt);
    private void OnColumnClicked(EventBase evt);
    private void UpdateSortColumnDescriptionsOnClick(Column column, EventModifiers modifiers);
    public void ScrollHorizontally(float horizontalOffset);
    private void RaiseColumnResized(int columnIndex);
    private void RaiseColumnSortingChanged();
    private void ApplyColumnSorting();
    private void UpdateSortingStatus();
    internal virtual void OnViewDataReady();
    private void SaveViewState();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <OnContextualMenuManipulator>b__65_0(DropdownMenuAction a);
}
internal class UnityEngine.UIElements.Internal.MultiColumnHeaderColumn : VisualElement {
    public static string ussClassName;
    public static string sortableUssClassName;
    public static string sortedAscendingUssClassName;
    public static string sortedDescendingUssClassName;
    public static string movingUssClassName;
    public static string contentContainerUssClassName;
    public static string contentUssClassName;
    public static string defaultContentUssClassName;
    public static string hasIconUssClassName;
    public static string hasTitleUssClassName;
    public static string titleUssClassName;
    public static string iconElementName;
    public static string titleElementName;
    private static string s_BoundVEPropertyName;
    private static string s_BindingCallbackVEPropertyName;
    private static string s_UnbindingCallbackVEPropertyName;
    private static string s_DestroyCallbackVEPropertyName;
    private VisualElement m_ContentContainer;
    private VisualElement m_Content;
    private MultiColumnHeaderColumnSortIndicator m_SortIndicatorContainer;
    private IVisualElementScheduledItem m_ScheduledHeaderTemplateUpdate;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Clickable <clickable>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private ColumnMover <mover>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Column <column>k__BackingField;
    public Clickable clickable { get; private set; }
    public ColumnMover mover { get; private set; }
    public string sortOrderLabel { get; public set; }
    public Column column { get; public set; }
    internal Label title { get; }
    public VisualElement content { get; public set; }
    private bool isContentBound { get; private set; }
    public MultiColumnHeaderColumn(Column column);
    private static MultiColumnHeaderColumn();
    [CompilerGeneratedAttribute]
public Clickable get_clickable();
    [CompilerGeneratedAttribute]
private void set_clickable(Clickable value);
    [CompilerGeneratedAttribute]
public ColumnMover get_mover();
    [CompilerGeneratedAttribute]
private void set_mover(ColumnMover value);
    public string get_sortOrderLabel();
    public void set_sortOrderLabel(string value);
    [CompilerGeneratedAttribute]
public Column get_column();
    [CompilerGeneratedAttribute]
public void set_column(Column value);
    internal Label get_title();
    public VisualElement get_content();
    public void set_content(VisualElement value);
    private bool get_isContentBound();
    private void set_isContentBound(bool value);
    private void InitManipulators();
    private void UpdateDataFromColumn();
    private void BindHeaderContent();
    private void UnbindHeaderContent();
    private void DestroyHeaderContent();
    private VisualElement CreateDefaultHeaderContent();
    private void DefaultBindHeaderContent(VisualElement ve);
    private void UpdateHeaderTemplate();
    private void UpdateGeometryFromColumn();
    [CompilerGeneratedAttribute]
private void <.ctor>b__45_0(Column c, ColumnDataType role);
    [CompilerGeneratedAttribute]
private void <.ctor>b__45_1(Column c);
    [CompilerGeneratedAttribute]
private void <InitManipulators>b__46_0(ColumnMover mv);
}
internal class UnityEngine.UIElements.Internal.MultiColumnHeaderColumnIcon : Image {
    public static string ussClassName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isImageInline>k__BackingField;
    public bool isImageInline { get; public set; }
    private static MultiColumnHeaderColumnIcon();
    [CompilerGeneratedAttribute]
public bool get_isImageInline();
    [CompilerGeneratedAttribute]
public void set_isImageInline(bool value);
    public void UpdateClassList();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(CustomStyleResolvedEvent evt);
}
internal class UnityEngine.UIElements.Internal.MultiColumnHeaderColumnMoveLocationPreview : VisualElement {
    public static string ussClassName;
    public static string visualUssClassName;
    private static MultiColumnHeaderColumnMoveLocationPreview();
}
internal class UnityEngine.UIElements.Internal.MultiColumnHeaderColumnMovePreview : VisualElement {
    public static string ussClassName;
    private static MultiColumnHeaderColumnMovePreview();
}
internal class UnityEngine.UIElements.Internal.MultiColumnHeaderColumnResizeHandle : VisualElement {
    public static string ussClassName;
    public static string dragAreaUssClassName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <dragArea>k__BackingField;
    public VisualElement dragArea { get; }
    private static MultiColumnHeaderColumnResizeHandle();
    [CompilerGeneratedAttribute]
public VisualElement get_dragArea();
}
internal class UnityEngine.UIElements.Internal.MultiColumnHeaderColumnResizePreview : VisualElement {
    public static string ussClassName;
    public static string visualUssClassName;
    private static MultiColumnHeaderColumnResizePreview();
}
internal class UnityEngine.UIElements.Internal.MultiColumnHeaderColumnSortIndicator : VisualElement {
    public static string ussClassName;
    public static string arrowUssClassName;
    public static string indexLabelUssClassName;
    private Label m_IndexLabel;
    public string sortOrderLabel { get; public set; }
    private static MultiColumnHeaderColumnSortIndicator();
    public string get_sortOrderLabel();
    public void set_sortOrderLabel(string value);
}
internal enum UnityEngine.UIElements.InvokePolicy : Enum {
    public int value__;
    public static InvokePolicy Default;
    public static InvokePolicy IncludeDisabled;
}
public interface UnityEngine.UIElements.IPanel {
    public VisualElement visualTree { get; }
    public EventDispatcher dispatcher { get; }
    public ContextType contextType { get; }
    public FocusController focusController { get; }
    public ContextualMenuManager contextualMenuManager { get; }
    public bool isDirty { get; }
    public abstract virtual VisualElement get_visualTree();
    public abstract virtual EventDispatcher get_dispatcher();
    public abstract virtual ContextType get_contextType();
    public abstract virtual FocusController get_focusController();
    public abstract virtual VisualElement Pick(Vector2 point);
    public abstract virtual VisualElement PickAll(Vector2 point, List`1<VisualElement> picked);
    public abstract virtual ContextualMenuManager get_contextualMenuManager();
    public abstract virtual bool get_isDirty();
}
public interface UnityEngine.UIElements.IPanelChangedEvent {
}
public interface UnityEngine.UIElements.IPointerCaptureEvent {
}
internal interface UnityEngine.UIElements.IPointerCaptureEventInternal {
    public int pointerId { get; }
    public abstract virtual int get_pointerId();
}
public interface UnityEngine.UIElements.IPointerEvent {
    public int pointerId { get; }
    public string pointerType { get; }
    public bool isPrimary { get; }
    public int button { get; }
    public int pressedButtons { get; }
    public Vector3 position { get; }
    public Vector3 localPosition { get; }
    public Vector3 deltaPosition { get; }
    public float deltaTime { get; }
    public int clickCount { get; }
    public float pressure { get; }
    public float tangentialPressure { get; }
    public float altitudeAngle { get; }
    public float azimuthAngle { get; }
    public float twist { get; }
    public Vector2 tilt { get; }
    public PenStatus penStatus { get; }
    public Vector2 radius { get; }
    public Vector2 radiusVariance { get; }
    public EventModifiers modifiers { get; }
    public bool shiftKey { get; }
    public bool ctrlKey { get; }
    public bool commandKey { get; }
    public bool altKey { get; }
    public bool actionKey { get; }
    public abstract virtual int get_pointerId();
    public abstract virtual string get_pointerType();
    public abstract virtual bool get_isPrimary();
    public abstract virtual int get_button();
    public abstract virtual int get_pressedButtons();
    public abstract virtual Vector3 get_position();
    public abstract virtual Vector3 get_localPosition();
    public abstract virtual Vector3 get_deltaPosition();
    public abstract virtual float get_deltaTime();
    public abstract virtual int get_clickCount();
    public abstract virtual float get_pressure();
    public abstract virtual float get_tangentialPressure();
    public abstract virtual float get_altitudeAngle();
    public abstract virtual float get_azimuthAngle();
    public abstract virtual float get_twist();
    public abstract virtual Vector2 get_tilt();
    public abstract virtual PenStatus get_penStatus();
    public abstract virtual Vector2 get_radius();
    public abstract virtual Vector2 get_radiusVariance();
    public abstract virtual EventModifiers get_modifiers();
    public abstract virtual bool get_shiftKey();
    public abstract virtual bool get_ctrlKey();
    public abstract virtual bool get_commandKey();
    public abstract virtual bool get_altKey();
    public abstract virtual bool get_actionKey();
}
internal interface UnityEngine.UIElements.IPointerEventInternal {
    public bool triggeredByOS { get; public set; }
    public bool recomputeTopElementUnderPointer { get; public set; }
    public abstract virtual bool get_triggeredByOS();
    public abstract virtual void set_triggeredByOS(bool value);
    public abstract virtual bool get_recomputeTopElementUnderPointer();
    public abstract virtual void set_recomputeTopElementUnderPointer(bool value);
}
internal interface UnityEngine.UIElements.IPrefixLabel {
    public string label { get; }
    public Label labelElement { get; }
    public abstract virtual string get_label();
    public abstract virtual Label get_labelElement();
}
internal interface UnityEngine.UIElements.IReorderable {
    public bool enableReordering { get; public set; }
    public abstract virtual bool get_enableReordering();
    public abstract virtual void set_enableReordering(bool value);
}
public interface UnityEngine.UIElements.IResolvedStyle {
    public Align alignContent { get; }
    public Align alignItems { get; }
    public Align alignSelf { get; }
    public Color backgroundColor { get; }
    public Background backgroundImage { get; }
    public BackgroundPosition backgroundPositionX { get; }
    public BackgroundPosition backgroundPositionY { get; }
    public BackgroundRepeat backgroundRepeat { get; }
    public BackgroundSize backgroundSize { get; }
    public Color borderBottomColor { get; }
    public float borderBottomLeftRadius { get; }
    public float borderBottomRightRadius { get; }
    public float borderBottomWidth { get; }
    public Color borderLeftColor { get; }
    public float borderLeftWidth { get; }
    public Color borderRightColor { get; }
    public float borderRightWidth { get; }
    public Color borderTopColor { get; }
    public float borderTopLeftRadius { get; }
    public float borderTopRightRadius { get; }
    public float borderTopWidth { get; }
    public float bottom { get; }
    public Color color { get; }
    public DisplayStyle display { get; }
    public StyleFloat flexBasis { get; }
    public FlexDirection flexDirection { get; }
    public float flexGrow { get; }
    public float flexShrink { get; }
    public Wrap flexWrap { get; }
    public float fontSize { get; }
    public float height { get; }
    public Justify justifyContent { get; }
    public float left { get; }
    public float letterSpacing { get; }
    public float marginBottom { get; }
    public float marginLeft { get; }
    public float marginRight { get; }
    public float marginTop { get; }
    public StyleFloat maxHeight { get; }
    public StyleFloat maxWidth { get; }
    public StyleFloat minHeight { get; }
    public StyleFloat minWidth { get; }
    public float opacity { get; }
    public float paddingBottom { get; }
    public float paddingLeft { get; }
    public float paddingRight { get; }
    public float paddingTop { get; }
    public Position position { get; }
    public float right { get; }
    public Rotate rotate { get; }
    public Scale scale { get; }
    public TextOverflow textOverflow { get; }
    public float top { get; }
    public Vector3 transformOrigin { get; }
    public IEnumerable`1<TimeValue> transitionDelay { get; }
    public IEnumerable`1<TimeValue> transitionDuration { get; }
    public IEnumerable`1<StylePropertyName> transitionProperty { get; }
    public IEnumerable`1<EasingFunction> transitionTimingFunction { get; }
    public Vector3 translate { get; }
    public Color unityBackgroundImageTintColor { get; }
    public Font unityFont { get; }
    public FontDefinition unityFontDefinition { get; }
    public FontStyle unityFontStyleAndWeight { get; }
    public float unityParagraphSpacing { get; }
    public int unitySliceBottom { get; }
    public int unitySliceLeft { get; }
    public int unitySliceRight { get; }
    public float unitySliceScale { get; }
    public int unitySliceTop { get; }
    public TextAnchor unityTextAlign { get; }
    public Color unityTextOutlineColor { get; }
    public float unityTextOutlineWidth { get; }
    public TextOverflowPosition unityTextOverflowPosition { get; }
    public Visibility visibility { get; }
    public WhiteSpace whiteSpace { get; }
    public float width { get; }
    public float wordSpacing { get; }
    [ObsoleteAttribute("unityBackgroundScaleMode is deprecated. Use background-* properties instead.")]
public StyleEnum`1<ScaleMode> unityBackgroundScaleMode { get; }
    public abstract virtual Align get_alignContent();
    public abstract virtual Align get_alignItems();
    public abstract virtual Align get_alignSelf();
    public abstract virtual Color get_backgroundColor();
    public abstract virtual Background get_backgroundImage();
    public abstract virtual BackgroundPosition get_backgroundPositionX();
    public abstract virtual BackgroundPosition get_backgroundPositionY();
    public abstract virtual BackgroundRepeat get_backgroundRepeat();
    public abstract virtual BackgroundSize get_backgroundSize();
    public abstract virtual Color get_borderBottomColor();
    public abstract virtual float get_borderBottomLeftRadius();
    public abstract virtual float get_borderBottomRightRadius();
    public abstract virtual float get_borderBottomWidth();
    public abstract virtual Color get_borderLeftColor();
    public abstract virtual float get_borderLeftWidth();
    public abstract virtual Color get_borderRightColor();
    public abstract virtual float get_borderRightWidth();
    public abstract virtual Color get_borderTopColor();
    public abstract virtual float get_borderTopLeftRadius();
    public abstract virtual float get_borderTopRightRadius();
    public abstract virtual float get_borderTopWidth();
    public abstract virtual float get_bottom();
    public abstract virtual Color get_color();
    public abstract virtual DisplayStyle get_display();
    public abstract virtual StyleFloat get_flexBasis();
    public abstract virtual FlexDirection get_flexDirection();
    public abstract virtual float get_flexGrow();
    public abstract virtual float get_flexShrink();
    public abstract virtual Wrap get_flexWrap();
    public abstract virtual float get_fontSize();
    public abstract virtual float get_height();
    public abstract virtual Justify get_justifyContent();
    public abstract virtual float get_left();
    public abstract virtual float get_letterSpacing();
    public abstract virtual float get_marginBottom();
    public abstract virtual float get_marginLeft();
    public abstract virtual float get_marginRight();
    public abstract virtual float get_marginTop();
    public abstract virtual StyleFloat get_maxHeight();
    public abstract virtual StyleFloat get_maxWidth();
    public abstract virtual StyleFloat get_minHeight();
    public abstract virtual StyleFloat get_minWidth();
    public abstract virtual float get_opacity();
    public abstract virtual float get_paddingBottom();
    public abstract virtual float get_paddingLeft();
    public abstract virtual float get_paddingRight();
    public abstract virtual float get_paddingTop();
    public abstract virtual Position get_position();
    public abstract virtual float get_right();
    public abstract virtual Rotate get_rotate();
    public abstract virtual Scale get_scale();
    public abstract virtual TextOverflow get_textOverflow();
    public abstract virtual float get_top();
    public abstract virtual Vector3 get_transformOrigin();
    public abstract virtual IEnumerable`1<TimeValue> get_transitionDelay();
    public abstract virtual IEnumerable`1<TimeValue> get_transitionDuration();
    public abstract virtual IEnumerable`1<StylePropertyName> get_transitionProperty();
    public abstract virtual IEnumerable`1<EasingFunction> get_transitionTimingFunction();
    public abstract virtual Vector3 get_translate();
    public abstract virtual Color get_unityBackgroundImageTintColor();
    public abstract virtual Font get_unityFont();
    public abstract virtual FontDefinition get_unityFontDefinition();
    public abstract virtual FontStyle get_unityFontStyleAndWeight();
    public abstract virtual float get_unityParagraphSpacing();
    public abstract virtual int get_unitySliceBottom();
    public abstract virtual int get_unitySliceLeft();
    public abstract virtual int get_unitySliceRight();
    public abstract virtual float get_unitySliceScale();
    public abstract virtual int get_unitySliceTop();
    public abstract virtual TextAnchor get_unityTextAlign();
    public abstract virtual Color get_unityTextOutlineColor();
    public abstract virtual float get_unityTextOutlineWidth();
    public abstract virtual TextOverflowPosition get_unityTextOverflowPosition();
    public abstract virtual Visibility get_visibility();
    public abstract virtual WhiteSpace get_whiteSpace();
    public abstract virtual float get_width();
    public abstract virtual float get_wordSpacing();
    public abstract virtual StyleEnum`1<ScaleMode> get_unityBackgroundScaleMode();
}
internal interface UnityEngine.UIElements.IRuntimePanel {
    public PanelSettings panelSettings { get; }
    public GameObject selectableGameObject { get; public set; }
    public abstract virtual PanelSettings get_panelSettings();
    public abstract virtual GameObject get_selectableGameObject();
    public abstract virtual void set_selectableGameObject(GameObject value);
}
internal interface UnityEngine.UIElements.IRuntimePanelComponent {
    public IPanel panel { get; public set; }
    public abstract virtual IPanel get_panel();
    public abstract virtual void set_panel(IPanel value);
}
internal interface UnityEngine.UIElements.IScheduler {
    public abstract virtual ScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs);
    public abstract virtual ScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition);
    public abstract virtual ScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs);
    public abstract virtual void Unschedule(ScheduledItem item);
    public abstract virtual void Schedule(ScheduledItem item);
    public abstract virtual void UpdateScheduledEvents();
}
internal interface UnityEngine.UIElements.ISerializableJsonDictionary {
    public abstract virtual void Set(string key, T value);
    public abstract virtual T Get(string key);
    public abstract virtual T GetScriptable(string key);
    public abstract virtual void Overwrite(object obj, string key);
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual void OnBeforeSerialize();
    public abstract virtual void OnAfterDeserialize();
}
public interface UnityEngine.UIElements.IStyle {
    public StyleEnum`1<Align> alignContent { get; public set; }
    public StyleEnum`1<Align> alignItems { get; public set; }
    public StyleEnum`1<Align> alignSelf { get; public set; }
    public StyleColor backgroundColor { get; public set; }
    public StyleBackground backgroundImage { get; public set; }
    public StyleBackgroundPosition backgroundPositionX { get; public set; }
    public StyleBackgroundPosition backgroundPositionY { get; public set; }
    public StyleBackgroundRepeat backgroundRepeat { get; public set; }
    public StyleBackgroundSize backgroundSize { get; public set; }
    public StyleColor borderBottomColor { get; public set; }
    public StyleLength borderBottomLeftRadius { get; public set; }
    public StyleLength borderBottomRightRadius { get; public set; }
    public StyleFloat borderBottomWidth { get; public set; }
    public StyleColor borderLeftColor { get; public set; }
    public StyleFloat borderLeftWidth { get; public set; }
    public StyleColor borderRightColor { get; public set; }
    public StyleFloat borderRightWidth { get; public set; }
    public StyleColor borderTopColor { get; public set; }
    public StyleLength borderTopLeftRadius { get; public set; }
    public StyleLength borderTopRightRadius { get; public set; }
    public StyleFloat borderTopWidth { get; public set; }
    public StyleLength bottom { get; public set; }
    public StyleColor color { get; public set; }
    public StyleCursor cursor { get; public set; }
    public StyleEnum`1<DisplayStyle> display { get; public set; }
    public StyleLength flexBasis { get; public set; }
    public StyleEnum`1<FlexDirection> flexDirection { get; public set; }
    public StyleFloat flexGrow { get; public set; }
    public StyleFloat flexShrink { get; public set; }
    public StyleEnum`1<Wrap> flexWrap { get; public set; }
    public StyleLength fontSize { get; public set; }
    public StyleLength height { get; public set; }
    public StyleEnum`1<Justify> justifyContent { get; public set; }
    public StyleLength left { get; public set; }
    public StyleLength letterSpacing { get; public set; }
    public StyleLength marginBottom { get; public set; }
    public StyleLength marginLeft { get; public set; }
    public StyleLength marginRight { get; public set; }
    public StyleLength marginTop { get; public set; }
    public StyleLength maxHeight { get; public set; }
    public StyleLength maxWidth { get; public set; }
    public StyleLength minHeight { get; public set; }
    public StyleLength minWidth { get; public set; }
    public StyleFloat opacity { get; public set; }
    public StyleEnum`1<Overflow> overflow { get; public set; }
    public StyleLength paddingBottom { get; public set; }
    public StyleLength paddingLeft { get; public set; }
    public StyleLength paddingRight { get; public set; }
    public StyleLength paddingTop { get; public set; }
    public StyleEnum`1<Position> position { get; public set; }
    public StyleLength right { get; public set; }
    public StyleRotate rotate { get; public set; }
    public StyleScale scale { get; public set; }
    public StyleEnum`1<TextOverflow> textOverflow { get; public set; }
    public StyleTextShadow textShadow { get; public set; }
    public StyleLength top { get; public set; }
    public StyleTransformOrigin transformOrigin { get; public set; }
    public StyleList`1<TimeValue> transitionDelay { get; public set; }
    public StyleList`1<TimeValue> transitionDuration { get; public set; }
    public StyleList`1<StylePropertyName> transitionProperty { get; public set; }
    public StyleList`1<EasingFunction> transitionTimingFunction { get; public set; }
    public StyleTranslate translate { get; public set; }
    public StyleColor unityBackgroundImageTintColor { get; public set; }
    public StyleFont unityFont { get; public set; }
    public StyleFontDefinition unityFontDefinition { get; public set; }
    public StyleEnum`1<FontStyle> unityFontStyleAndWeight { get; public set; }
    public StyleEnum`1<OverflowClipBox> unityOverflowClipBox { get; public set; }
    public StyleLength unityParagraphSpacing { get; public set; }
    public StyleInt unitySliceBottom { get; public set; }
    public StyleInt unitySliceLeft { get; public set; }
    public StyleInt unitySliceRight { get; public set; }
    public StyleFloat unitySliceScale { get; public set; }
    public StyleInt unitySliceTop { get; public set; }
    public StyleEnum`1<TextAnchor> unityTextAlign { get; public set; }
    public StyleColor unityTextOutlineColor { get; public set; }
    public StyleFloat unityTextOutlineWidth { get; public set; }
    public StyleEnum`1<TextOverflowPosition> unityTextOverflowPosition { get; public set; }
    public StyleEnum`1<Visibility> visibility { get; public set; }
    public StyleEnum`1<WhiteSpace> whiteSpace { get; public set; }
    public StyleLength width { get; public set; }
    public StyleLength wordSpacing { get; public set; }
    [ObsoleteAttribute("unityBackgroundScaleMode is deprecated. Use background-* properties instead.")]
public StyleEnum`1<ScaleMode> unityBackgroundScaleMode { get; public set; }
    public abstract virtual StyleEnum`1<Align> get_alignContent();
    public abstract virtual void set_alignContent(StyleEnum`1<Align> value);
    public abstract virtual StyleEnum`1<Align> get_alignItems();
    public abstract virtual void set_alignItems(StyleEnum`1<Align> value);
    public abstract virtual StyleEnum`1<Align> get_alignSelf();
    public abstract virtual void set_alignSelf(StyleEnum`1<Align> value);
    public abstract virtual StyleColor get_backgroundColor();
    public abstract virtual void set_backgroundColor(StyleColor value);
    public abstract virtual StyleBackground get_backgroundImage();
    public abstract virtual void set_backgroundImage(StyleBackground value);
    public abstract virtual StyleBackgroundPosition get_backgroundPositionX();
    public abstract virtual void set_backgroundPositionX(StyleBackgroundPosition value);
    public abstract virtual StyleBackgroundPosition get_backgroundPositionY();
    public abstract virtual void set_backgroundPositionY(StyleBackgroundPosition value);
    public abstract virtual StyleBackgroundRepeat get_backgroundRepeat();
    public abstract virtual void set_backgroundRepeat(StyleBackgroundRepeat value);
    public abstract virtual StyleBackgroundSize get_backgroundSize();
    public abstract virtual void set_backgroundSize(StyleBackgroundSize value);
    public abstract virtual StyleColor get_borderBottomColor();
    public abstract virtual void set_borderBottomColor(StyleColor value);
    public abstract virtual StyleLength get_borderBottomLeftRadius();
    public abstract virtual void set_borderBottomLeftRadius(StyleLength value);
    public abstract virtual StyleLength get_borderBottomRightRadius();
    public abstract virtual void set_borderBottomRightRadius(StyleLength value);
    public abstract virtual StyleFloat get_borderBottomWidth();
    public abstract virtual void set_borderBottomWidth(StyleFloat value);
    public abstract virtual StyleColor get_borderLeftColor();
    public abstract virtual void set_borderLeftColor(StyleColor value);
    public abstract virtual StyleFloat get_borderLeftWidth();
    public abstract virtual void set_borderLeftWidth(StyleFloat value);
    public abstract virtual StyleColor get_borderRightColor();
    public abstract virtual void set_borderRightColor(StyleColor value);
    public abstract virtual StyleFloat get_borderRightWidth();
    public abstract virtual void set_borderRightWidth(StyleFloat value);
    public abstract virtual StyleColor get_borderTopColor();
    public abstract virtual void set_borderTopColor(StyleColor value);
    public abstract virtual StyleLength get_borderTopLeftRadius();
    public abstract virtual void set_borderTopLeftRadius(StyleLength value);
    public abstract virtual StyleLength get_borderTopRightRadius();
    public abstract virtual void set_borderTopRightRadius(StyleLength value);
    public abstract virtual StyleFloat get_borderTopWidth();
    public abstract virtual void set_borderTopWidth(StyleFloat value);
    public abstract virtual StyleLength get_bottom();
    public abstract virtual void set_bottom(StyleLength value);
    public abstract virtual StyleColor get_color();
    public abstract virtual void set_color(StyleColor value);
    public abstract virtual StyleCursor get_cursor();
    public abstract virtual void set_cursor(StyleCursor value);
    public abstract virtual StyleEnum`1<DisplayStyle> get_display();
    public abstract virtual void set_display(StyleEnum`1<DisplayStyle> value);
    public abstract virtual StyleLength get_flexBasis();
    public abstract virtual void set_flexBasis(StyleLength value);
    public abstract virtual StyleEnum`1<FlexDirection> get_flexDirection();
    public abstract virtual void set_flexDirection(StyleEnum`1<FlexDirection> value);
    public abstract virtual StyleFloat get_flexGrow();
    public abstract virtual void set_flexGrow(StyleFloat value);
    public abstract virtual StyleFloat get_flexShrink();
    public abstract virtual void set_flexShrink(StyleFloat value);
    public abstract virtual StyleEnum`1<Wrap> get_flexWrap();
    public abstract virtual void set_flexWrap(StyleEnum`1<Wrap> value);
    public abstract virtual StyleLength get_fontSize();
    public abstract virtual void set_fontSize(StyleLength value);
    public abstract virtual StyleLength get_height();
    public abstract virtual void set_height(StyleLength value);
    public abstract virtual StyleEnum`1<Justify> get_justifyContent();
    public abstract virtual void set_justifyContent(StyleEnum`1<Justify> value);
    public abstract virtual StyleLength get_left();
    public abstract virtual void set_left(StyleLength value);
    public abstract virtual StyleLength get_letterSpacing();
    public abstract virtual void set_letterSpacing(StyleLength value);
    public abstract virtual StyleLength get_marginBottom();
    public abstract virtual void set_marginBottom(StyleLength value);
    public abstract virtual StyleLength get_marginLeft();
    public abstract virtual void set_marginLeft(StyleLength value);
    public abstract virtual StyleLength get_marginRight();
    public abstract virtual void set_marginRight(StyleLength value);
    public abstract virtual StyleLength get_marginTop();
    public abstract virtual void set_marginTop(StyleLength value);
    public abstract virtual StyleLength get_maxHeight();
    public abstract virtual void set_maxHeight(StyleLength value);
    public abstract virtual StyleLength get_maxWidth();
    public abstract virtual void set_maxWidth(StyleLength value);
    public abstract virtual StyleLength get_minHeight();
    public abstract virtual void set_minHeight(StyleLength value);
    public abstract virtual StyleLength get_minWidth();
    public abstract virtual void set_minWidth(StyleLength value);
    public abstract virtual StyleFloat get_opacity();
    public abstract virtual void set_opacity(StyleFloat value);
    public abstract virtual StyleEnum`1<Overflow> get_overflow();
    public abstract virtual void set_overflow(StyleEnum`1<Overflow> value);
    public abstract virtual StyleLength get_paddingBottom();
    public abstract virtual void set_paddingBottom(StyleLength value);
    public abstract virtual StyleLength get_paddingLeft();
    public abstract virtual void set_paddingLeft(StyleLength value);
    public abstract virtual StyleLength get_paddingRight();
    public abstract virtual void set_paddingRight(StyleLength value);
    public abstract virtual StyleLength get_paddingTop();
    public abstract virtual void set_paddingTop(StyleLength value);
    public abstract virtual StyleEnum`1<Position> get_position();
    public abstract virtual void set_position(StyleEnum`1<Position> value);
    public abstract virtual StyleLength get_right();
    public abstract virtual void set_right(StyleLength value);
    public abstract virtual StyleRotate get_rotate();
    public abstract virtual void set_rotate(StyleRotate value);
    public abstract virtual StyleScale get_scale();
    public abstract virtual void set_scale(StyleScale value);
    public abstract virtual StyleEnum`1<TextOverflow> get_textOverflow();
    public abstract virtual void set_textOverflow(StyleEnum`1<TextOverflow> value);
    public abstract virtual StyleTextShadow get_textShadow();
    public abstract virtual void set_textShadow(StyleTextShadow value);
    public abstract virtual StyleLength get_top();
    public abstract virtual void set_top(StyleLength value);
    public abstract virtual StyleTransformOrigin get_transformOrigin();
    public abstract virtual void set_transformOrigin(StyleTransformOrigin value);
    public abstract virtual StyleList`1<TimeValue> get_transitionDelay();
    public abstract virtual void set_transitionDelay(StyleList`1<TimeValue> value);
    public abstract virtual StyleList`1<TimeValue> get_transitionDuration();
    public abstract virtual void set_transitionDuration(StyleList`1<TimeValue> value);
    public abstract virtual StyleList`1<StylePropertyName> get_transitionProperty();
    public abstract virtual void set_transitionProperty(StyleList`1<StylePropertyName> value);
    public abstract virtual StyleList`1<EasingFunction> get_transitionTimingFunction();
    public abstract virtual void set_transitionTimingFunction(StyleList`1<EasingFunction> value);
    public abstract virtual StyleTranslate get_translate();
    public abstract virtual void set_translate(StyleTranslate value);
    public abstract virtual StyleColor get_unityBackgroundImageTintColor();
    public abstract virtual void set_unityBackgroundImageTintColor(StyleColor value);
    public abstract virtual StyleFont get_unityFont();
    public abstract virtual void set_unityFont(StyleFont value);
    public abstract virtual StyleFontDefinition get_unityFontDefinition();
    public abstract virtual void set_unityFontDefinition(StyleFontDefinition value);
    public abstract virtual StyleEnum`1<FontStyle> get_unityFontStyleAndWeight();
    public abstract virtual void set_unityFontStyleAndWeight(StyleEnum`1<FontStyle> value);
    public abstract virtual StyleEnum`1<OverflowClipBox> get_unityOverflowClipBox();
    public abstract virtual void set_unityOverflowClipBox(StyleEnum`1<OverflowClipBox> value);
    public abstract virtual StyleLength get_unityParagraphSpacing();
    public abstract virtual void set_unityParagraphSpacing(StyleLength value);
    public abstract virtual StyleInt get_unitySliceBottom();
    public abstract virtual void set_unitySliceBottom(StyleInt value);
    public abstract virtual StyleInt get_unitySliceLeft();
    public abstract virtual void set_unitySliceLeft(StyleInt value);
    public abstract virtual StyleInt get_unitySliceRight();
    public abstract virtual void set_unitySliceRight(StyleInt value);
    public abstract virtual StyleFloat get_unitySliceScale();
    public abstract virtual void set_unitySliceScale(StyleFloat value);
    public abstract virtual StyleInt get_unitySliceTop();
    public abstract virtual void set_unitySliceTop(StyleInt value);
    public abstract virtual StyleEnum`1<TextAnchor> get_unityTextAlign();
    public abstract virtual void set_unityTextAlign(StyleEnum`1<TextAnchor> value);
    public abstract virtual StyleColor get_unityTextOutlineColor();
    public abstract virtual void set_unityTextOutlineColor(StyleColor value);
    public abstract virtual StyleFloat get_unityTextOutlineWidth();
    public abstract virtual void set_unityTextOutlineWidth(StyleFloat value);
    public abstract virtual StyleEnum`1<TextOverflowPosition> get_unityTextOverflowPosition();
    public abstract virtual void set_unityTextOverflowPosition(StyleEnum`1<TextOverflowPosition> value);
    public abstract virtual StyleEnum`1<Visibility> get_visibility();
    public abstract virtual void set_visibility(StyleEnum`1<Visibility> value);
    public abstract virtual StyleEnum`1<WhiteSpace> get_whiteSpace();
    public abstract virtual void set_whiteSpace(StyleEnum`1<WhiteSpace> value);
    public abstract virtual StyleLength get_width();
    public abstract virtual void set_width(StyleLength value);
    public abstract virtual StyleLength get_wordSpacing();
    public abstract virtual void set_wordSpacing(StyleLength value);
    public abstract virtual StyleEnum`1<ScaleMode> get_unityBackgroundScaleMode();
    public abstract virtual void set_unityBackgroundScaleMode(StyleEnum`1<ScaleMode> value);
}
internal interface UnityEngine.UIElements.IStyleDataGroup`1 {
    public abstract virtual T Copy();
    public abstract virtual void CopyFrom(T& other);
}
internal interface UnityEngine.UIElements.IStylePainter {
    public VisualElement visualElement { get; }
    public abstract virtual MeshWriteData DrawMesh(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags);
    public abstract virtual void DrawText(TextElement te);
    public abstract virtual void DrawText(string text, Vector2 pos, float fontSize, Color color, FontAsset font);
    public abstract virtual void DrawRectangle(RectangleParams rectParams);
    public abstract virtual void DrawBorder(BorderParams borderParams);
    public abstract virtual void DrawImmediate(Action callback, bool cullingEnabled);
    public abstract virtual void DrawVectorImage(VectorImage vectorImage, Vector2 pos, Angle rotationAngle, Vector2 scale);
    public abstract virtual VisualElement get_visualElement();
}
internal interface UnityEngine.UIElements.IStylePropertyAnimations {
    public int runningAnimationCount { get; public set; }
    public int completedAnimationCount { get; public set; }
    public abstract virtual bool Start(StylePropertyId id, float from, float to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, int from, int to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, Length from, Length to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, Color from, Color to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartEnum(StylePropertyId id, int from, int to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, Background from, Background to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, FontDefinition from, FontDefinition to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, Font from, Font to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, TextShadow from, TextShadow to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, Scale from, Scale to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, Translate from, Translate to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, Rotate from, Rotate to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, TransformOrigin from, TransformOrigin to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, BackgroundPosition from, BackgroundPosition to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, BackgroundRepeat from, BackgroundRepeat to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool Start(StylePropertyId id, BackgroundSize from, BackgroundSize to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool HasRunningAnimation(StylePropertyId id);
    public abstract virtual void UpdateAnimation(StylePropertyId id);
    public abstract virtual void GetAllAnimations(List`1<StylePropertyId> outPropertyIds);
    public abstract virtual void CancelAnimation(StylePropertyId id);
    public abstract virtual void CancelAllAnimations();
    public abstract virtual int get_runningAnimationCount();
    public abstract virtual void set_runningAnimationCount(int value);
    public abstract virtual int get_completedAnimationCount();
    public abstract virtual void set_completedAnimationCount(int value);
}
internal interface UnityEngine.UIElements.IStylePropertyAnimationSystem {
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, float startValue, float endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Length startValue, Length endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Color startValue, Color endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartAnimationEnum(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Background startValue, Background endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, FontDefinition startValue, FontDefinition endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Font startValue, Font endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, TextShadow startValue, TextShadow endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Scale startValue, Scale endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, TransformOrigin startValue, TransformOrigin endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Translate startValue, Translate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Rotate startValue, Rotate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, BackgroundPosition startValue, BackgroundPosition endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, BackgroundRepeat startValue, BackgroundRepeat endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual bool StartTransition(VisualElement owner, StylePropertyId prop, BackgroundSize startValue, BackgroundSize endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public abstract virtual void CancelAllAnimations();
    public abstract virtual void CancelAllAnimations(VisualElement owner);
    public abstract virtual void CancelAnimation(VisualElement owner, StylePropertyId id);
    public abstract virtual bool HasRunningAnimation(VisualElement owner, StylePropertyId id);
    public abstract virtual void UpdateAnimation(VisualElement owner, StylePropertyId id);
    public abstract virtual void GetAllAnimations(VisualElement owner, List`1<StylePropertyId> propertyIds);
    public abstract virtual void Update();
}
internal interface UnityEngine.UIElements.IStyleValue`1 {
    public T value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public abstract virtual T get_value();
    public abstract virtual void set_value(T value);
    public abstract virtual StyleKeyword get_keyword();
    public abstract virtual void set_keyword(StyleKeyword value);
}
public interface UnityEngine.UIElements.ITextEdition {
    internal bool multiline { get; internal set; }
    public bool isReadOnly { get; public set; }
    public int maxLength { get; public set; }
    public bool isDelayed { get; public set; }
    internal Func`2<char, bool> AcceptCharacter { get; internal set; }
    internal Action`1<bool> UpdateScrollOffset { get; internal set; }
    internal Action UpdateValueFromText { get; internal set; }
    internal Action UpdateTextFromValue { get; internal set; }
    internal Action MoveFocusToCompositeRoot { get; internal set; }
    public char maskChar { get; public set; }
    public bool isPassword { get; public set; }
    public bool autoCorrection { get; public set; }
    public bool hideMobileInput { get; public set; }
    public TouchScreenKeyboard touchScreenKeyboard { get; }
    public TouchScreenKeyboardType keyboardType { get; public set; }
    internal abstract virtual bool get_multiline();
    internal abstract virtual void set_multiline(bool value);
    public abstract virtual bool get_isReadOnly();
    public abstract virtual void set_isReadOnly(bool value);
    public abstract virtual int get_maxLength();
    public abstract virtual void set_maxLength(int value);
    public abstract virtual bool get_isDelayed();
    public abstract virtual void set_isDelayed(bool value);
    internal abstract virtual void ResetValueAndText();
    internal abstract virtual void SaveValueAndText();
    internal abstract virtual void RestoreValueAndText();
    internal abstract virtual Func`2<char, bool> get_AcceptCharacter();
    internal abstract virtual void set_AcceptCharacter(Func`2<char, bool> value);
    internal abstract virtual Action`1<bool> get_UpdateScrollOffset();
    internal abstract virtual void set_UpdateScrollOffset(Action`1<bool> value);
    internal abstract virtual Action get_UpdateValueFromText();
    internal abstract virtual void set_UpdateValueFromText(Action value);
    internal abstract virtual Action get_UpdateTextFromValue();
    internal abstract virtual void set_UpdateTextFromValue(Action value);
    internal abstract virtual Action get_MoveFocusToCompositeRoot();
    internal abstract virtual void set_MoveFocusToCompositeRoot(Action value);
    internal abstract virtual void UpdateText(string value);
    internal abstract virtual string CullString(string s);
    public abstract virtual char get_maskChar();
    public abstract virtual void set_maskChar(char value);
    public abstract virtual bool get_isPassword();
    public abstract virtual void set_isPassword(bool value);
    public virtual bool get_autoCorrection();
    public virtual void set_autoCorrection(bool value);
    public virtual bool get_hideMobileInput();
    public virtual void set_hideMobileInput(bool value);
    public virtual TouchScreenKeyboard get_touchScreenKeyboard();
    public virtual TouchScreenKeyboardType get_keyboardType();
    public virtual void set_keyboardType(TouchScreenKeyboardType value);
}
internal interface UnityEngine.UIElements.ITextElement {
    public string text { get; public set; }
    public abstract virtual string get_text();
    public abstract virtual void set_text(string value);
}
public interface UnityEngine.UIElements.ITextElementExperimentalFeatures {
    public abstract virtual void SetRenderedText(string renderedText);
}
public interface UnityEngine.UIElements.ITextSelection {
    public bool isSelectable { get; public set; }
    public Color cursorColor { get; public set; }
    public int cursorIndex { get; public set; }
    public bool doubleClickSelectsWord { get; public set; }
    public int selectIndex { get; public set; }
    public Color selectionColor { get; public set; }
    public bool tripleClickSelectsLine { get; public set; }
    internal bool selectAllOnFocus { get; internal set; }
    internal bool selectAllOnMouseUp { get; internal set; }
    public Vector2 cursorPosition { get; }
    internal float lineHeightAtCursorPosition { get; }
    internal float cursorWidth { get; internal set; }
    public abstract virtual bool get_isSelectable();
    public abstract virtual void set_isSelectable(bool value);
    public abstract virtual Color get_cursorColor();
    public abstract virtual void set_cursorColor(Color value);
    public abstract virtual int get_cursorIndex();
    public abstract virtual void set_cursorIndex(int value);
    public abstract virtual bool get_doubleClickSelectsWord();
    public abstract virtual void set_doubleClickSelectsWord(bool value);
    public abstract virtual int get_selectIndex();
    public abstract virtual void set_selectIndex(int value);
    public abstract virtual Color get_selectionColor();
    public abstract virtual void set_selectionColor(Color value);
    public abstract virtual bool get_tripleClickSelectsLine();
    public abstract virtual void set_tripleClickSelectsLine(bool value);
    public abstract virtual bool HasSelection();
    public abstract virtual void SelectAll();
    public abstract virtual void SelectNone();
    public abstract virtual void SelectRange(int cursorIndex, int selectionIndex);
    internal abstract virtual bool get_selectAllOnFocus();
    internal abstract virtual void set_selectAllOnFocus(bool value);
    internal abstract virtual bool get_selectAllOnMouseUp();
    internal abstract virtual void set_selectAllOnMouseUp(bool value);
    public abstract virtual Vector2 get_cursorPosition();
    internal abstract virtual float get_lineHeightAtCursorPosition();
    internal abstract virtual float get_cursorWidth();
    internal abstract virtual void set_cursorWidth(float value);
    internal abstract virtual void MoveTextEnd();
}
public interface UnityEngine.UIElements.ITransform {
    public Vector3 position { get; public set; }
    public Quaternion rotation { get; public set; }
    public Vector3 scale { get; public set; }
    public Matrix4x4 matrix { get; }
    public abstract virtual Vector3 get_position();
    public abstract virtual void set_position(Vector3 value);
    public abstract virtual Quaternion get_rotation();
    public abstract virtual void set_rotation(Quaternion value);
    public abstract virtual Vector3 get_scale();
    public abstract virtual void set_scale(Vector3 value);
    public abstract virtual Matrix4x4 get_matrix();
}
public interface UnityEngine.UIElements.ITransitionEvent {
    public StylePropertyNameCollection stylePropertyNames { get; }
    public double elapsedTime { get; }
    public abstract virtual StylePropertyNameCollection get_stylePropertyNames();
    public abstract virtual double get_elapsedTime();
}
internal interface UnityEngine.UIElements.IUIElementsUtility {
    public abstract virtual bool TakeCapture();
    public abstract virtual bool ReleaseCapture();
    public abstract virtual bool ProcessEvent(int instanceID, IntPtr nativeEventPtr, Boolean& eventHandled);
    public abstract virtual bool CleanupRoots();
    public abstract virtual bool EndContainerGUIFromException(Exception exception);
    public abstract virtual bool MakeCurrentIMGUIContainerDirty();
    public abstract virtual void UpdateSchedulers();
    public abstract virtual void RequestRepaintForPanels(Action`1<ScriptableObject> repaintCallback);
}
public interface UnityEngine.UIElements.IUxmlAttributes {
    public abstract virtual bool TryGetAttributeValue(string attributeName, String& value);
}
public interface UnityEngine.UIElements.IUxmlFactory {
    public abstract virtual VisualElement Create(IUxmlAttributes bag, CreationContext cc);
}
internal interface UnityEngine.UIElements.IUxmlObjectFactory`1 {
    public abstract virtual T CreateObject(IUxmlAttributes bag, CreationContext cc);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public interface UnityEngine.UIElements.IValueField`1 {
    public T value { get; public set; }
    public abstract virtual T get_value();
    public abstract virtual void set_value(T value);
    public abstract virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, T startValue);
    public abstract virtual void StartDragging();
    public abstract virtual void StopDragging();
}
internal interface UnityEngine.UIElements.IVisualElementPanelActivatable {
    public VisualElement element { get; }
    public abstract virtual VisualElement get_element();
    public abstract virtual bool CanBeActivated();
    public abstract virtual void OnPanelActivate();
    public abstract virtual void OnPanelDeactivate();
}
public interface UnityEngine.UIElements.IVisualElementScheduledItem {
    public VisualElement element { get; }
    public bool isActive { get; }
    public abstract virtual VisualElement get_element();
    public abstract virtual bool get_isActive();
    public abstract virtual void Resume();
    public abstract virtual void Pause();
    public abstract virtual void ExecuteLater(long delayMs);
    public abstract virtual IVisualElementScheduledItem StartingIn(long delayMs);
    public abstract virtual IVisualElementScheduledItem Every(long intervalMs);
    public abstract virtual IVisualElementScheduledItem Until(Func`1<bool> stopCondition);
    public abstract virtual IVisualElementScheduledItem ForDuration(long durationMs);
}
public interface UnityEngine.UIElements.IVisualElementScheduler {
    public abstract virtual IVisualElementScheduledItem Execute(Action`1<TimerState> timerUpdateEvent);
    public abstract virtual IVisualElementScheduledItem Execute(Action updateEvent);
}
internal interface UnityEngine.UIElements.IVisualTreeUpdater {
    public BaseVisualElementPanel panel { get; public set; }
    public ProfilerMarker profilerMarker { get; }
    public abstract virtual BaseVisualElementPanel get_panel();
    public abstract virtual void set_panel(BaseVisualElementPanel value);
    public abstract virtual ProfilerMarker get_profilerMarker();
    public abstract virtual void Update();
    public abstract virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
}
public enum UnityEngine.UIElements.Justify : Enum {
    public int value__;
    public static Justify FlexStart;
    public static Justify Center;
    public static Justify FlexEnd;
    public static Justify SpaceBetween;
    public static Justify SpaceAround;
}
[EventCategoryAttribute("5")]
public abstract class UnityEngine.UIElements.KeyboardEventBase`1 : EventBase`1<T> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventModifiers <modifiers>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private char <character>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private KeyCode <keyCode>k__BackingField;
    public EventModifiers modifiers { get; protected set; }
    public char character { get; protected set; }
    public KeyCode keyCode { get; protected set; }
    public bool shiftKey { get; }
    public bool ctrlKey { get; }
    public bool commandKey { get; }
    public bool altKey { get; }
    internal bool functionKey { get; }
    public bool actionKey { get; }
    [CompilerGeneratedAttribute]
public sealed virtual EventModifiers get_modifiers();
    [CompilerGeneratedAttribute]
protected void set_modifiers(EventModifiers value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_character();
    [CompilerGeneratedAttribute]
protected void set_character(char value);
    [CompilerGeneratedAttribute]
public sealed virtual KeyCode get_keyCode();
    [CompilerGeneratedAttribute]
protected void set_keyCode(KeyCode value);
    public sealed virtual bool get_shiftKey();
    public sealed virtual bool get_ctrlKey();
    public sealed virtual bool get_commandKey();
    public sealed virtual bool get_altKey();
    internal bool get_functionKey();
    public sealed virtual bool get_actionKey();
    protected virtual void Init();
    private void LocalInit();
    public static T GetPooled(char c, KeyCode keyCode, EventModifiers modifiers);
    public static T GetPooled(Event systemEvent);
}
internal class UnityEngine.UIElements.KeyboardEventDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public sealed virtual void DispatchEvent(EventBase evt, IPanel panel);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.KeyboardEventExtensions : object {
    [ExtensionAttribute]
internal static bool ShouldSendNavigationMoveEvent(KeyDownEvent e);
    [ExtensionAttribute]
internal static bool ShouldSendNavigationMoveEventRuntime(Event e);
}
public class UnityEngine.UIElements.KeyboardNavigationManipulator : Manipulator {
    private Action`2<KeyboardNavigationOperation, EventBase> m_Action;
    public KeyboardNavigationManipulator(Action`2<KeyboardNavigationOperation, EventBase> action);
    protected virtual void RegisterCallbacksOnTarget();
    protected virtual void UnregisterCallbacksFromTarget();
    internal void OnKeyDown(KeyDownEvent evt);
    private void OnNavigationCancel(NavigationCancelEvent evt);
    private void OnNavigationSubmit(NavigationSubmitEvent evt);
    private void OnNavigationMove(NavigationMoveEvent evt);
    private void Invoke(KeyboardNavigationOperation operation, EventBase evt);
    [CompilerGeneratedAttribute]
internal static KeyboardNavigationOperation <OnKeyDown>g__GetOperation|4_0(<>c__DisplayClass4_0& );
}
public enum UnityEngine.UIElements.KeyboardNavigationOperation : Enum {
    public int value__;
    public static KeyboardNavigationOperation None;
    public static KeyboardNavigationOperation SelectAll;
    public static KeyboardNavigationOperation Cancel;
    public static KeyboardNavigationOperation Submit;
    public static KeyboardNavigationOperation Previous;
    public static KeyboardNavigationOperation Next;
    public static KeyboardNavigationOperation MoveRight;
    public static KeyboardNavigationOperation MoveLeft;
    public static KeyboardNavigationOperation PageUp;
    public static KeyboardNavigationOperation PageDown;
    public static KeyboardNavigationOperation Begin;
    public static KeyboardNavigationOperation End;
}
internal class UnityEngine.UIElements.KeyboardTextEditorEventHandler : TextEditorEventHandler {
    private Event m_ImguiEvent;
    internal bool m_Changed;
    private static int k_LineFeed;
    private static int k_Space;
    public KeyboardTextEditorEventHandler(TextElement textElement, TextEditingUtilities editingUtilities);
    public virtual void ExecuteDefaultActionAtTarget(EventBase evt);
    private void OnFocus(FocusEvent _);
    private void OnBlur(BlurEvent _);
    private void OnKeyDown(KeyDownEvent evt);
    private void UpdateLabel();
    private void OnValidateCommandEvent(ValidateCommandEvent evt);
    private void OnExecuteCommandEvent(ExecuteCommandEvent evt);
    private void OnNavigationEvent(NavigationEventBase`1<TEvent> evt);
}
public class UnityEngine.UIElements.KeyDownEvent : KeyboardEventBase`1<KeyDownEvent> {
    private static KeyDownEvent();
    internal void GetEquivalentImguiEvent(Event outImguiEvent);
    protected internal virtual void PostDispatch(IPanel panel);
    private void SendEquivalentNavigationEventIfAny(IPanel panel);
}
public class UnityEngine.UIElements.KeyUpEvent : KeyboardEventBase`1<KeyUpEvent> {
    private static KeyUpEvent();
}
public class UnityEngine.UIElements.Label : TextElement {
    public static string ussClassName;
    public Label(string text);
    private static Label();
}
public enum UnityEngine.UIElements.LanguageDirection : Enum {
    public int value__;
    public static LanguageDirection Inherit;
    public static LanguageDirection LTR;
    public static LanguageDirection RTL;
}
internal class UnityEngine.UIElements.LayoutData : ValueType {
    public Align alignContent;
    public Align alignItems;
    public Align alignSelf;
    public float borderBottomWidth;
    public float borderLeftWidth;
    public float borderRightWidth;
    public float borderTopWidth;
    public Length bottom;
    public DisplayStyle display;
    public Length flexBasis;
    public FlexDirection flexDirection;
    public float flexGrow;
    public float flexShrink;
    public Wrap flexWrap;
    public Length height;
    public Justify justifyContent;
    public Length left;
    public Length marginBottom;
    public Length marginLeft;
    public Length marginRight;
    public Length marginTop;
    public Length maxHeight;
    public Length maxWidth;
    public Length minHeight;
    public Length minWidth;
    public Length paddingBottom;
    public Length paddingLeft;
    public Length paddingRight;
    public Length paddingTop;
    public Position position;
    public Length right;
    public Length top;
    public Length width;
    public sealed virtual LayoutData Copy();
    public sealed virtual void CopyFrom(LayoutData& other);
    public static bool op_Equality(LayoutData lhs, LayoutData rhs);
    public static bool op_Inequality(LayoutData lhs, LayoutData rhs);
    public sealed virtual bool Equals(LayoutData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class UnityEngine.UIElements.Length : ValueType {
    internal static float k_MaxValue;
    [SerializeField]
private float m_Value;
    [SerializeField]
private Unit m_Unit;
    public float value { get; public set; }
    public LengthUnit unit { get; public set; }
    public Length(float value);
    public Length(float value, LengthUnit unit);
    private Length(float value, Unit unit);
    public static Length Percent(float value);
    public static Length Auto();
    public static Length None();
    public float get_value();
    public void set_value(float value);
    public LengthUnit get_unit();
    public void set_unit(LengthUnit value);
    public bool IsAuto();
    public bool IsNone();
    public static Length op_Implicit(float value);
    public static bool op_Equality(Length lhs, Length rhs);
    public static bool op_Inequality(Length lhs, Length rhs);
    public sealed virtual bool Equals(Length other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum UnityEngine.UIElements.LengthUnit : Enum {
    public int value__;
    public static LengthUnit Pixel;
    public static LengthUnit Percent;
}
public enum UnityEngine.UIElements.LineCap : Enum {
    public int value__;
    public static LineCap Butt;
    public static LineCap Round;
}
public enum UnityEngine.UIElements.LineJoin : Enum {
    public int value__;
    public static LineJoin Miter;
    public static LineJoin Bevel;
    public static LineJoin Round;
}
public class UnityEngine.UIElements.ListView : BaseListView {
    private Func`1<VisualElement> m_MakeItem;
    private Action`2<VisualElement, int> m_BindItem;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<VisualElement, int> <unbindItem>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<VisualElement> <destroyItem>k__BackingField;
    public Func`1<VisualElement> makeItem { get; public set; }
    public Action`2<VisualElement, int> bindItem { get; public set; }
    public Action`2<VisualElement, int> unbindItem { get; public set; }
    public Action`1<VisualElement> destroyItem { get; public set; }
    public ListView(IList itemsSource, float itemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, int> bindItem);
    public Func`1<VisualElement> get_makeItem();
    public void set_makeItem(Func`1<VisualElement> value);
    internal void SetMakeItemWithoutNotify(Func`1<VisualElement> func);
    public Action`2<VisualElement, int> get_bindItem();
    public void set_bindItem(Action`2<VisualElement, int> value);
    internal void SetBindItemWithoutNotify(Action`2<VisualElement, int> callback);
    [CompilerGeneratedAttribute]
public Action`2<VisualElement, int> get_unbindItem();
    [CompilerGeneratedAttribute]
public void set_unbindItem(Action`2<VisualElement, int> value);
    [CompilerGeneratedAttribute]
public Action`1<VisualElement> get_destroyItem();
    [CompilerGeneratedAttribute]
public void set_destroyItem(Action`1<VisualElement> value);
    internal virtual bool HasValidDataAndBindings();
    protected virtual CollectionViewController CreateViewController();
}
public class UnityEngine.UIElements.ListViewController : BaseListViewController {
    protected ListView listView { get; }
    protected ListView get_listView();
    protected virtual VisualElement MakeItem();
    protected virtual void BindItem(VisualElement element, int index);
    protected virtual void UnbindItem(VisualElement element, int index);
    protected virtual void DestroyItem(VisualElement element);
}
internal class UnityEngine.UIElements.ListViewDragger : DragEventsProcessor {
    private DragPosition m_LastDragPosition;
    private VisualElement m_DragHoverBar;
    private VisualElement m_DragHoverItemMarker;
    private VisualElement m_DragHoverSiblingMarker;
    private float m_LeftIndentation;
    private float m_SiblingBottom;
    private static int k_AutoScrollAreaSize;
    private static int k_BetweenElementsAreaSize;
    private static int k_PanSpeed;
    private static int k_DragHoverBarHeight;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private ICollectionDragAndDropController <dragAndDropController>k__BackingField;
    protected BaseVerticalCollectionView targetView { get; }
    protected ScrollView targetScrollView { get; }
    public ICollectionDragAndDropController dragAndDropController { get; public set; }
    public ListViewDragger(BaseVerticalCollectionView listView);
    protected BaseVerticalCollectionView get_targetView();
    protected ScrollView get_targetScrollView();
    [CompilerGeneratedAttribute]
public ICollectionDragAndDropController get_dragAndDropController();
    [CompilerGeneratedAttribute]
public void set_dragAndDropController(ICollectionDragAndDropController value);
    protected virtual bool CanStartDrag(Vector3 pointerPosition);
    protected internal virtual StartDragArgs StartDrag(Vector3 pointerPosition);
    protected internal virtual void UpdateDrag(Vector3 pointerPosition);
    private DragVisualMode GetVisualMode(Vector3 pointerPosition, DragPosition& dragPosition);
    protected internal virtual void OnDrop(Vector3 pointerPosition);
    internal void HandleDragAndScroll(Vector2 pointerPosition);
    private void HandleAutoExpansion(Vector2 pointerPosition);
    private void ApplyDragAndDropUI(DragPosition dragPosition);
    protected virtual bool TryGetDragPosition(Vector2 pointerPosition, DragPosition& dragPosition);
    private void HandleTreePosition(Vector2 pointerPosition, DragPosition& dragPosition);
    private void HandleSiblingInsertionAtAvailableDepthsAndChangeTargetIfNeeded(DragPosition& dragPosition, Vector2 pointerPosition);
    private void GetPreviousAndNextItemsIgnoringDraggedItems(int insertAtIndex, Int32& previousItemId, Int32& nextItemId);
    protected DragAndDropArgs MakeDragAndDropArgs(DragPosition dragPosition);
    private float GetHoverBarTopPosition(ReusableCollectionItem item);
    private void PlaceHoverBarAtElement(ReusableCollectionItem item);
    private void PlaceHoverBarAt(float top, float indentationPadding, float siblingBottom);
    protected virtual void ClearDragAndDropUI(bool dragCancelled);
    protected ReusableCollectionItem GetRecycledItem(Vector3 pointerPosition);
    [CompilerGeneratedAttribute]
private void <ApplyDragAndDropUI>g__GeometryChangedCallback|27_0(GeometryChangedEvent e);
}
internal class UnityEngine.UIElements.ListViewDraggerAnimated : ListViewDragger {
    private int m_DragStartIndex;
    private int m_CurrentIndex;
    private float m_SelectionHeight;
    private float m_LocalOffsetOnStart;
    private Vector3 m_CurrentPointerPosition;
    private ReusableCollectionItem m_Item;
    private ReusableCollectionItem m_OffsetItem;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isDragging>k__BackingField;
    public bool isDragging { get; private set; }
    public ReusableCollectionItem draggedItem { get; }
    protected bool supportsDragEvents { get; }
    public ListViewDraggerAnimated(BaseVerticalCollectionView listView);
    [CompilerGeneratedAttribute]
public bool get_isDragging();
    [CompilerGeneratedAttribute]
private void set_isDragging(bool value);
    public ReusableCollectionItem get_draggedItem();
    protected virtual bool get_supportsDragEvents();
    protected internal virtual StartDragArgs StartDrag(Vector3 pointerPosition);
    protected internal virtual void UpdateDrag(Vector3 pointerPosition);
    private void Animate(ReusableCollectionItem element, float paddingTop);
    protected internal virtual void OnDrop(Vector3 pointerPosition);
    protected virtual void ClearDragAndDropUI(bool dragCancelled);
    protected virtual bool TryGetDragPosition(Vector2 pointerPosition, DragPosition& dragPosition);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.ListViewDraggerExtension : object {
    [ExtensionAttribute]
public static ReusableCollectionItem GetRecycledItemFromId(BaseVerticalCollectionView listView, int id);
    [ExtensionAttribute]
public static ReusableCollectionItem GetRecycledItemFromIndex(BaseVerticalCollectionView listView, int index);
}
internal class UnityEngine.UIElements.ListViewReorderableDragAndDropController : BaseReorderableDragAndDropController {
    protected BaseListView m_ListView;
    public ListViewReorderableDragAndDropController(BaseListView view);
    public virtual DragVisualMode HandleDragAndDrop(IListDragAndDropArgs args);
    public virtual void OnDrop(IListDragAndDropArgs args);
}
public enum UnityEngine.UIElements.ListViewReorderMode : Enum {
    public int value__;
    public static ListViewReorderMode Simple;
    public static ListViewReorderMode Animated;
}
internal class UnityEngine.UIElements.LoadResourceFunction : MulticastDelegate {
    public LoadResourceFunction(object object, IntPtr method);
    public virtual Object Invoke(string pathName, Type type, float dpiScaling);
    public virtual IAsyncResult BeginInvoke(string pathName, Type type, float dpiScaling, AsyncCallback callback, object object);
    public virtual Object EndInvoke(IAsyncResult result);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.LongField : TextValueField`1<long> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    private LongInput longInput { get; }
    public LongField(int maxLength);
    public LongField(string label, int maxLength);
    private static LongField();
    private LongInput get_longInput();
    protected virtual string ValueToString(long v);
    protected virtual long StringToValue(string str);
    internal virtual bool CanTryParse(string textString);
    public virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, long startValue);
}
public abstract class UnityEngine.UIElements.Manipulator : object {
    private VisualElement m_Target;
    public VisualElement target { get; public set; }
    protected abstract virtual void RegisterCallbacksOnTarget();
    protected abstract virtual void UnregisterCallbacksFromTarget();
    public sealed virtual VisualElement get_target();
    public sealed virtual void set_target(VisualElement value);
}
public class UnityEngine.UIElements.ManipulatorActivationFilter : ValueType {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private MouseButton <button>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventModifiers <modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <clickCount>k__BackingField;
    public MouseButton button { get; public set; }
    public EventModifiers modifiers { get; public set; }
    public int clickCount { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MouseButton get_button();
    [CompilerGeneratedAttribute]
public void set_button(MouseButton value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public EventModifiers get_modifiers();
    [CompilerGeneratedAttribute]
public void set_modifiers(EventModifiers value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_clickCount();
    [CompilerGeneratedAttribute]
public void set_clickCount(int value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ManipulatorActivationFilter other);
    public virtual int GetHashCode();
    public bool Matches(IMouseEvent e);
    private bool HasModifiers(IMouseEvent e);
    public bool Matches(IPointerEvent e);
    private bool HasModifiers(IPointerEvent e);
    private bool MatchModifiers(bool alt, bool ctrl, bool shift, bool command);
    public static bool op_Equality(ManipulatorActivationFilter filter1, ManipulatorActivationFilter filter2);
    public static bool op_Inequality(ManipulatorActivationFilter filter1, ManipulatorActivationFilter filter2);
}
[NativeHeaderAttribute("ModuleOverrides/com.unity.ui/Core/Native/Renderer/UIRMeshBuilder.bindings.h")]
internal static class UnityEngine.UIElements.MeshBuilderNative : object {
    public static float kEpsilon;
    public static MeshWriteDataInterface MakeBorder(NativeBorderParams borderParams, float posZ);
    public static MeshWriteDataInterface MakeSolidRect(NativeRectParams rectParams, float posZ);
    public static MeshWriteDataInterface MakeTexturedRect(NativeRectParams rectParams, float posZ);
    public static MeshWriteDataInterface MakeVectorGraphicsStretchBackground(Vertex[] svgVertices, UInt16[] svgIndices, float svgWidth, float svgHeight, Rect targetRect, Rect sourceUV, ScaleMode scaleMode, Color tint, NativeColorPage colorPage, int settingIndexOffset, Int32& finalVertexCount, Int32& finalIndexCount);
    public static MeshWriteDataInterface MakeVectorGraphics9SliceBackground(Vertex[] svgVertices, UInt16[] svgIndices, float svgWidth, float svgHeight, Rect targetRect, Vector4 sliceLTRB, Color tint, NativeColorPage colorPage, int settingIndexOffset);
    private static void MakeBorder_Injected(NativeBorderParams& borderParams, float posZ, MeshWriteDataInterface& ret);
    private static void MakeSolidRect_Injected(NativeRectParams& rectParams, float posZ, MeshWriteDataInterface& ret);
    private static void MakeTexturedRect_Injected(NativeRectParams& rectParams, float posZ, MeshWriteDataInterface& ret);
    private static void MakeVectorGraphicsStretchBackground_Injected(Vertex[] svgVertices, UInt16[] svgIndices, float svgWidth, float svgHeight, Rect& targetRect, Rect& sourceUV, ScaleMode scaleMode, Color& tint, NativeColorPage& colorPage, int settingIndexOffset, Int32& finalVertexCount, Int32& finalIndexCount, MeshWriteDataInterface& ret);
    private static void MakeVectorGraphics9SliceBackground_Injected(Vertex[] svgVertices, UInt16[] svgIndices, float svgWidth, float svgHeight, Rect& targetRect, Vector4& sliceLTRB, Color& tint, NativeColorPage& colorPage, int settingIndexOffset, MeshWriteDataInterface& ret);
}
public class UnityEngine.UIElements.MeshGenerationContext : object {
    private Painter2D m_Painter2D;
    private static ProfilerMarker s_AllocateMarker;
    private static ProfilerMarker s_DrawVectorImageMarker;
    internal IStylePainter painter;
    public VisualElement visualElement { get; }
    public Painter2D painter2D { get; }
    internal bool hasPainter2D { get; }
    internal MeshGenerationContext(IStylePainter painter);
    private static MeshGenerationContext();
    public VisualElement get_visualElement();
    public Painter2D get_painter2D();
    internal bool get_hasPainter2D();
    public MeshWriteData Allocate(int vertexCount, int indexCount, Texture texture);
    internal MeshWriteData Allocate(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags);
    public void DrawVectorImage(VectorImage vectorImage, Vector2 offset, Angle rotationAngle, Vector2 scale);
    public void DrawText(string text, Vector2 pos, float fontSize, Color color, FontAsset font);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.MeshGenerationContextUtils : object {
    [ExtensionAttribute]
public static void Rectangle(MeshGenerationContext mgc, RectangleParams rectParams);
    [ExtensionAttribute]
public static void Border(MeshGenerationContext mgc, BorderParams borderParams);
    [ExtensionAttribute]
public static void Text(MeshGenerationContext mgc, TextElement te);
    private static Vector2 ConvertBorderRadiusPercentToPoints(Vector2 borderRectSize, Length length);
    public static void GetVisualElementRadii(VisualElement ve, Vector2& topLeft, Vector2& bottomLeft, Vector2& topRight, Vector2& bottomRight);
    public static void AdjustBackgroundSizeForBorders(VisualElement visualElement, RectangleParams& rectParams);
}
public class UnityEngine.UIElements.MeshWriteData : object {
    internal NativeSlice`1<Vertex> m_Vertices;
    internal NativeSlice`1<ushort> m_Indices;
    internal Rect m_UVRegion;
    internal int currentIndex;
    internal int currentVertex;
    public int vertexCount { get; }
    public int indexCount { get; }
    public Rect uvRegion { get; }
    public int get_vertexCount();
    public int get_indexCount();
    public Rect get_uvRegion();
    public void SetNextVertex(Vertex vertex);
    public void SetNextIndex(ushort index);
    public void SetAllVertices(Vertex[] vertices);
    public void SetAllVertices(NativeSlice`1<Vertex> vertices);
    public void SetAllIndices(UInt16[] indices);
    public void SetAllIndices(NativeSlice`1<ushort> indices);
    internal void Reset(NativeSlice`1<Vertex> vertices, NativeSlice`1<ushort> indices);
    internal void Reset(NativeSlice`1<Vertex> vertices, NativeSlice`1<ushort> indices, Rect uvRegion);
}
internal class UnityEngine.UIElements.MeshWriteDataInterface : ValueType {
    public IntPtr vertices;
    public IntPtr indices;
    public int vertexCount;
    public int indexCount;
    public static MeshWriteDataInterface FromMeshWriteData(MeshWriteData data);
}
public class UnityEngine.UIElements.MinMaxSlider : BaseField`1<Vector2> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <dragElement>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <dragMinThumb>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private VisualElement <dragMaxThumb>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClampedDragger`1<float> <clampedDragger>k__BackingField;
    private Vector2 m_DragElementStartPos;
    private Vector2 m_ValueStartPos;
    private Rect m_DragMinThumbRect;
    private Rect m_DragMaxThumbRect;
    private DragState m_DragState;
    private float m_MinLimit;
    private float m_MaxLimit;
    internal static float kDefaultHighValue;
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public static string trackerUssClassName;
    public static string draggerUssClassName;
    public static string minThumbUssClassName;
    public static string maxThumbUssClassName;
    internal VisualElement dragElement { get; private set; }
    internal VisualElement dragMinThumb { get; private set; }
    internal VisualElement dragMaxThumb { get; private set; }
    internal ClampedDragger`1<float> clampedDragger { get; private set; }
    public float minValue { get; public set; }
    public float maxValue { get; public set; }
    public Vector2 value { get; public set; }
    public float range { get; }
    public float lowLimit { get; public set; }
    public float highLimit { get; public set; }
    public MinMaxSlider(float minValue, float maxValue, float minLimit, float maxLimit);
    public MinMaxSlider(string label, float minValue, float maxValue, float minLimit, float maxLimit);
    private static MinMaxSlider();
    [CompilerGeneratedAttribute]
internal VisualElement get_dragElement();
    [CompilerGeneratedAttribute]
private void set_dragElement(VisualElement value);
    [CompilerGeneratedAttribute]
internal VisualElement get_dragMinThumb();
    [CompilerGeneratedAttribute]
private void set_dragMinThumb(VisualElement value);
    [CompilerGeneratedAttribute]
internal VisualElement get_dragMaxThumb();
    [CompilerGeneratedAttribute]
private void set_dragMaxThumb(VisualElement value);
    [CompilerGeneratedAttribute]
internal ClampedDragger`1<float> get_clampedDragger();
    [CompilerGeneratedAttribute]
private void set_clampedDragger(ClampedDragger`1<float> value);
    public float get_minValue();
    public void set_minValue(float value);
    public float get_maxValue();
    public void set_maxValue(float value);
    public virtual Vector2 get_value();
    public virtual void set_value(Vector2 value);
    public virtual void SetValueWithoutNotify(Vector2 newValue);
    public float get_range();
    public float get_lowLimit();
    public void set_lowLimit(float value);
    public float get_highLimit();
    public void set_highLimit(float value);
    private Vector2 ClampValues(Vector2 valueToClamp);
    private void UpdateDragElementPosition(GeometryChangedEvent evt);
    private void UpdateDragElementPosition();
    private void UpdateDragThumbsRect();
    internal float SliderLerpUnclamped(float a, float b, float interpolant);
    internal float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue);
    private float ComputeValueFromPosition(float positionToConvert);
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultAction(EventBase evt);
    private void SetSliderValueFromDrag();
    private void SetSliderValueFromClick();
    private void ComputeValueFromDraggingThumb(float dragElementStartPos, float dragElementEndPos);
    protected virtual void UpdateMixedValueContent();
    internal virtual void RegisterEditingCallbacks();
    internal virtual void UnregisterEditingCallbacks();
}
public enum UnityEngine.UIElements.MouseButton : Enum {
    public int value__;
    public static MouseButton LeftMouse;
    public static MouseButton RightMouse;
    public static MouseButton MiddleMouse;
}
[ExtensionAttribute]
public static class UnityEngine.UIElements.MouseCaptureController : object {
    private static bool m_IsMouseCapturedWarningEmitted;
    private static bool m_ReleaseMouseWarningEmitted;
    public static bool IsMouseCaptured();
    [ExtensionAttribute]
public static bool HasMouseCapture(IEventHandler handler);
    [ExtensionAttribute]
public static void CaptureMouse(IEventHandler handler);
    [ExtensionAttribute]
public static void ReleaseMouse(IEventHandler handler);
    public static void ReleaseMouse();
}
internal class UnityEngine.UIElements.MouseCaptureDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public sealed virtual void DispatchEvent(EventBase evt, IPanel panel);
}
public class UnityEngine.UIElements.MouseCaptureEvent : MouseCaptureEventBase`1<MouseCaptureEvent> {
    private static MouseCaptureEvent();
}
public abstract class UnityEngine.UIElements.MouseCaptureEventBase`1 : PointerCaptureEventBase`1<T> {
    public IEventHandler relatedTarget { get; }
    public IEventHandler get_relatedTarget();
    public static T GetPooled(IEventHandler target, IEventHandler relatedTarget);
    protected virtual void Init();
}
public class UnityEngine.UIElements.MouseCaptureOutEvent : MouseCaptureEventBase`1<MouseCaptureOutEvent> {
    private static MouseCaptureOutEvent();
}
public class UnityEngine.UIElements.MouseDownEvent : MouseEventBase`1<MouseDownEvent> {
    private static MouseDownEvent();
    protected virtual void Init();
    private void LocalInit();
    public static MouseDownEvent GetPooled(Event systemEvent);
    private static MouseDownEvent MakeFromPointerEvent(IPointerEvent pointerEvent);
    internal static MouseDownEvent GetPooled(PointerDownEvent pointerEvent);
    internal static MouseDownEvent GetPooled(PointerMoveEvent pointerEvent);
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.MouseEnterEvent : MouseEventBase`1<MouseEnterEvent> {
    private static MouseEnterEvent();
    protected virtual void Init();
    private void LocalInit();
}
[EventCategoryAttribute("4")]
public class UnityEngine.UIElements.MouseEnterWindowEvent : MouseEventBase`1<MouseEnterWindowEvent> {
    private static MouseEnterWindowEvent();
    protected virtual void Init();
    private void LocalInit();
    protected internal virtual void PostDispatch(IPanel panel);
}
[EventCategoryAttribute("1")]
public abstract class UnityEngine.UIElements.MouseEventBase`1 : EventBase`1<T> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventModifiers <modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <mousePosition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <localMousePosition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <mouseDelta>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <clickCount>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <button>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <pressedButtons>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UnityEngine.UIElements.IMouseEventInternal.triggeredByOS>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <UnityEngine.UIElements.IMouseEventInternal.recomputeTopElementUnderMouse>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPointerEvent <UnityEngine.UIElements.IMouseEventInternal.sourcePointerEvent>k__BackingField;
    public EventModifiers modifiers { get; protected set; }
    public Vector2 mousePosition { get; protected set; }
    public Vector2 localMousePosition { get; internal set; }
    public Vector2 mouseDelta { get; protected set; }
    public int clickCount { get; protected set; }
    public int button { get; protected set; }
    public int pressedButtons { get; protected set; }
    public bool shiftKey { get; }
    public bool ctrlKey { get; }
    public bool commandKey { get; }
    public bool altKey { get; }
    public bool actionKey { get; }
    private bool UnityEngine.UIElements.IMouseEventInternal.triggeredByOS { get; private set; }
    private bool UnityEngine.UIElements.IMouseEventInternal.recomputeTopElementUnderMouse { get; private set; }
    private IPointerEvent UnityEngine.UIElements.IMouseEventInternal.sourcePointerEvent { get; private set; }
    public IEventHandler currentTarget { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual EventModifiers get_modifiers();
    [CompilerGeneratedAttribute]
protected void set_modifiers(EventModifiers value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector2 get_mousePosition();
    [CompilerGeneratedAttribute]
protected void set_mousePosition(Vector2 value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector2 get_localMousePosition();
    [CompilerGeneratedAttribute]
internal void set_localMousePosition(Vector2 value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector2 get_mouseDelta();
    [CompilerGeneratedAttribute]
protected void set_mouseDelta(Vector2 value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_clickCount();
    [CompilerGeneratedAttribute]
protected void set_clickCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_button();
    [CompilerGeneratedAttribute]
protected void set_button(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_pressedButtons();
    [CompilerGeneratedAttribute]
protected void set_pressedButtons(int value);
    public sealed virtual bool get_shiftKey();
    public sealed virtual bool get_ctrlKey();
    public sealed virtual bool get_commandKey();
    public sealed virtual bool get_altKey();
    public sealed virtual bool get_actionKey();
    [CompilerGeneratedAttribute]
private sealed virtual override bool UnityEngine.UIElements.IMouseEventInternal.get_triggeredByOS();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.IMouseEventInternal.set_triggeredByOS(bool value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool UnityEngine.UIElements.IMouseEventInternal.get_recomputeTopElementUnderMouse();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.IMouseEventInternal.set_recomputeTopElementUnderMouse(bool value);
    [CompilerGeneratedAttribute]
private sealed virtual override IPointerEvent UnityEngine.UIElements.IMouseEventInternal.get_sourcePointerEvent();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.IMouseEventInternal.set_sourcePointerEvent(IPointerEvent value);
    protected virtual void Init();
    private void LocalInit();
    public virtual IEventHandler get_currentTarget();
    internal virtual void set_currentTarget(IEventHandler value);
    protected internal virtual void PreDispatch(IPanel panel);
    protected internal virtual void PostDispatch(IPanel panel);
    public static T GetPooled(Event systemEvent);
    public static T GetPooled(Vector2 position, int button, int clickCount, Vector2 delta, EventModifiers modifiers);
    internal static T GetPooled(Vector2 position, int button, int clickCount, Vector2 delta, EventModifiers modifiers, bool fromOS);
    internal static T GetPooled(IMouseEvent triggerEvent, Vector2 mousePosition, bool recomputeTopElementUnderMouse);
    public static T GetPooled(IMouseEvent triggerEvent);
    protected static T GetPooled(IPointerEvent pointerEvent);
}
internal class UnityEngine.UIElements.MouseEventDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public sealed virtual void DispatchEvent(EventBase evt, IPanel iPanel);
    private static bool SendEventToTarget(EventBase evt, BaseVisualElementPanel panel);
    private static bool SendEventToRegularTarget(EventBase evt, BaseVisualElementPanel panel);
    private static bool SendEventToIMGUIContainer(EventBase evt, BaseVisualElementPanel panel);
    private static void SetBestTargetForEvent(EventBase evt, BaseVisualElementPanel panel);
    private static void UpdateElementUnderMouse(EventBase evt, BaseVisualElementPanel panel, VisualElement& elementUnderMouse);
    private static bool IsDone(EventBase evt);
}
internal static class UnityEngine.UIElements.MouseEventsHelper : object {
    internal static void SendEnterLeave(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, IMouseEvent triggerEvent, Vector2 mousePosition);
    internal static void SendMouseOverMouseOut(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, IMouseEvent triggerEvent, Vector2 mousePosition);
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.MouseLeaveEvent : MouseEventBase`1<MouseLeaveEvent> {
    private static MouseLeaveEvent();
    protected virtual void Init();
    private void LocalInit();
}
[EventCategoryAttribute("4")]
public class UnityEngine.UIElements.MouseLeaveWindowEvent : MouseEventBase`1<MouseLeaveWindowEvent> {
    private static MouseLeaveWindowEvent();
    protected virtual void Init();
    private void LocalInit();
    public static MouseLeaveWindowEvent GetPooled(Event systemEvent);
    protected internal virtual void PostDispatch(IPanel panel);
}
public abstract class UnityEngine.UIElements.MouseManipulator : Manipulator {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<ManipulatorActivationFilter> <activators>k__BackingField;
    private ManipulatorActivationFilter m_currentActivator;
    public List`1<ManipulatorActivationFilter> activators { get; private set; }
    [CompilerGeneratedAttribute]
public List`1<ManipulatorActivationFilter> get_activators();
    [CompilerGeneratedAttribute]
private void set_activators(List`1<ManipulatorActivationFilter> value);
    protected bool CanStartManipulation(IMouseEvent e);
    protected bool CanStopManipulation(IMouseEvent e);
}
[EventCategoryAttribute("2")]
public class UnityEngine.UIElements.MouseMoveEvent : MouseEventBase`1<MouseMoveEvent> {
    private static MouseMoveEvent();
    protected virtual void Init();
    private void LocalInit();
    public static MouseMoveEvent GetPooled(Event systemEvent);
    internal static MouseMoveEvent GetPooled(PointerMoveEvent pointerEvent);
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.MouseOutEvent : MouseEventBase`1<MouseOutEvent> {
    private static MouseOutEvent();
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.MouseOverEvent : MouseEventBase`1<MouseOverEvent> {
    private static MouseOverEvent();
}
public class UnityEngine.UIElements.MouseUpEvent : MouseEventBase`1<MouseUpEvent> {
    private static MouseUpEvent();
    protected virtual void Init();
    private void LocalInit();
    public static MouseUpEvent GetPooled(Event systemEvent);
    private static MouseUpEvent MakeFromPointerEvent(IPointerEvent pointerEvent);
    internal static MouseUpEvent GetPooled(PointerUpEvent pointerEvent);
    internal static MouseUpEvent GetPooled(PointerMoveEvent pointerEvent);
    internal static MouseUpEvent GetPooled(PointerCancelEvent pointerEvent);
}
public class UnityEngine.UIElements.MultiColumnController : object {
    private static PropertyName k_BoundColumnVePropertyName;
    internal static PropertyName bindableElementPropertyName;
    internal static string baseUssClassName;
    private static string k_HeaderContainerViewDataKey;
    public static string headerContainerUssClassName;
    public static string rowContainerUssClassName;
    public static string cellUssClassName;
    public static string cellLabelUssClassName;
    private static string k_HeaderViewDataKey;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action columnSortingChanged;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`2<ContextualMenuPopulateEvent, Column> headerContextMenuPopulateEvent;
    private BaseVerticalCollectionView m_View;
    private VisualElement m_HeaderContainer;
    private MultiColumnCollectionHeader m_MultiColumnHeader;
    internal MultiColumnCollectionHeader header { get; }
    public MultiColumnController(Columns columns, SortColumnDescriptions sortDescriptions, List`1<SortColumnDescription> sortedColumns);
    private static MultiColumnController();
    [CompilerGeneratedAttribute]
public void add_columnSortingChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_columnSortingChanged(Action value);
    [CompilerGeneratedAttribute]
public void add_headerContextMenuPopulateEvent(Action`2<ContextualMenuPopulateEvent, Column> value);
    [CompilerGeneratedAttribute]
public void remove_headerContextMenuPopulateEvent(Action`2<ContextualMenuPopulateEvent, Column> value);
    internal MultiColumnCollectionHeader get_header();
    private static void BindCellItem(VisualElement ve, int rowIndex, Column column, T item);
    private static void UnbindCellItem(VisualElement ve, int rowIndex, Column column);
    private static VisualElement DefaultMakeCellItem();
    private static void DefaultBindCellItem(VisualElement ve, Column column, T item);
    public VisualElement MakeItem();
    public void BindItem(VisualElement element, int index, T item);
    public void UnbindItem(VisualElement element, int index);
    public void DestroyItem(VisualElement element);
    public void PrepareView(BaseVerticalCollectionView collectionView);
    public sealed virtual void Dispose();
    private void OnHorizontalScrollerValueChanged(float v);
    private void OnViewportGeometryChanged(GeometryChangedEvent evt);
    private void OnColumnContainerGeometryChanged(GeometryChangedEvent evt);
    private void UpdateContentContainer(BaseVerticalCollectionView collectionView);
    private void OnColumnSortingChanged();
    private void OnContextMenuPopulateEvent(ContextualMenuPopulateEvent evt, Column column);
    private void OnColumnResized(int index, float width);
    private void OnColumnAdded(Column column, int index);
    private void OnColumnRemoved(Column column);
    private void OnColumnReordered(Column column, int from, int to);
    private void OnColumnsChanged(Column column, ColumnDataType type);
    private void OnColumnChanged(ColumnsDataType type);
    private void OnViewDataRestored();
}
public class UnityEngine.UIElements.MultiColumnListView : BaseListView {
    private Columns m_Columns;
    private bool m_SortingEnabled;
    private SortColumnDescriptions m_SortColumnDescriptions;
    private List`1<SortColumnDescription> m_SortedColumns;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action columnSortingChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<ContextualMenuPopulateEvent, Column> headerContextMenuPopulateEvent;
    public MultiColumnListViewController viewController { get; }
    public IEnumerable`1<SortColumnDescription> sortedColumns { get; }
    public Columns columns { get; private set; }
    public SortColumnDescriptions sortColumnDescriptions { get; private set; }
    public bool sortingEnabled { get; public set; }
    public MultiColumnListView(Columns columns);
    public MultiColumnListViewController get_viewController();
    [CompilerGeneratedAttribute]
public void add_columnSortingChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_columnSortingChanged(Action value);
    [CompilerGeneratedAttribute]
public void add_headerContextMenuPopulateEvent(Action`2<ContextualMenuPopulateEvent, Column> value);
    [CompilerGeneratedAttribute]
public void remove_headerContextMenuPopulateEvent(Action`2<ContextualMenuPopulateEvent, Column> value);
    public IEnumerable`1<SortColumnDescription> get_sortedColumns();
    public Columns get_columns();
    private void set_columns(Columns value);
    public SortColumnDescriptions get_sortColumnDescriptions();
    private void set_sortColumnDescriptions(SortColumnDescriptions value);
    public bool get_sortingEnabled();
    public void set_sortingEnabled(bool value);
    protected virtual CollectionViewController CreateViewController();
    public virtual void SetViewController(CollectionViewController controller);
    private protected virtual void CreateVirtualizationController();
    private void RaiseColumnSortingChanged();
    private void RaiseHeaderContextMenuPopulate(ContextualMenuPopulateEvent evt, Column column);
}
public class UnityEngine.UIElements.MultiColumnListViewController : BaseListViewController {
    private MultiColumnController m_ColumnController;
    public MultiColumnController columnController { get; }
    internal MultiColumnCollectionHeader header { get; }
    public MultiColumnListViewController(Columns columns, SortColumnDescriptions sortDescriptions, List`1<SortColumnDescription> sortedColumns);
    public MultiColumnController get_columnController();
    internal MultiColumnCollectionHeader get_header();
    internal virtual void InvokeMakeItem(ReusableCollectionItem reusableItem);
    protected virtual VisualElement MakeItem();
    protected virtual void BindItem(VisualElement element, int index);
    protected virtual void UnbindItem(VisualElement element, int index);
    protected virtual void DestroyItem(VisualElement element);
    protected virtual void PrepareView();
    public virtual void Dispose();
    private void UpdateReorderClassList();
}
public class UnityEngine.UIElements.MultiColumnTreeView : BaseTreeView {
    private Columns m_Columns;
    private bool m_SortingEnabled;
    private SortColumnDescriptions m_SortColumnDescriptions;
    private List`1<SortColumnDescription> m_SortedColumns;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action columnSortingChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<ContextualMenuPopulateEvent, Column> headerContextMenuPopulateEvent;
    public MultiColumnTreeViewController viewController { get; }
    public IEnumerable`1<SortColumnDescription> sortedColumns { get; }
    public Columns columns { get; private set; }
    public SortColumnDescriptions sortColumnDescriptions { get; private set; }
    public bool sortingEnabled { get; public set; }
    public MultiColumnTreeView(Columns columns);
    public MultiColumnTreeViewController get_viewController();
    [CompilerGeneratedAttribute]
public void add_columnSortingChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_columnSortingChanged(Action value);
    [CompilerGeneratedAttribute]
public void add_headerContextMenuPopulateEvent(Action`2<ContextualMenuPopulateEvent, Column> value);
    [CompilerGeneratedAttribute]
public void remove_headerContextMenuPopulateEvent(Action`2<ContextualMenuPopulateEvent, Column> value);
    public IEnumerable`1<SortColumnDescription> get_sortedColumns();
    public Columns get_columns();
    private void set_columns(Columns value);
    public SortColumnDescriptions get_sortColumnDescriptions();
    private void set_sortColumnDescriptions(SortColumnDescriptions value);
    public bool get_sortingEnabled();
    public void set_sortingEnabled(bool value);
    internal virtual void SetRootItemsInternal(IList`1<TreeViewItemData`1<T>> rootItems);
    private protected virtual IEnumerable`1<TreeViewItemData`1<T>> GetSelectedItemsInternal();
    private protected virtual T GetItemDataForIndexInternal(int index);
    private protected virtual T GetItemDataForIdInternal(int id);
    private protected virtual void AddItemInternal(TreeViewItemData`1<T> item, int parentId, int childIndex, bool rebuildTree);
    protected virtual CollectionViewController CreateViewController();
    public virtual void SetViewController(CollectionViewController controller);
    private protected virtual void CreateVirtualizationController();
    private void RaiseColumnSortingChanged();
    private void RaiseHeaderContextMenuPopulate(ContextualMenuPopulateEvent evt, Column column);
    [CompilerGeneratedAttribute]
private DefaultMultiColumnTreeViewController`1<T> <SetRootItemsInternal>b__27_0();
}
public abstract class UnityEngine.UIElements.MultiColumnTreeViewController : BaseTreeViewController {
    private MultiColumnController m_ColumnController;
    public MultiColumnController columnController { get; }
    internal MultiColumnCollectionHeader header { get; }
    protected MultiColumnTreeViewController(Columns columns, SortColumnDescriptions sortDescriptions, List`1<SortColumnDescription> sortedColumns);
    public MultiColumnController get_columnController();
    internal MultiColumnCollectionHeader get_header();
    internal virtual void InvokeMakeItem(ReusableCollectionItem reusableItem);
    protected virtual VisualElement MakeItem();
    protected virtual void BindItem(VisualElement element, int index);
    protected virtual void UnbindItem(VisualElement element, int index);
    protected virtual void DestroyItem(VisualElement element);
    protected virtual void PrepareView();
    public virtual void Dispose();
}
internal class UnityEngine.UIElements.NavigateFocusRing : object {
    public static ChangeDirection Left;
    public static ChangeDirection Right;
    public static ChangeDirection Up;
    public static ChangeDirection Down;
    public static FocusChangeDirection Next;
    public static FocusChangeDirection Previous;
    private VisualElement m_Root;
    private VisualElementFocusRing m_Ring;
    private FocusController focusController { get; }
    public NavigateFocusRing(VisualElement root);
    private static NavigateFocusRing();
    private FocusController get_focusController();
    public sealed virtual FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e);
    public virtual Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction);
    private Focusable GetNextFocusable2D(Focusable currentFocusable, ChangeDirection direction);
    private static bool IsActive(VisualElement v);
    private static bool IsNavigable(Focusable focusable);
}
public class UnityEngine.UIElements.NavigationCancelEvent : NavigationEventBase`1<NavigationCancelEvent> {
    private static NavigationCancelEvent();
}
internal enum UnityEngine.UIElements.NavigationDeviceType : Enum {
    public int value__;
    public static NavigationDeviceType Unknown;
    public static NavigationDeviceType Keyboard;
    public static NavigationDeviceType NonKeyboard;
}
[EventCategoryAttribute("13")]
public abstract class UnityEngine.UIElements.NavigationEventBase`1 : EventBase`1<T> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventModifiers <modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NavigationDeviceType <deviceType>k__BackingField;
    public EventModifiers modifiers { get; protected set; }
    public bool shiftKey { get; }
    public bool ctrlKey { get; }
    public bool commandKey { get; }
    public bool altKey { get; }
    public bool actionKey { get; }
    private NavigationDeviceType UnityEngine.UIElements.INavigationEvent.deviceType { get; }
    internal NavigationDeviceType deviceType { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual EventModifiers get_modifiers();
    [CompilerGeneratedAttribute]
protected void set_modifiers(EventModifiers value);
    public sealed virtual bool get_shiftKey();
    public sealed virtual bool get_ctrlKey();
    public sealed virtual bool get_commandKey();
    public sealed virtual bool get_altKey();
    public sealed virtual bool get_actionKey();
    private sealed virtual override NavigationDeviceType UnityEngine.UIElements.INavigationEvent.get_deviceType();
    [CompilerGeneratedAttribute]
internal NavigationDeviceType get_deviceType();
    [CompilerGeneratedAttribute]
private void set_deviceType(NavigationDeviceType value);
    protected virtual void Init();
    private void LocalInit();
    public static T GetPooled(EventModifiers modifiers);
    internal static T GetPooled(NavigationDeviceType deviceType, EventModifiers modifiers);
}
internal class UnityEngine.UIElements.NavigationEventDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public sealed virtual void DispatchEvent(EventBase evt, IPanel panel);
}
public class UnityEngine.UIElements.NavigationMoveEvent : NavigationEventBase`1<NavigationMoveEvent> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Direction <direction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <move>k__BackingField;
    public Direction direction { get; private set; }
    public Vector2 move { get; private set; }
    private static NavigationMoveEvent();
    internal static Direction DetermineMoveDirection(float x, float y, float deadZone);
    [CompilerGeneratedAttribute]
public Direction get_direction();
    [CompilerGeneratedAttribute]
private void set_direction(Direction value);
    [CompilerGeneratedAttribute]
public Vector2 get_move();
    [CompilerGeneratedAttribute]
private void set_move(Vector2 value);
    public static NavigationMoveEvent GetPooled(Vector2 moveVector, EventModifiers modifiers);
    internal static NavigationMoveEvent GetPooled(Vector2 moveVector, NavigationDeviceType deviceType, EventModifiers modifiers);
    public static NavigationMoveEvent GetPooled(Direction direction, EventModifiers modifiers);
    internal static NavigationMoveEvent GetPooled(Direction direction, NavigationDeviceType deviceType, EventModifiers modifiers);
    protected virtual void Init();
    private void LocalInit();
}
public class UnityEngine.UIElements.NavigationSubmitEvent : NavigationEventBase`1<NavigationSubmitEvent> {
    private static NavigationSubmitEvent();
}
internal class UnityEngine.UIElements.ObjectListPool`1 : object {
    private static ObjectPool`1<List`1<T>> pool;
    private static ObjectListPool`1();
    public static List`1<T> Get();
    public static void Release(List`1<T> elements);
}
internal class UnityEngine.UIElements.ObjectPool`1 : object {
    private Stack`1<T> m_Stack;
    private int m_MaxSize;
    internal Func`1<T> CreateFunc;
    public int maxSize { get; public set; }
    public ObjectPool`1(Func`1<T> CreateFunc, int maxSize);
    public int get_maxSize();
    public void set_maxSize(int value);
    public int Size();
    public void Clear();
    public T Get();
    public void Release(T element);
}
public enum UnityEngine.UIElements.Overflow : Enum {
    public int value__;
    public static Overflow Visible;
    public static Overflow Hidden;
}
public enum UnityEngine.UIElements.OverflowClipBox : Enum {
    public int value__;
    public static OverflowClipBox PaddingBox;
    public static OverflowClipBox ContentBox;
}
internal enum UnityEngine.UIElements.OverflowInternal : Enum {
    public int value__;
    public static OverflowInternal Visible;
    public static OverflowInternal Hidden;
    public static OverflowInternal Scroll;
}
public class UnityEngine.UIElements.Painter2D : object {
    private MeshGenerationContext m_Ctx;
    internal DetachedAllocator m_DetachedAllocator;
    internal SafeHandleAccess m_Handle;
    private bool m_Disposed;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static bool <isPainterActive>k__BackingField;
    private static float s_MaxArcRadius;
    private static ProfilerMarker s_StrokeMarker;
    private static ProfilerMarker s_FillMarker;
    internal bool isDetached { get; }
    public float lineWidth { get; public set; }
    public Color strokeColor { get; public set; }
    public Gradient strokeGradient { get; public set; }
    public Color fillColor { get; public set; }
    public LineJoin lineJoin { get; public set; }
    public LineCap lineCap { get; public set; }
    public float miterLimit { get; public set; }
    internal static bool isPainterActive { get; internal set; }
    private static float maxArcRadius { get; }
    internal Painter2D(MeshGenerationContext ctx);
    private static Painter2D();
    internal bool get_isDetached();
    internal void Reset();
    internal MeshWriteData Allocate(int vertexCount, int indexCount);
    public void Clear();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public float get_lineWidth();
    public void set_lineWidth(float value);
    public Color get_strokeColor();
    public void set_strokeColor(Color value);
    public Gradient get_strokeGradient();
    public void set_strokeGradient(Gradient value);
    public Color get_fillColor();
    public void set_fillColor(Color value);
    public LineJoin get_lineJoin();
    public void set_lineJoin(LineJoin value);
    public LineCap get_lineCap();
    public void set_lineCap(LineCap value);
    public float get_miterLimit();
    public void set_miterLimit(float value);
    [CompilerGeneratedAttribute]
internal static bool get_isPainterActive();
    [CompilerGeneratedAttribute]
internal static void set_isPainterActive(bool value);
    private bool ValidateState();
    private static float get_maxArcRadius();
    public void BeginPath();
    public void ClosePath();
    public void MoveTo(Vector2 pos);
    public void LineTo(Vector2 pos);
    public void ArcTo(Vector2 p1, Vector2 p2, float radius);
    public void Arc(Vector2 center, float radius, Angle startAngle, Angle endAngle, ArcDirection direction);
    public void BezierCurveTo(Vector2 p1, Vector2 p2, Vector2 p3);
    public void QuadraticCurveTo(Vector2 p1, Vector2 p2);
    public void Stroke();
    public void Fill(FillRule fillRule);
    public bool SaveToVectorImage(VectorImage vectorImage);
}
internal class UnityEngine.UIElements.Panel : BaseVisualElementPanel {
    private VisualElement m_RootContainer;
    private VisualTreeUpdater m_VisualTreeUpdater;
    private IStylePropertyAnimationSystem m_StylePropertyAnimationSystem;
    private string m_PanelName;
    private UInt32 m_Version;
    private UInt32 m_RepaintVersion;
    private UInt32 m_HierarchyVersion;
    private ProfilerMarker m_MarkerBeforeUpdate;
    private ProfilerMarker m_MarkerUpdate;
    private ProfilerMarker m_MarkerLayout;
    private ProfilerMarker m_MarkerBindings;
    private ProfilerMarker m_MarkerAnimations;
    private static ProfilerMarker s_MarkerPickAll;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventDispatcher <dispatcher>k__BackingField;
    private TimerEventScheduler m_Scheduler;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ScriptableObject <ownerObject>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ContextType <contextType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SavePersistentViewData <saveViewData>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private GetViewDataDictionary <getViewDataDictionary>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private FocusController <focusController>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private EventInterests <IMGUIEventInterests>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static LoadResourceFunction <loadResourceFunc>k__BackingField;
    private bool m_JustReceivedFocus;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static TimeMsFunction <TimeSinceStartup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <IMGUIContainersCount>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private IMGUIContainer <rootIMGUIContainer>k__BackingField;
    private Shader m_StandardShader;
    private AtlasBase m_Atlas;
    private bool m_ValidatingLayout;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`1<Panel> beforeAnyRepaint;
    public VisualElement visualTree { get; }
    public EventDispatcher dispatcher { get; public set; }
    public TimerEventScheduler timerEventScheduler { get; }
    internal IScheduler scheduler { get; }
    internal VisualTreeUpdater visualTreeUpdater { get; }
    internal IStylePropertyAnimationSystem styleAnimationSystem { get; internal set; }
    public ScriptableObject ownerObject { get; protected set; }
    public ContextType contextType { get; protected set; }
    public SavePersistentViewData saveViewData { get; public set; }
    public GetViewDataDictionary getViewDataDictionary { get; public set; }
    public FocusController focusController { get; public set; }
    public EventInterests IMGUIEventInterests { get; public set; }
    private static LoadResourceFunction loadResourceFunc { get; internal set; }
    internal string name { get; internal set; }
    private static TimeMsFunction TimeSinceStartup { get; internal set; }
    public int IMGUIContainersCount { get; public set; }
    public IMGUIContainer rootIMGUIContainer { get; public set; }
    internal UInt32 version { get; }
    internal UInt32 repaintVersion { get; }
    internal UInt32 hierarchyVersion { get; }
    internal Shader standardShader { get; internal set; }
    public AtlasBase atlas { get; public set; }
    public Panel(ScriptableObject ownerObject, ContextType contextType, EventDispatcher dispatcher);
    private static Panel();
    public sealed virtual VisualElement get_visualTree();
    [CompilerGeneratedAttribute]
public sealed virtual EventDispatcher get_dispatcher();
    [CompilerGeneratedAttribute]
public sealed virtual void set_dispatcher(EventDispatcher value);
    public TimerEventScheduler get_timerEventScheduler();
    internal virtual IScheduler get_scheduler();
    internal VisualTreeUpdater get_visualTreeUpdater();
    internal virtual IStylePropertyAnimationSystem get_styleAnimationSystem();
    internal virtual void set_styleAnimationSystem(IStylePropertyAnimationSystem value);
    [CompilerGeneratedAttribute]
public virtual ScriptableObject get_ownerObject();
    [CompilerGeneratedAttribute]
protected virtual void set_ownerObject(ScriptableObject value);
    [CompilerGeneratedAttribute]
public virtual ContextType get_contextType();
    [CompilerGeneratedAttribute]
protected virtual void set_contextType(ContextType value);
    [CompilerGeneratedAttribute]
public virtual SavePersistentViewData get_saveViewData();
    [CompilerGeneratedAttribute]
public virtual void set_saveViewData(SavePersistentViewData value);
    [CompilerGeneratedAttribute]
public virtual GetViewDataDictionary get_getViewDataDictionary();
    [CompilerGeneratedAttribute]
public virtual void set_getViewDataDictionary(GetViewDataDictionary value);
    [CompilerGeneratedAttribute]
public sealed virtual FocusController get_focusController();
    [CompilerGeneratedAttribute]
public sealed virtual void set_focusController(FocusController value);
    [CompilerGeneratedAttribute]
public virtual EventInterests get_IMGUIEventInterests();
    [CompilerGeneratedAttribute]
public virtual void set_IMGUIEventInterests(EventInterests value);
    [CompilerGeneratedAttribute]
private static LoadResourceFunction get_loadResourceFunc();
    [CompilerGeneratedAttribute]
internal static void set_loadResourceFunc(LoadResourceFunction value);
    internal static Object LoadResource(string pathName, Type type, float dpiScaling);
    internal void Focus();
    internal void Blur();
    public virtual void ValidateFocus();
    internal string get_name();
    internal void set_name(string value);
    private void CreateMarkers();
    [CompilerGeneratedAttribute]
private static TimeMsFunction get_TimeSinceStartup();
    [CompilerGeneratedAttribute]
internal static void set_TimeSinceStartup(TimeMsFunction value);
    [CompilerGeneratedAttribute]
public virtual int get_IMGUIContainersCount();
    [CompilerGeneratedAttribute]
public virtual void set_IMGUIContainersCount(int value);
    [CompilerGeneratedAttribute]
public virtual IMGUIContainer get_rootIMGUIContainer();
    [CompilerGeneratedAttribute]
public virtual void set_rootIMGUIContainer(IMGUIContainer value);
    internal virtual UInt32 get_version();
    internal virtual UInt32 get_repaintVersion();
    internal virtual UInt32 get_hierarchyVersion();
    internal virtual Shader get_standardShader();
    internal virtual void set_standardShader(Shader value);
    public virtual AtlasBase get_atlas();
    public virtual void set_atlas(AtlasBase value);
    internal static Panel CreateEditorPanel(ScriptableObject ownerObject);
    protected virtual void Dispose(bool disposing);
    public static long TimeSinceStartupMs();
    internal static long DefaultTimeSinceStartupMs();
    internal static VisualElement PickAllWithoutValidatingLayout(VisualElement root, Vector2 point);
    private static VisualElement PickAll(VisualElement root, Vector2 point, List`1<VisualElement> picked, bool includeIgnoredElement);
    private static VisualElement PerformPick(VisualElement root, Vector2 point, List`1<VisualElement> picked, bool includeIgnoredElement);
    public virtual VisualElement PickAll(Vector2 point, List`1<VisualElement> picked);
    public virtual VisualElement Pick(Vector2 point);
    public virtual void ValidateLayout();
    public virtual void UpdateAnimations();
    public virtual void UpdateBindings();
    public virtual void ApplyStyles();
    private void UpdateForRepaint();
    internal void UpdateWithoutRepaint();
    [CompilerGeneratedAttribute]
internal static void add_beforeAnyRepaint(Action`1<Panel> value);
    [CompilerGeneratedAttribute]
internal static void remove_beforeAnyRepaint(Action`1<Panel> value);
    public virtual void Repaint(Event e);
    internal virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
    internal virtual void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase);
    internal virtual IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase);
    [CompilerGeneratedAttribute]
internal static Vector2Int <Pick>g__PixelOf|101_0(Vector2 p);
}
[EventCategoryAttribute("11")]
public abstract class UnityEngine.UIElements.PanelChangedEventBase`1 : EventBase`1<T> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPanel <originPanel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPanel <destinationPanel>k__BackingField;
    public IPanel originPanel { get; private set; }
    public IPanel destinationPanel { get; private set; }
    [CompilerGeneratedAttribute]
public IPanel get_originPanel();
    [CompilerGeneratedAttribute]
private void set_originPanel(IPanel value);
    [CompilerGeneratedAttribute]
public IPanel get_destinationPanel();
    [CompilerGeneratedAttribute]
private void set_destinationPanel(IPanel value);
    protected virtual void Init();
    private void LocalInit();
    public static T GetPooled(IPanel originPanel, IPanel destinationPanel);
}
internal enum UnityEngine.UIElements.PanelClearFlags : Enum {
    public int value__;
    public static PanelClearFlags None;
    public static PanelClearFlags Color;
    public static PanelClearFlags Depth;
    public static PanelClearFlags All;
}
internal class UnityEngine.UIElements.PanelClearSettings : ValueType {
    public bool clearDepthStencil;
    public bool clearColor;
    public Color color;
}
public enum UnityEngine.UIElements.PanelScaleMode : Enum {
    public int value__;
    public static PanelScaleMode ConstantPixelSize;
    public static PanelScaleMode ConstantPhysicalSize;
    public static PanelScaleMode ScaleWithScreenSize;
}
public enum UnityEngine.UIElements.PanelScreenMatchMode : Enum {
    public int value__;
    public static PanelScreenMatchMode MatchWidthOrHeight;
    public static PanelScreenMatchMode Shrink;
    public static PanelScreenMatchMode Expand;
}
[HelpURLAttribute("UIE-Runtime-Panel-Settings")]
public class UnityEngine.UIElements.PanelSettings : ScriptableObject {
    private static int k_DefaultSortingOrder;
    private static float k_DefaultScaleValue;
    internal static string k_DefaultStyleSheetPath;
    [SerializeField]
private ThemeStyleSheet themeUss;
    [SerializeField]
private RenderTexture m_TargetTexture;
    [SerializeField]
private PanelScaleMode m_ScaleMode;
    [SerializeField]
private float m_ReferenceSpritePixelsPerUnit;
    [SerializeField]
private float m_Scale;
    private static float DefaultDpi;
    [SerializeField]
private float m_ReferenceDpi;
    [SerializeField]
private float m_FallbackDpi;
    [SerializeField]
private Vector2Int m_ReferenceResolution;
    [SerializeField]
private PanelScreenMatchMode m_ScreenMatchMode;
    [SerializeField]
[RangeAttribute("0", "1")]
private float m_Match;
    [SerializeField]
private float m_SortingOrder;
    [SerializeField]
private int m_TargetDisplay;
    [SerializeField]
private bool m_ClearDepthStencil;
    [SerializeField]
private bool m_ClearColor;
    [SerializeField]
private Color m_ColorClearValue;
    private RuntimePanelAccess m_PanelAccess;
    internal UIDocumentList m_AttachedUIDocumentsList;
    [HideInInspector]
[SerializeField]
private DynamicAtlasSettings m_DynamicAtlasSettings;
    [SerializeField]
[HideInInspector]
private Shader m_AtlasBlitShader;
    [SerializeField]
[HideInInspector]
private Shader m_RuntimeShader;
    [SerializeField]
[HideInInspector]
private Shader m_RuntimeWorldShader;
    [SerializeField]
public PanelTextSettings textSettings;
    private Rect m_TargetRect;
    private float m_ResolvedScale;
    private StyleSheet m_OldThemeUss;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private float <ScreenDPI>k__BackingField;
    private Func`2<Vector2, Vector2> m_AssignedScreenToPanel;
    public ThemeStyleSheet themeStyleSheet { get; public set; }
    public RenderTexture targetTexture { get; public set; }
    public PanelScaleMode scaleMode { get; public set; }
    public float referenceSpritePixelsPerUnit { get; public set; }
    public float scale { get; public set; }
    public float referenceDpi { get; public set; }
    public float fallbackDpi { get; public set; }
    public Vector2Int referenceResolution { get; public set; }
    public PanelScreenMatchMode screenMatchMode { get; public set; }
    public float match { get; public set; }
    public float sortingOrder { get; public set; }
    public int targetDisplay { get; public set; }
    public bool clearDepthStencil { get; public set; }
    public float depthClearValue { get; }
    public bool clearColor { get; public set; }
    public Color colorClearValue { get; public set; }
    internal BaseRuntimePanel panel { get; }
    internal bool isInitialized { get; }
    internal VisualElement visualTree { get; }
    public DynamicAtlasSettings dynamicAtlasSettings { get; public set; }
    private float ScreenDPI { get; private set; }
    public ThemeStyleSheet get_themeStyleSheet();
    public void set_themeStyleSheet(ThemeStyleSheet value);
    public RenderTexture get_targetTexture();
    public void set_targetTexture(RenderTexture value);
    public PanelScaleMode get_scaleMode();
    public void set_scaleMode(PanelScaleMode value);
    public float get_referenceSpritePixelsPerUnit();
    public void set_referenceSpritePixelsPerUnit(float value);
    public float get_scale();
    public void set_scale(float value);
    public float get_referenceDpi();
    public void set_referenceDpi(float value);
    public float get_fallbackDpi();
    public void set_fallbackDpi(float value);
    public Vector2Int get_referenceResolution();
    public void set_referenceResolution(Vector2Int value);
    public PanelScreenMatchMode get_screenMatchMode();
    public void set_screenMatchMode(PanelScreenMatchMode value);
    public float get_match();
    public void set_match(float value);
    public float get_sortingOrder();
    public void set_sortingOrder(float value);
    internal void ApplySortingOrder();
    public int get_targetDisplay();
    public void set_targetDisplay(int value);
    public bool get_clearDepthStencil();
    public void set_clearDepthStencil(bool value);
    public float get_depthClearValue();
    public bool get_clearColor();
    public void set_clearColor(bool value);
    public Color get_colorClearValue();
    public void set_colorClearValue(Color value);
    internal BaseRuntimePanel get_panel();
    internal bool get_isInitialized();
    internal VisualElement get_visualTree();
    public DynamicAtlasSettings get_dynamicAtlasSettings();
    public void set_dynamicAtlasSettings(DynamicAtlasSettings value);
    private void Reset();
    private void OnEnable();
    private void OnDisable();
    internal void DisposePanel();
    [CompilerGeneratedAttribute]
private float get_ScreenDPI();
    [CompilerGeneratedAttribute]
private void set_ScreenDPI(float value);
    internal void UpdateScreenDPI();
    private void ApplyThemeStyleSheet(VisualElement root);
    private void InitializeShaders();
    internal void ApplyPanelSettings();
    public void SetScreenToPanelSpaceFunction(Func`2<Vector2, Vector2> screentoPanelSpaceFunction);
    internal float ResolveScale(Rect targetRect, float screenDpi);
    internal Rect GetDisplayRect();
    internal void AttachAndInsertUIDocumentToVisualTree(UIDocument uiDocument);
    internal void DetachUIDocument(UIDocument uiDocument);
}
public class UnityEngine.UIElements.PanelTextSettings : TextSettings {
    private static PanelTextSettings s_DefaultPanelTextSettings;
    internal static Func`2<string, Object> EditorGUIUtilityLoad;
    internal static Func`1<SystemLanguage> GetCurrentLanguage;
    internal static string s_DefaultEditorPanelTextSettingPath;
    internal static PanelTextSettings defaultPanelTextSettings { get; }
    private static PanelTextSettings();
    internal static PanelTextSettings get_defaultPanelTextSettings();
    internal static void UpdateLocalizationFontAsset();
    internal FontAsset GetCachedFontAsset(Font font);
}
public enum UnityEngine.UIElements.PenButton : Enum {
    public int value__;
    public static PenButton PenContact;
    public static PenButton PenBarrel;
    public static PenButton PenEraser;
}
public enum UnityEngine.UIElements.PickingMode : Enum {
    public int value__;
    public static PickingMode Position;
    public static PickingMode Ignore;
}
public class UnityEngine.UIElements.PointerCancelEvent : PointerEventBase`1<PointerCancelEvent> {
    private static PointerCancelEvent();
    protected virtual void Init();
    private void LocalInit();
    protected internal virtual void PostDispatch(IPanel panel);
}
internal class UnityEngine.UIElements.PointerCaptureDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public sealed virtual void DispatchEvent(EventBase evt, IPanel panel);
}
public class UnityEngine.UIElements.PointerCaptureEvent : PointerCaptureEventBase`1<PointerCaptureEvent> {
    private static PointerCaptureEvent();
}
[EventCategoryAttribute("1")]
public abstract class UnityEngine.UIElements.PointerCaptureEventBase`1 : EventBase`1<T> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEventHandler <relatedTarget>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <pointerId>k__BackingField;
    public IEventHandler relatedTarget { get; private set; }
    public int pointerId { get; private set; }
    [CompilerGeneratedAttribute]
public IEventHandler get_relatedTarget();
    [CompilerGeneratedAttribute]
private void set_relatedTarget(IEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_pointerId();
    [CompilerGeneratedAttribute]
private void set_pointerId(int value);
    protected virtual void Init();
    private void LocalInit();
    public static T GetPooled(IEventHandler target, IEventHandler relatedTarget, int pointerId);
}
[ExtensionAttribute]
public static class UnityEngine.UIElements.PointerCaptureHelper : object {
    private static PointerDispatchState GetStateFor(IEventHandler handler);
    [ExtensionAttribute]
public static bool HasPointerCapture(IEventHandler handler, int pointerId);
    [ExtensionAttribute]
public static void CapturePointer(IEventHandler handler, int pointerId);
    [ExtensionAttribute]
public static void ReleasePointer(IEventHandler handler, int pointerId);
    [ExtensionAttribute]
public static IEventHandler GetCapturingElement(IPanel panel, int pointerId);
    [ExtensionAttribute]
public static void ReleasePointer(IPanel panel, int pointerId);
    [ExtensionAttribute]
internal static void ActivateCompatibilityMouseEvents(IPanel panel, int pointerId);
    [ExtensionAttribute]
internal static void PreventCompatibilityMouseEvents(IPanel panel, int pointerId);
    [ExtensionAttribute]
internal static bool ShouldSendCompatibilityMouseEvents(IPanel panel, IPointerEvent evt);
    [ExtensionAttribute]
internal static void ProcessPointerCapture(IPanel panel, int pointerId);
    [ExtensionAttribute]
internal static void ResetPointerDispatchState(IPanel panel);
}
public class UnityEngine.UIElements.PointerCaptureOutEvent : PointerCaptureEventBase`1<PointerCaptureOutEvent> {
    private static PointerCaptureOutEvent();
}
internal static class UnityEngine.UIElements.PointerDeviceState : object {
    private static PointerLocation[] s_PlayerPointerLocations;
    private static Int32[] s_PressedButtons;
    private static IPanel[] s_PlayerPanelWithSoftPointerCapture;
    private static PointerDeviceState();
    internal static void Reset();
    internal static void RemovePanelData(IPanel panel);
    public static void SavePointerPosition(int pointerId, Vector2 position, IPanel panel, ContextType contextType);
    public static void PressButton(int pointerId, int buttonId);
    public static void ReleaseButton(int pointerId, int buttonId);
    public static void ReleaseAllButtons(int pointerId);
    public static Vector2 GetPointerPosition(int pointerId, ContextType contextType);
    public static IPanel GetPanel(int pointerId, ContextType contextType);
    private static bool HasFlagFast(LocationFlag flagSet, LocationFlag flag);
    public static bool HasLocationFlag(int pointerId, ContextType contextType, LocationFlag flag);
    public static int GetPressedButtons(int pointerId);
    internal static bool HasAdditionalPressedButtons(int pointerId, int exceptButtonId);
    internal static void SetPlayerPanelWithSoftPointerCapture(int pointerId, IPanel panel);
    internal static IPanel GetPlayerPanelWithSoftPointerCapture(int pointerId);
}
internal class UnityEngine.UIElements.PointerDispatchState : object {
    private IEventHandler[] m_PendingPointerCapture;
    private IEventHandler[] m_PointerCapture;
    private Boolean[] m_ShouldSendCompatibilityMouseEvents;
    internal void Reset();
    public IEventHandler GetCapturingElement(int pointerId);
    public bool HasPointerCapture(IEventHandler handler, int pointerId);
    public void CapturePointer(IEventHandler handler, int pointerId);
    public void ReleasePointer(int pointerId);
    public void ReleasePointer(IEventHandler handler, int pointerId);
    public void ProcessPointerCapture(int pointerId);
    public void ActivateCompatibilityMouseEvents(int pointerId);
    public void PreventCompatibilityMouseEvents(int pointerId);
    public bool ShouldSendCompatibilityMouseEvents(IPointerEvent evt);
}
public class UnityEngine.UIElements.PointerDownEvent : PointerEventBase`1<PointerDownEvent> {
    private static PointerDownEvent();
    protected virtual void Init();
    private void LocalInit();
    protected internal virtual void PostDispatch(IPanel panel);
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.PointerEnterEvent : PointerEventBase`1<PointerEnterEvent> {
    private static PointerEnterEvent();
    protected virtual void Init();
    private void LocalInit();
}
[EventCategoryAttribute("1")]
public abstract class UnityEngine.UIElements.PointerEventBase`1 : EventBase`1<T> {
    private static float k_DefaultButtonPressure;
    private bool m_AltitudeNeedsConversion;
    private bool m_AzimuthNeedsConversion;
    private float m_AltitudeAngle;
    private float m_AzimuthAngle;
    private bool m_TiltNeeded;
    private Vector2 m_Tilt;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <pointerId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <pointerType>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <isPrimary>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <button>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <pressedButtons>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector3 <position>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector3 <localPosition>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Vector3 <deltaPosition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <deltaTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <clickCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <pressure>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private float <tangentialPressure>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private float <twist>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private PenStatus <penStatus>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <radius>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <radiusVariance>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventModifiers <modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UnityEngine.UIElements.IPointerEventInternal.triggeredByOS>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UnityEngine.UIElements.IPointerEventInternal.recomputeTopElementUnderPointer>k__BackingField;
    public int pointerId { get; protected set; }
    public string pointerType { get; protected set; }
    public bool isPrimary { get; protected set; }
    public int button { get; protected set; }
    public int pressedButtons { get; protected set; }
    public Vector3 position { get; protected set; }
    public Vector3 localPosition { get; protected set; }
    public Vector3 deltaPosition { get; protected set; }
    public float deltaTime { get; protected set; }
    public int clickCount { get; protected set; }
    public float pressure { get; protected set; }
    public float tangentialPressure { get; protected set; }
    public float altitudeAngle { get; protected set; }
    public float azimuthAngle { get; protected set; }
    public float twist { get; protected set; }
    public Vector2 tilt { get; protected set; }
    public PenStatus penStatus { get; protected set; }
    public Vector2 radius { get; protected set; }
    public Vector2 radiusVariance { get; protected set; }
    public EventModifiers modifiers { get; protected set; }
    public bool shiftKey { get; }
    public bool ctrlKey { get; }
    public bool commandKey { get; }
    public bool altKey { get; }
    public bool actionKey { get; }
    private bool UnityEngine.UIElements.IPointerEventInternal.triggeredByOS { get; private set; }
    private bool UnityEngine.UIElements.IPointerEventInternal.recomputeTopElementUnderPointer { get; private set; }
    public IEventHandler currentTarget { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_pointerId();
    [CompilerGeneratedAttribute]
protected void set_pointerId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_pointerType();
    [CompilerGeneratedAttribute]
protected void set_pointerType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_isPrimary();
    [CompilerGeneratedAttribute]
protected void set_isPrimary(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_button();
    [CompilerGeneratedAttribute]
protected void set_button(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_pressedButtons();
    [CompilerGeneratedAttribute]
protected void set_pressedButtons(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_position();
    [CompilerGeneratedAttribute]
protected void set_position(Vector3 value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_localPosition();
    [CompilerGeneratedAttribute]
protected void set_localPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_deltaPosition();
    [CompilerGeneratedAttribute]
protected void set_deltaPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_deltaTime();
    [CompilerGeneratedAttribute]
protected void set_deltaTime(float value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_clickCount();
    [CompilerGeneratedAttribute]
protected void set_clickCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_pressure();
    [CompilerGeneratedAttribute]
protected void set_pressure(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_tangentialPressure();
    [CompilerGeneratedAttribute]
protected void set_tangentialPressure(float value);
    public sealed virtual float get_altitudeAngle();
    protected void set_altitudeAngle(float value);
    public sealed virtual float get_azimuthAngle();
    protected void set_azimuthAngle(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_twist();
    [CompilerGeneratedAttribute]
protected void set_twist(float value);
    public sealed virtual Vector2 get_tilt();
    protected void set_tilt(Vector2 value);
    [CompilerGeneratedAttribute]
public sealed virtual PenStatus get_penStatus();
    [CompilerGeneratedAttribute]
protected void set_penStatus(PenStatus value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector2 get_radius();
    [CompilerGeneratedAttribute]
protected void set_radius(Vector2 value);
    [CompilerGeneratedAttribute]
public sealed virtual Vector2 get_radiusVariance();
    [CompilerGeneratedAttribute]
protected void set_radiusVariance(Vector2 value);
    [CompilerGeneratedAttribute]
public sealed virtual EventModifiers get_modifiers();
    [CompilerGeneratedAttribute]
protected void set_modifiers(EventModifiers value);
    public sealed virtual bool get_shiftKey();
    public sealed virtual bool get_ctrlKey();
    public sealed virtual bool get_commandKey();
    public sealed virtual bool get_altKey();
    public sealed virtual bool get_actionKey();
    [CompilerGeneratedAttribute]
private sealed virtual override bool UnityEngine.UIElements.IPointerEventInternal.get_triggeredByOS();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.IPointerEventInternal.set_triggeredByOS(bool value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool UnityEngine.UIElements.IPointerEventInternal.get_recomputeTopElementUnderPointer();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.IPointerEventInternal.set_recomputeTopElementUnderPointer(bool value);
    protected virtual void Init();
    private void LocalInit();
    public virtual IEventHandler get_currentTarget();
    internal virtual void set_currentTarget(IEventHandler value);
    private static bool IsMouse(Event systemEvent);
    private static bool IsTouch(Event systemEvent);
    private static float TiltToAzimuth(Vector2 tilt);
    private static Vector2 AzimuthAndAlitutudeToTilt(float altitude, float azimuth);
    private static float TiltToAltitude(Vector2 tilt);
    public static T GetPooled(Event systemEvent);
    internal static T GetPooled(EventType eventType, Vector3 mousePosition, Vector2 delta, int button, int clickCount, EventModifiers modifiers);
    public static T GetPooled(Touch touch, EventModifiers modifiers);
    public static T GetPooled(PenData pen, EventModifiers modifiers);
    internal static T GetPooled(IPointerEvent triggerEvent, Vector2 position, int pointerId);
    public static T GetPooled(IPointerEvent triggerEvent);
    protected internal virtual void PreDispatch(IPanel panel);
    protected internal virtual void PostDispatch(IPanel panel);
}
internal class UnityEngine.UIElements.PointerEventDispatchingStrategy : object {
    public sealed virtual bool CanDispatchEvent(EventBase evt);
    public virtual void DispatchEvent(EventBase evt, IPanel panel);
    private static void SendEventToTarget(EventBase evt, IPanel panel);
    private static void SetBestTargetForEvent(EventBase evt, IPanel panel);
    private static void UpdateElementUnderPointer(EventBase evt, IPanel panel, VisualElement& elementUnderPointer);
}
internal static class UnityEngine.UIElements.PointerEventHelper : object {
    public static EventBase GetPooled(EventType eventType, Vector3 mousePosition, Vector2 delta, int button, int clickCount, EventModifiers modifiers);
}
internal static class UnityEngine.UIElements.PointerEventsHelper : object {
    internal static void SendEnterLeave(VisualElement previousTopElementUnderPointer, VisualElement currentTopElementUnderPointer, IPointerEvent triggerEvent, Vector2 position, int pointerId);
    internal static void SendOverOut(VisualElement previousTopElementUnderPointer, VisualElement currentTopElementUnderPointer, IPointerEvent triggerEvent, Vector2 position, int pointerId);
}
public static class UnityEngine.UIElements.PointerId : object {
    public static int maxPointers;
    public static int invalidPointerId;
    public static int mousePointerId;
    public static int touchPointerIdBase;
    public static int touchPointerCount;
    public static int penPointerIdBase;
    public static int penPointerCount;
    internal static Int32[] hoveringPointers;
    private static PointerId();
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.PointerLeaveEvent : PointerEventBase`1<PointerLeaveEvent> {
    private static PointerLeaveEvent();
    protected virtual void Init();
    private void LocalInit();
}
public abstract class UnityEngine.UIElements.PointerManipulator : MouseManipulator {
    private int m_CurrentPointerId;
    protected bool CanStartManipulation(IPointerEvent e);
    protected bool CanStopManipulation(IPointerEvent e);
}
[EventCategoryAttribute("2")]
public class UnityEngine.UIElements.PointerMoveEvent : PointerEventBase`1<PointerMoveEvent> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <isHandledByDraggable>k__BackingField;
    internal bool isHandledByDraggable { get; internal set; }
    private static PointerMoveEvent();
    [CompilerGeneratedAttribute]
internal bool get_isHandledByDraggable();
    [CompilerGeneratedAttribute]
internal void set_isHandledByDraggable(bool value);
    protected virtual void Init();
    private void LocalInit();
    protected internal virtual void PostDispatch(IPanel panel);
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.PointerOutEvent : PointerEventBase`1<PointerOutEvent> {
    private static PointerOutEvent();
}
[EventCategoryAttribute("3")]
public class UnityEngine.UIElements.PointerOverEvent : PointerEventBase`1<PointerOverEvent> {
    private static PointerOverEvent();
}
public class UnityEngine.UIElements.PointerStationaryEvent : PointerEventBase`1<PointerStationaryEvent> {
    private static PointerStationaryEvent();
    protected virtual void Init();
    private void LocalInit();
}
public static class UnityEngine.UIElements.PointerType : object {
    public static string mouse;
    public static string touch;
    public static string pen;
    public static string unknown;
    private static PointerType();
    internal static string GetPointerType(int pointerId);
    internal static bool IsDirectManipulationDevice(string pointerType);
}
public class UnityEngine.UIElements.PointerUpEvent : PointerEventBase`1<PointerUpEvent> {
    private static PointerUpEvent();
    protected virtual void Init();
    private void LocalInit();
    protected internal virtual void PostDispatch(IPanel panel);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.PopupField`1 : BasePopupField`2<T, T> {
    internal static int kPopupFieldDefaultIndex;
    private int m_Index;
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public Func`2<T, string> formatSelectedValueCallback { get; public set; }
    public Func`2<T, string> formatListItemCallback { get; public set; }
    public T value { get; public set; }
    public int index { get; public set; }
    public PopupField`1(string label);
    public PopupField`1(List`1<T> choices, T defaultValue, Func`2<T, string> formatSelectedValueCallback, Func`2<T, string> formatListItemCallback);
    public PopupField`1(string label, List`1<T> choices, T defaultValue, Func`2<T, string> formatSelectedValueCallback, Func`2<T, string> formatListItemCallback);
    public PopupField`1(List`1<T> choices, int defaultIndex, Func`2<T, string> formatSelectedValueCallback, Func`2<T, string> formatListItemCallback);
    public PopupField`1(string label, List`1<T> choices, int defaultIndex, Func`2<T, string> formatSelectedValueCallback, Func`2<T, string> formatListItemCallback);
    private static PopupField`1();
    public virtual Func`2<T, string> get_formatSelectedValueCallback();
    public virtual void set_formatSelectedValueCallback(Func`2<T, string> value);
    public virtual Func`2<T, string> get_formatListItemCallback();
    public virtual void set_formatListItemCallback(Func`2<T, string> value);
    internal virtual string GetValueToDisplay();
    internal virtual string GetListItemToDisplay(T value);
    public virtual T get_value();
    public virtual void set_value(T value);
    public virtual void SetValueWithoutNotify(T newValue);
    public int get_index();
    public void set_index(int value);
    internal virtual void AddMenuItems(IGenericMenu menu);
    internal void SetIndexWithoutNotify(int index);
    private void ChangeValueFromMenu(T menuItem);
}
public class UnityEngine.UIElements.PopupWindow : TextElement {
    private VisualElement m_ContentContainer;
    public static string ussClassName;
    public static string contentUssClassName;
    public VisualElement contentContainer { get; }
    private static PopupWindow();
    public virtual VisualElement get_contentContainer();
}
public enum UnityEngine.UIElements.Position : Enum {
    public int value__;
    public static Position Relative;
    public static Position Absolute;
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.ProgressBar : AbstractProgressBar {
}
internal static class UnityEngine.UIElements.ProjectionUtils : object {
    public static Matrix4x4 Ortho(float left, float right, float bottom, float top, float near, float far);
}
internal class UnityEngine.UIElements.PropagationPaths : object {
    private static ObjectPool`1<PropagationPaths> s_Pool;
    public List`1<VisualElement> trickleDownPath;
    public List`1<VisualElement> targetElements;
    public List`1<VisualElement> bubbleUpPath;
    private static int k_DefaultPropagationDepth;
    private static int k_DefaultTargetCount;
    public PropagationPaths(PropagationPaths paths);
    private static PropagationPaths();
    internal static PropagationPaths Copy(PropagationPaths paths);
    public static PropagationPaths Build(VisualElement elem, EventBase evt);
    public void Release();
}
public enum UnityEngine.UIElements.PropagationPhase : Enum {
    public int value__;
    public static PropagationPhase None;
    public static PropagationPhase TrickleDown;
    public static PropagationPhase AtTarget;
    public static PropagationPhase DefaultActionAtTarget;
    public static PropagationPhase BubbleUp;
    public static PropagationPhase DefaultAction;
}
[FlagsAttribute]
internal enum UnityEngine.UIElements.PseudoStates : Enum {
    public int value__;
    public static PseudoStates Active;
    public static PseudoStates Hover;
    public static PseudoStates Checked;
    public static PseudoStates Disabled;
    public static PseudoStates Focus;
    public static PseudoStates Root;
}
public class UnityEngine.UIElements.RadioButton : BaseBoolField {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public static string checkmarkBackgroundUssClassName;
    public static string checkmarkUssClassName;
    public static string textUssClassName;
    private VisualElement m_CheckmarkBackground;
    public bool value { get; public set; }
    public RadioButton(string label);
    private static RadioButton();
    public virtual bool get_value();
    public virtual void set_value(bool value);
    private void OnOptionAttachToPanel(AttachToPanelEvent evt);
    private void OnOptionDetachFromPanel(DetachFromPanelEvent evt);
    protected virtual void InitLabel();
    protected virtual void ToggleValue();
    [ObsoleteAttribute("[UI Toolkit] Please set the value property instead.", "False")]
public void SetSelected(bool selected);
    private sealed virtual override void UnityEngine.UIElements.IGroupBoxOption.SetSelected(bool selected);
    public virtual void SetValueWithoutNotify(bool newValue);
    private void UpdateCheckmark();
    protected virtual void UpdateMixedValueContent();
}
public class UnityEngine.UIElements.RadioButtonGroup : BaseField`1<int> {
    public static string ussClassName;
    public static string containerUssClassName;
    private List`1<RadioButton> m_RadioButtons;
    private EventCallback`1<ChangeEvent`1<bool>> m_RadioButtonValueChangedCallback;
    private VisualElement m_RadioButtonContainer;
    public IEnumerable`1<string> choices { get; public set; }
    public VisualElement contentContainer { get; }
    public RadioButtonGroup(string label, List`1<string> radioButtonChoices);
    private static RadioButtonGroup();
    [IteratorStateMachineAttribute("UnityEngine.UIElements.RadioButtonGroup/<get_choices>d__7")]
public IEnumerable`1<string> get_choices();
    public void set_choices(IEnumerable`1<string> value);
    public virtual VisualElement get_contentContainer();
    private void RadioButtonValueChangedCallback(ChangeEvent`1<bool> evt);
    public virtual void SetValueWithoutNotify(int newValue);
    private void UpdateRadioButtons();
    private sealed virtual override void UnityEngine.UIElements.IGroupBox.OnOptionAdded(IGroupBoxOption option);
    private sealed virtual override void UnityEngine.UIElements.IGroupBox.OnOptionRemoved(IGroupBoxOption option);
}
internal class UnityEngine.UIElements.RareData : ValueType {
    public Cursor cursor;
    public TextOverflow textOverflow;
    public Color unityBackgroundImageTintColor;
    public OverflowClipBox unityOverflowClipBox;
    public int unitySliceBottom;
    public int unitySliceLeft;
    public int unitySliceRight;
    public float unitySliceScale;
    public int unitySliceTop;
    public TextOverflowPosition unityTextOverflowPosition;
    public sealed virtual RareData Copy();
    public sealed virtual void CopyFrom(RareData& other);
    public static bool op_Equality(RareData lhs, RareData rhs);
    public static bool op_Inequality(RareData lhs, RareData rhs);
    public sealed virtual bool Equals(RareData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.RectField : BaseCompositeField`3<Rect, FloatField, float> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public RectField(string label);
    private static RectField();
    internal virtual FieldDescription[] DescribeFields();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.RectIntField : BaseCompositeField`3<RectInt, IntegerField, int> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public RectIntField(string label);
    private static RectIntField();
    internal virtual FieldDescription[] DescribeFields();
}
internal class UnityEngine.UIElements.RegisterSerializedPropertyBindCallback`3 : MulticastDelegate {
    public RegisterSerializedPropertyBindCallback`3(object object, IntPtr method);
    public virtual void Invoke(BaseCompositeField`3<TValueType, TField, TFieldValue> compositeField, TField field);
    public virtual IAsyncResult BeginInvoke(BaseCompositeField`3<TValueType, TField, TFieldValue> compositeField, TField field, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
internal enum UnityEngine.UIElements.RenderHints : Enum {
    public int value__;
    public static RenderHints None;
    public static RenderHints GroupTransform;
    public static RenderHints BoneTransform;
    public static RenderHints ClipWithScissors;
    public static RenderHints MaskContainer;
    public static RenderHints DynamicColor;
    public static RenderHints DirtyOffset;
    public static RenderHints DirtyGroupTransform;
    public static RenderHints DirtyBoneTransform;
    public static RenderHints DirtyClipWithScissors;
    public static RenderHints DirtyMaskContainer;
    public static RenderHints DirtyDynamicColor;
    public static RenderHints DirtyAll;
}
internal class UnityEngine.UIElements.RepaintData : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Matrix4x4 <currentOffset>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Vector2 <mousePosition>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Rect <currentWorldClip>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Event <repaintEvent>k__BackingField;
    public Matrix4x4 currentOffset { get; public set; }
    public Vector2 mousePosition { get; public set; }
    public Rect currentWorldClip { get; public set; }
    public Event repaintEvent { get; public set; }
    [CompilerGeneratedAttribute]
public Matrix4x4 get_currentOffset();
    [CompilerGeneratedAttribute]
public void set_currentOffset(Matrix4x4 value);
    [CompilerGeneratedAttribute]
public Vector2 get_mousePosition();
    [CompilerGeneratedAttribute]
public void set_mousePosition(Vector2 value);
    [CompilerGeneratedAttribute]
public Rect get_currentWorldClip();
    [CompilerGeneratedAttribute]
public void set_currentWorldClip(Rect value);
    [CompilerGeneratedAttribute]
public Event get_repaintEvent();
    [CompilerGeneratedAttribute]
public void set_repaintEvent(Event value);
}
public enum UnityEngine.UIElements.Repeat : Enum {
    public int value__;
    public static Repeat NoRepeat;
    public static Repeat Space;
    public static Repeat Round;
    public static Repeat Repeat;
}
public class UnityEngine.UIElements.RepeatButton : TextElement {
    private Clickable m_Clickable;
    public static string ussClassName;
    public RepeatButton(Action clickEvent, long delay, long interval);
    private static RepeatButton();
    public void SetAction(Action clickEvent, long delay, long interval);
    internal void AddAction(Action clickEvent);
}
internal enum UnityEngine.UIElements.RepeatXY : Enum {
    public int value__;
    public static RepeatXY RepeatX;
    public static RepeatXY RepeatY;
}
internal class UnityEngine.UIElements.ReusableCollectionItem : object {
    public static int UndefinedIndex;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <bindableElement>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ValueAnimation`1<StyleValues> <animator>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isDragGhost>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<ReusableCollectionItem> onGeometryChanged;
    protected EventCallback`1<GeometryChangedEvent> m_GeometryChangedEventCallback;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<ReusableCollectionItem> onDestroy;
    public VisualElement rootElement { get; }
    public VisualElement bindableElement { get; protected set; }
    public ValueAnimation`1<StyleValues> animator { get; public set; }
    public int index { get; public set; }
    public int id { get; public set; }
    internal bool isDragGhost { get; private set; }
    public virtual VisualElement get_rootElement();
    [CompilerGeneratedAttribute]
public VisualElement get_bindableElement();
    [CompilerGeneratedAttribute]
protected void set_bindableElement(VisualElement value);
    [CompilerGeneratedAttribute]
public ValueAnimation`1<StyleValues> get_animator();
    [CompilerGeneratedAttribute]
public void set_animator(ValueAnimation`1<StyleValues> value);
    [CompilerGeneratedAttribute]
public int get_index();
    [CompilerGeneratedAttribute]
public void set_index(int value);
    [CompilerGeneratedAttribute]
public int get_id();
    [CompilerGeneratedAttribute]
public void set_id(int value);
    [CompilerGeneratedAttribute]
internal bool get_isDragGhost();
    [CompilerGeneratedAttribute]
private void set_isDragGhost(bool value);
    [CompilerGeneratedAttribute]
public void add_onGeometryChanged(Action`1<ReusableCollectionItem> value);
    [CompilerGeneratedAttribute]
public void remove_onGeometryChanged(Action`1<ReusableCollectionItem> value);
    [CompilerGeneratedAttribute]
internal void add_onDestroy(Action`1<ReusableCollectionItem> value);
    [CompilerGeneratedAttribute]
internal void remove_onDestroy(Action`1<ReusableCollectionItem> value);
    public virtual void Init(VisualElement item);
    public virtual void PreAttachElement();
    public virtual void DetachElement();
    public virtual void DestroyElement();
    public virtual void SetSelected(bool selected);
    public virtual void SetDragGhost(bool dragGhost);
    protected void OnGeometryChanged(GeometryChangedEvent evt);
}
internal class UnityEngine.UIElements.ReusableListViewItem : ReusableCollectionItem {
    private VisualElement m_Container;
    private VisualElement m_DragHandle;
    private VisualElement m_ItemContainer;
    public VisualElement rootElement { get; }
    public virtual VisualElement get_rootElement();
    public void Init(VisualElement item, bool usesAnimatedDragger);
    protected void UpdateHierarchy(VisualElement root, VisualElement item, bool usesAnimatedDragger);
    public void UpdateDragHandle(bool needsDragHandle);
    public virtual void PreAttachElement();
    public virtual void DetachElement();
    public virtual void SetDragGhost(bool dragGhost);
}
internal class UnityEngine.UIElements.ReusableMultiColumnListViewItem : ReusableListViewItem {
    public VisualElement rootElement { get; }
    public virtual VisualElement get_rootElement();
    public virtual void Init(VisualElement item);
    public void Init(VisualElement container, Columns columns, bool usesAnimatedDrag);
}
internal class UnityEngine.UIElements.ReusableMultiColumnTreeViewItem : ReusableTreeViewItem {
    public VisualElement rootElement { get; }
    public virtual VisualElement get_rootElement();
    public virtual void Init(VisualElement item);
    public void Init(VisualElement container, Columns columns);
}
internal class UnityEngine.UIElements.ReusableTreeViewItem : ReusableCollectionItem {
    private Toggle m_Toggle;
    private VisualElement m_Container;
    private VisualElement m_IndentElement;
    private VisualElement m_BindableContainer;
    private VisualElement m_Checkmark;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<PointerUpEvent> onPointerUp;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<ChangeEvent`1<bool>> onToggleValueChanged;
    private int m_Depth;
    private float m_IndentWidth;
    private EventCallback`1<PointerUpEvent> m_PointerUpCallback;
    private EventCallback`1<ChangeEvent`1<bool>> m_ToggleValueChangedCallback;
    private EventCallback`1<GeometryChangedEvent> m_ToggleGeometryChangedCallback;
    public VisualElement rootElement { get; }
    internal float indentWidth { get; }
    public virtual VisualElement get_rootElement();
    [CompilerGeneratedAttribute]
public void add_onPointerUp(Action`1<PointerUpEvent> value);
    [CompilerGeneratedAttribute]
public void remove_onPointerUp(Action`1<PointerUpEvent> value);
    [CompilerGeneratedAttribute]
public void add_onToggleValueChanged(Action`1<ChangeEvent`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_onToggleValueChanged(Action`1<ChangeEvent`1<bool>> value);
    internal float get_indentWidth();
    public virtual void Init(VisualElement item);
    protected void InitExpandHierarchy(VisualElement root, VisualElement item);
    public virtual void PreAttachElement();
    public virtual void DetachElement();
    public void Indent(int depth);
    public void SetExpandedWithoutNotify(bool expanded);
    public void SetToggleVisibility(bool visible);
    private void OnToggleGeometryChanged(GeometryChangedEvent evt);
    private void UpdateIndentLayout();
    private void OnPointerUp(PointerUpEvent evt);
    private void OnToggleValueChanged(ChangeEvent`1<bool> evt);
}
public class UnityEngine.UIElements.Rotate : ValueType {
    private Angle m_Angle;
    private Vector3 m_Axis;
    private bool m_IsNone;
    public Angle angle { get; public set; }
    internal Vector3 axis { get; internal set; }
    internal Rotate(Angle angle, Vector3 axis);
    public Rotate(Angle angle);
    internal static Rotate Initial();
    public static Rotate None();
    public Angle get_angle();
    public void set_angle(Angle value);
    internal Vector3 get_axis();
    internal void set_axis(Vector3 value);
    internal bool IsNone();
    public static bool op_Equality(Rotate lhs, Rotate rhs);
    public static bool op_Inequality(Rotate lhs, Rotate rhs);
    public sealed virtual bool Equals(Rotate other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal Quaternion ToQuaternion();
}
internal class UnityEngine.UIElements.RuleMatcher : ValueType {
    public StyleSheet sheet;
    public StyleComplexSelector complexSelector;
    public RuleMatcher(StyleSheet sheet, StyleComplexSelector complexSelector, int styleSheetIndexInStack);
    public virtual string ToString();
}
internal static class UnityEngine.UIElements.RuntimeEventDispatcher : object {
    public static EventDispatcher Create();
}
internal class UnityEngine.UIElements.RuntimePanel : BaseRuntimePanel {
    internal static EventDispatcher s_EventDispatcher;
    private PanelSettings m_PanelSettings;
    public PanelSettings panelSettings { get; }
    private RuntimePanel(ScriptableObject ownerObject);
    private static RuntimePanel();
    public sealed virtual PanelSettings get_panelSettings();
    public static RuntimePanel Create(ScriptableObject ownerObject);
    public virtual void Update();
    private void OnElementFocus(FocusEvent evt);
}
[ExtensionAttribute]
public static class UnityEngine.UIElements.RuntimePanelUtils : object {
    public static Vector2 ScreenToPanel(IPanel panel, Vector2 screenPosition);
    public static Vector2 CameraTransformWorldToPanel(IPanel panel, Vector3 worldPosition, Camera camera);
    public static Rect CameraTransformWorldToPanelRect(IPanel panel, Vector3 worldPosition, Vector2 worldSize, Camera camera);
    [ExtensionAttribute]
public static void ResetDynamicAtlas(IPanel panel);
    [ExtensionAttribute]
public static void SetTextureDirty(IPanel panel, Texture2D texture);
}
internal class UnityEngine.UIElements.RuntimeUIElementsBridge : UIElementsBridge {
    public virtual void SetWantsMouseJumping(int value);
}
internal class UnityEngine.UIElements.SafeHandleAccess : ValueType {
    private IntPtr m_Handle;
    public SafeHandleAccess(IntPtr ptr);
    public bool IsNull();
    public static IntPtr op_Implicit(SafeHandleAccess a);
}
internal enum UnityEngine.UIElements.Salt : Enum {
    public int value__;
    public static Salt TagNameSalt;
    public static Salt IdSalt;
    public static Salt ClassSalt;
}
internal class UnityEngine.UIElements.SavePersistentViewData : MulticastDelegate {
    public SavePersistentViewData(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class UnityEngine.UIElements.Scale : ValueType {
    private Vector3 m_Scale;
    private bool m_IsNone;
    public Vector3 value { get; public set; }
    public Scale(Vector2 scale);
    public Scale(Vector3 scale);
    internal static Scale Initial();
    public static Scale None();
    public Vector3 get_value();
    public void set_value(Vector3 value);
    internal bool IsNone();
    public static Scale op_Implicit(Vector2 scale);
    public static bool op_Equality(Scale lhs, Scale rhs);
    public static bool op_Inequality(Scale lhs, Scale rhs);
    public sealed virtual bool Equals(Scale other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal abstract class UnityEngine.UIElements.ScheduledItem : object {
    public Func`1<bool> timerUpdateStopCondition;
    public static Func`1<bool> OnceCondition;
    public static Func`1<bool> ForeverCondition;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private long <startMs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <delayMs>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private long <intervalMs>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private long <endTimeMs>k__BackingField;
    public long startMs { get; public set; }
    public long delayMs { get; public set; }
    public long intervalMs { get; public set; }
    public long endTimeMs { get; private set; }
    private static ScheduledItem();
    [CompilerGeneratedAttribute]
public long get_startMs();
    [CompilerGeneratedAttribute]
public void set_startMs(long value);
    [CompilerGeneratedAttribute]
public long get_delayMs();
    [CompilerGeneratedAttribute]
public void set_delayMs(long value);
    [CompilerGeneratedAttribute]
public long get_intervalMs();
    [CompilerGeneratedAttribute]
public void set_intervalMs(long value);
    [CompilerGeneratedAttribute]
public long get_endTimeMs();
    [CompilerGeneratedAttribute]
private void set_endTimeMs(long value);
    protected void ResetStartTime();
    public void SetDuration(long durationMs);
    public abstract virtual void PerformTimerUpdate(TimerState state);
    internal virtual void OnItemUnscheduled();
    public virtual bool ShouldUnschedule();
}
public class UnityEngine.UIElements.Scroller : VisualElement {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<float> valueChanged;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Slider <slider>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RepeatButton <lowButton>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private RepeatButton <highButton>k__BackingField;
    internal static float kDefaultPageSize;
    public static string ussClassName;
    public static string horizontalVariantUssClassName;
    public static string verticalVariantUssClassName;
    public static string sliderUssClassName;
    public static string lowButtonUssClassName;
    public static string highButtonUssClassName;
    public Slider slider { get; private set; }
    public RepeatButton lowButton { get; private set; }
    public RepeatButton highButton { get; private set; }
    public float value { get; public set; }
    public float lowValue { get; public set; }
    public float highValue { get; public set; }
    public SliderDirection direction { get; public set; }
    public Scroller(float lowValue, float highValue, Action`1<float> valueChanged, SliderDirection direction);
    private static Scroller();
    [CompilerGeneratedAttribute]
public void add_valueChanged(Action`1<float> value);
    [CompilerGeneratedAttribute]
public void remove_valueChanged(Action`1<float> value);
    [CompilerGeneratedAttribute]
public Slider get_slider();
    [CompilerGeneratedAttribute]
private void set_slider(Slider value);
    [CompilerGeneratedAttribute]
public RepeatButton get_lowButton();
    [CompilerGeneratedAttribute]
private void set_lowButton(RepeatButton value);
    [CompilerGeneratedAttribute]
public RepeatButton get_highButton();
    [CompilerGeneratedAttribute]
private void set_highButton(RepeatButton value);
    public float get_value();
    public void set_value(float value);
    public float get_lowValue();
    public void set_lowValue(float value);
    public float get_highValue();
    public void set_highValue(float value);
    public SliderDirection get_direction();
    public void set_direction(SliderDirection value);
    public void Adjust(float factor);
    private void OnSliderValueChange(ChangeEvent`1<float> evt);
    public void ScrollPageUp();
    public void ScrollPageDown();
    public void ScrollPageUp(float factor);
    public void ScrollPageDown(float factor);
}
public enum UnityEngine.UIElements.ScrollerVisibility : Enum {
    public int value__;
    public static ScrollerVisibility Auto;
    public static ScrollerVisibility AlwaysVisible;
    public static ScrollerVisibility Hidden;
}
public class UnityEngine.UIElements.ScrollView : VisualElement {
    private static int k_MaxLocalLayoutPassCount;
    private int m_FirstLayoutPass;
    private ScrollerVisibility m_HorizontalScrollerVisibility;
    private ScrollerVisibility m_VerticalScrollerVisibility;
    private static float k_SizeThreshold;
    private VisualElement m_AttachedRootVisualContainer;
    private float m_SingleLineHeight;
    private static string k_SingleLineHeightPropertyName;
    private static float k_ScrollPageOverlapFactor;
    internal static float k_UnsetPageSizeValue;
    internal static float k_MouseWheelScrollSizeDefaultValue;
    internal static float k_MouseWheelScrollSizeUnset;
    internal bool m_MouseWheelScrollSizeIsInline;
    private float m_HorizontalPageSize;
    private float m_VerticalPageSize;
    private float m_MouseWheelScrollSize;
    private static float k_DefaultScrollDecelerationRate;
    private float m_ScrollDecelerationRate;
    private float k_ScaledPixelsPerPointMultiplier;
    private float k_TouchScrollInertiaBaseTimeInterval;
    private static float k_DefaultElasticity;
    private float m_Elasticity;
    private TouchScrollBehavior m_TouchScrollBehavior;
    private NestedInteractionKind m_NestedInteractionKind;
    private static long k_DefaultElasticAnimationInterval;
    private long m_ElasticAnimationIntervalMs;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <contentViewport>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Scroller <horizontalScroller>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Scroller <verticalScroller>k__BackingField;
    private VisualElement m_ContentContainer;
    private VisualElement m_ContentAndVerticalScrollContainer;
    private float previousVerticalTouchScrollTimeStamp;
    private float previousHorizontalTouchScrollTimeStamp;
    private float elapsedTimeSinceLastVerticalTouchScroll;
    private float elapsedTimeSinceLastHorizontalTouchScroll;
    public static string ussClassName;
    public static string viewportUssClassName;
    public static string horizontalVariantViewportUssClassName;
    public static string verticalVariantViewportUssClassName;
    public static string verticalHorizontalVariantViewportUssClassName;
    public static string contentAndVerticalScrollUssClassName;
    public static string contentUssClassName;
    public static string horizontalVariantContentUssClassName;
    public static string verticalVariantContentUssClassName;
    public static string verticalHorizontalVariantContentUssClassName;
    public static string hScrollerUssClassName;
    public static string vScrollerUssClassName;
    public static string horizontalVariantUssClassName;
    public static string verticalVariantUssClassName;
    public static string verticalHorizontalVariantUssClassName;
    public static string scrollVariantUssClassName;
    private ScrollViewMode m_Mode;
    private IVisualElementScheduledItem m_ScheduledLayoutPassResetItem;
    private static float k_VelocityLerpTimeFactor;
    internal static float ScrollThresholdSquared;
    private Vector2 m_StartPosition;
    private Vector2 m_PointerStartPosition;
    private Vector2 m_Velocity;
    private Vector2 m_SpringBackVelocity;
    private Vector2 m_LowBounds;
    private Vector2 m_HighBounds;
    private float m_LastVelocityLerpTime;
    private bool m_StartedMoving;
    private bool m_TouchPointerMoveAllowed;
    private bool m_TouchStoppedVelocity;
    private VisualElement m_CapturedTarget;
    private EventCallback`1<PointerMoveEvent> m_CapturedTargetPointerMoveCallback;
    private EventCallback`1<PointerUpEvent> m_CapturedTargetPointerUpCallback;
    internal IVisualElementScheduledItem m_PostPointerUpAnimation;
    public ScrollerVisibility horizontalScrollerVisibility { get; public set; }
    public ScrollerVisibility verticalScrollerVisibility { get; public set; }
    [ObsoleteAttribute("showHorizontal is obsolete. Use horizontalScrollerVisibility instead")]
public bool showHorizontal { get; public set; }
    [ObsoleteAttribute("showVertical is obsolete. Use verticalScrollerVisibility instead")]
public bool showVertical { get; public set; }
    internal bool needsHorizontal { get; }
    internal bool needsVertical { get; }
    internal bool isVerticalScrollDisplayed { get; }
    internal bool isHorizontalScrollDisplayed { get; }
    public Vector2 scrollOffset { get; public set; }
    public float horizontalPageSize { get; public set; }
    public float verticalPageSize { get; public set; }
    public float mouseWheelScrollSize { get; public set; }
    internal float scrollableWidth { get; }
    internal float scrollableHeight { get; }
    private bool hasInertia { get; }
    public float scrollDecelerationRate { get; public set; }
    public float elasticity { get; public set; }
    public TouchScrollBehavior touchScrollBehavior { get; public set; }
    public NestedInteractionKind nestedInteractionKind { get; public set; }
    public long elasticAnimationIntervalMs { get; public set; }
    public VisualElement contentViewport { get; }
    public Scroller horizontalScroller { get; }
    public Scroller verticalScroller { get; }
    public VisualElement contentContainer { get; }
    public ScrollViewMode mode { get; public set; }
    public ScrollView(ScrollViewMode scrollViewMode);
    private static ScrollView();
    public ScrollerVisibility get_horizontalScrollerVisibility();
    public void set_horizontalScrollerVisibility(ScrollerVisibility value);
    public ScrollerVisibility get_verticalScrollerVisibility();
    public void set_verticalScrollerVisibility(ScrollerVisibility value);
    public bool get_showHorizontal();
    public void set_showHorizontal(bool value);
    public bool get_showVertical();
    public void set_showVertical(bool value);
    internal bool get_needsHorizontal();
    internal bool get_needsVertical();
    internal bool get_isVerticalScrollDisplayed();
    internal bool get_isHorizontalScrollDisplayed();
    public Vector2 get_scrollOffset();
    public void set_scrollOffset(Vector2 value);
    public float get_horizontalPageSize();
    public void set_horizontalPageSize(float value);
    public float get_verticalPageSize();
    public void set_verticalPageSize(float value);
    public float get_mouseWheelScrollSize();
    public void set_mouseWheelScrollSize(float value);
    internal float get_scrollableWidth();
    internal float get_scrollableHeight();
    private bool get_hasInertia();
    public float get_scrollDecelerationRate();
    public void set_scrollDecelerationRate(float value);
    public float get_elasticity();
    public void set_elasticity(float value);
    public TouchScrollBehavior get_touchScrollBehavior();
    public void set_touchScrollBehavior(TouchScrollBehavior value);
    public NestedInteractionKind get_nestedInteractionKind();
    public void set_nestedInteractionKind(NestedInteractionKind value);
    public long get_elasticAnimationIntervalMs();
    public void set_elasticAnimationIntervalMs(long value);
    private void OnHorizontalScrollDragElementChanged(GeometryChangedEvent evt);
    private void OnVerticalScrollDragElementChanged(GeometryChangedEvent evt);
    private void UpdateHorizontalSliderPageSize();
    private void UpdateVerticalSliderPageSize();
    internal void UpdateContentViewTransform();
    public void ScrollTo(VisualElement child);
    private float GetXDeltaOffset(VisualElement child);
    private float GetYDeltaOffset(VisualElement child);
    private float GetDeltaDistance(float viewMin, float viewMax, float childBoundaryMin, float childBoundaryMax);
    [CompilerGeneratedAttribute]
public VisualElement get_contentViewport();
    [CompilerGeneratedAttribute]
public Scroller get_horizontalScroller();
    [CompilerGeneratedAttribute]
public Scroller get_verticalScroller();
    public virtual VisualElement get_contentContainer();
    public ScrollViewMode get_mode();
    public void set_mode(ScrollViewMode value);
    private void SetScrollViewMode(ScrollViewMode mode);
    private void OnAttachToPanel(AttachToPanelEvent evt);
    private void OnDetachFromPanel(DetachFromPanelEvent evt);
    private void OnPointerCapture(PointerCaptureEvent evt);
    private void OnPointerCaptureOut(PointerCaptureOutEvent evt);
    private void OnGeometryChanged(GeometryChangedEvent evt);
    private void ScheduleResetLayoutPass();
    private void ResetLayoutPass();
    private static float ComputeElasticOffset(float deltaPointer, float initialScrollOffset, float lowLimit, float hardLowLimit, float highLimit, float hardHighLimit);
    private void ComputeInitialSpringBackVelocity();
    private void SpringBack();
    internal void ApplyScrollInertia();
    private void PostPointerUpAnimation();
    private void OnPointerDown(PointerDownEvent evt);
    private void OnPointerMove(PointerMoveEvent evt);
    private void OnPointerCancel(PointerCancelEvent evt);
    private void OnPointerUp(PointerUpEvent evt);
    internal void InitTouchScrolling(Vector2 position);
    internal TouchScrollingResult ComputeTouchScrolling(Vector2 position);
    private bool ApplyTouchScrolling(Vector2 newScrollOffset);
    private bool ReleaseScrolling(int pointerId, IEventHandler target);
    private void ExecuteElasticSpringAnimation();
    private void AdjustScrollers();
    internal void UpdateScrollers(bool displayHorizontal, bool displayVertical);
    private void OnScrollersGeometryChanged(GeometryChangedEvent evt);
    private void OnScrollWheel(WheelEvent evt);
    private void OnRootCustomStyleResolved(CustomStyleResolvedEvent evt);
    private void OnRootPointerUp(PointerUpEvent evt);
    private void ReadSingleLineHeight();
    private void UpdateElasticBehaviour();
    [CompilerGeneratedAttribute]
private void <.ctor>b__126_0(float value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__126_1(float value);
}
public enum UnityEngine.UIElements.ScrollViewMode : Enum {
    public int value__;
    public static ScrollViewMode Vertical;
    public static ScrollViewMode Horizontal;
    public static ScrollViewMode VerticalAndHorizontal;
}
public enum UnityEngine.UIElements.SelectionType : Enum {
    public int value__;
    public static SelectionType None;
    public static SelectionType Single;
    public static SelectionType Multiple;
}
internal class UnityEngine.UIElements.SerializedVirtualizationData : object {
    public Vector2 scrollOffset;
    public int firstVisibleIndex;
    public float contentPadding;
    public float contentHeight;
    public int anchoredItemIndex;
    public float anchorOffset;
}
[IsReadOnlyAttribute]
internal class UnityEngine.UIElements.SetupDragAndDropArgs : ValueType {
    public VisualElement draggedElement;
    public IEnumerable`1<int> selectedIds;
    public StartDragArgs startDragArgs;
    internal SetupDragAndDropArgs(VisualElement draggedElement, IEnumerable`1<int> selectedIds, StartDragArgs startDragArgs);
}
public class UnityEngine.UIElements.Slider : BaseSlider`1<float> {
    internal static float kDefaultHighValue;
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public Slider(float start, float end, SliderDirection direction, float pageSize);
    public Slider(string label, float start, float end, SliderDirection direction, float pageSize);
    private static Slider();
    public virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, float startValue);
    internal virtual float SliderLerpUnclamped(float a, float b, float interpolant);
    internal virtual float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue);
    internal virtual float SliderRange();
    internal virtual float ParseStringToValue(string previousValue, string newValue);
    internal virtual void ComputeValueFromKey(SliderKey<float> sliderKey, bool isShift);
}
public enum UnityEngine.UIElements.SliderDirection : Enum {
    public int value__;
    public static SliderDirection Horizontal;
    public static SliderDirection Vertical;
}
public class UnityEngine.UIElements.SliderInt : BaseSlider`1<int> {
    internal static int kDefaultHighValue;
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public float pageSize { get; public set; }
    public SliderInt(int start, int end, SliderDirection direction, float pageSize);
    public SliderInt(string label, int start, int end, SliderDirection direction, float pageSize);
    private static SliderInt();
    public virtual float get_pageSize();
    public virtual void set_pageSize(float value);
    public virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, int startValue);
    internal virtual int SliderLerpUnclamped(int a, int b, float interpolant);
    internal virtual float SliderNormalizeValue(int currentValue, int lowerValue, int higherValue);
    internal virtual int SliderRange();
    internal virtual int ParseStringToValue(string previousValue, string newValue);
    internal virtual void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos);
    internal virtual void ComputeValueFromKey(SliderKey<int> sliderKey, bool isShift);
}
public class UnityEngine.UIElements.SortColumnDescription : object {
    [SerializeField]
private int m_ColumnIndex;
    [SerializeField]
private string m_ColumnName;
    [SerializeField]
private SortDirection m_SortDirection;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Column <column>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<SortColumnDescription> changed;
    public string columnName { get; public set; }
    public int columnIndex { get; public set; }
    public Column column { get; internal set; }
    public SortDirection direction { get; public set; }
    public SortColumnDescription(int columnIndex, SortDirection direction);
    public SortColumnDescription(string columnName, SortDirection direction);
    public string get_columnName();
    public void set_columnName(string value);
    public int get_columnIndex();
    public void set_columnIndex(int value);
    [CompilerGeneratedAttribute]
public Column get_column();
    [CompilerGeneratedAttribute]
internal void set_column(Column value);
    public SortDirection get_direction();
    public void set_direction(SortDirection value);
    [CompilerGeneratedAttribute]
internal void add_changed(Action`1<SortColumnDescription> value);
    [CompilerGeneratedAttribute]
internal void remove_changed(Action`1<SortColumnDescription> value);
}
[DefaultMemberAttribute("Item")]
public class UnityEngine.UIElements.SortColumnDescriptions : object {
    [SerializeField]
private IList`1<SortColumnDescription> m_Descriptions;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action changed;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SortColumnDescription Item { get; }
    [CompilerGeneratedAttribute]
internal void add_changed(Action value);
    [CompilerGeneratedAttribute]
internal void remove_changed(Action value);
    public sealed virtual IEnumerator`1<SortColumnDescription> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(SortColumnDescription item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(SortColumnDescription item);
    public sealed virtual void CopyTo(SortColumnDescription[] array, int arrayIndex);
    public sealed virtual bool Remove(SortColumnDescription desc);
    private void OnDescriptionChanged(SortColumnDescription desc);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public int IndexOf(SortColumnDescription desc);
    public void Insert(int index, SortColumnDescription desc);
    public void RemoveAt(int index);
    public SortColumnDescription get_Item(int index);
}
public enum UnityEngine.UIElements.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
internal class UnityEngine.UIElements.Spacing : ValueType {
    public float left;
    public float top;
    public float right;
    public float bottom;
    public float horizontal { get; }
    public float vertical { get; }
    public Spacing(float left, float top, float right, float bottom);
    public float get_horizontal();
    public float get_vertical();
    public static Rect op_Addition(Rect r, Spacing a);
    public static Rect op_Subtraction(Rect r, Spacing a);
}
internal class UnityEngine.UIElements.StartDragArgs : ValueType {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <title>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private DragVisualMode <visualMode>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Hashtable <genericData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<Object> <unityObjectReferences>k__BackingField;
    public string title { get; }
    public DragVisualMode visualMode { get; }
    internal Hashtable genericData { get; private set; }
    internal IEnumerable`1<Object> unityObjectReferences { get; private set; }
    public StartDragArgs(string title, DragVisualMode visualMode);
    internal StartDragArgs(string title, object target);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public string get_title();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DragVisualMode get_visualMode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal Hashtable get_genericData();
    [CompilerGeneratedAttribute]
private void set_genericData(Hashtable value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal IEnumerable`1<Object> get_unityObjectReferences();
    [CompilerGeneratedAttribute]
private void set_unityObjectReferences(IEnumerable`1<Object> value);
    public void SetGenericData(string key, object data);
    public void SetUnityObjectReferences(IEnumerable`1<Object> references);
}
internal class UnityEngine.UIElements.StringObjectListPool : ObjectListPool`1<string> {
}
internal static class UnityEngine.UIElements.StringUtils : object {
    public static int LevenshteinDistance(string s, string t);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.StringUtilsExtensions : object {
    private static char NoDelimiter;
    private static Char[] WordDelimiters;
    private static StringUtilsExtensions();
    [ExtensionAttribute]
public static string ToPascalCase(string text);
    [ExtensionAttribute]
public static string ToCamelCase(string text);
    [ExtensionAttribute]
public static string ToKebabCase(string text);
    [ExtensionAttribute]
public static string ToTrainCase(string text);
    [ExtensionAttribute]
public static string ToSnakeCase(string text);
    private static string ConvertCase(string text, char outputWordDelimiter, Func`2<char, char> startOfStringCaseHandler, Func`2<char, char> middleStringCaseHandler);
    [ExtensionAttribute]
public static bool EndsWithIgnoreCaseFast(string a, string b);
    [ExtensionAttribute]
public static bool StartsWithIgnoreCaseFast(string a, string b);
}
public class UnityEngine.UIElements.StyleBackground : ValueType {
    private Background m_Value;
    private StyleKeyword m_Keyword;
    public Background value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleBackground(Background v);
    public StyleBackground(Texture2D v);
    public StyleBackground(Sprite v);
    public StyleBackground(VectorImage v);
    public StyleBackground(StyleKeyword keyword);
    internal StyleBackground(Texture2D v, StyleKeyword keyword);
    internal StyleBackground(Sprite v, StyleKeyword keyword);
    internal StyleBackground(VectorImage v, StyleKeyword keyword);
    internal StyleBackground(Background v, StyleKeyword keyword);
    public sealed virtual Background get_value();
    public sealed virtual void set_value(Background value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleBackground lhs, StyleBackground rhs);
    public static bool op_Inequality(StyleBackground lhs, StyleBackground rhs);
    public static StyleBackground op_Implicit(StyleKeyword keyword);
    public static StyleBackground op_Implicit(Background v);
    public static StyleBackground op_Implicit(Texture2D v);
    public sealed virtual bool Equals(StyleBackground other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.StyleBackgroundPosition : ValueType {
    private BackgroundPosition m_Value;
    private StyleKeyword m_Keyword;
    public BackgroundPosition value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleBackgroundPosition(BackgroundPosition v);
    public StyleBackgroundPosition(StyleKeyword keyword);
    internal StyleBackgroundPosition(BackgroundPosition v, StyleKeyword keyword);
    public sealed virtual BackgroundPosition get_value();
    public sealed virtual void set_value(BackgroundPosition value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleBackgroundPosition lhs, StyleBackgroundPosition rhs);
    public static bool op_Inequality(StyleBackgroundPosition lhs, StyleBackgroundPosition rhs);
    public static StyleBackgroundPosition op_Implicit(StyleKeyword keyword);
    public static StyleBackgroundPosition op_Implicit(BackgroundPosition v);
    public sealed virtual bool Equals(StyleBackgroundPosition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.StyleBackgroundRepeat : ValueType {
    private BackgroundRepeat m_Value;
    private StyleKeyword m_Keyword;
    public BackgroundRepeat value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleBackgroundRepeat(BackgroundRepeat v);
    public StyleBackgroundRepeat(StyleKeyword keyword);
    internal StyleBackgroundRepeat(BackgroundRepeat v, StyleKeyword keyword);
    public sealed virtual BackgroundRepeat get_value();
    public sealed virtual void set_value(BackgroundRepeat value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleBackgroundRepeat lhs, StyleBackgroundRepeat rhs);
    public static bool op_Inequality(StyleBackgroundRepeat lhs, StyleBackgroundRepeat rhs);
    public static StyleBackgroundRepeat op_Implicit(StyleKeyword keyword);
    public static StyleBackgroundRepeat op_Implicit(BackgroundRepeat v);
    public sealed virtual bool Equals(StyleBackgroundRepeat other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.StyleBackgroundSize : ValueType {
    private BackgroundSize m_Value;
    private StyleKeyword m_Keyword;
    public BackgroundSize value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleBackgroundSize(BackgroundSize v);
    public StyleBackgroundSize(StyleKeyword keyword);
    internal StyleBackgroundSize(BackgroundSize v, StyleKeyword keyword);
    public sealed virtual BackgroundSize get_value();
    public sealed virtual void set_value(BackgroundSize value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleBackgroundSize lhs, StyleBackgroundSize rhs);
    public static bool op_Inequality(StyleBackgroundSize lhs, StyleBackgroundSize rhs);
    public static StyleBackgroundSize op_Implicit(StyleKeyword keyword);
    public static StyleBackgroundSize op_Implicit(BackgroundSize v);
    public sealed virtual bool Equals(StyleBackgroundSize other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal static class UnityEngine.UIElements.StyleCache : object {
    private static Dictionary`2<long, ComputedStyle> s_ComputedStyleCache;
    private static Dictionary`2<int, StyleVariableContext> s_StyleVariableContextCache;
    private static Dictionary`2<int, ComputedTransitionProperty[]> s_ComputedTransitionsCache;
    private static StyleCache();
    public static bool TryGetValue(long hash, ComputedStyle& data);
    public static void SetValue(long hash, ComputedStyle& data);
    public static bool TryGetValue(int hash, StyleVariableContext& data);
    public static void SetValue(int hash, StyleVariableContext data);
    public static bool TryGetValue(int hash, ComputedTransitionProperty[]& data);
    public static void SetValue(int hash, ComputedTransitionProperty[] data);
    public static void ClearStyleCache();
}
public class UnityEngine.UIElements.StyleColor : ValueType {
    private Color m_Value;
    private StyleKeyword m_Keyword;
    public Color value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleColor(Color v);
    public StyleColor(StyleKeyword keyword);
    internal StyleColor(Color v, StyleKeyword keyword);
    public sealed virtual Color get_value();
    public sealed virtual void set_value(Color value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleColor lhs, StyleColor rhs);
    public static bool op_Inequality(StyleColor lhs, StyleColor rhs);
    public static bool op_Equality(StyleColor lhs, Color rhs);
    public static bool op_Inequality(StyleColor lhs, Color rhs);
    public static StyleColor op_Implicit(StyleKeyword keyword);
    public static StyleColor op_Implicit(Color v);
    public sealed virtual bool Equals(StyleColor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class UnityEngine.UIElements.StyleComplexSelector : object {
    public Hashes ancestorHashes;
    [SerializeField]
private int m_Specificity;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private StyleRule <rule>k__BackingField;
    private bool m_isSimple;
    [SerializeField]
private StyleSelector[] m_Selectors;
    [SerializeField]
internal int ruleIndex;
    internal StyleComplexSelector nextInTable;
    internal int orderInStyleSheet;
    private static Dictionary`2<string, PseudoStateData> s_PseudoStates;
    private static List`1<StyleSelectorPart> m_HashList;
    public int specificity { get; internal set; }
    public StyleRule rule { get; internal set; }
    public bool isSimple { get; }
    public StyleSelector[] selectors { get; internal set; }
    private static StyleComplexSelector();
    public int get_specificity();
    internal void set_specificity(int value);
    [CompilerGeneratedAttribute]
public StyleRule get_rule();
    [CompilerGeneratedAttribute]
internal void set_rule(StyleRule value);
    public bool get_isSimple();
    public StyleSelector[] get_selectors();
    internal void set_selectors(StyleSelector[] value);
    public sealed virtual void OnBeforeSerialize();
    public virtual void OnAfterDeserialize();
    internal void CachePseudoStateMasks();
    public virtual string ToString();
    private static int StyleSelectorPartCompare(StyleSelectorPart x, StyleSelectorPart y);
    internal void CalculateHashes();
}
public class UnityEngine.UIElements.StyleCursor : ValueType {
    private Cursor m_Value;
    private StyleKeyword m_Keyword;
    public Cursor value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleCursor(Cursor v);
    public StyleCursor(StyleKeyword keyword);
    internal StyleCursor(Cursor v, StyleKeyword keyword);
    public sealed virtual Cursor get_value();
    public sealed virtual void set_value(Cursor value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleCursor lhs, StyleCursor rhs);
    public static bool op_Inequality(StyleCursor lhs, StyleCursor rhs);
    public static StyleCursor op_Implicit(StyleKeyword keyword);
    public static StyleCursor op_Implicit(Cursor v);
    public sealed virtual bool Equals(StyleCursor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class UnityEngine.UIElements.StyleDataRef`1 : ValueType {
    private RefCounted<T> m_Ref;
    public int refCount { get; }
    public UInt32 id { get; }
    public int get_refCount();
    public UInt32 get_id();
    public StyleDataRef`1<T> Acquire();
    public void Release();
    public void CopyFrom(StyleDataRef`1<T> other);
    public T& modreq(System.Runtime.InteropServices.InAttribute) Read();
    public T& Write();
    public static StyleDataRef`1<T> Create();
    public virtual int GetHashCode();
    public static bool op_Equality(StyleDataRef`1<T> lhs, StyleDataRef`1<T> rhs);
    public static bool op_Inequality(StyleDataRef`1<T> lhs, StyleDataRef`1<T> rhs);
    public sealed virtual bool Equals(StyleDataRef`1<T> other);
    public virtual bool Equals(object obj);
    public bool ReferenceEquals(StyleDataRef`1<T> other);
}
internal static class UnityEngine.UIElements.StyleDebug : object {
    internal static int UnitySpecificity;
    internal static int UndefinedSpecificity;
    internal static int InheritedSpecificity;
    internal static int InlineSpecificity;
    public static object GetComputedStyleValue(ComputedStyle& computedStyle, StylePropertyId id);
    public static Type GetComputedStyleType(StylePropertyId id);
    public static Type GetShorthandStyleType(StylePropertyId id);
    public static object GetInlineStyleValue(IStyle style, StylePropertyId id);
    public static void SetInlineStyleValue(IStyle style, StylePropertyId id, object value);
    public static void SetInlineKeyword(IStyle style, StylePropertyId id, StyleKeyword keyword);
    public static List`1<StyleKeyword> GetValidKeyword(StylePropertyId id);
    public static object ConvertComputedToInlineStyleValue(StylePropertyId id, object value);
    public static Type GetInlineStyleType(StylePropertyId id);
    public static String[] GetLonghandPropertyNames(StylePropertyId id);
    public static bool IsShorthandProperty(StylePropertyId id);
    public static bool IsInheritedProperty(StylePropertyId id);
    public static StylePropertyId[] GetInheritedProperties();
    public static bool IsDiscreteTypeProperty(StylePropertyId id);
    public static String[] GetStylePropertyNames();
    public static String[] GetLonghandPropertyNames(string shorthandName);
    public static StylePropertyId GetStylePropertyIdFromName(string name);
    public static object GetComputedStyleValue(ComputedStyle& computedStyle, string name);
    public static object GetInlineStyleValue(IStyle style, string name);
    public static void SetInlineStyleValue(IStyle style, string name, object value);
    public static Type GetInlineStyleType(string name);
    public static Type GetComputedStyleType(string name);
    public static void FindSpecifiedStyles(ComputedStyle& computedStyle, IEnumerable`1<SelectorMatchRecord> matchRecords, Dictionary`2<StylePropertyId, int> result);
}
public class UnityEngine.UIElements.StyleEnum`1 : ValueType {
    private T m_Value;
    private StyleKeyword m_Keyword;
    public T value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleEnum`1(T v);
    public StyleEnum`1(StyleKeyword keyword);
    internal StyleEnum`1(T v, StyleKeyword keyword);
    public sealed virtual T get_value();
    public sealed virtual void set_value(T value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleEnum`1<T> lhs, StyleEnum`1<T> rhs);
    public static bool op_Inequality(StyleEnum`1<T> lhs, StyleEnum`1<T> rhs);
    public static StyleEnum`1<T> op_Implicit(StyleKeyword keyword);
    public static StyleEnum`1<T> op_Implicit(T v);
    public sealed virtual bool Equals(StyleEnum`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.StyleFloat : ValueType {
    private float m_Value;
    private StyleKeyword m_Keyword;
    public float value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleFloat(float v);
    public StyleFloat(StyleKeyword keyword);
    internal StyleFloat(float v, StyleKeyword keyword);
    public sealed virtual float get_value();
    public sealed virtual void set_value(float value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleFloat lhs, StyleFloat rhs);
    public static bool op_Inequality(StyleFloat lhs, StyleFloat rhs);
    public static StyleFloat op_Implicit(StyleKeyword keyword);
    public static StyleFloat op_Implicit(float v);
    public sealed virtual bool Equals(StyleFloat other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.StyleFont : ValueType {
    private Font m_Value;
    private StyleKeyword m_Keyword;
    public Font value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleFont(Font v);
    public StyleFont(StyleKeyword keyword);
    internal StyleFont(Font v, StyleKeyword keyword);
    public sealed virtual Font get_value();
    public sealed virtual void set_value(Font value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleFont lhs, StyleFont rhs);
    public static bool op_Inequality(StyleFont lhs, StyleFont rhs);
    public static StyleFont op_Implicit(StyleKeyword keyword);
    public static StyleFont op_Implicit(Font v);
    public sealed virtual bool Equals(StyleFont other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.StyleFontDefinition : ValueType {
    private StyleKeyword m_Keyword;
    private FontDefinition m_Value;
    public FontDefinition value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleFontDefinition(FontDefinition f);
    public StyleFontDefinition(FontAsset f);
    public StyleFontDefinition(Font f);
    public StyleFontDefinition(StyleKeyword keyword);
    internal StyleFontDefinition(object obj, StyleKeyword keyword);
    internal StyleFontDefinition(object obj);
    internal StyleFontDefinition(FontAsset f, StyleKeyword keyword);
    internal StyleFontDefinition(Font f, StyleKeyword keyword);
    internal StyleFontDefinition(GCHandle gcHandle, StyleKeyword keyword);
    internal StyleFontDefinition(FontDefinition f, StyleKeyword keyword);
    internal StyleFontDefinition(StyleFontDefinition sfd);
    public sealed virtual FontDefinition get_value();
    public sealed virtual void set_value(FontDefinition value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static StyleFontDefinition op_Implicit(StyleKeyword keyword);
    public static StyleFontDefinition op_Implicit(FontDefinition f);
    public sealed virtual bool Equals(StyleFontDefinition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(StyleFontDefinition left, StyleFontDefinition right);
    public static bool op_Inequality(StyleFontDefinition left, StyleFontDefinition right);
}
public class UnityEngine.UIElements.StyleInt : ValueType {
    private int m_Value;
    private StyleKeyword m_Keyword;
    public int value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleInt(int v);
    public StyleInt(StyleKeyword keyword);
    internal StyleInt(int v, StyleKeyword keyword);
    public sealed virtual int get_value();
    public sealed virtual void set_value(int value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleInt lhs, StyleInt rhs);
    public static bool op_Inequality(StyleInt lhs, StyleInt rhs);
    public static StyleInt op_Implicit(StyleKeyword keyword);
    public static StyleInt op_Implicit(int v);
    public sealed virtual bool Equals(StyleInt other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum UnityEngine.UIElements.StyleKeyword : Enum {
    public int value__;
    public static StyleKeyword Undefined;
    public static StyleKeyword Null;
    public static StyleKeyword Auto;
    public static StyleKeyword None;
    public static StyleKeyword Initial;
}
public class UnityEngine.UIElements.StyleLength : ValueType {
    private Length m_Value;
    private StyleKeyword m_Keyword;
    public Length value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleLength(float v);
    public StyleLength(Length v);
    public StyleLength(StyleKeyword keyword);
    internal StyleLength(Length v, StyleKeyword keyword);
    public sealed virtual Length get_value();
    public sealed virtual void set_value(Length value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleLength lhs, StyleLength rhs);
    public static bool op_Inequality(StyleLength lhs, StyleLength rhs);
    public static StyleLength op_Implicit(StyleKeyword keyword);
    public static StyleLength op_Implicit(float v);
    public static StyleLength op_Implicit(Length v);
    public sealed virtual bool Equals(StyleLength other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.StyleList`1 : ValueType {
    private StyleKeyword m_Keyword;
    private List`1<T> m_Value;
    public List`1<T> value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleList`1(List`1<T> v);
    public StyleList`1(StyleKeyword keyword);
    internal StyleList`1(List`1<T> v, StyleKeyword keyword);
    public sealed virtual List`1<T> get_value();
    public sealed virtual void set_value(List`1<T> value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleList`1<T> lhs, StyleList`1<T> rhs);
    public static bool op_Inequality(StyleList`1<T> lhs, StyleList`1<T> rhs);
    public static StyleList`1<T> op_Implicit(StyleKeyword keyword);
    public static StyleList`1<T> op_Implicit(List`1<T> v);
    public sealed virtual bool Equals(StyleList`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class UnityEngine.UIElements.StyleMatchingContext : object {
    private List`1<StyleSheet> m_StyleSheetStack;
    public StyleVariableContext variableContext;
    public VisualElement currentElement;
    public Action`2<VisualElement, MatchResultInfo> processResult;
    public AncestorFilter ancestorFilter;
    public int styleSheetCount { get; }
    public StyleMatchingContext(Action`2<VisualElement, MatchResultInfo> processResult);
    public int get_styleSheetCount();
    public void AddStyleSheet(StyleSheet sheet);
    public void RemoveStyleSheetRange(int index, int count);
    public StyleSheet GetStyleSheetAt(int index);
}
internal class UnityEngine.UIElements.StyleProperty : object {
    [SerializeField]
private string m_Name;
    [SerializeField]
private int m_Line;
    [SerializeField]
private StyleValueHandle[] m_Values;
    internal bool isCustomProperty;
    internal bool requireVariableResolve;
    public string name { get; internal set; }
    public int line { get; internal set; }
    public StyleValueHandle[] values { get; internal set; }
    public string get_name();
    internal void set_name(string value);
    public int get_line();
    internal void set_line(int value);
    public StyleValueHandle[] get_values();
    internal void set_values(StyleValueHandle[] value);
}
internal class UnityEngine.UIElements.StylePropertyAnimationSystem : object {
    private long m_CurrentTimeMs;
    private ValuesFloat m_Floats;
    private ValuesInt m_Ints;
    private ValuesLength m_Lengths;
    private ValuesColor m_Colors;
    private ValuesEnum m_Enums;
    private ValuesBackground m_Backgrounds;
    private ValuesFontDefinition m_FontDefinitions;
    private ValuesFont m_Fonts;
    private ValuesTextShadow m_TextShadows;
    private ValuesScale m_Scale;
    private ValuesRotate m_Rotate;
    private ValuesTranslate m_Translate;
    private ValuesTransformOrigin m_TransformOrigin;
    private ValuesBackgroundPosition m_BackgroundPosition;
    private ValuesBackgroundRepeat m_BackgroundRepeat;
    private ValuesBackgroundSize m_BackgroundSize;
    private List`1<Values> m_AllValues;
    private Dictionary`2<StylePropertyId, Values> m_PropertyToValues;
    private T GetOrCreate(T& values);
    private bool StartTransition(VisualElement owner, StylePropertyId prop, T startValue, T endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve, Values`1<T> values);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, float startValue, float endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Length startValue, Length endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Color startValue, Color endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartAnimationEnum(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Background startValue, Background endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, FontDefinition startValue, FontDefinition endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Font startValue, Font endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, TextShadow startValue, TextShadow endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Scale startValue, Scale endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Rotate startValue, Rotate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, Translate startValue, Translate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, TransformOrigin startValue, TransformOrigin endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, BackgroundPosition startValue, BackgroundPosition endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, BackgroundRepeat startValue, BackgroundRepeat endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual bool StartTransition(VisualElement owner, StylePropertyId prop, BackgroundSize startValue, BackgroundSize endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    public sealed virtual void CancelAllAnimations();
    public sealed virtual void CancelAllAnimations(VisualElement owner);
    public sealed virtual void CancelAnimation(VisualElement owner, StylePropertyId id);
    public sealed virtual bool HasRunningAnimation(VisualElement owner, StylePropertyId id);
    public sealed virtual void UpdateAnimation(VisualElement owner, StylePropertyId id);
    public sealed virtual void GetAllAnimations(VisualElement owner, List`1<StylePropertyId> propertyIds);
    private void UpdateTracking(Values`1<T> values);
    private long CurrentTimeMs();
    public sealed virtual void Update();
}
public class UnityEngine.UIElements.StylePropertyName : ValueType {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StylePropertyId <id>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <name>k__BackingField;
    internal StylePropertyId id { get; }
    private string name { get; }
    internal StylePropertyName(StylePropertyId stylePropertyId);
    public StylePropertyName(string name);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
internal StylePropertyId get_id();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private string get_name();
    internal static StylePropertyId StylePropertyIdFromString(string name);
    public static bool IsNullOrEmpty(StylePropertyName propertyName);
    public static bool op_Equality(StylePropertyName lhs, StylePropertyName rhs);
    public static bool op_Inequality(StylePropertyName lhs, StylePropertyName rhs);
    public static StylePropertyName op_Implicit(string name);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public sealed virtual bool Equals(StylePropertyName other);
    public virtual string ToString();
}
public class UnityEngine.UIElements.StylePropertyNameCollection : ValueType {
    internal List`1<StylePropertyName> propertiesList;
    internal StylePropertyNameCollection(List`1<StylePropertyName> list);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<StylePropertyName> System.Collections.Generic.IEnumerable<UnityEngine.UIElements.StylePropertyName>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool Contains(StylePropertyName stylePropertyName);
}
public class UnityEngine.UIElements.StyleRotate : ValueType {
    private Rotate m_Value;
    private StyleKeyword m_Keyword;
    public Rotate value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleRotate(Rotate v);
    public StyleRotate(StyleKeyword keyword);
    internal StyleRotate(Rotate v, StyleKeyword keyword);
    public sealed virtual Rotate get_value();
    public sealed virtual void set_value(Rotate value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleRotate lhs, StyleRotate rhs);
    public static bool op_Inequality(StyleRotate lhs, StyleRotate rhs);
    public static StyleRotate op_Implicit(StyleKeyword keyword);
    public static StyleRotate op_Implicit(Rotate v);
    public sealed virtual bool Equals(StyleRotate other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class UnityEngine.UIElements.StyleRule : object {
    [SerializeField]
private StyleProperty[] m_Properties;
    [SerializeField]
internal int line;
    internal int customPropertiesCount;
    public StyleProperty[] properties { get; internal set; }
    public StyleProperty[] get_properties();
    internal void set_properties(StyleProperty[] value);
}
public class UnityEngine.UIElements.StyleScale : ValueType {
    private Scale m_Value;
    private StyleKeyword m_Keyword;
    public Scale value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleScale(Scale v);
    public StyleScale(StyleKeyword keyword);
    public StyleScale(Vector2 scale);
    internal StyleScale(Scale v, StyleKeyword keyword);
    public sealed virtual Scale get_value();
    public sealed virtual void set_value(Scale value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static StyleScale op_Implicit(Vector2 scale);
    public static bool op_Equality(StyleScale lhs, StyleScale rhs);
    public static bool op_Inequality(StyleScale lhs, StyleScale rhs);
    public static StyleScale op_Implicit(StyleKeyword keyword);
    public static StyleScale op_Implicit(Scale v);
    public sealed virtual bool Equals(StyleScale other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class UnityEngine.UIElements.StyleSelector : object {
    [SerializeField]
private StyleSelectorPart[] m_Parts;
    [SerializeField]
private StyleSelectorRelationship m_PreviousRelationship;
    internal int pseudoStateMask;
    internal int negatedPseudoStateMask;
    public StyleSelectorPart[] parts { get; internal set; }
    public StyleSelectorRelationship previousRelationship { get; internal set; }
    public StyleSelectorPart[] get_parts();
    internal void set_parts(StyleSelectorPart[] value);
    public StyleSelectorRelationship get_previousRelationship();
    internal void set_previousRelationship(StyleSelectorRelationship value);
    public virtual string ToString();
}
internal class UnityEngine.UIElements.StyleSelectorPart : ValueType {
    [SerializeField]
private string m_Value;
    [SerializeField]
private StyleSelectorType m_Type;
    internal object tempData;
    public string value { get; internal set; }
    public StyleSelectorType type { get; internal set; }
    public string get_value();
    internal void set_value(string value);
    public StyleSelectorType get_type();
    internal void set_type(StyleSelectorType value);
    public virtual string ToString();
    public static StyleSelectorPart CreateClass(string className);
    public static StyleSelectorPart CreatePseudoClass(string className);
    public static StyleSelectorPart CreateId(string Id);
    public static StyleSelectorPart CreateType(Type t);
    public static StyleSelectorPart CreateType(string typeName);
    public static StyleSelectorPart CreatePredicate(object predicate);
    public static StyleSelectorPart CreateWildCard();
}
internal enum UnityEngine.UIElements.StyleSelectorRelationship : Enum {
    public int value__;
    public static StyleSelectorRelationship None;
    public static StyleSelectorRelationship Child;
    public static StyleSelectorRelationship Descendent;
}
internal enum UnityEngine.UIElements.StyleSelectorType : Enum {
    public int value__;
    public static StyleSelectorType Unknown;
    public static StyleSelectorType Wildcard;
    public static StyleSelectorType Type;
    public static StyleSelectorType Class;
    public static StyleSelectorType PseudoClass;
    public static StyleSelectorType RecursivePseudoClass;
    public static StyleSelectorType ID;
    public static StyleSelectorType Predicate;
}
[HelpURLAttribute("UIE-USS")]
public class UnityEngine.UIElements.StyleSheet : ScriptableObject {
    [SerializeField]
private bool m_ImportedWithErrors;
    [SerializeField]
private bool m_ImportedWithWarnings;
    [SerializeField]
private StyleRule[] m_Rules;
    [SerializeField]
private StyleComplexSelector[] m_ComplexSelectors;
    [SerializeField]
internal Single[] floats;
    [SerializeField]
internal Dimension[] dimensions;
    [SerializeField]
internal Color[] colors;
    [SerializeField]
internal String[] strings;
    [SerializeField]
internal Object[] assets;
    [SerializeField]
internal ImportStruct[] imports;
    [SerializeField]
private List`1<StyleSheet> m_FlattenedImportedStyleSheets;
    [SerializeField]
private int m_ContentHash;
    [SerializeField]
internal ScalableImage[] scalableImages;
    internal Dictionary`2<string, StyleComplexSelector> orderedNameSelectors;
    internal Dictionary`2<string, StyleComplexSelector> orderedTypeSelectors;
    internal Dictionary`2<string, StyleComplexSelector> orderedClassSelectors;
    private bool m_IsDefaultStyleSheet;
    private static string kCustomPropertyMarker;
    public bool importedWithErrors { get; internal set; }
    public bool importedWithWarnings { get; internal set; }
    internal StyleRule[] rules { get; internal set; }
    internal StyleComplexSelector[] complexSelectors { get; internal set; }
    internal List`1<StyleSheet> flattenedRecursiveImports { get; }
    public int contentHash { get; public set; }
    internal bool isDefaultStyleSheet { get; internal set; }
    private static StyleSheet();
    public bool get_importedWithErrors();
    internal void set_importedWithErrors(bool value);
    public bool get_importedWithWarnings();
    internal void set_importedWithWarnings(bool value);
    internal StyleRule[] get_rules();
    internal void set_rules(StyleRule[] value);
    internal StyleComplexSelector[] get_complexSelectors();
    internal void set_complexSelectors(StyleComplexSelector[] value);
    internal List`1<StyleSheet> get_flattenedRecursiveImports();
    public int get_contentHash();
    public void set_contentHash(int value);
    internal bool get_isDefaultStyleSheet();
    internal void set_isDefaultStyleSheet(bool value);
    private bool TryCheckAccess(T[] list, StyleValueType type, StyleValueHandle handle, T& value);
    private T CheckAccess(T[] list, StyleValueType type, StyleValueHandle handle);
    internal virtual void OnEnable();
    internal void FlattenImportedStyleSheetsRecursive();
    private void FlattenImportedStyleSheetsRecursive(StyleSheet sheet);
    private void SetupReferences();
    internal StyleValueKeyword ReadKeyword(StyleValueHandle handle);
    internal float ReadFloat(StyleValueHandle handle);
    internal bool TryReadFloat(StyleValueHandle handle, Single& value);
    internal Dimension ReadDimension(StyleValueHandle handle);
    internal bool TryReadDimension(StyleValueHandle handle, Dimension& value);
    internal Color ReadColor(StyleValueHandle handle);
    internal bool TryReadColor(StyleValueHandle handle, Color& value);
    internal string ReadString(StyleValueHandle handle);
    internal bool TryReadString(StyleValueHandle handle, String& value);
    internal string ReadEnum(StyleValueHandle handle);
    internal bool TryReadEnum(StyleValueHandle handle, String& value);
    internal string ReadVariable(StyleValueHandle handle);
    internal bool TryReadVariable(StyleValueHandle handle, String& value);
    internal string ReadResourcePath(StyleValueHandle handle);
    internal bool TryReadResourcePath(StyleValueHandle handle, String& value);
    internal Object ReadAssetReference(StyleValueHandle handle);
    internal string ReadMissingAssetReferenceUrl(StyleValueHandle handle);
    internal bool TryReadAssetReference(StyleValueHandle handle, Object& value);
    internal StyleValueFunction ReadFunction(StyleValueHandle handle);
    internal string ReadFunctionName(StyleValueHandle handle);
    internal ScalableImage ReadScalableImage(StyleValueHandle handle);
    private static bool CustomStartsWith(string originalString, string pattern);
}
internal abstract class UnityEngine.UIElements.StyleSheets.BaseStyleMatcher : object {
    protected static Regex s_CustomIdentRegex;
    private Stack`1<MatchContext> m_ContextStack;
    private MatchContext m_CurrentContext;
    public int valueCount { get; }
    public bool isCurrentVariable { get; }
    public bool isCurrentComma { get; }
    public bool hasCurrent { get; }
    public int currentIndex { get; public set; }
    public int matchedVariableCount { get; public set; }
    private static BaseStyleMatcher();
    protected abstract virtual bool MatchKeyword(string keyword);
    protected abstract virtual bool MatchNumber();
    protected abstract virtual bool MatchInteger();
    protected abstract virtual bool MatchLength();
    protected abstract virtual bool MatchPercentage();
    protected abstract virtual bool MatchColor();
    protected abstract virtual bool MatchResource();
    protected abstract virtual bool MatchUrl();
    protected abstract virtual bool MatchTime();
    protected abstract virtual bool MatchAngle();
    protected abstract virtual bool MatchCustomIdent();
    public abstract virtual int get_valueCount();
    public abstract virtual bool get_isCurrentVariable();
    public abstract virtual bool get_isCurrentComma();
    public bool get_hasCurrent();
    public int get_currentIndex();
    public void set_currentIndex(int value);
    public int get_matchedVariableCount();
    public void set_matchedVariableCount(int value);
    protected void Initialize();
    public void MoveNext();
    public void SaveContext();
    public void RestoreContext();
    public void DropContext();
    protected bool Match(Expression exp);
    private bool MatchExpression(Expression exp);
    private bool MatchExpressionWithMultiplier(Expression exp);
    private bool MatchGroup(Expression exp);
    private bool MatchCombinator(Expression exp);
    private bool MatchOr(Expression exp);
    private bool MatchOrOr(Expression exp);
    private bool MatchAndAnd(Expression exp);
    private int MatchMany(Expression exp);
    private int MatchManyByOrder(Expression exp, Int32* matchOrder);
    private bool MatchJuxtaposition(Expression exp);
    private bool MatchDataType(Expression exp);
}
internal static class UnityEngine.UIElements.StyleSheets.CSSSpec : object {
    private static Regex rgx;
    private static int typeSelectorWeight;
    private static int classSelectorWeight;
    private static int idSelectorWeight;
    private static CSSSpec();
    public static int GetSelectorSpecificity(string selector);
    public static int GetSelectorSpecificity(StyleSelectorPart[] parts);
    public static bool ParseSelector(string selector, StyleSelectorPart[]& parts);
}
internal class UnityEngine.UIElements.StyleSheets.Dimension : ValueType {
    public Unit unit;
    public float value;
    public Dimension(float value, Unit unit);
    public Length ToLength();
    public TimeValue ToTime();
    public Angle ToAngle();
    public static bool op_Equality(Dimension lhs, Dimension rhs);
    public static bool op_Inequality(Dimension lhs, Dimension rhs);
    public sealed virtual bool Equals(Dimension other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal abstract class UnityEngine.UIElements.StyleSheets.HierarchyTraversal : object {
    public virtual void Traverse(VisualElement element);
    public abstract virtual void TraverseRecursive(VisualElement element, int depth);
    protected void Recurse(VisualElement element, int depth);
}
internal class UnityEngine.UIElements.StyleSheets.ImageSource : ValueType {
    public Texture2D texture;
    public Sprite sprite;
    public VectorImage vectorImage;
    public RenderTexture renderTexture;
    public bool IsNull();
}
internal static class UnityEngine.UIElements.StyleSheets.InitialStyle : object {
    private static ComputedStyle s_InitialStyle;
    public static Align alignContent { get; }
    public static Align alignItems { get; }
    public static Align alignSelf { get; }
    public static Color backgroundColor { get; }
    public static Background backgroundImage { get; }
    public static BackgroundPosition backgroundPositionX { get; }
    public static BackgroundPosition backgroundPositionY { get; }
    public static BackgroundRepeat backgroundRepeat { get; }
    public static BackgroundSize backgroundSize { get; }
    public static Color borderBottomColor { get; }
    public static Length borderBottomLeftRadius { get; }
    public static Length borderBottomRightRadius { get; }
    public static float borderBottomWidth { get; }
    public static Color borderLeftColor { get; }
    public static float borderLeftWidth { get; }
    public static Color borderRightColor { get; }
    public static float borderRightWidth { get; }
    public static Color borderTopColor { get; }
    public static Length borderTopLeftRadius { get; }
    public static Length borderTopRightRadius { get; }
    public static float borderTopWidth { get; }
    public static Length bottom { get; }
    public static Color color { get; }
    public static Cursor cursor { get; }
    public static DisplayStyle display { get; }
    public static Length flexBasis { get; }
    public static FlexDirection flexDirection { get; }
    public static float flexGrow { get; }
    public static float flexShrink { get; }
    public static Wrap flexWrap { get; }
    public static Length fontSize { get; }
    public static Length height { get; }
    public static Justify justifyContent { get; }
    public static Length left { get; }
    public static Length letterSpacing { get; }
    public static Length marginBottom { get; }
    public static Length marginLeft { get; }
    public static Length marginRight { get; }
    public static Length marginTop { get; }
    public static Length maxHeight { get; }
    public static Length maxWidth { get; }
    public static Length minHeight { get; }
    public static Length minWidth { get; }
    public static float opacity { get; }
    public static OverflowInternal overflow { get; }
    public static Length paddingBottom { get; }
    public static Length paddingLeft { get; }
    public static Length paddingRight { get; }
    public static Length paddingTop { get; }
    public static Position position { get; }
    public static Length right { get; }
    public static Rotate rotate { get; }
    public static Scale scale { get; }
    public static TextOverflow textOverflow { get; }
    public static TextShadow textShadow { get; }
    public static Length top { get; }
    public static TransformOrigin transformOrigin { get; }
    public static List`1<TimeValue> transitionDelay { get; }
    public static List`1<TimeValue> transitionDuration { get; }
    public static List`1<StylePropertyName> transitionProperty { get; }
    public static List`1<EasingFunction> transitionTimingFunction { get; }
    public static Translate translate { get; }
    public static Color unityBackgroundImageTintColor { get; }
    public static Font unityFont { get; }
    public static FontDefinition unityFontDefinition { get; }
    public static FontStyle unityFontStyleAndWeight { get; }
    public static OverflowClipBox unityOverflowClipBox { get; }
    public static Length unityParagraphSpacing { get; }
    public static int unitySliceBottom { get; }
    public static int unitySliceLeft { get; }
    public static int unitySliceRight { get; }
    public static float unitySliceScale { get; }
    public static int unitySliceTop { get; }
    public static TextAnchor unityTextAlign { get; }
    public static Color unityTextOutlineColor { get; }
    public static float unityTextOutlineWidth { get; }
    public static TextOverflowPosition unityTextOverflowPosition { get; }
    public static Visibility visibility { get; }
    public static WhiteSpace whiteSpace { get; }
    public static Length width { get; }
    public static Length wordSpacing { get; }
    private static InitialStyle();
    public static ComputedStyle& Get();
    public static ComputedStyle Acquire();
    public static Align get_alignContent();
    public static Align get_alignItems();
    public static Align get_alignSelf();
    public static Color get_backgroundColor();
    public static Background get_backgroundImage();
    public static BackgroundPosition get_backgroundPositionX();
    public static BackgroundPosition get_backgroundPositionY();
    public static BackgroundRepeat get_backgroundRepeat();
    public static BackgroundSize get_backgroundSize();
    public static Color get_borderBottomColor();
    public static Length get_borderBottomLeftRadius();
    public static Length get_borderBottomRightRadius();
    public static float get_borderBottomWidth();
    public static Color get_borderLeftColor();
    public static float get_borderLeftWidth();
    public static Color get_borderRightColor();
    public static float get_borderRightWidth();
    public static Color get_borderTopColor();
    public static Length get_borderTopLeftRadius();
    public static Length get_borderTopRightRadius();
    public static float get_borderTopWidth();
    public static Length get_bottom();
    public static Color get_color();
    public static Cursor get_cursor();
    public static DisplayStyle get_display();
    public static Length get_flexBasis();
    public static FlexDirection get_flexDirection();
    public static float get_flexGrow();
    public static float get_flexShrink();
    public static Wrap get_flexWrap();
    public static Length get_fontSize();
    public static Length get_height();
    public static Justify get_justifyContent();
    public static Length get_left();
    public static Length get_letterSpacing();
    public static Length get_marginBottom();
    public static Length get_marginLeft();
    public static Length get_marginRight();
    public static Length get_marginTop();
    public static Length get_maxHeight();
    public static Length get_maxWidth();
    public static Length get_minHeight();
    public static Length get_minWidth();
    public static float get_opacity();
    public static OverflowInternal get_overflow();
    public static Length get_paddingBottom();
    public static Length get_paddingLeft();
    public static Length get_paddingRight();
    public static Length get_paddingTop();
    public static Position get_position();
    public static Length get_right();
    public static Rotate get_rotate();
    public static Scale get_scale();
    public static TextOverflow get_textOverflow();
    public static TextShadow get_textShadow();
    public static Length get_top();
    public static TransformOrigin get_transformOrigin();
    public static List`1<TimeValue> get_transitionDelay();
    public static List`1<TimeValue> get_transitionDuration();
    public static List`1<StylePropertyName> get_transitionProperty();
    public static List`1<EasingFunction> get_transitionTimingFunction();
    public static Translate get_translate();
    public static Color get_unityBackgroundImageTintColor();
    public static Font get_unityFont();
    public static FontDefinition get_unityFontDefinition();
    public static FontStyle get_unityFontStyleAndWeight();
    public static OverflowClipBox get_unityOverflowClipBox();
    public static Length get_unityParagraphSpacing();
    public static int get_unitySliceBottom();
    public static int get_unitySliceLeft();
    public static int get_unitySliceRight();
    public static float get_unitySliceScale();
    public static int get_unitySliceTop();
    public static TextAnchor get_unityTextAlign();
    public static Color get_unityTextOutlineColor();
    public static float get_unityTextOutlineWidth();
    public static TextOverflowPosition get_unityTextOverflowPosition();
    public static Visibility get_visibility();
    public static WhiteSpace get_whiteSpace();
    public static Length get_width();
    public static Length get_wordSpacing();
}
internal class UnityEngine.UIElements.StyleSheets.MatchResult : ValueType {
    public MatchResultErrorCode errorCode;
    public string errorValue;
    public bool success { get; }
    public bool get_success();
}
internal enum UnityEngine.UIElements.StyleSheets.MatchResultErrorCode : Enum {
    public int value__;
    public static MatchResultErrorCode None;
    public static MatchResultErrorCode Syntax;
    public static MatchResultErrorCode EmptyValue;
    public static MatchResultErrorCode ExpectedEndOfValue;
}
internal class UnityEngine.UIElements.StyleSheets.MatchResultInfo : ValueType {
    public bool success;
    public PseudoStates triggerPseudoMask;
    public PseudoStates dependencyPseudoMask;
    public MatchResultInfo(bool success, PseudoStates triggerPseudoMask, PseudoStates dependencyPseudoMask);
}
internal class UnityEngine.UIElements.StyleSheets.ScalableImage : ValueType {
    public Texture2D normalImage;
    public Texture2D highResolutionImage;
    public virtual string ToString();
}
internal class UnityEngine.UIElements.StyleSheets.SelectorMatchRecord : ValueType {
    public StyleSheet sheet;
    public int styleSheetIndexInStack;
    public StyleComplexSelector complexSelector;
    public SelectorMatchRecord(StyleSheet sheet, int styleSheetIndexInStack);
    public static int Compare(SelectorMatchRecord a, SelectorMatchRecord b);
}
internal static class UnityEngine.UIElements.StyleSheets.ShorthandApplicator : object {
    private static List`1<TimeValue> s_TransitionDelayList;
    private static List`1<TimeValue> s_TransitionDurationList;
    private static List`1<StylePropertyName> s_TransitionPropertyList;
    private static List`1<EasingFunction> s_TransitionTimingFunctionList;
    private static ShorthandApplicator();
    public static void ApplyBackgroundPosition(StylePropertyReader reader, ComputedStyle& computedStyle);
    public static void ApplyBorderColor(StylePropertyReader reader, ComputedStyle& computedStyle);
    public static void ApplyBorderRadius(StylePropertyReader reader, ComputedStyle& computedStyle);
    public static void ApplyBorderWidth(StylePropertyReader reader, ComputedStyle& computedStyle);
    public static void ApplyFlex(StylePropertyReader reader, ComputedStyle& computedStyle);
    public static void ApplyMargin(StylePropertyReader reader, ComputedStyle& computedStyle);
    public static void ApplyPadding(StylePropertyReader reader, ComputedStyle& computedStyle);
    public static void ApplyTransition(StylePropertyReader reader, ComputedStyle& computedStyle);
    public static void ApplyUnityBackgroundScaleMode(StylePropertyReader reader, ComputedStyle& computedStyle);
    public static void ApplyUnityTextOutline(StylePropertyReader reader, ComputedStyle& computedStyle);
    private static bool CompileFlexShorthand(StylePropertyReader reader, Single& grow, Single& shrink, Length& basis);
    private static void CompileBorderRadius(StylePropertyReader reader, Length& top, Length& right, Length& bottom, Length& left);
    private static void CompileBackgroundPosition(StylePropertyReader reader, BackgroundPosition& backgroundPositionX, BackgroundPosition& backgroundPositionY);
    public static void CompileUnityBackgroundScaleMode(StylePropertyReader reader, BackgroundPosition& backgroundPositionX, BackgroundPosition& backgroundPositionY, BackgroundRepeat& backgroundRepeat, BackgroundSize& backgroundSize);
    private static void CompileBoxArea(StylePropertyReader reader, Length& top, Length& right, Length& bottom, Length& left);
    private static void CompileBoxArea(StylePropertyReader reader, Single& top, Single& right, Single& bottom, Single& left);
    private static void CompileBoxArea(StylePropertyReader reader, Color& top, Color& right, Color& bottom, Color& left);
    private static void CompileTextOutline(StylePropertyReader reader, Color& outlineColor, Single& outlineWidth);
    private static void CompileTransition(StylePropertyReader reader, List`1& outDelay, List`1& outDuration, List`1& outProperty, List`1& outTimingFunction);
    [CompilerGeneratedAttribute]
internal static void <CompileBackgroundPosition>g__SwapKeyword|16_0(BackgroundPositionKeyword& a, BackgroundPositionKeyword& b);
}
internal enum UnityEngine.UIElements.StyleSheets.StyleEnumType : Enum {
    public int value__;
    public static StyleEnumType Align;
    public static StyleEnumType BackgroundPositionKeyword;
    public static StyleEnumType BackgroundSizeType;
    public static StyleEnumType DisplayStyle;
    public static StyleEnumType EasingMode;
    public static StyleEnumType FlexDirection;
    public static StyleEnumType FontStyle;
    public static StyleEnumType Justify;
    public static StyleEnumType Overflow;
    public static StyleEnumType OverflowClipBox;
    public static StyleEnumType OverflowInternal;
    public static StyleEnumType Position;
    public static StyleEnumType Repeat;
    public static StyleEnumType RepeatXY;
    public static StyleEnumType ScaleMode;
    public static StyleEnumType TextAnchor;
    public static StyleEnumType TextOverflow;
    public static StyleEnumType TextOverflowPosition;
    public static StyleEnumType TransformOriginOffset;
    public static StyleEnumType Visibility;
    public static StyleEnumType WhiteSpace;
    public static StyleEnumType Wrap;
}
internal class UnityEngine.UIElements.StyleSheets.StyleMatcher : BaseStyleMatcher {
    private StylePropertyValueParser m_Parser;
    private String[] m_PropertyParts;
    private static Regex s_NumberRegex;
    private static Regex s_IntegerRegex;
    private static Regex s_ZeroRegex;
    private static Regex s_LengthRegex;
    private static Regex s_PercentRegex;
    private static Regex s_HexColorRegex;
    private static Regex s_RgbRegex;
    private static Regex s_RgbaRegex;
    private static Regex s_VarFunctionRegex;
    private static Regex s_ResourceRegex;
    private static Regex s_UrlRegex;
    private static Regex s_TimeRegex;
    private static Regex s_AngleRegex;
    private string current { get; }
    public int valueCount { get; }
    public bool isCurrentVariable { get; }
    public bool isCurrentComma { get; }
    private static StyleMatcher();
    private string get_current();
    public virtual int get_valueCount();
    public virtual bool get_isCurrentVariable();
    public virtual bool get_isCurrentComma();
    private void Initialize(string propertyValue);
    public MatchResult Match(Expression exp, string propertyValue);
    protected virtual bool MatchKeyword(string keyword);
    protected virtual bool MatchNumber();
    protected virtual bool MatchInteger();
    protected virtual bool MatchLength();
    protected virtual bool MatchPercentage();
    protected virtual bool MatchColor();
    protected virtual bool MatchResource();
    protected virtual bool MatchUrl();
    protected virtual bool MatchTime();
    protected virtual bool MatchAngle();
    protected virtual bool MatchCustomIdent();
}
internal static class UnityEngine.UIElements.StyleSheets.StylePropertyCache : object {
    internal static Dictionary`2<string, string> s_PropertySyntaxCache;
    internal static Dictionary`2<string, string> s_NonTerminalValues;
    private static StylePropertyCache();
    public static bool TryGetSyntax(string name, String& syntax);
    public static bool TryGetNonTerminalValue(string name, String& syntax);
    public static string FindClosestPropertyName(string name);
}
internal enum UnityEngine.UIElements.StyleSheets.StylePropertyGroup : Enum {
    public int value__;
    public static StylePropertyGroup Inherited;
    public static StylePropertyGroup Layout;
    public static StylePropertyGroup Rare;
    public static StylePropertyGroup Shorthand;
    public static StylePropertyGroup Transform;
    public static StylePropertyGroup Transition;
    public static StylePropertyGroup Visual;
}
internal enum UnityEngine.UIElements.StyleSheets.StylePropertyId : Enum {
    public int value__;
    public static StylePropertyId Unknown;
    public static StylePropertyId Custom;
    public static StylePropertyId AlignContent;
    public static StylePropertyId AlignItems;
    public static StylePropertyId AlignSelf;
    public static StylePropertyId All;
    public static StylePropertyId BackgroundColor;
    public static StylePropertyId BackgroundImage;
    public static StylePropertyId BackgroundPosition;
    public static StylePropertyId BackgroundPositionX;
    public static StylePropertyId BackgroundPositionY;
    public static StylePropertyId BackgroundRepeat;
    public static StylePropertyId BackgroundSize;
    public static StylePropertyId BorderBottomColor;
    public static StylePropertyId BorderBottomLeftRadius;
    public static StylePropertyId BorderBottomRightRadius;
    public static StylePropertyId BorderBottomWidth;
    public static StylePropertyId BorderColor;
    public static StylePropertyId BorderLeftColor;
    public static StylePropertyId BorderLeftWidth;
    public static StylePropertyId BorderRadius;
    public static StylePropertyId BorderRightColor;
    public static StylePropertyId BorderRightWidth;
    public static StylePropertyId BorderTopColor;
    public static StylePropertyId BorderTopLeftRadius;
    public static StylePropertyId BorderTopRightRadius;
    public static StylePropertyId BorderTopWidth;
    public static StylePropertyId BorderWidth;
    public static StylePropertyId Bottom;
    public static StylePropertyId Color;
    public static StylePropertyId Cursor;
    public static StylePropertyId Display;
    public static StylePropertyId Flex;
    public static StylePropertyId FlexBasis;
    public static StylePropertyId FlexDirection;
    public static StylePropertyId FlexGrow;
    public static StylePropertyId FlexShrink;
    public static StylePropertyId FlexWrap;
    public static StylePropertyId FontSize;
    public static StylePropertyId Height;
    public static StylePropertyId JustifyContent;
    public static StylePropertyId Left;
    public static StylePropertyId LetterSpacing;
    public static StylePropertyId Margin;
    public static StylePropertyId MarginBottom;
    public static StylePropertyId MarginLeft;
    public static StylePropertyId MarginRight;
    public static StylePropertyId MarginTop;
    public static StylePropertyId MaxHeight;
    public static StylePropertyId MaxWidth;
    public static StylePropertyId MinHeight;
    public static StylePropertyId MinWidth;
    public static StylePropertyId Opacity;
    public static StylePropertyId Overflow;
    public static StylePropertyId Padding;
    public static StylePropertyId PaddingBottom;
    public static StylePropertyId PaddingLeft;
    public static StylePropertyId PaddingRight;
    public static StylePropertyId PaddingTop;
    public static StylePropertyId Position;
    public static StylePropertyId Right;
    public static StylePropertyId Rotate;
    public static StylePropertyId Scale;
    public static StylePropertyId TextOverflow;
    public static StylePropertyId TextShadow;
    public static StylePropertyId Top;
    public static StylePropertyId TransformOrigin;
    public static StylePropertyId Transition;
    public static StylePropertyId TransitionDelay;
    public static StylePropertyId TransitionDuration;
    public static StylePropertyId TransitionProperty;
    public static StylePropertyId TransitionTimingFunction;
    public static StylePropertyId Translate;
    public static StylePropertyId UnityBackgroundImageTintColor;
    public static StylePropertyId UnityBackgroundScaleMode;
    public static StylePropertyId UnityFont;
    public static StylePropertyId UnityFontDefinition;
    public static StylePropertyId UnityFontStyleAndWeight;
    public static StylePropertyId UnityOverflowClipBox;
    public static StylePropertyId UnityParagraphSpacing;
    public static StylePropertyId UnitySliceBottom;
    public static StylePropertyId UnitySliceLeft;
    public static StylePropertyId UnitySliceRight;
    public static StylePropertyId UnitySliceScale;
    public static StylePropertyId UnitySliceTop;
    public static StylePropertyId UnityTextAlign;
    public static StylePropertyId UnityTextOutline;
    public static StylePropertyId UnityTextOutlineColor;
    public static StylePropertyId UnityTextOutlineWidth;
    public static StylePropertyId UnityTextOverflowPosition;
    public static StylePropertyId Visibility;
    public static StylePropertyId WhiteSpace;
    public static StylePropertyId Width;
    public static StylePropertyId WordSpacing;
}
internal class UnityEngine.UIElements.StyleSheets.StylePropertyReader : object {
    internal static GetCursorIdFunction getCursorIdFunc;
    private List`1<StylePropertyValue> m_Values;
    private List`1<int> m_ValueCount;
    private StyleVariableResolver m_Resolver;
    private StyleSheet m_Sheet;
    private StyleProperty[] m_Properties;
    private StylePropertyId[] m_PropertyIds;
    private int m_CurrentValueIndex;
    private int m_CurrentPropertyIndex;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StyleProperty <property>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StylePropertyId <propertyId>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <valueCount>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private float <dpiScaling>k__BackingField;
    public StyleProperty property { get; private set; }
    public StylePropertyId propertyId { get; private set; }
    public int valueCount { get; private set; }
    public float dpiScaling { get; private set; }
    [CompilerGeneratedAttribute]
public StyleProperty get_property();
    [CompilerGeneratedAttribute]
private void set_property(StyleProperty value);
    [CompilerGeneratedAttribute]
public StylePropertyId get_propertyId();
    [CompilerGeneratedAttribute]
private void set_propertyId(StylePropertyId value);
    [CompilerGeneratedAttribute]
public int get_valueCount();
    [CompilerGeneratedAttribute]
private void set_valueCount(int value);
    [CompilerGeneratedAttribute]
public float get_dpiScaling();
    [CompilerGeneratedAttribute]
private void set_dpiScaling(float value);
    public void SetContext(StyleSheet sheet, StyleComplexSelector selector, StyleVariableContext varContext, float dpiScaling);
    public void SetInlineContext(StyleSheet sheet, StyleProperty[] properties, StylePropertyId[] propertyIds, float dpiScaling);
    public StylePropertyId MoveNextProperty();
    public StylePropertyValue GetValue(int index);
    public StyleValueType GetValueType(int index);
    public bool IsValueType(int index, StyleValueType type);
    public bool IsKeyword(int index, StyleValueKeyword keyword);
    public string ReadAsString(int index);
    public Length ReadLength(int index);
    public TimeValue ReadTimeValue(int index);
    public Translate ReadTranslate(int index);
    public TransformOrigin ReadTransformOrigin(int index);
    public Rotate ReadRotate(int index);
    public Scale ReadScale(int index);
    public float ReadFloat(int index);
    public int ReadInt(int index);
    public Color ReadColor(int index);
    public int ReadEnum(StyleEnumType enumType, int index);
    public FontDefinition ReadFontDefinition(int index);
    public Font ReadFont(int index);
    public Background ReadBackground(int index);
    public Cursor ReadCursor(int index);
    public TextShadow ReadTextShadow(int index);
    public BackgroundPosition ReadBackgroundPositionX(int index);
    public BackgroundPosition ReadBackgroundPositionY(int index);
    private BackgroundPosition ReadBackgroundPosition(int index, BackgroundPositionKeyword keyword);
    public BackgroundRepeat ReadBackgroundRepeat(int index);
    public BackgroundSize ReadBackgroundSize(int index);
    public void ReadListEasingFunction(List`1<EasingFunction> list, int index);
    public void ReadListTimeValue(List`1<TimeValue> list, int index);
    public void ReadListStylePropertyName(List`1<StylePropertyName> list, int index);
    public void ReadListString(List`1<string> list, int index);
    private void LoadProperties();
    private void SetCurrentProperty();
    public static TransformOrigin ReadTransformOrigin(int valCount, StylePropertyValue val1, StylePropertyValue val2, StylePropertyValue zVvalue);
    private static Length ReadTransformOriginEnum(StylePropertyValue value, Boolean& isVertical, Boolean& isHorizontal);
    public static Translate ReadTranslate(int valCount, StylePropertyValue val1, StylePropertyValue val2, StylePropertyValue val3);
    public static Scale ReadScale(int valCount, StylePropertyValue val1, StylePropertyValue val2, StylePropertyValue val3);
    public static Rotate ReadRotate(int valCount, StylePropertyValue val1, StylePropertyValue val2, StylePropertyValue val3, StylePropertyValue val4);
    private static bool TryReadEnum(StyleEnumType enumType, StylePropertyValue value, Int32& intValue);
    private static int ReadEnum(StyleEnumType enumType, StylePropertyValue value);
    public static Angle ReadAngle(StylePropertyValue value);
    public static BackgroundPosition ReadBackgroundPosition(int valCount, StylePropertyValue val1, StylePropertyValue val2, BackgroundPositionKeyword keyword);
    public static BackgroundRepeat ReadBackgroundRepeat(int valCount, StylePropertyValue val1, StylePropertyValue val2);
    public static BackgroundSize ReadBackgroundSize(int valCount, StylePropertyValue val1, StylePropertyValue val2);
    internal static bool TryGetImageSourceFromValue(StylePropertyValue propertyValue, float dpiScaling, ImageSource& source);
}
internal static class UnityEngine.UIElements.StyleSheets.StylePropertyUtil : object {
    public static int k_GroupOffset;
    internal static Dictionary`2<string, StylePropertyId> s_NameToId;
    internal static Dictionary`2<StylePropertyId, string> s_IdToName;
    internal static HashSet`1<StylePropertyId> s_AnimatableProperties;
    internal static Dictionary`2<StylePropertyId, UsageHints> s_AnimatableWithUsageHintProperties;
    private static StylePropertyUtil();
    public static bool TryGetEnumIntValue(StyleEnumType enumType, string value, Int32& intValue);
    public static bool IsMatchingShorthand(StylePropertyId shorthand, StylePropertyId id);
    public static IEnumerable`1<Type> GetAllowedAssetTypesForProperty(StylePropertyId id);
    public static bool IsAnimatable(StylePropertyId id);
    public static IEnumerable`1<StylePropertyId> AllPropertyIds();
}
internal class UnityEngine.UIElements.StyleSheets.StylePropertyValue : ValueType {
    public StyleSheet sheet;
    public StyleValueHandle handle;
}
internal class UnityEngine.UIElements.StyleSheets.StylePropertyValueMatcher : BaseStyleMatcher {
    private List`1<StylePropertyValue> m_Values;
    private StylePropertyValue current { get; }
    public int valueCount { get; }
    public bool isCurrentVariable { get; }
    public bool isCurrentComma { get; }
    private StylePropertyValue get_current();
    public virtual int get_valueCount();
    public virtual bool get_isCurrentVariable();
    public virtual bool get_isCurrentComma();
    public MatchResult Match(Expression exp, List`1<StylePropertyValue> values);
    protected virtual bool MatchKeyword(string keyword);
    protected virtual bool MatchNumber();
    protected virtual bool MatchInteger();
    protected virtual bool MatchLength();
    protected virtual bool MatchPercentage();
    protected virtual bool MatchColor();
    protected virtual bool MatchResource();
    protected virtual bool MatchUrl();
    protected virtual bool MatchTime();
    protected virtual bool MatchCustomIdent();
    protected virtual bool MatchAngle();
}
internal class UnityEngine.UIElements.StyleSheets.StylePropertyValueParser : object {
    private string m_PropertyValue;
    private List`1<string> m_ValueList;
    private StringBuilder m_StringBuilder;
    private int m_ParseIndex;
    public String[] Parse(string propertyValue);
    private void AddValuePart();
    private void AppendFunction();
    private void EatSpace();
}
internal static class UnityEngine.UIElements.StyleSheets.StyleSelectorHelper : object {
    public static MatchResultInfo MatchesSelector(VisualElement element, StyleSelector selector);
    public static bool MatchRightToLeft(VisualElement element, StyleComplexSelector complexSelector, Action`2<VisualElement, MatchResultInfo> processResult);
    private static void FastLookup(IDictionary`2<string, StyleComplexSelector> table, List`1<SelectorMatchRecord> matchedSelectors, StyleMatchingContext context, string input, SelectorMatchRecord& record);
    public static void FindMatches(StyleMatchingContext context, List`1<SelectorMatchRecord> matchedSelectors);
    public static void FindMatches(StyleMatchingContext context, List`1<SelectorMatchRecord> matchedSelectors, int parentSheetIndex);
}
internal class UnityEngine.UIElements.StyleSheets.StyleSheetBuilder : object {
    private BuilderState m_BuilderState;
    private List`1<float> m_Floats;
    private List`1<Dimension> m_Dimensions;
    private List`1<Color> m_Colors;
    private List`1<string> m_Strings;
    private List`1<StyleRule> m_Rules;
    private List`1<Object> m_Assets;
    private List`1<ScalableImage> m_ScalableImages;
    private List`1<StyleComplexSelector> m_ComplexSelectors;
    private List`1<StyleProperty> m_CurrentProperties;
    private List`1<StyleValueHandle> m_CurrentValues;
    private StyleComplexSelector m_CurrentComplexSelector;
    private List`1<StyleSelector> m_CurrentSelectors;
    private StyleProperty m_CurrentProperty;
    private StyleRule m_CurrentRule;
    private List`1<ImportStruct> m_Imports;
    public StyleProperty currentProperty { get; }
    public StyleProperty get_currentProperty();
    public StyleRule BeginRule(int ruleLine);
    public ComplexSelectorScope BeginComplexSelector(int specificity);
    public void AddSimpleSelector(StyleSelectorPart[] parts, StyleSelectorRelationship previousRelationsip);
    public void EndComplexSelector();
    public StyleProperty BeginProperty(string name, int line);
    public void AddImport(ImportStruct importStruct);
    public void AddValue(float value);
    public void AddValue(Dimension value);
    public void AddValue(StyleValueKeyword keyword);
    public void AddValue(StyleValueFunction function);
    public void AddCommaSeparator();
    public void AddValue(string value, StyleValueType type);
    public void AddValue(Color value);
    public void AddValue(Object value);
    public void AddValue(ScalableImage value);
    public void EndProperty();
    public int EndRule();
    public void BuildTo(StyleSheet writeTo);
    private void RegisterVariable(string value);
    private void RegisterValue(List`1<T> list, StyleValueType type, T value);
    private static void Log(string msg);
}
internal static class UnityEngine.UIElements.StyleSheets.StyleSheetCache : object {
    private static SheetHandleKeyComparer s_Comparer;
    private static Dictionary`2<SheetHandleKey, StylePropertyId[]> s_RulePropertyIdsCache;
    private static StyleSheetCache();
    internal static void ClearCaches();
    internal static StylePropertyId[] GetPropertyIds(StyleSheet sheet, int ruleIndex);
    internal static StylePropertyId[] GetPropertyIds(StyleRule rule);
    private static StylePropertyId GetPropertyId(StyleRule rule, int index);
}
internal static class UnityEngine.UIElements.StyleSheets.StyleSheetColor : object {
    private static Dictionary`2<string, Color32> s_NameToColor;
    private static StyleSheetColor();
    public static bool TryGetColor(string name, Color& color);
    private static Color32 HexToColor32(UInt32 color);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.StyleSheets.StyleSheetExtensions : object {
    [ExtensionAttribute]
public static string ReadAsString(StyleSheet sheet, StyleValueHandle handle);
    [ExtensionAttribute]
public static bool IsVarFunction(StyleValueHandle handle);
}
internal class UnityEngine.UIElements.StyleSheets.StyleValidationResult : ValueType {
    public StyleValidationStatus status;
    public string message;
    public string errorValue;
    public string hint;
    public bool success { get; }
    public bool get_success();
}
internal enum UnityEngine.UIElements.StyleSheets.StyleValidationStatus : Enum {
    public int value__;
    public static StyleValidationStatus Ok;
    public static StyleValidationStatus Error;
    public static StyleValidationStatus Warning;
}
internal class UnityEngine.UIElements.StyleSheets.StyleValidator : object {
    private StyleSyntaxParser m_SyntaxParser;
    private StyleMatcher m_StyleMatcher;
    public StyleValidationResult ValidateProperty(string name, string value);
    private bool IsUnitMissing(string propertySyntax, string propertyValue, String& unitHint);
    private bool IsUnsupportedColor(string propertySyntax);
}
[DebuggerDisplayAttribute("id = {id}, keyword = {keyword}, number = {number}, boolean = {boolean}, color = {color}, object = {resource}")]
internal class UnityEngine.UIElements.StyleSheets.StyleValue : ValueType {
    public StylePropertyId id;
    public StyleKeyword keyword;
    public float number;
    public Length length;
    public Color color;
    public GCHandle resource;
    public BackgroundPosition position;
    public BackgroundRepeat repeat;
}
internal class UnityEngine.UIElements.StyleSheets.StyleValueManaged : ValueType {
    public StylePropertyId id;
    public StyleKeyword keyword;
    public object value;
}
internal enum UnityEngine.UIElements.StyleSheets.Syntax.DataType : Enum {
    public int value__;
    public static DataType None;
    public static DataType Number;
    public static DataType Integer;
    public static DataType Length;
    public static DataType Percentage;
    public static DataType Color;
    public static DataType Resource;
    public static DataType Url;
    public static DataType Time;
    public static DataType Angle;
    public static DataType CustomIdent;
}
internal class UnityEngine.UIElements.StyleSheets.Syntax.Expression : object {
    public ExpressionType type;
    public ExpressionMultiplier multiplier;
    public DataType dataType;
    public ExpressionCombinator combinator;
    public Expression[] subExpressions;
    public string keyword;
    public Expression(ExpressionType type);
}
internal enum UnityEngine.UIElements.StyleSheets.Syntax.ExpressionCombinator : Enum {
    public int value__;
    public static ExpressionCombinator None;
    public static ExpressionCombinator Or;
    public static ExpressionCombinator OrOr;
    public static ExpressionCombinator AndAnd;
    public static ExpressionCombinator Juxtaposition;
    public static ExpressionCombinator Group;
}
internal class UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplier : ValueType {
    public static int Infinity;
    private ExpressionMultiplierType m_Type;
    public int min;
    public int max;
    public ExpressionMultiplierType type { get; public set; }
    public ExpressionMultiplier(ExpressionMultiplierType type);
    public ExpressionMultiplierType get_type();
    public void set_type(ExpressionMultiplierType value);
    private void SetType(ExpressionMultiplierType value);
}
internal enum UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType : Enum {
    public int value__;
    public static ExpressionMultiplierType None;
    public static ExpressionMultiplierType ZeroOrMore;
    public static ExpressionMultiplierType OneOrMore;
    public static ExpressionMultiplierType ZeroOrOne;
    public static ExpressionMultiplierType Ranges;
    public static ExpressionMultiplierType OneOrMoreComma;
    public static ExpressionMultiplierType GroupAtLeastOne;
}
internal enum UnityEngine.UIElements.StyleSheets.Syntax.ExpressionType : Enum {
    public int value__;
    public static ExpressionType Unknown;
    public static ExpressionType Data;
    public static ExpressionType Keyword;
    public static ExpressionType Combinator;
}
internal class UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxParser : object {
    private List`1<Expression> m_ProcessExpressionList;
    private Stack`1<Expression> m_ExpressionStack;
    private Stack`1<ExpressionCombinator> m_CombinatorStack;
    private Dictionary`2<string, Expression> m_ParsedExpressionCache;
    public Expression Parse(string syntax);
    private Expression ParseExpression(StyleSyntaxTokenizer tokenizer);
    private void ProcessCombinatorStack();
    private Expression ParseTerm(StyleSyntaxTokenizer tokenizer);
    private ExpressionCombinator ParseCombinatorType(StyleSyntaxTokenizer tokenizer);
    private Expression ParseGroup(StyleSyntaxTokenizer tokenizer);
    private Expression ParseDataType(StyleSyntaxTokenizer tokenizer);
    private Expression ParseNonTerminalValue(string syntax);
    private Expression ParseProperty(StyleSyntaxTokenizer tokenizer);
    private void ParseMultiplier(StyleSyntaxTokenizer tokenizer, ExpressionMultiplier& multiplier);
    private void ParseRanges(StyleSyntaxTokenizer tokenizer, Int32& min, Int32& max);
    private static void EatSpace(StyleSyntaxTokenizer tokenizer);
    private static bool IsExpressionEnd(StyleSyntaxToken token);
    private static bool IsCombinator(StyleSyntaxToken token);
    private static bool IsMultiplier(StyleSyntaxToken token);
}
internal class UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxToken : ValueType {
    public StyleSyntaxTokenType type;
    public string text;
    public int number;
    public StyleSyntaxToken(StyleSyntaxTokenType t);
    public StyleSyntaxToken(StyleSyntaxTokenType type, string text);
    public StyleSyntaxToken(StyleSyntaxTokenType type, int number);
}
internal class UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxTokenizer : object {
    private List`1<StyleSyntaxToken> m_Tokens;
    private int m_CurrentTokenIndex;
    public StyleSyntaxToken current { get; }
    public StyleSyntaxToken get_current();
    public StyleSyntaxToken MoveNext();
    public StyleSyntaxToken PeekNext();
    public void Tokenize(string syntax);
    private static bool IsNextCharacter(string s, int index, char c);
    private static bool IsNextLetterOrDash(string s, int index);
    private static bool IsNextNumber(string s, int index);
    private static int GlobCharacter(string s, int index, char c);
}
internal enum UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxTokenType : Enum {
    public int value__;
    public static StyleSyntaxTokenType Unknown;
    public static StyleSyntaxTokenType String;
    public static StyleSyntaxTokenType Number;
    public static StyleSyntaxTokenType Space;
    public static StyleSyntaxTokenType SingleBar;
    public static StyleSyntaxTokenType DoubleBar;
    public static StyleSyntaxTokenType DoubleAmpersand;
    public static StyleSyntaxTokenType Comma;
    public static StyleSyntaxTokenType SingleQuote;
    public static StyleSyntaxTokenType Asterisk;
    public static StyleSyntaxTokenType Plus;
    public static StyleSyntaxTokenType QuestionMark;
    public static StyleSyntaxTokenType HashMark;
    public static StyleSyntaxTokenType ExclamationPoint;
    public static StyleSyntaxTokenType OpenBracket;
    public static StyleSyntaxTokenType CloseBracket;
    public static StyleSyntaxTokenType OpenBrace;
    public static StyleSyntaxTokenType CloseBrace;
    public static StyleSyntaxTokenType LessThan;
    public static StyleSyntaxTokenType GreaterThan;
    public static StyleSyntaxTokenType End;
}
public class UnityEngine.UIElements.StyleTextShadow : ValueType {
    private StyleKeyword m_Keyword;
    private TextShadow m_Value;
    public TextShadow value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleTextShadow(TextShadow v);
    public StyleTextShadow(StyleKeyword keyword);
    internal StyleTextShadow(TextShadow v, StyleKeyword keyword);
    public sealed virtual TextShadow get_value();
    public sealed virtual void set_value(TextShadow value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleTextShadow lhs, StyleTextShadow rhs);
    public static bool op_Inequality(StyleTextShadow lhs, StyleTextShadow rhs);
    public static StyleTextShadow op_Implicit(StyleKeyword keyword);
    public static StyleTextShadow op_Implicit(TextShadow v);
    public sealed virtual bool Equals(StyleTextShadow other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.StyleTransformOrigin : ValueType {
    private TransformOrigin m_Value;
    private StyleKeyword m_Keyword;
    public TransformOrigin value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleTransformOrigin(TransformOrigin v);
    public StyleTransformOrigin(StyleKeyword keyword);
    internal StyleTransformOrigin(TransformOrigin v, StyleKeyword keyword);
    public sealed virtual TransformOrigin get_value();
    public sealed virtual void set_value(TransformOrigin value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleTransformOrigin lhs, StyleTransformOrigin rhs);
    public static bool op_Inequality(StyleTransformOrigin lhs, StyleTransformOrigin rhs);
    public static StyleTransformOrigin op_Implicit(StyleKeyword keyword);
    public static StyleTransformOrigin op_Implicit(TransformOrigin v);
    public sealed virtual bool Equals(StyleTransformOrigin other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.StyleTranslate : ValueType {
    private Translate m_Value;
    private StyleKeyword m_Keyword;
    public Translate value { get; public set; }
    public StyleKeyword keyword { get; public set; }
    public StyleTranslate(Translate v);
    public StyleTranslate(StyleKeyword keyword);
    internal StyleTranslate(Translate v, StyleKeyword keyword);
    public sealed virtual Translate get_value();
    public sealed virtual void set_value(Translate value);
    public sealed virtual StyleKeyword get_keyword();
    public sealed virtual void set_keyword(StyleKeyword value);
    public static bool op_Equality(StyleTranslate lhs, StyleTranslate rhs);
    public static bool op_Inequality(StyleTranslate lhs, StyleTranslate rhs);
    public static StyleTranslate op_Implicit(StyleKeyword keyword);
    public static StyleTranslate op_Implicit(Translate v);
    public sealed virtual bool Equals(StyleTranslate other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class UnityEngine.UIElements.StyleValueCollection : object {
    internal List`1<StyleValue> m_Values;
    public StyleLength GetStyleLength(StylePropertyId id);
    public StyleFloat GetStyleFloat(StylePropertyId id);
    public StyleInt GetStyleInt(StylePropertyId id);
    public StyleColor GetStyleColor(StylePropertyId id);
    public StyleBackground GetStyleBackground(StylePropertyId id);
    public StyleBackgroundPosition GetStyleBackgroundPosition(StylePropertyId id);
    public StyleBackgroundRepeat GetStyleBackgroundRepeat(StylePropertyId id);
    public StyleFont GetStyleFont(StylePropertyId id);
    public StyleFontDefinition GetStyleFontDefinition(StylePropertyId id);
    public bool TryGetStyleValue(StylePropertyId id, StyleValue& value);
    public void SetStyleValue(StyleValue value);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.StyleValueExtensions : object {
    [ExtensionAttribute]
internal static string DebugString(IStyleValue`1<T> styleValue);
    [ExtensionAttribute]
internal static YogaValue ToYogaValue(Length length);
    [ExtensionAttribute]
internal static Length ToLength(StyleKeyword keyword);
    [ExtensionAttribute]
internal static Rotate ToRotate(StyleKeyword keyword);
    [ExtensionAttribute]
internal static Scale ToScale(StyleKeyword keyword);
    [ExtensionAttribute]
internal static Translate ToTranslate(StyleKeyword keyword);
    [ExtensionAttribute]
internal static Length ToLength(StyleLength styleLength);
    [ExtensionAttribute]
internal static void CopyFrom(List`1<T> list, List`1<T> other);
}
internal enum UnityEngine.UIElements.StyleValueFunction : Enum {
    public int value__;
    public static StyleValueFunction Unknown;
    public static StyleValueFunction Var;
    public static StyleValueFunction Env;
    public static StyleValueFunction LinearGradient;
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.StyleValueFunctionExtension : object {
    public static string k_Var;
    public static string k_Env;
    public static string k_LinearGradient;
    public static StyleValueFunction FromUssString(string ussValue);
    [ExtensionAttribute]
public static string ToUssString(StyleValueFunction svf);
}
internal class UnityEngine.UIElements.StyleValueHandle : ValueType {
    [SerializeField]
private StyleValueType m_ValueType;
    [SerializeField]
internal int valueIndex;
    public StyleValueType valueType { get; internal set; }
    internal StyleValueHandle(int valueIndex, StyleValueType valueType);
    public StyleValueType get_valueType();
    internal void set_valueType(StyleValueType value);
}
internal enum UnityEngine.UIElements.StyleValueKeyword : Enum {
    public int value__;
    public static StyleValueKeyword Inherit;
    public static StyleValueKeyword Initial;
    public static StyleValueKeyword Auto;
    public static StyleValueKeyword Unset;
    public static StyleValueKeyword True;
    public static StyleValueKeyword False;
    public static StyleValueKeyword None;
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.StyleValueKeywordExtension : object {
    [ExtensionAttribute]
public static string ToUssString(StyleValueKeyword svk);
}
internal enum UnityEngine.UIElements.StyleValueType : Enum {
    public int value__;
    public static StyleValueType Invalid;
    public static StyleValueType Keyword;
    public static StyleValueType Float;
    public static StyleValueType Dimension;
    public static StyleValueType Color;
    public static StyleValueType ResourcePath;
    public static StyleValueType AssetReference;
    public static StyleValueType Enum;
    public static StyleValueType Variable;
    public static StyleValueType String;
    public static StyleValueType Function;
    public static StyleValueType CommaSeparator;
    public static StyleValueType ScalableImage;
    public static StyleValueType MissingAssetReference;
}
internal class UnityEngine.UIElements.StyleVariable : ValueType {
    public string name;
    public StyleSheet sheet;
    public StyleValueHandle[] handles;
    public StyleVariable(string name, StyleSheet sheet, StyleValueHandle[] handles);
    public virtual int GetHashCode();
}
internal class UnityEngine.UIElements.StyleVariableContext : object {
    public static StyleVariableContext none;
    private int m_VariableHash;
    private List`1<StyleVariable> m_Variables;
    private List`1<int> m_SortedHash;
    private List`1<int> m_UnsortedHash;
    public List`1<StyleVariable> variables { get; }
    public StyleVariableContext(StyleVariableContext other);
    private static StyleVariableContext();
    public List`1<StyleVariable> get_variables();
    public void Add(StyleVariable sv);
    public void AddInitialRange(StyleVariableContext other);
    public void Clear();
    public bool TryFindVariable(string name, StyleVariable& v);
    public int GetVariableHash();
    [CompilerGeneratedAttribute]
internal static int <Add>g__ComputeOrderSensitiveHash|7_0(int index, <>c__DisplayClass7_0& );
}
internal class UnityEngine.UIElements.StyleVariableResolver : object {
    internal static int kMaxResolves;
    private static StyleSyntaxParser s_SyntaxParser;
    private StylePropertyValueMatcher m_Matcher;
    private List`1<StylePropertyValue> m_ResolvedValues;
    private Stack`1<string> m_ResolvedVarStack;
    private StyleProperty m_Property;
    private Stack`1<ResolveContext> m_ContextStack;
    private ResolveContext m_CurrentContext;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private StyleVariableContext <variableContext>k__BackingField;
    private StyleSheet currentSheet { get; }
    private StyleValueHandle[] currentHandles { get; }
    public List`1<StylePropertyValue> resolvedValues { get; }
    public StyleVariableContext variableContext { get; public set; }
    private static StyleVariableResolver();
    private StyleSheet get_currentSheet();
    private StyleValueHandle[] get_currentHandles();
    public List`1<StylePropertyValue> get_resolvedValues();
    [CompilerGeneratedAttribute]
public StyleVariableContext get_variableContext();
    [CompilerGeneratedAttribute]
public void set_variableContext(StyleVariableContext value);
    public void Init(StyleProperty property, StyleSheet sheet, StyleValueHandle[] handles);
    private void PushContext(StyleSheet sheet, StyleValueHandle[] handles);
    private void PopContext();
    public void AddValue(StyleValueHandle handle);
    public bool ResolveVarFunction(Int32& index);
    private Result ResolveVarFunction(Int32& index, int argc, string varName);
    public bool ValidateResolvedValues();
    private Result ResolveVariable(string variableName);
    private Result ResolveFallback(Int32& index);
    private static void ParseVarFunction(StyleSheet sheet, StyleValueHandle[] handles, Int32& index, Int32& argCount, String& variableName);
}
internal class UnityEngine.UIElements.TemplateAsset : VisualElementAsset {
    [SerializeField]
private string m_TemplateAlias;
    [SerializeField]
private List`1<AttributeOverride> m_AttributeOverrides;
    [SerializeField]
private List`1<SlotUsageEntry> m_SlotUsages;
    public string templateAlias { get; public set; }
    public List`1<AttributeOverride> attributeOverrides { get; public set; }
    internal List`1<SlotUsageEntry> slotUsages { get; internal set; }
    public TemplateAsset(string templateAlias, string fullTypeName);
    public string get_templateAlias();
    public void set_templateAlias(string value);
    public List`1<AttributeOverride> get_attributeOverrides();
    public void set_attributeOverrides(List`1<AttributeOverride> value);
    internal List`1<SlotUsageEntry> get_slotUsages();
    internal void set_slotUsages(List`1<SlotUsageEntry> value);
    public void AddSlotUsage(string slotName, int resId);
}
public class UnityEngine.UIElements.TemplateContainer : BindableElement {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <templateId>k__BackingField;
    private VisualElement m_ContentContainer;
    private VisualTreeAsset m_TemplateSource;
    public string templateId { get; private set; }
    public VisualTreeAsset templateSource { get; internal set; }
    public VisualElement contentContainer { get; }
    public TemplateContainer(string templateId);
    [CompilerGeneratedAttribute]
public string get_templateId();
    [CompilerGeneratedAttribute]
private void set_templateId(string value);
    public VisualTreeAsset get_templateSource();
    internal void set_templateSource(VisualTreeAsset value);
    public virtual VisualElement get_contentContainer();
    internal void SetContentContainer(VisualElement content);
}
internal class UnityEngine.UIElements.TextEditingManipulator : object {
    private TextElement m_TextElement;
    internal TextEditorEventHandler editingEventHandler;
    internal TextEditingUtilities editingUtilities;
    private bool m_TouchScreenTextFieldInitialized;
    private IVisualElementScheduledItem m_HardwareKeyboardPoller;
    private bool touchScreenTextFieldChanged { get; }
    public TextEditingManipulator(TextElement textElement);
    private bool get_touchScreenTextFieldChanged();
    private void InitTextEditorEventHandler();
    internal void ExecuteDefaultActionAtTarget(EventBase evt);
    private void OnFocusInEvent(FocusInEvent _);
    private void OnFocusOutEvent(FocusOutEvent _);
    [CompilerGeneratedAttribute]
private void <OnFocusInEvent>b__10_0();
}
internal class UnityEngine.UIElements.TextEditorEventHandler : object {
    protected TextElement textElement;
    protected TextEditingUtilities editingUtilities;
    protected TextEditorEventHandler(TextElement textElement, TextEditingUtilities editingUtilities);
    public virtual void ExecuteDefaultActionAtTarget(EventBase evt);
}
public class UnityEngine.UIElements.TextElement : BindableElement {
    public static string ussClassName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UITKTextHandle <uitkTextHandle>k__BackingField;
    private string m_Text;
    private bool m_EnableRichText;
    private bool m_ParseEscapeSequences;
    private bool m_DisplayTooltipWhenElided;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isElided>k__BackingField;
    internal static string k_EllipsisText;
    internal string elidedText;
    private bool m_WasElided;
    internal TextEditingManipulator editingManipulator;
    private bool m_Multiline;
    internal TouchScreenKeyboard m_TouchScreenKeyboard;
    internal TouchScreenKeyboardType m_KeyboardType;
    private bool m_HideMobileInput;
    private bool m_IsReadOnly;
    private int m_MaxLength;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UnityEngine.UIElements.ITextEdition.isDelayed>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<char, bool> <UnityEngine.UIElements.ITextEdition.AcceptCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<bool> <UnityEngine.UIElements.ITextEdition.UpdateScrollOffset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action <UnityEngine.UIElements.ITextEdition.UpdateValueFromText>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action <UnityEngine.UIElements.ITextEdition.UpdateTextFromValue>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action <UnityEngine.UIElements.ITextEdition.MoveFocusToCompositeRoot>k__BackingField;
    private string m_RenderedText;
    private string m_OriginalText;
    private char m_MaskChar;
    private bool m_IsPassword;
    private bool m_AutoCorrection;
    private TextSelectingManipulator m_SelectingManipulator;
    private bool m_IsSelectable;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UnityEngine.UIElements.ITextSelection.doubleClickSelectsWord>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UnityEngine.UIElements.ITextSelection.tripleClickSelectsLine>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <UnityEngine.UIElements.ITextSelection.selectAllOnFocus>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <UnityEngine.UIElements.ITextSelection.selectAllOnMouseUp>k__BackingField;
    private Color m_SelectionColor;
    private Color m_CursorColor;
    private float m_CursorWidth;
    internal UITKTextHandle uitkTextHandle { get; internal set; }
    public string text { get; public set; }
    public bool enableRichText { get; public set; }
    public bool parseEscapeSequences { get; public set; }
    public bool displayTooltipWhenElided { get; public set; }
    public bool isElided { get; private set; }
    internal bool hasFocus { get; }
    private string UnityEngine.UIElements.INotifyValueChanged<System.String>.value { get; private set; }
    internal ITextEdition edition { get; }
    private bool UnityEngine.UIElements.ITextEdition.multiline { get; private set; }
    private TouchScreenKeyboard UnityEngine.UIElements.ITextEdition.touchScreenKeyboard { get; }
    private TouchScreenKeyboardType UnityEngine.UIElements.ITextEdition.keyboardType { get; private set; }
    private bool UnityEngine.UIElements.ITextEdition.hideMobileInput { get; private set; }
    private bool UnityEngine.UIElements.ITextEdition.isReadOnly { get; private set; }
    private int UnityEngine.UIElements.ITextEdition.maxLength { get; private set; }
    private bool UnityEngine.UIElements.ITextEdition.isDelayed { get; private set; }
    private Func`2<char, bool> UnityEngine.UIElements.ITextEdition.AcceptCharacter { get; private set; }
    private Action`1<bool> UnityEngine.UIElements.ITextEdition.UpdateScrollOffset { get; private set; }
    private Action UnityEngine.UIElements.ITextEdition.UpdateValueFromText { get; private set; }
    private Action UnityEngine.UIElements.ITextEdition.UpdateTextFromValue { get; private set; }
    private Action UnityEngine.UIElements.ITextEdition.MoveFocusToCompositeRoot { get; private set; }
    private char UnityEngine.UIElements.ITextEdition.maskChar { get; private set; }
    private char effectiveMaskChar { get; }
    private bool UnityEngine.UIElements.ITextEdition.isPassword { get; private set; }
    private bool UnityEngine.UIElements.ITextEdition.autoCorrection { get; private set; }
    internal string renderedText { get; internal set; }
    internal string originalText { get; }
    public ITextElementExperimentalFeatures experimental { get; }
    public ITextSelection selection { get; }
    private bool UnityEngine.UIElements.ITextSelection.isSelectable { get; private set; }
    private int UnityEngine.UIElements.ITextSelection.cursorIndex { get; private set; }
    private int UnityEngine.UIElements.ITextSelection.selectIndex { get; private set; }
    private bool UnityEngine.UIElements.ITextSelection.doubleClickSelectsWord { get; private set; }
    private bool UnityEngine.UIElements.ITextSelection.tripleClickSelectsLine { get; private set; }
    private bool UnityEngine.UIElements.ITextSelection.selectAllOnFocus { get; private set; }
    private bool UnityEngine.UIElements.ITextSelection.selectAllOnMouseUp { get; private set; }
    private Vector2 UnityEngine.UIElements.ITextSelection.cursorPosition { get; }
    private float UnityEngine.UIElements.ITextSelection.lineHeightAtCursorPosition { get; }
    private Color UnityEngine.UIElements.ITextSelection.selectionColor { get; private set; }
    private Color UnityEngine.UIElements.ITextSelection.cursorColor { get; private set; }
    private Color cursorColor { get; private set; }
    private float UnityEngine.UIElements.ITextSelection.cursorWidth { get; private set; }
    internal TextSelectingManipulator selectingManipulator { get; }
    private static TextElement();
    [CompilerGeneratedAttribute]
internal UITKTextHandle get_uitkTextHandle();
    [CompilerGeneratedAttribute]
internal void set_uitkTextHandle(UITKTextHandle value);
    private void OnGeometryChanged(GeometryChangedEvent e);
    public virtual string get_text();
    public virtual void set_text(string value);
    public bool get_enableRichText();
    public void set_enableRichText(bool value);
    public bool get_parseEscapeSequences();
    public void set_parseEscapeSequences(bool value);
    public bool get_displayTooltipWhenElided();
    public void set_displayTooltipWhenElided(bool value);
    [CompilerGeneratedAttribute]
public bool get_isElided();
    [CompilerGeneratedAttribute]
private void set_isElided(bool value);
    internal void OnGenerateVisualContent(MeshGenerationContext mgc);
    internal string ElideText(string drawText, string ellipsisText, float width, TextOverflowPosition textOverflowPosition);
    private void UpdateTooltip();
    private void UpdateVisibleText();
    private bool ShouldElide();
    internal bool get_hasFocus();
    public Vector2 MeasureTextSize(string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode);
    protected internal virtual Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode);
    private sealed virtual override string UnityEngine.UIElements.INotifyValueChanged<System.String>.get_value();
    private sealed virtual override void UnityEngine.UIElements.INotifyValueChanged<System.String>.set_value(string value);
    private sealed virtual override void UnityEngine.UIElements.INotifyValueChanged<System.String>.SetValueWithoutNotify(string newValue);
    internal ITextEdition get_edition();
    private sealed virtual override bool UnityEngine.UIElements.ITextEdition.get_multiline();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_multiline(bool value);
    private sealed virtual override TouchScreenKeyboard UnityEngine.UIElements.ITextEdition.get_touchScreenKeyboard();
    private sealed virtual override TouchScreenKeyboardType UnityEngine.UIElements.ITextEdition.get_keyboardType();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_keyboardType(TouchScreenKeyboardType value);
    private sealed virtual override bool UnityEngine.UIElements.ITextEdition.get_hideMobileInput();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_hideMobileInput(bool value);
    private sealed virtual override bool UnityEngine.UIElements.ITextEdition.get_isReadOnly();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_isReadOnly(bool value);
    private void ProcessMenuCommand(string command);
    private void Cut(DropdownMenuAction a);
    private void Copy(DropdownMenuAction a);
    private void Paste(DropdownMenuAction a);
    private void BuildContextualMenu(ContextualMenuPopulateEvent evt);
    private Status CutActionStatus(DropdownMenuAction a);
    private Status CopyActionStatus(DropdownMenuAction a);
    private Status PasteActionStatus(DropdownMenuAction a);
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultActionAtTarget(EventBase evt);
    private sealed virtual override int UnityEngine.UIElements.ITextEdition.get_maxLength();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_maxLength(int value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool UnityEngine.UIElements.ITextEdition.get_isDelayed();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_isDelayed(bool value);
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.ResetValueAndText();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.SaveValueAndText();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.RestoreValueAndText();
    [CompilerGeneratedAttribute]
private sealed virtual override Func`2<char, bool> UnityEngine.UIElements.ITextEdition.get_AcceptCharacter();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_AcceptCharacter(Func`2<char, bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Action`1<bool> UnityEngine.UIElements.ITextEdition.get_UpdateScrollOffset();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_UpdateScrollOffset(Action`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Action UnityEngine.UIElements.ITextEdition.get_UpdateValueFromText();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_UpdateValueFromText(Action value);
    [CompilerGeneratedAttribute]
private sealed virtual override Action UnityEngine.UIElements.ITextEdition.get_UpdateTextFromValue();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_UpdateTextFromValue(Action value);
    [CompilerGeneratedAttribute]
private sealed virtual override Action UnityEngine.UIElements.ITextEdition.get_MoveFocusToCompositeRoot();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_MoveFocusToCompositeRoot(Action value);
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.UpdateText(string value);
    private sealed virtual override string UnityEngine.UIElements.ITextEdition.CullString(string s);
    private sealed virtual override char UnityEngine.UIElements.ITextEdition.get_maskChar();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_maskChar(char value);
    private char get_effectiveMaskChar();
    private sealed virtual override bool UnityEngine.UIElements.ITextEdition.get_isPassword();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_isPassword(bool value);
    private sealed virtual override bool UnityEngine.UIElements.ITextEdition.get_autoCorrection();
    private sealed virtual override void UnityEngine.UIElements.ITextEdition.set_autoCorrection(bool value);
    internal string get_renderedText();
    internal void set_renderedText(string value);
    internal string get_originalText();
    public ITextElementExperimentalFeatures get_experimental();
    private sealed virtual override void UnityEngine.UIElements.ITextElementExperimentalFeatures.SetRenderedText(string renderedText);
    public ITextSelection get_selection();
    private sealed virtual override bool UnityEngine.UIElements.ITextSelection.get_isSelectable();
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_isSelectable(bool value);
    private sealed virtual override int UnityEngine.UIElements.ITextSelection.get_cursorIndex();
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_cursorIndex(int value);
    private sealed virtual override int UnityEngine.UIElements.ITextSelection.get_selectIndex();
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_selectIndex(int value);
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.SelectAll();
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.SelectNone();
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.SelectRange(int cursorIndex, int selectionIndex);
    private sealed virtual override bool UnityEngine.UIElements.ITextSelection.HasSelection();
    [CompilerGeneratedAttribute]
private sealed virtual override bool UnityEngine.UIElements.ITextSelection.get_doubleClickSelectsWord();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_doubleClickSelectsWord(bool value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool UnityEngine.UIElements.ITextSelection.get_tripleClickSelectsLine();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_tripleClickSelectsLine(bool value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool UnityEngine.UIElements.ITextSelection.get_selectAllOnFocus();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_selectAllOnFocus(bool value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool UnityEngine.UIElements.ITextSelection.get_selectAllOnMouseUp();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_selectAllOnMouseUp(bool value);
    private sealed virtual override Vector2 UnityEngine.UIElements.ITextSelection.get_cursorPosition();
    private sealed virtual override float UnityEngine.UIElements.ITextSelection.get_lineHeightAtCursorPosition();
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.MoveTextEnd();
    private sealed virtual override Color UnityEngine.UIElements.ITextSelection.get_selectionColor();
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_selectionColor(Color value);
    private sealed virtual override Color UnityEngine.UIElements.ITextSelection.get_cursorColor();
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_cursorColor(Color value);
    private Color get_cursorColor();
    private void set_cursorColor(Color value);
    private sealed virtual override float UnityEngine.UIElements.ITextSelection.get_cursorWidth();
    private sealed virtual override void UnityEngine.UIElements.ITextSelection.set_cursorWidth(float value);
    internal TextSelectingManipulator get_selectingManipulator();
    private void DrawHighlighting(MeshGenerationContext mgc);
    internal void DrawCaret(MeshGenerationContext mgc);
    private int GetLastCharacterAt(int lineIndex);
}
public class UnityEngine.UIElements.TextField : TextInputBaseField`1<string> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    private TextInput textInput { get; }
    public bool multiline { get; public set; }
    public string value { get; public set; }
    public TextField(int maxLength, bool multiline, bool isPasswordField, char maskChar);
    public TextField(string label);
    public TextField(string label, int maxLength, bool multiline, bool isPasswordField, char maskChar);
    private static TextField();
    private TextInput get_textInput();
    public bool get_multiline();
    public void set_multiline(bool value);
    public virtual string get_value();
    public virtual void set_value(string value);
    public virtual void SetValueWithoutNotify(string newValue);
    internal virtual void UpdateTextFromValue();
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultAction(EventBase evt);
    internal virtual void OnViewDataReady();
    protected virtual string ValueToString(string value);
    protected virtual string StringToValue(string str);
}
public abstract class UnityEngine.UIElements.TextInputBaseField`1 : BaseField`1<TValueType> {
    private static CustomStyleProperty`1<Color> s_SelectionColorProperty;
    private static CustomStyleProperty`1<Color> s_CursorColorProperty;
    private int m_VisualInputTabIndex;
    private TextInputBase<TValueType> m_TextInputBase;
    internal static int kMaxLengthNone;
    internal static char kMaskCharDefault;
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    internal static string multilineContainerClassName;
    public static string singleLineInputUssClassName;
    public static string multilineInputUssClassName;
    internal static string multilineInputWithScrollViewUssClassName;
    public static string textInputUssName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<bool> onIsReadOnlyChanged;
    protected internal TextInputBase<TValueType> textInputBase { get; }
    public string text { get; protected internal set; }
    public bool isReadOnly { get; public set; }
    public bool isPasswordField { get; public set; }
    public bool autoCorrection { get; public set; }
    public bool hideMobileInput { get; public set; }
    public TouchScreenKeyboardType keyboardType { get; public set; }
    public TouchScreenKeyboard touchScreenKeyboard { get; }
    public ITextSelection textSelection { get; }
    public ITextEdition textEdition { get; }
    public Color selectionColor { get; }
    public Color cursorColor { get; }
    public int cursorIndex { get; public set; }
    public Vector2 cursorPosition { get; }
    public int selectIndex { get; public set; }
    public bool selectAllOnFocus { get; public set; }
    public bool selectAllOnMouseUp { get; public set; }
    public int maxLength { get; public set; }
    public bool doubleClickSelectsWord { get; public set; }
    public bool tripleClickSelectsLine { get; public set; }
    public bool isDelayed { get; public set; }
    public char maskChar { get; public set; }
    internal bool hasFocus { get; }
    protected TextInputBaseField`1(int maxLength, char maskChar, TextInputBase<TValueType> textInputBase);
    protected TextInputBaseField`1(string label, int maxLength, char maskChar, TextInputBase<TValueType> textInputBase);
    private static TextInputBaseField`1();
    protected internal TextInputBase<TValueType> get_textInputBase();
    public string get_text();
    protected internal void set_text(string value);
    [CompilerGeneratedAttribute]
protected void add_onIsReadOnlyChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
protected void remove_onIsReadOnlyChanged(Action`1<bool> value);
    public bool get_isReadOnly();
    public void set_isReadOnly(bool value);
    public bool get_isPasswordField();
    public void set_isPasswordField(bool value);
    public bool get_autoCorrection();
    public void set_autoCorrection(bool value);
    public bool get_hideMobileInput();
    public void set_hideMobileInput(bool value);
    public TouchScreenKeyboardType get_keyboardType();
    public void set_keyboardType(TouchScreenKeyboardType value);
    public TouchScreenKeyboard get_touchScreenKeyboard();
    public ITextSelection get_textSelection();
    public ITextEdition get_textEdition();
    public Color get_selectionColor();
    public Color get_cursorColor();
    public int get_cursorIndex();
    public void set_cursorIndex(int value);
    public Vector2 get_cursorPosition();
    public int get_selectIndex();
    public void set_selectIndex(int value);
    public void SelectAll();
    public void SelectNone();
    public void SelectRange(int cursorIndex, int selectionIndex);
    public bool get_selectAllOnFocus();
    public void set_selectAllOnFocus(bool value);
    public bool get_selectAllOnMouseUp();
    public void set_selectAllOnMouseUp(bool value);
    public int get_maxLength();
    public void set_maxLength(int value);
    public bool get_doubleClickSelectsWord();
    public void set_doubleClickSelectsWord(bool value);
    public bool get_tripleClickSelectsLine();
    public void set_tripleClickSelectsLine(bool value);
    public bool get_isDelayed();
    public void set_isDelayed(bool value);
    public char get_maskChar();
    public void set_maskChar(char value);
    public bool SetVerticalScrollerVisibility(ScrollerVisibility sv);
    public Vector2 MeasureTextSize(string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode);
    internal bool get_hasFocus();
    protected abstract virtual string ValueToString(TValueType value);
    protected abstract virtual TValueType StringToValue(string str);
    private void OnFieldCustomStyleResolved(CustomStyleResolvedEvent e);
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultActionAtTarget(EventBase evt);
    protected virtual void UpdateMixedValueContent();
    internal virtual void UpdateValueFromText();
    internal virtual void UpdateTextFromValue();
}
[NativeHeaderAttribute("ModuleOverrides/com.unity.ui/Core/Native/TextNative.bindings.h")]
internal static class UnityEngine.UIElements.TextNative : object {
    public static Vector2 GetCursorPosition(TextNativeSettings settings, Rect rect, int cursorIndex);
    public static float ComputeTextWidth(TextNativeSettings settings);
    public static float ComputeTextHeight(TextNativeSettings settings);
    public static NativeArray`1<TextVertex> GetVertices(TextNativeSettings settings);
    public static Vector2 GetOffset(TextNativeSettings settings, Rect screenRect);
    public static float ComputeTextScaling(Matrix4x4 worldMatrix, float pixelsPerPoint);
    [FreeFunctionAttribute]
private static float DoComputeTextWidth(TextNativeSettings settings);
    [FreeFunctionAttribute]
private static float DoComputeTextHeight(TextNativeSettings settings);
    [FreeFunctionAttribute]
private static Vector2 DoGetCursorPosition(TextNativeSettings settings, Rect rect, int cursorPosition);
    [FreeFunctionAttribute]
private static void GetVertices(TextNativeSettings settings, IntPtr buffer, int vertexSize, Int32& vertexCount);
    [FreeFunctionAttribute]
private static Vector2 DoGetOffset(TextNativeSettings settings, Rect rect);
    private static float DoComputeTextWidth_Injected(TextNativeSettings& settings);
    private static float DoComputeTextHeight_Injected(TextNativeSettings& settings);
    private static void DoGetCursorPosition_Injected(TextNativeSettings& settings, Rect& rect, int cursorPosition, Vector2& ret);
    private static void GetVertices_Injected(TextNativeSettings& settings, IntPtr buffer, int vertexSize, Int32& vertexCount);
    private static void DoGetOffset_Injected(TextNativeSettings& settings, Rect& rect, Vector2& ret);
}
internal class UnityEngine.UIElements.TextNativeSettings : ValueType {
    public string text;
    public Font font;
    public int size;
    public float scaling;
    public FontStyle style;
    public Color color;
    public TextAnchor anchor;
    public bool wordWrap;
    public float wordWrapWidth;
    public bool richText;
}
public enum UnityEngine.UIElements.TextOverflow : Enum {
    public int value__;
    public static TextOverflow Clip;
    public static TextOverflow Ellipsis;
}
public enum UnityEngine.UIElements.TextOverflowPosition : Enum {
    public int value__;
    public static TextOverflowPosition End;
    public static TextOverflowPosition Start;
    public static TextOverflowPosition Middle;
}
internal class UnityEngine.UIElements.TextSelectingManipulator : object {
    internal TextSelectingUtilities m_SelectingUtilities;
    private bool selectAllOnMouseUp;
    private TextElement m_TextElement;
    private Vector2 m_ClickStartPosition;
    private bool m_Dragged;
    private bool m_IsClicking;
    private static int k_DragThresholdSqr;
    private int m_ConsecutiveMouseDownCount;
    private long m_LastMouseDownTimeStamp;
    private Event m_ImguiEvent;
    internal bool isClicking { get; internal set; }
    internal int cursorIndex { get; internal set; }
    internal int selectIndex { get; internal set; }
    public TextSelectingManipulator(TextElement textElement);
    internal bool get_isClicking();
    internal void set_isClicking(bool value);
    internal int get_cursorIndex();
    internal void set_cursorIndex(int value);
    internal int get_selectIndex();
    internal void set_selectIndex(int value);
    private void OnRevealCursor();
    private void OnSelectIndexChange();
    private void OnCursorIndexChange();
    internal bool RevealCursor();
    internal bool HasSelection();
    internal bool HasFocus();
    internal void ExecuteDefaultActionAtTarget(EventBase evt);
    private void OnFocusEvent(FocusEvent evt);
    private void OnBlurEvent(BlurEvent evt);
    private void OnKeyDown(KeyDownEvent evt);
    private void OnPointerDownEvent(PointerDownEvent evt);
    private void OnPointerMoveEvent(PointerMoveEvent evt);
    private void OnPointerUpEvent(PointerUpEvent evt);
    private void OnValidateCommandEvent(ValidateCommandEvent evt);
    private void OnExecuteCommandEvent(ExecuteCommandEvent evt);
    private bool MoveDistanceQualifiesForDrag(Vector2 start, Vector2 current);
}
public class UnityEngine.UIElements.TextShadow : ValueType {
    public Vector2 offset;
    public float blurRadius;
    public Color color;
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TextShadow other);
    public virtual int GetHashCode();
    public static bool op_Equality(TextShadow style1, TextShadow style2);
    public static bool op_Inequality(TextShadow style1, TextShadow style2);
    public virtual string ToString();
    internal static TextShadow LerpUnclamped(TextShadow a, TextShadow b, float t);
}
internal class UnityEngine.UIElements.TextureId : ValueType {
    private int m_Index;
    public static TextureId invalid;
    public int index { get; }
    public TextureId(int index);
    private static TextureId();
    public int get_index();
    public bool IsValid();
    public float ConvertToGpu();
    public virtual bool Equals(object obj);
    public bool Equals(TextureId other);
    public virtual int GetHashCode();
    public static bool op_Equality(TextureId left, TextureId right);
    public static bool op_Inequality(TextureId left, TextureId right);
}
internal class UnityEngine.UIElements.TextureRegistry : object {
    private List`1<TextureInfo> m_Textures;
    private Dictionary`2<Texture, TextureId> m_TextureToId;
    private Stack`1<TextureId> m_FreeIds;
    internal static int maxTextures;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static TextureRegistry <instance>k__BackingField;
    public static TextureRegistry instance { get; }
    private static TextureRegistry();
    [CompilerGeneratedAttribute]
public static TextureRegistry get_instance();
    public Texture GetTexture(TextureId id);
    public TextureId AllocAndAcquireDynamic();
    public void UpdateDynamic(TextureId id, Texture texture);
    private TextureId AllocAndAcquire(Texture texture, bool dynamic);
    public TextureId Acquire(Texture tex);
    public void Acquire(TextureId id);
    public void Release(TextureId id);
    public TextureId TextureToId(Texture texture);
    public Statistics GatherStatistics();
}
internal static class UnityEngine.UIElements.TextUtilities : object {
    internal static Vector2 MeasureVisualElementTextSize(TextElement te, string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode);
    internal static FontAsset GetFontAsset(VisualElement ve);
    internal static Font GetFont(VisualElement ve);
    internal static bool IsFontAssigned(VisualElement ve);
    internal static PanelTextSettings GetTextSettingsFrom(VisualElement ve);
    internal static float ConvertPixelUnitsToTextCoreRelativeUnits(VisualElement ve, FontAsset fontAsset);
    internal static TextCoreSettings GetTextCoreSettingsForElement(VisualElement ve);
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public abstract class UnityEngine.UIElements.TextValueField`1 : TextInputBaseField`1<TValueType> {
    private BaseFieldMouseDragger m_Dragger;
    internal bool m_UpdateTextFromValue;
    private bool m_ForceUpdateDisplay;
    internal static int kMaxValueFieldLength;
    private TextValueInput<TValueType> textValueInput { get; }
    public string formatString { get; public set; }
    public TValueType value { get; public set; }
    protected TextValueField`1(int maxLength, TextValueInput<TValueType> textValueInput);
    protected TextValueField`1(string label, int maxLength, TextValueInput<TValueType> textValueInput);
    private TextValueInput<TValueType> get_textValueInput();
    public string get_formatString();
    public void set_formatString(string value);
    public abstract virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, TValueType startValue);
    public sealed virtual void StartDragging();
    public sealed virtual void StopDragging();
    public virtual TValueType get_value();
    public virtual void set_value(TValueType value);
    internal virtual void UpdateValueFromText();
    internal virtual void UpdateTextFromValue();
    private void OnIsReadOnlyChanged(bool newValue);
    internal virtual bool CanTryParse(string textString);
    protected void AddLabelDragger();
    private void EnableLabelDragger(bool enable);
    public virtual void SetValueWithoutNotify(TValueType newValue);
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultAction(EventBase evt);
    internal virtual void OnViewDataReady();
    internal virtual void RegisterEditingCallbacks();
    internal virtual void UnregisterEditingCallbacks();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.TextValueFieldTraits`2 : BaseFieldTraits`2<TValueType, TValueUxmlAttributeType> {
    private UxmlBoolAttributeDescription m_IsReadOnly;
    private UxmlBoolAttributeDescription m_IsDelayed;
    public virtual void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc);
}
internal class UnityEngine.UIElements.TextVertex : ValueType {
    public Vector3 position;
    public Color32 color;
    public Vector2 uv0;
}
[HelpURLAttribute("UIE-tss")]
public class UnityEngine.UIElements.ThemeStyleSheet : StyleSheet {
    internal virtual void OnEnable();
}
internal class UnityEngine.UIElements.TimeMsFunction : MulticastDelegate {
    public TimeMsFunction(object object, IntPtr method);
    public virtual long Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual long EndInvoke(IAsyncResult result);
}
internal class UnityEngine.UIElements.TimerEventScheduler : object {
    private List`1<ScheduledItem> m_ScheduledItems;
    private bool m_TransactionMode;
    private List`1<ScheduledItem> m_ScheduleTransactions;
    private HashSet`1<ScheduledItem> m_UnscheduleTransactions;
    internal bool disableThrottling;
    private int m_LastUpdatedIndex;
    public sealed virtual void Schedule(ScheduledItem item);
    public sealed virtual ScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs);
    public sealed virtual ScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition);
    public sealed virtual ScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs);
    private bool RemovedScheduledItemAt(int index);
    public sealed virtual void Unschedule(ScheduledItem item);
    private bool PrivateUnSchedule(ScheduledItem sItem);
    public sealed virtual void UpdateScheduledEvents();
}
public class UnityEngine.UIElements.TimerState : ValueType {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <start>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private long <now>k__BackingField;
    public long start { get; public set; }
    public long now { get; public set; }
    public long deltaTime { get; }
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public long get_start();
    [CompilerGeneratedAttribute]
public void set_start(long value);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public long get_now();
    [CompilerGeneratedAttribute]
public void set_now(long value);
    public long get_deltaTime();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TimerState other);
    public virtual int GetHashCode();
    public static bool op_Equality(TimerState state1, TimerState state2);
    public static bool op_Inequality(TimerState state1, TimerState state2);
}
public enum UnityEngine.UIElements.TimeUnit : Enum {
    public int value__;
    public static TimeUnit Second;
    public static TimeUnit Millisecond;
}
public class UnityEngine.UIElements.TimeValue : ValueType {
    private float m_Value;
    private TimeUnit m_Unit;
    public float value { get; public set; }
    public TimeUnit unit { get; public set; }
    public TimeValue(float value);
    public TimeValue(float value, TimeUnit unit);
    public float get_value();
    public void set_value(float value);
    public TimeUnit get_unit();
    public void set_unit(TimeUnit value);
    public static TimeValue op_Implicit(float value);
    public static bool op_Equality(TimeValue lhs, TimeValue rhs);
    public static bool op_Inequality(TimeValue lhs, TimeValue rhs);
    public sealed virtual bool Equals(TimeValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class UnityEngine.UIElements.Toggle : BaseBoolField {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    [ObsoleteAttribute]
public static string noTextVariantUssClassName;
    public static string checkmarkUssClassName;
    public static string textUssClassName;
    public static string mixedValuesUssClassName;
    public Toggle(string label);
    private static Toggle();
    protected virtual void InitLabel();
    protected virtual void UpdateMixedValueContent();
}
[EventCategoryAttribute("15")]
public class UnityEngine.UIElements.TooltipEvent : EventBase`1<TooltipEvent> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <tooltip>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Rect <rect>k__BackingField;
    public string tooltip { get; public set; }
    public Rect rect { get; public set; }
    private static TooltipEvent();
    [CompilerGeneratedAttribute]
public string get_tooltip();
    [CompilerGeneratedAttribute]
public void set_tooltip(string value);
    [CompilerGeneratedAttribute]
public Rect get_rect();
    [CompilerGeneratedAttribute]
public void set_rect(Rect value);
    protected virtual void Init();
    private void LocalInit();
    internal static TooltipEvent GetPooled(string tooltip, Rect rect);
}
internal class UnityEngine.UIElements.TouchScreenTextEditorEventHandler : TextEditorEventHandler {
    private IVisualElementScheduledItem m_TouchKeyboardPoller;
    private bool m_TouchKeyboardAllowsInPlaceEditing;
    private bool m_IsClicking;
    public TouchScreenTextEditorEventHandler(TextElement textElement, TextEditingUtilities editingUtilities);
    private void PollTouchScreenKeyboard();
    private void DoPollTouchScreenKeyboard();
    private void UpdateStringPositionFromKeyboard();
    private void CloseTouchScreenKeyboard();
    private void OpenTouchScreenKeyboard();
    public virtual void ExecuteDefaultActionAtTarget(EventBase evt);
    private void OnPointerDownEvent();
    private void OnPointerUpEvent(PointerUpEvent evt);
    private void OnFocusInEvent();
    private void OnFocusOutEvent(FocusOutEvent evt);
}
internal class UnityEngine.UIElements.TransformData : ValueType {
    public Rotate rotate;
    public Scale scale;
    public TransformOrigin transformOrigin;
    public Translate translate;
    public sealed virtual TransformData Copy();
    public sealed virtual void CopyFrom(TransformData& other);
    public static bool op_Equality(TransformData lhs, TransformData rhs);
    public static bool op_Inequality(TransformData lhs, TransformData rhs);
    public sealed virtual bool Equals(TransformData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class UnityEngine.UIElements.TransformOrigin : ValueType {
    private Length m_X;
    private Length m_Y;
    private float m_Z;
    public Length x { get; public set; }
    public Length y { get; public set; }
    public float z { get; public set; }
    public TransformOrigin(Length x, Length y, float z);
    public TransformOrigin(Length x, Length y);
    public static TransformOrigin Initial();
    public Length get_x();
    public void set_x(Length value);
    public Length get_y();
    public void set_y(Length value);
    public float get_z();
    public void set_z(float value);
    public static bool op_Equality(TransformOrigin lhs, TransformOrigin rhs);
    public static bool op_Inequality(TransformOrigin lhs, TransformOrigin rhs);
    public sealed virtual bool Equals(TransformOrigin other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum UnityEngine.UIElements.TransformOriginOffset : Enum {
    public int value__;
    public static TransformOriginOffset Left;
    public static TransformOriginOffset Right;
    public static TransformOriginOffset Top;
    public static TransformOriginOffset Bottom;
    public static TransformOriginOffset Center;
}
public class UnityEngine.UIElements.TransitionCancelEvent : TransitionEventBase`1<TransitionCancelEvent> {
    private static TransitionCancelEvent();
}
internal class UnityEngine.UIElements.TransitionData : ValueType {
    public List`1<TimeValue> transitionDelay;
    public List`1<TimeValue> transitionDuration;
    public List`1<StylePropertyName> transitionProperty;
    public List`1<EasingFunction> transitionTimingFunction;
    public sealed virtual TransitionData Copy();
    public sealed virtual void CopyFrom(TransitionData& other);
    public static bool op_Equality(TransitionData lhs, TransitionData rhs);
    public static bool op_Inequality(TransitionData lhs, TransitionData rhs);
    public sealed virtual bool Equals(TransitionData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class UnityEngine.UIElements.TransitionEndEvent : TransitionEventBase`1<TransitionEndEvent> {
    private static TransitionEndEvent();
}
[EventCategoryAttribute("12")]
public abstract class UnityEngine.UIElements.TransitionEventBase`1 : EventBase`1<T> {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private StylePropertyNameCollection <stylePropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <elapsedTime>k__BackingField;
    public StylePropertyNameCollection stylePropertyNames { get; }
    public double elapsedTime { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual StylePropertyNameCollection get_stylePropertyNames();
    [CompilerGeneratedAttribute]
public sealed virtual double get_elapsedTime();
    [CompilerGeneratedAttribute]
protected void set_elapsedTime(double value);
    protected virtual void Init();
    private void LocalInit();
    public static T GetPooled(StylePropertyName stylePropertyName, double elapsedTime);
    public bool AffectsProperty(StylePropertyName stylePropertyName);
}
public class UnityEngine.UIElements.TransitionRunEvent : TransitionEventBase`1<TransitionRunEvent> {
    private static TransitionRunEvent();
}
public class UnityEngine.UIElements.TransitionStartEvent : TransitionEventBase`1<TransitionStartEvent> {
    private static TransitionStartEvent();
}
public class UnityEngine.UIElements.Translate : ValueType {
    private Length m_X;
    private Length m_Y;
    private float m_Z;
    private bool m_isNone;
    public Length x { get; public set; }
    public Length y { get; public set; }
    public float z { get; public set; }
    public Translate(Length x, Length y, float z);
    public Translate(Length x, Length y);
    public static Translate None();
    public Length get_x();
    public void set_x(Length value);
    public Length get_y();
    public void set_y(Length value);
    public float get_z();
    public void set_z(float value);
    internal bool IsNone();
    public static bool op_Equality(Translate lhs, Translate rhs);
    public static bool op_Inequality(Translate lhs, Translate rhs);
    public sealed virtual bool Equals(Translate other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class UnityEngine.UIElements.TreeData`1 : ValueType {
    private IList`1<int> m_RootItemIds;
    private Dictionary`2<int, TreeViewItemData`1<T>> m_Tree;
    private Dictionary`2<int, int> m_ParentIds;
    private Dictionary`2<int, List`1<int>> m_ChildrenIds;
    public IEnumerable`1<int> rootItemIds { get; }
    public TreeData`1(IList`1<TreeViewItemData`1<T>> rootItems);
    public IEnumerable`1<int> get_rootItemIds();
    public TreeViewItemData`1<T> GetDataForId(int id);
    public int GetParentId(int id);
    public void AddItem(TreeViewItemData`1<T> item, int parentId, int childIndex);
    public bool TryRemove(int id);
    public void Move(int id, int newParentId, int childIndex);
    public bool HasAncestor(int childId, int ancestorId);
    private void AddItemToParent(TreeViewItemData`1<T> item, int parentId, int childIndex);
    private void RemoveFromParent(int id, int parentId);
    private void UpdateParentTree(TreeViewItemData`1<T> current);
    private bool TryRemoveChildrenIds(int id);
    private void RefreshTree(IList`1<TreeViewItemData`1<T>> rootItems);
    private void BuildTree(IEnumerable`1<TreeViewItemData`1<T>> items, bool isRoot);
}
internal class UnityEngine.UIElements.TreeDataController`1 : object {
    private TreeData`1<T> m_TreeData;
    private Stack`1<IEnumerator`1<int>> m_IteratorStack;
    public void SetRootItems(IList`1<TreeViewItemData`1<T>> rootItems);
    public void AddItem(TreeViewItemData`1& item, int parentId, int childIndex);
    public bool TryRemoveItem(int id);
    public TreeViewItemData`1<T> GetTreeItemDataForId(int id);
    public T GetDataForId(int id);
    public int GetParentId(int id);
    public bool HasChildren(int id);
    [IteratorStateMachineAttribute("UnityEngine.UIElements.TreeDataController`1/<GetItemIds>d__9")]
private static IEnumerable`1<int> GetItemIds(IEnumerable`1<TreeViewItemData`1<T>> items);
    public IEnumerable`1<int> GetChildrenIds(int id);
    public void Move(int id, int newParentId, int childIndex);
    public bool IsChildOf(int childId, int id);
    [IteratorStateMachineAttribute("UnityEngine.UIElements.TreeDataController`1/<GetAllItemIds>d__13")]
public IEnumerable`1<int> GetAllItemIds(IEnumerable`1<int> rootIds);
}
[IsReadOnlyAttribute]
internal class UnityEngine.UIElements.TreeItem : ValueType {
    public static int invalidId;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <id>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <parentId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<int> <childrenIds>k__BackingField;
    public int id { get; }
    public int parentId { get; }
    public IEnumerable`1<int> childrenIds { get; }
    public bool hasChildren { get; }
    public TreeItem(int id, int parentId, IEnumerable`1<int> childrenIds);
    [CompilerGeneratedAttribute]
public int get_id();
    [CompilerGeneratedAttribute]
public int get_parentId();
    [CompilerGeneratedAttribute]
public IEnumerable`1<int> get_childrenIds();
    public bool get_hasChildren();
}
public class UnityEngine.UIElements.TreeView : BaseTreeView {
    private Func`1<VisualElement> m_MakeItem;
    private Action`2<VisualElement, int> m_BindItem;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`2<VisualElement, int> <unbindItem>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<VisualElement> <destroyItem>k__BackingField;
    public Func`1<VisualElement> makeItem { get; public set; }
    public Action`2<VisualElement, int> bindItem { get; public set; }
    public Action`2<VisualElement, int> unbindItem { get; public set; }
    public Action`1<VisualElement> destroyItem { get; public set; }
    public TreeViewController viewController { get; }
    public TreeView(Func`1<VisualElement> makeItem, Action`2<VisualElement, int> bindItem);
    public TreeView(int itemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, int> bindItem);
    public Func`1<VisualElement> get_makeItem();
    public void set_makeItem(Func`1<VisualElement> value);
    public Action`2<VisualElement, int> get_bindItem();
    public void set_bindItem(Action`2<VisualElement, int> value);
    [CompilerGeneratedAttribute]
public Action`2<VisualElement, int> get_unbindItem();
    [CompilerGeneratedAttribute]
public void set_unbindItem(Action`2<VisualElement, int> value);
    [CompilerGeneratedAttribute]
public Action`1<VisualElement> get_destroyItem();
    [CompilerGeneratedAttribute]
public void set_destroyItem(Action`1<VisualElement> value);
    internal virtual void SetRootItemsInternal(IList`1<TreeViewItemData`1<T>> rootItems);
    internal virtual bool HasValidDataAndBindings();
    public TreeViewController get_viewController();
    protected virtual CollectionViewController CreateViewController();
    private protected virtual IEnumerable`1<TreeViewItemData`1<T>> GetSelectedItemsInternal();
    private protected virtual T GetItemDataForIndexInternal(int index);
    private protected virtual T GetItemDataForIdInternal(int id);
    private protected virtual void AddItemInternal(TreeViewItemData`1<T> item, int parentId, int childIndex, bool rebuildTree);
}
public abstract class UnityEngine.UIElements.TreeViewController : BaseTreeViewController {
    protected TreeView treeView { get; }
    protected TreeView get_treeView();
    protected virtual VisualElement MakeItem();
    protected virtual void BindItem(VisualElement element, int index);
    protected virtual void UnbindItem(VisualElement element, int index);
    protected virtual void DestroyItem(VisualElement element);
    internal virtual object GetItemForId(int id);
}
internal static class UnityEngine.UIElements.TreeViewHelpers`2 : object {
    internal static void SetRootItems(BaseTreeView treeView, IList`1<TreeViewItemData`1<T>> rootItems, Func`1<TDefaultController> createController);
    [IteratorStateMachineAttribute("UnityEngine.UIElements.TreeViewHelpers`2/<GetSelectedItems>d__1")]
internal static IEnumerable`1<TreeViewItemData`1<T>> GetSelectedItems(BaseTreeView treeView);
    internal static T GetItemDataForIndex(BaseTreeView treeView, int index);
    internal static T GetItemDataForId(BaseTreeView treeView, int id);
    internal static void AddItem(BaseTreeView treeView, TreeViewItemData`1<T> item, int parentId, int childIndex, bool rebuildTree);
}
[IsReadOnlyAttribute]
public class UnityEngine.UIElements.TreeViewItemData`1 : ValueType {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <id>k__BackingField;
    private T m_Data;
    private IList`1<TreeViewItemData`1<T>> m_Children;
    public int id { get; }
    public T data { get; }
    public IEnumerable`1<TreeViewItemData`1<T>> children { get; }
    public bool hasChildren { get; }
    public TreeViewItemData`1(int id, T data, List`1<TreeViewItemData`1<T>> children);
    [CompilerGeneratedAttribute]
public int get_id();
    public T get_data();
    public IEnumerable`1<TreeViewItemData`1<T>> get_children();
    public bool get_hasChildren();
    internal void AddChild(TreeViewItemData`1<T> child);
    internal void AddChildren(IList`1<TreeViewItemData`1<T>> children);
    internal void InsertChild(TreeViewItemData`1<T> child, int index);
    internal void RemoveChild(int childId);
    internal int GetChildIndex(int itemId);
    internal void ReplaceChild(TreeViewItemData`1<T> newChild);
}
[IsReadOnlyAttribute]
internal class UnityEngine.UIElements.TreeViewItemWrapper : ValueType {
    public TreeItem item;
    public int depth;
    public int id { get; }
    public int parentId { get; }
    public IEnumerable`1<int> childrenIds { get; }
    public bool hasChildren { get; }
    public TreeViewItemWrapper(TreeItem item, int depth);
    public int get_id();
    public int get_parentId();
    public IEnumerable`1<int> get_childrenIds();
    public bool get_hasChildren();
}
internal class UnityEngine.UIElements.TreeViewReorderableDragAndDropController : BaseReorderableDragAndDropController {
    private static long k_ExpandUpdateIntervalMs;
    private static float k_DropExpandTimeoutMs;
    private static float k_DropDeltaPosition;
    private static float k_HalfDropBetweenHeight;
    protected DropData m_DropData;
    protected BaseTreeView m_TreeView;
    private IVisualElementScheduledItem m_ExpandDropItemScheduledItem;
    private Action m_ExpandDropItemCallback;
    public TreeViewReorderableDragAndDropController(BaseTreeView view);
    protected virtual int CompareId(int id1, int id2);
    public virtual StartDragArgs SetupDragAndDrop(IEnumerable`1<int> itemIds, bool skipText);
    public virtual DragVisualMode HandleDragAndDrop(IListDragAndDropArgs args);
    public virtual void OnDrop(IListDragAndDropArgs args);
    public virtual void DragCleanup();
    private void RestoreExpanded(List`1<int> ids);
    public virtual void HandleAutoExpand(ReusableCollectionItem item, Vector2 pointerPosition);
    private void DelayExpandDropItem();
    private void ExpandDropItem();
}
public enum UnityEngine.UIElements.TrickleDown : Enum {
    public int value__;
    public static TrickleDown NoTrickleDown;
    public static TrickleDown TrickleDown;
}
public class UnityEngine.UIElements.TwoPaneSplitView : VisualElement {
    private static string s_UssClassName;
    private static string s_ContentContainerClassName;
    private static string s_HandleDragLineClassName;
    private static string s_HandleDragLineVerticalClassName;
    private static string s_HandleDragLineHorizontalClassName;
    private static string s_HandleDragLineAnchorClassName;
    private static string s_HandleDragLineAnchorVerticalClassName;
    private static string s_HandleDragLineAnchorHorizontalClassName;
    private static string s_VerticalClassName;
    private static string s_HorizontalClassName;
    private VisualElement m_LeftPane;
    private VisualElement m_RightPane;
    private VisualElement m_FixedPane;
    private VisualElement m_FlexedPane;
    [SerializeField]
private float m_FixedPaneDimension;
    private VisualElement m_DragLine;
    private VisualElement m_DragLineAnchor;
    private bool m_CollapseMode;
    private bool m_CollapseChildCalledBeforeSetupComplete;
    private int m_CollapsedChildIndex;
    private VisualElement m_Content;
    private TwoPaneSplitViewOrientation m_Orientation;
    private int m_FixedPaneIndex;
    private float m_FixedPaneInitialDimension;
    internal TwoPaneSplitViewResizer m_Resizer;
    public VisualElement fixedPane { get; }
    public VisualElement flexedPane { get; }
    internal VisualElement dragLine { get; }
    public int fixedPaneIndex { get; public set; }
    public float fixedPaneInitialDimension { get; public set; }
    public TwoPaneSplitViewOrientation orientation { get; public set; }
    internal float fixedPaneDimension { get; internal set; }
    public VisualElement contentContainer { get; }
    public TwoPaneSplitView(int fixedPaneIndex, float fixedPaneStartDimension, TwoPaneSplitViewOrientation orientation);
    private static TwoPaneSplitView();
    public VisualElement get_fixedPane();
    public VisualElement get_flexedPane();
    internal VisualElement get_dragLine();
    public int get_fixedPaneIndex();
    public void set_fixedPaneIndex(int value);
    public float get_fixedPaneInitialDimension();
    public void set_fixedPaneInitialDimension(float value);
    public TwoPaneSplitViewOrientation get_orientation();
    public void set_orientation(TwoPaneSplitViewOrientation value);
    internal float get_fixedPaneDimension();
    internal void set_fixedPaneDimension(float value);
    public void CollapseChild(int index);
    public void UnCollapse();
    private void OnUncollapsedPaneResized(GeometryChangedEvent evt);
    internal void Init(int fixedPaneIndex, float fixedPaneInitialDimension, TwoPaneSplitViewOrientation orientation);
    private void OnPostDisplaySetup(GeometryChangedEvent evt);
    private void ReplacePanesBasedOnAnchor();
    private void OnAnchorPostDisplaySetup(GeometryChangedEvent evt);
    private void IdentifyLeftAndRightPane();
    private void PostDisplaySetup();
    private void OnSizeChange(GeometryChangedEvent evt);
    private void UpdateDragLineAnchorOffset();
    private void UpdateLayout(bool updateFixedPane, bool updateDragLine);
    public virtual VisualElement get_contentContainer();
    internal virtual void OnViewDataReady();
    private void SetDragLineOffset(float offset);
    private void SetFixedPaneDimension(float dimension);
}
public enum UnityEngine.UIElements.TwoPaneSplitViewOrientation : Enum {
    public int value__;
    public static TwoPaneSplitViewOrientation Horizontal;
    public static TwoPaneSplitViewOrientation Vertical;
}
internal class UnityEngine.UIElements.TwoPaneSplitViewResizer : PointerManipulator {
    private static float k_DragLineTolerance;
    private Vector3 m_Start;
    protected bool m_Active;
    private TwoPaneSplitView m_SplitView;
    private int m_Direction;
    private TwoPaneSplitViewOrientation orientation { get; }
    private VisualElement fixedPane { get; }
    private VisualElement flexedPane { get; }
    private float fixedPaneMinDimension { get; }
    private float fixedPaneMargins { get; }
    private float flexedPaneMinDimension { get; }
    private float flexedPaneMargin { get; }
    public TwoPaneSplitViewResizer(TwoPaneSplitView splitView, int dir);
    private TwoPaneSplitViewOrientation get_orientation();
    private VisualElement get_fixedPane();
    private VisualElement get_flexedPane();
    private float get_fixedPaneMinDimension();
    private float get_fixedPaneMargins();
    private float get_flexedPaneMinDimension();
    private float get_flexedPaneMargin();
    protected virtual void RegisterCallbacksOnTarget();
    protected virtual void UnregisterCallbacksFromTarget();
    public void ApplyDelta(float delta);
    protected void OnPointerDown(PointerDownEvent e);
    protected void OnPointerMove(PointerMoveEvent e);
    protected void OnPointerUp(PointerUpEvent e);
    protected void InterruptPointerMove(PointerMoveEvent e);
}
public abstract class UnityEngine.UIElements.TypedUxmlAttributeDescription`1 : UxmlAttributeDescription {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <defaultValue>k__BackingField;
    public T defaultValue { get; public set; }
    public string defaultValueAsString { get; }
    public abstract virtual T GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    [CompilerGeneratedAttribute]
public T get_defaultValue();
    [CompilerGeneratedAttribute]
public void set_defaultValue(T value);
    public virtual string get_defaultValueAsString();
}
[AddComponentMenu("UI Toolkit/UI Document")]
[ExecuteAlways]
[DefaultExecutionOrder("-100")]
[HelpURLAttribute("UIE-get-started-with-runtime-ui")]
[DisallowMultipleComponent]
public class UnityEngine.UIElements.UIDocument : MonoBehaviour {
    internal static string k_RootStyleClassName;
    internal static string k_VisualElementNameSuffix;
    private static int k_DefaultSortingOrder;
    private static int s_CurrentUIDocumentCounter;
    internal int m_UIDocumentCreationIndex;
    [SerializeField]
private PanelSettings m_PanelSettings;
    private PanelSettings m_PreviousPanelSettings;
    [SerializeField]
private UIDocument m_ParentUI;
    private UIDocumentList m_ChildrenContent;
    private List`1<UIDocument> m_ChildrenContentCopy;
    [SerializeField]
private VisualTreeAsset sourceAsset;
    private VisualElement m_RootVisualElement;
    private int m_FirstChildInsertIndex;
    [SerializeField]
private float m_SortingOrder;
    public PanelSettings panelSettings { get; public set; }
    public UIDocument parentUI { get; private set; }
    public VisualTreeAsset visualTreeAsset { get; public set; }
    public VisualElement rootVisualElement { get; }
    internal int firstChildInserIndex { get; }
    public float sortingOrder { get; public set; }
    public PanelSettings get_panelSettings();
    public void set_panelSettings(PanelSettings value);
    public UIDocument get_parentUI();
    private void set_parentUI(UIDocument value);
    public VisualTreeAsset get_visualTreeAsset();
    public void set_visualTreeAsset(VisualTreeAsset value);
    public VisualElement get_rootVisualElement();
    internal int get_firstChildInserIndex();
    public float get_sortingOrder();
    public void set_sortingOrder(float value);
    internal void ApplySortingOrder();
    private void Awake();
    private void OnEnable();
    private void SetupFromHierarchy();
    private UIDocument FindUIDocumentParent();
    internal void Reset();
    private void AddChildAndInsertContentToVisualTree(UIDocument child);
    private void RemoveChild(UIDocument child);
    private void RecreateUI();
    private void SetupRootClassList();
    private void AddRootVisualElementToTree();
    private void RemoveFromHierarchy();
    private void OnDisable();
    private void OnTransformChildrenChanged();
    private void OnTransformParentChanged();
    internal void ReactToHierarchyChanged();
}
internal class UnityEngine.UIElements.UIDocumentHierarchicalIndex : ValueType {
    internal Int32[] pathToParent;
    public sealed virtual int CompareTo(UIDocumentHierarchicalIndex other);
    public virtual string ToString();
}
internal class UnityEngine.UIElements.UIDocumentHierarchicalIndexComparer : object {
    public sealed virtual int Compare(UIDocumentHierarchicalIndex x, UIDocumentHierarchicalIndex y);
}
internal static class UnityEngine.UIElements.UIDocumentHierarchyUtil : object {
    internal static UIDocumentHierarchicalIndexComparer indexComparer;
    private static UIDocumentHierarchyUtil();
    internal static int FindHierarchicalSortedIndex(SortedDictionary`2<UIDocumentHierarchicalIndex, UIDocument> children, UIDocument child);
    internal static void SetHierarchicalIndex(Transform childTransform, Transform directParentTransform, Transform mainParentTransform, UIDocumentHierarchicalIndex& hierarchicalIndex);
    internal static void SetGlobalIndex(Transform objectTransform, Transform directParentTransform, UIDocumentHierarchicalIndex& globalIndex);
}
internal class UnityEngine.UIElements.UIDocumentList : object {
    internal List`1<UIDocument> m_AttachedUIDocuments;
    internal void RemoveFromListAndFromVisualTree(UIDocument uiDocument);
    internal void AddToListAndToVisualTree(UIDocument uiDocument, VisualElement visualTree, int firstInsertIndex);
}
internal abstract class UnityEngine.UIElements.UIElementsBridge : object {
    public abstract virtual void SetWantsMouseJumping(int value);
}
internal static class UnityEngine.UIElements.UIElementsPackageUtility : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static bool <IsUIEPackageLoaded>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static string <EditorResourcesBasePath>k__BackingField;
    internal static bool IsUIEPackageLoaded { get; private set; }
    internal static string EditorResourcesBasePath { get; private set; }
    private static UIElementsPackageUtility();
    [CompilerGeneratedAttribute]
internal static bool get_IsUIEPackageLoaded();
    [CompilerGeneratedAttribute]
private static void set_IsUIEPackageLoaded(bool value);
    [CompilerGeneratedAttribute]
internal static string get_EditorResourcesBasePath();
    [CompilerGeneratedAttribute]
private static void set_EditorResourcesBasePath(string value);
    internal static void Refresh();
}
internal static class UnityEngine.UIElements.UIElementsRuntimeUtility : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action s_onRepaintOverlayPanels;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static Action`1<BaseRuntimePanel> onCreatePanel;
    private static bool s_RegisteredPlayerloopCallback;
    private static List`1<Panel> s_SortedRuntimePanels;
    private static bool s_PanelOrderingDirty;
    internal static int s_ResolvedSortingIndexMax;
    internal static string s_RepaintProfilerMarkerName;
    private static ProfilerMarker s_RepaintProfilerMarker;
    private static int currentOverlayIndex;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Object <activeEventSystem>k__BackingField;
    private static DefaultEventSystem s_DefaultEventSystem;
    private static List`1<PanelSettings> s_PotentiallyEmptyPanelSettings;
    internal static Object activeEventSystem { get; private set; }
    internal static bool useDefaultEventSystem { get; }
    internal static DefaultEventSystem defaultEventSystem { get; }
    private static UIElementsRuntimeUtility();
    [CompilerGeneratedAttribute]
private static void add_s_onRepaintOverlayPanels(Action value);
    [CompilerGeneratedAttribute]
private static void remove_s_onRepaintOverlayPanels(Action value);
    internal static void add_onRepaintOverlayPanels(Action value);
    internal static void remove_onRepaintOverlayPanels(Action value);
    [CompilerGeneratedAttribute]
public static void add_onCreatePanel(Action`1<BaseRuntimePanel> value);
    [CompilerGeneratedAttribute]
public static void remove_onCreatePanel(Action`1<BaseRuntimePanel> value);
    public static EventBase CreateEvent(Event systemEvent);
    public static BaseRuntimePanel FindOrCreateRuntimePanel(ScriptableObject ownerObject, CreateRuntimePanelDelegate createDelegate);
    public static void DisposeRuntimePanel(ScriptableObject ownerObject);
    private static void RegisterCachedPanelInternal(int instanceID, IPanel panel);
    private static void RemoveCachedPanelInternal(int instanceID);
    public static void RepaintOverlayPanels();
    public static void RepaintOffscreenPanels();
    public static void RepaintOverlayPanel(BaseRuntimePanel panel);
    internal static void BeginRenderOverlays(int displayIndex);
    internal static void RenderOverlaysBeforePriority(int displayIndex, float maxPriority);
    internal static void EndRenderOverlays(int displayIndex);
    [CompilerGeneratedAttribute]
internal static Object get_activeEventSystem();
    [CompilerGeneratedAttribute]
private static void set_activeEventSystem(Object value);
    internal static bool get_useDefaultEventSystem();
    public static void RegisterEventSystem(Object eventSystem);
    public static void UnregisterEventSystem(Object eventSystem);
    internal static DefaultEventSystem get_defaultEventSystem();
    public static void UpdateRuntimePanels();
    internal static void MarkPotentiallyEmpty(PanelSettings settings);
    internal static void RemoveUnusedPanels();
    public static void RegisterPlayerloopCallback();
    public static void UnregisterPlayerloopCallback();
    internal static void SetPanelOrderingDirty();
    internal static List`1<Panel> GetSortedPlayerPanels();
    private static void SortPanels();
    internal static Vector2 MultiDisplayBottomLeftToPanelPosition(Vector2 position, Nullable`1& targetDisplay);
    internal static Vector2 MultiDisplayToLocalScreenPosition(Vector2 position, Nullable`1& targetDisplay);
    internal static Vector2 ScreenBottomLeftToPanelPosition(Vector2 position, int targetDisplay);
    internal static Vector2 ScreenBottomLeftToPanelDelta(Vector2 delta);
}
[VisibleToOtherModulesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NativeHeaderAttribute("ModuleOverrides/com.unity.ui/Core/Native/UIElementsRuntimeUtilityNative.h")]
internal static class UnityEngine.UIElements.UIElementsRuntimeUtilityNative : object {
    internal static Action RepaintOverlayPanelsCallback;
    internal static Action UpdateRuntimePanelsCallback;
    internal static Action RepaintOffscreenPanelsCallback;
    [RequiredByNativeCodeAttribute]
public static void RepaintOverlayPanels();
    [RequiredByNativeCodeAttribute]
public static void UpdateRuntimePanels();
    [RequiredByNativeCodeAttribute]
public static void RepaintOffscreenPanels();
    public static void RegisterPlayerloopCallback();
    public static void UnregisterPlayerloopCallback();
    public static void VisualElementCreation();
}
internal class UnityEngine.UIElements.UIElementsUtility : object {
    private static Stack`1<IMGUIContainer> s_ContainerStack;
    private static Dictionary`2<int, Panel> s_UIElementsCache;
    private static Event s_EventInstance;
    internal static Color editorPlayModeTintColor;
    internal static float singleLineHeight;
    public static string hiddenClassName;
    private static UIElementsUtility s_Instance;
    internal static List`1<Panel> s_PanelsIterationList;
    internal static string s_RepaintProfilerMarkerName;
    internal static string s_EventProfilerMarkerName;
    private static ProfilerMarker s_RepaintProfilerMarker;
    private static ProfilerMarker s_EventProfilerMarker;
    internal static Char[] s_Modifiers;
    private static UIElementsUtility();
    internal static IMGUIContainer GetCurrentIMGUIContainer();
    private sealed virtual override bool UnityEngine.UIElements.IUIElementsUtility.MakeCurrentIMGUIContainerDirty();
    private sealed virtual override bool UnityEngine.UIElements.IUIElementsUtility.TakeCapture();
    private sealed virtual override bool UnityEngine.UIElements.IUIElementsUtility.ReleaseCapture();
    private sealed virtual override bool UnityEngine.UIElements.IUIElementsUtility.ProcessEvent(int instanceID, IntPtr nativeEventPtr, Boolean& eventHandled);
    private sealed virtual override bool UnityEngine.UIElements.IUIElementsUtility.CleanupRoots();
    private sealed virtual override bool UnityEngine.UIElements.IUIElementsUtility.EndContainerGUIFromException(Exception exception);
    private sealed virtual override void UnityEngine.UIElements.IUIElementsUtility.UpdateSchedulers();
    private sealed virtual override void UnityEngine.UIElements.IUIElementsUtility.RequestRepaintForPanels(Action`1<ScriptableObject> repaintCallback);
    public static void RegisterCachedPanel(int instanceID, Panel panel);
    public static void RemoveCachedPanel(int instanceID);
    public static bool TryGetPanel(int instanceID, Panel& panel);
    internal static void BeginContainerGUI(LayoutCache cache, Event evt, IMGUIContainer container);
    internal static void EndContainerGUI(Event evt, Rect layoutSize);
    internal static EventBase CreateEvent(Event systemEvent);
    internal static EventBase CreateEvent(Event systemEvent, EventType eventType);
    private static bool DoDispatch(BaseVisualElementPanel panel);
    internal static void GetAllPanels(List`1<Panel> panels, ContextType contextType);
    internal static Enumerator<int, Panel> GetPanelsIterator();
    internal static Panel FindOrCreateEditorPanel(ScriptableObject ownerObject);
    internal static float PixelsPerUnitScaleForElement(VisualElement ve, Sprite sprite);
    internal static string ParseMenuName(string menuName);
}
internal static class UnityEngine.UIElements.UIEventRegistration : object {
    private static List`1<IUIElementsUtility> s_Utilities;
    private static UIEventRegistration();
    internal static void RegisterUIElementSystem(IUIElementsUtility utility);
    private static void TakeCapture();
    private static void ReleaseCapture();
    private static bool EndContainerGUIFromException(Exception exception);
    private static bool ProcessEvent(int instanceID, IntPtr nativeEventPtr);
    private static void CleanupRoots();
    internal static void MakeCurrentIMGUIContainerDirty();
    internal static void UpdateSchedulers();
    internal static void RequestRepaintForPanels(Action`1<ScriptableObject> repaintCallback);
}
[NativeHeaderAttribute("ModuleOverrides/com.unity.ui/Core/Native/Renderer/UIPainter2D.bindings.h")]
internal static class UnityEngine.UIElements.UIPainter2D : object {
    public static IntPtr Create(bool computeBBox);
    public static void Destroy(IntPtr handle);
    public static void Reset(IntPtr handle);
    public static float GetLineWidth(IntPtr handle);
    public static void SetLineWidth(IntPtr handle, float value);
    public static Color GetStrokeColor(IntPtr handle);
    public static void SetStrokeColor(IntPtr handle, Color value);
    [NativeNameAttribute("GetStrokeGradientCopy")]
public static Gradient GetStrokeGradient(IntPtr handle);
    public static void SetStrokeGradient(IntPtr handle, Gradient gradient);
    public static Color GetFillColor(IntPtr handle);
    public static void SetFillColor(IntPtr handle, Color value);
    public static LineJoin GetLineJoin(IntPtr handle);
    public static void SetLineJoin(IntPtr handle, LineJoin value);
    public static LineCap GetLineCap(IntPtr handle);
    public static void SetLineCap(IntPtr handle, LineCap value);
    public static float GetMiterLimit(IntPtr handle);
    public static void SetMiterLimit(IntPtr handle, float value);
    public static void BeginPath(IntPtr handle);
    public static void MoveTo(IntPtr handle, Vector2 pos);
    public static void LineTo(IntPtr handle, Vector2 pos);
    public static void ArcTo(IntPtr handle, Vector2 p1, Vector2 p2, float radius);
    public static void Arc(IntPtr handle, Vector2 center, float radius, float startAngleRads, float endAngleRads, ArcDirection direction);
    public static void BezierCurveTo(IntPtr handle, Vector2 p1, Vector2 p2, Vector2 p3);
    public static void QuadraticCurveTo(IntPtr handle, Vector2 p1, Vector2 p2);
    public static void ClosePath(IntPtr handle);
    public static Rect GetBBox(IntPtr handle);
    public static MeshWriteDataInterface Stroke(IntPtr handle);
    public static MeshWriteDataInterface Fill(IntPtr handle, FillRule fillRule);
    private static void GetStrokeColor_Injected(IntPtr handle, Color& ret);
    private static void SetStrokeColor_Injected(IntPtr handle, Color& value);
    private static void GetFillColor_Injected(IntPtr handle, Color& ret);
    private static void SetFillColor_Injected(IntPtr handle, Color& value);
    private static void MoveTo_Injected(IntPtr handle, Vector2& pos);
    private static void LineTo_Injected(IntPtr handle, Vector2& pos);
    private static void ArcTo_Injected(IntPtr handle, Vector2& p1, Vector2& p2, float radius);
    private static void Arc_Injected(IntPtr handle, Vector2& center, float radius, float startAngleRads, float endAngleRads, ArcDirection direction);
    private static void BezierCurveTo_Injected(IntPtr handle, Vector2& p1, Vector2& p2, Vector2& p3);
    private static void QuadraticCurveTo_Injected(IntPtr handle, Vector2& p1, Vector2& p2);
    private static void GetBBox_Injected(IntPtr handle, Rect& ret);
    private static void Stroke_Injected(IntPtr handle, MeshWriteDataInterface& ret);
    private static void Fill_Injected(IntPtr handle, FillRule fillRule, MeshWriteDataInterface& ret);
}
internal class UnityEngine.UIElements.UIR.Alloc : ValueType {
    public UInt32 start;
    public UInt32 size;
    internal object handle;
    internal bool shortLived;
}
internal class UnityEngine.UIElements.UIR.Allocator2D : object {
    private Vector2Int m_MinSize;
    private Vector2Int m_MaxSize;
    private Vector2Int m_MaxAllocSize;
    private int m_RowHeightBias;
    private Row[] m_Rows;
    private List`1<Area> m_Areas;
    public Vector2Int minSize { get; }
    public Vector2Int maxSize { get; }
    public Vector2Int maxAllocSize { get; }
    public Allocator2D(int minSize, int maxSize, int rowHeightBias);
    public Allocator2D(Vector2Int minSize, Vector2Int maxSize, int rowHeightBias);
    public Vector2Int get_minSize();
    public Vector2Int get_maxSize();
    public Vector2Int get_maxAllocSize();
    public bool TryAllocate(int width, int height, Alloc2D& alloc2D);
    public void Free(Alloc2D alloc2D);
    private static void BuildAreas(List`1<Area> areas, Vector2Int minSize, Vector2Int maxSize);
    private static Vector2Int ComputeMaxAllocSize(List`1<Area> areas, int rowHeightBias);
    private static Row[] BuildRowArray(int maxRowHeight, int rowHeightBias);
}
internal abstract class UnityEngine.UIElements.UIR.BaseShaderInfoStorage : object {
    protected static int s_TextureCounter;
    internal static ProfilerMarker s_MarkerCopyTexture;
    internal static ProfilerMarker s_MarkerGetTextureData;
    internal static ProfilerMarker s_MarkerUpdateTexture;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <disposed>k__BackingField;
    public Texture2D texture { get; }
    protected bool disposed { get; private set; }
    private static BaseShaderInfoStorage();
    public abstract virtual Texture2D get_texture();
    public abstract virtual bool AllocateRect(int width, int height, RectInt& uvs);
    public abstract virtual void SetTexel(int x, int y, Color color);
    public abstract virtual void UpdateTexture();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class UnityEngine.UIElements.UIR.BasicNode`1 : LinkedPoolItem`1<BasicNode`1<T>> {
    public BasicNode`1<T> next;
    public T data;
    public void AppendTo(BasicNode`1& first);
}
internal class UnityEngine.UIElements.UIR.BasicNodePool`1 : LinkedPool`1<BasicNode`1<T>> {
    private static void Reset(BasicNode`1<T> node);
    private static BasicNode`1<T> Create();
}
internal class UnityEngine.UIElements.UIR.BestFitAllocator : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UInt32 <totalSize>k__BackingField;
    private Block m_FirstBlock;
    private Block m_FirstAvailableBlock;
    private BlockPool m_BlockPool;
    private UInt32 m_HighWatermark;
    public UInt32 totalSize { get; }
    public UInt32 highWatermark { get; }
    public BestFitAllocator(UInt32 size);
    [CompilerGeneratedAttribute]
public UInt32 get_totalSize();
    public UInt32 get_highWatermark();
    public Alloc Allocate(UInt32 size);
    public void Free(Alloc alloc);
    private Block CoalesceBlockWithPrevious(Block block);
    internal HeapStatistics GatherStatistics();
    private Block BestFitFindAvailableBlock(UInt32 size);
    private void SplitBlock(Block block, UInt32 size);
}
internal class UnityEngine.UIElements.UIR.BitmapAllocator32 : ValueType {
    public static int kPageWidth;
    private int m_PageHeight;
    private List`1<Page> m_Pages;
    private List`1<UInt32> m_AllocMap;
    private int m_EntryWidth;
    private int m_EntryHeight;
    public int entryWidth { get; }
    public int entryHeight { get; }
    public void Construct(int pageHeight, int entryWidth, int entryHeight);
    public void ForceFirstAlloc(ushort firstPageX, ushort firstPageY);
    public BMPAlloc Allocate(BaseShaderInfoStorage storage);
    public void Free(BMPAlloc alloc);
    public int get_entryWidth();
    public int get_entryHeight();
    internal void GetAllocPageAtlasLocation(int page, UInt16& x, UInt16& y);
    private static byte CountTrailingZeroes(UInt32 val);
}
internal class UnityEngine.UIElements.UIR.BMPAlloc : ValueType {
    public static BMPAlloc Invalid;
    public int page;
    public ushort pageLine;
    public byte bitIndex;
    public OwnedState ownedState;
    private static BMPAlloc();
    public bool Equals(BMPAlloc other);
    public bool IsValid();
    public virtual string ToString();
}
internal class UnityEngine.UIElements.UIR.ChainBuilderStats : ValueType {
    public UInt32 elementsAdded;
    public UInt32 elementsRemoved;
    public UInt32 recursiveClipUpdates;
    public UInt32 recursiveClipUpdatesExpanded;
    public UInt32 nonRecursiveClipUpdates;
    public UInt32 recursiveTransformUpdates;
    public UInt32 recursiveTransformUpdatesExpanded;
    public UInt32 recursiveOpacityUpdates;
    public UInt32 recursiveOpacityUpdatesExpanded;
    public UInt32 opacityIdUpdates;
    public UInt32 colorUpdates;
    public UInt32 colorUpdatesExpanded;
    public UInt32 recursiveVisualUpdates;
    public UInt32 recursiveVisualUpdatesExpanded;
    public UInt32 nonRecursiveVisualUpdates;
    public UInt32 dirtyProcessed;
    public UInt32 nudgeTransformed;
    public UInt32 boneTransformed;
    public UInt32 skipTransformed;
    public UInt32 visualUpdateTransformed;
    public UInt32 updatedMeshAllocations;
    public UInt32 newMeshAllocations;
    public UInt32 groupTransformElementsChanged;
    public UInt32 immedateRenderersActive;
}
internal enum UnityEngine.UIElements.UIR.CommandType : Enum {
    public int value__;
    public static CommandType Draw;
    public static CommandType ImmediateCull;
    public static CommandType Immediate;
    public static CommandType PushView;
    public static CommandType PopView;
    public static CommandType PushScissor;
    public static CommandType PopScissor;
    public static CommandType PushRenderTexture;
    public static CommandType PopRenderTexture;
    public static CommandType BlitToPreviousRT;
    public static CommandType PushDefaultMaterial;
    public static CommandType PopDefaultMaterial;
}
internal class UnityEngine.UIElements.UIR.ConvertMeshJobData : ValueType {
    public IntPtr vertSrc;
    public IntPtr vertDst;
    public int vertCount;
    public Matrix4x4 transform;
    public int transformUVs;
    public Color32 xformClipPages;
    public Color32 ids;
    public Color32 addFlags;
    public Color32 opacityPage;
    public Color32 textCoreSettingsPage;
    public int isText;
    public float textureId;
    public IntPtr indexSrc;
    public IntPtr indexDst;
    public int indexCount;
    public int indexOffset;
    public int flipIndices;
}
internal class UnityEngine.UIElements.UIR.CopyClosingMeshJobData : ValueType {
    public IntPtr vertSrc;
    public IntPtr vertDst;
    public int vertCount;
    public IntPtr indexSrc;
    public IntPtr indexDst;
    public int indexCount;
    public int indexOffset;
}
internal class UnityEngine.UIElements.UIR.DetachedAllocator : object {
    private TempAllocator`1<Vertex> m_VertsPool;
    private TempAllocator`1<ushort> m_IndexPool;
    private List`1<MeshWriteData> m_MeshWriteDataPool;
    private int m_MeshWriteDataCount;
    private bool m_Disposed;
    public List`1<MeshWriteData> meshes { get; }
    public List`1<MeshWriteData> get_meshes();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public MeshWriteData Alloc(int vertexCount, int indexCount);
    public void Clear();
}
internal class UnityEngine.UIElements.UIR.DrawBufferRange : ValueType {
    public int firstIndex;
    public int indexCount;
    public int minIndexVal;
    public int vertsReferenced;
}
internal class UnityEngine.UIElements.UIR.DrawParams : object {
    internal static Rect k_UnlimitedRect;
    internal static Rect k_FullNormalizedRect;
    internal Stack`1<Matrix4x4> view;
    internal Stack`1<Rect> scissor;
    internal List`1<RenderTexture> renderTexture;
    internal List`1<Material> defaultMaterial;
    private static DrawParams();
    public void Reset();
}
internal class UnityEngine.UIElements.UIR.GfxUpdateBufferRange : ValueType {
    public UInt32 offsetFromWriteStart;
    public UInt32 size;
    public UIntPtr source;
}
internal class UnityEngine.UIElements.UIR.GPUBufferAllocator : object {
    private BestFitAllocator m_Low;
    private BestFitAllocator m_High;
    public bool isEmpty { get; }
    public GPUBufferAllocator(UInt32 maxSize);
    public Alloc Allocate(UInt32 size, bool shortLived);
    public void Free(Alloc alloc);
    public bool get_isEmpty();
    public HeapStatistics GatherStatistics();
    private bool HighLowCollide();
}
internal class UnityEngine.UIElements.UIR.GradientRemap : LinkedPoolItem`1<GradientRemap> {
    public int origIndex;
    public int destIndex;
    public RectInt location;
    public GradientRemap next;
    public TextureId atlas;
    public void Reset();
}
internal class UnityEngine.UIElements.UIR.GradientRemapPool : LinkedPool`1<GradientRemap> {
}
internal class UnityEngine.UIElements.UIR.GradientSettingsAtlas : object {
    private static ProfilerMarker s_MarkerWrite;
    private static ProfilerMarker s_MarkerCommit;
    private int m_Length;
    private int m_ElemWidth;
    private BestFitAllocator m_Allocator;
    private Texture2D m_Atlas;
    private RawTexture m_RawAtlas;
    private static int s_TextureCounter;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <disposed>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <MustCommit>k__BackingField;
    internal int length { get; }
    protected bool disposed { get; private set; }
    public Texture2D atlas { get; }
    public bool MustCommit { get; private set; }
    public GradientSettingsAtlas(int length);
    private static GradientSettingsAtlas();
    internal int get_length();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Reset();
    public Texture2D get_atlas();
    public Alloc Add(int count);
    public void Remove(Alloc alloc);
    public void Write(Alloc alloc, GradientSettings[] settings, GradientRemap remap);
    [CompilerGeneratedAttribute]
public bool get_MustCommit();
    [CompilerGeneratedAttribute]
private void set_MustCommit(bool value);
    public void Commit();
    private void PrepareAtlas();
}
internal class UnityEngine.UIElements.UIR.HeapStatistics : ValueType {
    public UInt32 numAllocs;
    public UInt32 totalSize;
    public UInt32 allocatedSize;
    public UInt32 freeSize;
    public UInt32 largestAvailableBlock;
    public UInt32 availableBlocksCount;
    public UInt32 blockCount;
    public UInt32 highWatermark;
    public float fragmentation;
    public HeapStatistics[] subAllocators;
}
internal enum UnityEngine.UIElements.UIR.Implementation.ClipMethod : Enum {
    public int value__;
    public static ClipMethod Undetermined;
    public static ClipMethod NotClipped;
    public static ClipMethod Scissor;
    public static ClipMethod ShaderDiscard;
    public static ClipMethod Stencil;
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.UIR.Implementation.CommandGenerator : object {
    private static ProfilerMarker k_GenerateEntries;
    private static ProfilerMarker k_ConvertEntriesToCommandsMarker;
    private static ProfilerMarker k_GenerateClosingCommandsMarker;
    private static ProfilerMarker k_NudgeVerticesMarker;
    private static ProfilerMarker k_UpdateOpacityIdMarker;
    private static ProfilerMarker k_ComputeTransformMatrixMarker;
    private static Material s_blitMaterial_LinearToGamma;
    private static Material s_blitMaterial_GammaToLinear;
    private static Material s_blitMaterial_NoChange;
    private static Shader s_blitShader;
    private static CommandGenerator();
    private static void GetVerticesTransformInfo(VisualElement ve, Matrix4x4& transform);
    internal static void ComputeTransformMatrix(VisualElement ve, VisualElement ancestor, Matrix4x4& result);
    [ExtensionAttribute]
private static bool IsParentOrAncestorOf(VisualElement ve, VisualElement child);
    public static ClosingInfo PaintElement(RenderChain renderChain, VisualElement ve, ChainBuilderStats& stats);
    private static void InvokeGenerateVisualContent(VisualElement ve, MeshGenerationContext ctx);
    private static Material CreateBlitShader(float colorConversion);
    private static Material GetBlitMaterial(RenderTargetMode mode);
    public static void ClosePaintElement(VisualElement ve, ClosingInfo closingInfo, RenderChain renderChain, ChainBuilderStats& stats);
    private static void UpdateOrAllocate(MeshHandle& data, int vertexCount, int indexCount, UIRenderDevice device, NativeSlice`1& verts, NativeSlice`1& indices, UInt16& indexOffset, ChainBuilderStats& stats);
    private static void CopyTriangleIndicesFlipWindingOrder(NativeSlice`1<ushort> source, NativeSlice`1<ushort> target, int indexOffset);
    private static void CopyTriangleIndices(NativeSlice`1<ushort> source, NativeSlice`1<ushort> target, int indexOffset);
    public static void UpdateOpacityId(VisualElement ve, RenderChain renderChain);
    private static void DoUpdateOpacityId(VisualElement ve, RenderChain renderChain, MeshHandle mesh);
    public static bool NudgeVerticesToNewSpace(VisualElement ve, RenderChain renderChain, UIRenderDevice device);
    private static void PrepareNudgeVertices(VisualElement ve, UIRenderDevice device, MeshHandle mesh, IntPtr& src, IntPtr& dst, Int32& count);
    private static RenderChainCommand InjectMeshDrawCommand(RenderChain renderChain, VisualElement ve, RenderChainCommand& cmdPrev, RenderChainCommand& cmdNext, MeshHandle mesh, int indexCount, int indexOffset, Material material, TextureId texture, int stencilRef);
    private static RenderChainCommand InjectClosingMeshDrawCommand(RenderChain renderChain, VisualElement ve, RenderChainCommand& cmdPrev, RenderChainCommand& cmdNext, MeshHandle mesh, int indexCount, int indexOffset, Material material, TextureId texture, int stencilRef);
    private static void FindCommandInsertionPoint(VisualElement ve, RenderChainCommand& prev, RenderChainCommand& next);
    private static void FindClosingCommandInsertionPoint(VisualElement ve, RenderChainCommand& prev, RenderChainCommand& next);
    private static void InjectCommandInBetween(RenderChain renderChain, RenderChainCommand cmd, RenderChainCommand& prev, RenderChainCommand& next);
    private static void InjectClosingCommandInBetween(RenderChain renderChain, RenderChainCommand cmd, RenderChainCommand& prev, RenderChainCommand& next);
    public static void ResetCommands(RenderChain renderChain, VisualElement ve);
}
internal static class UnityEngine.UIElements.UIR.Implementation.RenderEvents : object {
    private static float VisibilityTreshold;
    private static RenderEvents();
    internal static void ProcessOnClippingChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats);
    internal static void ProcessOnOpacityChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats);
    internal static void ProcessOnColorChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats);
    internal static void ProcessOnTransformOrSizeChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats);
    internal static void ProcessOnVisualsChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats);
    private static Matrix4x4 GetTransformIDTransformInfo(VisualElement ve);
    private static Vector4 GetClipRectIDClipInfo(VisualElement ve);
    internal static UInt32 DepthFirstOnChildAdded(RenderChain renderChain, VisualElement parent, VisualElement ve, int index, bool resetState);
    internal static UInt32 DepthFirstOnChildRemoving(RenderChain renderChain, VisualElement ve);
    private static void DepthFirstOnClippingChanged(RenderChain renderChain, VisualElement parent, VisualElement ve, UInt32 dirtyID, bool hierarchical, bool isRootOfChange, bool isPendingHierarchicalRepaint, bool inheritedClipRectIDChanged, bool inheritedMaskingChanged, UIRenderDevice device, ChainBuilderStats& stats);
    private static void DepthFirstOnOpacityChanged(RenderChain renderChain, float parentCompositeOpacity, VisualElement ve, UInt32 dirtyID, bool hierarchical, ChainBuilderStats& stats, bool isDoingFullVertexRegeneration);
    private static void OnColorChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats);
    private static void DepthFirstOnTransformOrSizeChanged(RenderChain renderChain, VisualElement parent, VisualElement ve, UInt32 dirtyID, UIRenderDevice device, bool isAncestorOfChangeSkinned, bool transformChanged, ChainBuilderStats& stats);
    private static void DepthFirstOnVisualsChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, bool parentHierarchyHidden, bool hierarchical, ChainBuilderStats& stats);
    private static bool UpdateTextCoreSettings(RenderChain renderChain, VisualElement ve);
    private static bool IsElementHierarchyHidden(VisualElement ve);
    private static VisualElement GetLastDeepestChild(VisualElement ve);
    private static VisualElement GetNextDepthFirst(VisualElement ve);
    private static ClipMethod DetermineSelfClipMethod(RenderChain renderChain, VisualElement ve);
    private static bool UpdateLocalFlipsWinding(VisualElement ve);
    private static void UpdateWorldFlipsWinding(VisualElement ve);
    private static void UpdateZeroScaling(VisualElement ve);
    private static bool NeedsTransformID(VisualElement ve);
    private static bool TransformIDHasChanged(Alloc before, Alloc after);
    internal static bool NeedsColorID(VisualElement ve);
    internal static bool NeedsTextCoreSettings(VisualElement ve);
    private static bool InitColorIDs(RenderChain renderChain, VisualElement ve);
    private static void ResetColorIDs(VisualElement ve);
    private static void SetColorValues(RenderChain renderChain, VisualElement ve);
}
internal class UnityEngine.UIElements.UIR.Implementation.UIRStylePainter : object {
    private RenderChain m_Owner;
    private List`1<Entry> m_Entries;
    private AtlasBase m_Atlas;
    private VectorImageManager m_VectorImageManager;
    private Entry m_CurrentEntry;
    private ClosingInfo m_ClosingInfo;
    private int m_MaskDepth;
    private int m_StencilRef;
    private BMPAlloc m_ClipRectID;
    private int m_SVGBackgroundEntryIndex;
    private TempAllocator`1<Vertex> m_VertsPool;
    private TempAllocator`1<ushort> m_IndicesPool;
    private List`1<MeshWriteData> m_MeshWriteDataPool;
    private int m_NextMeshWriteDataPoolItem;
    private List`1[] m_RepeatRectUVList;
    private Allocator m_AllocRawVertsIndicesDelegate;
    private Allocator m_AllocThroughDrawMeshDelegate;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private MeshGenerationContext <meshGenerationContext>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VisualElement <currentElement>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <totalVertices>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <totalIndices>k__BackingField;
    private TextInfo m_TextInfo;
    public MeshGenerationContext meshGenerationContext { get; }
    public VisualElement currentElement { get; private set; }
    public List`1<Entry> entries { get; }
    public ClosingInfo closingInfo { get; }
    public int totalVertices { get; private set; }
    public int totalIndices { get; private set; }
    public VisualElement visualElement { get; }
    public UIRStylePainter(RenderChain renderChain);
    private MeshWriteData GetPooledMeshWriteData();
    private MeshWriteData AllocRawVertsIndices(UInt32 vertexCount, UInt32 indexCount, AllocMeshData& allocatorData);
    private MeshWriteData AllocThroughDrawMesh(UInt32 vertexCount, UInt32 indexCount, AllocMeshData& allocatorData);
    [CompilerGeneratedAttribute]
public MeshGenerationContext get_meshGenerationContext();
    [CompilerGeneratedAttribute]
public VisualElement get_currentElement();
    [CompilerGeneratedAttribute]
private void set_currentElement(VisualElement value);
    public List`1<Entry> get_entries();
    public ClosingInfo get_closingInfo();
    [CompilerGeneratedAttribute]
public int get_totalVertices();
    [CompilerGeneratedAttribute]
private void set_totalVertices(int value);
    [CompilerGeneratedAttribute]
public int get_totalIndices();
    [CompilerGeneratedAttribute]
private void set_totalIndices(int value);
    public void Begin(VisualElement ve);
    public void LandClipUnregisterMeshDrawCommand(RenderChainCommand cmd);
    public void LandClipRegisterMesh(NativeSlice`1<Vertex> vertices, NativeSlice`1<ushort> indices, int indexOffset);
    public MeshWriteData AddGradientsEntry(int vertexCount, int indexCount, TextureId texture, Material material, MeshFlags flags);
    public sealed virtual MeshWriteData DrawMesh(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags);
    internal void TryAtlasTexture(Texture texture, MeshFlags flags, Rect& outUVRegion, Boolean& outIsAtlas, TextureId& outTextureId, VertexFlags& outAddFlags);
    internal void BuildEntryFromNativeMesh(MeshWriteDataInterface meshData, Texture texture, TextureId textureId, bool isAtlas, Material material, MeshFlags flags, Rect uvRegion, VertexFlags addFlags);
    internal void BuildGradientEntryFromNativeMesh(MeshWriteDataInterface meshData, TextureId svgTextureId);
    public void BuildRawEntryFromNativeMesh(MeshWriteDataInterface meshData);
    public sealed virtual void DrawText(TextElement te);
    public sealed virtual void DrawText(string text, Vector2 pos, float fontSize, Color color, FontAsset font);
    private void DrawTextInfo(TextInfo textInfo, Vector2 offset, bool useHints);
    public sealed virtual void DrawRectangle(RectangleParams rectParams);
    public sealed virtual void DrawBorder(BorderParams borderParams);
    public sealed virtual void DrawImmediate(Action callback, bool cullingEnabled);
    public sealed virtual void DrawVectorImage(VectorImage vectorImage, Vector2 offset, Angle rotationAngle, Vector2 scale);
    public sealed virtual VisualElement get_visualElement();
    public void DrawVisualElementBackground();
    private void DrawRectangleRepeat(RectangleParams rectParams, Rect totalRect, float scaledPixelsPerPoint);
    private void StampRectangleWithSubRect(RectangleParams rectParams, Rect targetRect, Rect targetUV);
    public void DrawVisualElementBorder();
    public void ApplyVisualElementClipping();
    private UInt16[] AdjustSpriteWinding(Vector2[] vertices, UInt16[] indices);
    public void DrawSprite(RectangleParams rectParams);
    private void ApplyInset(NativeRectParams& rectParams, Texture tex);
    public void RegisterVectorImageGradient(VectorImage vi, Int32& settingIndexOffset, TextureId& texture);
    public void DrawVectorImage(RectangleParams rectParams);
    private void MakeVectorGraphics(RectangleParams rectParams, bool isUsingGradients, TextureId svgTexture, int settingIndexOffset, Int32& finalVertexCount, Int32& finalIndexCount);
    internal void Reset();
    private void ValidateMeshWriteData();
    private void GenerateStencilClipEntryForRoundedRectBackground();
    private void GenerateStencilClipEntryForSVGBackground();
}
internal class UnityEngine.UIElements.UIR.JobManager : object {
    private NativePagedList`1<NudgeJobData> m_NudgeJobs;
    private NativePagedList`1<ConvertMeshJobData> m_ConvertMeshJobs;
    private NativePagedList`1<CopyClosingMeshJobData> m_CopyClosingMeshJobs;
    private JobMerger m_JobMerger;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <disposed>k__BackingField;
    protected bool disposed { get; private set; }
    public void Add(NudgeJobData& job);
    public void Add(ConvertMeshJobData& job);
    public void Add(CopyClosingMeshJobData& job);
    public void CompleteNudgeJobs();
    public void CompleteConvertMeshJobs();
    public void CompleteClosingMeshJobs();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
internal class UnityEngine.UIElements.UIR.JobMerger : object {
    private NativeArray`1<JobHandle> m_Jobs;
    private int m_JobCount;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <disposed>k__BackingField;
    protected bool disposed { get; private set; }
    public JobMerger(int capacity);
    public void Add(JobHandle job);
    public JobHandle MergeAndReset();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
[NativeHeaderAttribute("ModuleOverrides/com.unity.ui/Core/Native/Renderer/UIRendererJobProcessor.h")]
internal static class UnityEngine.UIElements.UIR.JobProcessor : object {
    internal static JobHandle ScheduleNudgeJobs(IntPtr buffer, int jobCount);
    internal static JobHandle ScheduleConvertMeshJobs(IntPtr buffer, int jobCount);
    internal static JobHandle ScheduleCopyClosingMeshJobs(IntPtr buffer, int jobCount);
    private static void ScheduleNudgeJobs_Injected(IntPtr buffer, int jobCount, JobHandle& ret);
    private static void ScheduleConvertMeshJobs_Injected(IntPtr buffer, int jobCount, JobHandle& ret);
    private static void ScheduleCopyClosingMeshJobs_Injected(IntPtr buffer, int jobCount, JobHandle& ret);
}
internal class UnityEngine.UIElements.UIR.LinkedPool`1 : object {
    private Func`1<T> m_CreateFunc;
    private Action`1<T> m_ResetAction;
    private int m_Limit;
    private T m_PoolFirst;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public LinkedPool`1(Func`1<T> createFunc, Action`1<T> resetAction, int limit);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public void Clear();
    public T Get();
    public void Return(T item);
}
internal class UnityEngine.UIElements.UIR.LinkedPoolItem`1 : object {
    internal T poolNext;
}
internal static class UnityEngine.UIElements.UIR.MeshBuilder : object {
    private static ProfilerMarker s_VectorGraphics9Slice;
    private static ProfilerMarker s_VectorGraphicsSplitTriangle;
    private static ProfilerMarker s_VectorGraphicsScaleTriangle;
    private static ProfilerMarker s_VectorGraphicsStretch;
    internal static int s_MaxTextMeshVertices;
    private static MeshBuilder();
    private static Vertex ConvertTextVertexToUIRVertex(MeshInfo info, int index, Vector2 offset, VertexFlags flags, bool isDynamicColor);
    private static Vertex ConvertTextVertexToUIRVertex(TextVertex textVertex, Vector2 offset);
    private static int LimitTextVertices(int vertexCount, bool logTruncation);
    internal static void MakeText(MeshInfo meshInfo, Vector2 offset, AllocMeshData meshAlloc, VertexFlags flags, bool isDynamicColor);
    internal static void MakeText(NativeArray`1<TextVertex> uiVertices, Vector2 offset, AllocMeshData meshAlloc);
}
internal class UnityEngine.UIElements.UIR.MeshHandle : LinkedPoolItem`1<MeshHandle> {
    internal Alloc allocVerts;
    internal Alloc allocIndices;
    internal UInt32 triangleCount;
    internal Page allocPage;
    internal UInt32 allocTime;
    internal UInt32 updateAllocID;
}
internal class UnityEngine.UIElements.UIR.NativePagedList`1 : object {
    private int k_PoolCapacity;
    private List`1<NativeArray`1<T>> m_Pages;
    private NativeArray`1<T> m_CurrentPage;
    private int m_CurrentPageCount;
    private List`1<NativeSlice`1<T>> m_Enumerator;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    protected bool disposed { get; private set; }
    public NativePagedList`1(int poolCapacity);
    public void Add(T& data);
    public void Add(T data);
    public List`1<NativeSlice`1<T>> GetPages();
    public void Reset();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
internal class UnityEngine.UIElements.UIR.NudgeJobData : ValueType {
    public IntPtr src;
    public IntPtr dst;
    public int count;
    public IntPtr closingSrc;
    public IntPtr closingDst;
    public int closingCount;
    public Matrix4x4 transform;
    public int vertsBeforeUVDisplacement;
    public int vertsAfterUVDisplacement;
}
internal class UnityEngine.UIElements.UIR.OpacityIdAccelerator : object {
    private static int k_VerticesPerBatch;
    private static int k_JobLimit;
    private NativeArray`1<JobHandle> m_Jobs;
    private int m_NextJobIndex;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <disposed>k__BackingField;
    protected bool disposed { get; private set; }
    public void CreateJob(NativeSlice`1<Vertex> oldVerts, NativeSlice`1<Vertex> newVerts, Color32 opacityData, int vertexCount);
    public void CompleteJobs();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal enum UnityEngine.UIElements.UIR.OwnedState : Enum {
    public byte value__;
    public static OwnedState Inherited;
    public static OwnedState Owned;
}
internal class UnityEngine.UIElements.UIR.Page : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    public DataSet`1<Vertex> vertices;
    public DataSet`1<ushort> indices;
    public Page next;
    public int framesEmpty;
    protected bool disposed { get; private set; }
    public bool isEmpty { get; }
    public Page(UInt32 vertexMaxCount, UInt32 indexMaxCount, UInt32 maxQueuedFrameCount, bool mockPage);
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool get_isEmpty();
}
internal class UnityEngine.UIElements.UIR.RenderChain : object {
    private RenderChainCommand m_FirstCommand;
    private DepthOrderedDirtyTracking m_DirtyTracker;
    private LinkedPool`1<RenderChainCommand> m_CommandPool;
    private BasicNodePool`1<TextureEntry> m_TexturePool;
    private List`1<RenderNodeData> m_RenderNodesData;
    private Shader m_DefaultShader;
    private Shader m_DefaultWorldSpaceShader;
    private Material m_DefaultMat;
    private Material m_DefaultWorldSpaceMat;
    private bool m_BlockDirtyRegistration;
    private int m_StaticIndex;
    private int m_ActiveRenderNodes;
    private int m_CustomMaterialCommands;
    private ChainBuilderStats m_Stats;
    private UInt32 m_StatsElementsAdded;
    private UInt32 m_StatsElementsRemoved;
    private TextureRegistry m_TextureRegistry;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private OpacityIdAccelerator <opacityIdAccelerator>k__BackingField;
    private static ProfilerMarker s_MarkerProcess;
    private static ProfilerMarker s_MarkerClipProcessing;
    private static ProfilerMarker s_MarkerOpacityProcessing;
    private static ProfilerMarker s_MarkerColorsProcessing;
    private static ProfilerMarker s_MarkerTransformProcessing;
    private static ProfilerMarker s_MarkerVisualsProcessing;
    private static ProfilerMarker s_MarkerTextRegen;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    internal static Action OnPreRender;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private BaseVisualElementPanel <panel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UIRenderDevice <device>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AtlasBase <atlas>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private VectorImageManager <vectorImageManager>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TempAllocator`1<Vertex> <vertsPool>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private TempAllocator`1<ushort> <indicesPool>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private JobManager <jobManager>k__BackingField;
    internal UIRVEShaderInfoAllocator shaderInfoAllocator;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private UIRStylePainter <painter>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <drawStats>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <drawInCameras>k__BackingField;
    internal RenderChainCommand firstCommand { get; }
    public OpacityIdAccelerator opacityIdAccelerator { get; private set; }
    protected bool disposed { get; private set; }
    internal ChainBuilderStats stats { get; }
    internal BaseVisualElementPanel panel { get; private set; }
    internal UIRenderDevice device { get; private set; }
    internal AtlasBase atlas { get; private set; }
    internal VectorImageManager vectorImageManager { get; private set; }
    internal TempAllocator`1<Vertex> vertsPool { get; private set; }
    internal TempAllocator`1<ushort> indicesPool { get; private set; }
    internal JobManager jobManager { get; private set; }
    internal UIRStylePainter painter { get; private set; }
    internal bool drawStats { get; internal set; }
    internal bool drawInCameras { get; private set; }
    internal Shader defaultShader { get; internal set; }
    internal Shader defaultWorldSpaceShader { get; internal set; }
    private static RenderChain();
    public RenderChain(BaseVisualElementPanel panel);
    protected RenderChain(BaseVisualElementPanel panel, UIRenderDevice device, AtlasBase atlas, VectorImageManager vectorImageManager);
    internal RenderChainCommand get_firstCommand();
    [CompilerGeneratedAttribute]
public OpacityIdAccelerator get_opacityIdAccelerator();
    [CompilerGeneratedAttribute]
private void set_opacityIdAccelerator(OpacityIdAccelerator value);
    private void Constructor(BaseVisualElementPanel panelObj, UIRenderDevice deviceObj, AtlasBase atlas, VectorImageManager vectorImageMan);
    private void Destructor();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    internal ChainBuilderStats get_stats();
    public void ProcessChanges();
    public void Render();
    public void UIEOnChildAdded(VisualElement ve);
    public void UIEOnChildrenReordered(VisualElement ve);
    public void UIEOnChildRemoving(VisualElement ve);
    public void UIEOnRenderHintsChanged(VisualElement ve);
    public void UIEOnClippingChanged(VisualElement ve, bool hierarchical);
    public void UIEOnOpacityChanged(VisualElement ve, bool hierarchical);
    public void UIEOnColorChanged(VisualElement ve);
    public void UIEOnTransformOrSizeChanged(VisualElement ve, bool transformChanged, bool clipRectSizeChanged);
    public void UIEOnVisualsChanged(VisualElement ve, bool hierarchical);
    public void UIEOnOpacityIdChanged(VisualElement ve);
    [CompilerGeneratedAttribute]
internal BaseVisualElementPanel get_panel();
    [CompilerGeneratedAttribute]
private void set_panel(BaseVisualElementPanel value);
    [CompilerGeneratedAttribute]
internal UIRenderDevice get_device();
    [CompilerGeneratedAttribute]
private void set_device(UIRenderDevice value);
    [CompilerGeneratedAttribute]
internal AtlasBase get_atlas();
    [CompilerGeneratedAttribute]
private void set_atlas(AtlasBase value);
    [CompilerGeneratedAttribute]
internal VectorImageManager get_vectorImageManager();
    [CompilerGeneratedAttribute]
private void set_vectorImageManager(VectorImageManager value);
    [CompilerGeneratedAttribute]
internal TempAllocator`1<Vertex> get_vertsPool();
    [CompilerGeneratedAttribute]
private void set_vertsPool(TempAllocator`1<Vertex> value);
    [CompilerGeneratedAttribute]
internal TempAllocator`1<ushort> get_indicesPool();
    [CompilerGeneratedAttribute]
private void set_indicesPool(TempAllocator`1<ushort> value);
    [CompilerGeneratedAttribute]
internal JobManager get_jobManager();
    [CompilerGeneratedAttribute]
private void set_jobManager(JobManager value);
    [CompilerGeneratedAttribute]
internal UIRStylePainter get_painter();
    [CompilerGeneratedAttribute]
private void set_painter(UIRStylePainter value);
    [CompilerGeneratedAttribute]
internal bool get_drawStats();
    [CompilerGeneratedAttribute]
internal void set_drawStats(bool value);
    [CompilerGeneratedAttribute]
internal bool get_drawInCameras();
    [CompilerGeneratedAttribute]
private void set_drawInCameras(bool value);
    internal Shader get_defaultShader();
    internal void set_defaultShader(Shader value);
    internal Shader get_defaultWorldSpaceShader();
    internal void set_defaultWorldSpaceShader(Shader value);
    internal Material GetStandardMaterial();
    internal Material GetStandardWorldSpaceMaterial();
    internal void EnsureFitsDepth(int depth);
    internal void ChildWillBeRemoved(VisualElement ve);
    internal RenderChainCommand AllocCommand();
    internal void FreeCommand(RenderChainCommand cmd);
    internal void OnRenderCommandAdded(RenderChainCommand command);
    internal void OnRenderCommandsRemoved(RenderChainCommand firstCommand, RenderChainCommand lastCommand);
    private static RenderNodeData AccessRenderNodeData(IntPtr obj);
    private static void OnRenderNodeExecute(IntPtr obj);
    private static void OnRegisterIntermediateRenderers(Camera camera);
    private static void OnRegisterIntermediateRendererMat(BaseRuntimePanel rtp, RenderChain renderChain, RenderNodeData& rnd, Camera camera, int sameDistanceSortPriority);
    internal void RepaintTexturedElements();
    public void AppendTexture(VisualElement ve, Texture src, TextureId id, bool isAtlas);
    public void ResetTextures(VisualElement ve);
    private void DrawStats();
    private static VisualElement GetFirstElementInPanel(VisualElement ve);
}
internal class UnityEngine.UIElements.UIR.RenderChainCommand : LinkedPoolItem`1<RenderChainCommand> {
    internal VisualElement owner;
    internal RenderChainCommand prev;
    internal RenderChainCommand next;
    internal bool closing;
    internal CommandType type;
    internal State state;
    internal MeshHandle mesh;
    internal int indexOffset;
    internal int indexCount;
    internal Action callback;
    private static int k_ID_MainTex;
    private static ProfilerMarker s_ImmediateOverheadMarker;
    private static RenderChainCommand();
    internal void Reset();
    internal void ExecuteNonDrawMesh(DrawParams drawParams, float pixelsPerPoint, Exception& immediateException);
    private void Blit(Texture source, RenderTexture destination, float depth);
    private static Vector4 RectToClipSpace(Rect rc);
    private static Rect CombineScissorRects(Rect r0, Rect r1);
    private static RectInt RectPointsToPixelsAndFlipYAxis(Rect rect, float pixelsPerPoint);
}
internal class UnityEngine.UIElements.UIR.RenderChainVEData : ValueType {
    internal VisualElement prev;
    internal VisualElement next;
    internal VisualElement groupTransformAncestor;
    internal VisualElement boneTransformAncestor;
    internal VisualElement prevDirty;
    internal VisualElement nextDirty;
    internal RenderDataFlags flags;
    internal int hierarchyDepth;
    internal RenderDataDirtyTypes dirtiedValues;
    internal UInt32 dirtyID;
    internal RenderChainCommand firstCommand;
    internal RenderChainCommand lastCommand;
    internal RenderChainCommand firstClosingCommand;
    internal RenderChainCommand lastClosingCommand;
    internal bool isInChain;
    internal bool isHierarchyHidden;
    internal bool localFlipsWinding;
    internal bool localTransformScaleZero;
    internal bool worldFlipsWinding;
    public bool worldTransformScaleZero;
    internal ClipMethod clipMethod;
    internal int childrenStencilRef;
    internal int childrenMaskDepth;
    internal bool disableNudging;
    internal MeshHandle data;
    internal MeshHandle closingData;
    internal Matrix4x4 verticesSpace;
    internal int displacementUVStart;
    internal int displacementUVEnd;
    internal BMPAlloc transformID;
    internal BMPAlloc clipRectID;
    internal BMPAlloc opacityID;
    internal BMPAlloc textCoreSettingsID;
    internal BMPAlloc colorID;
    internal BMPAlloc backgroundColorID;
    internal BMPAlloc borderLeftColorID;
    internal BMPAlloc borderTopColorID;
    internal BMPAlloc borderRightColorID;
    internal BMPAlloc borderBottomColorID;
    internal BMPAlloc tintColorID;
    internal float compositeOpacity;
    internal Color backgroundColor;
    internal BasicNode`1<TextureEntry> textures;
    internal RenderChainCommand lastClosingOrLastCommand { get; }
    public bool isIgnoringDynamicColorHint { get; }
    internal RenderChainCommand get_lastClosingOrLastCommand();
    internal static bool AllocatesID(BMPAlloc alloc);
    internal static bool InheritsID(BMPAlloc alloc);
    public bool get_isIgnoringDynamicColorHint();
}
internal enum UnityEngine.UIElements.UIR.RenderDataDirtyTypeClasses : Enum {
    public int value__;
    public static RenderDataDirtyTypeClasses Clipping;
    public static RenderDataDirtyTypeClasses Opacity;
    public static RenderDataDirtyTypeClasses Color;
    public static RenderDataDirtyTypeClasses TransformSize;
    public static RenderDataDirtyTypeClasses Visuals;
    public static RenderDataDirtyTypeClasses Count;
}
[FlagsAttribute]
internal enum UnityEngine.UIElements.UIR.RenderDataDirtyTypes : Enum {
    public int value__;
    public static RenderDataDirtyTypes None;
    public static RenderDataDirtyTypes Transform;
    public static RenderDataDirtyTypes ClipRectSize;
    public static RenderDataDirtyTypes Clipping;
    public static RenderDataDirtyTypes ClippingHierarchy;
    public static RenderDataDirtyTypes Visuals;
    public static RenderDataDirtyTypes VisualsHierarchy;
    public static RenderDataDirtyTypes VisualsOpacityId;
    public static RenderDataDirtyTypes Opacity;
    public static RenderDataDirtyTypes OpacityHierarchy;
    public static RenderDataDirtyTypes Color;
    public static RenderDataDirtyTypes AllVisuals;
}
[FlagsAttribute]
internal enum UnityEngine.UIElements.UIR.RenderDataFlags : Enum {
    public int value__;
    public static RenderDataFlags IsIgnoringDynamicColorHint;
}
internal class UnityEngine.UIElements.UIR.ShaderInfoStorage`1 : BaseShaderInfoStorage {
    private int m_InitialSize;
    private int m_MaxSize;
    private TextureFormat m_Format;
    private Func`2<Color, T> m_Convert;
    private UIRAtlasAllocator m_Allocator;
    private Texture2D m_Texture;
    private NativeArray`1<T> m_Texels;
    public Texture2D texture { get; }
    public ShaderInfoStorage`1(TextureFormat format, Func`2<Color, T> convert, int initialSize, int maxSize);
    protected virtual void Dispose(bool disposing);
    public virtual Texture2D get_texture();
    public virtual bool AllocateRect(int width, int height, RectInt& uvs);
    public virtual void SetTexel(int x, int y, Color color);
    public virtual void UpdateTexture();
    private void CreateOrExpandTexture();
    private static void CpuBlit(NativeArray`1<T> src, int srcWidth, int srcHeight, NativeArray`1<T> dst, int dstWidth, int dstHeight);
}
internal class UnityEngine.UIElements.UIR.ShaderInfoStorageRGBA32 : ShaderInfoStorage`1<Color32> {
    private static Func`2<Color, Color32> s_Convert;
    public ShaderInfoStorageRGBA32(int initialSize, int maxSize);
    private static ShaderInfoStorageRGBA32();
}
internal class UnityEngine.UIElements.UIR.ShaderInfoStorageRGBAFloat : ShaderInfoStorage`1<Color> {
    private static Func`2<Color, Color> s_Convert;
    public ShaderInfoStorageRGBAFloat(int initialSize, int maxSize);
    private static ShaderInfoStorageRGBAFloat();
}
internal static class UnityEngine.UIElements.UIR.Shaders : object {
    public static string k_AtlasBlit;
    public static string k_Editor;
    public static string k_Runtime;
    public static string k_RuntimeWorld;
    public static string k_GraphView;
    public static string k_ColorConversionBlit;
    private static Shaders();
}
internal class UnityEngine.UIElements.UIR.State : ValueType {
    public Material material;
    public TextureId texture;
    public int stencilRef;
    public float sdfScale;
}
internal class UnityEngine.UIElements.UIR.TempAllocator`1 : object {
    private int m_ExcessMinCapacity;
    private int m_ExcessMaxCapacity;
    private Page<T> m_Pool;
    private List`1<Page<T>> m_Excess;
    private int m_NextExcessSize;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    protected bool disposed { get; private set; }
    public TempAllocator`1(int poolCapacity, int excessMinCapacity, int excessMaxCapacity);
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public NativeSlice`1<T> Alloc(int count);
    public void Reset();
    private void ReleaseExcess();
    public Statistics<T> GatherStatistics();
}
internal class UnityEngine.UIElements.UIR.TextCoreSettings : ValueType {
    public Color faceColor;
    public Color outlineColor;
    public float outlineWidth;
    public Color underlayColor;
    public Vector2 underlayOffset;
    public float underlaySoftness;
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TextCoreSettings other);
    public virtual int GetHashCode();
}
internal class UnityEngine.UIElements.UIR.TextureBlitter : object {
    private static int k_TextureSlotCount;
    private static Int32[] k_TextureIds;
    private static ProfilerMarker s_CommitSampler;
    private BlitInfo[] m_SingleBlit;
    private Material m_BlitMaterial;
    private MaterialPropertyBlock m_Properties;
    private RectInt m_Viewport;
    private RenderTexture m_PrevRT;
    private List`1<BlitInfo> m_PendingBlits;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    protected bool disposed { get; private set; }
    public int queueLength { get; }
    private static TextureBlitter();
    public TextureBlitter(int capacity);
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void QueueBlit(Texture src, RectInt srcRect, Vector2Int dstPos, bool addBorder, Color tint);
    public void BlitOneNow(RenderTexture dst, Texture src, RectInt srcRect, Vector2Int dstPos, bool addBorder, Color tint);
    public int get_queueLength();
    public void Commit(RenderTexture dst);
    public void Reset();
    private void BeginBlit(RenderTexture dst);
    private void DoBlit(IList`1<BlitInfo> blitInfos, int startIndex);
    private void EndBlit();
}
internal class UnityEngine.UIElements.UIR.TextureEntry : ValueType {
    public Texture source;
    public TextureId actual;
    public bool replaced;
}
internal class UnityEngine.UIElements.UIR.TextureSlotManager : object {
    internal static int k_SlotCount;
    internal static int k_SlotSize;
    internal static Int32[] slotIds;
    internal static int textureTableId;
    private TextureId[] m_Textures;
    private Int32[] m_Tickets;
    private int m_CurrentTicket;
    private int m_FirstUsedTicket;
    private Vector4[] m_GpuTextures;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <FreeSlots>k__BackingField;
    internal TextureRegistry textureRegistry;
    public int FreeSlots { get; private set; }
    private static TextureSlotManager();
    public void Reset();
    public void StartNewBatch();
    public int IndexOf(TextureId id);
    public void MarkUsed(int slotIndex);
    [CompilerGeneratedAttribute]
public int get_FreeSlots();
    [CompilerGeneratedAttribute]
private void set_FreeSlots(int value);
    public int FindOldestSlot();
    public void Bind(TextureId id, float sdfScale, int slot, MaterialPropertyBlock mat);
    public void SetGpuData(int slotIndex, TextureId id, int textureWidth, int textureHeight, float sdfScale);
}
internal class UnityEngine.UIElements.UIR.Transform3x4 : ValueType {
    public Vector4 v0;
    public Vector4 v1;
    public Vector4 v2;
}
internal class UnityEngine.UIElements.UIR.UIRenderDevice : object {
    internal static UInt32 k_MaxQueuedFrameCount;
    internal static int k_PruneEmptyPageFrameCount;
    private bool m_MockDevice;
    private IntPtr m_DefaultStencilState;
    private IntPtr m_VertexDecl;
    private Page m_FirstPage;
    private UInt32 m_NextPageVertexCount;
    private UInt32 m_LargeMeshVertexCount;
    private float m_IndexToVertexCountRatio;
    private List`1<List`1<AllocToFree>> m_DeferredFrees;
    private List`1<List`1<AllocToUpdate>> m_Updates;
    private UInt32[] m_Fences;
    private MaterialPropertyBlock m_StandardMatProps;
    private UInt32 m_FrameIndex;
    private UInt32 m_NextUpdateID;
    private DrawStatistics m_DrawStats;
    private LinkedPool`1<MeshHandle> m_MeshHandles;
    private DrawParams m_DrawParams;
    private TextureSlotManager m_TextureSlotManager;
    private static LinkedList`1<DeviceToFree> m_DeviceFreeQueue;
    private static int m_ActiveDeviceCount;
    private static bool m_SubscribedToNotifications;
    private static bool m_SynchronousFree;
    private static int s_GradientSettingsTexID;
    private static int s_ShaderInfoTexID;
    private static int s_TransformsPropID;
    private static int s_ClipRectsPropID;
    private static ProfilerMarker s_MarkerAllocate;
    private static ProfilerMarker s_MarkerFree;
    private static ProfilerMarker s_MarkerAdvanceFrame;
    private static ProfilerMarker s_MarkerFence;
    private static ProfilerMarker s_MarkerBeforeDraw;
    private static Nullable`1<bool> s_VertexTexturingIsAvailable;
    private static string k_VertexTexturingIsAvailableTag;
    private static string k_VertexTexturingIsAvailableTrue;
    private static Nullable`1<bool> s_ShaderModelIs35;
    private static string k_ShaderModelIs35Tag;
    private static string k_ShaderModelIs35True;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UInt32 <maxVerticesPerPage>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <breakBatches>k__BackingField;
    private static Texture2D s_DefaultShaderInfoTexFloat;
    private static Texture2D s_DefaultShaderInfoTexARGB8;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    internal UInt32 maxVerticesPerPage { get; }
    internal bool breakBatches { get; internal set; }
    internal static Texture2D defaultShaderInfoTexFloat { get; }
    internal static Texture2D defaultShaderInfoTexARGB8 { get; }
    internal static bool vertexTexturingIsAvailable { get; }
    internal static bool shaderModelIs35 { get; }
    private bool fullyCreated { get; }
    protected bool disposed { get; private set; }
    private static UIRenderDevice();
    public UIRenderDevice(UInt32 initialVertexCapacity, UInt32 initialIndexCapacity);
    protected UIRenderDevice(UInt32 initialVertexCapacity, UInt32 initialIndexCapacity, bool mockDevice);
    [CompilerGeneratedAttribute]
internal UInt32 get_maxVerticesPerPage();
    [CompilerGeneratedAttribute]
internal bool get_breakBatches();
    [CompilerGeneratedAttribute]
internal void set_breakBatches(bool value);
    internal static Texture2D get_defaultShaderInfoTexFloat();
    internal static Texture2D get_defaultShaderInfoTexARGB8();
    internal static bool get_vertexTexturingIsAvailable();
    internal static bool get_shaderModelIs35();
    private void InitVertexDeclaration();
    private void CompleteCreation();
    private bool get_fullyCreated();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    internal void DisposeImmediate();
    protected virtual void Dispose(bool disposing);
    public MeshHandle Allocate(UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, UInt16& indexOffset);
    public void Update(MeshHandle mesh, UInt32 vertexCount, NativeSlice`1& vertexData);
    public void Update(MeshHandle mesh, UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, UInt16& indexOffset);
    private void UpdateCopyBackIndices(MeshHandle mesh, bool copyBackIndices);
    internal List`1<AllocToUpdate> ActiveUpdatesForMeshHandle(MeshHandle mesh);
    private bool TryAllocFromPage(Page page, UInt32 vertexCount, UInt32 indexCount, Alloc& va, Alloc& ia, bool shortLived);
    private void Allocate(MeshHandle meshHandle, UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, bool shortLived);
    private void UpdateAfterGPUUsedData(MeshHandle mesh, UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, UInt16& indexOffset, AllocToUpdate& allocToUpdate, bool copyBackIndices);
    public void Free(MeshHandle mesh);
    public void OnFrameRenderingBegin();
    internal static NativeSlice`1<T> PtrToSlice(Void* p, int count);
    private void ApplyDrawCommandState(RenderChainCommand cmd, int textureSlot, Material newMat, bool newMatDiffers, EvaluationState& st);
    private void ApplyBatchState(EvaluationState& st, bool allowMaterialChange);
    public void EvaluateChain(RenderChainCommand head, Material initialMat, Material defaultMat, Texture gradientSettings, Texture shaderInfo, float pixelsPerPoint, NativeSlice`1<Transform3x4> transforms, NativeSlice`1<Vector4> clipRects, MaterialPropertyBlock stateMatProps, bool allowMaterialChange, Exception& immediateException);
    private void UpdateFenceValue();
    private void KickRanges(DrawBufferRange* ranges, Int32& rangesReady, Int32& rangesStart, int rangesCount, Page curPage);
    private void DrawRanges(GPUBuffer`1<I> ib, GPUBuffer`1<T> vb, NativeSlice`1<DrawBufferRange> ranges);
    internal void WaitOnAllCpuFences();
    private void WaitOnCpuFence(UInt32 fence);
    public void AdvanceFrame();
    private void PruneUnusedPages();
    internal static void PrepareForGfxDeviceRecreate();
    internal static void WrapUpGfxDeviceRecreate();
    internal static void FlushAllPendingDeviceDisposes();
    internal AllocationStatistics GatherAllocationStatistics();
    internal DrawStatistics GatherDrawStatistics();
    private static void ProcessDeviceFreeQueue();
    private static void OnEngineUpdateGlobal();
    private static void OnFlushPendingResources();
}
internal class UnityEngine.UIElements.UIR.UIRVEShaderInfoAllocator : ValueType {
    private BaseShaderInfoStorage m_Storage;
    private BitmapAllocator32 m_TransformAllocator;
    private BitmapAllocator32 m_ClipRectAllocator;
    private BitmapAllocator32 m_OpacityAllocator;
    private BitmapAllocator32 m_ColorAllocator;
    private BitmapAllocator32 m_TextSettingsAllocator;
    private bool m_StorageReallyCreated;
    private bool m_VertexTexturingEnabled;
    private NativeArray`1<Transform3x4> m_Transforms;
    private NativeArray`1<Vector4> m_ClipRects;
    internal static Vector2Int identityTransformTexel;
    internal static Vector2Int infiniteClipRectTexel;
    internal static Vector2Int fullOpacityTexel;
    internal static Vector2Int clearColorTexel;
    internal static Vector2Int defaultTextCoreSettingsTexel;
    internal static Matrix4x4 identityTransformValue;
    internal static Vector4 identityTransformRow0Value;
    internal static Vector4 identityTransformRow1Value;
    internal static Vector4 identityTransformRow2Value;
    internal static Vector4 infiniteClipRectValue;
    internal static Vector4 fullOpacityValue;
    internal static Vector4 clearColorValue;
    internal static TextCoreSettings defaultTextCoreSettingsValue;
    public static BMPAlloc identityTransform;
    public static BMPAlloc infiniteClipRect;
    public static BMPAlloc fullOpacity;
    public static BMPAlloc clearColor;
    public static BMPAlloc defaultTextCoreSettings;
    private static int pageWidth { get; }
    private static int pageHeight { get; }
    public NativeSlice`1<Transform3x4> transformConstants { get; }
    public NativeSlice`1<Vector4> clipRectConstants { get; }
    public Texture atlas { get; }
    public bool internalAtlasCreated { get; }
    private static UIRVEShaderInfoAllocator();
    private static int get_pageWidth();
    private static int get_pageHeight();
    private static Vector2Int AllocToTexelCoord(BitmapAllocator32& allocator, BMPAlloc alloc);
    private static int AllocToConstantBufferIndex(BMPAlloc alloc);
    private static bool AtlasRectMatchesPage(BitmapAllocator32& allocator, BMPAlloc defAlloc, RectInt atlasRect);
    public NativeSlice`1<Transform3x4> get_transformConstants();
    public NativeSlice`1<Vector4> get_clipRectConstants();
    public Texture get_atlas();
    public bool get_internalAtlasCreated();
    public void Construct();
    private void ReallyCreateStorage();
    public void Dispose();
    public void IssuePendingStorageChanges();
    public BMPAlloc AllocTransform();
    public BMPAlloc AllocClipRect();
    public BMPAlloc AllocOpacity();
    public BMPAlloc AllocColor();
    public BMPAlloc AllocTextCoreSettings(TextCoreSettings settings);
    public void SetTransformValue(BMPAlloc alloc, Matrix4x4 xform);
    public void SetClipRectValue(BMPAlloc alloc, Vector4 clipRect);
    public void SetOpacityValue(BMPAlloc alloc, float opacity);
    public void SetColorValue(BMPAlloc alloc, Color color, bool isEditorContext);
    public void SetTextCoreSettingValue(BMPAlloc alloc, TextCoreSettings settings, bool isEditorContext);
    public void FreeTransform(BMPAlloc alloc);
    public void FreeClipRect(BMPAlloc alloc);
    public void FreeOpacity(BMPAlloc alloc);
    public void FreeColor(BMPAlloc alloc);
    public void FreeTextCoreSettings(BMPAlloc alloc);
    public Color32 TransformAllocToVertexData(BMPAlloc alloc);
    public Color32 ClipRectAllocToVertexData(BMPAlloc alloc);
    public Color32 OpacityAllocToVertexData(BMPAlloc alloc);
    public Color32 ColorAllocToVertexData(BMPAlloc alloc);
    public Color32 TextCoreSettingsToVertexData(BMPAlloc alloc);
}
[VisibleToOtherModulesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NativeHeaderAttribute("ModuleOverrides/com.unity.ui/Core/Native/Renderer/UIRendererUtility.h")]
internal class UnityEngine.UIElements.UIR.Utility : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`1<bool> GraphicsResourcesRecreate;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static Action EngineUpdate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action FlushPendingResources;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static Action`1<Camera> RegisterIntermediateRenderers;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`1<IntPtr> RenderNodeAdd;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`1<IntPtr> RenderNodeExecute;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private static Action`1<IntPtr> RenderNodeCleanup;
    private static ProfilerMarker s_MarkerRaiseEngineUpdate;
    private static Utility();
    public static void SetVectorArray(MaterialPropertyBlock props, int name, NativeSlice`1<T> vector4s);
    [CompilerGeneratedAttribute]
public static void add_GraphicsResourcesRecreate(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public static void remove_GraphicsResourcesRecreate(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public static void add_EngineUpdate(Action value);
    [CompilerGeneratedAttribute]
public static void remove_EngineUpdate(Action value);
    [CompilerGeneratedAttribute]
public static void add_FlushPendingResources(Action value);
    [CompilerGeneratedAttribute]
public static void remove_FlushPendingResources(Action value);
    [CompilerGeneratedAttribute]
public static void add_RegisterIntermediateRenderers(Action`1<Camera> value);
    [CompilerGeneratedAttribute]
public static void remove_RegisterIntermediateRenderers(Action`1<Camera> value);
    [CompilerGeneratedAttribute]
public static void add_RenderNodeAdd(Action`1<IntPtr> value);
    [CompilerGeneratedAttribute]
public static void remove_RenderNodeAdd(Action`1<IntPtr> value);
    [CompilerGeneratedAttribute]
public static void add_RenderNodeExecute(Action`1<IntPtr> value);
    [CompilerGeneratedAttribute]
public static void remove_RenderNodeExecute(Action`1<IntPtr> value);
    [CompilerGeneratedAttribute]
public static void add_RenderNodeCleanup(Action`1<IntPtr> value);
    [CompilerGeneratedAttribute]
public static void remove_RenderNodeCleanup(Action`1<IntPtr> value);
    [RequiredByNativeCodeAttribute]
internal static void RaiseGraphicsResourcesRecreate(bool recreate);
    [RequiredByNativeCodeAttribute]
internal static void RaiseEngineUpdate();
    [RequiredByNativeCodeAttribute]
internal static void RaiseFlushPendingResources();
    [RequiredByNativeCodeAttribute]
internal static void RaiseRegisterIntermediateRenderers(Camera camera);
    [RequiredByNativeCodeAttribute]
internal static void RaiseRenderNodeAdd(IntPtr userData);
    [RequiredByNativeCodeAttribute]
internal static void RaiseRenderNodeExecute(IntPtr userData);
    [RequiredByNativeCodeAttribute]
internal static void RaiseRenderNodeCleanup(IntPtr userData);
    [ThreadSafeAttribute]
private static IntPtr AllocateBuffer(int elementCount, int elementStride, bool vertexBuffer);
    [ThreadSafeAttribute]
private static void FreeBuffer(IntPtr buffer);
    [ThreadSafeAttribute]
private static void UpdateBufferRanges(IntPtr buffer, IntPtr ranges, int rangeCount, int writeRangeStart, int writeRangeEnd);
    [ThreadSafeAttribute]
private static void SetVectorArray(MaterialPropertyBlock props, int name, IntPtr vector4s, int count);
    [ThreadSafeAttribute]
public static IntPtr GetVertexDeclaration(VertexAttributeDescriptor[] vertexAttributes);
    public static void RegisterIntermediateRenderer(Camera camera, Material material, Matrix4x4 transform, Bounds aabb, int renderLayer, int shadowCasting, bool receiveShadows, int sameDistanceSortPriority, ulong sceneCullingMask, int rendererCallbackFlags, IntPtr userData, int userDataSize);
    [ThreadSafeAttribute]
public static void DrawRanges(IntPtr ib, IntPtr* vertexStreams, int streamCount, IntPtr ranges, int rangeCount, IntPtr vertexDecl);
    [ThreadSafeAttribute]
public static void SetPropertyBlock(MaterialPropertyBlock props);
    [ThreadSafeAttribute]
public static void SetScissorRect(RectInt scissorRect);
    [ThreadSafeAttribute]
public static void DisableScissor();
    [ThreadSafeAttribute]
public static bool IsScissorEnabled();
    [ThreadSafeAttribute]
public static IntPtr CreateStencilState(StencilState stencilState);
    [ThreadSafeAttribute]
public static void SetStencilState(IntPtr stencilState, int stencilRef);
    [ThreadSafeAttribute]
public static bool HasMappedBufferRange();
    [ThreadSafeAttribute]
public static UInt32 InsertCPUFence();
    [ThreadSafeAttribute]
public static bool CPUFencePassed(UInt32 fence);
    [ThreadSafeAttribute]
public static void WaitForCPUFencePassed(UInt32 fence);
    [ThreadSafeAttribute]
public static void SyncRenderThread();
    [ThreadSafeAttribute]
public static RectInt GetActiveViewport();
    [ThreadSafeAttribute]
public static void ProfileDrawChainBegin();
    [ThreadSafeAttribute]
public static void ProfileDrawChainEnd();
    public static void NotifyOfUIREvents(bool subscribe);
    [ThreadSafeAttribute]
public static Matrix4x4 GetUnityProjectionMatrix();
    [ThreadSafeAttribute]
public static Matrix4x4 GetDeviceProjectionMatrix();
    [ThreadSafeAttribute]
public static bool DebugIsMainThread();
    private static void RegisterIntermediateRenderer_Injected(Camera camera, Material material, Matrix4x4& transform, Bounds& aabb, int renderLayer, int shadowCasting, bool receiveShadows, int sameDistanceSortPriority, ulong sceneCullingMask, int rendererCallbackFlags, IntPtr userData, int userDataSize);
    private static void SetScissorRect_Injected(RectInt& scissorRect);
    private static IntPtr CreateStencilState_Injected(StencilState& stencilState);
    private static void GetActiveViewport_Injected(RectInt& ret);
    private static void GetUnityProjectionMatrix_Injected(Matrix4x4& ret);
    private static void GetDeviceProjectionMatrix_Injected(Matrix4x4& ret);
}
internal class UnityEngine.UIElements.UIR.VectorImageManager : object {
    public static List`1<VectorImageManager> instances;
    private static ProfilerMarker s_MarkerRegister;
    private static ProfilerMarker s_MarkerUnregister;
    private AtlasBase m_Atlas;
    private Dictionary`2<VectorImage, VectorImageRenderInfo> m_Registered;
    private VectorImageRenderInfoPool m_RenderInfoPool;
    private GradientRemapPool m_GradientRemapPool;
    private GradientSettingsAtlas m_GradientSettingsAtlas;
    private bool m_LoggedExhaustedSettingsAtlas;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <disposed>k__BackingField;
    public Texture2D atlas { get; }
    protected bool disposed { get; private set; }
    public VectorImageManager(AtlasBase atlas);
    private static VectorImageManager();
    public Texture2D get_atlas();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Reset();
    public void Commit();
    public GradientRemap AddUser(VectorImage vi, VisualElement context);
    public void RemoveUser(VectorImage vi);
    private VectorImageRenderInfo Register(VectorImage vi, VisualElement context);
    private void Unregister(VectorImage vi, VectorImageRenderInfo renderInfo);
}
internal class UnityEngine.UIElements.UIR.VectorImageRenderInfo : LinkedPoolItem`1<VectorImageRenderInfo> {
    public int useCount;
    public GradientRemap firstGradientRemap;
    public Alloc gradientSettingsAlloc;
    public void Reset();
}
internal class UnityEngine.UIElements.UIR.VectorImageRenderInfoPool : LinkedPool`1<VectorImageRenderInfo> {
}
internal enum UnityEngine.UIElements.UIR.VertexFlags : Enum {
    public int value__;
    public static VertexFlags IsSolid;
    public static VertexFlags IsText;
    public static VertexFlags IsTextured;
    public static VertexFlags IsDynamic;
    public static VertexFlags IsSvgGradients;
    [ObsoleteAttribute("Enum member VertexFlags.LastType has been deprecated. Use VertexFlags.IsGraphViewEdge instead.")]
public static VertexFlags LastType;
    public static VertexFlags IsGraphViewEdge;
}
internal class UnityEngine.UIElements.UIRAtlasAllocator : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <maxAtlasSize>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <maxImageWidth>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <maxImageHeight>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <virtualWidth>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <virtualHeight>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <physicalWidth>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <physicalHeight>k__BackingField;
    private AreaNode m_FirstUnpartitionedArea;
    private Row[] m_OpenRows;
    private int m_1SidePadding;
    private int m_2SidePadding;
    private static ProfilerMarker s_MarkerTryAllocate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    public int maxAtlasSize { get; }
    public int maxImageWidth { get; }
    public int maxImageHeight { get; }
    public int virtualWidth { get; private set; }
    public int virtualHeight { get; private set; }
    public int physicalWidth { get; private set; }
    public int physicalHeight { get; private set; }
    protected bool disposed { get; private set; }
    public UIRAtlasAllocator(int initialAtlasSize, int maxAtlasSize, int sidePadding);
    private static UIRAtlasAllocator();
    [CompilerGeneratedAttribute]
public int get_maxAtlasSize();
    [CompilerGeneratedAttribute]
public int get_maxImageWidth();
    [CompilerGeneratedAttribute]
public int get_maxImageHeight();
    [CompilerGeneratedAttribute]
public int get_virtualWidth();
    [CompilerGeneratedAttribute]
private void set_virtualWidth(int value);
    [CompilerGeneratedAttribute]
public int get_virtualHeight();
    [CompilerGeneratedAttribute]
private void set_virtualHeight(int value);
    [CompilerGeneratedAttribute]
public int get_physicalWidth();
    [CompilerGeneratedAttribute]
private void set_physicalWidth(int value);
    [CompilerGeneratedAttribute]
public int get_physicalHeight();
    [CompilerGeneratedAttribute]
private void set_physicalHeight(int value);
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static int GetLog2OfNextPower(int n);
    public bool TryAllocate(int width, int height, RectInt& location);
    private bool TryPartitionArea(AreaNode areaNode, int rowIndex, int rowHeight, int minWidth);
    private void BuildAreas();
}
internal class UnityEngine.UIElements.UIRLayoutUpdater : BaseVisualTreeUpdater {
    private static int kMaxValidateLayoutCount;
    private static string s_Description;
    private static ProfilerMarker s_ProfilerMarker;
    private List`1<KeyValuePair`2<Rect, VisualElement>> changeEventsList;
    public ProfilerMarker profilerMarker { get; }
    private static UIRLayoutUpdater();
    public virtual ProfilerMarker get_profilerMarker();
    public virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
    public virtual void Update();
    private void UpdateSubTree(VisualElement ve, bool isDisplayed, List`1<KeyValuePair`2<Rect, VisualElement>> changeEvents);
    private void DispatchChangeEvents(List`1<KeyValuePair`2<Rect, VisualElement>> changeEvents, int currentLayoutPass);
}
internal class UnityEngine.UIElements.UIRRepaintUpdater : BaseVisualTreeUpdater {
    private BaseVisualElementPanel attachedPanel;
    internal RenderChain renderChain;
    private static string s_Description;
    private static ProfilerMarker s_ProfilerMarker;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <drawStats>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <breakBatches>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <disposed>k__BackingField;
    public ProfilerMarker profilerMarker { get; }
    public bool drawStats { get; public set; }
    public bool breakBatches { get; public set; }
    protected bool disposed { get; private set; }
    private static UIRRepaintUpdater();
    public virtual ProfilerMarker get_profilerMarker();
    [CompilerGeneratedAttribute]
public bool get_drawStats();
    [CompilerGeneratedAttribute]
public void set_drawStats(bool value);
    [CompilerGeneratedAttribute]
public bool get_breakBatches();
    [CompilerGeneratedAttribute]
public void set_breakBatches(bool value);
    public virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
    public virtual void Update();
    protected virtual RenderChain CreateRenderChain();
    private static void OnGraphicsResourcesRecreate(bool recreate);
    private void OnPanelChanged(BaseVisualElementPanel obj);
    private void AttachToPanel();
    private void DetachFromPanel();
    private void InitRenderChain();
    internal void DestroyRenderChain();
    private void OnPanelAtlasChanged();
    private void OnPanelHierarchyChanged(VisualElement ve, HierarchyChangeType changeType);
    private void OnPanelStandardShaderChanged();
    private void OnPanelStandardWorldSpaceShaderChanged();
    private void ResetAllElementsDataRecursive(VisualElement ve);
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.UIRUtility : object {
    public static string k_DefaultShaderName;
    public static string k_DefaultWorldSpaceShaderName;
    public static float k_Epsilon;
    public static float k_ClearZ;
    public static float k_MeshPosZ;
    public static float k_MaskPosZ;
    public static int k_MaxMaskDepth;
    private static UIRUtility();
    public static bool ShapeWindingIsClockwise(int maskDepth, int stencilRef);
    public static Vector4 ToVector4(Rect rc);
    public static bool IsRoundRect(VisualElement ve);
    [ExtensionAttribute]
public static void Multiply2D(Quaternion rotation, Vector2& point);
    public static bool IsVectorImageBackground(VisualElement ve);
    public static bool IsElementSelfHidden(VisualElement ve);
    public static void Destroy(Object obj);
    public static int GetPrevPow2(int n);
    public static int GetNextPow2(int n);
    public static int GetNextPow2Exp(int n);
}
internal class UnityEngine.UIElements.UITKTextHandle : TextHandle {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector2 <MeasuredSizes>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Vector2 <RoundedSizes>k__BackingField;
    private TextElement m_TextElement;
    internal bool isOverridingCursor;
    internal int currentLinkIDHash;
    internal bool hasLinkTag;
    internal bool hasATag;
    internal static float k_MinPadding;
    public Vector2 MeasuredSizes { get; public set; }
    public Vector2 RoundedSizes { get; public set; }
    public UITKTextHandle(TextElement te);
    private static UITKTextHandle();
    [CompilerGeneratedAttribute]
public Vector2 get_MeasuredSizes();
    [CompilerGeneratedAttribute]
public void set_MeasuredSizes(Vector2 value);
    [CompilerGeneratedAttribute]
public Vector2 get_RoundedSizes();
    [CompilerGeneratedAttribute]
public void set_RoundedSizes(Vector2 value);
    public float ComputeTextWidth(string textToMeasure, bool wordWrap, float width, float height);
    public float ComputeTextHeight(string textToMeasure, float width, float height);
    public TextInfo Update();
    private void ATagOnPointerUp(PointerUpEvent pue);
    private void ATagOnPointerOver(PointerOverEvent _);
    private void ATagOnPointerMove(PointerMoveEvent pme);
    private void ATagOnPointerOut(PointerOutEvent _);
    internal void LinkTagOnPointerDown(PointerDownEvent pde);
    internal void LinkTagOnPointerUp(PointerUpEvent pue);
    internal void LinkTagOnPointerMove(PointerMoveEvent pme);
    private void LinkTagOnPointerOut(PointerOutEvent poe);
    private void HandleLinkTag();
    private void HandleATag();
    private TextOverflowMode GetTextOverflowMode();
    internal void ConvertUssToTextGenerationSettings(TextGenerationSettings tgs);
    internal bool TextLibraryCanElide();
    internal float GetTextEffectPadding(FontAsset fontAsset);
}
public class UnityEngine.UIElements.UnsignedIntegerField : TextValueField`1<UInt32> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    private UnsignedIntegerInput integerInput { get; }
    public UnsignedIntegerField(int maxLength);
    public UnsignedIntegerField(string label, int maxLength);
    private static UnsignedIntegerField();
    private UnsignedIntegerInput get_integerInput();
    protected virtual string ValueToString(UInt32 v);
    protected virtual UInt32 StringToValue(string str);
    internal virtual bool CanTryParse(string textString);
    public virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, UInt32 startValue);
}
public class UnityEngine.UIElements.UnsignedLongField : TextValueField`1<ulong> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    private UnsignedLongInput unsignedLongInput { get; }
    public UnsignedLongField(int maxLength);
    public UnsignedLongField(string label, int maxLength);
    private static UnsignedLongField();
    private UnsignedLongInput get_unsignedLongInput();
    protected virtual string ValueToString(ulong v);
    protected virtual ulong StringToValue(string str);
    internal virtual bool CanTryParse(string textString);
    public virtual void ApplyInputDeviceDelta(Vector3 delta, DeltaSpeed speed, ulong startValue);
}
internal class UnityEngine.UIElements.UpgradeConstants : object {
    public static string EditorNamespace;
    public static string EditorAssembly;
}
public static class UnityEngine.UIElements.UQuery : object {
}
public class UnityEngine.UIElements.UQueryBuilder`1 : ValueType {
    private List`1<StyleSelector> m_StyleSelectors;
    private List`1<StyleSelectorPart> m_Parts;
    private VisualElement m_Element;
    private List`1<RuleMatcher> m_Matchers;
    private StyleSelectorRelationship m_Relationship;
    private int pseudoStatesMask;
    private int negatedPseudoStatesMask;
    private List`1<StyleSelector> styleSelectors { get; }
    private List`1<StyleSelectorPart> parts { get; }
    public UQueryBuilder`1(VisualElement visualElement);
    private List`1<StyleSelector> get_styleSelectors();
    private List`1<StyleSelectorPart> get_parts();
    public UQueryBuilder`1<T> Class(string classname);
    public UQueryBuilder`1<T> Name(string id);
    public UQueryBuilder`1<T2> Descendents(string name, String[] classNames);
    public UQueryBuilder`1<T2> Descendents(string name, string classname);
    public UQueryBuilder`1<T2> Children(string name, String[] classes);
    public UQueryBuilder`1<T2> Children(string name, string className);
    public UQueryBuilder`1<T2> OfType(string name, String[] classes);
    public UQueryBuilder`1<T2> OfType(string name, string className);
    internal UQueryBuilder`1<T> SingleBaseType();
    public UQueryBuilder`1<T> Where(Func`2<T, bool> selectorPredicate);
    private void AddClass(string c);
    private void AddClasses(String[] classes);
    private void AddName(string id);
    private void AddType();
    private UQueryBuilder`1<T> AddPseudoState(PseudoStates s);
    private UQueryBuilder`1<T> AddNegativePseudoState(PseudoStates s);
    public UQueryBuilder`1<T> Active();
    public UQueryBuilder`1<T> NotActive();
    public UQueryBuilder`1<T> Visible();
    public UQueryBuilder`1<T> NotVisible();
    public UQueryBuilder`1<T> Hovered();
    public UQueryBuilder`1<T> NotHovered();
    public UQueryBuilder`1<T> Checked();
    public UQueryBuilder`1<T> NotChecked();
    [ObsoleteAttribute("Use Checked() instead")]
public UQueryBuilder`1<T> Selected();
    [ObsoleteAttribute("Use NotChecked() instead")]
public UQueryBuilder`1<T> NotSelected();
    public UQueryBuilder`1<T> Enabled();
    public UQueryBuilder`1<T> NotEnabled();
    public UQueryBuilder`1<T> Focused();
    public UQueryBuilder`1<T> NotFocused();
    private UQueryBuilder`1<T2> AddRelationship(StyleSelectorRelationship relationship);
    private void AddPseudoStatesRuleIfNecessasy();
    private void FinishSelector();
    private bool CurrentSelectorEmpty();
    private void FinishCurrentSelector();
    public UQueryState`1<T> Build();
    public static T op_Implicit(UQueryBuilder`1<T> s);
    public static bool op_Equality(UQueryBuilder`1<T> builder1, UQueryBuilder`1<T> builder2);
    public static bool op_Inequality(UQueryBuilder`1<T> builder1, UQueryBuilder`1<T> builder2);
    public T First();
    public T Last();
    public List`1<T> ToList();
    public void ToList(List`1<T> results);
    public T AtIndex(int index);
    public void ForEach(List`1<T2> result, Func`2<T, T2> funcCall);
    public List`1<T2> ForEach(Func`2<T, T2> funcCall);
    public void ForEach(Action`1<T> funcCall);
    public sealed virtual bool Equals(UQueryBuilder`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class UnityEngine.UIElements.UQueryExtensions : object {
    private static UQueryState`1<VisualElement> SingleElementEmptyQuery;
    private static UQueryState`1<VisualElement> SingleElementNameQuery;
    private static UQueryState`1<VisualElement> SingleElementClassQuery;
    private static UQueryState`1<VisualElement> SingleElementNameAndClassQuery;
    private static UQueryState`1<VisualElement> SingleElementTypeQuery;
    private static UQueryState`1<VisualElement> SingleElementTypeAndNameQuery;
    private static UQueryState`1<VisualElement> SingleElementTypeAndClassQuery;
    private static UQueryState`1<VisualElement> SingleElementTypeAndNameAndClassQuery;
    private static UQueryExtensions();
    [ExtensionAttribute]
public static T Q(VisualElement e, string name, String[] classes);
    [ExtensionAttribute]
public static VisualElement Q(VisualElement e, string name, String[] classes);
    [ExtensionAttribute]
public static T Q(VisualElement e, string name, string className);
    [ExtensionAttribute]
internal static T MandatoryQ(VisualElement e, string name, string className);
    [ExtensionAttribute]
public static VisualElement Q(VisualElement e, string name, string className);
    [ExtensionAttribute]
internal static VisualElement MandatoryQ(VisualElement e, string name, string className);
    [ExtensionAttribute]
public static UQueryBuilder`1<VisualElement> Query(VisualElement e, string name, String[] classes);
    [ExtensionAttribute]
public static UQueryBuilder`1<VisualElement> Query(VisualElement e, string name, string className);
    [ExtensionAttribute]
public static UQueryBuilder`1<T> Query(VisualElement e, string name, String[] classes);
    [ExtensionAttribute]
public static UQueryBuilder`1<T> Query(VisualElement e, string name, string className);
    [ExtensionAttribute]
public static UQueryBuilder`1<VisualElement> Query(VisualElement e);
}
public class UnityEngine.UIElements.UQueryState`1 : ValueType {
    private static ActionQueryMatcher<T> s_Action;
    private VisualElement m_Element;
    internal List`1<RuleMatcher> m_Matchers;
    private static ListQueryMatcher`1<T, T> s_List;
    private static ListQueryMatcher`1<T, VisualElement> s_EnumerationList;
    internal UQueryState`1(VisualElement element, List`1<RuleMatcher> matchers);
    private static UQueryState`1();
    public UQueryState`1<T> RebuildOn(VisualElement element);
    private T Single(SingleQueryMatcher matcher);
    public T First();
    public T Last();
    public void ToList(List`1<T> results);
    public List`1<T> ToList();
    public T AtIndex(int index);
    public void ForEach(Action`1<T> funcCall);
    public void ForEach(List`1<T2> result, Func`2<T, T2> funcCall);
    public List`1<T2> ForEach(Func`2<T, T2> funcCall);
    public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(UQueryState`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UQueryState`1<T> state1, UQueryState`1<T> state2);
    public static bool op_Inequality(UQueryState`1<T> state1, UQueryState`1<T> state2);
}
[FlagsAttribute]
public enum UnityEngine.UIElements.UsageHints : Enum {
    public int value__;
    public static UsageHints None;
    public static UsageHints DynamicTransform;
    public static UsageHints GroupTransform;
    public static UsageHints MaskContainer;
    public static UsageHints DynamicColor;
}
internal class UnityEngine.UIElements.UxmlAsset : object {
    [SerializeField]
private string m_FullTypeName;
    [SerializeField]
private int m_Id;
    [SerializeField]
private int m_OrderInDocument;
    [SerializeField]
private int m_ParentId;
    [SerializeField]
protected List`1<string> m_Properties;
    public string fullTypeName { get; public set; }
    public int id { get; public set; }
    public int orderInDocument { get; public set; }
    public int parentId { get; public set; }
    public UxmlAsset(string fullTypeName);
    public string get_fullTypeName();
    public void set_fullTypeName(string value);
    public int get_id();
    public void set_id(int value);
    public int get_orderInDocument();
    public void set_orderInDocument(int value);
    public int get_parentId();
    public void set_parentId(int value);
    public List`1<string> GetProperties();
    public bool HasParent();
    public bool HasAttribute(string attributeName);
    public string GetAttributeValue(string attributeName);
    public sealed virtual bool TryGetAttributeValue(string propertyName, String& value);
    public void SetAttribute(string name, string value);
    public void RemoveAttribute(string attributeName);
    private void SetOrAddProperty(string propertyName, string propertyValue);
}
internal class UnityEngine.UIElements.UxmlAssetAttributeDescription`1 : TypedUxmlAttributeDescription`1<T> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual T GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
}
public abstract class UnityEngine.UIElements.UxmlAttributeDescription : object {
    protected static string xmlSchemaNamespace;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <name>k__BackingField;
    private String[] m_ObsoleteNames;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <typeNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Use <use>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private UxmlTypeRestriction <restriction>k__BackingField;
    public string name { get; public set; }
    public IEnumerable`1<string> obsoleteNames { get; public set; }
    public string type { get; protected set; }
    public string typeNamespace { get; protected set; }
    public string defaultValueAsString { get; }
    public Use use { get; public set; }
    public UxmlTypeRestriction restriction { get; public set; }
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
public void set_name(string value);
    public IEnumerable`1<string> get_obsoleteNames();
    public void set_obsoleteNames(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_type();
    [CompilerGeneratedAttribute]
protected void set_type(string value);
    [CompilerGeneratedAttribute]
public string get_typeNamespace();
    [CompilerGeneratedAttribute]
protected void set_typeNamespace(string value);
    public abstract virtual string get_defaultValueAsString();
    [CompilerGeneratedAttribute]
public Use get_use();
    [CompilerGeneratedAttribute]
public void set_use(Use value);
    [CompilerGeneratedAttribute]
public UxmlTypeRestriction get_restriction();
    [CompilerGeneratedAttribute]
public void set_restriction(UxmlTypeRestriction value);
    internal bool TryGetValueFromBagAsString(IUxmlAttributes bag, CreationContext cc, String& value);
    protected bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Func`3<string, T, T> converterFunc, T defaultValue, T& value);
    protected T GetValueFromBag(IUxmlAttributes bag, CreationContext cc, Func`3<string, T, T> converterFunc, T defaultValue);
}
public class UnityEngine.UIElements.UxmlAttributeOverridesFactory : UxmlFactory`2<VisualElement, UxmlAttributeOverridesTraits> {
    internal static string k_ElementName;
    public string uxmlName { get; }
    public string uxmlQualifiedName { get; }
    public string substituteForTypeName { get; }
    public string substituteForTypeNamespace { get; }
    public string substituteForTypeQualifiedName { get; }
    public virtual string get_uxmlName();
    public virtual string get_uxmlQualifiedName();
    public virtual string get_substituteForTypeName();
    public virtual string get_substituteForTypeNamespace();
    public virtual string get_substituteForTypeQualifiedName();
    public virtual VisualElement Create(IUxmlAttributes bag, CreationContext cc);
}
public class UnityEngine.UIElements.UxmlAttributeOverridesTraits : UxmlTraits {
    internal static string k_ElementNameAttributeName;
    private UxmlStringAttributeDescription m_ElementName;
    public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription { get; }
    [IteratorStateMachineAttribute("UnityEngine.UIElements.UxmlAttributeOverridesTraits/<get_uxmlChildElementsDescription>d__3")]
public virtual IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription();
}
public class UnityEngine.UIElements.UxmlBoolAttributeDescription : TypedUxmlAttributeDescription`1<bool> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual bool GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Boolean& value);
    private static bool ConvertValueToBool(string v, bool defaultValue);
}
public class UnityEngine.UIElements.UxmlChildElementDescription : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <elementName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <elementNamespace>k__BackingField;
    public string elementName { get; protected set; }
    public string elementNamespace { get; protected set; }
    public UxmlChildElementDescription(Type t);
    [CompilerGeneratedAttribute]
public string get_elementName();
    [CompilerGeneratedAttribute]
protected void set_elementName(string value);
    [CompilerGeneratedAttribute]
public string get_elementNamespace();
    [CompilerGeneratedAttribute]
protected void set_elementNamespace(string value);
}
public class UnityEngine.UIElements.UxmlColorAttributeDescription : TypedUxmlAttributeDescription`1<Color> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual Color GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Color& value);
    private static Color ConvertValueToColor(string v, Color defaultValue);
}
public class UnityEngine.UIElements.UxmlDoubleAttributeDescription : TypedUxmlAttributeDescription`1<double> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual double GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Double& value);
    private static double ConvertValueToDouble(string v, double defaultValue);
}
public class UnityEngine.UIElements.UxmlEnumAttributeDescription`1 : TypedUxmlAttributeDescription`1<T> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual T GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, T& value);
    private static U ConvertValueToEnum(string v, U defaultValue);
    private static string GetEnumNameErrorMessage(string v, Type enumType);
    private static string GetEnumRangeErrorMessage(string v, Type enumType);
}
public class UnityEngine.UIElements.UxmlEnumeration : UxmlTypeRestriction {
    private List`1<string> m_Values;
    public IEnumerable`1<string> values { get; public set; }
    public IEnumerable`1<string> get_values();
    public void set_values(IEnumerable`1<string> value);
    public virtual bool Equals(UxmlTypeRestriction other);
}
public class UnityEngine.UIElements.UxmlFactory`1 : UxmlFactory`2<TCreatedType, UxmlTraits> {
}
public class UnityEngine.UIElements.UxmlFactory`2 : BaseUxmlFactory`2<TCreatedType, TTraits> {
    public virtual VisualElement Create(IUxmlAttributes bag, CreationContext cc);
}
public class UnityEngine.UIElements.UxmlFloatAttributeDescription : TypedUxmlAttributeDescription`1<float> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual float GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Single& value);
    private static float ConvertValueToFloat(string v, float defaultValue);
}
internal class UnityEngine.UIElements.UxmlGenericAttributeNames : object {
    internal static string k_NameAttributeName;
    internal static string k_PathAttributeName;
    internal static string k_SrcAttributeName;
}
public class UnityEngine.UIElements.UxmlHash128AttributeDescription : TypedUxmlAttributeDescription`1<Hash128> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual Hash128 GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Hash128& value);
}
public class UnityEngine.UIElements.UxmlIntAttributeDescription : TypedUxmlAttributeDescription`1<int> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual int GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Int32& value);
    private static int ConvertValueToInt(string v, int defaultValue);
}
public class UnityEngine.UIElements.UxmlLongAttributeDescription : TypedUxmlAttributeDescription`1<long> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual long GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Int64& value);
    private static long ConvertValueToLong(string v, long defaultValue);
}
internal class UnityEngine.UIElements.UxmlObjectAsset : UxmlAsset {
    public UxmlObjectAsset(string fullTypeName);
}
internal class UnityEngine.UIElements.UxmlObjectAttributeDescription`1 : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private T <defaultValue>k__BackingField;
    public T defaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public T get_defaultValue();
    [CompilerGeneratedAttribute]
public void set_defaultValue(T value);
    public virtual T GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
}
internal class UnityEngine.UIElements.UxmlObjectFactory`2 : BaseUxmlFactory`2<TCreatedType, TTraits> {
    public virtual TCreatedType CreateObject(IUxmlAttributes bag, CreationContext cc);
}
internal class UnityEngine.UIElements.UxmlObjectFactoryRegistry : object {
    private static Dictionary`2<string, List`1<IBaseUxmlObjectFactory>> s_Factories;
    internal static Dictionary`2<string, List`1<IBaseUxmlObjectFactory>> factories { get; }
    internal static Dictionary`2<string, List`1<IBaseUxmlObjectFactory>> get_factories();
    protected static void RegisterFactory(IBaseUxmlObjectFactory factory);
    internal static bool TryGetFactories(string fullTypeName, List`1& factoryList);
    private static void RegisterEngineFactories();
    private static void RegisterUserFactories();
}
internal class UnityEngine.UIElements.UxmlObjectListAttributeDescription`1 : UxmlObjectAttributeDescription`1<List`1<T>> {
    public virtual List`1<T> GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
}
internal abstract class UnityEngine.UIElements.UxmlObjectTraits`1 : BaseUxmlTraits {
    public virtual void Init(T& obj, IUxmlAttributes bag, CreationContext cc);
}
public class UnityEngine.UIElements.UxmlRootElementFactory : UxmlFactory`2<VisualElement, UxmlRootElementTraits> {
    internal static string k_ElementName;
    public string uxmlName { get; }
    public string uxmlQualifiedName { get; }
    public string substituteForTypeName { get; }
    public string substituteForTypeNamespace { get; }
    public string substituteForTypeQualifiedName { get; }
    public virtual string get_uxmlName();
    public virtual string get_uxmlQualifiedName();
    public virtual string get_substituteForTypeName();
    public virtual string get_substituteForTypeNamespace();
    public virtual string get_substituteForTypeQualifiedName();
    public virtual VisualElement Create(IUxmlAttributes bag, CreationContext cc);
}
public class UnityEngine.UIElements.UxmlRootElementTraits : UxmlTraits {
    protected UxmlStringAttributeDescription m_Name;
    private UxmlStringAttributeDescription m_Class;
    public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription { get; }
    [IteratorStateMachineAttribute("UnityEngine.UIElements.UxmlRootElementTraits/<get_uxmlChildElementsDescription>d__3")]
public virtual IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription();
}
public class UnityEngine.UIElements.UxmlStringAttributeDescription : TypedUxmlAttributeDescription`1<string> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual string GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, String& value);
}
public class UnityEngine.UIElements.UxmlStyleFactory : UxmlFactory`2<VisualElement, UxmlStyleTraits> {
    internal static string k_ElementName;
    public string uxmlName { get; }
    public string uxmlQualifiedName { get; }
    public string substituteForTypeName { get; }
    public string substituteForTypeNamespace { get; }
    public string substituteForTypeQualifiedName { get; }
    public virtual string get_uxmlName();
    public virtual string get_uxmlQualifiedName();
    public virtual string get_substituteForTypeName();
    public virtual string get_substituteForTypeNamespace();
    public virtual string get_substituteForTypeQualifiedName();
    public virtual VisualElement Create(IUxmlAttributes bag, CreationContext cc);
}
public class UnityEngine.UIElements.UxmlStyleTraits : UxmlTraits {
    private UxmlStringAttributeDescription m_Name;
    private UxmlStringAttributeDescription m_Path;
    private UxmlStringAttributeDescription m_Src;
    public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription { get; }
    [IteratorStateMachineAttribute("UnityEngine.UIElements.UxmlStyleTraits/<get_uxmlChildElementsDescription>d__4")]
public virtual IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription();
}
public class UnityEngine.UIElements.UxmlTemplateFactory : UxmlFactory`2<VisualElement, UxmlTemplateTraits> {
    internal static string k_ElementName;
    public string uxmlName { get; }
    public string uxmlQualifiedName { get; }
    public string substituteForTypeName { get; }
    public string substituteForTypeNamespace { get; }
    public string substituteForTypeQualifiedName { get; }
    public virtual string get_uxmlName();
    public virtual string get_uxmlQualifiedName();
    public virtual string get_substituteForTypeName();
    public virtual string get_substituteForTypeNamespace();
    public virtual string get_substituteForTypeQualifiedName();
    public virtual VisualElement Create(IUxmlAttributes bag, CreationContext cc);
}
public class UnityEngine.UIElements.UxmlTemplateTraits : UxmlTraits {
    private UxmlStringAttributeDescription m_Name;
    private UxmlStringAttributeDescription m_Path;
    private UxmlStringAttributeDescription m_Src;
    public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription { get; }
    [IteratorStateMachineAttribute("UnityEngine.UIElements.UxmlTemplateTraits/<get_uxmlChildElementsDescription>d__4")]
public virtual IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription();
}
public abstract class UnityEngine.UIElements.UxmlTraits : BaseUxmlTraits {
    public virtual void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc);
}
public class UnityEngine.UIElements.UxmlTypeAttributeDescription`1 : TypedUxmlAttributeDescription`1<Type> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual Type GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Type& value);
    private Type ConvertValueToType(string v, Type defaultValue);
    [CompilerGeneratedAttribute]
private Type <GetValueFromBag>b__3_0(string s, Type type1);
    [CompilerGeneratedAttribute]
private Type <TryGetValueFromBag>b__4_0(string s, Type type1);
}
public abstract class UnityEngine.UIElements.UxmlTypeRestriction : object {
    public virtual bool Equals(UxmlTypeRestriction other);
}
public class UnityEngine.UIElements.UxmlUnsignedIntAttributeDescription : TypedUxmlAttributeDescription`1<UInt32> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual UInt32 GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, UInt32& value);
    private static UInt32 ConvertValueToUInt(string v, UInt32 defaultValue);
}
public class UnityEngine.UIElements.UxmlUnsignedLongAttributeDescription : TypedUxmlAttributeDescription`1<ulong> {
    public string defaultValueAsString { get; }
    public virtual string get_defaultValueAsString();
    public virtual ulong GetValueFromBag(IUxmlAttributes bag, CreationContext cc);
    public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, UInt64& value);
    private static ulong ConvertValueToUlong(string v, ulong defaultValue);
}
public class UnityEngine.UIElements.UxmlValueBounds : UxmlTypeRestriction {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <min>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <max>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <excludeMin>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <excludeMax>k__BackingField;
    public string min { get; public set; }
    public string max { get; public set; }
    public bool excludeMin { get; public set; }
    public bool excludeMax { get; public set; }
    [CompilerGeneratedAttribute]
public string get_min();
    [CompilerGeneratedAttribute]
public void set_min(string value);
    [CompilerGeneratedAttribute]
public string get_max();
    [CompilerGeneratedAttribute]
public void set_max(string value);
    [CompilerGeneratedAttribute]
public bool get_excludeMin();
    [CompilerGeneratedAttribute]
public void set_excludeMin(bool value);
    [CompilerGeneratedAttribute]
public bool get_excludeMax();
    [CompilerGeneratedAttribute]
public void set_excludeMax(bool value);
    public virtual bool Equals(UxmlTypeRestriction other);
}
public class UnityEngine.UIElements.UxmlValueMatches : UxmlTypeRestriction {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private string <regex>k__BackingField;
    public string regex { get; public set; }
    [CompilerGeneratedAttribute]
public string get_regex();
    [CompilerGeneratedAttribute]
public void set_regex(string value);
    public virtual bool Equals(UxmlTypeRestriction other);
}
public class UnityEngine.UIElements.ValidateCommandEvent : CommandEventBase`1<ValidateCommandEvent> {
    private static ValidateCommandEvent();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.Vector2Field : BaseCompositeField`3<Vector2, FloatField, float> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public Vector2Field(string label);
    private static Vector2Field();
    internal virtual FieldDescription[] DescribeFields();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.Vector2IntField : BaseCompositeField`3<Vector2Int, IntegerField, int> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public Vector2IntField(string label);
    private static Vector2IntField();
    internal virtual FieldDescription[] DescribeFields();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.Vector3Field : BaseCompositeField`3<Vector3, FloatField, float> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public Vector3Field(string label);
    private static Vector3Field();
    internal virtual FieldDescription[] DescribeFields();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.Vector3IntField : BaseCompositeField`3<Vector3Int, IntegerField, int> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public Vector3IntField(string label);
    private static Vector3IntField();
    internal virtual FieldDescription[] DescribeFields();
}
[MovedFromAttribute("True", "UnityEditor.UIElements", "UnityEditor.UIElementsModule", "")]
public class UnityEngine.UIElements.Vector4Field : BaseCompositeField`3<Vector4, FloatField, float> {
    public static string ussClassName;
    public static string labelUssClassName;
    public static string inputUssClassName;
    public Vector4Field(string label);
    private static Vector4Field();
    internal virtual FieldDescription[] DescribeFields();
}
public class UnityEngine.UIElements.VectorImage : ScriptableObject {
    [SerializeField]
internal int version;
    [SerializeField]
internal Texture2D atlas;
    [SerializeField]
internal VectorImageVertex[] vertices;
    [SerializeField]
internal UInt16[] indices;
    [SerializeField]
internal GradientSettings[] settings;
    [SerializeField]
internal Vector2 size;
    public float width { get; }
    public float height { get; }
    public float get_width();
    public float get_height();
}
internal class UnityEngine.UIElements.VectorImageVertex : ValueType {
    public Vector3 position;
    public Color32 tint;
    public Vector2 uv;
    public UInt32 settingIndex;
    public Color32 flags;
    public Vector4 circle;
}
[FlagsAttribute]
internal enum UnityEngine.UIElements.VersionChangeType : Enum {
    public int value__;
    public static VersionChangeType Bindings;
    public static VersionChangeType ViewData;
    public static VersionChangeType Hierarchy;
    public static VersionChangeType Layout;
    public static VersionChangeType StyleSheet;
    public static VersionChangeType Styles;
    public static VersionChangeType Overflow;
    public static VersionChangeType BorderRadius;
    public static VersionChangeType BorderWidth;
    public static VersionChangeType Transform;
    public static VersionChangeType Size;
    public static VersionChangeType Repaint;
    public static VersionChangeType Opacity;
    public static VersionChangeType Color;
    public static VersionChangeType RenderHints;
    public static VersionChangeType TransitionProperty;
    public static VersionChangeType EventCallbackCategories;
    public static VersionChangeType Picking;
}
public class UnityEngine.UIElements.Vertex : ValueType {
    public static float nearZ;
    public Vector3 position;
    public Color32 tint;
    public Vector2 uv;
    internal Color32 xformClipPages;
    internal Color32 ids;
    internal Color32 flags;
    internal Color32 opacityColorPages;
    internal Color32 settingIndex;
    internal Vector4 circle;
    internal float textureId;
}
internal abstract class UnityEngine.UIElements.VerticalVirtualizationController`1 : CollectionVirtualizationController {
    private ObjectPool`1<T> m_Pool;
    protected BaseVerticalCollectionView m_CollectionView;
    protected static int k_ExtraVisibleItems;
    protected List`1<T> m_ActiveItems;
    protected T m_DraggedItem;
    private int m_LastFocusedElementIndex;
    private List`1<int> m_LastFocusedElementTreeChildIndexes;
    protected Func`2<T, bool> m_VisibleItemPredicateDelegate;
    protected List`1<T> m_ScrollInsertionList;
    private VisualElement m_EmptyRows;
    public IEnumerable`1<ReusableCollectionItem> activeItems { get; }
    internal int itemsCount { get; }
    internal T firstVisibleItem { get; }
    internal T lastVisibleItem { get; }
    public int visibleItemCount { get; }
    protected SerializedVirtualizationData serializedData { get; }
    public int firstVisibleIndex { get; protected set; }
    protected float lastHeight { get; }
    protected bool alwaysRebindOnRefresh { get; }
    protected VerticalVirtualizationController`1(BaseVerticalCollectionView collectionView);
    public virtual IEnumerable`1<ReusableCollectionItem> get_activeItems();
    internal int get_itemsCount();
    protected virtual bool VisibleItemPredicate(T i);
    internal T get_firstVisibleItem();
    internal T get_lastVisibleItem();
    public virtual int get_visibleItemCount();
    protected SerializedVirtualizationData get_serializedData();
    public virtual int get_firstVisibleIndex();
    protected virtual void set_firstVisibleIndex(int value);
    protected float get_lastHeight();
    protected virtual bool get_alwaysRebindOnRefresh();
    public virtual void Refresh(bool rebuild);
    protected void Setup(T recycledItem, int newIndex);
    public virtual void OnFocus(VisualElement leafTarget);
    public virtual void OnBlur(VisualElement willFocus);
    private void HandleFocus(ReusableCollectionItem recycledItem, int previousIndex);
    public virtual void UpdateBackground();
    internal virtual void StartDragItem(ReusableCollectionItem item);
    internal virtual void EndDrag(int dropIndex);
    internal virtual T GetOrMakeItemAtIndex(int activeItemIndex, int scrollViewIndex);
    internal virtual void ReleaseItem(int activeItemsIndex);
    private void OnDestroyItem(ReusableCollectionItem item);
    protected int GetDraggedIndex();
}
public enum UnityEngine.UIElements.Visibility : Enum {
    public int value__;
    public static Visibility Visible;
    public static Visibility Hidden;
}
internal class UnityEngine.UIElements.VisualData : ValueType {
    public Color backgroundColor;
    public Background backgroundImage;
    public BackgroundPosition backgroundPositionX;
    public BackgroundPosition backgroundPositionY;
    public BackgroundRepeat backgroundRepeat;
    public BackgroundSize backgroundSize;
    public Color borderBottomColor;
    public Length borderBottomLeftRadius;
    public Length borderBottomRightRadius;
    public Color borderLeftColor;
    public Color borderRightColor;
    public Color borderTopColor;
    public Length borderTopLeftRadius;
    public Length borderTopRightRadius;
    public float opacity;
    public OverflowInternal overflow;
    public sealed virtual VisualData Copy();
    public sealed virtual void CopyFrom(VisualData& other);
    public static bool op_Equality(VisualData lhs, VisualData rhs);
    public static bool op_Inequality(VisualData lhs, VisualData rhs);
    public sealed virtual bool Equals(VisualData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class UnityEngine.UIElements.VisualElement : Focusable {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <UnityEngine.UIElements.IStylePropertyAnimations.runningAnimationCount>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <UnityEngine.UIElements.IStylePropertyAnimations.completedAnimationCount>k__BackingField;
    private static UInt32 s_NextId;
    private static List`1<string> s_EmptyClassList;
    internal static PropertyName userDataPropertyKey;
    public static string disabledUssClassName;
    private string m_Name;
    private List`1<string> m_ClassList;
    private List`1<KeyValuePair`2<PropertyName, object>> m_PropertyBag;
    internal VisualElementFlags m_Flags;
    private string m_ViewDataKey;
    private RenderHints m_RenderHints;
    internal Rect lastLayout;
    internal Rect lastPseudoPadding;
    internal RenderChainVEData renderChainData;
    private Rect m_Layout;
    private Rect m_BoundingBox;
    private static VisualElementFlags worldBoundingBoxDirtyDependencies;
    private Rect m_WorldBoundingBox;
    private static VisualElementFlags worldTransformInverseDirtyDependencies;
    private Matrix4x4 m_WorldTransformCache;
    private Matrix4x4 m_WorldTransformInverseCache;
    private Rect m_WorldClip;
    private Rect m_WorldClipMinusGroup;
    private bool m_WorldClipIsInfinite;
    internal static Rect s_InfiniteRect;
    internal PseudoStates triggerPseudoMask;
    internal PseudoStates dependencyPseudoMask;
    private PseudoStates m_PseudoStates;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private int <containedPointerIds>k__BackingField;
    private PickingMode m_PickingMode;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private YogaNode <yogaNode>k__BackingField;
    internal ComputedStyle m_Style;
    internal StyleVariableContext variableContext;
    internal int inheritedStylesHash;
    internal UInt32 controlid;
    internal int imguiContainerDescendantCount;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <enabledSelf>k__BackingField;
    private LanguageDirection m_LanguageDirection;
    private LanguageDirection m_LocalLanguageDirection;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private Action`1<MeshGenerationContext> <generateVisualContent>k__BackingField;
    private static ProfilerMarker k_GenerateVisualContentMarker;
    private RenderTargetMode m_SubRenderTargetMode;
    private static Material s_runtimeMaterial;
    private Material m_defaultMaterial;
    private List`1<IValueAnimationUpdate> m_RunningAnimations;
    private static UInt32 s_NextParentVersion;
    private UInt32 m_NextParentCachedVersion;
    private UInt32 m_NextParentRequiredVersion;
    private VisualElement m_CachedNextParentWithEventCallback;
    private int m_EventCallbackCategories;
    private int m_CachedEventCallbackParentCategories;
    private int m_DefaultActionEventCategories;
    private int m_DefaultActionAtTargetEventCategories;
    internal static string k_RootVisualContainerName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Hierarchy <hierarchy>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <isRootVisualContainer>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <cacheAsBitmap>k__BackingField;
    private VisualElement m_PhysicalParent;
    private VisualElement m_LogicalParent;
    private static List`1<VisualElement> s_EmptyList;
    private List`1<VisualElement> m_Children;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private BaseVisualElementPanel <elementPanel>k__BackingField;
    private VisualTreeAsset m_VisualTreeAssetSource;
    internal static CustomStyleAccess s_CustomStyleAccess;
    internal InlineStyleAccess inlineStyleAccess;
    internal List`1<StyleSheet> styleSheetList;
    private static Regex s_InternalStyleSheetPath;
    internal static PropertyName tooltipPropertyKey;
    private static Dictionary`2<Type, TypeData> s_TypeData;
    private TypeData m_TypeData;
    public IResolvedStyle resolvedStyle { get; }
    private Align UnityEngine.UIElements.IResolvedStyle.alignContent { get; }
    private Align UnityEngine.UIElements.IResolvedStyle.alignItems { get; }
    private Align UnityEngine.UIElements.IResolvedStyle.alignSelf { get; }
    private Color UnityEngine.UIElements.IResolvedStyle.backgroundColor { get; }
    private Background UnityEngine.UIElements.IResolvedStyle.backgroundImage { get; }
    private BackgroundPosition UnityEngine.UIElements.IResolvedStyle.backgroundPositionX { get; }
    private BackgroundPosition UnityEngine.UIElements.IResolvedStyle.backgroundPositionY { get; }
    private BackgroundRepeat UnityEngine.UIElements.IResolvedStyle.backgroundRepeat { get; }
    private BackgroundSize UnityEngine.UIElements.IResolvedStyle.backgroundSize { get; }
    private Color UnityEngine.UIElements.IResolvedStyle.borderBottomColor { get; }
    private float UnityEngine.UIElements.IResolvedStyle.borderBottomLeftRadius { get; }
    private float UnityEngine.UIElements.IResolvedStyle.borderBottomRightRadius { get; }
    private float UnityEngine.UIElements.IResolvedStyle.borderBottomWidth { get; }
    private Color UnityEngine.UIElements.IResolvedStyle.borderLeftColor { get; }
    private float UnityEngine.UIElements.IResolvedStyle.borderLeftWidth { get; }
    private Color UnityEngine.UIElements.IResolvedStyle.borderRightColor { get; }
    private float UnityEngine.UIElements.IResolvedStyle.borderRightWidth { get; }
    private Color UnityEngine.UIElements.IResolvedStyle.borderTopColor { get; }
    private float UnityEngine.UIElements.IResolvedStyle.borderTopLeftRadius { get; }
    private float UnityEngine.UIElements.IResolvedStyle.borderTopRightRadius { get; }
    private float UnityEngine.UIElements.IResolvedStyle.borderTopWidth { get; }
    private float UnityEngine.UIElements.IResolvedStyle.bottom { get; }
    private Color UnityEngine.UIElements.IResolvedStyle.color { get; }
    private DisplayStyle UnityEngine.UIElements.IResolvedStyle.display { get; }
    private StyleFloat UnityEngine.UIElements.IResolvedStyle.flexBasis { get; }
    private FlexDirection UnityEngine.UIElements.IResolvedStyle.flexDirection { get; }
    private float UnityEngine.UIElements.IResolvedStyle.flexGrow { get; }
    private float UnityEngine.UIElements.IResolvedStyle.flexShrink { get; }
    private Wrap UnityEngine.UIElements.IResolvedStyle.flexWrap { get; }
    private float UnityEngine.UIElements.IResolvedStyle.fontSize { get; }
    private float UnityEngine.UIElements.IResolvedStyle.height { get; }
    private Justify UnityEngine.UIElements.IResolvedStyle.justifyContent { get; }
    private float UnityEngine.UIElements.IResolvedStyle.left { get; }
    private float UnityEngine.UIElements.IResolvedStyle.letterSpacing { get; }
    private float UnityEngine.UIElements.IResolvedStyle.marginBottom { get; }
    private float UnityEngine.UIElements.IResolvedStyle.marginLeft { get; }
    private float UnityEngine.UIElements.IResolvedStyle.marginRight { get; }
    private float UnityEngine.UIElements.IResolvedStyle.marginTop { get; }
    private StyleFloat UnityEngine.UIElements.IResolvedStyle.maxHeight { get; }
    private StyleFloat UnityEngine.UIElements.IResolvedStyle.maxWidth { get; }
    private StyleFloat UnityEngine.UIElements.IResolvedStyle.minHeight { get; }
    private StyleFloat UnityEngine.UIElements.IResolvedStyle.minWidth { get; }
    private float UnityEngine.UIElements.IResolvedStyle.opacity { get; }
    private float UnityEngine.UIElements.IResolvedStyle.paddingBottom { get; }
    private float UnityEngine.UIElements.IResolvedStyle.paddingLeft { get; }
    private float UnityEngine.UIElements.IResolvedStyle.paddingRight { get; }
    private float UnityEngine.UIElements.IResolvedStyle.paddingTop { get; }
    private Position UnityEngine.UIElements.IResolvedStyle.position { get; }
    private float UnityEngine.UIElements.IResolvedStyle.right { get; }
    private Rotate UnityEngine.UIElements.IResolvedStyle.rotate { get; }
    private Scale UnityEngine.UIElements.IResolvedStyle.scale { get; }
    private TextOverflow UnityEngine.UIElements.IResolvedStyle.textOverflow { get; }
    private float UnityEngine.UIElements.IResolvedStyle.top { get; }
    private Vector3 UnityEngine.UIElements.IResolvedStyle.transformOrigin { get; }
    private IEnumerable`1<TimeValue> UnityEngine.UIElements.IResolvedStyle.transitionDelay { get; }
    private IEnumerable`1<TimeValue> UnityEngine.UIElements.IResolvedStyle.transitionDuration { get; }
    private IEnumerable`1<StylePropertyName> UnityEngine.UIElements.IResolvedStyle.transitionProperty { get; }
    private IEnumerable`1<EasingFunction> UnityEngine.UIElements.IResolvedStyle.transitionTimingFunction { get; }
    private Vector3 UnityEngine.UIElements.IResolvedStyle.translate { get; }
    private Color UnityEngine.UIElements.IResolvedStyle.unityBackgroundImageTintColor { get; }
    private Font UnityEngine.UIElements.IResolvedStyle.unityFont { get; }
    private FontDefinition UnityEngine.UIElements.IResolvedStyle.unityFontDefinition { get; }
    private FontStyle UnityEngine.UIElements.IResolvedStyle.unityFontStyleAndWeight { get; }
    private float UnityEngine.UIElements.IResolvedStyle.unityParagraphSpacing { get; }
    private int UnityEngine.UIElements.IResolvedStyle.unitySliceBottom { get; }
    private int UnityEngine.UIElements.IResolvedStyle.unitySliceLeft { get; }
    private int UnityEngine.UIElements.IResolvedStyle.unitySliceRight { get; }
    private float UnityEngine.UIElements.IResolvedStyle.unitySliceScale { get; }
    private int UnityEngine.UIElements.IResolvedStyle.unitySliceTop { get; }
    private TextAnchor UnityEngine.UIElements.IResolvedStyle.unityTextAlign { get; }
    private Color UnityEngine.UIElements.IResolvedStyle.unityTextOutlineColor { get; }
    private float UnityEngine.UIElements.IResolvedStyle.unityTextOutlineWidth { get; }
    private TextOverflowPosition UnityEngine.UIElements.IResolvedStyle.unityTextOverflowPosition { get; }
    private Visibility UnityEngine.UIElements.IResolvedStyle.visibility { get; }
    private WhiteSpace UnityEngine.UIElements.IResolvedStyle.whiteSpace { get; }
    private float UnityEngine.UIElements.IResolvedStyle.width { get; }
    private float UnityEngine.UIElements.IResolvedStyle.wordSpacing { get; }
    internal bool hasRunningAnimations { get; }
    internal bool hasCompletedAnimations { get; }
    private int UnityEngine.UIElements.IStylePropertyAnimations.runningAnimationCount { get; private set; }
    private int UnityEngine.UIElements.IStylePropertyAnimations.completedAnimationCount { get; private set; }
    internal IStylePropertyAnimations styleAnimation { get; }
    internal bool isCompositeRoot { get; internal set; }
    internal bool isHierarchyDisplayed { get; internal set; }
    public string viewDataKey { get; public set; }
    internal bool enableViewDataPersistence { get; private set; }
    public object userData { get; public set; }
    public bool canGrabFocus { get; }
    public FocusController focusController { get; }
    public UsageHints usageHints { get; public set; }
    internal RenderHints renderHints { get; internal set; }
    public ITransform transform { get; }
    private Vector3 UnityEngine.UIElements.ITransform.position { get; private set; }
    private Quaternion UnityEngine.UIElements.ITransform.rotation { get; private set; }
    private Vector3 UnityEngine.UIElements.ITransform.scale { get; private set; }
    private Matrix4x4 UnityEngine.UIElements.ITransform.matrix { get; }
    internal bool isLayoutManual { get; private set; }
    internal float scaledPixelsPerPoint { get; }
    private StyleEnum`1<ScaleMode> UnityEngine.UIElements.IResolvedStyle.unityBackgroundScaleMode { get; }
    public Rect layout { get; internal set; }
    public Rect contentRect { get; }
    protected Rect paddingRect { get; }
    internal bool isBoundingBoxDirty { get; internal set; }
    internal bool isWorldBoundingBoxDirty { get; internal set; }
    internal bool isWorldBoundingBoxOrDependenciesDirty { get; }
    internal Rect boundingBox { get; }
    internal Rect worldBoundingBox { get; }
    private Rect boundingBoxInParentSpace { get; }
    public Rect worldBound { get; }
    public Rect localBound { get; }
    internal Rect rect { get; }
    internal bool isWorldTransformDirty { get; internal set; }
    internal bool isWorldTransformInverseDirty { get; internal set; }
    internal bool isWorldTransformInverseOrDependenciesDirty { get; }
    public Matrix4x4 worldTransform { get; }
    internal Matrix4x4& worldTransformRef { get; }
    internal Matrix4x4& worldTransformInverse { get; }
    internal bool isWorldClipDirty { get; internal set; }
    internal Rect worldClip { get; }
    internal Rect worldClipMinusGroup { get; }
    internal bool worldClipIsInfinite { get; }
    internal PseudoStates pseudoStates { get; internal set; }
    internal int containedPointerIds { get; private set; }
    public PickingMode pickingMode { get; public set; }
    public string name { get; public set; }
    internal List`1<string> classList { get; }
    internal string fullTypeName { get; }
    internal string typeName { get; }
    internal YogaNode yogaNode { get; private set; }
    internal ComputedStyle& computedStyle { get; }
    internal bool hasInlineStyle { get; }
    internal bool styleInitialized { get; internal set; }
    internal float opacity { get; internal set; }
    private bool isParentEnabledInHierarchy { get; }
    public bool enabledInHierarchy { get; }
    public bool enabledSelf { get; private set; }
    public LanguageDirection languageDirection { get; public set; }
    internal LanguageDirection localLanguageDirection { get; internal set; }
    public bool visible { get; public set; }
    public Action`1<MeshGenerationContext> generateVisualContent { get; public set; }
    internal bool requireMeasureFunction { get; internal set; }
    internal RenderTargetMode subRenderTargetMode { get; internal set; }
    internal Material defaultMaterial { get; private set; }
    internal VisualElement nextParentWithEventCallback { get; }
    internal int eventCallbackCategories { get; internal set; }
    internal int eventCallbackParentCategories { get; }
    internal bool isEventCallbackParentCategoriesDirty { get; internal set; }
    public IExperimentalFeatures experimental { get; }
    private ITransitionAnimations UnityEngine.UIElements.IExperimentalFeatures.animation { get; }
    public Hierarchy hierarchy { get; private set; }
    internal bool isRootVisualContainer { get; internal set; }
    [ObsoleteAttribute("VisualElement.cacheAsBitmap is deprecated and has no effect")]
public bool cacheAsBitmap { get; public set; }
    internal bool disableClipping { get; internal set; }
    public VisualElement parent { get; }
    internal BaseVisualElementPanel elementPanel { get; private set; }
    public IPanel panel { get; }
    public VisualElement contentContainer { get; }
    public VisualTreeAsset visualTreeAssetSource { get; internal set; }
    public VisualElement Item { get; }
    public int childCount { get; }
    private Vector3 positionWithLayout { get; }
    internal bool hasDefaultRotationAndScale { get; }
    public IVisualElementScheduler schedule { get; }
    public IStyle style { get; }
    public ICustomStyle customStyle { get; }
    public VisualElementStyleSheetSet styleSheets { get; }
    public string tooltip { get; public set; }
    private TypeData typeData { get; }
    private static VisualElement();
    public IResolvedStyle get_resolvedStyle();
    private sealed virtual override Align UnityEngine.UIElements.IResolvedStyle.get_alignContent();
    private sealed virtual override Align UnityEngine.UIElements.IResolvedStyle.get_alignItems();
    private sealed virtual override Align UnityEngine.UIElements.IResolvedStyle.get_alignSelf();
    private sealed virtual override Color UnityEngine.UIElements.IResolvedStyle.get_backgroundColor();
    private sealed virtual override Background UnityEngine.UIElements.IResolvedStyle.get_backgroundImage();
    private sealed virtual override BackgroundPosition UnityEngine.UIElements.IResolvedStyle.get_backgroundPositionX();
    private sealed virtual override BackgroundPosition UnityEngine.UIElements.IResolvedStyle.get_backgroundPositionY();
    private sealed virtual override BackgroundRepeat UnityEngine.UIElements.IResolvedStyle.get_backgroundRepeat();
    private sealed virtual override BackgroundSize UnityEngine.UIElements.IResolvedStyle.get_backgroundSize();
    private sealed virtual override Color UnityEngine.UIElements.IResolvedStyle.get_borderBottomColor();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_borderBottomLeftRadius();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_borderBottomRightRadius();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_borderBottomWidth();
    private sealed virtual override Color UnityEngine.UIElements.IResolvedStyle.get_borderLeftColor();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_borderLeftWidth();
    private sealed virtual override Color UnityEngine.UIElements.IResolvedStyle.get_borderRightColor();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_borderRightWidth();
    private sealed virtual override Color UnityEngine.UIElements.IResolvedStyle.get_borderTopColor();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_borderTopLeftRadius();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_borderTopRightRadius();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_borderTopWidth();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_bottom();
    private sealed virtual override Color UnityEngine.UIElements.IResolvedStyle.get_color();
    private sealed virtual override DisplayStyle UnityEngine.UIElements.IResolvedStyle.get_display();
    private sealed virtual override StyleFloat UnityEngine.UIElements.IResolvedStyle.get_flexBasis();
    private sealed virtual override FlexDirection UnityEngine.UIElements.IResolvedStyle.get_flexDirection();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_flexGrow();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_flexShrink();
    private sealed virtual override Wrap UnityEngine.UIElements.IResolvedStyle.get_flexWrap();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_fontSize();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_height();
    private sealed virtual override Justify UnityEngine.UIElements.IResolvedStyle.get_justifyContent();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_left();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_letterSpacing();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_marginBottom();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_marginLeft();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_marginRight();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_marginTop();
    private sealed virtual override StyleFloat UnityEngine.UIElements.IResolvedStyle.get_maxHeight();
    private sealed virtual override StyleFloat UnityEngine.UIElements.IResolvedStyle.get_maxWidth();
    private sealed virtual override StyleFloat UnityEngine.UIElements.IResolvedStyle.get_minHeight();
    private sealed virtual override StyleFloat UnityEngine.UIElements.IResolvedStyle.get_minWidth();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_opacity();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_paddingBottom();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_paddingLeft();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_paddingRight();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_paddingTop();
    private sealed virtual override Position UnityEngine.UIElements.IResolvedStyle.get_position();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_right();
    private sealed virtual override Rotate UnityEngine.UIElements.IResolvedStyle.get_rotate();
    private sealed virtual override Scale UnityEngine.UIElements.IResolvedStyle.get_scale();
    private sealed virtual override TextOverflow UnityEngine.UIElements.IResolvedStyle.get_textOverflow();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_top();
    private sealed virtual override Vector3 UnityEngine.UIElements.IResolvedStyle.get_transformOrigin();
    private sealed virtual override IEnumerable`1<TimeValue> UnityEngine.UIElements.IResolvedStyle.get_transitionDelay();
    private sealed virtual override IEnumerable`1<TimeValue> UnityEngine.UIElements.IResolvedStyle.get_transitionDuration();
    private sealed virtual override IEnumerable`1<StylePropertyName> UnityEngine.UIElements.IResolvedStyle.get_transitionProperty();
    private sealed virtual override IEnumerable`1<EasingFunction> UnityEngine.UIElements.IResolvedStyle.get_transitionTimingFunction();
    private sealed virtual override Vector3 UnityEngine.UIElements.IResolvedStyle.get_translate();
    private sealed virtual override Color UnityEngine.UIElements.IResolvedStyle.get_unityBackgroundImageTintColor();
    private sealed virtual override Font UnityEngine.UIElements.IResolvedStyle.get_unityFont();
    private sealed virtual override FontDefinition UnityEngine.UIElements.IResolvedStyle.get_unityFontDefinition();
    private sealed virtual override FontStyle UnityEngine.UIElements.IResolvedStyle.get_unityFontStyleAndWeight();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_unityParagraphSpacing();
    private sealed virtual override int UnityEngine.UIElements.IResolvedStyle.get_unitySliceBottom();
    private sealed virtual override int UnityEngine.UIElements.IResolvedStyle.get_unitySliceLeft();
    private sealed virtual override int UnityEngine.UIElements.IResolvedStyle.get_unitySliceRight();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_unitySliceScale();
    private sealed virtual override int UnityEngine.UIElements.IResolvedStyle.get_unitySliceTop();
    private sealed virtual override TextAnchor UnityEngine.UIElements.IResolvedStyle.get_unityTextAlign();
    private sealed virtual override Color UnityEngine.UIElements.IResolvedStyle.get_unityTextOutlineColor();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_unityTextOutlineWidth();
    private sealed virtual override TextOverflowPosition UnityEngine.UIElements.IResolvedStyle.get_unityTextOverflowPosition();
    private sealed virtual override Visibility UnityEngine.UIElements.IResolvedStyle.get_visibility();
    private sealed virtual override WhiteSpace UnityEngine.UIElements.IResolvedStyle.get_whiteSpace();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_width();
    private sealed virtual override float UnityEngine.UIElements.IResolvedStyle.get_wordSpacing();
    internal bool get_hasRunningAnimations();
    internal bool get_hasCompletedAnimations();
    [CompilerGeneratedAttribute]
private sealed virtual override int UnityEngine.UIElements.IStylePropertyAnimations.get_runningAnimationCount();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.IStylePropertyAnimations.set_runningAnimationCount(int value);
    [CompilerGeneratedAttribute]
private sealed virtual override int UnityEngine.UIElements.IStylePropertyAnimations.get_completedAnimationCount();
    [CompilerGeneratedAttribute]
private sealed virtual override void UnityEngine.UIElements.IStylePropertyAnimations.set_completedAnimationCount(int value);
    private IStylePropertyAnimationSystem GetStylePropertyAnimationSystem();
    internal IStylePropertyAnimations get_styleAnimation();
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, float from, float to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, int from, int to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Length from, Length to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Color from, Color to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.StartEnum(StylePropertyId id, int from, int to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Background from, Background to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, FontDefinition from, FontDefinition to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Font from, Font to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, TextShadow from, TextShadow to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Scale from, Scale to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Translate from, Translate to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Rotate from, Rotate to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, TransformOrigin from, TransformOrigin to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, BackgroundPosition from, BackgroundPosition to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, BackgroundRepeat from, BackgroundRepeat to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, BackgroundSize from, BackgroundSize to, int durationMs, int delayMs, Func`2<float, float> easingCurve);
    private sealed virtual override void UnityEngine.UIElements.IStylePropertyAnimations.CancelAnimation(StylePropertyId id);
    private sealed virtual override void UnityEngine.UIElements.IStylePropertyAnimations.CancelAllAnimations();
    private sealed virtual override bool UnityEngine.UIElements.IStylePropertyAnimations.HasRunningAnimation(StylePropertyId id);
    private sealed virtual override void UnityEngine.UIElements.IStylePropertyAnimations.UpdateAnimation(StylePropertyId id);
    private sealed virtual override void UnityEngine.UIElements.IStylePropertyAnimations.GetAllAnimations(List`1<StylePropertyId> outPropertyIds);
    internal bool TryConvertLengthUnits(StylePropertyId id, Length& from, Length& to, int subPropertyIndex);
    internal bool TryConvertTransformOriginUnits(TransformOrigin& from, TransformOrigin& to);
    internal bool TryConvertTranslateUnits(Translate& from, Translate& to);
    internal bool TryConvertBackgroundPositionUnits(BackgroundPosition& from, BackgroundPosition& to);
    internal bool TryConvertBackgroundSizeUnits(BackgroundSize& from, BackgroundSize& to);
    private Nullable`1<float> GetParentSizeForLengthConversion(StylePropertyId id, int subPropertyIndex);
    internal bool get_isCompositeRoot();
    internal void set_isCompositeRoot(bool value);
    internal bool get_isHierarchyDisplayed();
    internal void set_isHierarchyDisplayed(bool value);
    public string get_viewDataKey();
    public void set_viewDataKey(string value);
    internal bool get_enableViewDataPersistence();
    private void set_enableViewDataPersistence(bool value);
    public object get_userData();
    public void set_userData(object value);
    public virtual bool get_canGrabFocus();
    public virtual FocusController get_focusController();
    public UsageHints get_usageHints();
    public void set_usageHints(UsageHints value);
    internal RenderHints get_renderHints();
    internal void set_renderHints(RenderHints value);
    internal void MarkRenderHintsClean();
    public ITransform get_transform();
    private sealed virtual override Vector3 UnityEngine.UIElements.ITransform.get_position();
    private sealed virtual override void UnityEngine.UIElements.ITransform.set_position(Vector3 value);
    private sealed virtual override Quaternion UnityEngine.UIElements.ITransform.get_rotation();
    private sealed virtual override void UnityEngine.UIElements.ITransform.set_rotation(Quaternion value);
    private sealed virtual override Vector3 UnityEngine.UIElements.ITransform.get_scale();
    private sealed virtual override void UnityEngine.UIElements.ITransform.set_scale(Vector3 value);
    private sealed virtual override Matrix4x4 UnityEngine.UIElements.ITransform.get_matrix();
    internal bool get_isLayoutManual();
    private void set_isLayoutManual(bool value);
    internal float get_scaledPixelsPerPoint();
    private sealed virtual override StyleEnum`1<ScaleMode> UnityEngine.UIElements.IResolvedStyle.get_unityBackgroundScaleMode();
    public Rect get_layout();
    internal void set_layout(Rect value);
    internal void ClearManualLayout();
    public Rect get_contentRect();
    protected Rect get_paddingRect();
    internal bool get_isBoundingBoxDirty();
    internal void set_isBoundingBoxDirty(bool value);
    internal bool get_isWorldBoundingBoxDirty();
    internal void set_isWorldBoundingBoxDirty(bool value);
    internal bool get_isWorldBoundingBoxOrDependenciesDirty();
    internal Rect get_boundingBox();
    internal Rect get_worldBoundingBox();
    private Rect get_boundingBoxInParentSpace();
    internal void UpdateBoundingBox();
    internal void UpdateWorldBoundingBox();
    public Rect get_worldBound();
    public Rect get_localBound();
    internal Rect get_rect();
    internal bool get_isWorldTransformDirty();
    internal void set_isWorldTransformDirty(bool value);
    internal bool get_isWorldTransformInverseDirty();
    internal void set_isWorldTransformInverseDirty(bool value);
    internal bool get_isWorldTransformInverseOrDependenciesDirty();
    public Matrix4x4 get_worldTransform();
    internal Matrix4x4& get_worldTransformRef();
    internal Matrix4x4& get_worldTransformInverse();
    internal void UpdateWorldTransform();
    internal void UpdateWorldTransformInverse();
    internal bool get_isWorldClipDirty();
    internal void set_isWorldClipDirty(bool value);
    internal Rect get_worldClip();
    internal Rect get_worldClipMinusGroup();
    internal bool get_worldClipIsInfinite();
    internal void EnsureWorldTransformAndClipUpToDate();
    private void UpdateWorldClip();
    private Rect CombineClipRects(Rect rect, Rect parentRect);
    private Rect SubstractBorderPadding(Rect worldRect);
    internal static Rect ComputeAAAlignedBound(Rect position, Matrix4x4 mat);
    internal PseudoStates get_pseudoStates();
    internal void set_pseudoStates(PseudoStates value);
    [CompilerGeneratedAttribute]
internal int get_containedPointerIds();
    [CompilerGeneratedAttribute]
private void set_containedPointerIds(int value);
    private void UpdateHoverPseudoState();
    private static bool IsPartOfCapturedChain(VisualElement self, IEventHandler& capturingElement);
    public PickingMode get_pickingMode();
    public void set_pickingMode(PickingMode value);
    public string get_name();
    public void set_name(string value);
    internal List`1<string> get_classList();
    internal string get_fullTypeName();
    internal string get_typeName();
    [CompilerGeneratedAttribute]
internal YogaNode get_yogaNode();
    [CompilerGeneratedAttribute]
private void set_yogaNode(YogaNode value);
    internal ComputedStyle& get_computedStyle();
    internal bool get_hasInlineStyle();
    internal bool get_styleInitialized();
    internal void set_styleInitialized(bool value);
    internal float get_opacity();
    internal void set_opacity(float value);
    private void ChangeIMGUIContainerCount(int delta);
    [EventInterestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void ExecuteDefaultAction(EventBase evt);
    internal virtual Rect GetTooltipRect();
    private void SetTooltip(TooltipEvent e);
    public sealed virtual void Focus();
    internal void SetPanel(BaseVisualElementPanel p);
    private void WillChangePanel(BaseVisualElementPanel destinationPanel);
    private void HasChangedPanel(BaseVisualElementPanel prevPanel);
    public sealed virtual void SendEvent(EventBase e);
    internal sealed virtual void SendEvent(EventBase e, DispatchMode dispatchMode);
    internal void IncrementVersion(VersionChangeType changeType);
    internal void InvokeHierarchyChanged(HierarchyChangeType changeType);
    [ObsoleteAttribute("SetEnabledFromHierarchy is deprecated and will be removed in a future release. Please use SetEnabled instead.")]
protected internal bool SetEnabledFromHierarchy(bool state);
    private bool SetEnabledFromHierarchyPrivate(bool state);
    private bool get_isParentEnabledInHierarchy();
    public bool get_enabledInHierarchy();
    [CompilerGeneratedAttribute]
public bool get_enabledSelf();
    [CompilerGeneratedAttribute]
private void set_enabledSelf(bool value);
    public void SetEnabled(bool value);
    private void PropagateEnabledToChildren(bool value);
    public LanguageDirection get_languageDirection();
    public void set_languageDirection(LanguageDirection value);
    internal LanguageDirection get_localLanguageDirection();
    internal void set_localLanguageDirection(LanguageDirection value);
    public bool get_visible();
    public void set_visible(bool value);
    public void MarkDirtyRepaint();
    [CompilerGeneratedAttribute]
public Action`1<MeshGenerationContext> get_generateVisualContent();
    [CompilerGeneratedAttribute]
public void set_generateVisualContent(Action`1<MeshGenerationContext> value);
    internal void InvokeGenerateVisualContent(MeshGenerationContext mgc);
    internal void GetFullHierarchicalViewDataKey(StringBuilder key);
    internal string GetFullHierarchicalViewDataKey();
    internal T GetOrCreateViewData(object existing, string key);
    internal T GetOrCreateViewData(ScriptableObject existing, string key);
    internal void OverwriteFromViewData(object obj, string key);
    internal void SaveViewData();
    internal bool IsViewDataPersitenceSupportedOnChildren(bool existingState);
    internal void OnViewDataReady(bool enablePersistence);
    internal virtual void OnViewDataReady();
    public virtual bool ContainsPoint(Vector2 localPoint);
    public virtual bool Overlaps(Rect rectangle);
    internal bool get_requireMeasureFunction();
    internal void set_requireMeasureFunction(bool value);
    private void AssignMeasureFunction();
    private void RemoveMeasureFunction();
    protected internal virtual Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode);
    internal YogaSize Measure(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode);
    internal void SetSize(Vector2 size);
    private void FinalizeLayout();
    internal void SetInlineRule(StyleSheet sheet, StyleRule rule);
    internal void UpdateInlineRule(StyleSheet sheet, StyleRule rule);
    internal void SetComputedStyle(ComputedStyle& newStyle);
    internal void ResetPositionProperties();
    public virtual string ToString();
    public IEnumerable`1<string> GetClasses();
    internal List`1<string> GetClassesForIteration();
    public void ClearClassList();
    public void AddToClassList(string className);
    public void RemoveFromClassList(string className);
    public void ToggleInClassList(string className);
    public void EnableInClassList(string className, bool enable);
    public bool ClassListContains(string cls);
    public object FindAncestorUserData();
    internal object GetProperty(PropertyName key);
    internal void SetProperty(PropertyName key, object value);
    internal bool HasProperty(PropertyName key);
    private bool TryGetPropertyInternal(PropertyName key, Object& value);
    private static void CheckUserKeyArgument(PropertyName key);
    private void SetPropertyInternal(PropertyName key, object value);
    private void UpdateCursorStyle(long eventType);
    internal RenderTargetMode get_subRenderTargetMode();
    internal void set_subRenderTargetMode(RenderTargetMode value);
    private Material getRuntimeMaterial();
    internal Material get_defaultMaterial();
    private void set_defaultMaterial(Material value);
    private VisualElementAnimationSystem GetAnimationSystem();
    internal void RegisterAnimation(IValueAnimationUpdate anim);
    internal void UnregisterAnimation(IValueAnimationUpdate anim);
    private void UnregisterRunningAnimations();
    private void RegisterRunningAnimations();
    private sealed virtual override ValueAnimation`1<float> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(float from, float to, int durationMs, Action`2<VisualElement, float> onValueChanged);
    private sealed virtual override ValueAnimation`1<Rect> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Rect from, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged);
    private sealed virtual override ValueAnimation`1<Color> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Color from, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged);
    private sealed virtual override ValueAnimation`1<Vector3> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Vector3 from, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged);
    private sealed virtual override ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Vector2 from, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged);
    private sealed virtual override ValueAnimation`1<Quaternion> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Quaternion from, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged);
    private sealed virtual override ValueAnimation`1<StyleValues> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(StyleValues from, StyleValues to, int durationMs);
    private sealed virtual override ValueAnimation`1<float> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, float> fromValueGetter, float to, int durationMs, Action`2<VisualElement, float> onValueChanged);
    private sealed virtual override ValueAnimation`1<Rect> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Rect> fromValueGetter, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged);
    private sealed virtual override ValueAnimation`1<Color> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Color> fromValueGetter, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged);
    private sealed virtual override ValueAnimation`1<Vector3> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Vector3> fromValueGetter, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged);
    private sealed virtual override ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Vector2> fromValueGetter, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged);
    private sealed virtual override ValueAnimation`1<Quaternion> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Quaternion> fromValueGetter, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged);
    private static ValueAnimation`1<T> StartAnimation(ValueAnimation`1<T> anim, Func`2<VisualElement, T> fromValueGetter, T to, int durationMs, Action`2<VisualElement, T> onValueChanged);
    private static void AssignStyleValues(VisualElement ve, StyleValues src);
    private StyleValues ReadCurrentValues(VisualElement ve, StyleValues targetValuesToRead);
    private sealed virtual override ValueAnimation`1<StyleValues> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(StyleValues to, int durationMs);
    private ValueAnimation`1<StyleValues> Start(Func`2<VisualElement, StyleValues> fromValueGetter, StyleValues to, int durationMs);
    private sealed virtual override ValueAnimation`1<Rect> UnityEngine.UIElements.Experimental.ITransitionAnimations.Layout(Rect to, int durationMs);
    private sealed virtual override ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.TopLeft(Vector2 to, int durationMs);
    private sealed virtual override ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.Size(Vector2 to, int durationMs);
    private sealed virtual override ValueAnimation`1<float> UnityEngine.UIElements.Experimental.ITransitionAnimations.Scale(float to, int durationMs);
    private sealed virtual override ValueAnimation`1<Vector3> UnityEngine.UIElements.Experimental.ITransitionAnimations.Position(Vector3 to, int durationMs);
    private sealed virtual override ValueAnimation`1<Quaternion> UnityEngine.UIElements.Experimental.ITransitionAnimations.Rotation(Quaternion to, int durationMs);
    private void DirtyNextParentWithEventCallback();
    private void SetAsNextParentWithEventCallback();
    internal bool GetCachedNextParentWithEventCallback(VisualElement& nextParent);
    internal VisualElement get_nextParentWithEventCallback();
    private void PropagateCachedNextParentWithEventCallback(VisualElement nextParent, VisualElement stopParent);
    internal int get_eventCallbackCategories();
    internal void set_eventCallbackCategories(int value);
    internal int get_eventCallbackParentCategories();
    internal bool get_isEventCallbackParentCategoriesDirty();
    internal void set_isEventCallbackParentCategoriesDirty(bool value);
    private void UpdateCallbackParentCategories();
    internal bool HasEventCallbacks(EventCategory eventCategory);
    internal bool HasParentEventCallbacks(EventCategory eventCategory);
    internal bool HasParentEventCallbacksOrDefaultActions(EventCategory eventCategory);
    internal bool HasEventCallbacksOrDefaultActions(EventCategory eventCategory);
    internal bool HasParentEventCallbacksOrDefaultActionAtTarget(EventCategory eventCategory);
    internal bool HasEventCallbacksOrDefaultActionAtTarget(EventCategory eventCategory);
    internal bool HasDefaultAction(EventCategory eventCategory);
    public IExperimentalFeatures get_experimental();
    private sealed virtual override ITransitionAnimations UnityEngine.UIElements.IExperimentalFeatures.get_animation();
    [CompilerGeneratedAttribute]
public Hierarchy get_hierarchy();
    [CompilerGeneratedAttribute]
private void set_hierarchy(Hierarchy value);
    [CompilerGeneratedAttribute]
internal bool get_isRootVisualContainer();
    [CompilerGeneratedAttribute]
internal void set_isRootVisualContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_cacheAsBitmap();
    [CompilerGeneratedAttribute]
public void set_cacheAsBitmap(bool value);
    internal bool get_disableClipping();
    internal void set_disableClipping(bool value);
    internal bool ShouldClip();
    public VisualElement get_parent();
    [CompilerGeneratedAttribute]
internal BaseVisualElementPanel get_elementPanel();
    [CompilerGeneratedAttribute]
private void set_elementPanel(BaseVisualElementPanel value);
    public IPanel get_panel();
    public virtual VisualElement get_contentContainer();
    public VisualTreeAsset get_visualTreeAssetSource();
    internal void set_visualTreeAssetSource(VisualTreeAsset value);
    public void Add(VisualElement child);
    public void Insert(int index, VisualElement element);
    public void Remove(VisualElement element);
    public void RemoveAt(int index);
    public void Clear();
    public VisualElement ElementAt(int index);
    public VisualElement get_Item(int key);
    public int get_childCount();
    public int IndexOf(VisualElement element);
    internal VisualElement ElementAtTreePath(List`1<int> childIndexes);
    internal bool FindElementInTree(VisualElement element, List`1<int> outChildIndexes);
    public IEnumerable`1<VisualElement> Children();
    public void Sort(Comparison`1<VisualElement> comp);
    public void BringToFront();
    public void SendToBack();
    public void PlaceBehind(VisualElement sibling);
    public void PlaceInFront(VisualElement sibling);
    public void RemoveFromHierarchy();
    public T GetFirstOfType();
    public T GetFirstAncestorOfType();
    internal VisualElement GetFirstAncestorWhere(Predicate`1<VisualElement> predicate);
    public bool Contains(VisualElement child);
    private void GatherAllChildren(List`1<VisualElement> elements);
    public VisualElement FindCommonAncestor(VisualElement other);
    internal VisualElement GetRoot();
    internal VisualElement GetRootVisualContainer();
    internal VisualElement GetNextElementDepthFirst();
    internal VisualElement GetPreviousElementDepthFirst();
    internal VisualElement RetargetElement(VisualElement retargetAgainst);
    private Vector3 get_positionWithLayout();
    internal void GetPivotedMatrixWithLayout(Matrix4x4& result);
    internal bool get_hasDefaultRotationAndScale();
    internal static float Min(float a, float b, float c, float d);
    internal static float Max(float a, float b, float c, float d);
    private void TransformAlignedRectToParentSpace(Rect& rect);
    internal static Rect CalculateConservativeRect(Matrix4x4& matrix, Rect rect);
    internal static void TransformAlignedRect(Matrix4x4& matrix, Rect& rect);
    internal static void OrderMinMaxRect(Rect& rect);
    internal static Vector2 MultiplyMatrix44Point2(Matrix4x4& lhs, Vector2 point);
    internal static Vector2 MultiplyVector2(Matrix4x4& lhs, Vector2 vector);
    internal static Rect MultiplyMatrix44Rect2(Matrix4x4& lhs, Rect r);
    internal static void MultiplyMatrix34(Matrix4x4& lhs, Matrix4x4& rhs, Matrix4x4& res);
    private static void TranslateMatrix34(Matrix4x4& lhs, Vector3 rhs, Matrix4x4& res);
    private static void TranslateMatrix34InPlace(Matrix4x4& lhs, Vector3 rhs);
    public IVisualElementScheduler get_schedule();
    private sealed virtual override IVisualElementScheduledItem UnityEngine.UIElements.IVisualElementScheduler.Execute(Action`1<TimerState> timerUpdateEvent);
    private sealed virtual override IVisualElementScheduledItem UnityEngine.UIElements.IVisualElementScheduler.Execute(Action updateEvent);
    public IStyle get_style();
    public ICustomStyle get_customStyle();
    public VisualElementStyleSheetSet get_styleSheets();
    internal void AddStyleSheetPath(string sheetPath);
    internal bool HasStyleSheetPath(string sheetPath);
    internal void RemoveStyleSheetPath(string sheetPath);
    private StyleFloat ResolveLengthValue(Length length, bool isRow);
    private Vector3 ResolveTranslate();
    private Vector3 ResolveTransformOrigin();
    private Quaternion ResolveRotation();
    private Vector3 ResolveScale();
    public string get_tooltip();
    public void set_tooltip(string value);
    internal static TypeData GetOrCreateTypeData(Type t);
    private TypeData get_typeData();
    [CompilerGeneratedAttribute]
private YogaSize <AssignMeasureFunction>b__432_0(YogaNode node, float f, YogaMeasureMode mode, float f1, YogaMeasureMode heightMode);
}
internal class UnityEngine.UIElements.VisualElementAnimationSystem : BaseVisualTreeUpdater {
    private HashSet`1<IValueAnimationUpdate> m_Animations;
    private List`1<IValueAnimationUpdate> m_IterationList;
    private bool m_HasNewAnimations;
    private bool m_IterationListDirty;
    private static string s_Description;
    private static ProfilerMarker s_ProfilerMarker;
    private static string s_StylePropertyAnimationDescription;
    private static ProfilerMarker s_StylePropertyAnimationProfilerMarker;
    private long lastUpdate;
    public ProfilerMarker profilerMarker { get; }
    private static ProfilerMarker stylePropertyAnimationProfilerMarker { get; }
    private static VisualElementAnimationSystem();
    private long CurrentTimeMs();
    public virtual ProfilerMarker get_profilerMarker();
    private static ProfilerMarker get_stylePropertyAnimationProfilerMarker();
    public void UnregisterAnimation(IValueAnimationUpdate anim);
    public void UnregisterAnimations(List`1<IValueAnimationUpdate> anims);
    public void RegisterAnimation(IValueAnimationUpdate anim);
    public void RegisterAnimations(List`1<IValueAnimationUpdate> anims);
    public virtual void Update();
    public virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
}
internal class UnityEngine.UIElements.VisualElementAsset : UxmlAsset {
    [SerializeField]
private string m_Name;
    [SerializeField]
private int m_RuleIndex;
    [SerializeField]
private string m_Text;
    [SerializeField]
private PickingMode m_PickingMode;
    [SerializeField]
private String[] m_Classes;
    [SerializeField]
private List`1<string> m_StylesheetPaths;
    [SerializeField]
private List`1<StyleSheet> m_Stylesheets;
    [SerializeField]
private bool m_SkipClone;
    public int ruleIndex { get; public set; }
    public String[] classes { get; public set; }
    public List`1<string> stylesheetPaths { get; public set; }
    public bool hasStylesheetPaths { get; }
    public List`1<StyleSheet> stylesheets { get; public set; }
    public bool hasStylesheets { get; }
    internal bool skipClone { get; internal set; }
    public VisualElementAsset(string fullTypeName);
    public int get_ruleIndex();
    public void set_ruleIndex(int value);
    public String[] get_classes();
    public void set_classes(String[] value);
    public List`1<string> get_stylesheetPaths();
    public void set_stylesheetPaths(List`1<string> value);
    public bool get_hasStylesheetPaths();
    public List`1<StyleSheet> get_stylesheets();
    public void set_stylesheets(List`1<StyleSheet> value);
    public bool get_hasStylesheets();
    internal bool get_skipClone();
    internal void set_skipClone(bool value);
    public sealed virtual void OnBeforeSerialize();
    public sealed virtual void OnAfterDeserialize();
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.VisualElementDebugExtensions : object {
    [ExtensionAttribute]
public static string GetDisplayName(VisualElement ve, bool withHashCode);
}
[ExtensionAttribute]
public static class UnityEngine.UIElements.VisualElementExtensions : object {
    [ExtensionAttribute]
public static void StretchToParentSize(VisualElement elem);
    [ExtensionAttribute]
public static void StretchToParentWidth(VisualElement elem);
    [ExtensionAttribute]
public static void AddManipulator(VisualElement ele, IManipulator manipulator);
    [ExtensionAttribute]
public static void RemoveManipulator(VisualElement ele, IManipulator manipulator);
    [ExtensionAttribute]
public static Vector2 WorldToLocal(VisualElement ele, Vector2 p);
    [ExtensionAttribute]
public static Vector2 LocalToWorld(VisualElement ele, Vector2 p);
    [ExtensionAttribute]
public static Rect WorldToLocal(VisualElement ele, Rect r);
    [ExtensionAttribute]
public static Rect LocalToWorld(VisualElement ele, Rect r);
    [ExtensionAttribute]
public static Vector2 ChangeCoordinatesTo(VisualElement src, VisualElement dest, Vector2 point);
    [ExtensionAttribute]
public static Rect ChangeCoordinatesTo(VisualElement src, VisualElement dest, Rect rect);
}
internal class UnityEngine.UIElements.VisualElementFactoryRegistry : object {
    private static Dictionary`2<string, List`1<IUxmlFactory>> s_Factories;
    private static Dictionary`2<string, List`1<IUxmlFactory>> s_MovedTypesFactories;
    internal static Dictionary`2<string, List`1<IUxmlFactory>> factories { get; }
    private static string GetMovedUIControlTypeName(Type type, MovedFromAttribute attr);
    internal static Dictionary`2<string, List`1<IUxmlFactory>> get_factories();
    protected static void RegisterFactory(IUxmlFactory factory);
    internal static bool TryGetValue(string fullTypeName, List`1& factoryList);
    internal static bool TryGetValue(Type type, List`1& factoryList);
    private static void RegisterEngineFactories();
    internal static void RegisterUserFactories();
}
[FlagsAttribute]
internal enum UnityEngine.UIElements.VisualElementFlags : Enum {
    public int value__;
    public static VisualElementFlags WorldTransformDirty;
    public static VisualElementFlags WorldTransformInverseDirty;
    public static VisualElementFlags WorldClipDirty;
    public static VisualElementFlags BoundingBoxDirty;
    public static VisualElementFlags WorldBoundingBoxDirty;
    public static VisualElementFlags EventCallbackParentCategoriesDirty;
    public static VisualElementFlags LayoutManual;
    public static VisualElementFlags CompositeRoot;
    public static VisualElementFlags RequireMeasureFunction;
    public static VisualElementFlags EnableViewDataPersistence;
    public static VisualElementFlags DisableClipping;
    public static VisualElementFlags NeedsAttachToPanelEvent;
    public static VisualElementFlags HierarchyDisplayed;
    public static VisualElementFlags StyleInitialized;
    public static VisualElementFlags Init;
}
public class UnityEngine.UIElements.VisualElementFocusChangeDirection : FocusChangeDirection {
    private static VisualElementFocusChangeDirection s_Left;
    private static VisualElementFocusChangeDirection s_Right;
    public static FocusChangeDirection left { get; }
    public static FocusChangeDirection right { get; }
    protected static VisualElementFocusChangeDirection lastValue { get; }
    protected VisualElementFocusChangeDirection(int value);
    private static VisualElementFocusChangeDirection();
    public static FocusChangeDirection get_left();
    public static FocusChangeDirection get_right();
    protected static VisualElementFocusChangeDirection get_lastValue();
}
internal class UnityEngine.UIElements.VisualElementFocusChangeTarget : FocusChangeDirection {
    private static ObjectPool`1<VisualElementFocusChangeTarget> Pool;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Focusable <target>k__BackingField;
    public Focusable target { get; private set; }
    private static VisualElementFocusChangeTarget();
    public static VisualElementFocusChangeTarget GetPooled(Focusable target);
    protected virtual void Dispose();
    internal virtual void ApplyTo(FocusController focusController, Focusable f);
    [CompilerGeneratedAttribute]
public Focusable get_target();
    [CompilerGeneratedAttribute]
private void set_target(Focusable value);
}
public class UnityEngine.UIElements.VisualElementFocusRing : object {
    private VisualElement root;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DefaultFocusOrder <defaultFocusOrder>k__BackingField;
    private List`1<FocusRingRecord> m_FocusRing;
    private FocusController focusController { get; }
    public DefaultFocusOrder defaultFocusOrder { get; public set; }
    public VisualElementFocusRing(VisualElement root, DefaultFocusOrder dfo);
    private FocusController get_focusController();
    [CompilerGeneratedAttribute]
public DefaultFocusOrder get_defaultFocusOrder();
    [CompilerGeneratedAttribute]
public void set_defaultFocusOrder(DefaultFocusOrder value);
    private int FocusRingAutoIndexSort(FocusRingRecord a, FocusRingRecord b);
    private int FocusRingSort(FocusRingRecord a, FocusRingRecord b);
    private void DoUpdate();
    private void BuildRingForScopeRecursive(VisualElement ve, Int32& scopeIndex, List`1<FocusRingRecord> scopeList);
    private void SortAndFlattenScopeLists(List`1<FocusRingRecord> rootScopeList);
    private int GetFocusableInternalIndex(Focusable f);
    public sealed virtual FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e);
    public sealed virtual Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction);
    internal static Focusable GetNextFocusableInTree(VisualElement currentFocusable);
    internal static Focusable GetPreviousFocusableInTree(VisualElement currentFocusable);
}
internal static class UnityEngine.UIElements.VisualElementListPool : object {
    private static ObjectPool`1<List`1<VisualElement>> pool;
    private static VisualElementListPool();
    public static List`1<VisualElement> Copy(List`1<VisualElement> elements);
    public static List`1<VisualElement> Get(int initialCapacity);
    public static void Release(List`1<VisualElement> elements);
}
internal class UnityEngine.UIElements.VisualElementPanelActivator : object {
    private IVisualElementPanelActivatable m_Activatable;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isActive>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <isDetaching>k__BackingField;
    private EventCallback`1<AttachToPanelEvent> m_OnAttachToPanelCallback;
    private EventCallback`1<DetachFromPanelEvent> m_OnDetachFromPanelCallback;
    public bool isActive { get; private set; }
    public bool isDetaching { get; private set; }
    public VisualElementPanelActivator(IVisualElementPanelActivatable activatable);
    [CompilerGeneratedAttribute]
public bool get_isActive();
    [CompilerGeneratedAttribute]
private void set_isActive(bool value);
    [CompilerGeneratedAttribute]
public bool get_isDetaching();
    [CompilerGeneratedAttribute]
private void set_isDetaching(bool value);
    public void SetActive(bool action);
    public void SendActivation();
    public void SendDeactivation();
    private void OnEnter(AttachToPanelEvent evt);
    private void OnLeave(DetachFromPanelEvent evt);
}
[DefaultMemberAttribute("Item")]
public class UnityEngine.UIElements.VisualElementStyleSheetSet : ValueType {
    private VisualElement m_Element;
    public int count { get; }
    public StyleSheet Item { get; }
    internal VisualElementStyleSheetSet(VisualElement element);
    public void Add(StyleSheet styleSheet);
    public void Clear();
    public bool Remove(StyleSheet styleSheet);
    internal void Swap(StyleSheet old, StyleSheet new);
    public bool Contains(StyleSheet styleSheet);
    public int get_count();
    public StyleSheet get_Item(int index);
    public sealed virtual bool Equals(VisualElementStyleSheetSet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(VisualElementStyleSheetSet left, VisualElementStyleSheetSet right);
    public static bool op_Inequality(VisualElementStyleSheetSet left, VisualElementStyleSheetSet right);
}
[ExtensionAttribute]
internal static class UnityEngine.UIElements.VisualElementUtils : object {
    private static HashSet`1<string> s_usedNames;
    private static Type s_FoldoutType;
    private static string s_InspectorElementUssClassName;
    private static VisualElementUtils();
    public static string GetUniqueName(string nameBase);
    [ExtensionAttribute]
internal static int GetFoldoutDepth(VisualElement element);
    [ExtensionAttribute]
internal static void AssignInspectorStyleIfNecessary(VisualElement element, string classNameToEnable);
}
[HelpURLAttribute("UIE-VisualTree-landing")]
public class UnityEngine.UIElements.VisualTreeAsset : ScriptableObject {
    internal static string LinkedVEAInTemplatePropertyName;
    [SerializeField]
private bool m_ImportedWithErrors;
    [SerializeField]
private bool m_ImportedWithWarnings;
    private static Dictionary`2<string, VisualElement> s_TemporarySlotInsertionPoints;
    [SerializeField]
private List`1<UsingEntry> m_Usings;
    [SerializeField]
internal StyleSheet inlineSheet;
    [SerializeField]
private List`1<VisualElementAsset> m_VisualElementAssets;
    [SerializeField]
private List`1<TemplateAsset> m_TemplateAssets;
    [SerializeField]
private List`1<UxmlObjectEntry> m_UxmlObjectEntries;
    [SerializeField]
private List`1<int> m_UxmlObjectIds;
    [SerializeField]
private List`1<AssetEntry> m_AssetEntries;
    [SerializeField]
private List`1<SlotDefinition> m_Slots;
    [SerializeField]
private int m_ContentContainerId;
    [SerializeField]
private int m_ContentHash;
    public bool importedWithErrors { get; internal set; }
    public bool importedWithWarnings { get; internal set; }
    public IEnumerable`1<VisualTreeAsset> templateDependencies { get; }
    public IEnumerable`1<StyleSheet> stylesheets { get; }
    internal List`1<VisualElementAsset> visualElementAssets { get; internal set; }
    internal List`1<TemplateAsset> templateAssets { get; internal set; }
    internal List`1<UxmlObjectEntry> uxmlObjectEntries { get; }
    internal List`1<int> uxmlObjectIds { get; }
    internal List`1<SlotDefinition> slots { get; internal set; }
    internal int contentContainerId { get; internal set; }
    public int contentHash { get; public set; }
    private static VisualTreeAsset();
    public bool get_importedWithErrors();
    internal void set_importedWithErrors(bool value);
    public bool get_importedWithWarnings();
    internal void set_importedWithWarnings(bool value);
    internal int GetNextChildSerialNumber();
    [IteratorStateMachineAttribute("UnityEngine.UIElements.VisualTreeAsset/<get_templateDependencies>d__19")]
public IEnumerable`1<VisualTreeAsset> get_templateDependencies();
    [IteratorStateMachineAttribute("UnityEngine.UIElements.VisualTreeAsset/<get_stylesheets>d__23")]
public IEnumerable`1<StyleSheet> get_stylesheets();
    internal List`1<VisualElementAsset> get_visualElementAssets();
    internal void set_visualElementAssets(List`1<VisualElementAsset> value);
    internal List`1<TemplateAsset> get_templateAssets();
    internal void set_templateAssets(List`1<TemplateAsset> value);
    internal List`1<UxmlObjectEntry> get_uxmlObjectEntries();
    internal List`1<int> get_uxmlObjectIds();
    internal void RegisterUxmlObject(UxmlObjectAsset uxmlObjectAsset);
    internal List`1<T> GetUxmlObjects(IUxmlAttributes asset, CreationContext cc);
    internal bool AssetEntryExists(string path, Type type);
    internal void RegisterAssetEntry(string path, Type type, Object asset);
    internal T GetAsset(string path);
    internal UxmlObjectEntry GetUxmlObjectEntry(int id);
    private IBaseUxmlObjectFactory GetUxmlObjectFactory(UxmlObjectAsset uxmlObjectAsset);
    internal List`1<SlotDefinition> get_slots();
    internal void set_slots(List`1<SlotDefinition> value);
    internal int get_contentContainerId();
    internal void set_contentContainerId(int value);
    public TemplateContainer Instantiate();
    public TemplateContainer Instantiate(string bindingPath);
    public TemplateContainer CloneTree();
    public TemplateContainer CloneTree(string bindingPath);
    public void CloneTree(VisualElement target);
    public void CloneTree(VisualElement target, Int32& firstElementIndex, Int32& elementAddedCount);
    internal void CloneTree(VisualElement target, Dictionary`2<string, VisualElement> slotInsertionPoints, List`1<AttributeOverride> attributeOverrides);
    private VisualElement CloneSetupRecursively(VisualElementAsset root, Dictionary`2<int, List`1<VisualElementAsset>> idToChildren, CreationContext context);
    private static int CompareForOrder(VisualElementAsset a, VisualElementAsset b);
    internal bool TryGetSlotInsertionPoint(int insertionPointId, String& slotName);
    internal VisualTreeAsset ResolveTemplate(string templateName);
    internal static VisualElement Create(VisualElementAsset asset, CreationContext ctx);
    private static void AssignClassListFromAssetToElement(VisualElementAsset asset, VisualElement element);
    private static void AssignStyleSheetFromAssetToElement(VisualElementAsset asset, VisualElement element);
    public int get_contentHash();
    public void set_contentHash(int value);
    [CompilerGeneratedAttribute]
internal static VisualElement <Create>g__CreateError|65_0(<>c__DisplayClass65_0& );
}
internal class UnityEngine.UIElements.VisualTreeBindingsUpdater : BaseVisualTreeHierarchyTrackerUpdater {
    private static PropertyName s_BindingRequestObjectVEPropertyName;
    private static PropertyName s_AdditionalBindingObjectVEPropertyName;
    private static string s_Description;
    private static ProfilerMarker s_ProfilerMarker;
    private static ProfilerMarker s_ProfilerBindingRequestsMarker;
    private static ProfilerMarker s_MarkerUpdate;
    private static ProfilerMarker s_MarkerPoll;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <disableBindingsThrottling>k__BackingField;
    private HashSet`1<VisualElement> m_ElementsWithBindings;
    private HashSet`1<VisualElement> m_ElementsToAdd;
    private HashSet`1<VisualElement> m_ElementsToRemove;
    private static int k_MinUpdateDelayMs;
    private static int k_MaxBindingTimeMs;
    private long m_LastUpdateTime;
    private HashSet`1<VisualElement> m_ElementsToBind;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<object, object> <temporaryObjectCache>k__BackingField;
    private List`1<IBinding> updatedBindings;
    public ProfilerMarker profilerMarker { get; }
    public static bool disableBindingsThrottling { get; public set; }
    public Dictionary`2<object, object> temporaryObjectCache { get; private set; }
    private static VisualTreeBindingsUpdater();
    public virtual ProfilerMarker get_profilerMarker();
    [CompilerGeneratedAttribute]
public static bool get_disableBindingsThrottling();
    [CompilerGeneratedAttribute]
public static void set_disableBindingsThrottling(bool value);
    private IBinding GetBindingObjectFromElement(VisualElement ve);
    private void StartTracking(VisualElement ve);
    private void StopTracking(VisualElement ve);
    [CompilerGeneratedAttribute]
public Dictionary`2<object, object> get_temporaryObjectCache();
    [CompilerGeneratedAttribute]
private void set_temporaryObjectCache(Dictionary`2<object, object> value);
    public static void SetAdditionalBinding(VisualElement ve, IBinding b);
    public static void ClearAdditionalBinding(VisualElement ve);
    public static IBinding GetAdditionalBinding(VisualElement ve);
    public static void AddBindingRequest(VisualElement ve, IBindingRequest req);
    public static void RemoveBindingRequest(VisualElement ve, IBindingRequest req);
    public static void ClearBindingRequests(VisualElement ve);
    private void StartTrackingRecursive(VisualElement ve);
    private void StopTrackingRecursive(VisualElement ve);
    public virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
    protected virtual void OnHierarchyChange(VisualElement ve, HierarchyChangeType type);
    private static long CurrentTime();
    public static bool ShouldThrottle(long startTime);
    public void PerformTrackingOperations();
    public virtual void Update();
    private void UpdateBindings();
    internal void PollElementsWithBindings(Action`2<VisualElement, IBinding> callback);
}
internal class UnityEngine.UIElements.VisualTreeHierarchyFlagsUpdater : BaseVisualTreeUpdater {
    private UInt32 m_Version;
    private UInt32 m_LastVersion;
    private static string s_Description;
    private static ProfilerMarker s_ProfilerMarker;
    public ProfilerMarker profilerMarker { get; }
    private static VisualTreeHierarchyFlagsUpdater();
    public virtual ProfilerMarker get_profilerMarker();
    public virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
    private static void DirtyHierarchy(VisualElement ve, VisualElementFlags mustDirtyFlags);
    private static void DirtyBoundingBoxHierarchy(VisualElement ve);
    public virtual void Update();
}
internal class UnityEngine.UIElements.VisualTreeStyleUpdater : BaseVisualTreeUpdater {
    private HashSet`1<VisualElement> m_ApplyStyleUpdateList;
    private HashSet`1<VisualElement> m_TransitionPropertyUpdateList;
    private bool m_IsApplyingStyles;
    private UInt32 m_Version;
    private UInt32 m_LastVersion;
    private VisualTreeStyleUpdaterTraversal m_StyleContextHierarchyTraversal;
    private static string s_Description;
    private static ProfilerMarker s_ProfilerMarker;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <disposed>k__BackingField;
    public VisualTreeStyleUpdaterTraversal traversal { get; public set; }
    public ProfilerMarker profilerMarker { get; }
    protected bool disposed { get; private set; }
    private static VisualTreeStyleUpdater();
    public VisualTreeStyleUpdaterTraversal get_traversal();
    public void set_traversal(VisualTreeStyleUpdaterTraversal value);
    public virtual ProfilerMarker get_profilerMarker();
    public virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
    public virtual void Update();
    [CompilerGeneratedAttribute]
protected bool get_disposed();
    [CompilerGeneratedAttribute]
private void set_disposed(bool value);
    protected virtual void Dispose(bool disposing);
    private void ApplyStyles();
}
internal class UnityEngine.UIElements.VisualTreeStyleUpdaterTraversal : HierarchyTraversal {
    private StyleVariableContext m_ProcessVarContext;
    private HashSet`1<VisualElement> m_UpdateList;
    private HashSet`1<VisualElement> m_ParentList;
    private List`1<SelectorMatchRecord> m_TempMatchResults;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <currentPixelsPerPoint>k__BackingField;
    private StyleMatchingContext m_StyleMatchingContext;
    private StylePropertyReader m_StylePropertyReader;
    private List`1<StylePropertyId> m_AnimatedProperties;
    private float currentPixelsPerPoint { get; private set; }
    public StyleMatchingContext styleMatchingContext { get; }
    [CompilerGeneratedAttribute]
private float get_currentPixelsPerPoint();
    [CompilerGeneratedAttribute]
private void set_currentPixelsPerPoint(float value);
    public StyleMatchingContext get_styleMatchingContext();
    public void PrepareTraversal(float pixelsPerPoint);
    public void AddChangedElement(VisualElement ve, VersionChangeType versionChangeType);
    public void Clear();
    private void PropagateToChildren(VisualElement ve);
    private void PropagateToParents(VisualElement ve);
    private static void OnProcessMatchResult(VisualElement current, MatchResultInfo info);
    public virtual void TraverseRecursive(VisualElement element, int depth);
    private void ProcessTransitions(VisualElement element, ComputedStyle& oldStyle, ComputedStyle& newStyle);
    private void ForceUpdateTransitions(VisualElement element);
    internal void CancelAnimationsWithNoTransitionProperty(VisualElement element, ComputedStyle& newStyle);
    protected bool ShouldSkipElement(VisualElement element);
    private ComputedStyle ProcessMatchedRules(VisualElement element, List`1<SelectorMatchRecord> matchingSelectors);
    private void ProcessMatchedVariables(StyleSheet sheet, StyleRule rule);
}
internal enum UnityEngine.UIElements.VisualTreeUpdatePhase : Enum {
    public int value__;
    public static VisualTreeUpdatePhase ViewData;
    public static VisualTreeUpdatePhase Bindings;
    public static VisualTreeUpdatePhase Animation;
    public static VisualTreeUpdatePhase Styles;
    public static VisualTreeUpdatePhase Layout;
    public static VisualTreeUpdatePhase TransformClip;
    public static VisualTreeUpdatePhase Repaint;
    public static VisualTreeUpdatePhase Count;
}
internal class UnityEngine.UIElements.VisualTreeUpdater : object {
    private BaseVisualElementPanel m_Panel;
    private UpdaterArray m_UpdaterArray;
    public VisualTreeUpdater(BaseVisualElementPanel panel);
    public sealed virtual void Dispose();
    public void UpdateVisualTree();
    public void UpdateVisualTreePhase(VisualTreeUpdatePhase phase);
    public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
    public void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase);
    public void SetUpdater(VisualTreeUpdatePhase phase);
    public IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase);
    private void SetDefaultUpdaters();
}
internal class UnityEngine.UIElements.VisualTreeViewDataUpdater : BaseVisualTreeUpdater {
    private HashSet`1<VisualElement> m_UpdateList;
    private HashSet`1<VisualElement> m_ParentList;
    private static int kMaxValidatePersistentDataCount;
    private UInt32 m_Version;
    private UInt32 m_LastVersion;
    private static string s_Description;
    private static ProfilerMarker s_ProfilerMarker;
    public ProfilerMarker profilerMarker { get; }
    private static VisualTreeViewDataUpdater();
    public virtual ProfilerMarker get_profilerMarker();
    public virtual void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType);
    public virtual void Update();
    private void ValidateViewDataOnSubTree(VisualElement ve, bool enablePersistence);
    private void PropagateToParents(VisualElement ve);
}
public class UnityEngine.UIElements.WheelEvent : MouseEventBase`1<WheelEvent> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Vector3 <delta>k__BackingField;
    public Vector3 delta { get; private set; }
    private static WheelEvent();
    [CompilerGeneratedAttribute]
public Vector3 get_delta();
    [CompilerGeneratedAttribute]
private void set_delta(Vector3 value);
    public static WheelEvent GetPooled(Event systemEvent);
    internal static WheelEvent GetPooled(Vector3 delta, Vector3 mousePosition, EventModifiers modifiers);
    internal static WheelEvent GetPooled(Vector3 delta, IPointerEvent pointerEvent);
    protected virtual void Init();
    private void LocalInit();
}
public enum UnityEngine.UIElements.WhiteSpace : Enum {
    public int value__;
    public static WhiteSpace Normal;
    public static WhiteSpace NoWrap;
}
public enum UnityEngine.UIElements.Wrap : Enum {
    public int value__;
    public static Wrap NoWrap;
    public static Wrap Wrap;
    public static Wrap WrapReverse;
}
internal class UnityEngine.Yoga.BaselineFunction : MulticastDelegate {
    public BaselineFunction(object object, IntPtr method);
    public virtual float Invoke(YogaNode node, float width, float height);
    public virtual IAsyncResult BeginInvoke(YogaNode node, float width, float height, AsyncCallback callback, object object);
    public virtual float EndInvoke(IAsyncResult result);
}
internal class UnityEngine.Yoga.Logger : MulticastDelegate {
    public Logger(object object, IntPtr method);
    public virtual void Invoke(YogaConfig config, YogaNode node, YogaLogLevel level, string message);
    public virtual IAsyncResult BeginInvoke(YogaConfig config, YogaNode node, YogaLogLevel level, string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class UnityEngine.Yoga.MeasureFunction : MulticastDelegate {
    public MeasureFunction(object object, IntPtr method);
    public virtual YogaSize Invoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode);
    public virtual IAsyncResult BeginInvoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, AsyncCallback callback, object object);
    public virtual YogaSize EndInvoke(IAsyncResult result);
}
internal class UnityEngine.Yoga.MeasureOutput : object {
    public static YogaSize Make(float width, float height);
}
[NativeHeaderAttribute("ModuleOverrides/com.unity.ui/Core/Native/YogaNative.bindings.h")]
internal static class UnityEngine.Yoga.Native : object {
    [FreeFunctionAttribute]
private static IntPtr YGNodeNew();
    [FreeFunctionAttribute]
public static IntPtr YGNodeNewWithConfig(IntPtr config);
    public static void YGNodeFree(IntPtr ygNode);
    [FreeFunctionAttribute]
private static void YGNodeFreeInternal(IntPtr ygNode);
    [FreeFunctionAttribute]
public static void YGNodeReset(IntPtr node);
    [FreeFunctionAttribute]
public static void YGSetManagedObject(IntPtr ygNode, YogaNode node);
    [FreeFunctionAttribute]
public static void YGNodeSetConfig(IntPtr ygNode, IntPtr config);
    [FreeFunctionAttribute]
public static IntPtr YGConfigGetDefault();
    [FreeFunctionAttribute]
public static IntPtr YGConfigNew();
    public static void YGConfigFree(IntPtr config);
    [FreeFunctionAttribute]
private static void YGConfigFreeInternal(IntPtr config);
    [FreeFunctionAttribute]
public static int YGNodeGetInstanceCount();
    [FreeFunctionAttribute]
public static int YGConfigGetInstanceCount();
    [FreeFunctionAttribute]
public static void YGConfigSetExperimentalFeatureEnabled(IntPtr config, YogaExperimentalFeature feature, bool enabled);
    [FreeFunctionAttribute]
public static bool YGConfigIsExperimentalFeatureEnabled(IntPtr config, YogaExperimentalFeature feature);
    [FreeFunctionAttribute]
public static void YGConfigSetUseWebDefaults(IntPtr config, bool useWebDefaults);
    [FreeFunctionAttribute]
public static bool YGConfigGetUseWebDefaults(IntPtr config);
    [FreeFunctionAttribute]
public static void YGConfigSetPointScaleFactor(IntPtr config, float pixelsInPoint);
    [FreeFunctionAttribute]
public static float YGConfigGetPointScaleFactor(IntPtr config);
    [FreeFunctionAttribute]
public static void YGNodeInsertChild(IntPtr node, IntPtr child, UInt32 index);
    [FreeFunctionAttribute]
public static void YGNodeRemoveChild(IntPtr node, IntPtr child);
    [FreeFunctionAttribute]
public static void YGNodeCalculateLayout(IntPtr node, float availableWidth, float availableHeight, YogaDirection parentDirection);
    [FreeFunctionAttribute]
public static void YGNodeMarkDirty(IntPtr node);
    [FreeFunctionAttribute]
public static bool YGNodeIsDirty(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodePrint(IntPtr node, YogaPrintOptions options);
    [FreeFunctionAttribute]
public static void YGNodeCopyStyle(IntPtr dstNode, IntPtr srcNode);
    [FreeFunctionAttribute]
public static void YGNodeSetMeasureFunc(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeRemoveMeasureFunc(IntPtr node);
    [RequiredByNativeCodeAttribute]
public static void YGNodeMeasureInvoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, IntPtr returnValueAddress);
    [FreeFunctionAttribute]
public static void YGNodeSetBaselineFunc(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeRemoveBaselineFunc(IntPtr node);
    [RequiredByNativeCodeAttribute]
public static void YGNodeBaselineInvoke(YogaNode node, float width, float height, IntPtr returnValueAddress);
    [FreeFunctionAttribute]
public static void YGNodeSetHasNewLayout(IntPtr node, bool hasNewLayout);
    [FreeFunctionAttribute]
public static bool YGNodeGetHasNewLayout(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetDirection(IntPtr node, YogaDirection direction);
    [FreeFunctionAttribute]
public static YogaDirection YGNodeStyleGetDirection(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetFlexDirection(IntPtr node, YogaFlexDirection flexDirection);
    [FreeFunctionAttribute]
public static YogaFlexDirection YGNodeStyleGetFlexDirection(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetJustifyContent(IntPtr node, YogaJustify justifyContent);
    [FreeFunctionAttribute]
public static YogaJustify YGNodeStyleGetJustifyContent(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetAlignContent(IntPtr node, YogaAlign alignContent);
    [FreeFunctionAttribute]
public static YogaAlign YGNodeStyleGetAlignContent(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetAlignItems(IntPtr node, YogaAlign alignItems);
    [FreeFunctionAttribute]
public static YogaAlign YGNodeStyleGetAlignItems(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetAlignSelf(IntPtr node, YogaAlign alignSelf);
    [FreeFunctionAttribute]
public static YogaAlign YGNodeStyleGetAlignSelf(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetPositionType(IntPtr node, YogaPositionType positionType);
    [FreeFunctionAttribute]
public static YogaPositionType YGNodeStyleGetPositionType(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetFlexWrap(IntPtr node, YogaWrap flexWrap);
    [FreeFunctionAttribute]
public static YogaWrap YGNodeStyleGetFlexWrap(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetOverflow(IntPtr node, YogaOverflow flexWrap);
    [FreeFunctionAttribute]
public static YogaOverflow YGNodeStyleGetOverflow(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetDisplay(IntPtr node, YogaDisplay display);
    [FreeFunctionAttribute]
public static YogaDisplay YGNodeStyleGetDisplay(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetFlex(IntPtr node, float flex);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetFlexGrow(IntPtr node, float flexGrow);
    [FreeFunctionAttribute]
public static float YGNodeStyleGetFlexGrow(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetFlexShrink(IntPtr node, float flexShrink);
    [FreeFunctionAttribute]
public static float YGNodeStyleGetFlexShrink(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetFlexBasis(IntPtr node, float flexBasis);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetFlexBasisPercent(IntPtr node, float flexBasis);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetFlexBasisAuto(IntPtr node);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetFlexBasis(IntPtr node);
    [FreeFunctionAttribute]
public static float YGNodeGetComputedFlexBasis(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetWidth(IntPtr node, float width);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetWidthPercent(IntPtr node, float width);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetWidthAuto(IntPtr node);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetWidth(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetHeight(IntPtr node, float height);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetHeightPercent(IntPtr node, float height);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetHeightAuto(IntPtr node);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetHeight(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMinWidth(IntPtr node, float minWidth);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMinWidthPercent(IntPtr node, float minWidth);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetMinWidth(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMinHeight(IntPtr node, float minHeight);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMinHeightPercent(IntPtr node, float minHeight);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetMinHeight(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMaxWidth(IntPtr node, float maxWidth);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMaxWidthPercent(IntPtr node, float maxWidth);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetMaxWidth(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMaxHeight(IntPtr node, float maxHeight);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMaxHeightPercent(IntPtr node, float maxHeight);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetMaxHeight(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetAspectRatio(IntPtr node, float aspectRatio);
    [FreeFunctionAttribute]
public static float YGNodeStyleGetAspectRatio(IntPtr node);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetPosition(IntPtr node, YogaEdge edge, float position);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetPositionPercent(IntPtr node, YogaEdge edge, float position);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetPosition(IntPtr node, YogaEdge edge);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMargin(IntPtr node, YogaEdge edge, float margin);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMarginPercent(IntPtr node, YogaEdge edge, float margin);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetMarginAuto(IntPtr node, YogaEdge edge);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetMargin(IntPtr node, YogaEdge edge);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetPadding(IntPtr node, YogaEdge edge, float padding);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetPaddingPercent(IntPtr node, YogaEdge edge, float padding);
    [FreeFunctionAttribute]
public static YogaValue YGNodeStyleGetPadding(IntPtr node, YogaEdge edge);
    [FreeFunctionAttribute]
public static void YGNodeStyleSetBorder(IntPtr node, YogaEdge edge, float border);
    [FreeFunctionAttribute]
public static float YGNodeStyleGetBorder(IntPtr node, YogaEdge edge);
    [FreeFunctionAttribute]
public static float YGNodeLayoutGetLeft(IntPtr node);
    [FreeFunctionAttribute]
public static float YGNodeLayoutGetTop(IntPtr node);
    [FreeFunctionAttribute]
public static float YGNodeLayoutGetRight(IntPtr node);
    [FreeFunctionAttribute]
public static float YGNodeLayoutGetBottom(IntPtr node);
    [FreeFunctionAttribute]
public static float YGNodeLayoutGetWidth(IntPtr node);
    [FreeFunctionAttribute]
public static float YGNodeLayoutGetHeight(IntPtr node);
    [FreeFunctionAttribute]
public static float YGNodeLayoutGetMargin(IntPtr node, YogaEdge edge);
    [FreeFunctionAttribute]
public static float YGNodeLayoutGetPadding(IntPtr node, YogaEdge edge);
    [FreeFunctionAttribute]
public static float YGNodeLayoutGetBorder(IntPtr node, YogaEdge edge);
    [FreeFunctionAttribute]
public static YogaDirection YGNodeLayoutGetDirection(IntPtr node);
    private static void YGNodeStyleGetFlexBasis_Injected(IntPtr node, YogaValue& ret);
    private static void YGNodeStyleGetWidth_Injected(IntPtr node, YogaValue& ret);
    private static void YGNodeStyleGetHeight_Injected(IntPtr node, YogaValue& ret);
    private static void YGNodeStyleGetMinWidth_Injected(IntPtr node, YogaValue& ret);
    private static void YGNodeStyleGetMinHeight_Injected(IntPtr node, YogaValue& ret);
    private static void YGNodeStyleGetMaxWidth_Injected(IntPtr node, YogaValue& ret);
    private static void YGNodeStyleGetMaxHeight_Injected(IntPtr node, YogaValue& ret);
    private static void YGNodeStyleGetPosition_Injected(IntPtr node, YogaEdge edge, YogaValue& ret);
    private static void YGNodeStyleGetMargin_Injected(IntPtr node, YogaEdge edge, YogaValue& ret);
    private static void YGNodeStyleGetPadding_Injected(IntPtr node, YogaEdge edge, YogaValue& ret);
}
internal enum UnityEngine.Yoga.YogaAlign : Enum {
    public int value__;
    public static YogaAlign Auto;
    public static YogaAlign FlexStart;
    public static YogaAlign Center;
    public static YogaAlign FlexEnd;
    public static YogaAlign Stretch;
    public static YogaAlign Baseline;
    public static YogaAlign SpaceBetween;
    public static YogaAlign SpaceAround;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class UnityEngine.Yoga.YogaBaselineFunc : MulticastDelegate {
    public YogaBaselineFunc(object object, IntPtr method);
    public virtual float Invoke(IntPtr unmanagedNodePtr, float width, float height);
    public virtual IAsyncResult BeginInvoke(IntPtr unmanagedNodePtr, float width, float height, AsyncCallback callback, object object);
    public virtual float EndInvoke(IAsyncResult result);
}
internal class UnityEngine.Yoga.YogaConfig : object {
    internal static YogaConfig Default;
    private IntPtr _ygConfig;
    private Logger _logger;
    internal IntPtr Handle { get; }
    public Logger Logger { get; public set; }
    public bool UseWebDefaults { get; public set; }
    public float PointScaleFactor { get; public set; }
    private YogaConfig(IntPtr ygConfig);
    private static YogaConfig();
    protected virtual override void Finalize();
    internal IntPtr get_Handle();
    public Logger get_Logger();
    public void set_Logger(Logger value);
    public void SetExperimentalFeatureEnabled(YogaExperimentalFeature feature, bool enabled);
    public bool IsExperimentalFeatureEnabled(YogaExperimentalFeature feature);
    public bool get_UseWebDefaults();
    public void set_UseWebDefaults(bool value);
    public float get_PointScaleFactor();
    public void set_PointScaleFactor(float value);
    public static int GetInstanceCount();
    public static void SetDefaultLogger(Logger logger);
}
internal static class UnityEngine.Yoga.YogaConstants : object {
    public static float Undefined;
    public static bool IsUndefined(float value);
    public static bool IsUndefined(YogaValue value);
}
internal enum UnityEngine.Yoga.YogaDimension : Enum {
    public int value__;
    public static YogaDimension Width;
    public static YogaDimension Height;
}
internal enum UnityEngine.Yoga.YogaDirection : Enum {
    public int value__;
    public static YogaDirection Inherit;
    public static YogaDirection LTR;
    public static YogaDirection RTL;
}
internal enum UnityEngine.Yoga.YogaDisplay : Enum {
    public int value__;
    public static YogaDisplay Flex;
    public static YogaDisplay None;
}
internal enum UnityEngine.Yoga.YogaEdge : Enum {
    public int value__;
    public static YogaEdge Left;
    public static YogaEdge Top;
    public static YogaEdge Right;
    public static YogaEdge Bottom;
    public static YogaEdge Start;
    public static YogaEdge End;
    public static YogaEdge Horizontal;
    public static YogaEdge Vertical;
    public static YogaEdge All;
}
internal enum UnityEngine.Yoga.YogaExperimentalFeature : Enum {
    public int value__;
    public static YogaExperimentalFeature WebFlexBasis;
}
internal enum UnityEngine.Yoga.YogaFlexDirection : Enum {
    public int value__;
    public static YogaFlexDirection Column;
    public static YogaFlexDirection ColumnReverse;
    public static YogaFlexDirection Row;
    public static YogaFlexDirection RowReverse;
}
internal enum UnityEngine.Yoga.YogaJustify : Enum {
    public int value__;
    public static YogaJustify FlexStart;
    public static YogaJustify Center;
    public static YogaJustify FlexEnd;
    public static YogaJustify SpaceBetween;
    public static YogaJustify SpaceAround;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class UnityEngine.Yoga.YogaLogger : MulticastDelegate {
    public YogaLogger(object object, IntPtr method);
    public virtual void Invoke(IntPtr unmanagedConfigPtr, IntPtr unmanagedNotePtr, YogaLogLevel level, string message);
    public virtual IAsyncResult BeginInvoke(IntPtr unmanagedConfigPtr, IntPtr unmanagedNotePtr, YogaLogLevel level, string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum UnityEngine.Yoga.YogaLogLevel : Enum {
    public int value__;
    public static YogaLogLevel Error;
    public static YogaLogLevel Warn;
    public static YogaLogLevel Info;
    public static YogaLogLevel Debug;
    public static YogaLogLevel Verbose;
    public static YogaLogLevel Fatal;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class UnityEngine.Yoga.YogaMeasureFunc : MulticastDelegate {
    public YogaMeasureFunc(object object, IntPtr method);
    public virtual YogaSize Invoke(IntPtr unmanagedNodePtr, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode);
    public virtual IAsyncResult BeginInvoke(IntPtr unmanagedNodePtr, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, AsyncCallback callback, object object);
    public virtual YogaSize EndInvoke(IAsyncResult result);
}
internal enum UnityEngine.Yoga.YogaMeasureMode : Enum {
    public int value__;
    public static YogaMeasureMode Undefined;
    public static YogaMeasureMode Exactly;
    public static YogaMeasureMode AtMost;
}
[DefaultMemberAttribute("Item")]
internal class UnityEngine.Yoga.YogaNode : object {
    internal IntPtr _ygNode;
    private YogaConfig _config;
    private WeakReference _parent;
    private List`1<YogaNode> _children;
    private MeasureFunction _measureFunction;
    private BaselineFunction _baselineFunction;
    private object _data;
    internal YogaConfig Config { get; internal set; }
    public bool IsDirty { get; }
    public bool HasNewLayout { get; }
    public YogaNode Parent { get; }
    public bool IsMeasureDefined { get; }
    public bool IsBaselineDefined { get; }
    public YogaDirection StyleDirection { get; public set; }
    public YogaFlexDirection FlexDirection { get; public set; }
    public YogaJustify JustifyContent { get; public set; }
    public YogaDisplay Display { get; public set; }
    public YogaAlign AlignItems { get; public set; }
    public YogaAlign AlignSelf { get; public set; }
    public YogaAlign AlignContent { get; public set; }
    public YogaPositionType PositionType { get; public set; }
    public YogaWrap Wrap { get; public set; }
    unknown float Flex {public set; }
    public float FlexGrow { get; public set; }
    public float FlexShrink { get; public set; }
    public YogaValue FlexBasis { get; public set; }
    public YogaValue Width { get; public set; }
    public YogaValue Height { get; public set; }
    public YogaValue MaxWidth { get; public set; }
    public YogaValue MaxHeight { get; public set; }
    public YogaValue MinWidth { get; public set; }
    public YogaValue MinHeight { get; public set; }
    public float AspectRatio { get; public set; }
    public float LayoutX { get; }
    public float LayoutY { get; }
    public float LayoutRight { get; }
    public float LayoutBottom { get; }
    public float LayoutWidth { get; }
    public float LayoutHeight { get; }
    public YogaDirection LayoutDirection { get; }
    public YogaOverflow Overflow { get; public set; }
    public object Data { get; public set; }
    public YogaNode Item { get; }
    public int Count { get; }
    public YogaValue Left { get; public set; }
    public YogaValue Top { get; public set; }
    public YogaValue Right { get; public set; }
    public YogaValue Bottom { get; public set; }
    public YogaValue Start { get; public set; }
    public YogaValue End { get; public set; }
    public YogaValue MarginLeft { get; public set; }
    public YogaValue MarginTop { get; public set; }
    public YogaValue MarginRight { get; public set; }
    public YogaValue MarginBottom { get; public set; }
    public YogaValue MarginStart { get; public set; }
    public YogaValue MarginEnd { get; public set; }
    public YogaValue MarginHorizontal { get; public set; }
    public YogaValue MarginVertical { get; public set; }
    public YogaValue Margin { get; public set; }
    public YogaValue PaddingLeft { get; public set; }
    public YogaValue PaddingTop { get; public set; }
    public YogaValue PaddingRight { get; public set; }
    public YogaValue PaddingBottom { get; public set; }
    public YogaValue PaddingStart { get; public set; }
    public YogaValue PaddingEnd { get; public set; }
    public YogaValue PaddingHorizontal { get; public set; }
    public YogaValue PaddingVertical { get; public set; }
    public YogaValue Padding { get; public set; }
    public float BorderLeftWidth { get; public set; }
    public float BorderTopWidth { get; public set; }
    public float BorderRightWidth { get; public set; }
    public float BorderBottomWidth { get; public set; }
    public float BorderStartWidth { get; public set; }
    public float BorderEndWidth { get; public set; }
    public float BorderWidth { get; public set; }
    public float LayoutMarginLeft { get; }
    public float LayoutMarginTop { get; }
    public float LayoutMarginRight { get; }
    public float LayoutMarginBottom { get; }
    public float LayoutMarginStart { get; }
    public float LayoutMarginEnd { get; }
    public float LayoutPaddingLeft { get; }
    public float LayoutPaddingTop { get; }
    public float LayoutPaddingRight { get; }
    public float LayoutPaddingBottom { get; }
    public float LayoutBorderLeft { get; }
    public float LayoutBorderTop { get; }
    public float LayoutBorderRight { get; }
    public float LayoutBorderBottom { get; }
    public float LayoutPaddingStart { get; }
    public float LayoutPaddingEnd { get; }
    public float ComputedFlexBasis { get; }
    public YogaNode(YogaConfig config);
    public YogaNode(YogaNode srcNode);
    protected virtual override void Finalize();
    public void Reset();
    internal YogaConfig get_Config();
    internal void set_Config(YogaConfig value);
    public bool get_IsDirty();
    public virtual void MarkDirty();
    public bool get_HasNewLayout();
    public void MarkHasNewLayout();
    public YogaNode get_Parent();
    public bool get_IsMeasureDefined();
    public bool get_IsBaselineDefined();
    public void CopyStyle(YogaNode srcNode);
    public YogaDirection get_StyleDirection();
    public void set_StyleDirection(YogaDirection value);
    public YogaFlexDirection get_FlexDirection();
    public void set_FlexDirection(YogaFlexDirection value);
    public YogaJustify get_JustifyContent();
    public void set_JustifyContent(YogaJustify value);
    public YogaDisplay get_Display();
    public void set_Display(YogaDisplay value);
    public YogaAlign get_AlignItems();
    public void set_AlignItems(YogaAlign value);
    public YogaAlign get_AlignSelf();
    public void set_AlignSelf(YogaAlign value);
    public YogaAlign get_AlignContent();
    public void set_AlignContent(YogaAlign value);
    public YogaPositionType get_PositionType();
    public void set_PositionType(YogaPositionType value);
    public YogaWrap get_Wrap();
    public void set_Wrap(YogaWrap value);
    public void set_Flex(float value);
    public float get_FlexGrow();
    public void set_FlexGrow(float value);
    public float get_FlexShrink();
    public void set_FlexShrink(float value);
    public YogaValue get_FlexBasis();
    public void set_FlexBasis(YogaValue value);
    public YogaValue get_Width();
    public void set_Width(YogaValue value);
    public YogaValue get_Height();
    public void set_Height(YogaValue value);
    public YogaValue get_MaxWidth();
    public void set_MaxWidth(YogaValue value);
    public YogaValue get_MaxHeight();
    public void set_MaxHeight(YogaValue value);
    public YogaValue get_MinWidth();
    public void set_MinWidth(YogaValue value);
    public YogaValue get_MinHeight();
    public void set_MinHeight(YogaValue value);
    public float get_AspectRatio();
    public void set_AspectRatio(float value);
    public float get_LayoutX();
    public float get_LayoutY();
    public float get_LayoutRight();
    public float get_LayoutBottom();
    public float get_LayoutWidth();
    public float get_LayoutHeight();
    public YogaDirection get_LayoutDirection();
    public YogaOverflow get_Overflow();
    public void set_Overflow(YogaOverflow value);
    public object get_Data();
    public void set_Data(object value);
    public YogaNode get_Item(int index);
    public int get_Count();
    public void MarkLayoutSeen();
    public bool ValuesEqual(float f1, float f2);
    public void Insert(int index, YogaNode node);
    public void RemoveAt(int index);
    public void AddChild(YogaNode child);
    public void RemoveChild(YogaNode child);
    public void Clear();
    public int IndexOf(YogaNode node);
    public void SetMeasureFunction(MeasureFunction measureFunction);
    public void SetBaselineFunction(BaselineFunction baselineFunction);
    public void CalculateLayout(float width, float height);
    public static YogaSize MeasureInternal(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode);
    public static float BaselineInternal(YogaNode node, float width, float height);
    public string Print(YogaPrintOptions options);
    public sealed virtual IEnumerator`1<YogaNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static int GetInstanceCount();
    public YogaValue get_Left();
    public void set_Left(YogaValue value);
    public YogaValue get_Top();
    public void set_Top(YogaValue value);
    public YogaValue get_Right();
    public void set_Right(YogaValue value);
    public YogaValue get_Bottom();
    public void set_Bottom(YogaValue value);
    public YogaValue get_Start();
    public void set_Start(YogaValue value);
    public YogaValue get_End();
    public void set_End(YogaValue value);
    private void SetStylePosition(YogaEdge edge, YogaValue value);
    public YogaValue get_MarginLeft();
    public void set_MarginLeft(YogaValue value);
    public YogaValue get_MarginTop();
    public void set_MarginTop(YogaValue value);
    public YogaValue get_MarginRight();
    public void set_MarginRight(YogaValue value);
    public YogaValue get_MarginBottom();
    public void set_MarginBottom(YogaValue value);
    public YogaValue get_MarginStart();
    public void set_MarginStart(YogaValue value);
    public YogaValue get_MarginEnd();
    public void set_MarginEnd(YogaValue value);
    public YogaValue get_MarginHorizontal();
    public void set_MarginHorizontal(YogaValue value);
    public YogaValue get_MarginVertical();
    public void set_MarginVertical(YogaValue value);
    public YogaValue get_Margin();
    public void set_Margin(YogaValue value);
    private void SetStyleMargin(YogaEdge edge, YogaValue value);
    public YogaValue get_PaddingLeft();
    public void set_PaddingLeft(YogaValue value);
    public YogaValue get_PaddingTop();
    public void set_PaddingTop(YogaValue value);
    public YogaValue get_PaddingRight();
    public void set_PaddingRight(YogaValue value);
    public YogaValue get_PaddingBottom();
    public void set_PaddingBottom(YogaValue value);
    public YogaValue get_PaddingStart();
    public void set_PaddingStart(YogaValue value);
    public YogaValue get_PaddingEnd();
    public void set_PaddingEnd(YogaValue value);
    public YogaValue get_PaddingHorizontal();
    public void set_PaddingHorizontal(YogaValue value);
    public YogaValue get_PaddingVertical();
    public void set_PaddingVertical(YogaValue value);
    public YogaValue get_Padding();
    public void set_Padding(YogaValue value);
    private void SetStylePadding(YogaEdge edge, YogaValue value);
    public float get_BorderLeftWidth();
    public void set_BorderLeftWidth(float value);
    public float get_BorderTopWidth();
    public void set_BorderTopWidth(float value);
    public float get_BorderRightWidth();
    public void set_BorderRightWidth(float value);
    public float get_BorderBottomWidth();
    public void set_BorderBottomWidth(float value);
    public float get_BorderStartWidth();
    public void set_BorderStartWidth(float value);
    public float get_BorderEndWidth();
    public void set_BorderEndWidth(float value);
    public float get_BorderWidth();
    public void set_BorderWidth(float value);
    public float get_LayoutMarginLeft();
    public float get_LayoutMarginTop();
    public float get_LayoutMarginRight();
    public float get_LayoutMarginBottom();
    public float get_LayoutMarginStart();
    public float get_LayoutMarginEnd();
    public float get_LayoutPaddingLeft();
    public float get_LayoutPaddingTop();
    public float get_LayoutPaddingRight();
    public float get_LayoutPaddingBottom();
    public float get_LayoutBorderLeft();
    public float get_LayoutBorderTop();
    public float get_LayoutBorderRight();
    public float get_LayoutBorderBottom();
    public float get_LayoutPaddingStart();
    public float get_LayoutPaddingEnd();
    public float get_ComputedFlexBasis();
}
internal enum UnityEngine.Yoga.YogaNodeType : Enum {
    public int value__;
    public static YogaNodeType Default;
    public static YogaNodeType Text;
}
internal enum UnityEngine.Yoga.YogaOverflow : Enum {
    public int value__;
    public static YogaOverflow Visible;
    public static YogaOverflow Hidden;
    public static YogaOverflow Scroll;
}
internal enum UnityEngine.Yoga.YogaPositionType : Enum {
    public int value__;
    public static YogaPositionType Relative;
    public static YogaPositionType Absolute;
}
[FlagsAttribute]
internal enum UnityEngine.Yoga.YogaPrintOptions : Enum {
    public int value__;
    public static YogaPrintOptions Layout;
    public static YogaPrintOptions Style;
    public static YogaPrintOptions Children;
}
internal class UnityEngine.Yoga.YogaSize : ValueType {
    public float width;
    public float height;
}
internal enum UnityEngine.Yoga.YogaUnit : Enum {
    public int value__;
    public static YogaUnit Undefined;
    public static YogaUnit Point;
    public static YogaUnit Percent;
    public static YogaUnit Auto;
}
internal class UnityEngine.Yoga.YogaValue : ValueType {
    private float value;
    private YogaUnit unit;
    public YogaUnit Unit { get; }
    public float Value { get; }
    public YogaUnit get_Unit();
    public float get_Value();
    public static YogaValue Point(float value);
    public bool Equals(YogaValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static YogaValue Undefined();
    public static YogaValue Auto();
    public static YogaValue Percent(float value);
    public static YogaValue op_Implicit(float pointValue);
    internal static YogaValue MarshalValue(YogaValue value);
}
[ExtensionAttribute]
internal static class UnityEngine.Yoga.YogaValueExtensions : object {
    [ExtensionAttribute]
public static YogaValue Percent(float value);
    [ExtensionAttribute]
public static YogaValue Pt(float value);
    [ExtensionAttribute]
public static YogaValue Percent(int value);
    [ExtensionAttribute]
public static YogaValue Pt(int value);
}
internal enum UnityEngine.Yoga.YogaWrap : Enum {
    public int value__;
    public static YogaWrap NoWrap;
    public static YogaWrap Wrap;
    public static YogaWrap WrapReverse;
}
