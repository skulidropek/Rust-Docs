public UnityEngine.UIElements.AbstractProgressBar : BindableElement {
public string ussClassName
public string containerUssClassName
public string titleUssClassName
public string titleContainerUssClassName
public string progressUssClassName
public string backgroundUssClassName
private VisualElement m_Background
private VisualElement m_Progress
private Label m_Title
private float m_LowValue
private float m_HighValue
private float m_Value
private float k_MinVisibleProgress
public string title
public float lowValue
public float highValue
public float value
public string get_title()
public void set_title(string value)
public float get_lowValue()
public void set_lowValue(float value)
public float get_highValue()
public void set_highValue(float value)
private void OnGeometryChanged(GeometryChangedEvent e)
public float get_value()
public void set_value(float value)
public void SetValueWithoutNotify(float newValue)
private void SetProgress(float p)
private float CalculateProgressWidth(float width)
}
internal UnityEngine.UIElements.AddressMode : Enum {
public int value__
public AddressMode Wrap
public AddressMode Clamp
public AddressMode Mirror
}
public UnityEngine.UIElements.Align : Enum {
public int value__
public Align Auto
public Align FlexStart
public Align Center
public Align FlexEnd
public Align Stretch
}
internal UnityEngine.UIElements.AlignmentUtils : object {
internal float RoundToPixelGrid(float v, float pixelsPerPoint, float offset)
internal float CeilToPixelGrid(float v, float pixelsPerPoint, float offset)
internal float FloorToPixelGrid(float v, float pixelsPerPoint, float offset)
}
public UnityEngine.UIElements.AlternatingRowBackground : Enum {
public int value__
public AlternatingRowBackground None
public AlternatingRowBackground ContentOnly
public AlternatingRowBackground All
}
public UnityEngine.UIElements.Angle : ValueType {
private float m_Value
private Unit m_Unit
public float value
public AngleUnit unit
public Angle Degrees(float value)
internal Angle None()
public float get_value()
public void set_value(float value)
public AngleUnit get_unit()
public void set_unit(AngleUnit value)
internal bool IsNone()
public void .ctor(float value)
public void .ctor(float value, AngleUnit unit)
private void .ctor(float value, Unit unit)
public float ToDegrees()
public Angle op_Implicit(float value)
public bool op_Equality(Angle lhs, Angle rhs)
public bool op_Inequality(Angle lhs, Angle rhs)
public bool Equals(Angle other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.AngleUnit : Enum {
public int value__
public AngleUnit Degree
public AngleUnit Gradian
public AngleUnit Radian
public AngleUnit Turn
}
internal UnityEngine.UIElements.AtlasBase : object {
internal TextureRegistry textureRegistry
public bool TryGetAtlas(VisualElement ctx, Texture2D src, TextureId& atlas, RectInt& atlasRect)
public void ReturnAtlas(VisualElement ctx, Texture2D src, TextureId atlas)
public void Reset()
protected void OnAssignedToPanel(IPanel panel)
protected void OnRemovedFromPanel(IPanel panel)
protected void OnUpdateDynamicTextures(IPanel panel)
internal void InvokeAssignedToPanel(IPanel panel)
internal void InvokeRemovedFromPanel(IPanel panel)
internal void InvokeUpdateDynamicTextures(IPanel panel)
protected void RepaintTexturedElements(IPanel panel)
protected TextureId AllocateDynamicTexture()
protected void FreeDynamicTexture(TextureId id)
protected void SetDynamicTexture(TextureId id, Texture texture)
}
public UnityEngine.UIElements.Background : ValueType {
private Texture2D m_Texture
private Sprite m_Sprite
private RenderTexture m_RenderTexture
private VectorImage m_VectorImage
public Texture2D texture
public Sprite sprite
public RenderTexture renderTexture
public VectorImage vectorImage
public Texture2D get_texture()
public void set_texture(Texture2D value)
public Sprite get_sprite()
public void set_sprite(Sprite value)
public RenderTexture get_renderTexture()
public void set_renderTexture(RenderTexture value)
public VectorImage get_vectorImage()
public void set_vectorImage(VectorImage value)
public void .ctor(Texture2D t)
public Background FromTexture2D(Texture2D t)
public Background FromRenderTexture(RenderTexture rt)
public Background FromSprite(Sprite s)
public Background FromVectorImage(VectorImage vi)
internal Background FromObject(object obj)
public bool op_Equality(Background lhs, Background rhs)
public bool op_Inequality(Background lhs, Background rhs)
public bool Equals(Background other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.BaseBoolField : BaseField`1<bool> {
protected Label m_Label
protected VisualElement m_CheckMark
internal Clickable m_Clickable
private string m_OriginalText
public string text
public void .ctor(string label)
private void OnNavigationSubmit(NavigationSubmitEvent evt)
private void OnKeyDown(KeyDownEvent evt)
public string get_text()
public void set_text(string value)
protected void InitLabel()
public void SetValueWithoutNotify(bool newValue)
private void OnClickEvent(EventBase evt)
protected void ToggleValue()
protected void UpdateMixedValueContent()
}
public UnityEngine.UIElements.BaseField`1 : BindableElement {
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string noLabelVariantUssClassName
public string labelDraggerVariantUssClassName
public string mixedValueLabelUssClassName
public string alignedFieldUssClassName
private string inspectorFieldUssClassName
private int kIndentPerLevel
protected string mixedValueString
protected internal PropertyName serializedPropertyCopyName
private CustomStyleProperty`1<float> s_LabelWidthRatioProperty
private CustomStyleProperty`1<float> s_LabelExtraPaddingProperty
private CustomStyleProperty`1<float> s_LabelBaseMinWidthProperty
private float m_LabelWidthRatio
private float m_LabelExtraPadding
private float m_LabelBaseMinWidth
private VisualElement m_VisualInput
private TValueType m_Value
private Label <labelElement>k__BackingField
private bool m_ShowMixedValue
private Label m_MixedValueLabel
private VisualElement m_CachedInspectorElement
private int m_CachedListAndFoldoutDepth
internal VisualElement visualInput
protected TValueType rawValue
public TValueType value
public Label labelElement
public string label
public bool showMixedValue
protected Label mixedValueLabel
internal VisualElement get_visualInput()
internal void set_visualInput(VisualElement value)
protected TValueType get_rawValue()
protected void set_rawValue(TValueType value)
public TValueType get_value()
public void set_value(TValueType value)
public Label get_labelElement()
private void set_labelElement(Label value)
public string get_label()
public void set_label(string value)
public bool get_showMixedValue()
public void set_showMixedValue(bool value)
protected Label get_mixedValueLabel()
internal void .ctor(string label)
protected void .ctor(string label, VisualElement visualInput)
private void OnAttachToPanel(AttachToPanelEvent e)
private void OnCustomStyleResolved(CustomStyleResolvedEvent evt)
private void OnInspectorFieldGeometryChanged(GeometryChangedEvent e)
private void AlignLabel()
protected void UpdateMixedValueContent()
public void SetValueWithoutNotify(TValueType newValue)
internal void OnViewDataReady()
internal Rect GetTooltipRect()
}
public UnityEngine.UIElements.BaseFieldTraits`2 : UxmlTraits<TValueType> {
private TValueUxmlAttributeType m_Value
public void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc)
}
internal UnityEngine.UIElements.BaseReorderableDragAndDropController : object {
protected BaseVerticalCollectionView m_View
protected List`1<int> m_SelectedIndices
private bool <enableReordering>k__BackingField
public bool enableReordering
public void .ctor(BaseVerticalCollectionView view)
public bool get_enableReordering()
public void set_enableReordering(bool value)
public bool CanStartDrag(IEnumerable`1<int> itemIndices)
public StartDragArgs SetupDragAndDrop(IEnumerable`1<int> itemIndices, bool skipText)
public DragVisualMode HandleDragAndDrop(IListDragAndDropArgs args)
public void OnDrop(IListDragAndDropArgs args)
}
internal UnityEngine.UIElements.BaseRuntimePanel : Panel {
private GameObject m_SelectableGameObject
private int s_CurrentRuntimePanelCounter
internal int m_RuntimePanelCreationIndex
private float m_SortingPriority
private Action destroyed
private Shader m_StandardWorldSpaceShader
private bool m_DrawToCameras
internal RenderTexture targetTexture
internal Matrix4x4 panelToWorld
private int <targetDisplay>k__BackingField
internal Func`2<Vector2, Vector2> DefaultScreenToPanelSpace
private Func`2<Vector2, Vector2> m_ScreenToPanelSpace
public GameObject selectableGameObject
public float sortingPriority
internal Shader standardWorldSpaceShader
internal bool drawToCameras
internal int targetDisplay
internal int screenRenderingWidth
internal int screenRenderingHeight
public Func`2<Vector2, Vector2> screenToPanelSpace
public GameObject get_selectableGameObject()
public void set_selectableGameObject(GameObject value)
public float get_sortingPriority()
public void set_sortingPriority(float value)
public void add_destroyed(Action value)
public void remove_destroyed(Action value)
protected void .ctor(ScriptableObject ownerObject, EventDispatcher dispatcher)
protected void Dispose(bool disposing)
internal Shader get_standardWorldSpaceShader()
internal void set_standardWorldSpaceShader(Shader value)
internal bool get_drawToCameras()
internal void set_drawToCameras(bool value)
internal int get_targetDisplay()
internal void set_targetDisplay(int value)
internal int get_screenRenderingWidth()
internal int get_screenRenderingHeight()
public void Repaint(Event e)
public Func`2<Vector2, Vector2> get_screenToPanelSpace()
public void set_screenToPanelSpace(Func`2<Vector2, Vector2> value)
internal Vector2 ScreenToPanel(Vector2 screen)
internal bool ScreenToPanel(Vector2 screenPosition, Vector2 screenDelta, Vector2& panelPosition, Vector2& panelDelta, bool allowOutside)
private void AssignPanelToComponents(BaseRuntimePanel panel)
internal void PointerLeavesPanel(int pointerId, Vector2 position)
internal void PointerEntersPanel(int pointerId, Vector2 position)
}
public UnityEngine.UIElements.BaseSlider`1 : BaseField`1<TValueType> {
private VisualElement <dragContainer>k__BackingField
private VisualElement <dragElement>k__BackingField
private VisualElement <dragBorderElement>k__BackingField
private TextField <inputTextField>k__BackingField
private TValueType m_LowValue
private TValueType m_HighValue
private float m_PageSize
private bool m_ShowInputField
private bool <clamped>k__BackingField
private ClampedDragger`1<TValueType> <clampedDragger>k__BackingField
private Rect m_DragElementStartPos
private SliderDirection m_Direction
private bool m_Inverted
internal float kDefaultPageSize
internal bool kDefaultShowInputField
internal bool kDefaultInverted
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string horizontalVariantUssClassName
public string verticalVariantUssClassName
public string dragContainerUssClassName
public string trackerUssClassName
public string draggerUssClassName
public string draggerBorderUssClassName
public string textFieldClassName
internal VisualElement dragContainer
internal VisualElement dragElement
internal VisualElement dragBorderElement
internal TextField inputTextField
public TValueType lowValue
public TValueType highValue
public TValueType range
public float pageSize
public bool showInputField
internal bool clamped
internal ClampedDragger`1<TValueType> clampedDragger
public TValueType value
public SliderDirection direction
public bool inverted
internal VisualElement get_dragContainer()
private void set_dragContainer(VisualElement value)
internal VisualElement get_dragElement()
private void set_dragElement(VisualElement value)
internal VisualElement get_dragBorderElement()
private void set_dragBorderElement(VisualElement value)
internal TextField get_inputTextField()
private void set_inputTextField(TextField value)
public TValueType get_lowValue()
public void set_lowValue(TValueType value)
public TValueType get_highValue()
public void set_highValue(TValueType value)
internal void SetHighValueWithoutNotify(TValueType newHighValue)
public TValueType get_range()
public float get_pageSize()
public void set_pageSize(float value)
public bool get_showInputField()
public void set_showInputField(bool value)
internal bool get_clamped()
internal void set_clamped(bool value)
internal ClampedDragger`1<TValueType> get_clampedDragger()
private void set_clampedDragger(ClampedDragger`1<TValueType> value)
private TValueType Clamp(TValueType value, TValueType lowBound, TValueType highBound)
private TValueType GetClampedValue(TValueType newValue)
public TValueType get_value()
public void set_value(TValueType value)
public void SetValueWithoutNotify(TValueType newValue)
public SliderDirection get_direction()
public void set_direction(SliderDirection value)
public bool get_inverted()
public void set_inverted(bool value)
internal void .ctor(string label, TValueType start, TValueType end, SliderDirection direction, float pageSize)
protected float GetClosestPowerOfTen(float positiveNumber)
protected float RoundToMultipleOf(float value, float roundingValue)
private void ClampValue()
internal TValueType SliderLerpUnclamped(TValueType a, TValueType b, float interpolant)
internal float SliderNormalizeValue(TValueType currentValue, TValueType lowerValue, TValueType higherValue)
internal TValueType SliderRange()
internal TValueType ParseStringToValue(string stringValue)
internal void ComputeValueFromKey(SliderKey<TValueType> sliderKey, bool isShift)
private TValueType SliderLerpDirectionalUnclamped(TValueType a, TValueType b, float positionInterpolant)
private void SetSliderValueFromDrag()
private void ComputeValueAndDirectionFromDrag(float sliderLength, float dragElementLength, float dragElementPos)
private void SetSliderValueFromClick()
private void OnKeyDown(KeyDownEvent evt)
internal void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos)
public void AdjustDragElement(float factor)
private void UpdateDragElementPosition(GeometryChangedEvent evt)
internal void OnViewDataReady()
private bool SameValues(float a, float b, float epsilon)
private void UpdateDragElementPosition()
protected void ExecuteDefaultAction(EventBase evt)
private void UpdateTextFieldVisibility()
private void UpdateTextFieldValue()
private void OnTextFieldFocusOut(FocusOutEvent evt)
private void OnTextFieldValueChange(ChangeEvent`1<string> evt)
protected void UpdateMixedValueContent()
}
public UnityEngine.UIElements.BaseVerticalCollectionView : BindableElement {
private Action`1<object> onItemChosen
private Action`1<IEnumerable`1<object>> onItemsChosen
private Action`1<List`1<object>> onSelectionChanged
private Action`1<IEnumerable`1<object>> onSelectionChange
private Action`1<IEnumerable`1<int>> onSelectedIndicesChange
private Action`2<int, int> itemIndexChanged
private Action itemsSourceChanged
private Func`2<int, int> m_GetItemId
private Func`1<VisualElement> m_MakeItem
private Action`2<VisualElement, int> m_BindItem
private Action`2<VisualElement, int> <unbindItem>k__BackingField
private Action`1<VisualElement> <destroyItem>k__BackingField
private SelectionType m_SelectionType
private List`1<ReusableCollectionItem> k_EmptyItems
private bool m_HorizontalScrollingEnabled
private AlternatingRowBackground m_ShowAlternatingRowBackgrounds
internal int s_DefaultItemHeight
internal float m_FixedItemHeight
internal bool m_ItemHeightIsInline
private CollectionVirtualizationMethod m_VirtualizationMethod
private ScrollView m_ScrollView
private CollectionViewController m_ViewController
private CollectionVirtualizationController m_VirtualizationController
private KeyboardNavigationManipulator m_NavigationManipulator
internal Vector2 m_ScrollOffset
private List`1<int> m_SelectedIds
private List`1<int> m_SelectedIndices
private List`1<object> m_SelectedItems
private float m_LastHeight
private bool m_IsRangeSelectionDirectionUp
private ListViewDragger m_Dragger
internal float ItemHeightUnset
internal CustomStyleProperty`1<int> s_ItemHeightProperty
private Action`2<int, int> m_ItemIndexChangedCallback
private Action m_ItemsSourceChangedCallback
public string ussClassName
public string borderUssClassName
public string itemUssClassName
public string dragHoverBarUssClassName
public string itemDragHoverUssClassName
public string itemSelectedVariantUssClassName
public string itemAlternativeBackgroundUssClassName
public string listScrollViewUssClassName
internal string backgroundFillUssClassName
private Vector3 m_TouchDownPosition
internal Func`2<int, int> getItemId
public IList itemsSource
internal bool sourceIncludesArraySize
public Func`1<VisualElement> makeItem
public Action`2<VisualElement, int> bindItem
public Action`2<VisualElement, int> unbindItem
public Action`1<VisualElement> destroyItem
public VisualElement contentContainer
public SelectionType selectionType
public object selectedItem
public IEnumerable`1<object> selectedItems
public int selectedIndex
public IEnumerable`1<int> selectedIndices
internal List`1<int> currentSelectionIds
internal IEnumerable`1<ReusableCollectionItem> activeItems
internal ScrollView scrollView
internal ListViewDragger dragger
internal CollectionViewController viewController
internal CollectionVirtualizationController virtualizationController
public float resolvedItemHeight
public bool showBorder
public bool reorderable
public bool horizontalScrollingEnabled
public AlternatingRowBackground showAlternatingRowBackgrounds
public CollectionVirtualizationMethod virtualizationMethod
public int itemHeight
public float fixedItemHeight
internal float lastHeight
public void add_onItemChosen(Action`1<object> value)
public void remove_onItemChosen(Action`1<object> value)
public void add_onItemsChosen(Action`1<IEnumerable`1<object>> value)
public void remove_onItemsChosen(Action`1<IEnumerable`1<object>> value)
public void add_onSelectionChanged(Action`1<List`1<object>> value)
public void remove_onSelectionChanged(Action`1<List`1<object>> value)
public void add_onSelectionChange(Action`1<IEnumerable`1<object>> value)
public void remove_onSelectionChange(Action`1<IEnumerable`1<object>> value)
public void add_onSelectedIndicesChange(Action`1<IEnumerable`1<int>> value)
public void remove_onSelectedIndicesChange(Action`1<IEnumerable`1<int>> value)
public void add_itemIndexChanged(Action`2<int, int> value)
public void remove_itemIndexChanged(Action`2<int, int> value)
public void add_itemsSourceChanged(Action value)
public void remove_itemsSourceChanged(Action value)
internal Func`2<int, int> get_getItemId()
internal void set_getItemId(Func`2<int, int> value)
public IList get_itemsSource()
public void set_itemsSource(IList value)
internal bool get_sourceIncludesArraySize()
public Func`1<VisualElement> get_makeItem()
public void set_makeItem(Func`1<VisualElement> value)
public Action`2<VisualElement, int> get_bindItem()
public void set_bindItem(Action`2<VisualElement, int> value)
internal void SetMakeItemWithoutNotify(Func`1<VisualElement> func)
internal void SetBindItemWithoutNotify(Action`2<VisualElement, int> callback)
public Action`2<VisualElement, int> get_unbindItem()
public void set_unbindItem(Action`2<VisualElement, int> value)
public Action`1<VisualElement> get_destroyItem()
public void set_destroyItem(Action`1<VisualElement> value)
public VisualElement get_contentContainer()
public SelectionType get_selectionType()
public void set_selectionType(SelectionType value)
public object get_selectedItem()
public IEnumerable`1<object> get_selectedItems()
public int get_selectedIndex()
public void set_selectedIndex(int value)
public IEnumerable`1<int> get_selectedIndices()
internal List`1<int> get_currentSelectionIds()
internal IEnumerable`1<ReusableCollectionItem> get_activeItems()
internal ScrollView get_scrollView()
internal ListViewDragger get_dragger()
internal CollectionViewController get_viewController()
internal CollectionVirtualizationController get_virtualizationController()
public float get_resolvedItemHeight()
internal float ResolveItemHeight(float height)
public bool get_showBorder()
public void set_showBorder(bool value)
public bool get_reorderable()
public void set_reorderable(bool value)
public bool get_horizontalScrollingEnabled()
public void set_horizontalScrollingEnabled(bool value)
public AlternatingRowBackground get_showAlternatingRowBackgrounds()
public void set_showAlternatingRowBackgrounds(AlternatingRowBackground value)
public CollectionVirtualizationMethod get_virtualizationMethod()
public void set_virtualizationMethod(CollectionVirtualizationMethod value)
public int get_itemHeight()
public void set_itemHeight(int value)
public float get_fixedItemHeight()
public void set_fixedItemHeight(float value)
internal float get_lastHeight()
private protected void CreateVirtualizationController()
internal CollectionVirtualizationController GetOrCreateVirtualizationController()
internal void CreateVirtualizationController()
internal CollectionViewController GetOrCreateViewController()
private protected void CreateViewController()
internal void SetViewController(CollectionViewController controller)
internal ListViewDragger CreateDragger()
internal void InitializeDragAndDropController()
internal ICollectionDragAndDropController CreateDragAndDropController()
internal void SetDragAndDropController(ICollectionDragAndDropController dragAndDropController)
internal ICollectionDragAndDropController GetDragAndDropController()
public void .ctor(IList itemsSource, float itemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, int> bindItem)
public VisualElement GetRootElementForId(int id)
public VisualElement GetRootElementForIndex(int index)
internal bool HasValidDataAndBindings()
private void OnItemIndexChanged(int srcIndex, int dstIndex)
private void OnItemsSourceChanged()
public void RefreshItem(int index)
public void RefreshItems()
public void Refresh()
public void Rebuild()
private void RefreshSelection()
private protected void PostRefresh()
public void ScrollTo(VisualElement visualElement)
public void ScrollToItem(int index)
public void ScrollToId(int id)
private void OnScroll(Vector2 offset)
private void Resize(Vector2 size, int layoutPass)
private void OnAttachToPanel(AttachToPanelEvent evt)
private void OnDetachFromPanel(DetachFromPanelEvent evt)
public void OnKeyDown(KeyDownEvent evt)
private bool Apply(KeyboardNavigationOperation op, bool shiftKey)
private void Apply(KeyboardNavigationOperation op, EventBase sourceEvent)
private void OnPointerMove(PointerMoveEvent evt)
private void OnPointerDown(PointerDownEvent evt)
private void OnPointerCancel(PointerCancelEvent evt)
private void OnPointerUp(PointerUpEvent evt)
private void ProcessPointerDown(IPointerEvent evt)
private void ProcessPointerUp(IPointerEvent evt)
private void DoSelect(Vector2 localPosition, int clickCount, bool actionKey, bool shiftKey)
private void DoRangeSelection(int rangeSelectionFinalIndex)
private void ProcessSingleClick(int clickedIndex)
internal void SelectAll()
public void AddToSelection(int index)
internal void AddToSelection(IList`1<int> indexes)
private void AddToSelectionWithoutValidation(int index)
public void RemoveFromSelection(int index)
private void RemoveFromSelectionWithoutValidation(int index)
public void SetSelection(int index)
public void SetSelection(IEnumerable`1<int> indices)
public void SetSelectionWithoutNotify(IEnumerable`1<int> indices)
internal void SetSelectionInternal(IEnumerable`1<int> indices, bool sendNotification)
private void NotifyOfSelectionChange()
public void ClearSelection()
private void ClearSelectionWithoutValidation()
internal void OnViewDataReady()
protected void ExecuteDefaultAction(EventBase evt)
private void OnSizeChanged(GeometryChangedEvent evt)
private void OnCustomStyleResolved(CustomStyleResolvedEvent e)
private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
private void <.ctor>b__143_0(float v)
private void <Apply>g__HandleSelectionAndScroll|164_0(int index, <>c__DisplayClass164_0& )
}
internal UnityEngine.UIElements.BaseVisualElementPanel : object {
private Action`1<BaseVisualElementPanel> panelDisposed
private float m_Scale
internal YogaConfig yogaConfig
private float m_PixelsPerPoint
private PanelClearSettings <clearSettings>k__BackingField
private bool <duringLayoutPhase>k__BackingField
private RepaintData <repaintData>k__BackingField
private ICursorManager <cursorManager>k__BackingField
private ContextualMenuManager <contextualMenuManager>k__BackingField
private bool <disposed>k__BackingField
internal ElementUnderPointer m_TopElementUnderPointers
private Action standardShaderChanged
private Action standardWorldSpaceShaderChanged
private Action atlasChanged
private Action`1<Material> updateMaterial
private HierarchyEvent hierarchyChanged
private Action`1<IPanel> beforeUpdate
public EventInterests IMGUIEventInterests
public ScriptableObject ownerObject
public SavePersistentViewData saveViewData
public GetViewDataDictionary getViewDataDictionary
public int IMGUIContainersCount
public FocusController focusController
public IMGUIContainer rootIMGUIContainer
internal float scale
internal float pixelsPerPoint
public float scaledPixelsPerPoint
public PanelClearFlags clearFlags
internal PanelClearSettings clearSettings
internal bool duringLayoutPhase
internal bool isDirty
internal UInt32 version
internal UInt32 repaintVersion
internal UInt32 hierarchyVersion
internal RepaintData repaintData
internal ICursorManager cursorManager
public ContextualMenuManager contextualMenuManager
public VisualElement visualTree
public EventDispatcher dispatcher
internal IScheduler scheduler
internal IStylePropertyAnimationSystem styleAnimationSystem
public ContextType contextType
internal bool disposed
internal Shader standardShader
internal Shader standardWorldSpaceShader
public AtlasBase atlas
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
public ScriptableObject get_ownerObject()
protected void set_ownerObject(ScriptableObject value)
public SavePersistentViewData get_saveViewData()
public void set_saveViewData(SavePersistentViewData value)
public GetViewDataDictionary get_getViewDataDictionary()
public void set_getViewDataDictionary(GetViewDataDictionary value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
public FocusController get_focusController()
public void set_focusController(FocusController value)
public IMGUIContainer get_rootIMGUIContainer()
public void set_rootIMGUIContainer(IMGUIContainer value)
internal void add_panelDisposed(Action`1<BaseVisualElementPanel> value)
internal void remove_panelDisposed(Action`1<BaseVisualElementPanel> value)
public void Dispose()
protected void Dispose(bool disposing)
public void Repaint(Event e)
public void ValidateLayout()
public void UpdateAnimations()
public void UpdateBindings()
public void ApplyStyles()
internal float get_scale()
internal void set_scale(float value)
internal float get_pixelsPerPoint()
internal void set_pixelsPerPoint(float value)
public float get_scaledPixelsPerPoint()
public PanelClearFlags get_clearFlags()
public void set_clearFlags(PanelClearFlags value)
internal PanelClearSettings get_clearSettings()
internal void set_clearSettings(PanelClearSettings value)
internal bool get_duringLayoutPhase()
internal void set_duringLayoutPhase(bool value)
internal bool get_isDirty()
internal UInt32 get_version()
internal UInt32 get_repaintVersion()
internal UInt32 get_hierarchyVersion()
internal void OnVersionChanged(VisualElement ele, VersionChangeType changeTypeFlag)
internal void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase)
internal RepaintData get_repaintData()
internal void set_repaintData(RepaintData value)
internal ICursorManager get_cursorManager()
internal void set_cursorManager(ICursorManager value)
public ContextualMenuManager get_contextualMenuManager()
internal void set_contextualMenuManager(ContextualMenuManager value)
public VisualElement get_visualTree()
public EventDispatcher get_dispatcher()
public void set_dispatcher(EventDispatcher value)
internal void SendEvent(EventBase e, DispatchMode dispatchMode)
internal IScheduler get_scheduler()
internal IStylePropertyAnimationSystem get_styleAnimationSystem()
internal void set_styleAnimationSystem(IStylePropertyAnimationSystem value)
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public VisualElement Pick(Vector2 point)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
internal bool get_disposed()
private void set_disposed(bool value)
internal IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase)
internal VisualElement GetTopElementUnderPointer(int pointerId)
internal VisualElement RecomputeTopElementUnderPointer(int pointerId, Vector2 pointerPos, EventBase triggerEvent)
internal void ClearCachedElementUnderPointer(int pointerId, EventBase triggerEvent)
internal void CommitElementUnderPointers()
internal Shader get_standardShader()
internal void set_standardShader(Shader value)
internal Shader get_standardWorldSpaceShader()
internal void set_standardWorldSpaceShader(Shader value)
internal void add_standardShaderChanged(Action value)
internal void remove_standardShaderChanged(Action value)
internal void add_standardWorldSpaceShaderChanged(Action value)
internal void remove_standardWorldSpaceShaderChanged(Action value)
protected void InvokeStandardShaderChanged()
protected void InvokeStandardWorldSpaceShaderChanged()
internal void add_atlasChanged(Action value)
internal void remove_atlasChanged(Action value)
protected void InvokeAtlasChanged()
public AtlasBase get_atlas()
public void set_atlas(AtlasBase value)
internal void add_updateMaterial(Action`1<Material> value)
internal void remove_updateMaterial(Action`1<Material> value)
internal void InvokeUpdateMaterial(Material mat)
internal void add_hierarchyChanged(HierarchyEvent value)
internal void remove_hierarchyChanged(HierarchyEvent value)
internal void InvokeHierarchyChanged(VisualElement ve, HierarchyChangeType changeType)
internal void add_beforeUpdate(Action`1<IPanel> value)
internal void remove_beforeUpdate(Action`1<IPanel> value)
internal void InvokeBeforeUpdate()
internal void UpdateElementUnderPointers()
public void Update()
}
internal UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater : BaseVisualTreeUpdater {
private State m_State
private VisualElement m_CurrentChangeElement
private VisualElement m_CurrentChangeParent
protected void OnHierarchyChange(VisualElement ve, HierarchyChangeType type)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void ProcessNewChange(VisualElement ve)
private void ProcessAddOrMove(VisualElement ve)
private void ProcessRemove(VisualElement ve)
}
internal UnityEngine.UIElements.BaseVisualTreeUpdater : object {
private Action`1<BaseVisualElementPanel> panelChanged
private BaseVisualElementPanel m_Panel
public BaseVisualElementPanel panel
public VisualElement visualTree
public ProfilerMarker profilerMarker
public void add_panelChanged(Action`1<BaseVisualElementPanel> value)
public void remove_panelChanged(Action`1<BaseVisualElementPanel> value)
public BaseVisualElementPanel get_panel()
public void set_panel(BaseVisualElementPanel value)
public VisualElement get_visualTree()
public ProfilerMarker get_profilerMarker()
public void Dispose()
protected void Dispose(bool disposing)
public void Update()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
}
public UnityEngine.UIElements.BindableElement : VisualElement {
private IBinding <binding>k__BackingField
private string <bindingPath>k__BackingField
public IBinding binding
public string bindingPath
public IBinding get_binding()
public void set_binding(IBinding value)
public string get_bindingPath()
public void set_bindingPath(string value)
}
public UnityEngine.UIElements.BlurEvent : FocusEventBase`1<BlurEvent> {
protected internal void PreDispatch(IPanel panel)
}
public UnityEngine.UIElements.Box : VisualElement {
public string ussClassName
}
public UnityEngine.UIElements.Button : TextElement {
public string ussClassName
private Clickable m_Clickable
private string NonEmptyString
public Clickable clickable
public Clickable get_clickable()
public void set_clickable(Clickable value)
public void add_onClick(Action value)
public void remove_onClick(Action value)
public void add_clicked(Action value)
public void remove_clicked(Action value)
public void .ctor(Action clickEvent)
private void OnNavigationSubmit(NavigationSubmitEvent evt)
private void OnKeyDown(KeyDownEvent evt)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
}
internal UnityEngine.UIElements.ButtonStripField : BaseField`1<int> {
public string className
private string k_ButtonClass
private string k_IconClass
private string k_ButtonLeftClass
private string k_ButtonMiddleClass
private string k_ButtonRightClass
private string k_ButtonAloneClass
private List`1<Button> m_Buttons
private List`1<Button> buttons
private List`1<Button> get_buttons()
public void AddButton(string text, string name)
public void AddButton(Background icon, string name)
private Button CreateButton(string name)
private void OnButtonDetachFromPanel(DetachFromPanelEvent evt)
private void RefreshButtonsStyling()
public void .ctor(string label)
public void SetValueWithoutNotify(int newValue)
private void EnsureValueIsValid()
private void RefreshButtonsState()
}
public UnityEngine.UIElements.CallbackEventHandler : object {
private EventCallbackRegistry m_CallbackRegistry
public void RegisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public void RegisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TUserArgsType userArgs, TrickleDown useTrickleDown)
internal void RegisterCallback(EventCallback`1<TEventType> callback, InvokePolicy invokePolicy, TrickleDown useTrickleDown)
public void UnregisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public void UnregisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TrickleDown useTrickleDown)
internal bool TryGetUserArgs(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown, TCallbackArgs& userData)
public void SendEvent(EventBase e)
internal void SendEvent(EventBase e, DispatchMode dispatchMode)
internal void HandleEventAtTargetPhase(EventBase evt)
public void HandleEvent(EventBase evt)
public bool HasTrickleDownHandlers()
public bool HasBubbleUpHandlers()
protected void ExecuteDefaultActionAtTarget(EventBase evt)
protected void ExecuteDefaultAction(EventBase evt)
internal void ExecuteDefaultActionDisabledAtTarget(EventBase evt)
internal void ExecuteDefaultActionDisabled(EventBase evt)
}
internal UnityEngine.UIElements.CallbackPhase : Enum {
public int value__
public CallbackPhase TargetAndBubbleUp
public CallbackPhase TrickleDownAndTarget
}
public UnityEngine.UIElements.ChangeEvent`1 : EventBase`1<ChangeEvent`1<T>> {
private T <previousValue>k__BackingField
private T <newValue>k__BackingField
public T previousValue
public T newValue
public T get_previousValue()
protected void set_previousValue(T value)
public T get_newValue()
protected void set_newValue(T value)
protected void Init()
private void LocalInit()
public ChangeEvent`1<T> GetPooled(T previousValue, T newValue)
}
internal UnityEngine.UIElements.ClampedDragger`1 : Clickable {
private Action dragging
private DragDirection<T> <dragDirection>k__BackingField
private BaseSlider`1<T> <slider>k__BackingField
private Vector2 <startMousePosition>k__BackingField
public DragDirection<T> dragDirection
private BaseSlider`1<T> slider
public Vector2 startMousePosition
public Vector2 delta
public void add_dragging(Action value)
public void remove_dragging(Action value)
public DragDirection<T> get_dragDirection()
public void set_dragDirection(DragDirection<T> value)
private BaseSlider`1<T> get_slider()
private void set_slider(BaseSlider`1<T> value)
public Vector2 get_startMousePosition()
private void set_startMousePosition(Vector2 value)
public Vector2 get_delta()
public void .ctor(BaseSlider`1<T> slider, Action clickHandler, Action dragHandler)
protected void ProcessDownEvent(EventBase evt, Vector2 localPosition, int pointerId)
protected void ProcessMoveEvent(EventBase evt, Vector2 localPosition)
}
public UnityEngine.UIElements.Clickable : PointerManipulator {
private Action`1<EventBase> clickedWithEventInfo
private Action clicked
private long m_Delay
private long m_Interval
private bool <active>k__BackingField
private Vector2 <lastMousePosition>k__BackingField
private int m_ActivePointerId
private bool m_AcceptClicksIfDisabled
private IVisualElementScheduledItem m_Repeater
protected bool active
public Vector2 lastMousePosition
internal bool acceptClicksIfDisabled
private InvokePolicy invokePolicy
public void add_clickedWithEventInfo(Action`1<EventBase> value)
public void remove_clickedWithEventInfo(Action`1<EventBase> value)
public void add_clicked(Action value)
public void remove_clicked(Action value)
protected bool get_active()
protected void set_active(bool value)
public Vector2 get_lastMousePosition()
private void set_lastMousePosition(Vector2 value)
internal bool get_acceptClicksIfDisabled()
internal void set_acceptClicksIfDisabled(bool value)
private InvokePolicy get_invokePolicy()
public void .ctor(Action handler, long delay, long interval)
public void .ctor(Action`1<EventBase> handler)
public void .ctor(Action handler)
private void OnTimer(TimerState timerState)
private bool IsRepeatable()
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
protected void OnMouseDown(MouseDownEvent evt)
protected void OnMouseMove(MouseMoveEvent evt)
protected void OnMouseUp(MouseUpEvent evt)
private void OnMouseCaptureOut(MouseCaptureOutEvent evt)
private void OnPointerDown(PointerDownEvent evt)
private void OnPointerMove(PointerMoveEvent evt)
private void OnPointerUp(PointerUpEvent evt)
private void OnPointerCancel(PointerCancelEvent evt)
private void OnPointerCaptureOut(PointerCaptureOutEvent evt)
private bool ContainsPointer(int pointerId)
private bool IsNotMouseEvent(int pointerId)
protected void Invoke(EventBase evt)
internal void SimulateSingleClick(EventBase evt, int delayMs)
protected void ProcessDownEvent(EventBase evt, Vector2 localPosition, int pointerId)
protected void ProcessMoveEvent(EventBase evt, Vector2 localPosition)
protected void ProcessUpEvent(EventBase evt, Vector2 localPosition, int pointerId)
protected void ProcessCancelEvent(EventBase evt, int pointerId)
private void <SimulateSingleClick>b__43_0()
}
internal UnityEngine.UIElements.ClickDetector : object {
private List`1<ButtonClickStatus> m_ClickStatus
private int <s_DoubleClickTime>k__BackingField
internal int s_DoubleClickTime
internal int get_s_DoubleClickTime()
internal void set_s_DoubleClickTime(int value)
private void StartClickTracking(EventBase evt)
private void SendClickEvent(EventBase evt)
private void CancelClickTracking(EventBase evt)
public void ProcessEvent(EventBase evt)
private bool ContainsPointer(VisualElement element, Vector2 position)
internal void Cleanup(List`1<VisualElement> elements)
}
public UnityEngine.UIElements.ClickEvent : PointerEventBase`1<ClickEvent> {
protected void Init()
private void LocalInit()
internal ClickEvent GetPooled(PointerUpEvent pointerEvent, int clickCount)
}
internal UnityEngine.UIElements.Collections.DictionaryExtensions : object {
public TValue Get(IDictionary`2<TKey, TValue> dict, TKey key, TValue fallbackValue)
}
internal UnityEngine.UIElements.CollectionViewController : object {
private BaseVerticalCollectionView m_View
private IList m_ItemsSource
private Action itemsSourceChanged
private Action`2<int, int> itemIndexChanged
public IList itemsSource
protected BaseVerticalCollectionView view
public void add_itemsSourceChanged(Action value)
public void remove_itemsSourceChanged(Action value)
public void add_itemIndexChanged(Action`2<int, int> value)
public void remove_itemIndexChanged(Action`2<int, int> value)
public IList get_itemsSource()
public void set_itemsSource(IList value)
protected void SetItemsSourceWithoutNotify(IList source)
protected BaseVerticalCollectionView get_view()
public void SetView(BaseVerticalCollectionView view)
public int GetItemCount()
public int GetIndexForId(int id)
public int GetIdForIndex(int index)
public object GetItemForIndex(int index)
internal void InvokeMakeItem(ReusableCollectionItem reusableItem)
internal void InvokeBindItem(ReusableCollectionItem reusableItem, int index)
internal void InvokeUnbindItem(ReusableCollectionItem reusableItem, int index)
internal void InvokeDestroyItem(ReusableCollectionItem reusableItem)
public VisualElement MakeItem()
public void BindItem(VisualElement element, int index)
public void UnbindItem(VisualElement element, int index)
public void DestroyItem(VisualElement element)
protected void RaiseItemsSourceChanged()
protected void RaiseItemIndexChanged(int srcIndex, int dstIndex)
}
internal UnityEngine.UIElements.CollectionVirtualizationController : object {
protected ScrollView m_ScrollView
public int firstVisibleIndex
public int lastVisibleIndex
public int visibleItemCount
public IEnumerable`1<ReusableCollectionItem> activeItems
public int get_firstVisibleIndex()
public int get_lastVisibleIndex()
public int get_visibleItemCount()
protected void .ctor(ScrollView scrollView)
public void Refresh(bool rebuild)
public void ScrollToItem(int id)
public void Resize(Vector2 size, int layoutPass)
public void OnScroll(Vector2 offset)
public int GetIndexFromPosition(Vector2 position)
public float GetItemHeight(int index)
public void OnFocus(VisualElement leafTarget)
public void OnBlur(VisualElement willFocus)
public void UpdateBackground()
public IEnumerable`1<ReusableCollectionItem> get_activeItems()
public void ReplaceActiveItem(int index)
}
public UnityEngine.UIElements.CollectionVirtualizationMethod : Enum {
public int value__
public CollectionVirtualizationMethod FixedHeight
public CollectionVirtualizationMethod DynamicHeight
}
internal UnityEngine.UIElements.ColorPage : ValueType {
public bool isValid
public Color32 pageAndID
public ColorPage Init(RenderChain renderChain, BMPAlloc alloc)
}
public UnityEngine.UIElements.CommandEventBase`1 : EventBase`1<T> {
private string m_CommandName
public string commandName
public string get_commandName()
protected void set_commandName(string value)
protected void Init()
private void LocalInit()
public T GetPooled(Event systemEvent)
public T GetPooled(string commandName)
}
internal UnityEngine.UIElements.CommandEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
internal UnityEngine.UIElements.ComputedStyle : ValueType {
public StyleDataRef`1<InheritedData> inheritedData
public StyleDataRef`1<LayoutData> layoutData
public StyleDataRef`1<RareData> rareData
public StyleDataRef`1<TransformData> transformData
public StyleDataRef`1<TransitionData> transitionData
public StyleDataRef`1<VisualData> visualData
public YogaNode yogaNode
public Dictionary`2<string, StylePropertyValue> customProperties
public long matchingRulesHash
public float dpiScaling
public ComputedTransitionProperty[] computedTransitions
public int customPropertiesCount
public bool hasTransition
public Align alignContent
public Align alignItems
public Align alignSelf
public Color backgroundColor
public Background backgroundImage
public Color borderBottomColor
public Length borderBottomLeftRadius
public Length borderBottomRightRadius
public float borderBottomWidth
public Color borderLeftColor
public float borderLeftWidth
public Color borderRightColor
public float borderRightWidth
public Color borderTopColor
public Length borderTopLeftRadius
public Length borderTopRightRadius
public float borderTopWidth
public Length bottom
public Color color
public Cursor cursor
public DisplayStyle display
public Length flexBasis
public FlexDirection flexDirection
public float flexGrow
public float flexShrink
public Wrap flexWrap
public Length fontSize
public Length height
public Justify justifyContent
public Length left
public Length letterSpacing
public Length marginBottom
public Length marginLeft
public Length marginRight
public Length marginTop
public Length maxHeight
public Length maxWidth
public Length minHeight
public Length minWidth
public float opacity
public OverflowInternal overflow
public Length paddingBottom
public Length paddingLeft
public Length paddingRight
public Length paddingTop
public Position position
public Length right
public Rotate rotate
public Scale scale
public TextOverflow textOverflow
public TextShadow textShadow
public Length top
public TransformOrigin transformOrigin
public List`1<TimeValue> transitionDelay
public List`1<TimeValue> transitionDuration
public List`1<StylePropertyName> transitionProperty
public List`1<EasingFunction> transitionTimingFunction
public Translate translate
public Color unityBackgroundImageTintColor
public ScaleMode unityBackgroundScaleMode
public Font unityFont
public FontDefinition unityFontDefinition
public FontStyle unityFontStyleAndWeight
public OverflowClipBox unityOverflowClipBox
public Length unityParagraphSpacing
public int unitySliceBottom
public int unitySliceLeft
public int unitySliceRight
public int unitySliceTop
public TextAnchor unityTextAlign
public Color unityTextOutlineColor
public float unityTextOutlineWidth
public TextOverflowPosition unityTextOverflowPosition
public Visibility visibility
public WhiteSpace whiteSpace
public Length width
public Length wordSpacing
public int get_customPropertiesCount()
public bool get_hasTransition()
public ComputedStyle Create()
public void FinalizeApply(ComputedStyle& parentStyle)
public void SyncWithLayout(YogaNode targetNode)
private bool ApplyGlobalKeyword(StylePropertyReader reader, ComputedStyle& parentStyle)
private bool ApplyGlobalKeyword(StylePropertyId id, StyleKeyword keyword, ComputedStyle& parentStyle)
private void RemoveCustomStyleProperty(StylePropertyReader reader)
private void ApplyCustomStyleProperty(StylePropertyReader reader)
private void ApplyAllPropertyInitial()
private void ResetComputedTransitions()
public VersionChangeType CompareChanges(ComputedStyle& x, ComputedStyle& y)
public bool StartAnimationInlineTextShadow(VisualElement element, ComputedStyle& computedStyle, StyleTextShadow textShadow, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartAnimationInlineRotate(VisualElement element, ComputedStyle& computedStyle, StyleRotate rotate, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartAnimationInlineTranslate(VisualElement element, ComputedStyle& computedStyle, StyleTranslate translate, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartAnimationInlineScale(VisualElement element, ComputedStyle& computedStyle, StyleScale scale, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartAnimationInlineTransformOrigin(VisualElement element, ComputedStyle& computedStyle, StyleTransformOrigin transformOrigin, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public Align get_alignContent()
public Align get_alignItems()
public Align get_alignSelf()
public Color get_backgroundColor()
public Background get_backgroundImage()
public Color get_borderBottomColor()
public Length get_borderBottomLeftRadius()
public Length get_borderBottomRightRadius()
public float get_borderBottomWidth()
public Color get_borderLeftColor()
public float get_borderLeftWidth()
public Color get_borderRightColor()
public float get_borderRightWidth()
public Color get_borderTopColor()
public Length get_borderTopLeftRadius()
public Length get_borderTopRightRadius()
public float get_borderTopWidth()
public Length get_bottom()
public Color get_color()
public Cursor get_cursor()
public DisplayStyle get_display()
public Length get_flexBasis()
public FlexDirection get_flexDirection()
public float get_flexGrow()
public float get_flexShrink()
public Wrap get_flexWrap()
public Length get_fontSize()
public Length get_height()
public Justify get_justifyContent()
public Length get_left()
public Length get_letterSpacing()
public Length get_marginBottom()
public Length get_marginLeft()
public Length get_marginRight()
public Length get_marginTop()
public Length get_maxHeight()
public Length get_maxWidth()
public Length get_minHeight()
public Length get_minWidth()
public float get_opacity()
public OverflowInternal get_overflow()
public Length get_paddingBottom()
public Length get_paddingLeft()
public Length get_paddingRight()
public Length get_paddingTop()
public Position get_position()
public Length get_right()
public Rotate get_rotate()
public Scale get_scale()
public TextOverflow get_textOverflow()
public TextShadow get_textShadow()
public Length get_top()
public TransformOrigin get_transformOrigin()
public List`1<TimeValue> get_transitionDelay()
public List`1<TimeValue> get_transitionDuration()
public List`1<StylePropertyName> get_transitionProperty()
public List`1<EasingFunction> get_transitionTimingFunction()
public Translate get_translate()
public Color get_unityBackgroundImageTintColor()
public ScaleMode get_unityBackgroundScaleMode()
public Font get_unityFont()
public FontDefinition get_unityFontDefinition()
public FontStyle get_unityFontStyleAndWeight()
public OverflowClipBox get_unityOverflowClipBox()
public Length get_unityParagraphSpacing()
public int get_unitySliceBottom()
public int get_unitySliceLeft()
public int get_unitySliceRight()
public int get_unitySliceTop()
public TextAnchor get_unityTextAlign()
public Color get_unityTextOutlineColor()
public float get_unityTextOutlineWidth()
public TextOverflowPosition get_unityTextOverflowPosition()
public Visibility get_visibility()
public WhiteSpace get_whiteSpace()
public Length get_width()
public Length get_wordSpacing()
public ComputedStyle Create(ComputedStyle& parentStyle)
public ComputedStyle CreateInitial()
public ComputedStyle Acquire()
public void Release()
public void CopyFrom(ComputedStyle& other)
public void ApplyProperties(StylePropertyReader reader, ComputedStyle& parentStyle)
public void ApplyStyleValue(StyleValue sv, ComputedStyle& parentStyle)
public void ApplyStyleValueManaged(StyleValueManaged sv, ComputedStyle& parentStyle)
public void ApplyStyleCursor(Cursor cursor)
public void ApplyStyleTextShadow(TextShadow st)
public void ApplyFromComputedStyle(StylePropertyId id, ComputedStyle& other)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Length newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, float newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, int newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Color newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Background newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Font newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, FontDefinition newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, TextShadow newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Translate newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, TransformOrigin newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Rotate newValue)
public void ApplyPropertyAnimation(VisualElement ve, StylePropertyId id, Scale newValue)
public bool StartAnimation(VisualElement element, StylePropertyId id, ComputedStyle& oldStyle, ComputedStyle& newStyle, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartAnimationAllProperty(VisualElement element, ComputedStyle& oldStyle, ComputedStyle& newStyle, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartAnimationInline(VisualElement element, StylePropertyId id, ComputedStyle& computedStyle, StyleValue sv, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public void ApplyStyleTransformOrigin(TransformOrigin st)
public void ApplyStyleTranslate(Translate translateValue)
public void ApplyStyleRotate(Rotate rotateValue)
public void ApplyStyleScale(Scale scaleValue)
public void ApplyInitialValue(StylePropertyReader reader)
public void ApplyInitialValue(StylePropertyId id)
public void ApplyUnsetValue(StylePropertyReader reader, ComputedStyle& parentStyle)
public void ApplyUnsetValue(StylePropertyId id, ComputedStyle& parentStyle)
}
internal UnityEngine.UIElements.ComputedTransitionProperty : ValueType {
public StylePropertyId id
public int durationMs
public int delayMs
public Func`2<float, float> easingCurve
}
internal UnityEngine.UIElements.ComputedTransitionUtils : object {
private List`1<ComputedTransitionProperty> s_ComputedTransitionsBuffer
internal void UpdateComputedTransitions(ComputedStyle& computedStyle)
internal bool HasTransitionProperty(ComputedStyle& computedStyle, StylePropertyId id)
internal bool GetTransitionProperty(ComputedStyle& computedStyle, StylePropertyId id, ComputedTransitionProperty& result)
private ComputedTransitionProperty[] GetOrComputeTransitionPropertyData(ComputedStyle& computedStyle)
private int GetTransitionHashCode(ComputedStyle& cs)
internal bool SameTransitionProperty(ComputedStyle& x, ComputedStyle& y)
private bool SameTransitionProperty(List`1<StylePropertyName> a, List`1<StylePropertyName> b)
private bool SameTransitionProperty(List`1<TimeValue> a, List`1<TimeValue> b)
private void ComputeTransitionPropertyData(ComputedStyle& computedStyle, List`1<ComputedTransitionProperty> outData)
private T GetWrappingTransitionData(List`1<T> list, int i, T defaultValue)
private int ConvertTransitionTime(TimeValue time)
private Func`2<float, float> ConvertTransitionFunction(EasingMode mode)
}
public UnityEngine.UIElements.ContextType : Enum {
public int value__
public ContextType Player
public ContextType Editor
}
public UnityEngine.UIElements.ContextualMenuManager : object {
private bool <displayMenuHandledOSX>k__BackingField
internal bool displayMenuHandledOSX
internal bool get_displayMenuHandledOSX()
internal void set_displayMenuHandledOSX(bool value)
public void DisplayMenuIfEventMatches(EventBase evt, IEventHandler eventHandler)
public void DisplayMenu(EventBase triggerEvent, IEventHandler target)
protected internal void DoDisplayMenu(DropdownMenu menu, EventBase triggerEvent)
}
public UnityEngine.UIElements.ContextualMenuManipulator : MouseManipulator {
private Action`1<ContextualMenuPopulateEvent> m_MenuBuilder
public void .ctor(Action`1<ContextualMenuPopulateEvent> menuBuilder)
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
private void OnMouseUpDownEvent(IMouseEvent evt)
private void OnMouseDownEventOSX(MouseDownEvent evt)
private void OnMouseUpEventOSX(MouseUpEvent evt)
private void OnKeyUpEvent(KeyUpEvent evt)
private void DoDisplayMenu(EventBase evt)
private void OnContextualMenuEvent(ContextualMenuPopulateEvent evt)
}
public UnityEngine.UIElements.ContextualMenuPopulateEvent : MouseEventBase`1<ContextualMenuPopulateEvent> {
private DropdownMenu <menu>k__BackingField
private EventBase <triggerEvent>k__BackingField
private ContextualMenuManager m_ContextualMenuManager
public DropdownMenu menu
public EventBase triggerEvent
public DropdownMenu get_menu()
private void set_menu(DropdownMenu value)
public EventBase get_triggerEvent()
private void set_triggerEvent(EventBase value)
public ContextualMenuPopulateEvent GetPooled(EventBase triggerEvent, DropdownMenu menu, IEventHandler target, ContextualMenuManager menuManager)
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.CreationContext : ValueType {
public CreationContext Default
private VisualElement <target>k__BackingField
private VisualTreeAsset <visualTreeAsset>k__BackingField
private Dictionary`2<string, VisualElement> <slotInsertionPoints>k__BackingField
private List`1<AttributeOverride> <attributeOverrides>k__BackingField
public VisualElement target
public VisualTreeAsset visualTreeAsset
public Dictionary`2<string, VisualElement> slotInsertionPoints
internal List`1<AttributeOverride> attributeOverrides
public VisualElement get_target()
private void set_target(VisualElement value)
public VisualTreeAsset get_visualTreeAsset()
private void set_visualTreeAsset(VisualTreeAsset value)
public Dictionary`2<string, VisualElement> get_slotInsertionPoints()
private void set_slotInsertionPoints(Dictionary`2<string, VisualElement> value)
internal List`1<AttributeOverride> get_attributeOverrides()
private void set_attributeOverrides(List`1<AttributeOverride> value)
internal void .ctor(Dictionary`2<string, VisualElement> slotInsertionPoints, VisualTreeAsset vta, VisualElement target)
internal void .ctor(Dictionary`2<string, VisualElement> slotInsertionPoints, List`1<AttributeOverride> attributeOverrides, VisualTreeAsset vta, VisualElement target)
public bool Equals(object obj)
public bool Equals(CreationContext other)
public int GetHashCode()
public bool op_Equality(CreationContext context1, CreationContext context2)
public bool op_Inequality(CreationContext context1, CreationContext context2)
}
public UnityEngine.UIElements.Cursor : ValueType {
private Texture2D <texture>k__BackingField
private Vector2 <hotspot>k__BackingField
private int <defaultCursorId>k__BackingField
public Texture2D texture
public Vector2 hotspot
internal int defaultCursorId
public Texture2D get_texture()
public void set_texture(Texture2D value)
public Vector2 get_hotspot()
public void set_hotspot(Vector2 value)
internal int get_defaultCursorId()
internal void set_defaultCursorId(int value)
public bool Equals(object obj)
public bool Equals(Cursor other)
public int GetHashCode()
public bool op_Equality(Cursor style1, Cursor style2)
public bool op_Inequality(Cursor style1, Cursor style2)
public string ToString()
}
internal UnityEngine.UIElements.CursorManager : object {
private bool <isCursorOverriden>k__BackingField
public bool isCursorOverriden
public bool get_isCursorOverriden()
private void set_isCursorOverriden(bool value)
public void SetCursor(Cursor cursor)
public void ResetCursor()
}
internal UnityEngine.UIElements.CursorPositionStylePainterParameters : ValueType {
public Rect rect
public string text
public Font font
public int fontSize
public FontStyle fontStyle
public TextAnchor anchor
public float wordWrapWidth
public bool richText
public int cursorIndex
public CursorPositionStylePainterParameters GetDefault(VisualElement ve, string text)
internal TextNativeSettings GetTextNativeSettings(float scaling)
}
public UnityEngine.UIElements.CustomStyleProperty`1 : ValueType {
private string <name>k__BackingField
public string name
public string get_name()
private void set_name(string value)
public void .ctor(string propertyName)
public bool Equals(object obj)
public bool Equals(CustomStyleProperty`1<T> other)
public int GetHashCode()
public bool op_Equality(CustomStyleProperty`1<T> a, CustomStyleProperty`1<T> b)
public bool op_Inequality(CustomStyleProperty`1<T> a, CustomStyleProperty`1<T> b)
}
public UnityEngine.UIElements.CustomStyleResolvedEvent : EventBase`1<CustomStyleResolvedEvent> {
public ICustomStyle customStyle
public ICustomStyle get_customStyle()
}
internal UnityEngine.UIElements.DebuggerEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
public void PostDispatch(EventBase evt, IPanel panel)
}
internal UnityEngine.UIElements.DefaultDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
internal UnityEngine.UIElements.DefaultDragAndDropClient : object {
private StartDragArgs m_StartDragArgs
public object userData
public IEnumerable`1<Object> unityObjectReferences
public IDragAndDropData data
public object get_userData()
public IEnumerable`1<Object> get_unityObjectReferences()
public void StartDrag(StartDragArgs args)
public void AcceptDrag()
public void SetVisualMode(DragVisualMode visualMode)
public IDragAndDropData get_data()
public object GetGenericData(string key)
}
internal UnityEngine.UIElements.DefaultEventSystem : object {
internal Func`1<bool> IsEditorRemoteConnected
private IInput m_Input
private string m_HorizontalAxis
private string m_VerticalAxis
private string m_SubmitButton
private string m_CancelButton
private float m_InputActionsPerSecond
private float m_RepeatDelay
private bool m_SendingTouchEvents
private Event m_Event
private BaseRuntimePanel m_FocusedPanel
private int m_ConsecutiveMoveCount
private Vector2 m_LastMoveVector
private float m_PrevActionTime
private bool isAppFocused
internal IInput input
public BaseRuntimePanel focusedPanel
private bool get_isAppFocused()
internal IInput get_input()
internal void set_input(IInput value)
private IInput GetDefaultInput()
private bool ShouldIgnoreEventsOnAppNotFocused()
public BaseRuntimePanel get_focusedPanel()
public void set_focusedPanel(BaseRuntimePanel value)
public void Update(UpdateMode updateMode)
private void SendIMGUIEvents()
private void SendInputEvents()
internal void SendFocusBasedEvent(Func`2<TArg, EventBase> evtFactory, TArg arg)
internal void SendPositionBasedEvent(Vector3 mousePosition, Vector3 delta, int pointerId, Func`4<Vector3, Vector3, TArg, EventBase> evtFactory, TArg arg, bool deselectIfNoTarget)
private void SendPositionBasedEvent(Vector3 mousePosition, Vector3 delta, int pointerId, Nullable`1<int> targetDisplay, Func`4<Vector3, Vector3, TArg, EventBase> evtFactory, TArg arg, bool deselectIfNoTarget)
private void UpdateFocusedPanel(BaseRuntimePanel runtimePanel)
private EventBase MakeTouchEvent(Touch touch, EventModifiers modifiers)
private bool ProcessTouchEvents()
private Vector2 GetRawMoveVector()
private bool ShouldSendMoveFromInput()
private Vector2 GetLocalScreenPosition(Event evt, Nullable`1& targetDisplay)
}
internal UnityEngine.UIElements.DefaultGroupManager : object {
private List`1<IGroupBoxOption> m_GroupOptions
private IGroupBoxOption m_SelectedOption
public IGroupBoxOption GetSelectedOption()
public void OnOptionSelectionChanged(IGroupBoxOption selectedOption)
public void RegisterOption(IGroupBoxOption option)
public void UnregisterOption(IGroupBoxOption option)
}
internal UnityEngine.UIElements.DefaultTreeViewController`1 : TreeViewController {
private TreeData`1<T> m_TreeData
private Stack`1<IEnumerator`1<int>> m_IteratorStack
public void SetRootItems(IList`1<TreeViewItemData`1<T>> items)
public void AddItem(TreeViewItemData`1& item, int parentId, int childIndex)
public bool TryRemoveItem(int id)
public T GetDataForId(int id)
public T GetDataForIndex(int index)
public object GetItemForIndex(int index)
public int GetParentId(int id)
public bool HasChildren(int id)
private IEnumerable`1<int> GetItemIds(IEnumerable`1<TreeViewItemData`1<T>> items)
public IEnumerable`1<int> GetChildrenIds(int id)
public void Move(int id, int newParentId, int childIndex)
private bool IsChildOf(int childId, int id)
public IEnumerable`1<int> GetAllItemIds(IEnumerable`1<int> rootIds)
}
internal UnityEngine.UIElements.DispatchMode : Enum {
public int value__
public DispatchMode Default
public DispatchMode Queued
public DispatchMode Immediate
}
public UnityEngine.UIElements.DisplayStyle : Enum {
public int value__
public DisplayStyle Flex
public DisplayStyle None
}
internal UnityEngine.UIElements.DisposeHelper : object {
public void NotifyMissingDispose(IDisposable disposable)
public void NotifyDisposedUsed(IDisposable disposable)
}
internal UnityEngine.UIElements.DragAndDropPosition : Enum {
public int value__
public DragAndDropPosition OverItem
public DragAndDropPosition BetweenItems
public DragAndDropPosition OutsideItems
}
internal UnityEngine.UIElements.DragAndDropUtility : object {
private Func`1<IDragAndDrop> s_MakeClientFunc
private IDragAndDrop s_DragAndDrop
public IDragAndDrop dragAndDrop
public IDragAndDrop get_dragAndDrop()
internal void RegisterMakeClientFunc(Func`1<IDragAndDrop> makeClient)
}
internal UnityEngine.UIElements.DragEventsProcessor : object {
private bool m_IsRegistered
internal DragState m_DragState
private Vector3 m_Start
internal VisualElement m_Target
private int k_DistanceToActivation
internal DefaultDragAndDropClient dragAndDropClient
internal bool isRegistered
internal bool supportsDragEvents
internal bool useDragEvents
private bool isEditorContext
internal bool get_isRegistered()
internal bool get_supportsDragEvents()
internal bool get_useDragEvents()
private bool get_isEditorContext()
internal void .ctor(VisualElement target)
private void RegisterCallbacksFromTarget(AttachToPanelEvent evt)
private void RegisterCallbacksFromTarget()
private void UnregisterCallbacksFromTarget(DetachFromPanelEvent evt)
internal void UnregisterCallbacksFromTarget(bool unregisterPanelEvents)
protected bool CanStartDrag(Vector3 pointerPosition)
protected StartDragArgs StartDrag(Vector3 pointerPosition)
protected DragVisualMode UpdateDrag(Vector3 pointerPosition)
protected void OnDrop(Vector3 pointerPosition)
protected void ClearDragAndDropUI()
private void OnPointerDownEvent(PointerDownEvent evt)
internal void OnPointerUpEvent(PointerUpEvent evt)
private void OnPointerLeaveEvent(PointerLeaveEvent evt)
private void OnPointerCancelEvent(PointerCancelEvent evt)
private void OnPointerMoveEvent(PointerMoveEvent evt)
}
internal UnityEngine.UIElements.DragVisualMode : Enum {
public int value__
public DragVisualMode None
public DragVisualMode Copy
public DragVisualMode Move
public DragVisualMode Rejected
}
public UnityEngine.UIElements.DropdownField : BaseField`1<string> {
internal List`1<string> m_Choices
private TextElement m_TextElement
private VisualElement m_ArrowElement
internal Func`2<string, string> m_FormatSelectedValueCallback
internal Func`2<string, string> m_FormatListItemCallback
internal Func`1<IGenericMenu> createMenuCallback
private int m_Index
internal string ussClassNameBasePopupField
internal string textUssClassNameBasePopupField
internal string arrowUssClassNameBasePopupField
internal string labelUssClassNameBasePopupField
internal string inputUssClassNameBasePopupField
internal string ussClassNamePopupField
internal string labelUssClassNamePopupField
internal string inputUssClassNamePopupField
protected TextElement textElement
public string text
internal Func`2<string, string> formatSelectedValueCallback
internal Func`2<string, string> formatListItemCallback
public int index
public List`1<string> choices
public string value
protected TextElement get_textElement()
public string get_text()
internal string GetValueToDisplay()
internal string GetListItemToDisplay(string value)
internal Func`2<string, string> get_formatSelectedValueCallback()
internal void set_formatSelectedValueCallback(Func`2<string, string> value)
internal Func`2<string, string> get_formatListItemCallback()
internal void set_formatListItemCallback(Func`2<string, string> value)
public int get_index()
public void set_index(int value)
public void .ctor(string label)
public void .ctor(List`1<string> choices, string defaultValue, Func`2<string, string> formatSelectedValueCallback, Func`2<string, string> formatListItemCallback)
public void .ctor(string label, List`1<string> choices, string defaultValue, Func`2<string, string> formatSelectedValueCallback, Func`2<string, string> formatListItemCallback)
public void .ctor(List`1<string> choices, int defaultIndex, Func`2<string, string> formatSelectedValueCallback, Func`2<string, string> formatListItemCallback)
public void .ctor(string label, List`1<string> choices, int defaultIndex, Func`2<string, string> formatSelectedValueCallback, Func`2<string, string> formatListItemCallback)
internal void AddMenuItems(IGenericMenu menu)
private void ChangeValueFromMenu(string menuItem)
public List`1<string> get_choices()
public void set_choices(List`1<string> value)
public string get_value()
public void set_value(string value)
public void SetValueWithoutNotify(string newValue)
protected void ExecuteDefaultActionAtTarget(EventBase evt)
private void ShowMenu()
protected void UpdateMixedValueContent()
}
public UnityEngine.UIElements.DropdownMenu : object {
private List`1<DropdownMenuItem> m_MenuItems
private DropdownMenuEventInfo m_DropdownMenuEventInfo
public List`1<DropdownMenuItem> MenuItems()
public void AppendAction(string actionName, Action`1<DropdownMenuAction> action, Func`2<DropdownMenuAction, Status> actionStatusCallback, object userData)
public void AppendAction(string actionName, Action`1<DropdownMenuAction> action, Status status)
public void InsertAction(int atIndex, string actionName, Action`1<DropdownMenuAction> action, Func`2<DropdownMenuAction, Status> actionStatusCallback, object userData)
public void InsertAction(int atIndex, string actionName, Action`1<DropdownMenuAction> action, Status status)
public void AppendSeparator(string subMenuPath)
public void InsertSeparator(string subMenuPath, int atIndex)
public void RemoveItemAt(int index)
public void PrepareForDisplay(EventBase e)
}
public UnityEngine.UIElements.DropdownMenuAction : DropdownMenuItem {
private string <name>k__BackingField
private Status <status>k__BackingField
private DropdownMenuEventInfo <eventInfo>k__BackingField
private object <userData>k__BackingField
private Action`1<DropdownMenuAction> actionCallback
private Func`2<DropdownMenuAction, Status> actionStatusCallback
public string name
public Status status
public DropdownMenuEventInfo eventInfo
public object userData
public string get_name()
public Status get_status()
private void set_status(Status value)
public DropdownMenuEventInfo get_eventInfo()
private void set_eventInfo(DropdownMenuEventInfo value)
public object get_userData()
private void set_userData(object value)
public Status AlwaysEnabled(DropdownMenuAction a)
public Status AlwaysDisabled(DropdownMenuAction a)
public void .ctor(string actionName, Action`1<DropdownMenuAction> actionCallback, Func`2<DropdownMenuAction, Status> actionStatusCallback, object userData)
public void UpdateActionStatus(DropdownMenuEventInfo eventInfo)
public void Execute()
}
public UnityEngine.UIElements.DropdownMenuEventInfo : object {
private EventModifiers <modifiers>k__BackingField
private Vector2 <mousePosition>k__BackingField
private Vector2 <localMousePosition>k__BackingField
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
private char character
private KeyCode keyCode
public EventModifiers get_modifiers()
public Vector2 get_mousePosition()
public Vector2 get_localMousePosition()
private char get_character()
private KeyCode get_keyCode()
public void .ctor(EventBase e)
}
public UnityEngine.UIElements.DropdownMenuSeparator : DropdownMenuItem {
private string <subMenuPath>k__BackingField
public string subMenuPath
public string get_subMenuPath()
public void .ctor(string subMenuPath)
}
internal UnityEngine.UIElements.DropdownUtility : object {
internal Func`1<IGenericMenu> MakeDropdownFunc
internal IGenericMenu CreateDropdown()
}
internal UnityEngine.UIElements.DynamicAtlas : AtlasBase {
private Dictionary`2<Texture, TextureInfo> m_Database
private DynamicAtlasPage m_PointPage
private DynamicAtlasPage m_BilinearPage
private ColorSpace m_ColorSpace
private List`1<IPanel> m_Panels
private int m_MinAtlasSize
private int m_MaxAtlasSize
private int m_MaxSubTextureSize
private DynamicAtlasFilters m_ActiveFilters
private DynamicAtlasCustomFilter m_CustomFilter
internal bool isInitialized
public int minAtlasSize
public int maxAtlasSize
public DynamicAtlasFilters defaultFilters
public DynamicAtlasFilters activeFilters
public int maxSubTextureSize
public DynamicAtlasCustomFilter customFilter
internal bool get_isInitialized()
protected void OnAssignedToPanel(IPanel panel)
protected void OnRemovedFromPanel(IPanel panel)
public void Reset()
private void InitPages()
private void DestroyPages()
public bool TryGetAtlas(VisualElement ve, Texture2D src, TextureId& atlas, RectInt& atlasRect)
public void ReturnAtlas(VisualElement ve, Texture2D src, TextureId atlas)
protected void OnUpdateDynamicTextures(IPanel panel)
internal bool IsTextureFormatSupported(TextureFormat format)
public bool IsTextureValid(Texture2D texture, FilterMode atlasFilterMode)
public void SetDirty(Texture2D tex)
public int get_minAtlasSize()
public void set_minAtlasSize(int value)
public int get_maxAtlasSize()
public void set_maxAtlasSize(int value)
public DynamicAtlasFilters get_defaultFilters()
public DynamicAtlasFilters get_activeFilters()
public void set_activeFilters(DynamicAtlasFilters value)
public int get_maxSubTextureSize()
public void set_maxSubTextureSize(int value)
public DynamicAtlasCustomFilter get_customFilter()
public void set_customFilter(DynamicAtlasCustomFilter value)
}
internal UnityEngine.UIElements.DynamicAtlasCore : object {
private int m_InitialSize
private UIRAtlasAllocator m_Allocator
private Dictionary`2<Texture2D, RectInt> m_UVs
private bool m_ForceReblitAll
private FilterMode m_FilterMode
private ColorSpace m_ColorSpace
private TextureBlitter m_Blitter
private int m_2SidePadding
private int m_1SidePadding
private int m_MaxAtlasSize
private ProfilerMarker s_MarkerReset
private int <maxImageSize>k__BackingField
private RenderTextureFormat <format>k__BackingField
private int s_TextureCounter
private RenderTexture <atlas>k__BackingField
private bool <disposed>k__BackingField
public int maxImageSize
public RenderTextureFormat format
public RenderTexture atlas
protected bool disposed
public int get_maxImageSize()
public RenderTextureFormat get_format()
public RenderTexture get_atlas()
private void set_atlas(RenderTexture value)
public void .ctor(RenderTextureFormat format, FilterMode filterMode, int maxImageSize, int initialSize, int maxAtlasSize)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
private void LogDisposeError()
public bool IsReleased()
public bool TryGetRect(Texture2D image, RectInt& uvs, Func`2<Texture2D, bool> filter)
public void UpdateTexture(Texture2D image)
public bool AllocateRect(int width, int height, RectInt& uvs)
public void EnqueueBlit(Texture image, RectInt srcRect, int x, int y, bool addBorder, Color tint)
public void Commit()
private void UpdateAtlasTexture()
private RenderTexture CreateAtlasTexture()
}
public UnityEngine.UIElements.DynamicAtlasCustomFilter : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(Texture2D texture, DynamicAtlasFilters& filtersToApply)
public IAsyncResult BeginInvoke(Texture2D texture, DynamicAtlasFilters& filtersToApply, AsyncCallback callback, object object)
public bool EndInvoke(DynamicAtlasFilters& filtersToApply, IAsyncResult result)
}
public UnityEngine.UIElements.DynamicAtlasFilters : Enum {
public int value__
public DynamicAtlasFilters None
public DynamicAtlasFilters Readability
public DynamicAtlasFilters Size
public DynamicAtlasFilters Format
public DynamicAtlasFilters ColorSpace
public DynamicAtlasFilters FilterMode
}
internal UnityEngine.UIElements.DynamicAtlasFiltersInternal : Enum {
public int value__
public DynamicAtlasFiltersInternal None
public DynamicAtlasFiltersInternal Readability
public DynamicAtlasFiltersInternal Size
public DynamicAtlasFiltersInternal Format
public DynamicAtlasFiltersInternal ColorSpace
public DynamicAtlasFiltersInternal FilterMode
}
internal UnityEngine.UIElements.DynamicAtlasPage : object {
private TextureId <textureId>k__BackingField
private RenderTexture <atlas>k__BackingField
private RenderTextureFormat <format>k__BackingField
private FilterMode <filterMode>k__BackingField
private Vector2Int <minSize>k__BackingField
private Vector2Int <maxSize>k__BackingField
private int m_1Padding
private int m_2Padding
private Allocator2D m_Allocator
private TextureBlitter m_Blitter
private Vector2Int m_CurrentSize
private int s_TextureCounter
private bool <disposed>k__BackingField
public TextureId textureId
public RenderTexture atlas
public RenderTextureFormat format
public FilterMode filterMode
public Vector2Int minSize
public Vector2Int maxSize
public Vector2Int currentSize
protected bool disposed
public TextureId get_textureId()
private void set_textureId(TextureId value)
public RenderTexture get_atlas()
private void set_atlas(RenderTexture value)
public RenderTextureFormat get_format()
public FilterMode get_filterMode()
public Vector2Int get_minSize()
public Vector2Int get_maxSize()
public Vector2Int get_currentSize()
public void .ctor(RenderTextureFormat format, FilterMode filterMode, Vector2Int minSize, Vector2Int maxSize)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public bool TryAdd(Texture2D image, Alloc2D& alloc, RectInt& rect)
public void Update(Texture2D image, RectInt rect)
public void Remove(Alloc2D alloc)
public void Commit()
private void UpdateAtlasTexture()
private RenderTexture CreateAtlasTexture()
}
public UnityEngine.UIElements.DynamicAtlasSettings : object {
private int m_MinAtlasSize
private int m_MaxAtlasSize
private int m_MaxSubTextureSize
private DynamicAtlasFiltersInternal m_ActiveFilters
private DynamicAtlasCustomFilter m_CustomFilter
public int minAtlasSize
public int maxAtlasSize
public int maxSubTextureSize
public DynamicAtlasFilters activeFilters
public DynamicAtlasFilters defaultFilters
public DynamicAtlasCustomFilter customFilter
public DynamicAtlasSettings defaults
public int get_minAtlasSize()
public void set_minAtlasSize(int value)
public int get_maxAtlasSize()
public void set_maxAtlasSize(int value)
public int get_maxSubTextureSize()
public void set_maxSubTextureSize(int value)
public DynamicAtlasFilters get_activeFilters()
public void set_activeFilters(DynamicAtlasFilters value)
public DynamicAtlasFilters get_defaultFilters()
public DynamicAtlasCustomFilter get_customFilter()
public void set_customFilter(DynamicAtlasCustomFilter value)
public DynamicAtlasSettings get_defaults()
}
internal UnityEngine.UIElements.DynamicHeightVirtualizationController`1 : VerticalVirtualizationController`1<T> {
internal int InitialAverageHeight
private Dictionary`2<int, float> m_ItemHeightCache
private HashSet`1<int> m_WaitingCache
private int m_ForcedFirstVisibleItem
private int m_ForcedLastVisibleItem
private bool m_StickToBottom
private float m_AverageHeight
private float m_AccumulatedHeight
private float m_StoredPadding
private Action m_FillCallback
private Action`1<ReusableCollectionItem> m_GeometryChangedCallback
private IVisualElementScheduledItem m_ScheduledItem
private Predicate`1<int> m_IndexOutOfBoundsPredicate
public void .ctor(BaseVerticalCollectionView collectionView)
public void Refresh(bool rebuild)
public void ScrollToItem(int index)
public void Resize(Vector2 size, int layoutPass)
public void OnScroll(Vector2 scrollOffset)
private bool NeedsFill()
private void Fill()
public int GetIndexFromPosition(Vector2 position)
public float GetItemHeight(int index)
private int GetFirstVisibleItem(float offset)
private void UpdateScrollViewContainer(int index, float previousHeight, float newHeight)
private void ApplyScrollViewUpdate()
private void OnViewportGeometryChanged(GeometryChangedEvent evt)
private float GetContentHeight()
private float GetContentHeightForIndex(int lastIndex)
private void RegisterItemHeight(int index, float height)
private void UnregisterItemHeight(int index, float height)
private void OnRecycledItemGeometryChanged(ReusableCollectionItem item)
internal T GetOrMakeItem()
public void ReplaceActiveItem(int index)
internal void ReleaseItem(int activeItemsIndex)
private bool IsIndexOutOfBounds(int i)
private void <.ctor>b__13_0(VisualElement element)
}
public UnityEngine.UIElements.EasingFunction : ValueType {
private EasingMode m_Mode
public EasingMode mode
public EasingMode get_mode()
public void set_mode(EasingMode value)
public void .ctor(EasingMode mode)
public EasingFunction op_Implicit(EasingMode easingMode)
public bool op_Equality(EasingFunction lhs, EasingFunction rhs)
public bool op_Inequality(EasingFunction lhs, EasingFunction rhs)
public bool Equals(EasingFunction other)
public bool Equals(object obj)
public string ToString()
public int GetHashCode()
}
public UnityEngine.UIElements.EasingMode : Enum {
public int value__
public EasingMode Ease
public EasingMode EaseIn
public EasingMode EaseOut
public EasingMode EaseInOut
public EasingMode Linear
public EasingMode EaseInSine
public EasingMode EaseOutSine
public EasingMode EaseInOutSine
public EasingMode EaseInCubic
public EasingMode EaseOutCubic
public EasingMode EaseInOutCubic
public EasingMode EaseInCirc
public EasingMode EaseOutCirc
public EasingMode EaseInOutCirc
public EasingMode EaseInElastic
public EasingMode EaseOutElastic
public EasingMode EaseInOutElastic
public EasingMode EaseInBack
public EasingMode EaseOutBack
public EasingMode EaseInOutBack
public EasingMode EaseInBounce
public EasingMode EaseOutBounce
public EasingMode EaseInOutBounce
}
internal UnityEngine.UIElements.ElementUnderPointer : object {
private VisualElement[] m_PendingTopElementUnderPointer
private VisualElement[] m_TopElementUnderPointer
private IPointerEvent[] m_TriggerPointerEvent
private IMouseEvent[] m_TriggerMouseEvent
private Vector2[] m_PickingPointerPositions
private Boolean[] m_IsPickingPointerTemporaries
internal VisualElement GetTopElementUnderPointer(int pointerId, Vector2& pickPosition, Boolean& isTemporary)
internal VisualElement GetTopElementUnderPointer(int pointerId)
internal void SetElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, Vector2 pointerPos)
private Vector2 GetEventPointerPosition(EventBase triggerEvent)
internal void SetTemporaryElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, EventBase triggerEvent)
internal void SetElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, EventBase triggerEvent)
private void SetElementUnderPointer(VisualElement newElementUnderPointer, int pointerId, EventBase triggerEvent, bool temporary)
internal void CommitElementUnderPointers(EventDispatcher dispatcher, ContextType contextType)
}
internal UnityEngine.UIElements.EmptyStylePropertyAnimationSystem : object {
public bool StartTransition(VisualElement owner, StylePropertyId prop, float startValue, float endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Length startValue, Length endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Color startValue, Color endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartAnimationEnum(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Background startValue, Background endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, FontDefinition startValue, FontDefinition endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Font startValue, Font endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, TextShadow startValue, TextShadow endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Scale startValue, Scale endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, TransformOrigin startValue, TransformOrigin endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Translate startValue, Translate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Rotate startValue, Rotate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public void CancelAllAnimations()
public void CancelAllAnimations(VisualElement owner)
public void CancelAnimation(VisualElement owner, StylePropertyId id)
public bool HasRunningAnimation(VisualElement owner, StylePropertyId id)
public void UpdateAnimation(VisualElement owner, StylePropertyId id)
public void GetAllAnimations(VisualElement owner, List`1<StylePropertyId> propertyIds)
public void Update()
}
public UnityEngine.UIElements.EventBase : object {
private long s_LastTypeId
private ulong s_NextEventId
private long <timestamp>k__BackingField
private ulong <eventId>k__BackingField
private ulong <triggerEventId>k__BackingField
private EventPropagation <propagation>k__BackingField
private PropagationPaths m_Path
private LifeCycleStatus <lifeCycleStatus>k__BackingField
private IEventHandler <leafTarget>k__BackingField
private IEventHandler m_Target
private List`1<IEventHandler> <skipElements>k__BackingField
private PropagationPhase <propagationPhase>k__BackingField
private IEventHandler m_CurrentTarget
private Event m_ImguiEvent
private Vector2 <originalMousePosition>k__BackingField
public long eventTypeId
public long timestamp
internal ulong eventId
internal ulong triggerEventId
internal EventPropagation propagation
internal PropagationPaths path
private LifeCycleStatus lifeCycleStatus
public bool bubbles
public bool tricklesDown
internal bool skipDisabledElements
internal bool ignoreCompositeRoots
internal IEventHandler leafTarget
public IEventHandler target
internal List`1<IEventHandler> skipElements
public bool isPropagationStopped
public bool isImmediatePropagationStopped
public bool isDefaultPrevented
public PropagationPhase propagationPhase
public IEventHandler currentTarget
public bool dispatch
private bool dispatched
internal bool processed
internal bool processedByFocusController
internal bool stopDispatch
internal bool propagateToIMGUI
private bool imguiEventIsValid
public Event imguiEvent
public Vector2 originalMousePosition
protected bool pooled
protected long RegisterEventType()
public long get_eventTypeId()
public long get_timestamp()
private void set_timestamp(long value)
internal ulong get_eventId()
private void set_eventId(ulong value)
internal ulong get_triggerEventId()
private void set_triggerEventId(ulong value)
internal void SetTriggerEventId(ulong id)
internal EventPropagation get_propagation()
internal void set_propagation(EventPropagation value)
internal PropagationPaths get_path()
internal void set_path(PropagationPaths value)
private LifeCycleStatus get_lifeCycleStatus()
private void set_lifeCycleStatus(LifeCycleStatus value)
protected void PreDispatch()
protected internal void PreDispatch(IPanel panel)
protected void PostDispatch()
protected internal void PostDispatch(IPanel panel)
public bool get_bubbles()
protected void set_bubbles(bool value)
public bool get_tricklesDown()
protected void set_tricklesDown(bool value)
internal bool get_skipDisabledElements()
internal void set_skipDisabledElements(bool value)
internal bool get_ignoreCompositeRoots()
internal void set_ignoreCompositeRoots(bool value)
internal IEventHandler get_leafTarget()
private void set_leafTarget(IEventHandler value)
public IEventHandler get_target()
public void set_target(IEventHandler value)
internal List`1<IEventHandler> get_skipElements()
internal bool Skip(IEventHandler h)
public bool get_isPropagationStopped()
private void set_isPropagationStopped(bool value)
public void StopPropagation()
public bool get_isImmediatePropagationStopped()
private void set_isImmediatePropagationStopped(bool value)
public void StopImmediatePropagation()
public bool get_isDefaultPrevented()
private void set_isDefaultPrevented(bool value)
public void PreventDefault()
public PropagationPhase get_propagationPhase()
internal void set_propagationPhase(PropagationPhase value)
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
public bool get_dispatch()
internal void set_dispatch(bool value)
internal void MarkReceivedByDispatcher()
private bool get_dispatched()
private void set_dispatched(bool value)
internal bool get_processed()
private void set_processed(bool value)
internal bool get_processedByFocusController()
internal void set_processedByFocusController(bool value)
internal bool get_stopDispatch()
internal void set_stopDispatch(bool value)
internal bool get_propagateToIMGUI()
internal void set_propagateToIMGUI(bool value)
private bool get_imguiEventIsValid()
private void set_imguiEventIsValid(bool value)
public Event get_imguiEvent()
protected void set_imguiEvent(Event value)
public Vector2 get_originalMousePosition()
private void set_originalMousePosition(Vector2 value)
protected void Init()
private void LocalInit()
protected bool get_pooled()
protected void set_pooled(bool value)
internal void Acquire()
public void Dispose()
}
public UnityEngine.UIElements.EventBase`1 : EventBase {
private long s_TypeId
private ObjectPool`1<T> s_Pool
private int m_RefCount
public long eventTypeId
public long TypeId()
protected void Init()
public T GetPooled()
internal T GetPooled(EventBase e)
private void ReleasePooled(T evt)
internal void Acquire()
public void Dispose()
public long get_eventTypeId()
}
public UnityEngine.UIElements.EventCallback`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(TEventType evt)
public IAsyncResult BeginInvoke(TEventType evt, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.UIElements.EventCallback`2 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(TEventType evt, TCallbackArgs userArgs)
public IAsyncResult BeginInvoke(TEventType evt, TCallbackArgs userArgs, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.UIElements.EventCallbackFunctor`1 : EventCallbackFunctorBase {
private EventCallback`1<TEventType> m_Callback
private long m_EventTypeId
public void .ctor(EventCallback`1<TEventType> callback, CallbackPhase phase, InvokePolicy invokePolicy)
public void Invoke(EventBase evt, PropagationPhase propagationPhase)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
}
internal UnityEngine.UIElements.EventCallbackFunctor`2 : EventCallbackFunctorBase {
private EventCallback`2<TEventType, TCallbackArgs> m_Callback
private long m_EventTypeId
private TCallbackArgs <userArgs>k__BackingField
internal TCallbackArgs userArgs
internal TCallbackArgs get_userArgs()
internal void set_userArgs(TCallbackArgs value)
public void .ctor(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, CallbackPhase phase, InvokePolicy invokePolicy)
public void Invoke(EventBase evt, PropagationPhase propagationPhase)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
}
internal UnityEngine.UIElements.EventCallbackFunctorBase : object {
private CallbackPhase <phase>k__BackingField
private InvokePolicy <invokePolicy>k__BackingField
public CallbackPhase phase
public InvokePolicy invokePolicy
public CallbackPhase get_phase()
public InvokePolicy get_invokePolicy()
protected void .ctor(CallbackPhase phase, InvokePolicy invokePolicy)
public void Invoke(EventBase evt, PropagationPhase propagationPhase)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
protected bool PhaseMatches(PropagationPhase propagationPhase)
}
internal UnityEngine.UIElements.EventCallbackList : object {
private List`1<EventCallbackFunctorBase> m_List
private int <trickleDownCallbackCount>k__BackingField
private int <bubbleUpCallbackCount>k__BackingField
public int trickleDownCallbackCount
public int bubbleUpCallbackCount
public int Count
public EventCallbackFunctorBase Item
public int get_trickleDownCallbackCount()
private void set_trickleDownCallbackCount(int value)
public int get_bubbleUpCallbackCount()
private void set_bubbleUpCallbackCount(int value)
public void .ctor(EventCallbackList source)
public bool Contains(long eventTypeId, Delegate callback, CallbackPhase phase)
public EventCallbackFunctorBase Find(long eventTypeId, Delegate callback, CallbackPhase phase)
public bool Remove(long eventTypeId, Delegate callback, CallbackPhase phase)
public void Add(EventCallbackFunctorBase item)
public void AddRange(EventCallbackList list)
public int get_Count()
public EventCallbackFunctorBase get_Item(int i)
public void set_Item(int i, EventCallbackFunctorBase value)
public void Clear()
}
internal UnityEngine.UIElements.EventCallbackListPool : object {
private Stack`1<EventCallbackList> m_Stack
public EventCallbackList Get(EventCallbackList initializer)
public void Release(EventCallbackList element)
}
internal UnityEngine.UIElements.EventCallbackRegistry : object {
private EventCallbackListPool s_ListPool
private EventCallbackList m_Callbacks
private EventCallbackList m_TemporaryCallbacks
private int m_IsInvoking
private EventCallbackList GetCallbackList(EventCallbackList initializer)
private void ReleaseCallbackList(EventCallbackList toRelease)
private EventCallbackList GetCallbackListForWriting()
private EventCallbackList GetCallbackListForReading()
private bool ShouldRegisterCallback(long eventTypeId, Delegate callback, CallbackPhase phase)
private bool UnregisterCallback(long eventTypeId, Delegate callback, TrickleDown useTrickleDown)
public void RegisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown, InvokePolicy invokePolicy)
public void RegisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, TrickleDown useTrickleDown, InvokePolicy invokePolicy)
public bool UnregisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public bool UnregisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown)
internal bool TryGetUserArgs(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown, TCallbackArgs& userArgs)
public void InvokeCallbacks(EventBase evt, PropagationPhase propagationPhase)
public bool HasTrickleDownHandlers()
public bool HasBubbleHandlers()
}
internal UnityEngine.UIElements.EventDebugger : object {
private IPanel <panel>k__BackingField
private bool <isReplaying>k__BackingField
private float <playbackSpeed>k__BackingField
private bool <isPlaybackPaused>k__BackingField
private Dictionary`2<IPanel, List`1<EventDebuggerCallTrace>> m_EventCalledObjects
private Dictionary`2<IPanel, List`1<EventDebuggerDefaultActionTrace>> m_EventDefaultActionObjects
private Dictionary`2<IPanel, List`1<EventDebuggerPathTrace>> m_EventPathObjects
private Dictionary`2<IPanel, List`1<EventDebuggerTrace>> m_EventProcessedEvents
private Dictionary`2<IPanel, Stack`1<EventDebuggerTrace>> m_StackOfProcessedEvent
private Dictionary`2<IPanel, Dictionary`2<long, int>> m_EventTypeProcessedCount
private Dictionary`2<IPanel, long> m_ModificationCount
private bool m_Log
private bool <suspended>k__BackingField
public IPanel panel
public bool isReplaying
public float playbackSpeed
public bool isPlaybackPaused
public Dictionary`2<long, int> eventTypeProcessedCount
public bool suspended
public IPanel get_panel()
public void set_panel(IPanel value)
public bool get_isReplaying()
private void set_isReplaying(bool value)
public float get_playbackSpeed()
public void set_playbackSpeed(float value)
public bool get_isPlaybackPaused()
public void set_isPlaybackPaused(bool value)
public void UpdateModificationCount()
public void BeginProcessEvent(EventBase evt, IEventHandler mouseCapture)
public void EndProcessEvent(EventBase evt, long duration, IEventHandler mouseCapture)
public void LogCall(int cbHashCode, string cbName, EventBase evt, bool propagationHasStopped, bool immediatePropagationHasStopped, bool defaultHasBeenPrevented, long duration, IEventHandler mouseCapture)
public void LogIMGUICall(EventBase evt, long duration, IEventHandler mouseCapture)
public void LogExecuteDefaultAction(EventBase evt, PropagationPhase phase, long duration, IEventHandler mouseCapture)
public void LogPropagationPaths(EventBase evt, PropagationPaths paths)
private void LogPropagationPathsInternal(EventBase evt, PropagationPaths paths)
public List`1<EventDebuggerCallTrace> GetCalls(IPanel panel, EventDebuggerEventRecord evt)
public List`1<EventDebuggerDefaultActionTrace> GetDefaultActions(IPanel panel, EventDebuggerEventRecord evt)
public List`1<EventDebuggerPathTrace> GetPropagationPaths(IPanel panel, EventDebuggerEventRecord evt)
public List`1<EventDebuggerTrace> GetBeginEndProcessedEvents(IPanel panel, EventDebuggerEventRecord evt)
public long GetModificationCount(IPanel panel)
public void ClearLogs()
public void SaveReplaySessionFromSelection(string path, List`1<EventDebuggerEventRecord> eventList)
public EventDebuggerRecordList LoadReplaySession(string path)
public IEnumerator ReplayEvents(IEnumerable`1<EventDebuggerEventRecord> eventBases, Action`2<int, int> refreshList)
public void StopPlayback()
private IEnumerator DoReplayEvents(IEnumerable`1<EventDebuggerEventRecord> eventBases, Action`2<int, int> refreshList)
public Dictionary`2<string, HistogramRecord> ComputeHistogram(List`1<EventDebuggerEventRecord> eventBases)
public Dictionary`2<long, int> get_eventTypeProcessedCount()
public bool get_suspended()
public void set_suspended(bool value)
private void AddCallObject(int cbHashCode, string cbName, EventBase evt, bool propagationHasStopped, bool immediatePropagationHasStopped, bool defaultHasBeenPrevented, long duration, IEventHandler mouseCapture)
private void AddExecuteDefaultAction(EventBase evt, PropagationPhase phase, long duration, IEventHandler mouseCapture)
private void AddPropagationPaths(EventBase evt, PropagationPaths paths)
private void AddIMGUICall(EventBase evt, long duration, IEventHandler mouseCapture)
private void AddBeginProcessEvent(EventBase evt, IEventHandler mouseCapture)
private void AddEndProcessEvent(EventBase evt, long duration, IEventHandler mouseCapture)
public string GetObjectDisplayName(object obj, bool withHashCode)
public string GetTypeDisplayName(Type type)
}
internal UnityEngine.UIElements.EventDebuggerCallTrace : EventDebuggerTrace {
private int <callbackHashCode>k__BackingField
private string <callbackName>k__BackingField
private bool <propagationHasStopped>k__BackingField
private bool <immediatePropagationHasStopped>k__BackingField
private bool <defaultHasBeenPrevented>k__BackingField
public int callbackHashCode
public string callbackName
public bool propagationHasStopped
public bool immediatePropagationHasStopped
public bool defaultHasBeenPrevented
public int get_callbackHashCode()
public string get_callbackName()
public bool get_propagationHasStopped()
public bool get_immediatePropagationHasStopped()
public bool get_defaultHasBeenPrevented()
public void .ctor(IPanel panel, EventBase evt, int cbHashCode, string cbName, bool propagationHasStopped, bool immediatePropagationHasStopped, bool defaultHasBeenPrevented, long duration, IEventHandler mouseCapture)
}
internal UnityEngine.UIElements.EventDebuggerDefaultActionTrace : EventDebuggerTrace {
private PropagationPhase <phase>k__BackingField
public PropagationPhase phase
public string targetName
public PropagationPhase get_phase()
public string get_targetName()
public void .ctor(IPanel panel, EventBase evt, PropagationPhase phase, long duration, IEventHandler mouseCapture)
}
internal UnityEngine.UIElements.EventDebuggerEventRecord : object {
private string <eventBaseName>k__BackingField
private long <eventTypeId>k__BackingField
private ulong <eventId>k__BackingField
private ulong <triggerEventId>k__BackingField
private long <timestamp>k__BackingField
private IEventHandler <target>k__BackingField
private List`1<IEventHandler> <skipElements>k__BackingField
private bool <hasUnderlyingPhysicalEvent>k__BackingField
private bool <isPropagationStopped>k__BackingField
private bool <isImmediatePropagationStopped>k__BackingField
private bool <isDefaultPrevented>k__BackingField
private PropagationPhase <propagationPhase>k__BackingField
private IEventHandler <currentTarget>k__BackingField
private bool <dispatch>k__BackingField
private Vector2 <originalMousePosition>k__BackingField
private EventModifiers <modifiers>k__BackingField
private Vector2 <mousePosition>k__BackingField
private int <clickCount>k__BackingField
private int <button>k__BackingField
private int <pressedButtons>k__BackingField
private Vector3 <delta>k__BackingField
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
private string <commandName>k__BackingField
public string eventBaseName
public long eventTypeId
public ulong eventId
private ulong triggerEventId
internal long timestamp
public IEventHandler target
private List`1<IEventHandler> skipElements
public bool hasUnderlyingPhysicalEvent
private bool isPropagationStopped
private bool isImmediatePropagationStopped
private bool isDefaultPrevented
public PropagationPhase propagationPhase
private IEventHandler currentTarget
private bool dispatch
private Vector2 originalMousePosition
public EventModifiers modifiers
public Vector2 mousePosition
public int clickCount
public int button
public int pressedButtons
public Vector3 delta
public char character
public KeyCode keyCode
public string commandName
public string get_eventBaseName()
private void set_eventBaseName(string value)
public long get_eventTypeId()
private void set_eventTypeId(long value)
public ulong get_eventId()
private void set_eventId(ulong value)
private ulong get_triggerEventId()
private void set_triggerEventId(ulong value)
internal long get_timestamp()
private void set_timestamp(long value)
public IEventHandler get_target()
public void set_target(IEventHandler value)
private List`1<IEventHandler> get_skipElements()
private void set_skipElements(List`1<IEventHandler> value)
public bool get_hasUnderlyingPhysicalEvent()
private void set_hasUnderlyingPhysicalEvent(bool value)
private bool get_isPropagationStopped()
private void set_isPropagationStopped(bool value)
private bool get_isImmediatePropagationStopped()
private void set_isImmediatePropagationStopped(bool value)
private bool get_isDefaultPrevented()
private void set_isDefaultPrevented(bool value)
public PropagationPhase get_propagationPhase()
private void set_propagationPhase(PropagationPhase value)
private IEventHandler get_currentTarget()
private void set_currentTarget(IEventHandler value)
private bool get_dispatch()
private void set_dispatch(bool value)
private Vector2 get_originalMousePosition()
private void set_originalMousePosition(Vector2 value)
public EventModifiers get_modifiers()
private void set_modifiers(EventModifiers value)
public Vector2 get_mousePosition()
private void set_mousePosition(Vector2 value)
public int get_clickCount()
private void set_clickCount(int value)
public int get_button()
private void set_button(int value)
public int get_pressedButtons()
private void set_pressedButtons(int value)
public Vector3 get_delta()
private void set_delta(Vector3 value)
public char get_character()
private void set_character(char value)
public KeyCode get_keyCode()
private void set_keyCode(KeyCode value)
public string get_commandName()
private void set_commandName(string value)
private void Init(EventBase evt)
public void .ctor(EventBase evt)
public string TimestampString()
}
internal UnityEngine.UIElements.EventDebuggerLogCall : ValueType {
public void .ctor(Delegate callback, EventBase evt)
public void Dispose()
}
internal UnityEngine.UIElements.EventDebuggerLogExecuteDefaultAction : ValueType {
public void .ctor(EventBase evt)
public void Dispose()
}
internal UnityEngine.UIElements.EventDebuggerLogIMGUICall : ValueType {
public void .ctor(EventBase evt)
public void Dispose()
}
internal UnityEngine.UIElements.EventDebuggerPathTrace : EventDebuggerTrace {
private PropagationPaths <paths>k__BackingField
public PropagationPaths paths
public PropagationPaths get_paths()
public void .ctor(IPanel panel, EventBase evt, PropagationPaths paths)
}
internal UnityEngine.UIElements.EventDebuggerRecordList : object {
public List`1<EventDebuggerEventRecord> eventList
}
internal UnityEngine.UIElements.EventDebuggerTrace : object {
private EventDebuggerEventRecord <eventBase>k__BackingField
private IEventHandler <focusedElement>k__BackingField
private IEventHandler <mouseCapture>k__BackingField
private long <duration>k__BackingField
public EventDebuggerEventRecord eventBase
public IEventHandler focusedElement
public IEventHandler mouseCapture
public long duration
public EventDebuggerEventRecord get_eventBase()
public IEventHandler get_focusedElement()
public IEventHandler get_mouseCapture()
public long get_duration()
public void set_duration(long value)
public void .ctor(IPanel panel, EventBase evt, long duration, IEventHandler mouseCapture)
}
public UnityEngine.UIElements.EventDispatcher : object {
internal ClickDetector m_ClickDetector
private List`1<IEventDispatchingStrategy> m_DispatchingStrategies
private ObjectPool`1<Queue`1<EventRecord>> k_EventQueuePool
private Queue`1<EventRecord> m_Queue
private PointerDispatchState <pointerState>k__BackingField
private UInt32 m_GateCount
private Stack`1<DispatchContext> m_DispatchContexts
private IEventDispatchingStrategy[] s_EditorStrategies
private bool m_Immediate
private bool <processingEvents>k__BackingField
internal PointerDispatchState pointerState
private bool dispatchImmediately
internal bool processingEvents
internal PointerDispatchState get_pointerState()
internal EventDispatcher CreateDefault()
internal EventDispatcher CreateForRuntime(IList`1<IEventDispatchingStrategy> strategies)
private void .ctor(IList`1<IEventDispatchingStrategy> strategies)
private bool get_dispatchImmediately()
internal bool get_processingEvents()
private void set_processingEvents(bool value)
internal void Dispatch(EventBase evt, IPanel panel, DispatchMode dispatchMode)
internal void PushDispatcherContext()
internal void PopDispatcherContext()
internal void CloseGate()
internal void OpenGate()
private void ProcessEventQueue()
private void ProcessEvent(EventBase evt, IPanel panel)
private void ApplyDispatchingStrategies(EventBase evt, IPanel panel, bool imguiEventIsInitiallyUsed)
}
public UnityEngine.UIElements.EventDispatcherGate : ValueType {
private EventDispatcher m_Dispatcher
public void .ctor(EventDispatcher d)
public void Dispose()
public bool Equals(EventDispatcherGate other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(EventDispatcherGate left, EventDispatcherGate right)
public bool op_Inequality(EventDispatcherGate left, EventDispatcherGate right)
}
internal UnityEngine.UIElements.EventDispatchUtilities : object {
public void PropagateEvent(EventBase evt)
internal void PropagateToIMGUIContainer(VisualElement root, EventBase evt)
public void ExecuteDefaultAction(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.Experimental.Easing : object {
private float HalfPi
public float Step(float t)
public float Linear(float t)
public float InSine(float t)
public float OutSine(float t)
public float InOutSine(float t)
public float InQuad(float t)
public float OutQuad(float t)
public float InOutQuad(float t)
public float InCubic(float t)
public float OutCubic(float t)
public float InOutCubic(float t)
public float InPower(float t, int power)
public float OutPower(float t, int power)
public float InOutPower(float t, int power)
public float InBounce(float t)
public float OutBounce(float t)
public float InOutBounce(float t)
public float InElastic(float t)
public float OutElastic(float t)
public float InOutElastic(float t)
public float InBack(float t)
public float OutBack(float t)
public float InOutBack(float t)
public float InBack(float t, float s)
public float OutBack(float t, float s)
public float InOutBack(float t, float s)
public float InCirc(float t)
public float OutCirc(float t)
public float InOutCirc(float t)
}
public UnityEngine.UIElements.Experimental.ITransitionAnimations {
public ValueAnimation`1<float> Start(float from, float to, int durationMs, Action`2<VisualElement, float> onValueChanged)
public ValueAnimation`1<Rect> Start(Rect from, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged)
public ValueAnimation`1<Color> Start(Color from, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged)
public ValueAnimation`1<Vector3> Start(Vector3 from, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged)
public ValueAnimation`1<Vector2> Start(Vector2 from, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged)
public ValueAnimation`1<Quaternion> Start(Quaternion from, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged)
public ValueAnimation`1<StyleValues> Start(StyleValues from, StyleValues to, int durationMs)
public ValueAnimation`1<StyleValues> Start(StyleValues to, int durationMs)
public ValueAnimation`1<float> Start(Func`2<VisualElement, float> fromValueGetter, float to, int durationMs, Action`2<VisualElement, float> onValueChanged)
public ValueAnimation`1<Rect> Start(Func`2<VisualElement, Rect> fromValueGetter, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged)
public ValueAnimation`1<Color> Start(Func`2<VisualElement, Color> fromValueGetter, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged)
public ValueAnimation`1<Vector3> Start(Func`2<VisualElement, Vector3> fromValueGetter, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged)
public ValueAnimation`1<Vector2> Start(Func`2<VisualElement, Vector2> fromValueGetter, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged)
public ValueAnimation`1<Quaternion> Start(Func`2<VisualElement, Quaternion> fromValueGetter, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged)
public ValueAnimation`1<Rect> Layout(Rect to, int durationMs)
public ValueAnimation`1<Vector2> TopLeft(Vector2 to, int durationMs)
public ValueAnimation`1<Vector2> Size(Vector2 to, int durationMs)
public ValueAnimation`1<float> Scale(float to, int duration)
public ValueAnimation`1<Vector3> Position(Vector3 to, int duration)
public ValueAnimation`1<Quaternion> Rotation(Quaternion to, int duration)
}
public UnityEngine.UIElements.Experimental.IValueAnimation {
public bool isRunning
public int durationMs
public void Start()
public void Stop()
public void Recycle()
public bool get_isRunning()
public int get_durationMs()
public void set_durationMs(int value)
}
internal UnityEngine.UIElements.Experimental.IValueAnimationUpdate {
public void Tick(long currentTimeMs)
}
internal UnityEngine.UIElements.Experimental.Lerp : object {
public float Interpolate(float start, float end, float ratio)
public int Interpolate(int start, int end, float ratio)
public Rect Interpolate(Rect r1, Rect r2, float ratio)
public Color Interpolate(Color start, Color end, float ratio)
public Vector2 Interpolate(Vector2 start, Vector2 end, float ratio)
public Vector3 Interpolate(Vector3 start, Vector3 end, float ratio)
public Quaternion Interpolate(Quaternion start, Quaternion end, float ratio)
internal StyleValues Interpolate(StyleValues start, StyleValues end, float ratio)
}
public UnityEngine.UIElements.Experimental.StyleValues : ValueType {
internal StyleValueCollection m_StyleValues
public float top
public float left
public float width
public float height
public float right
public float bottom
public Color color
public Color backgroundColor
public Color unityBackgroundImageTintColor
public Color borderColor
public float marginLeft
public float marginTop
public float marginRight
public float marginBottom
public float paddingLeft
public float paddingTop
public float paddingRight
public float paddingBottom
public float borderLeftWidth
public float borderRightWidth
public float borderTopWidth
public float borderBottomWidth
public float borderTopLeftRadius
public float borderTopRightRadius
public float borderBottomLeftRadius
public float borderBottomRightRadius
public float opacity
public float flexGrow
public float flexShrink
public float get_top()
public void set_top(float value)
public float get_left()
public void set_left(float value)
public float get_width()
public void set_width(float value)
public float get_height()
public void set_height(float value)
public float get_right()
public void set_right(float value)
public float get_bottom()
public void set_bottom(float value)
public Color get_color()
public void set_color(Color value)
public Color get_backgroundColor()
public void set_backgroundColor(Color value)
public Color get_unityBackgroundImageTintColor()
public void set_unityBackgroundImageTintColor(Color value)
public Color get_borderColor()
public void set_borderColor(Color value)
public float get_marginLeft()
public void set_marginLeft(float value)
public float get_marginTop()
public void set_marginTop(float value)
public float get_marginRight()
public void set_marginRight(float value)
public float get_marginBottom()
public void set_marginBottom(float value)
public float get_paddingLeft()
public void set_paddingLeft(float value)
public float get_paddingTop()
public void set_paddingTop(float value)
public float get_paddingRight()
public void set_paddingRight(float value)
public float get_paddingBottom()
public void set_paddingBottom(float value)
public float get_borderLeftWidth()
public void set_borderLeftWidth(float value)
public float get_borderRightWidth()
public void set_borderRightWidth(float value)
public float get_borderTopWidth()
public void set_borderTopWidth(float value)
public float get_borderBottomWidth()
public void set_borderBottomWidth(float value)
public float get_borderTopLeftRadius()
public void set_borderTopLeftRadius(float value)
public float get_borderTopRightRadius()
public void set_borderTopRightRadius(float value)
public float get_borderBottomLeftRadius()
public void set_borderBottomLeftRadius(float value)
public float get_borderBottomRightRadius()
public void set_borderBottomRightRadius(float value)
public float get_opacity()
public void set_opacity(float value)
public float get_flexGrow()
public void set_flexGrow(float value)
public float get_flexShrink()
public void set_flexShrink(float value)
internal void SetValue(StylePropertyId id, float value)
internal void SetValue(StylePropertyId id, Color value)
internal StyleValueCollection Values()
}
internal UnityEngine.UIElements.Experimental.TreeView : BaseVerticalCollectionView {
public string ussClassName
public string itemUssClassName
public string itemToggleUssClassName
public string itemIndentsContainerUssClassName
public string itemIndentUssClassName
public string itemContentContainerUssClassName
private bool m_AutoExpand
private List`1<int> m_ExpandedItemIds
public IList itemsSource
internal TreeViewController viewController
public bool autoExpand
internal List`1<int> expandedItemIds
public IList get_itemsSource()
internal void set_itemsSource(IList value)
public void SetRootItems(IList`1<TreeViewItemData`1<T>> rootItems)
public IEnumerable`1<int> GetRootIds()
public int GetTreeCount()
internal TreeViewController get_viewController()
private protected void CreateVirtualizationController()
private protected void CreateViewController()
internal void SetViewController(TreeViewController controller)
private void OnItemIndexChanged(int srcIndex, int dstIndex)
internal ICollectionDragAndDropController CreateDragAndDropController()
public bool get_autoExpand()
public void set_autoExpand(bool value)
internal List`1<int> get_expandedItemIds()
internal void set_expandedItemIds(List`1<int> value)
public int GetIdForIndex(int index)
public int GetParentIdForIndex(int index)
public IEnumerable`1<int> GetChildrenIdsForIndex(int index)
public T GetItemDataForIndex(int index)
public T GetItemDataForId(int id)
public void AddItem(TreeViewItemData`1<T> item, int parentId, int childIndex)
public bool TryRemoveItem(int id)
internal void OnViewDataReady()
private void OnScrollViewKeyDown(KeyDownEvent evt)
public void SetSelectionById(int id)
public void SetSelectionById(IEnumerable`1<int> ids)
public void SetSelectionByIdWithoutNotify(IEnumerable`1<int> ids)
internal void SetSelectionInternalById(IEnumerable`1<int> ids, bool sendNotification)
internal void CopyExpandedStates(ITreeViewItem source, ITreeViewItem target)
public bool IsExpanded(int id)
public void CollapseItem(int id, bool collapseAllChildren)
public void ExpandItem(int id, bool expandAllChildren)
public void ExpandRootItems()
public void ExpandAll()
public void CollapseAll()
private void OnTreeViewMouseUp(MouseUpEvent evt)
private bool IsExpandedByIndex(int index)
private void CollapseItemByIndex(int index, bool collapseAll)
private void ExpandItemByIndex(int index, bool expandAll)
private int <SetSelectionInternalById>b__42_0(int id)
}
public UnityEngine.UIElements.Experimental.ValueAnimation`1 : object {
private int k_DefaultDurationMs
private int k_DefaultMaxPoolSize
private long m_StartTimeMs
private int m_DurationMs
private Func`2<float, float> <easingCurve>k__BackingField
private bool <isRunning>k__BackingField
private Action <onAnimationCompleted>k__BackingField
private bool <autoRecycle>k__BackingField
private bool <recycled>k__BackingField
private ObjectPool`1<ValueAnimation`1<T>> sObjectPool
private VisualElement <owner>k__BackingField
private Action`2<VisualElement, T> <valueUpdated>k__BackingField
private Func`2<VisualElement, T> <initialValue>k__BackingField
private Func`4<T, T, float, T> <interpolator>k__BackingField
private T _from
private bool fromValueSet
private T <to>k__BackingField
public int durationMs
public Func`2<float, float> easingCurve
public bool isRunning
public Action onAnimationCompleted
public bool autoRecycle
private bool recycled
private VisualElement owner
public Action`2<VisualElement, T> valueUpdated
public Func`2<VisualElement, T> initialValue
public Func`4<T, T, float, T> interpolator
public T from
public T to
public int get_durationMs()
public void set_durationMs(int value)
public Func`2<float, float> get_easingCurve()
public void set_easingCurve(Func`2<float, float> value)
public bool get_isRunning()
private void set_isRunning(bool value)
public Action get_onAnimationCompleted()
public void set_onAnimationCompleted(Action value)
public bool get_autoRecycle()
public void set_autoRecycle(bool value)
private bool get_recycled()
private void set_recycled(bool value)
private VisualElement get_owner()
private void set_owner(VisualElement value)
public Action`2<VisualElement, T> get_valueUpdated()
public void set_valueUpdated(Action`2<VisualElement, T> value)
public Func`2<VisualElement, T> get_initialValue()
public void set_initialValue(Func`2<VisualElement, T> value)
public Func`4<T, T, float, T> get_interpolator()
public void set_interpolator(Func`4<T, T, float, T> value)
public T get_from()
public void set_from(T value)
public T get_to()
public void set_to(T value)
public void Start()
public void Stop()
public void Recycle()
private void UnityEngine.UIElements.Experimental.IValueAnimationUpdate.Tick(long currentTimeMs)
private void SetDefaultValues()
private void Unregister()
private void Register()
internal void SetOwner(VisualElement e)
private void CheckNotRecycled()
public ValueAnimation`1<T> Create(VisualElement e, Func`4<T, T, float, T> interpolator)
public ValueAnimation`1<T> Ease(Func`2<float, float> easing)
public ValueAnimation`1<T> OnCompleted(Action callback)
public ValueAnimation`1<T> KeepAlive()
}
internal UnityEngine.UIElements.FixedHeightVirtualizationController`1 : VerticalVirtualizationController`1<T> {
private float resolvedItemHeight
private float get_resolvedItemHeight()
protected bool VisibleItemPredicate(T i)
public void .ctor(BaseVerticalCollectionView collectionView)
public int GetIndexFromPosition(Vector2 position)
public float GetItemHeight(int index)
public void ScrollToItem(int index)
public void Resize(Vector2 size, int layoutPass)
public void OnScroll(Vector2 scrollOffset)
internal T GetOrMakeItem()
}
public UnityEngine.UIElements.FlexDirection : Enum {
public int value__
public FlexDirection Column
public FlexDirection ColumnReverse
public FlexDirection Row
public FlexDirection RowReverse
}
public UnityEngine.UIElements.Focusable : CallbackEventHandler {
private bool <focusable>k__BackingField
private int <tabIndex>k__BackingField
private bool m_DelegatesFocus
private bool m_ExcludeFromFocusRing
internal bool isIMGUIContainer
public FocusController focusController
public bool focusable
public int tabIndex
public bool delegatesFocus
internal bool excludeFromFocusRing
public bool canGrabFocus
public FocusController get_focusController()
public bool get_focusable()
public void set_focusable(bool value)
public int get_tabIndex()
public void set_tabIndex(int value)
public bool get_delegatesFocus()
public void set_delegatesFocus(bool value)
internal bool get_excludeFromFocusRing()
internal void set_excludeFromFocusRing(bool value)
public bool get_canGrabFocus()
public void Focus()
public void Blur()
internal void BlurImmediately()
private Focusable GetFocusDelegate()
private Focusable GetFirstFocusableChild(VisualElement ve)
protected void ExecuteDefaultAction(EventBase evt)
internal void ExecuteDefaultActionDisabled(EventBase evt)
private void ProcessEvent(EventBase evt)
}
public UnityEngine.UIElements.FocusChangeDirection : object {
private FocusChangeDirection <unspecified>k__BackingField
private FocusChangeDirection <none>k__BackingField
private FocusChangeDirection <lastValue>k__BackingField
private int m_Value
public FocusChangeDirection unspecified
public FocusChangeDirection none
protected FocusChangeDirection lastValue
public FocusChangeDirection get_unspecified()
public FocusChangeDirection get_none()
protected FocusChangeDirection get_lastValue()
protected void .ctor(int value)
public int op_Implicit(FocusChangeDirection fcd)
private void System.IDisposable.Dispose()
protected void Dispose()
internal void ApplyTo(FocusController focusController, Focusable f)
}
public UnityEngine.UIElements.FocusController : object {
private IFocusRing <focusRing>k__BackingField
private List`1<FocusedElement> m_FocusedElements
private Focusable m_LastFocusedElement
private Focusable m_LastPendingFocusedElement
private int m_PendingFocusCount
private int <imguiKeyboardControl>k__BackingField
private IFocusRing focusRing
public Focusable focusedElement
internal int imguiKeyboardControl
public void .ctor(IFocusRing focusRing)
private IFocusRing get_focusRing()
public Focusable get_focusedElement()
internal bool IsFocused(Focusable f)
internal Focusable GetRetargetedFocusedElement(VisualElement retargetAgainst)
internal Focusable GetLeafFocusedElement()
private bool IsLocalElement(Focusable f)
internal void ClearPendingFocusEvents()
internal bool IsPendingFocus(Focusable f)
internal void SetFocusToLastFocusedElement()
internal void BlurLastFocusedElement()
internal void DoFocusChange(Focusable f)
internal Focusable FocusNextInDirection(FocusChangeDirection direction)
private void AboutToReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction, DispatchMode dispatchMode)
private void ReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction, DispatchMode dispatchMode)
private void AboutToGrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction, DispatchMode dispatchMode)
private void GrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction, bool bIsFocusDelegated, DispatchMode dispatchMode)
internal void Blur(Focusable focusable, bool bIsFocusDelegated, DispatchMode dispatchMode)
internal void SwitchFocus(Focusable newFocusedElement, bool bIsFocusDelegated, DispatchMode dispatchMode)
internal void SwitchFocus(Focusable newFocusedElement, FocusChangeDirection direction, bool bIsFocusDelegated, DispatchMode dispatchMode)
internal Focusable SwitchFocusOnEvent(EventBase e)
internal void ReevaluateFocus()
internal bool GetFocusableParentForPointerEvent(Focusable target, Focusable& effectiveTarget)
internal int get_imguiKeyboardControl()
internal void set_imguiKeyboardControl(int value)
internal void SyncIMGUIFocus(int imguiKeyboardControlID, Focusable imguiContainerHavingKeyboardControl, bool forceSwitch)
}
public UnityEngine.UIElements.FocusEvent : FocusEventBase`1<FocusEvent> {
protected internal void PreDispatch(IPanel panel)
}
public UnityEngine.UIElements.FocusEventBase`1 : EventBase`1<T> {
private Focusable <relatedTarget>k__BackingField
private FocusChangeDirection <direction>k__BackingField
private FocusController <focusController>k__BackingField
private bool <IsFocusDelegated>k__BackingField
public Focusable relatedTarget
public FocusChangeDirection direction
protected FocusController focusController
internal bool IsFocusDelegated
public Focusable get_relatedTarget()
private void set_relatedTarget(Focusable value)
public FocusChangeDirection get_direction()
private void set_direction(FocusChangeDirection value)
protected FocusController get_focusController()
private void set_focusController(FocusController value)
internal bool get_IsFocusDelegated()
private void set_IsFocusDelegated(bool value)
protected void Init()
private void LocalInit()
public T GetPooled(IEventHandler target, Focusable relatedTarget, FocusChangeDirection direction, FocusController focusController, bool bIsFocusDelegated)
}
public UnityEngine.UIElements.FocusInEvent : FocusEventBase`1<FocusInEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.FocusOutEvent : FocusEventBase`1<FocusOutEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.Foldout : BindableElement {
private Toggle m_Toggle
private VisualElement m_Container
private bool m_Value
public string ussClassName
public string toggleUssClassName
public string contentUssClassName
public string inputUssClassName
public string checkmarkUssClassName
public string textUssClassName
internal string ussFoldoutDepthClassName
internal int ussFoldoutMaxDepth
public VisualElement contentContainer
public string text
public bool value
public VisualElement get_contentContainer()
public string get_text()
public void set_text(string value)
public bool get_value()
public void set_value(bool value)
public void SetValueWithoutNotify(bool newValue)
internal void OnViewDataReady()
private void OnAttachToPanel(AttachToPanelEvent evt)
private void <.ctor>b__23_0(ChangeEvent`1<bool> evt)
}
public UnityEngine.UIElements.FontDefinition : ValueType {
private Font m_Font
private FontAsset m_FontAsset
public Font font
public FontAsset fontAsset
public Font get_font()
public void set_font(Font value)
public FontAsset get_fontAsset()
public void set_fontAsset(FontAsset value)
public FontDefinition FromFont(Font f)
public FontDefinition FromSDFFont(FontAsset f)
internal FontDefinition FromObject(object obj)
internal bool IsEmpty()
public string ToString()
public bool Equals(FontDefinition other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(FontDefinition left, FontDefinition right)
public bool op_Inequality(FontDefinition left, FontDefinition right)
}
public UnityEngine.UIElements.GenericDropdownMenu : object {
public string ussClassName
public string itemUssClassName
public string labelUssClassName
public string containerInnerUssClassName
public string containerOuterUssClassName
public string checkmarkUssClassName
public string separatorUssClassName
private List`1<MenuItem> m_Items
private VisualElement m_MenuContainer
private VisualElement m_OuterContainer
private ScrollView m_ScrollView
private VisualElement m_PanelRootVisualContainer
private VisualElement m_TargetElement
private Rect m_DesiredRect
private KeyboardNavigationManipulator m_NavigationManipulator
private Vector2 m_MousePosition
internal List`1<MenuItem> items
internal VisualElement menuContainer
public VisualElement contentContainer
internal List`1<MenuItem> get_items()
internal VisualElement get_menuContainer()
public VisualElement get_contentContainer()
private void OnAttachToPanel(AttachToPanelEvent evt)
private void OnDetachFromPanel(DetachFromPanelEvent evt)
private void Hide()
private void Apply(KeyboardNavigationOperation op, EventBase sourceEvent)
private bool Apply(KeyboardNavigationOperation op)
private void OnPointerDown(PointerDownEvent evt)
private void OnPointerMove(PointerMoveEvent evt)
private void OnPointerUp(PointerUpEvent evt)
private void OnFocusOut(FocusOutEvent evt)
private void OnParentResized(GeometryChangedEvent evt)
private void UpdateSelection(VisualElement target)
private void ChangeSelectedIndex(int newIndex, int previousIndex)
private int GetSelectedIndex()
public void AddItem(string itemName, bool isChecked, Action action)
public void AddItem(string itemName, bool isChecked, Action`1<object> action, object data)
public void AddDisabledItem(string itemName, bool isChecked)
public void AddSeparator(string path)
private MenuItem AddItem(string itemName, bool isChecked, bool isEnabled, object data)
public void DropDown(Rect position, VisualElement targetElement, bool anchored)
private void OnTargetElementDetachFromPanel(DetachFromPanelEvent evt)
private void OnContainerGeometryChanged(GeometryChangedEvent evt)
private void EnsureVisibilityInParent()
private void <Apply>g__UpdateSelectionDown|27_0(int newIndex, <>c__DisplayClass27_0& )
private void <Apply>g__UpdateSelectionUp|27_1(int newIndex, <>c__DisplayClass27_0& )
}
public UnityEngine.UIElements.GeometryChangedEvent : EventBase`1<GeometryChangedEvent> {
private Rect <oldRect>k__BackingField
private Rect <newRect>k__BackingField
private int <layoutPass>k__BackingField
public Rect oldRect
public Rect newRect
internal int layoutPass
public GeometryChangedEvent GetPooled(Rect oldRect, Rect newRect)
protected void Init()
private void LocalInit()
public Rect get_oldRect()
private void set_oldRect(Rect value)
public Rect get_newRect()
private void set_newRect(Rect value)
internal int get_layoutPass()
internal void set_layoutPass(int value)
}
internal UnityEngine.UIElements.GetViewDataDictionary : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ISerializableJsonDictionary Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public ISerializableJsonDictionary EndInvoke(IAsyncResult result)
}
internal UnityEngine.UIElements.GradientSettings : ValueType {
public GradientType gradientType
public AddressMode addressMode
public Vector2 radialFocus
public RectInt location
}
internal UnityEngine.UIElements.GradientType : Enum {
public int value__
public GradientType Linear
public GradientType Radial
}
public UnityEngine.UIElements.GroupBox : BindableElement {
public string ussClassName
public string labelUssClassName
private Label m_TitleLabel
public string text
public string get_text()
public void set_text(string value)
public void .ctor(string text)
}
internal UnityEngine.UIElements.GroupBoxUtility : object {
private Dictionary`2<IGroupBox, IGroupManager> s_GroupManagers
private Dictionary`2<IGroupBoxOption, IGroupManager> s_GroupOptionManagerCache
private Type k_GenericGroupBoxType
public void RegisterGroupBoxOptionCallbacks(T option)
public void OnOptionSelected(T selectedOption)
public IGroupBoxOption GetSelectedOption(IGroupBox groupBox)
public IGroupManager GetGroupManager(IGroupBox groupBox)
private void OnOptionAttachToPanel(AttachToPanelEvent evt)
private void OnOptionDetachFromPanel(DetachFromPanelEvent evt)
private IGroupManager FindOrCreateGroupManager(IGroupBox groupBox)
private void OnGroupBoxDetachedFromPanel(DetachFromPanelEvent evt)
private void OnPanelDestroyed(BaseVisualElementPanel panel)
}
public UnityEngine.UIElements.HelpBox : VisualElement {
public string ussClassName
public string labelUssClassName
public string iconUssClassName
public string iconInfoUssClassName
public string iconwarningUssClassName
public string iconErrorUssClassName
private HelpBoxMessageType m_HelpBoxMessageType
private VisualElement m_Icon
private string m_IconClass
private Label m_Label
public string text
public HelpBoxMessageType messageType
public string get_text()
public void set_text(string value)
public HelpBoxMessageType get_messageType()
public void set_messageType(HelpBoxMessageType value)
public void .ctor(string text, HelpBoxMessageType messageType)
private string GetIconClass(HelpBoxMessageType messageType)
private void UpdateIcon(HelpBoxMessageType messageType)
}
public UnityEngine.UIElements.HelpBoxMessageType : Enum {
public int value__
public HelpBoxMessageType None
public HelpBoxMessageType Info
public HelpBoxMessageType Warning
public HelpBoxMessageType Error
}
internal UnityEngine.UIElements.HierarchyChangeType : Enum {
public int value__
public HierarchyChangeType Add
public HierarchyChangeType Remove
public HierarchyChangeType Move
}
internal UnityEngine.UIElements.HierarchyEvent : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(VisualElement ve, HierarchyChangeType changeType)
public IAsyncResult BeginInvoke(VisualElement ve, HierarchyChangeType changeType, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.UIElements.IBindable {
public IBinding binding
public string bindingPath
public IBinding get_binding()
public void set_binding(IBinding value)
public string get_bindingPath()
public void set_bindingPath(string value)
}
public UnityEngine.UIElements.IBinding {
public void PreUpdate()
public void Update()
public void Release()
}
public UnityEngine.UIElements.IBindingExtensions : object {
public bool IsBound(IBindable control)
}
internal UnityEngine.UIElements.IBindingRequest {
public void Bind(VisualElement element)
public void Release()
}
public UnityEngine.UIElements.ICommandEvent {
public string commandName
public string get_commandName()
}
internal UnityEngine.UIElements.ICursorManager {
public void SetCursor(Cursor cursor)
public void ResetCursor()
}
public UnityEngine.UIElements.ICustomStyle {
public bool TryGetValue(CustomStyleProperty`1<float> property, Single& value)
public bool TryGetValue(CustomStyleProperty`1<int> property, Int32& value)
public bool TryGetValue(CustomStyleProperty`1<bool> property, Boolean& value)
public bool TryGetValue(CustomStyleProperty`1<Color> property, Color& value)
public bool TryGetValue(CustomStyleProperty`1<Texture2D> property, Texture2D& value)
public bool TryGetValue(CustomStyleProperty`1<Sprite> property, Sprite& value)
public bool TryGetValue(CustomStyleProperty`1<VectorImage> property, VectorImage& value)
public bool TryGetValue(CustomStyleProperty`1<T> property, T& value)
public bool TryGetValue(CustomStyleProperty`1<string> property, String& value)
}
internal UnityEngine.UIElements.IDataWatchHandle {
public Object watched
public bool disposed
public Object get_watched()
public bool get_disposed()
}
internal UnityEngine.UIElements.IDataWatchService {
public IDataWatchHandle AddWatch(Object watched, Action`1<Object> onDataChanged)
public void RemoveWatch(IDataWatchHandle handle)
public void ForceDirtyNextPoll(Object obj)
}
internal UnityEngine.UIElements.IDragAndDrop {
public IDragAndDropData data
public void StartDrag(StartDragArgs args)
public void AcceptDrag()
public void SetVisualMode(DragVisualMode visualMode)
public IDragAndDropData get_data()
}
internal UnityEngine.UIElements.IDragAndDropController`1 {
public bool CanStartDrag(IEnumerable`1<int> itemIndices)
public StartDragArgs SetupDragAndDrop(IEnumerable`1<int> itemIndices, bool skipText)
public DragVisualMode HandleDragAndDrop(TArgs args)
public void OnDrop(TArgs args)
}
internal UnityEngine.UIElements.IDragAndDropData {
public object userData
public IEnumerable`1<Object> unityObjectReferences
public object GetGenericData(string key)
public object get_userData()
public IEnumerable`1<Object> get_unityObjectReferences()
}
internal UnityEngine.UIElements.IEventDispatchingStrategy {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.IEventHandler {
public void SendEvent(EventBase e)
public void HandleEvent(EventBase evt)
public bool HasTrickleDownHandlers()
public bool HasBubbleUpHandlers()
}
public UnityEngine.UIElements.IExperimentalFeatures {
public ITransitionAnimations animation
public ITransitionAnimations get_animation()
}
public UnityEngine.UIElements.IFocusEvent {
public Focusable relatedTarget
public FocusChangeDirection direction
public Focusable get_relatedTarget()
public FocusChangeDirection get_direction()
}
public UnityEngine.UIElements.IFocusRing {
public FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e)
public Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction)
}
internal UnityEngine.UIElements.IGenericMenu {
public void AddItem(string itemName, bool isChecked, Action action)
public void AddItem(string itemName, bool isChecked, Action`1<object> action, object data)
public void AddDisabledItem(string itemName, bool isChecked)
public void AddSeparator(string path)
public void DropDown(Rect position, VisualElement targetElement, bool anchored)
}
internal UnityEngine.UIElements.IGroupBoxOption {
public void SetSelected(bool selected)
}
internal UnityEngine.UIElements.IGroupManager {
public IGroupBoxOption GetSelectedOption()
public void OnOptionSelectionChanged(IGroupBoxOption selectedOption)
public void RegisterOption(IGroupBoxOption option)
public void UnregisterOption(IGroupBoxOption option)
}
public UnityEngine.UIElements.IKeyboardEvent {
public EventModifiers modifiers
public char character
public KeyCode keyCode
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public EventModifiers get_modifiers()
public char get_character()
public KeyCode get_keyCode()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
}
internal UnityEngine.UIElements.IListDragAndDropArgs {
public object target
public int insertAtIndex
public IDragAndDropData dragAndDropData
public DragAndDropPosition dragAndDropPosition
public object get_target()
public int get_insertAtIndex()
public IDragAndDropData get_dragAndDropData()
public DragAndDropPosition get_dragAndDropPosition()
}
internal UnityEngine.UIElements.ILiveReloadAssetTracker`1 {
public int StartTrackingAsset(T asset)
public void StopTrackingAsset(T asset)
public bool IsTrackingAsset(T asset)
public bool IsTrackingAssets()
public bool CheckTrackedAssetsDirty()
public void UpdateAssetTrackerCounts(T asset, int newDirtyCount, int newElementCount, int newInlinePropertiesCount, int newAttributePropertiesDirtyCount)
public void OnAssetsImported(HashSet`1<T> changedAssets, HashSet`1<string> deletedAssets)
public void OnTrackedAssetChanged()
}
public UnityEngine.UIElements.Image : VisualElement {
private ScaleMode m_ScaleMode
private Texture m_Image
private Sprite m_Sprite
private VectorImage m_VectorImage
private Rect m_UV
private Color m_TintColor
private bool m_ImageIsInline
private bool m_ScaleModeIsInline
private bool m_TintColorIsInline
public string ussClassName
private CustomStyleProperty`1<Texture2D> s_ImageProperty
private CustomStyleProperty`1<Sprite> s_SpriteProperty
private CustomStyleProperty`1<VectorImage> s_VectorImageProperty
private CustomStyleProperty`1<string> s_ScaleModeProperty
private CustomStyleProperty`1<Color> s_TintColorProperty
public Texture image
public Sprite sprite
public VectorImage vectorImage
public Rect sourceRect
public Rect uv
public ScaleMode scaleMode
public Color tintColor
public Texture get_image()
public void set_image(Texture value)
public Sprite get_sprite()
public void set_sprite(Sprite value)
public VectorImage get_vectorImage()
public void set_vectorImage(VectorImage value)
public Rect get_sourceRect()
public void set_sourceRect(Rect value)
public Rect get_uv()
public void set_uv(Rect value)
public ScaleMode get_scaleMode()
public void set_scaleMode(ScaleMode value)
public Color get_tintColor()
public void set_tintColor(Color value)
private Vector2 GetTextureDisplaySize(Texture texture)
private Vector2 GetTextureDisplaySize(Sprite sprite)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
private void OnGenerateVisualContent(MeshGenerationContext mgc)
private void OnCustomStyleResolved(CustomStyleResolvedEvent e)
private void SetScaleMode(ScaleMode mode)
private void CalculateUV(Rect srcRect)
private Rect GetSourceRect()
}
public UnityEngine.UIElements.IManipulator {
public VisualElement target
public VisualElement get_target()
public void set_target(VisualElement value)
}
public UnityEngine.UIElements.IMGUIContainer : VisualElement {
private Action m_OnGUIHandler
private ObjectGUIState m_ObjectGUIState
internal bool useOwnerObjectGUIState
private Rect <lastWorldClip>k__BackingField
private bool m_CullingEnabled
private bool m_IsFocusDelegated
private bool m_RefreshCachedLayout
private LayoutCache m_Cache
private Rect m_CachedClippingRect
private Matrix4x4 m_CachedTransform
private ContextType <contextType>k__BackingField
private bool lostFocus
private bool receivedFocus
private FocusChangeDirection focusChangeDirection
private bool hasFocusableControls
private int newKeyboardFocusControlID
private bool <focusOnlyIfHasFocusableControls>k__BackingField
public string ussClassName
internal string ussFoldoutChildDepthClassName
internal List`1<string> ussFoldoutChildDepthClassNames
private GUIGlobals m_GUIGlobals
private ProfilerMarker k_OnGUIMarker
private ProfilerMarker k_ImmediateCallbackMarker
private Event s_DefaultMeasureEvent
private Event s_MeasureEvent
private Event s_CurrentEvent
public Action onGUIHandler
internal ObjectGUIState guiState
internal Rect lastWorldClip
public bool cullingEnabled
private LayoutCache cache
private float layoutMeasuredWidth
private float layoutMeasuredHeight
public ContextType contextType
internal bool focusOnlyIfHasFocusableControls
public bool canGrabFocus
public Action get_onGUIHandler()
public void set_onGUIHandler(Action value)
internal ObjectGUIState get_guiState()
internal Rect get_lastWorldClip()
internal void set_lastWorldClip(Rect value)
public bool get_cullingEnabled()
public void set_cullingEnabled(bool value)
private LayoutCache get_cache()
private float get_layoutMeasuredWidth()
private float get_layoutMeasuredHeight()
public ContextType get_contextType()
public void set_contextType(ContextType value)
internal bool get_focusOnlyIfHasFocusableControls()
internal void set_focusOnlyIfHasFocusableControls(bool value)
public bool get_canGrabFocus()
public void .ctor(Action onGUIHandler)
private void OnGenerateVisualContent(MeshGenerationContext mgc)
private void SaveGlobals()
private void RestoreGlobals()
private void DoOnGUI(Event evt, Matrix4x4 parentTransform, Rect clippingRect, bool isComputingLayout, Rect layoutSize, Action onGUIHandler, bool canAffectFocus)
public void MarkDirtyLayout()
public void HandleEvent(EventBase evt)
private void DoIMGUIRepaint()
internal bool SendEventToIMGUI(EventBase evt, bool canAffectFocus, bool verifyBounds)
private bool SendEventToIMGUIRaw(EventBase evt, bool canAffectFocus, bool verifyBounds)
private bool VerifyBounds(EventBase evt)
private bool IsContainerCapturingTheMouse()
private bool IsLocalEvent(EventBase evt)
private bool IsEventInsideLocalWindow(EventBase evt)
private bool IsDockAreaMouseUp(EventBase evt)
private bool HandleIMGUIEvent(Event e, bool canAffectFocus)
internal bool HandleIMGUIEvent(Event e, Action onGUIHandler, bool canAffectFocus)
private bool HandleIMGUIEvent(Event e, Matrix4x4 worldTransform, Rect clippingRect, Action onGUIHandler, bool canAffectFocus)
protected void ExecuteDefaultAction(EventBase evt)
private void SetFoldoutDepthClass()
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
private Rect GetCurrentClipRect()
private void GetCurrentTransformAndClip(IMGUIContainer container, Event evt, Matrix4x4& transform, Rect& clipRect)
public void Dispose()
protected void Dispose(bool disposeManaged)
private void <DoOnGUI>b__56_0()
}
public UnityEngine.UIElements.IMGUIEvent : EventBase`1<IMGUIEvent> {
public IMGUIEvent GetPooled(Event systemEvent)
protected void Init()
private void LocalInit()
}
internal UnityEngine.UIElements.IMGUIEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.IMixedValueSupport {
public bool showMixedValue
public bool get_showMixedValue()
public void set_showMixedValue(bool value)
}
public UnityEngine.UIElements.ImmediateModeElement : VisualElement {
private Dictionary`2<Type, ProfilerMarker> s_Markers
private ProfilerMarker m_ImmediateRepaintMarker
private bool m_CullingEnabled
public bool cullingEnabled
public bool get_cullingEnabled()
public void set_cullingEnabled(bool value)
private void OnGenerateVisualContent(MeshGenerationContext mgc)
private void CallImmediateRepaint()
protected void ImmediateRepaint()
}
internal UnityEngine.UIElements.ImmediateModeException : Exception {
public void .ctor(Exception inner)
}
public UnityEngine.UIElements.IMouseEvent {
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
public Vector2 mouseDelta
public int clickCount
public int button
public int pressedButtons
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public EventModifiers get_modifiers()
public Vector2 get_mousePosition()
public Vector2 get_localMousePosition()
public Vector2 get_mouseDelta()
public int get_clickCount()
public int get_button()
public int get_pressedButtons()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
}
internal UnityEngine.UIElements.IMouseEventInternal {
public bool triggeredByOS
public bool recomputeTopElementUnderMouse
public IPointerEvent sourcePointerEvent
public bool get_triggeredByOS()
public void set_triggeredByOS(bool value)
public bool get_recomputeTopElementUnderMouse()
public void set_recomputeTopElementUnderMouse(bool value)
public IPointerEvent get_sourcePointerEvent()
public void set_sourcePointerEvent(IPointerEvent value)
}
internal UnityEngine.UIElements.InheritedData : ValueType {
public Color color
public Length fontSize
public Length letterSpacing
public TextShadow textShadow
public Font unityFont
public FontDefinition unityFontDefinition
public FontStyle unityFontStyleAndWeight
public Length unityParagraphSpacing
public TextAnchor unityTextAlign
public Color unityTextOutlineColor
public float unityTextOutlineWidth
public Visibility visibility
public WhiteSpace whiteSpace
public Length wordSpacing
public InheritedData Copy()
public void CopyFrom(InheritedData& other)
public bool op_Equality(InheritedData lhs, InheritedData rhs)
public bool op_Inequality(InheritedData lhs, InheritedData rhs)
public bool Equals(InheritedData other)
public bool Equals(object obj)
public int GetHashCode()
}
internal UnityEngine.UIElements.InlineStyleAccess : StyleValueCollection {
private StylePropertyReader s_StylePropertyReader
private List`1<StyleValueManaged> m_ValuesManaged
private VisualElement <ve>k__BackingField
private bool m_HasInlineCursor
private StyleCursor m_InlineCursor
private bool m_HasInlineTextShadow
private StyleTextShadow m_InlineTextShadow
private bool m_HasInlineTransformOrigin
private StyleTransformOrigin m_InlineTransformOrigin
private bool m_HasInlineTranslate
private StyleTranslate m_InlineTranslateOperation
private bool m_HasInlineRotate
private StyleRotate m_InlineRotateOperation
private bool m_HasInlineScale
private StyleScale m_InlineScale
private InlineRule m_InlineRule
private VisualElement ve
public InlineRule inlineRule
private StyleCursor UnityEngine.UIElements.IStyle.cursor
private StyleTextShadow UnityEngine.UIElements.IStyle.textShadow
private StyleTransformOrigin UnityEngine.UIElements.IStyle.transformOrigin
private StyleTranslate UnityEngine.UIElements.IStyle.translate
private StyleRotate UnityEngine.UIElements.IStyle.rotate
private StyleScale UnityEngine.UIElements.IStyle.scale
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.alignContent
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.alignItems
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.alignSelf
private StyleColor UnityEngine.UIElements.IStyle.backgroundColor
private StyleBackground UnityEngine.UIElements.IStyle.backgroundImage
private StyleColor UnityEngine.UIElements.IStyle.borderBottomColor
private StyleLength UnityEngine.UIElements.IStyle.borderBottomLeftRadius
private StyleLength UnityEngine.UIElements.IStyle.borderBottomRightRadius
private StyleFloat UnityEngine.UIElements.IStyle.borderBottomWidth
private StyleColor UnityEngine.UIElements.IStyle.borderLeftColor
private StyleFloat UnityEngine.UIElements.IStyle.borderLeftWidth
private StyleColor UnityEngine.UIElements.IStyle.borderRightColor
private StyleFloat UnityEngine.UIElements.IStyle.borderRightWidth
private StyleColor UnityEngine.UIElements.IStyle.borderTopColor
private StyleLength UnityEngine.UIElements.IStyle.borderTopLeftRadius
private StyleLength UnityEngine.UIElements.IStyle.borderTopRightRadius
private StyleFloat UnityEngine.UIElements.IStyle.borderTopWidth
private StyleLength UnityEngine.UIElements.IStyle.bottom
private StyleColor UnityEngine.UIElements.IStyle.color
private StyleEnum`1<DisplayStyle> UnityEngine.UIElements.IStyle.display
private StyleLength UnityEngine.UIElements.IStyle.flexBasis
private StyleEnum`1<FlexDirection> UnityEngine.UIElements.IStyle.flexDirection
private StyleFloat UnityEngine.UIElements.IStyle.flexGrow
private StyleFloat UnityEngine.UIElements.IStyle.flexShrink
private StyleEnum`1<Wrap> UnityEngine.UIElements.IStyle.flexWrap
private StyleLength UnityEngine.UIElements.IStyle.fontSize
private StyleLength UnityEngine.UIElements.IStyle.height
private StyleEnum`1<Justify> UnityEngine.UIElements.IStyle.justifyContent
private StyleLength UnityEngine.UIElements.IStyle.left
private StyleLength UnityEngine.UIElements.IStyle.letterSpacing
private StyleLength UnityEngine.UIElements.IStyle.marginBottom
private StyleLength UnityEngine.UIElements.IStyle.marginLeft
private StyleLength UnityEngine.UIElements.IStyle.marginRight
private StyleLength UnityEngine.UIElements.IStyle.marginTop
private StyleLength UnityEngine.UIElements.IStyle.maxHeight
private StyleLength UnityEngine.UIElements.IStyle.maxWidth
private StyleLength UnityEngine.UIElements.IStyle.minHeight
private StyleLength UnityEngine.UIElements.IStyle.minWidth
private StyleFloat UnityEngine.UIElements.IStyle.opacity
private StyleEnum`1<Overflow> UnityEngine.UIElements.IStyle.overflow
private StyleLength UnityEngine.UIElements.IStyle.paddingBottom
private StyleLength UnityEngine.UIElements.IStyle.paddingLeft
private StyleLength UnityEngine.UIElements.IStyle.paddingRight
private StyleLength UnityEngine.UIElements.IStyle.paddingTop
private StyleEnum`1<Position> UnityEngine.UIElements.IStyle.position
private StyleLength UnityEngine.UIElements.IStyle.right
private StyleEnum`1<TextOverflow> UnityEngine.UIElements.IStyle.textOverflow
private StyleLength UnityEngine.UIElements.IStyle.top
private StyleList`1<TimeValue> UnityEngine.UIElements.IStyle.transitionDelay
private StyleList`1<TimeValue> UnityEngine.UIElements.IStyle.transitionDuration
private StyleList`1<StylePropertyName> UnityEngine.UIElements.IStyle.transitionProperty
private StyleList`1<EasingFunction> UnityEngine.UIElements.IStyle.transitionTimingFunction
private StyleColor UnityEngine.UIElements.IStyle.unityBackgroundImageTintColor
private StyleEnum`1<ScaleMode> UnityEngine.UIElements.IStyle.unityBackgroundScaleMode
private StyleFont UnityEngine.UIElements.IStyle.unityFont
private StyleFontDefinition UnityEngine.UIElements.IStyle.unityFontDefinition
private StyleEnum`1<FontStyle> UnityEngine.UIElements.IStyle.unityFontStyleAndWeight
private StyleEnum`1<OverflowClipBox> UnityEngine.UIElements.IStyle.unityOverflowClipBox
private StyleLength UnityEngine.UIElements.IStyle.unityParagraphSpacing
private StyleInt UnityEngine.UIElements.IStyle.unitySliceBottom
private StyleInt UnityEngine.UIElements.IStyle.unitySliceLeft
private StyleInt UnityEngine.UIElements.IStyle.unitySliceRight
private StyleInt UnityEngine.UIElements.IStyle.unitySliceTop
private StyleEnum`1<TextAnchor> UnityEngine.UIElements.IStyle.unityTextAlign
private StyleColor UnityEngine.UIElements.IStyle.unityTextOutlineColor
private StyleFloat UnityEngine.UIElements.IStyle.unityTextOutlineWidth
private StyleEnum`1<TextOverflowPosition> UnityEngine.UIElements.IStyle.unityTextOverflowPosition
private StyleEnum`1<Visibility> UnityEngine.UIElements.IStyle.visibility
private StyleEnum`1<WhiteSpace> UnityEngine.UIElements.IStyle.whiteSpace
private StyleLength UnityEngine.UIElements.IStyle.width
private StyleLength UnityEngine.UIElements.IStyle.wordSpacing
private VisualElement get_ve()
private void set_ve(VisualElement value)
public InlineRule get_inlineRule()
public void .ctor(VisualElement ve)
protected void Finalize()
public void SetInlineRule(StyleSheet sheet, StyleRule rule)
public bool IsValueSet(StylePropertyId id)
public void ApplyInlineStyles(ComputedStyle& computedStyle)
private StyleCursor UnityEngine.UIElements.IStyle.get_cursor()
private void UnityEngine.UIElements.IStyle.set_cursor(StyleCursor value)
private StyleTextShadow UnityEngine.UIElements.IStyle.get_textShadow()
private void UnityEngine.UIElements.IStyle.set_textShadow(StyleTextShadow value)
private StyleList`1<T> GetStyleList(StylePropertyId id)
private void SetStyleValueManaged(StyleValueManaged value)
private bool TryGetStyleValueManaged(StylePropertyId id, StyleValueManaged& value)
private StyleTransformOrigin UnityEngine.UIElements.IStyle.get_transformOrigin()
private void UnityEngine.UIElements.IStyle.set_transformOrigin(StyleTransformOrigin value)
private StyleTranslate UnityEngine.UIElements.IStyle.get_translate()
private void UnityEngine.UIElements.IStyle.set_translate(StyleTranslate value)
private StyleRotate UnityEngine.UIElements.IStyle.get_rotate()
private void UnityEngine.UIElements.IStyle.set_rotate(StyleRotate value)
private StyleScale UnityEngine.UIElements.IStyle.get_scale()
private void UnityEngine.UIElements.IStyle.set_scale(StyleScale value)
private bool SetStyleValue(StylePropertyId id, StyleLength inlineValue)
private bool SetStyleValue(StylePropertyId id, StyleFloat inlineValue)
private bool SetStyleValue(StylePropertyId id, StyleInt inlineValue)
private bool SetStyleValue(StylePropertyId id, StyleColor inlineValue)
private bool SetStyleValue(StylePropertyId id, StyleEnum`1<T> inlineValue)
private bool SetStyleValue(StylePropertyId id, StyleBackground inlineValue)
private bool SetStyleValue(StylePropertyId id, StyleFontDefinition inlineValue)
private bool SetStyleValue(StylePropertyId id, StyleFont inlineValue)
private bool SetStyleValue(StylePropertyId id, StyleList`1<T> inlineValue)
private bool SetInlineCursor(StyleCursor inlineValue)
private void ApplyStyleCursor(StyleCursor cursor)
private bool SetInlineTextShadow(StyleTextShadow inlineValue)
private void ApplyStyleTextShadow(StyleTextShadow textShadow)
private bool SetInlineTransformOrigin(StyleTransformOrigin inlineValue)
private void ApplyStyleTransformOrigin(StyleTransformOrigin transformOrigin)
private bool SetInlineTranslate(StyleTranslate inlineValue)
private void ApplyStyleTranslate(StyleTranslate translate)
private bool SetInlineScale(StyleScale inlineValue)
private void ApplyStyleScale(StyleScale scale)
private bool SetInlineRotate(StyleRotate inlineValue)
private void ApplyStyleRotate(StyleRotate rotate)
private void ApplyStyleValue(StyleValue value)
private void ApplyStyleValue(StyleValueManaged value)
private bool RemoveInlineStyle(StylePropertyId id)
private void ApplyFromComputedStyle(StylePropertyId id, ComputedStyle& newStyle)
public bool TryGetInlineCursor(StyleCursor& value)
public bool TryGetInlineTextShadow(StyleTextShadow& value)
public bool TryGetInlineTransformOrigin(StyleTransformOrigin& value)
public bool TryGetInlineTranslate(StyleTranslate& value)
public bool TryGetInlineRotate(StyleRotate& value)
public bool TryGetInlineScale(StyleScale& value)
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.get_alignContent()
private void UnityEngine.UIElements.IStyle.set_alignContent(StyleEnum`1<Align> value)
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.get_alignItems()
private void UnityEngine.UIElements.IStyle.set_alignItems(StyleEnum`1<Align> value)
private StyleEnum`1<Align> UnityEngine.UIElements.IStyle.get_alignSelf()
private void UnityEngine.UIElements.IStyle.set_alignSelf(StyleEnum`1<Align> value)
private StyleColor UnityEngine.UIElements.IStyle.get_backgroundColor()
private void UnityEngine.UIElements.IStyle.set_backgroundColor(StyleColor value)
private StyleBackground UnityEngine.UIElements.IStyle.get_backgroundImage()
private void UnityEngine.UIElements.IStyle.set_backgroundImage(StyleBackground value)
private StyleColor UnityEngine.UIElements.IStyle.get_borderBottomColor()
private void UnityEngine.UIElements.IStyle.set_borderBottomColor(StyleColor value)
private StyleLength UnityEngine.UIElements.IStyle.get_borderBottomLeftRadius()
private void UnityEngine.UIElements.IStyle.set_borderBottomLeftRadius(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_borderBottomRightRadius()
private void UnityEngine.UIElements.IStyle.set_borderBottomRightRadius(StyleLength value)
private StyleFloat UnityEngine.UIElements.IStyle.get_borderBottomWidth()
private void UnityEngine.UIElements.IStyle.set_borderBottomWidth(StyleFloat value)
private StyleColor UnityEngine.UIElements.IStyle.get_borderLeftColor()
private void UnityEngine.UIElements.IStyle.set_borderLeftColor(StyleColor value)
private StyleFloat UnityEngine.UIElements.IStyle.get_borderLeftWidth()
private void UnityEngine.UIElements.IStyle.set_borderLeftWidth(StyleFloat value)
private StyleColor UnityEngine.UIElements.IStyle.get_borderRightColor()
private void UnityEngine.UIElements.IStyle.set_borderRightColor(StyleColor value)
private StyleFloat UnityEngine.UIElements.IStyle.get_borderRightWidth()
private void UnityEngine.UIElements.IStyle.set_borderRightWidth(StyleFloat value)
private StyleColor UnityEngine.UIElements.IStyle.get_borderTopColor()
private void UnityEngine.UIElements.IStyle.set_borderTopColor(StyleColor value)
private StyleLength UnityEngine.UIElements.IStyle.get_borderTopLeftRadius()
private void UnityEngine.UIElements.IStyle.set_borderTopLeftRadius(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_borderTopRightRadius()
private void UnityEngine.UIElements.IStyle.set_borderTopRightRadius(StyleLength value)
private StyleFloat UnityEngine.UIElements.IStyle.get_borderTopWidth()
private void UnityEngine.UIElements.IStyle.set_borderTopWidth(StyleFloat value)
private StyleLength UnityEngine.UIElements.IStyle.get_bottom()
private void UnityEngine.UIElements.IStyle.set_bottom(StyleLength value)
private StyleColor UnityEngine.UIElements.IStyle.get_color()
private void UnityEngine.UIElements.IStyle.set_color(StyleColor value)
private StyleEnum`1<DisplayStyle> UnityEngine.UIElements.IStyle.get_display()
private void UnityEngine.UIElements.IStyle.set_display(StyleEnum`1<DisplayStyle> value)
private StyleLength UnityEngine.UIElements.IStyle.get_flexBasis()
private void UnityEngine.UIElements.IStyle.set_flexBasis(StyleLength value)
private StyleEnum`1<FlexDirection> UnityEngine.UIElements.IStyle.get_flexDirection()
private void UnityEngine.UIElements.IStyle.set_flexDirection(StyleEnum`1<FlexDirection> value)
private StyleFloat UnityEngine.UIElements.IStyle.get_flexGrow()
private void UnityEngine.UIElements.IStyle.set_flexGrow(StyleFloat value)
private StyleFloat UnityEngine.UIElements.IStyle.get_flexShrink()
private void UnityEngine.UIElements.IStyle.set_flexShrink(StyleFloat value)
private StyleEnum`1<Wrap> UnityEngine.UIElements.IStyle.get_flexWrap()
private void UnityEngine.UIElements.IStyle.set_flexWrap(StyleEnum`1<Wrap> value)
private StyleLength UnityEngine.UIElements.IStyle.get_fontSize()
private void UnityEngine.UIElements.IStyle.set_fontSize(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_height()
private void UnityEngine.UIElements.IStyle.set_height(StyleLength value)
private StyleEnum`1<Justify> UnityEngine.UIElements.IStyle.get_justifyContent()
private void UnityEngine.UIElements.IStyle.set_justifyContent(StyleEnum`1<Justify> value)
private StyleLength UnityEngine.UIElements.IStyle.get_left()
private void UnityEngine.UIElements.IStyle.set_left(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_letterSpacing()
private void UnityEngine.UIElements.IStyle.set_letterSpacing(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_marginBottom()
private void UnityEngine.UIElements.IStyle.set_marginBottom(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_marginLeft()
private void UnityEngine.UIElements.IStyle.set_marginLeft(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_marginRight()
private void UnityEngine.UIElements.IStyle.set_marginRight(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_marginTop()
private void UnityEngine.UIElements.IStyle.set_marginTop(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_maxHeight()
private void UnityEngine.UIElements.IStyle.set_maxHeight(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_maxWidth()
private void UnityEngine.UIElements.IStyle.set_maxWidth(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_minHeight()
private void UnityEngine.UIElements.IStyle.set_minHeight(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_minWidth()
private void UnityEngine.UIElements.IStyle.set_minWidth(StyleLength value)
private StyleFloat UnityEngine.UIElements.IStyle.get_opacity()
private void UnityEngine.UIElements.IStyle.set_opacity(StyleFloat value)
private StyleEnum`1<Overflow> UnityEngine.UIElements.IStyle.get_overflow()
private void UnityEngine.UIElements.IStyle.set_overflow(StyleEnum`1<Overflow> value)
private StyleLength UnityEngine.UIElements.IStyle.get_paddingBottom()
private void UnityEngine.UIElements.IStyle.set_paddingBottom(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_paddingLeft()
private void UnityEngine.UIElements.IStyle.set_paddingLeft(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_paddingRight()
private void UnityEngine.UIElements.IStyle.set_paddingRight(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_paddingTop()
private void UnityEngine.UIElements.IStyle.set_paddingTop(StyleLength value)
private StyleEnum`1<Position> UnityEngine.UIElements.IStyle.get_position()
private void UnityEngine.UIElements.IStyle.set_position(StyleEnum`1<Position> value)
private StyleLength UnityEngine.UIElements.IStyle.get_right()
private void UnityEngine.UIElements.IStyle.set_right(StyleLength value)
private StyleEnum`1<TextOverflow> UnityEngine.UIElements.IStyle.get_textOverflow()
private void UnityEngine.UIElements.IStyle.set_textOverflow(StyleEnum`1<TextOverflow> value)
private StyleLength UnityEngine.UIElements.IStyle.get_top()
private void UnityEngine.UIElements.IStyle.set_top(StyleLength value)
private StyleList`1<TimeValue> UnityEngine.UIElements.IStyle.get_transitionDelay()
private void UnityEngine.UIElements.IStyle.set_transitionDelay(StyleList`1<TimeValue> value)
private StyleList`1<TimeValue> UnityEngine.UIElements.IStyle.get_transitionDuration()
private void UnityEngine.UIElements.IStyle.set_transitionDuration(StyleList`1<TimeValue> value)
private StyleList`1<StylePropertyName> UnityEngine.UIElements.IStyle.get_transitionProperty()
private void UnityEngine.UIElements.IStyle.set_transitionProperty(StyleList`1<StylePropertyName> value)
private StyleList`1<EasingFunction> UnityEngine.UIElements.IStyle.get_transitionTimingFunction()
private void UnityEngine.UIElements.IStyle.set_transitionTimingFunction(StyleList`1<EasingFunction> value)
private StyleColor UnityEngine.UIElements.IStyle.get_unityBackgroundImageTintColor()
private void UnityEngine.UIElements.IStyle.set_unityBackgroundImageTintColor(StyleColor value)
private StyleEnum`1<ScaleMode> UnityEngine.UIElements.IStyle.get_unityBackgroundScaleMode()
private void UnityEngine.UIElements.IStyle.set_unityBackgroundScaleMode(StyleEnum`1<ScaleMode> value)
private StyleFont UnityEngine.UIElements.IStyle.get_unityFont()
private void UnityEngine.UIElements.IStyle.set_unityFont(StyleFont value)
private StyleFontDefinition UnityEngine.UIElements.IStyle.get_unityFontDefinition()
private void UnityEngine.UIElements.IStyle.set_unityFontDefinition(StyleFontDefinition value)
private StyleEnum`1<FontStyle> UnityEngine.UIElements.IStyle.get_unityFontStyleAndWeight()
private void UnityEngine.UIElements.IStyle.set_unityFontStyleAndWeight(StyleEnum`1<FontStyle> value)
private StyleEnum`1<OverflowClipBox> UnityEngine.UIElements.IStyle.get_unityOverflowClipBox()
private void UnityEngine.UIElements.IStyle.set_unityOverflowClipBox(StyleEnum`1<OverflowClipBox> value)
private StyleLength UnityEngine.UIElements.IStyle.get_unityParagraphSpacing()
private void UnityEngine.UIElements.IStyle.set_unityParagraphSpacing(StyleLength value)
private StyleInt UnityEngine.UIElements.IStyle.get_unitySliceBottom()
private void UnityEngine.UIElements.IStyle.set_unitySliceBottom(StyleInt value)
private StyleInt UnityEngine.UIElements.IStyle.get_unitySliceLeft()
private void UnityEngine.UIElements.IStyle.set_unitySliceLeft(StyleInt value)
private StyleInt UnityEngine.UIElements.IStyle.get_unitySliceRight()
private void UnityEngine.UIElements.IStyle.set_unitySliceRight(StyleInt value)
private StyleInt UnityEngine.UIElements.IStyle.get_unitySliceTop()
private void UnityEngine.UIElements.IStyle.set_unitySliceTop(StyleInt value)
private StyleEnum`1<TextAnchor> UnityEngine.UIElements.IStyle.get_unityTextAlign()
private void UnityEngine.UIElements.IStyle.set_unityTextAlign(StyleEnum`1<TextAnchor> value)
private StyleColor UnityEngine.UIElements.IStyle.get_unityTextOutlineColor()
private void UnityEngine.UIElements.IStyle.set_unityTextOutlineColor(StyleColor value)
private StyleFloat UnityEngine.UIElements.IStyle.get_unityTextOutlineWidth()
private void UnityEngine.UIElements.IStyle.set_unityTextOutlineWidth(StyleFloat value)
private StyleEnum`1<TextOverflowPosition> UnityEngine.UIElements.IStyle.get_unityTextOverflowPosition()
private void UnityEngine.UIElements.IStyle.set_unityTextOverflowPosition(StyleEnum`1<TextOverflowPosition> value)
private StyleEnum`1<Visibility> UnityEngine.UIElements.IStyle.get_visibility()
private void UnityEngine.UIElements.IStyle.set_visibility(StyleEnum`1<Visibility> value)
private StyleEnum`1<WhiteSpace> UnityEngine.UIElements.IStyle.get_whiteSpace()
private void UnityEngine.UIElements.IStyle.set_whiteSpace(StyleEnum`1<WhiteSpace> value)
private StyleLength UnityEngine.UIElements.IStyle.get_width()
private void UnityEngine.UIElements.IStyle.set_width(StyleLength value)
private StyleLength UnityEngine.UIElements.IStyle.get_wordSpacing()
private void UnityEngine.UIElements.IStyle.set_wordSpacing(StyleLength value)
}
public UnityEngine.UIElements.INotifyValueChanged`1 {
public T value
public T get_value()
public void set_value(T value)
public void SetValueWithoutNotify(T newValue)
}
public UnityEngine.UIElements.INotifyValueChangedExtensions : object {
public bool RegisterValueChangedCallback(INotifyValueChanged`1<T> control, EventCallback`1<ChangeEvent`1<T>> callback)
public bool UnregisterValueChangedCallback(INotifyValueChanged`1<T> control, EventCallback`1<ChangeEvent`1<T>> callback)
}
public UnityEngine.UIElements.InputEvent : EventBase`1<InputEvent> {
private string <previousData>k__BackingField
private string <newData>k__BackingField
public string previousData
public string newData
public string get_previousData()
protected void set_previousData(string value)
public string get_newData()
protected void set_newData(string value)
protected void Init()
private void LocalInit()
public InputEvent GetPooled(string previousData, string newData)
}
internal UnityEngine.UIElements.InternalTreeView : VisualElement {
private string s_ListViewName
private string s_ItemToggleName
private string s_ItemIndentsContainerName
private string s_ItemIndentName
private string s_ItemContentContainerName
public string itemUssClassName
private Func`1<VisualElement> m_MakeItem
private Action`1<IEnumerable`1<ITreeViewItem>> onItemsChosen
private Action`1<IEnumerable`1<ITreeViewItem>> onSelectionChange
private List`1<ITreeViewItem> m_SelectedItems
private Action`2<VisualElement, ITreeViewItem> m_BindItem
private Action`2<VisualElement, ITreeViewItem> <unbindItem>k__BackingField
private IList`1<ITreeViewItem> m_RootItems
private List`1<int> m_ExpandedItemIds
private List`1<TreeViewItemWrapper> m_ItemWrappers
private ListView m_ListView
internal ScrollView m_ScrollView
public Func`1<VisualElement> makeItem
public ITreeViewItem selectedItem
public IEnumerable`1<ITreeViewItem> selectedItems
public Action`2<VisualElement, ITreeViewItem> bindItem
public Action`2<VisualElement, ITreeViewItem> unbindItem
public IList`1<ITreeViewItem> rootItems
public IEnumerable`1<ITreeViewItem> items
public float resolvedItemHeight
public int itemHeight
public bool horizontalScrollingEnabled
public bool showBorder
public SelectionType selectionType
public AlternatingRowBackground showAlternatingRowBackgrounds
public Func`1<VisualElement> get_makeItem()
public void set_makeItem(Func`1<VisualElement> value)
public void add_onItemsChosen(Action`1<IEnumerable`1<ITreeViewItem>> value)
public void remove_onItemsChosen(Action`1<IEnumerable`1<ITreeViewItem>> value)
public void add_onSelectionChange(Action`1<IEnumerable`1<ITreeViewItem>> value)
public void remove_onSelectionChange(Action`1<IEnumerable`1<ITreeViewItem>> value)
public ITreeViewItem get_selectedItem()
public IEnumerable`1<ITreeViewItem> get_selectedItems()
public Action`2<VisualElement, ITreeViewItem> get_bindItem()
public void set_bindItem(Action`2<VisualElement, ITreeViewItem> value)
public Action`2<VisualElement, ITreeViewItem> get_unbindItem()
public void set_unbindItem(Action`2<VisualElement, ITreeViewItem> value)
public IList`1<ITreeViewItem> get_rootItems()
public void set_rootItems(IList`1<ITreeViewItem> value)
public IEnumerable`1<ITreeViewItem> get_items()
public float get_resolvedItemHeight()
public int get_itemHeight()
public void set_itemHeight(int value)
public bool get_horizontalScrollingEnabled()
public void set_horizontalScrollingEnabled(bool value)
public bool get_showBorder()
public void set_showBorder(bool value)
public SelectionType get_selectionType()
public void set_selectionType(SelectionType value)
public AlternatingRowBackground get_showAlternatingRowBackgrounds()
public void set_showAlternatingRowBackgrounds(AlternatingRowBackground value)
public void .ctor(IList`1<ITreeViewItem> items, int fixedItemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, ITreeViewItem> bindItem)
public void RefreshItems()
public void Rebuild()
internal void OnViewDataReady()
public IEnumerable`1<ITreeViewItem> GetAllItems(IEnumerable`1<ITreeViewItem> rootItems)
public void OnKeyDown(KeyDownEvent evt)
public void SetSelection(int id)
public void SetSelection(IEnumerable`1<int> ids)
public void SetSelectionWithoutNotify(IEnumerable`1<int> ids)
internal void SetSelectionInternal(IEnumerable`1<int> ids, bool sendNotification)
internal void SetSelectionByIndices(IEnumerable`1<int> indexes, bool sendNotification)
public void AddToSelection(int id)
public void RemoveFromSelection(int id)
internal int GetItemIndex(int id, bool expand)
public void ClearSelection()
public void ScrollTo(VisualElement visualElement)
public void ScrollToItem(int id)
internal void CopyExpandedStates(ITreeViewItem source, ITreeViewItem target)
public bool IsExpanded(int id)
public void CollapseItem(int id)
public void ExpandItem(int id)
public ITreeViewItem FindItem(int id)
private void ListViewRefresh()
private void OnItemsChosen(IEnumerable`1<object> chosenItems)
private void OnSelectionChange(IEnumerable`1<object> selectedListItems)
private void OnTreeViewMouseUp(MouseUpEvent evt)
private void OnItemMouseUp(MouseUpEvent evt)
private VisualElement MakeTreeItem()
private void UnbindTreeItem(VisualElement element, int index)
private void BindTreeItem(VisualElement element, int index)
internal int GetItemId(int index)
private bool IsExpandedByIndex(int index)
private void CollapseItemByIndex(int index)
private void ExpandItemByIndex(int index)
private void ToggleExpandedState(ChangeEvent`1<bool> evt)
private void CreateWrappers(IEnumerable`1<ITreeViewItem> treeViewItems, int depth, List`1& wrappers)
public void CollapseAll()
private void RegenerateWrappers()
private void OnCustomStyleResolved(CustomStyleResolvedEvent e)
private int <SetSelectionInternal>b__69_0(int id)
}
internal UnityEngine.UIElements.InvokePolicy : Enum {
public int value__
public InvokePolicy Default
public InvokePolicy IncludeDisabled
}
public UnityEngine.UIElements.IPanel {
public VisualElement visualTree
public EventDispatcher dispatcher
public ContextType contextType
public FocusController focusController
public ContextualMenuManager contextualMenuManager
public VisualElement get_visualTree()
public EventDispatcher get_dispatcher()
public ContextType get_contextType()
public FocusController get_focusController()
public VisualElement Pick(Vector2 point)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
public ContextualMenuManager get_contextualMenuManager()
}
internal UnityEngine.UIElements.IPointerCaptureEventInternal {
public int pointerId
public int get_pointerId()
}
public UnityEngine.UIElements.IPointerEvent {
public int pointerId
public string pointerType
public bool isPrimary
public int button
public int pressedButtons
public Vector3 position
public Vector3 localPosition
public Vector3 deltaPosition
public float deltaTime
public int clickCount
public float pressure
public float tangentialPressure
public float altitudeAngle
public float azimuthAngle
public float twist
public Vector2 radius
public Vector2 radiusVariance
public EventModifiers modifiers
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public int get_pointerId()
public string get_pointerType()
public bool get_isPrimary()
public int get_button()
public int get_pressedButtons()
public Vector3 get_position()
public Vector3 get_localPosition()
public Vector3 get_deltaPosition()
public float get_deltaTime()
public int get_clickCount()
public float get_pressure()
public float get_tangentialPressure()
public float get_altitudeAngle()
public float get_azimuthAngle()
public float get_twist()
public Vector2 get_radius()
public Vector2 get_radiusVariance()
public EventModifiers get_modifiers()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
}
internal UnityEngine.UIElements.IPointerEventInternal {
public bool triggeredByOS
public bool recomputeTopElementUnderPointer
public bool get_triggeredByOS()
public void set_triggeredByOS(bool value)
public bool get_recomputeTopElementUnderPointer()
public void set_recomputeTopElementUnderPointer(bool value)
}
internal UnityEngine.UIElements.IPrefixLabel {
public string label
public string get_label()
}
internal UnityEngine.UIElements.IReorderable {
public bool enableReordering
public bool get_enableReordering()
public void set_enableReordering(bool value)
}
public UnityEngine.UIElements.IResolvedStyle {
public Align alignContent
public Align alignItems
public Align alignSelf
public Color backgroundColor
public Background backgroundImage
public Color borderBottomColor
public float borderBottomLeftRadius
public float borderBottomRightRadius
public float borderBottomWidth
public Color borderLeftColor
public float borderLeftWidth
public Color borderRightColor
public float borderRightWidth
public Color borderTopColor
public float borderTopLeftRadius
public float borderTopRightRadius
public float borderTopWidth
public float bottom
public Color color
public DisplayStyle display
public StyleFloat flexBasis
public FlexDirection flexDirection
public float flexGrow
public float flexShrink
public Wrap flexWrap
public float fontSize
public float height
public Justify justifyContent
public float left
public float letterSpacing
public float marginBottom
public float marginLeft
public float marginRight
public float marginTop
public StyleFloat maxHeight
public StyleFloat maxWidth
public StyleFloat minHeight
public StyleFloat minWidth
public float opacity
public float paddingBottom
public float paddingLeft
public float paddingRight
public float paddingTop
public Position position
public float right
public Rotate rotate
public Scale scale
public TextOverflow textOverflow
public float top
public Vector3 transformOrigin
public IEnumerable`1<TimeValue> transitionDelay
public IEnumerable`1<TimeValue> transitionDuration
public IEnumerable`1<StylePropertyName> transitionProperty
public IEnumerable`1<EasingFunction> transitionTimingFunction
public Vector3 translate
public Color unityBackgroundImageTintColor
public ScaleMode unityBackgroundScaleMode
public Font unityFont
public FontDefinition unityFontDefinition
public FontStyle unityFontStyleAndWeight
public float unityParagraphSpacing
public int unitySliceBottom
public int unitySliceLeft
public int unitySliceRight
public int unitySliceTop
public TextAnchor unityTextAlign
public Color unityTextOutlineColor
public float unityTextOutlineWidth
public TextOverflowPosition unityTextOverflowPosition
public Visibility visibility
public WhiteSpace whiteSpace
public float width
public float wordSpacing
public Align get_alignContent()
public Align get_alignItems()
public Align get_alignSelf()
public Color get_backgroundColor()
public Background get_backgroundImage()
public Color get_borderBottomColor()
public float get_borderBottomLeftRadius()
public float get_borderBottomRightRadius()
public float get_borderBottomWidth()
public Color get_borderLeftColor()
public float get_borderLeftWidth()
public Color get_borderRightColor()
public float get_borderRightWidth()
public Color get_borderTopColor()
public float get_borderTopLeftRadius()
public float get_borderTopRightRadius()
public float get_borderTopWidth()
public float get_bottom()
public Color get_color()
public DisplayStyle get_display()
public StyleFloat get_flexBasis()
public FlexDirection get_flexDirection()
public float get_flexGrow()
public float get_flexShrink()
public Wrap get_flexWrap()
public float get_fontSize()
public float get_height()
public Justify get_justifyContent()
public float get_left()
public float get_letterSpacing()
public float get_marginBottom()
public float get_marginLeft()
public float get_marginRight()
public float get_marginTop()
public StyleFloat get_maxHeight()
public StyleFloat get_maxWidth()
public StyleFloat get_minHeight()
public StyleFloat get_minWidth()
public float get_opacity()
public float get_paddingBottom()
public float get_paddingLeft()
public float get_paddingRight()
public float get_paddingTop()
public Position get_position()
public float get_right()
public Rotate get_rotate()
public Scale get_scale()
public TextOverflow get_textOverflow()
public float get_top()
public Vector3 get_transformOrigin()
public IEnumerable`1<TimeValue> get_transitionDelay()
public IEnumerable`1<TimeValue> get_transitionDuration()
public IEnumerable`1<StylePropertyName> get_transitionProperty()
public IEnumerable`1<EasingFunction> get_transitionTimingFunction()
public Vector3 get_translate()
public Color get_unityBackgroundImageTintColor()
public ScaleMode get_unityBackgroundScaleMode()
public Font get_unityFont()
public FontDefinition get_unityFontDefinition()
public FontStyle get_unityFontStyleAndWeight()
public float get_unityParagraphSpacing()
public int get_unitySliceBottom()
public int get_unitySliceLeft()
public int get_unitySliceRight()
public int get_unitySliceTop()
public TextAnchor get_unityTextAlign()
public Color get_unityTextOutlineColor()
public float get_unityTextOutlineWidth()
public TextOverflowPosition get_unityTextOverflowPosition()
public Visibility get_visibility()
public WhiteSpace get_whiteSpace()
public float get_width()
public float get_wordSpacing()
}
internal UnityEngine.UIElements.IRuntimePanel {
public PanelSettings panelSettings
public GameObject selectableGameObject
public PanelSettings get_panelSettings()
public GameObject get_selectableGameObject()
public void set_selectableGameObject(GameObject value)
}
internal UnityEngine.UIElements.IRuntimePanelComponent {
public IPanel panel
public IPanel get_panel()
public void set_panel(IPanel value)
}
internal UnityEngine.UIElements.IScheduler {
public ScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs)
public ScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition)
public ScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs)
public void Unschedule(ScheduledItem item)
public void Schedule(ScheduledItem item)
public void UpdateScheduledEvents()
}
internal UnityEngine.UIElements.ISerializableJsonDictionary {
public void Set(string key, T value)
public T Get(string key)
public T GetScriptable(string key)
public void Overwrite(object obj, string key)
public bool ContainsKey(string key)
public void OnBeforeSerialize()
public void OnAfterDeserialize()
}
public UnityEngine.UIElements.IStyle {
public StyleEnum`1<Align> alignContent
public StyleEnum`1<Align> alignItems
public StyleEnum`1<Align> alignSelf
public StyleColor backgroundColor
public StyleBackground backgroundImage
public StyleColor borderBottomColor
public StyleLength borderBottomLeftRadius
public StyleLength borderBottomRightRadius
public StyleFloat borderBottomWidth
public StyleColor borderLeftColor
public StyleFloat borderLeftWidth
public StyleColor borderRightColor
public StyleFloat borderRightWidth
public StyleColor borderTopColor
public StyleLength borderTopLeftRadius
public StyleLength borderTopRightRadius
public StyleFloat borderTopWidth
public StyleLength bottom
public StyleColor color
public StyleCursor cursor
public StyleEnum`1<DisplayStyle> display
public StyleLength flexBasis
public StyleEnum`1<FlexDirection> flexDirection
public StyleFloat flexGrow
public StyleFloat flexShrink
public StyleEnum`1<Wrap> flexWrap
public StyleLength fontSize
public StyleLength height
public StyleEnum`1<Justify> justifyContent
public StyleLength left
public StyleLength letterSpacing
public StyleLength marginBottom
public StyleLength marginLeft
public StyleLength marginRight
public StyleLength marginTop
public StyleLength maxHeight
public StyleLength maxWidth
public StyleLength minHeight
public StyleLength minWidth
public StyleFloat opacity
public StyleEnum`1<Overflow> overflow
public StyleLength paddingBottom
public StyleLength paddingLeft
public StyleLength paddingRight
public StyleLength paddingTop
public StyleEnum`1<Position> position
public StyleLength right
public StyleRotate rotate
public StyleScale scale
public StyleEnum`1<TextOverflow> textOverflow
public StyleTextShadow textShadow
public StyleLength top
public StyleTransformOrigin transformOrigin
public StyleList`1<TimeValue> transitionDelay
public StyleList`1<TimeValue> transitionDuration
public StyleList`1<StylePropertyName> transitionProperty
public StyleList`1<EasingFunction> transitionTimingFunction
public StyleTranslate translate
public StyleColor unityBackgroundImageTintColor
public StyleEnum`1<ScaleMode> unityBackgroundScaleMode
public StyleFont unityFont
public StyleFontDefinition unityFontDefinition
public StyleEnum`1<FontStyle> unityFontStyleAndWeight
public StyleEnum`1<OverflowClipBox> unityOverflowClipBox
public StyleLength unityParagraphSpacing
public StyleInt unitySliceBottom
public StyleInt unitySliceLeft
public StyleInt unitySliceRight
public StyleInt unitySliceTop
public StyleEnum`1<TextAnchor> unityTextAlign
public StyleColor unityTextOutlineColor
public StyleFloat unityTextOutlineWidth
public StyleEnum`1<TextOverflowPosition> unityTextOverflowPosition
public StyleEnum`1<Visibility> visibility
public StyleEnum`1<WhiteSpace> whiteSpace
public StyleLength width
public StyleLength wordSpacing
public StyleEnum`1<Align> get_alignContent()
public void set_alignContent(StyleEnum`1<Align> value)
public StyleEnum`1<Align> get_alignItems()
public void set_alignItems(StyleEnum`1<Align> value)
public StyleEnum`1<Align> get_alignSelf()
public void set_alignSelf(StyleEnum`1<Align> value)
public StyleColor get_backgroundColor()
public void set_backgroundColor(StyleColor value)
public StyleBackground get_backgroundImage()
public void set_backgroundImage(StyleBackground value)
public StyleColor get_borderBottomColor()
public void set_borderBottomColor(StyleColor value)
public StyleLength get_borderBottomLeftRadius()
public void set_borderBottomLeftRadius(StyleLength value)
public StyleLength get_borderBottomRightRadius()
public void set_borderBottomRightRadius(StyleLength value)
public StyleFloat get_borderBottomWidth()
public void set_borderBottomWidth(StyleFloat value)
public StyleColor get_borderLeftColor()
public void set_borderLeftColor(StyleColor value)
public StyleFloat get_borderLeftWidth()
public void set_borderLeftWidth(StyleFloat value)
public StyleColor get_borderRightColor()
public void set_borderRightColor(StyleColor value)
public StyleFloat get_borderRightWidth()
public void set_borderRightWidth(StyleFloat value)
public StyleColor get_borderTopColor()
public void set_borderTopColor(StyleColor value)
public StyleLength get_borderTopLeftRadius()
public void set_borderTopLeftRadius(StyleLength value)
public StyleLength get_borderTopRightRadius()
public void set_borderTopRightRadius(StyleLength value)
public StyleFloat get_borderTopWidth()
public void set_borderTopWidth(StyleFloat value)
public StyleLength get_bottom()
public void set_bottom(StyleLength value)
public StyleColor get_color()
public void set_color(StyleColor value)
public StyleCursor get_cursor()
public void set_cursor(StyleCursor value)
public StyleEnum`1<DisplayStyle> get_display()
public void set_display(StyleEnum`1<DisplayStyle> value)
public StyleLength get_flexBasis()
public void set_flexBasis(StyleLength value)
public StyleEnum`1<FlexDirection> get_flexDirection()
public void set_flexDirection(StyleEnum`1<FlexDirection> value)
public StyleFloat get_flexGrow()
public void set_flexGrow(StyleFloat value)
public StyleFloat get_flexShrink()
public void set_flexShrink(StyleFloat value)
public StyleEnum`1<Wrap> get_flexWrap()
public void set_flexWrap(StyleEnum`1<Wrap> value)
public StyleLength get_fontSize()
public void set_fontSize(StyleLength value)
public StyleLength get_height()
public void set_height(StyleLength value)
public StyleEnum`1<Justify> get_justifyContent()
public void set_justifyContent(StyleEnum`1<Justify> value)
public StyleLength get_left()
public void set_left(StyleLength value)
public StyleLength get_letterSpacing()
public void set_letterSpacing(StyleLength value)
public StyleLength get_marginBottom()
public void set_marginBottom(StyleLength value)
public StyleLength get_marginLeft()
public void set_marginLeft(StyleLength value)
public StyleLength get_marginRight()
public void set_marginRight(StyleLength value)
public StyleLength get_marginTop()
public void set_marginTop(StyleLength value)
public StyleLength get_maxHeight()
public void set_maxHeight(StyleLength value)
public StyleLength get_maxWidth()
public void set_maxWidth(StyleLength value)
public StyleLength get_minHeight()
public void set_minHeight(StyleLength value)
public StyleLength get_minWidth()
public void set_minWidth(StyleLength value)
public StyleFloat get_opacity()
public void set_opacity(StyleFloat value)
public StyleEnum`1<Overflow> get_overflow()
public void set_overflow(StyleEnum`1<Overflow> value)
public StyleLength get_paddingBottom()
public void set_paddingBottom(StyleLength value)
public StyleLength get_paddingLeft()
public void set_paddingLeft(StyleLength value)
public StyleLength get_paddingRight()
public void set_paddingRight(StyleLength value)
public StyleLength get_paddingTop()
public void set_paddingTop(StyleLength value)
public StyleEnum`1<Position> get_position()
public void set_position(StyleEnum`1<Position> value)
public StyleLength get_right()
public void set_right(StyleLength value)
public StyleRotate get_rotate()
public void set_rotate(StyleRotate value)
public StyleScale get_scale()
public void set_scale(StyleScale value)
public StyleEnum`1<TextOverflow> get_textOverflow()
public void set_textOverflow(StyleEnum`1<TextOverflow> value)
public StyleTextShadow get_textShadow()
public void set_textShadow(StyleTextShadow value)
public StyleLength get_top()
public void set_top(StyleLength value)
public StyleTransformOrigin get_transformOrigin()
public void set_transformOrigin(StyleTransformOrigin value)
public StyleList`1<TimeValue> get_transitionDelay()
public void set_transitionDelay(StyleList`1<TimeValue> value)
public StyleList`1<TimeValue> get_transitionDuration()
public void set_transitionDuration(StyleList`1<TimeValue> value)
public StyleList`1<StylePropertyName> get_transitionProperty()
public void set_transitionProperty(StyleList`1<StylePropertyName> value)
public StyleList`1<EasingFunction> get_transitionTimingFunction()
public void set_transitionTimingFunction(StyleList`1<EasingFunction> value)
public StyleTranslate get_translate()
public void set_translate(StyleTranslate value)
public StyleColor get_unityBackgroundImageTintColor()
public void set_unityBackgroundImageTintColor(StyleColor value)
public StyleEnum`1<ScaleMode> get_unityBackgroundScaleMode()
public void set_unityBackgroundScaleMode(StyleEnum`1<ScaleMode> value)
public StyleFont get_unityFont()
public void set_unityFont(StyleFont value)
public StyleFontDefinition get_unityFontDefinition()
public void set_unityFontDefinition(StyleFontDefinition value)
public StyleEnum`1<FontStyle> get_unityFontStyleAndWeight()
public void set_unityFontStyleAndWeight(StyleEnum`1<FontStyle> value)
public StyleEnum`1<OverflowClipBox> get_unityOverflowClipBox()
public void set_unityOverflowClipBox(StyleEnum`1<OverflowClipBox> value)
public StyleLength get_unityParagraphSpacing()
public void set_unityParagraphSpacing(StyleLength value)
public StyleInt get_unitySliceBottom()
public void set_unitySliceBottom(StyleInt value)
public StyleInt get_unitySliceLeft()
public void set_unitySliceLeft(StyleInt value)
public StyleInt get_unitySliceRight()
public void set_unitySliceRight(StyleInt value)
public StyleInt get_unitySliceTop()
public void set_unitySliceTop(StyleInt value)
public StyleEnum`1<TextAnchor> get_unityTextAlign()
public void set_unityTextAlign(StyleEnum`1<TextAnchor> value)
public StyleColor get_unityTextOutlineColor()
public void set_unityTextOutlineColor(StyleColor value)
public StyleFloat get_unityTextOutlineWidth()
public void set_unityTextOutlineWidth(StyleFloat value)
public StyleEnum`1<TextOverflowPosition> get_unityTextOverflowPosition()
public void set_unityTextOverflowPosition(StyleEnum`1<TextOverflowPosition> value)
public StyleEnum`1<Visibility> get_visibility()
public void set_visibility(StyleEnum`1<Visibility> value)
public StyleEnum`1<WhiteSpace> get_whiteSpace()
public void set_whiteSpace(StyleEnum`1<WhiteSpace> value)
public StyleLength get_width()
public void set_width(StyleLength value)
public StyleLength get_wordSpacing()
public void set_wordSpacing(StyleLength value)
}
internal UnityEngine.UIElements.IStyleDataGroup`1 {
public T Copy()
public void CopyFrom(T& other)
}
internal UnityEngine.UIElements.IStylePainter {
public VisualElement visualElement
public MeshWriteData DrawMesh(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags)
public void DrawText(TextParams textParams, ITextHandle handle, float pixelsPerPoint)
public void DrawRectangle(RectangleParams rectParams)
public void DrawBorder(BorderParams borderParams)
public void DrawImmediate(Action callback, bool cullingEnabled)
public VisualElement get_visualElement()
}
internal UnityEngine.UIElements.IStylePropertyAnimations {
public int runningAnimationCount
public int completedAnimationCount
public bool Start(StylePropertyId id, float from, float to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, int from, int to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, Length from, Length to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, Color from, Color to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartEnum(StylePropertyId id, int from, int to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, Background from, Background to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, FontDefinition from, FontDefinition to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, Font from, Font to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, TextShadow from, TextShadow to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, Scale from, Scale to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, Translate from, Translate to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, Rotate from, Rotate to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool Start(StylePropertyId id, TransformOrigin from, TransformOrigin to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool HasRunningAnimation(StylePropertyId id)
public void UpdateAnimation(StylePropertyId id)
public void GetAllAnimations(List`1<StylePropertyId> outPropertyIds)
public void CancelAnimation(StylePropertyId id)
public void CancelAllAnimations()
public int get_runningAnimationCount()
public void set_runningAnimationCount(int value)
public int get_completedAnimationCount()
public void set_completedAnimationCount(int value)
}
internal UnityEngine.UIElements.IStylePropertyAnimationSystem {
public bool StartTransition(VisualElement owner, StylePropertyId prop, float startValue, float endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Length startValue, Length endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Color startValue, Color endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartAnimationEnum(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Background startValue, Background endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, FontDefinition startValue, FontDefinition endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Font startValue, Font endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, TextShadow startValue, TextShadow endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Scale startValue, Scale endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, TransformOrigin startValue, TransformOrigin endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Translate startValue, Translate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Rotate startValue, Rotate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public void CancelAllAnimations()
public void CancelAllAnimations(VisualElement owner)
public void CancelAnimation(VisualElement owner, StylePropertyId id)
public bool HasRunningAnimation(VisualElement owner, StylePropertyId id)
public void UpdateAnimation(VisualElement owner, StylePropertyId id)
public void GetAllAnimations(VisualElement owner, List`1<StylePropertyId> propertyIds)
public void Update()
}
internal UnityEngine.UIElements.IStyleValue`1 {
public T value
public StyleKeyword keyword
public T get_value()
public void set_value(T value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
}
internal UnityEngine.UIElements.ITextElement {
public string text
public string get_text()
public void set_text(string value)
}
internal UnityEngine.UIElements.ITextHandle {
public Vector2 MeasuredSizes
public Vector2 RoundedSizes
public Vector2 GetCursorPosition(CursorPositionStylePainterParameters parms, float scaling)
public float ComputeTextWidth(TextParams parms, float scaling)
public float ComputeTextHeight(TextParams parms, float scaling)
public float GetLineHeight(int characterIndex, TextParams textParams, float textScaling, float pixelPerPoint)
public TextInfo Update(TextParams parms, float pixelsPerPoint)
public int VerticesCount(TextParams parms, float pixelPerPoint)
public ITextHandle New()
public bool IsLegacy()
public void SetDirty()
public bool IsElided()
public Vector2 get_MeasuredSizes()
public void set_MeasuredSizes(Vector2 value)
public Vector2 get_RoundedSizes()
public void set_RoundedSizes(Vector2 value)
}
internal UnityEngine.UIElements.ITextInputField {
public bool hasFocus
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
public bool isReadOnly
public bool isDelayed
public bool isPasswordField
public TextEditorEngine editorEngine
public bool get_hasFocus()
public bool get_doubleClickSelectsWord()
public bool get_tripleClickSelectsLine()
public bool get_isReadOnly()
public bool get_isDelayed()
public bool get_isPasswordField()
public TextEditorEngine get_editorEngine()
public void SyncTextEngine()
public bool AcceptCharacter(char c)
public string CullString(string s)
public void UpdateText(string value)
public void UpdateValueFromText()
}
public UnityEngine.UIElements.ITransform {
public Vector3 position
public Quaternion rotation
public Vector3 scale
public Matrix4x4 matrix
public Vector3 get_position()
public void set_position(Vector3 value)
public Quaternion get_rotation()
public void set_rotation(Quaternion value)
public Vector3 get_scale()
public void set_scale(Vector3 value)
public Matrix4x4 get_matrix()
}
public UnityEngine.UIElements.ITransitionEvent {
public StylePropertyNameCollection stylePropertyNames
public double elapsedTime
public StylePropertyNameCollection get_stylePropertyNames()
public double get_elapsedTime()
}
internal UnityEngine.UIElements.ITreeViewItem {
public int id
public ITreeViewItem parent
public IEnumerable`1<ITreeViewItem> children
public bool hasChildren
public int get_id()
public ITreeViewItem get_parent()
public IEnumerable`1<ITreeViewItem> get_children()
public bool get_hasChildren()
public void AddChild(ITreeViewItem child)
public void AddChildren(IList`1<ITreeViewItem> children)
public void RemoveChild(ITreeViewItem child)
}
internal UnityEngine.UIElements.IUIElementsUtility {
public bool TakeCapture()
public bool ReleaseCapture()
public bool ProcessEvent(int instanceID, IntPtr nativeEventPtr, Boolean& eventHandled)
public bool CleanupRoots()
public bool EndContainerGUIFromException(Exception exception)
public bool MakeCurrentIMGUIContainerDirty()
public void UpdateSchedulers()
public void RequestRepaintForPanels(Action`1<ScriptableObject> repaintCallback)
}
public UnityEngine.UIElements.IUxmlAttributes {
public bool TryGetAttributeValue(string attributeName, String& value)
}
public UnityEngine.UIElements.IUxmlFactory {
public string uxmlName
public string uxmlNamespace
public string uxmlQualifiedName
public bool canHaveAnyAttribute
public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlNamespace()
public string get_uxmlQualifiedName()
public bool get_canHaveAnyAttribute()
public IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription()
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public bool AcceptsAttributeBag(IUxmlAttributes bag, CreationContext cc)
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
internal UnityEngine.UIElements.IVisualElementPanelActivatable {
public VisualElement element
public VisualElement get_element()
public bool CanBeActivated()
public void OnPanelActivate()
public void OnPanelDeactivate()
}
public UnityEngine.UIElements.IVisualElementScheduledItem {
public VisualElement element
public bool isActive
public VisualElement get_element()
public bool get_isActive()
public void Resume()
public void Pause()
public void ExecuteLater(long delayMs)
public IVisualElementScheduledItem StartingIn(long delayMs)
public IVisualElementScheduledItem Every(long intervalMs)
public IVisualElementScheduledItem Until(Func`1<bool> stopCondition)
public IVisualElementScheduledItem ForDuration(long durationMs)
}
public UnityEngine.UIElements.IVisualElementScheduler {
public IVisualElementScheduledItem Execute(Action`1<TimerState> timerUpdateEvent)
public IVisualElementScheduledItem Execute(Action updateEvent)
}
internal UnityEngine.UIElements.IVisualTreeUpdater {
public BaseVisualElementPanel panel
public ProfilerMarker profilerMarker
public BaseVisualElementPanel get_panel()
public void set_panel(BaseVisualElementPanel value)
public ProfilerMarker get_profilerMarker()
public void Update()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
}
public UnityEngine.UIElements.Justify : Enum {
public int value__
public Justify FlexStart
public Justify Center
public Justify FlexEnd
public Justify SpaceBetween
public Justify SpaceAround
}
public UnityEngine.UIElements.KeyboardEventBase`1 : EventBase`1<T> {
private EventModifiers <modifiers>k__BackingField
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
public EventModifiers modifiers
public char character
public KeyCode keyCode
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public char get_character()
protected void set_character(char value)
public KeyCode get_keyCode()
protected void set_keyCode(KeyCode value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
protected void Init()
private void LocalInit()
public T GetPooled(char c, KeyCode keyCode, EventModifiers modifiers)
public T GetPooled(Event systemEvent)
}
internal UnityEngine.UIElements.KeyboardEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.KeyboardNavigationManipulator : Manipulator {
private Action`2<KeyboardNavigationOperation, EventBase> m_Action
public void .ctor(Action`2<KeyboardNavigationOperation, EventBase> action)
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
internal void OnKeyDown(KeyDownEvent evt)
private void OnRuntimeKeyDown(KeyDownEvent evt)
private void OnEditorKeyDown(KeyDownEvent evt)
private void OnNavigationCancel(NavigationCancelEvent evt)
private void OnNavigationSubmit(NavigationSubmitEvent evt)
private void OnNavigationMove(NavigationMoveEvent evt)
private void Invoke(KeyboardNavigationOperation operation, EventBase evt)
internal KeyboardNavigationOperation <OnRuntimeKeyDown>g__GetOperation|5_0(<>c__DisplayClass5_0& )
internal KeyboardNavigationOperation <OnEditorKeyDown>g__GetOperation|6_0(<>c__DisplayClass6_0& )
}
public UnityEngine.UIElements.KeyboardNavigationOperation : Enum {
public int value__
public KeyboardNavigationOperation None
public KeyboardNavigationOperation SelectAll
public KeyboardNavigationOperation Cancel
public KeyboardNavigationOperation Submit
public KeyboardNavigationOperation Previous
public KeyboardNavigationOperation Next
public KeyboardNavigationOperation PageUp
public KeyboardNavigationOperation PageDown
public KeyboardNavigationOperation Begin
public KeyboardNavigationOperation End
}
internal UnityEngine.UIElements.KeyboardTextEditorEventHandler : TextEditorEventHandler {
internal int kDragThreshold
internal bool m_Changed
private bool m_Dragged
private bool m_DragToPosition
private bool m_SelectAllOnMouseUp
private string m_PreDrawCursorText
private bool m_IsClicking
private Vector2 m_ClickStartPosition
private Event m_ImguiEvent
private bool isClicking
private bool get_isClicking()
private void set_isClicking(bool value)
public void .ctor(TextEditorEngine editorEngine, ITextInputField textInputField)
public void ExecuteDefaultActionAtTarget(EventBase evt)
private void OnFocus(FocusEvent _)
private void OnBlur(BlurEvent _)
private void OnMouseDown(MouseDownEvent evt)
private void OnMouseUp(MouseUpEvent evt)
private void OnMouseMove(MouseMoveEvent evt)
private void ProcessDragMove(MouseMoveEvent evt)
private bool MoveDistanceQualifiesForDrag(Vector2 start, Vector2 current)
private void OnKeyDown(KeyDownEvent evt)
private void OnValidateCommandEvent(ValidateCommandEvent evt)
private void OnExecuteCommandEvent(ExecuteCommandEvent evt)
public void PreDrawCursor(string newText)
public void PostDrawCursor()
}
public UnityEngine.UIElements.KeyDownEvent : KeyboardEventBase`1<KeyDownEvent> {
internal void GetEquivalentImguiEvent(Event outImguiEvent)
}
public UnityEngine.UIElements.Label : TextElement {
public string ussClassName
public void .ctor(string text)
}
internal UnityEngine.UIElements.LayoutData : ValueType {
public Align alignContent
public Align alignItems
public Align alignSelf
public float borderBottomWidth
public float borderLeftWidth
public float borderRightWidth
public float borderTopWidth
public Length bottom
public DisplayStyle display
public Length flexBasis
public FlexDirection flexDirection
public float flexGrow
public float flexShrink
public Wrap flexWrap
public Length height
public Justify justifyContent
public Length left
public Length marginBottom
public Length marginLeft
public Length marginRight
public Length marginTop
public Length maxHeight
public Length maxWidth
public Length minHeight
public Length minWidth
public Length paddingBottom
public Length paddingLeft
public Length paddingRight
public Length paddingTop
public Position position
public Length right
public Length top
public Length width
public LayoutData Copy()
public void CopyFrom(LayoutData& other)
public bool op_Equality(LayoutData lhs, LayoutData rhs)
public bool op_Inequality(LayoutData lhs, LayoutData rhs)
public bool Equals(LayoutData other)
public bool Equals(object obj)
public int GetHashCode()
}
public UnityEngine.UIElements.Length : ValueType {
private float k_MaxValue
private float m_Value
private Unit m_Unit
public float value
public LengthUnit unit
public Length Percent(float value)
internal Length Auto()
internal Length None()
public float get_value()
public void set_value(float value)
public LengthUnit get_unit()
public void set_unit(LengthUnit value)
internal bool IsAuto()
internal bool IsNone()
public void .ctor(float value)
public void .ctor(float value, LengthUnit unit)
private void .ctor(float value, Unit unit)
public Length op_Implicit(float value)
public bool op_Equality(Length lhs, Length rhs)
public bool op_Inequality(Length lhs, Length rhs)
public bool Equals(Length other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.LengthUnit : Enum {
public int value__
public LengthUnit Pixel
public LengthUnit Percent
}
internal UnityEngine.UIElements.ListDragAndDropArgs : ValueType {
private object <target>k__BackingField
private int <insertAtIndex>k__BackingField
private DragAndDropPosition <dragAndDropPosition>k__BackingField
private IDragAndDropData <dragAndDropData>k__BackingField
public object target
public int insertAtIndex
public DragAndDropPosition dragAndDropPosition
public IDragAndDropData dragAndDropData
public object get_target()
public void set_target(object value)
public int get_insertAtIndex()
public void set_insertAtIndex(int value)
public DragAndDropPosition get_dragAndDropPosition()
public void set_dragAndDropPosition(DragAndDropPosition value)
public IDragAndDropData get_dragAndDropData()
public void set_dragAndDropData(IDragAndDropData value)
}
public UnityEngine.UIElements.ListView : BaseVerticalCollectionView {
private bool m_ShowBoundCollectionSize
private bool m_ShowFoldoutHeader
private string m_HeaderTitle
private Action`1<IEnumerable`1<int>> itemsAdded
private Action`1<IEnumerable`1<int>> itemsRemoved
private Label m_EmptyListLabel
private Foldout m_Foldout
private TextField m_ArraySizeField
private VisualElement m_Footer
private Button m_AddButton
private Button m_RemoveButton
private Action`1<IEnumerable`1<int>> m_ItemAddedCallback
private Action`1<IEnumerable`1<int>> m_ItemRemovedCallback
private Action m_ItemsSourceSizeChangedCallback
private ListViewController m_ListViewController
private ListViewReorderMode m_ReorderMode
public string ussClassName
public string itemUssClassName
public string emptyLabelUssClassName
public string reorderableUssClassName
public string reorderableItemUssClassName
public string reorderableItemContainerUssClassName
public string reorderableItemHandleUssClassName
public string reorderableItemHandleBarUssClassName
public string footerUssClassName
public string foldoutHeaderUssClassName
public string arraySizeFieldUssClassName
public string listViewWithHeaderUssClassName
public string listViewWithFooterUssClassName
public string scrollViewWithFooterUssClassName
internal string footerAddButtonName
internal string footerRemoveButtonName
public bool showBoundCollectionSize
internal bool sourceIncludesArraySize
public bool showFoldoutHeader
public string headerTitle
public bool showAddRemoveFooter
internal Foldout headerFoldout
internal ListViewController viewController
public ListViewReorderMode reorderMode
public bool get_showBoundCollectionSize()
public void set_showBoundCollectionSize(bool value)
internal bool get_sourceIncludesArraySize()
public bool get_showFoldoutHeader()
public void set_showFoldoutHeader(bool value)
private void SetupArraySizeField()
public string get_headerTitle()
public void set_headerTitle(string value)
public bool get_showAddRemoveFooter()
public void set_showAddRemoveFooter(bool value)
internal Foldout get_headerFoldout()
private void EnableFooter(bool enabled)
public void add_itemsAdded(Action`1<IEnumerable`1<int>> value)
public void remove_itemsAdded(Action`1<IEnumerable`1<int>> value)
public void add_itemsRemoved(Action`1<IEnumerable`1<int>> value)
public void remove_itemsRemoved(Action`1<IEnumerable`1<int>> value)
private void AddItems(int itemCount)
private void RemoveItems(List`1<int> indices)
private void OnArraySizeFieldChanged(ChangeEvent`1<string> evt)
private void UpdateArraySizeField()
private void UpdateEmpty()
private void OnAddClicked()
private void OnRemoveClicked()
internal ListViewController get_viewController()
private protected void CreateVirtualizationController()
private protected void CreateViewController()
internal void SetViewController(ListViewController controller)
private void OnItemAdded(IEnumerable`1<int> indices)
private void OnItemsRemoved(IEnumerable`1<int> indices)
private void OnItemsSourceSizeChanged()
public ListViewReorderMode get_reorderMode()
public void set_reorderMode(ListViewReorderMode value)
internal ListViewDragger CreateDragger()
internal ICollectionDragAndDropController CreateDragAndDropController()
public void .ctor(IList itemsSource, float itemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, int> bindItem)
private protected void PostRefresh()
private void <OnAddClicked>b__35_0()
}
internal UnityEngine.UIElements.ListViewController : CollectionViewController {
private Action itemsSourceSizeChanged
private Action`1<IEnumerable`1<int>> itemsAdded
private Action`1<IEnumerable`1<int>> itemsRemoved
private ListView listView
public void add_itemsSourceSizeChanged(Action value)
public void remove_itemsSourceSizeChanged(Action value)
public void add_itemsAdded(Action`1<IEnumerable`1<int>> value)
public void remove_itemsAdded(Action`1<IEnumerable`1<int>> value)
public void add_itemsRemoved(Action`1<IEnumerable`1<int>> value)
public void remove_itemsRemoved(Action`1<IEnumerable`1<int>> value)
private ListView get_listView()
internal void InvokeMakeItem(ReusableCollectionItem reusableItem)
internal void InvokeBindItem(ReusableCollectionItem reusableItem, int index)
public bool NeedsDragHandle(int index)
public void AddItems(int itemCount)
public void Move(int index, int newIndex)
public void RemoveItem(int index)
public void RemoveItems(List`1<int> indices)
protected void RaiseOnSizeChanged()
protected void RaiseItemsAdded(IEnumerable`1<int> indices)
protected void RaiseItemsRemoved(IEnumerable`1<int> indices)
private Array AddToArray(Array source, int itemCount)
private Array RemoveFromArray(Array source, List`1<int> indicesToRemove)
private void Swap(int lhs, int rhs)
private void EnsureItemSourceCanBeResized()
}
internal UnityEngine.UIElements.ListViewDragger : DragEventsProcessor {
private DragPosition m_LastDragPosition
private VisualElement m_DragHoverBar
private int k_AutoScrollAreaSize
private int k_BetweenElementsAreaSize
private int k_PanSpeed
private int k_DragHoverBarHeight
private ICollectionDragAndDropController <dragAndDropController>k__BackingField
protected BaseVerticalCollectionView targetListView
protected ScrollView targetScrollView
public ICollectionDragAndDropController dragAndDropController
protected BaseVerticalCollectionView get_targetListView()
protected ScrollView get_targetScrollView()
public ICollectionDragAndDropController get_dragAndDropController()
public void set_dragAndDropController(ICollectionDragAndDropController value)
public void .ctor(BaseVerticalCollectionView listView)
protected bool CanStartDrag(Vector3 pointerPosition)
protected StartDragArgs StartDrag(Vector3 pointerPosition)
protected DragVisualMode UpdateDrag(Vector3 pointerPosition)
private DragVisualMode GetVisualMode(Vector3 pointerPosition, DragPosition& dragPosition)
protected void OnDrop(Vector3 pointerPosition)
internal void HandleDragAndScroll(Vector2 pointerPosition)
protected void ApplyDragAndDropUI(DragPosition dragPosition)
protected bool TryGetDragPosition(Vector2 pointerPosition, DragPosition& dragPosition)
private ListDragAndDropArgs MakeDragAndDropArgs(DragPosition dragPosition)
private void PlaceHoverBarAtElement(VisualElement element)
private void PlaceHoverBarAt(float top)
protected void ClearDragAndDropUI()
protected ReusableCollectionItem GetRecycledItem(Vector3 pointerPosition)
private void <ApplyDragAndDropUI>b__22_0(GeometryChangedEvent e)
}
internal UnityEngine.UIElements.ListViewDraggerAnimated : ListViewDragger {
private int m_DragStartIndex
private int m_CurrentIndex
private float m_SelectionHeight
private float m_LocalOffsetOnStart
private Vector3 m_CurrentPointerPosition
private ReusableCollectionItem m_Item
private ReusableCollectionItem m_OffsetItem
public bool isDragging
public ReusableCollectionItem draggedItem
internal bool supportsDragEvents
public bool get_isDragging()
public ReusableCollectionItem get_draggedItem()
internal bool get_supportsDragEvents()
public void .ctor(BaseVerticalCollectionView listView)
protected StartDragArgs StartDrag(Vector3 pointerPosition)
protected DragVisualMode UpdateDrag(Vector3 pointerPosition)
private void Animate(ReusableCollectionItem element, float paddingTop)
protected void OnDrop(Vector3 pointerPosition)
protected void ClearDragAndDropUI()
protected bool TryGetDragPosition(Vector2 pointerPosition, DragPosition& dragPosition)
}
internal UnityEngine.UIElements.ListViewDraggerExtension : object {
public ReusableCollectionItem GetRecycledItemFromIndex(BaseVerticalCollectionView listView, int index)
}
internal UnityEngine.UIElements.ListViewReorderableDragAndDropController : BaseReorderableDragAndDropController {
protected ListView m_ListView
public void .ctor(ListView view)
public DragVisualMode HandleDragAndDrop(IListDragAndDropArgs args)
public void OnDrop(IListDragAndDropArgs args)
}
public UnityEngine.UIElements.ListViewReorderMode : Enum {
public int value__
public ListViewReorderMode Simple
public ListViewReorderMode Animated
}
internal UnityEngine.UIElements.LoadResourceFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Object Invoke(string pathName, Type type, float dpiScaling)
public IAsyncResult BeginInvoke(string pathName, Type type, float dpiScaling, AsyncCallback callback, object object)
public Object EndInvoke(IAsyncResult result)
}
public UnityEngine.UIElements.Manipulator : object {
private VisualElement m_Target
public VisualElement target
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
public VisualElement get_target()
public void set_target(VisualElement value)
}
public UnityEngine.UIElements.ManipulatorActivationFilter : ValueType {
private MouseButton <button>k__BackingField
private EventModifiers <modifiers>k__BackingField
private int <clickCount>k__BackingField
public MouseButton button
public EventModifiers modifiers
public int clickCount
public MouseButton get_button()
public void set_button(MouseButton value)
public EventModifiers get_modifiers()
public void set_modifiers(EventModifiers value)
public int get_clickCount()
public void set_clickCount(int value)
public bool Equals(object obj)
public bool Equals(ManipulatorActivationFilter other)
public int GetHashCode()
public bool Matches(IMouseEvent e)
private bool HasModifiers(IMouseEvent e)
public bool Matches(IPointerEvent e)
private bool HasModifiers(IPointerEvent e)
private bool MatchModifiers(bool alt, bool ctrl, bool shift, bool command)
public bool op_Equality(ManipulatorActivationFilter filter1, ManipulatorActivationFilter filter2)
public bool op_Inequality(ManipulatorActivationFilter filter1, ManipulatorActivationFilter filter2)
}
public UnityEngine.UIElements.MeshGenerationContext : object {
internal IStylePainter painter
public VisualElement visualElement
public VisualElement get_visualElement()
internal void .ctor(IStylePainter painter)
public MeshWriteData Allocate(int vertexCount, int indexCount, Texture texture)
internal MeshWriteData Allocate(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags)
}
internal UnityEngine.UIElements.MeshGenerationContextUtils : object {
public void Rectangle(MeshGenerationContext mgc, RectangleParams rectParams)
public void Border(MeshGenerationContext mgc, BorderParams borderParams)
public void Text(MeshGenerationContext mgc, TextParams textParams, ITextHandle handle, float pixelsPerPoint)
private Vector2 ConvertBorderRadiusPercentToPoints(Vector2 borderRectSize, Length length)
public void GetVisualElementRadii(VisualElement ve, Vector2& topLeft, Vector2& bottomLeft, Vector2& topRight, Vector2& bottomRight)
public void AdjustBackgroundSizeForBorders(VisualElement visualElement, Rect& rect)
}
public UnityEngine.UIElements.MeshWriteData : object {
internal NativeSlice`1<Vertex> m_Vertices
internal NativeSlice`1<ushort> m_Indices
internal Rect m_UVRegion
internal int currentIndex
internal int currentVertex
public int vertexCount
public int indexCount
public Rect uvRegion
public int get_vertexCount()
public int get_indexCount()
public Rect get_uvRegion()
public void SetNextVertex(Vertex vertex)
public void SetNextIndex(ushort index)
public void SetAllVertices(Vertex[] vertices)
public void SetAllVertices(NativeSlice`1<Vertex> vertices)
public void SetAllIndices(UInt16[] indices)
public void SetAllIndices(NativeSlice`1<ushort> indices)
internal void Reset(NativeSlice`1<Vertex> vertices, NativeSlice`1<ushort> indices)
internal void Reset(NativeSlice`1<Vertex> vertices, NativeSlice`1<ushort> indices, Rect uvRegion)
}
public UnityEngine.UIElements.MinMaxSlider : BaseField`1<Vector2> {
private VisualElement <dragElement>k__BackingField
private VisualElement <dragMinThumb>k__BackingField
private VisualElement <dragMaxThumb>k__BackingField
private ClampedDragger`1<float> <clampedDragger>k__BackingField
private Vector2 m_DragElementStartPos
private Vector2 m_ValueStartPos
private Rect m_DragMinThumbRect
private Rect m_DragMaxThumbRect
private DragState m_DragState
private float m_MinLimit
private float m_MaxLimit
internal float kDefaultHighValue
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string trackerUssClassName
public string draggerUssClassName
public string minThumbUssClassName
public string maxThumbUssClassName
internal VisualElement dragElement
internal VisualElement dragMinThumb
internal VisualElement dragMaxThumb
internal ClampedDragger`1<float> clampedDragger
public float minValue
public float maxValue
public Vector2 value
public float range
public float lowLimit
public float highLimit
internal VisualElement get_dragElement()
private void set_dragElement(VisualElement value)
internal VisualElement get_dragMinThumb()
private void set_dragMinThumb(VisualElement value)
internal VisualElement get_dragMaxThumb()
private void set_dragMaxThumb(VisualElement value)
internal ClampedDragger`1<float> get_clampedDragger()
private void set_clampedDragger(ClampedDragger`1<float> value)
public float get_minValue()
public void set_minValue(float value)
public float get_maxValue()
public void set_maxValue(float value)
public Vector2 get_value()
public void set_value(Vector2 value)
public void SetValueWithoutNotify(Vector2 newValue)
public float get_range()
public float get_lowLimit()
public void set_lowLimit(float value)
public float get_highLimit()
public void set_highLimit(float value)
public void .ctor(float minValue, float maxValue, float minLimit, float maxLimit)
public void .ctor(string label, float minValue, float maxValue, float minLimit, float maxLimit)
private Vector2 ClampValues(Vector2 valueToClamp)
private void UpdateDragElementPosition(GeometryChangedEvent evt)
private void UpdateDragElementPosition()
internal float SliderLerpUnclamped(float a, float b, float interpolant)
internal float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue)
private float ComputeValueFromPosition(float positionToConvert)
protected void ExecuteDefaultAction(EventBase evt)
private void SetSliderValueFromDrag()
private void SetSliderValueFromClick()
private void ComputeValueDragStateNoThumb(float lowLimitPosition, float highLimitPosition, float dragElementPos)
private void ComputeValueFromDraggingThumb(float dragElementStartPos, float dragElementEndPos)
protected void UpdateMixedValueContent()
}
public UnityEngine.UIElements.MouseButton : Enum {
public int value__
public MouseButton LeftMouse
public MouseButton RightMouse
public MouseButton MiddleMouse
}
public UnityEngine.UIElements.MouseCaptureController : object {
private bool m_IsMouseCapturedWarningEmitted
private bool m_ReleaseMouseWarningEmitted
public bool IsMouseCaptured()
public bool HasMouseCapture(IEventHandler handler)
public void CaptureMouse(IEventHandler handler)
public void ReleaseMouse(IEventHandler handler)
public void ReleaseMouse()
}
internal UnityEngine.UIElements.MouseCaptureDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.MouseCaptureEventBase`1 : PointerCaptureEventBase`1<T> {
public IEventHandler relatedTarget
public IEventHandler get_relatedTarget()
public T GetPooled(IEventHandler target, IEventHandler relatedTarget)
protected void Init()
}
public UnityEngine.UIElements.MouseDownEvent : MouseEventBase`1<MouseDownEvent> {
protected void Init()
private void LocalInit()
public MouseDownEvent GetPooled(Event systemEvent)
private MouseDownEvent MakeFromPointerEvent(IPointerEvent pointerEvent)
internal MouseDownEvent GetPooled(PointerDownEvent pointerEvent)
internal MouseDownEvent GetPooled(PointerMoveEvent pointerEvent)
}
public UnityEngine.UIElements.MouseEnterEvent : MouseEventBase`1<MouseEnterEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.MouseEnterWindowEvent : MouseEventBase`1<MouseEnterWindowEvent> {
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.MouseEventBase`1 : EventBase`1<T> {
private EventModifiers <modifiers>k__BackingField
private Vector2 <mousePosition>k__BackingField
private Vector2 <localMousePosition>k__BackingField
private Vector2 <mouseDelta>k__BackingField
private int <clickCount>k__BackingField
private int <button>k__BackingField
private int <pressedButtons>k__BackingField
private bool <UnityEngine.UIElements.IMouseEventInternal.triggeredByOS>k__BackingField
private bool <UnityEngine.UIElements.IMouseEventInternal.recomputeTopElementUnderMouse>k__BackingField
private IPointerEvent <UnityEngine.UIElements.IMouseEventInternal.sourcePointerEvent>k__BackingField
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
public Vector2 mouseDelta
public int clickCount
public int button
public int pressedButtons
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
private bool UnityEngine.UIElements.IMouseEventInternal.triggeredByOS
private bool UnityEngine.UIElements.IMouseEventInternal.recomputeTopElementUnderMouse
private IPointerEvent UnityEngine.UIElements.IMouseEventInternal.sourcePointerEvent
public IEventHandler currentTarget
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public Vector2 get_mousePosition()
protected void set_mousePosition(Vector2 value)
public Vector2 get_localMousePosition()
internal void set_localMousePosition(Vector2 value)
public Vector2 get_mouseDelta()
protected void set_mouseDelta(Vector2 value)
public int get_clickCount()
protected void set_clickCount(int value)
public int get_button()
protected void set_button(int value)
public int get_pressedButtons()
protected void set_pressedButtons(int value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
private bool UnityEngine.UIElements.IMouseEventInternal.get_triggeredByOS()
private void UnityEngine.UIElements.IMouseEventInternal.set_triggeredByOS(bool value)
private bool UnityEngine.UIElements.IMouseEventInternal.get_recomputeTopElementUnderMouse()
private void UnityEngine.UIElements.IMouseEventInternal.set_recomputeTopElementUnderMouse(bool value)
private IPointerEvent UnityEngine.UIElements.IMouseEventInternal.get_sourcePointerEvent()
private void UnityEngine.UIElements.IMouseEventInternal.set_sourcePointerEvent(IPointerEvent value)
protected void Init()
private void LocalInit()
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
protected internal void PreDispatch(IPanel panel)
protected internal void PostDispatch(IPanel panel)
public T GetPooled(Event systemEvent)
public T GetPooled(Vector2 position, int button, int clickCount, Vector2 delta, EventModifiers modifiers)
internal T GetPooled(Vector2 position, int button, int clickCount, Vector2 delta, EventModifiers modifiers, bool fromOS)
internal T GetPooled(IMouseEvent triggerEvent, Vector2 mousePosition, bool recomputeTopElementUnderMouse)
public T GetPooled(IMouseEvent triggerEvent)
protected T GetPooled(IPointerEvent pointerEvent)
}
internal UnityEngine.UIElements.MouseEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel iPanel)
private bool SendEventToTarget(EventBase evt, BaseVisualElementPanel panel)
private bool SendEventToRegularTarget(EventBase evt, BaseVisualElementPanel panel)
private bool SendEventToIMGUIContainer(EventBase evt, BaseVisualElementPanel panel)
private void SetBestTargetForEvent(EventBase evt, BaseVisualElementPanel panel)
private void UpdateElementUnderMouse(EventBase evt, BaseVisualElementPanel panel, VisualElement& elementUnderMouse)
private bool IsDone(EventBase evt)
}
internal UnityEngine.UIElements.MouseEventsHelper : object {
internal void SendEnterLeave(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, IMouseEvent triggerEvent, Vector2 mousePosition)
internal void SendMouseOverMouseOut(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, IMouseEvent triggerEvent, Vector2 mousePosition)
}
public UnityEngine.UIElements.MouseLeaveEvent : MouseEventBase`1<MouseLeaveEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.MouseLeaveWindowEvent : MouseEventBase`1<MouseLeaveWindowEvent> {
protected void Init()
private void LocalInit()
public MouseLeaveWindowEvent GetPooled(Event systemEvent)
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.MouseManipulator : Manipulator {
private List`1<ManipulatorActivationFilter> <activators>k__BackingField
private ManipulatorActivationFilter m_currentActivator
public List`1<ManipulatorActivationFilter> activators
public List`1<ManipulatorActivationFilter> get_activators()
private void set_activators(List`1<ManipulatorActivationFilter> value)
protected bool CanStartManipulation(IMouseEvent e)
protected bool CanStopManipulation(IMouseEvent e)
}
public UnityEngine.UIElements.MouseMoveEvent : MouseEventBase`1<MouseMoveEvent> {
protected void Init()
private void LocalInit()
public MouseMoveEvent GetPooled(Event systemEvent)
internal MouseMoveEvent GetPooled(PointerMoveEvent pointerEvent)
}
public UnityEngine.UIElements.MouseUpEvent : MouseEventBase`1<MouseUpEvent> {
protected void Init()
private void LocalInit()
public MouseUpEvent GetPooled(Event systemEvent)
private MouseUpEvent MakeFromPointerEvent(IPointerEvent pointerEvent)
internal MouseUpEvent GetPooled(PointerUpEvent pointerEvent)
internal MouseUpEvent GetPooled(PointerMoveEvent pointerEvent)
internal MouseUpEvent GetPooled(PointerCancelEvent pointerEvent)
}
internal UnityEngine.UIElements.NavigateFocusRing : object {
public ChangeDirection Left
public ChangeDirection Right
public ChangeDirection Up
public ChangeDirection Down
public ChangeDirection Next
public ChangeDirection Previous
private VisualElement m_Root
private VisualElementFocusRing m_Ring
private FocusController focusController
private FocusController get_focusController()
public void .ctor(VisualElement root)
public FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e)
public Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction)
private Focusable GetNextFocusable2D(Focusable currentFocusable, ChangeDirection direction)
private bool IsActive(VisualElement v)
private bool IsNavigable(Focusable focusable)
}
public UnityEngine.UIElements.NavigationEventBase`1 : EventBase`1<T> {
protected void Init()
private void LocalInit()
}
internal UnityEngine.UIElements.NavigationEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.NavigationMoveEvent : NavigationEventBase`1<NavigationMoveEvent> {
private Direction <direction>k__BackingField
private Vector2 <move>k__BackingField
public Direction direction
public Vector2 move
internal Direction DetermineMoveDirection(float x, float y, float deadZone)
public Direction get_direction()
private void set_direction(Direction value)
public Vector2 get_move()
private void set_move(Vector2 value)
public NavigationMoveEvent GetPooled(Vector2 moveVector)
internal NavigationMoveEvent GetPooled(Direction direction)
protected void Init()
}
internal UnityEngine.UIElements.NavigationTabEvent : NavigationEventBase`1<NavigationTabEvent> {
private Direction <direction>k__BackingField
public Direction direction
public Direction get_direction()
private void set_direction(Direction value)
internal Direction DetermineMoveDirection(int moveValue)
public NavigationTabEvent GetPooled(int moveValue)
protected void Init()
}
internal UnityEngine.UIElements.ObjectListPool`1 : object {
private ObjectPool`1<List`1<T>> pool
public List`1<T> Get()
public void Release(List`1<T> elements)
}
internal UnityEngine.UIElements.ObjectPool`1 : object {
private Stack`1<T> m_Stack
private int m_MaxSize
public int maxSize
public int get_maxSize()
public void set_maxSize(int value)
public void .ctor(int maxSize)
public int Size()
public void Clear()
public T Get()
public void Release(T element)
}
public UnityEngine.UIElements.Overflow : Enum {
public int value__
public Overflow Visible
public Overflow Hidden
}
public UnityEngine.UIElements.OverflowClipBox : Enum {
public int value__
public OverflowClipBox PaddingBox
public OverflowClipBox ContentBox
}
internal UnityEngine.UIElements.OverflowInternal : Enum {
public int value__
public OverflowInternal Visible
public OverflowInternal Hidden
public OverflowInternal Scroll
}
internal UnityEngine.UIElements.Panel : BaseVisualElementPanel {
private VisualElement m_RootContainer
private VisualTreeUpdater m_VisualTreeUpdater
private IStylePropertyAnimationSystem m_StylePropertyAnimationSystem
private string m_PanelName
private UInt32 m_Version
private UInt32 m_RepaintVersion
private UInt32 m_HierarchyVersion
private ProfilerMarker m_MarkerBeforeUpdate
private ProfilerMarker m_MarkerUpdate
private ProfilerMarker m_MarkerLayout
private ProfilerMarker m_MarkerBindings
private ProfilerMarker m_MarkerAnimations
private ProfilerMarker s_MarkerPickAll
private EventDispatcher <dispatcher>k__BackingField
private TimerEventScheduler m_Scheduler
private ScriptableObject <ownerObject>k__BackingField
private ContextType <contextType>k__BackingField
private SavePersistentViewData <saveViewData>k__BackingField
private GetViewDataDictionary <getViewDataDictionary>k__BackingField
private FocusController <focusController>k__BackingField
private EventInterests <IMGUIEventInterests>k__BackingField
private LoadResourceFunction <loadResourceFunc>k__BackingField
private TimeMsFunction <TimeSinceStartup>k__BackingField
private int <IMGUIContainersCount>k__BackingField
private IMGUIContainer <rootIMGUIContainer>k__BackingField
private Shader m_StandardShader
private AtlasBase m_Atlas
private bool m_ValidatingLayout
private Action`1<Panel> beforeAnyRepaint
public VisualElement visualTree
public EventDispatcher dispatcher
public TimerEventScheduler timerEventScheduler
internal IScheduler scheduler
internal VisualTreeUpdater visualTreeUpdater
internal IStylePropertyAnimationSystem styleAnimationSystem
public ScriptableObject ownerObject
public ContextType contextType
public SavePersistentViewData saveViewData
public GetViewDataDictionary getViewDataDictionary
public FocusController focusController
public EventInterests IMGUIEventInterests
internal LoadResourceFunction loadResourceFunc
internal string name
internal TimeMsFunction TimeSinceStartup
public int IMGUIContainersCount
public IMGUIContainer rootIMGUIContainer
internal UInt32 version
internal UInt32 repaintVersion
internal UInt32 hierarchyVersion
internal Shader standardShader
public AtlasBase atlas
public VisualElement get_visualTree()
public EventDispatcher get_dispatcher()
public void set_dispatcher(EventDispatcher value)
public TimerEventScheduler get_timerEventScheduler()
internal IScheduler get_scheduler()
internal VisualTreeUpdater get_visualTreeUpdater()
internal IStylePropertyAnimationSystem get_styleAnimationSystem()
internal void set_styleAnimationSystem(IStylePropertyAnimationSystem value)
public ScriptableObject get_ownerObject()
protected void set_ownerObject(ScriptableObject value)
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public SavePersistentViewData get_saveViewData()
public void set_saveViewData(SavePersistentViewData value)
public GetViewDataDictionary get_getViewDataDictionary()
public void set_getViewDataDictionary(GetViewDataDictionary value)
public FocusController get_focusController()
public void set_focusController(FocusController value)
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
private LoadResourceFunction get_loadResourceFunc()
internal void set_loadResourceFunc(LoadResourceFunction value)
internal Object LoadResource(string pathName, Type type, float dpiScaling)
internal void Focus()
internal void Blur()
internal string get_name()
internal void set_name(string value)
private void CreateMarkers()
private TimeMsFunction get_TimeSinceStartup()
internal void set_TimeSinceStartup(TimeMsFunction value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
public IMGUIContainer get_rootIMGUIContainer()
public void set_rootIMGUIContainer(IMGUIContainer value)
internal UInt32 get_version()
internal UInt32 get_repaintVersion()
internal UInt32 get_hierarchyVersion()
internal Shader get_standardShader()
internal void set_standardShader(Shader value)
public AtlasBase get_atlas()
public void set_atlas(AtlasBase value)
internal Panel CreateEditorPanel(ScriptableObject ownerObject)
public void .ctor(ScriptableObject ownerObject, ContextType contextType, EventDispatcher dispatcher)
protected void Dispose(bool disposing)
public long TimeSinceStartupMs()
internal long DefaultTimeSinceStartupMs()
internal VisualElement PickAllWithoutValidatingLayout(VisualElement root, Vector2 point)
private VisualElement PickAll(VisualElement root, Vector2 point, List`1<VisualElement> picked)
private VisualElement PerformPick(VisualElement root, Vector2 point, List`1<VisualElement> picked)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
public VisualElement Pick(Vector2 point)
public void ValidateLayout()
public void UpdateAnimations()
public void UpdateBindings()
public void ApplyStyles()
private void UpdateForRepaint()
internal void add_beforeAnyRepaint(Action`1<Panel> value)
internal void remove_beforeAnyRepaint(Action`1<Panel> value)
public void Repaint(Event e)
internal void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
internal void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase)
internal IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase)
internal Vector2Int <Pick>g__PixelOf|99_0(Vector2 p)
}
public UnityEngine.UIElements.PanelChangedEventBase`1 : EventBase`1<T> {
private IPanel <originPanel>k__BackingField
private IPanel <destinationPanel>k__BackingField
public IPanel originPanel
public IPanel destinationPanel
public IPanel get_originPanel()
private void set_originPanel(IPanel value)
public IPanel get_destinationPanel()
private void set_destinationPanel(IPanel value)
protected void Init()
private void LocalInit()
public T GetPooled(IPanel originPanel, IPanel destinationPanel)
}
internal UnityEngine.UIElements.PanelClearFlags : Enum {
public int value__
public PanelClearFlags None
public PanelClearFlags Color
public PanelClearFlags Depth
public PanelClearFlags All
}
internal UnityEngine.UIElements.PanelClearSettings : ValueType {
public bool clearDepthStencil
public bool clearColor
public Color color
}
public UnityEngine.UIElements.PanelScaleMode : Enum {
public int value__
public PanelScaleMode ConstantPixelSize
public PanelScaleMode ConstantPhysicalSize
public PanelScaleMode ScaleWithScreenSize
}
public UnityEngine.UIElements.PanelScreenMatchMode : Enum {
public int value__
public PanelScreenMatchMode MatchWidthOrHeight
public PanelScreenMatchMode Shrink
public PanelScreenMatchMode Expand
}
public UnityEngine.UIElements.PanelSettings : ScriptableObject {
private int k_DefaultSortingOrder
private float k_DefaultScaleValue
internal string k_DefaultStyleSheetPath
private ThemeStyleSheet themeUss
private RenderTexture m_TargetTexture
private PanelScaleMode m_ScaleMode
private float m_Scale
private float DefaultDpi
private float m_ReferenceDpi
private float m_FallbackDpi
private Vector2Int m_ReferenceResolution
private PanelScreenMatchMode m_ScreenMatchMode
private float m_Match
private float m_SortingOrder
private int m_TargetDisplay
private bool m_ClearDepthStencil
private bool m_ClearColor
private Color m_ColorClearValue
private RuntimePanelAccess m_PanelAccess
internal UIDocumentList m_AttachedUIDocumentsList
private DynamicAtlasSettings m_DynamicAtlasSettings
private Shader m_AtlasBlitShader
private Shader m_RuntimeShader
private Shader m_RuntimeWorldShader
public PanelTextSettings textSettings
private Rect m_TargetRect
private float m_ResolvedScale
private StyleSheet m_OldThemeUss
internal int m_EmptyPanelCounter
private float <ScreenDPI>k__BackingField
private Func`2<Vector2, Vector2> m_AssignedScreenToPanel
public ThemeStyleSheet themeStyleSheet
public RenderTexture targetTexture
public PanelScaleMode scaleMode
public float scale
public float referenceDpi
public float fallbackDpi
public Vector2Int referenceResolution
public PanelScreenMatchMode screenMatchMode
public float match
public float sortingOrder
public int targetDisplay
public bool clearDepthStencil
public float depthClearValue
public bool clearColor
public Color colorClearValue
internal BaseRuntimePanel panel
internal VisualElement visualTree
public DynamicAtlasSettings dynamicAtlasSettings
private float ScreenDPI
public ThemeStyleSheet get_themeStyleSheet()
public void set_themeStyleSheet(ThemeStyleSheet value)
public RenderTexture get_targetTexture()
public void set_targetTexture(RenderTexture value)
public PanelScaleMode get_scaleMode()
public void set_scaleMode(PanelScaleMode value)
public float get_scale()
public void set_scale(float value)
public float get_referenceDpi()
public void set_referenceDpi(float value)
public float get_fallbackDpi()
public void set_fallbackDpi(float value)
public Vector2Int get_referenceResolution()
public void set_referenceResolution(Vector2Int value)
public PanelScreenMatchMode get_screenMatchMode()
public void set_screenMatchMode(PanelScreenMatchMode value)
public float get_match()
public void set_match(float value)
public float get_sortingOrder()
public void set_sortingOrder(float value)
internal void ApplySortingOrder()
public int get_targetDisplay()
public void set_targetDisplay(int value)
public bool get_clearDepthStencil()
public void set_clearDepthStencil(bool value)
public float get_depthClearValue()
public bool get_clearColor()
public void set_clearColor(bool value)
public Color get_colorClearValue()
public void set_colorClearValue(Color value)
internal BaseRuntimePanel get_panel()
internal VisualElement get_visualTree()
public DynamicAtlasSettings get_dynamicAtlasSettings()
public void set_dynamicAtlasSettings(DynamicAtlasSettings value)
private void Reset()
private void OnEnable()
private void OnDisable()
internal void DisposePanel()
private float get_ScreenDPI()
private void set_ScreenDPI(float value)
internal void UpdateScreenDPI()
private void ApplyThemeStyleSheet(VisualElement root)
private void InitializeShaders()
internal void ApplyPanelSettings()
public void SetScreenToPanelSpaceFunction(Func`2<Vector2, Vector2> screentoPanelSpaceFunction)
internal float ResolveScale(Rect targetRect, float screenDpi)
internal Rect GetDisplayRect()
internal void AttachAndInsertUIDocumentToVisualTree(UIDocument uiDocument)
internal void DetachUIDocument(UIDocument uiDocument)
}
public UnityEngine.UIElements.PanelTextSettings : TextSettings {
private PanelTextSettings s_DefaultPanelTextSettings
internal Func`2<string, Object> EditorGUIUtilityLoad
internal Func`1<SystemLanguage> GetCurrentLanguage
internal string s_DefaultEditorPanelTextSettingPath
internal PanelTextSettings defaultPanelTextSettings
internal PanelTextSettings get_defaultPanelTextSettings()
internal void UpdateLocalizationFontAsset()
internal FontAsset GetCachedFontAsset(Font font)
}
public UnityEngine.UIElements.PickingMode : Enum {
public int value__
public PickingMode Position
public PickingMode Ignore
}
public UnityEngine.UIElements.PointerCancelEvent : PointerEventBase`1<PointerCancelEvent> {
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
internal UnityEngine.UIElements.PointerCaptureDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.UIElements.PointerCaptureEventBase`1 : EventBase`1<T> {
private IEventHandler <relatedTarget>k__BackingField
private int <pointerId>k__BackingField
public IEventHandler relatedTarget
public int pointerId
public IEventHandler get_relatedTarget()
private void set_relatedTarget(IEventHandler value)
public int get_pointerId()
private void set_pointerId(int value)
protected void Init()
private void LocalInit()
public T GetPooled(IEventHandler target, IEventHandler relatedTarget, int pointerId)
}
public UnityEngine.UIElements.PointerCaptureHelper : object {
private PointerDispatchState GetStateFor(IEventHandler handler)
public bool HasPointerCapture(IEventHandler handler, int pointerId)
public void CapturePointer(IEventHandler handler, int pointerId)
public void ReleasePointer(IEventHandler handler, int pointerId)
public IEventHandler GetCapturingElement(IPanel panel, int pointerId)
public void ReleasePointer(IPanel panel, int pointerId)
internal void ActivateCompatibilityMouseEvents(IPanel panel, int pointerId)
internal void PreventCompatibilityMouseEvents(IPanel panel, int pointerId)
internal bool ShouldSendCompatibilityMouseEvents(IPanel panel, IPointerEvent evt)
internal void ProcessPointerCapture(IPanel panel, int pointerId)
internal void ResetPointerDispatchState(IPanel panel)
}
internal UnityEngine.UIElements.PointerDeviceState : object {
private PointerLocation[] s_PlayerPointerLocations
private Int32[] s_PressedButtons
private IPanel[] s_PlayerPanelWithSoftPointerCapture
internal void Reset()
internal void RemovePanelData(IPanel panel)
public void SavePointerPosition(int pointerId, Vector2 position, IPanel panel, ContextType contextType)
public void PressButton(int pointerId, int buttonId)
public void ReleaseButton(int pointerId, int buttonId)
public void ReleaseAllButtons(int pointerId)
public Vector2 GetPointerPosition(int pointerId, ContextType contextType)
public IPanel GetPanel(int pointerId, ContextType contextType)
private bool HasFlagFast(LocationFlag flagSet, LocationFlag flag)
public bool HasLocationFlag(int pointerId, ContextType contextType, LocationFlag flag)
public int GetPressedButtons(int pointerId)
internal bool HasAdditionalPressedButtons(int pointerId, int exceptButtonId)
internal void SetPlayerPanelWithSoftPointerCapture(int pointerId, IPanel panel)
internal IPanel GetPlayerPanelWithSoftPointerCapture(int pointerId)
}
internal UnityEngine.UIElements.PointerDispatchState : object {
private IEventHandler[] m_PendingPointerCapture
private IEventHandler[] m_PointerCapture
private Boolean[] m_ShouldSendCompatibilityMouseEvents
internal void Reset()
public IEventHandler GetCapturingElement(int pointerId)
public bool HasPointerCapture(IEventHandler handler, int pointerId)
public void CapturePointer(IEventHandler handler, int pointerId)
public void ReleasePointer(int pointerId)
public void ReleasePointer(IEventHandler handler, int pointerId)
public void ProcessPointerCapture(int pointerId)
public void ActivateCompatibilityMouseEvents(int pointerId)
public void PreventCompatibilityMouseEvents(int pointerId)
public bool ShouldSendCompatibilityMouseEvents(IPointerEvent evt)
}
public UnityEngine.UIElements.PointerDownEvent : PointerEventBase`1<PointerDownEvent> {
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.PointerEnterEvent : PointerEventBase`1<PointerEnterEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.PointerEventBase`1 : EventBase`1<T> {
private int <pointerId>k__BackingField
private string <pointerType>k__BackingField
private bool <isPrimary>k__BackingField
private int <button>k__BackingField
private int <pressedButtons>k__BackingField
private Vector3 <position>k__BackingField
private Vector3 <localPosition>k__BackingField
private Vector3 <deltaPosition>k__BackingField
private float <deltaTime>k__BackingField
private int <clickCount>k__BackingField
private float <pressure>k__BackingField
private float <tangentialPressure>k__BackingField
private float <altitudeAngle>k__BackingField
private float <azimuthAngle>k__BackingField
private float <twist>k__BackingField
private Vector2 <radius>k__BackingField
private Vector2 <radiusVariance>k__BackingField
private EventModifiers <modifiers>k__BackingField
private bool <UnityEngine.UIElements.IPointerEventInternal.triggeredByOS>k__BackingField
private bool <UnityEngine.UIElements.IPointerEventInternal.recomputeTopElementUnderPointer>k__BackingField
public int pointerId
public string pointerType
public bool isPrimary
public int button
public int pressedButtons
public Vector3 position
public Vector3 localPosition
public Vector3 deltaPosition
public float deltaTime
public int clickCount
public float pressure
public float tangentialPressure
public float altitudeAngle
public float azimuthAngle
public float twist
public Vector2 radius
public Vector2 radiusVariance
public EventModifiers modifiers
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
private bool UnityEngine.UIElements.IPointerEventInternal.triggeredByOS
private bool UnityEngine.UIElements.IPointerEventInternal.recomputeTopElementUnderPointer
public IEventHandler currentTarget
public int get_pointerId()
protected void set_pointerId(int value)
public string get_pointerType()
protected void set_pointerType(string value)
public bool get_isPrimary()
protected void set_isPrimary(bool value)
public int get_button()
protected void set_button(int value)
public int get_pressedButtons()
protected void set_pressedButtons(int value)
public Vector3 get_position()
protected void set_position(Vector3 value)
public Vector3 get_localPosition()
protected void set_localPosition(Vector3 value)
public Vector3 get_deltaPosition()
protected void set_deltaPosition(Vector3 value)
public float get_deltaTime()
protected void set_deltaTime(float value)
public int get_clickCount()
protected void set_clickCount(int value)
public float get_pressure()
protected void set_pressure(float value)
public float get_tangentialPressure()
protected void set_tangentialPressure(float value)
public float get_altitudeAngle()
protected void set_altitudeAngle(float value)
public float get_azimuthAngle()
protected void set_azimuthAngle(float value)
public float get_twist()
protected void set_twist(float value)
public Vector2 get_radius()
protected void set_radius(Vector2 value)
public Vector2 get_radiusVariance()
protected void set_radiusVariance(Vector2 value)
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
private bool UnityEngine.UIElements.IPointerEventInternal.get_triggeredByOS()
private void UnityEngine.UIElements.IPointerEventInternal.set_triggeredByOS(bool value)
private bool UnityEngine.UIElements.IPointerEventInternal.get_recomputeTopElementUnderPointer()
private void UnityEngine.UIElements.IPointerEventInternal.set_recomputeTopElementUnderPointer(bool value)
protected void Init()
private void LocalInit()
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
private bool IsMouse(Event systemEvent)
public T GetPooled(Event systemEvent)
public T GetPooled(Touch touch, EventModifiers modifiers)
internal T GetPooled(IPointerEvent triggerEvent, Vector2 position, int pointerId)
public T GetPooled(IPointerEvent triggerEvent)
protected internal void PreDispatch(IPanel panel)
protected internal void PostDispatch(IPanel panel)
}
internal UnityEngine.UIElements.PointerEventDispatchingStrategy : object {
public bool CanDispatchEvent(EventBase evt)
public void DispatchEvent(EventBase evt, IPanel panel)
private void SendEventToTarget(EventBase evt)
private void SetBestTargetForEvent(EventBase evt, IPanel panel)
private void UpdateElementUnderPointer(EventBase evt, IPanel panel, VisualElement& elementUnderPointer)
}
internal UnityEngine.UIElements.PointerEventsHelper : object {
internal void SendEnterLeave(VisualElement previousTopElementUnderPointer, VisualElement currentTopElementUnderPointer, IPointerEvent triggerEvent, Vector2 position, int pointerId)
internal void SendOverOut(VisualElement previousTopElementUnderPointer, VisualElement currentTopElementUnderPointer, IPointerEvent triggerEvent, Vector2 position, int pointerId)
}
public UnityEngine.UIElements.PointerId : object {
public int maxPointers
public int invalidPointerId
public int mousePointerId
public int touchPointerIdBase
public int touchPointerCount
public int penPointerIdBase
public int penPointerCount
internal Int32[] hoveringPointers
}
public UnityEngine.UIElements.PointerLeaveEvent : PointerEventBase`1<PointerLeaveEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.PointerManipulator : MouseManipulator {
private int m_CurrentPointerId
protected bool CanStartManipulation(IPointerEvent e)
protected bool CanStopManipulation(IPointerEvent e)
}
public UnityEngine.UIElements.PointerMoveEvent : PointerEventBase`1<PointerMoveEvent> {
private bool <isHandledByDraggable>k__BackingField
internal bool isHandledByDraggable
internal bool get_isHandledByDraggable()
internal void set_isHandledByDraggable(bool value)
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.PointerStationaryEvent : PointerEventBase`1<PointerStationaryEvent> {
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.PointerType : object {
public string mouse
public string touch
public string pen
public string unknown
internal string GetPointerType(int pointerId)
internal bool IsDirectManipulationDevice(string pointerType)
}
public UnityEngine.UIElements.PointerUpEvent : PointerEventBase`1<PointerUpEvent> {
protected void Init()
private void LocalInit()
protected internal void PostDispatch(IPanel panel)
}
public UnityEngine.UIElements.PopupWindow : TextElement {
private VisualElement m_ContentContainer
public string ussClassName
public string contentUssClassName
public VisualElement contentContainer
public VisualElement get_contentContainer()
}
public UnityEngine.UIElements.Position : Enum {
public int value__
public Position Relative
public Position Absolute
}
internal UnityEngine.UIElements.ProjectionUtils : object {
public Matrix4x4 Ortho(float left, float right, float bottom, float top, float near, float far)
}
internal UnityEngine.UIElements.PropagationPaths : object {
private ObjectPool`1<PropagationPaths> s_Pool
public List`1<VisualElement> trickleDownPath
public List`1<VisualElement> targetElements
public List`1<VisualElement> bubbleUpPath
private int k_DefaultPropagationDepth
private int k_DefaultTargetCount
public void .ctor(PropagationPaths paths)
internal PropagationPaths Copy(PropagationPaths paths)
public PropagationPaths Build(VisualElement elem, EventBase evt, Type pathTypesRequested)
public void Release()
}
public UnityEngine.UIElements.PropagationPhase : Enum {
public int value__
public PropagationPhase None
public PropagationPhase TrickleDown
public PropagationPhase AtTarget
public PropagationPhase DefaultActionAtTarget
public PropagationPhase BubbleUp
public PropagationPhase DefaultAction
}
internal UnityEngine.UIElements.PseudoStates : Enum {
public int value__
public PseudoStates Active
public PseudoStates Hover
public PseudoStates Checked
public PseudoStates Disabled
public PseudoStates Focus
public PseudoStates Root
}
public UnityEngine.UIElements.RadioButton : BaseBoolField {
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string checkmarkBackgroundUssClassName
public string checkmarkUssClassName
public string textUssClassName
private VisualElement m_CheckmarkBackground
public bool value
public bool get_value()
public void set_value(bool value)
public void .ctor(string label)
protected void InitLabel()
protected void ToggleValue()
public void SetSelected(bool selected)
public void SetValueWithoutNotify(bool newValue)
private void UpdateCheckmark()
protected void UpdateMixedValueContent()
}
public UnityEngine.UIElements.RadioButtonGroup : BaseField`1<int> {
public string ussClassName
private IEnumerable`1<string> m_Choices
private List`1<RadioButton> m_RadioButtons
private EventCallback`1<ChangeEvent`1<bool>> m_RadioButtonValueChangedCallback
public IEnumerable`1<string> choices
public IEnumerable`1<string> get_choices()
public void set_choices(IEnumerable`1<string> value)
public void .ctor(string label, List`1<string> radioButtonChoices)
private void RadioButtonValueChangedCallback(ChangeEvent`1<bool> evt)
public void SetValueWithoutNotify(int newValue)
private void UpdateRadioButtons()
}
internal UnityEngine.UIElements.RareData : ValueType {
public Cursor cursor
public TextOverflow textOverflow
public Color unityBackgroundImageTintColor
public ScaleMode unityBackgroundScaleMode
public OverflowClipBox unityOverflowClipBox
public int unitySliceBottom
public int unitySliceLeft
public int unitySliceRight
public int unitySliceTop
public TextOverflowPosition unityTextOverflowPosition
public RareData Copy()
public void CopyFrom(RareData& other)
public bool op_Equality(RareData lhs, RareData rhs)
public bool op_Inequality(RareData lhs, RareData rhs)
public bool Equals(RareData other)
public bool Equals(object obj)
public int GetHashCode()
}
internal UnityEngine.UIElements.RenderHints : Enum {
public int value__
public RenderHints None
public RenderHints GroupTransform
public RenderHints BoneTransform
public RenderHints ClipWithScissors
public RenderHints MaskContainer
public RenderHints DynamicColor
public RenderHints DirtyOffset
public RenderHints DirtyGroupTransform
public RenderHints DirtyBoneTransform
public RenderHints DirtyClipWithScissors
public RenderHints DirtyMaskContainer
public RenderHints DirtyAll
}
internal UnityEngine.UIElements.RepaintData : object {
private Matrix4x4 <currentOffset>k__BackingField
private Vector2 <mousePosition>k__BackingField
private Rect <currentWorldClip>k__BackingField
private Event <repaintEvent>k__BackingField
public Matrix4x4 currentOffset
public Vector2 mousePosition
public Rect currentWorldClip
public Event repaintEvent
public Matrix4x4 get_currentOffset()
public void set_currentOffset(Matrix4x4 value)
public Vector2 get_mousePosition()
public void set_mousePosition(Vector2 value)
public Rect get_currentWorldClip()
public void set_currentWorldClip(Rect value)
public Event get_repaintEvent()
public void set_repaintEvent(Event value)
}
public UnityEngine.UIElements.RepeatButton : TextElement {
private Clickable m_Clickable
public string ussClassName
public void .ctor(Action clickEvent, long delay, long interval)
public void SetAction(Action clickEvent, long delay, long interval)
}
internal UnityEngine.UIElements.ReusableCollectionItem : object {
public int UndefinedIndex
private VisualElement <bindableElement>k__BackingField
private ValueAnimation`1<StyleValues> <animator>k__BackingField
private int <index>k__BackingField
private int <id>k__BackingField
private Action`1<ReusableCollectionItem> onGeometryChanged
protected EventCallback`1<GeometryChangedEvent> m_GeometryChangedEventCallback
public VisualElement rootElement
public VisualElement bindableElement
public ValueAnimation`1<StyleValues> animator
public int index
public int id
public VisualElement get_rootElement()
public VisualElement get_bindableElement()
protected void set_bindableElement(VisualElement value)
public ValueAnimation`1<StyleValues> get_animator()
public void set_animator(ValueAnimation`1<StyleValues> value)
public int get_index()
public void set_index(int value)
public int get_id()
public void set_id(int value)
public void add_onGeometryChanged(Action`1<ReusableCollectionItem> value)
public void remove_onGeometryChanged(Action`1<ReusableCollectionItem> value)
public void Init(VisualElement item)
public void PreAttachElement()
public void DetachElement()
public void SetSelected(bool selected)
protected void OnGeometryChanged(GeometryChangedEvent evt)
protected internal VisualElement GetRootElement()
}
internal UnityEngine.UIElements.ReusableListViewItem : ReusableCollectionItem {
private VisualElement m_Container
private VisualElement m_DragHandle
private VisualElement m_ItemContainer
public VisualElement rootElement
public VisualElement get_rootElement()
public void Init(VisualElement item, bool usesAnimatedDragger)
private void UpdateHierarchy(bool usesAnimatedDragger)
public void UpdateDragHandle(bool needsDragHandle)
public void PreAttachElement()
public void DetachElement()
}
internal UnityEngine.UIElements.ReusableTreeViewItem : ReusableCollectionItem {
private Toggle m_Toggle
private VisualElement m_Container
private VisualElement m_IndentContainer
private VisualElement m_BindableContainer
private Action`1<PointerUpEvent> onPointerUp
private Action`1<ChangeEvent`1<bool>> onToggleValueChanged
private ObjectPool`1<VisualElement> m_IndentPool
protected EventCallback`1<PointerUpEvent> m_PointerUpCallback
protected EventCallback`1<ChangeEvent`1<bool>> m_ToggleValueChangedCallback
public VisualElement rootElement
public VisualElement get_rootElement()
public void add_onPointerUp(Action`1<PointerUpEvent> value)
public void remove_onPointerUp(Action`1<PointerUpEvent> value)
public void add_onToggleValueChanged(Action`1<ChangeEvent`1<bool>> value)
public void remove_onToggleValueChanged(Action`1<ChangeEvent`1<bool>> value)
public void Init(VisualElement item)
public void PreAttachElement()
public void DetachElement()
public void Indent(int depth)
public void SetExpandedWithoutNotify(bool expanded)
public void SetToggleVisibility(bool visible)
private void OnPointerUp(PointerUpEvent evt)
private void OnToggleValueChanged(ChangeEvent`1<bool> evt)
}
public UnityEngine.UIElements.Rotate : ValueType {
private Angle m_Angle
private Vector3 m_Axis
private bool m_IsNone
public Angle angle
internal Vector3 axis
internal void .ctor(Angle angle, Vector3 axis)
public void .ctor(Angle angle)
internal Rotate Initial()
public Rotate None()
public Angle get_angle()
public void set_angle(Angle value)
internal Vector3 get_axis()
internal void set_axis(Vector3 value)
internal bool IsNone()
public bool op_Equality(Rotate lhs, Rotate rhs)
public bool op_Inequality(Rotate lhs, Rotate rhs)
public bool Equals(Rotate other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
internal Quaternion ToQuaternion()
}
internal UnityEngine.UIElements.RuleMatcher : ValueType {
public StyleSheet sheet
public StyleComplexSelector complexSelector
public void .ctor(StyleSheet sheet, StyleComplexSelector complexSelector, int styleSheetIndexInStack)
public string ToString()
}
internal UnityEngine.UIElements.RuntimeEventDispatcher : object {
public EventDispatcher Create()
}
internal UnityEngine.UIElements.RuntimePanel : BaseRuntimePanel {
internal EventDispatcher s_EventDispatcher
private PanelSettings m_PanelSettings
public PanelSettings panelSettings
public PanelSettings get_panelSettings()
public RuntimePanel Create(ScriptableObject ownerObject)
private void .ctor(ScriptableObject ownerObject)
public void Update()
}
public UnityEngine.UIElements.RuntimePanelUtils : object {
public Vector2 ScreenToPanel(IPanel panel, Vector2 screenPosition)
public Vector2 CameraTransformWorldToPanel(IPanel panel, Vector3 worldPosition, Camera camera)
public Rect CameraTransformWorldToPanelRect(IPanel panel, Vector3 worldPosition, Vector2 worldSize, Camera camera)
public void ResetDynamicAtlas(IPanel panel)
public void SetTextureDirty(IPanel panel, Texture2D texture)
}
internal UnityEngine.UIElements.SavePersistentViewData : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.UIElements.Scale : ValueType {
private Vector3 m_Scale
private bool m_IsNone
public Vector3 value
public void .ctor(Vector3 scale)
internal Scale Initial()
public Scale None()
public Vector3 get_value()
public void set_value(Vector3 value)
internal bool IsNone()
public bool op_Equality(Scale lhs, Scale rhs)
public bool op_Inequality(Scale lhs, Scale rhs)
public bool Equals(Scale other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.ScheduledItem : object {
public Func`1<bool> timerUpdateStopCondition
public Func`1<bool> OnceCondition
public Func`1<bool> ForeverCondition
private long <startMs>k__BackingField
private long <delayMs>k__BackingField
private long <intervalMs>k__BackingField
private long <endTimeMs>k__BackingField
public long startMs
public long delayMs
public long intervalMs
public long endTimeMs
public long get_startMs()
public void set_startMs(long value)
public long get_delayMs()
public void set_delayMs(long value)
public long get_intervalMs()
public void set_intervalMs(long value)
public long get_endTimeMs()
private void set_endTimeMs(long value)
protected void ResetStartTime()
public void SetDuration(long durationMs)
public void PerformTimerUpdate(TimerState state)
internal void OnItemUnscheduled()
public bool ShouldUnschedule()
}
public UnityEngine.UIElements.Scroller : VisualElement {
private Action`1<float> valueChanged
private Slider <slider>k__BackingField
private RepeatButton <lowButton>k__BackingField
private RepeatButton <highButton>k__BackingField
internal float kDefaultPageSize
public string ussClassName
public string horizontalVariantUssClassName
public string verticalVariantUssClassName
public string sliderUssClassName
public string lowButtonUssClassName
public string highButtonUssClassName
public Slider slider
public RepeatButton lowButton
public RepeatButton highButton
public float value
public float lowValue
public float highValue
public SliderDirection direction
public void add_valueChanged(Action`1<float> value)
public void remove_valueChanged(Action`1<float> value)
public Slider get_slider()
private void set_slider(Slider value)
public RepeatButton get_lowButton()
private void set_lowButton(RepeatButton value)
public RepeatButton get_highButton()
private void set_highButton(RepeatButton value)
public float get_value()
public void set_value(float value)
public float get_lowValue()
public void set_lowValue(float value)
public float get_highValue()
public void set_highValue(float value)
public SliderDirection get_direction()
public void set_direction(SliderDirection value)
public void .ctor(float lowValue, float highValue, Action`1<float> valueChanged, SliderDirection direction)
public void Adjust(float factor)
private void OnSliderValueChange(ChangeEvent`1<float> evt)
public void ScrollPageUp()
public void ScrollPageDown()
public void ScrollPageUp(float factor)
public void ScrollPageDown(float factor)
}
public UnityEngine.UIElements.ScrollerVisibility : Enum {
public int value__
public ScrollerVisibility Auto
public ScrollerVisibility AlwaysVisible
public ScrollerVisibility Hidden
}
public UnityEngine.UIElements.ScrollView : VisualElement {
private ScrollerVisibility m_HorizontalScrollerVisibility
private ScrollerVisibility m_VerticalScrollerVisibility
private float k_SizeThreshold
private VisualElement m_AttachedRootVisualContainer
private float m_SingleLineHeight
private string k_SingleLineHeightPropertyName
private float k_ScrollPageOverlapFactor
internal float k_UnsetPageSizeValue
internal float k_MouseWheelScrollSizeDefaultValue
internal float k_MouseWheelScrollSizeUnset
internal bool m_MouseWheelScrollSizeIsInline
private float m_HorizontalPageSize
private float m_VerticalPageSize
private float m_MouseWheelScrollSize
private float k_DefaultScrollDecelerationRate
private float m_ScrollDecelerationRate
private float k_DefaultElasticity
private float m_Elasticity
private TouchScrollBehavior m_TouchScrollBehavior
private NestedInteractionKind m_NestedInteractionKind
private VisualElement <contentViewport>k__BackingField
private Scroller <horizontalScroller>k__BackingField
private Scroller <verticalScroller>k__BackingField
private VisualElement m_ContentContainer
private VisualElement m_ContentAndVerticalScrollContainer
public string ussClassName
public string viewportUssClassName
public string contentAndVerticalScrollUssClassName
public string contentUssClassName
public string hScrollerUssClassName
public string vScrollerUssClassName
public string horizontalVariantUssClassName
public string verticalVariantUssClassName
public string verticalHorizontalVariantUssClassName
public string scrollVariantUssClassName
private ScrollViewMode m_Mode
private int m_ScrollingPointerId
private float k_VelocityLerpTimeFactor
internal float ScrollThresholdSquared
private Vector2 m_StartPosition
private Vector2 m_PointerStartPosition
private Vector2 m_Velocity
private Vector2 m_SpringBackVelocity
private Vector2 m_LowBounds
private Vector2 m_HighBounds
private float m_LastVelocityLerpTime
private bool m_StartedMoving
private bool m_TouchStoppedVelocity
private VisualElement m_CapturedTarget
private EventCallback`1<PointerMoveEvent> m_CapturedTargetPointerMoveCallback
private EventCallback`1<PointerUpEvent> m_CapturedTargetPointerUpCallback
private IVisualElementScheduledItem m_PostPointerUpAnimation
public ScrollerVisibility horizontalScrollerVisibility
public ScrollerVisibility verticalScrollerVisibility
public bool showHorizontal
public bool showVertical
internal bool needsHorizontal
internal bool needsVertical
internal bool isVerticalScrollDisplayed
internal bool isHorizontalScrollDisplayed
public Vector2 scrollOffset
public float horizontalPageSize
public float verticalPageSize
public float mouseWheelScrollSize
internal float scrollableWidth
internal float scrollableHeight
private bool hasInertia
public float scrollDecelerationRate
public float elasticity
public TouchScrollBehavior touchScrollBehavior
public NestedInteractionKind nestedInteractionKind
public VisualElement contentViewport
public Scroller horizontalScroller
public Scroller verticalScroller
public VisualElement contentContainer
public ScrollViewMode mode
public ScrollerVisibility get_horizontalScrollerVisibility()
public void set_horizontalScrollerVisibility(ScrollerVisibility value)
public ScrollerVisibility get_verticalScrollerVisibility()
public void set_verticalScrollerVisibility(ScrollerVisibility value)
public bool get_showHorizontal()
public void set_showHorizontal(bool value)
public bool get_showVertical()
public void set_showVertical(bool value)
internal bool get_needsHorizontal()
internal bool get_needsVertical()
internal bool get_isVerticalScrollDisplayed()
internal bool get_isHorizontalScrollDisplayed()
public Vector2 get_scrollOffset()
public void set_scrollOffset(Vector2 value)
public float get_horizontalPageSize()
public void set_horizontalPageSize(float value)
public float get_verticalPageSize()
public void set_verticalPageSize(float value)
public float get_mouseWheelScrollSize()
public void set_mouseWheelScrollSize(float value)
internal float get_scrollableWidth()
internal float get_scrollableHeight()
private bool get_hasInertia()
public float get_scrollDecelerationRate()
public void set_scrollDecelerationRate(float value)
public float get_elasticity()
public void set_elasticity(float value)
public TouchScrollBehavior get_touchScrollBehavior()
public void set_touchScrollBehavior(TouchScrollBehavior value)
public NestedInteractionKind get_nestedInteractionKind()
public void set_nestedInteractionKind(NestedInteractionKind value)
private void OnHorizontalScrollDragElementChanged(GeometryChangedEvent evt)
private void OnVerticalScrollDragElementChanged(GeometryChangedEvent evt)
private void UpdateHorizontalSliderPageSize()
private void UpdateVerticalSliderPageSize()
private void UpdateContentViewTransform()
public void ScrollTo(VisualElement child)
private float GetXDeltaOffset(VisualElement child)
private float GetYDeltaOffset(VisualElement child)
private float GetDeltaDistance(float viewMin, float viewMax, float childBoundaryMin, float childBoundaryMax)
public VisualElement get_contentViewport()
private void set_contentViewport(VisualElement value)
public Scroller get_horizontalScroller()
private void set_horizontalScroller(Scroller value)
public Scroller get_verticalScroller()
private void set_verticalScroller(Scroller value)
public VisualElement get_contentContainer()
public void .ctor(ScrollViewMode scrollViewMode)
public ScrollViewMode get_mode()
public void set_mode(ScrollViewMode value)
private void SetScrollViewMode(ScrollViewMode mode)
private void OnAttachToPanel(AttachToPanelEvent evt)
private void OnDetachFromPanel(DetachFromPanelEvent evt)
private void OnPointerCapture(PointerCaptureEvent evt)
private void OnPointerCaptureOut(PointerCaptureOutEvent evt)
private void OnGeometryChanged(GeometryChangedEvent evt)
private float ComputeElasticOffset(float deltaPointer, float initialScrollOffset, float lowLimit, float hardLowLimit, float highLimit, float hardHighLimit)
private void ComputeInitialSpringBackVelocity()
private void SpringBack()
internal void ApplyScrollInertia()
private void PostPointerUpAnimation()
private void OnPointerDown(PointerDownEvent evt)
private void OnPointerMove(PointerMoveEvent evt)
private void OnPointerCancel(PointerCancelEvent evt)
private void OnPointerUp(PointerUpEvent evt)
internal void InitTouchScrolling(Vector2 position)
internal TouchScrollingResult ComputeTouchScrolling(Vector2 position)
private bool ApplyTouchScrolling(Vector2 newScrollOffset)
private bool ReleaseScrolling(int pointerId, IEventHandler target)
private void AdjustScrollers()
internal void UpdateScrollers(bool displayHorizontal, bool displayVertical)
private void OnScrollersGeometryChanged(GeometryChangedEvent evt)
private void OnScrollWheel(WheelEvent evt)
private void OnRootCustomStyleResolved(CustomStyleResolvedEvent evt)
private void ReadSingleLineHeight()
private void <.ctor>b__110_0(float value)
private void <.ctor>b__110_1(float value)
}
public UnityEngine.UIElements.ScrollViewMode : Enum {
public int value__
public ScrollViewMode Vertical
public ScrollViewMode Horizontal
public ScrollViewMode VerticalAndHorizontal
}
public UnityEngine.UIElements.SelectionType : Enum {
public int value__
public SelectionType None
public SelectionType Single
public SelectionType Multiple
}
public UnityEngine.UIElements.Slider : BaseSlider`1<float> {
internal float kDefaultHighValue
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public void .ctor(float start, float end, SliderDirection direction, float pageSize)
public void .ctor(string label, float start, float end, SliderDirection direction, float pageSize)
internal float SliderLerpUnclamped(float a, float b, float interpolant)
internal float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue)
internal float SliderRange()
internal float ParseStringToValue(string stringValue)
internal void ComputeValueFromKey(SliderKey<float> sliderKey, bool isShift)
}
public UnityEngine.UIElements.SliderDirection : Enum {
public int value__
public SliderDirection Horizontal
public SliderDirection Vertical
}
public UnityEngine.UIElements.SliderInt : BaseSlider`1<int> {
internal int kDefaultHighValue
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public float pageSize
public void .ctor(int start, int end, SliderDirection direction, float pageSize)
public void .ctor(string label, int start, int end, SliderDirection direction, float pageSize)
public float get_pageSize()
public void set_pageSize(float value)
internal int SliderLerpUnclamped(int a, int b, float interpolant)
internal float SliderNormalizeValue(int currentValue, int lowerValue, int higherValue)
internal int SliderRange()
internal int ParseStringToValue(string stringValue)
internal void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos)
internal void ComputeValueFromKey(SliderKey<int> sliderKey, bool isShift)
}
internal UnityEngine.UIElements.Spacing : ValueType {
public float left
public float top
public float right
public float bottom
public float horizontal
public float vertical
public float get_horizontal()
public float get_vertical()
public void .ctor(float left, float top, float right, float bottom)
public Rect op_Addition(Rect r, Spacing a)
public Rect op_Subtraction(Rect r, Spacing a)
}
internal UnityEngine.UIElements.StartDragArgs : object {
private string <title>k__BackingField
private object <userData>k__BackingField
private Hashtable m_GenericData
private IEnumerable`1<Object> <unityObjectReferences>k__BackingField
public string title
public object userData
internal Hashtable genericData
internal IEnumerable`1<Object> unityObjectReferences
public string get_title()
public object get_userData()
internal Hashtable get_genericData()
internal IEnumerable`1<Object> get_unityObjectReferences()
private void set_unityObjectReferences(IEnumerable`1<Object> value)
public void .ctor(string title, object userData)
public void SetGenericData(string key, object data)
public void SetUnityObjectReferences(IEnumerable`1<Object> references)
}
internal UnityEngine.UIElements.StringUtils : object {
public int LevenshteinDistance(string s, string t)
}
internal UnityEngine.UIElements.StringUtilsExtensions : object {
private char NoDelimiter
private Char[] WordDelimiters
public string ToPascalCase(string text)
public string ToCamelCase(string text)
public string ToKebabCase(string text)
public string ToTrainCase(string text)
public string ToSnakeCase(string text)
private string ConvertCase(string text, char outputWordDelimiter, Func`2<char, char> startOfStringCaseHandler, Func`2<char, char> middleStringCaseHandler)
public bool EndsWithIgnoreCaseFast(string a, string b)
public bool StartsWithIgnoreCaseFast(string a, string b)
}
public UnityEngine.UIElements.StyleBackground : ValueType {
private Background m_Value
private StyleKeyword m_Keyword
public Background value
public StyleKeyword keyword
public Background get_value()
public void set_value(Background value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Background v)
public void .ctor(Texture2D v)
public void .ctor(Sprite v)
public void .ctor(VectorImage v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Texture2D v, StyleKeyword keyword)
internal void .ctor(Sprite v, StyleKeyword keyword)
internal void .ctor(VectorImage v, StyleKeyword keyword)
internal void .ctor(Background v, StyleKeyword keyword)
public bool op_Equality(StyleBackground lhs, StyleBackground rhs)
public bool op_Inequality(StyleBackground lhs, StyleBackground rhs)
public StyleBackground op_Implicit(StyleKeyword keyword)
public StyleBackground op_Implicit(Background v)
public StyleBackground op_Implicit(Texture2D v)
public bool Equals(StyleBackground other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleCache : object {
private Dictionary`2<long, ComputedStyle> s_ComputedStyleCache
private Dictionary`2<int, StyleVariableContext> s_StyleVariableContextCache
private Dictionary`2<int, ComputedTransitionProperty[]> s_ComputedTransitionsCache
public bool TryGetValue(long hash, ComputedStyle& data)
public void SetValue(long hash, ComputedStyle& data)
public bool TryGetValue(int hash, StyleVariableContext& data)
public void SetValue(int hash, StyleVariableContext data)
public bool TryGetValue(int hash, ComputedTransitionProperty[]& data)
public void SetValue(int hash, ComputedTransitionProperty[] data)
public void ClearStyleCache()
}
public UnityEngine.UIElements.StyleColor : ValueType {
private Color m_Value
private StyleKeyword m_Keyword
public Color value
public StyleKeyword keyword
public Color get_value()
public void set_value(Color value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Color v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Color v, StyleKeyword keyword)
public bool op_Equality(StyleColor lhs, StyleColor rhs)
public bool op_Inequality(StyleColor lhs, StyleColor rhs)
public bool op_Equality(StyleColor lhs, Color rhs)
public bool op_Inequality(StyleColor lhs, Color rhs)
public StyleColor op_Implicit(StyleKeyword keyword)
public StyleColor op_Implicit(Color v)
public bool Equals(StyleColor other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleComplexSelector : object {
private int m_Specificity
private StyleRule <rule>k__BackingField
private StyleSelector[] m_Selectors
internal int ruleIndex
internal StyleComplexSelector nextInTable
internal int orderInStyleSheet
private Dictionary`2<string, PseudoStateData> s_PseudoStates
public int specificity
public StyleRule rule
public bool isSimple
public StyleSelector[] selectors
public int get_specificity()
internal void set_specificity(int value)
public StyleRule get_rule()
internal void set_rule(StyleRule value)
public bool get_isSimple()
public StyleSelector[] get_selectors()
internal void set_selectors(StyleSelector[] value)
internal void CachePseudoStateMasks()
public string ToString()
}
public UnityEngine.UIElements.StyleCursor : ValueType {
private Cursor m_Value
private StyleKeyword m_Keyword
public Cursor value
public StyleKeyword keyword
public Cursor get_value()
public void set_value(Cursor value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Cursor v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Cursor v, StyleKeyword keyword)
public bool op_Equality(StyleCursor lhs, StyleCursor rhs)
public bool op_Inequality(StyleCursor lhs, StyleCursor rhs)
public StyleCursor op_Implicit(StyleKeyword keyword)
public StyleCursor op_Implicit(Cursor v)
public bool Equals(StyleCursor other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleDataRef`1 : ValueType {
private RefCounted<T> m_Ref
public int refCount
public UInt32 id
public int get_refCount()
public UInt32 get_id()
public StyleDataRef`1<T> Acquire()
public void Release()
public void CopyFrom(StyleDataRef`1<T> other)
public T& modreq(System.Runtime.InteropServices.InAttribute) Read()
public T& Write()
public StyleDataRef`1<T> Create()
public int GetHashCode()
public bool op_Equality(StyleDataRef`1<T> lhs, StyleDataRef`1<T> rhs)
public bool op_Inequality(StyleDataRef`1<T> lhs, StyleDataRef`1<T> rhs)
public bool Equals(StyleDataRef`1<T> other)
public bool Equals(object obj)
}
internal UnityEngine.UIElements.StyleDebug : object {
internal int UnitySpecificity
internal int UndefinedSpecificity
internal int InheritedSpecificity
internal int InlineSpecificity
public String[] GetStylePropertyNames()
public String[] GetLonghandPropertyNames(string shorthandName)
public StylePropertyId GetStylePropertyIdFromName(string name)
public object GetComputedStyleValue(ComputedStyle& computedStyle, string name)
public object GetInlineStyleValue(IStyle style, string name)
public void SetInlineStyleValue(IStyle style, string name, object value)
public Type GetInlineStyleType(string name)
public Type GetComputedStyleType(string name)
public void FindSpecifiedStyles(ComputedStyle& computedStyle, IEnumerable`1<SelectorMatchRecord> matchRecords, Dictionary`2<StylePropertyId, int> result)
public object GetComputedStyleValue(ComputedStyle& computedStyle, StylePropertyId id)
public Type GetComputedStyleType(StylePropertyId id)
public object GetInlineStyleValue(IStyle style, StylePropertyId id)
public void SetInlineStyleValue(IStyle style, StylePropertyId id, object value)
public object ConvertComputedToInlineStyleValue(StylePropertyId id, object value)
public Type GetInlineStyleType(StylePropertyId id)
public String[] GetLonghandPropertyNames(StylePropertyId id)
public bool IsShorthandProperty(StylePropertyId id)
public bool IsInheritedProperty(StylePropertyId id)
public StylePropertyId[] GetInheritedProperties()
public bool IsDiscreteTypeProperty(StylePropertyId id)
}
public UnityEngine.UIElements.StyleEnum`1 : ValueType {
private T m_Value
private StyleKeyword m_Keyword
public T value
public StyleKeyword keyword
public T get_value()
public void set_value(T value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(T v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(T v, StyleKeyword keyword)
public bool op_Equality(StyleEnum`1<T> lhs, StyleEnum`1<T> rhs)
public bool op_Inequality(StyleEnum`1<T> lhs, StyleEnum`1<T> rhs)
public StyleEnum`1<T> op_Implicit(StyleKeyword keyword)
public StyleEnum`1<T> op_Implicit(T v)
public bool Equals(StyleEnum`1<T> other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleFloat : ValueType {
private float m_Value
private StyleKeyword m_Keyword
public float value
public StyleKeyword keyword
public float get_value()
public void set_value(float value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(float v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(float v, StyleKeyword keyword)
public bool op_Equality(StyleFloat lhs, StyleFloat rhs)
public bool op_Inequality(StyleFloat lhs, StyleFloat rhs)
public StyleFloat op_Implicit(StyleKeyword keyword)
public StyleFloat op_Implicit(float v)
public bool Equals(StyleFloat other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleFont : ValueType {
private Font m_Value
private StyleKeyword m_Keyword
public Font value
public StyleKeyword keyword
public Font get_value()
public void set_value(Font value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Font v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Font v, StyleKeyword keyword)
public bool op_Equality(StyleFont lhs, StyleFont rhs)
public bool op_Inequality(StyleFont lhs, StyleFont rhs)
public StyleFont op_Implicit(StyleKeyword keyword)
public StyleFont op_Implicit(Font v)
public bool Equals(StyleFont other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleFontDefinition : ValueType {
private StyleKeyword m_Keyword
private FontDefinition m_Value
public FontDefinition value
public StyleKeyword keyword
public FontDefinition get_value()
public void set_value(FontDefinition value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(FontDefinition f)
public void .ctor(FontAsset f)
public void .ctor(Font f)
public void .ctor(StyleKeyword keyword)
internal void .ctor(object obj, StyleKeyword keyword)
internal void .ctor(object obj)
internal void .ctor(FontAsset f, StyleKeyword keyword)
internal void .ctor(Font f, StyleKeyword keyword)
internal void .ctor(GCHandle gcHandle, StyleKeyword keyword)
internal void .ctor(FontDefinition f, StyleKeyword keyword)
internal void .ctor(StyleFontDefinition sfd)
public StyleFontDefinition op_Implicit(StyleKeyword keyword)
public StyleFontDefinition op_Implicit(FontDefinition f)
public bool Equals(StyleFontDefinition other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(StyleFontDefinition left, StyleFontDefinition right)
public bool op_Inequality(StyleFontDefinition left, StyleFontDefinition right)
}
public UnityEngine.UIElements.StyleInt : ValueType {
private int m_Value
private StyleKeyword m_Keyword
public int value
public StyleKeyword keyword
public int get_value()
public void set_value(int value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(int v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(int v, StyleKeyword keyword)
public bool op_Equality(StyleInt lhs, StyleInt rhs)
public bool op_Inequality(StyleInt lhs, StyleInt rhs)
public StyleInt op_Implicit(StyleKeyword keyword)
public StyleInt op_Implicit(int v)
public bool Equals(StyleInt other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleKeyword : Enum {
public int value__
public StyleKeyword Undefined
public StyleKeyword Null
public StyleKeyword Auto
public StyleKeyword None
public StyleKeyword Initial
}
public UnityEngine.UIElements.StyleLength : ValueType {
private Length m_Value
private StyleKeyword m_Keyword
public Length value
public StyleKeyword keyword
public Length get_value()
public void set_value(Length value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(float v)
public void .ctor(Length v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Length v, StyleKeyword keyword)
public bool op_Equality(StyleLength lhs, StyleLength rhs)
public bool op_Inequality(StyleLength lhs, StyleLength rhs)
public StyleLength op_Implicit(StyleKeyword keyword)
public StyleLength op_Implicit(float v)
public StyleLength op_Implicit(Length v)
public bool Equals(StyleLength other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleList`1 : ValueType {
private StyleKeyword m_Keyword
private List`1<T> m_Value
public List`1<T> value
public StyleKeyword keyword
public List`1<T> get_value()
public void set_value(List`1<T> value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(List`1<T> v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(List`1<T> v, StyleKeyword keyword)
public bool op_Equality(StyleList`1<T> lhs, StyleList`1<T> rhs)
public bool op_Inequality(StyleList`1<T> lhs, StyleList`1<T> rhs)
public StyleList`1<T> op_Implicit(StyleKeyword keyword)
public StyleList`1<T> op_Implicit(List`1<T> v)
public bool Equals(StyleList`1<T> other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleMatchingContext : object {
private List`1<StyleSheet> m_StyleSheetStack
public StyleVariableContext variableContext
public VisualElement currentElement
public Action`2<VisualElement, MatchResultInfo> processResult
public int styleSheetCount
public int get_styleSheetCount()
public void .ctor(Action`2<VisualElement, MatchResultInfo> processResult)
public void AddStyleSheet(StyleSheet sheet)
public void RemoveStyleSheetRange(int index, int count)
public StyleSheet GetStyleSheetAt(int index)
}
internal UnityEngine.UIElements.StyleProperty : object {
private string m_Name
private int m_Line
private StyleValueHandle[] m_Values
internal bool isCustomProperty
internal bool requireVariableResolve
public string name
public int line
public StyleValueHandle[] values
public string get_name()
internal void set_name(string value)
public int get_line()
internal void set_line(int value)
public StyleValueHandle[] get_values()
internal void set_values(StyleValueHandle[] value)
}
internal UnityEngine.UIElements.StylePropertyAnimationSystem : object {
private long m_CurrentTimeMs
private ValuesFloat m_Floats
private ValuesInt m_Ints
private ValuesLength m_Lengths
private ValuesColor m_Colors
private ValuesEnum m_Enums
private ValuesBackground m_Backgrounds
private ValuesFontDefinition m_FontDefinitions
private ValuesFont m_Fonts
private ValuesTextShadow m_TextShadows
private ValuesScale m_Scale
private ValuesRotate m_Rotate
private ValuesTranslate m_Translate
private ValuesTransformOrigin m_TransformOrigin
private List`1<Values> m_AllValues
private Dictionary`2<StylePropertyId, Values> m_PropertyToValues
private T GetOrCreate(T& values)
private bool StartTransition(VisualElement owner, StylePropertyId prop, T startValue, T endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve, Values`1<T> values)
public bool StartTransition(VisualElement owner, StylePropertyId prop, float startValue, float endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Length startValue, Length endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Color startValue, Color endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartAnimationEnum(VisualElement owner, StylePropertyId prop, int startValue, int endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Background startValue, Background endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, FontDefinition startValue, FontDefinition endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Font startValue, Font endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, TextShadow startValue, TextShadow endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Scale startValue, Scale endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Rotate startValue, Rotate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, Translate startValue, Translate endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public bool StartTransition(VisualElement owner, StylePropertyId prop, TransformOrigin startValue, TransformOrigin endValue, int durationMs, int delayMs, Func`2<float, float> easingCurve)
public void CancelAllAnimations()
public void CancelAllAnimations(VisualElement owner)
public void CancelAnimation(VisualElement owner, StylePropertyId id)
public bool HasRunningAnimation(VisualElement owner, StylePropertyId id)
public void UpdateAnimation(VisualElement owner, StylePropertyId id)
public void GetAllAnimations(VisualElement owner, List`1<StylePropertyId> propertyIds)
private void UpdateTracking(Values`1<T> values)
private long CurrentTimeMs()
public void Update()
}
public UnityEngine.UIElements.StylePropertyName : ValueType {
private StylePropertyId <id>k__BackingField
private string <name>k__BackingField
internal StylePropertyId id
private string name
internal StylePropertyId get_id()
private string get_name()
internal StylePropertyId StylePropertyIdFromString(string name)
internal void .ctor(StylePropertyId stylePropertyId)
public void .ctor(string name)
public bool IsNullOrEmpty(StylePropertyName propertyName)
public bool op_Equality(StylePropertyName lhs, StylePropertyName rhs)
public bool op_Inequality(StylePropertyName lhs, StylePropertyName rhs)
public StylePropertyName op_Implicit(string name)
public int GetHashCode()
public bool Equals(object other)
public bool Equals(StylePropertyName other)
public string ToString()
}
public UnityEngine.UIElements.StylePropertyNameCollection : ValueType {
internal List`1<StylePropertyName> propertiesList
internal void .ctor(List`1<StylePropertyName> list)
public Enumerator GetEnumerator()
private IEnumerator`1<StylePropertyName> System.Collections.Generic.IEnumerable<UnityEngine.UIElements.StylePropertyName>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool Contains(StylePropertyName stylePropertyName)
}
public UnityEngine.UIElements.StyleRotate : ValueType {
private Rotate m_Value
private StyleKeyword m_Keyword
public Rotate value
public StyleKeyword keyword
public Rotate get_value()
public void set_value(Rotate value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Rotate v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Rotate v, StyleKeyword keyword)
public bool op_Equality(StyleRotate lhs, StyleRotate rhs)
public bool op_Inequality(StyleRotate lhs, StyleRotate rhs)
public StyleRotate op_Implicit(StyleKeyword keyword)
public StyleRotate op_Implicit(Rotate v)
public bool Equals(StyleRotate other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleRule : object {
private StyleProperty[] m_Properties
internal int line
internal int customPropertiesCount
public StyleProperty[] properties
public StyleProperty[] get_properties()
internal void set_properties(StyleProperty[] value)
}
public UnityEngine.UIElements.StyleScale : ValueType {
private Scale m_Value
private StyleKeyword m_Keyword
public Scale value
public StyleKeyword keyword
public Scale get_value()
public void set_value(Scale value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Scale v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Scale v, StyleKeyword keyword)
public bool op_Equality(StyleScale lhs, StyleScale rhs)
public bool op_Inequality(StyleScale lhs, StyleScale rhs)
public StyleScale op_Implicit(StyleKeyword keyword)
public StyleScale op_Implicit(Scale v)
public bool Equals(StyleScale other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleSelector : object {
private StyleSelectorPart[] m_Parts
private StyleSelectorRelationship m_PreviousRelationship
internal int pseudoStateMask
internal int negatedPseudoStateMask
public StyleSelectorPart[] parts
public StyleSelectorRelationship previousRelationship
public StyleSelectorPart[] get_parts()
internal void set_parts(StyleSelectorPart[] value)
public StyleSelectorRelationship get_previousRelationship()
internal void set_previousRelationship(StyleSelectorRelationship value)
public string ToString()
}
internal UnityEngine.UIElements.StyleSelectorPart : ValueType {
private string m_Value
private StyleSelectorType m_Type
internal object tempData
public string value
public StyleSelectorType type
public string get_value()
internal void set_value(string value)
public StyleSelectorType get_type()
internal void set_type(StyleSelectorType value)
public string ToString()
public StyleSelectorPart CreateClass(string className)
public StyleSelectorPart CreatePseudoClass(string className)
public StyleSelectorPart CreateId(string Id)
public StyleSelectorPart CreateType(Type t)
public StyleSelectorPart CreateType(string typeName)
public StyleSelectorPart CreatePredicate(object predicate)
public StyleSelectorPart CreateWildCard()
}
internal UnityEngine.UIElements.StyleSelectorRelationship : Enum {
public int value__
public StyleSelectorRelationship None
public StyleSelectorRelationship Child
public StyleSelectorRelationship Descendent
}
internal UnityEngine.UIElements.StyleSelectorType : Enum {
public int value__
public StyleSelectorType Unknown
public StyleSelectorType Wildcard
public StyleSelectorType Type
public StyleSelectorType Class
public StyleSelectorType PseudoClass
public StyleSelectorType RecursivePseudoClass
public StyleSelectorType ID
public StyleSelectorType Predicate
}
public UnityEngine.UIElements.StyleSheet : ScriptableObject {
private bool m_ImportedWithErrors
private bool m_ImportedWithWarnings
private StyleRule[] m_Rules
private StyleComplexSelector[] m_ComplexSelectors
internal Single[] floats
internal Dimension[] dimensions
internal Color[] colors
internal String[] strings
internal Object[] assets
internal ImportStruct[] imports
private List`1<StyleSheet> m_FlattenedImportedStyleSheets
private int m_ContentHash
internal ScalableImage[] scalableImages
internal Dictionary`2<string, StyleComplexSelector> orderedNameSelectors
internal Dictionary`2<string, StyleComplexSelector> orderedTypeSelectors
internal Dictionary`2<string, StyleComplexSelector> orderedClassSelectors
private bool m_IsDefaultStyleSheet
private string kCustomPropertyMarker
public bool importedWithErrors
public bool importedWithWarnings
internal StyleRule[] rules
internal StyleComplexSelector[] complexSelectors
internal List`1<StyleSheet> flattenedRecursiveImports
public int contentHash
internal bool isDefaultStyleSheet
public bool get_importedWithErrors()
internal void set_importedWithErrors(bool value)
public bool get_importedWithWarnings()
internal void set_importedWithWarnings(bool value)
internal StyleRule[] get_rules()
internal void set_rules(StyleRule[] value)
internal StyleComplexSelector[] get_complexSelectors()
internal void set_complexSelectors(StyleComplexSelector[] value)
internal List`1<StyleSheet> get_flattenedRecursiveImports()
public int get_contentHash()
public void set_contentHash(int value)
internal bool get_isDefaultStyleSheet()
internal void set_isDefaultStyleSheet(bool value)
private bool TryCheckAccess(T[] list, StyleValueType type, StyleValueHandle handle, T& value)
private T CheckAccess(T[] list, StyleValueType type, StyleValueHandle handle)
internal void OnEnable()
internal void FlattenImportedStyleSheetsRecursive()
private void FlattenImportedStyleSheetsRecursive(StyleSheet sheet)
private void SetupReferences()
internal StyleValueKeyword ReadKeyword(StyleValueHandle handle)
internal float ReadFloat(StyleValueHandle handle)
internal bool TryReadFloat(StyleValueHandle handle, Single& value)
internal Dimension ReadDimension(StyleValueHandle handle)
internal bool TryReadDimension(StyleValueHandle handle, Dimension& value)
internal Color ReadColor(StyleValueHandle handle)
internal bool TryReadColor(StyleValueHandle handle, Color& value)
internal string ReadString(StyleValueHandle handle)
internal bool TryReadString(StyleValueHandle handle, String& value)
internal string ReadEnum(StyleValueHandle handle)
internal bool TryReadEnum(StyleValueHandle handle, String& value)
internal string ReadVariable(StyleValueHandle handle)
internal bool TryReadVariable(StyleValueHandle handle, String& value)
internal string ReadResourcePath(StyleValueHandle handle)
internal bool TryReadResourcePath(StyleValueHandle handle, String& value)
internal Object ReadAssetReference(StyleValueHandle handle)
internal string ReadMissingAssetReferenceUrl(StyleValueHandle handle)
internal bool TryReadAssetReference(StyleValueHandle handle, Object& value)
internal StyleValueFunction ReadFunction(StyleValueHandle handle)
internal string ReadFunctionName(StyleValueHandle handle)
internal ScalableImage ReadScalableImage(StyleValueHandle handle)
private bool CustomStartsWith(string originalString, string pattern)
}
internal UnityEngine.UIElements.StyleSheets.BaseStyleMatcher : object {
protected Regex s_CustomIdentRegex
private Stack`1<MatchContext> m_ContextStack
private MatchContext m_CurrentContext
public int valueCount
public bool isCurrentVariable
public bool isCurrentComma
public bool hasCurrent
public int currentIndex
public int matchedVariableCount
protected bool MatchKeyword(string keyword)
protected bool MatchNumber()
protected bool MatchInteger()
protected bool MatchLength()
protected bool MatchPercentage()
protected bool MatchColor()
protected bool MatchResource()
protected bool MatchUrl()
protected bool MatchTime()
protected bool MatchAngle()
protected bool MatchCustomIdent()
public int get_valueCount()
public bool get_isCurrentVariable()
public bool get_isCurrentComma()
public bool get_hasCurrent()
public int get_currentIndex()
public void set_currentIndex(int value)
public int get_matchedVariableCount()
public void set_matchedVariableCount(int value)
protected void Initialize()
public void MoveNext()
public void SaveContext()
public void RestoreContext()
public void DropContext()
protected bool Match(Expression exp)
private bool MatchExpression(Expression exp)
private bool MatchExpressionWithMultiplier(Expression exp)
private bool MatchGroup(Expression exp)
private bool MatchCombinator(Expression exp)
private bool MatchOr(Expression exp)
private bool MatchOrOr(Expression exp)
private bool MatchAndAnd(Expression exp)
private int MatchMany(Expression exp)
private int MatchManyByOrder(Expression exp, Int32* matchOrder)
private bool MatchJuxtaposition(Expression exp)
private bool MatchDataType(Expression exp)
}
internal UnityEngine.UIElements.StyleSheets.CSSSpec : object {
private Regex rgx
private int typeSelectorWeight
private int classSelectorWeight
private int idSelectorWeight
public int GetSelectorSpecificity(string selector)
public int GetSelectorSpecificity(StyleSelectorPart[] parts)
public bool ParseSelector(string selector, StyleSelectorPart[]& parts)
}
internal UnityEngine.UIElements.StyleSheets.Dimension : ValueType {
public Unit unit
public float value
public void .ctor(float value, Unit unit)
public Length ToLength()
public TimeValue ToTime()
public Angle ToAngle()
public bool op_Equality(Dimension lhs, Dimension rhs)
public bool op_Inequality(Dimension lhs, Dimension rhs)
public bool Equals(Dimension other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleSheets.HierarchyTraversal : object {
public void Traverse(VisualElement element)
public void TraverseRecursive(VisualElement element, int depth)
protected void Recurse(VisualElement element, int depth)
}
internal UnityEngine.UIElements.StyleSheets.ImageSource : ValueType {
public Texture2D texture
public Sprite sprite
public VectorImage vectorImage
public RenderTexture renderTexture
public bool IsNull()
}
internal UnityEngine.UIElements.StyleSheets.InitialStyle : object {
private ComputedStyle s_InitialStyle
public Align alignContent
public Align alignItems
public Align alignSelf
public Color backgroundColor
public Background backgroundImage
public Color borderBottomColor
public Length borderBottomLeftRadius
public Length borderBottomRightRadius
public float borderBottomWidth
public Color borderLeftColor
public float borderLeftWidth
public Color borderRightColor
public float borderRightWidth
public Color borderTopColor
public Length borderTopLeftRadius
public Length borderTopRightRadius
public float borderTopWidth
public Length bottom
public Color color
public Cursor cursor
public DisplayStyle display
public Length flexBasis
public FlexDirection flexDirection
public float flexGrow
public float flexShrink
public Wrap flexWrap
public Length fontSize
public Length height
public Justify justifyContent
public Length left
public Length letterSpacing
public Length marginBottom
public Length marginLeft
public Length marginRight
public Length marginTop
public Length maxHeight
public Length maxWidth
public Length minHeight
public Length minWidth
public float opacity
public OverflowInternal overflow
public Length paddingBottom
public Length paddingLeft
public Length paddingRight
public Length paddingTop
public Position position
public Length right
public Rotate rotate
public Scale scale
public TextOverflow textOverflow
public TextShadow textShadow
public Length top
public TransformOrigin transformOrigin
public List`1<TimeValue> transitionDelay
public List`1<TimeValue> transitionDuration
public List`1<StylePropertyName> transitionProperty
public List`1<EasingFunction> transitionTimingFunction
public Translate translate
public Color unityBackgroundImageTintColor
public ScaleMode unityBackgroundScaleMode
public Font unityFont
public FontDefinition unityFontDefinition
public FontStyle unityFontStyleAndWeight
public OverflowClipBox unityOverflowClipBox
public Length unityParagraphSpacing
public int unitySliceBottom
public int unitySliceLeft
public int unitySliceRight
public int unitySliceTop
public TextAnchor unityTextAlign
public Color unityTextOutlineColor
public float unityTextOutlineWidth
public TextOverflowPosition unityTextOverflowPosition
public Visibility visibility
public WhiteSpace whiteSpace
public Length width
public Length wordSpacing
public ComputedStyle& Get()
public ComputedStyle Acquire()
public Align get_alignContent()
public Align get_alignItems()
public Align get_alignSelf()
public Color get_backgroundColor()
public Background get_backgroundImage()
public Color get_borderBottomColor()
public Length get_borderBottomLeftRadius()
public Length get_borderBottomRightRadius()
public float get_borderBottomWidth()
public Color get_borderLeftColor()
public float get_borderLeftWidth()
public Color get_borderRightColor()
public float get_borderRightWidth()
public Color get_borderTopColor()
public Length get_borderTopLeftRadius()
public Length get_borderTopRightRadius()
public float get_borderTopWidth()
public Length get_bottom()
public Color get_color()
public Cursor get_cursor()
public DisplayStyle get_display()
public Length get_flexBasis()
public FlexDirection get_flexDirection()
public float get_flexGrow()
public float get_flexShrink()
public Wrap get_flexWrap()
public Length get_fontSize()
public Length get_height()
public Justify get_justifyContent()
public Length get_left()
public Length get_letterSpacing()
public Length get_marginBottom()
public Length get_marginLeft()
public Length get_marginRight()
public Length get_marginTop()
public Length get_maxHeight()
public Length get_maxWidth()
public Length get_minHeight()
public Length get_minWidth()
public float get_opacity()
public OverflowInternal get_overflow()
public Length get_paddingBottom()
public Length get_paddingLeft()
public Length get_paddingRight()
public Length get_paddingTop()
public Position get_position()
public Length get_right()
public Rotate get_rotate()
public Scale get_scale()
public TextOverflow get_textOverflow()
public TextShadow get_textShadow()
public Length get_top()
public TransformOrigin get_transformOrigin()
public List`1<TimeValue> get_transitionDelay()
public List`1<TimeValue> get_transitionDuration()
public List`1<StylePropertyName> get_transitionProperty()
public List`1<EasingFunction> get_transitionTimingFunction()
public Translate get_translate()
public Color get_unityBackgroundImageTintColor()
public ScaleMode get_unityBackgroundScaleMode()
public Font get_unityFont()
public FontDefinition get_unityFontDefinition()
public FontStyle get_unityFontStyleAndWeight()
public OverflowClipBox get_unityOverflowClipBox()
public Length get_unityParagraphSpacing()
public int get_unitySliceBottom()
public int get_unitySliceLeft()
public int get_unitySliceRight()
public int get_unitySliceTop()
public TextAnchor get_unityTextAlign()
public Color get_unityTextOutlineColor()
public float get_unityTextOutlineWidth()
public TextOverflowPosition get_unityTextOverflowPosition()
public Visibility get_visibility()
public WhiteSpace get_whiteSpace()
public Length get_width()
public Length get_wordSpacing()
}
internal UnityEngine.UIElements.StyleSheets.MatchResult : ValueType {
public MatchResultErrorCode errorCode
public string errorValue
public bool success
public bool get_success()
}
internal UnityEngine.UIElements.StyleSheets.MatchResultErrorCode : Enum {
public int value__
public MatchResultErrorCode None
public MatchResultErrorCode Syntax
public MatchResultErrorCode EmptyValue
public MatchResultErrorCode ExpectedEndOfValue
}
internal UnityEngine.UIElements.StyleSheets.MatchResultInfo : ValueType {
public bool success
public PseudoStates triggerPseudoMask
public PseudoStates dependencyPseudoMask
public void .ctor(bool success, PseudoStates triggerPseudoMask, PseudoStates dependencyPseudoMask)
}
internal UnityEngine.UIElements.StyleSheets.ScalableImage : ValueType {
public Texture2D normalImage
public Texture2D highResolutionImage
public string ToString()
}
internal UnityEngine.UIElements.StyleSheets.SelectorMatchRecord : ValueType {
public StyleSheet sheet
public int styleSheetIndexInStack
public StyleComplexSelector complexSelector
public void .ctor(StyleSheet sheet, int styleSheetIndexInStack)
public int Compare(SelectorMatchRecord a, SelectorMatchRecord b)
}
internal UnityEngine.UIElements.StyleSheets.ShorthandApplicator : object {
private List`1<TimeValue> s_TransitionDelayList
private List`1<TimeValue> s_TransitionDurationList
private List`1<StylePropertyName> s_TransitionPropertyList
private List`1<EasingFunction> s_TransitionTimingFunctionList
public void ApplyBorderColor(StylePropertyReader reader, ComputedStyle& computedStyle)
public void ApplyBorderRadius(StylePropertyReader reader, ComputedStyle& computedStyle)
public void ApplyBorderWidth(StylePropertyReader reader, ComputedStyle& computedStyle)
public void ApplyFlex(StylePropertyReader reader, ComputedStyle& computedStyle)
public void ApplyMargin(StylePropertyReader reader, ComputedStyle& computedStyle)
public void ApplyPadding(StylePropertyReader reader, ComputedStyle& computedStyle)
public void ApplyTransition(StylePropertyReader reader, ComputedStyle& computedStyle)
public void ApplyUnityTextOutline(StylePropertyReader reader, ComputedStyle& computedStyle)
private bool CompileFlexShorthand(StylePropertyReader reader, Single& grow, Single& shrink, Length& basis)
private void CompileBorderRadius(StylePropertyReader reader, Length& top, Length& right, Length& bottom, Length& left)
private void CompileBoxArea(StylePropertyReader reader, Length& top, Length& right, Length& bottom, Length& left)
private void CompileBoxArea(StylePropertyReader reader, Single& top, Single& right, Single& bottom, Single& left)
private void CompileBoxArea(StylePropertyReader reader, Color& top, Color& right, Color& bottom, Color& left)
private void CompileTextOutline(StylePropertyReader reader, Color& outlineColor, Single& outlineWidth)
private void CompileTransition(StylePropertyReader reader, List`1& outDelay, List`1& outDuration, List`1& outProperty, List`1& outTimingFunction)
}
internal UnityEngine.UIElements.StyleSheets.StyleEnumType : Enum {
public int value__
public StyleEnumType Align
public StyleEnumType DisplayStyle
public StyleEnumType EasingMode
public StyleEnumType FlexDirection
public StyleEnumType FontStyle
public StyleEnumType Justify
public StyleEnumType Overflow
public StyleEnumType OverflowClipBox
public StyleEnumType OverflowInternal
public StyleEnumType Position
public StyleEnumType ScaleMode
public StyleEnumType TextAnchor
public StyleEnumType TextOverflow
public StyleEnumType TextOverflowPosition
public StyleEnumType TransformOriginOffset
public StyleEnumType Visibility
public StyleEnumType WhiteSpace
public StyleEnumType Wrap
}
internal UnityEngine.UIElements.StyleSheets.StyleMatcher : BaseStyleMatcher {
private StylePropertyValueParser m_Parser
private String[] m_PropertyParts
private Regex s_NumberRegex
private Regex s_IntegerRegex
private Regex s_ZeroRegex
private Regex s_LengthRegex
private Regex s_PercentRegex
private Regex s_HexColorRegex
private Regex s_RgbRegex
private Regex s_RgbaRegex
private Regex s_VarFunctionRegex
private Regex s_ResourceRegex
private Regex s_UrlRegex
private Regex s_TimeRegex
private Regex s_AngleRegex
private string current
public int valueCount
public bool isCurrentVariable
public bool isCurrentComma
private string get_current()
public int get_valueCount()
public bool get_isCurrentVariable()
public bool get_isCurrentComma()
private void Initialize(string propertyValue)
public MatchResult Match(Expression exp, string propertyValue)
protected bool MatchKeyword(string keyword)
protected bool MatchNumber()
protected bool MatchInteger()
protected bool MatchLength()
protected bool MatchPercentage()
protected bool MatchColor()
protected bool MatchResource()
protected bool MatchUrl()
protected bool MatchTime()
protected bool MatchAngle()
protected bool MatchCustomIdent()
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyCache : object {
internal Dictionary`2<string, string> s_PropertySyntaxCache
internal Dictionary`2<string, string> s_NonTerminalValues
public bool TryGetSyntax(string name, String& syntax)
public bool TryGetNonTerminalValue(string name, String& syntax)
public string FindClosestPropertyName(string name)
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyGroup : Enum {
public int value__
public StylePropertyGroup Inherited
public StylePropertyGroup Layout
public StylePropertyGroup Rare
public StylePropertyGroup Shorthand
public StylePropertyGroup Transform
public StylePropertyGroup Transition
public StylePropertyGroup Visual
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyId : Enum {
public int value__
public StylePropertyId Unknown
public StylePropertyId Custom
public StylePropertyId AlignContent
public StylePropertyId AlignItems
public StylePropertyId AlignSelf
public StylePropertyId All
public StylePropertyId BackgroundColor
public StylePropertyId BackgroundImage
public StylePropertyId BorderBottomColor
public StylePropertyId BorderBottomLeftRadius
public StylePropertyId BorderBottomRightRadius
public StylePropertyId BorderBottomWidth
public StylePropertyId BorderColor
public StylePropertyId BorderLeftColor
public StylePropertyId BorderLeftWidth
public StylePropertyId BorderRadius
public StylePropertyId BorderRightColor
public StylePropertyId BorderRightWidth
public StylePropertyId BorderTopColor
public StylePropertyId BorderTopLeftRadius
public StylePropertyId BorderTopRightRadius
public StylePropertyId BorderTopWidth
public StylePropertyId BorderWidth
public StylePropertyId Bottom
public StylePropertyId Color
public StylePropertyId Cursor
public StylePropertyId Display
public StylePropertyId Flex
public StylePropertyId FlexBasis
public StylePropertyId FlexDirection
public StylePropertyId FlexGrow
public StylePropertyId FlexShrink
public StylePropertyId FlexWrap
public StylePropertyId FontSize
public StylePropertyId Height
public StylePropertyId JustifyContent
public StylePropertyId Left
public StylePropertyId LetterSpacing
public StylePropertyId Margin
public StylePropertyId MarginBottom
public StylePropertyId MarginLeft
public StylePropertyId MarginRight
public StylePropertyId MarginTop
public StylePropertyId MaxHeight
public StylePropertyId MaxWidth
public StylePropertyId MinHeight
public StylePropertyId MinWidth
public StylePropertyId Opacity
public StylePropertyId Overflow
public StylePropertyId Padding
public StylePropertyId PaddingBottom
public StylePropertyId PaddingLeft
public StylePropertyId PaddingRight
public StylePropertyId PaddingTop
public StylePropertyId Position
public StylePropertyId Right
public StylePropertyId Rotate
public StylePropertyId Scale
public StylePropertyId TextOverflow
public StylePropertyId TextShadow
public StylePropertyId Top
public StylePropertyId TransformOrigin
public StylePropertyId Transition
public StylePropertyId TransitionDelay
public StylePropertyId TransitionDuration
public StylePropertyId TransitionProperty
public StylePropertyId TransitionTimingFunction
public StylePropertyId Translate
public StylePropertyId UnityBackgroundImageTintColor
public StylePropertyId UnityBackgroundScaleMode
public StylePropertyId UnityFont
public StylePropertyId UnityFontDefinition
public StylePropertyId UnityFontStyleAndWeight
public StylePropertyId UnityOverflowClipBox
public StylePropertyId UnityParagraphSpacing
public StylePropertyId UnitySliceBottom
public StylePropertyId UnitySliceLeft
public StylePropertyId UnitySliceRight
public StylePropertyId UnitySliceTop
public StylePropertyId UnityTextAlign
public StylePropertyId UnityTextOutline
public StylePropertyId UnityTextOutlineColor
public StylePropertyId UnityTextOutlineWidth
public StylePropertyId UnityTextOverflowPosition
public StylePropertyId Visibility
public StylePropertyId WhiteSpace
public StylePropertyId Width
public StylePropertyId WordSpacing
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyReader : object {
internal GetCursorIdFunction getCursorIdFunc
private List`1<StylePropertyValue> m_Values
private List`1<int> m_ValueCount
private StyleVariableResolver m_Resolver
private StyleSheet m_Sheet
private StyleProperty[] m_Properties
private StylePropertyId[] m_PropertyIds
private int m_CurrentValueIndex
private int m_CurrentPropertyIndex
private StyleProperty <property>k__BackingField
private StylePropertyId <propertyId>k__BackingField
private int <valueCount>k__BackingField
private float <dpiScaling>k__BackingField
public StyleProperty property
public StylePropertyId propertyId
public int valueCount
public float dpiScaling
public StyleProperty get_property()
private void set_property(StyleProperty value)
public StylePropertyId get_propertyId()
private void set_propertyId(StylePropertyId value)
public int get_valueCount()
private void set_valueCount(int value)
public float get_dpiScaling()
private void set_dpiScaling(float value)
public void SetContext(StyleSheet sheet, StyleComplexSelector selector, StyleVariableContext varContext, float dpiScaling)
public void SetInlineContext(StyleSheet sheet, StyleProperty[] properties, StylePropertyId[] propertyIds, float dpiScaling)
public StylePropertyId MoveNextProperty()
public StylePropertyValue GetValue(int index)
public StyleValueType GetValueType(int index)
public bool IsValueType(int index, StyleValueType type)
public bool IsKeyword(int index, StyleValueKeyword keyword)
public string ReadAsString(int index)
public Length ReadLength(int index)
public TimeValue ReadTimeValue(int index)
public Translate ReadTranslate(int index)
public TransformOrigin ReadTransformOrigin(int index)
public Rotate ReadRotate(int index)
public Scale ReadScale(int index)
public float ReadFloat(int index)
public int ReadInt(int index)
public Color ReadColor(int index)
public int ReadEnum(StyleEnumType enumType, int index)
public FontDefinition ReadFontDefinition(int index)
public Font ReadFont(int index)
public Background ReadBackground(int index)
public Cursor ReadCursor(int index)
public TextShadow ReadTextShadow(int index)
public void ReadListEasingFunction(List`1<EasingFunction> list, int index)
public void ReadListTimeValue(List`1<TimeValue> list, int index)
public void ReadListStylePropertyName(List`1<StylePropertyName> list, int index)
public void ReadListString(List`1<string> list, int index)
private void LoadProperties()
private void SetCurrentProperty()
public TransformOrigin ReadTransformOrigin(int valCount, StylePropertyValue val1, StylePropertyValue val2, StylePropertyValue zVvalue)
private Length ReadTransformOriginEnum(StylePropertyValue value, Boolean& isVertical, Boolean& isHorizontal)
public Translate ReadTranslate(int valCount, StylePropertyValue val1, StylePropertyValue val2, StylePropertyValue val3)
public Scale ReadScale(int valCount, StylePropertyValue val1, StylePropertyValue val2, StylePropertyValue val3)
public Rotate ReadRotate(int valCount, StylePropertyValue val1, StylePropertyValue val2, StylePropertyValue val3, StylePropertyValue val4)
private int ReadEnum(StyleEnumType enumType, StylePropertyValue value)
public Angle ReadAngle(StylePropertyValue value)
internal bool TryGetImageSourceFromValue(StylePropertyValue propertyValue, float dpiScaling, ImageSource& source)
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyUtil : object {
private HashSet`1<StylePropertyId> s_AnimatablePropertiesHash
public int k_GroupOffset
internal Dictionary`2<string, StylePropertyId> s_NameToId
internal Dictionary`2<StylePropertyId, string> s_IdToName
internal StylePropertyId[] s_AnimatableProperties
public bool IsAnimatable(StylePropertyId id)
public bool TryGetEnumIntValue(StyleEnumType enumType, string value, Int32& intValue)
public bool IsMatchingShorthand(StylePropertyId shorthand, StylePropertyId id)
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyValue : ValueType {
public StyleSheet sheet
public StyleValueHandle handle
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyValueMatcher : BaseStyleMatcher {
private List`1<StylePropertyValue> m_Values
private StylePropertyValue current
public int valueCount
public bool isCurrentVariable
public bool isCurrentComma
private StylePropertyValue get_current()
public int get_valueCount()
public bool get_isCurrentVariable()
public bool get_isCurrentComma()
public MatchResult Match(Expression exp, List`1<StylePropertyValue> values)
protected bool MatchKeyword(string keyword)
protected bool MatchNumber()
protected bool MatchInteger()
protected bool MatchLength()
protected bool MatchPercentage()
protected bool MatchColor()
protected bool MatchResource()
protected bool MatchUrl()
protected bool MatchTime()
protected bool MatchCustomIdent()
protected bool MatchAngle()
}
internal UnityEngine.UIElements.StyleSheets.StylePropertyValueParser : object {
private string m_PropertyValue
private List`1<string> m_ValueList
private StringBuilder m_StringBuilder
private int m_ParseIndex
public String[] Parse(string propertyValue)
private void AddValuePart()
private void AppendFunction()
private void EatSpace()
}
internal UnityEngine.UIElements.StyleSheets.StyleSelectorHelper : object {
public MatchResultInfo MatchesSelector(VisualElement element, StyleSelector selector)
public bool MatchRightToLeft(VisualElement element, StyleComplexSelector complexSelector, Action`2<VisualElement, MatchResultInfo> processResult)
private void FastLookup(IDictionary`2<string, StyleComplexSelector> table, List`1<SelectorMatchRecord> matchedSelectors, StyleMatchingContext context, string input, SelectorMatchRecord& record)
public void FindMatches(StyleMatchingContext context, List`1<SelectorMatchRecord> matchedSelectors)
public void FindMatches(StyleMatchingContext context, List`1<SelectorMatchRecord> matchedSelectors, int parentSheetIndex)
}
internal UnityEngine.UIElements.StyleSheets.StyleSheetBuilder : object {
private BuilderState m_BuilderState
private List`1<float> m_Floats
private List`1<Dimension> m_Dimensions
private List`1<Color> m_Colors
private List`1<string> m_Strings
private List`1<StyleRule> m_Rules
private List`1<Object> m_Assets
private List`1<ScalableImage> m_ScalableImages
private List`1<StyleComplexSelector> m_ComplexSelectors
private List`1<StyleProperty> m_CurrentProperties
private List`1<StyleValueHandle> m_CurrentValues
private StyleComplexSelector m_CurrentComplexSelector
private List`1<StyleSelector> m_CurrentSelectors
private StyleProperty m_CurrentProperty
private StyleRule m_CurrentRule
private List`1<ImportStruct> m_Imports
public StyleProperty currentProperty
public StyleProperty get_currentProperty()
public StyleRule BeginRule(int ruleLine)
public ComplexSelectorScope BeginComplexSelector(int specificity)
public void AddSimpleSelector(StyleSelectorPart[] parts, StyleSelectorRelationship previousRelationsip)
public void EndComplexSelector()
public StyleProperty BeginProperty(string name, int line)
public void AddImport(ImportStruct importStruct)
public void AddValue(float value)
public void AddValue(Dimension value)
public void AddValue(StyleValueKeyword keyword)
public void AddValue(StyleValueFunction function)
public void AddCommaSeparator()
public void AddValue(string value, StyleValueType type)
public void AddValue(Color value)
public void AddValue(Object value)
public void AddValue(ScalableImage value)
public void EndProperty()
public int EndRule()
public void BuildTo(StyleSheet writeTo)
private void RegisterVariable(string value)
private void RegisterValue(List`1<T> list, StyleValueType type, T value)
private void Log(string msg)
}
internal UnityEngine.UIElements.StyleSheets.StyleSheetCache : object {
private SheetHandleKeyComparer s_Comparer
private Dictionary`2<SheetHandleKey, StylePropertyId[]> s_RulePropertyIdsCache
internal void ClearCaches()
internal StylePropertyId[] GetPropertyIds(StyleSheet sheet, int ruleIndex)
internal StylePropertyId[] GetPropertyIds(StyleRule rule)
private StylePropertyId GetPropertyId(StyleRule rule, int index)
}
internal UnityEngine.UIElements.StyleSheets.StyleSheetColor : object {
private Dictionary`2<string, Color32> s_NameToColor
public bool TryGetColor(string name, Color& color)
private Color32 HexToColor32(UInt32 color)
}
internal UnityEngine.UIElements.StyleSheets.StyleSheetExtensions : object {
public string ReadAsString(StyleSheet sheet, StyleValueHandle handle)
public bool IsVarFunction(StyleValueHandle handle)
}
internal UnityEngine.UIElements.StyleSheets.StyleValidationResult : ValueType {
public StyleValidationStatus status
public string message
public string errorValue
public string hint
public bool success
public bool get_success()
}
internal UnityEngine.UIElements.StyleSheets.StyleValidationStatus : Enum {
public int value__
public StyleValidationStatus Ok
public StyleValidationStatus Error
public StyleValidationStatus Warning
}
internal UnityEngine.UIElements.StyleSheets.StyleValidator : object {
private StyleSyntaxParser m_SyntaxParser
private StyleMatcher m_StyleMatcher
public StyleValidationResult ValidateProperty(string name, string value)
private bool IsUnitMissing(string propertySyntax, string propertyValue, String& unitHint)
private bool IsUnsupportedColor(string propertySyntax)
}
internal UnityEngine.UIElements.StyleSheets.StyleValue : ValueType {
public StylePropertyId id
public StyleKeyword keyword
public float number
public Length length
public Color color
public GCHandle resource
}
internal UnityEngine.UIElements.StyleSheets.StyleValueManaged : ValueType {
public StylePropertyId id
public StyleKeyword keyword
public object value
}
internal UnityEngine.UIElements.StyleSheets.Syntax.DataType : Enum {
public int value__
public DataType None
public DataType Number
public DataType Integer
public DataType Length
public DataType Percentage
public DataType Color
public DataType Resource
public DataType Url
public DataType Time
public DataType Angle
public DataType CustomIdent
}
internal UnityEngine.UIElements.StyleSheets.Syntax.Expression : object {
public ExpressionType type
public ExpressionMultiplier multiplier
public DataType dataType
public ExpressionCombinator combinator
public Expression[] subExpressions
public string keyword
public void .ctor(ExpressionType type)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.ExpressionCombinator : Enum {
public int value__
public ExpressionCombinator None
public ExpressionCombinator Or
public ExpressionCombinator OrOr
public ExpressionCombinator AndAnd
public ExpressionCombinator Juxtaposition
public ExpressionCombinator Group
}
internal UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplier : ValueType {
public int Infinity
private ExpressionMultiplierType m_Type
public int min
public int max
public ExpressionMultiplierType type
public ExpressionMultiplierType get_type()
public void set_type(ExpressionMultiplierType value)
public void .ctor(ExpressionMultiplierType type)
private void SetType(ExpressionMultiplierType value)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType : Enum {
public int value__
public ExpressionMultiplierType None
public ExpressionMultiplierType ZeroOrMore
public ExpressionMultiplierType OneOrMore
public ExpressionMultiplierType ZeroOrOne
public ExpressionMultiplierType Ranges
public ExpressionMultiplierType OneOrMoreComma
public ExpressionMultiplierType GroupAtLeastOne
}
internal UnityEngine.UIElements.StyleSheets.Syntax.ExpressionType : Enum {
public int value__
public ExpressionType Unknown
public ExpressionType Data
public ExpressionType Keyword
public ExpressionType Combinator
}
internal UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxParser : object {
private List`1<Expression> m_ProcessExpressionList
private Stack`1<Expression> m_ExpressionStack
private Stack`1<ExpressionCombinator> m_CombinatorStack
private Dictionary`2<string, Expression> m_ParsedExpressionCache
public Expression Parse(string syntax)
private Expression ParseExpression(StyleSyntaxTokenizer tokenizer)
private void ProcessCombinatorStack()
private Expression ParseTerm(StyleSyntaxTokenizer tokenizer)
private ExpressionCombinator ParseCombinatorType(StyleSyntaxTokenizer tokenizer)
private Expression ParseGroup(StyleSyntaxTokenizer tokenizer)
private Expression ParseDataType(StyleSyntaxTokenizer tokenizer)
private Expression ParseNonTerminalValue(string syntax)
private Expression ParseProperty(StyleSyntaxTokenizer tokenizer)
private void ParseMultiplier(StyleSyntaxTokenizer tokenizer, ExpressionMultiplier& multiplier)
private void ParseRanges(StyleSyntaxTokenizer tokenizer, Int32& min, Int32& max)
private void EatSpace(StyleSyntaxTokenizer tokenizer)
private bool IsExpressionEnd(StyleSyntaxToken token)
private bool IsCombinator(StyleSyntaxToken token)
private bool IsMultiplier(StyleSyntaxToken token)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxToken : ValueType {
public StyleSyntaxTokenType type
public string text
public int number
public void .ctor(StyleSyntaxTokenType t)
public void .ctor(StyleSyntaxTokenType type, string text)
public void .ctor(StyleSyntaxTokenType type, int number)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxTokenizer : object {
private List`1<StyleSyntaxToken> m_Tokens
private int m_CurrentTokenIndex
public StyleSyntaxToken current
public StyleSyntaxToken get_current()
public StyleSyntaxToken MoveNext()
public StyleSyntaxToken PeekNext()
public void Tokenize(string syntax)
private bool IsNextCharacter(string s, int index, char c)
private bool IsNextLetterOrDash(string s, int index)
private bool IsNextNumber(string s, int index)
private int GlobCharacter(string s, int index, char c)
}
internal UnityEngine.UIElements.StyleSheets.Syntax.StyleSyntaxTokenType : Enum {
public int value__
public StyleSyntaxTokenType Unknown
public StyleSyntaxTokenType String
public StyleSyntaxTokenType Number
public StyleSyntaxTokenType Space
public StyleSyntaxTokenType SingleBar
public StyleSyntaxTokenType DoubleBar
public StyleSyntaxTokenType DoubleAmpersand
public StyleSyntaxTokenType Comma
public StyleSyntaxTokenType SingleQuote
public StyleSyntaxTokenType Asterisk
public StyleSyntaxTokenType Plus
public StyleSyntaxTokenType QuestionMark
public StyleSyntaxTokenType HashMark
public StyleSyntaxTokenType ExclamationPoint
public StyleSyntaxTokenType OpenBracket
public StyleSyntaxTokenType CloseBracket
public StyleSyntaxTokenType OpenBrace
public StyleSyntaxTokenType CloseBrace
public StyleSyntaxTokenType LessThan
public StyleSyntaxTokenType GreaterThan
public StyleSyntaxTokenType End
}
public UnityEngine.UIElements.StyleTextShadow : ValueType {
private StyleKeyword m_Keyword
private TextShadow m_Value
public TextShadow value
public StyleKeyword keyword
public TextShadow get_value()
public void set_value(TextShadow value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(TextShadow v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(TextShadow v, StyleKeyword keyword)
public bool op_Equality(StyleTextShadow lhs, StyleTextShadow rhs)
public bool op_Inequality(StyleTextShadow lhs, StyleTextShadow rhs)
public StyleTextShadow op_Implicit(StyleKeyword keyword)
public StyleTextShadow op_Implicit(TextShadow v)
public bool Equals(StyleTextShadow other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleTransformOrigin : ValueType {
private TransformOrigin m_Value
private StyleKeyword m_Keyword
public TransformOrigin value
public StyleKeyword keyword
public TransformOrigin get_value()
public void set_value(TransformOrigin value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(TransformOrigin v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(TransformOrigin v, StyleKeyword keyword)
public bool op_Equality(StyleTransformOrigin lhs, StyleTransformOrigin rhs)
public bool op_Inequality(StyleTransformOrigin lhs, StyleTransformOrigin rhs)
public StyleTransformOrigin op_Implicit(StyleKeyword keyword)
public StyleTransformOrigin op_Implicit(TransformOrigin v)
public bool Equals(StyleTransformOrigin other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.StyleTranslate : ValueType {
private Translate m_Value
private StyleKeyword m_Keyword
public Translate value
public StyleKeyword keyword
public Translate get_value()
public void set_value(Translate value)
public StyleKeyword get_keyword()
public void set_keyword(StyleKeyword value)
public void .ctor(Translate v)
public void .ctor(StyleKeyword keyword)
internal void .ctor(Translate v, StyleKeyword keyword)
public bool op_Equality(StyleTranslate lhs, StyleTranslate rhs)
public bool op_Inequality(StyleTranslate lhs, StyleTranslate rhs)
public StyleTranslate op_Implicit(StyleKeyword keyword)
public StyleTranslate op_Implicit(Translate v)
public bool Equals(StyleTranslate other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.StyleValueCollection : object {
internal List`1<StyleValue> m_Values
public StyleLength GetStyleLength(StylePropertyId id)
public StyleFloat GetStyleFloat(StylePropertyId id)
public StyleInt GetStyleInt(StylePropertyId id)
public StyleColor GetStyleColor(StylePropertyId id)
public StyleBackground GetStyleBackground(StylePropertyId id)
public StyleFont GetStyleFont(StylePropertyId id)
public StyleFontDefinition GetStyleFontDefinition(StylePropertyId id)
public bool TryGetStyleValue(StylePropertyId id, StyleValue& value)
public void SetStyleValue(StyleValue value)
}
internal UnityEngine.UIElements.StyleValueExtensions : object {
internal string DebugString(IStyleValue`1<T> styleValue)
internal YogaValue ToYogaValue(Length length)
internal Length ToLength(StyleKeyword keyword)
internal Rotate ToRotate(StyleKeyword keyword)
internal Scale ToScale(StyleKeyword keyword)
internal Translate ToTranslate(StyleKeyword keyword)
internal Length ToLength(StyleLength styleLength)
internal void CopyFrom(List`1<T> list, List`1<T> other)
}
internal UnityEngine.UIElements.StyleValueFunction : Enum {
public int value__
public StyleValueFunction Unknown
public StyleValueFunction Var
public StyleValueFunction Env
public StyleValueFunction LinearGradient
}
internal UnityEngine.UIElements.StyleValueFunctionExtension : object {
public string k_Var
public string k_Env
public string k_LinearGradient
public StyleValueFunction FromUssString(string ussValue)
public string ToUssString(StyleValueFunction svf)
}
internal UnityEngine.UIElements.StyleValueHandle : ValueType {
private StyleValueType m_ValueType
internal int valueIndex
public StyleValueType valueType
public StyleValueType get_valueType()
internal void set_valueType(StyleValueType value)
internal void .ctor(int valueIndex, StyleValueType valueType)
}
internal UnityEngine.UIElements.StyleValueKeyword : Enum {
public int value__
public StyleValueKeyword Inherit
public StyleValueKeyword Initial
public StyleValueKeyword Auto
public StyleValueKeyword Unset
public StyleValueKeyword True
public StyleValueKeyword False
public StyleValueKeyword None
}
internal UnityEngine.UIElements.StyleValueKeywordExtension : object {
public string ToUssString(StyleValueKeyword svk)
}
internal UnityEngine.UIElements.StyleValueType : Enum {
public int value__
public StyleValueType Invalid
public StyleValueType Keyword
public StyleValueType Float
public StyleValueType Dimension
public StyleValueType Color
public StyleValueType ResourcePath
public StyleValueType AssetReference
public StyleValueType Enum
public StyleValueType Variable
public StyleValueType String
public StyleValueType Function
public StyleValueType CommaSeparator
public StyleValueType ScalableImage
public StyleValueType MissingAssetReference
}
internal UnityEngine.UIElements.StyleVariable : ValueType {
public string name
public StyleSheet sheet
public StyleValueHandle[] handles
public void .ctor(string name, StyleSheet sheet, StyleValueHandle[] handles)
public int GetHashCode()
}
internal UnityEngine.UIElements.StyleVariableContext : object {
public StyleVariableContext none
private int m_VariableHash
private List`1<StyleVariable> m_Variables
private List`1<int> m_SortedHash
public void Add(StyleVariable sv)
public void AddInitialRange(StyleVariableContext other)
public void Clear()
public void .ctor(StyleVariableContext other)
public bool TryFindVariable(string name, StyleVariable& v)
public int GetVariableHash()
}
internal UnityEngine.UIElements.StyleVariableResolver : object {
internal int kMaxResolves
private StyleSyntaxParser s_SyntaxParser
private StylePropertyValueMatcher m_Matcher
private List`1<StylePropertyValue> m_ResolvedValues
private Stack`1<string> m_ResolvedVarStack
private StyleProperty m_Property
private Stack`1<ResolveContext> m_ContextStack
private ResolveContext m_CurrentContext
private StyleVariableContext <variableContext>k__BackingField
private StyleSheet currentSheet
private StyleValueHandle[] currentHandles
public List`1<StylePropertyValue> resolvedValues
public StyleVariableContext variableContext
private StyleSheet get_currentSheet()
private StyleValueHandle[] get_currentHandles()
public List`1<StylePropertyValue> get_resolvedValues()
public StyleVariableContext get_variableContext()
public void set_variableContext(StyleVariableContext value)
public void Init(StyleProperty property, StyleSheet sheet, StyleValueHandle[] handles)
private void PushContext(StyleSheet sheet, StyleValueHandle[] handles)
private void PopContext()
public void AddValue(StyleValueHandle handle)
public bool ResolveVarFunction(Int32& index)
private Result ResolveVarFunction(Int32& index, int argc, string varName)
public bool ValidateResolvedValues()
private Result ResolveVariable(string variableName)
private Result ResolveFallback(Int32& index)
private void ParseVarFunction(StyleSheet sheet, StyleValueHandle[] handles, Int32& index, Int32& argCount, String& variableName)
}
internal UnityEngine.UIElements.TemplateAsset : VisualElementAsset {
private string m_TemplateAlias
private List`1<AttributeOverride> m_AttributeOverrides
private List`1<SlotUsageEntry> m_SlotUsages
public string templateAlias
public List`1<AttributeOverride> attributeOverrides
internal List`1<SlotUsageEntry> slotUsages
public string get_templateAlias()
public void set_templateAlias(string value)
public List`1<AttributeOverride> get_attributeOverrides()
public void set_attributeOverrides(List`1<AttributeOverride> value)
internal List`1<SlotUsageEntry> get_slotUsages()
internal void set_slotUsages(List`1<SlotUsageEntry> value)
public void .ctor(string templateAlias, string fullTypeName)
public void AddSlotUsage(string slotName, int resId)
}
public UnityEngine.UIElements.TemplateContainer : BindableElement {
private string <templateId>k__BackingField
private VisualElement m_ContentContainer
private VisualTreeAsset m_TemplateSource
public string templateId
public VisualTreeAsset templateSource
public VisualElement contentContainer
public string get_templateId()
private void set_templateId(string value)
public VisualTreeAsset get_templateSource()
internal void set_templateSource(VisualTreeAsset value)
public void .ctor(string templateId)
public VisualElement get_contentContainer()
internal void SetContentContainer(VisualElement content)
}
internal UnityEngine.UIElements.TextCoreHandle : ValueType {
private Vector2 <MeasuredSizes>k__BackingField
private Vector2 <RoundedSizes>k__BackingField
private Vector2 m_PreferredSize
private int m_PreviousGenerationSettingsHash
private TextGenerationSettings m_CurrentGenerationSettings
private TextGenerationSettings s_LayoutSettings
private TextInfo m_TextInfoMesh
private TextInfo s_TextInfoLayout
private bool isDirty
public Vector2 MeasuredSizes
public Vector2 RoundedSizes
internal TextInfo textInfoMesh
internal TextInfo textInfoLayout
public Vector2 get_MeasuredSizes()
public void set_MeasuredSizes(Vector2 value)
public Vector2 get_RoundedSizes()
public void set_RoundedSizes(Vector2 value)
public ITextHandle New()
internal TextInfo get_textInfoMesh()
internal TextInfo get_textInfoLayout()
internal bool IsTextInfoAllocated()
public bool IsLegacy()
public void SetDirty()
public bool IsDirty(TextParams parms)
public Vector2 GetCursorPosition(CursorPositionStylePainterParameters parms, float scaling)
public float ComputeTextWidth(TextParams parms, float scaling)
public float ComputeTextHeight(TextParams parms, float scaling)
public float GetLineHeight(int characterIndex, TextParams textParams, float textScaling, float pixelPerPoint)
public int VerticesCount(TextParams parms, float pixelPerPoint)
private ITextHandle UnityEngine.UIElements.ITextHandle.New()
public TextInfo Update(TextParams parms, float pixelsPerPoint)
private void UpdatePreferredValues(TextParams parms)
private TextOverflowMode GetTextOverflowMode(TextParams textParams)
private void UpdateGenerationSettingsCommon(TextParams painterParams, TextGenerationSettings settings)
public bool IsElided()
}
internal UnityEngine.UIElements.TextEditorEngine : TextEditor {
private OnDetectFocusChangeFunction m_DetectFocusChangeFunction
private OnIndexChangeFunction m_IndexChangeFunction
internal Rect localPosition
public void .ctor(OnDetectFocusChangeFunction detectFocusChange, OnIndexChangeFunction indexChangeFunction)
internal Rect get_localPosition()
internal void OnDetectFocusChange()
internal void OnCursorIndexChange()
internal void OnSelectIndexChange()
}
internal UnityEngine.UIElements.TextEditorEventHandler : object {
private TextEditorEngine <editorEngine>k__BackingField
private ITextInputField <textInputField>k__BackingField
protected TextEditorEngine editorEngine
protected ITextInputField textInputField
protected TextEditorEngine get_editorEngine()
private void set_editorEngine(TextEditorEngine value)
protected ITextInputField get_textInputField()
private void set_textInputField(ITextInputField value)
protected void .ctor(TextEditorEngine editorEngine, ITextInputField textInputField)
public void ExecuteDefaultActionAtTarget(EventBase evt)
public void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.UIElements.TextElement : BindableElement {
public string ussClassName
private ITextHandle m_TextHandle
internal int maxTextVertices
private string m_Text
private bool m_EnableRichText
private bool m_DisplayTooltipWhenElided
private bool <isElided>k__BackingField
internal string k_EllipsisText
private bool m_WasElided
private bool m_UpdateTextParams
private TextParams m_TextParams
private int m_PreviousTextParamsHashCode
internal ITextHandle textHandle
public string text
public bool enableRichText
public bool displayTooltipWhenElided
public bool isElided
private string UnityEngine.UIElements.INotifyValueChanged<System.String>.value
internal ITextHandle get_textHandle()
internal void set_textHandle(ITextHandle value)
public void HandleEvent(EventBase evt)
private void OnGeometryChanged(GeometryChangedEvent e)
public string get_text()
public void set_text(string value)
public bool get_enableRichText()
public void set_enableRichText(bool value)
public bool get_displayTooltipWhenElided()
public void set_displayTooltipWhenElided(bool value)
public bool get_isElided()
private void set_isElided(bool value)
private void OnGenerateVisualContent(MeshGenerationContext mgc)
internal string ElideText(string drawText, string ellipsisText, float width, TextOverflowPosition textOverflowPosition)
private void UpdateTooltip()
private void UpdateVisibleText()
private bool ShouldElide()
private bool TextLibraryCanElide()
public Vector2 MeasureTextSize(string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode)
internal Vector2 MeasureVisualElementTextSize(VisualElement ve, string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode, TextHandle textHandle)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
internal int VerticesCount(string text)
private string UnityEngine.UIElements.INotifyValueChanged<System.String>.get_value()
private void UnityEngine.UIElements.INotifyValueChanged<System.String>.set_value(string value)
private void UnityEngine.UIElements.INotifyValueChanged<System.String>.SetValueWithoutNotify(string newValue)
}
public UnityEngine.UIElements.TextField : TextInputBaseField`1<string> {
public string ussClassName
public string labelUssClassName
public string inputUssClassName
private TextInput textInput
public bool multiline
public string value
private TextInput get_textInput()
public bool get_multiline()
public void set_multiline(bool value)
public void SelectRange(int rangeCursorIndex, int selectionIndex)
public void .ctor(int maxLength, bool multiline, bool isPasswordField, char maskChar)
public void .ctor(string label)
public void .ctor(string label, int maxLength, bool multiline, bool isPasswordField, char maskChar)
public string get_value()
public void set_value(string value)
public void SetValueWithoutNotify(string newValue)
internal void OnViewDataReady()
protected string ValueToString(string value)
protected string StringToValue(string str)
}
internal UnityEngine.UIElements.TextHandle : ValueType {
internal ITextHandle textHandle
public Vector2 MeasuredSizes
public Vector2 RoundedSizes
public Vector2 get_MeasuredSizes()
public void set_MeasuredSizes(Vector2 value)
public Vector2 get_RoundedSizes()
public void set_RoundedSizes(Vector2 value)
public Vector2 GetCursorPosition(CursorPositionStylePainterParameters parms, float scaling)
public float GetLineHeight(int characterIndex, TextParams textParams, float textScaling, float pixelPerPoint)
public float ComputeTextWidth(TextParams parms, float scaling)
public float ComputeTextHeight(TextParams parms, float scaling)
public TextInfo Update(TextParams parms, float pixelsPerPoint)
public int VerticesCount(TextParams parms, float pixelPerPoint)
public ITextHandle New()
public bool IsLegacy()
public void SetDirty()
public bool IsElided()
}
public UnityEngine.UIElements.TextInputBaseField`1 : BaseField`1<TValueType> {
private CustomStyleProperty`1<Color> s_SelectionColorProperty
private CustomStyleProperty`1<Color> s_CursorColorProperty
private int m_VisualInputTabIndex
private TextInputBase<TValueType> m_TextInputBase
internal int kMaxLengthNone
internal char kMaskCharDefault
private ITextHandle <iTextHandle>k__BackingField
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string singleLineInputUssClassName
public string multilineInputUssClassName
public string textInputUssName
private Action`1<bool> onIsReadOnlyChanged
protected internal TextInputBase<TValueType> textInputBase
internal TextHandle textHandle
internal ITextHandle iTextHandle
public string text
public bool isReadOnly
public bool isPasswordField
public Color selectionColor
public Color cursorColor
public int cursorIndex
public int selectIndex
public int maxLength
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
public bool isDelayed
public char maskChar
internal TextEditorEventHandler editorEventHandler
internal TextEditorEngine editorEngine
internal bool hasFocus
protected internal TextInputBase<TValueType> get_textInputBase()
internal TextHandle get_textHandle()
internal ITextHandle get_iTextHandle()
private void set_iTextHandle(ITextHandle value)
public string get_text()
protected void set_text(string value)
protected void add_onIsReadOnlyChanged(Action`1<bool> value)
protected void remove_onIsReadOnlyChanged(Action`1<bool> value)
public bool get_isReadOnly()
public void set_isReadOnly(bool value)
public bool get_isPasswordField()
public void set_isPasswordField(bool value)
public Color get_selectionColor()
public Color get_cursorColor()
public int get_cursorIndex()
public int get_selectIndex()
public int get_maxLength()
public void set_maxLength(int value)
public bool get_doubleClickSelectsWord()
public void set_doubleClickSelectsWord(bool value)
public bool get_tripleClickSelectsLine()
public void set_tripleClickSelectsLine(bool value)
public bool get_isDelayed()
public void set_isDelayed(bool value)
public char get_maskChar()
public void set_maskChar(char value)
public Vector2 MeasureTextSize(string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode)
internal TextEditorEventHandler get_editorEventHandler()
internal TextEditorEngine get_editorEngine()
internal bool get_hasFocus()
protected string ValueToString(TValueType value)
protected TValueType StringToValue(string str)
public void SelectAll()
internal void SyncTextEngine()
internal void DrawWithTextSelectionAndCursor(MeshGenerationContext mgc, string newText)
protected void .ctor(int maxLength, char maskChar, TextInputBase<TValueType> textInputBase)
protected void .ctor(string label, int maxLength, char maskChar, TextInputBase<TValueType> textInputBase)
private void OnAttachToPanel(AttachToPanelEvent e)
private void OnFieldCustomStyleResolved(CustomStyleResolvedEvent e)
protected void ExecuteDefaultActionAtTarget(EventBase evt)
protected void UpdateMixedValueContent()
}
internal UnityEngine.UIElements.TextNativeHandle : ValueType {
private Vector2 <MeasuredSizes>k__BackingField
private Vector2 <RoundedSizes>k__BackingField
internal NativeArray`1<TextVertex> textVertices
private int m_PreviousTextParamsHash
public Vector2 MeasuredSizes
public Vector2 RoundedSizes
public Vector2 get_MeasuredSizes()
public void set_MeasuredSizes(Vector2 value)
public Vector2 get_RoundedSizes()
public void set_RoundedSizes(Vector2 value)
public ITextHandle New()
public bool IsLegacy()
public void SetDirty()
private ITextHandle UnityEngine.UIElements.ITextHandle.New()
public float GetLineHeight(int characterIndex, TextParams textParams, float textScaling, float pixelPerPoint)
public TextInfo Update(TextParams parms, float pixelsPerPoint)
public int VerticesCount(TextParams parms, float pixelPerPoint)
public NativeArray`1<TextVertex> GetVertices(TextParams parms, float scaling)
public Vector2 GetCursorPosition(CursorPositionStylePainterParameters parms, float scaling)
public float ComputeTextWidth(TextParams parms, float scaling)
public float ComputeTextHeight(TextParams parms, float scaling)
public bool IsElided()
}
public UnityEngine.UIElements.TextOverflow : Enum {
public int value__
public TextOverflow Clip
public TextOverflow Ellipsis
}
public UnityEngine.UIElements.TextOverflowPosition : Enum {
public int value__
public TextOverflowPosition End
public TextOverflowPosition Start
public TextOverflowPosition Middle
}
public UnityEngine.UIElements.TextShadow : ValueType {
public Vector2 offset
public float blurRadius
public Color color
public bool Equals(object obj)
public bool Equals(TextShadow other)
public int GetHashCode()
public bool op_Equality(TextShadow style1, TextShadow style2)
public bool op_Inequality(TextShadow style1, TextShadow style2)
public string ToString()
internal TextShadow LerpUnclamped(TextShadow a, TextShadow b, float t)
}
internal UnityEngine.UIElements.TextureId : ValueType {
private int m_Index
public TextureId invalid
public int index
public void .ctor(int index)
public int get_index()
public float ConvertToGpu()
public bool Equals(object obj)
public bool Equals(TextureId other)
public int GetHashCode()
public bool op_Equality(TextureId left, TextureId right)
public bool op_Inequality(TextureId left, TextureId right)
}
internal UnityEngine.UIElements.TextureRegistry : object {
private List`1<TextureInfo> m_Textures
private Dictionary`2<Texture, TextureId> m_TextureToId
private Stack`1<TextureId> m_FreeIds
internal int maxTextures
private TextureRegistry <instance>k__BackingField
public TextureRegistry instance
public TextureRegistry get_instance()
public Texture GetTexture(TextureId id)
public TextureId AllocAndAcquireDynamic()
public void UpdateDynamic(TextureId id, Texture texture)
private TextureId AllocAndAcquire(Texture texture, bool dynamic)
public TextureId Acquire(Texture tex)
public void Acquire(TextureId id)
public void Release(TextureId id)
public TextureId TextureToId(Texture texture)
public Statistics GatherStatistics()
}
internal UnityEngine.UIElements.TextUtilities : object {
public float ComputeTextScaling(Matrix4x4 worldMatrix, float pixelsPerPoint)
internal Vector2 MeasureVisualElementTextSize(VisualElement ve, string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode, ITextHandle textHandle)
internal FontAsset GetFontAsset(TextParams textParam)
internal FontAsset GetFontAsset(VisualElement ve)
internal Font GetFont(TextParams textParam)
internal Font GetFont(VisualElement ve)
internal bool IsFontAssigned(VisualElement ve)
internal bool IsFontAssigned(TextParams textParams)
internal PanelTextSettings GetTextSettingsFrom(VisualElement ve)
internal PanelTextSettings GetTextSettingsFrom(TextParams textParam)
internal TextCoreSettings GetTextCoreSettingsForElement(VisualElement ve)
}
public UnityEngine.UIElements.ThemeStyleSheet : StyleSheet {
internal void OnEnable()
}
internal UnityEngine.UIElements.TimeMsFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public long Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public long EndInvoke(IAsyncResult result)
}
internal UnityEngine.UIElements.TimerEventScheduler : object {
private List`1<ScheduledItem> m_ScheduledItems
private bool m_TransactionMode
private List`1<ScheduledItem> m_ScheduleTransactions
private HashSet`1<ScheduledItem> m_UnscheduleTransactions
internal bool disableThrottling
private int m_LastUpdatedIndex
public void Schedule(ScheduledItem item)
public ScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs)
public ScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition)
public ScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs)
private bool RemovedScheduledItemAt(int index)
public void Unschedule(ScheduledItem item)
private bool PrivateUnSchedule(ScheduledItem sItem)
public void UpdateScheduledEvents()
}
public UnityEngine.UIElements.TimerState : ValueType {
private long <start>k__BackingField
private long <now>k__BackingField
public long start
public long now
public long deltaTime
public long get_start()
public void set_start(long value)
public long get_now()
public void set_now(long value)
public long get_deltaTime()
public bool Equals(object obj)
public bool Equals(TimerState other)
public int GetHashCode()
public bool op_Equality(TimerState state1, TimerState state2)
public bool op_Inequality(TimerState state1, TimerState state2)
}
public UnityEngine.UIElements.TimeUnit : Enum {
public int value__
public TimeUnit Second
public TimeUnit Millisecond
}
public UnityEngine.UIElements.TimeValue : ValueType {
private float m_Value
private TimeUnit m_Unit
public float value
public TimeUnit unit
public float get_value()
public void set_value(float value)
public TimeUnit get_unit()
public void set_unit(TimeUnit value)
public void .ctor(float value)
public void .ctor(float value, TimeUnit unit)
public TimeValue op_Implicit(float value)
public bool op_Equality(TimeValue lhs, TimeValue rhs)
public bool op_Inequality(TimeValue lhs, TimeValue rhs)
public bool Equals(TimeValue other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.Toggle : BaseBoolField {
public string ussClassName
public string labelUssClassName
public string inputUssClassName
public string noTextVariantUssClassName
public string checkmarkUssClassName
public string textUssClassName
public void .ctor(string label)
protected void InitLabel()
}
public UnityEngine.UIElements.TooltipEvent : EventBase`1<TooltipEvent> {
private string <tooltip>k__BackingField
private Rect <rect>k__BackingField
public string tooltip
public Rect rect
public string get_tooltip()
public void set_tooltip(string value)
public Rect get_rect()
public void set_rect(Rect value)
protected void Init()
private void LocalInit()
internal TooltipEvent GetPooled(string tooltip, Rect rect)
}
internal UnityEngine.UIElements.TouchScreenTextEditorEventHandler : TextEditorEventHandler {
private IVisualElementScheduledItem m_TouchKeyboardPoller
private VisualElement m_LastPointerDownTarget
public void .ctor(TextEditorEngine editorEngine, ITextInputField textInputField)
private void PollTouchScreenKeyboard()
private void DoPollTouchScreenKeyboard()
public void ExecuteDefaultActionAtTarget(EventBase evt)
}
internal UnityEngine.UIElements.TransformData : ValueType {
public Rotate rotate
public Scale scale
public TransformOrigin transformOrigin
public Translate translate
public TransformData Copy()
public void CopyFrom(TransformData& other)
public bool op_Equality(TransformData lhs, TransformData rhs)
public bool op_Inequality(TransformData lhs, TransformData rhs)
public bool Equals(TransformData other)
public bool Equals(object obj)
public int GetHashCode()
}
public UnityEngine.UIElements.TransformOrigin : ValueType {
private Length m_X
private Length m_Y
private float m_Z
public Length x
public Length y
public float z
public void .ctor(Length x, Length y, float z)
public void .ctor(Length x, Length y)
public TransformOrigin Initial()
public Length get_x()
public void set_x(Length value)
public Length get_y()
public void set_y(Length value)
public float get_z()
public void set_z(float value)
public bool op_Equality(TransformOrigin lhs, TransformOrigin rhs)
public bool op_Inequality(TransformOrigin lhs, TransformOrigin rhs)
public bool Equals(TransformOrigin other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public UnityEngine.UIElements.TransformOriginOffset : Enum {
public int value__
public TransformOriginOffset Left
public TransformOriginOffset Right
public TransformOriginOffset Top
public TransformOriginOffset Bottom
public TransformOriginOffset Center
}
internal UnityEngine.UIElements.TransitionData : ValueType {
public List`1<TimeValue> transitionDelay
public List`1<TimeValue> transitionDuration
public List`1<StylePropertyName> transitionProperty
public List`1<EasingFunction> transitionTimingFunction
public TransitionData Copy()
public void CopyFrom(TransitionData& other)
public bool op_Equality(TransitionData lhs, TransitionData rhs)
public bool op_Inequality(TransitionData lhs, TransitionData rhs)
public bool Equals(TransitionData other)
public bool Equals(object obj)
public int GetHashCode()
}
public UnityEngine.UIElements.TransitionEventBase`1 : EventBase`1<T> {
private StylePropertyNameCollection <stylePropertyNames>k__BackingField
private double <elapsedTime>k__BackingField
public StylePropertyNameCollection stylePropertyNames
public double elapsedTime
public StylePropertyNameCollection get_stylePropertyNames()
public double get_elapsedTime()
protected void set_elapsedTime(double value)
protected void Init()
private void LocalInit()
public T GetPooled(StylePropertyName stylePropertyName, double elapsedTime)
public bool AffectsProperty(StylePropertyName stylePropertyName)
}
public UnityEngine.UIElements.Translate : ValueType {
private Length m_X
private Length m_Y
private float m_Z
private bool m_isNone
public Length x
public Length y
public float z
public void .ctor(Length x, Length y, float z)
public void .ctor(Length x, Length y)
public Translate None()
public Length get_x()
public void set_x(Length value)
public Length get_y()
public void set_y(Length value)
public float get_z()
public void set_z(float value)
internal bool IsNone()
public bool op_Equality(Translate lhs, Translate rhs)
public bool op_Inequality(Translate lhs, Translate rhs)
public bool Equals(Translate other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal UnityEngine.UIElements.TreeData`1 : ValueType {
private IList`1<int> m_RootItemIds
private Dictionary`2<int, TreeViewItemData`1<T>> m_Tree
private Dictionary`2<int, int> m_ParentIds
private Dictionary`2<int, List`1<int>> m_ChildrenIds
public IEnumerable`1<int> rootItemIds
public IEnumerable`1<int> get_rootItemIds()
public void .ctor(IList`1<TreeViewItemData`1<T>> rootItems)
public TreeViewItemData`1<T> GetDataForId(int id)
public int GetParentId(int id)
public void AddItem(TreeViewItemData`1<T> item, int parentId, int childIndex)
public bool TryRemove(int id)
public void Move(int id, int newParentId, int childIndex)
private void AddItemToParent(TreeViewItemData`1<T> item, int parentId, int childIndex)
private void RemoveFromParent(int id, int parentId)
private void UpdateParentTree(TreeViewItemData`1<T> current)
private bool TryRemoveChildrenIds(int id)
private void RefreshTree(IList`1<TreeViewItemData`1<T>> rootItems)
private void BuildTree(IEnumerable`1<TreeViewItemData`1<T>> items, bool isRoot)
}
internal UnityEngine.UIElements.TreeItem : ValueType {
public int invalidId
private int <id>k__BackingField
private int <parentId>k__BackingField
private IEnumerable`1<int> <childrenIds>k__BackingField
public int id
public int parentId
public IEnumerable`1<int> childrenIds
public bool hasChildren
public int get_id()
public int get_parentId()
public IEnumerable`1<int> get_childrenIds()
public bool get_hasChildren()
public void .ctor(int id, int parentId, IEnumerable`1<int> childrenIds)
}
internal UnityEngine.UIElements.TreeView : VisualElement {
private string s_ListViewName
private string s_ItemName
private string s_ItemToggleName
private string s_ItemIndentsContainerName
private string s_ItemIndentName
private string s_ItemContentContainerName
private Func`1<VisualElement> m_MakeItem
private Action`1<IEnumerable`1<ITreeViewItem>> onItemsChosen
private Action`1<IEnumerable`1<ITreeViewItem>> onSelectionChange
private List`1<ITreeViewItem> m_SelectedItems
private Action`2<VisualElement, ITreeViewItem> m_BindItem
private Action`2<VisualElement, ITreeViewItem> <unbindItem>k__BackingField
private IList`1<ITreeViewItem> m_RootItems
private List`1<int> m_ExpandedItemIds
private List`1<TreeViewItemWrapper> m_ItemWrappers
private ListView m_ListView
private ScrollView m_ScrollView
public Func`1<VisualElement> makeItem
public ITreeViewItem selectedItem
public IEnumerable`1<ITreeViewItem> selectedItems
public Action`2<VisualElement, ITreeViewItem> bindItem
public Action`2<VisualElement, ITreeViewItem> unbindItem
public IList`1<ITreeViewItem> rootItems
public IEnumerable`1<ITreeViewItem> items
public float resolvedItemHeight
public int itemHeight
public bool horizontalScrollingEnabled
public bool showBorder
public SelectionType selectionType
public AlternatingRowBackground showAlternatingRowBackgrounds
public Func`1<VisualElement> get_makeItem()
public void set_makeItem(Func`1<VisualElement> value)
public void add_onItemsChosen(Action`1<IEnumerable`1<ITreeViewItem>> value)
public void remove_onItemsChosen(Action`1<IEnumerable`1<ITreeViewItem>> value)
public void add_onSelectionChange(Action`1<IEnumerable`1<ITreeViewItem>> value)
public void remove_onSelectionChange(Action`1<IEnumerable`1<ITreeViewItem>> value)
public ITreeViewItem get_selectedItem()
public IEnumerable`1<ITreeViewItem> get_selectedItems()
public Action`2<VisualElement, ITreeViewItem> get_bindItem()
public void set_bindItem(Action`2<VisualElement, ITreeViewItem> value)
public Action`2<VisualElement, ITreeViewItem> get_unbindItem()
public void set_unbindItem(Action`2<VisualElement, ITreeViewItem> value)
public IList`1<ITreeViewItem> get_rootItems()
public void set_rootItems(IList`1<ITreeViewItem> value)
public IEnumerable`1<ITreeViewItem> get_items()
public float get_resolvedItemHeight()
public int get_itemHeight()
public void set_itemHeight(int value)
public bool get_horizontalScrollingEnabled()
public void set_horizontalScrollingEnabled(bool value)
public bool get_showBorder()
public void set_showBorder(bool value)
public SelectionType get_selectionType()
public void set_selectionType(SelectionType value)
public AlternatingRowBackground get_showAlternatingRowBackgrounds()
public void set_showAlternatingRowBackgrounds(AlternatingRowBackground value)
public void .ctor(IList`1<ITreeViewItem> items, int fixedItemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, ITreeViewItem> bindItem)
public void RefreshItems()
public void Rebuild()
internal void OnViewDataReady()
public IEnumerable`1<ITreeViewItem> GetAllItems(IEnumerable`1<ITreeViewItem> rootItems)
public void OnKeyDown(KeyDownEvent evt)
public void SetSelection(int id)
public void SetSelection(IEnumerable`1<int> ids)
public void SetSelectionWithoutNotify(IEnumerable`1<int> ids)
internal void SetSelectionInternal(IEnumerable`1<int> ids, bool sendNotification)
public void AddToSelection(int id)
public void RemoveFromSelection(int id)
private int GetItemIndex(int id, bool expand)
public void ClearSelection()
public void ScrollTo(VisualElement visualElement)
public void ScrollToItem(int id)
internal void CopyExpandedStates(ITreeViewItem source, ITreeViewItem target)
public bool IsExpanded(int id)
public void CollapseItem(int id)
public void ExpandItem(int id)
public ITreeViewItem FindItem(int id)
private void ListViewRefresh()
private void OnItemsChosen(IEnumerable`1<object> chosenItems)
private void OnSelectionChange(IEnumerable`1<object> selectedListItems)
private void OnTreeViewMouseUp(MouseUpEvent evt)
private void OnItemMouseUp(MouseUpEvent evt)
private VisualElement MakeTreeItem()
private void UnbindTreeItem(VisualElement element, int index)
private void BindTreeItem(VisualElement element, int index)
private int GetItemId(int index)
private bool IsExpandedByIndex(int index)
private void CollapseItemByIndex(int index)
private void ExpandItemByIndex(int index)
private void ToggleExpandedState(ChangeEvent`1<bool> evt)
private void CreateWrappers(IEnumerable`1<ITreeViewItem> treeViewItems, int depth, List`1& wrappers)
private void RegenerateWrappers()
private void OnCustomStyleResolved(CustomStyleResolvedEvent e)
private int <SetSelectionInternal>b__69_0(int id)
}
internal UnityEngine.UIElements.TreeViewController : CollectionViewController {
private Dictionary`2<int, TreeItem> m_TreeItems
private List`1<int> m_RootIndices
private List`1<TreeViewItemWrapper> m_ItemWrappers
private List`1<TreeViewItemWrapper> m_WrapperInsertionList
protected TreeView treeView
protected TreeView get_treeView()
public void RebuildTree()
public IEnumerable`1<int> GetRootItemIds()
public IEnumerable`1<int> GetAllItemIds(IEnumerable`1<int> rootIds)
public int GetParentId(int id)
public IEnumerable`1<int> GetChildrenIds(int id)
public void Move(int id, int newParentId, int childIndex)
public bool TryRemoveItem(int id)
internal void InvokeMakeItem(ReusableCollectionItem reusableItem)
internal void InvokeBindItem(ReusableCollectionItem reusableItem, int index)
internal void InvokeDestroyItem(ReusableCollectionItem reusableItem)
private void OnItemPointerUp(PointerUpEvent evt)
private void ToggleExpandedState(ChangeEvent`1<bool> evt)
public int GetItemCount()
public int GetTreeCount()
public int GetIndexForId(int id)
public int GetIdForIndex(int index)
public bool HasChildren(int id)
public bool HasChildrenByIndex(int index)
public IEnumerable`1<int> GetChildrenIdsByIndex(int index)
public int GetChildIndexForId(int id)
private int GetIndentationDepth(int index)
public bool IsExpanded(int id)
public bool IsExpandedByIndex(int index)
public void ExpandItemByIndex(int index, bool expandAllChildren, bool refresh)
public void ExpandItem(int id, bool expandAllChildren)
public void CollapseItemByIndex(int index, bool collapseAllChildren)
public void CollapseItem(int id, bool collapseAllChildren)
public void ExpandAll()
public void CollapseAll()
internal void RegenerateWrappers()
private void CreateWrappers(IEnumerable`1<int> treeViewItemIds, int depth, List`1& wrappers)
private bool IsIndexValid(int index)
}
internal UnityEngine.UIElements.TreeViewItem`1 : object {
private int <id>k__BackingField
internal TreeViewItem`1<T> m_Parent
private List`1<ITreeViewItem> m_Children
private T <data>k__BackingField
public int id
public ITreeViewItem parent
public IEnumerable`1<ITreeViewItem> children
public bool hasChildren
public T data
public int get_id()
private void set_id(int value)
public ITreeViewItem get_parent()
public IEnumerable`1<ITreeViewItem> get_children()
public bool get_hasChildren()
public T get_data()
private void set_data(T value)
public void .ctor(int id, T data, List`1<TreeViewItem`1<T>> children)
public void AddChild(ITreeViewItem child)
public void AddChildren(IList`1<ITreeViewItem> children)
public void RemoveChild(ITreeViewItem child)
}
public UnityEngine.UIElements.TreeViewItemData`1 : ValueType {
private int <id>k__BackingField
private T m_Data
private IList`1<TreeViewItemData`1<T>> m_Children
public int id
public T data
public IEnumerable`1<TreeViewItemData`1<T>> children
public bool hasChildren
public int get_id()
public T get_data()
public IEnumerable`1<TreeViewItemData`1<T>> get_children()
public bool get_hasChildren()
public void .ctor(int id, T data, List`1<TreeViewItemData`1<T>> children)
internal void AddChild(TreeViewItemData`1<T> child)
internal void AddChildren(IList`1<TreeViewItemData`1<T>> children)
internal void InsertChild(TreeViewItemData`1<T> child, int index)
internal void RemoveChild(int childId)
internal int GetChildIndex(int itemId)
internal bool HasChildRecursive(int childId)
internal void ReplaceChild(TreeViewItemData`1<T> newChild)
}
internal UnityEngine.UIElements.TreeViewItemWrapper : ValueType {
public TreeItem item
public int depth
public int id
public int parentId
public IEnumerable`1<int> childrenIds
public bool hasChildren
public int get_id()
public int get_parentId()
public IEnumerable`1<int> get_childrenIds()
public bool get_hasChildren()
public void .ctor(TreeItem item, int depth)
}
internal UnityEngine.UIElements.TreeViewReorderableDragAndDropController : BaseReorderableDragAndDropController {
protected TreeView m_TreeView
public void .ctor(TreeView view)
public DragVisualMode HandleDragAndDrop(IListDragAndDropArgs args)
public void OnDrop(IListDragAndDropArgs args)
}
public UnityEngine.UIElements.TrickleDown : Enum {
public int value__
public TrickleDown NoTrickleDown
public TrickleDown TrickleDown
}
public UnityEngine.UIElements.TwoPaneSplitView : VisualElement {
private string s_UssClassName
private string s_ContentContainerClassName
private string s_HandleDragLineClassName
private string s_HandleDragLineVerticalClassName
private string s_HandleDragLineHorizontalClassName
private string s_HandleDragLineAnchorClassName
private string s_HandleDragLineAnchorVerticalClassName
private string s_HandleDragLineAnchorHorizontalClassName
private string s_VerticalClassName
private string s_HorizontalClassName
private VisualElement m_LeftPane
private VisualElement m_RightPane
private VisualElement m_FixedPane
private VisualElement m_FlexedPane
private float m_FixedPaneDimension
private VisualElement m_DragLine
private VisualElement m_DragLineAnchor
private bool m_CollapseMode
private VisualElement m_Content
private TwoPaneSplitViewOrientation m_Orientation
private int m_FixedPaneIndex
private float m_FixedPaneInitialDimension
internal TwoPaneSplitViewResizer m_Resizer
public VisualElement fixedPane
public VisualElement flexedPane
public int fixedPaneIndex
public float fixedPaneInitialDimension
public TwoPaneSplitViewOrientation orientation
internal float fixedPaneDimension
public VisualElement contentContainer
public VisualElement get_fixedPane()
public VisualElement get_flexedPane()
public int get_fixedPaneIndex()
public void set_fixedPaneIndex(int value)
public float get_fixedPaneInitialDimension()
public void set_fixedPaneInitialDimension(float value)
public TwoPaneSplitViewOrientation get_orientation()
public void set_orientation(TwoPaneSplitViewOrientation value)
internal float get_fixedPaneDimension()
internal void set_fixedPaneDimension(float value)
public void .ctor(int fixedPaneIndex, float fixedPaneStartDimension, TwoPaneSplitViewOrientation orientation)
public void CollapseChild(int index)
public void UnCollapse()
internal void Init(int fixedPaneIndex, float fixedPaneInitialDimension, TwoPaneSplitViewOrientation orientation)
private void OnPostDisplaySetup(GeometryChangedEvent evt)
private void PostDisplaySetup()
private void OnSizeChange(GeometryChangedEvent evt)
private void OnSizeChange()
public VisualElement get_contentContainer()
internal void OnViewDataReady()
private void SetDragLineOffset(float offset)
private void SetFixedPaneDimension(float dimension)
}
public UnityEngine.UIElements.TwoPaneSplitViewOrientation : Enum {
public int value__
public TwoPaneSplitViewOrientation Horizontal
public TwoPaneSplitViewOrientation Vertical
}
internal UnityEngine.UIElements.TwoPaneSplitViewResizer : PointerManipulator {
private Vector3 m_Start
protected bool m_Active
private TwoPaneSplitView m_SplitView
private int m_Direction
private TwoPaneSplitViewOrientation m_Orientation
private VisualElement fixedPane
private VisualElement flexedPane
private float fixedPaneMinDimension
private float flexedPaneMinDimension
private VisualElement get_fixedPane()
private VisualElement get_flexedPane()
private float get_fixedPaneMinDimension()
private float get_flexedPaneMinDimension()
public void .ctor(TwoPaneSplitView splitView, int dir, TwoPaneSplitViewOrientation orientation)
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
public void ApplyDelta(float delta)
protected void OnPointerDown(PointerDownEvent e)
protected void OnPointerMove(PointerMoveEvent e)
protected void OnPointerUp(PointerUpEvent e)
}
public UnityEngine.UIElements.TypedUxmlAttributeDescription`1 : UxmlAttributeDescription {
private T <defaultValue>k__BackingField
public T defaultValue
public string defaultValueAsString
public T GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public T get_defaultValue()
public void set_defaultValue(T value)
public string get_defaultValueAsString()
}
public UnityEngine.UIElements.UIDocument : MonoBehaviour {
internal string k_RootStyleClassName
internal string k_VisualElementNameSuffix
private int k_DefaultSortingOrder
private int s_CurrentUIDocumentCounter
internal int m_UIDocumentCreationIndex
private PanelSettings m_PanelSettings
private PanelSettings m_PreviousPanelSettings
private UIDocument m_ParentUI
private UIDocumentList m_ChildrenContent
private List`1<UIDocument> m_ChildrenContentCopy
private VisualTreeAsset sourceAsset
private VisualElement m_RootVisualElement
private int m_FirstChildInsertIndex
private float m_SortingOrder
public PanelSettings panelSettings
public UIDocument parentUI
public VisualTreeAsset visualTreeAsset
public VisualElement rootVisualElement
internal int firstChildInserIndex
public float sortingOrder
public PanelSettings get_panelSettings()
public void set_panelSettings(PanelSettings value)
public UIDocument get_parentUI()
private void set_parentUI(UIDocument value)
public VisualTreeAsset get_visualTreeAsset()
public void set_visualTreeAsset(VisualTreeAsset value)
public VisualElement get_rootVisualElement()
internal int get_firstChildInserIndex()
public float get_sortingOrder()
public void set_sortingOrder(float value)
internal void ApplySortingOrder()
private void Awake()
private void OnEnable()
private void SetupFromHierarchy()
private UIDocument FindUIDocumentParent()
internal void Reset()
private void AddChildAndInsertContentToVisualTree(UIDocument child)
private void RemoveChild(UIDocument child)
private void RecreateUI()
private void SetupRootClassList()
private void AddRootVisualElementToTree()
private void RemoveFromHierarchy()
private void OnDisable()
private void OnTransformChildrenChanged()
private void OnTransformParentChanged()
internal void ReactToHierarchyChanged()
}
internal UnityEngine.UIElements.UIDocumentHierarchicalIndex : ValueType {
internal Int32[] pathToParent
public int CompareTo(UIDocumentHierarchicalIndex other)
public string ToString()
}
internal UnityEngine.UIElements.UIDocumentHierarchicalIndexComparer : object {
public int Compare(UIDocumentHierarchicalIndex x, UIDocumentHierarchicalIndex y)
}
internal UnityEngine.UIElements.UIDocumentHierarchyUtil : object {
internal UIDocumentHierarchicalIndexComparer indexComparer
internal int FindHierarchicalSortedIndex(SortedDictionary`2<UIDocumentHierarchicalIndex, UIDocument> children, UIDocument child)
internal void SetHierarchicalIndex(Transform childTransform, Transform directParentTransform, Transform mainParentTransform, UIDocumentHierarchicalIndex& hierarchicalIndex)
internal void SetGlobalIndex(Transform objectTransform, Transform directParentTransform, UIDocumentHierarchicalIndex& globalIndex)
}
internal UnityEngine.UIElements.UIDocumentList : object {
internal List`1<UIDocument> m_AttachedUIDocuments
internal void RemoveFromListAndFromVisualTree(UIDocument uiDocument)
internal void AddToListAndToVisualTree(UIDocument uiDocument, VisualElement visualTree, int firstInsertIndex)
}
internal UnityEngine.UIElements.UIElementsPackageUtility : object {
internal string EditorResourcesBasePath
internal bool IsUIEPackageLoaded
}
internal UnityEngine.UIElements.UIElementsRuntimeUtility : object {
private Action s_onRepaintOverlayPanels
private Action`1<BaseRuntimePanel> onCreatePanel
private bool s_RegisteredPlayerloopCallback
private List`1<Panel> s_SortedRuntimePanels
private bool s_PanelOrderingDirty
internal string s_RepaintProfilerMarkerName
private ProfilerMarker s_RepaintProfilerMarker
private int currentOverlayIndex
private Object <activeEventSystem>k__BackingField
private DefaultEventSystem s_DefaultEventSystem
private List`1<PanelSettings> s_PotentiallyEmptyPanelSettings
internal Object activeEventSystem
internal bool useDefaultEventSystem
internal DefaultEventSystem defaultEventSystem
private void add_s_onRepaintOverlayPanels(Action value)
private void remove_s_onRepaintOverlayPanels(Action value)
internal void add_onRepaintOverlayPanels(Action value)
internal void remove_onRepaintOverlayPanels(Action value)
public void add_onCreatePanel(Action`1<BaseRuntimePanel> value)
public void remove_onCreatePanel(Action`1<BaseRuntimePanel> value)
public EventBase CreateEvent(Event systemEvent)
public BaseRuntimePanel FindOrCreateRuntimePanel(ScriptableObject ownerObject, CreateRuntimePanelDelegate createDelegate)
public void DisposeRuntimePanel(ScriptableObject ownerObject)
private void RegisterCachedPanelInternal(int instanceID, IPanel panel)
private void RemoveCachedPanelInternal(int instanceID)
public void RepaintOverlayPanels()
public void RepaintOffscreenPanels()
public void RepaintOverlayPanel(BaseRuntimePanel panel)
internal void BeginRenderOverlays(int displayIndex)
internal void RenderOverlaysBeforePriority(int displayIndex, float maxPriority)
internal void EndRenderOverlays(int displayIndex)
internal Object get_activeEventSystem()
private void set_activeEventSystem(Object value)
internal bool get_useDefaultEventSystem()
public void RegisterEventSystem(Object eventSystem)
public void UnregisterEventSystem(Object eventSystem)
internal DefaultEventSystem get_defaultEventSystem()
public void UpdateRuntimePanels()
internal void MarkPotentiallyEmpty(PanelSettings settings)
internal void RemoveUnusedPanels()
public void RegisterPlayerloopCallback()
public void UnregisterPlayerloopCallback()
internal void SetPanelOrderingDirty()
internal List`1<Panel> GetSortedPlayerPanels()
private void SortPanels()
internal Vector2 MultiDisplayBottomLeftToPanelPosition(Vector2 position, Nullable`1& targetDisplay)
internal Vector2 MultiDisplayToLocalScreenPosition(Vector2 position, Nullable`1& targetDisplay)
internal Vector2 ScreenBottomLeftToPanelPosition(Vector2 position, int targetDisplay)
internal Vector2 ScreenBottomLeftToPanelDelta(Vector2 delta)
}
internal UnityEngine.UIElements.UIElementsUtility : object {
private Stack`1<IMGUIContainer> s_ContainerStack
private Dictionary`2<int, Panel> s_UIElementsCache
private Event s_EventInstance
internal Color editorPlayModeTintColor
internal float singleLineHeight
private UIElementsUtility s_Instance
internal List`1<Panel> s_PanelsIterationList
internal string s_RepaintProfilerMarkerName
internal string s_EventProfilerMarkerName
private ProfilerMarker s_RepaintProfilerMarker
private ProfilerMarker s_EventProfilerMarker
internal IMGUIContainer GetCurrentIMGUIContainer()
private bool UnityEngine.UIElements.IUIElementsUtility.MakeCurrentIMGUIContainerDirty()
private bool UnityEngine.UIElements.IUIElementsUtility.TakeCapture()
private bool UnityEngine.UIElements.IUIElementsUtility.ReleaseCapture()
private bool UnityEngine.UIElements.IUIElementsUtility.ProcessEvent(int instanceID, IntPtr nativeEventPtr, Boolean& eventHandled)
private bool UnityEngine.UIElements.IUIElementsUtility.CleanupRoots()
private bool UnityEngine.UIElements.IUIElementsUtility.EndContainerGUIFromException(Exception exception)
private void UnityEngine.UIElements.IUIElementsUtility.UpdateSchedulers()
private void UnityEngine.UIElements.IUIElementsUtility.RequestRepaintForPanels(Action`1<ScriptableObject> repaintCallback)
public void RegisterCachedPanel(int instanceID, Panel panel)
public void RemoveCachedPanel(int instanceID)
public bool TryGetPanel(int instanceID, Panel& panel)
internal void BeginContainerGUI(LayoutCache cache, Event evt, IMGUIContainer container)
internal void EndContainerGUI(Event evt, Rect layoutSize)
internal EventBase CreateEvent(Event systemEvent)
internal EventBase CreateEvent(Event systemEvent, EventType eventType)
private bool DoDispatch(BaseVisualElementPanel panel)
internal void GetAllPanels(List`1<Panel> panels, ContextType contextType)
internal Enumerator<int, Panel> GetPanelsIterator()
internal Panel FindOrCreateEditorPanel(ScriptableObject ownerObject)
internal float PixelsPerUnitScaleForElement(VisualElement ve, Sprite sprite)
}
internal UnityEngine.UIElements.UIEventRegistration : object {
private List`1<IUIElementsUtility> s_Utilities
internal void RegisterUIElementSystem(IUIElementsUtility utility)
private void TakeCapture()
private void ReleaseCapture()
private bool EndContainerGUIFromException(Exception exception)
private bool ProcessEvent(int instanceID, IntPtr nativeEventPtr)
private void CleanupRoots()
internal void MakeCurrentIMGUIContainerDirty()
internal void UpdateSchedulers()
internal void RequestRepaintForPanels(Action`1<ScriptableObject> repaintCallback)
}
internal UnityEngine.UIElements.UIR.Alloc : ValueType {
public UInt32 start
public UInt32 size
internal object handle
internal bool shortLived
}
internal UnityEngine.UIElements.UIR.Allocator2D : object {
private Vector2Int m_MinSize
private Vector2Int m_MaxSize
private Vector2Int m_MaxAllocSize
private int m_RowHeightBias
private Row[] m_Rows
private List`1<Area> m_Areas
public Vector2Int minSize
public Vector2Int maxSize
public Vector2Int maxAllocSize
public Vector2Int get_minSize()
public Vector2Int get_maxSize()
public Vector2Int get_maxAllocSize()
public void .ctor(int minSize, int maxSize, int rowHeightBias)
public void .ctor(Vector2Int minSize, Vector2Int maxSize, int rowHeightBias)
public bool TryAllocate(int width, int height, Alloc2D& alloc2D)
public void Free(Alloc2D alloc2D)
private void BuildAreas(List`1<Area> areas, Vector2Int minSize, Vector2Int maxSize)
private Vector2Int ComputeMaxAllocSize(List`1<Area> areas, int rowHeightBias)
private Row[] BuildRowArray(int maxRowHeight, int rowHeightBias)
}
internal UnityEngine.UIElements.UIR.BaseShaderInfoStorage : object {
protected int s_TextureCounter
internal ProfilerMarker s_MarkerCopyTexture
internal ProfilerMarker s_MarkerGetTextureData
internal ProfilerMarker s_MarkerUpdateTexture
private bool <disposed>k__BackingField
public Texture2D texture
protected bool disposed
public Texture2D get_texture()
public bool AllocateRect(int width, int height, RectInt& uvs)
public void SetTexel(int x, int y, Color color)
public void UpdateTexture()
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
}
internal UnityEngine.UIElements.UIR.BasicNode`1 : LinkedPoolItem`1<BasicNode`1<T>> {
public BasicNode`1<T> next
public T data
public void AppendTo(BasicNode`1& first)
}
internal UnityEngine.UIElements.UIR.BasicNodePool`1 : LinkedPool`1<BasicNode`1<T>> {
private void Reset(BasicNode`1<T> node)
private BasicNode`1<T> Create()
}
internal UnityEngine.UIElements.UIR.BestFitAllocator : object {
private UInt32 <totalSize>k__BackingField
private Block m_FirstBlock
private Block m_FirstAvailableBlock
private BlockPool m_BlockPool
private UInt32 m_HighWatermark
public UInt32 totalSize
public UInt32 highWatermark
public void .ctor(UInt32 size)
public UInt32 get_totalSize()
public UInt32 get_highWatermark()
public Alloc Allocate(UInt32 size)
public void Free(Alloc alloc)
private Block CoalesceBlockWithPrevious(Block block)
internal HeapStatistics GatherStatistics()
private Block BestFitFindAvailableBlock(UInt32 size)
private void SplitBlock(Block block, UInt32 size)
}
internal UnityEngine.UIElements.UIR.BitmapAllocator32 : ValueType {
public int kPageWidth
private int m_PageHeight
private List`1<Page> m_Pages
private List`1<UInt32> m_AllocMap
private int m_EntryWidth
private int m_EntryHeight
public int entryWidth
public int entryHeight
public void Construct(int pageHeight, int entryWidth, int entryHeight)
public void ForceFirstAlloc(ushort firstPageX, ushort firstPageY)
public BMPAlloc Allocate(BaseShaderInfoStorage storage)
public void Free(BMPAlloc alloc)
public int get_entryWidth()
public int get_entryHeight()
internal void GetAllocPageAtlasLocation(int page, UInt16& x, UInt16& y)
private byte CountTrailingZeroes(UInt32 val)
}
internal UnityEngine.UIElements.UIR.BMPAlloc : ValueType {
public BMPAlloc Invalid
public int page
public ushort pageLine
public byte bitIndex
public OwnedState ownedState
public bool Equals(BMPAlloc other)
public bool IsValid()
public string ToString()
}
internal UnityEngine.UIElements.UIR.ChainBuilderStats : ValueType {
public UInt32 elementsAdded
public UInt32 elementsRemoved
public UInt32 recursiveClipUpdates
public UInt32 recursiveClipUpdatesExpanded
public UInt32 nonRecursiveClipUpdates
public UInt32 recursiveTransformUpdates
public UInt32 recursiveTransformUpdatesExpanded
public UInt32 recursiveOpacityUpdates
public UInt32 recursiveOpacityUpdatesExpanded
public UInt32 colorUpdates
public UInt32 colorUpdatesExpanded
public UInt32 recursiveVisualUpdates
public UInt32 recursiveVisualUpdatesExpanded
public UInt32 nonRecursiveVisualUpdates
public UInt32 dirtyProcessed
public UInt32 nudgeTransformed
public UInt32 boneTransformed
public UInt32 skipTransformed
public UInt32 visualUpdateTransformed
public UInt32 updatedMeshAllocations
public UInt32 newMeshAllocations
public UInt32 groupTransformElementsChanged
public UInt32 immedateRenderersActive
public UInt32 textUpdates
}
internal UnityEngine.UIElements.UIR.CommandType : Enum {
public int value__
public CommandType Draw
public CommandType ImmediateCull
public CommandType Immediate
public CommandType PushView
public CommandType PopView
public CommandType PushScissor
public CommandType PopScissor
public CommandType PushRenderTexture
public CommandType PopRenderTexture
public CommandType BlitToPreviousRT
public CommandType PushDefaultMaterial
public CommandType PopDefaultMaterial
}
internal UnityEngine.UIElements.UIR.DrawParams : object {
internal Rect k_UnlimitedRect
internal Rect k_FullNormalizedRect
internal Stack`1<Matrix4x4> view
internal Stack`1<Rect> scissor
internal List`1<RenderTexture> renderTexture
internal List`1<Material> defaultMaterial
public void Reset()
}
internal UnityEngine.UIElements.UIR.GPUBufferAllocator : object {
private BestFitAllocator m_Low
private BestFitAllocator m_High
public bool isEmpty
public void .ctor(UInt32 maxSize)
public Alloc Allocate(UInt32 size, bool shortLived)
public void Free(Alloc alloc)
public bool get_isEmpty()
public HeapStatistics GatherStatistics()
private bool HighLowCollide()
}
internal UnityEngine.UIElements.UIR.GradientRemap : LinkedPoolItem`1<GradientRemap> {
public int origIndex
public int destIndex
public RectInt location
public GradientRemap next
public TextureId atlas
public void Reset()
}
internal UnityEngine.UIElements.UIR.GradientSettingsAtlas : object {
private ProfilerMarker s_MarkerWrite
private ProfilerMarker s_MarkerCommit
private int m_Length
private int m_ElemWidth
private BestFitAllocator m_Allocator
private Texture2D m_Atlas
private RawTexture m_RawAtlas
private int s_TextureCounter
private bool <disposed>k__BackingField
private bool <MustCommit>k__BackingField
internal int length
protected bool disposed
public Texture2D atlas
public bool MustCommit
internal int get_length()
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public void .ctor(int length)
public void Reset()
public Texture2D get_atlas()
public Alloc Add(int count)
public void Remove(Alloc alloc)
public void Write(Alloc alloc, GradientSettings[] settings, GradientRemap remap)
public bool get_MustCommit()
private void set_MustCommit(bool value)
public void Commit()
private void PrepareAtlas()
}
internal UnityEngine.UIElements.UIR.HeapStatistics : ValueType {
public UInt32 numAllocs
public UInt32 totalSize
public UInt32 allocatedSize
public UInt32 freeSize
public UInt32 largestAvailableBlock
public UInt32 availableBlocksCount
public UInt32 blockCount
public UInt32 highWatermark
public float fragmentation
public HeapStatistics[] subAllocators
}
internal UnityEngine.UIElements.UIR.Implementation.ClipMethod : Enum {
public int value__
public ClipMethod Undetermined
public ClipMethod NotClipped
public ClipMethod Scissor
public ClipMethod ShaderDiscard
public ClipMethod Stencil
}
internal UnityEngine.UIElements.UIR.Implementation.CommandGenerator : object {
private ProfilerMarker k_ConvertEntriesToCommandsMarker
private ProfilerMarker k_NudgeVerticesMarker
private ProfilerMarker k_ComputeTransformMatrixMarker
private Material s_blitMaterial_LinearToGamma
private Material s_blitMaterial_GammaToLinear
private Material s_blitMaterial_NoChange
private Shader s_blitShader
private void GetVerticesTransformInfo(VisualElement ve, Matrix4x4& transform)
internal void ComputeTransformMatrix(VisualElement ve, VisualElement ancestor, Matrix4x4& result)
private bool IsParentOrAncestorOf(VisualElement ve, VisualElement child)
public ClosingInfo PaintElement(RenderChain renderChain, VisualElement ve, ChainBuilderStats& stats)
private Material CreateBlitShader(float colorConversion)
private Material GetBlitMaterial(RenderTargetMode mode)
public void ClosePaintElement(VisualElement ve, ClosingInfo closingInfo, RenderChain renderChain, ChainBuilderStats& stats)
private void UpdateOrAllocate(MeshHandle& data, int vertexCount, int indexCount, UIRenderDevice device, NativeSlice`1& verts, NativeSlice`1& indices, UInt16& indexOffset, ChainBuilderStats& stats)
private void CopyTransformVertsPos(NativeSlice`1<Vertex> source, NativeSlice`1<Vertex> target, Matrix4x4 mat, Color32 xformClipPages, Color32 ids, Color32 addFlags, Color32 opacityPage, Color32 textCoreSettingsPage, bool isText, float textureId)
private void CopyTransformVertsPosAndVec(NativeSlice`1<Vertex> source, NativeSlice`1<Vertex> target, Matrix4x4 mat, Color32 xformClipPages, Color32 ids, Color32 addFlags, Color32 opacityPage, Color32 textCoreSettingsPage, bool isText, float textureId)
private void CopyTriangleIndicesFlipWindingOrder(NativeSlice`1<ushort> source, NativeSlice`1<ushort> target)
private void CopyTriangleIndicesFlipWindingOrder(NativeSlice`1<ushort> source, NativeSlice`1<ushort> target, int indexOffset)
private void CopyTriangleIndices(NativeSlice`1<ushort> source, NativeSlice`1<ushort> target, int indexOffset)
public bool NudgeVerticesToNewSpace(VisualElement ve, UIRenderDevice device)
private void DoNudgeVertices(VisualElement ve, UIRenderDevice device, MeshHandle mesh, Matrix4x4& nudgeTransform)
private RenderChainCommand InjectMeshDrawCommand(RenderChain renderChain, VisualElement ve, RenderChainCommand& cmdPrev, RenderChainCommand& cmdNext, MeshHandle mesh, int indexCount, int indexOffset, Material material, TextureId texture, Texture font, int stencilRef)
private RenderChainCommand InjectClosingMeshDrawCommand(RenderChain renderChain, VisualElement ve, RenderChainCommand& cmdPrev, RenderChainCommand& cmdNext, MeshHandle mesh, int indexCount, int indexOffset, Material material, TextureId texture, Texture font, int stencilRef)
private void FindCommandInsertionPoint(VisualElement ve, RenderChainCommand& prev, RenderChainCommand& next)
private void FindClosingCommandInsertionPoint(VisualElement ve, RenderChainCommand& prev, RenderChainCommand& next)
private void InjectCommandInBetween(RenderChain renderChain, RenderChainCommand cmd, RenderChainCommand& prev, RenderChainCommand& next)
private void InjectClosingCommandInBetween(RenderChain renderChain, RenderChainCommand cmd, RenderChainCommand& prev, RenderChainCommand& next)
public void ResetCommands(RenderChain renderChain, VisualElement ve)
}
internal UnityEngine.UIElements.UIR.Implementation.RenderEvents : object {
private float VisibilityTreshold
internal void ProcessOnClippingChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats)
internal void ProcessOnOpacityChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats)
internal void ProcessOnColorChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats)
internal void ProcessOnTransformOrSizeChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats)
internal void ProcessOnVisualsChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats)
internal void ProcessRegenText(RenderChain renderChain, VisualElement ve, UIRTextUpdatePainter painter, UIRenderDevice device, ChainBuilderStats& stats)
private Matrix4x4 GetTransformIDTransformInfo(VisualElement ve)
private Vector4 GetClipRectIDClipInfo(VisualElement ve)
internal UInt32 DepthFirstOnChildAdded(RenderChain renderChain, VisualElement parent, VisualElement ve, int index, bool resetState)
internal UInt32 DepthFirstOnChildRemoving(RenderChain renderChain, VisualElement ve)
private void DepthFirstOnClippingChanged(RenderChain renderChain, VisualElement parent, VisualElement ve, UInt32 dirtyID, bool hierarchical, bool isRootOfChange, bool isPendingHierarchicalRepaint, bool inheritedClipRectIDChanged, bool inheritedMaskingChanged, UIRenderDevice device, ChainBuilderStats& stats)
private void DepthFirstOnOpacityChanged(RenderChain renderChain, float parentCompositeOpacity, VisualElement ve, UInt32 dirtyID, bool hierarchical, ChainBuilderStats& stats, bool isDoingFullVertexRegeneration)
private void OnColorChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, ChainBuilderStats& stats)
private void DepthFirstOnTransformOrSizeChanged(RenderChain renderChain, VisualElement parent, VisualElement ve, UInt32 dirtyID, UIRenderDevice device, bool isAncestorOfChangeSkinned, bool transformChanged, ChainBuilderStats& stats)
private void DepthFirstOnVisualsChanged(RenderChain renderChain, VisualElement ve, UInt32 dirtyID, bool parentHierarchyHidden, bool hierarchical, ChainBuilderStats& stats)
private bool UpdateTextCoreSettings(RenderChain renderChain, VisualElement ve)
private bool IsElementHierarchyHidden(VisualElement ve)
private VisualElement GetLastDeepestChild(VisualElement ve)
private VisualElement GetNextDepthFirst(VisualElement ve)
private ClipMethod DetermineSelfClipMethod(RenderChain renderChain, VisualElement ve)
private bool UpdateLocalFlipsWinding(VisualElement ve)
private void UpdateWorldFlipsWinding(VisualElement ve)
private void UpdateZeroScaling(VisualElement ve)
private bool NeedsTransformID(VisualElement ve)
private bool TransformIDHasChanged(Alloc before, Alloc after)
internal bool NeedsColorID(VisualElement ve)
private bool InitColorIDs(RenderChain renderChain, VisualElement ve)
private void ResetColorIDs(VisualElement ve)
private void SetColorValues(RenderChain renderChain, VisualElement ve)
}
internal UnityEngine.UIElements.UIR.Implementation.UIRStylePainter : object {
private RenderChain m_Owner
private List`1<Entry> m_Entries
private AtlasBase m_Atlas
private VectorImageManager m_VectorImageManager
private Entry m_CurrentEntry
private ClosingInfo m_ClosingInfo
private int m_MaskDepth
private int m_StencilRef
private BMPAlloc m_ClipRectID
private int m_SVGBackgroundEntryIndex
private TempDataAlloc`1<Vertex> m_VertsPool
private TempDataAlloc`1<ushort> m_IndicesPool
private List`1<MeshWriteData> m_MeshWriteDataPool
private int m_NextMeshWriteDataPoolItem
private Allocator m_AllocRawVertsIndicesDelegate
private Allocator m_AllocThroughDrawMeshDelegate
private Allocator m_AllocThroughDrawGradientsDelegate
private MeshGenerationContext <meshGenerationContext>k__BackingField
private VisualElement <currentElement>k__BackingField
private int <totalVertices>k__BackingField
private int <totalIndices>k__BackingField
private bool <disposed>k__BackingField
public MeshGenerationContext meshGenerationContext
public VisualElement currentElement
public List`1<Entry> entries
public ClosingInfo closingInfo
public int totalVertices
public int totalIndices
protected bool disposed
public VisualElement visualElement
private MeshWriteData GetPooledMeshWriteData()
private MeshWriteData AllocRawVertsIndices(UInt32 vertexCount, UInt32 indexCount, AllocMeshData& allocatorData)
private MeshWriteData AllocThroughDrawMesh(UInt32 vertexCount, UInt32 indexCount, AllocMeshData& allocatorData)
private MeshWriteData AllocThroughDrawGradients(UInt32 vertexCount, UInt32 indexCount, AllocMeshData& allocatorData)
public void .ctor(RenderChain renderChain)
public MeshGenerationContext get_meshGenerationContext()
public VisualElement get_currentElement()
private void set_currentElement(VisualElement value)
public List`1<Entry> get_entries()
public ClosingInfo get_closingInfo()
public int get_totalVertices()
private void set_totalVertices(int value)
public int get_totalIndices()
private void set_totalIndices(int value)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public void Begin(VisualElement ve)
public void LandClipUnregisterMeshDrawCommand(RenderChainCommand cmd)
public void LandClipRegisterMesh(NativeSlice`1<Vertex> vertices, NativeSlice`1<ushort> indices, int indexOffset)
public MeshWriteData AddGradientsEntry(int vertexCount, int indexCount, TextureId texture, Material material, MeshFlags flags)
public MeshWriteData DrawMesh(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags)
public void DrawText(TextParams textParams, ITextHandle handle, float pixelsPerPoint)
internal void DrawTextNative(TextParams textParams, ITextHandle handle, float pixelsPerPoint)
internal void DrawTextCore(TextParams textParams, ITextHandle handle, float pixelsPerPoint)
public void DrawRectangle(RectangleParams rectParams)
public void DrawBorder(BorderParams borderParams)
public void DrawImmediate(Action callback, bool cullingEnabled)
public VisualElement get_visualElement()
public void DrawVisualElementBackground()
public void DrawVisualElementBorder()
public void ApplyVisualElementClipping()
private UInt16[] AdjustSpriteWinding(Vector2[] vertices, UInt16[] indices)
public void DrawSprite(RectangleParams rectParams)
public void DrawVectorImage(RectangleParams rectParams)
internal void Reset()
private void ValidateMeshWriteData()
private void GenerateStencilClipEntryForRoundedRectBackground()
private void GenerateStencilClipEntryForSVGBackground()
}
internal UnityEngine.UIElements.UIR.Implementation.UIRTextUpdatePainter : object {
private VisualElement m_CurrentElement
private int m_TextEntryIndex
private NativeArray`1<Vertex> m_DudVerts
private NativeArray`1<ushort> m_DudIndices
private NativeSlice`1<Vertex> m_MeshDataVerts
private Color32 m_XFormClipPages
private Color32 m_IDs
private Color32 m_Flags
private Color32 m_OpacityColorPages
private MeshGenerationContext <meshGenerationContext>k__BackingField
public MeshGenerationContext meshGenerationContext
public VisualElement visualElement
public MeshGenerationContext get_meshGenerationContext()
public void Begin(VisualElement ve, UIRenderDevice device)
public void End()
public void Dispose()
public void DrawRectangle(RectangleParams rectParams)
public void DrawBorder(BorderParams borderParams)
public void DrawImmediate(Action callback, bool cullingEnabled)
public VisualElement get_visualElement()
public MeshWriteData DrawMesh(int vertexCount, int indexCount, Texture texture, Material material, MeshFlags flags)
public void DrawText(TextParams textParams, ITextHandle handle, float pixelsPerPoint)
}
internal UnityEngine.UIElements.UIR.LinkedPool`1 : object {
private Func`1<T> m_CreateFunc
private Action`1<T> m_ResetAction
private int m_Limit
private T m_PoolFirst
private int <Count>k__BackingField
public int Count
public void .ctor(Func`1<T> createFunc, Action`1<T> resetAction, int limit)
public int get_Count()
private void set_Count(int value)
public void Clear()
public T Get()
public void Return(T item)
}
internal UnityEngine.UIElements.UIR.LinkedPoolItem`1 : object {
internal T poolNext
}
internal UnityEngine.UIElements.UIR.MeshBuilder : object {
private ProfilerMarker s_VectorGraphics9Slice
private ProfilerMarker s_VectorGraphicsSplitTriangle
private ProfilerMarker s_VectorGraphicsScaleTriangle
private ProfilerMarker s_VectorGraphicsStretch
internal int s_MaxTextMeshVertices
private UInt16[] slicedQuadIndices
private Single[] k_TexCoordSlicesX
private Single[] k_TexCoordSlicesY
private Single[] k_PositionSlicesX
private Single[] k_PositionSlicesY
private VertexClipEdge[] s_AllClipEdges
internal void MakeBorder(BorderParams borderParams, float posZ, AllocMeshData meshAlloc)
internal void MakeSolidRect(RectangleParams rectParams, float posZ, AllocMeshData meshAlloc)
internal void MakeTexturedRect(RectangleParams rectParams, float posZ, AllocMeshData meshAlloc, ColorPage colorPage)
private Vertex ConvertTextVertexToUIRVertex(MeshInfo info, int index, Vector2 offset, VertexFlags flags, bool isDynamicColor)
private Vertex ConvertTextVertexToUIRVertex(TextVertex textVertex, Vector2 offset)
private int LimitTextVertices(int vertexCount, bool logTruncation)
internal void MakeText(MeshInfo meshInfo, Vector2 offset, AllocMeshData meshAlloc, VertexFlags flags, bool isDynamicColor)
internal void MakeText(NativeArray`1<TextVertex> uiVertices, Vector2 offset, AllocMeshData meshAlloc)
internal void UpdateText(NativeArray`1<TextVertex> uiVertices, Vector2 offset, Matrix4x4 transform, Color32 xformClipPages, Color32 ids, Color32 flags, Color32 opacityPageSettingIndex, NativeSlice`1<Vertex> vertices)
private void MakeQuad(Rect rcPosition, Rect rcTexCoord, Color color, float posZ, AllocMeshData meshAlloc, ColorPage colorPage)
internal void MakeSlicedQuad(RectangleParams& rectParams, float posZ, AllocMeshData meshAlloc)
internal void MakeVectorGraphics(RectangleParams rectParams, int settingIndexOffset, AllocMeshData meshAlloc, Int32& finalVertexCount, Int32& finalIndexCount)
internal void MakeVectorGraphicsStretchBackground(Vertex[] svgVertices, UInt16[] svgIndices, float svgWidth, float svgHeight, Rect targetRect, Rect sourceUV, ScaleMode scaleMode, Color tint, int settingIndexOffset, AllocMeshData meshAlloc, Int32& finalVertexCount, Int32& finalIndexCount)
private void SplitTriangle(Vertex* vertices, UInt16* indices, Int32& vertexCount, int indexToProcess, Int32& indexCount, float svgWidth, float svgHeight, Vector4 sliceLTRB, int sliceIndex)
private void ScaleSplittedTriangles(Vertex* vertices, int vertexCount, float svgWidth, float svgHeight, Rect targetRect, Vector4 sliceLTRB)
internal void MakeVectorGraphics9SliceBackground(Vertex[] svgVertices, UInt16[] svgIndices, float svgWidth, float svgHeight, Rect targetRect, Vector4 sliceLTRB, bool stretch, Color tint, int settingIndexOffset, AllocMeshData meshAlloc)
private ClipCounts UpperBoundApproximateRectClippingResults(Vertex[] vertices, UInt16[] indices, Vector4 clipRectMinMax)
private void RectClip(Vertex[] vertices, UInt16[] indices, Vector4 clipRectMinMax, MeshWriteData mwd, ClipCounts cc, Int32& newVertexCount)
private void RectClipTriangle(Vertex* vt, UInt16* it, Vector4 clipRectMinMax, MeshWriteData mwd, UInt16& nextNewVertex)
private Vector3 GetVertexBaryCentricCoordinates(Vertex* vt, float x, float y)
private Vertex InterpolateVertexInTriangle(Vertex* vt, float x, float y, Vector3 uvw)
private Vertex InterpolateVertexInTriangleEdge(Vertex* vt, int e0, int e1, float t)
private float IntersectSegments(float ax, float ay, float bx, float by, float cx, float cy, float dx, float dy)
}
internal UnityEngine.UIElements.UIR.MeshHandle : LinkedPoolItem`1<MeshHandle> {
internal Alloc allocVerts
internal Alloc allocIndices
internal UInt32 triangleCount
internal Page allocPage
internal UInt32 allocTime
internal UInt32 updateAllocID
}
internal UnityEngine.UIElements.UIR.OwnedState : Enum {
public byte value__
public OwnedState Inherited
public OwnedState Owned
}
internal UnityEngine.UIElements.UIR.Page : object {
private bool <disposed>k__BackingField
public DataSet`1<Vertex> vertices
public DataSet`1<ushort> indices
public Page next
public int framesEmpty
protected bool disposed
public bool isEmpty
public void .ctor(UInt32 vertexMaxCount, UInt32 indexMaxCount, UInt32 maxQueuedFrameCount, bool mockPage)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public bool get_isEmpty()
}
internal UnityEngine.UIElements.UIR.RenderChain : object {
private RenderChainCommand m_FirstCommand
private DepthOrderedDirtyTracking m_DirtyTracker
private LinkedPool`1<RenderChainCommand> m_CommandPool
private BasicNodePool`1<TextureEntry> m_TexturePool
private List`1<RenderNodeData> m_RenderNodesData
private Shader m_DefaultShader
private Shader m_DefaultWorldSpaceShader
private Material m_DefaultMat
private Material m_DefaultWorldSpaceMat
private bool m_BlockDirtyRegistration
private int m_StaticIndex
private int m_ActiveRenderNodes
private int m_CustomMaterialCommands
private ChainBuilderStats m_Stats
private UInt32 m_StatsElementsAdded
private UInt32 m_StatsElementsRemoved
private VisualElement m_FirstTextElement
private UIRTextUpdatePainter m_TextUpdatePainter
private int m_TextElementCount
private int m_DirtyTextStartIndex
private int m_DirtyTextRemaining
private bool m_FontWasReset
private Dictionary`2<VisualElement, Vector2> m_LastGroupTransformElementScale
private TextureRegistry m_TextureRegistry
private ProfilerMarker s_MarkerProcess
private ProfilerMarker s_MarkerClipProcessing
private ProfilerMarker s_MarkerOpacityProcessing
private ProfilerMarker s_MarkerColorsProcessing
private ProfilerMarker s_MarkerTransformProcessing
private ProfilerMarker s_MarkerVisualsProcessing
private ProfilerMarker s_MarkerTextRegen
private bool <disposed>k__BackingField
internal Action OnPreRender
private BaseVisualElementPanel <panel>k__BackingField
private UIRenderDevice <device>k__BackingField
private AtlasBase <atlas>k__BackingField
private VectorImageManager <vectorImageManager>k__BackingField
internal UIRVEShaderInfoAllocator shaderInfoAllocator
private UIRStylePainter <painter>k__BackingField
private bool <drawStats>k__BackingField
private bool <drawInCameras>k__BackingField
internal RenderChainCommand firstCommand
protected bool disposed
internal ChainBuilderStats stats
internal BaseVisualElementPanel panel
internal UIRenderDevice device
internal AtlasBase atlas
internal VectorImageManager vectorImageManager
internal UIRStylePainter painter
internal bool drawStats
internal bool drawInCameras
internal Shader defaultShader
internal Shader defaultWorldSpaceShader
internal RenderChainCommand get_firstCommand()
public void .ctor(BaseVisualElementPanel panel)
protected void .ctor(BaseVisualElementPanel panel, UIRenderDevice device, AtlasBase atlas, VectorImageManager vectorImageManager)
private void Constructor(BaseVisualElementPanel panelObj, UIRenderDevice deviceObj, AtlasBase atlas, VectorImageManager vectorImageMan)
private void Destructor()
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
internal ChainBuilderStats get_stats()
public void ProcessChanges()
public void Render()
private void ProcessTextRegen(bool timeSliced)
public void UIEOnChildAdded(VisualElement ve)
public void UIEOnChildrenReordered(VisualElement ve)
public void UIEOnChildRemoving(VisualElement ve)
public void StopTrackingGroupTransformElement(VisualElement ve)
public void UIEOnRenderHintsChanged(VisualElement ve)
public void UIEOnClippingChanged(VisualElement ve, bool hierarchical)
public void UIEOnOpacityChanged(VisualElement ve, bool hierarchical)
public void UIEOnColorChanged(VisualElement ve)
public void UIEOnTransformOrSizeChanged(VisualElement ve, bool transformChanged, bool clipRectSizeChanged)
public void UIEOnVisualsChanged(VisualElement ve, bool hierarchical)
internal BaseVisualElementPanel get_panel()
private void set_panel(BaseVisualElementPanel value)
internal UIRenderDevice get_device()
private void set_device(UIRenderDevice value)
internal AtlasBase get_atlas()
private void set_atlas(AtlasBase value)
internal VectorImageManager get_vectorImageManager()
private void set_vectorImageManager(VectorImageManager value)
internal UIRStylePainter get_painter()
private void set_painter(UIRStylePainter value)
internal bool get_drawStats()
internal void set_drawStats(bool value)
internal bool get_drawInCameras()
private void set_drawInCameras(bool value)
internal Shader get_defaultShader()
internal void set_defaultShader(Shader value)
internal Shader get_defaultWorldSpaceShader()
internal void set_defaultWorldSpaceShader(Shader value)
internal Material GetStandardMaterial()
internal Material GetStandardWorldSpaceMaterial()
internal void EnsureFitsDepth(int depth)
internal void ChildWillBeRemoved(VisualElement ve)
internal RenderChainCommand AllocCommand()
internal void FreeCommand(RenderChainCommand cmd)
internal void OnRenderCommandAdded(RenderChainCommand command)
internal void OnRenderCommandsRemoved(RenderChainCommand firstCommand, RenderChainCommand lastCommand)
internal void AddTextElement(VisualElement ve)
internal void RemoveTextElement(VisualElement ve)
internal void OnGroupTransformElementChangedTransform(VisualElement ve)
private RenderNodeData AccessRenderNodeData(IntPtr obj)
private void OnRenderNodeExecute(IntPtr obj)
private void OnRegisterIntermediateRenderers(Camera camera)
private void OnRegisterIntermediateRendererMat(BaseRuntimePanel rtp, RenderChain renderChain, RenderNodeData& rnd, Camera camera, int sameDistanceSortPriority)
internal void RepaintTexturedElements()
private void OnFontReset(Font font)
public void AppendTexture(VisualElement ve, Texture src, TextureId id, bool isAtlas)
public void ResetTextures(VisualElement ve)
private void DrawStats()
private VisualElement GetFirstElementInPanel(VisualElement ve)
}
internal UnityEngine.UIElements.UIR.RenderChainCommand : LinkedPoolItem`1<RenderChainCommand> {
internal VisualElement owner
internal RenderChainCommand prev
internal RenderChainCommand next
internal bool closing
internal CommandType type
internal State state
internal MeshHandle mesh
internal int indexOffset
internal int indexCount
internal Action callback
private int k_ID_MainTex
private ProfilerMarker s_ImmediateOverheadMarker
internal void Reset()
internal void ExecuteNonDrawMesh(DrawParams drawParams, float pixelsPerPoint, Exception& immediateException)
private void Blit(Texture source, RenderTexture destination, float depth)
private Vector4 RectToClipSpace(Rect rc)
private Rect CombineScissorRects(Rect r0, Rect r1)
private RectInt RectPointsToPixelsAndFlipYAxis(Rect rect, float pixelsPerPoint)
}
internal UnityEngine.UIElements.UIR.RenderChainTextEntry : ValueType {
internal RenderChainCommand command
internal int firstVertex
internal int vertexCount
}
internal UnityEngine.UIElements.UIR.RenderChainVEData : ValueType {
internal VisualElement prev
internal VisualElement next
internal VisualElement groupTransformAncestor
internal VisualElement boneTransformAncestor
internal VisualElement prevDirty
internal VisualElement nextDirty
internal int hierarchyDepth
internal RenderDataDirtyTypes dirtiedValues
internal UInt32 dirtyID
internal RenderChainCommand firstCommand
internal RenderChainCommand lastCommand
internal RenderChainCommand firstClosingCommand
internal RenderChainCommand lastClosingCommand
internal bool isInChain
internal bool isHierarchyHidden
internal bool localFlipsWinding
internal bool localTransformScaleZero
internal bool worldFlipsWinding
internal ClipMethod clipMethod
internal int childrenStencilRef
internal int childrenMaskDepth
internal bool disableNudging
internal bool usesLegacyText
internal MeshHandle data
internal MeshHandle closingData
internal Matrix4x4 verticesSpace
internal int displacementUVStart
internal int displacementUVEnd
internal BMPAlloc transformID
internal BMPAlloc clipRectID
internal BMPAlloc opacityID
internal BMPAlloc textCoreSettingsID
internal BMPAlloc backgroundColorID
internal BMPAlloc borderLeftColorID
internal BMPAlloc borderTopColorID
internal BMPAlloc borderRightColorID
internal BMPAlloc borderBottomColorID
internal BMPAlloc tintColorID
internal float compositeOpacity
internal Color backgroundColor
internal VisualElement prevText
internal VisualElement nextText
internal List`1<RenderChainTextEntry> textEntries
internal BasicNode`1<TextureEntry> textures
internal RenderChainCommand lastClosingOrLastCommand
internal RenderChainCommand get_lastClosingOrLastCommand()
internal bool AllocatesID(BMPAlloc alloc)
internal bool InheritsID(BMPAlloc alloc)
}
internal UnityEngine.UIElements.UIR.RenderDataDirtyTypeClasses : Enum {
public int value__
public RenderDataDirtyTypeClasses Clipping
public RenderDataDirtyTypeClasses Opacity
public RenderDataDirtyTypeClasses Color
public RenderDataDirtyTypeClasses TransformSize
public RenderDataDirtyTypeClasses Visuals
public RenderDataDirtyTypeClasses Count
}
internal UnityEngine.UIElements.UIR.RenderDataDirtyTypes : Enum {
public int value__
public RenderDataDirtyTypes None
public RenderDataDirtyTypes Transform
public RenderDataDirtyTypes ClipRectSize
public RenderDataDirtyTypes Clipping
public RenderDataDirtyTypes ClippingHierarchy
public RenderDataDirtyTypes Visuals
public RenderDataDirtyTypes VisualsHierarchy
public RenderDataDirtyTypes Opacity
public RenderDataDirtyTypes OpacityHierarchy
public RenderDataDirtyTypes Color
}
internal UnityEngine.UIElements.UIR.ShaderInfoStorage`1 : BaseShaderInfoStorage {
private int m_InitialSize
private int m_MaxSize
private TextureFormat m_Format
private Func`2<Color, T> m_Convert
private UIRAtlasAllocator m_Allocator
private Texture2D m_Texture
private NativeArray`1<T> m_Texels
public Texture2D texture
public void .ctor(TextureFormat format, Func`2<Color, T> convert, int initialSize, int maxSize)
protected void Dispose(bool disposing)
public Texture2D get_texture()
public bool AllocateRect(int width, int height, RectInt& uvs)
public void SetTexel(int x, int y, Color color)
public void UpdateTexture()
private void CreateOrExpandTexture()
private void CpuBlit(NativeArray`1<T> src, int srcWidth, int srcHeight, NativeArray`1<T> dst, int dstWidth, int dstHeight)
}
internal UnityEngine.UIElements.UIR.ShaderInfoStorageRGBA32 : ShaderInfoStorage`1<Color32> {
private Func`2<Color, Color32> s_Convert
public void .ctor(int initialSize, int maxSize)
}
internal UnityEngine.UIElements.UIR.ShaderInfoStorageRGBAFloat : ShaderInfoStorage`1<Color> {
private Func`2<Color, Color> s_Convert
public void .ctor(int initialSize, int maxSize)
}
internal UnityEngine.UIElements.UIR.Shaders : object {
public string k_AtlasBlit
public string k_Editor
public string k_Runtime
public string k_RuntimeWorld
public string k_GraphView
}
internal UnityEngine.UIElements.UIR.State : ValueType {
public Material material
public Texture font
public float fontTexSDFScale
public TextureId texture
public int stencilRef
}
internal UnityEngine.UIElements.UIR.Tessellation : object {
internal float kEpsilon
internal float kUnusedArc
internal ushort kSubdivisions
private ProfilerMarker s_MarkerTessellateRect
private ProfilerMarker s_MarkerTessellateBorder
internal int kMaxEdgeBit
private Edges[] s_AllEdges
public void TessellateRect(RectangleParams rectParams, float posZ, AllocMeshData meshAlloc, bool computeUVs)
public void TessellateQuad(RectangleParams rectParams, float posZ, AllocMeshData meshAlloc)
public void TessellateBorder(BorderParams borderParams, float posZ, AllocMeshData meshAlloc)
private void TessellateRoundedCorners(RectangleParams& rectParams, float posZ, MeshWriteData mesh, ColorPage colorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateRoundedBorders(BorderParams& border, float posZ, MeshWriteData mesh, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateRoundedCorner(Rect rect, Color32 color, float posZ, Vector2 radius, MeshWriteData mesh, ColorPage colorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateRoundedBorder(Rect rect, Color32 leftColor, Color32 topColor, float posZ, Vector2 radius, float leftWidth, float topWidth, MeshWriteData mesh, ColorPage leftColorPage, ColorPage topColorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private Vector2 IntersectLines(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3)
private int LooseCompare(float a, float b)
private void TessellateComplexBorderCorner(Rect rect, Vector2 radius, float leftWidth, float topWidth, Color32 leftColor, Color32 topColor, float posZ, MeshWriteData mesh, ColorPage leftColorPage, ColorPage topColorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateQuad(Rect rect, Color32 color, float posZ, MeshWriteData mesh, ColorPage colorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateQuad(Rect rect, Edges smoothedEdges, Color32 color, float posZ, MeshWriteData mesh, ColorPage colorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private int EdgesCount(Edges edges)
private void TessellateQuad(Rect rect, Edges smoothedEdges, Vector2* offsets, Color32 color, float posZ, MeshWriteData mesh, ColorPage colorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void EncodeStraightArc(Vertex& v0, Vertex& v1, Vertex& center, float radius)
private void ExpandTriangle(Vector3& v0, Vector3& v1, Vector3 center, float factor)
private void TessellateQuadSingleEdge(Rect rect, Edges smoothedEdge, Color32 color, float posZ, MeshWriteData mesh, ColorPage colorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateStraightBorder(Rect rect, Edges smoothedEdge, float miterOffset, Color color, float posZ, MeshWriteData mesh, ColorPage colorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private Vector4 GetInterpolatedCircle(Vector2 p, Vertex& v0, Vertex& v1, Vertex& v2)
private void ComputeBarycentricCoordinates(Vector2 p, Vector2 a, Vector2 b, Vector2 c, Single& u, Single& v, Single& w)
private void TessellateFilledFan(Vector2 center, Vector2 radius, Vector2 miterOffset, float leftWidth, float topWidth, Color32 leftColor, Color32 topColor, float posZ, MeshWriteData mesh, ColorPage leftColorPage, ColorPage topColorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void TessellateBorderedFan(Vector2 center, Vector2 outerRadius, float leftWidth, float topWidth, Color32 leftColor, Color32 topColor, float posZ, MeshWriteData mesh, ColorPage leftColorPage, ColorPage topColorPage, UInt16& vertexCount, UInt16& indexCount, bool countOnly)
private void MirrorVertices(Rect rect, NativeSlice`1<Vertex> vertices, int vertexStart, int vertexCount, bool flipHorizontal)
private void FlipWinding(NativeSlice`1<ushort> indices, int indexStart, int indexCount)
private void ComputeUVs(Rect tessellatedRect, Rect textureRect, Rect uvRegion, NativeSlice`1<Vertex> vertices)
}
internal UnityEngine.UIElements.UIR.TextCoreSettings : ValueType {
public Color faceColor
public Color outlineColor
public float outlineWidth
public Color underlayColor
public Vector2 underlayOffset
public float underlaySoftness
public bool Equals(object obj)
public bool Equals(TextCoreSettings other)
public int GetHashCode()
}
internal UnityEngine.UIElements.UIR.TextureBlitter : object {
private int k_TextureSlotCount
private Int32[] k_TextureIds
private ProfilerMarker s_CommitSampler
private BlitInfo[] m_SingleBlit
private Material m_BlitMaterial
private MaterialPropertyBlock m_Properties
private RectInt m_Viewport
private RenderTexture m_PrevRT
private List`1<BlitInfo> m_PendingBlits
private bool <disposed>k__BackingField
protected bool disposed
public int queueLength
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public void .ctor(int capacity)
public void QueueBlit(Texture src, RectInt srcRect, Vector2Int dstPos, bool addBorder, Color tint)
public void BlitOneNow(RenderTexture dst, Texture src, RectInt srcRect, Vector2Int dstPos, bool addBorder, Color tint)
public int get_queueLength()
public void Commit(RenderTexture dst)
public void Reset()
private void BeginBlit(RenderTexture dst)
private void DoBlit(IList`1<BlitInfo> blitInfos, int startIndex)
private void EndBlit()
}
internal UnityEngine.UIElements.UIR.TextureEntry : ValueType {
public Texture source
public TextureId actual
public bool replaced
}
internal UnityEngine.UIElements.UIR.TextureSlotManager : object {
private int k_SlotCount
internal Int32[] slotIds
internal int textureTableId
private TextureId[] m_Textures
private Int32[] m_Tickets
private int m_CurrentTicket
private int m_FirstUsedTicket
private Vector4[] m_GpuTextures
private int <FreeSlots>k__BackingField
internal TextureRegistry textureRegistry
public int FreeSlots
public void Reset()
public void StartNewBatch()
public int IndexOf(TextureId id)
public void MarkUsed(int slotIndex)
public int get_FreeSlots()
private void set_FreeSlots(int value)
public int FindOldestSlot()
public void Bind(TextureId id, int slot, MaterialPropertyBlock mat)
}
internal UnityEngine.UIElements.UIR.Transform3x4 : ValueType {
public Vector4 v0
public Vector4 v1
public Vector4 v2
}
internal UnityEngine.UIElements.UIR.UIRenderDevice : object {
internal UInt32 k_MaxQueuedFrameCount
internal int k_PruneEmptyPageFrameCount
private bool m_MockDevice
private IntPtr m_DefaultStencilState
private IntPtr m_VertexDecl
private Page m_FirstPage
private UInt32 m_NextPageVertexCount
private UInt32 m_LargeMeshVertexCount
private float m_IndexToVertexCountRatio
private List`1<List`1<AllocToFree>> m_DeferredFrees
private List`1<List`1<AllocToUpdate>> m_Updates
private UInt32[] m_Fences
private MaterialPropertyBlock m_StandardMatProps
private UInt32 m_FrameIndex
private UInt32 m_NextUpdateID
private DrawStatistics m_DrawStats
private LinkedPool`1<MeshHandle> m_MeshHandles
private DrawParams m_DrawParams
private TextureSlotManager m_TextureSlotManager
private LinkedList`1<DeviceToFree> m_DeviceFreeQueue
private int m_ActiveDeviceCount
private bool m_SubscribedToNotifications
private bool m_SynchronousFree
private int s_FontTexPropID
private int s_FontTexSDFScaleID
private int s_GradientSettingsTexID
private int s_ShaderInfoTexID
private int s_TransformsPropID
private int s_ClipRectsPropID
private int s_ClipSpaceParamsID
private ProfilerMarker s_MarkerAllocate
private ProfilerMarker s_MarkerFree
private ProfilerMarker s_MarkerAdvanceFrame
private ProfilerMarker s_MarkerFence
private ProfilerMarker s_MarkerBeforeDraw
private Nullable`1<bool> s_VertexTexturingIsAvailable
private string k_VertexTexturingIsAvailableTag
private string k_VertexTexturingIsAvailableTrue
private Nullable`1<bool> s_ShaderModelIs35
private string k_ShaderModelIs35Tag
private string k_ShaderModelIs35True
private UInt32 <maxVerticesPerPage>k__BackingField
private bool <breakBatches>k__BackingField
private Texture2D s_DefaultShaderInfoTexFloat
private Texture2D s_DefaultShaderInfoTexARGB8
private bool <disposed>k__BackingField
internal UInt32 maxVerticesPerPage
internal bool breakBatches
internal Texture2D defaultShaderInfoTexFloat
internal Texture2D defaultShaderInfoTexARGB8
internal bool vertexTexturingIsAvailable
internal bool shaderModelIs35
private bool fullyCreated
protected bool disposed
internal UInt32 get_maxVerticesPerPage()
internal bool get_breakBatches()
internal void set_breakBatches(bool value)
public void .ctor(UInt32 initialVertexCapacity, UInt32 initialIndexCapacity)
protected void .ctor(UInt32 initialVertexCapacity, UInt32 initialIndexCapacity, bool mockDevice)
internal Texture2D get_defaultShaderInfoTexFloat()
internal Texture2D get_defaultShaderInfoTexARGB8()
internal bool get_vertexTexturingIsAvailable()
internal bool get_shaderModelIs35()
private void InitVertexDeclaration()
private void CompleteCreation()
private bool get_fullyCreated()
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
internal void DisposeImmediate()
protected void Dispose(bool disposing)
public MeshHandle Allocate(UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, UInt16& indexOffset)
public void Update(MeshHandle mesh, UInt32 vertexCount, NativeSlice`1& vertexData)
public void Update(MeshHandle mesh, UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, UInt16& indexOffset)
private void UpdateCopyBackIndices(MeshHandle mesh, bool copyBackIndices)
internal List`1<AllocToUpdate> ActiveUpdatesForMeshHandle(MeshHandle mesh)
private bool TryAllocFromPage(Page page, UInt32 vertexCount, UInt32 indexCount, Alloc& va, Alloc& ia, bool shortLived)
private void Allocate(MeshHandle meshHandle, UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, bool shortLived)
private void UpdateAfterGPUUsedData(MeshHandle mesh, UInt32 vertexCount, UInt32 indexCount, NativeSlice`1& vertexData, NativeSlice`1& indexData, UInt16& indexOffset, AllocToUpdate& allocToUpdate, bool copyBackIndices)
public void Free(MeshHandle mesh)
private Vector4 GetClipSpaceParams()
public void OnFrameRenderingBegin()
private NativeSlice`1<T> PtrToSlice(Void* p, int count)
private void ApplyDrawCommandState(RenderChainCommand cmd, int textureSlot, Material newMat, bool newMatDiffers, bool newFontDiffers, EvaluationState& st)
private void ApplyBatchState(EvaluationState& st, bool allowMaterialChange)
public void EvaluateChain(RenderChainCommand head, Material initialMat, Material defaultMat, Texture gradientSettings, Texture shaderInfo, float pixelsPerPoint, NativeSlice`1<Transform3x4> transforms, NativeSlice`1<Vector4> clipRects, MaterialPropertyBlock stateMatProps, bool allowMaterialChange, Exception& immediateException)
private void UpdateFenceValue()
private void KickRanges(DrawBufferRange* ranges, Int32& rangesReady, Int32& rangesStart, int rangesCount, Page curPage)
private void DrawRanges(GPUBuffer`1<I> ib, GPUBuffer`1<T> vb, NativeSlice`1<DrawBufferRange> ranges)
internal void WaitOnAllCpuFences()
private void WaitOnCpuFence(UInt32 fence)
public void AdvanceFrame()
private void PruneUnusedPages()
internal void PrepareForGfxDeviceRecreate()
internal void WrapUpGfxDeviceRecreate()
internal void FlushAllPendingDeviceDisposes()
internal AllocationStatistics GatherAllocationStatistics()
internal DrawStatistics GatherDrawStatistics()
private void ProcessDeviceFreeQueue()
private void OnEngineUpdateGlobal()
private void OnFlushPendingResources()
}
internal UnityEngine.UIElements.UIR.UIRVEShaderInfoAllocator : ValueType {
private BaseShaderInfoStorage m_Storage
private BitmapAllocator32 m_TransformAllocator
private BitmapAllocator32 m_ClipRectAllocator
private BitmapAllocator32 m_OpacityAllocator
private BitmapAllocator32 m_ColorAllocator
private BitmapAllocator32 m_TextSettingsAllocator
private bool m_StorageReallyCreated
private bool m_VertexTexturingEnabled
private NativeArray`1<Transform3x4> m_Transforms
private NativeArray`1<Vector4> m_ClipRects
internal Vector2Int identityTransformTexel
internal Vector2Int infiniteClipRectTexel
internal Vector2Int fullOpacityTexel
internal Vector2Int clearColorTexel
internal Vector2Int defaultTextCoreSettingsTexel
internal Matrix4x4 identityTransformValue
internal Vector4 identityTransformRow0Value
internal Vector4 identityTransformRow1Value
internal Vector4 identityTransformRow2Value
internal Vector4 infiniteClipRectValue
internal Vector4 fullOpacityValue
internal Vector4 clearColorValue
internal TextCoreSettings defaultTextCoreSettingsValue
public BMPAlloc identityTransform
public BMPAlloc infiniteClipRect
public BMPAlloc fullOpacity
public BMPAlloc clearColor
public BMPAlloc defaultTextCoreSettings
private int pageWidth
private int pageHeight
public NativeSlice`1<Transform3x4> transformConstants
public NativeSlice`1<Vector4> clipRectConstants
public Texture atlas
public bool internalAtlasCreated
private int get_pageWidth()
private int get_pageHeight()
private Vector2Int AllocToTexelCoord(BitmapAllocator32& allocator, BMPAlloc alloc)
private int AllocToConstantBufferIndex(BMPAlloc alloc)
private bool AtlasRectMatchesPage(BitmapAllocator32& allocator, BMPAlloc defAlloc, RectInt atlasRect)
public NativeSlice`1<Transform3x4> get_transformConstants()
public NativeSlice`1<Vector4> get_clipRectConstants()
public Texture get_atlas()
public bool get_internalAtlasCreated()
public void Construct()
private void ReallyCreateStorage()
public void Dispose()
public void IssuePendingStorageChanges()
public BMPAlloc AllocTransform()
public BMPAlloc AllocClipRect()
public BMPAlloc AllocOpacity()
public BMPAlloc AllocColor()
public BMPAlloc AllocTextCoreSettings(TextCoreSettings settings)
public void SetTransformValue(BMPAlloc alloc, Matrix4x4 xform)
public void SetClipRectValue(BMPAlloc alloc, Vector4 clipRect)
public void SetOpacityValue(BMPAlloc alloc, float opacity)
public void SetColorValue(BMPAlloc alloc, Color color, bool isEditorContext)
public void SetTextCoreSettingValue(BMPAlloc alloc, TextCoreSettings settings, bool isEditorContext)
public void FreeTransform(BMPAlloc alloc)
public void FreeClipRect(BMPAlloc alloc)
public void FreeOpacity(BMPAlloc alloc)
public void FreeColor(BMPAlloc alloc)
public void FreeTextCoreSettings(BMPAlloc alloc)
public Color32 TransformAllocToVertexData(BMPAlloc alloc)
public Color32 ClipRectAllocToVertexData(BMPAlloc alloc)
public Color32 OpacityAllocToVertexData(BMPAlloc alloc)
public Color32 ColorAllocToVertexData(BMPAlloc alloc)
public Color32 TextCoreSettingsToVertexData(BMPAlloc alloc)
}
internal UnityEngine.UIElements.UIR.VectorImageManager : object {
public List`1<VectorImageManager> instances
private ProfilerMarker s_MarkerRegister
private ProfilerMarker s_MarkerUnregister
private AtlasBase m_Atlas
private Dictionary`2<VectorImage, VectorImageRenderInfo> m_Registered
private VectorImageRenderInfoPool m_RenderInfoPool
private GradientRemapPool m_GradientRemapPool
private GradientSettingsAtlas m_GradientSettingsAtlas
private bool m_LoggedExhaustedSettingsAtlas
private bool <disposed>k__BackingField
public Texture2D atlas
protected bool disposed
public Texture2D get_atlas()
public void .ctor(AtlasBase atlas)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
public void Reset()
public void Commit()
public GradientRemap AddUser(VectorImage vi, VisualElement context)
public void RemoveUser(VectorImage vi)
private VectorImageRenderInfo Register(VectorImage vi, VisualElement context)
private void Unregister(VectorImage vi, VectorImageRenderInfo renderInfo)
}
internal UnityEngine.UIElements.UIR.VectorImageRenderInfo : LinkedPoolItem`1<VectorImageRenderInfo> {
public int useCount
public GradientRemap firstGradientRemap
public Alloc gradientSettingsAlloc
public void Reset()
}
internal UnityEngine.UIElements.UIR.VertexFlags : Enum {
public int value__
public VertexFlags IsSolid
public VertexFlags IsText
public VertexFlags IsTextured
public VertexFlags IsDynamic
public VertexFlags IsSvgGradients
public VertexFlags LastType
public VertexFlags IsGraphViewEdge
}
internal UnityEngine.UIElements.UIRAtlasAllocator : object {
private int <maxAtlasSize>k__BackingField
private int <maxImageWidth>k__BackingField
private int <maxImageHeight>k__BackingField
private int <virtualWidth>k__BackingField
private int <virtualHeight>k__BackingField
private int <physicalWidth>k__BackingField
private int <physicalHeight>k__BackingField
private AreaNode m_FirstUnpartitionedArea
private Row[] m_OpenRows
private int m_1SidePadding
private int m_2SidePadding
private ProfilerMarker s_MarkerTryAllocate
private bool <disposed>k__BackingField
public int maxAtlasSize
public int maxImageWidth
public int maxImageHeight
public int virtualWidth
public int virtualHeight
public int physicalWidth
public int physicalHeight
protected bool disposed
public int get_maxAtlasSize()
public int get_maxImageWidth()
public int get_maxImageHeight()
public int get_virtualWidth()
private void set_virtualWidth(int value)
public int get_virtualHeight()
private void set_virtualHeight(int value)
public int get_physicalWidth()
private void set_physicalWidth(int value)
public int get_physicalHeight()
private void set_physicalHeight(int value)
protected bool get_disposed()
private void set_disposed(bool value)
public void Dispose()
protected void Dispose(bool disposing)
private int GetLog2OfNextPower(int n)
public void .ctor(int initialAtlasSize, int maxAtlasSize, int sidePadding)
public bool TryAllocate(int width, int height, RectInt& location)
private bool TryPartitionArea(AreaNode areaNode, int rowIndex, int rowHeight, int minWidth)
private void BuildAreas()
}
internal UnityEngine.UIElements.UIRLayoutUpdater : BaseVisualTreeUpdater {
private int kMaxValidateLayoutCount
private string s_Description
private ProfilerMarker s_ProfilerMarker
public ProfilerMarker profilerMarker
public ProfilerMarker get_profilerMarker()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void UpdateSubTree(VisualElement ve, int currentLayoutPass, bool isDisplayed)
}
internal UnityEngine.UIElements.UIRRepaintUpdater : BaseVisualTreeUpdater {
private BaseVisualElementPanel attachedPanel
internal RenderChain renderChain
private string s_Description
private ProfilerMarker s_ProfilerMarker
private bool <drawStats>k__BackingField
private bool <breakBatches>k__BackingField
private bool <disposed>k__BackingField
public ProfilerMarker profilerMarker
public bool drawStats
public bool breakBatches
protected bool disposed
public ProfilerMarker get_profilerMarker()
public bool get_drawStats()
public void set_drawStats(bool value)
public bool get_breakBatches()
public void set_breakBatches(bool value)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
protected RenderChain CreateRenderChain()
private void OnGraphicsResourcesRecreate(bool recreate)
private void OnPanelChanged(BaseVisualElementPanel obj)
private void AttachToPanel()
private void DetachFromPanel()
private void InitRenderChain()
internal void DestroyRenderChain()
private void OnPanelAtlasChanged()
private void OnPanelHierarchyChanged(VisualElement ve, HierarchyChangeType changeType)
private void OnPanelStandardShaderChanged()
private void OnPanelStandardWorldSpaceShaderChanged()
private void ResetAllElementsDataRecursive(VisualElement ve)
protected bool get_disposed()
private void set_disposed(bool value)
protected void Dispose(bool disposing)
}
internal UnityEngine.UIElements.UIRUtility : object {
public string k_DefaultShaderName
public string k_DefaultWorldSpaceShaderName
public float k_Epsilon
public float k_ClearZ
public float k_MeshPosZ
public float k_MaskPosZ
public int k_MaxMaskDepth
public bool ShapeWindingIsClockwise(int maskDepth, int stencilRef)
public Vector4 ToVector4(Rect rc)
public bool IsRoundRect(VisualElement ve)
public void Multiply2D(Quaternion rotation, Vector2& point)
public bool IsVectorImageBackground(VisualElement ve)
public bool IsElementSelfHidden(VisualElement ve)
public void Destroy(Object obj)
public int GetPrevPow2(int n)
public int GetNextPow2(int n)
public int GetNextPow2Exp(int n)
}
public UnityEngine.UIElements.UQueryBuilder`1 : ValueType {
private List`1<StyleSelector> m_StyleSelectors
private List`1<StyleSelectorPart> m_Parts
private VisualElement m_Element
private List`1<RuleMatcher> m_Matchers
private StyleSelectorRelationship m_Relationship
private int pseudoStatesMask
private int negatedPseudoStatesMask
private List`1<StyleSelector> styleSelectors
private List`1<StyleSelectorPart> parts
private List`1<StyleSelector> get_styleSelectors()
private List`1<StyleSelectorPart> get_parts()
public void .ctor(VisualElement visualElement)
public UQueryBuilder`1<T> Class(string classname)
public UQueryBuilder`1<T> Name(string id)
public UQueryBuilder`1<T2> Descendents(string name, String[] classNames)
public UQueryBuilder`1<T2> Descendents(string name, string classname)
public UQueryBuilder`1<T2> Children(string name, String[] classes)
public UQueryBuilder`1<T2> Children(string name, string className)
public UQueryBuilder`1<T2> OfType(string name, String[] classes)
public UQueryBuilder`1<T2> OfType(string name, string className)
internal UQueryBuilder`1<T> SingleBaseType()
public UQueryBuilder`1<T> Where(Func`2<T, bool> selectorPredicate)
private void AddClass(string c)
private void AddClasses(String[] classes)
private void AddName(string id)
private void AddType()
private UQueryBuilder`1<T> AddPseudoState(PseudoStates s)
private UQueryBuilder`1<T> AddNegativePseudoState(PseudoStates s)
public UQueryBuilder`1<T> Active()
public UQueryBuilder`1<T> NotActive()
public UQueryBuilder`1<T> Visible()
public UQueryBuilder`1<T> NotVisible()
public UQueryBuilder`1<T> Hovered()
public UQueryBuilder`1<T> NotHovered()
public UQueryBuilder`1<T> Checked()
public UQueryBuilder`1<T> NotChecked()
public UQueryBuilder`1<T> Selected()
public UQueryBuilder`1<T> NotSelected()
public UQueryBuilder`1<T> Enabled()
public UQueryBuilder`1<T> NotEnabled()
public UQueryBuilder`1<T> Focused()
public UQueryBuilder`1<T> NotFocused()
private UQueryBuilder`1<T2> AddRelationship(StyleSelectorRelationship relationship)
private void AddPseudoStatesRuleIfNecessasy()
private void FinishSelector()
private bool CurrentSelectorEmpty()
private void FinishCurrentSelector()
public UQueryState`1<T> Build()
public T op_Implicit(UQueryBuilder`1<T> s)
public bool op_Equality(UQueryBuilder`1<T> builder1, UQueryBuilder`1<T> builder2)
public bool op_Inequality(UQueryBuilder`1<T> builder1, UQueryBuilder`1<T> builder2)
public T First()
public T Last()
public List`1<T> ToList()
public void ToList(List`1<T> results)
public T AtIndex(int index)
public void ForEach(List`1<T2> result, Func`2<T, T2> funcCall)
public List`1<T2> ForEach(Func`2<T, T2> funcCall)
public void ForEach(Action`1<T> funcCall)
public bool Equals(UQueryBuilder`1<T> other)
public bool Equals(object obj)
public int GetHashCode()
}
public UnityEngine.UIElements.UQueryExtensions : object {
private UQueryState`1<VisualElement> SingleElementEmptyQuery
private UQueryState`1<VisualElement> SingleElementNameQuery
private UQueryState`1<VisualElement> SingleElementClassQuery
private UQueryState`1<VisualElement> SingleElementNameAndClassQuery
private UQueryState`1<VisualElement> SingleElementTypeQuery
private UQueryState`1<VisualElement> SingleElementTypeAndNameQuery
private UQueryState`1<VisualElement> SingleElementTypeAndClassQuery
private UQueryState`1<VisualElement> SingleElementTypeAndNameAndClassQuery
public T Q(VisualElement e, string name, String[] classes)
public VisualElement Q(VisualElement e, string name, String[] classes)
public T Q(VisualElement e, string name, string className)
internal T MandatoryQ(VisualElement e, string name, string className)
public VisualElement Q(VisualElement e, string name, string className)
internal VisualElement MandatoryQ(VisualElement e, string name, string className)
public UQueryBuilder`1<VisualElement> Query(VisualElement e, string name, String[] classes)
public UQueryBuilder`1<VisualElement> Query(VisualElement e, string name, string className)
public UQueryBuilder`1<T> Query(VisualElement e, string name, String[] classes)
public UQueryBuilder`1<T> Query(VisualElement e, string name, string className)
public UQueryBuilder`1<VisualElement> Query(VisualElement e)
}
public UnityEngine.UIElements.UQueryState`1 : ValueType {
private ActionQueryMatcher<T> s_Action
private VisualElement m_Element
internal List`1<RuleMatcher> m_Matchers
private ListQueryMatcher`1<T, T> s_List
private ListQueryMatcher`1<T, VisualElement> s_EnumerationList
internal void .ctor(VisualElement element, List`1<RuleMatcher> matchers)
public UQueryState`1<T> RebuildOn(VisualElement element)
private T Single(SingleQueryMatcher matcher)
public T First()
public T Last()
public void ToList(List`1<T> results)
public List`1<T> ToList()
public T AtIndex(int index)
public void ForEach(Action`1<T> funcCall)
public void ForEach(List`1<T2> result, Func`2<T, T2> funcCall)
public List`1<T2> ForEach(Func`2<T, T2> funcCall)
public Enumerator<T> GetEnumerator()
private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public bool Equals(UQueryState`1<T> other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(UQueryState`1<T> state1, UQueryState`1<T> state2)
public bool op_Inequality(UQueryState`1<T> state1, UQueryState`1<T> state2)
}
public UnityEngine.UIElements.UsageHints : Enum {
public int value__
public UsageHints None
public UsageHints DynamicTransform
public UsageHints GroupTransform
public UsageHints MaskContainer
public UsageHints DynamicColor
}
public UnityEngine.UIElements.UxmlAttributeDescription : object {
protected string xmlSchemaNamespace
private string <name>k__BackingField
private String[] m_ObsoleteNames
private string <type>k__BackingField
private string <typeNamespace>k__BackingField
private Use <use>k__BackingField
private UxmlTypeRestriction <restriction>k__BackingField
public string name
public IEnumerable`1<string> obsoleteNames
public string type
public string typeNamespace
public string defaultValueAsString
public Use use
public UxmlTypeRestriction restriction
public string get_name()
public void set_name(string value)
public IEnumerable`1<string> get_obsoleteNames()
public void set_obsoleteNames(IEnumerable`1<string> value)
public string get_type()
protected void set_type(string value)
public string get_typeNamespace()
protected void set_typeNamespace(string value)
public string get_defaultValueAsString()
public Use get_use()
public void set_use(Use value)
public UxmlTypeRestriction get_restriction()
public void set_restriction(UxmlTypeRestriction value)
internal bool TryGetValueFromBagAsString(IUxmlAttributes bag, CreationContext cc, String& value)
protected bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Func`3<string, T, T> converterFunc, T defaultValue, T& value)
protected T GetValueFromBag(IUxmlAttributes bag, CreationContext cc, Func`3<string, T, T> converterFunc, T defaultValue)
}
public UnityEngine.UIElements.UxmlAttributeOverridesFactory : UxmlFactory`2<VisualElement, UxmlAttributeOverridesTraits> {
internal string k_ElementName
public string uxmlName
public string uxmlQualifiedName
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlQualifiedName()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.UIElements.UxmlAttributeOverridesTraits : UxmlTraits {
internal string k_ElementNameAttributeName
private UxmlStringAttributeDescription m_ElementName
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
}
public UnityEngine.UIElements.UxmlBoolAttributeDescription : TypedUxmlAttributeDescription`1<bool> {
public string defaultValueAsString
public string get_defaultValueAsString()
public bool GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Boolean& value)
private bool ConvertValueToBool(string v, bool defaultValue)
}
public UnityEngine.UIElements.UxmlChildElementDescription : object {
private string <elementName>k__BackingField
private string <elementNamespace>k__BackingField
public string elementName
public string elementNamespace
public void .ctor(Type t)
public string get_elementName()
protected void set_elementName(string value)
public string get_elementNamespace()
protected void set_elementNamespace(string value)
}
public UnityEngine.UIElements.UxmlColorAttributeDescription : TypedUxmlAttributeDescription`1<Color> {
public string defaultValueAsString
public string get_defaultValueAsString()
public Color GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Color& value)
private Color ConvertValueToColor(string v, Color defaultValue)
}
public UnityEngine.UIElements.UxmlDoubleAttributeDescription : TypedUxmlAttributeDescription`1<double> {
public string defaultValueAsString
public string get_defaultValueAsString()
public double GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Double& value)
private double ConvertValueToDouble(string v, double defaultValue)
}
public UnityEngine.UIElements.UxmlEnumAttributeDescription`1 : TypedUxmlAttributeDescription`1<T> {
public string defaultValueAsString
public string get_defaultValueAsString()
public T GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, T& value)
private U ConvertValueToEnum(string v, U defaultValue)
}
public UnityEngine.UIElements.UxmlEnumeration : UxmlTypeRestriction {
private List`1<string> m_Values
public IEnumerable`1<string> values
public IEnumerable`1<string> get_values()
public void set_values(IEnumerable`1<string> value)
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.UIElements.UxmlFactory`2 : object {
internal TTraits m_Traits
public string uxmlName
public string uxmlNamespace
public string uxmlQualifiedName
public bool canHaveAnyAttribute
public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlNamespace()
public string get_uxmlQualifiedName()
public bool get_canHaveAnyAttribute()
public IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription()
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public bool AcceptsAttributeBag(IUxmlAttributes bag, CreationContext cc)
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.UIElements.UxmlFloatAttributeDescription : TypedUxmlAttributeDescription`1<float> {
public string defaultValueAsString
public string get_defaultValueAsString()
public float GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Single& value)
private float ConvertValueToFloat(string v, float defaultValue)
}
internal UnityEngine.UIElements.UxmlGenericAttributeNames : object {
internal string k_NameAttributeName
internal string k_PathAttributeName
internal string k_SrcAttributeName
}
public UnityEngine.UIElements.UxmlHash128AttributeDescription : TypedUxmlAttributeDescription`1<Hash128> {
public string defaultValueAsString
public string get_defaultValueAsString()
public Hash128 GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Hash128& value)
}
public UnityEngine.UIElements.UxmlIntAttributeDescription : TypedUxmlAttributeDescription`1<int> {
public string defaultValueAsString
public string get_defaultValueAsString()
public int GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Int32& value)
private int ConvertValueToInt(string v, int defaultValue)
}
public UnityEngine.UIElements.UxmlLongAttributeDescription : TypedUxmlAttributeDescription`1<long> {
public string defaultValueAsString
public string get_defaultValueAsString()
public long GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Int64& value)
private long ConvertValueToLong(string v, long defaultValue)
}
public UnityEngine.UIElements.UxmlRootElementFactory : UxmlFactory`2<VisualElement, UxmlRootElementTraits> {
internal string k_ElementName
public string uxmlName
public string uxmlQualifiedName
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlQualifiedName()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.UIElements.UxmlRootElementTraits : UxmlTraits {
protected UxmlStringAttributeDescription m_Name
private UxmlStringAttributeDescription m_Class
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
}
public UnityEngine.UIElements.UxmlStringAttributeDescription : TypedUxmlAttributeDescription`1<string> {
public string defaultValueAsString
public string get_defaultValueAsString()
public string GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, String& value)
}
public UnityEngine.UIElements.UxmlStyleFactory : UxmlFactory`2<VisualElement, UxmlStyleTraits> {
internal string k_ElementName
public string uxmlName
public string uxmlQualifiedName
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlQualifiedName()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.UIElements.UxmlStyleTraits : UxmlTraits {
private UxmlStringAttributeDescription m_Name
private UxmlStringAttributeDescription m_Path
private UxmlStringAttributeDescription m_Src
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
}
public UnityEngine.UIElements.UxmlTemplateFactory : UxmlFactory`2<VisualElement, UxmlTemplateTraits> {
internal string k_ElementName
public string uxmlName
public string uxmlQualifiedName
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlQualifiedName()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.UIElements.UxmlTemplateTraits : UxmlTraits {
private UxmlStringAttributeDescription m_Name
private UxmlStringAttributeDescription m_Path
private UxmlStringAttributeDescription m_Src
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
}
public UnityEngine.UIElements.UxmlTraits : object {
private bool <canHaveAnyAttribute>k__BackingField
public bool canHaveAnyAttribute
public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public bool get_canHaveAnyAttribute()
protected void set_canHaveAnyAttribute(bool value)
public IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription()
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
public void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc)
private IEnumerable`1<UxmlAttributeDescription> GetAllAttributeDescriptionForType(Type t)
}
public UnityEngine.UIElements.UxmlTypeAttributeDescription`1 : TypedUxmlAttributeDescription`1<Type> {
public string defaultValueAsString
public string get_defaultValueAsString()
public Type GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
public bool TryGetValueFromBag(IUxmlAttributes bag, CreationContext cc, Type& value)
private Type ConvertValueToType(string v, Type defaultValue)
private Type <GetValueFromBag>b__3_0(string s, Type type1)
private Type <TryGetValueFromBag>b__4_0(string s, Type type1)
}
public UnityEngine.UIElements.UxmlTypeRestriction : object {
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.UIElements.UxmlValueBounds : UxmlTypeRestriction {
private string <min>k__BackingField
private string <max>k__BackingField
private bool <excludeMin>k__BackingField
private bool <excludeMax>k__BackingField
public string min
public string max
public bool excludeMin
public bool excludeMax
public string get_min()
public void set_min(string value)
public string get_max()
public void set_max(string value)
public bool get_excludeMin()
public void set_excludeMin(bool value)
public bool get_excludeMax()
public void set_excludeMax(bool value)
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.UIElements.UxmlValueMatches : UxmlTypeRestriction {
private string <regex>k__BackingField
public string regex
public string get_regex()
public void set_regex(string value)
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.UIElements.VectorImage : ScriptableObject {
internal Texture2D atlas
internal VectorImageVertex[] vertices
internal UInt16[] indices
internal GradientSettings[] settings
internal Vector2 size
}
internal UnityEngine.UIElements.VectorImageVertex : ValueType {
public Vector3 position
public Color32 tint
public Vector2 uv
public UInt32 settingIndex
}
internal UnityEngine.UIElements.VersionChangeType : Enum {
public int value__
public VersionChangeType Bindings
public VersionChangeType ViewData
public VersionChangeType Hierarchy
public VersionChangeType Layout
public VersionChangeType StyleSheet
public VersionChangeType Styles
public VersionChangeType Overflow
public VersionChangeType BorderRadius
public VersionChangeType BorderWidth
public VersionChangeType Transform
public VersionChangeType Size
public VersionChangeType Repaint
public VersionChangeType Opacity
public VersionChangeType Color
public VersionChangeType RenderHints
public VersionChangeType TransitionProperty
}
public UnityEngine.UIElements.Vertex : ValueType {
public float nearZ
public Vector3 position
public Color32 tint
public Vector2 uv
internal Color32 xformClipPages
internal Color32 ids
internal Color32 flags
internal Color32 opacityColorPages
internal Vector4 circle
internal float textureId
}
internal UnityEngine.UIElements.VerticalVirtualizationController`1 : CollectionVirtualizationController {
protected BaseVerticalCollectionView m_ListView
protected int k_ExtraVisibleItems
protected ObjectPool`1<T> m_Pool
protected List`1<T> m_ActiveItems
private int m_LastFocusedElementIndex
private List`1<int> m_LastFocusedElementTreeChildIndexes
protected int m_FirstVisibleIndex
private Func`2<T, bool> m_VisibleItemPredicateDelegate
protected List`1<T> m_ScrollInsertionList
private VisualElement k_EmptyRows
public IEnumerable`1<ReusableCollectionItem> activeItems
internal T firstVisibleItem
internal T lastVisibleItem
public int visibleItemCount
public int firstVisibleIndex
public int lastVisibleIndex
protected float lastHeight
public IEnumerable`1<ReusableCollectionItem> get_activeItems()
protected bool VisibleItemPredicate(T i)
internal T get_firstVisibleItem()
internal T get_lastVisibleItem()
public int get_visibleItemCount()
public int get_firstVisibleIndex()
public int get_lastVisibleIndex()
protected float get_lastHeight()
protected void .ctor(BaseVerticalCollectionView collectionView)
public void Refresh(bool rebuild)
protected void Setup(T recycledItem, int newIndex)
public void OnFocus(VisualElement leafTarget)
public void OnBlur(VisualElement willFocus)
private void HandleFocus(ReusableCollectionItem recycledItem, int previousIndex)
public void UpdateBackground()
public void ReplaceActiveItem(int index)
internal T GetOrMakeItem()
internal void ReleaseItem(int activeItemsIndex)
}
public UnityEngine.UIElements.Visibility : Enum {
public int value__
public Visibility Visible
public Visibility Hidden
}
internal UnityEngine.UIElements.VisualData : ValueType {
public Color backgroundColor
public Background backgroundImage
public Color borderBottomColor
public Length borderBottomLeftRadius
public Length borderBottomRightRadius
public Color borderLeftColor
public Color borderRightColor
public Color borderTopColor
public Length borderTopLeftRadius
public Length borderTopRightRadius
public float opacity
public OverflowInternal overflow
public VisualData Copy()
public void CopyFrom(VisualData& other)
public bool op_Equality(VisualData lhs, VisualData rhs)
public bool op_Inequality(VisualData lhs, VisualData rhs)
public bool Equals(VisualData other)
public bool Equals(object obj)
public int GetHashCode()
}
public UnityEngine.UIElements.VisualElement : Focusable {
private int <UnityEngine.UIElements.IStylePropertyAnimations.runningAnimationCount>k__BackingField
private int <UnityEngine.UIElements.IStylePropertyAnimations.completedAnimationCount>k__BackingField
private UInt32 s_NextId
private List`1<string> s_EmptyClassList
internal PropertyName userDataPropertyKey
public string disabledUssClassName
private string m_Name
private List`1<string> m_ClassList
private List`1<KeyValuePair`2<PropertyName, object>> m_PropertyBag
private VisualElementFlags m_Flags
private string m_ViewDataKey
private RenderHints m_RenderHints
internal Rect lastLayout
internal Rect lastPseudoPadding
internal RenderChainVEData renderChainData
private Rect m_Layout
private Rect m_BoundingBox
private Rect m_WorldBoundingBox
private Matrix4x4 m_WorldTransformCache
private Matrix4x4 m_WorldTransformInverseCache
private Rect m_WorldClip
private Rect m_WorldClipMinusGroup
private bool m_WorldClipIsInfinite
internal Rect s_InfiniteRect
internal PseudoStates triggerPseudoMask
internal PseudoStates dependencyPseudoMask
private PseudoStates m_PseudoStates
private int <containedPointerIds>k__BackingField
private PickingMode <pickingMode>k__BackingField
private YogaNode <yogaNode>k__BackingField
internal ComputedStyle m_Style
internal StyleVariableContext variableContext
internal int inheritedStylesHash
internal UInt32 controlid
internal int imguiContainerDescendantCount
private bool <enabledSelf>k__BackingField
private Action`1<MeshGenerationContext> <generateVisualContent>k__BackingField
private ProfilerMarker k_GenerateVisualContentMarker
private RenderTargetMode m_SubRenderTargetMode
private Material s_runtimeMaterial
private Material m_defaultMaterial
private List`1<IValueAnimationUpdate> m_RunningAnimations
internal string k_RootVisualContainerName
private Hierarchy <hierarchy>k__BackingField
private bool <isRootVisualContainer>k__BackingField
private bool <cacheAsBitmap>k__BackingField
private VisualElement m_PhysicalParent
private VisualElement m_LogicalParent
private List`1<VisualElement> s_EmptyList
private List`1<VisualElement> m_Children
private BaseVisualElementPanel <elementPanel>k__BackingField
private VisualTreeAsset m_VisualTreeAssetSource
internal CustomStyleAccess s_CustomStyleAccess
internal InlineStyleAccess inlineStyleAccess
internal List`1<StyleSheet> styleSheetList
private Regex s_InternalStyleSheetPath
internal PropertyName tooltipPropertyKey
private Dictionary`2<Type, TypeData> s_TypeData
private TypeData m_TypeData
internal bool hasRunningAnimations
internal bool hasCompletedAnimations
private int UnityEngine.UIElements.IStylePropertyAnimations.runningAnimationCount
private int UnityEngine.UIElements.IStylePropertyAnimations.completedAnimationCount
internal IStylePropertyAnimations styleAnimation
internal bool isCompositeRoot
internal bool isHierarchyDisplayed
public string viewDataKey
internal bool enableViewDataPersistence
public object userData
public bool canGrabFocus
public FocusController focusController
public UsageHints usageHints
internal RenderHints renderHints
public ITransform transform
private Vector3 UnityEngine.UIElements.ITransform.position
private Quaternion UnityEngine.UIElements.ITransform.rotation
private Vector3 UnityEngine.UIElements.ITransform.scale
private Matrix4x4 UnityEngine.UIElements.ITransform.matrix
internal bool isLayoutManual
internal float scaledPixelsPerPoint
public Rect layout
public Rect contentRect
protected Rect paddingRect
internal bool isBoundingBoxDirty
internal bool isWorldBoundingBoxDirty
internal Rect boundingBox
internal Rect worldBoundingBox
private Rect boundingBoxInParentSpace
public Rect worldBound
public Rect localBound
internal Rect rect
internal bool isWorldTransformDirty
internal bool isWorldTransformInverseDirty
public Matrix4x4 worldTransform
internal Matrix4x4& worldTransformRef
internal Matrix4x4& worldTransformInverse
internal bool isWorldClipDirty
internal Rect worldClip
internal Rect worldClipMinusGroup
internal bool worldClipIsInfinite
internal PseudoStates pseudoStates
internal int containedPointerIds
public PickingMode pickingMode
public string name
internal List`1<string> classList
internal string fullTypeName
internal string typeName
internal YogaNode yogaNode
internal ComputedStyle& computedStyle
internal bool hasInlineStyle
internal bool styleInitialized
internal float opacity
private bool isParentEnabledInHierarchy
public bool enabledInHierarchy
public bool enabledSelf
public bool visible
public Action`1<MeshGenerationContext> generateVisualContent
internal bool requireMeasureFunction
internal RenderTargetMode subRenderTargetMode
internal Material defaultMaterial
public IExperimentalFeatures experimental
private ITransitionAnimations UnityEngine.UIElements.IExperimentalFeatures.animation
public Hierarchy hierarchy
internal bool isRootVisualContainer
public bool cacheAsBitmap
internal bool disableClipping
public VisualElement parent
internal BaseVisualElementPanel elementPanel
public IPanel panel
public VisualElement contentContainer
public VisualTreeAsset visualTreeAssetSource
public VisualElement Item
public int childCount
private Vector3 positionWithLayout
internal bool hasDefaultRotationAndScale
public IVisualElementScheduler schedule
public IStyle style
public ICustomStyle customStyle
public VisualElementStyleSheetSet styleSheets
public string tooltip
private TypeData typeData
public IResolvedStyle resolvedStyle
private Align UnityEngine.UIElements.IResolvedStyle.alignContent
private Align UnityEngine.UIElements.IResolvedStyle.alignItems
private Align UnityEngine.UIElements.IResolvedStyle.alignSelf
private Color UnityEngine.UIElements.IResolvedStyle.backgroundColor
private Background UnityEngine.UIElements.IResolvedStyle.backgroundImage
private Color UnityEngine.UIElements.IResolvedStyle.borderBottomColor
private float UnityEngine.UIElements.IResolvedStyle.borderBottomLeftRadius
private float UnityEngine.UIElements.IResolvedStyle.borderBottomRightRadius
private float UnityEngine.UIElements.IResolvedStyle.borderBottomWidth
private Color UnityEngine.UIElements.IResolvedStyle.borderLeftColor
private float UnityEngine.UIElements.IResolvedStyle.borderLeftWidth
private Color UnityEngine.UIElements.IResolvedStyle.borderRightColor
private float UnityEngine.UIElements.IResolvedStyle.borderRightWidth
private Color UnityEngine.UIElements.IResolvedStyle.borderTopColor
private float UnityEngine.UIElements.IResolvedStyle.borderTopLeftRadius
private float UnityEngine.UIElements.IResolvedStyle.borderTopRightRadius
private float UnityEngine.UIElements.IResolvedStyle.borderTopWidth
private float UnityEngine.UIElements.IResolvedStyle.bottom
private Color UnityEngine.UIElements.IResolvedStyle.color
private DisplayStyle UnityEngine.UIElements.IResolvedStyle.display
private StyleFloat UnityEngine.UIElements.IResolvedStyle.flexBasis
private FlexDirection UnityEngine.UIElements.IResolvedStyle.flexDirection
private float UnityEngine.UIElements.IResolvedStyle.flexGrow
private float UnityEngine.UIElements.IResolvedStyle.flexShrink
private Wrap UnityEngine.UIElements.IResolvedStyle.flexWrap
private float UnityEngine.UIElements.IResolvedStyle.fontSize
private float UnityEngine.UIElements.IResolvedStyle.height
private Justify UnityEngine.UIElements.IResolvedStyle.justifyContent
private float UnityEngine.UIElements.IResolvedStyle.left
private float UnityEngine.UIElements.IResolvedStyle.letterSpacing
private float UnityEngine.UIElements.IResolvedStyle.marginBottom
private float UnityEngine.UIElements.IResolvedStyle.marginLeft
private float UnityEngine.UIElements.IResolvedStyle.marginRight
private float UnityEngine.UIElements.IResolvedStyle.marginTop
private StyleFloat UnityEngine.UIElements.IResolvedStyle.maxHeight
private StyleFloat UnityEngine.UIElements.IResolvedStyle.maxWidth
private StyleFloat UnityEngine.UIElements.IResolvedStyle.minHeight
private StyleFloat UnityEngine.UIElements.IResolvedStyle.minWidth
private float UnityEngine.UIElements.IResolvedStyle.opacity
private float UnityEngine.UIElements.IResolvedStyle.paddingBottom
private float UnityEngine.UIElements.IResolvedStyle.paddingLeft
private float UnityEngine.UIElements.IResolvedStyle.paddingRight
private float UnityEngine.UIElements.IResolvedStyle.paddingTop
private Position UnityEngine.UIElements.IResolvedStyle.position
private float UnityEngine.UIElements.IResolvedStyle.right
private Rotate UnityEngine.UIElements.IResolvedStyle.rotate
private Scale UnityEngine.UIElements.IResolvedStyle.scale
private TextOverflow UnityEngine.UIElements.IResolvedStyle.textOverflow
private float UnityEngine.UIElements.IResolvedStyle.top
private Vector3 UnityEngine.UIElements.IResolvedStyle.transformOrigin
private IEnumerable`1<TimeValue> UnityEngine.UIElements.IResolvedStyle.transitionDelay
private IEnumerable`1<TimeValue> UnityEngine.UIElements.IResolvedStyle.transitionDuration
private IEnumerable`1<StylePropertyName> UnityEngine.UIElements.IResolvedStyle.transitionProperty
private IEnumerable`1<EasingFunction> UnityEngine.UIElements.IResolvedStyle.transitionTimingFunction
private Vector3 UnityEngine.UIElements.IResolvedStyle.translate
private Color UnityEngine.UIElements.IResolvedStyle.unityBackgroundImageTintColor
private ScaleMode UnityEngine.UIElements.IResolvedStyle.unityBackgroundScaleMode
private Font UnityEngine.UIElements.IResolvedStyle.unityFont
private FontDefinition UnityEngine.UIElements.IResolvedStyle.unityFontDefinition
private FontStyle UnityEngine.UIElements.IResolvedStyle.unityFontStyleAndWeight
private float UnityEngine.UIElements.IResolvedStyle.unityParagraphSpacing
private int UnityEngine.UIElements.IResolvedStyle.unitySliceBottom
private int UnityEngine.UIElements.IResolvedStyle.unitySliceLeft
private int UnityEngine.UIElements.IResolvedStyle.unitySliceRight
private int UnityEngine.UIElements.IResolvedStyle.unitySliceTop
private TextAnchor UnityEngine.UIElements.IResolvedStyle.unityTextAlign
private Color UnityEngine.UIElements.IResolvedStyle.unityTextOutlineColor
private float UnityEngine.UIElements.IResolvedStyle.unityTextOutlineWidth
private TextOverflowPosition UnityEngine.UIElements.IResolvedStyle.unityTextOverflowPosition
private Visibility UnityEngine.UIElements.IResolvedStyle.visibility
private WhiteSpace UnityEngine.UIElements.IResolvedStyle.whiteSpace
private float UnityEngine.UIElements.IResolvedStyle.width
private float UnityEngine.UIElements.IResolvedStyle.wordSpacing
internal bool get_hasRunningAnimations()
internal bool get_hasCompletedAnimations()
private int UnityEngine.UIElements.IStylePropertyAnimations.get_runningAnimationCount()
private void UnityEngine.UIElements.IStylePropertyAnimations.set_runningAnimationCount(int value)
private int UnityEngine.UIElements.IStylePropertyAnimations.get_completedAnimationCount()
private void UnityEngine.UIElements.IStylePropertyAnimations.set_completedAnimationCount(int value)
private IStylePropertyAnimationSystem GetStylePropertyAnimationSystem()
internal IStylePropertyAnimations get_styleAnimation()
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, float from, float to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, int from, int to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Length from, Length to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Color from, Color to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.StartEnum(StylePropertyId id, int from, int to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Background from, Background to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, FontDefinition from, FontDefinition to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Font from, Font to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, TextShadow from, TextShadow to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Scale from, Scale to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Translate from, Translate to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, Rotate from, Rotate to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private bool UnityEngine.UIElements.IStylePropertyAnimations.Start(StylePropertyId id, TransformOrigin from, TransformOrigin to, int durationMs, int delayMs, Func`2<float, float> easingCurve)
private void UnityEngine.UIElements.IStylePropertyAnimations.CancelAnimation(StylePropertyId id)
private void UnityEngine.UIElements.IStylePropertyAnimations.CancelAllAnimations()
private bool UnityEngine.UIElements.IStylePropertyAnimations.HasRunningAnimation(StylePropertyId id)
private void UnityEngine.UIElements.IStylePropertyAnimations.UpdateAnimation(StylePropertyId id)
private void UnityEngine.UIElements.IStylePropertyAnimations.GetAllAnimations(List`1<StylePropertyId> outPropertyIds)
internal bool TryConvertLengthUnits(StylePropertyId id, Length& from, Length& to, int subPropertyIndex)
internal bool TryConvertTransformOriginUnits(TransformOrigin& from, TransformOrigin& to)
internal bool TryConvertTranslateUnits(Translate& from, Translate& to)
private Nullable`1<float> GetParentSizeForLengthConversion(StylePropertyId id, int subPropertyIndex)
internal bool get_isCompositeRoot()
internal void set_isCompositeRoot(bool value)
internal bool get_isHierarchyDisplayed()
internal void set_isHierarchyDisplayed(bool value)
public string get_viewDataKey()
public void set_viewDataKey(string value)
internal bool get_enableViewDataPersistence()
private void set_enableViewDataPersistence(bool value)
public object get_userData()
public void set_userData(object value)
public bool get_canGrabFocus()
public FocusController get_focusController()
public UsageHints get_usageHints()
public void set_usageHints(UsageHints value)
internal RenderHints get_renderHints()
internal void set_renderHints(RenderHints value)
internal void MarkRenderHintsClean()
public ITransform get_transform()
private Vector3 UnityEngine.UIElements.ITransform.get_position()
private void UnityEngine.UIElements.ITransform.set_position(Vector3 value)
private Quaternion UnityEngine.UIElements.ITransform.get_rotation()
private void UnityEngine.UIElements.ITransform.set_rotation(Quaternion value)
private Vector3 UnityEngine.UIElements.ITransform.get_scale()
private void UnityEngine.UIElements.ITransform.set_scale(Vector3 value)
private Matrix4x4 UnityEngine.UIElements.ITransform.get_matrix()
internal bool get_isLayoutManual()
private void set_isLayoutManual(bool value)
internal float get_scaledPixelsPerPoint()
public Rect get_layout()
internal void set_layout(Rect value)
public Rect get_contentRect()
protected Rect get_paddingRect()
internal bool get_isBoundingBoxDirty()
internal void set_isBoundingBoxDirty(bool value)
internal bool get_isWorldBoundingBoxDirty()
internal void set_isWorldBoundingBoxDirty(bool value)
internal Rect get_boundingBox()
internal Rect get_worldBoundingBox()
private Rect get_boundingBoxInParentSpace()
internal void UpdateBoundingBox()
internal void UpdateWorldBoundingBox()
public Rect get_worldBound()
public Rect get_localBound()
internal Rect get_rect()
internal bool get_isWorldTransformDirty()
internal void set_isWorldTransformDirty(bool value)
internal bool get_isWorldTransformInverseDirty()
internal void set_isWorldTransformInverseDirty(bool value)
public Matrix4x4 get_worldTransform()
internal Matrix4x4& get_worldTransformRef()
internal Matrix4x4& get_worldTransformInverse()
internal void UpdateWorldTransform()
internal void UpdateWorldTransformInverse()
internal bool get_isWorldClipDirty()
internal void set_isWorldClipDirty(bool value)
internal Rect get_worldClip()
internal Rect get_worldClipMinusGroup()
internal bool get_worldClipIsInfinite()
internal void EnsureWorldTransformAndClipUpToDate()
private void UpdateWorldClip()
private Rect CombineClipRects(Rect rect, Rect parentRect)
private Rect SubstractBorderPadding(Rect worldRect)
internal Rect ComputeAAAlignedBound(Rect position, Matrix4x4 mat)
internal PseudoStates get_pseudoStates()
internal void set_pseudoStates(PseudoStates value)
internal int get_containedPointerIds()
private void set_containedPointerIds(int value)
private void UpdateHoverPseudoState()
public PickingMode get_pickingMode()
public void set_pickingMode(PickingMode value)
public string get_name()
public void set_name(string value)
internal List`1<string> get_classList()
internal string get_fullTypeName()
internal string get_typeName()
internal YogaNode get_yogaNode()
private void set_yogaNode(YogaNode value)
internal ComputedStyle& get_computedStyle()
internal bool get_hasInlineStyle()
internal bool get_styleInitialized()
internal void set_styleInitialized(bool value)
internal float get_opacity()
internal void set_opacity(float value)
private void ChangeIMGUIContainerCount(int delta)
protected void ExecuteDefaultAction(EventBase evt)
internal Rect GetTooltipRect()
private void SetTooltip(TooltipEvent e)
public void Focus()
internal void SetPanel(BaseVisualElementPanel p)
private void WillChangePanel(BaseVisualElementPanel destinationPanel)
private void HasChangedPanel(BaseVisualElementPanel prevPanel)
public void SendEvent(EventBase e)
internal void SendEvent(EventBase e, DispatchMode dispatchMode)
internal void IncrementVersion(VersionChangeType changeType)
internal void InvokeHierarchyChanged(HierarchyChangeType changeType)
protected internal bool SetEnabledFromHierarchy(bool state)
private bool SetEnabledFromHierarchyPrivate(bool state)
private bool get_isParentEnabledInHierarchy()
public bool get_enabledInHierarchy()
public bool get_enabledSelf()
private void set_enabledSelf(bool value)
public void SetEnabled(bool value)
private void PropagateEnabledToChildren(bool value)
public bool get_visible()
public void set_visible(bool value)
public void MarkDirtyRepaint()
public Action`1<MeshGenerationContext> get_generateVisualContent()
public void set_generateVisualContent(Action`1<MeshGenerationContext> value)
internal void InvokeGenerateVisualContent(MeshGenerationContext mgc)
internal void GetFullHierarchicalViewDataKey(StringBuilder key)
internal string GetFullHierarchicalViewDataKey()
internal T GetOrCreateViewData(object existing, string key)
internal T GetOrCreateViewData(ScriptableObject existing, string key)
internal void OverwriteFromViewData(object obj, string key)
internal void SaveViewData()
internal bool IsViewDataPersitenceSupportedOnChildren(bool existingState)
internal void OnViewDataReady(bool enablePersistence)
internal void OnViewDataReady()
public bool ContainsPoint(Vector2 localPoint)
public bool Overlaps(Rect rectangle)
internal bool get_requireMeasureFunction()
internal void set_requireMeasureFunction(bool value)
private void AssignMeasureFunction()
private void RemoveMeasureFunction()
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
internal YogaSize Measure(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode)
internal void SetSize(Vector2 size)
private void FinalizeLayout()
internal void SetInlineRule(StyleSheet sheet, StyleRule rule)
internal void UpdateInlineRule(StyleSheet sheet, StyleRule rule)
internal void SetComputedStyle(ComputedStyle& newStyle)
internal void ResetPositionProperties()
public string ToString()
public IEnumerable`1<string> GetClasses()
internal List`1<string> GetClassesForIteration()
public void ClearClassList()
public void AddToClassList(string className)
public void RemoveFromClassList(string className)
public void ToggleInClassList(string className)
public void EnableInClassList(string className, bool enable)
public bool ClassListContains(string cls)
public object FindAncestorUserData()
internal object GetProperty(PropertyName key)
internal void SetProperty(PropertyName key, object value)
internal bool HasProperty(PropertyName key)
private bool TryGetPropertyInternal(PropertyName key, Object& value)
private void CheckUserKeyArgument(PropertyName key)
private void SetPropertyInternal(PropertyName key, object value)
private void UpdateCursorStyle(long eventType)
internal RenderTargetMode get_subRenderTargetMode()
internal void set_subRenderTargetMode(RenderTargetMode value)
private Material getRuntimeMaterial()
internal Material get_defaultMaterial()
private void set_defaultMaterial(Material value)
private VisualElementAnimationSystem GetAnimationSystem()
internal void RegisterAnimation(IValueAnimationUpdate anim)
internal void UnregisterAnimation(IValueAnimationUpdate anim)
private void UnregisterRunningAnimations()
private void RegisterRunningAnimations()
private ValueAnimation`1<float> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(float from, float to, int durationMs, Action`2<VisualElement, float> onValueChanged)
private ValueAnimation`1<Rect> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Rect from, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged)
private ValueAnimation`1<Color> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Color from, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged)
private ValueAnimation`1<Vector3> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Vector3 from, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged)
private ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Vector2 from, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged)
private ValueAnimation`1<Quaternion> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Quaternion from, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged)
private ValueAnimation`1<StyleValues> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(StyleValues from, StyleValues to, int durationMs)
private ValueAnimation`1<float> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, float> fromValueGetter, float to, int durationMs, Action`2<VisualElement, float> onValueChanged)
private ValueAnimation`1<Rect> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Rect> fromValueGetter, Rect to, int durationMs, Action`2<VisualElement, Rect> onValueChanged)
private ValueAnimation`1<Color> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Color> fromValueGetter, Color to, int durationMs, Action`2<VisualElement, Color> onValueChanged)
private ValueAnimation`1<Vector3> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Vector3> fromValueGetter, Vector3 to, int durationMs, Action`2<VisualElement, Vector3> onValueChanged)
private ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Vector2> fromValueGetter, Vector2 to, int durationMs, Action`2<VisualElement, Vector2> onValueChanged)
private ValueAnimation`1<Quaternion> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(Func`2<VisualElement, Quaternion> fromValueGetter, Quaternion to, int durationMs, Action`2<VisualElement, Quaternion> onValueChanged)
private ValueAnimation`1<T> StartAnimation(ValueAnimation`1<T> anim, Func`2<VisualElement, T> fromValueGetter, T to, int durationMs, Action`2<VisualElement, T> onValueChanged)
private void AssignStyleValues(VisualElement ve, StyleValues src)
private StyleValues ReadCurrentValues(VisualElement ve, StyleValues targetValuesToRead)
private ValueAnimation`1<StyleValues> UnityEngine.UIElements.Experimental.ITransitionAnimations.Start(StyleValues to, int durationMs)
private ValueAnimation`1<StyleValues> Start(Func`2<VisualElement, StyleValues> fromValueGetter, StyleValues to, int durationMs)
private ValueAnimation`1<Rect> UnityEngine.UIElements.Experimental.ITransitionAnimations.Layout(Rect to, int durationMs)
private ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.TopLeft(Vector2 to, int durationMs)
private ValueAnimation`1<Vector2> UnityEngine.UIElements.Experimental.ITransitionAnimations.Size(Vector2 to, int durationMs)
private ValueAnimation`1<float> UnityEngine.UIElements.Experimental.ITransitionAnimations.Scale(float to, int durationMs)
private ValueAnimation`1<Vector3> UnityEngine.UIElements.Experimental.ITransitionAnimations.Position(Vector3 to, int durationMs)
private ValueAnimation`1<Quaternion> UnityEngine.UIElements.Experimental.ITransitionAnimations.Rotation(Quaternion to, int durationMs)
public IExperimentalFeatures get_experimental()
private ITransitionAnimations UnityEngine.UIElements.IExperimentalFeatures.get_animation()
public Hierarchy get_hierarchy()
private void set_hierarchy(Hierarchy value)
internal bool get_isRootVisualContainer()
internal void set_isRootVisualContainer(bool value)
public bool get_cacheAsBitmap()
public void set_cacheAsBitmap(bool value)
internal bool get_disableClipping()
internal void set_disableClipping(bool value)
internal bool ShouldClip()
public VisualElement get_parent()
internal BaseVisualElementPanel get_elementPanel()
private void set_elementPanel(BaseVisualElementPanel value)
public IPanel get_panel()
public VisualElement get_contentContainer()
public VisualTreeAsset get_visualTreeAssetSource()
internal void set_visualTreeAssetSource(VisualTreeAsset value)
public void Add(VisualElement child)
public void Insert(int index, VisualElement element)
public void Remove(VisualElement element)
public void RemoveAt(int index)
public void Clear()
public VisualElement ElementAt(int index)
public VisualElement get_Item(int key)
public int get_childCount()
public int IndexOf(VisualElement element)
internal VisualElement ElementAtTreePath(List`1<int> childIndexes)
internal bool FindElementInTree(VisualElement element, List`1<int> outChildIndexes)
public IEnumerable`1<VisualElement> Children()
public void Sort(Comparison`1<VisualElement> comp)
public void BringToFront()
public void SendToBack()
public void PlaceBehind(VisualElement sibling)
public void PlaceInFront(VisualElement sibling)
public void RemoveFromHierarchy()
public T GetFirstOfType()
public T GetFirstAncestorOfType()
public bool Contains(VisualElement child)
private void GatherAllChildren(List`1<VisualElement> elements)
public VisualElement FindCommonAncestor(VisualElement other)
internal VisualElement GetRoot()
internal VisualElement GetRootVisualContainer()
internal VisualElement GetNextElementDepthFirst()
internal VisualElement GetPreviousElementDepthFirst()
internal VisualElement RetargetElement(VisualElement retargetAgainst)
private Vector3 get_positionWithLayout()
internal void GetPivotedMatrixWithLayout(Matrix4x4& result)
internal bool get_hasDefaultRotationAndScale()
internal float Min(float a, float b, float c, float d)
internal float Max(float a, float b, float c, float d)
private void TransformAlignedRectToParentSpace(Rect& rect)
internal Rect CalculateConservativeRect(Matrix4x4& matrix, Rect rect)
internal void TransformAlignedRect(Matrix4x4& matrix, Rect& rect)
internal void OrderMinMaxRect(Rect& rect)
internal Vector2 MultiplyMatrix44Point2(Matrix4x4& lhs, Vector2 point)
internal Vector2 MultiplyVector2(Matrix4x4& lhs, Vector2 vector)
internal Rect MultiplyMatrix44Rect2(Matrix4x4& lhs, Rect r)
internal void MultiplyMatrix34(Matrix4x4& lhs, Matrix4x4& rhs, Matrix4x4& res)
private void TranslateMatrix34(Matrix4x4& lhs, Vector3 rhs, Matrix4x4& res)
private void TranslateMatrix34InPlace(Matrix4x4& lhs, Vector3 rhs)
public IVisualElementScheduler get_schedule()
private IVisualElementScheduledItem UnityEngine.UIElements.IVisualElementScheduler.Execute(Action`1<TimerState> timerUpdateEvent)
private IVisualElementScheduledItem UnityEngine.UIElements.IVisualElementScheduler.Execute(Action updateEvent)
public IStyle get_style()
public ICustomStyle get_customStyle()
public VisualElementStyleSheetSet get_styleSheets()
internal void AddStyleSheetPath(string sheetPath)
internal bool HasStyleSheetPath(string sheetPath)
internal void RemoveStyleSheetPath(string sheetPath)
private StyleFloat ResolveLengthValue(Length length, bool isRow)
private Vector3 ResolveTranslate()
private Vector3 ResolveTransformOrigin()
private Quaternion ResolveRotation()
private Vector3 ResolveScale()
public string get_tooltip()
public void set_tooltip(string value)
private TypeData get_typeData()
public IResolvedStyle get_resolvedStyle()
private Align UnityEngine.UIElements.IResolvedStyle.get_alignContent()
private Align UnityEngine.UIElements.IResolvedStyle.get_alignItems()
private Align UnityEngine.UIElements.IResolvedStyle.get_alignSelf()
private Color UnityEngine.UIElements.IResolvedStyle.get_backgroundColor()
private Background UnityEngine.UIElements.IResolvedStyle.get_backgroundImage()
private Color UnityEngine.UIElements.IResolvedStyle.get_borderBottomColor()
private float UnityEngine.UIElements.IResolvedStyle.get_borderBottomLeftRadius()
private float UnityEngine.UIElements.IResolvedStyle.get_borderBottomRightRadius()
private float UnityEngine.UIElements.IResolvedStyle.get_borderBottomWidth()
private Color UnityEngine.UIElements.IResolvedStyle.get_borderLeftColor()
private float UnityEngine.UIElements.IResolvedStyle.get_borderLeftWidth()
private Color UnityEngine.UIElements.IResolvedStyle.get_borderRightColor()
private float UnityEngine.UIElements.IResolvedStyle.get_borderRightWidth()
private Color UnityEngine.UIElements.IResolvedStyle.get_borderTopColor()
private float UnityEngine.UIElements.IResolvedStyle.get_borderTopLeftRadius()
private float UnityEngine.UIElements.IResolvedStyle.get_borderTopRightRadius()
private float UnityEngine.UIElements.IResolvedStyle.get_borderTopWidth()
private float UnityEngine.UIElements.IResolvedStyle.get_bottom()
private Color UnityEngine.UIElements.IResolvedStyle.get_color()
private DisplayStyle UnityEngine.UIElements.IResolvedStyle.get_display()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_flexBasis()
private FlexDirection UnityEngine.UIElements.IResolvedStyle.get_flexDirection()
private float UnityEngine.UIElements.IResolvedStyle.get_flexGrow()
private float UnityEngine.UIElements.IResolvedStyle.get_flexShrink()
private Wrap UnityEngine.UIElements.IResolvedStyle.get_flexWrap()
private float UnityEngine.UIElements.IResolvedStyle.get_fontSize()
private float UnityEngine.UIElements.IResolvedStyle.get_height()
private Justify UnityEngine.UIElements.IResolvedStyle.get_justifyContent()
private float UnityEngine.UIElements.IResolvedStyle.get_left()
private float UnityEngine.UIElements.IResolvedStyle.get_letterSpacing()
private float UnityEngine.UIElements.IResolvedStyle.get_marginBottom()
private float UnityEngine.UIElements.IResolvedStyle.get_marginLeft()
private float UnityEngine.UIElements.IResolvedStyle.get_marginRight()
private float UnityEngine.UIElements.IResolvedStyle.get_marginTop()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_maxHeight()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_maxWidth()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_minHeight()
private StyleFloat UnityEngine.UIElements.IResolvedStyle.get_minWidth()
private float UnityEngine.UIElements.IResolvedStyle.get_opacity()
private float UnityEngine.UIElements.IResolvedStyle.get_paddingBottom()
private float UnityEngine.UIElements.IResolvedStyle.get_paddingLeft()
private float UnityEngine.UIElements.IResolvedStyle.get_paddingRight()
private float UnityEngine.UIElements.IResolvedStyle.get_paddingTop()
private Position UnityEngine.UIElements.IResolvedStyle.get_position()
private float UnityEngine.UIElements.IResolvedStyle.get_right()
private Rotate UnityEngine.UIElements.IResolvedStyle.get_rotate()
private Scale UnityEngine.UIElements.IResolvedStyle.get_scale()
private TextOverflow UnityEngine.UIElements.IResolvedStyle.get_textOverflow()
private float UnityEngine.UIElements.IResolvedStyle.get_top()
private Vector3 UnityEngine.UIElements.IResolvedStyle.get_transformOrigin()
private IEnumerable`1<TimeValue> UnityEngine.UIElements.IResolvedStyle.get_transitionDelay()
private IEnumerable`1<TimeValue> UnityEngine.UIElements.IResolvedStyle.get_transitionDuration()
private IEnumerable`1<StylePropertyName> UnityEngine.UIElements.IResolvedStyle.get_transitionProperty()
private IEnumerable`1<EasingFunction> UnityEngine.UIElements.IResolvedStyle.get_transitionTimingFunction()
private Vector3 UnityEngine.UIElements.IResolvedStyle.get_translate()
private Color UnityEngine.UIElements.IResolvedStyle.get_unityBackgroundImageTintColor()
private ScaleMode UnityEngine.UIElements.IResolvedStyle.get_unityBackgroundScaleMode()
private Font UnityEngine.UIElements.IResolvedStyle.get_unityFont()
private FontDefinition UnityEngine.UIElements.IResolvedStyle.get_unityFontDefinition()
private FontStyle UnityEngine.UIElements.IResolvedStyle.get_unityFontStyleAndWeight()
private float UnityEngine.UIElements.IResolvedStyle.get_unityParagraphSpacing()
private int UnityEngine.UIElements.IResolvedStyle.get_unitySliceBottom()
private int UnityEngine.UIElements.IResolvedStyle.get_unitySliceLeft()
private int UnityEngine.UIElements.IResolvedStyle.get_unitySliceRight()
private int UnityEngine.UIElements.IResolvedStyle.get_unitySliceTop()
private TextAnchor UnityEngine.UIElements.IResolvedStyle.get_unityTextAlign()
private Color UnityEngine.UIElements.IResolvedStyle.get_unityTextOutlineColor()
private float UnityEngine.UIElements.IResolvedStyle.get_unityTextOutlineWidth()
private TextOverflowPosition UnityEngine.UIElements.IResolvedStyle.get_unityTextOverflowPosition()
private Visibility UnityEngine.UIElements.IResolvedStyle.get_visibility()
private WhiteSpace UnityEngine.UIElements.IResolvedStyle.get_whiteSpace()
private float UnityEngine.UIElements.IResolvedStyle.get_width()
private float UnityEngine.UIElements.IResolvedStyle.get_wordSpacing()
private YogaSize <AssignMeasureFunction>b__253_0(YogaNode node, float f, YogaMeasureMode mode, float f1, YogaMeasureMode heightMode)
}
internal UnityEngine.UIElements.VisualElementAnimationSystem : BaseVisualTreeUpdater {
private HashSet`1<IValueAnimationUpdate> m_Animations
private List`1<IValueAnimationUpdate> m_IterationList
private bool m_HasNewAnimations
private bool m_IterationListDirty
private string s_Description
private ProfilerMarker s_ProfilerMarker
private string s_StylePropertyAnimationDescription
private ProfilerMarker s_StylePropertyAnimationProfilerMarker
private long lastUpdate
public ProfilerMarker profilerMarker
private ProfilerMarker stylePropertyAnimationProfilerMarker
private long CurrentTimeMs()
public ProfilerMarker get_profilerMarker()
private ProfilerMarker get_stylePropertyAnimationProfilerMarker()
public void UnregisterAnimation(IValueAnimationUpdate anim)
public void UnregisterAnimations(List`1<IValueAnimationUpdate> anims)
public void RegisterAnimation(IValueAnimationUpdate anim)
public void RegisterAnimations(List`1<IValueAnimationUpdate> anims)
public void Update()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
}
internal UnityEngine.UIElements.VisualElementAsset : object {
private string m_Name
private int m_Id
private int m_OrderInDocument
private int m_ParentId
private int m_RuleIndex
private string m_Text
private PickingMode m_PickingMode
private string m_FullTypeName
private String[] m_Classes
private List`1<string> m_StylesheetPaths
private List`1<StyleSheet> m_Stylesheets
private List`1<string> m_Properties
public int id
public int orderInDocument
public int parentId
public int ruleIndex
public string fullTypeName
public String[] classes
public List`1<string> stylesheetPaths
public bool hasStylesheetPaths
public List`1<StyleSheet> stylesheets
public bool hasStylesheets
public int get_id()
public void set_id(int value)
public int get_orderInDocument()
public void set_orderInDocument(int value)
public int get_parentId()
public void set_parentId(int value)
public int get_ruleIndex()
public void set_ruleIndex(int value)
public string get_fullTypeName()
public void set_fullTypeName(string value)
public String[] get_classes()
public void set_classes(String[] value)
public List`1<string> get_stylesheetPaths()
public void set_stylesheetPaths(List`1<string> value)
public bool get_hasStylesheetPaths()
public List`1<StyleSheet> get_stylesheets()
public void set_stylesheets(List`1<StyleSheet> value)
public bool get_hasStylesheets()
public void .ctor(string fullTypeName)
public void OnBeforeSerialize()
public void OnAfterDeserialize()
public void AddProperty(string propertyName, string propertyValue)
private void SetOrAddProperty(string propertyName, string propertyValue)
public bool TryGetAttributeValue(string propertyName, String& value)
}
internal UnityEngine.UIElements.VisualElementDebugExtensions : object {
public string GetDisplayName(VisualElement ve, bool withHashCode)
}
public UnityEngine.UIElements.VisualElementExtensions : object {
public void StretchToParentSize(VisualElement elem)
public void StretchToParentWidth(VisualElement elem)
public void AddManipulator(VisualElement ele, IManipulator manipulator)
public void RemoveManipulator(VisualElement ele, IManipulator manipulator)
public Vector2 WorldToLocal(VisualElement ele, Vector2 p)
public Vector2 LocalToWorld(VisualElement ele, Vector2 p)
public Rect WorldToLocal(VisualElement ele, Rect r)
public Rect LocalToWorld(VisualElement ele, Rect r)
public Vector2 ChangeCoordinatesTo(VisualElement src, VisualElement dest, Vector2 point)
public Rect ChangeCoordinatesTo(VisualElement src, VisualElement dest, Rect rect)
}
internal UnityEngine.UIElements.VisualElementFactoryRegistry : object {
private Dictionary`2<string, List`1<IUxmlFactory>> s_Factories
internal Dictionary`2<string, List`1<IUxmlFactory>> factories
internal Dictionary`2<string, List`1<IUxmlFactory>> get_factories()
protected void RegisterFactory(IUxmlFactory factory)
internal bool TryGetValue(string fullTypeName, List`1& factoryList)
private void RegisterEngineFactories()
internal void RegisterUserFactories()
}
internal UnityEngine.UIElements.VisualElementFlags : Enum {
public int value__
public VisualElementFlags WorldTransformDirty
public VisualElementFlags WorldTransformInverseDirty
public VisualElementFlags WorldClipDirty
public VisualElementFlags BoundingBoxDirty
public VisualElementFlags WorldBoundingBoxDirty
public VisualElementFlags LayoutManual
public VisualElementFlags CompositeRoot
public VisualElementFlags RequireMeasureFunction
public VisualElementFlags EnableViewDataPersistence
public VisualElementFlags DisableClipping
public VisualElementFlags NeedsAttachToPanelEvent
public VisualElementFlags HierarchyDisplayed
public VisualElementFlags StyleInitialized
public VisualElementFlags Init
}
public UnityEngine.UIElements.VisualElementFocusChangeDirection : FocusChangeDirection {
private VisualElementFocusChangeDirection s_Left
private VisualElementFocusChangeDirection s_Right
public FocusChangeDirection left
public FocusChangeDirection right
protected VisualElementFocusChangeDirection lastValue
public FocusChangeDirection get_left()
public FocusChangeDirection get_right()
protected VisualElementFocusChangeDirection get_lastValue()
protected void .ctor(int value)
}
internal UnityEngine.UIElements.VisualElementFocusChangeTarget : FocusChangeDirection {
private ObjectPool`1<VisualElementFocusChangeTarget> Pool
private Focusable <target>k__BackingField
public Focusable target
public VisualElementFocusChangeTarget GetPooled(Focusable target)
protected void Dispose()
internal void ApplyTo(FocusController focusController, Focusable f)
public Focusable get_target()
private void set_target(Focusable value)
}
public UnityEngine.UIElements.VisualElementFocusRing : object {
private VisualElement root
private DefaultFocusOrder <defaultFocusOrder>k__BackingField
private List`1<FocusRingRecord> m_FocusRing
private FocusController focusController
public DefaultFocusOrder defaultFocusOrder
public void .ctor(VisualElement root, DefaultFocusOrder dfo)
private FocusController get_focusController()
public DefaultFocusOrder get_defaultFocusOrder()
public void set_defaultFocusOrder(DefaultFocusOrder value)
private int FocusRingAutoIndexSort(FocusRingRecord a, FocusRingRecord b)
private int FocusRingSort(FocusRingRecord a, FocusRingRecord b)
private void DoUpdate()
private void BuildRingForScopeRecursive(VisualElement ve, Int32& scopeIndex, List`1<FocusRingRecord> scopeList)
private void SortAndFlattenScopeLists(List`1<FocusRingRecord> rootScopeList)
private int GetFocusableInternalIndex(Focusable f)
public FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e)
internal FocusChangeDirection GetKeyDownFocusChangeDirection(EventBase e)
public Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction)
internal Focusable GetNextFocusableInTree(VisualElement currentFocusable)
internal Focusable GetPreviousFocusableInTree(VisualElement currentFocusable)
}
internal UnityEngine.UIElements.VisualElementListPool : object {
private ObjectPool`1<List`1<VisualElement>> pool
public List`1<VisualElement> Copy(List`1<VisualElement> elements)
public List`1<VisualElement> Get(int initialCapacity)
public void Release(List`1<VisualElement> elements)
}
internal UnityEngine.UIElements.VisualElementPanelActivator : object {
private IVisualElementPanelActivatable m_Activatable
private bool <isActive>k__BackingField
private bool <isDetaching>k__BackingField
public bool isActive
public bool isDetaching
public bool get_isActive()
private void set_isActive(bool value)
public bool get_isDetaching()
private void set_isDetaching(bool value)
public void .ctor(IVisualElementPanelActivatable activatable)
public void SetActive(bool action)
public void SendActivation()
public void SendDeactivation()
private void OnEnter(AttachToPanelEvent evt)
private void OnLeave(DetachFromPanelEvent evt)
}
public UnityEngine.UIElements.VisualElementStyleSheetSet : ValueType {
private VisualElement m_Element
public int count
public StyleSheet Item
internal void .ctor(VisualElement element)
public void Add(StyleSheet styleSheet)
public void Clear()
public bool Remove(StyleSheet styleSheet)
internal void Swap(StyleSheet old, StyleSheet new)
public bool Contains(StyleSheet styleSheet)
public int get_count()
public StyleSheet get_Item(int index)
public bool Equals(VisualElementStyleSheetSet other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(VisualElementStyleSheetSet left, VisualElementStyleSheetSet right)
public bool op_Inequality(VisualElementStyleSheetSet left, VisualElementStyleSheetSet right)
}
internal UnityEngine.UIElements.VisualElementUtils : object {
private HashSet`1<string> s_usedNames
private Type s_FoldoutType
public string GetUniqueName(string nameBase)
internal int GetFoldoutDepth(VisualElement element)
internal int GetListAndFoldoutDepth(VisualElement element)
}
public UnityEngine.UIElements.VisualTreeAsset : ScriptableObject {
internal string LinkedVEAInTemplatePropertyName
private bool m_ImportedWithErrors
private bool m_ImportedWithWarnings
private Dictionary`2<string, VisualElement> s_TemporarySlotInsertionPoints
private List`1<UsingEntry> m_Usings
internal StyleSheet inlineSheet
private List`1<VisualElementAsset> m_VisualElementAssets
private List`1<TemplateAsset> m_TemplateAssets
private List`1<SlotDefinition> m_Slots
private int m_ContentContainerId
private int m_ContentHash
public bool importedWithErrors
public bool importedWithWarnings
public IEnumerable`1<VisualTreeAsset> templateDependencies
public IEnumerable`1<StyleSheet> stylesheets
internal List`1<VisualElementAsset> visualElementAssets
internal List`1<TemplateAsset> templateAssets
internal List`1<SlotDefinition> slots
internal int contentContainerId
public int contentHash
public bool get_importedWithErrors()
internal void set_importedWithErrors(bool value)
public bool get_importedWithWarnings()
internal void set_importedWithWarnings(bool value)
internal int GetNextChildSerialNumber()
public IEnumerable`1<VisualTreeAsset> get_templateDependencies()
public IEnumerable`1<StyleSheet> get_stylesheets()
internal List`1<VisualElementAsset> get_visualElementAssets()
internal void set_visualElementAssets(List`1<VisualElementAsset> value)
internal List`1<TemplateAsset> get_templateAssets()
internal void set_templateAssets(List`1<TemplateAsset> value)
internal List`1<SlotDefinition> get_slots()
internal void set_slots(List`1<SlotDefinition> value)
internal int get_contentContainerId()
internal void set_contentContainerId(int value)
public TemplateContainer Instantiate()
public TemplateContainer Instantiate(string bindingPath)
public TemplateContainer CloneTree()
public TemplateContainer CloneTree(string bindingPath)
public void CloneTree(VisualElement target)
public void CloneTree(VisualElement target, Int32& firstElementIndex, Int32& elementAddedCount)
internal void CloneTree(VisualElement target, Dictionary`2<string, VisualElement> slotInsertionPoints, List`1<AttributeOverride> attributeOverrides)
private VisualElement CloneSetupRecursively(VisualElementAsset root, Dictionary`2<int, List`1<VisualElementAsset>> idToChildren, CreationContext context)
private int CompareForOrder(VisualElementAsset a, VisualElementAsset b)
internal bool TryGetSlotInsertionPoint(int insertionPointId, String& slotName)
internal VisualTreeAsset ResolveTemplate(string templateName)
internal VisualElement Create(VisualElementAsset asset, CreationContext ctx)
private void AssignClassListFromAssetToElement(VisualElementAsset asset, VisualElement element)
private void AssignStyleSheetFromAssetToElement(VisualElementAsset asset, VisualElement element)
public int get_contentHash()
public void set_contentHash(int value)
internal VisualElement <Create>g__CreateError|49_0(<>c__DisplayClass49_0& )
}
internal UnityEngine.UIElements.VisualTreeBindingsUpdater : BaseVisualTreeHierarchyTrackerUpdater {
private PropertyName s_BindingRequestObjectVEPropertyName
private PropertyName s_AdditionalBindingObjectVEPropertyName
private string s_Description
private ProfilerMarker s_ProfilerMarker
private ProfilerMarker s_ProfilerBindingRequestsMarker
private ProfilerMarker s_MarkerUpdate
private ProfilerMarker s_MarkerPoll
private bool <disableBindingsThrottling>k__BackingField
private HashSet`1<VisualElement> m_ElementsWithBindings
private HashSet`1<VisualElement> m_ElementsToAdd
private HashSet`1<VisualElement> m_ElementsToRemove
private int k_MinUpdateDelayMs
private int k_MaxBindingTimeMs
private long m_LastUpdateTime
private HashSet`1<VisualElement> m_ElementsToBind
private Dictionary`2<object, object> <temporaryObjectCache>k__BackingField
private List`1<IBinding> updatedBindings
public ProfilerMarker profilerMarker
public bool disableBindingsThrottling
public Dictionary`2<object, object> temporaryObjectCache
public ProfilerMarker get_profilerMarker()
public bool get_disableBindingsThrottling()
public void set_disableBindingsThrottling(bool value)
private IBinding GetBindingObjectFromElement(VisualElement ve)
private void StartTracking(VisualElement ve)
private void StopTracking(VisualElement ve)
public Dictionary`2<object, object> get_temporaryObjectCache()
private void set_temporaryObjectCache(Dictionary`2<object, object> value)
public void SetAdditionalBinding(VisualElement ve, IBinding b)
public void ClearAdditionalBinding(VisualElement ve)
public IBinding GetAdditionalBinding(VisualElement ve)
public void AddBindingRequest(VisualElement ve, IBindingRequest req)
public void RemoveBindingRequest(VisualElement ve, IBindingRequest req)
public void ClearBindingRequests(VisualElement ve)
private void StartTrackingRecursive(VisualElement ve)
private void StopTrackingRecursive(VisualElement ve)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
protected void OnHierarchyChange(VisualElement ve, HierarchyChangeType type)
private long CurrentTime()
public bool ShouldThrottle(long startTime)
public void PerformTrackingOperations()
public void Update()
private void UpdateBindings()
internal void PollElementsWithBindings(Action`2<VisualElement, IBinding> callback)
}
internal UnityEngine.UIElements.VisualTreeStyleUpdater : BaseVisualTreeUpdater {
private HashSet`1<VisualElement> m_ApplyStyleUpdateList
private HashSet`1<VisualElement> m_TransitionPropertyUpdateList
private bool m_IsApplyingStyles
private UInt32 m_Version
private UInt32 m_LastVersion
private VisualTreeStyleUpdaterTraversal m_StyleContextHierarchyTraversal
private string s_Description
private ProfilerMarker s_ProfilerMarker
public VisualTreeStyleUpdaterTraversal traversal
public ProfilerMarker profilerMarker
public VisualTreeStyleUpdaterTraversal get_traversal()
public void set_traversal(VisualTreeStyleUpdaterTraversal value)
public ProfilerMarker get_profilerMarker()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void ApplyStyles()
}
internal UnityEngine.UIElements.VisualTreeStyleUpdaterTraversal : HierarchyTraversal {
private StyleVariableContext m_ProcessVarContext
private HashSet`1<VisualElement> m_UpdateList
private HashSet`1<VisualElement> m_ParentList
private List`1<SelectorMatchRecord> m_TempMatchResults
private float <currentPixelsPerPoint>k__BackingField
private StyleMatchingContext m_StyleMatchingContext
private StylePropertyReader m_StylePropertyReader
private List`1<StylePropertyId> m_AnimatedProperties
private float currentPixelsPerPoint
public StyleMatchingContext styleMatchingContext
private float get_currentPixelsPerPoint()
private void set_currentPixelsPerPoint(float value)
public StyleMatchingContext get_styleMatchingContext()
public void PrepareTraversal(float pixelsPerPoint)
public void AddChangedElement(VisualElement ve, VersionChangeType versionChangeType)
public void Clear()
private void PropagateToChildren(VisualElement ve)
private void PropagateToParents(VisualElement ve)
private void OnProcessMatchResult(VisualElement current, MatchResultInfo info)
public void TraverseRecursive(VisualElement element, int depth)
private void ProcessTransitions(VisualElement element, ComputedStyle& oldStyle, ComputedStyle& newStyle)
private void ForceUpdateTransitions(VisualElement element)
internal void CancelAnimationsWithNoTransitionProperty(VisualElement element, ComputedStyle& newStyle)
protected bool ShouldSkipElement(VisualElement element)
private ComputedStyle ProcessMatchedRules(VisualElement element, List`1<SelectorMatchRecord> matchingSelectors)
private void ProcessMatchedVariables(StyleSheet sheet, StyleRule rule)
}
internal UnityEngine.UIElements.VisualTreeTransformClipUpdater : BaseVisualTreeUpdater {
private UInt32 m_Version
private UInt32 m_LastVersion
private string s_Description
private ProfilerMarker s_ProfilerMarker
public ProfilerMarker profilerMarker
public ProfilerMarker get_profilerMarker()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
private void DirtyHierarchy(VisualElement ve, bool mustDirtyWorldTransform, bool mustDirtyWorldClip)
private void DirtyBoundingBoxHierarchy(VisualElement ve)
public void Update()
}
internal UnityEngine.UIElements.VisualTreeUpdatePhase : Enum {
public int value__
public VisualTreeUpdatePhase ViewData
public VisualTreeUpdatePhase Bindings
public VisualTreeUpdatePhase Animation
public VisualTreeUpdatePhase Styles
public VisualTreeUpdatePhase Layout
public VisualTreeUpdatePhase TransformClip
public VisualTreeUpdatePhase Repaint
public VisualTreeUpdatePhase Count
}
internal UnityEngine.UIElements.VisualTreeUpdater : object {
private BaseVisualElementPanel m_Panel
private UpdaterArray m_UpdaterArray
public void .ctor(BaseVisualElementPanel panel)
public void Dispose()
public void UpdateVisualTree()
public void UpdateVisualTreePhase(VisualTreeUpdatePhase phase)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase)
public void SetUpdater(VisualTreeUpdatePhase phase)
public IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase)
private void SetDefaultUpdaters()
}
internal UnityEngine.UIElements.VisualTreeViewDataUpdater : BaseVisualTreeUpdater {
private HashSet`1<VisualElement> m_UpdateList
private HashSet`1<VisualElement> m_ParentList
private int kMaxValidatePersistentDataCount
private UInt32 m_Version
private UInt32 m_LastVersion
private string s_Description
private ProfilerMarker s_ProfilerMarker
public ProfilerMarker profilerMarker
public ProfilerMarker get_profilerMarker()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void ValidateViewDataOnSubTree(VisualElement ve, bool enablePersistence)
private void PropagateToParents(VisualElement ve)
}
public UnityEngine.UIElements.WheelEvent : MouseEventBase`1<WheelEvent> {
private Vector3 <delta>k__BackingField
public Vector3 delta
public Vector3 get_delta()
private void set_delta(Vector3 value)
public WheelEvent GetPooled(Event systemEvent)
internal WheelEvent GetPooled(Vector3 delta, Vector3 mousePosition)
internal WheelEvent GetPooled(Vector3 delta, IPointerEvent pointerEvent)
protected void Init()
private void LocalInit()
}
public UnityEngine.UIElements.WhiteSpace : Enum {
public int value__
public WhiteSpace Normal
public WhiteSpace NoWrap
}
public UnityEngine.UIElements.Wrap : Enum {
public int value__
public Wrap NoWrap
public Wrap Wrap
public Wrap WrapReverse
}
