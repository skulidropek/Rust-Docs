internal UnityEngine.CSSLayout.CSSAlign : Enum {
public int value__
public CSSAlign Auto
public CSSAlign FlexStart
public CSSAlign Center
public CSSAlign FlexEnd
public CSSAlign Stretch
}
internal UnityEngine.CSSLayout.CSSConstants : object {
public float Undefined
public bool IsUndefined(float value)
}
internal UnityEngine.CSSLayout.CSSDimension : Enum {
public int value__
public CSSDimension Width
public CSSDimension Height
}
internal UnityEngine.CSSLayout.CSSDirection : Enum {
public int value__
public CSSDirection Inherit
public CSSDirection LTR
public CSSDirection RTL
public CSSDirection LeftToRight
public CSSDirection RightToLeft
}
internal UnityEngine.CSSLayout.CSSEdge : Enum {
public int value__
public CSSEdge Left
public CSSEdge Top
public CSSEdge Right
public CSSEdge Bottom
public CSSEdge Start
public CSSEdge End
public CSSEdge Horizontal
public CSSEdge Vertical
public CSSEdge All
}
internal UnityEngine.CSSLayout.CSSExperimentalFeature : Enum {
public int value__
public CSSExperimentalFeature Rounding
public CSSExperimentalFeature WebFlexBasis
}
internal UnityEngine.CSSLayout.CSSFlexDirection : Enum {
public int value__
public CSSFlexDirection Column
public CSSFlexDirection ColumnReverse
public CSSFlexDirection Row
public CSSFlexDirection RowReverse
}
internal UnityEngine.CSSLayout.CSSJustify : Enum {
public int value__
public CSSJustify FlexStart
public CSSJustify Center
public CSSJustify FlexEnd
public CSSJustify SpaceBetween
public CSSJustify SpaceAround
}
internal UnityEngine.CSSLayout.CSSLogger : object {
public Func Logger
public void Initialize()
}
internal UnityEngine.CSSLayout.CSSLogLevel : Enum {
public int value__
public CSSLogLevel Error
public CSSLogLevel Warn
public CSSLogLevel Info
public CSSLogLevel Debug
public CSSLogLevel Verbose
}
internal UnityEngine.CSSLayout.CSSMeasureFunc : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public CSSSize Invoke(IntPtr node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode)
public IAsyncResult BeginInvoke(IntPtr node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode, AsyncCallback callback, object object)
public CSSSize EndInvoke(IAsyncResult result)
}
internal UnityEngine.CSSLayout.CSSMeasureMode : Enum {
public int value__
public CSSMeasureMode Undefined
public CSSMeasureMode Exactly
public CSSMeasureMode AtMost
}
internal UnityEngine.CSSLayout.CSSNode : object {
private IntPtr _cssNode
private WeakReference _parent
private List`1<CSSNode> _children
private MeasureFunction _measureFunction
private CSSMeasureFunc _cssMeasureFunc
private object _data
public bool IsDirty
public bool HasNewLayout
public CSSNode Parent
public bool IsMeasureDefined
public CSSDirection StyleDirection
public CSSFlexDirection FlexDirection
public CSSJustify JustifyContent
public CSSAlign AlignItems
public CSSAlign AlignSelf
public CSSAlign AlignContent
public CSSPositionType PositionType
public CSSWrap Wrap
public float Flex
public float FlexGrow
public float FlexShrink
public float FlexBasis
public float Width
public float Height
public float MaxWidth
public float MaxHeight
public float MinWidth
public float MinHeight
public float AspectRatio
public float LayoutX
public float LayoutY
public float LayoutWidth
public float LayoutHeight
public CSSDirection LayoutDirection
public CSSOverflow Overflow
public object Data
public CSSNode Item
public int Count
protected void Finalize()
public void Reset()
public bool get_IsDirty()
public void MarkDirty()
public bool get_HasNewLayout()
public void MarkHasNewLayout()
public CSSNode get_Parent()
public bool get_IsMeasureDefined()
public void CopyStyle(CSSNode srcNode)
public CSSDirection get_StyleDirection()
public void set_StyleDirection(CSSDirection value)
public CSSFlexDirection get_FlexDirection()
public void set_FlexDirection(CSSFlexDirection value)
public CSSJustify get_JustifyContent()
public void set_JustifyContent(CSSJustify value)
public CSSAlign get_AlignItems()
public void set_AlignItems(CSSAlign value)
public CSSAlign get_AlignSelf()
public void set_AlignSelf(CSSAlign value)
public CSSAlign get_AlignContent()
public void set_AlignContent(CSSAlign value)
public CSSPositionType get_PositionType()
public void set_PositionType(CSSPositionType value)
public CSSWrap get_Wrap()
public void set_Wrap(CSSWrap value)
public void set_Flex(float value)
public float get_FlexGrow()
public void set_FlexGrow(float value)
public float get_FlexShrink()
public void set_FlexShrink(float value)
public float get_FlexBasis()
public void set_FlexBasis(float value)
public float GetMargin(CSSEdge edge)
public void SetMargin(CSSEdge edge, float value)
public float GetPadding(CSSEdge edge)
public void SetPadding(CSSEdge edge, float padding)
public float GetBorder(CSSEdge edge)
public void SetBorder(CSSEdge edge, float border)
public float GetPosition(CSSEdge edge)
public void SetPosition(CSSEdge edge, float position)
public float get_Width()
public void set_Width(float value)
public float get_Height()
public void set_Height(float value)
public float get_MaxWidth()
public void set_MaxWidth(float value)
public float get_MaxHeight()
public void set_MaxHeight(float value)
public float get_MinWidth()
public void set_MinWidth(float value)
public float get_MinHeight()
public void set_MinHeight(float value)
public float get_AspectRatio()
public void set_AspectRatio(float value)
public float get_LayoutX()
public float get_LayoutY()
public float get_LayoutWidth()
public float get_LayoutHeight()
public CSSDirection get_LayoutDirection()
public CSSOverflow get_Overflow()
public void set_Overflow(CSSOverflow value)
public object get_Data()
public void set_Data(object value)
public CSSNode get_Item(int index)
public int get_Count()
public void MarkLayoutSeen()
public bool ValuesEqual(float f1, float f2)
public void Insert(int index, CSSNode node)
public void RemoveAt(int index)
public void Clear()
public int IndexOf(CSSNode node)
public void SetMeasureFunction(MeasureFunction measureFunction)
public void CalculateLayout()
private CSSSize MeasureInternal(IntPtr node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode)
public string Print()
public string Print(CSSPrintOptions options)
public IEnumerator`1<CSSNode> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int GetInstanceCount()
public void SetExperimentalFeatureEnabled(CSSExperimentalFeature feature, bool enabled)
public bool IsExperimentalFeatureEnabled(CSSExperimentalFeature feature)
}
internal UnityEngine.CSSLayout.CSSOverflow : Enum {
public int value__
public CSSOverflow Visible
public CSSOverflow Hidden
public CSSOverflow Scroll
}
internal UnityEngine.CSSLayout.CSSPositionType : Enum {
public int value__
public CSSPositionType Relative
public CSSPositionType Absolute
}
internal UnityEngine.CSSLayout.CSSPrintOptions : Enum {
public int value__
public CSSPrintOptions Layout
public CSSPrintOptions Style
public CSSPrintOptions Children
}
internal UnityEngine.CSSLayout.CSSSize : ValueType {
public float width
public float height
}
internal UnityEngine.CSSLayout.CSSWrap : Enum {
public int value__
public CSSWrap NoWrap
public CSSWrap Wrap
}
internal UnityEngine.CSSLayout.LockDictionary`2 : object {
private object _cacheLock
private Dictionary`2<TKey, TValue> _cacheItemDictionary
public void Set(TKey key, TValue value)
public bool TryGetValue(TKey key, TValue& cacheItem)
public bool ContainsKey(TKey key)
public void Remove(TKey key)
}
internal UnityEngine.CSSLayout.MeasureFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public long Invoke(CSSNode node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode)
public IAsyncResult BeginInvoke(CSSNode node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode, AsyncCallback callback, object object)
public long EndInvoke(IAsyncResult result)
}
internal UnityEngine.CSSLayout.MeasureOutput : object {
public long Make(double width, double height)
public long Make(int width, int height)
public int GetWidth(long measureOutput)
public int GetHeight(long measureOutput)
}
internal UnityEngine.CSSLayout.Native : object {
private string DllName
private LockDictionary`2<IntPtr, WeakReference> s_MeasureFunctions
public IntPtr CSSNodeNew()
public void CSSNodeInit(IntPtr cssNode)
public void CSSNodeFree(IntPtr cssNode)
private void CSSNodeFreeInternal(IntPtr cssNode)
public void CSSNodeReset(IntPtr cssNode)
private void CSSNodeResetInternal(IntPtr cssNode)
public int CSSNodeGetInstanceCount()
public void CSSLayoutSetExperimentalFeatureEnabled(CSSExperimentalFeature feature, bool enabled)
public bool CSSLayoutIsExperimentalFeatureEnabled(CSSExperimentalFeature feature)
public void CSSNodeInsertChild(IntPtr node, IntPtr child, UInt32 index)
public void CSSNodeRemoveChild(IntPtr node, IntPtr child)
public IntPtr CSSNodeGetChild(IntPtr node, UInt32 index)
public UInt32 CSSNodeChildCount(IntPtr node)
public void CSSNodeCalculateLayout(IntPtr node, float availableWidth, float availableHeight, CSSDirection parentDirection)
public void CSSNodeMarkDirty(IntPtr node)
public bool CSSNodeIsDirty(IntPtr node)
public void CSSNodePrint(IntPtr node, CSSPrintOptions options)
public bool CSSValueIsUndefined(float value)
public void CSSNodeCopyStyle(IntPtr dstNode, IntPtr srcNode)
public void CSSNodeSetContext(IntPtr node, IntPtr context)
public IntPtr CSSNodeGetContext(IntPtr node)
public void CSSNodeSetMeasureFunc(IntPtr node, CSSMeasureFunc measureFunc)
public CSSMeasureFunc CSSNodeGetMeasureFunc(IntPtr node)
public void CSSNodeMeasureInvoke(IntPtr node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode, IntPtr returnValueAddress)
public void CSSNodeSetHasNewLayout(IntPtr node, bool hasNewLayout)
public bool CSSNodeGetHasNewLayout(IntPtr node)
public void CSSNodeStyleSetDirection(IntPtr node, CSSDirection direction)
public CSSDirection CSSNodeStyleGetDirection(IntPtr node)
public void CSSNodeStyleSetFlexDirection(IntPtr node, CSSFlexDirection flexDirection)
public CSSFlexDirection CSSNodeStyleGetFlexDirection(IntPtr node)
public void CSSNodeStyleSetJustifyContent(IntPtr node, CSSJustify justifyContent)
public CSSJustify CSSNodeStyleGetJustifyContent(IntPtr node)
public void CSSNodeStyleSetAlignContent(IntPtr node, CSSAlign alignContent)
public CSSAlign CSSNodeStyleGetAlignContent(IntPtr node)
public void CSSNodeStyleSetAlignItems(IntPtr node, CSSAlign alignItems)
public CSSAlign CSSNodeStyleGetAlignItems(IntPtr node)
public void CSSNodeStyleSetAlignSelf(IntPtr node, CSSAlign alignSelf)
public CSSAlign CSSNodeStyleGetAlignSelf(IntPtr node)
public void CSSNodeStyleSetPositionType(IntPtr node, CSSPositionType positionType)
public CSSPositionType CSSNodeStyleGetPositionType(IntPtr node)
public void CSSNodeStyleSetFlexWrap(IntPtr node, CSSWrap flexWrap)
public CSSWrap CSSNodeStyleGetFlexWrap(IntPtr node)
public void CSSNodeStyleSetOverflow(IntPtr node, CSSOverflow flexWrap)
public CSSOverflow CSSNodeStyleGetOverflow(IntPtr node)
public void CSSNodeStyleSetFlex(IntPtr node, float flex)
public void CSSNodeStyleSetFlexGrow(IntPtr node, float flexGrow)
public float CSSNodeStyleGetFlexGrow(IntPtr node)
public void CSSNodeStyleSetFlexShrink(IntPtr node, float flexShrink)
public float CSSNodeStyleGetFlexShrink(IntPtr node)
public void CSSNodeStyleSetFlexBasis(IntPtr node, float flexBasis)
public float CSSNodeStyleGetFlexBasis(IntPtr node)
public void CSSNodeStyleSetWidth(IntPtr node, float width)
public float CSSNodeStyleGetWidth(IntPtr node)
public void CSSNodeStyleSetHeight(IntPtr node, float height)
public float CSSNodeStyleGetHeight(IntPtr node)
public void CSSNodeStyleSetMinWidth(IntPtr node, float minWidth)
public float CSSNodeStyleGetMinWidth(IntPtr node)
public void CSSNodeStyleSetMinHeight(IntPtr node, float minHeight)
public float CSSNodeStyleGetMinHeight(IntPtr node)
public void CSSNodeStyleSetMaxWidth(IntPtr node, float maxWidth)
public float CSSNodeStyleGetMaxWidth(IntPtr node)
public void CSSNodeStyleSetMaxHeight(IntPtr node, float maxHeight)
public float CSSNodeStyleGetMaxHeight(IntPtr node)
public void CSSNodeStyleSetAspectRatio(IntPtr node, float aspectRatio)
public float CSSNodeStyleGetAspectRatio(IntPtr node)
public void CSSNodeStyleSetPosition(IntPtr node, CSSEdge edge, float position)
public float CSSNodeStyleGetPosition(IntPtr node, CSSEdge edge)
public void CSSNodeStyleSetMargin(IntPtr node, CSSEdge edge, float margin)
public float CSSNodeStyleGetMargin(IntPtr node, CSSEdge edge)
public void CSSNodeStyleSetPadding(IntPtr node, CSSEdge edge, float padding)
public float CSSNodeStyleGetPadding(IntPtr node, CSSEdge edge)
public void CSSNodeStyleSetBorder(IntPtr node, CSSEdge edge, float border)
public float CSSNodeStyleGetBorder(IntPtr node, CSSEdge edge)
public float CSSNodeLayoutGetLeft(IntPtr node)
public float CSSNodeLayoutGetTop(IntPtr node)
public float CSSNodeLayoutGetRight(IntPtr node)
public float CSSNodeLayoutGetBottom(IntPtr node)
public float CSSNodeLayoutGetWidth(IntPtr node)
public float CSSNodeLayoutGetHeight(IntPtr node)
public CSSDirection CSSNodeLayoutGetDirection(IntPtr node)
}
internal UnityEngine.CSSLayoutCallbacks : object {
public void RegisterWrapper(IntPtr node)
public void UnegisterWrapper(IntPtr node)
}
public UnityEngine.Experimental.UIElements.BaseTextElement : VisualElement {
private string m_Text
public string text
public string get_text()
public void set_text(string value)
public void DoRepaint()
protected internal Vector2 DoMeasure(float width, MeasureMode widthMode, float height, MeasureMode heightMode)
}
internal UnityEngine.Experimental.UIElements.BaseVisualElementPanel : object {
private IStylePainter <stylePainter>k__BackingField
private ICursorManager <cursorManager>k__BackingField
private ContextualMenuManager <contextualMenuManager>k__BackingField
public EventInterests IMGUIEventInterests
public ScriptableObject ownerObject
public SavePersistentViewData savePersistentViewData
public GetViewDataDictionary getViewDataDictionary
public int IMGUIContainersCount
public FocusController focusController
internal IStylePainter stylePainter
internal ICursorManager cursorManager
internal ContextualMenuManager contextualMenuManager
public VisualElement visualTree
public IEventDispatcher dispatcher
internal IScheduler scheduler
internal IDataWatchService dataWatch
public ContextType contextType
public bool keepPixelCacheOnWorldBoundChange
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
public ScriptableObject get_ownerObject()
protected void set_ownerObject(ScriptableObject value)
public SavePersistentViewData get_savePersistentViewData()
public void set_savePersistentViewData(SavePersistentViewData value)
public GetViewDataDictionary get_getViewDataDictionary()
public void set_getViewDataDictionary(GetViewDataDictionary value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
public FocusController get_focusController()
public void set_focusController(FocusController value)
public void Repaint(Event e)
public void ValidateLayout()
internal IStylePainter get_stylePainter()
internal void set_stylePainter(IStylePainter value)
internal ICursorManager get_cursorManager()
internal void set_cursorManager(ICursorManager value)
internal ContextualMenuManager get_contextualMenuManager()
internal void set_contextualMenuManager(ContextualMenuManager value)
public VisualElement get_visualTree()
public IEventDispatcher get_dispatcher()
protected void set_dispatcher(IEventDispatcher value)
internal IScheduler get_scheduler()
internal IDataWatchService get_dataWatch()
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public VisualElement Pick(Vector2 point)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
public VisualElement LoadTemplate(string path, Dictionary`2<string, VisualElement> slots)
public bool get_keepPixelCacheOnWorldBoundChange()
public void set_keepPixelCacheOnWorldBoundChange(bool value)
}
public UnityEngine.Experimental.UIElements.Button : BaseTextElement {
public Clickable clickable
public void .ctor(Action clickEvent)
}
public UnityEngine.Experimental.UIElements.CallbackEventHandler : object {
private EventCallbackRegistry m_CallbackRegistry
public void RegisterCallback(EventCallback`1<TEventType> callback, Capture useCapture)
public void RegisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TUserArgsType userArgs, Capture useCapture)
public void UnregisterCallback(EventCallback`1<TEventType> callback, Capture useCapture)
public void UnregisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, Capture useCapture)
public void HandleEvent(EventBase evt)
public bool HasCaptureHandlers()
public bool HasBubbleHandlers()
protected internal void ExecuteDefaultActionAtTarget(EventBase evt)
protected internal void ExecuteDefaultAction(EventBase evt)
}
internal UnityEngine.Experimental.UIElements.CallbackPhase : Enum {
public int value__
public CallbackPhase TargetAndBubbleUp
public CallbackPhase CaptureAndTarget
}
public UnityEngine.Experimental.UIElements.Capture : Enum {
public int value__
public Capture NoCapture
public Capture Capture
}
public UnityEngine.Experimental.UIElements.ChangeEvent`1 : EventBase`1<ChangeEvent`1<T>> {
private T <previousValue>k__BackingField
private T <newValue>k__BackingField
public T previousValue
public T newValue
public T get_previousValue()
protected void set_previousValue(T value)
public T get_newValue()
protected void set_newValue(T value)
protected void Init()
public ChangeEvent`1<T> GetPooled(T previousValue, T newValue)
}
public UnityEngine.Experimental.UIElements.ChangeType : Enum {
public int value__
public ChangeType PersistentData
public ChangeType PersistentDataPath
public ChangeType Layout
public ChangeType Styles
public ChangeType Transform
public ChangeType StylesPath
public ChangeType Repaint
public ChangeType All
}
internal UnityEngine.Experimental.UIElements.ClampedDragger : Clickable {
private Action dragging
private DragDirection <dragDirection>k__BackingField
private Slider <slider>k__BackingField
private Vector2 <startMousePosition>k__BackingField
public DragDirection dragDirection
private Slider slider
public Vector2 startMousePosition
public Vector2 delta
public void .ctor(Slider slider, Action clickHandler, Action dragHandler)
public void add_dragging(Action value)
public void remove_dragging(Action value)
public DragDirection get_dragDirection()
public void set_dragDirection(DragDirection value)
private Slider get_slider()
private void set_slider(Slider value)
public Vector2 get_startMousePosition()
private void set_startMousePosition(Vector2 value)
public Vector2 get_delta()
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
private void OnMouseDown(MouseDownEvent evt)
private void OnMouseMove(MouseMoveEvent evt)
}
public UnityEngine.Experimental.UIElements.Clickable : MouseManipulator {
private Action clicked
private long m_Delay
private long m_Interval
private Vector2 <lastMousePosition>k__BackingField
private IVisualElementScheduledItem m_Repeater
public Vector2 lastMousePosition
public void .ctor(Action handler, long delay, long interval)
public void .ctor(Action handler)
public void add_clicked(Action value)
public void remove_clicked(Action value)
public Vector2 get_lastMousePosition()
private void set_lastMousePosition(Vector2 value)
private void OnTimer(TimerState timerState)
private bool IsRepeatable()
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
protected void OnMouseDown(MouseDownEvent evt)
protected void OnMouseMove(MouseMoveEvent evt)
protected void OnMouseUp(MouseUpEvent evt)
}
public UnityEngine.Experimental.UIElements.ContextType : Enum {
public int value__
public ContextType Player
public ContextType Editor
}
public UnityEngine.Experimental.UIElements.ContextualMenu : object {
private List`1<MenuItem> menuItems
public List`1<MenuItem> MenuItems()
public void AppendAction(string actionName, Action`1<EventBase> action, Func`2<EventBase, StatusFlags> actionStatusCallback)
public void InsertAction(string actionName, Action`1<EventBase> action, Func`2<EventBase, StatusFlags> actionStatusCallback, int atIndex)
public void AppendSeparator()
public void InsertSeparator(int atIndex)
public void PrepareForDisplay(EventBase e)
}
internal UnityEngine.Experimental.UIElements.ContextualMenuManager : object {
public void DisplayMenuIfEventMatches(EventBase evt, IEventHandler eventHandler)
public void DisplayMenu(EventBase triggerEvent, IEventHandler target)
protected void DoDisplayMenu(ContextualMenu menu, EventBase triggerEvent)
}
internal UnityEngine.Experimental.UIElements.ContextualMenuManipulator : MouseManipulator {
private Action`1<ContextualMenuPopulateEvent> m_MenuBuilder
public void .ctor(Action`1<ContextualMenuPopulateEvent> menuBuilder)
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
private void OnMouseUpEvent(MouseUpEvent evt)
private void OnKeyUpEvent(KeyUpEvent evt)
private void OnContextualMenuEvent(ContextualMenuPopulateEvent evt)
}
public UnityEngine.Experimental.UIElements.ContextualMenuPopulateEvent : MouseEventBase`1<ContextualMenuPopulateEvent> {
private ContextualMenu <menu>k__BackingField
public ContextualMenu menu
public ContextualMenu get_menu()
private void set_menu(ContextualMenu value)
public ContextualMenuPopulateEvent GetPooled(EventBase triggerEvent, ContextualMenu menu, IEventHandler target)
protected void Init()
}
internal UnityEngine.Experimental.UIElements.CoreFactories : object {
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__mg$cache0
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__mg$cache1
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__mg$cache2
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__mg$cache3
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__mg$cache4
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__mg$cache5
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__mg$cache6
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__mg$cache7
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__am$cache0
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__am$cache1
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__am$cache2
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__am$cache3
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__am$cache4
private Func`3<IUxmlAttributes, CreationContext, VisualElement> <>f__am$cache5
internal void RegisterAll()
private VisualElement CreateButton(IUxmlAttributes bag, CreationContext ctx)
private VisualElement CreateTemplate(IUxmlAttributes bag, CreationContext ctx)
private VisualElement CreateIMGUIContainer(IUxmlAttributes bag, CreationContext ctx)
private VisualElement CreateRepeatButton(IUxmlAttributes bag, CreationContext ctx)
private VisualElement CreateScrollerButton(IUxmlAttributes bag, CreationContext ctx)
private VisualElement CreateScroller(IUxmlAttributes bag, CreationContext ctx)
private VisualElement CreateSlider(IUxmlAttributes bag, CreationContext ctx)
private VisualElement CreateToggle(IUxmlAttributes bag, CreationContext ctx)
private VisualElement <RegisterAll>m__0(IUxmlAttributes _, CreationContext __)
private VisualElement <RegisterAll>m__1(IUxmlAttributes _, CreationContext __)
private VisualElement <RegisterAll>m__2(IUxmlAttributes _, CreationContext __)
private VisualElement <RegisterAll>m__3(IUxmlAttributes _, CreationContext __)
private VisualElement <RegisterAll>m__4(IUxmlAttributes _, CreationContext __)
private VisualElement <RegisterAll>m__5(IUxmlAttributes _, CreationContext __)
}
public UnityEngine.Experimental.UIElements.CreationContext : ValueType {
public CreationContext Default
private VisualElement <target>k__BackingField
private VisualTreeAsset <visualTreeAsset>k__BackingField
private Dictionary`2<string, VisualElement> <slotInsertionPoints>k__BackingField
public VisualElement target
public VisualTreeAsset visualTreeAsset
public Dictionary`2<string, VisualElement> slotInsertionPoints
internal void .ctor(Dictionary`2<string, VisualElement> slotInsertionPoints, VisualTreeAsset vta, VisualElement target)
public VisualElement get_target()
private void set_target(VisualElement value)
public VisualTreeAsset get_visualTreeAsset()
private void set_visualTreeAsset(VisualTreeAsset value)
public Dictionary`2<string, VisualElement> get_slotInsertionPoints()
private void set_slotInsertionPoints(Dictionary`2<string, VisualElement> value)
}
internal UnityEngine.Experimental.UIElements.CursorManager : object {
public void SetCursor(CursorStyle cursor)
public void ResetCursor()
}
public UnityEngine.Experimental.UIElements.CursorStyle : ValueType {
private Texture2D <texture>k__BackingField
private Vector2 <hotspot>k__BackingField
private int <defaultCursorId>k__BackingField
public Texture2D texture
public Vector2 hotspot
internal int defaultCursorId
public Texture2D get_texture()
public void set_texture(Texture2D value)
public Vector2 get_hotspot()
public void set_hotspot(Vector2 value)
internal int get_defaultCursorId()
internal void set_defaultCursorId(int value)
public int GetHashCode()
public bool Equals(object other)
public bool op_Equality(CursorStyle lhs, CursorStyle rhs)
public bool op_Inequality(CursorStyle lhs, CursorStyle rhs)
}
public UnityEngine.Experimental.UIElements.EventBase : object {
private long s_LastTypeId
private long <timestamp>k__BackingField
private EventFlags <flags>k__BackingField
private IEventHandler <target>k__BackingField
private bool <isPropagationStopped>k__BackingField
private bool <isImmediatePropagationStopped>k__BackingField
private bool <isDefaultPrevented>k__BackingField
private PropagationPhase <propagationPhase>k__BackingField
protected IEventHandler m_CurrentTarget
private bool <dispatch>k__BackingField
private Event m_ImguiEvent
private Vector2 m_OriginalMousePosition
public long timestamp
protected EventFlags flags
public bool bubbles
public bool capturable
public IEventHandler target
public bool isPropagationStopped
public bool isImmediatePropagationStopped
public bool isDefaultPrevented
public PropagationPhase propagationPhase
public IEventHandler currentTarget
public bool dispatch
public Event imguiEvent
public Vector2 originalMousePosition
protected long RegisterEventType()
public long GetEventTypeId()
public long get_timestamp()
private void set_timestamp(long value)
protected EventFlags get_flags()
protected void set_flags(EventFlags value)
public bool get_bubbles()
public bool get_capturable()
public IEventHandler get_target()
internal void set_target(IEventHandler value)
public bool get_isPropagationStopped()
private void set_isPropagationStopped(bool value)
public void StopPropagation()
public bool get_isImmediatePropagationStopped()
private void set_isImmediatePropagationStopped(bool value)
public void StopImmediatePropagation()
public bool get_isDefaultPrevented()
private void set_isDefaultPrevented(bool value)
public void PreventDefault()
public PropagationPhase get_propagationPhase()
internal void set_propagationPhase(PropagationPhase value)
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
public bool get_dispatch()
internal void set_dispatch(bool value)
public Event get_imguiEvent()
protected void set_imguiEvent(Event value)
public Vector2 get_originalMousePosition()
private void set_originalMousePosition(Vector2 value)
protected void Init()
public void Dispose()
}
public UnityEngine.Experimental.UIElements.EventBase`1 : EventBase {
private long s_TypeId
private EventPool`1<T> s_Pool
public long TypeId()
public T GetPooled()
protected void ReleasePooled(T evt)
public void Dispose()
public long GetEventTypeId()
}
public UnityEngine.Experimental.UIElements.EventCallback`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(TEventType evt)
public IAsyncResult BeginInvoke(TEventType evt, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.Experimental.UIElements.EventCallback`2 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(TEventType evt, TCallbackArgs userArgs)
public IAsyncResult BeginInvoke(TEventType evt, TCallbackArgs userArgs, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.EventCallbackFunctor`1 : EventCallbackFunctorBase {
private EventCallback`1<TEventType> m_Callback
private long m_EventTypeId
public void .ctor(EventCallback`1<TEventType> callback, CallbackPhase phase)
public void Invoke(EventBase evt)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
}
internal UnityEngine.Experimental.UIElements.EventCallbackFunctor`2 : EventCallbackFunctorBase {
private EventCallback`2<TEventType, TCallbackArgs> m_Callback
private TCallbackArgs m_UserArgs
private long m_EventTypeId
public void .ctor(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, CallbackPhase phase)
public void Invoke(EventBase evt)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
}
internal UnityEngine.Experimental.UIElements.EventCallbackFunctorBase : object {
private CallbackPhase <phase>k__BackingField
public CallbackPhase phase
protected void .ctor(CallbackPhase phase)
public CallbackPhase get_phase()
private void set_phase(CallbackPhase value)
public void Invoke(EventBase evt)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
protected bool PhaseMatches(EventBase evt)
}
internal UnityEngine.Experimental.UIElements.EventCallbackList : object {
private List`1<EventCallbackFunctorBase> m_List
private int <capturingCallbackCount>k__BackingField
private int <bubblingCallbackCount>k__BackingField
public int capturingCallbackCount
public int bubblingCallbackCount
public int Count
public EventCallbackFunctorBase Item
public void .ctor(EventCallbackList source)
public int get_capturingCallbackCount()
private void set_capturingCallbackCount(int value)
public int get_bubblingCallbackCount()
private void set_bubblingCallbackCount(int value)
public bool Contains(long eventTypeId, Delegate callback, CallbackPhase phase)
public bool Remove(long eventTypeId, Delegate callback, CallbackPhase phase)
public void Add(EventCallbackFunctorBase item)
public void AddRange(EventCallbackList list)
public int get_Count()
public EventCallbackFunctorBase get_Item(int i)
public void set_Item(int i, EventCallbackFunctorBase value)
public void Clear()
}
internal UnityEngine.Experimental.UIElements.EventCallbackListPool : object {
private Stack`1<EventCallbackList> m_Stack
public EventCallbackList Get(EventCallbackList initializer)
public void Release(EventCallbackList element)
}
internal UnityEngine.Experimental.UIElements.EventCallbackRegistry : object {
private EventCallbackListPool s_ListPool
private EventCallbackList m_Callbacks
private EventCallbackList m_TemporaryCallbacks
private int m_IsInvoking
private EventCallbackList GetCallbackList(EventCallbackList initializer)
private void ReleaseCallbackList(EventCallbackList toRelease)
private EventCallbackList GetCallbackListForWriting()
private EventCallbackList GetCallbackListForReading()
private bool ShouldRegisterCallback(long eventTypeId, Delegate callback, CallbackPhase phase)
private bool UnregisterCallback(long eventTypeId, Delegate callback, Capture useCapture)
public void RegisterCallback(EventCallback`1<TEventType> callback, Capture useCapture)
public void RegisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, Capture useCapture)
public bool UnregisterCallback(EventCallback`1<TEventType> callback, Capture useCapture)
public bool UnregisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, Capture useCapture)
public void InvokeCallbacks(EventBase evt)
public bool HasCaptureHandlers()
public bool HasBubbleHandlers()
}
internal UnityEngine.Experimental.UIElements.EventDispatcher : object {
private VisualElement m_TopElementUnderMouse
private int k_DefaultPropagationDepth
private void DispatchMouseEnterMouseLeave(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, Event triggerEvent)
private void DispatchMouseOverMouseOut(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, Event triggerEvent)
public void DispatchEvent(EventBase evt, IPanel panel)
private void PropagateToIMGUIContainer(VisualElement root, EventBase evt, VisualElement capture)
private void PropagateEvent(EventBase evt)
private void ExecuteDefaultAction(EventBase evt)
private PropagationPaths BuildPropagationPath(VisualElement elem, Type pathTypesRequested)
}
internal UnityEngine.Experimental.UIElements.EventPool`1 : object {
private Stack`1<T> m_Stack
public T Get()
public void Release(T element)
}
public UnityEngine.Experimental.UIElements.EventPropagation : Enum {
public int value__
public EventPropagation Continue
public EventPropagation Stop
}
internal UnityEngine.Experimental.UIElements.Factories : object {
private Dictionary`2<string, Func`3<IUxmlAttributes, CreationContext, VisualElement>> s_Factories
internal void RegisterFactory(string fullTypeName, Func`3<IUxmlAttributes, CreationContext, VisualElement> factory)
internal void RegisterFactory(Func`3<IUxmlAttributes, CreationContext, VisualElement> factory)
private void DiscoverFactories()
internal bool TryGetValue(string fullTypeName, Func`3& factory)
}
public UnityEngine.Experimental.UIElements.Focusable : CallbackEventHandler {
private int m_FocusIndex
public FocusController focusController
public int focusIndex
public bool canGrabFocus
public FocusController get_focusController()
public int get_focusIndex()
public void set_focusIndex(int value)
public bool get_canGrabFocus()
public void Focus()
public void Blur()
protected internal void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.Experimental.UIElements.FocusChangeDirection : object {
private FocusChangeDirection s_Unspecified
private FocusChangeDirection s_None
private int m_Value
public FocusChangeDirection unspecified
public FocusChangeDirection none
protected FocusChangeDirection lastValue
protected void .ctor(int value)
public FocusChangeDirection get_unspecified()
public FocusChangeDirection get_none()
protected FocusChangeDirection get_lastValue()
public int op_Implicit(FocusChangeDirection fcd)
}
public UnityEngine.Experimental.UIElements.FocusController : object {
private IFocusRing <focusRing>k__BackingField
private Focusable <focusedElement>k__BackingField
private int <imguiKeyboardControl>k__BackingField
private IFocusRing focusRing
public Focusable focusedElement
internal int imguiKeyboardControl
public void .ctor(IFocusRing focusRing)
private IFocusRing get_focusRing()
private void set_focusRing(IFocusRing value)
public Focusable get_focusedElement()
private void set_focusedElement(Focusable value)
private void AboutToReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction)
private void ReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction)
private void AboutToGrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction)
private void GrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction)
internal void SwitchFocus(Focusable newFocusedElement)
private void SwitchFocus(Focusable newFocusedElement, FocusChangeDirection direction)
public void SwitchFocusOnEvent(EventBase e)
internal int get_imguiKeyboardControl()
internal void set_imguiKeyboardControl(int value)
internal void SyncIMGUIFocus(int imguiKeyboardControlID, IMGUIContainer imguiContainerHavingKeyboardControl)
}
public UnityEngine.Experimental.UIElements.FocusEventBase`1 : EventBase`1<T> {
private Focusable <relatedTarget>k__BackingField
private FocusChangeDirection <direction>k__BackingField
public Focusable relatedTarget
public FocusChangeDirection direction
public Focusable get_relatedTarget()
protected void set_relatedTarget(Focusable value)
public FocusChangeDirection get_direction()
protected void set_direction(FocusChangeDirection value)
protected void Init()
public T GetPooled(IEventHandler target, Focusable relatedTarget, FocusChangeDirection direction)
}
public UnityEngine.Experimental.UIElements.FocusInEvent : FocusEventBase`1<FocusInEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.FocusOutEvent : FocusEventBase`1<FocusOutEvent> {
protected void Init()
}
internal UnityEngine.Experimental.UIElements.GetViewDataDictionary : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ISerializableJsonDictionary Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public ISerializableJsonDictionary EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.ICursorManager {
public void SetCursor(CursorStyle cursor)
public void ResetCursor()
}
public UnityEngine.Experimental.UIElements.IDataWatchHandle {
public Object watched
public bool disposed
public Object get_watched()
public bool get_disposed()
}
internal UnityEngine.Experimental.UIElements.IDataWatchService {
public IDataWatchHandle AddWatch(Object watched, Action`1<Object> onDataChanged)
public void RemoveWatch(IDataWatchHandle handle)
public void ForceDirtyNextPoll(Object obj)
}
public UnityEngine.Experimental.UIElements.IEventDispatcher {
public void DispatchEvent(EventBase evt, IPanel panel)
}
public UnityEngine.Experimental.UIElements.IEventHandler {
public void HandleEvent(EventBase evt)
public bool HasCaptureHandlers()
public bool HasBubbleHandlers()
}
public UnityEngine.Experimental.UIElements.IFocusEvent {
public Focusable relatedTarget
public FocusChangeDirection direction
public Focusable get_relatedTarget()
public FocusChangeDirection get_direction()
}
public UnityEngine.Experimental.UIElements.IFocusRing {
public FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e)
public Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction)
}
public UnityEngine.Experimental.UIElements.IKeyboardEvent {
public EventModifiers modifiers
public char character
public KeyCode keyCode
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public EventModifiers get_modifiers()
public char get_character()
public KeyCode get_keyCode()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
}
public UnityEngine.Experimental.UIElements.Image : VisualElement {
private StyleValue`1<int> m_ScaleMode
private StyleValue`1<Texture> m_Image
private Rect m_UV
public StyleValue`1<Texture> image
public Rect sourceRect
public Rect uv
public StyleValue`1<ScaleMode> scaleMode
public StyleValue`1<Texture> get_image()
public void set_image(StyleValue`1<Texture> value)
public Rect get_sourceRect()
public void set_sourceRect(Rect value)
public Rect get_uv()
public void set_uv(Rect value)
public StyleValue`1<ScaleMode> get_scaleMode()
public void set_scaleMode(StyleValue`1<ScaleMode> value)
protected internal Vector2 DoMeasure(float width, MeasureMode widthMode, float height, MeasureMode heightMode)
internal void DoRepaint(IStylePainter painter)
protected void OnStyleResolved(ICustomStyle elementStyle)
private void CalculateUV(Rect srcRect)
private Rect GetSourceRect()
}
public UnityEngine.Experimental.UIElements.IManipulator {
public VisualElement target
public VisualElement get_target()
public void set_target(VisualElement value)
}
public UnityEngine.Experimental.UIElements.IMGUIContainer : VisualElement {
private Action m_OnGUIHandler
private ObjectGUIState m_ObjectGUIState
internal bool useOwnerObjectGUIState
private Rect <lastWorldClip>k__BackingField
private LayoutCache m_Cache
private ContextType <contextType>k__BackingField
private int <GUIDepth>k__BackingField
private bool lostFocus
private bool receivedFocus
private FocusChangeDirection focusChangeDirection
private bool hasFocusableControls
private int newKeyboardFocusControlID
private GUIGlobals m_GUIGlobals
internal ObjectGUIState guiState
internal Rect lastWorldClip
private LayoutCache cache
public ContextType contextType
internal int GUIDepth
public bool canGrabFocus
public void .ctor(Action onGUIHandler)
internal ObjectGUIState get_guiState()
internal Rect get_lastWorldClip()
internal void set_lastWorldClip(Rect value)
private LayoutCache get_cache()
public ContextType get_contextType()
public void set_contextType(ContextType value)
internal int get_GUIDepth()
private void set_GUIDepth(int value)
public bool get_canGrabFocus()
internal void DoRepaint(IStylePainter painter)
internal void ChangePanel(BaseVisualElementPanel p)
private void SaveGlobals()
private void RestoreGlobals()
private void DoOnGUI(Event evt)
public void HandleEvent(EventBase evt)
internal bool HandleIMGUIEvent(Event e)
protected internal void ExecuteDefaultAction(EventBase evt)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
private void GetCurrentTransformAndClip(IMGUIContainer container, Event evt, Matrix4x4& transform, Rect& clipRect)
}
public UnityEngine.Experimental.UIElements.IMGUIEvent : EventBase`1<IMGUIEvent> {
public IMGUIEvent GetPooled(Event systemEvent)
protected void Init()
}
public UnityEngine.Experimental.UIElements.IMouseEvent {
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
public Vector2 mouseDelta
public int clickCount
public int button
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public EventModifiers get_modifiers()
public Vector2 get_mousePosition()
public Vector2 get_localMousePosition()
public Vector2 get_mouseDelta()
public int get_clickCount()
public int get_button()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
}
public UnityEngine.Experimental.UIElements.INotifyValueChanged`1 {
public T value
public T get_value()
public void set_value(T value)
public void SetValueAndNotify(T newValue)
public void OnValueChanged(EventCallback`1<ChangeEvent`1<T>> callback)
}
public UnityEngine.Experimental.UIElements.InputEvent : EventBase`1<InputEvent> {
private string <previousData>k__BackingField
private string <newData>k__BackingField
public string previousData
public string newData
public string get_previousData()
protected void set_previousData(string value)
public string get_newData()
protected void set_newData(string value)
protected void Init()
public InputEvent GetPooled(string previousData, string newData)
}
public UnityEngine.Experimental.UIElements.IPanel {
public VisualElement visualTree
public IEventDispatcher dispatcher
public ContextType contextType
public FocusController focusController
public VisualElement get_visualTree()
public IEventDispatcher get_dispatcher()
public ContextType get_contextType()
public FocusController get_focusController()
public VisualElement Pick(Vector2 point)
public VisualElement LoadTemplate(string path, Dictionary`2<string, VisualElement> slots)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
}
public UnityEngine.Experimental.UIElements.IScheduler {
public IScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs)
public IScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition)
public IScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs)
public void Unschedule(IScheduledItem item)
public void Schedule(IScheduledItem item)
}
internal UnityEngine.Experimental.UIElements.ISerializableJsonDictionary {
public void Set(string key, T value)
public T Get(string key)
public T GetScriptable(string key)
public void Overwrite(object obj, string key)
public bool ContainsKey(string key)
public void OnBeforeSerialize()
public void OnAfterDeserialize()
}
public UnityEngine.Experimental.UIElements.IStyle {
public StyleValue`1<float> width
public StyleValue`1<float> height
public StyleValue`1<float> maxWidth
public StyleValue`1<float> maxHeight
public StyleValue`1<float> minWidth
public StyleValue`1<float> minHeight
public StyleValue`1<float> flex
public StyleValue`1<float> flexBasis
public StyleValue`1<float> flexGrow
public StyleValue`1<float> flexShrink
public StyleValue`1<FlexDirection> flexDirection
public StyleValue`1<Wrap> flexWrap
public StyleValue`1<Overflow> overflow
public StyleValue`1<float> positionLeft
public StyleValue`1<float> positionTop
public StyleValue`1<float> positionRight
public StyleValue`1<float> positionBottom
public StyleValue`1<float> marginLeft
public StyleValue`1<float> marginTop
public StyleValue`1<float> marginRight
public StyleValue`1<float> marginBottom
public StyleValue`1<float> borderLeft
public StyleValue`1<float> borderTop
public StyleValue`1<float> borderRight
public StyleValue`1<float> borderBottom
public StyleValue`1<float> paddingLeft
public StyleValue`1<float> paddingTop
public StyleValue`1<float> paddingRight
public StyleValue`1<float> paddingBottom
public StyleValue`1<PositionType> positionType
public StyleValue`1<Align> alignSelf
public StyleValue`1<TextAnchor> textAlignment
public StyleValue`1<FontStyle> fontStyle
public StyleValue`1<TextClipping> textClipping
public StyleValue`1<Font> font
public StyleValue`1<int> fontSize
public StyleValue`1<bool> wordWrap
public StyleValue`1<Color> textColor
public StyleValue`1<Color> backgroundColor
public StyleValue`1<Color> borderColor
public StyleValue`1<Texture2D> backgroundImage
public StyleValue`1<ScaleMode> backgroundSize
public StyleValue`1<Align> alignItems
public StyleValue`1<Align> alignContent
public StyleValue`1<Justify> justifyContent
public StyleValue`1<float> borderLeftWidth
public StyleValue`1<float> borderTopWidth
public StyleValue`1<float> borderRightWidth
public StyleValue`1<float> borderBottomWidth
public StyleValue`1<float> borderRadius
public StyleValue`1<float> borderTopLeftRadius
public StyleValue`1<float> borderTopRightRadius
public StyleValue`1<float> borderBottomRightRadius
public StyleValue`1<float> borderBottomLeftRadius
public StyleValue`1<int> sliceLeft
public StyleValue`1<int> sliceTop
public StyleValue`1<int> sliceRight
public StyleValue`1<int> sliceBottom
public StyleValue`1<float> opacity
public StyleValue`1<CursorStyle> cursor
public StyleValue`1<float> get_width()
public void set_width(StyleValue`1<float> value)
public StyleValue`1<float> get_height()
public void set_height(StyleValue`1<float> value)
public StyleValue`1<float> get_maxWidth()
public void set_maxWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_maxHeight()
public void set_maxHeight(StyleValue`1<float> value)
public StyleValue`1<float> get_minWidth()
public void set_minWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_minHeight()
public void set_minHeight(StyleValue`1<float> value)
public StyleValue`1<float> get_flex()
public void set_flex(StyleValue`1<float> value)
public StyleValue`1<float> get_flexBasis()
public void set_flexBasis(StyleValue`1<float> value)
public StyleValue`1<float> get_flexGrow()
public void set_flexGrow(StyleValue`1<float> value)
public StyleValue`1<float> get_flexShrink()
public void set_flexShrink(StyleValue`1<float> value)
public StyleValue`1<FlexDirection> get_flexDirection()
public void set_flexDirection(StyleValue`1<FlexDirection> value)
public StyleValue`1<Wrap> get_flexWrap()
public void set_flexWrap(StyleValue`1<Wrap> value)
public StyleValue`1<Overflow> get_overflow()
public void set_overflow(StyleValue`1<Overflow> value)
public StyleValue`1<float> get_positionLeft()
public void set_positionLeft(StyleValue`1<float> value)
public StyleValue`1<float> get_positionTop()
public void set_positionTop(StyleValue`1<float> value)
public StyleValue`1<float> get_positionRight()
public void set_positionRight(StyleValue`1<float> value)
public StyleValue`1<float> get_positionBottom()
public void set_positionBottom(StyleValue`1<float> value)
public StyleValue`1<float> get_marginLeft()
public void set_marginLeft(StyleValue`1<float> value)
public StyleValue`1<float> get_marginTop()
public void set_marginTop(StyleValue`1<float> value)
public StyleValue`1<float> get_marginRight()
public void set_marginRight(StyleValue`1<float> value)
public StyleValue`1<float> get_marginBottom()
public void set_marginBottom(StyleValue`1<float> value)
public StyleValue`1<float> get_borderLeft()
public void set_borderLeft(StyleValue`1<float> value)
public StyleValue`1<float> get_borderTop()
public void set_borderTop(StyleValue`1<float> value)
public StyleValue`1<float> get_borderRight()
public void set_borderRight(StyleValue`1<float> value)
public StyleValue`1<float> get_borderBottom()
public void set_borderBottom(StyleValue`1<float> value)
public StyleValue`1<float> get_paddingLeft()
public void set_paddingLeft(StyleValue`1<float> value)
public StyleValue`1<float> get_paddingTop()
public void set_paddingTop(StyleValue`1<float> value)
public StyleValue`1<float> get_paddingRight()
public void set_paddingRight(StyleValue`1<float> value)
public StyleValue`1<float> get_paddingBottom()
public void set_paddingBottom(StyleValue`1<float> value)
public StyleValue`1<PositionType> get_positionType()
public void set_positionType(StyleValue`1<PositionType> value)
public StyleValue`1<Align> get_alignSelf()
public void set_alignSelf(StyleValue`1<Align> value)
public StyleValue`1<TextAnchor> get_textAlignment()
public void set_textAlignment(StyleValue`1<TextAnchor> value)
public StyleValue`1<FontStyle> get_fontStyle()
public void set_fontStyle(StyleValue`1<FontStyle> value)
public StyleValue`1<TextClipping> get_textClipping()
public void set_textClipping(StyleValue`1<TextClipping> value)
public StyleValue`1<Font> get_font()
public void set_font(StyleValue`1<Font> value)
public StyleValue`1<int> get_fontSize()
public void set_fontSize(StyleValue`1<int> value)
public StyleValue`1<bool> get_wordWrap()
public void set_wordWrap(StyleValue`1<bool> value)
public StyleValue`1<Color> get_textColor()
public void set_textColor(StyleValue`1<Color> value)
public StyleValue`1<Color> get_backgroundColor()
public void set_backgroundColor(StyleValue`1<Color> value)
public StyleValue`1<Color> get_borderColor()
public void set_borderColor(StyleValue`1<Color> value)
public StyleValue`1<Texture2D> get_backgroundImage()
public void set_backgroundImage(StyleValue`1<Texture2D> value)
public StyleValue`1<ScaleMode> get_backgroundSize()
public void set_backgroundSize(StyleValue`1<ScaleMode> value)
public StyleValue`1<Align> get_alignItems()
public void set_alignItems(StyleValue`1<Align> value)
public StyleValue`1<Align> get_alignContent()
public void set_alignContent(StyleValue`1<Align> value)
public StyleValue`1<Justify> get_justifyContent()
public void set_justifyContent(StyleValue`1<Justify> value)
public StyleValue`1<float> get_borderLeftWidth()
public void set_borderLeftWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_borderTopWidth()
public void set_borderTopWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_borderRightWidth()
public void set_borderRightWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_borderBottomWidth()
public void set_borderBottomWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_borderRadius()
public void set_borderRadius(StyleValue`1<float> value)
public StyleValue`1<float> get_borderTopLeftRadius()
public void set_borderTopLeftRadius(StyleValue`1<float> value)
public StyleValue`1<float> get_borderTopRightRadius()
public void set_borderTopRightRadius(StyleValue`1<float> value)
public StyleValue`1<float> get_borderBottomRightRadius()
public void set_borderBottomRightRadius(StyleValue`1<float> value)
public StyleValue`1<float> get_borderBottomLeftRadius()
public void set_borderBottomLeftRadius(StyleValue`1<float> value)
public StyleValue`1<int> get_sliceLeft()
public void set_sliceLeft(StyleValue`1<int> value)
public StyleValue`1<int> get_sliceTop()
public void set_sliceTop(StyleValue`1<int> value)
public StyleValue`1<int> get_sliceRight()
public void set_sliceRight(StyleValue`1<int> value)
public StyleValue`1<int> get_sliceBottom()
public void set_sliceBottom(StyleValue`1<int> value)
public StyleValue`1<float> get_opacity()
public void set_opacity(StyleValue`1<float> value)
public StyleValue`1<CursorStyle> get_cursor()
public void set_cursor(StyleValue`1<CursorStyle> value)
}
public UnityEngine.Experimental.UIElements.ITransform {
public Vector3 position
public Quaternion rotation
public Vector3 scale
public Matrix4x4 matrix
public Vector3 get_position()
public void set_position(Vector3 value)
public Quaternion get_rotation()
public void set_rotation(Quaternion value)
public Vector3 get_scale()
public void set_scale(Vector3 value)
public Matrix4x4 get_matrix()
}
public UnityEngine.Experimental.UIElements.IUIElementDataWatch {
public IUIElementDataWatchRequest RegisterWatch(Object toWatch, Action`1<Object> watchNotification)
public void UnregisterWatch(IUIElementDataWatchRequest requested)
}
public UnityEngine.Experimental.UIElements.IUxmlAttributes {
public string GetPropertyString(string propertyName)
public long GetPropertyLong(string propertyName, long defaultValue)
public float GetPropertyFloat(string propertyName, float def)
public int GetPropertyInt(string propertyName, int def)
public bool GetPropertyBool(string propertyName, bool def)
public Color GetPropertyColor(string propertyName, Color def)
public T GetPropertyEnum(string propertyName, T def)
}
internal UnityEngine.Experimental.UIElements.IUxmlFactory {
public Type CreatesType
public Type get_CreatesType()
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
internal UnityEngine.Experimental.UIElements.IVisualElementPanelActivatable {
public VisualElement element
public VisualElement get_element()
public bool CanBeActivated()
public void OnPanelActivate()
public void OnPanelDeactivate()
}
public UnityEngine.Experimental.UIElements.IVisualElementScheduledItem {
public VisualElement element
public bool isActive
public VisualElement get_element()
public bool get_isActive()
public void Resume()
public void Pause()
public void ExecuteLater(long delayMs)
public IVisualElementScheduledItem StartingIn(long delayMs)
public IVisualElementScheduledItem Every(long intervalMs)
public IVisualElementScheduledItem Until(Func`1<bool> stopCondition)
public IVisualElementScheduledItem ForDuration(long durationMs)
}
public UnityEngine.Experimental.UIElements.IVisualElementScheduler {
public IVisualElementScheduledItem Execute(Action`1<TimerState> timerUpdateEvent)
public IVisualElementScheduledItem Execute(Action updateEvent)
}
internal UnityEngine.Experimental.UIElements.KeyboardEventArgs : ValueType {
private EventModifiers m_Modifiers
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
public char character
public KeyCode keyCode
public bool shift
public bool alt
public void .ctor(char character, KeyCode keyCode, EventModifiers modifiers)
public char get_character()
private void set_character(char value)
public KeyCode get_keyCode()
private void set_keyCode(KeyCode value)
public bool get_shift()
public bool get_alt()
public Event ToEvent()
}
public UnityEngine.Experimental.UIElements.KeyboardEventBase`1 : EventBase`1<T> {
private EventModifiers <modifiers>k__BackingField
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
public EventModifiers modifiers
public char character
public KeyCode keyCode
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public char get_character()
protected void set_character(char value)
public KeyCode get_keyCode()
protected void set_keyCode(KeyCode value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
protected void Init()
public T GetPooled(char c, KeyCode keyCode, EventModifiers modifiers)
public T GetPooled(Event systemEvent)
}
internal UnityEngine.Experimental.UIElements.KeyboardTextEditorEventHandler : TextEditorEventHandler {
internal bool m_Changed
private bool m_Dragged
private bool m_DragToPosition
private bool m_PostponeMove
private bool m_SelectAllOnMouseUp
private string m_PreDrawCursorText
public void .ctor(TextEditorEngine editorEngine, TextInputFieldBase textInputField)
public void ExecuteDefaultActionAtTarget(EventBase evt)
private void OnMouseDown(MouseDownEvent evt)
private void OnMouseUp(MouseUpEvent evt)
private void OnMouseMove(MouseMoveEvent evt)
private void OnKeyDown(KeyDownEvent evt)
private void OnIMGUIEvent(IMGUIEvent evt)
public void PreDrawCursor(string newText)
public void PostDrawCursor()
}
public UnityEngine.Experimental.UIElements.Label : BaseTextElement {
public void .ctor(string text)
}
internal UnityEngine.Experimental.UIElements.LoadResourceFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Object Invoke(string pathName, Type type)
public IAsyncResult BeginInvoke(string pathName, Type type, AsyncCallback callback, object object)
public Object EndInvoke(IAsyncResult result)
}
public UnityEngine.Experimental.UIElements.Manipulator : object {
private VisualElement m_Target
public VisualElement target
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
public VisualElement get_target()
public void set_target(VisualElement value)
}
public UnityEngine.Experimental.UIElements.ManipulatorActivationFilter : ValueType {
public MouseButton button
public EventModifiers modifiers
public int clickCount
public bool Matches(IMouseEvent e)
private bool HasModifiers(IMouseEvent e)
}
public UnityEngine.Experimental.UIElements.MouseButton : Enum {
public int value__
public MouseButton LeftMouse
public MouseButton RightMouse
public MouseButton MiddleMouse
}
public UnityEngine.Experimental.UIElements.MouseCaptureController : object {
private IEventHandler <mouseCapture>k__BackingField
internal IEventHandler mouseCapture
internal IEventHandler get_mouseCapture()
private void set_mouseCapture(IEventHandler value)
public bool IsMouseCaptureTaken()
public bool HasMouseCapture(IEventHandler handler)
public void TakeMouseCapture(IEventHandler handler)
public void ReleaseMouseCapture(IEventHandler handler)
public void ReleaseMouseCapture()
}
public UnityEngine.Experimental.UIElements.MouseCaptureEventBase`1 : EventBase`1<T> {
protected void Init()
public T GetPooled(IEventHandler target)
}
public UnityEngine.Experimental.UIElements.MouseEnterEvent : MouseEventBase`1<MouseEnterEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.MouseEnterWindowEvent : MouseEventBase`1<MouseEnterWindowEvent> {
protected void Init()
}
internal UnityEngine.Experimental.UIElements.MouseEventArgs : ValueType {
private EventModifiers m_Modifiers
private Vector2 <mousePosition>k__BackingField
private int <clickCount>k__BackingField
public Vector2 mousePosition
public int clickCount
public bool shift
public void .ctor(Vector2 pos, int clickCount, EventModifiers modifiers)
public Vector2 get_mousePosition()
private void set_mousePosition(Vector2 value)
public int get_clickCount()
private void set_clickCount(int value)
public bool get_shift()
}
public UnityEngine.Experimental.UIElements.MouseEventBase`1 : EventBase`1<T> {
private EventModifiers <modifiers>k__BackingField
private Vector2 <mousePosition>k__BackingField
private Vector2 <localMousePosition>k__BackingField
private Vector2 <mouseDelta>k__BackingField
private int <clickCount>k__BackingField
private int <button>k__BackingField
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
public Vector2 mouseDelta
public int clickCount
public int button
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public IEventHandler currentTarget
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public Vector2 get_mousePosition()
protected void set_mousePosition(Vector2 value)
public Vector2 get_localMousePosition()
internal void set_localMousePosition(Vector2 value)
public Vector2 get_mouseDelta()
protected void set_mouseDelta(Vector2 value)
public int get_clickCount()
protected void set_clickCount(int value)
public int get_button()
protected void set_button(int value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
protected void Init()
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
public T GetPooled(Event systemEvent)
public T GetPooled(IMouseEvent triggerEvent)
}
public UnityEngine.Experimental.UIElements.MouseLeaveEvent : MouseEventBase`1<MouseLeaveEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.MouseLeaveWindowEvent : MouseEventBase`1<MouseLeaveWindowEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.MouseManipulator : Manipulator {
private List`1<ManipulatorActivationFilter> <activators>k__BackingField
private ManipulatorActivationFilter m_currentActivator
public List`1<ManipulatorActivationFilter> activators
public List`1<ManipulatorActivationFilter> get_activators()
private void set_activators(List`1<ManipulatorActivationFilter> value)
protected bool CanStartManipulation(IMouseEvent e)
protected bool CanStopManipulation(IMouseEvent e)
}
internal UnityEngine.Experimental.UIElements.OnStylesResolved : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ICustomStyle styles)
public IAsyncResult BeginInvoke(ICustomStyle styles, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.Panel : BaseVisualElementPanel {
private StyleContext m_StyleContext
private VisualElement m_RootContainer
private IEventDispatcher <dispatcher>k__BackingField
private IDataWatchService m_DataWatch
private TimerEventScheduler m_Scheduler
private ScriptableObject <ownerObject>k__BackingField
private bool <allowPixelCaching>k__BackingField
private ContextType <contextType>k__BackingField
private SavePersistentViewData <savePersistentViewData>k__BackingField
private GetViewDataDictionary <getViewDataDictionary>k__BackingField
private FocusController <focusController>k__BackingField
private EventInterests <IMGUIEventInterests>k__BackingField
internal LoadResourceFunction loadResourceFunc
private TimeMsFunction s_TimeSinceStartup
private bool m_KeepPixelCacheOnWorldBoundChange
private int <IMGUIContainersCount>k__BackingField
private int kMaxValidatePersistentDataCount
private int kMaxValidateLayoutCount
private TimeMsFunction <>f__mg$cache0
public VisualElement visualTree
public IEventDispatcher dispatcher
internal IDataWatchService dataWatch
public TimerEventScheduler timerEventScheduler
internal IScheduler scheduler
internal StyleContext styleContext
public ScriptableObject ownerObject
public bool allowPixelCaching
public ContextType contextType
public SavePersistentViewData savePersistentViewData
public GetViewDataDictionary getViewDataDictionary
public FocusController focusController
public EventInterests IMGUIEventInterests
internal TimeMsFunction TimeSinceStartup
public bool keepPixelCacheOnWorldBoundChange
public int IMGUIContainersCount
public void .ctor(ScriptableObject ownerObject, ContextType contextType, IDataWatchService dataWatch, IEventDispatcher dispatcher)
public VisualElement get_visualTree()
public IEventDispatcher get_dispatcher()
protected void set_dispatcher(IEventDispatcher value)
internal IDataWatchService get_dataWatch()
public TimerEventScheduler get_timerEventScheduler()
internal IScheduler get_scheduler()
internal StyleContext get_styleContext()
public ScriptableObject get_ownerObject()
protected void set_ownerObject(ScriptableObject value)
public bool get_allowPixelCaching()
public void set_allowPixelCaching(bool value)
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public SavePersistentViewData get_savePersistentViewData()
public void set_savePersistentViewData(SavePersistentViewData value)
public GetViewDataDictionary get_getViewDataDictionary()
public void set_getViewDataDictionary(GetViewDataDictionary value)
public FocusController get_focusController()
public void set_focusController(FocusController value)
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
internal TimeMsFunction get_TimeSinceStartup()
internal void set_TimeSinceStartup(TimeMsFunction value)
public bool get_keepPixelCacheOnWorldBoundChange()
public void set_keepPixelCacheOnWorldBoundChange(bool value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
public long TimeSinceStartupMs()
internal long DefaultTimeSinceStartupMs()
private VisualElement PickAll(VisualElement root, Vector2 point, List`1<VisualElement> picked)
public VisualElement LoadTemplate(string path, Dictionary`2<string, VisualElement> slots)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
public VisualElement Pick(Vector2 point)
private void ValidatePersistentData()
private void ValidatePersistentDataOnSubTree(VisualElement root, bool enablePersistence)
private void ValidateStyling()
public void ValidateLayout()
private void ValidateSubTree(VisualElement root)
private Rect ComputeAAAlignedBound(Rect position, Matrix4x4 mat)
private bool ShouldUsePixelCache(VisualElement root)
private void PaintSubTree(Event e, VisualElement root, Matrix4x4 offset, Rect currentGlobalClip)
private void PaintSubTreeChildren(Event e, VisualElement root, Matrix4x4 offset, Rect textureClip)
public void Repaint(Event e)
}
public UnityEngine.Experimental.UIElements.PickingMode : Enum {
public int value__
public PickingMode Position
public PickingMode Ignore
}
public UnityEngine.Experimental.UIElements.PostLayoutEvent : EventBase`1<PostLayoutEvent> {
private bool <hasNewLayout>k__BackingField
private Rect <oldRect>k__BackingField
private Rect <newRect>k__BackingField
public bool hasNewLayout
public Rect oldRect
public Rect newRect
public PostLayoutEvent GetPooled(bool hasNewLayout, Rect oldRect, Rect newRect)
protected void Init()
public bool get_hasNewLayout()
private void set_hasNewLayout(bool value)
public Rect get_oldRect()
private void set_oldRect(Rect value)
public Rect get_newRect()
private void set_newRect(Rect value)
}
public UnityEngine.Experimental.UIElements.PropagationPhase : Enum {
public int value__
public PropagationPhase None
public PropagationPhase Capture
public PropagationPhase AtTarget
public PropagationPhase BubbleUp
public PropagationPhase DefaultAction
}
internal UnityEngine.Experimental.UIElements.PseudoStates : Enum {
public int value__
public PseudoStates Active
public PseudoStates Hover
public PseudoStates Checked
public PseudoStates Selected
public PseudoStates Disabled
public PseudoStates Focus
public PseudoStates Invisible
}
internal UnityEngine.Experimental.UIElements.RenderData : object {
public RenderTexture pixelCache
public Matrix4x4 worldTransForm
public Rect lastLayout
}
public UnityEngine.Experimental.UIElements.RepeatButton : BaseTextElement {
public void .ctor(Action clickEvent, long delay, long interval)
}
internal UnityEngine.Experimental.UIElements.SavePersistentViewData : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.ScheduledItem : object {
public Func`1<bool> timerUpdateStopCondition
public Func`1<bool> OnceCondition
public Func`1<bool> ForeverCondition
private long <startMs>k__BackingField
private long <delayMs>k__BackingField
private long <intervalMs>k__BackingField
private long <endTimeMs>k__BackingField
public long startMs
public long delayMs
public long intervalMs
public long endTimeMs
public long get_startMs()
public void set_startMs(long value)
public long get_delayMs()
public void set_delayMs(long value)
public long get_intervalMs()
public void set_intervalMs(long value)
public long get_endTimeMs()
private void set_endTimeMs(long value)
protected void ResetStartTime()
public void SetDuration(long durationMs)
public void PerformTimerUpdate(TimerState state)
internal void OnItemUnscheduled()
public bool ShouldUnschedule()
private bool <OnceCondition>m__0()
private bool <ForeverCondition>m__1()
}
public UnityEngine.Experimental.UIElements.Scroller : VisualElement {
private Action`1<float> valueChanged
private Slider <slider>k__BackingField
private ScrollerButton <lowButton>k__BackingField
private ScrollerButton <highButton>k__BackingField
public Slider slider
public ScrollerButton lowButton
public ScrollerButton highButton
public float value
public float lowValue
public float highValue
public Direction direction
public void .ctor(float lowValue, float highValue, Action`1<float> valueChanged, Direction direction)
public void add_valueChanged(Action`1<float> value)
public void remove_valueChanged(Action`1<float> value)
public Slider get_slider()
private void set_slider(Slider value)
public ScrollerButton get_lowButton()
private void set_lowButton(ScrollerButton value)
public ScrollerButton get_highButton()
private void set_highButton(ScrollerButton value)
public float get_value()
public void set_value(float value)
public float get_lowValue()
public void set_lowValue(float value)
public float get_highValue()
public void set_highValue(float value)
public Direction get_direction()
public void set_direction(Direction value)
public void Adjust(float factor)
private void OnSliderValueChange(float newValue)
public void ScrollPageUp()
public void ScrollPageDown()
}
public UnityEngine.Experimental.UIElements.ScrollerButton : VisualElement {
public Clickable clickable
public void .ctor(Action clickEvent, long delay, long interval)
}
public UnityEngine.Experimental.UIElements.ScrollView : VisualElement {
private Vector2 <horizontalScrollerValues>k__BackingField
private Vector2 <verticalScrollerValues>k__BackingField
public Vector2 kDefaultScrollerValues
private bool <showHorizontal>k__BackingField
private bool <showVertical>k__BackingField
private VisualElement m_ContentContainer
private VisualElement <contentViewport>k__BackingField
private Scroller <horizontalScroller>k__BackingField
private Scroller <verticalScroller>k__BackingField
public Vector2 horizontalScrollerValues
public Vector2 verticalScrollerValues
public bool showHorizontal
public bool showVertical
public bool needsHorizontal
public bool needsVertical
public Vector2 scrollOffset
private float scrollableWidth
private float scrollableHeight
public VisualElement contentViewport
public VisualElement contentView
public Scroller horizontalScroller
public Scroller verticalScroller
public VisualElement contentContainer
public void .ctor(Vector2 horizontalScrollerValues, Vector2 verticalScrollerValues)
public Vector2 get_horizontalScrollerValues()
public void set_horizontalScrollerValues(Vector2 value)
public Vector2 get_verticalScrollerValues()
public void set_verticalScrollerValues(Vector2 value)
public bool get_showHorizontal()
public void set_showHorizontal(bool value)
public bool get_showVertical()
public void set_showVertical(bool value)
public bool get_needsHorizontal()
public bool get_needsVertical()
public Vector2 get_scrollOffset()
public void set_scrollOffset(Vector2 value)
private float get_scrollableWidth()
private float get_scrollableHeight()
private void UpdateContentViewTransform()
public void ScrollTo(VisualElement child)
public VisualElement get_contentViewport()
private void set_contentViewport(VisualElement value)
public VisualElement get_contentView()
public Scroller get_horizontalScroller()
private void set_horizontalScroller(Scroller value)
public Scroller get_verticalScroller()
private void set_verticalScroller(Scroller value)
public VisualElement get_contentContainer()
protected internal void ExecuteDefaultAction(EventBase evt)
private void OnGeometryChanged(PostLayoutEvent evt)
private void OnScrollWheel(WheelEvent evt)
private void <ScrollView>m__0(float value)
private void <ScrollView>m__1(float value)
}
public UnityEngine.Experimental.UIElements.Slider : VisualElement {
private VisualElement <dragElement>k__BackingField
private float m_LowValue
private float m_HighValue
private float <pageSize>k__BackingField
private Action`1<float> valueChanged
private ClampedDragger <clampedDragger>k__BackingField
private Rect m_DragElementStartPos
private SliderValue m_SliderValue
private Direction m_Direction
public VisualElement dragElement
public float lowValue
public float highValue
public float range
public float pageSize
internal ClampedDragger clampedDragger
public float value
public Direction direction
public void .ctor(float start, float end, Action`1<float> valueChanged, Direction direction, float pageSize)
public VisualElement get_dragElement()
private void set_dragElement(VisualElement value)
public float get_lowValue()
public void set_lowValue(float value)
public float get_highValue()
public void set_highValue(float value)
public float get_range()
public float get_pageSize()
public void set_pageSize(float value)
public void add_valueChanged(Action`1<float> value)
public void remove_valueChanged(Action`1<float> value)
internal ClampedDragger get_clampedDragger()
private void set_clampedDragger(ClampedDragger value)
public float get_value()
public void set_value(float value)
public Direction get_direction()
public void set_direction(Direction value)
private void ClampValue()
private void UpdateDragElementPosition(PostLayoutEvent evt)
public void OnPersistentDataReady()
private void SetSliderValueFromDrag()
private void ComputeValueAndDirectionFromDrag(float sliderLength, float dragElementLength, float dragElementPos)
private void SetSliderValueFromClick()
private void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos)
public void AdjustDragElement(float factor)
private void UpdateDragElementPosition()
protected internal void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.Experimental.UIElements.Spacing : ValueType {
public float left
public float top
public float right
public float bottom
public float horizontal
public float vertical
public void .ctor(float left, float top, float right, float bottom)
public float get_horizontal()
public float get_vertical()
public Rect op_Addition(Rect r, Spacing a)
public Rect op_Subtraction(Rect r, Spacing a)
}
public UnityEngine.Experimental.UIElements.StyleEnums.Align : Enum {
public int value__
public Align Auto
public Align FlexStart
public Align Center
public Align FlexEnd
public Align Stretch
}
public UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection : Enum {
public int value__
public FlexDirection Column
public FlexDirection ColumnReverse
public FlexDirection Row
public FlexDirection RowReverse
}
public UnityEngine.Experimental.UIElements.StyleEnums.ImageScaleMode : Enum {
public int value__
public ImageScaleMode StretchToFill
public ImageScaleMode ScaleAndCrop
public ImageScaleMode ScaleToFit
}
public UnityEngine.Experimental.UIElements.StyleEnums.Justify : Enum {
public int value__
public Justify FlexStart
public Justify Center
public Justify FlexEnd
public Justify SpaceBetween
public Justify SpaceAround
}
public UnityEngine.Experimental.UIElements.StyleEnums.Overflow : Enum {
public int value__
public Overflow Visible
public Overflow Scroll
public Overflow Hidden
}
public UnityEngine.Experimental.UIElements.StyleEnums.PositionType : Enum {
public int value__
public PositionType Relative
public PositionType Absolute
public PositionType Manual
}
public UnityEngine.Experimental.UIElements.StyleEnums.Wrap : Enum {
public int value__
public Wrap NoWrap
public Wrap Wrap
}
internal UnityEngine.Experimental.UIElements.StylePainterExtensionMethods : object {
internal TextureStylePainterParameters GetDefaultTextureParameters(IStylePainter painter, VisualElement ve)
internal RectStylePainterParameters GetDefaultRectParameters(IStylePainter painter, VisualElement ve)
internal TextStylePainterParameters GetDefaultTextParameters(IStylePainter painter, BaseTextElement te)
internal CursorPositionStylePainterParameters GetDefaultCursorPositionParameters(IStylePainter painter, BaseTextElement te)
internal void DrawBackground(IStylePainter painter, VisualElement ve)
internal void DrawBorder(IStylePainter painter, VisualElement ve)
internal void DrawText(IStylePainter painter, BaseTextElement te)
internal void SetBorderFromStyle(IStylePainter painter, BorderParameters& border, IStyle style)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.CustomProperty : ValueType {
public int specificity
public StyleValueHandle[] handles
public StyleSheet data
}
internal UnityEngine.Experimental.UIElements.StyleSheets.HandlesApplicatorFunction`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public IAsyncResult BeginInvoke(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property, AsyncCallback callback, object object)
public void EndInvoke(StyleValue`1& property, IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.HierarchyTraversal : object {
private List`1<RuleMatcher> m_ruleMatchers
public bool ShouldSkipElement(VisualElement element)
public bool OnRuleMatchedElement(RuleMatcher matcher, VisualElement element)
public void OnBeginElementTest(VisualElement element, List`1<RuleMatcher> ruleMatchers)
public void BeginElementTest(VisualElement element, List`1<RuleMatcher> ruleMatchers)
public void ProcessMatchedRules(VisualElement element)
public void OnProcessMatchResult(VisualElement element, RuleMatcher& matcher, MatchResultInfo& matchInfo)
public void Traverse(VisualElement element)
public void TraverseRecursive(VisualElement element, int depth, List`1<RuleMatcher> ruleMatchers)
private bool MatchRightToLeft(VisualElement element, RuleMatcher& matcher)
protected void Recurse(VisualElement element, int depth, List`1<RuleMatcher> ruleMatchers)
protected bool MatchSelectorPart(VisualElement element, StyleSelector selector, StyleSelectorPart part)
public MatchResultInfo Match(VisualElement element, RuleMatcher& matcher, int selectorIndex)
}
public UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle {
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.IHierarchyTraversal {
public void Traverse(VisualElement element)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher : ValueType {
public StyleSheet sheet
public StyleComplexSelector complexSelector
public string ToString()
}
internal UnityEngine.Experimental.UIElements.StyleSheets.ShorthandApplicatorFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(StyleSheet sheet, StyleValueHandle[] handles, int specificity, VisualElementStylesData styleData)
public IAsyncResult BeginInvoke(StyleSheet sheet, StyleValueHandle[] handles, int specificity, VisualElementStylesData styleData, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleComplexSelectorExtensions : object {
private Dictionary`2<string, PseudoStateData> s_PseudoStates
public void CachePseudoStateMasks(StyleComplexSelector complexSelector)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleContext : object {
private float <currentPixelsPerPoint>k__BackingField
private VisualElement m_VisualTree
private Dictionary`2<long, VisualElementStylesData> s_StyleCache
internal StyleContextHierarchyTraversal styleContextHierarchyTraversal
public float currentPixelsPerPoint
public void .ctor(VisualElement tree)
public float get_currentPixelsPerPoint()
public void set_currentPixelsPerPoint(float value)
public void DirtyStyleSheets()
public void ApplyStyles()
private void PropagateDirtyStyleSheets(VisualElement element)
public void ClearStyleCache()
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyApplyMode : Enum {
public int value__
public StylePropertyApplyMode Copy
public StylePropertyApplyMode CopyIfEqualOrGreaterSpecificity
public StylePropertyApplyMode CopyIfNotInline
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID : Enum {
public int value__
public StylePropertyID Unknown
public StylePropertyID MarginLeft
public StylePropertyID MarginTop
public StylePropertyID MarginRight
public StylePropertyID MarginBottom
public StylePropertyID PaddingLeft
public StylePropertyID PaddingTop
public StylePropertyID PaddingRight
public StylePropertyID PaddingBottom
public StylePropertyID BorderLeft
public StylePropertyID BorderTop
public StylePropertyID BorderRight
public StylePropertyID BorderBottom
public StylePropertyID PositionType
public StylePropertyID PositionLeft
public StylePropertyID PositionTop
public StylePropertyID PositionRight
public StylePropertyID PositionBottom
public StylePropertyID Width
public StylePropertyID Height
public StylePropertyID MinWidth
public StylePropertyID MinHeight
public StylePropertyID MaxWidth
public StylePropertyID MaxHeight
public StylePropertyID Flex
public StylePropertyID FlexBasis
public StylePropertyID FlexGrow
public StylePropertyID FlexShrink
public StylePropertyID BorderLeftWidth
public StylePropertyID BorderTopWidth
public StylePropertyID BorderRightWidth
public StylePropertyID BorderBottomWidth
public StylePropertyID BorderTopLeftRadius
public StylePropertyID BorderTopRightRadius
public StylePropertyID BorderBottomRightRadius
public StylePropertyID BorderBottomLeftRadius
public StylePropertyID FlexDirection
public StylePropertyID FlexWrap
public StylePropertyID JustifyContent
public StylePropertyID AlignContent
public StylePropertyID AlignSelf
public StylePropertyID AlignItems
public StylePropertyID TextAlignment
public StylePropertyID TextClipping
public StylePropertyID Font
public StylePropertyID FontSize
public StylePropertyID FontStyle
public StylePropertyID BackgroundSize
public StylePropertyID Cursor
public StylePropertyID WordWrap
public StylePropertyID BackgroundImage
public StylePropertyID TextColor
public StylePropertyID BackgroundColor
public StylePropertyID BorderColor
public StylePropertyID Overflow
public StylePropertyID SliceLeft
public StylePropertyID SliceTop
public StylePropertyID SliceRight
public StylePropertyID SliceBottom
public StylePropertyID Opacity
public StylePropertyID BorderRadius
public StylePropertyID Margin
public StylePropertyID Padding
public StylePropertyID Custom
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetApplicator : object {
internal CreateDefaultCursorStyleFunction createDefaultCursorStyleFunc
private void Apply(T val, int specificity, StyleValue`1& property)
public void ApplyDefault(int specificity, StyleValue`1& property)
public void ApplyBool(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyFloat(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyInt(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyEnum(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyColor(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyCursor(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyResource(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetCache : object {
private SheetHandleKeyComparer s_Comparer
private Dictionary`2<SheetHandleKey, int> s_EnumToIntCache
private Dictionary`2<SheetHandleKey, StylePropertyID[]> s_RulePropertyIDsCache
private Dictionary`2<string, StylePropertyID> s_NameToIDCache
internal void ClearCaches()
internal int GetEnumValue(StyleSheet sheet, StyleValueHandle handle)
internal StylePropertyID[] GetPropertyIDs(StyleSheet sheet, int ruleIndex)
private StylePropertyID GetPropertyID(string name)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetExtensions : object {
public void Apply(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property, HandlesApplicatorFunction`1<T> applicatorFunc)
public void ApplyShorthand(StyleSheet sheet, StyleValueHandle[] handles, int specificity, VisualElementStylesData styleData, ShorthandApplicatorFunction applicatorFunc)
public string ReadAsString(StyleSheet sheet, StyleValueHandle handle)
}
public UnityEngine.Experimental.UIElements.StyleSheets.StyleValue`1 : ValueType {
internal int specificity
public T value
private StyleValue`1<T> defaultStyle
public StyleValue`1<T> nil
public void .ctor(T value)
internal void .ctor(T value, int specifity)
public StyleValue`1<T> get_nil()
public T GetSpecifiedValueOrDefault(T defaultValue)
public T op_Implicit(StyleValue`1<T> sp)
internal bool Apply(StyleValue`1<T> other, StylePropertyApplyMode mode)
internal bool Apply(T otherValue, int otherSpecificity, StylePropertyApplyMode mode)
public StyleValue`1<T> op_Implicit(T value)
public StyleValue`1<T> Create(T value)
public string ToString()
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleValueUtils : object {
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<float> other)
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<int> other)
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<bool> other)
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<Color> other)
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<CursorStyle> other)
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<T> other)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.VisualElementStylesData : object {
public VisualElementStylesData none
internal bool isShared
private Dictionary`2<string, CustomProperty> m_CustomProperties
internal StyleValue`1<float> width
internal StyleValue`1<float> height
internal StyleValue`1<float> maxWidth
internal StyleValue`1<float> maxHeight
internal StyleValue`1<float> minWidth
internal StyleValue`1<float> minHeight
internal StyleValue`1<float> flex
internal StyleValue`1<float> flexBasis
internal StyleValue`1<float> flexShrink
internal StyleValue`1<float> flexGrow
internal StyleValue`1<int> overflow
internal StyleValue`1<float> positionLeft
internal StyleValue`1<float> positionTop
internal StyleValue`1<float> positionRight
internal StyleValue`1<float> positionBottom
internal StyleValue`1<float> marginLeft
internal StyleValue`1<float> marginTop
internal StyleValue`1<float> marginRight
internal StyleValue`1<float> marginBottom
internal StyleValue`1<float> borderLeft
internal StyleValue`1<float> borderTop
internal StyleValue`1<float> borderRight
internal StyleValue`1<float> borderBottom
internal StyleValue`1<float> paddingLeft
internal StyleValue`1<float> paddingTop
internal StyleValue`1<float> paddingRight
internal StyleValue`1<float> paddingBottom
internal StyleValue`1<int> positionType
internal StyleValue`1<int> alignSelf
internal StyleValue`1<int> textAlignment
internal StyleValue`1<int> fontStyle
internal StyleValue`1<int> textClipping
internal StyleValue`1<Font> font
internal StyleValue`1<int> fontSize
internal StyleValue`1<bool> wordWrap
internal StyleValue`1<Color> textColor
internal StyleValue`1<int> flexDirection
internal StyleValue`1<Color> backgroundColor
internal StyleValue`1<Color> borderColor
internal StyleValue`1<Texture2D> backgroundImage
internal StyleValue`1<int> backgroundSize
internal StyleValue`1<int> alignItems
internal StyleValue`1<int> alignContent
internal StyleValue`1<int> justifyContent
internal StyleValue`1<int> flexWrap
internal StyleValue`1<float> borderLeftWidth
internal StyleValue`1<float> borderTopWidth
internal StyleValue`1<float> borderRightWidth
internal StyleValue`1<float> borderBottomWidth
internal StyleValue`1<float> borderTopLeftRadius
internal StyleValue`1<float> borderTopRightRadius
internal StyleValue`1<float> borderBottomRightRadius
internal StyleValue`1<float> borderBottomLeftRadius
internal StyleValue`1<int> sliceLeft
internal StyleValue`1<int> sliceTop
internal StyleValue`1<int> sliceRight
internal StyleValue`1<int> sliceBottom
internal StyleValue`1<float> opacity
internal StyleValue`1<CursorStyle> cursor
private HandlesApplicatorFunction`1<int> <>f__mg$cache0
private HandlesApplicatorFunction`1<int> <>f__mg$cache1
private HandlesApplicatorFunction`1<int> <>f__mg$cache2
private HandlesApplicatorFunction`1<Texture2D> <>f__mg$cache3
private HandlesApplicatorFunction`1<float> <>f__mg$cache4
private HandlesApplicatorFunction`1<float> <>f__mg$cache5
private HandlesApplicatorFunction`1<float> <>f__mg$cache6
private HandlesApplicatorFunction`1<float> <>f__mg$cache7
private HandlesApplicatorFunction`1<float> <>f__mg$cache8
private HandlesApplicatorFunction`1<float> <>f__mg$cache9
private HandlesApplicatorFunction`1<float> <>f__mg$cacheA
private HandlesApplicatorFunction`1<float> <>f__mg$cacheB
private HandlesApplicatorFunction`1<Font> <>f__mg$cacheC
private HandlesApplicatorFunction`1<int> <>f__mg$cacheD
private HandlesApplicatorFunction`1<int> <>f__mg$cacheE
private HandlesApplicatorFunction`1<int> <>f__mg$cacheF
private HandlesApplicatorFunction`1<int> <>f__mg$cache10
private HandlesApplicatorFunction`1<float> <>f__mg$cache11
private HandlesApplicatorFunction`1<int> <>f__mg$cache12
private HandlesApplicatorFunction`1<float> <>f__mg$cache13
private HandlesApplicatorFunction`1<float> <>f__mg$cache14
private HandlesApplicatorFunction`1<float> <>f__mg$cache15
private HandlesApplicatorFunction`1<float> <>f__mg$cache16
private HandlesApplicatorFunction`1<float> <>f__mg$cache17
private HandlesApplicatorFunction`1<float> <>f__mg$cache18
private HandlesApplicatorFunction`1<float> <>f__mg$cache19
private HandlesApplicatorFunction`1<float> <>f__mg$cache1A
private HandlesApplicatorFunction`1<int> <>f__mg$cache1B
private HandlesApplicatorFunction`1<float> <>f__mg$cache1C
private HandlesApplicatorFunction`1<float> <>f__mg$cache1D
private HandlesApplicatorFunction`1<float> <>f__mg$cache1E
private HandlesApplicatorFunction`1<float> <>f__mg$cache1F
private HandlesApplicatorFunction`1<int> <>f__mg$cache20
private HandlesApplicatorFunction`1<float> <>f__mg$cache21
private HandlesApplicatorFunction`1<float> <>f__mg$cache22
private HandlesApplicatorFunction`1<float> <>f__mg$cache23
private HandlesApplicatorFunction`1<float> <>f__mg$cache24
private HandlesApplicatorFunction`1<int> <>f__mg$cache25
private HandlesApplicatorFunction`1<int> <>f__mg$cache26
private HandlesApplicatorFunction`1<Color> <>f__mg$cache27
private HandlesApplicatorFunction`1<float> <>f__mg$cache28
private HandlesApplicatorFunction`1<bool> <>f__mg$cache29
private HandlesApplicatorFunction`1<Color> <>f__mg$cache2A
private HandlesApplicatorFunction`1<int> <>f__mg$cache2B
private HandlesApplicatorFunction`1<Color> <>f__mg$cache2C
private HandlesApplicatorFunction`1<float> <>f__mg$cache2D
private HandlesApplicatorFunction`1<float> <>f__mg$cache2E
private HandlesApplicatorFunction`1<float> <>f__mg$cache2F
private HandlesApplicatorFunction`1<float> <>f__mg$cache30
private HandlesApplicatorFunction`1<float> <>f__mg$cache31
private HandlesApplicatorFunction`1<float> <>f__mg$cache32
private HandlesApplicatorFunction`1<float> <>f__mg$cache33
private HandlesApplicatorFunction`1<float> <>f__mg$cache34
private HandlesApplicatorFunction`1<CursorStyle> <>f__mg$cache35
private HandlesApplicatorFunction`1<int> <>f__mg$cache36
private HandlesApplicatorFunction`1<int> <>f__mg$cache37
private HandlesApplicatorFunction`1<int> <>f__mg$cache38
private HandlesApplicatorFunction`1<int> <>f__mg$cache39
private HandlesApplicatorFunction`1<float> <>f__mg$cache3A
private HandlesApplicatorFunction`1<float> <>f__mg$cache3B
private HandlesApplicatorFunction`1<float> <>f__mg$cache3C
private HandlesApplicatorFunction`1<float> <>f__mg$cache3D
private HandlesApplicatorFunction`1<float> <>f__mg$cache3E
private HandlesApplicatorFunction`1<float> <>f__mg$cache3F
private HandlesApplicatorFunction`1<int> <>f__mg$cache40
private HandlesApplicatorFunction`1<bool> <>f__mg$cache41
private HandlesApplicatorFunction`1<Color> <>f__mg$cache42
public void .ctor(bool isShared)
public void Apply(VisualElementStylesData other, StylePropertyApplyMode mode)
public void WriteToGUIStyle(GUIStyle style)
private void AssignState(GUIStyleState state)
private void AssignRect(RectOffset rect, StyleValue`1& left, StyleValue`1& top, StyleValue`1& right, StyleValue`1& bottom)
private void AssignRect(RectOffset rect, StyleValue`1& left, StyleValue`1& top, StyleValue`1& right, StyleValue`1& bottom)
internal void ApplyRule(StyleSheet registry, int specificity, StyleRule rule, StylePropertyID[] propertyIDs)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
internal void ApplyCustomProperty(string propertyName, StyleValue`1& target, StyleValueType valueType, HandlesApplicatorFunction`1<T> applicatorFunc)
}
internal UnityEngine.Experimental.UIElements.TemplateAsset : VisualElementAsset {
private string m_TemplateAlias
private List`1<SlotUsageEntry> m_SlotUsages
public string templateAlias
internal List`1<SlotUsageEntry> slotUsages
public void .ctor(string templateAlias)
public string get_templateAlias()
public void set_templateAlias(string value)
internal List`1<SlotUsageEntry> get_slotUsages()
internal void set_slotUsages(List`1<SlotUsageEntry> value)
public void AddSlotUsage(string slotName, int resId)
}
public UnityEngine.Experimental.UIElements.TemplateContainer : VisualElement {
public string templateId
private VisualElement m_ContentContainer
public VisualElement contentContainer
public void .ctor(string templateId)
public VisualElement get_contentContainer()
internal void SetContentContainer(VisualElement content)
}
internal UnityEngine.Experimental.UIElements.TextEditorEngine : TextEditor {
private TextInputFieldBase <textInputField>k__BackingField
private TextInputFieldBase textInputField
internal Rect localPosition
public void .ctor(TextInputFieldBase field)
private TextInputFieldBase get_textInputField()
private void set_textInputField(TextInputFieldBase value)
internal Rect get_localPosition()
internal void OnDetectFocusChange()
internal void OnCursorIndexChange()
internal void OnSelectIndexChange()
}
internal UnityEngine.Experimental.UIElements.TextEditorEventHandler : object {
private TextEditorEngine <editorEngine>k__BackingField
private TextInputFieldBase <textInputField>k__BackingField
protected TextEditorEngine editorEngine
protected TextInputFieldBase textInputField
protected void .ctor(TextEditorEngine editorEngine, TextInputFieldBase textInputField)
protected TextEditorEngine get_editorEngine()
private void set_editorEngine(TextEditorEngine value)
protected TextInputFieldBase get_textInputField()
private void set_textInputField(TextInputFieldBase value)
public void ExecuteDefaultActionAtTarget(EventBase evt)
public void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.Experimental.UIElements.TextField : TextInputFieldBase {
private bool m_Multiline
protected string m_Value
public bool multiline
public bool isPasswordField
public string value
public void .ctor(int maxLength, bool multiline, bool isPasswordField, char maskChar)
public bool get_multiline()
public void set_multiline(bool value)
public void set_isPasswordField(bool value)
public string get_value()
public void set_value(string value)
public void SetValueAndNotify(string newValue)
public void OnValueChanged(EventCallback`1<ChangeEvent`1<string>> callback)
public void OnPersistentDataReady()
internal void SyncTextEngine()
internal void DoRepaint(IStylePainter painter)
protected internal void ExecuteDefaultActionAtTarget(EventBase evt)
protected internal void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.Experimental.UIElements.TextInputFieldBase : BaseTextElement {
private string SelectionColorProperty
private string CursorColorProperty
private StyleValue`1<Color> m_SelectionColor
private StyleValue`1<Color> m_CursorColor
private bool <isPasswordField>k__BackingField
private int <maxLength>k__BackingField
internal int kMaxLengthNone
private bool <doubleClickSelectsWord>k__BackingField
private bool <tripleClickSelectsLine>k__BackingField
private TextEditorEventHandler <editorEventHandler>k__BackingField
private TextEditorEngine <editorEngine>k__BackingField
private char <maskChar>k__BackingField
public bool isPasswordField
public Color selectionColor
public Color cursorColor
public int maxLength
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
private bool touchScreenTextField
internal bool hasFocus
internal TextEditorEventHandler editorEventHandler
internal TextEditorEngine editorEngine
public char maskChar
public string text
public void .ctor(int maxLength, char maskChar)
public void SelectAll()
public void UpdateText(string value)
public bool get_isPasswordField()
public void set_isPasswordField(bool value)
public Color get_selectionColor()
public Color get_cursorColor()
public int get_maxLength()
public void set_maxLength(int value)
public bool get_doubleClickSelectsWord()
public void set_doubleClickSelectsWord(bool value)
public bool get_tripleClickSelectsLine()
public void set_tripleClickSelectsLine(bool value)
private bool get_touchScreenTextField()
internal bool get_hasFocus()
internal TextEditorEventHandler get_editorEventHandler()
private void set_editorEventHandler(TextEditorEventHandler value)
internal TextEditorEngine get_editorEngine()
private void set_editorEngine(TextEditorEngine value)
public char get_maskChar()
public void set_maskChar(char value)
public void set_text(string value)
private StatusFlags CutCopyActionStatus(EventBase e)
private StatusFlags PasteActionStatus(EventBase e)
private void Cut(EventBase e)
private void Copy(EventBase e)
private void Paste(EventBase e)
protected void OnStyleResolved(ICustomStyle style)
internal void SyncTextEngine()
internal string CullString(string s)
internal void DoRepaint(IStylePainter painter)
internal void DrawWithTextSelectionAndCursor(IStylePainter painter, string newText)
internal bool AcceptCharacter(char c)
protected void BuildContextualMenu(ContextualMenuPopulateEvent evt)
protected internal void ExecuteDefaultActionAtTarget(EventBase evt)
protected internal void ExecuteDefaultAction(EventBase evt)
}
internal UnityEngine.Experimental.UIElements.TimeMsFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public long Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public long EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.TimerEventScheduler : object {
private List`1<ScheduledItem> m_ScheduledItems
private bool m_TransactionMode
private List`1<ScheduledItem> m_ScheduleTransactions
private List`1<ScheduledItem> m_UnscheduleTransactions
internal bool disableThrottling
private int m_LastUpdatedIndex
public void Schedule(IScheduledItem item)
public IScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs)
public IScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition)
public IScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs)
private bool RemovedScheduledItemAt(int index)
public void Unschedule(IScheduledItem item)
public void UpdateScheduledEvents()
}
public UnityEngine.Experimental.UIElements.TimerState : ValueType {
public long start
public long now
public long deltaTime
public long get_deltaTime()
}
public UnityEngine.Experimental.UIElements.Toggle : BaseTextElement {
private Action clickEvent
public bool on
public void .ctor(Action clickEvent)
public bool get_on()
public void set_on(bool value)
public void OnToggle(Action clickEvent)
private void OnClick()
}
internal UnityEngine.Experimental.UIElements.TouchScreenTextEditorEventHandler : TextEditorEventHandler {
private string m_SecureText
public string secureText
public void .ctor(TextEditorEngine editorEngine, TextInputFieldBase textInputField)
public string get_secureText()
public void set_secureText(string value)
public void ExecuteDefaultActionAtTarget(EventBase evt)
}
internal UnityEngine.Experimental.UIElements.UIElementsUtility : object {
private Stack`1<IMGUIContainer> s_ContainerStack
private Dictionary`2<int, Panel> s_UIElementsCache
private Event s_EventInstance
private EventDispatcher s_EventDispatcher
private Action <>f__mg$cache0
private Action <>f__mg$cache1
private Func`3<int, IntPtr, bool> <>f__mg$cache2
private Action <>f__mg$cache3
private Func`2<Exception, bool> <>f__mg$cache4
internal IEventDispatcher eventDispatcher
internal IEventDispatcher get_eventDispatcher()
internal void ClearDispatcher()
private void TakeCapture()
private void ReleaseCapture()
private bool ProcessEvent(int instanceID, IntPtr nativeEventPtr)
public void RemoveCachedPanel(int instanceID)
private void CleanupRoots()
private bool EndContainerGUIFromException(Exception exception)
internal void BeginContainerGUI(LayoutCache cache, Event evt, IMGUIContainer container)
internal void EndContainerGUI()
internal ContextType GetGUIContextType()
internal EventBase CreateEvent(Event systemEvent)
private bool DoDispatch(BaseVisualElementPanel panel)
internal Enumerator<int, Panel> GetPanelsIterator()
internal Panel FindOrCreatePanel(ScriptableObject ownerObject, ContextType contextType, IDataWatchService dataWatch)
internal Panel FindOrCreatePanel(ScriptableObject ownerObject)
}
public UnityEngine.Experimental.UIElements.UQuery : object {
private FirstQueryMatcher s_First
private LastQueryMatcher s_Last
private IndexQueryMatcher s_Index
}
public UnityEngine.Experimental.UIElements.UQueryExtensions : object {
public T Q(VisualElement e, string name, String[] classes)
public T Q(VisualElement e, string name, string className)
public VisualElement Q(VisualElement e, string name, String[] classes)
public VisualElement Q(VisualElement e, string name, string className)
public QueryBuilder`1<VisualElement> Query(VisualElement e, string name, String[] classes)
public QueryBuilder`1<VisualElement> Query(VisualElement e, string name, string className)
public QueryBuilder`1<T> Query(VisualElement e, string name, String[] classes)
public QueryBuilder`1<T> Query(VisualElement e, string name, string className)
public QueryBuilder`1<VisualElement> Query(VisualElement e)
}
public UnityEngine.Experimental.UIElements.UxmlFactory`1 : object {
public Type CreatesType
public Type get_CreatesType()
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
protected T DoCreate(IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.Experimental.UIElements.VisualContainer : VisualElement {
public void AddChild(VisualElement child)
public void InsertChild(int index, VisualElement child)
public void RemoveChild(VisualElement child)
public void RemoveChildAt(int index)
public void ClearChildren()
public VisualElement GetChildAt(int index)
}
public UnityEngine.Experimental.UIElements.VisualElement : Focusable {
private UInt32 s_NextId
private string m_Name
private HashSet`1<string> m_ClassList
private string m_TypeName
private string m_FullTypeName
private string m_PersistenceKey
private bool <enablePersistence>k__BackingField
private object <userData>k__BackingField
private RenderData m_RenderData
private Vector3 m_Position
private Quaternion m_Rotation
private Vector3 m_Scale
private Rect m_Layout
internal PseudoStates triggerPseudoMask
internal PseudoStates dependencyPseudoMask
private PseudoStates m_PseudoStates
private PickingMode <pickingMode>k__BackingField
private CSSNode <cssNode>k__BackingField
internal VisualElementStylesData m_SharedStyle
internal VisualElementStylesData m_Style
internal UInt32 controlid
private ChangeType changesNeeded
private bool m_Enabled
internal Align DefaultAlignContent
internal Align DefaultAlignItems
private OnStylesResolved onStylesResolved
private Hierarchy <shadow>k__BackingField
private ClippingOptions m_ClippingOptions
private VisualElement m_PhysicalParent
private VisualElement m_LogicalParent
private VisualElement[] s_EmptyList
private List`1<VisualElement> m_Children
private BaseVisualElementPanel <elementPanel>k__BackingField
private List`1<StyleSheet> m_StyleSheets
private List`1<string> m_StyleSheetPaths
private Vector3 UnityEngine.Experimental.UIElements.ITransform.position
private Quaternion UnityEngine.Experimental.UIElements.ITransform.rotation
private Vector3 UnityEngine.Experimental.UIElements.ITransform.scale
private Matrix4x4 UnityEngine.Experimental.UIElements.ITransform.matrix
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.width
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.height
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.maxWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.maxHeight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.minWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.minHeight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.flex
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.flexBasis
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.flexGrow
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.flexShrink
private StyleValue`1<Overflow> UnityEngine.Experimental.UIElements.IStyle.overflow
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.positionLeft
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.positionTop
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.positionRight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.positionBottom
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.marginLeft
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.marginTop
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.marginRight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.marginBottom
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderLeft
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderTop
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderRight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderBottom
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderLeftWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderTopWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderRightWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderBottomWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderTopLeftRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderTopRightRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderBottomRightRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderBottomLeftRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.paddingLeft
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.paddingTop
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.paddingRight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.paddingBottom
private StyleValue`1<PositionType> UnityEngine.Experimental.UIElements.IStyle.positionType
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.alignSelf
private StyleValue`1<TextAnchor> UnityEngine.Experimental.UIElements.IStyle.textAlignment
private StyleValue`1<FontStyle> UnityEngine.Experimental.UIElements.IStyle.fontStyle
private StyleValue`1<TextClipping> UnityEngine.Experimental.UIElements.IStyle.textClipping
private StyleValue`1<Font> UnityEngine.Experimental.UIElements.IStyle.font
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.fontSize
private StyleValue`1<bool> UnityEngine.Experimental.UIElements.IStyle.wordWrap
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.textColor
private StyleValue`1<FlexDirection> UnityEngine.Experimental.UIElements.IStyle.flexDirection
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.backgroundColor
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.borderColor
private StyleValue`1<Texture2D> UnityEngine.Experimental.UIElements.IStyle.backgroundImage
private StyleValue`1<ScaleMode> UnityEngine.Experimental.UIElements.IStyle.backgroundSize
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.alignItems
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.alignContent
private StyleValue`1<Justify> UnityEngine.Experimental.UIElements.IStyle.justifyContent
private StyleValue`1<Wrap> UnityEngine.Experimental.UIElements.IStyle.flexWrap
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.sliceLeft
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.sliceTop
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.sliceRight
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.sliceBottom
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.opacity
private StyleValue`1<CursorStyle> UnityEngine.Experimental.UIElements.IStyle.cursor
public string persistenceKey
internal bool enablePersistence
public object userData
public bool canGrabFocus
public FocusController focusController
internal RenderData renderData
public ITransform transform
public Rect layout
public Rect contentRect
protected Rect paddingRect
public Rect worldBound
public Rect localBound
internal Rect rect
internal Rect alignedRect
public Matrix4x4 worldTransform
internal PseudoStates pseudoStates
public PickingMode pickingMode
public string name
internal string fullTypeName
internal string typeName
internal CSSNode cssNode
internal VisualElementStylesData sharedStyle
internal VisualElementStylesData effectiveStyle
internal bool hasInlineStyle
private VisualElementStylesData inlineStyle
internal float opacity
public bool enabled
public bool enabledInHierarchy
public bool enabledSelf
public bool visible
public IUIElementDataWatch dataWatch
public Hierarchy shadow
public ClippingOptions clippingOptions
public VisualElement parent
internal BaseVisualElementPanel elementPanel
public IPanel panel
public VisualElement contentContainer
public VisualElement Item
public int childCount
public IVisualElementScheduler schedule
public IStyle style
internal IList`1<StyleSheet> styleSheets
public string get_persistenceKey()
public void set_persistenceKey(string value)
internal bool get_enablePersistence()
private void set_enablePersistence(bool value)
public object get_userData()
public void set_userData(object value)
public bool get_canGrabFocus()
public FocusController get_focusController()
internal RenderData get_renderData()
public ITransform get_transform()
private Vector3 UnityEngine.Experimental.UIElements.ITransform.get_position()
private void UnityEngine.Experimental.UIElements.ITransform.set_position(Vector3 value)
private Quaternion UnityEngine.Experimental.UIElements.ITransform.get_rotation()
private void UnityEngine.Experimental.UIElements.ITransform.set_rotation(Quaternion value)
private Vector3 UnityEngine.Experimental.UIElements.ITransform.get_scale()
private void UnityEngine.Experimental.UIElements.ITransform.set_scale(Vector3 value)
private Matrix4x4 UnityEngine.Experimental.UIElements.ITransform.get_matrix()
public Rect get_layout()
public void set_layout(Rect value)
public Rect get_contentRect()
protected Rect get_paddingRect()
public Rect get_worldBound()
public Rect get_localBound()
internal Rect get_rect()
internal Rect get_alignedRect()
public Matrix4x4 get_worldTransform()
internal PseudoStates get_pseudoStates()
internal void set_pseudoStates(PseudoStates value)
public PickingMode get_pickingMode()
public void set_pickingMode(PickingMode value)
public string get_name()
public void set_name(string value)
internal string get_fullTypeName()
internal string get_typeName()
internal CSSNode get_cssNode()
private void set_cssNode(CSSNode value)
protected void OnStyleResolved(ICustomStyle style)
internal VisualElementStylesData get_sharedStyle()
internal VisualElementStylesData get_effectiveStyle()
internal bool get_hasInlineStyle()
private VisualElementStylesData get_inlineStyle()
internal float get_opacity()
internal void set_opacity(float value)
protected internal void ExecuteDefaultAction(EventBase evt)
public void Focus()
internal void ChangePanel(BaseVisualElementPanel p)
private void PropagateToChildren(ChangeType type)
private void PropagateChangesToParents()
public void Dirty(ChangeType type)
internal bool AnyDirty()
public bool IsDirty(ChangeType type)
public bool AnyDirty(ChangeType type)
public void ClearDirty(ChangeType type)
public bool get_enabled()
public void set_enabled(bool value)
protected internal bool SetEnabledFromHierarchy(bool state)
public bool get_enabledInHierarchy()
public bool get_enabledSelf()
public void SetEnabled(bool value)
private void PropagateEnabledToChildren(bool value)
public bool get_visible()
public void set_visible(bool value)
public void DoRepaint()
internal void DoRepaint(IStylePainter painter)
private void GetFullHierarchicalPersistenceKey(StringBuilder key)
public string GetFullHierarchicalPersistenceKey()
public T GetOrCreatePersistentData(object existing, string key)
public T GetOrCreatePersistentData(ScriptableObject existing, string key)
public void OverwriteFromPersistedData(object obj, string key)
public void SavePersistentData()
internal bool IsPersitenceSupportedOnChildren()
internal void OnPersistentDataReady(bool enablePersistence)
public void OnPersistentDataReady()
public bool ContainsPoint(Vector2 localPoint)
public bool Overlaps(Rect rectangle)
protected internal Vector2 DoMeasure(float width, MeasureMode widthMode, float height, MeasureMode heightMode)
internal long Measure(CSSNode node, float width, CSSMeasureMode widthMode, float height, CSSMeasureMode heightMode)
public void SetSize(Vector2 size)
private void FinalizeLayout()
internal void add_onStylesResolved(OnStylesResolved value)
internal void remove_onStylesResolved(OnStylesResolved value)
internal void SetInlineStyles(VisualElementStylesData inlineStyle)
internal void SetSharedStyles(VisualElementStylesData sharedStyle)
public void ResetPositionProperties()
public string ToString()
internal IEnumerable`1<string> GetClasses()
public void ClearClassList()
public void AddToClassList(string className)
public void RemoveFromClassList(string className)
public bool ClassListContains(string cls)
public object FindAncestorUserData()
private void UpdateCursorStyle(long eventType)
public IUIElementDataWatch get_dataWatch()
private IUIElementDataWatchRequest UnityEngine.Experimental.UIElements.IUIElementDataWatch.RegisterWatch(Object toWatch, Action`1<Object> watchNotification)
private void UnityEngine.Experimental.UIElements.IUIElementDataWatch.UnregisterWatch(IUIElementDataWatchRequest requested)
public Hierarchy get_shadow()
private void set_shadow(Hierarchy value)
public ClippingOptions get_clippingOptions()
public void set_clippingOptions(ClippingOptions value)
public VisualElement get_parent()
internal BaseVisualElementPanel get_elementPanel()
private void set_elementPanel(BaseVisualElementPanel value)
public IPanel get_panel()
public VisualElement get_contentContainer()
public void Add(VisualElement child)
public void Insert(int index, VisualElement element)
public void Remove(VisualElement element)
public void RemoveAt(int index)
public void Clear()
public VisualElement ElementAt(int index)
public VisualElement get_Item(int key)
public int get_childCount()
public IEnumerable`1<VisualElement> Children()
public void Sort(Comparison`1<VisualElement> comp)
public void BringToFront()
public void SendToBack()
public void PlaceBehind(VisualElement sibling)
public void PlaceInFront(VisualElement sibling)
public void RemoveFromHierarchy()
public T GetFirstOfType()
public T GetFirstAncestorOfType()
public bool Contains(VisualElement child)
public VisualElement FindCommonAncestor(VisualElement other)
public IEnumerator`1<VisualElement> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public IVisualElementScheduler get_schedule()
private IVisualElementScheduledItem UnityEngine.Experimental.UIElements.IVisualElementScheduler.Execute(Action`1<TimerState> timerUpdateEvent)
private IVisualElementScheduledItem UnityEngine.Experimental.UIElements.IVisualElementScheduler.Execute(Action updateEvent)
public IStyle get_style()
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_width()
private void UnityEngine.Experimental.UIElements.IStyle.set_width(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_height()
private void UnityEngine.Experimental.UIElements.IStyle.set_height(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_maxWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_maxWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_maxHeight()
private void UnityEngine.Experimental.UIElements.IStyle.set_maxHeight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_minWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_minWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_minHeight()
private void UnityEngine.Experimental.UIElements.IStyle.set_minHeight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_flex()
private void UnityEngine.Experimental.UIElements.IStyle.set_flex(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_flexBasis()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexBasis(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_flexGrow()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexGrow(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_flexShrink()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexShrink(StyleValue`1<float> value)
private StyleValue`1<Overflow> UnityEngine.Experimental.UIElements.IStyle.get_overflow()
private void UnityEngine.Experimental.UIElements.IStyle.set_overflow(StyleValue`1<Overflow> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_positionLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionLeft(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_positionTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionTop(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_positionRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionRight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_positionBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionBottom(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_marginLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_marginLeft(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_marginTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_marginTop(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_marginRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_marginRight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_marginBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_marginBottom(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderLeft(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderTop(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderRight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderBottom(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderLeftWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderLeftWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderTopWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderTopWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderRightWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderRightWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderBottomWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderBottomWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderTopLeftRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderTopLeftRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderTopRightRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderTopRightRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderBottomRightRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderBottomRightRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderBottomLeftRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderBottomLeftRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_paddingLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_paddingLeft(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_paddingTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_paddingTop(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_paddingRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_paddingRight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_paddingBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_paddingBottom(StyleValue`1<float> value)
private StyleValue`1<PositionType> UnityEngine.Experimental.UIElements.IStyle.get_positionType()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionType(StyleValue`1<PositionType> value)
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.get_alignSelf()
private void UnityEngine.Experimental.UIElements.IStyle.set_alignSelf(StyleValue`1<Align> value)
private StyleValue`1<TextAnchor> UnityEngine.Experimental.UIElements.IStyle.get_textAlignment()
private void UnityEngine.Experimental.UIElements.IStyle.set_textAlignment(StyleValue`1<TextAnchor> value)
private StyleValue`1<FontStyle> UnityEngine.Experimental.UIElements.IStyle.get_fontStyle()
private void UnityEngine.Experimental.UIElements.IStyle.set_fontStyle(StyleValue`1<FontStyle> value)
private StyleValue`1<TextClipping> UnityEngine.Experimental.UIElements.IStyle.get_textClipping()
private void UnityEngine.Experimental.UIElements.IStyle.set_textClipping(StyleValue`1<TextClipping> value)
private StyleValue`1<Font> UnityEngine.Experimental.UIElements.IStyle.get_font()
private void UnityEngine.Experimental.UIElements.IStyle.set_font(StyleValue`1<Font> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_fontSize()
private void UnityEngine.Experimental.UIElements.IStyle.set_fontSize(StyleValue`1<int> value)
private StyleValue`1<bool> UnityEngine.Experimental.UIElements.IStyle.get_wordWrap()
private void UnityEngine.Experimental.UIElements.IStyle.set_wordWrap(StyleValue`1<bool> value)
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.get_textColor()
private void UnityEngine.Experimental.UIElements.IStyle.set_textColor(StyleValue`1<Color> value)
private StyleValue`1<FlexDirection> UnityEngine.Experimental.UIElements.IStyle.get_flexDirection()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexDirection(StyleValue`1<FlexDirection> value)
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.get_backgroundColor()
private void UnityEngine.Experimental.UIElements.IStyle.set_backgroundColor(StyleValue`1<Color> value)
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.get_borderColor()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderColor(StyleValue`1<Color> value)
private StyleValue`1<Texture2D> UnityEngine.Experimental.UIElements.IStyle.get_backgroundImage()
private void UnityEngine.Experimental.UIElements.IStyle.set_backgroundImage(StyleValue`1<Texture2D> value)
private StyleValue`1<ScaleMode> UnityEngine.Experimental.UIElements.IStyle.get_backgroundSize()
private void UnityEngine.Experimental.UIElements.IStyle.set_backgroundSize(StyleValue`1<ScaleMode> value)
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.get_alignItems()
private void UnityEngine.Experimental.UIElements.IStyle.set_alignItems(StyleValue`1<Align> value)
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.get_alignContent()
private void UnityEngine.Experimental.UIElements.IStyle.set_alignContent(StyleValue`1<Align> value)
private StyleValue`1<Justify> UnityEngine.Experimental.UIElements.IStyle.get_justifyContent()
private void UnityEngine.Experimental.UIElements.IStyle.set_justifyContent(StyleValue`1<Justify> value)
private StyleValue`1<Wrap> UnityEngine.Experimental.UIElements.IStyle.get_flexWrap()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexWrap(StyleValue`1<Wrap> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_sliceLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_sliceLeft(StyleValue`1<int> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_sliceTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_sliceTop(StyleValue`1<int> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_sliceRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_sliceRight(StyleValue`1<int> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_sliceBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_sliceBottom(StyleValue`1<int> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_opacity()
private void UnityEngine.Experimental.UIElements.IStyle.set_opacity(StyleValue`1<float> value)
private StyleValue`1<CursorStyle> UnityEngine.Experimental.UIElements.IStyle.get_cursor()
private void UnityEngine.Experimental.UIElements.IStyle.set_cursor(StyleValue`1<CursorStyle> value)
internal IList`1<StyleSheet> get_styleSheets()
public void AddStyleSheetPath(string sheetPath)
public void RemoveStyleSheetPath(string sheetPath)
public bool HasStyleSheetPath(string sheetPath)
internal void ReplaceStyleSheetPath(string oldSheetPath, string newSheetPath)
internal void LoadStyleSheetsFromPaths()
}
internal UnityEngine.Experimental.UIElements.VisualElementAsset : object {
private string m_Name
private int m_Id
private int m_ParentId
private int m_RuleIndex
private string m_Text
private PickingMode m_PickingMode
private string m_FullTypeName
private String[] m_Classes
private List`1<string> m_Stylesheets
private List`1<string> m_Properties
public string name
public int id
public int parentId
public int ruleIndex
public string text
public PickingMode pickingMode
public string fullTypeName
public String[] classes
public List`1<string> stylesheets
public void .ctor(string fullTypeName)
public string get_name()
public void set_name(string value)
public int get_id()
public void set_id(int value)
public int get_parentId()
public void set_parentId(int value)
public int get_ruleIndex()
public void set_ruleIndex(int value)
public string get_text()
public void set_text(string value)
public PickingMode get_pickingMode()
public void set_pickingMode(PickingMode value)
public string get_fullTypeName()
public void set_fullTypeName(string value)
public String[] get_classes()
public void set_classes(String[] value)
public List`1<string> get_stylesheets()
public void set_stylesheets(List`1<string> value)
public VisualElement Create(CreationContext ctx)
public void AddProperty(string propertyName, string propertyValue)
public string GetPropertyString(string propertyName)
public int GetPropertyInt(string propertyName, int defaultValue)
public bool GetPropertyBool(string propertyName, bool defaultValue)
public Color GetPropertyColor(string propertyName, Color defaultValue)
public long GetPropertyLong(string propertyName, long defaultValue)
public float GetPropertyFloat(string propertyName, float def)
public T GetPropertyEnum(string propertyName, T def)
}
public UnityEngine.Experimental.UIElements.VisualElementExtensions : object {
public Vector2 WorldToLocal(VisualElement ele, Vector2 p)
public Vector2 LocalToWorld(VisualElement ele, Vector2 p)
public Rect WorldToLocal(VisualElement ele, Rect r)
public Rect LocalToWorld(VisualElement ele, Rect r)
public Vector2 ChangeCoordinatesTo(VisualElement src, VisualElement dest, Vector2 point)
public Rect ChangeCoordinatesTo(VisualElement src, VisualElement dest, Rect rect)
public void StretchToParentSize(VisualElement elem)
public void StretchToParentWidth(VisualElement elem)
public void AddManipulator(VisualElement ele, IManipulator manipulator)
public void RemoveManipulator(VisualElement ele, IManipulator manipulator)
}
public UnityEngine.Experimental.UIElements.VisualElementFocusChangeDirection : FocusChangeDirection {
private VisualElementFocusChangeDirection s_Left
private VisualElementFocusChangeDirection s_Right
public FocusChangeDirection left
public FocusChangeDirection right
protected VisualElementFocusChangeDirection lastValue
protected void .ctor(int value)
public FocusChangeDirection get_left()
public FocusChangeDirection get_right()
protected VisualElementFocusChangeDirection get_lastValue()
}
public UnityEngine.Experimental.UIElements.VisualElementFocusRing : object {
private VisualElement root
private DefaultFocusOrder <defaultFocusOrder>k__BackingField
private List`1<FocusRingRecord> m_FocusRing
public DefaultFocusOrder defaultFocusOrder
public void .ctor(VisualElement root, DefaultFocusOrder dfo)
public DefaultFocusOrder get_defaultFocusOrder()
public void set_defaultFocusOrder(DefaultFocusOrder value)
private int FocusRingSort(FocusRingRecord a, FocusRingRecord b)
private void DoUpdate()
private void BuildRingRecursive(VisualElement vc, Int32& focusIndex)
private int GetFocusableInternalIndex(Focusable f)
public FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e)
public Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction)
}
internal UnityEngine.Experimental.UIElements.VisualElementPanelActivator : object {
private IVisualElementPanelActivatable m_Activatable
private bool <isActive>k__BackingField
private bool <isDetaching>k__BackingField
public bool isActive
public bool isDetaching
public void .ctor(IVisualElementPanelActivatable activatable)
public bool get_isActive()
private void set_isActive(bool value)
public bool get_isDetaching()
private void set_isDetaching(bool value)
public void SetActive(bool action)
public void SendActivation()
public void SendDeactivation()
private void OnEnter(AttachToPanelEvent evt)
private void OnLeave(DetachFromPanelEvent evt)
}
internal UnityEngine.Experimental.UIElements.VisualElementUtils : object {
private HashSet`1<string> s_usedNames
public string GetUniqueName(string nameBase)
}
public UnityEngine.Experimental.UIElements.VisualTreeAsset : ScriptableObject {
private List`1<UsingEntry> m_Usings
internal StyleSheet inlineSheet
private List`1<VisualElementAsset> m_VisualElementAssets
private List`1<TemplateAsset> m_TemplateAssets
private List`1<SlotDefinition> m_Slots
private int m_ContentContainerId
internal List`1<VisualElementAsset> visualElementAssets
internal List`1<TemplateAsset> templateAssets
internal List`1<SlotDefinition> slots
internal int contentContainerId
internal List`1<VisualElementAsset> get_visualElementAssets()
internal void set_visualElementAssets(List`1<VisualElementAsset> value)
internal List`1<TemplateAsset> get_templateAssets()
internal void set_templateAssets(List`1<TemplateAsset> value)
internal List`1<SlotDefinition> get_slots()
internal void set_slots(List`1<SlotDefinition> value)
internal int get_contentContainerId()
internal void set_contentContainerId(int value)
public VisualElement CloneTree(Dictionary`2<string, VisualElement> slotInsertionPoints)
public void CloneTree(VisualElement target, Dictionary`2<string, VisualElement> slotInsertionPoints)
private VisualElement CloneSetupRecursively(VisualElementAsset root, Dictionary`2<int, List`1<VisualElementAsset>> idToChildren, CreationContext context)
internal bool TryGetSlotInsertionPoint(int insertionPointId, String& slotName)
internal VisualTreeAsset ResolveUsing(string templateAlias)
}
public UnityEngine.Experimental.UIElements.WheelEvent : MouseEventBase`1<WheelEvent> {
private Vector3 <delta>k__BackingField
public Vector3 delta
public Vector3 get_delta()
private void set_delta(Vector3 value)
public WheelEvent GetPooled(Event systemEvent)
protected void Init()
}
public UnityEngine.Internal.Experimental.UIElements.PanelWrapper : ScriptableObject {
private Panel m_Panel
public VisualElement visualTree
private void OnEnable()
private void OnDisable()
public VisualElement get_visualTree()
public void Repaint(Event e)
}
