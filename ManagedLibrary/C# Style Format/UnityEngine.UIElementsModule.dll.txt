public UnityEngine.Experimental.UIElements.BaseField`1 : BindableElement {
protected T m_Value
public T value
public T get_value()
public void set_value(T value)
public void SetValueAndNotify(T newValue)
public void OnPersistentDataReady()
public void OnValueChanged(EventCallback`1<ChangeEvent`1<T>> callback)
public void RemoveOnValueChanged(EventCallback`1<ChangeEvent`1<T>> callback)
public void SetValueWithoutNotify(T newValue)
}
public UnityEngine.Experimental.UIElements.BaseSlider`1 : BaseField`1<T> {
private VisualElement <dragElement>k__BackingField
private T m_LowValue
private T m_HighValue
private float m_PageSize
private ClampedDragger`1<T> <clampedDragger>k__BackingField
private Rect m_DragElementStartPos
private SliderDirection m_Direction
internal float kDefaultPageSize
internal VisualElement dragElement
public T lowValue
public T highValue
public T range
public float pageSize
internal ClampedDragger`1<T> clampedDragger
public T value
public SliderDirection direction
public void .ctor(T start, T end, SliderDirection direction, float pageSize)
internal VisualElement get_dragElement()
private void set_dragElement(VisualElement value)
public T get_lowValue()
public void set_lowValue(T value)
public T get_highValue()
public void set_highValue(T value)
public T get_range()
public float get_pageSize()
public void set_pageSize(float value)
internal ClampedDragger`1<T> get_clampedDragger()
private void set_clampedDragger(ClampedDragger`1<T> value)
private T Clamp(T value, T lowBound, T highBound)
public T get_value()
public void set_value(T value)
public SliderDirection get_direction()
public void set_direction(SliderDirection value)
private void ClampValue()
internal T SliderLerpUnclamped(T a, T b, float interpolant)
internal float SliderNormalizeValue(T currentValue, T lowerValue, T higherValue)
internal T SliderRange()
private void SetSliderValueFromDrag()
private void ComputeValueAndDirectionFromDrag(float sliderLength, float dragElementLength, float dragElementPos)
private void SetSliderValueFromClick()
internal void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos)
public void AdjustDragElement(float factor)
private void UpdateDragElementPosition(GeometryChangedEvent evt)
public void OnPersistentDataReady()
private void UpdateDragElementPosition()
protected internal void ExecuteDefaultAction(EventBase evt)
}
internal UnityEngine.Experimental.UIElements.BaseVisualElementPanel : object {
private float <currentPixelsPerPoint>k__BackingField
private RepaintData <repaintData>k__BackingField
private ICursorManager <cursorManager>k__BackingField
private ContextualMenuManager <contextualMenuManager>k__BackingField
private bool <disposed>k__BackingField
private bool <allowPixelCaching>k__BackingField
private VisualElement <topElementUnderMouse>k__BackingField
public EventInterests IMGUIEventInterests
public ScriptableObject ownerObject
public SavePersistentViewData savePersistentViewData
public GetViewDataDictionary getViewDataDictionary
public int IMGUIContainersCount
public FocusController focusController
internal float currentPixelsPerPoint
internal bool isDirty
internal UInt32 version
internal UInt32 repaintVersion
internal RepaintData repaintData
internal ICursorManager cursorManager
internal ContextualMenuManager contextualMenuManager
public VisualElement visualTree
public EventDispatcher dispatcher
internal IScheduler scheduler
internal IDataWatchService dataWatch
public ContextType contextType
internal bool disposed
internal bool allowPixelCaching
public bool keepPixelCacheOnWorldBoundChange
internal VisualElement topElementUnderMouse
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
public ScriptableObject get_ownerObject()
protected void set_ownerObject(ScriptableObject value)
public SavePersistentViewData get_savePersistentViewData()
public void set_savePersistentViewData(SavePersistentViewData value)
public GetViewDataDictionary get_getViewDataDictionary()
public void set_getViewDataDictionary(GetViewDataDictionary value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
public FocusController get_focusController()
public void set_focusController(FocusController value)
public void Dispose()
protected void Dispose(bool disposing)
public void Repaint(Event e)
public void ValidateLayout()
public void UpdateBindings()
public void ApplyStyles()
public void DirtyStyleSheets()
internal float get_currentPixelsPerPoint()
internal void set_currentPixelsPerPoint(float value)
internal bool get_isDirty()
internal UInt32 get_version()
internal UInt32 get_repaintVersion()
internal void OnVersionChanged(VisualElement ele, VersionChangeType changeTypeFlag)
internal void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase)
internal RepaintData get_repaintData()
internal void set_repaintData(RepaintData value)
internal ICursorManager get_cursorManager()
internal void set_cursorManager(ICursorManager value)
internal ContextualMenuManager get_contextualMenuManager()
internal void set_contextualMenuManager(ContextualMenuManager value)
public VisualElement get_visualTree()
public EventDispatcher get_dispatcher()
protected void set_dispatcher(EventDispatcher value)
internal void SendEvent(EventBase e, DispatchMode dispatchMode)
internal IScheduler get_scheduler()
internal IDataWatchService get_dataWatch()
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public VisualElement Pick(Vector2 point)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
public VisualElement LoadTemplate(string path, Dictionary`2<string, VisualElement> slots)
internal bool get_disposed()
private void set_disposed(bool value)
internal bool get_allowPixelCaching()
internal void set_allowPixelCaching(bool value)
public bool get_keepPixelCacheOnWorldBoundChange()
public void set_keepPixelCacheOnWorldBoundChange(bool value)
internal IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase)
internal VisualElement get_topElementUnderMouse()
internal void set_topElementUnderMouse(VisualElement value)
}
internal UnityEngine.Experimental.UIElements.BaseVisualTreeHierarchyTrackerUpdater : BaseVisualTreeUpdater {
private State m_State
private VisualElement m_CurrentChangeElement
private VisualElement m_CurrentChangeParent
protected void OnHierarchyChange(VisualElement ve, HierarchyChangeType type)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void ProcessNewChange(VisualElement ve)
private void ProcessAddOrMove(VisualElement ve)
private void ProcessRemove(VisualElement ve)
}
internal UnityEngine.Experimental.UIElements.BaseVisualTreeUpdater : object {
private BaseVisualElementPanel <panel>k__BackingField
public BaseVisualElementPanel panel
public VisualElement visualTree
public string description
public BaseVisualElementPanel get_panel()
public void set_panel(BaseVisualElementPanel value)
public VisualElement get_visualTree()
public string get_description()
public void Dispose()
protected void Dispose(bool disposing)
public void Update()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
}
public UnityEngine.Experimental.UIElements.BindableElement : VisualElement {
private IBinding <binding>k__BackingField
private string <bindingPath>k__BackingField
public IBinding binding
public string bindingPath
public IBinding get_binding()
public void set_binding(IBinding value)
public string get_bindingPath()
public void set_bindingPath(string value)
}
public UnityEngine.Experimental.UIElements.BlurEvent : FocusEventBase`1<BlurEvent> {
protected internal void PreDispatch()
}
internal UnityEngine.Experimental.UIElements.BorderParameters : ValueType {
public float leftWidth
public float topWidth
public float rightWidth
public float bottomWidth
public float topLeftRadius
public float topRightRadius
public float bottomRightRadius
public float bottomLeftRadius
public void SetWidth(float top, float right, float bottom, float left)
public void SetWidth(float allBorders)
public void SetRadius(float topLeft, float topRight, float bottomRight, float bottomLeft)
public void SetRadius(float radius)
public Vector4 GetWidths()
public Vector4 GetRadiuses()
public void SetFromStyle(BorderParameters& border, IStyle style)
}
public UnityEngine.Experimental.UIElements.Button : TextElement {
public Clickable clickable
public void .ctor(Action clickEvent)
}
public UnityEngine.Experimental.UIElements.CallbackEventHandler : object {
private EventCallbackRegistry m_CallbackRegistry
public void RegisterCallback(EventCallback`1<TEventType> callback, Capture useCapture)
public void RegisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public void RegisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TUserArgsType userArgs, Capture useCapture)
public void RegisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TUserArgsType userArgs, TrickleDown useTrickleDown)
public void UnregisterCallback(EventCallback`1<TEventType> callback, Capture useCapture)
public void UnregisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public void UnregisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, Capture useCapture)
public void UnregisterCallback(EventCallback`2<TEventType, TUserArgsType> callback, TrickleDown useTrickleDown)
internal bool TryGetUserArgs(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown, TCallbackArgs& userData)
public void SendEvent(EventBase e)
public void HandleEvent(EventBase evt)
public bool HasTrickleDownHandlers()
public bool HasBubbleUpHandlers()
public bool HasCaptureHandlers()
public bool HasBubbleHandlers()
protected internal void ExecuteDefaultActionAtTarget(EventBase evt)
protected internal void ExecuteDefaultAction(EventBase evt)
}
internal UnityEngine.Experimental.UIElements.CallbackPhase : Enum {
public int value__
public CallbackPhase TargetAndBubbleUp
public CallbackPhase TrickleDownAndTarget
public CallbackPhase CaptureAndTarget
}
public UnityEngine.Experimental.UIElements.Capture : Enum {
public int value__
public Capture NoCapture
public Capture Capture
}
public UnityEngine.Experimental.UIElements.ChangeEvent`1 : EventBase`1<ChangeEvent`1<T>> {
private T <previousValue>k__BackingField
private T <newValue>k__BackingField
public T previousValue
public T newValue
public T get_previousValue()
protected void set_previousValue(T value)
public T get_newValue()
protected void set_newValue(T value)
protected void Init()
public ChangeEvent`1<T> GetPooled(T previousValue, T newValue)
}
public UnityEngine.Experimental.UIElements.ChangeType : Enum {
public int value__
public ChangeType PersistentData
public ChangeType PersistentDataPath
public ChangeType Layout
public ChangeType Styles
public ChangeType Transform
public ChangeType StylesPath
public ChangeType Repaint
public ChangeType All
}
internal UnityEngine.Experimental.UIElements.ClampedDragger`1 : Clickable {
private Action dragging
private DragDirection<T> <dragDirection>k__BackingField
private BaseSlider`1<T> <slider>k__BackingField
private Vector2 <startMousePosition>k__BackingField
public DragDirection<T> dragDirection
private BaseSlider`1<T> slider
public Vector2 startMousePosition
public Vector2 delta
public void .ctor(BaseSlider`1<T> slider, Action clickHandler, Action dragHandler)
public void add_dragging(Action value)
public void remove_dragging(Action value)
public DragDirection<T> get_dragDirection()
public void set_dragDirection(DragDirection<T> value)
private BaseSlider`1<T> get_slider()
private void set_slider(BaseSlider`1<T> value)
public Vector2 get_startMousePosition()
private void set_startMousePosition(Vector2 value)
public Vector2 get_delta()
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
private void OnMouseDown(MouseDownEvent evt)
private void OnMouseMove(MouseMoveEvent evt)
}
public UnityEngine.Experimental.UIElements.Clickable : MouseManipulator {
private Action`1<EventBase> clickedWithEventInfo
private Action clicked
private long m_Delay
private long m_Interval
protected bool m_Active
private Vector2 <lastMousePosition>k__BackingField
private IVisualElementScheduledItem m_Repeater
public Vector2 lastMousePosition
public void .ctor(Action handler, long delay, long interval)
public void .ctor(Action`1<EventBase> handler)
public void .ctor(Action handler)
public void add_clickedWithEventInfo(Action`1<EventBase> value)
public void remove_clickedWithEventInfo(Action`1<EventBase> value)
public void add_clicked(Action value)
public void remove_clicked(Action value)
public Vector2 get_lastMousePosition()
private void set_lastMousePosition(Vector2 value)
private void OnTimer(TimerState timerState)
private bool IsRepeatable()
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
protected void OnMouseDown(MouseDownEvent evt)
protected void OnMouseMove(MouseMoveEvent evt)
protected void OnMouseUp(MouseUpEvent evt)
}
public UnityEngine.Experimental.UIElements.CommandEventBase`1 : EventBase`1<T> {
private string m_CommandName
public string commandName
public string get_commandName()
protected void set_commandName(string value)
protected void Init()
public T GetPooled(Event systemEvent)
public T GetPooled(string commandName)
}
public UnityEngine.Experimental.UIElements.ContextType : Enum {
public int value__
public ContextType Player
public ContextType Editor
}
public UnityEngine.Experimental.UIElements.ContextualMenu : object {
public List`1<MenuItem> MenuItems()
public void AppendAction(string actionName, Action`1<MenuAction> action, Func`2<MenuAction, StatusFlags> actionStatusCallback, object userData)
public void InsertAction(int atIndex, string actionName, Action`1<MenuAction> action, Func`2<MenuAction, StatusFlags> actionStatusCallback, object userData)
public void AppendSeparator(string subMenuPath)
public void InsertSeparator(string subMenuPath, int atIndex)
public void RemoveItemAt(int index)
public void PrepareForDisplay(EventBase e)
}
public UnityEngine.Experimental.UIElements.ContextualMenuManager : object {
public void DisplayMenuIfEventMatches(EventBase evt, IEventHandler eventHandler)
public void DisplayMenu(EventBase triggerEvent, IEventHandler target)
protected internal void DoDisplayMenu(DropdownMenu menu, EventBase triggerEvent)
}
public UnityEngine.Experimental.UIElements.ContextualMenuManipulator : MouseManipulator {
private Action`1<ContextualMenuPopulateEvent> m_MenuBuilder
public void .ctor(Action`1<ContextualMenuPopulateEvent> menuBuilder)
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
private void OnMouseUpDownEvent(IMouseEvent evt)
private void OnKeyUpEvent(KeyUpEvent evt)
private void OnContextualMenuEvent(ContextualMenuPopulateEvent evt)
}
public UnityEngine.Experimental.UIElements.ContextualMenuPopulateEvent : MouseEventBase`1<ContextualMenuPopulateEvent> {
private DropdownMenu <menu>k__BackingField
private EventBase <triggerEvent>k__BackingField
private ContextualMenuManager m_ContextualMenuManager
public DropdownMenu menu
public EventBase triggerEvent
public DropdownMenu get_menu()
private void set_menu(DropdownMenu value)
public EventBase get_triggerEvent()
private void set_triggerEvent(EventBase value)
public ContextualMenuPopulateEvent GetPooled(EventBase triggerEvent, DropdownMenu menu, IEventHandler target, ContextualMenuManager menuManager)
protected void Init()
protected internal void PostDispatch()
}
public UnityEngine.Experimental.UIElements.CreationContext : ValueType {
public CreationContext Default
private VisualElement <target>k__BackingField
private VisualTreeAsset <visualTreeAsset>k__BackingField
private Dictionary`2<string, VisualElement> <slotInsertionPoints>k__BackingField
public VisualElement target
public VisualTreeAsset visualTreeAsset
public Dictionary`2<string, VisualElement> slotInsertionPoints
internal void .ctor(Dictionary`2<string, VisualElement> slotInsertionPoints, VisualTreeAsset vta, VisualElement target)
public VisualElement get_target()
private void set_target(VisualElement value)
public VisualTreeAsset get_visualTreeAsset()
private void set_visualTreeAsset(VisualTreeAsset value)
public Dictionary`2<string, VisualElement> get_slotInsertionPoints()
private void set_slotInsertionPoints(Dictionary`2<string, VisualElement> value)
}
internal UnityEngine.Experimental.UIElements.CursorManager : object {
public void SetCursor(CursorStyle cursor)
public void ResetCursor()
}
internal UnityEngine.Experimental.UIElements.CursorPositionStylePainterParameters : ValueType {
public Rect rect
public string text
public Font font
public int fontSize
public FontStyle fontStyle
public TextAnchor anchor
public float wordWrapWidth
public bool richText
public int cursorIndex
public CursorPositionStylePainterParameters GetDefault(VisualElement ve, string text)
internal TextNativeSettings GetTextNativeSettings(float scaling)
}
public UnityEngine.Experimental.UIElements.CursorStyle : ValueType {
private Texture2D <texture>k__BackingField
private Vector2 <hotspot>k__BackingField
private int <defaultCursorId>k__BackingField
public Texture2D texture
public Vector2 hotspot
internal int defaultCursorId
public Texture2D get_texture()
public void set_texture(Texture2D value)
public Vector2 get_hotspot()
public void set_hotspot(Vector2 value)
internal int get_defaultCursorId()
internal void set_defaultCursorId(int value)
public bool Equals(CursorStyle other)
public bool Equals(object obj)
public int GetHashCode()
}
internal UnityEngine.Experimental.UIElements.DispatchMode : Enum {
public int value__
public DispatchMode Default
public DispatchMode Queued
public DispatchMode Immediate
}
internal UnityEngine.Experimental.UIElements.DisposeHelper : object {
public void NotifyMissingDispose(IDisposable disposable)
}
public UnityEngine.Experimental.UIElements.DragEnterEvent : DragAndDropEventBase`1<DragEnterEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.DragExitedEvent : DragAndDropEventBase`1<DragExitedEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.DragLeaveEvent : DragAndDropEventBase`1<DragLeaveEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.DropdownMenu : object {
private List`1<MenuItem> menuItems
private EventInfo m_EventInfo
public List`1<MenuItem> MenuItems()
public void AppendAction(string actionName, Action`1<MenuAction> action, Func`2<MenuAction, StatusFlags> actionStatusCallback, object userData)
public void InsertAction(int atIndex, string actionName, Action`1<MenuAction> action, Func`2<MenuAction, StatusFlags> actionStatusCallback, object userData)
public void AppendSeparator(string subMenuPath)
public void InsertSeparator(string subMenuPath, int atIndex)
public void RemoveItemAt(int index)
public void PrepareForDisplay(EventBase e)
}
public UnityEngine.Experimental.UIElements.EventBase : object {
private long s_LastTypeId
private long <timestamp>k__BackingField
private EventFlags <flags>k__BackingField
private LifeCycleFlags <lifeCycleFlags>k__BackingField
private IEventHandler <target>k__BackingField
private IEventHandler <skipElement>k__BackingField
private PropagationPhase <propagationPhase>k__BackingField
protected IEventHandler m_CurrentTarget
private Event m_ImguiEvent
private Vector2 <originalMousePosition>k__BackingField
public long timestamp
protected EventFlags flags
private LifeCycleFlags lifeCycleFlags
public bool bubbles
public bool capturable
public bool tricklesDown
public IEventHandler target
internal IEventHandler skipElement
public bool isPropagationStopped
public bool isImmediatePropagationStopped
public bool isDefaultPrevented
public PropagationPhase propagationPhase
public IEventHandler currentTarget
public bool dispatch
private bool dispatched
private bool imguiEventIsValid
public Event imguiEvent
public Vector2 originalMousePosition
protected bool pooled
protected long RegisterEventType()
public long GetEventTypeId()
public long get_timestamp()
private void set_timestamp(long value)
protected EventFlags get_flags()
protected void set_flags(EventFlags value)
private LifeCycleFlags get_lifeCycleFlags()
private void set_lifeCycleFlags(LifeCycleFlags value)
protected internal void PreDispatch()
protected internal void PostDispatch()
public bool get_bubbles()
public bool get_capturable()
public bool get_tricklesDown()
public IEventHandler get_target()
public void set_target(IEventHandler value)
internal IEventHandler get_skipElement()
internal void set_skipElement(IEventHandler value)
public bool get_isPropagationStopped()
private void set_isPropagationStopped(bool value)
public void StopPropagation()
public bool get_isImmediatePropagationStopped()
private void set_isImmediatePropagationStopped(bool value)
public void StopImmediatePropagation()
public bool get_isDefaultPrevented()
private void set_isDefaultPrevented(bool value)
public void PreventDefault()
public PropagationPhase get_propagationPhase()
internal void set_propagationPhase(PropagationPhase value)
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
public bool get_dispatch()
internal void set_dispatch(bool value)
internal void MarkReceivedByDispatcher()
private bool get_dispatched()
private void set_dispatched(bool value)
private bool get_imguiEventIsValid()
private void set_imguiEventIsValid(bool value)
public Event get_imguiEvent()
protected void set_imguiEvent(Event value)
public Vector2 get_originalMousePosition()
private void set_originalMousePosition(Vector2 value)
protected void Init()
protected bool get_pooled()
protected void set_pooled(bool value)
internal void Acquire()
public void Dispose()
}
public UnityEngine.Experimental.UIElements.EventBase`1 : EventBase {
private long s_TypeId
private ObjectPool`1<T> s_Pool
private int m_RefCount
public long TypeId()
protected void Init()
public T GetPooled()
private void ReleasePooled(T evt)
internal void Acquire()
public void Dispose()
public long GetEventTypeId()
}
public UnityEngine.Experimental.UIElements.EventCallback`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(TEventType evt)
public IAsyncResult BeginInvoke(TEventType evt, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public UnityEngine.Experimental.UIElements.EventCallback`2 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(TEventType evt, TCallbackArgs userArgs)
public IAsyncResult BeginInvoke(TEventType evt, TCallbackArgs userArgs, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.EventCallbackFunctor`1 : EventCallbackFunctorBase {
private EventCallback`1<TEventType> m_Callback
private long m_EventTypeId
public void .ctor(EventCallback`1<TEventType> callback, CallbackPhase phase)
public void Invoke(EventBase evt)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
}
internal UnityEngine.Experimental.UIElements.EventCallbackFunctor`2 : EventCallbackFunctorBase {
private EventCallback`2<TEventType, TCallbackArgs> m_Callback
private long m_EventTypeId
private TCallbackArgs <userArgs>k__BackingField
internal TCallbackArgs userArgs
public void .ctor(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, CallbackPhase phase)
internal TCallbackArgs get_userArgs()
internal void set_userArgs(TCallbackArgs value)
public void Invoke(EventBase evt)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
}
internal UnityEngine.Experimental.UIElements.EventCallbackFunctorBase : object {
private CallbackPhase <phase>k__BackingField
public CallbackPhase phase
protected void .ctor(CallbackPhase phase)
public CallbackPhase get_phase()
private void set_phase(CallbackPhase value)
public void Invoke(EventBase evt)
public bool IsEquivalentTo(long eventTypeId, Delegate callback, CallbackPhase phase)
protected bool PhaseMatches(EventBase evt)
}
internal UnityEngine.Experimental.UIElements.EventCallbackList : object {
private List`1<EventCallbackFunctorBase> m_List
private int <trickleDownCallbackCount>k__BackingField
private int <bubbleUpCallbackCount>k__BackingField
public int trickleDownCallbackCount
public int bubbleUpCallbackCount
public int capturingCallbackCount
public int bubblingCallbackCount
public int Count
public EventCallbackFunctorBase Item
public void .ctor(EventCallbackList source)
public int get_trickleDownCallbackCount()
private void set_trickleDownCallbackCount(int value)
public int get_bubbleUpCallbackCount()
private void set_bubbleUpCallbackCount(int value)
public int get_capturingCallbackCount()
public int get_bubblingCallbackCount()
public bool Contains(long eventTypeId, Delegate callback, CallbackPhase phase)
public EventCallbackFunctorBase Find(long eventTypeId, Delegate callback, CallbackPhase phase)
public bool Remove(long eventTypeId, Delegate callback, CallbackPhase phase)
public void Add(EventCallbackFunctorBase item)
public void AddRange(EventCallbackList list)
public int get_Count()
public EventCallbackFunctorBase get_Item(int i)
public void set_Item(int i, EventCallbackFunctorBase value)
public void Clear()
}
internal UnityEngine.Experimental.UIElements.EventCallbackListPool : object {
private Stack`1<EventCallbackList> m_Stack
public EventCallbackList Get(EventCallbackList initializer)
public void Release(EventCallbackList element)
}
internal UnityEngine.Experimental.UIElements.EventCallbackRegistry : object {
private EventCallbackListPool s_ListPool
private EventCallbackList m_Callbacks
private EventCallbackList m_TemporaryCallbacks
private int m_IsInvoking
private EventCallbackList GetCallbackList(EventCallbackList initializer)
private void ReleaseCallbackList(EventCallbackList toRelease)
private EventCallbackList GetCallbackListForWriting()
private EventCallbackList GetCallbackListForReading()
private bool ShouldRegisterCallback(long eventTypeId, Delegate callback, CallbackPhase phase)
private bool UnregisterCallback(long eventTypeId, Delegate callback, TrickleDown useTrickleDown)
public void RegisterCallback(EventCallback`1<TEventType> callback, Capture useCapture)
public void RegisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public void RegisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, Capture useCapture)
public void RegisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TCallbackArgs userArgs, TrickleDown useTrickleDown)
public bool UnregisterCallback(EventCallback`1<TEventType> callback, Capture useCapture)
public bool UnregisterCallback(EventCallback`1<TEventType> callback, TrickleDown useTrickleDown)
public bool UnregisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, Capture useCapture)
public bool UnregisterCallback(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown)
internal bool TryGetUserArgs(EventCallback`2<TEventType, TCallbackArgs> callback, TrickleDown useTrickleDown, TCallbackArgs& userArgs)
public void InvokeCallbacks(EventBase evt)
public bool HasCaptureHandlers()
public bool HasTrickleDownHandlers()
public bool HasBubbleHandlers()
}
public UnityEngine.Experimental.UIElements.EventDispatcher : object {
private ObjectPool`1<Queue`1<EventRecord>> k_EventQueuePool
private Queue`1<EventRecord> m_Queue
private UInt32 m_GateCount
private Stack`1<DispatchContext> m_DispatchContexts
private EventDispatcher s_EventDispatcher
private IPanel m_LastMousePositionPanel
private Vector2 m_LastMousePosition
private int k_DefaultPropagationDepth
internal EventDispatcher instance
private bool dispatchImmediately
internal EventDispatcher get_instance()
internal void ClearDispatcher()
private bool get_dispatchImmediately()
private void DispatchEnterLeave(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, Func`1<EventBase> getEnterEventFunc, Func`1<EventBase> getLeaveEventFunc)
private void DispatchDragEnterDragLeave(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, IMouseEvent triggerEvent)
private void DispatchMouseEnterMouseLeave(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, IMouseEvent triggerEvent)
private void DispatchMouseOverMouseOut(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, IMouseEvent triggerEvent)
private void DispatchEnterLeaveEvents(VisualElement previousTopElementUnderMouse, VisualElement currentTopElementUnderMouse, EventBase triggerEvent)
internal void Dispatch(EventBase evt, IPanel panel, DispatchMode dispatchMode)
internal void PushDispatcherContext()
internal void PopDispatcherContext()
internal void CloseGate()
internal void OpenGate()
private void ProcessEventQueue()
private void ProcessEvent(EventBase evt, IPanel panel)
internal void UpdateElementUnderMouse(BaseVisualElementPanel panel)
private void PropagateToIMGUIContainer(VisualElement root, EventBase evt)
private void PropagateEvent(EventBase evt)
private void ExecuteDefaultAction(EventBase evt)
private PropagationPaths BuildPropagationPath(VisualElement elem, Type pathTypesRequested)
}
internal UnityEngine.Experimental.UIElements.EventPool`1 : object {
private Stack`1<T> m_Stack
public T Get()
public void Release(T element)
}
public UnityEngine.Experimental.UIElements.EventPropagation : Enum {
public int value__
public EventPropagation Continue
public EventPropagation Stop
}
public UnityEngine.Experimental.UIElements.Flex : ValueType {
private float <grow>k__BackingField
private float <shrink>k__BackingField
private float <basis>k__BackingField
public float grow
public float shrink
public float basis
public void .ctor(float g, float s, float b)
public float get_grow()
public void set_grow(float value)
public float get_shrink()
public void set_shrink(float value)
public float get_basis()
public void set_basis(float value)
}
public UnityEngine.Experimental.UIElements.Focusable : CallbackEventHandler {
private int m_FocusIndex
public FocusController focusController
public int focusIndex
public bool canGrabFocus
public FocusController get_focusController()
public int get_focusIndex()
public void set_focusIndex(int value)
public bool get_canGrabFocus()
public void Focus()
public void Blur()
protected internal void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.Experimental.UIElements.FocusChangeDirection : object {
private FocusChangeDirection s_Unspecified
private FocusChangeDirection s_None
private int m_Value
public FocusChangeDirection unspecified
public FocusChangeDirection none
protected FocusChangeDirection lastValue
protected void .ctor(int value)
public FocusChangeDirection get_unspecified()
public FocusChangeDirection get_none()
protected FocusChangeDirection get_lastValue()
public int op_Implicit(FocusChangeDirection fcd)
}
public UnityEngine.Experimental.UIElements.FocusController : object {
private IFocusRing <focusRing>k__BackingField
private Focusable <focusedElement>k__BackingField
private int <imguiKeyboardControl>k__BackingField
private IFocusRing focusRing
public Focusable focusedElement
internal int imguiKeyboardControl
public void .ctor(IFocusRing focusRing)
private IFocusRing get_focusRing()
public Focusable get_focusedElement()
private void set_focusedElement(Focusable value)
internal void DoFocusChange(Focusable f)
private void AboutToReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction)
private void ReleaseFocus(Focusable focusable, Focusable willGiveFocusTo, FocusChangeDirection direction)
private void AboutToGrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction)
private void GrabFocus(Focusable focusable, Focusable willTakeFocusFrom, FocusChangeDirection direction)
internal void SwitchFocus(Focusable newFocusedElement)
private void SwitchFocus(Focusable newFocusedElement, FocusChangeDirection direction)
public void SwitchFocusOnEvent(EventBase e)
internal int get_imguiKeyboardControl()
internal void set_imguiKeyboardControl(int value)
internal void SyncIMGUIFocus(int imguiKeyboardControlID, Focusable imguiContainerHavingKeyboardControl)
}
public UnityEngine.Experimental.UIElements.FocusEvent : FocusEventBase`1<FocusEvent> {
protected internal void PreDispatch()
}
public UnityEngine.Experimental.UIElements.FocusEventBase`1 : EventBase`1<T> {
private Focusable <relatedTarget>k__BackingField
private FocusChangeDirection <direction>k__BackingField
protected FocusController m_FocusController
public Focusable relatedTarget
public FocusChangeDirection direction
public Focusable get_relatedTarget()
protected void set_relatedTarget(Focusable value)
public FocusChangeDirection get_direction()
protected void set_direction(FocusChangeDirection value)
protected void Init()
public T GetPooled(IEventHandler target, Focusable relatedTarget, FocusChangeDirection direction, FocusController focusController)
}
public UnityEngine.Experimental.UIElements.FocusInEvent : FocusEventBase`1<FocusInEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.FocusOutEvent : FocusEventBase`1<FocusOutEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.Foldout : BindableElement {
private string s_FoldoutClassName
private string s_ToggleClassName
private string s_ContentContainerClassName
private Toggle m_Toggle
private VisualElement m_Container
private bool m_Value
public VisualElement contentContainer
public string text
public bool value
public VisualElement get_contentContainer()
public string get_text()
public void set_text(string value)
public bool get_value()
public void set_value(bool value)
public void SetValueAndNotify(bool newValue)
public void SetValueWithoutNotify(bool newValue)
public void OnValueChanged(EventCallback`1<ChangeEvent`1<bool>> callback)
public void RemoveOnValueChanged(EventCallback`1<ChangeEvent`1<bool>> callback)
private void <Foldout>m__0(ChangeEvent`1<bool> evt)
}
public UnityEngine.Experimental.UIElements.GeometryChangedEvent : EventBase`1<GeometryChangedEvent> {
private Rect <oldRect>k__BackingField
private Rect <newRect>k__BackingField
public Rect oldRect
public Rect newRect
public GeometryChangedEvent GetPooled(Rect oldRect, Rect newRect)
protected void Init()
public Rect get_oldRect()
private void set_oldRect(Rect value)
public Rect get_newRect()
private void set_newRect(Rect value)
}
internal UnityEngine.Experimental.UIElements.GetViewDataDictionary : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public ISerializableJsonDictionary Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public ISerializableJsonDictionary EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.HierarchyChangeType : Enum {
public int value__
public HierarchyChangeType Add
public HierarchyChangeType Remove
public HierarchyChangeType Move
}
public UnityEngine.Experimental.UIElements.IBindable {
public IBinding binding
public string bindingPath
public IBinding get_binding()
public void set_binding(IBinding value)
public string get_bindingPath()
public void set_bindingPath(string value)
}
public UnityEngine.Experimental.UIElements.IBinding {
public void PreUpdate()
public void Update()
public void Release()
}
public UnityEngine.Experimental.UIElements.IBindingExtensions : object {
public bool IsBound(IBindable control)
}
public UnityEngine.Experimental.UIElements.ICommandEvent {
public string commandName
public string get_commandName()
}
internal UnityEngine.Experimental.UIElements.ICursorManager {
public void SetCursor(CursorStyle cursor)
public void ResetCursor()
}
public UnityEngine.Experimental.UIElements.IDataWatchHandle {
public Object watched
public bool disposed
public Object get_watched()
public bool get_disposed()
}
internal UnityEngine.Experimental.UIElements.IDataWatchService {
public IDataWatchHandle AddWatch(Object watched, Action`1<Object> onDataChanged)
public void RemoveWatch(IDataWatchHandle handle)
public void ForceDirtyNextPoll(Object obj)
}
public UnityEngine.Experimental.UIElements.IEventHandler {
public void SendEvent(EventBase e)
public void HandleEvent(EventBase evt)
public bool HasTrickleDownHandlers()
public bool HasBubbleUpHandlers()
public bool HasCaptureHandlers()
public bool HasBubbleHandlers()
}
public UnityEngine.Experimental.UIElements.IFocusEvent {
public Focusable relatedTarget
public FocusChangeDirection direction
public Focusable get_relatedTarget()
public FocusChangeDirection get_direction()
}
public UnityEngine.Experimental.UIElements.IFocusRing {
public FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e)
public Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction)
}
public UnityEngine.Experimental.UIElements.IKeyboardEvent {
public EventModifiers modifiers
public char character
public KeyCode keyCode
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public EventModifiers get_modifiers()
public char get_character()
public KeyCode get_keyCode()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
}
public UnityEngine.Experimental.UIElements.Image : VisualElement {
private StyleValue`1<int> m_ScaleMode
private StyleValue`1<Texture> m_Image
private Rect m_UV
public StyleValue`1<Texture> image
public Rect sourceRect
public Rect uv
public StyleValue`1<ScaleMode> scaleMode
public StyleValue`1<Texture> get_image()
public void set_image(StyleValue`1<Texture> value)
public Rect get_sourceRect()
public void set_sourceRect(Rect value)
public Rect get_uv()
public void set_uv(Rect value)
public StyleValue`1<ScaleMode> get_scaleMode()
public void set_scaleMode(StyleValue`1<ScaleMode> value)
protected internal Vector2 DoMeasure(float width, MeasureMode widthMode, float height, MeasureMode heightMode)
protected void DoRepaint(IStylePainter painter)
protected void OnStyleResolved(ICustomStyle elementStyle)
private void CalculateUV(Rect srcRect)
private Rect GetSourceRect()
}
public UnityEngine.Experimental.UIElements.IManipulator {
public VisualElement target
public VisualElement get_target()
public void set_target(VisualElement value)
}
public UnityEngine.Experimental.UIElements.IMGUIContainer : VisualElement {
private Action m_OnGUIHandler
private ObjectGUIState m_ObjectGUIState
internal bool useOwnerObjectGUIState
private Rect <lastWorldClip>k__BackingField
private LayoutCache m_Cache
private ContextType <contextType>k__BackingField
internal bool useUIElementsFocusStyle
private bool lostFocus
private bool receivedFocus
private FocusChangeDirection focusChangeDirection
private bool hasFocusableControls
private int newKeyboardFocusControlID
private GUIGlobals m_GUIGlobals
internal ObjectGUIState guiState
internal Rect lastWorldClip
private LayoutCache cache
public ContextType contextType
public bool canGrabFocus
public void .ctor(Action onGUIHandler)
internal ObjectGUIState get_guiState()
internal Rect get_lastWorldClip()
internal void set_lastWorldClip(Rect value)
private LayoutCache get_cache()
public ContextType get_contextType()
public void set_contextType(ContextType value)
public bool get_canGrabFocus()
protected void DoRepaint(IStylePainter painter)
private void SaveGlobals()
private void RestoreGlobals()
private void DoOnGUI(Event evt, Matrix4x4 worldTransform, Rect clippingRect, bool isComputingLayout)
public void MarkDirtyLayout()
public void HandleEvent(EventBase evt)
internal void HandleIMGUIEvent()
internal bool HandleIMGUIEvent(Event e)
internal bool HandleIMGUIEvent(Event e, Matrix4x4 worldTransform, Rect clippingRect)
protected internal void ExecuteDefaultAction(EventBase evt)
protected internal Vector2 DoMeasure(float desiredWidth, MeasureMode widthMode, float desiredHeight, MeasureMode heightMode)
private void GetCurrentTransformAndClip(IMGUIContainer container, Event evt, Matrix4x4& transform, Rect& clipRect)
}
public UnityEngine.Experimental.UIElements.IMGUIEvent : EventBase`1<IMGUIEvent> {
public IMGUIEvent GetPooled(Event systemEvent)
protected void Init()
}
internal UnityEngine.Experimental.UIElements.ImmediateStylePainter : object {
private VisualElement <currentElement>k__BackingField
private Color m_OpacityColor
public VisualElement currentElement
public float opacity
internal void DrawRect(Rect screenRect, Color color, Vector4 borderWidths, Vector4 borderRadiuses)
internal void DrawTexture(Rect screenRect, Texture texture, Rect sourceRect, Color color, Vector4 borderWidths, Vector4 borderRadiuses, int leftBorder, int topBorder, int rightBorder, int bottomBorder, bool usePremultiplyAlpha)
internal void DrawText(Rect screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping textClipping)
public VisualElement get_currentElement()
public void set_currentElement(VisualElement value)
public void DrawRect(RectStylePainterParameters painterParams)
public void DrawTexture(TextureStylePainterParameters painterParams)
public void DrawText(TextStylePainterParameters painterParams)
public void DrawMesh(MeshStylePainterParameters painterParams)
public void DrawImmediate(Action callback)
public void DrawBackground()
public void DrawBorder()
public void DrawText(string text)
public float get_opacity()
public void set_opacity(float value)
private void DrawRect_Injected(Rect& screenRect, Color& color, Vector4& borderWidths, Vector4& borderRadiuses)
private void DrawTexture_Injected(Rect& screenRect, Texture texture, Rect& sourceRect, Color& color, Vector4& borderWidths, Vector4& borderRadiuses, int leftBorder, int topBorder, int rightBorder, int bottomBorder, bool usePremultiplyAlpha)
private void DrawText_Injected(Rect& screenRect, string text, Font font, int fontSize, FontStyle fontStyle, Color& fontColor, TextAnchor anchor, bool wordWrap, float wordWrapWidth, bool richText, TextClipping textClipping)
}
public UnityEngine.Experimental.UIElements.IMouseEvent {
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
public Vector2 mouseDelta
public int clickCount
public int button
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public EventModifiers get_modifiers()
public Vector2 get_mousePosition()
public Vector2 get_localMousePosition()
public Vector2 get_mouseDelta()
public int get_clickCount()
public int get_button()
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
}
internal UnityEngine.Experimental.UIElements.IMouseEventInternal {
public bool hasUnderlyingPhysicalEvent
public bool get_hasUnderlyingPhysicalEvent()
public void set_hasUnderlyingPhysicalEvent(bool value)
}
public UnityEngine.Experimental.UIElements.INotifyValueChanged`1 {
public T value
public T get_value()
public void set_value(T value)
public void SetValueAndNotify(T newValue)
public void SetValueWithoutNotify(T newValue)
public void OnValueChanged(EventCallback`1<ChangeEvent`1<T>> callback)
public void RemoveOnValueChanged(EventCallback`1<ChangeEvent`1<T>> callback)
}
public UnityEngine.Experimental.UIElements.InputEvent : EventBase`1<InputEvent> {
private string <previousData>k__BackingField
private string <newData>k__BackingField
public string previousData
public string newData
public string get_previousData()
protected void set_previousData(string value)
public string get_newData()
protected void set_newData(string value)
protected void Init()
public InputEvent GetPooled(string previousData, string newData)
}
public UnityEngine.Experimental.UIElements.IPanel {
public VisualElement visualTree
public EventDispatcher dispatcher
public ContextType contextType
public FocusController focusController
public VisualElement get_visualTree()
public EventDispatcher get_dispatcher()
public ContextType get_contextType()
public FocusController get_focusController()
public VisualElement Pick(Vector2 point)
public VisualElement LoadTemplate(string path, Dictionary`2<string, VisualElement> slots)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
}
public UnityEngine.Experimental.UIElements.IScheduler {
public IScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs)
public IScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition)
public IScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs)
public void Unschedule(IScheduledItem item)
public void Schedule(IScheduledItem item)
}
internal UnityEngine.Experimental.UIElements.ISerializableJsonDictionary {
public void Set(string key, T value)
public T Get(string key)
public T GetScriptable(string key)
public void Overwrite(object obj, string key)
public bool ContainsKey(string key)
public void OnBeforeSerialize()
public void OnAfterDeserialize()
}
public UnityEngine.Experimental.UIElements.IStyle {
public StyleValue`1<float> width
public StyleValue`1<float> height
public StyleValue`1<float> maxWidth
public StyleValue`1<float> maxHeight
public StyleValue`1<float> minWidth
public StyleValue`1<float> minHeight
public StyleValue`1<Flex> flex
public StyleValue`1<float> flexBasis
public StyleValue`1<float> flexGrow
public StyleValue`1<float> flexShrink
public StyleValue`1<FlexDirection> flexDirection
public StyleValue`1<Wrap> flexWrap
public StyleValue`1<Overflow> overflow
public StyleValue`1<float> positionLeft
public StyleValue`1<float> positionTop
public StyleValue`1<float> positionRight
public StyleValue`1<float> positionBottom
public StyleValue`1<float> marginLeft
public StyleValue`1<float> marginTop
public StyleValue`1<float> marginRight
public StyleValue`1<float> marginBottom
public StyleValue`1<float> borderLeft
public StyleValue`1<float> borderTop
public StyleValue`1<float> borderRight
public StyleValue`1<float> borderBottom
public StyleValue`1<float> paddingLeft
public StyleValue`1<float> paddingTop
public StyleValue`1<float> paddingRight
public StyleValue`1<float> paddingBottom
public StyleValue`1<PositionType> positionType
public StyleValue`1<Align> alignSelf
public StyleValue`1<TextAnchor> textAlignment
public StyleValue`1<TextAnchor> unityTextAlign
public StyleValue`1<FontStyle> fontStyle
public StyleValue`1<FontStyle> fontStyleAndWeight
public StyleValue`1<TextClipping> textClipping
public StyleValue`1<Font> font
public StyleValue`1<int> fontSize
public StyleValue`1<bool> wordWrap
public StyleValue`1<Color> textColor
public StyleValue`1<Color> color
public StyleValue`1<Color> backgroundColor
public StyleValue`1<Color> borderColor
public StyleValue`1<Texture2D> backgroundImage
public StyleValue`1<ScaleMode> backgroundSize
public StyleValue`1<ScaleMode> backgroundScaleMode
public StyleValue`1<Align> alignItems
public StyleValue`1<Align> alignContent
public StyleValue`1<Justify> justifyContent
public StyleValue`1<float> borderLeftWidth
public StyleValue`1<float> borderTopWidth
public StyleValue`1<float> borderRightWidth
public StyleValue`1<float> borderBottomWidth
public StyleValue`1<float> borderRadius
public StyleValue`1<float> borderTopLeftRadius
public StyleValue`1<float> borderTopRightRadius
public StyleValue`1<float> borderBottomRightRadius
public StyleValue`1<float> borderBottomLeftRadius
public StyleValue`1<int> sliceLeft
public StyleValue`1<int> sliceTop
public StyleValue`1<int> sliceRight
public StyleValue`1<int> sliceBottom
public StyleValue`1<float> opacity
public StyleValue`1<CursorStyle> cursor
public StyleValue`1<Visibility> visibility
public StyleValue`1<float> get_width()
public void set_width(StyleValue`1<float> value)
public StyleValue`1<float> get_height()
public void set_height(StyleValue`1<float> value)
public StyleValue`1<float> get_maxWidth()
public void set_maxWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_maxHeight()
public void set_maxHeight(StyleValue`1<float> value)
public StyleValue`1<float> get_minWidth()
public void set_minWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_minHeight()
public void set_minHeight(StyleValue`1<float> value)
public StyleValue`1<Flex> get_flex()
public void set_flex(StyleValue`1<Flex> value)
public StyleValue`1<float> get_flexBasis()
public void set_flexBasis(StyleValue`1<float> value)
public StyleValue`1<float> get_flexGrow()
public void set_flexGrow(StyleValue`1<float> value)
public StyleValue`1<float> get_flexShrink()
public void set_flexShrink(StyleValue`1<float> value)
public StyleValue`1<FlexDirection> get_flexDirection()
public void set_flexDirection(StyleValue`1<FlexDirection> value)
public StyleValue`1<Wrap> get_flexWrap()
public void set_flexWrap(StyleValue`1<Wrap> value)
public StyleValue`1<Overflow> get_overflow()
public void set_overflow(StyleValue`1<Overflow> value)
public StyleValue`1<float> get_positionLeft()
public void set_positionLeft(StyleValue`1<float> value)
public StyleValue`1<float> get_positionTop()
public void set_positionTop(StyleValue`1<float> value)
public StyleValue`1<float> get_positionRight()
public void set_positionRight(StyleValue`1<float> value)
public StyleValue`1<float> get_positionBottom()
public void set_positionBottom(StyleValue`1<float> value)
public StyleValue`1<float> get_marginLeft()
public void set_marginLeft(StyleValue`1<float> value)
public StyleValue`1<float> get_marginTop()
public void set_marginTop(StyleValue`1<float> value)
public StyleValue`1<float> get_marginRight()
public void set_marginRight(StyleValue`1<float> value)
public StyleValue`1<float> get_marginBottom()
public void set_marginBottom(StyleValue`1<float> value)
public StyleValue`1<float> get_borderLeft()
public void set_borderLeft(StyleValue`1<float> value)
public StyleValue`1<float> get_borderTop()
public void set_borderTop(StyleValue`1<float> value)
public StyleValue`1<float> get_borderRight()
public void set_borderRight(StyleValue`1<float> value)
public StyleValue`1<float> get_borderBottom()
public void set_borderBottom(StyleValue`1<float> value)
public StyleValue`1<float> get_paddingLeft()
public void set_paddingLeft(StyleValue`1<float> value)
public StyleValue`1<float> get_paddingTop()
public void set_paddingTop(StyleValue`1<float> value)
public StyleValue`1<float> get_paddingRight()
public void set_paddingRight(StyleValue`1<float> value)
public StyleValue`1<float> get_paddingBottom()
public void set_paddingBottom(StyleValue`1<float> value)
public StyleValue`1<PositionType> get_positionType()
public void set_positionType(StyleValue`1<PositionType> value)
public StyleValue`1<Align> get_alignSelf()
public void set_alignSelf(StyleValue`1<Align> value)
public StyleValue`1<TextAnchor> get_textAlignment()
public void set_textAlignment(StyleValue`1<TextAnchor> value)
public StyleValue`1<TextAnchor> get_unityTextAlign()
public void set_unityTextAlign(StyleValue`1<TextAnchor> value)
public StyleValue`1<FontStyle> get_fontStyle()
public void set_fontStyle(StyleValue`1<FontStyle> value)
public StyleValue`1<FontStyle> get_fontStyleAndWeight()
public void set_fontStyleAndWeight(StyleValue`1<FontStyle> value)
public StyleValue`1<TextClipping> get_textClipping()
public void set_textClipping(StyleValue`1<TextClipping> value)
public StyleValue`1<Font> get_font()
public void set_font(StyleValue`1<Font> value)
public StyleValue`1<int> get_fontSize()
public void set_fontSize(StyleValue`1<int> value)
public StyleValue`1<bool> get_wordWrap()
public void set_wordWrap(StyleValue`1<bool> value)
public StyleValue`1<Color> get_textColor()
public void set_textColor(StyleValue`1<Color> value)
public StyleValue`1<Color> get_color()
public void set_color(StyleValue`1<Color> value)
public StyleValue`1<Color> get_backgroundColor()
public void set_backgroundColor(StyleValue`1<Color> value)
public StyleValue`1<Color> get_borderColor()
public void set_borderColor(StyleValue`1<Color> value)
public StyleValue`1<Texture2D> get_backgroundImage()
public void set_backgroundImage(StyleValue`1<Texture2D> value)
public StyleValue`1<ScaleMode> get_backgroundSize()
public void set_backgroundSize(StyleValue`1<ScaleMode> value)
public StyleValue`1<ScaleMode> get_backgroundScaleMode()
public void set_backgroundScaleMode(StyleValue`1<ScaleMode> value)
public StyleValue`1<Align> get_alignItems()
public void set_alignItems(StyleValue`1<Align> value)
public StyleValue`1<Align> get_alignContent()
public void set_alignContent(StyleValue`1<Align> value)
public StyleValue`1<Justify> get_justifyContent()
public void set_justifyContent(StyleValue`1<Justify> value)
public StyleValue`1<float> get_borderLeftWidth()
public void set_borderLeftWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_borderTopWidth()
public void set_borderTopWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_borderRightWidth()
public void set_borderRightWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_borderBottomWidth()
public void set_borderBottomWidth(StyleValue`1<float> value)
public StyleValue`1<float> get_borderRadius()
public void set_borderRadius(StyleValue`1<float> value)
public StyleValue`1<float> get_borderTopLeftRadius()
public void set_borderTopLeftRadius(StyleValue`1<float> value)
public StyleValue`1<float> get_borderTopRightRadius()
public void set_borderTopRightRadius(StyleValue`1<float> value)
public StyleValue`1<float> get_borderBottomRightRadius()
public void set_borderBottomRightRadius(StyleValue`1<float> value)
public StyleValue`1<float> get_borderBottomLeftRadius()
public void set_borderBottomLeftRadius(StyleValue`1<float> value)
public StyleValue`1<int> get_sliceLeft()
public void set_sliceLeft(StyleValue`1<int> value)
public StyleValue`1<int> get_sliceTop()
public void set_sliceTop(StyleValue`1<int> value)
public StyleValue`1<int> get_sliceRight()
public void set_sliceRight(StyleValue`1<int> value)
public StyleValue`1<int> get_sliceBottom()
public void set_sliceBottom(StyleValue`1<int> value)
public StyleValue`1<float> get_opacity()
public void set_opacity(StyleValue`1<float> value)
public StyleValue`1<CursorStyle> get_cursor()
public void set_cursor(StyleValue`1<CursorStyle> value)
public StyleValue`1<Visibility> get_visibility()
public void set_visibility(StyleValue`1<Visibility> value)
}
internal UnityEngine.Experimental.UIElements.IStylePainterInternal {
public float opacity
public void DrawRect(RectStylePainterParameters painterParams)
public void DrawTexture(TextureStylePainterParameters painterParams)
public void DrawText(TextStylePainterParameters painterParams)
public void DrawMesh(MeshStylePainterParameters painterParameters)
public void DrawImmediate(Action callback)
public void DrawBackground()
public void DrawBorder()
public void DrawText(string text)
public float get_opacity()
public void set_opacity(float value)
}
internal UnityEngine.Experimental.UIElements.ITextElement {
public string text
public string get_text()
public void set_text(string value)
}
internal UnityEngine.Experimental.UIElements.ITextInputField {
public bool hasFocus
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
public bool get_hasFocus()
public bool get_doubleClickSelectsWord()
public bool get_tripleClickSelectsLine()
public void SyncTextEngine()
public bool AcceptCharacter(char c)
public string CullString(string s)
public void UpdateText(string value)
}
public UnityEngine.Experimental.UIElements.ITransform {
public Vector3 position
public Quaternion rotation
public Vector3 scale
public Matrix4x4 matrix
public Vector3 get_position()
public void set_position(Vector3 value)
public Quaternion get_rotation()
public void set_rotation(Quaternion value)
public Vector3 get_scale()
public void set_scale(Vector3 value)
public Matrix4x4 get_matrix()
}
public UnityEngine.Experimental.UIElements.IUIElementDataWatch {
public IUIElementDataWatchRequest RegisterWatch(Object toWatch, Action`1<Object> watchNotification)
public void UnregisterWatch(IUIElementDataWatchRequest requested)
}
public UnityEngine.Experimental.UIElements.IUxmlAttributes {
public bool TryGetAttributeValue(string attributeName, String& value)
}
public UnityEngine.Experimental.UIElements.IUxmlFactory {
public string uxmlName
public string uxmlNamespace
public string uxmlQualifiedName
public bool canHaveAnyAttribute
public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public Type CreatesType
public string get_uxmlName()
public string get_uxmlNamespace()
public string get_uxmlQualifiedName()
public bool get_canHaveAnyAttribute()
public IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription()
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public bool AcceptsAttributeBag(IUxmlAttributes bag, CreationContext cc)
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
public Type get_CreatesType()
}
internal UnityEngine.Experimental.UIElements.IVisualElementPanelActivatable {
public VisualElement element
public VisualElement get_element()
public bool CanBeActivated()
public void OnPanelActivate()
public void OnPanelDeactivate()
}
public UnityEngine.Experimental.UIElements.IVisualElementScheduledItem {
public VisualElement element
public bool isActive
public VisualElement get_element()
public bool get_isActive()
public void Resume()
public void Pause()
public void ExecuteLater(long delayMs)
public IVisualElementScheduledItem StartingIn(long delayMs)
public IVisualElementScheduledItem Every(long intervalMs)
public IVisualElementScheduledItem Until(Func`1<bool> stopCondition)
public IVisualElementScheduledItem ForDuration(long durationMs)
}
public UnityEngine.Experimental.UIElements.IVisualElementScheduler {
public IVisualElementScheduledItem Execute(Action`1<TimerState> timerUpdateEvent)
public IVisualElementScheduledItem Execute(Action updateEvent)
}
internal UnityEngine.Experimental.UIElements.IVisualTreeUpdater {
public BaseVisualElementPanel panel
public string description
public BaseVisualElementPanel get_panel()
public void set_panel(BaseVisualElementPanel value)
public string get_description()
public void Update()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
}
public UnityEngine.Experimental.UIElements.KeyboardEventBase`1 : EventBase`1<T> {
private EventModifiers <modifiers>k__BackingField
private char <character>k__BackingField
private KeyCode <keyCode>k__BackingField
public EventModifiers modifiers
public char character
public KeyCode keyCode
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public char get_character()
protected void set_character(char value)
public KeyCode get_keyCode()
protected void set_keyCode(KeyCode value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
protected void Init()
public T GetPooled(char c, KeyCode keyCode, EventModifiers modifiers)
public T GetPooled(Event systemEvent)
}
internal UnityEngine.Experimental.UIElements.KeyboardTextEditorEventHandler : TextEditorEventHandler {
internal bool m_Changed
private bool m_Dragged
private bool m_DragToPosition
private bool m_PostponeMove
private bool m_SelectAllOnMouseUp
private string m_PreDrawCursorText
public void .ctor(TextEditorEngine editorEngine, ITextInputField textInputField)
public void ExecuteDefaultActionAtTarget(EventBase evt)
private void OnMouseDown(MouseDownEvent evt)
private void OnMouseUp(MouseUpEvent evt)
private void OnMouseMove(MouseMoveEvent evt)
private void OnKeyDown(KeyDownEvent evt)
private void OnValidateCommandEvent(ValidateCommandEvent evt)
private void OnExecuteCommandEvent(ExecuteCommandEvent evt)
public void PreDrawCursor(string newText)
public void PostDrawCursor()
}
public UnityEngine.Experimental.UIElements.Label : TextElement {
public void .ctor(string text)
}
public UnityEngine.Experimental.UIElements.ListView : VisualElement {
private Action`1<object> onItemChosen
private Action`1<List`1<object>> onSelectionChanged
private IList m_ItemsSource
private Func`1<VisualElement> m_MakeItem
private Action`2<VisualElement, int> m_BindItem
private StyleValue`1<int> m_ItemHeight
private float m_ScrollOffset
private List`1<int> m_SelectedIndices
private SelectionType <selectionType>k__BackingField
private int k_DefaultItemHeight
private string k_ItemHeightProperty
private int m_FirstVisibleIndex
private float m_LastHeight
private List`1<RecycledItem> m_Pool
private ScrollView m_ScrollView
private int m_ExtraVisibleItems
private int m_VisibleItemCount
public IList itemsSource
public Func`1<VisualElement> makeItem
public Action`2<VisualElement, int> bindItem
public int itemHeight
public int selectedIndex
public object selectedItem
public VisualElement contentContainer
public SelectionType selectionType
public void .ctor(IList itemsSource, int itemHeight, Func`1<VisualElement> makeItem, Action`2<VisualElement, int> bindItem)
public void add_onItemChosen(Action`1<object> value)
public void remove_onItemChosen(Action`1<object> value)
public void add_onSelectionChanged(Action`1<List`1<object>> value)
public void remove_onSelectionChanged(Action`1<List`1<object>> value)
public IList get_itemsSource()
public void set_itemsSource(IList value)
public Func`1<VisualElement> get_makeItem()
public void set_makeItem(Func`1<VisualElement> value)
public Action`2<VisualElement, int> get_bindItem()
public void set_bindItem(Action`2<VisualElement, int> value)
public int get_itemHeight()
public void set_itemHeight(int value)
public int get_selectedIndex()
public void set_selectedIndex(int value)
public object get_selectedItem()
public VisualElement get_contentContainer()
public SelectionType get_selectionType()
public void set_selectionType(SelectionType value)
public void OnKeyDown(KeyDownEvent evt)
public void ScrollToItem(int index)
private void OnClick(MouseDownEvent evt)
protected void AddToSelection(int index)
protected void RemoveFromSelection(int index)
protected void SetSelection(int index)
private void SelectionChanged()
protected void ClearSelection()
public void ScrollTo(VisualElement visualElement)
public void OnPersistentDataReady()
private void OnScroll(float offset)
private bool HasValidDataAndBindings()
public void Refresh()
private void ResizeHeight(float height)
private void Setup(RecycledItem recycledItem, int newIndex)
private void OnSizeChanged(GeometryChangedEvent evt)
protected void OnStyleResolved(ICustomStyle styles)
}
internal UnityEngine.Experimental.UIElements.LoadResourceFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public Object Invoke(string pathName, Type type)
public IAsyncResult BeginInvoke(string pathName, Type type, AsyncCallback callback, object object)
public Object EndInvoke(IAsyncResult result)
}
public UnityEngine.Experimental.UIElements.Manipulator : object {
private VisualElement m_Target
public VisualElement target
protected void RegisterCallbacksOnTarget()
protected void UnregisterCallbacksFromTarget()
public VisualElement get_target()
public void set_target(VisualElement value)
}
public UnityEngine.Experimental.UIElements.ManipulatorActivationFilter : ValueType {
public MouseButton button
public EventModifiers modifiers
public int clickCount
public bool Matches(IMouseEvent e)
private bool HasModifiers(IMouseEvent e)
}
internal UnityEngine.Experimental.UIElements.MeshStylePainterParameters : ValueType {
public Mesh mesh
public Material material
public int pass
public MeshStylePainterParameters GetDefault(Mesh mesh, Material mat)
}
public UnityEngine.Experimental.UIElements.MinMaxSlider : BaseField`1<Vector2> {
private VisualElement <dragElement>k__BackingField
private VisualElement <dragMinThumb>k__BackingField
private VisualElement <dragMaxThumb>k__BackingField
private ClampedDragger`1<float> <clampedDragger>k__BackingField
private Vector2 m_DragElementStartPos
private Vector2 m_ValueStartPos
private Rect m_DragMinThumbRect
private Rect m_DragMaxThumbRect
private DragState m_DragState
private float m_MinLimit
private float m_MaxLimit
internal float kDefaultHighValue
internal VisualElement dragElement
private VisualElement dragMinThumb
private VisualElement dragMaxThumb
internal ClampedDragger`1<float> clampedDragger
public float minValue
public float maxValue
public Vector2 value
public float range
public float lowLimit
public float highLimit
public void .ctor(float minValue, float maxValue, float minLimit, float maxLimit)
internal VisualElement get_dragElement()
private void set_dragElement(VisualElement value)
private VisualElement get_dragMinThumb()
private void set_dragMinThumb(VisualElement value)
private VisualElement get_dragMaxThumb()
private void set_dragMaxThumb(VisualElement value)
internal ClampedDragger`1<float> get_clampedDragger()
private void set_clampedDragger(ClampedDragger`1<float> value)
public float get_minValue()
public void set_minValue(float value)
public float get_maxValue()
public void set_maxValue(float value)
public Vector2 get_value()
public void set_value(Vector2 value)
public void SetValueWithoutNotify(Vector2 newValue)
public float get_range()
public float get_lowLimit()
public void set_lowLimit(float value)
public float get_highLimit()
public void set_highLimit(float value)
private Vector2 ClampValues(Vector2 valueToClamp)
private void UpdateDragElementPosition(GeometryChangedEvent evt)
private void UpdateDragElementPosition()
internal float SliderLerpUnclamped(float a, float b, float interpolant)
internal float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue)
private float ComputeValueFromPosition(float positionToConvert)
protected internal void ExecuteDefaultAction(EventBase evt)
private void SetSliderValueFromDrag()
private void SetSliderValueFromClick()
private void ComputeValueDragStateNoThumb(float lowLimitPosition, float highLimitPosition, float dragElementPos)
private void ComputeValueFromDraggingThumb(float dragElementStartPos, float dragElementEndPos)
}
public UnityEngine.Experimental.UIElements.MouseButton : Enum {
public int value__
public MouseButton LeftMouse
public MouseButton RightMouse
public MouseButton MiddleMouse
}
public UnityEngine.Experimental.UIElements.MouseCaptureController : object {
private IEventHandler <mouseCapture>k__BackingField
internal IEventHandler mouseCapture
internal IEventHandler get_mouseCapture()
private void set_mouseCapture(IEventHandler value)
public bool IsMouseCaptureTaken()
public bool IsMouseCaptured()
public bool HasMouseCapture(IEventHandler handler)
public void TakeMouseCapture(IEventHandler handler)
public void CaptureMouse(IEventHandler handler)
public void ReleaseMouseCapture(IEventHandler handler)
public void ReleaseMouse(IEventHandler handler)
public void ReleaseMouseCapture()
public void ReleaseMouse()
}
public UnityEngine.Experimental.UIElements.MouseCaptureEventBase`1 : EventBase`1<T> {
private IEventHandler <relatedTarget>k__BackingField
public IEventHandler relatedTarget
public IEventHandler get_relatedTarget()
private void set_relatedTarget(IEventHandler value)
protected void Init()
public T GetPooled(IEventHandler target, IEventHandler relatedTarget)
}
public UnityEngine.Experimental.UIElements.MouseEnterEvent : MouseEventBase`1<MouseEnterEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.MouseEnterWindowEvent : MouseEventBase`1<MouseEnterWindowEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.MouseEventBase`1 : EventBase`1<T> {
private bool <UnityEngine.Experimental.UIElements.IMouseEventInternal.hasUnderlyingPhysicalEvent>k__BackingField
private EventModifiers <modifiers>k__BackingField
private Vector2 <mousePosition>k__BackingField
private Vector2 <localMousePosition>k__BackingField
private Vector2 <mouseDelta>k__BackingField
private int <clickCount>k__BackingField
private int <button>k__BackingField
private bool UnityEngine.Experimental.UIElements.IMouseEventInternal.hasUnderlyingPhysicalEvent
public EventModifiers modifiers
public Vector2 mousePosition
public Vector2 localMousePosition
public Vector2 mouseDelta
public int clickCount
public int button
public bool shiftKey
public bool ctrlKey
public bool commandKey
public bool altKey
public bool actionKey
public IEventHandler currentTarget
public EventModifiers get_modifiers()
protected void set_modifiers(EventModifiers value)
public Vector2 get_mousePosition()
protected void set_mousePosition(Vector2 value)
public Vector2 get_localMousePosition()
internal void set_localMousePosition(Vector2 value)
public Vector2 get_mouseDelta()
protected void set_mouseDelta(Vector2 value)
public int get_clickCount()
protected void set_clickCount(int value)
public int get_button()
protected void set_button(int value)
public bool get_shiftKey()
public bool get_ctrlKey()
public bool get_commandKey()
public bool get_altKey()
public bool get_actionKey()
private bool UnityEngine.Experimental.UIElements.IMouseEventInternal.get_hasUnderlyingPhysicalEvent()
private void UnityEngine.Experimental.UIElements.IMouseEventInternal.set_hasUnderlyingPhysicalEvent(bool value)
protected void Init()
public IEventHandler get_currentTarget()
internal void set_currentTarget(IEventHandler value)
public T GetPooled(Event systemEvent)
public T GetPooled(Vector2 mousePosition)
public T GetPooled(IMouseEvent triggerEvent)
}
public UnityEngine.Experimental.UIElements.MouseLeaveEvent : MouseEventBase`1<MouseLeaveEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.MouseLeaveWindowEvent : MouseEventBase`1<MouseLeaveWindowEvent> {
protected void Init()
}
public UnityEngine.Experimental.UIElements.MouseManipulator : Manipulator {
private List`1<ManipulatorActivationFilter> <activators>k__BackingField
private ManipulatorActivationFilter m_currentActivator
public List`1<ManipulatorActivationFilter> activators
public List`1<ManipulatorActivationFilter> get_activators()
private void set_activators(List`1<ManipulatorActivationFilter> value)
protected bool CanStartManipulation(IMouseEvent e)
protected bool CanStopManipulation(IMouseEvent e)
}
internal UnityEngine.Experimental.UIElements.ObjectPool`1 : object {
private Stack`1<T> m_Stack
private int m_MaxSize
public int maxSize
public void .ctor(int maxSize)
public int get_maxSize()
public void set_maxSize(int value)
public int Size()
public void Clear()
public T Get()
public void Release(T element)
}
internal UnityEngine.Experimental.UIElements.OnStylesResolved : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ICustomStyle styles)
public IAsyncResult BeginInvoke(ICustomStyle styles, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.Panel : BaseVisualElementPanel {
private VisualElement m_RootContainer
private VisualTreeUpdater m_VisualTreeUpdater
private string m_PanelName
private string m_ProfileUpdateName
private string m_ProfileLayoutName
private string m_ProfileBindingsName
private UInt32 m_Version
private UInt32 m_RepaintVersion
private EventDispatcher <dispatcher>k__BackingField
private IDataWatchService m_DataWatch
private TimerEventScheduler m_Scheduler
private ScriptableObject <ownerObject>k__BackingField
private ContextType <contextType>k__BackingField
private SavePersistentViewData <savePersistentViewData>k__BackingField
private GetViewDataDictionary <getViewDataDictionary>k__BackingField
private FocusController <focusController>k__BackingField
private EventInterests <IMGUIEventInterests>k__BackingField
internal LoadResourceFunction loadResourceFunc
private TimeMsFunction s_TimeSinceStartup
private bool m_KeepPixelCacheOnWorldBoundChange
private int <IMGUIContainersCount>k__BackingField
private TimeMsFunction <>f__mg$cache0
public VisualElement visualTree
public EventDispatcher dispatcher
internal IDataWatchService dataWatch
public TimerEventScheduler timerEventScheduler
internal IScheduler scheduler
public ScriptableObject ownerObject
public ContextType contextType
public SavePersistentViewData savePersistentViewData
public GetViewDataDictionary getViewDataDictionary
public FocusController focusController
public EventInterests IMGUIEventInterests
internal string name
internal TimeMsFunction TimeSinceStartup
public bool keepPixelCacheOnWorldBoundChange
public int IMGUIContainersCount
internal UInt32 version
internal UInt32 repaintVersion
public void .ctor(ScriptableObject ownerObject, ContextType contextType, IDataWatchService dataWatch, EventDispatcher dispatcher)
public VisualElement get_visualTree()
public EventDispatcher get_dispatcher()
protected void set_dispatcher(EventDispatcher value)
internal IDataWatchService get_dataWatch()
public TimerEventScheduler get_timerEventScheduler()
internal IScheduler get_scheduler()
public ScriptableObject get_ownerObject()
protected void set_ownerObject(ScriptableObject value)
public ContextType get_contextType()
protected void set_contextType(ContextType value)
public SavePersistentViewData get_savePersistentViewData()
public void set_savePersistentViewData(SavePersistentViewData value)
public GetViewDataDictionary get_getViewDataDictionary()
public void set_getViewDataDictionary(GetViewDataDictionary value)
public FocusController get_focusController()
public void set_focusController(FocusController value)
public EventInterests get_IMGUIEventInterests()
public void set_IMGUIEventInterests(EventInterests value)
internal string get_name()
internal void set_name(string value)
internal TimeMsFunction get_TimeSinceStartup()
internal void set_TimeSinceStartup(TimeMsFunction value)
public bool get_keepPixelCacheOnWorldBoundChange()
public void set_keepPixelCacheOnWorldBoundChange(bool value)
public int get_IMGUIContainersCount()
public void set_IMGUIContainersCount(int value)
internal UInt32 get_version()
internal UInt32 get_repaintVersion()
protected void Dispose(bool disposing)
public long TimeSinceStartupMs()
internal long DefaultTimeSinceStartupMs()
internal VisualElement PickAll(VisualElement root, Vector2 point, List`1<VisualElement> picked)
private VisualElement PerformPick(VisualElement root, Vector2 point, List`1<VisualElement> picked)
public VisualElement LoadTemplate(string path, Dictionary`2<string, VisualElement> slots)
public VisualElement PickAll(Vector2 point, List`1<VisualElement> picked)
public VisualElement Pick(Vector2 point)
public void ValidateLayout()
public void UpdateBindings()
public void ApplyStyles()
public void DirtyStyleSheets()
public void Repaint(Event e)
internal void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
internal void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase)
internal IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase)
}
public UnityEngine.Experimental.UIElements.PanelChangedEventBase`1 : EventBase`1<T> {
private IPanel <originPanel>k__BackingField
private IPanel <destinationPanel>k__BackingField
public IPanel originPanel
public IPanel destinationPanel
public IPanel get_originPanel()
private void set_originPanel(IPanel value)
public IPanel get_destinationPanel()
private void set_destinationPanel(IPanel value)
protected void Init()
public T GetPooled(IPanel originPanel, IPanel destinationPanel)
}
public UnityEngine.Experimental.UIElements.PickingMode : Enum {
public int value__
public PickingMode Position
public PickingMode Ignore
}
public UnityEngine.Experimental.UIElements.PopupWindow : TextElement {
private VisualElement m_ContentContainer
public VisualElement contentContainer
public VisualElement get_contentContainer()
}
public UnityEngine.Experimental.UIElements.PropagationPhase : Enum {
public int value__
public PropagationPhase None
public PropagationPhase TrickleDown
public PropagationPhase Capture
public PropagationPhase AtTarget
public PropagationPhase BubbleUp
public PropagationPhase DefaultAction
}
internal UnityEngine.Experimental.UIElements.PseudoStates : Enum {
public int value__
public PseudoStates Active
public PseudoStates Hover
public PseudoStates Checked
public PseudoStates Selected
public PseudoStates Disabled
public PseudoStates Focus
}
internal UnityEngine.Experimental.UIElements.RectStylePainterParameters : ValueType {
public Rect rect
public Color color
public BorderParameters border
public RectStylePainterParameters GetDefault(VisualElement ve)
}
internal UnityEngine.Experimental.UIElements.RenderData : object {
public RenderTexture pixelCache
public Rect lastLayout
}
internal UnityEngine.Experimental.UIElements.RepaintData : object {
private Matrix4x4 <currentOffset>k__BackingField
private Vector2 <mousePosition>k__BackingField
private Rect <currentWorldClip>k__BackingField
private Event <repaintEvent>k__BackingField
public Matrix4x4 currentOffset
public Vector2 mousePosition
public Rect currentWorldClip
public Event repaintEvent
public Matrix4x4 get_currentOffset()
public void set_currentOffset(Matrix4x4 value)
public Vector2 get_mousePosition()
public void set_mousePosition(Vector2 value)
public Rect get_currentWorldClip()
public void set_currentWorldClip(Rect value)
public Event get_repaintEvent()
public void set_repaintEvent(Event value)
}
public UnityEngine.Experimental.UIElements.RepeatButton : TextElement {
private Clickable m_Clickable
public void .ctor(Action clickEvent, long delay, long interval)
public void SetAction(Action clickEvent, long delay, long interval)
}
internal UnityEngine.Experimental.UIElements.RuleMatcher : ValueType {
public StyleSheet sheet
public StyleComplexSelector complexSelector
public void .ctor(StyleSheet sheet, StyleComplexSelector complexSelector, int styleSheetIndexInStack)
public string ToString()
}
internal UnityEngine.Experimental.UIElements.SavePersistentViewData : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.ScheduledItem : object {
public Func`1<bool> timerUpdateStopCondition
public Func`1<bool> OnceCondition
public Func`1<bool> ForeverCondition
private long <startMs>k__BackingField
private long <delayMs>k__BackingField
private long <intervalMs>k__BackingField
private long <endTimeMs>k__BackingField
public long startMs
public long delayMs
public long intervalMs
public long endTimeMs
public long get_startMs()
public void set_startMs(long value)
public long get_delayMs()
public void set_delayMs(long value)
public long get_intervalMs()
public void set_intervalMs(long value)
public long get_endTimeMs()
private void set_endTimeMs(long value)
protected void ResetStartTime()
public void SetDuration(long durationMs)
public void PerformTimerUpdate(TimerState state)
internal void OnItemUnscheduled()
public bool ShouldUnschedule()
private bool <OnceCondition>m__0()
private bool <ForeverCondition>m__1()
}
public UnityEngine.Experimental.UIElements.Scroller : VisualElement {
private Action`1<float> valueChanged
private Slider <slider>k__BackingField
private ScrollerButton <lowButton>k__BackingField
private ScrollerButton <highButton>k__BackingField
internal float kDefaultPageSize
public Slider slider
public ScrollerButton lowButton
public ScrollerButton highButton
public float value
public float lowValue
public float highValue
public SliderDirection direction
public void .ctor(float lowValue, float highValue, Action`1<float> valueChanged, SliderDirection direction)
public void add_valueChanged(Action`1<float> value)
public void remove_valueChanged(Action`1<float> value)
public Slider get_slider()
private void set_slider(Slider value)
public ScrollerButton get_lowButton()
private void set_lowButton(ScrollerButton value)
public ScrollerButton get_highButton()
private void set_highButton(ScrollerButton value)
public float get_value()
public void set_value(float value)
public float get_lowValue()
public void set_lowValue(float value)
public float get_highValue()
public void set_highValue(float value)
public SliderDirection get_direction()
public void set_direction(SliderDirection value)
public void Adjust(float factor)
private void OnSliderValueChange(ChangeEvent`1<float> evt)
public void ScrollPageUp()
public void ScrollPageDown()
public void ScrollPageUp(float factor)
public void ScrollPageDown(float factor)
}
public UnityEngine.Experimental.UIElements.ScrollerButton : VisualElement {
public Clickable clickable
public void .ctor(Action clickEvent, long delay, long interval)
}
public UnityEngine.Experimental.UIElements.ScrollView : VisualElement {
private bool m_StretchContentWidth
private bool <showHorizontal>k__BackingField
private bool <showVertical>k__BackingField
private VisualElement m_ContentContainer
private VisualElement <contentViewport>k__BackingField
private Scroller <horizontalScroller>k__BackingField
private Scroller <verticalScroller>k__BackingField
private string contentViewClass
private string horizontalScrollClass
private string verticalScrollClass
public bool stretchContentWidth
public bool showHorizontal
public bool showVertical
public bool needsHorizontal
public bool needsVertical
public Vector2 scrollOffset
public float horizontalPageSize
public float verticalPageSize
private float scrollableWidth
private float scrollableHeight
public VisualElement contentViewport
public VisualElement contentView
public Scroller horizontalScroller
public Scroller verticalScroller
public VisualElement contentContainer
public bool get_stretchContentWidth()
public void set_stretchContentWidth(bool value)
public bool get_showHorizontal()
public void set_showHorizontal(bool value)
public bool get_showVertical()
public void set_showVertical(bool value)
public bool get_needsHorizontal()
public bool get_needsVertical()
public Vector2 get_scrollOffset()
public void set_scrollOffset(Vector2 value)
public float get_horizontalPageSize()
public void set_horizontalPageSize(float value)
public float get_verticalPageSize()
public void set_verticalPageSize(float value)
private float get_scrollableWidth()
private float get_scrollableHeight()
private void UpdateContentViewTransform()
public void ScrollTo(VisualElement child)
public VisualElement get_contentViewport()
private void set_contentViewport(VisualElement value)
public VisualElement get_contentView()
public Scroller get_horizontalScroller()
private void set_horizontalScroller(Scroller value)
public Scroller get_verticalScroller()
private void set_verticalScroller(Scroller value)
public VisualElement get_contentContainer()
private void AssignContentContainer(VisualElement contents)
public void SetContents(VisualElement contents)
protected internal void ExecuteDefaultAction(EventBase evt)
private void OnGeometryChanged(GeometryChangedEvent evt)
private void OnScrollWheel(WheelEvent evt)
private void <ScrollView>m__0(float value)
private void <ScrollView>m__1(float value)
}
public UnityEngine.Experimental.UIElements.SelectionType : Enum {
public int value__
public SelectionType None
public SelectionType Single
public SelectionType Multiple
}
public UnityEngine.Experimental.UIElements.Slider : BaseSlider`1<float> {
private Action`1<float> m_ValueChanged
internal float kDefaultHighValue
public Action`1<float> valueChanged
public void .ctor(float start, float end, Action`1<float> valueChanged, SliderDirection direction, float pageSize)
public void .ctor(float start, float end, SliderDirection direction, float pageSize)
public Action`1<float> get_valueChanged()
public void set_valueChanged(Action`1<float> value)
private void InternalOnValueChanged(ChangeEvent`1<float> evt)
internal float SliderLerpUnclamped(float a, float b, float interpolant)
internal float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue)
internal float SliderRange()
}
public UnityEngine.Experimental.UIElements.SliderDirection : Enum {
public int value__
public SliderDirection Horizontal
public SliderDirection Vertical
}
public UnityEngine.Experimental.UIElements.SliderInt : BaseSlider`1<int> {
internal int kDefaultHighValue
public float pageSize
public void .ctor(int start, int end, SliderDirection direction, float pageSize)
public float get_pageSize()
public void set_pageSize(float value)
internal int SliderLerpUnclamped(int a, int b, float interpolant)
internal float SliderNormalizeValue(int currentValue, int lowerValue, int higherValue)
internal int SliderRange()
internal void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos)
}
public UnityEngine.Experimental.UIElements.Spacing : ValueType {
public float left
public float top
public float right
public float bottom
public float horizontal
public float vertical
public void .ctor(float left, float top, float right, float bottom)
public float get_horizontal()
public float get_vertical()
public Rect op_Addition(Rect r, Spacing a)
public Rect op_Subtraction(Rect r, Spacing a)
}
internal UnityEngine.Experimental.UIElements.StyleCache : object {
private Dictionary`2<long, VisualElementStylesData> s_StyleCache
public bool TryGetValue(long hash, VisualElementStylesData& data)
public void SetValue(long hash, VisualElementStylesData data)
public void ClearStyleCache()
}
public UnityEngine.Experimental.UIElements.StyleEnums.Align : Enum {
public int value__
public Align Auto
public Align FlexStart
public Align Center
public Align FlexEnd
public Align Stretch
}
public UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection : Enum {
public int value__
public FlexDirection Column
public FlexDirection ColumnReverse
public FlexDirection Row
public FlexDirection RowReverse
}
public UnityEngine.Experimental.UIElements.StyleEnums.ImageScaleMode : Enum {
public int value__
public ImageScaleMode StretchToFill
public ImageScaleMode ScaleAndCrop
public ImageScaleMode ScaleToFit
}
public UnityEngine.Experimental.UIElements.StyleEnums.Justify : Enum {
public int value__
public Justify FlexStart
public Justify Center
public Justify FlexEnd
public Justify SpaceBetween
public Justify SpaceAround
}
public UnityEngine.Experimental.UIElements.StyleEnums.Overflow : Enum {
public int value__
public Overflow Visible
public Overflow Hidden
}
internal UnityEngine.Experimental.UIElements.StyleEnums.Position : Enum {
public int value__
public Position Relative
public Position Absolute
}
public UnityEngine.Experimental.UIElements.StyleEnums.PositionType : Enum {
public int value__
public PositionType Relative
public PositionType Absolute
public PositionType Manual
}
public UnityEngine.Experimental.UIElements.StyleEnums.Visibility : Enum {
public int value__
public Visibility Visible
public Visibility Hidden
}
public UnityEngine.Experimental.UIElements.StyleEnums.Wrap : Enum {
public int value__
public Wrap NoWrap
public Wrap Wrap
public Wrap WrapReverse
}
internal UnityEngine.Experimental.UIElements.StyleMatchingContext : object {
public List`1<StyleSheet> styleSheetStack
public VisualElement currentElement
public Action`2<VisualElement, MatchResultInfo> processResult
public void .ctor(Action`2<VisualElement, MatchResultInfo> processResult)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.CustomProperty : ValueType {
public int specificity
public StyleValueHandle[] handles
public StyleSheet data
}
internal UnityEngine.Experimental.UIElements.StyleSheets.FloatOrKeyword : ValueType {
private bool <isKeyword>k__BackingField
private StyleValueKeyword <keyword>k__BackingField
private float <floatValue>k__BackingField
public bool isKeyword
public StyleValueKeyword keyword
public float floatValue
public void .ctor(StyleValueKeyword kw)
public void .ctor(float v)
public bool get_isKeyword()
private void set_isKeyword(bool value)
public StyleValueKeyword get_keyword()
private void set_keyword(StyleValueKeyword value)
public float get_floatValue()
private void set_floatValue(float value)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.HandlesApplicatorFunction`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public IAsyncResult BeginInvoke(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property, AsyncCallback callback, object object)
public void EndInvoke(StyleValue`1& property, IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.HierarchyTraversal : object {
public void Traverse(VisualElement element)
public void TraverseRecursive(VisualElement element, int depth)
protected void Recurse(VisualElement element, int depth)
}
public UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle {
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.MatchResultInfo : ValueType {
public bool success
public PseudoStates triggerPseudoMask
public PseudoStates dependencyPseudoMask
public void .ctor(bool success, PseudoStates triggerPseudoMask, PseudoStates dependencyPseudoMask)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.SelectorMatchRecord : ValueType {
public StyleSheet sheet
public int styleSheetIndexInStack
public StyleComplexSelector complexSelector
public void .ctor(StyleSheet sheet, int styleSheetIndexInStack)
public int Compare(SelectorMatchRecord a, SelectorMatchRecord b)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.ShorthandApplicatorFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(StyleSheet sheet, StyleValueHandle[] handles, int specificity, VisualElementStylesData styleData)
public IAsyncResult BeginInvoke(StyleSheet sheet, StyleValueHandle[] handles, int specificity, VisualElementStylesData styleData, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleComplexSelectorExtensions : object {
private Dictionary`2<string, PseudoStateData> s_PseudoStates
public void CachePseudoStateMasks(StyleComplexSelector complexSelector)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyApplyMode : Enum {
public int value__
public StylePropertyApplyMode Copy
public StylePropertyApplyMode CopyIfEqualOrGreaterSpecificity
public StylePropertyApplyMode CopyIfNotInline
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID : Enum {
public int value__
public StylePropertyID Unknown
public StylePropertyID MarginLeft
public StylePropertyID MarginTop
public StylePropertyID MarginRight
public StylePropertyID MarginBottom
public StylePropertyID PaddingLeft
public StylePropertyID PaddingTop
public StylePropertyID PaddingRight
public StylePropertyID PaddingBottom
public StylePropertyID Position
public StylePropertyID PositionType
public StylePropertyID PositionLeft
public StylePropertyID PositionTop
public StylePropertyID PositionRight
public StylePropertyID PositionBottom
public StylePropertyID Width
public StylePropertyID Height
public StylePropertyID MinWidth
public StylePropertyID MinHeight
public StylePropertyID MaxWidth
public StylePropertyID MaxHeight
public StylePropertyID FlexBasis
public StylePropertyID FlexGrow
public StylePropertyID FlexShrink
public StylePropertyID BorderLeftWidth
public StylePropertyID BorderTopWidth
public StylePropertyID BorderRightWidth
public StylePropertyID BorderBottomWidth
public StylePropertyID BorderTopLeftRadius
public StylePropertyID BorderTopRightRadius
public StylePropertyID BorderBottomRightRadius
public StylePropertyID BorderBottomLeftRadius
public StylePropertyID FlexDirection
public StylePropertyID FlexWrap
public StylePropertyID JustifyContent
public StylePropertyID AlignContent
public StylePropertyID AlignSelf
public StylePropertyID AlignItems
public StylePropertyID UnityTextAlign
public StylePropertyID TextClipping
public StylePropertyID Font
public StylePropertyID FontSize
public StylePropertyID FontStyleAndWeight
public StylePropertyID BackgroundScaleMode
public StylePropertyID Cursor
public StylePropertyID Visibility
public StylePropertyID WordWrap
public StylePropertyID BackgroundImage
public StylePropertyID Color
public StylePropertyID BackgroundColor
public StylePropertyID BorderColor
public StylePropertyID Overflow
public StylePropertyID SliceLeft
public StylePropertyID SliceTop
public StylePropertyID SliceRight
public StylePropertyID SliceBottom
public StylePropertyID Opacity
public StylePropertyID BorderRadius
public StylePropertyID Flex
public StylePropertyID Margin
public StylePropertyID Padding
public StylePropertyID Custom
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleSelectorHelper : object {
public MatchResultInfo MatchesSelector(VisualElement element, StyleSelector selector)
public bool MatchRightToLeft(VisualElement element, StyleComplexSelector complexSelector, Action`2<VisualElement, MatchResultInfo> processResult)
private void FastLookup(IDictionary`2<string, StyleComplexSelector> table, List`1<SelectorMatchRecord> matchedSelectors, StyleMatchingContext context, string input, SelectorMatchRecord& record)
public void FindMatches(StyleMatchingContext context, List`1<SelectorMatchRecord> matchedSelectors)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetApplicator : object {
internal GetCursorIdFunction getCursorIdFunc
private void Apply(T val, int specificity, StyleValue`1& property)
public void ApplyValue(int specificity, StyleValue`1& property, T value)
public void ApplyBool(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyFloat(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyFloatOrKeyword(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyInt(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyEnum(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyColor(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void CompileCursor(StyleSheet sheet, StyleValueHandle[] handles, Single& hotspotX, Single& hotspotY, Int32& cursorId, Texture2D& texture)
public void ApplyCursor(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyFont(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
public void ApplyImage(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property)
private bool TryGetSourceFromHandle(StyleSheet sheet, StyleValueHandle handle, Texture2D& source)
public bool CompileFlexShorthand(StyleSheet sheet, StyleValueHandle[] handles, Single& grow, Single& shrink, FloatOrKeyword& basis)
public void ApplyFlexShorthand(StyleSheet sheet, StyleValueHandle[] handles, int specificity, VisualElementStylesData styleData)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetCache : object {
private SheetHandleKeyComparer s_Comparer
private Dictionary`2<SheetHandleKey, int> s_EnumToIntCache
private Dictionary`2<SheetHandleKey, StylePropertyID[]> s_RulePropertyIDsCache
private Dictionary`2<string, StylePropertyID> s_NameToIDCache
private Dictionary`2<string, string> s_DeprecatedNames
internal void ClearCaches()
internal int GetEnumValue(StyleSheet sheet, StyleValueHandle handle)
internal StylePropertyID[] GetPropertyIDs(StyleSheet sheet, int ruleIndex)
private string MapDeprecatedPropertyName(string name, string styleSheetName, int line)
private StylePropertyID GetPropertyID(StyleSheet sheet, StyleRule rule, int index)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetExtensions : object {
public void Apply(StyleSheet sheet, StyleValueHandle[] handles, int specificity, StyleValue`1& property, HandlesApplicatorFunction`1<T> applicatorFunc)
public void ApplyShorthand(StyleSheet sheet, StyleValueHandle[] handles, int specificity, VisualElementStylesData styleData, ShorthandApplicatorFunction applicatorFunc)
public string ReadAsString(StyleSheet sheet, StyleValueHandle handle)
}
public UnityEngine.Experimental.UIElements.StyleSheets.StyleValue`1 : ValueType {
internal int specificity
public T value
private StyleValue`1<T> defaultStyle
public StyleValue`1<T> nil
public void .ctor(T value)
internal void .ctor(T value, int specifity)
public StyleValue`1<T> get_nil()
public T GetSpecifiedValueOrDefault(T defaultValue)
public T op_Implicit(StyleValue`1<T> sp)
internal bool Apply(StyleValue`1<T> other, StylePropertyApplyMode mode)
internal bool Apply(T otherValue, int otherSpecificity, StylePropertyApplyMode mode)
public StyleValue`1<T> op_Implicit(T value)
public StyleValue`1<T> Create(T value)
public string ToString()
}
internal UnityEngine.Experimental.UIElements.StyleSheets.StyleValueUtils : object {
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<float> other)
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<int> other)
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<bool> other)
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<Color> other)
public bool ApplyAndCompare(StyleValue`1& current, StyleValue`1<T> other)
public bool ApplyAndCompareObject(StyleValue`1& current, StyleValue`1<T> other)
}
internal UnityEngine.Experimental.UIElements.StyleSheets.VisualElementStylesData : object {
public VisualElementStylesData none
internal bool isShared
internal YogaNode yogaNode
internal Dictionary`2<string, CustomProperty> m_CustomProperties
internal StyleValue`1<float> width
internal StyleValue`1<float> height
internal StyleValue`1<float> maxWidth
internal StyleValue`1<float> maxHeight
internal StyleValue`1<float> minWidth
internal StyleValue`1<float> minHeight
internal StyleValue`1<FloatOrKeyword> flexBasis
internal StyleValue`1<float> flexShrink
internal StyleValue`1<float> flexGrow
internal StyleValue`1<int> overflow
internal StyleValue`1<float> positionLeft
internal StyleValue`1<float> positionTop
internal StyleValue`1<float> positionRight
internal StyleValue`1<float> positionBottom
internal StyleValue`1<float> marginLeft
internal StyleValue`1<float> marginTop
internal StyleValue`1<float> marginRight
internal StyleValue`1<float> marginBottom
internal StyleValue`1<float> paddingLeft
internal StyleValue`1<float> paddingTop
internal StyleValue`1<float> paddingRight
internal StyleValue`1<float> paddingBottom
internal StyleValue`1<int> positionType
internal StyleValue`1<int> alignSelf
internal StyleValue`1<int> unityTextAlign
internal StyleValue`1<int> fontStyleAndWeight
internal StyleValue`1<int> textClipping
internal StyleValue`1<Font> font
internal StyleValue`1<int> fontSize
internal StyleValue`1<bool> wordWrap
internal StyleValue`1<Color> color
internal StyleValue`1<int> flexDirection
internal StyleValue`1<Color> backgroundColor
internal StyleValue`1<Color> borderColor
internal StyleValue`1<Texture2D> backgroundImage
internal StyleValue`1<int> backgroundScaleMode
internal StyleValue`1<int> alignItems
internal StyleValue`1<int> alignContent
internal StyleValue`1<int> justifyContent
internal StyleValue`1<int> flexWrap
internal StyleValue`1<float> borderLeftWidth
internal StyleValue`1<float> borderTopWidth
internal StyleValue`1<float> borderRightWidth
internal StyleValue`1<float> borderBottomWidth
internal StyleValue`1<float> borderTopLeftRadius
internal StyleValue`1<float> borderTopRightRadius
internal StyleValue`1<float> borderBottomRightRadius
internal StyleValue`1<float> borderBottomLeftRadius
internal StyleValue`1<int> sliceLeft
internal StyleValue`1<int> sliceTop
internal StyleValue`1<int> sliceRight
internal StyleValue`1<int> sliceBottom
internal StyleValue`1<float> opacity
internal StyleValue`1<CursorStyle> cursor
internal StyleValue`1<int> visibility
internal Align DefaultAlignContent
internal Align DefaultAlignItems
private HandlesApplicatorFunction`1<int> <>f__mg$cache0
private HandlesApplicatorFunction`1<int> <>f__mg$cache1
private HandlesApplicatorFunction`1<int> <>f__mg$cache2
private HandlesApplicatorFunction`1<Texture2D> <>f__mg$cache3
private ShorthandApplicatorFunction <>f__mg$cache4
private HandlesApplicatorFunction`1<FloatOrKeyword> <>f__mg$cache5
private HandlesApplicatorFunction`1<float> <>f__mg$cache6
private HandlesApplicatorFunction`1<float> <>f__mg$cache7
private HandlesApplicatorFunction`1<Font> <>f__mg$cache8
private HandlesApplicatorFunction`1<int> <>f__mg$cache9
private HandlesApplicatorFunction`1<int> <>f__mg$cacheA
private HandlesApplicatorFunction`1<int> <>f__mg$cacheB
private HandlesApplicatorFunction`1<int> <>f__mg$cacheC
private HandlesApplicatorFunction`1<float> <>f__mg$cacheD
private HandlesApplicatorFunction`1<int> <>f__mg$cacheE
private HandlesApplicatorFunction`1<float> <>f__mg$cacheF
private HandlesApplicatorFunction`1<float> <>f__mg$cache10
private HandlesApplicatorFunction`1<float> <>f__mg$cache11
private HandlesApplicatorFunction`1<float> <>f__mg$cache12
private HandlesApplicatorFunction`1<float> <>f__mg$cache13
private HandlesApplicatorFunction`1<float> <>f__mg$cache14
private HandlesApplicatorFunction`1<float> <>f__mg$cache15
private HandlesApplicatorFunction`1<float> <>f__mg$cache16
private HandlesApplicatorFunction`1<int> <>f__mg$cache17
private HandlesApplicatorFunction`1<float> <>f__mg$cache18
private HandlesApplicatorFunction`1<float> <>f__mg$cache19
private HandlesApplicatorFunction`1<float> <>f__mg$cache1A
private HandlesApplicatorFunction`1<float> <>f__mg$cache1B
private HandlesApplicatorFunction`1<int> <>f__mg$cache1C
private HandlesApplicatorFunction`1<int> <>f__mg$cache1D
private HandlesApplicatorFunction`1<float> <>f__mg$cache1E
private HandlesApplicatorFunction`1<float> <>f__mg$cache1F
private HandlesApplicatorFunction`1<float> <>f__mg$cache20
private HandlesApplicatorFunction`1<float> <>f__mg$cache21
private HandlesApplicatorFunction`1<int> <>f__mg$cache22
private HandlesApplicatorFunction`1<int> <>f__mg$cache23
private HandlesApplicatorFunction`1<Color> <>f__mg$cache24
private HandlesApplicatorFunction`1<float> <>f__mg$cache25
private HandlesApplicatorFunction`1<bool> <>f__mg$cache26
private HandlesApplicatorFunction`1<Color> <>f__mg$cache27
private HandlesApplicatorFunction`1<int> <>f__mg$cache28
private HandlesApplicatorFunction`1<Color> <>f__mg$cache29
private HandlesApplicatorFunction`1<float> <>f__mg$cache2A
private HandlesApplicatorFunction`1<float> <>f__mg$cache2B
private HandlesApplicatorFunction`1<float> <>f__mg$cache2C
private HandlesApplicatorFunction`1<float> <>f__mg$cache2D
private HandlesApplicatorFunction`1<float> <>f__mg$cache2E
private HandlesApplicatorFunction`1<float> <>f__mg$cache2F
private HandlesApplicatorFunction`1<float> <>f__mg$cache30
private HandlesApplicatorFunction`1<float> <>f__mg$cache31
private HandlesApplicatorFunction`1<CursorStyle> <>f__mg$cache32
private HandlesApplicatorFunction`1<int> <>f__mg$cache33
private HandlesApplicatorFunction`1<int> <>f__mg$cache34
private HandlesApplicatorFunction`1<int> <>f__mg$cache35
private HandlesApplicatorFunction`1<int> <>f__mg$cache36
private HandlesApplicatorFunction`1<float> <>f__mg$cache37
private HandlesApplicatorFunction`1<float> <>f__mg$cache38
private HandlesApplicatorFunction`1<float> <>f__mg$cache39
private HandlesApplicatorFunction`1<float> <>f__mg$cache3A
private HandlesApplicatorFunction`1<float> <>f__mg$cache3B
private HandlesApplicatorFunction`1<int> <>f__mg$cache3C
private HandlesApplicatorFunction`1<float> <>f__mg$cache3D
private HandlesApplicatorFunction`1<int> <>f__mg$cache3E
private HandlesApplicatorFunction`1<bool> <>f__mg$cache3F
private HandlesApplicatorFunction`1<Color> <>f__mg$cache40
private HandlesApplicatorFunction`1<Texture2D> <>f__mg$cache41
public void .ctor(bool isShared)
public void Apply(VisualElementStylesData other, StylePropertyApplyMode mode)
public void WriteToGUIStyle(GUIStyle style)
private void AssignState(GUIStyleState state)
private void AssignRect(RectOffset rect, StyleValue`1& left, StyleValue`1& top, StyleValue`1& right, StyleValue`1& bottom)
private void AssignRect(RectOffset rect, StyleValue`1& left, StyleValue`1& top, StyleValue`1& right, StyleValue`1& bottom)
public void ApplyLayoutValues()
public StyleValue`1<float> FlexBasisToFloat()
public void SyncWithLayout(YogaNode targetNode)
internal void ApplyRule(StyleSheet registry, int specificity, StyleRule rule, StylePropertyID[] propertyIDs)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
public void ApplyCustomProperty(string propertyName, StyleValue`1& target)
internal void ApplyCustomProperty(string propertyName, StyleValue`1& target, StyleValueType valueType, HandlesApplicatorFunction`1<T> applicatorFunc)
}
internal UnityEngine.Experimental.UIElements.TemplateAsset : VisualElementAsset {
private string m_TemplateAlias
private List`1<SlotUsageEntry> m_SlotUsages
public string templateAlias
internal List`1<SlotUsageEntry> slotUsages
public void .ctor(string templateAlias)
public string get_templateAlias()
public void set_templateAlias(string value)
internal List`1<SlotUsageEntry> get_slotUsages()
internal void set_slotUsages(List`1<SlotUsageEntry> value)
public void AddSlotUsage(string slotName, int resId)
}
public UnityEngine.Experimental.UIElements.TemplateContainer : BindableElement {
private string <templateId>k__BackingField
private VisualElement m_ContentContainer
public string templateId
public VisualElement contentContainer
public void .ctor(string templateId)
public string get_templateId()
private void set_templateId(string value)
public VisualElement get_contentContainer()
internal void SetContentContainer(VisualElement content)
}
internal UnityEngine.Experimental.UIElements.TextEditorEngine : TextEditor {
private OnDetectFocusChangeFunction m_DetectFocusChangeFunction
private OnIndexChangeFunction m_IndexChangeFunction
internal Rect localPosition
public void .ctor(OnDetectFocusChangeFunction detectFocusChange, OnIndexChangeFunction indexChangeFunction)
internal Rect get_localPosition()
internal void OnDetectFocusChange()
internal void OnCursorIndexChange()
internal void OnSelectIndexChange()
}
internal UnityEngine.Experimental.UIElements.TextEditorEventHandler : object {
private TextEditorEngine <editorEngine>k__BackingField
private ITextInputField <textInputField>k__BackingField
protected TextEditorEngine editorEngine
protected ITextInputField textInputField
protected void .ctor(TextEditorEngine editorEngine, ITextInputField textInputField)
protected TextEditorEngine get_editorEngine()
private void set_editorEngine(TextEditorEngine value)
protected ITextInputField get_textInputField()
private void set_textInputField(ITextInputField value)
public void ExecuteDefaultActionAtTarget(EventBase evt)
public void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.Experimental.UIElements.TextElement : VisualElement {
internal string k_TextElementClass
private string m_Text
public string text
public string get_text()
public void set_text(string value)
protected void DoRepaint(IStylePainter painter)
public Vector2 MeasureTextSize(string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode)
internal Vector2 MeasureVisualElementTextSize(VisualElement ve, string textToMeasure, float width, MeasureMode widthMode, float height, MeasureMode heightMode)
protected internal Vector2 DoMeasure(float width, MeasureMode widthMode, float height, MeasureMode heightMode)
}
public UnityEngine.Experimental.UIElements.TextField : TextInputFieldBase`1<string> {
private bool m_Multiline
public bool multiline
public bool isPasswordField
public string value
public void .ctor(int maxLength, bool multiline, bool isPasswordField, char maskChar)
public bool get_multiline()
public void set_multiline(bool value)
public void set_isPasswordField(bool value)
public string get_value()
public void set_value(string value)
public void SetValueWithoutNotify(string newValue)
public void SelectRange(int cursorIndex, int selectionIndex)
public void OnPersistentDataReady()
internal void SyncTextEngine()
protected void DoRepaint(IStylePainter painter)
protected internal void ExecuteDefaultActionAtTarget(EventBase evt)
protected internal void ExecuteDefaultAction(EventBase evt)
}
public UnityEngine.Experimental.UIElements.TextInputFieldBase`1 : BaseField`1<T> {
private string SelectionColorProperty
private string CursorColorProperty
private StyleValue`1<Color> m_SelectionColor
private StyleValue`1<Color> m_CursorColor
private string m_Text
private bool <isPasswordField>k__BackingField
private int <maxLength>k__BackingField
internal int kMaxLengthNone
private bool <doubleClickSelectsWord>k__BackingField
private bool <tripleClickSelectsLine>k__BackingField
private bool <isDelayed>k__BackingField
private TextEditorEventHandler <editorEventHandler>k__BackingField
private TextEditorEngine <editorEngine>k__BackingField
private char <maskChar>k__BackingField
private bool UnityEngine.Experimental.UIElements.ITextInputField.hasFocus
private string UnityEngine.Experimental.UIElements.ITextElement.text
public string text
public bool isPasswordField
public Color selectionColor
public Color cursorColor
public int cursorIndex
public int selectIndex
public int maxLength
public bool doubleClickSelectsWord
public bool tripleClickSelectsLine
public bool isDelayed
private bool touchScreenTextField
internal bool hasFocus
internal TextEditorEventHandler editorEventHandler
internal TextEditorEngine editorEngine
public char maskChar
public void .ctor(int maxLength, char maskChar)
public string get_text()
protected void set_text(string value)
public void SelectAll()
private void UpdateText(string value)
public bool get_isPasswordField()
public void set_isPasswordField(bool value)
public Color get_selectionColor()
public Color get_cursorColor()
public int get_cursorIndex()
public int get_selectIndex()
public int get_maxLength()
public void set_maxLength(int value)
public bool get_doubleClickSelectsWord()
public void set_doubleClickSelectsWord(bool value)
public bool get_tripleClickSelectsLine()
public void set_tripleClickSelectsLine(bool value)
public bool get_isDelayed()
public void set_isDelayed(bool value)
private bool get_touchScreenTextField()
internal bool get_hasFocus()
internal TextEditorEventHandler get_editorEventHandler()
private void set_editorEventHandler(TextEditorEventHandler value)
internal TextEditorEngine get_editorEngine()
private void set_editorEngine(TextEditorEngine value)
public char get_maskChar()
public void set_maskChar(char value)
private StatusFlags CutCopyActionStatus(MenuAction a)
private StatusFlags PasteActionStatus(MenuAction a)
private void Cut(MenuAction a)
private void Copy(MenuAction a)
private void Paste(MenuAction a)
protected void OnStyleResolved(ICustomStyle style)
internal void SyncTextEngine()
internal string CullString(string s)
protected void DoRepaint(IStylePainter painter)
internal void DrawWithTextSelectionAndCursor(IStylePainterInternal painter, string newText)
internal bool AcceptCharacter(char c)
protected void BuildContextualMenu(ContextualMenuPopulateEvent evt)
private void OnDetectFocusChange()
private void OnCursorIndexChange()
protected internal Vector2 DoMeasure(float width, MeasureMode widthMode, float height, MeasureMode heightMode)
protected internal void ExecuteDefaultActionAtTarget(EventBase evt)
protected internal void ExecuteDefaultAction(EventBase evt)
private bool UnityEngine.Experimental.UIElements.ITextInputField.get_hasFocus()
private string UnityEngine.Experimental.UIElements.ITextElement.get_text()
private void UnityEngine.Experimental.UIElements.ITextElement.set_text(string value)
private void UnityEngine.Experimental.UIElements.ITextInputField.SyncTextEngine()
private bool UnityEngine.Experimental.UIElements.ITextInputField.AcceptCharacter(char c)
private string UnityEngine.Experimental.UIElements.ITextInputField.CullString(string s)
private void UnityEngine.Experimental.UIElements.ITextInputField.UpdateText(string value)
}
internal UnityEngine.Experimental.UIElements.TextNative : object {
public Vector2 GetCursorPosition(TextNativeSettings settings, Rect rect, int cursorIndex)
public float ComputeTextWidth(TextNativeSettings settings)
public float ComputeTextHeight(TextNativeSettings settings)
public NativeArray`1<TextVertex> GetVertices(TextNativeSettings settings)
public Vector2 GetOffset(TextNativeSettings settings, Rect screenRect)
public float ComputeTextScaling(Matrix4x4 worldMatrix)
private float DoComputeTextWidth(TextNativeSettings settings)
private float DoComputeTextHeight(TextNativeSettings settings)
private Vector2 DoGetCursorPosition(TextNativeSettings settings, Rect rect, int cursorPosition)
private void GetVertices(TextNativeSettings settings, IntPtr buffer, int vertexSize, Int32& vertexCount)
private Vector2 DoGetOffset(TextNativeSettings settings, Rect rect)
private float DoComputeTextWidth_Injected(TextNativeSettings& settings)
private float DoComputeTextHeight_Injected(TextNativeSettings& settings)
private void DoGetCursorPosition_Injected(TextNativeSettings& settings, Rect& rect, int cursorPosition, Vector2& ret)
private void GetVertices_Injected(TextNativeSettings& settings, IntPtr buffer, int vertexSize, Int32& vertexCount)
private void DoGetOffset_Injected(TextNativeSettings& settings, Rect& rect, Vector2& ret)
}
internal UnityEngine.Experimental.UIElements.TextNativeSettings : ValueType {
public string text
public Font font
public int size
public float scaling
public FontStyle style
public Color color
public TextAnchor anchor
public bool wordWrap
public float wordWrapWidth
public bool richText
}
internal UnityEngine.Experimental.UIElements.TextStylePainterParameters : ValueType {
public Rect rect
public string text
public Font font
public int fontSize
public FontStyle fontStyle
public Color fontColor
public TextAnchor anchor
public bool wordWrap
public float wordWrapWidth
public bool richText
public TextClipping clipping
public TextStylePainterParameters GetDefault(VisualElement ve, string text)
public TextStylePainterParameters GetDefault(TextElement te)
public TextNativeSettings GetTextNativeSettings(float scaling)
}
internal UnityEngine.Experimental.UIElements.TextureStylePainterParameters : ValueType {
public Rect rect
public Rect uv
public Color color
public Texture texture
public ScaleMode scaleMode
public BorderParameters border
public int sliceLeft
public int sliceTop
public int sliceRight
public int sliceBottom
public bool usePremultiplyAlpha
public TextureStylePainterParameters GetDefault(VisualElement ve)
}
internal UnityEngine.Experimental.UIElements.TextVertex : ValueType {
public Vector3 position
public Color32 color
public Vector2 uv0
}
internal UnityEngine.Experimental.UIElements.TimeMsFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public long Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public long EndInvoke(IAsyncResult result)
}
internal UnityEngine.Experimental.UIElements.TimerEventScheduler : object {
private List`1<ScheduledItem> m_ScheduledItems
private bool m_TransactionMode
private List`1<ScheduledItem> m_ScheduleTransactions
private HashSet`1<ScheduledItem> m_UnscheduleTransactions
internal bool disableThrottling
private int m_LastUpdatedIndex
public void Schedule(IScheduledItem item)
public IScheduledItem ScheduleOnce(Action`1<TimerState> timerUpdateEvent, long delayMs)
public IScheduledItem ScheduleUntil(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, Func`1<bool> stopCondition)
public IScheduledItem ScheduleForDuration(Action`1<TimerState> timerUpdateEvent, long delayMs, long intervalMs, long durationMs)
private bool RemovedScheduledItemAt(int index)
public void Unschedule(IScheduledItem item)
private bool PrivateUnSchedule(ScheduledItem sItem)
public void UpdateScheduledEvents()
}
public UnityEngine.Experimental.UIElements.TimerState : ValueType {
public long start
public long now
public long deltaTime
public long get_deltaTime()
}
public UnityEngine.Experimental.UIElements.Toggle : BaseField`1<bool> {
private Action m_ClickEvent
private Label m_Label
public string text
public void .ctor(Action clickEvent)
public string get_text()
public void set_text(string value)
public void SetValueWithoutNotify(bool newValue)
public void OnToggle(Action clickEvent)
private void InternalOnValueChanged(ChangeEvent`1<bool> evt)
private void OnClick()
protected internal void ExecuteDefaultActionAtTarget(EventBase evt)
}
public UnityEngine.Experimental.UIElements.TooltipEvent : EventBase`1<TooltipEvent> {
private string <tooltip>k__BackingField
private Rect <rect>k__BackingField
public string tooltip
public Rect rect
public string get_tooltip()
public void set_tooltip(string value)
public Rect get_rect()
public void set_rect(Rect value)
protected void Init()
internal TooltipEvent GetPooled(string tooltip, Rect rect)
}
internal UnityEngine.Experimental.UIElements.TouchScreenTextEditorEventHandler : TextEditorEventHandler {
private string m_SecureText
public string secureText
public void .ctor(TextEditorEngine editorEngine, ITextInputField textInputField)
public string get_secureText()
public void set_secureText(string value)
public void ExecuteDefaultActionAtTarget(EventBase evt)
}
public UnityEngine.Experimental.UIElements.TrickleDown : Enum {
public int value__
public TrickleDown NoTrickleDown
public TrickleDown TrickleDown
}
internal UnityEngine.Experimental.UIElements.UIElementsUtility : object {
private Stack`1<IMGUIContainer> s_ContainerStack
private Dictionary`2<int, Panel> s_UIElementsCache
private Event s_EventInstance
internal Color editorPlayModeTintColor
private Action <>f__mg$cache0
private Action <>f__mg$cache1
private Func`3<int, IntPtr, bool> <>f__mg$cache2
private Action <>f__mg$cache3
private Func`2<Exception, bool> <>f__mg$cache4
private Action <>f__mg$cache5
private void EnabledStateChanged()
private void TakeCapture()
private void ReleaseCapture()
private bool ProcessEvent(int instanceID, IntPtr nativeEventPtr)
public void RemoveCachedPanel(int instanceID)
private void CleanupRoots()
private bool EndContainerGUIFromException(Exception exception)
internal void BeginContainerGUI(LayoutCache cache, Event evt, IMGUIContainer container)
internal void EndContainerGUI(Event evt)
internal ContextType GetGUIContextType()
internal EventBase CreateEvent(Event systemEvent)
internal EventBase CreateEvent(Event systemEvent, EventType eventType)
private bool DoDispatch(BaseVisualElementPanel panel)
internal Enumerator<int, Panel> GetPanelsIterator()
internal Panel FindOrCreatePanel(ScriptableObject ownerObject, ContextType contextType, IDataWatchService dataWatch)
internal Panel FindOrCreatePanel(ScriptableObject ownerObject)
}
public UnityEngine.Experimental.UIElements.UQuery : object {
private FirstQueryMatcher s_First
private LastQueryMatcher s_Last
private IndexQueryMatcher s_Index
}
public UnityEngine.Experimental.UIElements.UQueryExtensions : object {
public T Q(VisualElement e, string name, String[] classes)
public T Q(VisualElement e, string name, string className)
public VisualElement Q(VisualElement e, string name, String[] classes)
public VisualElement Q(VisualElement e, string name, string className)
public QueryBuilder`1<VisualElement> Query(VisualElement e, string name, String[] classes)
public QueryBuilder`1<VisualElement> Query(VisualElement e, string name, string className)
public QueryBuilder`1<T> Query(VisualElement e, string name, String[] classes)
public QueryBuilder`1<T> Query(VisualElement e, string name, string className)
public QueryBuilder`1<VisualElement> Query(VisualElement e)
}
public UnityEngine.Experimental.UIElements.UxmlAttributeDescription : object {
protected string k_XmlSchemaNamespace
private string <name>k__BackingField
private String[] <obsoleteNames>k__BackingField
private string <type>k__BackingField
private string <typeNamespace>k__BackingField
private Use <use>k__BackingField
private UxmlTypeRestriction <restriction>k__BackingField
public string name
public String[] obsoleteNames
public string type
public string typeNamespace
public string defaultValueAsString
public Use use
public UxmlTypeRestriction restriction
public string get_name()
public void set_name(string value)
public String[] get_obsoleteNames()
public void set_obsoleteNames(String[] value)
public string get_type()
protected void set_type(string value)
public string get_typeNamespace()
protected void set_typeNamespace(string value)
public string get_defaultValueAsString()
public Use get_use()
public void set_use(Use value)
public UxmlTypeRestriction get_restriction()
public void set_restriction(UxmlTypeRestriction value)
internal bool TryGetValueFromBagAsString(IUxmlAttributes bag, CreationContext cc, String& value)
protected T GetValueFromBag(IUxmlAttributes bag, CreationContext cc, Func`3<string, T, T> converterFunc, T defaultValue)
}
public UnityEngine.Experimental.UIElements.UxmlBoolAttributeDescription : UxmlAttributeDescription {
private bool <defaultValue>k__BackingField
private Func`3<string, bool, bool> <>f__mg$cache0
public bool defaultValue
public string defaultValueAsString
public bool get_defaultValue()
public void set_defaultValue(bool value)
public string get_defaultValueAsString()
public bool GetValueFromBag(IUxmlAttributes bag)
public bool GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
private bool ConvertValueToBool(string v, bool defaultValue)
}
public UnityEngine.Experimental.UIElements.UxmlChildElementDescription : object {
private string <elementName>k__BackingField
private string <elementNamespace>k__BackingField
public string elementName
public string elementNamespace
public void .ctor(Type t)
public string get_elementName()
protected void set_elementName(string value)
public string get_elementNamespace()
protected void set_elementNamespace(string value)
}
public UnityEngine.Experimental.UIElements.UxmlColorAttributeDescription : UxmlAttributeDescription {
private Color <defaultValue>k__BackingField
private Func`3<string, Color, Color> <>f__mg$cache0
public Color defaultValue
public string defaultValueAsString
public Color get_defaultValue()
public void set_defaultValue(Color value)
public string get_defaultValueAsString()
public Color GetValueFromBag(IUxmlAttributes bag)
public Color GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
private Color ConvertValueToColor(string v, Color defaultValue)
}
public UnityEngine.Experimental.UIElements.UxmlDoubleAttributeDescription : UxmlAttributeDescription {
private double <defaultValue>k__BackingField
private Func`3<string, double, double> <>f__mg$cache0
public double defaultValue
public string defaultValueAsString
public double get_defaultValue()
public void set_defaultValue(double value)
public string get_defaultValueAsString()
public double GetValueFromBag(IUxmlAttributes bag)
public double GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
private double ConvertValueToDouble(string v, double defaultValue)
}
public UnityEngine.Experimental.UIElements.UxmlEnumAttributeDescription`1 : UxmlAttributeDescription {
private T <defaultValue>k__BackingField
private Func`3<string, T, T> <>f__mg$cache0
public T defaultValue
public string defaultValueAsString
public T get_defaultValue()
public void set_defaultValue(T value)
public string get_defaultValueAsString()
public T GetValueFromBag(IUxmlAttributes bag)
public T GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
private U ConvertValueToEnum(string v, U defaultValue)
}
public UnityEngine.Experimental.UIElements.UxmlEnumeration : UxmlTypeRestriction {
public List`1<string> values
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.Experimental.UIElements.UxmlFactory`2 : object {
protected TTraits m_Traits
private bool s_WarningLogged
public string uxmlName
public string uxmlNamespace
public string uxmlQualifiedName
public bool canHaveAnyAttribute
public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public Type CreatesType
public string get_uxmlName()
public string get_uxmlNamespace()
public string get_uxmlQualifiedName()
public bool get_canHaveAnyAttribute()
public IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription()
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public bool AcceptsAttributeBag(IUxmlAttributes bag)
public bool AcceptsAttributeBag(IUxmlAttributes bag, CreationContext cc)
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
protected TCreatedType DoCreate(IUxmlAttributes bag, CreationContext cc)
public Type get_CreatesType()
}
public UnityEngine.Experimental.UIElements.UxmlFloatAttributeDescription : UxmlAttributeDescription {
private float <defaultValue>k__BackingField
private Func`3<string, float, float> <>f__mg$cache0
public float defaultValue
public string defaultValueAsString
public float get_defaultValue()
public void set_defaultValue(float value)
public string get_defaultValueAsString()
public float GetValueFromBag(IUxmlAttributes bag)
public float GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
private float ConvertValueToFloat(string v, float defaultValue)
}
public UnityEngine.Experimental.UIElements.UxmlIntAttributeDescription : UxmlAttributeDescription {
private int <defaultValue>k__BackingField
private Func`3<string, int, int> <>f__mg$cache0
public int defaultValue
public string defaultValueAsString
public int get_defaultValue()
public void set_defaultValue(int value)
public string get_defaultValueAsString()
public int GetValueFromBag(IUxmlAttributes bag)
public int GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
private int ConvertValueToInt(string v, int defaultValue)
}
public UnityEngine.Experimental.UIElements.UxmlLongAttributeDescription : UxmlAttributeDescription {
private long <defaultValue>k__BackingField
private Func`3<string, long, long> <>f__mg$cache0
public long defaultValue
public string defaultValueAsString
public long get_defaultValue()
public void set_defaultValue(long value)
public string get_defaultValueAsString()
public long GetValueFromBag(IUxmlAttributes bag)
public long GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
private long ConvertValueToLong(string v, long defaultValue)
}
public UnityEngine.Experimental.UIElements.UxmlRootElementFactory : UxmlFactory`2<VisualElement, UxmlRootElementTraits> {
public string uxmlName
public string uxmlQualifiedName
public string substituteForTypeName
public string substituteForTypeNamespace
public string substituteForTypeQualifiedName
public string get_uxmlName()
public string get_uxmlQualifiedName()
public string get_substituteForTypeName()
public string get_substituteForTypeNamespace()
public string get_substituteForTypeQualifiedName()
public VisualElement Create(IUxmlAttributes bag, CreationContext cc)
}
public UnityEngine.Experimental.UIElements.UxmlRootElementTraits : UxmlTraits {
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
}
public UnityEngine.Experimental.UIElements.UxmlStringAttributeDescription : UxmlAttributeDescription {
private string <defaultValue>k__BackingField
private Func`3<string, string, string> <>f__mg$cache0
public string defaultValue
public string defaultValueAsString
public string get_defaultValue()
public void set_defaultValue(string value)
public string get_defaultValueAsString()
public string GetValueFromBag(IUxmlAttributes bag)
public string GetValueFromBag(IUxmlAttributes bag, CreationContext cc)
private string ConvertValueToString(string v, string defaultValue)
}
public UnityEngine.Experimental.UIElements.UxmlTraits : object {
private bool <canHaveAnyAttribute>k__BackingField
public bool canHaveAnyAttribute
public IEnumerable`1<UxmlAttributeDescription> uxmlAttributesDescription
public IEnumerable`1<UxmlChildElementDescription> uxmlChildElementsDescription
public bool get_canHaveAnyAttribute()
protected void set_canHaveAnyAttribute(bool value)
public IEnumerable`1<UxmlAttributeDescription> get_uxmlAttributesDescription()
public IEnumerable`1<UxmlChildElementDescription> get_uxmlChildElementsDescription()
public void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc)
private IEnumerable`1<UxmlAttributeDescription> GetAllAttributeDescriptionForType(Type t)
}
public UnityEngine.Experimental.UIElements.UxmlTypeRestriction : object {
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.Experimental.UIElements.UxmlValueBounds : UxmlTypeRestriction {
public string min
public string max
public bool excludeMin
public bool excludeMax
public bool Equals(UxmlTypeRestriction other)
}
public UnityEngine.Experimental.UIElements.UxmlValueMatches : UxmlTypeRestriction {
public string regex
public bool Equals(UxmlTypeRestriction other)
}
internal UnityEngine.Experimental.UIElements.VersionChangeType : Enum {
public int value__
public VersionChangeType Bindings
public VersionChangeType PersistentData
public VersionChangeType Hierarchy
public VersionChangeType Layout
public VersionChangeType StyleSheet
public VersionChangeType Styles
public VersionChangeType Transform
public VersionChangeType Clip
public VersionChangeType Repaint
}
public UnityEngine.Experimental.UIElements.VisualContainer : VisualElement {
public void AddChild(VisualElement child)
public void InsertChild(int index, VisualElement child)
public void RemoveChild(VisualElement child)
public void RemoveChildAt(int index)
public void ClearChildren()
public VisualElement GetChildAt(int index)
}
public UnityEngine.Experimental.UIElements.VisualElement : Focusable {
public int defaultFocusIndex
private UInt32 s_NextId
private List`1<string> s_EmptyClassList
private string m_Name
private List`1<string> m_ClassList
private string m_TypeName
private string m_FullTypeName
private string m_PersistenceKey
private bool <enablePersistence>k__BackingField
private object <userData>k__BackingField
private RenderData m_RenderData
private Vector3 m_Position
private Quaternion m_Rotation
private Vector3 m_Scale
private Rect m_Layout
private bool <isWorldTransformDirty>k__BackingField
private Matrix4x4 m_WorldTransform
private bool <isWorldClipDirty>k__BackingField
private Rect m_WorldClip
internal PseudoStates triggerPseudoMask
internal PseudoStates dependencyPseudoMask
private PseudoStates m_PseudoStates
private PickingMode <pickingMode>k__BackingField
private YogaNode <yogaNode>k__BackingField
internal VisualElementStylesData m_SharedStyle
internal VisualElementStylesData m_Style
internal UInt32 controlid
private bool m_Enabled
private bool m_RequireMeasureFunction
private OnStylesResolved onStylesResolved
private Hierarchy <shadow>k__BackingField
private ClippingOptions m_ClippingOptions
private VisualElement m_PhysicalParent
private VisualElement m_LogicalParent
private VisualElement[] s_EmptyList
private List`1<VisualElement> m_Children
private BaseVisualElementPanel <elementPanel>k__BackingField
private List`1<StyleSheet> m_StyleSheets
private List`1<string> m_StyleSheetPaths
private EventCallback`2<TooltipEvent, string> <>f__mg$cache0
private EventCallback`2<TooltipEvent, string> <>f__mg$cache1
private EventCallback`2<TooltipEvent, string> <>f__mg$cache2
private Vector3 UnityEngine.Experimental.UIElements.ITransform.position
private Quaternion UnityEngine.Experimental.UIElements.ITransform.rotation
private Vector3 UnityEngine.Experimental.UIElements.ITransform.scale
private Matrix4x4 UnityEngine.Experimental.UIElements.ITransform.matrix
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.width
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.height
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.maxWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.maxHeight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.minWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.minHeight
private StyleValue`1<Flex> UnityEngine.Experimental.UIElements.IStyle.flex
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.flexBasis
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.flexGrow
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.flexShrink
private StyleValue`1<Overflow> UnityEngine.Experimental.UIElements.IStyle.overflow
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.positionLeft
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.positionTop
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.positionRight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.positionBottom
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.marginLeft
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.marginTop
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.marginRight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.marginBottom
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderLeft
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderTop
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderRight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderBottom
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderLeftWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderTopWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderRightWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderBottomWidth
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderTopLeftRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderTopRightRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderBottomRightRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.borderBottomLeftRadius
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.paddingLeft
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.paddingTop
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.paddingRight
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.paddingBottom
private StyleValue`1<PositionType> UnityEngine.Experimental.UIElements.IStyle.positionType
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.alignSelf
private StyleValue`1<TextAnchor> UnityEngine.Experimental.UIElements.IStyle.textAlignment
private StyleValue`1<TextAnchor> UnityEngine.Experimental.UIElements.IStyle.unityTextAlign
private StyleValue`1<FontStyle> UnityEngine.Experimental.UIElements.IStyle.fontStyle
private StyleValue`1<FontStyle> UnityEngine.Experimental.UIElements.IStyle.fontStyleAndWeight
private StyleValue`1<TextClipping> UnityEngine.Experimental.UIElements.IStyle.textClipping
private StyleValue`1<Font> UnityEngine.Experimental.UIElements.IStyle.font
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.fontSize
private StyleValue`1<bool> UnityEngine.Experimental.UIElements.IStyle.wordWrap
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.textColor
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.color
private StyleValue`1<FlexDirection> UnityEngine.Experimental.UIElements.IStyle.flexDirection
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.backgroundColor
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.borderColor
private StyleValue`1<Texture2D> UnityEngine.Experimental.UIElements.IStyle.backgroundImage
private StyleValue`1<ScaleMode> UnityEngine.Experimental.UIElements.IStyle.backgroundSize
private StyleValue`1<ScaleMode> UnityEngine.Experimental.UIElements.IStyle.backgroundScaleMode
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.alignItems
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.alignContent
private StyleValue`1<Justify> UnityEngine.Experimental.UIElements.IStyle.justifyContent
private StyleValue`1<Wrap> UnityEngine.Experimental.UIElements.IStyle.flexWrap
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.sliceLeft
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.sliceTop
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.sliceRight
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.sliceBottom
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.opacity
private StyleValue`1<CursorStyle> UnityEngine.Experimental.UIElements.IStyle.cursor
private StyleValue`1<Visibility> UnityEngine.Experimental.UIElements.IStyle.visibility
public string persistenceKey
internal bool enablePersistence
public object userData
public bool canGrabFocus
public FocusController focusController
internal RenderData renderData
public ITransform transform
public Rect layout
public Rect contentRect
protected Rect paddingRect
public Rect worldBound
public Rect localBound
internal Rect rect
internal bool isWorldTransformDirty
public Matrix4x4 worldTransform
internal bool isWorldClipDirty
internal Rect worldClip
internal PseudoStates pseudoStates
public PickingMode pickingMode
public string name
internal List`1<string> classList
internal string fullTypeName
internal string typeName
internal YogaNode yogaNode
internal VisualElementStylesData sharedStyle
internal VisualElementStylesData effectiveStyle
internal bool hasInlineStyle
private VisualElementStylesData inlineStyle
internal float opacity
public bool enabled
public bool enabledInHierarchy
public bool enabledSelf
public bool visible
internal bool requireMeasureFunction
public IUIElementDataWatch dataWatch
public Hierarchy shadow
public ClippingOptions clippingOptions
public VisualElement parent
internal BaseVisualElementPanel elementPanel
public IPanel panel
public VisualElement contentContainer
public VisualElement Item
public int childCount
public IVisualElementScheduler schedule
public IStyle style
internal IList`1<StyleSheet> styleSheets
public string tooltip
public string get_persistenceKey()
public void set_persistenceKey(string value)
internal bool get_enablePersistence()
private void set_enablePersistence(bool value)
public object get_userData()
public void set_userData(object value)
public bool get_canGrabFocus()
public FocusController get_focusController()
internal RenderData get_renderData()
public ITransform get_transform()
private Vector3 UnityEngine.Experimental.UIElements.ITransform.get_position()
private void UnityEngine.Experimental.UIElements.ITransform.set_position(Vector3 value)
private Quaternion UnityEngine.Experimental.UIElements.ITransform.get_rotation()
private void UnityEngine.Experimental.UIElements.ITransform.set_rotation(Quaternion value)
private Vector3 UnityEngine.Experimental.UIElements.ITransform.get_scale()
private void UnityEngine.Experimental.UIElements.ITransform.set_scale(Vector3 value)
private Matrix4x4 UnityEngine.Experimental.UIElements.ITransform.get_matrix()
public Rect get_layout()
public void set_layout(Rect value)
public Rect get_contentRect()
protected Rect get_paddingRect()
public Rect get_worldBound()
public Rect get_localBound()
internal Rect get_rect()
internal bool get_isWorldTransformDirty()
internal void set_isWorldTransformDirty(bool value)
public Matrix4x4 get_worldTransform()
private void UpdateWorldTransform()
internal bool get_isWorldClipDirty()
internal void set_isWorldClipDirty(bool value)
internal Rect get_worldClip()
private void UpdateWorldClip()
internal Rect ComputeAAAlignedBound(Rect position, Matrix4x4 mat)
internal PseudoStates get_pseudoStates()
internal void set_pseudoStates(PseudoStates value)
public PickingMode get_pickingMode()
public void set_pickingMode(PickingMode value)
public string get_name()
public void set_name(string value)
internal List`1<string> get_classList()
internal string get_fullTypeName()
internal string get_typeName()
internal YogaNode get_yogaNode()
private void set_yogaNode(YogaNode value)
protected void OnStyleResolved(ICustomStyle style)
internal VisualElementStylesData get_sharedStyle()
internal VisualElementStylesData get_effectiveStyle()
internal bool get_hasInlineStyle()
private VisualElementStylesData get_inlineStyle()
internal float get_opacity()
internal void set_opacity(float value)
protected internal void ExecuteDefaultAction(EventBase evt)
public void Focus()
internal void SetPanel(BaseVisualElementPanel p)
private void ChangePanel(BaseVisualElementPanel p)
public void SendEvent(EventBase e)
internal void IncrementVersion(VersionChangeType changeType)
private void IncrementVersion(ChangeType changeType)
private VersionChangeType GetVersionChange(ChangeType type)
public void Dirty(ChangeType type)
public bool IsDirty(ChangeType type)
public bool AnyDirty(ChangeType type)
public void ClearDirty(ChangeType type)
public bool get_enabled()
public void set_enabled(bool value)
protected internal bool SetEnabledFromHierarchy(bool state)
public bool get_enabledInHierarchy()
public bool get_enabledSelf()
public void SetEnabled(bool value)
private void PropagateEnabledToChildren(bool value)
public bool get_visible()
public void set_visible(bool value)
public void MarkDirtyRepaint()
internal void Repaint(IStylePainter painter)
protected void DoRepaint(IStylePainter painter)
private void GetFullHierarchicalPersistenceKey(StringBuilder key)
public string GetFullHierarchicalPersistenceKey()
public T GetOrCreatePersistentData(object existing, string key)
public T GetOrCreatePersistentData(ScriptableObject existing, string key)
public void OverwriteFromPersistedData(object obj, string key)
public void SavePersistentData()
internal bool IsPersitenceSupportedOnChildren()
internal void OnPersistentDataReady(bool enablePersistence)
public void OnPersistentDataReady()
public bool ContainsPoint(Vector2 localPoint)
public bool Overlaps(Rect rectangle)
internal bool get_requireMeasureFunction()
internal void set_requireMeasureFunction(bool value)
protected internal Vector2 DoMeasure(float width, MeasureMode widthMode, float height, MeasureMode heightMode)
internal YogaSize Measure(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode)
public void SetSize(Vector2 size)
private void FinalizeLayout()
internal void add_onStylesResolved(OnStylesResolved value)
internal void remove_onStylesResolved(OnStylesResolved value)
internal void SetInlineStyles(VisualElementStylesData inlineStyle)
internal void SetSharedStyles(VisualElementStylesData sharedStyle)
public void ResetPositionProperties()
public string ToString()
internal IEnumerable`1<string> GetClasses()
public void ClearClassList()
public void AddToClassList(string className)
public void RemoveFromClassList(string className)
public void ToggleInClassList(string className)
public void EnableInClassList(string className, bool enable)
public bool ClassListContains(string cls)
public object FindAncestorUserData()
private void UpdateCursorStyle(long eventType)
public IUIElementDataWatch get_dataWatch()
private IUIElementDataWatchRequest UnityEngine.Experimental.UIElements.IUIElementDataWatch.RegisterWatch(Object toWatch, Action`1<Object> watchNotification)
private void UnityEngine.Experimental.UIElements.IUIElementDataWatch.UnregisterWatch(IUIElementDataWatchRequest requested)
public Hierarchy get_shadow()
private void set_shadow(Hierarchy value)
public ClippingOptions get_clippingOptions()
public void set_clippingOptions(ClippingOptions value)
internal bool ShouldClip()
public VisualElement get_parent()
internal BaseVisualElementPanel get_elementPanel()
private void set_elementPanel(BaseVisualElementPanel value)
public IPanel get_panel()
public VisualElement get_contentContainer()
public void Add(VisualElement child)
public void Insert(int index, VisualElement element)
public void Remove(VisualElement element)
public void RemoveAt(int index)
public void Clear()
public VisualElement ElementAt(int index)
public VisualElement get_Item(int key)
public int get_childCount()
public int IndexOf(VisualElement element)
public IEnumerable`1<VisualElement> Children()
public void Sort(Comparison`1<VisualElement> comp)
public void BringToFront()
public void SendToBack()
public void PlaceBehind(VisualElement sibling)
public void PlaceInFront(VisualElement sibling)
public void RemoveFromHierarchy()
public T GetFirstOfType()
public T GetFirstAncestorOfType()
public bool Contains(VisualElement child)
private void GatherAllChildren(List`1<VisualElement> elements)
public VisualElement FindCommonAncestor(VisualElement other)
public IEnumerator`1<VisualElement> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public IVisualElementScheduler get_schedule()
private IVisualElementScheduledItem UnityEngine.Experimental.UIElements.IVisualElementScheduler.Execute(Action`1<TimerState> timerUpdateEvent)
private IVisualElementScheduledItem UnityEngine.Experimental.UIElements.IVisualElementScheduler.Execute(Action updateEvent)
public IStyle get_style()
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_width()
private void UnityEngine.Experimental.UIElements.IStyle.set_width(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_height()
private void UnityEngine.Experimental.UIElements.IStyle.set_height(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_maxWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_maxWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_maxHeight()
private void UnityEngine.Experimental.UIElements.IStyle.set_maxHeight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_minWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_minWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_minHeight()
private void UnityEngine.Experimental.UIElements.IStyle.set_minHeight(StyleValue`1<float> value)
private StyleValue`1<Flex> UnityEngine.Experimental.UIElements.IStyle.get_flex()
private void UnityEngine.Experimental.UIElements.IStyle.set_flex(StyleValue`1<Flex> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_flexBasis()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexBasis(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_flexGrow()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexGrow(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_flexShrink()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexShrink(StyleValue`1<float> value)
private StyleValue`1<Overflow> UnityEngine.Experimental.UIElements.IStyle.get_overflow()
private void UnityEngine.Experimental.UIElements.IStyle.set_overflow(StyleValue`1<Overflow> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_positionLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionLeft(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_positionTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionTop(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_positionRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionRight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_positionBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionBottom(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_marginLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_marginLeft(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_marginTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_marginTop(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_marginRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_marginRight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_marginBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_marginBottom(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderLeft(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderTop(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderRight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderBottom(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderLeftWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderLeftWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderTopWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderTopWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderRightWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderRightWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderBottomWidth()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderBottomWidth(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderTopLeftRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderTopLeftRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderTopRightRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderTopRightRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderBottomRightRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderBottomRightRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_borderBottomLeftRadius()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderBottomLeftRadius(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_paddingLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_paddingLeft(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_paddingTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_paddingTop(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_paddingRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_paddingRight(StyleValue`1<float> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_paddingBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_paddingBottom(StyleValue`1<float> value)
private StyleValue`1<PositionType> UnityEngine.Experimental.UIElements.IStyle.get_positionType()
private void UnityEngine.Experimental.UIElements.IStyle.set_positionType(StyleValue`1<PositionType> value)
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.get_alignSelf()
private void UnityEngine.Experimental.UIElements.IStyle.set_alignSelf(StyleValue`1<Align> value)
private StyleValue`1<TextAnchor> UnityEngine.Experimental.UIElements.IStyle.get_textAlignment()
private void UnityEngine.Experimental.UIElements.IStyle.set_textAlignment(StyleValue`1<TextAnchor> value)
private StyleValue`1<TextAnchor> UnityEngine.Experimental.UIElements.IStyle.get_unityTextAlign()
private void UnityEngine.Experimental.UIElements.IStyle.set_unityTextAlign(StyleValue`1<TextAnchor> value)
private StyleValue`1<FontStyle> UnityEngine.Experimental.UIElements.IStyle.get_fontStyle()
private void UnityEngine.Experimental.UIElements.IStyle.set_fontStyle(StyleValue`1<FontStyle> value)
private StyleValue`1<FontStyle> UnityEngine.Experimental.UIElements.IStyle.get_fontStyleAndWeight()
private void UnityEngine.Experimental.UIElements.IStyle.set_fontStyleAndWeight(StyleValue`1<FontStyle> value)
private StyleValue`1<TextClipping> UnityEngine.Experimental.UIElements.IStyle.get_textClipping()
private void UnityEngine.Experimental.UIElements.IStyle.set_textClipping(StyleValue`1<TextClipping> value)
private StyleValue`1<Font> UnityEngine.Experimental.UIElements.IStyle.get_font()
private void UnityEngine.Experimental.UIElements.IStyle.set_font(StyleValue`1<Font> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_fontSize()
private void UnityEngine.Experimental.UIElements.IStyle.set_fontSize(StyleValue`1<int> value)
private StyleValue`1<bool> UnityEngine.Experimental.UIElements.IStyle.get_wordWrap()
private void UnityEngine.Experimental.UIElements.IStyle.set_wordWrap(StyleValue`1<bool> value)
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.get_textColor()
private void UnityEngine.Experimental.UIElements.IStyle.set_textColor(StyleValue`1<Color> value)
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.get_color()
private void UnityEngine.Experimental.UIElements.IStyle.set_color(StyleValue`1<Color> value)
private StyleValue`1<FlexDirection> UnityEngine.Experimental.UIElements.IStyle.get_flexDirection()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexDirection(StyleValue`1<FlexDirection> value)
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.get_backgroundColor()
private void UnityEngine.Experimental.UIElements.IStyle.set_backgroundColor(StyleValue`1<Color> value)
private StyleValue`1<Color> UnityEngine.Experimental.UIElements.IStyle.get_borderColor()
private void UnityEngine.Experimental.UIElements.IStyle.set_borderColor(StyleValue`1<Color> value)
private StyleValue`1<Texture2D> UnityEngine.Experimental.UIElements.IStyle.get_backgroundImage()
private void UnityEngine.Experimental.UIElements.IStyle.set_backgroundImage(StyleValue`1<Texture2D> value)
private StyleValue`1<ScaleMode> UnityEngine.Experimental.UIElements.IStyle.get_backgroundSize()
private void UnityEngine.Experimental.UIElements.IStyle.set_backgroundSize(StyleValue`1<ScaleMode> value)
private StyleValue`1<ScaleMode> UnityEngine.Experimental.UIElements.IStyle.get_backgroundScaleMode()
private void UnityEngine.Experimental.UIElements.IStyle.set_backgroundScaleMode(StyleValue`1<ScaleMode> value)
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.get_alignItems()
private void UnityEngine.Experimental.UIElements.IStyle.set_alignItems(StyleValue`1<Align> value)
private StyleValue`1<Align> UnityEngine.Experimental.UIElements.IStyle.get_alignContent()
private void UnityEngine.Experimental.UIElements.IStyle.set_alignContent(StyleValue`1<Align> value)
private StyleValue`1<Justify> UnityEngine.Experimental.UIElements.IStyle.get_justifyContent()
private void UnityEngine.Experimental.UIElements.IStyle.set_justifyContent(StyleValue`1<Justify> value)
private StyleValue`1<Wrap> UnityEngine.Experimental.UIElements.IStyle.get_flexWrap()
private void UnityEngine.Experimental.UIElements.IStyle.set_flexWrap(StyleValue`1<Wrap> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_sliceLeft()
private void UnityEngine.Experimental.UIElements.IStyle.set_sliceLeft(StyleValue`1<int> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_sliceTop()
private void UnityEngine.Experimental.UIElements.IStyle.set_sliceTop(StyleValue`1<int> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_sliceRight()
private void UnityEngine.Experimental.UIElements.IStyle.set_sliceRight(StyleValue`1<int> value)
private StyleValue`1<int> UnityEngine.Experimental.UIElements.IStyle.get_sliceBottom()
private void UnityEngine.Experimental.UIElements.IStyle.set_sliceBottom(StyleValue`1<int> value)
private StyleValue`1<float> UnityEngine.Experimental.UIElements.IStyle.get_opacity()
private void UnityEngine.Experimental.UIElements.IStyle.set_opacity(StyleValue`1<float> value)
private StyleValue`1<CursorStyle> UnityEngine.Experimental.UIElements.IStyle.get_cursor()
private void UnityEngine.Experimental.UIElements.IStyle.set_cursor(StyleValue`1<CursorStyle> value)
private StyleValue`1<Visibility> UnityEngine.Experimental.UIElements.IStyle.get_visibility()
private void UnityEngine.Experimental.UIElements.IStyle.set_visibility(StyleValue`1<Visibility> value)
internal IList`1<StyleSheet> get_styleSheets()
public void AddStyleSheetPath(string sheetPath)
public void RemoveStyleSheetPath(string sheetPath)
public bool HasStyleSheetPath(string sheetPath)
internal void ReplaceStyleSheetPath(string oldSheetPath, string newSheetPath)
internal void LoadStyleSheetsFromPaths()
public string get_tooltip()
public void set_tooltip(string value)
private void OnTooltip(TooltipEvent e, string tooltip)
}
internal UnityEngine.Experimental.UIElements.VisualElementAsset : object {
private string m_Name
private int m_Id
private int m_ParentId
private int m_RuleIndex
private string m_Text
private PickingMode m_PickingMode
private string m_FullTypeName
private String[] m_Classes
private List`1<string> m_Stylesheets
private List`1<string> m_Properties
public int id
public int parentId
public int ruleIndex
public string fullTypeName
public String[] classes
public List`1<string> stylesheets
public void .ctor(string fullTypeName)
public int get_id()
public void set_id(int value)
public int get_parentId()
public void set_parentId(int value)
public int get_ruleIndex()
public void set_ruleIndex(int value)
public string get_fullTypeName()
public void set_fullTypeName(string value)
public String[] get_classes()
public void set_classes(String[] value)
public List`1<string> get_stylesheets()
public void set_stylesheets(List`1<string> value)
public VisualElement Create(CreationContext ctx)
public void OnBeforeSerialize()
public void OnAfterDeserialize()
public void AddProperty(string propertyName, string propertyValue)
private void SetOrAddProperty(string propertyName, string propertyValue)
public bool TryGetAttributeValue(string propertyName, String& value)
}
public UnityEngine.Experimental.UIElements.VisualElementExtensions : object {
public Vector2 WorldToLocal(VisualElement ele, Vector2 p)
public Vector2 LocalToWorld(VisualElement ele, Vector2 p)
public Rect WorldToLocal(VisualElement ele, Rect r)
public Rect LocalToWorld(VisualElement ele, Rect r)
public Vector2 ChangeCoordinatesTo(VisualElement src, VisualElement dest, Vector2 point)
public Rect ChangeCoordinatesTo(VisualElement src, VisualElement dest, Rect rect)
public void StretchToParentSize(VisualElement elem)
public void StretchToParentWidth(VisualElement elem)
public void AddManipulator(VisualElement ele, IManipulator manipulator)
public void RemoveManipulator(VisualElement ele, IManipulator manipulator)
}
internal UnityEngine.Experimental.UIElements.VisualElementFactoryRegistry : object {
private Dictionary`2<string, List`1<IUxmlFactory>> <factories>k__BackingField
internal Dictionary`2<string, List`1<IUxmlFactory>> factories
internal Dictionary`2<string, List`1<IUxmlFactory>> get_factories()
private void set_factories(Dictionary`2<string, List`1<IUxmlFactory>> value)
internal void RegisterFactory(IUxmlFactory factory)
internal void DiscoverFactories()
internal bool TryGetValue(string fullTypeName, List`1& factoryList)
private void RegisterEngineFactories()
}
public UnityEngine.Experimental.UIElements.VisualElementFocusChangeDirection : FocusChangeDirection {
private VisualElementFocusChangeDirection s_Left
private VisualElementFocusChangeDirection s_Right
public FocusChangeDirection left
public FocusChangeDirection right
protected VisualElementFocusChangeDirection lastValue
protected void .ctor(int value)
public FocusChangeDirection get_left()
public FocusChangeDirection get_right()
protected VisualElementFocusChangeDirection get_lastValue()
}
public UnityEngine.Experimental.UIElements.VisualElementFocusRing : object {
private VisualElement root
private DefaultFocusOrder <defaultFocusOrder>k__BackingField
private List`1<FocusRingRecord> m_FocusRing
public DefaultFocusOrder defaultFocusOrder
public void .ctor(VisualElement root, DefaultFocusOrder dfo)
public DefaultFocusOrder get_defaultFocusOrder()
public void set_defaultFocusOrder(DefaultFocusOrder value)
private int FocusRingAutoIndexSort(FocusRingRecord a, FocusRingRecord b)
private int FocusRingSort(FocusRingRecord a, FocusRingRecord b)
private void DoUpdate()
private void BuildRingRecursive(VisualElement vc, Int32& focusIndex)
private int GetFocusableInternalIndex(Focusable f)
public FocusChangeDirection GetFocusChangeDirection(Focusable currentFocusable, EventBase e)
public Focusable GetNextFocusable(Focusable currentFocusable, FocusChangeDirection direction)
}
internal UnityEngine.Experimental.UIElements.VisualElementListPool : object {
private ObjectPool`1<List`1<VisualElement>> pool
public List`1<VisualElement> Copy(List`1<VisualElement> elements)
public List`1<VisualElement> Get(int initialCapacity)
public void Release(List`1<VisualElement> elements)
}
internal UnityEngine.Experimental.UIElements.VisualElementPanelActivator : object {
private IVisualElementPanelActivatable m_Activatable
private bool <isActive>k__BackingField
private bool <isDetaching>k__BackingField
public bool isActive
public bool isDetaching
public void .ctor(IVisualElementPanelActivatable activatable)
public bool get_isActive()
private void set_isActive(bool value)
public bool get_isDetaching()
private void set_isDetaching(bool value)
public void SetActive(bool action)
public void SendActivation()
public void SendDeactivation()
private void OnEnter(AttachToPanelEvent evt)
private void OnLeave(DetachFromPanelEvent evt)
}
internal UnityEngine.Experimental.UIElements.VisualElementUtils : object {
private HashSet`1<string> s_usedNames
public string GetUniqueName(string nameBase)
}
public UnityEngine.Experimental.UIElements.VisualTreeAsset : ScriptableObject {
private List`1<UsingEntry> m_Usings
internal StyleSheet inlineSheet
private List`1<VisualElementAsset> m_VisualElementAssets
private List`1<TemplateAsset> m_TemplateAssets
private List`1<SlotDefinition> m_Slots
private int m_ContentContainerId
internal List`1<VisualElementAsset> visualElementAssets
internal List`1<TemplateAsset> templateAssets
internal List`1<SlotDefinition> slots
internal int contentContainerId
internal List`1<VisualElementAsset> get_visualElementAssets()
internal void set_visualElementAssets(List`1<VisualElementAsset> value)
internal List`1<TemplateAsset> get_templateAssets()
internal void set_templateAssets(List`1<TemplateAsset> value)
internal List`1<SlotDefinition> get_slots()
internal void set_slots(List`1<SlotDefinition> value)
internal int get_contentContainerId()
internal void set_contentContainerId(int value)
public VisualElement CloneTree(Dictionary`2<string, VisualElement> slotInsertionPoints)
public VisualElement CloneTree(Dictionary`2<string, VisualElement> slotInsertionPoints, string bindingPath)
public void CloneTree(VisualElement target, Dictionary`2<string, VisualElement> slotInsertionPoints)
private VisualElement CloneSetupRecursively(VisualElementAsset root, Dictionary`2<int, List`1<VisualElementAsset>> idToChildren, CreationContext context)
internal bool TryGetSlotInsertionPoint(int insertionPointId, String& slotName)
internal VisualTreeAsset ResolveTemplate(string templateName)
}
internal UnityEngine.Experimental.UIElements.VisualTreeBindingsUpdater : BaseVisualTreeHierarchyTrackerUpdater {
private HashSet`1<VisualElement> m_ElementsWithBindings
private HashSet`1<VisualElement> m_ElementsToAdd
private HashSet`1<VisualElement> m_ElementsToRemove
private int kMinUpdateDelay
private long m_LastUpdateTime
private List`1<IBinding> updatedBindings
public string description
public string get_description()
private IBinding GetUpdaterFromElement(VisualElement ve)
private void StartTracking(VisualElement ve)
private void StopTracking(VisualElement ve)
private void StartTrackingRecursive(VisualElement ve)
private void StopTrackingRecursive(VisualElement ve)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
protected void OnHierarchyChange(VisualElement ve, HierarchyChangeType type)
private long CurrentTime()
public void PerformTrackingOperations()
public void Update()
private void UpdateBindings()
}
internal UnityEngine.Experimental.UIElements.VisualTreeLayoutUpdater : BaseVisualTreeUpdater {
private int kMaxValidateLayoutCount
public string description
public string get_description()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void UpdateSubTree(VisualElement root)
}
internal UnityEngine.Experimental.UIElements.VisualTreePersistentDataUpdater : BaseVisualTreeUpdater {
private HashSet`1<VisualElement> m_UpdateList
private HashSet`1<VisualElement> m_ParentList
private int kMaxValidatePersistentDataCount
private UInt32 m_Version
private UInt32 m_LastVersion
public string description
public string get_description()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void ValidatePersistentDataOnSubTree(VisualElement ve, bool enablePersistence)
private void PropagateToParents(VisualElement ve)
}
internal UnityEngine.Experimental.UIElements.VisualTreeRepaintUpdater : BaseVisualTreeUpdater {
private HashSet`1<VisualElement> m_RepaintList
private bool m_WhinedOnceAboutRotatedClipSpaceThisFrame
private ImmediateStylePainter m_StylePainter
private Func`2<float, bool> <>f__am$cache0
public string description
public string get_description()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void PropagateToParents(VisualElement ve)
private bool DoesMatrixHaveUnsupportedRotation(Matrix4x4 m)
internal bool ShouldUsePixelCache(VisualElement root)
private void PaintSubTree(VisualElement root, Matrix4x4 offset, bool shouldClip, bool shouldCache, Rect currentGlobalClip)
private void PaintSubTreeChildren(VisualElement root, Matrix4x4 offset, bool shouldClip, bool shouldCache, Rect textureClip)
private bool <DoesMatrixHaveUnsupportedRotation>m__0(float f)
}
internal UnityEngine.Experimental.UIElements.VisualTreeStyleUpdater : BaseVisualTreeUpdater {
private HashSet`1<VisualElement> m_ApplyStyleUpdateList
private bool m_IsApplyingStyles
private UInt32 m_Version
private UInt32 m_LastVersion
private VisualTreeStyleUpdaterTraversal m_StyleContextHierarchyTraversal
public string description
public string get_description()
public void DirtyStyleSheets()
private void PropagateDirtyStyleSheets(VisualElement element)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
private void ApplyStyles()
}
internal UnityEngine.Experimental.UIElements.VisualTreeStyleUpdaterTraversal : HierarchyTraversal {
private HashSet`1<VisualElement> m_UpdateList
private HashSet`1<VisualElement> m_ParentList
private List`1<SelectorMatchRecord> m_TempMatchResults
private float <currentPixelsPerPoint>k__BackingField
private StyleMatchingContext m_StyleMatchingContext
private Comparison`1<SelectorMatchRecord> <>f__mg$cache0
private Action`2<VisualElement, MatchResultInfo> <>f__mg$cache1
public float currentPixelsPerPoint
public float get_currentPixelsPerPoint()
public void set_currentPixelsPerPoint(float value)
public void AddChangedElement(VisualElement ve)
public void Clear()
private void PropagateToChildren(VisualElement ve)
private void PropagateToParents(VisualElement ve)
private void OnProcessMatchResult(VisualElement current, MatchResultInfo info)
public void TraverseRecursive(VisualElement element, int depth)
private bool ShouldSkipElement(VisualElement element)
private void ProcessMatchedRules(VisualElement element, List`1<SelectorMatchRecord> matchingSelectors)
}
internal UnityEngine.Experimental.UIElements.VisualTreeTransformClipUpdater : BaseVisualTreeUpdater {
private UInt32 m_Version
private UInt32 m_LastVersion
public string description
public string get_description()
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
private void DirtyTransformClipHierarchy(VisualElement ve)
private void DirtyClipHierarchy(VisualElement ve)
public void Update()
}
internal UnityEngine.Experimental.UIElements.VisualTreeUpdatePhase : Enum {
public int value__
public VisualTreeUpdatePhase PersistentData
public VisualTreeUpdatePhase Bindings
public VisualTreeUpdatePhase Styles
public VisualTreeUpdatePhase Layout
public VisualTreeUpdatePhase TransformClip
public VisualTreeUpdatePhase Repaint
public VisualTreeUpdatePhase Count
}
internal UnityEngine.Experimental.UIElements.VisualTreeUpdater : object {
private BaseVisualElementPanel m_Panel
private UpdaterArray m_UpdaterArray
public void .ctor(BaseVisualElementPanel panel)
public void Dispose()
public void UpdateVisualTree()
public void UpdateVisualTreePhase(VisualTreeUpdatePhase phase)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void DirtyStyleSheets()
public void SetUpdater(IVisualTreeUpdater updater, VisualTreeUpdatePhase phase)
public void SetUpdater(VisualTreeUpdatePhase phase)
public IVisualTreeUpdater GetUpdater(VisualTreeUpdatePhase phase)
private void SetDefaultUpdaters()
}
public UnityEngine.Experimental.UIElements.WheelEvent : MouseEventBase`1<WheelEvent> {
private Vector3 <delta>k__BackingField
public Vector3 delta
public Vector3 get_delta()
private void set_delta(Vector3 value)
public WheelEvent GetPooled(Event systemEvent)
protected void Init()
}
public UnityEngine.Internal.Experimental.UIElements.PanelWrapper : ScriptableObject {
private Panel m_Panel
private BaseVisualTreeUpdater m_Updater
public bool UIREnabled
public VisualElement visualTree
private void OnEnable()
private void OnDisable()
public void set_UIREnabled(bool value)
public VisualElement get_visualTree()
public void Repaint(Event e)
}
internal UnityEngine.Internal.Experimental.UIElements.UIRPainter : object {
private int kMaxVertices
private int kMaxIndices
private int kMaxRanges
private GPUBuffer`1<Vertex> m_VertexGPUBuffer
private GPUBuffer`1<ushort> m_IndexGPUBuffer
private NativeArray`1<Vertex> m_VertexData
private NativeArray`1<ushort> m_IndexData
private int m_VertexOffset
private int m_IndexOffset
private NativeArray`1<GfxUpdateBufferRange> m_VertexUpdateRanges
private NativeArray`1<GfxUpdateBufferRange> m_IndexUpdateRanges
private int m_VertexUpdateOffset
private int m_IndexUpdateOffset
private NativeArray`1<DrawBufferRange> m_DrawRanges
private int m_DrawRangeCount
internal VisualElement currentElement
public float opacity
public void Dispose(bool disposing)
public void Draw()
public float get_opacity()
public void set_opacity(float value)
public void DrawRect(RectStylePainterParameters painterParams)
public void DrawMesh(MeshStylePainterParameters painterParameters)
public void DrawText(TextStylePainterParameters painterParams)
public void DrawTexture(TextureStylePainterParameters painterParams)
public void DrawImmediate(Action callback)
public void DrawBackground()
public void DrawBorder()
public void DrawText(string text)
}
internal UnityEngine.Internal.Experimental.UIElements.UIRRepaintUpdater : BaseVisualTreeUpdater {
private UIRPainter m_Painter
private List`1<VisualElement> m_Elements
public string description
public string get_description()
protected void Dispose(bool disposing)
public void OnVersionChanged(VisualElement ve, VersionChangeType versionChangeType)
public void Update()
}
internal UnityEngine.UIR.DrawBufferRange : ValueType {
public int firstIndex
public int indexCount
public int minIndexVal
public int vertsReferenced
}
internal UnityEngine.UIR.GfxUpdateBufferRange : ValueType {
public UInt32 offsetFromWriteStart
public UInt32 size
public UIntPtr source
}
internal UnityEngine.UIR.Utility : object {
public void DrawRanges(GPUBuffer`1<I> ib, GPUBuffer`1<T> vb, NativeSlice`1<DrawBufferRange> ranges)
private IntPtr AllocateBuffer(int elementCount, int elementStride, bool vertexBuffer)
private void FreeBuffer(IntPtr buffer)
private void UpdateBufferRanges(IntPtr buffer, IntPtr ranges, int rangeCount, int writeRangeStart, int writeRangeEnd)
private void DrawRanges(IntPtr ib, IntPtr vb, int vbElemStride, IntPtr ranges, int rangeCount)
public void SetScissorRect(RectInt scissorRect)
public void DisableScissor()
public UInt32 InsertCPUFence()
public bool CPUFencePassed(UInt32 fence)
public void SyncRenderThread()
public void ProfileDrawChainBegin()
public void ProfileDrawChainEnd()
private void SetScissorRect_Injected(RectInt& scissorRect)
}
internal UnityEngine.Yoga.BaselineFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public float Invoke(YogaNode node, float width, float height)
public IAsyncResult BeginInvoke(YogaNode node, float width, float height, AsyncCallback callback, object object)
public float EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.Logger : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(YogaConfig config, YogaNode node, YogaLogLevel level, string message)
public IAsyncResult BeginInvoke(YogaConfig config, YogaNode node, YogaLogLevel level, string message, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.MeasureFunction : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public YogaSize Invoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode)
public IAsyncResult BeginInvoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, AsyncCallback callback, object object)
public YogaSize EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.MeasureOutput : object {
public YogaSize Make(float width, float height)
}
internal UnityEngine.Yoga.Native : object {
private IntPtr YGNodeNew()
public IntPtr YGNodeNewWithConfig(IntPtr config)
public void YGNodeFree(IntPtr ygNode)
private void YGNodeFreeInternal(IntPtr ygNode)
public void YGNodeReset(IntPtr node)
public void YGSetManagedObject(IntPtr ygNode, YogaNode node)
public IntPtr YGConfigGetDefault()
public IntPtr YGConfigNew()
public void YGConfigFree(IntPtr config)
private void YGConfigFreeInternal(IntPtr config)
public int YGNodeGetInstanceCount()
public int YGConfigGetInstanceCount()
public void YGConfigSetExperimentalFeatureEnabled(IntPtr config, YogaExperimentalFeature feature, bool enabled)
public bool YGConfigIsExperimentalFeatureEnabled(IntPtr config, YogaExperimentalFeature feature)
public void YGConfigSetUseWebDefaults(IntPtr config, bool useWebDefaults)
public bool YGConfigGetUseWebDefaults(IntPtr config)
public void YGConfigSetPointScaleFactor(IntPtr config, float pixelsInPoint)
public void YGNodeInsertChild(IntPtr node, IntPtr child, UInt32 index)
public void YGNodeRemoveChild(IntPtr node, IntPtr child)
public void YGNodeCalculateLayout(IntPtr node, float availableWidth, float availableHeight, YogaDirection parentDirection)
public void YGNodeMarkDirty(IntPtr node)
public bool YGNodeIsDirty(IntPtr node)
public void YGNodePrint(IntPtr node, YogaPrintOptions options)
public void YGNodeCopyStyle(IntPtr dstNode, IntPtr srcNode)
public void YGNodeSetMeasureFunc(IntPtr node)
public void YGNodeRemoveMeasureFunc(IntPtr node)
public void YGNodeMeasureInvoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, IntPtr returnValueAddress)
public void YGNodeSetBaselineFunc(IntPtr node)
public void YGNodeRemoveBaselineFunc(IntPtr node)
public void YGNodeBaselineInvoke(YogaNode node, float width, float height, IntPtr returnValueAddress)
public void YGNodeSetHasNewLayout(IntPtr node, bool hasNewLayout)
public bool YGNodeGetHasNewLayout(IntPtr node)
public void YGNodeStyleSetDirection(IntPtr node, YogaDirection direction)
public YogaDirection YGNodeStyleGetDirection(IntPtr node)
public void YGNodeStyleSetFlexDirection(IntPtr node, YogaFlexDirection flexDirection)
public YogaFlexDirection YGNodeStyleGetFlexDirection(IntPtr node)
public void YGNodeStyleSetJustifyContent(IntPtr node, YogaJustify justifyContent)
public YogaJustify YGNodeStyleGetJustifyContent(IntPtr node)
public void YGNodeStyleSetAlignContent(IntPtr node, YogaAlign alignContent)
public YogaAlign YGNodeStyleGetAlignContent(IntPtr node)
public void YGNodeStyleSetAlignItems(IntPtr node, YogaAlign alignItems)
public YogaAlign YGNodeStyleGetAlignItems(IntPtr node)
public void YGNodeStyleSetAlignSelf(IntPtr node, YogaAlign alignSelf)
public YogaAlign YGNodeStyleGetAlignSelf(IntPtr node)
public void YGNodeStyleSetPositionType(IntPtr node, YogaPositionType positionType)
public YogaPositionType YGNodeStyleGetPositionType(IntPtr node)
public void YGNodeStyleSetFlexWrap(IntPtr node, YogaWrap flexWrap)
public YogaWrap YGNodeStyleGetFlexWrap(IntPtr node)
public void YGNodeStyleSetOverflow(IntPtr node, YogaOverflow flexWrap)
public YogaOverflow YGNodeStyleGetOverflow(IntPtr node)
public void YGNodeStyleSetDisplay(IntPtr node, YogaDisplay display)
public YogaDisplay YGNodeStyleGetDisplay(IntPtr node)
public void YGNodeStyleSetFlex(IntPtr node, float flex)
public void YGNodeStyleSetFlexGrow(IntPtr node, float flexGrow)
public float YGNodeStyleGetFlexGrow(IntPtr node)
public void YGNodeStyleSetFlexShrink(IntPtr node, float flexShrink)
public float YGNodeStyleGetFlexShrink(IntPtr node)
public void YGNodeStyleSetFlexBasis(IntPtr node, float flexBasis)
public void YGNodeStyleSetFlexBasisPercent(IntPtr node, float flexBasis)
public void YGNodeStyleSetFlexBasisAuto(IntPtr node)
public YogaValue YGNodeStyleGetFlexBasis(IntPtr node)
public void YGNodeStyleSetWidth(IntPtr node, float width)
public void YGNodeStyleSetWidthPercent(IntPtr node, float width)
public void YGNodeStyleSetWidthAuto(IntPtr node)
public YogaValue YGNodeStyleGetWidth(IntPtr node)
public void YGNodeStyleSetHeight(IntPtr node, float height)
public void YGNodeStyleSetHeightPercent(IntPtr node, float height)
public void YGNodeStyleSetHeightAuto(IntPtr node)
public YogaValue YGNodeStyleGetHeight(IntPtr node)
public void YGNodeStyleSetMinWidth(IntPtr node, float minWidth)
public void YGNodeStyleSetMinWidthPercent(IntPtr node, float minWidth)
public YogaValue YGNodeStyleGetMinWidth(IntPtr node)
public void YGNodeStyleSetMinHeight(IntPtr node, float minHeight)
public void YGNodeStyleSetMinHeightPercent(IntPtr node, float minHeight)
public YogaValue YGNodeStyleGetMinHeight(IntPtr node)
public void YGNodeStyleSetMaxWidth(IntPtr node, float maxWidth)
public void YGNodeStyleSetMaxWidthPercent(IntPtr node, float maxWidth)
public YogaValue YGNodeStyleGetMaxWidth(IntPtr node)
public void YGNodeStyleSetMaxHeight(IntPtr node, float maxHeight)
public void YGNodeStyleSetMaxHeightPercent(IntPtr node, float maxHeight)
public YogaValue YGNodeStyleGetMaxHeight(IntPtr node)
public void YGNodeStyleSetAspectRatio(IntPtr node, float aspectRatio)
public float YGNodeStyleGetAspectRatio(IntPtr node)
public void YGNodeStyleSetPosition(IntPtr node, YogaEdge edge, float position)
public void YGNodeStyleSetPositionPercent(IntPtr node, YogaEdge edge, float position)
public YogaValue YGNodeStyleGetPosition(IntPtr node, YogaEdge edge)
public void YGNodeStyleSetMargin(IntPtr node, YogaEdge edge, float margin)
public void YGNodeStyleSetMarginPercent(IntPtr node, YogaEdge edge, float margin)
public void YGNodeStyleSetMarginAuto(IntPtr node, YogaEdge edge)
public YogaValue YGNodeStyleGetMargin(IntPtr node, YogaEdge edge)
public void YGNodeStyleSetPadding(IntPtr node, YogaEdge edge, float padding)
public void YGNodeStyleSetPaddingPercent(IntPtr node, YogaEdge edge, float padding)
public YogaValue YGNodeStyleGetPadding(IntPtr node, YogaEdge edge)
public void YGNodeStyleSetBorder(IntPtr node, YogaEdge edge, float border)
public float YGNodeStyleGetBorder(IntPtr node, YogaEdge edge)
public float YGNodeLayoutGetLeft(IntPtr node)
public float YGNodeLayoutGetTop(IntPtr node)
public float YGNodeLayoutGetRight(IntPtr node)
public float YGNodeLayoutGetBottom(IntPtr node)
public float YGNodeLayoutGetWidth(IntPtr node)
public float YGNodeLayoutGetHeight(IntPtr node)
public float YGNodeLayoutGetMargin(IntPtr node, YogaEdge edge)
public float YGNodeLayoutGetPadding(IntPtr node, YogaEdge edge)
public YogaDirection YGNodeLayoutGetDirection(IntPtr node)
private void YGNodeStyleGetFlexBasis_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetWidth_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetHeight_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetMinWidth_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetMinHeight_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetMaxWidth_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetMaxHeight_Injected(IntPtr node, YogaValue& ret)
private void YGNodeStyleGetPosition_Injected(IntPtr node, YogaEdge edge, YogaValue& ret)
private void YGNodeStyleGetMargin_Injected(IntPtr node, YogaEdge edge, YogaValue& ret)
private void YGNodeStyleGetPadding_Injected(IntPtr node, YogaEdge edge, YogaValue& ret)
}
internal UnityEngine.Yoga.YogaAlign : Enum {
public int value__
public YogaAlign Auto
public YogaAlign FlexStart
public YogaAlign Center
public YogaAlign FlexEnd
public YogaAlign Stretch
public YogaAlign Baseline
public YogaAlign SpaceBetween
public YogaAlign SpaceAround
}
internal UnityEngine.Yoga.YogaBaselineFunc : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public float Invoke(IntPtr unmanagedNodePtr, float width, float height)
public IAsyncResult BeginInvoke(IntPtr unmanagedNodePtr, float width, float height, AsyncCallback callback, object object)
public float EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.YogaConfig : object {
internal YogaConfig Default
private IntPtr _ygConfig
private Logger _logger
internal IntPtr Handle
public Logger Logger
public bool UseWebDefaults
public float PointScaleFactor
private void .ctor(IntPtr ygConfig)
protected void Finalize()
internal IntPtr get_Handle()
public Logger get_Logger()
public void set_Logger(Logger value)
public void SetExperimentalFeatureEnabled(YogaExperimentalFeature feature, bool enabled)
public bool IsExperimentalFeatureEnabled(YogaExperimentalFeature feature)
public bool get_UseWebDefaults()
public void set_UseWebDefaults(bool value)
public void set_PointScaleFactor(float value)
public int GetInstanceCount()
public void SetDefaultLogger(Logger logger)
}
internal UnityEngine.Yoga.YogaConstants : object {
public float Undefined
public bool IsUndefined(float value)
public bool IsUndefined(YogaValue value)
}
internal UnityEngine.Yoga.YogaDimension : Enum {
public int value__
public YogaDimension Width
public YogaDimension Height
}
internal UnityEngine.Yoga.YogaDirection : Enum {
public int value__
public YogaDirection Inherit
public YogaDirection LTR
public YogaDirection RTL
}
internal UnityEngine.Yoga.YogaDisplay : Enum {
public int value__
public YogaDisplay Flex
public YogaDisplay None
}
internal UnityEngine.Yoga.YogaEdge : Enum {
public int value__
public YogaEdge Left
public YogaEdge Top
public YogaEdge Right
public YogaEdge Bottom
public YogaEdge Start
public YogaEdge End
public YogaEdge Horizontal
public YogaEdge Vertical
public YogaEdge All
}
internal UnityEngine.Yoga.YogaExperimentalFeature : Enum {
public int value__
public YogaExperimentalFeature WebFlexBasis
}
internal UnityEngine.Yoga.YogaFlexDirection : Enum {
public int value__
public YogaFlexDirection Column
public YogaFlexDirection ColumnReverse
public YogaFlexDirection Row
public YogaFlexDirection RowReverse
}
internal UnityEngine.Yoga.YogaJustify : Enum {
public int value__
public YogaJustify FlexStart
public YogaJustify Center
public YogaJustify FlexEnd
public YogaJustify SpaceBetween
public YogaJustify SpaceAround
}
internal UnityEngine.Yoga.YogaLogger : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr unmanagedConfigPtr, IntPtr unmanagedNotePtr, YogaLogLevel level, string message)
public IAsyncResult BeginInvoke(IntPtr unmanagedConfigPtr, IntPtr unmanagedNotePtr, YogaLogLevel level, string message, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.YogaLogLevel : Enum {
public int value__
public YogaLogLevel Error
public YogaLogLevel Warn
public YogaLogLevel Info
public YogaLogLevel Debug
public YogaLogLevel Verbose
public YogaLogLevel Fatal
}
internal UnityEngine.Yoga.YogaMeasureFunc : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public YogaSize Invoke(IntPtr unmanagedNodePtr, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode)
public IAsyncResult BeginInvoke(IntPtr unmanagedNodePtr, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, AsyncCallback callback, object object)
public YogaSize EndInvoke(IAsyncResult result)
}
internal UnityEngine.Yoga.YogaMeasureMode : Enum {
public int value__
public YogaMeasureMode Undefined
public YogaMeasureMode Exactly
public YogaMeasureMode AtMost
}
internal UnityEngine.Yoga.YogaNode : object {
internal IntPtr _ygNode
private YogaConfig _config
private WeakReference _parent
private List`1<YogaNode> _children
private MeasureFunction _measureFunction
private BaselineFunction _baselineFunction
private object _data
public bool IsDirty
public bool HasNewLayout
public YogaNode Parent
public bool IsMeasureDefined
public bool IsBaselineDefined
public YogaDirection StyleDirection
public YogaFlexDirection FlexDirection
public YogaJustify JustifyContent
public YogaDisplay Display
public YogaAlign AlignItems
public YogaAlign AlignSelf
public YogaAlign AlignContent
public YogaPositionType PositionType
public YogaWrap Wrap
public float Flex
public float FlexGrow
public float FlexShrink
public YogaValue FlexBasis
public YogaValue Width
public YogaValue Height
public YogaValue MaxWidth
public YogaValue MaxHeight
public YogaValue MinWidth
public YogaValue MinHeight
public float AspectRatio
public float LayoutX
public float LayoutY
public float LayoutWidth
public float LayoutHeight
public YogaDirection LayoutDirection
public YogaOverflow Overflow
public object Data
public YogaNode Item
public int Count
public YogaValue Left
public YogaValue Top
public YogaValue Right
public YogaValue Bottom
public YogaValue Start
public YogaValue End
public YogaValue MarginLeft
public YogaValue MarginTop
public YogaValue MarginRight
public YogaValue MarginBottom
public YogaValue MarginStart
public YogaValue MarginEnd
public YogaValue MarginHorizontal
public YogaValue MarginVertical
public YogaValue Margin
public YogaValue PaddingLeft
public YogaValue PaddingTop
public YogaValue PaddingRight
public YogaValue PaddingBottom
public YogaValue PaddingStart
public YogaValue PaddingEnd
public YogaValue PaddingHorizontal
public YogaValue PaddingVertical
public YogaValue Padding
public float BorderLeftWidth
public float BorderTopWidth
public float BorderRightWidth
public float BorderBottomWidth
public float BorderStartWidth
public float BorderEndWidth
public float BorderWidth
public float LayoutMarginLeft
public float LayoutMarginTop
public float LayoutMarginRight
public float LayoutMarginBottom
public float LayoutMarginStart
public float LayoutMarginEnd
public float LayoutPaddingLeft
public float LayoutPaddingTop
public float LayoutPaddingRight
public float LayoutPaddingBottom
public float LayoutPaddingStart
public float LayoutPaddingEnd
public void .ctor(YogaConfig config)
public void .ctor(YogaNode srcNode)
protected void Finalize()
public void Reset()
public bool get_IsDirty()
public void MarkDirty()
public bool get_HasNewLayout()
public void MarkHasNewLayout()
public YogaNode get_Parent()
public bool get_IsMeasureDefined()
public bool get_IsBaselineDefined()
public void CopyStyle(YogaNode srcNode)
public YogaDirection get_StyleDirection()
public void set_StyleDirection(YogaDirection value)
public YogaFlexDirection get_FlexDirection()
public void set_FlexDirection(YogaFlexDirection value)
public YogaJustify get_JustifyContent()
public void set_JustifyContent(YogaJustify value)
public YogaDisplay get_Display()
public void set_Display(YogaDisplay value)
public YogaAlign get_AlignItems()
public void set_AlignItems(YogaAlign value)
public YogaAlign get_AlignSelf()
public void set_AlignSelf(YogaAlign value)
public YogaAlign get_AlignContent()
public void set_AlignContent(YogaAlign value)
public YogaPositionType get_PositionType()
public void set_PositionType(YogaPositionType value)
public YogaWrap get_Wrap()
public void set_Wrap(YogaWrap value)
public void set_Flex(float value)
public float get_FlexGrow()
public void set_FlexGrow(float value)
public float get_FlexShrink()
public void set_FlexShrink(float value)
public YogaValue get_FlexBasis()
public void set_FlexBasis(YogaValue value)
public YogaValue get_Width()
public void set_Width(YogaValue value)
public YogaValue get_Height()
public void set_Height(YogaValue value)
public YogaValue get_MaxWidth()
public void set_MaxWidth(YogaValue value)
public YogaValue get_MaxHeight()
public void set_MaxHeight(YogaValue value)
public YogaValue get_MinWidth()
public void set_MinWidth(YogaValue value)
public YogaValue get_MinHeight()
public void set_MinHeight(YogaValue value)
public float get_AspectRatio()
public void set_AspectRatio(float value)
public float get_LayoutX()
public float get_LayoutY()
public float get_LayoutWidth()
public float get_LayoutHeight()
public YogaDirection get_LayoutDirection()
public YogaOverflow get_Overflow()
public void set_Overflow(YogaOverflow value)
public object get_Data()
public void set_Data(object value)
public YogaNode get_Item(int index)
public int get_Count()
public void MarkLayoutSeen()
public bool ValuesEqual(float f1, float f2)
public void Insert(int index, YogaNode node)
public void RemoveAt(int index)
public void AddChild(YogaNode child)
public void RemoveChild(YogaNode child)
public void Clear()
public int IndexOf(YogaNode node)
public void SetMeasureFunction(MeasureFunction measureFunction)
public void SetBaselineFunction(BaselineFunction baselineFunction)
public void CalculateLayout(float width, float height)
public YogaSize MeasureInternal(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode)
public float BaselineInternal(YogaNode node, float width, float height)
public string Print(YogaPrintOptions options)
public IEnumerator`1<YogaNode> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int GetInstanceCount()
public YogaValue get_Left()
public void set_Left(YogaValue value)
public YogaValue get_Top()
public void set_Top(YogaValue value)
public YogaValue get_Right()
public void set_Right(YogaValue value)
public YogaValue get_Bottom()
public void set_Bottom(YogaValue value)
public YogaValue get_Start()
public void set_Start(YogaValue value)
public YogaValue get_End()
public void set_End(YogaValue value)
private void SetStylePosition(YogaEdge edge, YogaValue value)
public YogaValue get_MarginLeft()
public void set_MarginLeft(YogaValue value)
public YogaValue get_MarginTop()
public void set_MarginTop(YogaValue value)
public YogaValue get_MarginRight()
public void set_MarginRight(YogaValue value)
public YogaValue get_MarginBottom()
public void set_MarginBottom(YogaValue value)
public YogaValue get_MarginStart()
public void set_MarginStart(YogaValue value)
public YogaValue get_MarginEnd()
public void set_MarginEnd(YogaValue value)
public YogaValue get_MarginHorizontal()
public void set_MarginHorizontal(YogaValue value)
public YogaValue get_MarginVertical()
public void set_MarginVertical(YogaValue value)
public YogaValue get_Margin()
public void set_Margin(YogaValue value)
private void SetStyleMargin(YogaEdge edge, YogaValue value)
public YogaValue get_PaddingLeft()
public void set_PaddingLeft(YogaValue value)
public YogaValue get_PaddingTop()
public void set_PaddingTop(YogaValue value)
public YogaValue get_PaddingRight()
public void set_PaddingRight(YogaValue value)
public YogaValue get_PaddingBottom()
public void set_PaddingBottom(YogaValue value)
public YogaValue get_PaddingStart()
public void set_PaddingStart(YogaValue value)
public YogaValue get_PaddingEnd()
public void set_PaddingEnd(YogaValue value)
public YogaValue get_PaddingHorizontal()
public void set_PaddingHorizontal(YogaValue value)
public YogaValue get_PaddingVertical()
public void set_PaddingVertical(YogaValue value)
public YogaValue get_Padding()
public void set_Padding(YogaValue value)
private void SetStylePadding(YogaEdge edge, YogaValue value)
public float get_BorderLeftWidth()
public void set_BorderLeftWidth(float value)
public float get_BorderTopWidth()
public void set_BorderTopWidth(float value)
public float get_BorderRightWidth()
public void set_BorderRightWidth(float value)
public float get_BorderBottomWidth()
public void set_BorderBottomWidth(float value)
public float get_BorderStartWidth()
public void set_BorderStartWidth(float value)
public float get_BorderEndWidth()
public void set_BorderEndWidth(float value)
public float get_BorderWidth()
public void set_BorderWidth(float value)
public float get_LayoutMarginLeft()
public float get_LayoutMarginTop()
public float get_LayoutMarginRight()
public float get_LayoutMarginBottom()
public float get_LayoutMarginStart()
public float get_LayoutMarginEnd()
public float get_LayoutPaddingLeft()
public float get_LayoutPaddingTop()
public float get_LayoutPaddingRight()
public float get_LayoutPaddingBottom()
public float get_LayoutPaddingStart()
public float get_LayoutPaddingEnd()
}
internal UnityEngine.Yoga.YogaNodeType : Enum {
public int value__
public YogaNodeType Default
public YogaNodeType Text
}
internal UnityEngine.Yoga.YogaOverflow : Enum {
public int value__
public YogaOverflow Visible
public YogaOverflow Hidden
public YogaOverflow Scroll
}
internal UnityEngine.Yoga.YogaPositionType : Enum {
public int value__
public YogaPositionType Relative
public YogaPositionType Absolute
}
internal UnityEngine.Yoga.YogaPrintOptions : Enum {
public int value__
public YogaPrintOptions Layout
public YogaPrintOptions Style
public YogaPrintOptions Children
}
internal UnityEngine.Yoga.YogaSize : ValueType {
public float width
public float height
}
internal UnityEngine.Yoga.YogaUnit : Enum {
public int value__
public YogaUnit Undefined
public YogaUnit Point
public YogaUnit Percent
public YogaUnit Auto
}
internal UnityEngine.Yoga.YogaValue : ValueType {
private float value
private YogaUnit unit
public YogaUnit Unit
public float Value
public YogaUnit get_Unit()
public float get_Value()
public YogaValue Point(float value)
public bool Equals(YogaValue other)
public bool Equals(object obj)
public int GetHashCode()
public YogaValue Undefined()
public YogaValue Auto()
public YogaValue Percent(float value)
public YogaValue op_Implicit(float pointValue)
internal YogaValue MarshalValue(YogaValue value)
}
internal UnityEngine.Yoga.YogaValueExtensions : object {
public YogaValue Percent(float value)
public YogaValue Pt(float value)
public YogaValue Percent(int value)
public YogaValue Pt(int value)
}
internal UnityEngine.Yoga.YogaWrap : Enum {
public int value__
public YogaWrap NoWrap
public YogaWrap Wrap
public YogaWrap WrapReverse
}
