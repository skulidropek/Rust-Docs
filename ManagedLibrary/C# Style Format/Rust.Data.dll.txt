public EffectData : object {
public bool ShouldPool
private bool _disposed
public UInt32 type
public UInt32 pooledstringid
public int number
public Vector3 origin
public Vector3 normal
public float scale
public NetworkableId entity
public UInt32 bone
public ulong source
public void ResetToPool(EffectData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(EffectData instance)
public EffectData Copy()
public EffectData Deserialize(Stream stream)
public EffectData DeserializeLengthDelimited(Stream stream)
public EffectData DeserializeLength(Stream stream, int length)
public EffectData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, EffectData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public EffectData Deserialize(Byte[] buffer, EffectData instance, bool isDelta)
public EffectData Deserialize(Stream stream, EffectData instance, bool isDelta)
public EffectData DeserializeLengthDelimited(Stream stream, EffectData instance, bool isDelta)
public EffectData DeserializeLength(Stream stream, int length, EffectData instance, bool isDelta)
public void SerializeDelta(Stream stream, EffectData instance, EffectData previous)
public void Serialize(Stream stream, EffectData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(EffectData instance)
public void SerializeLengthDelimited(Stream stream, EffectData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public InputMessage : object {
public bool ShouldPool
private bool _disposed
public int buttons
public Vector3 aimAngles
public Vector3 mouseDelta
public void ResetToPool(InputMessage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(InputMessage instance)
public InputMessage Copy()
public InputMessage Deserialize(Stream stream)
public InputMessage DeserializeLengthDelimited(Stream stream)
public InputMessage DeserializeLength(Stream stream, int length)
public InputMessage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, InputMessage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public InputMessage Deserialize(Byte[] buffer, InputMessage instance, bool isDelta)
public InputMessage Deserialize(Stream stream, InputMessage instance, bool isDelta)
public InputMessage DeserializeLengthDelimited(Stream stream, InputMessage instance, bool isDelta)
public InputMessage DeserializeLength(Stream stream, int length, InputMessage instance, bool isDelta)
public void SerializeDelta(Stream stream, InputMessage instance, InputMessage previous)
public void Serialize(Stream stream, InputMessage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(InputMessage instance)
public void SerializeLengthDelimited(Stream stream, InputMessage instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ItemContainerId : ValueType {
public ulong Value
public bool IsValid
public bool get_IsValid()
public void .ctor(ulong value)
public string ToString()
public bool Equals(ItemContainerId other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(ItemContainerId left, ItemContainerId right)
public bool op_Inequality(ItemContainerId left, ItemContainerId right)
}
public ItemId : ValueType {
public ulong Value
public bool IsValid
public bool get_IsValid()
public void .ctor(ulong value)
public string ToString()
public bool Equals(ItemId other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(ItemId left, ItemId right)
public bool op_Inequality(ItemId left, ItemId right)
}
public ModelState : object {
public bool ShouldPool
private bool _disposed
public float waterLevel
public Vector3 lookDir
public int flags
public int poseType
public Vector3 inheritedVelocity
public int ladderType
public bool ducked
public bool jumped
public bool onground
public bool sleeping
public bool sprinting
public bool onLadder
public bool flying
public bool aiming
public bool prone
public bool mounted
public bool relaxed
public bool crawling
public bool onPhone
public bool headLook
public bool HasFlag(Flag f)
public void SetFlag(Flag f, bool b)
public bool get_ducked()
public void set_ducked(bool value)
public bool get_jumped()
public void set_jumped(bool value)
public bool get_onground()
public void set_onground(bool value)
public bool get_sleeping()
public void set_sleeping(bool value)
public bool get_sprinting()
public void set_sprinting(bool value)
public bool get_onLadder()
public void set_onLadder(bool value)
public bool get_flying()
public void set_flying(bool value)
public bool get_aiming()
public void set_aiming(bool value)
public bool get_prone()
public void set_prone(bool value)
public bool get_mounted()
public void set_mounted(bool value)
public bool get_relaxed()
public void set_relaxed(bool value)
public bool get_crawling()
public void set_crawling(bool value)
public bool get_onPhone()
public void set_onPhone(bool value)
public bool get_headLook()
public void set_headLook(bool value)
public bool Equal(ModelState a, ModelState b)
public void ResetToPool(ModelState instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ModelState instance)
public ModelState Copy()
public ModelState Deserialize(Stream stream)
public ModelState DeserializeLengthDelimited(Stream stream)
public ModelState DeserializeLength(Stream stream, int length)
public ModelState Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ModelState previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ModelState Deserialize(Byte[] buffer, ModelState instance, bool isDelta)
public ModelState Deserialize(Stream stream, ModelState instance, bool isDelta)
public ModelState DeserializeLengthDelimited(Stream stream, ModelState instance, bool isDelta)
public ModelState DeserializeLength(Stream stream, int length, ModelState instance, bool isDelta)
public void SerializeDelta(Stream stream, ModelState instance, ModelState previous)
public void Serialize(Stream stream, ModelState instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ModelState instance)
public void SerializeLengthDelimited(Stream stream, ModelState instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public NetworkableId : ValueType {
public ulong Value
public bool IsValid
public bool get_IsValid()
public void .ctor(ulong value)
public string ToString()
public bool Equals(NetworkableId other)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(NetworkableId left, NetworkableId right)
public bool op_Inequality(NetworkableId left, NetworkableId right)
}
public PlayerTick : object {
public bool ShouldPool
private bool _disposed
public InputMessage inputState
public Vector3 position
public ModelState modelState
public ItemId activeItem
public Vector3 eyePos
public NetworkableId parentID
public UInt32 deltaMs
public void ResetToPool(PlayerTick instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerTick instance)
public PlayerTick Copy()
public PlayerTick Deserialize(Stream stream)
public PlayerTick DeserializeLengthDelimited(Stream stream)
public PlayerTick DeserializeLength(Stream stream, int length)
public PlayerTick Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerTick previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerTick Deserialize(Byte[] buffer, PlayerTick instance, bool isDelta)
public PlayerTick Deserialize(Stream stream, PlayerTick instance, bool isDelta)
public PlayerTick DeserializeLengthDelimited(Stream stream, PlayerTick instance, bool isDelta)
public PlayerTick DeserializeLength(Stream stream, int length, PlayerTick instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerTick instance, PlayerTick previous)
public void Serialize(Stream stream, PlayerTick instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerTick instance)
public void SerializeLengthDelimited(Stream stream, PlayerTick instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AggressionTimerAIEventData : object {
public bool ShouldPool
private bool _disposed
public float value
public void ResetToPool(AggressionTimerAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AggressionTimerAIEventData instance)
public AggressionTimerAIEventData Copy()
public AggressionTimerAIEventData Deserialize(Stream stream)
public AggressionTimerAIEventData DeserializeLengthDelimited(Stream stream)
public AggressionTimerAIEventData DeserializeLength(Stream stream, int length)
public AggressionTimerAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AggressionTimerAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AggressionTimerAIEventData Deserialize(Byte[] buffer, AggressionTimerAIEventData instance, bool isDelta)
public AggressionTimerAIEventData Deserialize(Stream stream, AggressionTimerAIEventData instance, bool isDelta)
public AggressionTimerAIEventData DeserializeLengthDelimited(Stream stream, AggressionTimerAIEventData instance, bool isDelta)
public AggressionTimerAIEventData DeserializeLength(Stream stream, int length, AggressionTimerAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, AggressionTimerAIEventData instance, AggressionTimerAIEventData previous)
public void Serialize(Stream stream, AggressionTimerAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AggressionTimerAIEventData instance)
public void SerializeLengthDelimited(Stream stream, AggressionTimerAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AIDesign : object {
public bool ShouldPool
private bool _disposed
public List`1<int> availableStates
public List`1<AIStateContainer> stateContainers
public int defaultStateContainer
public string description
public int scope
public int intialViewStateID
public void ResetToPool(AIDesign instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AIDesign instance)
public AIDesign Copy()
public AIDesign Deserialize(Stream stream)
public AIDesign DeserializeLengthDelimited(Stream stream)
public AIDesign DeserializeLength(Stream stream, int length)
public AIDesign Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AIDesign previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AIDesign Deserialize(Byte[] buffer, AIDesign instance, bool isDelta)
public AIDesign Deserialize(Stream stream, AIDesign instance, bool isDelta)
public AIDesign DeserializeLengthDelimited(Stream stream, AIDesign instance, bool isDelta)
public AIDesign DeserializeLength(Stream stream, int length, AIDesign instance, bool isDelta)
public void SerializeDelta(Stream stream, AIDesign instance, AIDesign previous)
public void Serialize(Stream stream, AIDesign instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AIDesign instance)
public void SerializeLengthDelimited(Stream stream, AIDesign instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AIEventData : object {
public bool ShouldPool
private bool _disposed
public int eventType
public int triggerStateContainer
public bool inverted
public int inputMemorySlot
public int outputMemorySlot
public int id
public TimerAIEventData timerData
public PlayerDetectedAIEventData playerDetectedData
public HealthBelowAIEventData healthBelowData
public InRangeAIEventData inRangeData
public HungerAboveAIEventData hungerAboveData
public TirednessAboveAIEventData tirednessAboveData
public ThreatDetectedAIEventData threatDetectedData
public TargetDetectedAIEventData targetDetectedData
public AmmoBelowAIEventData ammoBelowData
public ChanceAIEventData chanceData
public TimeSinceThreatAIEventData timeSinceThreatData
public AggressionTimerAIEventData aggressionTimerData
public InRangeOfHomeAIEventData inRangeOfHomeData
public void ResetToPool(AIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AIEventData instance)
public AIEventData Copy()
public AIEventData Deserialize(Stream stream)
public AIEventData DeserializeLengthDelimited(Stream stream)
public AIEventData DeserializeLength(Stream stream, int length)
public AIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AIEventData Deserialize(Byte[] buffer, AIEventData instance, bool isDelta)
public AIEventData Deserialize(Stream stream, AIEventData instance, bool isDelta)
public AIEventData DeserializeLengthDelimited(Stream stream, AIEventData instance, bool isDelta)
public AIEventData DeserializeLength(Stream stream, int length, AIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, AIEventData instance, AIEventData previous)
public void Serialize(Stream stream, AIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AIEventData instance)
public void SerializeLengthDelimited(Stream stream, AIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AIStateContainer : object {
public bool ShouldPool
private bool _disposed
public int id
public int state
public List`1<AIEventData> events
public int inputMemorySlot
public void ResetToPool(AIStateContainer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AIStateContainer instance)
public AIStateContainer Copy()
public AIStateContainer Deserialize(Stream stream)
public AIStateContainer DeserializeLengthDelimited(Stream stream)
public AIStateContainer DeserializeLength(Stream stream, int length)
public AIStateContainer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AIStateContainer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AIStateContainer Deserialize(Byte[] buffer, AIStateContainer instance, bool isDelta)
public AIStateContainer Deserialize(Stream stream, AIStateContainer instance, bool isDelta)
public AIStateContainer DeserializeLengthDelimited(Stream stream, AIStateContainer instance, bool isDelta)
public AIStateContainer DeserializeLength(Stream stream, int length, AIStateContainer instance, bool isDelta)
public void SerializeDelta(Stream stream, AIStateContainer instance, AIStateContainer previous)
public void Serialize(Stream stream, AIStateContainer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AIStateContainer instance)
public void SerializeLengthDelimited(Stream stream, AIStateContainer instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AmmoBelowAIEventData : object {
public bool ShouldPool
private bool _disposed
public float value
public void ResetToPool(AmmoBelowAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AmmoBelowAIEventData instance)
public AmmoBelowAIEventData Copy()
public AmmoBelowAIEventData Deserialize(Stream stream)
public AmmoBelowAIEventData DeserializeLengthDelimited(Stream stream)
public AmmoBelowAIEventData DeserializeLength(Stream stream, int length)
public AmmoBelowAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AmmoBelowAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AmmoBelowAIEventData Deserialize(Byte[] buffer, AmmoBelowAIEventData instance, bool isDelta)
public AmmoBelowAIEventData Deserialize(Stream stream, AmmoBelowAIEventData instance, bool isDelta)
public AmmoBelowAIEventData DeserializeLengthDelimited(Stream stream, AmmoBelowAIEventData instance, bool isDelta)
public AmmoBelowAIEventData DeserializeLength(Stream stream, int length, AmmoBelowAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, AmmoBelowAIEventData instance, AmmoBelowAIEventData previous)
public void Serialize(Stream stream, AmmoBelowAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AmmoBelowAIEventData instance)
public void SerializeLengthDelimited(Stream stream, AmmoBelowAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppBroadcast : object {
public bool ShouldPool
private bool _disposed
public AppTeamChanged teamChanged
public AppTeamMessage teamMessage
public AppEntityChanged entityChanged
public AppCameraRays cameraRays
public void ResetToPool(AppBroadcast instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppBroadcast instance)
public AppBroadcast Copy()
public AppBroadcast Deserialize(Stream stream)
public AppBroadcast DeserializeLengthDelimited(Stream stream)
public AppBroadcast DeserializeLength(Stream stream, int length)
public AppBroadcast Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppBroadcast previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppBroadcast Deserialize(Byte[] buffer, AppBroadcast instance, bool isDelta)
public AppBroadcast Deserialize(Stream stream, AppBroadcast instance, bool isDelta)
public AppBroadcast DeserializeLengthDelimited(Stream stream, AppBroadcast instance, bool isDelta)
public AppBroadcast DeserializeLength(Stream stream, int length, AppBroadcast instance, bool isDelta)
public void SerializeDelta(Stream stream, AppBroadcast instance, AppBroadcast previous)
public void Serialize(Stream stream, AppBroadcast instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppBroadcast instance)
public void SerializeLengthDelimited(Stream stream, AppBroadcast instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppCameraInfo : object {
public bool ShouldPool
private bool _disposed
public int width
public int height
public float nearPlane
public float farPlane
public int controlFlags
public void ResetToPool(AppCameraInfo instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppCameraInfo instance)
public AppCameraInfo Copy()
public AppCameraInfo Deserialize(Stream stream)
public AppCameraInfo DeserializeLengthDelimited(Stream stream)
public AppCameraInfo DeserializeLength(Stream stream, int length)
public AppCameraInfo Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppCameraInfo previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppCameraInfo Deserialize(Byte[] buffer, AppCameraInfo instance, bool isDelta)
public AppCameraInfo Deserialize(Stream stream, AppCameraInfo instance, bool isDelta)
public AppCameraInfo DeserializeLengthDelimited(Stream stream, AppCameraInfo instance, bool isDelta)
public AppCameraInfo DeserializeLength(Stream stream, int length, AppCameraInfo instance, bool isDelta)
public void SerializeDelta(Stream stream, AppCameraInfo instance, AppCameraInfo previous)
public void Serialize(Stream stream, AppCameraInfo instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppCameraInfo instance)
public void SerializeLengthDelimited(Stream stream, AppCameraInfo instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppCameraInput : object {
public bool ShouldPool
private bool _disposed
public int buttons
public Vector2 mouseDelta
public void ResetToPool(AppCameraInput instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppCameraInput instance)
public AppCameraInput Copy()
public AppCameraInput Deserialize(Stream stream)
public AppCameraInput DeserializeLengthDelimited(Stream stream)
public AppCameraInput DeserializeLength(Stream stream, int length)
public AppCameraInput Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppCameraInput previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppCameraInput Deserialize(Byte[] buffer, AppCameraInput instance, bool isDelta)
public AppCameraInput Deserialize(Stream stream, AppCameraInput instance, bool isDelta)
public AppCameraInput DeserializeLengthDelimited(Stream stream, AppCameraInput instance, bool isDelta)
public AppCameraInput DeserializeLength(Stream stream, int length, AppCameraInput instance, bool isDelta)
public void SerializeDelta(Stream stream, AppCameraInput instance, AppCameraInput previous)
public void Serialize(Stream stream, AppCameraInput instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppCameraInput instance)
public void SerializeLengthDelimited(Stream stream, AppCameraInput instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppCameraRays : object {
public bool ShouldPool
private bool _disposed
public float verticalFov
public int sampleOffset
public ArraySegment`1<byte> rayData
public float distance
public List`1<Entity> entities
public float timeOfDay
public void ResetToPool(AppCameraRays instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppCameraRays instance)
public AppCameraRays Copy()
public AppCameraRays Deserialize(Stream stream)
public AppCameraRays DeserializeLengthDelimited(Stream stream)
public AppCameraRays DeserializeLength(Stream stream, int length)
public AppCameraRays Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppCameraRays previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppCameraRays Deserialize(Byte[] buffer, AppCameraRays instance, bool isDelta)
public AppCameraRays Deserialize(Stream stream, AppCameraRays instance, bool isDelta)
public AppCameraRays DeserializeLengthDelimited(Stream stream, AppCameraRays instance, bool isDelta)
public AppCameraRays DeserializeLength(Stream stream, int length, AppCameraRays instance, bool isDelta)
public void SerializeDelta(Stream stream, AppCameraRays instance, AppCameraRays previous)
public void Serialize(Stream stream, AppCameraRays instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppCameraRays instance)
public void SerializeLengthDelimited(Stream stream, AppCameraRays instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppCameraSubscribe : object {
public bool ShouldPool
private bool _disposed
public string cameraId
public void ResetToPool(AppCameraSubscribe instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppCameraSubscribe instance)
public AppCameraSubscribe Copy()
public AppCameraSubscribe Deserialize(Stream stream)
public AppCameraSubscribe DeserializeLengthDelimited(Stream stream)
public AppCameraSubscribe DeserializeLength(Stream stream, int length)
public AppCameraSubscribe Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppCameraSubscribe previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppCameraSubscribe Deserialize(Byte[] buffer, AppCameraSubscribe instance, bool isDelta)
public AppCameraSubscribe Deserialize(Stream stream, AppCameraSubscribe instance, bool isDelta)
public AppCameraSubscribe DeserializeLengthDelimited(Stream stream, AppCameraSubscribe instance, bool isDelta)
public AppCameraSubscribe DeserializeLength(Stream stream, int length, AppCameraSubscribe instance, bool isDelta)
public void SerializeDelta(Stream stream, AppCameraSubscribe instance, AppCameraSubscribe previous)
public void Serialize(Stream stream, AppCameraSubscribe instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppCameraSubscribe instance)
public void SerializeLengthDelimited(Stream stream, AppCameraSubscribe instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppChatMessage : object {
public bool ShouldPool
private bool _disposed
public ulong steamId
public string name
public string message
public string color
public UInt32 time
public void ResetToPool(AppChatMessage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppChatMessage instance)
public AppChatMessage Copy()
public AppChatMessage Deserialize(Stream stream)
public AppChatMessage DeserializeLengthDelimited(Stream stream)
public AppChatMessage DeserializeLength(Stream stream, int length)
public AppChatMessage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppChatMessage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppChatMessage Deserialize(Byte[] buffer, AppChatMessage instance, bool isDelta)
public AppChatMessage Deserialize(Stream stream, AppChatMessage instance, bool isDelta)
public AppChatMessage DeserializeLengthDelimited(Stream stream, AppChatMessage instance, bool isDelta)
public AppChatMessage DeserializeLength(Stream stream, int length, AppChatMessage instance, bool isDelta)
public void SerializeDelta(Stream stream, AppChatMessage instance, AppChatMessage previous)
public void Serialize(Stream stream, AppChatMessage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppChatMessage instance)
public void SerializeLengthDelimited(Stream stream, AppChatMessage instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppEmpty : object {
public bool ShouldPool
private bool _disposed
public void ResetToPool(AppEmpty instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppEmpty instance)
public AppEmpty Copy()
public AppEmpty Deserialize(Stream stream)
public AppEmpty DeserializeLengthDelimited(Stream stream)
public AppEmpty DeserializeLength(Stream stream, int length)
public AppEmpty Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppEmpty previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppEmpty Deserialize(Byte[] buffer, AppEmpty instance, bool isDelta)
public AppEmpty Deserialize(Stream stream, AppEmpty instance, bool isDelta)
public AppEmpty DeserializeLengthDelimited(Stream stream, AppEmpty instance, bool isDelta)
public AppEmpty DeserializeLength(Stream stream, int length, AppEmpty instance, bool isDelta)
public void SerializeDelta(Stream stream, AppEmpty instance, AppEmpty previous)
public void Serialize(Stream stream, AppEmpty instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppEmpty instance)
public void SerializeLengthDelimited(Stream stream, AppEmpty instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppEntityChanged : object {
public bool ShouldPool
private bool _disposed
public NetworkableId entityId
public AppEntityPayload payload
public void ResetToPool(AppEntityChanged instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppEntityChanged instance)
public AppEntityChanged Copy()
public AppEntityChanged Deserialize(Stream stream)
public AppEntityChanged DeserializeLengthDelimited(Stream stream)
public AppEntityChanged DeserializeLength(Stream stream, int length)
public AppEntityChanged Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppEntityChanged previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppEntityChanged Deserialize(Byte[] buffer, AppEntityChanged instance, bool isDelta)
public AppEntityChanged Deserialize(Stream stream, AppEntityChanged instance, bool isDelta)
public AppEntityChanged DeserializeLengthDelimited(Stream stream, AppEntityChanged instance, bool isDelta)
public AppEntityChanged DeserializeLength(Stream stream, int length, AppEntityChanged instance, bool isDelta)
public void SerializeDelta(Stream stream, AppEntityChanged instance, AppEntityChanged previous)
public void Serialize(Stream stream, AppEntityChanged instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppEntityChanged instance)
public void SerializeLengthDelimited(Stream stream, AppEntityChanged instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppEntityInfo : object {
public bool ShouldPool
private bool _disposed
public AppEntityType type
public AppEntityPayload payload
public void ResetToPool(AppEntityInfo instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppEntityInfo instance)
public AppEntityInfo Copy()
public AppEntityInfo Deserialize(Stream stream)
public AppEntityInfo DeserializeLengthDelimited(Stream stream)
public AppEntityInfo DeserializeLength(Stream stream, int length)
public AppEntityInfo Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppEntityInfo previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppEntityInfo Deserialize(Byte[] buffer, AppEntityInfo instance, bool isDelta)
public AppEntityInfo Deserialize(Stream stream, AppEntityInfo instance, bool isDelta)
public AppEntityInfo DeserializeLengthDelimited(Stream stream, AppEntityInfo instance, bool isDelta)
public AppEntityInfo DeserializeLength(Stream stream, int length, AppEntityInfo instance, bool isDelta)
public void SerializeDelta(Stream stream, AppEntityInfo instance, AppEntityInfo previous)
public void Serialize(Stream stream, AppEntityInfo instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppEntityInfo instance)
public void SerializeLengthDelimited(Stream stream, AppEntityInfo instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppEntityPayload : object {
public bool ShouldPool
private bool _disposed
public bool value
public List`1<Item> items
public int capacity
public bool hasProtection
public UInt32 protectionExpiry
public void ResetToPool(AppEntityPayload instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppEntityPayload instance)
public AppEntityPayload Copy()
public AppEntityPayload Deserialize(Stream stream)
public AppEntityPayload DeserializeLengthDelimited(Stream stream)
public AppEntityPayload DeserializeLength(Stream stream, int length)
public AppEntityPayload Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppEntityPayload previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppEntityPayload Deserialize(Byte[] buffer, AppEntityPayload instance, bool isDelta)
public AppEntityPayload Deserialize(Stream stream, AppEntityPayload instance, bool isDelta)
public AppEntityPayload DeserializeLengthDelimited(Stream stream, AppEntityPayload instance, bool isDelta)
public AppEntityPayload DeserializeLength(Stream stream, int length, AppEntityPayload instance, bool isDelta)
public void SerializeDelta(Stream stream, AppEntityPayload instance, AppEntityPayload previous)
public void Serialize(Stream stream, AppEntityPayload instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppEntityPayload instance)
public void SerializeLengthDelimited(Stream stream, AppEntityPayload instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppEntityType : Enum {
public int value__
public AppEntityType Switch
public AppEntityType Alarm
public AppEntityType StorageMonitor
}
public ProtoBuf.AppError : object {
public bool ShouldPool
private bool _disposed
public string error
public void ResetToPool(AppError instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppError instance)
public AppError Copy()
public AppError Deserialize(Stream stream)
public AppError DeserializeLengthDelimited(Stream stream)
public AppError DeserializeLength(Stream stream, int length)
public AppError Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppError previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppError Deserialize(Byte[] buffer, AppError instance, bool isDelta)
public AppError Deserialize(Stream stream, AppError instance, bool isDelta)
public AppError DeserializeLengthDelimited(Stream stream, AppError instance, bool isDelta)
public AppError DeserializeLength(Stream stream, int length, AppError instance, bool isDelta)
public void SerializeDelta(Stream stream, AppError instance, AppError previous)
public void Serialize(Stream stream, AppError instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppError instance)
public void SerializeLengthDelimited(Stream stream, AppError instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppFlag : object {
public bool ShouldPool
private bool _disposed
public bool value
public void ResetToPool(AppFlag instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppFlag instance)
public AppFlag Copy()
public AppFlag Deserialize(Stream stream)
public AppFlag DeserializeLengthDelimited(Stream stream)
public AppFlag DeserializeLength(Stream stream, int length)
public AppFlag Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppFlag previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppFlag Deserialize(Byte[] buffer, AppFlag instance, bool isDelta)
public AppFlag Deserialize(Stream stream, AppFlag instance, bool isDelta)
public AppFlag DeserializeLengthDelimited(Stream stream, AppFlag instance, bool isDelta)
public AppFlag DeserializeLength(Stream stream, int length, AppFlag instance, bool isDelta)
public void SerializeDelta(Stream stream, AppFlag instance, AppFlag previous)
public void Serialize(Stream stream, AppFlag instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppFlag instance)
public void SerializeLengthDelimited(Stream stream, AppFlag instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppInfo : object {
public bool ShouldPool
private bool _disposed
public string name
public string headerImage
public string url
public string map
public UInt32 mapSize
public UInt32 wipeTime
public UInt32 players
public UInt32 maxPlayers
public UInt32 queuedPlayers
public UInt32 seed
public UInt32 salt
public string logoImage
public bool camerasEnabled
public void ResetToPool(AppInfo instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppInfo instance)
public AppInfo Copy()
public AppInfo Deserialize(Stream stream)
public AppInfo DeserializeLengthDelimited(Stream stream)
public AppInfo DeserializeLength(Stream stream, int length)
public AppInfo Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppInfo previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppInfo Deserialize(Byte[] buffer, AppInfo instance, bool isDelta)
public AppInfo Deserialize(Stream stream, AppInfo instance, bool isDelta)
public AppInfo DeserializeLengthDelimited(Stream stream, AppInfo instance, bool isDelta)
public AppInfo DeserializeLength(Stream stream, int length, AppInfo instance, bool isDelta)
public void SerializeDelta(Stream stream, AppInfo instance, AppInfo previous)
public void Serialize(Stream stream, AppInfo instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppInfo instance)
public void SerializeLengthDelimited(Stream stream, AppInfo instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppMap : object {
public bool ShouldPool
private bool _disposed
public UInt32 width
public UInt32 height
public Byte[] jpgImage
public int oceanMargin
public List`1<Monument> monuments
public string background
public void ResetToPool(AppMap instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppMap instance)
public AppMap Copy()
public AppMap Deserialize(Stream stream)
public AppMap DeserializeLengthDelimited(Stream stream)
public AppMap DeserializeLength(Stream stream, int length)
public AppMap Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppMap previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppMap Deserialize(Byte[] buffer, AppMap instance, bool isDelta)
public AppMap Deserialize(Stream stream, AppMap instance, bool isDelta)
public AppMap DeserializeLengthDelimited(Stream stream, AppMap instance, bool isDelta)
public AppMap DeserializeLength(Stream stream, int length, AppMap instance, bool isDelta)
public void SerializeDelta(Stream stream, AppMap instance, AppMap previous)
public void Serialize(Stream stream, AppMap instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppMap instance)
public void SerializeLengthDelimited(Stream stream, AppMap instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppMapMarkers : object {
public bool ShouldPool
private bool _disposed
public List`1<AppMarker> markers
public void ResetToPool(AppMapMarkers instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppMapMarkers instance)
public AppMapMarkers Copy()
public AppMapMarkers Deserialize(Stream stream)
public AppMapMarkers DeserializeLengthDelimited(Stream stream)
public AppMapMarkers DeserializeLength(Stream stream, int length)
public AppMapMarkers Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppMapMarkers previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppMapMarkers Deserialize(Byte[] buffer, AppMapMarkers instance, bool isDelta)
public AppMapMarkers Deserialize(Stream stream, AppMapMarkers instance, bool isDelta)
public AppMapMarkers DeserializeLengthDelimited(Stream stream, AppMapMarkers instance, bool isDelta)
public AppMapMarkers DeserializeLength(Stream stream, int length, AppMapMarkers instance, bool isDelta)
public void SerializeDelta(Stream stream, AppMapMarkers instance, AppMapMarkers previous)
public void Serialize(Stream stream, AppMapMarkers instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppMapMarkers instance)
public void SerializeLengthDelimited(Stream stream, AppMapMarkers instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppMarker : object {
public bool ShouldPool
private bool _disposed
public NetworkableId id
public AppMarkerType type
public float x
public float y
public ulong steamId
public float rotation
public float radius
public Vector4 color1
public Vector4 color2
public float alpha
public string name
public bool outOfStock
public List`1<SellOrder> sellOrders
public void ResetToPool(AppMarker instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppMarker instance)
public AppMarker Copy()
public AppMarker Deserialize(Stream stream)
public AppMarker DeserializeLengthDelimited(Stream stream)
public AppMarker DeserializeLength(Stream stream, int length)
public AppMarker Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppMarker previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppMarker Deserialize(Byte[] buffer, AppMarker instance, bool isDelta)
public AppMarker Deserialize(Stream stream, AppMarker instance, bool isDelta)
public AppMarker DeserializeLengthDelimited(Stream stream, AppMarker instance, bool isDelta)
public AppMarker DeserializeLength(Stream stream, int length, AppMarker instance, bool isDelta)
public void SerializeDelta(Stream stream, AppMarker instance, AppMarker previous)
public void Serialize(Stream stream, AppMarker instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppMarker instance)
public void SerializeLengthDelimited(Stream stream, AppMarker instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppMarkerType : Enum {
public int value__
public AppMarkerType Undefined
public AppMarkerType Player
public AppMarkerType Explosion
public AppMarkerType VendingMachine
public AppMarkerType CH47
public AppMarkerType CargoShip
public AppMarkerType Crate
public AppMarkerType GenericRadius
public AppMarkerType PatrolHelicopter
}
public ProtoBuf.AppMessage : object {
public bool ShouldPool
private bool _disposed
public AppResponse response
public AppBroadcast broadcast
public void ResetToPool(AppMessage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppMessage instance)
public AppMessage Copy()
public AppMessage Deserialize(Stream stream)
public AppMessage DeserializeLengthDelimited(Stream stream)
public AppMessage DeserializeLength(Stream stream, int length)
public AppMessage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppMessage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppMessage Deserialize(Byte[] buffer, AppMessage instance, bool isDelta)
public AppMessage Deserialize(Stream stream, AppMessage instance, bool isDelta)
public AppMessage DeserializeLengthDelimited(Stream stream, AppMessage instance, bool isDelta)
public AppMessage DeserializeLength(Stream stream, int length, AppMessage instance, bool isDelta)
public void SerializeDelta(Stream stream, AppMessage instance, AppMessage previous)
public void Serialize(Stream stream, AppMessage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppMessage instance)
public void SerializeLengthDelimited(Stream stream, AppMessage instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppPromoteToLeader : object {
public bool ShouldPool
private bool _disposed
public ulong steamId
public void ResetToPool(AppPromoteToLeader instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppPromoteToLeader instance)
public AppPromoteToLeader Copy()
public AppPromoteToLeader Deserialize(Stream stream)
public AppPromoteToLeader DeserializeLengthDelimited(Stream stream)
public AppPromoteToLeader DeserializeLength(Stream stream, int length)
public AppPromoteToLeader Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppPromoteToLeader previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppPromoteToLeader Deserialize(Byte[] buffer, AppPromoteToLeader instance, bool isDelta)
public AppPromoteToLeader Deserialize(Stream stream, AppPromoteToLeader instance, bool isDelta)
public AppPromoteToLeader DeserializeLengthDelimited(Stream stream, AppPromoteToLeader instance, bool isDelta)
public AppPromoteToLeader DeserializeLength(Stream stream, int length, AppPromoteToLeader instance, bool isDelta)
public void SerializeDelta(Stream stream, AppPromoteToLeader instance, AppPromoteToLeader previous)
public void Serialize(Stream stream, AppPromoteToLeader instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppPromoteToLeader instance)
public void SerializeLengthDelimited(Stream stream, AppPromoteToLeader instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppRequest : object {
public bool ShouldPool
private bool _disposed
public UInt32 seq
public ulong playerId
public int playerToken
public NetworkableId entityId
public AppEmpty getInfo
public AppEmpty getTime
public AppEmpty getMap
public AppEmpty getTeamInfo
public AppEmpty getTeamChat
public AppSendMessage sendTeamMessage
public AppEmpty getEntityInfo
public AppSetEntityValue setEntityValue
public AppEmpty checkSubscription
public AppFlag setSubscription
public AppEmpty getMapMarkers
public AppPromoteToLeader promoteToLeader
public AppCameraSubscribe cameraSubscribe
public AppEmpty cameraUnsubscribe
public AppCameraInput cameraInput
public void ResetToPool(AppRequest instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppRequest instance)
public AppRequest Copy()
public AppRequest Deserialize(Stream stream)
public AppRequest DeserializeLengthDelimited(Stream stream)
public AppRequest DeserializeLength(Stream stream, int length)
public AppRequest Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppRequest previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppRequest Deserialize(Byte[] buffer, AppRequest instance, bool isDelta)
public AppRequest Deserialize(Stream stream, AppRequest instance, bool isDelta)
public AppRequest DeserializeLengthDelimited(Stream stream, AppRequest instance, bool isDelta)
public AppRequest DeserializeLength(Stream stream, int length, AppRequest instance, bool isDelta)
public void SerializeDelta(Stream stream, AppRequest instance, AppRequest previous)
public void Serialize(Stream stream, AppRequest instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppRequest instance)
public void SerializeLengthDelimited(Stream stream, AppRequest instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppResponse : object {
public bool ShouldPool
private bool _disposed
public UInt32 seq
public AppSuccess success
public AppError error
public AppInfo info
public AppTime time
public AppMap map
public AppTeamInfo teamInfo
public AppTeamChat teamChat
public AppEntityInfo entityInfo
public AppFlag flag
public AppMapMarkers mapMarkers
public AppCameraInfo cameraSubscribeInfo
public void ResetToPool(AppResponse instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppResponse instance)
public AppResponse Copy()
public AppResponse Deserialize(Stream stream)
public AppResponse DeserializeLengthDelimited(Stream stream)
public AppResponse DeserializeLength(Stream stream, int length)
public AppResponse Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppResponse previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppResponse Deserialize(Byte[] buffer, AppResponse instance, bool isDelta)
public AppResponse Deserialize(Stream stream, AppResponse instance, bool isDelta)
public AppResponse DeserializeLengthDelimited(Stream stream, AppResponse instance, bool isDelta)
public AppResponse DeserializeLength(Stream stream, int length, AppResponse instance, bool isDelta)
public void SerializeDelta(Stream stream, AppResponse instance, AppResponse previous)
public void Serialize(Stream stream, AppResponse instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppResponse instance)
public void SerializeLengthDelimited(Stream stream, AppResponse instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Approval : object {
public bool ShouldPool
private bool _disposed
public string level
public string hostname
public bool modded
public bool official
public ulong steamid
public UInt32 ipaddress
public int port
public UInt32 levelSeed
public UInt32 levelSize
public string checksum
public UInt32 encryption
public string levelUrl
public bool levelTransfer
public string version
public void ResetToPool(Approval instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Approval instance)
public Approval Copy()
public Approval Deserialize(Stream stream)
public Approval DeserializeLengthDelimited(Stream stream)
public Approval DeserializeLength(Stream stream, int length)
public Approval Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Approval previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Approval Deserialize(Byte[] buffer, Approval instance, bool isDelta)
public Approval Deserialize(Stream stream, Approval instance, bool isDelta)
public Approval DeserializeLengthDelimited(Stream stream, Approval instance, bool isDelta)
public Approval DeserializeLength(Stream stream, int length, Approval instance, bool isDelta)
public void SerializeDelta(Stream stream, Approval instance, Approval previous)
public void Serialize(Stream stream, Approval instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Approval instance)
public void SerializeLengthDelimited(Stream stream, Approval instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppSendMessage : object {
public bool ShouldPool
private bool _disposed
public string message
public void ResetToPool(AppSendMessage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppSendMessage instance)
public AppSendMessage Copy()
public AppSendMessage Deserialize(Stream stream)
public AppSendMessage DeserializeLengthDelimited(Stream stream)
public AppSendMessage DeserializeLength(Stream stream, int length)
public AppSendMessage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppSendMessage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppSendMessage Deserialize(Byte[] buffer, AppSendMessage instance, bool isDelta)
public AppSendMessage Deserialize(Stream stream, AppSendMessage instance, bool isDelta)
public AppSendMessage DeserializeLengthDelimited(Stream stream, AppSendMessage instance, bool isDelta)
public AppSendMessage DeserializeLength(Stream stream, int length, AppSendMessage instance, bool isDelta)
public void SerializeDelta(Stream stream, AppSendMessage instance, AppSendMessage previous)
public void Serialize(Stream stream, AppSendMessage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppSendMessage instance)
public void SerializeLengthDelimited(Stream stream, AppSendMessage instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppSetEntityValue : object {
public bool ShouldPool
private bool _disposed
public bool value
public void ResetToPool(AppSetEntityValue instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppSetEntityValue instance)
public AppSetEntityValue Copy()
public AppSetEntityValue Deserialize(Stream stream)
public AppSetEntityValue DeserializeLengthDelimited(Stream stream)
public AppSetEntityValue DeserializeLength(Stream stream, int length)
public AppSetEntityValue Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppSetEntityValue previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppSetEntityValue Deserialize(Byte[] buffer, AppSetEntityValue instance, bool isDelta)
public AppSetEntityValue Deserialize(Stream stream, AppSetEntityValue instance, bool isDelta)
public AppSetEntityValue DeserializeLengthDelimited(Stream stream, AppSetEntityValue instance, bool isDelta)
public AppSetEntityValue DeserializeLength(Stream stream, int length, AppSetEntityValue instance, bool isDelta)
public void SerializeDelta(Stream stream, AppSetEntityValue instance, AppSetEntityValue previous)
public void Serialize(Stream stream, AppSetEntityValue instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppSetEntityValue instance)
public void SerializeLengthDelimited(Stream stream, AppSetEntityValue instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppSuccess : object {
public bool ShouldPool
private bool _disposed
public void ResetToPool(AppSuccess instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppSuccess instance)
public AppSuccess Copy()
public AppSuccess Deserialize(Stream stream)
public AppSuccess DeserializeLengthDelimited(Stream stream)
public AppSuccess DeserializeLength(Stream stream, int length)
public AppSuccess Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppSuccess previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppSuccess Deserialize(Byte[] buffer, AppSuccess instance, bool isDelta)
public AppSuccess Deserialize(Stream stream, AppSuccess instance, bool isDelta)
public AppSuccess DeserializeLengthDelimited(Stream stream, AppSuccess instance, bool isDelta)
public AppSuccess DeserializeLength(Stream stream, int length, AppSuccess instance, bool isDelta)
public void SerializeDelta(Stream stream, AppSuccess instance, AppSuccess previous)
public void Serialize(Stream stream, AppSuccess instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppSuccess instance)
public void SerializeLengthDelimited(Stream stream, AppSuccess instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppTeamChanged : object {
public bool ShouldPool
private bool _disposed
public ulong playerId
public AppTeamInfo teamInfo
public void ResetToPool(AppTeamChanged instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppTeamChanged instance)
public AppTeamChanged Copy()
public AppTeamChanged Deserialize(Stream stream)
public AppTeamChanged DeserializeLengthDelimited(Stream stream)
public AppTeamChanged DeserializeLength(Stream stream, int length)
public AppTeamChanged Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppTeamChanged previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppTeamChanged Deserialize(Byte[] buffer, AppTeamChanged instance, bool isDelta)
public AppTeamChanged Deserialize(Stream stream, AppTeamChanged instance, bool isDelta)
public AppTeamChanged DeserializeLengthDelimited(Stream stream, AppTeamChanged instance, bool isDelta)
public AppTeamChanged DeserializeLength(Stream stream, int length, AppTeamChanged instance, bool isDelta)
public void SerializeDelta(Stream stream, AppTeamChanged instance, AppTeamChanged previous)
public void Serialize(Stream stream, AppTeamChanged instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppTeamChanged instance)
public void SerializeLengthDelimited(Stream stream, AppTeamChanged instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppTeamChat : object {
public bool ShouldPool
private bool _disposed
public List`1<AppChatMessage> messages
public void ResetToPool(AppTeamChat instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppTeamChat instance)
public AppTeamChat Copy()
public AppTeamChat Deserialize(Stream stream)
public AppTeamChat DeserializeLengthDelimited(Stream stream)
public AppTeamChat DeserializeLength(Stream stream, int length)
public AppTeamChat Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppTeamChat previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppTeamChat Deserialize(Byte[] buffer, AppTeamChat instance, bool isDelta)
public AppTeamChat Deserialize(Stream stream, AppTeamChat instance, bool isDelta)
public AppTeamChat DeserializeLengthDelimited(Stream stream, AppTeamChat instance, bool isDelta)
public AppTeamChat DeserializeLength(Stream stream, int length, AppTeamChat instance, bool isDelta)
public void SerializeDelta(Stream stream, AppTeamChat instance, AppTeamChat previous)
public void Serialize(Stream stream, AppTeamChat instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppTeamChat instance)
public void SerializeLengthDelimited(Stream stream, AppTeamChat instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppTeamInfo : object {
public bool ShouldPool
private bool _disposed
public ulong leaderSteamId
public List`1<Member> members
public List`1<Note> mapNotes
public List`1<Note> leaderMapNotes
public void ResetToPool(AppTeamInfo instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppTeamInfo instance)
public AppTeamInfo Copy()
public AppTeamInfo Deserialize(Stream stream)
public AppTeamInfo DeserializeLengthDelimited(Stream stream)
public AppTeamInfo DeserializeLength(Stream stream, int length)
public AppTeamInfo Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppTeamInfo previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppTeamInfo Deserialize(Byte[] buffer, AppTeamInfo instance, bool isDelta)
public AppTeamInfo Deserialize(Stream stream, AppTeamInfo instance, bool isDelta)
public AppTeamInfo DeserializeLengthDelimited(Stream stream, AppTeamInfo instance, bool isDelta)
public AppTeamInfo DeserializeLength(Stream stream, int length, AppTeamInfo instance, bool isDelta)
public void SerializeDelta(Stream stream, AppTeamInfo instance, AppTeamInfo previous)
public void Serialize(Stream stream, AppTeamInfo instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppTeamInfo instance)
public void SerializeLengthDelimited(Stream stream, AppTeamInfo instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppTeamMessage : object {
public bool ShouldPool
private bool _disposed
public AppChatMessage message
public void ResetToPool(AppTeamMessage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppTeamMessage instance)
public AppTeamMessage Copy()
public AppTeamMessage Deserialize(Stream stream)
public AppTeamMessage DeserializeLengthDelimited(Stream stream)
public AppTeamMessage DeserializeLength(Stream stream, int length)
public AppTeamMessage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppTeamMessage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppTeamMessage Deserialize(Byte[] buffer, AppTeamMessage instance, bool isDelta)
public AppTeamMessage Deserialize(Stream stream, AppTeamMessage instance, bool isDelta)
public AppTeamMessage DeserializeLengthDelimited(Stream stream, AppTeamMessage instance, bool isDelta)
public AppTeamMessage DeserializeLength(Stream stream, int length, AppTeamMessage instance, bool isDelta)
public void SerializeDelta(Stream stream, AppTeamMessage instance, AppTeamMessage previous)
public void Serialize(Stream stream, AppTeamMessage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppTeamMessage instance)
public void SerializeLengthDelimited(Stream stream, AppTeamMessage instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AppTime : object {
public bool ShouldPool
private bool _disposed
public float dayLengthMinutes
public float timeScale
public float sunrise
public float sunset
public float time
public void ResetToPool(AppTime instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AppTime instance)
public AppTime Copy()
public AppTime Deserialize(Stream stream)
public AppTime DeserializeLengthDelimited(Stream stream)
public AppTime DeserializeLength(Stream stream, int length)
public AppTime Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AppTime previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AppTime Deserialize(Byte[] buffer, AppTime instance, bool isDelta)
public AppTime Deserialize(Stream stream, AppTime instance, bool isDelta)
public AppTime DeserializeLengthDelimited(Stream stream, AppTime instance, bool isDelta)
public AppTime DeserializeLength(Stream stream, int length, AppTime instance, bool isDelta)
public void SerializeDelta(Stream stream, AppTime instance, AppTime previous)
public void Serialize(Stream stream, AppTime instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AppTime instance)
public void SerializeLengthDelimited(Stream stream, AppTime instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ArcadeGame : object {
public bool ShouldPool
private bool _disposed
public List`1<arcadeEnt> arcadeEnts
public void ResetToPool(ArcadeGame instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ArcadeGame instance)
public ArcadeGame Copy()
public ArcadeGame Deserialize(Stream stream)
public ArcadeGame DeserializeLengthDelimited(Stream stream)
public ArcadeGame DeserializeLength(Stream stream, int length)
public ArcadeGame Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ArcadeGame previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ArcadeGame Deserialize(Byte[] buffer, ArcadeGame instance, bool isDelta)
public ArcadeGame Deserialize(Stream stream, ArcadeGame instance, bool isDelta)
public ArcadeGame DeserializeLengthDelimited(Stream stream, ArcadeGame instance, bool isDelta)
public ArcadeGame DeserializeLength(Stream stream, int length, ArcadeGame instance, bool isDelta)
public void SerializeDelta(Stream stream, ArcadeGame instance, ArcadeGame previous)
public void Serialize(Stream stream, ArcadeGame instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ArcadeGame instance)
public void SerializeLengthDelimited(Stream stream, ArcadeGame instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ArcadeMachine : object {
public bool ShouldPool
private bool _disposed
public List`1<ScoreEntry> scores
public int genericInt1
public int genericInt2
public int genericInt3
public int genericInt4
public float genericFloat1
public float genericFloat2
public float genericFloat3
public float genericFloat4
public void ResetToPool(ArcadeMachine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ArcadeMachine instance)
public ArcadeMachine Copy()
public ArcadeMachine Deserialize(Stream stream)
public ArcadeMachine DeserializeLengthDelimited(Stream stream)
public ArcadeMachine DeserializeLength(Stream stream, int length)
public ArcadeMachine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ArcadeMachine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ArcadeMachine Deserialize(Byte[] buffer, ArcadeMachine instance, bool isDelta)
public ArcadeMachine Deserialize(Stream stream, ArcadeMachine instance, bool isDelta)
public ArcadeMachine DeserializeLengthDelimited(Stream stream, ArcadeMachine instance, bool isDelta)
public ArcadeMachine DeserializeLength(Stream stream, int length, ArcadeMachine instance, bool isDelta)
public void SerializeDelta(Stream stream, ArcadeMachine instance, ArcadeMachine previous)
public void Serialize(Stream stream, ArcadeMachine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ArcadeMachine instance)
public void SerializeLengthDelimited(Stream stream, ArcadeMachine instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Attack : object {
public bool ShouldPool
private bool _disposed
public Vector3 pointStart
public Vector3 pointEnd
public NetworkableId hitID
public UInt32 hitBone
public Vector3 hitNormalLocal
public Vector3 hitPositionLocal
public Vector3 hitNormalWorld
public Vector3 hitPositionWorld
public UInt32 hitPartID
public UInt32 hitMaterialID
public void ResetToPool(Attack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Attack instance)
public Attack Copy()
public Attack Deserialize(Stream stream)
public Attack DeserializeLengthDelimited(Stream stream)
public Attack DeserializeLength(Stream stream, int length)
public Attack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Attack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Attack Deserialize(Byte[] buffer, Attack instance, bool isDelta)
public Attack Deserialize(Stream stream, Attack instance, bool isDelta)
public Attack DeserializeLengthDelimited(Stream stream, Attack instance, bool isDelta)
public Attack DeserializeLength(Stream stream, int length, Attack instance, bool isDelta)
public void SerializeDelta(Stream stream, Attack instance, Attack previous)
public void Serialize(Stream stream, Attack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Attack instance)
public void SerializeLengthDelimited(Stream stream, Attack instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AudioEntity : object {
public bool ShouldPool
private bool _disposed
public int colourMode
public int volumeRange
public int speed
public int gradient
public void ResetToPool(AudioEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AudioEntity instance)
public AudioEntity Copy()
public AudioEntity Deserialize(Stream stream)
public AudioEntity DeserializeLengthDelimited(Stream stream)
public AudioEntity DeserializeLength(Stream stream, int length)
public AudioEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AudioEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AudioEntity Deserialize(Byte[] buffer, AudioEntity instance, bool isDelta)
public AudioEntity Deserialize(Stream stream, AudioEntity instance, bool isDelta)
public AudioEntity DeserializeLengthDelimited(Stream stream, AudioEntity instance, bool isDelta)
public AudioEntity DeserializeLength(Stream stream, int length, AudioEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, AudioEntity instance, AudioEntity previous)
public void Serialize(Stream stream, AudioEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AudioEntity instance)
public void SerializeLengthDelimited(Stream stream, AudioEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.AutoTurret : object {
public bool ShouldPool
private bool _disposed
public Vector3 aimPos
public Vector3 aimDir
public UInt32 targetID
public List`1<PlayerNameID> users
public void ResetToPool(AutoTurret instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(AutoTurret instance)
public AutoTurret Copy()
public AutoTurret Deserialize(Stream stream)
public AutoTurret DeserializeLengthDelimited(Stream stream)
public AutoTurret DeserializeLength(Stream stream, int length)
public AutoTurret Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AutoTurret previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public AutoTurret Deserialize(Byte[] buffer, AutoTurret instance, bool isDelta)
public AutoTurret Deserialize(Stream stream, AutoTurret instance, bool isDelta)
public AutoTurret DeserializeLengthDelimited(Stream stream, AutoTurret instance, bool isDelta)
public AutoTurret DeserializeLength(Stream stream, int length, AutoTurret instance, bool isDelta)
public void SerializeDelta(Stream stream, AutoTurret instance, AutoTurret previous)
public void Serialize(Stream stream, AutoTurret instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AutoTurret instance)
public void SerializeLengthDelimited(Stream stream, AutoTurret instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BaseCombat : object {
public bool ShouldPool
private bool _disposed
public int state
public float health
public void ResetToPool(BaseCombat instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BaseCombat instance)
public BaseCombat Copy()
public BaseCombat Deserialize(Stream stream)
public BaseCombat DeserializeLengthDelimited(Stream stream)
public BaseCombat DeserializeLength(Stream stream, int length)
public BaseCombat Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseCombat previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BaseCombat Deserialize(Byte[] buffer, BaseCombat instance, bool isDelta)
public BaseCombat Deserialize(Stream stream, BaseCombat instance, bool isDelta)
public BaseCombat DeserializeLengthDelimited(Stream stream, BaseCombat instance, bool isDelta)
public BaseCombat DeserializeLength(Stream stream, int length, BaseCombat instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseCombat instance, BaseCombat previous)
public void Serialize(Stream stream, BaseCombat instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseCombat instance)
public void SerializeLengthDelimited(Stream stream, BaseCombat instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BaseEntity : object {
public bool ShouldPool
private bool _disposed
public Vector3 pos
public Vector3 rot
public int flags
public float time
public ulong skinid
public void ResetToPool(BaseEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BaseEntity instance)
public BaseEntity Copy()
public BaseEntity Deserialize(Stream stream)
public BaseEntity DeserializeLengthDelimited(Stream stream)
public BaseEntity DeserializeLength(Stream stream, int length)
public BaseEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BaseEntity Deserialize(Byte[] buffer, BaseEntity instance, bool isDelta)
public BaseEntity Deserialize(Stream stream, BaseEntity instance, bool isDelta)
public BaseEntity DeserializeLengthDelimited(Stream stream, BaseEntity instance, bool isDelta)
public BaseEntity DeserializeLength(Stream stream, int length, BaseEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseEntity instance, BaseEntity previous)
public void Serialize(Stream stream, BaseEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseEntity instance)
public void SerializeLengthDelimited(Stream stream, BaseEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BaseNetworkable : object {
public bool ShouldPool
private bool _disposed
public NetworkableId uid
public UInt32 group
public UInt32 prefabID
public void ResetToPool(BaseNetworkable instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BaseNetworkable instance)
public BaseNetworkable Copy()
public BaseNetworkable Deserialize(Stream stream)
public BaseNetworkable DeserializeLengthDelimited(Stream stream)
public BaseNetworkable DeserializeLength(Stream stream, int length)
public BaseNetworkable Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseNetworkable previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BaseNetworkable Deserialize(Byte[] buffer, BaseNetworkable instance, bool isDelta)
public BaseNetworkable Deserialize(Stream stream, BaseNetworkable instance, bool isDelta)
public BaseNetworkable DeserializeLengthDelimited(Stream stream, BaseNetworkable instance, bool isDelta)
public BaseNetworkable DeserializeLength(Stream stream, int length, BaseNetworkable instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseNetworkable instance, BaseNetworkable previous)
public void Serialize(Stream stream, BaseNetworkable instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseNetworkable instance)
public void SerializeLengthDelimited(Stream stream, BaseNetworkable instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BaseNPC : object {
public bool ShouldPool
private bool _disposed
public int flags
public void ResetToPool(BaseNPC instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BaseNPC instance)
public BaseNPC Copy()
public BaseNPC Deserialize(Stream stream)
public BaseNPC DeserializeLengthDelimited(Stream stream)
public BaseNPC DeserializeLength(Stream stream, int length)
public BaseNPC Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseNPC previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BaseNPC Deserialize(Byte[] buffer, BaseNPC instance, bool isDelta)
public BaseNPC Deserialize(Stream stream, BaseNPC instance, bool isDelta)
public BaseNPC DeserializeLengthDelimited(Stream stream, BaseNPC instance, bool isDelta)
public BaseNPC DeserializeLength(Stream stream, int length, BaseNPC instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseNPC instance, BaseNPC previous)
public void Serialize(Stream stream, BaseNPC instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseNPC instance)
public void SerializeLengthDelimited(Stream stream, BaseNPC instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BaseOven : object {
public bool ShouldPool
private bool _disposed
public float cookSpeed
public void ResetToPool(BaseOven instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BaseOven instance)
public BaseOven Copy()
public BaseOven Deserialize(Stream stream)
public BaseOven DeserializeLengthDelimited(Stream stream)
public BaseOven DeserializeLength(Stream stream, int length)
public BaseOven Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseOven previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BaseOven Deserialize(Byte[] buffer, BaseOven instance, bool isDelta)
public BaseOven Deserialize(Stream stream, BaseOven instance, bool isDelta)
public BaseOven DeserializeLengthDelimited(Stream stream, BaseOven instance, bool isDelta)
public BaseOven DeserializeLength(Stream stream, int length, BaseOven instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseOven instance, BaseOven previous)
public void Serialize(Stream stream, BaseOven instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseOven instance)
public void SerializeLengthDelimited(Stream stream, BaseOven instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BasePlayer : object {
public bool ShouldPool
private bool _disposed
public string name
public ulong userid
public PlayerInventory inventory
public PlayerMetabolism metabolism
public ModelState modelState
public int playerFlags
public ItemId heldEntity
public float health
public PersistantPlayer persistantData
public float skinCol
public float skinTex
public float skinMesh
public PlayerLifeStory currentLife
public PlayerLifeStory previousLife
public NetworkableId mounted
public ulong currentTeam
public UInt32 underwear
public PlayerModifiers modifiers
public int reputation
public UInt32 loopingGesture
public Missions missions
public string respawnId
public int bagCount
public void ResetToPool(BasePlayer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BasePlayer instance)
public BasePlayer Copy()
public BasePlayer Deserialize(Stream stream)
public BasePlayer DeserializeLengthDelimited(Stream stream)
public BasePlayer DeserializeLength(Stream stream, int length)
public BasePlayer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BasePlayer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BasePlayer Deserialize(Byte[] buffer, BasePlayer instance, bool isDelta)
public BasePlayer Deserialize(Stream stream, BasePlayer instance, bool isDelta)
public BasePlayer DeserializeLengthDelimited(Stream stream, BasePlayer instance, bool isDelta)
public BasePlayer DeserializeLength(Stream stream, int length, BasePlayer instance, bool isDelta)
public void SerializeDelta(Stream stream, BasePlayer instance, BasePlayer previous)
public void Serialize(Stream stream, BasePlayer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BasePlayer instance)
public void SerializeLengthDelimited(Stream stream, BasePlayer instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BaseProjectile : object {
public bool ShouldPool
private bool _disposed
public Magazine primaryMagazine
public void ResetToPool(BaseProjectile instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BaseProjectile instance)
public BaseProjectile Copy()
public BaseProjectile Deserialize(Stream stream)
public BaseProjectile DeserializeLengthDelimited(Stream stream)
public BaseProjectile DeserializeLength(Stream stream, int length)
public BaseProjectile Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseProjectile previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BaseProjectile Deserialize(Byte[] buffer, BaseProjectile instance, bool isDelta)
public BaseProjectile Deserialize(Stream stream, BaseProjectile instance, bool isDelta)
public BaseProjectile DeserializeLengthDelimited(Stream stream, BaseProjectile instance, bool isDelta)
public BaseProjectile DeserializeLength(Stream stream, int length, BaseProjectile instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseProjectile instance, BaseProjectile previous)
public void Serialize(Stream stream, BaseProjectile instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseProjectile instance)
public void SerializeLengthDelimited(Stream stream, BaseProjectile instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BaseResource : object {
public bool ShouldPool
private bool _disposed
public int stage
public float health
public void ResetToPool(BaseResource instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BaseResource instance)
public BaseResource Copy()
public BaseResource Deserialize(Stream stream)
public BaseResource DeserializeLengthDelimited(Stream stream)
public BaseResource DeserializeLength(Stream stream, int length)
public BaseResource Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseResource previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BaseResource Deserialize(Byte[] buffer, BaseResource instance, bool isDelta)
public BaseResource Deserialize(Stream stream, BaseResource instance, bool isDelta)
public BaseResource DeserializeLengthDelimited(Stream stream, BaseResource instance, bool isDelta)
public BaseResource DeserializeLength(Stream stream, int length, BaseResource instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseResource instance, BaseResource previous)
public void Serialize(Stream stream, BaseResource instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseResource instance)
public void SerializeLengthDelimited(Stream stream, BaseResource instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BaseTrain : object {
public bool ShouldPool
private bool _disposed
public float time
public float frontBogieYRot
public float rearBogieYRot
public NetworkableId frontCouplingID
public bool frontCouplingToFront
public NetworkableId rearCouplingID
public bool rearCouplingToFront
public int lootTypeIndex
public float lootPercent
public void ResetToPool(BaseTrain instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BaseTrain instance)
public BaseTrain Copy()
public BaseTrain Deserialize(Stream stream)
public BaseTrain DeserializeLengthDelimited(Stream stream)
public BaseTrain DeserializeLength(Stream stream, int length)
public BaseTrain Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseTrain previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BaseTrain Deserialize(Byte[] buffer, BaseTrain instance, bool isDelta)
public BaseTrain Deserialize(Stream stream, BaseTrain instance, bool isDelta)
public BaseTrain DeserializeLengthDelimited(Stream stream, BaseTrain instance, bool isDelta)
public BaseTrain DeserializeLength(Stream stream, int length, BaseTrain instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseTrain instance, BaseTrain previous)
public void Serialize(Stream stream, BaseTrain instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseTrain instance)
public void SerializeLengthDelimited(Stream stream, BaseTrain instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BaseVehicle : object {
public bool ShouldPool
private bool _disposed
public List`1<MountPoint> mountPoints
public void ResetToPool(BaseVehicle instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BaseVehicle instance)
public BaseVehicle Copy()
public BaseVehicle Deserialize(Stream stream)
public BaseVehicle DeserializeLengthDelimited(Stream stream)
public BaseVehicle DeserializeLength(Stream stream, int length)
public BaseVehicle Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseVehicle previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BaseVehicle Deserialize(Byte[] buffer, BaseVehicle instance, bool isDelta)
public BaseVehicle Deserialize(Stream stream, BaseVehicle instance, bool isDelta)
public BaseVehicle DeserializeLengthDelimited(Stream stream, BaseVehicle instance, bool isDelta)
public BaseVehicle DeserializeLength(Stream stream, int length, BaseVehicle instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseVehicle instance, BaseVehicle previous)
public void Serialize(Stream stream, BaseVehicle instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseVehicle instance)
public void SerializeLengthDelimited(Stream stream, BaseVehicle instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BoomBox : object {
public bool ShouldPool
private bool _disposed
public string radioIp
public ulong assignedRadioBy
public void ResetToPool(BoomBox instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BoomBox instance)
public BoomBox Copy()
public BoomBox Deserialize(Stream stream)
public BoomBox DeserializeLengthDelimited(Stream stream)
public BoomBox DeserializeLength(Stream stream, int length)
public BoomBox Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BoomBox previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BoomBox Deserialize(Byte[] buffer, BoomBox instance, bool isDelta)
public BoomBox Deserialize(Stream stream, BoomBox instance, bool isDelta)
public BoomBox DeserializeLengthDelimited(Stream stream, BoomBox instance, bool isDelta)
public BoomBox DeserializeLength(Stream stream, int length, BoomBox instance, bool isDelta)
public void SerializeDelta(Stream stream, BoomBox instance, BoomBox previous)
public void Serialize(Stream stream, BoomBox instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BoomBox instance)
public void SerializeLengthDelimited(Stream stream, BoomBox instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BradleyAPC : object {
public bool ShouldPool
private bool _disposed
public float engineThrottle
public float throttleLeft
public float throttleRight
public Vector3 mainGunVec
public Vector3 topTurretVec
public Vector3 rearGunVec
public Vector3 leftSideGun1
public Vector3 leftSideGun2
public Vector3 rightSideGun1
public Vector3 rightSideGun2
public void ResetToPool(BradleyAPC instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BradleyAPC instance)
public BradleyAPC Copy()
public BradleyAPC Deserialize(Stream stream)
public BradleyAPC DeserializeLengthDelimited(Stream stream)
public BradleyAPC DeserializeLength(Stream stream, int length)
public BradleyAPC Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BradleyAPC previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BradleyAPC Deserialize(Byte[] buffer, BradleyAPC instance, bool isDelta)
public BradleyAPC Deserialize(Stream stream, BradleyAPC instance, bool isDelta)
public BradleyAPC DeserializeLengthDelimited(Stream stream, BradleyAPC instance, bool isDelta)
public BradleyAPC DeserializeLength(Stream stream, int length, BradleyAPC instance, bool isDelta)
public void SerializeDelta(Stream stream, BradleyAPC instance, BradleyAPC previous)
public void Serialize(Stream stream, BradleyAPC instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BradleyAPC instance)
public void SerializeLengthDelimited(Stream stream, BradleyAPC instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BrainComponent : object {
public bool ShouldPool
private bool _disposed
public int currentState
public void ResetToPool(BrainComponent instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BrainComponent instance)
public BrainComponent Copy()
public BrainComponent Deserialize(Stream stream)
public BrainComponent DeserializeLengthDelimited(Stream stream)
public BrainComponent DeserializeLength(Stream stream, int length)
public BrainComponent Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BrainComponent previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BrainComponent Deserialize(Byte[] buffer, BrainComponent instance, bool isDelta)
public BrainComponent Deserialize(Stream stream, BrainComponent instance, bool isDelta)
public BrainComponent DeserializeLengthDelimited(Stream stream, BrainComponent instance, bool isDelta)
public BrainComponent DeserializeLength(Stream stream, int length, BrainComponent instance, bool isDelta)
public void SerializeDelta(Stream stream, BrainComponent instance, BrainComponent previous)
public void Serialize(Stream stream, BrainComponent instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BrainComponent instance)
public void SerializeLengthDelimited(Stream stream, BrainComponent instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BuildingBlock : object {
public bool ShouldPool
private bool _disposed
public int model
public int grade
public bool beingDemolished
public void ResetToPool(BuildingBlock instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BuildingBlock instance)
public BuildingBlock Copy()
public BuildingBlock Deserialize(Stream stream)
public BuildingBlock DeserializeLengthDelimited(Stream stream)
public BuildingBlock DeserializeLength(Stream stream, int length)
public BuildingBlock Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BuildingBlock previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BuildingBlock Deserialize(Byte[] buffer, BuildingBlock instance, bool isDelta)
public BuildingBlock Deserialize(Stream stream, BuildingBlock instance, bool isDelta)
public BuildingBlock DeserializeLengthDelimited(Stream stream, BuildingBlock instance, bool isDelta)
public BuildingBlock DeserializeLength(Stream stream, int length, BuildingBlock instance, bool isDelta)
public void SerializeDelta(Stream stream, BuildingBlock instance, BuildingBlock previous)
public void Serialize(Stream stream, BuildingBlock instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BuildingBlock instance)
public void SerializeLengthDelimited(Stream stream, BuildingBlock instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.BuildingPrivilege : object {
public bool ShouldPool
private bool _disposed
public List`1<PlayerNameID> users
public float upkeepPeriodMinutes
public float costFraction
public float protectedMinutes
public void ResetToPool(BuildingPrivilege instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(BuildingPrivilege instance)
public BuildingPrivilege Copy()
public BuildingPrivilege Deserialize(Stream stream)
public BuildingPrivilege DeserializeLengthDelimited(Stream stream)
public BuildingPrivilege DeserializeLength(Stream stream, int length)
public BuildingPrivilege Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BuildingPrivilege previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public BuildingPrivilege Deserialize(Byte[] buffer, BuildingPrivilege instance, bool isDelta)
public BuildingPrivilege Deserialize(Stream stream, BuildingPrivilege instance, bool isDelta)
public BuildingPrivilege DeserializeLengthDelimited(Stream stream, BuildingPrivilege instance, bool isDelta)
public BuildingPrivilege DeserializeLength(Stream stream, int length, BuildingPrivilege instance, bool isDelta)
public void SerializeDelta(Stream stream, BuildingPrivilege instance, BuildingPrivilege previous)
public void Serialize(Stream stream, BuildingPrivilege instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BuildingPrivilege instance)
public void SerializeLengthDelimited(Stream stream, BuildingPrivilege instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.CamperModule : object {
public bool ShouldPool
private bool _disposed
public NetworkableId bbqId
public NetworkableId lockerId
public NetworkableId storageID
public void ResetToPool(CamperModule instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(CamperModule instance)
public CamperModule Copy()
public CamperModule Deserialize(Stream stream)
public CamperModule DeserializeLengthDelimited(Stream stream)
public CamperModule DeserializeLength(Stream stream, int length)
public CamperModule Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, CamperModule previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public CamperModule Deserialize(Byte[] buffer, CamperModule instance, bool isDelta)
public CamperModule Deserialize(Stream stream, CamperModule instance, bool isDelta)
public CamperModule DeserializeLengthDelimited(Stream stream, CamperModule instance, bool isDelta)
public CamperModule DeserializeLength(Stream stream, int length, CamperModule instance, bool isDelta)
public void SerializeDelta(Stream stream, CamperModule instance, CamperModule previous)
public void Serialize(Stream stream, CamperModule instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(CamperModule instance)
public void SerializeLengthDelimited(Stream stream, CamperModule instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.CardGame : object {
public bool ShouldPool
private bool _disposed
public List`1<CardPlayer> players
public int state
public int activePlayerIndex
public int pot
public int lastActionId
public ulong lastActionTarget
public int lastActionValue
public NetworkableId potRef
public TexasHoldEm texasHoldEm
public Blackjack blackjack
public void ResetToPool(CardGame instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(CardGame instance)
public CardGame Copy()
public CardGame Deserialize(Stream stream)
public CardGame DeserializeLengthDelimited(Stream stream)
public CardGame DeserializeLength(Stream stream, int length)
public CardGame Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, CardGame previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public CardGame Deserialize(Byte[] buffer, CardGame instance, bool isDelta)
public CardGame Deserialize(Stream stream, CardGame instance, bool isDelta)
public CardGame DeserializeLengthDelimited(Stream stream, CardGame instance, bool isDelta)
public CardGame DeserializeLength(Stream stream, int length, CardGame instance, bool isDelta)
public void SerializeDelta(Stream stream, CardGame instance, CardGame previous)
public void Serialize(Stream stream, CardGame instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(CardGame instance)
public void SerializeLengthDelimited(Stream stream, CardGame instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.CargoPlane : object {
public bool ShouldPool
private bool _disposed
public Vector3 startPos
public Vector3 endPos
public float secondsToTake
public float secondsTaken
public bool dropped
public Vector3 dropPosition
public void ResetToPool(CargoPlane instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(CargoPlane instance)
public CargoPlane Copy()
public CargoPlane Deserialize(Stream stream)
public CargoPlane DeserializeLengthDelimited(Stream stream)
public CargoPlane DeserializeLength(Stream stream, int length)
public CargoPlane Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, CargoPlane previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public CargoPlane Deserialize(Byte[] buffer, CargoPlane instance, bool isDelta)
public CargoPlane Deserialize(Stream stream, CargoPlane instance, bool isDelta)
public CargoPlane DeserializeLengthDelimited(Stream stream, CargoPlane instance, bool isDelta)
public CargoPlane DeserializeLength(Stream stream, int length, CargoPlane instance, bool isDelta)
public void SerializeDelta(Stream stream, CargoPlane instance, CargoPlane previous)
public void Serialize(Stream stream, CargoPlane instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(CargoPlane instance)
public void SerializeLengthDelimited(Stream stream, CargoPlane instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Cassette : object {
public bool ShouldPool
private bool _disposed
public UInt32 audioId
public NetworkableId holder
public ulong creatorSteamId
public int preloadAudioId
public void ResetToPool(Cassette instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Cassette instance)
public Cassette Copy()
public Cassette Deserialize(Stream stream)
public Cassette DeserializeLengthDelimited(Stream stream)
public Cassette DeserializeLength(Stream stream, int length)
public Cassette Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Cassette previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Cassette Deserialize(Byte[] buffer, Cassette instance, bool isDelta)
public Cassette Deserialize(Stream stream, Cassette instance, bool isDelta)
public Cassette DeserializeLengthDelimited(Stream stream, Cassette instance, bool isDelta)
public Cassette DeserializeLength(Stream stream, int length, Cassette instance, bool isDelta)
public void SerializeDelta(Stream stream, Cassette instance, Cassette previous)
public void Serialize(Stream stream, Cassette instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Cassette instance)
public void SerializeLengthDelimited(Stream stream, Cassette instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ChanceAIEventData : object {
public bool ShouldPool
private bool _disposed
public float value
public void ResetToPool(ChanceAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ChanceAIEventData instance)
public ChanceAIEventData Copy()
public ChanceAIEventData Deserialize(Stream stream)
public ChanceAIEventData DeserializeLengthDelimited(Stream stream)
public ChanceAIEventData DeserializeLength(Stream stream, int length)
public ChanceAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ChanceAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ChanceAIEventData Deserialize(Byte[] buffer, ChanceAIEventData instance, bool isDelta)
public ChanceAIEventData Deserialize(Stream stream, ChanceAIEventData instance, bool isDelta)
public ChanceAIEventData DeserializeLengthDelimited(Stream stream, ChanceAIEventData instance, bool isDelta)
public ChanceAIEventData DeserializeLength(Stream stream, int length, ChanceAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, ChanceAIEventData instance, ChanceAIEventData previous)
public void Serialize(Stream stream, ChanceAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ChanceAIEventData instance)
public void SerializeLengthDelimited(Stream stream, ChanceAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ClientReady : object {
public bool ShouldPool
private bool _disposed
public List`1<ClientInfo> clientInfo
public void ResetToPool(ClientReady instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ClientReady instance)
public ClientReady Copy()
public ClientReady Deserialize(Stream stream)
public ClientReady DeserializeLengthDelimited(Stream stream)
public ClientReady DeserializeLength(Stream stream, int length)
public ClientReady Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ClientReady previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ClientReady Deserialize(Byte[] buffer, ClientReady instance, bool isDelta)
public ClientReady Deserialize(Stream stream, ClientReady instance, bool isDelta)
public ClientReady DeserializeLengthDelimited(Stream stream, ClientReady instance, bool isDelta)
public ClientReady DeserializeLength(Stream stream, int length, ClientReady instance, bool isDelta)
public void SerializeDelta(Stream stream, ClientReady instance, ClientReady previous)
public void Serialize(Stream stream, ClientReady instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ClientReady instance)
public void SerializeLengthDelimited(Stream stream, ClientReady instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.CoalingTower : object {
public bool ShouldPool
private bool _disposed
public int lootTypeIndex
public NetworkableId oreStorageID
public NetworkableId fuelStorageID
public NetworkableId activeUnloadableID
public void ResetToPool(CoalingTower instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(CoalingTower instance)
public CoalingTower Copy()
public CoalingTower Deserialize(Stream stream)
public CoalingTower DeserializeLengthDelimited(Stream stream)
public CoalingTower DeserializeLength(Stream stream, int length)
public CoalingTower Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, CoalingTower previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public CoalingTower Deserialize(Byte[] buffer, CoalingTower instance, bool isDelta)
public CoalingTower Deserialize(Stream stream, CoalingTower instance, bool isDelta)
public CoalingTower DeserializeLengthDelimited(Stream stream, CoalingTower instance, bool isDelta)
public CoalingTower DeserializeLength(Stream stream, int length, CoalingTower instance, bool isDelta)
public void SerializeDelta(Stream stream, CoalingTower instance, CoalingTower previous)
public void Serialize(Stream stream, CoalingTower instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(CoalingTower instance)
public void SerializeLengthDelimited(Stream stream, CoalingTower instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.CodeLock : object {
public bool ShouldPool
private bool _disposed
public Private pv
public bool hasCode
public bool hasGuestCode
public bool hasAuth
public void ResetToPool(CodeLock instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(CodeLock instance)
public CodeLock Copy()
public CodeLock Deserialize(Stream stream)
public CodeLock DeserializeLengthDelimited(Stream stream)
public CodeLock DeserializeLength(Stream stream, int length)
public CodeLock Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, CodeLock previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public CodeLock Deserialize(Byte[] buffer, CodeLock instance, bool isDelta)
public CodeLock Deserialize(Stream stream, CodeLock instance, bool isDelta)
public CodeLock DeserializeLengthDelimited(Stream stream, CodeLock instance, bool isDelta)
public CodeLock DeserializeLength(Stream stream, int length, CodeLock instance, bool isDelta)
public void SerializeDelta(Stream stream, CodeLock instance, CodeLock previous)
public void Serialize(Stream stream, CodeLock instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(CodeLock instance)
public void SerializeLengthDelimited(Stream stream, CodeLock instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Composter : object {
public bool ShouldPool
private bool _disposed
public float fertilizerProductionProgress
public void ResetToPool(Composter instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Composter instance)
public Composter Copy()
public Composter Deserialize(Stream stream)
public Composter DeserializeLengthDelimited(Stream stream)
public Composter DeserializeLength(Stream stream, int length)
public Composter Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Composter previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Composter Deserialize(Byte[] buffer, Composter instance, bool isDelta)
public Composter Deserialize(Stream stream, Composter instance, bool isDelta)
public Composter DeserializeLengthDelimited(Stream stream, Composter instance, bool isDelta)
public Composter DeserializeLength(Stream stream, int length, Composter instance, bool isDelta)
public void SerializeDelta(Stream stream, Composter instance, Composter previous)
public void Serialize(Stream stream, Composter instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Composter instance)
public void SerializeLengthDelimited(Stream stream, Composter instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ComputerStation : object {
public bool ShouldPool
private bool _disposed
public string bookmarks
public void ResetToPool(ComputerStation instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ComputerStation instance)
public ComputerStation Copy()
public ComputerStation Deserialize(Stream stream)
public ComputerStation DeserializeLengthDelimited(Stream stream)
public ComputerStation DeserializeLength(Stream stream, int length)
public ComputerStation Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ComputerStation previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ComputerStation Deserialize(Byte[] buffer, ComputerStation instance, bool isDelta)
public ComputerStation Deserialize(Stream stream, ComputerStation instance, bool isDelta)
public ComputerStation DeserializeLengthDelimited(Stream stream, ComputerStation instance, bool isDelta)
public ComputerStation DeserializeLength(Stream stream, int length, ComputerStation instance, bool isDelta)
public void SerializeDelta(Stream stream, ComputerStation instance, ComputerStation previous)
public void Serialize(Stream stream, ComputerStation instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ComputerStation instance)
public void SerializeLengthDelimited(Stream stream, ComputerStation instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ConnectedSpeaker : object {
public bool ShouldPool
private bool _disposed
public NetworkableId connectedTo
public void ResetToPool(ConnectedSpeaker instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ConnectedSpeaker instance)
public ConnectedSpeaker Copy()
public ConnectedSpeaker Deserialize(Stream stream)
public ConnectedSpeaker DeserializeLengthDelimited(Stream stream)
public ConnectedSpeaker DeserializeLength(Stream stream, int length)
public ConnectedSpeaker Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ConnectedSpeaker previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ConnectedSpeaker Deserialize(Byte[] buffer, ConnectedSpeaker instance, bool isDelta)
public ConnectedSpeaker Deserialize(Stream stream, ConnectedSpeaker instance, bool isDelta)
public ConnectedSpeaker DeserializeLengthDelimited(Stream stream, ConnectedSpeaker instance, bool isDelta)
public ConnectedSpeaker DeserializeLength(Stream stream, int length, ConnectedSpeaker instance, bool isDelta)
public void SerializeDelta(Stream stream, ConnectedSpeaker instance, ConnectedSpeaker previous)
public void Serialize(Stream stream, ConnectedSpeaker instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ConnectedSpeaker instance)
public void SerializeLengthDelimited(Stream stream, ConnectedSpeaker instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Corpse : object {
public bool ShouldPool
private bool _disposed
public NetworkableId parentID
public void ResetToPool(Corpse instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Corpse instance)
public Corpse Copy()
public Corpse Deserialize(Stream stream)
public Corpse DeserializeLengthDelimited(Stream stream)
public Corpse DeserializeLength(Stream stream, int length)
public Corpse Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Corpse previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Corpse Deserialize(Byte[] buffer, Corpse instance, bool isDelta)
public Corpse Deserialize(Stream stream, Corpse instance, bool isDelta)
public Corpse DeserializeLengthDelimited(Stream stream, Corpse instance, bool isDelta)
public Corpse DeserializeLength(Stream stream, int length, Corpse instance, bool isDelta)
public void SerializeDelta(Stream stream, Corpse instance, Corpse previous)
public void Serialize(Stream stream, Corpse instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Corpse instance)
public void SerializeLengthDelimited(Stream stream, Corpse instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Crane : object {
public bool ShouldPool
private bool _disposed
public float yaw
public float arm1
public float arm2
public float magnet
public float time
public int treadInput
public void ResetToPool(Crane instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Crane instance)
public Crane Copy()
public Crane Deserialize(Stream stream)
public Crane DeserializeLengthDelimited(Stream stream)
public Crane DeserializeLength(Stream stream, int length)
public Crane Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Crane previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Crane Deserialize(Byte[] buffer, Crane instance, bool isDelta)
public Crane Deserialize(Stream stream, Crane instance, bool isDelta)
public Crane DeserializeLengthDelimited(Stream stream, Crane instance, bool isDelta)
public Crane DeserializeLength(Stream stream, int length, Crane instance, bool isDelta)
public void SerializeDelta(Stream stream, Crane instance, Crane previous)
public void Serialize(Stream stream, Crane instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Crane instance)
public void SerializeLengthDelimited(Stream stream, Crane instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.CreateBuilding : object {
public bool ShouldPool
private bool _disposed
public NetworkableId entity
public UInt32 socket
public bool onterrain
public Vector3 position
public Vector3 normal
public Ray ray
public UInt32 blockID
public Vector3 rotation
public void ResetToPool(CreateBuilding instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(CreateBuilding instance)
public CreateBuilding Copy()
public CreateBuilding Deserialize(Stream stream)
public CreateBuilding DeserializeLengthDelimited(Stream stream)
public CreateBuilding DeserializeLength(Stream stream, int length)
public CreateBuilding Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, CreateBuilding previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public CreateBuilding Deserialize(Byte[] buffer, CreateBuilding instance, bool isDelta)
public CreateBuilding Deserialize(Stream stream, CreateBuilding instance, bool isDelta)
public CreateBuilding DeserializeLengthDelimited(Stream stream, CreateBuilding instance, bool isDelta)
public CreateBuilding DeserializeLength(Stream stream, int length, CreateBuilding instance, bool isDelta)
public void SerializeDelta(Stream stream, CreateBuilding instance, CreateBuilding previous)
public void Serialize(Stream stream, CreateBuilding instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(CreateBuilding instance)
public void SerializeLengthDelimited(Stream stream, CreateBuilding instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DecayEntity : object {
public bool ShouldPool
private bool _disposed
public float decayTimer
public UInt32 buildingID
public float upkeepTimer
public void ResetToPool(DecayEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(DecayEntity instance)
public DecayEntity Copy()
public DecayEntity Deserialize(Stream stream)
public DecayEntity DeserializeLengthDelimited(Stream stream)
public DecayEntity DeserializeLength(Stream stream, int length)
public DecayEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DecayEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DecayEntity Deserialize(Byte[] buffer, DecayEntity instance, bool isDelta)
public DecayEntity Deserialize(Stream stream, DecayEntity instance, bool isDelta)
public DecayEntity DeserializeLengthDelimited(Stream stream, DecayEntity instance, bool isDelta)
public DecayEntity DeserializeLength(Stream stream, int length, DecayEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, DecayEntity instance, DecayEntity previous)
public void Serialize(Stream stream, DecayEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DecayEntity instance)
public void SerializeLengthDelimited(Stream stream, DecayEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DeliveryDrone : object {
public bool ShouldPool
private bool _disposed
public NetworkableId marketplaceId
public NetworkableId terminalId
public NetworkableId vendingMachineId
public int state
public void ResetToPool(DeliveryDrone instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(DeliveryDrone instance)
public DeliveryDrone Copy()
public DeliveryDrone Deserialize(Stream stream)
public DeliveryDrone DeserializeLengthDelimited(Stream stream)
public DeliveryDrone DeserializeLength(Stream stream, int length)
public DeliveryDrone Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DeliveryDrone previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DeliveryDrone Deserialize(Byte[] buffer, DeliveryDrone instance, bool isDelta)
public DeliveryDrone Deserialize(Stream stream, DeliveryDrone instance, bool isDelta)
public DeliveryDrone DeserializeLengthDelimited(Stream stream, DeliveryDrone instance, bool isDelta)
public DeliveryDrone DeserializeLength(Stream stream, int length, DeliveryDrone instance, bool isDelta)
public void SerializeDelta(Stream stream, DeliveryDrone instance, DeliveryDrone previous)
public void Serialize(Stream stream, DeliveryDrone instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DeliveryDrone instance)
public void SerializeLengthDelimited(Stream stream, DeliveryDrone instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoHeader : object {
public bool ShouldPool
private bool _disposed
public UInt32 version
public string level
public UInt32 levelSeed
public UInt32 levelSize
public string checksum
public ulong localclient
public Vector3 position
public Vector3 rotation
public string levelUrl
public long recordedTime
public long length
public List`1<FileStorageCacheData> fileStorage
public void ResetToPool(DemoHeader instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(DemoHeader instance)
public DemoHeader Copy()
public DemoHeader Deserialize(Stream stream)
public DemoHeader DeserializeLengthDelimited(Stream stream)
public DemoHeader DeserializeLength(Stream stream, int length)
public DemoHeader Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoHeader previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoHeader Deserialize(Byte[] buffer, DemoHeader instance, bool isDelta)
public DemoHeader Deserialize(Stream stream, DemoHeader instance, bool isDelta)
public DemoHeader DeserializeLengthDelimited(Stream stream, DemoHeader instance, bool isDelta)
public DemoHeader DeserializeLength(Stream stream, int length, DemoHeader instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoHeader instance, DemoHeader previous)
public void Serialize(Stream stream, DemoHeader instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoHeader instance)
public void SerializeLengthDelimited(Stream stream, DemoHeader instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoShot : object {
public bool ShouldPool
private bool _disposed
public string shotName
public string demoName
public float shotStart
public float shotLength
public DemoShotVectorTrack camPos
public DemoShotQuaternionTrack camRot
public DemoShotFloatTrack camFov
public DemoShotFloatTrack camDofDist
public DemoShotFloatTrack camDofFocalSize
public DemoShotFloatTrack camDofAperture
public DemoShotParentTrack camParent
public string folderName
public void ResetToPool(DemoShot instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(DemoShot instance)
public DemoShot Copy()
public DemoShot Deserialize(Stream stream)
public DemoShot DeserializeLengthDelimited(Stream stream)
public DemoShot DeserializeLength(Stream stream, int length)
public DemoShot Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoShot previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoShot Deserialize(Byte[] buffer, DemoShot instance, bool isDelta)
public DemoShot Deserialize(Stream stream, DemoShot instance, bool isDelta)
public DemoShot DeserializeLengthDelimited(Stream stream, DemoShot instance, bool isDelta)
public DemoShot DeserializeLength(Stream stream, int length, DemoShot instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoShot instance, DemoShot previous)
public void Serialize(Stream stream, DemoShot instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoShot instance)
public void SerializeLengthDelimited(Stream stream, DemoShot instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoShotFloatKeyframe : ValueType {
public float keyframeTime
public float keyFrameValue
public void ResetToPool(DemoShotFloatKeyframe instance)
public void CopyTo(DemoShotFloatKeyframe instance)
public DemoShotFloatKeyframe Copy()
public DemoShotFloatKeyframe Deserialize(Stream stream)
public DemoShotFloatKeyframe DeserializeLengthDelimited(Stream stream)
public DemoShotFloatKeyframe DeserializeLength(Stream stream, int length)
public DemoShotFloatKeyframe Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoShotFloatKeyframe previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoShotFloatKeyframe Deserialize(Byte[] buffer, DemoShotFloatKeyframe& instance, bool isDelta)
public DemoShotFloatKeyframe Deserialize(Stream stream, DemoShotFloatKeyframe& instance, bool isDelta)
public DemoShotFloatKeyframe DeserializeLengthDelimited(Stream stream, DemoShotFloatKeyframe& instance, bool isDelta)
public DemoShotFloatKeyframe DeserializeLength(Stream stream, int length, DemoShotFloatKeyframe& instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoShotFloatKeyframe instance, DemoShotFloatKeyframe previous)
public void Serialize(Stream stream, DemoShotFloatKeyframe instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoShotFloatKeyframe instance)
public void SerializeLengthDelimited(Stream stream, DemoShotFloatKeyframe instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoShotFloatTrack : object {
public bool ShouldPool
private bool _disposed
public long trackType
public List`1<DemoShotFloatKeyframe> keyframes
public void ResetToPool(DemoShotFloatTrack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(DemoShotFloatTrack instance)
public DemoShotFloatTrack Copy()
public DemoShotFloatTrack Deserialize(Stream stream)
public DemoShotFloatTrack DeserializeLengthDelimited(Stream stream)
public DemoShotFloatTrack DeserializeLength(Stream stream, int length)
public DemoShotFloatTrack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoShotFloatTrack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoShotFloatTrack Deserialize(Byte[] buffer, DemoShotFloatTrack instance, bool isDelta)
public DemoShotFloatTrack Deserialize(Stream stream, DemoShotFloatTrack instance, bool isDelta)
public DemoShotFloatTrack DeserializeLengthDelimited(Stream stream, DemoShotFloatTrack instance, bool isDelta)
public DemoShotFloatTrack DeserializeLength(Stream stream, int length, DemoShotFloatTrack instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoShotFloatTrack instance, DemoShotFloatTrack previous)
public void Serialize(Stream stream, DemoShotFloatTrack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoShotFloatTrack instance)
public void SerializeLengthDelimited(Stream stream, DemoShotFloatTrack instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoShotParentKeyframe : ValueType {
public float keyframeTime
public NetworkableId keyFrameParentId
public string keyFrameParentName
public void ResetToPool(DemoShotParentKeyframe instance)
public void CopyTo(DemoShotParentKeyframe instance)
public DemoShotParentKeyframe Copy()
public DemoShotParentKeyframe Deserialize(Stream stream)
public DemoShotParentKeyframe DeserializeLengthDelimited(Stream stream)
public DemoShotParentKeyframe DeserializeLength(Stream stream, int length)
public DemoShotParentKeyframe Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoShotParentKeyframe previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoShotParentKeyframe Deserialize(Byte[] buffer, DemoShotParentKeyframe& instance, bool isDelta)
public DemoShotParentKeyframe Deserialize(Stream stream, DemoShotParentKeyframe& instance, bool isDelta)
public DemoShotParentKeyframe DeserializeLengthDelimited(Stream stream, DemoShotParentKeyframe& instance, bool isDelta)
public DemoShotParentKeyframe DeserializeLength(Stream stream, int length, DemoShotParentKeyframe& instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoShotParentKeyframe instance, DemoShotParentKeyframe previous)
public void Serialize(Stream stream, DemoShotParentKeyframe instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoShotParentKeyframe instance)
public void SerializeLengthDelimited(Stream stream, DemoShotParentKeyframe instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoShotParentTrack : object {
public bool ShouldPool
private bool _disposed
public ulong parentId
public List`1<DemoShotParentKeyframe> keyframes
public void ResetToPool(DemoShotParentTrack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(DemoShotParentTrack instance)
public DemoShotParentTrack Copy()
public DemoShotParentTrack Deserialize(Stream stream)
public DemoShotParentTrack DeserializeLengthDelimited(Stream stream)
public DemoShotParentTrack DeserializeLength(Stream stream, int length)
public DemoShotParentTrack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoShotParentTrack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoShotParentTrack Deserialize(Byte[] buffer, DemoShotParentTrack instance, bool isDelta)
public DemoShotParentTrack Deserialize(Stream stream, DemoShotParentTrack instance, bool isDelta)
public DemoShotParentTrack DeserializeLengthDelimited(Stream stream, DemoShotParentTrack instance, bool isDelta)
public DemoShotParentTrack DeserializeLength(Stream stream, int length, DemoShotParentTrack instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoShotParentTrack instance, DemoShotParentTrack previous)
public void Serialize(Stream stream, DemoShotParentTrack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoShotParentTrack instance)
public void SerializeLengthDelimited(Stream stream, DemoShotParentTrack instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoShotQuaternionKeyframe : ValueType {
public float keyframeTime
public float keyFrameValueX
public float keyFrameValueY
public float keyFrameValueZ
public float keyFrameValueW
public void ResetToPool(DemoShotQuaternionKeyframe instance)
public void CopyTo(DemoShotQuaternionKeyframe instance)
public DemoShotQuaternionKeyframe Copy()
public DemoShotQuaternionKeyframe Deserialize(Stream stream)
public DemoShotQuaternionKeyframe DeserializeLengthDelimited(Stream stream)
public DemoShotQuaternionKeyframe DeserializeLength(Stream stream, int length)
public DemoShotQuaternionKeyframe Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoShotQuaternionKeyframe previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoShotQuaternionKeyframe Deserialize(Byte[] buffer, DemoShotQuaternionKeyframe& instance, bool isDelta)
public DemoShotQuaternionKeyframe Deserialize(Stream stream, DemoShotQuaternionKeyframe& instance, bool isDelta)
public DemoShotQuaternionKeyframe DeserializeLengthDelimited(Stream stream, DemoShotQuaternionKeyframe& instance, bool isDelta)
public DemoShotQuaternionKeyframe DeserializeLength(Stream stream, int length, DemoShotQuaternionKeyframe& instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoShotQuaternionKeyframe instance, DemoShotQuaternionKeyframe previous)
public void Serialize(Stream stream, DemoShotQuaternionKeyframe instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoShotQuaternionKeyframe instance)
public void SerializeLengthDelimited(Stream stream, DemoShotQuaternionKeyframe instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoShotQuaternionTrack : object {
public bool ShouldPool
private bool _disposed
public long trackType
public List`1<DemoShotQuaternionKeyframe> keyframes
public void ResetToPool(DemoShotQuaternionTrack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(DemoShotQuaternionTrack instance)
public DemoShotQuaternionTrack Copy()
public DemoShotQuaternionTrack Deserialize(Stream stream)
public DemoShotQuaternionTrack DeserializeLengthDelimited(Stream stream)
public DemoShotQuaternionTrack DeserializeLength(Stream stream, int length)
public DemoShotQuaternionTrack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoShotQuaternionTrack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoShotQuaternionTrack Deserialize(Byte[] buffer, DemoShotQuaternionTrack instance, bool isDelta)
public DemoShotQuaternionTrack Deserialize(Stream stream, DemoShotQuaternionTrack instance, bool isDelta)
public DemoShotQuaternionTrack DeserializeLengthDelimited(Stream stream, DemoShotQuaternionTrack instance, bool isDelta)
public DemoShotQuaternionTrack DeserializeLength(Stream stream, int length, DemoShotQuaternionTrack instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoShotQuaternionTrack instance, DemoShotQuaternionTrack previous)
public void Serialize(Stream stream, DemoShotQuaternionTrack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoShotQuaternionTrack instance)
public void SerializeLengthDelimited(Stream stream, DemoShotQuaternionTrack instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoShotVectorKeyframe : ValueType {
public float keyframeTime
public Vector3 keyFrameValue
public void ResetToPool(DemoShotVectorKeyframe instance)
public void CopyTo(DemoShotVectorKeyframe instance)
public DemoShotVectorKeyframe Copy()
public DemoShotVectorKeyframe Deserialize(Stream stream)
public DemoShotVectorKeyframe DeserializeLengthDelimited(Stream stream)
public DemoShotVectorKeyframe DeserializeLength(Stream stream, int length)
public DemoShotVectorKeyframe Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoShotVectorKeyframe previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoShotVectorKeyframe Deserialize(Byte[] buffer, DemoShotVectorKeyframe& instance, bool isDelta)
public DemoShotVectorKeyframe Deserialize(Stream stream, DemoShotVectorKeyframe& instance, bool isDelta)
public DemoShotVectorKeyframe DeserializeLengthDelimited(Stream stream, DemoShotVectorKeyframe& instance, bool isDelta)
public DemoShotVectorKeyframe DeserializeLength(Stream stream, int length, DemoShotVectorKeyframe& instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoShotVectorKeyframe instance, DemoShotVectorKeyframe previous)
public void Serialize(Stream stream, DemoShotVectorKeyframe instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoShotVectorKeyframe instance)
public void SerializeLengthDelimited(Stream stream, DemoShotVectorKeyframe instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DemoShotVectorTrack : object {
public bool ShouldPool
private bool _disposed
public long trackType
public List`1<DemoShotVectorKeyframe> keyframes
public void ResetToPool(DemoShotVectorTrack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(DemoShotVectorTrack instance)
public DemoShotVectorTrack Copy()
public DemoShotVectorTrack Deserialize(Stream stream)
public DemoShotVectorTrack DeserializeLengthDelimited(Stream stream)
public DemoShotVectorTrack DeserializeLength(Stream stream, int length)
public DemoShotVectorTrack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoShotVectorTrack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DemoShotVectorTrack Deserialize(Byte[] buffer, DemoShotVectorTrack instance, bool isDelta)
public DemoShotVectorTrack Deserialize(Stream stream, DemoShotVectorTrack instance, bool isDelta)
public DemoShotVectorTrack DeserializeLengthDelimited(Stream stream, DemoShotVectorTrack instance, bool isDelta)
public DemoShotVectorTrack DeserializeLength(Stream stream, int length, DemoShotVectorTrack instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoShotVectorTrack instance, DemoShotVectorTrack previous)
public void Serialize(Stream stream, DemoShotVectorTrack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoShotVectorTrack instance)
public void SerializeLengthDelimited(Stream stream, DemoShotVectorTrack instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Drone : object {
public bool ShouldPool
private bool _disposed
public float pitch
public void ResetToPool(Drone instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Drone instance)
public Drone Copy()
public Drone Deserialize(Stream stream)
public Drone DeserializeLengthDelimited(Stream stream)
public Drone DeserializeLength(Stream stream, int length)
public Drone Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Drone previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Drone Deserialize(Byte[] buffer, Drone instance, bool isDelta)
public Drone Deserialize(Stream stream, Drone instance, bool isDelta)
public Drone DeserializeLengthDelimited(Stream stream, Drone instance, bool isDelta)
public Drone DeserializeLength(Stream stream, int length, Drone instance, bool isDelta)
public void SerializeDelta(Stream stream, Drone instance, Drone previous)
public void Serialize(Stream stream, Drone instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Drone instance)
public void SerializeLengthDelimited(Stream stream, Drone instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.DudExplosive : object {
public bool ShouldPool
private bool _disposed
public float fuseTimeLeft
public void ResetToPool(DudExplosive instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(DudExplosive instance)
public DudExplosive Copy()
public DudExplosive Deserialize(Stream stream)
public DudExplosive DeserializeLengthDelimited(Stream stream)
public DudExplosive DeserializeLength(Stream stream, int length)
public DudExplosive Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DudExplosive previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public DudExplosive Deserialize(Byte[] buffer, DudExplosive instance, bool isDelta)
public DudExplosive Deserialize(Stream stream, DudExplosive instance, bool isDelta)
public DudExplosive DeserializeLengthDelimited(Stream stream, DudExplosive instance, bool isDelta)
public DudExplosive DeserializeLength(Stream stream, int length, DudExplosive instance, bool isDelta)
public void SerializeDelta(Stream stream, DudExplosive instance, DudExplosive previous)
public void Serialize(Stream stream, DudExplosive instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DudExplosive instance)
public void SerializeLengthDelimited(Stream stream, DudExplosive instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.EggHunt : object {
public bool ShouldPool
private bool _disposed
public List`1<EggHunter> hunters
public void ResetToPool(EggHunt instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(EggHunt instance)
public EggHunt Copy()
public EggHunt Deserialize(Stream stream)
public EggHunt DeserializeLengthDelimited(Stream stream)
public EggHunt DeserializeLength(Stream stream, int length)
public EggHunt Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, EggHunt previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public EggHunt Deserialize(Byte[] buffer, EggHunt instance, bool isDelta)
public EggHunt Deserialize(Stream stream, EggHunt instance, bool isDelta)
public EggHunt DeserializeLengthDelimited(Stream stream, EggHunt instance, bool isDelta)
public EggHunt DeserializeLength(Stream stream, int length, EggHunt instance, bool isDelta)
public void SerializeDelta(Stream stream, EggHunt instance, EggHunt previous)
public void Serialize(Stream stream, EggHunt instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(EggHunt instance)
public void SerializeLengthDelimited(Stream stream, EggHunt instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Elevator : object {
public bool ShouldPool
private bool _disposed
public int floor
public void ResetToPool(Elevator instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Elevator instance)
public Elevator Copy()
public Elevator Deserialize(Stream stream)
public Elevator DeserializeLengthDelimited(Stream stream)
public Elevator DeserializeLength(Stream stream, int length)
public Elevator Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Elevator previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Elevator Deserialize(Byte[] buffer, Elevator instance, bool isDelta)
public Elevator Deserialize(Stream stream, Elevator instance, bool isDelta)
public Elevator DeserializeLengthDelimited(Stream stream, Elevator instance, bool isDelta)
public Elevator DeserializeLength(Stream stream, int length, Elevator instance, bool isDelta)
public void SerializeDelta(Stream stream, Elevator instance, Elevator previous)
public void Serialize(Stream stream, Elevator instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Elevator instance)
public void SerializeLengthDelimited(Stream stream, Elevator instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.EngineStorage : object {
public bool ShouldPool
private bool _disposed
public bool isUsable
public float accelerationBoost
public float topSpeedBoost
public float fuelEconomyBoost
public void ResetToPool(EngineStorage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(EngineStorage instance)
public EngineStorage Copy()
public EngineStorage Deserialize(Stream stream)
public EngineStorage DeserializeLengthDelimited(Stream stream)
public EngineStorage DeserializeLength(Stream stream, int length)
public EngineStorage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, EngineStorage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public EngineStorage Deserialize(Byte[] buffer, EngineStorage instance, bool isDelta)
public EngineStorage Deserialize(Stream stream, EngineStorage instance, bool isDelta)
public EngineStorage DeserializeLengthDelimited(Stream stream, EngineStorage instance, bool isDelta)
public EngineStorage DeserializeLength(Stream stream, int length, EngineStorage instance, bool isDelta)
public void SerializeDelta(Stream stream, EngineStorage instance, EngineStorage previous)
public void Serialize(Stream stream, EngineStorage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(EngineStorage instance)
public void SerializeLengthDelimited(Stream stream, EngineStorage instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Entity : object {
public bool ShouldPool
private bool _disposed
public BaseNetworkable baseNetworkable
public BaseEntity baseEntity
public BasePlayer basePlayer
public WorldItem worldItem
public BaseResource resource
public BuildingBlock buildingBlock
public Environment environment
public Corpse corpse
public ParentInfo parent
public KeyLock keyLock
public CodeLock codeLock
public EntitySlots entitySlots
public BuildingPrivilege buildingPrivilege
public StorageBox storageBox
public HeldEntity heldEntity
public BaseProjectile baseProjectile
public BaseNPC baseNPC
public Loot loot
public GenericSpawner genericSpawner
public SleepingBag sleepingBag
public LootableCorpse lootableCorpse
public Sign sign
public BaseCombat baseCombat
public MapEntity mapEntity
public ResearchTable researchTable
public DudExplosive dudExplosive
public MiningQuarry miningQuarry
public BaseVehicle baseVehicle
public Helicopter helicopter
public Landmine landmine
public AutoTurret autoturret
public SphereEntity sphereEntity
public StabilityEntity stabilityEntity
public OwnerInfo ownerInfo
public DecayEntity decayEntity
public Spawnable spawnable
public ServerGib servergib
public VendingMachine vendingMachine
public SpinnerWheel spinnerWheel
public Lift lift
public BradleyAPC bradley
public WaterWell waterwell
public Motorboat motorBoat
public IOEntity ioEntity
public PuzzleReset puzzleReset
public RelationshipManager relationshipManager
public HotAirBalloon hotAirBalloon
public SAMSite samSite
public EggHunt eggHunt
public ArcadeMachine arcadeMachine
public Minicopter miniCopter
public Horse horse
public SmartAlarm smartAlarm
public LightString lightString
public LightDeployer lightDeployer
public RCEntity rcEntity
public ComputerStation computerStation
public GrowableEntity growableEntity
public Composter composter
public ModularVehicle modularVehicle
public ModularCar modularCar
public SimpleUID simpleUID
public VehicleLift vehicleLift
public EngineStorage engineStorage
public VehicleVendor vehicleVendor
public WaterPool WaterPool
public Photo photo
public PhotoFrame photoFrame
public VehicleModule vehicleModule
public MixingTable mixingTable
public ShopKeeper shopKeeper
public Elevator elevator
public SkullTrophy skullTrophy
public Cassette cassette
public Telephone telephone
public BoomBox boomBox
public NeonSign neonSign
public SubEntityList subEntityList
public MarketTerminal marketTerminal
public DeliveryDrone deliveryDrone
public ReclaimTerminal reclaimTerminal
public SlotMachine slotMachine
public TrainEngine trainEngine
public CardGame cardGame
public Crane crane
public ConnectedSpeaker connectedSpeaker
public AudioEntity audioEntity
public MicrophoneStand microphoneStand
public Submarine submarine
public SleepingBagCamper sleepingBagCamper
public CamperModule camperModule
public PaintableSign paintableSign
public Whitelist whitelist
public FrankensteinTable FrankensteinTable
public MLRS mlrs
public ReclaimManager reclaimManager
public GameMode gameMode
public Snowmobile snowmobile
public bool createdThisFrame
public PatternFirework patternFirework
public CargoPlane cargoPlane
public PaintedItem paintedItem
public Spray spray
public BaseTrain baseTrain
public Zipline zipline
public ZiplineMountable ziplineMountable
public ZiplineArrivalPoint ZiplineArrival
public SprayLine sprayLine
public CoalingTower coalingTower
public SimpleFloat simpleFloat
public BaseOven baseOven
public BrainComponent brainComponent
public ProceduralDungeon proceduralDungeon
public IndustrialConveyor industrialConveyor
public IndustrialCrafter industrialCrafter
public Drone drone
public TimedExplosive explosive
public SimpleUInt simpleUint
public void ResetToPool(Entity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Entity instance)
public Entity Copy()
public Entity Deserialize(Stream stream)
public Entity DeserializeLengthDelimited(Stream stream)
public Entity DeserializeLength(Stream stream, int length)
public Entity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Entity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Entity Deserialize(Byte[] buffer, Entity instance, bool isDelta)
public Entity Deserialize(Stream stream, Entity instance, bool isDelta)
public Entity DeserializeLengthDelimited(Stream stream, Entity instance, bool isDelta)
public Entity DeserializeLength(Stream stream, int length, Entity instance, bool isDelta)
public void SerializeDelta(Stream stream, Entity instance, Entity previous)
public void Serialize(Stream stream, Entity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Entity instance)
public void SerializeLengthDelimited(Stream stream, Entity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.EntityIdList : object {
public bool ShouldPool
private bool _disposed
public List`1<NetworkableId> entityIds
public void ResetToPool(EntityIdList instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(EntityIdList instance)
public EntityIdList Copy()
public EntityIdList Deserialize(Stream stream)
public EntityIdList DeserializeLengthDelimited(Stream stream)
public EntityIdList DeserializeLength(Stream stream, int length)
public EntityIdList Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, EntityIdList previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public EntityIdList Deserialize(Byte[] buffer, EntityIdList instance, bool isDelta)
public EntityIdList Deserialize(Stream stream, EntityIdList instance, bool isDelta)
public EntityIdList DeserializeLengthDelimited(Stream stream, EntityIdList instance, bool isDelta)
public EntityIdList DeserializeLength(Stream stream, int length, EntityIdList instance, bool isDelta)
public void SerializeDelta(Stream stream, EntityIdList instance, EntityIdList previous)
public void Serialize(Stream stream, EntityIdList instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(EntityIdList instance)
public void SerializeLengthDelimited(Stream stream, EntityIdList instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.EntityList : object {
public bool ShouldPool
private bool _disposed
public List`1<Entity> entity
public void ResetToPool(EntityList instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(EntityList instance)
public EntityList Copy()
public EntityList Deserialize(Stream stream)
public EntityList DeserializeLengthDelimited(Stream stream)
public EntityList DeserializeLength(Stream stream, int length)
public EntityList Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, EntityList previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public EntityList Deserialize(Byte[] buffer, EntityList instance, bool isDelta)
public EntityList Deserialize(Stream stream, EntityList instance, bool isDelta)
public EntityList DeserializeLengthDelimited(Stream stream, EntityList instance, bool isDelta)
public EntityList DeserializeLength(Stream stream, int length, EntityList instance, bool isDelta)
public void SerializeDelta(Stream stream, EntityList instance, EntityList previous)
public void Serialize(Stream stream, EntityList instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(EntityList instance)
public void SerializeLengthDelimited(Stream stream, EntityList instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.EntitySlots : object {
public bool ShouldPool
private bool _disposed
public NetworkableId slotLock
public NetworkableId slotFireMod
public NetworkableId slotUpperModification
public NetworkableId centerDecoration
public NetworkableId lowerCenterDecoration
public NetworkableId storageMonitor
public void ResetToPool(EntitySlots instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(EntitySlots instance)
public EntitySlots Copy()
public EntitySlots Deserialize(Stream stream)
public EntitySlots DeserializeLengthDelimited(Stream stream)
public EntitySlots DeserializeLength(Stream stream, int length)
public EntitySlots Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, EntitySlots previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public EntitySlots Deserialize(Byte[] buffer, EntitySlots instance, bool isDelta)
public EntitySlots Deserialize(Stream stream, EntitySlots instance, bool isDelta)
public EntitySlots DeserializeLengthDelimited(Stream stream, EntitySlots instance, bool isDelta)
public EntitySlots DeserializeLength(Stream stream, int length, EntitySlots instance, bool isDelta)
public void SerializeDelta(Stream stream, EntitySlots instance, EntitySlots previous)
public void Serialize(Stream stream, EntitySlots instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(EntitySlots instance)
public void SerializeLengthDelimited(Stream stream, EntitySlots instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Environment : object {
public bool ShouldPool
private bool _disposed
public long dateTime
public float clouds
public float fog
public float wind
public float rain
public float engineTime
public void ResetToPool(Environment instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Environment instance)
public Environment Copy()
public Environment Deserialize(Stream stream)
public Environment DeserializeLengthDelimited(Stream stream)
public Environment DeserializeLength(Stream stream, int length)
public Environment Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Environment previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Environment Deserialize(Byte[] buffer, Environment instance, bool isDelta)
public Environment Deserialize(Stream stream, Environment instance, bool isDelta)
public Environment DeserializeLengthDelimited(Stream stream, Environment instance, bool isDelta)
public Environment DeserializeLength(Stream stream, int length, Environment instance, bool isDelta)
public void SerializeDelta(Stream stream, Environment instance, Environment previous)
public void Serialize(Stream stream, Environment instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Environment instance)
public void SerializeLengthDelimited(Stream stream, Environment instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.FileStorageCacheData : object {
public bool ShouldPool
private bool _disposed
public Byte[] data
public NetworkableId entityId
public UInt32 numId
public UInt32 crc
public void ResetToPool(FileStorageCacheData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(FileStorageCacheData instance)
public FileStorageCacheData Copy()
public FileStorageCacheData Deserialize(Stream stream)
public FileStorageCacheData DeserializeLengthDelimited(Stream stream)
public FileStorageCacheData DeserializeLength(Stream stream, int length)
public FileStorageCacheData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, FileStorageCacheData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public FileStorageCacheData Deserialize(Byte[] buffer, FileStorageCacheData instance, bool isDelta)
public FileStorageCacheData Deserialize(Stream stream, FileStorageCacheData instance, bool isDelta)
public FileStorageCacheData DeserializeLengthDelimited(Stream stream, FileStorageCacheData instance, bool isDelta)
public FileStorageCacheData DeserializeLength(Stream stream, int length, FileStorageCacheData instance, bool isDelta)
public void SerializeDelta(Stream stream, FileStorageCacheData instance, FileStorageCacheData previous)
public void Serialize(Stream stream, FileStorageCacheData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(FileStorageCacheData instance)
public void SerializeLengthDelimited(Stream stream, FileStorageCacheData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.FrankensteinTable : object {
public bool ShouldPool
private bool _disposed
public List`1<int> itemIds
public void ResetToPool(FrankensteinTable instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(FrankensteinTable instance)
public FrankensteinTable Copy()
public FrankensteinTable Deserialize(Stream stream)
public FrankensteinTable DeserializeLengthDelimited(Stream stream)
public FrankensteinTable DeserializeLength(Stream stream, int length)
public FrankensteinTable Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, FrankensteinTable previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public FrankensteinTable Deserialize(Byte[] buffer, FrankensteinTable instance, bool isDelta)
public FrankensteinTable Deserialize(Stream stream, FrankensteinTable instance, bool isDelta)
public FrankensteinTable DeserializeLengthDelimited(Stream stream, FrankensteinTable instance, bool isDelta)
public FrankensteinTable DeserializeLength(Stream stream, int length, FrankensteinTable instance, bool isDelta)
public void SerializeDelta(Stream stream, FrankensteinTable instance, FrankensteinTable previous)
public void Serialize(Stream stream, FrankensteinTable instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(FrankensteinTable instance)
public void SerializeLengthDelimited(Stream stream, FrankensteinTable instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.GameMode : object {
public bool ShouldPool
private bool _disposed
public List`1<TeamInfo> teams
public List`1<ScoreColumn> scoreColumns
public List`1<PlayerScore> playerScores
public void ResetToPool(GameMode instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(GameMode instance)
public GameMode Copy()
public GameMode Deserialize(Stream stream)
public GameMode DeserializeLengthDelimited(Stream stream)
public GameMode DeserializeLength(Stream stream, int length)
public GameMode Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, GameMode previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public GameMode Deserialize(Byte[] buffer, GameMode instance, bool isDelta)
public GameMode Deserialize(Stream stream, GameMode instance, bool isDelta)
public GameMode DeserializeLengthDelimited(Stream stream, GameMode instance, bool isDelta)
public GameMode DeserializeLength(Stream stream, int length, GameMode instance, bool isDelta)
public void SerializeDelta(Stream stream, GameMode instance, GameMode previous)
public void Serialize(Stream stream, GameMode instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(GameMode instance)
public void SerializeLengthDelimited(Stream stream, GameMode instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.GenericSpawner : object {
public bool ShouldPool
private bool _disposed
public List`1<SpawnedEnt> ents
public void ResetToPool(GenericSpawner instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(GenericSpawner instance)
public GenericSpawner Copy()
public GenericSpawner Deserialize(Stream stream)
public GenericSpawner DeserializeLengthDelimited(Stream stream)
public GenericSpawner DeserializeLength(Stream stream, int length)
public GenericSpawner Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, GenericSpawner previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public GenericSpawner Deserialize(Byte[] buffer, GenericSpawner instance, bool isDelta)
public GenericSpawner Deserialize(Stream stream, GenericSpawner instance, bool isDelta)
public GenericSpawner DeserializeLengthDelimited(Stream stream, GenericSpawner instance, bool isDelta)
public GenericSpawner DeserializeLength(Stream stream, int length, GenericSpawner instance, bool isDelta)
public void SerializeDelta(Stream stream, GenericSpawner instance, GenericSpawner previous)
public void Serialize(Stream stream, GenericSpawner instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(GenericSpawner instance)
public void SerializeLengthDelimited(Stream stream, GenericSpawner instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.GrowableEntity : object {
public bool ShouldPool
private bool _disposed
public int state
public float age
public int water
public float healthy
public float totalAge
public float growthAge
public float yieldFraction
public float stageAge
public int genes
public float lightModifier
public float waterModifier
public float groundModifier
public float happiness
public float temperatureModifier
public float waterConsumption
public float yieldPool
public bool fertilized
public int previousGenes
public void ResetToPool(GrowableEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(GrowableEntity instance)
public GrowableEntity Copy()
public GrowableEntity Deserialize(Stream stream)
public GrowableEntity DeserializeLengthDelimited(Stream stream)
public GrowableEntity DeserializeLength(Stream stream, int length)
public GrowableEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, GrowableEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public GrowableEntity Deserialize(Byte[] buffer, GrowableEntity instance, bool isDelta)
public GrowableEntity Deserialize(Stream stream, GrowableEntity instance, bool isDelta)
public GrowableEntity DeserializeLengthDelimited(Stream stream, GrowableEntity instance, bool isDelta)
public GrowableEntity DeserializeLength(Stream stream, int length, GrowableEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, GrowableEntity instance, GrowableEntity previous)
public void Serialize(Stream stream, GrowableEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(GrowableEntity instance)
public void SerializeLengthDelimited(Stream stream, GrowableEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Half3 : ValueType {
public UInt32 x
public UInt32 y
public UInt32 z
public void ResetToPool(Half3 instance)
public void CopyTo(Half3 instance)
public Half3 Copy()
public Half3 Deserialize(Stream stream)
public Half3 DeserializeLengthDelimited(Stream stream)
public Half3 DeserializeLength(Stream stream, int length)
public Half3 Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Half3 previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Half3 Deserialize(Byte[] buffer, Half3& instance, bool isDelta)
public Half3 Deserialize(Stream stream, Half3& instance, bool isDelta)
public Half3 DeserializeLengthDelimited(Stream stream, Half3& instance, bool isDelta)
public Half3 DeserializeLength(Stream stream, int length, Half3& instance, bool isDelta)
public void SerializeDelta(Stream stream, Half3 instance, Half3 previous)
public void Serialize(Stream stream, Half3 instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Half3 instance)
public void SerializeLengthDelimited(Stream stream, Half3 instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.HealthBelowAIEventData : object {
public bool ShouldPool
private bool _disposed
public float healthFraction
public void ResetToPool(HealthBelowAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(HealthBelowAIEventData instance)
public HealthBelowAIEventData Copy()
public HealthBelowAIEventData Deserialize(Stream stream)
public HealthBelowAIEventData DeserializeLengthDelimited(Stream stream)
public HealthBelowAIEventData DeserializeLength(Stream stream, int length)
public HealthBelowAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, HealthBelowAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public HealthBelowAIEventData Deserialize(Byte[] buffer, HealthBelowAIEventData instance, bool isDelta)
public HealthBelowAIEventData Deserialize(Stream stream, HealthBelowAIEventData instance, bool isDelta)
public HealthBelowAIEventData DeserializeLengthDelimited(Stream stream, HealthBelowAIEventData instance, bool isDelta)
public HealthBelowAIEventData DeserializeLength(Stream stream, int length, HealthBelowAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, HealthBelowAIEventData instance, HealthBelowAIEventData previous)
public void Serialize(Stream stream, HealthBelowAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(HealthBelowAIEventData instance)
public void SerializeLengthDelimited(Stream stream, HealthBelowAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.HeldEntity : object {
public bool ShouldPool
private bool _disposed
public ItemId itemUID
public void ResetToPool(HeldEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(HeldEntity instance)
public HeldEntity Copy()
public HeldEntity Deserialize(Stream stream)
public HeldEntity DeserializeLengthDelimited(Stream stream)
public HeldEntity DeserializeLength(Stream stream, int length)
public HeldEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, HeldEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public HeldEntity Deserialize(Byte[] buffer, HeldEntity instance, bool isDelta)
public HeldEntity Deserialize(Stream stream, HeldEntity instance, bool isDelta)
public HeldEntity DeserializeLengthDelimited(Stream stream, HeldEntity instance, bool isDelta)
public HeldEntity DeserializeLength(Stream stream, int length, HeldEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, HeldEntity instance, HeldEntity previous)
public void Serialize(Stream stream, HeldEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(HeldEntity instance)
public void SerializeLengthDelimited(Stream stream, HeldEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Helicopter : object {
public bool ShouldPool
private bool _disposed
public Vector3 tiltRot
public Vector3 leftGun
public Vector3 rightGun
public Vector3 spotlightVec
public List`1<float> weakspothealths
public void ResetToPool(Helicopter instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Helicopter instance)
public Helicopter Copy()
public Helicopter Deserialize(Stream stream)
public Helicopter DeserializeLengthDelimited(Stream stream)
public Helicopter DeserializeLength(Stream stream, int length)
public Helicopter Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Helicopter previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Helicopter Deserialize(Byte[] buffer, Helicopter instance, bool isDelta)
public Helicopter Deserialize(Stream stream, Helicopter instance, bool isDelta)
public Helicopter DeserializeLengthDelimited(Stream stream, Helicopter instance, bool isDelta)
public Helicopter DeserializeLength(Stream stream, int length, Helicopter instance, bool isDelta)
public void SerializeDelta(Stream stream, Helicopter instance, Helicopter previous)
public void Serialize(Stream stream, Helicopter instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Helicopter instance)
public void SerializeLengthDelimited(Stream stream, Helicopter instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Horse : object {
public bool ShouldPool
private bool _disposed
public int runState
public int numStorageSlots
public int breedIndex
public float staminaSeconds
public float currentMaxStaminaSeconds
public float maxSpeed
public void ResetToPool(Horse instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Horse instance)
public Horse Copy()
public Horse Deserialize(Stream stream)
public Horse DeserializeLengthDelimited(Stream stream)
public Horse DeserializeLength(Stream stream, int length)
public Horse Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Horse previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Horse Deserialize(Byte[] buffer, Horse instance, bool isDelta)
public Horse Deserialize(Stream stream, Horse instance, bool isDelta)
public Horse DeserializeLengthDelimited(Stream stream, Horse instance, bool isDelta)
public Horse DeserializeLength(Stream stream, int length, Horse instance, bool isDelta)
public void SerializeDelta(Stream stream, Horse instance, Horse previous)
public void Serialize(Stream stream, Horse instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Horse instance)
public void SerializeLengthDelimited(Stream stream, Horse instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.HotAirBalloon : object {
public bool ShouldPool
private bool _disposed
public float inflationAmount
public Vector3 velocity
public void ResetToPool(HotAirBalloon instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(HotAirBalloon instance)
public HotAirBalloon Copy()
public HotAirBalloon Deserialize(Stream stream)
public HotAirBalloon DeserializeLengthDelimited(Stream stream)
public HotAirBalloon DeserializeLength(Stream stream, int length)
public HotAirBalloon Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, HotAirBalloon previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public HotAirBalloon Deserialize(Byte[] buffer, HotAirBalloon instance, bool isDelta)
public HotAirBalloon Deserialize(Stream stream, HotAirBalloon instance, bool isDelta)
public HotAirBalloon DeserializeLengthDelimited(Stream stream, HotAirBalloon instance, bool isDelta)
public HotAirBalloon DeserializeLength(Stream stream, int length, HotAirBalloon instance, bool isDelta)
public void SerializeDelta(Stream stream, HotAirBalloon instance, HotAirBalloon previous)
public void Serialize(Stream stream, HotAirBalloon instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(HotAirBalloon instance)
public void SerializeLengthDelimited(Stream stream, HotAirBalloon instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.HungerAboveAIEventData : object {
public bool ShouldPool
private bool _disposed
public float value
public void ResetToPool(HungerAboveAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(HungerAboveAIEventData instance)
public HungerAboveAIEventData Copy()
public HungerAboveAIEventData Deserialize(Stream stream)
public HungerAboveAIEventData DeserializeLengthDelimited(Stream stream)
public HungerAboveAIEventData DeserializeLength(Stream stream, int length)
public HungerAboveAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, HungerAboveAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public HungerAboveAIEventData Deserialize(Byte[] buffer, HungerAboveAIEventData instance, bool isDelta)
public HungerAboveAIEventData Deserialize(Stream stream, HungerAboveAIEventData instance, bool isDelta)
public HungerAboveAIEventData DeserializeLengthDelimited(Stream stream, HungerAboveAIEventData instance, bool isDelta)
public HungerAboveAIEventData DeserializeLength(Stream stream, int length, HungerAboveAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, HungerAboveAIEventData instance, HungerAboveAIEventData previous)
public void Serialize(Stream stream, HungerAboveAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(HungerAboveAIEventData instance)
public void SerializeLengthDelimited(Stream stream, HungerAboveAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.IndustrialConveyor : object {
public bool ShouldPool
private bool _disposed
public List`1<ItemFilter> filters
public int conveyorMode
public void ResetToPool(IndustrialConveyor instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(IndustrialConveyor instance)
public IndustrialConveyor Copy()
public IndustrialConveyor Deserialize(Stream stream)
public IndustrialConveyor DeserializeLengthDelimited(Stream stream)
public IndustrialConveyor DeserializeLength(Stream stream, int length)
public IndustrialConveyor Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, IndustrialConveyor previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public IndustrialConveyor Deserialize(Byte[] buffer, IndustrialConveyor instance, bool isDelta)
public IndustrialConveyor Deserialize(Stream stream, IndustrialConveyor instance, bool isDelta)
public IndustrialConveyor DeserializeLengthDelimited(Stream stream, IndustrialConveyor instance, bool isDelta)
public IndustrialConveyor DeserializeLength(Stream stream, int length, IndustrialConveyor instance, bool isDelta)
public void SerializeDelta(Stream stream, IndustrialConveyor instance, IndustrialConveyor previous)
public void Serialize(Stream stream, IndustrialConveyor instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(IndustrialConveyor instance)
public void SerializeLengthDelimited(Stream stream, IndustrialConveyor instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.IndustrialConveyorTransfer : object {
public bool ShouldPool
private bool _disposed
public List`1<ItemTransfer> ItemTransfers
public List`1<NetworkableId> inputEntities
public List`1<NetworkableId> outputEntities
public void ResetToPool(IndustrialConveyorTransfer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(IndustrialConveyorTransfer instance)
public IndustrialConveyorTransfer Copy()
public IndustrialConveyorTransfer Deserialize(Stream stream)
public IndustrialConveyorTransfer DeserializeLengthDelimited(Stream stream)
public IndustrialConveyorTransfer DeserializeLength(Stream stream, int length)
public IndustrialConveyorTransfer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, IndustrialConveyorTransfer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public IndustrialConveyorTransfer Deserialize(Byte[] buffer, IndustrialConveyorTransfer instance, bool isDelta)
public IndustrialConveyorTransfer Deserialize(Stream stream, IndustrialConveyorTransfer instance, bool isDelta)
public IndustrialConveyorTransfer DeserializeLengthDelimited(Stream stream, IndustrialConveyorTransfer instance, bool isDelta)
public IndustrialConveyorTransfer DeserializeLength(Stream stream, int length, IndustrialConveyorTransfer instance, bool isDelta)
public void SerializeDelta(Stream stream, IndustrialConveyorTransfer instance, IndustrialConveyorTransfer previous)
public void Serialize(Stream stream, IndustrialConveyorTransfer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(IndustrialConveyorTransfer instance)
public void SerializeLengthDelimited(Stream stream, IndustrialConveyorTransfer instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.IndustrialCrafter : object {
public bool ShouldPool
private bool _disposed
public int currentlyCrafting
public int currentlyCraftingAmount
public void ResetToPool(IndustrialCrafter instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(IndustrialCrafter instance)
public IndustrialCrafter Copy()
public IndustrialCrafter Deserialize(Stream stream)
public IndustrialCrafter DeserializeLengthDelimited(Stream stream)
public IndustrialCrafter DeserializeLength(Stream stream, int length)
public IndustrialCrafter Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, IndustrialCrafter previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public IndustrialCrafter Deserialize(Byte[] buffer, IndustrialCrafter instance, bool isDelta)
public IndustrialCrafter Deserialize(Stream stream, IndustrialCrafter instance, bool isDelta)
public IndustrialCrafter DeserializeLengthDelimited(Stream stream, IndustrialCrafter instance, bool isDelta)
public IndustrialCrafter DeserializeLength(Stream stream, int length, IndustrialCrafter instance, bool isDelta)
public void SerializeDelta(Stream stream, IndustrialCrafter instance, IndustrialCrafter previous)
public void Serialize(Stream stream, IndustrialCrafter instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(IndustrialCrafter instance)
public void SerializeLengthDelimited(Stream stream, IndustrialCrafter instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.InRangeAIEventData : object {
public bool ShouldPool
private bool _disposed
public float range
public void ResetToPool(InRangeAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(InRangeAIEventData instance)
public InRangeAIEventData Copy()
public InRangeAIEventData Deserialize(Stream stream)
public InRangeAIEventData DeserializeLengthDelimited(Stream stream)
public InRangeAIEventData DeserializeLength(Stream stream, int length)
public InRangeAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, InRangeAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public InRangeAIEventData Deserialize(Byte[] buffer, InRangeAIEventData instance, bool isDelta)
public InRangeAIEventData Deserialize(Stream stream, InRangeAIEventData instance, bool isDelta)
public InRangeAIEventData DeserializeLengthDelimited(Stream stream, InRangeAIEventData instance, bool isDelta)
public InRangeAIEventData DeserializeLength(Stream stream, int length, InRangeAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, InRangeAIEventData instance, InRangeAIEventData previous)
public void Serialize(Stream stream, InRangeAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(InRangeAIEventData instance)
public void SerializeLengthDelimited(Stream stream, InRangeAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.InRangeOfHomeAIEventData : object {
public bool ShouldPool
private bool _disposed
public float range
public void ResetToPool(InRangeOfHomeAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(InRangeOfHomeAIEventData instance)
public InRangeOfHomeAIEventData Copy()
public InRangeOfHomeAIEventData Deserialize(Stream stream)
public InRangeOfHomeAIEventData DeserializeLengthDelimited(Stream stream)
public InRangeOfHomeAIEventData DeserializeLength(Stream stream, int length)
public InRangeOfHomeAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, InRangeOfHomeAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public InRangeOfHomeAIEventData Deserialize(Byte[] buffer, InRangeOfHomeAIEventData instance, bool isDelta)
public InRangeOfHomeAIEventData Deserialize(Stream stream, InRangeOfHomeAIEventData instance, bool isDelta)
public InRangeOfHomeAIEventData DeserializeLengthDelimited(Stream stream, InRangeOfHomeAIEventData instance, bool isDelta)
public InRangeOfHomeAIEventData DeserializeLength(Stream stream, int length, InRangeOfHomeAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, InRangeOfHomeAIEventData instance, InRangeOfHomeAIEventData previous)
public void Serialize(Stream stream, InRangeOfHomeAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(InRangeOfHomeAIEventData instance)
public void SerializeLengthDelimited(Stream stream, InRangeOfHomeAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.InstrumentMidiBinding : object {
public bool ShouldPool
private bool _disposed
public int noteFrom
public int note
public int noteOctave
public int noteType
public void ResetToPool(InstrumentMidiBinding instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(InstrumentMidiBinding instance)
public InstrumentMidiBinding Copy()
public InstrumentMidiBinding Deserialize(Stream stream)
public InstrumentMidiBinding DeserializeLengthDelimited(Stream stream)
public InstrumentMidiBinding DeserializeLength(Stream stream, int length)
public InstrumentMidiBinding Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, InstrumentMidiBinding previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public InstrumentMidiBinding Deserialize(Byte[] buffer, InstrumentMidiBinding instance, bool isDelta)
public InstrumentMidiBinding Deserialize(Stream stream, InstrumentMidiBinding instance, bool isDelta)
public InstrumentMidiBinding DeserializeLengthDelimited(Stream stream, InstrumentMidiBinding instance, bool isDelta)
public InstrumentMidiBinding DeserializeLength(Stream stream, int length, InstrumentMidiBinding instance, bool isDelta)
public void SerializeDelta(Stream stream, InstrumentMidiBinding instance, InstrumentMidiBinding previous)
public void Serialize(Stream stream, InstrumentMidiBinding instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(InstrumentMidiBinding instance)
public void SerializeLengthDelimited(Stream stream, InstrumentMidiBinding instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.InstrumentMidiBindings : object {
public bool ShouldPool
private bool _disposed
public List`1<InstrumentMidiBinding> bindings
public UInt32 forInstrument
public void ResetToPool(InstrumentMidiBindings instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(InstrumentMidiBindings instance)
public InstrumentMidiBindings Copy()
public InstrumentMidiBindings Deserialize(Stream stream)
public InstrumentMidiBindings DeserializeLengthDelimited(Stream stream)
public InstrumentMidiBindings DeserializeLength(Stream stream, int length)
public InstrumentMidiBindings Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, InstrumentMidiBindings previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public InstrumentMidiBindings Deserialize(Byte[] buffer, InstrumentMidiBindings instance, bool isDelta)
public InstrumentMidiBindings Deserialize(Stream stream, InstrumentMidiBindings instance, bool isDelta)
public InstrumentMidiBindings DeserializeLengthDelimited(Stream stream, InstrumentMidiBindings instance, bool isDelta)
public InstrumentMidiBindings DeserializeLength(Stream stream, int length, InstrumentMidiBindings instance, bool isDelta)
public void SerializeDelta(Stream stream, InstrumentMidiBindings instance, InstrumentMidiBindings previous)
public void Serialize(Stream stream, InstrumentMidiBindings instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(InstrumentMidiBindings instance)
public void SerializeLengthDelimited(Stream stream, InstrumentMidiBindings instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.InstrumentRecording : object {
public bool ShouldPool
private bool _disposed
public List`1<InstrumentRecordingNote> notes
public int forInstrument
public void ResetToPool(InstrumentRecording instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(InstrumentRecording instance)
public InstrumentRecording Copy()
public InstrumentRecording Deserialize(Stream stream)
public InstrumentRecording DeserializeLengthDelimited(Stream stream)
public InstrumentRecording DeserializeLength(Stream stream, int length)
public InstrumentRecording Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, InstrumentRecording previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public InstrumentRecording Deserialize(Byte[] buffer, InstrumentRecording instance, bool isDelta)
public InstrumentRecording Deserialize(Stream stream, InstrumentRecording instance, bool isDelta)
public InstrumentRecording DeserializeLengthDelimited(Stream stream, InstrumentRecording instance, bool isDelta)
public InstrumentRecording DeserializeLength(Stream stream, int length, InstrumentRecording instance, bool isDelta)
public void SerializeDelta(Stream stream, InstrumentRecording instance, InstrumentRecording previous)
public void Serialize(Stream stream, InstrumentRecording instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(InstrumentRecording instance)
public void SerializeLengthDelimited(Stream stream, InstrumentRecording instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.InstrumentRecordingNote : object {
public bool ShouldPool
private bool _disposed
public float startTime
public float duration
public int note
public int octave
public float velocity
public int noteType
public bool shouldPlay
public bool hasPlayed
public void ResetToPool(InstrumentRecordingNote instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(InstrumentRecordingNote instance)
public InstrumentRecordingNote Copy()
public InstrumentRecordingNote Deserialize(Stream stream)
public InstrumentRecordingNote DeserializeLengthDelimited(Stream stream)
public InstrumentRecordingNote DeserializeLength(Stream stream, int length)
public InstrumentRecordingNote Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, InstrumentRecordingNote previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public InstrumentRecordingNote Deserialize(Byte[] buffer, InstrumentRecordingNote instance, bool isDelta)
public InstrumentRecordingNote Deserialize(Stream stream, InstrumentRecordingNote instance, bool isDelta)
public InstrumentRecordingNote DeserializeLengthDelimited(Stream stream, InstrumentRecordingNote instance, bool isDelta)
public InstrumentRecordingNote DeserializeLength(Stream stream, int length, InstrumentRecordingNote instance, bool isDelta)
public void SerializeDelta(Stream stream, InstrumentRecordingNote instance, InstrumentRecordingNote previous)
public void Serialize(Stream stream, InstrumentRecordingNote instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(InstrumentRecordingNote instance)
public void SerializeLengthDelimited(Stream stream, InstrumentRecordingNote instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.IOEntity : object {
public bool ShouldPool
private bool _disposed
public List`1<IOConnection> inputs
public List`1<IOConnection> outputs
public NetworkableId genericEntRef1
public NetworkableId genericEntRef2
public NetworkableId genericEntRef3
public int genericInt1
public int genericInt2
public float genericFloat1
public float genericFloat2
public int genericInt3
public void ResetToPool(IOEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(IOEntity instance)
public IOEntity Copy()
public IOEntity Deserialize(Stream stream)
public IOEntity DeserializeLengthDelimited(Stream stream)
public IOEntity DeserializeLength(Stream stream, int length)
public IOEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, IOEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public IOEntity Deserialize(Byte[] buffer, IOEntity instance, bool isDelta)
public IOEntity Deserialize(Stream stream, IOEntity instance, bool isDelta)
public IOEntity DeserializeLengthDelimited(Stream stream, IOEntity instance, bool isDelta)
public IOEntity DeserializeLength(Stream stream, int length, IOEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, IOEntity instance, IOEntity previous)
public void Serialize(Stream stream, IOEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(IOEntity instance)
public void SerializeLengthDelimited(Stream stream, IOEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Item : object {
public bool ShouldPool
private bool _disposed
public ItemId UID
public int itemid
public int slot
public int amount
public int flags
public float removetime
public float locktime
public NetworkableId worldEntity
public InstanceData instanceData
public NetworkableId heldEntity
public ConditionData conditionData
public string name
public string text
public ulong skinid
public float cooktime
public string streamerName
public ItemContainer contents
public void ResetToPool(Item instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Item instance)
public Item Copy()
public Item Deserialize(Stream stream)
public Item DeserializeLengthDelimited(Stream stream)
public Item DeserializeLength(Stream stream, int length)
public Item Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Item previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Item Deserialize(Byte[] buffer, Item instance, bool isDelta)
public Item Deserialize(Stream stream, Item instance, bool isDelta)
public Item DeserializeLengthDelimited(Stream stream, Item instance, bool isDelta)
public Item DeserializeLength(Stream stream, int length, Item instance, bool isDelta)
public void SerializeDelta(Stream stream, Item instance, Item previous)
public void Serialize(Stream stream, Item instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Item instance)
public void SerializeLengthDelimited(Stream stream, Item instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ItemAmountList : object {
public bool ShouldPool
private bool _disposed
public List`1<int> itemID
public List`1<float> amount
public void ResetToPool(ItemAmountList instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ItemAmountList instance)
public ItemAmountList Copy()
public ItemAmountList Deserialize(Stream stream)
public ItemAmountList DeserializeLengthDelimited(Stream stream)
public ItemAmountList DeserializeLength(Stream stream, int length)
public ItemAmountList Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ItemAmountList previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ItemAmountList Deserialize(Byte[] buffer, ItemAmountList instance, bool isDelta)
public ItemAmountList Deserialize(Stream stream, ItemAmountList instance, bool isDelta)
public ItemAmountList DeserializeLengthDelimited(Stream stream, ItemAmountList instance, bool isDelta)
public ItemAmountList DeserializeLength(Stream stream, int length, ItemAmountList instance, bool isDelta)
public void SerializeDelta(Stream stream, ItemAmountList instance, ItemAmountList previous)
public void Serialize(Stream stream, ItemAmountList instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ItemAmountList instance)
public void SerializeLengthDelimited(Stream stream, ItemAmountList instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ItemContainer : object {
public bool ShouldPool
private bool _disposed
public ItemContainerId UID
public int slots
public float temperature
public int flags
public int allowedContents
public int maxStackSize
public List`1<int> allowedItems
public List`1<int> availableSlots
public List`1<Item> contents
public void ResetToPool(ItemContainer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ItemContainer instance)
public ItemContainer Copy()
public ItemContainer Deserialize(Stream stream)
public ItemContainer DeserializeLengthDelimited(Stream stream)
public ItemContainer DeserializeLength(Stream stream, int length)
public ItemContainer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ItemContainer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ItemContainer Deserialize(Byte[] buffer, ItemContainer instance, bool isDelta)
public ItemContainer Deserialize(Stream stream, ItemContainer instance, bool isDelta)
public ItemContainer DeserializeLengthDelimited(Stream stream, ItemContainer instance, bool isDelta)
public ItemContainer DeserializeLength(Stream stream, int length, ItemContainer instance, bool isDelta)
public void SerializeDelta(Stream stream, ItemContainer instance, ItemContainer previous)
public void Serialize(Stream stream, ItemContainer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ItemContainer instance)
public void SerializeLengthDelimited(Stream stream, ItemContainer instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.KeyLock : object {
public bool ShouldPool
private bool _disposed
public int code
public void ResetToPool(KeyLock instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(KeyLock instance)
public KeyLock Copy()
public KeyLock Deserialize(Stream stream)
public KeyLock DeserializeLengthDelimited(Stream stream)
public KeyLock DeserializeLength(Stream stream, int length)
public KeyLock Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, KeyLock previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public KeyLock Deserialize(Byte[] buffer, KeyLock instance, bool isDelta)
public KeyLock Deserialize(Stream stream, KeyLock instance, bool isDelta)
public KeyLock DeserializeLengthDelimited(Stream stream, KeyLock instance, bool isDelta)
public KeyLock DeserializeLength(Stream stream, int length, KeyLock instance, bool isDelta)
public void SerializeDelta(Stream stream, KeyLock instance, KeyLock previous)
public void Serialize(Stream stream, KeyLock instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(KeyLock instance)
public void SerializeLengthDelimited(Stream stream, KeyLock instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Landmine : object {
public bool ShouldPool
private bool _disposed
public ulong triggeredID
public void ResetToPool(Landmine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Landmine instance)
public Landmine Copy()
public Landmine Deserialize(Stream stream)
public Landmine DeserializeLengthDelimited(Stream stream)
public Landmine DeserializeLength(Stream stream, int length)
public Landmine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Landmine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Landmine Deserialize(Byte[] buffer, Landmine instance, bool isDelta)
public Landmine Deserialize(Stream stream, Landmine instance, bool isDelta)
public Landmine DeserializeLengthDelimited(Stream stream, Landmine instance, bool isDelta)
public Landmine DeserializeLength(Stream stream, int length, Landmine instance, bool isDelta)
public void SerializeDelta(Stream stream, Landmine instance, Landmine previous)
public void Serialize(Stream stream, Landmine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Landmine instance)
public void SerializeLengthDelimited(Stream stream, Landmine instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Lift : object {
public bool ShouldPool
private bool _disposed
public int floor
public void ResetToPool(Lift instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Lift instance)
public Lift Copy()
public Lift Deserialize(Stream stream)
public Lift DeserializeLengthDelimited(Stream stream)
public Lift DeserializeLength(Stream stream, int length)
public Lift Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Lift previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Lift Deserialize(Byte[] buffer, Lift instance, bool isDelta)
public Lift Deserialize(Stream stream, Lift instance, bool isDelta)
public Lift DeserializeLengthDelimited(Stream stream, Lift instance, bool isDelta)
public Lift DeserializeLength(Stream stream, int length, Lift instance, bool isDelta)
public void SerializeDelta(Stream stream, Lift instance, Lift previous)
public void Serialize(Stream stream, Lift instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Lift instance)
public void SerializeLengthDelimited(Stream stream, Lift instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.LightDeployer : object {
public bool ShouldPool
private bool _disposed
public NetworkableId active
public void ResetToPool(LightDeployer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(LightDeployer instance)
public LightDeployer Copy()
public LightDeployer Deserialize(Stream stream)
public LightDeployer DeserializeLengthDelimited(Stream stream)
public LightDeployer DeserializeLength(Stream stream, int length)
public LightDeployer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, LightDeployer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public LightDeployer Deserialize(Byte[] buffer, LightDeployer instance, bool isDelta)
public LightDeployer Deserialize(Stream stream, LightDeployer instance, bool isDelta)
public LightDeployer DeserializeLengthDelimited(Stream stream, LightDeployer instance, bool isDelta)
public LightDeployer DeserializeLength(Stream stream, int length, LightDeployer instance, bool isDelta)
public void SerializeDelta(Stream stream, LightDeployer instance, LightDeployer previous)
public void Serialize(Stream stream, LightDeployer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(LightDeployer instance)
public void SerializeLengthDelimited(Stream stream, LightDeployer instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.LightString : object {
public bool ShouldPool
private bool _disposed
public List`1<StringPoint> points
public int lengthUsed
public int animationStyle
public void ResetToPool(LightString instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(LightString instance)
public LightString Copy()
public LightString Deserialize(Stream stream)
public LightString DeserializeLengthDelimited(Stream stream)
public LightString DeserializeLength(Stream stream, int length)
public LightString Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, LightString previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public LightString Deserialize(Byte[] buffer, LightString instance, bool isDelta)
public LightString Deserialize(Stream stream, LightString instance, bool isDelta)
public LightString DeserializeLengthDelimited(Stream stream, LightString instance, bool isDelta)
public LightString DeserializeLength(Stream stream, int length, LightString instance, bool isDelta)
public void SerializeDelta(Stream stream, LightString instance, LightString previous)
public void Serialize(Stream stream, LightString instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(LightString instance)
public void SerializeLengthDelimited(Stream stream, LightString instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.LinePoint : object {
public bool ShouldPool
private bool _disposed
public Vector3 localPosition
public Vector3 worldNormal
public void ResetToPool(LinePoint instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(LinePoint instance)
public LinePoint Copy()
public LinePoint Deserialize(Stream stream)
public LinePoint DeserializeLengthDelimited(Stream stream)
public LinePoint DeserializeLength(Stream stream, int length)
public LinePoint Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, LinePoint previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public LinePoint Deserialize(Byte[] buffer, LinePoint instance, bool isDelta)
public LinePoint Deserialize(Stream stream, LinePoint instance, bool isDelta)
public LinePoint DeserializeLengthDelimited(Stream stream, LinePoint instance, bool isDelta)
public LinePoint DeserializeLength(Stream stream, int length, LinePoint instance, bool isDelta)
public void SerializeDelta(Stream stream, LinePoint instance, LinePoint previous)
public void Serialize(Stream stream, LinePoint instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(LinePoint instance)
public void SerializeLengthDelimited(Stream stream, LinePoint instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Loot : object {
public bool ShouldPool
private bool _disposed
public ItemContainer contents
public void ResetToPool(Loot instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Loot instance)
public Loot Copy()
public Loot Deserialize(Stream stream)
public Loot DeserializeLengthDelimited(Stream stream)
public Loot DeserializeLength(Stream stream, int length)
public Loot Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Loot previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Loot Deserialize(Byte[] buffer, Loot instance, bool isDelta)
public Loot Deserialize(Stream stream, Loot instance, bool isDelta)
public Loot DeserializeLengthDelimited(Stream stream, Loot instance, bool isDelta)
public Loot DeserializeLength(Stream stream, int length, Loot instance, bool isDelta)
public void SerializeDelta(Stream stream, Loot instance, Loot previous)
public void Serialize(Stream stream, Loot instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Loot instance)
public void SerializeLengthDelimited(Stream stream, Loot instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.LootableCorpse : object {
public bool ShouldPool
private bool _disposed
public Private privateData
public ulong playerID
public string playerName
public UInt32 underwearSkin
public string streamerName
public void ResetToPool(LootableCorpse instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(LootableCorpse instance)
public LootableCorpse Copy()
public LootableCorpse Deserialize(Stream stream)
public LootableCorpse DeserializeLengthDelimited(Stream stream)
public LootableCorpse DeserializeLength(Stream stream, int length)
public LootableCorpse Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, LootableCorpse previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public LootableCorpse Deserialize(Byte[] buffer, LootableCorpse instance, bool isDelta)
public LootableCorpse Deserialize(Stream stream, LootableCorpse instance, bool isDelta)
public LootableCorpse DeserializeLengthDelimited(Stream stream, LootableCorpse instance, bool isDelta)
public LootableCorpse DeserializeLength(Stream stream, int length, LootableCorpse instance, bool isDelta)
public void SerializeDelta(Stream stream, LootableCorpse instance, LootableCorpse previous)
public void Serialize(Stream stream, LootableCorpse instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(LootableCorpse instance)
public void SerializeLengthDelimited(Stream stream, LootableCorpse instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Magazine : object {
public bool ShouldPool
private bool _disposed
public int capacity
public int contents
public int ammoType
public void ResetToPool(Magazine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Magazine instance)
public Magazine Copy()
public Magazine Deserialize(Stream stream)
public Magazine DeserializeLengthDelimited(Stream stream)
public Magazine DeserializeLength(Stream stream, int length)
public Magazine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Magazine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Magazine Deserialize(Byte[] buffer, Magazine instance, bool isDelta)
public Magazine Deserialize(Stream stream, Magazine instance, bool isDelta)
public Magazine DeserializeLengthDelimited(Stream stream, Magazine instance, bool isDelta)
public Magazine DeserializeLength(Stream stream, int length, Magazine instance, bool isDelta)
public void SerializeDelta(Stream stream, Magazine instance, Magazine previous)
public void Serialize(Stream stream, Magazine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Magazine instance)
public void SerializeLengthDelimited(Stream stream, Magazine instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MapData : object {
public bool ShouldPool
private bool _disposed
public string name
public Byte[] data
public void ResetToPool(MapData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MapData instance)
public MapData Copy()
public MapData Deserialize(Stream stream)
public MapData DeserializeLengthDelimited(Stream stream)
public MapData DeserializeLength(Stream stream, int length)
public MapData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MapData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MapData Deserialize(Byte[] buffer, MapData instance, bool isDelta)
public MapData Deserialize(Stream stream, MapData instance, bool isDelta)
public MapData DeserializeLengthDelimited(Stream stream, MapData instance, bool isDelta)
public MapData DeserializeLength(Stream stream, int length, MapData instance, bool isDelta)
public void SerializeDelta(Stream stream, MapData instance, MapData previous)
public void Serialize(Stream stream, MapData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MapData instance)
public void SerializeLengthDelimited(Stream stream, MapData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MapEntity : object {
public bool ShouldPool
private bool _disposed
public List`1<UInt32> fogImages
public List`1<UInt32> paintImages
public void ResetToPool(MapEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MapEntity instance)
public MapEntity Copy()
public MapEntity Deserialize(Stream stream)
public MapEntity DeserializeLengthDelimited(Stream stream)
public MapEntity DeserializeLength(Stream stream, int length)
public MapEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MapEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MapEntity Deserialize(Byte[] buffer, MapEntity instance, bool isDelta)
public MapEntity Deserialize(Stream stream, MapEntity instance, bool isDelta)
public MapEntity DeserializeLengthDelimited(Stream stream, MapEntity instance, bool isDelta)
public MapEntity DeserializeLength(Stream stream, int length, MapEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, MapEntity instance, MapEntity previous)
public void Serialize(Stream stream, MapEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MapEntity instance)
public void SerializeLengthDelimited(Stream stream, MapEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MapNote : object {
public bool ShouldPool
private bool _disposed
public int noteType
public Vector3 worldPosition
public int icon
public int colourIndex
public string label
public bool isPing
public float timeRemaining
public float totalDuration
public void ResetToPool(MapNote instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MapNote instance)
public MapNote Copy()
public MapNote Deserialize(Stream stream)
public MapNote DeserializeLengthDelimited(Stream stream)
public MapNote DeserializeLength(Stream stream, int length)
public MapNote Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MapNote previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MapNote Deserialize(Byte[] buffer, MapNote instance, bool isDelta)
public MapNote Deserialize(Stream stream, MapNote instance, bool isDelta)
public MapNote DeserializeLengthDelimited(Stream stream, MapNote instance, bool isDelta)
public MapNote DeserializeLength(Stream stream, int length, MapNote instance, bool isDelta)
public void SerializeDelta(Stream stream, MapNote instance, MapNote previous)
public void Serialize(Stream stream, MapNote instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MapNote instance)
public void SerializeLengthDelimited(Stream stream, MapNote instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MapNoteList : object {
public bool ShouldPool
private bool _disposed
public List`1<MapNote> notes
public void ResetToPool(MapNoteList instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MapNoteList instance)
public MapNoteList Copy()
public MapNoteList Deserialize(Stream stream)
public MapNoteList DeserializeLengthDelimited(Stream stream)
public MapNoteList DeserializeLength(Stream stream, int length)
public MapNoteList Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MapNoteList previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MapNoteList Deserialize(Byte[] buffer, MapNoteList instance, bool isDelta)
public MapNoteList Deserialize(Stream stream, MapNoteList instance, bool isDelta)
public MapNoteList DeserializeLengthDelimited(Stream stream, MapNoteList instance, bool isDelta)
public MapNoteList DeserializeLength(Stream stream, int length, MapNoteList instance, bool isDelta)
public void SerializeDelta(Stream stream, MapNoteList instance, MapNoteList previous)
public void Serialize(Stream stream, MapNoteList instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MapNoteList instance)
public void SerializeLengthDelimited(Stream stream, MapNoteList instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MarketTerminal : object {
public bool ShouldPool
private bool _disposed
public ulong customerSteamId
public NetworkableId marketplaceId
public List`1<PendingOrder> orders
public string customerName
public TimeUntil timeUntilExpiry
public void ResetToPool(MarketTerminal instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MarketTerminal instance)
public MarketTerminal Copy()
public MarketTerminal Deserialize(Stream stream)
public MarketTerminal DeserializeLengthDelimited(Stream stream)
public MarketTerminal DeserializeLength(Stream stream, int length)
public MarketTerminal Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MarketTerminal previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MarketTerminal Deserialize(Byte[] buffer, MarketTerminal instance, bool isDelta)
public MarketTerminal Deserialize(Stream stream, MarketTerminal instance, bool isDelta)
public MarketTerminal DeserializeLengthDelimited(Stream stream, MarketTerminal instance, bool isDelta)
public MarketTerminal DeserializeLength(Stream stream, int length, MarketTerminal instance, bool isDelta)
public void SerializeDelta(Stream stream, MarketTerminal instance, MarketTerminal previous)
public void Serialize(Stream stream, MarketTerminal instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MarketTerminal instance)
public void SerializeLengthDelimited(Stream stream, MarketTerminal instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MemoryBank : object {
public bool ShouldPool
private bool _disposed
public int type
public int slotCount
public List`1<int> slots
public void ResetToPool(MemoryBank instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MemoryBank instance)
public MemoryBank Copy()
public MemoryBank Deserialize(Stream stream)
public MemoryBank DeserializeLengthDelimited(Stream stream)
public MemoryBank DeserializeLength(Stream stream, int length)
public MemoryBank Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MemoryBank previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MemoryBank Deserialize(Byte[] buffer, MemoryBank instance, bool isDelta)
public MemoryBank Deserialize(Stream stream, MemoryBank instance, bool isDelta)
public MemoryBank DeserializeLengthDelimited(Stream stream, MemoryBank instance, bool isDelta)
public MemoryBank DeserializeLength(Stream stream, int length, MemoryBank instance, bool isDelta)
public void SerializeDelta(Stream stream, MemoryBank instance, MemoryBank previous)
public void Serialize(Stream stream, MemoryBank instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MemoryBank instance)
public void SerializeLengthDelimited(Stream stream, MemoryBank instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MicrophoneStand : object {
public bool ShouldPool
private bool _disposed
public int microphoneMode
public NetworkableId IORef
public void ResetToPool(MicrophoneStand instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MicrophoneStand instance)
public MicrophoneStand Copy()
public MicrophoneStand Deserialize(Stream stream)
public MicrophoneStand DeserializeLengthDelimited(Stream stream)
public MicrophoneStand DeserializeLength(Stream stream, int length)
public MicrophoneStand Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MicrophoneStand previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MicrophoneStand Deserialize(Byte[] buffer, MicrophoneStand instance, bool isDelta)
public MicrophoneStand Deserialize(Stream stream, MicrophoneStand instance, bool isDelta)
public MicrophoneStand DeserializeLengthDelimited(Stream stream, MicrophoneStand instance, bool isDelta)
public MicrophoneStand DeserializeLength(Stream stream, int length, MicrophoneStand instance, bool isDelta)
public void SerializeDelta(Stream stream, MicrophoneStand instance, MicrophoneStand previous)
public void Serialize(Stream stream, MicrophoneStand instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MicrophoneStand instance)
public void SerializeLengthDelimited(Stream stream, MicrophoneStand instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Minicopter : object {
public bool ShouldPool
private bool _disposed
public NetworkableId fuelStorageID
public float fuelFraction
public float pitch
public float roll
public float yaw
public void ResetToPool(Minicopter instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Minicopter instance)
public Minicopter Copy()
public Minicopter Deserialize(Stream stream)
public Minicopter DeserializeLengthDelimited(Stream stream)
public Minicopter DeserializeLength(Stream stream, int length)
public Minicopter Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Minicopter previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Minicopter Deserialize(Byte[] buffer, Minicopter instance, bool isDelta)
public Minicopter Deserialize(Stream stream, Minicopter instance, bool isDelta)
public Minicopter DeserializeLengthDelimited(Stream stream, Minicopter instance, bool isDelta)
public Minicopter DeserializeLength(Stream stream, int length, Minicopter instance, bool isDelta)
public void SerializeDelta(Stream stream, Minicopter instance, Minicopter previous)
public void Serialize(Stream stream, Minicopter instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Minicopter instance)
public void SerializeLengthDelimited(Stream stream, Minicopter instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MiningQuarry : object {
public bool ShouldPool
private bool _disposed
public ResourceExtractor extractor
public int staticType
public void ResetToPool(MiningQuarry instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MiningQuarry instance)
public MiningQuarry Copy()
public MiningQuarry Deserialize(Stream stream)
public MiningQuarry DeserializeLengthDelimited(Stream stream)
public MiningQuarry DeserializeLength(Stream stream, int length)
public MiningQuarry Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MiningQuarry previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MiningQuarry Deserialize(Byte[] buffer, MiningQuarry instance, bool isDelta)
public MiningQuarry Deserialize(Stream stream, MiningQuarry instance, bool isDelta)
public MiningQuarry DeserializeLengthDelimited(Stream stream, MiningQuarry instance, bool isDelta)
public MiningQuarry DeserializeLength(Stream stream, int length, MiningQuarry instance, bool isDelta)
public void SerializeDelta(Stream stream, MiningQuarry instance, MiningQuarry previous)
public void Serialize(Stream stream, MiningQuarry instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MiningQuarry instance)
public void SerializeLengthDelimited(Stream stream, MiningQuarry instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MissionInstance : object {
public bool ShouldPool
private bool _disposed
public NetworkableId providerID
public UInt32 missionID
public UInt32 missionStatus
public float completionScale
public float startTime
public float endTime
public Vector3 missionLocation
public List`1<ObjectiveStatus> objectiveStatuses
public List`1<MissionPoint> missionPoints
public List`1<NetworkableId> createdEntities
public List`1<MissionReward> rewards
public void ResetToPool(MissionInstance instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MissionInstance instance)
public MissionInstance Copy()
public MissionInstance Deserialize(Stream stream)
public MissionInstance DeserializeLengthDelimited(Stream stream)
public MissionInstance DeserializeLength(Stream stream, int length)
public MissionInstance Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MissionInstance previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MissionInstance Deserialize(Byte[] buffer, MissionInstance instance, bool isDelta)
public MissionInstance Deserialize(Stream stream, MissionInstance instance, bool isDelta)
public MissionInstance DeserializeLengthDelimited(Stream stream, MissionInstance instance, bool isDelta)
public MissionInstance DeserializeLength(Stream stream, int length, MissionInstance instance, bool isDelta)
public void SerializeDelta(Stream stream, MissionInstance instance, MissionInstance previous)
public void Serialize(Stream stream, MissionInstance instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MissionInstance instance)
public void SerializeLengthDelimited(Stream stream, MissionInstance instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MissionPoint : object {
public bool ShouldPool
private bool _disposed
public string identifier
public Vector3 location
public void ResetToPool(MissionPoint instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MissionPoint instance)
public MissionPoint Copy()
public MissionPoint Deserialize(Stream stream)
public MissionPoint DeserializeLengthDelimited(Stream stream)
public MissionPoint DeserializeLength(Stream stream, int length)
public MissionPoint Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MissionPoint previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MissionPoint Deserialize(Byte[] buffer, MissionPoint instance, bool isDelta)
public MissionPoint Deserialize(Stream stream, MissionPoint instance, bool isDelta)
public MissionPoint DeserializeLengthDelimited(Stream stream, MissionPoint instance, bool isDelta)
public MissionPoint DeserializeLength(Stream stream, int length, MissionPoint instance, bool isDelta)
public void SerializeDelta(Stream stream, MissionPoint instance, MissionPoint previous)
public void Serialize(Stream stream, MissionPoint instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MissionPoint instance)
public void SerializeLengthDelimited(Stream stream, MissionPoint instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MissionReward : object {
public bool ShouldPool
private bool _disposed
public int itemID
public int itemAmount
public void ResetToPool(MissionReward instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MissionReward instance)
public MissionReward Copy()
public MissionReward Deserialize(Stream stream)
public MissionReward DeserializeLengthDelimited(Stream stream)
public MissionReward DeserializeLength(Stream stream, int length)
public MissionReward Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MissionReward previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MissionReward Deserialize(Byte[] buffer, MissionReward instance, bool isDelta)
public MissionReward Deserialize(Stream stream, MissionReward instance, bool isDelta)
public MissionReward DeserializeLengthDelimited(Stream stream, MissionReward instance, bool isDelta)
public MissionReward DeserializeLength(Stream stream, int length, MissionReward instance, bool isDelta)
public void SerializeDelta(Stream stream, MissionReward instance, MissionReward previous)
public void Serialize(Stream stream, MissionReward instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MissionReward instance)
public void SerializeLengthDelimited(Stream stream, MissionReward instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Missions : object {
public bool ShouldPool
private bool _disposed
public List`1<MissionInstance> missions
public int activeMission
public int protocol
public UInt32 seed
public int saveCreatedTime
public void ResetToPool(Missions instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Missions instance)
public Missions Copy()
public Missions Deserialize(Stream stream)
public Missions DeserializeLengthDelimited(Stream stream)
public Missions DeserializeLength(Stream stream, int length)
public Missions Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Missions previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Missions Deserialize(Byte[] buffer, Missions instance, bool isDelta)
public Missions Deserialize(Stream stream, Missions instance, bool isDelta)
public Missions DeserializeLengthDelimited(Stream stream, Missions instance, bool isDelta)
public Missions DeserializeLength(Stream stream, int length, Missions instance, bool isDelta)
public void SerializeDelta(Stream stream, Missions instance, Missions previous)
public void Serialize(Stream stream, Missions instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Missions instance)
public void SerializeLengthDelimited(Stream stream, Missions instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MixingTable : object {
public bool ShouldPool
private bool _disposed
public float totalMixTime
public float remainingMixTime
public void ResetToPool(MixingTable instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MixingTable instance)
public MixingTable Copy()
public MixingTable Deserialize(Stream stream)
public MixingTable DeserializeLengthDelimited(Stream stream)
public MixingTable DeserializeLength(Stream stream, int length)
public MixingTable Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MixingTable previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MixingTable Deserialize(Byte[] buffer, MixingTable instance, bool isDelta)
public MixingTable Deserialize(Stream stream, MixingTable instance, bool isDelta)
public MixingTable DeserializeLengthDelimited(Stream stream, MixingTable instance, bool isDelta)
public MixingTable DeserializeLength(Stream stream, int length, MixingTable instance, bool isDelta)
public void SerializeDelta(Stream stream, MixingTable instance, MixingTable previous)
public void Serialize(Stream stream, MixingTable instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MixingTable instance)
public void SerializeLengthDelimited(Stream stream, MixingTable instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.MLRS : object {
public bool ShouldPool
private bool _disposed
public Vector3 targetPos
public Vector3 curHitPos
public NetworkableId rocketStorageID
public NetworkableId dashboardStorageID
public UInt32 ammoCount
public void ResetToPool(MLRS instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(MLRS instance)
public MLRS Copy()
public MLRS Deserialize(Stream stream)
public MLRS DeserializeLengthDelimited(Stream stream)
public MLRS DeserializeLength(Stream stream, int length)
public MLRS Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MLRS previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public MLRS Deserialize(Byte[] buffer, MLRS instance, bool isDelta)
public MLRS Deserialize(Stream stream, MLRS instance, bool isDelta)
public MLRS DeserializeLengthDelimited(Stream stream, MLRS instance, bool isDelta)
public MLRS DeserializeLength(Stream stream, int length, MLRS instance, bool isDelta)
public void SerializeDelta(Stream stream, MLRS instance, MLRS previous)
public void Serialize(Stream stream, MLRS instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MLRS instance)
public void SerializeLengthDelimited(Stream stream, MLRS instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Modifier : object {
public bool ShouldPool
private bool _disposed
public int type
public int source
public float value
public float timeRemaing
public float duration
public void ResetToPool(Modifier instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Modifier instance)
public Modifier Copy()
public Modifier Deserialize(Stream stream)
public Modifier DeserializeLengthDelimited(Stream stream)
public Modifier DeserializeLength(Stream stream, int length)
public Modifier Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Modifier previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Modifier Deserialize(Byte[] buffer, Modifier instance, bool isDelta)
public Modifier Deserialize(Stream stream, Modifier instance, bool isDelta)
public Modifier DeserializeLengthDelimited(Stream stream, Modifier instance, bool isDelta)
public Modifier DeserializeLength(Stream stream, int length, Modifier instance, bool isDelta)
public void SerializeDelta(Stream stream, Modifier instance, Modifier previous)
public void Serialize(Stream stream, Modifier instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Modifier instance)
public void SerializeLengthDelimited(Stream stream, Modifier instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ModularCar : object {
public bool ShouldPool
private bool _disposed
public float steerAngle
public float driveWheelVel
public float throttleInput
public float brakeInput
public NetworkableId fuelStorageID
public float fuelFraction
public bool hasLock
public string lockCode
public List`1<ulong> whitelistUsers
public void ResetToPool(ModularCar instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ModularCar instance)
public ModularCar Copy()
public ModularCar Deserialize(Stream stream)
public ModularCar DeserializeLengthDelimited(Stream stream)
public ModularCar DeserializeLength(Stream stream, int length)
public ModularCar Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ModularCar previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ModularCar Deserialize(Byte[] buffer, ModularCar instance, bool isDelta)
public ModularCar Deserialize(Stream stream, ModularCar instance, bool isDelta)
public ModularCar DeserializeLengthDelimited(Stream stream, ModularCar instance, bool isDelta)
public ModularCar DeserializeLength(Stream stream, int length, ModularCar instance, bool isDelta)
public void SerializeDelta(Stream stream, ModularCar instance, ModularCar previous)
public void Serialize(Stream stream, ModularCar instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ModularCar instance)
public void SerializeLengthDelimited(Stream stream, ModularCar instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ModularVehicle : object {
public bool ShouldPool
private bool _disposed
public bool editable
public void ResetToPool(ModularVehicle instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ModularVehicle instance)
public ModularVehicle Copy()
public ModularVehicle Deserialize(Stream stream)
public ModularVehicle DeserializeLengthDelimited(Stream stream)
public ModularVehicle DeserializeLength(Stream stream, int length)
public ModularVehicle Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ModularVehicle previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ModularVehicle Deserialize(Byte[] buffer, ModularVehicle instance, bool isDelta)
public ModularVehicle Deserialize(Stream stream, ModularVehicle instance, bool isDelta)
public ModularVehicle DeserializeLengthDelimited(Stream stream, ModularVehicle instance, bool isDelta)
public ModularVehicle DeserializeLength(Stream stream, int length, ModularVehicle instance, bool isDelta)
public void SerializeDelta(Stream stream, ModularVehicle instance, ModularVehicle previous)
public void Serialize(Stream stream, ModularVehicle instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ModularVehicle instance)
public void SerializeLengthDelimited(Stream stream, ModularVehicle instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ModuleMessage : object {
public bool ShouldPool
private bool _disposed
public UInt32 itemid
public int moduleid
public int type
public Byte[] data
public void ResetToPool(ModuleMessage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ModuleMessage instance)
public ModuleMessage Copy()
public ModuleMessage Deserialize(Stream stream)
public ModuleMessage DeserializeLengthDelimited(Stream stream)
public ModuleMessage DeserializeLength(Stream stream, int length)
public ModuleMessage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ModuleMessage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ModuleMessage Deserialize(Byte[] buffer, ModuleMessage instance, bool isDelta)
public ModuleMessage Deserialize(Stream stream, ModuleMessage instance, bool isDelta)
public ModuleMessage DeserializeLengthDelimited(Stream stream, ModuleMessage instance, bool isDelta)
public ModuleMessage DeserializeLength(Stream stream, int length, ModuleMessage instance, bool isDelta)
public void SerializeDelta(Stream stream, ModuleMessage instance, ModuleMessage previous)
public void Serialize(Stream stream, ModuleMessage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ModuleMessage instance)
public void SerializeLengthDelimited(Stream stream, ModuleMessage instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Motorboat : object {
public bool ShouldPool
private bool _disposed
public NetworkableId storageid
public NetworkableId fuelStorageID
public void ResetToPool(Motorboat instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Motorboat instance)
public Motorboat Copy()
public Motorboat Deserialize(Stream stream)
public Motorboat DeserializeLengthDelimited(Stream stream)
public Motorboat DeserializeLength(Stream stream, int length)
public Motorboat Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Motorboat previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Motorboat Deserialize(Byte[] buffer, Motorboat instance, bool isDelta)
public Motorboat Deserialize(Stream stream, Motorboat instance, bool isDelta)
public Motorboat DeserializeLengthDelimited(Stream stream, Motorboat instance, bool isDelta)
public Motorboat DeserializeLength(Stream stream, int length, Motorboat instance, bool isDelta)
public void SerializeDelta(Stream stream, Motorboat instance, Motorboat previous)
public void Serialize(Stream stream, Motorboat instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Motorboat instance)
public void SerializeLengthDelimited(Stream stream, Motorboat instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.NeonSign : object {
public bool ShouldPool
private bool _disposed
public List`1<Lights> frameLighting
public int currentFrame
public float animationSpeed
public void ResetToPool(NeonSign instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(NeonSign instance)
public NeonSign Copy()
public NeonSign Deserialize(Stream stream)
public NeonSign DeserializeLengthDelimited(Stream stream)
public NeonSign DeserializeLength(Stream stream, int length)
public NeonSign Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, NeonSign previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public NeonSign Deserialize(Byte[] buffer, NeonSign instance, bool isDelta)
public NeonSign Deserialize(Stream stream, NeonSign instance, bool isDelta)
public NeonSign DeserializeLengthDelimited(Stream stream, NeonSign instance, bool isDelta)
public NeonSign DeserializeLength(Stream stream, int length, NeonSign instance, bool isDelta)
public void SerializeDelta(Stream stream, NeonSign instance, NeonSign previous)
public void Serialize(Stream stream, NeonSign instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(NeonSign instance)
public void SerializeLengthDelimited(Stream stream, NeonSign instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ObjectiveStatus : object {
public bool ShouldPool
private bool _disposed
public bool started
public bool completed
public bool failed
public int genericInt1
public float genericFloat1
public void ResetToPool(ObjectiveStatus instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ObjectiveStatus instance)
public ObjectiveStatus Copy()
public ObjectiveStatus Deserialize(Stream stream)
public ObjectiveStatus DeserializeLengthDelimited(Stream stream)
public ObjectiveStatus DeserializeLength(Stream stream, int length)
public ObjectiveStatus Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ObjectiveStatus previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ObjectiveStatus Deserialize(Byte[] buffer, ObjectiveStatus instance, bool isDelta)
public ObjectiveStatus Deserialize(Stream stream, ObjectiveStatus instance, bool isDelta)
public ObjectiveStatus DeserializeLengthDelimited(Stream stream, ObjectiveStatus instance, bool isDelta)
public ObjectiveStatus DeserializeLength(Stream stream, int length, ObjectiveStatus instance, bool isDelta)
public void SerializeDelta(Stream stream, ObjectiveStatus instance, ObjectiveStatus previous)
public void Serialize(Stream stream, ObjectiveStatus instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ObjectiveStatus instance)
public void SerializeLengthDelimited(Stream stream, ObjectiveStatus instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.OwnerInfo : object {
public bool ShouldPool
private bool _disposed
public ulong steamid
public void ResetToPool(OwnerInfo instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(OwnerInfo instance)
public OwnerInfo Copy()
public OwnerInfo Deserialize(Stream stream)
public OwnerInfo DeserializeLengthDelimited(Stream stream)
public OwnerInfo DeserializeLength(Stream stream, int length)
public OwnerInfo Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, OwnerInfo previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public OwnerInfo Deserialize(Byte[] buffer, OwnerInfo instance, bool isDelta)
public OwnerInfo Deserialize(Stream stream, OwnerInfo instance, bool isDelta)
public OwnerInfo DeserializeLengthDelimited(Stream stream, OwnerInfo instance, bool isDelta)
public OwnerInfo DeserializeLength(Stream stream, int length, OwnerInfo instance, bool isDelta)
public void SerializeDelta(Stream stream, OwnerInfo instance, OwnerInfo previous)
public void Serialize(Stream stream, OwnerInfo instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(OwnerInfo instance)
public void SerializeLengthDelimited(Stream stream, OwnerInfo instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PaintableSign : object {
public bool ShouldPool
private bool _disposed
public List`1<UInt32> crcs
public List`1<ulong> editHistory
public void ResetToPool(PaintableSign instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PaintableSign instance)
public PaintableSign Copy()
public PaintableSign Deserialize(Stream stream)
public PaintableSign DeserializeLengthDelimited(Stream stream)
public PaintableSign DeserializeLength(Stream stream, int length)
public PaintableSign Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PaintableSign previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PaintableSign Deserialize(Byte[] buffer, PaintableSign instance, bool isDelta)
public PaintableSign Deserialize(Stream stream, PaintableSign instance, bool isDelta)
public PaintableSign DeserializeLengthDelimited(Stream stream, PaintableSign instance, bool isDelta)
public PaintableSign DeserializeLength(Stream stream, int length, PaintableSign instance, bool isDelta)
public void SerializeDelta(Stream stream, PaintableSign instance, PaintableSign previous)
public void Serialize(Stream stream, PaintableSign instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PaintableSign instance)
public void SerializeLengthDelimited(Stream stream, PaintableSign instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PaintedItem : object {
public bool ShouldPool
private bool _disposed
public UInt32 imageCrc
public ulong editedBy
public void ResetToPool(PaintedItem instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PaintedItem instance)
public PaintedItem Copy()
public PaintedItem Deserialize(Stream stream)
public PaintedItem DeserializeLengthDelimited(Stream stream)
public PaintedItem DeserializeLength(Stream stream, int length)
public PaintedItem Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PaintedItem previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PaintedItem Deserialize(Byte[] buffer, PaintedItem instance, bool isDelta)
public PaintedItem Deserialize(Stream stream, PaintedItem instance, bool isDelta)
public PaintedItem DeserializeLengthDelimited(Stream stream, PaintedItem instance, bool isDelta)
public PaintedItem DeserializeLength(Stream stream, int length, PaintedItem instance, bool isDelta)
public void SerializeDelta(Stream stream, PaintedItem instance, PaintedItem previous)
public void Serialize(Stream stream, PaintedItem instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PaintedItem instance)
public void SerializeLengthDelimited(Stream stream, PaintedItem instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ParentInfo : object {
public bool ShouldPool
private bool _disposed
public NetworkableId uid
public UInt32 bone
public void ResetToPool(ParentInfo instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ParentInfo instance)
public ParentInfo Copy()
public ParentInfo Deserialize(Stream stream)
public ParentInfo DeserializeLengthDelimited(Stream stream)
public ParentInfo DeserializeLength(Stream stream, int length)
public ParentInfo Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ParentInfo previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ParentInfo Deserialize(Byte[] buffer, ParentInfo instance, bool isDelta)
public ParentInfo Deserialize(Stream stream, ParentInfo instance, bool isDelta)
public ParentInfo DeserializeLengthDelimited(Stream stream, ParentInfo instance, bool isDelta)
public ParentInfo DeserializeLength(Stream stream, int length, ParentInfo instance, bool isDelta)
public void SerializeDelta(Stream stream, ParentInfo instance, ParentInfo previous)
public void Serialize(Stream stream, ParentInfo instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ParentInfo instance)
public void SerializeLengthDelimited(Stream stream, ParentInfo instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PathData : object {
public bool ShouldPool
private bool _disposed
public string name
public bool spline
public bool start
public bool end
public float width
public float innerPadding
public float outerPadding
public float innerFade
public float outerFade
public float randomScale
public float meshOffset
public float terrainOffset
public int splat
public int topology
public List`1<VectorData> nodes
public int hierarchy
public void ResetToPool(PathData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PathData instance)
public PathData Copy()
public PathData Deserialize(Stream stream)
public PathData DeserializeLengthDelimited(Stream stream)
public PathData DeserializeLength(Stream stream, int length)
public PathData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PathData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PathData Deserialize(Byte[] buffer, PathData instance, bool isDelta)
public PathData Deserialize(Stream stream, PathData instance, bool isDelta)
public PathData DeserializeLengthDelimited(Stream stream, PathData instance, bool isDelta)
public PathData DeserializeLength(Stream stream, int length, PathData instance, bool isDelta)
public void SerializeDelta(Stream stream, PathData instance, PathData previous)
public void Serialize(Stream stream, PathData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PathData instance)
public void SerializeLengthDelimited(Stream stream, PathData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PatternFirework : object {
public bool ShouldPool
private bool _disposed
public Design design
public int shellFuseLength
public void ResetToPool(PatternFirework instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PatternFirework instance)
public PatternFirework Copy()
public PatternFirework Deserialize(Stream stream)
public PatternFirework DeserializeLengthDelimited(Stream stream)
public PatternFirework DeserializeLength(Stream stream, int length)
public PatternFirework Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PatternFirework previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PatternFirework Deserialize(Byte[] buffer, PatternFirework instance, bool isDelta)
public PatternFirework Deserialize(Stream stream, PatternFirework instance, bool isDelta)
public PatternFirework DeserializeLengthDelimited(Stream stream, PatternFirework instance, bool isDelta)
public PatternFirework DeserializeLength(Stream stream, int length, PatternFirework instance, bool isDelta)
public void SerializeDelta(Stream stream, PatternFirework instance, PatternFirework previous)
public void Serialize(Stream stream, PatternFirework instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PatternFirework instance)
public void SerializeLengthDelimited(Stream stream, PatternFirework instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PersistantPlayer : object {
public bool ShouldPool
private bool _disposed
public List`1<int> unlockedItems
public int protocolVersion
public void ResetToPool(PersistantPlayer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PersistantPlayer instance)
public PersistantPlayer Copy()
public PersistantPlayer Deserialize(Stream stream)
public PersistantPlayer DeserializeLengthDelimited(Stream stream)
public PersistantPlayer DeserializeLength(Stream stream, int length)
public PersistantPlayer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PersistantPlayer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PersistantPlayer Deserialize(Byte[] buffer, PersistantPlayer instance, bool isDelta)
public PersistantPlayer Deserialize(Stream stream, PersistantPlayer instance, bool isDelta)
public PersistantPlayer DeserializeLengthDelimited(Stream stream, PersistantPlayer instance, bool isDelta)
public PersistantPlayer DeserializeLength(Stream stream, int length, PersistantPlayer instance, bool isDelta)
public void SerializeDelta(Stream stream, PersistantPlayer instance, PersistantPlayer previous)
public void Serialize(Stream stream, PersistantPlayer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PersistantPlayer instance)
public void SerializeLengthDelimited(Stream stream, PersistantPlayer instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PhoneDirectory : object {
public bool ShouldPool
private bool _disposed
public List`1<DirectoryEntry> entries
public bool atEnd
public void ResetToPool(PhoneDirectory instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PhoneDirectory instance)
public PhoneDirectory Copy()
public PhoneDirectory Deserialize(Stream stream)
public PhoneDirectory DeserializeLengthDelimited(Stream stream)
public PhoneDirectory DeserializeLength(Stream stream, int length)
public PhoneDirectory Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PhoneDirectory previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PhoneDirectory Deserialize(Byte[] buffer, PhoneDirectory instance, bool isDelta)
public PhoneDirectory Deserialize(Stream stream, PhoneDirectory instance, bool isDelta)
public PhoneDirectory DeserializeLengthDelimited(Stream stream, PhoneDirectory instance, bool isDelta)
public PhoneDirectory DeserializeLength(Stream stream, int length, PhoneDirectory instance, bool isDelta)
public void SerializeDelta(Stream stream, PhoneDirectory instance, PhoneDirectory previous)
public void Serialize(Stream stream, PhoneDirectory instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PhoneDirectory instance)
public void SerializeLengthDelimited(Stream stream, PhoneDirectory instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Photo : object {
public bool ShouldPool
private bool _disposed
public ulong photographerSteamId
public UInt32 imageCrc
public void ResetToPool(Photo instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Photo instance)
public Photo Copy()
public Photo Deserialize(Stream stream)
public Photo DeserializeLengthDelimited(Stream stream)
public Photo DeserializeLength(Stream stream, int length)
public Photo Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Photo previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Photo Deserialize(Byte[] buffer, Photo instance, bool isDelta)
public Photo Deserialize(Stream stream, Photo instance, bool isDelta)
public Photo DeserializeLengthDelimited(Stream stream, Photo instance, bool isDelta)
public Photo DeserializeLength(Stream stream, int length, Photo instance, bool isDelta)
public void SerializeDelta(Stream stream, Photo instance, Photo previous)
public void Serialize(Stream stream, Photo instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Photo instance)
public void SerializeLengthDelimited(Stream stream, Photo instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PhotoFrame : object {
public bool ShouldPool
private bool _disposed
public NetworkableId photoEntityId
public UInt32 overlayImageCrc
public List`1<ulong> editHistory
public void ResetToPool(PhotoFrame instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PhotoFrame instance)
public PhotoFrame Copy()
public PhotoFrame Deserialize(Stream stream)
public PhotoFrame DeserializeLengthDelimited(Stream stream)
public PhotoFrame DeserializeLength(Stream stream, int length)
public PhotoFrame Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PhotoFrame previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PhotoFrame Deserialize(Byte[] buffer, PhotoFrame instance, bool isDelta)
public PhotoFrame Deserialize(Stream stream, PhotoFrame instance, bool isDelta)
public PhotoFrame DeserializeLengthDelimited(Stream stream, PhotoFrame instance, bool isDelta)
public PhotoFrame DeserializeLength(Stream stream, int length, PhotoFrame instance, bool isDelta)
public void SerializeDelta(Stream stream, PhotoFrame instance, PhotoFrame previous)
public void Serialize(Stream stream, PhotoFrame instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PhotoFrame instance)
public void SerializeLengthDelimited(Stream stream, PhotoFrame instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerAttack : object {
public bool ShouldPool
private bool _disposed
public Attack attack
public int projectileID
public void ResetToPool(PlayerAttack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerAttack instance)
public PlayerAttack Copy()
public PlayerAttack Deserialize(Stream stream)
public PlayerAttack DeserializeLengthDelimited(Stream stream)
public PlayerAttack DeserializeLength(Stream stream, int length)
public PlayerAttack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerAttack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerAttack Deserialize(Byte[] buffer, PlayerAttack instance, bool isDelta)
public PlayerAttack Deserialize(Stream stream, PlayerAttack instance, bool isDelta)
public PlayerAttack DeserializeLengthDelimited(Stream stream, PlayerAttack instance, bool isDelta)
public PlayerAttack DeserializeLength(Stream stream, int length, PlayerAttack instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerAttack instance, PlayerAttack previous)
public void Serialize(Stream stream, PlayerAttack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerAttack instance)
public void SerializeLengthDelimited(Stream stream, PlayerAttack instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerDetectedAIEventData : object {
public bool ShouldPool
private bool _disposed
public float range
public void ResetToPool(PlayerDetectedAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerDetectedAIEventData instance)
public PlayerDetectedAIEventData Copy()
public PlayerDetectedAIEventData Deserialize(Stream stream)
public PlayerDetectedAIEventData DeserializeLengthDelimited(Stream stream)
public PlayerDetectedAIEventData DeserializeLength(Stream stream, int length)
public PlayerDetectedAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerDetectedAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerDetectedAIEventData Deserialize(Byte[] buffer, PlayerDetectedAIEventData instance, bool isDelta)
public PlayerDetectedAIEventData Deserialize(Stream stream, PlayerDetectedAIEventData instance, bool isDelta)
public PlayerDetectedAIEventData DeserializeLengthDelimited(Stream stream, PlayerDetectedAIEventData instance, bool isDelta)
public PlayerDetectedAIEventData DeserializeLength(Stream stream, int length, PlayerDetectedAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerDetectedAIEventData instance, PlayerDetectedAIEventData previous)
public void Serialize(Stream stream, PlayerDetectedAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerDetectedAIEventData instance)
public void SerializeLengthDelimited(Stream stream, PlayerDetectedAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerInventory : object {
public bool ShouldPool
private bool _disposed
public ItemContainer invMain
public ItemContainer invBelt
public ItemContainer invWear
public void ResetToPool(PlayerInventory instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerInventory instance)
public PlayerInventory Copy()
public PlayerInventory Deserialize(Stream stream)
public PlayerInventory DeserializeLengthDelimited(Stream stream)
public PlayerInventory DeserializeLength(Stream stream, int length)
public PlayerInventory Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerInventory previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerInventory Deserialize(Byte[] buffer, PlayerInventory instance, bool isDelta)
public PlayerInventory Deserialize(Stream stream, PlayerInventory instance, bool isDelta)
public PlayerInventory DeserializeLengthDelimited(Stream stream, PlayerInventory instance, bool isDelta)
public PlayerInventory DeserializeLength(Stream stream, int length, PlayerInventory instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerInventory instance, PlayerInventory previous)
public void Serialize(Stream stream, PlayerInventory instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerInventory instance)
public void SerializeLengthDelimited(Stream stream, PlayerInventory instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerLifeStory : object {
public bool ShouldPool
private bool _disposed
public float secondsAlive
public float metersWalked
public float metersRun
public float secondsSleeping
public UInt32 timeBorn
public UInt32 timeDied
public float secondsWilderness
public float secondsSwimming
public float secondsInBase
public float secondsInMonument
public float secondsFlying
public float secondsBoating
public float secondsDriving
public float totalDamageTaken
public float totalHealing
public DeathInfo deathInfo
public List`1<WeaponStats> weaponStats
public int killedPlayers
public int killedScientists
public int killedAnimals
public List`1<GenericStat> genericStats
public void ResetToPool(PlayerLifeStory instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerLifeStory instance)
public PlayerLifeStory Copy()
public PlayerLifeStory Deserialize(Stream stream)
public PlayerLifeStory DeserializeLengthDelimited(Stream stream)
public PlayerLifeStory DeserializeLength(Stream stream, int length)
public PlayerLifeStory Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerLifeStory previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerLifeStory Deserialize(Byte[] buffer, PlayerLifeStory instance, bool isDelta)
public PlayerLifeStory Deserialize(Stream stream, PlayerLifeStory instance, bool isDelta)
public PlayerLifeStory DeserializeLengthDelimited(Stream stream, PlayerLifeStory instance, bool isDelta)
public PlayerLifeStory DeserializeLength(Stream stream, int length, PlayerLifeStory instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerLifeStory instance, PlayerLifeStory previous)
public void Serialize(Stream stream, PlayerLifeStory instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerLifeStory instance)
public void SerializeLengthDelimited(Stream stream, PlayerLifeStory instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerMetabolism : object {
public bool ShouldPool
private bool _disposed
public float health
public float calories
public float hydration
public float heartrate
public float temperature
public float poison
public float radiation_level
public float wetness
public float dirtyness
public float oxygen
public float bleeding
public float radiation_poisoning
public float comfort
public float pending_health
public void ResetToPool(PlayerMetabolism instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerMetabolism instance)
public PlayerMetabolism Copy()
public PlayerMetabolism Deserialize(Stream stream)
public PlayerMetabolism DeserializeLengthDelimited(Stream stream)
public PlayerMetabolism DeserializeLength(Stream stream, int length)
public PlayerMetabolism Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerMetabolism previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerMetabolism Deserialize(Byte[] buffer, PlayerMetabolism instance, bool isDelta)
public PlayerMetabolism Deserialize(Stream stream, PlayerMetabolism instance, bool isDelta)
public PlayerMetabolism DeserializeLengthDelimited(Stream stream, PlayerMetabolism instance, bool isDelta)
public PlayerMetabolism DeserializeLength(Stream stream, int length, PlayerMetabolism instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerMetabolism instance, PlayerMetabolism previous)
public void Serialize(Stream stream, PlayerMetabolism instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerMetabolism instance)
public void SerializeLengthDelimited(Stream stream, PlayerMetabolism instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerModifiers : object {
public bool ShouldPool
private bool _disposed
public List`1<Modifier> modifiers
public void ResetToPool(PlayerModifiers instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerModifiers instance)
public PlayerModifiers Copy()
public PlayerModifiers Deserialize(Stream stream)
public PlayerModifiers DeserializeLengthDelimited(Stream stream)
public PlayerModifiers DeserializeLength(Stream stream, int length)
public PlayerModifiers Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerModifiers previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerModifiers Deserialize(Byte[] buffer, PlayerModifiers instance, bool isDelta)
public PlayerModifiers Deserialize(Stream stream, PlayerModifiers instance, bool isDelta)
public PlayerModifiers DeserializeLengthDelimited(Stream stream, PlayerModifiers instance, bool isDelta)
public PlayerModifiers DeserializeLength(Stream stream, int length, PlayerModifiers instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerModifiers instance, PlayerModifiers previous)
public void Serialize(Stream stream, PlayerModifiers instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerModifiers instance)
public void SerializeLengthDelimited(Stream stream, PlayerModifiers instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerNameID : object {
public bool ShouldPool
private bool _disposed
public string username
public ulong userid
public void ResetToPool(PlayerNameID instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerNameID instance)
public PlayerNameID Copy()
public PlayerNameID Deserialize(Stream stream)
public PlayerNameID DeserializeLengthDelimited(Stream stream)
public PlayerNameID DeserializeLength(Stream stream, int length)
public PlayerNameID Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerNameID previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerNameID Deserialize(Byte[] buffer, PlayerNameID instance, bool isDelta)
public PlayerNameID Deserialize(Stream stream, PlayerNameID instance, bool isDelta)
public PlayerNameID DeserializeLengthDelimited(Stream stream, PlayerNameID instance, bool isDelta)
public PlayerNameID DeserializeLength(Stream stream, int length, PlayerNameID instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerNameID instance, PlayerNameID previous)
public void Serialize(Stream stream, PlayerNameID instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerNameID instance)
public void SerializeLengthDelimited(Stream stream, PlayerNameID instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerProjectileAttack : object {
public bool ShouldPool
private bool _disposed
public PlayerAttack playerAttack
public Vector3 hitVelocity
public float hitDistance
public float travelTime
public void ResetToPool(PlayerProjectileAttack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerProjectileAttack instance)
public PlayerProjectileAttack Copy()
public PlayerProjectileAttack Deserialize(Stream stream)
public PlayerProjectileAttack DeserializeLengthDelimited(Stream stream)
public PlayerProjectileAttack DeserializeLength(Stream stream, int length)
public PlayerProjectileAttack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerProjectileAttack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerProjectileAttack Deserialize(Byte[] buffer, PlayerProjectileAttack instance, bool isDelta)
public PlayerProjectileAttack Deserialize(Stream stream, PlayerProjectileAttack instance, bool isDelta)
public PlayerProjectileAttack DeserializeLengthDelimited(Stream stream, PlayerProjectileAttack instance, bool isDelta)
public PlayerProjectileAttack DeserializeLength(Stream stream, int length, PlayerProjectileAttack instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerProjectileAttack instance, PlayerProjectileAttack previous)
public void Serialize(Stream stream, PlayerProjectileAttack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerProjectileAttack instance)
public void SerializeLengthDelimited(Stream stream, PlayerProjectileAttack instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerProjectileRicochet : object {
public bool ShouldPool
private bool _disposed
public int projectileID
public Vector3 hitPosition
public Vector3 inVelocity
public Vector3 outVelocity
public Vector3 hitNormal
public float travelTime
public void ResetToPool(PlayerProjectileRicochet instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerProjectileRicochet instance)
public PlayerProjectileRicochet Copy()
public PlayerProjectileRicochet Deserialize(Stream stream)
public PlayerProjectileRicochet DeserializeLengthDelimited(Stream stream)
public PlayerProjectileRicochet DeserializeLength(Stream stream, int length)
public PlayerProjectileRicochet Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerProjectileRicochet previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerProjectileRicochet Deserialize(Byte[] buffer, PlayerProjectileRicochet instance, bool isDelta)
public PlayerProjectileRicochet Deserialize(Stream stream, PlayerProjectileRicochet instance, bool isDelta)
public PlayerProjectileRicochet DeserializeLengthDelimited(Stream stream, PlayerProjectileRicochet instance, bool isDelta)
public PlayerProjectileRicochet DeserializeLength(Stream stream, int length, PlayerProjectileRicochet instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerProjectileRicochet instance, PlayerProjectileRicochet previous)
public void Serialize(Stream stream, PlayerProjectileRicochet instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerProjectileRicochet instance)
public void SerializeLengthDelimited(Stream stream, PlayerProjectileRicochet instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerProjectileUpdate : object {
public bool ShouldPool
private bool _disposed
public int projectileID
public Vector3 curPosition
public Vector3 curVelocity
public float travelTime
public void ResetToPool(PlayerProjectileUpdate instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerProjectileUpdate instance)
public PlayerProjectileUpdate Copy()
public PlayerProjectileUpdate Deserialize(Stream stream)
public PlayerProjectileUpdate DeserializeLengthDelimited(Stream stream)
public PlayerProjectileUpdate DeserializeLength(Stream stream, int length)
public PlayerProjectileUpdate Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerProjectileUpdate previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerProjectileUpdate Deserialize(Byte[] buffer, PlayerProjectileUpdate instance, bool isDelta)
public PlayerProjectileUpdate Deserialize(Stream stream, PlayerProjectileUpdate instance, bool isDelta)
public PlayerProjectileUpdate DeserializeLengthDelimited(Stream stream, PlayerProjectileUpdate instance, bool isDelta)
public PlayerProjectileUpdate DeserializeLength(Stream stream, int length, PlayerProjectileUpdate instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerProjectileUpdate instance, PlayerProjectileUpdate previous)
public void Serialize(Stream stream, PlayerProjectileUpdate instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerProjectileUpdate instance)
public void SerializeLengthDelimited(Stream stream, PlayerProjectileUpdate instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerState : object {
public bool ShouldPool
private bool _disposed
public double unHostileTimestamp
public List`1<MapNote> pointsOfInterest
public MapNote deathMarker
public Missions missions
public List`1<MapNote> pings
public void ResetToPool(PlayerState instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerState instance)
public PlayerState Copy()
public PlayerState Deserialize(Stream stream)
public PlayerState DeserializeLengthDelimited(Stream stream)
public PlayerState DeserializeLength(Stream stream, int length)
public PlayerState Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerState previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerState Deserialize(Byte[] buffer, PlayerState instance, bool isDelta)
public PlayerState Deserialize(Stream stream, PlayerState instance, bool isDelta)
public PlayerState DeserializeLengthDelimited(Stream stream, PlayerState instance, bool isDelta)
public PlayerState DeserializeLength(Stream stream, int length, PlayerState instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerState instance, PlayerState previous)
public void Serialize(Stream stream, PlayerState instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerState instance)
public void SerializeLengthDelimited(Stream stream, PlayerState instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerTeam : object {
public bool ShouldPool
private bool _disposed
public ulong teamID
public string teamName
public ulong teamLeader
public List`1<TeamMember> members
public float teamLifetime
public List`1<MapNote> leaderMapNotes
public List`1<MapNote> teamPings
public void ResetToPool(PlayerTeam instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerTeam instance)
public PlayerTeam Copy()
public PlayerTeam Deserialize(Stream stream)
public PlayerTeam DeserializeLengthDelimited(Stream stream)
public PlayerTeam DeserializeLength(Stream stream, int length)
public PlayerTeam Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerTeam previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerTeam Deserialize(Byte[] buffer, PlayerTeam instance, bool isDelta)
public PlayerTeam Deserialize(Stream stream, PlayerTeam instance, bool isDelta)
public PlayerTeam DeserializeLengthDelimited(Stream stream, PlayerTeam instance, bool isDelta)
public PlayerTeam DeserializeLength(Stream stream, int length, PlayerTeam instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerTeam instance, PlayerTeam previous)
public void Serialize(Stream stream, PlayerTeam instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerTeam instance)
public void SerializeLengthDelimited(Stream stream, PlayerTeam instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PlayerUpdateLoot : object {
public bool ShouldPool
private bool _disposed
public ItemId itemID
public NetworkableId entityID
public List`1<ItemContainer> containers
public void ResetToPool(PlayerUpdateLoot instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PlayerUpdateLoot instance)
public PlayerUpdateLoot Copy()
public PlayerUpdateLoot Deserialize(Stream stream)
public PlayerUpdateLoot DeserializeLengthDelimited(Stream stream)
public PlayerUpdateLoot DeserializeLength(Stream stream, int length)
public PlayerUpdateLoot Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerUpdateLoot previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PlayerUpdateLoot Deserialize(Byte[] buffer, PlayerUpdateLoot instance, bool isDelta)
public PlayerUpdateLoot Deserialize(Stream stream, PlayerUpdateLoot instance, bool isDelta)
public PlayerUpdateLoot DeserializeLengthDelimited(Stream stream, PlayerUpdateLoot instance, bool isDelta)
public PlayerUpdateLoot DeserializeLength(Stream stream, int length, PlayerUpdateLoot instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerUpdateLoot instance, PlayerUpdateLoot previous)
public void Serialize(Stream stream, PlayerUpdateLoot instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerUpdateLoot instance)
public void SerializeLengthDelimited(Stream stream, PlayerUpdateLoot instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PrefabData : object {
public bool ShouldPool
private bool _disposed
public string category
public UInt32 id
public VectorData position
public VectorData rotation
public VectorData scale
public void ResetToPool(PrefabData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PrefabData instance)
public PrefabData Copy()
public PrefabData Deserialize(Stream stream)
public PrefabData DeserializeLengthDelimited(Stream stream)
public PrefabData DeserializeLength(Stream stream, int length)
public PrefabData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PrefabData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PrefabData Deserialize(Byte[] buffer, PrefabData instance, bool isDelta)
public PrefabData Deserialize(Stream stream, PrefabData instance, bool isDelta)
public PrefabData DeserializeLengthDelimited(Stream stream, PrefabData instance, bool isDelta)
public PrefabData DeserializeLength(Stream stream, int length, PrefabData instance, bool isDelta)
public void SerializeDelta(Stream stream, PrefabData instance, PrefabData previous)
public void Serialize(Stream stream, PrefabData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PrefabData instance)
public void SerializeLengthDelimited(Stream stream, PrefabData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ProceduralDungeon : object {
public bool ShouldPool
private bool _disposed
public UInt32 seed
public NetworkableId exitPortalID
public Vector3 mapOffset
public void ResetToPool(ProceduralDungeon instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ProceduralDungeon instance)
public ProceduralDungeon Copy()
public ProceduralDungeon Deserialize(Stream stream)
public ProceduralDungeon DeserializeLengthDelimited(Stream stream)
public ProceduralDungeon DeserializeLength(Stream stream, int length)
public ProceduralDungeon Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ProceduralDungeon previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ProceduralDungeon Deserialize(Byte[] buffer, ProceduralDungeon instance, bool isDelta)
public ProceduralDungeon Deserialize(Stream stream, ProceduralDungeon instance, bool isDelta)
public ProceduralDungeon DeserializeLengthDelimited(Stream stream, ProceduralDungeon instance, bool isDelta)
public ProceduralDungeon DeserializeLength(Stream stream, int length, ProceduralDungeon instance, bool isDelta)
public void SerializeDelta(Stream stream, ProceduralDungeon instance, ProceduralDungeon previous)
public void Serialize(Stream stream, ProceduralDungeon instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ProceduralDungeon instance)
public void SerializeLengthDelimited(Stream stream, ProceduralDungeon instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ProjectileShoot : object {
public bool ShouldPool
private bool _disposed
public int ammoType
public List`1<Projectile> projectiles
public void ResetToPool(ProjectileShoot instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ProjectileShoot instance)
public ProjectileShoot Copy()
public ProjectileShoot Deserialize(Stream stream)
public ProjectileShoot DeserializeLengthDelimited(Stream stream)
public ProjectileShoot DeserializeLength(Stream stream, int length)
public ProjectileShoot Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ProjectileShoot previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ProjectileShoot Deserialize(Byte[] buffer, ProjectileShoot instance, bool isDelta)
public ProjectileShoot Deserialize(Stream stream, ProjectileShoot instance, bool isDelta)
public ProjectileShoot DeserializeLengthDelimited(Stream stream, ProjectileShoot instance, bool isDelta)
public ProjectileShoot DeserializeLength(Stream stream, int length, ProjectileShoot instance, bool isDelta)
public void SerializeDelta(Stream stream, ProjectileShoot instance, ProjectileShoot previous)
public void Serialize(Stream stream, ProjectileShoot instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ProjectileShoot instance)
public void SerializeLengthDelimited(Stream stream, ProjectileShoot instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.PuzzleReset : object {
public bool ShouldPool
private bool _disposed
public bool playerBlocksReset
public float playerDetectionRadius
public Vector3 playerDetectionOrigin
public float timeBetweenResets
public bool scaleWithServerPopulation
public void ResetToPool(PuzzleReset instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(PuzzleReset instance)
public PuzzleReset Copy()
public PuzzleReset Deserialize(Stream stream)
public PuzzleReset DeserializeLengthDelimited(Stream stream)
public PuzzleReset DeserializeLength(Stream stream, int length)
public PuzzleReset Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PuzzleReset previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public PuzzleReset Deserialize(Byte[] buffer, PuzzleReset instance, bool isDelta)
public PuzzleReset Deserialize(Stream stream, PuzzleReset instance, bool isDelta)
public PuzzleReset DeserializeLengthDelimited(Stream stream, PuzzleReset instance, bool isDelta)
public PuzzleReset DeserializeLength(Stream stream, int length, PuzzleReset instance, bool isDelta)
public void SerializeDelta(Stream stream, PuzzleReset instance, PuzzleReset previous)
public void Serialize(Stream stream, PuzzleReset instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PuzzleReset instance)
public void SerializeLengthDelimited(Stream stream, PuzzleReset instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.RadioList : object {
public bool ShouldPool
private bool _disposed
public List`1<string> stationUrls
public List`1<string> stationNames
public void ResetToPool(RadioList instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(RadioList instance)
public RadioList Copy()
public RadioList Deserialize(Stream stream)
public RadioList DeserializeLengthDelimited(Stream stream)
public RadioList DeserializeLength(Stream stream, int length)
public RadioList Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, RadioList previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public RadioList Deserialize(Byte[] buffer, RadioList instance, bool isDelta)
public RadioList Deserialize(Stream stream, RadioList instance, bool isDelta)
public RadioList DeserializeLengthDelimited(Stream stream, RadioList instance, bool isDelta)
public RadioList DeserializeLength(Stream stream, int length, RadioList instance, bool isDelta)
public void SerializeDelta(Stream stream, RadioList instance, RadioList previous)
public void Serialize(Stream stream, RadioList instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(RadioList instance)
public void SerializeLengthDelimited(Stream stream, RadioList instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.RCEntity : object {
public bool ShouldPool
private bool _disposed
public Vector3 aim
public float zoom
public string identifier
public string password
public void ResetToPool(RCEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(RCEntity instance)
public RCEntity Copy()
public RCEntity Deserialize(Stream stream)
public RCEntity DeserializeLengthDelimited(Stream stream)
public RCEntity DeserializeLength(Stream stream, int length)
public RCEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, RCEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public RCEntity Deserialize(Byte[] buffer, RCEntity instance, bool isDelta)
public RCEntity Deserialize(Stream stream, RCEntity instance, bool isDelta)
public RCEntity DeserializeLengthDelimited(Stream stream, RCEntity instance, bool isDelta)
public RCEntity DeserializeLength(Stream stream, int length, RCEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, RCEntity instance, RCEntity previous)
public void Serialize(Stream stream, RCEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(RCEntity instance)
public void SerializeLengthDelimited(Stream stream, RCEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ReclaimManager : object {
public bool ShouldPool
private bool _disposed
public List`1<ReclaimInfo> reclaimEntries
public int lastReclaimID
public void ResetToPool(ReclaimManager instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ReclaimManager instance)
public ReclaimManager Copy()
public ReclaimManager Deserialize(Stream stream)
public ReclaimManager DeserializeLengthDelimited(Stream stream)
public ReclaimManager DeserializeLength(Stream stream, int length)
public ReclaimManager Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ReclaimManager previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ReclaimManager Deserialize(Byte[] buffer, ReclaimManager instance, bool isDelta)
public ReclaimManager Deserialize(Stream stream, ReclaimManager instance, bool isDelta)
public ReclaimManager DeserializeLengthDelimited(Stream stream, ReclaimManager instance, bool isDelta)
public ReclaimManager DeserializeLength(Stream stream, int length, ReclaimManager instance, bool isDelta)
public void SerializeDelta(Stream stream, ReclaimManager instance, ReclaimManager previous)
public void Serialize(Stream stream, ReclaimManager instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ReclaimManager instance)
public void SerializeLengthDelimited(Stream stream, ReclaimManager instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ReclaimTerminal : object {
public bool ShouldPool
private bool _disposed
public int itemCount
public void ResetToPool(ReclaimTerminal instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ReclaimTerminal instance)
public ReclaimTerminal Copy()
public ReclaimTerminal Deserialize(Stream stream)
public ReclaimTerminal DeserializeLengthDelimited(Stream stream)
public ReclaimTerminal DeserializeLength(Stream stream, int length)
public ReclaimTerminal Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ReclaimTerminal previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ReclaimTerminal Deserialize(Byte[] buffer, ReclaimTerminal instance, bool isDelta)
public ReclaimTerminal Deserialize(Stream stream, ReclaimTerminal instance, bool isDelta)
public ReclaimTerminal DeserializeLengthDelimited(Stream stream, ReclaimTerminal instance, bool isDelta)
public ReclaimTerminal DeserializeLength(Stream stream, int length, ReclaimTerminal instance, bool isDelta)
public void SerializeDelta(Stream stream, ReclaimTerminal instance, ReclaimTerminal previous)
public void Serialize(Stream stream, ReclaimTerminal instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ReclaimTerminal instance)
public void SerializeLengthDelimited(Stream stream, ReclaimTerminal instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.RelationshipManager : object {
public bool ShouldPool
private bool _disposed
public ulong lastTeamIndex
public List`1<PlayerTeam> teamList
public int maxTeamSize
public List`1<PlayerRelationships> relationships
public void ResetToPool(RelationshipManager instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(RelationshipManager instance)
public RelationshipManager Copy()
public RelationshipManager Deserialize(Stream stream)
public RelationshipManager DeserializeLengthDelimited(Stream stream)
public RelationshipManager DeserializeLength(Stream stream, int length)
public RelationshipManager Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, RelationshipManager previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public RelationshipManager Deserialize(Byte[] buffer, RelationshipManager instance, bool isDelta)
public RelationshipManager Deserialize(Stream stream, RelationshipManager instance, bool isDelta)
public RelationshipManager DeserializeLengthDelimited(Stream stream, RelationshipManager instance, bool isDelta)
public RelationshipManager DeserializeLength(Stream stream, int length, RelationshipManager instance, bool isDelta)
public void SerializeDelta(Stream stream, RelationshipManager instance, RelationshipManager previous)
public void Serialize(Stream stream, RelationshipManager instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(RelationshipManager instance)
public void SerializeLengthDelimited(Stream stream, RelationshipManager instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ResearchTable : object {
public bool ShouldPool
private bool _disposed
public float researchTimeLeft
public void ResetToPool(ResearchTable instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ResearchTable instance)
public ResearchTable Copy()
public ResearchTable Deserialize(Stream stream)
public ResearchTable DeserializeLengthDelimited(Stream stream)
public ResearchTable DeserializeLength(Stream stream, int length)
public ResearchTable Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ResearchTable previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ResearchTable Deserialize(Byte[] buffer, ResearchTable instance, bool isDelta)
public ResearchTable Deserialize(Stream stream, ResearchTable instance, bool isDelta)
public ResearchTable DeserializeLengthDelimited(Stream stream, ResearchTable instance, bool isDelta)
public ResearchTable DeserializeLength(Stream stream, int length, ResearchTable instance, bool isDelta)
public void SerializeDelta(Stream stream, ResearchTable instance, ResearchTable previous)
public void Serialize(Stream stream, ResearchTable instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ResearchTable instance)
public void SerializeLengthDelimited(Stream stream, ResearchTable instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ResourceExtractor : object {
public bool ShouldPool
private bool _disposed
public ItemContainer fuelContents
public ItemContainer outputContents
public void ResetToPool(ResourceExtractor instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ResourceExtractor instance)
public ResourceExtractor Copy()
public ResourceExtractor Deserialize(Stream stream)
public ResourceExtractor DeserializeLengthDelimited(Stream stream)
public ResourceExtractor DeserializeLength(Stream stream, int length)
public ResourceExtractor Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ResourceExtractor previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ResourceExtractor Deserialize(Byte[] buffer, ResourceExtractor instance, bool isDelta)
public ResourceExtractor Deserialize(Stream stream, ResourceExtractor instance, bool isDelta)
public ResourceExtractor DeserializeLengthDelimited(Stream stream, ResourceExtractor instance, bool isDelta)
public ResourceExtractor DeserializeLength(Stream stream, int length, ResourceExtractor instance, bool isDelta)
public void SerializeDelta(Stream stream, ResourceExtractor instance, ResourceExtractor previous)
public void Serialize(Stream stream, ResourceExtractor instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ResourceExtractor instance)
public void SerializeLengthDelimited(Stream stream, ResourceExtractor instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.RespawnInformation : object {
public bool ShouldPool
private bool _disposed
public List`1<SpawnOptions> spawnOptions
public PlayerLifeStory previousLife
public bool fadeIn
public void ResetToPool(RespawnInformation instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(RespawnInformation instance)
public RespawnInformation Copy()
public RespawnInformation Deserialize(Stream stream)
public RespawnInformation DeserializeLengthDelimited(Stream stream)
public RespawnInformation DeserializeLength(Stream stream, int length)
public RespawnInformation Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, RespawnInformation previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public RespawnInformation Deserialize(Byte[] buffer, RespawnInformation instance, bool isDelta)
public RespawnInformation Deserialize(Stream stream, RespawnInformation instance, bool isDelta)
public RespawnInformation DeserializeLengthDelimited(Stream stream, RespawnInformation instance, bool isDelta)
public RespawnInformation DeserializeLength(Stream stream, int length, RespawnInformation instance, bool isDelta)
public void SerializeDelta(Stream stream, RespawnInformation instance, RespawnInformation previous)
public void Serialize(Stream stream, RespawnInformation instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(RespawnInformation instance)
public void SerializeLengthDelimited(Stream stream, RespawnInformation instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SAMSite : object {
public bool ShouldPool
private bool _disposed
public Vector3 aimDir
public void ResetToPool(SAMSite instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SAMSite instance)
public SAMSite Copy()
public SAMSite Deserialize(Stream stream)
public SAMSite DeserializeLengthDelimited(Stream stream)
public SAMSite DeserializeLength(Stream stream, int length)
public SAMSite Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SAMSite previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SAMSite Deserialize(Byte[] buffer, SAMSite instance, bool isDelta)
public SAMSite Deserialize(Stream stream, SAMSite instance, bool isDelta)
public SAMSite DeserializeLengthDelimited(Stream stream, SAMSite instance, bool isDelta)
public SAMSite DeserializeLength(Stream stream, int length, SAMSite instance, bool isDelta)
public void SerializeDelta(Stream stream, SAMSite instance, SAMSite previous)
public void Serialize(Stream stream, SAMSite instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SAMSite instance)
public void SerializeLengthDelimited(Stream stream, SAMSite instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ServerGib : object {
public bool ShouldPool
private bool _disposed
public string gibName
public void ResetToPool(ServerGib instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ServerGib instance)
public ServerGib Copy()
public ServerGib Deserialize(Stream stream)
public ServerGib DeserializeLengthDelimited(Stream stream)
public ServerGib DeserializeLength(Stream stream, int length)
public ServerGib Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ServerGib previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ServerGib Deserialize(Byte[] buffer, ServerGib instance, bool isDelta)
public ServerGib Deserialize(Stream stream, ServerGib instance, bool isDelta)
public ServerGib DeserializeLengthDelimited(Stream stream, ServerGib instance, bool isDelta)
public ServerGib DeserializeLength(Stream stream, int length, ServerGib instance, bool isDelta)
public void SerializeDelta(Stream stream, ServerGib instance, ServerGib previous)
public void Serialize(Stream stream, ServerGib instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ServerGib instance)
public void SerializeLengthDelimited(Stream stream, ServerGib instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ShopKeeper : object {
public bool ShouldPool
private bool _disposed
public NetworkableId vendingRef
public void ResetToPool(ShopKeeper instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ShopKeeper instance)
public ShopKeeper Copy()
public ShopKeeper Deserialize(Stream stream)
public ShopKeeper DeserializeLengthDelimited(Stream stream)
public ShopKeeper DeserializeLength(Stream stream, int length)
public ShopKeeper Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ShopKeeper previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ShopKeeper Deserialize(Byte[] buffer, ShopKeeper instance, bool isDelta)
public ShopKeeper Deserialize(Stream stream, ShopKeeper instance, bool isDelta)
public ShopKeeper DeserializeLengthDelimited(Stream stream, ShopKeeper instance, bool isDelta)
public ShopKeeper DeserializeLength(Stream stream, int length, ShopKeeper instance, bool isDelta)
public void SerializeDelta(Stream stream, ShopKeeper instance, ShopKeeper previous)
public void Serialize(Stream stream, ShopKeeper instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ShopKeeper instance)
public void SerializeLengthDelimited(Stream stream, ShopKeeper instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Sign : object {
public bool ShouldPool
private bool _disposed
public UInt32 imageid
public List`1<UInt32> imageIds
public List`1<ulong> editHistory
public void ResetToPool(Sign instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Sign instance)
public Sign Copy()
public Sign Deserialize(Stream stream)
public Sign DeserializeLengthDelimited(Stream stream)
public Sign DeserializeLength(Stream stream, int length)
public Sign Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Sign previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Sign Deserialize(Byte[] buffer, Sign instance, bool isDelta)
public Sign Deserialize(Stream stream, Sign instance, bool isDelta)
public Sign DeserializeLengthDelimited(Stream stream, Sign instance, bool isDelta)
public Sign DeserializeLength(Stream stream, int length, Sign instance, bool isDelta)
public void SerializeDelta(Stream stream, Sign instance, Sign previous)
public void Serialize(Stream stream, Sign instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Sign instance)
public void SerializeLengthDelimited(Stream stream, Sign instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SimpleFloat : object {
public bool ShouldPool
private bool _disposed
public float value
public void ResetToPool(SimpleFloat instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SimpleFloat instance)
public SimpleFloat Copy()
public SimpleFloat Deserialize(Stream stream)
public SimpleFloat DeserializeLengthDelimited(Stream stream)
public SimpleFloat DeserializeLength(Stream stream, int length)
public SimpleFloat Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SimpleFloat previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SimpleFloat Deserialize(Byte[] buffer, SimpleFloat instance, bool isDelta)
public SimpleFloat Deserialize(Stream stream, SimpleFloat instance, bool isDelta)
public SimpleFloat DeserializeLengthDelimited(Stream stream, SimpleFloat instance, bool isDelta)
public SimpleFloat DeserializeLength(Stream stream, int length, SimpleFloat instance, bool isDelta)
public void SerializeDelta(Stream stream, SimpleFloat instance, SimpleFloat previous)
public void Serialize(Stream stream, SimpleFloat instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SimpleFloat instance)
public void SerializeLengthDelimited(Stream stream, SimpleFloat instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SimpleUID : object {
public bool ShouldPool
private bool _disposed
public NetworkableId uid
public void ResetToPool(SimpleUID instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SimpleUID instance)
public SimpleUID Copy()
public SimpleUID Deserialize(Stream stream)
public SimpleUID DeserializeLengthDelimited(Stream stream)
public SimpleUID DeserializeLength(Stream stream, int length)
public SimpleUID Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SimpleUID previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SimpleUID Deserialize(Byte[] buffer, SimpleUID instance, bool isDelta)
public SimpleUID Deserialize(Stream stream, SimpleUID instance, bool isDelta)
public SimpleUID DeserializeLengthDelimited(Stream stream, SimpleUID instance, bool isDelta)
public SimpleUID DeserializeLength(Stream stream, int length, SimpleUID instance, bool isDelta)
public void SerializeDelta(Stream stream, SimpleUID instance, SimpleUID previous)
public void Serialize(Stream stream, SimpleUID instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SimpleUID instance)
public void SerializeLengthDelimited(Stream stream, SimpleUID instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SimpleUInt : object {
public bool ShouldPool
private bool _disposed
public UInt32 value
public void ResetToPool(SimpleUInt instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SimpleUInt instance)
public SimpleUInt Copy()
public SimpleUInt Deserialize(Stream stream)
public SimpleUInt DeserializeLengthDelimited(Stream stream)
public SimpleUInt DeserializeLength(Stream stream, int length)
public SimpleUInt Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SimpleUInt previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SimpleUInt Deserialize(Byte[] buffer, SimpleUInt instance, bool isDelta)
public SimpleUInt Deserialize(Stream stream, SimpleUInt instance, bool isDelta)
public SimpleUInt DeserializeLengthDelimited(Stream stream, SimpleUInt instance, bool isDelta)
public SimpleUInt DeserializeLength(Stream stream, int length, SimpleUInt instance, bool isDelta)
public void SerializeDelta(Stream stream, SimpleUInt instance, SimpleUInt previous)
public void Serialize(Stream stream, SimpleUInt instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SimpleUInt instance)
public void SerializeLengthDelimited(Stream stream, SimpleUInt instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SkullTrophy : object {
public bool ShouldPool
private bool _disposed
public string playerName
public string streamerName
public void ResetToPool(SkullTrophy instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SkullTrophy instance)
public SkullTrophy Copy()
public SkullTrophy Deserialize(Stream stream)
public SkullTrophy DeserializeLengthDelimited(Stream stream)
public SkullTrophy DeserializeLength(Stream stream, int length)
public SkullTrophy Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SkullTrophy previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SkullTrophy Deserialize(Byte[] buffer, SkullTrophy instance, bool isDelta)
public SkullTrophy Deserialize(Stream stream, SkullTrophy instance, bool isDelta)
public SkullTrophy DeserializeLengthDelimited(Stream stream, SkullTrophy instance, bool isDelta)
public SkullTrophy DeserializeLength(Stream stream, int length, SkullTrophy instance, bool isDelta)
public void SerializeDelta(Stream stream, SkullTrophy instance, SkullTrophy previous)
public void Serialize(Stream stream, SkullTrophy instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SkullTrophy instance)
public void SerializeLengthDelimited(Stream stream, SkullTrophy instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SleepingBag : object {
public bool ShouldPool
private bool _disposed
public string name
public ulong deployerID
public void ResetToPool(SleepingBag instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SleepingBag instance)
public SleepingBag Copy()
public SleepingBag Deserialize(Stream stream)
public SleepingBag DeserializeLengthDelimited(Stream stream)
public SleepingBag DeserializeLength(Stream stream, int length)
public SleepingBag Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SleepingBag previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SleepingBag Deserialize(Byte[] buffer, SleepingBag instance, bool isDelta)
public SleepingBag Deserialize(Stream stream, SleepingBag instance, bool isDelta)
public SleepingBag DeserializeLengthDelimited(Stream stream, SleepingBag instance, bool isDelta)
public SleepingBag DeserializeLength(Stream stream, int length, SleepingBag instance, bool isDelta)
public void SerializeDelta(Stream stream, SleepingBag instance, SleepingBag previous)
public void Serialize(Stream stream, SleepingBag instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SleepingBag instance)
public void SerializeLengthDelimited(Stream stream, SleepingBag instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SleepingBagCamper : object {
public bool ShouldPool
private bool _disposed
public NetworkableId seatID
public void ResetToPool(SleepingBagCamper instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SleepingBagCamper instance)
public SleepingBagCamper Copy()
public SleepingBagCamper Deserialize(Stream stream)
public SleepingBagCamper DeserializeLengthDelimited(Stream stream)
public SleepingBagCamper DeserializeLength(Stream stream, int length)
public SleepingBagCamper Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SleepingBagCamper previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SleepingBagCamper Deserialize(Byte[] buffer, SleepingBagCamper instance, bool isDelta)
public SleepingBagCamper Deserialize(Stream stream, SleepingBagCamper instance, bool isDelta)
public SleepingBagCamper DeserializeLengthDelimited(Stream stream, SleepingBagCamper instance, bool isDelta)
public SleepingBagCamper DeserializeLength(Stream stream, int length, SleepingBagCamper instance, bool isDelta)
public void SerializeDelta(Stream stream, SleepingBagCamper instance, SleepingBagCamper previous)
public void Serialize(Stream stream, SleepingBagCamper instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SleepingBagCamper instance)
public void SerializeLengthDelimited(Stream stream, SleepingBagCamper instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SlotMachine : object {
public bool ShouldPool
private bool _disposed
public int oldResult1
public int oldResult2
public int oldResult3
public int newResult1
public int newResult2
public int newResult3
public bool isSpinning
public float spinTime
public NetworkableId storageID
public int multiplier
public void ResetToPool(SlotMachine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SlotMachine instance)
public SlotMachine Copy()
public SlotMachine Deserialize(Stream stream)
public SlotMachine DeserializeLengthDelimited(Stream stream)
public SlotMachine DeserializeLength(Stream stream, int length)
public SlotMachine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SlotMachine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SlotMachine Deserialize(Byte[] buffer, SlotMachine instance, bool isDelta)
public SlotMachine Deserialize(Stream stream, SlotMachine instance, bool isDelta)
public SlotMachine DeserializeLengthDelimited(Stream stream, SlotMachine instance, bool isDelta)
public SlotMachine DeserializeLength(Stream stream, int length, SlotMachine instance, bool isDelta)
public void SerializeDelta(Stream stream, SlotMachine instance, SlotMachine previous)
public void Serialize(Stream stream, SlotMachine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SlotMachine instance)
public void SerializeLengthDelimited(Stream stream, SlotMachine instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SmartAlarm : object {
public bool ShouldPool
private bool _disposed
public List`1<ulong> subscriptions
public string notificationTitle
public string notificationBody
public void ResetToPool(SmartAlarm instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SmartAlarm instance)
public SmartAlarm Copy()
public SmartAlarm Deserialize(Stream stream)
public SmartAlarm DeserializeLengthDelimited(Stream stream)
public SmartAlarm DeserializeLength(Stream stream, int length)
public SmartAlarm Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SmartAlarm previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SmartAlarm Deserialize(Byte[] buffer, SmartAlarm instance, bool isDelta)
public SmartAlarm Deserialize(Stream stream, SmartAlarm instance, bool isDelta)
public SmartAlarm DeserializeLengthDelimited(Stream stream, SmartAlarm instance, bool isDelta)
public SmartAlarm DeserializeLength(Stream stream, int length, SmartAlarm instance, bool isDelta)
public void SerializeDelta(Stream stream, SmartAlarm instance, SmartAlarm previous)
public void Serialize(Stream stream, SmartAlarm instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SmartAlarm instance)
public void SerializeLengthDelimited(Stream stream, SmartAlarm instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Snowmobile : object {
public bool ShouldPool
private bool _disposed
public float steerInput
public float driveWheelVel
public float throttleInput
public float brakeInput
public NetworkableId storageID
public NetworkableId fuelStorageID
public float fuelFraction
public void ResetToPool(Snowmobile instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Snowmobile instance)
public Snowmobile Copy()
public Snowmobile Deserialize(Stream stream)
public Snowmobile DeserializeLengthDelimited(Stream stream)
public Snowmobile DeserializeLength(Stream stream, int length)
public Snowmobile Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Snowmobile previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Snowmobile Deserialize(Byte[] buffer, Snowmobile instance, bool isDelta)
public Snowmobile Deserialize(Stream stream, Snowmobile instance, bool isDelta)
public Snowmobile DeserializeLengthDelimited(Stream stream, Snowmobile instance, bool isDelta)
public Snowmobile DeserializeLength(Stream stream, int length, Snowmobile instance, bool isDelta)
public void SerializeDelta(Stream stream, Snowmobile instance, Snowmobile previous)
public void Serialize(Stream stream, Snowmobile instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Snowmobile instance)
public void SerializeLengthDelimited(Stream stream, Snowmobile instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Spawnable : object {
public bool ShouldPool
private bool _disposed
public UInt32 population
public void ResetToPool(Spawnable instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Spawnable instance)
public Spawnable Copy()
public Spawnable Deserialize(Stream stream)
public Spawnable DeserializeLengthDelimited(Stream stream)
public Spawnable DeserializeLength(Stream stream, int length)
public Spawnable Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Spawnable previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Spawnable Deserialize(Byte[] buffer, Spawnable instance, bool isDelta)
public Spawnable Deserialize(Stream stream, Spawnable instance, bool isDelta)
public Spawnable DeserializeLengthDelimited(Stream stream, Spawnable instance, bool isDelta)
public Spawnable DeserializeLength(Stream stream, int length, Spawnable instance, bool isDelta)
public void SerializeDelta(Stream stream, Spawnable instance, Spawnable previous)
public void Serialize(Stream stream, Spawnable instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Spawnable instance)
public void SerializeLengthDelimited(Stream stream, Spawnable instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SphereEntity : object {
public bool ShouldPool
private bool _disposed
public float radius
public void ResetToPool(SphereEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SphereEntity instance)
public SphereEntity Copy()
public SphereEntity Deserialize(Stream stream)
public SphereEntity DeserializeLengthDelimited(Stream stream)
public SphereEntity DeserializeLength(Stream stream, int length)
public SphereEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SphereEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SphereEntity Deserialize(Byte[] buffer, SphereEntity instance, bool isDelta)
public SphereEntity Deserialize(Stream stream, SphereEntity instance, bool isDelta)
public SphereEntity DeserializeLengthDelimited(Stream stream, SphereEntity instance, bool isDelta)
public SphereEntity DeserializeLength(Stream stream, int length, SphereEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, SphereEntity instance, SphereEntity previous)
public void Serialize(Stream stream, SphereEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SphereEntity instance)
public void SerializeLengthDelimited(Stream stream, SphereEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SpinnerWheel : object {
public bool ShouldPool
private bool _disposed
public Vector3 spin
public void ResetToPool(SpinnerWheel instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SpinnerWheel instance)
public SpinnerWheel Copy()
public SpinnerWheel Deserialize(Stream stream)
public SpinnerWheel DeserializeLengthDelimited(Stream stream)
public SpinnerWheel DeserializeLength(Stream stream, int length)
public SpinnerWheel Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SpinnerWheel previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SpinnerWheel Deserialize(Byte[] buffer, SpinnerWheel instance, bool isDelta)
public SpinnerWheel Deserialize(Stream stream, SpinnerWheel instance, bool isDelta)
public SpinnerWheel DeserializeLengthDelimited(Stream stream, SpinnerWheel instance, bool isDelta)
public SpinnerWheel DeserializeLength(Stream stream, int length, SpinnerWheel instance, bool isDelta)
public void SerializeDelta(Stream stream, SpinnerWheel instance, SpinnerWheel previous)
public void Serialize(Stream stream, SpinnerWheel instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SpinnerWheel instance)
public void SerializeLengthDelimited(Stream stream, SpinnerWheel instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Spray : object {
public bool ShouldPool
private bool _disposed
public ulong sprayedBy
public long timestamp
public void ResetToPool(Spray instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Spray instance)
public Spray Copy()
public Spray Deserialize(Stream stream)
public Spray DeserializeLengthDelimited(Stream stream)
public Spray DeserializeLength(Stream stream, int length)
public Spray Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Spray previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Spray Deserialize(Byte[] buffer, Spray instance, bool isDelta)
public Spray Deserialize(Stream stream, Spray instance, bool isDelta)
public Spray DeserializeLengthDelimited(Stream stream, Spray instance, bool isDelta)
public Spray DeserializeLength(Stream stream, int length, Spray instance, bool isDelta)
public void SerializeDelta(Stream stream, Spray instance, Spray previous)
public void Serialize(Stream stream, Spray instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Spray instance)
public void SerializeLengthDelimited(Stream stream, Spray instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SprayLine : object {
public bool ShouldPool
private bool _disposed
public List`1<LinePoint> linePoints
public Vector3 colour
public float width
public NetworkableId editingPlayer
public void ResetToPool(SprayLine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SprayLine instance)
public SprayLine Copy()
public SprayLine Deserialize(Stream stream)
public SprayLine DeserializeLengthDelimited(Stream stream)
public SprayLine DeserializeLength(Stream stream, int length)
public SprayLine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SprayLine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SprayLine Deserialize(Byte[] buffer, SprayLine instance, bool isDelta)
public SprayLine Deserialize(Stream stream, SprayLine instance, bool isDelta)
public SprayLine DeserializeLengthDelimited(Stream stream, SprayLine instance, bool isDelta)
public SprayLine DeserializeLength(Stream stream, int length, SprayLine instance, bool isDelta)
public void SerializeDelta(Stream stream, SprayLine instance, SprayLine previous)
public void Serialize(Stream stream, SprayLine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SprayLine instance)
public void SerializeLengthDelimited(Stream stream, SprayLine instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SprayList : object {
public bool ShouldPool
private bool _disposed
public List`1<LinePoint> linePoints
public void ResetToPool(SprayList instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SprayList instance)
public SprayList Copy()
public SprayList Deserialize(Stream stream)
public SprayList DeserializeLengthDelimited(Stream stream)
public SprayList DeserializeLength(Stream stream, int length)
public SprayList Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SprayList previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SprayList Deserialize(Byte[] buffer, SprayList instance, bool isDelta)
public SprayList Deserialize(Stream stream, SprayList instance, bool isDelta)
public SprayList DeserializeLengthDelimited(Stream stream, SprayList instance, bool isDelta)
public SprayList DeserializeLength(Stream stream, int length, SprayList instance, bool isDelta)
public void SerializeDelta(Stream stream, SprayList instance, SprayList previous)
public void Serialize(Stream stream, SprayList instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SprayList instance)
public void SerializeLengthDelimited(Stream stream, SprayList instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.StabilityEntity : object {
public bool ShouldPool
private bool _disposed
public float stability
public int distanceFromGround
public void ResetToPool(StabilityEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(StabilityEntity instance)
public StabilityEntity Copy()
public StabilityEntity Deserialize(Stream stream)
public StabilityEntity DeserializeLengthDelimited(Stream stream)
public StabilityEntity DeserializeLength(Stream stream, int length)
public StabilityEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, StabilityEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public StabilityEntity Deserialize(Byte[] buffer, StabilityEntity instance, bool isDelta)
public StabilityEntity Deserialize(Stream stream, StabilityEntity instance, bool isDelta)
public StabilityEntity DeserializeLengthDelimited(Stream stream, StabilityEntity instance, bool isDelta)
public StabilityEntity DeserializeLength(Stream stream, int length, StabilityEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, StabilityEntity instance, StabilityEntity previous)
public void Serialize(Stream stream, StabilityEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(StabilityEntity instance)
public void SerializeLengthDelimited(Stream stream, StabilityEntity instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.StorageBox : object {
public bool ShouldPool
private bool _disposed
public ItemContainer contents
public void ResetToPool(StorageBox instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(StorageBox instance)
public StorageBox Copy()
public StorageBox Deserialize(Stream stream)
public StorageBox DeserializeLengthDelimited(Stream stream)
public StorageBox DeserializeLength(Stream stream, int length)
public StorageBox Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, StorageBox previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public StorageBox Deserialize(Byte[] buffer, StorageBox instance, bool isDelta)
public StorageBox Deserialize(Stream stream, StorageBox instance, bool isDelta)
public StorageBox DeserializeLengthDelimited(Stream stream, StorageBox instance, bool isDelta)
public StorageBox DeserializeLength(Stream stream, int length, StorageBox instance, bool isDelta)
public void SerializeDelta(Stream stream, StorageBox instance, StorageBox previous)
public void Serialize(Stream stream, StorageBox instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(StorageBox instance)
public void SerializeLengthDelimited(Stream stream, StorageBox instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.SubEntityList : object {
public bool ShouldPool
private bool _disposed
public List`1<NetworkableId> subEntityIds
public void ResetToPool(SubEntityList instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(SubEntityList instance)
public SubEntityList Copy()
public SubEntityList Deserialize(Stream stream)
public SubEntityList DeserializeLengthDelimited(Stream stream)
public SubEntityList DeserializeLength(Stream stream, int length)
public SubEntityList Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SubEntityList previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public SubEntityList Deserialize(Byte[] buffer, SubEntityList instance, bool isDelta)
public SubEntityList Deserialize(Stream stream, SubEntityList instance, bool isDelta)
public SubEntityList DeserializeLengthDelimited(Stream stream, SubEntityList instance, bool isDelta)
public SubEntityList DeserializeLength(Stream stream, int length, SubEntityList instance, bool isDelta)
public void SerializeDelta(Stream stream, SubEntityList instance, SubEntityList previous)
public void Serialize(Stream stream, SubEntityList instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SubEntityList instance)
public void SerializeLengthDelimited(Stream stream, SubEntityList instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Submarine : object {
public bool ShouldPool
private bool _disposed
public float throttle
public float upDown
public float rudder
public NetworkableId fuelStorageID
public float fuelAmount
public NetworkableId torpedoStorageID
public float oxygen
public NetworkableId itemStorageID
public void ResetToPool(Submarine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Submarine instance)
public Submarine Copy()
public Submarine Deserialize(Stream stream)
public Submarine DeserializeLengthDelimited(Stream stream)
public Submarine DeserializeLength(Stream stream, int length)
public Submarine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Submarine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Submarine Deserialize(Byte[] buffer, Submarine instance, bool isDelta)
public Submarine Deserialize(Stream stream, Submarine instance, bool isDelta)
public Submarine DeserializeLengthDelimited(Stream stream, Submarine instance, bool isDelta)
public Submarine DeserializeLength(Stream stream, int length, Submarine instance, bool isDelta)
public void SerializeDelta(Stream stream, Submarine instance, Submarine previous)
public void Serialize(Stream stream, Submarine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Submarine instance)
public void SerializeLengthDelimited(Stream stream, Submarine instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.TakeDamage : object {
public bool ShouldPool
private bool _disposed
public float amount
public Vector3 direction
public int type
public void ResetToPool(TakeDamage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(TakeDamage instance)
public TakeDamage Copy()
public TakeDamage Deserialize(Stream stream)
public TakeDamage DeserializeLengthDelimited(Stream stream)
public TakeDamage DeserializeLength(Stream stream, int length)
public TakeDamage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, TakeDamage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public TakeDamage Deserialize(Byte[] buffer, TakeDamage instance, bool isDelta)
public TakeDamage Deserialize(Stream stream, TakeDamage instance, bool isDelta)
public TakeDamage DeserializeLengthDelimited(Stream stream, TakeDamage instance, bool isDelta)
public TakeDamage DeserializeLength(Stream stream, int length, TakeDamage instance, bool isDelta)
public void SerializeDelta(Stream stream, TakeDamage instance, TakeDamage previous)
public void Serialize(Stream stream, TakeDamage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(TakeDamage instance)
public void SerializeLengthDelimited(Stream stream, TakeDamage instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.TargetDetectedAIEventData : object {
public bool ShouldPool
private bool _disposed
public float range
public void ResetToPool(TargetDetectedAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(TargetDetectedAIEventData instance)
public TargetDetectedAIEventData Copy()
public TargetDetectedAIEventData Deserialize(Stream stream)
public TargetDetectedAIEventData DeserializeLengthDelimited(Stream stream)
public TargetDetectedAIEventData DeserializeLength(Stream stream, int length)
public TargetDetectedAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, TargetDetectedAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public TargetDetectedAIEventData Deserialize(Byte[] buffer, TargetDetectedAIEventData instance, bool isDelta)
public TargetDetectedAIEventData Deserialize(Stream stream, TargetDetectedAIEventData instance, bool isDelta)
public TargetDetectedAIEventData DeserializeLengthDelimited(Stream stream, TargetDetectedAIEventData instance, bool isDelta)
public TargetDetectedAIEventData DeserializeLength(Stream stream, int length, TargetDetectedAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, TargetDetectedAIEventData instance, TargetDetectedAIEventData previous)
public void Serialize(Stream stream, TargetDetectedAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(TargetDetectedAIEventData instance)
public void SerializeLengthDelimited(Stream stream, TargetDetectedAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Telephone : object {
public bool ShouldPool
private bool _disposed
public int lastNumber
public int phoneNumber
public NetworkableId usingPlayer
public string phoneName
public PhoneDirectory savedNumbers
public List`1<VoicemailEntry> voicemail
public void ResetToPool(Telephone instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Telephone instance)
public Telephone Copy()
public Telephone Deserialize(Stream stream)
public Telephone DeserializeLengthDelimited(Stream stream)
public Telephone DeserializeLength(Stream stream, int length)
public Telephone Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Telephone previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Telephone Deserialize(Byte[] buffer, Telephone instance, bool isDelta)
public Telephone Deserialize(Stream stream, Telephone instance, bool isDelta)
public Telephone DeserializeLengthDelimited(Stream stream, Telephone instance, bool isDelta)
public Telephone DeserializeLength(Stream stream, int length, Telephone instance, bool isDelta)
public void SerializeDelta(Stream stream, Telephone instance, Telephone previous)
public void Serialize(Stream stream, Telephone instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Telephone instance)
public void SerializeLengthDelimited(Stream stream, Telephone instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ThreatDetectedAIEventData : object {
public bool ShouldPool
private bool _disposed
public float range
public void ResetToPool(ThreatDetectedAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ThreatDetectedAIEventData instance)
public ThreatDetectedAIEventData Copy()
public ThreatDetectedAIEventData Deserialize(Stream stream)
public ThreatDetectedAIEventData DeserializeLengthDelimited(Stream stream)
public ThreatDetectedAIEventData DeserializeLength(Stream stream, int length)
public ThreatDetectedAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ThreatDetectedAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ThreatDetectedAIEventData Deserialize(Byte[] buffer, ThreatDetectedAIEventData instance, bool isDelta)
public ThreatDetectedAIEventData Deserialize(Stream stream, ThreatDetectedAIEventData instance, bool isDelta)
public ThreatDetectedAIEventData DeserializeLengthDelimited(Stream stream, ThreatDetectedAIEventData instance, bool isDelta)
public ThreatDetectedAIEventData DeserializeLength(Stream stream, int length, ThreatDetectedAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, ThreatDetectedAIEventData instance, ThreatDetectedAIEventData previous)
public void Serialize(Stream stream, ThreatDetectedAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ThreatDetectedAIEventData instance)
public void SerializeLengthDelimited(Stream stream, ThreatDetectedAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.TimedExplosive : object {
public bool ShouldPool
private bool _disposed
public NetworkableId parentid
public Vector3 pos
public Vector3 normal
public bool rfOn
public int freq
public ulong creatorID
public void ResetToPool(TimedExplosive instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(TimedExplosive instance)
public TimedExplosive Copy()
public TimedExplosive Deserialize(Stream stream)
public TimedExplosive DeserializeLengthDelimited(Stream stream)
public TimedExplosive DeserializeLength(Stream stream, int length)
public TimedExplosive Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, TimedExplosive previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public TimedExplosive Deserialize(Byte[] buffer, TimedExplosive instance, bool isDelta)
public TimedExplosive Deserialize(Stream stream, TimedExplosive instance, bool isDelta)
public TimedExplosive DeserializeLengthDelimited(Stream stream, TimedExplosive instance, bool isDelta)
public TimedExplosive DeserializeLength(Stream stream, int length, TimedExplosive instance, bool isDelta)
public void SerializeDelta(Stream stream, TimedExplosive instance, TimedExplosive previous)
public void Serialize(Stream stream, TimedExplosive instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(TimedExplosive instance)
public void SerializeLengthDelimited(Stream stream, TimedExplosive instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.TimerAIEventData : object {
public bool ShouldPool
private bool _disposed
public float duration
public float durationMax
public void ResetToPool(TimerAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(TimerAIEventData instance)
public TimerAIEventData Copy()
public TimerAIEventData Deserialize(Stream stream)
public TimerAIEventData DeserializeLengthDelimited(Stream stream)
public TimerAIEventData DeserializeLength(Stream stream, int length)
public TimerAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, TimerAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public TimerAIEventData Deserialize(Byte[] buffer, TimerAIEventData instance, bool isDelta)
public TimerAIEventData Deserialize(Stream stream, TimerAIEventData instance, bool isDelta)
public TimerAIEventData DeserializeLengthDelimited(Stream stream, TimerAIEventData instance, bool isDelta)
public TimerAIEventData DeserializeLength(Stream stream, int length, TimerAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, TimerAIEventData instance, TimerAIEventData previous)
public void Serialize(Stream stream, TimerAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(TimerAIEventData instance)
public void SerializeLengthDelimited(Stream stream, TimerAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.TimeSinceThreatAIEventData : object {
public bool ShouldPool
private bool _disposed
public float value
public void ResetToPool(TimeSinceThreatAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(TimeSinceThreatAIEventData instance)
public TimeSinceThreatAIEventData Copy()
public TimeSinceThreatAIEventData Deserialize(Stream stream)
public TimeSinceThreatAIEventData DeserializeLengthDelimited(Stream stream)
public TimeSinceThreatAIEventData DeserializeLength(Stream stream, int length)
public TimeSinceThreatAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, TimeSinceThreatAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public TimeSinceThreatAIEventData Deserialize(Byte[] buffer, TimeSinceThreatAIEventData instance, bool isDelta)
public TimeSinceThreatAIEventData Deserialize(Stream stream, TimeSinceThreatAIEventData instance, bool isDelta)
public TimeSinceThreatAIEventData DeserializeLengthDelimited(Stream stream, TimeSinceThreatAIEventData instance, bool isDelta)
public TimeSinceThreatAIEventData DeserializeLength(Stream stream, int length, TimeSinceThreatAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, TimeSinceThreatAIEventData instance, TimeSinceThreatAIEventData previous)
public void Serialize(Stream stream, TimeSinceThreatAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(TimeSinceThreatAIEventData instance)
public void SerializeLengthDelimited(Stream stream, TimeSinceThreatAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.TirednessAboveAIEventData : object {
public bool ShouldPool
private bool _disposed
public float value
public void ResetToPool(TirednessAboveAIEventData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(TirednessAboveAIEventData instance)
public TirednessAboveAIEventData Copy()
public TirednessAboveAIEventData Deserialize(Stream stream)
public TirednessAboveAIEventData DeserializeLengthDelimited(Stream stream)
public TirednessAboveAIEventData DeserializeLength(Stream stream, int length)
public TirednessAboveAIEventData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, TirednessAboveAIEventData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public TirednessAboveAIEventData Deserialize(Byte[] buffer, TirednessAboveAIEventData instance, bool isDelta)
public TirednessAboveAIEventData Deserialize(Stream stream, TirednessAboveAIEventData instance, bool isDelta)
public TirednessAboveAIEventData DeserializeLengthDelimited(Stream stream, TirednessAboveAIEventData instance, bool isDelta)
public TirednessAboveAIEventData DeserializeLength(Stream stream, int length, TirednessAboveAIEventData instance, bool isDelta)
public void SerializeDelta(Stream stream, TirednessAboveAIEventData instance, TirednessAboveAIEventData previous)
public void Serialize(Stream stream, TirednessAboveAIEventData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(TirednessAboveAIEventData instance)
public void SerializeLengthDelimited(Stream stream, TirednessAboveAIEventData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.TrainEngine : object {
public bool ShouldPool
private bool _disposed
public int throttleSetting
public NetworkableId fuelStorageID
public int fuelAmount
public int numConnectedCars
public int linedUpToUnload
public void ResetToPool(TrainEngine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(TrainEngine instance)
public TrainEngine Copy()
public TrainEngine Deserialize(Stream stream)
public TrainEngine DeserializeLengthDelimited(Stream stream)
public TrainEngine DeserializeLength(Stream stream, int length)
public TrainEngine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, TrainEngine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public TrainEngine Deserialize(Byte[] buffer, TrainEngine instance, bool isDelta)
public TrainEngine Deserialize(Stream stream, TrainEngine instance, bool isDelta)
public TrainEngine DeserializeLengthDelimited(Stream stream, TrainEngine instance, bool isDelta)
public TrainEngine DeserializeLength(Stream stream, int length, TrainEngine instance, bool isDelta)
public void SerializeDelta(Stream stream, TrainEngine instance, TrainEngine previous)
public void Serialize(Stream stream, TrainEngine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(TrainEngine instance)
public void SerializeLengthDelimited(Stream stream, TrainEngine instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Tree : object {
public bool ShouldPool
private bool _disposed
public NetworkableId netId
public UInt32 prefabId
public Half3 position
public float scale
public void ResetToPool(Tree instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Tree instance)
public Tree Copy()
public Tree Deserialize(Stream stream)
public Tree DeserializeLengthDelimited(Stream stream)
public Tree DeserializeLength(Stream stream, int length)
public Tree Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Tree previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Tree Deserialize(Byte[] buffer, Tree instance, bool isDelta)
public Tree Deserialize(Stream stream, Tree instance, bool isDelta)
public Tree DeserializeLengthDelimited(Stream stream, Tree instance, bool isDelta)
public Tree DeserializeLength(Stream stream, int length, Tree instance, bool isDelta)
public void SerializeDelta(Stream stream, Tree instance, Tree previous)
public void Serialize(Stream stream, Tree instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Tree instance)
public void SerializeLengthDelimited(Stream stream, Tree instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.TreeList : object {
public bool ShouldPool
private bool _disposed
public List`1<Tree> trees
public void ResetToPool(TreeList instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(TreeList instance)
public TreeList Copy()
public TreeList Deserialize(Stream stream)
public TreeList DeserializeLengthDelimited(Stream stream)
public TreeList DeserializeLength(Stream stream, int length)
public TreeList Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, TreeList previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public TreeList Deserialize(Byte[] buffer, TreeList instance, bool isDelta)
public TreeList Deserialize(Stream stream, TreeList instance, bool isDelta)
public TreeList DeserializeLengthDelimited(Stream stream, TreeList instance, bool isDelta)
public TreeList DeserializeLength(Stream stream, int length, TreeList instance, bool isDelta)
public void SerializeDelta(Stream stream, TreeList instance, TreeList previous)
public void Serialize(Stream stream, TreeList instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(TreeList instance)
public void SerializeLengthDelimited(Stream stream, TreeList instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.UpdateItem : object {
public bool ShouldPool
private bool _disposed
public Item item
public void ResetToPool(UpdateItem instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(UpdateItem instance)
public UpdateItem Copy()
public UpdateItem Deserialize(Stream stream)
public UpdateItem DeserializeLengthDelimited(Stream stream)
public UpdateItem DeserializeLength(Stream stream, int length)
public UpdateItem Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, UpdateItem previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public UpdateItem Deserialize(Byte[] buffer, UpdateItem instance, bool isDelta)
public UpdateItem Deserialize(Stream stream, UpdateItem instance, bool isDelta)
public UpdateItem DeserializeLengthDelimited(Stream stream, UpdateItem instance, bool isDelta)
public UpdateItem DeserializeLength(Stream stream, int length, UpdateItem instance, bool isDelta)
public void SerializeDelta(Stream stream, UpdateItem instance, UpdateItem previous)
public void Serialize(Stream stream, UpdateItem instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(UpdateItem instance)
public void SerializeLengthDelimited(Stream stream, UpdateItem instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.UpdateItemContainer : object {
public bool ShouldPool
private bool _disposed
public int type
public List`1<ItemContainer> container
public void ResetToPool(UpdateItemContainer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(UpdateItemContainer instance)
public UpdateItemContainer Copy()
public UpdateItemContainer Deserialize(Stream stream)
public UpdateItemContainer DeserializeLengthDelimited(Stream stream)
public UpdateItemContainer DeserializeLength(Stream stream, int length)
public UpdateItemContainer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, UpdateItemContainer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public UpdateItemContainer Deserialize(Byte[] buffer, UpdateItemContainer instance, bool isDelta)
public UpdateItemContainer Deserialize(Stream stream, UpdateItemContainer instance, bool isDelta)
public UpdateItemContainer DeserializeLengthDelimited(Stream stream, UpdateItemContainer instance, bool isDelta)
public UpdateItemContainer DeserializeLength(Stream stream, int length, UpdateItemContainer instance, bool isDelta)
public void SerializeDelta(Stream stream, UpdateItemContainer instance, UpdateItemContainer previous)
public void Serialize(Stream stream, UpdateItemContainer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(UpdateItemContainer instance)
public void SerializeLengthDelimited(Stream stream, UpdateItemContainer instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.VectorData : ValueType {
public float x
public float y
public float z
public void .ctor(float x, float y, float z)
public VectorData op_Implicit(Vector3 v)
public VectorData op_Implicit(Quaternion q)
public Vector3 op_Implicit(VectorData v)
public Quaternion op_Implicit(VectorData v)
public void ResetToPool(VectorData instance)
public void CopyTo(VectorData instance)
public VectorData Copy()
public VectorData Deserialize(Stream stream)
public VectorData DeserializeLengthDelimited(Stream stream)
public VectorData DeserializeLength(Stream stream, int length)
public VectorData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, VectorData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public VectorData Deserialize(Byte[] buffer, VectorData& instance, bool isDelta)
public VectorData Deserialize(Stream stream, VectorData& instance, bool isDelta)
public VectorData DeserializeLengthDelimited(Stream stream, VectorData& instance, bool isDelta)
public VectorData DeserializeLength(Stream stream, int length, VectorData& instance, bool isDelta)
public void SerializeDelta(Stream stream, VectorData instance, VectorData previous)
public void Serialize(Stream stream, VectorData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(VectorData instance)
public void SerializeLengthDelimited(Stream stream, VectorData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.VehicleLift : object {
public bool ShouldPool
private bool _disposed
public bool platformIsOccupied
public bool editableOccupant
public bool driveableOccupant
public int occupantLockState
public void ResetToPool(VehicleLift instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(VehicleLift instance)
public VehicleLift Copy()
public VehicleLift Deserialize(Stream stream)
public VehicleLift DeserializeLengthDelimited(Stream stream)
public VehicleLift DeserializeLength(Stream stream, int length)
public VehicleLift Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, VehicleLift previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public VehicleLift Deserialize(Byte[] buffer, VehicleLift instance, bool isDelta)
public VehicleLift Deserialize(Stream stream, VehicleLift instance, bool isDelta)
public VehicleLift DeserializeLengthDelimited(Stream stream, VehicleLift instance, bool isDelta)
public VehicleLift DeserializeLength(Stream stream, int length, VehicleLift instance, bool isDelta)
public void SerializeDelta(Stream stream, VehicleLift instance, VehicleLift previous)
public void Serialize(Stream stream, VehicleLift instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(VehicleLift instance)
public void SerializeLengthDelimited(Stream stream, VehicleLift instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.VehicleModule : object {
public bool ShouldPool
private bool _disposed
public int socketIndex
public void ResetToPool(VehicleModule instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(VehicleModule instance)
public VehicleModule Copy()
public VehicleModule Deserialize(Stream stream)
public VehicleModule DeserializeLengthDelimited(Stream stream)
public VehicleModule DeserializeLength(Stream stream, int length)
public VehicleModule Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, VehicleModule previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public VehicleModule Deserialize(Byte[] buffer, VehicleModule instance, bool isDelta)
public VehicleModule Deserialize(Stream stream, VehicleModule instance, bool isDelta)
public VehicleModule DeserializeLengthDelimited(Stream stream, VehicleModule instance, bool isDelta)
public VehicleModule DeserializeLength(Stream stream, int length, VehicleModule instance, bool isDelta)
public void SerializeDelta(Stream stream, VehicleModule instance, VehicleModule previous)
public void Serialize(Stream stream, VehicleModule instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(VehicleModule instance)
public void SerializeLengthDelimited(Stream stream, VehicleModule instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.VehicleVendor : object {
public bool ShouldPool
private bool _disposed
public List`1<PlayerStorage> playerStorage
public NetworkableId spawnerRef
public void ResetToPool(VehicleVendor instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(VehicleVendor instance)
public VehicleVendor Copy()
public VehicleVendor Deserialize(Stream stream)
public VehicleVendor DeserializeLengthDelimited(Stream stream)
public VehicleVendor DeserializeLength(Stream stream, int length)
public VehicleVendor Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, VehicleVendor previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public VehicleVendor Deserialize(Byte[] buffer, VehicleVendor instance, bool isDelta)
public VehicleVendor Deserialize(Stream stream, VehicleVendor instance, bool isDelta)
public VehicleVendor DeserializeLengthDelimited(Stream stream, VehicleVendor instance, bool isDelta)
public VehicleVendor DeserializeLength(Stream stream, int length, VehicleVendor instance, bool isDelta)
public void SerializeDelta(Stream stream, VehicleVendor instance, VehicleVendor previous)
public void Serialize(Stream stream, VehicleVendor instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(VehicleVendor instance)
public void SerializeLengthDelimited(Stream stream, VehicleVendor instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.VendingMachine : object {
public bool ShouldPool
private bool _disposed
public SellOrderContainer sellOrderContainer
public string shopName
public int vmoIndex
public NetworkableId networkID
public void ResetToPool(VendingMachine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(VendingMachine instance)
public VendingMachine Copy()
public VendingMachine Deserialize(Stream stream)
public VendingMachine DeserializeLengthDelimited(Stream stream)
public VendingMachine DeserializeLength(Stream stream, int length)
public VendingMachine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, VendingMachine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public VendingMachine Deserialize(Byte[] buffer, VendingMachine instance, bool isDelta)
public VendingMachine Deserialize(Stream stream, VendingMachine instance, bool isDelta)
public VendingMachine DeserializeLengthDelimited(Stream stream, VendingMachine instance, bool isDelta)
public VendingMachine DeserializeLength(Stream stream, int length, VendingMachine instance, bool isDelta)
public void SerializeDelta(Stream stream, VendingMachine instance, VendingMachine previous)
public void Serialize(Stream stream, VendingMachine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(VendingMachine instance)
public void SerializeLengthDelimited(Stream stream, VendingMachine instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.VoicemailEntry : object {
public bool ShouldPool
private bool _disposed
public UInt32 audioId
public string userName
public long timestamp
public void ResetToPool(VoicemailEntry instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(VoicemailEntry instance)
public VoicemailEntry Copy()
public VoicemailEntry Deserialize(Stream stream)
public VoicemailEntry DeserializeLengthDelimited(Stream stream)
public VoicemailEntry DeserializeLength(Stream stream, int length)
public VoicemailEntry Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, VoicemailEntry previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public VoicemailEntry Deserialize(Byte[] buffer, VoicemailEntry instance, bool isDelta)
public VoicemailEntry Deserialize(Stream stream, VoicemailEntry instance, bool isDelta)
public VoicemailEntry DeserializeLengthDelimited(Stream stream, VoicemailEntry instance, bool isDelta)
public VoicemailEntry DeserializeLength(Stream stream, int length, VoicemailEntry instance, bool isDelta)
public void SerializeDelta(Stream stream, VoicemailEntry instance, VoicemailEntry previous)
public void Serialize(Stream stream, VoicemailEntry instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(VoicemailEntry instance)
public void SerializeLengthDelimited(Stream stream, VoicemailEntry instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.WaterPool : object {
public bool ShouldPool
private bool _disposed
public float fillAmount
public void ResetToPool(WaterPool instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(WaterPool instance)
public WaterPool Copy()
public WaterPool Deserialize(Stream stream)
public WaterPool DeserializeLengthDelimited(Stream stream)
public WaterPool DeserializeLength(Stream stream, int length)
public WaterPool Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, WaterPool previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public WaterPool Deserialize(Byte[] buffer, WaterPool instance, bool isDelta)
public WaterPool Deserialize(Stream stream, WaterPool instance, bool isDelta)
public WaterPool DeserializeLengthDelimited(Stream stream, WaterPool instance, bool isDelta)
public WaterPool DeserializeLength(Stream stream, int length, WaterPool instance, bool isDelta)
public void SerializeDelta(Stream stream, WaterPool instance, WaterPool previous)
public void Serialize(Stream stream, WaterPool instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(WaterPool instance)
public void SerializeLengthDelimited(Stream stream, WaterPool instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.WaterWell : object {
public bool ShouldPool
private bool _disposed
public float pressure
public float waterLevel
public void ResetToPool(WaterWell instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(WaterWell instance)
public WaterWell Copy()
public WaterWell Deserialize(Stream stream)
public WaterWell DeserializeLengthDelimited(Stream stream)
public WaterWell DeserializeLength(Stream stream, int length)
public WaterWell Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, WaterWell previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public WaterWell Deserialize(Byte[] buffer, WaterWell instance, bool isDelta)
public WaterWell Deserialize(Stream stream, WaterWell instance, bool isDelta)
public WaterWell DeserializeLengthDelimited(Stream stream, WaterWell instance, bool isDelta)
public WaterWell DeserializeLength(Stream stream, int length, WaterWell instance, bool isDelta)
public void SerializeDelta(Stream stream, WaterWell instance, WaterWell previous)
public void Serialize(Stream stream, WaterWell instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(WaterWell instance)
public void SerializeLengthDelimited(Stream stream, WaterWell instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Whitelist : object {
public bool ShouldPool
private bool _disposed
public List`1<ulong> users
public void ResetToPool(Whitelist instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Whitelist instance)
public Whitelist Copy()
public Whitelist Deserialize(Stream stream)
public Whitelist DeserializeLengthDelimited(Stream stream)
public Whitelist DeserializeLength(Stream stream, int length)
public Whitelist Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Whitelist previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Whitelist Deserialize(Byte[] buffer, Whitelist instance, bool isDelta)
public Whitelist Deserialize(Stream stream, Whitelist instance, bool isDelta)
public Whitelist DeserializeLengthDelimited(Stream stream, Whitelist instance, bool isDelta)
public Whitelist DeserializeLength(Stream stream, int length, Whitelist instance, bool isDelta)
public void SerializeDelta(Stream stream, Whitelist instance, Whitelist previous)
public void Serialize(Stream stream, Whitelist instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Whitelist instance)
public void SerializeLengthDelimited(Stream stream, Whitelist instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.WorldData : object {
public bool ShouldPool
private bool _disposed
public UInt32 size
public List`1<MapData> maps
public List`1<PrefabData> prefabs
public List`1<PathData> paths
public void ResetToPool(WorldData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(WorldData instance)
public WorldData Copy()
public WorldData Deserialize(Stream stream)
public WorldData DeserializeLengthDelimited(Stream stream)
public WorldData DeserializeLength(Stream stream, int length)
public WorldData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, WorldData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public WorldData Deserialize(Byte[] buffer, WorldData instance, bool isDelta)
public WorldData Deserialize(Stream stream, WorldData instance, bool isDelta)
public WorldData DeserializeLengthDelimited(Stream stream, WorldData instance, bool isDelta)
public WorldData DeserializeLength(Stream stream, int length, WorldData instance, bool isDelta)
public void SerializeDelta(Stream stream, WorldData instance, WorldData previous)
public void Serialize(Stream stream, WorldData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(WorldData instance)
public void SerializeLengthDelimited(Stream stream, WorldData instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.WorldItem : object {
public bool ShouldPool
private bool _disposed
public Item item
public void ResetToPool(WorldItem instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(WorldItem instance)
public WorldItem Copy()
public WorldItem Deserialize(Stream stream)
public WorldItem DeserializeLengthDelimited(Stream stream)
public WorldItem DeserializeLength(Stream stream, int length)
public WorldItem Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, WorldItem previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public WorldItem Deserialize(Byte[] buffer, WorldItem instance, bool isDelta)
public WorldItem Deserialize(Stream stream, WorldItem instance, bool isDelta)
public WorldItem DeserializeLengthDelimited(Stream stream, WorldItem instance, bool isDelta)
public WorldItem DeserializeLength(Stream stream, int length, WorldItem instance, bool isDelta)
public void SerializeDelta(Stream stream, WorldItem instance, WorldItem previous)
public void Serialize(Stream stream, WorldItem instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(WorldItem instance)
public void SerializeLengthDelimited(Stream stream, WorldItem instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.WorldMessage : object {
public bool ShouldPool
private bool _disposed
public MessageType status
public List`1<PrefabData> prefabs
public List`1<PathData> paths
public void ResetToPool(WorldMessage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(WorldMessage instance)
public WorldMessage Copy()
public WorldMessage Deserialize(Stream stream)
public WorldMessage DeserializeLengthDelimited(Stream stream)
public WorldMessage DeserializeLength(Stream stream, int length)
public WorldMessage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, WorldMessage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public WorldMessage Deserialize(Byte[] buffer, WorldMessage instance, bool isDelta)
public WorldMessage Deserialize(Stream stream, WorldMessage instance, bool isDelta)
public WorldMessage DeserializeLengthDelimited(Stream stream, WorldMessage instance, bool isDelta)
public WorldMessage DeserializeLength(Stream stream, int length, WorldMessage instance, bool isDelta)
public void SerializeDelta(Stream stream, WorldMessage instance, WorldMessage previous)
public void Serialize(Stream stream, WorldMessage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(WorldMessage instance)
public void SerializeLengthDelimited(Stream stream, WorldMessage instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.Zipline : object {
public bool ShouldPool
private bool _disposed
public List`1<VectorData> destinationPoints
public void ResetToPool(Zipline instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(Zipline instance)
public Zipline Copy()
public Zipline Deserialize(Stream stream)
public Zipline DeserializeLengthDelimited(Stream stream)
public Zipline DeserializeLength(Stream stream, int length)
public Zipline Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Zipline previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public Zipline Deserialize(Byte[] buffer, Zipline instance, bool isDelta)
public Zipline Deserialize(Stream stream, Zipline instance, bool isDelta)
public Zipline DeserializeLengthDelimited(Stream stream, Zipline instance, bool isDelta)
public Zipline DeserializeLength(Stream stream, int length, Zipline instance, bool isDelta)
public void SerializeDelta(Stream stream, Zipline instance, Zipline previous)
public void Serialize(Stream stream, Zipline instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Zipline instance)
public void SerializeLengthDelimited(Stream stream, Zipline instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ZiplineArrivalPoint : object {
public bool ShouldPool
private bool _disposed
public List`1<VectorData> linePoints
public void ResetToPool(ZiplineArrivalPoint instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ZiplineArrivalPoint instance)
public ZiplineArrivalPoint Copy()
public ZiplineArrivalPoint Deserialize(Stream stream)
public ZiplineArrivalPoint DeserializeLengthDelimited(Stream stream)
public ZiplineArrivalPoint DeserializeLength(Stream stream, int length)
public ZiplineArrivalPoint Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ZiplineArrivalPoint previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ZiplineArrivalPoint Deserialize(Byte[] buffer, ZiplineArrivalPoint instance, bool isDelta)
public ZiplineArrivalPoint Deserialize(Stream stream, ZiplineArrivalPoint instance, bool isDelta)
public ZiplineArrivalPoint DeserializeLengthDelimited(Stream stream, ZiplineArrivalPoint instance, bool isDelta)
public ZiplineArrivalPoint DeserializeLength(Stream stream, int length, ZiplineArrivalPoint instance, bool isDelta)
public void SerializeDelta(Stream stream, ZiplineArrivalPoint instance, ZiplineArrivalPoint previous)
public void Serialize(Stream stream, ZiplineArrivalPoint instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ZiplineArrivalPoint instance)
public void SerializeLengthDelimited(Stream stream, ZiplineArrivalPoint instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public ProtoBuf.ZiplineMountable : object {
public bool ShouldPool
private bool _disposed
public List`1<VectorData> linePoints
public void ResetToPool(ZiplineMountable instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void CopyTo(ZiplineMountable instance)
public ZiplineMountable Copy()
public ZiplineMountable Deserialize(Stream stream)
public ZiplineMountable DeserializeLengthDelimited(Stream stream)
public ZiplineMountable DeserializeLength(Stream stream, int length)
public ZiplineMountable Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ZiplineMountable previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public ZiplineMountable Deserialize(Byte[] buffer, ZiplineMountable instance, bool isDelta)
public ZiplineMountable Deserialize(Stream stream, ZiplineMountable instance, bool isDelta)
public ZiplineMountable DeserializeLengthDelimited(Stream stream, ZiplineMountable instance, bool isDelta)
public ZiplineMountable DeserializeLength(Stream stream, int length, ZiplineMountable instance, bool isDelta)
public void SerializeDelta(Stream stream, ZiplineMountable instance, ZiplineMountable previous)
public void Serialize(Stream stream, ZiplineMountable instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ZiplineMountable instance)
public void SerializeLengthDelimited(Stream stream, ZiplineMountable instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public SilentOrbit.ProtocolBuffers.IProto {
public void WriteToStream(Stream stream)
public void ReadFromStream(Stream stream, int size, bool isDelta)
}
public SilentOrbit.ProtocolBuffers.Key : ValueType {
private UInt32 <Field>k__BackingField
private Wire <WireType>k__BackingField
public UInt32 Field
public Wire WireType
public UInt32 get_Field()
public void set_Field(UInt32 value)
public Wire get_WireType()
public void set_WireType(Wire value)
public void .ctor(UInt32 field, Wire wireType)
public string ToString()
}
public SilentOrbit.ProtocolBuffers.KeyValue : object {
private Key <Key>k__BackingField
private Byte[] <Value>k__BackingField
public Key Key
public Byte[] Value
public Key get_Key()
public void set_Key(Key value)
public Byte[] get_Value()
public void set_Value(Byte[] value)
public void .ctor(Key key, Byte[] value)
public string ToString()
}
public SilentOrbit.ProtocolBuffers.ProtocolBufferException : Exception {
public void .ctor(string message)
}
public SilentOrbit.ProtocolBuffers.ProtocolParser : object {
private Byte[] staticBuffer
public float ReadSingle(Stream stream)
public void WriteSingle(Stream stream, float f)
public double ReadDouble(Stream stream)
public void WriteDouble(Stream stream, double f)
public string ReadString(Stream stream)
public Byte[] ReadBytes(Stream stream)
public ArraySegment`1<byte> ReadPooledBytes(Stream stream)
private void ReadBytesInto(Stream stream, Byte[] buffer, int length)
public void SkipBytes(Stream stream)
public void WriteString(Stream stream, string val)
public void WriteBytes(Stream stream, Byte[] val)
public void WritePooledBytes(Stream stream, ArraySegment`1<byte> segment)
public ulong ReadFixed64(BinaryReader reader)
public long ReadSFixed64(BinaryReader reader)
public UInt32 ReadFixed32(BinaryReader reader)
public int ReadSFixed32(BinaryReader reader)
public void WriteFixed64(BinaryWriter writer, ulong val)
public void WriteSFixed64(BinaryWriter writer, long val)
public void WriteFixed32(BinaryWriter writer, UInt32 val)
public void WriteSFixed32(BinaryWriter writer, int val)
public float ReadFloat(BinaryReader reader)
public double ReadDouble(BinaryReader reader)
public void WriteFloat(BinaryWriter writer, float val)
public void WriteDouble(BinaryWriter writer, double val)
public Key ReadKey(Stream stream)
public Key ReadKey(byte firstByte, Stream stream)
public void WriteKey(Stream stream, Key key)
public void SkipKey(Stream stream, Key key)
public Byte[] ReadValueBytes(Stream stream, Key key)
public void ReadSkipVarInt(Stream stream)
public Byte[] ReadVarIntBytes(Stream stream)
public int ReadInt32(Stream stream)
public void WriteInt32(Stream stream, int val)
public int ReadZInt32(Stream stream)
public void WriteZInt32(Stream stream, int val)
public UInt32 ReadUInt32(Stream stream)
public void WriteUInt32(Stream stream, UInt32 val)
public int ReadInt64(Stream stream)
public void WriteInt64(Stream stream, int val)
public long ReadZInt64(Stream stream)
public void WriteZInt64(Stream stream, long val)
public ulong ReadUInt64(Stream stream)
public void WriteUInt64(Stream stream, ulong val)
public bool ReadBool(Stream stream)
public void WriteBool(Stream stream, bool val)
}
public SilentOrbit.ProtocolBuffers.Wire : Enum {
public int value__
public Wire Varint
public Wire Fixed64
public Wire LengthDelimited
public Wire Fixed32
}
public UidInspector`1 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(UidType type, T& value)
public IAsyncResult BeginInvoke(UidType type, T& value, AsyncCallback callback, object object)
public void EndInvoke(T& value, IAsyncResult result)
}
public UidType : Enum {
public int value__
public UidType Entity
public UidType Item
public UidType Clear
}
public UnityEngine.ColorSerialized : object {
public void ResetToPool(Color instance)
public Color Deserialize(Byte[] buffer, Color& instance, bool isDelta)
public Color Deserialize(Stream stream, Color& instance, bool isDelta)
public Color DeserializeLengthDelimited(Stream stream, Color& instance, bool isDelta)
public Color DeserializeLength(Stream stream, int length, Color& instance, bool isDelta)
public void SerializeDelta(Stream stream, Color instance, Color previous)
public void Serialize(Stream stream, Color instance)
public Byte[] SerializeToBytes(Color instance)
public void SerializeLengthDelimited(Stream stream, Color instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public UnityEngine.RaySerialized : object {
public void ResetToPool(Ray instance)
public Ray Deserialize(Byte[] buffer, Ray& instance, bool isDelta)
public Ray Deserialize(Stream stream, Ray& instance, bool isDelta)
public Ray DeserializeLengthDelimited(Stream stream, Ray& instance, bool isDelta)
public Ray DeserializeLength(Stream stream, int length, Ray& instance, bool isDelta)
public void SerializeDelta(Stream stream, Ray instance, Ray previous)
public void Serialize(Stream stream, Ray instance)
public Byte[] SerializeToBytes(Ray instance)
public void SerializeLengthDelimited(Stream stream, Ray instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public UnityEngine.Vector2Serialized : object {
public void ResetToPool(Vector2 instance)
public Vector2 Deserialize(Byte[] buffer, Vector2& instance, bool isDelta)
public Vector2 Deserialize(Stream stream, Vector2& instance, bool isDelta)
public Vector2 DeserializeLengthDelimited(Stream stream, Vector2& instance, bool isDelta)
public Vector2 DeserializeLength(Stream stream, int length, Vector2& instance, bool isDelta)
public void SerializeDelta(Stream stream, Vector2 instance, Vector2 previous)
public void Serialize(Stream stream, Vector2 instance)
public Byte[] SerializeToBytes(Vector2 instance)
public void SerializeLengthDelimited(Stream stream, Vector2 instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public UnityEngine.Vector3Serialized : object {
public void ResetToPool(Vector3 instance)
public Vector3 Deserialize(Byte[] buffer, Vector3& instance, bool isDelta)
public Vector3 Deserialize(Stream stream, Vector3& instance, bool isDelta)
public Vector3 DeserializeLengthDelimited(Stream stream, Vector3& instance, bool isDelta)
public Vector3 DeserializeLength(Stream stream, int length, Vector3& instance, bool isDelta)
public void SerializeDelta(Stream stream, Vector3 instance, Vector3 previous)
public void Serialize(Stream stream, Vector3 instance)
public Byte[] SerializeToBytes(Vector3 instance)
public void SerializeLengthDelimited(Stream stream, Vector3 instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
public UnityEngine.Vector4Serialized : object {
public void ResetToPool(Vector4 instance)
public Vector4 Deserialize(Byte[] buffer, Vector4& instance, bool isDelta)
public Vector4 Deserialize(Stream stream, Vector4& instance, bool isDelta)
public Vector4 DeserializeLengthDelimited(Stream stream, Vector4& instance, bool isDelta)
public Vector4 DeserializeLength(Stream stream, int length, Vector4& instance, bool isDelta)
public void SerializeDelta(Stream stream, Vector4 instance, Vector4 previous)
public void Serialize(Stream stream, Vector4 instance)
public Byte[] SerializeToBytes(Vector4 instance)
public void SerializeLengthDelimited(Stream stream, Vector4 instance)
public void InspectUids(UidInspector`1<UInt32> action)
}
