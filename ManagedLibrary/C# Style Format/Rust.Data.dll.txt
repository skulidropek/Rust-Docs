public class EffectData : object {
    public UInt32 type;
    public UInt32 pooledstringid;
    public int number;
    public Vector3 origin;
    public Vector3 normal;
    public float scale;
    public NetworkableId entity;
    public UInt32 bone;
    public ulong source;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(EffectData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(EffectData instance);
    public EffectData Copy();
    public static EffectData Deserialize(Stream stream);
    public static EffectData DeserializeLengthDelimited(Stream stream);
    public static EffectData DeserializeLength(Stream stream, int length);
    public static EffectData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, EffectData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static EffectData Deserialize(Byte[] buffer, EffectData instance, bool isDelta);
    public static EffectData Deserialize(Stream stream, EffectData instance, bool isDelta);
    public static EffectData DeserializeLengthDelimited(Stream stream, EffectData instance, bool isDelta);
    public static EffectData DeserializeLength(Stream stream, int length, EffectData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, EffectData instance, EffectData previous);
    public static void Serialize(Stream stream, EffectData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(EffectData instance);
    public static void SerializeLengthDelimited(Stream stream, EffectData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class Facepunch.Nexus.UuidSerialized : object {
    public static void ResetToPool(Uuid instance);
    public static Uuid Deserialize(Byte[] buffer, Uuid& instance, bool isDelta);
    public static Uuid Deserialize(Stream stream, Uuid& instance, bool isDelta);
    public static Uuid DeserializeLengthDelimited(Stream stream, Uuid& instance, bool isDelta);
    public static Uuid DeserializeLength(Stream stream, int length, Uuid& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Uuid instance, Uuid previous);
    public static void Serialize(Stream stream, Uuid instance);
    public static Byte[] SerializeToBytes(Uuid instance);
    public static void SerializeLengthDelimited(Stream stream, Uuid instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class InputMessage : object {
    public int buttons;
    public Vector3 aimAngles;
    public Vector3 mouseDelta;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(InputMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(InputMessage instance);
    public InputMessage Copy();
    public static InputMessage Deserialize(Stream stream);
    public static InputMessage DeserializeLengthDelimited(Stream stream);
    public static InputMessage DeserializeLength(Stream stream, int length);
    public static InputMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, InputMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static InputMessage Deserialize(Byte[] buffer, InputMessage instance, bool isDelta);
    public static InputMessage Deserialize(Stream stream, InputMessage instance, bool isDelta);
    public static InputMessage DeserializeLengthDelimited(Stream stream, InputMessage instance, bool isDelta);
    public static InputMessage DeserializeLength(Stream stream, int length, InputMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, InputMessage instance, InputMessage previous);
    public static void Serialize(Stream stream, InputMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(InputMessage instance);
    public static void SerializeLengthDelimited(Stream stream, InputMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public interface IStreamReader {
    public abstract virtual byte UInt8();
    public abstract virtual ushort UInt16();
    public abstract virtual UInt32 UInt32();
    public abstract virtual ulong UInt64();
    public abstract virtual sbyte Int8();
    public abstract virtual short Int16();
    public abstract virtual int Int32();
    public abstract virtual long Int64();
    public abstract virtual bool Bool();
    public abstract virtual float Float();
    public abstract virtual double Double();
    public abstract virtual UInt32 VarUInt32();
    public abstract virtual string StringRaw(int maxLength, bool variableLength);
    public abstract virtual Byte[] BytesWithSize(UInt32 maxLength, bool variableLength);
    public abstract virtual ArraySegment`1<byte> PooledBytes(UInt32 maxLength, bool variableLength);
}
public interface IStreamWriter {
    public abstract virtual void UInt8(byte val);
    public abstract virtual void UInt16(ushort val);
    public abstract virtual void UInt32(UInt32 val);
    public abstract virtual void UInt64(ulong val);
    public abstract virtual void Int8(sbyte val);
    public abstract virtual void Int16(short val);
    public abstract virtual void Int32(int val);
    public abstract virtual void Int64(long val);
    public abstract virtual void Bool(bool val);
    public abstract virtual void Float(float val);
    public abstract virtual void Double(double val);
    public abstract virtual void Bytes(Byte[] val);
    public abstract virtual void BytesWithSize(Byte[] val, bool variableLength);
    public abstract virtual void String(string val, bool variableLength);
}
public class ItemContainerId : ValueType {
    public ulong Value;
    public static ItemContainerId Invalid;
    public bool IsValid { get; }
    public ItemContainerId(ulong value);
    private static ItemContainerId();
    public bool get_IsValid();
    public virtual string ToString();
    public sealed virtual bool Equals(ItemContainerId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ItemContainerId left, ItemContainerId right);
    public static bool op_Inequality(ItemContainerId left, ItemContainerId right);
}
public class ItemId : ValueType {
    public ulong Value;
    public bool IsValid { get; }
    public ItemId(ulong value);
    public bool get_IsValid();
    public virtual string ToString();
    public sealed virtual bool Equals(ItemId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ItemId left, ItemId right);
    public static bool op_Inequality(ItemId left, ItemId right);
}
[FlagsAttribute]
public enum ItemMoveModifier : Enum {
    public int value__;
    public static ItemMoveModifier None;
    public static ItemMoveModifier Alt;
    public static ItemMoveModifier Shift;
    public static ItemMoveModifier Ctrl;
    public static ItemMoveModifier BackpackOpen;
}
public class ModelState : object {
    public float waterLevel;
    public Vector3 lookDir;
    public int flags;
    public int poseType;
    public Vector3 inheritedVelocity;
    public int ladderType;
    public Vector3 guidePosition;
    public Vector3 guideRotation;
    public UInt32 guidePrefab;
    public bool guideValid;
    public int guideVersion;
    public bool ShouldPool;
    private bool _disposed;
    public bool ducked { get; public set; }
    public bool jumped { get; public set; }
    public bool onground { get; public set; }
    public bool sleeping { get; public set; }
    public bool sprinting { get; public set; }
    public bool onLadder { get; public set; }
    public bool flying { get; public set; }
    public bool aiming { get; public set; }
    public bool prone { get; public set; }
    public bool mounted { get; public set; }
    public bool relaxed { get; public set; }
    public bool onPhone { get; public set; }
    public bool crawling { get; public set; }
    public bool hasParachute { get; public set; }
    public bool headLook { get; public set; }
    public bool loading { get; public set; }
    public static void ResetToPool(ModelState instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ModelState instance);
    public ModelState Copy();
    public static ModelState Deserialize(Stream stream);
    public static ModelState DeserializeLengthDelimited(Stream stream);
    public static ModelState DeserializeLength(Stream stream, int length);
    public static ModelState Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ModelState previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ModelState Deserialize(Byte[] buffer, ModelState instance, bool isDelta);
    public static ModelState Deserialize(Stream stream, ModelState instance, bool isDelta);
    public static ModelState DeserializeLengthDelimited(Stream stream, ModelState instance, bool isDelta);
    public static ModelState DeserializeLength(Stream stream, int length, ModelState instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ModelState instance, ModelState previous);
    public static void Serialize(Stream stream, ModelState instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ModelState instance);
    public static void SerializeLengthDelimited(Stream stream, ModelState instance);
    public void InspectUids(UidInspector`1<ulong> action);
    public bool HasFlag(Flag f);
    public void SetFlag(Flag f, bool b);
    public bool get_ducked();
    public void set_ducked(bool value);
    public bool get_jumped();
    public void set_jumped(bool value);
    public bool get_onground();
    public void set_onground(bool value);
    public bool get_sleeping();
    public void set_sleeping(bool value);
    public bool get_sprinting();
    public void set_sprinting(bool value);
    public bool get_onLadder();
    public void set_onLadder(bool value);
    public bool get_flying();
    public void set_flying(bool value);
    public bool get_aiming();
    public void set_aiming(bool value);
    public bool get_prone();
    public void set_prone(bool value);
    public bool get_mounted();
    public void set_mounted(bool value);
    public bool get_relaxed();
    public void set_relaxed(bool value);
    public bool get_onPhone();
    public void set_onPhone(bool value);
    public bool get_crawling();
    public void set_crawling(bool value);
    public bool get_hasParachute();
    public void set_hasParachute(bool value);
    public bool get_headLook();
    public void set_headLook(bool value);
    public bool get_loading();
    public void set_loading(bool value);
    public static bool Equal(ModelState a, ModelState b);
}
public class NetworkableId : ValueType {
    public ulong Value;
    public bool IsValid { get; }
    public NetworkableId(ulong value);
    public bool get_IsValid();
    public virtual string ToString();
    public sealed virtual bool Equals(NetworkableId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NetworkableId left, NetworkableId right);
    public static bool op_Inequality(NetworkableId left, NetworkableId right);
}
public class NetworkDefines : object {
    public static int MinNetWriteBufferSize;
    public static int MaxNetWriteBufferSize;
    public static int MaxNetReadPacketSize;
    public static int MinNetReadBufferSize;
    public static int MaxNetReadBufferSize;
    public static int MaxServerPacketSize;
}
public class PlayerTick : object {
    public InputMessage inputState;
    public Vector3 position;
    public ModelState modelState;
    public ItemId activeItem;
    public Vector3 eyePos;
    public NetworkableId parentID;
    public UInt32 deltaMs;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerTick instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerTick instance);
    public PlayerTick Copy();
    public static PlayerTick Deserialize(Stream stream);
    public static PlayerTick DeserializeLengthDelimited(Stream stream);
    public static PlayerTick DeserializeLength(Stream stream, int length);
    public static PlayerTick Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerTick previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerTick Deserialize(Byte[] buffer, PlayerTick instance, bool isDelta);
    public static PlayerTick Deserialize(Stream stream, PlayerTick instance, bool isDelta);
    public static PlayerTick DeserializeLengthDelimited(Stream stream, PlayerTick instance, bool isDelta);
    public static PlayerTick DeserializeLength(Stream stream, int length, PlayerTick instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerTick instance, PlayerTick previous);
    public static void Serialize(Stream stream, PlayerTick instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerTick instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerTick instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AggressionTimerAIEventData : object {
    public float value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AggressionTimerAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AggressionTimerAIEventData instance);
    public AggressionTimerAIEventData Copy();
    public static AggressionTimerAIEventData Deserialize(Stream stream);
    public static AggressionTimerAIEventData DeserializeLengthDelimited(Stream stream);
    public static AggressionTimerAIEventData DeserializeLength(Stream stream, int length);
    public static AggressionTimerAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AggressionTimerAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AggressionTimerAIEventData Deserialize(Byte[] buffer, AggressionTimerAIEventData instance, bool isDelta);
    public static AggressionTimerAIEventData Deserialize(Stream stream, AggressionTimerAIEventData instance, bool isDelta);
    public static AggressionTimerAIEventData DeserializeLengthDelimited(Stream stream, AggressionTimerAIEventData instance, bool isDelta);
    public static AggressionTimerAIEventData DeserializeLength(Stream stream, int length, AggressionTimerAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AggressionTimerAIEventData instance, AggressionTimerAIEventData previous);
    public static void Serialize(Stream stream, AggressionTimerAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AggressionTimerAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, AggressionTimerAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AIDesign : object {
    public List`1<int> availableStates;
    public List`1<AIStateContainer> stateContainers;
    public int defaultStateContainer;
    public string description;
    public int scope;
    public int intialViewStateID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AIDesign instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AIDesign instance);
    public AIDesign Copy();
    public static AIDesign Deserialize(Stream stream);
    public static AIDesign DeserializeLengthDelimited(Stream stream);
    public static AIDesign DeserializeLength(Stream stream, int length);
    public static AIDesign Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AIDesign previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AIDesign Deserialize(Byte[] buffer, AIDesign instance, bool isDelta);
    public static AIDesign Deserialize(Stream stream, AIDesign instance, bool isDelta);
    public static AIDesign DeserializeLengthDelimited(Stream stream, AIDesign instance, bool isDelta);
    public static AIDesign DeserializeLength(Stream stream, int length, AIDesign instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AIDesign instance, AIDesign previous);
    public static void Serialize(Stream stream, AIDesign instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AIDesign instance);
    public static void SerializeLengthDelimited(Stream stream, AIDesign instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AIEventData : object {
    public int eventType;
    public int triggerStateContainer;
    public bool inverted;
    public int inputMemorySlot;
    public int outputMemorySlot;
    public int id;
    public TimerAIEventData timerData;
    public PlayerDetectedAIEventData playerDetectedData;
    public HealthBelowAIEventData healthBelowData;
    public InRangeAIEventData inRangeData;
    public HungerAboveAIEventData hungerAboveData;
    public TirednessAboveAIEventData tirednessAboveData;
    public ThreatDetectedAIEventData threatDetectedData;
    public TargetDetectedAIEventData targetDetectedData;
    public AmmoBelowAIEventData ammoBelowData;
    public ChanceAIEventData chanceData;
    public TimeSinceThreatAIEventData timeSinceThreatData;
    public AggressionTimerAIEventData aggressionTimerData;
    public InRangeOfHomeAIEventData inRangeOfHomeData;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AIEventData instance);
    public AIEventData Copy();
    public static AIEventData Deserialize(Stream stream);
    public static AIEventData DeserializeLengthDelimited(Stream stream);
    public static AIEventData DeserializeLength(Stream stream, int length);
    public static AIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AIEventData Deserialize(Byte[] buffer, AIEventData instance, bool isDelta);
    public static AIEventData Deserialize(Stream stream, AIEventData instance, bool isDelta);
    public static AIEventData DeserializeLengthDelimited(Stream stream, AIEventData instance, bool isDelta);
    public static AIEventData DeserializeLength(Stream stream, int length, AIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AIEventData instance, AIEventData previous);
    public static void Serialize(Stream stream, AIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, AIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AIStateContainer : object {
    public int id;
    public int state;
    public List`1<AIEventData> events;
    public int inputMemorySlot;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AIStateContainer instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AIStateContainer instance);
    public AIStateContainer Copy();
    public static AIStateContainer Deserialize(Stream stream);
    public static AIStateContainer DeserializeLengthDelimited(Stream stream);
    public static AIStateContainer DeserializeLength(Stream stream, int length);
    public static AIStateContainer Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AIStateContainer previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AIStateContainer Deserialize(Byte[] buffer, AIStateContainer instance, bool isDelta);
    public static AIStateContainer Deserialize(Stream stream, AIStateContainer instance, bool isDelta);
    public static AIStateContainer DeserializeLengthDelimited(Stream stream, AIStateContainer instance, bool isDelta);
    public static AIStateContainer DeserializeLength(Stream stream, int length, AIStateContainer instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AIStateContainer instance, AIStateContainer previous);
    public static void Serialize(Stream stream, AIStateContainer instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AIStateContainer instance);
    public static void SerializeLengthDelimited(Stream stream, AIStateContainer instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AmmoBelowAIEventData : object {
    public float value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AmmoBelowAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AmmoBelowAIEventData instance);
    public AmmoBelowAIEventData Copy();
    public static AmmoBelowAIEventData Deserialize(Stream stream);
    public static AmmoBelowAIEventData DeserializeLengthDelimited(Stream stream);
    public static AmmoBelowAIEventData DeserializeLength(Stream stream, int length);
    public static AmmoBelowAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AmmoBelowAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AmmoBelowAIEventData Deserialize(Byte[] buffer, AmmoBelowAIEventData instance, bool isDelta);
    public static AmmoBelowAIEventData Deserialize(Stream stream, AmmoBelowAIEventData instance, bool isDelta);
    public static AmmoBelowAIEventData DeserializeLengthDelimited(Stream stream, AmmoBelowAIEventData instance, bool isDelta);
    public static AmmoBelowAIEventData DeserializeLength(Stream stream, int length, AmmoBelowAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AmmoBelowAIEventData instance, AmmoBelowAIEventData previous);
    public static void Serialize(Stream stream, AmmoBelowAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AmmoBelowAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, AmmoBelowAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppBroadcast : object {
    public AppTeamChanged teamChanged;
    public AppNewTeamMessage teamMessage;
    public AppEntityChanged entityChanged;
    public AppClanChanged clanChanged;
    public AppNewClanMessage clanMessage;
    public AppCameraRays cameraRays;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppBroadcast instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppBroadcast instance);
    public AppBroadcast Copy();
    public static AppBroadcast Deserialize(Stream stream);
    public static AppBroadcast DeserializeLengthDelimited(Stream stream);
    public static AppBroadcast DeserializeLength(Stream stream, int length);
    public static AppBroadcast Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppBroadcast previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppBroadcast Deserialize(Byte[] buffer, AppBroadcast instance, bool isDelta);
    public static AppBroadcast Deserialize(Stream stream, AppBroadcast instance, bool isDelta);
    public static AppBroadcast DeserializeLengthDelimited(Stream stream, AppBroadcast instance, bool isDelta);
    public static AppBroadcast DeserializeLength(Stream stream, int length, AppBroadcast instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppBroadcast instance, AppBroadcast previous);
    public static void Serialize(Stream stream, AppBroadcast instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppBroadcast instance);
    public static void SerializeLengthDelimited(Stream stream, AppBroadcast instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppCameraInfo : object {
    public int width;
    public int height;
    public float nearPlane;
    public float farPlane;
    public int controlFlags;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppCameraInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppCameraInfo instance);
    public AppCameraInfo Copy();
    public static AppCameraInfo Deserialize(Stream stream);
    public static AppCameraInfo DeserializeLengthDelimited(Stream stream);
    public static AppCameraInfo DeserializeLength(Stream stream, int length);
    public static AppCameraInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppCameraInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppCameraInfo Deserialize(Byte[] buffer, AppCameraInfo instance, bool isDelta);
    public static AppCameraInfo Deserialize(Stream stream, AppCameraInfo instance, bool isDelta);
    public static AppCameraInfo DeserializeLengthDelimited(Stream stream, AppCameraInfo instance, bool isDelta);
    public static AppCameraInfo DeserializeLength(Stream stream, int length, AppCameraInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppCameraInfo instance, AppCameraInfo previous);
    public static void Serialize(Stream stream, AppCameraInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppCameraInfo instance);
    public static void SerializeLengthDelimited(Stream stream, AppCameraInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppCameraInput : object {
    public int buttons;
    public Vector2 mouseDelta;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppCameraInput instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppCameraInput instance);
    public AppCameraInput Copy();
    public static AppCameraInput Deserialize(Stream stream);
    public static AppCameraInput DeserializeLengthDelimited(Stream stream);
    public static AppCameraInput DeserializeLength(Stream stream, int length);
    public static AppCameraInput Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppCameraInput previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppCameraInput Deserialize(Byte[] buffer, AppCameraInput instance, bool isDelta);
    public static AppCameraInput Deserialize(Stream stream, AppCameraInput instance, bool isDelta);
    public static AppCameraInput DeserializeLengthDelimited(Stream stream, AppCameraInput instance, bool isDelta);
    public static AppCameraInput DeserializeLength(Stream stream, int length, AppCameraInput instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppCameraInput instance, AppCameraInput previous);
    public static void Serialize(Stream stream, AppCameraInput instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppCameraInput instance);
    public static void SerializeLengthDelimited(Stream stream, AppCameraInput instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppCameraRays : object {
    public float verticalFov;
    public int sampleOffset;
    public ArraySegment`1<byte> rayData;
    public float distance;
    public List`1<Entity> entities;
    public float timeOfDay;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppCameraRays instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppCameraRays instance);
    public AppCameraRays Copy();
    public static AppCameraRays Deserialize(Stream stream);
    public static AppCameraRays DeserializeLengthDelimited(Stream stream);
    public static AppCameraRays DeserializeLength(Stream stream, int length);
    public static AppCameraRays Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppCameraRays previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppCameraRays Deserialize(Byte[] buffer, AppCameraRays instance, bool isDelta);
    public static AppCameraRays Deserialize(Stream stream, AppCameraRays instance, bool isDelta);
    public static AppCameraRays DeserializeLengthDelimited(Stream stream, AppCameraRays instance, bool isDelta);
    public static AppCameraRays DeserializeLength(Stream stream, int length, AppCameraRays instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppCameraRays instance, AppCameraRays previous);
    public static void Serialize(Stream stream, AppCameraRays instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppCameraRays instance);
    public static void SerializeLengthDelimited(Stream stream, AppCameraRays instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppCameraSubscribe : object {
    public string cameraId;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppCameraSubscribe instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppCameraSubscribe instance);
    public AppCameraSubscribe Copy();
    public static AppCameraSubscribe Deserialize(Stream stream);
    public static AppCameraSubscribe DeserializeLengthDelimited(Stream stream);
    public static AppCameraSubscribe DeserializeLength(Stream stream, int length);
    public static AppCameraSubscribe Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppCameraSubscribe previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppCameraSubscribe Deserialize(Byte[] buffer, AppCameraSubscribe instance, bool isDelta);
    public static AppCameraSubscribe Deserialize(Stream stream, AppCameraSubscribe instance, bool isDelta);
    public static AppCameraSubscribe DeserializeLengthDelimited(Stream stream, AppCameraSubscribe instance, bool isDelta);
    public static AppCameraSubscribe DeserializeLength(Stream stream, int length, AppCameraSubscribe instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppCameraSubscribe instance, AppCameraSubscribe previous);
    public static void Serialize(Stream stream, AppCameraSubscribe instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppCameraSubscribe instance);
    public static void SerializeLengthDelimited(Stream stream, AppCameraSubscribe instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppClanChanged : object {
    public ClanInfo clanInfo;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppClanChanged instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppClanChanged instance);
    public AppClanChanged Copy();
    public static AppClanChanged Deserialize(Stream stream);
    public static AppClanChanged DeserializeLengthDelimited(Stream stream);
    public static AppClanChanged DeserializeLength(Stream stream, int length);
    public static AppClanChanged Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppClanChanged previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppClanChanged Deserialize(Byte[] buffer, AppClanChanged instance, bool isDelta);
    public static AppClanChanged Deserialize(Stream stream, AppClanChanged instance, bool isDelta);
    public static AppClanChanged DeserializeLengthDelimited(Stream stream, AppClanChanged instance, bool isDelta);
    public static AppClanChanged DeserializeLength(Stream stream, int length, AppClanChanged instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppClanChanged instance, AppClanChanged previous);
    public static void Serialize(Stream stream, AppClanChanged instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppClanChanged instance);
    public static void SerializeLengthDelimited(Stream stream, AppClanChanged instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppClanChat : object {
    public List`1<AppClanMessage> messages;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppClanChat instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppClanChat instance);
    public AppClanChat Copy();
    public static AppClanChat Deserialize(Stream stream);
    public static AppClanChat DeserializeLengthDelimited(Stream stream);
    public static AppClanChat DeserializeLength(Stream stream, int length);
    public static AppClanChat Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppClanChat previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppClanChat Deserialize(Byte[] buffer, AppClanChat instance, bool isDelta);
    public static AppClanChat Deserialize(Stream stream, AppClanChat instance, bool isDelta);
    public static AppClanChat DeserializeLengthDelimited(Stream stream, AppClanChat instance, bool isDelta);
    public static AppClanChat DeserializeLength(Stream stream, int length, AppClanChat instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppClanChat instance, AppClanChat previous);
    public static void Serialize(Stream stream, AppClanChat instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppClanChat instance);
    public static void SerializeLengthDelimited(Stream stream, AppClanChat instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppClanInfo : object {
    public ClanInfo clanInfo;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppClanInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppClanInfo instance);
    public AppClanInfo Copy();
    public static AppClanInfo Deserialize(Stream stream);
    public static AppClanInfo DeserializeLengthDelimited(Stream stream);
    public static AppClanInfo DeserializeLength(Stream stream, int length);
    public static AppClanInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppClanInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppClanInfo Deserialize(Byte[] buffer, AppClanInfo instance, bool isDelta);
    public static AppClanInfo Deserialize(Stream stream, AppClanInfo instance, bool isDelta);
    public static AppClanInfo DeserializeLengthDelimited(Stream stream, AppClanInfo instance, bool isDelta);
    public static AppClanInfo DeserializeLength(Stream stream, int length, AppClanInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppClanInfo instance, AppClanInfo previous);
    public static void Serialize(Stream stream, AppClanInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppClanInfo instance);
    public static void SerializeLengthDelimited(Stream stream, AppClanInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppClanMessage : object {
    public ulong steamId;
    public string name;
    public string message;
    public long time;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppClanMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppClanMessage instance);
    public AppClanMessage Copy();
    public static AppClanMessage Deserialize(Stream stream);
    public static AppClanMessage DeserializeLengthDelimited(Stream stream);
    public static AppClanMessage DeserializeLength(Stream stream, int length);
    public static AppClanMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppClanMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppClanMessage Deserialize(Byte[] buffer, AppClanMessage instance, bool isDelta);
    public static AppClanMessage Deserialize(Stream stream, AppClanMessage instance, bool isDelta);
    public static AppClanMessage DeserializeLengthDelimited(Stream stream, AppClanMessage instance, bool isDelta);
    public static AppClanMessage DeserializeLength(Stream stream, int length, AppClanMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppClanMessage instance, AppClanMessage previous);
    public static void Serialize(Stream stream, AppClanMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppClanMessage instance);
    public static void SerializeLengthDelimited(Stream stream, AppClanMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppEmpty : object {
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppEmpty instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppEmpty instance);
    public AppEmpty Copy();
    public static AppEmpty Deserialize(Stream stream);
    public static AppEmpty DeserializeLengthDelimited(Stream stream);
    public static AppEmpty DeserializeLength(Stream stream, int length);
    public static AppEmpty Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppEmpty previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppEmpty Deserialize(Byte[] buffer, AppEmpty instance, bool isDelta);
    public static AppEmpty Deserialize(Stream stream, AppEmpty instance, bool isDelta);
    public static AppEmpty DeserializeLengthDelimited(Stream stream, AppEmpty instance, bool isDelta);
    public static AppEmpty DeserializeLength(Stream stream, int length, AppEmpty instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppEmpty instance, AppEmpty previous);
    public static void Serialize(Stream stream, AppEmpty instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppEmpty instance);
    public static void SerializeLengthDelimited(Stream stream, AppEmpty instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppEntityChanged : object {
    public NetworkableId entityId;
    public AppEntityPayload payload;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppEntityChanged instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppEntityChanged instance);
    public AppEntityChanged Copy();
    public static AppEntityChanged Deserialize(Stream stream);
    public static AppEntityChanged DeserializeLengthDelimited(Stream stream);
    public static AppEntityChanged DeserializeLength(Stream stream, int length);
    public static AppEntityChanged Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppEntityChanged previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppEntityChanged Deserialize(Byte[] buffer, AppEntityChanged instance, bool isDelta);
    public static AppEntityChanged Deserialize(Stream stream, AppEntityChanged instance, bool isDelta);
    public static AppEntityChanged DeserializeLengthDelimited(Stream stream, AppEntityChanged instance, bool isDelta);
    public static AppEntityChanged DeserializeLength(Stream stream, int length, AppEntityChanged instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppEntityChanged instance, AppEntityChanged previous);
    public static void Serialize(Stream stream, AppEntityChanged instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppEntityChanged instance);
    public static void SerializeLengthDelimited(Stream stream, AppEntityChanged instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppEntityInfo : object {
    public AppEntityType type;
    public AppEntityPayload payload;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppEntityInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppEntityInfo instance);
    public AppEntityInfo Copy();
    public static AppEntityInfo Deserialize(Stream stream);
    public static AppEntityInfo DeserializeLengthDelimited(Stream stream);
    public static AppEntityInfo DeserializeLength(Stream stream, int length);
    public static AppEntityInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppEntityInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppEntityInfo Deserialize(Byte[] buffer, AppEntityInfo instance, bool isDelta);
    public static AppEntityInfo Deserialize(Stream stream, AppEntityInfo instance, bool isDelta);
    public static AppEntityInfo DeserializeLengthDelimited(Stream stream, AppEntityInfo instance, bool isDelta);
    public static AppEntityInfo DeserializeLength(Stream stream, int length, AppEntityInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppEntityInfo instance, AppEntityInfo previous);
    public static void Serialize(Stream stream, AppEntityInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppEntityInfo instance);
    public static void SerializeLengthDelimited(Stream stream, AppEntityInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppEntityPayload : object {
    public bool value;
    public List`1<Item> items;
    public int capacity;
    public bool hasProtection;
    public UInt32 protectionExpiry;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppEntityPayload instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppEntityPayload instance);
    public AppEntityPayload Copy();
    public static AppEntityPayload Deserialize(Stream stream);
    public static AppEntityPayload DeserializeLengthDelimited(Stream stream);
    public static AppEntityPayload DeserializeLength(Stream stream, int length);
    public static AppEntityPayload Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppEntityPayload previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppEntityPayload Deserialize(Byte[] buffer, AppEntityPayload instance, bool isDelta);
    public static AppEntityPayload Deserialize(Stream stream, AppEntityPayload instance, bool isDelta);
    public static AppEntityPayload DeserializeLengthDelimited(Stream stream, AppEntityPayload instance, bool isDelta);
    public static AppEntityPayload DeserializeLength(Stream stream, int length, AppEntityPayload instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppEntityPayload instance, AppEntityPayload previous);
    public static void Serialize(Stream stream, AppEntityPayload instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppEntityPayload instance);
    public static void SerializeLengthDelimited(Stream stream, AppEntityPayload instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public enum ProtoBuf.AppEntityType : Enum {
    public int value__;
    public static AppEntityType Switch;
    public static AppEntityType Alarm;
    public static AppEntityType StorageMonitor;
}
public class ProtoBuf.AppError : object {
    public string error;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppError instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppError instance);
    public AppError Copy();
    public static AppError Deserialize(Stream stream);
    public static AppError DeserializeLengthDelimited(Stream stream);
    public static AppError DeserializeLength(Stream stream, int length);
    public static AppError Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppError previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppError Deserialize(Byte[] buffer, AppError instance, bool isDelta);
    public static AppError Deserialize(Stream stream, AppError instance, bool isDelta);
    public static AppError DeserializeLengthDelimited(Stream stream, AppError instance, bool isDelta);
    public static AppError DeserializeLength(Stream stream, int length, AppError instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppError instance, AppError previous);
    public static void Serialize(Stream stream, AppError instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppError instance);
    public static void SerializeLengthDelimited(Stream stream, AppError instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppFlag : object {
    public bool value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppFlag instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppFlag instance);
    public AppFlag Copy();
    public static AppFlag Deserialize(Stream stream);
    public static AppFlag DeserializeLengthDelimited(Stream stream);
    public static AppFlag DeserializeLength(Stream stream, int length);
    public static AppFlag Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppFlag previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppFlag Deserialize(Byte[] buffer, AppFlag instance, bool isDelta);
    public static AppFlag Deserialize(Stream stream, AppFlag instance, bool isDelta);
    public static AppFlag DeserializeLengthDelimited(Stream stream, AppFlag instance, bool isDelta);
    public static AppFlag DeserializeLength(Stream stream, int length, AppFlag instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppFlag instance, AppFlag previous);
    public static void Serialize(Stream stream, AppFlag instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppFlag instance);
    public static void SerializeLengthDelimited(Stream stream, AppFlag instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppGetNexusAuth : object {
    public string appKey;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppGetNexusAuth instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppGetNexusAuth instance);
    public AppGetNexusAuth Copy();
    public static AppGetNexusAuth Deserialize(Stream stream);
    public static AppGetNexusAuth DeserializeLengthDelimited(Stream stream);
    public static AppGetNexusAuth DeserializeLength(Stream stream, int length);
    public static AppGetNexusAuth Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppGetNexusAuth previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppGetNexusAuth Deserialize(Byte[] buffer, AppGetNexusAuth instance, bool isDelta);
    public static AppGetNexusAuth Deserialize(Stream stream, AppGetNexusAuth instance, bool isDelta);
    public static AppGetNexusAuth DeserializeLengthDelimited(Stream stream, AppGetNexusAuth instance, bool isDelta);
    public static AppGetNexusAuth DeserializeLength(Stream stream, int length, AppGetNexusAuth instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppGetNexusAuth instance, AppGetNexusAuth previous);
    public static void Serialize(Stream stream, AppGetNexusAuth instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppGetNexusAuth instance);
    public static void SerializeLengthDelimited(Stream stream, AppGetNexusAuth instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppInfo : object {
    public string name;
    public string headerImage;
    public string url;
    public string map;
    public UInt32 mapSize;
    public UInt32 wipeTime;
    public UInt32 players;
    public UInt32 maxPlayers;
    public UInt32 queuedPlayers;
    public UInt32 seed;
    public UInt32 salt;
    public string logoImage;
    public string nexus;
    public int nexusId;
    public string nexusZone;
    public bool camerasEnabled;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppInfo instance);
    public AppInfo Copy();
    public static AppInfo Deserialize(Stream stream);
    public static AppInfo DeserializeLengthDelimited(Stream stream);
    public static AppInfo DeserializeLength(Stream stream, int length);
    public static AppInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppInfo Deserialize(Byte[] buffer, AppInfo instance, bool isDelta);
    public static AppInfo Deserialize(Stream stream, AppInfo instance, bool isDelta);
    public static AppInfo DeserializeLengthDelimited(Stream stream, AppInfo instance, bool isDelta);
    public static AppInfo DeserializeLength(Stream stream, int length, AppInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppInfo instance, AppInfo previous);
    public static void Serialize(Stream stream, AppInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppInfo instance);
    public static void SerializeLengthDelimited(Stream stream, AppInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppMap : object {
    public UInt32 width;
    public UInt32 height;
    public Byte[] jpgImage;
    public int oceanMargin;
    public List`1<Monument> monuments;
    public string background;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppMap instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppMap instance);
    public AppMap Copy();
    public static AppMap Deserialize(Stream stream);
    public static AppMap DeserializeLengthDelimited(Stream stream);
    public static AppMap DeserializeLength(Stream stream, int length);
    public static AppMap Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppMap previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppMap Deserialize(Byte[] buffer, AppMap instance, bool isDelta);
    public static AppMap Deserialize(Stream stream, AppMap instance, bool isDelta);
    public static AppMap DeserializeLengthDelimited(Stream stream, AppMap instance, bool isDelta);
    public static AppMap DeserializeLength(Stream stream, int length, AppMap instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppMap instance, AppMap previous);
    public static void Serialize(Stream stream, AppMap instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppMap instance);
    public static void SerializeLengthDelimited(Stream stream, AppMap instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppMapMarkers : object {
    public List`1<AppMarker> markers;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppMapMarkers instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppMapMarkers instance);
    public AppMapMarkers Copy();
    public static AppMapMarkers Deserialize(Stream stream);
    public static AppMapMarkers DeserializeLengthDelimited(Stream stream);
    public static AppMapMarkers DeserializeLength(Stream stream, int length);
    public static AppMapMarkers Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppMapMarkers previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppMapMarkers Deserialize(Byte[] buffer, AppMapMarkers instance, bool isDelta);
    public static AppMapMarkers Deserialize(Stream stream, AppMapMarkers instance, bool isDelta);
    public static AppMapMarkers DeserializeLengthDelimited(Stream stream, AppMapMarkers instance, bool isDelta);
    public static AppMapMarkers DeserializeLength(Stream stream, int length, AppMapMarkers instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppMapMarkers instance, AppMapMarkers previous);
    public static void Serialize(Stream stream, AppMapMarkers instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppMapMarkers instance);
    public static void SerializeLengthDelimited(Stream stream, AppMapMarkers instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppMarker : object {
    public NetworkableId id;
    public AppMarkerType type;
    public float x;
    public float y;
    public ulong steamId;
    public float rotation;
    public float radius;
    public Vector4 color1;
    public Vector4 color2;
    public float alpha;
    public string name;
    public bool outOfStock;
    public List`1<SellOrder> sellOrders;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppMarker instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppMarker instance);
    public AppMarker Copy();
    public static AppMarker Deserialize(Stream stream);
    public static AppMarker DeserializeLengthDelimited(Stream stream);
    public static AppMarker DeserializeLength(Stream stream, int length);
    public static AppMarker Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppMarker previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppMarker Deserialize(Byte[] buffer, AppMarker instance, bool isDelta);
    public static AppMarker Deserialize(Stream stream, AppMarker instance, bool isDelta);
    public static AppMarker DeserializeLengthDelimited(Stream stream, AppMarker instance, bool isDelta);
    public static AppMarker DeserializeLength(Stream stream, int length, AppMarker instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppMarker instance, AppMarker previous);
    public static void Serialize(Stream stream, AppMarker instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppMarker instance);
    public static void SerializeLengthDelimited(Stream stream, AppMarker instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public enum ProtoBuf.AppMarkerType : Enum {
    public int value__;
    public static AppMarkerType Undefined;
    public static AppMarkerType Player;
    public static AppMarkerType Explosion;
    public static AppMarkerType VendingMachine;
    public static AppMarkerType CH47;
    public static AppMarkerType CargoShip;
    public static AppMarkerType Crate;
    public static AppMarkerType GenericRadius;
    public static AppMarkerType PatrolHelicopter;
    public static AppMarkerType TravellingVendor;
}
public class ProtoBuf.AppMessage : object {
    public AppResponse response;
    public AppBroadcast broadcast;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppMessage instance);
    public AppMessage Copy();
    public static AppMessage Deserialize(Stream stream);
    public static AppMessage DeserializeLengthDelimited(Stream stream);
    public static AppMessage DeserializeLength(Stream stream, int length);
    public static AppMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppMessage Deserialize(Byte[] buffer, AppMessage instance, bool isDelta);
    public static AppMessage Deserialize(Stream stream, AppMessage instance, bool isDelta);
    public static AppMessage DeserializeLengthDelimited(Stream stream, AppMessage instance, bool isDelta);
    public static AppMessage DeserializeLength(Stream stream, int length, AppMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppMessage instance, AppMessage previous);
    public static void Serialize(Stream stream, AppMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppMessage instance);
    public static void SerializeLengthDelimited(Stream stream, AppMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppNewClanMessage : object {
    public long clanId;
    public AppClanMessage message;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppNewClanMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppNewClanMessage instance);
    public AppNewClanMessage Copy();
    public static AppNewClanMessage Deserialize(Stream stream);
    public static AppNewClanMessage DeserializeLengthDelimited(Stream stream);
    public static AppNewClanMessage DeserializeLength(Stream stream, int length);
    public static AppNewClanMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppNewClanMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppNewClanMessage Deserialize(Byte[] buffer, AppNewClanMessage instance, bool isDelta);
    public static AppNewClanMessage Deserialize(Stream stream, AppNewClanMessage instance, bool isDelta);
    public static AppNewClanMessage DeserializeLengthDelimited(Stream stream, AppNewClanMessage instance, bool isDelta);
    public static AppNewClanMessage DeserializeLength(Stream stream, int length, AppNewClanMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppNewClanMessage instance, AppNewClanMessage previous);
    public static void Serialize(Stream stream, AppNewClanMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppNewClanMessage instance);
    public static void SerializeLengthDelimited(Stream stream, AppNewClanMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppNewTeamMessage : object {
    public AppTeamMessage message;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppNewTeamMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppNewTeamMessage instance);
    public AppNewTeamMessage Copy();
    public static AppNewTeamMessage Deserialize(Stream stream);
    public static AppNewTeamMessage DeserializeLengthDelimited(Stream stream);
    public static AppNewTeamMessage DeserializeLength(Stream stream, int length);
    public static AppNewTeamMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppNewTeamMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppNewTeamMessage Deserialize(Byte[] buffer, AppNewTeamMessage instance, bool isDelta);
    public static AppNewTeamMessage Deserialize(Stream stream, AppNewTeamMessage instance, bool isDelta);
    public static AppNewTeamMessage DeserializeLengthDelimited(Stream stream, AppNewTeamMessage instance, bool isDelta);
    public static AppNewTeamMessage DeserializeLength(Stream stream, int length, AppNewTeamMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppNewTeamMessage instance, AppNewTeamMessage previous);
    public static void Serialize(Stream stream, AppNewTeamMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppNewTeamMessage instance);
    public static void SerializeLengthDelimited(Stream stream, AppNewTeamMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppNexusAuth : object {
    public string serverId;
    public int playerToken;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppNexusAuth instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppNexusAuth instance);
    public AppNexusAuth Copy();
    public static AppNexusAuth Deserialize(Stream stream);
    public static AppNexusAuth DeserializeLengthDelimited(Stream stream);
    public static AppNexusAuth DeserializeLength(Stream stream, int length);
    public static AppNexusAuth Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppNexusAuth previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppNexusAuth Deserialize(Byte[] buffer, AppNexusAuth instance, bool isDelta);
    public static AppNexusAuth Deserialize(Stream stream, AppNexusAuth instance, bool isDelta);
    public static AppNexusAuth DeserializeLengthDelimited(Stream stream, AppNexusAuth instance, bool isDelta);
    public static AppNexusAuth DeserializeLength(Stream stream, int length, AppNexusAuth instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppNexusAuth instance, AppNexusAuth previous);
    public static void Serialize(Stream stream, AppNexusAuth instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppNexusAuth instance);
    public static void SerializeLengthDelimited(Stream stream, AppNexusAuth instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppPromoteToLeader : object {
    public ulong steamId;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppPromoteToLeader instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppPromoteToLeader instance);
    public AppPromoteToLeader Copy();
    public static AppPromoteToLeader Deserialize(Stream stream);
    public static AppPromoteToLeader DeserializeLengthDelimited(Stream stream);
    public static AppPromoteToLeader DeserializeLength(Stream stream, int length);
    public static AppPromoteToLeader Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppPromoteToLeader previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppPromoteToLeader Deserialize(Byte[] buffer, AppPromoteToLeader instance, bool isDelta);
    public static AppPromoteToLeader Deserialize(Stream stream, AppPromoteToLeader instance, bool isDelta);
    public static AppPromoteToLeader DeserializeLengthDelimited(Stream stream, AppPromoteToLeader instance, bool isDelta);
    public static AppPromoteToLeader DeserializeLength(Stream stream, int length, AppPromoteToLeader instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppPromoteToLeader instance, AppPromoteToLeader previous);
    public static void Serialize(Stream stream, AppPromoteToLeader instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppPromoteToLeader instance);
    public static void SerializeLengthDelimited(Stream stream, AppPromoteToLeader instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppRequest : object {
    public UInt32 seq;
    public ulong playerId;
    public int playerToken;
    public NetworkableId entityId;
    public AppEmpty getInfo;
    public AppEmpty getTime;
    public AppEmpty getMap;
    public AppEmpty getTeamInfo;
    public AppEmpty getTeamChat;
    public AppSendMessage sendTeamMessage;
    public AppEmpty getEntityInfo;
    public AppSetEntityValue setEntityValue;
    public AppEmpty checkSubscription;
    public AppFlag setSubscription;
    public AppEmpty getMapMarkers;
    public AppPromoteToLeader promoteToLeader;
    public AppEmpty getClanInfo;
    public AppSendMessage setClanMotd;
    public AppEmpty getClanChat;
    public AppSendMessage sendClanMessage;
    public AppGetNexusAuth getNexusAuth;
    public AppCameraSubscribe cameraSubscribe;
    public AppEmpty cameraUnsubscribe;
    public AppCameraInput cameraInput;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppRequest instance);
    public AppRequest Copy();
    public static AppRequest Deserialize(Stream stream);
    public static AppRequest DeserializeLengthDelimited(Stream stream);
    public static AppRequest DeserializeLength(Stream stream, int length);
    public static AppRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppRequest Deserialize(Byte[] buffer, AppRequest instance, bool isDelta);
    public static AppRequest Deserialize(Stream stream, AppRequest instance, bool isDelta);
    public static AppRequest DeserializeLengthDelimited(Stream stream, AppRequest instance, bool isDelta);
    public static AppRequest DeserializeLength(Stream stream, int length, AppRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppRequest instance, AppRequest previous);
    public static void Serialize(Stream stream, AppRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppRequest instance);
    public static void SerializeLengthDelimited(Stream stream, AppRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppResponse : object {
    public UInt32 seq;
    public AppSuccess success;
    public AppError error;
    public AppInfo info;
    public AppTime time;
    public AppMap map;
    public AppTeamInfo teamInfo;
    public AppTeamChat teamChat;
    public AppEntityInfo entityInfo;
    public AppFlag flag;
    public AppMapMarkers mapMarkers;
    public AppClanInfo clanInfo;
    public AppClanChat clanChat;
    public AppNexusAuth nexusAuth;
    public AppCameraInfo cameraSubscribeInfo;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppResponse instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppResponse instance);
    public AppResponse Copy();
    public static AppResponse Deserialize(Stream stream);
    public static AppResponse DeserializeLengthDelimited(Stream stream);
    public static AppResponse DeserializeLength(Stream stream, int length);
    public static AppResponse Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppResponse previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppResponse Deserialize(Byte[] buffer, AppResponse instance, bool isDelta);
    public static AppResponse Deserialize(Stream stream, AppResponse instance, bool isDelta);
    public static AppResponse DeserializeLengthDelimited(Stream stream, AppResponse instance, bool isDelta);
    public static AppResponse DeserializeLength(Stream stream, int length, AppResponse instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppResponse instance, AppResponse previous);
    public static void Serialize(Stream stream, AppResponse instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppResponse instance);
    public static void SerializeLengthDelimited(Stream stream, AppResponse instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Approval : object {
    public string level;
    public string hostname;
    public bool modded;
    public bool official;
    public ulong steamid;
    public UInt32 ipaddress;
    public int port;
    public UInt32 levelSeed;
    public UInt32 levelSize;
    public string checksum;
    public UInt32 encryption;
    public string levelUrl;
    public bool levelTransfer;
    public string version;
    public string levelConfig;
    public bool nexus;
    public string nexusEndpoint;
    public int nexusId;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Approval instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Approval instance);
    public Approval Copy();
    public static Approval Deserialize(Stream stream);
    public static Approval DeserializeLengthDelimited(Stream stream);
    public static Approval DeserializeLength(Stream stream, int length);
    public static Approval Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Approval previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Approval Deserialize(Byte[] buffer, Approval instance, bool isDelta);
    public static Approval Deserialize(Stream stream, Approval instance, bool isDelta);
    public static Approval DeserializeLengthDelimited(Stream stream, Approval instance, bool isDelta);
    public static Approval DeserializeLength(Stream stream, int length, Approval instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Approval instance, Approval previous);
    public static void Serialize(Stream stream, Approval instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Approval instance);
    public static void SerializeLengthDelimited(Stream stream, Approval instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppSendMessage : object {
    public string message;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppSendMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppSendMessage instance);
    public AppSendMessage Copy();
    public static AppSendMessage Deserialize(Stream stream);
    public static AppSendMessage DeserializeLengthDelimited(Stream stream);
    public static AppSendMessage DeserializeLength(Stream stream, int length);
    public static AppSendMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppSendMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppSendMessage Deserialize(Byte[] buffer, AppSendMessage instance, bool isDelta);
    public static AppSendMessage Deserialize(Stream stream, AppSendMessage instance, bool isDelta);
    public static AppSendMessage DeserializeLengthDelimited(Stream stream, AppSendMessage instance, bool isDelta);
    public static AppSendMessage DeserializeLength(Stream stream, int length, AppSendMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppSendMessage instance, AppSendMessage previous);
    public static void Serialize(Stream stream, AppSendMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppSendMessage instance);
    public static void SerializeLengthDelimited(Stream stream, AppSendMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppSetEntityValue : object {
    public bool value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppSetEntityValue instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppSetEntityValue instance);
    public AppSetEntityValue Copy();
    public static AppSetEntityValue Deserialize(Stream stream);
    public static AppSetEntityValue DeserializeLengthDelimited(Stream stream);
    public static AppSetEntityValue DeserializeLength(Stream stream, int length);
    public static AppSetEntityValue Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppSetEntityValue previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppSetEntityValue Deserialize(Byte[] buffer, AppSetEntityValue instance, bool isDelta);
    public static AppSetEntityValue Deserialize(Stream stream, AppSetEntityValue instance, bool isDelta);
    public static AppSetEntityValue DeserializeLengthDelimited(Stream stream, AppSetEntityValue instance, bool isDelta);
    public static AppSetEntityValue DeserializeLength(Stream stream, int length, AppSetEntityValue instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppSetEntityValue instance, AppSetEntityValue previous);
    public static void Serialize(Stream stream, AppSetEntityValue instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppSetEntityValue instance);
    public static void SerializeLengthDelimited(Stream stream, AppSetEntityValue instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppSuccess : object {
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppSuccess instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppSuccess instance);
    public AppSuccess Copy();
    public static AppSuccess Deserialize(Stream stream);
    public static AppSuccess DeserializeLengthDelimited(Stream stream);
    public static AppSuccess DeserializeLength(Stream stream, int length);
    public static AppSuccess Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppSuccess previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppSuccess Deserialize(Byte[] buffer, AppSuccess instance, bool isDelta);
    public static AppSuccess Deserialize(Stream stream, AppSuccess instance, bool isDelta);
    public static AppSuccess DeserializeLengthDelimited(Stream stream, AppSuccess instance, bool isDelta);
    public static AppSuccess DeserializeLength(Stream stream, int length, AppSuccess instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppSuccess instance, AppSuccess previous);
    public static void Serialize(Stream stream, AppSuccess instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppSuccess instance);
    public static void SerializeLengthDelimited(Stream stream, AppSuccess instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppTeamChanged : object {
    public ulong playerId;
    public AppTeamInfo teamInfo;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppTeamChanged instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppTeamChanged instance);
    public AppTeamChanged Copy();
    public static AppTeamChanged Deserialize(Stream stream);
    public static AppTeamChanged DeserializeLengthDelimited(Stream stream);
    public static AppTeamChanged DeserializeLength(Stream stream, int length);
    public static AppTeamChanged Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppTeamChanged previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppTeamChanged Deserialize(Byte[] buffer, AppTeamChanged instance, bool isDelta);
    public static AppTeamChanged Deserialize(Stream stream, AppTeamChanged instance, bool isDelta);
    public static AppTeamChanged DeserializeLengthDelimited(Stream stream, AppTeamChanged instance, bool isDelta);
    public static AppTeamChanged DeserializeLength(Stream stream, int length, AppTeamChanged instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppTeamChanged instance, AppTeamChanged previous);
    public static void Serialize(Stream stream, AppTeamChanged instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppTeamChanged instance);
    public static void SerializeLengthDelimited(Stream stream, AppTeamChanged instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppTeamChat : object {
    public List`1<AppTeamMessage> messages;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppTeamChat instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppTeamChat instance);
    public AppTeamChat Copy();
    public static AppTeamChat Deserialize(Stream stream);
    public static AppTeamChat DeserializeLengthDelimited(Stream stream);
    public static AppTeamChat DeserializeLength(Stream stream, int length);
    public static AppTeamChat Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppTeamChat previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppTeamChat Deserialize(Byte[] buffer, AppTeamChat instance, bool isDelta);
    public static AppTeamChat Deserialize(Stream stream, AppTeamChat instance, bool isDelta);
    public static AppTeamChat DeserializeLengthDelimited(Stream stream, AppTeamChat instance, bool isDelta);
    public static AppTeamChat DeserializeLength(Stream stream, int length, AppTeamChat instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppTeamChat instance, AppTeamChat previous);
    public static void Serialize(Stream stream, AppTeamChat instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppTeamChat instance);
    public static void SerializeLengthDelimited(Stream stream, AppTeamChat instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppTeamInfo : object {
    public ulong leaderSteamId;
    public List`1<Member> members;
    public List`1<Note> mapNotes;
    public List`1<Note> leaderMapNotes;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppTeamInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppTeamInfo instance);
    public AppTeamInfo Copy();
    public static AppTeamInfo Deserialize(Stream stream);
    public static AppTeamInfo DeserializeLengthDelimited(Stream stream);
    public static AppTeamInfo DeserializeLength(Stream stream, int length);
    public static AppTeamInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppTeamInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppTeamInfo Deserialize(Byte[] buffer, AppTeamInfo instance, bool isDelta);
    public static AppTeamInfo Deserialize(Stream stream, AppTeamInfo instance, bool isDelta);
    public static AppTeamInfo DeserializeLengthDelimited(Stream stream, AppTeamInfo instance, bool isDelta);
    public static AppTeamInfo DeserializeLength(Stream stream, int length, AppTeamInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppTeamInfo instance, AppTeamInfo previous);
    public static void Serialize(Stream stream, AppTeamInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppTeamInfo instance);
    public static void SerializeLengthDelimited(Stream stream, AppTeamInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppTeamMessage : object {
    public ulong steamId;
    public string name;
    public string message;
    public string color;
    public UInt32 time;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppTeamMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppTeamMessage instance);
    public AppTeamMessage Copy();
    public static AppTeamMessage Deserialize(Stream stream);
    public static AppTeamMessage DeserializeLengthDelimited(Stream stream);
    public static AppTeamMessage DeserializeLength(Stream stream, int length);
    public static AppTeamMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppTeamMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppTeamMessage Deserialize(Byte[] buffer, AppTeamMessage instance, bool isDelta);
    public static AppTeamMessage Deserialize(Stream stream, AppTeamMessage instance, bool isDelta);
    public static AppTeamMessage DeserializeLengthDelimited(Stream stream, AppTeamMessage instance, bool isDelta);
    public static AppTeamMessage DeserializeLength(Stream stream, int length, AppTeamMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppTeamMessage instance, AppTeamMessage previous);
    public static void Serialize(Stream stream, AppTeamMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppTeamMessage instance);
    public static void SerializeLengthDelimited(Stream stream, AppTeamMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AppTime : object {
    public float dayLengthMinutes;
    public float timeScale;
    public float sunrise;
    public float sunset;
    public float time;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AppTime instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AppTime instance);
    public AppTime Copy();
    public static AppTime Deserialize(Stream stream);
    public static AppTime DeserializeLengthDelimited(Stream stream);
    public static AppTime DeserializeLength(Stream stream, int length);
    public static AppTime Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AppTime previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AppTime Deserialize(Byte[] buffer, AppTime instance, bool isDelta);
    public static AppTime Deserialize(Stream stream, AppTime instance, bool isDelta);
    public static AppTime DeserializeLengthDelimited(Stream stream, AppTime instance, bool isDelta);
    public static AppTime DeserializeLength(Stream stream, int length, AppTime instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AppTime instance, AppTime previous);
    public static void Serialize(Stream stream, AppTime instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AppTime instance);
    public static void SerializeLengthDelimited(Stream stream, AppTime instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ArcadeGame : object {
    public List`1<arcadeEnt> arcadeEnts;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ArcadeGame instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ArcadeGame instance);
    public ArcadeGame Copy();
    public static ArcadeGame Deserialize(Stream stream);
    public static ArcadeGame DeserializeLengthDelimited(Stream stream);
    public static ArcadeGame DeserializeLength(Stream stream, int length);
    public static ArcadeGame Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ArcadeGame previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ArcadeGame Deserialize(Byte[] buffer, ArcadeGame instance, bool isDelta);
    public static ArcadeGame Deserialize(Stream stream, ArcadeGame instance, bool isDelta);
    public static ArcadeGame DeserializeLengthDelimited(Stream stream, ArcadeGame instance, bool isDelta);
    public static ArcadeGame DeserializeLength(Stream stream, int length, ArcadeGame instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ArcadeGame instance, ArcadeGame previous);
    public static void Serialize(Stream stream, ArcadeGame instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ArcadeGame instance);
    public static void SerializeLengthDelimited(Stream stream, ArcadeGame instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ArcadeMachine : object {
    public List`1<ScoreEntry> scores;
    public int genericInt1;
    public int genericInt2;
    public int genericInt3;
    public int genericInt4;
    public float genericFloat1;
    public float genericFloat2;
    public float genericFloat3;
    public float genericFloat4;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ArcadeMachine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ArcadeMachine instance);
    public ArcadeMachine Copy();
    public static ArcadeMachine Deserialize(Stream stream);
    public static ArcadeMachine DeserializeLengthDelimited(Stream stream);
    public static ArcadeMachine DeserializeLength(Stream stream, int length);
    public static ArcadeMachine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ArcadeMachine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ArcadeMachine Deserialize(Byte[] buffer, ArcadeMachine instance, bool isDelta);
    public static ArcadeMachine Deserialize(Stream stream, ArcadeMachine instance, bool isDelta);
    public static ArcadeMachine DeserializeLengthDelimited(Stream stream, ArcadeMachine instance, bool isDelta);
    public static ArcadeMachine DeserializeLength(Stream stream, int length, ArcadeMachine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ArcadeMachine instance, ArcadeMachine previous);
    public static void Serialize(Stream stream, ArcadeMachine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ArcadeMachine instance);
    public static void SerializeLengthDelimited(Stream stream, ArcadeMachine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AssociatedFiles : object {
    public List`1<AssociatedFile> files;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AssociatedFiles instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AssociatedFiles instance);
    public AssociatedFiles Copy();
    public static AssociatedFiles Deserialize(Stream stream);
    public static AssociatedFiles DeserializeLengthDelimited(Stream stream);
    public static AssociatedFiles DeserializeLength(Stream stream, int length);
    public static AssociatedFiles Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AssociatedFiles previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AssociatedFiles Deserialize(Byte[] buffer, AssociatedFiles instance, bool isDelta);
    public static AssociatedFiles Deserialize(Stream stream, AssociatedFiles instance, bool isDelta);
    public static AssociatedFiles DeserializeLengthDelimited(Stream stream, AssociatedFiles instance, bool isDelta);
    public static AssociatedFiles DeserializeLength(Stream stream, int length, AssociatedFiles instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AssociatedFiles instance, AssociatedFiles previous);
    public static void Serialize(Stream stream, AssociatedFiles instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AssociatedFiles instance);
    public static void SerializeLengthDelimited(Stream stream, AssociatedFiles instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Attack : object {
    public Vector3 pointStart;
    public Vector3 pointEnd;
    public NetworkableId hitID;
    public UInt32 hitBone;
    public Vector3 hitNormalLocal;
    public Vector3 hitPositionLocal;
    public Vector3 hitNormalWorld;
    public Vector3 hitPositionWorld;
    public UInt32 hitPartID;
    public UInt32 hitMaterialID;
    public NetworkableId srcParentID;
    public NetworkableId dstParentID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Attack instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Attack instance);
    public Attack Copy();
    public static Attack Deserialize(Stream stream);
    public static Attack DeserializeLengthDelimited(Stream stream);
    public static Attack DeserializeLength(Stream stream, int length);
    public static Attack Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Attack previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Attack Deserialize(Byte[] buffer, Attack instance, bool isDelta);
    public static Attack Deserialize(Stream stream, Attack instance, bool isDelta);
    public static Attack DeserializeLengthDelimited(Stream stream, Attack instance, bool isDelta);
    public static Attack DeserializeLength(Stream stream, int length, Attack instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Attack instance, Attack previous);
    public static void Serialize(Stream stream, Attack instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Attack instance);
    public static void SerializeLengthDelimited(Stream stream, Attack instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AttackHeli : object {
    public NetworkableId turretID;
    public NetworkableId rocketsID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AttackHeli instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AttackHeli instance);
    public AttackHeli Copy();
    public static AttackHeli Deserialize(Stream stream);
    public static AttackHeli DeserializeLengthDelimited(Stream stream);
    public static AttackHeli DeserializeLength(Stream stream, int length);
    public static AttackHeli Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AttackHeli previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AttackHeli Deserialize(Byte[] buffer, AttackHeli instance, bool isDelta);
    public static AttackHeli Deserialize(Stream stream, AttackHeli instance, bool isDelta);
    public static AttackHeli DeserializeLengthDelimited(Stream stream, AttackHeli instance, bool isDelta);
    public static AttackHeli DeserializeLength(Stream stream, int length, AttackHeli instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AttackHeli instance, AttackHeli previous);
    public static void Serialize(Stream stream, AttackHeli instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AttackHeli instance);
    public static void SerializeLengthDelimited(Stream stream, AttackHeli instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AttackHeliRockets : object {
    public int totalAmmo;
    public int rocketsSinceReload;
    public bool hasFlares;
    public int ammoItemID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AttackHeliRockets instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AttackHeliRockets instance);
    public AttackHeliRockets Copy();
    public static AttackHeliRockets Deserialize(Stream stream);
    public static AttackHeliRockets DeserializeLengthDelimited(Stream stream);
    public static AttackHeliRockets DeserializeLength(Stream stream, int length);
    public static AttackHeliRockets Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AttackHeliRockets previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AttackHeliRockets Deserialize(Byte[] buffer, AttackHeliRockets instance, bool isDelta);
    public static AttackHeliRockets Deserialize(Stream stream, AttackHeliRockets instance, bool isDelta);
    public static AttackHeliRockets DeserializeLengthDelimited(Stream stream, AttackHeliRockets instance, bool isDelta);
    public static AttackHeliRockets DeserializeLength(Stream stream, int length, AttackHeliRockets instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AttackHeliRockets instance, AttackHeliRockets previous);
    public static void Serialize(Stream stream, AttackHeliRockets instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AttackHeliRockets instance);
    public static void SerializeLengthDelimited(Stream stream, AttackHeliRockets instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AttackHeliTurret : object {
    public int clipAmmo;
    public int totalAmmo;
    public int gunState;
    public float xRot;
    public float yRot;
    public NetworkableId heldEntityID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AttackHeliTurret instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AttackHeliTurret instance);
    public AttackHeliTurret Copy();
    public static AttackHeliTurret Deserialize(Stream stream);
    public static AttackHeliTurret DeserializeLengthDelimited(Stream stream);
    public static AttackHeliTurret DeserializeLength(Stream stream, int length);
    public static AttackHeliTurret Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AttackHeliTurret previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AttackHeliTurret Deserialize(Byte[] buffer, AttackHeliTurret instance, bool isDelta);
    public static AttackHeliTurret Deserialize(Stream stream, AttackHeliTurret instance, bool isDelta);
    public static AttackHeliTurret DeserializeLengthDelimited(Stream stream, AttackHeliTurret instance, bool isDelta);
    public static AttackHeliTurret DeserializeLength(Stream stream, int length, AttackHeliTurret instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AttackHeliTurret instance, AttackHeliTurret previous);
    public static void Serialize(Stream stream, AttackHeliTurret instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AttackHeliTurret instance);
    public static void SerializeLengthDelimited(Stream stream, AttackHeliTurret instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AudioEntity : object {
    public int colourMode;
    public int volumeRange;
    public int speed;
    public int gradient;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AudioEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AudioEntity instance);
    public AudioEntity Copy();
    public static AudioEntity Deserialize(Stream stream);
    public static AudioEntity DeserializeLengthDelimited(Stream stream);
    public static AudioEntity DeserializeLength(Stream stream, int length);
    public static AudioEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AudioEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AudioEntity Deserialize(Byte[] buffer, AudioEntity instance, bool isDelta);
    public static AudioEntity Deserialize(Stream stream, AudioEntity instance, bool isDelta);
    public static AudioEntity DeserializeLengthDelimited(Stream stream, AudioEntity instance, bool isDelta);
    public static AudioEntity DeserializeLength(Stream stream, int length, AudioEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AudioEntity instance, AudioEntity previous);
    public static void Serialize(Stream stream, AudioEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AudioEntity instance);
    public static void SerializeLengthDelimited(Stream stream, AudioEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.AutoTurret : object {
    public Vector3 aimPos;
    public Vector3 aimDir;
    public UInt32 targetID;
    public List`1<PlayerNameID> users;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(AutoTurret instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(AutoTurret instance);
    public AutoTurret Copy();
    public static AutoTurret Deserialize(Stream stream);
    public static AutoTurret DeserializeLengthDelimited(Stream stream);
    public static AutoTurret DeserializeLength(Stream stream, int length);
    public static AutoTurret Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, AutoTurret previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static AutoTurret Deserialize(Byte[] buffer, AutoTurret instance, bool isDelta);
    public static AutoTurret Deserialize(Stream stream, AutoTurret instance, bool isDelta);
    public static AutoTurret DeserializeLengthDelimited(Stream stream, AutoTurret instance, bool isDelta);
    public static AutoTurret DeserializeLength(Stream stream, int length, AutoTurret instance, bool isDelta);
    public static void SerializeDelta(Stream stream, AutoTurret instance, AutoTurret previous);
    public static void Serialize(Stream stream, AutoTurret instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(AutoTurret instance);
    public static void SerializeLengthDelimited(Stream stream, AutoTurret instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseBoat : object {
    public float shoreDriftTimerValue;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseBoat instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseBoat instance);
    public BaseBoat Copy();
    public static BaseBoat Deserialize(Stream stream);
    public static BaseBoat DeserializeLengthDelimited(Stream stream);
    public static BaseBoat DeserializeLength(Stream stream, int length);
    public static BaseBoat Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseBoat previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseBoat Deserialize(Byte[] buffer, BaseBoat instance, bool isDelta);
    public static BaseBoat Deserialize(Stream stream, BaseBoat instance, bool isDelta);
    public static BaseBoat DeserializeLengthDelimited(Stream stream, BaseBoat instance, bool isDelta);
    public static BaseBoat DeserializeLength(Stream stream, int length, BaseBoat instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseBoat instance, BaseBoat previous);
    public static void Serialize(Stream stream, BaseBoat instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseBoat instance);
    public static void SerializeLengthDelimited(Stream stream, BaseBoat instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseCombat : object {
    public int state;
    public float health;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseCombat instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseCombat instance);
    public BaseCombat Copy();
    public static BaseCombat Deserialize(Stream stream);
    public static BaseCombat DeserializeLengthDelimited(Stream stream);
    public static BaseCombat DeserializeLength(Stream stream, int length);
    public static BaseCombat Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseCombat previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseCombat Deserialize(Byte[] buffer, BaseCombat instance, bool isDelta);
    public static BaseCombat Deserialize(Stream stream, BaseCombat instance, bool isDelta);
    public static BaseCombat DeserializeLengthDelimited(Stream stream, BaseCombat instance, bool isDelta);
    public static BaseCombat DeserializeLength(Stream stream, int length, BaseCombat instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseCombat instance, BaseCombat previous);
    public static void Serialize(Stream stream, BaseCombat instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseCombat instance);
    public static void SerializeLengthDelimited(Stream stream, BaseCombat instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseEntity : object {
    public Vector3 pos;
    public Vector3 rot;
    public int flags;
    public float time;
    public ulong skinid;
    public float protection;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseEntity instance);
    public BaseEntity Copy();
    public static BaseEntity Deserialize(Stream stream);
    public static BaseEntity DeserializeLengthDelimited(Stream stream);
    public static BaseEntity DeserializeLength(Stream stream, int length);
    public static BaseEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseEntity Deserialize(Byte[] buffer, BaseEntity instance, bool isDelta);
    public static BaseEntity Deserialize(Stream stream, BaseEntity instance, bool isDelta);
    public static BaseEntity DeserializeLengthDelimited(Stream stream, BaseEntity instance, bool isDelta);
    public static BaseEntity DeserializeLength(Stream stream, int length, BaseEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseEntity instance, BaseEntity previous);
    public static void Serialize(Stream stream, BaseEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseEntity instance);
    public static void SerializeLengthDelimited(Stream stream, BaseEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseNetworkable : object {
    public NetworkableId uid;
    public UInt32 group;
    public UInt32 prefabID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseNetworkable instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseNetworkable instance);
    public BaseNetworkable Copy();
    public static BaseNetworkable Deserialize(Stream stream);
    public static BaseNetworkable DeserializeLengthDelimited(Stream stream);
    public static BaseNetworkable DeserializeLength(Stream stream, int length);
    public static BaseNetworkable Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseNetworkable previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseNetworkable Deserialize(Byte[] buffer, BaseNetworkable instance, bool isDelta);
    public static BaseNetworkable Deserialize(Stream stream, BaseNetworkable instance, bool isDelta);
    public static BaseNetworkable DeserializeLengthDelimited(Stream stream, BaseNetworkable instance, bool isDelta);
    public static BaseNetworkable DeserializeLength(Stream stream, int length, BaseNetworkable instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseNetworkable instance, BaseNetworkable previous);
    public static void Serialize(Stream stream, BaseNetworkable instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseNetworkable instance);
    public static void SerializeLengthDelimited(Stream stream, BaseNetworkable instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseNPC : object {
    public int flags;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseNPC instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseNPC instance);
    public BaseNPC Copy();
    public static BaseNPC Deserialize(Stream stream);
    public static BaseNPC DeserializeLengthDelimited(Stream stream);
    public static BaseNPC DeserializeLength(Stream stream, int length);
    public static BaseNPC Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseNPC previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseNPC Deserialize(Byte[] buffer, BaseNPC instance, bool isDelta);
    public static BaseNPC Deserialize(Stream stream, BaseNPC instance, bool isDelta);
    public static BaseNPC DeserializeLengthDelimited(Stream stream, BaseNPC instance, bool isDelta);
    public static BaseNPC DeserializeLength(Stream stream, int length, BaseNPC instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseNPC instance, BaseNPC previous);
    public static void Serialize(Stream stream, BaseNPC instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseNPC instance);
    public static void SerializeLengthDelimited(Stream stream, BaseNPC instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseOven : object {
    public float cookSpeed;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseOven instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseOven instance);
    public BaseOven Copy();
    public static BaseOven Deserialize(Stream stream);
    public static BaseOven DeserializeLengthDelimited(Stream stream);
    public static BaseOven DeserializeLength(Stream stream, int length);
    public static BaseOven Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseOven previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseOven Deserialize(Byte[] buffer, BaseOven instance, bool isDelta);
    public static BaseOven Deserialize(Stream stream, BaseOven instance, bool isDelta);
    public static BaseOven DeserializeLengthDelimited(Stream stream, BaseOven instance, bool isDelta);
    public static BaseOven DeserializeLength(Stream stream, int length, BaseOven instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseOven instance, BaseOven previous);
    public static void Serialize(Stream stream, BaseOven instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseOven instance);
    public static void SerializeLengthDelimited(Stream stream, BaseOven instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BasePlayer : object {
    public string name;
    public ulong userid;
    public PlayerInventory inventory;
    public PlayerMetabolism metabolism;
    public float loadingTimeout;
    public ModelState modelState;
    public int playerFlags;
    public ItemId heldEntity;
    public float health;
    public PersistantPlayer persistantData;
    public float skinCol;
    public float skinTex;
    public float skinMesh;
    public PlayerLifeStory currentLife;
    public PlayerLifeStory previousLife;
    public NetworkableId mounted;
    public ulong currentTeam;
    public UInt32 underwear;
    public PlayerModifiers modifiers;
    public int reputation;
    public UInt32 loopingGesture;
    public Missions missions;
    public string respawnId;
    public int bagCount;
    public long clanId;
    public ItemCrafter itemCrafter;
    public int shelterCount;
    public int tutorialAllowance;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BasePlayer instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BasePlayer instance);
    public BasePlayer Copy();
    public static BasePlayer Deserialize(Stream stream);
    public static BasePlayer DeserializeLengthDelimited(Stream stream);
    public static BasePlayer DeserializeLength(Stream stream, int length);
    public static BasePlayer Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BasePlayer previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BasePlayer Deserialize(Byte[] buffer, BasePlayer instance, bool isDelta);
    public static BasePlayer Deserialize(Stream stream, BasePlayer instance, bool isDelta);
    public static BasePlayer DeserializeLengthDelimited(Stream stream, BasePlayer instance, bool isDelta);
    public static BasePlayer DeserializeLength(Stream stream, int length, BasePlayer instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BasePlayer instance, BasePlayer previous);
    public static void Serialize(Stream stream, BasePlayer instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BasePlayer instance);
    public static void SerializeLengthDelimited(Stream stream, BasePlayer instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseProjectile : object {
    public Magazine primaryMagazine;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseProjectile instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseProjectile instance);
    public BaseProjectile Copy();
    public static BaseProjectile Deserialize(Stream stream);
    public static BaseProjectile DeserializeLengthDelimited(Stream stream);
    public static BaseProjectile DeserializeLength(Stream stream, int length);
    public static BaseProjectile Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseProjectile previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseProjectile Deserialize(Byte[] buffer, BaseProjectile instance, bool isDelta);
    public static BaseProjectile Deserialize(Stream stream, BaseProjectile instance, bool isDelta);
    public static BaseProjectile DeserializeLengthDelimited(Stream stream, BaseProjectile instance, bool isDelta);
    public static BaseProjectile DeserializeLength(Stream stream, int length, BaseProjectile instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseProjectile instance, BaseProjectile previous);
    public static void Serialize(Stream stream, BaseProjectile instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseProjectile instance);
    public static void SerializeLengthDelimited(Stream stream, BaseProjectile instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseResource : object {
    public int stage;
    public float health;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseResource instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseResource instance);
    public BaseResource Copy();
    public static BaseResource Deserialize(Stream stream);
    public static BaseResource DeserializeLengthDelimited(Stream stream);
    public static BaseResource DeserializeLength(Stream stream, int length);
    public static BaseResource Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseResource previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseResource Deserialize(Byte[] buffer, BaseResource instance, bool isDelta);
    public static BaseResource Deserialize(Stream stream, BaseResource instance, bool isDelta);
    public static BaseResource DeserializeLengthDelimited(Stream stream, BaseResource instance, bool isDelta);
    public static BaseResource DeserializeLength(Stream stream, int length, BaseResource instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseResource instance, BaseResource previous);
    public static void Serialize(Stream stream, BaseResource instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseResource instance);
    public static void SerializeLengthDelimited(Stream stream, BaseResource instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseTrain : object {
    public float time;
    public float frontBogieYRot;
    public float rearBogieYRot;
    public NetworkableId frontCouplingID;
    public bool frontCouplingToFront;
    public NetworkableId rearCouplingID;
    public bool rearCouplingToFront;
    public int lootTypeIndex;
    public float lootPercent;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseTrain instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseTrain instance);
    public BaseTrain Copy();
    public static BaseTrain Deserialize(Stream stream);
    public static BaseTrain DeserializeLengthDelimited(Stream stream);
    public static BaseTrain DeserializeLength(Stream stream, int length);
    public static BaseTrain Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseTrain previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseTrain Deserialize(Byte[] buffer, BaseTrain instance, bool isDelta);
    public static BaseTrain Deserialize(Stream stream, BaseTrain instance, bool isDelta);
    public static BaseTrain DeserializeLengthDelimited(Stream stream, BaseTrain instance, bool isDelta);
    public static BaseTrain DeserializeLength(Stream stream, int length, BaseTrain instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseTrain instance, BaseTrain previous);
    public static void Serialize(Stream stream, BaseTrain instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseTrain instance);
    public static void SerializeLengthDelimited(Stream stream, BaseTrain instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BaseVehicle : object {
    public List`1<MountPoint> mountPoints;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BaseVehicle instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BaseVehicle instance);
    public BaseVehicle Copy();
    public static BaseVehicle Deserialize(Stream stream);
    public static BaseVehicle DeserializeLengthDelimited(Stream stream);
    public static BaseVehicle DeserializeLength(Stream stream, int length);
    public static BaseVehicle Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BaseVehicle previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BaseVehicle Deserialize(Byte[] buffer, BaseVehicle instance, bool isDelta);
    public static BaseVehicle Deserialize(Stream stream, BaseVehicle instance, bool isDelta);
    public static BaseVehicle DeserializeLengthDelimited(Stream stream, BaseVehicle instance, bool isDelta);
    public static BaseVehicle DeserializeLength(Stream stream, int length, BaseVehicle instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BaseVehicle instance, BaseVehicle previous);
    public static void Serialize(Stream stream, BaseVehicle instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BaseVehicle instance);
    public static void SerializeLengthDelimited(Stream stream, BaseVehicle instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Bike : object {
    public float steerInput;
    public float driveWheelVel;
    public float throttleInput;
    public float brakeInput;
    public NetworkableId storageID;
    public NetworkableId fuelStorageID;
    public float fuelFraction;
    public float sidecarAngle;
    public float time;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Bike instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Bike instance);
    public Bike Copy();
    public static Bike Deserialize(Stream stream);
    public static Bike DeserializeLengthDelimited(Stream stream);
    public static Bike DeserializeLength(Stream stream, int length);
    public static Bike Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Bike previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Bike Deserialize(Byte[] buffer, Bike instance, bool isDelta);
    public static Bike Deserialize(Stream stream, Bike instance, bool isDelta);
    public static Bike DeserializeLengthDelimited(Stream stream, Bike instance, bool isDelta);
    public static Bike DeserializeLength(Stream stream, int length, Bike instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Bike instance, Bike previous);
    public static void Serialize(Stream stream, Bike instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Bike instance);
    public static void SerializeLengthDelimited(Stream stream, Bike instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BoomBox : object {
    public string radioIp;
    public ulong assignedRadioBy;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BoomBox instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BoomBox instance);
    public BoomBox Copy();
    public static BoomBox Deserialize(Stream stream);
    public static BoomBox DeserializeLengthDelimited(Stream stream);
    public static BoomBox DeserializeLength(Stream stream, int length);
    public static BoomBox Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BoomBox previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BoomBox Deserialize(Byte[] buffer, BoomBox instance, bool isDelta);
    public static BoomBox Deserialize(Stream stream, BoomBox instance, bool isDelta);
    public static BoomBox DeserializeLengthDelimited(Stream stream, BoomBox instance, bool isDelta);
    public static BoomBox DeserializeLength(Stream stream, int length, BoomBox instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BoomBox instance, BoomBox previous);
    public static void Serialize(Stream stream, BoomBox instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BoomBox instance);
    public static void SerializeLengthDelimited(Stream stream, BoomBox instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BradleyAPC : object {
    public float engineThrottle;
    public float throttleLeft;
    public float throttleRight;
    public Vector3 mainGunVec;
    public Vector3 topTurretVec;
    public Vector3 rearGunVec;
    public Vector3 leftSideGun1;
    public Vector3 leftSideGun2;
    public Vector3 rightSideGun1;
    public Vector3 rightSideGun2;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BradleyAPC instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BradleyAPC instance);
    public BradleyAPC Copy();
    public static BradleyAPC Deserialize(Stream stream);
    public static BradleyAPC DeserializeLengthDelimited(Stream stream);
    public static BradleyAPC DeserializeLength(Stream stream, int length);
    public static BradleyAPC Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BradleyAPC previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BradleyAPC Deserialize(Byte[] buffer, BradleyAPC instance, bool isDelta);
    public static BradleyAPC Deserialize(Stream stream, BradleyAPC instance, bool isDelta);
    public static BradleyAPC DeserializeLengthDelimited(Stream stream, BradleyAPC instance, bool isDelta);
    public static BradleyAPC DeserializeLength(Stream stream, int length, BradleyAPC instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BradleyAPC instance, BradleyAPC previous);
    public static void Serialize(Stream stream, BradleyAPC instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BradleyAPC instance);
    public static void SerializeLengthDelimited(Stream stream, BradleyAPC instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BrainComponent : object {
    public int currentState;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BrainComponent instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BrainComponent instance);
    public BrainComponent Copy();
    public static BrainComponent Deserialize(Stream stream);
    public static BrainComponent DeserializeLengthDelimited(Stream stream);
    public static BrainComponent DeserializeLength(Stream stream, int length);
    public static BrainComponent Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BrainComponent previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BrainComponent Deserialize(Byte[] buffer, BrainComponent instance, bool isDelta);
    public static BrainComponent Deserialize(Stream stream, BrainComponent instance, bool isDelta);
    public static BrainComponent DeserializeLengthDelimited(Stream stream, BrainComponent instance, bool isDelta);
    public static BrainComponent DeserializeLength(Stream stream, int length, BrainComponent instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BrainComponent instance, BrainComponent previous);
    public static void Serialize(Stream stream, BrainComponent instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BrainComponent instance);
    public static void SerializeLengthDelimited(Stream stream, BrainComponent instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BuildingBlock : object {
    public int model;
    public int grade;
    public bool beingDemolished;
    public ulong wallpaperID;
    public float wallpaperHealth;
    public ulong wallpaperID2;
    public float wallpaperHealth2;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BuildingBlock instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BuildingBlock instance);
    public BuildingBlock Copy();
    public static BuildingBlock Deserialize(Stream stream);
    public static BuildingBlock DeserializeLengthDelimited(Stream stream);
    public static BuildingBlock DeserializeLength(Stream stream, int length);
    public static BuildingBlock Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BuildingBlock previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BuildingBlock Deserialize(Byte[] buffer, BuildingBlock instance, bool isDelta);
    public static BuildingBlock Deserialize(Stream stream, BuildingBlock instance, bool isDelta);
    public static BuildingBlock DeserializeLengthDelimited(Stream stream, BuildingBlock instance, bool isDelta);
    public static BuildingBlock DeserializeLength(Stream stream, int length, BuildingBlock instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BuildingBlock instance, BuildingBlock previous);
    public static void Serialize(Stream stream, BuildingBlock instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BuildingBlock instance);
    public static void SerializeLengthDelimited(Stream stream, BuildingBlock instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BuildingPrivilege : object {
    public List`1<PlayerNameID> users;
    public float upkeepPeriodMinutes;
    public float costFraction;
    public float protectedMinutes;
    public bool clientAuthed;
    public bool clientAnyAuthed;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BuildingPrivilege instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BuildingPrivilege instance);
    public BuildingPrivilege Copy();
    public static BuildingPrivilege Deserialize(Stream stream);
    public static BuildingPrivilege DeserializeLengthDelimited(Stream stream);
    public static BuildingPrivilege DeserializeLength(Stream stream, int length);
    public static BuildingPrivilege Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BuildingPrivilege previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BuildingPrivilege Deserialize(Byte[] buffer, BuildingPrivilege instance, bool isDelta);
    public static BuildingPrivilege Deserialize(Stream stream, BuildingPrivilege instance, bool isDelta);
    public static BuildingPrivilege DeserializeLengthDelimited(Stream stream, BuildingPrivilege instance, bool isDelta);
    public static BuildingPrivilege DeserializeLength(Stream stream, int length, BuildingPrivilege instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BuildingPrivilege instance, BuildingPrivilege previous);
    public static void Serialize(Stream stream, BuildingPrivilege instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BuildingPrivilege instance);
    public static void SerializeLengthDelimited(Stream stream, BuildingPrivilege instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BuildingPrivilegeRetro : object {
    public List`1<float> resources;
    public List`1<BuildingPrivilegeRetroTool> tools;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BuildingPrivilegeRetro instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BuildingPrivilegeRetro instance);
    public BuildingPrivilegeRetro Copy();
    public static BuildingPrivilegeRetro Deserialize(Stream stream);
    public static BuildingPrivilegeRetro DeserializeLengthDelimited(Stream stream);
    public static BuildingPrivilegeRetro DeserializeLength(Stream stream, int length);
    public static BuildingPrivilegeRetro Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BuildingPrivilegeRetro previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BuildingPrivilegeRetro Deserialize(Byte[] buffer, BuildingPrivilegeRetro instance, bool isDelta);
    public static BuildingPrivilegeRetro Deserialize(Stream stream, BuildingPrivilegeRetro instance, bool isDelta);
    public static BuildingPrivilegeRetro DeserializeLengthDelimited(Stream stream, BuildingPrivilegeRetro instance, bool isDelta);
    public static BuildingPrivilegeRetro DeserializeLength(Stream stream, int length, BuildingPrivilegeRetro instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BuildingPrivilegeRetro instance, BuildingPrivilegeRetro previous);
    public static void Serialize(Stream stream, BuildingPrivilegeRetro instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BuildingPrivilegeRetro instance);
    public static void SerializeLengthDelimited(Stream stream, BuildingPrivilegeRetro instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.BuildingPrivilegeRetroTool : object {
    public int itemID;
    public ulong skinid;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(BuildingPrivilegeRetroTool instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(BuildingPrivilegeRetroTool instance);
    public BuildingPrivilegeRetroTool Copy();
    public static BuildingPrivilegeRetroTool Deserialize(Stream stream);
    public static BuildingPrivilegeRetroTool DeserializeLengthDelimited(Stream stream);
    public static BuildingPrivilegeRetroTool DeserializeLength(Stream stream, int length);
    public static BuildingPrivilegeRetroTool Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, BuildingPrivilegeRetroTool previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static BuildingPrivilegeRetroTool Deserialize(Byte[] buffer, BuildingPrivilegeRetroTool instance, bool isDelta);
    public static BuildingPrivilegeRetroTool Deserialize(Stream stream, BuildingPrivilegeRetroTool instance, bool isDelta);
    public static BuildingPrivilegeRetroTool DeserializeLengthDelimited(Stream stream, BuildingPrivilegeRetroTool instance, bool isDelta);
    public static BuildingPrivilegeRetroTool DeserializeLength(Stream stream, int length, BuildingPrivilegeRetroTool instance, bool isDelta);
    public static void SerializeDelta(Stream stream, BuildingPrivilegeRetroTool instance, BuildingPrivilegeRetroTool previous);
    public static void Serialize(Stream stream, BuildingPrivilegeRetroTool instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(BuildingPrivilegeRetroTool instance);
    public static void SerializeLengthDelimited(Stream stream, BuildingPrivilegeRetroTool instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.CamperModule : object {
    public NetworkableId bbqId;
    public NetworkableId lockerId;
    public NetworkableId storageID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(CamperModule instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(CamperModule instance);
    public CamperModule Copy();
    public static CamperModule Deserialize(Stream stream);
    public static CamperModule DeserializeLengthDelimited(Stream stream);
    public static CamperModule DeserializeLength(Stream stream, int length);
    public static CamperModule Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, CamperModule previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static CamperModule Deserialize(Byte[] buffer, CamperModule instance, bool isDelta);
    public static CamperModule Deserialize(Stream stream, CamperModule instance, bool isDelta);
    public static CamperModule DeserializeLengthDelimited(Stream stream, CamperModule instance, bool isDelta);
    public static CamperModule DeserializeLength(Stream stream, int length, CamperModule instance, bool isDelta);
    public static void SerializeDelta(Stream stream, CamperModule instance, CamperModule previous);
    public static void Serialize(Stream stream, CamperModule instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(CamperModule instance);
    public static void SerializeLengthDelimited(Stream stream, CamperModule instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.CardGame : object {
    public List`1<CardPlayer> players;
    public int state;
    public int activePlayerIndex;
    public int pot;
    public int lastActionId;
    public ulong lastActionTarget;
    public int lastActionValue;
    public NetworkableId potRef;
    public TexasHoldEm texasHoldEm;
    public Blackjack blackjack;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(CardGame instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(CardGame instance);
    public CardGame Copy();
    public static CardGame Deserialize(Stream stream);
    public static CardGame DeserializeLengthDelimited(Stream stream);
    public static CardGame DeserializeLength(Stream stream, int length);
    public static CardGame Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, CardGame previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static CardGame Deserialize(Byte[] buffer, CardGame instance, bool isDelta);
    public static CardGame Deserialize(Stream stream, CardGame instance, bool isDelta);
    public static CardGame DeserializeLengthDelimited(Stream stream, CardGame instance, bool isDelta);
    public static CardGame DeserializeLength(Stream stream, int length, CardGame instance, bool isDelta);
    public static void SerializeDelta(Stream stream, CardGame instance, CardGame previous);
    public static void Serialize(Stream stream, CardGame instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(CardGame instance);
    public static void SerializeLengthDelimited(Stream stream, CardGame instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.CargoPlane : object {
    public Vector3 startPos;
    public Vector3 endPos;
    public float secondsToTake;
    public float secondsTaken;
    public bool dropped;
    public Vector3 dropPosition;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(CargoPlane instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(CargoPlane instance);
    public CargoPlane Copy();
    public static CargoPlane Deserialize(Stream stream);
    public static CargoPlane DeserializeLengthDelimited(Stream stream);
    public static CargoPlane DeserializeLength(Stream stream, int length);
    public static CargoPlane Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, CargoPlane previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static CargoPlane Deserialize(Byte[] buffer, CargoPlane instance, bool isDelta);
    public static CargoPlane Deserialize(Stream stream, CargoPlane instance, bool isDelta);
    public static CargoPlane DeserializeLengthDelimited(Stream stream, CargoPlane instance, bool isDelta);
    public static CargoPlane DeserializeLength(Stream stream, int length, CargoPlane instance, bool isDelta);
    public static void SerializeDelta(Stream stream, CargoPlane instance, CargoPlane previous);
    public static void Serialize(Stream stream, CargoPlane instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(CargoPlane instance);
    public static void SerializeLengthDelimited(Stream stream, CargoPlane instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.CargoShip : object {
    public int currentHarborApproachNode;
    public bool isDoingHarborApproach;
    public bool shouldLookAhead;
    public bool isEgressing;
    public UInt32 layout;
    public List`1<ulong> playerIds;
    public int dockCount;
    public float lifetime;
    public int harborIndex;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(CargoShip instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(CargoShip instance);
    public CargoShip Copy();
    public static CargoShip Deserialize(Stream stream);
    public static CargoShip DeserializeLengthDelimited(Stream stream);
    public static CargoShip DeserializeLength(Stream stream, int length);
    public static CargoShip Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, CargoShip previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static CargoShip Deserialize(Byte[] buffer, CargoShip instance, bool isDelta);
    public static CargoShip Deserialize(Stream stream, CargoShip instance, bool isDelta);
    public static CargoShip DeserializeLengthDelimited(Stream stream, CargoShip instance, bool isDelta);
    public static CargoShip DeserializeLength(Stream stream, int length, CargoShip instance, bool isDelta);
    public static void SerializeDelta(Stream stream, CargoShip instance, CargoShip previous);
    public static void Serialize(Stream stream, CargoShip instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(CargoShip instance);
    public static void SerializeLengthDelimited(Stream stream, CargoShip instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.CargoShipContainer : object {
    public int dressingVariant;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(CargoShipContainer instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(CargoShipContainer instance);
    public CargoShipContainer Copy();
    public static CargoShipContainer Deserialize(Stream stream);
    public static CargoShipContainer DeserializeLengthDelimited(Stream stream);
    public static CargoShipContainer DeserializeLength(Stream stream, int length);
    public static CargoShipContainer Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, CargoShipContainer previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static CargoShipContainer Deserialize(Byte[] buffer, CargoShipContainer instance, bool isDelta);
    public static CargoShipContainer Deserialize(Stream stream, CargoShipContainer instance, bool isDelta);
    public static CargoShipContainer DeserializeLengthDelimited(Stream stream, CargoShipContainer instance, bool isDelta);
    public static CargoShipContainer DeserializeLength(Stream stream, int length, CargoShipContainer instance, bool isDelta);
    public static void SerializeDelta(Stream stream, CargoShipContainer instance, CargoShipContainer previous);
    public static void Serialize(Stream stream, CargoShipContainer instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(CargoShipContainer instance);
    public static void SerializeLengthDelimited(Stream stream, CargoShipContainer instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Cassette : object {
    public UInt32 audioId;
    public NetworkableId holder;
    public ulong creatorSteamId;
    public int preloadAudioId;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Cassette instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Cassette instance);
    public Cassette Copy();
    public static Cassette Deserialize(Stream stream);
    public static Cassette DeserializeLengthDelimited(Stream stream);
    public static Cassette DeserializeLength(Stream stream, int length);
    public static Cassette Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Cassette previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Cassette Deserialize(Byte[] buffer, Cassette instance, bool isDelta);
    public static Cassette Deserialize(Stream stream, Cassette instance, bool isDelta);
    public static Cassette DeserializeLengthDelimited(Stream stream, Cassette instance, bool isDelta);
    public static Cassette DeserializeLength(Stream stream, int length, Cassette instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Cassette instance, Cassette previous);
    public static void Serialize(Stream stream, Cassette instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Cassette instance);
    public static void SerializeLengthDelimited(Stream stream, Cassette instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ChanceAIEventData : object {
    public float value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ChanceAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ChanceAIEventData instance);
    public ChanceAIEventData Copy();
    public static ChanceAIEventData Deserialize(Stream stream);
    public static ChanceAIEventData DeserializeLengthDelimited(Stream stream);
    public static ChanceAIEventData DeserializeLength(Stream stream, int length);
    public static ChanceAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ChanceAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ChanceAIEventData Deserialize(Byte[] buffer, ChanceAIEventData instance, bool isDelta);
    public static ChanceAIEventData Deserialize(Stream stream, ChanceAIEventData instance, bool isDelta);
    public static ChanceAIEventData DeserializeLengthDelimited(Stream stream, ChanceAIEventData instance, bool isDelta);
    public static ChanceAIEventData DeserializeLength(Stream stream, int length, ChanceAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ChanceAIEventData instance, ChanceAIEventData previous);
    public static void Serialize(Stream stream, ChanceAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ChanceAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, ChanceAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.CinematicEntity : object {
    public NetworkableId targetPlayer;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(CinematicEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(CinematicEntity instance);
    public CinematicEntity Copy();
    public static CinematicEntity Deserialize(Stream stream);
    public static CinematicEntity DeserializeLengthDelimited(Stream stream);
    public static CinematicEntity DeserializeLength(Stream stream, int length);
    public static CinematicEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, CinematicEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static CinematicEntity Deserialize(Byte[] buffer, CinematicEntity instance, bool isDelta);
    public static CinematicEntity Deserialize(Stream stream, CinematicEntity instance, bool isDelta);
    public static CinematicEntity DeserializeLengthDelimited(Stream stream, CinematicEntity instance, bool isDelta);
    public static CinematicEntity DeserializeLength(Stream stream, int length, CinematicEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, CinematicEntity instance, CinematicEntity previous);
    public static void Serialize(Stream stream, CinematicEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(CinematicEntity instance);
    public static void SerializeLengthDelimited(Stream stream, CinematicEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ClanActionResult : object {
    public int requestId;
    public int result;
    public bool hasClanInfo;
    public ClanInfo clanInfo;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ClanActionResult instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ClanActionResult instance);
    public ClanActionResult Copy();
    public static ClanActionResult Deserialize(Stream stream);
    public static ClanActionResult DeserializeLengthDelimited(Stream stream);
    public static ClanActionResult DeserializeLength(Stream stream, int length);
    public static ClanActionResult Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ClanActionResult previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ClanActionResult Deserialize(Byte[] buffer, ClanActionResult instance, bool isDelta);
    public static ClanActionResult Deserialize(Stream stream, ClanActionResult instance, bool isDelta);
    public static ClanActionResult DeserializeLengthDelimited(Stream stream, ClanActionResult instance, bool isDelta);
    public static ClanActionResult DeserializeLength(Stream stream, int length, ClanActionResult instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ClanActionResult instance, ClanActionResult previous);
    public static void Serialize(Stream stream, ClanActionResult instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ClanActionResult instance);
    public static void SerializeLengthDelimited(Stream stream, ClanActionResult instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ClanInfo : object {
    public long clanId;
    public string name;
    public long created;
    public ulong creator;
    public string motd;
    public long motdTimestamp;
    public ulong motdAuthor;
    public Byte[] logo;
    public int color;
    public List`1<Role> roles;
    public List`1<Member> members;
    public List`1<Invite> invites;
    public int maxMemberCount;
    public long score;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ClanInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ClanInfo instance);
    public ClanInfo Copy();
    public static ClanInfo Deserialize(Stream stream);
    public static ClanInfo DeserializeLengthDelimited(Stream stream);
    public static ClanInfo DeserializeLength(Stream stream, int length);
    public static ClanInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ClanInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ClanInfo Deserialize(Byte[] buffer, ClanInfo instance, bool isDelta);
    public static ClanInfo Deserialize(Stream stream, ClanInfo instance, bool isDelta);
    public static ClanInfo DeserializeLengthDelimited(Stream stream, ClanInfo instance, bool isDelta);
    public static ClanInfo DeserializeLength(Stream stream, int length, ClanInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ClanInfo instance, ClanInfo previous);
    public static void Serialize(Stream stream, ClanInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ClanInfo instance);
    public static void SerializeLengthDelimited(Stream stream, ClanInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ClanInvitations : object {
    public List`1<Invitation> invitations;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ClanInvitations instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ClanInvitations instance);
    public ClanInvitations Copy();
    public static ClanInvitations Deserialize(Stream stream);
    public static ClanInvitations DeserializeLengthDelimited(Stream stream);
    public static ClanInvitations DeserializeLength(Stream stream, int length);
    public static ClanInvitations Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ClanInvitations previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ClanInvitations Deserialize(Byte[] buffer, ClanInvitations instance, bool isDelta);
    public static ClanInvitations Deserialize(Stream stream, ClanInvitations instance, bool isDelta);
    public static ClanInvitations DeserializeLengthDelimited(Stream stream, ClanInvitations instance, bool isDelta);
    public static ClanInvitations DeserializeLength(Stream stream, int length, ClanInvitations instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ClanInvitations instance, ClanInvitations previous);
    public static void Serialize(Stream stream, ClanInvitations instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ClanInvitations instance);
    public static void SerializeLengthDelimited(Stream stream, ClanInvitations instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ClanLeaderboard : object {
    public List`1<Entry> entries;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ClanLeaderboard instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ClanLeaderboard instance);
    public ClanLeaderboard Copy();
    public static ClanLeaderboard Deserialize(Stream stream);
    public static ClanLeaderboard DeserializeLengthDelimited(Stream stream);
    public static ClanLeaderboard DeserializeLength(Stream stream, int length);
    public static ClanLeaderboard Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ClanLeaderboard previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ClanLeaderboard Deserialize(Byte[] buffer, ClanLeaderboard instance, bool isDelta);
    public static ClanLeaderboard Deserialize(Stream stream, ClanLeaderboard instance, bool isDelta);
    public static ClanLeaderboard DeserializeLengthDelimited(Stream stream, ClanLeaderboard instance, bool isDelta);
    public static ClanLeaderboard DeserializeLength(Stream stream, int length, ClanLeaderboard instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ClanLeaderboard instance, ClanLeaderboard previous);
    public static void Serialize(Stream stream, ClanLeaderboard instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ClanLeaderboard instance);
    public static void SerializeLengthDelimited(Stream stream, ClanLeaderboard instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ClanLog : object {
    public long clanId;
    public List`1<Entry> logEntries;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ClanLog instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ClanLog instance);
    public ClanLog Copy();
    public static ClanLog Deserialize(Stream stream);
    public static ClanLog DeserializeLengthDelimited(Stream stream);
    public static ClanLog DeserializeLength(Stream stream, int length);
    public static ClanLog Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ClanLog previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ClanLog Deserialize(Byte[] buffer, ClanLog instance, bool isDelta);
    public static ClanLog Deserialize(Stream stream, ClanLog instance, bool isDelta);
    public static ClanLog DeserializeLengthDelimited(Stream stream, ClanLog instance, bool isDelta);
    public static ClanLog DeserializeLength(Stream stream, int length, ClanLog instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ClanLog instance, ClanLog previous);
    public static void Serialize(Stream stream, ClanLog instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ClanLog instance);
    public static void SerializeLengthDelimited(Stream stream, ClanLog instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ClanManager : object {
    public string backendType;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ClanManager instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ClanManager instance);
    public ClanManager Copy();
    public static ClanManager Deserialize(Stream stream);
    public static ClanManager DeserializeLengthDelimited(Stream stream);
    public static ClanManager DeserializeLength(Stream stream, int length);
    public static ClanManager Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ClanManager previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ClanManager Deserialize(Byte[] buffer, ClanManager instance, bool isDelta);
    public static ClanManager Deserialize(Stream stream, ClanManager instance, bool isDelta);
    public static ClanManager DeserializeLengthDelimited(Stream stream, ClanManager instance, bool isDelta);
    public static ClanManager DeserializeLength(Stream stream, int length, ClanManager instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ClanManager instance, ClanManager previous);
    public static void Serialize(Stream stream, ClanManager instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ClanManager instance);
    public static void SerializeLengthDelimited(Stream stream, ClanManager instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ClanScoreEvents : object {
    public long clanId;
    public List`1<Entry> scoreEvents;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ClanScoreEvents instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ClanScoreEvents instance);
    public ClanScoreEvents Copy();
    public static ClanScoreEvents Deserialize(Stream stream);
    public static ClanScoreEvents DeserializeLengthDelimited(Stream stream);
    public static ClanScoreEvents DeserializeLength(Stream stream, int length);
    public static ClanScoreEvents Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ClanScoreEvents previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ClanScoreEvents Deserialize(Byte[] buffer, ClanScoreEvents instance, bool isDelta);
    public static ClanScoreEvents Deserialize(Stream stream, ClanScoreEvents instance, bool isDelta);
    public static ClanScoreEvents DeserializeLengthDelimited(Stream stream, ClanScoreEvents instance, bool isDelta);
    public static ClanScoreEvents DeserializeLength(Stream stream, int length, ClanScoreEvents instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ClanScoreEvents instance, ClanScoreEvents previous);
    public static void Serialize(Stream stream, ClanScoreEvents instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ClanScoreEvents instance);
    public static void SerializeLengthDelimited(Stream stream, ClanScoreEvents instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ClientReady : object {
    public List`1<ClientInfo> clientInfo;
    public bool globalNetworking;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ClientReady instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ClientReady instance);
    public ClientReady Copy();
    public static ClientReady Deserialize(Stream stream);
    public static ClientReady DeserializeLengthDelimited(Stream stream);
    public static ClientReady DeserializeLength(Stream stream, int length);
    public static ClientReady Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ClientReady previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ClientReady Deserialize(Byte[] buffer, ClientReady instance, bool isDelta);
    public static ClientReady Deserialize(Stream stream, ClientReady instance, bool isDelta);
    public static ClientReady DeserializeLengthDelimited(Stream stream, ClientReady instance, bool isDelta);
    public static ClientReady DeserializeLength(Stream stream, int length, ClientReady instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ClientReady instance, ClientReady previous);
    public static void Serialize(Stream stream, ClientReady instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ClientReady instance);
    public static void SerializeLengthDelimited(Stream stream, ClientReady instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.CoalingTower : object {
    public int lootTypeIndex;
    public NetworkableId oreStorageID;
    public NetworkableId fuelStorageID;
    public NetworkableId activeUnloadableID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(CoalingTower instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(CoalingTower instance);
    public CoalingTower Copy();
    public static CoalingTower Deserialize(Stream stream);
    public static CoalingTower DeserializeLengthDelimited(Stream stream);
    public static CoalingTower DeserializeLength(Stream stream, int length);
    public static CoalingTower Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, CoalingTower previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static CoalingTower Deserialize(Byte[] buffer, CoalingTower instance, bool isDelta);
    public static CoalingTower Deserialize(Stream stream, CoalingTower instance, bool isDelta);
    public static CoalingTower DeserializeLengthDelimited(Stream stream, CoalingTower instance, bool isDelta);
    public static CoalingTower DeserializeLength(Stream stream, int length, CoalingTower instance, bool isDelta);
    public static void SerializeDelta(Stream stream, CoalingTower instance, CoalingTower previous);
    public static void Serialize(Stream stream, CoalingTower instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(CoalingTower instance);
    public static void SerializeLengthDelimited(Stream stream, CoalingTower instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.CodeLock : object {
    public Private pv;
    public bool hasCode;
    public bool hasGuestCode;
    public bool hasAuth;
    public bool hasGuestAuth;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(CodeLock instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(CodeLock instance);
    public CodeLock Copy();
    public static CodeLock Deserialize(Stream stream);
    public static CodeLock DeserializeLengthDelimited(Stream stream);
    public static CodeLock DeserializeLength(Stream stream, int length);
    public static CodeLock Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, CodeLock previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static CodeLock Deserialize(Byte[] buffer, CodeLock instance, bool isDelta);
    public static CodeLock Deserialize(Stream stream, CodeLock instance, bool isDelta);
    public static CodeLock DeserializeLengthDelimited(Stream stream, CodeLock instance, bool isDelta);
    public static CodeLock DeserializeLength(Stream stream, int length, CodeLock instance, bool isDelta);
    public static void SerializeDelta(Stream stream, CodeLock instance, CodeLock previous);
    public static void Serialize(Stream stream, CodeLock instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(CodeLock instance);
    public static void SerializeLengthDelimited(Stream stream, CodeLock instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Composter : object {
    public float fertilizerProductionProgress;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Composter instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Composter instance);
    public Composter Copy();
    public static Composter Deserialize(Stream stream);
    public static Composter DeserializeLengthDelimited(Stream stream);
    public static Composter DeserializeLength(Stream stream, int length);
    public static Composter Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Composter previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Composter Deserialize(Byte[] buffer, Composter instance, bool isDelta);
    public static Composter Deserialize(Stream stream, Composter instance, bool isDelta);
    public static Composter DeserializeLengthDelimited(Stream stream, Composter instance, bool isDelta);
    public static Composter DeserializeLength(Stream stream, int length, Composter instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Composter instance, Composter previous);
    public static void Serialize(Stream stream, Composter instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Composter instance);
    public static void SerializeLengthDelimited(Stream stream, Composter instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ComputerStation : object {
    public string bookmarks;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ComputerStation instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ComputerStation instance);
    public ComputerStation Copy();
    public static ComputerStation Deserialize(Stream stream);
    public static ComputerStation DeserializeLengthDelimited(Stream stream);
    public static ComputerStation DeserializeLength(Stream stream, int length);
    public static ComputerStation Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ComputerStation previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ComputerStation Deserialize(Byte[] buffer, ComputerStation instance, bool isDelta);
    public static ComputerStation Deserialize(Stream stream, ComputerStation instance, bool isDelta);
    public static ComputerStation DeserializeLengthDelimited(Stream stream, ComputerStation instance, bool isDelta);
    public static ComputerStation DeserializeLength(Stream stream, int length, ComputerStation instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ComputerStation instance, ComputerStation previous);
    public static void Serialize(Stream stream, ComputerStation instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ComputerStation instance);
    public static void SerializeLengthDelimited(Stream stream, ComputerStation instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ConnectedSpeaker : object {
    public NetworkableId connectedTo;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ConnectedSpeaker instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ConnectedSpeaker instance);
    public ConnectedSpeaker Copy();
    public static ConnectedSpeaker Deserialize(Stream stream);
    public static ConnectedSpeaker DeserializeLengthDelimited(Stream stream);
    public static ConnectedSpeaker DeserializeLength(Stream stream, int length);
    public static ConnectedSpeaker Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ConnectedSpeaker previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ConnectedSpeaker Deserialize(Byte[] buffer, ConnectedSpeaker instance, bool isDelta);
    public static ConnectedSpeaker Deserialize(Stream stream, ConnectedSpeaker instance, bool isDelta);
    public static ConnectedSpeaker DeserializeLengthDelimited(Stream stream, ConnectedSpeaker instance, bool isDelta);
    public static ConnectedSpeaker DeserializeLength(Stream stream, int length, ConnectedSpeaker instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ConnectedSpeaker instance, ConnectedSpeaker previous);
    public static void Serialize(Stream stream, ConnectedSpeaker instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ConnectedSpeaker instance);
    public static void SerializeLengthDelimited(Stream stream, ConnectedSpeaker instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Corpse : object {
    public NetworkableId parentID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Corpse instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Corpse instance);
    public Corpse Copy();
    public static Corpse Deserialize(Stream stream);
    public static Corpse DeserializeLengthDelimited(Stream stream);
    public static Corpse DeserializeLength(Stream stream, int length);
    public static Corpse Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Corpse previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Corpse Deserialize(Byte[] buffer, Corpse instance, bool isDelta);
    public static Corpse Deserialize(Stream stream, Corpse instance, bool isDelta);
    public static Corpse DeserializeLengthDelimited(Stream stream, Corpse instance, bool isDelta);
    public static Corpse DeserializeLength(Stream stream, int length, Corpse instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Corpse instance, Corpse previous);
    public static void Serialize(Stream stream, Corpse instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Corpse instance);
    public static void SerializeLengthDelimited(Stream stream, Corpse instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Crane : object {
    public float yaw;
    public float arm1;
    public float arm2;
    public float magnet;
    public float time;
    public int treadInput;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Crane instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Crane instance);
    public Crane Copy();
    public static Crane Deserialize(Stream stream);
    public static Crane DeserializeLengthDelimited(Stream stream);
    public static Crane DeserializeLength(Stream stream, int length);
    public static Crane Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Crane previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Crane Deserialize(Byte[] buffer, Crane instance, bool isDelta);
    public static Crane Deserialize(Stream stream, Crane instance, bool isDelta);
    public static Crane DeserializeLengthDelimited(Stream stream, Crane instance, bool isDelta);
    public static Crane DeserializeLength(Stream stream, int length, Crane instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Crane instance, Crane previous);
    public static void Serialize(Stream stream, Crane instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Crane instance);
    public static void SerializeLengthDelimited(Stream stream, Crane instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.CreateBuilding : object {
    public NetworkableId entity;
    public UInt32 socket;
    public bool onterrain;
    public Vector3 position;
    public Vector3 normal;
    public Ray ray;
    public UInt32 blockID;
    public Vector3 rotation;
    public bool isHoldingShift;
    public int setToGrade;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(CreateBuilding instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(CreateBuilding instance);
    public CreateBuilding Copy();
    public static CreateBuilding Deserialize(Stream stream);
    public static CreateBuilding DeserializeLengthDelimited(Stream stream);
    public static CreateBuilding DeserializeLength(Stream stream, int length);
    public static CreateBuilding Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, CreateBuilding previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static CreateBuilding Deserialize(Byte[] buffer, CreateBuilding instance, bool isDelta);
    public static CreateBuilding Deserialize(Stream stream, CreateBuilding instance, bool isDelta);
    public static CreateBuilding DeserializeLengthDelimited(Stream stream, CreateBuilding instance, bool isDelta);
    public static CreateBuilding DeserializeLength(Stream stream, int length, CreateBuilding instance, bool isDelta);
    public static void SerializeDelta(Stream stream, CreateBuilding instance, CreateBuilding previous);
    public static void Serialize(Stream stream, CreateBuilding instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(CreateBuilding instance);
    public static void SerializeLengthDelimited(Stream stream, CreateBuilding instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DecayEntity : object {
    public float decayTimer;
    public UInt32 buildingID;
    public float upkeepTimer;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DecayEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DecayEntity instance);
    public DecayEntity Copy();
    public static DecayEntity Deserialize(Stream stream);
    public static DecayEntity DeserializeLengthDelimited(Stream stream);
    public static DecayEntity DeserializeLength(Stream stream, int length);
    public static DecayEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DecayEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DecayEntity Deserialize(Byte[] buffer, DecayEntity instance, bool isDelta);
    public static DecayEntity Deserialize(Stream stream, DecayEntity instance, bool isDelta);
    public static DecayEntity DeserializeLengthDelimited(Stream stream, DecayEntity instance, bool isDelta);
    public static DecayEntity DeserializeLength(Stream stream, int length, DecayEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DecayEntity instance, DecayEntity previous);
    public static void Serialize(Stream stream, DecayEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DecayEntity instance);
    public static void SerializeLengthDelimited(Stream stream, DecayEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DeliveryDrone : object {
    public NetworkableId marketplaceId;
    public NetworkableId terminalId;
    public NetworkableId vendingMachineId;
    public int state;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DeliveryDrone instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DeliveryDrone instance);
    public DeliveryDrone Copy();
    public static DeliveryDrone Deserialize(Stream stream);
    public static DeliveryDrone DeserializeLengthDelimited(Stream stream);
    public static DeliveryDrone DeserializeLength(Stream stream, int length);
    public static DeliveryDrone Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DeliveryDrone previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DeliveryDrone Deserialize(Byte[] buffer, DeliveryDrone instance, bool isDelta);
    public static DeliveryDrone Deserialize(Stream stream, DeliveryDrone instance, bool isDelta);
    public static DeliveryDrone DeserializeLengthDelimited(Stream stream, DeliveryDrone instance, bool isDelta);
    public static DeliveryDrone DeserializeLength(Stream stream, int length, DeliveryDrone instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DeliveryDrone instance, DeliveryDrone previous);
    public static void Serialize(Stream stream, DeliveryDrone instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DeliveryDrone instance);
    public static void SerializeLengthDelimited(Stream stream, DeliveryDrone instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoHeader : object {
    public UInt32 version;
    public string level;
    public UInt32 levelSeed;
    public UInt32 levelSize;
    public string checksum;
    public ulong localclient;
    public Vector3 position;
    public Vector3 rotation;
    public string levelUrl;
    public long recordedTime;
    public long length;
    public List`1<FileStorageCacheData> fileStorage;
    public bool nexus;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DemoHeader instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DemoHeader instance);
    public DemoHeader Copy();
    public static DemoHeader Deserialize(Stream stream);
    public static DemoHeader DeserializeLengthDelimited(Stream stream);
    public static DemoHeader DeserializeLength(Stream stream, int length);
    public static DemoHeader Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DemoHeader previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoHeader Deserialize(Byte[] buffer, DemoHeader instance, bool isDelta);
    public static DemoHeader Deserialize(Stream stream, DemoHeader instance, bool isDelta);
    public static DemoHeader DeserializeLengthDelimited(Stream stream, DemoHeader instance, bool isDelta);
    public static DemoHeader DeserializeLength(Stream stream, int length, DemoHeader instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoHeader instance, DemoHeader previous);
    public static void Serialize(Stream stream, DemoHeader instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoHeader instance);
    public static void SerializeLengthDelimited(Stream stream, DemoHeader instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoShot : object {
    public string shotName;
    public string demoName;
    public float shotStart;
    public float shotLength;
    public DemoShotVectorTrack camPos;
    public DemoShotQuaternionTrack camRot;
    public DemoShotFloatTrack camFov;
    public DemoShotFloatTrack camDofDist;
    public DemoShotFloatTrack camDofFocalSize;
    public DemoShotFloatTrack camDofAperture;
    public DemoShotParentTrack camParent;
    public string folderName;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DemoShot instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DemoShot instance);
    public DemoShot Copy();
    public static DemoShot Deserialize(Stream stream);
    public static DemoShot DeserializeLengthDelimited(Stream stream);
    public static DemoShot DeserializeLength(Stream stream, int length);
    public static DemoShot Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DemoShot previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoShot Deserialize(Byte[] buffer, DemoShot instance, bool isDelta);
    public static DemoShot Deserialize(Stream stream, DemoShot instance, bool isDelta);
    public static DemoShot DeserializeLengthDelimited(Stream stream, DemoShot instance, bool isDelta);
    public static DemoShot DeserializeLength(Stream stream, int length, DemoShot instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoShot instance, DemoShot previous);
    public static void Serialize(Stream stream, DemoShot instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoShot instance);
    public static void SerializeLengthDelimited(Stream stream, DemoShot instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoShotFloatKeyframe : ValueType {
    public float keyframeTime;
    public float keyFrameValue;
    public static void ResetToPool(DemoShotFloatKeyframe instance);
    public void CopyTo(DemoShotFloatKeyframe instance);
    public DemoShotFloatKeyframe Copy();
    public static DemoShotFloatKeyframe Deserialize(Stream stream);
    public static DemoShotFloatKeyframe DeserializeLengthDelimited(Stream stream);
    public static DemoShotFloatKeyframe DeserializeLength(Stream stream, int length);
    public static DemoShotFloatKeyframe Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public sealed virtual void WriteToStream(Stream stream);
    public void WriteToStreamDelta(Stream stream, DemoShotFloatKeyframe previous);
    public sealed virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoShotFloatKeyframe Deserialize(Byte[] buffer, DemoShotFloatKeyframe& instance, bool isDelta);
    public static DemoShotFloatKeyframe Deserialize(Stream stream, DemoShotFloatKeyframe& instance, bool isDelta);
    public static DemoShotFloatKeyframe DeserializeLengthDelimited(Stream stream, DemoShotFloatKeyframe& instance, bool isDelta);
    public static DemoShotFloatKeyframe DeserializeLength(Stream stream, int length, DemoShotFloatKeyframe& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoShotFloatKeyframe instance, DemoShotFloatKeyframe previous);
    public static void Serialize(Stream stream, DemoShotFloatKeyframe instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoShotFloatKeyframe instance);
    public static void SerializeLengthDelimited(Stream stream, DemoShotFloatKeyframe instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoShotFloatTrack : object {
    public long trackType;
    public List`1<DemoShotFloatKeyframe> keyframes;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DemoShotFloatTrack instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DemoShotFloatTrack instance);
    public DemoShotFloatTrack Copy();
    public static DemoShotFloatTrack Deserialize(Stream stream);
    public static DemoShotFloatTrack DeserializeLengthDelimited(Stream stream);
    public static DemoShotFloatTrack DeserializeLength(Stream stream, int length);
    public static DemoShotFloatTrack Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DemoShotFloatTrack previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoShotFloatTrack Deserialize(Byte[] buffer, DemoShotFloatTrack instance, bool isDelta);
    public static DemoShotFloatTrack Deserialize(Stream stream, DemoShotFloatTrack instance, bool isDelta);
    public static DemoShotFloatTrack DeserializeLengthDelimited(Stream stream, DemoShotFloatTrack instance, bool isDelta);
    public static DemoShotFloatTrack DeserializeLength(Stream stream, int length, DemoShotFloatTrack instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoShotFloatTrack instance, DemoShotFloatTrack previous);
    public static void Serialize(Stream stream, DemoShotFloatTrack instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoShotFloatTrack instance);
    public static void SerializeLengthDelimited(Stream stream, DemoShotFloatTrack instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoShotParentKeyframe : ValueType {
    public float keyframeTime;
    public NetworkableId keyFrameParentId;
    public string keyFrameParentName;
    public static void ResetToPool(DemoShotParentKeyframe instance);
    public void CopyTo(DemoShotParentKeyframe instance);
    public DemoShotParentKeyframe Copy();
    public static DemoShotParentKeyframe Deserialize(Stream stream);
    public static DemoShotParentKeyframe DeserializeLengthDelimited(Stream stream);
    public static DemoShotParentKeyframe DeserializeLength(Stream stream, int length);
    public static DemoShotParentKeyframe Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public sealed virtual void WriteToStream(Stream stream);
    public void WriteToStreamDelta(Stream stream, DemoShotParentKeyframe previous);
    public sealed virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoShotParentKeyframe Deserialize(Byte[] buffer, DemoShotParentKeyframe& instance, bool isDelta);
    public static DemoShotParentKeyframe Deserialize(Stream stream, DemoShotParentKeyframe& instance, bool isDelta);
    public static DemoShotParentKeyframe DeserializeLengthDelimited(Stream stream, DemoShotParentKeyframe& instance, bool isDelta);
    public static DemoShotParentKeyframe DeserializeLength(Stream stream, int length, DemoShotParentKeyframe& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoShotParentKeyframe instance, DemoShotParentKeyframe previous);
    public static void Serialize(Stream stream, DemoShotParentKeyframe instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoShotParentKeyframe instance);
    public static void SerializeLengthDelimited(Stream stream, DemoShotParentKeyframe instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoShotParentTrack : object {
    public ulong parentId;
    public List`1<DemoShotParentKeyframe> keyframes;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DemoShotParentTrack instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DemoShotParentTrack instance);
    public DemoShotParentTrack Copy();
    public static DemoShotParentTrack Deserialize(Stream stream);
    public static DemoShotParentTrack DeserializeLengthDelimited(Stream stream);
    public static DemoShotParentTrack DeserializeLength(Stream stream, int length);
    public static DemoShotParentTrack Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DemoShotParentTrack previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoShotParentTrack Deserialize(Byte[] buffer, DemoShotParentTrack instance, bool isDelta);
    public static DemoShotParentTrack Deserialize(Stream stream, DemoShotParentTrack instance, bool isDelta);
    public static DemoShotParentTrack DeserializeLengthDelimited(Stream stream, DemoShotParentTrack instance, bool isDelta);
    public static DemoShotParentTrack DeserializeLength(Stream stream, int length, DemoShotParentTrack instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoShotParentTrack instance, DemoShotParentTrack previous);
    public static void Serialize(Stream stream, DemoShotParentTrack instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoShotParentTrack instance);
    public static void SerializeLengthDelimited(Stream stream, DemoShotParentTrack instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoShotQuaternionKeyframe : ValueType {
    public float keyframeTime;
    public float keyFrameValueX;
    public float keyFrameValueY;
    public float keyFrameValueZ;
    public float keyFrameValueW;
    public static void ResetToPool(DemoShotQuaternionKeyframe instance);
    public void CopyTo(DemoShotQuaternionKeyframe instance);
    public DemoShotQuaternionKeyframe Copy();
    public static DemoShotQuaternionKeyframe Deserialize(Stream stream);
    public static DemoShotQuaternionKeyframe DeserializeLengthDelimited(Stream stream);
    public static DemoShotQuaternionKeyframe DeserializeLength(Stream stream, int length);
    public static DemoShotQuaternionKeyframe Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public sealed virtual void WriteToStream(Stream stream);
    public void WriteToStreamDelta(Stream stream, DemoShotQuaternionKeyframe previous);
    public sealed virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoShotQuaternionKeyframe Deserialize(Byte[] buffer, DemoShotQuaternionKeyframe& instance, bool isDelta);
    public static DemoShotQuaternionKeyframe Deserialize(Stream stream, DemoShotQuaternionKeyframe& instance, bool isDelta);
    public static DemoShotQuaternionKeyframe DeserializeLengthDelimited(Stream stream, DemoShotQuaternionKeyframe& instance, bool isDelta);
    public static DemoShotQuaternionKeyframe DeserializeLength(Stream stream, int length, DemoShotQuaternionKeyframe& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoShotQuaternionKeyframe instance, DemoShotQuaternionKeyframe previous);
    public static void Serialize(Stream stream, DemoShotQuaternionKeyframe instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoShotQuaternionKeyframe instance);
    public static void SerializeLengthDelimited(Stream stream, DemoShotQuaternionKeyframe instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoShotQuaternionTrack : object {
    public long trackType;
    public List`1<DemoShotQuaternionKeyframe> keyframes;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DemoShotQuaternionTrack instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DemoShotQuaternionTrack instance);
    public DemoShotQuaternionTrack Copy();
    public static DemoShotQuaternionTrack Deserialize(Stream stream);
    public static DemoShotQuaternionTrack DeserializeLengthDelimited(Stream stream);
    public static DemoShotQuaternionTrack DeserializeLength(Stream stream, int length);
    public static DemoShotQuaternionTrack Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DemoShotQuaternionTrack previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoShotQuaternionTrack Deserialize(Byte[] buffer, DemoShotQuaternionTrack instance, bool isDelta);
    public static DemoShotQuaternionTrack Deserialize(Stream stream, DemoShotQuaternionTrack instance, bool isDelta);
    public static DemoShotQuaternionTrack DeserializeLengthDelimited(Stream stream, DemoShotQuaternionTrack instance, bool isDelta);
    public static DemoShotQuaternionTrack DeserializeLength(Stream stream, int length, DemoShotQuaternionTrack instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoShotQuaternionTrack instance, DemoShotQuaternionTrack previous);
    public static void Serialize(Stream stream, DemoShotQuaternionTrack instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoShotQuaternionTrack instance);
    public static void SerializeLengthDelimited(Stream stream, DemoShotQuaternionTrack instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoShotVectorKeyframe : ValueType {
    public float keyframeTime;
    public Vector3 keyFrameValue;
    public static void ResetToPool(DemoShotVectorKeyframe instance);
    public void CopyTo(DemoShotVectorKeyframe instance);
    public DemoShotVectorKeyframe Copy();
    public static DemoShotVectorKeyframe Deserialize(Stream stream);
    public static DemoShotVectorKeyframe DeserializeLengthDelimited(Stream stream);
    public static DemoShotVectorKeyframe DeserializeLength(Stream stream, int length);
    public static DemoShotVectorKeyframe Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public sealed virtual void WriteToStream(Stream stream);
    public void WriteToStreamDelta(Stream stream, DemoShotVectorKeyframe previous);
    public sealed virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoShotVectorKeyframe Deserialize(Byte[] buffer, DemoShotVectorKeyframe& instance, bool isDelta);
    public static DemoShotVectorKeyframe Deserialize(Stream stream, DemoShotVectorKeyframe& instance, bool isDelta);
    public static DemoShotVectorKeyframe DeserializeLengthDelimited(Stream stream, DemoShotVectorKeyframe& instance, bool isDelta);
    public static DemoShotVectorKeyframe DeserializeLength(Stream stream, int length, DemoShotVectorKeyframe& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoShotVectorKeyframe instance, DemoShotVectorKeyframe previous);
    public static void Serialize(Stream stream, DemoShotVectorKeyframe instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoShotVectorKeyframe instance);
    public static void SerializeLengthDelimited(Stream stream, DemoShotVectorKeyframe instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DemoShotVectorTrack : object {
    public long trackType;
    public List`1<DemoShotVectorKeyframe> keyframes;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DemoShotVectorTrack instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DemoShotVectorTrack instance);
    public DemoShotVectorTrack Copy();
    public static DemoShotVectorTrack Deserialize(Stream stream);
    public static DemoShotVectorTrack DeserializeLengthDelimited(Stream stream);
    public static DemoShotVectorTrack DeserializeLength(Stream stream, int length);
    public static DemoShotVectorTrack Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DemoShotVectorTrack previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DemoShotVectorTrack Deserialize(Byte[] buffer, DemoShotVectorTrack instance, bool isDelta);
    public static DemoShotVectorTrack Deserialize(Stream stream, DemoShotVectorTrack instance, bool isDelta);
    public static DemoShotVectorTrack DeserializeLengthDelimited(Stream stream, DemoShotVectorTrack instance, bool isDelta);
    public static DemoShotVectorTrack DeserializeLength(Stream stream, int length, DemoShotVectorTrack instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DemoShotVectorTrack instance, DemoShotVectorTrack previous);
    public static void Serialize(Stream stream, DemoShotVectorTrack instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DemoShotVectorTrack instance);
    public static void SerializeLengthDelimited(Stream stream, DemoShotVectorTrack instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DieselEngine : object {
    public float fuelTime;
    public ulong startedByPlayer;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DieselEngine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DieselEngine instance);
    public DieselEngine Copy();
    public static DieselEngine Deserialize(Stream stream);
    public static DieselEngine DeserializeLengthDelimited(Stream stream);
    public static DieselEngine DeserializeLength(Stream stream, int length);
    public static DieselEngine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DieselEngine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DieselEngine Deserialize(Byte[] buffer, DieselEngine instance, bool isDelta);
    public static DieselEngine Deserialize(Stream stream, DieselEngine instance, bool isDelta);
    public static DieselEngine DeserializeLengthDelimited(Stream stream, DieselEngine instance, bool isDelta);
    public static DieselEngine DeserializeLength(Stream stream, int length, DieselEngine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DieselEngine instance, DieselEngine previous);
    public static void Serialize(Stream stream, DieselEngine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DieselEngine instance);
    public static void SerializeLengthDelimited(Stream stream, DieselEngine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DigitalClock : object {
    public List`1<DigitalClockAlarm> alarms;
    public bool muted;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DigitalClock instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DigitalClock instance);
    public DigitalClock Copy();
    public static DigitalClock Deserialize(Stream stream);
    public static DigitalClock DeserializeLengthDelimited(Stream stream);
    public static DigitalClock DeserializeLength(Stream stream, int length);
    public static DigitalClock Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DigitalClock previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DigitalClock Deserialize(Byte[] buffer, DigitalClock instance, bool isDelta);
    public static DigitalClock Deserialize(Stream stream, DigitalClock instance, bool isDelta);
    public static DigitalClock DeserializeLengthDelimited(Stream stream, DigitalClock instance, bool isDelta);
    public static DigitalClock DeserializeLength(Stream stream, int length, DigitalClock instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DigitalClock instance, DigitalClock previous);
    public static void Serialize(Stream stream, DigitalClock instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DigitalClock instance);
    public static void SerializeLengthDelimited(Stream stream, DigitalClock instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DigitalClockAlarm : object {
    public float time;
    public bool active;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DigitalClockAlarm instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DigitalClockAlarm instance);
    public DigitalClockAlarm Copy();
    public static DigitalClockAlarm Deserialize(Stream stream);
    public static DigitalClockAlarm DeserializeLengthDelimited(Stream stream);
    public static DigitalClockAlarm DeserializeLength(Stream stream, int length);
    public static DigitalClockAlarm Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DigitalClockAlarm previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DigitalClockAlarm Deserialize(Byte[] buffer, DigitalClockAlarm instance, bool isDelta);
    public static DigitalClockAlarm Deserialize(Stream stream, DigitalClockAlarm instance, bool isDelta);
    public static DigitalClockAlarm DeserializeLengthDelimited(Stream stream, DigitalClockAlarm instance, bool isDelta);
    public static DigitalClockAlarm DeserializeLength(Stream stream, int length, DigitalClockAlarm instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DigitalClockAlarm instance, DigitalClockAlarm previous);
    public static void Serialize(Stream stream, DigitalClockAlarm instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DigitalClockAlarm instance);
    public static void SerializeLengthDelimited(Stream stream, DigitalClockAlarm instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DigitalClockMessage : object {
    public List`1<DigitalClockAlarm> alarms;
    public bool muted;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DigitalClockMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DigitalClockMessage instance);
    public DigitalClockMessage Copy();
    public static DigitalClockMessage Deserialize(Stream stream);
    public static DigitalClockMessage DeserializeLengthDelimited(Stream stream);
    public static DigitalClockMessage DeserializeLength(Stream stream, int length);
    public static DigitalClockMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DigitalClockMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DigitalClockMessage Deserialize(Byte[] buffer, DigitalClockMessage instance, bool isDelta);
    public static DigitalClockMessage Deserialize(Stream stream, DigitalClockMessage instance, bool isDelta);
    public static DigitalClockMessage DeserializeLengthDelimited(Stream stream, DigitalClockMessage instance, bool isDelta);
    public static DigitalClockMessage DeserializeLength(Stream stream, int length, DigitalClockMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DigitalClockMessage instance, DigitalClockMessage previous);
    public static void Serialize(Stream stream, DigitalClockMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DigitalClockMessage instance);
    public static void SerializeLengthDelimited(Stream stream, DigitalClockMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DiverPropulsionVehicle : object {
    public NetworkableId fuelStorageID;
    public int fuelAmount;
    public int fuelTicks;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DiverPropulsionVehicle instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DiverPropulsionVehicle instance);
    public DiverPropulsionVehicle Copy();
    public static DiverPropulsionVehicle Deserialize(Stream stream);
    public static DiverPropulsionVehicle DeserializeLengthDelimited(Stream stream);
    public static DiverPropulsionVehicle DeserializeLength(Stream stream, int length);
    public static DiverPropulsionVehicle Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DiverPropulsionVehicle previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DiverPropulsionVehicle Deserialize(Byte[] buffer, DiverPropulsionVehicle instance, bool isDelta);
    public static DiverPropulsionVehicle Deserialize(Stream stream, DiverPropulsionVehicle instance, bool isDelta);
    public static DiverPropulsionVehicle DeserializeLengthDelimited(Stream stream, DiverPropulsionVehicle instance, bool isDelta);
    public static DiverPropulsionVehicle DeserializeLength(Stream stream, int length, DiverPropulsionVehicle instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DiverPropulsionVehicle instance, DiverPropulsionVehicle previous);
    public static void Serialize(Stream stream, DiverPropulsionVehicle instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DiverPropulsionVehicle instance);
    public static void SerializeLengthDelimited(Stream stream, DiverPropulsionVehicle instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Drone : object {
    public float pitch;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Drone instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Drone instance);
    public Drone Copy();
    public static Drone Deserialize(Stream stream);
    public static Drone DeserializeLengthDelimited(Stream stream);
    public static Drone DeserializeLength(Stream stream, int length);
    public static Drone Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Drone previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Drone Deserialize(Byte[] buffer, Drone instance, bool isDelta);
    public static Drone Deserialize(Stream stream, Drone instance, bool isDelta);
    public static Drone DeserializeLengthDelimited(Stream stream, Drone instance, bool isDelta);
    public static Drone DeserializeLength(Stream stream, int length, Drone instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Drone instance, Drone previous);
    public static void Serialize(Stream stream, Drone instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Drone instance);
    public static void SerializeLengthDelimited(Stream stream, Drone instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.DudExplosive : object {
    public float fuseTimeLeft;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(DudExplosive instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(DudExplosive instance);
    public DudExplosive Copy();
    public static DudExplosive Deserialize(Stream stream);
    public static DudExplosive DeserializeLengthDelimited(Stream stream);
    public static DudExplosive DeserializeLength(Stream stream, int length);
    public static DudExplosive Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, DudExplosive previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static DudExplosive Deserialize(Byte[] buffer, DudExplosive instance, bool isDelta);
    public static DudExplosive Deserialize(Stream stream, DudExplosive instance, bool isDelta);
    public static DudExplosive DeserializeLengthDelimited(Stream stream, DudExplosive instance, bool isDelta);
    public static DudExplosive DeserializeLength(Stream stream, int length, DudExplosive instance, bool isDelta);
    public static void SerializeDelta(Stream stream, DudExplosive instance, DudExplosive previous);
    public static void Serialize(Stream stream, DudExplosive instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(DudExplosive instance);
    public static void SerializeLengthDelimited(Stream stream, DudExplosive instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.EggHunt : object {
    public List`1<EggHunter> hunters;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(EggHunt instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(EggHunt instance);
    public EggHunt Copy();
    public static EggHunt Deserialize(Stream stream);
    public static EggHunt DeserializeLengthDelimited(Stream stream);
    public static EggHunt DeserializeLength(Stream stream, int length);
    public static EggHunt Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, EggHunt previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static EggHunt Deserialize(Byte[] buffer, EggHunt instance, bool isDelta);
    public static EggHunt Deserialize(Stream stream, EggHunt instance, bool isDelta);
    public static EggHunt DeserializeLengthDelimited(Stream stream, EggHunt instance, bool isDelta);
    public static EggHunt DeserializeLength(Stream stream, int length, EggHunt instance, bool isDelta);
    public static void SerializeDelta(Stream stream, EggHunt instance, EggHunt previous);
    public static void Serialize(Stream stream, EggHunt instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(EggHunt instance);
    public static void SerializeLengthDelimited(Stream stream, EggHunt instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Elevator : object {
    public int floor;
    public NetworkableId spawnedLift;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Elevator instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Elevator instance);
    public Elevator Copy();
    public static Elevator Deserialize(Stream stream);
    public static Elevator DeserializeLengthDelimited(Stream stream);
    public static Elevator DeserializeLength(Stream stream, int length);
    public static Elevator Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Elevator previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Elevator Deserialize(Byte[] buffer, Elevator instance, bool isDelta);
    public static Elevator Deserialize(Stream stream, Elevator instance, bool isDelta);
    public static Elevator DeserializeLengthDelimited(Stream stream, Elevator instance, bool isDelta);
    public static Elevator DeserializeLength(Stream stream, int length, Elevator instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Elevator instance, Elevator previous);
    public static void Serialize(Stream stream, Elevator instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Elevator instance);
    public static void SerializeLengthDelimited(Stream stream, Elevator instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ElevatorLift : object {
    public NetworkableId owner;
    public float topElevatorHeight;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ElevatorLift instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ElevatorLift instance);
    public ElevatorLift Copy();
    public static ElevatorLift Deserialize(Stream stream);
    public static ElevatorLift DeserializeLengthDelimited(Stream stream);
    public static ElevatorLift DeserializeLength(Stream stream, int length);
    public static ElevatorLift Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ElevatorLift previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ElevatorLift Deserialize(Byte[] buffer, ElevatorLift instance, bool isDelta);
    public static ElevatorLift Deserialize(Stream stream, ElevatorLift instance, bool isDelta);
    public static ElevatorLift DeserializeLengthDelimited(Stream stream, ElevatorLift instance, bool isDelta);
    public static ElevatorLift DeserializeLength(Stream stream, int length, ElevatorLift instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ElevatorLift instance, ElevatorLift previous);
    public static void Serialize(Stream stream, ElevatorLift instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ElevatorLift instance);
    public static void SerializeLengthDelimited(Stream stream, ElevatorLift instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.EngineStorage : object {
    public bool isUsable;
    public float accelerationBoost;
    public float topSpeedBoost;
    public float fuelEconomyBoost;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(EngineStorage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(EngineStorage instance);
    public EngineStorage Copy();
    public static EngineStorage Deserialize(Stream stream);
    public static EngineStorage DeserializeLengthDelimited(Stream stream);
    public static EngineStorage DeserializeLength(Stream stream, int length);
    public static EngineStorage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, EngineStorage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static EngineStorage Deserialize(Byte[] buffer, EngineStorage instance, bool isDelta);
    public static EngineStorage Deserialize(Stream stream, EngineStorage instance, bool isDelta);
    public static EngineStorage DeserializeLengthDelimited(Stream stream, EngineStorage instance, bool isDelta);
    public static EngineStorage DeserializeLength(Stream stream, int length, EngineStorage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, EngineStorage instance, EngineStorage previous);
    public static void Serialize(Stream stream, EngineStorage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(EngineStorage instance);
    public static void SerializeLengthDelimited(Stream stream, EngineStorage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Entity : object {
    public BaseNetworkable baseNetworkable;
    public BaseEntity baseEntity;
    public BasePlayer basePlayer;
    public WorldItem worldItem;
    public BaseResource resource;
    public BuildingBlock buildingBlock;
    public Environment environment;
    public Corpse corpse;
    public ParentInfo parent;
    public KeyLock keyLock;
    public CodeLock codeLock;
    public EntitySlots entitySlots;
    public BuildingPrivilege buildingPrivilege;
    public StorageBox storageBox;
    public HeldEntity heldEntity;
    public BaseProjectile baseProjectile;
    public BaseNPC baseNPC;
    public Loot loot;
    public GenericSpawner genericSpawner;
    public SleepingBag sleepingBag;
    public LootableCorpse lootableCorpse;
    public Sign sign;
    public BaseCombat baseCombat;
    public MapEntity mapEntity;
    public ResearchTable researchTable;
    public DudExplosive dudExplosive;
    public MiningQuarry miningQuarry;
    public BaseVehicle baseVehicle;
    public Helicopter helicopter;
    public Landmine landmine;
    public AutoTurret autoturret;
    public SphereEntity sphereEntity;
    public StabilityEntity stabilityEntity;
    public OwnerInfo ownerInfo;
    public DecayEntity decayEntity;
    public Spawnable spawnable;
    public ServerGib servergib;
    public VendingMachine vendingMachine;
    public SpinnerWheel spinnerWheel;
    public Lift lift;
    public BradleyAPC bradley;
    public WaterWell waterwell;
    public Motorboat motorBoat;
    public IOEntity ioEntity;
    public PuzzleReset puzzleReset;
    public RelationshipManager relationshipManager;
    public HotAirBalloon hotAirBalloon;
    public SAMSite samSite;
    public EggHunt eggHunt;
    public ArcadeMachine arcadeMachine;
    public Minicopter miniCopter;
    public Horse horse;
    public SmartAlarm smartAlarm;
    public LightString lightString;
    public LightDeployer lightDeployer;
    public RCEntity rcEntity;
    public ComputerStation computerStation;
    public GrowableEntity growableEntity;
    public Composter composter;
    public ModularVehicle modularVehicle;
    public ModularCar modularCar;
    public SimpleUID simpleUID;
    public VehicleLift vehicleLift;
    public EngineStorage engineStorage;
    public VehicleVendor vehicleVendor;
    public WaterPool WaterPool;
    public Photo photo;
    public PhotoFrame photoFrame;
    public VehicleModule vehicleModule;
    public MixingTable mixingTable;
    public ShopKeeper shopKeeper;
    public Elevator elevator;
    public SkullTrophy skullTrophy;
    public Cassette cassette;
    public Telephone telephone;
    public BoomBox boomBox;
    public NeonSign neonSign;
    public SubEntityList subEntityList;
    public MarketTerminal marketTerminal;
    public DeliveryDrone deliveryDrone;
    public ReclaimTerminal reclaimTerminal;
    public SlotMachine slotMachine;
    public TrainEngine trainEngine;
    public CardGame cardGame;
    public Crane crane;
    public ConnectedSpeaker connectedSpeaker;
    public AudioEntity audioEntity;
    public MicrophoneStand microphoneStand;
    public Submarine submarine;
    public SleepingBagCamper sleepingBagCamper;
    public CamperModule camperModule;
    public PaintableSign paintableSign;
    public Whitelist whitelist;
    public FrankensteinTable FrankensteinTable;
    public MLRS mlrs;
    public ReclaimManager reclaimManager;
    public GameMode gameMode;
    public Snowmobile snowmobile;
    public bool createdThisFrame;
    public PatternFirework patternFirework;
    public CargoPlane cargoPlane;
    public PaintedItem paintedItem;
    public ClanManager clanManager;
    public Spray spray;
    public BaseTrain baseTrain;
    public Zipline zipline;
    public ZiplineMountable ziplineMountable;
    public ZiplineArrivalPoint ZiplineArrival;
    public SprayLine sprayLine;
    public CoalingTower coalingTower;
    public SimpleInt simpleInt;
    public BaseOven baseOven;
    public BrainComponent brainComponent;
    public ProceduralDungeon proceduralDungeon;
    public IndustrialConveyor industrialConveyor;
    public IndustrialCrafter industrialCrafter;
    public Drone drone;
    public TimedExplosive explosive;
    public SimpleUInt simpleUint;
    public WeaponRack weaponRack;
    public AttackHeli attackHeli;
    public AttackHeliTurret attackHeliTurret;
    public AttackHeliRockets attackHeliRockets;
    public BaseBoat baseBoat;
    public Ragdoll ragdoll;
    public DieselEngine dieselEngine;
    public AssociatedFiles associatedFiles;
    public NexusFerry nexusFerry;
    public NexusIsland nexusIsland;
    public NexusDockTerminal nexusDockTerminal;
    public RockingChair rockingChair;
    public HeadData headData;
    public WantedPoster wantedPoster;
    public RidableAnimal ridableAnimal;
    public WaypointRace waypointRace;
    public LegacyShelter legacyShelter;
    public MetalDetectorSource metalDetectorSource;
    public TutorialIsland tutorialIsland;
    public CinematicEntity cinematicEntity;
    public BuildingPrivilegeRetro buildingPrivilegeRetro;
    public HarborCrane harborCrane;
    public CargoShip cargoShip;
    public CargoShipContainer cargoShipContainer;
    public MissionMapMarker missionMapMarker;
    public Bike bike;
    public DiverPropulsionVehicle diverPropulsionVehicle;
    public TravellingVendor travellingVendor;
    public VendingDynamicPricing vendingDynamicPricing;
    public TinCanAlarm tinCanAlarm;
    public DigitalClock digitalClock;
    public ElevatorLift elevatorLift;
    public NPCVendingMachine npcVendingMachine;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Entity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Entity instance);
    public Entity Copy();
    public static Entity Deserialize(Stream stream);
    public static Entity DeserializeLengthDelimited(Stream stream);
    public static Entity DeserializeLength(Stream stream, int length);
    public static Entity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Entity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Entity Deserialize(Byte[] buffer, Entity instance, bool isDelta);
    public static Entity Deserialize(Stream stream, Entity instance, bool isDelta);
    public static Entity DeserializeLengthDelimited(Stream stream, Entity instance, bool isDelta);
    public static Entity DeserializeLength(Stream stream, int length, Entity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Entity instance, Entity previous);
    public static void Serialize(Stream stream, Entity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Entity instance);
    public static void SerializeLengthDelimited(Stream stream, Entity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.EntityIdList : object {
    public List`1<NetworkableId> entityIds;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(EntityIdList instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(EntityIdList instance);
    public EntityIdList Copy();
    public static EntityIdList Deserialize(Stream stream);
    public static EntityIdList DeserializeLengthDelimited(Stream stream);
    public static EntityIdList DeserializeLength(Stream stream, int length);
    public static EntityIdList Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, EntityIdList previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static EntityIdList Deserialize(Byte[] buffer, EntityIdList instance, bool isDelta);
    public static EntityIdList Deserialize(Stream stream, EntityIdList instance, bool isDelta);
    public static EntityIdList DeserializeLengthDelimited(Stream stream, EntityIdList instance, bool isDelta);
    public static EntityIdList DeserializeLength(Stream stream, int length, EntityIdList instance, bool isDelta);
    public static void SerializeDelta(Stream stream, EntityIdList instance, EntityIdList previous);
    public static void Serialize(Stream stream, EntityIdList instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(EntityIdList instance);
    public static void SerializeLengthDelimited(Stream stream, EntityIdList instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.EntityList : object {
    public List`1<Entity> entity;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(EntityList instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(EntityList instance);
    public EntityList Copy();
    public static EntityList Deserialize(Stream stream);
    public static EntityList DeserializeLengthDelimited(Stream stream);
    public static EntityList DeserializeLength(Stream stream, int length);
    public static EntityList Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, EntityList previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static EntityList Deserialize(Byte[] buffer, EntityList instance, bool isDelta);
    public static EntityList Deserialize(Stream stream, EntityList instance, bool isDelta);
    public static EntityList DeserializeLengthDelimited(Stream stream, EntityList instance, bool isDelta);
    public static EntityList DeserializeLength(Stream stream, int length, EntityList instance, bool isDelta);
    public static void SerializeDelta(Stream stream, EntityList instance, EntityList previous);
    public static void Serialize(Stream stream, EntityList instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(EntityList instance);
    public static void SerializeLengthDelimited(Stream stream, EntityList instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.EntitySlots : object {
    public NetworkableId slotLock;
    public NetworkableId slotFireMod;
    public NetworkableId slotUpperModification;
    public NetworkableId centerDecoration;
    public NetworkableId lowerCenterDecoration;
    public NetworkableId storageMonitor;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(EntitySlots instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(EntitySlots instance);
    public EntitySlots Copy();
    public static EntitySlots Deserialize(Stream stream);
    public static EntitySlots DeserializeLengthDelimited(Stream stream);
    public static EntitySlots DeserializeLength(Stream stream, int length);
    public static EntitySlots Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, EntitySlots previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static EntitySlots Deserialize(Byte[] buffer, EntitySlots instance, bool isDelta);
    public static EntitySlots Deserialize(Stream stream, EntitySlots instance, bool isDelta);
    public static EntitySlots DeserializeLengthDelimited(Stream stream, EntitySlots instance, bool isDelta);
    public static EntitySlots DeserializeLength(Stream stream, int length, EntitySlots instance, bool isDelta);
    public static void SerializeDelta(Stream stream, EntitySlots instance, EntitySlots previous);
    public static void Serialize(Stream stream, EntitySlots instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(EntitySlots instance);
    public static void SerializeLengthDelimited(Stream stream, EntitySlots instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Environment : object {
    public long dateTime;
    public float clouds;
    public float fog;
    public float wind;
    public float rain;
    public float engineTime;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Environment instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Environment instance);
    public Environment Copy();
    public static Environment Deserialize(Stream stream);
    public static Environment DeserializeLengthDelimited(Stream stream);
    public static Environment DeserializeLength(Stream stream, int length);
    public static Environment Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Environment previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Environment Deserialize(Byte[] buffer, Environment instance, bool isDelta);
    public static Environment Deserialize(Stream stream, Environment instance, bool isDelta);
    public static Environment DeserializeLengthDelimited(Stream stream, Environment instance, bool isDelta);
    public static Environment DeserializeLength(Stream stream, int length, Environment instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Environment instance, Environment previous);
    public static void Serialize(Stream stream, Environment instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Environment instance);
    public static void SerializeLengthDelimited(Stream stream, Environment instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.FileStorageCacheData : object {
    public Byte[] data;
    public NetworkableId entityId;
    public UInt32 numId;
    public UInt32 crc;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(FileStorageCacheData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(FileStorageCacheData instance);
    public FileStorageCacheData Copy();
    public static FileStorageCacheData Deserialize(Stream stream);
    public static FileStorageCacheData DeserializeLengthDelimited(Stream stream);
    public static FileStorageCacheData DeserializeLength(Stream stream, int length);
    public static FileStorageCacheData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, FileStorageCacheData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static FileStorageCacheData Deserialize(Byte[] buffer, FileStorageCacheData instance, bool isDelta);
    public static FileStorageCacheData Deserialize(Stream stream, FileStorageCacheData instance, bool isDelta);
    public static FileStorageCacheData DeserializeLengthDelimited(Stream stream, FileStorageCacheData instance, bool isDelta);
    public static FileStorageCacheData DeserializeLength(Stream stream, int length, FileStorageCacheData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, FileStorageCacheData instance, FileStorageCacheData previous);
    public static void Serialize(Stream stream, FileStorageCacheData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(FileStorageCacheData instance);
    public static void SerializeLengthDelimited(Stream stream, FileStorageCacheData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.FrankensteinTable : object {
    public List`1<int> itemIds;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(FrankensteinTable instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(FrankensteinTable instance);
    public FrankensteinTable Copy();
    public static FrankensteinTable Deserialize(Stream stream);
    public static FrankensteinTable DeserializeLengthDelimited(Stream stream);
    public static FrankensteinTable DeserializeLength(Stream stream, int length);
    public static FrankensteinTable Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, FrankensteinTable previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static FrankensteinTable Deserialize(Byte[] buffer, FrankensteinTable instance, bool isDelta);
    public static FrankensteinTable Deserialize(Stream stream, FrankensteinTable instance, bool isDelta);
    public static FrankensteinTable DeserializeLengthDelimited(Stream stream, FrankensteinTable instance, bool isDelta);
    public static FrankensteinTable DeserializeLength(Stream stream, int length, FrankensteinTable instance, bool isDelta);
    public static void SerializeDelta(Stream stream, FrankensteinTable instance, FrankensteinTable previous);
    public static void Serialize(Stream stream, FrankensteinTable instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(FrankensteinTable instance);
    public static void SerializeLengthDelimited(Stream stream, FrankensteinTable instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.GameMode : object {
    public List`1<TeamInfo> teams;
    public List`1<ScoreColumn> scoreColumns;
    public List`1<PlayerScore> playerScores;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(GameMode instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(GameMode instance);
    public GameMode Copy();
    public static GameMode Deserialize(Stream stream);
    public static GameMode DeserializeLengthDelimited(Stream stream);
    public static GameMode DeserializeLength(Stream stream, int length);
    public static GameMode Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, GameMode previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static GameMode Deserialize(Byte[] buffer, GameMode instance, bool isDelta);
    public static GameMode Deserialize(Stream stream, GameMode instance, bool isDelta);
    public static GameMode DeserializeLengthDelimited(Stream stream, GameMode instance, bool isDelta);
    public static GameMode DeserializeLength(Stream stream, int length, GameMode instance, bool isDelta);
    public static void SerializeDelta(Stream stream, GameMode instance, GameMode previous);
    public static void Serialize(Stream stream, GameMode instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(GameMode instance);
    public static void SerializeLengthDelimited(Stream stream, GameMode instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.GenericSpawner : object {
    public List`1<SpawnedEnt> ents;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(GenericSpawner instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(GenericSpawner instance);
    public GenericSpawner Copy();
    public static GenericSpawner Deserialize(Stream stream);
    public static GenericSpawner DeserializeLengthDelimited(Stream stream);
    public static GenericSpawner DeserializeLength(Stream stream, int length);
    public static GenericSpawner Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, GenericSpawner previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static GenericSpawner Deserialize(Byte[] buffer, GenericSpawner instance, bool isDelta);
    public static GenericSpawner Deserialize(Stream stream, GenericSpawner instance, bool isDelta);
    public static GenericSpawner DeserializeLengthDelimited(Stream stream, GenericSpawner instance, bool isDelta);
    public static GenericSpawner DeserializeLength(Stream stream, int length, GenericSpawner instance, bool isDelta);
    public static void SerializeDelta(Stream stream, GenericSpawner instance, GenericSpawner previous);
    public static void Serialize(Stream stream, GenericSpawner instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(GenericSpawner instance);
    public static void SerializeLengthDelimited(Stream stream, GenericSpawner instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.GlobalEntityCollection : object {
    public List`1<GlobalEntityData> entities;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(GlobalEntityCollection instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(GlobalEntityCollection instance);
    public GlobalEntityCollection Copy();
    public static GlobalEntityCollection Deserialize(Stream stream);
    public static GlobalEntityCollection DeserializeLengthDelimited(Stream stream);
    public static GlobalEntityCollection DeserializeLength(Stream stream, int length);
    public static GlobalEntityCollection Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, GlobalEntityCollection previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static GlobalEntityCollection Deserialize(Byte[] buffer, GlobalEntityCollection instance, bool isDelta);
    public static GlobalEntityCollection Deserialize(Stream stream, GlobalEntityCollection instance, bool isDelta);
    public static GlobalEntityCollection DeserializeLengthDelimited(Stream stream, GlobalEntityCollection instance, bool isDelta);
    public static GlobalEntityCollection DeserializeLength(Stream stream, int length, GlobalEntityCollection instance, bool isDelta);
    public static void SerializeDelta(Stream stream, GlobalEntityCollection instance, GlobalEntityCollection previous);
    public static void Serialize(Stream stream, GlobalEntityCollection instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(GlobalEntityCollection instance);
    public static void SerializeLengthDelimited(Stream stream, GlobalEntityCollection instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.GlobalEntityData : object {
    public UInt32 prefabId;
    public NetworkableId uid;
    public Vector3 pos;
    public Vector3 rot;
    public int modelState;
    public int grade;
    public int flags;
    public ulong skin;
    public int customColor;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(GlobalEntityData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(GlobalEntityData instance);
    public GlobalEntityData Copy();
    public static GlobalEntityData Deserialize(Stream stream);
    public static GlobalEntityData DeserializeLengthDelimited(Stream stream);
    public static GlobalEntityData DeserializeLength(Stream stream, int length);
    public static GlobalEntityData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, GlobalEntityData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static GlobalEntityData Deserialize(Byte[] buffer, GlobalEntityData instance, bool isDelta);
    public static GlobalEntityData Deserialize(Stream stream, GlobalEntityData instance, bool isDelta);
    public static GlobalEntityData DeserializeLengthDelimited(Stream stream, GlobalEntityData instance, bool isDelta);
    public static GlobalEntityData DeserializeLength(Stream stream, int length, GlobalEntityData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, GlobalEntityData instance, GlobalEntityData previous);
    public static void Serialize(Stream stream, GlobalEntityData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(GlobalEntityData instance);
    public static void SerializeLengthDelimited(Stream stream, GlobalEntityData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.GrowableEntity : object {
    public int state;
    public float age;
    public int water;
    public float healthy;
    public float totalAge;
    public float growthAge;
    public float yieldFraction;
    public float stageAge;
    public int genes;
    public float lightModifier;
    public float waterModifier;
    public float groundModifier;
    public float happiness;
    public float temperatureModifier;
    public float waterConsumption;
    public float yieldPool;
    public bool fertilized;
    public int previousGenes;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(GrowableEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(GrowableEntity instance);
    public GrowableEntity Copy();
    public static GrowableEntity Deserialize(Stream stream);
    public static GrowableEntity DeserializeLengthDelimited(Stream stream);
    public static GrowableEntity DeserializeLength(Stream stream, int length);
    public static GrowableEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, GrowableEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static GrowableEntity Deserialize(Byte[] buffer, GrowableEntity instance, bool isDelta);
    public static GrowableEntity Deserialize(Stream stream, GrowableEntity instance, bool isDelta);
    public static GrowableEntity DeserializeLengthDelimited(Stream stream, GrowableEntity instance, bool isDelta);
    public static GrowableEntity DeserializeLength(Stream stream, int length, GrowableEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, GrowableEntity instance, GrowableEntity previous);
    public static void Serialize(Stream stream, GrowableEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(GrowableEntity instance);
    public static void SerializeLengthDelimited(Stream stream, GrowableEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Half3 : ValueType {
    public UInt32 x;
    public UInt32 y;
    public UInt32 z;
    public static void ResetToPool(Half3 instance);
    public void CopyTo(Half3 instance);
    public Half3 Copy();
    public static Half3 Deserialize(Stream stream);
    public static Half3 DeserializeLengthDelimited(Stream stream);
    public static Half3 DeserializeLength(Stream stream, int length);
    public static Half3 Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public sealed virtual void WriteToStream(Stream stream);
    public void WriteToStreamDelta(Stream stream, Half3 previous);
    public sealed virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Half3 Deserialize(Byte[] buffer, Half3& instance, bool isDelta);
    public static Half3 Deserialize(Stream stream, Half3& instance, bool isDelta);
    public static Half3 DeserializeLengthDelimited(Stream stream, Half3& instance, bool isDelta);
    public static Half3 DeserializeLength(Stream stream, int length, Half3& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Half3 instance, Half3 previous);
    public static void Serialize(Stream stream, Half3 instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Half3 instance);
    public static void SerializeLengthDelimited(Stream stream, Half3 instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.HarborCrane : object {
    public float time;
    public float yaw;
    public float depth;
    public float height;
    public QueuedMove currentMove;
    public int currentPickupState;
    public Vector3 startForward;
    public float maxMoveHeight;
    public NetworkableId toParent;
    public List`1<QueuedMove> queuedMoves;
    public float moveDelay;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(HarborCrane instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(HarborCrane instance);
    public HarborCrane Copy();
    public static HarborCrane Deserialize(Stream stream);
    public static HarborCrane DeserializeLengthDelimited(Stream stream);
    public static HarborCrane DeserializeLength(Stream stream, int length);
    public static HarborCrane Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, HarborCrane previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static HarborCrane Deserialize(Byte[] buffer, HarborCrane instance, bool isDelta);
    public static HarborCrane Deserialize(Stream stream, HarborCrane instance, bool isDelta);
    public static HarborCrane DeserializeLengthDelimited(Stream stream, HarborCrane instance, bool isDelta);
    public static HarborCrane DeserializeLength(Stream stream, int length, HarborCrane instance, bool isDelta);
    public static void SerializeDelta(Stream stream, HarborCrane instance, HarborCrane previous);
    public static void Serialize(Stream stream, HarborCrane instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(HarborCrane instance);
    public static void SerializeLengthDelimited(Stream stream, HarborCrane instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.HeadData : object {
    public UInt32 entitySource;
    public string playerName;
    public ulong playerId;
    public List`1<int> clothing;
    public UInt32 count;
    public int horseBreed;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(HeadData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(HeadData instance);
    public HeadData Copy();
    public static HeadData Deserialize(Stream stream);
    public static HeadData DeserializeLengthDelimited(Stream stream);
    public static HeadData DeserializeLength(Stream stream, int length);
    public static HeadData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, HeadData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static HeadData Deserialize(Byte[] buffer, HeadData instance, bool isDelta);
    public static HeadData Deserialize(Stream stream, HeadData instance, bool isDelta);
    public static HeadData DeserializeLengthDelimited(Stream stream, HeadData instance, bool isDelta);
    public static HeadData DeserializeLength(Stream stream, int length, HeadData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, HeadData instance, HeadData previous);
    public static void Serialize(Stream stream, HeadData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(HeadData instance);
    public static void SerializeLengthDelimited(Stream stream, HeadData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.HealthBelowAIEventData : object {
    public float healthFraction;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(HealthBelowAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(HealthBelowAIEventData instance);
    public HealthBelowAIEventData Copy();
    public static HealthBelowAIEventData Deserialize(Stream stream);
    public static HealthBelowAIEventData DeserializeLengthDelimited(Stream stream);
    public static HealthBelowAIEventData DeserializeLength(Stream stream, int length);
    public static HealthBelowAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, HealthBelowAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static HealthBelowAIEventData Deserialize(Byte[] buffer, HealthBelowAIEventData instance, bool isDelta);
    public static HealthBelowAIEventData Deserialize(Stream stream, HealthBelowAIEventData instance, bool isDelta);
    public static HealthBelowAIEventData DeserializeLengthDelimited(Stream stream, HealthBelowAIEventData instance, bool isDelta);
    public static HealthBelowAIEventData DeserializeLength(Stream stream, int length, HealthBelowAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, HealthBelowAIEventData instance, HealthBelowAIEventData previous);
    public static void Serialize(Stream stream, HealthBelowAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(HealthBelowAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, HealthBelowAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.HeldEntity : object {
    public ItemId itemUID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(HeldEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(HeldEntity instance);
    public HeldEntity Copy();
    public static HeldEntity Deserialize(Stream stream);
    public static HeldEntity DeserializeLengthDelimited(Stream stream);
    public static HeldEntity DeserializeLength(Stream stream, int length);
    public static HeldEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, HeldEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static HeldEntity Deserialize(Byte[] buffer, HeldEntity instance, bool isDelta);
    public static HeldEntity Deserialize(Stream stream, HeldEntity instance, bool isDelta);
    public static HeldEntity DeserializeLengthDelimited(Stream stream, HeldEntity instance, bool isDelta);
    public static HeldEntity DeserializeLength(Stream stream, int length, HeldEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, HeldEntity instance, HeldEntity previous);
    public static void Serialize(Stream stream, HeldEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(HeldEntity instance);
    public static void SerializeLengthDelimited(Stream stream, HeldEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Helicopter : object {
    public Vector3 tiltRot;
    public Vector3 leftGun;
    public Vector3 rightGun;
    public Vector3 spotlightVec;
    public List`1<float> weakspothealths;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Helicopter instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Helicopter instance);
    public Helicopter Copy();
    public static Helicopter Deserialize(Stream stream);
    public static Helicopter DeserializeLengthDelimited(Stream stream);
    public static Helicopter DeserializeLength(Stream stream, int length);
    public static Helicopter Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Helicopter previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Helicopter Deserialize(Byte[] buffer, Helicopter instance, bool isDelta);
    public static Helicopter Deserialize(Stream stream, Helicopter instance, bool isDelta);
    public static Helicopter DeserializeLengthDelimited(Stream stream, Helicopter instance, bool isDelta);
    public static Helicopter DeserializeLength(Stream stream, int length, Helicopter instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Helicopter instance, Helicopter previous);
    public static void Serialize(Stream stream, Helicopter instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Helicopter instance);
    public static void SerializeLengthDelimited(Stream stream, Helicopter instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Horse : object {
    public int runState;
    public int numStorageSlots;
    public int breedIndex;
    public float staminaSeconds;
    public float currentMaxStaminaSeconds;
    public float maxSpeed;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Horse instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Horse instance);
    public Horse Copy();
    public static Horse Deserialize(Stream stream);
    public static Horse DeserializeLengthDelimited(Stream stream);
    public static Horse DeserializeLength(Stream stream, int length);
    public static Horse Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Horse previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Horse Deserialize(Byte[] buffer, Horse instance, bool isDelta);
    public static Horse Deserialize(Stream stream, Horse instance, bool isDelta);
    public static Horse DeserializeLengthDelimited(Stream stream, Horse instance, bool isDelta);
    public static Horse DeserializeLength(Stream stream, int length, Horse instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Horse instance, Horse previous);
    public static void Serialize(Stream stream, Horse instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Horse instance);
    public static void SerializeLengthDelimited(Stream stream, Horse instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.HotAirBalloon : object {
    public float inflationAmount;
    public Vector3 velocity;
    public float sinceLastBlast;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(HotAirBalloon instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(HotAirBalloon instance);
    public HotAirBalloon Copy();
    public static HotAirBalloon Deserialize(Stream stream);
    public static HotAirBalloon DeserializeLengthDelimited(Stream stream);
    public static HotAirBalloon DeserializeLength(Stream stream, int length);
    public static HotAirBalloon Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, HotAirBalloon previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static HotAirBalloon Deserialize(Byte[] buffer, HotAirBalloon instance, bool isDelta);
    public static HotAirBalloon Deserialize(Stream stream, HotAirBalloon instance, bool isDelta);
    public static HotAirBalloon DeserializeLengthDelimited(Stream stream, HotAirBalloon instance, bool isDelta);
    public static HotAirBalloon DeserializeLength(Stream stream, int length, HotAirBalloon instance, bool isDelta);
    public static void SerializeDelta(Stream stream, HotAirBalloon instance, HotAirBalloon previous);
    public static void Serialize(Stream stream, HotAirBalloon instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(HotAirBalloon instance);
    public static void SerializeLengthDelimited(Stream stream, HotAirBalloon instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.HungerAboveAIEventData : object {
    public float value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(HungerAboveAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(HungerAboveAIEventData instance);
    public HungerAboveAIEventData Copy();
    public static HungerAboveAIEventData Deserialize(Stream stream);
    public static HungerAboveAIEventData DeserializeLengthDelimited(Stream stream);
    public static HungerAboveAIEventData DeserializeLength(Stream stream, int length);
    public static HungerAboveAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, HungerAboveAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static HungerAboveAIEventData Deserialize(Byte[] buffer, HungerAboveAIEventData instance, bool isDelta);
    public static HungerAboveAIEventData Deserialize(Stream stream, HungerAboveAIEventData instance, bool isDelta);
    public static HungerAboveAIEventData DeserializeLengthDelimited(Stream stream, HungerAboveAIEventData instance, bool isDelta);
    public static HungerAboveAIEventData DeserializeLength(Stream stream, int length, HungerAboveAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, HungerAboveAIEventData instance, HungerAboveAIEventData previous);
    public static void Serialize(Stream stream, HungerAboveAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(HungerAboveAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, HungerAboveAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.IndustrialConveyor : object {
    public List`1<ItemFilter> filters;
    public int conveyorMode;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(IndustrialConveyor instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(IndustrialConveyor instance);
    public IndustrialConveyor Copy();
    public static IndustrialConveyor Deserialize(Stream stream);
    public static IndustrialConveyor DeserializeLengthDelimited(Stream stream);
    public static IndustrialConveyor DeserializeLength(Stream stream, int length);
    public static IndustrialConveyor Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, IndustrialConveyor previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static IndustrialConveyor Deserialize(Byte[] buffer, IndustrialConveyor instance, bool isDelta);
    public static IndustrialConveyor Deserialize(Stream stream, IndustrialConveyor instance, bool isDelta);
    public static IndustrialConveyor DeserializeLengthDelimited(Stream stream, IndustrialConveyor instance, bool isDelta);
    public static IndustrialConveyor DeserializeLength(Stream stream, int length, IndustrialConveyor instance, bool isDelta);
    public static void SerializeDelta(Stream stream, IndustrialConveyor instance, IndustrialConveyor previous);
    public static void Serialize(Stream stream, IndustrialConveyor instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(IndustrialConveyor instance);
    public static void SerializeLengthDelimited(Stream stream, IndustrialConveyor instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.IndustrialConveyorTransfer : object {
    public List`1<ItemTransfer> ItemTransfers;
    public List`1<NetworkableId> inputEntities;
    public List`1<NetworkableId> outputEntities;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(IndustrialConveyorTransfer instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(IndustrialConveyorTransfer instance);
    public IndustrialConveyorTransfer Copy();
    public static IndustrialConveyorTransfer Deserialize(Stream stream);
    public static IndustrialConveyorTransfer DeserializeLengthDelimited(Stream stream);
    public static IndustrialConveyorTransfer DeserializeLength(Stream stream, int length);
    public static IndustrialConveyorTransfer Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, IndustrialConveyorTransfer previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static IndustrialConveyorTransfer Deserialize(Byte[] buffer, IndustrialConveyorTransfer instance, bool isDelta);
    public static IndustrialConveyorTransfer Deserialize(Stream stream, IndustrialConveyorTransfer instance, bool isDelta);
    public static IndustrialConveyorTransfer DeserializeLengthDelimited(Stream stream, IndustrialConveyorTransfer instance, bool isDelta);
    public static IndustrialConveyorTransfer DeserializeLength(Stream stream, int length, IndustrialConveyorTransfer instance, bool isDelta);
    public static void SerializeDelta(Stream stream, IndustrialConveyorTransfer instance, IndustrialConveyorTransfer previous);
    public static void Serialize(Stream stream, IndustrialConveyorTransfer instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(IndustrialConveyorTransfer instance);
    public static void SerializeLengthDelimited(Stream stream, IndustrialConveyorTransfer instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.IndustrialCrafter : object {
    public int currentlyCrafting;
    public int currentlyCraftingAmount;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(IndustrialCrafter instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(IndustrialCrafter instance);
    public IndustrialCrafter Copy();
    public static IndustrialCrafter Deserialize(Stream stream);
    public static IndustrialCrafter DeserializeLengthDelimited(Stream stream);
    public static IndustrialCrafter DeserializeLength(Stream stream, int length);
    public static IndustrialCrafter Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, IndustrialCrafter previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static IndustrialCrafter Deserialize(Byte[] buffer, IndustrialCrafter instance, bool isDelta);
    public static IndustrialCrafter Deserialize(Stream stream, IndustrialCrafter instance, bool isDelta);
    public static IndustrialCrafter DeserializeLengthDelimited(Stream stream, IndustrialCrafter instance, bool isDelta);
    public static IndustrialCrafter DeserializeLength(Stream stream, int length, IndustrialCrafter instance, bool isDelta);
    public static void SerializeDelta(Stream stream, IndustrialCrafter instance, IndustrialCrafter previous);
    public static void Serialize(Stream stream, IndustrialCrafter instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(IndustrialCrafter instance);
    public static void SerializeLengthDelimited(Stream stream, IndustrialCrafter instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.InRangeAIEventData : object {
    public float range;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(InRangeAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(InRangeAIEventData instance);
    public InRangeAIEventData Copy();
    public static InRangeAIEventData Deserialize(Stream stream);
    public static InRangeAIEventData DeserializeLengthDelimited(Stream stream);
    public static InRangeAIEventData DeserializeLength(Stream stream, int length);
    public static InRangeAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, InRangeAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static InRangeAIEventData Deserialize(Byte[] buffer, InRangeAIEventData instance, bool isDelta);
    public static InRangeAIEventData Deserialize(Stream stream, InRangeAIEventData instance, bool isDelta);
    public static InRangeAIEventData DeserializeLengthDelimited(Stream stream, InRangeAIEventData instance, bool isDelta);
    public static InRangeAIEventData DeserializeLength(Stream stream, int length, InRangeAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, InRangeAIEventData instance, InRangeAIEventData previous);
    public static void Serialize(Stream stream, InRangeAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(InRangeAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, InRangeAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.InRangeOfHomeAIEventData : object {
    public float range;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(InRangeOfHomeAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(InRangeOfHomeAIEventData instance);
    public InRangeOfHomeAIEventData Copy();
    public static InRangeOfHomeAIEventData Deserialize(Stream stream);
    public static InRangeOfHomeAIEventData DeserializeLengthDelimited(Stream stream);
    public static InRangeOfHomeAIEventData DeserializeLength(Stream stream, int length);
    public static InRangeOfHomeAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, InRangeOfHomeAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static InRangeOfHomeAIEventData Deserialize(Byte[] buffer, InRangeOfHomeAIEventData instance, bool isDelta);
    public static InRangeOfHomeAIEventData Deserialize(Stream stream, InRangeOfHomeAIEventData instance, bool isDelta);
    public static InRangeOfHomeAIEventData DeserializeLengthDelimited(Stream stream, InRangeOfHomeAIEventData instance, bool isDelta);
    public static InRangeOfHomeAIEventData DeserializeLength(Stream stream, int length, InRangeOfHomeAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, InRangeOfHomeAIEventData instance, InRangeOfHomeAIEventData previous);
    public static void Serialize(Stream stream, InRangeOfHomeAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(InRangeOfHomeAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, InRangeOfHomeAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.InstrumentMidiBinding : object {
    public int noteFrom;
    public int note;
    public int noteOctave;
    public int noteType;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(InstrumentMidiBinding instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(InstrumentMidiBinding instance);
    public InstrumentMidiBinding Copy();
    public static InstrumentMidiBinding Deserialize(Stream stream);
    public static InstrumentMidiBinding DeserializeLengthDelimited(Stream stream);
    public static InstrumentMidiBinding DeserializeLength(Stream stream, int length);
    public static InstrumentMidiBinding Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, InstrumentMidiBinding previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static InstrumentMidiBinding Deserialize(Byte[] buffer, InstrumentMidiBinding instance, bool isDelta);
    public static InstrumentMidiBinding Deserialize(Stream stream, InstrumentMidiBinding instance, bool isDelta);
    public static InstrumentMidiBinding DeserializeLengthDelimited(Stream stream, InstrumentMidiBinding instance, bool isDelta);
    public static InstrumentMidiBinding DeserializeLength(Stream stream, int length, InstrumentMidiBinding instance, bool isDelta);
    public static void SerializeDelta(Stream stream, InstrumentMidiBinding instance, InstrumentMidiBinding previous);
    public static void Serialize(Stream stream, InstrumentMidiBinding instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(InstrumentMidiBinding instance);
    public static void SerializeLengthDelimited(Stream stream, InstrumentMidiBinding instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.InstrumentMidiBindings : object {
    public List`1<InstrumentMidiBinding> bindings;
    public UInt32 forInstrument;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(InstrumentMidiBindings instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(InstrumentMidiBindings instance);
    public InstrumentMidiBindings Copy();
    public static InstrumentMidiBindings Deserialize(Stream stream);
    public static InstrumentMidiBindings DeserializeLengthDelimited(Stream stream);
    public static InstrumentMidiBindings DeserializeLength(Stream stream, int length);
    public static InstrumentMidiBindings Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, InstrumentMidiBindings previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static InstrumentMidiBindings Deserialize(Byte[] buffer, InstrumentMidiBindings instance, bool isDelta);
    public static InstrumentMidiBindings Deserialize(Stream stream, InstrumentMidiBindings instance, bool isDelta);
    public static InstrumentMidiBindings DeserializeLengthDelimited(Stream stream, InstrumentMidiBindings instance, bool isDelta);
    public static InstrumentMidiBindings DeserializeLength(Stream stream, int length, InstrumentMidiBindings instance, bool isDelta);
    public static void SerializeDelta(Stream stream, InstrumentMidiBindings instance, InstrumentMidiBindings previous);
    public static void Serialize(Stream stream, InstrumentMidiBindings instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(InstrumentMidiBindings instance);
    public static void SerializeLengthDelimited(Stream stream, InstrumentMidiBindings instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.InstrumentRecording : object {
    public List`1<InstrumentRecordingNote> notes;
    public int forInstrument;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(InstrumentRecording instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(InstrumentRecording instance);
    public InstrumentRecording Copy();
    public static InstrumentRecording Deserialize(Stream stream);
    public static InstrumentRecording DeserializeLengthDelimited(Stream stream);
    public static InstrumentRecording DeserializeLength(Stream stream, int length);
    public static InstrumentRecording Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, InstrumentRecording previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static InstrumentRecording Deserialize(Byte[] buffer, InstrumentRecording instance, bool isDelta);
    public static InstrumentRecording Deserialize(Stream stream, InstrumentRecording instance, bool isDelta);
    public static InstrumentRecording DeserializeLengthDelimited(Stream stream, InstrumentRecording instance, bool isDelta);
    public static InstrumentRecording DeserializeLength(Stream stream, int length, InstrumentRecording instance, bool isDelta);
    public static void SerializeDelta(Stream stream, InstrumentRecording instance, InstrumentRecording previous);
    public static void Serialize(Stream stream, InstrumentRecording instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(InstrumentRecording instance);
    public static void SerializeLengthDelimited(Stream stream, InstrumentRecording instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.InstrumentRecordingNote : object {
    public float startTime;
    public float duration;
    public int note;
    public int octave;
    public float velocity;
    public int noteType;
    public bool shouldPlay;
    public bool hasPlayed;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(InstrumentRecordingNote instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(InstrumentRecordingNote instance);
    public InstrumentRecordingNote Copy();
    public static InstrumentRecordingNote Deserialize(Stream stream);
    public static InstrumentRecordingNote DeserializeLengthDelimited(Stream stream);
    public static InstrumentRecordingNote DeserializeLength(Stream stream, int length);
    public static InstrumentRecordingNote Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, InstrumentRecordingNote previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static InstrumentRecordingNote Deserialize(Byte[] buffer, InstrumentRecordingNote instance, bool isDelta);
    public static InstrumentRecordingNote Deserialize(Stream stream, InstrumentRecordingNote instance, bool isDelta);
    public static InstrumentRecordingNote DeserializeLengthDelimited(Stream stream, InstrumentRecordingNote instance, bool isDelta);
    public static InstrumentRecordingNote DeserializeLength(Stream stream, int length, InstrumentRecordingNote instance, bool isDelta);
    public static void SerializeDelta(Stream stream, InstrumentRecordingNote instance, InstrumentRecordingNote previous);
    public static void Serialize(Stream stream, InstrumentRecordingNote instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(InstrumentRecordingNote instance);
    public static void SerializeLengthDelimited(Stream stream, InstrumentRecordingNote instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.IOEntity : object {
    public List`1<IOConnection> inputs;
    public List`1<IOConnection> outputs;
    public NetworkableId genericEntRef1;
    public NetworkableId genericEntRef2;
    public NetworkableId genericEntRef3;
    public int genericInt1;
    public int genericInt2;
    public float genericFloat1;
    public float genericFloat2;
    public int genericInt3;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(IOEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(IOEntity instance);
    public IOEntity Copy();
    public static IOEntity Deserialize(Stream stream);
    public static IOEntity DeserializeLengthDelimited(Stream stream);
    public static IOEntity DeserializeLength(Stream stream, int length);
    public static IOEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, IOEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static IOEntity Deserialize(Byte[] buffer, IOEntity instance, bool isDelta);
    public static IOEntity Deserialize(Stream stream, IOEntity instance, bool isDelta);
    public static IOEntity DeserializeLengthDelimited(Stream stream, IOEntity instance, bool isDelta);
    public static IOEntity DeserializeLength(Stream stream, int length, IOEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, IOEntity instance, IOEntity previous);
    public static void Serialize(Stream stream, IOEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(IOEntity instance);
    public static void SerializeLengthDelimited(Stream stream, IOEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Item : object {
    public ItemId UID;
    public int itemid;
    public int slot;
    public int amount;
    public int flags;
    public float removetime;
    public float locktime;
    public NetworkableId worldEntity;
    public InstanceData instanceData;
    public NetworkableId heldEntity;
    public ConditionData conditionData;
    public string name;
    public string text;
    public ulong skinid;
    public float cooktime;
    public string streamerName;
    public int ammoCount;
    public ItemContainer contents;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Item instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Item instance);
    public Item Copy();
    public static Item Deserialize(Stream stream);
    public static Item DeserializeLengthDelimited(Stream stream);
    public static Item DeserializeLength(Stream stream, int length);
    public static Item Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Item previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Item Deserialize(Byte[] buffer, Item instance, bool isDelta);
    public static Item Deserialize(Stream stream, Item instance, bool isDelta);
    public static Item DeserializeLengthDelimited(Stream stream, Item instance, bool isDelta);
    public static Item DeserializeLength(Stream stream, int length, Item instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Item instance, Item previous);
    public static void Serialize(Stream stream, Item instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Item instance);
    public static void SerializeLengthDelimited(Stream stream, Item instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ItemAmountList : object {
    public List`1<int> itemID;
    public List`1<float> amount;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ItemAmountList instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ItemAmountList instance);
    public ItemAmountList Copy();
    public static ItemAmountList Deserialize(Stream stream);
    public static ItemAmountList DeserializeLengthDelimited(Stream stream);
    public static ItemAmountList DeserializeLength(Stream stream, int length);
    public static ItemAmountList Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ItemAmountList previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ItemAmountList Deserialize(Byte[] buffer, ItemAmountList instance, bool isDelta);
    public static ItemAmountList Deserialize(Stream stream, ItemAmountList instance, bool isDelta);
    public static ItemAmountList DeserializeLengthDelimited(Stream stream, ItemAmountList instance, bool isDelta);
    public static ItemAmountList DeserializeLength(Stream stream, int length, ItemAmountList instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ItemAmountList instance, ItemAmountList previous);
    public static void Serialize(Stream stream, ItemAmountList instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ItemAmountList instance);
    public static void SerializeLengthDelimited(Stream stream, ItemAmountList instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ItemContainer : object {
    public ItemContainerId UID;
    public int slots;
    public float temperature;
    public int flags;
    public int allowedContents;
    public int maxStackSize;
    public List`1<int> allowedItems;
    public List`1<int> availableSlots;
    public int volume;
    public List`1<Item> contents;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ItemContainer instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ItemContainer instance);
    public ItemContainer Copy();
    public static ItemContainer Deserialize(Stream stream);
    public static ItemContainer DeserializeLengthDelimited(Stream stream);
    public static ItemContainer DeserializeLength(Stream stream, int length);
    public static ItemContainer Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ItemContainer previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ItemContainer Deserialize(Byte[] buffer, ItemContainer instance, bool isDelta);
    public static ItemContainer Deserialize(Stream stream, ItemContainer instance, bool isDelta);
    public static ItemContainer DeserializeLengthDelimited(Stream stream, ItemContainer instance, bool isDelta);
    public static ItemContainer DeserializeLength(Stream stream, int length, ItemContainer instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ItemContainer instance, ItemContainer previous);
    public static void Serialize(Stream stream, ItemContainer instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ItemContainer instance);
    public static void SerializeLengthDelimited(Stream stream, ItemContainer instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ItemCrafter : object {
    public List`1<Task> queue;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ItemCrafter instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ItemCrafter instance);
    public ItemCrafter Copy();
    public static ItemCrafter Deserialize(Stream stream);
    public static ItemCrafter DeserializeLengthDelimited(Stream stream);
    public static ItemCrafter DeserializeLength(Stream stream, int length);
    public static ItemCrafter Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ItemCrafter previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ItemCrafter Deserialize(Byte[] buffer, ItemCrafter instance, bool isDelta);
    public static ItemCrafter Deserialize(Stream stream, ItemCrafter instance, bool isDelta);
    public static ItemCrafter DeserializeLengthDelimited(Stream stream, ItemCrafter instance, bool isDelta);
    public static ItemCrafter DeserializeLength(Stream stream, int length, ItemCrafter instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ItemCrafter instance, ItemCrafter previous);
    public static void Serialize(Stream stream, ItemCrafter instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ItemCrafter instance);
    public static void SerializeLengthDelimited(Stream stream, ItemCrafter instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.KeyLock : object {
    public int code;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(KeyLock instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(KeyLock instance);
    public KeyLock Copy();
    public static KeyLock Deserialize(Stream stream);
    public static KeyLock DeserializeLengthDelimited(Stream stream);
    public static KeyLock DeserializeLength(Stream stream, int length);
    public static KeyLock Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, KeyLock previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static KeyLock Deserialize(Byte[] buffer, KeyLock instance, bool isDelta);
    public static KeyLock Deserialize(Stream stream, KeyLock instance, bool isDelta);
    public static KeyLock DeserializeLengthDelimited(Stream stream, KeyLock instance, bool isDelta);
    public static KeyLock DeserializeLength(Stream stream, int length, KeyLock instance, bool isDelta);
    public static void SerializeDelta(Stream stream, KeyLock instance, KeyLock previous);
    public static void Serialize(Stream stream, KeyLock instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(KeyLock instance);
    public static void SerializeLengthDelimited(Stream stream, KeyLock instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Landmine : object {
    public ulong triggeredID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Landmine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Landmine instance);
    public Landmine Copy();
    public static Landmine Deserialize(Stream stream);
    public static Landmine DeserializeLengthDelimited(Stream stream);
    public static Landmine DeserializeLength(Stream stream, int length);
    public static Landmine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Landmine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Landmine Deserialize(Byte[] buffer, Landmine instance, bool isDelta);
    public static Landmine Deserialize(Stream stream, Landmine instance, bool isDelta);
    public static Landmine DeserializeLengthDelimited(Stream stream, Landmine instance, bool isDelta);
    public static Landmine DeserializeLength(Stream stream, int length, Landmine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Landmine instance, Landmine previous);
    public static void Serialize(Stream stream, Landmine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Landmine instance);
    public static void SerializeLengthDelimited(Stream stream, Landmine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.LegacyShelter : object {
    public NetworkableId doorID;
    public float timeSinceInteracted;
    public ulong ownerId;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(LegacyShelter instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(LegacyShelter instance);
    public LegacyShelter Copy();
    public static LegacyShelter Deserialize(Stream stream);
    public static LegacyShelter DeserializeLengthDelimited(Stream stream);
    public static LegacyShelter DeserializeLength(Stream stream, int length);
    public static LegacyShelter Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, LegacyShelter previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static LegacyShelter Deserialize(Byte[] buffer, LegacyShelter instance, bool isDelta);
    public static LegacyShelter Deserialize(Stream stream, LegacyShelter instance, bool isDelta);
    public static LegacyShelter DeserializeLengthDelimited(Stream stream, LegacyShelter instance, bool isDelta);
    public static LegacyShelter DeserializeLength(Stream stream, int length, LegacyShelter instance, bool isDelta);
    public static void SerializeDelta(Stream stream, LegacyShelter instance, LegacyShelter previous);
    public static void Serialize(Stream stream, LegacyShelter instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(LegacyShelter instance);
    public static void SerializeLengthDelimited(Stream stream, LegacyShelter instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Lift : object {
    public int floor;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Lift instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Lift instance);
    public Lift Copy();
    public static Lift Deserialize(Stream stream);
    public static Lift DeserializeLengthDelimited(Stream stream);
    public static Lift DeserializeLength(Stream stream, int length);
    public static Lift Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Lift previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Lift Deserialize(Byte[] buffer, Lift instance, bool isDelta);
    public static Lift Deserialize(Stream stream, Lift instance, bool isDelta);
    public static Lift DeserializeLengthDelimited(Stream stream, Lift instance, bool isDelta);
    public static Lift DeserializeLength(Stream stream, int length, Lift instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Lift instance, Lift previous);
    public static void Serialize(Stream stream, Lift instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Lift instance);
    public static void SerializeLengthDelimited(Stream stream, Lift instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.LightDeployer : object {
    public NetworkableId active;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(LightDeployer instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(LightDeployer instance);
    public LightDeployer Copy();
    public static LightDeployer Deserialize(Stream stream);
    public static LightDeployer DeserializeLengthDelimited(Stream stream);
    public static LightDeployer DeserializeLength(Stream stream, int length);
    public static LightDeployer Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, LightDeployer previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static LightDeployer Deserialize(Byte[] buffer, LightDeployer instance, bool isDelta);
    public static LightDeployer Deserialize(Stream stream, LightDeployer instance, bool isDelta);
    public static LightDeployer DeserializeLengthDelimited(Stream stream, LightDeployer instance, bool isDelta);
    public static LightDeployer DeserializeLength(Stream stream, int length, LightDeployer instance, bool isDelta);
    public static void SerializeDelta(Stream stream, LightDeployer instance, LightDeployer previous);
    public static void Serialize(Stream stream, LightDeployer instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(LightDeployer instance);
    public static void SerializeLengthDelimited(Stream stream, LightDeployer instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.LightString : object {
    public List`1<StringPoint> points;
    public int lengthUsed;
    public int animationStyle;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(LightString instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(LightString instance);
    public LightString Copy();
    public static LightString Deserialize(Stream stream);
    public static LightString DeserializeLengthDelimited(Stream stream);
    public static LightString DeserializeLength(Stream stream, int length);
    public static LightString Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, LightString previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static LightString Deserialize(Byte[] buffer, LightString instance, bool isDelta);
    public static LightString Deserialize(Stream stream, LightString instance, bool isDelta);
    public static LightString DeserializeLengthDelimited(Stream stream, LightString instance, bool isDelta);
    public static LightString DeserializeLength(Stream stream, int length, LightString instance, bool isDelta);
    public static void SerializeDelta(Stream stream, LightString instance, LightString previous);
    public static void Serialize(Stream stream, LightString instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(LightString instance);
    public static void SerializeLengthDelimited(Stream stream, LightString instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.LinePoint : object {
    public Vector3 localPosition;
    public Vector3 worldNormal;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(LinePoint instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(LinePoint instance);
    public LinePoint Copy();
    public static LinePoint Deserialize(Stream stream);
    public static LinePoint DeserializeLengthDelimited(Stream stream);
    public static LinePoint DeserializeLength(Stream stream, int length);
    public static LinePoint Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, LinePoint previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static LinePoint Deserialize(Byte[] buffer, LinePoint instance, bool isDelta);
    public static LinePoint Deserialize(Stream stream, LinePoint instance, bool isDelta);
    public static LinePoint DeserializeLengthDelimited(Stream stream, LinePoint instance, bool isDelta);
    public static LinePoint DeserializeLength(Stream stream, int length, LinePoint instance, bool isDelta);
    public static void SerializeDelta(Stream stream, LinePoint instance, LinePoint previous);
    public static void Serialize(Stream stream, LinePoint instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(LinePoint instance);
    public static void SerializeLengthDelimited(Stream stream, LinePoint instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Loot : object {
    public ItemContainer contents;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Loot instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Loot instance);
    public Loot Copy();
    public static Loot Deserialize(Stream stream);
    public static Loot DeserializeLengthDelimited(Stream stream);
    public static Loot DeserializeLength(Stream stream, int length);
    public static Loot Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Loot previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Loot Deserialize(Byte[] buffer, Loot instance, bool isDelta);
    public static Loot Deserialize(Stream stream, Loot instance, bool isDelta);
    public static Loot DeserializeLengthDelimited(Stream stream, Loot instance, bool isDelta);
    public static Loot DeserializeLength(Stream stream, int length, Loot instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Loot instance, Loot previous);
    public static void Serialize(Stream stream, Loot instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Loot instance);
    public static void SerializeLengthDelimited(Stream stream, Loot instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.LootableCorpse : object {
    public Private privateData;
    public ulong playerID;
    public string playerName;
    public UInt32 underwearSkin;
    public string streamerName;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(LootableCorpse instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(LootableCorpse instance);
    public LootableCorpse Copy();
    public static LootableCorpse Deserialize(Stream stream);
    public static LootableCorpse DeserializeLengthDelimited(Stream stream);
    public static LootableCorpse DeserializeLength(Stream stream, int length);
    public static LootableCorpse Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, LootableCorpse previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static LootableCorpse Deserialize(Byte[] buffer, LootableCorpse instance, bool isDelta);
    public static LootableCorpse Deserialize(Stream stream, LootableCorpse instance, bool isDelta);
    public static LootableCorpse DeserializeLengthDelimited(Stream stream, LootableCorpse instance, bool isDelta);
    public static LootableCorpse DeserializeLength(Stream stream, int length, LootableCorpse instance, bool isDelta);
    public static void SerializeDelta(Stream stream, LootableCorpse instance, LootableCorpse previous);
    public static void Serialize(Stream stream, LootableCorpse instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(LootableCorpse instance);
    public static void SerializeLengthDelimited(Stream stream, LootableCorpse instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Magazine : object {
    public int capacity;
    public int contents;
    public int ammoType;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Magazine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Magazine instance);
    public Magazine Copy();
    public static Magazine Deserialize(Stream stream);
    public static Magazine DeserializeLengthDelimited(Stream stream);
    public static Magazine DeserializeLength(Stream stream, int length);
    public static Magazine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Magazine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Magazine Deserialize(Byte[] buffer, Magazine instance, bool isDelta);
    public static Magazine Deserialize(Stream stream, Magazine instance, bool isDelta);
    public static Magazine DeserializeLengthDelimited(Stream stream, Magazine instance, bool isDelta);
    public static Magazine DeserializeLength(Stream stream, int length, Magazine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Magazine instance, Magazine previous);
    public static void Serialize(Stream stream, Magazine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Magazine instance);
    public static void SerializeLengthDelimited(Stream stream, Magazine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MapData : object {
    public string name;
    public Byte[] data;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MapData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MapData instance);
    public MapData Copy();
    public static MapData Deserialize(Stream stream);
    public static MapData DeserializeLengthDelimited(Stream stream);
    public static MapData DeserializeLength(Stream stream, int length);
    public static MapData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MapData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MapData Deserialize(Byte[] buffer, MapData instance, bool isDelta);
    public static MapData Deserialize(Stream stream, MapData instance, bool isDelta);
    public static MapData DeserializeLengthDelimited(Stream stream, MapData instance, bool isDelta);
    public static MapData DeserializeLength(Stream stream, int length, MapData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MapData instance, MapData previous);
    public static void Serialize(Stream stream, MapData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MapData instance);
    public static void SerializeLengthDelimited(Stream stream, MapData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MapEntity : object {
    public List`1<UInt32> fogImages;
    public List`1<UInt32> paintImages;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MapEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MapEntity instance);
    public MapEntity Copy();
    public static MapEntity Deserialize(Stream stream);
    public static MapEntity DeserializeLengthDelimited(Stream stream);
    public static MapEntity DeserializeLength(Stream stream, int length);
    public static MapEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MapEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MapEntity Deserialize(Byte[] buffer, MapEntity instance, bool isDelta);
    public static MapEntity Deserialize(Stream stream, MapEntity instance, bool isDelta);
    public static MapEntity DeserializeLengthDelimited(Stream stream, MapEntity instance, bool isDelta);
    public static MapEntity DeserializeLength(Stream stream, int length, MapEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MapEntity instance, MapEntity previous);
    public static void Serialize(Stream stream, MapEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MapEntity instance);
    public static void SerializeLengthDelimited(Stream stream, MapEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MapNote : object {
    public int noteType;
    public Vector3 worldPosition;
    public int icon;
    public int colourIndex;
    public string label;
    public bool isPing;
    public float timeRemaining;
    public float totalDuration;
    public NetworkableId associatedId;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MapNote instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MapNote instance);
    public MapNote Copy();
    public static MapNote Deserialize(Stream stream);
    public static MapNote DeserializeLengthDelimited(Stream stream);
    public static MapNote DeserializeLength(Stream stream, int length);
    public static MapNote Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MapNote previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MapNote Deserialize(Byte[] buffer, MapNote instance, bool isDelta);
    public static MapNote Deserialize(Stream stream, MapNote instance, bool isDelta);
    public static MapNote DeserializeLengthDelimited(Stream stream, MapNote instance, bool isDelta);
    public static MapNote DeserializeLength(Stream stream, int length, MapNote instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MapNote instance, MapNote previous);
    public static void Serialize(Stream stream, MapNote instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MapNote instance);
    public static void SerializeLengthDelimited(Stream stream, MapNote instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MapNoteList : object {
    public List`1<MapNote> notes;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MapNoteList instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MapNoteList instance);
    public MapNoteList Copy();
    public static MapNoteList Deserialize(Stream stream);
    public static MapNoteList DeserializeLengthDelimited(Stream stream);
    public static MapNoteList DeserializeLength(Stream stream, int length);
    public static MapNoteList Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MapNoteList previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MapNoteList Deserialize(Byte[] buffer, MapNoteList instance, bool isDelta);
    public static MapNoteList Deserialize(Stream stream, MapNoteList instance, bool isDelta);
    public static MapNoteList DeserializeLengthDelimited(Stream stream, MapNoteList instance, bool isDelta);
    public static MapNoteList DeserializeLength(Stream stream, int length, MapNoteList instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MapNoteList instance, MapNoteList previous);
    public static void Serialize(Stream stream, MapNoteList instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MapNoteList instance);
    public static void SerializeLengthDelimited(Stream stream, MapNoteList instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MarketTerminal : object {
    public ulong customerSteamId;
    public NetworkableId marketplaceId;
    public List`1<PendingOrder> orders;
    public string customerName;
    public TimeUntil timeUntilExpiry;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MarketTerminal instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MarketTerminal instance);
    public MarketTerminal Copy();
    public static MarketTerminal Deserialize(Stream stream);
    public static MarketTerminal DeserializeLengthDelimited(Stream stream);
    public static MarketTerminal DeserializeLength(Stream stream, int length);
    public static MarketTerminal Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MarketTerminal previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MarketTerminal Deserialize(Byte[] buffer, MarketTerminal instance, bool isDelta);
    public static MarketTerminal Deserialize(Stream stream, MarketTerminal instance, bool isDelta);
    public static MarketTerminal DeserializeLengthDelimited(Stream stream, MarketTerminal instance, bool isDelta);
    public static MarketTerminal DeserializeLength(Stream stream, int length, MarketTerminal instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MarketTerminal instance, MarketTerminal previous);
    public static void Serialize(Stream stream, MarketTerminal instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MarketTerminal instance);
    public static void SerializeLengthDelimited(Stream stream, MarketTerminal instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MemoryBank : object {
    public int type;
    public int slotCount;
    public List`1<int> slots;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MemoryBank instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MemoryBank instance);
    public MemoryBank Copy();
    public static MemoryBank Deserialize(Stream stream);
    public static MemoryBank DeserializeLengthDelimited(Stream stream);
    public static MemoryBank DeserializeLength(Stream stream, int length);
    public static MemoryBank Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MemoryBank previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MemoryBank Deserialize(Byte[] buffer, MemoryBank instance, bool isDelta);
    public static MemoryBank Deserialize(Stream stream, MemoryBank instance, bool isDelta);
    public static MemoryBank DeserializeLengthDelimited(Stream stream, MemoryBank instance, bool isDelta);
    public static MemoryBank DeserializeLength(Stream stream, int length, MemoryBank instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MemoryBank instance, MemoryBank previous);
    public static void Serialize(Stream stream, MemoryBank instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MemoryBank instance);
    public static void SerializeLengthDelimited(Stream stream, MemoryBank instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MetalDetectorSource : object {
    public List`1<Vector3> spawnLocations;
    public float spawnRadius;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MetalDetectorSource instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MetalDetectorSource instance);
    public MetalDetectorSource Copy();
    public static MetalDetectorSource Deserialize(Stream stream);
    public static MetalDetectorSource DeserializeLengthDelimited(Stream stream);
    public static MetalDetectorSource DeserializeLength(Stream stream, int length);
    public static MetalDetectorSource Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MetalDetectorSource previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MetalDetectorSource Deserialize(Byte[] buffer, MetalDetectorSource instance, bool isDelta);
    public static MetalDetectorSource Deserialize(Stream stream, MetalDetectorSource instance, bool isDelta);
    public static MetalDetectorSource DeserializeLengthDelimited(Stream stream, MetalDetectorSource instance, bool isDelta);
    public static MetalDetectorSource DeserializeLength(Stream stream, int length, MetalDetectorSource instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MetalDetectorSource instance, MetalDetectorSource previous);
    public static void Serialize(Stream stream, MetalDetectorSource instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MetalDetectorSource instance);
    public static void SerializeLengthDelimited(Stream stream, MetalDetectorSource instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MicrophoneStand : object {
    public int microphoneMode;
    public NetworkableId IORef;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MicrophoneStand instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MicrophoneStand instance);
    public MicrophoneStand Copy();
    public static MicrophoneStand Deserialize(Stream stream);
    public static MicrophoneStand DeserializeLengthDelimited(Stream stream);
    public static MicrophoneStand DeserializeLength(Stream stream, int length);
    public static MicrophoneStand Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MicrophoneStand previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MicrophoneStand Deserialize(Byte[] buffer, MicrophoneStand instance, bool isDelta);
    public static MicrophoneStand Deserialize(Stream stream, MicrophoneStand instance, bool isDelta);
    public static MicrophoneStand DeserializeLengthDelimited(Stream stream, MicrophoneStand instance, bool isDelta);
    public static MicrophoneStand DeserializeLength(Stream stream, int length, MicrophoneStand instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MicrophoneStand instance, MicrophoneStand previous);
    public static void Serialize(Stream stream, MicrophoneStand instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MicrophoneStand instance);
    public static void SerializeLengthDelimited(Stream stream, MicrophoneStand instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Minicopter : object {
    public NetworkableId fuelStorageID;
    public float fuelFraction;
    public float pitch;
    public float roll;
    public float yaw;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Minicopter instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Minicopter instance);
    public Minicopter Copy();
    public static Minicopter Deserialize(Stream stream);
    public static Minicopter DeserializeLengthDelimited(Stream stream);
    public static Minicopter DeserializeLength(Stream stream, int length);
    public static Minicopter Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Minicopter previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Minicopter Deserialize(Byte[] buffer, Minicopter instance, bool isDelta);
    public static Minicopter Deserialize(Stream stream, Minicopter instance, bool isDelta);
    public static Minicopter DeserializeLengthDelimited(Stream stream, Minicopter instance, bool isDelta);
    public static Minicopter DeserializeLength(Stream stream, int length, Minicopter instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Minicopter instance, Minicopter previous);
    public static void Serialize(Stream stream, Minicopter instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Minicopter instance);
    public static void SerializeLengthDelimited(Stream stream, Minicopter instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MiningQuarry : object {
    public ResourceExtractor extractor;
    public int staticType;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MiningQuarry instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MiningQuarry instance);
    public MiningQuarry Copy();
    public static MiningQuarry Deserialize(Stream stream);
    public static MiningQuarry DeserializeLengthDelimited(Stream stream);
    public static MiningQuarry DeserializeLength(Stream stream, int length);
    public static MiningQuarry Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MiningQuarry previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MiningQuarry Deserialize(Byte[] buffer, MiningQuarry instance, bool isDelta);
    public static MiningQuarry Deserialize(Stream stream, MiningQuarry instance, bool isDelta);
    public static MiningQuarry DeserializeLengthDelimited(Stream stream, MiningQuarry instance, bool isDelta);
    public static MiningQuarry DeserializeLength(Stream stream, int length, MiningQuarry instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MiningQuarry instance, MiningQuarry previous);
    public static void Serialize(Stream stream, MiningQuarry instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MiningQuarry instance);
    public static void SerializeLengthDelimited(Stream stream, MiningQuarry instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MissionEntity : object {
    public string identifier;
    public NetworkableId entityID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MissionEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MissionEntity instance);
    public MissionEntity Copy();
    public static MissionEntity Deserialize(Stream stream);
    public static MissionEntity DeserializeLengthDelimited(Stream stream);
    public static MissionEntity DeserializeLength(Stream stream, int length);
    public static MissionEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MissionEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MissionEntity Deserialize(Byte[] buffer, MissionEntity instance, bool isDelta);
    public static MissionEntity Deserialize(Stream stream, MissionEntity instance, bool isDelta);
    public static MissionEntity DeserializeLengthDelimited(Stream stream, MissionEntity instance, bool isDelta);
    public static MissionEntity DeserializeLength(Stream stream, int length, MissionEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MissionEntity instance, MissionEntity previous);
    public static void Serialize(Stream stream, MissionEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MissionEntity instance);
    public static void SerializeLengthDelimited(Stream stream, MissionEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MissionInstance : object {
    public UInt32 missionID;
    public UInt32 missionStatus;
    public MissionInstanceData instanceData;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MissionInstance instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MissionInstance instance);
    public MissionInstance Copy();
    public static MissionInstance Deserialize(Stream stream);
    public static MissionInstance DeserializeLengthDelimited(Stream stream);
    public static MissionInstance DeserializeLength(Stream stream, int length);
    public static MissionInstance Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MissionInstance previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MissionInstance Deserialize(Byte[] buffer, MissionInstance instance, bool isDelta);
    public static MissionInstance Deserialize(Stream stream, MissionInstance instance, bool isDelta);
    public static MissionInstance DeserializeLengthDelimited(Stream stream, MissionInstance instance, bool isDelta);
    public static MissionInstance DeserializeLength(Stream stream, int length, MissionInstance instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MissionInstance instance, MissionInstance previous);
    public static void Serialize(Stream stream, MissionInstance instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MissionInstance instance);
    public static void SerializeLengthDelimited(Stream stream, MissionInstance instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MissionInstanceData : object {
    public NetworkableId providerID;
    public float startTime;
    public float endTime;
    public Vector3 missionLocation;
    public List`1<ObjectiveStatus> objectiveStatuses;
    public List`1<MissionPoint> missionPoints;
    public List`1<MissionEntity> missionEntities;
    public int playerInputRequired;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MissionInstanceData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MissionInstanceData instance);
    public MissionInstanceData Copy();
    public static MissionInstanceData Deserialize(Stream stream);
    public static MissionInstanceData DeserializeLengthDelimited(Stream stream);
    public static MissionInstanceData DeserializeLength(Stream stream, int length);
    public static MissionInstanceData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MissionInstanceData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MissionInstanceData Deserialize(Byte[] buffer, MissionInstanceData instance, bool isDelta);
    public static MissionInstanceData Deserialize(Stream stream, MissionInstanceData instance, bool isDelta);
    public static MissionInstanceData DeserializeLengthDelimited(Stream stream, MissionInstanceData instance, bool isDelta);
    public static MissionInstanceData DeserializeLength(Stream stream, int length, MissionInstanceData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MissionInstanceData instance, MissionInstanceData previous);
    public static void Serialize(Stream stream, MissionInstanceData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MissionInstanceData instance);
    public static void SerializeLengthDelimited(Stream stream, MissionInstanceData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MissionMapMarker : object {
    public List`1<UInt32> missionIds;
    public string providerToken;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MissionMapMarker instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MissionMapMarker instance);
    public MissionMapMarker Copy();
    public static MissionMapMarker Deserialize(Stream stream);
    public static MissionMapMarker DeserializeLengthDelimited(Stream stream);
    public static MissionMapMarker DeserializeLength(Stream stream, int length);
    public static MissionMapMarker Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MissionMapMarker previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MissionMapMarker Deserialize(Byte[] buffer, MissionMapMarker instance, bool isDelta);
    public static MissionMapMarker Deserialize(Stream stream, MissionMapMarker instance, bool isDelta);
    public static MissionMapMarker DeserializeLengthDelimited(Stream stream, MissionMapMarker instance, bool isDelta);
    public static MissionMapMarker DeserializeLength(Stream stream, int length, MissionMapMarker instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MissionMapMarker instance, MissionMapMarker previous);
    public static void Serialize(Stream stream, MissionMapMarker instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MissionMapMarker instance);
    public static void SerializeLengthDelimited(Stream stream, MissionMapMarker instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MissionPoint : object {
    public string identifier;
    public Vector3 location;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MissionPoint instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MissionPoint instance);
    public MissionPoint Copy();
    public static MissionPoint Deserialize(Stream stream);
    public static MissionPoint DeserializeLengthDelimited(Stream stream);
    public static MissionPoint DeserializeLength(Stream stream, int length);
    public static MissionPoint Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MissionPoint previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MissionPoint Deserialize(Byte[] buffer, MissionPoint instance, bool isDelta);
    public static MissionPoint Deserialize(Stream stream, MissionPoint instance, bool isDelta);
    public static MissionPoint DeserializeLengthDelimited(Stream stream, MissionPoint instance, bool isDelta);
    public static MissionPoint DeserializeLength(Stream stream, int length, MissionPoint instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MissionPoint instance, MissionPoint previous);
    public static void Serialize(Stream stream, MissionPoint instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MissionPoint instance);
    public static void SerializeLengthDelimited(Stream stream, MissionPoint instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MissionReward : object {
    public int itemID;
    public int itemAmount;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MissionReward instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MissionReward instance);
    public MissionReward Copy();
    public static MissionReward Deserialize(Stream stream);
    public static MissionReward DeserializeLengthDelimited(Stream stream);
    public static MissionReward DeserializeLength(Stream stream, int length);
    public static MissionReward Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MissionReward previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MissionReward Deserialize(Byte[] buffer, MissionReward instance, bool isDelta);
    public static MissionReward Deserialize(Stream stream, MissionReward instance, bool isDelta);
    public static MissionReward DeserializeLengthDelimited(Stream stream, MissionReward instance, bool isDelta);
    public static MissionReward DeserializeLength(Stream stream, int length, MissionReward instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MissionReward instance, MissionReward previous);
    public static void Serialize(Stream stream, MissionReward instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MissionReward instance);
    public static void SerializeLengthDelimited(Stream stream, MissionReward instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Missions : object {
    public List`1<MissionInstance> missions;
    public int activeMission;
    public int protocol;
    public UInt32 seed;
    public int saveCreatedTime;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Missions instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Missions instance);
    public Missions Copy();
    public static Missions Deserialize(Stream stream);
    public static Missions DeserializeLengthDelimited(Stream stream);
    public static Missions DeserializeLength(Stream stream, int length);
    public static Missions Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Missions previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Missions Deserialize(Byte[] buffer, Missions instance, bool isDelta);
    public static Missions Deserialize(Stream stream, Missions instance, bool isDelta);
    public static Missions DeserializeLengthDelimited(Stream stream, Missions instance, bool isDelta);
    public static Missions DeserializeLength(Stream stream, int length, Missions instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Missions instance, Missions previous);
    public static void Serialize(Stream stream, Missions instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Missions instance);
    public static void SerializeLengthDelimited(Stream stream, Missions instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MixingTable : object {
    public float totalMixTime;
    public float remainingMixTime;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MixingTable instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MixingTable instance);
    public MixingTable Copy();
    public static MixingTable Deserialize(Stream stream);
    public static MixingTable DeserializeLengthDelimited(Stream stream);
    public static MixingTable DeserializeLength(Stream stream, int length);
    public static MixingTable Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MixingTable previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MixingTable Deserialize(Byte[] buffer, MixingTable instance, bool isDelta);
    public static MixingTable Deserialize(Stream stream, MixingTable instance, bool isDelta);
    public static MixingTable DeserializeLengthDelimited(Stream stream, MixingTable instance, bool isDelta);
    public static MixingTable DeserializeLength(Stream stream, int length, MixingTable instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MixingTable instance, MixingTable previous);
    public static void Serialize(Stream stream, MixingTable instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MixingTable instance);
    public static void SerializeLengthDelimited(Stream stream, MixingTable instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.MLRS : object {
    public Vector3 targetPos;
    public Vector3 curHitPos;
    public NetworkableId rocketStorageID;
    public NetworkableId dashboardStorageID;
    public UInt32 ammoCount;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(MLRS instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(MLRS instance);
    public MLRS Copy();
    public static MLRS Deserialize(Stream stream);
    public static MLRS DeserializeLengthDelimited(Stream stream);
    public static MLRS DeserializeLength(Stream stream, int length);
    public static MLRS Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, MLRS previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static MLRS Deserialize(Byte[] buffer, MLRS instance, bool isDelta);
    public static MLRS Deserialize(Stream stream, MLRS instance, bool isDelta);
    public static MLRS DeserializeLengthDelimited(Stream stream, MLRS instance, bool isDelta);
    public static MLRS DeserializeLength(Stream stream, int length, MLRS instance, bool isDelta);
    public static void SerializeDelta(Stream stream, MLRS instance, MLRS previous);
    public static void Serialize(Stream stream, MLRS instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(MLRS instance);
    public static void SerializeLengthDelimited(Stream stream, MLRS instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Modifier : object {
    public int type;
    public int source;
    public float value;
    public float timeRemaing;
    public float duration;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Modifier instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Modifier instance);
    public Modifier Copy();
    public static Modifier Deserialize(Stream stream);
    public static Modifier DeserializeLengthDelimited(Stream stream);
    public static Modifier DeserializeLength(Stream stream, int length);
    public static Modifier Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Modifier previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Modifier Deserialize(Byte[] buffer, Modifier instance, bool isDelta);
    public static Modifier Deserialize(Stream stream, Modifier instance, bool isDelta);
    public static Modifier DeserializeLengthDelimited(Stream stream, Modifier instance, bool isDelta);
    public static Modifier DeserializeLength(Stream stream, int length, Modifier instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Modifier instance, Modifier previous);
    public static void Serialize(Stream stream, Modifier instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Modifier instance);
    public static void SerializeLengthDelimited(Stream stream, Modifier instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ModularCar : object {
    public float steerAngle;
    public float driveWheelVel;
    public float throttleInput;
    public float brakeInput;
    public NetworkableId fuelStorageID;
    public float fuelFraction;
    public bool hasLock;
    public string lockCode;
    public List`1<ulong> whitelistUsers;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ModularCar instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ModularCar instance);
    public ModularCar Copy();
    public static ModularCar Deserialize(Stream stream);
    public static ModularCar DeserializeLengthDelimited(Stream stream);
    public static ModularCar DeserializeLength(Stream stream, int length);
    public static ModularCar Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ModularCar previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ModularCar Deserialize(Byte[] buffer, ModularCar instance, bool isDelta);
    public static ModularCar Deserialize(Stream stream, ModularCar instance, bool isDelta);
    public static ModularCar DeserializeLengthDelimited(Stream stream, ModularCar instance, bool isDelta);
    public static ModularCar DeserializeLength(Stream stream, int length, ModularCar instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ModularCar instance, ModularCar previous);
    public static void Serialize(Stream stream, ModularCar instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ModularCar instance);
    public static void SerializeLengthDelimited(Stream stream, ModularCar instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ModularVehicle : object {
    public bool editable;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ModularVehicle instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ModularVehicle instance);
    public ModularVehicle Copy();
    public static ModularVehicle Deserialize(Stream stream);
    public static ModularVehicle DeserializeLengthDelimited(Stream stream);
    public static ModularVehicle DeserializeLength(Stream stream, int length);
    public static ModularVehicle Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ModularVehicle previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ModularVehicle Deserialize(Byte[] buffer, ModularVehicle instance, bool isDelta);
    public static ModularVehicle Deserialize(Stream stream, ModularVehicle instance, bool isDelta);
    public static ModularVehicle DeserializeLengthDelimited(Stream stream, ModularVehicle instance, bool isDelta);
    public static ModularVehicle DeserializeLength(Stream stream, int length, ModularVehicle instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ModularVehicle instance, ModularVehicle previous);
    public static void Serialize(Stream stream, ModularVehicle instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ModularVehicle instance);
    public static void SerializeLengthDelimited(Stream stream, ModularVehicle instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ModuleMessage : object {
    public UInt32 itemid;
    public int moduleid;
    public int type;
    public Byte[] data;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ModuleMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ModuleMessage instance);
    public ModuleMessage Copy();
    public static ModuleMessage Deserialize(Stream stream);
    public static ModuleMessage DeserializeLengthDelimited(Stream stream);
    public static ModuleMessage DeserializeLength(Stream stream, int length);
    public static ModuleMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ModuleMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ModuleMessage Deserialize(Byte[] buffer, ModuleMessage instance, bool isDelta);
    public static ModuleMessage Deserialize(Stream stream, ModuleMessage instance, bool isDelta);
    public static ModuleMessage DeserializeLengthDelimited(Stream stream, ModuleMessage instance, bool isDelta);
    public static ModuleMessage DeserializeLength(Stream stream, int length, ModuleMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ModuleMessage instance, ModuleMessage previous);
    public static void Serialize(Stream stream, ModuleMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ModuleMessage instance);
    public static void SerializeLengthDelimited(Stream stream, ModuleMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Motorboat : object {
    public NetworkableId storageid;
    public NetworkableId fuelStorageID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Motorboat instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Motorboat instance);
    public Motorboat Copy();
    public static Motorboat Deserialize(Stream stream);
    public static Motorboat DeserializeLengthDelimited(Stream stream);
    public static Motorboat DeserializeLength(Stream stream, int length);
    public static Motorboat Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Motorboat previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Motorboat Deserialize(Byte[] buffer, Motorboat instance, bool isDelta);
    public static Motorboat Deserialize(Stream stream, Motorboat instance, bool isDelta);
    public static Motorboat DeserializeLengthDelimited(Stream stream, Motorboat instance, bool isDelta);
    public static Motorboat DeserializeLength(Stream stream, int length, Motorboat instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Motorboat instance, Motorboat previous);
    public static void Serialize(Stream stream, Motorboat instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Motorboat instance);
    public static void SerializeLengthDelimited(Stream stream, Motorboat instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.NeonSign : object {
    public List`1<Lights> frameLighting;
    public int currentFrame;
    public float animationSpeed;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(NeonSign instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(NeonSign instance);
    public NeonSign Copy();
    public static NeonSign Deserialize(Stream stream);
    public static NeonSign DeserializeLengthDelimited(Stream stream);
    public static NeonSign DeserializeLength(Stream stream, int length);
    public static NeonSign Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, NeonSign previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static NeonSign Deserialize(Byte[] buffer, NeonSign instance, bool isDelta);
    public static NeonSign Deserialize(Stream stream, NeonSign instance, bool isDelta);
    public static NeonSign DeserializeLengthDelimited(Stream stream, NeonSign instance, bool isDelta);
    public static NeonSign DeserializeLength(Stream stream, int length, NeonSign instance, bool isDelta);
    public static void SerializeDelta(Stream stream, NeonSign instance, NeonSign previous);
    public static void Serialize(Stream stream, NeonSign instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(NeonSign instance);
    public static void SerializeLengthDelimited(Stream stream, NeonSign instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.ClanChatBatchRequest : object {
    public List`1<Message> messages;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ClanChatBatchRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ClanChatBatchRequest instance);
    public ClanChatBatchRequest Copy();
    public static ClanChatBatchRequest Deserialize(Stream stream);
    public static ClanChatBatchRequest DeserializeLengthDelimited(Stream stream);
    public static ClanChatBatchRequest DeserializeLength(Stream stream, int length);
    public static ClanChatBatchRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ClanChatBatchRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ClanChatBatchRequest Deserialize(Byte[] buffer, ClanChatBatchRequest instance, bool isDelta);
    public static ClanChatBatchRequest Deserialize(Stream stream, ClanChatBatchRequest instance, bool isDelta);
    public static ClanChatBatchRequest DeserializeLengthDelimited(Stream stream, ClanChatBatchRequest instance, bool isDelta);
    public static ClanChatBatchRequest DeserializeLength(Stream stream, int length, ClanChatBatchRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ClanChatBatchRequest instance, ClanChatBatchRequest previous);
    public static void Serialize(Stream stream, ClanChatBatchRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ClanChatBatchRequest instance);
    public static void SerializeLengthDelimited(Stream stream, ClanChatBatchRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.FerryRetireRequest : object {
    public NetworkableId entityId;
    public long timestamp;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(FerryRetireRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(FerryRetireRequest instance);
    public FerryRetireRequest Copy();
    public static FerryRetireRequest Deserialize(Stream stream);
    public static FerryRetireRequest DeserializeLengthDelimited(Stream stream);
    public static FerryRetireRequest DeserializeLength(Stream stream, int length);
    public static FerryRetireRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, FerryRetireRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static FerryRetireRequest Deserialize(Byte[] buffer, FerryRetireRequest instance, bool isDelta);
    public static FerryRetireRequest Deserialize(Stream stream, FerryRetireRequest instance, bool isDelta);
    public static FerryRetireRequest DeserializeLengthDelimited(Stream stream, FerryRetireRequest instance, bool isDelta);
    public static FerryRetireRequest DeserializeLength(Stream stream, int length, FerryRetireRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, FerryRetireRequest instance, FerryRetireRequest previous);
    public static void Serialize(Stream stream, FerryRetireRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(FerryRetireRequest instance);
    public static void SerializeLengthDelimited(Stream stream, FerryRetireRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.FerryStatus : object {
    public NetworkableId entityId;
    public long timestamp;
    public string ownerZone;
    public List`1<string> schedule;
    public int scheduleIndex;
    public int state;
    public bool isRetiring;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(FerryStatus instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(FerryStatus instance);
    public FerryStatus Copy();
    public static FerryStatus Deserialize(Stream stream);
    public static FerryStatus DeserializeLengthDelimited(Stream stream);
    public static FerryStatus DeserializeLength(Stream stream, int length);
    public static FerryStatus Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, FerryStatus previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static FerryStatus Deserialize(Byte[] buffer, FerryStatus instance, bool isDelta);
    public static FerryStatus Deserialize(Stream stream, FerryStatus instance, bool isDelta);
    public static FerryStatus DeserializeLengthDelimited(Stream stream, FerryStatus instance, bool isDelta);
    public static FerryStatus DeserializeLength(Stream stream, int length, FerryStatus instance, bool isDelta);
    public static void SerializeDelta(Stream stream, FerryStatus instance, FerryStatus previous);
    public static void Serialize(Stream stream, FerryStatus instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(FerryStatus instance);
    public static void SerializeLengthDelimited(Stream stream, FerryStatus instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.FerryStatusRequest : object {
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(FerryStatusRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(FerryStatusRequest instance);
    public FerryStatusRequest Copy();
    public static FerryStatusRequest Deserialize(Stream stream);
    public static FerryStatusRequest DeserializeLengthDelimited(Stream stream);
    public static FerryStatusRequest DeserializeLength(Stream stream, int length);
    public static FerryStatusRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, FerryStatusRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static FerryStatusRequest Deserialize(Byte[] buffer, FerryStatusRequest instance, bool isDelta);
    public static FerryStatusRequest Deserialize(Stream stream, FerryStatusRequest instance, bool isDelta);
    public static FerryStatusRequest DeserializeLengthDelimited(Stream stream, FerryStatusRequest instance, bool isDelta);
    public static FerryStatusRequest DeserializeLength(Stream stream, int length, FerryStatusRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, FerryStatusRequest instance, FerryStatusRequest previous);
    public static void Serialize(Stream stream, FerryStatusRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(FerryStatusRequest instance);
    public static void SerializeLengthDelimited(Stream stream, FerryStatusRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.FerryStatusResponse : object {
    public List`1<FerryStatus> statuses;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(FerryStatusResponse instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(FerryStatusResponse instance);
    public FerryStatusResponse Copy();
    public static FerryStatusResponse Deserialize(Stream stream);
    public static FerryStatusResponse DeserializeLengthDelimited(Stream stream);
    public static FerryStatusResponse DeserializeLength(Stream stream, int length);
    public static FerryStatusResponse Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, FerryStatusResponse previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static FerryStatusResponse Deserialize(Byte[] buffer, FerryStatusResponse instance, bool isDelta);
    public static FerryStatusResponse Deserialize(Stream stream, FerryStatusResponse instance, bool isDelta);
    public static FerryStatusResponse DeserializeLengthDelimited(Stream stream, FerryStatusResponse instance, bool isDelta);
    public static FerryStatusResponse DeserializeLength(Stream stream, int length, FerryStatusResponse instance, bool isDelta);
    public static void SerializeDelta(Stream stream, FerryStatusResponse instance, FerryStatusResponse previous);
    public static void Serialize(Stream stream, FerryStatusResponse instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(FerryStatusResponse instance);
    public static void SerializeLengthDelimited(Stream stream, FerryStatusResponse instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.FerryUpdateScheduleRequest : object {
    public NetworkableId entityId;
    public long timestamp;
    public List`1<string> schedule;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(FerryUpdateScheduleRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(FerryUpdateScheduleRequest instance);
    public FerryUpdateScheduleRequest Copy();
    public static FerryUpdateScheduleRequest Deserialize(Stream stream);
    public static FerryUpdateScheduleRequest DeserializeLengthDelimited(Stream stream);
    public static FerryUpdateScheduleRequest DeserializeLength(Stream stream, int length);
    public static FerryUpdateScheduleRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, FerryUpdateScheduleRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static FerryUpdateScheduleRequest Deserialize(Byte[] buffer, FerryUpdateScheduleRequest instance, bool isDelta);
    public static FerryUpdateScheduleRequest Deserialize(Stream stream, FerryUpdateScheduleRequest instance, bool isDelta);
    public static FerryUpdateScheduleRequest DeserializeLengthDelimited(Stream stream, FerryUpdateScheduleRequest instance, bool isDelta);
    public static FerryUpdateScheduleRequest DeserializeLength(Stream stream, int length, FerryUpdateScheduleRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, FerryUpdateScheduleRequest instance, FerryUpdateScheduleRequest previous);
    public static void Serialize(Stream stream, FerryUpdateScheduleRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(FerryUpdateScheduleRequest instance);
    public static void SerializeLengthDelimited(Stream stream, FerryUpdateScheduleRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.Packet : object {
    public UInt32 protocol;
    public int sourceZone;
    public Request request;
    public Response response;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Packet instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Packet instance);
    public Packet Copy();
    public static Packet Deserialize(Stream stream);
    public static Packet DeserializeLengthDelimited(Stream stream);
    public static Packet DeserializeLength(Stream stream, int length);
    public static Packet Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Packet previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Packet Deserialize(Byte[] buffer, Packet instance, bool isDelta);
    public static Packet Deserialize(Stream stream, Packet instance, bool isDelta);
    public static Packet DeserializeLengthDelimited(Stream stream, Packet instance, bool isDelta);
    public static Packet DeserializeLength(Stream stream, int length, Packet instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Packet instance, Packet previous);
    public static void Serialize(Stream stream, Packet instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Packet instance);
    public static void SerializeLengthDelimited(Stream stream, Packet instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.PingRequest : object {
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PingRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PingRequest instance);
    public PingRequest Copy();
    public static PingRequest Deserialize(Stream stream);
    public static PingRequest DeserializeLengthDelimited(Stream stream);
    public static PingRequest DeserializeLength(Stream stream, int length);
    public static PingRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PingRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PingRequest Deserialize(Byte[] buffer, PingRequest instance, bool isDelta);
    public static PingRequest Deserialize(Stream stream, PingRequest instance, bool isDelta);
    public static PingRequest DeserializeLengthDelimited(Stream stream, PingRequest instance, bool isDelta);
    public static PingRequest DeserializeLength(Stream stream, int length, PingRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PingRequest instance, PingRequest previous);
    public static void Serialize(Stream stream, PingRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PingRequest instance);
    public static void SerializeLengthDelimited(Stream stream, PingRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.PingResponse : object {
    public int players;
    public int maxPlayers;
    public int queuedPlayers;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PingResponse instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PingResponse instance);
    public PingResponse Copy();
    public static PingResponse Deserialize(Stream stream);
    public static PingResponse DeserializeLengthDelimited(Stream stream);
    public static PingResponse DeserializeLength(Stream stream, int length);
    public static PingResponse Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PingResponse previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PingResponse Deserialize(Byte[] buffer, PingResponse instance, bool isDelta);
    public static PingResponse Deserialize(Stream stream, PingResponse instance, bool isDelta);
    public static PingResponse DeserializeLengthDelimited(Stream stream, PingResponse instance, bool isDelta);
    public static PingResponse DeserializeLength(Stream stream, int length, PingResponse instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PingResponse instance, PingResponse previous);
    public static void Serialize(Stream stream, PingResponse instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PingResponse instance);
    public static void SerializeLengthDelimited(Stream stream, PingResponse instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.PlayerManifestRequest : object {
    public List`1<ulong> userIds;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerManifestRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerManifestRequest instance);
    public PlayerManifestRequest Copy();
    public static PlayerManifestRequest Deserialize(Stream stream);
    public static PlayerManifestRequest DeserializeLengthDelimited(Stream stream);
    public static PlayerManifestRequest DeserializeLength(Stream stream, int length);
    public static PlayerManifestRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerManifestRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerManifestRequest Deserialize(Byte[] buffer, PlayerManifestRequest instance, bool isDelta);
    public static PlayerManifestRequest Deserialize(Stream stream, PlayerManifestRequest instance, bool isDelta);
    public static PlayerManifestRequest DeserializeLengthDelimited(Stream stream, PlayerManifestRequest instance, bool isDelta);
    public static PlayerManifestRequest DeserializeLength(Stream stream, int length, PlayerManifestRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerManifestRequest instance, PlayerManifestRequest previous);
    public static void Serialize(Stream stream, PlayerManifestRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerManifestRequest instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerManifestRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.PlayerSecondaryData : object {
    public ulong userId;
    public PlayerState playerState;
    public List`1<RelationshipData> relationships;
    public ulong teamId;
    public bool isTeamLeader;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerSecondaryData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerSecondaryData instance);
    public PlayerSecondaryData Copy();
    public static PlayerSecondaryData Deserialize(Stream stream);
    public static PlayerSecondaryData DeserializeLengthDelimited(Stream stream);
    public static PlayerSecondaryData DeserializeLength(Stream stream, int length);
    public static PlayerSecondaryData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerSecondaryData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerSecondaryData Deserialize(Byte[] buffer, PlayerSecondaryData instance, bool isDelta);
    public static PlayerSecondaryData Deserialize(Stream stream, PlayerSecondaryData instance, bool isDelta);
    public static PlayerSecondaryData DeserializeLengthDelimited(Stream stream, PlayerSecondaryData instance, bool isDelta);
    public static PlayerSecondaryData DeserializeLength(Stream stream, int length, PlayerSecondaryData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerSecondaryData instance, PlayerSecondaryData previous);
    public static void Serialize(Stream stream, PlayerSecondaryData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerSecondaryData instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerSecondaryData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.Request : object {
    public bool isFireAndForget;
    public TransferRequest transfer;
    public PingRequest ping;
    public SpawnOptionsRequest spawnOptions;
    public SleepingBagRespawnRequest respawnAtBag;
    public SleepingBagDestroyRequest destroyBag;
    public FerryStatusRequest ferryStatus;
    public FerryRetireRequest ferryRetire;
    public FerryUpdateScheduleRequest ferryUpdateSchedule;
    public ClanChatBatchRequest clanChatBatch;
    public PlayerManifestRequest playerManifest;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Request instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Request instance);
    public Request Copy();
    public static Request Deserialize(Stream stream);
    public static Request DeserializeLengthDelimited(Stream stream);
    public static Request DeserializeLength(Stream stream, int length);
    public static Request Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Request previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Request Deserialize(Byte[] buffer, Request instance, bool isDelta);
    public static Request Deserialize(Stream stream, Request instance, bool isDelta);
    public static Request DeserializeLengthDelimited(Stream stream, Request instance, bool isDelta);
    public static Request DeserializeLength(Stream stream, int length, Request instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Request instance, Request previous);
    public static void Serialize(Stream stream, Request instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Request instance);
    public static void SerializeLengthDelimited(Stream stream, Request instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.Response : object {
    public Uuid id;
    public Status status;
    public PingResponse ping;
    public SpawnOptionsResponse spawnOptions;
    public FerryStatusResponse ferryStatus;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Response instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Response instance);
    public Response Copy();
    public static Response Deserialize(Stream stream);
    public static Response DeserializeLengthDelimited(Stream stream);
    public static Response DeserializeLength(Stream stream, int length);
    public static Response Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Response previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Response Deserialize(Byte[] buffer, Response instance, bool isDelta);
    public static Response Deserialize(Stream stream, Response instance, bool isDelta);
    public static Response DeserializeLengthDelimited(Stream stream, Response instance, bool isDelta);
    public static Response DeserializeLength(Stream stream, int length, Response instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Response instance, Response previous);
    public static void Serialize(Stream stream, Response instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Response instance);
    public static void SerializeLengthDelimited(Stream stream, Response instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.SleepingBagDestroyRequest : object {
    public ulong userId;
    public NetworkableId sleepingBagId;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SleepingBagDestroyRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SleepingBagDestroyRequest instance);
    public SleepingBagDestroyRequest Copy();
    public static SleepingBagDestroyRequest Deserialize(Stream stream);
    public static SleepingBagDestroyRequest DeserializeLengthDelimited(Stream stream);
    public static SleepingBagDestroyRequest DeserializeLength(Stream stream, int length);
    public static SleepingBagDestroyRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SleepingBagDestroyRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SleepingBagDestroyRequest Deserialize(Byte[] buffer, SleepingBagDestroyRequest instance, bool isDelta);
    public static SleepingBagDestroyRequest Deserialize(Stream stream, SleepingBagDestroyRequest instance, bool isDelta);
    public static SleepingBagDestroyRequest DeserializeLengthDelimited(Stream stream, SleepingBagDestroyRequest instance, bool isDelta);
    public static SleepingBagDestroyRequest DeserializeLength(Stream stream, int length, SleepingBagDestroyRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SleepingBagDestroyRequest instance, SleepingBagDestroyRequest previous);
    public static void Serialize(Stream stream, SleepingBagDestroyRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SleepingBagDestroyRequest instance);
    public static void SerializeLengthDelimited(Stream stream, SleepingBagDestroyRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.SleepingBagRespawnRequest : object {
    public ulong userId;
    public NetworkableId sleepingBagId;
    public PlayerSecondaryData secondaryData;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SleepingBagRespawnRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SleepingBagRespawnRequest instance);
    public SleepingBagRespawnRequest Copy();
    public static SleepingBagRespawnRequest Deserialize(Stream stream);
    public static SleepingBagRespawnRequest DeserializeLengthDelimited(Stream stream);
    public static SleepingBagRespawnRequest DeserializeLength(Stream stream, int length);
    public static SleepingBagRespawnRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SleepingBagRespawnRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SleepingBagRespawnRequest Deserialize(Byte[] buffer, SleepingBagRespawnRequest instance, bool isDelta);
    public static SleepingBagRespawnRequest Deserialize(Stream stream, SleepingBagRespawnRequest instance, bool isDelta);
    public static SleepingBagRespawnRequest DeserializeLengthDelimited(Stream stream, SleepingBagRespawnRequest instance, bool isDelta);
    public static SleepingBagRespawnRequest DeserializeLength(Stream stream, int length, SleepingBagRespawnRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SleepingBagRespawnRequest instance, SleepingBagRespawnRequest previous);
    public static void Serialize(Stream stream, SleepingBagRespawnRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SleepingBagRespawnRequest instance);
    public static void SerializeLengthDelimited(Stream stream, SleepingBagRespawnRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.SpawnOptionsRequest : object {
    public ulong userId;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SpawnOptionsRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SpawnOptionsRequest instance);
    public SpawnOptionsRequest Copy();
    public static SpawnOptionsRequest Deserialize(Stream stream);
    public static SpawnOptionsRequest DeserializeLengthDelimited(Stream stream);
    public static SpawnOptionsRequest DeserializeLength(Stream stream, int length);
    public static SpawnOptionsRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SpawnOptionsRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SpawnOptionsRequest Deserialize(Byte[] buffer, SpawnOptionsRequest instance, bool isDelta);
    public static SpawnOptionsRequest Deserialize(Stream stream, SpawnOptionsRequest instance, bool isDelta);
    public static SpawnOptionsRequest DeserializeLengthDelimited(Stream stream, SpawnOptionsRequest instance, bool isDelta);
    public static SpawnOptionsRequest DeserializeLength(Stream stream, int length, SpawnOptionsRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SpawnOptionsRequest instance, SpawnOptionsRequest previous);
    public static void Serialize(Stream stream, SpawnOptionsRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SpawnOptionsRequest instance);
    public static void SerializeLengthDelimited(Stream stream, SpawnOptionsRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.SpawnOptionsResponse : object {
    public List`1<SpawnOptions> spawnOptions;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SpawnOptionsResponse instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SpawnOptionsResponse instance);
    public SpawnOptionsResponse Copy();
    public static SpawnOptionsResponse Deserialize(Stream stream);
    public static SpawnOptionsResponse DeserializeLengthDelimited(Stream stream);
    public static SpawnOptionsResponse DeserializeLength(Stream stream, int length);
    public static SpawnOptionsResponse Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SpawnOptionsResponse previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SpawnOptionsResponse Deserialize(Byte[] buffer, SpawnOptionsResponse instance, bool isDelta);
    public static SpawnOptionsResponse Deserialize(Stream stream, SpawnOptionsResponse instance, bool isDelta);
    public static SpawnOptionsResponse DeserializeLengthDelimited(Stream stream, SpawnOptionsResponse instance, bool isDelta);
    public static SpawnOptionsResponse DeserializeLength(Stream stream, int length, SpawnOptionsResponse instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SpawnOptionsResponse instance, SpawnOptionsResponse previous);
    public static void Serialize(Stream stream, SpawnOptionsResponse instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SpawnOptionsResponse instance);
    public static void SerializeLengthDelimited(Stream stream, SpawnOptionsResponse instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.Status : object {
    public bool success;
    public string errorMessage;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Status instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Status instance);
    public Status Copy();
    public static Status Deserialize(Stream stream);
    public static Status DeserializeLengthDelimited(Stream stream);
    public static Status DeserializeLength(Stream stream, int length);
    public static Status Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Status previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Status Deserialize(Byte[] buffer, Status instance, bool isDelta);
    public static Status Deserialize(Stream stream, Status instance, bool isDelta);
    public static Status DeserializeLengthDelimited(Stream stream, Status instance, bool isDelta);
    public static Status DeserializeLength(Stream stream, int length, Status instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Status instance, Status previous);
    public static void Serialize(Stream stream, Status instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Status instance);
    public static void SerializeLengthDelimited(Stream stream, Status instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Nexus.TransferRequest : object {
    public string method;
    public string from;
    public string to;
    public List`1<Entity> entities;
    public List`1<PlayerSecondaryData> secondaryData;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TransferRequest instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TransferRequest instance);
    public TransferRequest Copy();
    public static TransferRequest Deserialize(Stream stream);
    public static TransferRequest DeserializeLengthDelimited(Stream stream);
    public static TransferRequest DeserializeLength(Stream stream, int length);
    public static TransferRequest Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TransferRequest previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TransferRequest Deserialize(Byte[] buffer, TransferRequest instance, bool isDelta);
    public static TransferRequest Deserialize(Stream stream, TransferRequest instance, bool isDelta);
    public static TransferRequest DeserializeLengthDelimited(Stream stream, TransferRequest instance, bool isDelta);
    public static TransferRequest DeserializeLength(Stream stream, int length, TransferRequest instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TransferRequest instance, TransferRequest previous);
    public static void Serialize(Stream stream, TransferRequest instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TransferRequest instance);
    public static void SerializeLengthDelimited(Stream stream, TransferRequest instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.NexusDockTerminal : object {
    public List`1<ScheduleEntry> schedule;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(NexusDockTerminal instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(NexusDockTerminal instance);
    public NexusDockTerminal Copy();
    public static NexusDockTerminal Deserialize(Stream stream);
    public static NexusDockTerminal DeserializeLengthDelimited(Stream stream);
    public static NexusDockTerminal DeserializeLength(Stream stream, int length);
    public static NexusDockTerminal Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, NexusDockTerminal previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static NexusDockTerminal Deserialize(Byte[] buffer, NexusDockTerminal instance, bool isDelta);
    public static NexusDockTerminal Deserialize(Stream stream, NexusDockTerminal instance, bool isDelta);
    public static NexusDockTerminal DeserializeLengthDelimited(Stream stream, NexusDockTerminal instance, bool isDelta);
    public static NexusDockTerminal DeserializeLength(Stream stream, int length, NexusDockTerminal instance, bool isDelta);
    public static void SerializeDelta(Stream stream, NexusDockTerminal instance, NexusDockTerminal previous);
    public static void Serialize(Stream stream, NexusDockTerminal instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(NexusDockTerminal instance);
    public static void SerializeLengthDelimited(Stream stream, NexusDockTerminal instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.NexusFerry : object {
    public long timestamp;
    public string ownerZone;
    public List`1<string> schedule;
    public int scheduleIndex;
    public int state;
    public bool isRetiring;
    public List`1<NetworkableId> transferredIds;
    public int nextScheduleIndex;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(NexusFerry instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(NexusFerry instance);
    public NexusFerry Copy();
    public static NexusFerry Deserialize(Stream stream);
    public static NexusFerry DeserializeLengthDelimited(Stream stream);
    public static NexusFerry DeserializeLength(Stream stream, int length);
    public static NexusFerry Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, NexusFerry previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static NexusFerry Deserialize(Byte[] buffer, NexusFerry instance, bool isDelta);
    public static NexusFerry Deserialize(Stream stream, NexusFerry instance, bool isDelta);
    public static NexusFerry DeserializeLengthDelimited(Stream stream, NexusFerry instance, bool isDelta);
    public static NexusFerry DeserializeLength(Stream stream, int length, NexusFerry instance, bool isDelta);
    public static void SerializeDelta(Stream stream, NexusFerry instance, NexusFerry previous);
    public static void Serialize(Stream stream, NexusFerry instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(NexusFerry instance);
    public static void SerializeLengthDelimited(Stream stream, NexusFerry instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.NexusIsland : object {
    public string zoneKey;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(NexusIsland instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(NexusIsland instance);
    public NexusIsland Copy();
    public static NexusIsland Deserialize(Stream stream);
    public static NexusIsland DeserializeLengthDelimited(Stream stream);
    public static NexusIsland DeserializeLength(Stream stream, int length);
    public static NexusIsland Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, NexusIsland previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static NexusIsland Deserialize(Byte[] buffer, NexusIsland instance, bool isDelta);
    public static NexusIsland Deserialize(Stream stream, NexusIsland instance, bool isDelta);
    public static NexusIsland DeserializeLengthDelimited(Stream stream, NexusIsland instance, bool isDelta);
    public static NexusIsland DeserializeLength(Stream stream, int length, NexusIsland instance, bool isDelta);
    public static void SerializeDelta(Stream stream, NexusIsland instance, NexusIsland previous);
    public static void Serialize(Stream stream, NexusIsland instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(NexusIsland instance);
    public static void SerializeLengthDelimited(Stream stream, NexusIsland instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.NPCVendingMachine : object {
    public NetworkableId attachedNpc;
    public float nextRefresh;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(NPCVendingMachine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(NPCVendingMachine instance);
    public NPCVendingMachine Copy();
    public static NPCVendingMachine Deserialize(Stream stream);
    public static NPCVendingMachine DeserializeLengthDelimited(Stream stream);
    public static NPCVendingMachine DeserializeLength(Stream stream, int length);
    public static NPCVendingMachine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, NPCVendingMachine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static NPCVendingMachine Deserialize(Byte[] buffer, NPCVendingMachine instance, bool isDelta);
    public static NPCVendingMachine Deserialize(Stream stream, NPCVendingMachine instance, bool isDelta);
    public static NPCVendingMachine DeserializeLengthDelimited(Stream stream, NPCVendingMachine instance, bool isDelta);
    public static NPCVendingMachine DeserializeLength(Stream stream, int length, NPCVendingMachine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, NPCVendingMachine instance, NPCVendingMachine previous);
    public static void Serialize(Stream stream, NPCVendingMachine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(NPCVendingMachine instance);
    public static void SerializeLengthDelimited(Stream stream, NPCVendingMachine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ObjectiveStatus : object {
    public bool started;
    public bool completed;
    public bool failed;
    public float progressCurrent;
    public float progressTarget;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ObjectiveStatus instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ObjectiveStatus instance);
    public ObjectiveStatus Copy();
    public static ObjectiveStatus Deserialize(Stream stream);
    public static ObjectiveStatus DeserializeLengthDelimited(Stream stream);
    public static ObjectiveStatus DeserializeLength(Stream stream, int length);
    public static ObjectiveStatus Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ObjectiveStatus previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ObjectiveStatus Deserialize(Byte[] buffer, ObjectiveStatus instance, bool isDelta);
    public static ObjectiveStatus Deserialize(Stream stream, ObjectiveStatus instance, bool isDelta);
    public static ObjectiveStatus DeserializeLengthDelimited(Stream stream, ObjectiveStatus instance, bool isDelta);
    public static ObjectiveStatus DeserializeLength(Stream stream, int length, ObjectiveStatus instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ObjectiveStatus instance, ObjectiveStatus previous);
    public static void Serialize(Stream stream, ObjectiveStatus instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ObjectiveStatus instance);
    public static void SerializeLengthDelimited(Stream stream, ObjectiveStatus instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.OceanPaths : object {
    public List`1<Vector3> cargoPatrolPath;
    public List`1<VectorList> harborApproaches;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(OceanPaths instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(OceanPaths instance);
    public OceanPaths Copy();
    public static OceanPaths Deserialize(Stream stream);
    public static OceanPaths DeserializeLengthDelimited(Stream stream);
    public static OceanPaths DeserializeLength(Stream stream, int length);
    public static OceanPaths Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, OceanPaths previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static OceanPaths Deserialize(Byte[] buffer, OceanPaths instance, bool isDelta);
    public static OceanPaths Deserialize(Stream stream, OceanPaths instance, bool isDelta);
    public static OceanPaths DeserializeLengthDelimited(Stream stream, OceanPaths instance, bool isDelta);
    public static OceanPaths DeserializeLength(Stream stream, int length, OceanPaths instance, bool isDelta);
    public static void SerializeDelta(Stream stream, OceanPaths instance, OceanPaths previous);
    public static void Serialize(Stream stream, OceanPaths instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(OceanPaths instance);
    public static void SerializeLengthDelimited(Stream stream, OceanPaths instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.OwnerInfo : object {
    public ulong steamid;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(OwnerInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(OwnerInfo instance);
    public OwnerInfo Copy();
    public static OwnerInfo Deserialize(Stream stream);
    public static OwnerInfo DeserializeLengthDelimited(Stream stream);
    public static OwnerInfo DeserializeLength(Stream stream, int length);
    public static OwnerInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, OwnerInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static OwnerInfo Deserialize(Byte[] buffer, OwnerInfo instance, bool isDelta);
    public static OwnerInfo Deserialize(Stream stream, OwnerInfo instance, bool isDelta);
    public static OwnerInfo DeserializeLengthDelimited(Stream stream, OwnerInfo instance, bool isDelta);
    public static OwnerInfo DeserializeLength(Stream stream, int length, OwnerInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, OwnerInfo instance, OwnerInfo previous);
    public static void Serialize(Stream stream, OwnerInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(OwnerInfo instance);
    public static void SerializeLengthDelimited(Stream stream, OwnerInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PaintableSign : object {
    public List`1<UInt32> crcs;
    public List`1<ulong> editHistory;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PaintableSign instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PaintableSign instance);
    public PaintableSign Copy();
    public static PaintableSign Deserialize(Stream stream);
    public static PaintableSign DeserializeLengthDelimited(Stream stream);
    public static PaintableSign DeserializeLength(Stream stream, int length);
    public static PaintableSign Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PaintableSign previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PaintableSign Deserialize(Byte[] buffer, PaintableSign instance, bool isDelta);
    public static PaintableSign Deserialize(Stream stream, PaintableSign instance, bool isDelta);
    public static PaintableSign DeserializeLengthDelimited(Stream stream, PaintableSign instance, bool isDelta);
    public static PaintableSign DeserializeLength(Stream stream, int length, PaintableSign instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PaintableSign instance, PaintableSign previous);
    public static void Serialize(Stream stream, PaintableSign instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PaintableSign instance);
    public static void SerializeLengthDelimited(Stream stream, PaintableSign instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PaintedItem : object {
    public UInt32 imageCrc;
    public ulong editedBy;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PaintedItem instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PaintedItem instance);
    public PaintedItem Copy();
    public static PaintedItem Deserialize(Stream stream);
    public static PaintedItem DeserializeLengthDelimited(Stream stream);
    public static PaintedItem DeserializeLength(Stream stream, int length);
    public static PaintedItem Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PaintedItem previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PaintedItem Deserialize(Byte[] buffer, PaintedItem instance, bool isDelta);
    public static PaintedItem Deserialize(Stream stream, PaintedItem instance, bool isDelta);
    public static PaintedItem DeserializeLengthDelimited(Stream stream, PaintedItem instance, bool isDelta);
    public static PaintedItem DeserializeLength(Stream stream, int length, PaintedItem instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PaintedItem instance, PaintedItem previous);
    public static void Serialize(Stream stream, PaintedItem instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PaintedItem instance);
    public static void SerializeLengthDelimited(Stream stream, PaintedItem instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ParentInfo : object {
    public NetworkableId uid;
    public UInt32 bone;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ParentInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ParentInfo instance);
    public ParentInfo Copy();
    public static ParentInfo Deserialize(Stream stream);
    public static ParentInfo DeserializeLengthDelimited(Stream stream);
    public static ParentInfo DeserializeLength(Stream stream, int length);
    public static ParentInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ParentInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ParentInfo Deserialize(Byte[] buffer, ParentInfo instance, bool isDelta);
    public static ParentInfo Deserialize(Stream stream, ParentInfo instance, bool isDelta);
    public static ParentInfo DeserializeLengthDelimited(Stream stream, ParentInfo instance, bool isDelta);
    public static ParentInfo DeserializeLength(Stream stream, int length, ParentInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ParentInfo instance, ParentInfo previous);
    public static void Serialize(Stream stream, ParentInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ParentInfo instance);
    public static void SerializeLengthDelimited(Stream stream, ParentInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PathData : object {
    public string name;
    public bool spline;
    public bool start;
    public bool end;
    public float width;
    public float innerPadding;
    public float outerPadding;
    public float innerFade;
    public float outerFade;
    public float randomScale;
    public float meshOffset;
    public float terrainOffset;
    public int splat;
    public int topology;
    public List`1<VectorData> nodes;
    public int hierarchy;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PathData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PathData instance);
    public PathData Copy();
    public static PathData Deserialize(Stream stream);
    public static PathData DeserializeLengthDelimited(Stream stream);
    public static PathData DeserializeLength(Stream stream, int length);
    public static PathData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PathData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PathData Deserialize(Byte[] buffer, PathData instance, bool isDelta);
    public static PathData Deserialize(Stream stream, PathData instance, bool isDelta);
    public static PathData DeserializeLengthDelimited(Stream stream, PathData instance, bool isDelta);
    public static PathData DeserializeLength(Stream stream, int length, PathData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PathData instance, PathData previous);
    public static void Serialize(Stream stream, PathData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PathData instance);
    public static void SerializeLengthDelimited(Stream stream, PathData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PatternFirework : object {
    public Design design;
    public int shellFuseLength;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PatternFirework instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PatternFirework instance);
    public PatternFirework Copy();
    public static PatternFirework Deserialize(Stream stream);
    public static PatternFirework DeserializeLengthDelimited(Stream stream);
    public static PatternFirework DeserializeLength(Stream stream, int length);
    public static PatternFirework Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PatternFirework previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PatternFirework Deserialize(Byte[] buffer, PatternFirework instance, bool isDelta);
    public static PatternFirework Deserialize(Stream stream, PatternFirework instance, bool isDelta);
    public static PatternFirework DeserializeLengthDelimited(Stream stream, PatternFirework instance, bool isDelta);
    public static PatternFirework DeserializeLength(Stream stream, int length, PatternFirework instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PatternFirework instance, PatternFirework previous);
    public static void Serialize(Stream stream, PatternFirework instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PatternFirework instance);
    public static void SerializeLengthDelimited(Stream stream, PatternFirework instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PersistantPlayer : object {
    public List`1<int> unlockedItems;
    public int protocolVersion;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PersistantPlayer instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PersistantPlayer instance);
    public PersistantPlayer Copy();
    public static PersistantPlayer Deserialize(Stream stream);
    public static PersistantPlayer DeserializeLengthDelimited(Stream stream);
    public static PersistantPlayer DeserializeLength(Stream stream, int length);
    public static PersistantPlayer Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PersistantPlayer previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PersistantPlayer Deserialize(Byte[] buffer, PersistantPlayer instance, bool isDelta);
    public static PersistantPlayer Deserialize(Stream stream, PersistantPlayer instance, bool isDelta);
    public static PersistantPlayer DeserializeLengthDelimited(Stream stream, PersistantPlayer instance, bool isDelta);
    public static PersistantPlayer DeserializeLength(Stream stream, int length, PersistantPlayer instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PersistantPlayer instance, PersistantPlayer previous);
    public static void Serialize(Stream stream, PersistantPlayer instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PersistantPlayer instance);
    public static void SerializeLengthDelimited(Stream stream, PersistantPlayer instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PhoneDirectory : object {
    public List`1<DirectoryEntry> entries;
    public bool atEnd;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PhoneDirectory instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PhoneDirectory instance);
    public PhoneDirectory Copy();
    public static PhoneDirectory Deserialize(Stream stream);
    public static PhoneDirectory DeserializeLengthDelimited(Stream stream);
    public static PhoneDirectory DeserializeLength(Stream stream, int length);
    public static PhoneDirectory Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PhoneDirectory previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PhoneDirectory Deserialize(Byte[] buffer, PhoneDirectory instance, bool isDelta);
    public static PhoneDirectory Deserialize(Stream stream, PhoneDirectory instance, bool isDelta);
    public static PhoneDirectory DeserializeLengthDelimited(Stream stream, PhoneDirectory instance, bool isDelta);
    public static PhoneDirectory DeserializeLength(Stream stream, int length, PhoneDirectory instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PhoneDirectory instance, PhoneDirectory previous);
    public static void Serialize(Stream stream, PhoneDirectory instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PhoneDirectory instance);
    public static void SerializeLengthDelimited(Stream stream, PhoneDirectory instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Photo : object {
    public ulong photographerSteamId;
    public UInt32 imageCrc;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Photo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Photo instance);
    public Photo Copy();
    public static Photo Deserialize(Stream stream);
    public static Photo DeserializeLengthDelimited(Stream stream);
    public static Photo DeserializeLength(Stream stream, int length);
    public static Photo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Photo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Photo Deserialize(Byte[] buffer, Photo instance, bool isDelta);
    public static Photo Deserialize(Stream stream, Photo instance, bool isDelta);
    public static Photo DeserializeLengthDelimited(Stream stream, Photo instance, bool isDelta);
    public static Photo DeserializeLength(Stream stream, int length, Photo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Photo instance, Photo previous);
    public static void Serialize(Stream stream, Photo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Photo instance);
    public static void SerializeLengthDelimited(Stream stream, Photo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PhotoFrame : object {
    public NetworkableId photoEntityId;
    public UInt32 overlayImageCrc;
    public List`1<ulong> editHistory;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PhotoFrame instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PhotoFrame instance);
    public PhotoFrame Copy();
    public static PhotoFrame Deserialize(Stream stream);
    public static PhotoFrame DeserializeLengthDelimited(Stream stream);
    public static PhotoFrame DeserializeLength(Stream stream, int length);
    public static PhotoFrame Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PhotoFrame previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PhotoFrame Deserialize(Byte[] buffer, PhotoFrame instance, bool isDelta);
    public static PhotoFrame Deserialize(Stream stream, PhotoFrame instance, bool isDelta);
    public static PhotoFrame DeserializeLengthDelimited(Stream stream, PhotoFrame instance, bool isDelta);
    public static PhotoFrame DeserializeLength(Stream stream, int length, PhotoFrame instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PhotoFrame instance, PhotoFrame previous);
    public static void Serialize(Stream stream, PhotoFrame instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PhotoFrame instance);
    public static void SerializeLengthDelimited(Stream stream, PhotoFrame instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerAttack : object {
    public Attack attack;
    public int projectileID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerAttack instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerAttack instance);
    public PlayerAttack Copy();
    public static PlayerAttack Deserialize(Stream stream);
    public static PlayerAttack DeserializeLengthDelimited(Stream stream);
    public static PlayerAttack DeserializeLength(Stream stream, int length);
    public static PlayerAttack Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerAttack previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerAttack Deserialize(Byte[] buffer, PlayerAttack instance, bool isDelta);
    public static PlayerAttack Deserialize(Stream stream, PlayerAttack instance, bool isDelta);
    public static PlayerAttack DeserializeLengthDelimited(Stream stream, PlayerAttack instance, bool isDelta);
    public static PlayerAttack DeserializeLength(Stream stream, int length, PlayerAttack instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerAttack instance, PlayerAttack previous);
    public static void Serialize(Stream stream, PlayerAttack instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerAttack instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerAttack instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerDetectedAIEventData : object {
    public float range;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerDetectedAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerDetectedAIEventData instance);
    public PlayerDetectedAIEventData Copy();
    public static PlayerDetectedAIEventData Deserialize(Stream stream);
    public static PlayerDetectedAIEventData DeserializeLengthDelimited(Stream stream);
    public static PlayerDetectedAIEventData DeserializeLength(Stream stream, int length);
    public static PlayerDetectedAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerDetectedAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerDetectedAIEventData Deserialize(Byte[] buffer, PlayerDetectedAIEventData instance, bool isDelta);
    public static PlayerDetectedAIEventData Deserialize(Stream stream, PlayerDetectedAIEventData instance, bool isDelta);
    public static PlayerDetectedAIEventData DeserializeLengthDelimited(Stream stream, PlayerDetectedAIEventData instance, bool isDelta);
    public static PlayerDetectedAIEventData DeserializeLength(Stream stream, int length, PlayerDetectedAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerDetectedAIEventData instance, PlayerDetectedAIEventData previous);
    public static void Serialize(Stream stream, PlayerDetectedAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerDetectedAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerDetectedAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerInventory : object {
    public ItemContainer invMain;
    public ItemContainer invBelt;
    public ItemContainer invWear;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerInventory instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerInventory instance);
    public PlayerInventory Copy();
    public static PlayerInventory Deserialize(Stream stream);
    public static PlayerInventory DeserializeLengthDelimited(Stream stream);
    public static PlayerInventory DeserializeLength(Stream stream, int length);
    public static PlayerInventory Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerInventory previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerInventory Deserialize(Byte[] buffer, PlayerInventory instance, bool isDelta);
    public static PlayerInventory Deserialize(Stream stream, PlayerInventory instance, bool isDelta);
    public static PlayerInventory DeserializeLengthDelimited(Stream stream, PlayerInventory instance, bool isDelta);
    public static PlayerInventory DeserializeLength(Stream stream, int length, PlayerInventory instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerInventory instance, PlayerInventory previous);
    public static void Serialize(Stream stream, PlayerInventory instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerInventory instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerInventory instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerLifeStory : object {
    public float secondsAlive;
    public float metersWalked;
    public float metersRun;
    public float secondsSleeping;
    public UInt32 timeBorn;
    public UInt32 timeDied;
    public float secondsWilderness;
    public float secondsSwimming;
    public float secondsInBase;
    public float secondsInMonument;
    public float secondsFlying;
    public float secondsBoating;
    public float secondsDriving;
    public float totalDamageTaken;
    public float totalHealing;
    public DeathInfo deathInfo;
    public List`1<WeaponStats> weaponStats;
    public int killedPlayers;
    public int killedScientists;
    public int killedAnimals;
    public List`1<GenericStat> genericStats;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerLifeStory instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerLifeStory instance);
    public PlayerLifeStory Copy();
    public static PlayerLifeStory Deserialize(Stream stream);
    public static PlayerLifeStory DeserializeLengthDelimited(Stream stream);
    public static PlayerLifeStory DeserializeLength(Stream stream, int length);
    public static PlayerLifeStory Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerLifeStory previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerLifeStory Deserialize(Byte[] buffer, PlayerLifeStory instance, bool isDelta);
    public static PlayerLifeStory Deserialize(Stream stream, PlayerLifeStory instance, bool isDelta);
    public static PlayerLifeStory DeserializeLengthDelimited(Stream stream, PlayerLifeStory instance, bool isDelta);
    public static PlayerLifeStory DeserializeLength(Stream stream, int length, PlayerLifeStory instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerLifeStory instance, PlayerLifeStory previous);
    public static void Serialize(Stream stream, PlayerLifeStory instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerLifeStory instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerLifeStory instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerMetabolism : object {
    public float health;
    public float calories;
    public float hydration;
    public float heartrate;
    public float temperature;
    public float poison;
    public float radiation_level;
    public float wetness;
    public float dirtyness;
    public float oxygen;
    public float bleeding;
    public float radiation_poisoning;
    public float comfort;
    public float pending_health;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerMetabolism instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerMetabolism instance);
    public PlayerMetabolism Copy();
    public static PlayerMetabolism Deserialize(Stream stream);
    public static PlayerMetabolism DeserializeLengthDelimited(Stream stream);
    public static PlayerMetabolism DeserializeLength(Stream stream, int length);
    public static PlayerMetabolism Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerMetabolism previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerMetabolism Deserialize(Byte[] buffer, PlayerMetabolism instance, bool isDelta);
    public static PlayerMetabolism Deserialize(Stream stream, PlayerMetabolism instance, bool isDelta);
    public static PlayerMetabolism DeserializeLengthDelimited(Stream stream, PlayerMetabolism instance, bool isDelta);
    public static PlayerMetabolism DeserializeLength(Stream stream, int length, PlayerMetabolism instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerMetabolism instance, PlayerMetabolism previous);
    public static void Serialize(Stream stream, PlayerMetabolism instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerMetabolism instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerMetabolism instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerModifiers : object {
    public List`1<Modifier> modifiers;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerModifiers instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerModifiers instance);
    public PlayerModifiers Copy();
    public static PlayerModifiers Deserialize(Stream stream);
    public static PlayerModifiers DeserializeLengthDelimited(Stream stream);
    public static PlayerModifiers DeserializeLength(Stream stream, int length);
    public static PlayerModifiers Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerModifiers previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerModifiers Deserialize(Byte[] buffer, PlayerModifiers instance, bool isDelta);
    public static PlayerModifiers Deserialize(Stream stream, PlayerModifiers instance, bool isDelta);
    public static PlayerModifiers DeserializeLengthDelimited(Stream stream, PlayerModifiers instance, bool isDelta);
    public static PlayerModifiers DeserializeLength(Stream stream, int length, PlayerModifiers instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerModifiers instance, PlayerModifiers previous);
    public static void Serialize(Stream stream, PlayerModifiers instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerModifiers instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerModifiers instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerNameID : object {
    public string username;
    public ulong userid;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerNameID instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerNameID instance);
    public PlayerNameID Copy();
    public static PlayerNameID Deserialize(Stream stream);
    public static PlayerNameID DeserializeLengthDelimited(Stream stream);
    public static PlayerNameID DeserializeLength(Stream stream, int length);
    public static PlayerNameID Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerNameID previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerNameID Deserialize(Byte[] buffer, PlayerNameID instance, bool isDelta);
    public static PlayerNameID Deserialize(Stream stream, PlayerNameID instance, bool isDelta);
    public static PlayerNameID DeserializeLengthDelimited(Stream stream, PlayerNameID instance, bool isDelta);
    public static PlayerNameID DeserializeLength(Stream stream, int length, PlayerNameID instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerNameID instance, PlayerNameID previous);
    public static void Serialize(Stream stream, PlayerNameID instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerNameID instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerNameID instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerProjectileAttack : object {
    public PlayerAttack playerAttack;
    public Vector3 hitVelocity;
    public float hitDistance;
    public float travelTime;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerProjectileAttack instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerProjectileAttack instance);
    public PlayerProjectileAttack Copy();
    public static PlayerProjectileAttack Deserialize(Stream stream);
    public static PlayerProjectileAttack DeserializeLengthDelimited(Stream stream);
    public static PlayerProjectileAttack DeserializeLength(Stream stream, int length);
    public static PlayerProjectileAttack Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerProjectileAttack previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerProjectileAttack Deserialize(Byte[] buffer, PlayerProjectileAttack instance, bool isDelta);
    public static PlayerProjectileAttack Deserialize(Stream stream, PlayerProjectileAttack instance, bool isDelta);
    public static PlayerProjectileAttack DeserializeLengthDelimited(Stream stream, PlayerProjectileAttack instance, bool isDelta);
    public static PlayerProjectileAttack DeserializeLength(Stream stream, int length, PlayerProjectileAttack instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerProjectileAttack instance, PlayerProjectileAttack previous);
    public static void Serialize(Stream stream, PlayerProjectileAttack instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerProjectileAttack instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerProjectileAttack instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerProjectileRicochet : object {
    public int projectileID;
    public Vector3 hitPosition;
    public Vector3 inVelocity;
    public Vector3 outVelocity;
    public Vector3 hitNormal;
    public float travelTime;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerProjectileRicochet instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerProjectileRicochet instance);
    public PlayerProjectileRicochet Copy();
    public static PlayerProjectileRicochet Deserialize(Stream stream);
    public static PlayerProjectileRicochet DeserializeLengthDelimited(Stream stream);
    public static PlayerProjectileRicochet DeserializeLength(Stream stream, int length);
    public static PlayerProjectileRicochet Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerProjectileRicochet previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerProjectileRicochet Deserialize(Byte[] buffer, PlayerProjectileRicochet instance, bool isDelta);
    public static PlayerProjectileRicochet Deserialize(Stream stream, PlayerProjectileRicochet instance, bool isDelta);
    public static PlayerProjectileRicochet DeserializeLengthDelimited(Stream stream, PlayerProjectileRicochet instance, bool isDelta);
    public static PlayerProjectileRicochet DeserializeLength(Stream stream, int length, PlayerProjectileRicochet instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerProjectileRicochet instance, PlayerProjectileRicochet previous);
    public static void Serialize(Stream stream, PlayerProjectileRicochet instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerProjectileRicochet instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerProjectileRicochet instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerProjectileUpdate : object {
    public int projectileID;
    public Vector3 curPosition;
    public Vector3 curVelocity;
    public float travelTime;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerProjectileUpdate instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerProjectileUpdate instance);
    public PlayerProjectileUpdate Copy();
    public static PlayerProjectileUpdate Deserialize(Stream stream);
    public static PlayerProjectileUpdate DeserializeLengthDelimited(Stream stream);
    public static PlayerProjectileUpdate DeserializeLength(Stream stream, int length);
    public static PlayerProjectileUpdate Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerProjectileUpdate previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerProjectileUpdate Deserialize(Byte[] buffer, PlayerProjectileUpdate instance, bool isDelta);
    public static PlayerProjectileUpdate Deserialize(Stream stream, PlayerProjectileUpdate instance, bool isDelta);
    public static PlayerProjectileUpdate DeserializeLengthDelimited(Stream stream, PlayerProjectileUpdate instance, bool isDelta);
    public static PlayerProjectileUpdate DeserializeLength(Stream stream, int length, PlayerProjectileUpdate instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerProjectileUpdate instance, PlayerProjectileUpdate previous);
    public static void Serialize(Stream stream, PlayerProjectileUpdate instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerProjectileUpdate instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerProjectileUpdate instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerState : object {
    public double unHostileTimestamp;
    public List`1<MapNote> pointsOfInterest;
    public MapNote deathMarker;
    public Missions missions;
    public List`1<MapNote> pings;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerState instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerState instance);
    public PlayerState Copy();
    public static PlayerState Deserialize(Stream stream);
    public static PlayerState DeserializeLengthDelimited(Stream stream);
    public static PlayerState DeserializeLength(Stream stream, int length);
    public static PlayerState Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerState previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerState Deserialize(Byte[] buffer, PlayerState instance, bool isDelta);
    public static PlayerState Deserialize(Stream stream, PlayerState instance, bool isDelta);
    public static PlayerState DeserializeLengthDelimited(Stream stream, PlayerState instance, bool isDelta);
    public static PlayerState DeserializeLength(Stream stream, int length, PlayerState instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerState instance, PlayerState previous);
    public static void Serialize(Stream stream, PlayerState instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerState instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerState instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerTeam : object {
    public ulong teamID;
    public string teamName;
    public ulong teamLeader;
    public List`1<TeamMember> members;
    public float teamLifetime;
    public List`1<MapNote> leaderMapNotes;
    public List`1<MapNote> teamPings;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerTeam instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerTeam instance);
    public PlayerTeam Copy();
    public static PlayerTeam Deserialize(Stream stream);
    public static PlayerTeam DeserializeLengthDelimited(Stream stream);
    public static PlayerTeam DeserializeLength(Stream stream, int length);
    public static PlayerTeam Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerTeam previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerTeam Deserialize(Byte[] buffer, PlayerTeam instance, bool isDelta);
    public static PlayerTeam Deserialize(Stream stream, PlayerTeam instance, bool isDelta);
    public static PlayerTeam DeserializeLengthDelimited(Stream stream, PlayerTeam instance, bool isDelta);
    public static PlayerTeam DeserializeLength(Stream stream, int length, PlayerTeam instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerTeam instance, PlayerTeam previous);
    public static void Serialize(Stream stream, PlayerTeam instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerTeam instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerTeam instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PlayerUpdateLoot : object {
    public ItemId itemID;
    public NetworkableId entityID;
    public List`1<ItemContainer> containers;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PlayerUpdateLoot instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PlayerUpdateLoot instance);
    public PlayerUpdateLoot Copy();
    public static PlayerUpdateLoot Deserialize(Stream stream);
    public static PlayerUpdateLoot DeserializeLengthDelimited(Stream stream);
    public static PlayerUpdateLoot DeserializeLength(Stream stream, int length);
    public static PlayerUpdateLoot Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PlayerUpdateLoot previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PlayerUpdateLoot Deserialize(Byte[] buffer, PlayerUpdateLoot instance, bool isDelta);
    public static PlayerUpdateLoot Deserialize(Stream stream, PlayerUpdateLoot instance, bool isDelta);
    public static PlayerUpdateLoot DeserializeLengthDelimited(Stream stream, PlayerUpdateLoot instance, bool isDelta);
    public static PlayerUpdateLoot DeserializeLength(Stream stream, int length, PlayerUpdateLoot instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PlayerUpdateLoot instance, PlayerUpdateLoot previous);
    public static void Serialize(Stream stream, PlayerUpdateLoot instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PlayerUpdateLoot instance);
    public static void SerializeLengthDelimited(Stream stream, PlayerUpdateLoot instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PrefabData : object {
    public string category;
    public UInt32 id;
    public VectorData position;
    public VectorData rotation;
    public VectorData scale;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PrefabData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PrefabData instance);
    public PrefabData Copy();
    public static PrefabData Deserialize(Stream stream);
    public static PrefabData DeserializeLengthDelimited(Stream stream);
    public static PrefabData DeserializeLength(Stream stream, int length);
    public static PrefabData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PrefabData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PrefabData Deserialize(Byte[] buffer, PrefabData instance, bool isDelta);
    public static PrefabData Deserialize(Stream stream, PrefabData instance, bool isDelta);
    public static PrefabData DeserializeLengthDelimited(Stream stream, PrefabData instance, bool isDelta);
    public static PrefabData DeserializeLength(Stream stream, int length, PrefabData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PrefabData instance, PrefabData previous);
    public static void Serialize(Stream stream, PrefabData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PrefabData instance);
    public static void SerializeLengthDelimited(Stream stream, PrefabData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ProceduralDungeon : object {
    public UInt32 seed;
    public NetworkableId exitPortalID;
    public Vector3 mapOffset;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ProceduralDungeon instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ProceduralDungeon instance);
    public ProceduralDungeon Copy();
    public static ProceduralDungeon Deserialize(Stream stream);
    public static ProceduralDungeon DeserializeLengthDelimited(Stream stream);
    public static ProceduralDungeon DeserializeLength(Stream stream, int length);
    public static ProceduralDungeon Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ProceduralDungeon previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ProceduralDungeon Deserialize(Byte[] buffer, ProceduralDungeon instance, bool isDelta);
    public static ProceduralDungeon Deserialize(Stream stream, ProceduralDungeon instance, bool isDelta);
    public static ProceduralDungeon DeserializeLengthDelimited(Stream stream, ProceduralDungeon instance, bool isDelta);
    public static ProceduralDungeon DeserializeLength(Stream stream, int length, ProceduralDungeon instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ProceduralDungeon instance, ProceduralDungeon previous);
    public static void Serialize(Stream stream, ProceduralDungeon instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ProceduralDungeon instance);
    public static void SerializeLengthDelimited(Stream stream, ProceduralDungeon instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ProjectileShoot : object {
    public int ammoType;
    public List`1<Projectile> projectiles;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ProjectileShoot instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ProjectileShoot instance);
    public ProjectileShoot Copy();
    public static ProjectileShoot Deserialize(Stream stream);
    public static ProjectileShoot DeserializeLengthDelimited(Stream stream);
    public static ProjectileShoot DeserializeLength(Stream stream, int length);
    public static ProjectileShoot Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ProjectileShoot previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ProjectileShoot Deserialize(Byte[] buffer, ProjectileShoot instance, bool isDelta);
    public static ProjectileShoot Deserialize(Stream stream, ProjectileShoot instance, bool isDelta);
    public static ProjectileShoot DeserializeLengthDelimited(Stream stream, ProjectileShoot instance, bool isDelta);
    public static ProjectileShoot DeserializeLength(Stream stream, int length, ProjectileShoot instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ProjectileShoot instance, ProjectileShoot previous);
    public static void Serialize(Stream stream, ProjectileShoot instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ProjectileShoot instance);
    public static void SerializeLengthDelimited(Stream stream, ProjectileShoot instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.PuzzleReset : object {
    public bool playerBlocksReset;
    public float playerDetectionRadius;
    public Vector3 playerDetectionOrigin;
    public float timeBetweenResets;
    public bool scaleWithServerPopulation;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(PuzzleReset instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(PuzzleReset instance);
    public PuzzleReset Copy();
    public static PuzzleReset Deserialize(Stream stream);
    public static PuzzleReset DeserializeLengthDelimited(Stream stream);
    public static PuzzleReset DeserializeLength(Stream stream, int length);
    public static PuzzleReset Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, PuzzleReset previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static PuzzleReset Deserialize(Byte[] buffer, PuzzleReset instance, bool isDelta);
    public static PuzzleReset Deserialize(Stream stream, PuzzleReset instance, bool isDelta);
    public static PuzzleReset DeserializeLengthDelimited(Stream stream, PuzzleReset instance, bool isDelta);
    public static PuzzleReset DeserializeLength(Stream stream, int length, PuzzleReset instance, bool isDelta);
    public static void SerializeDelta(Stream stream, PuzzleReset instance, PuzzleReset previous);
    public static void Serialize(Stream stream, PuzzleReset instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(PuzzleReset instance);
    public static void SerializeLengthDelimited(Stream stream, PuzzleReset instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.RadioList : object {
    public List`1<string> stationUrls;
    public List`1<string> stationNames;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(RadioList instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(RadioList instance);
    public RadioList Copy();
    public static RadioList Deserialize(Stream stream);
    public static RadioList DeserializeLengthDelimited(Stream stream);
    public static RadioList DeserializeLength(Stream stream, int length);
    public static RadioList Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, RadioList previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static RadioList Deserialize(Byte[] buffer, RadioList instance, bool isDelta);
    public static RadioList Deserialize(Stream stream, RadioList instance, bool isDelta);
    public static RadioList DeserializeLengthDelimited(Stream stream, RadioList instance, bool isDelta);
    public static RadioList DeserializeLength(Stream stream, int length, RadioList instance, bool isDelta);
    public static void SerializeDelta(Stream stream, RadioList instance, RadioList previous);
    public static void Serialize(Stream stream, RadioList instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(RadioList instance);
    public static void SerializeLengthDelimited(Stream stream, RadioList instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Ragdoll : object {
    public float time;
    public List`1<int> positions;
    public List`1<int> rotations;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Ragdoll instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Ragdoll instance);
    public Ragdoll Copy();
    public static Ragdoll Deserialize(Stream stream);
    public static Ragdoll DeserializeLengthDelimited(Stream stream);
    public static Ragdoll DeserializeLength(Stream stream, int length);
    public static Ragdoll Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Ragdoll previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Ragdoll Deserialize(Byte[] buffer, Ragdoll instance, bool isDelta);
    public static Ragdoll Deserialize(Stream stream, Ragdoll instance, bool isDelta);
    public static Ragdoll DeserializeLengthDelimited(Stream stream, Ragdoll instance, bool isDelta);
    public static Ragdoll DeserializeLength(Stream stream, int length, Ragdoll instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Ragdoll instance, Ragdoll previous);
    public static void Serialize(Stream stream, Ragdoll instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Ragdoll instance);
    public static void SerializeLengthDelimited(Stream stream, Ragdoll instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.RCEntity : object {
    public Vector3 aim;
    public float zoom;
    public string identifier;
    public string password;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(RCEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(RCEntity instance);
    public RCEntity Copy();
    public static RCEntity Deserialize(Stream stream);
    public static RCEntity DeserializeLengthDelimited(Stream stream);
    public static RCEntity DeserializeLength(Stream stream, int length);
    public static RCEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, RCEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static RCEntity Deserialize(Byte[] buffer, RCEntity instance, bool isDelta);
    public static RCEntity Deserialize(Stream stream, RCEntity instance, bool isDelta);
    public static RCEntity DeserializeLengthDelimited(Stream stream, RCEntity instance, bool isDelta);
    public static RCEntity DeserializeLength(Stream stream, int length, RCEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, RCEntity instance, RCEntity previous);
    public static void Serialize(Stream stream, RCEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(RCEntity instance);
    public static void SerializeLengthDelimited(Stream stream, RCEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ReclaimManager : object {
    public List`1<ReclaimInfo> reclaimEntries;
    public int lastReclaimID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ReclaimManager instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ReclaimManager instance);
    public ReclaimManager Copy();
    public static ReclaimManager Deserialize(Stream stream);
    public static ReclaimManager DeserializeLengthDelimited(Stream stream);
    public static ReclaimManager DeserializeLength(Stream stream, int length);
    public static ReclaimManager Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ReclaimManager previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ReclaimManager Deserialize(Byte[] buffer, ReclaimManager instance, bool isDelta);
    public static ReclaimManager Deserialize(Stream stream, ReclaimManager instance, bool isDelta);
    public static ReclaimManager DeserializeLengthDelimited(Stream stream, ReclaimManager instance, bool isDelta);
    public static ReclaimManager DeserializeLength(Stream stream, int length, ReclaimManager instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ReclaimManager instance, ReclaimManager previous);
    public static void Serialize(Stream stream, ReclaimManager instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ReclaimManager instance);
    public static void SerializeLengthDelimited(Stream stream, ReclaimManager instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ReclaimTerminal : object {
    public int itemCount;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ReclaimTerminal instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ReclaimTerminal instance);
    public ReclaimTerminal Copy();
    public static ReclaimTerminal Deserialize(Stream stream);
    public static ReclaimTerminal DeserializeLengthDelimited(Stream stream);
    public static ReclaimTerminal DeserializeLength(Stream stream, int length);
    public static ReclaimTerminal Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ReclaimTerminal previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ReclaimTerminal Deserialize(Byte[] buffer, ReclaimTerminal instance, bool isDelta);
    public static ReclaimTerminal Deserialize(Stream stream, ReclaimTerminal instance, bool isDelta);
    public static ReclaimTerminal DeserializeLengthDelimited(Stream stream, ReclaimTerminal instance, bool isDelta);
    public static ReclaimTerminal DeserializeLength(Stream stream, int length, ReclaimTerminal instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ReclaimTerminal instance, ReclaimTerminal previous);
    public static void Serialize(Stream stream, ReclaimTerminal instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ReclaimTerminal instance);
    public static void SerializeLengthDelimited(Stream stream, ReclaimTerminal instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.RelationshipManager : object {
    public ulong lastTeamIndex;
    public List`1<PlayerTeam> teamList;
    public int maxTeamSize;
    public List`1<PlayerRelationships> relationships;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(RelationshipManager instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(RelationshipManager instance);
    public RelationshipManager Copy();
    public static RelationshipManager Deserialize(Stream stream);
    public static RelationshipManager DeserializeLengthDelimited(Stream stream);
    public static RelationshipManager DeserializeLength(Stream stream, int length);
    public static RelationshipManager Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, RelationshipManager previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static RelationshipManager Deserialize(Byte[] buffer, RelationshipManager instance, bool isDelta);
    public static RelationshipManager Deserialize(Stream stream, RelationshipManager instance, bool isDelta);
    public static RelationshipManager DeserializeLengthDelimited(Stream stream, RelationshipManager instance, bool isDelta);
    public static RelationshipManager DeserializeLength(Stream stream, int length, RelationshipManager instance, bool isDelta);
    public static void SerializeDelta(Stream stream, RelationshipManager instance, RelationshipManager previous);
    public static void Serialize(Stream stream, RelationshipManager instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(RelationshipManager instance);
    public static void SerializeLengthDelimited(Stream stream, RelationshipManager instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ResearchTable : object {
    public float researchTimeLeft;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ResearchTable instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ResearchTable instance);
    public ResearchTable Copy();
    public static ResearchTable Deserialize(Stream stream);
    public static ResearchTable DeserializeLengthDelimited(Stream stream);
    public static ResearchTable DeserializeLength(Stream stream, int length);
    public static ResearchTable Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ResearchTable previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ResearchTable Deserialize(Byte[] buffer, ResearchTable instance, bool isDelta);
    public static ResearchTable Deserialize(Stream stream, ResearchTable instance, bool isDelta);
    public static ResearchTable DeserializeLengthDelimited(Stream stream, ResearchTable instance, bool isDelta);
    public static ResearchTable DeserializeLength(Stream stream, int length, ResearchTable instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ResearchTable instance, ResearchTable previous);
    public static void Serialize(Stream stream, ResearchTable instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ResearchTable instance);
    public static void SerializeLengthDelimited(Stream stream, ResearchTable instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ResourceExtractor : object {
    public ItemContainer fuelContents;
    public ItemContainer outputContents;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ResourceExtractor instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ResourceExtractor instance);
    public ResourceExtractor Copy();
    public static ResourceExtractor Deserialize(Stream stream);
    public static ResourceExtractor DeserializeLengthDelimited(Stream stream);
    public static ResourceExtractor DeserializeLength(Stream stream, int length);
    public static ResourceExtractor Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ResourceExtractor previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ResourceExtractor Deserialize(Byte[] buffer, ResourceExtractor instance, bool isDelta);
    public static ResourceExtractor Deserialize(Stream stream, ResourceExtractor instance, bool isDelta);
    public static ResourceExtractor DeserializeLengthDelimited(Stream stream, ResourceExtractor instance, bool isDelta);
    public static ResourceExtractor DeserializeLength(Stream stream, int length, ResourceExtractor instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ResourceExtractor instance, ResourceExtractor previous);
    public static void Serialize(Stream stream, ResourceExtractor instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ResourceExtractor instance);
    public static void SerializeLengthDelimited(Stream stream, ResourceExtractor instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.RespawnInformation : object {
    public List`1<SpawnOptions> spawnOptions;
    public PlayerLifeStory previousLife;
    public bool fadeIn;
    public bool loading;
    public List`1<Vector3> shelterPositions;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(RespawnInformation instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(RespawnInformation instance);
    public RespawnInformation Copy();
    public static RespawnInformation Deserialize(Stream stream);
    public static RespawnInformation DeserializeLengthDelimited(Stream stream);
    public static RespawnInformation DeserializeLength(Stream stream, int length);
    public static RespawnInformation Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, RespawnInformation previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static RespawnInformation Deserialize(Byte[] buffer, RespawnInformation instance, bool isDelta);
    public static RespawnInformation Deserialize(Stream stream, RespawnInformation instance, bool isDelta);
    public static RespawnInformation DeserializeLengthDelimited(Stream stream, RespawnInformation instance, bool isDelta);
    public static RespawnInformation DeserializeLength(Stream stream, int length, RespawnInformation instance, bool isDelta);
    public static void SerializeDelta(Stream stream, RespawnInformation instance, RespawnInformation previous);
    public static void Serialize(Stream stream, RespawnInformation instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(RespawnInformation instance);
    public static void SerializeLengthDelimited(Stream stream, RespawnInformation instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.RidableAnimal : object {
    public ItemContainer equipmentContainer;
    public ItemContainer storageContainer;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(RidableAnimal instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(RidableAnimal instance);
    public RidableAnimal Copy();
    public static RidableAnimal Deserialize(Stream stream);
    public static RidableAnimal DeserializeLengthDelimited(Stream stream);
    public static RidableAnimal DeserializeLength(Stream stream, int length);
    public static RidableAnimal Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, RidableAnimal previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static RidableAnimal Deserialize(Byte[] buffer, RidableAnimal instance, bool isDelta);
    public static RidableAnimal Deserialize(Stream stream, RidableAnimal instance, bool isDelta);
    public static RidableAnimal DeserializeLengthDelimited(Stream stream, RidableAnimal instance, bool isDelta);
    public static RidableAnimal DeserializeLength(Stream stream, int length, RidableAnimal instance, bool isDelta);
    public static void SerializeDelta(Stream stream, RidableAnimal instance, RidableAnimal previous);
    public static void Serialize(Stream stream, RidableAnimal instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(RidableAnimal instance);
    public static void SerializeLengthDelimited(Stream stream, RidableAnimal instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.RockingChair : object {
    public Vector3 initEuler;
    public float initY;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(RockingChair instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(RockingChair instance);
    public RockingChair Copy();
    public static RockingChair Deserialize(Stream stream);
    public static RockingChair DeserializeLengthDelimited(Stream stream);
    public static RockingChair DeserializeLength(Stream stream, int length);
    public static RockingChair Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, RockingChair previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static RockingChair Deserialize(Byte[] buffer, RockingChair instance, bool isDelta);
    public static RockingChair Deserialize(Stream stream, RockingChair instance, bool isDelta);
    public static RockingChair DeserializeLengthDelimited(Stream stream, RockingChair instance, bool isDelta);
    public static RockingChair DeserializeLength(Stream stream, int length, RockingChair instance, bool isDelta);
    public static void SerializeDelta(Stream stream, RockingChair instance, RockingChair previous);
    public static void Serialize(Stream stream, RockingChair instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(RockingChair instance);
    public static void SerializeLengthDelimited(Stream stream, RockingChair instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SalesData : object {
    public ulong totalSales;
    public ulong totalIntervals;
    public ulong soldThisInterval;
    public float CurrentMultiplier;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SalesData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SalesData instance);
    public SalesData Copy();
    public static SalesData Deserialize(Stream stream);
    public static SalesData DeserializeLengthDelimited(Stream stream);
    public static SalesData DeserializeLength(Stream stream, int length);
    public static SalesData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SalesData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SalesData Deserialize(Byte[] buffer, SalesData instance, bool isDelta);
    public static SalesData Deserialize(Stream stream, SalesData instance, bool isDelta);
    public static SalesData DeserializeLengthDelimited(Stream stream, SalesData instance, bool isDelta);
    public static SalesData DeserializeLength(Stream stream, int length, SalesData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SalesData instance, SalesData previous);
    public static void Serialize(Stream stream, SalesData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SalesData instance);
    public static void SerializeLengthDelimited(Stream stream, SalesData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SAMSite : object {
    public Vector3 aimDir;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SAMSite instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SAMSite instance);
    public SAMSite Copy();
    public static SAMSite Deserialize(Stream stream);
    public static SAMSite DeserializeLengthDelimited(Stream stream);
    public static SAMSite DeserializeLength(Stream stream, int length);
    public static SAMSite Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SAMSite previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SAMSite Deserialize(Byte[] buffer, SAMSite instance, bool isDelta);
    public static SAMSite Deserialize(Stream stream, SAMSite instance, bool isDelta);
    public static SAMSite DeserializeLengthDelimited(Stream stream, SAMSite instance, bool isDelta);
    public static SAMSite DeserializeLength(Stream stream, int length, SAMSite instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SAMSite instance, SAMSite previous);
    public static void Serialize(Stream stream, SAMSite instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SAMSite instance);
    public static void SerializeLengthDelimited(Stream stream, SAMSite instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ServerGib : object {
    public string gibName;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ServerGib instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ServerGib instance);
    public ServerGib Copy();
    public static ServerGib Deserialize(Stream stream);
    public static ServerGib DeserializeLengthDelimited(Stream stream);
    public static ServerGib DeserializeLength(Stream stream, int length);
    public static ServerGib Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ServerGib previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ServerGib Deserialize(Byte[] buffer, ServerGib instance, bool isDelta);
    public static ServerGib Deserialize(Stream stream, ServerGib instance, bool isDelta);
    public static ServerGib DeserializeLengthDelimited(Stream stream, ServerGib instance, bool isDelta);
    public static ServerGib DeserializeLength(Stream stream, int length, ServerGib instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ServerGib instance, ServerGib previous);
    public static void Serialize(Stream stream, ServerGib instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ServerGib instance);
    public static void SerializeLengthDelimited(Stream stream, ServerGib instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ShopKeeper : object {
    public NetworkableId vendingRef;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ShopKeeper instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ShopKeeper instance);
    public ShopKeeper Copy();
    public static ShopKeeper Deserialize(Stream stream);
    public static ShopKeeper DeserializeLengthDelimited(Stream stream);
    public static ShopKeeper DeserializeLength(Stream stream, int length);
    public static ShopKeeper Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ShopKeeper previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ShopKeeper Deserialize(Byte[] buffer, ShopKeeper instance, bool isDelta);
    public static ShopKeeper Deserialize(Stream stream, ShopKeeper instance, bool isDelta);
    public static ShopKeeper DeserializeLengthDelimited(Stream stream, ShopKeeper instance, bool isDelta);
    public static ShopKeeper DeserializeLength(Stream stream, int length, ShopKeeper instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ShopKeeper instance, ShopKeeper previous);
    public static void Serialize(Stream stream, ShopKeeper instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ShopKeeper instance);
    public static void SerializeLengthDelimited(Stream stream, ShopKeeper instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Sign : object {
    public UInt32 imageid;
    public List`1<UInt32> imageIds;
    public List`1<ulong> editHistory;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Sign instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Sign instance);
    public Sign Copy();
    public static Sign Deserialize(Stream stream);
    public static Sign DeserializeLengthDelimited(Stream stream);
    public static Sign DeserializeLength(Stream stream, int length);
    public static Sign Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Sign previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Sign Deserialize(Byte[] buffer, Sign instance, bool isDelta);
    public static Sign Deserialize(Stream stream, Sign instance, bool isDelta);
    public static Sign DeserializeLengthDelimited(Stream stream, Sign instance, bool isDelta);
    public static Sign DeserializeLength(Stream stream, int length, Sign instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Sign instance, Sign previous);
    public static void Serialize(Stream stream, Sign instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Sign instance);
    public static void SerializeLengthDelimited(Stream stream, Sign instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SimpleInt : object {
    public int value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SimpleInt instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SimpleInt instance);
    public SimpleInt Copy();
    public static SimpleInt Deserialize(Stream stream);
    public static SimpleInt DeserializeLengthDelimited(Stream stream);
    public static SimpleInt DeserializeLength(Stream stream, int length);
    public static SimpleInt Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SimpleInt previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SimpleInt Deserialize(Byte[] buffer, SimpleInt instance, bool isDelta);
    public static SimpleInt Deserialize(Stream stream, SimpleInt instance, bool isDelta);
    public static SimpleInt DeserializeLengthDelimited(Stream stream, SimpleInt instance, bool isDelta);
    public static SimpleInt DeserializeLength(Stream stream, int length, SimpleInt instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SimpleInt instance, SimpleInt previous);
    public static void Serialize(Stream stream, SimpleInt instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SimpleInt instance);
    public static void SerializeLengthDelimited(Stream stream, SimpleInt instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SimpleUID : object {
    public NetworkableId uid;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SimpleUID instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SimpleUID instance);
    public SimpleUID Copy();
    public static SimpleUID Deserialize(Stream stream);
    public static SimpleUID DeserializeLengthDelimited(Stream stream);
    public static SimpleUID DeserializeLength(Stream stream, int length);
    public static SimpleUID Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SimpleUID previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SimpleUID Deserialize(Byte[] buffer, SimpleUID instance, bool isDelta);
    public static SimpleUID Deserialize(Stream stream, SimpleUID instance, bool isDelta);
    public static SimpleUID DeserializeLengthDelimited(Stream stream, SimpleUID instance, bool isDelta);
    public static SimpleUID DeserializeLength(Stream stream, int length, SimpleUID instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SimpleUID instance, SimpleUID previous);
    public static void Serialize(Stream stream, SimpleUID instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SimpleUID instance);
    public static void SerializeLengthDelimited(Stream stream, SimpleUID instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SimpleUInt : object {
    public UInt32 value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SimpleUInt instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SimpleUInt instance);
    public SimpleUInt Copy();
    public static SimpleUInt Deserialize(Stream stream);
    public static SimpleUInt DeserializeLengthDelimited(Stream stream);
    public static SimpleUInt DeserializeLength(Stream stream, int length);
    public static SimpleUInt Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SimpleUInt previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SimpleUInt Deserialize(Byte[] buffer, SimpleUInt instance, bool isDelta);
    public static SimpleUInt Deserialize(Stream stream, SimpleUInt instance, bool isDelta);
    public static SimpleUInt DeserializeLengthDelimited(Stream stream, SimpleUInt instance, bool isDelta);
    public static SimpleUInt DeserializeLength(Stream stream, int length, SimpleUInt instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SimpleUInt instance, SimpleUInt previous);
    public static void Serialize(Stream stream, SimpleUInt instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SimpleUInt instance);
    public static void SerializeLengthDelimited(Stream stream, SimpleUInt instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SkullTrophy : object {
    public string playerName;
    public string streamerName;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SkullTrophy instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SkullTrophy instance);
    public SkullTrophy Copy();
    public static SkullTrophy Deserialize(Stream stream);
    public static SkullTrophy DeserializeLengthDelimited(Stream stream);
    public static SkullTrophy DeserializeLength(Stream stream, int length);
    public static SkullTrophy Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SkullTrophy previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SkullTrophy Deserialize(Byte[] buffer, SkullTrophy instance, bool isDelta);
    public static SkullTrophy Deserialize(Stream stream, SkullTrophy instance, bool isDelta);
    public static SkullTrophy DeserializeLengthDelimited(Stream stream, SkullTrophy instance, bool isDelta);
    public static SkullTrophy DeserializeLength(Stream stream, int length, SkullTrophy instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SkullTrophy instance, SkullTrophy previous);
    public static void Serialize(Stream stream, SkullTrophy instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SkullTrophy instance);
    public static void SerializeLengthDelimited(Stream stream, SkullTrophy instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SleepingBag : object {
    public string name;
    public ulong deployerID;
    public bool clientAssigned;
    public bool isAssigned;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SleepingBag instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SleepingBag instance);
    public SleepingBag Copy();
    public static SleepingBag Deserialize(Stream stream);
    public static SleepingBag DeserializeLengthDelimited(Stream stream);
    public static SleepingBag DeserializeLength(Stream stream, int length);
    public static SleepingBag Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SleepingBag previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SleepingBag Deserialize(Byte[] buffer, SleepingBag instance, bool isDelta);
    public static SleepingBag Deserialize(Stream stream, SleepingBag instance, bool isDelta);
    public static SleepingBag DeserializeLengthDelimited(Stream stream, SleepingBag instance, bool isDelta);
    public static SleepingBag DeserializeLength(Stream stream, int length, SleepingBag instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SleepingBag instance, SleepingBag previous);
    public static void Serialize(Stream stream, SleepingBag instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SleepingBag instance);
    public static void SerializeLengthDelimited(Stream stream, SleepingBag instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SleepingBagCamper : object {
    public NetworkableId seatID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SleepingBagCamper instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SleepingBagCamper instance);
    public SleepingBagCamper Copy();
    public static SleepingBagCamper Deserialize(Stream stream);
    public static SleepingBagCamper DeserializeLengthDelimited(Stream stream);
    public static SleepingBagCamper DeserializeLength(Stream stream, int length);
    public static SleepingBagCamper Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SleepingBagCamper previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SleepingBagCamper Deserialize(Byte[] buffer, SleepingBagCamper instance, bool isDelta);
    public static SleepingBagCamper Deserialize(Stream stream, SleepingBagCamper instance, bool isDelta);
    public static SleepingBagCamper DeserializeLengthDelimited(Stream stream, SleepingBagCamper instance, bool isDelta);
    public static SleepingBagCamper DeserializeLength(Stream stream, int length, SleepingBagCamper instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SleepingBagCamper instance, SleepingBagCamper previous);
    public static void Serialize(Stream stream, SleepingBagCamper instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SleepingBagCamper instance);
    public static void SerializeLengthDelimited(Stream stream, SleepingBagCamper instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SlotMachine : object {
    public int oldResult1;
    public int oldResult2;
    public int oldResult3;
    public int newResult1;
    public int newResult2;
    public int newResult3;
    public bool isSpinning;
    public float spinTime;
    public NetworkableId storageID;
    public int multiplier;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SlotMachine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SlotMachine instance);
    public SlotMachine Copy();
    public static SlotMachine Deserialize(Stream stream);
    public static SlotMachine DeserializeLengthDelimited(Stream stream);
    public static SlotMachine DeserializeLength(Stream stream, int length);
    public static SlotMachine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SlotMachine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SlotMachine Deserialize(Byte[] buffer, SlotMachine instance, bool isDelta);
    public static SlotMachine Deserialize(Stream stream, SlotMachine instance, bool isDelta);
    public static SlotMachine DeserializeLengthDelimited(Stream stream, SlotMachine instance, bool isDelta);
    public static SlotMachine DeserializeLength(Stream stream, int length, SlotMachine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SlotMachine instance, SlotMachine previous);
    public static void Serialize(Stream stream, SlotMachine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SlotMachine instance);
    public static void SerializeLengthDelimited(Stream stream, SlotMachine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SmartAlarm : object {
    public List`1<ulong> subscriptions;
    public string notificationTitle;
    public string notificationBody;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SmartAlarm instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SmartAlarm instance);
    public SmartAlarm Copy();
    public static SmartAlarm Deserialize(Stream stream);
    public static SmartAlarm DeserializeLengthDelimited(Stream stream);
    public static SmartAlarm DeserializeLength(Stream stream, int length);
    public static SmartAlarm Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SmartAlarm previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SmartAlarm Deserialize(Byte[] buffer, SmartAlarm instance, bool isDelta);
    public static SmartAlarm Deserialize(Stream stream, SmartAlarm instance, bool isDelta);
    public static SmartAlarm DeserializeLengthDelimited(Stream stream, SmartAlarm instance, bool isDelta);
    public static SmartAlarm DeserializeLength(Stream stream, int length, SmartAlarm instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SmartAlarm instance, SmartAlarm previous);
    public static void Serialize(Stream stream, SmartAlarm instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SmartAlarm instance);
    public static void SerializeLengthDelimited(Stream stream, SmartAlarm instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Snowmobile : object {
    public float steerInput;
    public float driveWheelVel;
    public float throttleInput;
    public float brakeInput;
    public NetworkableId storageID;
    public NetworkableId fuelStorageID;
    public float fuelFraction;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Snowmobile instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Snowmobile instance);
    public Snowmobile Copy();
    public static Snowmobile Deserialize(Stream stream);
    public static Snowmobile DeserializeLengthDelimited(Stream stream);
    public static Snowmobile DeserializeLength(Stream stream, int length);
    public static Snowmobile Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Snowmobile previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Snowmobile Deserialize(Byte[] buffer, Snowmobile instance, bool isDelta);
    public static Snowmobile Deserialize(Stream stream, Snowmobile instance, bool isDelta);
    public static Snowmobile DeserializeLengthDelimited(Stream stream, Snowmobile instance, bool isDelta);
    public static Snowmobile DeserializeLength(Stream stream, int length, Snowmobile instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Snowmobile instance, Snowmobile previous);
    public static void Serialize(Stream stream, Snowmobile instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Snowmobile instance);
    public static void SerializeLengthDelimited(Stream stream, Snowmobile instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Spawnable : object {
    public UInt32 population;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Spawnable instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Spawnable instance);
    public Spawnable Copy();
    public static Spawnable Deserialize(Stream stream);
    public static Spawnable DeserializeLengthDelimited(Stream stream);
    public static Spawnable DeserializeLength(Stream stream, int length);
    public static Spawnable Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Spawnable previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Spawnable Deserialize(Byte[] buffer, Spawnable instance, bool isDelta);
    public static Spawnable Deserialize(Stream stream, Spawnable instance, bool isDelta);
    public static Spawnable DeserializeLengthDelimited(Stream stream, Spawnable instance, bool isDelta);
    public static Spawnable DeserializeLength(Stream stream, int length, Spawnable instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Spawnable instance, Spawnable previous);
    public static void Serialize(Stream stream, Spawnable instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Spawnable instance);
    public static void SerializeLengthDelimited(Stream stream, Spawnable instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SpectateTeam : object {
    public ulong teamId;
    public List`1<TeamMember> teamMembers;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SpectateTeam instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SpectateTeam instance);
    public SpectateTeam Copy();
    public static SpectateTeam Deserialize(Stream stream);
    public static SpectateTeam DeserializeLengthDelimited(Stream stream);
    public static SpectateTeam DeserializeLength(Stream stream, int length);
    public static SpectateTeam Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SpectateTeam previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SpectateTeam Deserialize(Byte[] buffer, SpectateTeam instance, bool isDelta);
    public static SpectateTeam Deserialize(Stream stream, SpectateTeam instance, bool isDelta);
    public static SpectateTeam DeserializeLengthDelimited(Stream stream, SpectateTeam instance, bool isDelta);
    public static SpectateTeam DeserializeLength(Stream stream, int length, SpectateTeam instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SpectateTeam instance, SpectateTeam previous);
    public static void Serialize(Stream stream, SpectateTeam instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SpectateTeam instance);
    public static void SerializeLengthDelimited(Stream stream, SpectateTeam instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SpectateTeamInfo : object {
    public List`1<SpectateTeam> teams;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SpectateTeamInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SpectateTeamInfo instance);
    public SpectateTeamInfo Copy();
    public static SpectateTeamInfo Deserialize(Stream stream);
    public static SpectateTeamInfo DeserializeLengthDelimited(Stream stream);
    public static SpectateTeamInfo DeserializeLength(Stream stream, int length);
    public static SpectateTeamInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SpectateTeamInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SpectateTeamInfo Deserialize(Byte[] buffer, SpectateTeamInfo instance, bool isDelta);
    public static SpectateTeamInfo Deserialize(Stream stream, SpectateTeamInfo instance, bool isDelta);
    public static SpectateTeamInfo DeserializeLengthDelimited(Stream stream, SpectateTeamInfo instance, bool isDelta);
    public static SpectateTeamInfo DeserializeLength(Stream stream, int length, SpectateTeamInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SpectateTeamInfo instance, SpectateTeamInfo previous);
    public static void Serialize(Stream stream, SpectateTeamInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SpectateTeamInfo instance);
    public static void SerializeLengthDelimited(Stream stream, SpectateTeamInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SphereEntity : object {
    public float radius;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SphereEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SphereEntity instance);
    public SphereEntity Copy();
    public static SphereEntity Deserialize(Stream stream);
    public static SphereEntity DeserializeLengthDelimited(Stream stream);
    public static SphereEntity DeserializeLength(Stream stream, int length);
    public static SphereEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SphereEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SphereEntity Deserialize(Byte[] buffer, SphereEntity instance, bool isDelta);
    public static SphereEntity Deserialize(Stream stream, SphereEntity instance, bool isDelta);
    public static SphereEntity DeserializeLengthDelimited(Stream stream, SphereEntity instance, bool isDelta);
    public static SphereEntity DeserializeLength(Stream stream, int length, SphereEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SphereEntity instance, SphereEntity previous);
    public static void Serialize(Stream stream, SphereEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SphereEntity instance);
    public static void SerializeLengthDelimited(Stream stream, SphereEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SpinnerWheel : object {
    public Vector3 spin;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SpinnerWheel instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SpinnerWheel instance);
    public SpinnerWheel Copy();
    public static SpinnerWheel Deserialize(Stream stream);
    public static SpinnerWheel DeserializeLengthDelimited(Stream stream);
    public static SpinnerWheel DeserializeLength(Stream stream, int length);
    public static SpinnerWheel Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SpinnerWheel previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SpinnerWheel Deserialize(Byte[] buffer, SpinnerWheel instance, bool isDelta);
    public static SpinnerWheel Deserialize(Stream stream, SpinnerWheel instance, bool isDelta);
    public static SpinnerWheel DeserializeLengthDelimited(Stream stream, SpinnerWheel instance, bool isDelta);
    public static SpinnerWheel DeserializeLength(Stream stream, int length, SpinnerWheel instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SpinnerWheel instance, SpinnerWheel previous);
    public static void Serialize(Stream stream, SpinnerWheel instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SpinnerWheel instance);
    public static void SerializeLengthDelimited(Stream stream, SpinnerWheel instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Spray : object {
    public ulong sprayedBy;
    public long timestamp;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Spray instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Spray instance);
    public Spray Copy();
    public static Spray Deserialize(Stream stream);
    public static Spray DeserializeLengthDelimited(Stream stream);
    public static Spray DeserializeLength(Stream stream, int length);
    public static Spray Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Spray previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Spray Deserialize(Byte[] buffer, Spray instance, bool isDelta);
    public static Spray Deserialize(Stream stream, Spray instance, bool isDelta);
    public static Spray DeserializeLengthDelimited(Stream stream, Spray instance, bool isDelta);
    public static Spray DeserializeLength(Stream stream, int length, Spray instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Spray instance, Spray previous);
    public static void Serialize(Stream stream, Spray instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Spray instance);
    public static void SerializeLengthDelimited(Stream stream, Spray instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SprayLine : object {
    public List`1<LinePoint> linePoints;
    public Vector3 colour;
    public float width;
    public NetworkableId editingPlayer;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SprayLine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SprayLine instance);
    public SprayLine Copy();
    public static SprayLine Deserialize(Stream stream);
    public static SprayLine DeserializeLengthDelimited(Stream stream);
    public static SprayLine DeserializeLength(Stream stream, int length);
    public static SprayLine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SprayLine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SprayLine Deserialize(Byte[] buffer, SprayLine instance, bool isDelta);
    public static SprayLine Deserialize(Stream stream, SprayLine instance, bool isDelta);
    public static SprayLine DeserializeLengthDelimited(Stream stream, SprayLine instance, bool isDelta);
    public static SprayLine DeserializeLength(Stream stream, int length, SprayLine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SprayLine instance, SprayLine previous);
    public static void Serialize(Stream stream, SprayLine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SprayLine instance);
    public static void SerializeLengthDelimited(Stream stream, SprayLine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SprayList : object {
    public List`1<LinePoint> linePoints;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SprayList instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SprayList instance);
    public SprayList Copy();
    public static SprayList Deserialize(Stream stream);
    public static SprayList DeserializeLengthDelimited(Stream stream);
    public static SprayList DeserializeLength(Stream stream, int length);
    public static SprayList Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SprayList previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SprayList Deserialize(Byte[] buffer, SprayList instance, bool isDelta);
    public static SprayList Deserialize(Stream stream, SprayList instance, bool isDelta);
    public static SprayList DeserializeLengthDelimited(Stream stream, SprayList instance, bool isDelta);
    public static SprayList DeserializeLength(Stream stream, int length, SprayList instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SprayList instance, SprayList previous);
    public static void Serialize(Stream stream, SprayList instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SprayList instance);
    public static void SerializeLengthDelimited(Stream stream, SprayList instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.StabilityEntity : object {
    public float stability;
    public int distanceFromGround;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(StabilityEntity instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(StabilityEntity instance);
    public StabilityEntity Copy();
    public static StabilityEntity Deserialize(Stream stream);
    public static StabilityEntity DeserializeLengthDelimited(Stream stream);
    public static StabilityEntity DeserializeLength(Stream stream, int length);
    public static StabilityEntity Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, StabilityEntity previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static StabilityEntity Deserialize(Byte[] buffer, StabilityEntity instance, bool isDelta);
    public static StabilityEntity Deserialize(Stream stream, StabilityEntity instance, bool isDelta);
    public static StabilityEntity DeserializeLengthDelimited(Stream stream, StabilityEntity instance, bool isDelta);
    public static StabilityEntity DeserializeLength(Stream stream, int length, StabilityEntity instance, bool isDelta);
    public static void SerializeDelta(Stream stream, StabilityEntity instance, StabilityEntity previous);
    public static void Serialize(Stream stream, StabilityEntity instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(StabilityEntity instance);
    public static void SerializeLengthDelimited(Stream stream, StabilityEntity instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.StorageBox : object {
    public ItemContainer contents;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(StorageBox instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(StorageBox instance);
    public StorageBox Copy();
    public static StorageBox Deserialize(Stream stream);
    public static StorageBox DeserializeLengthDelimited(Stream stream);
    public static StorageBox DeserializeLength(Stream stream, int length);
    public static StorageBox Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, StorageBox previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static StorageBox Deserialize(Byte[] buffer, StorageBox instance, bool isDelta);
    public static StorageBox Deserialize(Stream stream, StorageBox instance, bool isDelta);
    public static StorageBox DeserializeLengthDelimited(Stream stream, StorageBox instance, bool isDelta);
    public static StorageBox DeserializeLength(Stream stream, int length, StorageBox instance, bool isDelta);
    public static void SerializeDelta(Stream stream, StorageBox instance, StorageBox previous);
    public static void Serialize(Stream stream, StorageBox instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(StorageBox instance);
    public static void SerializeLengthDelimited(Stream stream, StorageBox instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.SubEntityList : object {
    public List`1<NetworkableId> subEntityIds;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(SubEntityList instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(SubEntityList instance);
    public SubEntityList Copy();
    public static SubEntityList Deserialize(Stream stream);
    public static SubEntityList DeserializeLengthDelimited(Stream stream);
    public static SubEntityList DeserializeLength(Stream stream, int length);
    public static SubEntityList Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, SubEntityList previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static SubEntityList Deserialize(Byte[] buffer, SubEntityList instance, bool isDelta);
    public static SubEntityList Deserialize(Stream stream, SubEntityList instance, bool isDelta);
    public static SubEntityList DeserializeLengthDelimited(Stream stream, SubEntityList instance, bool isDelta);
    public static SubEntityList DeserializeLength(Stream stream, int length, SubEntityList instance, bool isDelta);
    public static void SerializeDelta(Stream stream, SubEntityList instance, SubEntityList previous);
    public static void Serialize(Stream stream, SubEntityList instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(SubEntityList instance);
    public static void SerializeLengthDelimited(Stream stream, SubEntityList instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Submarine : object {
    public float throttle;
    public float upDown;
    public float rudder;
    public NetworkableId fuelStorageID;
    public float fuelAmount;
    public NetworkableId torpedoStorageID;
    public float oxygen;
    public NetworkableId itemStorageID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Submarine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Submarine instance);
    public Submarine Copy();
    public static Submarine Deserialize(Stream stream);
    public static Submarine DeserializeLengthDelimited(Stream stream);
    public static Submarine DeserializeLength(Stream stream, int length);
    public static Submarine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Submarine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Submarine Deserialize(Byte[] buffer, Submarine instance, bool isDelta);
    public static Submarine Deserialize(Stream stream, Submarine instance, bool isDelta);
    public static Submarine DeserializeLengthDelimited(Stream stream, Submarine instance, bool isDelta);
    public static Submarine DeserializeLength(Stream stream, int length, Submarine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Submarine instance, Submarine previous);
    public static void Serialize(Stream stream, Submarine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Submarine instance);
    public static void SerializeLengthDelimited(Stream stream, Submarine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TakeDamage : object {
    public float amount;
    public Vector3 direction;
    public int type;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TakeDamage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TakeDamage instance);
    public TakeDamage Copy();
    public static TakeDamage Deserialize(Stream stream);
    public static TakeDamage DeserializeLengthDelimited(Stream stream);
    public static TakeDamage DeserializeLength(Stream stream, int length);
    public static TakeDamage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TakeDamage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TakeDamage Deserialize(Byte[] buffer, TakeDamage instance, bool isDelta);
    public static TakeDamage Deserialize(Stream stream, TakeDamage instance, bool isDelta);
    public static TakeDamage DeserializeLengthDelimited(Stream stream, TakeDamage instance, bool isDelta);
    public static TakeDamage DeserializeLength(Stream stream, int length, TakeDamage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TakeDamage instance, TakeDamage previous);
    public static void Serialize(Stream stream, TakeDamage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TakeDamage instance);
    public static void SerializeLengthDelimited(Stream stream, TakeDamage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TargetDetectedAIEventData : object {
    public float range;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TargetDetectedAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TargetDetectedAIEventData instance);
    public TargetDetectedAIEventData Copy();
    public static TargetDetectedAIEventData Deserialize(Stream stream);
    public static TargetDetectedAIEventData DeserializeLengthDelimited(Stream stream);
    public static TargetDetectedAIEventData DeserializeLength(Stream stream, int length);
    public static TargetDetectedAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TargetDetectedAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TargetDetectedAIEventData Deserialize(Byte[] buffer, TargetDetectedAIEventData instance, bool isDelta);
    public static TargetDetectedAIEventData Deserialize(Stream stream, TargetDetectedAIEventData instance, bool isDelta);
    public static TargetDetectedAIEventData DeserializeLengthDelimited(Stream stream, TargetDetectedAIEventData instance, bool isDelta);
    public static TargetDetectedAIEventData DeserializeLength(Stream stream, int length, TargetDetectedAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TargetDetectedAIEventData instance, TargetDetectedAIEventData previous);
    public static void Serialize(Stream stream, TargetDetectedAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TargetDetectedAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, TargetDetectedAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Telephone : object {
    public int lastNumber;
    public int phoneNumber;
    public NetworkableId usingPlayer;
    public string phoneName;
    public PhoneDirectory savedNumbers;
    public List`1<VoicemailEntry> voicemail;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Telephone instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Telephone instance);
    public Telephone Copy();
    public static Telephone Deserialize(Stream stream);
    public static Telephone DeserializeLengthDelimited(Stream stream);
    public static Telephone DeserializeLength(Stream stream, int length);
    public static Telephone Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Telephone previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Telephone Deserialize(Byte[] buffer, Telephone instance, bool isDelta);
    public static Telephone Deserialize(Stream stream, Telephone instance, bool isDelta);
    public static Telephone DeserializeLengthDelimited(Stream stream, Telephone instance, bool isDelta);
    public static Telephone DeserializeLength(Stream stream, int length, Telephone instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Telephone instance, Telephone previous);
    public static void Serialize(Stream stream, Telephone instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Telephone instance);
    public static void SerializeLengthDelimited(Stream stream, Telephone instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ThreatDetectedAIEventData : object {
    public float range;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ThreatDetectedAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ThreatDetectedAIEventData instance);
    public ThreatDetectedAIEventData Copy();
    public static ThreatDetectedAIEventData Deserialize(Stream stream);
    public static ThreatDetectedAIEventData DeserializeLengthDelimited(Stream stream);
    public static ThreatDetectedAIEventData DeserializeLength(Stream stream, int length);
    public static ThreatDetectedAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ThreatDetectedAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ThreatDetectedAIEventData Deserialize(Byte[] buffer, ThreatDetectedAIEventData instance, bool isDelta);
    public static ThreatDetectedAIEventData Deserialize(Stream stream, ThreatDetectedAIEventData instance, bool isDelta);
    public static ThreatDetectedAIEventData DeserializeLengthDelimited(Stream stream, ThreatDetectedAIEventData instance, bool isDelta);
    public static ThreatDetectedAIEventData DeserializeLength(Stream stream, int length, ThreatDetectedAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ThreatDetectedAIEventData instance, ThreatDetectedAIEventData previous);
    public static void Serialize(Stream stream, ThreatDetectedAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ThreatDetectedAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, ThreatDetectedAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TimedExplosive : object {
    public NetworkableId parentid;
    public Vector3 pos;
    public Vector3 normal;
    public bool rfOn;
    public int freq;
    public ulong creatorID;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TimedExplosive instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TimedExplosive instance);
    public TimedExplosive Copy();
    public static TimedExplosive Deserialize(Stream stream);
    public static TimedExplosive DeserializeLengthDelimited(Stream stream);
    public static TimedExplosive DeserializeLength(Stream stream, int length);
    public static TimedExplosive Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TimedExplosive previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TimedExplosive Deserialize(Byte[] buffer, TimedExplosive instance, bool isDelta);
    public static TimedExplosive Deserialize(Stream stream, TimedExplosive instance, bool isDelta);
    public static TimedExplosive DeserializeLengthDelimited(Stream stream, TimedExplosive instance, bool isDelta);
    public static TimedExplosive DeserializeLength(Stream stream, int length, TimedExplosive instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TimedExplosive instance, TimedExplosive previous);
    public static void Serialize(Stream stream, TimedExplosive instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TimedExplosive instance);
    public static void SerializeLengthDelimited(Stream stream, TimedExplosive instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TimerAIEventData : object {
    public float duration;
    public float durationMax;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TimerAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TimerAIEventData instance);
    public TimerAIEventData Copy();
    public static TimerAIEventData Deserialize(Stream stream);
    public static TimerAIEventData DeserializeLengthDelimited(Stream stream);
    public static TimerAIEventData DeserializeLength(Stream stream, int length);
    public static TimerAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TimerAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TimerAIEventData Deserialize(Byte[] buffer, TimerAIEventData instance, bool isDelta);
    public static TimerAIEventData Deserialize(Stream stream, TimerAIEventData instance, bool isDelta);
    public static TimerAIEventData DeserializeLengthDelimited(Stream stream, TimerAIEventData instance, bool isDelta);
    public static TimerAIEventData DeserializeLength(Stream stream, int length, TimerAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TimerAIEventData instance, TimerAIEventData previous);
    public static void Serialize(Stream stream, TimerAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TimerAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, TimerAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TimeSinceThreatAIEventData : object {
    public float value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TimeSinceThreatAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TimeSinceThreatAIEventData instance);
    public TimeSinceThreatAIEventData Copy();
    public static TimeSinceThreatAIEventData Deserialize(Stream stream);
    public static TimeSinceThreatAIEventData DeserializeLengthDelimited(Stream stream);
    public static TimeSinceThreatAIEventData DeserializeLength(Stream stream, int length);
    public static TimeSinceThreatAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TimeSinceThreatAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TimeSinceThreatAIEventData Deserialize(Byte[] buffer, TimeSinceThreatAIEventData instance, bool isDelta);
    public static TimeSinceThreatAIEventData Deserialize(Stream stream, TimeSinceThreatAIEventData instance, bool isDelta);
    public static TimeSinceThreatAIEventData DeserializeLengthDelimited(Stream stream, TimeSinceThreatAIEventData instance, bool isDelta);
    public static TimeSinceThreatAIEventData DeserializeLength(Stream stream, int length, TimeSinceThreatAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TimeSinceThreatAIEventData instance, TimeSinceThreatAIEventData previous);
    public static void Serialize(Stream stream, TimeSinceThreatAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TimeSinceThreatAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, TimeSinceThreatAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TinCanAlarm : object {
    public Vector3 endPoint;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TinCanAlarm instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TinCanAlarm instance);
    public TinCanAlarm Copy();
    public static TinCanAlarm Deserialize(Stream stream);
    public static TinCanAlarm DeserializeLengthDelimited(Stream stream);
    public static TinCanAlarm DeserializeLength(Stream stream, int length);
    public static TinCanAlarm Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TinCanAlarm previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TinCanAlarm Deserialize(Byte[] buffer, TinCanAlarm instance, bool isDelta);
    public static TinCanAlarm Deserialize(Stream stream, TinCanAlarm instance, bool isDelta);
    public static TinCanAlarm DeserializeLengthDelimited(Stream stream, TinCanAlarm instance, bool isDelta);
    public static TinCanAlarm DeserializeLength(Stream stream, int length, TinCanAlarm instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TinCanAlarm instance, TinCanAlarm previous);
    public static void Serialize(Stream stream, TinCanAlarm instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TinCanAlarm instance);
    public static void SerializeLengthDelimited(Stream stream, TinCanAlarm instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TirednessAboveAIEventData : object {
    public float value;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TirednessAboveAIEventData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TirednessAboveAIEventData instance);
    public TirednessAboveAIEventData Copy();
    public static TirednessAboveAIEventData Deserialize(Stream stream);
    public static TirednessAboveAIEventData DeserializeLengthDelimited(Stream stream);
    public static TirednessAboveAIEventData DeserializeLength(Stream stream, int length);
    public static TirednessAboveAIEventData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TirednessAboveAIEventData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TirednessAboveAIEventData Deserialize(Byte[] buffer, TirednessAboveAIEventData instance, bool isDelta);
    public static TirednessAboveAIEventData Deserialize(Stream stream, TirednessAboveAIEventData instance, bool isDelta);
    public static TirednessAboveAIEventData DeserializeLengthDelimited(Stream stream, TirednessAboveAIEventData instance, bool isDelta);
    public static TirednessAboveAIEventData DeserializeLength(Stream stream, int length, TirednessAboveAIEventData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TirednessAboveAIEventData instance, TirednessAboveAIEventData previous);
    public static void Serialize(Stream stream, TirednessAboveAIEventData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TirednessAboveAIEventData instance);
    public static void SerializeLengthDelimited(Stream stream, TirednessAboveAIEventData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TrainEngine : object {
    public int throttleSetting;
    public NetworkableId fuelStorageID;
    public int fuelAmount;
    public int numConnectedCars;
    public int linedUpToUnload;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TrainEngine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TrainEngine instance);
    public TrainEngine Copy();
    public static TrainEngine Deserialize(Stream stream);
    public static TrainEngine DeserializeLengthDelimited(Stream stream);
    public static TrainEngine DeserializeLength(Stream stream, int length);
    public static TrainEngine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TrainEngine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TrainEngine Deserialize(Byte[] buffer, TrainEngine instance, bool isDelta);
    public static TrainEngine Deserialize(Stream stream, TrainEngine instance, bool isDelta);
    public static TrainEngine DeserializeLengthDelimited(Stream stream, TrainEngine instance, bool isDelta);
    public static TrainEngine DeserializeLength(Stream stream, int length, TrainEngine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TrainEngine instance, TrainEngine previous);
    public static void Serialize(Stream stream, TrainEngine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TrainEngine instance);
    public static void SerializeLengthDelimited(Stream stream, TrainEngine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TravellingVendor : object {
    public float steeringAngle;
    public Vector3 velocity;
    public int wheelFlags;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TravellingVendor instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TravellingVendor instance);
    public TravellingVendor Copy();
    public static TravellingVendor Deserialize(Stream stream);
    public static TravellingVendor DeserializeLengthDelimited(Stream stream);
    public static TravellingVendor DeserializeLength(Stream stream, int length);
    public static TravellingVendor Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TravellingVendor previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TravellingVendor Deserialize(Byte[] buffer, TravellingVendor instance, bool isDelta);
    public static TravellingVendor Deserialize(Stream stream, TravellingVendor instance, bool isDelta);
    public static TravellingVendor DeserializeLengthDelimited(Stream stream, TravellingVendor instance, bool isDelta);
    public static TravellingVendor DeserializeLength(Stream stream, int length, TravellingVendor instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TravellingVendor instance, TravellingVendor previous);
    public static void Serialize(Stream stream, TravellingVendor instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TravellingVendor instance);
    public static void SerializeLengthDelimited(Stream stream, TravellingVendor instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Tree : object {
    public NetworkableId netId;
    public UInt32 prefabId;
    public Half3 position;
    public float scale;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Tree instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Tree instance);
    public Tree Copy();
    public static Tree Deserialize(Stream stream);
    public static Tree DeserializeLengthDelimited(Stream stream);
    public static Tree DeserializeLength(Stream stream, int length);
    public static Tree Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Tree previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Tree Deserialize(Byte[] buffer, Tree instance, bool isDelta);
    public static Tree Deserialize(Stream stream, Tree instance, bool isDelta);
    public static Tree DeserializeLengthDelimited(Stream stream, Tree instance, bool isDelta);
    public static Tree DeserializeLength(Stream stream, int length, Tree instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Tree instance, Tree previous);
    public static void Serialize(Stream stream, Tree instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Tree instance);
    public static void SerializeLengthDelimited(Stream stream, Tree instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TreeList : object {
    public List`1<Tree> trees;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TreeList instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TreeList instance);
    public TreeList Copy();
    public static TreeList Deserialize(Stream stream);
    public static TreeList DeserializeLengthDelimited(Stream stream);
    public static TreeList DeserializeLength(Stream stream, int length);
    public static TreeList Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TreeList previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TreeList Deserialize(Byte[] buffer, TreeList instance, bool isDelta);
    public static TreeList Deserialize(Stream stream, TreeList instance, bool isDelta);
    public static TreeList DeserializeLengthDelimited(Stream stream, TreeList instance, bool isDelta);
    public static TreeList DeserializeLength(Stream stream, int length, TreeList instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TreeList instance, TreeList previous);
    public static void Serialize(Stream stream, TreeList instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TreeList instance);
    public static void SerializeLengthDelimited(Stream stream, TreeList instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.TutorialIsland : object {
    public NetworkableId targetPlayer;
    public float disconnectDuration;
    public int spawnLocationIndex;
    public float tutorialDuration;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(TutorialIsland instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(TutorialIsland instance);
    public TutorialIsland Copy();
    public static TutorialIsland Deserialize(Stream stream);
    public static TutorialIsland DeserializeLengthDelimited(Stream stream);
    public static TutorialIsland DeserializeLength(Stream stream, int length);
    public static TutorialIsland Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, TutorialIsland previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static TutorialIsland Deserialize(Byte[] buffer, TutorialIsland instance, bool isDelta);
    public static TutorialIsland Deserialize(Stream stream, TutorialIsland instance, bool isDelta);
    public static TutorialIsland DeserializeLengthDelimited(Stream stream, TutorialIsland instance, bool isDelta);
    public static TutorialIsland DeserializeLength(Stream stream, int length, TutorialIsland instance, bool isDelta);
    public static void SerializeDelta(Stream stream, TutorialIsland instance, TutorialIsland previous);
    public static void Serialize(Stream stream, TutorialIsland instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(TutorialIsland instance);
    public static void SerializeLengthDelimited(Stream stream, TutorialIsland instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.UpdateItem : object {
    public Item item;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(UpdateItem instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(UpdateItem instance);
    public UpdateItem Copy();
    public static UpdateItem Deserialize(Stream stream);
    public static UpdateItem DeserializeLengthDelimited(Stream stream);
    public static UpdateItem DeserializeLength(Stream stream, int length);
    public static UpdateItem Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, UpdateItem previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static UpdateItem Deserialize(Byte[] buffer, UpdateItem instance, bool isDelta);
    public static UpdateItem Deserialize(Stream stream, UpdateItem instance, bool isDelta);
    public static UpdateItem DeserializeLengthDelimited(Stream stream, UpdateItem instance, bool isDelta);
    public static UpdateItem DeserializeLength(Stream stream, int length, UpdateItem instance, bool isDelta);
    public static void SerializeDelta(Stream stream, UpdateItem instance, UpdateItem previous);
    public static void Serialize(Stream stream, UpdateItem instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(UpdateItem instance);
    public static void SerializeLengthDelimited(Stream stream, UpdateItem instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.UpdateItemContainer : object {
    public int type;
    public List`1<ItemContainer> container;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(UpdateItemContainer instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(UpdateItemContainer instance);
    public UpdateItemContainer Copy();
    public static UpdateItemContainer Deserialize(Stream stream);
    public static UpdateItemContainer DeserializeLengthDelimited(Stream stream);
    public static UpdateItemContainer DeserializeLength(Stream stream, int length);
    public static UpdateItemContainer Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, UpdateItemContainer previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static UpdateItemContainer Deserialize(Byte[] buffer, UpdateItemContainer instance, bool isDelta);
    public static UpdateItemContainer Deserialize(Stream stream, UpdateItemContainer instance, bool isDelta);
    public static UpdateItemContainer DeserializeLengthDelimited(Stream stream, UpdateItemContainer instance, bool isDelta);
    public static UpdateItemContainer DeserializeLength(Stream stream, int length, UpdateItemContainer instance, bool isDelta);
    public static void SerializeDelta(Stream stream, UpdateItemContainer instance, UpdateItemContainer previous);
    public static void Serialize(Stream stream, UpdateItemContainer instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(UpdateItemContainer instance);
    public static void SerializeLengthDelimited(Stream stream, UpdateItemContainer instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.VectorData : ValueType {
    public float x;
    public float y;
    public float z;
    public VectorData(float x, float y, float z);
    public static void ResetToPool(VectorData instance);
    public void CopyTo(VectorData instance);
    public VectorData Copy();
    public static VectorData Deserialize(Stream stream);
    public static VectorData DeserializeLengthDelimited(Stream stream);
    public static VectorData DeserializeLength(Stream stream, int length);
    public static VectorData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public sealed virtual void WriteToStream(Stream stream);
    public void WriteToStreamDelta(Stream stream, VectorData previous);
    public sealed virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static VectorData Deserialize(Byte[] buffer, VectorData& instance, bool isDelta);
    public static VectorData Deserialize(Stream stream, VectorData& instance, bool isDelta);
    public static VectorData DeserializeLengthDelimited(Stream stream, VectorData& instance, bool isDelta);
    public static VectorData DeserializeLength(Stream stream, int length, VectorData& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, VectorData instance, VectorData previous);
    public static void Serialize(Stream stream, VectorData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(VectorData instance);
    public static void SerializeLengthDelimited(Stream stream, VectorData instance);
    public void InspectUids(UidInspector`1<ulong> action);
    public static VectorData op_Implicit(Vector3 v);
    public static VectorData op_Implicit(Quaternion q);
    public static Vector3 op_Implicit(VectorData v);
    public static Quaternion op_Implicit(VectorData v);
}
public class ProtoBuf.VectorList : object {
    public List`1<Vector3> vectorPoints;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(VectorList instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(VectorList instance);
    public VectorList Copy();
    public static VectorList Deserialize(Stream stream);
    public static VectorList DeserializeLengthDelimited(Stream stream);
    public static VectorList DeserializeLength(Stream stream, int length);
    public static VectorList Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, VectorList previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static VectorList Deserialize(Byte[] buffer, VectorList instance, bool isDelta);
    public static VectorList Deserialize(Stream stream, VectorList instance, bool isDelta);
    public static VectorList DeserializeLengthDelimited(Stream stream, VectorList instance, bool isDelta);
    public static VectorList DeserializeLength(Stream stream, int length, VectorList instance, bool isDelta);
    public static void SerializeDelta(Stream stream, VectorList instance, VectorList previous);
    public static void Serialize(Stream stream, VectorList instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(VectorList instance);
    public static void SerializeLengthDelimited(Stream stream, VectorList instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.VehicleLift : object {
    public bool platformIsOccupied;
    public bool editableOccupant;
    public bool driveableOccupant;
    public int occupantLockState;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(VehicleLift instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(VehicleLift instance);
    public VehicleLift Copy();
    public static VehicleLift Deserialize(Stream stream);
    public static VehicleLift DeserializeLengthDelimited(Stream stream);
    public static VehicleLift DeserializeLength(Stream stream, int length);
    public static VehicleLift Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, VehicleLift previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static VehicleLift Deserialize(Byte[] buffer, VehicleLift instance, bool isDelta);
    public static VehicleLift Deserialize(Stream stream, VehicleLift instance, bool isDelta);
    public static VehicleLift DeserializeLengthDelimited(Stream stream, VehicleLift instance, bool isDelta);
    public static VehicleLift DeserializeLength(Stream stream, int length, VehicleLift instance, bool isDelta);
    public static void SerializeDelta(Stream stream, VehicleLift instance, VehicleLift previous);
    public static void Serialize(Stream stream, VehicleLift instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(VehicleLift instance);
    public static void SerializeLengthDelimited(Stream stream, VehicleLift instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.VehicleModule : object {
    public int socketIndex;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(VehicleModule instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(VehicleModule instance);
    public VehicleModule Copy();
    public static VehicleModule Deserialize(Stream stream);
    public static VehicleModule DeserializeLengthDelimited(Stream stream);
    public static VehicleModule DeserializeLength(Stream stream, int length);
    public static VehicleModule Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, VehicleModule previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static VehicleModule Deserialize(Byte[] buffer, VehicleModule instance, bool isDelta);
    public static VehicleModule Deserialize(Stream stream, VehicleModule instance, bool isDelta);
    public static VehicleModule DeserializeLengthDelimited(Stream stream, VehicleModule instance, bool isDelta);
    public static VehicleModule DeserializeLength(Stream stream, int length, VehicleModule instance, bool isDelta);
    public static void SerializeDelta(Stream stream, VehicleModule instance, VehicleModule previous);
    public static void Serialize(Stream stream, VehicleModule instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(VehicleModule instance);
    public static void SerializeLengthDelimited(Stream stream, VehicleModule instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.VehicleVendor : object {
    public List`1<PlayerStorage> playerStorage;
    public NetworkableId spawnerRef;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(VehicleVendor instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(VehicleVendor instance);
    public VehicleVendor Copy();
    public static VehicleVendor Deserialize(Stream stream);
    public static VehicleVendor DeserializeLengthDelimited(Stream stream);
    public static VehicleVendor DeserializeLength(Stream stream, int length);
    public static VehicleVendor Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, VehicleVendor previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static VehicleVendor Deserialize(Byte[] buffer, VehicleVendor instance, bool isDelta);
    public static VehicleVendor Deserialize(Stream stream, VehicleVendor instance, bool isDelta);
    public static VehicleVendor DeserializeLengthDelimited(Stream stream, VehicleVendor instance, bool isDelta);
    public static VehicleVendor DeserializeLength(Stream stream, int length, VehicleVendor instance, bool isDelta);
    public static void SerializeDelta(Stream stream, VehicleVendor instance, VehicleVendor previous);
    public static void Serialize(Stream stream, VehicleVendor instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(VehicleVendor instance);
    public static void SerializeLengthDelimited(Stream stream, VehicleVendor instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.VendingDynamicPricing : object {
    public List`1<SalesData> allSalesData;
    public float timeToNextSalesUpdate;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(VendingDynamicPricing instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(VendingDynamicPricing instance);
    public VendingDynamicPricing Copy();
    public static VendingDynamicPricing Deserialize(Stream stream);
    public static VendingDynamicPricing DeserializeLengthDelimited(Stream stream);
    public static VendingDynamicPricing DeserializeLength(Stream stream, int length);
    public static VendingDynamicPricing Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, VendingDynamicPricing previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static VendingDynamicPricing Deserialize(Byte[] buffer, VendingDynamicPricing instance, bool isDelta);
    public static VendingDynamicPricing Deserialize(Stream stream, VendingDynamicPricing instance, bool isDelta);
    public static VendingDynamicPricing DeserializeLengthDelimited(Stream stream, VendingDynamicPricing instance, bool isDelta);
    public static VendingDynamicPricing DeserializeLength(Stream stream, int length, VendingDynamicPricing instance, bool isDelta);
    public static void SerializeDelta(Stream stream, VendingDynamicPricing instance, VendingDynamicPricing previous);
    public static void Serialize(Stream stream, VendingDynamicPricing instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(VendingDynamicPricing instance);
    public static void SerializeLengthDelimited(Stream stream, VendingDynamicPricing instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.VendingMachine : object {
    public SellOrderContainer sellOrderContainer;
    public string shopName;
    public int vmoIndex;
    public NetworkableId networkID;
    public string translationToken;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(VendingMachine instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(VendingMachine instance);
    public VendingMachine Copy();
    public static VendingMachine Deserialize(Stream stream);
    public static VendingMachine DeserializeLengthDelimited(Stream stream);
    public static VendingMachine DeserializeLength(Stream stream, int length);
    public static VendingMachine Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, VendingMachine previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static VendingMachine Deserialize(Byte[] buffer, VendingMachine instance, bool isDelta);
    public static VendingMachine Deserialize(Stream stream, VendingMachine instance, bool isDelta);
    public static VendingMachine DeserializeLengthDelimited(Stream stream, VendingMachine instance, bool isDelta);
    public static VendingMachine DeserializeLength(Stream stream, int length, VendingMachine instance, bool isDelta);
    public static void SerializeDelta(Stream stream, VendingMachine instance, VendingMachine previous);
    public static void Serialize(Stream stream, VendingMachine instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(VendingMachine instance);
    public static void SerializeLengthDelimited(Stream stream, VendingMachine instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.VoicemailEntry : object {
    public UInt32 audioId;
    public string userName;
    public long timestamp;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(VoicemailEntry instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(VoicemailEntry instance);
    public VoicemailEntry Copy();
    public static VoicemailEntry Deserialize(Stream stream);
    public static VoicemailEntry DeserializeLengthDelimited(Stream stream);
    public static VoicemailEntry DeserializeLength(Stream stream, int length);
    public static VoicemailEntry Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, VoicemailEntry previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static VoicemailEntry Deserialize(Byte[] buffer, VoicemailEntry instance, bool isDelta);
    public static VoicemailEntry Deserialize(Stream stream, VoicemailEntry instance, bool isDelta);
    public static VoicemailEntry DeserializeLengthDelimited(Stream stream, VoicemailEntry instance, bool isDelta);
    public static VoicemailEntry DeserializeLength(Stream stream, int length, VoicemailEntry instance, bool isDelta);
    public static void SerializeDelta(Stream stream, VoicemailEntry instance, VoicemailEntry previous);
    public static void Serialize(Stream stream, VoicemailEntry instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(VoicemailEntry instance);
    public static void SerializeLengthDelimited(Stream stream, VoicemailEntry instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WantedPoster : object {
    public UInt32 imageCrc;
    public string playerName;
    public ulong playerId;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WantedPoster instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WantedPoster instance);
    public WantedPoster Copy();
    public static WantedPoster Deserialize(Stream stream);
    public static WantedPoster DeserializeLengthDelimited(Stream stream);
    public static WantedPoster DeserializeLength(Stream stream, int length);
    public static WantedPoster Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WantedPoster previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WantedPoster Deserialize(Byte[] buffer, WantedPoster instance, bool isDelta);
    public static WantedPoster Deserialize(Stream stream, WantedPoster instance, bool isDelta);
    public static WantedPoster DeserializeLengthDelimited(Stream stream, WantedPoster instance, bool isDelta);
    public static WantedPoster DeserializeLength(Stream stream, int length, WantedPoster instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WantedPoster instance, WantedPoster previous);
    public static void Serialize(Stream stream, WantedPoster instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WantedPoster instance);
    public static void SerializeLengthDelimited(Stream stream, WantedPoster instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WaterPool : object {
    public float fillAmount;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WaterPool instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WaterPool instance);
    public WaterPool Copy();
    public static WaterPool Deserialize(Stream stream);
    public static WaterPool DeserializeLengthDelimited(Stream stream);
    public static WaterPool DeserializeLength(Stream stream, int length);
    public static WaterPool Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WaterPool previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WaterPool Deserialize(Byte[] buffer, WaterPool instance, bool isDelta);
    public static WaterPool Deserialize(Stream stream, WaterPool instance, bool isDelta);
    public static WaterPool DeserializeLengthDelimited(Stream stream, WaterPool instance, bool isDelta);
    public static WaterPool DeserializeLength(Stream stream, int length, WaterPool instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WaterPool instance, WaterPool previous);
    public static void Serialize(Stream stream, WaterPool instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WaterPool instance);
    public static void SerializeLengthDelimited(Stream stream, WaterPool instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WaterWell : object {
    public float pressure;
    public float waterLevel;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WaterWell instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WaterWell instance);
    public WaterWell Copy();
    public static WaterWell Deserialize(Stream stream);
    public static WaterWell DeserializeLengthDelimited(Stream stream);
    public static WaterWell DeserializeLength(Stream stream, int length);
    public static WaterWell Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WaterWell previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WaterWell Deserialize(Byte[] buffer, WaterWell instance, bool isDelta);
    public static WaterWell Deserialize(Stream stream, WaterWell instance, bool isDelta);
    public static WaterWell DeserializeLengthDelimited(Stream stream, WaterWell instance, bool isDelta);
    public static WaterWell DeserializeLength(Stream stream, int length, WaterWell instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WaterWell instance, WaterWell previous);
    public static void Serialize(Stream stream, WaterWell instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WaterWell instance);
    public static void SerializeLengthDelimited(Stream stream, WaterWell instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WaypointRace : object {
    public List`1<Vector3> positions;
    public NetworkableId racingVehicle;
    public int currentWaypoint;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WaypointRace instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WaypointRace instance);
    public WaypointRace Copy();
    public static WaypointRace Deserialize(Stream stream);
    public static WaypointRace DeserializeLengthDelimited(Stream stream);
    public static WaypointRace DeserializeLength(Stream stream, int length);
    public static WaypointRace Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WaypointRace previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WaypointRace Deserialize(Byte[] buffer, WaypointRace instance, bool isDelta);
    public static WaypointRace Deserialize(Stream stream, WaypointRace instance, bool isDelta);
    public static WaypointRace DeserializeLengthDelimited(Stream stream, WaypointRace instance, bool isDelta);
    public static WaypointRace DeserializeLength(Stream stream, int length, WaypointRace instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WaypointRace instance, WaypointRace previous);
    public static void Serialize(Stream stream, WaypointRace instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WaypointRace instance);
    public static void SerializeLengthDelimited(Stream stream, WaypointRace instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WeaponRack : object {
    public List`1<WeaponRackItem> items;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WeaponRack instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WeaponRack instance);
    public WeaponRack Copy();
    public static WeaponRack Deserialize(Stream stream);
    public static WeaponRack DeserializeLengthDelimited(Stream stream);
    public static WeaponRack DeserializeLength(Stream stream, int length);
    public static WeaponRack Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WeaponRack previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WeaponRack Deserialize(Byte[] buffer, WeaponRack instance, bool isDelta);
    public static WeaponRack Deserialize(Stream stream, WeaponRack instance, bool isDelta);
    public static WeaponRack DeserializeLengthDelimited(Stream stream, WeaponRack instance, bool isDelta);
    public static WeaponRack DeserializeLength(Stream stream, int length, WeaponRack instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WeaponRack instance, WeaponRack previous);
    public static void Serialize(Stream stream, WeaponRack instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WeaponRack instance);
    public static void SerializeLengthDelimited(Stream stream, WeaponRack instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WeaponRackItem : object {
    public int itemID;
    public ulong skinid;
    public int gridSlotIndex;
    public int inventorySlot;
    public int ammoCount;
    public int ammoMax;
    public int ammoID;
    public float condition;
    public int rotation;
    public int ammoTypes;
    public float reloadTime;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WeaponRackItem instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WeaponRackItem instance);
    public WeaponRackItem Copy();
    public static WeaponRackItem Deserialize(Stream stream);
    public static WeaponRackItem DeserializeLengthDelimited(Stream stream);
    public static WeaponRackItem DeserializeLength(Stream stream, int length);
    public static WeaponRackItem Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WeaponRackItem previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WeaponRackItem Deserialize(Byte[] buffer, WeaponRackItem instance, bool isDelta);
    public static WeaponRackItem Deserialize(Stream stream, WeaponRackItem instance, bool isDelta);
    public static WeaponRackItem DeserializeLengthDelimited(Stream stream, WeaponRackItem instance, bool isDelta);
    public static WeaponRackItem DeserializeLength(Stream stream, int length, WeaponRackItem instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WeaponRackItem instance, WeaponRackItem previous);
    public static void Serialize(Stream stream, WeaponRackItem instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WeaponRackItem instance);
    public static void SerializeLengthDelimited(Stream stream, WeaponRackItem instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Whitelist : object {
    public List`1<ulong> users;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Whitelist instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Whitelist instance);
    public Whitelist Copy();
    public static Whitelist Deserialize(Stream stream);
    public static Whitelist DeserializeLengthDelimited(Stream stream);
    public static Whitelist DeserializeLength(Stream stream, int length);
    public static Whitelist Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Whitelist previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Whitelist Deserialize(Byte[] buffer, Whitelist instance, bool isDelta);
    public static Whitelist Deserialize(Stream stream, Whitelist instance, bool isDelta);
    public static Whitelist DeserializeLengthDelimited(Stream stream, Whitelist instance, bool isDelta);
    public static Whitelist DeserializeLength(Stream stream, int length, Whitelist instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Whitelist instance, Whitelist previous);
    public static void Serialize(Stream stream, Whitelist instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Whitelist instance);
    public static void SerializeLengthDelimited(Stream stream, Whitelist instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WireConnectionMessage : object {
    public List`1<Vector3> linePoints;
    public List`1<WireLineAnchorInfo> lineAnchors;
    public NetworkableId inputID;
    public int inputIndex;
    public NetworkableId outputID;
    public int outputIndex;
    public int wireColor;
    public List`1<float> slackLevels;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WireConnectionMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WireConnectionMessage instance);
    public WireConnectionMessage Copy();
    public static WireConnectionMessage Deserialize(Stream stream);
    public static WireConnectionMessage DeserializeLengthDelimited(Stream stream);
    public static WireConnectionMessage DeserializeLength(Stream stream, int length);
    public static WireConnectionMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WireConnectionMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WireConnectionMessage Deserialize(Byte[] buffer, WireConnectionMessage instance, bool isDelta);
    public static WireConnectionMessage Deserialize(Stream stream, WireConnectionMessage instance, bool isDelta);
    public static WireConnectionMessage DeserializeLengthDelimited(Stream stream, WireConnectionMessage instance, bool isDelta);
    public static WireConnectionMessage DeserializeLength(Stream stream, int length, WireConnectionMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WireConnectionMessage instance, WireConnectionMessage previous);
    public static void Serialize(Stream stream, WireConnectionMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WireConnectionMessage instance);
    public static void SerializeLengthDelimited(Stream stream, WireConnectionMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WireLineAnchorInfo : object {
    public NetworkableId parentID;
    public string boneName;
    public long index;
    public Vector3 position;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WireLineAnchorInfo instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WireLineAnchorInfo instance);
    public WireLineAnchorInfo Copy();
    public static WireLineAnchorInfo Deserialize(Stream stream);
    public static WireLineAnchorInfo DeserializeLengthDelimited(Stream stream);
    public static WireLineAnchorInfo DeserializeLength(Stream stream, int length);
    public static WireLineAnchorInfo Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WireLineAnchorInfo previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WireLineAnchorInfo Deserialize(Byte[] buffer, WireLineAnchorInfo instance, bool isDelta);
    public static WireLineAnchorInfo Deserialize(Stream stream, WireLineAnchorInfo instance, bool isDelta);
    public static WireLineAnchorInfo DeserializeLengthDelimited(Stream stream, WireLineAnchorInfo instance, bool isDelta);
    public static WireLineAnchorInfo DeserializeLength(Stream stream, int length, WireLineAnchorInfo instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WireLineAnchorInfo instance, WireLineAnchorInfo previous);
    public static void Serialize(Stream stream, WireLineAnchorInfo instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WireLineAnchorInfo instance);
    public static void SerializeLengthDelimited(Stream stream, WireLineAnchorInfo instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WireReconnectMessage : object {
    public NetworkableId entityId;
    public int slotIndex;
    public bool isInput;
    public List`1<Vector3> linePoints;
    public int wireColor;
    public List`1<WireLineAnchorInfo> lineAnchors;
    public List`1<float> slackLevels;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WireReconnectMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WireReconnectMessage instance);
    public WireReconnectMessage Copy();
    public static WireReconnectMessage Deserialize(Stream stream);
    public static WireReconnectMessage DeserializeLengthDelimited(Stream stream);
    public static WireReconnectMessage DeserializeLength(Stream stream, int length);
    public static WireReconnectMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WireReconnectMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WireReconnectMessage Deserialize(Byte[] buffer, WireReconnectMessage instance, bool isDelta);
    public static WireReconnectMessage Deserialize(Stream stream, WireReconnectMessage instance, bool isDelta);
    public static WireReconnectMessage DeserializeLengthDelimited(Stream stream, WireReconnectMessage instance, bool isDelta);
    public static WireReconnectMessage DeserializeLength(Stream stream, int length, WireReconnectMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WireReconnectMessage instance, WireReconnectMessage previous);
    public static void Serialize(Stream stream, WireReconnectMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WireReconnectMessage instance);
    public static void SerializeLengthDelimited(Stream stream, WireReconnectMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WorldData : object {
    public UInt32 size;
    public List`1<MapData> maps;
    public List`1<PrefabData> prefabs;
    public List`1<PathData> paths;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WorldData instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WorldData instance);
    public WorldData Copy();
    public static WorldData Deserialize(Stream stream);
    public static WorldData DeserializeLengthDelimited(Stream stream);
    public static WorldData DeserializeLength(Stream stream, int length);
    public static WorldData Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WorldData previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WorldData Deserialize(Byte[] buffer, WorldData instance, bool isDelta);
    public static WorldData Deserialize(Stream stream, WorldData instance, bool isDelta);
    public static WorldData DeserializeLengthDelimited(Stream stream, WorldData instance, bool isDelta);
    public static WorldData DeserializeLength(Stream stream, int length, WorldData instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WorldData instance, WorldData previous);
    public static void Serialize(Stream stream, WorldData instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WorldData instance);
    public static void SerializeLengthDelimited(Stream stream, WorldData instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WorldItem : object {
    public Item item;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WorldItem instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WorldItem instance);
    public WorldItem Copy();
    public static WorldItem Deserialize(Stream stream);
    public static WorldItem DeserializeLengthDelimited(Stream stream);
    public static WorldItem DeserializeLength(Stream stream, int length);
    public static WorldItem Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WorldItem previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WorldItem Deserialize(Byte[] buffer, WorldItem instance, bool isDelta);
    public static WorldItem Deserialize(Stream stream, WorldItem instance, bool isDelta);
    public static WorldItem DeserializeLengthDelimited(Stream stream, WorldItem instance, bool isDelta);
    public static WorldItem DeserializeLength(Stream stream, int length, WorldItem instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WorldItem instance, WorldItem previous);
    public static void Serialize(Stream stream, WorldItem instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WorldItem instance);
    public static void SerializeLengthDelimited(Stream stream, WorldItem instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.WorldMessage : object {
    public MessageType status;
    public List`1<PrefabData> prefabs;
    public List`1<PathData> paths;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(WorldMessage instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(WorldMessage instance);
    public WorldMessage Copy();
    public static WorldMessage Deserialize(Stream stream);
    public static WorldMessage DeserializeLengthDelimited(Stream stream);
    public static WorldMessage DeserializeLength(Stream stream, int length);
    public static WorldMessage Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, WorldMessage previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static WorldMessage Deserialize(Byte[] buffer, WorldMessage instance, bool isDelta);
    public static WorldMessage Deserialize(Stream stream, WorldMessage instance, bool isDelta);
    public static WorldMessage DeserializeLengthDelimited(Stream stream, WorldMessage instance, bool isDelta);
    public static WorldMessage DeserializeLength(Stream stream, int length, WorldMessage instance, bool isDelta);
    public static void SerializeDelta(Stream stream, WorldMessage instance, WorldMessage previous);
    public static void Serialize(Stream stream, WorldMessage instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(WorldMessage instance);
    public static void SerializeLengthDelimited(Stream stream, WorldMessage instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.Zipline : object {
    public List`1<VectorData> destinationPoints;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(Zipline instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(Zipline instance);
    public Zipline Copy();
    public static Zipline Deserialize(Stream stream);
    public static Zipline DeserializeLengthDelimited(Stream stream);
    public static Zipline DeserializeLength(Stream stream, int length);
    public static Zipline Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, Zipline previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static Zipline Deserialize(Byte[] buffer, Zipline instance, bool isDelta);
    public static Zipline Deserialize(Stream stream, Zipline instance, bool isDelta);
    public static Zipline DeserializeLengthDelimited(Stream stream, Zipline instance, bool isDelta);
    public static Zipline DeserializeLength(Stream stream, int length, Zipline instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Zipline instance, Zipline previous);
    public static void Serialize(Stream stream, Zipline instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(Zipline instance);
    public static void SerializeLengthDelimited(Stream stream, Zipline instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ZiplineArrivalPoint : object {
    public List`1<VectorData> linePoints;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ZiplineArrivalPoint instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ZiplineArrivalPoint instance);
    public ZiplineArrivalPoint Copy();
    public static ZiplineArrivalPoint Deserialize(Stream stream);
    public static ZiplineArrivalPoint DeserializeLengthDelimited(Stream stream);
    public static ZiplineArrivalPoint DeserializeLength(Stream stream, int length);
    public static ZiplineArrivalPoint Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ZiplineArrivalPoint previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ZiplineArrivalPoint Deserialize(Byte[] buffer, ZiplineArrivalPoint instance, bool isDelta);
    public static ZiplineArrivalPoint Deserialize(Stream stream, ZiplineArrivalPoint instance, bool isDelta);
    public static ZiplineArrivalPoint DeserializeLengthDelimited(Stream stream, ZiplineArrivalPoint instance, bool isDelta);
    public static ZiplineArrivalPoint DeserializeLength(Stream stream, int length, ZiplineArrivalPoint instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ZiplineArrivalPoint instance, ZiplineArrivalPoint previous);
    public static void Serialize(Stream stream, ZiplineArrivalPoint instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ZiplineArrivalPoint instance);
    public static void SerializeLengthDelimited(Stream stream, ZiplineArrivalPoint instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class ProtoBuf.ZiplineMountable : object {
    public List`1<VectorData> linePoints;
    public bool ShouldPool;
    private bool _disposed;
    public static void ResetToPool(ZiplineMountable instance);
    public void ResetToPool();
    public virtual void Dispose();
    public virtual void EnterPool();
    public virtual void LeavePool();
    public void CopyTo(ZiplineMountable instance);
    public ZiplineMountable Copy();
    public static ZiplineMountable Deserialize(Stream stream);
    public static ZiplineMountable DeserializeLengthDelimited(Stream stream);
    public static ZiplineMountable DeserializeLength(Stream stream, int length);
    public static ZiplineMountable Deserialize(Byte[] buffer);
    public void FromProto(Stream stream, bool isDelta);
    public virtual void WriteToStream(Stream stream);
    public virtual void WriteToStreamDelta(Stream stream, ZiplineMountable previous);
    public virtual void ReadFromStream(Stream stream, int size, bool isDelta);
    public static ZiplineMountable Deserialize(Byte[] buffer, ZiplineMountable instance, bool isDelta);
    public static ZiplineMountable Deserialize(Stream stream, ZiplineMountable instance, bool isDelta);
    public static ZiplineMountable DeserializeLengthDelimited(Stream stream, ZiplineMountable instance, bool isDelta);
    public static ZiplineMountable DeserializeLength(Stream stream, int length, ZiplineMountable instance, bool isDelta);
    public static void SerializeDelta(Stream stream, ZiplineMountable instance, ZiplineMountable previous);
    public static void Serialize(Stream stream, ZiplineMountable instance);
    public Byte[] ToProtoBytes();
    public void ToProto(Stream stream);
    public static Byte[] SerializeToBytes(ZiplineMountable instance);
    public static void SerializeLengthDelimited(Stream stream, ZiplineMountable instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public interface SilentOrbit.ProtocolBuffers.IProto {
    public abstract virtual void WriteToStream(Stream stream);
    public abstract virtual void ReadFromStream(Stream stream, int size, bool isDelta);
}
public class SilentOrbit.ProtocolBuffers.Key : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private Wire <WireType>k__BackingField;
    public UInt32 Field { get; public set; }
    public Wire WireType { get; public set; }
    public Key(UInt32 field, Wire wireType);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Wire get_WireType();
    [CompilerGeneratedAttribute]
public void set_WireType(Wire value);
    public virtual string ToString();
}
public class SilentOrbit.ProtocolBuffers.KeyValue : object {
    [CompilerGeneratedAttribute]
private Key <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Key Key { get; public set; }
    public Byte[] Value { get; public set; }
    public KeyValue(Key key, Byte[] value);
    [CompilerGeneratedAttribute]
public Key get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Key value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Byte[] value);
    public virtual string ToString();
}
public class SilentOrbit.ProtocolBuffers.ProtocolBufferException : Exception {
    public ProtocolBufferException(string message);
}
public static class SilentOrbit.ProtocolBuffers.ProtocolParser : object {
    [ThreadStaticAttribute]
private static Byte[] staticBuffer;
    private static ProtocolParser();
    public static float ReadSingle(Stream stream);
    public static void WriteSingle(Stream stream, float f);
    public static double ReadDouble(Stream stream);
    public static void WriteDouble(Stream stream, double f);
    public static string ReadString(Stream stream);
    public static void WriteString(Stream stream, string val);
    public static Byte[] ReadBytes(Stream stream);
    public static ArraySegment`1<byte> ReadPooledBytes(Stream stream);
    private static void ReadBytesInto(Stream stream, Byte[] buffer, int length);
    public static void SkipBytes(Stream stream);
    public static void WriteBytes(Stream stream, Byte[] val);
    public static void WritePooledBytes(Stream stream, ArraySegment`1<byte> segment);
    [ObsoleteAttribute("Only for reference")]
public static ulong ReadFixed64(BinaryReader reader);
    [ObsoleteAttribute("Only for reference")]
public static long ReadSFixed64(BinaryReader reader);
    [ObsoleteAttribute("Only for reference")]
public static UInt32 ReadFixed32(BinaryReader reader);
    [ObsoleteAttribute("Only for reference")]
public static int ReadSFixed32(BinaryReader reader);
    [ObsoleteAttribute("Only for reference")]
public static void WriteFixed64(BinaryWriter writer, ulong val);
    [ObsoleteAttribute("Only for reference")]
public static void WriteSFixed64(BinaryWriter writer, long val);
    [ObsoleteAttribute("Only for reference")]
public static void WriteFixed32(BinaryWriter writer, UInt32 val);
    [ObsoleteAttribute("Only for reference")]
public static void WriteSFixed32(BinaryWriter writer, int val);
    [ObsoleteAttribute("Only for reference")]
public static float ReadFloat(BinaryReader reader);
    [ObsoleteAttribute("Only for reference")]
public static double ReadDouble(BinaryReader reader);
    [ObsoleteAttribute("Only for reference")]
public static void WriteFloat(BinaryWriter writer, float val);
    [ObsoleteAttribute("Only for reference")]
public static void WriteDouble(BinaryWriter writer, double val);
    public static Key ReadKey(Stream stream);
    public static Key ReadKey(byte firstByte, Stream stream);
    public static void WriteKey(Stream stream, Key key);
    public static void SkipKey(Stream stream, Key key);
    public static Byte[] ReadValueBytes(Stream stream, Key key);
    public static void ReadSkipVarInt(Stream stream);
    public static Byte[] ReadVarIntBytes(Stream stream);
    public static UInt32 ReadUInt32(Byte[] array, int pos, Int32& length);
    public static int WriteUInt32(UInt32 val, Byte[] array, int pos);
    [ObsoleteAttribute("Use (int)ReadUInt64(stream); //yes 64")]
public static int ReadInt32(Stream stream);
    [ObsoleteAttribute("Use WriteUInt64(stream, (ulong)val); //yes 64, negative numbers are encoded that way")]
public static void WriteInt32(Stream stream, int val);
    public static int ReadZInt32(Stream stream);
    public static void WriteZInt32(Stream stream, int val);
    public static UInt32 ReadUInt32(Stream stream);
    public static void WriteUInt32(Stream stream, UInt32 val);
    [ObsoleteAttribute("Use (long)ReadUInt64(stream); instead")]
public static int ReadInt64(Stream stream);
    [ObsoleteAttribute("Use WriteUInt64 (stream, (ulong)val); instead")]
public static void WriteInt64(Stream stream, int val);
    public static long ReadZInt64(Stream stream);
    public static void WriteZInt64(Stream stream, long val);
    public static ulong ReadUInt64(Stream stream);
    public static void WriteUInt64(Stream stream, ulong val);
    public static bool ReadBool(Stream stream);
    public static void WriteBool(Stream stream, bool val);
}
public enum SilentOrbit.ProtocolBuffers.Wire : Enum {
    public int value__;
    public static Wire Varint;
    public static Wire Fixed64;
    public static Wire LengthDelimited;
    public static Wire Fixed32;
}
public class UidInspector`1 : MulticastDelegate {
    public UidInspector`1(object object, IntPtr method);
    public virtual void Invoke(UidType type, T& value);
    public virtual IAsyncResult BeginInvoke(UidType type, T& value, AsyncCallback callback, object object);
    public virtual void EndInvoke(T& value, IAsyncResult result);
}
public enum UidType : Enum {
    public int value__;
    public static UidType NetworkableId;
    public static UidType ItemContainerId;
    public static UidType ItemId;
    public static UidType Clear;
}
public class UnityEngine.ColorSerialized : object {
    public static void ResetToPool(Color instance);
    public static Color Deserialize(Byte[] buffer, Color& instance, bool isDelta);
    public static Color Deserialize(Stream stream, Color& instance, bool isDelta);
    public static Color DeserializeLengthDelimited(Stream stream, Color& instance, bool isDelta);
    public static Color DeserializeLength(Stream stream, int length, Color& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Color instance, Color previous);
    public static void Serialize(Stream stream, Color instance);
    public static Byte[] SerializeToBytes(Color instance);
    public static void SerializeLengthDelimited(Stream stream, Color instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class UnityEngine.RaySerialized : object {
    public static void ResetToPool(Ray instance);
    public static Ray Deserialize(Byte[] buffer, Ray& instance, bool isDelta);
    public static Ray Deserialize(Stream stream, Ray& instance, bool isDelta);
    public static Ray DeserializeLengthDelimited(Stream stream, Ray& instance, bool isDelta);
    public static Ray DeserializeLength(Stream stream, int length, Ray& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Ray instance, Ray previous);
    public static void Serialize(Stream stream, Ray instance);
    public static Byte[] SerializeToBytes(Ray instance);
    public static void SerializeLengthDelimited(Stream stream, Ray instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class UnityEngine.Vector2Serialized : object {
    public static void ResetToPool(Vector2 instance);
    public static Vector2 Deserialize(Byte[] buffer, Vector2& instance, bool isDelta);
    public static Vector2 Deserialize(Stream stream, Vector2& instance, bool isDelta);
    public static Vector2 DeserializeLengthDelimited(Stream stream, Vector2& instance, bool isDelta);
    public static Vector2 DeserializeLength(Stream stream, int length, Vector2& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Vector2 instance, Vector2 previous);
    public static void Serialize(Stream stream, Vector2 instance);
    public static Byte[] SerializeToBytes(Vector2 instance);
    public static void SerializeLengthDelimited(Stream stream, Vector2 instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class UnityEngine.Vector3Serialized : object {
    public static void ResetToPool(Vector3 instance);
    public static Vector3 Deserialize(Byte[] buffer, Vector3& instance, bool isDelta);
    public static Vector3 Deserialize(Stream stream, Vector3& instance, bool isDelta);
    public static Vector3 DeserializeLengthDelimited(Stream stream, Vector3& instance, bool isDelta);
    public static Vector3 DeserializeLength(Stream stream, int length, Vector3& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Vector3 instance, Vector3 previous);
    public static void Serialize(Stream stream, Vector3 instance);
    public static Byte[] SerializeToBytes(Vector3 instance);
    public static void SerializeLengthDelimited(Stream stream, Vector3 instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
public class UnityEngine.Vector4Serialized : object {
    public static void ResetToPool(Vector4 instance);
    public static Vector4 Deserialize(Byte[] buffer, Vector4& instance, bool isDelta);
    public static Vector4 Deserialize(Stream stream, Vector4& instance, bool isDelta);
    public static Vector4 DeserializeLengthDelimited(Stream stream, Vector4& instance, bool isDelta);
    public static Vector4 DeserializeLength(Stream stream, int length, Vector4& instance, bool isDelta);
    public static void SerializeDelta(Stream stream, Vector4 instance, Vector4 previous);
    public static void Serialize(Stream stream, Vector4 instance);
    public static Byte[] SerializeToBytes(Vector4 instance);
    public static void SerializeLengthDelimited(Stream stream, Vector4 instance);
    public void InspectUids(UidInspector`1<ulong> action);
}
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", "")]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
    private static MonoScriptData Get();
}
