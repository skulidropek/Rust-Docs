public EffectData : object {
public UInt32 type
public UInt32 pooledstringid
public int number
public Vector3 origin
public Vector3 normal
public float scale
public UInt32 entity
public UInt32 bone
public ulong source
public bool ShouldPool
private bool _disposed
public void ResetToPool(EffectData instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, EffectData previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(EffectData instance)
public EffectData Copy()
public EffectData Deserialize(Stream stream)
public EffectData DeserializeLengthDelimited(Stream stream)
public EffectData DeserializeLength(Stream stream, int length)
public EffectData Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public EffectData Deserialize(Byte[] buffer, EffectData instance, bool isDelta)
public EffectData Deserialize(Stream stream, EffectData instance, bool isDelta)
public EffectData DeserializeLengthDelimited(Stream stream, EffectData instance, bool isDelta)
public EffectData DeserializeLength(Stream stream, int length, EffectData instance, bool isDelta)
public void SerializeDelta(Stream stream, EffectData instance, EffectData previous)
public void Serialize(Stream stream, EffectData instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(EffectData instance)
public void SerializeLengthDelimited(Stream stream, EffectData instance)
}
public InputMessage : object {
public int buttons
public Vector3 aimAngles
public bool ShouldPool
private bool _disposed
public void ResetToPool(InputMessage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, InputMessage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(InputMessage instance)
public InputMessage Copy()
public InputMessage Deserialize(Stream stream)
public InputMessage DeserializeLengthDelimited(Stream stream)
public InputMessage DeserializeLength(Stream stream, int length)
public InputMessage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public InputMessage Deserialize(Byte[] buffer, InputMessage instance, bool isDelta)
public InputMessage Deserialize(Stream stream, InputMessage instance, bool isDelta)
public InputMessage DeserializeLengthDelimited(Stream stream, InputMessage instance, bool isDelta)
public InputMessage DeserializeLength(Stream stream, int length, InputMessage instance, bool isDelta)
public void SerializeDelta(Stream stream, InputMessage instance, InputMessage previous)
public void Serialize(Stream stream, InputMessage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(InputMessage instance)
public void SerializeLengthDelimited(Stream stream, InputMessage instance)
}
public ModelState : object {
public float waterLevel
public Vector3 lookDir
public int flags
public bool ShouldPool
private bool _disposed
public bool ducked
public bool jumped
public bool onground
public bool sleeping
public bool sprinting
public bool onLadder
public bool flying
public bool aiming
public bool prone
public bool sitting
public void ResetToPool(ModelState instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ModelState previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(ModelState instance)
public ModelState Copy()
public ModelState Deserialize(Stream stream)
public ModelState DeserializeLengthDelimited(Stream stream)
public ModelState DeserializeLength(Stream stream, int length)
public ModelState Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public ModelState Deserialize(Byte[] buffer, ModelState instance, bool isDelta)
public ModelState Deserialize(Stream stream, ModelState instance, bool isDelta)
public ModelState DeserializeLengthDelimited(Stream stream, ModelState instance, bool isDelta)
public ModelState DeserializeLength(Stream stream, int length, ModelState instance, bool isDelta)
public void SerializeDelta(Stream stream, ModelState instance, ModelState previous)
public void Serialize(Stream stream, ModelState instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ModelState instance)
public void SerializeLengthDelimited(Stream stream, ModelState instance)
public bool HasFlag(Flag f)
public void SetFlag(Flag f, bool b)
public bool get_ducked()
public void set_ducked(bool value)
public bool get_jumped()
public void set_jumped(bool value)
public bool get_onground()
public void set_onground(bool value)
public bool get_sleeping()
public void set_sleeping(bool value)
public bool get_sprinting()
public void set_sprinting(bool value)
public bool get_onLadder()
public void set_onLadder(bool value)
public bool get_flying()
public void set_flying(bool value)
public bool get_aiming()
public void set_aiming(bool value)
public bool get_prone()
public void set_prone(bool value)
public bool get_sitting()
public void set_sitting(bool value)
public bool Equal(ModelState a, ModelState b)
}
public PlayerTick : object {
public InputMessage inputState
public Vector3 position
public ModelState modelState
public UInt32 activeItem
public Vector3 eyePos
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerTick instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerTick previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerTick instance)
public PlayerTick Copy()
public PlayerTick Deserialize(Stream stream)
public PlayerTick DeserializeLengthDelimited(Stream stream)
public PlayerTick DeserializeLength(Stream stream, int length)
public PlayerTick Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerTick Deserialize(Byte[] buffer, PlayerTick instance, bool isDelta)
public PlayerTick Deserialize(Stream stream, PlayerTick instance, bool isDelta)
public PlayerTick DeserializeLengthDelimited(Stream stream, PlayerTick instance, bool isDelta)
public PlayerTick DeserializeLength(Stream stream, int length, PlayerTick instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerTick instance, PlayerTick previous)
public void Serialize(Stream stream, PlayerTick instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerTick instance)
public void SerializeLengthDelimited(Stream stream, PlayerTick instance)
}
public ProtoBuf.Approval : object {
public string level
public string hostname
public bool modded
public bool official
public ulong steamid
public UInt32 ipaddress
public int port
public UInt32 levelSeed
public UInt32 levelSize
public string checksum
public bool ShouldPool
private bool _disposed
public void ResetToPool(Approval instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Approval previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Approval instance)
public Approval Copy()
public Approval Deserialize(Stream stream)
public Approval DeserializeLengthDelimited(Stream stream)
public Approval DeserializeLength(Stream stream, int length)
public Approval Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Approval Deserialize(Byte[] buffer, Approval instance, bool isDelta)
public Approval Deserialize(Stream stream, Approval instance, bool isDelta)
public Approval DeserializeLengthDelimited(Stream stream, Approval instance, bool isDelta)
public Approval DeserializeLength(Stream stream, int length, Approval instance, bool isDelta)
public void SerializeDelta(Stream stream, Approval instance, Approval previous)
public void Serialize(Stream stream, Approval instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Approval instance)
public void SerializeLengthDelimited(Stream stream, Approval instance)
}
public ProtoBuf.Attack : object {
public Vector3 pointStart
public Vector3 pointEnd
public UInt32 hitID
public UInt32 hitBone
public Vector3 hitNormalLocal
public Vector3 hitPositionLocal
public Vector3 hitNormalWorld
public Vector3 hitPositionWorld
public UInt32 hitPartID
public UInt32 hitMaterialID
public UInt32 hitItem
public bool ShouldPool
private bool _disposed
public void ResetToPool(Attack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Attack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Attack instance)
public Attack Copy()
public Attack Deserialize(Stream stream)
public Attack DeserializeLengthDelimited(Stream stream)
public Attack DeserializeLength(Stream stream, int length)
public Attack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Attack Deserialize(Byte[] buffer, Attack instance, bool isDelta)
public Attack Deserialize(Stream stream, Attack instance, bool isDelta)
public Attack DeserializeLengthDelimited(Stream stream, Attack instance, bool isDelta)
public Attack DeserializeLength(Stream stream, int length, Attack instance, bool isDelta)
public void SerializeDelta(Stream stream, Attack instance, Attack previous)
public void Serialize(Stream stream, Attack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Attack instance)
public void SerializeLengthDelimited(Stream stream, Attack instance)
}
public ProtoBuf.AutoTurret : object {
public Vector3 aimPos
public Vector3 aimDir
public UInt32 targetID
public List`1<PlayerNameID> users
public bool ShouldPool
private bool _disposed
public void ResetToPool(AutoTurret instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, AutoTurret previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(AutoTurret instance)
public AutoTurret Copy()
public AutoTurret Deserialize(Stream stream)
public AutoTurret DeserializeLengthDelimited(Stream stream)
public AutoTurret DeserializeLength(Stream stream, int length)
public AutoTurret Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public AutoTurret Deserialize(Byte[] buffer, AutoTurret instance, bool isDelta)
public AutoTurret Deserialize(Stream stream, AutoTurret instance, bool isDelta)
public AutoTurret DeserializeLengthDelimited(Stream stream, AutoTurret instance, bool isDelta)
public AutoTurret DeserializeLength(Stream stream, int length, AutoTurret instance, bool isDelta)
public void SerializeDelta(Stream stream, AutoTurret instance, AutoTurret previous)
public void Serialize(Stream stream, AutoTurret instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(AutoTurret instance)
public void SerializeLengthDelimited(Stream stream, AutoTurret instance)
}
public ProtoBuf.BaseCombat : object {
public int state
public float health
public bool ShouldPool
private bool _disposed
public void ResetToPool(BaseCombat instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseCombat previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BaseCombat instance)
public BaseCombat Copy()
public BaseCombat Deserialize(Stream stream)
public BaseCombat DeserializeLengthDelimited(Stream stream)
public BaseCombat DeserializeLength(Stream stream, int length)
public BaseCombat Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BaseCombat Deserialize(Byte[] buffer, BaseCombat instance, bool isDelta)
public BaseCombat Deserialize(Stream stream, BaseCombat instance, bool isDelta)
public BaseCombat DeserializeLengthDelimited(Stream stream, BaseCombat instance, bool isDelta)
public BaseCombat DeserializeLength(Stream stream, int length, BaseCombat instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseCombat instance, BaseCombat previous)
public void Serialize(Stream stream, BaseCombat instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseCombat instance)
public void SerializeLengthDelimited(Stream stream, BaseCombat instance)
}
public ProtoBuf.BaseEntity : object {
public Vector3 pos
public Vector3 rot
public int flags
public ulong skinid
public bool ShouldPool
private bool _disposed
public void ResetToPool(BaseEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BaseEntity instance)
public BaseEntity Copy()
public BaseEntity Deserialize(Stream stream)
public BaseEntity DeserializeLengthDelimited(Stream stream)
public BaseEntity DeserializeLength(Stream stream, int length)
public BaseEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BaseEntity Deserialize(Byte[] buffer, BaseEntity instance, bool isDelta)
public BaseEntity Deserialize(Stream stream, BaseEntity instance, bool isDelta)
public BaseEntity DeserializeLengthDelimited(Stream stream, BaseEntity instance, bool isDelta)
public BaseEntity DeserializeLength(Stream stream, int length, BaseEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseEntity instance, BaseEntity previous)
public void Serialize(Stream stream, BaseEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseEntity instance)
public void SerializeLengthDelimited(Stream stream, BaseEntity instance)
}
public ProtoBuf.BaseNetworkable : object {
public UInt32 uid
public UInt32 group
public UInt32 prefabID
public bool ShouldPool
private bool _disposed
public void ResetToPool(BaseNetworkable instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseNetworkable previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BaseNetworkable instance)
public BaseNetworkable Copy()
public BaseNetworkable Deserialize(Stream stream)
public BaseNetworkable DeserializeLengthDelimited(Stream stream)
public BaseNetworkable DeserializeLength(Stream stream, int length)
public BaseNetworkable Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BaseNetworkable Deserialize(Byte[] buffer, BaseNetworkable instance, bool isDelta)
public BaseNetworkable Deserialize(Stream stream, BaseNetworkable instance, bool isDelta)
public BaseNetworkable DeserializeLengthDelimited(Stream stream, BaseNetworkable instance, bool isDelta)
public BaseNetworkable DeserializeLength(Stream stream, int length, BaseNetworkable instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseNetworkable instance, BaseNetworkable previous)
public void Serialize(Stream stream, BaseNetworkable instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseNetworkable instance)
public void SerializeLengthDelimited(Stream stream, BaseNetworkable instance)
}
public ProtoBuf.BaseNPC : object {
public int flags
public bool ShouldPool
private bool _disposed
public void ResetToPool(BaseNPC instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseNPC previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BaseNPC instance)
public BaseNPC Copy()
public BaseNPC Deserialize(Stream stream)
public BaseNPC DeserializeLengthDelimited(Stream stream)
public BaseNPC DeserializeLength(Stream stream, int length)
public BaseNPC Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BaseNPC Deserialize(Byte[] buffer, BaseNPC instance, bool isDelta)
public BaseNPC Deserialize(Stream stream, BaseNPC instance, bool isDelta)
public BaseNPC DeserializeLengthDelimited(Stream stream, BaseNPC instance, bool isDelta)
public BaseNPC DeserializeLength(Stream stream, int length, BaseNPC instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseNPC instance, BaseNPC previous)
public void Serialize(Stream stream, BaseNPC instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseNPC instance)
public void SerializeLengthDelimited(Stream stream, BaseNPC instance)
}
public ProtoBuf.BasePlayer : object {
public string name
public ulong userid
public PlayerInventory inventory
public PlayerMetabolism metabolism
public ModelState modelState
public int playerFlags
public UInt32 heldEntity
public float health
public PersistantPlayer persistantData
public float skinCol
public float skinTex
public float skinMesh
public PlayerLifeStory currentLife
public PlayerLifeStory previousLife
public UInt32 mounted
public bool ShouldPool
private bool _disposed
public void ResetToPool(BasePlayer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BasePlayer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BasePlayer instance)
public BasePlayer Copy()
public BasePlayer Deserialize(Stream stream)
public BasePlayer DeserializeLengthDelimited(Stream stream)
public BasePlayer DeserializeLength(Stream stream, int length)
public BasePlayer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BasePlayer Deserialize(Byte[] buffer, BasePlayer instance, bool isDelta)
public BasePlayer Deserialize(Stream stream, BasePlayer instance, bool isDelta)
public BasePlayer DeserializeLengthDelimited(Stream stream, BasePlayer instance, bool isDelta)
public BasePlayer DeserializeLength(Stream stream, int length, BasePlayer instance, bool isDelta)
public void SerializeDelta(Stream stream, BasePlayer instance, BasePlayer previous)
public void Serialize(Stream stream, BasePlayer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BasePlayer instance)
public void SerializeLengthDelimited(Stream stream, BasePlayer instance)
}
public ProtoBuf.BaseProjectile : object {
public Magazine primaryMagazine
public bool ShouldPool
private bool _disposed
public void ResetToPool(BaseProjectile instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseProjectile previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BaseProjectile instance)
public BaseProjectile Copy()
public BaseProjectile Deserialize(Stream stream)
public BaseProjectile DeserializeLengthDelimited(Stream stream)
public BaseProjectile DeserializeLength(Stream stream, int length)
public BaseProjectile Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BaseProjectile Deserialize(Byte[] buffer, BaseProjectile instance, bool isDelta)
public BaseProjectile Deserialize(Stream stream, BaseProjectile instance, bool isDelta)
public BaseProjectile DeserializeLengthDelimited(Stream stream, BaseProjectile instance, bool isDelta)
public BaseProjectile DeserializeLength(Stream stream, int length, BaseProjectile instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseProjectile instance, BaseProjectile previous)
public void Serialize(Stream stream, BaseProjectile instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseProjectile instance)
public void SerializeLengthDelimited(Stream stream, BaseProjectile instance)
}
public ProtoBuf.BaseResource : object {
public int stage
public float health
public bool ShouldPool
private bool _disposed
public void ResetToPool(BaseResource instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BaseResource previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BaseResource instance)
public BaseResource Copy()
public BaseResource Deserialize(Stream stream)
public BaseResource DeserializeLengthDelimited(Stream stream)
public BaseResource DeserializeLength(Stream stream, int length)
public BaseResource Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BaseResource Deserialize(Byte[] buffer, BaseResource instance, bool isDelta)
public BaseResource Deserialize(Stream stream, BaseResource instance, bool isDelta)
public BaseResource DeserializeLengthDelimited(Stream stream, BaseResource instance, bool isDelta)
public BaseResource DeserializeLength(Stream stream, int length, BaseResource instance, bool isDelta)
public void SerializeDelta(Stream stream, BaseResource instance, BaseResource previous)
public void Serialize(Stream stream, BaseResource instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BaseResource instance)
public void SerializeLengthDelimited(Stream stream, BaseResource instance)
}
public ProtoBuf.BradleyAPC : object {
public float engineThrottle
public float throttleLeft
public float throttleRight
public Vector3 mainGunVec
public Vector3 topTurretVec
public Vector3 rearGunVec
public Vector3 leftSideGun1
public Vector3 leftSideGun2
public Vector3 rightSideGun1
public Vector3 rightSideGun2
public bool ShouldPool
private bool _disposed
public void ResetToPool(BradleyAPC instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BradleyAPC previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BradleyAPC instance)
public BradleyAPC Copy()
public BradleyAPC Deserialize(Stream stream)
public BradleyAPC DeserializeLengthDelimited(Stream stream)
public BradleyAPC DeserializeLength(Stream stream, int length)
public BradleyAPC Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BradleyAPC Deserialize(Byte[] buffer, BradleyAPC instance, bool isDelta)
public BradleyAPC Deserialize(Stream stream, BradleyAPC instance, bool isDelta)
public BradleyAPC DeserializeLengthDelimited(Stream stream, BradleyAPC instance, bool isDelta)
public BradleyAPC DeserializeLength(Stream stream, int length, BradleyAPC instance, bool isDelta)
public void SerializeDelta(Stream stream, BradleyAPC instance, BradleyAPC previous)
public void Serialize(Stream stream, BradleyAPC instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BradleyAPC instance)
public void SerializeLengthDelimited(Stream stream, BradleyAPC instance)
}
public ProtoBuf.BuildingBlock : object {
public int grade
public bool beingDemolished
public float stability
public UInt32 buildingID
public bool ShouldPool
private bool _disposed
public void ResetToPool(BuildingBlock instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BuildingBlock previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BuildingBlock instance)
public BuildingBlock Copy()
public BuildingBlock Deserialize(Stream stream)
public BuildingBlock DeserializeLengthDelimited(Stream stream)
public BuildingBlock DeserializeLength(Stream stream, int length)
public BuildingBlock Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BuildingBlock Deserialize(Byte[] buffer, BuildingBlock instance, bool isDelta)
public BuildingBlock Deserialize(Stream stream, BuildingBlock instance, bool isDelta)
public BuildingBlock DeserializeLengthDelimited(Stream stream, BuildingBlock instance, bool isDelta)
public BuildingBlock DeserializeLength(Stream stream, int length, BuildingBlock instance, bool isDelta)
public void SerializeDelta(Stream stream, BuildingBlock instance, BuildingBlock previous)
public void Serialize(Stream stream, BuildingBlock instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BuildingBlock instance)
public void SerializeLengthDelimited(Stream stream, BuildingBlock instance)
}
public ProtoBuf.BuildingPrivilege : object {
public List`1<PlayerNameID> users
public bool ShouldPool
private bool _disposed
public void ResetToPool(BuildingPrivilege instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, BuildingPrivilege previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(BuildingPrivilege instance)
public BuildingPrivilege Copy()
public BuildingPrivilege Deserialize(Stream stream)
public BuildingPrivilege DeserializeLengthDelimited(Stream stream)
public BuildingPrivilege DeserializeLength(Stream stream, int length)
public BuildingPrivilege Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public BuildingPrivilege Deserialize(Byte[] buffer, BuildingPrivilege instance, bool isDelta)
public BuildingPrivilege Deserialize(Stream stream, BuildingPrivilege instance, bool isDelta)
public BuildingPrivilege DeserializeLengthDelimited(Stream stream, BuildingPrivilege instance, bool isDelta)
public BuildingPrivilege DeserializeLength(Stream stream, int length, BuildingPrivilege instance, bool isDelta)
public void SerializeDelta(Stream stream, BuildingPrivilege instance, BuildingPrivilege previous)
public void Serialize(Stream stream, BuildingPrivilege instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(BuildingPrivilege instance)
public void SerializeLengthDelimited(Stream stream, BuildingPrivilege instance)
}
public ProtoBuf.ClientReady : object {
public List`1<ClientInfo> clientInfo
public bool ShouldPool
private bool _disposed
public void ResetToPool(ClientReady instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ClientReady previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(ClientReady instance)
public ClientReady Copy()
public ClientReady Deserialize(Stream stream)
public ClientReady DeserializeLengthDelimited(Stream stream)
public ClientReady DeserializeLength(Stream stream, int length)
public ClientReady Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public ClientReady Deserialize(Byte[] buffer, ClientReady instance, bool isDelta)
public ClientReady Deserialize(Stream stream, ClientReady instance, bool isDelta)
public ClientReady DeserializeLengthDelimited(Stream stream, ClientReady instance, bool isDelta)
public ClientReady DeserializeLength(Stream stream, int length, ClientReady instance, bool isDelta)
public void SerializeDelta(Stream stream, ClientReady instance, ClientReady previous)
public void Serialize(Stream stream, ClientReady instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ClientReady instance)
public void SerializeLengthDelimited(Stream stream, ClientReady instance)
}
public ProtoBuf.CodeLock : object {
public Private pv
public bool hasCode
public bool hasGuestCode
public bool ShouldPool
private bool _disposed
public void ResetToPool(CodeLock instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, CodeLock previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(CodeLock instance)
public CodeLock Copy()
public CodeLock Deserialize(Stream stream)
public CodeLock DeserializeLengthDelimited(Stream stream)
public CodeLock DeserializeLength(Stream stream, int length)
public CodeLock Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public CodeLock Deserialize(Byte[] buffer, CodeLock instance, bool isDelta)
public CodeLock Deserialize(Stream stream, CodeLock instance, bool isDelta)
public CodeLock DeserializeLengthDelimited(Stream stream, CodeLock instance, bool isDelta)
public CodeLock DeserializeLength(Stream stream, int length, CodeLock instance, bool isDelta)
public void SerializeDelta(Stream stream, CodeLock instance, CodeLock previous)
public void Serialize(Stream stream, CodeLock instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(CodeLock instance)
public void SerializeLengthDelimited(Stream stream, CodeLock instance)
}
public ProtoBuf.Corpse : object {
public UInt32 parentID
public bool ShouldPool
private bool _disposed
public void ResetToPool(Corpse instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Corpse previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Corpse instance)
public Corpse Copy()
public Corpse Deserialize(Stream stream)
public Corpse DeserializeLengthDelimited(Stream stream)
public Corpse DeserializeLength(Stream stream, int length)
public Corpse Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Corpse Deserialize(Byte[] buffer, Corpse instance, bool isDelta)
public Corpse Deserialize(Stream stream, Corpse instance, bool isDelta)
public Corpse DeserializeLengthDelimited(Stream stream, Corpse instance, bool isDelta)
public Corpse DeserializeLength(Stream stream, int length, Corpse instance, bool isDelta)
public void SerializeDelta(Stream stream, Corpse instance, Corpse previous)
public void Serialize(Stream stream, Corpse instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Corpse instance)
public void SerializeLengthDelimited(Stream stream, Corpse instance)
}
public ProtoBuf.CreateBuilding : object {
public UInt32 entity
public UInt32 socket
public bool onterrain
public Vector3 position
public Vector3 normal
public Ray ray
public UInt32 blockID
public Vector3 rotation
public bool ShouldPool
private bool _disposed
public void ResetToPool(CreateBuilding instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, CreateBuilding previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(CreateBuilding instance)
public CreateBuilding Copy()
public CreateBuilding Deserialize(Stream stream)
public CreateBuilding DeserializeLengthDelimited(Stream stream)
public CreateBuilding DeserializeLength(Stream stream, int length)
public CreateBuilding Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public CreateBuilding Deserialize(Byte[] buffer, CreateBuilding instance, bool isDelta)
public CreateBuilding Deserialize(Stream stream, CreateBuilding instance, bool isDelta)
public CreateBuilding DeserializeLengthDelimited(Stream stream, CreateBuilding instance, bool isDelta)
public CreateBuilding DeserializeLength(Stream stream, int length, CreateBuilding instance, bool isDelta)
public void SerializeDelta(Stream stream, CreateBuilding instance, CreateBuilding previous)
public void Serialize(Stream stream, CreateBuilding instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(CreateBuilding instance)
public void SerializeLengthDelimited(Stream stream, CreateBuilding instance)
}
public ProtoBuf.DecayEntity : object {
public float decayTimer
public bool ShouldPool
private bool _disposed
public void ResetToPool(DecayEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DecayEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(DecayEntity instance)
public DecayEntity Copy()
public DecayEntity Deserialize(Stream stream)
public DecayEntity DeserializeLengthDelimited(Stream stream)
public DecayEntity DeserializeLength(Stream stream, int length)
public DecayEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public DecayEntity Deserialize(Byte[] buffer, DecayEntity instance, bool isDelta)
public DecayEntity Deserialize(Stream stream, DecayEntity instance, bool isDelta)
public DecayEntity DeserializeLengthDelimited(Stream stream, DecayEntity instance, bool isDelta)
public DecayEntity DeserializeLength(Stream stream, int length, DecayEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, DecayEntity instance, DecayEntity previous)
public void Serialize(Stream stream, DecayEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DecayEntity instance)
public void SerializeLengthDelimited(Stream stream, DecayEntity instance)
}
public ProtoBuf.DemoHeader : object {
public UInt32 version
public string level
public UInt32 levelSeed
public UInt32 levelSize
public string checksum
public ulong localclient
public Vector3 position
public Vector3 rotation
public bool ShouldPool
private bool _disposed
public void ResetToPool(DemoHeader instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DemoHeader previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(DemoHeader instance)
public DemoHeader Copy()
public DemoHeader Deserialize(Stream stream)
public DemoHeader DeserializeLengthDelimited(Stream stream)
public DemoHeader DeserializeLength(Stream stream, int length)
public DemoHeader Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public DemoHeader Deserialize(Byte[] buffer, DemoHeader instance, bool isDelta)
public DemoHeader Deserialize(Stream stream, DemoHeader instance, bool isDelta)
public DemoHeader DeserializeLengthDelimited(Stream stream, DemoHeader instance, bool isDelta)
public DemoHeader DeserializeLength(Stream stream, int length, DemoHeader instance, bool isDelta)
public void SerializeDelta(Stream stream, DemoHeader instance, DemoHeader previous)
public void Serialize(Stream stream, DemoHeader instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DemoHeader instance)
public void SerializeLengthDelimited(Stream stream, DemoHeader instance)
}
public ProtoBuf.DudExplosive : object {
public float fuseTimeLeft
public bool ShouldPool
private bool _disposed
public void ResetToPool(DudExplosive instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, DudExplosive previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(DudExplosive instance)
public DudExplosive Copy()
public DudExplosive Deserialize(Stream stream)
public DudExplosive DeserializeLengthDelimited(Stream stream)
public DudExplosive DeserializeLength(Stream stream, int length)
public DudExplosive Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public DudExplosive Deserialize(Byte[] buffer, DudExplosive instance, bool isDelta)
public DudExplosive Deserialize(Stream stream, DudExplosive instance, bool isDelta)
public DudExplosive DeserializeLengthDelimited(Stream stream, DudExplosive instance, bool isDelta)
public DudExplosive DeserializeLength(Stream stream, int length, DudExplosive instance, bool isDelta)
public void SerializeDelta(Stream stream, DudExplosive instance, DudExplosive previous)
public void Serialize(Stream stream, DudExplosive instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(DudExplosive instance)
public void SerializeLengthDelimited(Stream stream, DudExplosive instance)
}
public ProtoBuf.Entity : object {
public BaseNetworkable baseNetworkable
public BaseEntity baseEntity
public BasePlayer basePlayer
public WorldItem worldItem
public BaseResource resource
public BuildingBlock buildingBlock
public Environment environment
public Corpse corpse
public ParentInfo parent
public KeyLock keyLock
public CodeLock codeLock
public EntitySlots entitySlots
public BuildingPrivilege buildingPrivilege
public StorageBox storageBox
public HeldEntity heldEntity
public BaseProjectile baseProjectile
public BaseNPC baseNPC
public Loot loot
public GenericSpawner genericSpawner
public SleepingBag sleepingBag
public LootableCorpse lootableCorpse
public Sign sign
public BaseCombat baseCombat
public MapEntity mapEntity
public ResearchTable researchTable
public DudExplosive dudExplosive
public MiningQuarry miningQuarry
public PlantEntity plantEntity
public Helicopter helicopter
public Landmine landmine
public AutoTurret autoturret
public SphereEntity sphereEntity
public StabilityEntity stabilityEntity
public OwnerInfo ownerInfo
public DecayEntity decayEntity
public Spawnable spawnable
public ServerGib servergib
public VendingMachine vendingMachine
public SpinnerWheel spinnerWheel
public Lift lift
public BradleyAPC bradley
public bool createdThisFrame
public bool ShouldPool
private bool _disposed
public void ResetToPool(Entity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Entity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Entity instance)
public Entity Copy()
public Entity Deserialize(Stream stream)
public Entity DeserializeLengthDelimited(Stream stream)
public Entity DeserializeLength(Stream stream, int length)
public Entity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Entity Deserialize(Byte[] buffer, Entity instance, bool isDelta)
public Entity Deserialize(Stream stream, Entity instance, bool isDelta)
public Entity DeserializeLengthDelimited(Stream stream, Entity instance, bool isDelta)
public Entity DeserializeLength(Stream stream, int length, Entity instance, bool isDelta)
public void SerializeDelta(Stream stream, Entity instance, Entity previous)
public void Serialize(Stream stream, Entity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Entity instance)
public void SerializeLengthDelimited(Stream stream, Entity instance)
}
public ProtoBuf.EntityList : object {
public List`1<Entity> entity
public bool ShouldPool
private bool _disposed
public void ResetToPool(EntityList instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, EntityList previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(EntityList instance)
public EntityList Copy()
public EntityList Deserialize(Stream stream)
public EntityList DeserializeLengthDelimited(Stream stream)
public EntityList DeserializeLength(Stream stream, int length)
public EntityList Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public EntityList Deserialize(Byte[] buffer, EntityList instance, bool isDelta)
public EntityList Deserialize(Stream stream, EntityList instance, bool isDelta)
public EntityList DeserializeLengthDelimited(Stream stream, EntityList instance, bool isDelta)
public EntityList DeserializeLength(Stream stream, int length, EntityList instance, bool isDelta)
public void SerializeDelta(Stream stream, EntityList instance, EntityList previous)
public void Serialize(Stream stream, EntityList instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(EntityList instance)
public void SerializeLengthDelimited(Stream stream, EntityList instance)
}
public ProtoBuf.EntitySlots : object {
public UInt32 slotLock
public UInt32 slotFireMod
public UInt32 slotUpperModification
public bool ShouldPool
private bool _disposed
public void ResetToPool(EntitySlots instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, EntitySlots previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(EntitySlots instance)
public EntitySlots Copy()
public EntitySlots Deserialize(Stream stream)
public EntitySlots DeserializeLengthDelimited(Stream stream)
public EntitySlots DeserializeLength(Stream stream, int length)
public EntitySlots Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public EntitySlots Deserialize(Byte[] buffer, EntitySlots instance, bool isDelta)
public EntitySlots Deserialize(Stream stream, EntitySlots instance, bool isDelta)
public EntitySlots DeserializeLengthDelimited(Stream stream, EntitySlots instance, bool isDelta)
public EntitySlots DeserializeLength(Stream stream, int length, EntitySlots instance, bool isDelta)
public void SerializeDelta(Stream stream, EntitySlots instance, EntitySlots previous)
public void Serialize(Stream stream, EntitySlots instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(EntitySlots instance)
public void SerializeLengthDelimited(Stream stream, EntitySlots instance)
}
public ProtoBuf.Environment : object {
public long dateTime
public float clouds
public float fog
public float wind
public float rain
public bool ShouldPool
private bool _disposed
public void ResetToPool(Environment instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Environment previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Environment instance)
public Environment Copy()
public Environment Deserialize(Stream stream)
public Environment DeserializeLengthDelimited(Stream stream)
public Environment DeserializeLength(Stream stream, int length)
public Environment Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Environment Deserialize(Byte[] buffer, Environment instance, bool isDelta)
public Environment Deserialize(Stream stream, Environment instance, bool isDelta)
public Environment DeserializeLengthDelimited(Stream stream, Environment instance, bool isDelta)
public Environment DeserializeLength(Stream stream, int length, Environment instance, bool isDelta)
public void SerializeDelta(Stream stream, Environment instance, Environment previous)
public void Serialize(Stream stream, Environment instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Environment instance)
public void SerializeLengthDelimited(Stream stream, Environment instance)
}
public ProtoBuf.GenericSpawner : object {
public List`1<SpawnedEnt> ents
public bool ShouldPool
private bool _disposed
public void ResetToPool(GenericSpawner instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, GenericSpawner previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(GenericSpawner instance)
public GenericSpawner Copy()
public GenericSpawner Deserialize(Stream stream)
public GenericSpawner DeserializeLengthDelimited(Stream stream)
public GenericSpawner DeserializeLength(Stream stream, int length)
public GenericSpawner Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public GenericSpawner Deserialize(Byte[] buffer, GenericSpawner instance, bool isDelta)
public GenericSpawner Deserialize(Stream stream, GenericSpawner instance, bool isDelta)
public GenericSpawner DeserializeLengthDelimited(Stream stream, GenericSpawner instance, bool isDelta)
public GenericSpawner DeserializeLength(Stream stream, int length, GenericSpawner instance, bool isDelta)
public void SerializeDelta(Stream stream, GenericSpawner instance, GenericSpawner previous)
public void Serialize(Stream stream, GenericSpawner instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(GenericSpawner instance)
public void SerializeLengthDelimited(Stream stream, GenericSpawner instance)
}
public ProtoBuf.HeldEntity : object {
public UInt32 itemUID
public bool ShouldPool
private bool _disposed
public void ResetToPool(HeldEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, HeldEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(HeldEntity instance)
public HeldEntity Copy()
public HeldEntity Deserialize(Stream stream)
public HeldEntity DeserializeLengthDelimited(Stream stream)
public HeldEntity DeserializeLength(Stream stream, int length)
public HeldEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public HeldEntity Deserialize(Byte[] buffer, HeldEntity instance, bool isDelta)
public HeldEntity Deserialize(Stream stream, HeldEntity instance, bool isDelta)
public HeldEntity DeserializeLengthDelimited(Stream stream, HeldEntity instance, bool isDelta)
public HeldEntity DeserializeLength(Stream stream, int length, HeldEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, HeldEntity instance, HeldEntity previous)
public void Serialize(Stream stream, HeldEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(HeldEntity instance)
public void SerializeLengthDelimited(Stream stream, HeldEntity instance)
}
public ProtoBuf.Helicopter : object {
public Vector3 tiltRot
public Vector3 leftGun
public Vector3 rightGun
public Vector3 spotlightVec
public List`1<float> weakspothealths
public bool ShouldPool
private bool _disposed
public void ResetToPool(Helicopter instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Helicopter previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Helicopter instance)
public Helicopter Copy()
public Helicopter Deserialize(Stream stream)
public Helicopter DeserializeLengthDelimited(Stream stream)
public Helicopter DeserializeLength(Stream stream, int length)
public Helicopter Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Helicopter Deserialize(Byte[] buffer, Helicopter instance, bool isDelta)
public Helicopter Deserialize(Stream stream, Helicopter instance, bool isDelta)
public Helicopter DeserializeLengthDelimited(Stream stream, Helicopter instance, bool isDelta)
public Helicopter DeserializeLength(Stream stream, int length, Helicopter instance, bool isDelta)
public void SerializeDelta(Stream stream, Helicopter instance, Helicopter previous)
public void Serialize(Stream stream, Helicopter instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Helicopter instance)
public void SerializeLengthDelimited(Stream stream, Helicopter instance)
}
public ProtoBuf.Item : object {
public UInt32 UID
public int itemid
public int slot
public int amount
public int flags
public float removetime
public float locktime
public UInt32 worldEntity
public InstanceData instanceData
public UInt32 heldEntity
public ConditionData conditionData
public string name
public string text
public ulong skinid
public ItemContainer contents
public bool ShouldPool
private bool _disposed
public void ResetToPool(Item instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Item previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Item instance)
public Item Copy()
public Item Deserialize(Stream stream)
public Item DeserializeLengthDelimited(Stream stream)
public Item DeserializeLength(Stream stream, int length)
public Item Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Item Deserialize(Byte[] buffer, Item instance, bool isDelta)
public Item Deserialize(Stream stream, Item instance, bool isDelta)
public Item DeserializeLengthDelimited(Stream stream, Item instance, bool isDelta)
public Item DeserializeLength(Stream stream, int length, Item instance, bool isDelta)
public void SerializeDelta(Stream stream, Item instance, Item previous)
public void Serialize(Stream stream, Item instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Item instance)
public void SerializeLengthDelimited(Stream stream, Item instance)
}
public ProtoBuf.ItemContainer : object {
public UInt32 UID
public int slots
public float temperature
public int flags
public int allowedContents
public int maxStackSize
public int allowedItem
public List`1<int> availableSlots
public List`1<Item> contents
public bool ShouldPool
private bool _disposed
public void ResetToPool(ItemContainer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ItemContainer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(ItemContainer instance)
public ItemContainer Copy()
public ItemContainer Deserialize(Stream stream)
public ItemContainer DeserializeLengthDelimited(Stream stream)
public ItemContainer DeserializeLength(Stream stream, int length)
public ItemContainer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public ItemContainer Deserialize(Byte[] buffer, ItemContainer instance, bool isDelta)
public ItemContainer Deserialize(Stream stream, ItemContainer instance, bool isDelta)
public ItemContainer DeserializeLengthDelimited(Stream stream, ItemContainer instance, bool isDelta)
public ItemContainer DeserializeLength(Stream stream, int length, ItemContainer instance, bool isDelta)
public void SerializeDelta(Stream stream, ItemContainer instance, ItemContainer previous)
public void Serialize(Stream stream, ItemContainer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ItemContainer instance)
public void SerializeLengthDelimited(Stream stream, ItemContainer instance)
}
public ProtoBuf.KeyLock : object {
public int code
public bool ShouldPool
private bool _disposed
public void ResetToPool(KeyLock instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, KeyLock previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(KeyLock instance)
public KeyLock Copy()
public KeyLock Deserialize(Stream stream)
public KeyLock DeserializeLengthDelimited(Stream stream)
public KeyLock DeserializeLength(Stream stream, int length)
public KeyLock Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public KeyLock Deserialize(Byte[] buffer, KeyLock instance, bool isDelta)
public KeyLock Deserialize(Stream stream, KeyLock instance, bool isDelta)
public KeyLock DeserializeLengthDelimited(Stream stream, KeyLock instance, bool isDelta)
public KeyLock DeserializeLength(Stream stream, int length, KeyLock instance, bool isDelta)
public void SerializeDelta(Stream stream, KeyLock instance, KeyLock previous)
public void Serialize(Stream stream, KeyLock instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(KeyLock instance)
public void SerializeLengthDelimited(Stream stream, KeyLock instance)
}
public ProtoBuf.Landmine : object {
public ulong triggeredID
public bool ShouldPool
private bool _disposed
public void ResetToPool(Landmine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Landmine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Landmine instance)
public Landmine Copy()
public Landmine Deserialize(Stream stream)
public Landmine DeserializeLengthDelimited(Stream stream)
public Landmine DeserializeLength(Stream stream, int length)
public Landmine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Landmine Deserialize(Byte[] buffer, Landmine instance, bool isDelta)
public Landmine Deserialize(Stream stream, Landmine instance, bool isDelta)
public Landmine DeserializeLengthDelimited(Stream stream, Landmine instance, bool isDelta)
public Landmine DeserializeLength(Stream stream, int length, Landmine instance, bool isDelta)
public void SerializeDelta(Stream stream, Landmine instance, Landmine previous)
public void Serialize(Stream stream, Landmine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Landmine instance)
public void SerializeLengthDelimited(Stream stream, Landmine instance)
}
public ProtoBuf.Lift : object {
public int floor
public bool ShouldPool
private bool _disposed
public void ResetToPool(Lift instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Lift previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Lift instance)
public Lift Copy()
public Lift Deserialize(Stream stream)
public Lift DeserializeLengthDelimited(Stream stream)
public Lift DeserializeLength(Stream stream, int length)
public Lift Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Lift Deserialize(Byte[] buffer, Lift instance, bool isDelta)
public Lift Deserialize(Stream stream, Lift instance, bool isDelta)
public Lift DeserializeLengthDelimited(Stream stream, Lift instance, bool isDelta)
public Lift DeserializeLength(Stream stream, int length, Lift instance, bool isDelta)
public void SerializeDelta(Stream stream, Lift instance, Lift previous)
public void Serialize(Stream stream, Lift instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Lift instance)
public void SerializeLengthDelimited(Stream stream, Lift instance)
}
public ProtoBuf.Loot : object {
public ItemContainer contents
public bool ShouldPool
private bool _disposed
public void ResetToPool(Loot instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Loot previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Loot instance)
public Loot Copy()
public Loot Deserialize(Stream stream)
public Loot DeserializeLengthDelimited(Stream stream)
public Loot DeserializeLength(Stream stream, int length)
public Loot Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Loot Deserialize(Byte[] buffer, Loot instance, bool isDelta)
public Loot Deserialize(Stream stream, Loot instance, bool isDelta)
public Loot DeserializeLengthDelimited(Stream stream, Loot instance, bool isDelta)
public Loot DeserializeLength(Stream stream, int length, Loot instance, bool isDelta)
public void SerializeDelta(Stream stream, Loot instance, Loot previous)
public void Serialize(Stream stream, Loot instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Loot instance)
public void SerializeLengthDelimited(Stream stream, Loot instance)
}
public ProtoBuf.LootableCorpse : object {
public Private privateData
public ulong playerID
public string playerName
public bool ShouldPool
private bool _disposed
public void ResetToPool(LootableCorpse instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, LootableCorpse previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(LootableCorpse instance)
public LootableCorpse Copy()
public LootableCorpse Deserialize(Stream stream)
public LootableCorpse DeserializeLengthDelimited(Stream stream)
public LootableCorpse DeserializeLength(Stream stream, int length)
public LootableCorpse Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public LootableCorpse Deserialize(Byte[] buffer, LootableCorpse instance, bool isDelta)
public LootableCorpse Deserialize(Stream stream, LootableCorpse instance, bool isDelta)
public LootableCorpse DeserializeLengthDelimited(Stream stream, LootableCorpse instance, bool isDelta)
public LootableCorpse DeserializeLength(Stream stream, int length, LootableCorpse instance, bool isDelta)
public void SerializeDelta(Stream stream, LootableCorpse instance, LootableCorpse previous)
public void Serialize(Stream stream, LootableCorpse instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(LootableCorpse instance)
public void SerializeLengthDelimited(Stream stream, LootableCorpse instance)
}
public ProtoBuf.Magazine : object {
public int capacity
public int contents
public int ammoType
public bool ShouldPool
private bool _disposed
public void ResetToPool(Magazine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Magazine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Magazine instance)
public Magazine Copy()
public Magazine Deserialize(Stream stream)
public Magazine DeserializeLengthDelimited(Stream stream)
public Magazine DeserializeLength(Stream stream, int length)
public Magazine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Magazine Deserialize(Byte[] buffer, Magazine instance, bool isDelta)
public Magazine Deserialize(Stream stream, Magazine instance, bool isDelta)
public Magazine DeserializeLengthDelimited(Stream stream, Magazine instance, bool isDelta)
public Magazine DeserializeLength(Stream stream, int length, Magazine instance, bool isDelta)
public void SerializeDelta(Stream stream, Magazine instance, Magazine previous)
public void Serialize(Stream stream, Magazine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Magazine instance)
public void SerializeLengthDelimited(Stream stream, Magazine instance)
}
public ProtoBuf.MapEntity : object {
public List`1<UInt32> fogImages
public List`1<UInt32> paintImages
public bool ShouldPool
private bool _disposed
public void ResetToPool(MapEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MapEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(MapEntity instance)
public MapEntity Copy()
public MapEntity Deserialize(Stream stream)
public MapEntity DeserializeLengthDelimited(Stream stream)
public MapEntity DeserializeLength(Stream stream, int length)
public MapEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public MapEntity Deserialize(Byte[] buffer, MapEntity instance, bool isDelta)
public MapEntity Deserialize(Stream stream, MapEntity instance, bool isDelta)
public MapEntity DeserializeLengthDelimited(Stream stream, MapEntity instance, bool isDelta)
public MapEntity DeserializeLength(Stream stream, int length, MapEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, MapEntity instance, MapEntity previous)
public void Serialize(Stream stream, MapEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MapEntity instance)
public void SerializeLengthDelimited(Stream stream, MapEntity instance)
}
public ProtoBuf.MiningQuarry : object {
public ResourceExtractor extractor
public bool ShouldPool
private bool _disposed
public void ResetToPool(MiningQuarry instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, MiningQuarry previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(MiningQuarry instance)
public MiningQuarry Copy()
public MiningQuarry Deserialize(Stream stream)
public MiningQuarry DeserializeLengthDelimited(Stream stream)
public MiningQuarry DeserializeLength(Stream stream, int length)
public MiningQuarry Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public MiningQuarry Deserialize(Byte[] buffer, MiningQuarry instance, bool isDelta)
public MiningQuarry Deserialize(Stream stream, MiningQuarry instance, bool isDelta)
public MiningQuarry DeserializeLengthDelimited(Stream stream, MiningQuarry instance, bool isDelta)
public MiningQuarry DeserializeLength(Stream stream, int length, MiningQuarry instance, bool isDelta)
public void SerializeDelta(Stream stream, MiningQuarry instance, MiningQuarry previous)
public void Serialize(Stream stream, MiningQuarry instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(MiningQuarry instance)
public void SerializeLengthDelimited(Stream stream, MiningQuarry instance)
}
public ProtoBuf.ModuleMessage : object {
public UInt32 itemid
public int moduleid
public int type
public Byte[] data
public bool ShouldPool
private bool _disposed
public void ResetToPool(ModuleMessage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ModuleMessage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(ModuleMessage instance)
public ModuleMessage Copy()
public ModuleMessage Deserialize(Stream stream)
public ModuleMessage DeserializeLengthDelimited(Stream stream)
public ModuleMessage DeserializeLength(Stream stream, int length)
public ModuleMessage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public ModuleMessage Deserialize(Byte[] buffer, ModuleMessage instance, bool isDelta)
public ModuleMessage Deserialize(Stream stream, ModuleMessage instance, bool isDelta)
public ModuleMessage DeserializeLengthDelimited(Stream stream, ModuleMessage instance, bool isDelta)
public ModuleMessage DeserializeLength(Stream stream, int length, ModuleMessage instance, bool isDelta)
public void SerializeDelta(Stream stream, ModuleMessage instance, ModuleMessage previous)
public void Serialize(Stream stream, ModuleMessage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ModuleMessage instance)
public void SerializeLengthDelimited(Stream stream, ModuleMessage instance)
}
public ProtoBuf.OwnerInfo : object {
public ulong steamid
public bool ShouldPool
private bool _disposed
public void ResetToPool(OwnerInfo instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, OwnerInfo previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(OwnerInfo instance)
public OwnerInfo Copy()
public OwnerInfo Deserialize(Stream stream)
public OwnerInfo DeserializeLengthDelimited(Stream stream)
public OwnerInfo DeserializeLength(Stream stream, int length)
public OwnerInfo Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public OwnerInfo Deserialize(Byte[] buffer, OwnerInfo instance, bool isDelta)
public OwnerInfo Deserialize(Stream stream, OwnerInfo instance, bool isDelta)
public OwnerInfo DeserializeLengthDelimited(Stream stream, OwnerInfo instance, bool isDelta)
public OwnerInfo DeserializeLength(Stream stream, int length, OwnerInfo instance, bool isDelta)
public void SerializeDelta(Stream stream, OwnerInfo instance, OwnerInfo previous)
public void Serialize(Stream stream, OwnerInfo instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(OwnerInfo instance)
public void SerializeLengthDelimited(Stream stream, OwnerInfo instance)
}
public ProtoBuf.ParentInfo : object {
public UInt32 uid
public UInt32 bone
public bool ShouldPool
private bool _disposed
public void ResetToPool(ParentInfo instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ParentInfo previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(ParentInfo instance)
public ParentInfo Copy()
public ParentInfo Deserialize(Stream stream)
public ParentInfo DeserializeLengthDelimited(Stream stream)
public ParentInfo DeserializeLength(Stream stream, int length)
public ParentInfo Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public ParentInfo Deserialize(Byte[] buffer, ParentInfo instance, bool isDelta)
public ParentInfo Deserialize(Stream stream, ParentInfo instance, bool isDelta)
public ParentInfo DeserializeLengthDelimited(Stream stream, ParentInfo instance, bool isDelta)
public ParentInfo DeserializeLength(Stream stream, int length, ParentInfo instance, bool isDelta)
public void SerializeDelta(Stream stream, ParentInfo instance, ParentInfo previous)
public void Serialize(Stream stream, ParentInfo instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ParentInfo instance)
public void SerializeLengthDelimited(Stream stream, ParentInfo instance)
}
public ProtoBuf.PersistantPlayer : object {
public List`1<int> unlockedItems
public int protocolVersion
public bool ShouldPool
private bool _disposed
public void ResetToPool(PersistantPlayer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PersistantPlayer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PersistantPlayer instance)
public PersistantPlayer Copy()
public PersistantPlayer Deserialize(Stream stream)
public PersistantPlayer DeserializeLengthDelimited(Stream stream)
public PersistantPlayer DeserializeLength(Stream stream, int length)
public PersistantPlayer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PersistantPlayer Deserialize(Byte[] buffer, PersistantPlayer instance, bool isDelta)
public PersistantPlayer Deserialize(Stream stream, PersistantPlayer instance, bool isDelta)
public PersistantPlayer DeserializeLengthDelimited(Stream stream, PersistantPlayer instance, bool isDelta)
public PersistantPlayer DeserializeLength(Stream stream, int length, PersistantPlayer instance, bool isDelta)
public void SerializeDelta(Stream stream, PersistantPlayer instance, PersistantPlayer previous)
public void Serialize(Stream stream, PersistantPlayer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PersistantPlayer instance)
public void SerializeLengthDelimited(Stream stream, PersistantPlayer instance)
}
public ProtoBuf.PlantEntity : object {
public int state
public float age
public int genetics
public int water
public float healthy
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlantEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlantEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlantEntity instance)
public PlantEntity Copy()
public PlantEntity Deserialize(Stream stream)
public PlantEntity DeserializeLengthDelimited(Stream stream)
public PlantEntity DeserializeLength(Stream stream, int length)
public PlantEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlantEntity Deserialize(Byte[] buffer, PlantEntity instance, bool isDelta)
public PlantEntity Deserialize(Stream stream, PlantEntity instance, bool isDelta)
public PlantEntity DeserializeLengthDelimited(Stream stream, PlantEntity instance, bool isDelta)
public PlantEntity DeserializeLength(Stream stream, int length, PlantEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, PlantEntity instance, PlantEntity previous)
public void Serialize(Stream stream, PlantEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlantEntity instance)
public void SerializeLengthDelimited(Stream stream, PlantEntity instance)
}
public ProtoBuf.PlayerAttack : object {
public Attack attack
public int projectileID
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerAttack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerAttack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerAttack instance)
public PlayerAttack Copy()
public PlayerAttack Deserialize(Stream stream)
public PlayerAttack DeserializeLengthDelimited(Stream stream)
public PlayerAttack DeserializeLength(Stream stream, int length)
public PlayerAttack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerAttack Deserialize(Byte[] buffer, PlayerAttack instance, bool isDelta)
public PlayerAttack Deserialize(Stream stream, PlayerAttack instance, bool isDelta)
public PlayerAttack DeserializeLengthDelimited(Stream stream, PlayerAttack instance, bool isDelta)
public PlayerAttack DeserializeLength(Stream stream, int length, PlayerAttack instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerAttack instance, PlayerAttack previous)
public void Serialize(Stream stream, PlayerAttack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerAttack instance)
public void SerializeLengthDelimited(Stream stream, PlayerAttack instance)
}
public ProtoBuf.PlayerInventory : object {
public ItemContainer invMain
public ItemContainer invBelt
public ItemContainer invWear
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerInventory instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerInventory previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerInventory instance)
public PlayerInventory Copy()
public PlayerInventory Deserialize(Stream stream)
public PlayerInventory DeserializeLengthDelimited(Stream stream)
public PlayerInventory DeserializeLength(Stream stream, int length)
public PlayerInventory Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerInventory Deserialize(Byte[] buffer, PlayerInventory instance, bool isDelta)
public PlayerInventory Deserialize(Stream stream, PlayerInventory instance, bool isDelta)
public PlayerInventory DeserializeLengthDelimited(Stream stream, PlayerInventory instance, bool isDelta)
public PlayerInventory DeserializeLength(Stream stream, int length, PlayerInventory instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerInventory instance, PlayerInventory previous)
public void Serialize(Stream stream, PlayerInventory instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerInventory instance)
public void SerializeLengthDelimited(Stream stream, PlayerInventory instance)
}
public ProtoBuf.PlayerLifeStory : object {
public float secondsAlive
public float metersWalked
public float metersRun
public float secondsSleeping
public UInt32 timeBorn
public UInt32 timeDied
public DeathInfo deathInfo
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerLifeStory instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerLifeStory previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerLifeStory instance)
public PlayerLifeStory Copy()
public PlayerLifeStory Deserialize(Stream stream)
public PlayerLifeStory DeserializeLengthDelimited(Stream stream)
public PlayerLifeStory DeserializeLength(Stream stream, int length)
public PlayerLifeStory Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerLifeStory Deserialize(Byte[] buffer, PlayerLifeStory instance, bool isDelta)
public PlayerLifeStory Deserialize(Stream stream, PlayerLifeStory instance, bool isDelta)
public PlayerLifeStory DeserializeLengthDelimited(Stream stream, PlayerLifeStory instance, bool isDelta)
public PlayerLifeStory DeserializeLength(Stream stream, int length, PlayerLifeStory instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerLifeStory instance, PlayerLifeStory previous)
public void Serialize(Stream stream, PlayerLifeStory instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerLifeStory instance)
public void SerializeLengthDelimited(Stream stream, PlayerLifeStory instance)
}
public ProtoBuf.PlayerMetabolism : object {
public float health
public float calories
public float hydration
public float heartrate
public float temperature
public float poison
public float radiation_level
public float wetness
public float dirtyness
public float oxygen
public float bleeding
public float radiation_poisoning
public float comfort
public float pending_health
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerMetabolism instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerMetabolism previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerMetabolism instance)
public PlayerMetabolism Copy()
public PlayerMetabolism Deserialize(Stream stream)
public PlayerMetabolism DeserializeLengthDelimited(Stream stream)
public PlayerMetabolism DeserializeLength(Stream stream, int length)
public PlayerMetabolism Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerMetabolism Deserialize(Byte[] buffer, PlayerMetabolism instance, bool isDelta)
public PlayerMetabolism Deserialize(Stream stream, PlayerMetabolism instance, bool isDelta)
public PlayerMetabolism DeserializeLengthDelimited(Stream stream, PlayerMetabolism instance, bool isDelta)
public PlayerMetabolism DeserializeLength(Stream stream, int length, PlayerMetabolism instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerMetabolism instance, PlayerMetabolism previous)
public void Serialize(Stream stream, PlayerMetabolism instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerMetabolism instance)
public void SerializeLengthDelimited(Stream stream, PlayerMetabolism instance)
}
public ProtoBuf.PlayerNameID : object {
public string username
public ulong userid
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerNameID instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerNameID previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerNameID instance)
public PlayerNameID Copy()
public PlayerNameID Deserialize(Stream stream)
public PlayerNameID DeserializeLengthDelimited(Stream stream)
public PlayerNameID DeserializeLength(Stream stream, int length)
public PlayerNameID Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerNameID Deserialize(Byte[] buffer, PlayerNameID instance, bool isDelta)
public PlayerNameID Deserialize(Stream stream, PlayerNameID instance, bool isDelta)
public PlayerNameID DeserializeLengthDelimited(Stream stream, PlayerNameID instance, bool isDelta)
public PlayerNameID DeserializeLength(Stream stream, int length, PlayerNameID instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerNameID instance, PlayerNameID previous)
public void Serialize(Stream stream, PlayerNameID instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerNameID instance)
public void SerializeLengthDelimited(Stream stream, PlayerNameID instance)
}
public ProtoBuf.PlayerProjectileAttack : object {
public PlayerAttack playerAttack
public Vector3 hitVelocity
public float hitDistance
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerProjectileAttack instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerProjectileAttack previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerProjectileAttack instance)
public PlayerProjectileAttack Copy()
public PlayerProjectileAttack Deserialize(Stream stream)
public PlayerProjectileAttack DeserializeLengthDelimited(Stream stream)
public PlayerProjectileAttack DeserializeLength(Stream stream, int length)
public PlayerProjectileAttack Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerProjectileAttack Deserialize(Byte[] buffer, PlayerProjectileAttack instance, bool isDelta)
public PlayerProjectileAttack Deserialize(Stream stream, PlayerProjectileAttack instance, bool isDelta)
public PlayerProjectileAttack DeserializeLengthDelimited(Stream stream, PlayerProjectileAttack instance, bool isDelta)
public PlayerProjectileAttack DeserializeLength(Stream stream, int length, PlayerProjectileAttack instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerProjectileAttack instance, PlayerProjectileAttack previous)
public void Serialize(Stream stream, PlayerProjectileAttack instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerProjectileAttack instance)
public void SerializeLengthDelimited(Stream stream, PlayerProjectileAttack instance)
}
public ProtoBuf.PlayerProjectileRicochet : object {
public int projectileID
public Vector3 hitPosition
public Vector3 inVelocity
public Vector3 outVelocity
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerProjectileRicochet instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerProjectileRicochet previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerProjectileRicochet instance)
public PlayerProjectileRicochet Copy()
public PlayerProjectileRicochet Deserialize(Stream stream)
public PlayerProjectileRicochet DeserializeLengthDelimited(Stream stream)
public PlayerProjectileRicochet DeserializeLength(Stream stream, int length)
public PlayerProjectileRicochet Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerProjectileRicochet Deserialize(Byte[] buffer, PlayerProjectileRicochet instance, bool isDelta)
public PlayerProjectileRicochet Deserialize(Stream stream, PlayerProjectileRicochet instance, bool isDelta)
public PlayerProjectileRicochet DeserializeLengthDelimited(Stream stream, PlayerProjectileRicochet instance, bool isDelta)
public PlayerProjectileRicochet DeserializeLength(Stream stream, int length, PlayerProjectileRicochet instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerProjectileRicochet instance, PlayerProjectileRicochet previous)
public void Serialize(Stream stream, PlayerProjectileRicochet instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerProjectileRicochet instance)
public void SerializeLengthDelimited(Stream stream, PlayerProjectileRicochet instance)
}
public ProtoBuf.PlayerProjectileUpdate : object {
public int projectileID
public Vector3 curPosition
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerProjectileUpdate instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerProjectileUpdate previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerProjectileUpdate instance)
public PlayerProjectileUpdate Copy()
public PlayerProjectileUpdate Deserialize(Stream stream)
public PlayerProjectileUpdate DeserializeLengthDelimited(Stream stream)
public PlayerProjectileUpdate DeserializeLength(Stream stream, int length)
public PlayerProjectileUpdate Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerProjectileUpdate Deserialize(Byte[] buffer, PlayerProjectileUpdate instance, bool isDelta)
public PlayerProjectileUpdate Deserialize(Stream stream, PlayerProjectileUpdate instance, bool isDelta)
public PlayerProjectileUpdate DeserializeLengthDelimited(Stream stream, PlayerProjectileUpdate instance, bool isDelta)
public PlayerProjectileUpdate DeserializeLength(Stream stream, int length, PlayerProjectileUpdate instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerProjectileUpdate instance, PlayerProjectileUpdate previous)
public void Serialize(Stream stream, PlayerProjectileUpdate instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerProjectileUpdate instance)
public void SerializeLengthDelimited(Stream stream, PlayerProjectileUpdate instance)
}
public ProtoBuf.PlayerUpdateLoot : object {
public UInt32 itemID
public UInt32 entityID
public List`1<ItemContainer> containers
public bool ShouldPool
private bool _disposed
public void ResetToPool(PlayerUpdateLoot instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, PlayerUpdateLoot previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(PlayerUpdateLoot instance)
public PlayerUpdateLoot Copy()
public PlayerUpdateLoot Deserialize(Stream stream)
public PlayerUpdateLoot DeserializeLengthDelimited(Stream stream)
public PlayerUpdateLoot DeserializeLength(Stream stream, int length)
public PlayerUpdateLoot Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public PlayerUpdateLoot Deserialize(Byte[] buffer, PlayerUpdateLoot instance, bool isDelta)
public PlayerUpdateLoot Deserialize(Stream stream, PlayerUpdateLoot instance, bool isDelta)
public PlayerUpdateLoot DeserializeLengthDelimited(Stream stream, PlayerUpdateLoot instance, bool isDelta)
public PlayerUpdateLoot DeserializeLength(Stream stream, int length, PlayerUpdateLoot instance, bool isDelta)
public void SerializeDelta(Stream stream, PlayerUpdateLoot instance, PlayerUpdateLoot previous)
public void Serialize(Stream stream, PlayerUpdateLoot instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(PlayerUpdateLoot instance)
public void SerializeLengthDelimited(Stream stream, PlayerUpdateLoot instance)
}
public ProtoBuf.ProjectileShoot : object {
public int ammoType
public List`1<Projectile> projectiles
public bool ShouldPool
private bool _disposed
public void ResetToPool(ProjectileShoot instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ProjectileShoot previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(ProjectileShoot instance)
public ProjectileShoot Copy()
public ProjectileShoot Deserialize(Stream stream)
public ProjectileShoot DeserializeLengthDelimited(Stream stream)
public ProjectileShoot DeserializeLength(Stream stream, int length)
public ProjectileShoot Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public ProjectileShoot Deserialize(Byte[] buffer, ProjectileShoot instance, bool isDelta)
public ProjectileShoot Deserialize(Stream stream, ProjectileShoot instance, bool isDelta)
public ProjectileShoot DeserializeLengthDelimited(Stream stream, ProjectileShoot instance, bool isDelta)
public ProjectileShoot DeserializeLength(Stream stream, int length, ProjectileShoot instance, bool isDelta)
public void SerializeDelta(Stream stream, ProjectileShoot instance, ProjectileShoot previous)
public void Serialize(Stream stream, ProjectileShoot instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ProjectileShoot instance)
public void SerializeLengthDelimited(Stream stream, ProjectileShoot instance)
}
public ProtoBuf.ResearchTable : object {
public float researchTimeLeft
public bool ShouldPool
private bool _disposed
public void ResetToPool(ResearchTable instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ResearchTable previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(ResearchTable instance)
public ResearchTable Copy()
public ResearchTable Deserialize(Stream stream)
public ResearchTable DeserializeLengthDelimited(Stream stream)
public ResearchTable DeserializeLength(Stream stream, int length)
public ResearchTable Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public ResearchTable Deserialize(Byte[] buffer, ResearchTable instance, bool isDelta)
public ResearchTable Deserialize(Stream stream, ResearchTable instance, bool isDelta)
public ResearchTable DeserializeLengthDelimited(Stream stream, ResearchTable instance, bool isDelta)
public ResearchTable DeserializeLength(Stream stream, int length, ResearchTable instance, bool isDelta)
public void SerializeDelta(Stream stream, ResearchTable instance, ResearchTable previous)
public void Serialize(Stream stream, ResearchTable instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ResearchTable instance)
public void SerializeLengthDelimited(Stream stream, ResearchTable instance)
}
public ProtoBuf.ResourceExtractor : object {
public ItemContainer fuelContents
public ItemContainer outputContents
public bool ShouldPool
private bool _disposed
public void ResetToPool(ResourceExtractor instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ResourceExtractor previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(ResourceExtractor instance)
public ResourceExtractor Copy()
public ResourceExtractor Deserialize(Stream stream)
public ResourceExtractor DeserializeLengthDelimited(Stream stream)
public ResourceExtractor DeserializeLength(Stream stream, int length)
public ResourceExtractor Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public ResourceExtractor Deserialize(Byte[] buffer, ResourceExtractor instance, bool isDelta)
public ResourceExtractor Deserialize(Stream stream, ResourceExtractor instance, bool isDelta)
public ResourceExtractor DeserializeLengthDelimited(Stream stream, ResourceExtractor instance, bool isDelta)
public ResourceExtractor DeserializeLength(Stream stream, int length, ResourceExtractor instance, bool isDelta)
public void SerializeDelta(Stream stream, ResourceExtractor instance, ResourceExtractor previous)
public void Serialize(Stream stream, ResourceExtractor instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ResourceExtractor instance)
public void SerializeLengthDelimited(Stream stream, ResourceExtractor instance)
}
public ProtoBuf.RespawnInformation : object {
public List`1<SpawnOptions> spawnOptions
public PlayerLifeStory previousLife
public bool fadeIn
public bool ShouldPool
private bool _disposed
public void ResetToPool(RespawnInformation instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, RespawnInformation previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(RespawnInformation instance)
public RespawnInformation Copy()
public RespawnInformation Deserialize(Stream stream)
public RespawnInformation DeserializeLengthDelimited(Stream stream)
public RespawnInformation DeserializeLength(Stream stream, int length)
public RespawnInformation Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public RespawnInformation Deserialize(Byte[] buffer, RespawnInformation instance, bool isDelta)
public RespawnInformation Deserialize(Stream stream, RespawnInformation instance, bool isDelta)
public RespawnInformation DeserializeLengthDelimited(Stream stream, RespawnInformation instance, bool isDelta)
public RespawnInformation DeserializeLength(Stream stream, int length, RespawnInformation instance, bool isDelta)
public void SerializeDelta(Stream stream, RespawnInformation instance, RespawnInformation previous)
public void Serialize(Stream stream, RespawnInformation instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(RespawnInformation instance)
public void SerializeLengthDelimited(Stream stream, RespawnInformation instance)
}
public ProtoBuf.ServerGib : object {
public string gibName
public bool ShouldPool
private bool _disposed
public void ResetToPool(ServerGib instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, ServerGib previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(ServerGib instance)
public ServerGib Copy()
public ServerGib Deserialize(Stream stream)
public ServerGib DeserializeLengthDelimited(Stream stream)
public ServerGib DeserializeLength(Stream stream, int length)
public ServerGib Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public ServerGib Deserialize(Byte[] buffer, ServerGib instance, bool isDelta)
public ServerGib Deserialize(Stream stream, ServerGib instance, bool isDelta)
public ServerGib DeserializeLengthDelimited(Stream stream, ServerGib instance, bool isDelta)
public ServerGib DeserializeLength(Stream stream, int length, ServerGib instance, bool isDelta)
public void SerializeDelta(Stream stream, ServerGib instance, ServerGib previous)
public void Serialize(Stream stream, ServerGib instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(ServerGib instance)
public void SerializeLengthDelimited(Stream stream, ServerGib instance)
}
public ProtoBuf.Sign : object {
public UInt32 imageid
public bool ShouldPool
private bool _disposed
public void ResetToPool(Sign instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Sign previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Sign instance)
public Sign Copy()
public Sign Deserialize(Stream stream)
public Sign DeserializeLengthDelimited(Stream stream)
public Sign DeserializeLength(Stream stream, int length)
public Sign Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Sign Deserialize(Byte[] buffer, Sign instance, bool isDelta)
public Sign Deserialize(Stream stream, Sign instance, bool isDelta)
public Sign DeserializeLengthDelimited(Stream stream, Sign instance, bool isDelta)
public Sign DeserializeLength(Stream stream, int length, Sign instance, bool isDelta)
public void SerializeDelta(Stream stream, Sign instance, Sign previous)
public void Serialize(Stream stream, Sign instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Sign instance)
public void SerializeLengthDelimited(Stream stream, Sign instance)
}
public ProtoBuf.SleepingBag : object {
public string name
public Private privateData
public ulong deployerID
public bool ShouldPool
private bool _disposed
public void ResetToPool(SleepingBag instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SleepingBag previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(SleepingBag instance)
public SleepingBag Copy()
public SleepingBag Deserialize(Stream stream)
public SleepingBag DeserializeLengthDelimited(Stream stream)
public SleepingBag DeserializeLength(Stream stream, int length)
public SleepingBag Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public SleepingBag Deserialize(Byte[] buffer, SleepingBag instance, bool isDelta)
public SleepingBag Deserialize(Stream stream, SleepingBag instance, bool isDelta)
public SleepingBag DeserializeLengthDelimited(Stream stream, SleepingBag instance, bool isDelta)
public SleepingBag DeserializeLength(Stream stream, int length, SleepingBag instance, bool isDelta)
public void SerializeDelta(Stream stream, SleepingBag instance, SleepingBag previous)
public void Serialize(Stream stream, SleepingBag instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SleepingBag instance)
public void SerializeLengthDelimited(Stream stream, SleepingBag instance)
}
public ProtoBuf.Spawnable : object {
public UInt32 population
public bool ShouldPool
private bool _disposed
public void ResetToPool(Spawnable instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, Spawnable previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(Spawnable instance)
public Spawnable Copy()
public Spawnable Deserialize(Stream stream)
public Spawnable DeserializeLengthDelimited(Stream stream)
public Spawnable DeserializeLength(Stream stream, int length)
public Spawnable Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public Spawnable Deserialize(Byte[] buffer, Spawnable instance, bool isDelta)
public Spawnable Deserialize(Stream stream, Spawnable instance, bool isDelta)
public Spawnable DeserializeLengthDelimited(Stream stream, Spawnable instance, bool isDelta)
public Spawnable DeserializeLength(Stream stream, int length, Spawnable instance, bool isDelta)
public void SerializeDelta(Stream stream, Spawnable instance, Spawnable previous)
public void Serialize(Stream stream, Spawnable instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(Spawnable instance)
public void SerializeLengthDelimited(Stream stream, Spawnable instance)
}
public ProtoBuf.SphereEntity : object {
public float radius
public bool ShouldPool
private bool _disposed
public void ResetToPool(SphereEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SphereEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(SphereEntity instance)
public SphereEntity Copy()
public SphereEntity Deserialize(Stream stream)
public SphereEntity DeserializeLengthDelimited(Stream stream)
public SphereEntity DeserializeLength(Stream stream, int length)
public SphereEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public SphereEntity Deserialize(Byte[] buffer, SphereEntity instance, bool isDelta)
public SphereEntity Deserialize(Stream stream, SphereEntity instance, bool isDelta)
public SphereEntity DeserializeLengthDelimited(Stream stream, SphereEntity instance, bool isDelta)
public SphereEntity DeserializeLength(Stream stream, int length, SphereEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, SphereEntity instance, SphereEntity previous)
public void Serialize(Stream stream, SphereEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SphereEntity instance)
public void SerializeLengthDelimited(Stream stream, SphereEntity instance)
}
public ProtoBuf.SpinnerWheel : object {
public Vector3 spin
public bool ShouldPool
private bool _disposed
public void ResetToPool(SpinnerWheel instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, SpinnerWheel previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(SpinnerWheel instance)
public SpinnerWheel Copy()
public SpinnerWheel Deserialize(Stream stream)
public SpinnerWheel DeserializeLengthDelimited(Stream stream)
public SpinnerWheel DeserializeLength(Stream stream, int length)
public SpinnerWheel Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public SpinnerWheel Deserialize(Byte[] buffer, SpinnerWheel instance, bool isDelta)
public SpinnerWheel Deserialize(Stream stream, SpinnerWheel instance, bool isDelta)
public SpinnerWheel DeserializeLengthDelimited(Stream stream, SpinnerWheel instance, bool isDelta)
public SpinnerWheel DeserializeLength(Stream stream, int length, SpinnerWheel instance, bool isDelta)
public void SerializeDelta(Stream stream, SpinnerWheel instance, SpinnerWheel previous)
public void Serialize(Stream stream, SpinnerWheel instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(SpinnerWheel instance)
public void SerializeLengthDelimited(Stream stream, SpinnerWheel instance)
}
public ProtoBuf.StabilityEntity : object {
public float stability
public int distanceFromGround
public bool ShouldPool
private bool _disposed
public void ResetToPool(StabilityEntity instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, StabilityEntity previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(StabilityEntity instance)
public StabilityEntity Copy()
public StabilityEntity Deserialize(Stream stream)
public StabilityEntity DeserializeLengthDelimited(Stream stream)
public StabilityEntity DeserializeLength(Stream stream, int length)
public StabilityEntity Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public StabilityEntity Deserialize(Byte[] buffer, StabilityEntity instance, bool isDelta)
public StabilityEntity Deserialize(Stream stream, StabilityEntity instance, bool isDelta)
public StabilityEntity DeserializeLengthDelimited(Stream stream, StabilityEntity instance, bool isDelta)
public StabilityEntity DeserializeLength(Stream stream, int length, StabilityEntity instance, bool isDelta)
public void SerializeDelta(Stream stream, StabilityEntity instance, StabilityEntity previous)
public void Serialize(Stream stream, StabilityEntity instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(StabilityEntity instance)
public void SerializeLengthDelimited(Stream stream, StabilityEntity instance)
}
public ProtoBuf.StorageBox : object {
public ItemContainer contents
public bool ShouldPool
private bool _disposed
public void ResetToPool(StorageBox instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, StorageBox previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(StorageBox instance)
public StorageBox Copy()
public StorageBox Deserialize(Stream stream)
public StorageBox DeserializeLengthDelimited(Stream stream)
public StorageBox DeserializeLength(Stream stream, int length)
public StorageBox Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public StorageBox Deserialize(Byte[] buffer, StorageBox instance, bool isDelta)
public StorageBox Deserialize(Stream stream, StorageBox instance, bool isDelta)
public StorageBox DeserializeLengthDelimited(Stream stream, StorageBox instance, bool isDelta)
public StorageBox DeserializeLength(Stream stream, int length, StorageBox instance, bool isDelta)
public void SerializeDelta(Stream stream, StorageBox instance, StorageBox previous)
public void Serialize(Stream stream, StorageBox instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(StorageBox instance)
public void SerializeLengthDelimited(Stream stream, StorageBox instance)
}
public ProtoBuf.TakeDamage : object {
public float amount
public Vector3 direction
public int type
public bool ShouldPool
private bool _disposed
public void ResetToPool(TakeDamage instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, TakeDamage previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(TakeDamage instance)
public TakeDamage Copy()
public TakeDamage Deserialize(Stream stream)
public TakeDamage DeserializeLengthDelimited(Stream stream)
public TakeDamage DeserializeLength(Stream stream, int length)
public TakeDamage Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public TakeDamage Deserialize(Byte[] buffer, TakeDamage instance, bool isDelta)
public TakeDamage Deserialize(Stream stream, TakeDamage instance, bool isDelta)
public TakeDamage DeserializeLengthDelimited(Stream stream, TakeDamage instance, bool isDelta)
public TakeDamage DeserializeLength(Stream stream, int length, TakeDamage instance, bool isDelta)
public void SerializeDelta(Stream stream, TakeDamage instance, TakeDamage previous)
public void Serialize(Stream stream, TakeDamage instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(TakeDamage instance)
public void SerializeLengthDelimited(Stream stream, TakeDamage instance)
}
public ProtoBuf.UpdateItem : object {
public Item item
public bool ShouldPool
private bool _disposed
public void ResetToPool(UpdateItem instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, UpdateItem previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(UpdateItem instance)
public UpdateItem Copy()
public UpdateItem Deserialize(Stream stream)
public UpdateItem DeserializeLengthDelimited(Stream stream)
public UpdateItem DeserializeLength(Stream stream, int length)
public UpdateItem Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public UpdateItem Deserialize(Byte[] buffer, UpdateItem instance, bool isDelta)
public UpdateItem Deserialize(Stream stream, UpdateItem instance, bool isDelta)
public UpdateItem DeserializeLengthDelimited(Stream stream, UpdateItem instance, bool isDelta)
public UpdateItem DeserializeLength(Stream stream, int length, UpdateItem instance, bool isDelta)
public void SerializeDelta(Stream stream, UpdateItem instance, UpdateItem previous)
public void Serialize(Stream stream, UpdateItem instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(UpdateItem instance)
public void SerializeLengthDelimited(Stream stream, UpdateItem instance)
}
public ProtoBuf.UpdateItemContainer : object {
public int type
public List`1<ItemContainer> container
public bool ShouldPool
private bool _disposed
public void ResetToPool(UpdateItemContainer instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, UpdateItemContainer previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(UpdateItemContainer instance)
public UpdateItemContainer Copy()
public UpdateItemContainer Deserialize(Stream stream)
public UpdateItemContainer DeserializeLengthDelimited(Stream stream)
public UpdateItemContainer DeserializeLength(Stream stream, int length)
public UpdateItemContainer Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public UpdateItemContainer Deserialize(Byte[] buffer, UpdateItemContainer instance, bool isDelta)
public UpdateItemContainer Deserialize(Stream stream, UpdateItemContainer instance, bool isDelta)
public UpdateItemContainer DeserializeLengthDelimited(Stream stream, UpdateItemContainer instance, bool isDelta)
public UpdateItemContainer DeserializeLength(Stream stream, int length, UpdateItemContainer instance, bool isDelta)
public void SerializeDelta(Stream stream, UpdateItemContainer instance, UpdateItemContainer previous)
public void Serialize(Stream stream, UpdateItemContainer instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(UpdateItemContainer instance)
public void SerializeLengthDelimited(Stream stream, UpdateItemContainer instance)
}
public ProtoBuf.VendingMachine : object {
public SellOrderContainer sellOrderContainer
public string shopName
public bool ShouldPool
private bool _disposed
public void ResetToPool(VendingMachine instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, VendingMachine previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(VendingMachine instance)
public VendingMachine Copy()
public VendingMachine Deserialize(Stream stream)
public VendingMachine DeserializeLengthDelimited(Stream stream)
public VendingMachine DeserializeLength(Stream stream, int length)
public VendingMachine Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public VendingMachine Deserialize(Byte[] buffer, VendingMachine instance, bool isDelta)
public VendingMachine Deserialize(Stream stream, VendingMachine instance, bool isDelta)
public VendingMachine DeserializeLengthDelimited(Stream stream, VendingMachine instance, bool isDelta)
public VendingMachine DeserializeLength(Stream stream, int length, VendingMachine instance, bool isDelta)
public void SerializeDelta(Stream stream, VendingMachine instance, VendingMachine previous)
public void Serialize(Stream stream, VendingMachine instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(VendingMachine instance)
public void SerializeLengthDelimited(Stream stream, VendingMachine instance)
}
public ProtoBuf.WorldItem : object {
public Item item
public bool ShouldPool
private bool _disposed
public void ResetToPool(WorldItem instance)
public void ResetToPool()
public void Dispose()
public void EnterPool()
public void LeavePool()
public void WriteToStream(Stream stream)
public void WriteToStreamDelta(Stream stream, WorldItem previous)
public void ReadFromStream(Stream stream, int size, bool isDelta)
public void CopyTo(WorldItem instance)
public WorldItem Copy()
public WorldItem Deserialize(Stream stream)
public WorldItem DeserializeLengthDelimited(Stream stream)
public WorldItem DeserializeLength(Stream stream, int length)
public WorldItem Deserialize(Byte[] buffer)
public void FromProto(Stream stream, bool isDelta)
public WorldItem Deserialize(Byte[] buffer, WorldItem instance, bool isDelta)
public WorldItem Deserialize(Stream stream, WorldItem instance, bool isDelta)
public WorldItem DeserializeLengthDelimited(Stream stream, WorldItem instance, bool isDelta)
public WorldItem DeserializeLength(Stream stream, int length, WorldItem instance, bool isDelta)
public void SerializeDelta(Stream stream, WorldItem instance, WorldItem previous)
public void Serialize(Stream stream, WorldItem instance)
public Byte[] ToProtoBytes()
public void ToProto(Stream stream)
public Byte[] SerializeToBytes(WorldItem instance)
public void SerializeLengthDelimited(Stream stream, WorldItem instance)
}
public SilentOrbit.ProtocolBuffers.IProto {
public void WriteToStream(Stream stream)
public void ReadFromStream(Stream stream, int size, bool isDelta)
}
public SilentOrbit.ProtocolBuffers.Key : ValueType {
private UInt32 <Field>k__BackingField
private Wire <WireType>k__BackingField
public UInt32 Field
public Wire WireType
public UInt32 get_Field()
public void set_Field(UInt32 value)
public Wire get_WireType()
public void set_WireType(Wire value)
public void .ctor(UInt32 field, Wire wireType)
public string ToString()
}
public SilentOrbit.ProtocolBuffers.KeyValue : object {
private Key <Key>k__BackingField
private Byte[] <Value>k__BackingField
public Key Key
public Byte[] Value
public Key get_Key()
public void set_Key(Key value)
public Byte[] get_Value()
public void set_Value(Byte[] value)
public void .ctor(Key key, Byte[] value)
public string ToString()
}
public SilentOrbit.ProtocolBuffers.ProtocolBufferException : Exception {
public void .ctor(string message)
}
public SilentOrbit.ProtocolBuffers.ProtocolParser : object {
private Byte[] staticBuffer
public float ReadSingle(Stream stream)
public void WriteSingle(Stream stream, float f)
public string ReadString(Stream stream)
public Byte[] ReadBytes(Stream stream)
public void SkipBytes(Stream stream)
public void WriteString(Stream stream, string val)
public void WriteBytes(Stream stream, Byte[] val)
public ulong ReadFixed64(BinaryReader reader)
public long ReadSFixed64(BinaryReader reader)
public UInt32 ReadFixed32(BinaryReader reader)
public int ReadSFixed32(BinaryReader reader)
public void WriteFixed64(BinaryWriter writer, ulong val)
public void WriteSFixed64(BinaryWriter writer, long val)
public void WriteFixed32(BinaryWriter writer, UInt32 val)
public void WriteSFixed32(BinaryWriter writer, int val)
public float ReadFloat(BinaryReader reader)
public double ReadDouble(BinaryReader reader)
public void WriteFloat(BinaryWriter writer, float val)
public void WriteDouble(BinaryWriter writer, double val)
public Key ReadKey(Stream stream)
public Key ReadKey(byte firstByte, Stream stream)
public void WriteKey(Stream stream, Key key)
public void SkipKey(Stream stream, Key key)
public Byte[] ReadValueBytes(Stream stream, Key key)
public void ReadSkipVarInt(Stream stream)
public Byte[] ReadVarIntBytes(Stream stream)
public int ReadInt32(Stream stream)
public void WriteInt32(Stream stream, int val)
public int ReadZInt32(Stream stream)
public void WriteZInt32(Stream stream, int val)
public UInt32 ReadUInt32(Stream stream)
public void WriteUInt32(Stream stream, UInt32 val)
public int ReadInt64(Stream stream)
public void WriteInt64(Stream stream, int val)
public long ReadZInt64(Stream stream)
public void WriteZInt64(Stream stream, long val)
public ulong ReadUInt64(Stream stream)
public void WriteUInt64(Stream stream, ulong val)
public bool ReadBool(Stream stream)
public void WriteBool(Stream stream, bool val)
}
public SilentOrbit.ProtocolBuffers.Wire : Enum {
public int value__
public Wire Varint
public Wire Fixed64
public Wire LengthDelimited
public Wire Fixed32
}
public UnityEngine.RaySerialized : object {
public void ResetToPool(Ray instance)
public Ray Deserialize(Byte[] buffer, Ray& instance, bool isDelta)
public Ray Deserialize(Stream stream, Ray& instance, bool isDelta)
public Ray DeserializeLengthDelimited(Stream stream, Ray& instance, bool isDelta)
public Ray DeserializeLength(Stream stream, int length, Ray& instance, bool isDelta)
public void SerializeDelta(Stream stream, Ray instance, Ray previous)
public void Serialize(Stream stream, Ray instance)
public Byte[] SerializeToBytes(Ray instance)
public void SerializeLengthDelimited(Stream stream, Ray instance)
}
public UnityEngine.Vector3Serialized : object {
public void ResetToPool(Vector3 instance)
public Vector3 Deserialize(Byte[] buffer, Vector3& instance, bool isDelta)
public Vector3 Deserialize(Stream stream, Vector3& instance, bool isDelta)
public Vector3 DeserializeLengthDelimited(Stream stream, Vector3& instance, bool isDelta)
public Vector3 DeserializeLength(Stream stream, int length, Vector3& instance, bool isDelta)
public void SerializeDelta(Stream stream, Vector3 instance, Vector3 previous)
public void Serialize(Stream stream, Vector3 instance)
public Byte[] SerializeToBytes(Vector3 instance)
public void SerializeLengthDelimited(Stream stream, Vector3 instance)
}
