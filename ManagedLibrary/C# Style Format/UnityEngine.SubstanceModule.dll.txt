[ObsoleteAttribute("Built-in support for Substance Designer materials has been removed from Unity. To continue using Substance Designer materials, you will need to install Allegorithmic's external importer from the Asset Store.", "True")]
[EditorBrowsableAttribute("1")]
public enum UnityEngine.ProceduralCacheSize : Enum {
    public int value__;
    public static ProceduralCacheSize Tiny;
    public static ProceduralCacheSize Medium;
    public static ProceduralCacheSize Heavy;
    public static ProceduralCacheSize NoLimit;
    public static ProceduralCacheSize None;
}
[ObsoleteAttribute("Built-in support for Substance Designer materials has been removed from Unity. To continue using Substance Designer materials, you will need to install Allegorithmic's external importer from the Asset Store.", "True")]
[EditorBrowsableAttribute("1")]
public enum UnityEngine.ProceduralLoadingBehavior : Enum {
    public int value__;
    public static ProceduralLoadingBehavior DoNothing;
    public static ProceduralLoadingBehavior Generate;
    public static ProceduralLoadingBehavior BakeAndKeep;
    public static ProceduralLoadingBehavior BakeAndDiscard;
    public static ProceduralLoadingBehavior Cache;
    public static ProceduralLoadingBehavior DoNothingAndCache;
}
[ObsoleteAttribute("Built-in support for Substance Designer materials has been removed from Unity. To continue using Substance Designer materials, you will need to install Allegorithmic's external importer from the Asset Store.", "True")]
[ExcludeFromPresetAttribute]
[EditorBrowsableAttribute("1")]
public class UnityEngine.ProceduralMaterial : Material {
    public ProceduralCacheSize cacheSize { get; public set; }
    public int animationUpdateRate { get; public set; }
    public bool isProcessing { get; }
    public bool isCachedDataAvailable { get; }
    public bool isLoadTimeGenerated { get; public set; }
    public ProceduralLoadingBehavior loadingBehavior { get; }
    public static bool isSupported { get; }
    public static ProceduralProcessorUsage substanceProcessorUsage { get; public set; }
    public string preset { get; public set; }
    public bool isReadable { get; public set; }
    public bool isFrozen { get; }
    private static void FeatureRemoved();
    public ProceduralPropertyDescription[] GetProceduralPropertyDescriptions();
    public bool HasProceduralProperty(string inputName);
    public bool GetProceduralBoolean(string inputName);
    public bool IsProceduralPropertyVisible(string inputName);
    public void SetProceduralBoolean(string inputName, bool value);
    public float GetProceduralFloat(string inputName);
    public void SetProceduralFloat(string inputName, float value);
    public Vector4 GetProceduralVector(string inputName);
    public void SetProceduralVector(string inputName, Vector4 value);
    public Color GetProceduralColor(string inputName);
    public void SetProceduralColor(string inputName, Color value);
    public int GetProceduralEnum(string inputName);
    public void SetProceduralEnum(string inputName, int value);
    public Texture2D GetProceduralTexture(string inputName);
    public void SetProceduralTexture(string inputName, Texture2D value);
    public string GetProceduralString(string inputName);
    public void SetProceduralString(string inputName, string value);
    public bool IsProceduralPropertyCached(string inputName);
    public void CacheProceduralProperty(string inputName, bool value);
    public void ClearCache();
    public ProceduralCacheSize get_cacheSize();
    public void set_cacheSize(ProceduralCacheSize value);
    public int get_animationUpdateRate();
    public void set_animationUpdateRate(int value);
    public void RebuildTextures();
    public void RebuildTexturesImmediately();
    public bool get_isProcessing();
    public static void StopRebuilds();
    public bool get_isCachedDataAvailable();
    public bool get_isLoadTimeGenerated();
    public void set_isLoadTimeGenerated(bool value);
    public ProceduralLoadingBehavior get_loadingBehavior();
    public static bool get_isSupported();
    public static ProceduralProcessorUsage get_substanceProcessorUsage();
    public static void set_substanceProcessorUsage(ProceduralProcessorUsage value);
    public string get_preset();
    public void set_preset(string value);
    public Texture[] GetGeneratedTextures();
    public ProceduralTexture GetGeneratedTexture(string textureName);
    public bool get_isReadable();
    public void set_isReadable(bool value);
    public void FreezeAndReleaseSourceData();
    public bool get_isFrozen();
}
[ObsoleteAttribute("Built-in support for Substance Designer materials has been removed from Unity. To continue using Substance Designer materials, you will need to install Allegorithmic's external importer from the Asset Store.", "True")]
[EditorBrowsableAttribute("1")]
public enum UnityEngine.ProceduralOutputType : Enum {
    public int value__;
    public static ProceduralOutputType Unknown;
    public static ProceduralOutputType Diffuse;
    public static ProceduralOutputType Normal;
    public static ProceduralOutputType Height;
    public static ProceduralOutputType Emissive;
    public static ProceduralOutputType Specular;
    public static ProceduralOutputType Opacity;
    public static ProceduralOutputType Smoothness;
    public static ProceduralOutputType AmbientOcclusion;
    public static ProceduralOutputType DetailMask;
    public static ProceduralOutputType Metallic;
    public static ProceduralOutputType Roughness;
}
[ObsoleteAttribute("Built-in support for Substance Designer materials has been removed from Unity. To continue using Substance Designer materials, you will need to install Allegorithmic's external importer from the Asset Store.", "True")]
[EditorBrowsableAttribute("1")]
public enum UnityEngine.ProceduralProcessorUsage : Enum {
    public int value__;
    public static ProceduralProcessorUsage Unsupported;
    public static ProceduralProcessorUsage One;
    public static ProceduralProcessorUsage Half;
    public static ProceduralProcessorUsage All;
}
[ObsoleteAttribute("Built-in support for Substance Designer materials has been removed from Unity. To continue using Substance Designer materials, you will need to install Allegorithmic's external importer from the Asset Store.", "True")]
[EditorBrowsableAttribute("1")]
public class UnityEngine.ProceduralPropertyDescription : object {
    public string name;
    public string label;
    public string group;
    public ProceduralPropertyType type;
    public bool hasRange;
    public float minimum;
    public float maximum;
    public float step;
    public String[] enumOptions;
    public String[] componentLabels;
}
[ObsoleteAttribute("Built-in support for Substance Designer materials has been removed from Unity. To continue using Substance Designer materials, you will need to install Allegorithmic's external importer from the Asset Store.", "True")]
[EditorBrowsableAttribute("1")]
public enum UnityEngine.ProceduralPropertyType : Enum {
    public int value__;
    public static ProceduralPropertyType Boolean;
    public static ProceduralPropertyType Float;
    public static ProceduralPropertyType Vector2;
    public static ProceduralPropertyType Vector3;
    public static ProceduralPropertyType Vector4;
    public static ProceduralPropertyType Color3;
    public static ProceduralPropertyType Color4;
    public static ProceduralPropertyType Enum;
    public static ProceduralPropertyType Texture;
    public static ProceduralPropertyType String;
}
[ObsoleteAttribute("Built-in support for Substance Designer materials has been removed from Unity. To continue using Substance Designer materials, you will need to install Allegorithmic's external importer from the Asset Store.", "True")]
[ExcludeFromPresetAttribute]
public class UnityEngine.ProceduralTexture : Texture {
    public bool hasAlpha { get; }
    public TextureFormat format { get; }
    public ProceduralOutputType GetProceduralOutputType();
    internal ProceduralMaterial GetProceduralMaterial();
    public bool get_hasAlpha();
    public TextureFormat get_format();
    public Color32[] GetPixels32(int x, int y, int blockWidth, int blockHeight);
}
