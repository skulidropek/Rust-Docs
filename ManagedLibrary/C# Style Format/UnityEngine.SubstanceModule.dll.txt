public UnityEngine.ProceduralCacheSize : Enum {
public int value__
public ProceduralCacheSize Tiny
public ProceduralCacheSize Medium
public ProceduralCacheSize Heavy
public ProceduralCacheSize NoLimit
public ProceduralCacheSize None
}
public UnityEngine.ProceduralLoadingBehavior : Enum {
public int value__
public ProceduralLoadingBehavior DoNothing
public ProceduralLoadingBehavior Generate
public ProceduralLoadingBehavior BakeAndKeep
public ProceduralLoadingBehavior BakeAndDiscard
public ProceduralLoadingBehavior Cache
public ProceduralLoadingBehavior DoNothingAndCache
}
public UnityEngine.ProceduralMaterial : Material {
public ProceduralCacheSize cacheSize
public int animationUpdateRate
public bool isProcessing
public bool isCachedDataAvailable
public bool isLoadTimeGenerated
public ProceduralLoadingBehavior loadingBehavior
public bool isSupported
public ProceduralProcessorUsage substanceProcessorUsage
public string preset
public bool isReadable
public bool isFrozen
private void FeatureRemoved()
public ProceduralPropertyDescription[] GetProceduralPropertyDescriptions()
public bool HasProceduralProperty(string inputName)
public bool GetProceduralBoolean(string inputName)
public bool IsProceduralPropertyVisible(string inputName)
public void SetProceduralBoolean(string inputName, bool value)
public float GetProceduralFloat(string inputName)
public void SetProceduralFloat(string inputName, float value)
public Vector4 GetProceduralVector(string inputName)
public void SetProceduralVector(string inputName, Vector4 value)
public Color GetProceduralColor(string inputName)
public void SetProceduralColor(string inputName, Color value)
public int GetProceduralEnum(string inputName)
public void SetProceduralEnum(string inputName, int value)
public Texture2D GetProceduralTexture(string inputName)
public void SetProceduralTexture(string inputName, Texture2D value)
public string GetProceduralString(string inputName)
public void SetProceduralString(string inputName, string value)
public bool IsProceduralPropertyCached(string inputName)
public void CacheProceduralProperty(string inputName, bool value)
public void ClearCache()
public ProceduralCacheSize get_cacheSize()
public void set_cacheSize(ProceduralCacheSize value)
public int get_animationUpdateRate()
public void set_animationUpdateRate(int value)
public void RebuildTextures()
public void RebuildTexturesImmediately()
public bool get_isProcessing()
public void StopRebuilds()
public bool get_isCachedDataAvailable()
public bool get_isLoadTimeGenerated()
public void set_isLoadTimeGenerated(bool value)
public ProceduralLoadingBehavior get_loadingBehavior()
public bool get_isSupported()
public ProceduralProcessorUsage get_substanceProcessorUsage()
public void set_substanceProcessorUsage(ProceduralProcessorUsage value)
public string get_preset()
public void set_preset(string value)
public Texture[] GetGeneratedTextures()
public ProceduralTexture GetGeneratedTexture(string textureName)
public bool get_isReadable()
public void set_isReadable(bool value)
public void FreezeAndReleaseSourceData()
public bool get_isFrozen()
}
public UnityEngine.ProceduralOutputType : Enum {
public int value__
public ProceduralOutputType Unknown
public ProceduralOutputType Diffuse
public ProceduralOutputType Normal
public ProceduralOutputType Height
public ProceduralOutputType Emissive
public ProceduralOutputType Specular
public ProceduralOutputType Opacity
public ProceduralOutputType Smoothness
public ProceduralOutputType AmbientOcclusion
public ProceduralOutputType DetailMask
public ProceduralOutputType Metallic
public ProceduralOutputType Roughness
}
public UnityEngine.ProceduralProcessorUsage : Enum {
public int value__
public ProceduralProcessorUsage Unsupported
public ProceduralProcessorUsage One
public ProceduralProcessorUsage Half
public ProceduralProcessorUsage All
}
public UnityEngine.ProceduralPropertyDescription : object {
public string name
public string label
public string group
public ProceduralPropertyType type
public bool hasRange
public float minimum
public float maximum
public float step
public String[] enumOptions
public String[] componentLabels
}
public UnityEngine.ProceduralPropertyType : Enum {
public int value__
public ProceduralPropertyType Boolean
public ProceduralPropertyType Float
public ProceduralPropertyType Vector2
public ProceduralPropertyType Vector3
public ProceduralPropertyType Vector4
public ProceduralPropertyType Color3
public ProceduralPropertyType Color4
public ProceduralPropertyType Enum
public ProceduralPropertyType Texture
public ProceduralPropertyType String
}
public UnityEngine.ProceduralTexture : Texture {
public bool hasAlpha
public TextureFormat format
public ProceduralOutputType GetProceduralOutputType()
internal ProceduralMaterial GetProceduralMaterial()
public bool get_hasAlpha()
public TextureFormat get_format()
public Color32[] GetPixels32(int x, int y, int blockWidth, int blockHeight)
}
