public UnityEngine.CustomGridBrushAttribute : Attribute {
private bool m_HideAssetInstances
private bool m_HideDefaultInstance
private bool m_DefaultBrush
private string m_DefaultName
public bool hideAssetInstances
public bool hideDefaultInstance
public bool defaultBrush
public string defaultName
public void .ctor(bool hideAssetInstances, bool hideDefaultInstance, bool defaultBrush, string defaultName)
public bool get_hideAssetInstances()
public bool get_hideDefaultInstance()
public bool get_defaultBrush()
public string get_defaultName()
}
public UnityEngine.GridBrushBase : ScriptableObject {
public void Paint(GridLayout gridLayout, GameObject brushTarget, Vector3Int position)
public void Erase(GridLayout gridLayout, GameObject brushTarget, Vector3Int position)
public void BoxFill(GridLayout gridLayout, GameObject brushTarget, BoundsInt position)
public void BoxErase(GridLayout gridLayout, GameObject brushTarget, BoundsInt position)
public void Select(GridLayout gridLayout, GameObject brushTarget, BoundsInt position)
public void FloodFill(GridLayout gridLayout, GameObject brushTarget, Vector3Int position)
public void Rotate(RotationDirection direction, CellLayout layout)
public void Flip(FlipAxis flip, CellLayout layout)
public void Pick(GridLayout gridLayout, GameObject brushTarget, BoundsInt position, Vector3Int pivot)
public void Move(GridLayout gridLayout, GameObject brushTarget, BoundsInt from, BoundsInt to)
public void MoveStart(GridLayout gridLayout, GameObject brushTarget, BoundsInt position)
public void MoveEnd(GridLayout gridLayout, GameObject brushTarget, BoundsInt position)
}
public UnityEngine.Tilemaps.ITilemap : object {
internal ITilemap s_Instance
internal Tilemap m_Tilemap
public Vector3Int origin
public Vector3Int size
public Bounds localBounds
public BoundsInt cellBounds
internal void SetTilemapInstance(Tilemap tilemap)
public Vector3Int get_origin()
public Vector3Int get_size()
public Bounds get_localBounds()
public BoundsInt get_cellBounds()
public Sprite GetSprite(Vector3Int position)
public Color GetColor(Vector3Int position)
public Matrix4x4 GetTransformMatrix(Vector3Int position)
public TileFlags GetTileFlags(Vector3Int position)
public TileBase GetTile(Vector3Int position)
public T GetTile(Vector3Int position)
public void RefreshTile(Vector3Int position)
public T GetComponent()
private ITilemap CreateInstance()
}
public UnityEngine.Tilemaps.Tile : TileBase {
private Sprite m_Sprite
private Color m_Color
private Matrix4x4 m_Transform
private GameObject m_InstancedGameObject
private TileFlags m_Flags
private ColliderType m_ColliderType
public Sprite sprite
public Color color
public Matrix4x4 transform
public GameObject gameObject
public TileFlags flags
public ColliderType colliderType
public Sprite get_sprite()
public void set_sprite(Sprite value)
public Color get_color()
public void set_color(Color value)
public Matrix4x4 get_transform()
public void set_transform(Matrix4x4 value)
public GameObject get_gameObject()
public void set_gameObject(GameObject value)
public TileFlags get_flags()
public void set_flags(TileFlags value)
public ColliderType get_colliderType()
public void set_colliderType(ColliderType value)
public void GetTileData(Vector3Int position, ITilemap tilemap, TileData& tileData)
}
public UnityEngine.Tilemaps.TileAnimationData : ValueType {
private Sprite[] m_AnimatedSprites
private float m_AnimationSpeed
private float m_AnimationStartTime
public Sprite[] animatedSprites
public float animationSpeed
public float animationStartTime
public Sprite[] get_animatedSprites()
public void set_animatedSprites(Sprite[] value)
public float get_animationSpeed()
public void set_animationSpeed(float value)
public float get_animationStartTime()
public void set_animationStartTime(float value)
}
public UnityEngine.Tilemaps.TileBase : ScriptableObject {
public void RefreshTile(Vector3Int position, ITilemap tilemap)
public void GetTileData(Vector3Int position, ITilemap tilemap, TileData& tileData)
private TileData GetTileDataNoRef(Vector3Int position, ITilemap tilemap)
public bool GetTileAnimationData(Vector3Int position, ITilemap tilemap, TileAnimationData& tileAnimationData)
private TileAnimationData GetTileAnimationDataNoRef(Vector3Int position, ITilemap tilemap)
public bool StartUp(Vector3Int position, ITilemap tilemap, GameObject go)
}
public UnityEngine.Tilemaps.TileData : ValueType {
private Sprite m_Sprite
private Color m_Color
private Matrix4x4 m_Transform
private GameObject m_GameObject
private TileFlags m_Flags
private ColliderType m_ColliderType
public Sprite sprite
public Color color
public Matrix4x4 transform
public GameObject gameObject
public TileFlags flags
public ColliderType colliderType
public Sprite get_sprite()
public void set_sprite(Sprite value)
public Color get_color()
public void set_color(Color value)
public Matrix4x4 get_transform()
public void set_transform(Matrix4x4 value)
public GameObject get_gameObject()
public void set_gameObject(GameObject value)
public TileFlags get_flags()
public void set_flags(TileFlags value)
public ColliderType get_colliderType()
public void set_colliderType(ColliderType value)
}
public UnityEngine.Tilemaps.TileFlags : Enum {
public int value__
public TileFlags None
public TileFlags LockColor
public TileFlags LockTransform
public TileFlags InstantiateGameObjectRuntimeOnly
public TileFlags LockAll
}
public UnityEngine.Tilemaps.Tilemap : GridLayout {
public Grid layoutGrid
public BoundsInt cellBounds
public Bounds localBounds
public float animationFrameRate
public Color color
public Vector3Int origin
public Vector3Int size
public Vector3 tileAnchor
public Orientation orientation
public Matrix4x4 orientationMatrix
public Grid get_layoutGrid()
public Vector3 GetCellCenterLocal(Vector3Int position)
public Vector3 GetCellCenterWorld(Vector3Int position)
public BoundsInt get_cellBounds()
public Bounds get_localBounds()
public float get_animationFrameRate()
public void set_animationFrameRate(float value)
public Color get_color()
public void set_color(Color value)
public Vector3Int get_origin()
public void set_origin(Vector3Int value)
public Vector3Int get_size()
public void set_size(Vector3Int value)
public Vector3 get_tileAnchor()
public void set_tileAnchor(Vector3 value)
public Orientation get_orientation()
public void set_orientation(Orientation value)
public Matrix4x4 get_orientationMatrix()
public void set_orientationMatrix(Matrix4x4 value)
internal Object GetTileAsset(Vector3Int position)
public TileBase GetTile(Vector3Int position)
public T GetTile(Vector3Int position)
internal Object[] GetTileAssetsBlock(Vector3Int position, Vector3Int blockDimensions)
public TileBase[] GetTilesBlock(BoundsInt bounds)
internal void SetTileAsset(Vector3Int position, Object tile)
public void SetTile(Vector3Int position, TileBase tile)
internal void SetTileAssets(Vector3Int[] positionArray, Object[] tileArray)
public void SetTiles(Vector3Int[] positionArray, TileBase[] tileArray)
private void INTERNAL_CALL_SetTileAssetsBlock(Vector3Int position, Vector3Int blockDimensions, Object[] tileArray)
public void SetTilesBlock(BoundsInt position, TileBase[] tileArray)
public bool HasTile(Vector3Int position)
public void RefreshTile(Vector3Int position)
public void RefreshAllTiles()
internal void SwapTileAsset(Object changeTile, Object newTile)
public void SwapTile(TileBase changeTile, TileBase newTile)
internal bool ContainsTileAsset(Object tileAsset)
public bool ContainsTile(TileBase tileAsset)
public int GetUsedTilesCount()
public int GetUsedTilesNonAlloc(TileBase[] usedTiles)
internal int Internal_GetUsedTilesNonAlloc(Object[] usedTiles)
public Sprite GetSprite(Vector3Int position)
public Matrix4x4 GetTransformMatrix(Vector3Int position)
public void SetTransformMatrix(Vector3Int position, Matrix4x4 transform)
public Color GetColor(Vector3Int position)
public void SetColor(Vector3Int position, Color color)
public TileFlags GetTileFlags(Vector3Int position)
public void SetTileFlags(Vector3Int position, TileFlags flags)
public void AddTileFlags(Vector3Int position, TileFlags flags)
public void RemoveTileFlags(Vector3Int position, TileFlags flags)
public GameObject GetInstantiatedObject(Vector3Int position)
public void SetColliderType(Vector3Int position, ColliderType colliderType)
public ColliderType GetColliderType(Vector3Int position)
public void FloodFill(Vector3Int position, TileBase tile)
private void FloodFillTileAsset(Vector3Int position, Object tile)
public void BoxFill(Vector3Int position, TileBase tile, int startX, int startY, int endX, int endY)
private void BoxFillTileAsset(Vector3Int position, Object tile, int startX, int startY, int endX, int endY)
public void ClearAllTiles()
public void ResizeBounds()
public void CompressBounds()
private void get_localBounds_Injected(Bounds& ret)
private void get_color_Injected(Color& ret)
private void set_color_Injected(Color& value)
private void get_origin_Injected(Vector3Int& ret)
private void set_origin_Injected(Vector3Int& value)
private void get_size_Injected(Vector3Int& ret)
private void set_size_Injected(Vector3Int& value)
private void get_tileAnchor_Injected(Vector3& ret)
private void set_tileAnchor_Injected(Vector3& value)
private void get_orientationMatrix_Injected(Matrix4x4& ret)
private void set_orientationMatrix_Injected(Matrix4x4& value)
private Object GetTileAsset_Injected(Vector3Int& position)
private Object[] GetTileAssetsBlock_Injected(Vector3Int& position, Vector3Int& blockDimensions)
private void SetTileAsset_Injected(Vector3Int& position, Object tile)
private void INTERNAL_CALL_SetTileAssetsBlock_Injected(Vector3Int& position, Vector3Int& blockDimensions, Object[] tileArray)
private void RefreshTile_Injected(Vector3Int& position)
private Sprite GetSprite_Injected(Vector3Int& position)
private void GetTransformMatrix_Injected(Vector3Int& position, Matrix4x4& ret)
private void SetTransformMatrix_Injected(Vector3Int& position, Matrix4x4& transform)
private void GetColor_Injected(Vector3Int& position, Color& ret)
private void SetColor_Injected(Vector3Int& position, Color& color)
private TileFlags GetTileFlags_Injected(Vector3Int& position)
private void SetTileFlags_Injected(Vector3Int& position, TileFlags flags)
private void AddTileFlags_Injected(Vector3Int& position, TileFlags flags)
private void RemoveTileFlags_Injected(Vector3Int& position, TileFlags flags)
private GameObject GetInstantiatedObject_Injected(Vector3Int& position)
private void SetColliderType_Injected(Vector3Int& position, ColliderType colliderType)
private ColliderType GetColliderType_Injected(Vector3Int& position)
private void FloodFillTileAsset_Injected(Vector3Int& position, Object tile)
private void BoxFillTileAsset_Injected(Vector3Int& position, Object tile, int startX, int startY, int endX, int endY)
}
public UnityEngine.Tilemaps.TilemapRenderer : Renderer {
public Vector3Int chunkSize
public Vector3 chunkCullingBounds
public int maxChunkCount
public int maxFrameAge
public SortOrder sortOrder
public DetectChunkCullingBounds detectChunkCullingBounds
public SpriteMaskInteraction maskInteraction
public Vector3Int get_chunkSize()
public void set_chunkSize(Vector3Int value)
public Vector3 get_chunkCullingBounds()
public void set_chunkCullingBounds(Vector3 value)
public int get_maxChunkCount()
public void set_maxChunkCount(int value)
public int get_maxFrameAge()
public void set_maxFrameAge(int value)
public SortOrder get_sortOrder()
public void set_sortOrder(SortOrder value)
public DetectChunkCullingBounds get_detectChunkCullingBounds()
public void set_detectChunkCullingBounds(DetectChunkCullingBounds value)
public SpriteMaskInteraction get_maskInteraction()
public void set_maskInteraction(SpriteMaskInteraction value)
private void get_chunkSize_Injected(Vector3Int& ret)
private void set_chunkSize_Injected(Vector3Int& value)
private void get_chunkCullingBounds_Injected(Vector3& ret)
private void set_chunkCullingBounds_Injected(Vector3& value)
}
