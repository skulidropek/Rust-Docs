internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal System.Runtime.Serialization.Formatters.Soap.Element : object {
private string _prefix
private string _localName
private string _namespaceURI
private MethodInfo _parseMethod
public string Prefix
public string LocalName
public string NamespaceURI
public MethodInfo ParseMethod
public void .ctor(string prefix, string localName, string namespaceURI)
public void .ctor(string localName, string namespaceURI)
public string get_Prefix()
public string get_LocalName()
public string get_NamespaceURI()
public MethodInfo get_ParseMethod()
public void set_ParseMethod(MethodInfo value)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
internal System.Runtime.Serialization.Formatters.Soap.MethodSignature : object {
private Type[] types
public void .ctor(Type[] types)
public object ReadXmlValue(SoapReader reader)
public string GetXmlValue(SoapWriter writer)
}
internal System.Runtime.Serialization.Formatters.Soap.RemMessageType : Enum {
public int value__
public RemMessageType MethodCall
public RemMessageType MethodResponse
public RemMessageType ServerFault
public RemMessageType NotRecognize
}
public System.Runtime.Serialization.Formatters.Soap.SoapFormatter : object {
private SerializationBinder _binder
private StreamingContext _context
private ISurrogateSelector _selector
private FormatterAssemblyStyle _assemblyFormat
private FormatterTypeStyle _typeFormat
private ISoapMessage _topObject
private TypeFilterLevel _filterLevel
public ISurrogateSelector SurrogateSelector
public SerializationBinder Binder
public StreamingContext Context
public ISoapMessage TopObject
public TypeFilterLevel FilterLevel
public FormatterAssemblyStyle AssemblyFormat
public FormatterTypeStyle TypeFormat
public void .ctor(ISurrogateSelector selector, StreamingContext context)
public object Deserialize(Stream serializationStream)
public object Deserialize(Stream serializationStream, HeaderHandler handler)
public void Serialize(Stream serializationStream, object graph)
public void Serialize(Stream serializationStream, object graph, Header[] headers)
public ISurrogateSelector get_SurrogateSelector()
public void set_SurrogateSelector(ISurrogateSelector value)
public SerializationBinder get_Binder()
public void set_Binder(SerializationBinder value)
public StreamingContext get_Context()
public void set_Context(StreamingContext value)
public ISoapMessage get_TopObject()
public void set_TopObject(ISoapMessage value)
public TypeFilterLevel get_FilterLevel()
public void set_FilterLevel(TypeFilterLevel value)
public FormatterAssemblyStyle get_AssemblyFormat()
public void set_AssemblyFormat(FormatterAssemblyStyle value)
public FormatterTypeStyle get_TypeFormat()
public void set_TypeFormat(FormatterTypeStyle value)
}
internal System.Runtime.Serialization.Formatters.Soap.SoapReader : object {
private SerializationBinder _binder
private SoapTypeMapper mapper
private ObjectManager objMgr
private StreamingContext _context
private long _nextAvailableId
private ISurrogateSelector _surrogateSelector
private XmlTextReader xmlReader
private Hashtable _fieldIndices
private long _topObjectId
private long NextAvailableId
public SoapTypeMapper Mapper
public XmlTextReader XmlReader
private object TopObject
private long get_NextAvailableId()
public void .ctor(SerializationBinder binder, ISurrogateSelector selector, StreamingContext context)
public object Deserialize(Stream inStream, ISoapMessage soapMessage)
private void Deserialize_inner(Stream inStream, ISoapMessage soapMessage)
public SoapTypeMapper get_Mapper()
public XmlTextReader get_XmlReader()
private object get_TopObject()
private bool IsNull()
private long GetId()
private long GetHref()
private Type GetComponentType()
private bool DeserializeMessage(ISoapMessage message)
private void DeserializeHeaders(ArrayList headers)
private Header DeserializeHeader()
private object DeserializeArray(long id)
private object Deserialize()
private object DeserializeObject(Type type, long id, long parentId, MemberInfo parentMemberInfo, Int32[] indices)
private object DeserializeSimpleObject(object obj, long id, Boolean& hasFixup)
private object DeserializeISerializableObject(object obj, long id, SerializationInfo& info, Boolean& hasFixup)
private object DeserializeComponent(Type componentType, Int64& componentId, Int64& componentHref, long parentId, MemberInfo parentMemberInfo, Int32[] indices)
public void RecordFixup(long parentObjectId, long childObjectId, object parentObject, SerializationInfo info, string fieldName, MemberInfo memberInfo, Int32[] indices)
private void RegisterObject(long objectId, object objectInstance, SerializationInfo info, long parentObjectId, MemberInfo parentObjectMember, Int32[] indices)
private TypeMetadata GetTypeMetadata(Type type)
public Type GetTypeFromQName(string qname)
}
internal System.Runtime.Serialization.Formatters.Soap.SoapTypeMapper : object {
private Hashtable xmlNodeToTypeTable
private Hashtable typeToXmlNodeTable
public string SoapEncodingNamespace
public string SoapEncodingPrefix
public string SoapEnvelopeNamespace
public string SoapEnvelopePrefix
private XmlTextWriter _xmlWriter
private long _prefixNumber
private Hashtable namespaceToPrefixTable
private SerializationBinder _binder
private ArrayList _canBeValueTypeList
private FormatterAssemblyStyle _assemblyFormat
private Element elementString
public void .ctor(SerializationBinder binder)
public void .ctor(XmlTextWriter xmlWriter, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat)
private string GetKey(string localName, string namespaceUri)
public Type GetType(string xmlName, string xmlNamespace)
public Element GetXmlElement(string typeFullName, string assemblyName)
public Element GetXmlElement(Type type)
private void RegisterType(Type type, string name, string namspace)
private Element RegisterType(Type type, string name, string namspace, bool reverseMap)
private void RegisterType(Type type)
private void InitMappingTables()
public string GetXsdValue(object value)
public object ParseXsdValue(string value, Type type)
public bool CanBeValue(Type type)
public bool IsInternalSoapType(Type type)
public object ReadInternalSoapValue(SoapReader reader, Type type)
public string GetInternalSoapValue(SoapWriter writer, object value)
}
internal System.Runtime.Serialization.Formatters.Soap.SoapWriter : object {
private XmlTextWriter _xmlWriter
private Queue _objectQueue
private Hashtable _objectToIdTable
private ISurrogateSelector _surrogateSelector
private SoapTypeMapper _mapper
private StreamingContext _context
private ObjectIDGenerator idGen
private FormatterAssemblyStyle _assemblyFormat
private FormatterTypeStyle _typeFormat
private string defaultMessageNamespace
private SerializationObjectManager _manager
public SoapTypeMapper Mapper
public XmlTextWriter XmlWriter
internal FormatterAssemblyStyle AssemblyFormat
internal FormatterTypeStyle TypeFormat
protected void Finalize()
internal void .ctor(Stream outStream, ISurrogateSelector selector, StreamingContext context, ISoapMessage soapMessage)
public SoapTypeMapper get_Mapper()
public XmlTextWriter get_XmlWriter()
internal FormatterAssemblyStyle get_AssemblyFormat()
internal void set_AssemblyFormat(FormatterAssemblyStyle value)
internal FormatterTypeStyle get_TypeFormat()
internal void set_TypeFormat(FormatterTypeStyle value)
private void Id(long id)
private void Href(long href)
private void Null()
private bool IsEncodingNeeded(object componentObject, Type componentType)
internal void Serialize(object objGraph, Header[] headers, FormatterTypeStyle typeFormat, FormatterAssemblyStyle assemblyFormat)
private void Serialize_inner(object objGraph, Header[] headers, FormatterTypeStyle typeFormat, FormatterAssemblyStyle assemblyFormat)
private void WriteObjectQueue()
private void SerializeMessage(ISoapMessage message)
private void SerializeHeader(Header header)
private void SerializeObject(object currentObject, long currentObjectId)
public int Compare(object x, object y)
private void SerializeSimpleObject(object currentObject, long currentObjectId)
private void SerializeISerializableObject(object currentObject, long currentObjectId, ISerializationSurrogate surrogate)
private void SerializeArray(Array currentArray, long currentArrayId)
private void SerializeComponent(object obj, bool specifyEncoding)
private void EncodeType(Type type)
public string GetNamespacePrefix(Element xmlType)
}
