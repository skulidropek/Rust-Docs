public Oxide.Game.Rust.Cui.ComponentConverter : JsonConverter {
public bool CanWrite
public void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
public object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
public bool CanConvert(Type objectType)
public bool get_CanWrite()
}
public Oxide.Game.Rust.Cui.CuiButton : object {
private CuiButtonComponent <Button>k__BackingField
private CuiRectTransformComponent <RectTransform>k__BackingField
private CuiTextComponent <Text>k__BackingField
private float <FadeOut>k__BackingField
public CuiButtonComponent Button
public CuiRectTransformComponent RectTransform
public CuiTextComponent Text
public float FadeOut
public CuiButtonComponent get_Button()
public CuiRectTransformComponent get_RectTransform()
public CuiTextComponent get_Text()
public float get_FadeOut()
public void set_FadeOut(float value)
}
public Oxide.Game.Rust.Cui.CuiButtonComponent : object {
private string <Command>k__BackingField
private string <Close>k__BackingField
private string <Sprite>k__BackingField
private string <Material>k__BackingField
private string <Color>k__BackingField
private Type <ImageType>k__BackingField
private float <FadeIn>k__BackingField
public string Type
public string Command
public string Close
public string Sprite
public string Material
public string Color
public Type ImageType
public float FadeIn
public string get_Type()
public string get_Command()
public void set_Command(string value)
public string get_Close()
public void set_Close(string value)
public string get_Sprite()
public void set_Sprite(string value)
public string get_Material()
public void set_Material(string value)
public string get_Color()
public void set_Color(string value)
public Type get_ImageType()
public void set_ImageType(Type value)
public float get_FadeIn()
public void set_FadeIn(float value)
}
public Oxide.Game.Rust.Cui.CuiCountdownComponent : object {
private int <EndTime>k__BackingField
private int <StartTime>k__BackingField
private int <Step>k__BackingField
private string <Command>k__BackingField
private float <FadeIn>k__BackingField
public string Type
public int EndTime
public int StartTime
public int Step
public string Command
public float FadeIn
public string get_Type()
public int get_EndTime()
public void set_EndTime(int value)
public int get_StartTime()
public void set_StartTime(int value)
public int get_Step()
public void set_Step(int value)
public string get_Command()
public void set_Command(string value)
public float get_FadeIn()
public void set_FadeIn(float value)
}
public Oxide.Game.Rust.Cui.CuiElement : object {
private string <Name>k__BackingField
private string <Parent>k__BackingField
private string <DestroyUi>k__BackingField
private List`1<ICuiComponent> <Components>k__BackingField
private float <FadeOut>k__BackingField
private bool <Update>k__BackingField
public string Name
public string Parent
public string DestroyUi
public List`1<ICuiComponent> Components
public float FadeOut
public bool Update
public string get_Name()
public void set_Name(string value)
public string get_Parent()
public void set_Parent(string value)
public string get_DestroyUi()
public void set_DestroyUi(string value)
public List`1<ICuiComponent> get_Components()
public float get_FadeOut()
public void set_FadeOut(float value)
public bool get_Update()
public void set_Update(bool value)
}
public Oxide.Game.Rust.Cui.CuiElementContainer : List`1<CuiElement> {
public string Add(CuiButton button, string parent, string name, string destroyUi)
public string Add(CuiLabel label, string parent, string name, string destroyUi)
public string Add(CuiPanel panel, string parent, string name, string destroyUi)
public string ToJson()
public string ToString()
}
public Oxide.Game.Rust.Cui.CuiHelper : object {
public string ToJson(List`1<CuiElement> elements, bool format)
public List`1<CuiElement> FromJson(string json)
public string GetGuid()
public bool AddUi(BasePlayer player, List`1<CuiElement> elements)
public bool AddUi(BasePlayer player, string json)
public bool DestroyUi(BasePlayer player, string elem)
public void SetColor(ICuiColor elem, Color color)
public Color GetColor(ICuiColor elem)
}
public Oxide.Game.Rust.Cui.CuiImageComponent : object {
private string <Sprite>k__BackingField
private string <Material>k__BackingField
private string <Color>k__BackingField
private Type <ImageType>k__BackingField
private string <Png>k__BackingField
private float <FadeIn>k__BackingField
private int <ItemId>k__BackingField
private ulong <SkinId>k__BackingField
public string Type
public string Sprite
public string Material
public string Color
public Type ImageType
public string Png
public float FadeIn
public int ItemId
public ulong SkinId
public string get_Type()
public string get_Sprite()
public void set_Sprite(string value)
public string get_Material()
public void set_Material(string value)
public string get_Color()
public void set_Color(string value)
public Type get_ImageType()
public void set_ImageType(Type value)
public string get_Png()
public void set_Png(string value)
public float get_FadeIn()
public void set_FadeIn(float value)
public int get_ItemId()
public void set_ItemId(int value)
public ulong get_SkinId()
public void set_SkinId(ulong value)
}
public Oxide.Game.Rust.Cui.CuiInputFieldComponent : object {
private string <Text>k__BackingField
private int <FontSize>k__BackingField
private string <Font>k__BackingField
private TextAnchor <Align>k__BackingField
private string <Color>k__BackingField
private int <CharsLimit>k__BackingField
private string <Command>k__BackingField
private bool <IsPassword>k__BackingField
private bool <ReadOnly>k__BackingField
private bool <NeedsKeyboard>k__BackingField
private LineType <LineType>k__BackingField
private bool <Autofocus>k__BackingField
private bool <HudMenuInput>k__BackingField
public string Type
public string Text
public int FontSize
public string Font
public TextAnchor Align
public string Color
public int CharsLimit
public string Command
public bool IsPassword
public bool ReadOnly
public bool NeedsKeyboard
public LineType LineType
public bool Autofocus
public bool HudMenuInput
public string get_Type()
public string get_Text()
public void set_Text(string value)
public int get_FontSize()
public void set_FontSize(int value)
public string get_Font()
public void set_Font(string value)
public TextAnchor get_Align()
public void set_Align(TextAnchor value)
public string get_Color()
public void set_Color(string value)
public int get_CharsLimit()
public void set_CharsLimit(int value)
public string get_Command()
public void set_Command(string value)
public bool get_IsPassword()
public void set_IsPassword(bool value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public bool get_NeedsKeyboard()
public void set_NeedsKeyboard(bool value)
public LineType get_LineType()
public void set_LineType(LineType value)
public bool get_Autofocus()
public void set_Autofocus(bool value)
public bool get_HudMenuInput()
public void set_HudMenuInput(bool value)
}
public Oxide.Game.Rust.Cui.CuiLabel : object {
private CuiTextComponent <Text>k__BackingField
private CuiRectTransformComponent <RectTransform>k__BackingField
private float <FadeOut>k__BackingField
public CuiTextComponent Text
public CuiRectTransformComponent RectTransform
public float FadeOut
public CuiTextComponent get_Text()
public CuiRectTransformComponent get_RectTransform()
public float get_FadeOut()
public void set_FadeOut(float value)
}
public Oxide.Game.Rust.Cui.CuiNeedsCursorComponent : object {
public string Type
public string get_Type()
}
public Oxide.Game.Rust.Cui.CuiNeedsKeyboardComponent : object {
public string Type
public string get_Type()
}
public Oxide.Game.Rust.Cui.CuiOutlineComponent : object {
private string <Color>k__BackingField
private string <Distance>k__BackingField
private bool <UseGraphicAlpha>k__BackingField
public string Type
public string Color
public string Distance
public bool UseGraphicAlpha
public string get_Type()
public string get_Color()
public void set_Color(string value)
public string get_Distance()
public void set_Distance(string value)
public bool get_UseGraphicAlpha()
public void set_UseGraphicAlpha(bool value)
}
public Oxide.Game.Rust.Cui.CuiPanel : object {
private CuiImageComponent <Image>k__BackingField
private CuiRawImageComponent <RawImage>k__BackingField
private CuiRectTransformComponent <RectTransform>k__BackingField
private bool <CursorEnabled>k__BackingField
private bool <KeyboardEnabled>k__BackingField
private float <FadeOut>k__BackingField
public CuiImageComponent Image
public CuiRawImageComponent RawImage
public CuiRectTransformComponent RectTransform
public bool CursorEnabled
public bool KeyboardEnabled
public float FadeOut
public CuiImageComponent get_Image()
public void set_Image(CuiImageComponent value)
public CuiRawImageComponent get_RawImage()
public void set_RawImage(CuiRawImageComponent value)
public CuiRectTransformComponent get_RectTransform()
public bool get_CursorEnabled()
public void set_CursorEnabled(bool value)
public bool get_KeyboardEnabled()
public void set_KeyboardEnabled(bool value)
public float get_FadeOut()
public void set_FadeOut(float value)
}
public Oxide.Game.Rust.Cui.CuiRawImageComponent : object {
private string <Sprite>k__BackingField
private string <Color>k__BackingField
private string <Material>k__BackingField
private string <Url>k__BackingField
private string <Png>k__BackingField
private float <FadeIn>k__BackingField
public string Type
public string Sprite
public string Color
public string Material
public string Url
public string Png
public float FadeIn
public string get_Type()
public string get_Sprite()
public void set_Sprite(string value)
public string get_Color()
public void set_Color(string value)
public string get_Material()
public void set_Material(string value)
public string get_Url()
public void set_Url(string value)
public string get_Png()
public void set_Png(string value)
public float get_FadeIn()
public void set_FadeIn(float value)
}
public Oxide.Game.Rust.Cui.CuiRectTransform : object {
private string <AnchorMin>k__BackingField
private string <AnchorMax>k__BackingField
private string <OffsetMin>k__BackingField
private string <OffsetMax>k__BackingField
public string AnchorMin
public string AnchorMax
public string OffsetMin
public string OffsetMax
public string get_AnchorMin()
public void set_AnchorMin(string value)
public string get_AnchorMax()
public void set_AnchorMax(string value)
public string get_OffsetMin()
public void set_OffsetMin(string value)
public string get_OffsetMax()
public void set_OffsetMax(string value)
}
public Oxide.Game.Rust.Cui.CuiRectTransformComponent : CuiRectTransform {
public string Type
public string get_Type()
}
public Oxide.Game.Rust.Cui.CuiScrollbar : object {
private bool <Invert>k__BackingField
private bool <AutoHide>k__BackingField
private string <HandleSprite>k__BackingField
private float <Size>k__BackingField
private string <HandleColor>k__BackingField
private string <HighlightColor>k__BackingField
private string <PressedColor>k__BackingField
private string <TrackSprite>k__BackingField
private string <TrackColor>k__BackingField
public bool Invert
public bool AutoHide
public string HandleSprite
public float Size
public string HandleColor
public string HighlightColor
public string PressedColor
public string TrackSprite
public string TrackColor
public bool get_Invert()
public void set_Invert(bool value)
public bool get_AutoHide()
public void set_AutoHide(bool value)
public string get_HandleSprite()
public void set_HandleSprite(string value)
public float get_Size()
public void set_Size(float value)
public string get_HandleColor()
public void set_HandleColor(string value)
public string get_HighlightColor()
public void set_HighlightColor(string value)
public string get_PressedColor()
public void set_PressedColor(string value)
public string get_TrackSprite()
public void set_TrackSprite(string value)
public string get_TrackColor()
public void set_TrackColor(string value)
}
public Oxide.Game.Rust.Cui.CuiScrollViewComponent : object {
private CuiRectTransform <ContentTransform>k__BackingField
private bool <Horizontal>k__BackingField
private bool <Vertical>k__BackingField
private MovementType <MovementType>k__BackingField
private float <Elasticity>k__BackingField
private bool <Inertia>k__BackingField
private float <DecelerationRate>k__BackingField
private float <ScrollSensitivity>k__BackingField
private CuiScrollbar <HorizontalScrollbar>k__BackingField
private CuiScrollbar <VerticalScrollbar>k__BackingField
public string Type
public CuiRectTransform ContentTransform
public bool Horizontal
public bool Vertical
public MovementType MovementType
public float Elasticity
public bool Inertia
public float DecelerationRate
public float ScrollSensitivity
public CuiScrollbar HorizontalScrollbar
public CuiScrollbar VerticalScrollbar
public string get_Type()
public CuiRectTransform get_ContentTransform()
public void set_ContentTransform(CuiRectTransform value)
public bool get_Horizontal()
public void set_Horizontal(bool value)
public bool get_Vertical()
public void set_Vertical(bool value)
public MovementType get_MovementType()
public void set_MovementType(MovementType value)
public float get_Elasticity()
public void set_Elasticity(float value)
public bool get_Inertia()
public void set_Inertia(bool value)
public float get_DecelerationRate()
public void set_DecelerationRate(float value)
public float get_ScrollSensitivity()
public void set_ScrollSensitivity(float value)
public CuiScrollbar get_HorizontalScrollbar()
public void set_HorizontalScrollbar(CuiScrollbar value)
public CuiScrollbar get_VerticalScrollbar()
public void set_VerticalScrollbar(CuiScrollbar value)
}
public Oxide.Game.Rust.Cui.CuiTextComponent : object {
private string <Text>k__BackingField
private int <FontSize>k__BackingField
private string <Font>k__BackingField
private TextAnchor <Align>k__BackingField
private string <Color>k__BackingField
private VerticalWrapMode <VerticalOverflow>k__BackingField
private float <FadeIn>k__BackingField
public string Type
public string Text
public int FontSize
public string Font
public TextAnchor Align
public string Color
public VerticalWrapMode VerticalOverflow
public float FadeIn
public string get_Type()
public string get_Text()
public void set_Text(string value)
public int get_FontSize()
public void set_FontSize(int value)
public string get_Font()
public void set_Font(string value)
public TextAnchor get_Align()
public void set_Align(TextAnchor value)
public string get_Color()
public void set_Color(string value)
public VerticalWrapMode get_VerticalOverflow()
public void set_VerticalOverflow(VerticalWrapMode value)
public float get_FadeIn()
public void set_FadeIn(float value)
}
public Oxide.Game.Rust.Cui.ICuiColor {
public string Color
public string get_Color()
public void set_Color(string value)
}
public Oxide.Game.Rust.Cui.ICuiComponent {
public string Type
public string get_Type()
}
public Oxide.Game.Rust.Libraries.Command : Library {
internal Dictionary`2<string, ConsoleCommand> consoleCommands
internal Dictionary`2<string, ChatCommand> chatCommands
private Dictionary`2<Plugin, Callback`2<Plugin, PluginManager>> pluginRemovedFromManager
public void AddChatCommand(string name, Plugin plugin, string callback)
public void AddChatCommand(string command, Plugin plugin, Action`3<BasePlayer, string, String[]> callback)
public void AddConsoleCommand(string command, Plugin plugin, string callback)
public void AddConsoleCommand(string command, Plugin plugin, Func`2<Arg, bool> callback)
public void RemoveChatCommand(string command, Plugin plugin)
public void RemoveConsoleCommand(string command, Plugin plugin)
private void RemoveChatCommand(ChatCommand command)
private void RemoveConsoleCommand(ConsoleCommand command)
internal bool HandleChatCommand(BasePlayer sender, string name, String[] args)
private void plugin_OnRemovedFromManager(Plugin sender, PluginManager manager)
private bool CanOverrideCommand(string command, string type)
}
public Oxide.Game.Rust.Libraries.Covalence.RustCommandSystem : object {
private Command cmdlib
private RustConsolePlayer consolePlayer
private CommandHandler commandHandler
internal IDictionary`2<string, RegisteredCommand> registeredCommands
private bool CommandCallback(IPlayer caller, string cmd, String[] args)
public void RegisterCommand(string command, Plugin plugin, CommandCallback callback)
public void UnregisterCommand(string command, Plugin plugin)
public bool HandleChatMessage(IPlayer player, string message)
private bool CanOverrideCommand(string command)
public String[] ExtractArgs(Arg arg)
}
public Oxide.Game.Rust.Libraries.Covalence.RustConsolePlayer : object {
private float <Health>k__BackingField
private float <MaxHealth>k__BackingField
public object Object
public CommandType LastCommand
public string Name
public string Id
public CultureInfo Language
public string Address
public int Ping
public bool IsAdmin
public bool IsBanned
public bool IsConnected
public bool IsSleeping
public bool IsServer
public TimeSpan BanTimeRemaining
public float Health
public float MaxHealth
public object get_Object()
public CommandType get_LastCommand()
public void set_LastCommand(CommandType value)
public string get_Name()
public void set_Name(string value)
public string get_Id()
public CultureInfo get_Language()
public string get_Address()
public int get_Ping()
public bool get_IsAdmin()
public bool get_IsBanned()
public bool get_IsConnected()
public bool get_IsSleeping()
public bool get_IsServer()
public void Ban(string reason, TimeSpan duration)
public TimeSpan get_BanTimeRemaining()
public void Heal(float amount)
public float get_Health()
public void set_Health(float value)
public void Hurt(float amount)
public void Kick(string reason)
public void Kill()
public float get_MaxHealth()
public void set_MaxHealth(float value)
public void Rename(string name)
public void Teleport(float x, float y, float z)
public void Teleport(GenericPosition pos)
public void Unban()
public void Position(Single& x, Single& y, Single& z)
public GenericPosition Position()
public void Message(string message, string prefix, Object[] args)
public void Message(string message)
public void Reply(string message, string prefix, Object[] args)
public void Reply(string message)
public void Command(string command, Object[] args)
public bool HasPermission(string perm)
public void GrantPermission(string perm)
public void RevokePermission(string perm)
public bool BelongsToGroup(string group)
public void AddToGroup(string group)
public void RemoveFromGroup(string group)
}
public Oxide.Game.Rust.Libraries.Covalence.RustCovalenceProvider : object {
private RustCovalenceProvider <Instance>k__BackingField
private RustPlayerManager <PlayerManager>k__BackingField
private RustCommandSystem <CommandSystem>k__BackingField
public string GameName
public UInt32 ClientAppId
public UInt32 ServerAppId
internal RustCovalenceProvider Instance
public RustPlayerManager PlayerManager
public RustCommandSystem CommandSystem
public string get_GameName()
public UInt32 get_ClientAppId()
public UInt32 get_ServerAppId()
internal RustCovalenceProvider get_Instance()
private void set_Instance(RustCovalenceProvider value)
public RustPlayerManager get_PlayerManager()
private void set_PlayerManager(RustPlayerManager value)
public RustCommandSystem get_CommandSystem()
private void set_CommandSystem(RustCommandSystem value)
public IServer CreateServer()
public IPlayerManager CreatePlayerManager()
public ICommandSystem CreateCommandSystemProvider()
public string FormatText(string text)
}
public Oxide.Game.Rust.Libraries.Covalence.RustPlayer : object {
private Player libPlayer
private Permission libPerms
private BasePlayer player
private ulong steamId
private CommandType <LastCommand>k__BackingField
private string <Name>k__BackingField
private string <Id>k__BackingField
public object Object
public CommandType LastCommand
public string Name
public string Id
public CultureInfo Language
public string Address
public int Ping
public bool IsAdmin
public bool IsBanned
public bool IsConnected
public bool IsSleeping
public bool IsServer
public TimeSpan BanTimeRemaining
public float Health
public float MaxHealth
internal void .ctor(ulong id, string name)
internal void .ctor(BasePlayer player)
public object get_Object()
public CommandType get_LastCommand()
public void set_LastCommand(CommandType value)
public string get_Name()
public void set_Name(string value)
public string get_Id()
public CultureInfo get_Language()
public string get_Address()
public int get_Ping()
public bool get_IsAdmin()
public bool get_IsBanned()
public bool get_IsConnected()
public bool get_IsSleeping()
public bool get_IsServer()
public void Ban(string reason, TimeSpan duration)
public TimeSpan get_BanTimeRemaining()
public void Heal(float amount)
public float get_Health()
public void set_Health(float value)
public void Hurt(float amount)
public void Kick(string reason)
public void Kill()
public float get_MaxHealth()
public void set_MaxHealth(float value)
public void Rename(string name)
public void Teleport(float x, float y, float z)
public void Teleport(GenericPosition pos)
public void Unban()
public void Position(Single& x, Single& y, Single& z)
public GenericPosition Position()
public void Message(string message, string prefix, Object[] args)
public void Message(string message)
public void Reply(string message, string prefix, Object[] args)
public void Reply(string message)
public void Command(string command, Object[] args)
public bool HasPermission(string perm)
public void GrantPermission(string perm)
public void RevokePermission(string perm)
public bool BelongsToGroup(string group)
public void AddToGroup(string group)
public void RemoveFromGroup(string group)
public bool Equals(IPlayer other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public Oxide.Game.Rust.Libraries.Covalence.RustPlayerManager : object {
private IDictionary`2<string, PlayerRecord> playerData
private IDictionary`2<string, RustPlayer> allPlayers
private IDictionary`2<string, RustPlayer> connectedPlayers
public IEnumerable`1<IPlayer> All
public IEnumerable`1<IPlayer> Connected
public IEnumerable`1<IPlayer> Sleeping
internal void Initialize()
internal void PlayerJoin(ulong userId, string name)
internal void PlayerConnected(BasePlayer player)
internal void PlayerDisconnected(BasePlayer player)
internal void SavePlayerData()
public IEnumerable`1<IPlayer> get_All()
public IEnumerable`1<IPlayer> get_Connected()
public IEnumerable`1<IPlayer> get_Sleeping()
public IPlayer FindPlayerById(string id)
public IPlayer FindPlayerByObj(object obj)
public IPlayer FindPlayer(string partialNameOrId)
public IEnumerable`1<IPlayer> FindPlayers(string partialNameOrId)
}
public Oxide.Game.Rust.Libraries.Covalence.RustServer : object {
internal Server Server
private IPAddress address
private IPAddress localAddress
private SaveInfo <SaveInfo>k__BackingField
public string Name
public IPAddress Address
public IPAddress LocalAddress
public ushort Port
public string Version
public string Protocol
public CultureInfo Language
public int Players
public int MaxPlayers
public DateTime Time
public SaveInfo SaveInfo
public string get_Name()
public void set_Name(string value)
public IPAddress get_Address()
public IPAddress get_LocalAddress()
public ushort get_Port()
public string get_Version()
public string get_Protocol()
public CultureInfo get_Language()
public int get_Players()
public int get_MaxPlayers()
public void set_MaxPlayers(int value)
public DateTime get_Time()
public void set_Time(DateTime value)
public SaveInfo get_SaveInfo()
public void Ban(string id, string reason, TimeSpan duration)
public TimeSpan BanTimeRemaining(string id)
public bool IsBanned(string id)
public void Save()
public void Unban(string id)
public void Broadcast(string message, string prefix, Object[] args)
public void Broadcast(string message)
public void Command(string command, Object[] args)
}
public Oxide.Game.Rust.Libraries.Item : Library {
internal RustCovalenceProvider Covalence
public Item GetItem(int itemId)
}
public Oxide.Game.Rust.Libraries.Player : Library {
private string ipPattern
internal Permission permission
public ListHashSet`1<BasePlayer> Players
public ListHashSet`1<BasePlayer> Sleepers
public CultureInfo Language(BasePlayer player)
public string Address(Connection connection)
public string Address(BasePlayer player)
public int Ping(Connection connection)
public int Ping(BasePlayer player)
public bool IsAdmin(ulong id)
public bool IsAdmin(string id)
public bool IsAdmin(BasePlayer player)
public bool IsBanned(ulong id)
public bool IsBanned(string id)
public bool IsBanned(BasePlayer player)
public bool IsConnected(BasePlayer player)
public bool IsSleeping(ulong id)
public bool IsSleeping(string id)
public bool IsSleeping(BasePlayer player)
public void Ban(ulong id, string reason)
public void Ban(string id, string reason)
public void Ban(BasePlayer player, string reason)
public void Heal(BasePlayer player, float amount)
public void Hurt(BasePlayer player, float amount)
public void Kick(BasePlayer player, string reason)
public void Kill(BasePlayer player)
public void Rename(BasePlayer player, string name)
public void Teleport(BasePlayer player, Vector3 destination)
public void Teleport(BasePlayer player, BasePlayer target)
public void Teleport(BasePlayer player, float x, float y, float z)
public void Unban(ulong id)
public void Unban(string id)
public void Unban(BasePlayer player)
public Vector3 Position(BasePlayer player)
public BasePlayer Find(string nameOrIdOrIp)
public BasePlayer FindById(string id)
public BasePlayer FindById(ulong id)
public ListHashSet`1<BasePlayer> get_Players()
public ListHashSet`1<BasePlayer> get_Sleepers()
public void Message(BasePlayer player, string message, string prefix, ulong userId, Object[] args)
public void Message(BasePlayer player, string message, ulong userId)
public void Reply(BasePlayer player, string message, string prefix, ulong userId, Object[] args)
public void Reply(BasePlayer player, string message, ulong userId)
public void Command(BasePlayer player, string command, Object[] args)
public void DropItem(BasePlayer player, int itemId)
public void DropItem(BasePlayer player, Item item)
public void GiveItem(BasePlayer player, int itemId, int quantity)
public void GiveItem(BasePlayer player, Item item, int quantity)
public PlayerInventory Inventory(BasePlayer player)
public void ClearInventory(BasePlayer player)
public void ResetInventory(BasePlayer player)
}
public Oxide.Game.Rust.Libraries.Rust : Library {
internal Player Player
internal Server Server
public bool IsGlobal
public bool get_IsGlobal()
public BindingFlags PrivateBindingFlag()
public string QuoteSafe(string str)
public void BroadcastChat(string name, string message, string userId)
public void SendChatMessage(BasePlayer player, string name, string message, string userId)
public void RunClientCommand(BasePlayer player, string command, Object[] args)
public void RunServerCommand(string command, Object[] args)
public string UserIDFromConnection(Connection connection)
public Array UserIDsFromBuildingPrivlidge(BuildingPrivlidge priv)
public string UserIDFromPlayer(BasePlayer player)
public string OwnerIDFromEntity(BaseEntity entity)
public BasePlayer FindPlayer(string nameOrIdOrIp)
public BasePlayer FindPlayerByName(string name)
public BasePlayer FindPlayerById(ulong id)
public BasePlayer FindPlayerByIdString(string id)
public void ForcePlayerPosition(BasePlayer player, float x, float y, float z)
}
public Oxide.Game.Rust.Libraries.Server : Library {
public void Broadcast(string message, string prefix, ulong userId, Object[] args)
public void Broadcast(string message, ulong userId)
public void Command(string command, Object[] args)
}
public Oxide.Game.Rust.RustCore : CSPlugin {
internal Command cmdlib
internal Lang lang
internal Permission permission
internal Player Player
internal RustCovalenceProvider Covalence
internal PluginManager pluginManager
internal IServer Server
internal RustExtension Extension
internal bool serverInitialized
internal bool isPlayerTakingDamage
internal string ipPattern
internal IEnumerable`1<string> RestrictedCommands
private void GrantCommand(IPlayer player, string command, String[] args)
private void GroupCommand(IPlayer player, string command, String[] args)
private void LangCommand(IPlayer player, string command, String[] args)
private void LoadCommand(IPlayer player, string command, String[] args)
private void PluginsCommand(IPlayer player)
private string FormatBytes(long bytes)
private void ReloadCommand(IPlayer player, string command, String[] args)
private void RevokeCommand(IPlayer player, string command, String[] args)
private void ShowCommand(IPlayer player, string command, String[] args)
private void UnloadCommand(IPlayer player, string command, String[] args)
private void UserGroupCommand(IPlayer player, string command, String[] args)
private void VersionCommand(IPlayer player)
private void SaveCommand(IPlayer player)
internal IEnumerable`1<string> get_RestrictedCommands()
private bool PermissionsLoaded(IPlayer player)
private void Init()
private void OnPluginLoaded(Plugin plugin)
private void IOnServerInitialized()
private void OnServerSave()
private void IOnServerShutdown()
private void ParseCommand(string argstr, String& command, String[]& args)
public BasePlayer FindPlayer(string nameOrIdOrIp)
public BasePlayer FindPlayerByName(string name)
public BasePlayer FindPlayerById(ulong id)
public BasePlayer FindPlayerByIdString(string id)
private object IOnBaseCombatEntityHurt(BaseCombatEntity entity, HitInfo hitInfo)
private object IOnNpcTarget(BaseNpc npc, BaseEntity target)
private void IOnEntitySaved(BaseNetworkable baseNetworkable, SaveInfo saveInfo)
private object IOnLoseCondition(Item item, float amount)
private object ICanPickupEntity(BasePlayer basePlayer, DoorCloser entity)
private object IOnBasePlayerAttacked(BasePlayer basePlayer, HitInfo hitInfo)
private object IOnBasePlayerHurt(BasePlayer basePlayer, HitInfo hitInfo)
private void OnServerUserSet(ulong steamId, UserGroup group, string playerName, string reason, long expiry)
private void OnServerUserRemove(ulong steamId)
private object IOnUserApprove(Connection connection)
private void IOnPlayerBanned(Connection connection, AuthResponse status)
private object IOnPlayerChat(ulong playerId, string playerName, string message, ChatChannel channel, BasePlayer basePlayer)
private void TryRunPlayerCommand(BasePlayer basePlayer, string message, string commandPrefix)
private void OnClientAuth(Connection connection)
private void IOnPlayerConnected(BasePlayer basePlayer)
private void OnPlayerDisconnected(BasePlayer basePlayer, string reason)
private void OnPlayerSetInfo(Connection connection, string key, string val)
private void OnPlayerKicked(BasePlayer basePlayer, string reason)
private object OnPlayerRespawn(BasePlayer basePlayer)
private void OnPlayerRespawned(BasePlayer basePlayer)
private object IOnRconMessage(IPAddress ipAddress, string command)
private object IOnRconInitialize()
private object IOnRunCommandLine()
private object IOnServerCommand(Arg arg)
private void OnServerInformationUpdated()
private object IOnCupboardAuthorize(ulong userID, BasePlayer player, BuildingPrivlidge privlidge)
}
public Oxide.Game.Rust.RustExtension : Extension {
private string OxideRustReleaseListUrl
internal Assembly Assembly
internal AssemblyName AssemblyName
internal VersionNumber AssemblyVersion
internal string AssemblyAuthors
private WebClient WebClient
private VersionNumber LatestExtVersion
public String[] Filter
public bool IsGameExtension
public string Name
public string Author
public VersionNumber Version
public String[] DefaultReferences
public String[] WhitelistAssemblies
public String[] WhitelistNamespaces
public bool get_IsGameExtension()
public string get_Name()
public string get_Author()
public VersionNumber get_Version()
public String[] get_DefaultReferences()
public String[] get_WhitelistAssemblies()
public String[] get_WhitelistNamespaces()
public void .ctor(ExtensionManager manager)
public void Load()
public void LoadPluginWatchers(string directory)
public void OnModLoad()
public void GetLatestVersion(Action`2<VersionNumber, Exception> callback)
private Task`1<VersionNumber> GetLatestExtensionVersion()
private VersionNumber ParseVersionNumber(string versionString)
}
public Oxide.Game.Rust.RustPluginLoader : PluginLoader {
public Type[] CorePlugins
public Type[] get_CorePlugins()
}
public Oxide.Plugins.RustExtensionMethods : object {
public bool IsSteamId(EncryptedValue`1<ulong> userID)
}
public Oxide.Plugins.RustPlugin : CSharpPlugin {
protected Command cmd
protected Rust rust
protected Item Item
protected Player Player
protected Server Server
public void HandleAddedToManager(PluginManager manager)
private void base_OnPlayerConnected(BasePlayer player)
private void base_OnPlayerDisconnected(BasePlayer player, string reason)
private void AddOnlinePlayer(BasePlayer player)
protected void PrintToConsole(BasePlayer player, string format, Object[] args)
protected void PrintToConsole(string format, Object[] args)
protected void PrintToChat(BasePlayer player, string format, Object[] args)
protected void PrintToChat(string format, Object[] args)
protected void SendReply(Arg arg, string format, Object[] args)
protected void SendReply(BasePlayer player, string format, Object[] args)
protected void SendWarning(Arg arg, string format, Object[] args)
protected void SendError(Arg arg, string format, Object[] args)
protected void ForcePlayerPosition(BasePlayer player, Vector3 destination)
}
