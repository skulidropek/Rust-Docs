public class Oxide.Game.Rust.Cui.ComponentConverter : JsonConverter {
    
public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
public class Oxide.Game.Rust.Cui.CuiButton : object {
    [CompilerGeneratedAttribute]

private CuiButtonComponent <Button>k__BackingField;
    [CompilerGeneratedAttribute]

private CuiRectTransformComponent <RectTransform>k__BackingField;
    [CompilerGeneratedAttribute]

private CuiTextComponent <Text>k__BackingField;
    [CompilerGeneratedAttribute]

private float <FadeOut>k__BackingField;
    
public CuiButtonComponent Button { get; }
    
public CuiRectTransformComponent RectTransform { get; }
    
public CuiTextComponent Text { get; }
    
public float FadeOut { get; public set; }
    [CompilerGeneratedAttribute]
public CuiButtonComponent get_Button();
    [CompilerGeneratedAttribute]
public CuiRectTransformComponent get_RectTransform();
    [CompilerGeneratedAttribute]
public CuiTextComponent get_Text();
    [CompilerGeneratedAttribute]
public float get_FadeOut();
    [CompilerGeneratedAttribute]
public void set_FadeOut(float value);
}
public class Oxide.Game.Rust.Cui.CuiButtonComponent : object {
    [CompilerGeneratedAttribute]

private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Close>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Sprite>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Material>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]

private Type <ImageType>k__BackingField;
    [CompilerGeneratedAttribute]

private float <FadeIn>k__BackingField;
    
public string Type { get; }
    [JsonPropertyAttribute("command")]

public string Command { get; public set; }
    [JsonPropertyAttribute("close")]

public string Close { get; public set; }
    [JsonPropertyAttribute("sprite")]

public string Sprite { get; public set; }
    [JsonPropertyAttribute("material")]

public string Material { get; public set; }
    
public string Color { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute("imagetype")]

public Type ImageType { get; public set; }
    [JsonPropertyAttribute("fadeIn")]

public float FadeIn { get; public set; }
    public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public string get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(string value);
    [CompilerGeneratedAttribute]
public string get_Sprite();
    [CompilerGeneratedAttribute]
public void set_Sprite(string value);
    [CompilerGeneratedAttribute]
public string get_Material();
    [CompilerGeneratedAttribute]
public void set_Material(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(string value);
    [CompilerGeneratedAttribute]
public Type get_ImageType();
    [CompilerGeneratedAttribute]
public void set_ImageType(Type value);
    [CompilerGeneratedAttribute]
public float get_FadeIn();
    [CompilerGeneratedAttribute]
public void set_FadeIn(float value);
}
public class Oxide.Game.Rust.Cui.CuiCountdownComponent : object {
    [CompilerGeneratedAttribute]

private float <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]

private float <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]

private float <Step>k__BackingField;
    [CompilerGeneratedAttribute]

private float <Interval>k__BackingField;
    [CompilerGeneratedAttribute]

private TimerFormat <TimerFormat>k__BackingField;
    [CompilerGeneratedAttribute]

private string <NumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <DestroyIfDone>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]

private float <FadeIn>k__BackingField;
    
public string Type { get; }
    [JsonPropertyAttribute("endTime")]

public float EndTime { get; public set; }
    [JsonPropertyAttribute("startTime")]

public float StartTime { get; public set; }
    [JsonPropertyAttribute("step")]

public float Step { get; public set; }
    [JsonPropertyAttribute("interval")]

public float Interval { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute("timerFormat")]

public TimerFormat TimerFormat { get; public set; }
    [JsonPropertyAttribute("numberFormat")]

public string NumberFormat { get; public set; }
    [JsonPropertyAttribute("destroyIfDone")]

public bool DestroyIfDone { get; public set; }
    [JsonPropertyAttribute("command")]

public string Command { get; public set; }
    [JsonPropertyAttribute("fadeIn")]

public float FadeIn { get; public set; }
    public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public float get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(float value);
    [CompilerGeneratedAttribute]
public float get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(float value);
    [CompilerGeneratedAttribute]
public float get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(float value);
    [CompilerGeneratedAttribute]
public float get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(float value);
    [CompilerGeneratedAttribute]
public TimerFormat get_TimerFormat();
    [CompilerGeneratedAttribute]
public void set_TimerFormat(TimerFormat value);
    [CompilerGeneratedAttribute]
public string get_NumberFormat();
    [CompilerGeneratedAttribute]
public void set_NumberFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_DestroyIfDone();
    [CompilerGeneratedAttribute]
public void set_DestroyIfDone(bool value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public float get_FadeIn();
    [CompilerGeneratedAttribute]
public void set_FadeIn(float value);
}
public class Oxide.Game.Rust.Cui.CuiElement : object {
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Parent>k__BackingField;
    [CompilerGeneratedAttribute]

private string <DestroyUi>k__BackingField;
    [CompilerGeneratedAttribute]

private List`1<ICuiComponent> <Components>k__BackingField;
    [CompilerGeneratedAttribute]

private float <FadeOut>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Update>k__BackingField;
    [JsonPropertyAttribute("name")]

public string Name { get; public set; }
    [JsonPropertyAttribute("parent")]

public string Parent { get; public set; }
    [JsonPropertyAttribute("destroyUi")]

public string DestroyUi { get; public set; }
    [JsonPropertyAttribute("components")]

public List`1<ICuiComponent> Components { get; }
    [JsonPropertyAttribute("fadeOut")]

public float FadeOut { get; public set; }
    [JsonPropertyAttribute("update")]

public bool Update { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(string value);
    [CompilerGeneratedAttribute]
public string get_DestroyUi();
    [CompilerGeneratedAttribute]
public void set_DestroyUi(string value);
    [CompilerGeneratedAttribute]
public List`1<ICuiComponent> get_Components();
    [CompilerGeneratedAttribute]
public float get_FadeOut();
    [CompilerGeneratedAttribute]
public void set_FadeOut(float value);
    [CompilerGeneratedAttribute]
public bool get_Update();
    [CompilerGeneratedAttribute]
public void set_Update(bool value);
}
public class Oxide.Game.Rust.Cui.CuiElementContainer : List`1<CuiElement> {
    public string Add(CuiButton button, string parent, string name, string destroyUi);
    public string Add(CuiLabel label, string parent, string name, string destroyUi);
    public string Add(CuiPanel panel, string parent, string name, string destroyUi);
    public string ToJson();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Oxide.Game.Rust.Cui.CuiHelper : object {
    public static string ToJson(List`1<CuiElement> elements, bool format);
    public static List`1<CuiElement> FromJson(string json);
    public static string GetGuid();
    public static bool AddUi(BasePlayer player, List`1<CuiElement> elements);
    public static bool AddUi(BasePlayer player, string json);
    public static bool DestroyUi(BasePlayer player, string elem);
    [ExtensionAttribute]
public static void SetColor(ICuiColor elem, Color color);
    [ExtensionAttribute]
public static Color GetColor(ICuiColor elem);
}
public class Oxide.Game.Rust.Cui.CuiImageComponent : object {
    [CompilerGeneratedAttribute]

private string <Sprite>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Material>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]

private Type <ImageType>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Png>k__BackingField;
    [CompilerGeneratedAttribute]

private float <FadeIn>k__BackingField;
    [CompilerGeneratedAttribute]

private int <ItemId>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <SkinId>k__BackingField;
    
public string Type { get; }
    [JsonPropertyAttribute("sprite")]

public string Sprite { get; public set; }
    [JsonPropertyAttribute("material")]

public string Material { get; public set; }
    
public string Color { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute("imagetype")]

public Type ImageType { get; public set; }
    [JsonPropertyAttribute("png")]

public string Png { get; public set; }
    [JsonPropertyAttribute("fadeIn")]

public float FadeIn { get; public set; }
    [JsonPropertyAttribute("itemid")]

public int ItemId { get; public set; }
    [JsonPropertyAttribute("skinid")]

public ulong SkinId { get; public set; }
    public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public string get_Sprite();
    [CompilerGeneratedAttribute]
public void set_Sprite(string value);
    [CompilerGeneratedAttribute]
public string get_Material();
    [CompilerGeneratedAttribute]
public void set_Material(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(string value);
    [CompilerGeneratedAttribute]
public Type get_ImageType();
    [CompilerGeneratedAttribute]
public void set_ImageType(Type value);
    [CompilerGeneratedAttribute]
public string get_Png();
    [CompilerGeneratedAttribute]
public void set_Png(string value);
    [CompilerGeneratedAttribute]
public float get_FadeIn();
    [CompilerGeneratedAttribute]
public void set_FadeIn(float value);
    [CompilerGeneratedAttribute]
public int get_ItemId();
    [CompilerGeneratedAttribute]
public void set_ItemId(int value);
    [CompilerGeneratedAttribute]
public ulong get_SkinId();
    [CompilerGeneratedAttribute]
public void set_SkinId(ulong value);
}
public class Oxide.Game.Rust.Cui.CuiInputFieldComponent : object {
    [CompilerGeneratedAttribute]

private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]

private int <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Font>k__BackingField;
    [CompilerGeneratedAttribute]

private TextAnchor <Align>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]

private int <CharsLimit>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <IsPassword>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <NeedsKeyboard>k__BackingField;
    [CompilerGeneratedAttribute]

private LineType <LineType>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Autofocus>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <HudMenuInput>k__BackingField;
    
public string Type { get; }
    [JsonPropertyAttribute("text")]

public string Text { get; public set; }
    [JsonPropertyAttribute("fontSize")]

public int FontSize { get; public set; }
    [JsonPropertyAttribute("font")]

public string Font { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute("align")]

public TextAnchor Align { get; public set; }
    
public string Color { get; public set; }
    [JsonPropertyAttribute("characterLimit")]

public int CharsLimit { get; public set; }
    [JsonPropertyAttribute("command")]

public string Command { get; public set; }
    [JsonPropertyAttribute("password")]

public bool IsPassword { get; public set; }
    [JsonPropertyAttribute("readOnly")]

public bool ReadOnly { get; public set; }
    [JsonPropertyAttribute("needsKeyboard")]

public bool NeedsKeyboard { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute("lineType")]

public LineType LineType { get; public set; }
    [JsonPropertyAttribute("autofocus")]

public bool Autofocus { get; public set; }
    [JsonPropertyAttribute("hudMenuInput")]

public bool HudMenuInput { get; public set; }
    public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public int get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(int value);
    [CompilerGeneratedAttribute]
public string get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(string value);
    [CompilerGeneratedAttribute]
public TextAnchor get_Align();
    [CompilerGeneratedAttribute]
public void set_Align(TextAnchor value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(string value);
    [CompilerGeneratedAttribute]
public int get_CharsLimit();
    [CompilerGeneratedAttribute]
public void set_CharsLimit(int value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPassword();
    [CompilerGeneratedAttribute]
public void set_IsPassword(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedsKeyboard();
    [CompilerGeneratedAttribute]
public void set_NeedsKeyboard(bool value);
    [CompilerGeneratedAttribute]
public LineType get_LineType();
    [CompilerGeneratedAttribute]
public void set_LineType(LineType value);
    [CompilerGeneratedAttribute]
public bool get_Autofocus();
    [CompilerGeneratedAttribute]
public void set_Autofocus(bool value);
    [CompilerGeneratedAttribute]
public bool get_HudMenuInput();
    [CompilerGeneratedAttribute]
public void set_HudMenuInput(bool value);
}
public class Oxide.Game.Rust.Cui.CuiLabel : object {
    [CompilerGeneratedAttribute]

private CuiTextComponent <Text>k__BackingField;
    [CompilerGeneratedAttribute]

private CuiRectTransformComponent <RectTransform>k__BackingField;
    [CompilerGeneratedAttribute]

private float <FadeOut>k__BackingField;
    
public CuiTextComponent Text { get; }
    
public CuiRectTransformComponent RectTransform { get; }
    
public float FadeOut { get; public set; }
    [CompilerGeneratedAttribute]
public CuiTextComponent get_Text();
    [CompilerGeneratedAttribute]
public CuiRectTransformComponent get_RectTransform();
    [CompilerGeneratedAttribute]
public float get_FadeOut();
    [CompilerGeneratedAttribute]
public void set_FadeOut(float value);
}
public class Oxide.Game.Rust.Cui.CuiNeedsCursorComponent : object {
    
public string Type { get; }
    public sealed virtual string get_Type();
}
public class Oxide.Game.Rust.Cui.CuiNeedsKeyboardComponent : object {
    
public string Type { get; }
    public sealed virtual string get_Type();
}
public class Oxide.Game.Rust.Cui.CuiOutlineComponent : object {
    [CompilerGeneratedAttribute]

private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Distance>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <UseGraphicAlpha>k__BackingField;
    
public string Type { get; }
    
public string Color { get; public set; }
    [JsonPropertyAttribute("distance")]

public string Distance { get; public set; }
    [JsonPropertyAttribute("useGraphicAlpha")]

public bool UseGraphicAlpha { get; public set; }
    public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Distance();
    [CompilerGeneratedAttribute]
public void set_Distance(string value);
    [CompilerGeneratedAttribute]
public bool get_UseGraphicAlpha();
    [CompilerGeneratedAttribute]
public void set_UseGraphicAlpha(bool value);
}
public class Oxide.Game.Rust.Cui.CuiPanel : object {
    [CompilerGeneratedAttribute]

private CuiImageComponent <Image>k__BackingField;
    [CompilerGeneratedAttribute]

private CuiRawImageComponent <RawImage>k__BackingField;
    [CompilerGeneratedAttribute]

private CuiRectTransformComponent <RectTransform>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <CursorEnabled>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <KeyboardEnabled>k__BackingField;
    [CompilerGeneratedAttribute]

private float <FadeOut>k__BackingField;
    
public CuiImageComponent Image { get; public set; }
    
public CuiRawImageComponent RawImage { get; public set; }
    
public CuiRectTransformComponent RectTransform { get; }
    
public bool CursorEnabled { get; public set; }
    
public bool KeyboardEnabled { get; public set; }
    
public float FadeOut { get; public set; }
    [CompilerGeneratedAttribute]
public CuiImageComponent get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(CuiImageComponent value);
    [CompilerGeneratedAttribute]
public CuiRawImageComponent get_RawImage();
    [CompilerGeneratedAttribute]
public void set_RawImage(CuiRawImageComponent value);
    [CompilerGeneratedAttribute]
public CuiRectTransformComponent get_RectTransform();
    [CompilerGeneratedAttribute]
public bool get_CursorEnabled();
    [CompilerGeneratedAttribute]
public void set_CursorEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeyboardEnabled();
    [CompilerGeneratedAttribute]
public void set_KeyboardEnabled(bool value);
    [CompilerGeneratedAttribute]
public float get_FadeOut();
    [CompilerGeneratedAttribute]
public void set_FadeOut(float value);
}
public class Oxide.Game.Rust.Cui.CuiRawImageComponent : object {
    [CompilerGeneratedAttribute]

private string <Sprite>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Material>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Png>k__BackingField;
    [CompilerGeneratedAttribute]

private float <FadeIn>k__BackingField;
    
public string Type { get; }
    [JsonPropertyAttribute("sprite")]

public string Sprite { get; public set; }
    
public string Color { get; public set; }
    [JsonPropertyAttribute("material")]

public string Material { get; public set; }
    [JsonPropertyAttribute("url")]

public string Url { get; public set; }
    [JsonPropertyAttribute("png")]

public string Png { get; public set; }
    [JsonPropertyAttribute("fadeIn")]

public float FadeIn { get; public set; }
    public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public string get_Sprite();
    [CompilerGeneratedAttribute]
public void set_Sprite(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Material();
    [CompilerGeneratedAttribute]
public void set_Material(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Png();
    [CompilerGeneratedAttribute]
public void set_Png(string value);
    [CompilerGeneratedAttribute]
public float get_FadeIn();
    [CompilerGeneratedAttribute]
public void set_FadeIn(float value);
}
public class Oxide.Game.Rust.Cui.CuiRectTransform : object {
    [CompilerGeneratedAttribute]

private string <AnchorMin>k__BackingField;
    [CompilerGeneratedAttribute]

private string <AnchorMax>k__BackingField;
    [CompilerGeneratedAttribute]

private string <OffsetMin>k__BackingField;
    [CompilerGeneratedAttribute]

private string <OffsetMax>k__BackingField;
    [JsonPropertyAttribute("anchormin")]

public string AnchorMin { get; public set; }
    [JsonPropertyAttribute("anchormax")]

public string AnchorMax { get; public set; }
    [JsonPropertyAttribute("offsetmin")]

public string OffsetMin { get; public set; }
    [JsonPropertyAttribute("offsetmax")]

public string OffsetMax { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AnchorMin();
    [CompilerGeneratedAttribute]
public void set_AnchorMin(string value);
    [CompilerGeneratedAttribute]
public string get_AnchorMax();
    [CompilerGeneratedAttribute]
public void set_AnchorMax(string value);
    [CompilerGeneratedAttribute]
public string get_OffsetMin();
    [CompilerGeneratedAttribute]
public void set_OffsetMin(string value);
    [CompilerGeneratedAttribute]
public string get_OffsetMax();
    [CompilerGeneratedAttribute]
public void set_OffsetMax(string value);
}
public class Oxide.Game.Rust.Cui.CuiRectTransformComponent : CuiRectTransform {
    
public string Type { get; }
    public sealed virtual string get_Type();
}
public class Oxide.Game.Rust.Cui.CuiScrollbar : object {
    [CompilerGeneratedAttribute]

private bool <Invert>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <AutoHide>k__BackingField;
    [CompilerGeneratedAttribute]

private string <HandleSprite>k__BackingField;
    [CompilerGeneratedAttribute]

private float <Size>k__BackingField;
    [CompilerGeneratedAttribute]

private string <HandleColor>k__BackingField;
    [CompilerGeneratedAttribute]

private string <HighlightColor>k__BackingField;
    [CompilerGeneratedAttribute]

private string <PressedColor>k__BackingField;
    [CompilerGeneratedAttribute]

private string <TrackSprite>k__BackingField;
    [CompilerGeneratedAttribute]

private string <TrackColor>k__BackingField;
    [JsonPropertyAttribute("invert")]

public bool Invert { get; public set; }
    [JsonPropertyAttribute("autoHide")]

public bool AutoHide { get; public set; }
    [JsonPropertyAttribute("handleSprite")]

public string HandleSprite { get; public set; }
    [JsonPropertyAttribute("size")]

public float Size { get; public set; }
    [JsonPropertyAttribute("handleColor")]

public string HandleColor { get; public set; }
    [JsonPropertyAttribute("highlightColor")]

public string HighlightColor { get; public set; }
    [JsonPropertyAttribute("pressedColor")]

public string PressedColor { get; public set; }
    [JsonPropertyAttribute("trackSprite")]

public string TrackSprite { get; public set; }
    [JsonPropertyAttribute("trackColor")]

public string TrackColor { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Invert();
    [CompilerGeneratedAttribute]
public void set_Invert(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoHide();
    [CompilerGeneratedAttribute]
public void set_AutoHide(bool value);
    [CompilerGeneratedAttribute]
public string get_HandleSprite();
    [CompilerGeneratedAttribute]
public void set_HandleSprite(string value);
    [CompilerGeneratedAttribute]
public float get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(float value);
    [CompilerGeneratedAttribute]
public string get_HandleColor();
    [CompilerGeneratedAttribute]
public void set_HandleColor(string value);
    [CompilerGeneratedAttribute]
public string get_HighlightColor();
    [CompilerGeneratedAttribute]
public void set_HighlightColor(string value);
    [CompilerGeneratedAttribute]
public string get_PressedColor();
    [CompilerGeneratedAttribute]
public void set_PressedColor(string value);
    [CompilerGeneratedAttribute]
public string get_TrackSprite();
    [CompilerGeneratedAttribute]
public void set_TrackSprite(string value);
    [CompilerGeneratedAttribute]
public string get_TrackColor();
    [CompilerGeneratedAttribute]
public void set_TrackColor(string value);
}
public class Oxide.Game.Rust.Cui.CuiScrollViewComponent : object {
    [CompilerGeneratedAttribute]

private CuiRectTransform <ContentTransform>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Horizontal>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Vertical>k__BackingField;
    [CompilerGeneratedAttribute]

private MovementType <MovementType>k__BackingField;
    [CompilerGeneratedAttribute]

private float <Elasticity>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Inertia>k__BackingField;
    [CompilerGeneratedAttribute]

private float <DecelerationRate>k__BackingField;
    [CompilerGeneratedAttribute]

private float <ScrollSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]

private CuiScrollbar <HorizontalScrollbar>k__BackingField;
    [CompilerGeneratedAttribute]

private CuiScrollbar <VerticalScrollbar>k__BackingField;
    
public string Type { get; }
    [JsonPropertyAttribute("contentTransform")]

public CuiRectTransform ContentTransform { get; public set; }
    [JsonPropertyAttribute("horizontal")]

public bool Horizontal { get; public set; }
    [JsonPropertyAttribute("vertical")]

public bool Vertical { get; public set; }
    [JsonPropertyAttribute("movementType")]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]

public MovementType MovementType { get; public set; }
    [JsonPropertyAttribute("elasticity")]

public float Elasticity { get; public set; }
    [JsonPropertyAttribute("inertia")]

public bool Inertia { get; public set; }
    [JsonPropertyAttribute("decelerationRate")]

public float DecelerationRate { get; public set; }
    [JsonPropertyAttribute("scrollSensitivity")]

public float ScrollSensitivity { get; public set; }
    [JsonPropertyAttribute("horizontalScrollbar")]

public CuiScrollbar HorizontalScrollbar { get; public set; }
    [JsonPropertyAttribute("verticalScrollbar")]

public CuiScrollbar VerticalScrollbar { get; public set; }
    public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public CuiRectTransform get_ContentTransform();
    [CompilerGeneratedAttribute]
public void set_ContentTransform(CuiRectTransform value);
    [CompilerGeneratedAttribute]
public bool get_Horizontal();
    [CompilerGeneratedAttribute]
public void set_Horizontal(bool value);
    [CompilerGeneratedAttribute]
public bool get_Vertical();
    [CompilerGeneratedAttribute]
public void set_Vertical(bool value);
    [CompilerGeneratedAttribute]
public MovementType get_MovementType();
    [CompilerGeneratedAttribute]
public void set_MovementType(MovementType value);
    [CompilerGeneratedAttribute]
public float get_Elasticity();
    [CompilerGeneratedAttribute]
public void set_Elasticity(float value);
    [CompilerGeneratedAttribute]
public bool get_Inertia();
    [CompilerGeneratedAttribute]
public void set_Inertia(bool value);
    [CompilerGeneratedAttribute]
public float get_DecelerationRate();
    [CompilerGeneratedAttribute]
public void set_DecelerationRate(float value);
    [CompilerGeneratedAttribute]
public float get_ScrollSensitivity();
    [CompilerGeneratedAttribute]
public void set_ScrollSensitivity(float value);
    [CompilerGeneratedAttribute]
public CuiScrollbar get_HorizontalScrollbar();
    [CompilerGeneratedAttribute]
public void set_HorizontalScrollbar(CuiScrollbar value);
    [CompilerGeneratedAttribute]
public CuiScrollbar get_VerticalScrollbar();
    [CompilerGeneratedAttribute]
public void set_VerticalScrollbar(CuiScrollbar value);
}
public class Oxide.Game.Rust.Cui.CuiTextComponent : object {
    [CompilerGeneratedAttribute]

private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]

private int <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Font>k__BackingField;
    [CompilerGeneratedAttribute]

private TextAnchor <Align>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]

private VerticalWrapMode <VerticalOverflow>k__BackingField;
    [CompilerGeneratedAttribute]

private float <FadeIn>k__BackingField;
    
public string Type { get; }
    [JsonPropertyAttribute("text")]

public string Text { get; public set; }
    [JsonPropertyAttribute("fontSize")]

public int FontSize { get; public set; }
    [JsonPropertyAttribute("font")]

public string Font { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute("align")]

public TextAnchor Align { get; public set; }
    
public string Color { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute("verticalOverflow")]

public VerticalWrapMode VerticalOverflow { get; public set; }
    [JsonPropertyAttribute("fadeIn")]

public float FadeIn { get; public set; }
    public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public int get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(int value);
    [CompilerGeneratedAttribute]
public string get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(string value);
    [CompilerGeneratedAttribute]
public TextAnchor get_Align();
    [CompilerGeneratedAttribute]
public void set_Align(TextAnchor value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(string value);
    [CompilerGeneratedAttribute]
public VerticalWrapMode get_VerticalOverflow();
    [CompilerGeneratedAttribute]
public void set_VerticalOverflow(VerticalWrapMode value);
    [CompilerGeneratedAttribute]
public float get_FadeIn();
    [CompilerGeneratedAttribute]
public void set_FadeIn(float value);
}
public interface Oxide.Game.Rust.Cui.ICuiColor {
    [JsonPropertyAttribute("color")]

public string Color { get; public set; }
    public abstract virtual string get_Color();
    public abstract virtual void set_Color(string value);
}
[JsonConverterAttribute("Oxide.Game.Rust.Cui.ComponentConverter")]
public interface Oxide.Game.Rust.Cui.ICuiComponent {
    [JsonPropertyAttribute("type")]

public string Type { get; }
    public abstract virtual string get_Type();
}
public enum Oxide.Game.Rust.Cui.TimerFormat : Enum {
    
public int value__;
    
public static TimerFormat None;
    
public static TimerFormat SecondsHundreth;
    
public static TimerFormat MinutesSeconds;
    
public static TimerFormat MinutesSecondsHundreth;
    
public static TimerFormat HoursMinutes;
    
public static TimerFormat HoursMinutesSeconds;
    
public static TimerFormat HoursMinutesSecondsMilliseconds;
    
public static TimerFormat HoursMinutesSecondsTenths;
    
public static TimerFormat DaysHoursMinutes;
    
public static TimerFormat DaysHoursMinutesSeconds;
    
public static TimerFormat Custom;
}
public class Oxide.Game.Rust.Libraries.Command : Library {
    
internal Dictionary`2<string, ConsoleCommand> consoleCommands;
    
internal Dictionary`2<string, ChatCommand> chatCommands;
    
private Dictionary`2<Plugin, Callback`2<Plugin, PluginManager>> pluginRemovedFromManager;
    [LibraryFunction("AddChatCommand")]
public void AddChatCommand(string name, Plugin plugin, string callback);
    public void AddChatCommand(string command, Plugin plugin, Action`3<BasePlayer, string, String[]> callback);
    [LibraryFunction("AddConsoleCommand")]
public void AddConsoleCommand(string command, Plugin plugin, string callback);
    public void AddConsoleCommand(string command, Plugin plugin, Func`2<Arg, bool> callback);
    [LibraryFunction("RemoveChatCommand")]
public void RemoveChatCommand(string command, Plugin plugin);
    [LibraryFunction("RemoveConsoleCommand")]
public void RemoveConsoleCommand(string command, Plugin plugin);
    private void RemoveChatCommand(ChatCommand command);
    private void RemoveConsoleCommand(ConsoleCommand command);
    internal bool HandleChatCommand(BasePlayer sender, string name, String[] args);
    private void plugin_OnRemovedFromManager(Plugin sender, PluginManager manager);
    private bool CanOverrideCommand(string command, string type);
}
public class Oxide.Game.Rust.Libraries.Covalence.RustCommandSystem : object {
    
private Command cmdlib;
    
private RustConsolePlayer consolePlayer;
    
private CommandHandler commandHandler;
    
internal IDictionary`2<string, RegisteredCommand> registeredCommands;
    private bool CommandCallback(IPlayer caller, string cmd, String[] args);
    public sealed virtual void RegisterCommand(string command, Plugin plugin, CommandCallback callback);
    public sealed virtual void UnregisterCommand(string command, Plugin plugin);
    public bool HandleChatMessage(IPlayer player, string message);
    private bool CanOverrideCommand(string command);
    public static String[] ExtractArgs(Arg arg);
}
public class Oxide.Game.Rust.Libraries.Covalence.RustConsolePlayer : object {
    [CompilerGeneratedAttribute]

private float <Health>k__BackingField;
    [CompilerGeneratedAttribute]

private float <MaxHealth>k__BackingField;
    
public object Object { get; }
    
public CommandType LastCommand { get; public set; }
    
public string Name { get; public set; }
    
public string Id { get; }
    
public CultureInfo Language { get; }
    
public string Address { get; }
    
public int Ping { get; }
    
public bool IsAdmin { get; }
    
public bool IsBanned { get; }
    
public bool IsConnected { get; }
    
public bool IsSleeping { get; }
    
public bool IsServer { get; }
    
public TimeSpan BanTimeRemaining { get; }
    
public float Health { get; public set; }
    
public float MaxHealth { get; public set; }
    public sealed virtual object get_Object();
    public sealed virtual CommandType get_LastCommand();
    public sealed virtual void set_LastCommand(CommandType value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_Id();
    public sealed virtual CultureInfo get_Language();
    public sealed virtual string get_Address();
    public sealed virtual int get_Ping();
    public sealed virtual bool get_IsAdmin();
    public sealed virtual bool get_IsBanned();
    public sealed virtual bool get_IsConnected();
    public sealed virtual bool get_IsSleeping();
    public sealed virtual bool get_IsServer();
    public sealed virtual void Ban(string reason, TimeSpan duration);
    public sealed virtual TimeSpan get_BanTimeRemaining();
    public sealed virtual void Heal(float amount);
    [CompilerGeneratedAttribute]
public sealed virtual float get_Health();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Health(float value);
    public sealed virtual void Hurt(float amount);
    public sealed virtual void Kick(string reason);
    public sealed virtual void Kill();
    [CompilerGeneratedAttribute]
public sealed virtual float get_MaxHealth();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxHealth(float value);
    public sealed virtual void Rename(string name);
    public sealed virtual void Teleport(float x, float y, float z);
    public sealed virtual void Teleport(GenericPosition pos);
    public sealed virtual void Unban();
    public sealed virtual void Position(Single& x, Single& y, Single& z);
    public sealed virtual GenericPosition Position();
    public sealed virtual void Message(string message, string prefix, Object[] args);
    public sealed virtual void Message(string message);
    public sealed virtual void Reply(string message, string prefix, Object[] args);
    public sealed virtual void Reply(string message);
    public sealed virtual void Command(string command, Object[] args);
    public sealed virtual bool HasPermission(string perm);
    public sealed virtual void GrantPermission(string perm);
    public sealed virtual void RevokePermission(string perm);
    public sealed virtual bool BelongsToGroup(string group);
    public sealed virtual void AddToGroup(string group);
    public sealed virtual void RemoveFromGroup(string group);
}
public class Oxide.Game.Rust.Libraries.Covalence.RustCovalenceProvider : object {
    [CompilerGeneratedAttribute]

private static RustCovalenceProvider <Instance>k__BackingField;
    [CompilerGeneratedAttribute]

private RustPlayerManager <PlayerManager>k__BackingField;
    [CompilerGeneratedAttribute]

private RustCommandSystem <CommandSystem>k__BackingField;
    
public string GameName { get; }
    
public UInt32 ClientAppId { get; }
    
public UInt32 ServerAppId { get; }
    
internal static RustCovalenceProvider Instance { get; private set; }
    
public RustPlayerManager PlayerManager { get; private set; }
    
public RustCommandSystem CommandSystem { get; private set; }
    public sealed virtual string get_GameName();
    public sealed virtual UInt32 get_ClientAppId();
    public sealed virtual UInt32 get_ServerAppId();
    [CompilerGeneratedAttribute]
internal static RustCovalenceProvider get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(RustCovalenceProvider value);
    [CompilerGeneratedAttribute]
public RustPlayerManager get_PlayerManager();
    [CompilerGeneratedAttribute]
private void set_PlayerManager(RustPlayerManager value);
    [CompilerGeneratedAttribute]
public RustCommandSystem get_CommandSystem();
    [CompilerGeneratedAttribute]
private void set_CommandSystem(RustCommandSystem value);
    public sealed virtual IServer CreateServer();
    public sealed virtual IPlayerManager CreatePlayerManager();
    public sealed virtual ICommandSystem CreateCommandSystemProvider();
    public sealed virtual string FormatText(string text);
}
public class Oxide.Game.Rust.Libraries.Covalence.RustPlayer : object {
    
private static Player libPlayer;
    
private static Permission libPerms;
    
private BasePlayer player;
    
private ulong steamId;
    [CompilerGeneratedAttribute]

private CommandType <LastCommand>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Id>k__BackingField;
    
public object Object { get; }
    
public CommandType LastCommand { get; public set; }
    
public string Name { get; public set; }
    
public string Id { get; }
    
public CultureInfo Language { get; }
    
public string Address { get; }
    
public int Ping { get; }
    
public bool IsAdmin { get; }
    
public bool IsBanned { get; }
    
public bool IsConnected { get; }
    
public bool IsSleeping { get; }
    
public bool IsServer { get; }
    
public TimeSpan BanTimeRemaining { get; }
    
public float Health { get; public set; }
    
public float MaxHealth { get; public set; }
    internal RustPlayer(ulong id, string name);
    internal RustPlayer(BasePlayer player);
    public sealed virtual object get_Object();
    [CompilerGeneratedAttribute]
public sealed virtual CommandType get_LastCommand();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastCommand(CommandType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public sealed virtual CultureInfo get_Language();
    public sealed virtual string get_Address();
    public sealed virtual int get_Ping();
    public sealed virtual bool get_IsAdmin();
    public sealed virtual bool get_IsBanned();
    public sealed virtual bool get_IsConnected();
    public sealed virtual bool get_IsSleeping();
    public sealed virtual bool get_IsServer();
    public sealed virtual void Ban(string reason, TimeSpan duration);
    public sealed virtual TimeSpan get_BanTimeRemaining();
    public sealed virtual void Heal(float amount);
    public sealed virtual float get_Health();
    public sealed virtual void set_Health(float value);
    public sealed virtual void Hurt(float amount);
    public sealed virtual void Kick(string reason);
    public sealed virtual void Kill();
    public sealed virtual float get_MaxHealth();
    public sealed virtual void set_MaxHealth(float value);
    public sealed virtual void Rename(string name);
    public sealed virtual void Teleport(float x, float y, float z);
    public sealed virtual void Teleport(GenericPosition pos);
    public sealed virtual void Unban();
    public sealed virtual void Position(Single& x, Single& y, Single& z);
    public sealed virtual GenericPosition Position();
    public sealed virtual void Message(string message, string prefix, Object[] args);
    public sealed virtual void Message(string message);
    public sealed virtual void Reply(string message, string prefix, Object[] args);
    public sealed virtual void Reply(string message);
    public sealed virtual void Command(string command, Object[] args);
    public sealed virtual bool HasPermission(string perm);
    public sealed virtual void GrantPermission(string perm);
    public sealed virtual void RevokePermission(string perm);
    public sealed virtual bool BelongsToGroup(string group);
    public sealed virtual void AddToGroup(string group);
    public sealed virtual void RemoveFromGroup(string group);
    public sealed virtual bool Equals(IPlayer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Oxide.Game.Rust.Libraries.Covalence.RustPlayerManager : object {
    
private IDictionary`2<string, PlayerRecord> playerData;
    
private IDictionary`2<string, RustPlayer> allPlayers;
    
private IDictionary`2<string, RustPlayer> connectedPlayers;
    
public IEnumerable`1<IPlayer> All { get; }
    
public IEnumerable`1<IPlayer> Connected { get; }
    
public IEnumerable`1<IPlayer> Sleeping { get; }
    internal void Initialize();
    internal void PlayerJoin(ulong userId, string name);
    internal void PlayerConnected(BasePlayer player);
    internal void PlayerDisconnected(BasePlayer player);
    internal void SavePlayerData();
    public sealed virtual IEnumerable`1<IPlayer> get_All();
    public sealed virtual IEnumerable`1<IPlayer> get_Connected();
    public IEnumerable`1<IPlayer> get_Sleeping();
    public sealed virtual IPlayer FindPlayerById(string id);
    public sealed virtual IPlayer FindPlayerByObj(object obj);
    public sealed virtual IPlayer FindPlayer(string partialNameOrId);
    public sealed virtual IEnumerable`1<IPlayer> FindPlayers(string partialNameOrId);
}
public class Oxide.Game.Rust.Libraries.Covalence.RustServer : object {
    
internal Server Server;
    
private static IPAddress address;
    
private static IPAddress localAddress;
    [CompilerGeneratedAttribute]

private SaveInfo <SaveInfo>k__BackingField;
    
public string Name { get; public set; }
    
public IPAddress Address { get; }
    
public IPAddress LocalAddress { get; }
    
public ushort Port { get; }
    
public string Version { get; }
    
public string Protocol { get; }
    
public CultureInfo Language { get; }
    
public int Players { get; }
    
public int MaxPlayers { get; public set; }
    
public DateTime Time { get; public set; }
    
public SaveInfo SaveInfo { get; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IPAddress get_Address();
    public sealed virtual IPAddress get_LocalAddress();
    public sealed virtual ushort get_Port();
    public sealed virtual string get_Version();
    public sealed virtual string get_Protocol();
    public sealed virtual CultureInfo get_Language();
    public sealed virtual int get_Players();
    public sealed virtual int get_MaxPlayers();
    public sealed virtual void set_MaxPlayers(int value);
    public sealed virtual DateTime get_Time();
    public sealed virtual void set_Time(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual SaveInfo get_SaveInfo();
    public sealed virtual void Ban(string id, string reason, TimeSpan duration);
    public sealed virtual TimeSpan BanTimeRemaining(string id);
    public sealed virtual bool IsBanned(string id);
    public sealed virtual void Save();
    public sealed virtual void Unban(string id);
    public sealed virtual void Broadcast(string message, string prefix, Object[] args);
    public sealed virtual void Broadcast(string message);
    public sealed virtual void Command(string command, Object[] args);
}
public class Oxide.Game.Rust.Libraries.Item : Library {
    
internal static RustCovalenceProvider Covalence;
    private static Item();
    public static Item GetItem(int itemId);
}
public class Oxide.Game.Rust.Libraries.Player : Library {
    
private static string ipPattern;
    
internal Permission permission;
    
public ListHashSet`1<BasePlayer> Players { get; }
    
public ListHashSet`1<BasePlayer> Sleepers { get; }
    private static Player();
    public CultureInfo Language(BasePlayer player);
    public string Address(Connection connection);
    public string Address(BasePlayer player);
    public int Ping(Connection connection);
    public int Ping(BasePlayer player);
    public bool IsAdmin(ulong id);
    public bool IsAdmin(string id);
    public bool IsAdmin(BasePlayer player);
    public bool IsBanned(ulong id);
    public bool IsBanned(string id);
    public bool IsBanned(BasePlayer player);
    public bool IsConnected(BasePlayer player);
    public bool IsSleeping(ulong id);
    public bool IsSleeping(string id);
    public bool IsSleeping(BasePlayer player);
    public void Ban(ulong id, string reason);
    public void Ban(string id, string reason);
    public void Ban(BasePlayer player, string reason);
    public void Heal(BasePlayer player, float amount);
    public void Hurt(BasePlayer player, float amount);
    public void Kick(BasePlayer player, string reason);
    public void Kill(BasePlayer player);
    public void Rename(BasePlayer player, string name);
    public void Teleport(BasePlayer player, Vector3 destination);
    public void Teleport(BasePlayer player, BasePlayer target);
    public void Teleport(BasePlayer player, float x, float y, float z);
    public void Unban(ulong id);
    public void Unban(string id);
    public void Unban(BasePlayer player);
    public Vector3 Position(BasePlayer player);
    public BasePlayer Find(string nameOrIdOrIp);
    public BasePlayer FindById(string id);
    public BasePlayer FindById(ulong id);
    public ListHashSet`1<BasePlayer> get_Players();
    public ListHashSet`1<BasePlayer> get_Sleepers();
    public void Message(BasePlayer player, string message, string prefix, ulong userId, Object[] args);
    public void Message(BasePlayer player, string message, ulong userId);
    public void Reply(BasePlayer player, string message, string prefix, ulong userId, Object[] args);
    public void Reply(BasePlayer player, string message, ulong userId);
    public void Command(BasePlayer player, string command, Object[] args);
    public void DropItem(BasePlayer player, int itemId);
    public void DropItem(BasePlayer player, Item item);
    public void GiveItem(BasePlayer player, int itemId, int quantity);
    public void GiveItem(BasePlayer player, Item item, int quantity);
    public PlayerInventory Inventory(BasePlayer player);
    public void ClearInventory(BasePlayer player);
    public void ResetInventory(BasePlayer player);
}
public class Oxide.Game.Rust.Libraries.Rust : Library {
    
internal Player Player;
    
internal Server Server;
    
public bool IsGlobal { get; }
    public virtual bool get_IsGlobal();
    [LibraryFunction("PrivateBindingFlag")]
public BindingFlags PrivateBindingFlag();
    [LibraryFunction("QuoteSafe")]
public string QuoteSafe(string str);
    [LibraryFunction("BroadcastChat")]
public void BroadcastChat(string name, string message, string userId);
    [LibraryFunction("SendChatMessage")]
public void SendChatMessage(BasePlayer player, string name, string message, string userId);
    [LibraryFunction("RunClientCommand")]
public void RunClientCommand(BasePlayer player, string command, Object[] args);
    [LibraryFunction("RunServerCommand")]
public void RunServerCommand(string command, Object[] args);
    [LibraryFunction("UserIDFromConnection")]
public string UserIDFromConnection(Connection connection);
    [LibraryFunction("UserIDsFromBuildingPrivilege")]
public Array UserIDsFromBuildingPrivlidge(BuildingPrivlidge priv);
    [LibraryFunction("UserIDFromPlayer")]
public string UserIDFromPlayer(BasePlayer player);
    [LibraryFunction("OwnerIDFromEntity")]
public string OwnerIDFromEntity(BaseEntity entity);
    [LibraryFunction("FindPlayer")]
public BasePlayer FindPlayer(string nameOrIdOrIp);
    [LibraryFunction("FindPlayerByName")]
public BasePlayer FindPlayerByName(string name);
    [LibraryFunction("FindPlayerById")]
public BasePlayer FindPlayerById(ulong id);
    [LibraryFunction("FindPlayerByIdString")]
public BasePlayer FindPlayerByIdString(string id);
    [LibraryFunction("ForcePlayerPosition")]
public void ForcePlayerPosition(BasePlayer player, float x, float y, float z);
}
public class Oxide.Game.Rust.Libraries.Server : Library {
    public void Broadcast(string message, string prefix, ulong userId, Object[] args);
    public void Broadcast(string message, ulong userId);
    public void Command(string command, Object[] args);
}
public class Oxide.Game.Rust.RustCore : CSPlugin {
    
internal Command cmdlib;
    
internal Lang lang;
    
internal Permission permission;
    
internal Player Player;
    
internal static RustCovalenceProvider Covalence;
    
internal PluginManager pluginManager;
    
internal IServer Server;
    
internal RustExtension Extension;
    
internal bool serverInitialized;
    
internal bool isPlayerTakingDamage;
    
internal static string ipPattern;
    
internal static IEnumerable`1<string> RestrictedCommands { get; }
    private static RustCore();
    [HookMethodAttribute("GrantCommand")]
private void GrantCommand(IPlayer player, string command, String[] args);
    [HookMethodAttribute("GroupCommand")]
private void GroupCommand(IPlayer player, string command, String[] args);
    [HookMethodAttribute("LangCommand")]
private void LangCommand(IPlayer player, string command, String[] args);
    [HookMethodAttribute("LoadCommand")]
private void LoadCommand(IPlayer player, string command, String[] args);
    [HookMethodAttribute("PluginsCommand")]
private void PluginsCommand(IPlayer player);
    private static string FormatBytes(long bytes);
    [HookMethodAttribute("ReloadCommand")]
private void ReloadCommand(IPlayer player, string command, String[] args);
    [HookMethodAttribute("RevokeCommand")]
private void RevokeCommand(IPlayer player, string command, String[] args);
    [HookMethodAttribute("ShowCommand")]
private void ShowCommand(IPlayer player, string command, String[] args);
    [HookMethodAttribute("UnloadCommand")]
private void UnloadCommand(IPlayer player, string command, String[] args);
    [HookMethodAttribute("UserGroupCommand")]
private void UserGroupCommand(IPlayer player, string command, String[] args);
    [HookMethodAttribute("VersionCommand")]
private void VersionCommand(IPlayer player);
    [HookMethodAttribute("SaveCommand")]
private void SaveCommand(IPlayer player);
    internal static IEnumerable`1<string> get_RestrictedCommands();
    private bool PermissionsLoaded(IPlayer player);
    [HookMethodAttribute("Init")]
private void Init();
    [HookMethodAttribute("OnPluginLoaded")]
private void OnPluginLoaded(Plugin plugin);
    [HookMethodAttribute("IOnServerInitialized")]
private void IOnServerInitialized();
    [HookMethodAttribute("OnServerSave")]
private void OnServerSave();
    [HookMethodAttribute("IOnServerShutdown")]
private void IOnServerShutdown();
    private void ParseCommand(string argstr, String& command, String[]& args);
    public static BasePlayer FindPlayer(string nameOrIdOrIp);
    public static BasePlayer FindPlayerByName(string name);
    public static BasePlayer FindPlayerById(ulong id);
    public static BasePlayer FindPlayerByIdString(string id);
    [HookMethodAttribute("IOnBaseCombatEntityHurt")]
private object IOnBaseCombatEntityHurt(BaseCombatEntity entity, HitInfo hitInfo);
    [HookMethodAttribute("IOnNpcTarget")]
private object IOnNpcTarget(BaseNpc npc, BaseEntity target);
    [HookMethodAttribute("IOnEntitySaved")]
private void IOnEntitySaved(BaseNetworkable baseNetworkable, SaveInfo saveInfo);
    [HookMethodAttribute("IOnLoseCondition")]
private object IOnLoseCondition(Item item, float amount);
    [HookMethodAttribute("ICanPickupEntity")]
private object ICanPickupEntity(BasePlayer basePlayer, DoorCloser entity);
    [HookMethodAttribute("IOnBasePlayerAttacked")]
private object IOnBasePlayerAttacked(BasePlayer basePlayer, HitInfo hitInfo);
    [HookMethodAttribute("IOnBasePlayerHurt")]
private object IOnBasePlayerHurt(BasePlayer basePlayer, HitInfo hitInfo);
    [HookMethodAttribute("OnServerUserSet")]
private void OnServerUserSet(ulong steamId, UserGroup group, string playerName, string reason, long expiry);
    [HookMethodAttribute("OnServerUserRemove")]
private void OnServerUserRemove(ulong steamId);
    [HookMethodAttribute("IOnUserApprove")]
private object IOnUserApprove(Connection connection);
    [HookMethodAttribute("IOnPlayerBanned")]
private void IOnPlayerBanned(Connection connection, AuthResponse status);
    [HookMethodAttribute("IOnPlayerChat")]
private object IOnPlayerChat(ulong playerId, string playerName, string message, ChatChannel channel, BasePlayer basePlayer);
    private void TryRunPlayerCommand(BasePlayer basePlayer, string message, string commandPrefix);
    [HookMethodAttribute("OnClientAuth")]
private void OnClientAuth(Connection connection);
    [HookMethodAttribute("IOnPlayerConnected")]
private void IOnPlayerConnected(BasePlayer basePlayer);
    [HookMethodAttribute("OnPlayerDisconnected")]
private void OnPlayerDisconnected(BasePlayer basePlayer, string reason);
    [HookMethodAttribute("OnPlayerSetInfo")]
private void OnPlayerSetInfo(Connection connection, string key, string val);
    [HookMethodAttribute("OnPlayerKicked")]
private void OnPlayerKicked(BasePlayer basePlayer, string reason);
    [HookMethodAttribute("OnPlayerRespawn")]
private object OnPlayerRespawn(BasePlayer basePlayer);
    [HookMethodAttribute("OnPlayerRespawned")]
private void OnPlayerRespawned(BasePlayer basePlayer);
    [HookMethodAttribute("IOnRconMessage")]
private object IOnRconMessage(IPAddress ipAddress, string command);
    [HookMethodAttribute("IOnRconInitialize")]
private object IOnRconInitialize();
    [HookMethodAttribute("IOnRunCommandLine")]
private object IOnRunCommandLine();
    [HookMethodAttribute("IOnServerCommand")]
private object IOnServerCommand(Arg arg);
    [HookMethodAttribute("OnServerInformationUpdated")]
private void OnServerInformationUpdated();
    [HookMethodAttribute("IOnCupboardAuthorize")]
private object IOnCupboardAuthorize(ulong userID, BasePlayer player, BuildingPrivlidge privlidge);
}
public class Oxide.Game.Rust.RustExtension : Extension {
    
private static string OxideRustReleaseListUrl;
    
internal static Assembly Assembly;
    
internal static AssemblyName AssemblyName;
    
internal static VersionNumber AssemblyVersion;
    
internal static string AssemblyAuthors;
    
private static WebClient WebClient;
    
private static VersionNumber LatestExtVersion;
    
public static String[] Filter;
    
public bool IsGameExtension { get; }
    
public string Name { get; }
    
public string Author { get; }
    
public VersionNumber Version { get; }
    
public String[] DefaultReferences { get; }
    
public String[] WhitelistAssemblies { get; }
    
public String[] WhitelistNamespaces { get; }
    public RustExtension(ExtensionManager manager);
    private static RustExtension();
    public virtual bool get_IsGameExtension();
    public virtual string get_Name();
    public virtual string get_Author();
    public virtual VersionNumber get_Version();
    public virtual String[] get_DefaultReferences();
    public virtual String[] get_WhitelistAssemblies();
    public virtual String[] get_WhitelistNamespaces();
    public virtual void Load();
    public virtual void LoadPluginWatchers(string directory);
    public virtual void OnModLoad();
    public void GetLatestVersion(Action`2<VersionNumber, Exception> callback);
    [AsyncStateMachineAttribute("Oxide.Game.Rust.RustExtension/<GetLatestExtensionVersion>d__27")]
private Task`1<VersionNumber> GetLatestExtensionVersion();
    private VersionNumber ParseVersionNumber(string versionString);
}
public class Oxide.Game.Rust.RustPluginLoader : PluginLoader {
    
public Type[] CorePlugins { get; }
    public virtual Type[] get_CorePlugins();
}
[ExtensionAttribute]
public static class Oxide.Plugins.RustExtensionMethods : object {
    [ExtensionAttribute]
public static bool IsSteamId(EncryptedValue`1<ulong> userID);
}
public abstract class Oxide.Plugins.RustPlugin : CSharpPlugin {
    
protected Command cmd;
    
protected Rust rust;
    
protected Item Item;
    
protected Player Player;
    
protected Server Server;
    public virtual void HandleAddedToManager(PluginManager manager);
    [HookMethodAttribute("OnPlayerConnected")]
private void base_OnPlayerConnected(BasePlayer player);
    [HookMethodAttribute("OnPlayerDisconnected")]
private void base_OnPlayerDisconnected(BasePlayer player, string reason);
    private void AddOnlinePlayer(BasePlayer player);
    protected void PrintToConsole(BasePlayer player, string format, Object[] args);
    protected void PrintToConsole(string format, Object[] args);
    protected void PrintToChat(BasePlayer player, string format, Object[] args);
    protected void PrintToChat(string format, Object[] args);
    protected void SendReply(Arg arg, string format, Object[] args);
    protected void SendReply(BasePlayer player, string format, Object[] args);
    protected void SendWarning(Arg arg, string format, Object[] args);
    protected void SendError(Arg arg, string format, Object[] args);
    protected void ForcePlayerPosition(BasePlayer player, Vector3 destination);
}
