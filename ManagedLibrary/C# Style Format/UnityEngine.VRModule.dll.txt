public UnityEngine.Experimental.XR.Boundary : object {
public bool visible
public bool configured
public bool TryGetDimensions(Vector3& dimensionsOut)
public bool TryGetDimensions(Vector3& dimensionsOut, Type boundaryType)
private bool TryGetDimensionsInternal(Vector3& dimensionsOut, Type boundaryType)
public bool get_visible()
public void set_visible(bool value)
public bool get_configured()
public bool TryGetGeometry(List`1<Vector3> geometry)
public bool TryGetGeometry(List`1<Vector3> geometry, Type boundaryType)
private bool TryGetGeometryScriptingInternal(List`1<Vector3> geometry, Type boundaryType)
}
public UnityEngine.Internal.VR.VRTestMock : object {
public void Reset()
public void AddTrackedDevice(XRNode nodeType)
public void UpdateTrackedDevice(XRNode nodeType, Vector3 position, Quaternion rotation)
public void UpdateLeftEye(Vector3 position, Quaternion rotation)
public void UpdateRightEye(Vector3 position, Quaternion rotation)
public void UpdateCenterEye(Vector3 position, Quaternion rotation)
public void UpdateHead(Vector3 position, Quaternion rotation)
public void UpdateLeftHand(Vector3 position, Quaternion rotation)
public void UpdateRightHand(Vector3 position, Quaternion rotation)
public void AddController(string controllerName)
public void UpdateControllerAxis(string controllerName, int axis, float value)
public void UpdateControllerButton(string controllerName, int button, bool pressed)
private void UpdateTrackedDevice_Injected(XRNode nodeType, Vector3& position, Quaternion& rotation)
private void UpdateLeftEye_Injected(Vector3& position, Quaternion& rotation)
private void UpdateRightEye_Injected(Vector3& position, Quaternion& rotation)
private void UpdateCenterEye_Injected(Vector3& position, Quaternion& rotation)
private void UpdateHead_Injected(Vector3& position, Quaternion& rotation)
private void UpdateLeftHand_Injected(Vector3& position, Quaternion& rotation)
private void UpdateRightHand_Injected(Vector3& position, Quaternion& rotation)
}
public UnityEngine.VR.InputTracking : object {
public bool disablePositionalTracking
public Vector3 GetLocalPosition(VRNode node)
public void Recenter()
public string GetNodeName(ulong uniqueID)
public void GetNodeStates(List`1<VRNodeState> nodeStates)
public bool get_disablePositionalTracking()
public void set_disablePositionalTracking(bool value)
}
public UnityEngine.VR.TrackingSpaceType : Enum {
public int value__
public TrackingSpaceType Stationary
public TrackingSpaceType RoomScale
}
public UnityEngine.VR.UserPresenceState : Enum {
public int value__
public UserPresenceState Unsupported
public UserPresenceState NotPresent
public UserPresenceState Present
public UserPresenceState Unknown
}
public UnityEngine.VR.VRDevice : object {
public bool isPresent
public UserPresenceState userPresence
public string family
public string model
public float refreshRate
public bool get_isPresent()
public UserPresenceState get_userPresence()
public string get_family()
public string get_model()
public float get_refreshRate()
public TrackingSpaceType GetTrackingSpaceType()
public bool SetTrackingSpaceType(TrackingSpaceType trackingSpaceType)
public IntPtr GetNativePtr()
public void DisableAutoVRCameraTracking(Camera camera, bool disabled)
}
public UnityEngine.VR.VRDeviceType : Enum {
public int value__
public VRDeviceType Morpheus
public VRDeviceType None
public VRDeviceType Stereo
public VRDeviceType Split
public VRDeviceType Oculus
public VRDeviceType PlayStationVR
public VRDeviceType Unknown
}
public UnityEngine.VR.VRNode : Enum {
public int value__
public VRNode LeftEye
public VRNode RightEye
public VRNode CenterEye
public VRNode Head
public VRNode LeftHand
public VRNode RightHand
public VRNode GameController
public VRNode TrackingReference
public VRNode HardwareTracker
}
public UnityEngine.VR.VRNodeState : ValueType {
public ulong uniqueID
public VRNode nodeType
public bool tracked
public Vector3 position
public Quaternion rotation
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 acceleration
public Vector3 angularAcceleration
public ulong get_uniqueID()
public void set_uniqueID(ulong value)
public VRNode get_nodeType()
public void set_nodeType(VRNode value)
public bool get_tracked()
public void set_tracked(bool value)
public void set_position(Vector3 value)
public void set_rotation(Quaternion value)
public void set_velocity(Vector3 value)
public void set_angularVelocity(Vector3 value)
public void set_acceleration(Vector3 value)
public void set_angularAcceleration(Vector3 value)
public bool TryGetPosition(Vector3& position)
public bool TryGetRotation(Quaternion& rotation)
public bool TryGetVelocity(Vector3& velocity)
public bool TryGetAngularVelocity(Vector3& angularVelocity)
public bool TryGetAcceleration(Vector3& acceleration)
public bool TryGetAngularAcceleration(Vector3& angularAcceleration)
}
public UnityEngine.VR.VRSettings : object {
public bool enabled
public bool isDeviceActive
public bool showDeviceView
public float renderScale
public int eyeTextureWidth
public int eyeTextureHeight
public float renderViewportScale
public float occlusionMaskScale
public VRDeviceType loadedDevice
public string loadedDeviceName
public String[] supportedDevices
public bool get_enabled()
public void set_enabled(bool value)
public bool get_isDeviceActive()
public bool get_showDeviceView()
public void set_showDeviceView(bool value)
public float get_renderScale()
public void set_renderScale(float value)
public int get_eyeTextureWidth()
public int get_eyeTextureHeight()
public float get_renderViewportScale()
public void set_renderViewportScale(float value)
public float get_occlusionMaskScale()
public void set_occlusionMaskScale(float value)
public VRDeviceType get_loadedDevice()
public void set_loadedDevice(VRDeviceType value)
public string get_loadedDeviceName()
public void LoadDeviceByName(string deviceName)
public void LoadDeviceByName(String[] prioritizedDeviceNameList)
public String[] get_supportedDevices()
}
public UnityEngine.VR.VRStats : object {
public float gpuTimeLastFrame
public bool TryGetGPUTimeLastFrame(Single& gpuTimeLastFrame)
public bool TryGetDroppedFrameCount(Int32& droppedFrameCount)
public bool TryGetFramePresentCount(Int32& framePresentCount)
public float get_gpuTimeLastFrame()
}
public UnityEngine.XR.GameViewRenderMode : Enum {
public int value__
public GameViewRenderMode None
public GameViewRenderMode LeftEye
public GameViewRenderMode RightEye
public GameViewRenderMode BothEyes
public GameViewRenderMode OcclusionMesh
}
public UnityEngine.XR.TrackingOriginMode : Enum {
public int value__
public TrackingOriginMode Device
public TrackingOriginMode Floor
public TrackingOriginMode Unknown
}
public UnityEngine.XR.TrackingSpaceType : Enum {
public int value__
public TrackingSpaceType Stationary
public TrackingSpaceType RoomScale
}
public UnityEngine.XR.UserPresenceState : Enum {
public int value__
public UserPresenceState Unsupported
public UserPresenceState NotPresent
public UserPresenceState Present
public UserPresenceState Unknown
}
internal UnityEngine.XR.WSA.EmulationMode : Enum {
public int value__
public EmulationMode None
public EmulationMode RemoteDevice
public EmulationMode Simulated
}
internal UnityEngine.XR.WSA.Handedness : Enum {
public int value__
public Handedness Unknown
public Handedness Left
public Handedness Right
}
internal UnityEngine.XR.WSA.HolographicAutomation : object {
private SimulatedBody s_Body
private SimulatedHead s_Head
private SimulatedHand s_LeftHand
private SimulatedHand s_RightHand
private SimulatedSpatialController s_LeftController
private SimulatedSpatialController s_RightController
public SimulatedBody simulatedBody
public SimulatedHead simulatedHead
public SimulatedHand simulatedLeftHand
public SimulatedHand simulatedRightHand
public SimulatedSpatialController simulatedLeftController
public SimulatedSpatialController simulatedRightController
internal void Initialize()
internal void Shutdown()
internal void LoadRoom(string id)
internal void SetEmulationMode(EmulationMode mode)
internal void SetPlaymodeInputType(PlaymodeInputType inputType)
internal void Reset()
internal void PerformGesture(Handedness hand, SimulatedGesture gesture)
internal void PerformButtonPress(Handedness hand, SimulatedControllerPress buttonPress)
internal Vector3 GetBodyPosition()
internal void SetBodyPosition(Vector3 position)
internal float GetBodyRotation()
internal void SetBodyRotation(float degrees)
internal float GetBodyHeight()
internal void SetBodyHeight(float degrees)
internal Vector3 GetHeadRotation()
internal void SetHeadRotation(Vector3 degrees)
internal float GetHeadDiameter()
internal void SetHeadDiameter(float degrees)
internal Vector3 GetHandPosition(Handedness hand)
internal void SetHandPosition(Handedness hand, Vector3 position)
internal Quaternion GetHandOrientation(Handedness hand)
internal bool TrySetHandOrientation(Handedness hand, Quaternion orientation)
internal bool GetHandActivated(Handedness hand)
internal void SetHandActivated(Handedness hand, bool activated)
internal bool GetHandVisible(Handedness hand)
internal void EnsureHandVisible(Handedness hand)
internal Vector3 GetControllerPosition(Handedness hand)
internal bool TrySetControllerPosition(Handedness hand, Vector3 position)
internal bool GetControllerActivated(Handedness hand)
internal bool TrySetControllerActivated(Handedness hand, bool activated)
internal bool GetControllerVisible(Handedness hand)
internal bool TryEnsureControllerVisible(Handedness hand)
public SimulatedBody get_simulatedBody()
public SimulatedHead get_simulatedHead()
public SimulatedHand get_simulatedLeftHand()
public SimulatedHand get_simulatedRightHand()
public SimulatedSpatialController get_simulatedLeftController()
public SimulatedSpatialController get_simulatedRightController()
private void GetBodyPosition_Injected(Vector3& ret)
private void SetBodyPosition_Injected(Vector3& position)
private void GetHeadRotation_Injected(Vector3& ret)
private void SetHeadRotation_Injected(Vector3& degrees)
private void GetHandPosition_Injected(Handedness hand, Vector3& ret)
private void SetHandPosition_Injected(Handedness hand, Vector3& position)
private void GetHandOrientation_Injected(Handedness hand, Quaternion& ret)
private bool TrySetHandOrientation_Injected(Handedness hand, Quaternion& orientation)
private void GetControllerPosition_Injected(Handedness hand, Vector3& ret)
private bool TrySetControllerPosition_Injected(Handedness hand, Vector3& position)
}
internal UnityEngine.XR.WSA.HolographicEmulationHelper : object {
internal EmulationMode GetEmulationMode()
}
internal UnityEngine.XR.WSA.HolographicEmulationHelpers : object {
public float k_DefaultBodyHeight
public float k_DefaultHeadDiameter
public float k_ForwardOffset
public Vector3 CalcExpectedCameraPosition(SimulatedHead head, SimulatedBody body)
}
public UnityEngine.XR.WSA.HolographicRemoting : object {
public HolographicStreamerConnectionState ConnectionState
public HolographicStreamerConnectionState get_ConnectionState()
public void Connect(string clientName, int maxBitRate)
public void Connect(string clientName, int maxBitRate, RemoteDeviceVersion deviceVersion)
public void Disconnect()
}
public UnityEngine.XR.WSA.HolographicSettings : object {
public bool IsDisplayOpaque
public bool IsContentProtectionEnabled
public HolographicReprojectionMode ReprojectionMode
public bool IsLatentFramePresentation
public void SetFocusPointForFrame(Vector3 position)
public void SetFocusPointForFrame(Vector3 position, Vector3 normal)
public void SetFocusPointForFrame(Vector3 position, Vector3 normal, Vector3 velocity)
private void InternalSetFocusPointForFrameP(Vector3 position)
private void InternalSetFocusPointForFramePN(Vector3 position, Vector3 normal)
private void InternalSetFocusPointForFramePNV(Vector3 position, Vector3 normal, Vector3 velocity)
public bool get_IsDisplayOpaque()
public bool get_IsContentProtectionEnabled()
public void set_IsContentProtectionEnabled(bool value)
public HolographicReprojectionMode get_ReprojectionMode()
public void set_ReprojectionMode(HolographicReprojectionMode value)
public void ActivateLatentFramePresentation(bool activated)
public bool get_IsLatentFramePresentation()
private void InternalSetFocusPointForFrameP_Injected(Vector3& position)
private void InternalSetFocusPointForFramePN_Injected(Vector3& position, Vector3& normal)
private void InternalSetFocusPointForFramePNV_Injected(Vector3& position, Vector3& normal, Vector3& velocity)
}
public UnityEngine.XR.WSA.HolographicStreamerConnectionFailureReason : Enum {
public int value__
public HolographicStreamerConnectionFailureReason None
public HolographicStreamerConnectionFailureReason Unknown
public HolographicStreamerConnectionFailureReason NoServerCertificate
public HolographicStreamerConnectionFailureReason HandshakePortBusy
public HolographicStreamerConnectionFailureReason HandshakeUnreachable
public HolographicStreamerConnectionFailureReason HandshakeConnectionFailed
public HolographicStreamerConnectionFailureReason AuthenticationFailed
public HolographicStreamerConnectionFailureReason RemotingVersionMismatch
public HolographicStreamerConnectionFailureReason IncompatibleTransportProtocols
public HolographicStreamerConnectionFailureReason HandshakeFailed
public HolographicStreamerConnectionFailureReason TransportPortBusy
public HolographicStreamerConnectionFailureReason TransportUnreachable
public HolographicStreamerConnectionFailureReason TransportConnectionFailed
public HolographicStreamerConnectionFailureReason ProtocolVersionMismatch
public HolographicStreamerConnectionFailureReason ProtocolError
public HolographicStreamerConnectionFailureReason VideoCodecNotAvailable
public HolographicStreamerConnectionFailureReason Canceled
public HolographicStreamerConnectionFailureReason ConnectionLost
public HolographicStreamerConnectionFailureReason DeviceLost
public HolographicStreamerConnectionFailureReason DisconnectRequest
}
public UnityEngine.XR.WSA.HolographicStreamerConnectionState : Enum {
public int value__
public HolographicStreamerConnectionState Disconnected
public HolographicStreamerConnectionState Connecting
public HolographicStreamerConnectionState Connected
}
internal UnityEngine.XR.WSA.PerceptionRemoting : object {
internal void SetRemoteDeviceVersion(RemoteDeviceVersion remoteDeviceVersion)
internal void Connect(string clientName)
internal void Disconnect()
internal HolographicStreamerConnectionFailureReason CheckForDisconnect()
internal HolographicStreamerConnectionState GetConnectionState()
internal void SetEnableAudio(bool enable)
internal void SetEnableVideo(bool enable)
internal void SetVideoEncodingParameters(int maxBitRate)
}
internal UnityEngine.XR.WSA.PlaymodeInputType : Enum {
public int value__
public PlaymodeInputType LeftHand
public PlaymodeInputType RightHand
public PlaymodeInputType LeftController
public PlaymodeInputType RightController
}
public UnityEngine.XR.WSA.RemoteDeviceVersion : Enum {
public int value__
public RemoteDeviceVersion V1
public RemoteDeviceVersion V2
}
internal UnityEngine.XR.WSA.SimulatedBody : object {
public Vector3 position
public float rotation
public float height
public Vector3 get_position()
public void set_position(Vector3 value)
public float get_rotation()
public void set_rotation(float value)
public float get_height()
public void set_height(float value)
}
internal UnityEngine.XR.WSA.SimulatedControllerPress : Enum {
public int value__
public SimulatedControllerPress PressButton
public SimulatedControllerPress ReleaseButton
public SimulatedControllerPress Grip
public SimulatedControllerPress TouchPadPress
public SimulatedControllerPress Select
public SimulatedControllerPress TouchPadTouch
public SimulatedControllerPress ThumbStick
}
internal UnityEngine.XR.WSA.SimulatedGesture : Enum {
public int value__
public SimulatedGesture FingerPressed
public SimulatedGesture FingerReleased
}
internal UnityEngine.XR.WSA.SimulatedHand : object {
public Handedness m_Hand
public Vector3 position
public bool activated
public bool visible
internal void .ctor(Handedness hand)
public Vector3 get_position()
public void set_position(Vector3 value)
public bool get_activated()
public void set_activated(bool value)
public bool get_visible()
public void EnsureVisible()
public void PerformGesture(SimulatedGesture gesture)
}
internal UnityEngine.XR.WSA.SimulatedHead : object {
public float diameter
public Vector3 eulerAngles
public float get_diameter()
public void set_diameter(float value)
public Vector3 get_eulerAngles()
public void set_eulerAngles(Vector3 value)
}
internal UnityEngine.XR.WSA.SimulatedSpatialController : object {
public Handedness m_ControllerHandednss
public Quaternion orientation
public Vector3 position
public bool activated
public bool visible
internal void .ctor(Handedness controller)
public Quaternion get_orientation()
public void set_orientation(Quaternion value)
public Vector3 get_position()
public void set_position(Vector3 value)
public bool get_activated()
public void set_activated(bool value)
public bool get_visible()
public void EnsureVisible()
public void PerformControllerPress(SimulatedControllerPress button)
}
public UnityEngine.XR.WSA.WorldAnchor : Component {
private OnTrackingChangedDelegate OnTrackingChanged
public bool isLocated
public void add_OnTrackingChanged(OnTrackingChangedDelegate value)
public void remove_OnTrackingChanged(OnTrackingChangedDelegate value)
public bool get_isLocated()
public void SetNativeSpatialAnchorPtr(IntPtr spatialAnchorPtr)
public IntPtr GetNativeSpatialAnchorPtr()
private void Internal_TriggerEventOnTrackingLost(WorldAnchor worldAnchor, bool located)
}
public UnityEngine.XR.XRDevice : object {
private Action`1<string> deviceLoaded
public bool isPresent
public UserPresenceState userPresence
public string family
public string model
public float refreshRate
public float fovZoomFactor
public TrackingOriginMode trackingOriginMode
public bool get_isPresent()
public UserPresenceState get_userPresence()
public string get_family()
public string get_model()
public float get_refreshRate()
public IntPtr GetNativePtr()
public TrackingSpaceType GetTrackingSpaceType()
public bool SetTrackingSpaceType(TrackingSpaceType trackingSpaceType)
public void DisableAutoXRCameraTracking(Camera camera, bool disabled)
public void UpdateEyeTextureMSAASetting()
public float get_fovZoomFactor()
public void set_fovZoomFactor(float value)
public TrackingOriginMode get_trackingOriginMode()
public void add_deviceLoaded(Action`1<string> value)
public void remove_deviceLoaded(Action`1<string> value)
private void InvokeDeviceLoaded(string loadedDeviceName)
}
public UnityEngine.XR.XRSettings : object {
public bool enabled
public GameViewRenderMode gameViewRenderMode
public bool isDeviceActive
public bool showDeviceView
public float renderScale
public float eyeTextureResolutionScale
public int eyeTextureWidth
public int eyeTextureHeight
public RenderTextureDescriptor eyeTextureDesc
public TextureDimension deviceEyeTextureDimension
public float renderViewportScale
internal float renderViewportScaleInternal
public float occlusionMaskScale
public bool useOcclusionMesh
public string loadedDeviceName
public String[] supportedDevices
public StereoRenderingMode stereoRenderingMode
public bool get_enabled()
public void set_enabled(bool value)
public GameViewRenderMode get_gameViewRenderMode()
public void set_gameViewRenderMode(GameViewRenderMode value)
public bool get_isDeviceActive()
public bool get_showDeviceView()
public void set_showDeviceView(bool value)
public float get_renderScale()
public void set_renderScale(float value)
public float get_eyeTextureResolutionScale()
public void set_eyeTextureResolutionScale(float value)
public int get_eyeTextureWidth()
public int get_eyeTextureHeight()
public RenderTextureDescriptor get_eyeTextureDesc()
public TextureDimension get_deviceEyeTextureDimension()
public float get_renderViewportScale()
public void set_renderViewportScale(float value)
internal float get_renderViewportScaleInternal()
internal void set_renderViewportScaleInternal(float value)
public float get_occlusionMaskScale()
public void set_occlusionMaskScale(float value)
public bool get_useOcclusionMesh()
public void set_useOcclusionMesh(bool value)
public string get_loadedDeviceName()
public void LoadDeviceByName(string deviceName)
public void LoadDeviceByName(String[] prioritizedDeviceNameList)
public String[] get_supportedDevices()
public StereoRenderingMode get_stereoRenderingMode()
private void get_eyeTextureDesc_Injected(RenderTextureDescriptor& ret)
}
public UnityEngine.XR.XRStats : object {
public float gpuTimeLastFrame
public bool TryGetGPUTimeLastFrame(Single& gpuTimeLastFrame)
public bool TryGetDroppedFrameCount(Int32& droppedFrameCount)
public bool TryGetFramePresentCount(Int32& framePresentCount)
public float get_gpuTimeLastFrame()
}
public UnityEngineInternal.XR.WSA.RemoteSpeechAccess : object {
public void EnableRemoteSpeech(RemoteDeviceVersion remoteDeviceVersion)
public void DisableRemoteSpeech()
}
