internal UnityEngine.Experimental.XR.DeleteMe : Enum {
public int value__
public DeleteMe Please
}
public UnityEngine.XR.GameViewRenderMode : Enum {
public int value__
public GameViewRenderMode None
public GameViewRenderMode LeftEye
public GameViewRenderMode RightEye
public GameViewRenderMode BothEyes
public GameViewRenderMode OcclusionMesh
}
public UnityEngine.XR.TrackingSpaceType : Enum {
public int value__
public TrackingSpaceType Stationary
public TrackingSpaceType RoomScale
}
internal UnityEngine.XR.WSA.Input.DeleteMe : Enum {
public int value__
public DeleteMe Please
}
public UnityEngine.XR.WSA.RemoteDeviceVersion : Enum {
public int value__
public RemoteDeviceVersion V1
public RemoteDeviceVersion V2
}
public UnityEngine.XR.XRDevice : object {
private Action`1<string> deviceLoaded
public bool isPresent
public float refreshRate
public float fovZoomFactor
public bool get_isPresent()
public float get_refreshRate()
public IntPtr GetNativePtr()
public TrackingSpaceType GetTrackingSpaceType()
public bool SetTrackingSpaceType(TrackingSpaceType trackingSpaceType)
public void DisableAutoXRCameraTracking(Camera camera, bool disabled)
public void UpdateEyeTextureMSAASetting()
public float get_fovZoomFactor()
public void set_fovZoomFactor(float value)
public void add_deviceLoaded(Action`1<string> value)
public void remove_deviceLoaded(Action`1<string> value)
private void InvokeDeviceLoaded(string loadedDeviceName)
}
public UnityEngine.XR.XRSettings : object {
public bool enabled
public GameViewRenderMode gameViewRenderMode
public bool isDeviceActive
public bool showDeviceView
public float eyeTextureResolutionScale
public int eyeTextureWidth
public int eyeTextureHeight
public RenderTextureDescriptor eyeTextureDesc
public TextureDimension deviceEyeTextureDimension
public float renderViewportScale
internal float renderViewportScaleInternal
public float occlusionMaskScale
public bool useOcclusionMesh
public string loadedDeviceName
public String[] supportedDevices
public StereoRenderingMode stereoRenderingMode
public bool get_enabled()
public void set_enabled(bool value)
public GameViewRenderMode get_gameViewRenderMode()
public void set_gameViewRenderMode(GameViewRenderMode value)
public bool get_isDeviceActive()
public bool get_showDeviceView()
public void set_showDeviceView(bool value)
public float get_eyeTextureResolutionScale()
public void set_eyeTextureResolutionScale(float value)
public int get_eyeTextureWidth()
public int get_eyeTextureHeight()
public RenderTextureDescriptor get_eyeTextureDesc()
public TextureDimension get_deviceEyeTextureDimension()
public float get_renderViewportScale()
public void set_renderViewportScale(float value)
internal float get_renderViewportScaleInternal()
internal void set_renderViewportScaleInternal(float value)
public float get_occlusionMaskScale()
public void set_occlusionMaskScale(float value)
public bool get_useOcclusionMesh()
public void set_useOcclusionMesh(bool value)
public string get_loadedDeviceName()
public void LoadDeviceByName(string deviceName)
public void LoadDeviceByName(String[] prioritizedDeviceNameList)
public String[] get_supportedDevices()
public StereoRenderingMode get_stereoRenderingMode()
private void get_eyeTextureDesc_Injected(RenderTextureDescriptor& ret)
}
public UnityEngine.XR.XRStats : object {
public bool TryGetGPUTimeLastFrame(Single& gpuTimeLastFrame)
public bool TryGetDroppedFrameCount(Int32& droppedFrameCount)
public bool TryGetFramePresentCount(Int32& framePresentCount)
}
public UnityEngineInternal.XR.WSA.RemoteSpeechAccess : object {
public void EnableRemoteSpeech(RemoteDeviceVersion version)
public void DisableRemoteSpeech()
}
