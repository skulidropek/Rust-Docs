public UnityEngine.Experimental.XR.Boundary : object {
public bool visible
public bool configured
public bool TryGetDimensions(Vector3& dimensionsOut)
public bool TryGetDimensions(Vector3& dimensionsOut, Type boundaryType)
private bool TryGetDimensionsInternal(Vector3& dimensionsOut, int boundaryType)
public bool TryGetGeometry(List`1<Vector3> geometry)
public bool TryGetGeometry(List`1<Vector3> geometry, Type boundaryType)
private bool TryGetGeometryInternal(object geometryOut, int boundaryType)
public bool get_visible()
public void set_visible(bool value)
public bool get_configured()
}
public UnityEngine.Internal.VR.VRTestMock : object {
public void Reset()
public void AddTrackedDevice(XRNode nodeType)
public void UpdateTrackedDevice(XRNode nodeType, Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateTrackedDevice(XRNode nodeType, Vector3& position, Quaternion& rotation)
public void UpdateLeftEye(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateLeftEye(Vector3& position, Quaternion& rotation)
public void UpdateRightEye(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateRightEye(Vector3& position, Quaternion& rotation)
public void UpdateCenterEye(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateCenterEye(Vector3& position, Quaternion& rotation)
public void UpdateHead(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateHead(Vector3& position, Quaternion& rotation)
public void UpdateLeftHand(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateLeftHand(Vector3& position, Quaternion& rotation)
public void UpdateRightHand(Vector3 position, Quaternion rotation)
private void INTERNAL_CALL_UpdateRightHand(Vector3& position, Quaternion& rotation)
public void AddController(string controllerName)
public void UpdateControllerAxis(string controllerName, int axis, float value)
public void UpdateControllerButton(string controllerName, int button, bool pressed)
}
public UnityEngine.VR.InputTracking : object {
public bool disablePositionalTracking
public Vector3 GetLocalPosition(VRNode node)
public void Recenter()
public string GetNodeName(ulong uniqueID)
public void GetNodeStates(List`1<VRNodeState> nodeStates)
public bool get_disablePositionalTracking()
public void set_disablePositionalTracking(bool value)
}
public UnityEngine.VR.TrackingSpaceType : Enum {
public int value__
public TrackingSpaceType Stationary
public TrackingSpaceType RoomScale
}
public UnityEngine.VR.UserPresenceState : Enum {
public int value__
public UserPresenceState Unsupported
public UserPresenceState NotPresent
public UserPresenceState Present
public UserPresenceState Unknown
}
public UnityEngine.VR.VRDevice : object {
public bool isPresent
public UserPresenceState userPresence
public string family
public string model
public float refreshRate
public bool get_isPresent()
public UserPresenceState get_userPresence()
public string get_family()
public string get_model()
public float get_refreshRate()
public TrackingSpaceType GetTrackingSpaceType()
public bool SetTrackingSpaceType(TrackingSpaceType trackingSpaceType)
public IntPtr GetNativePtr()
public void DisableAutoVRCameraTracking(Camera camera, bool disabled)
}
public UnityEngine.VR.VRDeviceType : Enum {
public int value__
public VRDeviceType Morpheus
public VRDeviceType None
public VRDeviceType Stereo
public VRDeviceType Split
public VRDeviceType Oculus
public VRDeviceType PlayStationVR
public VRDeviceType Unknown
}
public UnityEngine.VR.VRNode : Enum {
public int value__
public VRNode LeftEye
public VRNode RightEye
public VRNode CenterEye
public VRNode Head
public VRNode LeftHand
public VRNode RightHand
public VRNode GameController
public VRNode TrackingReference
public VRNode HardwareTracker
}
public UnityEngine.VR.VRNodeState : ValueType {
public ulong uniqueID
public VRNode nodeType
public bool tracked
public Vector3 position
public Quaternion rotation
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 acceleration
public Vector3 angularAcceleration
public ulong get_uniqueID()
public void set_uniqueID(ulong value)
public VRNode get_nodeType()
public void set_nodeType(VRNode value)
public bool get_tracked()
public void set_tracked(bool value)
public void set_position(Vector3 value)
public void set_rotation(Quaternion value)
public void set_velocity(Vector3 value)
public void set_angularVelocity(Vector3 value)
public void set_acceleration(Vector3 value)
public void set_angularAcceleration(Vector3 value)
public bool TryGetPosition(Vector3& position)
public bool TryGetRotation(Quaternion& rotation)
public bool TryGetVelocity(Vector3& velocity)
public bool TryGetAngularVelocity(Vector3& angularVelocity)
public bool TryGetAcceleration(Vector3& acceleration)
public bool TryGetAngularAcceleration(Vector3& angularAcceleration)
}
public UnityEngine.VR.VRSettings : object {
public bool enabled
public bool isDeviceActive
public bool showDeviceView
public float renderScale
public int eyeTextureWidth
public int eyeTextureHeight
public float renderViewportScale
public float occlusionMaskScale
public VRDeviceType loadedDevice
public string loadedDeviceName
public String[] supportedDevices
public bool get_enabled()
public void set_enabled(bool value)
public bool get_isDeviceActive()
public bool get_showDeviceView()
public void set_showDeviceView(bool value)
public float get_renderScale()
public void set_renderScale(float value)
public int get_eyeTextureWidth()
public int get_eyeTextureHeight()
public float get_renderViewportScale()
public void set_renderViewportScale(float value)
public float get_occlusionMaskScale()
public void set_occlusionMaskScale(float value)
public VRDeviceType get_loadedDevice()
public void set_loadedDevice(VRDeviceType value)
public string get_loadedDeviceName()
public void LoadDeviceByName(string deviceName)
public void LoadDeviceByName(String[] prioritizedDeviceNameList)
public String[] get_supportedDevices()
}
public UnityEngine.VR.VRStats : object {
public float gpuTimeLastFrame
public bool TryGetGPUTimeLastFrame(Single& gpuTimeLastFrame)
public bool TryGetDroppedFrameCount(Int32& droppedFrameCount)
public bool TryGetFramePresentCount(Int32& framePresentCount)
public float get_gpuTimeLastFrame()
}
internal UnityEngine.XR.AvailableTrackingData : Enum {
public int value__
public AvailableTrackingData None
public AvailableTrackingData PositionAvailable
public AvailableTrackingData RotationAvailable
public AvailableTrackingData VelocityAvailable
public AvailableTrackingData AngularVelocityAvailable
public AvailableTrackingData AccelerationAvailable
public AvailableTrackingData AngularAccelerationAvailable
}
public UnityEngine.XR.InputTracking : object {
private Action`1<XRNodeState> trackingAcquired
private Action`1<XRNodeState> trackingLost
private Action`1<XRNodeState> nodeAdded
private Action`1<XRNodeState> nodeRemoved
public bool disablePositionalTracking
public Vector3 GetLocalPosition(XRNode node)
private void INTERNAL_CALL_GetLocalPosition(XRNode node, Vector3& value)
public Quaternion GetLocalRotation(XRNode node)
private void INTERNAL_CALL_GetLocalRotation(XRNode node, Quaternion& value)
public void Recenter()
public string GetNodeName(ulong uniqueID)
private void GetNodeStatesInternal(object nodeStates)
public void GetNodeStates(List`1<XRNodeState> nodeStates)
public bool get_disablePositionalTracking()
public void set_disablePositionalTracking(bool value)
public void add_trackingAcquired(Action`1<XRNodeState> value)
public void remove_trackingAcquired(Action`1<XRNodeState> value)
public void add_trackingLost(Action`1<XRNodeState> value)
public void remove_trackingLost(Action`1<XRNodeState> value)
public void add_nodeAdded(Action`1<XRNodeState> value)
public void remove_nodeAdded(Action`1<XRNodeState> value)
public void add_nodeRemoved(Action`1<XRNodeState> value)
public void remove_nodeRemoved(Action`1<XRNodeState> value)
private void InvokeTrackingEvent(TrackingStateEventType eventType, XRNode nodeType, long uniqueID, bool tracked)
}
public UnityEngine.XR.TrackingSpaceType : Enum {
public int value__
public TrackingSpaceType Stationary
public TrackingSpaceType RoomScale
}
public UnityEngine.XR.UserPresenceState : Enum {
public int value__
public UserPresenceState Unsupported
public UserPresenceState NotPresent
public UserPresenceState Present
public UserPresenceState Unknown
}
public UnityEngine.XR.WSA.HolographicSettings : object {
public bool IsContentProtectionEnabled
public HolographicReprojectionMode ReprojectionMode
public bool IsLatentFramePresentation
public bool get_IsContentProtectionEnabled()
public void set_IsContentProtectionEnabled(bool value)
public HolographicReprojectionMode get_ReprojectionMode()
public void set_ReprojectionMode(HolographicReprojectionMode value)
public void ActivateLatentFramePresentation(bool activated)
public bool get_IsLatentFramePresentation()
}
public UnityEngine.XR.WSA.PositionalLocatorState : Enum {
public int value__
public PositionalLocatorState Unavailable
public PositionalLocatorState OrientationOnly
public PositionalLocatorState Activating
public PositionalLocatorState Active
public PositionalLocatorState Inhibited
}
public UnityEngine.XR.WSA.WorldManager : object {
public bool IsLatentFramePresentation
public bool get_IsLatentFramePresentation()
public void ActivateLatentFramePresentation(bool activated)
}
public UnityEngine.XR.XRDevice : object {
public bool isPresent
public UserPresenceState userPresence
public string family
public string model
public float refreshRate
public float fovZoomFactor
public bool get_isPresent()
public UserPresenceState get_userPresence()
public string get_family()
public string get_model()
public float get_refreshRate()
public TrackingSpaceType GetTrackingSpaceType()
public bool SetTrackingSpaceType(TrackingSpaceType trackingSpaceType)
public IntPtr GetNativePtr()
private void INTERNAL_CALL_GetNativePtr(IntPtr& value)
public void DisableAutoXRCameraTracking(Camera camera, bool disabled)
private void DisableAutoXRCameraTrackingInternal(Camera camera, bool disabled)
public float get_fovZoomFactor()
public void set_fovZoomFactor(float value)
}
public UnityEngine.XR.XRNode : Enum {
public int value__
public XRNode LeftEye
public XRNode RightEye
public XRNode CenterEye
public XRNode Head
public XRNode LeftHand
public XRNode RightHand
public XRNode GameController
public XRNode TrackingReference
public XRNode HardwareTracker
}
public UnityEngine.XR.XRNodeState : ValueType {
private XRNode m_Type
private AvailableTrackingData m_AvailableFields
private Vector3 m_Position
private Quaternion m_Rotation
private Vector3 m_Velocity
private Vector3 m_AngularVelocity
private Vector3 m_Acceleration
private Vector3 m_AngularAcceleration
private int m_Tracked
private ulong m_UniqueID
public ulong uniqueID
public XRNode nodeType
public bool tracked
public Vector3 position
public Quaternion rotation
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 acceleration
public Vector3 angularAcceleration
public ulong get_uniqueID()
public void set_uniqueID(ulong value)
public XRNode get_nodeType()
public void set_nodeType(XRNode value)
public bool get_tracked()
public void set_tracked(bool value)
public void set_position(Vector3 value)
public void set_rotation(Quaternion value)
public void set_velocity(Vector3 value)
public void set_angularVelocity(Vector3 value)
public void set_acceleration(Vector3 value)
public void set_angularAcceleration(Vector3 value)
public bool TryGetPosition(Vector3& position)
public bool TryGetRotation(Quaternion& rotation)
public bool TryGetVelocity(Vector3& velocity)
public bool TryGetAngularVelocity(Vector3& angularVelocity)
public bool TryGetAcceleration(Vector3& acceleration)
public bool TryGetAngularAcceleration(Vector3& angularAcceleration)
private bool TryGet(T inValue, AvailableTrackingData availabilityFlag, T& outValue)
}
public UnityEngine.XR.XRSettings : object {
public bool enabled
public bool isDeviceActive
public bool showDeviceView
public float renderScale
public float eyeTextureResolutionScale
public int eyeTextureWidth
public int eyeTextureHeight
internal float renderViewportScaleInternal
public RenderTextureDescriptor eyeTextureDesc
public float renderViewportScale
public float occlusionMaskScale
public bool useOcclusionMesh
public string loadedDeviceName
public String[] supportedDevices
public bool get_enabled()
public void set_enabled(bool value)
public bool get_isDeviceActive()
public bool get_showDeviceView()
public void set_showDeviceView(bool value)
public float get_renderScale()
public void set_renderScale(float value)
public float get_eyeTextureResolutionScale()
public void set_eyeTextureResolutionScale(float value)
public int get_eyeTextureWidth()
public int get_eyeTextureHeight()
internal float get_renderViewportScaleInternal()
internal void set_renderViewportScaleInternal(float value)
public RenderTextureDescriptor get_eyeTextureDesc()
private void INTERNAL_get_eyeTextureDesc(RenderTextureDescriptor& value)
public float get_renderViewportScale()
public void set_renderViewportScale(float value)
public float get_occlusionMaskScale()
public void set_occlusionMaskScale(float value)
public bool get_useOcclusionMesh()
public void set_useOcclusionMesh(bool value)
public string get_loadedDeviceName()
public void LoadDeviceByName(string deviceName)
public void LoadDeviceByName(String[] prioritizedDeviceNameList)
public String[] get_supportedDevices()
}
public UnityEngine.XR.XRStats : object {
public float gpuTimeLastFrame
public bool TryGetGPUTimeLastFrame(Single& gpuTimeLastFrame)
public bool TryGetDroppedFrameCount(Int32& droppedFrameCount)
public bool TryGetFramePresentCount(Int32& framePresentCount)
public float get_gpuTimeLastFrame()
}
