internal Cysharp.Text.EnumUtil`1 : object {
private string InvalidName
private Dictionary`2<T, string> names
private Dictionary`2<T, Byte[]> utf8names
public bool TryFormatUtf16(T value, Span`1<char> dest, Int32& written, ReadOnlySpan`1<char> _)
public bool TryFormatUtf8(T value, Span`1<byte> dest, Int32& written, StandardFormat _)
}
internal Cysharp.Text.ExceptionUtil : object {
internal void ThrowArgumentException(string paramName)
internal void ThrowFormatException()
internal void ThrowFormatError()
}
internal Cysharp.Text.FastNumberWriter : object {
public bool TryWriteInt64(Span`1<char> buffer, Int32& charsWritten, long value)
public bool TryWriteUInt64(Span`1<char> buffer, Int32& charsWritten, ulong value)
}
internal Cysharp.Text.FormatParser : object {
internal int ArgLengthLimit
internal int WidthLimit
public ParserScanResult ScanFormatString(string format, Int32& i)
public ParserScanResult ScanFormatString(ReadOnlySpan`1<char> format, Int32& i)
private bool IsDigit(char c)
public ParseResult Parse(ReadOnlySpan`1<char> format, int i)
public ParseResult Parse(string format, int i)
}
public Cysharp.Text.IResettableBufferWriter`1 {
public void Reset()
}
internal Cysharp.Text.NestedStringBuilderCreationException : InvalidOperationException {
protected internal void .ctor(string typeName, string extraMessage)
protected internal void .ctor(string message, Exception innerException)
}
internal Cysharp.Text.ParserScanResult : Enum {
public int value__
public ParserScanResult BraceOpen
public ParserScanResult EscapedChar
public ParserScanResult NormalChar
}
internal Cysharp.Text.PreparedFormatHelper : object {
internal Utf16FormatSegment[] Utf16Parse(string format)
internal Utf8FormatSegment[] Utf8Parse(string format, Byte[]& utf8buffer)
}
internal Cysharp.Text.ReadOnlyListAdaptor`1 : ValueType {
private IList`1<T> _list
public T Item
public int Count
public void .ctor(IList`1<T> list)
public T get_Item(int index)
public int get_Count()
public IEnumerator`1<T> GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public Cysharp.Text.StandardFormats : object {
public StandardFormat DateTime_ISO
}
internal Cysharp.Text.Utf16FormatHelper : object {
private char sp
public void FormatTo(TBufferWriter& sb, T arg, int width, ReadOnlySpan`1<char> format, string argName)
private void FormatToRightJustify(TBufferWriter& sb, T arg, int width, ReadOnlySpan`1<char> format, string argName)
}
internal Cysharp.Text.Utf16FormatSegment : ValueType {
public int NotFormatIndex
public int Offset
public int Count
public int FormatIndex
public int Alignment
public bool IsFormatArgument
public bool get_IsFormatArgument()
public void .ctor(int offset, int count, int formatIndex, int alignment)
}
public Cysharp.Text.Utf16PreparedFormat`1 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1)
public void FormatTo(TBufferWriter& sb, T1 arg1)
}
public Cysharp.Text.Utf16PreparedFormat`10 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
}
public Cysharp.Text.Utf16PreparedFormat`11 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
}
public Cysharp.Text.Utf16PreparedFormat`12 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
}
public Cysharp.Text.Utf16PreparedFormat`13 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
}
public Cysharp.Text.Utf16PreparedFormat`14 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
}
public Cysharp.Text.Utf16PreparedFormat`15 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
}
public Cysharp.Text.Utf16PreparedFormat`16 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
}
public Cysharp.Text.Utf16PreparedFormat`2 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2)
}
public Cysharp.Text.Utf16PreparedFormat`3 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3)
}
public Cysharp.Text.Utf16PreparedFormat`4 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
}
public Cysharp.Text.Utf16PreparedFormat`5 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
}
public Cysharp.Text.Utf16PreparedFormat`6 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
}
public Cysharp.Text.Utf16PreparedFormat`7 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
}
public Cysharp.Text.Utf16PreparedFormat`8 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
}
public Cysharp.Text.Utf16PreparedFormat`9 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf16FormatSegment[] segments
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
}
public Cysharp.Text.Utf16ValueStringBuilder : ValueType {
private int ThreadStaticBufferSize
private int DefaultBufferSize
private char newLine1
private char newLine2
private bool crlf
private Char[] scratchBuffer
internal bool scratchBufferUsed
private Char[] buffer
private int index
private bool disposeImmediately
public int Length
public void AppendJoin(char separator, T[] values)
public void AppendJoin(char separator, List`1<T> values)
public void AppendJoin(char separator, ReadOnlySpan`1<T> values)
public void AppendJoin(char separator, IEnumerable`1<T> values)
public void AppendJoin(char separator, ICollection`1<T> values)
public void AppendJoin(char separator, IList`1<T> values)
public void AppendJoin(char separator, IReadOnlyList`1<T> values)
public void AppendJoin(char separator, IReadOnlyCollection`1<T> values)
public void AppendJoin(string separator, T[] values)
public void AppendJoin(string separator, List`1<T> values)
public void AppendJoin(string separator, ReadOnlySpan`1<T> values)
public void AppendJoin(string separator, IEnumerable`1<T> values)
public void AppendJoin(string separator, ICollection`1<T> values)
public void AppendJoin(string separator, IList`1<T> values)
public void AppendJoin(string separator, IReadOnlyList`1<T> values)
public void AppendJoin(string separator, IReadOnlyCollection`1<T> values)
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IList`1<T> values)
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IReadOnlyList`1<T> values)
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, ReadOnlySpan`1<T> values)
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IEnumerable`1<T> values)
public void AppendFormat(string format, T1 arg1)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1)
public void AppendFormat(string format, T1 arg1, T2 arg2)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
public void AppendFormat(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
private object CreateFormatter(Type type)
public void Append(byte value)
public void Append(byte value, string format)
public void AppendLine(byte value)
public void AppendLine(byte value, string format)
public void Append(DateTime value)
public void Append(DateTime value, string format)
public void AppendLine(DateTime value)
public void AppendLine(DateTime value, string format)
public void Append(DateTimeOffset value)
public void Append(DateTimeOffset value, string format)
public void AppendLine(DateTimeOffset value)
public void AppendLine(DateTimeOffset value, string format)
public void Append(decimal value)
public void Append(decimal value, string format)
public void AppendLine(decimal value)
public void AppendLine(decimal value, string format)
public void Append(double value)
public void Append(double value, string format)
public void AppendLine(double value)
public void AppendLine(double value, string format)
public void Append(short value)
public void Append(short value, string format)
public void AppendLine(short value)
public void AppendLine(short value, string format)
public void Append(int value)
public void Append(int value, string format)
public void AppendLine(int value)
public void AppendLine(int value, string format)
public void Append(long value)
public void Append(long value, string format)
public void AppendLine(long value)
public void AppendLine(long value, string format)
public void Append(sbyte value)
public void Append(sbyte value, string format)
public void AppendLine(sbyte value)
public void AppendLine(sbyte value, string format)
public void Append(float value)
public void Append(float value, string format)
public void AppendLine(float value)
public void AppendLine(float value, string format)
public void Append(TimeSpan value)
public void Append(TimeSpan value, string format)
public void AppendLine(TimeSpan value)
public void AppendLine(TimeSpan value, string format)
public void Append(ushort value)
public void Append(ushort value, string format)
public void AppendLine(ushort value)
public void AppendLine(ushort value, string format)
public void Append(UInt32 value)
public void Append(UInt32 value, string format)
public void AppendLine(UInt32 value)
public void AppendLine(UInt32 value, string format)
public void Append(ulong value)
public void Append(ulong value, string format)
public void AppendLine(ulong value)
public void AppendLine(ulong value, string format)
public void Append(Guid value)
public void Append(Guid value, string format)
public void AppendLine(Guid value)
public void AppendLine(Guid value, string format)
public int get_Length()
public ReadOnlySpan`1<char> AsSpan()
public ReadOnlyMemory`1<char> AsMemory()
public ArraySegment`1<char> AsArraySegment()
public void .ctor(bool disposeImmediately)
public void Dispose()
public void Clear()
public void TryGrow(int sizeHint)
public void Grow(int sizeHint)
public void AppendLine()
public void Append(char value)
public void Append(char value, int repeatCount)
public void AppendLine(char value)
public void Append(string value)
public void AppendLine(string value)
public void Append(string value, int startIndex, int count)
public void Append(Char[] value, int startIndex, int charCount)
public void Append(ReadOnlySpan`1<char> value)
public void AppendLine(ReadOnlySpan`1<char> value)
public void Append(T value)
public void AppendLine(T value)
public void Insert(int index, string value, int count)
public void Insert(int index, string value)
public void Insert(int index, ReadOnlySpan`1<char> value, int count)
public void Replace(char oldChar, char newChar)
public void Replace(char oldChar, char newChar, int startIndex, int count)
public void Replace(string oldValue, string newValue)
public void Replace(ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue)
public void Replace(string oldValue, string newValue, int startIndex, int count)
public void Replace(ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue, int startIndex, int count)
public void ReplaceAt(char newChar, int replaceIndex)
public void Remove(int startIndex, int length)
public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten)
public string ToString()
public Memory`1<char> GetMemory(int sizeHint)
public Span`1<char> GetSpan(int sizeHint)
public void Advance(int count)
private void Cysharp.Text.IResettableBufferWriter<System.Char>.Reset()
private void ThrowArgumentException(string paramName)
private void ThrowFormatException()
private void AppendFormatInternal(T arg, int width, ReadOnlySpan`1<char> format, string argName)
private void ThrowNestedException()
public void RegisterTryFormat(TryFormat`1<T> formatMethod)
private TryFormat`1<Nullable`1<T>> CreateNullableFormatter()
public void EnableNullableFormat()
}
internal Cysharp.Text.Utf8FormatHelper : object {
private byte sp
public void FormatTo(TBufferWriter& sb, T arg, int width, StandardFormat format, string argName)
private void FormatToRightJustify(TBufferWriter& sb, T arg, int width, StandardFormat format, string argName)
}
internal Cysharp.Text.Utf8FormatSegment : ValueType {
public int NotFormatIndex
public int Offset
public int Count
public int FormatIndex
public StandardFormat StandardFormat
public int Alignment
public bool IsFormatArgument
public bool get_IsFormatArgument()
public void .ctor(int offset, int count, int formatIndex, StandardFormat format, int alignment)
}
public Cysharp.Text.Utf8PreparedFormat`1 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1)
public void FormatTo(TBufferWriter& sb, T1 arg1)
}
public Cysharp.Text.Utf8PreparedFormat`10 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
}
public Cysharp.Text.Utf8PreparedFormat`11 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
}
public Cysharp.Text.Utf8PreparedFormat`12 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
}
public Cysharp.Text.Utf8PreparedFormat`13 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
}
public Cysharp.Text.Utf8PreparedFormat`14 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
}
public Cysharp.Text.Utf8PreparedFormat`15 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
}
public Cysharp.Text.Utf8PreparedFormat`16 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
}
public Cysharp.Text.Utf8PreparedFormat`2 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2)
}
public Cysharp.Text.Utf8PreparedFormat`3 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3)
}
public Cysharp.Text.Utf8PreparedFormat`4 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
}
public Cysharp.Text.Utf8PreparedFormat`5 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
}
public Cysharp.Text.Utf8PreparedFormat`6 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
}
public Cysharp.Text.Utf8PreparedFormat`7 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
}
public Cysharp.Text.Utf8PreparedFormat`8 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
}
public Cysharp.Text.Utf8PreparedFormat`9 : object {
private string <FormatString>k__BackingField
private int <MinSize>k__BackingField
private Utf8FormatSegment[] segments
private Byte[] utf8PreEncodedbuffer
public string FormatString
public int MinSize
public string get_FormatString()
public int get_MinSize()
public void .ctor(string format)
public string Format(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
public void FormatTo(TBufferWriter& sb, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
}
public Cysharp.Text.Utf8ValueStringBuilder : ValueType {
private int ThreadStaticBufferSize
private int DefaultBufferSize
private Encoding UTF8NoBom
private byte newLine1
private byte newLine2
private bool crlf
private Byte[] scratchBuffer
internal bool scratchBufferUsed
private Byte[] buffer
private int index
private bool disposeImmediately
public int Length
public void AppendJoin(char separator, T[] values)
public void AppendJoin(char separator, List`1<T> values)
public void AppendJoin(char separator, ReadOnlySpan`1<T> values)
public void AppendJoin(char separator, IEnumerable`1<T> values)
public void AppendJoin(char separator, ICollection`1<T> values)
public void AppendJoin(char separator, IList`1<T> values)
public void AppendJoin(char separator, IReadOnlyList`1<T> values)
public void AppendJoin(char separator, IReadOnlyCollection`1<T> values)
public void AppendJoin(string separator, T[] values)
public void AppendJoin(string separator, List`1<T> values)
public void AppendJoin(string separator, ReadOnlySpan`1<T> values)
public void AppendJoin(string separator, IEnumerable`1<T> values)
public void AppendJoin(string separator, ICollection`1<T> values)
public void AppendJoin(string separator, IList`1<T> values)
public void AppendJoin(string separator, IReadOnlyList`1<T> values)
public void AppendJoin(string separator, IReadOnlyCollection`1<T> values)
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IList`1<T> values)
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IReadOnlyList`1<T> values)
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, ReadOnlySpan`1<T> values)
internal void AppendJoinInternal(ReadOnlySpan`1<char> separator, IEnumerable`1<T> values)
public void AppendFormat(string format, T1 arg1)
public void AppendFormat(string format, T1 arg1, T2 arg2)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
public void AppendFormat(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
private object CreateFormatter(Type type)
public void Append(byte value)
public void Append(byte value, StandardFormat format)
public void AppendLine(byte value)
public void AppendLine(byte value, StandardFormat format)
public void Append(DateTime value)
public void Append(DateTime value, StandardFormat format)
public void AppendLine(DateTime value)
public void AppendLine(DateTime value, StandardFormat format)
public void Append(DateTimeOffset value)
public void Append(DateTimeOffset value, StandardFormat format)
public void AppendLine(DateTimeOffset value)
public void AppendLine(DateTimeOffset value, StandardFormat format)
public void Append(decimal value)
public void Append(decimal value, StandardFormat format)
public void AppendLine(decimal value)
public void AppendLine(decimal value, StandardFormat format)
public void Append(double value)
public void Append(double value, StandardFormat format)
public void AppendLine(double value)
public void AppendLine(double value, StandardFormat format)
public void Append(short value)
public void Append(short value, StandardFormat format)
public void AppendLine(short value)
public void AppendLine(short value, StandardFormat format)
public void Append(int value)
public void Append(int value, StandardFormat format)
public void AppendLine(int value)
public void AppendLine(int value, StandardFormat format)
public void Append(long value)
public void Append(long value, StandardFormat format)
public void AppendLine(long value)
public void AppendLine(long value, StandardFormat format)
public void Append(sbyte value)
public void Append(sbyte value, StandardFormat format)
public void AppendLine(sbyte value)
public void AppendLine(sbyte value, StandardFormat format)
public void Append(float value)
public void Append(float value, StandardFormat format)
public void AppendLine(float value)
public void AppendLine(float value, StandardFormat format)
public void Append(TimeSpan value)
public void Append(TimeSpan value, StandardFormat format)
public void AppendLine(TimeSpan value)
public void AppendLine(TimeSpan value, StandardFormat format)
public void Append(ushort value)
public void Append(ushort value, StandardFormat format)
public void AppendLine(ushort value)
public void AppendLine(ushort value, StandardFormat format)
public void Append(UInt32 value)
public void Append(UInt32 value, StandardFormat format)
public void AppendLine(UInt32 value)
public void AppendLine(UInt32 value, StandardFormat format)
public void Append(ulong value)
public void Append(ulong value, StandardFormat format)
public void AppendLine(ulong value)
public void AppendLine(ulong value, StandardFormat format)
public void Append(Guid value)
public void Append(Guid value, StandardFormat format)
public void AppendLine(Guid value)
public void AppendLine(Guid value, StandardFormat format)
public void Append(bool value)
public void Append(bool value, StandardFormat format)
public void AppendLine(bool value)
public void AppendLine(bool value, StandardFormat format)
public int get_Length()
public ReadOnlySpan`1<byte> AsSpan()
public ReadOnlyMemory`1<byte> AsMemory()
public ArraySegment`1<byte> AsArraySegment()
public void .ctor(bool disposeImmediately)
public void Dispose()
public void Clear()
public void TryGrow(int sizeHint)
public void Grow(int sizeHint)
public void AppendLine()
public void Append(char value)
public void Append(char value, int repeatCount)
public void AppendLine(char value)
public void Append(string value, int startIndex, int count)
public void Append(string value)
public void AppendLine(string value)
public void Append(ReadOnlySpan`1<char> value)
public void AppendLine(ReadOnlySpan`1<char> value)
public void AppendLiteral(ReadOnlySpan`1<byte> value)
public void Append(T value)
public void AppendLine(T value)
public void CopyTo(IBufferWriter`1<byte> bufferWriter)
public bool TryCopyTo(Span`1<byte> destination, Int32& bytesWritten)
public void WriteTo(Stream stream)
public Task WriteToAsync(Stream stream)
public Task WriteToAsync(Stream stream, CancellationToken cancellationToken)
public string ToString()
public Memory`1<byte> GetMemory(int sizeHint)
public Span`1<byte> GetSpan(int sizeHint)
public void Advance(int count)
private void Cysharp.Text.IResettableBufferWriter<System.Byte>.Reset()
private void ThrowArgumentException(string paramName)
private void ThrowFormatException()
private void ThrowNestedException()
private void AppendFormatInternal(T arg, int width, StandardFormat format, string argName)
public void RegisterTryFormat(TryFormat`1<T> formatMethod)
private TryFormat`1<Nullable`1<T>> CreateNullableFormatter()
public void EnableNullableFormat()
}
public Cysharp.Text.ZString : object {
private Encoding UTF8NoBom
public string Concat(T1 arg1)
public string Concat(T1 arg1, T2 arg2)
public string Concat(T1 arg1, T2 arg2, T3 arg3)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
public string Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
internal void AppendChars(TBufferWriter& sb, ReadOnlySpan`1<char> chars)
public Utf16ValueStringBuilder CreateStringBuilder()
public Utf8ValueStringBuilder CreateUtf8StringBuilder()
public Utf16ValueStringBuilder CreateStringBuilder(bool notNested)
public Utf8ValueStringBuilder CreateUtf8StringBuilder(bool notNested)
public string Join(char separator, T[] values)
public string Join(char separator, List`1<T> values)
public string Join(char separator, ReadOnlySpan`1<T> values)
public string Join(char separator, IEnumerable`1<T> values)
public string Join(char separator, ICollection`1<T> values)
public string Join(char separator, IList`1<T> values)
public string Join(char separator, IReadOnlyList`1<T> values)
public string Join(char separator, IReadOnlyCollection`1<T> values)
public string Join(string separator, T[] values)
public string Join(string separator, List`1<T> values)
public string Join(string separator, ReadOnlySpan`1<T> values)
public string Join(string separator, ICollection`1<T> values)
public string Join(string separator, IList`1<T> values)
public string Join(string separator, IReadOnlyList`1<T> values)
public string Join(string separator, IReadOnlyCollection`1<T> values)
public string Join(string separator, IEnumerable`1<T> values)
public string Concat(T[] values)
public string Concat(List`1<T> values)
public string Concat(ReadOnlySpan`1<T> values)
public string Concat(ICollection`1<T> values)
public string Concat(IList`1<T> values)
public string Concat(IReadOnlyList`1<T> values)
public string Concat(IReadOnlyCollection`1<T> values)
public string Concat(IEnumerable`1<T> values)
private string JoinInternal(ReadOnlySpan`1<char> separator, IList`1<T> values)
private string JoinInternal(ReadOnlySpan`1<char> separator, IReadOnlyList`1<T> values)
private string JoinInternal(ReadOnlySpan`1<char> separator, ReadOnlySpan`1<T> values)
private string JoinInternal(ReadOnlySpan`1<char> separator, IEnumerable`1<T> values)
public string Format(string format, T1 arg1)
public string Format(ReadOnlySpan`1<char> format, T1 arg1)
public string Format(string format, T1 arg1, T2 arg2)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
public string Format(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
public string Format(ReadOnlySpan`1<char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
public Utf16PreparedFormat`1<T1> PrepareUtf16(string format)
public Utf8PreparedFormat`1<T1> PrepareUtf8(string format)
public Utf16PreparedFormat`2<T1, T2> PrepareUtf16(string format)
public Utf8PreparedFormat`2<T1, T2> PrepareUtf8(string format)
public Utf16PreparedFormat`3<T1, T2, T3> PrepareUtf16(string format)
public Utf8PreparedFormat`3<T1, T2, T3> PrepareUtf8(string format)
public Utf16PreparedFormat`4<T1, T2, T3, T4> PrepareUtf16(string format)
public Utf8PreparedFormat`4<T1, T2, T3, T4> PrepareUtf8(string format)
public Utf16PreparedFormat`5<T1, T2, T3, T4, T5> PrepareUtf16(string format)
public Utf8PreparedFormat`5<T1, T2, T3, T4, T5> PrepareUtf8(string format)
public Utf16PreparedFormat`6<T1, T2, T3, T4, T5, T6> PrepareUtf16(string format)
public Utf8PreparedFormat`6<T1, T2, T3, T4, T5, T6> PrepareUtf8(string format)
public Utf16PreparedFormat`7<T1, T2, T3, T4, T5, T6, T7> PrepareUtf16(string format)
public Utf8PreparedFormat`7<T1, T2, T3, T4, T5, T6, T7> PrepareUtf8(string format)
public Utf16PreparedFormat`8<T1, T2, T3, T4, T5, T6, T7, T8> PrepareUtf16(string format)
public Utf8PreparedFormat`8<T1, T2, T3, T4, T5, T6, T7, T8> PrepareUtf8(string format)
public Utf16PreparedFormat`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> PrepareUtf16(string format)
public Utf8PreparedFormat`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> PrepareUtf8(string format)
public Utf16PreparedFormat`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> PrepareUtf16(string format)
public Utf8PreparedFormat`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> PrepareUtf8(string format)
public Utf16PreparedFormat`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> PrepareUtf16(string format)
public Utf8PreparedFormat`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> PrepareUtf8(string format)
public Utf16PreparedFormat`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> PrepareUtf16(string format)
public Utf8PreparedFormat`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> PrepareUtf8(string format)
public Utf16PreparedFormat`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> PrepareUtf16(string format)
public Utf8PreparedFormat`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> PrepareUtf8(string format)
public Utf16PreparedFormat`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> PrepareUtf16(string format)
public Utf8PreparedFormat`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> PrepareUtf8(string format)
public Utf16PreparedFormat`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> PrepareUtf16(string format)
public Utf8PreparedFormat`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> PrepareUtf8(string format)
public Utf16PreparedFormat`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> PrepareUtf16(string format)
public Utf8PreparedFormat`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> PrepareUtf8(string format)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
public void Utf8Format(IBufferWriter`1<byte> bufferWriter, string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
}
public Cysharp.Text.ZStringWriter : TextWriter {
private Utf16ValueStringBuilder sb
private bool isOpen
private UnicodeEncoding encoding
public Encoding Encoding
public void .ctor(IFormatProvider formatProvider)
public void Close()
protected void Dispose(bool disposing)
public Encoding get_Encoding()
public void Write(char value)
public void Write(Char[] buffer, int index, int count)
public void Write(string value)
public Task WriteAsync(char value)
public Task WriteAsync(string value)
public Task WriteAsync(Char[] buffer, int index, int count)
public Task WriteLineAsync(char value)
public Task WriteLineAsync(string value)
public Task WriteLineAsync(Char[] buffer, int index, int count)
public void Write(bool value)
public void Write(decimal value)
public Task FlushAsync()
public string ToString()
private void AssertNotDisposed()
}
internal System.BufferEx : object {
internal void ZeroMemory(Byte* dest, UInt32 len)
internal void Memcpy(Byte* dest, Byte* src, int len)
}
internal System.Buffers.Text.FormattingHelpers : object {
public int CountDigits(ulong value)
public int CountDigits(UInt32 value)
public int CountHexDigits(ulong value)
public int CountDecimalTrailingZeros(UInt32 value, UInt32& valueWithoutTrailingZeros)
}
internal System.DecimalEx : object {
private int ScaleShift
private DecCalc& AsMutable(Decimal& d)
internal UInt32 High(decimal value)
internal UInt32 Low(decimal value)
internal UInt32 Mid(decimal value)
internal bool IsNegative(decimal value)
internal int Scale(decimal value)
internal UInt32 DecDivMod1E9(Decimal& value)
}
internal System.FloatEx : object {
public bool IsFinite(double d)
public bool IsNegative(double d)
public bool IsFinite(float f)
public bool IsNegative(float f)
public int SingleToInt32Bits(float value)
}
internal System.GuidEx : ValueType {
private int _a
private short _b
private short _c
private byte _d
private byte _e
private byte _f
private byte _g
private byte _h
private byte _i
private byte _j
private byte _k
private int HexsToChars(Char* guidChars, int a, int b)
private int HexsToCharsHexOutput(Char* guidChars, int a, int b)
public bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format)
}
internal System.HexConverter : object {
public void ToBytesBuffer(byte value, Span`1<byte> buffer, int startingIndex, Casing casing)
public void ToCharsBuffer(byte value, Span`1<char> buffer, int startingIndex, Casing casing)
public string ToString(ReadOnlySpan`1<byte> bytes, Casing casing)
public char ToCharUpper(int value)
public char ToCharLower(int value)
}
internal System.InternalSpanEx : object {
internal bool EqualsOrdinalIgnoreCase(ReadOnlySpan`1<char> span, ReadOnlySpan`1<char> value)
private bool EqualsOrdinalIgnoreCase(Char& charA, Char& charB, int length)
internal bool AllCharsInUInt32AreAscii(UInt32 value)
internal bool AllCharsInUInt64AreAscii(ulong value)
internal bool UInt32OrdinalIgnoreCaseAscii(UInt32 valueA, UInt32 valueB)
internal bool UInt64OrdinalIgnoreCaseAscii(ulong valueA, ulong valueB)
private bool EqualsOrdinalIgnoreCaseNonAscii(Char& charA, Char& charB, int length)
}
internal System.MathEx : object {
public UInt32 DivRem(UInt32 a, UInt32 b, UInt32& result)
public ulong DivRem(ulong a, ulong b, UInt64& result)
public int DivRem(int a, int b, Int32& result)
public long DivRem(long a, long b, Int64& result)
public byte Clamp(byte value, byte min, byte max)
public decimal Clamp(decimal value, decimal min, decimal max)
public double Clamp(double value, double min, double max)
public short Clamp(short value, short min, short max)
public int Clamp(int value, int min, int max)
public long Clamp(long value, long min, long max)
public sbyte Clamp(sbyte value, sbyte min, sbyte max)
public float Clamp(float value, float min, float max)
public ushort Clamp(ushort value, ushort min, ushort max)
public UInt32 Clamp(UInt32 value, UInt32 min, UInt32 max)
public ulong Clamp(ulong value, ulong min, ulong max)
private void ThrowMinMaxException(T min, T max)
}
internal System.Number : object {
internal int DecimalPrecision
private int SinglePrecision
private int DoublePrecision
private int SinglePrecisionCustomFormat
private int DoublePrecisionCustomFormat
private int DefaultPrecisionExponentialFormat
private int MaxUInt32DecDigits
private int CharStackBufferSize
private string PosNumberFormat
private String[] s_singleDigitStringCache
private String[] s_posCurrencyFormats
private String[] s_negCurrencyFormats
private String[] s_posPercentFormats
private String[] s_negPercentFormats
private String[] s_negNumberFormats
internal int DecimalNumberBufferLength
internal int DoubleNumberBufferLength
internal int Int32NumberBufferLength
internal int Int64NumberBufferLength
internal int SingleNumberBufferLength
internal int UInt32NumberBufferLength
internal int UInt64NumberBufferLength
private Single[] s_Pow10SingleTable
private Double[] s_Pow10DoubleTable
private int Int32Precision
private int UInt32Precision
private int Int64Precision
private int UInt64Precision
private int DoubleMaxExponent
private int DoubleMinExponent
private int FloatingPointMaxExponent
private int FloatingPointMinExponent
private int SingleMaxExponent
private int SingleMinExponent
internal ReadOnlySpan`1<byte> CharToHexLookup
private bool IsNegative(double d)
public bool IsNegativeInfinity(float f)
public void Dragon4Double(double value, int cutoffNumber, bool isSignificantDigits, NumberBuffer& number)
public void Dragon4Single(float value, int cutoffNumber, bool isSignificantDigits, NumberBuffer& number)
private UInt32 Dragon4(ulong mantissa, int exponent, UInt32 mantissaHighBitIdx, bool hasUnequalMargins, int cutoffNumber, bool isSignificantDigits, Span`1<byte> buffer, Int32& decimalExponent)
public string FormatDecimal(decimal value, ReadOnlySpan`1<char> format, NumberFormatInfo info)
public bool TryFormatDecimal(decimal value, ReadOnlySpan`1<char> format, NumberFormatInfo info, Span`1<char> destination, Int32& charsWritten)
internal void DecimalToNumber(Decimal& d, NumberBuffer& number)
public string FormatDouble(double value, string format, NumberFormatInfo info)
public bool TryFormatDouble(double value, ReadOnlySpan`1<char> format, NumberFormatInfo info, Span`1<char> destination, Int32& charsWritten)
private int GetFloatingPointMaxDigitsAndPrecision(char fmt, Int32& precision, NumberFormatInfo info, Boolean& isSignificantDigits)
private string FormatDouble(ValueStringBuilder& sb, double value, ReadOnlySpan`1<char> format, NumberFormatInfo info)
public string FormatSingle(float value, string format, NumberFormatInfo info)
public bool TryFormatSingle(float value, ReadOnlySpan`1<char> format, NumberFormatInfo info, Span`1<char> destination, Int32& charsWritten)
private string FormatSingle(ValueStringBuilder& sb, float value, ReadOnlySpan`1<char> format, NumberFormatInfo info)
private bool TryCopyTo(string source, Span`1<char> destination, Int32& charsWritten)
public string FormatInt32(int value, ReadOnlySpan`1<char> format, IFormatProvider provider)
public bool TryFormatInt32(int value, ReadOnlySpan`1<char> format, IFormatProvider provider, Span`1<char> destination, Int32& charsWritten)
public string FormatUInt32(UInt32 value, ReadOnlySpan`1<char> format, IFormatProvider provider)
public bool TryFormatUInt32(UInt32 value, ReadOnlySpan`1<char> format, IFormatProvider provider, Span`1<char> destination, Int32& charsWritten)
public string FormatInt64(long value, ReadOnlySpan`1<char> format, IFormatProvider provider)
public bool TryFormatInt64(long value, ReadOnlySpan`1<char> format, IFormatProvider provider, Span`1<char> destination, Int32& charsWritten)
public string FormatUInt64(ulong value, ReadOnlySpan`1<char> format, IFormatProvider provider)
public bool TryFormatUInt64(ulong value, ReadOnlySpan`1<char> format, IFormatProvider provider, Span`1<char> destination, Int32& charsWritten)
private void Int32ToNumber(int value, NumberBuffer& number)
private string NegativeInt32ToDecStr(int value, int digits, string sNegative)
private bool TryNegativeInt32ToDecStr(int value, int digits, string sNegative, Span`1<char> destination, Int32& charsWritten)
private string Int32ToHexStr(int value, char hexBase, int digits)
private bool TryInt32ToHexStr(int value, char hexBase, int digits, Span`1<char> destination, Int32& charsWritten)
private Char* Int32ToHexChars(Char* buffer, UInt32 value, int hexBase, int digits)
private void UInt32ToNumber(UInt32 value, NumberBuffer& number)
internal Byte* UInt32ToDecChars(Byte* bufferEnd, UInt32 value, int digits)
internal Char* UInt32ToDecChars(Char* bufferEnd, UInt32 value, int digits)
internal string UInt32ToDecStr(UInt32 value, int digits)
private bool TryUInt32ToDecStr(UInt32 value, int digits, Span`1<char> destination, Int32& charsWritten)
private void Int64ToNumber(long input, NumberBuffer& number)
private string NegativeInt64ToDecStr(long input, int digits, string sNegative)
private bool TryNegativeInt64ToDecStr(long input, int digits, string sNegative, Span`1<char> destination, Int32& charsWritten)
private string Int64ToHexStr(long value, char hexBase, int digits)
private bool TryInt64ToHexStr(long value, char hexBase, int digits, Span`1<char> destination, Int32& charsWritten)
private void UInt64ToNumber(ulong value, NumberBuffer& number)
internal string UInt64ToDecStr(ulong value, int digits)
private bool TryUInt64ToDecStr(ulong value, int digits, Span`1<char> destination, Int32& charsWritten)
internal char ParseFormatSpecifier(ReadOnlySpan`1<char> format, Int32& digits)
internal void NumberToString(ValueStringBuilder& sb, NumberBuffer& number, char format, int nMaxDigits, NumberFormatInfo info)
internal void NumberToStringFormat(ValueStringBuilder& sb, NumberBuffer& number, ReadOnlySpan`1<char> format, NumberFormatInfo info)
private void FormatCurrency(ValueStringBuilder& sb, NumberBuffer& number, int nMaxDigits, NumberFormatInfo info)
private void FormatFixed(ValueStringBuilder& sb, NumberBuffer& number, int nMaxDigits, Int32[] groupDigits, string sDecimal, string sGroup)
private void FormatNumber(ValueStringBuilder& sb, NumberBuffer& number, int nMaxDigits, NumberFormatInfo info)
private void FormatScientific(ValueStringBuilder& sb, NumberBuffer& number, int nMaxDigits, NumberFormatInfo info, char expChar)
private void FormatExponent(ValueStringBuilder& sb, NumberFormatInfo info, int value, char expChar, int minDigits, bool positiveSign)
private void FormatGeneral(ValueStringBuilder& sb, NumberBuffer& number, int nMaxDigits, NumberFormatInfo info, char expChar, bool bSuppressScientific)
private void FormatPercent(ValueStringBuilder& sb, NumberBuffer& number, int nMaxDigits, NumberFormatInfo info)
internal void RoundNumber(NumberBuffer& number, int pos, bool isCorrectlyRounded)
private int FindSection(ReadOnlySpan`1<char> format, int section)
private UInt32 Low32(ulong value)
private UInt32 High32(ulong value)
private UInt32 Int64DivMod1E9(UInt64& value)
private ulong ExtractFractionAndBiasedExponent(double value, Int32& exponent)
private UInt32 ExtractFractionAndBiasedExponent(float value, Int32& exponent)
private string FastAllocateString(int length)
private int SingleToInt32Bits(float value)
private void AccumulateDecimalDigitsIntoBigInteger(NumberBuffer& number, UInt32 firstIndex, UInt32 lastIndex, BigInteger& result)
private ulong AssembleFloatingPointBits(FloatingPointInfo& info, ulong initialMantissa, int initialExponent, bool hasZeroTail)
private ulong ConvertBigIntegerToFloatingPointBits(BigInteger& value, FloatingPointInfo& info, UInt32 integerBitsOfPrecision, bool hasNonZeroFractionalPart)
private UInt32 DigitsToUInt32(Byte* p, int count)
private ulong DigitsToUInt64(Byte* p, int count)
private ulong NumberToFloatingPointBits(NumberBuffer& number, FloatingPointInfo& info)
private ulong NumberToFloatingPointBitsSlow(NumberBuffer& number, FloatingPointInfo& info, UInt32 positiveExponent, UInt32 integerDigitsPresent, UInt32 fractionalDigitsPresent)
private ulong RightShiftWithRounding(ulong value, int shift, bool hasZeroTail)
private bool ShouldRoundUp(bool lsbBit, bool roundBit, bool hasTailBits)
internal ReadOnlySpan`1<byte> get_CharToHexLookup()
private bool TryNumberToInt32(NumberBuffer& number, Int32& value)
private bool TryNumberToInt64(NumberBuffer& number, Int64& value)
private bool TryNumberToUInt32(NumberBuffer& number, UInt32& value)
private bool TryNumberToUInt64(NumberBuffer& number, UInt64& value)
internal int ParseInt32(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info)
internal long ParseInt64(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info)
internal UInt32 ParseUInt32(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info)
internal ulong ParseUInt64(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info)
private bool TryParseNumber(Char*& str, Char* strEnd, NumberStyles styles, NumberBuffer& number, NumberFormatInfo info)
internal ParsingStatus TryParseInt32(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, Int32& result)
private ParsingStatus TryParseInt32Number(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, Int32& result)
internal ParsingStatus TryParseInt32IntegerStyle(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, Int32& result)
internal ParsingStatus TryParseInt64IntegerStyle(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, Int64& result)
internal ParsingStatus TryParseInt64(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, Int64& result)
private ParsingStatus TryParseInt64Number(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, Int64& result)
internal ParsingStatus TryParseUInt32(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, UInt32& result)
private ParsingStatus TryParseUInt32Number(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, UInt32& result)
internal ParsingStatus TryParseUInt32IntegerStyle(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, UInt32& result)
private ParsingStatus TryParseUInt32HexNumberStyle(ReadOnlySpan`1<char> value, NumberStyles styles, UInt32& result)
internal ParsingStatus TryParseUInt64(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, UInt64& result)
private ParsingStatus TryParseUInt64Number(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, UInt64& result)
internal ParsingStatus TryParseUInt64IntegerStyle(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, UInt64& result)
private ParsingStatus TryParseUInt64HexNumberStyle(ReadOnlySpan`1<char> value, NumberStyles styles, UInt64& result)
internal decimal ParseDecimal(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info)
internal bool TryNumberToDecimal(NumberBuffer& number, Decimal& value)
internal double ParseDouble(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info)
internal float ParseSingle(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info)
internal ParsingStatus TryParseDecimal(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, Decimal& result)
internal bool TryParseDouble(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, Double& result)
internal bool TryParseSingle(ReadOnlySpan`1<char> value, NumberStyles styles, NumberFormatInfo info, Single& result)
internal bool TryStringToNumber(ReadOnlySpan`1<char> value, NumberStyles styles, NumberBuffer& number, NumberFormatInfo info)
private bool TrailingZeros(ReadOnlySpan`1<char> value, int index)
private bool IsSpaceReplacingChar(char c)
private Char* MatchChars(Char* p, Char* pEnd, string value)
private bool IsWhite(int ch)
private bool IsDigit(int ch)
internal void ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)
internal void ThrowOverflowException(TypeCode type)
private Exception GetException(ParsingStatus status, TypeCode type)
internal double NumberToDouble(NumberBuffer& number)
internal float NumberToSingle(NumberBuffer& number)
private float Int32BitsToSingle(int value)
internal bool <RoundNumber>g__ShouldRoundUp|70_0(Byte* _dig, int _i, NumberBufferKind numberKind, bool _isCorrectlyRounded)
}
internal System.NumberFormatInfoEx : object {
internal bool HasInvariantNumberSigns(NumberFormatInfo info)
}
internal System.Numerics.BitOperations : object {
private ReadOnlySpan`1<byte> TrailingZeroCountDeBruijn
private ReadOnlySpan`1<byte> Log2DeBruijn
private ReadOnlySpan`1<byte> get_TrailingZeroCountDeBruijn()
private ReadOnlySpan`1<byte> get_Log2DeBruijn()
public int LeadingZeroCount(UInt32 value)
public int LeadingZeroCount(ulong value)
public int Log2(UInt32 value)
public int Log2(ulong value)
private int Log2SoftwareFallback(UInt32 value)
public int PopCount(UInt32 value)
public int PopCount(ulong value)
public int TrailingZeroCount(int value)
public int TrailingZeroCount(UInt32 value)
public int TrailingZeroCount(long value)
public int TrailingZeroCount(ulong value)
public UInt32 RotateLeft(UInt32 value, int offset)
public ulong RotateLeft(ulong value, int offset)
public UInt32 RotateRight(UInt32 value, int offset)
public ulong RotateRight(ulong value, int offset)
}
internal System.Runtime.CompilerServices.NullableAttribute : Attribute {
public Byte[] NullableFlags
public void .ctor(byte )
public void .ctor(Byte[] )
}
internal System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
public byte Flag
public void .ctor(byte )
}
internal System.Text.ValueStringBuilder : ValueType {
private Char[] _arrayToReturnToPool
private Span`1<char> _chars
private int _pos
public int Length
public int Capacity
public Char& Item
public Span`1<char> RawChars
public void .ctor(Span`1<char> initialBuffer)
public void .ctor(int initialCapacity)
public int get_Length()
public void set_Length(int value)
public int get_Capacity()
public void EnsureCapacity(int capacity)
public Char& GetPinnableReference()
public Char& GetPinnableReference(bool terminate)
public Char& get_Item(int index)
public string ToString()
public Span`1<char> get_RawChars()
public ReadOnlySpan`1<char> AsSpan(bool terminate)
public ReadOnlySpan`1<char> AsSpan()
public ReadOnlySpan`1<char> AsSpan(int start)
public ReadOnlySpan`1<char> AsSpan(int start, int length)
public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten)
public void Insert(int index, char value, int count)
public void Insert(int index, string s)
public void Append(char c)
public void Append(string s)
private void AppendSlow(string s)
public void Append(char c, int count)
public void Append(Char* value, int length)
public void Append(ReadOnlySpan`1<char> value)
public Span`1<char> AppendSpan(int length)
private void GrowAndAppend(char c)
private void Grow(int additionalCapacityBeyondPos)
public void Dispose()
}
internal UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
private MonoScriptData Get()
}
