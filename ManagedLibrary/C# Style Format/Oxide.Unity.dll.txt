public Oxide.Core.Unity.ExtensionMethods : object {
public Vector3 ToVector3(string vector3)
public LogType ToLogType(LogType logType)
}
public Oxide.Core.Unity.Logging.UnityLogger : Logger {
private Thread mainThread
protected void ProcessMessage(LogMessage message)
}
public Oxide.Core.Unity.Plugins.UnityCore : CSPlugin {
private UnityLogger logger
private void InitLogging()
public void Print(string message)
public void PrintWarning(string message)
public void PrintError(string message)
private void <InitLogging>b__2_0()
}
public Oxide.Core.Unity.Plugins.UnityPluginLoader : PluginLoader {
public Type[] CorePlugins
public Type[] get_CorePlugins()
}
public Oxide.Core.Unity.UnityExtension : Extension {
internal Assembly Assembly
internal AssemblyName AssemblyName
internal VersionNumber AssemblyVersion
internal string AssemblyAuthors
public bool IsCoreExtension
public string Name
public string Author
public VersionNumber Version
public bool get_IsCoreExtension()
public string get_Name()
public string get_Author()
public VersionNumber get_Version()
public void .ctor(ExtensionManager manager)
public void Load()
public void LoadPluginWatchers(string pluginDirectory)
public void OnModLoad()
}
public Oxide.Core.Unity.UnityScript : MonoBehaviour {
private GameObject <Instance>k__BackingField
private OxideMod oxideMod
public GameObject Instance
public GameObject get_Instance()
private void set_Instance(GameObject value)
public void Create()
private void Awake()
private void Update()
private void OnDestroy()
private void OnApplicationQuit()
private void LogMessageReceived(string message, string stackTrace, LogType type)
}
