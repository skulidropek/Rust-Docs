internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string VsVersion
public string FxFileVersion
public string VsFileVersion
public string AssemblyI18N
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_Core
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal MapAttribute : Attribute {
private string nativeType
private string suppressFlags
public string NativeType
public string SuppressFlags
public void .ctor(string nativeType)
public string get_NativeType()
public string get_SuppressFlags()
public void set_SuppressFlags(string value)
}
public Mono.Posix.AccessMode : Enum {
public int value__
public AccessMode R_OK
public AccessMode W_OK
public AccessMode X_OK
public AccessMode F_OK
}
public Mono.Posix.Catalog : object {
private IntPtr bindtextdomain(IntPtr domainname, IntPtr dirname)
private IntPtr bind_textdomain_codeset(IntPtr domainname, IntPtr codeset)
private IntPtr textdomain(IntPtr domainname)
public void Init(string package, string localedir)
private IntPtr gettext(IntPtr instring)
public string GetString(string s)
private IntPtr ngettext(IntPtr singular, IntPtr plural, int n)
public string GetPluralString(string s, string p, int n)
}
public Mono.Posix.FileMode : Enum {
public int value__
public FileMode S_ISUID
public FileMode S_ISGID
public FileMode S_ISVTX
public FileMode S_IRUSR
public FileMode S_IWUSR
public FileMode S_IXUSR
public FileMode S_IRGRP
public FileMode S_IWGRP
public FileMode S_IXGRP
public FileMode S_IROTH
public FileMode S_IWOTH
public FileMode S_IXOTH
}
public Mono.Posix.OpenFlags : Enum {
public int value__
public OpenFlags O_RDONLY
public OpenFlags O_WRONLY
public OpenFlags O_RDWR
public OpenFlags O_CREAT
public OpenFlags O_EXCL
public OpenFlags O_NOCTTY
public OpenFlags O_TRUNC
public OpenFlags O_APPEND
public OpenFlags O_NONBLOCK
public OpenFlags O_SYNC
}
public Mono.Posix.PeerCred : object {
private int so_peercred
private PeerCredData data
public int ProcessID
public int UserID
public int GroupID
public void .ctor(Socket sock)
public int get_ProcessID()
public int get_UserID()
public int get_GroupID()
}
internal Mono.Posix.PeerCredData : ValueType {
public int pid
public int uid
public int gid
}
public Mono.Posix.Signals : Enum {
public int value__
public Signals SIGHUP
public Signals SIGINT
public Signals SIGQUIT
public Signals SIGILL
public Signals SIGTRAP
public Signals SIGABRT
public Signals SIGBUS
public Signals SIGFPE
public Signals SIGKILL
public Signals SIGUSR1
public Signals SIGSEGV
public Signals SIGUSR2
public Signals SIGPIPE
public Signals SIGALRM
public Signals SIGTERM
public Signals SIGCHLD
public Signals SIGCONT
public Signals SIGSTOP
public Signals SIGTSTP
public Signals SIGTTIN
public Signals SIGTTOU
public Signals SIGURG
public Signals SIGXCPU
public Signals SIGXFSZ
public Signals SIGVTALRM
public Signals SIGPROF
public Signals SIGWINCH
public Signals SIGIO
public Signals SIGSYS
}
public Mono.Posix.Stat : ValueType {
public int Device
public int INode
public StatMode Mode
public int NLinks
public int Uid
public int Gid
public long DeviceType
public long Size
public long BlockSize
public long Blocks
public DateTime ATime
public DateTime MTime
public DateTime CTime
public DateTime UnixEpoch
internal void .ctor(int device, int inode, int mode, int nlinks, int uid, int gid, int rdev, long size, long blksize, long blocks, long atime, long mtime, long ctime)
public DateTime UnixToDateTime(long unix)
}
public Mono.Posix.StatMode : Enum {
public int value__
public StatMode Socket
public StatMode SymLink
public StatMode Regular
public StatMode BlockDevice
public StatMode Directory
public StatMode CharDevice
public StatMode FIFO
public StatMode SUid
public StatMode SGid
public StatMode Sticky
public StatMode OwnerRead
public StatMode OwnerWrite
public StatMode OwnerExecute
public StatMode GroupRead
public StatMode GroupWrite
public StatMode GroupExecute
public StatMode OthersRead
public StatMode OthersWrite
public StatMode OthersExecute
}
public Mono.Posix.StatModeMasks : Enum {
public int value__
public StatModeMasks TypeMask
public StatModeMasks OwnerMask
public StatModeMasks GroupMask
public StatModeMasks OthersMask
}
public Mono.Posix.Syscall : object {
public int exit(int status)
public int fork()
public IntPtr read(int fileDescriptor, Void* buf, IntPtr count)
public IntPtr write(int fileDescriptor, Void* buf, IntPtr count)
internal int syscall_open(string pathname, int flags, int mode)
internal int map_Mono_Posix_OpenFlags(OpenFlags flags)
internal int map_Mono_Posix_FileMode(FileMode mode)
public int open(string pathname, OpenFlags flags)
public int open(string pathname, OpenFlags flags, FileMode mode)
public int close(int fileDescriptor)
internal int syscall_waitpid(int pid, Int32* status, int options)
internal int map_Mono_Posix_WaitOptions(WaitOptions wait_options)
public int waitpid(int pid, Int32& status, WaitOptions options)
public int waitpid(int pid, WaitOptions options)
public int WIFEXITED(int status)
public int WEXITSTATUS(int status)
public int WIFSIGNALED(int status)
public int WTERMSIG(int status)
public int WIFSTOPPED(int status)
public int WSTOPSIG(int status)
internal int syscall_creat(string pathname, int flags)
public int creat(string pathname, FileMode flags)
public int link(string oldPath, string newPath)
public int unlink(string path)
public int symlink(string oldpath, string newpath)
public int chdir(string path)
internal int syscall_chmod(string path, int mode)
public int chmod(string path, FileMode mode)
public int chown(string path, int owner, int group)
public int lchown(string path, int owner, int group)
public int lseek(int fileDescriptor, int offset, int whence)
public int getpid()
public int setuid(int uid)
public int getuid()
public UInt32 alarm(UInt32 seconds)
public int pause()
internal int syscall_access(string pathname, int mode)
internal int map_Mono_Posix_AccessMode(AccessMode mode)
public int access(string pathname, AccessMode mode)
public int nice(int increment)
public void sync()
public void kill(int pid, int sig)
public int rename(string oldPath, string newPath)
internal int syscall_mkdir(string pathname, int mode)
public int mkdir(string pathname, FileMode mode)
public int rmdir(string path)
public int dup(int fileDescriptor)
public int setgid(int gid)
public int getgid()
public int signal(int signum, sighandler_t handler)
public int geteuid()
public int getegid()
public int setpgid(int pid, int pgid)
public int umask(int umask)
public int chroot(string path)
public int dup2(int oldFileDescriptor, int newFileDescriptor)
public int getppid()
public int getpgrp()
public int setsid()
public int setreuid(int ruid, int euid)
public int setregid(int rgid, int egid)
private string helper_Mono_Posix_GetUserName(int uid)
private string helper_Mono_Posix_GetGroupName(int gid)
public string getusername(int uid)
public string getgroupname(int gid)
private int syscall_gethostname(Byte[] p, int len)
public string GetHostName()
public string gethostname()
private int syscall_isatty(int desc)
public bool isatty(int desc)
internal int helper_Mono_Posix_Stat(string filename, bool dereference, Int32& device, Int32& inode, Int32& mode, Int32& nlinks, Int32& uid, Int32& gid, Int32& rdev, Int64& size, Int64& blksize, Int64& blocks, Int64& atime, Int64& mtime, Int64& ctime)
private int stat2(string filename, bool dereference, Stat& stat)
public int stat(string filename, Stat& stat)
public int lstat(string filename, Stat& stat)
private int readlink(string path, Byte[] buffer, int buflen)
public string readlink(string path)
private IntPtr _strerror(int errnum)
public string strerror(int errnum)
public IntPtr opendir(string path)
public int closedir(IntPtr dir)
public string readdir(IntPtr dir)
}
public Mono.Posix.UnixEndPoint : EndPoint {
private string filename
public string Filename
public AddressFamily AddressFamily
public void .ctor(string filename)
public string get_Filename()
public void set_Filename(string value)
public AddressFamily get_AddressFamily()
public EndPoint Create(SocketAddress socketAddress)
public SocketAddress Serialize()
public string ToString()
public int GetHashCode()
public bool Equals(object o)
}
public Mono.Posix.WaitOptions : Enum {
public int value__
public WaitOptions WNOHANG
public WaitOptions WUNTRACED
}
internal Mono.Remoting.Channels.Unix.ClientConnection : object {
private Socket _client
private UnixServerTransportSink _sink
private Stream _stream
private UnixServerChannel _serverChannel
private Byte[] _buffer
public Socket Client
public Byte[] Buffer
public bool IsLocal
public void .ctor(UnixServerChannel serverChannel, Socket client, UnixServerTransportSink sink)
public Socket get_Client()
public Byte[] get_Buffer()
public void ProcessMessages()
public bool get_IsLocal()
}
internal Mono.Remoting.Channels.Unix.HostConnectionPool : object {
private ArrayList _pool
private int _activeConnections
private string _path
public void .ctor(string path)
public UnixConnection GetConnection()
private UnixConnection CreateConnection()
public void ReleaseConnection(UnixConnection entry)
private void CancelConnection(UnixConnection entry)
public void PurgeConnections()
}
internal Mono.Remoting.Channels.Unix.MessageStatus : Enum {
public int value__
public MessageStatus MethodMessage
public MessageStatus CancelSignal
public MessageStatus Unknown
}
internal Mono.Remoting.Channels.Unix.MethodCallHeaderHandler : object {
private string _uri
public void .ctor(string uri)
public object HandleHeaders(Header[] headers)
}
internal Mono.Remoting.Channels.Unix.ReusableUnixClient : UnixClient {
public bool IsAlive
public void .ctor(string path)
public bool get_IsAlive()
}
internal Mono.Remoting.Channels.Unix.SimpleBinder : SerializationBinder {
public SimpleBinder Instance
public Type BindToType(string assemblyName, string typeName)
}
internal Mono.Remoting.Channels.Unix.UnixBinaryClientFormatterSink : object {
private UnixBinaryCore _binaryCore
private IClientChannelSink _nextInChain
internal UnixBinaryCore BinaryCore
public IClientChannelSink NextChannelSink
public IMessageSink NextSink
public IDictionary Properties
public void .ctor(IClientChannelSink nextSink)
internal UnixBinaryCore get_BinaryCore()
internal void set_BinaryCore(UnixBinaryCore value)
public IClientChannelSink get_NextChannelSink()
public IMessageSink get_NextSink()
public IDictionary get_Properties()
public void AsyncProcessRequest(IClientChannelSinkStack sinkStack, IMessage msg, ITransportHeaders headers, Stream stream)
public void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack, object state, ITransportHeaders headers, Stream stream)
public Stream GetRequestStream(IMessage msg, ITransportHeaders headers)
public void ProcessMessage(IMessage msg, ITransportHeaders requestHeaders, Stream requestStream, ITransportHeaders& responseHeaders, Stream& responseStream)
public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink)
public IMessage SyncProcessMessage(IMessage msg)
}
internal Mono.Remoting.Channels.Unix.UnixBinaryClientFormatterSinkProvider : object {
private IClientChannelSinkProvider next
private UnixBinaryCore _binaryCore
private String[] allowedProperties
public IClientChannelSinkProvider Next
public void .ctor(IDictionary properties, ICollection providerData)
public IClientChannelSinkProvider get_Next()
public void set_Next(IClientChannelSinkProvider value)
public IClientChannelSink CreateSink(IChannelSender channel, string url, object remoteChannelData)
}
internal Mono.Remoting.Channels.Unix.UnixBinaryCore : object {
private BinaryFormatter _serializationFormatter
private BinaryFormatter _deserializationFormatter
private bool _includeVersions
private bool _strictBinding
private IDictionary _properties
public UnixBinaryCore DefaultInstance
private Dictionary`2<string, int> <>f__switch$map0
public BinaryFormatter Serializer
public BinaryFormatter Deserializer
public IDictionary Properties
public void .ctor(object owner, IDictionary properties, String[] allowedProperties)
public void Init()
public BinaryFormatter get_Serializer()
public BinaryFormatter get_Deserializer()
public IDictionary get_Properties()
}
internal Mono.Remoting.Channels.Unix.UnixBinaryServerFormatterSink : object {
private UnixBinaryCore _binaryCore
private IServerChannelSink next_sink
private IChannelReceiver receiver
internal UnixBinaryCore BinaryCore
public IServerChannelSink NextChannelSink
public IDictionary Properties
public void .ctor(IServerChannelSink nextSink, IChannelReceiver receiver)
internal UnixBinaryCore get_BinaryCore()
internal void set_BinaryCore(UnixBinaryCore value)
public IServerChannelSink get_NextChannelSink()
public IDictionary get_Properties()
public void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage message, ITransportHeaders headers, Stream stream)
public Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers)
public ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage& responseMsg, ITransportHeaders& responseHeaders, Stream& responseStream)
}
internal Mono.Remoting.Channels.Unix.UnixBinaryServerFormatterSinkProvider : object {
private IServerChannelSinkProvider next
private UnixBinaryCore _binaryCore
internal String[] AllowedProperties
public IServerChannelSinkProvider Next
public void .ctor(IDictionary properties, ICollection providerData)
public IServerChannelSinkProvider get_Next()
public void set_Next(IServerChannelSinkProvider value)
public IServerChannelSink CreateSink(IChannelReceiver channel)
public void GetChannelData(IChannelDataStore channelData)
}
public Mono.Remoting.Channels.Unix.UnixChannel : object {
private UnixClientChannel _clientChannel
private UnixServerChannel _serverChannel
private string _name
private int _priority
public string ChannelName
public int ChannelPriority
public object ChannelData
public void .ctor(string path)
public void .ctor(IDictionary properties, IClientChannelSinkProvider clientSinkProvider, IServerChannelSinkProvider serverSinkProvider)
private void Init(IDictionary properties, IClientChannelSinkProvider clientSink, IServerChannelSinkProvider serverSink)
public IMessageSink CreateMessageSink(string url, object remoteChannelData, String& objectURI)
public string get_ChannelName()
public int get_ChannelPriority()
public void StartListening(object data)
public void StopListening(object data)
public String[] GetUrlsForUri(string uri)
public object get_ChannelData()
public string Parse(string url, String& objectURI)
internal string ParseUnixURL(string url, String& objectURI)
}
public Mono.Remoting.Channels.Unix.UnixClientChannel : object {
private int priority
private string name
private IClientChannelSinkProvider _sinkProvider
public string ChannelName
public int ChannelPriority
public void .ctor(IDictionary properties, IClientChannelSinkProvider sinkProvider)
public void .ctor(string name, IClientChannelSinkProvider sinkProvider)
public string get_ChannelName()
public int get_ChannelPriority()
public IMessageSink CreateMessageSink(string url, object remoteChannelData, String& objectURI)
public string Parse(string url, String& objectURI)
}
internal Mono.Remoting.Channels.Unix.UnixClientTransportSink : object {
private string _path
public IDictionary Properties
public IClientChannelSink NextChannelSink
public void .ctor(string url)
public IDictionary get_Properties()
public IClientChannelSink get_NextChannelSink()
public void AsyncProcessRequest(IClientChannelSinkStack sinkStack, IMessage msg, ITransportHeaders headers, Stream requestStream)
private void ReadAsyncUnixMessage(object data)
public void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack, object state, ITransportHeaders headers, Stream stream)
public Stream GetRequestStream(IMessage msg, ITransportHeaders headers)
public void ProcessMessage(IMessage msg, ITransportHeaders requestHeaders, Stream requestStream, ITransportHeaders& responseHeaders, Stream& responseStream)
}
internal Mono.Remoting.Channels.Unix.UnixClientTransportSinkProvider : object {
public IClientChannelSinkProvider Next
public IClientChannelSinkProvider get_Next()
public void set_Next(IClientChannelSinkProvider value)
public IClientChannelSink CreateSink(IChannelSender channel, string url, object remoteChannelData)
}
internal Mono.Remoting.Channels.Unix.UnixConnection : object {
private DateTime _controlTime
private Stream _stream
private ReusableUnixClient _client
private HostConnectionPool _pool
private Byte[] _buffer
public Stream Stream
public DateTime ControlTime
public bool IsAlive
public Byte[] Buffer
public void .ctor(HostConnectionPool pool, ReusableUnixClient client)
public Stream get_Stream()
public DateTime get_ControlTime()
public void set_ControlTime(DateTime value)
public bool get_IsAlive()
public Byte[] get_Buffer()
public void Release()
public void Close()
}
internal Mono.Remoting.Channels.Unix.UnixConnectionPool : object {
private Hashtable _pools
private int _maxOpenConnections
private int _keepAliveSeconds
private Thread _poolThread
public int MaxOpenConnections
public int KeepAliveSeconds
public void Shutdown()
public int get_MaxOpenConnections()
public void set_MaxOpenConnections(int value)
public int get_KeepAliveSeconds()
public void set_KeepAliveSeconds(int value)
public UnixConnection GetConnection(string path)
private void ConnectionCollector()
}
internal Mono.Remoting.Channels.Unix.UnixMessageIO : object {
private Byte[][] _msgHeaders
public int DefaultStreamBufferSize
private Byte[] msgUriTransportKey
private Byte[] msgContentTypeTransportKey
private Byte[] msgDefaultTransportKey
private Byte[] msgHeaderTerminator
private Dictionary`2<string, int> <>f__switch$map1
public MessageStatus ReceiveMessageStatus(Stream networkStream, Byte[] buffer)
private bool StreamRead(Stream networkStream, Byte[] buffer, int count)
public void SendMessageStream(Stream networkStream, Stream data, ITransportHeaders requestHeaders, Byte[] buffer)
private void SendHeaders(Stream networkStream, ITransportHeaders requestHeaders, Byte[] buffer)
public ITransportHeaders ReceiveHeaders(Stream networkStream, Byte[] buffer)
public Stream ReceiveMessageStream(Stream networkStream, ITransportHeaders& headers, Byte[] buffer)
private void SendString(Stream networkStream, string str, Byte[] buffer)
private string ReceiveString(Stream networkStream, Byte[] buffer)
}
public Mono.Remoting.Channels.Unix.UnixServerChannel : object {
private string path
private string name
private int priority
private bool supressChannelData
private Thread server_thread
private UnixListener listener
private UnixServerTransportSink sink
private ChannelDataStore channel_data
private int _maxConcurrentConnections
private ArrayList _activeConnections
private Dictionary`2<string, int> <>f__switch$map2
public object ChannelData
public string ChannelName
public int ChannelPriority
public void .ctor(string path)
public void .ctor(IDictionary properties, IServerChannelSinkProvider serverSinkProvider)
public void .ctor(string name, string path, IServerChannelSinkProvider serverSinkProvider)
public void .ctor(string name, string path)
private void Init(IServerChannelSinkProvider serverSinkProvider)
public object get_ChannelData()
public string get_ChannelName()
public int get_ChannelPriority()
public string GetChannelUri()
public String[] GetUrlsForUri(string uri)
public string Parse(string url, String& objectURI)
private void WaitForConnections()
internal void CreateListenerConnection(Socket client)
internal void ReleaseConnection(Thread thread)
public void StartListening(object data)
public void StopListening(object data)
}
internal Mono.Remoting.Channels.Unix.UnixServerTransportSink : object {
private IServerChannelSink next_sink
public IServerChannelSink NextChannelSink
public IDictionary Properties
public void .ctor(IServerChannelSink next)
public IServerChannelSink get_NextChannelSink()
public IDictionary get_Properties()
public void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers, Stream responseStream)
public Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers)
public ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage& responseMsg, ITransportHeaders& responseHeaders, Stream& responseStream)
internal void InternalProcessMessage(ClientConnection connection, Stream stream)
}
public Mono.Unix.AbstractUnixEndPoint : EndPoint {
private string path
public string Path
public AddressFamily AddressFamily
public void .ctor(string path)
public string get_Path()
public void set_Path(string value)
public AddressFamily get_AddressFamily()
public EndPoint Create(SocketAddress socketAddress)
public SocketAddress Serialize()
public string ToString()
public int GetHashCode()
public bool Equals(object o)
}
public Mono.Unix.Catalog : object {
private IntPtr bindtextdomain(IntPtr domainname, IntPtr dirname)
private IntPtr bind_textdomain_codeset(IntPtr domainname, IntPtr codeset)
private IntPtr textdomain(IntPtr domainname)
public void Init(string package, string localedir)
private void MarshalStrings(string s1, IntPtr& p1, string s2, IntPtr& p2, string s3, IntPtr& p3)
private IntPtr gettext(IntPtr instring)
public string GetString(string s)
private IntPtr ngettext(IntPtr singular, IntPtr plural, int n)
public string GetPluralString(string s, string p, int n)
}
internal Mono.Unix.ErrorMarshal : object {
internal ErrorTranslator Translate
private string strerror(Errno errno)
private string strerror_r(Errno errno)
}
public Mono.Unix.FileAccessPattern : Enum {
public int value__
public FileAccessPattern Normal
public FileAccessPattern Sequential
public FileAccessPattern Random
public FileAccessPattern NoReuse
public FileAccessPattern PreLoad
public FileAccessPattern FlushCache
}
public Mono.Unix.FileAccessPermissions : Enum {
public int value__
public FileAccessPermissions UserReadWriteExecute
public FileAccessPermissions UserRead
public FileAccessPermissions UserWrite
public FileAccessPermissions UserExecute
public FileAccessPermissions GroupReadWriteExecute
public FileAccessPermissions GroupRead
public FileAccessPermissions GroupWrite
public FileAccessPermissions GroupExecute
public FileAccessPermissions OtherReadWriteExecute
public FileAccessPermissions OtherRead
public FileAccessPermissions OtherWrite
public FileAccessPermissions OtherExecute
public FileAccessPermissions DefaultPermissions
public FileAccessPermissions AllPermissions
}
public Mono.Unix.FileHandleOperations : object {
public void AdviseFileAccessPattern(int fd, FileAccessPattern pattern, long offset, long len)
public void AdviseFileAccessPattern(int fd, FileAccessPattern pattern)
public void AdviseFileAccessPattern(FileStream file, FileAccessPattern pattern, long offset, long len)
public void AdviseFileAccessPattern(FileStream file, FileAccessPattern pattern)
public void AdviseFileAccessPattern(UnixStream stream, FileAccessPattern pattern, long offset, long len)
public void AdviseFileAccessPattern(UnixStream stream, FileAccessPattern pattern)
}
public Mono.Unix.FileSpecialAttributes : Enum {
public int value__
public FileSpecialAttributes SetUserId
public FileSpecialAttributes SetGroupId
public FileSpecialAttributes Sticky
}
public Mono.Unix.FileTypes : Enum {
public int value__
public FileTypes Directory
public FileTypes CharacterDevice
public FileTypes BlockDevice
public FileTypes RegularFile
public FileTypes Fifo
public FileTypes SymbolicLink
public FileTypes Socket
}
public Mono.Unix.Native.AccessModes : Enum {
public int value__
public AccessModes R_OK
public AccessModes W_OK
public AccessModes X_OK
public AccessModes F_OK
}
public Mono.Unix.Native.CdeclFunction : object {
private string library
private string method
private Type returnType
private AssemblyName assemblyName
private AssemblyBuilder assemblyBuilder
private ModuleBuilder moduleBuilder
private Hashtable overloads
public void .ctor(string library, string method)
public void .ctor(string library, string method, Type returnType)
public object Invoke(Object[] parameters)
private MethodInfo CreateMethod(Type[] parameterTypes)
private TypeBuilder CreateType(string typeName)
private Type GetMarshalType(Type t)
private string GetTypeName(Type[] parameterTypes)
private Type[] GetParameterTypes(Object[] parameters)
}
public Mono.Unix.Native.ConfstrName : Enum {
public int value__
public ConfstrName _CS_PATH
public ConfstrName _CS_V6_WIDTH_RESTRICTED_ENVS
public ConfstrName _CS_GNU_LIBC_VERSION
public ConfstrName _CS_GNU_LIBPTHREAD_VERSION
public ConfstrName _CS_LFS_CFLAGS
public ConfstrName _CS_LFS_LDFLAGS
public ConfstrName _CS_LFS_LIBS
public ConfstrName _CS_LFS_LINTFLAGS
public ConfstrName _CS_LFS64_CFLAGS
public ConfstrName _CS_LFS64_LDFLAGS
public ConfstrName _CS_LFS64_LIBS
public ConfstrName _CS_LFS64_LINTFLAGS
public ConfstrName _CS_XBS5_ILP32_OFF32_CFLAGS
public ConfstrName _CS_XBS5_ILP32_OFF32_LDFLAGS
public ConfstrName _CS_XBS5_ILP32_OFF32_LIBS
public ConfstrName _CS_XBS5_ILP32_OFF32_LINTFLAGS
public ConfstrName _CS_XBS5_ILP32_OFFBIG_CFLAGS
public ConfstrName _CS_XBS5_ILP32_OFFBIG_LDFLAGS
public ConfstrName _CS_XBS5_ILP32_OFFBIG_LIBS
public ConfstrName _CS_XBS5_ILP32_OFFBIG_LINTFLAGS
public ConfstrName _CS_XBS5_LP64_OFF64_CFLAGS
public ConfstrName _CS_XBS5_LP64_OFF64_LDFLAGS
public ConfstrName _CS_XBS5_LP64_OFF64_LIBS
public ConfstrName _CS_XBS5_LP64_OFF64_LINTFLAGS
public ConfstrName _CS_XBS5_LPBIG_OFFBIG_CFLAGS
public ConfstrName _CS_XBS5_LPBIG_OFFBIG_LDFLAGS
public ConfstrName _CS_XBS5_LPBIG_OFFBIG_LIBS
public ConfstrName _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
public ConfstrName _CS_POSIX_V6_ILP32_OFF32_CFLAGS
public ConfstrName _CS_POSIX_V6_ILP32_OFF32_LDFLAGS
public ConfstrName _CS_POSIX_V6_ILP32_OFF32_LIBS
public ConfstrName _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
public ConfstrName _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
public ConfstrName _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
public ConfstrName _CS_POSIX_V6_ILP32_OFFBIG_LIBS
public ConfstrName _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
public ConfstrName _CS_POSIX_V6_LP64_OFF64_CFLAGS
public ConfstrName _CS_POSIX_V6_LP64_OFF64_LDFLAGS
public ConfstrName _CS_POSIX_V6_LP64_OFF64_LIBS
public ConfstrName _CS_POSIX_V6_LP64_OFF64_LINTFLAGS
public ConfstrName _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
public ConfstrName _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
public ConfstrName _CS_POSIX_V6_LPBIG_OFFBIG_LIBS
public ConfstrName _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
}
public Mono.Unix.Native.DirectoryNotifyFlags : Enum {
public int value__
public DirectoryNotifyFlags DN_ACCESS
public DirectoryNotifyFlags DN_MODIFY
public DirectoryNotifyFlags DN_CREATE
public DirectoryNotifyFlags DN_DELETE
public DirectoryNotifyFlags DN_RENAME
public DirectoryNotifyFlags DN_ATTRIB
public DirectoryNotifyFlags DN_MULTISHOT
}
public Mono.Unix.Native.Dirent : object {
public ulong d_ino
public long d_off
public ushort d_reclen
public byte d_type
public string d_name
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Dirent value)
public string ToString()
public bool op_Equality(Dirent lhs, Dirent rhs)
public bool op_Inequality(Dirent lhs, Dirent rhs)
}
public Mono.Unix.Native.Errno : Enum {
public int value__
public Errno EPERM
public Errno ENOENT
public Errno ESRCH
public Errno EINTR
public Errno EIO
public Errno ENXIO
public Errno E2BIG
public Errno ENOEXEC
public Errno EBADF
public Errno ECHILD
public Errno EAGAIN
public Errno ENOMEM
public Errno EACCES
public Errno EFAULT
public Errno ENOTBLK
public Errno EBUSY
public Errno EEXIST
public Errno EXDEV
public Errno ENODEV
public Errno ENOTDIR
public Errno EISDIR
public Errno EINVAL
public Errno ENFILE
public Errno EMFILE
public Errno ENOTTY
public Errno ETXTBSY
public Errno EFBIG
public Errno ENOSPC
public Errno ESPIPE
public Errno EROFS
public Errno EMLINK
public Errno EPIPE
public Errno EDOM
public Errno ERANGE
public Errno EDEADLK
public Errno ENAMETOOLONG
public Errno ENOLCK
public Errno ENOSYS
public Errno ENOTEMPTY
public Errno ELOOP
public Errno EWOULDBLOCK
public Errno ENOMSG
public Errno EIDRM
public Errno ECHRNG
public Errno EL2NSYNC
public Errno EL3HLT
public Errno EL3RST
public Errno ELNRNG
public Errno EUNATCH
public Errno ENOCSI
public Errno EL2HLT
public Errno EBADE
public Errno EBADR
public Errno EXFULL
public Errno ENOANO
public Errno EBADRQC
public Errno EBADSLT
public Errno EDEADLOCK
public Errno EBFONT
public Errno ENOSTR
public Errno ENODATA
public Errno ETIME
public Errno ENOSR
public Errno ENONET
public Errno ENOPKG
public Errno EREMOTE
public Errno ENOLINK
public Errno EADV
public Errno ESRMNT
public Errno ECOMM
public Errno EPROTO
public Errno EMULTIHOP
public Errno EDOTDOT
public Errno EBADMSG
public Errno EOVERFLOW
public Errno ENOTUNIQ
public Errno EBADFD
public Errno EREMCHG
public Errno ELIBACC
public Errno ELIBBAD
public Errno ELIBSCN
public Errno ELIBMAX
public Errno ELIBEXEC
public Errno EILSEQ
public Errno ERESTART
public Errno ESTRPIPE
public Errno EUSERS
public Errno ENOTSOCK
public Errno EDESTADDRREQ
public Errno EMSGSIZE
public Errno EPROTOTYPE
public Errno ENOPROTOOPT
public Errno EPROTONOSUPPORT
public Errno ESOCKTNOSUPPORT
public Errno EOPNOTSUPP
public Errno EPFNOSUPPORT
public Errno EAFNOSUPPORT
public Errno EADDRINUSE
public Errno EADDRNOTAVAIL
public Errno ENETDOWN
public Errno ENETUNREACH
public Errno ENETRESET
public Errno ECONNABORTED
public Errno ECONNRESET
public Errno ENOBUFS
public Errno EISCONN
public Errno ENOTCONN
public Errno ESHUTDOWN
public Errno ETOOMANYREFS
public Errno ETIMEDOUT
public Errno ECONNREFUSED
public Errno EHOSTDOWN
public Errno EHOSTUNREACH
public Errno EALREADY
public Errno EINPROGRESS
public Errno ESTALE
public Errno EUCLEAN
public Errno ENOTNAM
public Errno ENAVAIL
public Errno EISNAM
public Errno EREMOTEIO
public Errno EDQUOT
public Errno ENOMEDIUM
public Errno EMEDIUMTYPE
}
public Mono.Unix.Native.FcntlCommand : Enum {
public int value__
public FcntlCommand F_DUPFD
public FcntlCommand F_GETFD
public FcntlCommand F_SETFD
public FcntlCommand F_GETFL
public FcntlCommand F_SETFL
public FcntlCommand F_GETLK
public FcntlCommand F_SETLK
public FcntlCommand F_SETLKW
public FcntlCommand F_SETOWN
public FcntlCommand F_GETOWN
public FcntlCommand F_SETSIG
public FcntlCommand F_GETSIG
public FcntlCommand F_SETLEASE
public FcntlCommand F_GETLEASE
public FcntlCommand F_NOTIFY
}
internal Mono.Unix.Native.FileNameMarshaler : object {
private FileNameMarshaler Instance
public ICustomMarshaler GetInstance(string s)
public void CleanUpManagedData(object o)
public void CleanUpNativeData(IntPtr pNativeData)
public int GetNativeDataSize()
public IntPtr MarshalManagedToNative(object obj)
public object MarshalNativeToManaged(IntPtr pNativeData)
}
public Mono.Unix.Native.FilePermissions : Enum {
public UInt32 value__
public FilePermissions S_ISUID
public FilePermissions S_ISGID
public FilePermissions S_ISVTX
public FilePermissions S_IRUSR
public FilePermissions S_IWUSR
public FilePermissions S_IXUSR
public FilePermissions S_IRGRP
public FilePermissions S_IWGRP
public FilePermissions S_IXGRP
public FilePermissions S_IROTH
public FilePermissions S_IWOTH
public FilePermissions S_IXOTH
public FilePermissions S_IRWXG
public FilePermissions S_IRWXU
public FilePermissions S_IRWXO
public FilePermissions ACCESSPERMS
public FilePermissions ALLPERMS
public FilePermissions DEFFILEMODE
public FilePermissions S_IFMT
public FilePermissions S_IFDIR
public FilePermissions S_IFCHR
public FilePermissions S_IFBLK
public FilePermissions S_IFREG
public FilePermissions S_IFIFO
public FilePermissions S_IFLNK
public FilePermissions S_IFSOCK
}
public Mono.Unix.Native.FilePosition : MarshalByRefObject {
private int FilePositionDumpSize
private HandleRef pos
internal HandleRef Handle
internal HandleRef get_Handle()
public void Dispose()
private void Cleanup()
public string ToString()
private string GetDump()
public bool Equals(object obj)
public bool Equals(FilePosition value)
public int GetHashCode()
protected void Finalize()
public bool op_Equality(FilePosition lhs, FilePosition rhs)
public bool op_Inequality(FilePosition lhs, FilePosition rhs)
}
public Mono.Unix.Native.Flock : ValueType {
public LockType l_type
public SeekFlags l_whence
public long l_start
public long l_len
public int l_pid
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Flock value)
public bool op_Equality(Flock lhs, Flock rhs)
public bool op_Inequality(Flock lhs, Flock rhs)
}
public Mono.Unix.Native.Fstab : object {
public string fs_spec
public string fs_file
public string fs_vfstype
public string fs_mntops
public string fs_type
public int fs_freq
public int fs_passno
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Fstab value)
public string ToString()
public bool op_Equality(Fstab lhs, Fstab rhs)
public bool op_Inequality(Fstab lhs, Fstab rhs)
}
public Mono.Unix.Native.Group : object {
public string gr_name
public string gr_passwd
public UInt32 gr_gid
public String[] gr_mem
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Group value)
public string ToString()
private void GetMembers(StringBuilder sb, String[] members)
public bool op_Equality(Group lhs, Group rhs)
public bool op_Inequality(Group lhs, Group rhs)
}
public Mono.Unix.Native.LockfCommand : Enum {
public int value__
public LockfCommand F_ULOCK
public LockfCommand F_LOCK
public LockfCommand F_TLOCK
public LockfCommand F_TEST
}
public Mono.Unix.Native.LockType : Enum {
public short value__
public LockType F_RDLCK
public LockType F_WRLCK
public LockType F_UNLCK
}
public Mono.Unix.Native.MlockallFlags : Enum {
public int value__
public MlockallFlags MCL_CURRENT
public MlockallFlags MCL_FUTURE
}
public Mono.Unix.Native.MmapFlags : Enum {
public int value__
public MmapFlags MAP_SHARED
public MmapFlags MAP_PRIVATE
public MmapFlags MAP_TYPE
public MmapFlags MAP_FIXED
public MmapFlags MAP_FILE
public MmapFlags MAP_ANONYMOUS
public MmapFlags MAP_ANON
public MmapFlags MAP_GROWSDOWN
public MmapFlags MAP_DENYWRITE
public MmapFlags MAP_EXECUTABLE
public MmapFlags MAP_LOCKED
public MmapFlags MAP_NORESERVE
public MmapFlags MAP_POPULATE
public MmapFlags MAP_NONBLOCK
}
public Mono.Unix.Native.MmapProts : Enum {
public int value__
public MmapProts PROT_READ
public MmapProts PROT_WRITE
public MmapProts PROT_EXEC
public MmapProts PROT_NONE
public MmapProts PROT_GROWSDOWN
public MmapProts PROT_GROWSUP
}
public Mono.Unix.Native.MountFlags : Enum {
public ulong value__
public MountFlags ST_RDONLY
public MountFlags ST_NOSUID
public MountFlags ST_NODEV
public MountFlags ST_NOEXEC
public MountFlags ST_SYNCHRONOUS
public MountFlags ST_REMOUNT
public MountFlags ST_MANDLOCK
public MountFlags ST_WRITE
public MountFlags ST_APPEND
public MountFlags ST_IMMUTABLE
public MountFlags ST_NOATIME
public MountFlags ST_NODIRATIME
public MountFlags ST_BIND
}
public Mono.Unix.Native.MremapFlags : Enum {
public ulong value__
public MremapFlags MREMAP_MAYMOVE
}
public Mono.Unix.Native.MsyncFlags : Enum {
public int value__
public MsyncFlags MS_ASYNC
public MsyncFlags MS_SYNC
public MsyncFlags MS_INVALIDATE
}
public Mono.Unix.Native.NativeConvert : object {
private string LIB
public DateTime LocalUnixEpoch
public TimeSpan LocalUtcOffset
private String[][] fopen_modes
private int FromRealTimeSignum(int offset, Int32& rval)
public int FromRealTimeSignum(RealTimeSignum sig)
public RealTimeSignum ToRealTimeSignum(int offset)
public FilePermissions FromOctalPermissionString(string value)
public string ToOctalPermissionString(FilePermissions value)
public FilePermissions FromUnixPermissionString(string value)
private FilePermissions GetUnixPermissionDevice(char value)
private FilePermissions GetUnixPermissionGroup(char read, FilePermissions readb, char write, FilePermissions writeb, char exec, FilePermissions execb, char xboth, char xbitonly, FilePermissions xbit)
public string ToUnixPermissionString(FilePermissions value)
private void SetUnixPermissionGroup(FilePermissions value, Char[] access, int index, FilePermissions read, FilePermissions write, FilePermissions exec, char both, char setonly, FilePermissions setxbit)
private char GetSymbolicMode(FilePermissions value, FilePermissions xbit, char both, char setonly, FilePermissions setxbit)
public DateTime ToDateTime(long time)
public long FromDateTime(DateTime time)
public DateTime FromTimeT(long time)
public long ToTimeT(DateTime time)
public OpenFlags ToOpenFlags(FileMode mode, FileAccess access)
public string ToFopenMode(FileAccess access)
public string ToFopenMode(FileMode mode)
public string ToFopenMode(FileMode mode, FileAccess access)
private int FromStatvfs(Statvfs& source, IntPtr destination)
public bool TryCopy(Statvfs& source, IntPtr destination)
private int ToStatvfs(IntPtr source, Statvfs& destination)
public bool TryCopy(IntPtr source, Statvfs& destination)
private void ThrowArgumentException(object value)
private int FromAccessModes(AccessModes value, Int32& rval)
public bool TryFromAccessModes(AccessModes value, Int32& rval)
public int FromAccessModes(AccessModes value)
private int ToAccessModes(int value, AccessModes& rval)
public bool TryToAccessModes(int value, AccessModes& rval)
public AccessModes ToAccessModes(int value)
private int FromConfstrName(ConfstrName value, Int32& rval)
public bool TryFromConfstrName(ConfstrName value, Int32& rval)
public int FromConfstrName(ConfstrName value)
private int ToConfstrName(int value, ConfstrName& rval)
public bool TryToConfstrName(int value, ConfstrName& rval)
public ConfstrName ToConfstrName(int value)
private int FromDirectoryNotifyFlags(DirectoryNotifyFlags value, Int32& rval)
public bool TryFromDirectoryNotifyFlags(DirectoryNotifyFlags value, Int32& rval)
public int FromDirectoryNotifyFlags(DirectoryNotifyFlags value)
private int ToDirectoryNotifyFlags(int value, DirectoryNotifyFlags& rval)
public bool TryToDirectoryNotifyFlags(int value, DirectoryNotifyFlags& rval)
public DirectoryNotifyFlags ToDirectoryNotifyFlags(int value)
private int FromErrno(Errno value, Int32& rval)
public bool TryFromErrno(Errno value, Int32& rval)
public int FromErrno(Errno value)
private int ToErrno(int value, Errno& rval)
public bool TryToErrno(int value, Errno& rval)
public Errno ToErrno(int value)
private int FromFcntlCommand(FcntlCommand value, Int32& rval)
public bool TryFromFcntlCommand(FcntlCommand value, Int32& rval)
public int FromFcntlCommand(FcntlCommand value)
private int ToFcntlCommand(int value, FcntlCommand& rval)
public bool TryToFcntlCommand(int value, FcntlCommand& rval)
public FcntlCommand ToFcntlCommand(int value)
private int FromFilePermissions(FilePermissions value, UInt32& rval)
public bool TryFromFilePermissions(FilePermissions value, UInt32& rval)
public UInt32 FromFilePermissions(FilePermissions value)
private int ToFilePermissions(UInt32 value, FilePermissions& rval)
public bool TryToFilePermissions(UInt32 value, FilePermissions& rval)
public FilePermissions ToFilePermissions(UInt32 value)
private int FromFlock(Flock& source, IntPtr destination)
public bool TryCopy(Flock& source, IntPtr destination)
private int ToFlock(IntPtr source, Flock& destination)
public bool TryCopy(IntPtr source, Flock& destination)
private int FromLockType(LockType value, Int16& rval)
public bool TryFromLockType(LockType value, Int16& rval)
public short FromLockType(LockType value)
private int ToLockType(short value, LockType& rval)
public bool TryToLockType(short value, LockType& rval)
public LockType ToLockType(short value)
private int FromLockfCommand(LockfCommand value, Int32& rval)
public bool TryFromLockfCommand(LockfCommand value, Int32& rval)
public int FromLockfCommand(LockfCommand value)
private int ToLockfCommand(int value, LockfCommand& rval)
public bool TryToLockfCommand(int value, LockfCommand& rval)
public LockfCommand ToLockfCommand(int value)
private int FromMlockallFlags(MlockallFlags value, Int32& rval)
public bool TryFromMlockallFlags(MlockallFlags value, Int32& rval)
public int FromMlockallFlags(MlockallFlags value)
private int ToMlockallFlags(int value, MlockallFlags& rval)
public bool TryToMlockallFlags(int value, MlockallFlags& rval)
public MlockallFlags ToMlockallFlags(int value)
private int FromMmapFlags(MmapFlags value, Int32& rval)
public bool TryFromMmapFlags(MmapFlags value, Int32& rval)
public int FromMmapFlags(MmapFlags value)
private int ToMmapFlags(int value, MmapFlags& rval)
public bool TryToMmapFlags(int value, MmapFlags& rval)
public MmapFlags ToMmapFlags(int value)
private int FromMmapProts(MmapProts value, Int32& rval)
public bool TryFromMmapProts(MmapProts value, Int32& rval)
public int FromMmapProts(MmapProts value)
private int ToMmapProts(int value, MmapProts& rval)
public bool TryToMmapProts(int value, MmapProts& rval)
public MmapProts ToMmapProts(int value)
private int FromMountFlags(MountFlags value, UInt64& rval)
public bool TryFromMountFlags(MountFlags value, UInt64& rval)
public ulong FromMountFlags(MountFlags value)
private int ToMountFlags(ulong value, MountFlags& rval)
public bool TryToMountFlags(ulong value, MountFlags& rval)
public MountFlags ToMountFlags(ulong value)
private int FromMremapFlags(MremapFlags value, UInt64& rval)
public bool TryFromMremapFlags(MremapFlags value, UInt64& rval)
public ulong FromMremapFlags(MremapFlags value)
private int ToMremapFlags(ulong value, MremapFlags& rval)
public bool TryToMremapFlags(ulong value, MremapFlags& rval)
public MremapFlags ToMremapFlags(ulong value)
private int FromMsyncFlags(MsyncFlags value, Int32& rval)
public bool TryFromMsyncFlags(MsyncFlags value, Int32& rval)
public int FromMsyncFlags(MsyncFlags value)
private int ToMsyncFlags(int value, MsyncFlags& rval)
public bool TryToMsyncFlags(int value, MsyncFlags& rval)
public MsyncFlags ToMsyncFlags(int value)
private int FromOpenFlags(OpenFlags value, Int32& rval)
public bool TryFromOpenFlags(OpenFlags value, Int32& rval)
public int FromOpenFlags(OpenFlags value)
private int ToOpenFlags(int value, OpenFlags& rval)
public bool TryToOpenFlags(int value, OpenFlags& rval)
public OpenFlags ToOpenFlags(int value)
private int FromPathconfName(PathconfName value, Int32& rval)
public bool TryFromPathconfName(PathconfName value, Int32& rval)
public int FromPathconfName(PathconfName value)
private int ToPathconfName(int value, PathconfName& rval)
public bool TryToPathconfName(int value, PathconfName& rval)
public PathconfName ToPathconfName(int value)
private int FromPollEvents(PollEvents value, Int16& rval)
public bool TryFromPollEvents(PollEvents value, Int16& rval)
public short FromPollEvents(PollEvents value)
private int ToPollEvents(short value, PollEvents& rval)
public bool TryToPollEvents(short value, PollEvents& rval)
public PollEvents ToPollEvents(short value)
private int FromPollfd(Pollfd& source, IntPtr destination)
public bool TryCopy(Pollfd& source, IntPtr destination)
private int ToPollfd(IntPtr source, Pollfd& destination)
public bool TryCopy(IntPtr source, Pollfd& destination)
private int FromPosixFadviseAdvice(PosixFadviseAdvice value, Int32& rval)
public bool TryFromPosixFadviseAdvice(PosixFadviseAdvice value, Int32& rval)
public int FromPosixFadviseAdvice(PosixFadviseAdvice value)
private int ToPosixFadviseAdvice(int value, PosixFadviseAdvice& rval)
public bool TryToPosixFadviseAdvice(int value, PosixFadviseAdvice& rval)
public PosixFadviseAdvice ToPosixFadviseAdvice(int value)
private int FromPosixMadviseAdvice(PosixMadviseAdvice value, Int32& rval)
public bool TryFromPosixMadviseAdvice(PosixMadviseAdvice value, Int32& rval)
public int FromPosixMadviseAdvice(PosixMadviseAdvice value)
private int ToPosixMadviseAdvice(int value, PosixMadviseAdvice& rval)
public bool TryToPosixMadviseAdvice(int value, PosixMadviseAdvice& rval)
public PosixMadviseAdvice ToPosixMadviseAdvice(int value)
private int FromSeekFlags(SeekFlags value, Int16& rval)
public bool TryFromSeekFlags(SeekFlags value, Int16& rval)
public short FromSeekFlags(SeekFlags value)
private int ToSeekFlags(short value, SeekFlags& rval)
public bool TryToSeekFlags(short value, SeekFlags& rval)
public SeekFlags ToSeekFlags(short value)
private int FromSignum(Signum value, Int32& rval)
public bool TryFromSignum(Signum value, Int32& rval)
public int FromSignum(Signum value)
private int ToSignum(int value, Signum& rval)
public bool TryToSignum(int value, Signum& rval)
public Signum ToSignum(int value)
private int FromStat(Stat& source, IntPtr destination)
public bool TryCopy(Stat& source, IntPtr destination)
private int ToStat(IntPtr source, Stat& destination)
public bool TryCopy(IntPtr source, Stat& destination)
private int FromSysconfName(SysconfName value, Int32& rval)
public bool TryFromSysconfName(SysconfName value, Int32& rval)
public int FromSysconfName(SysconfName value)
private int ToSysconfName(int value, SysconfName& rval)
public bool TryToSysconfName(int value, SysconfName& rval)
public SysconfName ToSysconfName(int value)
private int FromSyslogFacility(SyslogFacility value, Int32& rval)
public bool TryFromSyslogFacility(SyslogFacility value, Int32& rval)
public int FromSyslogFacility(SyslogFacility value)
private int ToSyslogFacility(int value, SyslogFacility& rval)
public bool TryToSyslogFacility(int value, SyslogFacility& rval)
public SyslogFacility ToSyslogFacility(int value)
private int FromSyslogLevel(SyslogLevel value, Int32& rval)
public bool TryFromSyslogLevel(SyslogLevel value, Int32& rval)
public int FromSyslogLevel(SyslogLevel value)
private int ToSyslogLevel(int value, SyslogLevel& rval)
public bool TryToSyslogLevel(int value, SyslogLevel& rval)
public SyslogLevel ToSyslogLevel(int value)
private int FromSyslogOptions(SyslogOptions value, Int32& rval)
public bool TryFromSyslogOptions(SyslogOptions value, Int32& rval)
public int FromSyslogOptions(SyslogOptions value)
private int ToSyslogOptions(int value, SyslogOptions& rval)
public bool TryToSyslogOptions(int value, SyslogOptions& rval)
public SyslogOptions ToSyslogOptions(int value)
private int FromTimespec(Timespec& source, IntPtr destination)
public bool TryCopy(Timespec& source, IntPtr destination)
private int ToTimespec(IntPtr source, Timespec& destination)
public bool TryCopy(IntPtr source, Timespec& destination)
private int FromTimeval(Timeval& source, IntPtr destination)
public bool TryCopy(Timeval& source, IntPtr destination)
private int ToTimeval(IntPtr source, Timeval& destination)
public bool TryCopy(IntPtr source, Timeval& destination)
private int FromTimezone(Timezone& source, IntPtr destination)
public bool TryCopy(Timezone& source, IntPtr destination)
private int ToTimezone(IntPtr source, Timezone& destination)
public bool TryCopy(IntPtr source, Timezone& destination)
private int FromUtimbuf(Utimbuf& source, IntPtr destination)
public bool TryCopy(Utimbuf& source, IntPtr destination)
private int ToUtimbuf(IntPtr source, Utimbuf& destination)
public bool TryCopy(IntPtr source, Utimbuf& destination)
private int FromWaitOptions(WaitOptions value, Int32& rval)
public bool TryFromWaitOptions(WaitOptions value, Int32& rval)
public int FromWaitOptions(WaitOptions value)
private int ToWaitOptions(int value, WaitOptions& rval)
public bool TryToWaitOptions(int value, WaitOptions& rval)
public WaitOptions ToWaitOptions(int value)
private int FromXattrFlags(XattrFlags value, Int32& rval)
public bool TryFromXattrFlags(XattrFlags value, Int32& rval)
public int FromXattrFlags(XattrFlags value)
private int ToXattrFlags(int value, XattrFlags& rval)
public bool TryToXattrFlags(int value, XattrFlags& rval)
public XattrFlags ToXattrFlags(int value)
}
public Mono.Unix.Native.OpenFlags : Enum {
public int value__
public OpenFlags O_RDONLY
public OpenFlags O_WRONLY
public OpenFlags O_RDWR
public OpenFlags O_CREAT
public OpenFlags O_EXCL
public OpenFlags O_NOCTTY
public OpenFlags O_TRUNC
public OpenFlags O_APPEND
public OpenFlags O_NONBLOCK
public OpenFlags O_SYNC
public OpenFlags O_NOFOLLOW
public OpenFlags O_DIRECTORY
public OpenFlags O_DIRECT
public OpenFlags O_ASYNC
public OpenFlags O_LARGEFILE
}
public Mono.Unix.Native.Passwd : object {
public string pw_name
public string pw_passwd
public UInt32 pw_uid
public UInt32 pw_gid
public string pw_gecos
public string pw_dir
public string pw_shell
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Passwd value)
public string ToString()
public bool op_Equality(Passwd lhs, Passwd rhs)
public bool op_Inequality(Passwd lhs, Passwd rhs)
}
public Mono.Unix.Native.PathconfName : Enum {
public int value__
public PathconfName _PC_LINK_MAX
public PathconfName _PC_MAX_CANON
public PathconfName _PC_MAX_INPUT
public PathconfName _PC_NAME_MAX
public PathconfName _PC_PATH_MAX
public PathconfName _PC_PIPE_BUF
public PathconfName _PC_CHOWN_RESTRICTED
public PathconfName _PC_NO_TRUNC
public PathconfName _PC_VDISABLE
public PathconfName _PC_SYNC_IO
public PathconfName _PC_ASYNC_IO
public PathconfName _PC_PRIO_IO
public PathconfName _PC_SOCK_MAXBUF
public PathconfName _PC_FILESIZEBITS
public PathconfName _PC_REC_INCR_XFER_SIZE
public PathconfName _PC_REC_MAX_XFER_SIZE
public PathconfName _PC_REC_MIN_XFER_SIZE
public PathconfName _PC_REC_XFER_ALIGN
public PathconfName _PC_ALLOC_SIZE_MIN
public PathconfName _PC_SYMLINK_MAX
public PathconfName _PC_2_SYMLINKS
}
public Mono.Unix.Native.PollEvents : Enum {
public short value__
public PollEvents POLLIN
public PollEvents POLLPRI
public PollEvents POLLOUT
public PollEvents POLLERR
public PollEvents POLLHUP
public PollEvents POLLNVAL
public PollEvents POLLRDNORM
public PollEvents POLLRDBAND
public PollEvents POLLWRNORM
public PollEvents POLLWRBAND
}
public Mono.Unix.Native.Pollfd : ValueType {
public int fd
public PollEvents events
public PollEvents revents
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Pollfd value)
public bool op_Equality(Pollfd lhs, Pollfd rhs)
public bool op_Inequality(Pollfd lhs, Pollfd rhs)
}
public Mono.Unix.Native.PosixFadviseAdvice : Enum {
public int value__
public PosixFadviseAdvice POSIX_FADV_NORMAL
public PosixFadviseAdvice POSIX_FADV_RANDOM
public PosixFadviseAdvice POSIX_FADV_SEQUENTIAL
public PosixFadviseAdvice POSIX_FADV_WILLNEED
public PosixFadviseAdvice POSIX_FADV_DONTNEED
public PosixFadviseAdvice POSIX_FADV_NOREUSE
}
public Mono.Unix.Native.PosixMadviseAdvice : Enum {
public int value__
public PosixMadviseAdvice POSIX_MADV_NORMAL
public PosixMadviseAdvice POSIX_MADV_RANDOM
public PosixMadviseAdvice POSIX_MADV_SEQUENTIAL
public PosixMadviseAdvice POSIX_MADV_WILLNEED
public PosixMadviseAdvice POSIX_MADV_DONTNEED
}
public Mono.Unix.Native.RealTimeSignum : ValueType {
private int rt_offset
private int MaxOffset
public RealTimeSignum MinValue
public RealTimeSignum MaxValue
public int Offset
public void .ctor(int offset)
public int get_Offset()
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(RealTimeSignum value)
public bool op_Equality(RealTimeSignum lhs, RealTimeSignum rhs)
public bool op_Inequality(RealTimeSignum lhs, RealTimeSignum rhs)
}
public Mono.Unix.Native.SeekFlags : Enum {
public short value__
public SeekFlags SEEK_SET
public SeekFlags SEEK_CUR
public SeekFlags SEEK_END
public SeekFlags L_SET
public SeekFlags L_INCR
public SeekFlags L_XTND
}
public Mono.Unix.Native.SignalAction : Enum {
public int value__
public SignalAction Default
public SignalAction Ignore
public SignalAction Error
}
public Mono.Unix.Native.SignalHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(int signal)
public IAsyncResult BeginInvoke(int signal, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.Unix.Native.Signum : Enum {
public int value__
public Signum SIGHUP
public Signum SIGINT
public Signum SIGQUIT
public Signum SIGILL
public Signum SIGTRAP
public Signum SIGABRT
public Signum SIGIOT
public Signum SIGBUS
public Signum SIGFPE
public Signum SIGKILL
public Signum SIGUSR1
public Signum SIGSEGV
public Signum SIGUSR2
public Signum SIGPIPE
public Signum SIGALRM
public Signum SIGTERM
public Signum SIGSTKFLT
public Signum SIGCLD
public Signum SIGCHLD
public Signum SIGCONT
public Signum SIGSTOP
public Signum SIGTSTP
public Signum SIGTTIN
public Signum SIGTTOU
public Signum SIGURG
public Signum SIGXCPU
public Signum SIGXFSZ
public Signum SIGVTALRM
public Signum SIGPROF
public Signum SIGWINCH
public Signum SIGPOLL
public Signum SIGIO
public Signum SIGPWR
public Signum SIGSYS
public Signum SIGUNUSED
}
public Mono.Unix.Native.Stat : ValueType {
public ulong st_dev
public ulong st_ino
public FilePermissions st_mode
private UInt32 _padding_
public ulong st_nlink
public UInt32 st_uid
public UInt32 st_gid
public ulong st_rdev
public long st_size
public long st_blksize
public long st_blocks
public long st_atime
public long st_mtime
public long st_ctime
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Stat value)
public bool op_Equality(Stat lhs, Stat rhs)
public bool op_Inequality(Stat lhs, Stat rhs)
}
public Mono.Unix.Native.Statvfs : ValueType {
public ulong f_bsize
public ulong f_frsize
public ulong f_blocks
public ulong f_bfree
public ulong f_bavail
public ulong f_files
public ulong f_ffree
public ulong f_favail
public ulong f_fsid
public MountFlags f_flag
public ulong f_namemax
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Statvfs value)
public bool op_Equality(Statvfs lhs, Statvfs rhs)
public bool op_Inequality(Statvfs lhs, Statvfs rhs)
}
public Mono.Unix.Native.Stdlib : object {
internal string LIBC
internal string MPH
private IntPtr _SIG_DFL
private IntPtr _SIG_ERR
private IntPtr _SIG_IGN
public SignalHandler SIG_DFL
public SignalHandler SIG_ERR
public SignalHandler SIG_IGN
private SignalHandler[] registered_signals
public int _IOFBF
public int _IOLBF
public int _IONBF
public int BUFSIZ
public int EOF
public int FOPEN_MAX
public int FILENAME_MAX
public int L_tmpnam
public IntPtr stderr
public IntPtr stdin
public IntPtr stdout
public int TMP_MAX
private object tmpnam_lock
public int EXIT_FAILURE
public int EXIT_SUCCESS
public int MB_CUR_MAX
public int RAND_MAX
private object strerror_lock
public Errno GetLastError()
private void SetLastError(int error)
protected void SetLastError(Errno error)
internal void InvokeSignalHandler(int signum, IntPtr handler)
private IntPtr GetDefaultSignal()
private IntPtr GetErrorSignal()
private IntPtr GetIgnoreSignal()
private void _ErrorHandler(int signum)
private void _DefaultHandler(int signum)
private void _IgnoreHandler(int signum)
private IntPtr sys_signal(int signum, SignalHandler handler)
private IntPtr sys_signal(int signum, IntPtr handler)
public SignalHandler signal(Signum signum, SignalHandler handler)
private SignalHandler TranslateHandler(IntPtr handler)
public int SetSignalAction(Signum signal, SignalAction action)
public int SetSignalAction(RealTimeSignum rts, SignalAction action)
private int SetSignalAction(int signum, SignalAction action)
private int sys_raise(int sig)
public int raise(Signum sig)
public int raise(RealTimeSignum rts)
private int GetFullyBuffered()
private int GetLineBuffered()
private int GetNonBuffered()
private int GetBufferSize()
internal IntPtr CreateFilePosition()
internal int DumpFilePosition(StringBuilder buf, HandleRef handle, int len)
private int GetEOF()
private int GetFilenameMax()
private int GetFopenMax()
private int GetTmpnamLength()
private IntPtr GetStandardInput()
private IntPtr GetStandardOutput()
private IntPtr GetStandardError()
private int GetTmpMax()
public int remove(string filename)
public int rename(string oldpath, string newpath)
public IntPtr tmpfile()
private IntPtr sys_tmpnam(StringBuilder s)
public string tmpnam(StringBuilder s)
public string tmpnam()
public int fclose(IntPtr stream)
public int fflush(IntPtr stream)
public IntPtr fopen(string path, string mode)
public IntPtr freopen(string path, string mode, IntPtr stream)
public int setbuf(IntPtr stream, IntPtr buf)
public int setbuf(IntPtr stream, Byte* buf)
public int setvbuf(IntPtr stream, IntPtr buf, int mode, ulong size)
public int setvbuf(IntPtr stream, Byte* buf, int mode, ulong size)
private int sys_fprintf(IntPtr stream, string format, string message)
public int fprintf(IntPtr stream, string message)
public int fprintf(IntPtr stream, string format, Object[] parameters)
private int sys_printf(string format, string message)
public int printf(string message)
public int printf(string format, Object[] parameters)
private int sys_snprintf(StringBuilder s, ulong n, string format, string message)
public int snprintf(StringBuilder s, ulong n, string message)
public int snprintf(StringBuilder s, string message)
public int snprintf(StringBuilder s, ulong n, string format, Object[] parameters)
public int snprintf(StringBuilder s, string format, Object[] parameters)
public int fgetc(IntPtr stream)
private IntPtr sys_fgets(StringBuilder sb, int size, IntPtr stream)
public StringBuilder fgets(StringBuilder sb, int size, IntPtr stream)
public StringBuilder fgets(StringBuilder sb, IntPtr stream)
public int fputc(int c, IntPtr stream)
public int fputs(string s, IntPtr stream)
public int getc(IntPtr stream)
public int getchar()
public int putc(int c, IntPtr stream)
public int putchar(int c)
public int puts(string s)
public int ungetc(int c, IntPtr stream)
public ulong fread(IntPtr ptr, ulong size, ulong nmemb, IntPtr stream)
public ulong fread(Void* ptr, ulong size, ulong nmemb, IntPtr stream)
private ulong sys_fread(Byte[] ptr, ulong size, ulong nmemb, IntPtr stream)
public ulong fread(Byte[] ptr, ulong size, ulong nmemb, IntPtr stream)
public ulong fread(Byte[] ptr, IntPtr stream)
public ulong fwrite(IntPtr ptr, ulong size, ulong nmemb, IntPtr stream)
public ulong fwrite(Void* ptr, ulong size, ulong nmemb, IntPtr stream)
private ulong sys_fwrite(Byte[] ptr, ulong size, ulong nmemb, IntPtr stream)
public ulong fwrite(Byte[] ptr, ulong size, ulong nmemb, IntPtr stream)
public ulong fwrite(Byte[] ptr, IntPtr stream)
private int sys_fgetpos(IntPtr stream, HandleRef pos)
public int fgetpos(IntPtr stream, FilePosition pos)
private int sys_fseek(IntPtr stream, long offset, int origin)
public int fseek(IntPtr stream, long offset, SeekFlags origin)
private int sys_fsetpos(IntPtr stream, HandleRef pos)
public int fsetpos(IntPtr stream, FilePosition pos)
public long ftell(IntPtr stream)
public int rewind(IntPtr stream)
public int clearerr(IntPtr stream)
public int feof(IntPtr stream)
public int ferror(IntPtr stream)
private int perror(string s, int err)
public int perror(string s)
private int GetExitFailure()
private int GetExitSuccess()
private int GetMbCurMax()
private int GetRandMax()
public int rand()
public void srand(UInt32 seed)
public IntPtr calloc(ulong nmemb, ulong size)
public void free(IntPtr ptr)
public IntPtr malloc(ulong size)
public IntPtr realloc(IntPtr ptr, ulong size)
public void abort()
public void exit(int status)
public void _Exit(int status)
private IntPtr sys_getenv(string name)
public string getenv(string name)
public int system(string string)
private IntPtr sys_strerror(int errnum)
public string strerror(Errno errnum)
public ulong strlen(IntPtr s)
}
public Mono.Unix.Native.Syscall : Stdlib {
internal string LIBC
internal object readdir_lock
internal object fstab_lock
internal object grp_lock
internal object pwd_lock
private object signal_lock
public int L_ctermid
public int L_cuserid
internal object getlogin_lock
public IntPtr MAP_FAILED
private object tty_lock
internal object usershell_lock
public int setxattr(string path, string name, Byte[] value, ulong size, XattrFlags flags)
public int setxattr(string path, string name, Byte[] value, ulong size)
public int setxattr(string path, string name, Byte[] value, XattrFlags flags)
public int setxattr(string path, string name, Byte[] value)
public int lsetxattr(string path, string name, Byte[] value, ulong size, XattrFlags flags)
public int lsetxattr(string path, string name, Byte[] value, ulong size)
public int lsetxattr(string path, string name, Byte[] value, XattrFlags flags)
public int lsetxattr(string path, string name, Byte[] value)
public int fsetxattr(int fd, string name, Byte[] value, ulong size, XattrFlags flags)
public int fsetxattr(int fd, string name, Byte[] value, ulong size)
public int fsetxattr(int fd, string name, Byte[] value, XattrFlags flags)
public int fsetxattr(int fd, string name, Byte[] value)
public long getxattr(string path, string name, Byte[] value, ulong size)
public long getxattr(string path, string name, Byte[] value)
public long getxattr(string path, string name, Byte[]& value)
public long lgetxattr(string path, string name, Byte[] value, ulong size)
public long lgetxattr(string path, string name, Byte[] value)
public long lgetxattr(string path, string name, Byte[]& value)
public long fgetxattr(int fd, string name, Byte[] value, ulong size)
public long fgetxattr(int fd, string name, Byte[] value)
public long fgetxattr(int fd, string name, Byte[]& value)
public long listxattr(string path, Byte[] list, ulong size)
public long listxattr(string path, Encoding encoding, String[]& values)
public long listxattr(string path, String[]& values)
private void GetValues(Byte[] list, Encoding encoding, String[]& values)
public long llistxattr(string path, Byte[] list, ulong size)
public long llistxattr(string path, Encoding encoding, String[]& values)
public long llistxattr(string path, String[]& values)
public long flistxattr(int fd, Byte[] list, ulong size)
public long flistxattr(int fd, Encoding encoding, String[]& values)
public long flistxattr(int fd, String[]& values)
public int removexattr(string path, string name)
public int lremovexattr(string path, string name)
public int fremovexattr(int fd, string name)
public IntPtr opendir(string name)
public int closedir(IntPtr dir)
public int seekdir(IntPtr dir, long offset)
public long telldir(IntPtr dir)
public int rewinddir(IntPtr dir)
private void CopyDirent(Dirent to, _Dirent& from)
private int sys_readdir(IntPtr dir, _Dirent& dentry)
public Dirent readdir(IntPtr dir)
private int sys_readdir_r(IntPtr dirp, _Dirent& entry, IntPtr& result)
public int readdir_r(IntPtr dirp, Dirent entry, IntPtr& result)
public int dirfd(IntPtr dir)
public int fcntl(int fd, FcntlCommand cmd)
public int fcntl(int fd, FcntlCommand cmd, long arg)
public int fcntl(int fd, FcntlCommand cmd, DirectoryNotifyFlags arg)
public int fcntl(int fd, FcntlCommand cmd, Flock& lock)
public int open(string pathname, OpenFlags flags)
public int open(string pathname, OpenFlags flags, FilePermissions mode)
public int creat(string pathname, FilePermissions mode)
public int posix_fadvise(int fd, long offset, long len, PosixFadviseAdvice advice)
public int posix_fallocate(int fd, long offset, ulong len)
private void CopyFstab(Fstab to, _Fstab& from)
private int sys_endfsent()
public int endfsent()
private int sys_getfsent(_Fstab& fs)
public Fstab getfsent()
private int sys_getfsfile(string mount_point, _Fstab& fs)
public Fstab getfsfile(string mount_point)
private int sys_getfsspec(string special_file, _Fstab& fs)
public Fstab getfsspec(string special_file)
private int sys_setfsent()
public int setfsent()
public int setgroups(ulong size, UInt32[] list)
public int setgroups(UInt32[] list)
private void CopyGroup(Group to, _Group& from)
private int sys_getgrnam(string name, _Group& group)
public Group getgrnam(string name)
private int sys_getgrgid(UInt32 uid, _Group& group)
public Group getgrgid(UInt32 uid)
private int sys_getgrnam_r(string name, _Group& grbuf, IntPtr& grbufp)
public int getgrnam_r(string name, Group grbuf, Group& grbufp)
private int sys_getgrgid_r(UInt32 uid, _Group& grbuf, IntPtr& grbufp)
public int getgrgid_r(UInt32 uid, Group grbuf, Group& grbufp)
private int sys_getgrent(_Group& grbuf)
public Group getgrent()
private int sys_setgrent()
public int setgrent()
private int sys_endgrent()
public int endgrent()
private int sys_fgetgrent(IntPtr stream, _Group& grbuf)
public Group fgetgrent(IntPtr stream)
private void CopyPasswd(Passwd to, _Passwd& from)
private int sys_getpwnam(string name, _Passwd& passwd)
public Passwd getpwnam(string name)
private int sys_getpwuid(UInt32 uid, _Passwd& passwd)
public Passwd getpwuid(UInt32 uid)
private int sys_getpwnam_r(string name, _Passwd& pwbuf, IntPtr& pwbufp)
public int getpwnam_r(string name, Passwd pwbuf, Passwd& pwbufp)
private int sys_getpwuid_r(UInt32 uid, _Passwd& pwbuf, IntPtr& pwbufp)
public int getpwuid_r(UInt32 uid, Passwd pwbuf, Passwd& pwbufp)
private int sys_getpwent(_Passwd& pwbuf)
public Passwd getpwent()
private int sys_setpwent()
public int setpwent()
private int sys_endpwent()
public int endpwent()
private int sys_fgetpwent(IntPtr stream, _Passwd& pwbuf)
public Passwd fgetpwent(IntPtr stream)
private int psignal(int sig, string s)
public int psignal(Signum sig, string s)
private int sys_kill(int pid, int sig)
public int kill(int pid, Signum sig)
private IntPtr sys_strsignal(int sig)
public string strsignal(Signum sig)
private int _L_ctermid()
private int _L_cuserid()
private IntPtr sys_cuserid(StringBuilder string)
public string cuserid(StringBuilder string)
public int mkstemp(StringBuilder template)
public int ttyslot()
public int setkey(string key)
private int sys_strerror_r(int errnum, StringBuilder buf, ulong n)
public int strerror_r(Errno errnum, StringBuilder buf, ulong n)
public int strerror_r(Errno errnum, StringBuilder buf)
public int posix_madvise(IntPtr addr, ulong len, PosixMadviseAdvice advice)
public IntPtr mmap(IntPtr start, ulong length, MmapProts prot, MmapFlags flags, int fd, long offset)
public int munmap(IntPtr start, ulong length)
public int mprotect(IntPtr start, ulong len, MmapProts prot)
public int msync(IntPtr start, ulong len, MsyncFlags flags)
public int mlock(IntPtr start, ulong len)
public int munlock(IntPtr start, ulong len)
private int sys_mlockall(int flags)
public int mlockall(MlockallFlags flags)
public int munlockall()
public IntPtr mremap(IntPtr old_address, ulong old_size, ulong new_size, MremapFlags flags)
public int mincore(IntPtr start, ulong length, Byte[] vec)
public int remap_file_pages(IntPtr start, ulong size, MmapProts prot, long pgoff, MmapFlags flags)
private int sys_poll(_pollfd[] ufds, UInt32 nfds, int timeout)
public int poll(Pollfd[] fds, UInt32 nfds, int timeout)
public int poll(Pollfd[] fds, int timeout)
public long sendfile(int out_fd, int in_fd, Int64& offset, ulong count)
public int stat(string file_name, Stat& buf)
public int fstat(int filedes, Stat& buf)
public int lstat(string file_name, Stat& buf)
private int sys_chmod(string path, UInt32 mode)
public int chmod(string path, FilePermissions mode)
private int sys_fchmod(int filedes, UInt32 mode)
public int fchmod(int filedes, FilePermissions mode)
private UInt32 sys_umask(UInt32 mask)
public FilePermissions umask(FilePermissions mask)
private int sys_mkdir(string oldpath, UInt32 mode)
public int mkdir(string oldpath, FilePermissions mode)
public int mknod(string pathname, FilePermissions mode, ulong dev)
private int sys_mkfifo(string pathname, UInt32 mode)
public int mkfifo(string pathname, FilePermissions mode)
public int statvfs(string path, Statvfs& buf)
public int fstatvfs(int fd, Statvfs& buf)
public int gettimeofday(Timeval& tv, Timezone& tz)
private int gettimeofday(Timeval& tv, IntPtr ignore)
public int gettimeofday(Timeval& tv)
private int gettimeofday(IntPtr ignore, Timezone& tz)
public int gettimeofday(Timezone& tz)
public int settimeofday(Timeval& tv, Timezone& tz)
private int settimeofday(Timeval& tv, IntPtr ignore)
public int settimeofday(Timeval& tv)
private int sys_utimes(string filename, Timeval[] tvp)
public int utimes(string filename, Timeval[] tvp)
private int sys_lutimes(string filename, Timeval[] tvp)
public int lutimes(string filename, Timeval[] tvp)
private int sys_futimes(int fd, Timeval[] tvp)
public int futimes(int fd, Timeval[] tvp)
private void CopyUtsname(Utsname& to, _Utsname& from)
private int sys_uname(_Utsname& buf)
public int uname(Utsname& buf)
public int wait(Int32& status)
private int waitpid(int pid, Int32& status, int options)
public int waitpid(int pid, Int32& status, WaitOptions options)
private int _WIFEXITED(int status)
public bool WIFEXITED(int status)
public int WEXITSTATUS(int status)
private int _WIFSIGNALED(int status)
public bool WIFSIGNALED(int status)
private int _WTERMSIG(int status)
public Signum WTERMSIG(int status)
private int _WIFSTOPPED(int status)
public bool WIFSTOPPED(int status)
private int _WSTOPSIG(int status)
public Signum WSTOPSIG(int status)
private int sys_openlog(IntPtr ident, int option, int facility)
public int openlog(IntPtr ident, SyslogOptions option, SyslogFacility defaultFacility)
private int sys_syslog(int priority, string message)
public int syslog(SyslogFacility facility, SyslogLevel level, string message)
public int syslog(SyslogLevel level, string message)
private string GetSyslogMessage(string message)
public int syslog(SyslogFacility facility, SyslogLevel level, string format, Object[] parameters)
public int syslog(SyslogLevel level, string format, Object[] parameters)
public int closelog()
private int sys_setlogmask(int mask)
public int setlogmask(SyslogLevel mask)
public int nanosleep(Timespec& req, Timespec& rem)
public int stime(Int64& t)
public long time(Int64& t)
private int sys_access(string pathname, int mode)
public int access(string pathname, AccessModes mode)
private long sys_lseek(int fd, long offset, int whence)
public long lseek(int fd, long offset, SeekFlags whence)
public int close(int fd)
public long read(int fd, IntPtr buf, ulong count)
public long read(int fd, Void* buf, ulong count)
public long write(int fd, IntPtr buf, ulong count)
public long write(int fd, Void* buf, ulong count)
public long pread(int fd, IntPtr buf, ulong count, long offset)
public long pread(int fd, Void* buf, ulong count, long offset)
public long pwrite(int fd, IntPtr buf, ulong count, long offset)
public long pwrite(int fd, Void* buf, ulong count, long offset)
public int pipe(Int32& reading, Int32& writing)
public int pipe(Int32[] filedes)
public UInt32 alarm(UInt32 seconds)
public UInt32 sleep(UInt32 seconds)
public UInt32 ualarm(UInt32 usecs, UInt32 interval)
public int pause()
public int chown(string path, UInt32 owner, UInt32 group)
public int fchown(int fd, UInt32 owner, UInt32 group)
public int lchown(string path, UInt32 owner, UInt32 group)
public int chdir(string path)
public int fchdir(int fd)
public IntPtr getcwd(StringBuilder buf, ulong size)
public StringBuilder getcwd(StringBuilder buf)
public int dup(int fd)
public int dup2(int fd, int fd2)
public int execve(string path, String[] argv, String[] envp)
public int fexecve(int fd, String[] argv, String[] envp)
public int execv(string path, String[] argv)
public int execvp(string path, String[] argv)
public int nice(int inc)
public int _exit(int status)
public long fpathconf(int filedes, PathconfName name, Errno defaultError)
public long fpathconf(int filedes, PathconfName name)
public long pathconf(string path, PathconfName name, Errno defaultError)
public long pathconf(string path, PathconfName name)
public long sysconf(SysconfName name, Errno defaultError)
public long sysconf(SysconfName name)
public ulong confstr(ConfstrName name, StringBuilder buf, ulong len)
public int getpid()
public int getppid()
public int setpgid(int pid, int pgid)
public int getpgid(int pid)
public int setpgrp()
public int getpgrp()
public int setsid()
public int getsid(int pid)
public UInt32 getuid()
public UInt32 geteuid()
public UInt32 getgid()
public UInt32 getegid()
public int getgroups(int size, UInt32[] list)
public int getgroups(UInt32[] list)
public int setuid(UInt32 uid)
public int setreuid(UInt32 ruid, UInt32 euid)
public int setregid(UInt32 rgid, UInt32 egid)
public int seteuid(UInt32 euid)
public int setegid(UInt32 uid)
public int setgid(UInt32 gid)
public int getresuid(UInt32& ruid, UInt32& euid, UInt32& suid)
public int getresgid(UInt32& rgid, UInt32& egid, UInt32& sgid)
public int setresuid(UInt32 ruid, UInt32 euid, UInt32 suid)
public int setresgid(UInt32 rgid, UInt32 egid, UInt32 sgid)
private IntPtr sys_ttyname(int fd)
public string ttyname(int fd)
public int ttyname_r(int fd, StringBuilder buf, ulong buflen)
public int ttyname_r(int fd, StringBuilder buf)
private int sys_isatty(int fd)
public bool isatty(int fd)
public int link(string oldpath, string newpath)
public int symlink(string oldpath, string newpath)
public int readlink(string path, StringBuilder buf, ulong bufsiz)
public int readlink(string path, StringBuilder buf)
public int unlink(string pathname)
public int rmdir(string pathname)
public int tcgetpgrp(int fd)
public int tcsetpgrp(int fd, int pgrp)
private IntPtr sys_getlogin()
public string getlogin()
public int getlogin_r(StringBuilder name, ulong bufsize)
public int getlogin_r(StringBuilder name)
public int setlogin(string name)
public int gethostname(StringBuilder name, ulong len)
public int gethostname(StringBuilder name)
public int sethostname(string name, ulong len)
public int sethostname(string name)
public long gethostid()
public int sethostid(long hostid)
public int getdomainname(StringBuilder name, ulong len)
public int getdomainname(StringBuilder name)
public int setdomainname(string name, ulong len)
public int setdomainname(string name)
public int vhangup()
public int revoke(string file)
public int acct(string filename)
private IntPtr sys_getusershell()
public string getusershell()
private int sys_setusershell()
public int setusershell()
private int sys_endusershell()
public int endusershell()
public int chroot(string path)
public int fsync(int fd)
public int fdatasync(int fd)
public int sync()
public int getpagesize()
public int truncate(string path, long length)
public int ftruncate(int fd, long length)
public int getdtablesize()
public int brk(IntPtr end_data_segment)
public IntPtr sbrk(IntPtr increment)
public int lockf(int fd, LockfCommand cmd, long len)
public string crypt(string key, string salt)
public int encrypt(Byte[] block, bool decode)
public int swab(IntPtr from, IntPtr to, long n)
public void swab(Void* from, Void* to, long n)
private int sys_utime(string filename, Utimbuf& buf, int use_buf)
public int utime(string filename, Utimbuf& buf)
public int utime(string filename)
}
public Mono.Unix.Native.SysconfName : Enum {
public int value__
public SysconfName _SC_ARG_MAX
public SysconfName _SC_CHILD_MAX
public SysconfName _SC_CLK_TCK
public SysconfName _SC_NGROUPS_MAX
public SysconfName _SC_OPEN_MAX
public SysconfName _SC_STREAM_MAX
public SysconfName _SC_TZNAME_MAX
public SysconfName _SC_JOB_CONTROL
public SysconfName _SC_SAVED_IDS
public SysconfName _SC_REALTIME_SIGNALS
public SysconfName _SC_PRIORITY_SCHEDULING
public SysconfName _SC_TIMERS
public SysconfName _SC_ASYNCHRONOUS_IO
public SysconfName _SC_PRIORITIZED_IO
public SysconfName _SC_SYNCHRONIZED_IO
public SysconfName _SC_FSYNC
public SysconfName _SC_MAPPED_FILES
public SysconfName _SC_MEMLOCK
public SysconfName _SC_MEMLOCK_RANGE
public SysconfName _SC_MEMORY_PROTECTION
public SysconfName _SC_MESSAGE_PASSING
public SysconfName _SC_SEMAPHORES
public SysconfName _SC_SHARED_MEMORY_OBJECTS
public SysconfName _SC_AIO_LISTIO_MAX
public SysconfName _SC_AIO_MAX
public SysconfName _SC_AIO_PRIO_DELTA_MAX
public SysconfName _SC_DELAYTIMER_MAX
public SysconfName _SC_MQ_OPEN_MAX
public SysconfName _SC_MQ_PRIO_MAX
public SysconfName _SC_VERSION
public SysconfName _SC_PAGESIZE
public SysconfName _SC_RTSIG_MAX
public SysconfName _SC_SEM_NSEMS_MAX
public SysconfName _SC_SEM_VALUE_MAX
public SysconfName _SC_SIGQUEUE_MAX
public SysconfName _SC_TIMER_MAX
public SysconfName _SC_BC_BASE_MAX
public SysconfName _SC_BC_DIM_MAX
public SysconfName _SC_BC_SCALE_MAX
public SysconfName _SC_BC_STRING_MAX
public SysconfName _SC_COLL_WEIGHTS_MAX
public SysconfName _SC_EQUIV_CLASS_MAX
public SysconfName _SC_EXPR_NEST_MAX
public SysconfName _SC_LINE_MAX
public SysconfName _SC_RE_DUP_MAX
public SysconfName _SC_CHARCLASS_NAME_MAX
public SysconfName _SC_2_VERSION
public SysconfName _SC_2_C_BIND
public SysconfName _SC_2_C_DEV
public SysconfName _SC_2_FORT_DEV
public SysconfName _SC_2_FORT_RUN
public SysconfName _SC_2_SW_DEV
public SysconfName _SC_2_LOCALEDEF
public SysconfName _SC_PII
public SysconfName _SC_PII_XTI
public SysconfName _SC_PII_SOCKET
public SysconfName _SC_PII_INTERNET
public SysconfName _SC_PII_OSI
public SysconfName _SC_POLL
public SysconfName _SC_SELECT
public SysconfName _SC_UIO_MAXIOV
public SysconfName _SC_IOV_MAX
public SysconfName _SC_PII_INTERNET_STREAM
public SysconfName _SC_PII_INTERNET_DGRAM
public SysconfName _SC_PII_OSI_COTS
public SysconfName _SC_PII_OSI_CLTS
public SysconfName _SC_PII_OSI_M
public SysconfName _SC_T_IOV_MAX
public SysconfName _SC_THREADS
public SysconfName _SC_THREAD_SAFE_FUNCTIONS
public SysconfName _SC_GETGR_R_SIZE_MAX
public SysconfName _SC_GETPW_R_SIZE_MAX
public SysconfName _SC_LOGIN_NAME_MAX
public SysconfName _SC_TTY_NAME_MAX
public SysconfName _SC_THREAD_DESTRUCTOR_ITERATIONS
public SysconfName _SC_THREAD_KEYS_MAX
public SysconfName _SC_THREAD_STACK_MIN
public SysconfName _SC_THREAD_THREADS_MAX
public SysconfName _SC_THREAD_ATTR_STACKADDR
public SysconfName _SC_THREAD_ATTR_STACKSIZE
public SysconfName _SC_THREAD_PRIORITY_SCHEDULING
public SysconfName _SC_THREAD_PRIO_INHERIT
public SysconfName _SC_THREAD_PRIO_PROTECT
public SysconfName _SC_THREAD_PROCESS_SHARED
public SysconfName _SC_NPROCESSORS_CONF
public SysconfName _SC_NPROCESSORS_ONLN
public SysconfName _SC_PHYS_PAGES
public SysconfName _SC_AVPHYS_PAGES
public SysconfName _SC_ATEXIT_MAX
public SysconfName _SC_PASS_MAX
public SysconfName _SC_XOPEN_VERSION
public SysconfName _SC_XOPEN_XCU_VERSION
public SysconfName _SC_XOPEN_UNIX
public SysconfName _SC_XOPEN_CRYPT
public SysconfName _SC_XOPEN_ENH_I18N
public SysconfName _SC_XOPEN_SHM
public SysconfName _SC_2_CHAR_TERM
public SysconfName _SC_2_C_VERSION
public SysconfName _SC_2_UPE
public SysconfName _SC_XOPEN_XPG2
public SysconfName _SC_XOPEN_XPG3
public SysconfName _SC_XOPEN_XPG4
public SysconfName _SC_CHAR_BIT
public SysconfName _SC_CHAR_MAX
public SysconfName _SC_CHAR_MIN
public SysconfName _SC_INT_MAX
public SysconfName _SC_INT_MIN
public SysconfName _SC_LONG_BIT
public SysconfName _SC_WORD_BIT
public SysconfName _SC_MB_LEN_MAX
public SysconfName _SC_NZERO
public SysconfName _SC_SSIZE_MAX
public SysconfName _SC_SCHAR_MAX
public SysconfName _SC_SCHAR_MIN
public SysconfName _SC_SHRT_MAX
public SysconfName _SC_SHRT_MIN
public SysconfName _SC_UCHAR_MAX
public SysconfName _SC_UINT_MAX
public SysconfName _SC_ULONG_MAX
public SysconfName _SC_USHRT_MAX
public SysconfName _SC_NL_ARGMAX
public SysconfName _SC_NL_LANGMAX
public SysconfName _SC_NL_MSGMAX
public SysconfName _SC_NL_NMAX
public SysconfName _SC_NL_SETMAX
public SysconfName _SC_NL_TEXTMAX
public SysconfName _SC_XBS5_ILP32_OFF32
public SysconfName _SC_XBS5_ILP32_OFFBIG
public SysconfName _SC_XBS5_LP64_OFF64
public SysconfName _SC_XBS5_LPBIG_OFFBIG
public SysconfName _SC_XOPEN_LEGACY
public SysconfName _SC_XOPEN_REALTIME
public SysconfName _SC_XOPEN_REALTIME_THREADS
public SysconfName _SC_ADVISORY_INFO
public SysconfName _SC_BARRIERS
public SysconfName _SC_BASE
public SysconfName _SC_C_LANG_SUPPORT
public SysconfName _SC_C_LANG_SUPPORT_R
public SysconfName _SC_CLOCK_SELECTION
public SysconfName _SC_CPUTIME
public SysconfName _SC_THREAD_CPUTIME
public SysconfName _SC_DEVICE_IO
public SysconfName _SC_DEVICE_SPECIFIC
public SysconfName _SC_DEVICE_SPECIFIC_R
public SysconfName _SC_FD_MGMT
public SysconfName _SC_FIFO
public SysconfName _SC_PIPE
public SysconfName _SC_FILE_ATTRIBUTES
public SysconfName _SC_FILE_LOCKING
public SysconfName _SC_FILE_SYSTEM
public SysconfName _SC_MONOTONIC_CLOCK
public SysconfName _SC_MULTI_PROCESS
public SysconfName _SC_SINGLE_PROCESS
public SysconfName _SC_NETWORKING
public SysconfName _SC_READER_WRITER_LOCKS
public SysconfName _SC_SPIN_LOCKS
public SysconfName _SC_REGEXP
public SysconfName _SC_REGEX_VERSION
public SysconfName _SC_SHELL
public SysconfName _SC_SIGNALS
public SysconfName _SC_SPAWN
public SysconfName _SC_SPORADIC_SERVER
public SysconfName _SC_THREAD_SPORADIC_SERVER
public SysconfName _SC_SYSTEM_DATABASE
public SysconfName _SC_SYSTEM_DATABASE_R
public SysconfName _SC_TIMEOUTS
public SysconfName _SC_TYPED_MEMORY_OBJECTS
public SysconfName _SC_USER_GROUPS
public SysconfName _SC_USER_GROUPS_R
public SysconfName _SC_2_PBS
public SysconfName _SC_2_PBS_ACCOUNTING
public SysconfName _SC_2_PBS_LOCATE
public SysconfName _SC_2_PBS_MESSAGE
public SysconfName _SC_2_PBS_TRACK
public SysconfName _SC_SYMLOOP_MAX
public SysconfName _SC_STREAMS
public SysconfName _SC_2_PBS_CHECKPOINT
public SysconfName _SC_V6_ILP32_OFF32
public SysconfName _SC_V6_ILP32_OFFBIG
public SysconfName _SC_V6_LP64_OFF64
public SysconfName _SC_V6_LPBIG_OFFBIG
public SysconfName _SC_HOST_NAME_MAX
public SysconfName _SC_TRACE
public SysconfName _SC_TRACE_EVENT_FILTER
public SysconfName _SC_TRACE_INHERIT
public SysconfName _SC_TRACE_LOG
public SysconfName _SC_LEVEL1_ICACHE_SIZE
public SysconfName _SC_LEVEL1_ICACHE_ASSOC
public SysconfName _SC_LEVEL1_ICACHE_LINESIZE
public SysconfName _SC_LEVEL1_DCACHE_SIZE
public SysconfName _SC_LEVEL1_DCACHE_ASSOC
public SysconfName _SC_LEVEL1_DCACHE_LINESIZE
public SysconfName _SC_LEVEL2_CACHE_SIZE
public SysconfName _SC_LEVEL2_CACHE_ASSOC
public SysconfName _SC_LEVEL2_CACHE_LINESIZE
public SysconfName _SC_LEVEL3_CACHE_SIZE
public SysconfName _SC_LEVEL3_CACHE_ASSOC
public SysconfName _SC_LEVEL3_CACHE_LINESIZE
public SysconfName _SC_LEVEL4_CACHE_SIZE
public SysconfName _SC_LEVEL4_CACHE_ASSOC
public SysconfName _SC_LEVEL4_CACHE_LINESIZE
}
public Mono.Unix.Native.SyslogFacility : Enum {
public int value__
public SyslogFacility LOG_KERN
public SyslogFacility LOG_USER
public SyslogFacility LOG_MAIL
public SyslogFacility LOG_DAEMON
public SyslogFacility LOG_AUTH
public SyslogFacility LOG_SYSLOG
public SyslogFacility LOG_LPR
public SyslogFacility LOG_NEWS
public SyslogFacility LOG_UUCP
public SyslogFacility LOG_CRON
public SyslogFacility LOG_AUTHPRIV
public SyslogFacility LOG_FTP
public SyslogFacility LOG_LOCAL0
public SyslogFacility LOG_LOCAL1
public SyslogFacility LOG_LOCAL2
public SyslogFacility LOG_LOCAL3
public SyslogFacility LOG_LOCAL4
public SyslogFacility LOG_LOCAL5
public SyslogFacility LOG_LOCAL6
public SyslogFacility LOG_LOCAL7
}
public Mono.Unix.Native.SyslogLevel : Enum {
public int value__
public SyslogLevel LOG_EMERG
public SyslogLevel LOG_ALERT
public SyslogLevel LOG_CRIT
public SyslogLevel LOG_ERR
public SyslogLevel LOG_WARNING
public SyslogLevel LOG_NOTICE
public SyslogLevel LOG_INFO
public SyslogLevel LOG_DEBUG
}
public Mono.Unix.Native.SyslogOptions : Enum {
public int value__
public SyslogOptions LOG_PID
public SyslogOptions LOG_CONS
public SyslogOptions LOG_ODELAY
public SyslogOptions LOG_NDELAY
public SyslogOptions LOG_NOWAIT
public SyslogOptions LOG_PERROR
}
public Mono.Unix.Native.Timespec : ValueType {
public long tv_sec
public long tv_nsec
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Timespec value)
public bool op_Equality(Timespec lhs, Timespec rhs)
public bool op_Inequality(Timespec lhs, Timespec rhs)
}
public Mono.Unix.Native.Timeval : ValueType {
public long tv_sec
public long tv_usec
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Timeval value)
public bool op_Equality(Timeval lhs, Timeval rhs)
public bool op_Inequality(Timeval lhs, Timeval rhs)
}
public Mono.Unix.Native.Timezone : ValueType {
public int tz_minuteswest
private int tz_dsttime
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Timezone value)
public bool op_Equality(Timezone lhs, Timezone rhs)
public bool op_Inequality(Timezone lhs, Timezone rhs)
}
public Mono.Unix.Native.Utimbuf : ValueType {
public long actime
public long modtime
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Utimbuf value)
public bool op_Equality(Utimbuf lhs, Utimbuf rhs)
public bool op_Inequality(Utimbuf lhs, Utimbuf rhs)
}
public Mono.Unix.Native.Utsname : object {
public string sysname
public string nodename
public string release
public string version
public string machine
public string domainname
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(Utsname value)
public string ToString()
public bool op_Equality(Utsname lhs, Utsname rhs)
public bool op_Inequality(Utsname lhs, Utsname rhs)
}
public Mono.Unix.Native.WaitOptions : Enum {
public int value__
public WaitOptions WNOHANG
public WaitOptions WUNTRACED
}
public Mono.Unix.Native.XattrFlags : Enum {
public int value__
public XattrFlags XATTR_AUTO
public XattrFlags XATTR_CREATE
public XattrFlags XATTR_REPLACE
}
internal Mono.Unix.Native.XPrintfFunctions : object {
internal XPrintf printf
internal XPrintf fprintf
internal XPrintf snprintf
internal XPrintf syslog
}
public Mono.Unix.PeerCred : object {
private int so_peercred
private PeerCredData data
public int ProcessID
public int UserID
public int GroupID
public void .ctor(Socket sock)
public int get_ProcessID()
public int get_UserID()
public int get_GroupID()
}
public Mono.Unix.StdioFileStream : Stream {
public IntPtr InvalidFileStream
public IntPtr StandardInput
public IntPtr StandardOutput
public IntPtr StandardError
private bool canSeek
private bool canRead
private bool canWrite
private bool owner
private IntPtr file
public IntPtr Handle
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public void .ctor(IntPtr fileStream)
public void .ctor(IntPtr fileStream, bool ownsHandle)
public void .ctor(IntPtr fileStream, FileAccess access)
public void .ctor(IntPtr fileStream, FileAccess access, bool ownsHandle)
public void .ctor(string path)
public void .ctor(string path, string mode)
public void .ctor(string path, FileMode mode)
public void .ctor(string path, FileAccess access)
public void .ctor(string path, FileMode mode, FileAccess access)
private IntPtr Fopen(string path, string mode)
private void InitStream(IntPtr fileStream, bool ownsHandle)
private void InitCanReadWrite(FileAccess access)
private string ToFopenMode(string file, FileMode mode)
private string ToFopenMode(string file, FileAccess access)
private string ToFopenMode(string file, FileMode mode, FileAccess access)
private bool AssertFileMode(string file, FileMode mode)
private bool FileExists(string file)
private void AssertNotDisposed()
public IntPtr get_Handle()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public void SaveFilePosition(FilePosition pos)
public void RestoreFilePosition(FilePosition pos)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
private void AssertValidBuffer(Byte[] buffer, int offset, int count)
public void Rewind()
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
protected void Finalize()
public void Close()
}
public Mono.Unix.UnixClient : MarshalByRefObject {
private NetworkStream stream
private Socket client
private bool disposed
public Socket Client
public PeerCred PeerCredential
public LingerOption LingerState
public int ReceiveBufferSize
public int ReceiveTimeout
public int SendBufferSize
public int SendTimeout
public void .ctor(string path)
public void .ctor(UnixEndPoint ep)
internal void .ctor(Socket sock)
public Socket get_Client()
public void set_Client(Socket value)
public PeerCred get_PeerCredential()
public LingerOption get_LingerState()
public void set_LingerState(LingerOption value)
public int get_ReceiveBufferSize()
public void set_ReceiveBufferSize(int value)
public int get_ReceiveTimeout()
public void set_ReceiveTimeout(int value)
public int get_SendBufferSize()
public void set_SendBufferSize(int value)
public int get_SendTimeout()
public void set_SendTimeout(int value)
public void Close()
public void Connect(UnixEndPoint remoteEndPoint)
public void Connect(string path)
public void Dispose()
protected void Dispose(bool disposing)
public NetworkStream GetStream()
private void CheckDisposed()
protected void Finalize()
}
public Mono.Unix.UnixDirectoryInfo : UnixFileSystemInfo {
public string Name
public UnixDirectoryInfo Parent
public UnixDirectoryInfo Root
public void .ctor(string path)
internal void .ctor(string path, Stat stat)
public string get_Name()
public UnixDirectoryInfo get_Parent()
public UnixDirectoryInfo get_Root()
public void Create(FilePermissions mode)
public void Create(FileAccessPermissions mode)
public void Create()
public void Delete()
public void Delete(bool recursive)
public Dirent[] GetEntries()
private Dirent[] GetEntries(IntPtr dirp)
public Dirent[] GetEntries(Regex regex)
private Dirent[] GetEntries(IntPtr dirp, Regex regex)
public Dirent[] GetEntries(string regex)
public UnixFileSystemInfo[] GetFileSystemEntries()
private UnixFileSystemInfo[] GetFileSystemEntries(Dirent[] dentries)
public UnixFileSystemInfo[] GetFileSystemEntries(Regex regex)
public UnixFileSystemInfo[] GetFileSystemEntries(string regex)
public string GetCurrentDirectory()
public void SetCurrentDirectory(string path)
}
public Mono.Unix.UnixDriveInfo : object {
private Statvfs stat
private string fstype
private string mount_point
private string block_device
public long AvailableFreeSpace
public string DriveFormat
public UnixDriveType DriveType
public bool IsReady
public string Name
public UnixDirectoryInfo RootDirectory
public long TotalFreeSpace
public long TotalSize
public string VolumeLabel
public long MaximumFilenameLength
public void .ctor(string mountPoint)
private void .ctor(Fstab fstab)
private void FromFstab(Fstab fstab)
public UnixDriveInfo GetForSpecialFile(string specialFile)
public long get_AvailableFreeSpace()
public string get_DriveFormat()
public UnixDriveType get_DriveType()
public bool get_IsReady()
public string get_Name()
public UnixDirectoryInfo get_RootDirectory()
public long get_TotalFreeSpace()
public long get_TotalSize()
public string get_VolumeLabel()
public long get_MaximumFilenameLength()
public UnixDriveInfo[] GetDrives()
public string ToString()
private void Refresh()
private bool Refresh(bool throwException)
}
public Mono.Unix.UnixDriveType : Enum {
public int value__
public UnixDriveType Unknown
public UnixDriveType NoRootDirectory
public UnixDriveType Removable
public UnixDriveType Fixed
public UnixDriveType Network
public UnixDriveType CDRom
public UnixDriveType Ram
}
public Mono.Unix.UnixEncoding : Encoding {
public Encoding Instance
public char EscapeByte
private int InternalGetByteCount(Char[] chars, int index, int count, UInt32 leftOver, bool flush)
public int GetByteCount(Char[] chars, int index, int count)
public int GetByteCount(string s)
private int InternalGetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex, UInt32& leftOver, bool flush)
public int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex)
public int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex)
private int InternalGetCharCount(Byte[] bytes, int index, int count, UInt32 leftOverBits, UInt32 leftOverCount, bool throwOnInvalid, bool flush)
public int GetCharCount(Byte[] bytes, int index, int count)
private int InternalGetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, UInt32& leftOverBits, UInt32& leftOverCount, bool throwOnInvalid, bool flush)
private void CopyRaw(Byte[] raw, Int32& next_raw, Char[] chars, Int32& posn, int length)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetMaxByteCount(int charCount)
public int GetMaxCharCount(int byteCount)
public Decoder GetDecoder()
public Encoder GetEncoder()
public Byte[] GetPreamble()
public bool Equals(object value)
public int GetHashCode()
public Byte[] GetBytes(string s)
private string _(string arg)
}
public Mono.Unix.UnixEndPoint : EndPoint {
private string filename
public string Filename
public AddressFamily AddressFamily
public void .ctor(string filename)
public string get_Filename()
public void set_Filename(string value)
public AddressFamily get_AddressFamily()
public EndPoint Create(SocketAddress socketAddress)
public SocketAddress Serialize()
public string ToString()
public int GetHashCode()
public bool Equals(object o)
}
public Mono.Unix.UnixEnvironment : object {
public string CurrentDirectory
public string MachineName
public string UserName
public UnixGroupInfo RealGroup
public long RealGroupId
public UnixUserInfo RealUser
public long RealUserId
public UnixGroupInfo EffectiveGroup
public long EffectiveGroupId
public UnixUserInfo EffectiveUser
public long EffectiveUserId
public string Login
public string get_CurrentDirectory()
public void set_CurrentDirectory(string value)
public string get_MachineName()
public void set_MachineName(string value)
public string get_UserName()
public UnixGroupInfo get_RealGroup()
public long get_RealGroupId()
public UnixUserInfo get_RealUser()
public long get_RealUserId()
public UnixGroupInfo get_EffectiveGroup()
public void set_EffectiveGroup(UnixGroupInfo value)
public long get_EffectiveGroupId()
public void set_EffectiveGroupId(long value)
public UnixUserInfo get_EffectiveUser()
public void set_EffectiveUser(UnixUserInfo value)
public long get_EffectiveUserId()
public void set_EffectiveUserId(long value)
public string get_Login()
public long GetConfigurationValue(SysconfName name)
public string GetConfigurationString(ConfstrName name)
public void SetNiceValue(int inc)
public int CreateSession()
public void SetProcessGroup()
public int GetProcessGroup()
public UnixGroupInfo[] GetSupplementaryGroups()
private UInt32[] _GetSupplementaryGroupIds()
public void SetSupplementaryGroups(UnixGroupInfo[] groups)
public Int64[] GetSupplementaryGroupIds()
public void SetSupplementaryGroupIds(Int64[] list)
public int GetParentProcessId()
public UnixProcess GetParentProcess()
public String[] GetUserShells()
}
public Mono.Unix.UnixFileInfo : UnixFileSystemInfo {
public string Name
public string DirectoryName
public UnixDirectoryInfo Directory
public void .ctor(string path)
internal void .ctor(string path, Stat stat)
public string get_Name()
public string get_DirectoryName()
public UnixDirectoryInfo get_Directory()
public void Delete()
public UnixStream Create()
public UnixStream Create(FilePermissions mode)
public UnixStream Create(FileAccessPermissions mode)
public UnixStream Open(OpenFlags flags)
public UnixStream Open(OpenFlags flags, FilePermissions mode)
public UnixStream Open(FileMode mode)
public UnixStream Open(FileMode mode, FileAccess access)
public UnixStream Open(FileMode mode, FileAccess access, FilePermissions perms)
public UnixStream OpenRead()
public UnixStream OpenWrite()
}
public Mono.Unix.UnixFileSystemInfo : object {
internal FileSpecialAttributes AllSpecialAttributes
internal FileTypes AllFileTypes
private Stat stat
private string fullPath
private string originalPath
private bool valid
protected string FullPath
protected string OriginalPath
public string FullName
public string Name
public bool Exists
public long Device
public long Inode
public FilePermissions Protection
public FileTypes FileType
public FileAccessPermissions FileAccessPermissions
public FileSpecialAttributes FileSpecialAttributes
public long LinkCount
public UnixUserInfo OwnerUser
public long OwnerUserId
public UnixGroupInfo OwnerGroup
public long OwnerGroupId
public long DeviceType
public long Length
public long BlockSize
public long BlocksAllocated
public DateTime LastAccessTime
public DateTime LastAccessTimeUtc
public DateTime LastWriteTime
public DateTime LastWriteTimeUtc
public DateTime LastStatusChangeTime
public DateTime LastStatusChangeTimeUtc
public bool IsDirectory
public bool IsCharacterDevice
public bool IsBlockDevice
public bool IsRegularFile
public bool IsFifo
public bool IsSymbolicLink
public bool IsSocket
public bool IsSetUser
public bool IsSetGroup
public bool IsSticky
protected void .ctor(string path)
internal void .ctor(string path, Stat stat)
protected string get_FullPath()
protected void set_FullPath(string value)
protected string get_OriginalPath()
protected void set_OriginalPath(string value)
private void AssertValid()
public string get_FullName()
public string get_Name()
public bool get_Exists()
public long get_Device()
public long get_Inode()
public FilePermissions get_Protection()
public void set_Protection(FilePermissions value)
public FileTypes get_FileType()
public FileAccessPermissions get_FileAccessPermissions()
public void set_FileAccessPermissions(FileAccessPermissions value)
public FileSpecialAttributes get_FileSpecialAttributes()
public void set_FileSpecialAttributes(FileSpecialAttributes value)
public long get_LinkCount()
public UnixUserInfo get_OwnerUser()
public long get_OwnerUserId()
public UnixGroupInfo get_OwnerGroup()
public long get_OwnerGroupId()
public long get_DeviceType()
public long get_Length()
public long get_BlockSize()
public long get_BlocksAllocated()
public DateTime get_LastAccessTime()
public DateTime get_LastAccessTimeUtc()
public DateTime get_LastWriteTime()
public DateTime get_LastWriteTimeUtc()
public DateTime get_LastStatusChangeTime()
public DateTime get_LastStatusChangeTimeUtc()
public bool get_IsDirectory()
public bool get_IsCharacterDevice()
public bool get_IsBlockDevice()
public bool get_IsRegularFile()
public bool get_IsFifo()
public bool get_IsSymbolicLink()
public bool get_IsSocket()
public bool get_IsSetUser()
public bool get_IsSetGroup()
public bool get_IsSticky()
internal bool IsFileType(FilePermissions mode, FilePermissions type)
internal bool IsSet(FilePermissions mode, FilePermissions type)
public bool CanAccess(AccessModes mode)
public UnixFileSystemInfo CreateLink(string path)
public UnixSymbolicLinkInfo CreateSymbolicLink(string path)
public void Delete()
public long GetConfigurationValue(PathconfName name)
public void Refresh()
internal void Refresh(bool force)
protected bool GetFileStatus(string path, Stat& stat)
public void SetLength(long length)
public void SetOwner(long owner, long group)
public void SetOwner(string owner)
public void SetOwner(string owner, string group)
public void SetOwner(UnixUserInfo owner)
public void SetOwner(UnixUserInfo owner, UnixGroupInfo group)
public string ToString()
public Stat ToStat()
public UnixFileSystemInfo GetFileSystemEntry(string path)
}
public Mono.Unix.UnixGroupInfo : object {
private Group group
public string GroupName
public string Password
public long GroupId
public void .ctor(string group)
public void .ctor(long group)
public void .ctor(Group group)
private Group CopyGroup(Group group)
public string get_GroupName()
public string get_Password()
public long get_GroupId()
public UnixUserInfo[] GetMembers()
public String[] GetMemberNames()
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
public Group ToGroup()
public UnixGroupInfo[] GetLocalGroups()
}
public Mono.Unix.UnixIOException : IOException {
private int errno
public int NativeErrorCode
public Errno ErrorCode
public void .ctor(int errno)
public void .ctor(int errno, Exception inner)
public void .ctor(Errno errno)
public void .ctor(Errno errno, Exception inner)
public void .ctor(string message)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
public int get_NativeErrorCode()
public Errno get_ErrorCode()
private string GetMessage(Errno errno)
}
public Mono.Unix.UnixListener : MarshalByRefObject {
private bool disposed
private bool listening
private Socket server
private EndPoint savedEP
public EndPoint LocalEndpoint
protected Socket Server
public void .ctor(string path)
public void .ctor(UnixEndPoint localEndPoint)
private void Init(UnixEndPoint ep)
public EndPoint get_LocalEndpoint()
protected Socket get_Server()
public Socket AcceptSocket()
public UnixClient AcceptUnixClient()
protected void Finalize()
public bool Pending()
public void Start()
public void Start(int backlog)
public void Stop()
public void Dispose()
protected void Dispose(bool disposing)
private void CheckDisposed()
}
public Mono.Unix.UnixMarshal : object {
public string GetErrorDescription(Errno errno)
public IntPtr AllocHeap(long size)
public IntPtr ReAllocHeap(IntPtr ptr, long size)
public void FreeHeap(IntPtr ptr)
public string PtrToStringUnix(IntPtr p)
public string PtrToString(IntPtr p)
public string PtrToString(IntPtr p, Encoding encoding)
private int GetStringByteLength(IntPtr p, Encoding encoding)
private int GetInt16BufferLength(IntPtr p)
private int GetInt32BufferLength(IntPtr p)
private int GetRandomBufferLength(IntPtr p, int nullLength)
public String[] PtrToStringArray(IntPtr stringArray)
public String[] PtrToStringArray(IntPtr stringArray, Encoding encoding)
private int CountStrings(IntPtr stringArray)
public String[] PtrToStringArray(int count, IntPtr stringArray)
public String[] PtrToStringArray(int count, IntPtr stringArray, Encoding encoding)
public IntPtr StringToHeap(string s)
public IntPtr StringToHeap(string s, Encoding encoding)
public IntPtr StringToHeap(string s, int index, int count)
public IntPtr StringToHeap(string s, int index, int count, Encoding encoding)
public bool ShouldRetrySyscall(int r)
public bool ShouldRetrySyscall(int r, Errno& errno)
internal string EscapeFormatString(string message, Char[] permitted)
private bool IsCharPresent(Char[] array, char c)
internal Exception CreateExceptionForError(Errno errno)
internal Exception CreateExceptionForLastError()
public void ThrowExceptionForError(Errno errno)
public void ThrowExceptionForLastError()
public void ThrowExceptionForErrorIf(int retval, Errno errno)
public void ThrowExceptionForLastErrorIf(int retval)
}
public Mono.Unix.UnixPath : object {
public char DirectorySeparatorChar
public char AltDirectorySeparatorChar
public char PathSeparator
public char VolumeSeparatorChar
private Char[] _InvalidPathChars
public Char[] GetInvalidPathChars()
public string Combine(string path1, String[] paths)
private void Combine(StringBuilder path, string part)
public string GetDirectoryName(string path)
public string GetFileName(string path)
public string GetFullPath(string path)
private string _GetFullPath(string path)
public string GetCanonicalPath(string path)
private void GetPathComponents(string path, String[]& components, Int32& lastIndex)
public string GetPathRoot(string path)
public string GetCompleteRealPath(string path)
public string GetRealPath(string path)
internal string ReadSymbolicLink(string path)
private string ReadSymbolicLink(string path, Errno& errno)
public string TryReadLink(string path)
public string ReadLink(string path)
public bool IsPathRooted(string path)
internal void CheckPath(string path)
}
public Mono.Unix.UnixPipes : ValueType {
public UnixStream Reading
public UnixStream Writing
public void .ctor(UnixStream reading, UnixStream writing)
public UnixPipes CreatePipes()
public bool Equals(object value)
public bool Equals(UnixPipes value)
public int GetHashCode()
public bool op_Equality(UnixPipes lhs, UnixPipes rhs)
public bool op_Inequality(UnixPipes lhs, UnixPipes rhs)
}
public Mono.Unix.UnixProcess : object {
private int pid
public int Id
public bool HasExited
public int ExitCode
public bool HasSignaled
public Signum TerminationSignal
public bool HasStopped
public Signum StopSignal
public int ProcessGroupId
public int SessionId
internal void .ctor(int pid)
public int get_Id()
public bool get_HasExited()
private int GetProcessStatus()
public int get_ExitCode()
public bool get_HasSignaled()
public Signum get_TerminationSignal()
public bool get_HasStopped()
public Signum get_StopSignal()
public int get_ProcessGroupId()
public void set_ProcessGroupId(int value)
public int get_SessionId()
public UnixProcess GetCurrentProcess()
public int GetCurrentProcessId()
public void Kill()
public void Signal(Signum signal)
public void WaitForExit()
}
public Mono.Unix.UnixSignal : WaitHandle {
private int signum
private IntPtr signal_info
private Mono_Posix_RuntimeIsShuttingDown <>f__am$cache2
public Signum Signum
public RealTimeSignum RealTimeSignum
public bool IsRealTimeSignal
private SignalInfo* Info
public bool IsSet
public int Count
public void .ctor(Signum signum)
public void .ctor(RealTimeSignum rtsig)
public Signum get_Signum()
public RealTimeSignum get_RealTimeSignum()
public bool get_IsRealTimeSignal()
private IntPtr install(int signum)
private int uninstall(IntPtr info)
private int WaitAny(IntPtr[] infos, int count, int timeout, Mono_Posix_RuntimeIsShuttingDown shutting_down)
internal int GetSIGRTMIN()
internal int GetSIGRTMAX()
private void AssertValid()
private SignalInfo* get_Info()
public bool get_IsSet()
public bool Reset()
public int get_Count()
public void set_Count(int value)
protected void Dispose(bool disposing)
public bool WaitOne()
public bool WaitOne(TimeSpan timeout, bool exitContext)
public bool WaitOne(int millisecondsTimeout, bool exitContext)
public int WaitAny(UnixSignal[] signals)
public int WaitAny(UnixSignal[] signals, TimeSpan timeout)
public int WaitAny(UnixSignal[] signals, int millisecondsTimeout)
private int <WaitAny>m__0()
}
public Mono.Unix.UnixStream : Stream {
public int InvalidFileDescriptor
public int StandardInputFileDescriptor
public int StandardOutputFileDescriptor
public int StandardErrorFileDescriptor
private bool canSeek
private bool canRead
private bool canWrite
private bool owner
private int fileDescriptor
private Stat stat
public int Handle
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public FilePermissions Protection
public FileTypes FileType
public FileAccessPermissions FileAccessPermissions
public FileSpecialAttributes FileSpecialAttributes
public UnixUserInfo OwnerUser
public long OwnerUserId
public UnixGroupInfo OwnerGroup
public long OwnerGroupId
public void .ctor(int fileDescriptor)
public void .ctor(int fileDescriptor, bool ownsHandle)
private void System.IDisposable.Dispose()
private void AssertNotDisposed()
public int get_Handle()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public FilePermissions get_Protection()
public void set_Protection(FilePermissions value)
public FileTypes get_FileType()
public FileAccessPermissions get_FileAccessPermissions()
public void set_FileAccessPermissions(FileAccessPermissions value)
public FileSpecialAttributes get_FileSpecialAttributes()
public void set_FileSpecialAttributes(FileSpecialAttributes value)
public UnixUserInfo get_OwnerUser()
public long get_OwnerUserId()
public UnixGroupInfo get_OwnerGroup()
public long get_OwnerGroupId()
private void RefreshStat()
public void AdviseFileAccessPattern(FileAccessPattern pattern, long offset, long len)
public void AdviseFileAccessPattern(FileAccessPattern pattern)
public void Flush()
public int Read(Byte[] buffer, int offset, int count)
private void AssertValidBuffer(Byte[] buffer, int offset, int count)
public int ReadAtOffset(Byte[] buffer, int offset, int count, long fileOffset)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
public void WriteAtOffset(Byte[] buffer, int offset, int count, long fileOffset)
public void SendTo(UnixStream output)
public void SendTo(UnixStream output, ulong count)
public void SendTo(int out_fd, ulong count)
public void SetOwner(long user, long group)
public void SetOwner(string user, string group)
public void SetOwner(string user)
public long GetConfigurationValue(PathconfName name)
protected void Finalize()
public void Close()
}
public Mono.Unix.UnixSymbolicLinkInfo : UnixFileSystemInfo {
public string Name
public UnixFileSystemInfo Contents
public string ContentsPath
public bool HasContents
public void .ctor(string path)
internal void .ctor(string path, Stat stat)
public string get_Name()
public UnixFileSystemInfo get_Contents()
public string get_ContentsPath()
public bool get_HasContents()
public UnixFileSystemInfo GetContents()
public void CreateSymbolicLinkTo(string path)
public void CreateSymbolicLinkTo(UnixFileSystemInfo path)
public void Delete()
public void SetOwner(long owner, long group)
protected bool GetFileStatus(string path, Stat& stat)
private string ReadLink()
private string TryReadLink()
}
public Mono.Unix.UnixUserInfo : object {
private Passwd passwd
public string UserName
public string Password
public long UserId
public UnixGroupInfo Group
public long GroupId
public string GroupName
public string RealName
public string HomeDirectory
public string ShellProgram
public void .ctor(string user)
public void .ctor(UInt32 user)
public void .ctor(long user)
public void .ctor(Passwd passwd)
private Passwd CopyPasswd(Passwd pw)
public string get_UserName()
public string get_Password()
public long get_UserId()
public UnixGroupInfo get_Group()
public long get_GroupId()
public string get_GroupName()
public string get_RealName()
public string get_HomeDirectory()
public string get_ShellProgram()
public int GetHashCode()
public bool Equals(object obj)
public string ToString()
public UnixUserInfo GetRealUser()
public long GetRealUserId()
public string GetLoginName()
public Passwd ToPasswd()
public UnixUserInfo[] GetLocalUsers()
}
