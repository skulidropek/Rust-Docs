internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
public System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute : Attribute {
public Type Type
public void .ctor(Type type)
public Type get_Type()
public void set_Type(Type value)
}
public System.Windows.Markup.ArrayExtension : MarkupExtension {
private Type <Type>k__BackingField
private IList items
public Type Type
public IList Items
public void .ctor(Array elements)
public void .ctor(Type arrayType)
public Type get_Type()
public void set_Type(Type value)
public IList get_Items()
public void AddChild(object value)
public void AddText(string text)
public object ProvideValue(IServiceProvider serviceProvider)
}
public System.Windows.Markup.ConstructorArgumentAttribute : Attribute {
private string <ArgumentName>k__BackingField
public string ArgumentName
public void .ctor(string argumentName)
public string get_ArgumentName()
private void set_ArgumentName(string value)
}
public System.Windows.Markup.ContentPropertyAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
private void set_Name(string value)
}
public System.Windows.Markup.ContentWrapperAttribute : Attribute {
private Type <ContentWrapper>k__BackingField
public Type ContentWrapper
public object TypeId
public void .ctor(Type contentWrapper)
public Type get_ContentWrapper()
private void set_ContentWrapper(Type value)
public object get_TypeId()
public bool Equals(object obj)
public int GetHashCode()
}
public System.Windows.Markup.DateTimeValueSerializer : ValueSerializer {
private DateTimeStyles styles
public bool CanConvertFromString(string value, IValueSerializerContext context)
public bool CanConvertToString(object value, IValueSerializerContext context)
public object ConvertFromString(string value, IValueSerializerContext context)
public string ConvertToString(object value, IValueSerializerContext context)
}
public System.Windows.Markup.DependsOnAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public object TypeId
public void .ctor(string name)
public string get_Name()
private void set_Name(string value)
public object get_TypeId()
}
public System.Windows.Markup.DictionaryKeyPropertyAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
private void set_Name(string value)
}
public System.Windows.Markup.IComponentConnector {
public void Connect(int connectionId, object target)
public void InitializeComponent()
}
public System.Windows.Markup.INameScope {
public object FindName(string name)
public void RegisterName(string name, object scopedElement)
public void UnregisterName(string name)
}
public System.Windows.Markup.IProvideValueTarget {
public object TargetObject
public object TargetProperty
public object get_TargetObject()
public object get_TargetProperty()
}
public System.Windows.Markup.IQueryAmbient {
public bool IsAmbientPropertyAvailable(string propertyName)
}
public System.Windows.Markup.IUriContext {
public Uri BaseUri
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
}
public System.Windows.Markup.IValueSerializerContext {
public ValueSerializer GetValueSerializerFor(PropertyDescriptor descriptor)
public ValueSerializer GetValueSerializerFor(Type type)
}
public System.Windows.Markup.IXamlTypeResolver {
public Type Resolve(string qualifiedTypeName)
}
public System.Windows.Markup.MarkupExtension : object {
public object ProvideValue(IServiceProvider serviceProvider)
}
public System.Windows.Markup.MarkupExtensionBracketCharactersAttribute : Attribute {
public char ClosingBracket
public char OpeningBracket
public void .ctor(char openingBracket, char closingBracket)
public char get_ClosingBracket()
public char get_OpeningBracket()
}
public System.Windows.Markup.MarkupExtensionReturnTypeAttribute : Attribute {
private Type <ReturnType>k__BackingField
private Type <ExpressionType>k__BackingField
public Type ReturnType
public Type ExpressionType
public void .ctor(Type returnType)
public void .ctor(Type returnType, Type expressionType)
public Type get_ReturnType()
private void set_ReturnType(Type value)
public Type get_ExpressionType()
private void set_ExpressionType(Type value)
}
public System.Windows.Markup.MemberDefinition : object {
public string Name
public string get_Name()
public void set_Name(string value)
}
public System.Windows.Markup.NameReferenceConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Windows.Markup.NameScopePropertyAttribute : Attribute {
private string <Name>k__BackingField
private Type <Type>k__BackingField
public string Name
public Type Type
public void .ctor(string name)
public void .ctor(string name, Type type)
public string get_Name()
private void set_Name(string value)
public Type get_Type()
private void set_Type(Type value)
}
public System.Windows.Markup.NullExtension : MarkupExtension {
public object ProvideValue(IServiceProvider serviceProvider)
}
public System.Windows.Markup.PropertyDefinition : MemberDefinition {
private List`1<Attribute> attributes
private string <Modifier>k__BackingField
private string name
private XamlType <Type>k__BackingField
public IList`1<Attribute> Attributes
public string Modifier
public string Name
public XamlType Type
public IList`1<Attribute> get_Attributes()
public string get_Modifier()
public void set_Modifier(string value)
public string get_Name()
public void set_Name(string value)
public XamlType get_Type()
public void set_Type(XamlType value)
}
public System.Windows.Markup.Reference : MarkupExtension {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
public void set_Name(string value)
public object ProvideValue(IServiceProvider serviceProvider)
}
public System.Windows.Markup.RootNamespaceAttribute : Attribute {
private string <Namespace>k__BackingField
public string Namespace
public void .ctor(string nameSpace)
public string get_Namespace()
private void set_Namespace(string value)
}
public System.Windows.Markup.RuntimeNamePropertyAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
private void set_Name(string value)
}
public System.Windows.Markup.StaticExtension : MarkupExtension {
private string <Member>k__BackingField
private Type <MemberType>k__BackingField
public string Member
public Type MemberType
public void .ctor(string member)
public string get_Member()
public void set_Member(string value)
public Type get_MemberType()
public void set_MemberType(Type value)
public object ProvideValue(IServiceProvider serviceProvider)
}
internal System.Windows.Markup.StringValueSerializer : ValueSerializer {
public bool CanConvertFromString(string value, IValueSerializerContext context)
public bool CanConvertToString(object value, IValueSerializerContext context)
public object ConvertFromString(string value, IValueSerializerContext context)
public string ConvertToString(object value, IValueSerializerContext context)
public IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context)
}
internal System.Windows.Markup.TypeConverterValueSerializer : ValueSerializer {
private TypeConverter c
public void .ctor(TypeConverter typeConverter)
public bool CanConvertFromString(string value, IValueSerializerContext context)
public bool CanConvertToString(object value, IValueSerializerContext context)
public object ConvertFromString(string value, IValueSerializerContext context)
public string ConvertToString(object value, IValueSerializerContext context)
public IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context)
}
public System.Windows.Markup.TypeExtension : MarkupExtension {
private Type <Type>k__BackingField
private string <TypeName>k__BackingField
public Type Type
public string TypeName
public void .ctor(string typeName)
public void .ctor(Type type)
public Type get_Type()
public void set_Type(Type value)
public string get_TypeName()
public void set_TypeName(string value)
public object ProvideValue(IServiceProvider serviceProvider)
}
internal System.Windows.Markup.TypeExtensionConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
internal System.Windows.Markup.TypeValueSerializer : ValueSerializer {
private TypeExtensionConverter txc
public bool CanConvertFromString(string value, IValueSerializerContext context)
public bool CanConvertToString(object value, IValueSerializerContext context)
public object ConvertFromString(string value, IValueSerializerContext context)
public string ConvertToString(object value, IValueSerializerContext context)
public IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context)
}
public System.Windows.Markup.UidPropertyAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
private void set_Name(string value)
}
public System.Windows.Markup.UsableDuringInitializationAttribute : Attribute {
private bool <Usable>k__BackingField
public bool Usable
public void .ctor(bool usable)
public bool get_Usable()
private void set_Usable(bool value)
}
public System.Windows.Markup.ValueSerializer : object {
public ValueSerializer GetSerializerFor(PropertyDescriptor descriptor)
public ValueSerializer GetSerializerFor(Type type)
public ValueSerializer GetSerializerFor(PropertyDescriptor descriptor, IValueSerializerContext context)
public ValueSerializer GetSerializerFor(Type type, IValueSerializerContext context)
public bool CanConvertFromString(string value, IValueSerializerContext context)
public bool CanConvertToString(object value, IValueSerializerContext context)
public object ConvertFromString(string value, IValueSerializerContext context)
public string ConvertToString(object value, IValueSerializerContext context)
protected Exception GetConvertFromException(object value)
protected Exception GetConvertToException(object value, Type destinationType)
public IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context)
}
public System.Windows.Markup.XamlDeferLoadAttribute : Attribute {
private Type <ContentType>k__BackingField
private string <ContentTypeName>k__BackingField
private Type <LoaderType>k__BackingField
private string <LoaderTypeName>k__BackingField
public Type ContentType
public string ContentTypeName
public Type LoaderType
public string LoaderTypeName
public void .ctor(string loaderType, string contentType)
public void .ctor(Type loaderType, Type contentType)
public Type get_ContentType()
private void set_ContentType(Type value)
public string get_ContentTypeName()
private void set_ContentTypeName(string value)
public Type get_LoaderType()
private void set_LoaderType(Type value)
public string get_LoaderTypeName()
private void set_LoaderTypeName(string value)
}
public System.Windows.Markup.XamlSetMarkupExtensionAttribute : Attribute {
private string <XamlSetMarkupExtensionHandler>k__BackingField
public string XamlSetMarkupExtensionHandler
public void .ctor(string xamlSetMarkupExtensionHandler)
public string get_XamlSetMarkupExtensionHandler()
private void set_XamlSetMarkupExtensionHandler(string value)
}
public System.Windows.Markup.XamlSetMarkupExtensionEventArgs : XamlSetValueEventArgs {
private MarkupExtension <MarkupExtension>k__BackingField
private IServiceProvider <ServiceProvider>k__BackingField
public MarkupExtension MarkupExtension
public IServiceProvider ServiceProvider
public void .ctor(XamlMember member, MarkupExtension value, IServiceProvider serviceProvider)
public MarkupExtension get_MarkupExtension()
private void set_MarkupExtension(MarkupExtension value)
public IServiceProvider get_ServiceProvider()
private void set_ServiceProvider(IServiceProvider value)
public void CallBase()
}
public System.Windows.Markup.XamlSetTypeConverterAttribute : Attribute {
private string <XamlSetTypeConverterHandler>k__BackingField
public string XamlSetTypeConverterHandler
public void .ctor(string xamlSetTypeConverterHandler)
public string get_XamlSetTypeConverterHandler()
private void set_XamlSetTypeConverterHandler(string value)
}
public System.Windows.Markup.XamlSetTypeConverterEventArgs : XamlSetValueEventArgs {
private CultureInfo <CultureInfo>k__BackingField
private ITypeDescriptorContext <ServiceProvider>k__BackingField
private TypeConverter <TypeConverter>k__BackingField
public CultureInfo CultureInfo
public ITypeDescriptorContext ServiceProvider
public TypeConverter TypeConverter
public void .ctor(XamlMember member, TypeConverter typeConverter, object value, ITypeDescriptorContext serviceProvider, CultureInfo cultureInfo)
public CultureInfo get_CultureInfo()
private void set_CultureInfo(CultureInfo value)
public ITypeDescriptorContext get_ServiceProvider()
private void set_ServiceProvider(ITypeDescriptorContext value)
public TypeConverter get_TypeConverter()
private void set_TypeConverter(TypeConverter value)
public void CallBase()
}
public System.Windows.Markup.XamlSetValueEventArgs : EventArgs {
private bool <Handled>k__BackingField
private XamlMember <Member>k__BackingField
private object <Value>k__BackingField
public bool Handled
public XamlMember Member
public object Value
public void .ctor(XamlMember member, object value)
public bool get_Handled()
public void set_Handled(bool value)
public XamlMember get_Member()
private void set_Member(XamlMember value)
public object get_Value()
private void set_Value(object value)
public void CallBase()
}
public System.Windows.Markup.XData : object {
private string text
private XmlReader reader
public string Text
public object XmlReader
public string get_Text()
public void set_Text(string value)
public object get_XmlReader()
public void set_XmlReader(object value)
}
public System.Windows.Markup.XmlLangPropertyAttribute : Attribute {
private string <Name>k__BackingField
public string Name
public void .ctor(string name)
public string get_Name()
private void set_Name(string value)
}
public System.Windows.Markup.XmlnsCompatibleWithAttribute : Attribute {
private string <NewNamespace>k__BackingField
private string <OldNamespace>k__BackingField
public string NewNamespace
public string OldNamespace
public void .ctor(string oldNamespace, string newNamespace)
public string get_NewNamespace()
private void set_NewNamespace(string value)
public string get_OldNamespace()
private void set_OldNamespace(string value)
}
public System.Windows.Markup.XmlnsDefinitionAttribute : Attribute {
private string <AssemblyName>k__BackingField
private string <ClrNamespace>k__BackingField
private string <XmlNamespace>k__BackingField
public string AssemblyName
public string ClrNamespace
public string XmlNamespace
public void .ctor(string xmlNamespace, string clrNamespace)
public string get_AssemblyName()
public void set_AssemblyName(string value)
public string get_ClrNamespace()
private void set_ClrNamespace(string value)
public string get_XmlNamespace()
private void set_XmlNamespace(string value)
}
public System.Windows.Markup.XmlnsPrefixAttribute : Attribute {
private string <Prefix>k__BackingField
private string <XmlNamespace>k__BackingField
public string Prefix
public string XmlNamespace
public void .ctor(string xmlNamespace, string prefix)
public string get_Prefix()
private void set_Prefix(string value)
public string get_XmlNamespace()
private void set_XmlNamespace(string value)
}
public System.Xaml.AmbientPropertyValue : object {
private XamlMember <RetrievedProperty>k__BackingField
private object <Value>k__BackingField
public XamlMember RetrievedProperty
public object Value
public void .ctor(XamlMember property, object value)
public XamlMember get_RetrievedProperty()
private void set_RetrievedProperty(XamlMember value)
public object get_Value()
private void set_Value(object value)
}
internal System.Xaml.AmbientProvider : object {
private List`1<AmbientPropertyValue> values
private Stack`1<AmbientPropertyValue> live_stack
public void Push(AmbientPropertyValue v)
public void Pop()
public IEnumerable`1<object> GetAllAmbientValues(XamlType[] types)
public IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties)
public IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties)
private IEnumerable`1<AmbientPropertyValue> DoGetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties)
private bool DoesAmbientPropertyApply(AmbientPropertyValue p, IEnumerable`1<XamlType> types, XamlMember[] properties)
public object GetFirstAmbientValue(XamlType[] types)
public AmbientPropertyValue GetFirstAmbientValue(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties)
}
public System.Xaml.AttachableMemberIdentifier : object {
private Type <DeclaringType>k__BackingField
private string <MemberName>k__BackingField
public Type DeclaringType
public string MemberName
public void .ctor(Type declaringType, string memberName)
public Type get_DeclaringType()
private void set_DeclaringType(Type value)
public string get_MemberName()
private void set_MemberName(string value)
public bool op_Equality(AttachableMemberIdentifier left, AttachableMemberIdentifier right)
private bool IsNull(AttachableMemberIdentifier a)
public bool op_Inequality(AttachableMemberIdentifier left, AttachableMemberIdentifier right)
public bool Equals(AttachableMemberIdentifier other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
}
public System.Xaml.AttachablePropertyServices : object {
private Dictionary`2<object, Table> props
public void CopyPropertiesTo(object instance, KeyValuePair`2[] array, int index)
public int GetAttachedPropertyCount(object instance)
public bool RemoveProperty(object instance, AttachableMemberIdentifier name)
public void SetProperty(object instance, AttachableMemberIdentifier name, object value)
public bool TryGetProperty(object instance, AttachableMemberIdentifier name, Object& value)
public bool TryGetProperty(object instance, AttachableMemberIdentifier name, T& value)
}
public System.Xaml.IAmbientProvider {
public IEnumerable`1<object> GetAllAmbientValues(XamlType[] types)
public IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties)
public IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties)
public object GetFirstAmbientValue(XamlType[] types)
public AmbientPropertyValue GetFirstAmbientValue(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties)
}
public System.Xaml.IAttachedPropertyStore {
public int PropertyCount
public int get_PropertyCount()
public void CopyPropertiesTo(KeyValuePair`2[] array, int index)
public bool RemoveProperty(AttachableMemberIdentifier attachableMemberIdentifier)
public void SetProperty(AttachableMemberIdentifier attachableMemberIdentifier, object value)
public bool TryGetProperty(AttachableMemberIdentifier attachableMemberIdentifier, Object& value)
}
public System.Xaml.IDestinationTypeProvider {
public Type GetDestinationType()
}
public System.Xaml.INamespacePrefixLookup {
public string LookupPrefix(string ns)
}
internal System.Xaml.InstanceContext : ValueType {
private object value
public void .ctor(object value)
public object GetRawValue()
}
public System.Xaml.IRootObjectProvider {
public object RootObject
public object get_RootObject()
}
public System.Xaml.IXamlIndexingReader {
public int Count
public int CurrentIndex
public int get_Count()
public int get_CurrentIndex()
public void set_CurrentIndex(int value)
}
public System.Xaml.IXamlLineInfo {
public bool HasLineInfo
public int LineNumber
public int LinePosition
public bool get_HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
}
public System.Xaml.IXamlLineInfoConsumer {
public bool ShouldProvideLineInfo
public bool get_ShouldProvideLineInfo()
public void SetLineInfo(int lineNumber, int linePosition)
}
public System.Xaml.IXamlNameProvider {
public string GetName(object value)
}
public System.Xaml.IXamlNameResolver {
public bool IsFixupTokenAvailable
public bool get_IsFixupTokenAvailable()
public void add_OnNameScopeInitializationComplete(EventHandler value)
public void remove_OnNameScopeInitializationComplete(EventHandler value)
public object GetFixupToken(IEnumerable`1<string> names)
public object GetFixupToken(IEnumerable`1<string> names, bool canAssignDirectly)
public IEnumerable`1<KeyValuePair`2<string, object>> GetAllNamesAndValuesInScope()
public object Resolve(string name)
public object Resolve(string name, Boolean& isFullyInitialized)
}
public System.Xaml.IXamlNamespaceResolver {
public string GetNamespace(string prefix)
public IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes()
}
public System.Xaml.IXamlObjectWriterFactory {
public XamlObjectWriterSettings GetParentSettings()
public XamlObjectWriter GetXamlObjectWriter(XamlObjectWriterSettings settings)
}
public System.Xaml.IXamlSchemaContextProvider {
public XamlSchemaContext SchemaContext
public XamlSchemaContext get_SchemaContext()
}
internal System.Xaml.NameFixupRequired : object {
private XamlType <ParentType>k__BackingField
private XamlMember <ParentMember>k__BackingField
private object <ParentValue>k__BackingField
private bool <CanAssignDirectly>k__BackingField
private IList`1<string> <Names>k__BackingField
public XamlType ParentType
public XamlMember ParentMember
public object ParentValue
public bool CanAssignDirectly
public IList`1<string> Names
public void .ctor(IEnumerable`1<string> names, bool canAssignDirectly)
public XamlType get_ParentType()
public void set_ParentType(XamlType value)
public XamlMember get_ParentMember()
public void set_ParentMember(XamlMember value)
public object get_ParentValue()
public void set_ParentValue(object value)
public bool get_CanAssignDirectly()
public void set_CanAssignDirectly(bool value)
public IList`1<string> get_Names()
public void set_Names(IList`1<string> value)
}
internal System.Xaml.NameScope : object {
private Dictionary`2<string, object> table
private INameScope external
public void .ctor(INameScope external)
public object FindName(string name)
public void RegisterName(string name, object scopedElement)
public void UnregisterName(string name)
}
public System.Xaml.NamespaceDeclaration : object {
private string <Namespace>k__BackingField
private string <Prefix>k__BackingField
public string Namespace
public string Prefix
public void .ctor(string ns, string prefix)
public string get_Namespace()
private void set_Namespace(string value)
public string get_Prefix()
private void set_Prefix(string value)
}
internal System.Xaml.NamespaceResolver : object {
private IList`1<NamespaceDeclaration> source
public void .ctor(IList`1<NamespaceDeclaration> source)
public string GetNamespace(string prefix)
public IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes()
}
internal System.Xaml.ParsedMarkupExtensionInfo : object {
private Dictionary`2<XamlMember, object> args
private XamlType <Type>k__BackingField
public Dictionary`2<XamlMember, object> Arguments
public XamlType Type
public Dictionary`2<XamlMember, object> get_Arguments()
public XamlType get_Type()
public void set_Type(XamlType value)
public ParsedMarkupExtensionInfo Parse(string raw, IXamlNamespaceResolver nsResolver, XamlSchemaContext sctx)
private string UnescapeValue(string s)
private Exception Error(string format, Object[] args)
}
public System.Xaml.Permissions.XamlAccessLevel : object {
private AssemblyName <AssemblyAccessToAssemblyName>k__BackingField
private string <PrivateAccessToTypeName>k__BackingField
public AssemblyName AssemblyAccessToAssemblyName
public string PrivateAccessToTypeName
public XamlAccessLevel AssemblyAccessTo(Assembly assembly)
public XamlAccessLevel AssemblyAccessTo(AssemblyName assemblyName)
public XamlAccessLevel PrivateAccessTo(string assemblyQualifiedTypeName)
public XamlAccessLevel PrivateAccessTo(Type type)
internal void .ctor(AssemblyName assemblyAccessToAssemblyName)
internal void .ctor(string privateAccessToTypeName)
public AssemblyName get_AssemblyAccessToAssemblyName()
private void set_AssemblyAccessToAssemblyName(AssemblyName value)
public string get_PrivateAccessToTypeName()
private void set_PrivateAccessToTypeName(string value)
}
public System.Xaml.Permissions.XamlLoadPermission : CodeAccessPermission {
private IList`1<XamlAccessLevel> <AllowedAccess>k__BackingField
public IList`1<XamlAccessLevel> AllowedAccess
public void .ctor(IEnumerable`1<XamlAccessLevel> allowedAccess)
public void .ctor(PermissionState state)
public void .ctor(XamlAccessLevel allowedAccess)
public IList`1<XamlAccessLevel> get_AllowedAccess()
private void set_AllowedAccess(IList`1<XamlAccessLevel> value)
public IPermission Copy()
public void FromXml(SecurityElement elem)
public bool Includes(XamlAccessLevel requestedAccess)
public IPermission Intersect(IPermission target)
public bool IsSubsetOf(IPermission target)
public bool IsUnrestricted()
public SecurityElement ToXml()
public IPermission Union(IPermission other)
}
internal System.Xaml.PrefixLookup : object {
private XamlSchemaContext sctx
private bool <IsCollectingNamespaces>k__BackingField
private List`1<NamespaceDeclaration> <Namespaces>k__BackingField
public bool IsCollectingNamespaces
public List`1<NamespaceDeclaration> Namespaces
public void .ctor(XamlSchemaContext schemaContext)
public bool get_IsCollectingNamespaces()
public void set_IsCollectingNamespaces(bool value)
public List`1<NamespaceDeclaration> get_Namespaces()
private void set_Namespaces(List`1<NamespaceDeclaration> value)
public string LookupPrefix(string ns)
public string AddNamespace(string ns)
private string GetAcronym(string ns)
}
public System.Xaml.Schema.AllowedMemberLocations : Enum {
public int value__
public AllowedMemberLocations None
public AllowedMemberLocations Attribute
public AllowedMemberLocations MemberElement
public AllowedMemberLocations Any
}
public System.Xaml.Schema.ShouldSerializeResult : Enum {
public int value__
public ShouldSerializeResult Default
public ShouldSerializeResult True
public ShouldSerializeResult False
}
public System.Xaml.Schema.XamlCollectionKind : Enum {
public byte value__
public XamlCollectionKind None
public XamlCollectionKind Collection
public XamlCollectionKind Dictionary
public XamlCollectionKind Array
}
public System.Xaml.Schema.XamlMemberInvoker : object {
private XamlMemberInvoker unknown
private XamlMember member
public XamlMemberInvoker UnknownInvoker
public MethodInfo UnderlyingGetter
public MethodInfo UnderlyingSetter
public XamlMemberInvoker get_UnknownInvoker()
public void .ctor(XamlMember member)
public MethodInfo get_UnderlyingGetter()
public MethodInfo get_UnderlyingSetter()
private void ThrowIfUnknown()
public object GetValue(object instance)
public void SetValue(object instance, object value)
public ShouldSerializeResult ShouldSerializeValue(object instance)
}
public System.Xaml.Schema.XamlTypeInvoker : object {
private XamlTypeInvoker unknown
private XamlType type
public XamlTypeInvoker UnknownInvoker
public EventHandler`1<XamlSetMarkupExtensionEventArgs> SetMarkupExtensionHandler
public EventHandler`1<XamlSetTypeConverterEventArgs> SetTypeConverterHandler
public XamlTypeInvoker get_UnknownInvoker()
public void .ctor(XamlType type)
private void ThrowIfUnknown()
public EventHandler`1<XamlSetMarkupExtensionEventArgs> get_SetMarkupExtensionHandler()
public EventHandler`1<XamlSetTypeConverterEventArgs> get_SetTypeConverterHandler()
public void AddToCollection(object instance, object item)
public void AddToDictionary(object instance, object key, object item)
private MethodInfo LookupAddMethod(Type ct, Type iface)
public object CreateInstance(Object[] arguments)
public MethodInfo GetAddMethod(XamlType contentType)
public MethodInfo GetEnumeratorMethod()
public IEnumerator GetItems(object instance)
}
public System.Xaml.Schema.XamlTypeName : object {
private Char[] comma_or_parens
private XamlTypeName[] empty_type_args
private string <Name>k__BackingField
private string <Namespace>k__BackingField
private IList`1<XamlTypeName> <TypeArguments>k__BackingField
public string Name
public string Namespace
public IList`1<XamlTypeName> TypeArguments
public XamlTypeName Parse(string typeName, IXamlNamespaceResolver namespaceResolver)
public bool TryParse(string typeName, IXamlNamespaceResolver namespaceResolver, XamlTypeName& result)
public IList`1<XamlTypeName> ParseList(string typeNameList, IXamlNamespaceResolver namespaceResolver)
public bool TryParseList(string typeNameList, IXamlNamespaceResolver namespaceResolver, IList`1& result)
public string ToString(IList`1<XamlTypeName> typeNameList, INamespacePrefixLookup prefixLookup)
private string DoToString(IList`1<XamlTypeName> typeNameList, INamespacePrefixLookup prefixLookup)
public void .ctor(XamlType xamlType)
public void .ctor(string xamlNamespace, string name)
public void .ctor(string xamlNamespace, string name, IEnumerable`1<XamlTypeName> typeArguments)
public string get_Name()
public void set_Name(string value)
public string get_Namespace()
public void set_Namespace(string value)
public IList`1<XamlTypeName> get_TypeArguments()
private void set_TypeArguments(IList`1<XamlTypeName> value)
public string ToString()
public string ToString(INamespacePrefixLookup prefixLookup)
}
public System.Xaml.Schema.XamlTypeTypeConverter : TypeConverter {
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Xaml.Schema.XamlValueConverter`1 : object {
private TConverterBase converter_instance
private Type <ConverterType>k__BackingField
private string <Name>k__BackingField
private XamlType <TargetType>k__BackingField
public TConverterBase ConverterInstance
public Type ConverterType
public string Name
public XamlType TargetType
public void .ctor(Type converterType, XamlType targetType)
public void .ctor(Type converterType, XamlType targetType, string name)
public TConverterBase get_ConverterInstance()
public Type get_ConverterType()
private void set_ConverterType(Type value)
public string get_Name()
private void set_Name(string value)
public XamlType get_TargetType()
private void set_TargetType(XamlType value)
public bool op_Equality(XamlValueConverter`1<TConverterBase> converter1, XamlValueConverter`1<TConverterBase> converter2)
private bool IsNull(XamlValueConverter`1<TConverterBase> a)
public bool op_Inequality(XamlValueConverter`1<TConverterBase> converter1, XamlValueConverter`1<TConverterBase> converter2)
public bool Equals(XamlValueConverter`1<TConverterBase> other)
public bool Equals(object obj)
protected TConverterBase CreateInstance()
public int GetHashCode()
public string ToString()
}
internal System.Xaml.TypeExtensionMethods : object {
private NullExtension null_value
public T GetCustomAttribute(ICustomAttributeProvider type, bool inherit)
public T GetCustomAttribute(XamlType type)
public bool ImplementsAnyInterfacesOf(Type type, Type[] definitions)
public bool ImplementsInterface(Type type, Type definition)
public object GetExtensionWrapped(object o)
public string GetStringValue(XamlType xt, XamlMember xm, object obj, IValueSerializerContext vsctx)
public TypeConverter GetTypeConverter(Type type)
public bool IsContentValue(XamlMember member, IValueSerializerContext vsctx)
public bool IsContentValue(XamlType type, IValueSerializerContext vsctx)
public bool ListEquals(IList`1<XamlType> a1, IList`1<XamlType> a2)
public bool HasPositionalParameters(XamlType type, IValueSerializerContext vsctx)
private bool ExaminePositionalParametersApplicable(XamlType type, IValueSerializerContext vsctx)
public IEnumerable`1<XamlMember> GetConstructorArguments(XamlType type)
public IEnumerable`1<XamlMember> GetSortedConstructorArguments(XamlType type)
private ParameterInfo FindParameterWithName(IEnumerable`1<ParameterInfo> pis, string name)
public string ConstructorArgumentName(XamlMember xm)
internal int CompareMembers(XamlMember m1, XamlMember m2)
internal bool IsConstructorArgument(XamlMember xm)
internal string GetInternalXmlName(XamlMember xm)
}
internal System.Xaml.TypeExtensionMethods2 : object {
public IEnumerable`1<XamlMember> GetAllObjectReaderMembersByType(XamlType type, IValueSerializerContext vsctx)
}
internal System.Xaml.ValueSerializerContext : object {
private XamlNameResolver name_resolver
private XamlTypeResolver type_resolver
private NamespaceResolver namespace_resolver
private PrefixLookup prefix_lookup
private XamlSchemaContext sctx
private IAmbientProvider ambient_provider
private XamlSchemaContext System.Xaml.IXamlSchemaContextProvider.SchemaContext
public IContainer Container
public object Instance
public PropertyDescriptor PropertyDescriptor
public void .ctor(PrefixLookup prefixLookup, XamlSchemaContext schemaContext, IAmbientProvider ambientProvider)
public object GetService(Type serviceType)
private XamlSchemaContext System.Xaml.IXamlSchemaContextProvider.get_SchemaContext()
public IContainer get_Container()
public object get_Instance()
public PropertyDescriptor get_PropertyDescriptor()
public void OnComponentChanged()
public bool OnComponentChanging()
public ValueSerializer GetValueSerializerFor(PropertyDescriptor descriptor)
public ValueSerializer GetValueSerializerFor(Type type)
}
public System.Xaml.XamlBackgroundReader : XamlReader {
private Thread thread
private XamlReader r
private XamlNodeQueue q
private bool read_all_done
private bool do_work
private ExceptionDispatchInfo read_exception
private ManualResetEvent wait
public bool HasLineInfo
public bool IsEof
public int LineNumber
public int LinePosition
public XamlMember Member
public NamespaceDeclaration Namespace
public XamlNodeType NodeType
public XamlSchemaContext SchemaContext
public XamlType Type
public object Value
public void .ctor(XamlReader wrappedReader)
public bool get_HasLineInfo()
public bool get_IsEof()
public int get_LineNumber()
public int get_LinePosition()
public XamlMember get_Member()
public NamespaceDeclaration get_Namespace()
public XamlNodeType get_NodeType()
public XamlSchemaContext get_SchemaContext()
public XamlType get_Type()
public object get_Value()
protected void Dispose(bool disposing)
public bool Read()
public void StartThread()
public void StartThread(string threadName)
private void <StartThread>b__31_0(object <p0>)
}
public System.Xaml.XamlDeferringLoader : object {
public object Load(XamlReader xamlReader, IServiceProvider serviceProvider)
public XamlReader Save(object value, IServiceProvider serviceProvider)
}
public System.Xaml.XamlDirective : XamlMember {
private AllowedMemberLocations <AllowedLocation>k__BackingField
private XamlValueConverter`1<TypeConverter> type_converter
private XamlType type
private XamlMemberInvoker invoker
private bool is_unknown
private IList`1<string> xaml_namespaces
public AllowedMemberLocations AllowedLocation
internal bool InternalIsUnknown
public void .ctor(string xamlNamespace, string name)
public void .ctor(IEnumerable`1<string> xamlNamespaces, string name, XamlType xamlType, XamlValueConverter`1<TypeConverter> typeConverter, AllowedMemberLocations allowedLocation)
public AllowedMemberLocations get_AllowedLocation()
private void set_AllowedLocation(AllowedMemberLocations value)
internal void set_InternalIsUnknown(bool value)
public int GetHashCode()
public IList`1<string> GetXamlNamespaces()
protected ICustomAttributeProvider LookupCustomAttributeProvider()
protected XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader()
protected IList`1<XamlMember> LookupDependsOn()
protected XamlMemberInvoker LookupInvoker()
protected bool LookupIsAmbient()
protected bool LookupIsEvent()
protected bool LookupIsReadOnly()
protected bool LookupIsReadPublic()
protected bool LookupIsUnknown()
protected bool LookupIsWriteOnly()
protected bool LookupIsWritePublic()
protected XamlType LookupTargetType()
protected XamlType LookupType()
protected XamlValueConverter`1<TypeConverter> LookupTypeConverter()
protected MethodInfo LookupUnderlyingGetter()
protected MemberInfo LookupUnderlyingMember()
protected MethodInfo LookupUnderlyingSetter()
public string ToString()
}
public System.Xaml.XamlDuplicateMemberException : XamlException {
private XamlMember <DuplicateMember>k__BackingField
private XamlType <ParentType>k__BackingField
public XamlMember DuplicateMember
public XamlType ParentType
public void .ctor(XamlMember member, XamlType type)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
public XamlMember get_DuplicateMember()
public void set_DuplicateMember(XamlMember value)
public XamlType get_ParentType()
public void set_ParentType(XamlType value)
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Xaml.XamlException : Exception {
private int <LineNumber>k__BackingField
private int <LinePosition>k__BackingField
public int LineNumber
public int LinePosition
public string Message
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
private string FormatLine(string message, int lineNumber, int linePosition)
public void .ctor(string message, Exception innerException, int lineNumber, int linePosition)
protected void .ctor(SerializationInfo info, StreamingContext context)
public int get_LineNumber()
protected internal void set_LineNumber(int value)
public int get_LinePosition()
protected internal void set_LinePosition(int value)
public string get_Message()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Xaml.XamlInternalException : XamlException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Xaml.XamlLanguage : object {
public string Xaml2006Namespace
public string Xml1998Namespace
internal string Xmlns2000Namespace
internal SpecialTypeNameList SpecialNames
private XamlSchemaContext sctx
internal bool InitializingDirectives
internal bool InitializingTypes
private String[] xaml_nss
private String[] xml_nss
private ReadOnlyCollection`1<XamlDirective> <AllDirectives>k__BackingField
private XamlDirective <Arguments>k__BackingField
private XamlDirective <AsyncRecords>k__BackingField
private XamlDirective <Base>k__BackingField
private XamlDirective <Class>k__BackingField
private XamlDirective <ClassAttributes>k__BackingField
private XamlDirective <ClassModifier>k__BackingField
private XamlDirective <Code>k__BackingField
private XamlDirective <ConnectionId>k__BackingField
private XamlDirective <FactoryMethod>k__BackingField
private XamlDirective <FieldModifier>k__BackingField
private XamlDirective <Initialization>k__BackingField
private XamlDirective <Items>k__BackingField
private XamlDirective <Key>k__BackingField
private XamlDirective <Lang>k__BackingField
private XamlDirective <Members>k__BackingField
private XamlDirective <Name>k__BackingField
private XamlDirective <PositionalParameters>k__BackingField
private XamlDirective <Subclass>k__BackingField
private XamlDirective <SynchronousMode>k__BackingField
private XamlDirective <Shared>k__BackingField
private XamlDirective <Space>k__BackingField
private XamlDirective <TypeArguments>k__BackingField
private XamlDirective <Uid>k__BackingField
private XamlDirective <UnknownContent>k__BackingField
private ReadOnlyCollection`1<XamlType> <AllTypes>k__BackingField
private XamlType <Array>k__BackingField
private XamlType <Boolean>k__BackingField
private XamlType <Byte>k__BackingField
private XamlType <Char>k__BackingField
private XamlType <Decimal>k__BackingField
private XamlType <Double>k__BackingField
private XamlType <Int16>k__BackingField
private XamlType <Int32>k__BackingField
private XamlType <Int64>k__BackingField
private XamlType <Member>k__BackingField
private XamlType <Null>k__BackingField
private XamlType <Object>k__BackingField
private XamlType <Property>k__BackingField
private XamlType <Reference>k__BackingField
private XamlType <Single>k__BackingField
private XamlType <Static>k__BackingField
private XamlType <String>k__BackingField
private XamlType <TimeSpan>k__BackingField
private XamlType <Type>k__BackingField
private XamlType <Uri>k__BackingField
private XamlType <XData>k__BackingField
public IList`1<string> XamlNamespaces
public IList`1<string> XmlNamespaces
public ReadOnlyCollection`1<XamlDirective> AllDirectives
public XamlDirective Arguments
public XamlDirective AsyncRecords
public XamlDirective Base
public XamlDirective Class
public XamlDirective ClassAttributes
public XamlDirective ClassModifier
public XamlDirective Code
public XamlDirective ConnectionId
public XamlDirective FactoryMethod
public XamlDirective FieldModifier
public XamlDirective Initialization
public XamlDirective Items
public XamlDirective Key
public XamlDirective Lang
public XamlDirective Members
public XamlDirective Name
public XamlDirective PositionalParameters
public XamlDirective Subclass
public XamlDirective SynchronousMode
public XamlDirective Shared
public XamlDirective Space
public XamlDirective TypeArguments
public XamlDirective Uid
public XamlDirective UnknownContent
public ReadOnlyCollection`1<XamlType> AllTypes
public XamlType Array
public XamlType Boolean
public XamlType Byte
public XamlType Char
public XamlType Decimal
public XamlType Double
public XamlType Int16
public XamlType Int32
public XamlType Int64
public XamlType Member
public XamlType Null
public XamlType Object
public XamlType Property
public XamlType Reference
public XamlType Single
public XamlType Static
public XamlType String
public XamlType TimeSpan
public XamlType Type
public XamlType Uri
public XamlType XData
private XamlType XT()
public IList`1<string> get_XamlNamespaces()
public IList`1<string> get_XmlNamespaces()
public ReadOnlyCollection`1<XamlDirective> get_AllDirectives()
private void set_AllDirectives(ReadOnlyCollection`1<XamlDirective> value)
public XamlDirective get_Arguments()
private void set_Arguments(XamlDirective value)
public XamlDirective get_AsyncRecords()
private void set_AsyncRecords(XamlDirective value)
public XamlDirective get_Base()
private void set_Base(XamlDirective value)
public XamlDirective get_Class()
private void set_Class(XamlDirective value)
public XamlDirective get_ClassAttributes()
private void set_ClassAttributes(XamlDirective value)
public XamlDirective get_ClassModifier()
private void set_ClassModifier(XamlDirective value)
public XamlDirective get_Code()
private void set_Code(XamlDirective value)
public XamlDirective get_ConnectionId()
private void set_ConnectionId(XamlDirective value)
public XamlDirective get_FactoryMethod()
private void set_FactoryMethod(XamlDirective value)
public XamlDirective get_FieldModifier()
private void set_FieldModifier(XamlDirective value)
public XamlDirective get_Initialization()
private void set_Initialization(XamlDirective value)
public XamlDirective get_Items()
private void set_Items(XamlDirective value)
public XamlDirective get_Key()
private void set_Key(XamlDirective value)
public XamlDirective get_Lang()
private void set_Lang(XamlDirective value)
public XamlDirective get_Members()
private void set_Members(XamlDirective value)
public XamlDirective get_Name()
private void set_Name(XamlDirective value)
public XamlDirective get_PositionalParameters()
private void set_PositionalParameters(XamlDirective value)
public XamlDirective get_Subclass()
private void set_Subclass(XamlDirective value)
public XamlDirective get_SynchronousMode()
private void set_SynchronousMode(XamlDirective value)
public XamlDirective get_Shared()
private void set_Shared(XamlDirective value)
public XamlDirective get_Space()
private void set_Space(XamlDirective value)
public XamlDirective get_TypeArguments()
private void set_TypeArguments(XamlDirective value)
public XamlDirective get_Uid()
private void set_Uid(XamlDirective value)
public XamlDirective get_UnknownContent()
private void set_UnknownContent(XamlDirective value)
public ReadOnlyCollection`1<XamlType> get_AllTypes()
private void set_AllTypes(ReadOnlyCollection`1<XamlType> value)
public XamlType get_Array()
private void set_Array(XamlType value)
public XamlType get_Boolean()
private void set_Boolean(XamlType value)
public XamlType get_Byte()
private void set_Byte(XamlType value)
public XamlType get_Char()
private void set_Char(XamlType value)
public XamlType get_Decimal()
private void set_Decimal(XamlType value)
public XamlType get_Double()
private void set_Double(XamlType value)
public XamlType get_Int16()
private void set_Int16(XamlType value)
public XamlType get_Int32()
private void set_Int32(XamlType value)
public XamlType get_Int64()
private void set_Int64(XamlType value)
public XamlType get_Member()
private void set_Member(XamlType value)
public XamlType get_Null()
private void set_Null(XamlType value)
public XamlType get_Object()
private void set_Object(XamlType value)
public XamlType get_Property()
private void set_Property(XamlType value)
public XamlType get_Reference()
private void set_Reference(XamlType value)
public XamlType get_Single()
private void set_Single(XamlType value)
public XamlType get_Static()
private void set_Static(XamlType value)
public XamlType get_String()
private void set_String(XamlType value)
public XamlType get_TimeSpan()
private void set_TimeSpan(XamlType value)
public XamlType get_Type()
private void set_Type(XamlType value)
public XamlType get_Uri()
private void set_Uri(XamlType value)
public XamlType get_XData()
private void set_XData(XamlType value)
internal bool IsValidXamlName(string name)
private bool IsValidXamlName(char c, bool first)
}
public System.Xaml.XamlMember : object {
private XamlType type
private XamlType target_type
private MemberInfo underlying_member
private MethodInfo underlying_getter
private MethodInfo underlying_setter
private XamlSchemaContext context
private XamlMemberInvoker invoker
private bool is_attachable
private bool is_event
private bool is_directive
private bool is_predefined_directive
private string directive_ns
private XamlType <DeclaringType>k__BackingField
private string <Name>k__BackingField
private XamlMember[] empty_members
private XamlMember[] empty_list
internal MethodInfo UnderlyingGetter
internal MethodInfo UnderlyingSetter
public XamlType DeclaringType
public string Name
public string PreferredXamlNamespace
public DesignerSerializationVisibility SerializationVisibility
public bool IsAttachable
public bool IsDirective
public bool IsNameValid
public XamlValueConverter`1<XamlDeferringLoader> DeferringLoader
public IList`1<XamlMember> DependsOn
public XamlMemberInvoker Invoker
public bool IsAmbient
public bool IsEvent
public bool IsReadOnly
public bool IsReadPublic
public bool IsUnknown
public bool IsWriteOnly
public bool IsWritePublic
public XamlType TargetType
public XamlType Type
public XamlValueConverter`1<TypeConverter> TypeConverter
public MemberInfo UnderlyingMember
public XamlValueConverter`1<ValueSerializer> ValueSerializer
public IReadOnlyDictionary`2<char, char> MarkupExtensionBracketCharacters
public void .ctor(EventInfo eventInfo, XamlSchemaContext schemaContext)
public void .ctor(EventInfo eventInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker)
public void .ctor(PropertyInfo propertyInfo, XamlSchemaContext schemaContext)
public void .ctor(PropertyInfo propertyInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker)
public void .ctor(string attachableEventName, MethodInfo adder, XamlSchemaContext schemaContext)
public void .ctor(string attachableEventName, MethodInfo adder, XamlSchemaContext schemaContext, XamlMemberInvoker invoker)
public void .ctor(string attachablePropertyName, MethodInfo getter, MethodInfo setter, XamlSchemaContext schemaContext)
public void .ctor(string attachablePropertyName, MethodInfo getter, MethodInfo setter, XamlSchemaContext schemaContext, XamlMemberInvoker invoker)
public void .ctor(string name, XamlType declaringType, bool isAttachable)
private void .ctor(XamlSchemaContext schemaContext, XamlMemberInvoker invoker)
internal void .ctor(bool isDirective, string ns, string name)
internal MethodInfo get_UnderlyingGetter()
private void set_UnderlyingGetter(MethodInfo value)
internal MethodInfo get_UnderlyingSetter()
private void set_UnderlyingSetter(MethodInfo value)
public XamlType get_DeclaringType()
private void set_DeclaringType(XamlType value)
public string get_Name()
private void set_Name(string value)
public string get_PreferredXamlNamespace()
public DesignerSerializationVisibility get_SerializationVisibility()
public bool get_IsAttachable()
public bool get_IsDirective()
public bool get_IsNameValid()
public XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader()
public IList`1<XamlMember> get_DependsOn()
public XamlMemberInvoker get_Invoker()
public bool get_IsAmbient()
public bool get_IsEvent()
public bool get_IsReadOnly()
public bool get_IsReadPublic()
public bool get_IsUnknown()
public bool get_IsWriteOnly()
public bool get_IsWritePublic()
public XamlType get_TargetType()
public XamlType get_Type()
public XamlValueConverter`1<TypeConverter> get_TypeConverter()
public MemberInfo get_UnderlyingMember()
public XamlValueConverter`1<ValueSerializer> get_ValueSerializer()
public bool op_Equality(XamlMember xamlMember1, XamlMember xamlMember2)
private bool IsNull(XamlMember a)
public bool op_Inequality(XamlMember xamlMember1, XamlMember xamlMember2)
public bool Equals(object obj)
public bool Equals(XamlMember other)
public int GetHashCode()
public string ToString()
public IList`1<string> GetXamlNamespaces()
internal ICustomAttributeProvider GetCustomAttributeProvider()
protected ICustomAttributeProvider LookupCustomAttributeProvider()
protected XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader()
protected IList`1<XamlMember> LookupDependsOn()
protected XamlMemberInvoker LookupInvoker()
protected bool LookupIsAmbient()
protected bool LookupIsEvent()
protected bool LookupIsReadOnly()
protected bool LookupIsReadPublic()
protected bool LookupIsUnknown()
protected bool LookupIsWriteOnly()
protected bool LookupIsWritePublic()
protected XamlType LookupTargetType()
protected XamlType LookupType()
private Type DoGetType()
protected XamlValueConverter`1<TypeConverter> LookupTypeConverter()
protected MethodInfo LookupUnderlyingGetter()
protected MemberInfo LookupUnderlyingMember()
protected MethodInfo LookupUnderlyingSetter()
protected XamlValueConverter`1<ValueSerializer> LookupValueSerializer()
private void VerifyGetter(MethodInfo method)
private void VerifyAdderSetter(MethodInfo method)
public IReadOnlyDictionary`2<char, char> get_MarkupExtensionBracketCharacters()
}
internal System.Xaml.XamlNameResolver : object {
private bool <IsCollectingReferences>k__BackingField
private Dictionary`2<string, NamedObject> objects
private List`1<object> referenced
private EventHandler OnNameScopeInitializationComplete
private int saved_count
private int saved_referenced_count
public bool IsCollectingReferences
public bool IsFixupTokenAvailable
public bool get_IsCollectingReferences()
public void set_IsCollectingReferences(bool value)
public bool get_IsFixupTokenAvailable()
public void add_OnNameScopeInitializationComplete(EventHandler value)
public void remove_OnNameScopeInitializationComplete(EventHandler value)
internal void NameScopeInitializationCompleted(object sender)
public void Save()
public void Restore()
internal void SetNamedObject(string name, object value, bool fullyInitialized)
internal bool Contains(string name)
public string GetName(object value)
internal void SaveAsReferenced(object val)
internal string GetReferencedName(object val)
public object GetFixupToken(IEnumerable`1<string> names)
public object GetFixupToken(IEnumerable`1<string> names, bool canAssignDirectly)
public IEnumerable`1<KeyValuePair`2<string, object>> GetAllNamesAndValuesInScope()
public object Resolve(string name)
public object Resolve(string name, Boolean& isFullyInitialized)
}
internal System.Xaml.XamlNodeExtensions : object {
internal object GetMemberValue(XamlObject xobj, XamlMember xm)
}
internal System.Xaml.XamlNodeInfo : ValueType {
private XamlNodeType node_type
private object value
private XamlNodeMember member
public XamlNodeType NodeType
public XamlObject Object
public XamlNodeMember Member
public object Value
public void .ctor(XamlNodeType nodeType, XamlObject value)
public void .ctor(XamlNodeType nodeType, XamlNodeMember member)
public void .ctor(object value)
public void .ctor(NamespaceDeclaration ns)
public XamlNodeType get_NodeType()
public XamlObject get_Object()
public XamlNodeMember get_Member()
public object get_Value()
}
internal System.Xaml.XamlNodeLineInfo : ValueType {
public XamlNodeInfo Node
public int LineNumber
public int LinePosition
public void .ctor(XamlNodeInfo node, int line, int column)
}
public System.Xaml.XamlNodeList : object {
public int Count
public XamlWriter Writer
public void .ctor(XamlSchemaContext schemaContext)
public void .ctor(XamlSchemaContext schemaContext, int size)
public int get_Count()
public XamlWriter get_Writer()
public void Clear()
public XamlReader GetReader()
}
internal System.Xaml.XamlNodeMember : ValueType {
private XamlObject owner
private XamlMember member
public XamlObject Owner
public XamlMember Member
public XamlObject Value
public void .ctor(XamlObject owner, XamlMember member)
public XamlObject get_Owner()
public XamlMember get_Member()
public XamlObject get_Value()
private XamlType GetType(object obj)
}
public System.Xaml.XamlNodeQueue : object {
private Queue`1<XamlNodeLineInfo> queue
private XamlSchemaContext ctx
private XamlReader reader
private XamlWriter writer
private IXamlLineInfo <LineInfoProvider>k__BackingField
internal IXamlLineInfo LineInfoProvider
internal XamlSchemaContext SchemaContext
public int Count
public bool IsEmpty
public XamlReader Reader
public XamlWriter Writer
public void .ctor(XamlSchemaContext schemaContext)
internal IXamlLineInfo get_LineInfoProvider()
internal void set_LineInfoProvider(IXamlLineInfo value)
internal XamlSchemaContext get_SchemaContext()
public int get_Count()
public bool get_IsEmpty()
public XamlReader get_Reader()
public XamlWriter get_Writer()
internal XamlNodeLineInfo Dequeue()
internal void Enqueue(XamlNodeInfo info)
}
internal System.Xaml.XamlNodeQueueReader : XamlReader {
private XamlNodeQueue source
private XamlNodeLineInfo node
public bool IsEof
public XamlMember Member
public NamespaceDeclaration Namespace
public XamlNodeType NodeType
public XamlSchemaContext SchemaContext
public XamlType Type
public object Value
public bool HasLineInfo
public int LineNumber
public int LinePosition
public void .ctor(XamlNodeQueue source)
public bool get_IsEof()
public XamlMember get_Member()
public NamespaceDeclaration get_Namespace()
public XamlNodeType get_NodeType()
public XamlSchemaContext get_SchemaContext()
public XamlType get_Type()
public object get_Value()
public bool Read()
public bool get_HasLineInfo()
public int get_LineNumber()
public int get_LinePosition()
}
internal System.Xaml.XamlNodeQueueWriter : XamlWriter {
private XamlNodeQueue source
public XamlSchemaContext SchemaContext
public void .ctor(XamlNodeQueue source)
public XamlSchemaContext get_SchemaContext()
public void WriteEndMember()
public void WriteEndObject()
public void WriteGetObject()
public void WriteNamespace(NamespaceDeclaration ns)
public void WriteStartMember(XamlMember xamlMember)
public void WriteStartObject(XamlType type)
public void WriteValue(object value)
}
public System.Xaml.XamlNodeType : Enum {
public byte value__
public XamlNodeType None
public XamlNodeType StartObject
public XamlNodeType GetObject
public XamlNodeType EndObject
public XamlNodeType StartMember
public XamlNodeType EndMember
public XamlNodeType Value
public XamlNodeType NamespaceDeclaration
}
internal System.Xaml.XamlObject : ValueType {
private XamlType type
private InstanceContext context
public XamlType Type
public InstanceContext Context
public void .ctor(XamlType type, object instance)
public void .ctor(XamlType type, InstanceContext context)
public XamlType get_Type()
public InstanceContext get_Context()
private XamlType GetType(object obj)
public object GetRawValue()
}
public System.Xaml.XamlObjectEventArgs : EventArgs {
private object <Instance>k__BackingField
public object Instance
public int ElementLineNumber
public int ElementLinePosition
public Uri SourceBamlUri
public void .ctor(object instance)
public object get_Instance()
private void set_Instance(object value)
public int get_ElementLineNumber()
public int get_ElementLinePosition()
public Uri get_SourceBamlUri()
}
internal System.Xaml.XamlObjectNodeIterator : object {
private XamlObject null_object
private XamlSchemaContext ctx
private object root
private IValueSerializerContext value_serializer_ctx
private int used_reference_ids
private PrefixLookup PrefixLookup
private XamlNameResolver NameResolver
public XamlSchemaContext SchemaContext
public void .ctor(object root, XamlSchemaContext schemaContext, IValueSerializerContext vctx)
private PrefixLookup get_PrefixLookup()
private XamlNameResolver get_NameResolver()
public XamlSchemaContext get_SchemaContext()
private XamlType GetType(object obj)
public IEnumerable`1<XamlNodeInfo> GetNodes()
private IEnumerable`1<XamlNodeInfo> GetNodes(XamlMember xm, XamlObject xobj)
private IEnumerable`1<XamlNodeInfo> GetNodes(XamlMember xm, XamlObject xobj, XamlType overrideMemberType, bool partOfPositionalParameters)
private string GetReferenceName(XamlObject xobj)
private IEnumerable`1<XamlNodeInfo> GetMemberNodes(XamlNodeMember member, IEnumerable`1<XamlNodeInfo> contents)
private IEnumerable`1<XamlNodeMember> GetNodeMembers(XamlObject xobj, IValueSerializerContext vsctx)
private IEnumerable`1<XamlNodeInfo> GetObjectMemberNodes(XamlObject xobj)
private IEnumerable`1<XamlNodeInfo> GetItemsNodes(XamlMember xm, XamlObject xobj)
private IEnumerable`1<XamlNodeInfo> EnumerateMixingMember(IEnumerable`1<XamlNodeInfo> nodes1, XamlMember m2, IEnumerable`1<XamlNodeInfo> nodes2)
private IEnumerable`1<XamlNodeInfo> GetKeyNodes(object ikey, XamlType keyType, XamlNodeMember xknm)
public void PrepareReading()
private IEnumerable`1<string> NamespacesInType(XamlType xt)
}
public System.Xaml.XamlObjectReader : XamlReader {
private bool is_eof
private object root
private object root_raw
private XamlSchemaContext sctx
private IValueSerializerContext value_serializer_context
private IEnumerator`1<NamespaceDeclaration> ns_iterator
private IEnumerator`1<XamlNodeInfo> nodes
private PrefixLookup PrefixLookup
public object Instance
public bool IsEof
public XamlMember Member
public NamespaceDeclaration Namespace
public XamlNodeType NodeType
public XamlSchemaContext SchemaContext
public XamlType Type
public object Value
public void .ctor(object instance)
public void .ctor(object instance, XamlObjectReaderSettings settings)
public void .ctor(object instance, XamlSchemaContext schemaContext)
public void .ctor(object instance, XamlSchemaContext schemaContext, XamlObjectReaderSettings settings)
private PrefixLookup get_PrefixLookup()
public object get_Instance()
public bool get_IsEof()
public XamlMember get_Member()
public NamespaceDeclaration get_Namespace()
public XamlNodeType get_NodeType()
public XamlSchemaContext get_SchemaContext()
public XamlType get_Type()
public object get_Value()
public bool Read()
}
public System.Xaml.XamlObjectReaderException : XamlException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Xaml.XamlObjectReaderSettings : XamlReaderSettings {
private bool <RequireExplicitContentVisibility>k__BackingField
public bool RequireExplicitContentVisibility
public bool get_RequireExplicitContentVisibility()
public void set_RequireExplicitContentVisibility(bool value)
}
public System.Xaml.XamlObjectWriter : XamlWriter {
private XamlSchemaContext sctx
private XamlObjectWriterSettings settings
private XamlObjectWriterInternal intl
private bool lineinfo_was_given
internal XamlObjectWriterSettings Settings
public object Result
public INameScope RootNameScope
public XamlSchemaContext SchemaContext
public bool ShouldProvideLineInfo
public void .ctor(XamlSchemaContext schemaContext)
public void .ctor(XamlSchemaContext schemaContext, XamlObjectWriterSettings settings)
internal XamlObjectWriterSettings get_Settings()
public object get_Result()
public INameScope get_RootNameScope()
public XamlSchemaContext get_SchemaContext()
public bool get_ShouldProvideLineInfo()
public void SetLineInfo(int lineNumber, int linePosition)
public void Clear()
protected void Dispose(bool disposing)
protected internal void OnAfterBeginInit(object value)
protected internal void OnAfterEndInit(object value)
protected internal void OnAfterProperties(object value)
protected internal void OnBeforeProperties(object value)
protected internal bool OnSetValue(object eventSender, XamlMember member, object value)
public void WriteGetObject()
public void WriteNamespace(NamespaceDeclaration namespaceDeclaration)
public void WriteStartObject(XamlType xamlType)
public void WriteValue(object value)
public void WriteStartMember(XamlMember property)
public void WriteEndObject()
public void WriteEndMember()
}
public System.Xaml.XamlObjectWriterException : XamlException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Xaml.XamlObjectWriterInternal : XamlWriterInternalBase {
private string Xmlns2000Namespace
private XamlObjectWriter source
private XamlSchemaContext sctx
private INameScope name_scope
private List`1<NameFixupRequired> pending_name_references
private AmbientProvider ambient_provider
private object <Result>k__BackingField
private Stack`1<object> escaped_objects
private BindingFlags static_flags
public INameScope NameScope
public object Result
internal IXamlNameResolver name_resolver
internal IAmbientProvider AmbientProvider
public void .ctor(XamlObjectWriter source, XamlSchemaContext schemaContext, XamlWriterStateManager manager)
public INameScope get_NameScope()
public object get_Result()
public void set_Result(object value)
protected void OnWriteStartObject()
protected void OnWriteGetObject()
protected void OnWriteEndObject()
protected void OnWriteStartMember(XamlMember property)
protected void OnWriteEndMember()
private void SetEvent(XamlMember member, string value)
private void SetValue(XamlMember member, object value)
private void SetValue(XamlMember member, object target, object value)
private void PopulateObject(bool considerPositionalParameters, IList`1<object> contents)
protected void OnWriteValue(object value)
protected void OnWriteNamespace(NamespaceDeclaration nd)
private void StoreAppropriatelyTypedValue(object obj, object keyObj)
private bool AddToCollectionIfAppropriate(XamlType xt, XamlMember xm, object parent, object obj, object keyObj)
private object GetCorrectlyTypedValue(XamlMember xm, XamlType xt, object value)
private object DoGetCorrectlyTypedValue(XamlMember xm, XamlType xt, object value)
private XamlType ResolveTypeFromName(string name)
private bool IsAllowedType(XamlType xt, object value)
private void InitializeObjectIfRequired(bool waitForParameters)
internal IXamlNameResolver get_name_resolver()
internal IAmbientProvider get_AmbientProvider()
private void ResolvePendingReferences()
private void HandleBeginInit(object value)
private void HandleEndInit(object value)
}
public System.Xaml.XamlObjectWriterSettings : XamlWriterSettings {
private EventHandler`1<XamlObjectEventArgs> <AfterBeginInitHandler>k__BackingField
private EventHandler`1<XamlObjectEventArgs> <AfterEndInitHandler>k__BackingField
private EventHandler`1<XamlObjectEventArgs> <AfterPropertiesHandler>k__BackingField
private EventHandler`1<XamlObjectEventArgs> <BeforePropertiesHandler>k__BackingField
private EventHandler`1<XamlSetValueEventArgs> <XamlSetValueHandler>k__BackingField
private XamlAccessLevel <AccessLevel>k__BackingField
private INameScope <ExternalNameScope>k__BackingField
private bool <IgnoreCanConvert>k__BackingField
private bool <PreferUnconvertedDictionaryKeys>k__BackingField
private bool <RegisterNamesOnExternalNamescope>k__BackingField
private object <RootObjectInstance>k__BackingField
private bool <SkipDuplicatePropertyCheck>k__BackingField
private bool <SkipProvideValueOnRoot>k__BackingField
public EventHandler`1<XamlObjectEventArgs> AfterBeginInitHandler
public EventHandler`1<XamlObjectEventArgs> AfterEndInitHandler
public EventHandler`1<XamlObjectEventArgs> AfterPropertiesHandler
public EventHandler`1<XamlObjectEventArgs> BeforePropertiesHandler
public EventHandler`1<XamlSetValueEventArgs> XamlSetValueHandler
public XamlAccessLevel AccessLevel
public INameScope ExternalNameScope
public bool IgnoreCanConvert
public bool PreferUnconvertedDictionaryKeys
public bool RegisterNamesOnExternalNamescope
public object RootObjectInstance
public bool SkipDuplicatePropertyCheck
public bool SkipProvideValueOnRoot
public Uri SourceBamlUri
public void .ctor(XamlObjectWriterSettings settings)
public EventHandler`1<XamlObjectEventArgs> get_AfterBeginInitHandler()
public void set_AfterBeginInitHandler(EventHandler`1<XamlObjectEventArgs> value)
public EventHandler`1<XamlObjectEventArgs> get_AfterEndInitHandler()
public void set_AfterEndInitHandler(EventHandler`1<XamlObjectEventArgs> value)
public EventHandler`1<XamlObjectEventArgs> get_AfterPropertiesHandler()
public void set_AfterPropertiesHandler(EventHandler`1<XamlObjectEventArgs> value)
public EventHandler`1<XamlObjectEventArgs> get_BeforePropertiesHandler()
public void set_BeforePropertiesHandler(EventHandler`1<XamlObjectEventArgs> value)
public EventHandler`1<XamlSetValueEventArgs> get_XamlSetValueHandler()
public void set_XamlSetValueHandler(EventHandler`1<XamlSetValueEventArgs> value)
public XamlAccessLevel get_AccessLevel()
public void set_AccessLevel(XamlAccessLevel value)
public INameScope get_ExternalNameScope()
public void set_ExternalNameScope(INameScope value)
public bool get_IgnoreCanConvert()
public void set_IgnoreCanConvert(bool value)
public bool get_PreferUnconvertedDictionaryKeys()
public void set_PreferUnconvertedDictionaryKeys(bool value)
public bool get_RegisterNamesOnExternalNamescope()
public void set_RegisterNamesOnExternalNamescope(bool value)
public object get_RootObjectInstance()
public void set_RootObjectInstance(object value)
public bool get_SkipDuplicatePropertyCheck()
public void set_SkipDuplicatePropertyCheck(bool value)
public bool get_SkipProvideValueOnRoot()
public void set_SkipProvideValueOnRoot(bool value)
public Uri get_SourceBamlUri()
public void set_SourceBamlUri(Uri value)
}
public System.Xaml.XamlParseException : XamlException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Xaml.XamlReader : object {
private bool <IsDisposed>k__BackingField
protected bool IsDisposed
public bool IsEof
public XamlMember Member
public NamespaceDeclaration Namespace
public XamlNodeType NodeType
public XamlSchemaContext SchemaContext
public XamlType Type
public object Value
protected bool get_IsDisposed()
private void set_IsDisposed(bool value)
public bool get_IsEof()
public XamlMember get_Member()
public NamespaceDeclaration get_Namespace()
public XamlNodeType get_NodeType()
public XamlSchemaContext get_SchemaContext()
public XamlType get_Type()
public object get_Value()
public void Close()
protected void Dispose(bool disposing)
private void System.IDisposable.Dispose()
public bool Read()
public XamlReader ReadSubtree()
public void Skip()
}
public System.Xaml.XamlReaderSettings : object {
private bool <AllowProtectedMembersOnRoot>k__BackingField
private Uri <BaseUri>k__BackingField
private bool <IgnoreUidsOnPropertyElements>k__BackingField
private Assembly <LocalAssembly>k__BackingField
private bool <ProvideLineInfo>k__BackingField
private bool <ValuesMustBeString>k__BackingField
public bool AllowProtectedMembersOnRoot
public Uri BaseUri
public bool IgnoreUidsOnPropertyElements
public Assembly LocalAssembly
public bool ProvideLineInfo
public bool ValuesMustBeString
public void .ctor(XamlReaderSettings settings)
public bool get_AllowProtectedMembersOnRoot()
public void set_AllowProtectedMembersOnRoot(bool value)
public Uri get_BaseUri()
public void set_BaseUri(Uri value)
public bool get_IgnoreUidsOnPropertyElements()
public void set_IgnoreUidsOnPropertyElements(bool value)
public Assembly get_LocalAssembly()
public void set_LocalAssembly(Assembly value)
public bool get_ProvideLineInfo()
public void set_ProvideLineInfo(bool value)
public bool get_ValuesMustBeString()
public void set_ValuesMustBeString(bool value)
}
public System.Xaml.XamlSchemaContext : object {
private IList`1<Assembly> reference_assemblies
private Dictionary`2<string, string> xaml_nss
private Dictionary`2<string, string> prefixes
private Dictionary`2<string, string> compat_nss
private Dictionary`2<string, List`1<XamlType>> all_xaml_types
private XamlType[] empty_xaml_types
private List`1<XamlType> run_time_types
private bool <FullyQualifyAssemblyNamesInClrNamespaces>k__BackingField
private bool <SupportMarkupExtensionsWithDuplicateArity>k__BackingField
private Dictionary`2<KeyValuePair`2<string, string>, XamlDirective> xaml_directives
private int clr_ns_len
private int clr_ass_len
public bool FullyQualifyAssemblyNamesInClrNamespaces
public IList`1<Assembly> ReferenceAssemblies
private IEnumerable`1<Assembly> AssembliesInScope
public bool SupportMarkupExtensionsWithDuplicateArity
public void .ctor(IEnumerable`1<Assembly> referenceAssemblies)
public void .ctor(XamlSchemaContextSettings settings)
public void .ctor(IEnumerable`1<Assembly> referenceAssemblies, XamlSchemaContextSettings settings)
protected void Finalize()
public bool get_FullyQualifyAssemblyNamesInClrNamespaces()
private void set_FullyQualifyAssemblyNamesInClrNamespaces(bool value)
public IList`1<Assembly> get_ReferenceAssemblies()
private IEnumerable`1<Assembly> get_AssembliesInScope()
public bool get_SupportMarkupExtensionsWithDuplicateArity()
private void set_SupportMarkupExtensionsWithDuplicateArity(bool value)
internal string GetXamlNamespace(string clrNamespace)
public IEnumerable`1<string> GetAllXamlNamespaces()
public ICollection`1<XamlType> GetAllXamlTypes(string xamlNamespace)
public string GetPreferredPrefix(string xmlns)
protected internal XamlValueConverter`1<TConverterBase> GetValueConverter(Type converterType, XamlType targetType)
public XamlDirective GetXamlDirective(string xamlNamespace, string name)
public XamlType GetXamlType(Type type)
public XamlType GetXamlType(XamlTypeName xamlTypeName)
protected internal XamlType GetXamlType(string xamlNamespace, string name, XamlType[] typeArguments)
private bool TypeMatches(XamlType t, string ns, string name, XamlType[] typeArgs)
protected internal Assembly OnAssemblyResolve(string assemblyName)
public bool TryGetCompatibleXamlNamespace(string xamlNamespace, String& compatibleNamespace)
private void OnAssemblyLoaded(object o, AssemblyLoadEventArgs e)
private void FillXamlNamespaces(Assembly ass)
private void FillPrefixes(Assembly ass)
private void FillCompatibilities(Assembly ass)
private void FillAllXamlTypes(Assembly ass)
private Type ResolveXamlTypeName(string xmlNamespace, string xmlLocalName, IList`1<XamlType> typeArguments)
private string GetTypeName(string tns, string name, Type[] genArgs)
}
public System.Xaml.XamlSchemaContextSettings : object {
private bool <FullyQualifyAssemblyNamesInClrNamespaces>k__BackingField
private bool <SupportMarkupExtensionsWithDuplicateArity>k__BackingField
public bool FullyQualifyAssemblyNamesInClrNamespaces
public bool SupportMarkupExtensionsWithDuplicateArity
public void .ctor(XamlSchemaContextSettings settings)
public bool get_FullyQualifyAssemblyNamesInClrNamespaces()
public void set_FullyQualifyAssemblyNamesInClrNamespaces(bool value)
public bool get_SupportMarkupExtensionsWithDuplicateArity()
public void set_SupportMarkupExtensionsWithDuplicateArity(bool value)
}
public System.Xaml.XamlSchemaException : XamlException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Xaml.XamlServices : object {
public object Load(string fileName)
public object Load(Stream stream)
public object Load(TextReader textReader)
public object Load(XmlReader xmlReader)
public object Load(XamlReader xamlReader)
public object Parse(string xaml)
public string Save(object instance)
public void Save(string fileName, object instance)
public void Save(Stream stream, object instance)
public void Save(TextWriter writer, object instance)
public void Save(XmlWriter writer, object instance)
public void Save(XamlWriter writer, object instance)
public void Transform(XamlReader xamlReader, XamlWriter xamlWriter)
public void Transform(XamlReader xamlReader, XamlWriter xamlWriter, bool closeWriter)
}
internal System.Xaml.XamlSubtreeReader : XamlReader {
private XamlReader source
private bool started
private int nest
public bool IsEof
public XamlMember Member
public NamespaceDeclaration Namespace
public XamlNodeType NodeType
public XamlSchemaContext SchemaContext
public XamlType Type
public object Value
internal void .ctor(XamlReader source)
public bool get_IsEof()
public XamlMember get_Member()
public NamespaceDeclaration get_Namespace()
public XamlNodeType get_NodeType()
public XamlSchemaContext get_SchemaContext()
public XamlType get_Type()
public object get_Value()
protected void Dispose(bool disposing)
public bool Read()
}
public System.Xaml.XamlType : object {
private Type type
private Type underlying_type
private XamlType base_type
private XamlTypeInvoker invoker
private string <Name>k__BackingField
private string <PreferredXamlNamespace>k__BackingField
private XamlSchemaContext <SchemaContext>k__BackingField
private IList`1<XamlType> <TypeArguments>k__BackingField
private XamlMember[] empty_array
private List`1<XamlMember> all_members_cache
private List`1<XamlMember> all_attachable_members_cache
private BindingFlags flags_get_static
private XamlValueConverter`1<ValueSerializer> string_value_serializer
internal EventHandler`1<XamlSetMarkupExtensionEventArgs> SetMarkupExtensionHandler
internal EventHandler`1<XamlSetTypeConverterEventArgs> SetTypeConverterHandler
public IList`1<XamlType> AllowedContentTypes
public XamlType BaseType
public bool ConstructionRequiresArguments
public XamlMember ContentProperty
public IList`1<XamlType> ContentWrappers
public XamlValueConverter`1<XamlDeferringLoader> DeferringLoader
public XamlTypeInvoker Invoker
public bool IsAmbient
public bool IsArray
public bool IsCollection
public bool IsConstructible
public bool IsDictionary
public bool IsGeneric
public bool IsMarkupExtension
public bool IsNameScope
public bool IsNameValid
public bool IsNullable
public bool IsPublic
public bool IsUnknown
public bool IsUsableDuringInitialization
public bool IsWhitespaceSignificantCollection
public bool IsXData
public XamlType ItemType
public XamlType KeyType
public XamlType MarkupExtensionReturnType
public string Name
public string PreferredXamlNamespace
public XamlSchemaContext SchemaContext
public bool TrimSurroundingWhitespace
public IList`1<XamlType> TypeArguments
public XamlValueConverter`1<TypeConverter> TypeConverter
public Type UnderlyingType
public XamlValueConverter`1<ValueSerializer> ValueSerializer
public void .ctor(Type underlyingType, XamlSchemaContext schemaContext)
public void .ctor(Type underlyingType, XamlSchemaContext schemaContext, XamlTypeInvoker invoker)
public void .ctor(string unknownTypeNamespace, string unknownTypeName, IList`1<XamlType> typeArguments, XamlSchemaContext schemaContext)
protected void .ctor(string typeName, IList`1<XamlType> typeArguments, XamlSchemaContext schemaContext)
private void .ctor(XamlSchemaContext schemaContext, XamlTypeInvoker invoker)
internal EventHandler`1<XamlSetMarkupExtensionEventArgs> get_SetMarkupExtensionHandler()
internal EventHandler`1<XamlSetTypeConverterEventArgs> get_SetTypeConverterHandler()
public IList`1<XamlType> get_AllowedContentTypes()
public XamlType get_BaseType()
public bool get_ConstructionRequiresArguments()
public XamlMember get_ContentProperty()
public IList`1<XamlType> get_ContentWrappers()
public XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader()
public XamlTypeInvoker get_Invoker()
public bool get_IsAmbient()
public bool get_IsArray()
public bool get_IsCollection()
public bool get_IsConstructible()
public bool get_IsDictionary()
public bool get_IsGeneric()
public bool get_IsMarkupExtension()
public bool get_IsNameScope()
public bool get_IsNameValid()
public bool get_IsNullable()
public bool get_IsPublic()
public bool get_IsUnknown()
public bool get_IsUsableDuringInitialization()
public bool get_IsWhitespaceSignificantCollection()
public bool get_IsXData()
public XamlType get_ItemType()
public XamlType get_KeyType()
public XamlType get_MarkupExtensionReturnType()
public string get_Name()
private void set_Name(string value)
public string get_PreferredXamlNamespace()
private void set_PreferredXamlNamespace(string value)
public XamlSchemaContext get_SchemaContext()
private void set_SchemaContext(XamlSchemaContext value)
public bool get_TrimSurroundingWhitespace()
public IList`1<XamlType> get_TypeArguments()
private void set_TypeArguments(IList`1<XamlType> value)
public XamlValueConverter`1<TypeConverter> get_TypeConverter()
public Type get_UnderlyingType()
public XamlValueConverter`1<ValueSerializer> get_ValueSerializer()
internal string GetInternalXmlName()
public bool op_Equality(XamlType xamlType1, XamlType xamlType2)
private bool IsNull(XamlType a)
public bool op_Inequality(XamlType xamlType1, XamlType xamlType2)
public bool Equals(XamlType other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public bool CanAssignTo(XamlType xamlType)
public XamlMember GetAliasedProperty(XamlDirective directive)
public ICollection`1<XamlMember> GetAllAttachableMembers()
public ICollection`1<XamlMember> GetAllMembers()
public XamlMember GetAttachableMember(string name)
public XamlMember GetMember(string name)
public IList`1<XamlType> GetPositionalParameters(int parameterCount)
public IList`1<string> GetXamlNamespaces()
protected XamlMember LookupAliasedProperty(XamlDirective directive)
protected IEnumerable`1<XamlMember> LookupAllAttachableMembers()
private IEnumerable`1<XamlMember> DoLookupAllAttachableMembers()
protected IEnumerable`1<XamlMember> LookupAllMembers()
private IEnumerable`1<XamlMember> DoLookupAllMembers()
private bool IsPublicAccessor(MethodInfo mi)
private bool IsCollectionType(Type type)
protected IList`1<XamlType> LookupAllowedContentTypes()
protected XamlMember LookupAttachableMember(string name)
protected XamlType LookupBaseType()
protected internal XamlCollectionKind LookupCollectionKind()
protected bool LookupConstructionRequiresArguments()
protected XamlMember LookupContentProperty()
protected IList`1<XamlType> LookupContentWrappers()
internal ICustomAttributeProvider GetCustomAttributeProvider()
protected internal ICustomAttributeProvider LookupCustomAttributeProvider()
protected XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader()
protected XamlTypeInvoker LookupInvoker()
protected bool LookupIsAmbient()
protected bool LookupIsConstructible()
protected bool LookupIsMarkupExtension()
protected bool LookupIsNameScope()
protected bool LookupIsNullable()
protected bool LookupIsPublic()
protected bool LookupIsUnknown()
protected bool LookupIsWhitespaceSignificantCollection()
protected bool LookupIsXData()
protected XamlType LookupItemType()
protected XamlType LookupKeyType()
protected XamlType LookupMarkupExtensionReturnType()
protected XamlMember LookupMember(string name, bool skipReadOnlyCheck)
protected IList`1<XamlType> LookupPositionalParameters(int parameterCount)
protected EventHandler`1<XamlSetMarkupExtensionEventArgs> LookupSetMarkupExtensionHandler()
protected EventHandler`1<XamlSetTypeConverterEventArgs> LookupSetTypeConverterHandler()
protected bool LookupTrimSurroundingWhitespace()
protected XamlValueConverter`1<TypeConverter> LookupTypeConverter()
protected Type LookupUnderlyingType()
protected bool LookupUsableDuringInitialization()
protected XamlValueConverter`1<ValueSerializer> LookupValueSerializer()
internal XamlValueConverter`1<ValueSerializer> LookupValueSerializer(XamlType targetType, ICustomAttributeProvider provider)
private string GetXamlName(Type type)
private bool <.ctor>b__1_0(XamlType t)
private bool <GetInternalXmlName>b__87_0(SpecialTypeName s)
}
internal System.Xaml.XamlTypeResolver : object {
private NamespaceResolver ns_resolver
private XamlSchemaContext schema_context
public void .ctor(NamespaceResolver namespaceResolver, XamlSchemaContext schemaContext)
public Type Resolve(string typeName)
}
public System.Xaml.XamlWriter : object {
private bool <IsDisposed>k__BackingField
protected bool IsDisposed
public XamlSchemaContext SchemaContext
protected bool get_IsDisposed()
private void set_IsDisposed(bool value)
public XamlSchemaContext get_SchemaContext()
public void Close()
protected void Dispose(bool disposing)
private void System.IDisposable.Dispose()
public void WriteEndMember()
public void WriteEndObject()
public void WriteGetObject()
public void WriteNamespace(NamespaceDeclaration namespaceDeclaration)
public void WriteStartMember(XamlMember xamlMember)
public void WriteStartObject(XamlType type)
public void WriteValue(object value)
public void WriteNode(XamlReader reader)
private Exception NotImplemented()
}
internal System.Xaml.XamlWriterInternalBase : object {
private XamlSchemaContext sctx
private XamlWriterStateManager manager
internal IValueSerializerContext service_provider
internal ObjectState root_state
internal Stack`1<ObjectState> object_states
internal PrefixLookup prefix_lookup
private List`1<NamespaceDeclaration> namespaces
internal IAmbientProvider AmbientProvider
protected MemberAndValue CurrentMemberState
protected XamlMember CurrentMember
public void .ctor(XamlSchemaContext schemaContext, XamlWriterStateManager manager)
internal PrefixLookup get_prefix_lookup()
private List`1<NamespaceDeclaration> get_namespaces()
internal IAmbientProvider get_AmbientProvider()
public void CloseAll()
internal string GetPrefix(string ns)
protected MemberAndValue get_CurrentMemberState()
protected XamlMember get_CurrentMember()
public void WriteGetObject()
public void WriteNamespace(NamespaceDeclaration namespaceDeclaration)
public void WriteStartObject(XamlType xamlType)
public void WriteValue(object value)
public void WriteStartMember(XamlMember property)
public void WriteEndObject()
public void WriteEndMember()
protected void OnWriteEndObject()
protected void OnWriteEndMember()
protected void OnWriteStartObject()
protected void OnWriteGetObject()
protected void OnWriteStartMember(XamlMember xm)
protected void OnWriteValue(object value)
protected void OnWriteNamespace(NamespaceDeclaration nd)
protected string GetValueString(XamlMember xm, object value)
}
public System.Xaml.XamlWriterSettings : object {
public void .ctor(XamlWriterSettings settings)
}
internal System.Xaml.XamlWriterStateManager : object {
private bool allow_ns_at_value
private bool allow_object_after_value
private bool allow_parallel_values
private bool allow_empty_member
private bool allow_multiple_results
private XamlWriteState state
private bool ns_pushed
private bool accept_multiple_values
public XamlWriteState State
public bool AcceptMultipleValues
public void .ctor(bool isXmlWriter)
public XamlWriteState get_State()
public bool get_AcceptMultipleValues()
public void set_AcceptMultipleValues(bool value)
public void OnClosingItem()
public void EndMember()
public void EndObject(bool hasMoreNodes)
public void GetObject()
public void StartMember()
public void StartObject()
public void Value()
public void Namespace()
public void NamespaceCleanedUp()
private void CheckState(XamlNodeType next)
private void RejectNamespaces(XamlNodeType next)
public Exception CreateError(string msg)
public Exception CreateNamespaceError(string msg)
}
internal System.Xaml.XamlWriterStateManager`2 : XamlWriterStateManager {
public void .ctor(bool isXmlWriter)
public Exception CreateError(string msg)
public Exception CreateNamespaceError(string msg)
}
internal System.Xaml.XamlWriteState : Enum {
public int value__
public XamlWriteState Initial
public XamlWriteState ObjectStarted
public XamlWriteState MemberStarted
public XamlWriteState ObjectWritten
public XamlWriteState ValueWritten
public XamlWriteState MemberDone
public XamlWriteState End
}
internal System.Xaml.XamlXmlNodeInfo : ValueType {
public bool HasLineInfo
public int LineNumber
public int LinePosition
public XamlNodeType NodeType
public object NodeValue
public void .ctor(XamlNodeType nodeType, object nodeValue, IXmlLineInfo lineInfo)
}
internal System.Xaml.XamlXmlParser : object {
private XmlReader r
private IXmlLineInfo line_info
private XamlSchemaContext sctx
private XamlXmlReaderSettings settings
private IXamlNamespaceResolver xaml_namespace_resolver
private bool xmlbase_done
internal XmlReader Reader
public XamlSchemaContext SchemaContext
public int LineNumber
public int LinePosition
public void .ctor(XmlReader xmlReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings)
internal XmlReader get_Reader()
public XamlSchemaContext get_SchemaContext()
private XamlXmlNodeInfo Node(XamlNodeType nodeType, object nodeValue)
public IEnumerable`1<XamlXmlNodeInfo> Parse()
private IEnumerable`1<XamlXmlNodeInfo> ReadObjectElement(XamlType parentType, XamlMember currentMember)
private IEnumerable`1<XamlXmlNodeInfo> ReadMembers(XamlType parentType, XamlType xt)
private StartTagInfo GetStartTagInfo()
private Dictionary`2<string, string> ProcessAttributes(XmlReader r, List`1<KeyValuePair`2<XamlMember, string>> members)
private void ProcessAttributesToMember(XamlSchemaContext sctx, StartTagInfo sti, XamlType xt)
private XamlMember GetExtraMember(XamlType xt)
private XamlDirective FindStandardDirective(string name, AllowedMemberLocations loc)
private IEnumerable`1<XamlXmlNodeInfo> ReadMemberText(XamlType xt)
private IEnumerable`1<XamlXmlNodeInfo> ReadMemberElement(XamlType parentType, XamlType xt)
private IEnumerable`1<XamlXmlNodeInfo> ReadMember(XamlType parentType, XamlMember xm)
private IEnumerable`1<XamlXmlNodeInfo> ReadCollectionItems(XamlType parentType, XamlMember xm)
private IEnumerable`1<XamlXmlNodeInfo> ReadXData()
public int get_LineNumber()
public int get_LinePosition()
private XamlType <ReadObjectElement>b__12_0(XamlTypeName xxtn)
}
public System.Xaml.XamlXmlReader : XamlReader {
private XmlReaderSettings file_reader_settings
private XamlXmlParser parser
private IEnumerator`1<XamlXmlNodeInfo> iter
public bool HasLineInfo
public bool IsEof
public int LineNumber
public int LinePosition
public XamlMember Member
public NamespaceDeclaration Namespace
public XamlNodeType NodeType
public XamlSchemaContext SchemaContext
public XamlType Type
public object Value
public void .ctor(Stream stream)
public void .ctor(string fileName)
public void .ctor(TextReader textReader)
public void .ctor(XmlReader xmlReader)
public void .ctor(Stream stream, XamlSchemaContext schemaContext)
public void .ctor(Stream stream, XamlXmlReaderSettings settings)
public void .ctor(string fileName, XamlSchemaContext schemaContext)
public void .ctor(string fileName, XamlXmlReaderSettings settings)
public void .ctor(TextReader textReader, XamlSchemaContext schemaContext)
public void .ctor(TextReader textReader, XamlXmlReaderSettings settings)
public void .ctor(XmlReader xmlReader, XamlSchemaContext schemaContext)
public void .ctor(XmlReader xmlReader, XamlXmlReaderSettings settings)
public void .ctor(Stream stream, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings)
public void .ctor(string fileName, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings)
public void .ctor(TextReader textReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings)
public void .ctor(XmlReader xmlReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings)
public bool get_HasLineInfo()
public bool get_IsEof()
public int get_LineNumber()
public int get_LinePosition()
public XamlMember get_Member()
public NamespaceDeclaration get_Namespace()
public XamlNodeType get_NodeType()
public XamlSchemaContext get_SchemaContext()
public XamlType get_Type()
public object get_Value()
public bool Read()
}
public System.Xaml.XamlXmlReaderSettings : XamlReaderSettings {
private bool <CloseInput>k__BackingField
private bool <SkipXmlCompatibilityProcessing>k__BackingField
private string <XmlLang>k__BackingField
private bool <XmlSpacePreserve>k__BackingField
public bool CloseInput
public bool SkipXmlCompatibilityProcessing
public string XmlLang
public bool XmlSpacePreserve
public void .ctor(XamlXmlReaderSettings settings)
public bool get_CloseInput()
public void set_CloseInput(bool value)
public bool get_SkipXmlCompatibilityProcessing()
public void set_SkipXmlCompatibilityProcessing(bool value)
public string get_XmlLang()
public void set_XmlLang(string value)
public bool get_XmlSpacePreserve()
public void set_XmlSpacePreserve(bool value)
}
public System.Xaml.XamlXmlWriter : XamlWriter {
private XmlWriter w
private XamlSchemaContext sctx
private XamlXmlWriterSettings settings
private XamlXmlWriterInternal intl
public XamlSchemaContext SchemaContext
public XamlXmlWriterSettings Settings
public void .ctor(Stream stream, XamlSchemaContext schemaContext)
public void .ctor(Stream stream, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings)
public void .ctor(TextWriter textWriter, XamlSchemaContext schemaContext)
public void .ctor(TextWriter textWriter, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings)
public void .ctor(XmlWriter xmlWriter, XamlSchemaContext schemaContext)
public void .ctor(XmlWriter xmlWriter, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings)
public XamlSchemaContext get_SchemaContext()
public XamlXmlWriterSettings get_Settings()
protected void Dispose(bool disposing)
public void Flush()
public void WriteGetObject()
public void WriteNamespace(NamespaceDeclaration namespaceDeclaration)
public void WriteStartObject(XamlType type)
public void WriteValue(object value)
public void WriteStartMember(XamlMember property)
public void WriteEndObject()
public void WriteEndMember()
}
public System.Xaml.XamlXmlWriterException : XamlException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Xaml.XamlXmlWriterInternal : XamlWriterInternalBase {
private string Xmlns2000Namespace
private XmlWriter w
private List`1<NamespaceDeclaration> local_nss
private List`1<NamespaceDeclaration> local_nss2
private bool inside_toplevel_positional_parameter
private bool inside_attribute_object
public void .ctor(XmlWriter w, XamlSchemaContext schemaContext, XamlWriterStateManager manager)
protected void OnWriteEndObject()
protected void OnWriteEndMember()
protected void OnWriteStartObject()
protected void OnWriteGetObject()
private void WritePendingStartMember(XamlNodeType nodeType)
protected void OnWriteStartMember(XamlMember member)
private bool IsAtTopLevelObject()
private AllowedMemberLocations IsAttribute(XamlType ownerType, XamlMember xm)
private void OnWriteStartMemberElement(XamlType xt, XamlMember xm)
private void OnWriteStartMemberAttribute(XamlType xt, XamlMember xm)
private void OnWriteStartMemberContent(XamlType xt, XamlMember member)
protected void OnWriteValue(object value)
protected void OnWriteNamespace(NamespaceDeclaration nd)
private void WritePendingNamespaces()
}
public System.Xaml.XamlXmlWriterSettings : XamlWriterSettings {
private bool <AssumeValidInput>k__BackingField
private bool <CloseOutput>k__BackingField
public bool AssumeValidInput
public bool CloseOutput
private void .ctor(XamlXmlWriterSettings other)
public bool get_AssumeValidInput()
public void set_AssumeValidInput(bool value)
public bool get_CloseOutput()
public void set_CloseOutput(bool value)
public XamlXmlWriterSettings Copy()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
