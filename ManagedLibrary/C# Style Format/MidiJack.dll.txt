public enum MidiJack.MidiChannel : Enum {
    
public int value__;
    
public static MidiChannel Ch1;
    
public static MidiChannel Ch2;
    
public static MidiChannel Ch3;
    
public static MidiChannel Ch4;
    
public static MidiChannel Ch5;
    
public static MidiChannel Ch6;
    
public static MidiChannel Ch7;
    
public static MidiChannel Ch8;
    
public static MidiChannel Ch9;
    
public static MidiChannel Ch10;
    
public static MidiChannel Ch11;
    
public static MidiChannel Ch12;
    
public static MidiChannel Ch13;
    
public static MidiChannel Ch14;
    
public static MidiChannel Ch15;
    
public static MidiChannel Ch16;
    
public static MidiChannel All;
}
public class MidiJack.MidiDriver : object {
    
private ChannelState[] _channelArray;
    
private int _lastFrame;
    
private bool enabled;
    [CompilerGeneratedAttribute]

private NoteOnDelegate <noteOnDelegate>k__BackingField;
    [CompilerGeneratedAttribute]

private NoteOffDelegate <noteOffDelegate>k__BackingField;
    [CompilerGeneratedAttribute]

private KnobDelegate <knobDelegate>k__BackingField;
    
private static MidiDriver _instance;
    
public NoteOnDelegate noteOnDelegate { get; public set; }
    
public NoteOffDelegate noteOffDelegate { get; public set; }
    
public KnobDelegate knobDelegate { get; public set; }
    
public static MidiDriver Instance { get; }
    public float GetKey(MidiChannel channel, int noteNumber);
    public bool GetKeyDown(MidiChannel channel, int noteNumber);
    public bool GetKeyUp(MidiChannel channel, int noteNumber);
    public Int32[] GetKnobNumbers(MidiChannel channel);
    public float GetKnob(MidiChannel channel, int knobNumber, float defaultValue);
    [CompilerGeneratedAttribute]
public NoteOnDelegate get_noteOnDelegate();
    [CompilerGeneratedAttribute]
public void set_noteOnDelegate(NoteOnDelegate value);
    [CompilerGeneratedAttribute]
public NoteOffDelegate get_noteOffDelegate();
    [CompilerGeneratedAttribute]
public void set_noteOffDelegate(NoteOffDelegate value);
    [CompilerGeneratedAttribute]
public KnobDelegate get_knobDelegate();
    [CompilerGeneratedAttribute]
public void set_knobDelegate(KnobDelegate value);
    public void ToggleEnabled(bool state);
    public void ClearOutstandingData();
    private void UpdateIfNeeded();
    public void Update();
    public static ulong DequeueIncomingData();
    public static MidiDriver get_Instance();
}
public static class MidiJack.MidiMaster : object {
    
public static NoteOnDelegate noteOnDelegate { get; public set; }
    
public static NoteOffDelegate noteOffDelegate { get; public set; }
    
public static KnobDelegate knobDelegate { get; public set; }
    public static NoteOnDelegate get_noteOnDelegate();
    public static void set_noteOnDelegate(NoteOnDelegate value);
    public static NoteOffDelegate get_noteOffDelegate();
    public static void set_noteOffDelegate(NoteOffDelegate value);
    public static KnobDelegate get_knobDelegate();
    public static void set_knobDelegate(KnobDelegate value);
    public static float GetKey(MidiChannel channel, int noteNumber);
    public static float GetKey(int noteNumber);
    public static bool GetKeyDown(MidiChannel channel, int noteNumber);
    public static bool GetKeyDown(int noteNumber);
    public static bool GetKeyUp(MidiChannel channel, int noteNumber);
    public static bool GetKeyUp(int noteNumber);
    public static Int32[] GetKnobNumbers(MidiChannel channel);
    public static Int32[] GetKnobNumbers();
    public static float GetKnob(MidiChannel channel, int knobNumber, float defaultValue);
    public static float GetKnob(int knobNumber, float defaultValue);
    public static void ToggleEnabled(bool state);
}
public class MidiJack.MidiMessage : ValueType {
    
public UInt32 source;
    
public byte status;
    
public byte data1;
    
public byte data2;
    public MidiMessage(ulong data);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", "")]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
    private static MonoScriptData Get();
}
