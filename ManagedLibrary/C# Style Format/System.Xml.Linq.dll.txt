internal SR : object {
public string Argument_AddAttribute
public string Argument_AddNode
public string Argument_AddNonWhitespace
public string Argument_ConvertToString
public string Argument_InvalidExpandedName
public string Argument_InvalidPIName
public string Argument_InvalidPrefix
public string Argument_MustBeDerivedFrom
public string Argument_NamespaceDeclarationPrefixed
public string Argument_NamespaceDeclarationXml
public string Argument_NamespaceDeclarationXmlns
public string Argument_XObjectValue
public string InvalidOperation_DeserializeInstance
public string InvalidOperation_DocumentStructure
public string InvalidOperation_DuplicateAttribute
public string InvalidOperation_ExpectedEndOfFile
public string InvalidOperation_ExpectedInteractive
public string InvalidOperation_ExpectedNodeType
public string InvalidOperation_ExternalCode
public string InvalidOperation_MissingAncestor
public string InvalidOperation_MissingParent
public string InvalidOperation_MissingRoot
public string InvalidOperation_UnexpectedNodeType
public string InvalidOperation_UnresolvedEntityReference
public string InvalidOperation_WriteAttribute
public string NotSupported_WriteBase64
public string NotSupported_WriteEntityRef
public string Argument_CreateNavigator
public string InvalidOperation_BadNodeType
public string InvalidOperation_UnexpectedEvaluation
public string NotSupported_MoveToId
internal string GetString(string name, Object[] args)
internal string GetString(CultureInfo culture, string name, Object[] args)
internal string GetString(string name)
internal string GetString(CultureInfo culture, string name)
internal string Format(string resourceFormat, Object[] args)
internal string Format(string resourceFormat, object p1)
internal string Format(string resourceFormat, object p1, object p2)
internal string Format(CultureInfo ci, string resourceFormat, object p1, object p2)
internal string Format(string resourceFormat, object p1, object p2, object p3)
internal string GetResourceString(string str)
}
internal System.Collections.Generic.ArrayBuilder`1 : ValueType {
private int DefaultCapacity
private int MaxCoreClrArrayLength
private T[] _array
private int _count
public int Capacity
public int Count
public T Item
public void .ctor(int capacity)
public int get_Capacity()
public int get_Count()
public T get_Item(int index)
public void set_Item(int index, T value)
public void Add(T item)
public T First()
public T Last()
public T[] ToArray()
public void UncheckedAdd(T item)
private void EnsureCapacity(int minimum)
}
internal System.Collections.Generic.CopyPosition : ValueType {
private int <Row>k__BackingField
private int <Column>k__BackingField
public CopyPosition Start
internal int Row
internal int Column
private string DebuggerDisplay
internal void .ctor(int row, int column)
public CopyPosition get_Start()
internal int get_Row()
internal int get_Column()
public CopyPosition Normalize(int endColumn)
private string get_DebuggerDisplay()
}
internal System.Collections.Generic.EnumerableHelpers : object {
internal void Copy(IEnumerable`1<T> source, T[] array, int arrayIndex, int count)
internal void IterativeCopy(IEnumerable`1<T> source, T[] array, int arrayIndex, int count)
internal T[] ToArray(IEnumerable`1<T> source)
internal T[] ToArray(IEnumerable`1<T> source, Int32& length)
}
internal System.Collections.Generic.LargeArrayBuilder`1 : ValueType {
private int StartingCapacity
private int ResizeLimit
private int _maxCapacity
private T[] _first
private ArrayBuilder`1<T[]> _buffers
private T[] _current
private int _index
private int _count
public int Count
public void .ctor(bool initialize)
public void .ctor(int maxCapacity)
public int get_Count()
public void Add(T item)
private void AddWithBufferAllocation(T item)
public void AddRange(IEnumerable`1<T> items)
private void AddWithBufferAllocation(T item, T[]& destination, Int32& index)
public void CopyTo(T[] array, int arrayIndex, int count)
public CopyPosition CopyTo(CopyPosition position, T[] array, int arrayIndex, int count)
public T[] GetBuffer(int index)
public void SlowAdd(T item)
public T[] ToArray()
public bool TryMove(T[]& array)
private void AllocateBuffer()
internal int <CopyTo>g__CopyToCore|17_0(T[] sourceBuffer, int sourceIndex, <>c__DisplayClass17_0& )
}
internal System.Text.StringBuilderCache : object {
private int MaxBuilderSize
private int DefaultCapacity
private StringBuilder t_cachedInstance
public StringBuilder Acquire(int capacity)
public void Release(StringBuilder sb)
public string GetStringAndRelease(StringBuilder sb)
}
internal System.Xml.Linq.BaseUriAnnotation : object {
internal string baseUri
public void .ctor(string baseUri)
}
internal System.Xml.Linq.ElementWriter : ValueType {
private XmlWriter _writer
private NamespaceResolver _resolver
public void .ctor(XmlWriter writer)
public void WriteElement(XElement e)
public Task WriteElementAsync(XElement e, CancellationToken cancellationToken)
private string GetPrefixOfNamespace(XNamespace ns, bool allowDefaultNamespace)
private void PushAncestors(XElement e)
private void PushElement(XElement e)
private void WriteEndElement()
private Task WriteEndElementAsync(CancellationToken cancellationToken)
private void WriteFullEndElement()
private Task WriteFullEndElementAsync(CancellationToken cancellationToken)
private void WriteStartElement(XElement e)
private Task WriteStartElementAsync(XElement e, CancellationToken cancellationToken)
}
public System.Xml.Linq.Extensions : object {
public IEnumerable`1<XAttribute> Attributes(IEnumerable`1<XElement> source)
public IEnumerable`1<XAttribute> Attributes(IEnumerable`1<XElement> source, XName name)
public IEnumerable`1<XElement> Ancestors(IEnumerable`1<T> source)
public IEnumerable`1<XElement> Ancestors(IEnumerable`1<T> source, XName name)
public IEnumerable`1<XElement> AncestorsAndSelf(IEnumerable`1<XElement> source)
public IEnumerable`1<XElement> AncestorsAndSelf(IEnumerable`1<XElement> source, XName name)
public IEnumerable`1<XNode> Nodes(IEnumerable`1<T> source)
private IEnumerable`1<XNode> NodesIterator(IEnumerable`1<T> source)
public IEnumerable`1<XNode> DescendantNodes(IEnumerable`1<T> source)
public IEnumerable`1<XElement> Descendants(IEnumerable`1<T> source)
public IEnumerable`1<XElement> Descendants(IEnumerable`1<T> source, XName name)
public IEnumerable`1<XNode> DescendantNodesAndSelf(IEnumerable`1<XElement> source)
public IEnumerable`1<XElement> DescendantsAndSelf(IEnumerable`1<XElement> source)
public IEnumerable`1<XElement> DescendantsAndSelf(IEnumerable`1<XElement> source, XName name)
public IEnumerable`1<XElement> Elements(IEnumerable`1<T> source)
public IEnumerable`1<XElement> Elements(IEnumerable`1<T> source, XName name)
public IEnumerable`1<T> InDocumentOrder(IEnumerable`1<T> source)
private IEnumerable`1<T> DocumentOrderIterator(IEnumerable`1<T> source)
public void Remove(IEnumerable`1<XAttribute> source)
public void Remove(IEnumerable`1<T> source)
private IEnumerable`1<XAttribute> GetAttributes(IEnumerable`1<XElement> source, XName name)
private IEnumerable`1<XElement> GetAncestors(IEnumerable`1<T> source, XName name, bool self)
private IEnumerable`1<XNode> GetDescendantNodes(IEnumerable`1<T> source, bool self)
private IEnumerable`1<XElement> GetDescendants(IEnumerable`1<T> source, XName name, bool self)
private IEnumerable`1<XElement> GetElements(IEnumerable`1<T> source, XName name)
}
internal System.Xml.Linq.Inserter : ValueType {
private XContainer _parent
private XNode _previous
private string _text
public void .ctor(XContainer parent, XNode anchor)
public void Add(object content)
private void AddContent(object content)
private void AddNode(XNode n)
private void AddString(string s)
private void InsertNode(XNode n)
}
internal System.Xml.Linq.LineInfoAnnotation : object {
internal int lineNumber
internal int linePosition
public void .ctor(int lineNumber, int linePosition)
}
internal System.Xml.Linq.LineInfoEndElementAnnotation : LineInfoAnnotation {
public void .ctor(int lineNumber, int linePosition)
}
public System.Xml.Linq.LoadOptions : Enum {
public int value__
public LoadOptions None
public LoadOptions PreserveWhitespace
public LoadOptions SetBaseUri
public LoadOptions SetLineInfo
}
internal System.Xml.Linq.NamespaceCache : ValueType {
private XNamespace _ns
private string _namespaceName
public XNamespace Get(string namespaceName)
}
internal System.Xml.Linq.NamespaceResolver : ValueType {
private int _scope
private NamespaceDeclaration _declaration
private NamespaceDeclaration _rover
public void PushScope()
public void PopScope()
public void Add(string prefix, XNamespace ns)
public void AddFirst(string prefix, XNamespace ns)
public string GetPrefixOfNamespace(XNamespace ns, bool allowDefaultNamespace)
}
public System.Xml.Linq.ReaderOptions : Enum {
public int value__
public ReaderOptions None
public ReaderOptions OmitDuplicateNamespaces
}
public System.Xml.Linq.SaveOptions : Enum {
public int value__
public SaveOptions None
public SaveOptions DisableFormatting
public SaveOptions OmitDuplicateNamespaces
}
internal System.Xml.Linq.StreamingElementWriter : ValueType {
private XmlWriter _writer
private XStreamingElement _element
private List`1<XAttribute> _attributes
private NamespaceResolver _resolver
public void .ctor(XmlWriter w)
private void FlushElement()
private string GetPrefixOfNamespace(XNamespace ns, bool allowDefaultNamespace)
private void PushElement()
private void Write(object content)
private void WriteAttribute(XAttribute a)
private void WriteNode(XNode n)
internal void WriteStreamingElement(XStreamingElement e)
private void WriteString(string s)
}
public System.Xml.Linq.XAttribute : XObject {
internal XAttribute next
internal XName name
internal string value
public IEnumerable`1<XAttribute> EmptySequence
public bool IsNamespaceDeclaration
public XName Name
public XAttribute NextAttribute
public XmlNodeType NodeType
public XAttribute PreviousAttribute
public string Value
public IEnumerable`1<XAttribute> get_EmptySequence()
public void .ctor(XName name, object value)
public void .ctor(XAttribute other)
public bool get_IsNamespaceDeclaration()
public XName get_Name()
public XAttribute get_NextAttribute()
public XmlNodeType get_NodeType()
public XAttribute get_PreviousAttribute()
public string get_Value()
public void set_Value(string value)
public void Remove()
public void SetValue(object value)
public string ToString()
public string op_Explicit(XAttribute attribute)
public bool op_Explicit(XAttribute attribute)
public Nullable`1<bool> op_Explicit(XAttribute attribute)
public int op_Explicit(XAttribute attribute)
public Nullable`1<int> op_Explicit(XAttribute attribute)
public UInt32 op_Explicit(XAttribute attribute)
public Nullable`1<UInt32> op_Explicit(XAttribute attribute)
public long op_Explicit(XAttribute attribute)
public Nullable`1<long> op_Explicit(XAttribute attribute)
public ulong op_Explicit(XAttribute attribute)
public Nullable`1<ulong> op_Explicit(XAttribute attribute)
public float op_Explicit(XAttribute attribute)
public Nullable`1<float> op_Explicit(XAttribute attribute)
public double op_Explicit(XAttribute attribute)
public Nullable`1<double> op_Explicit(XAttribute attribute)
public decimal op_Explicit(XAttribute attribute)
public Nullable`1<decimal> op_Explicit(XAttribute attribute)
public DateTime op_Explicit(XAttribute attribute)
public Nullable`1<DateTime> op_Explicit(XAttribute attribute)
public DateTimeOffset op_Explicit(XAttribute attribute)
public Nullable`1<DateTimeOffset> op_Explicit(XAttribute attribute)
public TimeSpan op_Explicit(XAttribute attribute)
public Nullable`1<TimeSpan> op_Explicit(XAttribute attribute)
public Guid op_Explicit(XAttribute attribute)
public Nullable`1<Guid> op_Explicit(XAttribute attribute)
internal int GetDeepHashCode()
internal string GetPrefixOfNamespace(XNamespace ns)
private void ValidateAttribute(XName name, string value)
}
public System.Xml.Linq.XCData : XText {
public XmlNodeType NodeType
public void .ctor(string value)
public void .ctor(XCData other)
internal void .ctor(XmlReader r)
public XmlNodeType get_NodeType()
public void WriteTo(XmlWriter writer)
public Task WriteToAsync(XmlWriter writer, CancellationToken cancellationToken)
internal XNode CloneNode()
}
public System.Xml.Linq.XComment : XNode {
internal string value
public XmlNodeType NodeType
public string Value
public void .ctor(string value)
public void .ctor(XComment other)
internal void .ctor(XmlReader r)
public XmlNodeType get_NodeType()
public string get_Value()
public void set_Value(string value)
public void WriteTo(XmlWriter writer)
public Task WriteToAsync(XmlWriter writer, CancellationToken cancellationToken)
internal XNode CloneNode()
internal bool DeepEquals(XNode node)
internal int GetDeepHashCode()
}
public System.Xml.Linq.XContainer : XNode {
internal object content
public XNode FirstNode
public XNode LastNode
internal void .ctor(XContainer other)
public XNode get_FirstNode()
public XNode get_LastNode()
public void Add(object content)
public void Add(Object[] content)
public void AddFirst(object content)
public void AddFirst(Object[] content)
public XmlWriter CreateWriter()
public IEnumerable`1<XNode> DescendantNodes()
public IEnumerable`1<XElement> Descendants()
public IEnumerable`1<XElement> Descendants(XName name)
public XElement Element(XName name)
public IEnumerable`1<XElement> Elements()
public IEnumerable`1<XElement> Elements(XName name)
public IEnumerable`1<XNode> Nodes()
public void RemoveNodes()
public void ReplaceNodes(object content)
public void ReplaceNodes(Object[] content)
internal void AddAttribute(XAttribute a)
internal void AddAttributeSkipNotify(XAttribute a)
internal void AddContentSkipNotify(object content)
internal void AddNode(XNode n)
internal void AddNodeSkipNotify(XNode n)
internal void AddString(string s)
internal void AddStringSkipNotify(string s)
internal void AppendNode(XNode n)
internal void AppendNodeSkipNotify(XNode n)
internal void AppendText(StringBuilder sb)
private string GetTextOnly()
private string CollectText(XNode& n)
internal bool ContentsEqual(XContainer e)
internal int ContentsHashCode()
internal void ConvertTextToNode()
internal IEnumerable`1<XNode> GetDescendantNodes(bool self)
internal IEnumerable`1<XElement> GetDescendants(XName name, bool self)
private IEnumerable`1<XElement> GetElements(XName name)
internal string GetStringValue(object value)
internal void ReadContentFrom(XmlReader r)
internal void ReadContentFrom(XmlReader r, LoadOptions o)
internal Task ReadContentFromAsync(XmlReader r, CancellationToken cancellationToken)
internal Task ReadContentFromAsync(XmlReader r, LoadOptions o, CancellationToken cancellationToken)
internal void RemoveNode(XNode n)
private void RemoveNodesSkipNotify()
internal void ValidateNode(XNode node, XNode previous)
internal void ValidateString(string s)
internal void WriteContentTo(XmlWriter writer)
internal Task WriteContentToAsync(XmlWriter writer, CancellationToken cancellationToken)
private void AddContentToList(List`1<object> list, object content)
internal object GetContentSnapshot(object content)
}
public System.Xml.Linq.XDeclaration : object {
private string _version
private string _encoding
private string _standalone
public string Encoding
public string Standalone
public string Version
public void .ctor(string version, string encoding, string standalone)
public void .ctor(XDeclaration other)
internal void .ctor(XmlReader r)
public string get_Encoding()
public void set_Encoding(string value)
public string get_Standalone()
public void set_Standalone(string value)
public string get_Version()
public void set_Version(string value)
public string ToString()
}
public System.Xml.Linq.XDocument : XContainer {
private XDeclaration _declaration
public XDeclaration Declaration
public XDocumentType DocumentType
public XmlNodeType NodeType
public XElement Root
public void .ctor(Object[] content)
public void .ctor(XDeclaration declaration, Object[] content)
public void .ctor(XDocument other)
public XDeclaration get_Declaration()
public void set_Declaration(XDeclaration value)
public XDocumentType get_DocumentType()
public XmlNodeType get_NodeType()
public XElement get_Root()
public XDocument Load(string uri)
public XDocument Load(string uri, LoadOptions options)
public XDocument Load(Stream stream)
public XDocument Load(Stream stream, LoadOptions options)
public Task`1<XDocument> LoadAsync(Stream stream, LoadOptions options, CancellationToken cancellationToken)
public XDocument Load(TextReader textReader)
public XDocument Load(TextReader textReader, LoadOptions options)
public Task`1<XDocument> LoadAsync(TextReader textReader, LoadOptions options, CancellationToken cancellationToken)
public XDocument Load(XmlReader reader)
public XDocument Load(XmlReader reader, LoadOptions options)
public Task`1<XDocument> LoadAsync(XmlReader reader, LoadOptions options, CancellationToken cancellationToken)
private Task`1<XDocument> LoadAsyncInternal(XmlReader reader, LoadOptions options, CancellationToken cancellationToken)
private XDocument InitLoad(XmlReader reader, LoadOptions options)
public XDocument Parse(string text)
public XDocument Parse(string text, LoadOptions options)
public void Save(Stream stream)
public void Save(Stream stream, SaveOptions options)
public Task SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)
public void Save(TextWriter textWriter)
public void Save(TextWriter textWriter, SaveOptions options)
public void Save(XmlWriter writer)
public Task SaveAsync(TextWriter textWriter, SaveOptions options, CancellationToken cancellationToken)
public void Save(string fileName)
public Task SaveAsync(XmlWriter writer, CancellationToken cancellationToken)
public void Save(string fileName, SaveOptions options)
public void WriteTo(XmlWriter writer)
public Task WriteToAsync(XmlWriter writer, CancellationToken cancellationToken)
private Task WriteToAsyncInternal(XmlWriter writer, CancellationToken cancellationToken)
internal void AddAttribute(XAttribute a)
internal void AddAttributeSkipNotify(XAttribute a)
internal XNode CloneNode()
internal bool DeepEquals(XNode node)
internal int GetDeepHashCode()
private T GetFirstNode()
internal bool IsWhitespace(string s)
internal void ValidateNode(XNode node, XNode previous)
private void ValidateDocument(XNode previous, XmlNodeType allowBefore, XmlNodeType allowAfter)
internal void ValidateString(string s)
}
public System.Xml.Linq.XDocumentType : XNode {
private string _name
private string _publicId
private string _systemId
private string _internalSubset
public string InternalSubset
public string Name
public XmlNodeType NodeType
public string PublicId
public string SystemId
public void .ctor(string name, string publicId, string systemId, string internalSubset)
public void .ctor(XDocumentType other)
internal void .ctor(XmlReader r)
public string get_InternalSubset()
public void set_InternalSubset(string value)
public string get_Name()
public void set_Name(string value)
public XmlNodeType get_NodeType()
public string get_PublicId()
public void set_PublicId(string value)
public string get_SystemId()
public void set_SystemId(string value)
public void WriteTo(XmlWriter writer)
public Task WriteToAsync(XmlWriter writer, CancellationToken cancellationToken)
internal XNode CloneNode()
internal bool DeepEquals(XNode node)
internal int GetDeepHashCode()
}
public System.Xml.Linq.XElement : XContainer {
internal XName name
internal XAttribute lastAttr
public IEnumerable`1<XElement> EmptySequence
public XAttribute FirstAttribute
public bool HasAttributes
public bool HasElements
public bool IsEmpty
public XAttribute LastAttribute
public XName Name
public XmlNodeType NodeType
public string Value
public IEnumerable`1<XElement> get_EmptySequence()
public void .ctor(XName name)
public void .ctor(XName name, object content)
public void .ctor(XName name, Object[] content)
public void .ctor(XElement other)
public void .ctor(XStreamingElement other)
internal void .ctor(XmlReader r)
private void .ctor(AsyncConstructionSentry s)
internal void .ctor(XmlReader r, LoadOptions o)
internal Task`1<XElement> CreateAsync(XmlReader r, CancellationToken cancellationToken)
public void Save(string fileName)
public void Save(string fileName, SaveOptions options)
public XAttribute get_FirstAttribute()
public bool get_HasAttributes()
public bool get_HasElements()
public bool get_IsEmpty()
public XAttribute get_LastAttribute()
public XName get_Name()
public void set_Name(XName value)
public XmlNodeType get_NodeType()
public string get_Value()
public void set_Value(string value)
public IEnumerable`1<XElement> AncestorsAndSelf()
public IEnumerable`1<XElement> AncestorsAndSelf(XName name)
public XAttribute Attribute(XName name)
public IEnumerable`1<XAttribute> Attributes()
public IEnumerable`1<XAttribute> Attributes(XName name)
public IEnumerable`1<XNode> DescendantNodesAndSelf()
public IEnumerable`1<XElement> DescendantsAndSelf()
public IEnumerable`1<XElement> DescendantsAndSelf(XName name)
public XNamespace GetDefaultNamespace()
public XNamespace GetNamespaceOfPrefix(string prefix)
public string GetPrefixOfNamespace(XNamespace ns)
public XElement Load(string uri)
public XElement Load(string uri, LoadOptions options)
public XElement Load(Stream stream)
public XElement Load(Stream stream, LoadOptions options)
public Task`1<XElement> LoadAsync(Stream stream, LoadOptions options, CancellationToken cancellationToken)
public XElement Load(TextReader textReader)
public XElement Load(TextReader textReader, LoadOptions options)
public Task`1<XElement> LoadAsync(TextReader textReader, LoadOptions options, CancellationToken cancellationToken)
public XElement Load(XmlReader reader)
public XElement Load(XmlReader reader, LoadOptions options)
public Task`1<XElement> LoadAsync(XmlReader reader, LoadOptions options, CancellationToken cancellationToken)
private Task`1<XElement> LoadAsyncInternal(XmlReader reader, LoadOptions options, CancellationToken cancellationToken)
public XElement Parse(string text)
public XElement Parse(string text, LoadOptions options)
public void RemoveAll()
public void RemoveAttributes()
public void ReplaceAll(object content)
public void ReplaceAll(Object[] content)
public void ReplaceAttributes(object content)
public void ReplaceAttributes(Object[] content)
public void Save(Stream stream)
public void Save(Stream stream, SaveOptions options)
public Task SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)
public void Save(TextWriter textWriter)
public void Save(TextWriter textWriter, SaveOptions options)
public Task SaveAsync(TextWriter textWriter, SaveOptions options, CancellationToken cancellationToken)
public void Save(XmlWriter writer)
public Task SaveAsync(XmlWriter writer, CancellationToken cancellationToken)
private Task SaveAsyncInternal(XmlWriter writer, CancellationToken cancellationToken)
public void SetAttributeValue(XName name, object value)
public void SetElementValue(XName name, object value)
public void SetValue(object value)
public void WriteTo(XmlWriter writer)
public Task WriteToAsync(XmlWriter writer, CancellationToken cancellationToken)
public string op_Explicit(XElement element)
public bool op_Explicit(XElement element)
public Nullable`1<bool> op_Explicit(XElement element)
public int op_Explicit(XElement element)
public Nullable`1<int> op_Explicit(XElement element)
public UInt32 op_Explicit(XElement element)
public Nullable`1<UInt32> op_Explicit(XElement element)
public long op_Explicit(XElement element)
public Nullable`1<long> op_Explicit(XElement element)
public ulong op_Explicit(XElement element)
public Nullable`1<ulong> op_Explicit(XElement element)
public float op_Explicit(XElement element)
public Nullable`1<float> op_Explicit(XElement element)
public double op_Explicit(XElement element)
public Nullable`1<double> op_Explicit(XElement element)
public decimal op_Explicit(XElement element)
public Nullable`1<decimal> op_Explicit(XElement element)
public DateTime op_Explicit(XElement element)
public Nullable`1<DateTime> op_Explicit(XElement element)
public DateTimeOffset op_Explicit(XElement element)
public Nullable`1<DateTimeOffset> op_Explicit(XElement element)
public TimeSpan op_Explicit(XElement element)
public Nullable`1<TimeSpan> op_Explicit(XElement element)
public Guid op_Explicit(XElement element)
public Nullable`1<Guid> op_Explicit(XElement element)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
internal void AddAttribute(XAttribute a)
internal void AddAttributeSkipNotify(XAttribute a)
internal void AppendAttribute(XAttribute a)
internal void AppendAttributeSkipNotify(XAttribute a)
private bool AttributesEqual(XElement e)
internal XNode CloneNode()
internal bool DeepEquals(XNode node)
private IEnumerable`1<XAttribute> GetAttributes(XName name)
private string GetNamespaceOfPrefixInScope(string prefix, XElement outOfScope)
internal int GetDeepHashCode()
private void ReadElementFrom(XmlReader r, LoadOptions o)
private Task ReadElementFromAsync(XmlReader r, LoadOptions o, CancellationToken cancellationTokentoken)
private void ReadElementFromImpl(XmlReader r, LoadOptions o)
internal void RemoveAttribute(XAttribute a)
private void RemoveAttributesSkipNotify()
internal void SetEndElementLineInfo(int lineNumber, int linePosition)
internal void ValidateNode(XNode node, XNode previous)
}
internal System.Xml.Linq.XHashtable`1 : object {
private XHashtableState<TValue> _state
private int StartingHash
public void .ctor(ExtractKeyDelegate<TValue> extractKey, int capacity)
public bool TryGetValue(string key, int index, int count, TValue& value)
public TValue Add(TValue value)
}
internal System.Xml.Linq.XHelper : object {
internal bool IsInstanceOfType(object o, Type type)
}
public System.Xml.Linq.XName : object {
private XNamespace _ns
private string _localName
private int _hashCode
public string LocalName
public XNamespace Namespace
public string NamespaceName
internal void .ctor(XNamespace ns, string localName)
public string get_LocalName()
public XNamespace get_Namespace()
public string get_NamespaceName()
public string ToString()
public XName Get(string expandedName)
public XName Get(string localName, string namespaceName)
public XName op_Implicit(string expandedName)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(XName left, XName right)
public bool op_Inequality(XName left, XName right)
private bool System.IEquatable<System.Xml.Linq.XName>.Equals(XName other)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Xml.Linq.XNamespace : object {
internal string xmlPrefixNamespace
internal string xmlnsPrefixNamespace
private XHashtable`1<WeakReference> s_namespaces
private WeakReference s_refNone
private WeakReference s_refXml
private WeakReference s_refXmlns
private string _namespaceName
private int _hashCode
private XHashtable`1<XName> _names
private int NamesCapacity
private int NamespacesCapacity
public string NamespaceName
public XNamespace None
public XNamespace Xml
public XNamespace Xmlns
internal void .ctor(string namespaceName)
public string get_NamespaceName()
public XName GetName(string localName)
public string ToString()
public XNamespace get_None()
public XNamespace get_Xml()
public XNamespace get_Xmlns()
public XNamespace Get(string namespaceName)
public XNamespace op_Implicit(string namespaceName)
public XName op_Addition(XNamespace ns, string localName)
public bool Equals(object obj)
public int GetHashCode()
public bool op_Equality(XNamespace left, XNamespace right)
public bool op_Inequality(XNamespace left, XNamespace right)
internal XName GetName(string localName, int index, int count)
internal XNamespace Get(string namespaceName, int index, int count)
private string ExtractLocalName(XName n)
private string ExtractNamespace(WeakReference r)
private XNamespace EnsureNamespace(WeakReference& refNmsp, string namespaceName)
}
public System.Xml.Linq.XNode : XObject {
private XNodeDocumentOrderComparer s_documentOrderComparer
private XNodeEqualityComparer s_equalityComparer
internal XNode next
public XNode NextNode
public XNode PreviousNode
public XNodeDocumentOrderComparer DocumentOrderComparer
public XNodeEqualityComparer EqualityComparer
public XNode get_NextNode()
public XNode get_PreviousNode()
public XNodeDocumentOrderComparer get_DocumentOrderComparer()
public XNodeEqualityComparer get_EqualityComparer()
public void AddAfterSelf(object content)
public void AddAfterSelf(Object[] content)
public void AddBeforeSelf(object content)
public void AddBeforeSelf(Object[] content)
public IEnumerable`1<XElement> Ancestors()
public IEnumerable`1<XElement> Ancestors(XName name)
public int CompareDocumentOrder(XNode n1, XNode n2)
public XmlReader CreateReader()
public XmlReader CreateReader(ReaderOptions readerOptions)
public IEnumerable`1<XNode> NodesAfterSelf()
public IEnumerable`1<XNode> NodesBeforeSelf()
public IEnumerable`1<XElement> ElementsAfterSelf()
public IEnumerable`1<XElement> ElementsAfterSelf(XName name)
public IEnumerable`1<XElement> ElementsBeforeSelf()
public IEnumerable`1<XElement> ElementsBeforeSelf(XName name)
public bool IsAfter(XNode node)
public bool IsBefore(XNode node)
public XNode ReadFrom(XmlReader reader)
public Task`1<XNode> ReadFromAsync(XmlReader reader, CancellationToken cancellationToken)
private Task`1<XNode> ReadFromAsyncInternal(XmlReader reader, CancellationToken cancellationToken)
public void Remove()
public void ReplaceWith(object content)
public void ReplaceWith(Object[] content)
public string ToString()
public string ToString(SaveOptions options)
public bool DeepEquals(XNode n1, XNode n2)
public void WriteTo(XmlWriter writer)
public Task WriteToAsync(XmlWriter writer, CancellationToken cancellationToken)
internal void AppendText(StringBuilder sb)
internal XNode CloneNode()
internal bool DeepEquals(XNode node)
internal IEnumerable`1<XElement> GetAncestors(XName name, bool self)
private IEnumerable`1<XElement> GetElementsAfterSelf(XName name)
private IEnumerable`1<XElement> GetElementsBeforeSelf(XName name)
internal int GetDeepHashCode()
internal XmlReaderSettings GetXmlReaderSettings(LoadOptions o)
internal XmlWriterSettings GetXmlWriterSettings(SaveOptions o)
private string GetXmlString(SaveOptions o)
}
internal System.Xml.Linq.XNodeBuilder : XmlWriter {
private List`1<object> _content
private XContainer _parent
private XName _attrName
private string _attrValue
private XContainer _root
public XmlWriterSettings Settings
public WriteState WriteState
public void .ctor(XContainer container)
public XmlWriterSettings get_Settings()
public WriteState get_WriteState()
protected void Dispose(bool disposing)
public void Close()
public void Flush()
public string LookupPrefix(string namespaceName)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteCData(string text)
public void WriteCharEntity(char ch)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteComment(string text)
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteEndAttribute()
public void WriteEndDocument()
public void WriteEndElement()
public void WriteEntityRef(string name)
public void WriteFullEndElement()
public void WriteProcessingInstruction(string name, string text)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteStartAttribute(string prefix, string localName, string namespaceName)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteStartElement(string prefix, string localName, string namespaceName)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowCh, char highCh)
public void WriteValue(DateTimeOffset value)
public void WriteWhitespace(string ws)
private void Add(object o)
private void AddNode(XNode n)
private void AddString(string s)
}
public System.Xml.Linq.XNodeDocumentOrderComparer : object {
public int Compare(XNode x, XNode y)
private int System.Collections.IComparer.Compare(object x, object y)
}
public System.Xml.Linq.XNodeEqualityComparer : object {
public bool Equals(XNode x, XNode y)
public int GetHashCode(XNode obj)
private bool System.Collections.IEqualityComparer.Equals(object x, object y)
private int System.Collections.IEqualityComparer.GetHashCode(object obj)
}
internal System.Xml.Linq.XNodeReader : XmlReader {
private Char[] s_WhitespaceChars
private object _source
private object _parent
private ReadState _state
private XNode _root
private XmlNameTable _nameTable
private bool _omitDuplicateNamespaces
public int AttributeCount
public string BaseURI
public int Depth
public bool EOF
public bool HasAttributes
public bool HasValue
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public ReadState ReadState
public XmlReaderSettings Settings
public string Value
public string XmlLang
public XmlSpace XmlSpace
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
private bool IsEndElement
private bool IsInteractive
internal void .ctor(XNode node, XmlNameTable nameTable, ReaderOptions options)
internal void .ctor(XNode node, XmlNameTable nameTable)
public int get_AttributeCount()
public string get_BaseURI()
public int get_Depth()
private int GetDepth(XObject o)
public bool get_EOF()
public bool get_HasAttributes()
public bool get_HasValue()
public bool get_IsEmptyElement()
public string get_LocalName()
private string GetLocalName()
public string get_Name()
public string get_NamespaceURI()
private string GetNamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
private string GetPrefix()
public ReadState get_ReadState()
public XmlReaderSettings get_Settings()
public string get_Value()
public string get_XmlLang()
public XmlSpace get_XmlSpace()
protected void Dispose(bool disposing)
public void Close()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceName)
public string GetAttribute(int index)
public string LookupNamespace(string prefix)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceName)
public void MoveToAttribute(int index)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool Read()
public bool ReadAttributeValue()
public bool ReadToDescendant(string localName, string namespaceName)
public bool ReadToFollowing(string localName, string namespaceName)
public bool ReadToNextSibling(string localName, string namespaceName)
public void ResolveEntity()
public void Skip()
private bool System.Xml.IXmlLineInfo.HasLineInfo()
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
private bool get_IsEndElement()
private void set_IsEndElement(bool value)
private bool get_IsInteractive()
private XmlNameTable CreateNameTable()
private XElement GetElementInAttributeScope()
private XElement GetElementInScope()
private void GetNameInAttributeScope(string qualifiedName, XElement e, String& localName, String& namespaceName)
private bool Read(bool skipContent)
private bool ReadIntoDocument(XDocument d)
private bool ReadIntoElement(XElement e)
private bool ReadIntoAttribute(XAttribute a)
private bool ReadOverAttribute(XAttribute a, bool skipContent)
private bool ReadOverNode(XNode n)
private bool ReadOverText(bool skipContent)
private bool ReadToEnd()
private bool IsDuplicateNamespaceAttribute(XAttribute candidateAttribute)
private bool IsDuplicateNamespaceAttributeInner(XAttribute candidateAttribute)
private XAttribute GetFirstNonDuplicateNamespaceAttribute(XAttribute candidate)
}
public System.Xml.Linq.XObject : object {
internal XContainer parent
internal object annotations
public string BaseUri
public XDocument Document
public XmlNodeType NodeType
public XElement Parent
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
internal bool HasBaseUri
public string get_BaseUri()
public XDocument get_Document()
public XmlNodeType get_NodeType()
public XElement get_Parent()
public void AddAnnotation(object annotation)
public object Annotation(Type type)
private object AnnotationForSealedType(Type type)
public T Annotation()
public IEnumerable`1<object> Annotations(Type type)
private IEnumerable`1<object> AnnotationsIterator(Type type)
public IEnumerable`1<T> Annotations()
public void RemoveAnnotations(Type type)
public void RemoveAnnotations()
public void add_Changed(EventHandler`1<XObjectChangeEventArgs> value)
public void remove_Changed(EventHandler`1<XObjectChangeEventArgs> value)
public void add_Changing(EventHandler`1<XObjectChangeEventArgs> value)
public void remove_Changing(EventHandler`1<XObjectChangeEventArgs> value)
private bool System.Xml.IXmlLineInfo.HasLineInfo()
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
internal bool get_HasBaseUri()
internal bool NotifyChanged(object sender, XObjectChangeEventArgs e)
internal bool NotifyChanging(object sender, XObjectChangeEventArgs e)
internal void SetBaseUri(string baseUri)
internal void SetLineInfo(int lineNumber, int linePosition)
internal bool SkipNotify()
internal SaveOptions GetSaveOptionsFromAnnotations()
}
public System.Xml.Linq.XObjectChange : Enum {
public int value__
public XObjectChange Add
public XObjectChange Remove
public XObjectChange Name
public XObjectChange Value
}
internal System.Xml.Linq.XObjectChangeAnnotation : object {
internal EventHandler`1<XObjectChangeEventArgs> changing
internal EventHandler`1<XObjectChangeEventArgs> changed
}
public System.Xml.Linq.XObjectChangeEventArgs : EventArgs {
private XObjectChange _objectChange
public XObjectChangeEventArgs Add
public XObjectChangeEventArgs Remove
public XObjectChangeEventArgs Name
public XObjectChangeEventArgs Value
public XObjectChange ObjectChange
public void .ctor(XObjectChange objectChange)
public XObjectChange get_ObjectChange()
}
public System.Xml.Linq.XProcessingInstruction : XNode {
internal string target
internal string data
public string Data
public XmlNodeType NodeType
public string Target
public void .ctor(string target, string data)
public void .ctor(XProcessingInstruction other)
internal void .ctor(XmlReader r)
public string get_Data()
public void set_Data(string value)
public XmlNodeType get_NodeType()
public string get_Target()
public void set_Target(string value)
public void WriteTo(XmlWriter writer)
public Task WriteToAsync(XmlWriter writer, CancellationToken cancellationToken)
internal XNode CloneNode()
internal bool DeepEquals(XNode node)
internal int GetDeepHashCode()
private void ValidateName(string name)
}
public System.Xml.Linq.XStreamingElement : object {
internal XName name
internal object content
public XName Name
public void .ctor(XName name)
public void .ctor(XName name, object content)
public void .ctor(XName name, Object[] content)
public XName get_Name()
public void set_Name(XName value)
public void Add(object content)
public void Add(Object[] content)
public void Save(Stream stream)
public void Save(Stream stream, SaveOptions options)
public void Save(TextWriter textWriter)
public void Save(TextWriter textWriter, SaveOptions options)
public void Save(XmlWriter writer)
public void Save(string fileName)
public void Save(string fileName, SaveOptions options)
public string ToString()
public string ToString(SaveOptions options)
public void WriteTo(XmlWriter writer)
private string GetXmlString(SaveOptions o)
}
public System.Xml.Linq.XText : XNode {
internal string text
public XmlNodeType NodeType
public string Value
public void .ctor(string value)
public void .ctor(XText other)
internal void .ctor(XmlReader r)
public XmlNodeType get_NodeType()
public string get_Value()
public void set_Value(string value)
public void WriteTo(XmlWriter writer)
public Task WriteToAsync(XmlWriter writer, CancellationToken cancellationToken)
internal void AppendText(StringBuilder sb)
internal XNode CloneNode()
internal bool DeepEquals(XNode node)
internal int GetDeepHashCode()
}
public System.Xml.Schema.Extensions : object {
public IXmlSchemaInfo GetSchemaInfo(XElement source)
public IXmlSchemaInfo GetSchemaInfo(XAttribute source)
public void Validate(XDocument source, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler)
public void Validate(XDocument source, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler, bool addSchemaInfo)
public void Validate(XElement source, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler)
public void Validate(XElement source, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler, bool addSchemaInfo)
public void Validate(XAttribute source, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler)
public void Validate(XAttribute source, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler, bool addSchemaInfo)
}
internal System.Xml.Schema.XmlSchemaInfoEqualityComparer : object {
public bool Equals(XmlSchemaInfo si1, XmlSchemaInfo si2)
public int GetHashCode(XmlSchemaInfo si)
}
internal System.Xml.Schema.XNodeValidator : object {
private XmlSchemaSet schemas
private ValidationEventHandler validationEventHandler
private XObject source
private bool addSchemaInfo
private XmlNamespaceManager namespaceManager
private XmlSchemaValidator validator
private Dictionary`2<XmlSchemaInfo, XmlSchemaInfo> schemaInfos
private ArrayList defaultAttributes
private XName xsiTypeName
private XName xsiNilName
public void .ctor(XmlSchemaSet schemas, ValidationEventHandler validationEventHandler)
public void Validate(XObject source, XmlSchemaObject partialValidationType, bool addSchemaInfo)
private XmlSchemaInfo GetDefaultAttributeSchemaInfo(XmlSchemaAttribute sa)
private string GetDefaultValue(XmlSchemaAttribute sa)
private string GetDefaultValue(XmlSchemaElement se)
private void ReplaceSchemaInfo(XObject o, XmlSchemaInfo schemaInfo)
private void PushAncestorsAndSelf(XElement e)
private void PushElement(XElement e, String& xsiType, String& xsiNil)
private IXmlLineInfo SaveLineInfo(XObject source)
private void RestoreLineInfo(IXmlLineInfo originalLineInfo)
private void ValidateAttribute(XAttribute a)
private void ValidateAttributes(XElement e)
private void ValidateElement(XElement e)
private void ValidateNodes(XElement e)
private void ValidationCallback(object sender, ValidationEventArgs e)
}
public System.Xml.XPath.Extensions : object {
public XPathNavigator CreateNavigator(XNode node)
public XPathNavigator CreateNavigator(XNode node, XmlNameTable nameTable)
public object XPathEvaluate(XNode node, string expression)
public object XPathEvaluate(XNode node, string expression, IXmlNamespaceResolver resolver)
public XElement XPathSelectElement(XNode node, string expression)
public XElement XPathSelectElement(XNode node, string expression, IXmlNamespaceResolver resolver)
public IEnumerable`1<XElement> XPathSelectElements(XNode node, string expression)
public IEnumerable`1<XElement> XPathSelectElements(XNode node, string expression, IXmlNamespaceResolver resolver)
private XText CalibrateText(XText n)
}
internal System.Xml.XPath.XAttributeExtensions : object {
public string GetPrefixOfNamespace(XAttribute attribute, XNamespace ns)
}
public System.Xml.XPath.XDocumentExtensions : object {
public IXPathNavigable ToXPathNavigable(XNode node)
}
internal System.Xml.XPath.XNodeNavigator : XPathNavigator {
internal string xmlPrefixNamespace
internal string xmlnsPrefixNamespace
private int DocumentContentMask
private Int32[] s_ElementContentMasks
private int TextMask
private XAttribute s_XmlNamespaceDeclaration
private XObject _source
private XElement _parent
private XmlNameTable _nameTable
public string BaseURI
public bool HasAttributes
public bool HasChildren
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XPathNodeType NodeType
public string Prefix
public object UnderlyingObject
public string Value
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
public void .ctor(XNode node, XmlNameTable nameTable)
public void .ctor(XNodeNavigator other)
public string get_BaseURI()
public bool get_HasAttributes()
public bool get_HasChildren()
public bool get_IsEmptyElement()
public string get_LocalName()
private string GetLocalName()
public string get_Name()
public string get_NamespaceURI()
private string GetNamespaceURI()
public XmlNameTable get_NameTable()
public XPathNodeType get_NodeType()
public string get_Prefix()
private string GetPrefix()
public object get_UnderlyingObject()
public string get_Value()
public XPathNavigator Clone()
public bool IsSamePosition(XPathNavigator navigator)
public bool MoveTo(XPathNavigator navigator)
public bool MoveToAttribute(string localName, string namespaceName)
public bool MoveToChild(string localName, string namespaceName)
public bool MoveToChild(XPathNodeType type)
public bool MoveToFirstAttribute()
public bool MoveToFirstChild()
public bool MoveToFirstNamespace(XPathNamespaceScope scope)
public bool MoveToId(string id)
public bool MoveToNamespace(string localName)
public bool MoveToNext()
public bool MoveToNext(string localName, string namespaceName)
public bool MoveToNext(XPathNodeType type)
public bool MoveToNextAttribute()
public bool MoveToNextNamespace(XPathNamespaceScope scope)
public bool MoveToParent()
public bool MoveToPrevious()
public XmlReader ReadSubtree()
private bool System.Xml.IXmlLineInfo.HasLineInfo()
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
private string CollectText(XText n)
private XmlNameTable CreateNameTable()
private bool IsContent(XContainer c, XNode n)
private bool IsSamePosition(XNodeNavigator n1, XNodeNavigator n2)
private bool IsXmlNamespaceDeclaration(XAttribute a)
private int GetElementContentMask(XPathNodeType type)
private XAttribute GetFirstNamespaceDeclarationGlobal(XElement e)
private XAttribute GetFirstNamespaceDeclarationLocal(XElement e)
private XAttribute GetNextNamespaceDeclarationGlobal(XAttribute a)
private XAttribute GetNextNamespaceDeclarationLocal(XAttribute a)
private XAttribute GetXmlNamespaceDeclaration()
private bool HasNamespaceDeclarationInScope(XAttribute a, XElement e)
}
internal System.Xml.XPath.XObjectExtensions : object {
public XContainer GetParent(XObject obj)
}
internal System.Xml.XPath.XPathEvaluator : ValueType {
public object Evaluate(XNode node, string expression, IXmlNamespaceResolver resolver)
private IEnumerable`1<T> EvaluateIterator(XPathNodeIterator result)
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
