internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string FxFileVersion
public string VsVersion
public string AssemblyI18N
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_Core
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
public System.Xml.Linq.Extensions : object {
public IEnumerable`1<XElement> Ancestors(IEnumerable`1<T> source)
public IEnumerable`1<XElement> Ancestors(IEnumerable`1<T> source, XName name)
public IEnumerable`1<XElement> AncestorsAndSelf(IEnumerable`1<XElement> source)
public IEnumerable`1<XElement> AncestorsAndSelf(IEnumerable`1<XElement> source, XName name)
public IEnumerable`1<XAttribute> Attributes(IEnumerable`1<XElement> source)
public IEnumerable`1<XAttribute> Attributes(IEnumerable`1<XElement> source, XName name)
public IEnumerable`1<XNode> DescendantNodes(IEnumerable`1<T> source)
public IEnumerable`1<XNode> DescendantNodesAndSelf(IEnumerable`1<XElement> source)
public IEnumerable`1<XElement> Descendants(IEnumerable`1<T> source)
public IEnumerable`1<XElement> Descendants(IEnumerable`1<T> source, XName name)
public IEnumerable`1<XElement> DescendantsAndSelf(IEnumerable`1<XElement> source)
public IEnumerable`1<XElement> DescendantsAndSelf(IEnumerable`1<XElement> source, XName name)
public IEnumerable`1<XElement> Elements(IEnumerable`1<T> source)
public IEnumerable`1<XElement> Elements(IEnumerable`1<T> source, XName name)
public IEnumerable`1<T> InDocumentOrder(IEnumerable`1<T> source)
public IEnumerable`1<XNode> Nodes(IEnumerable`1<T> source)
public void Remove(IEnumerable`1<XAttribute> source)
public void Remove(IEnumerable`1<T> source)
}
public System.Xml.Linq.LoadOptions : Enum {
public int value__
public LoadOptions None
public LoadOptions PreserveWhitespace
public LoadOptions SetBaseUri
public LoadOptions SetLineInfo
}
public System.Xml.Linq.SaveOptions : Enum {
public int value__
public SaveOptions None
public SaveOptions DisableFormatting
}
public System.Xml.Linq.XAttribute : XObject {
private XAttribute[] empty_array
private XName name
private string value
private XAttribute next
private XAttribute previous
private Char[] escapeChars
public IEnumerable`1<XAttribute> EmptySequence
public bool IsNamespaceDeclaration
public XName Name
public XAttribute NextAttribute
public XmlNodeType NodeType
public XAttribute PreviousAttribute
public string Value
public void .ctor(XAttribute other)
public void .ctor(XName name, object value)
public IEnumerable`1<XAttribute> get_EmptySequence()
public bool get_IsNamespaceDeclaration()
public XName get_Name()
public XAttribute get_NextAttribute()
internal void set_NextAttribute(XAttribute value)
public XmlNodeType get_NodeType()
public XAttribute get_PreviousAttribute()
internal void set_PreviousAttribute(XAttribute value)
public string get_Value()
public void set_Value(string value)
public void Remove()
public void SetValue(object value)
public string ToString()
public bool op_Explicit(XAttribute attribute)
public Nullable`1<bool> op_Explicit(XAttribute attribute)
public DateTime op_Explicit(XAttribute attribute)
public Nullable`1<DateTime> op_Explicit(XAttribute attribute)
public DateTimeOffset op_Explicit(XAttribute attribute)
public Nullable`1<DateTimeOffset> op_Explicit(XAttribute attribute)
public decimal op_Explicit(XAttribute attribute)
public Nullable`1<decimal> op_Explicit(XAttribute attribute)
public double op_Explicit(XAttribute attribute)
public Nullable`1<double> op_Explicit(XAttribute attribute)
public float op_Explicit(XAttribute attribute)
public Nullable`1<float> op_Explicit(XAttribute attribute)
public Guid op_Explicit(XAttribute attribute)
public Nullable`1<Guid> op_Explicit(XAttribute attribute)
public int op_Explicit(XAttribute attribute)
public Nullable`1<int> op_Explicit(XAttribute attribute)
public long op_Explicit(XAttribute attribute)
public Nullable`1<long> op_Explicit(XAttribute attribute)
public UInt32 op_Explicit(XAttribute attribute)
public Nullable`1<UInt32> op_Explicit(XAttribute attribute)
public ulong op_Explicit(XAttribute attribute)
public Nullable`1<ulong> op_Explicit(XAttribute attribute)
public TimeSpan op_Explicit(XAttribute attribute)
public Nullable`1<TimeSpan> op_Explicit(XAttribute attribute)
public string op_Explicit(XAttribute attribute)
}
public System.Xml.Linq.XCData : XText {
public XmlNodeType NodeType
public void .ctor(string value)
public void .ctor(XCData other)
public XmlNodeType get_NodeType()
public void WriteTo(XmlWriter w)
}
internal System.Xml.Linq.XChildrenIterator : object {
private XContainer source
private XNode n
public void .ctor(XContainer source)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public IEnumerator`1<object> GetEnumerator()
}
public System.Xml.Linq.XComment : XNode {
private string value
public XmlNodeType NodeType
public string Value
public void .ctor(string value)
public void .ctor(XComment other)
public XmlNodeType get_NodeType()
public string get_Value()
public void set_Value(string value)
public void WriteTo(XmlWriter w)
}
public System.Xml.Linq.XContainer : XNode {
private XNode first
private XNode last
public XNode FirstNode
public XNode LastNode
public XNode get_FirstNode()
internal void set_FirstNode(XNode value)
public XNode get_LastNode()
internal void set_LastNode(XNode value)
private void CheckChildType(object o, bool addFirst)
public void Add(object content)
private void AddNode(XNode n)
public void Add(Object[] content)
public void AddFirst(object content)
public void AddFirst(Object[] content)
internal bool OnAddingObject(object o, bool rejectAttribute, XNode refNode, bool addFirst)
public XmlWriter CreateWriter()
public IEnumerable`1<XNode> Nodes()
public IEnumerable`1<XNode> DescendantNodes()
public IEnumerable`1<XElement> Descendants()
public IEnumerable`1<XElement> Descendants(XName name)
public IEnumerable`1<XElement> Elements()
public IEnumerable`1<XElement> Elements(XName name)
public XElement Element(XName name)
internal void ReadContentFrom(XmlReader reader, LoadOptions options)
public void RemoveNodes()
public void ReplaceNodes(object content)
public void ReplaceNodes(Object[] content)
}
public System.Xml.Linq.XDeclaration : object {
private string encoding
private string standalone
private string version
public string Encoding
public string Standalone
public string Version
public void .ctor(string version, string encoding, string standalone)
public void .ctor(XDeclaration other)
public string get_Encoding()
public void set_Encoding(string value)
public string get_Standalone()
public void set_Standalone(string value)
public string get_Version()
public void set_Version(string value)
public string ToString()
}
public System.Xml.Linq.XDocument : XContainer {
private XDeclaration xmldecl
public XDeclaration Declaration
public XDocumentType DocumentType
public XmlNodeType NodeType
public XElement Root
public void .ctor(Object[] content)
public void .ctor(XDeclaration xmldecl, Object[] content)
public void .ctor(XDocument other)
public XDeclaration get_Declaration()
public void set_Declaration(XDeclaration value)
public XDocumentType get_DocumentType()
public XmlNodeType get_NodeType()
public XElement get_Root()
public XDocument Load(string uri)
public XDocument Load(string uri, LoadOptions options)
public XDocument Load(Stream stream)
public XDocument Load(Stream stream, LoadOptions options)
public XDocument Load(TextReader reader)
public XDocument Load(TextReader reader, LoadOptions options)
public XDocument Load(XmlReader reader)
public XDocument Load(XmlReader reader, LoadOptions options)
private XDocument LoadCore(XmlReader reader, LoadOptions options)
private void ReadContent(XmlReader reader, LoadOptions options)
private void ValidateWhitespace(string s)
public XDocument Parse(string s)
public XDocument Parse(string s, LoadOptions options)
public void Save(string filename)
public void Save(string filename, SaveOptions options)
public void Save(TextWriter tw)
public void Save(TextWriter tw, SaveOptions options)
public void Save(XmlWriter w)
public void WriteTo(XmlWriter w)
internal bool OnAddingObject(object obj, bool rejectAttribute, XNode refNode, bool addFirst)
private void VerifyAddedNode(object node, bool addFirst)
}
public System.Xml.Linq.XDocumentType : XNode {
private string name
private string pubid
private string sysid
private string intSubset
public string Name
public string PublicId
public string SystemId
public string InternalSubset
public XmlNodeType NodeType
public void .ctor(string name, string publicId, string systemId, string internalSubset)
public void .ctor(XDocumentType other)
public string get_Name()
public void set_Name(string value)
public string get_PublicId()
public void set_PublicId(string value)
public string get_SystemId()
public void set_SystemId(string value)
public string get_InternalSubset()
public void set_InternalSubset(string value)
public XmlNodeType get_NodeType()
public void WriteTo(XmlWriter w)
}
public System.Xml.Linq.XElement : XContainer {
private IEnumerable`1<XElement> emptySequence
private XName name
private XAttribute attr_first
private XAttribute attr_last
private bool explicit_is_empty
public IEnumerable`1<XElement> EmptySequence
public XAttribute FirstAttribute
public XAttribute LastAttribute
public bool HasAttributes
public bool HasElements
public bool IsEmpty
public XName Name
public XmlNodeType NodeType
public string Value
public void .ctor(XName name, object value)
public void .ctor(XElement source)
public void .ctor(XName name)
public void .ctor(XName name, Object[] contents)
public void .ctor(XStreamingElement source)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
public IEnumerable`1<XElement> get_EmptySequence()
public XAttribute get_FirstAttribute()
internal void set_FirstAttribute(XAttribute value)
public XAttribute get_LastAttribute()
internal void set_LastAttribute(XAttribute value)
public bool get_HasAttributes()
public bool get_HasElements()
public bool get_IsEmpty()
internal void set_IsEmpty(bool value)
public XName get_Name()
public void set_Name(XName value)
public XmlNodeType get_NodeType()
public string get_Value()
public void set_Value(string value)
private IEnumerable`1<XElement> GetAncestorList(XName name, bool getMeIn)
public XAttribute Attribute(XName name)
public IEnumerable`1<XAttribute> Attributes()
public IEnumerable`1<XAttribute> Attributes(XName name)
private void DefineDefaultSettings(XmlReaderSettings settings, LoadOptions options)
private XmlReaderSettings CreateDefaultSettings(LoadOptions options)
public XElement Load(string uri)
public XElement Load(string uri, LoadOptions options)
public XElement Load(TextReader tr)
public XElement Load(TextReader tr, LoadOptions options)
public XElement Load(XmlReader reader)
public XElement Load(XmlReader reader, LoadOptions options)
internal XElement LoadCore(XmlReader r, LoadOptions options)
public XElement Parse(string s)
public XElement Parse(string s, LoadOptions options)
public void RemoveAll()
public void RemoveAttributes()
public void Save(string filename)
public void Save(string filename, SaveOptions options)
public void Save(TextWriter tw)
public void Save(TextWriter tw, SaveOptions options)
public void Save(XmlWriter w)
public IEnumerable`1<XElement> AncestorsAndSelf()
public IEnumerable`1<XElement> AncestorsAndSelf(XName name)
public IEnumerable`1<XElement> DescendantsAndSelf()
public IEnumerable`1<XElement> DescendantsAndSelf(XName name)
public IEnumerable`1<XNode> DescendantNodesAndSelf()
public void SetAttributeValue(XName name, object value)
private void SetAttributeObject(XAttribute a)
public void WriteTo(XmlWriter w)
public XNamespace GetDefaultNamespace()
public XNamespace GetNamespaceOfPrefix(string prefix)
public string GetPrefixOfNamespace(XNamespace ns)
private IEnumerable`1<string> GetPrefixOfNamespaceCore(XNamespace ns)
public void ReplaceAll(object item)
public void ReplaceAll(Object[] items)
public void ReplaceAttributes(object item)
public void ReplaceAttributes(Object[] items)
public void SetElementValue(XName name, object value)
public void SetValue(object value)
internal bool OnAddingObject(object o, bool rejectAttribute, XNode refNode, bool addFirst)
public bool op_Explicit(XElement element)
public Nullable`1<bool> op_Explicit(XElement element)
public DateTime op_Explicit(XElement element)
public Nullable`1<DateTime> op_Explicit(XElement element)
public DateTimeOffset op_Explicit(XElement element)
public Nullable`1<DateTimeOffset> op_Explicit(XElement element)
public decimal op_Explicit(XElement element)
public Nullable`1<decimal> op_Explicit(XElement element)
public double op_Explicit(XElement element)
public Nullable`1<double> op_Explicit(XElement element)
public float op_Explicit(XElement element)
public Nullable`1<float> op_Explicit(XElement element)
public Guid op_Explicit(XElement element)
public Nullable`1<Guid> op_Explicit(XElement element)
public int op_Explicit(XElement element)
public Nullable`1<int> op_Explicit(XElement element)
public long op_Explicit(XElement element)
public Nullable`1<long> op_Explicit(XElement element)
public UInt32 op_Explicit(XElement element)
public Nullable`1<UInt32> op_Explicit(XElement element)
public ulong op_Explicit(XElement element)
public Nullable`1<ulong> op_Explicit(XElement element)
public TimeSpan op_Explicit(XElement element)
public Nullable`1<TimeSpan> op_Explicit(XElement element)
public string op_Explicit(XElement element)
}
public System.Xml.Linq.XName : object {
private string local
private XNamespace ns
public string LocalName
public XNamespace Namespace
public string NamespaceName
private void .ctor(SerializationInfo info, StreamingContext context)
internal void .ctor(string local, XNamespace ns)
private bool System.IEquatable<System.Xml.Linq.XName>.Equals(XName other)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
private Exception ErrorInvalidExpandedName()
public string get_LocalName()
public XNamespace get_Namespace()
public string get_NamespaceName()
public bool Equals(object obj)
public XName Get(string expandedName)
private void ExpandName(string expandedName, String& local, String& ns)
public XName Get(string localName, string namespaceName)
public int GetHashCode()
public string ToString()
public bool op_Equality(XName n1, XName n2)
public XName op_Implicit(string s)
public bool op_Inequality(XName n1, XName n2)
}
public System.Xml.Linq.XNamespace : object {
private XNamespace blank
private XNamespace xml
private XNamespace xmlns
private Dictionary`2<string, XNamespace> nstable
private string uri
private Dictionary`2<string, XName> table
public XNamespace None
public XNamespace Xml
public XNamespace Xmlns
public string NamespaceName
private void .ctor(string namespaceName)
public XNamespace get_None()
public XNamespace get_Xml()
public XNamespace get_Xmlns()
public XNamespace Get(string uri)
public XName GetName(string localName)
public string get_NamespaceName()
public bool Equals(object other)
public int GetHashCode()
public string ToString()
public bool op_Equality(XNamespace o1, XNamespace o2)
public bool op_Inequality(XNamespace o1, XNamespace o2)
public XName op_Addition(XNamespace ns, string localName)
public XNamespace op_Implicit(string s)
}
public System.Xml.Linq.XNode : XObject {
private XNodeEqualityComparer eq_comparer
private XNodeDocumentOrderComparer order_comparer
private XNode previous
private XNode next
public XNodeDocumentOrderComparer DocumentOrderComparer
public XNodeEqualityComparer EqualityComparer
public XNode PreviousNode
public XNode NextNode
public int CompareDocumentOrder(XNode n1, XNode n2)
public bool DeepEquals(XNode n1, XNode n2)
public XNodeDocumentOrderComparer get_DocumentOrderComparer()
public XNodeEqualityComparer get_EqualityComparer()
public XNode get_PreviousNode()
internal void set_PreviousNode(XNode value)
public XNode get_NextNode()
internal void set_NextNode(XNode value)
public string ToString(SaveOptions options)
public void AddAfterSelf(object content)
public void AddAfterSelf(Object[] content)
public void AddBeforeSelf(object content)
public void AddBeforeSelf(Object[] content)
public XNode ReadFrom(XmlReader r)
internal XNode ReadFrom(XmlReader r, LoadOptions options)
public void Remove()
public string ToString()
public void WriteTo(XmlWriter w)
public IEnumerable`1<XElement> Ancestors()
public IEnumerable`1<XElement> Ancestors(XName name)
public XmlReader CreateReader()
public IEnumerable`1<XElement> ElementsAfterSelf()
public IEnumerable`1<XElement> ElementsAfterSelf(XName name)
public IEnumerable`1<XElement> ElementsBeforeSelf()
public IEnumerable`1<XElement> ElementsBeforeSelf(XName name)
public bool IsAfter(XNode other)
public bool IsBefore(XNode other)
public IEnumerable`1<XNode> NodesAfterSelf()
public IEnumerable`1<XNode> NodesBeforeSelf()
public void ReplaceWith(object item)
public void ReplaceWith(Object[] items)
}
public System.Xml.Linq.XNodeDocumentOrderComparer : object {
private int System.Collections.IComparer.Compare(object n1, object n2)
public int Compare(XNode n1, XNode n2)
private CompareResult CompareCore(XNode n1, XNode n2)
private CompareResult CompareSibling(XNode n1, XNode n2, CompareResult forSameValue)
}
public System.Xml.Linq.XNodeEqualityComparer : object {
private bool System.Collections.IEqualityComparer.Equals(object n1, object n2)
private int System.Collections.IEqualityComparer.GetHashCode(object node)
public bool Equals(XNode n1, XNode n2)
private bool Equals(XAttribute a1, XAttribute a2)
private bool Equals(XDeclaration d1, XDeclaration d2)
private int GetHashCode(XDeclaration d)
public int GetHashCode(XNode node)
}
internal System.Xml.Linq.XNodeNavigator : XPathNavigator {
private XAttribute attr_ns_xml
private XNode node
private XAttribute attr
private XmlNameTable name_table
public string BaseURI
public bool CanEdit
public bool HasAttributes
public bool HasChildren
public bool IsEmptyElement
public string LocalName
public string Name
public string NamespaceURI
public XmlNameTable NameTable
public XPathNodeType NodeType
public string Prefix
public IXmlSchemaInfo SchemaInfo
public object UnderlyingObject
public string Value
public void .ctor(XNode node, XmlNameTable nameTable)
public void .ctor(XNodeNavigator other)
public string get_BaseURI()
public bool get_CanEdit()
public bool get_HasAttributes()
public bool get_HasChildren()
public bool get_IsEmptyElement()
public string get_LocalName()
public string get_Name()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XPathNodeType get_NodeType()
public string get_Prefix()
public IXmlSchemaInfo get_SchemaInfo()
public object get_UnderlyingObject()
public string get_Value()
private string GetInnerText(XContainer node)
private void GetInnerText(XNode n, StringBuilder& sb)
public XPathNavigator Clone()
public bool IsSamePosition(XPathNavigator other)
public bool MoveTo(XPathNavigator other)
public bool MoveToFirstAttribute()
public bool MoveToFirstChild()
public bool MoveToFirstNamespace(XPathNamespaceScope scope)
public bool MoveToId(string id)
public bool MoveToNext()
public bool MoveToNextAttribute()
public bool MoveToNextNamespace(XPathNamespaceScope scope)
public bool MoveToParent()
public bool MoveToPrevious()
public void MoveToRoot()
}
internal System.Xml.Linq.XNodeReader : XmlReader {
private ReadState state
private XNode node
private XNode start
private int attr
private bool attr_value
private bool end_element
private NameTable name_table
private Dictionary`2<string, int> <>f__switch$map0
private Dictionary`2<string, int> <>f__switch$map1
public int AttributeCount
public string BaseURI
public int Depth
public bool EOF
public bool HasAttributes
public bool HasValue
public bool IsEmptyElement
public string LocalName
public string NamespaceURI
public XmlNameTable NameTable
public XmlNodeType NodeType
public string Prefix
public ReadState ReadState
public string Value
public void .ctor(XNode node)
public int get_AttributeCount()
public string get_BaseURI()
public int get_Depth()
public bool get_EOF()
public bool get_HasAttributes()
public bool get_HasValue()
public bool get_IsEmptyElement()
private XAttribute GetCurrentAttribute()
private XAttribute GetXAttribute(int idx)
private object GetCurrentName()
private object GetName(int attr)
public string get_LocalName()
public string get_NamespaceURI()
public XmlNameTable get_NameTable()
public XmlNodeType get_NodeType()
public string get_Prefix()
public ReadState get_ReadState()
public string get_Value()
public void Close()
public string LookupNamespace(string prefix)
public bool MoveToElement()
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToAttribute(string name)
private string GetPrefixedName(XName name)
public bool MoveToAttribute(string local, string ns)
public string GetAttribute(int i)
public string GetAttribute(string name)
public string GetAttribute(string local, string ns)
public bool Read()
public bool ReadAttributeValue()
public void ResolveEntity()
}
internal System.Xml.Linq.XNodeWriter : XmlWriter {
private XContainer root
private bool is_closed
private XContainer current
private XAttribute attribute
private XmlNodeType state
public WriteState WriteState
public void .ctor(XContainer fragment)
public WriteState get_WriteState()
private void CheckState()
private void WritePossiblyTopLevelNode(XNode n, bool possiblyAttribute)
private void FillXmlns(XElement el, string prefix, XNamespace xns)
public void Close()
public void Flush()
public string LookupPrefix(string ns)
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
private void WriteStartDocument(string sddecl)
public void WriteEndDocument()
public void WriteDocType(string name, string publicId, string systemId, string internalSubset)
public void WriteStartElement(string prefix, string name, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
private void WriteEndElementInternal(bool forceFull)
public void WriteStartAttribute(string prefix, string name, string ns)
public void WriteEndAttribute()
public void WriteCData(string data)
public void WriteComment(string comment)
public void WriteProcessingInstruction(string name, string value)
public void WriteEntityRef(string name)
public void WriteCharEntity(char c)
public void WriteWhitespace(string ws)
public void WriteString(string data)
public void WriteName(string name)
public void WriteNmToken(string nmtoken)
public void WriteQualifiedName(string name, string ns)
public void WriteChars(Char[] chars, int start, int len)
public void WriteRaw(string data)
public void WriteRaw(Char[] chars, int start, int len)
public void WriteBase64(Byte[] data, int start, int len)
public void WriteBinHex(Byte[] data, int start, int len)
public void WriteSurrogateCharEntity(char c1, char c2)
}
public System.Xml.Linq.XObject : object {
private XContainer owner
private List`1<object> annotations
private string baseuri
private int line
private int column
private EventHandler`1<XObjectChangeEventArgs> Changing
private EventHandler`1<XObjectChangeEventArgs> Changed
private int System.Xml.IXmlLineInfo.LineNumber
private int System.Xml.IXmlLineInfo.LinePosition
public string BaseUri
public XDocument Document
public XmlNodeType NodeType
public XElement Parent
internal XContainer Owner
internal int LineNumber
internal int LinePosition
public void add_Changing(EventHandler`1<XObjectChangeEventArgs> value)
public void remove_Changing(EventHandler`1<XObjectChangeEventArgs> value)
public void add_Changed(EventHandler`1<XObjectChangeEventArgs> value)
public void remove_Changed(EventHandler`1<XObjectChangeEventArgs> value)
private int System.Xml.IXmlLineInfo.get_LineNumber()
private int System.Xml.IXmlLineInfo.get_LinePosition()
private bool System.Xml.IXmlLineInfo.HasLineInfo()
public string get_BaseUri()
internal void set_BaseUri(string value)
public XDocument get_Document()
public XmlNodeType get_NodeType()
public XElement get_Parent()
internal XContainer get_Owner()
internal void SetOwner(XContainer node)
public void AddAnnotation(object annotation)
public T Annotation()
public object Annotation(Type type)
public IEnumerable`1<T> Annotations()
public IEnumerable`1<object> Annotations(Type type)
public void RemoveAnnotations()
public void RemoveAnnotations(Type type)
internal int get_LineNumber()
internal void set_LineNumber(int value)
internal int get_LinePosition()
internal void set_LinePosition(int value)
internal void FillLineInfoAndBaseUri(XmlReader r, LoadOptions options)
}
public System.Xml.Linq.XObjectChange : Enum {
public int value__
public XObjectChange Add
public XObjectChange Remove
public XObjectChange Name
public XObjectChange Value
}
public System.Xml.Linq.XObjectChangeEventArgs : EventArgs {
public XObjectChangeEventArgs Add
public XObjectChangeEventArgs Name
public XObjectChangeEventArgs Remove
public XObjectChangeEventArgs Value
private XObjectChange type
public XObjectChange ObjectChange
public void .ctor(XObjectChange change)
public XObjectChange get_ObjectChange()
}
public System.Xml.Linq.XProcessingInstruction : XNode {
private string name
private string data
public string Data
public XmlNodeType NodeType
public string Target
public void .ctor(string name, string data)
public void .ctor(XProcessingInstruction other)
public string get_Data()
public void set_Data(string value)
public XmlNodeType get_NodeType()
public string get_Target()
public void set_Target(string value)
public void WriteTo(XmlWriter w)
}
public System.Xml.Linq.XStreamingElement : object {
private XName name
private List`1<object> contents
public XName Name
internal IEnumerable`1<object> Contents
public void .ctor(XName name)
public void .ctor(XName name, object content)
public void .ctor(XName name, Object[] content)
public XName get_Name()
public void set_Name(XName value)
internal IEnumerable`1<object> get_Contents()
public void Add(object content)
public void Add(Object[] content)
public void Save(string fileName)
public void Save(TextWriter textWriter)
public void Save(XmlWriter writer)
public void Save(string fileName, SaveOptions options)
public void Save(TextWriter textWriter, SaveOptions options)
public string ToString()
public string ToString(SaveOptions options)
public void WriteTo(XmlWriter writer)
private void WriteContents(IEnumerable`1<object> items, XmlWriter w)
private void WriteAttribute(XAttribute a, XmlWriter w)
}
public System.Xml.Linq.XText : XNode {
private string value
public XmlNodeType NodeType
public string Value
public void .ctor(string value)
public void .ctor(XText other)
public XmlNodeType get_NodeType()
public string get_Value()
public void set_Value(string value)
public void WriteTo(XmlWriter w)
}
internal System.Xml.Linq.XUtil : object {
public string XmlnsNamespace
public bool ConvertToBoolean(string s)
public DateTime ToDateTime(string s)
public string ToString(object o)
public bool ToBoolean(object o)
public Nullable`1<bool> ToNullableBoolean(object o)
public IEnumerable ExpandArray(object o)
public XNode ToNode(object o)
public object GetDetachedObject(XObject child)
public object Clone(object o)
}
public System.Xml.Schema.Extensions : object {
public IXmlSchemaInfo GetSchemaInfo(XAttribute attribute)
public IXmlSchemaInfo GetSchemaInfo(XElement element)
public void Validate(XAttribute attribute, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler handler)
public void Validate(XAttribute attribute, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler handler, bool addSchemaInfo)
public void Validate(XDocument document, XmlSchemaSet schemas, ValidationEventHandler handler)
public void Validate(XDocument document, XmlSchemaSet schemas, ValidationEventHandler handler, bool addSchemaInfo)
public void Validate(XElement element, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler handler)
public void Validate(XElement element, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler handler, bool addSchemaInfo)
}
public System.Xml.XPath.Extensions : object {
public XPathNavigator CreateNavigator(XNode node)
public XPathNavigator CreateNavigator(XNode node, XmlNameTable nameTable)
public object XPathEvaluate(XNode node, string expression)
public object XPathEvaluate(XNode node, string expression, IXmlNamespaceResolver nsResolver)
public XElement XPathSelectElement(XNode node, string xpath)
public XElement XPathSelectElement(XNode node, string xpath, IXmlNamespaceResolver nsResolver)
public IEnumerable`1<XElement> XPathSelectElements(XNode node, string xpath)
public IEnumerable`1<XElement> XPathSelectElements(XNode node, string xpath, IXmlNamespaceResolver nsResolver)
}
