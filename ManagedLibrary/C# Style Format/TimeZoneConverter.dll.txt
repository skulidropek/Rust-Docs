internal System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
private bool <ParameterValue>k__BackingField
public bool ParameterValue
public bool get_ParameterValue()
public void .ctor(bool parameterValue)
}
internal System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
private bool <ReturnValue>k__BackingField
public bool ReturnValue
public bool get_ReturnValue()
public void .ctor(bool returnValue)
}
internal System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
private String[] <Members>k__BackingField
public String[] Members
public String[] get_Members()
public void .ctor(string member)
public void .ctor(String[] members)
}
internal System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
private bool <ReturnValue>k__BackingField
private String[] <Members>k__BackingField
public bool ReturnValue
public String[] Members
public bool get_ReturnValue()
public String[] get_Members()
public void .ctor(bool returnValue, string member)
public void .ctor(bool returnValue, String[] members)
}
internal System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
private string <ParameterName>k__BackingField
public string ParameterName
public string get_ParameterName()
public void .ctor(string parameterName)
}
internal System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
private bool <ReturnValue>k__BackingField
public bool ReturnValue
public bool get_ReturnValue()
public void .ctor(bool returnValue)
}
internal System.Runtime.CompilerServices.NullableAttribute : Attribute {
public Byte[] NullableFlags
public void .ctor(byte )
public void .ctor(Byte[] )
}
internal System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
public byte Flag
public void .ctor(byte )
}
internal TimeZoneConverter.CustomTimeZoneFactory : object {
private string TrollTimeZoneId
private Lazy`1<TimeZoneInfo> TrollTimeZone
public bool TryGetTimeZoneInfo(string timeZoneId, TimeZoneInfo& timeZoneInfo)
private TimeZoneInfo CreateTrollTimeZone()
}
internal TimeZoneConverter.DataLoader : object {
public void Populate(IDictionary`2<string, string> ianaMap, IDictionary`2<string, string> windowsMap, IDictionary`2<string, string> railsMap, IDictionary`2<string, IList`1<string>> inverseRailsMap, IDictionary`2<string, string> links, IDictionary`2<string, IList`1<string>> ianaTerritoryZones)
private IEnumerable`1<string> GetEmbeddedData(string resourceName)
}
public TimeZoneConverter.LinkResolution : Enum {
public int value__
public LinkResolution Default
public LinkResolution Canonical
public LinkResolution Original
}
public TimeZoneConverter.TZConvert : object {
private bool IsWindows
private Dictionary`2<string, string> IanaMap
private Dictionary`2<string, string> WindowsMap
private Dictionary`2<string, string> RailsMap
private Dictionary`2<string, IList`1<string>> InverseRailsMap
private Dictionary`2<string, string> Links
private Dictionary`2<string, TimeZoneInfo> SystemTimeZones
private IDictionary`2<string, IList`1<string>> IanaTerritoryZones
private IReadOnlyCollection`1<string> <KnownIanaTimeZoneNames>k__BackingField
private IReadOnlyCollection`1<string> <KnownWindowsTimeZoneIds>k__BackingField
private IReadOnlyCollection`1<string> <KnownRailsTimeZoneNames>k__BackingField
public IReadOnlyCollection`1<string> KnownIanaTimeZoneNames
public IReadOnlyCollection`1<string> KnownWindowsTimeZoneIds
public IReadOnlyCollection`1<string> KnownRailsTimeZoneNames
public IReadOnlyCollection`1<string> get_KnownIanaTimeZoneNames()
public IReadOnlyCollection`1<string> get_KnownWindowsTimeZoneIds()
public IReadOnlyCollection`1<string> get_KnownRailsTimeZoneNames()
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> GetIanaTimeZoneNamesByTerritory(bool fullList)
public string IanaToWindows(string ianaTimeZoneName)
public bool TryIanaToWindows(string ianaTimeZoneName, String& windowsTimeZoneId)
public string WindowsToIana(string windowsTimeZoneId, string territoryCode)
public string WindowsToIana(string windowsTimeZoneId, LinkResolution linkResolutionMode)
public string WindowsToIana(string windowsTimeZoneId, string territoryCode, LinkResolution linkResolutionMode)
public bool TryWindowsToIana(string windowsTimeZoneId, String& ianaTimeZoneName)
public bool TryWindowsToIana(string windowsTimeZoneId, String& ianaTimeZoneName, LinkResolution linkResolutionMode)
public bool TryWindowsToIana(string windowsTimeZoneId, string territoryCode, String& ianaTimeZoneName)
public bool TryWindowsToIana(string windowsTimeZoneId, string territoryCode, String& ianaTimeZoneName, LinkResolution linkResolutionMode)
private string ResolveLink(string linkOrZone)
public TimeZoneInfo GetTimeZoneInfo(string windowsOrIanaTimeZoneId)
public bool TryGetTimeZoneInfo(string windowsOrIanaTimeZoneId, TimeZoneInfo& timeZoneInfo)
public IList`1<string> IanaToRails(string ianaTimeZoneName)
public bool TryIanaToRails(string ianaTimeZoneName, IList`1& railsTimeZoneNames)
public string RailsToIana(string railsTimeZoneName)
public bool TryRailsToIana(string railsTimeZoneName, String& ianaTimeZoneName)
public string RailsToWindows(string railsTimeZoneName)
public bool TryRailsToWindows(string railsTimeZoneName, String& windowsTimeZoneId)
public IList`1<string> WindowsToRails(string windowsTimeZoneId, string territoryCode)
public bool TryWindowsToRails(string windowsTimeZoneId, IList`1& railsTimeZoneNames)
public bool TryWindowsToRails(string windowsTimeZoneId, string territoryCode, IList`1& railsTimeZoneNames)
private Dictionary`2<string, TimeZoneInfo> GetSystemTimeZones()
}
