public Fix : object {
public DirectoryInfo directoryInfo(ulong id)
private string Remove(string str)
private Single[] ConvertByteToFloat(Byte[] array)
public void Speaker(BasePlayer player, Byte[] data)
private void OnAudioRead(Single[] data)
private IEnumerator MyEvent(BasePlayer player)
}
public WavUtility : object {
private int BlockSize_16Bit
public AudioClip ToAudioClip(string filePath)
public AudioClip ToAudioClip(Byte[] fileBytes, int offsetSamples, string name, PCMReaderCallback cb)
private Single[] Convert8BitByteArrayToAudioClipData(Byte[] source, int headerOffset, int dataSize)
private Single[] Convert16BitByteArrayToAudioClipData(Byte[] source, int headerOffset, int dataSize)
private Single[] Convert24BitByteArrayToAudioClipData(Byte[] source, int headerOffset, int dataSize)
private Single[] Convert32BitByteArrayToAudioClipData(Byte[] source, int headerOffset, int dataSize)
public Byte[] FromAudioClip(AudioClip audioClip)
public Byte[] FromAudioClip(AudioClip audioClip, String& filepath, bool saveAsFile, string dirname)
private int WriteFileHeader(MemoryStream& stream, int fileSize)
private int WriteFileFormat(MemoryStream& stream, int channels, int sampleRate, ushort bitDepth)
private int WriteFileData(MemoryStream& stream, AudioClip audioClip, ushort bitDepth)
private Byte[] ConvertAudioClipDataToInt16ByteArray(Single[] data)
private int WriteBytesToMemoryStream(MemoryStream& stream, Byte[] bytes, string tag)
public ushort BitDepth(AudioClip audioClip)
private int BytesPerSample(ushort bitDepth)
private int BlockSize(ushort bitDepth)
private string FormatCode(ushort code)
}
