public UnityEngine.DetailPrototype : object {
internal GameObject m_Prototype
internal Texture2D m_PrototypeTexture
internal Color m_HealthyColor
internal Color m_DryColor
internal float m_MinWidth
internal float m_MaxWidth
internal float m_MinHeight
internal float m_MaxHeight
internal float m_NoiseSpread
internal float m_BendFactor
internal int m_RenderMode
internal int m_UsePrototypeMesh
public GameObject prototype
public Texture2D prototypeTexture
public float minWidth
public float maxWidth
public float minHeight
public float maxHeight
public float noiseSpread
public float bendFactor
public Color healthyColor
public Color dryColor
public DetailRenderMode renderMode
public bool usePrototypeMesh
public GameObject get_prototype()
public void set_prototype(GameObject value)
public Texture2D get_prototypeTexture()
public void set_prototypeTexture(Texture2D value)
public float get_minWidth()
public void set_minWidth(float value)
public float get_maxWidth()
public void set_maxWidth(float value)
public float get_minHeight()
public void set_minHeight(float value)
public float get_maxHeight()
public void set_maxHeight(float value)
public float get_noiseSpread()
public void set_noiseSpread(float value)
public float get_bendFactor()
public void set_bendFactor(float value)
public Color get_healthyColor()
public void set_healthyColor(Color value)
public Color get_dryColor()
public void set_dryColor(Color value)
public DetailRenderMode get_renderMode()
public void set_renderMode(DetailRenderMode value)
public bool get_usePrototypeMesh()
public void set_usePrototypeMesh(bool value)
}
public UnityEngine.DetailRenderMode : Enum {
public int value__
public DetailRenderMode GrassBillboard
public DetailRenderMode VertexLit
public DetailRenderMode Grass
}
public UnityEngine.SplatPrototype : object {
internal Texture2D m_Texture
internal Texture2D m_NormalMap
internal Vector2 m_TileSize
internal Vector2 m_TileOffset
internal Vector4 m_SpecularMetallic
internal float m_Smoothness
public Texture2D texture
public Texture2D normalMap
public Vector2 tileSize
public Vector2 tileOffset
public Color specular
public float metallic
public float smoothness
public Texture2D get_texture()
public void set_texture(Texture2D value)
public Texture2D get_normalMap()
public void set_normalMap(Texture2D value)
public Vector2 get_tileSize()
public void set_tileSize(Vector2 value)
public Vector2 get_tileOffset()
public void set_tileOffset(Vector2 value)
public Color get_specular()
public void set_specular(Color value)
public float get_metallic()
public void set_metallic(float value)
public float get_smoothness()
public void set_smoothness(float value)
}
public UnityEngine.Terrain : Behaviour {
public TerrainData terrainData
public float treeDistance
public float treeBillboardDistance
public float treeCrossFadeLength
public int treeMaximumFullLODCount
public float detailObjectDistance
public float detailObjectDensity
public float heightmapPixelError
public int heightmapMaximumLOD
public float basemapDistance
public float splatmapDistance
public int lightmapIndex
public int realtimeLightmapIndex
public Vector4 lightmapScaleOffset
public Vector4 realtimeLightmapScaleOffset
public bool freeUnusedRenderingResources
public bool castShadows
public ReflectionProbeUsage reflectionProbeUsage
public MaterialType materialType
public Material materialTemplate
public Color legacySpecular
public float legacyShininess
public bool drawHeightmap
public bool drawTreesAndFoliage
public Vector3 patchBoundsMultiplier
public float treeLODBiasMultiplier
public bool collectDetailPatches
public TerrainRenderFlags editorRenderFlags
public Terrain activeTerrain
public Terrain[] activeTerrains
public TerrainData get_terrainData()
public void set_terrainData(TerrainData value)
public float get_treeDistance()
public void set_treeDistance(float value)
public float get_treeBillboardDistance()
public void set_treeBillboardDistance(float value)
public float get_treeCrossFadeLength()
public void set_treeCrossFadeLength(float value)
public int get_treeMaximumFullLODCount()
public void set_treeMaximumFullLODCount(int value)
public float get_detailObjectDistance()
public void set_detailObjectDistance(float value)
public float get_detailObjectDensity()
public void set_detailObjectDensity(float value)
public float get_heightmapPixelError()
public void set_heightmapPixelError(float value)
public int get_heightmapMaximumLOD()
public void set_heightmapMaximumLOD(int value)
public float get_basemapDistance()
public void set_basemapDistance(float value)
public float get_splatmapDistance()
public void set_splatmapDistance(float value)
public int get_lightmapIndex()
public void set_lightmapIndex(int value)
public int get_realtimeLightmapIndex()
public void set_realtimeLightmapIndex(int value)
public Vector4 get_lightmapScaleOffset()
public void set_lightmapScaleOffset(Vector4 value)
public Vector4 get_realtimeLightmapScaleOffset()
public void set_realtimeLightmapScaleOffset(Vector4 value)
public bool get_freeUnusedRenderingResources()
public void set_freeUnusedRenderingResources(bool value)
public bool get_castShadows()
public void set_castShadows(bool value)
public ReflectionProbeUsage get_reflectionProbeUsage()
public void set_reflectionProbeUsage(ReflectionProbeUsage value)
public void GetClosestReflectionProbes(List`1<ReflectionProbeBlendInfo> result)
public MaterialType get_materialType()
public void set_materialType(MaterialType value)
public Material get_materialTemplate()
public void set_materialTemplate(Material value)
public Color get_legacySpecular()
public void set_legacySpecular(Color value)
public float get_legacyShininess()
public void set_legacyShininess(float value)
public bool get_drawHeightmap()
public void set_drawHeightmap(bool value)
public bool get_drawTreesAndFoliage()
public void set_drawTreesAndFoliage(bool value)
public Vector3 get_patchBoundsMultiplier()
public void set_patchBoundsMultiplier(Vector3 value)
public float SampleHeight(Vector3 worldPosition)
public void ApplyDelayedHeightmapModification()
public void AddTreeInstance(TreeInstance instance)
public void SetNeighbors(Terrain left, Terrain top, Terrain right, Terrain bottom)
public float get_treeLODBiasMultiplier()
public void set_treeLODBiasMultiplier(float value)
public bool get_collectDetailPatches()
public void set_collectDetailPatches(bool value)
public TerrainRenderFlags get_editorRenderFlags()
public void set_editorRenderFlags(TerrainRenderFlags value)
public Vector3 GetPosition()
public void Flush()
internal void RemoveTrees(Vector2 position, float radius, int prototypeIndex)
public void SetSplatMaterialPropertyBlock(MaterialPropertyBlock properties)
public void GetSplatMaterialPropertyBlock(MaterialPropertyBlock dest)
private void Internal_GetSplatMaterialPropertyBlock(MaterialPropertyBlock dest)
public Terrain get_activeTerrain()
public Terrain[] get_activeTerrains()
public GameObject CreateTerrainGameObject(TerrainData assignTerrain)
private void get_lightmapScaleOffset_Injected(Vector4& ret)
private void set_lightmapScaleOffset_Injected(Vector4& value)
private void get_realtimeLightmapScaleOffset_Injected(Vector4& ret)
private void set_realtimeLightmapScaleOffset_Injected(Vector4& value)
private void get_legacySpecular_Injected(Color& ret)
private void set_legacySpecular_Injected(Color& value)
private void get_patchBoundsMultiplier_Injected(Vector3& ret)
private void set_patchBoundsMultiplier_Injected(Vector3& value)
private float SampleHeight_Injected(Vector3& worldPosition)
private void AddTreeInstance_Injected(TreeInstance& instance)
private void GetPosition_Injected(Vector3& ret)
private void RemoveTrees_Injected(Vector2& position, float radius, int prototypeIndex)
}
public UnityEngine.TerrainChangedFlags : Enum {
public int value__
public TerrainChangedFlags Heightmap
public TerrainChangedFlags TreeInstances
public TerrainChangedFlags DelayedHeightmapUpdate
public TerrainChangedFlags FlushEverythingImmediately
public TerrainChangedFlags RemoveDirtyDetailsImmediately
public TerrainChangedFlags WillBeDestroyed
}
public UnityEngine.TerrainData : Object {
private string k_ScriptingInterfaceName
private string k_ScriptingInterfacePrefix
private string k_HeightmapPrefix
private string k_DetailDatabasePrefix
private string k_TreeDatabasePrefix
private string k_SplatDatabasePrefix
private int k_MaximumResolution
private int k_MinimumDetailResolutionPerPatch
private int k_MaximumDetailResolutionPerPatch
private int k_MaximumDetailPatchCount
private int k_MinimumAlphamapResolution
private int k_MaximumAlphamapResolution
private int k_MinimumBaseMapResolution
private int k_MaximumBaseMapResolution
public int heightmapWidth
public int heightmapHeight
public int heightmapResolution
private int internalHeightmapResolution
public Vector3 heightmapScale
public Vector3 size
public Bounds bounds
public float thickness
public float wavingGrassStrength
public float wavingGrassAmount
public float wavingGrassSpeed
public Color wavingGrassTint
public int detailWidth
public int detailHeight
public int detailResolution
internal int detailResolutionPerPatch
public DetailPrototype[] detailPrototypes
public TreeInstance[] treeInstances
public int treeInstanceCount
public TreePrototype[] treePrototypes
public int alphamapLayers
public int alphamapResolution
private int Internal_alphamapResolution
public int alphamapWidth
public int alphamapHeight
public int baseMapResolution
private int Internal_baseMapResolution
private int alphamapTextureCount
public Texture2D[] alphamapTextures
public SplatPrototype[] splatPrototypes
private int GetBoundaryValue(BoundaryValueType type)
private void Internal_Create(TerrainData terrainData)
internal bool HasUser(GameObject user)
internal void AddUser(GameObject user)
internal void RemoveUser(GameObject user)
public int get_heightmapWidth()
public int get_heightmapHeight()
public int get_heightmapResolution()
public void set_heightmapResolution(int value)
private int get_internalHeightmapResolution()
private void set_internalHeightmapResolution(int value)
public Vector3 get_heightmapScale()
public Vector3 get_size()
public void set_size(Vector3 value)
public Bounds get_bounds()
public float get_thickness()
public void set_thickness(float value)
public float GetHeight(int x, int y)
public float GetInterpolatedHeight(float x, float y)
public Single[0...,0...] GetHeights(int xBase, int yBase, int width, int height)
private Single[0...,0...] Internal_GetHeights(int xBase, int yBase, int width, int height)
public void SetHeights(int xBase, int yBase, Single[0...,0...] heights)
private void Internal_SetHeights(int xBase, int yBase, int width, int height, Single[0...,0...] heights)
public void SetHeightsDelayLOD(int xBase, int yBase, Single[0...,0...] heights)
private void Internal_SetHeightsDelayLOD(int xBase, int yBase, int width, int height, Single[0...,0...] heights)
public float GetSteepness(float x, float y)
public Vector3 GetInterpolatedNormal(float x, float y)
internal int GetAdjustedSize(int size)
public float get_wavingGrassStrength()
public void set_wavingGrassStrength(float value)
public float get_wavingGrassAmount()
public void set_wavingGrassAmount(float value)
public float get_wavingGrassSpeed()
public void set_wavingGrassSpeed(float value)
public Color get_wavingGrassTint()
public void set_wavingGrassTint(Color value)
public int get_detailWidth()
public int get_detailHeight()
public void SetDetailResolution(int detailResolution, int resolutionPerPatch)
private void Internal_SetDetailResolution(int patchCount, int resolutionPerPatch)
public int get_detailResolution()
internal int get_detailResolutionPerPatch()
internal void ResetDirtyDetails()
public void RefreshPrototypes()
public DetailPrototype[] get_detailPrototypes()
public void set_detailPrototypes(DetailPrototype[] value)
public Int32[] GetSupportedLayers(int xBase, int yBase, int totalWidth, int totalHeight)
public Int32[0...,0...] GetDetailLayer(int xBase, int yBase, int width, int height, int layer)
public void SetDetailLayer(int xBase, int yBase, int layer, Int32[0...,0...] details)
private void Internal_SetDetailLayer(int xBase, int yBase, int totalWidth, int totalHeight, int detailIndex, Int32[0...,0...] data)
public TreeInstance[] get_treeInstances()
public void set_treeInstances(TreeInstance[] value)
private TreeInstance[] Internal_GetTreeInstances()
private void Internal_SetTreeInstances(TreeInstance[] instances)
public TreeInstance GetTreeInstance(int index)
private TreeInstance Internal_GetTreeInstance(int index)
public void SetTreeInstance(int index, TreeInstance instance)
public int get_treeInstanceCount()
public TreePrototype[] get_treePrototypes()
public void set_treePrototypes(TreePrototype[] value)
internal void RemoveTreePrototype(int index)
internal void RecalculateTreePositions()
internal void RemoveDetailPrototype(int index)
internal bool NeedUpgradeScaledTreePrototypes()
internal void UpgradeScaledTreePrototype()
public int get_alphamapLayers()
public Single[0...,0...,0...] GetAlphamaps(int x, int y, int width, int height)
private Single[0...,0...,0...] Internal_GetAlphamaps(int x, int y, int width, int height)
public int get_alphamapResolution()
public void set_alphamapResolution(int value)
internal float GetAlphamapResolutionInternal()
private int get_Internal_alphamapResolution()
private void set_Internal_alphamapResolution(int value)
public int get_alphamapWidth()
public int get_alphamapHeight()
public int get_baseMapResolution()
public void set_baseMapResolution(int value)
private int get_Internal_baseMapResolution()
private void set_Internal_baseMapResolution(int value)
public void SetAlphamaps(int x, int y, Single[0...,0...,0...] map)
private void Internal_SetAlphamaps(int x, int y, int width, int height, Single[0...,0...,0...] map)
internal void RecalculateBasemapIfDirty()
internal void SetBasemapDirty(bool dirty)
private Texture2D GetAlphamapTexture(int index)
private int get_alphamapTextureCount()
public Texture2D[] get_alphamapTextures()
public SplatPrototype[] get_splatPrototypes()
public void set_splatPrototypes(SplatPrototype[] value)
internal void AddTree(TreeInstance& tree)
internal int RemoveTrees(Vector2 position, float radius, int prototypeIndex)
private void get_heightmapScale_Injected(Vector3& ret)
private void get_size_Injected(Vector3& ret)
private void set_size_Injected(Vector3& value)
private void get_bounds_Injected(Bounds& ret)
private void GetInterpolatedNormal_Injected(float x, float y, Vector3& ret)
private void get_wavingGrassTint_Injected(Color& ret)
private void set_wavingGrassTint_Injected(Color& value)
private void Internal_GetTreeInstance_Injected(int index, TreeInstance& ret)
private void SetTreeInstance_Injected(int index, TreeInstance& instance)
private int RemoveTrees_Injected(Vector2& position, float radius, int prototypeIndex)
}
public UnityEngine.TerrainExtensions : object {
public void UpdateGIMaterials(Terrain terrain)
public void UpdateGIMaterials(Terrain terrain, int x, int y, int width, int height)
internal void UpdateGIMaterialsForTerrain(int terrainInstanceID, Rect uvBounds)
private void UpdateGIMaterialsForTerrain_Injected(int terrainInstanceID, Rect& uvBounds)
}
public UnityEngine.TerrainRenderFlags : Enum {
public int value__
public TerrainRenderFlags heightmap
public TerrainRenderFlags trees
public TerrainRenderFlags details
public TerrainRenderFlags all
public TerrainRenderFlags Heightmap
public TerrainRenderFlags Trees
public TerrainRenderFlags Details
public TerrainRenderFlags All
}
public UnityEngine.Tree : Component {
public ScriptableObject data
public bool hasSpeedTreeWind
public ScriptableObject get_data()
public void set_data(ScriptableObject value)
public bool get_hasSpeedTreeWind()
}
public UnityEngine.TreeInstance : ValueType {
public Vector3 position
public float widthScale
public float heightScale
public float rotation
public Color32 color
public Color32 lightmapColor
public int prototypeIndex
internal float temporaryDistance
}
public UnityEngine.TreePrototype : object {
internal GameObject m_Prefab
internal float m_BendFactor
public GameObject prefab
public float bendFactor
public GameObject get_prefab()
public void set_prefab(GameObject value)
public float get_bendFactor()
public void set_bendFactor(float value)
}
