public UnityEngine.DetailPrototype : object {
internal GameObject m_Prototype
internal Texture2D m_PrototypeTexture
internal Color m_HealthyColor
internal Color m_DryColor
internal float m_MinWidth
internal float m_MaxWidth
internal float m_MinHeight
internal float m_MaxHeight
internal float m_NoiseSpread
internal float m_BendFactor
internal int m_RenderMode
internal int m_UsePrototypeMesh
public GameObject prototype
public Texture2D prototypeTexture
public float minWidth
public float maxWidth
public float minHeight
public float maxHeight
public float noiseSpread
public float bendFactor
public Color healthyColor
public Color dryColor
public DetailRenderMode renderMode
public bool usePrototypeMesh
public GameObject get_prototype()
public void set_prototype(GameObject value)
public Texture2D get_prototypeTexture()
public void set_prototypeTexture(Texture2D value)
public float get_minWidth()
public void set_minWidth(float value)
public float get_maxWidth()
public void set_maxWidth(float value)
public float get_minHeight()
public void set_minHeight(float value)
public float get_maxHeight()
public void set_maxHeight(float value)
public float get_noiseSpread()
public void set_noiseSpread(float value)
public float get_bendFactor()
public void set_bendFactor(float value)
public Color get_healthyColor()
public void set_healthyColor(Color value)
public Color get_dryColor()
public void set_dryColor(Color value)
public DetailRenderMode get_renderMode()
public void set_renderMode(DetailRenderMode value)
public bool get_usePrototypeMesh()
public void set_usePrototypeMesh(bool value)
public void .ctor(DetailPrototype other)
public bool Equals(object obj)
public int GetHashCode()
private bool Equals(DetailPrototype other)
}
public UnityEngine.DetailRenderMode : Enum {
public int value__
public DetailRenderMode GrassBillboard
public DetailRenderMode VertexLit
public DetailRenderMode Grass
}
public UnityEngine.Experimental.TerrainAPI.BrushTransform : ValueType {
private Vector2 <brushOrigin>k__BackingField
private Vector2 <brushU>k__BackingField
private Vector2 <brushV>k__BackingField
private Vector2 <targetOrigin>k__BackingField
private Vector2 <targetX>k__BackingField
private Vector2 <targetY>k__BackingField
public Vector2 brushOrigin
public Vector2 brushU
public Vector2 brushV
public Vector2 targetOrigin
public Vector2 targetX
public Vector2 targetY
public Vector2 get_brushOrigin()
public Vector2 get_brushU()
public Vector2 get_brushV()
public Vector2 get_targetOrigin()
public Vector2 get_targetX()
public Vector2 get_targetY()
public void .ctor(Vector2 brushOrigin, Vector2 brushU, Vector2 brushV)
public Rect GetBrushXYBounds()
public BrushTransform FromRect(Rect brushRect)
public Vector2 ToBrushUV(Vector2 targetXY)
public Vector2 FromBrushUV(Vector2 brushUV)
}
public UnityEngine.Experimental.TerrainAPI.PaintContext : object {
private Terrain <originTerrain>k__BackingField
private RectInt <pixelRect>k__BackingField
private int <targetTextureWidth>k__BackingField
private int <targetTextureHeight>k__BackingField
private Vector2 <pixelSize>k__BackingField
private RenderTexture <sourceRenderTexture>k__BackingField
private RenderTexture <destinationRenderTexture>k__BackingField
private RenderTexture <oldRenderTexture>k__BackingField
private List`1<TerrainTile> m_TerrainTiles
private float m_HeightWorldSpaceMin
private float m_HeightWorldSpaceMax
private Action`3<ITerrainInfo, ToolAction, string> onTerrainTileBeforePaint
private List`1<PaintedTerrain> s_PaintedTerrain
public Terrain originTerrain
public RectInt pixelRect
public int targetTextureWidth
public int targetTextureHeight
public Vector2 pixelSize
public RenderTexture sourceRenderTexture
public RenderTexture destinationRenderTexture
public RenderTexture oldRenderTexture
public int terrainCount
public float heightWorldSpaceMin
public float heightWorldSpaceSize
public float kNormalizedHeightScale
public Terrain get_originTerrain()
public RectInt get_pixelRect()
public int get_targetTextureWidth()
public int get_targetTextureHeight()
public Vector2 get_pixelSize()
public RenderTexture get_sourceRenderTexture()
private void set_sourceRenderTexture(RenderTexture value)
public RenderTexture get_destinationRenderTexture()
private void set_destinationRenderTexture(RenderTexture value)
public RenderTexture get_oldRenderTexture()
private void set_oldRenderTexture(RenderTexture value)
public int get_terrainCount()
public Terrain GetTerrain(int terrainIndex)
public RectInt GetClippedPixelRectInTerrainPixels(int terrainIndex)
public RectInt GetClippedPixelRectInRenderTexturePixels(int terrainIndex)
public float get_heightWorldSpaceMin()
public float get_heightWorldSpaceSize()
public float get_kNormalizedHeightScale()
internal void add_onTerrainTileBeforePaint(Action`3<ITerrainInfo, ToolAction, string> value)
internal void remove_onTerrainTileBeforePaint(Action`3<ITerrainInfo, ToolAction, string> value)
public void .ctor(Terrain terrain, RectInt pixelRect, int targetTextureWidth, int targetTextureHeight, bool texelPadding)
public PaintContext CreateFromBounds(Terrain terrain, Rect boundsInTerrainSpace, int inputTextureWidth, int inputTextureHeight, int extraBorderPixels, bool texelPadding)
private void FindTerrainTilesUnlimited(bool texelPadding)
public void CreateRenderTargets(RenderTextureFormat colorFormat)
public void Cleanup(bool restoreRenderTexture)
private void GatherInternal(Func`2<ITerrainInfo, Texture> terrainToTexture, Color defaultColor, string operationName, Material blitMaterial, int blitPass, Action`1<ITerrainInfo> beforeBlit, Action`1<ITerrainInfo> afterBlit)
private void ScatterInternal(Func`2<ITerrainInfo, RenderTexture> terrainToRT, string operationName, Material blitMaterial, int blitPass, Action`1<ITerrainInfo> beforeBlit, Action`1<ITerrainInfo> afterBlit)
public void Gather(Func`2<ITerrainInfo, Texture> terrainSource, Color defaultColor, Material blitMaterial, int blitPass, Action`1<ITerrainInfo> beforeBlit, Action`1<ITerrainInfo> afterBlit)
public void Scatter(Func`2<ITerrainInfo, RenderTexture> terrainDest, Material blitMaterial, int blitPass, Action`1<ITerrainInfo> beforeBlit, Action`1<ITerrainInfo> afterBlit)
public void GatherHeightmap()
public void ScatterHeightmap(string editorUndoName)
public void GatherHoles()
public void ScatterHoles(string editorUndoName)
public void GatherNormals()
private SplatmapUserData GetTerrainLayerUserData(ITerrainInfo context, TerrainLayer terrainLayer, bool addLayerIfDoesntExist)
public void GatherAlphamap(TerrainLayer inputLayer, bool addLayerIfDoesntExist)
public void ScatterAlphamap(string editorUndoName)
private void OnTerrainPainted(ITerrainInfo tile, ToolAction action)
public void ApplyDelayedActions()
}
public UnityEngine.Experimental.TerrainAPI.TerrainCallbacks : object {
private HeightmapChangedCallback heightmapChanged
private TextureChangedCallback textureChanged
public void add_heightmapChanged(HeightmapChangedCallback value)
public void remove_heightmapChanged(HeightmapChangedCallback value)
public void add_textureChanged(TextureChangedCallback value)
public void remove_textureChanged(TextureChangedCallback value)
internal void InvokeHeightmapChangedCallback(TerrainData terrainData, RectInt heightRegion, bool synched)
internal void InvokeTextureChangedCallback(TerrainData terrainData, string textureName, RectInt texelRegion, bool synched)
}
public UnityEngine.Experimental.TerrainAPI.TerrainPaintUtility : object {
private Material s_BuiltinPaintMaterial
private Material s_BlitMaterial
private Material s_HeightBlitMaterial
private Material s_CopyTerrainLayerMaterial
internal bool paintTextureUsesCopyTexture
public Material GetBuiltinPaintMaterial()
public void GetBrushWorldSizeLimits(Single& minBrushWorldSize, Single& maxBrushWorldSize, float terrainTileWorldSize, int terrainTileTextureResolutionPixels, int minBrushResolutionPixels, int maxBrushResolutionPixels)
public BrushTransform CalculateBrushTransform(Terrain terrain, Vector2 brushCenterTerrainUV, float brushSize, float brushRotationDegrees)
public void BuildTransformPaintContextUVToPaintContextUV(PaintContext src, PaintContext dst, Vector4& scaleOffset)
public void SetupTerrainToolMaterialProperties(PaintContext paintContext, BrushTransform brushXform, Material material)
internal bool get_paintTextureUsesCopyTexture()
internal PaintContext InitializePaintContext(Terrain terrain, int targetWidth, int targetHeight, RenderTextureFormat pcFormat, Rect boundsInTerrainSpace, int extraBorderPixels, bool texelPadding)
public void ReleaseContextResources(PaintContext ctx)
public PaintContext BeginPaintHeightmap(Terrain terrain, Rect boundsInTerrainSpace, int extraBorderPixels)
public void EndPaintHeightmap(PaintContext ctx, string editorUndoName)
public PaintContext BeginPaintHoles(Terrain terrain, Rect boundsInTerrainSpace, int extraBorderPixels)
public void EndPaintHoles(PaintContext ctx, string editorUndoName)
public PaintContext CollectNormals(Terrain terrain, Rect boundsInTerrainSpace, int extraBorderPixels)
public PaintContext BeginPaintTexture(Terrain terrain, Rect boundsInTerrainSpace, TerrainLayer inputLayer, int extraBorderPixels)
public void EndPaintTexture(PaintContext ctx, string editorUndoName)
public Material GetBlitMaterial()
public Material GetHeightBlitMaterial()
public Material GetCopyTerrainLayerMaterial()
internal void DrawQuad(RectInt destinationPixels, RectInt sourcePixels, Texture sourceTexture)
internal void DrawQuad2(RectInt destinationPixels, RectInt sourcePixels, Texture sourceTexture, RectInt sourcePixels2, Texture sourceTexture2)
internal RectInt CalcPixelRectFromBounds(Terrain terrain, Rect boundsInTerrainSpace, int textureWidth, int textureHeight, int extraBorderPixels, bool texelPadding)
public Texture2D GetTerrainAlphaMapChecked(Terrain terrain, int mapIndex)
public int FindTerrainLayerIndex(Terrain terrain, TerrainLayer inputLayer)
internal int AddTerrainLayer(Terrain terrain, TerrainLayer inputLayer)
}
public UnityEngine.Experimental.TerrainAPI.TerrainUtility : object {
internal bool HasValidTerrains()
internal void ClearConnectivity()
internal TerrainGroups CollectTerrains(bool onlyAutoConnectedTerrains)
public void AutoConnect()
}
public UnityEngine.PatchExtents : ValueType {
internal float m_min
internal float m_max
public float min
public float max
public float get_min()
public void set_min(float value)
public float get_max()
public void set_max(float value)
}
public UnityEngine.SplatPrototype : object {
internal Texture2D m_Texture
internal Texture2D m_NormalMap
internal Vector2 m_TileSize
internal Vector2 m_TileOffset
internal Vector4 m_SpecularMetallic
internal float m_Smoothness
public Texture2D texture
public Texture2D normalMap
public Vector2 tileSize
public Vector2 tileOffset
public Color specular
public float metallic
public float smoothness
public Texture2D get_texture()
public void set_texture(Texture2D value)
public Texture2D get_normalMap()
public void set_normalMap(Texture2D value)
public Vector2 get_tileSize()
public void set_tileSize(Vector2 value)
public Vector2 get_tileOffset()
public void set_tileOffset(Vector2 value)
public Color get_specular()
public void set_specular(Color value)
public float get_metallic()
public void set_metallic(float value)
public float get_smoothness()
public void set_smoothness(float value)
}
public UnityEngine.Terrain : Behaviour {
public TerrainData terrainData
public float treeDistance
public float treeBillboardDistance
public float treeCrossFadeLength
public int treeMaximumFullLODCount
public float detailObjectDistance
public float detailObjectDensity
public float heightmapPixelError
public int heightmapMaximumLOD
public float basemapDistance
public int lightmapIndex
public int realtimeLightmapIndex
public Vector4 lightmapScaleOffset
public Vector4 realtimeLightmapScaleOffset
public bool freeUnusedRenderingResources
public ShadowCastingMode shadowCastingMode
public ReflectionProbeUsage reflectionProbeUsage
public Material materialTemplate
public bool drawHeightmap
public bool allowAutoConnect
public int groupingID
public bool drawInstanced
public RenderTexture normalmapTexture
public bool drawTreesAndFoliage
public Vector3 patchBoundsMultiplier
public float treeLODBiasMultiplier
public bool collectDetailPatches
public TerrainRenderFlags editorRenderFlags
public bool preserveTreePrototypeLayers
public GraphicsFormat heightmapFormat
public TextureFormat heightmapTextureFormat
public RenderTextureFormat heightmapRenderTextureFormat
public GraphicsFormat normalmapFormat
public TextureFormat normalmapTextureFormat
public RenderTextureFormat normalmapRenderTextureFormat
public GraphicsFormat holesFormat
public RenderTextureFormat holesRenderTextureFormat
public GraphicsFormat compressedHolesFormat
public TextureFormat compressedHolesTextureFormat
public Terrain activeTerrain
public Terrain[] activeTerrains
public Terrain leftNeighbor
public Terrain rightNeighbor
public Terrain topNeighbor
public Terrain bottomNeighbor
public UInt32 renderingLayerMask
public float splatmapDistance
public bool castShadows
public MaterialType materialType
public Color legacySpecular
public float legacyShininess
public TerrainData get_terrainData()
public void set_terrainData(TerrainData value)
public float get_treeDistance()
public void set_treeDistance(float value)
public float get_treeBillboardDistance()
public void set_treeBillboardDistance(float value)
public float get_treeCrossFadeLength()
public void set_treeCrossFadeLength(float value)
public int get_treeMaximumFullLODCount()
public void set_treeMaximumFullLODCount(int value)
public float get_detailObjectDistance()
public void set_detailObjectDistance(float value)
public float get_detailObjectDensity()
public void set_detailObjectDensity(float value)
public float get_heightmapPixelError()
public void set_heightmapPixelError(float value)
public int get_heightmapMaximumLOD()
public void set_heightmapMaximumLOD(int value)
public float get_basemapDistance()
public void set_basemapDistance(float value)
public int get_lightmapIndex()
public void set_lightmapIndex(int value)
public int get_realtimeLightmapIndex()
public void set_realtimeLightmapIndex(int value)
public Vector4 get_lightmapScaleOffset()
public void set_lightmapScaleOffset(Vector4 value)
public Vector4 get_realtimeLightmapScaleOffset()
public void set_realtimeLightmapScaleOffset(Vector4 value)
public bool get_freeUnusedRenderingResources()
public void set_freeUnusedRenderingResources(bool value)
public ShadowCastingMode get_shadowCastingMode()
public void set_shadowCastingMode(ShadowCastingMode value)
public ReflectionProbeUsage get_reflectionProbeUsage()
public void set_reflectionProbeUsage(ReflectionProbeUsage value)
public void GetClosestReflectionProbes(List`1<ReflectionProbeBlendInfo> result)
public Material get_materialTemplate()
public void set_materialTemplate(Material value)
public bool get_drawHeightmap()
public void set_drawHeightmap(bool value)
public bool get_allowAutoConnect()
public void set_allowAutoConnect(bool value)
public int get_groupingID()
public void set_groupingID(int value)
public bool get_drawInstanced()
public void set_drawInstanced(bool value)
public RenderTexture get_normalmapTexture()
public bool get_drawTreesAndFoliage()
public void set_drawTreesAndFoliage(bool value)
public Vector3 get_patchBoundsMultiplier()
public void set_patchBoundsMultiplier(Vector3 value)
public float SampleHeight(Vector3 worldPosition)
public void AddTreeInstance(TreeInstance instance)
public void SetNeighbors(Terrain left, Terrain top, Terrain right, Terrain bottom)
public float get_treeLODBiasMultiplier()
public void set_treeLODBiasMultiplier(float value)
public bool get_collectDetailPatches()
public void set_collectDetailPatches(bool value)
public TerrainRenderFlags get_editorRenderFlags()
public void set_editorRenderFlags(TerrainRenderFlags value)
public Vector3 GetPosition()
public void Flush()
internal void RemoveTrees(Vector2 position, float radius, int prototypeIndex)
public void SetSplatMaterialPropertyBlock(MaterialPropertyBlock properties)
public void GetSplatMaterialPropertyBlock(MaterialPropertyBlock dest)
private void Internal_GetSplatMaterialPropertyBlock(MaterialPropertyBlock dest)
public bool get_preserveTreePrototypeLayers()
public void set_preserveTreePrototypeLayers(bool value)
public GraphicsFormat get_heightmapFormat()
public TextureFormat get_heightmapTextureFormat()
public RenderTextureFormat get_heightmapRenderTextureFormat()
public GraphicsFormat get_normalmapFormat()
public TextureFormat get_normalmapTextureFormat()
public RenderTextureFormat get_normalmapRenderTextureFormat()
public GraphicsFormat get_holesFormat()
public RenderTextureFormat get_holesRenderTextureFormat()
public GraphicsFormat get_compressedHolesFormat()
public TextureFormat get_compressedHolesTextureFormat()
public Terrain get_activeTerrain()
public void SetConnectivityDirty()
public Terrain[] get_activeTerrains()
public GameObject CreateTerrainGameObject(TerrainData assignTerrain)
public Terrain get_leftNeighbor()
public Terrain get_rightNeighbor()
public Terrain get_topNeighbor()
public Terrain get_bottomNeighbor()
public UInt32 get_renderingLayerMask()
public void set_renderingLayerMask(UInt32 value)
public float get_splatmapDistance()
public void set_splatmapDistance(float value)
public bool get_castShadows()
public void set_castShadows(bool value)
public MaterialType get_materialType()
public void set_materialType(MaterialType value)
public Color get_legacySpecular()
public void set_legacySpecular(Color value)
public float get_legacyShininess()
public void set_legacyShininess(float value)
public void ApplyDelayedHeightmapModification()
private void get_lightmapScaleOffset_Injected(Vector4& ret)
private void set_lightmapScaleOffset_Injected(Vector4& value)
private void get_realtimeLightmapScaleOffset_Injected(Vector4& ret)
private void set_realtimeLightmapScaleOffset_Injected(Vector4& value)
private void get_patchBoundsMultiplier_Injected(Vector3& ret)
private void set_patchBoundsMultiplier_Injected(Vector3& value)
private float SampleHeight_Injected(Vector3& worldPosition)
private void AddTreeInstance_Injected(TreeInstance& instance)
private void GetPosition_Injected(Vector3& ret)
private void RemoveTrees_Injected(Vector2& position, float radius, int prototypeIndex)
}
public UnityEngine.TerrainChangedFlags : Enum {
public int value__
public TerrainChangedFlags Heightmap
public TerrainChangedFlags TreeInstances
public TerrainChangedFlags DelayedHeightmapUpdate
public TerrainChangedFlags FlushEverythingImmediately
public TerrainChangedFlags RemoveDirtyDetailsImmediately
public TerrainChangedFlags HeightmapResolution
public TerrainChangedFlags Holes
public TerrainChangedFlags DelayedHolesUpdate
public TerrainChangedFlags WillBeDestroyed
}
public UnityEngine.TerrainData : Object {
private string k_ScriptingInterfaceName
private string k_ScriptingInterfacePrefix
private string k_HeightmapPrefix
private string k_DetailDatabasePrefix
private string k_TreeDatabasePrefix
private string k_SplatDatabasePrefix
internal int k_MaximumResolution
internal int k_MinimumDetailResolutionPerPatch
internal int k_MaximumDetailResolutionPerPatch
internal int k_MaximumDetailPatchCount
internal int k_MaximumDetailsPerRes
internal int k_MinimumAlphamapResolution
internal int k_MaximumAlphamapResolution
internal int k_MinimumBaseMapResolution
internal int k_MaximumBaseMapResolution
public int heightmapWidth
public int heightmapHeight
public RenderTexture heightmapTexture
public int heightmapResolution
private int internalHeightmapResolution
public Vector3 heightmapScale
public Texture holesTexture
public bool enableHolesTextureCompression
internal RenderTexture holesRenderTexture
public int holesResolution
public Vector3 size
public Bounds bounds
public float thickness
public float wavingGrassStrength
public float wavingGrassAmount
public float wavingGrassSpeed
public Color wavingGrassTint
public int detailWidth
public int detailHeight
internal int maxDetailsPerRes
public int detailPatchCount
public int detailResolution
public int detailResolutionPerPatch
public DetailPrototype[] detailPrototypes
public TreeInstance[] treeInstances
public int treeInstanceCount
public TreePrototype[] treePrototypes
public int alphamapLayers
public int alphamapResolution
private int Internal_alphamapResolution
public int alphamapWidth
public int alphamapHeight
public int baseMapResolution
private int Internal_baseMapResolution
public int alphamapTextureCount
public Texture2D[] alphamapTextures
public SplatPrototype[] splatPrototypes
public TerrainLayer[] terrainLayers
internal Terrain[] users
private bool SupportsCopyTextureBetweenRTAndTexture
public string AlphamapTextureName
public string HolesTextureName
private int GetBoundaryValue(BoundaryValueType type)
private void Internal_Create(TerrainData terrainData)
public void UpdateDirtyRegion(int x, int y, int width, int height, bool syncHeightmapTextureImmediately)
public int get_heightmapWidth()
public int get_heightmapHeight()
public RenderTexture get_heightmapTexture()
public int get_heightmapResolution()
public void set_heightmapResolution(int value)
private int get_internalHeightmapResolution()
private void set_internalHeightmapResolution(int value)
public Vector3 get_heightmapScale()
public Texture get_holesTexture()
public bool get_enableHolesTextureCompression()
public void set_enableHolesTextureCompression(bool value)
internal RenderTexture get_holesRenderTexture()
internal bool IsHolesTextureCompressed()
internal RenderTexture GetHolesTexture()
internal Texture2D GetCompressedHolesTexture()
public int get_holesResolution()
public Vector3 get_size()
public void set_size(Vector3 value)
public Bounds get_bounds()
public float get_thickness()
public void set_thickness(float value)
public float GetHeight(int x, int y)
public float GetInterpolatedHeight(float x, float y)
public Single[0...,0...] GetInterpolatedHeights(float xBase, float yBase, int xCount, int yCount, float xInterval, float yInterval)
public void GetInterpolatedHeights(Single[0...,0...] results, int resultXOffset, int resultYOffset, float xBase, float yBase, int xCount, int yCount, float xInterval, float yInterval)
private void Internal_GetInterpolatedHeights(Single[0...,0...] results, int resultXDimension, int resultXOffset, int resultYOffset, float xBase, float yBase, int xCount, int yCount, float xInterval, float yInterval)
public Single[0...,0...] GetHeights(int xBase, int yBase, int width, int height)
private Single[0...,0...] Internal_GetHeights(int xBase, int yBase, int width, int height)
public void SetHeights(int xBase, int yBase, Single[0...,0...] heights)
private void Internal_SetHeights(int xBase, int yBase, int width, int height, Single[0...,0...] heights)
public PatchExtents[] GetPatchMinMaxHeights()
public void OverrideMinMaxPatchHeights(PatchExtents[] minMaxHeights)
public Single[] GetMaximumHeightError()
public void OverrideMaximumHeightError(Single[] maxError)
public void SetHeightsDelayLOD(int xBase, int yBase, Single[0...,0...] heights)
private void Internal_SetHeightsDelayLOD(int xBase, int yBase, int width, int height, Single[0...,0...] heights)
public bool IsHole(int x, int y)
public Boolean[0...,0...] GetHoles(int xBase, int yBase, int width, int height)
public void SetHoles(int xBase, int yBase, Boolean[0...,0...] holes)
public void SetHolesDelayLOD(int xBase, int yBase, Boolean[0...,0...] holes)
private void Internal_SetHoles(int xBase, int yBase, int width, int height, Boolean[0...,0...] holes)
private Boolean[0...,0...] Internal_GetHoles(int xBase, int yBase, int width, int height)
private bool Internal_IsHole(int x, int y)
private void Internal_SetHolesDelayLOD(int xBase, int yBase, int width, int height, Boolean[0...,0...] holes)
public float GetSteepness(float x, float y)
public Vector3 GetInterpolatedNormal(float x, float y)
internal int GetAdjustedSize(int size)
public float get_wavingGrassStrength()
public void set_wavingGrassStrength(float value)
public float get_wavingGrassAmount()
public void set_wavingGrassAmount(float value)
public float get_wavingGrassSpeed()
public void set_wavingGrassSpeed(float value)
public Color get_wavingGrassTint()
public void set_wavingGrassTint(Color value)
public int get_detailWidth()
public int get_detailHeight()
internal int get_maxDetailsPerRes()
public void SetDetailResolution(int detailResolution, int resolutionPerPatch)
private void Internal_SetDetailResolution(int patchCount, int resolutionPerPatch)
public int get_detailPatchCount()
public int get_detailResolution()
public int get_detailResolutionPerPatch()
internal void ResetDirtyDetails()
public void RefreshPrototypes()
public DetailPrototype[] get_detailPrototypes()
public void set_detailPrototypes(DetailPrototype[] value)
public Int32[] GetSupportedLayers(int xBase, int yBase, int totalWidth, int totalHeight)
public Int32[0...,0...] GetDetailLayer(int xBase, int yBase, int width, int height, int layer)
public void SetDetailLayer(int xBase, int yBase, int layer, Int32[0...,0...] details)
private void Internal_SetDetailLayer(int xBase, int yBase, int totalWidth, int totalHeight, int detailIndex, Int32[0...,0...] data)
public TreeInstance[] get_treeInstances()
public void set_treeInstances(TreeInstance[] value)
private TreeInstance[] Internal_GetTreeInstances()
public void SetTreeInstances(TreeInstance[] instances, bool snapToHeightmap)
public TreeInstance GetTreeInstance(int index)
private TreeInstance Internal_GetTreeInstance(int index)
public void SetTreeInstance(int index, TreeInstance instance)
public int get_treeInstanceCount()
public TreePrototype[] get_treePrototypes()
public void set_treePrototypes(TreePrototype[] value)
internal void RemoveTreePrototype(int index)
internal void RemoveDetailPrototype(int index)
internal bool NeedUpgradeScaledTreePrototypes()
internal void UpgradeScaledTreePrototype()
public int get_alphamapLayers()
public Single[0...,0...,0...] GetAlphamaps(int x, int y, int width, int height)
private Single[0...,0...,0...] Internal_GetAlphamaps(int x, int y, int width, int height)
public int get_alphamapResolution()
public void set_alphamapResolution(int value)
internal float GetAlphamapResolutionInternal()
private int get_Internal_alphamapResolution()
private void set_Internal_alphamapResolution(int value)
public int get_alphamapWidth()
public int get_alphamapHeight()
public int get_baseMapResolution()
public void set_baseMapResolution(int value)
private int get_Internal_baseMapResolution()
private void set_Internal_baseMapResolution(int value)
public void SetAlphamaps(int x, int y, Single[0...,0...,0...] map)
private void Internal_SetAlphamaps(int x, int y, int width, int height, Single[0...,0...,0...] map)
public void SetBaseMapDirty()
public Texture2D GetAlphamapTexture(int index)
public int get_alphamapTextureCount()
public Texture2D[] get_alphamapTextures()
public SplatPrototype[] get_splatPrototypes()
public void set_splatPrototypes(SplatPrototype[] value)
public TerrainLayer[] get_terrainLayers()
public void set_terrainLayers(TerrainLayer[] value)
internal void AddTree(TreeInstance& tree)
internal int RemoveTrees(Vector2 position, float radius, int prototypeIndex)
private void Internal_CopyActiveRenderTextureToHeightmap(RectInt rect, int destX, int destY, TerrainHeightmapSyncControl syncControl)
private void Internal_DirtyHeightmapRegion(int x, int y, int width, int height, TerrainHeightmapSyncControl syncControl)
public void SyncHeightmap()
private void Internal_CopyActiveRenderTextureToHoles(RectInt rect, int destX, int destY, bool allowDelayedCPUSync)
private void Internal_DirtyHolesRegion(int x, int y, int width, int height, bool allowDelayedCPUSync)
private void Internal_SyncHoles()
private void Internal_MarkAlphamapDirtyRegion(int alphamapIndex, int x, int y, int width, int height)
private void Internal_ClearAlphamapDirtyRegion(int alphamapIndex)
private void Internal_SyncAlphamaps()
internal Terrain[] get_users()
private bool get_SupportsCopyTextureBetweenRTAndTexture()
public void CopyActiveRenderTextureToHeightmap(RectInt sourceRect, Vector2Int dest, TerrainHeightmapSyncControl syncControl)
public void DirtyHeightmapRegion(RectInt region, TerrainHeightmapSyncControl syncControl)
public string get_AlphamapTextureName()
public string get_HolesTextureName()
public void CopyActiveRenderTextureToTexture(string textureName, int textureIndex, RectInt sourceRect, Vector2Int dest, bool allowDelayedCPUSync)
public void DirtyTextureRegion(string textureName, RectInt region, bool allowDelayedCPUSync)
public void SyncTexture(string textureName)
private void get_heightmapScale_Injected(Vector3& ret)
private void get_size_Injected(Vector3& ret)
private void set_size_Injected(Vector3& value)
private void get_bounds_Injected(Bounds& ret)
private void GetInterpolatedNormal_Injected(float x, float y, Vector3& ret)
private void get_wavingGrassTint_Injected(Color& ret)
private void set_wavingGrassTint_Injected(Color& value)
private void Internal_GetTreeInstance_Injected(int index, TreeInstance& ret)
private void SetTreeInstance_Injected(int index, TreeInstance& instance)
private int RemoveTrees_Injected(Vector2& position, float radius, int prototypeIndex)
private void Internal_CopyActiveRenderTextureToHeightmap_Injected(RectInt& rect, int destX, int destY, TerrainHeightmapSyncControl syncControl)
private void Internal_CopyActiveRenderTextureToHoles_Injected(RectInt& rect, int destX, int destY, bool allowDelayedCPUSync)
}
public UnityEngine.TerrainExtensions : object {
public void UpdateGIMaterials(Terrain terrain)
public void UpdateGIMaterials(Terrain terrain, int x, int y, int width, int height)
internal void UpdateGIMaterialsForTerrain(int terrainInstanceID, Rect uvBounds)
private void UpdateGIMaterialsForTerrain_Injected(int terrainInstanceID, Rect& uvBounds)
}
public UnityEngine.TerrainHeightmapSyncControl : Enum {
public int value__
public TerrainHeightmapSyncControl None
public TerrainHeightmapSyncControl HeightOnly
public TerrainHeightmapSyncControl HeightAndLod
}
public UnityEngine.TerrainLayer : Object {
public Texture2D diffuseTexture
public Texture2D normalMapTexture
public Texture2D maskMapTexture
public Vector2 tileSize
public Vector2 tileOffset
public Color specular
public float metallic
public float smoothness
public float normalScale
public Vector4 diffuseRemapMin
public Vector4 diffuseRemapMax
public Vector4 maskMapRemapMin
public Vector4 maskMapRemapMax
private void Internal_Create(TerrainLayer layer)
public Texture2D get_diffuseTexture()
public void set_diffuseTexture(Texture2D value)
public Texture2D get_normalMapTexture()
public void set_normalMapTexture(Texture2D value)
public Texture2D get_maskMapTexture()
public void set_maskMapTexture(Texture2D value)
public Vector2 get_tileSize()
public void set_tileSize(Vector2 value)
public Vector2 get_tileOffset()
public void set_tileOffset(Vector2 value)
public Color get_specular()
public void set_specular(Color value)
public float get_metallic()
public void set_metallic(float value)
public float get_smoothness()
public void set_smoothness(float value)
public float get_normalScale()
public void set_normalScale(float value)
public Vector4 get_diffuseRemapMin()
public void set_diffuseRemapMin(Vector4 value)
public Vector4 get_diffuseRemapMax()
public void set_diffuseRemapMax(Vector4 value)
public Vector4 get_maskMapRemapMin()
public void set_maskMapRemapMin(Vector4 value)
public Vector4 get_maskMapRemapMax()
public void set_maskMapRemapMax(Vector4 value)
private void get_tileSize_Injected(Vector2& ret)
private void set_tileSize_Injected(Vector2& value)
private void get_tileOffset_Injected(Vector2& ret)
private void set_tileOffset_Injected(Vector2& value)
private void get_specular_Injected(Color& ret)
private void set_specular_Injected(Color& value)
private void get_diffuseRemapMin_Injected(Vector4& ret)
private void set_diffuseRemapMin_Injected(Vector4& value)
private void get_diffuseRemapMax_Injected(Vector4& ret)
private void set_diffuseRemapMax_Injected(Vector4& value)
private void get_maskMapRemapMin_Injected(Vector4& ret)
private void set_maskMapRemapMin_Injected(Vector4& value)
private void get_maskMapRemapMax_Injected(Vector4& ret)
private void set_maskMapRemapMax_Injected(Vector4& value)
}
public UnityEngine.TerrainRenderFlags : Enum {
public int value__
public TerrainRenderFlags heightmap
public TerrainRenderFlags trees
public TerrainRenderFlags details
public TerrainRenderFlags all
public TerrainRenderFlags Heightmap
public TerrainRenderFlags Trees
public TerrainRenderFlags Details
public TerrainRenderFlags All
}
public UnityEngine.Tree : Component {
public ScriptableObject data
public bool hasSpeedTreeWind
public ScriptableObject get_data()
public void set_data(ScriptableObject value)
public bool get_hasSpeedTreeWind()
}
public UnityEngine.TreeInstance : ValueType {
public Vector3 position
public float widthScale
public float heightScale
public float rotation
public Color32 color
public Color32 lightmapColor
public int prototypeIndex
internal float temporaryDistance
}
public UnityEngine.TreePrototype : object {
internal GameObject m_Prefab
internal float m_BendFactor
public GameObject prefab
public float bendFactor
public GameObject get_prefab()
public void set_prefab(GameObject value)
public float get_bendFactor()
public void set_bendFactor(float value)
public void .ctor(TreePrototype other)
public bool Equals(object obj)
public int GetHashCode()
private bool Equals(TreePrototype other)
}
