[UsedByNativeCodeAttribute]
public class UnityEngine.TextCore.FaceInfo : ValueType {
    [SerializeField]
[NativeNameAttribute("faceIndex")]

private int m_FaceIndex;
    [SerializeField]
[NativeNameAttribute("familyName")]

private string m_FamilyName;
    [SerializeField]
[NativeNameAttribute("styleName")]

private string m_StyleName;
    [SerializeField]
[NativeNameAttribute("pointSize")]

private int m_PointSize;
    [NativeNameAttribute("scale")]
[SerializeField]

private float m_Scale;
    [SerializeField]
[NativeNameAttribute("unitsPerEM")]

private int m_UnitsPerEM;
    [NativeNameAttribute("lineHeight")]
[SerializeField]

private float m_LineHeight;
    [NativeNameAttribute("ascentLine")]
[SerializeField]

private float m_AscentLine;
    [NativeNameAttribute("capLine")]
[SerializeField]

private float m_CapLine;
    [SerializeField]
[NativeNameAttribute("meanLine")]

private float m_MeanLine;
    [SerializeField]
[NativeNameAttribute("baseline")]

private float m_Baseline;
    [NativeNameAttribute("descentLine")]
[SerializeField]

private float m_DescentLine;
    [NativeNameAttribute("superscriptOffset")]
[SerializeField]

private float m_SuperscriptOffset;
    [SerializeField]
[NativeNameAttribute("superscriptSize")]

private float m_SuperscriptSize;
    [SerializeField]
[NativeNameAttribute("subscriptOffset")]

private float m_SubscriptOffset;
    [SerializeField]
[NativeNameAttribute("subscriptSize")]

private float m_SubscriptSize;
    [NativeNameAttribute("underlineOffset")]
[SerializeField]

private float m_UnderlineOffset;
    [SerializeField]
[NativeNameAttribute("underlineThickness")]

private float m_UnderlineThickness;
    [SerializeField]
[NativeNameAttribute("strikethroughOffset")]

private float m_StrikethroughOffset;
    [SerializeField]
[NativeNameAttribute("strikethroughThickness")]

private float m_StrikethroughThickness;
    [SerializeField]
[NativeNameAttribute("tabWidth")]

private float m_TabWidth;
    
internal int faceIndex { get; internal set; }
    
public string familyName { get; public set; }
    
public string styleName { get; public set; }
    
public int pointSize { get; public set; }
    
public float scale { get; public set; }
    
internal int unitsPerEM { get; internal set; }
    
public float lineHeight { get; public set; }
    
public float ascentLine { get; public set; }
    
public float capLine { get; public set; }
    
public float meanLine { get; public set; }
    
public float baseline { get; public set; }
    
public float descentLine { get; public set; }
    
public float superscriptOffset { get; public set; }
    
public float superscriptSize { get; public set; }
    
public float subscriptOffset { get; public set; }
    
public float subscriptSize { get; public set; }
    
public float underlineOffset { get; public set; }
    
public float underlineThickness { get; public set; }
    
public float strikethroughOffset { get; public set; }
    
public float strikethroughThickness { get; public set; }
    
public float tabWidth { get; public set; }
    internal FaceInfo(string familyName, string styleName, int pointSize, float scale, int unitsPerEM, float lineHeight, float ascentLine, float capLine, float meanLine, float baseline, float descentLine, float superscriptOffset, float superscriptSize, float subscriptOffset, float subscriptSize, float underlineOffset, float underlineThickness, float strikethroughOffset, float strikethroughThickness, float tabWidth);
    internal int get_faceIndex();
    internal void set_faceIndex(int value);
    public string get_familyName();
    public void set_familyName(string value);
    public string get_styleName();
    public void set_styleName(string value);
    public int get_pointSize();
    public void set_pointSize(int value);
    public float get_scale();
    public void set_scale(float value);
    internal int get_unitsPerEM();
    internal void set_unitsPerEM(int value);
    public float get_lineHeight();
    public void set_lineHeight(float value);
    public float get_ascentLine();
    public void set_ascentLine(float value);
    public float get_capLine();
    public void set_capLine(float value);
    public float get_meanLine();
    public void set_meanLine(float value);
    public float get_baseline();
    public void set_baseline(float value);
    public float get_descentLine();
    public void set_descentLine(float value);
    public float get_superscriptOffset();
    public void set_superscriptOffset(float value);
    public float get_superscriptSize();
    public void set_superscriptSize(float value);
    public float get_subscriptOffset();
    public void set_subscriptOffset(float value);
    public float get_subscriptSize();
    public void set_subscriptSize(float value);
    public float get_underlineOffset();
    public void set_underlineOffset(float value);
    public float get_underlineThickness();
    public void set_underlineThickness(float value);
    public float get_strikethroughOffset();
    public void set_strikethroughOffset(float value);
    public float get_strikethroughThickness();
    public void set_strikethroughThickness(float value);
    public float get_tabWidth();
    public void set_tabWidth(float value);
    public bool Compare(FaceInfo other);
}
[UsedByNativeCodeAttribute]
public class UnityEngine.TextCore.Glyph : object {
    [NativeNameAttribute("index")]
[SerializeField]

private UInt32 m_Index;
    [NativeNameAttribute("metrics")]
[SerializeField]

private GlyphMetrics m_Metrics;
    [NativeNameAttribute("glyphRect")]
[SerializeField]

private GlyphRect m_GlyphRect;
    [SerializeField]
[NativeNameAttribute("scale")]

private float m_Scale;
    [SerializeField]
[NativeNameAttribute("atlasIndex")]

private int m_AtlasIndex;
    [NativeNameAttribute("type")]
[SerializeField]

private GlyphClassDefinitionType m_ClassDefinitionType;
    
public UInt32 index { get; public set; }
    
public GlyphMetrics metrics { get; public set; }
    
public GlyphRect glyphRect { get; public set; }
    
public float scale { get; public set; }
    
public int atlasIndex { get; public set; }
    
public GlyphClassDefinitionType classDefinitionType { get; public set; }
    public Glyph(Glyph glyph);
    internal Glyph(GlyphMarshallingStruct glyphStruct);
    public Glyph(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect);
    public Glyph(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex);
    public UInt32 get_index();
    public void set_index(UInt32 value);
    public GlyphMetrics get_metrics();
    public void set_metrics(GlyphMetrics value);
    public GlyphRect get_glyphRect();
    public void set_glyphRect(GlyphRect value);
    public float get_scale();
    public void set_scale(float value);
    public int get_atlasIndex();
    public void set_atlasIndex(int value);
    public GlyphClassDefinitionType get_classDefinitionType();
    public void set_classDefinitionType(GlyphClassDefinitionType value);
    public bool Compare(Glyph other);
}
public enum UnityEngine.TextCore.GlyphClassDefinitionType : Enum {
    
public int value__;
    
public static GlyphClassDefinitionType Undefined;
    
public static GlyphClassDefinitionType Base;
    
public static GlyphClassDefinitionType Ligature;
    
public static GlyphClassDefinitionType Mark;
    
public static GlyphClassDefinitionType Component;
}
[UsedByNativeCodeAttribute]
public class UnityEngine.TextCore.GlyphMetrics : ValueType {
    [NativeNameAttribute("width")]
[SerializeField]

private float m_Width;
    [SerializeField]
[NativeNameAttribute("height")]

private float m_Height;
    [SerializeField]
[NativeNameAttribute("horizontalBearingX")]

private float m_HorizontalBearingX;
    [NativeNameAttribute("horizontalBearingY")]
[SerializeField]

private float m_HorizontalBearingY;
    [NativeNameAttribute("horizontalAdvance")]
[SerializeField]

private float m_HorizontalAdvance;
    
public float width { get; public set; }
    
public float height { get; public set; }
    
public float horizontalBearingX { get; public set; }
    
public float horizontalBearingY { get; public set; }
    
public float horizontalAdvance { get; public set; }
    public GlyphMetrics(float width, float height, float bearingX, float bearingY, float advance);
    public float get_width();
    public void set_width(float value);
    public float get_height();
    public void set_height(float value);
    public float get_horizontalBearingX();
    public void set_horizontalBearingX(float value);
    public float get_horizontalBearingY();
    public void set_horizontalBearingY(float value);
    public float get_horizontalAdvance();
    public void set_horizontalAdvance(float value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GlyphMetrics other);
    public static bool op_Equality(GlyphMetrics lhs, GlyphMetrics rhs);
    public static bool op_Inequality(GlyphMetrics lhs, GlyphMetrics rhs);
}
[UsedByNativeCodeAttribute]
public class UnityEngine.TextCore.GlyphRect : ValueType {
    [NativeNameAttribute("x")]
[SerializeField]

private int m_X;
    [NativeNameAttribute("y")]
[SerializeField]

private int m_Y;
    [SerializeField]
[NativeNameAttribute("width")]

private int m_Width;
    [SerializeField]
[NativeNameAttribute("height")]

private int m_Height;
    
private static GlyphRect s_ZeroGlyphRect;
    
public int x { get; public set; }
    
public int y { get; public set; }
    
public int width { get; public set; }
    
public int height { get; public set; }
    
public static GlyphRect zero { get; }
    public GlyphRect(int x, int y, int width, int height);
    public GlyphRect(Rect rect);
    private static GlyphRect();
    public int get_x();
    public void set_x(int value);
    public int get_y();
    public void set_y(int value);
    public int get_width();
    public void set_width(int value);
    public int get_height();
    public void set_height(int value);
    public static GlyphRect get_zero();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GlyphRect other);
    public static bool op_Equality(GlyphRect lhs, GlyphRect rhs);
    public static bool op_Inequality(GlyphRect lhs, GlyphRect rhs);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.AlternateSubstitutionRecord : ValueType {
    [SerializeField]
[NativeNameAttribute("targetGlyphID")]

private UInt32 m_TargetGlyphID;
    [SerializeField]
[NativeNameAttribute("substituteGlyphIDs")]

private UInt32[] m_SubstituteGlyphIDs;
    
public UInt32 targetGlyphID { get; public set; }
    
public UInt32[] substituteGlyphIDs { get; public set; }
    public UInt32 get_targetGlyphID();
    public void set_targetGlyphID(UInt32 value);
    public UInt32[] get_substituteGlyphIDs();
    public void set_substituteGlyphIDs(UInt32[] value);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.ChainingContextualSubstitutionRecord : ValueType {
    [SerializeField]
[NativeNameAttribute("backtrackGlyphSequences")]

private GlyphIDSequence[] m_BacktrackGlyphSequences;
    [SerializeField]
[NativeNameAttribute("inputGlyphSequences")]

private GlyphIDSequence[] m_InputGlyphSequences;
    [NativeNameAttribute("lookaheadGlyphSequences")]
[SerializeField]

private GlyphIDSequence[] m_LookaheadGlyphSequences;
    [SerializeField]
[NativeNameAttribute("sequenceLookupRecords")]

private SequenceLookupRecord[] m_SequenceLookupRecords;
    
public GlyphIDSequence[] backtrackGlyphSequences { get; public set; }
    
public GlyphIDSequence[] inputGlyphSequences { get; public set; }
    
public GlyphIDSequence[] lookaheadGlyphSequences { get; public set; }
    
public SequenceLookupRecord[] sequenceLookupRecords { get; public set; }
    public GlyphIDSequence[] get_backtrackGlyphSequences();
    public void set_backtrackGlyphSequences(GlyphIDSequence[] value);
    public GlyphIDSequence[] get_inputGlyphSequences();
    public void set_inputGlyphSequences(GlyphIDSequence[] value);
    public GlyphIDSequence[] get_lookaheadGlyphSequences();
    public void set_lookaheadGlyphSequences(GlyphIDSequence[] value);
    public SequenceLookupRecord[] get_sequenceLookupRecords();
    public void set_sequenceLookupRecords(SequenceLookupRecord[] value);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.ContextualSubstitutionRecord : ValueType {
    [SerializeField]
[NativeNameAttribute("inputGlyphSequences")]

private GlyphIDSequence[] m_InputGlyphSequences;
    [SerializeField]
[NativeNameAttribute("sequenceLookupRecords")]

private SequenceLookupRecord[] m_SequenceLookupRecords;
    
public GlyphIDSequence[] inputSequences { get; public set; }
    
public SequenceLookupRecord[] sequenceLookupRecords { get; public set; }
    public GlyphIDSequence[] get_inputSequences();
    public void set_inputSequences(GlyphIDSequence[] value);
    public SequenceLookupRecord[] get_sequenceLookupRecords();
    public void set_sequenceLookupRecords(SequenceLookupRecord[] value);
}
[NativeHeaderAttribute("Modules/TextCoreFontEngine/Native/FontEngine.h")]
public class UnityEngine.TextCore.LowLevel.FontEngine : object {
    
private static Glyph[] s_Glyphs;
    
private static UInt32[] s_GlyphIndexes_MarshallingArray_A;
    
private static UInt32[] s_GlyphIndexes_MarshallingArray_B;
    
private static GlyphMarshallingStruct[] s_GlyphMarshallingStruct_IN;
    
private static GlyphMarshallingStruct[] s_GlyphMarshallingStruct_OUT;
    
private static GlyphRect[] s_FreeGlyphRects;
    
private static GlyphRect[] s_UsedGlyphRects;
    
private static GlyphAdjustmentRecord[] s_SingleAdjustmentRecords_MarshallingArray;
    
private static SingleSubstitutionRecord[] s_SingleSubstitutionRecords_MarshallingArray;
    
private static MultipleSubstitutionRecord[] s_MultipleSubstitutionRecords_MarshallingArray;
    
private static AlternateSubstitutionRecord[] s_AlternateSubstitutionRecords_MarshallingArray;
    
private static LigatureSubstitutionRecord[] s_LigatureSubstitutionRecords_MarshallingArray;
    
private static ContextualSubstitutionRecord[] s_ContextualSubstitutionRecords_MarshallingArray;
    
private static ChainingContextualSubstitutionRecord[] s_ChainingContextualSubstitutionRecords_MarshallingArray;
    
private static GlyphPairAdjustmentRecord[] s_PairAdjustmentRecords_MarshallingArray;
    
private static MarkToBaseAdjustmentRecord[] s_MarkToBaseAdjustmentRecords_MarshallingArray;
    
private static MarkToMarkAdjustmentRecord[] s_MarkToMarkAdjustmentRecords_MarshallingArray;
    
private static Dictionary`2<UInt32, Glyph> s_GlyphLookupDictionary;
    
internal static bool isProcessingDone { get; }
    
internal static float generationProgress { get; }
    private static FontEngine();
    public static FontEngineError InitializeFontEngine();
    [NativeMethodAttribute]
private static int InitializeFontEngine_Internal();
    public static FontEngineError DestroyFontEngine();
    [NativeMethodAttribute]
private static int DestroyFontEngine_Internal();
    internal static void SendCancellationRequest();
    [NativeMethodAttribute]
private static void SendCancellationRequest_Internal();
    [NativeMethodAttribute]
internal static bool get_isProcessingDone();
    [NativeMethodAttribute]
internal static float get_generationProgress();
    public static FontEngineError LoadFontFace(string filePath);
    [NativeMethodAttribute]
private static int LoadFontFace_Internal(string filePath);
    public static FontEngineError LoadFontFace(string filePath, int pointSize);
    [NativeMethodAttribute]
private static int LoadFontFace_With_Size_Internal(string filePath, int pointSize);
    public static FontEngineError LoadFontFace(string filePath, int pointSize, int faceIndex);
    [NativeMethodAttribute]
private static int LoadFontFace_With_Size_And_FaceIndex_Internal(string filePath, int pointSize, int faceIndex);
    public static FontEngineError LoadFontFace(Byte[] sourceFontFile);
    [NativeMethodAttribute]
private static int LoadFontFace_FromSourceFontFile_Internal(Byte[] sourceFontFile);
    public static FontEngineError LoadFontFace(Byte[] sourceFontFile, int pointSize);
    [NativeMethodAttribute]
private static int LoadFontFace_With_Size_FromSourceFontFile_Internal(Byte[] sourceFontFile, int pointSize);
    public static FontEngineError LoadFontFace(Byte[] sourceFontFile, int pointSize, int faceIndex);
    [NativeMethodAttribute]
private static int LoadFontFace_With_Size_And_FaceIndex_FromSourceFontFile_Internal(Byte[] sourceFontFile, int pointSize, int faceIndex);
    public static FontEngineError LoadFontFace(Font font);
    [NativeMethodAttribute]
private static int LoadFontFace_FromFont_Internal(Font font);
    public static FontEngineError LoadFontFace(Font font, int pointSize);
    [NativeMethodAttribute]
private static int LoadFontFace_With_Size_FromFont_Internal(Font font, int pointSize);
    public static FontEngineError LoadFontFace(Font font, int pointSize, int faceIndex);
    [NativeMethodAttribute]
private static int LoadFontFace_With_Size_and_FaceIndex_FromFont_Internal(Font font, int pointSize, int faceIndex);
    public static FontEngineError LoadFontFace(string familyName, string styleName);
    [NativeMethodAttribute]
private static int LoadFontFace_by_FamilyName_and_StyleName_Internal(string familyName, string styleName);
    public static FontEngineError LoadFontFace(string familyName, string styleName, int pointSize);
    [NativeMethodAttribute]
private static int LoadFontFace_With_Size_by_FamilyName_and_StyleName_Internal(string familyName, string styleName, int pointSize);
    public static FontEngineError UnloadFontFace();
    [NativeMethodAttribute]
private static int UnloadFontFace_Internal();
    public static FontEngineError UnloadAllFontFaces();
    [NativeMethodAttribute]
private static int UnloadAllFontFaces_Internal();
    public static String[] GetSystemFontNames();
    [NativeMethodAttribute]
private static String[] GetSystemFontNames_Internal();
    [NativeMethodAttribute]
internal static FontReference[] GetSystemFontReferences();
    internal static bool TryGetSystemFontReference(string familyName, string styleName, FontReference& fontRef);
    [NativeMethodAttribute]
private static bool TryGetSystemFontReference_Internal(string familyName, string styleName, FontReference& fontRef);
    public static FontEngineError SetFaceSize(int pointSize);
    [NativeMethodAttribute]
private static int SetFaceSize_Internal(int pointSize);
    public static FaceInfo GetFaceInfo();
    [NativeMethodAttribute]
private static int GetFaceInfo_Internal(FaceInfo& faceInfo);
    [NativeMethodAttribute]
internal static int GetFaceCount();
    public static String[] GetFontFaces();
    [NativeMethodAttribute]
private static String[] GetFontFaces_Internal();
    [NativeMethodAttribute]
internal static UInt32 GetVariantGlyphIndex(UInt32 unicode, UInt32 variantSelectorUnicode);
    [NativeMethodAttribute]
internal static UInt32 GetGlyphIndex(UInt32 unicode);
    [NativeMethodAttribute]
public static bool TryGetGlyphIndex(UInt32 unicode, UInt32& glyphIndex);
    internal static FontEngineError LoadGlyph(UInt32 unicode, GlyphLoadFlags flags);
    [NativeMethodAttribute]
private static int LoadGlyph_Internal(UInt32 unicode, GlyphLoadFlags loadFlags);
    public static bool TryGetGlyphWithUnicodeValue(UInt32 unicode, GlyphLoadFlags flags, Glyph& glyph);
    [NativeMethodAttribute]
private static bool TryGetGlyphWithUnicodeValue_Internal(UInt32 unicode, GlyphLoadFlags loadFlags, GlyphMarshallingStruct& glyphStruct);
    public static bool TryGetGlyphWithIndexValue(UInt32 glyphIndex, GlyphLoadFlags flags, Glyph& glyph);
    [NativeMethodAttribute]
private static bool TryGetGlyphWithIndexValue_Internal(UInt32 glyphIndex, GlyphLoadFlags loadFlags, GlyphMarshallingStruct& glyphStruct);
    internal static bool TryPackGlyphInAtlas(Glyph glyph, int padding, GlyphPackingMode packingMode, GlyphRenderMode renderMode, int width, int height, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects);
    [NativeMethodAttribute]
private static bool TryPackGlyphInAtlas_Internal(GlyphMarshallingStruct& glyph, int padding, GlyphPackingMode packingMode, GlyphRenderMode renderMode, int width, int height, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount);
    internal static bool TryPackGlyphsInAtlas(List`1<Glyph> glyphsToAdd, List`1<Glyph> glyphsAdded, int padding, GlyphPackingMode packingMode, GlyphRenderMode renderMode, int width, int height, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects);
    [NativeMethodAttribute]
private static bool TryPackGlyphsInAtlas_Internal(GlyphMarshallingStruct[] glyphsToAdd, Int32& glyphsToAddCount, GlyphMarshallingStruct[] glyphsAdded, Int32& glyphsAddedCount, int padding, GlyphPackingMode packingMode, GlyphRenderMode renderMode, int width, int height, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount);
    internal static FontEngineError RenderGlyphToTexture(Glyph glyph, int padding, GlyphRenderMode renderMode, Texture2D texture);
    [NativeMethodAttribute]
private static int RenderGlyphToTexture_Internal(GlyphMarshallingStruct glyphStruct, int padding, GlyphRenderMode renderMode, Texture2D texture);
    internal static FontEngineError RenderGlyphsToTexture(List`1<Glyph> glyphs, int padding, GlyphRenderMode renderMode, Texture2D texture);
    [NativeMethodAttribute]
private static int RenderGlyphsToTexture_Internal(GlyphMarshallingStruct[] glyphs, int glyphCount, int padding, GlyphRenderMode renderMode, Texture2D texture);
    internal static FontEngineError RenderGlyphsToTexture(List`1<Glyph> glyphs, int padding, GlyphRenderMode renderMode, Byte[] texBuffer, int texWidth, int texHeight);
    [NativeMethodAttribute]
private static int RenderGlyphsToTextureBuffer_Internal(GlyphMarshallingStruct[] glyphs, int glyphCount, int padding, GlyphRenderMode renderMode, Byte[] texBuffer, int texWidth, int texHeight);
    internal static FontEngineError RenderGlyphsToSharedTexture(List`1<Glyph> glyphs, int padding, GlyphRenderMode renderMode);
    [NativeMethodAttribute]
private static int RenderGlyphsToSharedTexture_Internal(GlyphMarshallingStruct[] glyphs, int glyphCount, int padding, GlyphRenderMode renderMode);
    [NativeMethodAttribute]
internal static void SetSharedTexture(Texture2D texture);
    [NativeMethodAttribute]
internal static void ReleaseSharedTexture();
    [NativeMethodAttribute]
internal static void SetTextureUploadMode(bool shouldUploadImmediately);
    internal static bool TryAddGlyphToTexture(UInt32 glyphIndex, int padding, GlyphPackingMode packingMode, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects, GlyphRenderMode renderMode, Texture2D texture, Glyph& glyph);
    [NativeMethodAttribute]
private static bool TryAddGlyphToTexture_Internal(UInt32 glyphIndex, int padding, GlyphPackingMode packingMode, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount, GlyphRenderMode renderMode, Texture2D texture, GlyphMarshallingStruct& glyph);
    internal static bool TryAddGlyphsToTexture(List`1<Glyph> glyphsToAdd, List`1<Glyph> glyphsAdded, int padding, GlyphPackingMode packingMode, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects, GlyphRenderMode renderMode, Texture2D texture);
    [NativeMethodAttribute]
private static bool TryAddGlyphsToTexture_Internal_MultiThread(GlyphMarshallingStruct[] glyphsToAdd, Int32& glyphsToAddCount, GlyphMarshallingStruct[] glyphsAdded, Int32& glyphsAddedCount, int padding, GlyphPackingMode packingMode, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount, GlyphRenderMode renderMode, Texture2D texture);
    internal static bool TryAddGlyphsToTexture(List`1<UInt32> glyphIndexes, int padding, GlyphPackingMode packingMode, List`1<GlyphRect> freeGlyphRects, List`1<GlyphRect> usedGlyphRects, GlyphRenderMode renderMode, Texture2D texture, Glyph[]& glyphs);
    [NativeMethodAttribute]
private static bool TryAddGlyphsToTexture_Internal(UInt32[] glyphIndex, int padding, GlyphPackingMode packingMode, GlyphRect[] freeGlyphRects, Int32& freeGlyphRectCount, GlyphRect[] usedGlyphRects, Int32& usedGlyphRectCount, GlyphRenderMode renderMode, Texture2D texture, GlyphMarshallingStruct[] glyphs, Int32& glyphCount);
    [NativeMethodAttribute]
internal static OTL_Table GetOpenTypeLayoutTable(OTL_TableType type);
    [NativeMethodAttribute]
internal static OTL_Script[] GetOpenTypeLayoutScripts();
    [NativeMethodAttribute]
internal static OTL_Feature[] GetOpenTypeLayoutFeatures();
    [NativeMethodAttribute]
internal static OTL_Lookup[] GetOpenTypeLayoutLookups();
    internal static OpenTypeFeature[] GetOpenTypeFontFeatureList();
    [NativeMethodAttribute]
internal static SingleSubstitutionRecord[] GetAllSingleSubstitutionRecords();
    internal static SingleSubstitutionRecord[] GetSingleSubstitutionRecords(int lookupIndex, UInt32 glyphIndex);
    internal static SingleSubstitutionRecord[] GetSingleSubstitutionRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static SingleSubstitutionRecord[] GetSingleSubstitutionRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulateSingleSubstitutionRecordMarshallingArray_from_GlyphIndexes(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetSingleSubstitutionRecordsFromMarshallingArray(SingleSubstitutionRecord[] singleSubstitutionRecords);
    [NativeMethodAttribute]
internal static MultipleSubstitutionRecord[] GetAllMultipleSubstitutionRecords();
    internal static MultipleSubstitutionRecord[] GetMultipleSubstitutionRecords(int lookupIndex, UInt32 glyphIndex);
    internal static MultipleSubstitutionRecord[] GetMultipleSubstitutionRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static MultipleSubstitutionRecord[] GetMultipleSubstitutionRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulateMultipleSubstitutionRecordMarshallingArray_from_GlyphIndexes(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetMultipleSubstitutionRecordsFromMarshallingArray(MultipleSubstitutionRecord[] substitutionRecords);
    [NativeMethodAttribute]
internal static AlternateSubstitutionRecord[] GetAllAlternateSubstitutionRecords();
    internal static AlternateSubstitutionRecord[] GetAlternateSubstitutionRecords(int lookupIndex, UInt32 glyphIndex);
    internal static AlternateSubstitutionRecord[] GetAlternateSubstitutionRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static AlternateSubstitutionRecord[] GetAlternateSubstitutionRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulateAlternateSubstitutionRecordMarshallingArray_from_GlyphIndexes(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetAlternateSubstitutionRecordsFromMarshallingArray(AlternateSubstitutionRecord[] singleSubstitutionRecords);
    [NativeMethodAttribute]
internal static LigatureSubstitutionRecord[] GetAllLigatureSubstitutionRecords();
    internal static LigatureSubstitutionRecord[] GetLigatureSubstitutionRecords(UInt32 glyphIndex);
    internal static LigatureSubstitutionRecord[] GetLigatureSubstitutionRecords(List`1<UInt32> glyphIndexes);
    internal static LigatureSubstitutionRecord[] GetLigatureSubstitutionRecords(int lookupIndex, UInt32 glyphIndex);
    internal static LigatureSubstitutionRecord[] GetLigatureSubstitutionRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static LigatureSubstitutionRecord[] GetLigatureSubstitutionRecords(UInt32[] glyphIndexes);
    private static LigatureSubstitutionRecord[] GetLigatureSubstitutionRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulateLigatureSubstitutionRecordMarshallingArray(UInt32[] glyphIndexes, Int32& recordCount);
    [NativeMethodAttribute]
private static int PopulateLigatureSubstitutionRecordMarshallingArray_for_LookupIndex(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetLigatureSubstitutionRecordsFromMarshallingArray(LigatureSubstitutionRecord[] ligatureSubstitutionRecords);
    [NativeMethodAttribute]
internal static ContextualSubstitutionRecord[] GetAllContextualSubstitutionRecords();
    internal static ContextualSubstitutionRecord[] GetContextualSubstitutionRecords(int lookupIndex, UInt32 glyphIndex);
    internal static ContextualSubstitutionRecord[] GetContextualSubstitutionRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static ContextualSubstitutionRecord[] GetContextualSubstitutionRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulateContextualSubstitutionRecordMarshallingArray_from_GlyphIndexes(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetContextualSubstitutionRecordsFromMarshallingArray(ContextualSubstitutionRecord[] substitutionRecords);
    [NativeMethodAttribute]
internal static ChainingContextualSubstitutionRecord[] GetAllChainingContextualSubstitutionRecords();
    internal static ChainingContextualSubstitutionRecord[] GetChainingContextualSubstitutionRecords(int lookupIndex, UInt32 glyphIndex);
    internal static ChainingContextualSubstitutionRecord[] GetChainingContextualSubstitutionRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static ChainingContextualSubstitutionRecord[] GetChainingContextualSubstitutionRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulateChainingContextualSubstitutionRecordMarshallingArray_from_GlyphIndexes(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetChainingContextualSubstitutionRecordsFromMarshallingArray(ChainingContextualSubstitutionRecord[] substitutionRecords);
    internal static GlyphPairAdjustmentRecord[] GetGlyphPairAdjustmentTable(UInt32[] glyphIndexes);
    internal static GlyphPairAdjustmentRecord[] GetGlyphPairAdjustmentRecords(List`1<UInt32> glyphIndexes, Int32& recordCount);
    [NativeMethodAttribute]
private static int PopulatePairAdjustmentRecordMarshallingArray_from_KernTable(UInt32[] glyphIndexes, Int32& recordCount);
    internal static GlyphPairAdjustmentRecord[] GetGlyphPairAdjustmentRecords(UInt32 glyphIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int PopulatePairAdjustmentRecordMarshallingArray_from_GlyphIndex(UInt32 glyphIndex, Int32& recordCount);
    internal static GlyphPairAdjustmentRecord[] GetGlyphPairAdjustmentRecords(List`1<UInt32> newGlyphIndexes, List`1<UInt32> allGlyphIndexes);
    [NativeMethodAttribute]
private static int PopulatePairAdjustmentRecordMarshallingArray_for_NewlyAddedGlyphIndexes(UInt32[] newGlyphIndexes, UInt32[] allGlyphIndexes, Int32& recordCount);
    [NativeMethodAttribute]
internal static GlyphPairAdjustmentRecord GetGlyphPairAdjustmentRecord(UInt32 firstGlyphIndex, UInt32 secondGlyphIndex);
    internal static GlyphAdjustmentRecord[] GetSingleAdjustmentRecords(int lookupIndex, UInt32 glyphIndex);
    internal static GlyphAdjustmentRecord[] GetSingleAdjustmentRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static GlyphAdjustmentRecord[] GetSingleAdjustmentRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulateSingleAdjustmentRecordMarshallingArray_from_GlyphIndexes(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetSingleAdjustmentRecordsFromMarshallingArray(GlyphAdjustmentRecord[] singleSubstitutionRecords);
    [NativeMethodAttribute]
internal static GlyphPairAdjustmentRecord[] GetPairAdjustmentRecords(UInt32 glyphIndex);
    [NativeMethodAttribute]
internal static GlyphPairAdjustmentRecord GetPairAdjustmentRecord(UInt32 firstGlyphIndex, UInt32 secondGlyphIndex);
    [NativeMethodAttribute]
internal static GlyphPairAdjustmentRecord[] GetAllPairAdjustmentRecords();
    internal static GlyphPairAdjustmentRecord[] GetPairAdjustmentRecords(List`1<UInt32> glyphIndexes);
    internal static GlyphPairAdjustmentRecord[] GetPairAdjustmentRecords(int lookupIndex, UInt32 glyphIndex);
    internal static GlyphPairAdjustmentRecord[] GetPairAdjustmentRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static GlyphPairAdjustmentRecord[] GetPairAdjustmentRecords(UInt32[] glyphIndexes);
    private static GlyphPairAdjustmentRecord[] GetPairAdjustmentRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulatePairAdjustmentRecordMarshallingArray(UInt32[] glyphIndexes, Int32& recordCount);
    [NativeMethodAttribute]
private static int PopulatePairAdjustmentRecordMarshallingArray_for_LookupIndex(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetPairAdjustmentRecordsFromMarshallingArray(GlyphPairAdjustmentRecord[] glyphPairAdjustmentRecords);
    [NativeMethodAttribute]
internal static MarkToBaseAdjustmentRecord[] GetAllMarkToBaseAdjustmentRecords();
    [NativeMethodAttribute]
internal static MarkToBaseAdjustmentRecord[] GetMarkToBaseAdjustmentRecords(UInt32 baseGlyphIndex);
    [NativeMethodAttribute]
internal static MarkToBaseAdjustmentRecord GetMarkToBaseAdjustmentRecord(UInt32 baseGlyphIndex, UInt32 markGlyphIndex);
    internal static MarkToBaseAdjustmentRecord[] GetMarkToBaseAdjustmentRecords(List`1<UInt32> glyphIndexes);
    internal static MarkToBaseAdjustmentRecord[] GetMarkToBaseAdjustmentRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static MarkToBaseAdjustmentRecord[] GetMarkToBaseAdjustmentRecords(UInt32[] glyphIndexes);
    private static MarkToBaseAdjustmentRecord[] GetMarkToBaseAdjustmentRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulateMarkToBaseAdjustmentRecordMarshallingArray(UInt32[] glyphIndexes, Int32& recordCount);
    [NativeMethodAttribute]
private static int PopulateMarkToBaseAdjustmentRecordMarshallingArray_for_LookupIndex(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetMarkToBaseAdjustmentRecordsFromMarshallingArray(MarkToBaseAdjustmentRecord[] adjustmentRecords);
    [NativeMethodAttribute]
internal static MarkToMarkAdjustmentRecord[] GetAllMarkToMarkAdjustmentRecords();
    [NativeMethodAttribute]
internal static MarkToMarkAdjustmentRecord[] GetMarkToMarkAdjustmentRecords(UInt32 baseMarkGlyphIndex);
    [NativeMethodAttribute]
internal static MarkToMarkAdjustmentRecord GetMarkToMarkAdjustmentRecord(UInt32 firstGlyphIndex, UInt32 secondGlyphIndex);
    internal static MarkToMarkAdjustmentRecord[] GetMarkToMarkAdjustmentRecords(List`1<UInt32> glyphIndexes);
    internal static MarkToMarkAdjustmentRecord[] GetMarkToMarkAdjustmentRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    private static MarkToMarkAdjustmentRecord[] GetMarkToMarkAdjustmentRecords(UInt32[] glyphIndexes);
    private static MarkToMarkAdjustmentRecord[] GetMarkToMarkAdjustmentRecords(int lookupIndex, UInt32[] glyphIndexes);
    [NativeMethodAttribute]
private static int PopulateMarkToMarkAdjustmentRecordMarshallingArray(UInt32[] glyphIndexes, Int32& recordCount);
    [NativeMethodAttribute]
private static int PopulateMarkToMarkAdjustmentRecordMarshallingArray_for_LookupIndex(UInt32[] glyphIndexes, int lookupIndex, Int32& recordCount);
    [NativeMethodAttribute]
private static int GetMarkToMarkAdjustmentRecordsFromMarshallingArray(MarkToMarkAdjustmentRecord[] adjustmentRecords);
    private static void GlyphIndexToMarshallingArray(UInt32 glyphIndex, UInt32[]& dstArray);
    private static void GenericListToMarshallingArray(List`1& srcList, T[]& dstArray);
    private static void SetMarshallingArraySize(T[]& marshallingArray, int recordCount);
    [NativeMethodAttribute]
internal static void ResetAtlasTexture(Texture2D texture);
    [NativeMethodAttribute]
internal static void RenderBufferToTexture(Texture2D srcTexture, int padding, GlyphRenderMode renderMode, Texture2D dstTexture);
    private static int RenderGlyphToTexture_Internal_Injected(GlyphMarshallingStruct& glyphStruct, int padding, GlyphRenderMode renderMode, Texture2D texture);
    private static void GetOpenTypeLayoutTable_Injected(OTL_TableType type, OTL_Table& ret);
    private static void GetGlyphPairAdjustmentRecord_Injected(UInt32 firstGlyphIndex, UInt32 secondGlyphIndex, GlyphPairAdjustmentRecord& ret);
    private static void GetPairAdjustmentRecord_Injected(UInt32 firstGlyphIndex, UInt32 secondGlyphIndex, GlyphPairAdjustmentRecord& ret);
    private static void GetMarkToBaseAdjustmentRecord_Injected(UInt32 baseGlyphIndex, UInt32 markGlyphIndex, MarkToBaseAdjustmentRecord& ret);
    private static void GetMarkToMarkAdjustmentRecord_Injected(UInt32 firstGlyphIndex, UInt32 secondGlyphIndex, MarkToMarkAdjustmentRecord& ret);
}
public enum UnityEngine.TextCore.LowLevel.FontEngineError : Enum {
    
public int value__;
    
public static FontEngineError Success;
    
public static FontEngineError Invalid_File_Path;
    
public static FontEngineError Invalid_File_Format;
    
public static FontEngineError Invalid_File_Structure;
    
public static FontEngineError Invalid_File;
    
public static FontEngineError Invalid_Table;
    
public static FontEngineError Invalid_Glyph_Index;
    
public static FontEngineError Invalid_Character_Code;
    
public static FontEngineError Invalid_Pixel_Size;
    
public static FontEngineError Invalid_Library;
    
public static FontEngineError Invalid_Face;
    
public static FontEngineError Invalid_Library_or_Face;
    
public static FontEngineError Atlas_Generation_Cancelled;
    
public static FontEngineError Invalid_SharedTextureData;
    
public static FontEngineError OpenTypeLayoutLookup_Mismatch;
}
internal class UnityEngine.TextCore.LowLevel.FontEngineUtilities : ValueType {
    internal static bool Approximately(float a, float b);
    internal static int MaxValue(int a, int b, int c);
}
[FlagsAttribute]
public enum UnityEngine.TextCore.LowLevel.FontFeatureLookupFlags : Enum {
    
public int value__;
    
public static FontFeatureLookupFlags None;
    
public static FontFeatureLookupFlags IgnoreLigatures;
    
public static FontFeatureLookupFlags IgnoreSpacingAdjustments;
}
[DebuggerDisplayAttribute("{familyName} - {styleName}")]
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.FontReference : ValueType {
    
public string familyName;
    
public string styleName;
    
public int faceIndex;
    
public string filePath;
}
[UsedByNativeCodeAttribute]
public class UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord : ValueType {
    [SerializeField]
[NativeNameAttribute("glyphIndex")]

private UInt32 m_GlyphIndex;
    [NativeNameAttribute("glyphValueRecord")]
[SerializeField]

private GlyphValueRecord m_GlyphValueRecord;
    
public UInt32 glyphIndex { get; public set; }
    
public GlyphValueRecord glyphValueRecord { get; public set; }
    public GlyphAdjustmentRecord(UInt32 glyphIndex, GlyphValueRecord glyphValueRecord);
    public UInt32 get_glyphIndex();
    public void set_glyphIndex(UInt32 value);
    public GlyphValueRecord get_glyphValueRecord();
    public void set_glyphValueRecord(GlyphValueRecord value);
    [ExcludeFromDocsAttribute]
public virtual int GetHashCode();
    [ExcludeFromDocsAttribute]
public virtual bool Equals(object obj);
    [ExcludeFromDocsAttribute]
public sealed virtual bool Equals(GlyphAdjustmentRecord other);
    [ExcludeFromDocsAttribute]
public static bool op_Equality(GlyphAdjustmentRecord lhs, GlyphAdjustmentRecord rhs);
    [ExcludeFromDocsAttribute]
public static bool op_Inequality(GlyphAdjustmentRecord lhs, GlyphAdjustmentRecord rhs);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.GlyphAnchorPoint : ValueType {
    [SerializeField]
[NativeNameAttribute("xPositionAdjustment")]

private float m_XCoordinate;
    [NativeNameAttribute("yPositionAdjustment")]
[SerializeField]

private float m_YCoordinate;
    
public float xCoordinate { get; public set; }
    
public float yCoordinate { get; public set; }
    public float get_xCoordinate();
    public void set_xCoordinate(float value);
    public float get_yCoordinate();
    public void set_yCoordinate(float value);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.GlyphIDSequence : ValueType {
    [SerializeField]
[NativeNameAttribute("glyphIDs")]

private UInt32[] m_GlyphIDs;
    
public UInt32[] glyphIDs { get; public set; }
    public UInt32[] get_glyphIDs();
    public void set_glyphIDs(UInt32[] value);
}
[UsedByNativeCodeAttribute]
[FlagsAttribute]
public enum UnityEngine.TextCore.LowLevel.GlyphLoadFlags : Enum {
    
public int value__;
    
public static GlyphLoadFlags LOAD_DEFAULT;
    
public static GlyphLoadFlags LOAD_NO_SCALE;
    
public static GlyphLoadFlags LOAD_NO_HINTING;
    
public static GlyphLoadFlags LOAD_RENDER;
    
public static GlyphLoadFlags LOAD_NO_BITMAP;
    
public static GlyphLoadFlags LOAD_FORCE_AUTOHINT;
    
public static GlyphLoadFlags LOAD_MONOCHROME;
    
public static GlyphLoadFlags LOAD_NO_AUTOHINT;
    
public static GlyphLoadFlags LOAD_COLOR;
    
public static GlyphLoadFlags LOAD_COMPUTE_METRICS;
    
public static GlyphLoadFlags LOAD_BITMAP_METRICS_ONLY;
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.GlyphMarshallingStruct : ValueType {
    
public UInt32 index;
    
public GlyphMetrics metrics;
    
public GlyphRect glyphRect;
    
public float scale;
    
public int atlasIndex;
    
public GlyphClassDefinitionType classDefinitionType;
    public GlyphMarshallingStruct(Glyph glyph);
    public GlyphMarshallingStruct(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex);
    public GlyphMarshallingStruct(UInt32 index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex, GlyphClassDefinitionType classDefinitionType);
}
[UsedByNativeCodeAttribute]
public enum UnityEngine.TextCore.LowLevel.GlyphPackingMode : Enum {
    
public int value__;
    
public static GlyphPackingMode BestShortSideFit;
    
public static GlyphPackingMode BestLongSideFit;
    
public static GlyphPackingMode BestAreaFit;
    
public static GlyphPackingMode BottomLeftRule;
    
public static GlyphPackingMode ContactPointRule;
}
[UsedByNativeCodeAttribute]
[DebuggerDisplayAttribute("First glyphIndex = {m_FirstAdjustmentRecord.m_GlyphIndex},  Second glyphIndex = {m_SecondAdjustmentRecord.m_GlyphIndex}")]
public class UnityEngine.TextCore.LowLevel.GlyphPairAdjustmentRecord : ValueType {
    [NativeNameAttribute("firstAdjustmentRecord")]
[SerializeField]

private GlyphAdjustmentRecord m_FirstAdjustmentRecord;
    [NativeNameAttribute("secondAdjustmentRecord")]
[SerializeField]

private GlyphAdjustmentRecord m_SecondAdjustmentRecord;
    [SerializeField]

private FontFeatureLookupFlags m_FeatureLookupFlags;
    
public GlyphAdjustmentRecord firstAdjustmentRecord { get; public set; }
    
public GlyphAdjustmentRecord secondAdjustmentRecord { get; public set; }
    
public FontFeatureLookupFlags featureLookupFlags { get; public set; }
    public GlyphPairAdjustmentRecord(GlyphAdjustmentRecord firstAdjustmentRecord, GlyphAdjustmentRecord secondAdjustmentRecord);
    public GlyphAdjustmentRecord get_firstAdjustmentRecord();
    public void set_firstAdjustmentRecord(GlyphAdjustmentRecord value);
    public GlyphAdjustmentRecord get_secondAdjustmentRecord();
    public void set_secondAdjustmentRecord(GlyphAdjustmentRecord value);
    public FontFeatureLookupFlags get_featureLookupFlags();
    public void set_featureLookupFlags(FontFeatureLookupFlags value);
    [ExcludeFromDocsAttribute]
public virtual int GetHashCode();
    [ExcludeFromDocsAttribute]
public virtual bool Equals(object obj);
    [ExcludeFromDocsAttribute]
public sealed virtual bool Equals(GlyphPairAdjustmentRecord other);
    [ExcludeFromDocsAttribute]
public static bool op_Equality(GlyphPairAdjustmentRecord lhs, GlyphPairAdjustmentRecord rhs);
    [ExcludeFromDocsAttribute]
public static bool op_Inequality(GlyphPairAdjustmentRecord lhs, GlyphPairAdjustmentRecord rhs);
}
[FlagsAttribute]
internal enum UnityEngine.TextCore.LowLevel.GlyphRasterModes : Enum {
    
public int value__;
    
public static GlyphRasterModes RASTER_MODE_8BIT;
    
public static GlyphRasterModes RASTER_MODE_MONO;
    
public static GlyphRasterModes RASTER_MODE_NO_HINTING;
    
public static GlyphRasterModes RASTER_MODE_HINTED;
    
public static GlyphRasterModes RASTER_MODE_BITMAP;
    
public static GlyphRasterModes RASTER_MODE_SDF;
    
public static GlyphRasterModes RASTER_MODE_SDFAA;
    
public static GlyphRasterModes RASTER_MODE_MSDF;
    
public static GlyphRasterModes RASTER_MODE_MSDFA;
    
public static GlyphRasterModes RASTER_MODE_1X;
    
public static GlyphRasterModes RASTER_MODE_8X;
    
public static GlyphRasterModes RASTER_MODE_16X;
    
public static GlyphRasterModes RASTER_MODE_32X;
    
public static GlyphRasterModes RASTER_MODE_COLOR;
}
[UsedByNativeCodeAttribute]
public enum UnityEngine.TextCore.LowLevel.GlyphRenderMode : Enum {
    
public int value__;
    
public static GlyphRenderMode SMOOTH_HINTED;
    
public static GlyphRenderMode SMOOTH;
    
public static GlyphRenderMode COLOR_HINTED;
    
public static GlyphRenderMode COLOR;
    
public static GlyphRenderMode RASTER_HINTED;
    
public static GlyphRenderMode RASTER;
    
public static GlyphRenderMode SDF;
    
public static GlyphRenderMode SDF8;
    
public static GlyphRenderMode SDF16;
    
public static GlyphRenderMode SDF32;
    
public static GlyphRenderMode SDFAA_HINTED;
    
public static GlyphRenderMode SDFAA;
}
[UsedByNativeCodeAttribute]
public class UnityEngine.TextCore.LowLevel.GlyphValueRecord : ValueType {
    [NativeNameAttribute("xPlacement")]
[SerializeField]

private float m_XPlacement;
    [SerializeField]
[NativeNameAttribute("yPlacement")]

private float m_YPlacement;
    [SerializeField]
[NativeNameAttribute("xAdvance")]

private float m_XAdvance;
    [SerializeField]
[NativeNameAttribute("yAdvance")]

private float m_YAdvance;
    
public float xPlacement { get; public set; }
    
public float yPlacement { get; public set; }
    
public float xAdvance { get; public set; }
    
public float yAdvance { get; public set; }
    public GlyphValueRecord(float xPlacement, float yPlacement, float xAdvance, float yAdvance);
    public float get_xPlacement();
    public void set_xPlacement(float value);
    public float get_yPlacement();
    public void set_yPlacement(float value);
    public float get_xAdvance();
    public void set_xAdvance(float value);
    public float get_yAdvance();
    public void set_yAdvance(float value);
    public static GlyphValueRecord op_Addition(GlyphValueRecord a, GlyphValueRecord b);
    [ExcludeFromDocsAttribute]
public static GlyphValueRecord op_Multiply(GlyphValueRecord a, float emScale);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GlyphValueRecord other);
    public static bool op_Equality(GlyphValueRecord lhs, GlyphValueRecord rhs);
    public static bool op_Inequality(GlyphValueRecord lhs, GlyphValueRecord rhs);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.LigatureSubstitutionRecord : ValueType {
    [SerializeField]
[NativeNameAttribute("componentGlyphs")]

private UInt32[] m_ComponentGlyphIDs;
    [SerializeField]
[NativeNameAttribute("ligatureGlyph")]

private UInt32 m_LigatureGlyphID;
    
public UInt32[] componentGlyphIDs { get; public set; }
    
public UInt32 ligatureGlyphID { get; public set; }
    public UInt32[] get_componentGlyphIDs();
    public void set_componentGlyphIDs(UInt32[] value);
    public UInt32 get_ligatureGlyphID();
    public void set_ligatureGlyphID(UInt32 value);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.MarkPositionAdjustment : ValueType {
    [NativeNameAttribute("xCoordinate")]
[SerializeField]

private float m_XPositionAdjustment;
    [NativeNameAttribute("yCoordinate")]
[SerializeField]

private float m_YPositionAdjustment;
    
public float xPositionAdjustment { get; public set; }
    
public float yPositionAdjustment { get; public set; }
    public MarkPositionAdjustment(float x, float y);
    public float get_xPositionAdjustment();
    public void set_xPositionAdjustment(float value);
    public float get_yPositionAdjustment();
    public void set_yPositionAdjustment(float value);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.MarkToBaseAdjustmentRecord : ValueType {
    [SerializeField]
[NativeNameAttribute("baseGlyphID")]

private UInt32 m_BaseGlyphID;
    [NativeNameAttribute("baseAnchor")]
[SerializeField]

private GlyphAnchorPoint m_BaseGlyphAnchorPoint;
    [SerializeField]
[NativeNameAttribute("markGlyphID")]

private UInt32 m_MarkGlyphID;
    [NativeNameAttribute("markPositionAdjustment")]
[SerializeField]

private MarkPositionAdjustment m_MarkPositionAdjustment;
    
public UInt32 baseGlyphID { get; public set; }
    
public GlyphAnchorPoint baseGlyphAnchorPoint { get; public set; }
    
public UInt32 markGlyphID { get; public set; }
    
public MarkPositionAdjustment markPositionAdjustment { get; public set; }
    public UInt32 get_baseGlyphID();
    public void set_baseGlyphID(UInt32 value);
    public GlyphAnchorPoint get_baseGlyphAnchorPoint();
    public void set_baseGlyphAnchorPoint(GlyphAnchorPoint value);
    public UInt32 get_markGlyphID();
    public void set_markGlyphID(UInt32 value);
    public MarkPositionAdjustment get_markPositionAdjustment();
    public void set_markPositionAdjustment(MarkPositionAdjustment value);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.MarkToMarkAdjustmentRecord : ValueType {
    [SerializeField]
[NativeNameAttribute("baseMarkGlyphID")]

private UInt32 m_BaseMarkGlyphID;
    [SerializeField]
[NativeNameAttribute("baseMarkAnchor")]

private GlyphAnchorPoint m_BaseMarkGlyphAnchorPoint;
    [NativeNameAttribute("combiningMarkGlyphID")]
[SerializeField]

private UInt32 m_CombiningMarkGlyphID;
    [NativeNameAttribute("combiningMarkPositionAdjustment")]
[SerializeField]

private MarkPositionAdjustment m_CombiningMarkPositionAdjustment;
    
public UInt32 baseMarkGlyphID { get; public set; }
    
public GlyphAnchorPoint baseMarkGlyphAnchorPoint { get; public set; }
    
public UInt32 combiningMarkGlyphID { get; public set; }
    
public MarkPositionAdjustment combiningMarkPositionAdjustment { get; public set; }
    public UInt32 get_baseMarkGlyphID();
    public void set_baseMarkGlyphID(UInt32 value);
    public GlyphAnchorPoint get_baseMarkGlyphAnchorPoint();
    public void set_baseMarkGlyphAnchorPoint(GlyphAnchorPoint value);
    public UInt32 get_combiningMarkGlyphID();
    public void set_combiningMarkGlyphID(UInt32 value);
    public MarkPositionAdjustment get_combiningMarkPositionAdjustment();
    public void set_combiningMarkPositionAdjustment(MarkPositionAdjustment value);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.MultipleSubstitutionRecord : ValueType {
    [NativeNameAttribute("targetGlyphID")]
[SerializeField]

private UInt32 m_TargetGlyphID;
    [NativeNameAttribute("substituteGlyphIDs")]
[SerializeField]

private UInt32[] m_SubstituteGlyphIDs;
    
public UInt32 targetGlyphID { get; public set; }
    
public UInt32[] substituteGlyphIDs { get; public set; }
    public UInt32 get_targetGlyphID();
    public void set_targetGlyphID(UInt32 value);
    public UInt32[] get_substituteGlyphIDs();
    public void set_substituteGlyphIDs(UInt32[] value);
}
internal class UnityEngine.TextCore.LowLevel.OpenTypeFeature : ValueType {
}
[DebuggerDisplayAttribute("Feature = {tag},  Lookup Count = {lookupIndexes.Length}")]
internal class UnityEngine.TextCore.LowLevel.OpenTypeLayoutFeature : ValueType {
    
public string tag;
    
public UInt32[] lookupIndexes;
}
[DebuggerDisplayAttribute("Language = {tag},  Feature Count = {featureIndexes.Length}")]
internal class UnityEngine.TextCore.LowLevel.OpenTypeLayoutLanguage : ValueType {
    
public string tag;
    
public UInt32[] featureIndexes;
}
internal abstract class UnityEngine.TextCore.LowLevel.OpenTypeLayoutLookup : object {
    
public UInt32 lookupType;
    
public UInt32 lookupFlag;
    
public UInt32 markFilteringSet;
    public abstract virtual void InitializeLookupDictionary();
    public virtual void UpdateRecords(int lookupIndex, UInt32 glyphIndex);
    public virtual void UpdateRecords(int lookupIndex, UInt32 glyphIndex, float emScale);
    public virtual void UpdateRecords(int lookupIndex, List`1<UInt32> glyphIndexes);
    public virtual void UpdateRecords(int lookupIndex, List`1<UInt32> glyphIndexes, float emScale);
    public abstract virtual void ClearRecords();
}
[DebuggerDisplayAttribute("Script = {tag},  Language Count = {languages.Count}")]
internal class UnityEngine.TextCore.LowLevel.OpenTypeLayoutScript : ValueType {
    
public string tag;
    
public List`1<OpenTypeLayoutLanguage> languages;
}
internal class UnityEngine.TextCore.LowLevel.OpenTypeLayoutTable : ValueType {
    
public List`1<OpenTypeLayoutScript> scripts;
    
public List`1<OpenTypeLayoutFeature> features;
    [SerializeReference]

public List`1<OpenTypeLayoutLookup> lookups;
}
[DebuggerDisplayAttribute("Feature = {tag},  Lookup Count = {lookupIndexes.Length}")]
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.OTL_Feature : ValueType {
    
public string tag;
    
public UInt32[] lookupIndexes;
}
[DebuggerDisplayAttribute("Language = {tag},  Feature Count = {featureIndexes.Length}")]
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.OTL_Language : ValueType {
    
public string tag;
    
public UInt32[] featureIndexes;
}
[UsedByNativeCodeAttribute]
[DebuggerDisplayAttribute("{(OTL_LookupType)lookupType}")]
internal class UnityEngine.TextCore.LowLevel.OTL_Lookup : ValueType {
    
public UInt32 lookupType;
    
public UInt32 lookupFlag;
    
public UInt32 markFilteringSet;
}
internal enum UnityEngine.TextCore.LowLevel.OTL_LookupType : Enum {
    
public int value__;
    
public static OTL_LookupType Single_Substitution;
    
public static OTL_LookupType Multiple_Substitution;
    
public static OTL_LookupType Alternate_Substitution;
    
public static OTL_LookupType Ligature_Substitution;
    
public static OTL_LookupType Contextual_Substitution;
    
public static OTL_LookupType Chaining_Contextual_Substitution;
    
public static OTL_LookupType Extension_Substitution;
    
public static OTL_LookupType Reverse_Chaining_Contextual_Single_Substitution;
    
public static OTL_LookupType Single_Adjustment;
    
public static OTL_LookupType Pair_Adjustment;
    
public static OTL_LookupType Cursive_Attachment;
    
public static OTL_LookupType Mark_to_Base_Attachment;
    
public static OTL_LookupType Mark_to_Ligature_Attachment;
    
public static OTL_LookupType Mark_to_Mark_Attachment;
    
public static OTL_LookupType Contextual_Positioning;
    
public static OTL_LookupType Chaining_Contextual_Positioning;
    
public static OTL_LookupType Extension_Positioning;
}
[DebuggerDisplayAttribute("Script = {tag},  Language Count = {languages.Length}")]
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.OTL_Script : ValueType {
    
public string tag;
    
public OTL_Language[] languages;
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.OTL_Table : ValueType {
    
public OTL_Script[] scripts;
    
public OTL_Feature[] features;
    
public OTL_Lookup[] lookups;
}
internal enum UnityEngine.TextCore.LowLevel.OTL_TableType : Enum {
    
public int value__;
    
public static OTL_TableType BASE;
    
public static OTL_TableType GDEF;
    
public static OTL_TableType GPOS;
    
public static OTL_TableType GSUB;
    
public static OTL_TableType JSTF;
    
public static OTL_TableType MATH;
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.SequenceLookupRecord : ValueType {
    [NativeNameAttribute("glyphSequenceIndex")]
[SerializeField]

private UInt32 m_GlyphSequenceIndex;
    [SerializeField]
[NativeNameAttribute("lookupListIndex")]

private UInt32 m_LookupListIndex;
    
public UInt32 glyphSequenceIndex { get; public set; }
    
public UInt32 lookupListIndex { get; public set; }
    public UInt32 get_glyphSequenceIndex();
    public void set_glyphSequenceIndex(UInt32 value);
    public UInt32 get_lookupListIndex();
    public void set_lookupListIndex(UInt32 value);
}
[UsedByNativeCodeAttribute]
internal class UnityEngine.TextCore.LowLevel.SingleSubstitutionRecord : ValueType {
    [NativeNameAttribute("targetGlyphID")]
[SerializeField]

private UInt32 m_TargetGlyphID;
    [SerializeField]
[NativeNameAttribute("substituteGlyphID")]

private UInt32 m_SubstituteGlyphID;
    
public UInt32 targetGlyphID { get; public set; }
    
public UInt32 substituteGlyphID { get; public set; }
    public UInt32 get_targetGlyphID();
    public void set_targetGlyphID(UInt32 value);
    public UInt32 get_substituteGlyphID();
    public void set_substituteGlyphID(UInt32 value);
}
