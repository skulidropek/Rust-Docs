internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string VsVersion
public string FxFileVersion
public string VsFileVersion
public string AssemblyI18N
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_Core
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public System.Configuration.Install.AssemblyInstaller : Installer {
private Assembly _assembly
private String[] _commandLine
private bool _useNewContext
public Assembly Assembly
public String[] CommandLine
public string HelpText
public string Path
public bool UseNewContext
public void .ctor(Assembly assembly, String[] commandLine)
public void .ctor(string fileName, String[] commandLine)
public void CheckIfInstallable(string assemblyName)
public void Commit(IDictionary savedState)
public void Install(IDictionary savedState)
public void Rollback(IDictionary savedState)
public void Uninstall(IDictionary savedState)
public Assembly get_Assembly()
public void set_Assembly(Assembly value)
public String[] get_CommandLine()
public void set_CommandLine(String[] value)
public string get_HelpText()
public string get_Path()
public void set_Path(string value)
public bool get_UseNewContext()
public void set_UseNewContext(bool value)
}
public System.Configuration.Install.ComponentInstaller : Installer {
public void CopyFromComponent(IComponent component)
public bool IsEquivalentInstaller(ComponentInstaller otherInstaller)
}
public System.Configuration.Install.IManagedInstaller {
public int ManagedInstall(string commandLine, int hInstall)
}
public System.Configuration.Install.InstallContext : object {
private StringDictionary parameters
private string log_file
private bool log
public StringDictionary Parameters
public void .ctor(string logFilePath, String[] commandLine)
public StringDictionary get_Parameters()
public bool IsParameterTrue(string paramName)
public void LogMessage(string message)
protected StringDictionary ParseCommandLine(String[] args)
}
public System.Configuration.Install.Installer : Component {
private InstallContext context
private string helptext
private InstallerCollection installers
internal Installer parent
private InstallEventHandler AfterInstall
private InstallEventHandler AfterRollback
private InstallEventHandler AfterUninstall
private InstallEventHandler BeforeInstall
private InstallEventHandler BeforeRollback
private InstallEventHandler BeforeUninstall
private InstallEventHandler Committed
private InstallEventHandler Committing
public InstallContext Context
public string HelpText
public InstallerCollection Installers
public Installer Parent
public void add_AfterInstall(InstallEventHandler value)
public void remove_AfterInstall(InstallEventHandler value)
public void add_AfterRollback(InstallEventHandler value)
public void remove_AfterRollback(InstallEventHandler value)
public void add_AfterUninstall(InstallEventHandler value)
public void remove_AfterUninstall(InstallEventHandler value)
public void add_BeforeInstall(InstallEventHandler value)
public void remove_BeforeInstall(InstallEventHandler value)
public void add_BeforeRollback(InstallEventHandler value)
public void remove_BeforeRollback(InstallEventHandler value)
public void add_BeforeUninstall(InstallEventHandler value)
public void remove_BeforeUninstall(InstallEventHandler value)
public void add_Committed(InstallEventHandler value)
public void remove_Committed(InstallEventHandler value)
public void add_Committing(InstallEventHandler value)
public void remove_Committing(InstallEventHandler value)
public InstallContext get_Context()
public void set_Context(InstallContext value)
public string get_HelpText()
public InstallerCollection get_Installers()
public Installer get_Parent()
public void set_Parent(Installer value)
public void Commit(IDictionary savedState)
public void Install(IDictionary stateSaver)
protected void OnAfterInstall(IDictionary savedState)
protected void OnAfterRollback(IDictionary savedState)
protected void OnAfterUninstall(IDictionary savedState)
protected void OnBeforeInstall(IDictionary savedState)
protected void OnBeforeRollback(IDictionary savedState)
protected void OnBeforeUninstall(IDictionary savedState)
protected void OnCommitted(IDictionary savedState)
protected void OnCommitting(IDictionary savedState)
public void Rollback(IDictionary savedState)
public void Uninstall(IDictionary savedState)
}
public System.Configuration.Install.InstallerCollection : CollectionBase {
private Installer owner
public Installer Item
internal void .ctor(Installer owner)
public Installer get_Item(int index)
public void set_Item(int index, Installer value)
public int Add(Installer value)
public void AddRange(Installer[] value)
public void AddRange(InstallerCollection value)
public bool Contains(Installer value)
public void CopyTo(Installer[] array, int index)
public int IndexOf(Installer value)
public void Insert(int index, Installer value)
protected void OnInsert(int index, object value)
protected void OnRemove(int index, object value)
protected void OnSet(int index, object oldValue, object newValue)
public void Remove(Installer value)
}
public System.Configuration.Install.InstallEventArgs : EventArgs {
private IDictionary savedstate
public IDictionary SavedState
public void .ctor(IDictionary savedState)
public IDictionary get_SavedState()
}
public System.Configuration.Install.InstallEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, InstallEventArgs e)
public IAsyncResult BeginInvoke(object sender, InstallEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Configuration.Install.InstallException : SystemException {
private Exception innerException
public void .ctor(string message)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception innerException)
}
public System.Configuration.Install.ManagedInstallerClass : object {
private int System.Configuration.Install.IManagedInstaller.ManagedInstall(string argString, int hInstall)
public void InstallHelper(String[] args)
}
public System.Configuration.Install.TransactedInstaller : Installer {
public void Install(IDictionary savedState)
public void Uninstall(IDictionary savedState)
}
public System.Configuration.Install.UninstallAction : Enum {
public int value__
public UninstallAction NoAction
public UninstallAction Remove
}
public System.Diagnostics.EventLogInstaller : ComponentInstaller {
private string _log
private string _source
private UninstallAction _uninstallAction
private string _categoryResourceFile
private string _messageResourceFile
private string _parameterResourceFile
public int CategoryCount
public string CategoryResourceFile
public string MessageResourceFile
public string ParameterResourceFile
public string Log
public string Source
public UninstallAction UninstallAction
public int get_CategoryCount()
public void set_CategoryCount(int value)
public string get_CategoryResourceFile()
public void set_CategoryResourceFile(string value)
public string get_MessageResourceFile()
public void set_MessageResourceFile(string value)
public string get_ParameterResourceFile()
public void set_ParameterResourceFile(string value)
public void CopyFromComponent(IComponent component)
public void Install(IDictionary stateSaver)
public bool IsEquivalentInstaller(ComponentInstaller otherInstaller)
public void Rollback(IDictionary savedState)
public void Uninstall(IDictionary savedState)
public string get_Log()
public void set_Log(string value)
public string get_Source()
public void set_Source(string value)
public UninstallAction get_UninstallAction()
public void set_UninstallAction(UninstallAction value)
}
public System.Diagnostics.PerformanceCounterInstaller : ComponentInstaller {
private string _categoryHelp
private string _categoryName
private CounterCreationDataCollection _counters
private UninstallAction _uninstallAction
private PerformanceCounterCategoryType _categoryType
public string CategoryHelp
public string CategoryName
public CounterCreationDataCollection Counters
public UninstallAction UninstallAction
public PerformanceCounterCategoryType CategoryType
public void CopyFromComponent(IComponent component)
public void Install(IDictionary stateSaver)
public void Rollback(IDictionary savedState)
public void Uninstall(IDictionary savedState)
public string get_CategoryHelp()
public void set_CategoryHelp(string value)
public string get_CategoryName()
public void set_CategoryName(string value)
public CounterCreationDataCollection get_Counters()
public UninstallAction get_UninstallAction()
public void set_UninstallAction(UninstallAction value)
public PerformanceCounterCategoryType get_CategoryType()
public void set_CategoryType(PerformanceCounterCategoryType value)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
