internal Steamworks.AccountType : Enum {
public int value__
public AccountType Invalid
public AccountType Individual
public AccountType Multiseat
public AccountType GameServer
public AccountType AnonGameServer
public AccountType Pending
public AccountType ContentServer
public AccountType Clan
public AccountType Chat
public AccountType ConsoleUser
public AccountType AnonUser
public AccountType Max
}
internal Steamworks.ActivateGameOverlayToWebPageMode : Enum {
public int value__
public ActivateGameOverlayToWebPageMode Default
public ActivateGameOverlayToWebPageMode Modal
}
public Steamworks.AnalogState : ValueType {
public InputSourceMode EMode
public float X
public float Y
internal byte BActive
public bool Active
public bool get_Active()
}
public Steamworks.AppId : ValueType {
public UInt32 Value
public string ToString()
public AppId op_Implicit(UInt32 value)
public AppId op_Implicit(int value)
public UInt32 op_Implicit(AppId value)
}
public Steamworks.AuthResponse : Enum {
public int value__
public AuthResponse OK
public AuthResponse UserNotConnectedToSteam
public AuthResponse NoLicenseOrExpired
public AuthResponse VACBanned
public AuthResponse LoggedInElseWhere
public AuthResponse VACCheckTimedOut
public AuthResponse AuthTicketCanceled
public AuthResponse AuthTicketInvalidAlreadyUsed
public AuthResponse AuthTicketInvalid
public AuthResponse PublisherIssuedBan
public AuthResponse AuthTicketNetworkIdentityFailure
}
public Steamworks.AuthTicket : object {
public Byte[] Data
public UInt32 Handle
public void Cancel()
public void Dispose()
}
public Steamworks.BeginAuthResult : Enum {
public int value__
public BeginAuthResult OK
public BeginAuthResult InvalidTicket
public BeginAuthResult DuplicateRequest
public BeginAuthResult InvalidVersion
public BeginAuthResult GameMismatch
public BeginAuthResult ExpiredTicket
}
public Steamworks.BroadcastUploadResult : Enum {
public int value__
public BroadcastUploadResult None
public BroadcastUploadResult OK
public BroadcastUploadResult InitFailed
public BroadcastUploadResult FrameFailed
public BroadcastUploadResult Timeout
public BroadcastUploadResult BandwidthExceeded
public BroadcastUploadResult LowFPS
public BroadcastUploadResult MissingKeyFrames
public BroadcastUploadResult NoConnection
public BroadcastUploadResult RelayFailed
public BroadcastUploadResult SettingsChanged
public BroadcastUploadResult MissingAudio
public BroadcastUploadResult TooFarBehind
public BroadcastUploadResult TranscodeBehind
public BroadcastUploadResult NotAllowedToPlay
public BroadcastUploadResult Busy
public BroadcastUploadResult Banned
public BroadcastUploadResult AlreadyActive
public BroadcastUploadResult ForcedOff
public BroadcastUploadResult AudioBehind
public BroadcastUploadResult Shutdown
public BroadcastUploadResult Disconnect
public BroadcastUploadResult VideoInitFailed
public BroadcastUploadResult AudioInitFailed
}
internal Steamworks.BufferManager : object {
private Stack`1<ReferenceCounter> ReferenceCounterPool
private Dictionary`2<int, Stack`1<IntPtr>> BufferPools
private Dictionary`2<IntPtr, ReferenceCounter> ReferenceCounters
private FreeFn FreeFunctionPin
public IntPtr FreeFunctionPointer
private int Bucket512
private int Bucket1Kb
private int Bucket4Kb
private int Bucket16Kb
private int Bucket64Kb
private int Bucket256Kb
public IntPtr Get(int size, int referenceCount)
private void Free(NetMsg* msg)
private ReferenceCounter AllocateReferenceCounter(IntPtr ptr, int size, int referenceCount)
private void FreeReferenceCounter(ReferenceCounter counter)
private void AllocateBuffer(int minimumSize, IntPtr& ptr, Int32& size)
private void FreeBuffer(IntPtr ptr, int size)
private int GetBucketSize(int size)
private int GetBucketLimit(int size)
}
public Steamworks.CallbackType : Enum {
public int value__
public CallbackType SteamServersConnected
public CallbackType SteamServerConnectFailure
public CallbackType SteamServersDisconnected
public CallbackType ClientGameServerDeny
public CallbackType GSPolicyResponse
public CallbackType IPCFailure
public CallbackType LicensesUpdated
public CallbackType ValidateAuthTicketResponse
public CallbackType MicroTxnAuthorizationResponse
public CallbackType EncryptedAppTicketResponse
public CallbackType GetAuthSessionTicketResponse
public CallbackType GameWebCallback
public CallbackType StoreAuthURLResponse
public CallbackType MarketEligibilityResponse
public CallbackType DurationControl
public CallbackType GetTicketForWebApiResponse
public CallbackType GSClientApprove
public CallbackType GSClientDeny
public CallbackType GSClientKick
public CallbackType GSClientAchievementStatus
public CallbackType GSGameplayStats
public CallbackType GSClientGroupStatus
public CallbackType GSReputation
public CallbackType AssociateWithClanResult
public CallbackType ComputeNewPlayerCompatibilityResult
public CallbackType PersonaStateChange
public CallbackType GameOverlayActivated
public CallbackType GameServerChangeRequested
public CallbackType GameLobbyJoinRequested
public CallbackType AvatarImageLoaded
public CallbackType ClanOfficerListResponse
public CallbackType FriendRichPresenceUpdate
public CallbackType GameRichPresenceJoinRequested
public CallbackType GameConnectedClanChatMsg
public CallbackType GameConnectedChatJoin
public CallbackType GameConnectedChatLeave
public CallbackType DownloadClanActivityCountsResult
public CallbackType JoinClanChatRoomCompletionResult
public CallbackType GameConnectedFriendChatMsg
public CallbackType FriendsGetFollowerCount
public CallbackType FriendsIsFollowing
public CallbackType FriendsEnumerateFollowingList
public CallbackType SetPersonaNameResponse
public CallbackType UnreadChatMessagesChanged
public CallbackType OverlayBrowserProtocolNavigation
public CallbackType EquippedProfileItemsChanged
public CallbackType EquippedProfileItems
public CallbackType FavoritesListChanged
public CallbackType LobbyInvite
public CallbackType LobbyEnter
public CallbackType LobbyDataUpdate
public CallbackType LobbyChatUpdate
public CallbackType LobbyChatMsg
public CallbackType LobbyGameCreated
public CallbackType LobbyMatchList
public CallbackType LobbyKicked
public CallbackType LobbyCreated
public CallbackType PSNGameBootInviteResult
public CallbackType FavoritesListAccountsUpdated
public CallbackType IPCountry
public CallbackType LowBatteryPower
public CallbackType SteamAPICallCompleted
public CallbackType SteamShutdown
public CallbackType CheckFileSignature
public CallbackType GamepadTextInputDismissed
public CallbackType AppResumingFromSuspend
public CallbackType FloatingGamepadTextInputDismissed
public CallbackType FilterTextDictionaryChanged
public CallbackType DlcInstalled
public CallbackType NewUrlLaunchParameters
public CallbackType AppProofOfPurchaseKeyResponse
public CallbackType FileDetailsResult
public CallbackType TimedTrialStatus
public CallbackType UserStatsReceived
public CallbackType UserStatsStored
public CallbackType UserAchievementStored
public CallbackType LeaderboardFindResult
public CallbackType LeaderboardScoresDownloaded
public CallbackType LeaderboardScoreUploaded
public CallbackType NumberOfCurrentPlayers
public CallbackType UserStatsUnloaded
public CallbackType GSStatsUnloaded
public CallbackType UserAchievementIconFetched
public CallbackType GlobalAchievementPercentagesReady
public CallbackType LeaderboardUGCSet
public CallbackType GlobalStatsReceived
public CallbackType P2PSessionRequest
public CallbackType P2PSessionConnectFail
public CallbackType SteamNetConnectionStatusChangedCallback
public CallbackType SteamNetAuthenticationStatus
public CallbackType SteamNetworkingFakeIPResult
public CallbackType SteamNetworkingMessagesSessionRequest
public CallbackType SteamNetworkingMessagesSessionFailed
public CallbackType SteamRelayNetworkStatus
public CallbackType RemoteStorageFileShareResult
public CallbackType RemoteStoragePublishFileResult
public CallbackType RemoteStorageDeletePublishedFileResult
public CallbackType RemoteStorageEnumerateUserPublishedFilesResult
public CallbackType RemoteStorageSubscribePublishedFileResult
public CallbackType RemoteStorageEnumerateUserSubscribedFilesResult
public CallbackType RemoteStorageUnsubscribePublishedFileResult
public CallbackType RemoteStorageUpdatePublishedFileResult
public CallbackType RemoteStorageDownloadUGCResult
public CallbackType RemoteStorageGetPublishedFileDetailsResult
public CallbackType RemoteStorageEnumerateWorkshopFilesResult
public CallbackType RemoteStorageGetPublishedItemVoteDetailsResult
public CallbackType RemoteStoragePublishedFileSubscribed
public CallbackType RemoteStoragePublishedFileUnsubscribed
public CallbackType RemoteStoragePublishedFileDeleted
public CallbackType RemoteStorageUpdateUserPublishedItemVoteResult
public CallbackType RemoteStorageUserVoteDetails
public CallbackType RemoteStorageEnumerateUserSharedWorkshopFilesResult
public CallbackType RemoteStorageSetUserPublishedFileActionResult
public CallbackType RemoteStorageEnumeratePublishedFilesByUserActionResult
public CallbackType RemoteStoragePublishFileProgress
public CallbackType RemoteStoragePublishedFileUpdated
public CallbackType RemoteStorageFileWriteAsyncComplete
public CallbackType RemoteStorageFileReadAsyncComplete
public CallbackType RemoteStorageLocalFileChange
public CallbackType GSStatsReceived
public CallbackType GSStatsStored
public CallbackType HTTPRequestCompleted
public CallbackType HTTPRequestHeadersReceived
public CallbackType HTTPRequestDataReceived
public CallbackType ScreenshotReady
public CallbackType ScreenshotRequested
public CallbackType SteamInputDeviceConnected
public CallbackType SteamInputDeviceDisconnected
public CallbackType SteamInputConfigurationLoaded
public CallbackType SteamInputGamepadSlotChange
public CallbackType SteamUGCQueryCompleted
public CallbackType SteamUGCRequestUGCDetailsResult
public CallbackType CreateItemResult
public CallbackType SubmitItemUpdateResult
public CallbackType ItemInstalled
public CallbackType DownloadItemResult
public CallbackType UserFavoriteItemsListChanged
public CallbackType SetUserItemVoteResult
public CallbackType GetUserItemVoteResult
public CallbackType StartPlaytimeTrackingResult
public CallbackType StopPlaytimeTrackingResult
public CallbackType AddUGCDependencyResult
public CallbackType RemoveUGCDependencyResult
public CallbackType AddAppDependencyResult
public CallbackType RemoveAppDependencyResult
public CallbackType GetAppDependenciesResult
public CallbackType DeleteItemResult
public CallbackType UserSubscribedItemsListChanged
public CallbackType WorkshopEULAStatus
public CallbackType SteamAppInstalled
public CallbackType SteamAppUninstalled
public CallbackType PlaybackStatusHasChanged
public CallbackType VolumeHasChanged
public CallbackType MusicPlayerWantsVolume
public CallbackType MusicPlayerSelectsQueueEntry
public CallbackType MusicPlayerSelectsPlaylistEntry
public CallbackType MusicPlayerRemoteWillActivate
public CallbackType MusicPlayerRemoteWillDeactivate
public CallbackType MusicPlayerRemoteToFront
public CallbackType MusicPlayerWillQuit
public CallbackType MusicPlayerWantsPlay
public CallbackType MusicPlayerWantsPause
public CallbackType MusicPlayerWantsPlayPrevious
public CallbackType MusicPlayerWantsPlayNext
public CallbackType MusicPlayerWantsShuffled
public CallbackType MusicPlayerWantsLooped
public CallbackType MusicPlayerWantsPlayingRepeatStatus
public CallbackType HTML_BrowserReady
public CallbackType HTML_NeedsPaint
public CallbackType HTML_StartRequest
public CallbackType HTML_CloseBrowser
public CallbackType HTML_URLChanged
public CallbackType HTML_FinishedRequest
public CallbackType HTML_OpenLinkInNewTab
public CallbackType HTML_ChangedTitle
public CallbackType HTML_SearchResults
public CallbackType HTML_CanGoBackAndForward
public CallbackType HTML_HorizontalScroll
public CallbackType HTML_VerticalScroll
public CallbackType HTML_LinkAtPosition
public CallbackType HTML_JSAlert
public CallbackType HTML_JSConfirm
public CallbackType HTML_FileOpenDialog
public CallbackType HTML_NewWindow
public CallbackType HTML_SetCursor
public CallbackType HTML_StatusText
public CallbackType HTML_ShowToolTip
public CallbackType HTML_UpdateToolTip
public CallbackType HTML_HideToolTip
public CallbackType HTML_BrowserRestarted
public CallbackType GetVideoURLResult
public CallbackType GetOPFSettingsResult
public CallbackType SteamInventoryResultReady
public CallbackType SteamInventoryFullUpdate
public CallbackType SteamInventoryDefinitionUpdate
public CallbackType SteamInventoryEligiblePromoItemDefIDs
public CallbackType SteamInventoryStartPurchaseResult
public CallbackType SteamInventoryRequestPricesResult
public CallbackType SteamParentalSettingsChanged
public CallbackType SearchForGameProgressCallback
public CallbackType SearchForGameResultCallback
public CallbackType RequestPlayersForGameProgressCallback
public CallbackType RequestPlayersForGameResultCallback
public CallbackType RequestPlayersForGameFinalResultCallback
public CallbackType SubmitPlayerResultResultCallback
public CallbackType EndGameResultCallback
public CallbackType JoinPartyCallback
public CallbackType CreateBeaconCallback
public CallbackType ReservationNotificationCallback
public CallbackType ChangeNumOpenSlotsCallback
public CallbackType AvailableBeaconLocationsUpdated
public CallbackType ActiveBeaconsUpdated
public CallbackType SteamRemotePlaySessionConnected
public CallbackType SteamRemotePlaySessionDisconnected
public CallbackType SteamRemotePlayTogetherGuestInvite
}
internal Steamworks.CallbackTypeFactory : object {
internal Dictionary`2<CallbackType, Type> All
}
internal Steamworks.CallResult`1 : ValueType {
private SteamAPICall_t call
private ISteamUtils utils
private bool server
public bool IsCompleted
public void .ctor(SteamAPICall_t call, bool server)
public void OnCompleted(Action continuation)
public Nullable`1<T> GetResult()
public bool get_IsCompleted()
internal CallResult`1<T> GetAwaiter()
}
internal Steamworks.ChatEntryType : Enum {
public int value__
public ChatEntryType Invalid
public ChatEntryType ChatMsg
public ChatEntryType Typing
public ChatEntryType InviteGame
public ChatEntryType Emote
public ChatEntryType LeftConversation
public ChatEntryType Entered
public ChatEntryType WasKicked
public ChatEntryType WasBanned
public ChatEntryType Disconnected
public ChatEntryType HistoricalChat
public ChatEntryType LinkBlocked
}
internal Steamworks.ChatMemberStateChange : Enum {
public int value__
public ChatMemberStateChange Entered
public ChatMemberStateChange Left
public ChatMemberStateChange Disconnected
public ChatMemberStateChange Kicked
public ChatMemberStateChange Banned
}
internal Steamworks.ChatSteamIDInstanceFlags : Enum {
public int value__
public ChatSteamIDInstanceFlags AccountInstanceMask
public ChatSteamIDInstanceFlags InstanceFlagClan
public ChatSteamIDInstanceFlags InstanceFlagLobby
public ChatSteamIDInstanceFlags InstanceFlagMMSLobby
}
public Steamworks.CheckFileSignature : Enum {
public int value__
public CheckFileSignature InvalidSignature
public CheckFileSignature ValidSignature
public CheckFileSignature FileNotFound
public CheckFileSignature NoSignaturesFoundForThisApp
public CheckFileSignature NoSignaturesFoundForThisFile
}
public Steamworks.Clan : ValueType {
public SteamId Id
public string Name
public string Tag
public int ChatMemberCount
public Friend Owner
public bool Public
public bool Official
public void .ctor(SteamId id)
public string get_Name()
public string get_Tag()
public int get_ChatMemberCount()
public Friend get_Owner()
public bool get_Public()
public bool get_Official()
public Task`1<bool> RequestOfficerList()
public IEnumerable`1<Friend> GetOfficers()
}
internal Steamworks.CommunityProfileItemProperty : Enum {
public int value__
public CommunityProfileItemProperty ImageSmall
public CommunityProfileItemProperty ImageLarge
public CommunityProfileItemProperty InternalName
public CommunityProfileItemProperty Title
public CommunityProfileItemProperty Description
public CommunityProfileItemProperty AppID
public CommunityProfileItemProperty TypeID
public CommunityProfileItemProperty Class
public CommunityProfileItemProperty MovieWebM
public CommunityProfileItemProperty MovieMP4
public CommunityProfileItemProperty MovieWebMSmall
public CommunityProfileItemProperty MovieMP4Small
}
internal Steamworks.CommunityProfileItemType : Enum {
public int value__
public CommunityProfileItemType AnimatedAvatar
public CommunityProfileItemType AvatarFrame
public CommunityProfileItemType ProfileModifier
public CommunityProfileItemType ProfileBackground
public CommunityProfileItemType MiniProfileBackground
}
public Steamworks.ConnectionManager : object {
private IConnectionManager <Interface>k__BackingField
public Connection Connection
private ConnectionInfo <ConnectionInfo>k__BackingField
public bool Connected
public bool Connecting
public IConnectionManager Interface
public ConnectionInfo ConnectionInfo
public string ConnectionName
public long UserData
public IConnectionManager get_Interface()
public void set_Interface(IConnectionManager value)
public ConnectionInfo get_ConnectionInfo()
internal void set_ConnectionInfo(ConnectionInfo value)
public string get_ConnectionName()
public void set_ConnectionName(string value)
public long get_UserData()
public void set_UserData(long value)
public void Close(bool linger, int reasonCode, string debugString)
public string ToString()
public void OnConnectionChanged(ConnectionInfo info)
public void OnConnecting(ConnectionInfo info)
public void OnConnected(ConnectionInfo info)
public void OnDisconnected(ConnectionInfo info)
public int Receive(int bufferSize, bool receiveToEnd)
public void SendMessages(Connection[] connections, int connectionCount, IntPtr ptr, int size, SendType sendType, Result[] results)
public void SendMessages(Connection[] connections, int connectionCount, Byte[] data, SendType sendType, Result[] results)
public void SendMessages(Connection[] connections, int connectionCount, Byte[] data, int offset, int length, SendType sendType, Result[] results)
public void SendMessages(Connection[] connections, int connectionCount, string str, SendType sendType, Result[] results)
internal void ReceiveMessage(NetMsg*& msg)
public void OnMessage(IntPtr data, int size, long messageNum, long recvTime, int channel)
}
public Steamworks.ConnectionState : Enum {
public int value__
public ConnectionState None
public ConnectionState Connecting
public ConnectionState FindingRoute
public ConnectionState Connected
public ConnectionState ClosedByPeer
public ConnectionState ProblemDetectedLocally
public ConnectionState FinWait
public ConnectionState Linger
public ConnectionState Dead
}
public Steamworks.Controller : ValueType {
internal InputHandle_t Handle
public ulong Id
public InputType InputType
public string ActionSet
internal void .ctor(InputHandle_t inputHandle_t)
public ulong get_Id()
public InputType get_InputType()
public void set_ActionSet(string value)
public void DeactivateLayer(string layer)
public void ActivateLayer(string layer)
public void ClearLayers()
public DigitalState GetDigitalState(string actionName)
public AnalogState GetAnalogState(string actionName)
public string ToString()
public bool op_Equality(Controller a, Controller b)
public bool op_Inequality(Controller a, Controller b)
public bool Equals(object p)
public int GetHashCode()
public bool Equals(Controller p)
}
internal Steamworks.ControllerActionOrigin : Enum {
public int value__
public ControllerActionOrigin None
public ControllerActionOrigin A
public ControllerActionOrigin B
public ControllerActionOrigin X
public ControllerActionOrigin Y
public ControllerActionOrigin LeftBumper
public ControllerActionOrigin RightBumper
public ControllerActionOrigin LeftGrip
public ControllerActionOrigin RightGrip
public ControllerActionOrigin Start
public ControllerActionOrigin Back
public ControllerActionOrigin LeftPad_Touch
public ControllerActionOrigin LeftPad_Swipe
public ControllerActionOrigin LeftPad_Click
public ControllerActionOrigin LeftPad_DPadNorth
public ControllerActionOrigin LeftPad_DPadSouth
public ControllerActionOrigin LeftPad_DPadWest
public ControllerActionOrigin LeftPad_DPadEast
public ControllerActionOrigin RightPad_Touch
public ControllerActionOrigin RightPad_Swipe
public ControllerActionOrigin RightPad_Click
public ControllerActionOrigin RightPad_DPadNorth
public ControllerActionOrigin RightPad_DPadSouth
public ControllerActionOrigin RightPad_DPadWest
public ControllerActionOrigin RightPad_DPadEast
public ControllerActionOrigin LeftTrigger_Pull
public ControllerActionOrigin LeftTrigger_Click
public ControllerActionOrigin RightTrigger_Pull
public ControllerActionOrigin RightTrigger_Click
public ControllerActionOrigin LeftStick_Move
public ControllerActionOrigin LeftStick_Click
public ControllerActionOrigin LeftStick_DPadNorth
public ControllerActionOrigin LeftStick_DPadSouth
public ControllerActionOrigin LeftStick_DPadWest
public ControllerActionOrigin LeftStick_DPadEast
public ControllerActionOrigin Gyro_Move
public ControllerActionOrigin Gyro_Pitch
public ControllerActionOrigin Gyro_Yaw
public ControllerActionOrigin Gyro_Roll
public ControllerActionOrigin PS4_X
public ControllerActionOrigin PS4_Circle
public ControllerActionOrigin PS4_Triangle
public ControllerActionOrigin PS4_Square
public ControllerActionOrigin PS4_LeftBumper
public ControllerActionOrigin PS4_RightBumper
public ControllerActionOrigin PS4_Options
public ControllerActionOrigin PS4_Share
public ControllerActionOrigin PS4_LeftPad_Touch
public ControllerActionOrigin PS4_LeftPad_Swipe
public ControllerActionOrigin PS4_LeftPad_Click
public ControllerActionOrigin PS4_LeftPad_DPadNorth
public ControllerActionOrigin PS4_LeftPad_DPadSouth
public ControllerActionOrigin PS4_LeftPad_DPadWest
public ControllerActionOrigin PS4_LeftPad_DPadEast
public ControllerActionOrigin PS4_RightPad_Touch
public ControllerActionOrigin PS4_RightPad_Swipe
public ControllerActionOrigin PS4_RightPad_Click
public ControllerActionOrigin PS4_RightPad_DPadNorth
public ControllerActionOrigin PS4_RightPad_DPadSouth
public ControllerActionOrigin PS4_RightPad_DPadWest
public ControllerActionOrigin PS4_RightPad_DPadEast
public ControllerActionOrigin PS4_CenterPad_Touch
public ControllerActionOrigin PS4_CenterPad_Swipe
public ControllerActionOrigin PS4_CenterPad_Click
public ControllerActionOrigin PS4_CenterPad_DPadNorth
public ControllerActionOrigin PS4_CenterPad_DPadSouth
public ControllerActionOrigin PS4_CenterPad_DPadWest
public ControllerActionOrigin PS4_CenterPad_DPadEast
public ControllerActionOrigin PS4_LeftTrigger_Pull
public ControllerActionOrigin PS4_LeftTrigger_Click
public ControllerActionOrigin PS4_RightTrigger_Pull
public ControllerActionOrigin PS4_RightTrigger_Click
public ControllerActionOrigin PS4_LeftStick_Move
public ControllerActionOrigin PS4_LeftStick_Click
public ControllerActionOrigin PS4_LeftStick_DPadNorth
public ControllerActionOrigin PS4_LeftStick_DPadSouth
public ControllerActionOrigin PS4_LeftStick_DPadWest
public ControllerActionOrigin PS4_LeftStick_DPadEast
public ControllerActionOrigin PS4_RightStick_Move
public ControllerActionOrigin PS4_RightStick_Click
public ControllerActionOrigin PS4_RightStick_DPadNorth
public ControllerActionOrigin PS4_RightStick_DPadSouth
public ControllerActionOrigin PS4_RightStick_DPadWest
public ControllerActionOrigin PS4_RightStick_DPadEast
public ControllerActionOrigin PS4_DPad_North
public ControllerActionOrigin PS4_DPad_South
public ControllerActionOrigin PS4_DPad_West
public ControllerActionOrigin PS4_DPad_East
public ControllerActionOrigin PS4_Gyro_Move
public ControllerActionOrigin PS4_Gyro_Pitch
public ControllerActionOrigin PS4_Gyro_Yaw
public ControllerActionOrigin PS4_Gyro_Roll
public ControllerActionOrigin XBoxOne_A
public ControllerActionOrigin XBoxOne_B
public ControllerActionOrigin XBoxOne_X
public ControllerActionOrigin XBoxOne_Y
public ControllerActionOrigin XBoxOne_LeftBumper
public ControllerActionOrigin XBoxOne_RightBumper
public ControllerActionOrigin XBoxOne_Menu
public ControllerActionOrigin XBoxOne_View
public ControllerActionOrigin XBoxOne_LeftTrigger_Pull
public ControllerActionOrigin XBoxOne_LeftTrigger_Click
public ControllerActionOrigin XBoxOne_RightTrigger_Pull
public ControllerActionOrigin XBoxOne_RightTrigger_Click
public ControllerActionOrigin XBoxOne_LeftStick_Move
public ControllerActionOrigin XBoxOne_LeftStick_Click
public ControllerActionOrigin XBoxOne_LeftStick_DPadNorth
public ControllerActionOrigin XBoxOne_LeftStick_DPadSouth
public ControllerActionOrigin XBoxOne_LeftStick_DPadWest
public ControllerActionOrigin XBoxOne_LeftStick_DPadEast
public ControllerActionOrigin XBoxOne_RightStick_Move
public ControllerActionOrigin XBoxOne_RightStick_Click
public ControllerActionOrigin XBoxOne_RightStick_DPadNorth
public ControllerActionOrigin XBoxOne_RightStick_DPadSouth
public ControllerActionOrigin XBoxOne_RightStick_DPadWest
public ControllerActionOrigin XBoxOne_RightStick_DPadEast
public ControllerActionOrigin XBoxOne_DPad_North
public ControllerActionOrigin XBoxOne_DPad_South
public ControllerActionOrigin XBoxOne_DPad_West
public ControllerActionOrigin XBoxOne_DPad_East
public ControllerActionOrigin XBox360_A
public ControllerActionOrigin XBox360_B
public ControllerActionOrigin XBox360_X
public ControllerActionOrigin XBox360_Y
public ControllerActionOrigin XBox360_LeftBumper
public ControllerActionOrigin XBox360_RightBumper
public ControllerActionOrigin XBox360_Start
public ControllerActionOrigin XBox360_Back
public ControllerActionOrigin XBox360_LeftTrigger_Pull
public ControllerActionOrigin XBox360_LeftTrigger_Click
public ControllerActionOrigin XBox360_RightTrigger_Pull
public ControllerActionOrigin XBox360_RightTrigger_Click
public ControllerActionOrigin XBox360_LeftStick_Move
public ControllerActionOrigin XBox360_LeftStick_Click
public ControllerActionOrigin XBox360_LeftStick_DPadNorth
public ControllerActionOrigin XBox360_LeftStick_DPadSouth
public ControllerActionOrigin XBox360_LeftStick_DPadWest
public ControllerActionOrigin XBox360_LeftStick_DPadEast
public ControllerActionOrigin XBox360_RightStick_Move
public ControllerActionOrigin XBox360_RightStick_Click
public ControllerActionOrigin XBox360_RightStick_DPadNorth
public ControllerActionOrigin XBox360_RightStick_DPadSouth
public ControllerActionOrigin XBox360_RightStick_DPadWest
public ControllerActionOrigin XBox360_RightStick_DPadEast
public ControllerActionOrigin XBox360_DPad_North
public ControllerActionOrigin XBox360_DPad_South
public ControllerActionOrigin XBox360_DPad_West
public ControllerActionOrigin XBox360_DPad_East
public ControllerActionOrigin SteamV2_A
public ControllerActionOrigin SteamV2_B
public ControllerActionOrigin SteamV2_X
public ControllerActionOrigin SteamV2_Y
public ControllerActionOrigin SteamV2_LeftBumper
public ControllerActionOrigin SteamV2_RightBumper
public ControllerActionOrigin SteamV2_LeftGrip_Lower
public ControllerActionOrigin SteamV2_LeftGrip_Upper
public ControllerActionOrigin SteamV2_RightGrip_Lower
public ControllerActionOrigin SteamV2_RightGrip_Upper
public ControllerActionOrigin SteamV2_LeftBumper_Pressure
public ControllerActionOrigin SteamV2_RightBumper_Pressure
public ControllerActionOrigin SteamV2_LeftGrip_Pressure
public ControllerActionOrigin SteamV2_RightGrip_Pressure
public ControllerActionOrigin SteamV2_LeftGrip_Upper_Pressure
public ControllerActionOrigin SteamV2_RightGrip_Upper_Pressure
public ControllerActionOrigin SteamV2_Start
public ControllerActionOrigin SteamV2_Back
public ControllerActionOrigin SteamV2_LeftPad_Touch
public ControllerActionOrigin SteamV2_LeftPad_Swipe
public ControllerActionOrigin SteamV2_LeftPad_Click
public ControllerActionOrigin SteamV2_LeftPad_Pressure
public ControllerActionOrigin SteamV2_LeftPad_DPadNorth
public ControllerActionOrigin SteamV2_LeftPad_DPadSouth
public ControllerActionOrigin SteamV2_LeftPad_DPadWest
public ControllerActionOrigin SteamV2_LeftPad_DPadEast
public ControllerActionOrigin SteamV2_RightPad_Touch
public ControllerActionOrigin SteamV2_RightPad_Swipe
public ControllerActionOrigin SteamV2_RightPad_Click
public ControllerActionOrigin SteamV2_RightPad_Pressure
public ControllerActionOrigin SteamV2_RightPad_DPadNorth
public ControllerActionOrigin SteamV2_RightPad_DPadSouth
public ControllerActionOrigin SteamV2_RightPad_DPadWest
public ControllerActionOrigin SteamV2_RightPad_DPadEast
public ControllerActionOrigin SteamV2_LeftTrigger_Pull
public ControllerActionOrigin SteamV2_LeftTrigger_Click
public ControllerActionOrigin SteamV2_RightTrigger_Pull
public ControllerActionOrigin SteamV2_RightTrigger_Click
public ControllerActionOrigin SteamV2_LeftStick_Move
public ControllerActionOrigin SteamV2_LeftStick_Click
public ControllerActionOrigin SteamV2_LeftStick_DPadNorth
public ControllerActionOrigin SteamV2_LeftStick_DPadSouth
public ControllerActionOrigin SteamV2_LeftStick_DPadWest
public ControllerActionOrigin SteamV2_LeftStick_DPadEast
public ControllerActionOrigin SteamV2_Gyro_Move
public ControllerActionOrigin SteamV2_Gyro_Pitch
public ControllerActionOrigin SteamV2_Gyro_Yaw
public ControllerActionOrigin SteamV2_Gyro_Roll
public ControllerActionOrigin Switch_A
public ControllerActionOrigin Switch_B
public ControllerActionOrigin Switch_X
public ControllerActionOrigin Switch_Y
public ControllerActionOrigin Switch_LeftBumper
public ControllerActionOrigin Switch_RightBumper
public ControllerActionOrigin Switch_Plus
public ControllerActionOrigin Switch_Minus
public ControllerActionOrigin Switch_Capture
public ControllerActionOrigin Switch_LeftTrigger_Pull
public ControllerActionOrigin Switch_LeftTrigger_Click
public ControllerActionOrigin Switch_RightTrigger_Pull
public ControllerActionOrigin Switch_RightTrigger_Click
public ControllerActionOrigin Switch_LeftStick_Move
public ControllerActionOrigin Switch_LeftStick_Click
public ControllerActionOrigin Switch_LeftStick_DPadNorth
public ControllerActionOrigin Switch_LeftStick_DPadSouth
public ControllerActionOrigin Switch_LeftStick_DPadWest
public ControllerActionOrigin Switch_LeftStick_DPadEast
public ControllerActionOrigin Switch_RightStick_Move
public ControllerActionOrigin Switch_RightStick_Click
public ControllerActionOrigin Switch_RightStick_DPadNorth
public ControllerActionOrigin Switch_RightStick_DPadSouth
public ControllerActionOrigin Switch_RightStick_DPadWest
public ControllerActionOrigin Switch_RightStick_DPadEast
public ControllerActionOrigin Switch_DPad_North
public ControllerActionOrigin Switch_DPad_South
public ControllerActionOrigin Switch_DPad_West
public ControllerActionOrigin Switch_DPad_East
public ControllerActionOrigin Switch_ProGyro_Move
public ControllerActionOrigin Switch_ProGyro_Pitch
public ControllerActionOrigin Switch_ProGyro_Yaw
public ControllerActionOrigin Switch_ProGyro_Roll
public ControllerActionOrigin Switch_RightGyro_Move
public ControllerActionOrigin Switch_RightGyro_Pitch
public ControllerActionOrigin Switch_RightGyro_Yaw
public ControllerActionOrigin Switch_RightGyro_Roll
public ControllerActionOrigin Switch_LeftGyro_Move
public ControllerActionOrigin Switch_LeftGyro_Pitch
public ControllerActionOrigin Switch_LeftGyro_Yaw
public ControllerActionOrigin Switch_LeftGyro_Roll
public ControllerActionOrigin Switch_LeftGrip_Lower
public ControllerActionOrigin Switch_LeftGrip_Upper
public ControllerActionOrigin Switch_RightGrip_Lower
public ControllerActionOrigin Switch_RightGrip_Upper
public ControllerActionOrigin PS4_DPad_Move
public ControllerActionOrigin XBoxOne_DPad_Move
public ControllerActionOrigin XBox360_DPad_Move
public ControllerActionOrigin Switch_DPad_Move
public ControllerActionOrigin PS5_X
public ControllerActionOrigin PS5_Circle
public ControllerActionOrigin PS5_Triangle
public ControllerActionOrigin PS5_Square
public ControllerActionOrigin PS5_LeftBumper
public ControllerActionOrigin PS5_RightBumper
public ControllerActionOrigin PS5_Option
public ControllerActionOrigin PS5_Create
public ControllerActionOrigin PS5_Mute
public ControllerActionOrigin PS5_LeftPad_Touch
public ControllerActionOrigin PS5_LeftPad_Swipe
public ControllerActionOrigin PS5_LeftPad_Click
public ControllerActionOrigin PS5_LeftPad_DPadNorth
public ControllerActionOrigin PS5_LeftPad_DPadSouth
public ControllerActionOrigin PS5_LeftPad_DPadWest
public ControllerActionOrigin PS5_LeftPad_DPadEast
public ControllerActionOrigin PS5_RightPad_Touch
public ControllerActionOrigin PS5_RightPad_Swipe
public ControllerActionOrigin PS5_RightPad_Click
public ControllerActionOrigin PS5_RightPad_DPadNorth
public ControllerActionOrigin PS5_RightPad_DPadSouth
public ControllerActionOrigin PS5_RightPad_DPadWest
public ControllerActionOrigin PS5_RightPad_DPadEast
public ControllerActionOrigin PS5_CenterPad_Touch
public ControllerActionOrigin PS5_CenterPad_Swipe
public ControllerActionOrigin PS5_CenterPad_Click
public ControllerActionOrigin PS5_CenterPad_DPadNorth
public ControllerActionOrigin PS5_CenterPad_DPadSouth
public ControllerActionOrigin PS5_CenterPad_DPadWest
public ControllerActionOrigin PS5_CenterPad_DPadEast
public ControllerActionOrigin PS5_LeftTrigger_Pull
public ControllerActionOrigin PS5_LeftTrigger_Click
public ControllerActionOrigin PS5_RightTrigger_Pull
public ControllerActionOrigin PS5_RightTrigger_Click
public ControllerActionOrigin PS5_LeftStick_Move
public ControllerActionOrigin PS5_LeftStick_Click
public ControllerActionOrigin PS5_LeftStick_DPadNorth
public ControllerActionOrigin PS5_LeftStick_DPadSouth
public ControllerActionOrigin PS5_LeftStick_DPadWest
public ControllerActionOrigin PS5_LeftStick_DPadEast
public ControllerActionOrigin PS5_RightStick_Move
public ControllerActionOrigin PS5_RightStick_Click
public ControllerActionOrigin PS5_RightStick_DPadNorth
public ControllerActionOrigin PS5_RightStick_DPadSouth
public ControllerActionOrigin PS5_RightStick_DPadWest
public ControllerActionOrigin PS5_RightStick_DPadEast
public ControllerActionOrigin PS5_DPad_Move
public ControllerActionOrigin PS5_DPad_North
public ControllerActionOrigin PS5_DPad_South
public ControllerActionOrigin PS5_DPad_West
public ControllerActionOrigin PS5_DPad_East
public ControllerActionOrigin PS5_Gyro_Move
public ControllerActionOrigin PS5_Gyro_Pitch
public ControllerActionOrigin PS5_Gyro_Yaw
public ControllerActionOrigin PS5_Gyro_Roll
public ControllerActionOrigin XBoxOne_LeftGrip_Lower
public ControllerActionOrigin XBoxOne_LeftGrip_Upper
public ControllerActionOrigin XBoxOne_RightGrip_Lower
public ControllerActionOrigin XBoxOne_RightGrip_Upper
public ControllerActionOrigin XBoxOne_Share
public ControllerActionOrigin SteamDeck_A
public ControllerActionOrigin SteamDeck_B
public ControllerActionOrigin SteamDeck_X
public ControllerActionOrigin SteamDeck_Y
public ControllerActionOrigin SteamDeck_L1
public ControllerActionOrigin SteamDeck_R1
public ControllerActionOrigin SteamDeck_Menu
public ControllerActionOrigin SteamDeck_View
public ControllerActionOrigin SteamDeck_LeftPad_Touch
public ControllerActionOrigin SteamDeck_LeftPad_Swipe
public ControllerActionOrigin SteamDeck_LeftPad_Click
public ControllerActionOrigin SteamDeck_LeftPad_DPadNorth
public ControllerActionOrigin SteamDeck_LeftPad_DPadSouth
public ControllerActionOrigin SteamDeck_LeftPad_DPadWest
public ControllerActionOrigin SteamDeck_LeftPad_DPadEast
public ControllerActionOrigin SteamDeck_RightPad_Touch
public ControllerActionOrigin SteamDeck_RightPad_Swipe
public ControllerActionOrigin SteamDeck_RightPad_Click
public ControllerActionOrigin SteamDeck_RightPad_DPadNorth
public ControllerActionOrigin SteamDeck_RightPad_DPadSouth
public ControllerActionOrigin SteamDeck_RightPad_DPadWest
public ControllerActionOrigin SteamDeck_RightPad_DPadEast
public ControllerActionOrigin SteamDeck_L2_SoftPull
public ControllerActionOrigin SteamDeck_L2
public ControllerActionOrigin SteamDeck_R2_SoftPull
public ControllerActionOrigin SteamDeck_R2
public ControllerActionOrigin SteamDeck_LeftStick_Move
public ControllerActionOrigin SteamDeck_L3
public ControllerActionOrigin SteamDeck_LeftStick_DPadNorth
public ControllerActionOrigin SteamDeck_LeftStick_DPadSouth
public ControllerActionOrigin SteamDeck_LeftStick_DPadWest
public ControllerActionOrigin SteamDeck_LeftStick_DPadEast
public ControllerActionOrigin SteamDeck_LeftStick_Touch
public ControllerActionOrigin SteamDeck_RightStick_Move
public ControllerActionOrigin SteamDeck_R3
public ControllerActionOrigin SteamDeck_RightStick_DPadNorth
public ControllerActionOrigin SteamDeck_RightStick_DPadSouth
public ControllerActionOrigin SteamDeck_RightStick_DPadWest
public ControllerActionOrigin SteamDeck_RightStick_DPadEast
public ControllerActionOrigin SteamDeck_RightStick_Touch
public ControllerActionOrigin SteamDeck_L4
public ControllerActionOrigin SteamDeck_R4
public ControllerActionOrigin SteamDeck_L5
public ControllerActionOrigin SteamDeck_R5
public ControllerActionOrigin SteamDeck_DPad_Move
public ControllerActionOrigin SteamDeck_DPad_North
public ControllerActionOrigin SteamDeck_DPad_South
public ControllerActionOrigin SteamDeck_DPad_West
public ControllerActionOrigin SteamDeck_DPad_East
public ControllerActionOrigin SteamDeck_Gyro_Move
public ControllerActionOrigin SteamDeck_Gyro_Pitch
public ControllerActionOrigin SteamDeck_Gyro_Yaw
public ControllerActionOrigin SteamDeck_Gyro_Roll
public ControllerActionOrigin SteamDeck_Reserved1
public ControllerActionOrigin SteamDeck_Reserved2
public ControllerActionOrigin SteamDeck_Reserved3
public ControllerActionOrigin SteamDeck_Reserved4
public ControllerActionOrigin SteamDeck_Reserved5
public ControllerActionOrigin SteamDeck_Reserved6
public ControllerActionOrigin SteamDeck_Reserved7
public ControllerActionOrigin SteamDeck_Reserved8
public ControllerActionOrigin SteamDeck_Reserved9
public ControllerActionOrigin SteamDeck_Reserved10
public ControllerActionOrigin SteamDeck_Reserved11
public ControllerActionOrigin SteamDeck_Reserved12
public ControllerActionOrigin SteamDeck_Reserved13
public ControllerActionOrigin SteamDeck_Reserved14
public ControllerActionOrigin SteamDeck_Reserved15
public ControllerActionOrigin SteamDeck_Reserved16
public ControllerActionOrigin SteamDeck_Reserved17
public ControllerActionOrigin SteamDeck_Reserved18
public ControllerActionOrigin SteamDeck_Reserved19
public ControllerActionOrigin SteamDeck_Reserved20
public ControllerActionOrigin Switch_JoyConButton_N
public ControllerActionOrigin Switch_JoyConButton_E
public ControllerActionOrigin Switch_JoyConButton_S
public ControllerActionOrigin Switch_JoyConButton_W
public ControllerActionOrigin PS5_LeftGrip
public ControllerActionOrigin PS5_RightGrip
public ControllerActionOrigin PS5_LeftFn
public ControllerActionOrigin PS5_RightFn
public ControllerActionOrigin Count
public ControllerActionOrigin MaximumPossibleValue
}
internal Steamworks.ControllerHapticLocation : Enum {
public int value__
public ControllerHapticLocation Left
public ControllerHapticLocation Right
public ControllerHapticLocation Both
}
internal Steamworks.ControllerHapticType : Enum {
public int value__
public ControllerHapticType Off
public ControllerHapticType Tick
public ControllerHapticType Click
}
internal Steamworks.Data.AccountID_t : ValueType {
public UInt32 Value
public AccountID_t op_Implicit(UInt32 value)
public UInt32 op_Implicit(AccountID_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(AccountID_t p)
public bool op_Equality(AccountID_t a, AccountID_t b)
public bool op_Inequality(AccountID_t a, AccountID_t b)
public int CompareTo(AccountID_t other)
}
public Steamworks.Data.Achievement : ValueType {
internal string Value
public bool State
public string Identifier
public string Name
public string Description
public Nullable`1<DateTime> UnlockTime
public float GlobalUnlocked
public void .ctor(string name)
public string ToString()
public bool get_State()
public string get_Identifier()
public string get_Name()
public string get_Description()
public Nullable`1<DateTime> get_UnlockTime()
public Nullable`1<Image> GetIcon()
public Task`1<Nullable`1<Image>> GetIconAsync(int timeout)
public float get_GlobalUnlocked()
public bool Trigger(bool apply)
public bool Clear()
}
internal Steamworks.Data.ActiveBeaconsUpdated_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.AddAppDependencyResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.AddUGCDependencyResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal PublishedFileId ChildPublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.AppProofOfPurchaseKeyResponse_t : ValueType {
internal Result Result
internal UInt32 AppID
internal UInt32 CchKeyLength
internal Byte[] Key
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string KeyUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.AppResumingFromSuspend_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.AssociateWithClanResult_t : ValueType {
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.AvailableBeaconLocationsUpdated_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.AvatarImageLoaded_t : ValueType {
internal ulong SteamID
internal int Image
internal int Wide
internal int Tall
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.ChangeNumOpenSlotsCallback_t : ValueType {
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.CheckFileSignature_t : ValueType {
internal CheckFileSignature CheckFileSignature
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.ClanOfficerListResponse_t : ValueType {
internal ulong SteamIDClan
internal int COfficers
internal byte Success
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.ClientGameServerDeny_t : ValueType {
internal UInt32 AppID
internal UInt32 GameServerIP
internal ushort GameServerPort
internal ushort Secure
internal UInt32 Reason
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.Color : ValueType {
public byte r
public byte g
public byte b
public byte a
}
internal Steamworks.Data.ComputeNewPlayerCompatibilityResult_t : ValueType {
internal Result Result
internal int CPlayersThatDontLikeCandidate
internal int CPlayersThatCandidateDoesntLike
internal int CClanPlayersThatDontLikeCandidate
internal ulong SteamIDCandidate
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.Connection : ValueType {
private UInt32 <Id>k__BackingField
public UInt32 Id
public long UserData
public string ConnectionName
public UInt32 get_Id()
public void set_Id(UInt32 value)
public bool Equals(Connection other)
public bool Equals(object obj)
public int GetHashCode()
public string ToString()
public Connection op_Implicit(UInt32 value)
public UInt32 op_Implicit(Connection value)
public bool op_Equality(Connection value1, Connection value2)
public bool op_Inequality(Connection value1, Connection value2)
public Result Accept()
public bool Close(bool linger, int reasonCode, string debugString)
public long get_UserData()
public void set_UserData(long value)
public string get_ConnectionName()
public void set_ConnectionName(string value)
public Result SendMessage(IntPtr ptr, int size, SendType sendType, ushort laneIndex)
public Result SendMessage(Byte[] data, SendType sendType, ushort laneIndex)
public Result SendMessage(Byte[] data, int offset, int length, SendType sendType, ushort laneIndex)
public Result SendMessage(string str, SendType sendType, ushort laneIndex)
public Result Flush()
public string DetailedStatus()
public ConnectionStatus QuickStatus()
public Result ConfigureConnectionLanes(Int32[] lanePriorities, UInt16[] laneWeights)
}
public Steamworks.Data.ConnectionInfo : ValueType {
internal NetIdentity identity
internal long userData
internal Socket listenSocket
internal NetAddress address
internal ushort pad
internal SteamNetworkingPOPID popRemote
internal SteamNetworkingPOPID popRelay
internal ConnectionState state
internal int endReason
internal string endDebug
internal string connectionDescription
public ConnectionState State
public NetAddress Address
public NetIdentity Identity
public NetConnectionEnd EndReason
public ConnectionState get_State()
public NetAddress get_Address()
public NetIdentity get_Identity()
public NetConnectionEnd get_EndReason()
}
public Steamworks.Data.ConnectionLaneStatus : ValueType {
internal int cbPendingUnreliable
internal int cbPendingReliable
internal int cbSentUnackedReliable
internal int _reservePad1
internal long ecQueueTime
internal UInt32[] reserved
public int PendingUnreliable
public int PendingReliable
public int SentUnackedReliable
public int get_PendingUnreliable()
public int get_PendingReliable()
public int get_SentUnackedReliable()
}
public Steamworks.Data.ConnectionStatus : ValueType {
internal ConnectionState state
internal int ping
internal float connectionQualityLocal
internal float connectionQualityRemote
internal float outPacketsPerSec
internal float outBytesPerSec
internal float inPacketsPerSec
internal float inBytesPerSec
internal int sendRateBytesPerSecond
internal int cbPendingUnreliable
internal int cbPendingReliable
internal int cbSentUnackedReliable
internal long ecQueueTime
internal UInt32[] reserved
public int Ping
public float OutPacketsPerSec
public float OutBytesPerSec
public float InPacketsPerSec
public float InBytesPerSec
public float ConnectionQualityLocal
public float ConnectionQualityRemote
public int PendingUnreliable
public int PendingReliable
public int SentUnackedReliable
public int get_Ping()
public float get_OutPacketsPerSec()
public float get_OutBytesPerSec()
public float get_InPacketsPerSec()
public float get_InBytesPerSec()
public float get_ConnectionQualityLocal()
public float get_ConnectionQualityRemote()
public int get_PendingUnreliable()
public int get_PendingReliable()
public int get_SentUnackedReliable()
}
internal Steamworks.Data.ControllerActionSetHandle_t : ValueType {
public ulong Value
public ControllerActionSetHandle_t op_Implicit(ulong value)
public ulong op_Implicit(ControllerActionSetHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(ControllerActionSetHandle_t p)
public bool op_Equality(ControllerActionSetHandle_t a, ControllerActionSetHandle_t b)
public bool op_Inequality(ControllerActionSetHandle_t a, ControllerActionSetHandle_t b)
public int CompareTo(ControllerActionSetHandle_t other)
}
internal Steamworks.Data.ControllerAnalogActionHandle_t : ValueType {
public ulong Value
public ControllerAnalogActionHandle_t op_Implicit(ulong value)
public ulong op_Implicit(ControllerAnalogActionHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(ControllerAnalogActionHandle_t p)
public bool op_Equality(ControllerAnalogActionHandle_t a, ControllerAnalogActionHandle_t b)
public bool op_Inequality(ControllerAnalogActionHandle_t a, ControllerAnalogActionHandle_t b)
public int CompareTo(ControllerAnalogActionHandle_t other)
}
internal Steamworks.Data.ControllerDigitalActionHandle_t : ValueType {
public ulong Value
public ControllerDigitalActionHandle_t op_Implicit(ulong value)
public ulong op_Implicit(ControllerDigitalActionHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(ControllerDigitalActionHandle_t p)
public bool op_Equality(ControllerDigitalActionHandle_t a, ControllerDigitalActionHandle_t b)
public bool op_Inequality(ControllerDigitalActionHandle_t a, ControllerDigitalActionHandle_t b)
public int CompareTo(ControllerDigitalActionHandle_t other)
}
internal Steamworks.Data.ControllerHandle_t : ValueType {
public ulong Value
public ControllerHandle_t op_Implicit(ulong value)
public ulong op_Implicit(ControllerHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(ControllerHandle_t p)
public bool op_Equality(ControllerHandle_t a, ControllerHandle_t b)
public bool op_Inequality(ControllerHandle_t a, ControllerHandle_t b)
public int CompareTo(ControllerHandle_t other)
}
internal Steamworks.Data.CreateBeaconCallback_t : ValueType {
internal Result Result
internal ulong BeaconID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.CreateItemResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal bool UserNeedsToAcceptWorkshopLegalAgreement
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.Defines : object {
internal AppId k_uAppIdInvalid
internal DepotId_t k_uDepotIdInvalid
internal SteamAPICall_t k_uAPICallInvalid
internal PartyBeaconID_t k_ulPartyBeaconIdInvalid
internal HAuthTicket k_HAuthTicketInvalid
internal UInt32 k_unSteamAccountIDMask
internal UInt32 k_unSteamAccountInstanceMask
internal UInt32 k_unSteamUserDefaultInstance
internal int k_cchGameExtraInfoMax
internal int k_cchMaxFriendsGroupName
internal int k_cFriendsGroupLimit
internal FriendsGroupID_t k_FriendsGroupID_Invalid
internal int k_cEnumerateFollowersMax
internal UInt32 k_cubChatMetadataMax
internal int k_cbMaxGameServerGameDir
internal int k_cbMaxGameServerMapName
internal int k_cbMaxGameServerGameDescription
internal int k_cbMaxGameServerName
internal int k_cbMaxGameServerTags
internal int k_cbMaxGameServerGameData
internal int HSERVERQUERY_INVALID
internal UInt32 k_unFavoriteFlagNone
internal UInt32 k_unFavoriteFlagFavorite
internal UInt32 k_unFavoriteFlagHistory
internal UInt32 k_unMaxCloudFileChunkSize
internal PublishedFileId k_PublishedFileIdInvalid
internal UGCHandle_t k_UGCHandleInvalid
internal PublishedFileUpdateHandle_t k_PublishedFileUpdateHandleInvalid
internal UGCFileWriteStreamHandle_t k_UGCFileStreamHandleInvalid
internal UInt32 k_cchPublishedDocumentTitleMax
internal UInt32 k_cchPublishedDocumentDescriptionMax
internal UInt32 k_cchPublishedDocumentChangeDescriptionMax
internal UInt32 k_unEnumeratePublishedFilesMaxResults
internal UInt32 k_cchTagListMax
internal UInt32 k_cchFilenameMax
internal UInt32 k_cchPublishedFileURLMax
internal int k_cubAppProofOfPurchaseKeyMax
internal UInt32 k_nScreenshotMaxTaggedUsers
internal UInt32 k_nScreenshotMaxTaggedPublishedFiles
internal int k_cubUFSTagTypeMax
internal int k_cubUFSTagValueMax
internal int k_ScreenshotThumbWidth
internal UGCQueryHandle_t k_UGCQueryHandleInvalid
internal UGCUpdateHandle_t k_UGCUpdateHandleInvalid
internal UInt32 kNumUGCResultsPerPage
internal UInt32 k_cchDeveloperMetadataMax
internal UInt32 INVALID_HTMLBROWSER
internal InventoryItemId k_SteamItemInstanceIDInvalid
internal SteamInventoryResult_t k_SteamInventoryResultInvalid
internal SteamInventoryUpdateHandle_t k_SteamInventoryUpdateHandleInvalid
internal Connection k_HSteamNetConnection_Invalid
internal Socket k_HSteamListenSocket_Invalid
internal HSteamNetPollGroup k_HSteamNetPollGroup_Invalid
internal int k_cchMaxSteamNetworkingErrMsg
internal int k_cchSteamNetworkingMaxConnectionCloseReason
internal int k_cchSteamNetworkingMaxConnectionDescription
internal int k_cchSteamNetworkingMaxConnectionAppName
internal int k_nSteamNetworkConnectionInfoFlags_Unauthenticated
internal int k_nSteamNetworkConnectionInfoFlags_Unencrypted
internal int k_nSteamNetworkConnectionInfoFlags_LoopbackBuffers
internal int k_nSteamNetworkConnectionInfoFlags_Fast
internal int k_nSteamNetworkConnectionInfoFlags_Relayed
internal int k_nSteamNetworkConnectionInfoFlags_DualWifi
internal int k_cbMaxSteamNetworkingSocketsMessageSizeSend
internal int k_nSteamNetworkingSend_Unreliable
internal int k_nSteamNetworkingSend_NoNagle
internal int k_nSteamNetworkingSend_UnreliableNoNagle
internal int k_nSteamNetworkingSend_NoDelay
internal int k_nSteamNetworkingSend_UnreliableNoDelay
internal int k_nSteamNetworkingSend_Reliable
internal int k_nSteamNetworkingSend_ReliableNoNagle
internal int k_nSteamNetworkingSend_UseCurrentThread
internal int k_nSteamNetworkingSend_AutoRestartBrokenSession
internal int k_cchMaxSteamNetworkingPingLocationString
internal int k_nSteamNetworkingPing_Failed
internal int k_nSteamNetworkingPing_Unknown
internal int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Default
internal int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Disable
internal int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Relay
internal int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Private
internal int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Public
internal int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_All
internal SteamNetworkingPOPID k_SteamDatagramPOPID_dev
internal ushort STEAMGAMESERVER_QUERY_PORT_SHARED
internal ushort MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE
internal UInt32 k_cbSteamDatagramMaxSerializedTicket
internal UInt32 k_cbMaxSteamDatagramGameCoordinatorServerLoginAppData
internal UInt32 k_cbMaxSteamDatagramGameCoordinatorServerLoginSerialized
internal int k_cbSteamNetworkingSocketsFakeUDPPortRecommendedMTU
internal int k_cbSteamNetworkingSocketsFakeUDPPortMaxMessageSize
}
internal Steamworks.Data.DeleteItemResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.DepotId : ValueType {
public UInt32 Value
public DepotId op_Implicit(UInt32 value)
public DepotId op_Implicit(int value)
public UInt32 op_Implicit(DepotId value)
public string ToString()
}
internal Steamworks.Data.DepotId_t : ValueType {
public UInt32 Value
public DepotId_t op_Implicit(UInt32 value)
public UInt32 op_Implicit(DepotId_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(DepotId_t p)
public bool op_Equality(DepotId_t a, DepotId_t b)
public bool op_Inequality(DepotId_t a, DepotId_t b)
public int CompareTo(DepotId_t other)
}
public Steamworks.Data.DlcInformation : ValueType {
private AppId <AppId>k__BackingField
private string <Name>k__BackingField
private bool <Available>k__BackingField
public AppId AppId
public string Name
public bool Available
public AppId get_AppId()
internal void set_AppId(AppId value)
public string get_Name()
internal void set_Name(string value)
public bool get_Available()
internal void set_Available(bool value)
}
internal Steamworks.Data.DlcInstalled_t : ValueType {
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.DownloadClanActivityCountsResult_t : ValueType {
internal bool Success
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.DownloadItemResult_t : ValueType {
internal AppId AppID
internal PublishedFileId PublishedFileId
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.DownloadProgress : ValueType {
public bool Active
public ulong BytesDownloaded
public ulong BytesTotal
public ulong BytesRemaining
public ulong get_BytesRemaining()
}
public Steamworks.Data.DurationControl : ValueType {
internal DurationControl_t _inner
public AppId Appid
public bool Applicable
internal TimeSpan PlaytimeInLastFiveHours
internal TimeSpan PlaytimeToday
internal DurationControlProgress Progress
public AppId get_Appid()
public bool get_Applicable()
internal TimeSpan get_PlaytimeInLastFiveHours()
internal TimeSpan get_PlaytimeToday()
internal DurationControlProgress get_Progress()
}
internal Steamworks.Data.DurationControl_t : ValueType {
internal Result Result
internal AppId Appid
internal bool Applicable
internal int CsecsLast5h
internal DurationControlProgress Progress
internal DurationControlNotification Otification
internal int CsecsToday
internal int CsecsRemaining
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.EncryptedAppTicketResponse_t : ValueType {
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.EndGameResultCallback_t : ValueType {
internal Result Result
internal ulong UllUniqueGameID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.EquippedProfileItems_t : ValueType {
internal Result Result
internal ulong SteamID
internal bool HasAnimatedAvatar
internal bool HasAvatarFrame
internal bool HasProfileModifier
internal bool HasProfileBackground
internal bool HasMiniProfileBackground
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.EquippedProfileItemsChanged_t : ValueType {
internal ulong SteamID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.FavoritesListAccountsUpdated_t : ValueType {
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.FavoritesListChanged_t : ValueType {
internal UInt32 IP
internal UInt32 QueryPort
internal UInt32 ConnPort
internal UInt32 AppID
internal UInt32 Flags
internal bool Add
internal UInt32 AccountId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.FileDetails : ValueType {
public ulong SizeInBytes
public string Sha1
public UInt32 Flags
}
internal Steamworks.Data.FileDetailsResult_t : ValueType {
internal Result Result
internal ulong FileSize
internal Byte[] FileSHA
internal UInt32 Flags
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.FilterTextDictionaryChanged_t : ValueType {
internal int Language
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.FloatingGamepadTextInputDismissed_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.FriendGameInfo_t : ValueType {
internal GameId GameID
internal UInt32 GameIP
internal ushort GamePort
internal ushort QueryPort
internal ulong SteamIDLobby
}
internal Steamworks.Data.FriendRichPresenceUpdate_t : ValueType {
internal ulong SteamIDFriend
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.FriendsEnumerateFollowingList_t : ValueType {
internal Result Result
internal UInt64[] GSteamID
internal int ResultsReturned
internal int TotalResultCount
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.FriendsGetFollowerCount_t : ValueType {
internal Result Result
internal ulong SteamID
internal int Count
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.FriendsGroupID_t : ValueType {
public short Value
public FriendsGroupID_t op_Implicit(short value)
public short op_Implicit(FriendsGroupID_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(FriendsGroupID_t p)
public bool op_Equality(FriendsGroupID_t a, FriendsGroupID_t b)
public bool op_Inequality(FriendsGroupID_t a, FriendsGroupID_t b)
public int CompareTo(FriendsGroupID_t other)
}
internal Steamworks.Data.FriendsIsFollowing_t : ValueType {
internal Result Result
internal ulong SteamID
internal bool IsFollowing
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GameConnectedChatJoin_t : ValueType {
internal ulong SteamIDClanChat
internal ulong SteamIDUser
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GameConnectedChatLeave_t : ValueType {
internal ulong SteamIDClanChat
internal ulong SteamIDUser
internal bool Kicked
internal bool Dropped
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GameConnectedClanChatMsg_t : ValueType {
internal ulong SteamIDClanChat
internal ulong SteamIDUser
internal int MessageID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GameConnectedFriendChatMsg_t : ValueType {
internal ulong SteamIDUser
internal int MessageID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.GameId : ValueType {
public ulong Value
public GameId op_Implicit(ulong value)
public ulong op_Implicit(GameId value)
}
internal Steamworks.Data.GameLobbyJoinRequested_t : ValueType {
internal ulong SteamIDLobby
internal ulong SteamIDFriend
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GameOverlayActivated_t : ValueType {
internal byte Active
internal bool UserInitiated
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GamepadTextInputDismissed_t : ValueType {
internal bool Submitted
internal UInt32 SubmittedText
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GameRichPresenceJoinRequested_t : ValueType {
internal ulong SteamIDFriend
internal Byte[] Connect
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string ConnectUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GameServerChangeRequested_t : ValueType {
internal Byte[] Server
internal Byte[] Password
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string ServerUTF8()
internal string PasswordUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.gameserveritem_t : ValueType {
internal servernetadr_t NetAdr
internal int Ping
internal bool HadSuccessfulResponse
internal bool DoNotRefresh
internal Byte[] GameDir
internal Byte[] Map
internal Byte[] GameDescription
internal UInt32 AppID
internal int Players
internal int MaxPlayers
internal int BotPlayers
internal bool Password
internal bool Secure
internal UInt32 TimeLastPlayed
internal int ServerVersion
internal Byte[] ServerName
internal Byte[] GameTags
internal ulong SteamID
internal void InternalConstruct(gameserveritem_t& self)
internal Utf8StringPointer InternalGetName(gameserveritem_t& self)
internal void InternalSetName(gameserveritem_t& self, string pName)
internal string GameDirUTF8()
internal string MapUTF8()
internal string GameDescriptionUTF8()
internal string ServerNameUTF8()
internal string GameTagsUTF8()
}
internal Steamworks.Data.GameWebCallback_t : ValueType {
internal Byte[] URL
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string URLUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GetAppDependenciesResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal AppId[] GAppIDs
internal UInt32 NumAppDependencies
internal UInt32 TotalNumAppDependencies
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GetAuthSessionTicketResponse_t : ValueType {
internal UInt32 AuthTicket
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GetOPFSettingsResult_t : ValueType {
internal Result Result
internal AppId VideoAppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GetTicketForWebApiResponse_t : ValueType {
internal UInt32 AuthTicket
internal Result Result
internal int Ticket
internal Byte[] GubTicket
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GetUserItemVoteResult_t : ValueType {
internal PublishedFileId PublishedFileId
internal Result Result
internal bool VotedUp
internal bool VotedDown
internal bool VoteSkipped
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GetVideoURLResult_t : ValueType {
internal Result Result
internal AppId VideoAppID
internal Byte[] URL
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string URLUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GlobalAchievementPercentagesReady_t : ValueType {
internal ulong GameID
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GlobalStatsReceived_t : ValueType {
internal ulong GameID
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSClientAchievementStatus_t : ValueType {
internal ulong SteamID
internal Byte[] PchAchievement
internal bool Unlocked
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string PchAchievementUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSClientApprove_t : ValueType {
internal ulong SteamID
internal ulong OwnerSteamID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSClientDeny_t : ValueType {
internal ulong SteamID
internal DenyReason DenyReason
internal Byte[] OptionalText
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string OptionalTextUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSClientGroupStatus_t : ValueType {
internal ulong SteamIDUser
internal ulong SteamIDGroup
internal bool Member
internal bool Officer
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSClientKick_t : ValueType {
internal ulong SteamID
internal DenyReason DenyReason
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSGameplayStats_t : ValueType {
internal Result Result
internal int Rank
internal UInt32 TotalConnects
internal UInt32 TotalMinutesPlayed
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSPolicyResponse_t : ValueType {
internal byte Secure
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSReputation_t : ValueType {
internal Result Result
internal UInt32 ReputationScore
internal bool Banned
internal UInt32 BannedIP
internal ushort BannedPort
internal ulong BannedGameID
internal UInt32 BanExpires
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSStatsReceived_t : ValueType {
internal Result Result
internal ulong SteamIDUser
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSStatsStored_t : ValueType {
internal Result Result
internal ulong SteamIDUser
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.GSStatsUnloaded_t : ValueType {
internal ulong SteamIDUser
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HAuthTicket : ValueType {
public UInt32 Value
public HAuthTicket op_Implicit(UInt32 value)
public UInt32 op_Implicit(HAuthTicket value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(HAuthTicket p)
public bool op_Equality(HAuthTicket a, HAuthTicket b)
public bool op_Inequality(HAuthTicket a, HAuthTicket b)
public int CompareTo(HAuthTicket other)
}
internal Steamworks.Data.HHTMLBrowser : ValueType {
public UInt32 Value
public HHTMLBrowser op_Implicit(UInt32 value)
public UInt32 op_Implicit(HHTMLBrowser value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(HHTMLBrowser p)
public bool op_Equality(HHTMLBrowser a, HHTMLBrowser b)
public bool op_Inequality(HHTMLBrowser a, HHTMLBrowser b)
public int CompareTo(HHTMLBrowser other)
}
internal Steamworks.Data.HServerListRequest : ValueType {
public IntPtr Value
public HServerListRequest op_Implicit(IntPtr value)
public IntPtr op_Implicit(HServerListRequest value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(HServerListRequest p)
public bool op_Equality(HServerListRequest a, HServerListRequest b)
public bool op_Inequality(HServerListRequest a, HServerListRequest b)
public int CompareTo(HServerListRequest other)
}
internal Steamworks.Data.HServerQuery : ValueType {
public int Value
public HServerQuery op_Implicit(int value)
public int op_Implicit(HServerQuery value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(HServerQuery p)
public bool op_Equality(HServerQuery a, HServerQuery b)
public bool op_Inequality(HServerQuery a, HServerQuery b)
public int CompareTo(HServerQuery other)
}
internal Steamworks.Data.HSteamNetPollGroup : ValueType {
public UInt32 Value
public HSteamNetPollGroup op_Implicit(UInt32 value)
public UInt32 op_Implicit(HSteamNetPollGroup value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(HSteamNetPollGroup p)
public bool op_Equality(HSteamNetPollGroup a, HSteamNetPollGroup b)
public bool op_Inequality(HSteamNetPollGroup a, HSteamNetPollGroup b)
public int CompareTo(HSteamNetPollGroup other)
}
internal Steamworks.Data.HSteamPipe : ValueType {
public int Value
public HSteamPipe op_Implicit(int value)
public int op_Implicit(HSteamPipe value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(HSteamPipe p)
public bool op_Equality(HSteamPipe a, HSteamPipe b)
public bool op_Inequality(HSteamPipe a, HSteamPipe b)
public int CompareTo(HSteamPipe other)
}
internal Steamworks.Data.HSteamUser : ValueType {
public int Value
public HSteamUser op_Implicit(int value)
public int op_Implicit(HSteamUser value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(HSteamUser p)
public bool op_Equality(HSteamUser a, HSteamUser b)
public bool op_Inequality(HSteamUser a, HSteamUser b)
public int CompareTo(HSteamUser other)
}
internal Steamworks.Data.HTML_BrowserReady_t : ValueType {
internal UInt32 UnBrowserHandle
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_BrowserRestarted_t : ValueType {
internal UInt32 UnBrowserHandle
internal UInt32 UnOldBrowserHandle
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_CanGoBackAndForward_t : ValueType {
internal UInt32 UnBrowserHandle
internal bool BCanGoBack
internal bool BCanGoForward
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_ChangedTitle_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchTitle
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_CloseBrowser_t : ValueType {
internal UInt32 UnBrowserHandle
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_FileOpenDialog_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchTitle
internal string PchInitialFile
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_FinishedRequest_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchURL
internal string PchPageTitle
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_HideToolTip_t : ValueType {
internal UInt32 UnBrowserHandle
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_HorizontalScroll_t : ValueType {
internal UInt32 UnBrowserHandle
internal UInt32 UnScrollMax
internal UInt32 UnScrollCurrent
internal float FlPageScale
internal bool BVisible
internal UInt32 UnPageSize
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_JSAlert_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchMessage
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_JSConfirm_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchMessage
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_LinkAtPosition_t : ValueType {
internal UInt32 UnBrowserHandle
internal UInt32 X
internal UInt32 Y
internal string PchURL
internal bool BInput
internal bool BLiveLink
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_NeedsPaint_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PBGRA
internal UInt32 UnWide
internal UInt32 UnTall
internal UInt32 UnUpdateX
internal UInt32 UnUpdateY
internal UInt32 UnUpdateWide
internal UInt32 UnUpdateTall
internal UInt32 UnScrollX
internal UInt32 UnScrollY
internal float FlPageScale
internal UInt32 UnPageSerial
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_NewWindow_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchURL
internal UInt32 UnX
internal UInt32 UnY
internal UInt32 UnWide
internal UInt32 UnTall
internal UInt32 UnNewWindow_BrowserHandle_IGNORE
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_OpenLinkInNewTab_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchURL
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_SearchResults_t : ValueType {
internal UInt32 UnBrowserHandle
internal UInt32 UnResults
internal UInt32 UnCurrentMatch
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_SetCursor_t : ValueType {
internal UInt32 UnBrowserHandle
internal UInt32 EMouseCursor
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_ShowToolTip_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchMsg
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_StartRequest_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchURL
internal string PchTarget
internal string PchPostData
internal bool BIsRedirect
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_StatusText_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchMsg
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_UpdateToolTip_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchMsg
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_URLChanged_t : ValueType {
internal UInt32 UnBrowserHandle
internal string PchURL
internal string PchPostData
internal bool BIsRedirect
internal string PchPageTitle
internal bool BNewNavigation
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTML_VerticalScroll_t : ValueType {
internal UInt32 UnBrowserHandle
internal UInt32 UnScrollMax
internal UInt32 UnScrollCurrent
internal float FlPageScale
internal bool BVisible
internal UInt32 UnPageSize
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTTPCookieContainerHandle : ValueType {
public UInt32 Value
public HTTPCookieContainerHandle op_Implicit(UInt32 value)
public UInt32 op_Implicit(HTTPCookieContainerHandle value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(HTTPCookieContainerHandle p)
public bool op_Equality(HTTPCookieContainerHandle a, HTTPCookieContainerHandle b)
public bool op_Inequality(HTTPCookieContainerHandle a, HTTPCookieContainerHandle b)
public int CompareTo(HTTPCookieContainerHandle other)
}
internal Steamworks.Data.HTTPRequestCompleted_t : ValueType {
internal UInt32 Request
internal ulong ContextValue
internal bool RequestSuccessful
internal HTTPStatusCode StatusCode
internal UInt32 BodySize
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTTPRequestDataReceived_t : ValueType {
internal UInt32 Request
internal ulong ContextValue
internal UInt32 COffset
internal UInt32 CBytesReceived
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.HTTPRequestHandle : ValueType {
public UInt32 Value
public HTTPRequestHandle op_Implicit(UInt32 value)
public UInt32 op_Implicit(HTTPRequestHandle value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(HTTPRequestHandle p)
public bool op_Equality(HTTPRequestHandle a, HTTPRequestHandle b)
public bool op_Inequality(HTTPRequestHandle a, HTTPRequestHandle b)
public int CompareTo(HTTPRequestHandle other)
}
internal Steamworks.Data.HTTPRequestHeadersReceived_t : ValueType {
internal UInt32 Request
internal ulong ContextValue
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.Image : ValueType {
public UInt32 Width
public UInt32 Height
public Byte[] Data
public Color GetPixel(int x, int y)
public string ToString()
}
internal Steamworks.Data.InputActionSetHandle_t : ValueType {
public ulong Value
public InputActionSetHandle_t op_Implicit(ulong value)
public ulong op_Implicit(InputActionSetHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(InputActionSetHandle_t p)
public bool op_Equality(InputActionSetHandle_t a, InputActionSetHandle_t b)
public bool op_Inequality(InputActionSetHandle_t a, InputActionSetHandle_t b)
public int CompareTo(InputActionSetHandle_t other)
}
internal Steamworks.Data.InputAnalogActionHandle_t : ValueType {
public ulong Value
public InputAnalogActionHandle_t op_Implicit(ulong value)
public ulong op_Implicit(InputAnalogActionHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(InputAnalogActionHandle_t p)
public bool op_Equality(InputAnalogActionHandle_t a, InputAnalogActionHandle_t b)
public bool op_Inequality(InputAnalogActionHandle_t a, InputAnalogActionHandle_t b)
public int CompareTo(InputAnalogActionHandle_t other)
}
internal Steamworks.Data.InputDigitalActionHandle_t : ValueType {
public ulong Value
public InputDigitalActionHandle_t op_Implicit(ulong value)
public ulong op_Implicit(InputDigitalActionHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(InputDigitalActionHandle_t p)
public bool op_Equality(InputDigitalActionHandle_t a, InputDigitalActionHandle_t b)
public bool op_Inequality(InputDigitalActionHandle_t a, InputDigitalActionHandle_t b)
public int CompareTo(InputDigitalActionHandle_t other)
}
internal Steamworks.Data.InputHandle_t : ValueType {
public ulong Value
public InputHandle_t op_Implicit(ulong value)
public ulong op_Implicit(InputHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(InputHandle_t p)
public bool op_Equality(InputHandle_t a, InputHandle_t b)
public bool op_Inequality(InputHandle_t a, InputHandle_t b)
public int CompareTo(InputHandle_t other)
}
internal Steamworks.Data.InputMotionDataV2_t : ValueType {
internal float DriftCorrectedQuatX
internal float DriftCorrectedQuatY
internal float DriftCorrectedQuatZ
internal float DriftCorrectedQuatW
internal float SensorFusionQuatX
internal float SensorFusionQuatY
internal float SensorFusionQuatZ
internal float SensorFusionQuatW
internal float DeferredSensorFusionQuatX
internal float DeferredSensorFusionQuatY
internal float DeferredSensorFusionQuatZ
internal float DeferredSensorFusionQuatW
internal float GravityX
internal float GravityY
internal float GravityZ
internal float DegreesPerSecondX
internal float DegreesPerSecondY
internal float DegreesPerSecondZ
}
public Steamworks.Data.InventoryDefId : ValueType {
public int Value
public InventoryDefId op_Implicit(int value)
public int op_Implicit(InventoryDefId value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(InventoryDefId p)
public bool op_Equality(InventoryDefId a, InventoryDefId b)
public bool op_Inequality(InventoryDefId a, InventoryDefId b)
public int CompareTo(InventoryDefId other)
}
public Steamworks.Data.InventoryItemId : ValueType {
public ulong Value
public InventoryItemId op_Implicit(ulong value)
public ulong op_Implicit(InventoryItemId value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(InventoryItemId p)
public bool op_Equality(InventoryItemId a, InventoryItemId b)
public bool op_Inequality(InventoryItemId a, InventoryItemId b)
public int CompareTo(InventoryItemId other)
}
public Steamworks.Data.InventoryPurchaseResult : ValueType {
public Result Result
public ulong OrderID
public ulong TransID
}
internal Steamworks.Data.IPCFailure_t : ValueType {
internal byte FailureType
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.IPCountry_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.ItemInstalled_t : ValueType {
internal AppId AppID
internal PublishedFileId PublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.JoinClanChatRoomCompletionResult_t : ValueType {
internal ulong SteamIDClanChat
internal RoomEnter ChatRoomEnterResponse
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.JoinPartyCallback_t : ValueType {
internal Result Result
internal ulong BeaconID
internal ulong SteamIDBeaconOwner
internal Byte[] ConnectString
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string ConnectStringUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.Leaderboard : ValueType {
internal SteamLeaderboard_t Id
private Int32[] detailsBuffer
private Int32[] noDetails
public string Name
public LeaderboardSort Sort
public LeaderboardDisplay Display
public int EntryCount
public string get_Name()
public LeaderboardSort get_Sort()
public LeaderboardDisplay get_Display()
public int get_EntryCount()
public Task`1<Nullable`1<LeaderboardUpdate>> ReplaceScore(int score, Int32[] details)
public Task`1<Nullable`1<LeaderboardUpdate>> SubmitScoreAsync(int score, Int32[] details)
public Task`1<Result> AttachUgc(Ugc file)
public Task`1<LeaderboardEntry[]> GetScoresForUsersAsync(SteamId[] users)
public Task`1<LeaderboardEntry[]> GetScoresAsync(int count, int offset)
public Task`1<LeaderboardEntry[]> GetScoresAroundUserAsync(int start, int end)
public Task`1<LeaderboardEntry[]> GetScoresFromFriendsAsync()
internal Task`1<LeaderboardEntry[]> LeaderboardResultToEntries(LeaderboardScoresDownloaded_t r)
internal Task WaitForUserNames(LeaderboardEntry[] entries)
}
public Steamworks.Data.LeaderboardDisplay : Enum {
public int value__
public LeaderboardDisplay Numeric
public LeaderboardDisplay TimeSeconds
public LeaderboardDisplay TimeMilliSeconds
}
public Steamworks.Data.LeaderboardEntry : ValueType {
public Friend User
public int GlobalRank
public int Score
public Int32[] Details
internal LeaderboardEntry From(LeaderboardEntry_t e, Int32[] detailsBuffer)
}
internal Steamworks.Data.LeaderboardEntry_t : ValueType {
internal ulong SteamIDUser
internal int GlobalRank
internal int Score
internal int CDetails
internal ulong UGC
}
internal Steamworks.Data.LeaderboardFindResult_t : ValueType {
internal ulong SteamLeaderboard
internal byte LeaderboardFound
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LeaderboardScoresDownloaded_t : ValueType {
internal ulong SteamLeaderboard
internal ulong SteamLeaderboardEntries
internal int CEntryCount
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LeaderboardScoreUploaded_t : ValueType {
internal byte Success
internal ulong SteamLeaderboard
internal int Score
internal byte ScoreChanged
internal int GlobalRankNew
internal int GlobalRankPrevious
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.LeaderboardSort : Enum {
public int value__
public LeaderboardSort Ascending
public LeaderboardSort Descending
}
internal Steamworks.Data.LeaderboardUGCSet_t : ValueType {
internal Result Result
internal ulong SteamLeaderboard
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.LeaderboardUpdate : ValueType {
public int Score
public bool Changed
public int NewGlobalRank
public int OldGlobalRank
public int RankChange
public int get_RankChange()
internal LeaderboardUpdate From(LeaderboardScoreUploaded_t e)
}
internal Steamworks.Data.LicensesUpdated_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.Lobby : ValueType {
private SteamId <Id>k__BackingField
public SteamId Id
public int MemberCount
public IEnumerable`1<Friend> Members
public IEnumerable`1<KeyValuePair`2<string, string>> Data
public int MaxMembers
public Friend Owner
public SteamId get_Id()
internal void set_Id(SteamId value)
public void .ctor(SteamId id)
public Task`1<RoomEnter> Join()
public void Leave()
public bool InviteFriend(SteamId steamid)
public int get_MemberCount()
public IEnumerable`1<Friend> get_Members()
public string GetData(string key)
public bool SetData(string key, string value)
public bool DeleteData(string key)
public IEnumerable`1<KeyValuePair`2<string, string>> get_Data()
public string GetMemberData(Friend member, string key)
public void SetMemberData(string key, string value)
public bool SendChatString(string message)
public bool SendChatBytes(Byte[] data)
public bool SendChatBytesUnsafe(Byte* ptr, int length)
public bool Refresh()
public int get_MaxMembers()
public void set_MaxMembers(int value)
public bool SetPublic()
public bool SetPrivate()
public bool SetInvisible()
public bool SetFriendsOnly()
public bool SetJoinable(bool b)
public void SetGameServer(SteamId steamServer)
public void SetGameServer(string ip, ushort port)
public bool GetGameServer(UInt32& ip, UInt16& port, SteamId& serverId)
public Friend get_Owner()
public void set_Owner(Friend value)
public bool IsOwnedBy(SteamId k)
}
internal Steamworks.Data.LobbyChatMsg_t : ValueType {
internal ulong SteamIDLobby
internal ulong SteamIDUser
internal byte ChatEntryType
internal UInt32 ChatID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LobbyChatUpdate_t : ValueType {
internal ulong SteamIDLobby
internal ulong SteamIDUserChanged
internal ulong SteamIDMakingChange
internal UInt32 GfChatMemberStateChange
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LobbyCreated_t : ValueType {
internal Result Result
internal ulong SteamIDLobby
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LobbyDataUpdate_t : ValueType {
internal ulong SteamIDLobby
internal ulong SteamIDMember
internal byte Success
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LobbyEnter_t : ValueType {
internal ulong SteamIDLobby
internal UInt32 GfChatPermissions
internal bool Locked
internal UInt32 EChatRoomEnterResponse
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LobbyGameCreated_t : ValueType {
internal ulong SteamIDLobby
internal ulong SteamIDGameServer
internal UInt32 IP
internal ushort Port
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LobbyInvite_t : ValueType {
internal ulong SteamIDUser
internal ulong SteamIDLobby
internal ulong GameID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LobbyKicked_t : ValueType {
internal ulong SteamIDLobby
internal ulong SteamIDAdmin
internal byte KickedDueToDisconnect
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.LobbyMatchList_t : ValueType {
internal UInt32 LobbiesMatching
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.LobbyQuery : ValueType {
internal Nullable`1<LobbyDistanceFilter> distance
internal Dictionary`2<string, string> stringFilters
internal List`1<NumericalFilter> numericalFilters
internal Dictionary`2<string, int> nearValFilters
internal Nullable`1<int> slotsAvailable
internal Nullable`1<int> maxResults
public LobbyQuery FilterDistanceClose()
public LobbyQuery FilterDistanceFar()
public LobbyQuery FilterDistanceWorldwide()
public LobbyQuery WithKeyValue(string key, string value)
public LobbyQuery WithLower(string key, int value)
public LobbyQuery WithHigher(string key, int value)
public LobbyQuery WithEqual(string key, int value)
public LobbyQuery WithNotEqual(string key, int value)
internal void AddNumericalFilter(string key, int value, LobbyComparison compare)
public LobbyQuery OrderByNear(string key, int value)
public LobbyQuery WithSlotsAvailable(int minSlots)
public LobbyQuery WithMaxResults(int max)
private void ApplyFilters()
public Task`1<Lobby[]> RequestAsync()
}
internal Steamworks.Data.LowBatteryPower_t : ValueType {
internal byte MinutesBatteryLeft
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MarketEligibilityResponse_t : ValueType {
internal bool Allowed
internal MarketNotAllowedReasonFlags NotAllowedReason
internal UInt32 TAllowedAtTime
internal int CdaySteamGuardRequiredDays
internal int CdayNewDeviceCooldown
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MatchMakingKeyValuePair : ValueType {
internal string Key
internal string Value
internal void InternalConstruct(MatchMakingKeyValuePair& self)
}
internal Steamworks.Data.MicroTxnAuthorizationResponse_t : ValueType {
internal UInt32 AppID
internal ulong OrderID
internal byte Authorized
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerRemoteToFront_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerRemoteWillActivate_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerRemoteWillDeactivate_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerSelectsPlaylistEntry_t : ValueType {
internal int NID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerSelectsQueueEntry_t : ValueType {
internal int NID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerWantsLooped_t : ValueType {
internal bool Looped
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerWantsPause_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerWantsPlay_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerWantsPlayingRepeatStatus_t : ValueType {
internal int PlayingRepeatStatus
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerWantsPlayNext_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerWantsPlayPrevious_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerWantsShuffled_t : ValueType {
internal bool Shuffled
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerWantsVolume_t : ValueType {
internal float NewVolume
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.MusicPlayerWillQuit_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.NetAddress : ValueType {
internal IPV4 ip
internal ushort port
public ushort Port
public NetAddress Cleared
public bool IsIPv6AllZeros
public bool IsIPv4
public bool IsFakeIPv4
public bool IsLocalHost
public IPAddress Address
internal void InternalClear(NetAddress& self)
internal bool InternalIsIPv6AllZeros(NetAddress& self)
internal void InternalSetIPv6(NetAddress& self, Byte& ipv6, ushort nPort)
internal void InternalSetIPv4(NetAddress& self, UInt32 nIP, ushort nPort)
internal bool InternalIsIPv4(NetAddress& self)
internal UInt32 InternalGetIPv4(NetAddress& self)
internal void InternalSetIPv6LocalHost(NetAddress& self, ushort nPort)
internal bool InternalIsLocalHost(NetAddress& self)
internal void InternalToString(NetAddress& self, IntPtr buf, UInt32 cbBuf, bool bWithPort)
internal bool InternalParseString(NetAddress& self, string pszStr)
internal bool InternalIsEqualTo(NetAddress& self, NetAddress& x)
internal SteamNetworkingFakeIPType InternalGetFakeIPType(NetAddress& self)
internal bool InternalIsFakeIP(NetAddress& self)
public ushort get_Port()
public NetAddress AnyIp(ushort port)
public NetAddress LocalHost(ushort port)
public NetAddress From(string addrStr, ushort port)
public NetAddress From(IPAddress address, ushort port)
public NetAddress get_Cleared()
public bool get_IsIPv6AllZeros()
public bool get_IsIPv4()
public bool get_IsFakeIPv4()
public bool get_IsLocalHost()
public IPAddress get_Address()
public string ToString()
}
internal Steamworks.Data.NetErrorMessage : ValueType {
public <Value>e__FixedBuffer Value
}
public Steamworks.Data.NetIdentity : ValueType {
internal IdentityType type
internal int size
internal ulong steamid
internal NetAddress netaddress
public NetIdentity LocalHost
public bool IsSteamId
public bool IsIpAddress
public bool IsLocalHost
public SteamId SteamId
public NetAddress Address
internal void InternalClear(NetIdentity& self)
internal bool InternalIsInvalid(NetIdentity& self)
internal void InternalSetSteamID(NetIdentity& self, SteamId steamID)
internal SteamId InternalGetSteamID(NetIdentity& self)
internal void InternalSetSteamID64(NetIdentity& self, ulong steamID)
internal ulong InternalGetSteamID64(NetIdentity& self)
internal bool InternalSetXboxPairwiseID(NetIdentity& self, string pszString)
internal Utf8StringPointer InternalGetXboxPairwiseID(NetIdentity& self)
internal void InternalSetPSNID(NetIdentity& self, ulong id)
internal ulong InternalGetPSNID(NetIdentity& self)
internal void InternalSetStadiaID(NetIdentity& self, ulong id)
internal ulong InternalGetStadiaID(NetIdentity& self)
internal void InternalSetIPAddr(NetIdentity& self, NetAddress& addr)
internal IntPtr InternalGetIPAddr(NetIdentity& self)
internal void InternalSetIPv4Addr(NetIdentity& self, UInt32 nIPv4, ushort nPort)
internal UInt32 InternalGetIPv4(NetIdentity& self)
internal SteamNetworkingFakeIPType InternalGetFakeIPType(NetIdentity& self)
internal bool InternalIsFakeIP(NetIdentity& self)
internal void InternalSetLocalHost(NetIdentity& self)
internal bool InternalIsLocalHost(NetIdentity& self)
internal bool InternalSetGenericString(NetIdentity& self, string pszString)
internal Utf8StringPointer InternalGetGenericString(NetIdentity& self)
internal bool InternalSetGenericBytes(NetIdentity& self, IntPtr data, UInt32 cbLen)
internal byte InternalGetGenericBytes(NetIdentity& self, Int32& cbLen)
internal bool InternalIsEqualTo(NetIdentity& self, NetIdentity& x)
internal void InternalToString(NetIdentity& self, IntPtr buf, UInt32 cbBuf)
internal bool InternalParseString(NetIdentity& self, string pszStr)
public NetIdentity get_LocalHost()
public bool get_IsSteamId()
public bool get_IsIpAddress()
public bool get_IsLocalHost()
public NetIdentity op_Implicit(SteamId value)
public NetIdentity op_Implicit(NetAddress address)
public SteamId op_Implicit(NetIdentity value)
public SteamId get_SteamId()
public NetAddress get_Address()
public string ToString()
}
internal Steamworks.Data.NetKeyValue : ValueType {
internal NetConfig Value
internal NetConfigType DataType
internal long Int64Value
internal int Int32Value
internal float FloatValue
internal IntPtr PointerValue
internal void InternalSetInt32(NetKeyValue& self, NetConfig eVal, int data)
internal void InternalSetInt64(NetKeyValue& self, NetConfig eVal, long data)
internal void InternalSetFloat(NetKeyValue& self, NetConfig eVal, float data)
internal void InternalSetPtr(NetKeyValue& self, NetConfig eVal, IntPtr data)
internal void InternalSetString(NetKeyValue& self, NetConfig eVal, string data)
}
internal Steamworks.Data.NetMsg : ValueType {
internal IntPtr DataPtr
internal int DataSize
internal Connection Connection
internal NetIdentity Identity
internal long ConnectionUserData
internal long RecvTime
internal long MessageNumber
internal IntPtr FreeDataPtr
internal IntPtr ReleasePtr
internal int Channel
internal SendType Flags
internal long UserData
internal ushort IdxLane
internal ushort _pad1__
internal void InternalRelease(NetMsg* self)
}
public Steamworks.Data.NetPingLocation : ValueType {
public Nullable`1<NetPingLocation> TryParseFromString(string str)
public string ToString()
public int EstimatePingTo(NetPingLocation target)
}
internal Steamworks.Data.NewUrlLaunchParameters_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.NumberOfCurrentPlayers_t : ValueType {
internal byte Success
internal int CPlayers
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.NumericalFilter : ValueType {
private string <Key>k__BackingField
private int <Value>k__BackingField
private LobbyComparison <Comparer>k__BackingField
public string Key
public int Value
public LobbyComparison Comparer
public string get_Key()
internal void set_Key(string value)
public int get_Value()
internal void set_Value(int value)
public LobbyComparison get_Comparer()
internal void set_Comparer(LobbyComparison value)
internal void .ctor(string k, int v, LobbyComparison c)
}
public Steamworks.Data.OutgoingPacket : ValueType {
private UInt32 <Address>k__BackingField
private ushort <Port>k__BackingField
private Byte[] <Data>k__BackingField
private int <Size>k__BackingField
public UInt32 Address
public ushort Port
public Byte[] Data
public int Size
public UInt32 get_Address()
internal void set_Address(UInt32 value)
public ushort get_Port()
internal void set_Port(ushort value)
public Byte[] get_Data()
internal void set_Data(Byte[] value)
public int get_Size()
internal void set_Size(int value)
}
internal Steamworks.Data.OverlayBrowserProtocolNavigation_t : ValueType {
internal Byte[] RgchURI
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string RgchURIUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.P2Packet : ValueType {
public SteamId SteamId
public Byte[] Data
}
internal Steamworks.Data.P2PSessionConnectFail_t : ValueType {
internal ulong SteamIDRemote
internal byte P2PSessionError
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.P2PSessionRequest_t : ValueType {
internal ulong SteamIDRemote
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.P2PSessionState_t : ValueType {
internal byte ConnectionActive
internal byte Connecting
internal byte P2PSessionError
internal byte UsingRelay
internal int BytesQueuedForSend
internal int PacketsQueuedForSend
internal UInt32 RemoteIP
internal ushort RemotePort
}
internal Steamworks.Data.PartyBeaconID_t : ValueType {
public ulong Value
public PartyBeaconID_t op_Implicit(ulong value)
public ulong op_Implicit(PartyBeaconID_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(PartyBeaconID_t p)
public bool op_Equality(PartyBeaconID_t a, PartyBeaconID_t b)
public bool op_Inequality(PartyBeaconID_t a, PartyBeaconID_t b)
public int CompareTo(PartyBeaconID_t other)
}
internal Steamworks.Data.PersonaStateChange_t : ValueType {
internal ulong SteamID
internal int ChangeFlags
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.PlaybackStatusHasChanged_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.PSNGameBootInviteResult_t : ValueType {
internal bool GameBootInviteExists
internal ulong SteamIDLobby
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.PublishedFileId : ValueType {
public ulong Value
public PublishedFileId op_Implicit(ulong value)
public ulong op_Implicit(PublishedFileId value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(PublishedFileId p)
public bool op_Equality(PublishedFileId a, PublishedFileId b)
public bool op_Inequality(PublishedFileId a, PublishedFileId b)
public int CompareTo(PublishedFileId other)
}
internal Steamworks.Data.PublishedFileUpdateHandle_t : ValueType {
public ulong Value
public PublishedFileUpdateHandle_t op_Implicit(ulong value)
public ulong op_Implicit(PublishedFileUpdateHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(PublishedFileUpdateHandle_t p)
public bool op_Equality(PublishedFileUpdateHandle_t a, PublishedFileUpdateHandle_t b)
public bool op_Inequality(PublishedFileUpdateHandle_t a, PublishedFileUpdateHandle_t b)
public int CompareTo(PublishedFileUpdateHandle_t other)
}
public Steamworks.Data.RemotePlaySession : ValueType {
private UInt32 <Id>k__BackingField
public UInt32 Id
public bool IsValid
public SteamId SteamId
public string ClientName
public SteamDeviceFormFactor FormFactor
public UInt32 get_Id()
public void set_Id(UInt32 value)
public string ToString()
public RemotePlaySession op_Implicit(UInt32 value)
public UInt32 op_Implicit(RemotePlaySession value)
public bool get_IsValid()
public SteamId get_SteamId()
public string get_ClientName()
public SteamDeviceFormFactor get_FormFactor()
}
internal Steamworks.Data.RemotePlaySessionID_t : ValueType {
public UInt32 Value
public RemotePlaySessionID_t op_Implicit(UInt32 value)
public UInt32 op_Implicit(RemotePlaySessionID_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(RemotePlaySessionID_t p)
public bool op_Equality(RemotePlaySessionID_t a, RemotePlaySessionID_t b)
public bool op_Inequality(RemotePlaySessionID_t a, RemotePlaySessionID_t b)
public int CompareTo(RemotePlaySessionID_t other)
}
internal Steamworks.Data.RemoteStorageDeletePublishedFileResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageDownloadUGCResult_t : ValueType {
internal Result Result
internal ulong File
internal AppId AppID
internal int SizeInBytes
internal Byte[] PchFileName
internal ulong SteamIDOwner
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string PchFileNameUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageEnumeratePublishedFilesByUserActionResult_t : ValueType {
internal Result Result
internal WorkshopFileAction Action
internal int ResultsReturned
internal int TotalResultCount
internal PublishedFileId[] GPublishedFileId
internal UInt32[] GRTimeUpdated
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageEnumerateUserPublishedFilesResult_t : ValueType {
internal Result Result
internal int ResultsReturned
internal int TotalResultCount
internal PublishedFileId[] GPublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageEnumerateUserSharedWorkshopFilesResult_t : ValueType {
internal Result Result
internal int ResultsReturned
internal int TotalResultCount
internal PublishedFileId[] GPublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageEnumerateUserSubscribedFilesResult_t : ValueType {
internal Result Result
internal int ResultsReturned
internal int TotalResultCount
internal PublishedFileId[] GPublishedFileId
internal UInt32[] GRTimeSubscribed
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageEnumerateWorkshopFilesResult_t : ValueType {
internal Result Result
internal int ResultsReturned
internal int TotalResultCount
internal PublishedFileId[] GPublishedFileId
internal Single[] GScore
internal AppId AppId
internal UInt32 StartIndex
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageFileReadAsyncComplete_t : ValueType {
internal ulong FileReadAsync
internal Result Result
internal UInt32 Offset
internal UInt32 Read
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageFileShareResult_t : ValueType {
internal Result Result
internal ulong File
internal Byte[] Filename
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string FilenameUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageFileWriteAsyncComplete_t : ValueType {
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageGetPublishedFileDetailsResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal AppId CreatorAppID
internal AppId ConsumerAppID
internal Byte[] Title
internal Byte[] Description
internal ulong File
internal ulong PreviewFile
internal ulong SteamIDOwner
internal UInt32 TimeCreated
internal UInt32 TimeUpdated
internal RemoteStoragePublishedFileVisibility Visibility
internal bool Banned
internal Byte[] Tags
internal bool TagsTruncated
internal Byte[] PchFileName
internal int FileSize
internal int PreviewFileSize
internal Byte[] URL
internal WorkshopFileType FileType
internal bool AcceptedForUse
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string TitleUTF8()
internal string DescriptionUTF8()
internal string TagsUTF8()
internal string PchFileNameUTF8()
internal string URLUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageGetPublishedItemVoteDetailsResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal int VotesFor
internal int VotesAgainst
internal int Reports
internal float FScore
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageLocalFileChange_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStoragePublishedFileDeleted_t : ValueType {
internal PublishedFileId PublishedFileId
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStoragePublishedFileSubscribed_t : ValueType {
internal PublishedFileId PublishedFileId
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStoragePublishedFileUnsubscribed_t : ValueType {
internal PublishedFileId PublishedFileId
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStoragePublishedFileUpdated_t : ValueType {
internal PublishedFileId PublishedFileId
internal AppId AppID
internal ulong Unused
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStoragePublishFileProgress_t : ValueType {
internal double DPercentFile
internal bool Preview
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStoragePublishFileResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal bool UserNeedsToAcceptWorkshopLegalAgreement
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageSetUserPublishedFileActionResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal WorkshopFileAction Action
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageSubscribePublishedFileResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageUnsubscribePublishedFileResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageUpdatePublishedFileResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal bool UserNeedsToAcceptWorkshopLegalAgreement
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageUpdateUserPublishedItemVoteResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoteStorageUserVoteDetails_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal WorkshopVote Vote
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoveAppDependencyResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RemoveUGCDependencyResult_t : ValueType {
internal Result Result
internal PublishedFileId PublishedFileId
internal PublishedFileId ChildPublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RequestPlayersForGameFinalResultCallback_t : ValueType {
internal Result Result
internal ulong LSearchID
internal ulong LUniqueGameID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RequestPlayersForGameProgressCallback_t : ValueType {
internal Result Result
internal ulong LSearchID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RequestPlayersForGameResultCallback_t : ValueType {
internal Result Result
internal ulong LSearchID
internal ulong SteamIDPlayerFound
internal ulong SteamIDLobby
internal PlayerAcceptState_t PlayerAcceptState
internal int PlayerIndex
internal int TotalPlayersFound
internal int TotalPlayersAcceptedGame
internal int SuggestedTeamIndex
internal ulong LUniqueGameID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.ReservationNotificationCallback_t : ValueType {
internal ulong BeaconID
internal ulong SteamIDJoiner
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.RTime32 : ValueType {
public UInt32 Value
public RTime32 op_Implicit(UInt32 value)
public UInt32 op_Implicit(RTime32 value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(RTime32 p)
public bool op_Equality(RTime32 a, RTime32 b)
public bool op_Inequality(RTime32 a, RTime32 b)
public int CompareTo(RTime32 other)
}
public Steamworks.Data.Screenshot : ValueType {
internal ScreenshotHandle Value
public bool TagUser(SteamId user)
public bool SetLocation(string location)
public bool TagPublishedFile(PublishedFileId file)
}
internal Steamworks.Data.ScreenshotHandle : ValueType {
public UInt32 Value
public ScreenshotHandle op_Implicit(UInt32 value)
public UInt32 op_Implicit(ScreenshotHandle value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(ScreenshotHandle p)
public bool op_Equality(ScreenshotHandle a, ScreenshotHandle b)
public bool op_Inequality(ScreenshotHandle a, ScreenshotHandle b)
public int CompareTo(ScreenshotHandle other)
}
internal Steamworks.Data.ScreenshotReady_t : ValueType {
internal UInt32 Local
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.ScreenshotRequested_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SearchForGameProgressCallback_t : ValueType {
internal ulong LSearchID
internal Result Result
internal ulong LobbyID
internal ulong SteamIDEndedSearch
internal int SecondsRemainingEstimate
internal int CPlayersSearching
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SearchForGameResultCallback_t : ValueType {
internal ulong LSearchID
internal Result Result
internal int CountPlayersInGame
internal int CountAcceptedGame
internal ulong SteamIDHost
internal bool FinalCallback
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.SendType : Enum {
public int value__
public SendType Unreliable
public SendType NoNagle
public SendType NoDelay
public SendType Reliable
}
public Steamworks.Data.ServerInfo : ValueType {
private string <Name>k__BackingField
private int <Ping>k__BackingField
private string <GameDir>k__BackingField
private string <Map>k__BackingField
private string <Description>k__BackingField
private UInt32 <AppId>k__BackingField
private int <Players>k__BackingField
private int <MaxPlayers>k__BackingField
private int <BotPlayers>k__BackingField
private bool <Passworded>k__BackingField
private bool <Secure>k__BackingField
private UInt32 <LastTimePlayed>k__BackingField
private int <Version>k__BackingField
private string <TagString>k__BackingField
private ulong <SteamId>k__BackingField
private UInt32 <AddressRaw>k__BackingField
private IPAddress <Address>k__BackingField
private int <ConnectionPort>k__BackingField
private int <QueryPort>k__BackingField
private String[] _tags
internal UInt32 k_unFavoriteFlagNone
internal UInt32 k_unFavoriteFlagFavorite
internal UInt32 k_unFavoriteFlagHistory
public string Name
public int Ping
public string GameDir
public string Map
public string Description
public UInt32 AppId
public int Players
public int MaxPlayers
public int BotPlayers
public bool Passworded
public bool Secure
public UInt32 LastTimePlayed
public int Version
public string TagString
public ulong SteamId
public UInt32 AddressRaw
public IPAddress Address
public int ConnectionPort
public int QueryPort
public String[] Tags
public string get_Name()
public void set_Name(string value)
public int get_Ping()
public void set_Ping(int value)
public string get_GameDir()
public void set_GameDir(string value)
public string get_Map()
public void set_Map(string value)
public string get_Description()
public void set_Description(string value)
public UInt32 get_AppId()
public void set_AppId(UInt32 value)
public int get_Players()
public void set_Players(int value)
public int get_MaxPlayers()
public void set_MaxPlayers(int value)
public int get_BotPlayers()
public void set_BotPlayers(int value)
public bool get_Passworded()
public void set_Passworded(bool value)
public bool get_Secure()
public void set_Secure(bool value)
public UInt32 get_LastTimePlayed()
public void set_LastTimePlayed(UInt32 value)
public int get_Version()
public void set_Version(int value)
public string get_TagString()
public void set_TagString(string value)
public ulong get_SteamId()
public void set_SteamId(ulong value)
public UInt32 get_AddressRaw()
public void set_AddressRaw(UInt32 value)
public IPAddress get_Address()
public void set_Address(IPAddress value)
public int get_ConnectionPort()
public void set_ConnectionPort(int value)
public int get_QueryPort()
public void set_QueryPort(int value)
public String[] get_Tags()
internal ServerInfo From(gameserveritem_t item)
public void .ctor(UInt32 ip, ushort cport, ushort qport, UInt32 timeplayed)
public void AddToHistory()
public Task`1<Dictionary`2<string, string>> QueryRulesAsync()
public void RemoveFromHistory()
public void AddToFavourites()
public void RemoveFromFavourites()
public bool Equals(ServerInfo other)
public int GetHashCode()
}
internal Steamworks.Data.servernetadr_t : ValueType {
internal ushort ConnectionPort
internal ushort QueryPort
internal UInt32 IP
internal void InternalConstruct(servernetadr_t& self)
internal void InternalInit(servernetadr_t& self, UInt32 ip, ushort usQueryPort, ushort usConnectionPort)
internal ushort InternalGetQueryPort(servernetadr_t& self)
internal void InternalSetQueryPort(servernetadr_t& self, ushort usPort)
internal ushort InternalGetConnectionPort(servernetadr_t& self)
internal void InternalSetConnectionPort(servernetadr_t& self, ushort usPort)
internal UInt32 InternalGetIP(servernetadr_t& self)
internal void InternalSetIP(servernetadr_t& self, UInt32 unIP)
internal Utf8StringPointer InternalGetConnectionAddressString(servernetadr_t& self)
internal Utf8StringPointer InternalGetQueryAddressString(servernetadr_t& self)
internal bool InternalIsLessThan(servernetadr_t& self, servernetadr_t& netadr)
internal void InternalAssign(servernetadr_t& self, servernetadr_t& that)
}
internal Steamworks.Data.SetPersonaNameResponse_t : ValueType {
internal bool Success
internal bool LocalSuccess
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SetUserItemVoteResult_t : ValueType {
internal PublishedFileId PublishedFileId
internal Result Result
internal bool VoteUp
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SNetListenSocket_t : ValueType {
public UInt32 Value
public SNetListenSocket_t op_Implicit(UInt32 value)
public UInt32 op_Implicit(SNetListenSocket_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(SNetListenSocket_t p)
public bool op_Equality(SNetListenSocket_t a, SNetListenSocket_t b)
public bool op_Inequality(SNetListenSocket_t a, SNetListenSocket_t b)
public int CompareTo(SNetListenSocket_t other)
}
internal Steamworks.Data.SNetSocket_t : ValueType {
public UInt32 Value
public SNetSocket_t op_Implicit(UInt32 value)
public UInt32 op_Implicit(SNetSocket_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(SNetSocket_t p)
public bool op_Equality(SNetSocket_t a, SNetSocket_t b)
public bool op_Inequality(SNetSocket_t a, SNetSocket_t b)
public int CompareTo(SNetSocket_t other)
}
public Steamworks.Data.Socket : ValueType {
internal UInt32 Id
public SocketManager Manager
public string ToString()
public Socket op_Implicit(UInt32 value)
public UInt32 op_Implicit(Socket value)
public bool Close()
public SocketManager get_Manager()
public void set_Manager(SocketManager value)
}
internal Steamworks.Data.StartPlaytimeTrackingResult_t : ValueType {
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.Stat : ValueType {
private string <Name>k__BackingField
private SteamId <UserId>k__BackingField
public string Name
public SteamId UserId
public string get_Name()
internal void set_Name(string value)
public SteamId get_UserId()
internal void set_UserId(SteamId value)
public void .ctor(string name)
public void .ctor(string name, SteamId user)
internal void LocalUserOnly(string caller)
public double GetGlobalFloat()
public long GetGlobalInt()
public Task`1<Int64[]> GetGlobalIntDaysAsync(int days)
public Task`1<Double[]> GetGlobalFloatDays(int days)
public float GetFloat()
public int GetInt()
public bool Set(int val)
public bool Set(float val)
public bool Add(int val)
public bool Add(float val)
public bool UpdateAverageRate(float count, float sessionlength)
public bool Store()
}
internal Steamworks.Data.SteamAPICall_t : ValueType {
public ulong Value
public SteamAPICall_t op_Implicit(ulong value)
public ulong op_Implicit(SteamAPICall_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(SteamAPICall_t p)
public bool op_Equality(SteamAPICall_t a, SteamAPICall_t b)
public bool op_Inequality(SteamAPICall_t a, SteamAPICall_t b)
public int CompareTo(SteamAPICall_t other)
}
internal Steamworks.Data.SteamAPICallCompleted_t : ValueType {
internal ulong AsyncCall
internal int Callback
internal UInt32 ParamCount
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamAppInstalled_t : ValueType {
internal AppId AppID
internal int InstallFolderIndex
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamAppUninstalled_t : ValueType {
internal AppId AppID
internal int InstallFolderIndex
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamDatagramGameCoordinatorServerLogin : ValueType {
internal NetIdentity Dentity
internal SteamDatagramHostedAddress Outing
internal AppId AppID
internal UInt32 Time
internal int CbAppData
internal Byte[] AppData
internal string AppDataUTF8()
}
internal Steamworks.Data.SteamDatagramHostedAddress : ValueType {
internal int CbSize
internal Byte[] Data
internal void InternalClear(SteamDatagramHostedAddress& self)
internal SteamNetworkingPOPID InternalGetPopID(SteamDatagramHostedAddress& self)
internal void InternalSetDevAddress(SteamDatagramHostedAddress& self, UInt32 nIP, ushort nPort, SteamNetworkingPOPID popid)
internal string DataUTF8()
}
internal Steamworks.Data.SteamInputActionEvent_t : ValueType {
internal ulong ControllerHandle
internal SteamInputActionEventType EEventType
}
internal Steamworks.Data.SteamInputConfigurationLoaded_t : ValueType {
internal AppId AppID
internal ulong DeviceHandle
internal ulong MappingCreator
internal UInt32 MajorRevision
internal UInt32 MinorRevision
internal bool UsesSteamInputAPI
internal bool UsesGamepadAPI
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInputDeviceConnected_t : ValueType {
internal ulong ConnectedDeviceHandle
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInputDeviceDisconnected_t : ValueType {
internal ulong DisconnectedDeviceHandle
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInputGamepadSlotChange_t : ValueType {
internal AppId AppID
internal ulong DeviceHandle
internal InputType DeviceType
internal int OldGamepadSlot
internal int NewGamepadSlot
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInventoryDefinitionUpdate_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInventoryEligiblePromoItemDefIDs_t : ValueType {
internal Result Result
internal ulong SteamID
internal int UmEligiblePromoItemDefs
internal bool CachedData
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInventoryFullUpdate_t : ValueType {
internal int Handle
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInventoryRequestPricesResult_t : ValueType {
internal Result Result
internal Byte[] Currency
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string CurrencyUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInventoryResult_t : ValueType {
public int Value
public SteamInventoryResult_t op_Implicit(int value)
public int op_Implicit(SteamInventoryResult_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(SteamInventoryResult_t p)
public bool op_Equality(SteamInventoryResult_t a, SteamInventoryResult_t b)
public bool op_Inequality(SteamInventoryResult_t a, SteamInventoryResult_t b)
public int CompareTo(SteamInventoryResult_t other)
}
internal Steamworks.Data.SteamInventoryResultReady_t : ValueType {
internal int Handle
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInventoryStartPurchaseResult_t : ValueType {
internal Result Result
internal ulong OrderID
internal ulong TransID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamInventoryUpdateHandle_t : ValueType {
public ulong Value
public SteamInventoryUpdateHandle_t op_Implicit(ulong value)
public ulong op_Implicit(SteamInventoryUpdateHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(SteamInventoryUpdateHandle_t p)
public bool op_Equality(SteamInventoryUpdateHandle_t a, SteamInventoryUpdateHandle_t b)
public bool op_Inequality(SteamInventoryUpdateHandle_t a, SteamInventoryUpdateHandle_t b)
public int CompareTo(SteamInventoryUpdateHandle_t other)
}
internal Steamworks.Data.SteamIPAddress : ValueType {
public UInt32 Ip4Address
internal SteamIPType Type
internal bool InternalIsSet(SteamIPAddress& self)
public IPAddress op_Implicit(SteamIPAddress value)
}
internal Steamworks.Data.SteamItemDetails_t : ValueType {
internal InventoryItemId ItemId
internal InventoryDefId Definition
internal ushort Quantity
internal ushort Flags
}
internal Steamworks.Data.SteamLeaderboard_t : ValueType {
public ulong Value
public SteamLeaderboard_t op_Implicit(ulong value)
public ulong op_Implicit(SteamLeaderboard_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(SteamLeaderboard_t p)
public bool op_Equality(SteamLeaderboard_t a, SteamLeaderboard_t b)
public bool op_Inequality(SteamLeaderboard_t a, SteamLeaderboard_t b)
public int CompareTo(SteamLeaderboard_t other)
}
internal Steamworks.Data.SteamLeaderboardEntries_t : ValueType {
public ulong Value
public SteamLeaderboardEntries_t op_Implicit(ulong value)
public ulong op_Implicit(SteamLeaderboardEntries_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(SteamLeaderboardEntries_t p)
public bool op_Equality(SteamLeaderboardEntries_t a, SteamLeaderboardEntries_t b)
public bool op_Inequality(SteamLeaderboardEntries_t a, SteamLeaderboardEntries_t b)
public int CompareTo(SteamLeaderboardEntries_t other)
}
internal Steamworks.Data.SteamNetAuthenticationStatus_t : ValueType {
internal SteamNetworkingAvailability Avail
internal Byte[] DebugMsg
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string DebugMsgUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamNetConnectionStatusChangedCallback_t : ValueType {
internal Connection Conn
internal ConnectionInfo Nfo
internal ConnectionState OldState
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamNetworkingFakeIPResult_t : ValueType {
internal Result Result
internal NetIdentity Dentity
internal UInt32 IP
internal UInt16[] Ports
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamNetworkingMessagesSessionFailed_t : ValueType {
internal ConnectionInfo Nfo
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamNetworkingMessagesSessionRequest_t : ValueType {
internal NetIdentity DentityRemote
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamNetworkingPOPID : ValueType {
public UInt32 Value
public SteamNetworkingPOPID op_Implicit(UInt32 value)
public UInt32 op_Implicit(SteamNetworkingPOPID value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(SteamNetworkingPOPID p)
public bool op_Equality(SteamNetworkingPOPID a, SteamNetworkingPOPID b)
public bool op_Inequality(SteamNetworkingPOPID a, SteamNetworkingPOPID b)
public int CompareTo(SteamNetworkingPOPID other)
}
internal Steamworks.Data.SteamParamStringArray_t : ValueType {
internal IntPtr Strings
internal int NumStrings
}
internal Steamworks.Data.SteamParentalSettingsChanged_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamPartyBeaconLocation_t : ValueType {
internal SteamPartyBeaconLocationType Type
internal ulong LocationID
}
internal Steamworks.Data.SteamRelayNetworkStatus_t : ValueType {
internal SteamNetworkingAvailability Avail
internal int PingMeasurementInProgress
internal SteamNetworkingAvailability AvailNetworkConfig
internal SteamNetworkingAvailability AvailAnyRelay
internal Byte[] DebugMsg
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string DebugMsgUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamRemotePlaySessionConnected_t : ValueType {
internal UInt32 SessionID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamRemotePlaySessionDisconnected_t : ValueType {
internal UInt32 SessionID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamRemotePlayTogetherGuestInvite_t : ValueType {
internal Byte[] ConnectURL
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string ConnectURLUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamServerConnectFailure_t : ValueType {
internal Result Result
internal bool StillRetrying
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamServersConnected_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamServersDisconnected_t : ValueType {
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamShutdown_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamUGCDetails_t : ValueType {
internal PublishedFileId PublishedFileId
internal Result Result
internal WorkshopFileType FileType
internal AppId CreatorAppID
internal AppId ConsumerAppID
internal Byte[] Title
internal Byte[] Description
internal ulong SteamIDOwner
internal UInt32 TimeCreated
internal UInt32 TimeUpdated
internal UInt32 TimeAddedToUserList
internal RemoteStoragePublishedFileVisibility Visibility
internal bool Banned
internal bool AcceptedForUse
internal bool TagsTruncated
internal Byte[] Tags
internal ulong File
internal ulong PreviewFile
internal Byte[] PchFileName
internal int FileSize
internal int PreviewFileSize
internal Byte[] URL
internal UInt32 VotesUp
internal UInt32 VotesDown
internal float Score
internal UInt32 NumChildren
internal string TitleUTF8()
internal string DescriptionUTF8()
internal string TagsUTF8()
internal string PchFileNameUTF8()
internal string URLUTF8()
}
internal Steamworks.Data.SteamUGCQueryCompleted_t : ValueType {
internal ulong Handle
internal Result Result
internal UInt32 NumResultsReturned
internal UInt32 TotalMatchingResults
internal bool CachedData
internal Byte[] NextCursor
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string NextCursorUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SteamUGCRequestUGCDetailsResult_t : ValueType {
internal SteamUGCDetails_t Details
internal bool CachedData
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.StopPlaytimeTrackingResult_t : ValueType {
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.StoreAuthURLResponse_t : ValueType {
internal Byte[] URL
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string URLUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SubmitItemUpdateResult_t : ValueType {
internal Result Result
internal bool UserNeedsToAcceptWorkshopLegalAgreement
internal PublishedFileId PublishedFileId
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.SubmitPlayerResultResultCallback_t : ValueType {
internal Result Result
internal ulong UllUniqueGameID
internal ulong SteamIDPlayer
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.TimedTrialStatus_t : ValueType {
internal AppId AppID
internal bool IsOffline
internal UInt32 SecondsAllowed
internal UInt32 SecondsPlayed
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
public Steamworks.Data.Ugc : ValueType {
internal UGCHandle_t Handle
}
public Steamworks.Data.UgcAdditionalPreview : ValueType {
private string <UrlOrVideoID>k__BackingField
private string <OriginalFileName>k__BackingField
private ItemPreviewType <ItemPreviewType>k__BackingField
public string UrlOrVideoID
public string OriginalFileName
public ItemPreviewType ItemPreviewType
internal void .ctor(string urlOrVideoID, string originalFileName, ItemPreviewType itemPreviewType)
public string get_UrlOrVideoID()
private void set_UrlOrVideoID(string value)
public string get_OriginalFileName()
private void set_OriginalFileName(string value)
public ItemPreviewType get_ItemPreviewType()
private void set_ItemPreviewType(ItemPreviewType value)
}
internal Steamworks.Data.UGCFileWriteStreamHandle_t : ValueType {
public ulong Value
public UGCFileWriteStreamHandle_t op_Implicit(ulong value)
public ulong op_Implicit(UGCFileWriteStreamHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(UGCFileWriteStreamHandle_t p)
public bool op_Equality(UGCFileWriteStreamHandle_t a, UGCFileWriteStreamHandle_t b)
public bool op_Inequality(UGCFileWriteStreamHandle_t a, UGCFileWriteStreamHandle_t b)
public int CompareTo(UGCFileWriteStreamHandle_t other)
}
internal Steamworks.Data.UGCHandle_t : ValueType {
public ulong Value
public UGCHandle_t op_Implicit(ulong value)
public ulong op_Implicit(UGCHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(UGCHandle_t p)
public bool op_Equality(UGCHandle_t a, UGCHandle_t b)
public bool op_Inequality(UGCHandle_t a, UGCHandle_t b)
public int CompareTo(UGCHandle_t other)
}
internal Steamworks.Data.UGCQueryHandle_t : ValueType {
public ulong Value
public UGCQueryHandle_t op_Implicit(ulong value)
public ulong op_Implicit(UGCQueryHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(UGCQueryHandle_t p)
public bool op_Equality(UGCQueryHandle_t a, UGCQueryHandle_t b)
public bool op_Inequality(UGCQueryHandle_t a, UGCQueryHandle_t b)
public int CompareTo(UGCQueryHandle_t other)
}
internal Steamworks.Data.UGCUpdateHandle_t : ValueType {
public ulong Value
public UGCUpdateHandle_t op_Implicit(ulong value)
public ulong op_Implicit(UGCUpdateHandle_t value)
public string ToString()
public int GetHashCode()
public bool Equals(object p)
public bool Equals(UGCUpdateHandle_t p)
public bool op_Equality(UGCUpdateHandle_t a, UGCUpdateHandle_t b)
public bool op_Inequality(UGCUpdateHandle_t a, UGCUpdateHandle_t b)
public int CompareTo(UGCUpdateHandle_t other)
}
internal Steamworks.Data.UnreadChatMessagesChanged_t : ValueType {
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.UserAchievementIconFetched_t : ValueType {
internal GameId GameID
internal Byte[] AchievementName
internal bool Achieved
internal int IconHandle
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string AchievementNameUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.UserAchievementStored_t : ValueType {
internal ulong GameID
internal bool GroupAchievement
internal Byte[] AchievementName
internal UInt32 CurProgress
internal UInt32 MaxProgress
public int _datasize
public int DataSize
public CallbackType CallbackType
internal string AchievementNameUTF8()
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.UserFavoriteItemsListChanged_t : ValueType {
internal PublishedFileId PublishedFileId
internal Result Result
internal bool WasAddRequest
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.UserStatsReceived_t : ValueType {
internal ulong GameID
internal Result Result
internal ulong SteamIDUser
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.UserStatsStored_t : ValueType {
internal ulong GameID
internal Result Result
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.UserStatsUnloaded_t : ValueType {
internal ulong SteamIDUser
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.UserSubscribedItemsListChanged_t : ValueType {
internal AppId AppID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.ValidateAuthTicketResponse_t : ValueType {
internal ulong SteamID
internal AuthResponse AuthSessionResponse
internal ulong OwnerSteamID
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.VolumeHasChanged_t : ValueType {
internal float NewVolume
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.Data.WorkshopEULAStatus_t : ValueType {
internal Result Result
internal AppId AppID
internal UInt32 Version
internal UInt32 TAction
internal bool Accepted
internal bool NeedsAction
public int _datasize
public int DataSize
public CallbackType CallbackType
public int get_DataSize()
public CallbackType get_CallbackType()
}
internal Steamworks.DenyReason : Enum {
public int value__
public DenyReason Invalid
public DenyReason InvalidVersion
public DenyReason Generic
public DenyReason NotLoggedOn
public DenyReason NoLicense
public DenyReason Cheater
public DenyReason LoggedInElseWhere
public DenyReason UnknownText
public DenyReason IncompatibleAnticheat
public DenyReason MemoryCorruption
public DenyReason IncompatibleSoftware
public DenyReason SteamConnectionLost
public DenyReason SteamConnectionError
public DenyReason SteamResponseTimedOut
public DenyReason SteamValidationStalled
public DenyReason SteamOwnerLeftGuestUser
}
public Steamworks.DigitalState : ValueType {
internal byte BState
internal byte BActive
public bool Pressed
public bool Active
public bool get_Pressed()
public bool get_Active()
}
public Steamworks.Dispatch : object {
public Action`3<CallbackType, string, bool> OnDebugCallback
public Action`1<Exception> OnException
private HSteamPipe <ClientPipe>k__BackingField
private HSteamPipe <ServerPipe>k__BackingField
private bool runningFrame
private List`1<Action`1<IntPtr>> actionsToCall
private Dictionary`2<ulong, ResultCallback> ResultCallbacks
private Dictionary`2<CallbackType, List`1<Callback>> Callbacks
internal HSteamPipe ClientPipe
internal HSteamPipe ServerPipe
internal void SteamAPI_ManualDispatch_Init()
internal void SteamAPI_ManualDispatch_RunFrame(HSteamPipe pipe)
internal bool SteamAPI_ManualDispatch_GetNextCallback(HSteamPipe pipe, CallbackMsg_t& msg)
internal bool SteamAPI_ManualDispatch_FreeLastCallback(HSteamPipe pipe)
internal HSteamPipe get_ClientPipe()
internal void set_ClientPipe(HSteamPipe value)
internal HSteamPipe get_ServerPipe()
internal void set_ServerPipe(HSteamPipe value)
internal void Init()
internal void Frame(HSteamPipe pipe)
private void ProcessCallback(CallbackMsg_t msg, bool isServer)
internal string CallbackToString(CallbackType type, IntPtr data, int expectedsize)
private void ProcessResult(CallbackMsg_t msg)
internal void LoopClientAsync()
internal void LoopServerAsync()
internal void OnCallComplete(SteamAPICall_t call, Action continuation, bool server)
internal void Install(Action`1<T> p, bool server)
internal void ShutdownServer()
internal void ShutdownClient()
}
internal Steamworks.DurationControlNotification : Enum {
public int value__
public DurationControlNotification None
public DurationControlNotification DurationControlNotification1Hour
public DurationControlNotification DurationControlNotification3Hours
public DurationControlNotification HalfProgress
public DurationControlNotification NoProgress
public DurationControlNotification ExitSoon_3h
public DurationControlNotification ExitSoon_5h
public DurationControlNotification ExitSoon_Night
}
internal Steamworks.DurationControlOnlineState : Enum {
public int value__
public DurationControlOnlineState Invalid
public DurationControlOnlineState Offline
public DurationControlOnlineState Online
public DurationControlOnlineState OnlineHighPri
}
public Steamworks.DurationControlProgress : Enum {
public int value__
public DurationControlProgress Progress_Full
public DurationControlProgress Progress_Half
public DurationControlProgress Progress_None
public DurationControlProgress ExitSoon_3h
public DurationControlProgress ExitSoon_5h
public DurationControlProgress ExitSoon_Night
}
internal Steamworks.Epoch : object {
private DateTime epoch
public int Current
public int get_Current()
public DateTime ToDateTime(decimal unixTime)
public UInt32 FromDateTime(DateTime dt)
}
internal Steamworks.FnSteamNetAuthenticationStatusChanged : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(SteamNetAuthenticationStatus_t& arg)
public IAsyncResult BeginInvoke(SteamNetAuthenticationStatus_t& arg, AsyncCallback callback, object object)
public void EndInvoke(SteamNetAuthenticationStatus_t& arg, IAsyncResult result)
}
internal Steamworks.FnSteamNetConnectionStatusChanged : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(SteamNetConnectionStatusChangedCallback_t& arg)
public IAsyncResult BeginInvoke(SteamNetConnectionStatusChangedCallback_t& arg, AsyncCallback callback, object object)
public void EndInvoke(SteamNetConnectionStatusChangedCallback_t& arg, IAsyncResult result)
}
internal Steamworks.FnSteamNetworkingFakeIPResult : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(SteamNetworkingFakeIPResult_t& arg)
public IAsyncResult BeginInvoke(SteamNetworkingFakeIPResult_t& arg, AsyncCallback callback, object object)
public void EndInvoke(SteamNetworkingFakeIPResult_t& arg, IAsyncResult result)
}
internal Steamworks.FnSteamNetworkingMessagesSessionFailed : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(SteamNetworkingMessagesSessionFailed_t& arg)
public IAsyncResult BeginInvoke(SteamNetworkingMessagesSessionFailed_t& arg, AsyncCallback callback, object object)
public void EndInvoke(SteamNetworkingMessagesSessionFailed_t& arg, IAsyncResult result)
}
internal Steamworks.FnSteamNetworkingMessagesSessionRequest : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(SteamNetworkingMessagesSessionRequest_t& arg)
public IAsyncResult BeginInvoke(SteamNetworkingMessagesSessionRequest_t& arg, AsyncCallback callback, object object)
public void EndInvoke(SteamNetworkingMessagesSessionRequest_t& arg, IAsyncResult result)
}
internal Steamworks.FnSteamRelayNetworkStatusChanged : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(SteamRelayNetworkStatus_t& arg)
public IAsyncResult BeginInvoke(SteamRelayNetworkStatus_t& arg, AsyncCallback callback, object object)
public void EndInvoke(SteamRelayNetworkStatus_t& arg, IAsyncResult result)
}
public Steamworks.Friend : ValueType {
public SteamId Id
public bool IsMe
public bool IsFriend
public bool IsBlocked
public bool IsPlayingThisGame
public bool IsOnline
public bool IsAway
public bool IsBusy
public bool IsSnoozing
public Relationship Relationship
public FriendState State
public string Name
public IEnumerable`1<string> NameHistory
public int SteamLevel
public Nullable`1<FriendGameInfo> GameInfo
public void .ctor(SteamId steamid)
public string ToString()
public bool get_IsMe()
public bool get_IsFriend()
public bool get_IsBlocked()
public bool get_IsPlayingThisGame()
public bool get_IsOnline()
public Task RequestInfoAsync()
public bool get_IsAway()
public bool get_IsBusy()
public bool get_IsSnoozing()
public Relationship get_Relationship()
public FriendState get_State()
public string get_Name()
public IEnumerable`1<string> get_NameHistory()
public int get_SteamLevel()
public Nullable`1<FriendGameInfo> get_GameInfo()
public bool IsIn(SteamId group_or_room)
public Task`1<Nullable`1<Image>> GetSmallAvatarAsync()
public Task`1<Nullable`1<Image>> GetMediumAvatarAsync()
public Task`1<Nullable`1<Image>> GetLargeAvatarAsync()
public string GetRichPresence(string key)
public bool InviteToGame(string Text)
public bool SendMessage(string message)
public Task`1<bool> RequestUserStatsAsync()
public float GetStatFloat(string statName, float defult)
public int GetStatInt(string statName, int defult)
public bool GetAchievement(string statName, bool defult)
public DateTime GetAchievementUnlockTime(string statName)
}
internal Steamworks.FriendFlags : Enum {
public int value__
public FriendFlags None
public FriendFlags Blocked
public FriendFlags FriendshipRequested
public FriendFlags Immediate
public FriendFlags ClanMember
public FriendFlags OnGameServer
public FriendFlags RequestingFriendship
public FriendFlags RequestingInfo
public FriendFlags Ignored
public FriendFlags IgnoredFriend
public FriendFlags ChatMember
public FriendFlags All
}
public Steamworks.FriendState : Enum {
public int value__
public FriendState Offline
public FriendState Online
public FriendState Busy
public FriendState Away
public FriendState Snooze
public FriendState LookingToTrade
public FriendState LookingToPlay
public FriendState Invisible
public FriendState Max
}
public Steamworks.GamepadTextInputLineMode : Enum {
public int value__
public GamepadTextInputLineMode SingleLine
public GamepadTextInputLineMode MultipleLines
}
public Steamworks.GamepadTextInputMode : Enum {
public int value__
public GamepadTextInputMode Normal
public GamepadTextInputMode Password
}
internal Steamworks.GameSearchErrorCode_t : Enum {
public int value__
public GameSearchErrorCode_t OK
public GameSearchErrorCode_t Failed_Search_Already_In_Progress
public GameSearchErrorCode_t Failed_No_Search_In_Progress
public GameSearchErrorCode_t Failed_Not_Lobby_Leader
public GameSearchErrorCode_t Failed_No_Host_Available
public GameSearchErrorCode_t Failed_Search_Params_Invalid
public GameSearchErrorCode_t Failed_Offline
public GameSearchErrorCode_t Failed_NotAuthorized
public GameSearchErrorCode_t Failed_Unknown_Error
}
public Steamworks.GlyphSize : Enum {
public int value__
public GlyphSize Small
public GlyphSize Medium
public GlyphSize Large
public GlyphSize Count
}
internal Steamworks.Helpers : object {
public int MemoryBufferSize
private Byte[][] BufferPool
private int BufferPoolIndex
public Memory TakeMemory()
public Byte[] TakeBuffer(int minSize)
internal string MemoryToString(IntPtr ptr)
}
internal Steamworks.HTTPMethod : Enum {
public int value__
public HTTPMethod Invalid
public HTTPMethod GET
public HTTPMethod HEAD
public HTTPMethod POST
public HTTPMethod PUT
public HTTPMethod DELETE
public HTTPMethod OPTIONS
public HTTPMethod PATCH
}
internal Steamworks.HTTPStatusCode : Enum {
public int value__
public HTTPStatusCode Invalid
public HTTPStatusCode Code100Continue
public HTTPStatusCode Code101SwitchingProtocols
public HTTPStatusCode Code200OK
public HTTPStatusCode Code201Created
public HTTPStatusCode Code202Accepted
public HTTPStatusCode Code203NonAuthoritative
public HTTPStatusCode Code204NoContent
public HTTPStatusCode Code205ResetContent
public HTTPStatusCode Code206PartialContent
public HTTPStatusCode Code300MultipleChoices
public HTTPStatusCode Code301MovedPermanently
public HTTPStatusCode Code302Found
public HTTPStatusCode Code303SeeOther
public HTTPStatusCode Code304NotModified
public HTTPStatusCode Code305UseProxy
public HTTPStatusCode Code307TemporaryRedirect
public HTTPStatusCode Code308PermanentRedirect
public HTTPStatusCode Code400BadRequest
public HTTPStatusCode Code401Unauthorized
public HTTPStatusCode Code402PaymentRequired
public HTTPStatusCode Code403Forbidden
public HTTPStatusCode Code404NotFound
public HTTPStatusCode Code405MethodNotAllowed
public HTTPStatusCode Code406NotAcceptable
public HTTPStatusCode Code407ProxyAuthRequired
public HTTPStatusCode Code408RequestTimeout
public HTTPStatusCode Code409Conflict
public HTTPStatusCode Code410Gone
public HTTPStatusCode Code411LengthRequired
public HTTPStatusCode Code412PreconditionFailed
public HTTPStatusCode Code413RequestEntityTooLarge
public HTTPStatusCode Code414RequestURITooLong
public HTTPStatusCode Code415UnsupportedMediaType
public HTTPStatusCode Code416RequestedRangeNotSatisfiable
public HTTPStatusCode Code417ExpectationFailed
public HTTPStatusCode Code4xxUnknown
public HTTPStatusCode Code429TooManyRequests
public HTTPStatusCode Code444ConnectionClosed
public HTTPStatusCode Code500InternalServerError
public HTTPStatusCode Code501NotImplemented
public HTTPStatusCode Code502BadGateway
public HTTPStatusCode Code503ServiceUnavailable
public HTTPStatusCode Code504GatewayTimeout
public HTTPStatusCode Code505HTTPVersionNotSupported
public HTTPStatusCode Code5xxUnknown
}
internal Steamworks.ICallbackData {
public CallbackType CallbackType
public int DataSize
public CallbackType get_CallbackType()
public int get_DataSize()
}
public Steamworks.IConnectionManager {
public void OnConnecting(ConnectionInfo info)
public void OnConnected(ConnectionInfo info)
public void OnDisconnected(ConnectionInfo info)
public void OnMessage(IntPtr data, int size, long messageNum, long recvTime, int channel)
}
internal Steamworks.InputActionOrigin : Enum {
public int value__
public InputActionOrigin None
public InputActionOrigin SteamController_A
public InputActionOrigin SteamController_B
public InputActionOrigin SteamController_X
public InputActionOrigin SteamController_Y
public InputActionOrigin SteamController_LeftBumper
public InputActionOrigin SteamController_RightBumper
public InputActionOrigin SteamController_LeftGrip
public InputActionOrigin SteamController_RightGrip
public InputActionOrigin SteamController_Start
public InputActionOrigin SteamController_Back
public InputActionOrigin SteamController_LeftPad_Touch
public InputActionOrigin SteamController_LeftPad_Swipe
public InputActionOrigin SteamController_LeftPad_Click
public InputActionOrigin SteamController_LeftPad_DPadNorth
public InputActionOrigin SteamController_LeftPad_DPadSouth
public InputActionOrigin SteamController_LeftPad_DPadWest
public InputActionOrigin SteamController_LeftPad_DPadEast
public InputActionOrigin SteamController_RightPad_Touch
public InputActionOrigin SteamController_RightPad_Swipe
public InputActionOrigin SteamController_RightPad_Click
public InputActionOrigin SteamController_RightPad_DPadNorth
public InputActionOrigin SteamController_RightPad_DPadSouth
public InputActionOrigin SteamController_RightPad_DPadWest
public InputActionOrigin SteamController_RightPad_DPadEast
public InputActionOrigin SteamController_LeftTrigger_Pull
public InputActionOrigin SteamController_LeftTrigger_Click
public InputActionOrigin SteamController_RightTrigger_Pull
public InputActionOrigin SteamController_RightTrigger_Click
public InputActionOrigin SteamController_LeftStick_Move
public InputActionOrigin SteamController_LeftStick_Click
public InputActionOrigin SteamController_LeftStick_DPadNorth
public InputActionOrigin SteamController_LeftStick_DPadSouth
public InputActionOrigin SteamController_LeftStick_DPadWest
public InputActionOrigin SteamController_LeftStick_DPadEast
public InputActionOrigin SteamController_Gyro_Move
public InputActionOrigin SteamController_Gyro_Pitch
public InputActionOrigin SteamController_Gyro_Yaw
public InputActionOrigin SteamController_Gyro_Roll
public InputActionOrigin SteamController_Reserved0
public InputActionOrigin SteamController_Reserved1
public InputActionOrigin SteamController_Reserved2
public InputActionOrigin SteamController_Reserved3
public InputActionOrigin SteamController_Reserved4
public InputActionOrigin SteamController_Reserved5
public InputActionOrigin SteamController_Reserved6
public InputActionOrigin SteamController_Reserved7
public InputActionOrigin SteamController_Reserved8
public InputActionOrigin SteamController_Reserved9
public InputActionOrigin SteamController_Reserved10
public InputActionOrigin PS4_X
public InputActionOrigin PS4_Circle
public InputActionOrigin PS4_Triangle
public InputActionOrigin PS4_Square
public InputActionOrigin PS4_LeftBumper
public InputActionOrigin PS4_RightBumper
public InputActionOrigin PS4_Options
public InputActionOrigin PS4_Share
public InputActionOrigin PS4_LeftPad_Touch
public InputActionOrigin PS4_LeftPad_Swipe
public InputActionOrigin PS4_LeftPad_Click
public InputActionOrigin PS4_LeftPad_DPadNorth
public InputActionOrigin PS4_LeftPad_DPadSouth
public InputActionOrigin PS4_LeftPad_DPadWest
public InputActionOrigin PS4_LeftPad_DPadEast
public InputActionOrigin PS4_RightPad_Touch
public InputActionOrigin PS4_RightPad_Swipe
public InputActionOrigin PS4_RightPad_Click
public InputActionOrigin PS4_RightPad_DPadNorth
public InputActionOrigin PS4_RightPad_DPadSouth
public InputActionOrigin PS4_RightPad_DPadWest
public InputActionOrigin PS4_RightPad_DPadEast
public InputActionOrigin PS4_CenterPad_Touch
public InputActionOrigin PS4_CenterPad_Swipe
public InputActionOrigin PS4_CenterPad_Click
public InputActionOrigin PS4_CenterPad_DPadNorth
public InputActionOrigin PS4_CenterPad_DPadSouth
public InputActionOrigin PS4_CenterPad_DPadWest
public InputActionOrigin PS4_CenterPad_DPadEast
public InputActionOrigin PS4_LeftTrigger_Pull
public InputActionOrigin PS4_LeftTrigger_Click
public InputActionOrigin PS4_RightTrigger_Pull
public InputActionOrigin PS4_RightTrigger_Click
public InputActionOrigin PS4_LeftStick_Move
public InputActionOrigin PS4_LeftStick_Click
public InputActionOrigin PS4_LeftStick_DPadNorth
public InputActionOrigin PS4_LeftStick_DPadSouth
public InputActionOrigin PS4_LeftStick_DPadWest
public InputActionOrigin PS4_LeftStick_DPadEast
public InputActionOrigin PS4_RightStick_Move
public InputActionOrigin PS4_RightStick_Click
public InputActionOrigin PS4_RightStick_DPadNorth
public InputActionOrigin PS4_RightStick_DPadSouth
public InputActionOrigin PS4_RightStick_DPadWest
public InputActionOrigin PS4_RightStick_DPadEast
public InputActionOrigin PS4_DPad_North
public InputActionOrigin PS4_DPad_South
public InputActionOrigin PS4_DPad_West
public InputActionOrigin PS4_DPad_East
public InputActionOrigin PS4_Gyro_Move
public InputActionOrigin PS4_Gyro_Pitch
public InputActionOrigin PS4_Gyro_Yaw
public InputActionOrigin PS4_Gyro_Roll
public InputActionOrigin PS4_DPad_Move
public InputActionOrigin PS4_Reserved1
public InputActionOrigin PS4_Reserved2
public InputActionOrigin PS4_Reserved3
public InputActionOrigin PS4_Reserved4
public InputActionOrigin PS4_Reserved5
public InputActionOrigin PS4_Reserved6
public InputActionOrigin PS4_Reserved7
public InputActionOrigin PS4_Reserved8
public InputActionOrigin PS4_Reserved9
public InputActionOrigin PS4_Reserved10
public InputActionOrigin XBoxOne_A
public InputActionOrigin XBoxOne_B
public InputActionOrigin XBoxOne_X
public InputActionOrigin XBoxOne_Y
public InputActionOrigin XBoxOne_LeftBumper
public InputActionOrigin XBoxOne_RightBumper
public InputActionOrigin XBoxOne_Menu
public InputActionOrigin XBoxOne_View
public InputActionOrigin XBoxOne_LeftTrigger_Pull
public InputActionOrigin XBoxOne_LeftTrigger_Click
public InputActionOrigin XBoxOne_RightTrigger_Pull
public InputActionOrigin XBoxOne_RightTrigger_Click
public InputActionOrigin XBoxOne_LeftStick_Move
public InputActionOrigin XBoxOne_LeftStick_Click
public InputActionOrigin XBoxOne_LeftStick_DPadNorth
public InputActionOrigin XBoxOne_LeftStick_DPadSouth
public InputActionOrigin XBoxOne_LeftStick_DPadWest
public InputActionOrigin XBoxOne_LeftStick_DPadEast
public InputActionOrigin XBoxOne_RightStick_Move
public InputActionOrigin XBoxOne_RightStick_Click
public InputActionOrigin XBoxOne_RightStick_DPadNorth
public InputActionOrigin XBoxOne_RightStick_DPadSouth
public InputActionOrigin XBoxOne_RightStick_DPadWest
public InputActionOrigin XBoxOne_RightStick_DPadEast
public InputActionOrigin XBoxOne_DPad_North
public InputActionOrigin XBoxOne_DPad_South
public InputActionOrigin XBoxOne_DPad_West
public InputActionOrigin XBoxOne_DPad_East
public InputActionOrigin XBoxOne_DPad_Move
public InputActionOrigin XBoxOne_LeftGrip_Lower
public InputActionOrigin XBoxOne_LeftGrip_Upper
public InputActionOrigin XBoxOne_RightGrip_Lower
public InputActionOrigin XBoxOne_RightGrip_Upper
public InputActionOrigin XBoxOne_Share
public InputActionOrigin XBoxOne_Reserved6
public InputActionOrigin XBoxOne_Reserved7
public InputActionOrigin XBoxOne_Reserved8
public InputActionOrigin XBoxOne_Reserved9
public InputActionOrigin XBoxOne_Reserved10
public InputActionOrigin XBox360_A
public InputActionOrigin XBox360_B
public InputActionOrigin XBox360_X
public InputActionOrigin XBox360_Y
public InputActionOrigin XBox360_LeftBumper
public InputActionOrigin XBox360_RightBumper
public InputActionOrigin XBox360_Start
public InputActionOrigin XBox360_Back
public InputActionOrigin XBox360_LeftTrigger_Pull
public InputActionOrigin XBox360_LeftTrigger_Click
public InputActionOrigin XBox360_RightTrigger_Pull
public InputActionOrigin XBox360_RightTrigger_Click
public InputActionOrigin XBox360_LeftStick_Move
public InputActionOrigin XBox360_LeftStick_Click
public InputActionOrigin XBox360_LeftStick_DPadNorth
public InputActionOrigin XBox360_LeftStick_DPadSouth
public InputActionOrigin XBox360_LeftStick_DPadWest
public InputActionOrigin XBox360_LeftStick_DPadEast
public InputActionOrigin XBox360_RightStick_Move
public InputActionOrigin XBox360_RightStick_Click
public InputActionOrigin XBox360_RightStick_DPadNorth
public InputActionOrigin XBox360_RightStick_DPadSouth
public InputActionOrigin XBox360_RightStick_DPadWest
public InputActionOrigin XBox360_RightStick_DPadEast
public InputActionOrigin XBox360_DPad_North
public InputActionOrigin XBox360_DPad_South
public InputActionOrigin XBox360_DPad_West
public InputActionOrigin XBox360_DPad_East
public InputActionOrigin XBox360_DPad_Move
public InputActionOrigin XBox360_Reserved1
public InputActionOrigin XBox360_Reserved2
public InputActionOrigin XBox360_Reserved3
public InputActionOrigin XBox360_Reserved4
public InputActionOrigin XBox360_Reserved5
public InputActionOrigin XBox360_Reserved6
public InputActionOrigin XBox360_Reserved7
public InputActionOrigin XBox360_Reserved8
public InputActionOrigin XBox360_Reserved9
public InputActionOrigin XBox360_Reserved10
public InputActionOrigin Switch_A
public InputActionOrigin Switch_B
public InputActionOrigin Switch_X
public InputActionOrigin Switch_Y
public InputActionOrigin Switch_LeftBumper
public InputActionOrigin Switch_RightBumper
public InputActionOrigin Switch_Plus
public InputActionOrigin Switch_Minus
public InputActionOrigin Switch_Capture
public InputActionOrigin Switch_LeftTrigger_Pull
public InputActionOrigin Switch_LeftTrigger_Click
public InputActionOrigin Switch_RightTrigger_Pull
public InputActionOrigin Switch_RightTrigger_Click
public InputActionOrigin Switch_LeftStick_Move
public InputActionOrigin Switch_LeftStick_Click
public InputActionOrigin Switch_LeftStick_DPadNorth
public InputActionOrigin Switch_LeftStick_DPadSouth
public InputActionOrigin Switch_LeftStick_DPadWest
public InputActionOrigin Switch_LeftStick_DPadEast
public InputActionOrigin Switch_RightStick_Move
public InputActionOrigin Switch_RightStick_Click
public InputActionOrigin Switch_RightStick_DPadNorth
public InputActionOrigin Switch_RightStick_DPadSouth
public InputActionOrigin Switch_RightStick_DPadWest
public InputActionOrigin Switch_RightStick_DPadEast
public InputActionOrigin Switch_DPad_North
public InputActionOrigin Switch_DPad_South
public InputActionOrigin Switch_DPad_West
public InputActionOrigin Switch_DPad_East
public InputActionOrigin Switch_ProGyro_Move
public InputActionOrigin Switch_ProGyro_Pitch
public InputActionOrigin Switch_ProGyro_Yaw
public InputActionOrigin Switch_ProGyro_Roll
public InputActionOrigin Switch_DPad_Move
public InputActionOrigin Switch_Reserved1
public InputActionOrigin Switch_Reserved2
public InputActionOrigin Switch_Reserved3
public InputActionOrigin Switch_Reserved4
public InputActionOrigin Switch_Reserved5
public InputActionOrigin Switch_Reserved6
public InputActionOrigin Switch_Reserved7
public InputActionOrigin Switch_Reserved8
public InputActionOrigin Switch_Reserved9
public InputActionOrigin Switch_Reserved10
public InputActionOrigin Switch_RightGyro_Move
public InputActionOrigin Switch_RightGyro_Pitch
public InputActionOrigin Switch_RightGyro_Yaw
public InputActionOrigin Switch_RightGyro_Roll
public InputActionOrigin Switch_LeftGyro_Move
public InputActionOrigin Switch_LeftGyro_Pitch
public InputActionOrigin Switch_LeftGyro_Yaw
public InputActionOrigin Switch_LeftGyro_Roll
public InputActionOrigin Switch_LeftGrip_Lower
public InputActionOrigin Switch_LeftGrip_Upper
public InputActionOrigin Switch_RightGrip_Lower
public InputActionOrigin Switch_RightGrip_Upper
public InputActionOrigin Switch_JoyConButton_N
public InputActionOrigin Switch_JoyConButton_E
public InputActionOrigin Switch_JoyConButton_S
public InputActionOrigin Switch_JoyConButton_W
public InputActionOrigin Switch_Reserved15
public InputActionOrigin Switch_Reserved16
public InputActionOrigin Switch_Reserved17
public InputActionOrigin Switch_Reserved18
public InputActionOrigin Switch_Reserved19
public InputActionOrigin Switch_Reserved20
public InputActionOrigin PS5_X
public InputActionOrigin PS5_Circle
public InputActionOrigin PS5_Triangle
public InputActionOrigin PS5_Square
public InputActionOrigin PS5_LeftBumper
public InputActionOrigin PS5_RightBumper
public InputActionOrigin PS5_Option
public InputActionOrigin PS5_Create
public InputActionOrigin PS5_Mute
public InputActionOrigin PS5_LeftPad_Touch
public InputActionOrigin PS5_LeftPad_Swipe
public InputActionOrigin PS5_LeftPad_Click
public InputActionOrigin PS5_LeftPad_DPadNorth
public InputActionOrigin PS5_LeftPad_DPadSouth
public InputActionOrigin PS5_LeftPad_DPadWest
public InputActionOrigin PS5_LeftPad_DPadEast
public InputActionOrigin PS5_RightPad_Touch
public InputActionOrigin PS5_RightPad_Swipe
public InputActionOrigin PS5_RightPad_Click
public InputActionOrigin PS5_RightPad_DPadNorth
public InputActionOrigin PS5_RightPad_DPadSouth
public InputActionOrigin PS5_RightPad_DPadWest
public InputActionOrigin PS5_RightPad_DPadEast
public InputActionOrigin PS5_CenterPad_Touch
public InputActionOrigin PS5_CenterPad_Swipe
public InputActionOrigin PS5_CenterPad_Click
public InputActionOrigin PS5_CenterPad_DPadNorth
public InputActionOrigin PS5_CenterPad_DPadSouth
public InputActionOrigin PS5_CenterPad_DPadWest
public InputActionOrigin PS5_CenterPad_DPadEast
public InputActionOrigin PS5_LeftTrigger_Pull
public InputActionOrigin PS5_LeftTrigger_Click
public InputActionOrigin PS5_RightTrigger_Pull
public InputActionOrigin PS5_RightTrigger_Click
public InputActionOrigin PS5_LeftStick_Move
public InputActionOrigin PS5_LeftStick_Click
public InputActionOrigin PS5_LeftStick_DPadNorth
public InputActionOrigin PS5_LeftStick_DPadSouth
public InputActionOrigin PS5_LeftStick_DPadWest
public InputActionOrigin PS5_LeftStick_DPadEast
public InputActionOrigin PS5_RightStick_Move
public InputActionOrigin PS5_RightStick_Click
public InputActionOrigin PS5_RightStick_DPadNorth
public InputActionOrigin PS5_RightStick_DPadSouth
public InputActionOrigin PS5_RightStick_DPadWest
public InputActionOrigin PS5_RightStick_DPadEast
public InputActionOrigin PS5_DPad_North
public InputActionOrigin PS5_DPad_South
public InputActionOrigin PS5_DPad_West
public InputActionOrigin PS5_DPad_East
public InputActionOrigin PS5_Gyro_Move
public InputActionOrigin PS5_Gyro_Pitch
public InputActionOrigin PS5_Gyro_Yaw
public InputActionOrigin PS5_Gyro_Roll
public InputActionOrigin PS5_DPad_Move
public InputActionOrigin PS5_LeftGrip
public InputActionOrigin PS5_RightGrip
public InputActionOrigin PS5_LeftFn
public InputActionOrigin PS5_RightFn
public InputActionOrigin PS5_Reserved5
public InputActionOrigin PS5_Reserved6
public InputActionOrigin PS5_Reserved7
public InputActionOrigin PS5_Reserved8
public InputActionOrigin PS5_Reserved9
public InputActionOrigin PS5_Reserved10
public InputActionOrigin PS5_Reserved11
public InputActionOrigin PS5_Reserved12
public InputActionOrigin PS5_Reserved13
public InputActionOrigin PS5_Reserved14
public InputActionOrigin PS5_Reserved15
public InputActionOrigin PS5_Reserved16
public InputActionOrigin PS5_Reserved17
public InputActionOrigin PS5_Reserved18
public InputActionOrigin PS5_Reserved19
public InputActionOrigin PS5_Reserved20
public InputActionOrigin SteamDeck_A
public InputActionOrigin SteamDeck_B
public InputActionOrigin SteamDeck_X
public InputActionOrigin SteamDeck_Y
public InputActionOrigin SteamDeck_L1
public InputActionOrigin SteamDeck_R1
public InputActionOrigin SteamDeck_Menu
public InputActionOrigin SteamDeck_View
public InputActionOrigin SteamDeck_LeftPad_Touch
public InputActionOrigin SteamDeck_LeftPad_Swipe
public InputActionOrigin SteamDeck_LeftPad_Click
public InputActionOrigin SteamDeck_LeftPad_DPadNorth
public InputActionOrigin SteamDeck_LeftPad_DPadSouth
public InputActionOrigin SteamDeck_LeftPad_DPadWest
public InputActionOrigin SteamDeck_LeftPad_DPadEast
public InputActionOrigin SteamDeck_RightPad_Touch
public InputActionOrigin SteamDeck_RightPad_Swipe
public InputActionOrigin SteamDeck_RightPad_Click
public InputActionOrigin SteamDeck_RightPad_DPadNorth
public InputActionOrigin SteamDeck_RightPad_DPadSouth
public InputActionOrigin SteamDeck_RightPad_DPadWest
public InputActionOrigin SteamDeck_RightPad_DPadEast
public InputActionOrigin SteamDeck_L2_SoftPull
public InputActionOrigin SteamDeck_L2
public InputActionOrigin SteamDeck_R2_SoftPull
public InputActionOrigin SteamDeck_R2
public InputActionOrigin SteamDeck_LeftStick_Move
public InputActionOrigin SteamDeck_L3
public InputActionOrigin SteamDeck_LeftStick_DPadNorth
public InputActionOrigin SteamDeck_LeftStick_DPadSouth
public InputActionOrigin SteamDeck_LeftStick_DPadWest
public InputActionOrigin SteamDeck_LeftStick_DPadEast
public InputActionOrigin SteamDeck_LeftStick_Touch
public InputActionOrigin SteamDeck_RightStick_Move
public InputActionOrigin SteamDeck_R3
public InputActionOrigin SteamDeck_RightStick_DPadNorth
public InputActionOrigin SteamDeck_RightStick_DPadSouth
public InputActionOrigin SteamDeck_RightStick_DPadWest
public InputActionOrigin SteamDeck_RightStick_DPadEast
public InputActionOrigin SteamDeck_RightStick_Touch
public InputActionOrigin SteamDeck_L4
public InputActionOrigin SteamDeck_R4
public InputActionOrigin SteamDeck_L5
public InputActionOrigin SteamDeck_R5
public InputActionOrigin SteamDeck_DPad_Move
public InputActionOrigin SteamDeck_DPad_North
public InputActionOrigin SteamDeck_DPad_South
public InputActionOrigin SteamDeck_DPad_West
public InputActionOrigin SteamDeck_DPad_East
public InputActionOrigin SteamDeck_Gyro_Move
public InputActionOrigin SteamDeck_Gyro_Pitch
public InputActionOrigin SteamDeck_Gyro_Yaw
public InputActionOrigin SteamDeck_Gyro_Roll
public InputActionOrigin SteamDeck_Reserved1
public InputActionOrigin SteamDeck_Reserved2
public InputActionOrigin SteamDeck_Reserved3
public InputActionOrigin SteamDeck_Reserved4
public InputActionOrigin SteamDeck_Reserved5
public InputActionOrigin SteamDeck_Reserved6
public InputActionOrigin SteamDeck_Reserved7
public InputActionOrigin SteamDeck_Reserved8
public InputActionOrigin SteamDeck_Reserved9
public InputActionOrigin SteamDeck_Reserved10
public InputActionOrigin SteamDeck_Reserved11
public InputActionOrigin SteamDeck_Reserved12
public InputActionOrigin SteamDeck_Reserved13
public InputActionOrigin SteamDeck_Reserved14
public InputActionOrigin SteamDeck_Reserved15
public InputActionOrigin SteamDeck_Reserved16
public InputActionOrigin SteamDeck_Reserved17
public InputActionOrigin SteamDeck_Reserved18
public InputActionOrigin SteamDeck_Reserved19
public InputActionOrigin SteamDeck_Reserved20
public InputActionOrigin Count
public InputActionOrigin MaximumPossibleValue
}
public Steamworks.InputSourceMode : Enum {
public int value__
public InputSourceMode None
public InputSourceMode Dpad
public InputSourceMode Buttons
public InputSourceMode FourButtons
public InputSourceMode AbsoluteMouse
public InputSourceMode RelativeMouse
public InputSourceMode JoystickMove
public InputSourceMode JoystickMouse
public InputSourceMode JoystickCamera
public InputSourceMode ScrollWheel
public InputSourceMode Trigger
public InputSourceMode TouchMenu
public InputSourceMode MouseJoystick
public InputSourceMode MouseRegion
public InputSourceMode RadialMenu
public InputSourceMode SingleButton
public InputSourceMode Switches
}
public Steamworks.InputType : Enum {
public int value__
public InputType Unknown
public InputType SteamController
public InputType XBox360Controller
public InputType XBoxOneController
public InputType GenericGamepad
public InputType PS4Controller
public InputType AppleMFiController
public InputType AndroidController
public InputType SwitchJoyConPair
public InputType SwitchJoyConSingle
public InputType SwitchProController
public InputType MobileTouch
public InputType PS3Controller
public InputType PS5Controller
public InputType SteamDeckController
public InputType Count
public InputType MaximumPossibleValue
}
public Steamworks.InventoryDef : object {
internal InventoryDefId _id
internal Dictionary`2<string, string> _properties
private InventoryRecipe[] _recContaining
public int Id
public string Name
public string Description
public string IconUrl
public string IconUrlLarge
public string PriceCategory
public string Type
public bool IsGenerator
public string ExchangeSchema
public bool Marketable
public bool Tradable
public DateTime Created
public DateTime Modified
public IEnumerable`1<KeyValuePair`2<string, string>> Properties
public int LocalPrice
public string LocalPriceFormatted
public int LocalBasePrice
public string LocalBasePriceFormatted
public void .ctor(InventoryDefId defId)
public int get_Id()
public string get_Name()
public string get_Description()
public string get_IconUrl()
public string get_IconUrlLarge()
public string get_PriceCategory()
public string get_Type()
public bool get_IsGenerator()
public string get_ExchangeSchema()
public InventoryRecipe[] GetRecipes()
public bool get_Marketable()
public bool get_Tradable()
public DateTime get_Created()
public DateTime get_Modified()
public string GetProperty(string name)
public bool GetBoolProperty(string name)
public T GetProperty(string name)
public IEnumerable`1<KeyValuePair`2<string, string>> get_Properties()
public int get_LocalPrice()
public string get_LocalPriceFormatted()
public int get_LocalBasePrice()
public string get_LocalBasePriceFormatted()
public InventoryRecipe[] GetRecipesContainingThis()
public bool op_Equality(InventoryDef a, InventoryDef b)
public bool op_Inequality(InventoryDef a, InventoryDef b)
public bool Equals(object p)
public int GetHashCode()
public bool Equals(InventoryDef p)
private InventoryRecipe <GetRecipes>b__21_0(string x)
private bool <GetRecipesContainingThis>b__44_3(InventoryRecipe x)
}
public Steamworks.InventoryItem : ValueType {
internal InventoryItemId _id
internal InventoryDefId _def
internal SteamItemFlags _flags
internal ushort _quantity
internal Dictionary`2<string, string> _properties
public InventoryItemId Id
public InventoryDefId DefId
public int Quantity
public InventoryDef Def
public Dictionary`2<string, string> Properties
public bool IsNoTrade
public bool IsRemoved
public bool IsConsumed
public DateTime Acquired
public string Origin
public InventoryItemId get_Id()
public InventoryDefId get_DefId()
public int get_Quantity()
public InventoryDef get_Def()
public Dictionary`2<string, string> get_Properties()
public bool get_IsNoTrade()
public bool get_IsRemoved()
public bool get_IsConsumed()
public Task`1<Nullable`1<InventoryResult>> ConsumeAsync(int amount)
public Task`1<Nullable`1<InventoryResult>> SplitStackAsync(int quantity)
public Task`1<Nullable`1<InventoryResult>> AddAsync(InventoryItem add, int quantity)
internal InventoryItem From(SteamItemDetails_t details)
internal Dictionary`2<string, string> GetProperties(SteamInventoryResult_t result, int index)
public DateTime get_Acquired()
public string get_Origin()
public bool op_Equality(InventoryItem a, InventoryItem b)
public bool op_Inequality(InventoryItem a, InventoryItem b)
public bool Equals(object p)
public int GetHashCode()
public bool Equals(InventoryItem p)
}
public Steamworks.InventoryRecipe : ValueType {
public InventoryDef Result
public Ingredient[] Ingredients
public string Source
internal InventoryRecipe FromString(string part, InventoryDef Result)
internal bool ContainsIngredient(InventoryDef inventoryDef)
public bool op_Equality(InventoryRecipe a, InventoryRecipe b)
public bool op_Inequality(InventoryRecipe a, InventoryRecipe b)
public bool Equals(object p)
public int GetHashCode()
public bool Equals(InventoryRecipe p)
}
public Steamworks.InventoryResult : ValueType {
internal SteamInventoryResult_t _id
private bool <Expired>k__BackingField
public bool Expired
public int ItemCount
public bool get_Expired()
internal void set_Expired(bool value)
internal void .ctor(SteamInventoryResult_t id, bool expired)
public int get_ItemCount()
public bool BelongsTo(SteamId steamId)
public InventoryItem[] GetItems(bool includeProperties)
public void Dispose()
internal Task`1<Nullable`1<InventoryResult>> GetAsync(SteamInventoryResult_t sresult)
public Byte[] Serialize()
}
public Steamworks.ISocketManager {
public void OnConnecting(Connection connection, ConnectionInfo info)
public void OnConnected(Connection connection, ConnectionInfo info)
public void OnDisconnected(Connection connection, ConnectionInfo info)
public void OnMessage(Connection connection, NetIdentity identity, IntPtr data, int size, long messageNum, long recvTime, int channel)
}
internal Steamworks.ISteamAppList : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamAppList_v001()
public IntPtr GetUserInterfacePointer()
private UInt32 _GetNumInstalledApps(IntPtr self)
internal UInt32 GetNumInstalledApps()
private UInt32 _GetInstalledApps(IntPtr self, AppId[] pvecAppID, UInt32 unMaxAppIDs)
internal UInt32 GetInstalledApps(AppId[] pvecAppID, UInt32 unMaxAppIDs)
private int _GetAppName(IntPtr self, AppId nAppID, IntPtr pchName, int cchNameMax)
internal int GetAppName(AppId nAppID, String& pchName)
private int _GetAppInstallDir(IntPtr self, AppId nAppID, IntPtr pchDirectory, int cchNameMax)
internal int GetAppInstallDir(AppId nAppID, String& pchDirectory)
private int _GetAppBuildId(IntPtr self, AppId nAppID)
internal int GetAppBuildId(AppId nAppID)
}
internal Steamworks.ISteamApps : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamApps_v008()
public IntPtr GetUserInterfacePointer()
private bool _BIsSubscribed(IntPtr self)
internal bool BIsSubscribed()
private bool _BIsLowViolence(IntPtr self)
internal bool BIsLowViolence()
private bool _BIsCybercafe(IntPtr self)
internal bool BIsCybercafe()
private bool _BIsVACBanned(IntPtr self)
internal bool BIsVACBanned()
private Utf8StringPointer _GetCurrentGameLanguage(IntPtr self)
internal string GetCurrentGameLanguage()
private Utf8StringPointer _GetAvailableGameLanguages(IntPtr self)
internal string GetAvailableGameLanguages()
private bool _BIsSubscribedApp(IntPtr self, AppId appID)
internal bool BIsSubscribedApp(AppId appID)
private bool _BIsDlcInstalled(IntPtr self, AppId appID)
internal bool BIsDlcInstalled(AppId appID)
private UInt32 _GetEarliestPurchaseUnixTime(IntPtr self, AppId nAppID)
internal UInt32 GetEarliestPurchaseUnixTime(AppId nAppID)
private bool _BIsSubscribedFromFreeWeekend(IntPtr self)
internal bool BIsSubscribedFromFreeWeekend()
private int _GetDLCCount(IntPtr self)
internal int GetDLCCount()
private bool _BGetDLCDataByIndex(IntPtr self, int iDLC, AppId& pAppID, Boolean& pbAvailable, IntPtr pchName, int cchNameBufferSize)
internal bool BGetDLCDataByIndex(int iDLC, AppId& pAppID, Boolean& pbAvailable, String& pchName)
private void _InstallDLC(IntPtr self, AppId nAppID)
internal void InstallDLC(AppId nAppID)
private void _UninstallDLC(IntPtr self, AppId nAppID)
internal void UninstallDLC(AppId nAppID)
private void _RequestAppProofOfPurchaseKey(IntPtr self, AppId nAppID)
internal void RequestAppProofOfPurchaseKey(AppId nAppID)
private bool _GetCurrentBetaName(IntPtr self, IntPtr pchName, int cchNameBufferSize)
internal bool GetCurrentBetaName(String& pchName)
private bool _MarkContentCorrupt(IntPtr self, bool bMissingFilesOnly)
internal bool MarkContentCorrupt(bool bMissingFilesOnly)
private UInt32 _GetInstalledDepots(IntPtr self, AppId appID, DepotId_t[] pvecDepots, UInt32 cMaxDepots)
internal UInt32 GetInstalledDepots(AppId appID, DepotId_t[] pvecDepots, UInt32 cMaxDepots)
private UInt32 _GetAppInstallDir(IntPtr self, AppId appID, IntPtr pchFolder, UInt32 cchFolderBufferSize)
internal UInt32 GetAppInstallDir(AppId appID, String& pchFolder)
private bool _BIsAppInstalled(IntPtr self, AppId appID)
internal bool BIsAppInstalled(AppId appID)
private SteamId _GetAppOwner(IntPtr self)
internal SteamId GetAppOwner()
private Utf8StringPointer _GetLaunchQueryParam(IntPtr self, string pchKey)
internal string GetLaunchQueryParam(string pchKey)
private bool _GetDlcDownloadProgress(IntPtr self, AppId nAppID, UInt64& punBytesDownloaded, UInt64& punBytesTotal)
internal bool GetDlcDownloadProgress(AppId nAppID, UInt64& punBytesDownloaded, UInt64& punBytesTotal)
private int _GetAppBuildId(IntPtr self)
internal int GetAppBuildId()
private void _RequestAllProofOfPurchaseKeys(IntPtr self)
internal void RequestAllProofOfPurchaseKeys()
private SteamAPICall_t _GetFileDetails(IntPtr self, string pszFileName)
internal CallResult`1<FileDetailsResult_t> GetFileDetails(string pszFileName)
private int _GetLaunchCommandLine(IntPtr self, IntPtr pszCommandLine, int cubCommandLine)
internal int GetLaunchCommandLine(String& pszCommandLine)
private bool _BIsSubscribedFromFamilySharing(IntPtr self)
internal bool BIsSubscribedFromFamilySharing()
private bool _BIsTimedTrial(IntPtr self, UInt32& punSecondsAllowed, UInt32& punSecondsPlayed)
internal bool BIsTimedTrial(UInt32& punSecondsAllowed, UInt32& punSecondsPlayed)
private bool _SetDlcContext(IntPtr self, AppId nAppID)
internal bool SetDlcContext(AppId nAppID)
}
internal Steamworks.ISteamClient : SteamInterface {
internal void .ctor(bool IsGameServer)
private HSteamPipe _CreateSteamPipe(IntPtr self)
internal HSteamPipe CreateSteamPipe()
private bool _BReleaseSteamPipe(IntPtr self, HSteamPipe hSteamPipe)
internal bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
private HSteamUser _ConnectToGlobalUser(IntPtr self, HSteamPipe hSteamPipe)
internal HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
private HSteamUser _CreateLocalUser(IntPtr self, HSteamPipe& phSteamPipe, AccountType eAccountType)
internal HSteamUser CreateLocalUser(HSteamPipe& phSteamPipe, AccountType eAccountType)
private void _ReleaseUser(IntPtr self, HSteamPipe hSteamPipe, HSteamUser hUser)
internal void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
private IntPtr _GetISteamUser(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamGameServer(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private void _SetLocalIPBinding(IntPtr self, SteamIPAddress& unIP, ushort usPort)
internal void SetLocalIPBinding(SteamIPAddress& unIP, ushort usPort)
private IntPtr _GetISteamFriends(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamUtils(IntPtr self, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamMatchmaking(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamMatchmakingServers(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamGenericInterface(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamUserStats(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamGameServerStats(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamApps(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamNetworking(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamRemoteStorage(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamScreenshots(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamGameSearch(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamGameSearch(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private UInt32 _GetIPCCallCount(IntPtr self)
internal UInt32 GetIPCCallCount()
private void _SetWarningMessageHook(IntPtr self, IntPtr pFunction)
internal void SetWarningMessageHook(IntPtr pFunction)
private bool _BShutdownIfAllPipesClosed(IntPtr self)
internal bool BShutdownIfAllPipesClosed()
private IntPtr _GetISteamHTTP(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamController(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamUGC(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamAppList(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamMusic(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamMusicRemote(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamHTMLSurface(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamInventory(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamVideo(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamParentalSettings(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamParentalSettings(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamInput(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamInput(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamParties(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamParties(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
private IntPtr _GetISteamRemotePlay(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
internal IntPtr GetISteamRemotePlay(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
}
internal Steamworks.ISteamController : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamController_v008()
public IntPtr GetUserInterfacePointer()
private bool _Init(IntPtr self)
internal bool Init()
private bool _Shutdown(IntPtr self)
internal bool Shutdown()
private void _RunFrame(IntPtr self)
internal void RunFrame()
private int _GetConnectedControllers(IntPtr self, ControllerHandle_t[] handlesOut)
internal int GetConnectedControllers(ControllerHandle_t[] handlesOut)
private ControllerActionSetHandle_t _GetActionSetHandle(IntPtr self, string pszActionSetName)
internal ControllerActionSetHandle_t GetActionSetHandle(string pszActionSetName)
private void _ActivateActionSet(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
internal void ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
private ControllerActionSetHandle_t _GetCurrentActionSet(IntPtr self, ControllerHandle_t controllerHandle)
internal ControllerActionSetHandle_t GetCurrentActionSet(ControllerHandle_t controllerHandle)
private void _ActivateActionSetLayer(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
internal void ActivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
private void _DeactivateActionSetLayer(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
internal void DeactivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
private void _DeactivateAllActionSetLayers(IntPtr self, ControllerHandle_t controllerHandle)
internal void DeactivateAllActionSetLayers(ControllerHandle_t controllerHandle)
private int _GetActiveActionSetLayers(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t[] handlesOut)
internal int GetActiveActionSetLayers(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t[] handlesOut)
private ControllerDigitalActionHandle_t _GetDigitalActionHandle(IntPtr self, string pszActionName)
internal ControllerDigitalActionHandle_t GetDigitalActionHandle(string pszActionName)
private DigitalState _GetDigitalActionData(IntPtr self, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
internal DigitalState GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
private int _GetDigitalActionOrigins(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, ControllerActionOrigin& originsOut)
internal int GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, ControllerActionOrigin& originsOut)
private ControllerAnalogActionHandle_t _GetAnalogActionHandle(IntPtr self, string pszActionName)
internal ControllerAnalogActionHandle_t GetAnalogActionHandle(string pszActionName)
private AnalogState _GetAnalogActionData(IntPtr self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
internal AnalogState GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
private int _GetAnalogActionOrigins(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, ControllerActionOrigin& originsOut)
internal int GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, ControllerActionOrigin& originsOut)
private Utf8StringPointer _GetGlyphForActionOrigin(IntPtr self, ControllerActionOrigin eOrigin)
internal string GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
private Utf8StringPointer _GetStringForActionOrigin(IntPtr self, ControllerActionOrigin eOrigin)
internal string GetStringForActionOrigin(ControllerActionOrigin eOrigin)
private void _StopAnalogActionMomentum(IntPtr self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
internal void StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
private MotionState _GetMotionData(IntPtr self, ControllerHandle_t controllerHandle)
internal MotionState GetMotionData(ControllerHandle_t controllerHandle)
private void _TriggerHapticPulse(IntPtr self, ControllerHandle_t controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
internal void TriggerHapticPulse(ControllerHandle_t controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
private void _TriggerRepeatedHapticPulse(IntPtr self, ControllerHandle_t controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, UInt32 nFlags)
internal void TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, UInt32 nFlags)
private void _TriggerVibration(IntPtr self, ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
internal void TriggerVibration(ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
private void _SetLEDColor(IntPtr self, ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, UInt32 nFlags)
internal void SetLEDColor(ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, UInt32 nFlags)
private bool _ShowBindingPanel(IntPtr self, ControllerHandle_t controllerHandle)
internal bool ShowBindingPanel(ControllerHandle_t controllerHandle)
private InputType _GetInputTypeForHandle(IntPtr self, ControllerHandle_t controllerHandle)
internal InputType GetInputTypeForHandle(ControllerHandle_t controllerHandle)
private ControllerHandle_t _GetControllerForGamepadIndex(IntPtr self, int nIndex)
internal ControllerHandle_t GetControllerForGamepadIndex(int nIndex)
private int _GetGamepadIndexForController(IntPtr self, ControllerHandle_t ulControllerHandle)
internal int GetGamepadIndexForController(ControllerHandle_t ulControllerHandle)
private Utf8StringPointer _GetStringForXboxOrigin(IntPtr self, XboxOrigin eOrigin)
internal string GetStringForXboxOrigin(XboxOrigin eOrigin)
private Utf8StringPointer _GetGlyphForXboxOrigin(IntPtr self, XboxOrigin eOrigin)
internal string GetGlyphForXboxOrigin(XboxOrigin eOrigin)
private ControllerActionOrigin _GetActionOriginFromXboxOrigin(IntPtr self, ControllerHandle_t controllerHandle, XboxOrigin eOrigin)
internal ControllerActionOrigin GetActionOriginFromXboxOrigin(ControllerHandle_t controllerHandle, XboxOrigin eOrigin)
private ControllerActionOrigin _TranslateActionOrigin(IntPtr self, InputType eDestinationInputType, ControllerActionOrigin eSourceOrigin)
internal ControllerActionOrigin TranslateActionOrigin(InputType eDestinationInputType, ControllerActionOrigin eSourceOrigin)
private bool _GetControllerBindingRevision(IntPtr self, ControllerHandle_t controllerHandle, Int32& pMajor, Int32& pMinor)
internal bool GetControllerBindingRevision(ControllerHandle_t controllerHandle, Int32& pMajor, Int32& pMinor)
}
internal Steamworks.ISteamFriends : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamFriends_v017()
public IntPtr GetUserInterfacePointer()
private Utf8StringPointer _GetPersonaName(IntPtr self)
internal string GetPersonaName()
private SteamAPICall_t _SetPersonaName(IntPtr self, string pchPersonaName)
internal CallResult`1<SetPersonaNameResponse_t> SetPersonaName(string pchPersonaName)
private FriendState _GetPersonaState(IntPtr self)
internal FriendState GetPersonaState()
private int _GetFriendCount(IntPtr self, int iFriendFlags)
internal int GetFriendCount(int iFriendFlags)
private SteamId _GetFriendByIndex(IntPtr self, int iFriend, int iFriendFlags)
internal SteamId GetFriendByIndex(int iFriend, int iFriendFlags)
private Relationship _GetFriendRelationship(IntPtr self, SteamId steamIDFriend)
internal Relationship GetFriendRelationship(SteamId steamIDFriend)
private FriendState _GetFriendPersonaState(IntPtr self, SteamId steamIDFriend)
internal FriendState GetFriendPersonaState(SteamId steamIDFriend)
private Utf8StringPointer _GetFriendPersonaName(IntPtr self, SteamId steamIDFriend)
internal string GetFriendPersonaName(SteamId steamIDFriend)
private bool _GetFriendGamePlayed(IntPtr self, SteamId steamIDFriend, FriendGameInfo_t& pFriendGameInfo)
internal bool GetFriendGamePlayed(SteamId steamIDFriend, FriendGameInfo_t& pFriendGameInfo)
private Utf8StringPointer _GetFriendPersonaNameHistory(IntPtr self, SteamId steamIDFriend, int iPersonaName)
internal string GetFriendPersonaNameHistory(SteamId steamIDFriend, int iPersonaName)
private int _GetFriendSteamLevel(IntPtr self, SteamId steamIDFriend)
internal int GetFriendSteamLevel(SteamId steamIDFriend)
private Utf8StringPointer _GetPlayerNickname(IntPtr self, SteamId steamIDPlayer)
internal string GetPlayerNickname(SteamId steamIDPlayer)
private int _GetFriendsGroupCount(IntPtr self)
internal int GetFriendsGroupCount()
private FriendsGroupID_t _GetFriendsGroupIDByIndex(IntPtr self, int iFG)
internal FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG)
private Utf8StringPointer _GetFriendsGroupName(IntPtr self, FriendsGroupID_t friendsGroupID)
internal string GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
private int _GetFriendsGroupMembersCount(IntPtr self, FriendsGroupID_t friendsGroupID)
internal int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
private void _GetFriendsGroupMembersList(IntPtr self, FriendsGroupID_t friendsGroupID, SteamId[] pOutSteamIDMembers, int nMembersCount)
internal void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, SteamId[] pOutSteamIDMembers, int nMembersCount)
private bool _HasFriend(IntPtr self, SteamId steamIDFriend, int iFriendFlags)
internal bool HasFriend(SteamId steamIDFriend, int iFriendFlags)
private int _GetClanCount(IntPtr self)
internal int GetClanCount()
private SteamId _GetClanByIndex(IntPtr self, int iClan)
internal SteamId GetClanByIndex(int iClan)
private Utf8StringPointer _GetClanName(IntPtr self, SteamId steamIDClan)
internal string GetClanName(SteamId steamIDClan)
private Utf8StringPointer _GetClanTag(IntPtr self, SteamId steamIDClan)
internal string GetClanTag(SteamId steamIDClan)
private bool _GetClanActivityCounts(IntPtr self, SteamId steamIDClan, Int32& pnOnline, Int32& pnInGame, Int32& pnChatting)
internal bool GetClanActivityCounts(SteamId steamIDClan, Int32& pnOnline, Int32& pnInGame, Int32& pnChatting)
private SteamAPICall_t _DownloadClanActivityCounts(IntPtr self, SteamId[] psteamIDClans, int cClansToRequest)
internal CallResult`1<DownloadClanActivityCountsResult_t> DownloadClanActivityCounts(SteamId[] psteamIDClans, int cClansToRequest)
private int _GetFriendCountFromSource(IntPtr self, SteamId steamIDSource)
internal int GetFriendCountFromSource(SteamId steamIDSource)
private SteamId _GetFriendFromSourceByIndex(IntPtr self, SteamId steamIDSource, int iFriend)
internal SteamId GetFriendFromSourceByIndex(SteamId steamIDSource, int iFriend)
private bool _IsUserInSource(IntPtr self, SteamId steamIDUser, SteamId steamIDSource)
internal bool IsUserInSource(SteamId steamIDUser, SteamId steamIDSource)
private void _SetInGameVoiceSpeaking(IntPtr self, SteamId steamIDUser, bool bSpeaking)
internal void SetInGameVoiceSpeaking(SteamId steamIDUser, bool bSpeaking)
private void _ActivateGameOverlay(IntPtr self, string pchDialog)
internal void ActivateGameOverlay(string pchDialog)
private void _ActivateGameOverlayToUser(IntPtr self, string pchDialog, SteamId steamID)
internal void ActivateGameOverlayToUser(string pchDialog, SteamId steamID)
private void _ActivateGameOverlayToWebPage(IntPtr self, string pchURL, ActivateGameOverlayToWebPageMode eMode)
internal void ActivateGameOverlayToWebPage(string pchURL, ActivateGameOverlayToWebPageMode eMode)
private void _ActivateGameOverlayToStore(IntPtr self, AppId nAppID, OverlayToStoreFlag eFlag)
internal void ActivateGameOverlayToStore(AppId nAppID, OverlayToStoreFlag eFlag)
private void _SetPlayedWith(IntPtr self, SteamId steamIDUserPlayedWith)
internal void SetPlayedWith(SteamId steamIDUserPlayedWith)
private void _ActivateGameOverlayInviteDialog(IntPtr self, SteamId steamIDLobby)
internal void ActivateGameOverlayInviteDialog(SteamId steamIDLobby)
private int _GetSmallFriendAvatar(IntPtr self, SteamId steamIDFriend)
internal int GetSmallFriendAvatar(SteamId steamIDFriend)
private int _GetMediumFriendAvatar(IntPtr self, SteamId steamIDFriend)
internal int GetMediumFriendAvatar(SteamId steamIDFriend)
private int _GetLargeFriendAvatar(IntPtr self, SteamId steamIDFriend)
internal int GetLargeFriendAvatar(SteamId steamIDFriend)
private bool _RequestUserInformation(IntPtr self, SteamId steamIDUser, bool bRequireNameOnly)
internal bool RequestUserInformation(SteamId steamIDUser, bool bRequireNameOnly)
private SteamAPICall_t _RequestClanOfficerList(IntPtr self, SteamId steamIDClan)
internal CallResult`1<ClanOfficerListResponse_t> RequestClanOfficerList(SteamId steamIDClan)
private SteamId _GetClanOwner(IntPtr self, SteamId steamIDClan)
internal SteamId GetClanOwner(SteamId steamIDClan)
private int _GetClanOfficerCount(IntPtr self, SteamId steamIDClan)
internal int GetClanOfficerCount(SteamId steamIDClan)
private SteamId _GetClanOfficerByIndex(IntPtr self, SteamId steamIDClan, int iOfficer)
internal SteamId GetClanOfficerByIndex(SteamId steamIDClan, int iOfficer)
private UInt32 _GetUserRestrictions(IntPtr self)
internal UInt32 GetUserRestrictions()
private bool _SetRichPresence(IntPtr self, string pchKey, string pchValue)
internal bool SetRichPresence(string pchKey, string pchValue)
private void _ClearRichPresence(IntPtr self)
internal void ClearRichPresence()
private Utf8StringPointer _GetFriendRichPresence(IntPtr self, SteamId steamIDFriend, string pchKey)
internal string GetFriendRichPresence(SteamId steamIDFriend, string pchKey)
private int _GetFriendRichPresenceKeyCount(IntPtr self, SteamId steamIDFriend)
internal int GetFriendRichPresenceKeyCount(SteamId steamIDFriend)
private Utf8StringPointer _GetFriendRichPresenceKeyByIndex(IntPtr self, SteamId steamIDFriend, int iKey)
internal string GetFriendRichPresenceKeyByIndex(SteamId steamIDFriend, int iKey)
private void _RequestFriendRichPresence(IntPtr self, SteamId steamIDFriend)
internal void RequestFriendRichPresence(SteamId steamIDFriend)
private bool _InviteUserToGame(IntPtr self, SteamId steamIDFriend, string pchConnectString)
internal bool InviteUserToGame(SteamId steamIDFriend, string pchConnectString)
private int _GetCoplayFriendCount(IntPtr self)
internal int GetCoplayFriendCount()
private SteamId _GetCoplayFriend(IntPtr self, int iCoplayFriend)
internal SteamId GetCoplayFriend(int iCoplayFriend)
private int _GetFriendCoplayTime(IntPtr self, SteamId steamIDFriend)
internal int GetFriendCoplayTime(SteamId steamIDFriend)
private AppId _GetFriendCoplayGame(IntPtr self, SteamId steamIDFriend)
internal AppId GetFriendCoplayGame(SteamId steamIDFriend)
private SteamAPICall_t _JoinClanChatRoom(IntPtr self, SteamId steamIDClan)
internal CallResult`1<JoinClanChatRoomCompletionResult_t> JoinClanChatRoom(SteamId steamIDClan)
private bool _LeaveClanChatRoom(IntPtr self, SteamId steamIDClan)
internal bool LeaveClanChatRoom(SteamId steamIDClan)
private int _GetClanChatMemberCount(IntPtr self, SteamId steamIDClan)
internal int GetClanChatMemberCount(SteamId steamIDClan)
private SteamId _GetChatMemberByIndex(IntPtr self, SteamId steamIDClan, int iUser)
internal SteamId GetChatMemberByIndex(SteamId steamIDClan, int iUser)
private bool _SendClanChatMessage(IntPtr self, SteamId steamIDClanChat, string pchText)
internal bool SendClanChatMessage(SteamId steamIDClanChat, string pchText)
private int _GetClanChatMessage(IntPtr self, SteamId steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, ChatEntryType& peChatEntryType, SteamId& psteamidChatter)
internal int GetClanChatMessage(SteamId steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, ChatEntryType& peChatEntryType, SteamId& psteamidChatter)
private bool _IsClanChatAdmin(IntPtr self, SteamId steamIDClanChat, SteamId steamIDUser)
internal bool IsClanChatAdmin(SteamId steamIDClanChat, SteamId steamIDUser)
private bool _IsClanChatWindowOpenInSteam(IntPtr self, SteamId steamIDClanChat)
internal bool IsClanChatWindowOpenInSteam(SteamId steamIDClanChat)
private bool _OpenClanChatWindowInSteam(IntPtr self, SteamId steamIDClanChat)
internal bool OpenClanChatWindowInSteam(SteamId steamIDClanChat)
private bool _CloseClanChatWindowInSteam(IntPtr self, SteamId steamIDClanChat)
internal bool CloseClanChatWindowInSteam(SteamId steamIDClanChat)
private bool _SetListenForFriendsMessages(IntPtr self, bool bInterceptEnabled)
internal bool SetListenForFriendsMessages(bool bInterceptEnabled)
private bool _ReplyToFriendMessage(IntPtr self, SteamId steamIDFriend, string pchMsgToSend)
internal bool ReplyToFriendMessage(SteamId steamIDFriend, string pchMsgToSend)
private int _GetFriendMessage(IntPtr self, SteamId steamIDFriend, int iMessageID, IntPtr pvData, int cubData, ChatEntryType& peChatEntryType)
internal int GetFriendMessage(SteamId steamIDFriend, int iMessageID, IntPtr pvData, int cubData, ChatEntryType& peChatEntryType)
private SteamAPICall_t _GetFollowerCount(IntPtr self, SteamId steamID)
internal CallResult`1<FriendsGetFollowerCount_t> GetFollowerCount(SteamId steamID)
private SteamAPICall_t _IsFollowing(IntPtr self, SteamId steamID)
internal CallResult`1<FriendsIsFollowing_t> IsFollowing(SteamId steamID)
private SteamAPICall_t _EnumerateFollowingList(IntPtr self, UInt32 unStartIndex)
internal CallResult`1<FriendsEnumerateFollowingList_t> EnumerateFollowingList(UInt32 unStartIndex)
private bool _IsClanPublic(IntPtr self, SteamId steamIDClan)
internal bool IsClanPublic(SteamId steamIDClan)
private bool _IsClanOfficialGameGroup(IntPtr self, SteamId steamIDClan)
internal bool IsClanOfficialGameGroup(SteamId steamIDClan)
private int _GetNumChatsWithUnreadPriorityMessages(IntPtr self)
internal int GetNumChatsWithUnreadPriorityMessages()
private void _ActivateGameOverlayRemotePlayTogetherInviteDialog(IntPtr self, SteamId steamIDLobby)
internal void ActivateGameOverlayRemotePlayTogetherInviteDialog(SteamId steamIDLobby)
private bool _RegisterProtocolInOverlayBrowser(IntPtr self, string pchProtocol)
internal bool RegisterProtocolInOverlayBrowser(string pchProtocol)
private void _ActivateGameOverlayInviteDialogConnectString(IntPtr self, string pchConnectString)
internal void ActivateGameOverlayInviteDialogConnectString(string pchConnectString)
private SteamAPICall_t _RequestEquippedProfileItems(IntPtr self, SteamId steamID)
internal CallResult`1<EquippedProfileItems_t> RequestEquippedProfileItems(SteamId steamID)
private bool _BHasEquippedProfileItem(IntPtr self, SteamId steamID, CommunityProfileItemType itemType)
internal bool BHasEquippedProfileItem(SteamId steamID, CommunityProfileItemType itemType)
private Utf8StringPointer _GetProfileItemPropertyString(IntPtr self, SteamId steamID, CommunityProfileItemType itemType, CommunityProfileItemProperty prop)
internal string GetProfileItemPropertyString(SteamId steamID, CommunityProfileItemType itemType, CommunityProfileItemProperty prop)
private UInt32 _GetProfileItemPropertyUint(IntPtr self, SteamId steamID, CommunityProfileItemType itemType, CommunityProfileItemProperty prop)
internal UInt32 GetProfileItemPropertyUint(SteamId steamID, CommunityProfileItemType itemType, CommunityProfileItemProperty prop)
}
internal Steamworks.ISteamGameSearch : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamGameSearch_v001()
public IntPtr GetUserInterfacePointer()
private GameSearchErrorCode_t _AddGameSearchParams(IntPtr self, string pchKeyToFind, string pchValuesToFind)
internal GameSearchErrorCode_t AddGameSearchParams(string pchKeyToFind, string pchValuesToFind)
private GameSearchErrorCode_t _SearchForGameWithLobby(IntPtr self, SteamId steamIDLobby, int nPlayerMin, int nPlayerMax)
internal GameSearchErrorCode_t SearchForGameWithLobby(SteamId steamIDLobby, int nPlayerMin, int nPlayerMax)
private GameSearchErrorCode_t _SearchForGameSolo(IntPtr self, int nPlayerMin, int nPlayerMax)
internal GameSearchErrorCode_t SearchForGameSolo(int nPlayerMin, int nPlayerMax)
private GameSearchErrorCode_t _AcceptGame(IntPtr self)
internal GameSearchErrorCode_t AcceptGame()
private GameSearchErrorCode_t _DeclineGame(IntPtr self)
internal GameSearchErrorCode_t DeclineGame()
private GameSearchErrorCode_t _RetrieveConnectionDetails(IntPtr self, SteamId steamIDHost, IntPtr pchConnectionDetails, int cubConnectionDetails)
internal GameSearchErrorCode_t RetrieveConnectionDetails(SteamId steamIDHost, String& pchConnectionDetails)
private GameSearchErrorCode_t _EndGameSearch(IntPtr self)
internal GameSearchErrorCode_t EndGameSearch()
private GameSearchErrorCode_t _SetGameHostParams(IntPtr self, string pchKey, string pchValue)
internal GameSearchErrorCode_t SetGameHostParams(string pchKey, string pchValue)
private GameSearchErrorCode_t _SetConnectionDetails(IntPtr self, string pchConnectionDetails, int cubConnectionDetails)
internal GameSearchErrorCode_t SetConnectionDetails(string pchConnectionDetails, int cubConnectionDetails)
private GameSearchErrorCode_t _RequestPlayersForGame(IntPtr self, int nPlayerMin, int nPlayerMax, int nMaxTeamSize)
internal GameSearchErrorCode_t RequestPlayersForGame(int nPlayerMin, int nPlayerMax, int nMaxTeamSize)
private GameSearchErrorCode_t _HostConfirmGameStart(IntPtr self, ulong ullUniqueGameID)
internal GameSearchErrorCode_t HostConfirmGameStart(ulong ullUniqueGameID)
private GameSearchErrorCode_t _CancelRequestPlayersForGame(IntPtr self)
internal GameSearchErrorCode_t CancelRequestPlayersForGame()
private GameSearchErrorCode_t _SubmitPlayerResult(IntPtr self, ulong ullUniqueGameID, SteamId steamIDPlayer, PlayerResult_t EPlayerResult)
internal GameSearchErrorCode_t SubmitPlayerResult(ulong ullUniqueGameID, SteamId steamIDPlayer, PlayerResult_t EPlayerResult)
private GameSearchErrorCode_t _EndGame(IntPtr self, ulong ullUniqueGameID)
internal GameSearchErrorCode_t EndGame(ulong ullUniqueGameID)
}
internal Steamworks.ISteamGameServer : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamGameServer_v015()
public IntPtr GetServerInterfacePointer()
private void _SetProduct(IntPtr self, string pszProduct)
internal void SetProduct(string pszProduct)
private void _SetGameDescription(IntPtr self, string pszGameDescription)
internal void SetGameDescription(string pszGameDescription)
private void _SetModDir(IntPtr self, string pszModDir)
internal void SetModDir(string pszModDir)
private void _SetDedicatedServer(IntPtr self, bool bDedicated)
internal void SetDedicatedServer(bool bDedicated)
private void _LogOn(IntPtr self, string pszToken)
internal void LogOn(string pszToken)
private void _LogOnAnonymous(IntPtr self)
internal void LogOnAnonymous()
private void _LogOff(IntPtr self)
internal void LogOff()
private bool _BLoggedOn(IntPtr self)
internal bool BLoggedOn()
private bool _BSecure(IntPtr self)
internal bool BSecure()
private SteamId _GetSteamID(IntPtr self)
internal SteamId GetSteamID()
private bool _WasRestartRequested(IntPtr self)
internal bool WasRestartRequested()
private void _SetMaxPlayerCount(IntPtr self, int cPlayersMax)
internal void SetMaxPlayerCount(int cPlayersMax)
private void _SetBotPlayerCount(IntPtr self, int cBotplayers)
internal void SetBotPlayerCount(int cBotplayers)
private void _SetServerName(IntPtr self, string pszServerName)
internal void SetServerName(string pszServerName)
private void _SetMapName(IntPtr self, string pszMapName)
internal void SetMapName(string pszMapName)
private void _SetPasswordProtected(IntPtr self, bool bPasswordProtected)
internal void SetPasswordProtected(bool bPasswordProtected)
private void _SetSpectatorPort(IntPtr self, ushort unSpectatorPort)
internal void SetSpectatorPort(ushort unSpectatorPort)
private void _SetSpectatorServerName(IntPtr self, string pszSpectatorServerName)
internal void SetSpectatorServerName(string pszSpectatorServerName)
private void _ClearAllKeyValues(IntPtr self)
internal void ClearAllKeyValues()
private void _SetKeyValue(IntPtr self, string pKey, string pValue)
internal void SetKeyValue(string pKey, string pValue)
private void _SetGameTags(IntPtr self, string pchGameTags)
internal void SetGameTags(string pchGameTags)
private void _SetGameData(IntPtr self, string pchGameData)
internal void SetGameData(string pchGameData)
private void _SetRegion(IntPtr self, string pszRegion)
internal void SetRegion(string pszRegion)
private void _SetAdvertiseServerActive(IntPtr self, bool bActive)
internal void SetAdvertiseServerActive(bool bActive)
private HAuthTicket _GetAuthSessionTicket(IntPtr self, IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket, NetIdentity& pSnid)
internal HAuthTicket GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket, NetIdentity& pSnid)
private BeginAuthResult _BeginAuthSession(IntPtr self, IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID)
internal BeginAuthResult BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID)
private void _EndAuthSession(IntPtr self, SteamId steamID)
internal void EndAuthSession(SteamId steamID)
private void _CancelAuthTicket(IntPtr self, HAuthTicket hAuthTicket)
internal void CancelAuthTicket(HAuthTicket hAuthTicket)
private UserHasLicenseForAppResult _UserHasLicenseForApp(IntPtr self, SteamId steamID, AppId appID)
internal UserHasLicenseForAppResult UserHasLicenseForApp(SteamId steamID, AppId appID)
private bool _RequestUserGroupStatus(IntPtr self, SteamId steamIDUser, SteamId steamIDGroup)
internal bool RequestUserGroupStatus(SteamId steamIDUser, SteamId steamIDGroup)
private void _GetGameplayStats(IntPtr self)
internal void GetGameplayStats()
private SteamAPICall_t _GetServerReputation(IntPtr self)
internal CallResult`1<GSReputation_t> GetServerReputation()
private SteamIPAddress _GetPublicIP(IntPtr self)
internal SteamIPAddress GetPublicIP()
private bool _HandleIncomingPacket(IntPtr self, IntPtr pData, int cbData, UInt32 srcIP, ushort srcPort)
internal bool HandleIncomingPacket(IntPtr pData, int cbData, UInt32 srcIP, ushort srcPort)
private int _GetNextOutgoingPacket(IntPtr self, IntPtr pOut, int cbMaxOut, UInt32& pNetAdr, UInt16& pPort)
internal int GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, UInt32& pNetAdr, UInt16& pPort)
private SteamAPICall_t _AssociateWithClan(IntPtr self, SteamId steamIDClan)
internal CallResult`1<AssociateWithClanResult_t> AssociateWithClan(SteamId steamIDClan)
private SteamAPICall_t _ComputeNewPlayerCompatibility(IntPtr self, SteamId steamIDNewPlayer)
internal CallResult`1<ComputeNewPlayerCompatibilityResult_t> ComputeNewPlayerCompatibility(SteamId steamIDNewPlayer)
private bool _SendUserConnectAndAuthenticate_DEPRECATED(IntPtr self, UInt32 unIPClient, IntPtr pvAuthBlob, UInt32 cubAuthBlobSize, SteamId& pSteamIDUser)
internal bool SendUserConnectAndAuthenticate_DEPRECATED(UInt32 unIPClient, IntPtr pvAuthBlob, UInt32 cubAuthBlobSize, SteamId& pSteamIDUser)
private SteamId _CreateUnauthenticatedUserConnection(IntPtr self)
internal SteamId CreateUnauthenticatedUserConnection()
private void _SendUserDisconnect_DEPRECATED(IntPtr self, SteamId steamIDUser)
internal void SendUserDisconnect_DEPRECATED(SteamId steamIDUser)
private bool _BUpdateUserData(IntPtr self, SteamId steamIDUser, string pchPlayerName, UInt32 uScore)
internal bool BUpdateUserData(SteamId steamIDUser, string pchPlayerName, UInt32 uScore)
}
internal Steamworks.ISteamGameServerStats : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamGameServerStats_v001()
public IntPtr GetServerInterfacePointer()
private SteamAPICall_t _RequestUserStats(IntPtr self, SteamId steamIDUser)
internal CallResult`1<GSStatsReceived_t> RequestUserStats(SteamId steamIDUser)
private bool _GetUserStat(IntPtr self, SteamId steamIDUser, string pchName, Int32& pData)
internal bool GetUserStat(SteamId steamIDUser, string pchName, Int32& pData)
private bool _GetUserStat(IntPtr self, SteamId steamIDUser, string pchName, Single& pData)
internal bool GetUserStat(SteamId steamIDUser, string pchName, Single& pData)
private bool _GetUserAchievement(IntPtr self, SteamId steamIDUser, string pchName, Boolean& pbAchieved)
internal bool GetUserAchievement(SteamId steamIDUser, string pchName, Boolean& pbAchieved)
private bool _SetUserStat(IntPtr self, SteamId steamIDUser, string pchName, int nData)
internal bool SetUserStat(SteamId steamIDUser, string pchName, int nData)
private bool _SetUserStat(IntPtr self, SteamId steamIDUser, string pchName, float fData)
internal bool SetUserStat(SteamId steamIDUser, string pchName, float fData)
private bool _UpdateUserAvgRateStat(IntPtr self, SteamId steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
internal bool UpdateUserAvgRateStat(SteamId steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
private bool _SetUserAchievement(IntPtr self, SteamId steamIDUser, string pchName)
internal bool SetUserAchievement(SteamId steamIDUser, string pchName)
private bool _ClearUserAchievement(IntPtr self, SteamId steamIDUser, string pchName)
internal bool ClearUserAchievement(SteamId steamIDUser, string pchName)
private SteamAPICall_t _StoreUserStats(IntPtr self, SteamId steamIDUser)
internal CallResult`1<GSStatsStored_t> StoreUserStats(SteamId steamIDUser)
}
internal Steamworks.ISteamHTMLSurface : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamHTMLSurface_v005()
public IntPtr GetUserInterfacePointer()
private bool _Init(IntPtr self)
internal bool Init()
private bool _Shutdown(IntPtr self)
internal bool Shutdown()
private SteamAPICall_t _CreateBrowser(IntPtr self, string pchUserAgent, string pchUserCSS)
internal CallResult`1<HTML_BrowserReady_t> CreateBrowser(string pchUserAgent, string pchUserCSS)
private void _RemoveBrowser(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void RemoveBrowser(HHTMLBrowser unBrowserHandle)
private void _LoadURL(IntPtr self, HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
internal void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
private void _SetSize(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 unWidth, UInt32 unHeight)
internal void SetSize(HHTMLBrowser unBrowserHandle, UInt32 unWidth, UInt32 unHeight)
private void _StopLoad(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void StopLoad(HHTMLBrowser unBrowserHandle)
private void _Reload(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void Reload(HHTMLBrowser unBrowserHandle)
private void _GoBack(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void GoBack(HHTMLBrowser unBrowserHandle)
private void _GoForward(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void GoForward(HHTMLBrowser unBrowserHandle)
private void _AddHeader(IntPtr self, HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
internal void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
private void _ExecuteJavascript(IntPtr self, HHTMLBrowser unBrowserHandle, string pchScript)
internal void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript)
private void _MouseUp(IntPtr self, HHTMLBrowser unBrowserHandle, IntPtr eMouseButton)
internal void MouseUp(HHTMLBrowser unBrowserHandle, IntPtr eMouseButton)
private void _MouseDown(IntPtr self, HHTMLBrowser unBrowserHandle, IntPtr eMouseButton)
internal void MouseDown(HHTMLBrowser unBrowserHandle, IntPtr eMouseButton)
private void _MouseDoubleClick(IntPtr self, HHTMLBrowser unBrowserHandle, IntPtr eMouseButton)
internal void MouseDoubleClick(HHTMLBrowser unBrowserHandle, IntPtr eMouseButton)
private void _MouseMove(IntPtr self, HHTMLBrowser unBrowserHandle, int x, int y)
internal void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
private void _MouseWheel(IntPtr self, HHTMLBrowser unBrowserHandle, int nDelta)
internal void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta)
private void _KeyDown(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 nNativeKeyCode, IntPtr eHTMLKeyModifiers, bool bIsSystemKey)
internal void KeyDown(HHTMLBrowser unBrowserHandle, UInt32 nNativeKeyCode, IntPtr eHTMLKeyModifiers, bool bIsSystemKey)
private void _KeyUp(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 nNativeKeyCode, IntPtr eHTMLKeyModifiers)
internal void KeyUp(HHTMLBrowser unBrowserHandle, UInt32 nNativeKeyCode, IntPtr eHTMLKeyModifiers)
private void _KeyChar(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 cUnicodeChar, IntPtr eHTMLKeyModifiers)
internal void KeyChar(HHTMLBrowser unBrowserHandle, UInt32 cUnicodeChar, IntPtr eHTMLKeyModifiers)
private void _SetHorizontalScroll(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 nAbsolutePixelScroll)
internal void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, UInt32 nAbsolutePixelScroll)
private void _SetVerticalScroll(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 nAbsolutePixelScroll)
internal void SetVerticalScroll(HHTMLBrowser unBrowserHandle, UInt32 nAbsolutePixelScroll)
private void _SetKeyFocus(IntPtr self, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
internal void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
private void _ViewSource(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void ViewSource(HHTMLBrowser unBrowserHandle)
private void _CopyToClipboard(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void CopyToClipboard(HHTMLBrowser unBrowserHandle)
private void _PasteFromClipboard(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void PasteFromClipboard(HHTMLBrowser unBrowserHandle)
private void _Find(IntPtr self, HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
internal void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
private void _StopFind(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void StopFind(HHTMLBrowser unBrowserHandle)
private void _GetLinkAtPosition(IntPtr self, HHTMLBrowser unBrowserHandle, int x, int y)
internal void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
private void _SetCookie(IntPtr self, string pchHostname, string pchKey, string pchValue, string pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly)
internal void SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly)
private void _SetPageScaleFactor(IntPtr self, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
internal void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
private void _SetBackgroundMode(IntPtr self, HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
internal void SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
private void _SetDPIScalingFactor(IntPtr self, HHTMLBrowser unBrowserHandle, float flDPIScaling)
internal void SetDPIScalingFactor(HHTMLBrowser unBrowserHandle, float flDPIScaling)
private void _OpenDeveloperTools(IntPtr self, HHTMLBrowser unBrowserHandle)
internal void OpenDeveloperTools(HHTMLBrowser unBrowserHandle)
private void _AllowStartRequest(IntPtr self, HHTMLBrowser unBrowserHandle, bool bAllowed)
internal void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
private void _JSDialogResponse(IntPtr self, HHTMLBrowser unBrowserHandle, bool bResult)
internal void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
private void _FileLoadDialogResponse(IntPtr self, HHTMLBrowser unBrowserHandle, string pchSelectedFiles)
internal void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, string pchSelectedFiles)
}
internal Steamworks.ISteamHTTP : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamHTTP_v003()
public IntPtr GetUserInterfacePointer()
internal IntPtr SteamAPI_SteamGameServerHTTP_v003()
public IntPtr GetServerInterfacePointer()
private HTTPRequestHandle _CreateHTTPRequest(IntPtr self, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
internal HTTPRequestHandle CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
private bool _SetHTTPRequestContextValue(IntPtr self, HTTPRequestHandle hRequest, ulong ulContextValue)
internal bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
private bool _SetHTTPRequestNetworkActivityTimeout(IntPtr self, HTTPRequestHandle hRequest, UInt32 unTimeoutSeconds)
internal bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, UInt32 unTimeoutSeconds)
private bool _SetHTTPRequestHeaderValue(IntPtr self, HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
internal bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
private bool _SetHTTPRequestGetOrPostParameter(IntPtr self, HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
internal bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
private bool _SendHTTPRequest(IntPtr self, HTTPRequestHandle hRequest, SteamAPICall_t& pCallHandle)
internal bool SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t& pCallHandle)
private bool _SendHTTPRequestAndStreamResponse(IntPtr self, HTTPRequestHandle hRequest, SteamAPICall_t& pCallHandle)
internal bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t& pCallHandle)
private bool _DeferHTTPRequest(IntPtr self, HTTPRequestHandle hRequest)
internal bool DeferHTTPRequest(HTTPRequestHandle hRequest)
private bool _PrioritizeHTTPRequest(IntPtr self, HTTPRequestHandle hRequest)
internal bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
private bool _GetHTTPResponseHeaderSize(IntPtr self, HTTPRequestHandle hRequest, string pchHeaderName, UInt32& unResponseHeaderSize)
internal bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, UInt32& unResponseHeaderSize)
private bool _GetHTTPResponseHeaderValue(IntPtr self, HTTPRequestHandle hRequest, string pchHeaderName, Byte& pHeaderValueBuffer, UInt32 unBufferSize)
internal bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, Byte& pHeaderValueBuffer, UInt32 unBufferSize)
private bool _GetHTTPResponseBodySize(IntPtr self, HTTPRequestHandle hRequest, UInt32& unBodySize)
internal bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, UInt32& unBodySize)
private bool _GetHTTPResponseBodyData(IntPtr self, HTTPRequestHandle hRequest, Byte& pBodyDataBuffer, UInt32 unBufferSize)
internal bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, Byte& pBodyDataBuffer, UInt32 unBufferSize)
private bool _GetHTTPStreamingResponseBodyData(IntPtr self, HTTPRequestHandle hRequest, UInt32 cOffset, Byte& pBodyDataBuffer, UInt32 unBufferSize)
internal bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, UInt32 cOffset, Byte& pBodyDataBuffer, UInt32 unBufferSize)
private bool _ReleaseHTTPRequest(IntPtr self, HTTPRequestHandle hRequest)
internal bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
private bool _GetHTTPDownloadProgressPct(IntPtr self, HTTPRequestHandle hRequest, Single& pflPercentOut)
internal bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, Single& pflPercentOut)
private bool _SetHTTPRequestRawPostBody(IntPtr self, HTTPRequestHandle hRequest, string pchContentType, Byte[] pubBody, UInt32 unBodyLen)
internal bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, Byte[] pubBody, UInt32 unBodyLen)
private HTTPCookieContainerHandle _CreateCookieContainer(IntPtr self, bool bAllowResponsesToModify)
internal HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
private bool _ReleaseCookieContainer(IntPtr self, HTTPCookieContainerHandle hCookieContainer)
internal bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
private bool _SetCookie(IntPtr self, HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
internal bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
private bool _SetHTTPRequestCookieContainer(IntPtr self, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
internal bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
private bool _SetHTTPRequestUserAgentInfo(IntPtr self, HTTPRequestHandle hRequest, string pchUserAgentInfo)
internal bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
private bool _SetHTTPRequestRequiresVerifiedCertificate(IntPtr self, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
internal bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
private bool _SetHTTPRequestAbsoluteTimeoutMS(IntPtr self, HTTPRequestHandle hRequest, UInt32 unMilliseconds)
internal bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, UInt32 unMilliseconds)
private bool _GetHTTPRequestWasTimedOut(IntPtr self, HTTPRequestHandle hRequest, Boolean& pbWasTimedOut)
internal bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, Boolean& pbWasTimedOut)
}
internal Steamworks.ISteamInput : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamInput_v006()
public IntPtr GetUserInterfacePointer()
private bool _Init(IntPtr self, bool bExplicitlyCallRunFrame)
internal bool Init(bool bExplicitlyCallRunFrame)
private bool _Shutdown(IntPtr self)
internal bool Shutdown()
private bool _SetInputActionManifestFilePath(IntPtr self, string pchInputActionManifestAbsolutePath)
internal bool SetInputActionManifestFilePath(string pchInputActionManifestAbsolutePath)
private void _RunFrame(IntPtr self, bool bReservedValue)
internal void RunFrame(bool bReservedValue)
private bool _BWaitForData(IntPtr self, bool bWaitForever, UInt32 unTimeout)
internal bool BWaitForData(bool bWaitForever, UInt32 unTimeout)
private bool _BNewDataAvailable(IntPtr self)
internal bool BNewDataAvailable()
private int _GetConnectedControllers(IntPtr self, InputHandle_t[] handlesOut)
internal int GetConnectedControllers(InputHandle_t[] handlesOut)
private void _EnableDeviceCallbacks(IntPtr self)
internal void EnableDeviceCallbacks()
private InputActionSetHandle_t _GetActionSetHandle(IntPtr self, string pszActionSetName)
internal InputActionSetHandle_t GetActionSetHandle(string pszActionSetName)
private void _ActivateActionSet(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)
internal void ActivateActionSet(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)
private InputActionSetHandle_t _GetCurrentActionSet(IntPtr self, InputHandle_t inputHandle)
internal InputActionSetHandle_t GetCurrentActionSet(InputHandle_t inputHandle)
private void _ActivateActionSetLayer(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
internal void ActivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
private void _DeactivateActionSetLayer(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
internal void DeactivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
private void _DeactivateAllActionSetLayers(IntPtr self, InputHandle_t inputHandle)
internal void DeactivateAllActionSetLayers(InputHandle_t inputHandle)
private int _GetActiveActionSetLayers(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t[] handlesOut)
internal int GetActiveActionSetLayers(InputHandle_t inputHandle, InputActionSetHandle_t[] handlesOut)
private InputDigitalActionHandle_t _GetDigitalActionHandle(IntPtr self, string pszActionName)
internal InputDigitalActionHandle_t GetDigitalActionHandle(string pszActionName)
private DigitalState _GetDigitalActionData(IntPtr self, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle)
internal DigitalState GetDigitalActionData(InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle)
private int _GetDigitalActionOrigins(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, InputActionOrigin& originsOut)
internal int GetDigitalActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, InputActionOrigin& originsOut)
private Utf8StringPointer _GetStringForDigitalActionName(IntPtr self, InputDigitalActionHandle_t eActionHandle)
internal string GetStringForDigitalActionName(InputDigitalActionHandle_t eActionHandle)
private InputAnalogActionHandle_t _GetAnalogActionHandle(IntPtr self, string pszActionName)
internal InputAnalogActionHandle_t GetAnalogActionHandle(string pszActionName)
private AnalogState _GetAnalogActionData(IntPtr self, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle)
internal AnalogState GetAnalogActionData(InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle)
private int _GetAnalogActionOrigins(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, InputActionOrigin& originsOut)
internal int GetAnalogActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, InputActionOrigin& originsOut)
private Utf8StringPointer _GetGlyphPNGForActionOrigin(IntPtr self, InputActionOrigin eOrigin, GlyphSize eSize, UInt32 unFlags)
internal string GetGlyphPNGForActionOrigin(InputActionOrigin eOrigin, GlyphSize eSize, UInt32 unFlags)
private Utf8StringPointer _GetGlyphSVGForActionOrigin(IntPtr self, InputActionOrigin eOrigin, UInt32 unFlags)
internal string GetGlyphSVGForActionOrigin(InputActionOrigin eOrigin, UInt32 unFlags)
private Utf8StringPointer _GetGlyphForActionOrigin_Legacy(IntPtr self, InputActionOrigin eOrigin)
internal string GetGlyphForActionOrigin_Legacy(InputActionOrigin eOrigin)
private Utf8StringPointer _GetStringForActionOrigin(IntPtr self, InputActionOrigin eOrigin)
internal string GetStringForActionOrigin(InputActionOrigin eOrigin)
private Utf8StringPointer _GetStringForAnalogActionName(IntPtr self, InputAnalogActionHandle_t eActionHandle)
internal string GetStringForAnalogActionName(InputAnalogActionHandle_t eActionHandle)
private void _StopAnalogActionMomentum(IntPtr self, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)
internal void StopAnalogActionMomentum(InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)
private MotionState _GetMotionData(IntPtr self, InputHandle_t inputHandle)
internal MotionState GetMotionData(InputHandle_t inputHandle)
private void _TriggerVibration(IntPtr self, InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed)
internal void TriggerVibration(InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed)
private void _TriggerVibrationExtended(IntPtr self, InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed, ushort usLeftTriggerSpeed, ushort usRightTriggerSpeed)
internal void TriggerVibrationExtended(InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed, ushort usLeftTriggerSpeed, ushort usRightTriggerSpeed)
private void _TriggerSimpleHapticEvent(IntPtr self, InputHandle_t inputHandle, ControllerHapticLocation eHapticLocation, byte nIntensity, char nGainDB, byte nOtherIntensity, char nOtherGainDB)
internal void TriggerSimpleHapticEvent(InputHandle_t inputHandle, ControllerHapticLocation eHapticLocation, byte nIntensity, char nGainDB, byte nOtherIntensity, char nOtherGainDB)
private void _SetLEDColor(IntPtr self, InputHandle_t inputHandle, byte nColorR, byte nColorG, byte nColorB, UInt32 nFlags)
internal void SetLEDColor(InputHandle_t inputHandle, byte nColorR, byte nColorG, byte nColorB, UInt32 nFlags)
private void _Legacy_TriggerHapticPulse(IntPtr self, InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
internal void Legacy_TriggerHapticPulse(InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
private void _Legacy_TriggerRepeatedHapticPulse(IntPtr self, InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, UInt32 nFlags)
internal void Legacy_TriggerRepeatedHapticPulse(InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, UInt32 nFlags)
private bool _ShowBindingPanel(IntPtr self, InputHandle_t inputHandle)
internal bool ShowBindingPanel(InputHandle_t inputHandle)
private InputType _GetInputTypeForHandle(IntPtr self, InputHandle_t inputHandle)
internal InputType GetInputTypeForHandle(InputHandle_t inputHandle)
private InputHandle_t _GetControllerForGamepadIndex(IntPtr self, int nIndex)
internal InputHandle_t GetControllerForGamepadIndex(int nIndex)
private int _GetGamepadIndexForController(IntPtr self, InputHandle_t ulinputHandle)
internal int GetGamepadIndexForController(InputHandle_t ulinputHandle)
private Utf8StringPointer _GetStringForXboxOrigin(IntPtr self, XboxOrigin eOrigin)
internal string GetStringForXboxOrigin(XboxOrigin eOrigin)
private Utf8StringPointer _GetGlyphForXboxOrigin(IntPtr self, XboxOrigin eOrigin)
internal string GetGlyphForXboxOrigin(XboxOrigin eOrigin)
private InputActionOrigin _GetActionOriginFromXboxOrigin(IntPtr self, InputHandle_t inputHandle, XboxOrigin eOrigin)
internal InputActionOrigin GetActionOriginFromXboxOrigin(InputHandle_t inputHandle, XboxOrigin eOrigin)
private InputActionOrigin _TranslateActionOrigin(IntPtr self, InputType eDestinationInputType, InputActionOrigin eSourceOrigin)
internal InputActionOrigin TranslateActionOrigin(InputType eDestinationInputType, InputActionOrigin eSourceOrigin)
private bool _GetDeviceBindingRevision(IntPtr self, InputHandle_t inputHandle, Int32& pMajor, Int32& pMinor)
internal bool GetDeviceBindingRevision(InputHandle_t inputHandle, Int32& pMajor, Int32& pMinor)
private UInt32 _GetRemotePlaySessionID(IntPtr self, InputHandle_t inputHandle)
internal UInt32 GetRemotePlaySessionID(InputHandle_t inputHandle)
private ushort _GetSessionInputConfigurationSettings(IntPtr self)
internal ushort GetSessionInputConfigurationSettings()
}
internal Steamworks.ISteamInventory : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamInventory_v003()
public IntPtr GetUserInterfacePointer()
internal IntPtr SteamAPI_SteamGameServerInventory_v003()
public IntPtr GetServerInterfacePointer()
private Result _GetResultStatus(IntPtr self, SteamInventoryResult_t resultHandle)
internal Result GetResultStatus(SteamInventoryResult_t resultHandle)
private bool _GetResultItems(IntPtr self, SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, UInt32& punOutItemsArraySize)
internal bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, UInt32& punOutItemsArraySize)
private bool _GetResultItemProperty(IntPtr self, SteamInventoryResult_t resultHandle, UInt32 unItemIndex, string pchPropertyName, IntPtr pchValueBuffer, UInt32& punValueBufferSizeOut)
internal bool GetResultItemProperty(SteamInventoryResult_t resultHandle, UInt32 unItemIndex, string pchPropertyName, String& pchValueBuffer, UInt32& punValueBufferSizeOut)
private UInt32 _GetResultTimestamp(IntPtr self, SteamInventoryResult_t resultHandle)
internal UInt32 GetResultTimestamp(SteamInventoryResult_t resultHandle)
private bool _CheckResultSteamID(IntPtr self, SteamInventoryResult_t resultHandle, SteamId steamIDExpected)
internal bool CheckResultSteamID(SteamInventoryResult_t resultHandle, SteamId steamIDExpected)
private void _DestroyResult(IntPtr self, SteamInventoryResult_t resultHandle)
internal void DestroyResult(SteamInventoryResult_t resultHandle)
private bool _GetAllItems(IntPtr self, SteamInventoryResult_t& pResultHandle)
internal bool GetAllItems(SteamInventoryResult_t& pResultHandle)
private bool _GetItemsByID(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryItemId& pInstanceIDs, UInt32 unCountInstanceIDs)
internal bool GetItemsByID(SteamInventoryResult_t& pResultHandle, InventoryItemId& pInstanceIDs, UInt32 unCountInstanceIDs)
private bool _SerializeResult(IntPtr self, SteamInventoryResult_t resultHandle, IntPtr pOutBuffer, UInt32& punOutBufferSize)
internal bool SerializeResult(SteamInventoryResult_t resultHandle, IntPtr pOutBuffer, UInt32& punOutBufferSize)
private bool _DeserializeResult(IntPtr self, SteamInventoryResult_t& pOutResultHandle, IntPtr pBuffer, UInt32 unBufferSize, bool bRESERVED_MUST_BE_FALSE)
internal bool DeserializeResult(SteamInventoryResult_t& pOutResultHandle, IntPtr pBuffer, UInt32 unBufferSize, bool bRESERVED_MUST_BE_FALSE)
private bool _GenerateItems(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayItemDefs, UInt32[] punArrayQuantity, UInt32 unArrayLength)
internal bool GenerateItems(SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayItemDefs, UInt32[] punArrayQuantity, UInt32 unArrayLength)
private bool _GrantPromoItems(IntPtr self, SteamInventoryResult_t& pResultHandle)
internal bool GrantPromoItems(SteamInventoryResult_t& pResultHandle)
private bool _AddPromoItem(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId itemDef)
internal bool AddPromoItem(SteamInventoryResult_t& pResultHandle, InventoryDefId itemDef)
private bool _AddPromoItems(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayItemDefs, UInt32 unArrayLength)
internal bool AddPromoItems(SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayItemDefs, UInt32 unArrayLength)
private bool _ConsumeItem(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryItemId itemConsume, UInt32 unQuantity)
internal bool ConsumeItem(SteamInventoryResult_t& pResultHandle, InventoryItemId itemConsume, UInt32 unQuantity)
private bool _ExchangeItems(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayGenerate, UInt32[] punArrayGenerateQuantity, UInt32 unArrayGenerateLength, InventoryItemId[] pArrayDestroy, UInt32[] punArrayDestroyQuantity, UInt32 unArrayDestroyLength)
internal bool ExchangeItems(SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayGenerate, UInt32[] punArrayGenerateQuantity, UInt32 unArrayGenerateLength, InventoryItemId[] pArrayDestroy, UInt32[] punArrayDestroyQuantity, UInt32 unArrayDestroyLength)
private bool _TransferItemQuantity(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryItemId itemIdSource, UInt32 unQuantity, InventoryItemId itemIdDest)
internal bool TransferItemQuantity(SteamInventoryResult_t& pResultHandle, InventoryItemId itemIdSource, UInt32 unQuantity, InventoryItemId itemIdDest)
private void _SendItemDropHeartbeat(IntPtr self)
internal void SendItemDropHeartbeat()
private bool _TriggerItemDrop(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId dropListDefinition)
internal bool TriggerItemDrop(SteamInventoryResult_t& pResultHandle, InventoryDefId dropListDefinition)
private bool _TradeItems(IntPtr self, SteamInventoryResult_t& pResultHandle, SteamId steamIDTradePartner, InventoryItemId[] pArrayGive, UInt32[] pArrayGiveQuantity, UInt32 nArrayGiveLength, InventoryItemId[] pArrayGet, UInt32[] pArrayGetQuantity, UInt32 nArrayGetLength)
internal bool TradeItems(SteamInventoryResult_t& pResultHandle, SteamId steamIDTradePartner, InventoryItemId[] pArrayGive, UInt32[] pArrayGiveQuantity, UInt32 nArrayGiveLength, InventoryItemId[] pArrayGet, UInt32[] pArrayGetQuantity, UInt32 nArrayGetLength)
private bool _LoadItemDefinitions(IntPtr self)
internal bool LoadItemDefinitions()
private bool _GetItemDefinitionIDs(IntPtr self, InventoryDefId[] pItemDefIDs, UInt32& punItemDefIDsArraySize)
internal bool GetItemDefinitionIDs(InventoryDefId[] pItemDefIDs, UInt32& punItemDefIDsArraySize)
private bool _GetItemDefinitionProperty(IntPtr self, InventoryDefId iDefinition, string pchPropertyName, IntPtr pchValueBuffer, UInt32& punValueBufferSizeOut)
internal bool GetItemDefinitionProperty(InventoryDefId iDefinition, string pchPropertyName, String& pchValueBuffer, UInt32& punValueBufferSizeOut)
private SteamAPICall_t _RequestEligiblePromoItemDefinitionsIDs(IntPtr self, SteamId steamID)
internal CallResult`1<SteamInventoryEligiblePromoItemDefIDs_t> RequestEligiblePromoItemDefinitionsIDs(SteamId steamID)
private bool _GetEligiblePromoItemDefinitionIDs(IntPtr self, SteamId steamID, InventoryDefId[] pItemDefIDs, UInt32& punItemDefIDsArraySize)
internal bool GetEligiblePromoItemDefinitionIDs(SteamId steamID, InventoryDefId[] pItemDefIDs, UInt32& punItemDefIDsArraySize)
private SteamAPICall_t _StartPurchase(IntPtr self, InventoryDefId[] pArrayItemDefs, UInt32[] punArrayQuantity, UInt32 unArrayLength)
internal CallResult`1<SteamInventoryStartPurchaseResult_t> StartPurchase(InventoryDefId[] pArrayItemDefs, UInt32[] punArrayQuantity, UInt32 unArrayLength)
private SteamAPICall_t _RequestPrices(IntPtr self)
internal CallResult`1<SteamInventoryRequestPricesResult_t> RequestPrices()
private UInt32 _GetNumItemsWithPrices(IntPtr self)
internal UInt32 GetNumItemsWithPrices()
private bool _GetItemsWithPrices(IntPtr self, InventoryDefId[] pArrayItemDefs, UInt64[] pCurrentPrices, UInt64[] pBasePrices, UInt32 unArrayLength)
internal bool GetItemsWithPrices(InventoryDefId[] pArrayItemDefs, UInt64[] pCurrentPrices, UInt64[] pBasePrices, UInt32 unArrayLength)
private bool _GetItemPrice(IntPtr self, InventoryDefId iDefinition, UInt64& pCurrentPrice, UInt64& pBasePrice)
internal bool GetItemPrice(InventoryDefId iDefinition, UInt64& pCurrentPrice, UInt64& pBasePrice)
private SteamInventoryUpdateHandle_t _StartUpdateProperties(IntPtr self)
internal SteamInventoryUpdateHandle_t StartUpdateProperties()
private bool _RemoveProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName)
internal bool RemoveProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName)
private bool _SetProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, string pchPropertyValue)
internal bool SetProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, string pchPropertyValue)
private bool _SetProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, bool bValue)
internal bool SetProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, bool bValue)
private bool _SetProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, long nValue)
internal bool SetProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, long nValue)
private bool _SetProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, float flValue)
internal bool SetProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, float flValue)
private bool _SubmitUpdateProperties(IntPtr self, SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t& pResultHandle)
internal bool SubmitUpdateProperties(SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t& pResultHandle)
private bool _InspectItem(IntPtr self, SteamInventoryResult_t& pResultHandle, string pchItemToken)
internal bool InspectItem(SteamInventoryResult_t& pResultHandle, string pchItemToken)
}
internal Steamworks.ISteamMatchmaking : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamMatchmaking_v009()
public IntPtr GetUserInterfacePointer()
private int _GetFavoriteGameCount(IntPtr self)
internal int GetFavoriteGameCount()
private bool _GetFavoriteGame(IntPtr self, int iGame, AppId& pnAppID, UInt32& pnIP, UInt16& pnConnPort, UInt16& pnQueryPort, UInt32& punFlags, UInt32& pRTime32LastPlayedOnServer)
internal bool GetFavoriteGame(int iGame, AppId& pnAppID, UInt32& pnIP, UInt16& pnConnPort, UInt16& pnQueryPort, UInt32& punFlags, UInt32& pRTime32LastPlayedOnServer)
private int _AddFavoriteGame(IntPtr self, AppId nAppID, UInt32 nIP, ushort nConnPort, ushort nQueryPort, UInt32 unFlags, UInt32 rTime32LastPlayedOnServer)
internal int AddFavoriteGame(AppId nAppID, UInt32 nIP, ushort nConnPort, ushort nQueryPort, UInt32 unFlags, UInt32 rTime32LastPlayedOnServer)
private bool _RemoveFavoriteGame(IntPtr self, AppId nAppID, UInt32 nIP, ushort nConnPort, ushort nQueryPort, UInt32 unFlags)
internal bool RemoveFavoriteGame(AppId nAppID, UInt32 nIP, ushort nConnPort, ushort nQueryPort, UInt32 unFlags)
private SteamAPICall_t _RequestLobbyList(IntPtr self)
internal CallResult`1<LobbyMatchList_t> RequestLobbyList()
private void _AddRequestLobbyListStringFilter(IntPtr self, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
internal void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
private void _AddRequestLobbyListNumericalFilter(IntPtr self, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
internal void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
private void _AddRequestLobbyListNearValueFilter(IntPtr self, string pchKeyToMatch, int nValueToBeCloseTo)
internal void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
private void _AddRequestLobbyListFilterSlotsAvailable(IntPtr self, int nSlotsAvailable)
internal void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
private void _AddRequestLobbyListDistanceFilter(IntPtr self, LobbyDistanceFilter eLobbyDistanceFilter)
internal void AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
private void _AddRequestLobbyListResultCountFilter(IntPtr self, int cMaxResults)
internal void AddRequestLobbyListResultCountFilter(int cMaxResults)
private void _AddRequestLobbyListCompatibleMembersFilter(IntPtr self, SteamId steamIDLobby)
internal void AddRequestLobbyListCompatibleMembersFilter(SteamId steamIDLobby)
private SteamId _GetLobbyByIndex(IntPtr self, int iLobby)
internal SteamId GetLobbyByIndex(int iLobby)
private SteamAPICall_t _CreateLobby(IntPtr self, LobbyType eLobbyType, int cMaxMembers)
internal CallResult`1<LobbyCreated_t> CreateLobby(LobbyType eLobbyType, int cMaxMembers)
private SteamAPICall_t _JoinLobby(IntPtr self, SteamId steamIDLobby)
internal CallResult`1<LobbyEnter_t> JoinLobby(SteamId steamIDLobby)
private void _LeaveLobby(IntPtr self, SteamId steamIDLobby)
internal void LeaveLobby(SteamId steamIDLobby)
private bool _InviteUserToLobby(IntPtr self, SteamId steamIDLobby, SteamId steamIDInvitee)
internal bool InviteUserToLobby(SteamId steamIDLobby, SteamId steamIDInvitee)
private int _GetNumLobbyMembers(IntPtr self, SteamId steamIDLobby)
internal int GetNumLobbyMembers(SteamId steamIDLobby)
private SteamId _GetLobbyMemberByIndex(IntPtr self, SteamId steamIDLobby, int iMember)
internal SteamId GetLobbyMemberByIndex(SteamId steamIDLobby, int iMember)
private Utf8StringPointer _GetLobbyData(IntPtr self, SteamId steamIDLobby, string pchKey)
internal string GetLobbyData(SteamId steamIDLobby, string pchKey)
private bool _SetLobbyData(IntPtr self, SteamId steamIDLobby, string pchKey, string pchValue)
internal bool SetLobbyData(SteamId steamIDLobby, string pchKey, string pchValue)
private int _GetLobbyDataCount(IntPtr self, SteamId steamIDLobby)
internal int GetLobbyDataCount(SteamId steamIDLobby)
private bool _GetLobbyDataByIndex(IntPtr self, SteamId steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize)
internal bool GetLobbyDataByIndex(SteamId steamIDLobby, int iLobbyData, String& pchKey, String& pchValue)
private bool _DeleteLobbyData(IntPtr self, SteamId steamIDLobby, string pchKey)
internal bool DeleteLobbyData(SteamId steamIDLobby, string pchKey)
private Utf8StringPointer _GetLobbyMemberData(IntPtr self, SteamId steamIDLobby, SteamId steamIDUser, string pchKey)
internal string GetLobbyMemberData(SteamId steamIDLobby, SteamId steamIDUser, string pchKey)
private void _SetLobbyMemberData(IntPtr self, SteamId steamIDLobby, string pchKey, string pchValue)
internal void SetLobbyMemberData(SteamId steamIDLobby, string pchKey, string pchValue)
private bool _SendLobbyChatMsg(IntPtr self, SteamId steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
internal bool SendLobbyChatMsg(SteamId steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
private int _GetLobbyChatEntry(IntPtr self, SteamId steamIDLobby, int iChatID, SteamId& pSteamIDUser, IntPtr pvData, int cubData, ChatEntryType& peChatEntryType)
internal int GetLobbyChatEntry(SteamId steamIDLobby, int iChatID, SteamId& pSteamIDUser, IntPtr pvData, int cubData, ChatEntryType& peChatEntryType)
private bool _RequestLobbyData(IntPtr self, SteamId steamIDLobby)
internal bool RequestLobbyData(SteamId steamIDLobby)
private void _SetLobbyGameServer(IntPtr self, SteamId steamIDLobby, UInt32 unGameServerIP, ushort unGameServerPort, SteamId steamIDGameServer)
internal void SetLobbyGameServer(SteamId steamIDLobby, UInt32 unGameServerIP, ushort unGameServerPort, SteamId steamIDGameServer)
private bool _GetLobbyGameServer(IntPtr self, SteamId steamIDLobby, UInt32& punGameServerIP, UInt16& punGameServerPort, SteamId& psteamIDGameServer)
internal bool GetLobbyGameServer(SteamId steamIDLobby, UInt32& punGameServerIP, UInt16& punGameServerPort, SteamId& psteamIDGameServer)
private bool _SetLobbyMemberLimit(IntPtr self, SteamId steamIDLobby, int cMaxMembers)
internal bool SetLobbyMemberLimit(SteamId steamIDLobby, int cMaxMembers)
private int _GetLobbyMemberLimit(IntPtr self, SteamId steamIDLobby)
internal int GetLobbyMemberLimit(SteamId steamIDLobby)
private bool _SetLobbyType(IntPtr self, SteamId steamIDLobby, LobbyType eLobbyType)
internal bool SetLobbyType(SteamId steamIDLobby, LobbyType eLobbyType)
private bool _SetLobbyJoinable(IntPtr self, SteamId steamIDLobby, bool bLobbyJoinable)
internal bool SetLobbyJoinable(SteamId steamIDLobby, bool bLobbyJoinable)
private SteamId _GetLobbyOwner(IntPtr self, SteamId steamIDLobby)
internal SteamId GetLobbyOwner(SteamId steamIDLobby)
private bool _SetLobbyOwner(IntPtr self, SteamId steamIDLobby, SteamId steamIDNewOwner)
internal bool SetLobbyOwner(SteamId steamIDLobby, SteamId steamIDNewOwner)
private bool _SetLinkedLobby(IntPtr self, SteamId steamIDLobby, SteamId steamIDLobbyDependent)
internal bool SetLinkedLobby(SteamId steamIDLobby, SteamId steamIDLobbyDependent)
}
internal Steamworks.ISteamMatchmakingPingResponse : SteamInterface {
internal void .ctor(bool IsGameServer)
private void _ServerResponded(IntPtr self, gameserveritem_t& server)
internal void ServerResponded(gameserveritem_t& server)
private void _ServerFailedToRespond(IntPtr self)
internal void ServerFailedToRespond()
}
internal Steamworks.ISteamMatchmakingPlayersResponse : SteamInterface {
internal void .ctor(bool IsGameServer)
private void _AddPlayerToList(IntPtr self, string pchName, int nScore, float flTimePlayed)
internal void AddPlayerToList(string pchName, int nScore, float flTimePlayed)
private void _PlayersFailedToRespond(IntPtr self)
internal void PlayersFailedToRespond()
private void _PlayersRefreshComplete(IntPtr self)
internal void PlayersRefreshComplete()
}
internal Steamworks.ISteamMatchmakingRulesResponse : SteamInterface {
internal void .ctor(bool IsGameServer)
private void _RulesResponded(IntPtr self, string pchRule, string pchValue)
internal void RulesResponded(string pchRule, string pchValue)
private void _RulesFailedToRespond(IntPtr self)
internal void RulesFailedToRespond()
private void _RulesRefreshComplete(IntPtr self)
internal void RulesRefreshComplete()
}
internal Steamworks.ISteamMatchmakingServerListResponse : SteamInterface {
internal void .ctor(bool IsGameServer)
private void _ServerResponded(IntPtr self, HServerListRequest hRequest, int iServer)
internal void ServerResponded(HServerListRequest hRequest, int iServer)
private void _ServerFailedToRespond(IntPtr self, HServerListRequest hRequest, int iServer)
internal void ServerFailedToRespond(HServerListRequest hRequest, int iServer)
private void _RefreshComplete(IntPtr self, HServerListRequest hRequest, MatchMakingServerResponse response)
internal void RefreshComplete(HServerListRequest hRequest, MatchMakingServerResponse response)
}
internal Steamworks.ISteamMatchmakingServers : SteamInterface {
private int hasSuccessfulResponseOffset
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamMatchmakingServers_v002()
public IntPtr GetUserInterfacePointer()
private HServerListRequest _RequestInternetServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
internal HServerListRequest RequestInternetServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
private HServerListRequest _RequestLANServerList(IntPtr self, AppId iApp, IntPtr pRequestServersResponse)
internal HServerListRequest RequestLANServerList(AppId iApp, IntPtr pRequestServersResponse)
private HServerListRequest _RequestFriendsServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
internal HServerListRequest RequestFriendsServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
private HServerListRequest _RequestFavoritesServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
internal HServerListRequest RequestFavoritesServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
private HServerListRequest _RequestHistoryServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
internal HServerListRequest RequestHistoryServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
private HServerListRequest _RequestSpectatorServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
internal HServerListRequest RequestSpectatorServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse)
private void _ReleaseRequest(IntPtr self, HServerListRequest hServerListRequest)
internal void ReleaseRequest(HServerListRequest hServerListRequest)
private IntPtr _GetServerDetails(IntPtr self, HServerListRequest hRequest, int iServer)
internal gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
private void _CancelQuery(IntPtr self, HServerListRequest hRequest)
internal void CancelQuery(HServerListRequest hRequest)
private void _RefreshQuery(IntPtr self, HServerListRequest hRequest)
internal void RefreshQuery(HServerListRequest hRequest)
private bool _IsRefreshing(IntPtr self, HServerListRequest hRequest)
internal bool IsRefreshing(HServerListRequest hRequest)
private int _GetServerCount(IntPtr self, HServerListRequest hRequest)
internal int GetServerCount(HServerListRequest hRequest)
private void _RefreshServer(IntPtr self, HServerListRequest hRequest, int iServer)
internal void RefreshServer(HServerListRequest hRequest, int iServer)
private HServerQuery _PingServer(IntPtr self, UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse)
internal HServerQuery PingServer(UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse)
private HServerQuery _PlayerDetails(IntPtr self, UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse)
internal HServerQuery PlayerDetails(UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse)
private HServerQuery _ServerRules(IntPtr self, UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse)
internal HServerQuery ServerRules(UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse)
private void _CancelServerQuery(IntPtr self, HServerQuery hServerQuery)
internal void CancelServerQuery(HServerQuery hServerQuery)
internal bool HasServerResponded(HServerListRequest hRequest, int iServer)
}
internal Steamworks.ISteamMusic : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamMusic_v001()
public IntPtr GetUserInterfacePointer()
private bool _BIsEnabled(IntPtr self)
internal bool BIsEnabled()
private bool _BIsPlaying(IntPtr self)
internal bool BIsPlaying()
private MusicStatus _GetPlaybackStatus(IntPtr self)
internal MusicStatus GetPlaybackStatus()
private void _Play(IntPtr self)
internal void Play()
private void _Pause(IntPtr self)
internal void Pause()
private void _PlayPrevious(IntPtr self)
internal void PlayPrevious()
private void _PlayNext(IntPtr self)
internal void PlayNext()
private void _SetVolume(IntPtr self, float flVolume)
internal void SetVolume(float flVolume)
private float _GetVolume(IntPtr self)
internal float GetVolume()
}
internal Steamworks.ISteamMusicRemote : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamMusicRemote_v001()
public IntPtr GetUserInterfacePointer()
private bool _RegisterSteamMusicRemote(IntPtr self, string pchName)
internal bool RegisterSteamMusicRemote(string pchName)
private bool _DeregisterSteamMusicRemote(IntPtr self)
internal bool DeregisterSteamMusicRemote()
private bool _BIsCurrentMusicRemote(IntPtr self)
internal bool BIsCurrentMusicRemote()
private bool _BActivationSuccess(IntPtr self, bool bValue)
internal bool BActivationSuccess(bool bValue)
private bool _SetDisplayName(IntPtr self, string pchDisplayName)
internal bool SetDisplayName(string pchDisplayName)
private bool _SetPNGIcon_64x64(IntPtr self, IntPtr pvBuffer, UInt32 cbBufferLength)
internal bool SetPNGIcon_64x64(IntPtr pvBuffer, UInt32 cbBufferLength)
private bool _EnablePlayPrevious(IntPtr self, bool bValue)
internal bool EnablePlayPrevious(bool bValue)
private bool _EnablePlayNext(IntPtr self, bool bValue)
internal bool EnablePlayNext(bool bValue)
private bool _EnableShuffled(IntPtr self, bool bValue)
internal bool EnableShuffled(bool bValue)
private bool _EnableLooped(IntPtr self, bool bValue)
internal bool EnableLooped(bool bValue)
private bool _EnableQueue(IntPtr self, bool bValue)
internal bool EnableQueue(bool bValue)
private bool _EnablePlaylists(IntPtr self, bool bValue)
internal bool EnablePlaylists(bool bValue)
private bool _UpdatePlaybackStatus(IntPtr self, MusicStatus nStatus)
internal bool UpdatePlaybackStatus(MusicStatus nStatus)
private bool _UpdateShuffled(IntPtr self, bool bValue)
internal bool UpdateShuffled(bool bValue)
private bool _UpdateLooped(IntPtr self, bool bValue)
internal bool UpdateLooped(bool bValue)
private bool _UpdateVolume(IntPtr self, float flValue)
internal bool UpdateVolume(float flValue)
private bool _CurrentEntryWillChange(IntPtr self)
internal bool CurrentEntryWillChange()
private bool _CurrentEntryIsAvailable(IntPtr self, bool bAvailable)
internal bool CurrentEntryIsAvailable(bool bAvailable)
private bool _UpdateCurrentEntryText(IntPtr self, string pchText)
internal bool UpdateCurrentEntryText(string pchText)
private bool _UpdateCurrentEntryElapsedSeconds(IntPtr self, int nValue)
internal bool UpdateCurrentEntryElapsedSeconds(int nValue)
private bool _UpdateCurrentEntryCoverArt(IntPtr self, IntPtr pvBuffer, UInt32 cbBufferLength)
internal bool UpdateCurrentEntryCoverArt(IntPtr pvBuffer, UInt32 cbBufferLength)
private bool _CurrentEntryDidChange(IntPtr self)
internal bool CurrentEntryDidChange()
private bool _QueueWillChange(IntPtr self)
internal bool QueueWillChange()
private bool _ResetQueueEntries(IntPtr self)
internal bool ResetQueueEntries()
private bool _SetQueueEntry(IntPtr self, int nID, int nPosition, string pchEntryText)
internal bool SetQueueEntry(int nID, int nPosition, string pchEntryText)
private bool _SetCurrentQueueEntry(IntPtr self, int nID)
internal bool SetCurrentQueueEntry(int nID)
private bool _QueueDidChange(IntPtr self)
internal bool QueueDidChange()
private bool _PlaylistWillChange(IntPtr self)
internal bool PlaylistWillChange()
private bool _ResetPlaylistEntries(IntPtr self)
internal bool ResetPlaylistEntries()
private bool _SetPlaylistEntry(IntPtr self, int nID, int nPosition, string pchEntryText)
internal bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
private bool _SetCurrentPlaylistEntry(IntPtr self, int nID)
internal bool SetCurrentPlaylistEntry(int nID)
private bool _PlaylistDidChange(IntPtr self)
internal bool PlaylistDidChange()
}
internal Steamworks.ISteamNetworking : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamNetworking_v006()
public IntPtr GetUserInterfacePointer()
internal IntPtr SteamAPI_SteamGameServerNetworking_v006()
public IntPtr GetServerInterfacePointer()
private bool _SendP2PPacket(IntPtr self, SteamId steamIDRemote, IntPtr pubData, UInt32 cubData, P2PSend eP2PSendType, int nChannel)
internal bool SendP2PPacket(SteamId steamIDRemote, IntPtr pubData, UInt32 cubData, P2PSend eP2PSendType, int nChannel)
private bool _IsP2PPacketAvailable(IntPtr self, UInt32& pcubMsgSize, int nChannel)
internal bool IsP2PPacketAvailable(UInt32& pcubMsgSize, int nChannel)
private bool _ReadP2PPacket(IntPtr self, IntPtr pubDest, UInt32 cubDest, UInt32& pcubMsgSize, SteamId& psteamIDRemote, int nChannel)
internal bool ReadP2PPacket(IntPtr pubDest, UInt32 cubDest, UInt32& pcubMsgSize, SteamId& psteamIDRemote, int nChannel)
private bool _AcceptP2PSessionWithUser(IntPtr self, SteamId steamIDRemote)
internal bool AcceptP2PSessionWithUser(SteamId steamIDRemote)
private bool _CloseP2PSessionWithUser(IntPtr self, SteamId steamIDRemote)
internal bool CloseP2PSessionWithUser(SteamId steamIDRemote)
private bool _CloseP2PChannelWithUser(IntPtr self, SteamId steamIDRemote, int nChannel)
internal bool CloseP2PChannelWithUser(SteamId steamIDRemote, int nChannel)
private bool _GetP2PSessionState(IntPtr self, SteamId steamIDRemote, P2PSessionState_t& pConnectionState)
internal bool GetP2PSessionState(SteamId steamIDRemote, P2PSessionState_t& pConnectionState)
private bool _AllowP2PPacketRelay(IntPtr self, bool bAllow)
internal bool AllowP2PPacketRelay(bool bAllow)
private SNetSocket_t _CreateP2PConnectionSocket(IntPtr self, SteamId steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
internal SNetSocket_t CreateP2PConnectionSocket(SteamId steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
}
internal Steamworks.ISteamNetworkingFakeUDPPort : SteamInterface {
internal void .ctor(bool IsGameServer)
private void _DestroyFakeUDPPort(IntPtr self)
internal void DestroyFakeUDPPort()
private Result _SendMessageToFakeIP(IntPtr self, NetAddress& remoteAddress, IntPtr pData, UInt32 cbData, int nSendFlags)
internal Result SendMessageToFakeIP(NetAddress& remoteAddress, IntPtr pData, UInt32 cbData, int nSendFlags)
private int _ReceiveMessages(IntPtr self, IntPtr ppOutMessages, int nMaxMessages)
internal int ReceiveMessages(IntPtr ppOutMessages, int nMaxMessages)
private void _ScheduleCleanup(IntPtr self, NetAddress& remoteAddress)
internal void ScheduleCleanup(NetAddress& remoteAddress)
}
internal Steamworks.ISteamNetworkingMessages : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamNetworkingMessages_SteamAPI_v002()
public IntPtr GetUserInterfacePointer()
internal IntPtr SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002()
public IntPtr GetServerInterfacePointer()
private Result _SendMessageToUser(IntPtr self, NetIdentity& identityRemote, IntPtr[] pubData, UInt32 cubData, int nSendFlags, int nRemoteChannel)
internal Result SendMessageToUser(NetIdentity& identityRemote, IntPtr[] pubData, UInt32 cubData, int nSendFlags, int nRemoteChannel)
private int _ReceiveMessagesOnChannel(IntPtr self, int nLocalChannel, IntPtr ppOutMessages, int nMaxMessages)
internal int ReceiveMessagesOnChannel(int nLocalChannel, IntPtr ppOutMessages, int nMaxMessages)
private bool _AcceptSessionWithUser(IntPtr self, NetIdentity& identityRemote)
internal bool AcceptSessionWithUser(NetIdentity& identityRemote)
private bool _CloseSessionWithUser(IntPtr self, NetIdentity& identityRemote)
internal bool CloseSessionWithUser(NetIdentity& identityRemote)
private bool _CloseChannelWithUser(IntPtr self, NetIdentity& identityRemote, int nLocalChannel)
internal bool CloseChannelWithUser(NetIdentity& identityRemote, int nLocalChannel)
private ConnectionState _GetSessionConnectionInfo(IntPtr self, NetIdentity& identityRemote, ConnectionInfo& pConnectionInfo, ConnectionStatus& pQuickStatus)
internal ConnectionState GetSessionConnectionInfo(NetIdentity& identityRemote, ConnectionInfo& pConnectionInfo, ConnectionStatus& pQuickStatus)
}
internal Steamworks.ISteamNetworkingSockets : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamNetworkingSockets_SteamAPI_v012()
public IntPtr GetUserInterfacePointer()
internal IntPtr SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012()
public IntPtr GetServerInterfacePointer()
private Socket _CreateListenSocketIP(IntPtr self, NetAddress& localAddress, int nOptions, NetKeyValue[] pOptions)
internal Socket CreateListenSocketIP(NetAddress& localAddress, int nOptions, NetKeyValue[] pOptions)
private Connection _ConnectByIPAddress(IntPtr self, NetAddress& address, int nOptions, NetKeyValue[] pOptions)
internal Connection ConnectByIPAddress(NetAddress& address, int nOptions, NetKeyValue[] pOptions)
private Socket _CreateListenSocketP2P(IntPtr self, int nLocalVirtualPort, int nOptions, NetKeyValue[] pOptions)
internal Socket CreateListenSocketP2P(int nLocalVirtualPort, int nOptions, NetKeyValue[] pOptions)
private Connection _ConnectP2P(IntPtr self, NetIdentity& identityRemote, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions)
internal Connection ConnectP2P(NetIdentity& identityRemote, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions)
private Result _AcceptConnection(IntPtr self, Connection hConn)
internal Result AcceptConnection(Connection hConn)
private bool _CloseConnection(IntPtr self, Connection hPeer, int nReason, string pszDebug, bool bEnableLinger)
internal bool CloseConnection(Connection hPeer, int nReason, string pszDebug, bool bEnableLinger)
private bool _CloseListenSocket(IntPtr self, Socket hSocket)
internal bool CloseListenSocket(Socket hSocket)
private bool _SetConnectionUserData(IntPtr self, Connection hPeer, long nUserData)
internal bool SetConnectionUserData(Connection hPeer, long nUserData)
private long _GetConnectionUserData(IntPtr self, Connection hPeer)
internal long GetConnectionUserData(Connection hPeer)
private void _SetConnectionName(IntPtr self, Connection hPeer, string pszName)
internal void SetConnectionName(Connection hPeer, string pszName)
private bool _GetConnectionName(IntPtr self, Connection hPeer, IntPtr pszName, int nMaxLen)
internal bool GetConnectionName(Connection hPeer, String& pszName)
private Result _SendMessageToConnection(IntPtr self, Connection hConn, IntPtr pData, UInt32 cbData, int nSendFlags, Int64& pOutMessageNumber)
internal Result SendMessageToConnection(Connection hConn, IntPtr pData, UInt32 cbData, int nSendFlags, Int64& pOutMessageNumber)
private void _SendMessages(IntPtr self, int nMessages, NetMsg** pMessages, Int64* pOutMessageNumberOrResult)
internal void SendMessages(int nMessages, NetMsg** pMessages, Int64* pOutMessageNumberOrResult)
private Result _FlushMessagesOnConnection(IntPtr self, Connection hConn)
internal Result FlushMessagesOnConnection(Connection hConn)
private int _ReceiveMessagesOnConnection(IntPtr self, Connection hConn, IntPtr ppOutMessages, int nMaxMessages)
internal int ReceiveMessagesOnConnection(Connection hConn, IntPtr ppOutMessages, int nMaxMessages)
private bool _GetConnectionInfo(IntPtr self, Connection hConn, ConnectionInfo& pInfo)
internal bool GetConnectionInfo(Connection hConn, ConnectionInfo& pInfo)
private Result _GetConnectionRealTimeStatus(IntPtr self, Connection hConn, ConnectionStatus& pStatus, int nLanes, ConnectionLaneStatus[] pLanes)
internal Result GetConnectionRealTimeStatus(Connection hConn, ConnectionStatus& pStatus, int nLanes, ConnectionLaneStatus[] pLanes)
private int _GetDetailedConnectionStatus(IntPtr self, Connection hConn, IntPtr pszBuf, int cbBuf)
internal int GetDetailedConnectionStatus(Connection hConn, String& pszBuf)
private bool _GetListenSocketAddress(IntPtr self, Socket hSocket, NetAddress& address)
internal bool GetListenSocketAddress(Socket hSocket, NetAddress& address)
private bool _CreateSocketPair(IntPtr self, Connection[] pOutConnection1, Connection[] pOutConnection2, bool bUseNetworkLoopback, NetIdentity& pIdentity1, NetIdentity& pIdentity2)
internal bool CreateSocketPair(Connection[] pOutConnection1, Connection[] pOutConnection2, bool bUseNetworkLoopback, NetIdentity& pIdentity1, NetIdentity& pIdentity2)
private Result _ConfigureConnectionLanes(IntPtr self, Connection hConn, int nNumLanes, Int32[] pLanePriorities, UInt16[] pLaneWeights)
internal Result ConfigureConnectionLanes(Connection hConn, int nNumLanes, Int32[] pLanePriorities, UInt16[] pLaneWeights)
private bool _GetIdentity(IntPtr self, NetIdentity& pIdentity)
internal bool GetIdentity(NetIdentity& pIdentity)
private SteamNetworkingAvailability _InitAuthentication(IntPtr self)
internal SteamNetworkingAvailability InitAuthentication()
private SteamNetworkingAvailability _GetAuthenticationStatus(IntPtr self, SteamNetAuthenticationStatus_t& pDetails)
internal SteamNetworkingAvailability GetAuthenticationStatus(SteamNetAuthenticationStatus_t& pDetails)
private HSteamNetPollGroup _CreatePollGroup(IntPtr self)
internal HSteamNetPollGroup CreatePollGroup()
private bool _DestroyPollGroup(IntPtr self, HSteamNetPollGroup hPollGroup)
internal bool DestroyPollGroup(HSteamNetPollGroup hPollGroup)
private bool _SetConnectionPollGroup(IntPtr self, Connection hConn, HSteamNetPollGroup hPollGroup)
internal bool SetConnectionPollGroup(Connection hConn, HSteamNetPollGroup hPollGroup)
private int _ReceiveMessagesOnPollGroup(IntPtr self, HSteamNetPollGroup hPollGroup, IntPtr ppOutMessages, int nMaxMessages)
internal int ReceiveMessagesOnPollGroup(HSteamNetPollGroup hPollGroup, IntPtr ppOutMessages, int nMaxMessages)
private bool _ReceivedRelayAuthTicket(IntPtr self, IntPtr pvTicket, int cbTicket, SteamDatagramRelayAuthTicket[] pOutParsedTicket)
internal bool ReceivedRelayAuthTicket(IntPtr pvTicket, int cbTicket, SteamDatagramRelayAuthTicket[] pOutParsedTicket)
private int _FindRelayAuthTicketForServer(IntPtr self, NetIdentity& identityGameServer, int nRemoteVirtualPort, SteamDatagramRelayAuthTicket[] pOutParsedTicket)
internal int FindRelayAuthTicketForServer(NetIdentity& identityGameServer, int nRemoteVirtualPort, SteamDatagramRelayAuthTicket[] pOutParsedTicket)
private Connection _ConnectToHostedDedicatedServer(IntPtr self, NetIdentity& identityTarget, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions)
internal Connection ConnectToHostedDedicatedServer(NetIdentity& identityTarget, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions)
private ushort _GetHostedDedicatedServerPort(IntPtr self)
internal ushort GetHostedDedicatedServerPort()
private SteamNetworkingPOPID _GetHostedDedicatedServerPOPID(IntPtr self)
internal SteamNetworkingPOPID GetHostedDedicatedServerPOPID()
private Result _GetHostedDedicatedServerAddress(IntPtr self, SteamDatagramHostedAddress& pRouting)
internal Result GetHostedDedicatedServerAddress(SteamDatagramHostedAddress& pRouting)
private Socket _CreateHostedDedicatedServerListenSocket(IntPtr self, int nLocalVirtualPort, int nOptions, NetKeyValue[] pOptions)
internal Socket CreateHostedDedicatedServerListenSocket(int nLocalVirtualPort, int nOptions, NetKeyValue[] pOptions)
private Result _GetGameCoordinatorServerLogin(IntPtr self, SteamDatagramGameCoordinatorServerLogin& pLoginInfo, Int32& pcbSignedBlob, IntPtr pBlob)
internal Result GetGameCoordinatorServerLogin(SteamDatagramGameCoordinatorServerLogin& pLoginInfo, Int32& pcbSignedBlob, IntPtr pBlob)
private Connection _ConnectP2PCustomSignaling(IntPtr self, IntPtr pSignaling, NetIdentity& pPeerIdentity, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions)
internal Connection ConnectP2PCustomSignaling(IntPtr pSignaling, NetIdentity& pPeerIdentity, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions)
private bool _ReceivedP2PCustomSignal(IntPtr self, IntPtr pMsg, int cbMsg, IntPtr pContext)
internal bool ReceivedP2PCustomSignal(IntPtr pMsg, int cbMsg, IntPtr pContext)
private bool _GetCertificateRequest(IntPtr self, Int32& pcbBlob, IntPtr pBlob, NetErrorMessage& errMsg)
internal bool GetCertificateRequest(Int32& pcbBlob, IntPtr pBlob, NetErrorMessage& errMsg)
private bool _SetCertificate(IntPtr self, IntPtr pCertificate, int cbCertificate, NetErrorMessage& errMsg)
internal bool SetCertificate(IntPtr pCertificate, int cbCertificate, NetErrorMessage& errMsg)
private void _ResetIdentity(IntPtr self, NetIdentity& pIdentity)
internal void ResetIdentity(NetIdentity& pIdentity)
private void _RunCallbacks(IntPtr self)
internal void RunCallbacks()
private bool _BeginAsyncRequestFakeIP(IntPtr self, int nNumPorts)
internal bool BeginAsyncRequestFakeIP(int nNumPorts)
private void _GetFakeIP(IntPtr self, int idxFirstPort, SteamNetworkingFakeIPResult_t& pInfo)
internal void GetFakeIP(int idxFirstPort, SteamNetworkingFakeIPResult_t& pInfo)
private Socket _CreateListenSocketP2PFakeIP(IntPtr self, int idxFakePort, int nOptions, NetKeyValue[] pOptions)
internal Socket CreateListenSocketP2PFakeIP(int idxFakePort, int nOptions, NetKeyValue[] pOptions)
private Result _GetRemoteFakeIPForConnection(IntPtr self, Connection hConn, NetAddress[] pOutAddr)
internal Result GetRemoteFakeIPForConnection(Connection hConn, NetAddress[] pOutAddr)
private IntPtr _CreateFakeUDPPort(IntPtr self, int idxFakeServerPort)
internal IntPtr CreateFakeUDPPort(int idxFakeServerPort)
}
internal Steamworks.ISteamNetworkingUtils : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamNetworkingUtils_SteamAPI_v004()
public IntPtr GetGlobalInterfacePointer()
private NetMsg* _AllocateMessage(IntPtr self, int cbAllocateBuffer)
internal NetMsg* AllocateMessage(int cbAllocateBuffer)
private void _InitRelayNetworkAccess(IntPtr self)
internal void InitRelayNetworkAccess()
private SteamNetworkingAvailability _GetRelayNetworkStatus(IntPtr self, SteamRelayNetworkStatus_t& pDetails)
internal SteamNetworkingAvailability GetRelayNetworkStatus(SteamRelayNetworkStatus_t& pDetails)
private float _GetLocalPingLocation(IntPtr self, NetPingLocation& result)
internal float GetLocalPingLocation(NetPingLocation& result)
private int _EstimatePingTimeBetweenTwoLocations(IntPtr self, NetPingLocation& location1, NetPingLocation& location2)
internal int EstimatePingTimeBetweenTwoLocations(NetPingLocation& location1, NetPingLocation& location2)
private int _EstimatePingTimeFromLocalHost(IntPtr self, NetPingLocation& remoteLocation)
internal int EstimatePingTimeFromLocalHost(NetPingLocation& remoteLocation)
private void _ConvertPingLocationToString(IntPtr self, NetPingLocation& location, IntPtr pszBuf, int cchBufSize)
internal void ConvertPingLocationToString(NetPingLocation& location, String& pszBuf)
private bool _ParsePingLocationString(IntPtr self, string pszString, NetPingLocation& result)
internal bool ParsePingLocationString(string pszString, NetPingLocation& result)
private bool _CheckPingDataUpToDate(IntPtr self, float flMaxAgeSeconds)
internal bool CheckPingDataUpToDate(float flMaxAgeSeconds)
private int _GetPingToDataCenter(IntPtr self, SteamNetworkingPOPID popID, SteamNetworkingPOPID& pViaRelayPoP)
internal int GetPingToDataCenter(SteamNetworkingPOPID popID, SteamNetworkingPOPID& pViaRelayPoP)
private int _GetDirectPingToPOP(IntPtr self, SteamNetworkingPOPID popID)
internal int GetDirectPingToPOP(SteamNetworkingPOPID popID)
private int _GetPOPCount(IntPtr self)
internal int GetPOPCount()
private int _GetPOPList(IntPtr self, SteamNetworkingPOPID& list, int nListSz)
internal int GetPOPList(SteamNetworkingPOPID& list, int nListSz)
private long _GetLocalTimestamp(IntPtr self)
internal long GetLocalTimestamp()
private void _SetDebugOutputFunction(IntPtr self, NetDebugOutput eDetailLevel, NetDebugFunc pfnFunc)
internal void SetDebugOutputFunction(NetDebugOutput eDetailLevel, NetDebugFunc pfnFunc)
private bool _IsFakeIPv4(IntPtr self, UInt32 nIPv4)
internal bool IsFakeIPv4(UInt32 nIPv4)
private SteamNetworkingFakeIPType _GetIPv4FakeIPType(IntPtr self, UInt32 nIPv4)
internal SteamNetworkingFakeIPType GetIPv4FakeIPType(UInt32 nIPv4)
private Result _GetRealIdentityForFakeIP(IntPtr self, NetAddress& fakeIP, NetIdentity[] pOutRealIdentity)
internal Result GetRealIdentityForFakeIP(NetAddress& fakeIP, NetIdentity[] pOutRealIdentity)
private bool _SetGlobalConfigValueInt32(IntPtr self, NetConfig eValue, int val)
internal bool SetGlobalConfigValueInt32(NetConfig eValue, int val)
private bool _SetGlobalConfigValueFloat(IntPtr self, NetConfig eValue, float val)
internal bool SetGlobalConfigValueFloat(NetConfig eValue, float val)
private bool _SetGlobalConfigValueString(IntPtr self, NetConfig eValue, string val)
internal bool SetGlobalConfigValueString(NetConfig eValue, string val)
private bool _SetGlobalConfigValuePtr(IntPtr self, NetConfig eValue, IntPtr val)
internal bool SetGlobalConfigValuePtr(NetConfig eValue, IntPtr val)
private bool _SetConnectionConfigValueInt32(IntPtr self, Connection hConn, NetConfig eValue, int val)
internal bool SetConnectionConfigValueInt32(Connection hConn, NetConfig eValue, int val)
private bool _SetConnectionConfigValueFloat(IntPtr self, Connection hConn, NetConfig eValue, float val)
internal bool SetConnectionConfigValueFloat(Connection hConn, NetConfig eValue, float val)
private bool _SetConnectionConfigValueString(IntPtr self, Connection hConn, NetConfig eValue, string val)
internal bool SetConnectionConfigValueString(Connection hConn, NetConfig eValue, string val)
private bool _SetGlobalCallback_SteamNetConnectionStatusChanged(IntPtr self, FnSteamNetConnectionStatusChanged fnCallback)
internal bool SetGlobalCallback_SteamNetConnectionStatusChanged(FnSteamNetConnectionStatusChanged fnCallback)
private bool _SetGlobalCallback_SteamNetAuthenticationStatusChanged(IntPtr self, FnSteamNetAuthenticationStatusChanged fnCallback)
internal bool SetGlobalCallback_SteamNetAuthenticationStatusChanged(FnSteamNetAuthenticationStatusChanged fnCallback)
private bool _SetGlobalCallback_SteamRelayNetworkStatusChanged(IntPtr self, FnSteamRelayNetworkStatusChanged fnCallback)
internal bool SetGlobalCallback_SteamRelayNetworkStatusChanged(FnSteamRelayNetworkStatusChanged fnCallback)
private bool _SetGlobalCallback_FakeIPResult(IntPtr self, FnSteamNetworkingFakeIPResult fnCallback)
internal bool SetGlobalCallback_FakeIPResult(FnSteamNetworkingFakeIPResult fnCallback)
private bool _SetGlobalCallback_MessagesSessionRequest(IntPtr self, FnSteamNetworkingMessagesSessionRequest fnCallback)
internal bool SetGlobalCallback_MessagesSessionRequest(FnSteamNetworkingMessagesSessionRequest fnCallback)
private bool _SetGlobalCallback_MessagesSessionFailed(IntPtr self, FnSteamNetworkingMessagesSessionFailed fnCallback)
internal bool SetGlobalCallback_MessagesSessionFailed(FnSteamNetworkingMessagesSessionFailed fnCallback)
private bool _SetConfigValue(IntPtr self, NetConfig eValue, NetConfigScope eScopeType, IntPtr scopeObj, NetConfigType eDataType, IntPtr pArg)
internal bool SetConfigValue(NetConfig eValue, NetConfigScope eScopeType, IntPtr scopeObj, NetConfigType eDataType, IntPtr pArg)
private bool _SetConfigValueStruct(IntPtr self, NetKeyValue& opt, NetConfigScope eScopeType, IntPtr scopeObj)
internal bool SetConfigValueStruct(NetKeyValue& opt, NetConfigScope eScopeType, IntPtr scopeObj)
private NetConfigResult _GetConfigValue(IntPtr self, NetConfig eValue, NetConfigScope eScopeType, IntPtr scopeObj, NetConfigType& pOutDataType, IntPtr pResult, UIntPtr& cbResult)
internal NetConfigResult GetConfigValue(NetConfig eValue, NetConfigScope eScopeType, IntPtr scopeObj, NetConfigType& pOutDataType, IntPtr pResult, UIntPtr& cbResult)
private Utf8StringPointer _GetConfigValueInfo(IntPtr self, NetConfig eValue, NetConfigType& pOutDataType, NetConfigScope[] pOutScope)
internal string GetConfigValueInfo(NetConfig eValue, NetConfigType& pOutDataType, NetConfigScope[] pOutScope)
private NetConfig _IterateGenericEditableConfigValues(IntPtr self, NetConfig eCurrent, bool bEnumerateDevVars)
internal NetConfig IterateGenericEditableConfigValues(NetConfig eCurrent, bool bEnumerateDevVars)
private void _SteamNetworkingIPAddr_ToString(IntPtr self, NetAddress& addr, IntPtr buf, UInt32 cbBuf, bool bWithPort)
internal void SteamNetworkingIPAddr_ToString(NetAddress& addr, String& buf, bool bWithPort)
private bool _SteamNetworkingIPAddr_ParseString(IntPtr self, NetAddress& pAddr, string pszStr)
internal bool SteamNetworkingIPAddr_ParseString(NetAddress& pAddr, string pszStr)
private SteamNetworkingFakeIPType _SteamNetworkingIPAddr_GetFakeIPType(IntPtr self, NetAddress& addr)
internal SteamNetworkingFakeIPType SteamNetworkingIPAddr_GetFakeIPType(NetAddress& addr)
private void _SteamNetworkingIdentity_ToString(IntPtr self, NetIdentity& identity, IntPtr buf, UInt32 cbBuf)
internal void SteamNetworkingIdentity_ToString(NetIdentity& identity, String& buf)
private bool _SteamNetworkingIdentity_ParseString(IntPtr self, NetIdentity& pIdentity, string pszStr)
internal bool SteamNetworkingIdentity_ParseString(NetIdentity& pIdentity, string pszStr)
}
internal Steamworks.ISteamParentalSettings : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamParentalSettings_v001()
public IntPtr GetUserInterfacePointer()
private bool _BIsParentalLockEnabled(IntPtr self)
internal bool BIsParentalLockEnabled()
private bool _BIsParentalLockLocked(IntPtr self)
internal bool BIsParentalLockLocked()
private bool _BIsAppBlocked(IntPtr self, AppId nAppID)
internal bool BIsAppBlocked(AppId nAppID)
private bool _BIsAppInBlockList(IntPtr self, AppId nAppID)
internal bool BIsAppInBlockList(AppId nAppID)
private bool _BIsFeatureBlocked(IntPtr self, ParentalFeature eFeature)
internal bool BIsFeatureBlocked(ParentalFeature eFeature)
private bool _BIsFeatureInBlockList(IntPtr self, ParentalFeature eFeature)
internal bool BIsFeatureInBlockList(ParentalFeature eFeature)
}
internal Steamworks.ISteamParties : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamParties_v002()
public IntPtr GetUserInterfacePointer()
private UInt32 _GetNumActiveBeacons(IntPtr self)
internal UInt32 GetNumActiveBeacons()
private PartyBeaconID_t _GetBeaconByIndex(IntPtr self, UInt32 unIndex)
internal PartyBeaconID_t GetBeaconByIndex(UInt32 unIndex)
private bool _GetBeaconDetails(IntPtr self, PartyBeaconID_t ulBeaconID, SteamId& pSteamIDBeaconOwner, SteamPartyBeaconLocation_t& pLocation, IntPtr pchMetadata, int cchMetadata)
internal bool GetBeaconDetails(PartyBeaconID_t ulBeaconID, SteamId& pSteamIDBeaconOwner, SteamPartyBeaconLocation_t& pLocation, String& pchMetadata)
private SteamAPICall_t _JoinParty(IntPtr self, PartyBeaconID_t ulBeaconID)
internal CallResult`1<JoinPartyCallback_t> JoinParty(PartyBeaconID_t ulBeaconID)
private bool _GetNumAvailableBeaconLocations(IntPtr self, UInt32& puNumLocations)
internal bool GetNumAvailableBeaconLocations(UInt32& puNumLocations)
private bool _GetAvailableBeaconLocations(IntPtr self, SteamPartyBeaconLocation_t& pLocationList, UInt32 uMaxNumLocations)
internal bool GetAvailableBeaconLocations(SteamPartyBeaconLocation_t& pLocationList, UInt32 uMaxNumLocations)
private SteamAPICall_t _CreateBeacon(IntPtr self, UInt32 unOpenSlots, SteamPartyBeaconLocation_t& pBeaconLocation, string pchConnectString, string pchMetadata)
internal CallResult`1<CreateBeaconCallback_t> CreateBeacon(UInt32 unOpenSlots, SteamPartyBeaconLocation_t pBeaconLocation, string pchConnectString, string pchMetadata)
private void _OnReservationCompleted(IntPtr self, PartyBeaconID_t ulBeacon, SteamId steamIDUser)
internal void OnReservationCompleted(PartyBeaconID_t ulBeacon, SteamId steamIDUser)
private void _CancelReservation(IntPtr self, PartyBeaconID_t ulBeacon, SteamId steamIDUser)
internal void CancelReservation(PartyBeaconID_t ulBeacon, SteamId steamIDUser)
private SteamAPICall_t _ChangeNumOpenSlots(IntPtr self, PartyBeaconID_t ulBeacon, UInt32 unOpenSlots)
internal CallResult`1<ChangeNumOpenSlotsCallback_t> ChangeNumOpenSlots(PartyBeaconID_t ulBeacon, UInt32 unOpenSlots)
private bool _DestroyBeacon(IntPtr self, PartyBeaconID_t ulBeacon)
internal bool DestroyBeacon(PartyBeaconID_t ulBeacon)
private bool _GetBeaconLocationData(IntPtr self, SteamPartyBeaconLocation_t BeaconLocation, SteamPartyBeaconLocationData eData, IntPtr pchDataStringOut, int cchDataStringOut)
internal bool GetBeaconLocationData(SteamPartyBeaconLocation_t BeaconLocation, SteamPartyBeaconLocationData eData, String& pchDataStringOut)
}
internal Steamworks.ISteamRemotePlay : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamRemotePlay_v001()
public IntPtr GetUserInterfacePointer()
private UInt32 _GetSessionCount(IntPtr self)
internal UInt32 GetSessionCount()
private RemotePlaySessionID_t _GetSessionID(IntPtr self, int iSessionIndex)
internal RemotePlaySessionID_t GetSessionID(int iSessionIndex)
private SteamId _GetSessionSteamID(IntPtr self, RemotePlaySessionID_t unSessionID)
internal SteamId GetSessionSteamID(RemotePlaySessionID_t unSessionID)
private Utf8StringPointer _GetSessionClientName(IntPtr self, RemotePlaySessionID_t unSessionID)
internal string GetSessionClientName(RemotePlaySessionID_t unSessionID)
private SteamDeviceFormFactor _GetSessionClientFormFactor(IntPtr self, RemotePlaySessionID_t unSessionID)
internal SteamDeviceFormFactor GetSessionClientFormFactor(RemotePlaySessionID_t unSessionID)
private bool _BGetSessionClientResolution(IntPtr self, RemotePlaySessionID_t unSessionID, Int32& pnResolutionX, Int32& pnResolutionY)
internal bool BGetSessionClientResolution(RemotePlaySessionID_t unSessionID, Int32& pnResolutionX, Int32& pnResolutionY)
private bool _BSendRemotePlayTogetherInvite(IntPtr self, SteamId steamIDFriend)
internal bool BSendRemotePlayTogetherInvite(SteamId steamIDFriend)
}
internal Steamworks.ISteamRemoteStorage : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamRemoteStorage_v016()
public IntPtr GetUserInterfacePointer()
private bool _FileWrite(IntPtr self, string pchFile, IntPtr pvData, int cubData)
internal bool FileWrite(string pchFile, IntPtr pvData, int cubData)
private int _FileRead(IntPtr self, string pchFile, IntPtr pvData, int cubDataToRead)
internal int FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
private SteamAPICall_t _FileWriteAsync(IntPtr self, string pchFile, IntPtr pvData, UInt32 cubData)
internal CallResult`1<RemoteStorageFileWriteAsyncComplete_t> FileWriteAsync(string pchFile, IntPtr pvData, UInt32 cubData)
private SteamAPICall_t _FileReadAsync(IntPtr self, string pchFile, UInt32 nOffset, UInt32 cubToRead)
internal CallResult`1<RemoteStorageFileReadAsyncComplete_t> FileReadAsync(string pchFile, UInt32 nOffset, UInt32 cubToRead)
private bool _FileReadAsyncComplete(IntPtr self, SteamAPICall_t hReadCall, IntPtr pvBuffer, UInt32 cubToRead)
internal bool FileReadAsyncComplete(SteamAPICall_t hReadCall, IntPtr pvBuffer, UInt32 cubToRead)
private bool _FileForget(IntPtr self, string pchFile)
internal bool FileForget(string pchFile)
private bool _FileDelete(IntPtr self, string pchFile)
internal bool FileDelete(string pchFile)
private SteamAPICall_t _FileShare(IntPtr self, string pchFile)
internal CallResult`1<RemoteStorageFileShareResult_t> FileShare(string pchFile)
private bool _SetSyncPlatforms(IntPtr self, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
internal bool SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
private UGCFileWriteStreamHandle_t _FileWriteStreamOpen(IntPtr self, string pchFile)
internal UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
private bool _FileWriteStreamWriteChunk(IntPtr self, UGCFileWriteStreamHandle_t writeHandle, IntPtr pvData, int cubData)
internal bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, IntPtr pvData, int cubData)
private bool _FileWriteStreamClose(IntPtr self, UGCFileWriteStreamHandle_t writeHandle)
internal bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
private bool _FileWriteStreamCancel(IntPtr self, UGCFileWriteStreamHandle_t writeHandle)
internal bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
private bool _FileExists(IntPtr self, string pchFile)
internal bool FileExists(string pchFile)
private bool _FilePersisted(IntPtr self, string pchFile)
internal bool FilePersisted(string pchFile)
private int _GetFileSize(IntPtr self, string pchFile)
internal int GetFileSize(string pchFile)
private long _GetFileTimestamp(IntPtr self, string pchFile)
internal long GetFileTimestamp(string pchFile)
private RemoteStoragePlatform _GetSyncPlatforms(IntPtr self, string pchFile)
internal RemoteStoragePlatform GetSyncPlatforms(string pchFile)
private int _GetFileCount(IntPtr self)
internal int GetFileCount()
private Utf8StringPointer _GetFileNameAndSize(IntPtr self, int iFile, Int32& pnFileSizeInBytes)
internal string GetFileNameAndSize(int iFile, Int32& pnFileSizeInBytes)
private bool _GetQuota(IntPtr self, UInt64& pnTotalBytes, UInt64& puAvailableBytes)
internal bool GetQuota(UInt64& pnTotalBytes, UInt64& puAvailableBytes)
private bool _IsCloudEnabledForAccount(IntPtr self)
internal bool IsCloudEnabledForAccount()
private bool _IsCloudEnabledForApp(IntPtr self)
internal bool IsCloudEnabledForApp()
private void _SetCloudEnabledForApp(IntPtr self, bool bEnabled)
internal void SetCloudEnabledForApp(bool bEnabled)
private SteamAPICall_t _UGCDownload(IntPtr self, UGCHandle_t hContent, UInt32 unPriority)
internal CallResult`1<RemoteStorageDownloadUGCResult_t> UGCDownload(UGCHandle_t hContent, UInt32 unPriority)
private bool _GetUGCDownloadProgress(IntPtr self, UGCHandle_t hContent, Int32& pnBytesDownloaded, Int32& pnBytesExpected)
internal bool GetUGCDownloadProgress(UGCHandle_t hContent, Int32& pnBytesDownloaded, Int32& pnBytesExpected)
private bool _GetUGCDetails(IntPtr self, UGCHandle_t hContent, AppId& pnAppID, Char[]& ppchName, Int32& pnFileSizeInBytes, SteamId& pSteamIDOwner)
internal bool GetUGCDetails(UGCHandle_t hContent, AppId& pnAppID, Char[]& ppchName, Int32& pnFileSizeInBytes, SteamId& pSteamIDOwner)
private int _UGCRead(IntPtr self, UGCHandle_t hContent, IntPtr pvData, int cubDataToRead, UInt32 cOffset, UGCReadAction eAction)
internal int UGCRead(UGCHandle_t hContent, IntPtr pvData, int cubDataToRead, UInt32 cOffset, UGCReadAction eAction)
private int _GetCachedUGCCount(IntPtr self)
internal int GetCachedUGCCount()
private UGCHandle_t _GetCachedUGCHandle(IntPtr self, int iCachedContent)
internal UGCHandle_t GetCachedUGCHandle(int iCachedContent)
private SteamAPICall_t _UGCDownloadToLocation(IntPtr self, UGCHandle_t hContent, string pchLocation, UInt32 unPriority)
internal CallResult`1<RemoteStorageDownloadUGCResult_t> UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, UInt32 unPriority)
private int _GetLocalFileChangeCount(IntPtr self)
internal int GetLocalFileChangeCount()
private Utf8StringPointer _GetLocalFileChange(IntPtr self, int iFile, RemoteStorageLocalFileChange& pEChangeType, RemoteStorageFilePathType& pEFilePathType)
internal string GetLocalFileChange(int iFile, RemoteStorageLocalFileChange& pEChangeType, RemoteStorageFilePathType& pEFilePathType)
private bool _BeginFileWriteBatch(IntPtr self)
internal bool BeginFileWriteBatch()
private bool _EndFileWriteBatch(IntPtr self)
internal bool EndFileWriteBatch()
}
internal Steamworks.ISteamScreenshots : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamScreenshots_v003()
public IntPtr GetUserInterfacePointer()
private ScreenshotHandle _WriteScreenshot(IntPtr self, IntPtr pubRGB, UInt32 cubRGB, int nWidth, int nHeight)
internal ScreenshotHandle WriteScreenshot(IntPtr pubRGB, UInt32 cubRGB, int nWidth, int nHeight)
private ScreenshotHandle _AddScreenshotToLibrary(IntPtr self, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
internal ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
private void _TriggerScreenshot(IntPtr self)
internal void TriggerScreenshot()
private void _HookScreenshots(IntPtr self, bool bHook)
internal void HookScreenshots(bool bHook)
private bool _SetLocation(IntPtr self, ScreenshotHandle hScreenshot, string pchLocation)
internal bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation)
private bool _TagUser(IntPtr self, ScreenshotHandle hScreenshot, SteamId steamID)
internal bool TagUser(ScreenshotHandle hScreenshot, SteamId steamID)
private bool _TagPublishedFile(IntPtr self, ScreenshotHandle hScreenshot, PublishedFileId unPublishedFileID)
internal bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId unPublishedFileID)
private bool _IsScreenshotsHooked(IntPtr self)
internal bool IsScreenshotsHooked()
private ScreenshotHandle _AddVRScreenshotToLibrary(IntPtr self, VRScreenshotType eType, string pchFilename, string pchVRFilename)
internal ScreenshotHandle AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
}
internal Steamworks.ISteamUGC : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamUGC_v017()
public IntPtr GetUserInterfacePointer()
internal IntPtr SteamAPI_SteamGameServerUGC_v017()
public IntPtr GetServerInterfacePointer()
private UGCQueryHandle_t _CreateQueryUserUGCRequest(IntPtr self, AccountID_t unAccountID, UserUGCList eListType, UgcType eMatchingUGCType, UserUGCListSortOrder eSortOrder, AppId nCreatorAppID, AppId nConsumerAppID, UInt32 unPage)
internal UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, UserUGCList eListType, UgcType eMatchingUGCType, UserUGCListSortOrder eSortOrder, AppId nCreatorAppID, AppId nConsumerAppID, UInt32 unPage)
private UGCQueryHandle_t _CreateQueryAllUGCRequest(IntPtr self, UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, UInt32 unPage)
internal UGCQueryHandle_t CreateQueryAllUGCRequest(UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, UInt32 unPage)
private UGCQueryHandle_t _CreateQueryAllUGCRequest(IntPtr self, UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, string pchCursor)
internal UGCQueryHandle_t CreateQueryAllUGCRequest(UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, string pchCursor)
private UGCQueryHandle_t _CreateQueryUGCDetailsRequest(IntPtr self, PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs)
internal UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs)
private SteamAPICall_t _SendQueryUGCRequest(IntPtr self, UGCQueryHandle_t handle)
internal CallResult`1<SteamUGCQueryCompleted_t> SendQueryUGCRequest(UGCQueryHandle_t handle)
private bool _GetQueryUGCResult(IntPtr self, UGCQueryHandle_t handle, UInt32 index, SteamUGCDetails_t& pDetails)
internal bool GetQueryUGCResult(UGCQueryHandle_t handle, UInt32 index, SteamUGCDetails_t& pDetails)
private UInt32 _GetQueryUGCNumTags(IntPtr self, UGCQueryHandle_t handle, UInt32 index)
internal UInt32 GetQueryUGCNumTags(UGCQueryHandle_t handle, UInt32 index)
private bool _GetQueryUGCTag(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UInt32 indexTag, IntPtr pchValue, UInt32 cchValueSize)
internal bool GetQueryUGCTag(UGCQueryHandle_t handle, UInt32 index, UInt32 indexTag, String& pchValue)
private bool _GetQueryUGCTagDisplayName(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UInt32 indexTag, IntPtr pchValue, UInt32 cchValueSize)
internal bool GetQueryUGCTagDisplayName(UGCQueryHandle_t handle, UInt32 index, UInt32 indexTag, String& pchValue)
private bool _GetQueryUGCPreviewURL(IntPtr self, UGCQueryHandle_t handle, UInt32 index, IntPtr pchURL, UInt32 cchURLSize)
internal bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, UInt32 index, String& pchURL)
private bool _GetQueryUGCMetadata(IntPtr self, UGCQueryHandle_t handle, UInt32 index, IntPtr pchMetadata, UInt32 cchMetadatasize)
internal bool GetQueryUGCMetadata(UGCQueryHandle_t handle, UInt32 index, String& pchMetadata)
private bool _GetQueryUGCChildren(IntPtr self, UGCQueryHandle_t handle, UInt32 index, PublishedFileId[] pvecPublishedFileID, UInt32 cMaxEntries)
internal bool GetQueryUGCChildren(UGCQueryHandle_t handle, UInt32 index, PublishedFileId[] pvecPublishedFileID, UInt32 cMaxEntries)
private bool _GetQueryUGCStatistic(IntPtr self, UGCQueryHandle_t handle, UInt32 index, ItemStatistic eStatType, UInt64& pStatValue)
internal bool GetQueryUGCStatistic(UGCQueryHandle_t handle, UInt32 index, ItemStatistic eStatType, UInt64& pStatValue)
private UInt32 _GetQueryUGCNumAdditionalPreviews(IntPtr self, UGCQueryHandle_t handle, UInt32 index)
internal UInt32 GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, UInt32 index)
private bool _GetQueryUGCAdditionalPreview(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UInt32 previewIndex, IntPtr pchURLOrVideoID, UInt32 cchURLSize, IntPtr pchOriginalFileName, UInt32 cchOriginalFileNameSize, ItemPreviewType& pPreviewType)
internal bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, UInt32 index, UInt32 previewIndex, String& pchURLOrVideoID, String& pchOriginalFileName, ItemPreviewType& pPreviewType)
private UInt32 _GetQueryUGCNumKeyValueTags(IntPtr self, UGCQueryHandle_t handle, UInt32 index)
internal UInt32 GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, UInt32 index)
private bool _GetQueryUGCKeyValueTag(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UInt32 keyValueTagIndex, IntPtr pchKey, UInt32 cchKeySize, IntPtr pchValue, UInt32 cchValueSize)
internal bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, UInt32 index, UInt32 keyValueTagIndex, String& pchKey, String& pchValue)
private bool _GetQueryUGCKeyValueTag(IntPtr self, UGCQueryHandle_t handle, UInt32 index, string pchKey, IntPtr pchValue, UInt32 cchValueSize)
internal bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, UInt32 index, string pchKey, String& pchValue)
private UInt32 _GetQueryUGCContentDescriptors(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UGCContentDescriptorID[] pvecDescriptors, UInt32 cMaxEntries)
internal UInt32 GetQueryUGCContentDescriptors(UGCQueryHandle_t handle, UInt32 index, UGCContentDescriptorID[] pvecDescriptors, UInt32 cMaxEntries)
private bool _ReleaseQueryUGCRequest(IntPtr self, UGCQueryHandle_t handle)
internal bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
private bool _AddRequiredTag(IntPtr self, UGCQueryHandle_t handle, string pTagName)
internal bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
private bool _AddRequiredTagGroup(IntPtr self, UGCQueryHandle_t handle, SteamParamStringArray_t& pTagGroups)
internal bool AddRequiredTagGroup(UGCQueryHandle_t handle, SteamParamStringArray_t& pTagGroups)
private bool _AddExcludedTag(IntPtr self, UGCQueryHandle_t handle, string pTagName)
internal bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
private bool _SetReturnOnlyIDs(IntPtr self, UGCQueryHandle_t handle, bool bReturnOnlyIDs)
internal bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
private bool _SetReturnKeyValueTags(IntPtr self, UGCQueryHandle_t handle, bool bReturnKeyValueTags)
internal bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
private bool _SetReturnLongDescription(IntPtr self, UGCQueryHandle_t handle, bool bReturnLongDescription)
internal bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
private bool _SetReturnMetadata(IntPtr self, UGCQueryHandle_t handle, bool bReturnMetadata)
internal bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
private bool _SetReturnChildren(IntPtr self, UGCQueryHandle_t handle, bool bReturnChildren)
internal bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
private bool _SetReturnAdditionalPreviews(IntPtr self, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
internal bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
private bool _SetReturnTotalOnly(IntPtr self, UGCQueryHandle_t handle, bool bReturnTotalOnly)
internal bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
private bool _SetReturnPlaytimeStats(IntPtr self, UGCQueryHandle_t handle, UInt32 unDays)
internal bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, UInt32 unDays)
private bool _SetLanguage(IntPtr self, UGCQueryHandle_t handle, string pchLanguage)
internal bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
private bool _SetAllowCachedResponse(IntPtr self, UGCQueryHandle_t handle, UInt32 unMaxAgeSeconds)
internal bool SetAllowCachedResponse(UGCQueryHandle_t handle, UInt32 unMaxAgeSeconds)
private bool _SetCloudFileNameFilter(IntPtr self, UGCQueryHandle_t handle, string pMatchCloudFileName)
internal bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
private bool _SetMatchAnyTag(IntPtr self, UGCQueryHandle_t handle, bool bMatchAnyTag)
internal bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
private bool _SetSearchText(IntPtr self, UGCQueryHandle_t handle, string pSearchText)
internal bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
private bool _SetRankedByTrendDays(IntPtr self, UGCQueryHandle_t handle, UInt32 unDays)
internal bool SetRankedByTrendDays(UGCQueryHandle_t handle, UInt32 unDays)
private bool _SetTimeCreatedDateRange(IntPtr self, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
internal bool SetTimeCreatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
private bool _SetTimeUpdatedDateRange(IntPtr self, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
internal bool SetTimeUpdatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
private bool _AddRequiredKeyValueTag(IntPtr self, UGCQueryHandle_t handle, string pKey, string pValue)
internal bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
private SteamAPICall_t _CreateItem(IntPtr self, AppId nConsumerAppId, WorkshopFileType eFileType)
internal CallResult`1<CreateItemResult_t> CreateItem(AppId nConsumerAppId, WorkshopFileType eFileType)
private UGCUpdateHandle_t _StartItemUpdate(IntPtr self, AppId nConsumerAppId, PublishedFileId nPublishedFileID)
internal UGCUpdateHandle_t StartItemUpdate(AppId nConsumerAppId, PublishedFileId nPublishedFileID)
private bool _SetItemTitle(IntPtr self, UGCUpdateHandle_t handle, string pchTitle)
internal bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
private bool _SetItemDescription(IntPtr self, UGCUpdateHandle_t handle, string pchDescription)
internal bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
private bool _SetItemUpdateLanguage(IntPtr self, UGCUpdateHandle_t handle, string pchLanguage)
internal bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
private bool _SetItemMetadata(IntPtr self, UGCUpdateHandle_t handle, string pchMetaData)
internal bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
private bool _SetItemVisibility(IntPtr self, UGCUpdateHandle_t handle, RemoteStoragePublishedFileVisibility eVisibility)
internal bool SetItemVisibility(UGCUpdateHandle_t handle, RemoteStoragePublishedFileVisibility eVisibility)
private bool _SetItemTags(IntPtr self, UGCUpdateHandle_t updateHandle, SteamParamStringArray_t& pTags)
internal bool SetItemTags(UGCUpdateHandle_t updateHandle, SteamParamStringArray_t& pTags)
private bool _SetItemContent(IntPtr self, UGCUpdateHandle_t handle, string pszContentFolder)
internal bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
private bool _SetItemPreview(IntPtr self, UGCUpdateHandle_t handle, string pszPreviewFile)
internal bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
private bool _SetAllowLegacyUpload(IntPtr self, UGCUpdateHandle_t handle, bool bAllowLegacyUpload)
internal bool SetAllowLegacyUpload(UGCUpdateHandle_t handle, bool bAllowLegacyUpload)
private bool _RemoveAllItemKeyValueTags(IntPtr self, UGCUpdateHandle_t handle)
internal bool RemoveAllItemKeyValueTags(UGCUpdateHandle_t handle)
private bool _RemoveItemKeyValueTags(IntPtr self, UGCUpdateHandle_t handle, string pchKey)
internal bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
private bool _AddItemKeyValueTag(IntPtr self, UGCUpdateHandle_t handle, string pchKey, string pchValue)
internal bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
private bool _AddItemPreviewFile(IntPtr self, UGCUpdateHandle_t handle, string pszPreviewFile, ItemPreviewType type)
internal bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, ItemPreviewType type)
private bool _AddItemPreviewVideo(IntPtr self, UGCUpdateHandle_t handle, string pszVideoID)
internal bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
private bool _UpdateItemPreviewFile(IntPtr self, UGCUpdateHandle_t handle, UInt32 index, string pszPreviewFile)
internal bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, UInt32 index, string pszPreviewFile)
private bool _UpdateItemPreviewVideo(IntPtr self, UGCUpdateHandle_t handle, UInt32 index, string pszVideoID)
internal bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, UInt32 index, string pszVideoID)
private bool _RemoveItemPreview(IntPtr self, UGCUpdateHandle_t handle, UInt32 index)
internal bool RemoveItemPreview(UGCUpdateHandle_t handle, UInt32 index)
private bool _AddContentDescriptor(IntPtr self, UGCUpdateHandle_t handle, UGCContentDescriptorID descid)
internal bool AddContentDescriptor(UGCUpdateHandle_t handle, UGCContentDescriptorID descid)
private bool _RemoveContentDescriptor(IntPtr self, UGCUpdateHandle_t handle, UGCContentDescriptorID descid)
internal bool RemoveContentDescriptor(UGCUpdateHandle_t handle, UGCContentDescriptorID descid)
private SteamAPICall_t _SubmitItemUpdate(IntPtr self, UGCUpdateHandle_t handle, string pchChangeNote)
internal CallResult`1<SubmitItemUpdateResult_t> SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
private ItemUpdateStatus _GetItemUpdateProgress(IntPtr self, UGCUpdateHandle_t handle, UInt64& punBytesProcessed, UInt64& punBytesTotal)
internal ItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, UInt64& punBytesProcessed, UInt64& punBytesTotal)
private SteamAPICall_t _SetUserItemVote(IntPtr self, PublishedFileId nPublishedFileID, bool bVoteUp)
internal CallResult`1<SetUserItemVoteResult_t> SetUserItemVote(PublishedFileId nPublishedFileID, bool bVoteUp)
private SteamAPICall_t _GetUserItemVote(IntPtr self, PublishedFileId nPublishedFileID)
internal CallResult`1<GetUserItemVoteResult_t> GetUserItemVote(PublishedFileId nPublishedFileID)
private SteamAPICall_t _AddItemToFavorites(IntPtr self, AppId nAppId, PublishedFileId nPublishedFileID)
internal CallResult`1<UserFavoriteItemsListChanged_t> AddItemToFavorites(AppId nAppId, PublishedFileId nPublishedFileID)
private SteamAPICall_t _RemoveItemFromFavorites(IntPtr self, AppId nAppId, PublishedFileId nPublishedFileID)
internal CallResult`1<UserFavoriteItemsListChanged_t> RemoveItemFromFavorites(AppId nAppId, PublishedFileId nPublishedFileID)
private SteamAPICall_t _SubscribeItem(IntPtr self, PublishedFileId nPublishedFileID)
internal CallResult`1<RemoteStorageSubscribePublishedFileResult_t> SubscribeItem(PublishedFileId nPublishedFileID)
private SteamAPICall_t _UnsubscribeItem(IntPtr self, PublishedFileId nPublishedFileID)
internal CallResult`1<RemoteStorageUnsubscribePublishedFileResult_t> UnsubscribeItem(PublishedFileId nPublishedFileID)
private UInt32 _GetNumSubscribedItems(IntPtr self)
internal UInt32 GetNumSubscribedItems()
private UInt32 _GetSubscribedItems(IntPtr self, PublishedFileId[] pvecPublishedFileID, UInt32 cMaxEntries)
internal UInt32 GetSubscribedItems(PublishedFileId[] pvecPublishedFileID, UInt32 cMaxEntries)
private UInt32 _GetItemState(IntPtr self, PublishedFileId nPublishedFileID)
internal UInt32 GetItemState(PublishedFileId nPublishedFileID)
private bool _GetItemInstallInfo(IntPtr self, PublishedFileId nPublishedFileID, UInt64& punSizeOnDisk, IntPtr pchFolder, UInt32 cchFolderSize, UInt32& punTimeStamp)
internal bool GetItemInstallInfo(PublishedFileId nPublishedFileID, UInt64& punSizeOnDisk, String& pchFolder, UInt32& punTimeStamp)
private bool _GetItemDownloadInfo(IntPtr self, PublishedFileId nPublishedFileID, UInt64& punBytesDownloaded, UInt64& punBytesTotal)
internal bool GetItemDownloadInfo(PublishedFileId nPublishedFileID, UInt64& punBytesDownloaded, UInt64& punBytesTotal)
private bool _DownloadItem(IntPtr self, PublishedFileId nPublishedFileID, bool bHighPriority)
internal bool DownloadItem(PublishedFileId nPublishedFileID, bool bHighPriority)
private bool _BInitWorkshopForGameServer(IntPtr self, DepotId_t unWorkshopDepotID, string pszFolder)
internal bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
private void _SuspendDownloads(IntPtr self, bool bSuspend)
internal void SuspendDownloads(bool bSuspend)
private SteamAPICall_t _StartPlaytimeTracking(IntPtr self, PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs)
internal CallResult`1<StartPlaytimeTrackingResult_t> StartPlaytimeTracking(PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs)
private SteamAPICall_t _StopPlaytimeTracking(IntPtr self, PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs)
internal CallResult`1<StopPlaytimeTrackingResult_t> StopPlaytimeTracking(PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs)
private SteamAPICall_t _StopPlaytimeTrackingForAllItems(IntPtr self)
internal CallResult`1<StopPlaytimeTrackingResult_t> StopPlaytimeTrackingForAllItems()
private SteamAPICall_t _AddDependency(IntPtr self, PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID)
internal CallResult`1<AddUGCDependencyResult_t> AddDependency(PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID)
private SteamAPICall_t _RemoveDependency(IntPtr self, PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID)
internal CallResult`1<RemoveUGCDependencyResult_t> RemoveDependency(PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID)
private SteamAPICall_t _AddAppDependency(IntPtr self, PublishedFileId nPublishedFileID, AppId nAppID)
internal CallResult`1<AddAppDependencyResult_t> AddAppDependency(PublishedFileId nPublishedFileID, AppId nAppID)
private SteamAPICall_t _RemoveAppDependency(IntPtr self, PublishedFileId nPublishedFileID, AppId nAppID)
internal CallResult`1<RemoveAppDependencyResult_t> RemoveAppDependency(PublishedFileId nPublishedFileID, AppId nAppID)
private SteamAPICall_t _GetAppDependencies(IntPtr self, PublishedFileId nPublishedFileID)
internal CallResult`1<GetAppDependenciesResult_t> GetAppDependencies(PublishedFileId nPublishedFileID)
private SteamAPICall_t _DeleteItem(IntPtr self, PublishedFileId nPublishedFileID)
internal CallResult`1<DeleteItemResult_t> DeleteItem(PublishedFileId nPublishedFileID)
private bool _ShowWorkshopEULA(IntPtr self)
internal bool ShowWorkshopEULA()
private SteamAPICall_t _GetWorkshopEULAStatus(IntPtr self)
internal CallResult`1<WorkshopEULAStatus_t> GetWorkshopEULAStatus()
}
internal Steamworks.ISteamUser : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamUser_v023()
public IntPtr GetUserInterfacePointer()
private HSteamUser _GetHSteamUser(IntPtr self)
internal HSteamUser GetHSteamUser()
private bool _BLoggedOn(IntPtr self)
internal bool BLoggedOn()
private SteamId _GetSteamID(IntPtr self)
internal SteamId GetSteamID()
private int _InitiateGameConnection_DEPRECATED(IntPtr self, IntPtr pAuthBlob, int cbMaxAuthBlob, SteamId steamIDGameServer, UInt32 unIPServer, ushort usPortServer, bool bSecure)
internal int InitiateGameConnection_DEPRECATED(IntPtr pAuthBlob, int cbMaxAuthBlob, SteamId steamIDGameServer, UInt32 unIPServer, ushort usPortServer, bool bSecure)
private void _TerminateGameConnection_DEPRECATED(IntPtr self, UInt32 unIPServer, ushort usPortServer)
internal void TerminateGameConnection_DEPRECATED(UInt32 unIPServer, ushort usPortServer)
private void _TrackAppUsageEvent(IntPtr self, GameId gameID, int eAppUsageEvent, string pchExtraInfo)
internal void TrackAppUsageEvent(GameId gameID, int eAppUsageEvent, string pchExtraInfo)
private bool _GetUserDataFolder(IntPtr self, IntPtr pchBuffer, int cubBuffer)
internal bool GetUserDataFolder(String& pchBuffer)
private void _StartVoiceRecording(IntPtr self)
internal void StartVoiceRecording()
private void _StopVoiceRecording(IntPtr self)
internal void StopVoiceRecording()
private VoiceResult _GetAvailableVoice(IntPtr self, UInt32& pcbCompressed, UInt32& pcbUncompressed_Deprecated, UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated)
internal VoiceResult GetAvailableVoice(UInt32& pcbCompressed, UInt32& pcbUncompressed_Deprecated, UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated)
private VoiceResult _GetVoice(IntPtr self, bool bWantCompressed, IntPtr pDestBuffer, UInt32 cbDestBufferSize, UInt32& nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, UInt32 cbUncompressedDestBufferSize_Deprecated, UInt32& nUncompressBytesWritten_Deprecated, UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated)
internal VoiceResult GetVoice(bool bWantCompressed, IntPtr pDestBuffer, UInt32 cbDestBufferSize, UInt32& nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, UInt32 cbUncompressedDestBufferSize_Deprecated, UInt32& nUncompressBytesWritten_Deprecated, UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated)
private VoiceResult _DecompressVoice(IntPtr self, IntPtr pCompressed, UInt32 cbCompressed, IntPtr pDestBuffer, UInt32 cbDestBufferSize, UInt32& nBytesWritten, UInt32 nDesiredSampleRate)
internal VoiceResult DecompressVoice(IntPtr pCompressed, UInt32 cbCompressed, IntPtr pDestBuffer, UInt32 cbDestBufferSize, UInt32& nBytesWritten, UInt32 nDesiredSampleRate)
private UInt32 _GetVoiceOptimalSampleRate(IntPtr self)
internal UInt32 GetVoiceOptimalSampleRate()
private HAuthTicket _GetAuthSessionTicket(IntPtr self, IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket, NetIdentity& pSteamNetworkingIdentity)
internal HAuthTicket GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket, NetIdentity& pSteamNetworkingIdentity)
private HAuthTicket _GetAuthTicketForWebApi(IntPtr self, string pchIdentity)
internal HAuthTicket GetAuthTicketForWebApi(string pchIdentity)
private BeginAuthResult _BeginAuthSession(IntPtr self, IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID)
internal BeginAuthResult BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID)
private void _EndAuthSession(IntPtr self, SteamId steamID)
internal void EndAuthSession(SteamId steamID)
private void _CancelAuthTicket(IntPtr self, HAuthTicket hAuthTicket)
internal void CancelAuthTicket(HAuthTicket hAuthTicket)
private UserHasLicenseForAppResult _UserHasLicenseForApp(IntPtr self, SteamId steamID, AppId appID)
internal UserHasLicenseForAppResult UserHasLicenseForApp(SteamId steamID, AppId appID)
private bool _BIsBehindNAT(IntPtr self)
internal bool BIsBehindNAT()
private void _AdvertiseGame(IntPtr self, SteamId steamIDGameServer, UInt32 unIPServer, ushort usPortServer)
internal void AdvertiseGame(SteamId steamIDGameServer, UInt32 unIPServer, ushort usPortServer)
private SteamAPICall_t _RequestEncryptedAppTicket(IntPtr self, IntPtr pDataToInclude, int cbDataToInclude)
internal CallResult`1<EncryptedAppTicketResponse_t> RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
private bool _GetEncryptedAppTicket(IntPtr self, IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket)
internal bool GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket)
private int _GetGameBadgeLevel(IntPtr self, int nSeries, bool bFoil)
internal int GetGameBadgeLevel(int nSeries, bool bFoil)
private int _GetPlayerSteamLevel(IntPtr self)
internal int GetPlayerSteamLevel()
private SteamAPICall_t _RequestStoreAuthURL(IntPtr self, string pchRedirectURL)
internal CallResult`1<StoreAuthURLResponse_t> RequestStoreAuthURL(string pchRedirectURL)
private bool _BIsPhoneVerified(IntPtr self)
internal bool BIsPhoneVerified()
private bool _BIsTwoFactorEnabled(IntPtr self)
internal bool BIsTwoFactorEnabled()
private bool _BIsPhoneIdentifying(IntPtr self)
internal bool BIsPhoneIdentifying()
private bool _BIsPhoneRequiringVerification(IntPtr self)
internal bool BIsPhoneRequiringVerification()
private SteamAPICall_t _GetMarketEligibility(IntPtr self)
internal CallResult`1<MarketEligibilityResponse_t> GetMarketEligibility()
private SteamAPICall_t _GetDurationControl(IntPtr self)
internal CallResult`1<DurationControl_t> GetDurationControl()
private bool _BSetDurationControlOnlineState(IntPtr self, DurationControlOnlineState eNewState)
internal bool BSetDurationControlOnlineState(DurationControlOnlineState eNewState)
}
internal Steamworks.ISteamUserStats : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamUserStats_v012()
public IntPtr GetUserInterfacePointer()
private bool _RequestCurrentStats(IntPtr self)
internal bool RequestCurrentStats()
private bool _GetStat(IntPtr self, string pchName, Int32& pData)
internal bool GetStat(string pchName, Int32& pData)
private bool _GetStat(IntPtr self, string pchName, Single& pData)
internal bool GetStat(string pchName, Single& pData)
private bool _SetStat(IntPtr self, string pchName, int nData)
internal bool SetStat(string pchName, int nData)
private bool _SetStat(IntPtr self, string pchName, float fData)
internal bool SetStat(string pchName, float fData)
private bool _UpdateAvgRateStat(IntPtr self, string pchName, float flCountThisSession, double dSessionLength)
internal bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
private bool _GetAchievement(IntPtr self, string pchName, Boolean& pbAchieved)
internal bool GetAchievement(string pchName, Boolean& pbAchieved)
private bool _SetAchievement(IntPtr self, string pchName)
internal bool SetAchievement(string pchName)
private bool _ClearAchievement(IntPtr self, string pchName)
internal bool ClearAchievement(string pchName)
private bool _GetAchievementAndUnlockTime(IntPtr self, string pchName, Boolean& pbAchieved, UInt32& punUnlockTime)
internal bool GetAchievementAndUnlockTime(string pchName, Boolean& pbAchieved, UInt32& punUnlockTime)
private bool _StoreStats(IntPtr self)
internal bool StoreStats()
private int _GetAchievementIcon(IntPtr self, string pchName)
internal int GetAchievementIcon(string pchName)
private Utf8StringPointer _GetAchievementDisplayAttribute(IntPtr self, string pchName, string pchKey)
internal string GetAchievementDisplayAttribute(string pchName, string pchKey)
private bool _IndicateAchievementProgress(IntPtr self, string pchName, UInt32 nCurProgress, UInt32 nMaxProgress)
internal bool IndicateAchievementProgress(string pchName, UInt32 nCurProgress, UInt32 nMaxProgress)
private UInt32 _GetNumAchievements(IntPtr self)
internal UInt32 GetNumAchievements()
private Utf8StringPointer _GetAchievementName(IntPtr self, UInt32 iAchievement)
internal string GetAchievementName(UInt32 iAchievement)
private SteamAPICall_t _RequestUserStats(IntPtr self, SteamId steamIDUser)
internal CallResult`1<UserStatsReceived_t> RequestUserStats(SteamId steamIDUser)
private bool _GetUserStat(IntPtr self, SteamId steamIDUser, string pchName, Int32& pData)
internal bool GetUserStat(SteamId steamIDUser, string pchName, Int32& pData)
private bool _GetUserStat(IntPtr self, SteamId steamIDUser, string pchName, Single& pData)
internal bool GetUserStat(SteamId steamIDUser, string pchName, Single& pData)
private bool _GetUserAchievement(IntPtr self, SteamId steamIDUser, string pchName, Boolean& pbAchieved)
internal bool GetUserAchievement(SteamId steamIDUser, string pchName, Boolean& pbAchieved)
private bool _GetUserAchievementAndUnlockTime(IntPtr self, SteamId steamIDUser, string pchName, Boolean& pbAchieved, UInt32& punUnlockTime)
internal bool GetUserAchievementAndUnlockTime(SteamId steamIDUser, string pchName, Boolean& pbAchieved, UInt32& punUnlockTime)
private bool _ResetAllStats(IntPtr self, bool bAchievementsToo)
internal bool ResetAllStats(bool bAchievementsToo)
private SteamAPICall_t _FindOrCreateLeaderboard(IntPtr self, string pchLeaderboardName, LeaderboardSort eLeaderboardSortMethod, LeaderboardDisplay eLeaderboardDisplayType)
internal CallResult`1<LeaderboardFindResult_t> FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSort eLeaderboardSortMethod, LeaderboardDisplay eLeaderboardDisplayType)
private SteamAPICall_t _FindLeaderboard(IntPtr self, string pchLeaderboardName)
internal CallResult`1<LeaderboardFindResult_t> FindLeaderboard(string pchLeaderboardName)
private Utf8StringPointer _GetLeaderboardName(IntPtr self, SteamLeaderboard_t hSteamLeaderboard)
internal string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
private int _GetLeaderboardEntryCount(IntPtr self, SteamLeaderboard_t hSteamLeaderboard)
internal int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
private LeaderboardSort _GetLeaderboardSortMethod(IntPtr self, SteamLeaderboard_t hSteamLeaderboard)
internal LeaderboardSort GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
private LeaderboardDisplay _GetLeaderboardDisplayType(IntPtr self, SteamLeaderboard_t hSteamLeaderboard)
internal LeaderboardDisplay GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
private SteamAPICall_t _DownloadLeaderboardEntries(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
internal CallResult`1<LeaderboardScoresDownloaded_t> DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
private SteamAPICall_t _DownloadLeaderboardEntriesForUsers(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, SteamId[] prgUsers, int cUsers)
internal CallResult`1<LeaderboardScoresDownloaded_t> DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, SteamId[] prgUsers, int cUsers)
private bool _GetDownloadedLeaderboardEntry(IntPtr self, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t& pLeaderboardEntry, Int32[] pDetails, int cDetailsMax)
internal bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t& pLeaderboardEntry, Int32[] pDetails, int cDetailsMax)
private SteamAPICall_t _UploadLeaderboardScore(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, Int32[] pScoreDetails, int cScoreDetailsCount)
internal CallResult`1<LeaderboardScoreUploaded_t> UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, Int32[] pScoreDetails, int cScoreDetailsCount)
private SteamAPICall_t _AttachLeaderboardUGC(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
internal CallResult`1<LeaderboardUGCSet_t> AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
private SteamAPICall_t _GetNumberOfCurrentPlayers(IntPtr self)
internal CallResult`1<NumberOfCurrentPlayers_t> GetNumberOfCurrentPlayers()
private SteamAPICall_t _RequestGlobalAchievementPercentages(IntPtr self)
internal CallResult`1<GlobalAchievementPercentagesReady_t> RequestGlobalAchievementPercentages()
private int _GetMostAchievedAchievementInfo(IntPtr self, IntPtr pchName, UInt32 unNameBufLen, Single& pflPercent, Boolean& pbAchieved)
internal int GetMostAchievedAchievementInfo(String& pchName, Single& pflPercent, Boolean& pbAchieved)
private int _GetNextMostAchievedAchievementInfo(IntPtr self, int iIteratorPrevious, IntPtr pchName, UInt32 unNameBufLen, Single& pflPercent, Boolean& pbAchieved)
internal int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, String& pchName, Single& pflPercent, Boolean& pbAchieved)
private bool _GetAchievementAchievedPercent(IntPtr self, string pchName, Single& pflPercent)
internal bool GetAchievementAchievedPercent(string pchName, Single& pflPercent)
private SteamAPICall_t _RequestGlobalStats(IntPtr self, int nHistoryDays)
internal CallResult`1<GlobalStatsReceived_t> RequestGlobalStats(int nHistoryDays)
private bool _GetGlobalStat(IntPtr self, string pchStatName, Int64& pData)
internal bool GetGlobalStat(string pchStatName, Int64& pData)
private bool _GetGlobalStat(IntPtr self, string pchStatName, Double& pData)
internal bool GetGlobalStat(string pchStatName, Double& pData)
private int _GetGlobalStatHistory(IntPtr self, string pchStatName, Int64[] pData, UInt32 cubData)
internal int GetGlobalStatHistory(string pchStatName, Int64[] pData, UInt32 cubData)
private int _GetGlobalStatHistory(IntPtr self, string pchStatName, Double[] pData, UInt32 cubData)
internal int GetGlobalStatHistory(string pchStatName, Double[] pData, UInt32 cubData)
private bool _GetAchievementProgressLimits(IntPtr self, string pchName, Int32& pnMinProgress, Int32& pnMaxProgress)
internal bool GetAchievementProgressLimits(string pchName, Int32& pnMinProgress, Int32& pnMaxProgress)
private bool _GetAchievementProgressLimits(IntPtr self, string pchName, Single& pfMinProgress, Single& pfMaxProgress)
internal bool GetAchievementProgressLimits(string pchName, Single& pfMinProgress, Single& pfMaxProgress)
}
internal Steamworks.ISteamUtils : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamUtils_v010()
public IntPtr GetUserInterfacePointer()
internal IntPtr SteamAPI_SteamGameServerUtils_v010()
public IntPtr GetServerInterfacePointer()
private UInt32 _GetSecondsSinceAppActive(IntPtr self)
internal UInt32 GetSecondsSinceAppActive()
private UInt32 _GetSecondsSinceComputerActive(IntPtr self)
internal UInt32 GetSecondsSinceComputerActive()
private Universe _GetConnectedUniverse(IntPtr self)
internal Universe GetConnectedUniverse()
private UInt32 _GetServerRealTime(IntPtr self)
internal UInt32 GetServerRealTime()
private Utf8StringPointer _GetIPCountry(IntPtr self)
internal string GetIPCountry()
private bool _GetImageSize(IntPtr self, int iImage, UInt32& pnWidth, UInt32& pnHeight)
internal bool GetImageSize(int iImage, UInt32& pnWidth, UInt32& pnHeight)
private bool _GetImageRGBA(IntPtr self, int iImage, Byte[] pubDest, int nDestBufferSize)
internal bool GetImageRGBA(int iImage, Byte[] pubDest, int nDestBufferSize)
private byte _GetCurrentBatteryPower(IntPtr self)
internal byte GetCurrentBatteryPower()
private UInt32 _GetAppID(IntPtr self)
internal UInt32 GetAppID()
private void _SetOverlayNotificationPosition(IntPtr self, NotificationPosition eNotificationPosition)
internal void SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
private bool _IsAPICallCompleted(IntPtr self, SteamAPICall_t hSteamAPICall, Boolean& pbFailed)
internal bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, Boolean& pbFailed)
private SteamAPICallFailure _GetAPICallFailureReason(IntPtr self, SteamAPICall_t hSteamAPICall)
internal SteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
private bool _GetAPICallResult(IntPtr self, SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, Boolean& pbFailed)
internal bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, Boolean& pbFailed)
private UInt32 _GetIPCCallCount(IntPtr self)
internal UInt32 GetIPCCallCount()
private void _SetWarningMessageHook(IntPtr self, IntPtr pFunction)
internal void SetWarningMessageHook(IntPtr pFunction)
private bool _IsOverlayEnabled(IntPtr self)
internal bool IsOverlayEnabled()
private bool _BOverlayNeedsPresent(IntPtr self)
internal bool BOverlayNeedsPresent()
private SteamAPICall_t _CheckFileSignature(IntPtr self, string szFileName)
internal CallResult`1<CheckFileSignature_t> CheckFileSignature(string szFileName)
private bool _ShowGamepadTextInput(IntPtr self, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, UInt32 unCharMax, string pchExistingText)
internal bool ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, UInt32 unCharMax, string pchExistingText)
private UInt32 _GetEnteredGamepadTextLength(IntPtr self)
internal UInt32 GetEnteredGamepadTextLength()
private bool _GetEnteredGamepadTextInput(IntPtr self, IntPtr pchText, UInt32 cchText)
internal bool GetEnteredGamepadTextInput(String& pchText)
private Utf8StringPointer _GetSteamUILanguage(IntPtr self)
internal string GetSteamUILanguage()
private bool _IsSteamRunningInVR(IntPtr self)
internal bool IsSteamRunningInVR()
private void _SetOverlayNotificationInset(IntPtr self, int nHorizontalInset, int nVerticalInset)
internal void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
private bool _IsSteamInBigPictureMode(IntPtr self)
internal bool IsSteamInBigPictureMode()
private void _StartVRDashboard(IntPtr self)
internal void StartVRDashboard()
private bool _IsVRHeadsetStreamingEnabled(IntPtr self)
internal bool IsVRHeadsetStreamingEnabled()
private void _SetVRHeadsetStreamingEnabled(IntPtr self, bool bEnabled)
internal void SetVRHeadsetStreamingEnabled(bool bEnabled)
private bool _IsSteamChinaLauncher(IntPtr self)
internal bool IsSteamChinaLauncher()
private bool _InitFilterText(IntPtr self, UInt32 unFilterOptions)
internal bool InitFilterText(UInt32 unFilterOptions)
private int _FilterText(IntPtr self, TextFilteringContext eContext, SteamId sourceSteamID, string pchInputMessage, IntPtr pchOutFilteredText, UInt32 nByteSizeOutFilteredText)
internal int FilterText(TextFilteringContext eContext, SteamId sourceSteamID, string pchInputMessage, String& pchOutFilteredText)
private SteamIPv6ConnectivityState _GetIPv6ConnectivityState(IntPtr self, SteamIPv6ConnectivityProtocol eProtocol)
internal SteamIPv6ConnectivityState GetIPv6ConnectivityState(SteamIPv6ConnectivityProtocol eProtocol)
private bool _IsSteamRunningOnSteamDeck(IntPtr self)
internal bool IsSteamRunningOnSteamDeck()
private bool _ShowFloatingGamepadTextInput(IntPtr self, TextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight)
internal bool ShowFloatingGamepadTextInput(TextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight)
private void _SetGameLauncherMode(IntPtr self, bool bLauncherMode)
internal void SetGameLauncherMode(bool bLauncherMode)
private bool _DismissFloatingGamepadTextInput(IntPtr self)
internal bool DismissFloatingGamepadTextInput()
}
internal Steamworks.ISteamVideo : SteamInterface {
internal void .ctor(bool IsGameServer)
internal IntPtr SteamAPI_SteamVideo_v002()
public IntPtr GetUserInterfacePointer()
private void _GetVideoURL(IntPtr self, AppId unVideoAppID)
internal void GetVideoURL(AppId unVideoAppID)
private bool _IsBroadcasting(IntPtr self, Int32& pnNumViewers)
internal bool IsBroadcasting(Int32& pnNumViewers)
private void _GetOPFSettings(IntPtr self, AppId unVideoAppID)
internal void GetOPFSettings(AppId unVideoAppID)
private bool _GetOPFStringForApp(IntPtr self, AppId unVideoAppID, IntPtr pchBuffer, Int32& pnBufferSize)
internal bool GetOPFStringForApp(AppId unVideoAppID, String& pchBuffer, Int32& pnBufferSize)
}
public Steamworks.ItemPreviewType : Enum {
public int value__
public ItemPreviewType Image
public ItemPreviewType YouTubeVideo
public ItemPreviewType Sketchfab
public ItemPreviewType EnvironmentMap_HorizontalCross
public ItemPreviewType EnvironmentMap_LatLong
public ItemPreviewType ReservedMax
}
internal Steamworks.ItemState : Enum {
public int value__
public ItemState None
public ItemState Subscribed
public ItemState LegacyItem
public ItemState Installed
public ItemState NeedsUpdate
public ItemState Downloading
public ItemState DownloadPending
}
internal Steamworks.ItemStatistic : Enum {
public int value__
public ItemStatistic NumSubscriptions
public ItemStatistic NumFavorites
public ItemStatistic NumFollowers
public ItemStatistic NumUniqueSubscriptions
public ItemStatistic NumUniqueFavorites
public ItemStatistic NumUniqueFollowers
public ItemStatistic NumUniqueWebsiteViews
public ItemStatistic ReportScore
public ItemStatistic NumSecondsPlayed
public ItemStatistic NumPlaytimeSessions
public ItemStatistic NumComments
public ItemStatistic NumSecondsPlayedDuringTimePeriod
public ItemStatistic NumPlaytimeSessionsDuringTimePeriod
}
internal Steamworks.ItemUpdateStatus : Enum {
public int value__
public ItemUpdateStatus Invalid
public ItemUpdateStatus PreparingConfig
public ItemUpdateStatus PreparingContent
public ItemUpdateStatus UploadingContent
public ItemUpdateStatus UploadingPreviewFile
public ItemUpdateStatus CommittingChanges
}
internal Steamworks.LeaderboardDataRequest : Enum {
public int value__
public LeaderboardDataRequest Global
public LeaderboardDataRequest GlobalAroundUser
public LeaderboardDataRequest Friends
public LeaderboardDataRequest Users
}
internal Steamworks.LeaderboardUploadScoreMethod : Enum {
public int value__
public LeaderboardUploadScoreMethod None
public LeaderboardUploadScoreMethod KeepBest
public LeaderboardUploadScoreMethod ForceUpdate
}
internal Steamworks.LobbyComparison : Enum {
public int value__
public LobbyComparison EqualToOrLessThan
public LobbyComparison LessThan
public LobbyComparison Equal
public LobbyComparison GreaterThan
public LobbyComparison EqualToOrGreaterThan
public LobbyComparison NotEqual
}
internal Steamworks.LobbyDistanceFilter : Enum {
public int value__
public LobbyDistanceFilter Close
public LobbyDistanceFilter Default
public LobbyDistanceFilter Far
public LobbyDistanceFilter Worldwide
}
internal Steamworks.LobbyType : Enum {
public int value__
public LobbyType Private
public LobbyType FriendsOnly
public LobbyType Public
public LobbyType Invisible
public LobbyType PrivateUnique
}
internal Steamworks.MarketNotAllowedReasonFlags : Enum {
public int value__
public MarketNotAllowedReasonFlags None
public MarketNotAllowedReasonFlags TemporaryFailure
public MarketNotAllowedReasonFlags AccountDisabled
public MarketNotAllowedReasonFlags AccountLockedDown
public MarketNotAllowedReasonFlags AccountLimited
public MarketNotAllowedReasonFlags TradeBanned
public MarketNotAllowedReasonFlags AccountNotTrusted
public MarketNotAllowedReasonFlags SteamGuardNotEnabled
public MarketNotAllowedReasonFlags SteamGuardOnlyRecentlyEnabled
public MarketNotAllowedReasonFlags RecentPasswordReset
public MarketNotAllowedReasonFlags NewPaymentMethod
public MarketNotAllowedReasonFlags InvalidCookie
public MarketNotAllowedReasonFlags UsingNewDevice
public MarketNotAllowedReasonFlags RecentSelfRefund
public MarketNotAllowedReasonFlags NewPaymentMethodCannotBeVerified
public MarketNotAllowedReasonFlags NoRecentPurchases
public MarketNotAllowedReasonFlags AcceptedWalletGift
}
internal Steamworks.MatchMakingServerResponse : Enum {
public int value__
public MatchMakingServerResponse ServerResponded
public MatchMakingServerResponse ServerFailedToRespond
public MatchMakingServerResponse NoServersListedOnMasterServer
}
internal Steamworks.MotionState : ValueType {
public float RotQuatX
public float RotQuatY
public float RotQuatZ
public float RotQuatW
public float PosAccelX
public float PosAccelY
public float PosAccelZ
public float RotVelX
public float RotVelY
public float RotVelZ
}
public Steamworks.MusicStatus : Enum {
public int value__
public MusicStatus Undefined
public MusicStatus Playing
public MusicStatus Paused
public MusicStatus Idle
}
internal Steamworks.NetConfig : Enum {
public int value__
public NetConfig Invalid
public NetConfig TimeoutInitial
public NetConfig TimeoutConnected
public NetConfig SendBufferSize
public NetConfig ConnectionUserData
public NetConfig SendRateMin
public NetConfig SendRateMax
public NetConfig NagleTime
public NetConfig IP_AllowWithoutAuth
public NetConfig MTU_PacketSize
public NetConfig MTU_DataSize
public NetConfig Unencrypted
public NetConfig SymmetricConnect
public NetConfig LocalVirtualPort
public NetConfig DualWifi_Enable
public NetConfig EnableDiagnosticsUI
public NetConfig FakePacketLoss_Send
public NetConfig FakePacketLoss_Recv
public NetConfig FakePacketLag_Send
public NetConfig FakePacketLag_Recv
public NetConfig FakePacketReorder_Send
public NetConfig FakePacketReorder_Recv
public NetConfig FakePacketReorder_Time
public NetConfig FakePacketDup_Send
public NetConfig FakePacketDup_Recv
public NetConfig FakePacketDup_TimeMax
public NetConfig PacketTraceMaxBytes
public NetConfig FakeRateLimit_Send_Rate
public NetConfig FakeRateLimit_Send_Burst
public NetConfig FakeRateLimit_Recv_Rate
public NetConfig FakeRateLimit_Recv_Burst
public NetConfig Callback_ConnectionStatusChanged
public NetConfig Callback_AuthStatusChanged
public NetConfig Callback_RelayNetworkStatusChanged
public NetConfig Callback_MessagesSessionRequest
public NetConfig Callback_MessagesSessionFailed
public NetConfig Callback_CreateConnectionSignaling
public NetConfig Callback_FakeIPResult
public NetConfig P2P_STUN_ServerList
public NetConfig P2P_Transport_ICE_Enable
public NetConfig P2P_Transport_ICE_Penalty
public NetConfig P2P_Transport_SDR_Penalty
public NetConfig P2P_TURN_ServerList
public NetConfig P2P_TURN_UserList
public NetConfig P2P_TURN_PassList
public NetConfig P2P_Transport_ICE_Implementation
public NetConfig SDRClient_ConsecutitivePingTimeoutsFailInitial
public NetConfig SDRClient_ConsecutitivePingTimeoutsFail
public NetConfig SDRClient_MinPingsBeforePingAccurate
public NetConfig SDRClient_SingleSocket
public NetConfig SDRClient_ForceRelayCluster
public NetConfig SDRClient_DebugTicketAddress
public NetConfig SDRClient_ForceProxyAddr
public NetConfig SDRClient_FakeClusterPing
public NetConfig LogLevel_AckRTT
public NetConfig LogLevel_PacketDecode
public NetConfig LogLevel_Message
public NetConfig LogLevel_PacketGaps
public NetConfig LogLevel_P2PRendezvous
public NetConfig LogLevel_SDRRelayPings
public NetConfig DELETED_EnumerateDevVars
}
internal Steamworks.NetConfigResult : Enum {
public int value__
public NetConfigResult BadValue
public NetConfigResult BadScopeObj
public NetConfigResult BufferTooSmall
public NetConfigResult OK
public NetConfigResult OKInherited
}
internal Steamworks.NetConfigScope : Enum {
public int value__
public NetConfigScope Global
public NetConfigScope SocketsInterface
public NetConfigScope ListenSocket
public NetConfigScope Connection
}
internal Steamworks.NetConfigType : Enum {
public int value__
public NetConfigType Int32
public NetConfigType Int64
public NetConfigType Float
public NetConfigType String
public NetConfigType Ptr
}
public Steamworks.NetConnectionEnd : Enum {
public int value__
public NetConnectionEnd Invalid
public NetConnectionEnd App_Min
public NetConnectionEnd App_Generic
public NetConnectionEnd App_Max
public NetConnectionEnd AppException_Min
public NetConnectionEnd AppException_Generic
public NetConnectionEnd AppException_Max
public NetConnectionEnd Local_Min
public NetConnectionEnd Local_OfflineMode
public NetConnectionEnd Local_ManyRelayConnectivity
public NetConnectionEnd Local_HostedServerPrimaryRelay
public NetConnectionEnd Local_NetworkConfig
public NetConnectionEnd Local_Rights
public NetConnectionEnd Local_P2P_ICE_NoPublicAddresses
public NetConnectionEnd Local_Max
public NetConnectionEnd Remote_Min
public NetConnectionEnd Remote_Timeout
public NetConnectionEnd Remote_BadCrypt
public NetConnectionEnd Remote_BadCert
public NetConnectionEnd Remote_BadProtocolVersion
public NetConnectionEnd Remote_P2P_ICE_NoPublicAddresses
public NetConnectionEnd Remote_Max
public NetConnectionEnd Misc_Min
public NetConnectionEnd Misc_Generic
public NetConnectionEnd Misc_InternalError
public NetConnectionEnd Misc_Timeout
public NetConnectionEnd Misc_SteamConnectivity
public NetConnectionEnd Misc_NoRelaySessionsToClient
public NetConnectionEnd Misc_P2P_Rendezvous
public NetConnectionEnd Misc_P2P_NAT_Firewall
public NetConnectionEnd Misc_PeerSentNoConnection
public NetConnectionEnd Misc_Max
}
internal Steamworks.NetDebugFunc : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(NetDebugOutput nType, IntPtr pszMsg)
public IAsyncResult BeginInvoke(NetDebugOutput nType, IntPtr pszMsg, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Steamworks.NetDebugOutput : Enum {
public int value__
public NetDebugOutput None
public NetDebugOutput Bug
public NetDebugOutput Error
public NetDebugOutput Important
public NetDebugOutput Warning
public NetDebugOutput Msg
public NetDebugOutput Verbose
public NetDebugOutput Debug
public NetDebugOutput Everything
}
internal Steamworks.NetIdentityType : Enum {
public int value__
public NetIdentityType Invalid
public NetIdentityType SteamID
public NetIdentityType XboxPairwiseID
public NetIdentityType SonyPSN
public NetIdentityType GoogleStadia
public NetIdentityType IPAddress
public NetIdentityType GenericString
public NetIdentityType GenericBytes
public NetIdentityType UnknownType
public NetIdentityType Force32bit
}
public Steamworks.NotificationPosition : Enum {
public int value__
public NotificationPosition Invalid
public NotificationPosition TopLeft
public NotificationPosition TopRight
public NotificationPosition BottomLeft
public NotificationPosition BottomRight
}
public Steamworks.OverlayToStoreFlag : Enum {
public int value__
public OverlayToStoreFlag None
public OverlayToStoreFlag AddToCart
public OverlayToStoreFlag AddToCartAndShow
}
public Steamworks.P2PSend : Enum {
public int value__
public P2PSend Unreliable
public P2PSend UnreliableNoDelay
public P2PSend Reliable
public P2PSend ReliableWithBuffering
}
public Steamworks.P2PSessionError : Enum {
public int value__
public P2PSessionError None
public P2PSessionError NoRightsToApp
public P2PSessionError Timeout
public P2PSessionError NotRunningApp_DELETED
public P2PSessionError DestinationNotLoggedIn_DELETED
public P2PSessionError Max
}
public Steamworks.ParentalFeature : Enum {
public int value__
public ParentalFeature Invalid
public ParentalFeature Store
public ParentalFeature Community
public ParentalFeature Profile
public ParentalFeature Friends
public ParentalFeature News
public ParentalFeature Trading
public ParentalFeature Settings
public ParentalFeature Console
public ParentalFeature Browser
public ParentalFeature ParentalSetup
public ParentalFeature Library
public ParentalFeature Test
public ParentalFeature SiteLicense
public ParentalFeature KioskMode
public ParentalFeature Max
}
public Steamworks.PartyBeacon : ValueType {
internal PartyBeaconID_t Id
private ISteamParties Internal
public SteamId Owner
public string MetaData
private ISteamParties get_Internal()
public SteamId get_Owner()
public string get_MetaData()
public Task`1<string> JoinAsync()
public void OnReservationCompleted(SteamId steamid)
public void CancelReservation(SteamId steamid)
public bool Destroy()
}
internal Steamworks.PersonaChange : Enum {
public int value__
public PersonaChange Name
public PersonaChange Status
public PersonaChange ComeOnline
public PersonaChange GoneOffline
public PersonaChange GamePlayed
public PersonaChange GameServer
public PersonaChange Avatar
public PersonaChange JoinedSource
public PersonaChange LeftSource
public PersonaChange RelationshipChanged
public PersonaChange NameFirstSet
public PersonaChange Broadcast
public PersonaChange Nickname
public PersonaChange SteamLevel
public PersonaChange RichPresence
}
internal Steamworks.Platform : object {
public int StructPlatformPackSize
public string LibraryName
public CallingConvention CC
public int StructPackSize
}
internal Steamworks.PlayerResult_t : Enum {
public int value__
public PlayerResult_t FailedToConnect
public PlayerResult_t Abandoned
public PlayerResult_t Kicked
public PlayerResult_t Incomplete
public PlayerResult_t Completed
}
public Steamworks.Relationship : Enum {
public int value__
public Relationship None
public Relationship Blocked
public Relationship RequestRecipient
public Relationship Friend
public Relationship RequestInitiator
public Relationship Ignored
public Relationship IgnoredFriend
public Relationship Suggested_DEPRECATED
public Relationship Max
}
internal Steamworks.RemoteStorageFilePathType : Enum {
public int value__
public RemoteStorageFilePathType Invalid
public RemoteStorageFilePathType Absolute
public RemoteStorageFilePathType APIFilename
}
internal Steamworks.RemoteStorageLocalFileChange : Enum {
public int value__
public RemoteStorageLocalFileChange Invalid
public RemoteStorageLocalFileChange FileUpdated
public RemoteStorageLocalFileChange FileDeleted
}
internal Steamworks.RemoteStoragePlatform : Enum {
public int value__
public RemoteStoragePlatform None
public RemoteStoragePlatform Windows
public RemoteStoragePlatform OSX
public RemoteStoragePlatform PS3
public RemoteStoragePlatform Linux
public RemoteStoragePlatform Switch
public RemoteStoragePlatform Android
public RemoteStoragePlatform IOS
public RemoteStoragePlatform All
}
internal Steamworks.RemoteStoragePublishedFileVisibility : Enum {
public int value__
public RemoteStoragePublishedFileVisibility Public
public RemoteStoragePublishedFileVisibility FriendsOnly
public RemoteStoragePublishedFileVisibility Private
public RemoteStoragePublishedFileVisibility Unlisted
}
public Steamworks.Result : Enum {
public int value__
public Result None
public Result OK
public Result Fail
public Result NoConnection
public Result InvalidPassword
public Result LoggedInElsewhere
public Result InvalidProtocolVer
public Result InvalidParam
public Result FileNotFound
public Result Busy
public Result InvalidState
public Result InvalidName
public Result InvalidEmail
public Result DuplicateName
public Result AccessDenied
public Result Timeout
public Result Banned
public Result AccountNotFound
public Result InvalidSteamID
public Result ServiceUnavailable
public Result NotLoggedOn
public Result Pending
public Result EncryptionFailure
public Result InsufficientPrivilege
public Result LimitExceeded
public Result Revoked
public Result Expired
public Result AlreadyRedeemed
public Result DuplicateRequest
public Result AlreadyOwned
public Result IPNotFound
public Result PersistFailed
public Result LockingFailed
public Result LogonSessionReplaced
public Result ConnectFailed
public Result HandshakeFailed
public Result IOFailure
public Result RemoteDisconnect
public Result ShoppingCartNotFound
public Result Blocked
public Result Ignored
public Result NoMatch
public Result AccountDisabled
public Result ServiceReadOnly
public Result AccountNotFeatured
public Result AdministratorOK
public Result ContentVersion
public Result TryAnotherCM
public Result PasswordRequiredToKickSession
public Result AlreadyLoggedInElsewhere
public Result Suspended
public Result Cancelled
public Result DataCorruption
public Result DiskFull
public Result RemoteCallFailed
public Result PasswordUnset
public Result ExternalAccountUnlinked
public Result PSNTicketInvalid
public Result ExternalAccountAlreadyLinked
public Result RemoteFileConflict
public Result IllegalPassword
public Result SameAsPreviousValue
public Result AccountLogonDenied
public Result CannotUseOldPassword
public Result InvalidLoginAuthCode
public Result AccountLogonDeniedNoMail
public Result HardwareNotCapableOfIPT
public Result IPTInitError
public Result ParentalControlRestricted
public Result FacebookQueryError
public Result ExpiredLoginAuthCode
public Result IPLoginRestrictionFailed
public Result AccountLockedDown
public Result AccountLogonDeniedVerifiedEmailRequired
public Result NoMatchingURL
public Result BadResponse
public Result RequirePasswordReEntry
public Result ValueOutOfRange
public Result UnexpectedError
public Result Disabled
public Result InvalidCEGSubmission
public Result RestrictedDevice
public Result RegionLocked
public Result RateLimitExceeded
public Result AccountLoginDeniedNeedTwoFactor
public Result ItemDeleted
public Result AccountLoginDeniedThrottle
public Result TwoFactorCodeMismatch
public Result TwoFactorActivationCodeMismatch
public Result AccountAssociatedToMultiplePartners
public Result NotModified
public Result NoMobileDevice
public Result TimeNotSynced
public Result SmsCodeFailed
public Result AccountLimitExceeded
public Result AccountActivityLimitExceeded
public Result PhoneActivityLimitExceeded
public Result RefundToWallet
public Result EmailSendFailure
public Result NotSettled
public Result NeedCaptcha
public Result GSLTDenied
public Result GSOwnerDenied
public Result InvalidItemType
public Result IPBanned
public Result GSLTExpired
public Result InsufficientFunds
public Result TooManyPending
public Result NoSiteLicensesFound
public Result WGNetworkSendExceeded
public Result AccountNotFriends
public Result LimitedUserAccount
public Result CantRemoveItem
public Result AccountDeleted
public Result ExistingUserCancelledLicense
public Result CommunityCooldown
public Result NoLauncherSpecified
public Result MustAgreeToSSA
public Result LauncherMigrated
public Result SteamRealmMismatch
public Result InvalidSignature
public Result ParseFailure
public Result NoVerifiedPhone
public Result InsufficientBattery
public Result ChargerRequired
public Result CachedCredentialInvalid
public Result K_EResultPhoneNumberIsVOIP
}
public Steamworks.RoomEnter : Enum {
public int value__
public RoomEnter Success
public RoomEnter DoesntExist
public RoomEnter NotAllowed
public RoomEnter Full
public RoomEnter Error
public RoomEnter Banned
public RoomEnter Limited
public RoomEnter ClanDisabled
public RoomEnter CommunityBan
public RoomEnter MemberBlockedYou
public RoomEnter YouBlockedMember
public RoomEnter RatelimitExceeded
}
public Steamworks.ServerList.Base : object {
private AppId <AppId>k__BackingField
private Action OnChanges
private Action`1<ServerInfo> OnResponsiveServer
public List`1<ServerInfo> Responsive
public List`1<ServerInfo> Unresponsive
public List`1<ServerInfo> Unqueried
internal HServerListRequest request
internal List`1<MatchMakingKeyValuePair> filters
internal List`1<int> watchList
internal int LastCount
internal ISteamMatchmakingServers Internal
public AppId AppId
internal int Count
internal bool IsRefreshing
internal ISteamMatchmakingServers get_Internal()
public AppId get_AppId()
public void set_AppId(AppId value)
public void add_OnChanges(Action value)
public void remove_OnChanges(Action value)
public void add_OnResponsiveServer(Action`1<ServerInfo> value)
public void remove_OnResponsiveServer(Action`1<ServerInfo> value)
public Task`1<bool> RunQueryAsync(float timeoutSeconds)
public void Cancel()
internal void LaunchQuery()
internal MatchMakingKeyValuePair[] GetFilters()
public void AddFilter(string key, string value)
internal int get_Count()
internal bool get_IsRefreshing()
private void Reset()
private void ReleaseQuery()
public void Dispose()
internal void InvokeChanges()
private void UpdatePending()
public void UpdateResponsive()
private void MovePendingToUnresponsive()
private void OnServer(ServerInfo serverInfo, bool responded)
private bool <UpdateResponsive>b__34_0(int x)
private bool <MovePendingToUnresponsive>b__35_0(int x)
}
public Steamworks.ServerList.Favourites : Base {
internal void LaunchQuery()
}
public Steamworks.ServerList.Friends : Base {
internal void LaunchQuery()
}
public Steamworks.ServerList.History : Base {
internal void LaunchQuery()
}
public Steamworks.ServerList.Internet : Base {
internal void LaunchQuery()
}
public Steamworks.ServerList.IpList : Internet {
public List`1<string> Ips
private bool wantsCancel
public void .ctor(IEnumerable`1<string> list)
public void .ctor(String[] list)
public Task`1<bool> RunQueryAsync(float timeoutSeconds)
public void Cancel()
public void Dispose()
}
public Steamworks.ServerList.LocalNetwork : Base {
internal void LaunchQuery()
}
internal Steamworks.ServerMode : Enum {
public int value__
public ServerMode Invalid
public ServerMode NoAuthentication
public ServerMode Authentication
public ServerMode AuthenticationAndSecure
}
public Steamworks.SocketManager : object {
private ISocketManager <Interface>k__BackingField
public HashSet`1<Connection> Connecting
public HashSet`1<Connection> Connected
private Socket <Socket>k__BackingField
internal HSteamNetPollGroup pollGroup
public ISocketManager Interface
public Socket Socket
public ISocketManager get_Interface()
public void set_Interface(ISocketManager value)
public Socket get_Socket()
internal void set_Socket(Socket value)
public string ToString()
internal void Initialize()
public bool Close()
public void OnConnectionChanged(Connection connection, ConnectionInfo info)
public void OnConnecting(Connection connection, ConnectionInfo info)
public void OnConnected(Connection connection, ConnectionInfo info)
public void OnDisconnected(Connection connection, ConnectionInfo info)
public int Receive(int bufferSize, bool receiveToEnd)
internal void ReceiveMessage(IntPtr msgPtr)
public void OnMessage(Connection connection, NetIdentity identity, IntPtr data, int size, long messageNum, long recvTime, int channel)
}
internal Steamworks.SourceServerQuery : object {
private Byte[] A2S_SERVERQUERY_GETCHALLENGE
private byte A2S_RULES
private Dictionary`2<IPEndPoint, Task`1<Dictionary`2<string, string>>> PendingQueries
internal Task`1<Dictionary`2<string, string>> GetRules(ServerInfo server)
private Task`1<Dictionary`2<string, string>> GetRulesImpl(IPEndPoint endpoint)
private Task`1<Dictionary`2<string, string>> GetRules(UdpClient client)
private Task`1<Byte[]> Receive(UdpClient client)
private Task`1<Byte[]> GetChallengeData(UdpClient client)
private Task Send(UdpClient client, Byte[] message)
private Byte[] Combine(Byte[][] arrays)
}
internal Steamworks.SteamAPI : object {
internal bool Init()
internal void Shutdown()
internal HSteamPipe GetHSteamPipe()
internal bool RestartAppIfNecessary(UInt32 unOwnAppID)
}
internal Steamworks.SteamAPICallFailure : Enum {
public int value__
public SteamAPICallFailure None
public SteamAPICallFailure SteamGone
public SteamAPICallFailure NetworkFailure
public SteamAPICallFailure InvalidHandle
public SteamAPICallFailure MismatchedCallback
}
public Steamworks.SteamApps : SteamSharedClass`1<SteamApps> {
private Action`1<AppId> OnDlcInstalled
private Action OnNewLaunchParameters
internal ISteamApps Internal
public bool IsSubscribed
public bool IsSubscribedFromFamilySharing
public bool IsLowViolence
public bool IsCybercafe
public bool IsVACBanned
public string GameLanguage
public String[] AvailableLanguages
public bool IsSubscribedFromFreeWeekend
public string CurrentBetaName
public SteamId AppOwner
public int BuildId
public string CommandLine
internal ISteamApps get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents()
public void add_OnDlcInstalled(Action`1<AppId> value)
public void remove_OnDlcInstalled(Action`1<AppId> value)
public void add_OnNewLaunchParameters(Action value)
public void remove_OnNewLaunchParameters(Action value)
public bool get_IsSubscribed()
public bool get_IsSubscribedFromFamilySharing()
public bool get_IsLowViolence()
public bool get_IsCybercafe()
public bool get_IsVACBanned()
public string get_GameLanguage()
public String[] get_AvailableLanguages()
public bool IsSubscribedToApp(AppId appid)
public bool IsDlcInstalled(AppId appid)
public DateTime PurchaseTime(AppId appid)
public bool get_IsSubscribedFromFreeWeekend()
public IEnumerable`1<DlcInformation> DlcInformation()
public void InstallDlc(AppId appid)
public void UninstallDlc(AppId appid)
public string get_CurrentBetaName()
public void MarkContentCorrupt(bool missingFilesOnly)
public IEnumerable`1<DepotId> InstalledDepots(AppId appid)
public string AppInstallDir(AppId appid)
public bool IsAppInstalled(AppId appid)
public SteamId get_AppOwner()
public string GetLaunchParam(string param)
public DownloadProgress DlcDownloadProgress(AppId appid)
public int get_BuildId()
public Task`1<Nullable`1<FileDetails>> GetFileDetailsAsync(string filename)
public string get_CommandLine()
public bool IsTimedTrial(Int32& secondsAllowed, Int32& secondsPlayed)
}
public Steamworks.SteamClass : object {
internal bool InitializeInterface(bool server)
internal void DestroyInterface(bool server)
}
public Steamworks.SteamClient : object {
private bool initialized
private List`1<SteamClass> openInterfaces
private AppId <AppId>k__BackingField
public bool IsValid
public bool IsLoggedOn
public SteamId SteamId
public string Name
public FriendState State
public AppId AppId
public void Init(UInt32 appid, bool asyncCallbacks)
internal void AddInterface()
internal void ShutdownInterfaces()
public bool get_IsValid()
public void Shutdown()
internal void Cleanup()
public void RunCallbacks()
public bool get_IsLoggedOn()
public SteamId get_SteamId()
public string get_Name()
public FriendState get_State()
public AppId get_AppId()
internal void set_AppId(AppId value)
public bool RestartAppIfNecessary(UInt32 appid)
internal void ValidCheck()
}
public Steamworks.SteamClientClass`1 : SteamClass {
internal SteamInterface Interface
internal bool InitializeInterface(bool server)
internal void SetInterface(bool server, SteamInterface iface)
internal void DestroyInterface(bool server)
}
internal Steamworks.SteamControllerLEDFlag : Enum {
public int value__
public SteamControllerLEDFlag SetColor
public SteamControllerLEDFlag RestoreUserDefault
}
internal Steamworks.SteamControllerPad : Enum {
public int value__
public SteamControllerPad Left
public SteamControllerPad Right
}
public Steamworks.SteamDeviceFormFactor : Enum {
public int value__
public SteamDeviceFormFactor Unknown
public SteamDeviceFormFactor Phone
public SteamDeviceFormFactor Tablet
public SteamDeviceFormFactor Computer
public SteamDeviceFormFactor TV
}
public Steamworks.SteamFriends : SteamClientClass`1<SteamFriends> {
private Dictionary`2<string, string> richPresence
private Action`3<Friend, string, string> OnChatMessage
private Action`3<Friend, string, string> OnClanChatMessage
private Action`1<Friend> OnPersonaStateChange
private Action`2<Friend, string> OnGameRichPresenceJoinRequested
private Action`1<bool> OnGameOverlayActivated
private Action`2<string, string> OnGameServerChangeRequested
private Action`2<Lobby, SteamId> OnGameLobbyJoinRequested
private Action`1<Friend> OnFriendRichPresenceUpdate
private Action`1<string> OnOverlayBrowserProtocol
private bool _listenForFriendsMessages
internal ISteamFriends Internal
public bool ListenForFriendsMessages
internal ISteamFriends get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents()
public void add_OnChatMessage(Action`3<Friend, string, string> value)
public void remove_OnChatMessage(Action`3<Friend, string, string> value)
public void add_OnClanChatMessage(Action`3<Friend, string, string> value)
public void remove_OnClanChatMessage(Action`3<Friend, string, string> value)
public void add_OnPersonaStateChange(Action`1<Friend> value)
public void remove_OnPersonaStateChange(Action`1<Friend> value)
public void add_OnGameRichPresenceJoinRequested(Action`2<Friend, string> value)
public void remove_OnGameRichPresenceJoinRequested(Action`2<Friend, string> value)
public void add_OnGameOverlayActivated(Action`1<bool> value)
public void remove_OnGameOverlayActivated(Action`1<bool> value)
public void add_OnGameServerChangeRequested(Action`2<string, string> value)
public void remove_OnGameServerChangeRequested(Action`2<string, string> value)
public void add_OnGameLobbyJoinRequested(Action`2<Lobby, SteamId> value)
public void remove_OnGameLobbyJoinRequested(Action`2<Lobby, SteamId> value)
public void add_OnFriendRichPresenceUpdate(Action`1<Friend> value)
public void remove_OnFriendRichPresenceUpdate(Action`1<Friend> value)
public void add_OnOverlayBrowserProtocol(Action`1<string> value)
public void remove_OnOverlayBrowserProtocol(Action`1<string> value)
private void OnFriendChatMessage(GameConnectedFriendChatMsg_t data)
private void OnGameConnectedClanChatMessage(GameConnectedClanChatMsg_t data)
private IEnumerable`1<Friend> GetFriendsWithFlag(FriendFlags flag)
public IEnumerable`1<Friend> GetFriends()
public IEnumerable`1<Friend> GetBlocked()
public IEnumerable`1<Friend> GetFriendsRequested()
public IEnumerable`1<Friend> GetFriendsClanMembers()
public IEnumerable`1<Friend> GetFriendsOnGameServer()
public IEnumerable`1<Friend> GetFriendsRequestingFriendship()
public IEnumerable`1<Friend> GetPlayedWith()
public IEnumerable`1<Friend> GetFromSource(SteamId steamid)
public IEnumerable`1<Clan> GetClans()
public void OpenOverlay(string type)
public void OpenUserOverlay(SteamId id, string type)
public void OpenStoreOverlay(AppId id, OverlayToStoreFlag overlayToStoreFlag)
public void OpenWebOverlay(string url, bool modal)
public void OpenGameInviteOverlay(SteamId lobby)
public void SetPlayedWith(SteamId steamid)
public bool RequestUserInformation(SteamId steamid, bool nameonly)
internal Task CacheUserInformationAsync(SteamId steamid, bool nameonly)
public Task`1<Nullable`1<Image>> GetSmallAvatarAsync(SteamId steamid)
public Task`1<Nullable`1<Image>> GetMediumAvatarAsync(SteamId steamid)
public Task`1<Nullable`1<Image>> GetLargeAvatarAsync(SteamId steamid)
public string GetRichPresence(string key)
public bool SetRichPresence(string key, string value)
public void ClearRichPresence()
public bool get_ListenForFriendsMessages()
public void set_ListenForFriendsMessages(bool value)
public Task`1<bool> IsFollowing(SteamId steamID)
public Task`1<int> GetFollowerCount(SteamId steamID)
public Task`1<SteamId[]> GetFollowingList()
public bool RegisterProtocolInOverlayBrowser(string protocol)
public Task`1<bool> JoinClanChatRoom(SteamId chatId)
public bool SendClanChatRoomMessage(SteamId chatId, string message)
}
internal Steamworks.SteamGameServer : object {
internal void RunCallbacks()
internal void Shutdown()
internal HSteamPipe GetHSteamPipe()
}
public Steamworks.SteamId : ValueType {
public ulong Value
public UInt32 AccountId
public bool IsValid
public SteamId op_Implicit(ulong value)
public ulong op_Implicit(SteamId value)
public string ToString()
public UInt32 get_AccountId()
public bool get_IsValid()
}
public Steamworks.SteamInput : SteamClientClass`1<SteamInput> {
internal int STEAM_CONTROLLER_MAX_COUNT
private InputHandle_t[] queryArray
internal Dictionary`2<string, InputDigitalActionHandle_t> DigitalHandles
internal Dictionary`2<string, InputAnalogActionHandle_t> AnalogHandles
internal Dictionary`2<string, InputActionSetHandle_t> ActionSets
internal ISteamInput Internal
public IEnumerable`1<Controller> Controllers
internal ISteamInput get_Internal()
internal bool InitializeInterface(bool server)
public void RunFrame()
public IEnumerable`1<Controller> get_Controllers()
public string GetDigitalActionGlyph(Controller controller, string action)
public string GetPngActionGlyph(Controller controller, string action, GlyphSize size)
public string GetSvgActionGlyph(Controller controller, string action)
internal InputDigitalActionHandle_t GetDigitalActionHandle(string name)
internal InputAnalogActionHandle_t GetAnalogActionHandle(string name)
internal InputActionSetHandle_t GetActionSetHandle(string name)
}
internal Steamworks.SteamInputActionEventType : Enum {
public int value__
public SteamInputActionEventType DigitalAction
public SteamInputActionEventType AnalogAction
}
internal Steamworks.SteamInputConfigurationEnableType : Enum {
public int value__
public SteamInputConfigurationEnableType None
public SteamInputConfigurationEnableType Playstation
public SteamInputConfigurationEnableType Xbox
public SteamInputConfigurationEnableType Generic
public SteamInputConfigurationEnableType Switch
}
internal Steamworks.SteamInputGlyphStyle : Enum {
public int value__
public SteamInputGlyphStyle Knockout
public SteamInputGlyphStyle Light
public SteamInputGlyphStyle Dark
public SteamInputGlyphStyle NeutralColorABXY
public SteamInputGlyphStyle SolidABXY
}
internal Steamworks.SteamInputLEDFlag : Enum {
public int value__
public SteamInputLEDFlag SetColor
public SteamInputLEDFlag RestoreUserDefault
}
internal Steamworks.SteamInterface : object {
public IntPtr Self
public IntPtr SelfGlobal
public IntPtr SelfServer
public IntPtr SelfClient
private bool <IsServer>k__BackingField
public bool IsValid
public bool IsServer
public IntPtr GetUserInterfacePointer()
public IntPtr GetServerInterfacePointer()
public IntPtr GetGlobalInterfacePointer()
public bool get_IsValid()
public bool get_IsServer()
private void set_IsServer(bool value)
internal void SetupInterface(bool gameServer)
internal void ShutdownInterface()
}
internal Steamworks.SteamInternal : object {
internal bool GameServer_Init(UInt32 unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
}
public Steamworks.SteamInventory : SteamSharedClass`1<SteamInventory> {
private Action`1<InventoryResult> OnInventoryUpdated
private Action OnDefinitionsUpdated
private string <Currency>k__BackingField
private InventoryItem[] <Items>k__BackingField
private InventoryDef[] <Definitions>k__BackingField
private Dictionary`2<int, InventoryDef> _defMap
internal ISteamInventory Internal
public string Currency
public InventoryItem[] Items
public InventoryDef[] Definitions
internal ISteamInventory get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents(bool server)
private void InventoryUpdated(SteamInventoryFullUpdate_t x)
public void add_OnInventoryUpdated(Action`1<InventoryResult> value)
public void remove_OnInventoryUpdated(Action`1<InventoryResult> value)
public void add_OnDefinitionsUpdated(Action value)
public void remove_OnDefinitionsUpdated(Action value)
private void LoadDefinitions()
public void LoadItemDefinitions()
public Task`1<bool> WaitForDefinitions(float timeoutSeconds)
public InventoryDef FindDefinition(InventoryDefId defId)
public string get_Currency()
internal void set_Currency(string value)
public Task`1<InventoryDef[]> GetDefinitionsWithPricesAsync()
public InventoryItem[] get_Items()
internal void set_Items(InventoryItem[] value)
public InventoryDef[] get_Definitions()
internal void set_Definitions(InventoryDef[] value)
internal InventoryDef[] GetDefinitions()
public bool GetAllItems()
public Task`1<Nullable`1<InventoryResult>> GetAllItemsAsync()
public Task`1<Nullable`1<InventoryResult>> GenerateItemAsync(InventoryDef target, int amount)
public Task`1<Nullable`1<InventoryResult>> CraftItemAsync(InventoryItem[] list, InventoryDef target)
public Task`1<Nullable`1<InventoryResult>> CraftItemAsync(Amount[] list, InventoryDef target)
public Task`1<Nullable`1<InventoryResult>> DeserializeAsync(Byte[] data, int dataLength)
public Task`1<Nullable`1<InventoryResult>> GrantPromoItemsAsync()
public Task`1<Nullable`1<InventoryResult>> TriggerItemDropAsync(InventoryDefId id)
public Task`1<Nullable`1<InventoryResult>> AddPromoItemAsync(InventoryDefId id)
public Task`1<Nullable`1<InventoryPurchaseResult>> StartPurchaseAsync(InventoryDef[] items)
}
internal Steamworks.SteamIPType : Enum {
public int value__
public SteamIPType Type4
public SteamIPType Type6
}
internal Steamworks.SteamIPv6ConnectivityProtocol : Enum {
public int value__
public SteamIPv6ConnectivityProtocol Invalid
public SteamIPv6ConnectivityProtocol HTTP
public SteamIPv6ConnectivityProtocol UDP
}
internal Steamworks.SteamIPv6ConnectivityState : Enum {
public int value__
public SteamIPv6ConnectivityState Unknown
public SteamIPv6ConnectivityState Good
public SteamIPv6ConnectivityState Bad
}
internal Steamworks.SteamItemFlags : Enum {
public int value__
public SteamItemFlags NoTrade
public SteamItemFlags Removed
public SteamItemFlags Consumed
}
public Steamworks.SteamMatchmaking : SteamClientClass`1<SteamMatchmaking> {
private Action`2<Friend, Lobby> OnLobbyInvite
private Action`1<Lobby> OnLobbyEntered
private Action`2<Result, Lobby> OnLobbyCreated
private Action`4<Lobby, UInt32, ushort, SteamId> OnLobbyGameCreated
private Action`1<Lobby> OnLobbyDataChanged
private Action`2<Lobby, Friend> OnLobbyMemberDataChanged
private Action`2<Lobby, Friend> OnLobbyMemberJoined
private Action`2<Lobby, Friend> OnLobbyMemberLeave
private Action`2<Lobby, Friend> OnLobbyMemberDisconnected
private Action`3<Lobby, Friend, Friend> OnLobbyMemberKicked
private Action`3<Lobby, Friend, Friend> OnLobbyMemberBanned
private Action`3<Lobby, Friend, string> OnChatMessage
internal ISteamMatchmaking Internal
internal int MaxLobbyKeyLength
public LobbyQuery LobbyList
internal ISteamMatchmaking get_Internal()
internal bool InitializeInterface(bool server)
internal int get_MaxLobbyKeyLength()
internal void InstallEvents()
private void OnLobbyChatMessageRecievedAPI(LobbyChatMsg_t callback)
public void add_OnLobbyInvite(Action`2<Friend, Lobby> value)
public void remove_OnLobbyInvite(Action`2<Friend, Lobby> value)
public void add_OnLobbyEntered(Action`1<Lobby> value)
public void remove_OnLobbyEntered(Action`1<Lobby> value)
public void add_OnLobbyCreated(Action`2<Result, Lobby> value)
public void remove_OnLobbyCreated(Action`2<Result, Lobby> value)
public void add_OnLobbyGameCreated(Action`4<Lobby, UInt32, ushort, SteamId> value)
public void remove_OnLobbyGameCreated(Action`4<Lobby, UInt32, ushort, SteamId> value)
public void add_OnLobbyDataChanged(Action`1<Lobby> value)
public void remove_OnLobbyDataChanged(Action`1<Lobby> value)
public void add_OnLobbyMemberDataChanged(Action`2<Lobby, Friend> value)
public void remove_OnLobbyMemberDataChanged(Action`2<Lobby, Friend> value)
public void add_OnLobbyMemberJoined(Action`2<Lobby, Friend> value)
public void remove_OnLobbyMemberJoined(Action`2<Lobby, Friend> value)
public void add_OnLobbyMemberLeave(Action`2<Lobby, Friend> value)
public void remove_OnLobbyMemberLeave(Action`2<Lobby, Friend> value)
public void add_OnLobbyMemberDisconnected(Action`2<Lobby, Friend> value)
public void remove_OnLobbyMemberDisconnected(Action`2<Lobby, Friend> value)
public void add_OnLobbyMemberKicked(Action`3<Lobby, Friend, Friend> value)
public void remove_OnLobbyMemberKicked(Action`3<Lobby, Friend, Friend> value)
public void add_OnLobbyMemberBanned(Action`3<Lobby, Friend, Friend> value)
public void remove_OnLobbyMemberBanned(Action`3<Lobby, Friend, Friend> value)
public void add_OnChatMessage(Action`3<Lobby, Friend, string> value)
public void remove_OnChatMessage(Action`3<Lobby, Friend, string> value)
public LobbyQuery get_LobbyList()
public Task`1<Nullable`1<Lobby>> CreateLobbyAsync(int maxMembers)
public Task`1<Nullable`1<Lobby>> JoinLobbyAsync(SteamId lobbyId)
public IEnumerable`1<ServerInfo> GetFavoriteServers()
public IEnumerable`1<ServerInfo> GetHistoryServers()
}
internal Steamworks.SteamMatchmakingServers : SteamClientClass`1<SteamMatchmakingServers> {
internal ISteamMatchmakingServers Internal
internal ISteamMatchmakingServers get_Internal()
internal bool InitializeInterface(bool server)
}
public Steamworks.SteamMusic : SteamClientClass`1<SteamMusic> {
private Action OnPlaybackChanged
private Action`1<float> OnVolumeChanged
internal ISteamMusic Internal
public bool IsEnabled
public bool IsPlaying
public MusicStatus Status
public float Volume
internal ISteamMusic get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents()
public void add_OnPlaybackChanged(Action value)
public void remove_OnPlaybackChanged(Action value)
public void add_OnVolumeChanged(Action`1<float> value)
public void remove_OnVolumeChanged(Action`1<float> value)
public bool get_IsEnabled()
public bool get_IsPlaying()
public MusicStatus get_Status()
public void Play()
public void Pause()
public void PlayPrevious()
public void PlayNext()
public float get_Volume()
public void set_Volume(float value)
}
public Steamworks.SteamNetworking : SteamSharedClass`1<SteamNetworking> {
public Action`1<SteamId> OnP2PSessionRequest
public Action`2<SteamId, P2PSessionError> OnP2PConnectionFailed
internal ISteamNetworking Internal
internal ISteamNetworking get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents(bool server)
public bool AcceptP2PSessionWithUser(SteamId user)
public bool AllowP2PPacketRelay(bool allow)
public bool CloseP2PSessionWithUser(SteamId user)
public bool IsP2PPacketAvailable(int channel)
public bool IsP2PPacketAvailable(UInt32& msgSize, int channel)
public Nullable`1<P2Packet> ReadP2PPacket(int channel)
public bool ReadP2PPacket(Byte[] buffer, UInt32& size, SteamId& steamid, int channel)
public bool ReadP2PPacket(Byte* buffer, UInt32 cbuf, UInt32& size, SteamId& steamid, int channel)
public bool SendP2PPacket(SteamId steamid, Byte[] data, int length, int nChannel, P2PSend sendType)
public bool SendP2PPacket(SteamId steamid, Byte* data, UInt32 length, int nChannel, P2PSend sendType)
}
public Steamworks.SteamNetworkingAvailability : Enum {
public int value__
public SteamNetworkingAvailability CannotTry
public SteamNetworkingAvailability Failed
public SteamNetworkingAvailability Previously
public SteamNetworkingAvailability Retrying
public SteamNetworkingAvailability NeverTried
public SteamNetworkingAvailability Waiting
public SteamNetworkingAvailability Attempting
public SteamNetworkingAvailability Current
public SteamNetworkingAvailability Unknown
public SteamNetworkingAvailability Force32bit
}
internal Steamworks.SteamNetworkingFakeIPType : Enum {
public int value__
public SteamNetworkingFakeIPType Invalid
public SteamNetworkingFakeIPType NotFake
public SteamNetworkingFakeIPType GlobalIPv4
public SteamNetworkingFakeIPType LocalIPv4
}
public Steamworks.SteamNetworkingSockets : SteamSharedClass`1<SteamNetworkingSockets> {
private Dictionary`2<UInt32, SocketManager> SocketInterfaces
private Dictionary`2<UInt32, ConnectionManager> ConnectionInterfaces
private Action`2<Connection, ConnectionInfo> OnConnectionStatusChanged
private Action`1<NetAddress> OnFakeIPResult
internal ISteamNetworkingSockets Internal
public NetIdentity Identity
internal ISteamNetworkingSockets get_Internal()
public NetIdentity get_Identity()
internal bool InitializeInterface(bool server)
internal SocketManager GetSocketManager(UInt32 id)
internal void SetSocketManager(UInt32 id, SocketManager manager)
internal ConnectionManager GetConnectionManager(UInt32 id)
internal void SetConnectionManager(UInt32 id, ConnectionManager manager)
internal void InstallEvents(bool server)
private void ConnectionStatusChanged(SteamNetConnectionStatusChangedCallback_t data)
public void add_OnConnectionStatusChanged(Action`2<Connection, ConnectionInfo> value)
public void remove_OnConnectionStatusChanged(Action`2<Connection, ConnectionInfo> value)
private void FakeIPResult(SteamNetworkingFakeIPResult_t data)
public void add_OnFakeIPResult(Action`1<NetAddress> value)
public void remove_OnFakeIPResult(Action`1<NetAddress> value)
public T CreateNormalSocket(NetAddress address)
public SocketManager CreateNormalSocket(NetAddress address, ISocketManager intrface)
public T ConnectNormal(NetAddress address)
public ConnectionManager ConnectNormal(NetAddress address, IConnectionManager iface)
public T CreateRelaySocket(int virtualport)
public SocketManager CreateRelaySocket(int virtualport, ISocketManager intrface)
public T ConnectRelay(SteamId serverId, int virtualport)
public ConnectionManager ConnectRelay(SteamId serverId, int virtualport, IConnectionManager iface)
public bool RequestFakeIP(int numFakePorts)
public Result GetFakeIP(int fakePortIndex, NetAddress& address)
public T CreateRelaySocketFakeIP(int fakePortIndex)
public SocketManager CreateRelaySocketFakeIP(int fakePortIndex, ISocketManager intrface)
}
public Steamworks.SteamNetworkingUtils : SteamSharedClass`1<SteamNetworkingUtils> {
private Action`2<NetDebugOutput, string> OnDebugOutput
private SteamNetworkingAvailability <Status>k__BackingField
private NetDebugOutput _debugLevel
private NetDebugFunc _debugFunc
private ConcurrentQueue`1<DebugMessage> debugMessages
internal ISteamNetworkingUtils Internal
public SteamNetworkingAvailability Status
public Nullable`1<NetPingLocation> LocalPingLocation
public long LocalTimestamp
public float FakeSendPacketLoss
public float FakeRecvPacketLoss
public float FakeSendPacketLag
public float FakeRecvPacketLag
public int ConnectionTimeout
public int Timeout
public int SendBufferSize
public int SendRateMin
public int SendRateMax
public int NagleTime
public int AllowWithoutAuth
public int Unencrypted
public int DebugLevelAckRTT
public int DebugLevelPacketDecode
public int DebugLevelMessage
public int DebugLevelPacketGaps
public int DebugLevelP2PRendezvous
public int DebugLevelSDRRelayPings
public NetDebugOutput DebugLevel
internal ISteamNetworkingUtils get_Internal()
internal bool InitializeInterface(bool server)
private void InstallCallbacks(bool server)
public void add_OnDebugOutput(Action`2<NetDebugOutput, string> value)
public void remove_OnDebugOutput(Action`2<NetDebugOutput, string> value)
public SteamNetworkingAvailability get_Status()
private void set_Status(SteamNetworkingAvailability value)
public void InitRelayNetworkAccess()
public Nullable`1<NetPingLocation> get_LocalPingLocation()
public int EstimatePingTo(NetPingLocation target)
public Task WaitForPingDataAsync(float maxAgeInSeconds)
public long get_LocalTimestamp()
public float get_FakeSendPacketLoss()
public void set_FakeSendPacketLoss(float value)
public float get_FakeRecvPacketLoss()
public void set_FakeRecvPacketLoss(float value)
public float get_FakeSendPacketLag()
public void set_FakeSendPacketLag(float value)
public float get_FakeRecvPacketLag()
public void set_FakeRecvPacketLag(float value)
public int get_ConnectionTimeout()
public void set_ConnectionTimeout(int value)
public int get_Timeout()
public void set_Timeout(int value)
public int get_SendBufferSize()
public void set_SendBufferSize(int value)
public int get_SendRateMin()
public void set_SendRateMin(int value)
public int get_SendRateMax()
public void set_SendRateMax(int value)
public int get_NagleTime()
public void set_NagleTime(int value)
public int get_AllowWithoutAuth()
public void set_AllowWithoutAuth(int value)
public int get_Unencrypted()
public void set_Unencrypted(int value)
public int get_DebugLevelAckRTT()
public void set_DebugLevelAckRTT(int value)
public int get_DebugLevelPacketDecode()
public void set_DebugLevelPacketDecode(int value)
public int get_DebugLevelMessage()
public void set_DebugLevelMessage(int value)
public int get_DebugLevelPacketGaps()
public void set_DebugLevelPacketGaps(int value)
public int get_DebugLevelP2PRendezvous()
public void set_DebugLevelP2PRendezvous(int value)
public int get_DebugLevelSDRRelayPings()
public void set_DebugLevelSDRRelayPings(int value)
public NetDebugOutput get_DebugLevel()
public void set_DebugLevel(NetDebugOutput value)
private void OnDebugMessage(NetDebugOutput nType, IntPtr str)
internal void LogDebugMessage(NetDebugOutput type, string message)
internal void OutputDebugMessages()
internal NetMsg* AllocateMessage()
internal bool SetConfigInt(NetConfig type, int value)
internal int GetConfigInt(NetConfig type)
internal bool SetConfigFloat(NetConfig type, float value)
internal float GetConfigFloat(NetConfig type)
internal bool SetConfigString(NetConfig type, string value)
}
public Steamworks.SteamParental : SteamSharedClass`1<SteamParental> {
private Action OnSettingsChanged
internal ISteamParentalSettings Internal
public bool IsParentalLockEnabled
public bool IsParentalLockLocked
internal ISteamParentalSettings get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents(bool server)
public void add_OnSettingsChanged(Action value)
public void remove_OnSettingsChanged(Action value)
public bool get_IsParentalLockEnabled()
public bool get_IsParentalLockLocked()
public bool IsAppBlocked(AppId app)
public bool BIsAppInBlockList(AppId app)
public bool IsFeatureBlocked(ParentalFeature feature)
public bool BIsFeatureInBlockList(ParentalFeature feature)
}
public Steamworks.SteamParties : SteamClientClass`1<SteamParties> {
private Action OnBeaconLocationsUpdated
private Action OnActiveBeaconsUpdated
internal ISteamParties Internal
public int ActiveBeaconCount
public IEnumerable`1<PartyBeacon> ActiveBeacons
internal ISteamParties get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents(bool server)
public void add_OnBeaconLocationsUpdated(Action value)
public void remove_OnBeaconLocationsUpdated(Action value)
public void add_OnActiveBeaconsUpdated(Action value)
public void remove_OnActiveBeaconsUpdated(Action value)
public int get_ActiveBeaconCount()
public IEnumerable`1<PartyBeacon> get_ActiveBeacons()
}
internal Steamworks.SteamPartyBeaconLocationData : Enum {
public int value__
public SteamPartyBeaconLocationData Invalid
public SteamPartyBeaconLocationData Name
public SteamPartyBeaconLocationData IconURLSmall
public SteamPartyBeaconLocationData IconURLMedium
public SteamPartyBeaconLocationData IconURLLarge
}
internal Steamworks.SteamPartyBeaconLocationType : Enum {
public int value__
public SteamPartyBeaconLocationType Invalid
public SteamPartyBeaconLocationType ChatGroup
public SteamPartyBeaconLocationType Max
}
public Steamworks.SteamRemotePlay : SteamClientClass`1<SteamRemotePlay> {
private Action`1<RemotePlaySession> OnSessionConnected
private Action`1<RemotePlaySession> OnSessionDisconnected
internal ISteamRemotePlay Internal
public int SessionCount
internal ISteamRemotePlay get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents(bool server)
public void add_OnSessionConnected(Action`1<RemotePlaySession> value)
public void remove_OnSessionConnected(Action`1<RemotePlaySession> value)
public void add_OnSessionDisconnected(Action`1<RemotePlaySession> value)
public void remove_OnSessionDisconnected(Action`1<RemotePlaySession> value)
public int get_SessionCount()
public RemotePlaySession GetSession(int index)
public bool SendInvite(SteamId steamid)
}
public Steamworks.SteamRemoteStorage : SteamClientClass`1<SteamRemoteStorage> {
internal ISteamRemoteStorage Internal
public ulong QuotaBytes
public ulong QuotaUsedBytes
public ulong QuotaRemainingBytes
public bool IsCloudEnabled
public bool IsCloudEnabledForAccount
public bool IsCloudEnabledForApp
public int FileCount
public IEnumerable`1<string> Files
internal ISteamRemoteStorage get_Internal()
internal bool InitializeInterface(bool server)
public bool FileWrite(string filename, Byte[] data)
public Byte[] FileRead(string filename)
public bool FileExists(string filename)
public bool FilePersisted(string filename)
public DateTime FileTime(string filename)
public int FileSize(string filename)
public bool FileForget(string filename)
public bool FileDelete(string filename)
public ulong get_QuotaBytes()
public ulong get_QuotaUsedBytes()
public ulong get_QuotaRemainingBytes()
public bool get_IsCloudEnabled()
public bool get_IsCloudEnabledForAccount()
public bool get_IsCloudEnabledForApp()
public void set_IsCloudEnabledForApp(bool value)
public int get_FileCount()
public IEnumerable`1<string> get_Files()
}
public Steamworks.SteamScreenshots : SteamClientClass`1<SteamScreenshots> {
private Action OnScreenshotRequested
private Action`1<Screenshot> OnScreenshotReady
private Action`1<Result> OnScreenshotFailed
internal ISteamScreenshots Internal
public bool Hooked
internal ISteamScreenshots get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents()
public void add_OnScreenshotRequested(Action value)
public void remove_OnScreenshotRequested(Action value)
public void add_OnScreenshotReady(Action`1<Screenshot> value)
public void remove_OnScreenshotReady(Action`1<Screenshot> value)
public void add_OnScreenshotFailed(Action`1<Result> value)
public void remove_OnScreenshotFailed(Action`1<Result> value)
public Nullable`1<Screenshot> WriteScreenshot(Byte[] data, int width, int height)
public Nullable`1<Screenshot> AddScreenshot(string filename, string thumbnail, int width, int height)
public void TriggerScreenshot()
public bool get_Hooked()
public void set_Hooked(bool value)
}
public Steamworks.SteamServer : SteamServerClass`1<SteamServer> {
private Action`3<SteamId, SteamId, AuthResponse> OnValidateAuthTicketResponse
private Action OnSteamServersConnected
private Action`2<Result, bool> OnSteamServerConnectFailure
private Action`1<Result> OnSteamServersDisconnected
private Action`1<SteamNetworkingAvailability> OnSteamNetAuthenticationStatus
private List`1<SteamClass> openInterfaces
private bool _dedicatedServer
private int _maxplayers
private int _botcount
private string _mapname
private string _modDir
private string _product
private string _gameDescription
private string _serverName
private bool _passworded
private string _gametags
private Dictionary`2<string, string> KeyValue
internal ISteamGameServer Internal
public bool IsValid
public bool DedicatedServer
public int MaxPlayers
public int BotCount
public string MapName
public string ModDir
public string Product
public string GameDescription
public string ServerName
public bool Passworded
public string GameTags
public SteamId SteamId
public bool LoggedOn
public IPAddress PublicIp
public bool AutomaticHeartbeats
public bool AdvertiseServer
internal ISteamGameServer get_Internal()
internal bool InitializeInterface(bool server)
public bool get_IsValid()
internal void InstallEvents()
public void add_OnValidateAuthTicketResponse(Action`3<SteamId, SteamId, AuthResponse> value)
public void remove_OnValidateAuthTicketResponse(Action`3<SteamId, SteamId, AuthResponse> value)
public void add_OnSteamServersConnected(Action value)
public void remove_OnSteamServersConnected(Action value)
public void add_OnSteamServerConnectFailure(Action`2<Result, bool> value)
public void remove_OnSteamServerConnectFailure(Action`2<Result, bool> value)
public void add_OnSteamServersDisconnected(Action`1<Result> value)
public void remove_OnSteamServersDisconnected(Action`1<Result> value)
public void add_OnSteamNetAuthenticationStatus(Action`1<SteamNetworkingAvailability> value)
public void remove_OnSteamNetAuthenticationStatus(Action`1<SteamNetworkingAvailability> value)
public void Init(AppId appid, SteamServerInit init, bool asyncCallbacks)
internal void AddInterface()
internal void ShutdownInterfaces()
public void Shutdown()
public void RunCallbacks()
public bool get_DedicatedServer()
public void set_DedicatedServer(bool value)
public int get_MaxPlayers()
public void set_MaxPlayers(int value)
public int get_BotCount()
public void set_BotCount(int value)
public string get_MapName()
public void set_MapName(string value)
public string get_ModDir()
internal void set_ModDir(string value)
public string get_Product()
internal void set_Product(string value)
public string get_GameDescription()
internal void set_GameDescription(string value)
public string get_ServerName()
public void set_ServerName(string value)
public bool get_Passworded()
public void set_Passworded(bool value)
public string get_GameTags()
public void set_GameTags(string value)
public SteamId get_SteamId()
public void LogOnAnonymous()
public void LogOff()
public bool get_LoggedOn()
public IPAddress get_PublicIp()
public void set_AutomaticHeartbeats(bool value)
public void set_AdvertiseServer(bool value)
public void ForceHeartbeat()
public void UpdatePlayer(SteamId steamid, string name, int score)
public void SetKey(string Key, string Value)
public void ClearKeys()
public bool BeginAuthSession(Byte[] data, SteamId steamid)
public void EndSession(SteamId steamid)
public bool GetOutgoingPacket(OutgoingPacket& packet)
public void HandleIncomingPacket(Byte[] data, int size, UInt32 address, ushort port)
public void HandleIncomingPacket(IntPtr ptr, int size, UInt32 address, ushort port)
public UserHasLicenseForAppResult UserHasLicenseForApp(SteamId steamid, AppId appid)
}
public Steamworks.SteamServerClass`1 : SteamClass {
internal SteamInterface Interface
internal bool InitializeInterface(bool server)
internal void SetInterface(bool server, SteamInterface iface)
internal void DestroyInterface(bool server)
}
public Steamworks.SteamServerInit : ValueType {
public IPAddress IpAddress
public ushort GamePort
public ushort QueryPort
public bool Secure
public string VersionString
public string ModDir
public string GameDescription
public bool DedicatedServer
public void .ctor(string modDir, string gameDesc)
public SteamServerInit WithQueryShareGamePort()
}
public Steamworks.SteamServerStats : SteamServerClass`1<SteamServerStats> {
internal ISteamGameServerStats Internal
internal ISteamGameServerStats get_Internal()
internal bool InitializeInterface(bool server)
public Task`1<Result> RequestUserStatsAsync(SteamId steamid)
public bool SetInt(SteamId steamid, string name, int stat)
public bool SetFloat(SteamId steamid, string name, float stat)
public int GetInt(SteamId steamid, string name, int defaultValue)
public float GetFloat(SteamId steamid, string name, float defaultValue)
public bool SetAchievement(SteamId steamid, string name)
public bool ClearAchievement(SteamId steamid, string name)
public bool GetAchievement(SteamId steamid, string name)
public Task`1<Result> StoreUserStats(SteamId steamid)
}
public Steamworks.SteamSharedClass`1 : SteamClass {
internal SteamInterface InterfaceClient
internal SteamInterface InterfaceServer
internal SteamInterface Interface
internal SteamInterface get_Interface()
internal bool InitializeInterface(bool server)
internal void SetInterface(bool server, SteamInterface iface)
internal void DestroyInterface(bool server)
}
public Steamworks.SteamUGC : SteamSharedClass`1<SteamUGC> {
private Action`1<Result> OnDownloadItemResult
private Action`2<AppId, PublishedFileId> OnItemSubscribed
private Action`2<AppId, PublishedFileId> OnItemUnsubscribed
private Action`2<AppId, PublishedFileId> OnItemInstalled
internal ISteamUGC Internal
internal ISteamUGC get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents(bool server)
public void add_OnDownloadItemResult(Action`1<Result> value)
public void remove_OnDownloadItemResult(Action`1<Result> value)
public void add_OnItemSubscribed(Action`2<AppId, PublishedFileId> value)
public void remove_OnItemSubscribed(Action`2<AppId, PublishedFileId> value)
public void add_OnItemUnsubscribed(Action`2<AppId, PublishedFileId> value)
public void remove_OnItemUnsubscribed(Action`2<AppId, PublishedFileId> value)
public void add_OnItemInstalled(Action`2<AppId, PublishedFileId> value)
public void remove_OnItemInstalled(Action`2<AppId, PublishedFileId> value)
public Task`1<bool> DeleteFileAsync(PublishedFileId fileId)
public bool Download(PublishedFileId fileId, bool highPriority)
public Task`1<bool> DownloadAsync(PublishedFileId fileId, Action`1<float> progress, int milisecondsUpdateDelay, CancellationToken ct)
public Task`1<Nullable`1<Item>> QueryFileAsync(PublishedFileId fileId)
public Task`1<bool> StartPlaytimeTracking(PublishedFileId fileId)
public Task`1<bool> StopPlaytimeTracking(PublishedFileId fileId)
public Task`1<bool> StopPlaytimeTrackingForAllItems()
public void SuspendDownloads()
public void ResumeDownloads()
public bool ShowWorkshopEula()
public Task`1<Nullable`1<bool>> GetWorkshopEulaStatus()
}
public Steamworks.SteamUser : SteamClientClass`1<SteamUser> {
private Dictionary`2<string, string> richPresence
private Action OnSteamServersConnected
private Action OnSteamServerConnectFailure
private Action OnSteamServersDisconnected
private Action OnClientGameServerDeny
private Action OnLicensesUpdated
private Action`3<SteamId, SteamId, AuthResponse> OnValidateAuthTicketResponse
private Action`1<GetAuthSessionTicketResponse_t> OnGetAuthSessionTicketResponse
private Action`1<GetTicketForWebApiResponse_t> OnGetTicketForWebApiResponse
private Action`3<AppId, ulong, bool> OnMicroTxnAuthorizationResponse
private Action`1<string> OnGameWebCallback
private Action`1<DurationControl> OnDurationControl
private bool _recordingVoice
private Byte[] readBuffer
private UInt32 sampleRate
internal ISteamUser Internal
public bool VoiceRecord
public bool HasVoiceData
public UInt32 SampleRate
public UInt32 OptimalSampleRate
public bool IsBehindNAT
public int SteamLevel
public bool IsPhoneVerified
public bool IsTwoFactorEnabled
public bool IsPhoneIdentifying
public bool IsPhoneRequiringVerification
internal ISteamUser get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents()
public void add_OnSteamServersConnected(Action value)
public void remove_OnSteamServersConnected(Action value)
public void add_OnSteamServerConnectFailure(Action value)
public void remove_OnSteamServerConnectFailure(Action value)
public void add_OnSteamServersDisconnected(Action value)
public void remove_OnSteamServersDisconnected(Action value)
public void add_OnClientGameServerDeny(Action value)
public void remove_OnClientGameServerDeny(Action value)
public void add_OnLicensesUpdated(Action value)
public void remove_OnLicensesUpdated(Action value)
public void add_OnValidateAuthTicketResponse(Action`3<SteamId, SteamId, AuthResponse> value)
public void remove_OnValidateAuthTicketResponse(Action`3<SteamId, SteamId, AuthResponse> value)
internal void add_OnGetAuthSessionTicketResponse(Action`1<GetAuthSessionTicketResponse_t> value)
internal void remove_OnGetAuthSessionTicketResponse(Action`1<GetAuthSessionTicketResponse_t> value)
internal void add_OnGetTicketForWebApiResponse(Action`1<GetTicketForWebApiResponse_t> value)
internal void remove_OnGetTicketForWebApiResponse(Action`1<GetTicketForWebApiResponse_t> value)
public void add_OnMicroTxnAuthorizationResponse(Action`3<AppId, ulong, bool> value)
public void remove_OnMicroTxnAuthorizationResponse(Action`3<AppId, ulong, bool> value)
public void add_OnGameWebCallback(Action`1<string> value)
public void remove_OnGameWebCallback(Action`1<string> value)
public void add_OnDurationControl(Action`1<DurationControl> value)
public void remove_OnDurationControl(Action`1<DurationControl> value)
public bool get_VoiceRecord()
public void set_VoiceRecord(bool value)
public bool get_HasVoiceData()
public int ReadVoiceData(Stream stream)
public Byte[] ReadVoiceDataBytes()
public UInt32 get_SampleRate()
public void set_SampleRate(UInt32 value)
public UInt32 get_OptimalSampleRate()
public int DecompressVoice(Stream input, int length, Stream output)
public int DecompressVoice(Byte[] from, Stream output)
public int DecompressVoice(IntPtr from, int length, IntPtr to, int bufferSize)
public AuthTicket GetAuthSessionTicket(NetIdentity identity)
public Task`1<AuthTicket> GetAuthSessionTicketAsync(NetIdentity identity, double timeoutSeconds)
private AuthTicket GetAuthTicketForWebApi(string identity)
public Task`1<AuthTicket> GetAuthTicketForWebApiAsync(string identity, double timeoutSeconds)
public BeginAuthResult BeginAuthSession(Byte[] ticketData, SteamId steamid)
public void EndAuthSession(SteamId steamid)
public bool get_IsBehindNAT()
public int get_SteamLevel()
public Task`1<string> GetStoreAuthUrlAsync(string url)
public bool get_IsPhoneVerified()
public bool get_IsTwoFactorEnabled()
public bool get_IsPhoneIdentifying()
public bool get_IsPhoneRequiringVerification()
public Task`1<Byte[]> RequestEncryptedAppTicketAsync(Byte[] dataToInclude)
public Task`1<Byte[]> RequestEncryptedAppTicketAsync()
public Task`1<DurationControl> GetDurationControl()
}
public Steamworks.SteamUserStats : SteamClientClass`1<SteamUserStats> {
private bool <StatsRecieved>k__BackingField
private Action`2<string, int> OnAchievementIconFetched
private Action`2<SteamId, Result> OnUserStatsReceived
private Action`1<Result> OnUserStatsStored
private Action`3<Achievement, int, int> OnAchievementProgress
private Action`1<SteamId> OnUserStatsUnloaded
internal ISteamUserStats Internal
public bool StatsRecieved
public IEnumerable`1<Achievement> Achievements
internal ISteamUserStats get_Internal()
internal bool InitializeInterface(bool server)
public bool get_StatsRecieved()
internal void set_StatsRecieved(bool value)
internal void InstallEvents()
internal void add_OnAchievementIconFetched(Action`2<string, int> value)
internal void remove_OnAchievementIconFetched(Action`2<string, int> value)
public void add_OnUserStatsReceived(Action`2<SteamId, Result> value)
public void remove_OnUserStatsReceived(Action`2<SteamId, Result> value)
public void add_OnUserStatsStored(Action`1<Result> value)
public void remove_OnUserStatsStored(Action`1<Result> value)
public void add_OnAchievementProgress(Action`3<Achievement, int, int> value)
public void remove_OnAchievementProgress(Action`3<Achievement, int, int> value)
public void add_OnUserStatsUnloaded(Action`1<SteamId> value)
public void remove_OnUserStatsUnloaded(Action`1<SteamId> value)
public IEnumerable`1<Achievement> get_Achievements()
public bool IndicateAchievementProgress(string achName, int curProg, int maxProg)
public Task`1<int> PlayerCountAsync()
public bool StoreStats()
public bool RequestCurrentStats()
public Task`1<Result> RequestGlobalStatsAsync(int days)
public Task`1<Nullable`1<Leaderboard>> FindOrCreateLeaderboardAsync(string name, LeaderboardSort sort, LeaderboardDisplay display)
public Task`1<Nullable`1<Leaderboard>> FindLeaderboardAsync(string name)
public bool AddStat(string name, int amount)
public bool AddStat(string name, float amount)
public bool SetStat(string name, int value)
public bool SetStat(string name, float value)
public int GetStatInt(string name)
public float GetStatFloat(string name)
public bool ResetAll(bool includeAchievements)
}
public Steamworks.SteamUtils : SteamSharedClass`1<SteamUtils> {
private Action OnIpCountryChanged
private Action`1<int> OnLowBatteryPower
private Action OnSteamShutdown
private Action`1<bool> OnGamepadTextInputDismissed
private NotificationPosition overlayNotificationPosition
internal ISteamUtils Internal
public UInt32 SecondsSinceAppActive
public UInt32 SecondsSinceComputerActive
public Universe ConnectedUniverse
public DateTime SteamServerTime
public string IpCountry
public bool UsingBatteryPower
public float CurrentBatteryPower
public NotificationPosition OverlayNotificationPosition
public bool IsOverlayEnabled
public bool DoesOverlayNeedPresent
public string SteamUILanguage
public bool IsSteamRunningInVR
public bool IsSteamInBigPictureMode
public bool VrHeadsetStreaming
public bool IsSteamChinaLauncher
public bool IsRunningOnSteamDeck
internal ISteamUtils get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents(bool server)
private void SteamClosed()
public void add_OnIpCountryChanged(Action value)
public void remove_OnIpCountryChanged(Action value)
public void add_OnLowBatteryPower(Action`1<int> value)
public void remove_OnLowBatteryPower(Action`1<int> value)
public void add_OnSteamShutdown(Action value)
public void remove_OnSteamShutdown(Action value)
public void add_OnGamepadTextInputDismissed(Action`1<bool> value)
public void remove_OnGamepadTextInputDismissed(Action`1<bool> value)
public UInt32 get_SecondsSinceAppActive()
public UInt32 get_SecondsSinceComputerActive()
public Universe get_ConnectedUniverse()
public DateTime get_SteamServerTime()
public string get_IpCountry()
public bool GetImageSize(int image, UInt32& width, UInt32& height)
public Nullable`1<Image> GetImage(int image)
public bool get_UsingBatteryPower()
public float get_CurrentBatteryPower()
public NotificationPosition get_OverlayNotificationPosition()
public void set_OverlayNotificationPosition(NotificationPosition value)
public bool get_IsOverlayEnabled()
public bool get_DoesOverlayNeedPresent()
public Task`1<CheckFileSignature> CheckFileSignatureAsync(string filename)
public bool ShowGamepadTextInput(GamepadTextInputMode inputMode, GamepadTextInputLineMode lineInputMode, string description, int maxChars, string existingText)
public string GetEnteredGamepadText()
public string get_SteamUILanguage()
public bool get_IsSteamRunningInVR()
public void SetOverlayNotificationInset(int x, int y)
public bool get_IsSteamInBigPictureMode()
public void StartVRDashboard()
public bool get_VrHeadsetStreaming()
public void set_VrHeadsetStreaming(bool value)
internal bool IsCallComplete(SteamAPICall_t call, Boolean& failed)
public bool get_IsSteamChinaLauncher()
public bool InitFilterText()
public string FilterText(TextFilteringContext context, SteamId sourceSteamID, string inputMessage)
public bool get_IsRunningOnSteamDeck()
public void SetGameLauncherMode(bool mode)
}
public Steamworks.SteamVideo : SteamClientClass`1<SteamVideo> {
internal ISteamVideo Internal
public bool IsBroadcasting
public int NumViewers
internal ISteamVideo get_Internal()
internal bool InitializeInterface(bool server)
internal void InstallEvents()
public bool get_IsBroadcasting()
public int get_NumViewers()
}
public Steamworks.TextFilteringContext : Enum {
public int value__
public TextFilteringContext Unknown
public TextFilteringContext GameContent
public TextFilteringContext Chat
public TextFilteringContext Name
}
public Steamworks.TextInputMode : Enum {
public int value__
public TextInputMode SingleLine
public TextInputMode MultipleLines
public TextInputMode Email
public TextInputMode Numeric
}
public Steamworks.Ugc.Editor : ValueType {
private PublishedFileId fileId
private bool creatingNew
private WorkshopFileType creatingType
private AppId consumerAppId
private string Title
private string Description
private string MetaData
private string ChangeLog
private string Language
private string PreviewFile
private DirectoryInfo ContentFolder
private Nullable`1<RemoteStoragePublishedFileVisibility> Visibility
private List`1<string> Tags
private Dictionary`2<string, List`1<string>> KeyValueTags
private HashSet`1<string> KeyValueTagsToRemove
public Editor NewCommunityFile
public Editor NewCollection
public Editor NewMicrotransactionFile
public Editor NewGameManagedFile
internal void .ctor(WorkshopFileType filetype)
public void .ctor(PublishedFileId fileId)
public Editor get_NewCommunityFile()
public Editor get_NewCollection()
public Editor get_NewMicrotransactionFile()
public Editor get_NewGameManagedFile()
public Editor ForAppId(AppId id)
public Editor WithTitle(string t)
public Editor WithDescription(string t)
public Editor WithMetaData(string t)
public Editor WithChangeLog(string t)
public Editor InLanguage(string t)
public Editor WithPreviewFile(string t)
public Editor WithContent(DirectoryInfo t)
public Editor WithContent(string folderName)
public Editor WithPublicVisibility()
public Editor WithFriendsOnlyVisibility()
public Editor WithPrivateVisibility()
public Editor WithTag(string tag)
public Editor AddKeyValueTag(string key, string value)
public Editor RemoveKeyValueTags(string key)
public Task`1<PublishResult> SubmitAsync(IProgress`1<float> progress, Action`1<PublishResult> onItemCreated)
}
public Steamworks.Ugc.Item : ValueType {
internal SteamUGCDetails_t details
internal PublishedFileId _id
private string <Title>k__BackingField
private string <Description>k__BackingField
private String[] <Tags>k__BackingField
private Dictionary`2<string, string> <KeyValueTags>k__BackingField
public PublishedFileId[] Children
private UgcAdditionalPreview[] <AdditionalPreviews>k__BackingField
private ulong <NumSubscriptions>k__BackingField
private ulong <NumFavorites>k__BackingField
private ulong <NumFollowers>k__BackingField
private ulong <NumUniqueSubscriptions>k__BackingField
private ulong <NumUniqueFavorites>k__BackingField
private ulong <NumUniqueFollowers>k__BackingField
private ulong <NumUniqueWebsiteViews>k__BackingField
private ulong <ReportScore>k__BackingField
private ulong <NumSecondsPlayed>k__BackingField
private ulong <NumPlaytimeSessions>k__BackingField
private ulong <NumComments>k__BackingField
private ulong <NumSecondsPlayedDuringTimePeriod>k__BackingField
private ulong <NumPlaytimeSessionsDuringTimePeriod>k__BackingField
private string <PreviewImageUrl>k__BackingField
private string <Metadata>k__BackingField
public PublishedFileId Id
public string Title
public string Description
public String[] Tags
public Dictionary`2<string, string> KeyValueTags
public AppId CreatorApp
public AppId ConsumerApp
public Friend Owner
public float Score
public DateTime Created
public DateTime Updated
public bool IsPublic
public bool IsFriendsOnly
public bool IsPrivate
public bool IsBanned
public bool IsAcceptedForUse
public UInt32 VotesUp
public UInt32 VotesDown
public UgcAdditionalPreview[] AdditionalPreviews
public bool IsInstalled
public bool IsDownloading
public bool IsDownloadPending
public bool IsSubscribed
public bool NeedsUpdate
public string Directory
public long DownloadBytesTotal
public long DownloadBytesDownloaded
public long SizeBytes
public float DownloadAmount
private ItemState State
public string Url
public string ChangelogUrl
public string CommentsUrl
public string DiscussUrl
public string StatsUrl
public ulong NumSubscriptions
public ulong NumFavorites
public ulong NumFollowers
public ulong NumUniqueSubscriptions
public ulong NumUniqueFavorites
public ulong NumUniqueFollowers
public ulong NumUniqueWebsiteViews
public ulong ReportScore
public ulong NumSecondsPlayed
public ulong NumPlaytimeSessions
public ulong NumComments
public ulong NumSecondsPlayedDuringTimePeriod
public ulong NumPlaytimeSessionsDuringTimePeriod
public string PreviewImageUrl
public string Metadata
public Result Result
public void .ctor(PublishedFileId id)
public PublishedFileId get_Id()
public string get_Title()
internal void set_Title(string value)
public string get_Description()
internal void set_Description(string value)
public String[] get_Tags()
internal void set_Tags(String[] value)
public Dictionary`2<string, string> get_KeyValueTags()
internal void set_KeyValueTags(Dictionary`2<string, string> value)
public AppId get_CreatorApp()
public AppId get_ConsumerApp()
public Friend get_Owner()
public float get_Score()
public DateTime get_Created()
public DateTime get_Updated()
public bool get_IsPublic()
public bool get_IsFriendsOnly()
public bool get_IsPrivate()
public bool get_IsBanned()
public bool get_IsAcceptedForUse()
public UInt32 get_VotesUp()
public UInt32 get_VotesDown()
public UgcAdditionalPreview[] get_AdditionalPreviews()
internal void set_AdditionalPreviews(UgcAdditionalPreview[] value)
public bool get_IsInstalled()
public bool get_IsDownloading()
public bool get_IsDownloadPending()
public bool get_IsSubscribed()
public bool get_NeedsUpdate()
public string get_Directory()
public bool Download(bool highPriority)
public long get_DownloadBytesTotal()
public long get_DownloadBytesDownloaded()
public long get_SizeBytes()
public float get_DownloadAmount()
private ItemState get_State()
public Task`1<Nullable`1<Item>> GetAsync(PublishedFileId id, int maxageseconds)
internal Item From(SteamUGCDetails_t details)
public bool HasTag(string find)
public Task`1<bool> Subscribe()
public Task`1<bool> DownloadAsync(Action`1<float> progress, int milisecondsUpdateDelay, CancellationToken ct)
public Task`1<bool> Unsubscribe()
public Task`1<bool> AddFavorite()
public Task`1<bool> RemoveFavorite()
public Task`1<Nullable`1<Result>> Vote(bool up)
public Task`1<Nullable`1<UserItemVote>> GetUserVote()
public string get_Url()
public string get_ChangelogUrl()
public string get_CommentsUrl()
public string get_DiscussUrl()
public string get_StatsUrl()
public ulong get_NumSubscriptions()
internal void set_NumSubscriptions(ulong value)
public ulong get_NumFavorites()
internal void set_NumFavorites(ulong value)
public ulong get_NumFollowers()
internal void set_NumFollowers(ulong value)
public ulong get_NumUniqueSubscriptions()
internal void set_NumUniqueSubscriptions(ulong value)
public ulong get_NumUniqueFavorites()
internal void set_NumUniqueFavorites(ulong value)
public ulong get_NumUniqueFollowers()
internal void set_NumUniqueFollowers(ulong value)
public ulong get_NumUniqueWebsiteViews()
internal void set_NumUniqueWebsiteViews(ulong value)
public ulong get_ReportScore()
internal void set_ReportScore(ulong value)
public ulong get_NumSecondsPlayed()
internal void set_NumSecondsPlayed(ulong value)
public ulong get_NumPlaytimeSessions()
internal void set_NumPlaytimeSessions(ulong value)
public ulong get_NumComments()
internal void set_NumComments(ulong value)
public ulong get_NumSecondsPlayedDuringTimePeriod()
internal void set_NumSecondsPlayedDuringTimePeriod(ulong value)
public ulong get_NumPlaytimeSessionsDuringTimePeriod()
internal void set_NumPlaytimeSessionsDuringTimePeriod(ulong value)
public string get_PreviewImageUrl()
internal void set_PreviewImageUrl(string value)
public string get_Metadata()
internal void set_Metadata(string value)
public Editor Edit()
public Task`1<bool> AddDependency(PublishedFileId child)
public Task`1<bool> RemoveDependency(PublishedFileId child)
public Result get_Result()
}
public Steamworks.Ugc.PublishResult : ValueType {
public Result Result
public PublishedFileId FileId
public bool NeedsWorkshopAgreement
public bool Success
public bool get_Success()
}
public Steamworks.Ugc.Query : ValueType {
private UgcType matchingType
private UGCQuery queryType
private AppId consumerApp
private AppId creatorApp
private string searchText
private Nullable`1<SteamId> steamid
private UserUGCList userType
private UserUGCListSortOrder userSort
private PublishedFileId[] Files
private Nullable`1<int> maxCacheAge
private string language
private Nullable`1<int> trendDays
private List`1<string> requiredTags
private Nullable`1<bool> matchAnyTag
private List`1<string> excludedTags
private Dictionary`2<string, string> requiredKv
private Nullable`1<bool> WantsReturnOnlyIDs
private Nullable`1<bool> WantsReturnKeyValueTags
private Nullable`1<bool> WantsReturnLongDescription
private Nullable`1<bool> WantsReturnMetadata
private Nullable`1<bool> WantsReturnChildren
private Nullable`1<bool> WantsReturnAdditionalPreviews
private Nullable`1<bool> WantsReturnTotalOnly
private Nullable`1<UInt32> WantsReturnPlaytimeStats
private Nullable`1<bool> WantsDefaultStats
public Query All
public Query Items
public Query ItemsMtx
public Query ItemsReadyToUse
public Query Collections
public Query Artwork
public Query Videos
public Query Screenshots
public Query AllGuides
public Query WebGuides
public Query IntegratedGuides
public Query UsableInGame
public Query ControllerBindings
public Query GameManagedItems
public void .ctor(UgcType type)
public Query get_All()
public Query get_Items()
public Query get_ItemsMtx()
public Query get_ItemsReadyToUse()
public Query get_Collections()
public Query get_Artwork()
public Query get_Videos()
public Query get_Screenshots()
public Query get_AllGuides()
public Query get_WebGuides()
public Query get_IntegratedGuides()
public Query get_UsableInGame()
public Query get_ControllerBindings()
public Query get_GameManagedItems()
public Query RankedByVote()
public Query RankedByPublicationDate()
public Query RankedByAcceptanceDate()
public Query RankedByTrend()
public Query FavoritedByFriends()
public Query CreatedByFriends()
public Query RankedByNumTimesReported()
public Query CreatedByFollowedUsers()
public Query NotYetRated()
public Query RankedByTotalVotesAsc()
public Query RankedByVotesUp()
public Query RankedByTextSearch()
public Query RankedByTotalUniqueSubscriptions()
public Query RankedByPlaytimeTrend()
public Query RankedByTotalPlaytime()
public Query RankedByAveragePlaytimeTrend()
public Query RankedByLifetimeAveragePlaytime()
public Query RankedByPlaytimeSessionsTrend()
public Query RankedByLifetimePlaytimeSessions()
internal Query LimitUser(SteamId steamid)
public Query WhereUserPublished(SteamId user)
public Query WhereUserVotedOn(SteamId user)
public Query WhereUserVotedUp(SteamId user)
public Query WhereUserVotedDown(SteamId user)
public Query WhereUserWillVoteLater(SteamId user)
public Query WhereUserFavorited(SteamId user)
public Query WhereUserSubscribed(SteamId user)
public Query WhereUserUsedOrPlayed(SteamId user)
public Query WhereUserFollowed(SteamId user)
public Query SortByCreationDate()
public Query SortByCreationDateAsc()
public Query SortByTitleAsc()
public Query SortByUpdateDate()
public Query SortBySubscriptionDate()
public Query SortByVoteScore()
public Query SortByModeration()
public Query WhereSearchText(string searchText)
public Query WithFileId(PublishedFileId[] files)
public Task`1<Nullable`1<ResultPage>> GetPageAsync(int page)
public Query WithType(UgcType type)
public Query AllowCachedResponse(int maxSecondsAge)
public Query InLanguage(string lang)
public Query WithTrendDays(int days)
public Query MatchAnyTag()
public Query MatchAllTags()
public Query WithTag(string tag)
public Query AddRequiredKeyValueTag(string key, string value)
public Query WithoutTag(string tag)
private void ApplyConstraints(UGCQueryHandle_t handle)
public Query WithOnlyIDs(bool b)
public Query WithKeyValueTags(bool b)
public Query WithKeyValueTag(bool b)
public Query WithLongDescription(bool b)
public Query WithMetadata(bool b)
public Query WithChildren(bool b)
public Query WithAdditionalPreviews(bool b)
public Query WithTotalOnly(bool b)
public Query WithPlaytimeStats(UInt32 unDays)
private void ApplyReturns(UGCQueryHandle_t handle)
public Query WithDefaultStats(bool b)
}
public Steamworks.Ugc.ResultPage : ValueType {
internal UGCQueryHandle_t Handle
public int ResultCount
public int TotalCount
public bool CachedData
internal bool ReturnsKeyValueTags
internal bool ReturnsDefaultStats
internal bool ReturnsMetadata
internal bool ReturnsChildren
internal bool ReturnsAdditionalPreviews
public IEnumerable`1<Item> Entries
public IEnumerable`1<Item> get_Entries()
private ulong GetStat(UInt32 index, ItemStatistic stat)
public void Dispose()
}
internal Steamworks.Ugc.SteamParamStringArray : ValueType {
public SteamParamStringArray_t Value
private IntPtr[] NativeStrings
private IntPtr NativeArray
public SteamParamStringArray From(String[] array)
public void Dispose()
}
public Steamworks.Ugc.UserItemVote : ValueType {
public bool VotedUp
public bool VotedDown
public bool VoteSkipped
internal Nullable`1<UserItemVote> From(GetUserItemVoteResult_t result)
}
internal Steamworks.UGCContentDescriptorID : Enum {
public int value__
public UGCContentDescriptorID NudityOrSexualContent
public UGCContentDescriptorID FrequentViolenceOrGore
public UGCContentDescriptorID AdultOnlySexualContent
public UGCContentDescriptorID GratuitousSexualContent
public UGCContentDescriptorID AnyMatureContent
}
internal Steamworks.UGCQuery : Enum {
public int value__
public UGCQuery RankedByVote
public UGCQuery RankedByPublicationDate
public UGCQuery AcceptedForGameRankedByAcceptanceDate
public UGCQuery RankedByTrend
public UGCQuery FavoritedByFriendsRankedByPublicationDate
public UGCQuery CreatedByFriendsRankedByPublicationDate
public UGCQuery RankedByNumTimesReported
public UGCQuery CreatedByFollowedUsersRankedByPublicationDate
public UGCQuery NotYetRated
public UGCQuery RankedByTotalVotesAsc
public UGCQuery RankedByVotesUp
public UGCQuery RankedByTextSearch
public UGCQuery RankedByTotalUniqueSubscriptions
public UGCQuery RankedByPlaytimeTrend
public UGCQuery RankedByTotalPlaytime
public UGCQuery RankedByAveragePlaytimeTrend
public UGCQuery RankedByLifetimeAveragePlaytime
public UGCQuery RankedByPlaytimeSessionsTrend
public UGCQuery RankedByLifetimePlaytimeSessions
public UGCQuery RankedByLastUpdatedDate
}
internal Steamworks.UGCReadAction : Enum {
public int value__
public UGCReadAction ontinueReadingUntilFinished
public UGCReadAction ontinueReading
public UGCReadAction lose
}
public Steamworks.UgcType : Enum {
public int value__
public UgcType Items
public UgcType Items_Mtx
public UgcType Items_ReadyToUse
public UgcType Collections
public UgcType Artwork
public UgcType Videos
public UgcType Screenshots
public UgcType AllGuides
public UgcType WebGuides
public UgcType IntegratedGuides
public UgcType UsableInGame
public UgcType ControllerBindings
public UgcType GameManagedItems
public UgcType All
}
public Steamworks.Universe : Enum {
public int value__
public Universe Invalid
public Universe Public
public Universe Beta
public Universe Internal
public Universe Dev
public Universe Max
}
public Steamworks.UserHasLicenseForAppResult : Enum {
public int value__
public UserHasLicenseForAppResult HasLicense
public UserHasLicenseForAppResult DoesNotHaveLicense
public UserHasLicenseForAppResult NoAuth
}
internal Steamworks.UserRestriction : Enum {
public int value__
public UserRestriction None
public UserRestriction Unknown
public UserRestriction AnyChat
public UserRestriction VoiceChat
public UserRestriction GroupChat
public UserRestriction Rating
public UserRestriction GameInvites
public UserRestriction Trading
}
internal Steamworks.UserUGCList : Enum {
public int value__
public UserUGCList Published
public UserUGCList VotedOn
public UserUGCList VotedUp
public UserUGCList VotedDown
public UserUGCList WillVoteLater
public UserUGCList Favorited
public UserUGCList Subscribed
public UserUGCList UsedOrPlayed
public UserUGCList Followed
}
internal Steamworks.UserUGCListSortOrder : Enum {
public int value__
public UserUGCListSortOrder CreationOrderDesc
public UserUGCListSortOrder CreationOrderAsc
public UserUGCListSortOrder TitleAsc
public UserUGCListSortOrder LastUpdatedDesc
public UserUGCListSortOrder SubscriptionDateDesc
public UserUGCListSortOrder VoteScoreDesc
public UserUGCListSortOrder ForModeration
}
internal Steamworks.Utf8StringPointer : ValueType {
internal IntPtr ptr
public string op_Implicit(Utf8StringPointer p)
}
internal Steamworks.Utf8StringToNative : object {
public IntPtr MarshalManagedToNative(object managedObj)
public object MarshalNativeToManaged(IntPtr pNativeData)
public void CleanUpNativeData(IntPtr pNativeData)
public void CleanUpManagedData(object managedObj)
public int GetNativeDataSize()
public ICustomMarshaler GetInstance(string cookie)
}
public Steamworks.Utility : object {
private Byte[] readBuffer
internal T ToType(IntPtr ptr)
internal object ToType(IntPtr ptr, Type t)
internal UInt32 Swap(UInt32 x)
public UInt32 IpToInt32(IPAddress ipAddress)
public IPAddress Int32ToIp(UInt32 ipAddress)
public string FormatPrice(string currency, double price)
public string ReadNullTerminatedUTF8String(BinaryReader br)
}
internal Steamworks.VoiceResult : Enum {
public int value__
public VoiceResult OK
public VoiceResult NotInitialized
public VoiceResult NotRecording
public VoiceResult NoData
public VoiceResult BufferTooSmall
public VoiceResult DataCorrupted
public VoiceResult Restricted
public VoiceResult UnsupportedCodec
public VoiceResult ReceiverOutOfDate
public VoiceResult ReceiverDidNotAnswer
}
internal Steamworks.VRScreenshotType : Enum {
public int value__
public VRScreenshotType None
public VRScreenshotType Mono
public VRScreenshotType Stereo
public VRScreenshotType MonoCubemap
public VRScreenshotType MonoPanorama
public VRScreenshotType StereoPanorama
}
internal Steamworks.WorkshopEnumerationType : Enum {
public int value__
public WorkshopEnumerationType RankedByVote
public WorkshopEnumerationType Recent
public WorkshopEnumerationType Trending
public WorkshopEnumerationType FavoritesOfFriends
public WorkshopEnumerationType VotedByFriends
public WorkshopEnumerationType ContentByFriends
public WorkshopEnumerationType RecentFromFollowedUsers
}
internal Steamworks.WorkshopFileAction : Enum {
public int value__
public WorkshopFileAction Played
public WorkshopFileAction Completed
}
internal Steamworks.WorkshopFileType : Enum {
public int value__
public WorkshopFileType First
public WorkshopFileType Community
public WorkshopFileType Microtransaction
public WorkshopFileType Collection
public WorkshopFileType Art
public WorkshopFileType Video
public WorkshopFileType Screenshot
public WorkshopFileType Game
public WorkshopFileType Software
public WorkshopFileType Concept
public WorkshopFileType WebGuide
public WorkshopFileType IntegratedGuide
public WorkshopFileType Merch
public WorkshopFileType ControllerBinding
public WorkshopFileType SteamworksAccessInvite
public WorkshopFileType SteamVideo
public WorkshopFileType GameManagedItem
public WorkshopFileType Max
}
internal Steamworks.WorkshopVideoProvider : Enum {
public int value__
public WorkshopVideoProvider None
public WorkshopVideoProvider Youtube
}
internal Steamworks.WorkshopVote : Enum {
public int value__
public WorkshopVote Unvoted
public WorkshopVote For
public WorkshopVote Against
public WorkshopVote Later
}
internal Steamworks.XboxOrigin : Enum {
public int value__
public XboxOrigin A
public XboxOrigin B
public XboxOrigin X
public XboxOrigin Y
public XboxOrigin LeftBumper
public XboxOrigin RightBumper
public XboxOrigin Menu
public XboxOrigin View
public XboxOrigin LeftTrigger_Pull
public XboxOrigin LeftTrigger_Click
public XboxOrigin RightTrigger_Pull
public XboxOrigin RightTrigger_Click
public XboxOrigin LeftStick_Move
public XboxOrigin LeftStick_Click
public XboxOrigin LeftStick_DPadNorth
public XboxOrigin LeftStick_DPadSouth
public XboxOrigin LeftStick_DPadWest
public XboxOrigin LeftStick_DPadEast
public XboxOrigin RightStick_Move
public XboxOrigin RightStick_Click
public XboxOrigin RightStick_DPadNorth
public XboxOrigin RightStick_DPadSouth
public XboxOrigin RightStick_DPadWest
public XboxOrigin RightStick_DPadEast
public XboxOrigin DPad_North
public XboxOrigin DPad_South
public XboxOrigin DPad_West
public XboxOrigin DPad_East
public XboxOrigin Count
}
