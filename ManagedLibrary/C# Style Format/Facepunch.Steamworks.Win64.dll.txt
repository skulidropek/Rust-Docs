[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal enum Steamworks.AccountType : Enum {
    
public int value__;
    
public static AccountType Invalid;
    
public static AccountType Individual;
    
public static AccountType Multiseat;
    
public static AccountType GameServer;
    
public static AccountType AnonGameServer;
    
public static AccountType Pending;
    
public static AccountType ContentServer;
    
public static AccountType Clan;
    
public static AccountType Chat;
    
public static AccountType ConsoleUser;
    
public static AccountType AnonUser;
    
public static AccountType Max;
}
internal enum Steamworks.ActivateGameOverlayToWebPageMode : Enum {
    
public int value__;
    
public static ActivateGameOverlayToWebPageMode Default;
    
public static ActivateGameOverlayToWebPageMode Modal;
}
public class Steamworks.AnalogState : ValueType {
    
public InputSourceMode EMode;
    
public float X;
    
public float Y;
    
internal byte BActive;
    
public bool Active { get; }
    public bool get_Active();
}
public class Steamworks.AppId : ValueType {
    
public UInt32 Value;
    public virtual string ToString();
    public static AppId op_Implicit(UInt32 value);
    public static AppId op_Implicit(int value);
    public static UInt32 op_Implicit(AppId value);
}
public enum Steamworks.AuthResponse : Enum {
    
public int value__;
    
public static AuthResponse OK;
    
public static AuthResponse UserNotConnectedToSteam;
    
public static AuthResponse NoLicenseOrExpired;
    
public static AuthResponse VACBanned;
    
public static AuthResponse LoggedInElseWhere;
    
public static AuthResponse VACCheckTimedOut;
    
public static AuthResponse AuthTicketCanceled;
    
public static AuthResponse AuthTicketInvalidAlreadyUsed;
    
public static AuthResponse AuthTicketInvalid;
    
public static AuthResponse PublisherIssuedBan;
    
public static AuthResponse AuthTicketNetworkIdentityFailure;
}
public class Steamworks.AuthTicket : object {
    
public Byte[] Data;
    
public UInt32 Handle;
    public void Cancel();
    public sealed virtual void Dispose();
}
public enum Steamworks.BeginAuthResult : Enum {
    
public int value__;
    
public static BeginAuthResult OK;
    
public static BeginAuthResult InvalidTicket;
    
public static BeginAuthResult DuplicateRequest;
    
public static BeginAuthResult InvalidVersion;
    
public static BeginAuthResult GameMismatch;
    
public static BeginAuthResult ExpiredTicket;
}
public enum Steamworks.BroadcastUploadResult : Enum {
    
public int value__;
    
public static BroadcastUploadResult None;
    
public static BroadcastUploadResult OK;
    
public static BroadcastUploadResult InitFailed;
    
public static BroadcastUploadResult FrameFailed;
    
public static BroadcastUploadResult Timeout;
    
public static BroadcastUploadResult BandwidthExceeded;
    
public static BroadcastUploadResult LowFPS;
    
public static BroadcastUploadResult MissingKeyFrames;
    
public static BroadcastUploadResult NoConnection;
    
public static BroadcastUploadResult RelayFailed;
    
public static BroadcastUploadResult SettingsChanged;
    
public static BroadcastUploadResult MissingAudio;
    
public static BroadcastUploadResult TooFarBehind;
    
public static BroadcastUploadResult TranscodeBehind;
    
public static BroadcastUploadResult NotAllowedToPlay;
    
public static BroadcastUploadResult Busy;
    
public static BroadcastUploadResult Banned;
    
public static BroadcastUploadResult AlreadyActive;
    
public static BroadcastUploadResult ForcedOff;
    
public static BroadcastUploadResult AudioBehind;
    
public static BroadcastUploadResult Shutdown;
    
public static BroadcastUploadResult Disconnect;
    
public static BroadcastUploadResult VideoInitFailed;
    
public static BroadcastUploadResult AudioInitFailed;
}
internal static class Steamworks.BufferManager : object {
    
private static Stack`1<ReferenceCounter> ReferenceCounterPool;
    
private static Dictionary`2<int, Stack`1<IntPtr>> BufferPools;
    
private static Dictionary`2<IntPtr, ReferenceCounter> ReferenceCounters;
    
private static FreeFn FreeFunctionPin;
    
public static IntPtr FreeFunctionPointer;
    
private static int Bucket512;
    
private static int Bucket1Kb;
    
private static int Bucket4Kb;
    
private static int Bucket16Kb;
    
private static int Bucket64Kb;
    
private static int Bucket256Kb;
    private static BufferManager();
    public static IntPtr Get(int size, int referenceCount);
    [MonoPInvokeCallbackAttribute]
private static void Free(NetMsg* msg);
    private static ReferenceCounter AllocateReferenceCounter(IntPtr ptr, int size, int referenceCount);
    private static void FreeReferenceCounter(ReferenceCounter counter);
    private static void AllocateBuffer(int minimumSize, IntPtr& ptr, Int32& size);
    private static void FreeBuffer(IntPtr ptr, int size);
    private static int GetBucketSize(int size);
    private static int GetBucketLimit(int size);
}
public enum Steamworks.CallbackType : Enum {
    
public int value__;
    
public static CallbackType SteamServersConnected;
    
public static CallbackType SteamServerConnectFailure;
    
public static CallbackType SteamServersDisconnected;
    
public static CallbackType ClientGameServerDeny;
    
public static CallbackType GSPolicyResponse;
    
public static CallbackType IPCFailure;
    
public static CallbackType LicensesUpdated;
    
public static CallbackType ValidateAuthTicketResponse;
    
public static CallbackType MicroTxnAuthorizationResponse;
    
public static CallbackType EncryptedAppTicketResponse;
    
public static CallbackType GetAuthSessionTicketResponse;
    
public static CallbackType GameWebCallback;
    
public static CallbackType StoreAuthURLResponse;
    
public static CallbackType MarketEligibilityResponse;
    
public static CallbackType DurationControl;
    
public static CallbackType GetTicketForWebApiResponse;
    
public static CallbackType GSClientApprove;
    
public static CallbackType GSClientDeny;
    
public static CallbackType GSClientKick;
    
public static CallbackType GSClientAchievementStatus;
    
public static CallbackType GSGameplayStats;
    
public static CallbackType GSClientGroupStatus;
    
public static CallbackType GSReputation;
    
public static CallbackType AssociateWithClanResult;
    
public static CallbackType ComputeNewPlayerCompatibilityResult;
    
public static CallbackType PersonaStateChange;
    
public static CallbackType GameOverlayActivated;
    
public static CallbackType GameServerChangeRequested;
    
public static CallbackType GameLobbyJoinRequested;
    
public static CallbackType AvatarImageLoaded;
    
public static CallbackType ClanOfficerListResponse;
    
public static CallbackType FriendRichPresenceUpdate;
    
public static CallbackType GameRichPresenceJoinRequested;
    
public static CallbackType GameConnectedClanChatMsg;
    
public static CallbackType GameConnectedChatJoin;
    
public static CallbackType GameConnectedChatLeave;
    
public static CallbackType DownloadClanActivityCountsResult;
    
public static CallbackType JoinClanChatRoomCompletionResult;
    
public static CallbackType GameConnectedFriendChatMsg;
    
public static CallbackType FriendsGetFollowerCount;
    
public static CallbackType FriendsIsFollowing;
    
public static CallbackType FriendsEnumerateFollowingList;
    
public static CallbackType SetPersonaNameResponse;
    
public static CallbackType UnreadChatMessagesChanged;
    
public static CallbackType OverlayBrowserProtocolNavigation;
    
public static CallbackType EquippedProfileItemsChanged;
    
public static CallbackType EquippedProfileItems;
    
public static CallbackType FavoritesListChanged;
    
public static CallbackType LobbyInvite;
    
public static CallbackType LobbyEnter;
    
public static CallbackType LobbyDataUpdate;
    
public static CallbackType LobbyChatUpdate;
    
public static CallbackType LobbyChatMsg;
    
public static CallbackType LobbyGameCreated;
    
public static CallbackType LobbyMatchList;
    
public static CallbackType LobbyKicked;
    
public static CallbackType LobbyCreated;
    
public static CallbackType PSNGameBootInviteResult;
    
public static CallbackType FavoritesListAccountsUpdated;
    
public static CallbackType IPCountry;
    
public static CallbackType LowBatteryPower;
    
public static CallbackType SteamAPICallCompleted;
    
public static CallbackType SteamShutdown;
    
public static CallbackType CheckFileSignature;
    
public static CallbackType GamepadTextInputDismissed;
    
public static CallbackType AppResumingFromSuspend;
    
public static CallbackType FloatingGamepadTextInputDismissed;
    
public static CallbackType FilterTextDictionaryChanged;
    
public static CallbackType DlcInstalled;
    
public static CallbackType NewUrlLaunchParameters;
    
public static CallbackType AppProofOfPurchaseKeyResponse;
    
public static CallbackType FileDetailsResult;
    
public static CallbackType TimedTrialStatus;
    
public static CallbackType UserStatsReceived;
    
public static CallbackType UserStatsStored;
    
public static CallbackType UserAchievementStored;
    
public static CallbackType LeaderboardFindResult;
    
public static CallbackType LeaderboardScoresDownloaded;
    
public static CallbackType LeaderboardScoreUploaded;
    
public static CallbackType NumberOfCurrentPlayers;
    
public static CallbackType UserStatsUnloaded;
    
public static CallbackType GSStatsUnloaded;
    
public static CallbackType UserAchievementIconFetched;
    
public static CallbackType GlobalAchievementPercentagesReady;
    
public static CallbackType LeaderboardUGCSet;
    
public static CallbackType GlobalStatsReceived;
    
public static CallbackType P2PSessionRequest;
    
public static CallbackType P2PSessionConnectFail;
    
public static CallbackType SteamNetConnectionStatusChangedCallback;
    
public static CallbackType SteamNetAuthenticationStatus;
    
public static CallbackType SteamNetworkingFakeIPResult;
    
public static CallbackType SteamNetworkingMessagesSessionRequest;
    
public static CallbackType SteamNetworkingMessagesSessionFailed;
    
public static CallbackType SteamRelayNetworkStatus;
    
public static CallbackType RemoteStorageFileShareResult;
    
public static CallbackType RemoteStoragePublishFileResult;
    
public static CallbackType RemoteStorageDeletePublishedFileResult;
    
public static CallbackType RemoteStorageEnumerateUserPublishedFilesResult;
    
public static CallbackType RemoteStorageSubscribePublishedFileResult;
    
public static CallbackType RemoteStorageEnumerateUserSubscribedFilesResult;
    
public static CallbackType RemoteStorageUnsubscribePublishedFileResult;
    
public static CallbackType RemoteStorageUpdatePublishedFileResult;
    
public static CallbackType RemoteStorageDownloadUGCResult;
    
public static CallbackType RemoteStorageGetPublishedFileDetailsResult;
    
public static CallbackType RemoteStorageEnumerateWorkshopFilesResult;
    
public static CallbackType RemoteStorageGetPublishedItemVoteDetailsResult;
    
public static CallbackType RemoteStoragePublishedFileSubscribed;
    
public static CallbackType RemoteStoragePublishedFileUnsubscribed;
    
public static CallbackType RemoteStoragePublishedFileDeleted;
    
public static CallbackType RemoteStorageUpdateUserPublishedItemVoteResult;
    
public static CallbackType RemoteStorageUserVoteDetails;
    
public static CallbackType RemoteStorageEnumerateUserSharedWorkshopFilesResult;
    
public static CallbackType RemoteStorageSetUserPublishedFileActionResult;
    
public static CallbackType RemoteStorageEnumeratePublishedFilesByUserActionResult;
    
public static CallbackType RemoteStoragePublishFileProgress;
    
public static CallbackType RemoteStoragePublishedFileUpdated;
    
public static CallbackType RemoteStorageFileWriteAsyncComplete;
    
public static CallbackType RemoteStorageFileReadAsyncComplete;
    
public static CallbackType RemoteStorageLocalFileChange;
    
public static CallbackType GSStatsReceived;
    
public static CallbackType GSStatsStored;
    
public static CallbackType HTTPRequestCompleted;
    
public static CallbackType HTTPRequestHeadersReceived;
    
public static CallbackType HTTPRequestDataReceived;
    
public static CallbackType ScreenshotReady;
    
public static CallbackType ScreenshotRequested;
    
public static CallbackType SteamInputDeviceConnected;
    
public static CallbackType SteamInputDeviceDisconnected;
    
public static CallbackType SteamInputConfigurationLoaded;
    
public static CallbackType SteamInputGamepadSlotChange;
    
public static CallbackType SteamUGCQueryCompleted;
    
public static CallbackType SteamUGCRequestUGCDetailsResult;
    
public static CallbackType CreateItemResult;
    
public static CallbackType SubmitItemUpdateResult;
    
public static CallbackType ItemInstalled;
    
public static CallbackType DownloadItemResult;
    
public static CallbackType UserFavoriteItemsListChanged;
    
public static CallbackType SetUserItemVoteResult;
    
public static CallbackType GetUserItemVoteResult;
    
public static CallbackType StartPlaytimeTrackingResult;
    
public static CallbackType StopPlaytimeTrackingResult;
    
public static CallbackType AddUGCDependencyResult;
    
public static CallbackType RemoveUGCDependencyResult;
    
public static CallbackType AddAppDependencyResult;
    
public static CallbackType RemoveAppDependencyResult;
    
public static CallbackType GetAppDependenciesResult;
    
public static CallbackType DeleteItemResult;
    
public static CallbackType UserSubscribedItemsListChanged;
    
public static CallbackType WorkshopEULAStatus;
    
public static CallbackType SteamAppInstalled;
    
public static CallbackType SteamAppUninstalled;
    
public static CallbackType PlaybackStatusHasChanged;
    
public static CallbackType VolumeHasChanged;
    
public static CallbackType MusicPlayerWantsVolume;
    
public static CallbackType MusicPlayerSelectsQueueEntry;
    
public static CallbackType MusicPlayerSelectsPlaylistEntry;
    
public static CallbackType MusicPlayerRemoteWillActivate;
    
public static CallbackType MusicPlayerRemoteWillDeactivate;
    
public static CallbackType MusicPlayerRemoteToFront;
    
public static CallbackType MusicPlayerWillQuit;
    
public static CallbackType MusicPlayerWantsPlay;
    
public static CallbackType MusicPlayerWantsPause;
    
public static CallbackType MusicPlayerWantsPlayPrevious;
    
public static CallbackType MusicPlayerWantsPlayNext;
    
public static CallbackType MusicPlayerWantsShuffled;
    
public static CallbackType MusicPlayerWantsLooped;
    
public static CallbackType MusicPlayerWantsPlayingRepeatStatus;
    
public static CallbackType HTML_BrowserReady;
    
public static CallbackType HTML_NeedsPaint;
    
public static CallbackType HTML_StartRequest;
    
public static CallbackType HTML_CloseBrowser;
    
public static CallbackType HTML_URLChanged;
    
public static CallbackType HTML_FinishedRequest;
    
public static CallbackType HTML_OpenLinkInNewTab;
    
public static CallbackType HTML_ChangedTitle;
    
public static CallbackType HTML_SearchResults;
    
public static CallbackType HTML_CanGoBackAndForward;
    
public static CallbackType HTML_HorizontalScroll;
    
public static CallbackType HTML_VerticalScroll;
    
public static CallbackType HTML_LinkAtPosition;
    
public static CallbackType HTML_JSAlert;
    
public static CallbackType HTML_JSConfirm;
    
public static CallbackType HTML_FileOpenDialog;
    
public static CallbackType HTML_NewWindow;
    
public static CallbackType HTML_SetCursor;
    
public static CallbackType HTML_StatusText;
    
public static CallbackType HTML_ShowToolTip;
    
public static CallbackType HTML_UpdateToolTip;
    
public static CallbackType HTML_HideToolTip;
    
public static CallbackType HTML_BrowserRestarted;
    
public static CallbackType GetVideoURLResult;
    
public static CallbackType GetOPFSettingsResult;
    
public static CallbackType SteamInventoryResultReady;
    
public static CallbackType SteamInventoryFullUpdate;
    
public static CallbackType SteamInventoryDefinitionUpdate;
    
public static CallbackType SteamInventoryEligiblePromoItemDefIDs;
    
public static CallbackType SteamInventoryStartPurchaseResult;
    
public static CallbackType SteamInventoryRequestPricesResult;
    
public static CallbackType SteamParentalSettingsChanged;
    
public static CallbackType SearchForGameProgressCallback;
    
public static CallbackType SearchForGameResultCallback;
    
public static CallbackType RequestPlayersForGameProgressCallback;
    
public static CallbackType RequestPlayersForGameResultCallback;
    
public static CallbackType RequestPlayersForGameFinalResultCallback;
    
public static CallbackType SubmitPlayerResultResultCallback;
    
public static CallbackType EndGameResultCallback;
    
public static CallbackType JoinPartyCallback;
    
public static CallbackType CreateBeaconCallback;
    
public static CallbackType ReservationNotificationCallback;
    
public static CallbackType ChangeNumOpenSlotsCallback;
    
public static CallbackType AvailableBeaconLocationsUpdated;
    
public static CallbackType ActiveBeaconsUpdated;
    
public static CallbackType SteamRemotePlaySessionConnected;
    
public static CallbackType SteamRemotePlaySessionDisconnected;
    
public static CallbackType SteamRemotePlayTogetherGuestInvite;
}
internal static class Steamworks.CallbackTypeFactory : object {
    
internal static Dictionary`2<CallbackType, Type> All;
    private static CallbackTypeFactory();
}
internal class Steamworks.CallResult`1 : ValueType {
    
private SteamAPICall_t call;
    
private ISteamUtils utils;
    
private bool server;
    
public bool IsCompleted { get; }
    public CallResult`1(SteamAPICall_t call, bool server);
    public sealed virtual void OnCompleted(Action continuation);
    public Nullable`1<T> GetResult();
    public bool get_IsCompleted();
    internal CallResult`1<T> GetAwaiter();
}
internal enum Steamworks.ChatEntryType : Enum {
    
public int value__;
    
public static ChatEntryType Invalid;
    
public static ChatEntryType ChatMsg;
    
public static ChatEntryType Typing;
    
public static ChatEntryType InviteGame;
    
public static ChatEntryType Emote;
    
public static ChatEntryType LeftConversation;
    
public static ChatEntryType Entered;
    
public static ChatEntryType WasKicked;
    
public static ChatEntryType WasBanned;
    
public static ChatEntryType Disconnected;
    
public static ChatEntryType HistoricalChat;
    
public static ChatEntryType LinkBlocked;
}
internal enum Steamworks.ChatMemberStateChange : Enum {
    
public int value__;
    
public static ChatMemberStateChange Entered;
    
public static ChatMemberStateChange Left;
    
public static ChatMemberStateChange Disconnected;
    
public static ChatMemberStateChange Kicked;
    
public static ChatMemberStateChange Banned;
}
internal enum Steamworks.ChatSteamIDInstanceFlags : Enum {
    
public int value__;
    
public static ChatSteamIDInstanceFlags AccountInstanceMask;
    
public static ChatSteamIDInstanceFlags InstanceFlagClan;
    
public static ChatSteamIDInstanceFlags InstanceFlagLobby;
    
public static ChatSteamIDInstanceFlags InstanceFlagMMSLobby;
}
public enum Steamworks.CheckFileSignature : Enum {
    
public int value__;
    
public static CheckFileSignature InvalidSignature;
    
public static CheckFileSignature ValidSignature;
    
public static CheckFileSignature FileNotFound;
    
public static CheckFileSignature NoSignaturesFoundForThisApp;
    
public static CheckFileSignature NoSignaturesFoundForThisFile;
}
public class Steamworks.Clan : ValueType {
    
public SteamId Id;
    
public string Name { get; }
    
public string Tag { get; }
    
public int ChatMemberCount { get; }
    
public Friend Owner { get; }
    
public bool Public { get; }
    
public bool Official { get; }
    public Clan(SteamId id);
    public string get_Name();
    public string get_Tag();
    public int get_ChatMemberCount();
    public Friend get_Owner();
    public bool get_Public();
    public bool get_Official();
    [AsyncStateMachineAttribute("Steamworks.Clan/<RequestOfficerList>d__14")]
public Task`1<bool> RequestOfficerList();
    [IteratorStateMachineAttribute("Steamworks.Clan/<GetOfficers>d__15")]
public IEnumerable`1<Friend> GetOfficers();
}
internal enum Steamworks.CommunityProfileItemProperty : Enum {
    
public int value__;
    
public static CommunityProfileItemProperty ImageSmall;
    
public static CommunityProfileItemProperty ImageLarge;
    
public static CommunityProfileItemProperty InternalName;
    
public static CommunityProfileItemProperty Title;
    
public static CommunityProfileItemProperty Description;
    
public static CommunityProfileItemProperty AppID;
    
public static CommunityProfileItemProperty TypeID;
    
public static CommunityProfileItemProperty Class;
    
public static CommunityProfileItemProperty MovieWebM;
    
public static CommunityProfileItemProperty MovieMP4;
    
public static CommunityProfileItemProperty MovieWebMSmall;
    
public static CommunityProfileItemProperty MovieMP4Small;
}
internal enum Steamworks.CommunityProfileItemType : Enum {
    
public int value__;
    
public static CommunityProfileItemType AnimatedAvatar;
    
public static CommunityProfileItemType AvatarFrame;
    
public static CommunityProfileItemType ProfileModifier;
    
public static CommunityProfileItemType ProfileBackground;
    
public static CommunityProfileItemType MiniProfileBackground;
}
public class Steamworks.ConnectionManager : object {
    [CompilerGeneratedAttribute]

private IConnectionManager <Interface>k__BackingField;
    
public Connection Connection;
    [CompilerGeneratedAttribute]

private ConnectionInfo <ConnectionInfo>k__BackingField;
    
public bool Connected;
    
public bool Connecting;
    
public IConnectionManager Interface { get; public set; }
    
public ConnectionInfo ConnectionInfo { get; internal set; }
    
public string ConnectionName { get; public set; }
    
public long UserData { get; public set; }
    [CompilerGeneratedAttribute]
public IConnectionManager get_Interface();
    [CompilerGeneratedAttribute]
public void set_Interface(IConnectionManager value);
    [CompilerGeneratedAttribute]
public ConnectionInfo get_ConnectionInfo();
    [CompilerGeneratedAttribute]
internal void set_ConnectionInfo(ConnectionInfo value);
    public string get_ConnectionName();
    public void set_ConnectionName(string value);
    public long get_UserData();
    public void set_UserData(long value);
    public void Close(bool linger, int reasonCode, string debugString);
    public virtual string ToString();
    public virtual void OnConnectionChanged(ConnectionInfo info);
    public virtual void OnConnecting(ConnectionInfo info);
    public virtual void OnConnected(ConnectionInfo info);
    public virtual void OnDisconnected(ConnectionInfo info);
    public int Receive(int bufferSize, bool receiveToEnd);
    public void SendMessages(Connection[] connections, int connectionCount, IntPtr ptr, int size, SendType sendType, Result[] results);
    public void SendMessages(Connection[] connections, int connectionCount, Byte[] data, SendType sendType, Result[] results);
    public void SendMessages(Connection[] connections, int connectionCount, Byte[] data, int offset, int length, SendType sendType, Result[] results);
    public void SendMessages(Connection[] connections, int connectionCount, string str, SendType sendType, Result[] results);
    internal void ReceiveMessage(NetMsg*& msg);
    public virtual void OnMessage(IntPtr data, int size, long messageNum, long recvTime, int channel);
}
public enum Steamworks.ConnectionState : Enum {
    
public int value__;
    
public static ConnectionState None;
    
public static ConnectionState Connecting;
    
public static ConnectionState FindingRoute;
    
public static ConnectionState Connected;
    
public static ConnectionState ClosedByPeer;
    
public static ConnectionState ProblemDetectedLocally;
    
public static ConnectionState FinWait;
    
public static ConnectionState Linger;
    
public static ConnectionState Dead;
}
public class Steamworks.Controller : ValueType {
    
internal InputHandle_t Handle;
    
public ulong Id { get; }
    
public InputType InputType { get; }
    
unknown string ActionSet {public set; }
    internal Controller(InputHandle_t inputHandle_t);
    public ulong get_Id();
    public InputType get_InputType();
    public void set_ActionSet(string value);
    public void DeactivateLayer(string layer);
    public void ActivateLayer(string layer);
    public void ClearLayers();
    public DigitalState GetDigitalState(string actionName);
    public AnalogState GetAnalogState(string actionName);
    public virtual string ToString();
    public static bool op_Equality(Controller a, Controller b);
    public static bool op_Inequality(Controller a, Controller b);
    public virtual bool Equals(object p);
    public virtual int GetHashCode();
    public bool Equals(Controller p);
}
internal enum Steamworks.ControllerActionOrigin : Enum {
    
public int value__;
    
public static ControllerActionOrigin None;
    
public static ControllerActionOrigin A;
    
public static ControllerActionOrigin B;
    
public static ControllerActionOrigin X;
    
public static ControllerActionOrigin Y;
    
public static ControllerActionOrigin LeftBumper;
    
public static ControllerActionOrigin RightBumper;
    
public static ControllerActionOrigin LeftGrip;
    
public static ControllerActionOrigin RightGrip;
    
public static ControllerActionOrigin Start;
    
public static ControllerActionOrigin Back;
    
public static ControllerActionOrigin LeftPad_Touch;
    
public static ControllerActionOrigin LeftPad_Swipe;
    
public static ControllerActionOrigin LeftPad_Click;
    
public static ControllerActionOrigin LeftPad_DPadNorth;
    
public static ControllerActionOrigin LeftPad_DPadSouth;
    
public static ControllerActionOrigin LeftPad_DPadWest;
    
public static ControllerActionOrigin LeftPad_DPadEast;
    
public static ControllerActionOrigin RightPad_Touch;
    
public static ControllerActionOrigin RightPad_Swipe;
    
public static ControllerActionOrigin RightPad_Click;
    
public static ControllerActionOrigin RightPad_DPadNorth;
    
public static ControllerActionOrigin RightPad_DPadSouth;
    
public static ControllerActionOrigin RightPad_DPadWest;
    
public static ControllerActionOrigin RightPad_DPadEast;
    
public static ControllerActionOrigin LeftTrigger_Pull;
    
public static ControllerActionOrigin LeftTrigger_Click;
    
public static ControllerActionOrigin RightTrigger_Pull;
    
public static ControllerActionOrigin RightTrigger_Click;
    
public static ControllerActionOrigin LeftStick_Move;
    
public static ControllerActionOrigin LeftStick_Click;
    
public static ControllerActionOrigin LeftStick_DPadNorth;
    
public static ControllerActionOrigin LeftStick_DPadSouth;
    
public static ControllerActionOrigin LeftStick_DPadWest;
    
public static ControllerActionOrigin LeftStick_DPadEast;
    
public static ControllerActionOrigin Gyro_Move;
    
public static ControllerActionOrigin Gyro_Pitch;
    
public static ControllerActionOrigin Gyro_Yaw;
    
public static ControllerActionOrigin Gyro_Roll;
    
public static ControllerActionOrigin PS4_X;
    
public static ControllerActionOrigin PS4_Circle;
    
public static ControllerActionOrigin PS4_Triangle;
    
public static ControllerActionOrigin PS4_Square;
    
public static ControllerActionOrigin PS4_LeftBumper;
    
public static ControllerActionOrigin PS4_RightBumper;
    
public static ControllerActionOrigin PS4_Options;
    
public static ControllerActionOrigin PS4_Share;
    
public static ControllerActionOrigin PS4_LeftPad_Touch;
    
public static ControllerActionOrigin PS4_LeftPad_Swipe;
    
public static ControllerActionOrigin PS4_LeftPad_Click;
    
public static ControllerActionOrigin PS4_LeftPad_DPadNorth;
    
public static ControllerActionOrigin PS4_LeftPad_DPadSouth;
    
public static ControllerActionOrigin PS4_LeftPad_DPadWest;
    
public static ControllerActionOrigin PS4_LeftPad_DPadEast;
    
public static ControllerActionOrigin PS4_RightPad_Touch;
    
public static ControllerActionOrigin PS4_RightPad_Swipe;
    
public static ControllerActionOrigin PS4_RightPad_Click;
    
public static ControllerActionOrigin PS4_RightPad_DPadNorth;
    
public static ControllerActionOrigin PS4_RightPad_DPadSouth;
    
public static ControllerActionOrigin PS4_RightPad_DPadWest;
    
public static ControllerActionOrigin PS4_RightPad_DPadEast;
    
public static ControllerActionOrigin PS4_CenterPad_Touch;
    
public static ControllerActionOrigin PS4_CenterPad_Swipe;
    
public static ControllerActionOrigin PS4_CenterPad_Click;
    
public static ControllerActionOrigin PS4_CenterPad_DPadNorth;
    
public static ControllerActionOrigin PS4_CenterPad_DPadSouth;
    
public static ControllerActionOrigin PS4_CenterPad_DPadWest;
    
public static ControllerActionOrigin PS4_CenterPad_DPadEast;
    
public static ControllerActionOrigin PS4_LeftTrigger_Pull;
    
public static ControllerActionOrigin PS4_LeftTrigger_Click;
    
public static ControllerActionOrigin PS4_RightTrigger_Pull;
    
public static ControllerActionOrigin PS4_RightTrigger_Click;
    
public static ControllerActionOrigin PS4_LeftStick_Move;
    
public static ControllerActionOrigin PS4_LeftStick_Click;
    
public static ControllerActionOrigin PS4_LeftStick_DPadNorth;
    
public static ControllerActionOrigin PS4_LeftStick_DPadSouth;
    
public static ControllerActionOrigin PS4_LeftStick_DPadWest;
    
public static ControllerActionOrigin PS4_LeftStick_DPadEast;
    
public static ControllerActionOrigin PS4_RightStick_Move;
    
public static ControllerActionOrigin PS4_RightStick_Click;
    
public static ControllerActionOrigin PS4_RightStick_DPadNorth;
    
public static ControllerActionOrigin PS4_RightStick_DPadSouth;
    
public static ControllerActionOrigin PS4_RightStick_DPadWest;
    
public static ControllerActionOrigin PS4_RightStick_DPadEast;
    
public static ControllerActionOrigin PS4_DPad_North;
    
public static ControllerActionOrigin PS4_DPad_South;
    
public static ControllerActionOrigin PS4_DPad_West;
    
public static ControllerActionOrigin PS4_DPad_East;
    
public static ControllerActionOrigin PS4_Gyro_Move;
    
public static ControllerActionOrigin PS4_Gyro_Pitch;
    
public static ControllerActionOrigin PS4_Gyro_Yaw;
    
public static ControllerActionOrigin PS4_Gyro_Roll;
    
public static ControllerActionOrigin XBoxOne_A;
    
public static ControllerActionOrigin XBoxOne_B;
    
public static ControllerActionOrigin XBoxOne_X;
    
public static ControllerActionOrigin XBoxOne_Y;
    
public static ControllerActionOrigin XBoxOne_LeftBumper;
    
public static ControllerActionOrigin XBoxOne_RightBumper;
    
public static ControllerActionOrigin XBoxOne_Menu;
    
public static ControllerActionOrigin XBoxOne_View;
    
public static ControllerActionOrigin XBoxOne_LeftTrigger_Pull;
    
public static ControllerActionOrigin XBoxOne_LeftTrigger_Click;
    
public static ControllerActionOrigin XBoxOne_RightTrigger_Pull;
    
public static ControllerActionOrigin XBoxOne_RightTrigger_Click;
    
public static ControllerActionOrigin XBoxOne_LeftStick_Move;
    
public static ControllerActionOrigin XBoxOne_LeftStick_Click;
    
public static ControllerActionOrigin XBoxOne_LeftStick_DPadNorth;
    
public static ControllerActionOrigin XBoxOne_LeftStick_DPadSouth;
    
public static ControllerActionOrigin XBoxOne_LeftStick_DPadWest;
    
public static ControllerActionOrigin XBoxOne_LeftStick_DPadEast;
    
public static ControllerActionOrigin XBoxOne_RightStick_Move;
    
public static ControllerActionOrigin XBoxOne_RightStick_Click;
    
public static ControllerActionOrigin XBoxOne_RightStick_DPadNorth;
    
public static ControllerActionOrigin XBoxOne_RightStick_DPadSouth;
    
public static ControllerActionOrigin XBoxOne_RightStick_DPadWest;
    
public static ControllerActionOrigin XBoxOne_RightStick_DPadEast;
    
public static ControllerActionOrigin XBoxOne_DPad_North;
    
public static ControllerActionOrigin XBoxOne_DPad_South;
    
public static ControllerActionOrigin XBoxOne_DPad_West;
    
public static ControllerActionOrigin XBoxOne_DPad_East;
    
public static ControllerActionOrigin XBox360_A;
    
public static ControllerActionOrigin XBox360_B;
    
public static ControllerActionOrigin XBox360_X;
    
public static ControllerActionOrigin XBox360_Y;
    
public static ControllerActionOrigin XBox360_LeftBumper;
    
public static ControllerActionOrigin XBox360_RightBumper;
    
public static ControllerActionOrigin XBox360_Start;
    
public static ControllerActionOrigin XBox360_Back;
    
public static ControllerActionOrigin XBox360_LeftTrigger_Pull;
    
public static ControllerActionOrigin XBox360_LeftTrigger_Click;
    
public static ControllerActionOrigin XBox360_RightTrigger_Pull;
    
public static ControllerActionOrigin XBox360_RightTrigger_Click;
    
public static ControllerActionOrigin XBox360_LeftStick_Move;
    
public static ControllerActionOrigin XBox360_LeftStick_Click;
    
public static ControllerActionOrigin XBox360_LeftStick_DPadNorth;
    
public static ControllerActionOrigin XBox360_LeftStick_DPadSouth;
    
public static ControllerActionOrigin XBox360_LeftStick_DPadWest;
    
public static ControllerActionOrigin XBox360_LeftStick_DPadEast;
    
public static ControllerActionOrigin XBox360_RightStick_Move;
    
public static ControllerActionOrigin XBox360_RightStick_Click;
    
public static ControllerActionOrigin XBox360_RightStick_DPadNorth;
    
public static ControllerActionOrigin XBox360_RightStick_DPadSouth;
    
public static ControllerActionOrigin XBox360_RightStick_DPadWest;
    
public static ControllerActionOrigin XBox360_RightStick_DPadEast;
    
public static ControllerActionOrigin XBox360_DPad_North;
    
public static ControllerActionOrigin XBox360_DPad_South;
    
public static ControllerActionOrigin XBox360_DPad_West;
    
public static ControllerActionOrigin XBox360_DPad_East;
    
public static ControllerActionOrigin SteamV2_A;
    
public static ControllerActionOrigin SteamV2_B;
    
public static ControllerActionOrigin SteamV2_X;
    
public static ControllerActionOrigin SteamV2_Y;
    
public static ControllerActionOrigin SteamV2_LeftBumper;
    
public static ControllerActionOrigin SteamV2_RightBumper;
    
public static ControllerActionOrigin SteamV2_LeftGrip_Lower;
    
public static ControllerActionOrigin SteamV2_LeftGrip_Upper;
    
public static ControllerActionOrigin SteamV2_RightGrip_Lower;
    
public static ControllerActionOrigin SteamV2_RightGrip_Upper;
    
public static ControllerActionOrigin SteamV2_LeftBumper_Pressure;
    
public static ControllerActionOrigin SteamV2_RightBumper_Pressure;
    
public static ControllerActionOrigin SteamV2_LeftGrip_Pressure;
    
public static ControllerActionOrigin SteamV2_RightGrip_Pressure;
    
public static ControllerActionOrigin SteamV2_LeftGrip_Upper_Pressure;
    
public static ControllerActionOrigin SteamV2_RightGrip_Upper_Pressure;
    
public static ControllerActionOrigin SteamV2_Start;
    
public static ControllerActionOrigin SteamV2_Back;
    
public static ControllerActionOrigin SteamV2_LeftPad_Touch;
    
public static ControllerActionOrigin SteamV2_LeftPad_Swipe;
    
public static ControllerActionOrigin SteamV2_LeftPad_Click;
    
public static ControllerActionOrigin SteamV2_LeftPad_Pressure;
    
public static ControllerActionOrigin SteamV2_LeftPad_DPadNorth;
    
public static ControllerActionOrigin SteamV2_LeftPad_DPadSouth;
    
public static ControllerActionOrigin SteamV2_LeftPad_DPadWest;
    
public static ControllerActionOrigin SteamV2_LeftPad_DPadEast;
    
public static ControllerActionOrigin SteamV2_RightPad_Touch;
    
public static ControllerActionOrigin SteamV2_RightPad_Swipe;
    
public static ControllerActionOrigin SteamV2_RightPad_Click;
    
public static ControllerActionOrigin SteamV2_RightPad_Pressure;
    
public static ControllerActionOrigin SteamV2_RightPad_DPadNorth;
    
public static ControllerActionOrigin SteamV2_RightPad_DPadSouth;
    
public static ControllerActionOrigin SteamV2_RightPad_DPadWest;
    
public static ControllerActionOrigin SteamV2_RightPad_DPadEast;
    
public static ControllerActionOrigin SteamV2_LeftTrigger_Pull;
    
public static ControllerActionOrigin SteamV2_LeftTrigger_Click;
    
public static ControllerActionOrigin SteamV2_RightTrigger_Pull;
    
public static ControllerActionOrigin SteamV2_RightTrigger_Click;
    
public static ControllerActionOrigin SteamV2_LeftStick_Move;
    
public static ControllerActionOrigin SteamV2_LeftStick_Click;
    
public static ControllerActionOrigin SteamV2_LeftStick_DPadNorth;
    
public static ControllerActionOrigin SteamV2_LeftStick_DPadSouth;
    
public static ControllerActionOrigin SteamV2_LeftStick_DPadWest;
    
public static ControllerActionOrigin SteamV2_LeftStick_DPadEast;
    
public static ControllerActionOrigin SteamV2_Gyro_Move;
    
public static ControllerActionOrigin SteamV2_Gyro_Pitch;
    
public static ControllerActionOrigin SteamV2_Gyro_Yaw;
    
public static ControllerActionOrigin SteamV2_Gyro_Roll;
    
public static ControllerActionOrigin Switch_A;
    
public static ControllerActionOrigin Switch_B;
    
public static ControllerActionOrigin Switch_X;
    
public static ControllerActionOrigin Switch_Y;
    
public static ControllerActionOrigin Switch_LeftBumper;
    
public static ControllerActionOrigin Switch_RightBumper;
    
public static ControllerActionOrigin Switch_Plus;
    
public static ControllerActionOrigin Switch_Minus;
    
public static ControllerActionOrigin Switch_Capture;
    
public static ControllerActionOrigin Switch_LeftTrigger_Pull;
    
public static ControllerActionOrigin Switch_LeftTrigger_Click;
    
public static ControllerActionOrigin Switch_RightTrigger_Pull;
    
public static ControllerActionOrigin Switch_RightTrigger_Click;
    
public static ControllerActionOrigin Switch_LeftStick_Move;
    
public static ControllerActionOrigin Switch_LeftStick_Click;
    
public static ControllerActionOrigin Switch_LeftStick_DPadNorth;
    
public static ControllerActionOrigin Switch_LeftStick_DPadSouth;
    
public static ControllerActionOrigin Switch_LeftStick_DPadWest;
    
public static ControllerActionOrigin Switch_LeftStick_DPadEast;
    
public static ControllerActionOrigin Switch_RightStick_Move;
    
public static ControllerActionOrigin Switch_RightStick_Click;
    
public static ControllerActionOrigin Switch_RightStick_DPadNorth;
    
public static ControllerActionOrigin Switch_RightStick_DPadSouth;
    
public static ControllerActionOrigin Switch_RightStick_DPadWest;
    
public static ControllerActionOrigin Switch_RightStick_DPadEast;
    
public static ControllerActionOrigin Switch_DPad_North;
    
public static ControllerActionOrigin Switch_DPad_South;
    
public static ControllerActionOrigin Switch_DPad_West;
    
public static ControllerActionOrigin Switch_DPad_East;
    
public static ControllerActionOrigin Switch_ProGyro_Move;
    
public static ControllerActionOrigin Switch_ProGyro_Pitch;
    
public static ControllerActionOrigin Switch_ProGyro_Yaw;
    
public static ControllerActionOrigin Switch_ProGyro_Roll;
    
public static ControllerActionOrigin Switch_RightGyro_Move;
    
public static ControllerActionOrigin Switch_RightGyro_Pitch;
    
public static ControllerActionOrigin Switch_RightGyro_Yaw;
    
public static ControllerActionOrigin Switch_RightGyro_Roll;
    
public static ControllerActionOrigin Switch_LeftGyro_Move;
    
public static ControllerActionOrigin Switch_LeftGyro_Pitch;
    
public static ControllerActionOrigin Switch_LeftGyro_Yaw;
    
public static ControllerActionOrigin Switch_LeftGyro_Roll;
    
public static ControllerActionOrigin Switch_LeftGrip_Lower;
    
public static ControllerActionOrigin Switch_LeftGrip_Upper;
    
public static ControllerActionOrigin Switch_RightGrip_Lower;
    
public static ControllerActionOrigin Switch_RightGrip_Upper;
    
public static ControllerActionOrigin PS4_DPad_Move;
    
public static ControllerActionOrigin XBoxOne_DPad_Move;
    
public static ControllerActionOrigin XBox360_DPad_Move;
    
public static ControllerActionOrigin Switch_DPad_Move;
    
public static ControllerActionOrigin PS5_X;
    
public static ControllerActionOrigin PS5_Circle;
    
public static ControllerActionOrigin PS5_Triangle;
    
public static ControllerActionOrigin PS5_Square;
    
public static ControllerActionOrigin PS5_LeftBumper;
    
public static ControllerActionOrigin PS5_RightBumper;
    
public static ControllerActionOrigin PS5_Option;
    
public static ControllerActionOrigin PS5_Create;
    
public static ControllerActionOrigin PS5_Mute;
    
public static ControllerActionOrigin PS5_LeftPad_Touch;
    
public static ControllerActionOrigin PS5_LeftPad_Swipe;
    
public static ControllerActionOrigin PS5_LeftPad_Click;
    
public static ControllerActionOrigin PS5_LeftPad_DPadNorth;
    
public static ControllerActionOrigin PS5_LeftPad_DPadSouth;
    
public static ControllerActionOrigin PS5_LeftPad_DPadWest;
    
public static ControllerActionOrigin PS5_LeftPad_DPadEast;
    
public static ControllerActionOrigin PS5_RightPad_Touch;
    
public static ControllerActionOrigin PS5_RightPad_Swipe;
    
public static ControllerActionOrigin PS5_RightPad_Click;
    
public static ControllerActionOrigin PS5_RightPad_DPadNorth;
    
public static ControllerActionOrigin PS5_RightPad_DPadSouth;
    
public static ControllerActionOrigin PS5_RightPad_DPadWest;
    
public static ControllerActionOrigin PS5_RightPad_DPadEast;
    
public static ControllerActionOrigin PS5_CenterPad_Touch;
    
public static ControllerActionOrigin PS5_CenterPad_Swipe;
    
public static ControllerActionOrigin PS5_CenterPad_Click;
    
public static ControllerActionOrigin PS5_CenterPad_DPadNorth;
    
public static ControllerActionOrigin PS5_CenterPad_DPadSouth;
    
public static ControllerActionOrigin PS5_CenterPad_DPadWest;
    
public static ControllerActionOrigin PS5_CenterPad_DPadEast;
    
public static ControllerActionOrigin PS5_LeftTrigger_Pull;
    
public static ControllerActionOrigin PS5_LeftTrigger_Click;
    
public static ControllerActionOrigin PS5_RightTrigger_Pull;
    
public static ControllerActionOrigin PS5_RightTrigger_Click;
    
public static ControllerActionOrigin PS5_LeftStick_Move;
    
public static ControllerActionOrigin PS5_LeftStick_Click;
    
public static ControllerActionOrigin PS5_LeftStick_DPadNorth;
    
public static ControllerActionOrigin PS5_LeftStick_DPadSouth;
    
public static ControllerActionOrigin PS5_LeftStick_DPadWest;
    
public static ControllerActionOrigin PS5_LeftStick_DPadEast;
    
public static ControllerActionOrigin PS5_RightStick_Move;
    
public static ControllerActionOrigin PS5_RightStick_Click;
    
public static ControllerActionOrigin PS5_RightStick_DPadNorth;
    
public static ControllerActionOrigin PS5_RightStick_DPadSouth;
    
public static ControllerActionOrigin PS5_RightStick_DPadWest;
    
public static ControllerActionOrigin PS5_RightStick_DPadEast;
    
public static ControllerActionOrigin PS5_DPad_Move;
    
public static ControllerActionOrigin PS5_DPad_North;
    
public static ControllerActionOrigin PS5_DPad_South;
    
public static ControllerActionOrigin PS5_DPad_West;
    
public static ControllerActionOrigin PS5_DPad_East;
    
public static ControllerActionOrigin PS5_Gyro_Move;
    
public static ControllerActionOrigin PS5_Gyro_Pitch;
    
public static ControllerActionOrigin PS5_Gyro_Yaw;
    
public static ControllerActionOrigin PS5_Gyro_Roll;
    
public static ControllerActionOrigin XBoxOne_LeftGrip_Lower;
    
public static ControllerActionOrigin XBoxOne_LeftGrip_Upper;
    
public static ControllerActionOrigin XBoxOne_RightGrip_Lower;
    
public static ControllerActionOrigin XBoxOne_RightGrip_Upper;
    
public static ControllerActionOrigin XBoxOne_Share;
    
public static ControllerActionOrigin SteamDeck_A;
    
public static ControllerActionOrigin SteamDeck_B;
    
public static ControllerActionOrigin SteamDeck_X;
    
public static ControllerActionOrigin SteamDeck_Y;
    
public static ControllerActionOrigin SteamDeck_L1;
    
public static ControllerActionOrigin SteamDeck_R1;
    
public static ControllerActionOrigin SteamDeck_Menu;
    
public static ControllerActionOrigin SteamDeck_View;
    
public static ControllerActionOrigin SteamDeck_LeftPad_Touch;
    
public static ControllerActionOrigin SteamDeck_LeftPad_Swipe;
    
public static ControllerActionOrigin SteamDeck_LeftPad_Click;
    
public static ControllerActionOrigin SteamDeck_LeftPad_DPadNorth;
    
public static ControllerActionOrigin SteamDeck_LeftPad_DPadSouth;
    
public static ControllerActionOrigin SteamDeck_LeftPad_DPadWest;
    
public static ControllerActionOrigin SteamDeck_LeftPad_DPadEast;
    
public static ControllerActionOrigin SteamDeck_RightPad_Touch;
    
public static ControllerActionOrigin SteamDeck_RightPad_Swipe;
    
public static ControllerActionOrigin SteamDeck_RightPad_Click;
    
public static ControllerActionOrigin SteamDeck_RightPad_DPadNorth;
    
public static ControllerActionOrigin SteamDeck_RightPad_DPadSouth;
    
public static ControllerActionOrigin SteamDeck_RightPad_DPadWest;
    
public static ControllerActionOrigin SteamDeck_RightPad_DPadEast;
    
public static ControllerActionOrigin SteamDeck_L2_SoftPull;
    
public static ControllerActionOrigin SteamDeck_L2;
    
public static ControllerActionOrigin SteamDeck_R2_SoftPull;
    
public static ControllerActionOrigin SteamDeck_R2;
    
public static ControllerActionOrigin SteamDeck_LeftStick_Move;
    
public static ControllerActionOrigin SteamDeck_L3;
    
public static ControllerActionOrigin SteamDeck_LeftStick_DPadNorth;
    
public static ControllerActionOrigin SteamDeck_LeftStick_DPadSouth;
    
public static ControllerActionOrigin SteamDeck_LeftStick_DPadWest;
    
public static ControllerActionOrigin SteamDeck_LeftStick_DPadEast;
    
public static ControllerActionOrigin SteamDeck_LeftStick_Touch;
    
public static ControllerActionOrigin SteamDeck_RightStick_Move;
    
public static ControllerActionOrigin SteamDeck_R3;
    
public static ControllerActionOrigin SteamDeck_RightStick_DPadNorth;
    
public static ControllerActionOrigin SteamDeck_RightStick_DPadSouth;
    
public static ControllerActionOrigin SteamDeck_RightStick_DPadWest;
    
public static ControllerActionOrigin SteamDeck_RightStick_DPadEast;
    
public static ControllerActionOrigin SteamDeck_RightStick_Touch;
    
public static ControllerActionOrigin SteamDeck_L4;
    
public static ControllerActionOrigin SteamDeck_R4;
    
public static ControllerActionOrigin SteamDeck_L5;
    
public static ControllerActionOrigin SteamDeck_R5;
    
public static ControllerActionOrigin SteamDeck_DPad_Move;
    
public static ControllerActionOrigin SteamDeck_DPad_North;
    
public static ControllerActionOrigin SteamDeck_DPad_South;
    
public static ControllerActionOrigin SteamDeck_DPad_West;
    
public static ControllerActionOrigin SteamDeck_DPad_East;
    
public static ControllerActionOrigin SteamDeck_Gyro_Move;
    
public static ControllerActionOrigin SteamDeck_Gyro_Pitch;
    
public static ControllerActionOrigin SteamDeck_Gyro_Yaw;
    
public static ControllerActionOrigin SteamDeck_Gyro_Roll;
    
public static ControllerActionOrigin SteamDeck_Reserved1;
    
public static ControllerActionOrigin SteamDeck_Reserved2;
    
public static ControllerActionOrigin SteamDeck_Reserved3;
    
public static ControllerActionOrigin SteamDeck_Reserved4;
    
public static ControllerActionOrigin SteamDeck_Reserved5;
    
public static ControllerActionOrigin SteamDeck_Reserved6;
    
public static ControllerActionOrigin SteamDeck_Reserved7;
    
public static ControllerActionOrigin SteamDeck_Reserved8;
    
public static ControllerActionOrigin SteamDeck_Reserved9;
    
public static ControllerActionOrigin SteamDeck_Reserved10;
    
public static ControllerActionOrigin SteamDeck_Reserved11;
    
public static ControllerActionOrigin SteamDeck_Reserved12;
    
public static ControllerActionOrigin SteamDeck_Reserved13;
    
public static ControllerActionOrigin SteamDeck_Reserved14;
    
public static ControllerActionOrigin SteamDeck_Reserved15;
    
public static ControllerActionOrigin SteamDeck_Reserved16;
    
public static ControllerActionOrigin SteamDeck_Reserved17;
    
public static ControllerActionOrigin SteamDeck_Reserved18;
    
public static ControllerActionOrigin SteamDeck_Reserved19;
    
public static ControllerActionOrigin SteamDeck_Reserved20;
    
public static ControllerActionOrigin Switch_JoyConButton_N;
    
public static ControllerActionOrigin Switch_JoyConButton_E;
    
public static ControllerActionOrigin Switch_JoyConButton_S;
    
public static ControllerActionOrigin Switch_JoyConButton_W;
    
public static ControllerActionOrigin PS5_LeftGrip;
    
public static ControllerActionOrigin PS5_RightGrip;
    
public static ControllerActionOrigin PS5_LeftFn;
    
public static ControllerActionOrigin PS5_RightFn;
    
public static ControllerActionOrigin Count;
    
public static ControllerActionOrigin MaximumPossibleValue;
}
internal enum Steamworks.ControllerHapticLocation : Enum {
    
public int value__;
    
public static ControllerHapticLocation Left;
    
public static ControllerHapticLocation Right;
    
public static ControllerHapticLocation Both;
}
internal enum Steamworks.ControllerHapticType : Enum {
    
public int value__;
    
public static ControllerHapticType Off;
    
public static ControllerHapticType Tick;
    
public static ControllerHapticType Click;
}
internal class Steamworks.Data.AccountID_t : ValueType {
    
public UInt32 Value;
    public static AccountID_t op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(AccountID_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(AccountID_t p);
    public static bool op_Equality(AccountID_t a, AccountID_t b);
    public static bool op_Inequality(AccountID_t a, AccountID_t b);
    public sealed virtual int CompareTo(AccountID_t other);
}
public class Steamworks.Data.Achievement : ValueType {
    
internal string Value;
    
public bool State { get; }
    
public string Identifier { get; }
    
public string Name { get; }
    
public string Description { get; }
    
public Nullable`1<DateTime> UnlockTime { get; }
    
public float GlobalUnlocked { get; }
    public Achievement(string name);
    public virtual string ToString();
    public bool get_State();
    public string get_Identifier();
    public string get_Name();
    public string get_Description();
    public Nullable`1<DateTime> get_UnlockTime();
    public Nullable`1<Image> GetIcon();
    [AsyncStateMachineAttribute("Steamworks.Data.Achievement/<GetIconAsync>d__14")]
public Task`1<Nullable`1<Image>> GetIconAsync(int timeout);
    public float get_GlobalUnlocked();
    public bool Trigger(bool apply);
    public bool Clear();
}
internal class Steamworks.Data.ActiveBeaconsUpdated_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ActiveBeaconsUpdated_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.AddAppDependencyResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static AddAppDependencyResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.AddUGCDependencyResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal PublishedFileId ChildPublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static AddUGCDependencyResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.AppProofOfPurchaseKeyResponse_t : ValueType {
    
internal Result Result;
    
internal UInt32 AppID;
    
internal UInt32 CchKeyLength;
    
internal Byte[] Key;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static AppProofOfPurchaseKeyResponse_t();
    internal string KeyUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.AppResumingFromSuspend_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static AppResumingFromSuspend_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.AssociateWithClanResult_t : ValueType {
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static AssociateWithClanResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.AvailableBeaconLocationsUpdated_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static AvailableBeaconLocationsUpdated_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.AvatarImageLoaded_t : ValueType {
    
internal ulong SteamID;
    
internal int Image;
    
internal int Wide;
    
internal int Tall;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static AvatarImageLoaded_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.ChangeNumOpenSlotsCallback_t : ValueType {
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ChangeNumOpenSlotsCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.CheckFileSignature_t : ValueType {
    
internal CheckFileSignature CheckFileSignature;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static CheckFileSignature_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.ClanOfficerListResponse_t : ValueType {
    
internal ulong SteamIDClan;
    
internal int COfficers;
    
internal byte Success;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ClanOfficerListResponse_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.ClientGameServerDeny_t : ValueType {
    
internal UInt32 AppID;
    
internal UInt32 GameServerIP;
    
internal ushort GameServerPort;
    
internal ushort Secure;
    
internal UInt32 Reason;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ClientGameServerDeny_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.Color : ValueType {
    
public byte r;
    
public byte g;
    
public byte b;
    
public byte a;
}
internal class Steamworks.Data.ComputeNewPlayerCompatibilityResult_t : ValueType {
    
internal Result Result;
    
internal int CPlayersThatDontLikeCandidate;
    
internal int CPlayersThatCandidateDoesntLike;
    
internal int CClanPlayersThatDontLikeCandidate;
    
internal ulong SteamIDCandidate;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ComputeNewPlayerCompatibilityResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.Connection : ValueType {
    [CompilerGeneratedAttribute]

private UInt32 <Id>k__BackingField;
    
public UInt32 Id { get; public set; }
    
public long UserData { get; public set; }
    
public string ConnectionName { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    public sealed virtual bool Equals(Connection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static Connection op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(Connection value);
    public static bool op_Equality(Connection value1, Connection value2);
    public static bool op_Inequality(Connection value1, Connection value2);
    public Result Accept();
    public bool Close(bool linger, int reasonCode, string debugString);
    public long get_UserData();
    public void set_UserData(long value);
    public string get_ConnectionName();
    public void set_ConnectionName(string value);
    public Result SendMessage(IntPtr ptr, int size, SendType sendType, ushort laneIndex);
    public Result SendMessage(Byte[] data, SendType sendType, ushort laneIndex);
    public Result SendMessage(Byte[] data, int offset, int length, SendType sendType, ushort laneIndex);
    public Result SendMessage(string str, SendType sendType, ushort laneIndex);
    public Result Flush();
    public string DetailedStatus();
    public ConnectionStatus QuickStatus();
    public Result ConfigureConnectionLanes(Int32[] lanePriorities, UInt16[] laneWeights);
}
public class Steamworks.Data.ConnectionInfo : ValueType {
    
internal NetIdentity identity;
    
internal long userData;
    
internal Socket listenSocket;
    
internal NetAddress address;
    
internal ushort pad;
    
internal SteamNetworkingPOPID popRemote;
    
internal SteamNetworkingPOPID popRelay;
    
internal ConnectionState state;
    
internal int endReason;
    
internal string endDebug;
    
internal string connectionDescription;
    
public ConnectionState State { get; }
    
public NetAddress Address { get; }
    
public NetIdentity Identity { get; }
    
public NetConnectionEnd EndReason { get; }
    public ConnectionState get_State();
    public NetAddress get_Address();
    public NetIdentity get_Identity();
    public NetConnectionEnd get_EndReason();
}
public class Steamworks.Data.ConnectionLaneStatus : ValueType {
    
internal int cbPendingUnreliable;
    
internal int cbPendingReliable;
    
internal int cbSentUnackedReliable;
    
internal int _reservePad1;
    
internal long ecQueueTime;
    
internal UInt32[] reserved;
    
public int PendingUnreliable { get; }
    
public int PendingReliable { get; }
    
public int SentUnackedReliable { get; }
    public int get_PendingUnreliable();
    public int get_PendingReliable();
    public int get_SentUnackedReliable();
}
public class Steamworks.Data.ConnectionStatus : ValueType {
    
internal ConnectionState state;
    
internal int ping;
    
internal float connectionQualityLocal;
    
internal float connectionQualityRemote;
    
internal float outPacketsPerSec;
    
internal float outBytesPerSec;
    
internal float inPacketsPerSec;
    
internal float inBytesPerSec;
    
internal int sendRateBytesPerSecond;
    
internal int cbPendingUnreliable;
    
internal int cbPendingReliable;
    
internal int cbSentUnackedReliable;
    
internal long ecQueueTime;
    
internal UInt32[] reserved;
    
public int Ping { get; }
    
public float OutPacketsPerSec { get; }
    
public float OutBytesPerSec { get; }
    
public float InPacketsPerSec { get; }
    
public float InBytesPerSec { get; }
    
public float ConnectionQualityLocal { get; }
    
public float ConnectionQualityRemote { get; }
    
public int PendingUnreliable { get; }
    
public int PendingReliable { get; }
    
public int SentUnackedReliable { get; }
    public int get_Ping();
    public float get_OutPacketsPerSec();
    public float get_OutBytesPerSec();
    public float get_InPacketsPerSec();
    public float get_InBytesPerSec();
    public float get_ConnectionQualityLocal();
    public float get_ConnectionQualityRemote();
    public int get_PendingUnreliable();
    public int get_PendingReliable();
    public int get_SentUnackedReliable();
}
internal class Steamworks.Data.ControllerActionSetHandle_t : ValueType {
    
public ulong Value;
    public static ControllerActionSetHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(ControllerActionSetHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(ControllerActionSetHandle_t p);
    public static bool op_Equality(ControllerActionSetHandle_t a, ControllerActionSetHandle_t b);
    public static bool op_Inequality(ControllerActionSetHandle_t a, ControllerActionSetHandle_t b);
    public sealed virtual int CompareTo(ControllerActionSetHandle_t other);
}
internal class Steamworks.Data.ControllerAnalogActionHandle_t : ValueType {
    
public ulong Value;
    public static ControllerAnalogActionHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(ControllerAnalogActionHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(ControllerAnalogActionHandle_t p);
    public static bool op_Equality(ControllerAnalogActionHandle_t a, ControllerAnalogActionHandle_t b);
    public static bool op_Inequality(ControllerAnalogActionHandle_t a, ControllerAnalogActionHandle_t b);
    public sealed virtual int CompareTo(ControllerAnalogActionHandle_t other);
}
internal class Steamworks.Data.ControllerDigitalActionHandle_t : ValueType {
    
public ulong Value;
    public static ControllerDigitalActionHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(ControllerDigitalActionHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(ControllerDigitalActionHandle_t p);
    public static bool op_Equality(ControllerDigitalActionHandle_t a, ControllerDigitalActionHandle_t b);
    public static bool op_Inequality(ControllerDigitalActionHandle_t a, ControllerDigitalActionHandle_t b);
    public sealed virtual int CompareTo(ControllerDigitalActionHandle_t other);
}
internal class Steamworks.Data.ControllerHandle_t : ValueType {
    
public ulong Value;
    public static ControllerHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(ControllerHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(ControllerHandle_t p);
    public static bool op_Equality(ControllerHandle_t a, ControllerHandle_t b);
    public static bool op_Inequality(ControllerHandle_t a, ControllerHandle_t b);
    public sealed virtual int CompareTo(ControllerHandle_t other);
}
internal class Steamworks.Data.CreateBeaconCallback_t : ValueType {
    
internal Result Result;
    
internal ulong BeaconID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static CreateBeaconCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.CreateItemResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal bool UserNeedsToAcceptWorkshopLegalAgreement;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static CreateItemResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal static class Steamworks.Data.Defines : object {
    
internal static AppId k_uAppIdInvalid;
    
internal static DepotId_t k_uDepotIdInvalid;
    
internal static SteamAPICall_t k_uAPICallInvalid;
    
internal static PartyBeaconID_t k_ulPartyBeaconIdInvalid;
    
internal static HAuthTicket k_HAuthTicketInvalid;
    
internal static UInt32 k_unSteamAccountIDMask;
    
internal static UInt32 k_unSteamAccountInstanceMask;
    
internal static UInt32 k_unSteamUserDefaultInstance;
    
internal static int k_cchGameExtraInfoMax;
    
internal static int k_cchMaxFriendsGroupName;
    
internal static int k_cFriendsGroupLimit;
    
internal static FriendsGroupID_t k_FriendsGroupID_Invalid;
    
internal static int k_cEnumerateFollowersMax;
    
internal static UInt32 k_cubChatMetadataMax;
    
internal static int k_cbMaxGameServerGameDir;
    
internal static int k_cbMaxGameServerMapName;
    
internal static int k_cbMaxGameServerGameDescription;
    
internal static int k_cbMaxGameServerName;
    
internal static int k_cbMaxGameServerTags;
    
internal static int k_cbMaxGameServerGameData;
    
internal static int HSERVERQUERY_INVALID;
    
internal static UInt32 k_unFavoriteFlagNone;
    
internal static UInt32 k_unFavoriteFlagFavorite;
    
internal static UInt32 k_unFavoriteFlagHistory;
    
internal static UInt32 k_unMaxCloudFileChunkSize;
    
internal static PublishedFileId k_PublishedFileIdInvalid;
    
internal static UGCHandle_t k_UGCHandleInvalid;
    
internal static PublishedFileUpdateHandle_t k_PublishedFileUpdateHandleInvalid;
    
internal static UGCFileWriteStreamHandle_t k_UGCFileStreamHandleInvalid;
    
internal static UInt32 k_cchPublishedDocumentTitleMax;
    
internal static UInt32 k_cchPublishedDocumentDescriptionMax;
    
internal static UInt32 k_cchPublishedDocumentChangeDescriptionMax;
    
internal static UInt32 k_unEnumeratePublishedFilesMaxResults;
    
internal static UInt32 k_cchTagListMax;
    
internal static UInt32 k_cchFilenameMax;
    
internal static UInt32 k_cchPublishedFileURLMax;
    
internal static int k_cubAppProofOfPurchaseKeyMax;
    
internal static UInt32 k_nScreenshotMaxTaggedUsers;
    
internal static UInt32 k_nScreenshotMaxTaggedPublishedFiles;
    
internal static int k_cubUFSTagTypeMax;
    
internal static int k_cubUFSTagValueMax;
    
internal static int k_ScreenshotThumbWidth;
    
internal static UGCQueryHandle_t k_UGCQueryHandleInvalid;
    
internal static UGCUpdateHandle_t k_UGCUpdateHandleInvalid;
    
internal static UInt32 kNumUGCResultsPerPage;
    
internal static UInt32 k_cchDeveloperMetadataMax;
    
internal static UInt32 INVALID_HTMLBROWSER;
    
internal static InventoryItemId k_SteamItemInstanceIDInvalid;
    
internal static SteamInventoryResult_t k_SteamInventoryResultInvalid;
    
internal static SteamInventoryUpdateHandle_t k_SteamInventoryUpdateHandleInvalid;
    
internal static Connection k_HSteamNetConnection_Invalid;
    
internal static Socket k_HSteamListenSocket_Invalid;
    
internal static HSteamNetPollGroup k_HSteamNetPollGroup_Invalid;
    
internal static int k_cchMaxSteamNetworkingErrMsg;
    
internal static int k_cchSteamNetworkingMaxConnectionCloseReason;
    
internal static int k_cchSteamNetworkingMaxConnectionDescription;
    
internal static int k_cchSteamNetworkingMaxConnectionAppName;
    
internal static int k_nSteamNetworkConnectionInfoFlags_Unauthenticated;
    
internal static int k_nSteamNetworkConnectionInfoFlags_Unencrypted;
    
internal static int k_nSteamNetworkConnectionInfoFlags_LoopbackBuffers;
    
internal static int k_nSteamNetworkConnectionInfoFlags_Fast;
    
internal static int k_nSteamNetworkConnectionInfoFlags_Relayed;
    
internal static int k_nSteamNetworkConnectionInfoFlags_DualWifi;
    
internal static int k_cbMaxSteamNetworkingSocketsMessageSizeSend;
    
internal static int k_nSteamNetworkingSend_Unreliable;
    
internal static int k_nSteamNetworkingSend_NoNagle;
    
internal static int k_nSteamNetworkingSend_UnreliableNoNagle;
    
internal static int k_nSteamNetworkingSend_NoDelay;
    
internal static int k_nSteamNetworkingSend_UnreliableNoDelay;
    
internal static int k_nSteamNetworkingSend_Reliable;
    
internal static int k_nSteamNetworkingSend_ReliableNoNagle;
    
internal static int k_nSteamNetworkingSend_UseCurrentThread;
    
internal static int k_nSteamNetworkingSend_AutoRestartBrokenSession;
    
internal static int k_cchMaxSteamNetworkingPingLocationString;
    
internal static int k_nSteamNetworkingPing_Failed;
    
internal static int k_nSteamNetworkingPing_Unknown;
    
internal static int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Default;
    
internal static int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Disable;
    
internal static int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Relay;
    
internal static int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Private;
    
internal static int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Public;
    
internal static int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_All;
    
internal static SteamNetworkingPOPID k_SteamDatagramPOPID_dev;
    
internal static ushort STEAMGAMESERVER_QUERY_PORT_SHARED;
    
internal static ushort MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE;
    
internal static UInt32 k_cbSteamDatagramMaxSerializedTicket;
    
internal static UInt32 k_cbMaxSteamDatagramGameCoordinatorServerLoginAppData;
    
internal static UInt32 k_cbMaxSteamDatagramGameCoordinatorServerLoginSerialized;
    
internal static int k_cbSteamNetworkingSocketsFakeUDPPortRecommendedMTU;
    
internal static int k_cbSteamNetworkingSocketsFakeUDPPortMaxMessageSize;
    private static Defines();
}
internal class Steamworks.Data.DeleteItemResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static DeleteItemResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.DepotId : ValueType {
    
public UInt32 Value;
    public static DepotId op_Implicit(UInt32 value);
    public static DepotId op_Implicit(int value);
    public static UInt32 op_Implicit(DepotId value);
    public virtual string ToString();
}
internal class Steamworks.Data.DepotId_t : ValueType {
    
public UInt32 Value;
    public static DepotId_t op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(DepotId_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(DepotId_t p);
    public static bool op_Equality(DepotId_t a, DepotId_t b);
    public static bool op_Inequality(DepotId_t a, DepotId_t b);
    public sealed virtual int CompareTo(DepotId_t other);
}
public class Steamworks.Data.DlcInformation : ValueType {
    [CompilerGeneratedAttribute]

private AppId <AppId>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Available>k__BackingField;
    
public AppId AppId { get; internal set; }
    
public string Name { get; internal set; }
    
public bool Available { get; internal set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public AppId get_AppId();
    [CompilerGeneratedAttribute]
internal void set_AppId(AppId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Available();
    [CompilerGeneratedAttribute]
internal void set_Available(bool value);
}
internal class Steamworks.Data.DlcInstalled_t : ValueType {
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static DlcInstalled_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.DownloadClanActivityCountsResult_t : ValueType {
    
internal bool Success;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static DownloadClanActivityCountsResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.DownloadItemResult_t : ValueType {
    
internal AppId AppID;
    
internal PublishedFileId PublishedFileId;
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static DownloadItemResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.DownloadProgress : ValueType {
    
public bool Active;
    
public ulong BytesDownloaded;
    
public ulong BytesTotal;
    
public ulong BytesRemaining { get; }
    public ulong get_BytesRemaining();
}
public class Steamworks.Data.DurationControl : ValueType {
    
internal DurationControl_t _inner;
    
public AppId Appid { get; }
    
public bool Applicable { get; }
    
internal TimeSpan PlaytimeInLastFiveHours { get; }
    
internal TimeSpan PlaytimeToday { get; }
    
internal DurationControlProgress Progress { get; }
    public AppId get_Appid();
    public bool get_Applicable();
    internal TimeSpan get_PlaytimeInLastFiveHours();
    internal TimeSpan get_PlaytimeToday();
    internal DurationControlProgress get_Progress();
}
internal class Steamworks.Data.DurationControl_t : ValueType {
    
internal Result Result;
    
internal AppId Appid;
    
internal bool Applicable;
    
internal int CsecsLast5h;
    
internal DurationControlProgress Progress;
    
internal DurationControlNotification Otification;
    
internal int CsecsToday;
    
internal int CsecsRemaining;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static DurationControl_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.EncryptedAppTicketResponse_t : ValueType {
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static EncryptedAppTicketResponse_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.EndGameResultCallback_t : ValueType {
    
internal Result Result;
    
internal ulong UllUniqueGameID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static EndGameResultCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.EquippedProfileItems_t : ValueType {
    
internal Result Result;
    
internal ulong SteamID;
    
internal bool HasAnimatedAvatar;
    
internal bool HasAvatarFrame;
    
internal bool HasProfileModifier;
    
internal bool HasProfileBackground;
    
internal bool HasMiniProfileBackground;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static EquippedProfileItems_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.EquippedProfileItemsChanged_t : ValueType {
    
internal ulong SteamID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static EquippedProfileItemsChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.FavoritesListAccountsUpdated_t : ValueType {
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static FavoritesListAccountsUpdated_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.FavoritesListChanged_t : ValueType {
    
internal UInt32 IP;
    
internal UInt32 QueryPort;
    
internal UInt32 ConnPort;
    
internal UInt32 AppID;
    
internal UInt32 Flags;
    
internal bool Add;
    
internal UInt32 AccountId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static FavoritesListChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.FileDetails : ValueType {
    
public ulong SizeInBytes;
    
public string Sha1;
    
public UInt32 Flags;
}
internal class Steamworks.Data.FileDetailsResult_t : ValueType {
    
internal Result Result;
    
internal ulong FileSize;
    
internal Byte[] FileSHA;
    
internal UInt32 Flags;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static FileDetailsResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.FilterTextDictionaryChanged_t : ValueType {
    
internal int Language;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static FilterTextDictionaryChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.FloatingGamepadTextInputDismissed_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static FloatingGamepadTextInputDismissed_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.FriendGameInfo_t : ValueType {
    
internal GameId GameID;
    
internal UInt32 GameIP;
    
internal ushort GamePort;
    
internal ushort QueryPort;
    
internal ulong SteamIDLobby;
}
internal class Steamworks.Data.FriendRichPresenceUpdate_t : ValueType {
    
internal ulong SteamIDFriend;
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static FriendRichPresenceUpdate_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.FriendsEnumerateFollowingList_t : ValueType {
    
internal Result Result;
    
internal UInt64[] GSteamID;
    
internal int ResultsReturned;
    
internal int TotalResultCount;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static FriendsEnumerateFollowingList_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.FriendsGetFollowerCount_t : ValueType {
    
internal Result Result;
    
internal ulong SteamID;
    
internal int Count;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static FriendsGetFollowerCount_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.FriendsGroupID_t : ValueType {
    
public short Value;
    public static FriendsGroupID_t op_Implicit(short value);
    public static short op_Implicit(FriendsGroupID_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(FriendsGroupID_t p);
    public static bool op_Equality(FriendsGroupID_t a, FriendsGroupID_t b);
    public static bool op_Inequality(FriendsGroupID_t a, FriendsGroupID_t b);
    public sealed virtual int CompareTo(FriendsGroupID_t other);
}
internal class Steamworks.Data.FriendsIsFollowing_t : ValueType {
    
internal Result Result;
    
internal ulong SteamID;
    
internal bool IsFollowing;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static FriendsIsFollowing_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GameConnectedChatJoin_t : ValueType {
    
internal ulong SteamIDClanChat;
    
internal ulong SteamIDUser;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GameConnectedChatJoin_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GameConnectedChatLeave_t : ValueType {
    
internal ulong SteamIDClanChat;
    
internal ulong SteamIDUser;
    
internal bool Kicked;
    
internal bool Dropped;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GameConnectedChatLeave_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GameConnectedClanChatMsg_t : ValueType {
    
internal ulong SteamIDClanChat;
    
internal ulong SteamIDUser;
    
internal int MessageID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GameConnectedClanChatMsg_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GameConnectedFriendChatMsg_t : ValueType {
    
internal ulong SteamIDUser;
    
internal int MessageID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GameConnectedFriendChatMsg_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.GameId : ValueType {
    
public ulong Value;
    public static GameId op_Implicit(ulong value);
    public static ulong op_Implicit(GameId value);
}
internal class Steamworks.Data.GameLobbyJoinRequested_t : ValueType {
    
internal ulong SteamIDLobby;
    
internal ulong SteamIDFriend;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GameLobbyJoinRequested_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GameOverlayActivated_t : ValueType {
    
internal byte Active;
    
internal bool UserInitiated;
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GameOverlayActivated_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GamepadTextInputDismissed_t : ValueType {
    
internal bool Submitted;
    
internal UInt32 SubmittedText;
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GamepadTextInputDismissed_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GameRichPresenceJoinRequested_t : ValueType {
    
internal ulong SteamIDFriend;
    
internal Byte[] Connect;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GameRichPresenceJoinRequested_t();
    internal string ConnectUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GameServerChangeRequested_t : ValueType {
    
internal Byte[] Server;
    
internal Byte[] Password;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GameServerChangeRequested_t();
    internal string ServerUTF8();
    internal string PasswordUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.gameserveritem_t : ValueType {
    
internal servernetadr_t NetAdr;
    
internal int Ping;
    
internal bool HadSuccessfulResponse;
    
internal bool DoNotRefresh;
    
internal Byte[] GameDir;
    
internal Byte[] Map;
    
internal Byte[] GameDescription;
    
internal UInt32 AppID;
    
internal int Players;
    
internal int MaxPlayers;
    
internal int BotPlayers;
    
internal bool Password;
    
internal bool Secure;
    
internal UInt32 TimeLastPlayed;
    
internal int ServerVersion;
    
internal Byte[] ServerName;
    
internal Byte[] GameTags;
    
internal ulong SteamID;
    internal static void InternalConstruct(gameserveritem_t& self);
    internal static Utf8StringPointer InternalGetName(gameserveritem_t& self);
    internal static void InternalSetName(gameserveritem_t& self, string pName);
    internal string GameDirUTF8();
    internal string MapUTF8();
    internal string GameDescriptionUTF8();
    internal string ServerNameUTF8();
    internal string GameTagsUTF8();
}
internal class Steamworks.Data.GameWebCallback_t : ValueType {
    
internal Byte[] URL;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GameWebCallback_t();
    internal string URLUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GetAppDependenciesResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal AppId[] GAppIDs;
    
internal UInt32 NumAppDependencies;
    
internal UInt32 TotalNumAppDependencies;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GetAppDependenciesResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GetAuthSessionTicketResponse_t : ValueType {
    
internal UInt32 AuthTicket;
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GetAuthSessionTicketResponse_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GetOPFSettingsResult_t : ValueType {
    
internal Result Result;
    
internal AppId VideoAppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GetOPFSettingsResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GetTicketForWebApiResponse_t : ValueType {
    
internal UInt32 AuthTicket;
    
internal Result Result;
    
internal int Ticket;
    
internal Byte[] GubTicket;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GetTicketForWebApiResponse_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GetUserItemVoteResult_t : ValueType {
    
internal PublishedFileId PublishedFileId;
    
internal Result Result;
    
internal bool VotedUp;
    
internal bool VotedDown;
    
internal bool VoteSkipped;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GetUserItemVoteResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GetVideoURLResult_t : ValueType {
    
internal Result Result;
    
internal AppId VideoAppID;
    
internal Byte[] URL;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GetVideoURLResult_t();
    internal string URLUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GlobalAchievementPercentagesReady_t : ValueType {
    
internal ulong GameID;
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GlobalAchievementPercentagesReady_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GlobalStatsReceived_t : ValueType {
    
internal ulong GameID;
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GlobalStatsReceived_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSClientAchievementStatus_t : ValueType {
    
internal ulong SteamID;
    
internal Byte[] PchAchievement;
    
internal bool Unlocked;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSClientAchievementStatus_t();
    internal string PchAchievementUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSClientApprove_t : ValueType {
    
internal ulong SteamID;
    
internal ulong OwnerSteamID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSClientApprove_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSClientDeny_t : ValueType {
    
internal ulong SteamID;
    
internal DenyReason DenyReason;
    
internal Byte[] OptionalText;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSClientDeny_t();
    internal string OptionalTextUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSClientGroupStatus_t : ValueType {
    
internal ulong SteamIDUser;
    
internal ulong SteamIDGroup;
    
internal bool Member;
    
internal bool Officer;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSClientGroupStatus_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSClientKick_t : ValueType {
    
internal ulong SteamID;
    
internal DenyReason DenyReason;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSClientKick_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSGameplayStats_t : ValueType {
    
internal Result Result;
    
internal int Rank;
    
internal UInt32 TotalConnects;
    
internal UInt32 TotalMinutesPlayed;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSGameplayStats_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSPolicyResponse_t : ValueType {
    
internal byte Secure;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSPolicyResponse_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSReputation_t : ValueType {
    
internal Result Result;
    
internal UInt32 ReputationScore;
    
internal bool Banned;
    
internal UInt32 BannedIP;
    
internal ushort BannedPort;
    
internal ulong BannedGameID;
    
internal UInt32 BanExpires;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSReputation_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSStatsReceived_t : ValueType {
    
internal Result Result;
    
internal ulong SteamIDUser;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSStatsReceived_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSStatsStored_t : ValueType {
    
internal Result Result;
    
internal ulong SteamIDUser;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSStatsStored_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.GSStatsUnloaded_t : ValueType {
    
internal ulong SteamIDUser;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static GSStatsUnloaded_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HAuthTicket : ValueType {
    
public UInt32 Value;
    public static HAuthTicket op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(HAuthTicket value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(HAuthTicket p);
    public static bool op_Equality(HAuthTicket a, HAuthTicket b);
    public static bool op_Inequality(HAuthTicket a, HAuthTicket b);
    public sealed virtual int CompareTo(HAuthTicket other);
}
internal class Steamworks.Data.HHTMLBrowser : ValueType {
    
public UInt32 Value;
    public static HHTMLBrowser op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(HHTMLBrowser value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(HHTMLBrowser p);
    public static bool op_Equality(HHTMLBrowser a, HHTMLBrowser b);
    public static bool op_Inequality(HHTMLBrowser a, HHTMLBrowser b);
    public sealed virtual int CompareTo(HHTMLBrowser other);
}
internal class Steamworks.Data.HServerListRequest : ValueType {
    
public IntPtr Value;
    public static HServerListRequest op_Implicit(IntPtr value);
    public static IntPtr op_Implicit(HServerListRequest value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(HServerListRequest p);
    public static bool op_Equality(HServerListRequest a, HServerListRequest b);
    public static bool op_Inequality(HServerListRequest a, HServerListRequest b);
    public sealed virtual int CompareTo(HServerListRequest other);
}
internal class Steamworks.Data.HServerQuery : ValueType {
    
public int Value;
    public static HServerQuery op_Implicit(int value);
    public static int op_Implicit(HServerQuery value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(HServerQuery p);
    public static bool op_Equality(HServerQuery a, HServerQuery b);
    public static bool op_Inequality(HServerQuery a, HServerQuery b);
    public sealed virtual int CompareTo(HServerQuery other);
}
internal class Steamworks.Data.HSteamNetPollGroup : ValueType {
    
public UInt32 Value;
    public static HSteamNetPollGroup op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(HSteamNetPollGroup value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(HSteamNetPollGroup p);
    public static bool op_Equality(HSteamNetPollGroup a, HSteamNetPollGroup b);
    public static bool op_Inequality(HSteamNetPollGroup a, HSteamNetPollGroup b);
    public sealed virtual int CompareTo(HSteamNetPollGroup other);
}
internal class Steamworks.Data.HSteamPipe : ValueType {
    
public int Value;
    public static HSteamPipe op_Implicit(int value);
    public static int op_Implicit(HSteamPipe value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(HSteamPipe p);
    public static bool op_Equality(HSteamPipe a, HSteamPipe b);
    public static bool op_Inequality(HSteamPipe a, HSteamPipe b);
    public sealed virtual int CompareTo(HSteamPipe other);
}
internal class Steamworks.Data.HSteamUser : ValueType {
    
public int Value;
    public static HSteamUser op_Implicit(int value);
    public static int op_Implicit(HSteamUser value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(HSteamUser p);
    public static bool op_Equality(HSteamUser a, HSteamUser b);
    public static bool op_Inequality(HSteamUser a, HSteamUser b);
    public sealed virtual int CompareTo(HSteamUser other);
}
internal class Steamworks.Data.HTML_BrowserReady_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_BrowserReady_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_BrowserRestarted_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal UInt32 UnOldBrowserHandle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_BrowserRestarted_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_CanGoBackAndForward_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal bool BCanGoBack;
    
internal bool BCanGoForward;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_CanGoBackAndForward_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_ChangedTitle_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchTitle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_ChangedTitle_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_CloseBrowser_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_CloseBrowser_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_FileOpenDialog_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchTitle;
    
internal string PchInitialFile;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_FileOpenDialog_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_FinishedRequest_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchURL;
    
internal string PchPageTitle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_FinishedRequest_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_HideToolTip_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_HideToolTip_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_HorizontalScroll_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal UInt32 UnScrollMax;
    
internal UInt32 UnScrollCurrent;
    
internal float FlPageScale;
    
internal bool BVisible;
    
internal UInt32 UnPageSize;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_HorizontalScroll_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_JSAlert_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchMessage;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_JSAlert_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_JSConfirm_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchMessage;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_JSConfirm_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_LinkAtPosition_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal UInt32 X;
    
internal UInt32 Y;
    
internal string PchURL;
    
internal bool BInput;
    
internal bool BLiveLink;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_LinkAtPosition_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_NeedsPaint_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PBGRA;
    
internal UInt32 UnWide;
    
internal UInt32 UnTall;
    
internal UInt32 UnUpdateX;
    
internal UInt32 UnUpdateY;
    
internal UInt32 UnUpdateWide;
    
internal UInt32 UnUpdateTall;
    
internal UInt32 UnScrollX;
    
internal UInt32 UnScrollY;
    
internal float FlPageScale;
    
internal UInt32 UnPageSerial;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_NeedsPaint_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_NewWindow_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchURL;
    
internal UInt32 UnX;
    
internal UInt32 UnY;
    
internal UInt32 UnWide;
    
internal UInt32 UnTall;
    
internal UInt32 UnNewWindow_BrowserHandle_IGNORE;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_NewWindow_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_OpenLinkInNewTab_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchURL;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_OpenLinkInNewTab_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_SearchResults_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal UInt32 UnResults;
    
internal UInt32 UnCurrentMatch;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_SearchResults_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_SetCursor_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal UInt32 EMouseCursor;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_SetCursor_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_ShowToolTip_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchMsg;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_ShowToolTip_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_StartRequest_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchURL;
    
internal string PchTarget;
    
internal string PchPostData;
    
internal bool BIsRedirect;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_StartRequest_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_StatusText_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchMsg;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_StatusText_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_UpdateToolTip_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchMsg;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_UpdateToolTip_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_URLChanged_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal string PchURL;
    
internal string PchPostData;
    
internal bool BIsRedirect;
    
internal string PchPageTitle;
    
internal bool BNewNavigation;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_URLChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTML_VerticalScroll_t : ValueType {
    
internal UInt32 UnBrowserHandle;
    
internal UInt32 UnScrollMax;
    
internal UInt32 UnScrollCurrent;
    
internal float FlPageScale;
    
internal bool BVisible;
    
internal UInt32 UnPageSize;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTML_VerticalScroll_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTTPCookieContainerHandle : ValueType {
    
public UInt32 Value;
    public static HTTPCookieContainerHandle op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(HTTPCookieContainerHandle value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(HTTPCookieContainerHandle p);
    public static bool op_Equality(HTTPCookieContainerHandle a, HTTPCookieContainerHandle b);
    public static bool op_Inequality(HTTPCookieContainerHandle a, HTTPCookieContainerHandle b);
    public sealed virtual int CompareTo(HTTPCookieContainerHandle other);
}
internal class Steamworks.Data.HTTPRequestCompleted_t : ValueType {
    
internal UInt32 Request;
    
internal ulong ContextValue;
    
internal bool RequestSuccessful;
    
internal HTTPStatusCode StatusCode;
    
internal UInt32 BodySize;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTTPRequestCompleted_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTTPRequestDataReceived_t : ValueType {
    
internal UInt32 Request;
    
internal ulong ContextValue;
    
internal UInt32 COffset;
    
internal UInt32 CBytesReceived;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTTPRequestDataReceived_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.HTTPRequestHandle : ValueType {
    
public UInt32 Value;
    public static HTTPRequestHandle op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(HTTPRequestHandle value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(HTTPRequestHandle p);
    public static bool op_Equality(HTTPRequestHandle a, HTTPRequestHandle b);
    public static bool op_Inequality(HTTPRequestHandle a, HTTPRequestHandle b);
    public sealed virtual int CompareTo(HTTPRequestHandle other);
}
internal class Steamworks.Data.HTTPRequestHeadersReceived_t : ValueType {
    
internal UInt32 Request;
    
internal ulong ContextValue;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static HTTPRequestHeadersReceived_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.Image : ValueType {
    
public UInt32 Width;
    
public UInt32 Height;
    
public Byte[] Data;
    public Color GetPixel(int x, int y);
    public virtual string ToString();
}
internal class Steamworks.Data.InputActionSetHandle_t : ValueType {
    
public ulong Value;
    public static InputActionSetHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(InputActionSetHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(InputActionSetHandle_t p);
    public static bool op_Equality(InputActionSetHandle_t a, InputActionSetHandle_t b);
    public static bool op_Inequality(InputActionSetHandle_t a, InputActionSetHandle_t b);
    public sealed virtual int CompareTo(InputActionSetHandle_t other);
}
internal class Steamworks.Data.InputAnalogActionHandle_t : ValueType {
    
public ulong Value;
    public static InputAnalogActionHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(InputAnalogActionHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(InputAnalogActionHandle_t p);
    public static bool op_Equality(InputAnalogActionHandle_t a, InputAnalogActionHandle_t b);
    public static bool op_Inequality(InputAnalogActionHandle_t a, InputAnalogActionHandle_t b);
    public sealed virtual int CompareTo(InputAnalogActionHandle_t other);
}
internal class Steamworks.Data.InputDigitalActionHandle_t : ValueType {
    
public ulong Value;
    public static InputDigitalActionHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(InputDigitalActionHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(InputDigitalActionHandle_t p);
    public static bool op_Equality(InputDigitalActionHandle_t a, InputDigitalActionHandle_t b);
    public static bool op_Inequality(InputDigitalActionHandle_t a, InputDigitalActionHandle_t b);
    public sealed virtual int CompareTo(InputDigitalActionHandle_t other);
}
internal class Steamworks.Data.InputHandle_t : ValueType {
    
public ulong Value;
    public static InputHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(InputHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(InputHandle_t p);
    public static bool op_Equality(InputHandle_t a, InputHandle_t b);
    public static bool op_Inequality(InputHandle_t a, InputHandle_t b);
    public sealed virtual int CompareTo(InputHandle_t other);
}
internal class Steamworks.Data.InputMotionDataV2_t : ValueType {
    
internal float DriftCorrectedQuatX;
    
internal float DriftCorrectedQuatY;
    
internal float DriftCorrectedQuatZ;
    
internal float DriftCorrectedQuatW;
    
internal float SensorFusionQuatX;
    
internal float SensorFusionQuatY;
    
internal float SensorFusionQuatZ;
    
internal float SensorFusionQuatW;
    
internal float DeferredSensorFusionQuatX;
    
internal float DeferredSensorFusionQuatY;
    
internal float DeferredSensorFusionQuatZ;
    
internal float DeferredSensorFusionQuatW;
    
internal float GravityX;
    
internal float GravityY;
    
internal float GravityZ;
    
internal float DegreesPerSecondX;
    
internal float DegreesPerSecondY;
    
internal float DegreesPerSecondZ;
}
public class Steamworks.Data.InventoryDefId : ValueType {
    
public int Value;
    public static InventoryDefId op_Implicit(int value);
    public static int op_Implicit(InventoryDefId value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(InventoryDefId p);
    public static bool op_Equality(InventoryDefId a, InventoryDefId b);
    public static bool op_Inequality(InventoryDefId a, InventoryDefId b);
    public sealed virtual int CompareTo(InventoryDefId other);
}
public class Steamworks.Data.InventoryItemId : ValueType {
    
public ulong Value;
    public static InventoryItemId op_Implicit(ulong value);
    public static ulong op_Implicit(InventoryItemId value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(InventoryItemId p);
    public static bool op_Equality(InventoryItemId a, InventoryItemId b);
    public static bool op_Inequality(InventoryItemId a, InventoryItemId b);
    public sealed virtual int CompareTo(InventoryItemId other);
}
public class Steamworks.Data.InventoryPurchaseResult : ValueType {
    
public Result Result;
    
public ulong OrderID;
    
public ulong TransID;
}
internal class Steamworks.Data.IPCFailure_t : ValueType {
    
internal byte FailureType;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static IPCFailure_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.IPCountry_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static IPCountry_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.ItemInstalled_t : ValueType {
    
internal AppId AppID;
    
internal PublishedFileId PublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ItemInstalled_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.JoinClanChatRoomCompletionResult_t : ValueType {
    
internal ulong SteamIDClanChat;
    
internal RoomEnter ChatRoomEnterResponse;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static JoinClanChatRoomCompletionResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.JoinPartyCallback_t : ValueType {
    
internal Result Result;
    
internal ulong BeaconID;
    
internal ulong SteamIDBeaconOwner;
    
internal Byte[] ConnectString;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static JoinPartyCallback_t();
    internal string ConnectStringUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.Leaderboard : ValueType {
    
internal SteamLeaderboard_t Id;
    
private static Int32[] detailsBuffer;
    
private static Int32[] noDetails;
    
public string Name { get; }
    
public LeaderboardSort Sort { get; }
    
public LeaderboardDisplay Display { get; }
    
public int EntryCount { get; }
    private static Leaderboard();
    public string get_Name();
    public LeaderboardSort get_Sort();
    public LeaderboardDisplay get_Display();
    public int get_EntryCount();
    [AsyncStateMachineAttribute("Steamworks.Data.Leaderboard/<ReplaceScore>d__11")]
public Task`1<Nullable`1<LeaderboardUpdate>> ReplaceScore(int score, Int32[] details);
    [AsyncStateMachineAttribute("Steamworks.Data.Leaderboard/<SubmitScoreAsync>d__12")]
public Task`1<Nullable`1<LeaderboardUpdate>> SubmitScoreAsync(int score, Int32[] details);
    [AsyncStateMachineAttribute("Steamworks.Data.Leaderboard/<AttachUgc>d__13")]
public Task`1<Result> AttachUgc(Ugc file);
    [AsyncStateMachineAttribute("Steamworks.Data.Leaderboard/<GetScoresForUsersAsync>d__14")]
public Task`1<LeaderboardEntry[]> GetScoresForUsersAsync(SteamId[] users);
    [AsyncStateMachineAttribute("Steamworks.Data.Leaderboard/<GetScoresAsync>d__15")]
public Task`1<LeaderboardEntry[]> GetScoresAsync(int count, int offset);
    [AsyncStateMachineAttribute("Steamworks.Data.Leaderboard/<GetScoresAroundUserAsync>d__16")]
public Task`1<LeaderboardEntry[]> GetScoresAroundUserAsync(int start, int end);
    [AsyncStateMachineAttribute("Steamworks.Data.Leaderboard/<GetScoresFromFriendsAsync>d__17")]
public Task`1<LeaderboardEntry[]> GetScoresFromFriendsAsync();
    [AsyncStateMachineAttribute("Steamworks.Data.Leaderboard/<LeaderboardResultToEntries>d__18")]
internal Task`1<LeaderboardEntry[]> LeaderboardResultToEntries(LeaderboardScoresDownloaded_t r);
    [AsyncStateMachineAttribute("Steamworks.Data.Leaderboard/<WaitForUserNames>d__19")]
internal static Task WaitForUserNames(LeaderboardEntry[] entries);
}
public enum Steamworks.Data.LeaderboardDisplay : Enum {
    
public int value__;
    
public static LeaderboardDisplay Numeric;
    
public static LeaderboardDisplay TimeSeconds;
    
public static LeaderboardDisplay TimeMilliSeconds;
}
public class Steamworks.Data.LeaderboardEntry : ValueType {
    
public Friend User;
    
public int GlobalRank;
    
public int Score;
    
public Int32[] Details;
    internal static LeaderboardEntry From(LeaderboardEntry_t e, Int32[] detailsBuffer);
}
internal class Steamworks.Data.LeaderboardEntry_t : ValueType {
    
internal ulong SteamIDUser;
    
internal int GlobalRank;
    
internal int Score;
    
internal int CDetails;
    
internal ulong UGC;
}
internal class Steamworks.Data.LeaderboardFindResult_t : ValueType {
    
internal ulong SteamLeaderboard;
    
internal byte LeaderboardFound;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LeaderboardFindResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LeaderboardScoresDownloaded_t : ValueType {
    
internal ulong SteamLeaderboard;
    
internal ulong SteamLeaderboardEntries;
    
internal int CEntryCount;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LeaderboardScoresDownloaded_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LeaderboardScoreUploaded_t : ValueType {
    
internal byte Success;
    
internal ulong SteamLeaderboard;
    
internal int Score;
    
internal byte ScoreChanged;
    
internal int GlobalRankNew;
    
internal int GlobalRankPrevious;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LeaderboardScoreUploaded_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public enum Steamworks.Data.LeaderboardSort : Enum {
    
public int value__;
    
public static LeaderboardSort Ascending;
    
public static LeaderboardSort Descending;
}
internal class Steamworks.Data.LeaderboardUGCSet_t : ValueType {
    
internal Result Result;
    
internal ulong SteamLeaderboard;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LeaderboardUGCSet_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.LeaderboardUpdate : ValueType {
    
public int Score;
    
public bool Changed;
    
public int NewGlobalRank;
    
public int OldGlobalRank;
    
public int RankChange { get; }
    public int get_RankChange();
    internal static LeaderboardUpdate From(LeaderboardScoreUploaded_t e);
}
internal class Steamworks.Data.LicensesUpdated_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LicensesUpdated_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.Lobby : ValueType {
    [CompilerGeneratedAttribute]

private SteamId <Id>k__BackingField;
    
public SteamId Id { get; internal set; }
    
public int MemberCount { get; }
    
public IEnumerable`1<Friend> Members { get; }
    
public IEnumerable`1<KeyValuePair`2<string, string>> Data { get; }
    
public int MaxMembers { get; public set; }
    
public Friend Owner { get; public set; }
    public Lobby(SteamId id);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SteamId get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(SteamId value);
    [AsyncStateMachineAttribute("Steamworks.Data.Lobby/<Join>d__5")]
public Task`1<RoomEnter> Join();
    public void Leave();
    public bool InviteFriend(SteamId steamid);
    public int get_MemberCount();
    [IteratorStateMachineAttribute("Steamworks.Data.Lobby/<get_Members>d__11")]
public IEnumerable`1<Friend> get_Members();
    public string GetData(string key);
    public bool SetData(string key, string value);
    public bool DeleteData(string key);
    [IteratorStateMachineAttribute("Steamworks.Data.Lobby/<get_Data>d__16")]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Data();
    public string GetMemberData(Friend member, string key);
    public void SetMemberData(string key, string value);
    public bool SendChatString(string message);
    public bool SendChatBytes(Byte[] data);
    public bool SendChatBytesUnsafe(Byte* ptr, int length);
    public bool Refresh();
    public int get_MaxMembers();
    public void set_MaxMembers(int value);
    public bool SetPublic();
    public bool SetPrivate();
    public bool SetInvisible();
    public bool SetFriendsOnly();
    public bool SetJoinable(bool b);
    public void SetGameServer(SteamId steamServer);
    public void SetGameServer(string ip, ushort port);
    public bool GetGameServer(UInt32& ip, UInt16& port, SteamId& serverId);
    public Friend get_Owner();
    public void set_Owner(Friend value);
    public bool IsOwnedBy(SteamId k);
}
internal class Steamworks.Data.LobbyChatMsg_t : ValueType {
    
internal ulong SteamIDLobby;
    
internal ulong SteamIDUser;
    
internal byte ChatEntryType;
    
internal UInt32 ChatID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LobbyChatMsg_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LobbyChatUpdate_t : ValueType {
    
internal ulong SteamIDLobby;
    
internal ulong SteamIDUserChanged;
    
internal ulong SteamIDMakingChange;
    
internal UInt32 GfChatMemberStateChange;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LobbyChatUpdate_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LobbyCreated_t : ValueType {
    
internal Result Result;
    
internal ulong SteamIDLobby;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LobbyCreated_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LobbyDataUpdate_t : ValueType {
    
internal ulong SteamIDLobby;
    
internal ulong SteamIDMember;
    
internal byte Success;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LobbyDataUpdate_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LobbyEnter_t : ValueType {
    
internal ulong SteamIDLobby;
    
internal UInt32 GfChatPermissions;
    
internal bool Locked;
    
internal UInt32 EChatRoomEnterResponse;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LobbyEnter_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LobbyGameCreated_t : ValueType {
    
internal ulong SteamIDLobby;
    
internal ulong SteamIDGameServer;
    
internal UInt32 IP;
    
internal ushort Port;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LobbyGameCreated_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LobbyInvite_t : ValueType {
    
internal ulong SteamIDUser;
    
internal ulong SteamIDLobby;
    
internal ulong GameID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LobbyInvite_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LobbyKicked_t : ValueType {
    
internal ulong SteamIDLobby;
    
internal ulong SteamIDAdmin;
    
internal byte KickedDueToDisconnect;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LobbyKicked_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.LobbyMatchList_t : ValueType {
    
internal UInt32 LobbiesMatching;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LobbyMatchList_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.LobbyQuery : ValueType {
    
internal Nullable`1<LobbyDistanceFilter> distance;
    
internal Dictionary`2<string, string> stringFilters;
    
internal List`1<NumericalFilter> numericalFilters;
    
internal Dictionary`2<string, int> nearValFilters;
    
internal Nullable`1<int> slotsAvailable;
    
internal Nullable`1<int> maxResults;
    public LobbyQuery FilterDistanceClose();
    public LobbyQuery FilterDistanceFar();
    public LobbyQuery FilterDistanceWorldwide();
    public LobbyQuery WithKeyValue(string key, string value);
    public LobbyQuery WithLower(string key, int value);
    public LobbyQuery WithHigher(string key, int value);
    public LobbyQuery WithEqual(string key, int value);
    public LobbyQuery WithNotEqual(string key, int value);
    internal void AddNumericalFilter(string key, int value, LobbyComparison compare);
    public LobbyQuery OrderByNear(string key, int value);
    public LobbyQuery WithSlotsAvailable(int minSlots);
    public LobbyQuery WithMaxResults(int max);
    private void ApplyFilters();
    [AsyncStateMachineAttribute("Steamworks.Data.LobbyQuery/<RequestAsync>d__19")]
public Task`1<Lobby[]> RequestAsync();
}
internal class Steamworks.Data.LowBatteryPower_t : ValueType {
    
internal byte MinutesBatteryLeft;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static LowBatteryPower_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MarketEligibilityResponse_t : ValueType {
    
internal bool Allowed;
    
internal MarketNotAllowedReasonFlags NotAllowedReason;
    
internal UInt32 TAllowedAtTime;
    
internal int CdaySteamGuardRequiredDays;
    
internal int CdayNewDeviceCooldown;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MarketEligibilityResponse_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MatchMakingKeyValuePair : ValueType {
    
internal string Key;
    
internal string Value;
    internal static void InternalConstruct(MatchMakingKeyValuePair& self);
}
internal class Steamworks.Data.MicroTxnAuthorizationResponse_t : ValueType {
    
internal UInt32 AppID;
    
internal ulong OrderID;
    
internal byte Authorized;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MicroTxnAuthorizationResponse_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerRemoteToFront_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerRemoteToFront_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerRemoteWillActivate_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerRemoteWillActivate_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerRemoteWillDeactivate_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerRemoteWillDeactivate_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerSelectsPlaylistEntry_t : ValueType {
    
internal int NID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerSelectsPlaylistEntry_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerSelectsQueueEntry_t : ValueType {
    
internal int NID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerSelectsQueueEntry_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerWantsLooped_t : ValueType {
    
internal bool Looped;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerWantsLooped_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerWantsPause_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerWantsPause_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerWantsPlay_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerWantsPlay_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerWantsPlayingRepeatStatus_t : ValueType {
    
internal int PlayingRepeatStatus;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerWantsPlayingRepeatStatus_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerWantsPlayNext_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerWantsPlayNext_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerWantsPlayPrevious_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerWantsPlayPrevious_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerWantsShuffled_t : ValueType {
    
internal bool Shuffled;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerWantsShuffled_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerWantsVolume_t : ValueType {
    
internal float NewVolume;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerWantsVolume_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.MusicPlayerWillQuit_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static MusicPlayerWillQuit_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.NetAddress : ValueType {
    
internal IPV4 ip;
    
internal ushort port;
    
public ushort Port { get; }
    
public static NetAddress Cleared { get; }
    
public bool IsIPv6AllZeros { get; }
    
public bool IsIPv4 { get; }
    
public bool IsFakeIPv4 { get; }
    
public bool IsLocalHost { get; }
    
public IPAddress Address { get; }
    internal static void InternalClear(NetAddress& self);
    internal static bool InternalIsIPv6AllZeros(NetAddress& self);
    internal static void InternalSetIPv6(NetAddress& self, Byte& ipv6, ushort nPort);
    internal static void InternalSetIPv4(NetAddress& self, UInt32 nIP, ushort nPort);
    internal static bool InternalIsIPv4(NetAddress& self);
    internal static UInt32 InternalGetIPv4(NetAddress& self);
    internal static void InternalSetIPv6LocalHost(NetAddress& self, ushort nPort);
    internal static bool InternalIsLocalHost(NetAddress& self);
    internal static void InternalToString(NetAddress& self, IntPtr buf, UInt32 cbBuf, bool bWithPort);
    internal static bool InternalParseString(NetAddress& self, string pszStr);
    internal static bool InternalIsEqualTo(NetAddress& self, NetAddress& x);
    internal static SteamNetworkingFakeIPType InternalGetFakeIPType(NetAddress& self);
    internal static bool InternalIsFakeIP(NetAddress& self);
    public ushort get_Port();
    public static NetAddress AnyIp(ushort port);
    public static NetAddress LocalHost(ushort port);
    public static NetAddress From(string addrStr, ushort port);
    public static NetAddress From(IPAddress address, ushort port);
    public static NetAddress get_Cleared();
    public bool get_IsIPv6AllZeros();
    public bool get_IsIPv4();
    public bool get_IsFakeIPv4();
    public bool get_IsLocalHost();
    public IPAddress get_Address();
    public virtual string ToString();
}
internal class Steamworks.Data.NetErrorMessage : ValueType {
    [FixedBufferAttribute("System.Char", "1024")]

public <Value>e__FixedBuffer Value;
}
public class Steamworks.Data.NetIdentity : ValueType {
    
internal IdentityType type;
    
internal int size;
    
internal ulong steamid;
    
internal NetAddress netaddress;
    
public static NetIdentity LocalHost { get; }
    
public bool IsSteamId { get; }
    
public bool IsIpAddress { get; }
    
public bool IsLocalHost { get; }
    
public SteamId SteamId { get; }
    
public NetAddress Address { get; }
    internal static void InternalClear(NetIdentity& self);
    internal static bool InternalIsInvalid(NetIdentity& self);
    internal static void InternalSetSteamID(NetIdentity& self, SteamId steamID);
    internal static SteamId InternalGetSteamID(NetIdentity& self);
    internal static void InternalSetSteamID64(NetIdentity& self, ulong steamID);
    internal static ulong InternalGetSteamID64(NetIdentity& self);
    internal static bool InternalSetXboxPairwiseID(NetIdentity& self, string pszString);
    internal static Utf8StringPointer InternalGetXboxPairwiseID(NetIdentity& self);
    internal static void InternalSetPSNID(NetIdentity& self, ulong id);
    internal static ulong InternalGetPSNID(NetIdentity& self);
    internal static void InternalSetStadiaID(NetIdentity& self, ulong id);
    internal static ulong InternalGetStadiaID(NetIdentity& self);
    internal static void InternalSetIPAddr(NetIdentity& self, NetAddress& addr);
    internal static IntPtr InternalGetIPAddr(NetIdentity& self);
    internal static void InternalSetIPv4Addr(NetIdentity& self, UInt32 nIPv4, ushort nPort);
    internal static UInt32 InternalGetIPv4(NetIdentity& self);
    internal static SteamNetworkingFakeIPType InternalGetFakeIPType(NetIdentity& self);
    internal static bool InternalIsFakeIP(NetIdentity& self);
    internal static void InternalSetLocalHost(NetIdentity& self);
    internal static bool InternalIsLocalHost(NetIdentity& self);
    internal static bool InternalSetGenericString(NetIdentity& self, string pszString);
    internal static Utf8StringPointer InternalGetGenericString(NetIdentity& self);
    internal static bool InternalSetGenericBytes(NetIdentity& self, IntPtr data, UInt32 cbLen);
    internal static byte InternalGetGenericBytes(NetIdentity& self, Int32& cbLen);
    internal static bool InternalIsEqualTo(NetIdentity& self, NetIdentity& x);
    internal static void InternalToString(NetIdentity& self, IntPtr buf, UInt32 cbBuf);
    internal static bool InternalParseString(NetIdentity& self, string pszStr);
    public static NetIdentity get_LocalHost();
    public bool get_IsSteamId();
    public bool get_IsIpAddress();
    public bool get_IsLocalHost();
    public static NetIdentity op_Implicit(SteamId value);
    public static NetIdentity op_Implicit(NetAddress address);
    public static SteamId op_Implicit(NetIdentity value);
    public SteamId get_SteamId();
    public NetAddress get_Address();
    public virtual string ToString();
}
internal class Steamworks.Data.NetKeyValue : ValueType {
    
internal NetConfig Value;
    
internal NetConfigType DataType;
    
internal long Int64Value;
    
internal int Int32Value;
    
internal float FloatValue;
    
internal IntPtr PointerValue;
    internal static void InternalSetInt32(NetKeyValue& self, NetConfig eVal, int data);
    internal static void InternalSetInt64(NetKeyValue& self, NetConfig eVal, long data);
    internal static void InternalSetFloat(NetKeyValue& self, NetConfig eVal, float data);
    internal static void InternalSetPtr(NetKeyValue& self, NetConfig eVal, IntPtr data);
    internal static void InternalSetString(NetKeyValue& self, NetConfig eVal, string data);
}
internal class Steamworks.Data.NetMsg : ValueType {
    
internal IntPtr DataPtr;
    
internal int DataSize;
    
internal Connection Connection;
    
internal NetIdentity Identity;
    
internal long ConnectionUserData;
    
internal long RecvTime;
    
internal long MessageNumber;
    
internal IntPtr FreeDataPtr;
    
internal IntPtr ReleasePtr;
    
internal int Channel;
    
internal SendType Flags;
    
internal long UserData;
    
internal ushort IdxLane;
    
internal ushort _pad1__;
    internal static void InternalRelease(NetMsg* self);
}
public class Steamworks.Data.NetPingLocation : ValueType {
    public static Nullable`1<NetPingLocation> TryParseFromString(string str);
    public virtual string ToString();
    public int EstimatePingTo(NetPingLocation target);
}
internal class Steamworks.Data.NewUrlLaunchParameters_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static NewUrlLaunchParameters_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.NumberOfCurrentPlayers_t : ValueType {
    
internal byte Success;
    
internal int CPlayers;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static NumberOfCurrentPlayers_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.NumericalFilter : ValueType {
    [CompilerGeneratedAttribute]

private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Value>k__BackingField;
    [CompilerGeneratedAttribute]

private LobbyComparison <Comparer>k__BackingField;
    
public string Key { get; internal set; }
    
public int Value { get; internal set; }
    
public LobbyComparison Comparer { get; internal set; }
    internal NumericalFilter(string k, int v, LobbyComparison c);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public LobbyComparison get_Comparer();
    [CompilerGeneratedAttribute]
internal void set_Comparer(LobbyComparison value);
}
public class Steamworks.Data.OutgoingPacket : ValueType {
    [CompilerGeneratedAttribute]

private UInt32 <Address>k__BackingField;
    [CompilerGeneratedAttribute]

private ushort <Port>k__BackingField;
    [CompilerGeneratedAttribute]

private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Size>k__BackingField;
    
public UInt32 Address { get; internal set; }
    
public ushort Port { get; internal set; }
    
public Byte[] Data { get; internal set; }
    
public int Size { get; internal set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Address();
    [CompilerGeneratedAttribute]
internal void set_Address(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ushort get_Port();
    [CompilerGeneratedAttribute]
internal void set_Port(ushort value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(Byte[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
internal void set_Size(int value);
}
internal class Steamworks.Data.OverlayBrowserProtocolNavigation_t : ValueType {
    
internal Byte[] RgchURI;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static OverlayBrowserProtocolNavigation_t();
    internal string RgchURIUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.P2Packet : ValueType {
    
public SteamId SteamId;
    
public Byte[] Data;
}
internal class Steamworks.Data.P2PSessionConnectFail_t : ValueType {
    
internal ulong SteamIDRemote;
    
internal byte P2PSessionError;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static P2PSessionConnectFail_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.P2PSessionRequest_t : ValueType {
    
internal ulong SteamIDRemote;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static P2PSessionRequest_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.P2PSessionState_t : ValueType {
    
internal byte ConnectionActive;
    
internal byte Connecting;
    
internal byte P2PSessionError;
    
internal byte UsingRelay;
    
internal int BytesQueuedForSend;
    
internal int PacketsQueuedForSend;
    
internal UInt32 RemoteIP;
    
internal ushort RemotePort;
}
internal class Steamworks.Data.PartyBeaconID_t : ValueType {
    
public ulong Value;
    public static PartyBeaconID_t op_Implicit(ulong value);
    public static ulong op_Implicit(PartyBeaconID_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(PartyBeaconID_t p);
    public static bool op_Equality(PartyBeaconID_t a, PartyBeaconID_t b);
    public static bool op_Inequality(PartyBeaconID_t a, PartyBeaconID_t b);
    public sealed virtual int CompareTo(PartyBeaconID_t other);
}
internal class Steamworks.Data.PersonaStateChange_t : ValueType {
    
internal ulong SteamID;
    
internal int ChangeFlags;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static PersonaStateChange_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.PlaybackStatusHasChanged_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static PlaybackStatusHasChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.PSNGameBootInviteResult_t : ValueType {
    
internal bool GameBootInviteExists;
    
internal ulong SteamIDLobby;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static PSNGameBootInviteResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.PublishedFileId : ValueType {
    
public ulong Value;
    public static PublishedFileId op_Implicit(ulong value);
    public static ulong op_Implicit(PublishedFileId value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(PublishedFileId p);
    public static bool op_Equality(PublishedFileId a, PublishedFileId b);
    public static bool op_Inequality(PublishedFileId a, PublishedFileId b);
    public sealed virtual int CompareTo(PublishedFileId other);
}
internal class Steamworks.Data.PublishedFileUpdateHandle_t : ValueType {
    
public ulong Value;
    public static PublishedFileUpdateHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(PublishedFileUpdateHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(PublishedFileUpdateHandle_t p);
    public static bool op_Equality(PublishedFileUpdateHandle_t a, PublishedFileUpdateHandle_t b);
    public static bool op_Inequality(PublishedFileUpdateHandle_t a, PublishedFileUpdateHandle_t b);
    public sealed virtual int CompareTo(PublishedFileUpdateHandle_t other);
}
public class Steamworks.Data.RemotePlaySession : ValueType {
    [CompilerGeneratedAttribute]

private UInt32 <Id>k__BackingField;
    
public UInt32 Id { get; public set; }
    
public bool IsValid { get; }
    
public SteamId SteamId { get; }
    
public string ClientName { get; }
    
public SteamDeviceFormFactor FormFactor { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    public virtual string ToString();
    public static RemotePlaySession op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(RemotePlaySession value);
    public bool get_IsValid();
    public SteamId get_SteamId();
    public string get_ClientName();
    public SteamDeviceFormFactor get_FormFactor();
}
internal class Steamworks.Data.RemotePlaySessionID_t : ValueType {
    
public UInt32 Value;
    public static RemotePlaySessionID_t op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(RemotePlaySessionID_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(RemotePlaySessionID_t p);
    public static bool op_Equality(RemotePlaySessionID_t a, RemotePlaySessionID_t b);
    public static bool op_Inequality(RemotePlaySessionID_t a, RemotePlaySessionID_t b);
    public sealed virtual int CompareTo(RemotePlaySessionID_t other);
}
internal class Steamworks.Data.RemoteStorageDeletePublishedFileResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageDeletePublishedFileResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageDownloadUGCResult_t : ValueType {
    
internal Result Result;
    
internal ulong File;
    
internal AppId AppID;
    
internal int SizeInBytes;
    
internal Byte[] PchFileName;
    
internal ulong SteamIDOwner;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageDownloadUGCResult_t();
    internal string PchFileNameUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageEnumeratePublishedFilesByUserActionResult_t : ValueType {
    
internal Result Result;
    
internal WorkshopFileAction Action;
    
internal int ResultsReturned;
    
internal int TotalResultCount;
    
internal PublishedFileId[] GPublishedFileId;
    
internal UInt32[] GRTimeUpdated;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageEnumeratePublishedFilesByUserActionResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageEnumerateUserPublishedFilesResult_t : ValueType {
    
internal Result Result;
    
internal int ResultsReturned;
    
internal int TotalResultCount;
    
internal PublishedFileId[] GPublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageEnumerateUserPublishedFilesResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageEnumerateUserSharedWorkshopFilesResult_t : ValueType {
    
internal Result Result;
    
internal int ResultsReturned;
    
internal int TotalResultCount;
    
internal PublishedFileId[] GPublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageEnumerateUserSharedWorkshopFilesResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageEnumerateUserSubscribedFilesResult_t : ValueType {
    
internal Result Result;
    
internal int ResultsReturned;
    
internal int TotalResultCount;
    
internal PublishedFileId[] GPublishedFileId;
    
internal UInt32[] GRTimeSubscribed;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageEnumerateUserSubscribedFilesResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageEnumerateWorkshopFilesResult_t : ValueType {
    
internal Result Result;
    
internal int ResultsReturned;
    
internal int TotalResultCount;
    
internal PublishedFileId[] GPublishedFileId;
    
internal Single[] GScore;
    
internal AppId AppId;
    
internal UInt32 StartIndex;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageEnumerateWorkshopFilesResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageFileReadAsyncComplete_t : ValueType {
    
internal ulong FileReadAsync;
    
internal Result Result;
    
internal UInt32 Offset;
    
internal UInt32 Read;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageFileReadAsyncComplete_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageFileShareResult_t : ValueType {
    
internal Result Result;
    
internal ulong File;
    
internal Byte[] Filename;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageFileShareResult_t();
    internal string FilenameUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageFileWriteAsyncComplete_t : ValueType {
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageFileWriteAsyncComplete_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageGetPublishedFileDetailsResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal AppId CreatorAppID;
    
internal AppId ConsumerAppID;
    
internal Byte[] Title;
    
internal Byte[] Description;
    
internal ulong File;
    
internal ulong PreviewFile;
    
internal ulong SteamIDOwner;
    
internal UInt32 TimeCreated;
    
internal UInt32 TimeUpdated;
    
internal RemoteStoragePublishedFileVisibility Visibility;
    
internal bool Banned;
    
internal Byte[] Tags;
    
internal bool TagsTruncated;
    
internal Byte[] PchFileName;
    
internal int FileSize;
    
internal int PreviewFileSize;
    
internal Byte[] URL;
    
internal WorkshopFileType FileType;
    
internal bool AcceptedForUse;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageGetPublishedFileDetailsResult_t();
    internal string TitleUTF8();
    internal string DescriptionUTF8();
    internal string TagsUTF8();
    internal string PchFileNameUTF8();
    internal string URLUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageGetPublishedItemVoteDetailsResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal int VotesFor;
    
internal int VotesAgainst;
    
internal int Reports;
    
internal float FScore;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageGetPublishedItemVoteDetailsResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageLocalFileChange_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageLocalFileChange_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStoragePublishedFileDeleted_t : ValueType {
    
internal PublishedFileId PublishedFileId;
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStoragePublishedFileDeleted_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStoragePublishedFileSubscribed_t : ValueType {
    
internal PublishedFileId PublishedFileId;
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStoragePublishedFileSubscribed_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStoragePublishedFileUnsubscribed_t : ValueType {
    
internal PublishedFileId PublishedFileId;
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStoragePublishedFileUnsubscribed_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStoragePublishedFileUpdated_t : ValueType {
    
internal PublishedFileId PublishedFileId;
    
internal AppId AppID;
    
internal ulong Unused;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStoragePublishedFileUpdated_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStoragePublishFileProgress_t : ValueType {
    
internal double DPercentFile;
    
internal bool Preview;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStoragePublishFileProgress_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStoragePublishFileResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal bool UserNeedsToAcceptWorkshopLegalAgreement;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStoragePublishFileResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageSetUserPublishedFileActionResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal WorkshopFileAction Action;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageSetUserPublishedFileActionResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageSubscribePublishedFileResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageSubscribePublishedFileResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageUnsubscribePublishedFileResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageUnsubscribePublishedFileResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageUpdatePublishedFileResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal bool UserNeedsToAcceptWorkshopLegalAgreement;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageUpdatePublishedFileResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageUpdateUserPublishedItemVoteResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageUpdateUserPublishedItemVoteResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoteStorageUserVoteDetails_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal WorkshopVote Vote;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoteStorageUserVoteDetails_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoveAppDependencyResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoveAppDependencyResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RemoveUGCDependencyResult_t : ValueType {
    
internal Result Result;
    
internal PublishedFileId PublishedFileId;
    
internal PublishedFileId ChildPublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RemoveUGCDependencyResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RequestPlayersForGameFinalResultCallback_t : ValueType {
    
internal Result Result;
    
internal ulong LSearchID;
    
internal ulong LUniqueGameID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RequestPlayersForGameFinalResultCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RequestPlayersForGameProgressCallback_t : ValueType {
    
internal Result Result;
    
internal ulong LSearchID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RequestPlayersForGameProgressCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RequestPlayersForGameResultCallback_t : ValueType {
    
internal Result Result;
    
internal ulong LSearchID;
    
internal ulong SteamIDPlayerFound;
    
internal ulong SteamIDLobby;
    
internal PlayerAcceptState_t PlayerAcceptState;
    
internal int PlayerIndex;
    
internal int TotalPlayersFound;
    
internal int TotalPlayersAcceptedGame;
    
internal int SuggestedTeamIndex;
    
internal ulong LUniqueGameID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static RequestPlayersForGameResultCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.ReservationNotificationCallback_t : ValueType {
    
internal ulong BeaconID;
    
internal ulong SteamIDJoiner;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ReservationNotificationCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.RTime32 : ValueType {
    
public UInt32 Value;
    public static RTime32 op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(RTime32 value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(RTime32 p);
    public static bool op_Equality(RTime32 a, RTime32 b);
    public static bool op_Inequality(RTime32 a, RTime32 b);
    public sealed virtual int CompareTo(RTime32 other);
}
public class Steamworks.Data.Screenshot : ValueType {
    
internal ScreenshotHandle Value;
    public bool TagUser(SteamId user);
    public bool SetLocation(string location);
    public bool TagPublishedFile(PublishedFileId file);
}
internal class Steamworks.Data.ScreenshotHandle : ValueType {
    
public UInt32 Value;
    public static ScreenshotHandle op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(ScreenshotHandle value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(ScreenshotHandle p);
    public static bool op_Equality(ScreenshotHandle a, ScreenshotHandle b);
    public static bool op_Inequality(ScreenshotHandle a, ScreenshotHandle b);
    public sealed virtual int CompareTo(ScreenshotHandle other);
}
internal class Steamworks.Data.ScreenshotReady_t : ValueType {
    
internal UInt32 Local;
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ScreenshotReady_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.ScreenshotRequested_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ScreenshotRequested_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SearchForGameProgressCallback_t : ValueType {
    
internal ulong LSearchID;
    
internal Result Result;
    
internal ulong LobbyID;
    
internal ulong SteamIDEndedSearch;
    
internal int SecondsRemainingEstimate;
    
internal int CPlayersSearching;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SearchForGameProgressCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SearchForGameResultCallback_t : ValueType {
    
internal ulong LSearchID;
    
internal Result Result;
    
internal int CountPlayersInGame;
    
internal int CountAcceptedGame;
    
internal ulong SteamIDHost;
    
internal bool FinalCallback;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SearchForGameResultCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
[FlagsAttribute]
public enum Steamworks.Data.SendType : Enum {
    
public int value__;
    
public static SendType Unreliable;
    
public static SendType NoNagle;
    
public static SendType NoDelay;
    
public static SendType Reliable;
}
public class Steamworks.Data.ServerInfo : ValueType {
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Ping>k__BackingField;
    [CompilerGeneratedAttribute]

private string <GameDir>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Map>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]

private UInt32 <AppId>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Players>k__BackingField;
    [CompilerGeneratedAttribute]

private int <MaxPlayers>k__BackingField;
    [CompilerGeneratedAttribute]

private int <BotPlayers>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Passworded>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]

private UInt32 <LastTimePlayed>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]

private string <TagString>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <SteamId>k__BackingField;
    [CompilerGeneratedAttribute]

private UInt32 <AddressRaw>k__BackingField;
    [CompilerGeneratedAttribute]

private IPAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]

private int <ConnectionPort>k__BackingField;
    [CompilerGeneratedAttribute]

private int <QueryPort>k__BackingField;
    
private String[] _tags;
    
internal static UInt32 k_unFavoriteFlagNone;
    
internal static UInt32 k_unFavoriteFlagFavorite;
    
internal static UInt32 k_unFavoriteFlagHistory;
    
public string Name { get; public set; }
    
public int Ping { get; public set; }
    
public string GameDir { get; public set; }
    
public string Map { get; public set; }
    
public string Description { get; public set; }
    
public UInt32 AppId { get; public set; }
    
public int Players { get; public set; }
    
public int MaxPlayers { get; public set; }
    
public int BotPlayers { get; public set; }
    
public bool Passworded { get; public set; }
    
public bool Secure { get; public set; }
    
public UInt32 LastTimePlayed { get; public set; }
    
public int Version { get; public set; }
    
public string TagString { get; public set; }
    
public ulong SteamId { get; public set; }
    
public UInt32 AddressRaw { get; public set; }
    
public IPAddress Address { get; public set; }
    
public int ConnectionPort { get; public set; }
    
public int QueryPort { get; public set; }
    
public String[] Tags { get; }
    public ServerInfo(UInt32 ip, ushort cport, ushort qport, UInt32 timeplayed);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Ping();
    [CompilerGeneratedAttribute]
public void set_Ping(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_GameDir();
    [CompilerGeneratedAttribute]
public void set_GameDir(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Map();
    [CompilerGeneratedAttribute]
public void set_Map(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Players();
    [CompilerGeneratedAttribute]
public void set_Players(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_MaxPlayers();
    [CompilerGeneratedAttribute]
public void set_MaxPlayers(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_BotPlayers();
    [CompilerGeneratedAttribute]
public void set_BotPlayers(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Passworded();
    [CompilerGeneratedAttribute]
public void set_Passworded(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_LastTimePlayed();
    [CompilerGeneratedAttribute]
public void set_LastTimePlayed(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_TagString();
    [CompilerGeneratedAttribute]
public void set_TagString(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_SteamId();
    [CompilerGeneratedAttribute]
public void set_SteamId(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_AddressRaw();
    [CompilerGeneratedAttribute]
public void set_AddressRaw(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IPAddress get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(IPAddress value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ConnectionPort();
    [CompilerGeneratedAttribute]
public void set_ConnectionPort(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_QueryPort();
    [CompilerGeneratedAttribute]
public void set_QueryPort(int value);
    public String[] get_Tags();
    internal static ServerInfo From(gameserveritem_t item);
    public void AddToHistory();
    [AsyncStateMachineAttribute("Steamworks.Data.ServerInfo/<QueryRulesAsync>d__85")]
public Task`1<Dictionary`2<string, string>> QueryRulesAsync();
    public void RemoveFromHistory();
    public void AddToFavourites();
    public void RemoveFromFavourites();
    public sealed virtual bool Equals(ServerInfo other);
    public virtual int GetHashCode();
}
internal class Steamworks.Data.servernetadr_t : ValueType {
    
internal ushort ConnectionPort;
    
internal ushort QueryPort;
    
internal UInt32 IP;
    internal static void InternalConstruct(servernetadr_t& self);
    internal static void InternalInit(servernetadr_t& self, UInt32 ip, ushort usQueryPort, ushort usConnectionPort);
    internal static ushort InternalGetQueryPort(servernetadr_t& self);
    internal static void InternalSetQueryPort(servernetadr_t& self, ushort usPort);
    internal static ushort InternalGetConnectionPort(servernetadr_t& self);
    internal static void InternalSetConnectionPort(servernetadr_t& self, ushort usPort);
    internal static UInt32 InternalGetIP(servernetadr_t& self);
    internal static void InternalSetIP(servernetadr_t& self, UInt32 unIP);
    internal static Utf8StringPointer InternalGetConnectionAddressString(servernetadr_t& self);
    internal static Utf8StringPointer InternalGetQueryAddressString(servernetadr_t& self);
    internal static bool InternalIsLessThan(servernetadr_t& self, servernetadr_t& netadr);
    internal static void InternalAssign(servernetadr_t& self, servernetadr_t& that);
}
internal class Steamworks.Data.SetPersonaNameResponse_t : ValueType {
    
internal bool Success;
    
internal bool LocalSuccess;
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SetPersonaNameResponse_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SetUserItemVoteResult_t : ValueType {
    
internal PublishedFileId PublishedFileId;
    
internal Result Result;
    
internal bool VoteUp;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SetUserItemVoteResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SNetListenSocket_t : ValueType {
    
public UInt32 Value;
    public static SNetListenSocket_t op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(SNetListenSocket_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(SNetListenSocket_t p);
    public static bool op_Equality(SNetListenSocket_t a, SNetListenSocket_t b);
    public static bool op_Inequality(SNetListenSocket_t a, SNetListenSocket_t b);
    public sealed virtual int CompareTo(SNetListenSocket_t other);
}
internal class Steamworks.Data.SNetSocket_t : ValueType {
    
public UInt32 Value;
    public static SNetSocket_t op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(SNetSocket_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(SNetSocket_t p);
    public static bool op_Equality(SNetSocket_t a, SNetSocket_t b);
    public static bool op_Inequality(SNetSocket_t a, SNetSocket_t b);
    public sealed virtual int CompareTo(SNetSocket_t other);
}
public class Steamworks.Data.Socket : ValueType {
    
internal UInt32 Id;
    
public SocketManager Manager { get; public set; }
    public virtual string ToString();
    public static Socket op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(Socket value);
    public bool Close();
    public SocketManager get_Manager();
    public void set_Manager(SocketManager value);
}
internal class Steamworks.Data.StartPlaytimeTrackingResult_t : ValueType {
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static StartPlaytimeTrackingResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.Stat : ValueType {
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]

private SteamId <UserId>k__BackingField;
    
public string Name { get; internal set; }
    
public SteamId UserId { get; internal set; }
    public Stat(string name);
    public Stat(string name, SteamId user);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SteamId get_UserId();
    [CompilerGeneratedAttribute]
internal void set_UserId(SteamId value);
    internal void LocalUserOnly(string caller);
    public double GetGlobalFloat();
    public long GetGlobalInt();
    [AsyncStateMachineAttribute("Steamworks.Data.Stat/<GetGlobalIntDaysAsync>d__13")]
public Task`1<Int64[]> GetGlobalIntDaysAsync(int days);
    [AsyncStateMachineAttribute("Steamworks.Data.Stat/<GetGlobalFloatDays>d__14")]
public Task`1<Double[]> GetGlobalFloatDays(int days);
    public float GetFloat();
    public int GetInt();
    public bool Set(int val);
    public bool Set(float val);
    public bool Add(int val);
    public bool Add(float val);
    public bool UpdateAverageRate(float count, float sessionlength);
    public bool Store();
}
internal class Steamworks.Data.SteamAPICall_t : ValueType {
    
public ulong Value;
    public static SteamAPICall_t op_Implicit(ulong value);
    public static ulong op_Implicit(SteamAPICall_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(SteamAPICall_t p);
    public static bool op_Equality(SteamAPICall_t a, SteamAPICall_t b);
    public static bool op_Inequality(SteamAPICall_t a, SteamAPICall_t b);
    public sealed virtual int CompareTo(SteamAPICall_t other);
}
internal class Steamworks.Data.SteamAPICallCompleted_t : ValueType {
    
internal ulong AsyncCall;
    
internal int Callback;
    
internal UInt32 ParamCount;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamAPICallCompleted_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamAppInstalled_t : ValueType {
    
internal AppId AppID;
    
internal int InstallFolderIndex;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamAppInstalled_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamAppUninstalled_t : ValueType {
    
internal AppId AppID;
    
internal int InstallFolderIndex;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamAppUninstalled_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamDatagramGameCoordinatorServerLogin : ValueType {
    
internal NetIdentity Dentity;
    
internal SteamDatagramHostedAddress Outing;
    
internal AppId AppID;
    
internal UInt32 Time;
    
internal int CbAppData;
    
internal Byte[] AppData;
    internal string AppDataUTF8();
}
internal class Steamworks.Data.SteamDatagramHostedAddress : ValueType {
    
internal int CbSize;
    
internal Byte[] Data;
    internal static void InternalClear(SteamDatagramHostedAddress& self);
    internal static SteamNetworkingPOPID InternalGetPopID(SteamDatagramHostedAddress& self);
    internal static void InternalSetDevAddress(SteamDatagramHostedAddress& self, UInt32 nIP, ushort nPort, SteamNetworkingPOPID popid);
    internal string DataUTF8();
}
internal class Steamworks.Data.SteamDatagramRelayAuthTicket : ValueType {
}
internal class Steamworks.Data.SteamInputActionEvent_t : ValueType {
    
internal ulong ControllerHandle;
    
internal SteamInputActionEventType EEventType;
}
internal class Steamworks.Data.SteamInputConfigurationLoaded_t : ValueType {
    
internal AppId AppID;
    
internal ulong DeviceHandle;
    
internal ulong MappingCreator;
    
internal UInt32 MajorRevision;
    
internal UInt32 MinorRevision;
    
internal bool UsesSteamInputAPI;
    
internal bool UsesGamepadAPI;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInputConfigurationLoaded_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInputDeviceConnected_t : ValueType {
    
internal ulong ConnectedDeviceHandle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInputDeviceConnected_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInputDeviceDisconnected_t : ValueType {
    
internal ulong DisconnectedDeviceHandle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInputDeviceDisconnected_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInputGamepadSlotChange_t : ValueType {
    
internal AppId AppID;
    
internal ulong DeviceHandle;
    
internal InputType DeviceType;
    
internal int OldGamepadSlot;
    
internal int NewGamepadSlot;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInputGamepadSlotChange_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInventoryDefinitionUpdate_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInventoryDefinitionUpdate_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInventoryEligiblePromoItemDefIDs_t : ValueType {
    
internal Result Result;
    
internal ulong SteamID;
    
internal int UmEligiblePromoItemDefs;
    
internal bool CachedData;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInventoryEligiblePromoItemDefIDs_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInventoryFullUpdate_t : ValueType {
    
internal int Handle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInventoryFullUpdate_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInventoryRequestPricesResult_t : ValueType {
    
internal Result Result;
    
internal Byte[] Currency;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInventoryRequestPricesResult_t();
    internal string CurrencyUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInventoryResult_t : ValueType {
    
public int Value;
    public static SteamInventoryResult_t op_Implicit(int value);
    public static int op_Implicit(SteamInventoryResult_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(SteamInventoryResult_t p);
    public static bool op_Equality(SteamInventoryResult_t a, SteamInventoryResult_t b);
    public static bool op_Inequality(SteamInventoryResult_t a, SteamInventoryResult_t b);
    public sealed virtual int CompareTo(SteamInventoryResult_t other);
}
internal class Steamworks.Data.SteamInventoryResultReady_t : ValueType {
    
internal int Handle;
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInventoryResultReady_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInventoryStartPurchaseResult_t : ValueType {
    
internal Result Result;
    
internal ulong OrderID;
    
internal ulong TransID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamInventoryStartPurchaseResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamInventoryUpdateHandle_t : ValueType {
    
public ulong Value;
    public static SteamInventoryUpdateHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(SteamInventoryUpdateHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(SteamInventoryUpdateHandle_t p);
    public static bool op_Equality(SteamInventoryUpdateHandle_t a, SteamInventoryUpdateHandle_t b);
    public static bool op_Inequality(SteamInventoryUpdateHandle_t a, SteamInventoryUpdateHandle_t b);
    public sealed virtual int CompareTo(SteamInventoryUpdateHandle_t other);
}
internal class Steamworks.Data.SteamIPAddress : ValueType {
    
public UInt32 Ip4Address;
    
internal SteamIPType Type;
    internal static bool InternalIsSet(SteamIPAddress& self);
    public static IPAddress op_Implicit(SteamIPAddress value);
}
internal class Steamworks.Data.SteamItemDetails_t : ValueType {
    
internal InventoryItemId ItemId;
    
internal InventoryDefId Definition;
    
internal ushort Quantity;
    
internal ushort Flags;
}
internal class Steamworks.Data.SteamLeaderboard_t : ValueType {
    
public ulong Value;
    public static SteamLeaderboard_t op_Implicit(ulong value);
    public static ulong op_Implicit(SteamLeaderboard_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(SteamLeaderboard_t p);
    public static bool op_Equality(SteamLeaderboard_t a, SteamLeaderboard_t b);
    public static bool op_Inequality(SteamLeaderboard_t a, SteamLeaderboard_t b);
    public sealed virtual int CompareTo(SteamLeaderboard_t other);
}
internal class Steamworks.Data.SteamLeaderboardEntries_t : ValueType {
    
public ulong Value;
    public static SteamLeaderboardEntries_t op_Implicit(ulong value);
    public static ulong op_Implicit(SteamLeaderboardEntries_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(SteamLeaderboardEntries_t p);
    public static bool op_Equality(SteamLeaderboardEntries_t a, SteamLeaderboardEntries_t b);
    public static bool op_Inequality(SteamLeaderboardEntries_t a, SteamLeaderboardEntries_t b);
    public sealed virtual int CompareTo(SteamLeaderboardEntries_t other);
}
internal class Steamworks.Data.SteamNetAuthenticationStatus_t : ValueType {
    
internal SteamNetworkingAvailability Avail;
    
internal Byte[] DebugMsg;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamNetAuthenticationStatus_t();
    internal string DebugMsgUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamNetConnectionStatusChangedCallback_t : ValueType {
    
internal Connection Conn;
    
internal ConnectionInfo Nfo;
    
internal ConnectionState OldState;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamNetConnectionStatusChangedCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamNetworkingFakeIPResult_t : ValueType {
    
internal Result Result;
    
internal NetIdentity Dentity;
    
internal UInt32 IP;
    
internal UInt16[] Ports;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamNetworkingFakeIPResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamNetworkingMessagesSessionFailed_t : ValueType {
    
internal ConnectionInfo Nfo;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamNetworkingMessagesSessionFailed_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamNetworkingMessagesSessionRequest_t : ValueType {
    
internal NetIdentity DentityRemote;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamNetworkingMessagesSessionRequest_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamNetworkingPOPID : ValueType {
    
public UInt32 Value;
    public static SteamNetworkingPOPID op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(SteamNetworkingPOPID value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(SteamNetworkingPOPID p);
    public static bool op_Equality(SteamNetworkingPOPID a, SteamNetworkingPOPID b);
    public static bool op_Inequality(SteamNetworkingPOPID a, SteamNetworkingPOPID b);
    public sealed virtual int CompareTo(SteamNetworkingPOPID other);
}
internal class Steamworks.Data.SteamParamStringArray_t : ValueType {
    
internal IntPtr Strings;
    
internal int NumStrings;
}
internal class Steamworks.Data.SteamParentalSettingsChanged_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamParentalSettingsChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamPartyBeaconLocation_t : ValueType {
    
internal SteamPartyBeaconLocationType Type;
    
internal ulong LocationID;
}
internal class Steamworks.Data.SteamRelayNetworkStatus_t : ValueType {
    
internal SteamNetworkingAvailability Avail;
    
internal int PingMeasurementInProgress;
    
internal SteamNetworkingAvailability AvailNetworkConfig;
    
internal SteamNetworkingAvailability AvailAnyRelay;
    
internal Byte[] DebugMsg;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamRelayNetworkStatus_t();
    internal string DebugMsgUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamRemotePlaySessionConnected_t : ValueType {
    
internal UInt32 SessionID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamRemotePlaySessionConnected_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamRemotePlaySessionDisconnected_t : ValueType {
    
internal UInt32 SessionID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamRemotePlaySessionDisconnected_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamRemotePlayTogetherGuestInvite_t : ValueType {
    
internal Byte[] ConnectURL;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamRemotePlayTogetherGuestInvite_t();
    internal string ConnectURLUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamServerConnectFailure_t : ValueType {
    
internal Result Result;
    
internal bool StillRetrying;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamServerConnectFailure_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamServersConnected_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamServersConnected_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamServersDisconnected_t : ValueType {
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamServersDisconnected_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamShutdown_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamShutdown_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamUGCDetails_t : ValueType {
    
internal PublishedFileId PublishedFileId;
    
internal Result Result;
    
internal WorkshopFileType FileType;
    
internal AppId CreatorAppID;
    
internal AppId ConsumerAppID;
    
internal Byte[] Title;
    
internal Byte[] Description;
    
internal ulong SteamIDOwner;
    
internal UInt32 TimeCreated;
    
internal UInt32 TimeUpdated;
    
internal UInt32 TimeAddedToUserList;
    
internal RemoteStoragePublishedFileVisibility Visibility;
    
internal bool Banned;
    
internal bool AcceptedForUse;
    
internal bool TagsTruncated;
    
internal Byte[] Tags;
    
internal ulong File;
    
internal ulong PreviewFile;
    
internal Byte[] PchFileName;
    
internal int FileSize;
    
internal int PreviewFileSize;
    
internal Byte[] URL;
    
internal UInt32 VotesUp;
    
internal UInt32 VotesDown;
    
internal float Score;
    
internal UInt32 NumChildren;
    internal string TitleUTF8();
    internal string DescriptionUTF8();
    internal string TagsUTF8();
    internal string PchFileNameUTF8();
    internal string URLUTF8();
}
internal class Steamworks.Data.SteamUGCQueryCompleted_t : ValueType {
    
internal ulong Handle;
    
internal Result Result;
    
internal UInt32 NumResultsReturned;
    
internal UInt32 TotalMatchingResults;
    
internal bool CachedData;
    
internal Byte[] NextCursor;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamUGCQueryCompleted_t();
    internal string NextCursorUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SteamUGCRequestUGCDetailsResult_t : ValueType {
    
internal SteamUGCDetails_t Details;
    
internal bool CachedData;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SteamUGCRequestUGCDetailsResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.StopPlaytimeTrackingResult_t : ValueType {
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static StopPlaytimeTrackingResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.StoreAuthURLResponse_t : ValueType {
    
internal Byte[] URL;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static StoreAuthURLResponse_t();
    internal string URLUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SubmitItemUpdateResult_t : ValueType {
    
internal Result Result;
    
internal bool UserNeedsToAcceptWorkshopLegalAgreement;
    
internal PublishedFileId PublishedFileId;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SubmitItemUpdateResult_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.SubmitPlayerResultResultCallback_t : ValueType {
    
internal Result Result;
    
internal ulong UllUniqueGameID;
    
internal ulong SteamIDPlayer;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static SubmitPlayerResultResultCallback_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.TimedTrialStatus_t : ValueType {
    
internal AppId AppID;
    
internal bool IsOffline;
    
internal UInt32 SecondsAllowed;
    
internal UInt32 SecondsPlayed;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static TimedTrialStatus_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
public class Steamworks.Data.Ugc : ValueType {
    
internal UGCHandle_t Handle;
}
public class Steamworks.Data.UgcAdditionalPreview : ValueType {
    [CompilerGeneratedAttribute]

private string <UrlOrVideoID>k__BackingField;
    [CompilerGeneratedAttribute]

private string <OriginalFileName>k__BackingField;
    [CompilerGeneratedAttribute]

private ItemPreviewType <ItemPreviewType>k__BackingField;
    
public string UrlOrVideoID { get; private set; }
    
public string OriginalFileName { get; private set; }
    
public ItemPreviewType ItemPreviewType { get; private set; }
    internal UgcAdditionalPreview(string urlOrVideoID, string originalFileName, ItemPreviewType itemPreviewType);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_UrlOrVideoID();
    [CompilerGeneratedAttribute]
private void set_UrlOrVideoID(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_OriginalFileName();
    [CompilerGeneratedAttribute]
private void set_OriginalFileName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ItemPreviewType get_ItemPreviewType();
    [CompilerGeneratedAttribute]
private void set_ItemPreviewType(ItemPreviewType value);
}
internal class Steamworks.Data.UGCFileWriteStreamHandle_t : ValueType {
    
public ulong Value;
    public static UGCFileWriteStreamHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(UGCFileWriteStreamHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(UGCFileWriteStreamHandle_t p);
    public static bool op_Equality(UGCFileWriteStreamHandle_t a, UGCFileWriteStreamHandle_t b);
    public static bool op_Inequality(UGCFileWriteStreamHandle_t a, UGCFileWriteStreamHandle_t b);
    public sealed virtual int CompareTo(UGCFileWriteStreamHandle_t other);
}
internal class Steamworks.Data.UGCHandle_t : ValueType {
    
public ulong Value;
    public static UGCHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(UGCHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(UGCHandle_t p);
    public static bool op_Equality(UGCHandle_t a, UGCHandle_t b);
    public static bool op_Inequality(UGCHandle_t a, UGCHandle_t b);
    public sealed virtual int CompareTo(UGCHandle_t other);
}
internal class Steamworks.Data.UGCQueryHandle_t : ValueType {
    
public ulong Value;
    public static UGCQueryHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(UGCQueryHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(UGCQueryHandle_t p);
    public static bool op_Equality(UGCQueryHandle_t a, UGCQueryHandle_t b);
    public static bool op_Inequality(UGCQueryHandle_t a, UGCQueryHandle_t b);
    public sealed virtual int CompareTo(UGCQueryHandle_t other);
}
internal class Steamworks.Data.UGCUpdateHandle_t : ValueType {
    
public ulong Value;
    public static UGCUpdateHandle_t op_Implicit(ulong value);
    public static ulong op_Implicit(UGCUpdateHandle_t value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object p);
    public sealed virtual bool Equals(UGCUpdateHandle_t p);
    public static bool op_Equality(UGCUpdateHandle_t a, UGCUpdateHandle_t b);
    public static bool op_Inequality(UGCUpdateHandle_t a, UGCUpdateHandle_t b);
    public sealed virtual int CompareTo(UGCUpdateHandle_t other);
}
internal class Steamworks.Data.UnreadChatMessagesChanged_t : ValueType {
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static UnreadChatMessagesChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.UserAchievementIconFetched_t : ValueType {
    
internal GameId GameID;
    
internal Byte[] AchievementName;
    
internal bool Achieved;
    
internal int IconHandle;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static UserAchievementIconFetched_t();
    internal string AchievementNameUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.UserAchievementStored_t : ValueType {
    
internal ulong GameID;
    
internal bool GroupAchievement;
    
internal Byte[] AchievementName;
    
internal UInt32 CurProgress;
    
internal UInt32 MaxProgress;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static UserAchievementStored_t();
    internal string AchievementNameUTF8();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.UserFavoriteItemsListChanged_t : ValueType {
    
internal PublishedFileId PublishedFileId;
    
internal Result Result;
    
internal bool WasAddRequest;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static UserFavoriteItemsListChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.UserStatsReceived_t : ValueType {
    
internal ulong GameID;
    
internal Result Result;
    
internal ulong SteamIDUser;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static UserStatsReceived_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.UserStatsStored_t : ValueType {
    
internal ulong GameID;
    
internal Result Result;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static UserStatsStored_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.UserStatsUnloaded_t : ValueType {
    
internal ulong SteamIDUser;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static UserStatsUnloaded_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.UserSubscribedItemsListChanged_t : ValueType {
    
internal AppId AppID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static UserSubscribedItemsListChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.ValidateAuthTicketResponse_t : ValueType {
    
internal ulong SteamID;
    
internal AuthResponse AuthSessionResponse;
    
internal ulong OwnerSteamID;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static ValidateAuthTicketResponse_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.VolumeHasChanged_t : ValueType {
    
internal float NewVolume;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static VolumeHasChanged_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal class Steamworks.Data.WorkshopEULAStatus_t : ValueType {
    
internal Result Result;
    
internal AppId AppID;
    
internal UInt32 Version;
    
internal UInt32 TAction;
    
internal bool Accepted;
    
internal bool NeedsAction;
    
public static int _datasize;
    
public int DataSize { get; }
    
public CallbackType CallbackType { get; }
    private static WorkshopEULAStatus_t();
    public sealed virtual int get_DataSize();
    public sealed virtual CallbackType get_CallbackType();
}
internal enum Steamworks.DenyReason : Enum {
    
public int value__;
    
public static DenyReason Invalid;
    
public static DenyReason InvalidVersion;
    
public static DenyReason Generic;
    
public static DenyReason NotLoggedOn;
    
public static DenyReason NoLicense;
    
public static DenyReason Cheater;
    
public static DenyReason LoggedInElseWhere;
    
public static DenyReason UnknownText;
    
public static DenyReason IncompatibleAnticheat;
    
public static DenyReason MemoryCorruption;
    
public static DenyReason IncompatibleSoftware;
    
public static DenyReason SteamConnectionLost;
    
public static DenyReason SteamConnectionError;
    
public static DenyReason SteamResponseTimedOut;
    
public static DenyReason SteamValidationStalled;
    
public static DenyReason SteamOwnerLeftGuestUser;
}
public class Steamworks.DigitalState : ValueType {
    
internal byte BState;
    
internal byte BActive;
    
public bool Pressed { get; }
    
public bool Active { get; }
    public bool get_Pressed();
    public bool get_Active();
}
public static class Steamworks.Dispatch : object {
    
public static Action`3<CallbackType, string, bool> OnDebugCallback;
    
public static Action`1<Exception> OnException;
    [CompilerGeneratedAttribute]

private static HSteamPipe <ClientPipe>k__BackingField;
    [CompilerGeneratedAttribute]

private static HSteamPipe <ServerPipe>k__BackingField;
    
private static bool runningFrame;
    
private static List`1<Action`1<IntPtr>> actionsToCall;
    
private static Dictionary`2<ulong, ResultCallback> ResultCallbacks;
    
private static Dictionary`2<CallbackType, List`1<Callback>> Callbacks;
    
internal static HSteamPipe ClientPipe { get; internal set; }
    
internal static HSteamPipe ServerPipe { get; internal set; }
    private static Dispatch();
    internal static void SteamAPI_ManualDispatch_Init();
    internal static void SteamAPI_ManualDispatch_RunFrame(HSteamPipe pipe);
    internal static bool SteamAPI_ManualDispatch_GetNextCallback(HSteamPipe pipe, CallbackMsg_t& msg);
    internal static bool SteamAPI_ManualDispatch_FreeLastCallback(HSteamPipe pipe);
    [CompilerGeneratedAttribute]
internal static HSteamPipe get_ClientPipe();
    [CompilerGeneratedAttribute]
internal static void set_ClientPipe(HSteamPipe value);
    [CompilerGeneratedAttribute]
internal static HSteamPipe get_ServerPipe();
    [CompilerGeneratedAttribute]
internal static void set_ServerPipe(HSteamPipe value);
    internal static void Init();
    internal static void Frame(HSteamPipe pipe);
    private static void ProcessCallback(CallbackMsg_t msg, bool isServer);
    internal static string CallbackToString(CallbackType type, IntPtr data, int expectedsize);
    private static void ProcessResult(CallbackMsg_t msg);
    [AsyncStateMachineAttribute("Steamworks.Dispatch/<LoopClientAsync>d__22")]
internal static void LoopClientAsync();
    [AsyncStateMachineAttribute("Steamworks.Dispatch/<LoopServerAsync>d__23")]
internal static void LoopServerAsync();
    internal static void OnCallComplete(SteamAPICall_t call, Action continuation, bool server);
    internal static void Install(Action`1<T> p, bool server);
    internal static void ShutdownServer();
    internal static void ShutdownClient();
}
internal enum Steamworks.DurationControlNotification : Enum {
    
public int value__;
    
public static DurationControlNotification None;
    
public static DurationControlNotification DurationControlNotification1Hour;
    
public static DurationControlNotification DurationControlNotification3Hours;
    
public static DurationControlNotification HalfProgress;
    
public static DurationControlNotification NoProgress;
    
public static DurationControlNotification ExitSoon_3h;
    
public static DurationControlNotification ExitSoon_5h;
    
public static DurationControlNotification ExitSoon_Night;
}
internal enum Steamworks.DurationControlOnlineState : Enum {
    
public int value__;
    
public static DurationControlOnlineState Invalid;
    
public static DurationControlOnlineState Offline;
    
public static DurationControlOnlineState Online;
    
public static DurationControlOnlineState OnlineHighPri;
}
public enum Steamworks.DurationControlProgress : Enum {
    
public int value__;
    
public static DurationControlProgress Progress_Full;
    
public static DurationControlProgress Progress_Half;
    
public static DurationControlProgress Progress_None;
    
public static DurationControlProgress ExitSoon_3h;
    
public static DurationControlProgress ExitSoon_5h;
    
public static DurationControlProgress ExitSoon_Night;
}
internal static class Steamworks.Epoch : object {
    
private static DateTime epoch;
    
public static int Current { get; }
    private static Epoch();
    public static int get_Current();
    public static DateTime ToDateTime(decimal unixTime);
    public static UInt32 FromDateTime(DateTime dt);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Steamworks.FnSteamNetAuthenticationStatusChanged : MulticastDelegate {
    public FnSteamNetAuthenticationStatusChanged(object object, IntPtr method);
    public virtual void Invoke(SteamNetAuthenticationStatus_t& arg);
    public virtual IAsyncResult BeginInvoke(SteamNetAuthenticationStatus_t& arg, AsyncCallback callback, object object);
    public virtual void EndInvoke(SteamNetAuthenticationStatus_t& arg, IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Steamworks.FnSteamNetConnectionStatusChanged : MulticastDelegate {
    public FnSteamNetConnectionStatusChanged(object object, IntPtr method);
    public virtual void Invoke(SteamNetConnectionStatusChangedCallback_t& arg);
    public virtual IAsyncResult BeginInvoke(SteamNetConnectionStatusChangedCallback_t& arg, AsyncCallback callback, object object);
    public virtual void EndInvoke(SteamNetConnectionStatusChangedCallback_t& arg, IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Steamworks.FnSteamNetworkingFakeIPResult : MulticastDelegate {
    public FnSteamNetworkingFakeIPResult(object object, IntPtr method);
    public virtual void Invoke(SteamNetworkingFakeIPResult_t& arg);
    public virtual IAsyncResult BeginInvoke(SteamNetworkingFakeIPResult_t& arg, AsyncCallback callback, object object);
    public virtual void EndInvoke(SteamNetworkingFakeIPResult_t& arg, IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Steamworks.FnSteamNetworkingMessagesSessionFailed : MulticastDelegate {
    public FnSteamNetworkingMessagesSessionFailed(object object, IntPtr method);
    public virtual void Invoke(SteamNetworkingMessagesSessionFailed_t& arg);
    public virtual IAsyncResult BeginInvoke(SteamNetworkingMessagesSessionFailed_t& arg, AsyncCallback callback, object object);
    public virtual void EndInvoke(SteamNetworkingMessagesSessionFailed_t& arg, IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Steamworks.FnSteamNetworkingMessagesSessionRequest : MulticastDelegate {
    public FnSteamNetworkingMessagesSessionRequest(object object, IntPtr method);
    public virtual void Invoke(SteamNetworkingMessagesSessionRequest_t& arg);
    public virtual IAsyncResult BeginInvoke(SteamNetworkingMessagesSessionRequest_t& arg, AsyncCallback callback, object object);
    public virtual void EndInvoke(SteamNetworkingMessagesSessionRequest_t& arg, IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Steamworks.FnSteamRelayNetworkStatusChanged : MulticastDelegate {
    public FnSteamRelayNetworkStatusChanged(object object, IntPtr method);
    public virtual void Invoke(SteamRelayNetworkStatus_t& arg);
    public virtual IAsyncResult BeginInvoke(SteamRelayNetworkStatus_t& arg, AsyncCallback callback, object object);
    public virtual void EndInvoke(SteamRelayNetworkStatus_t& arg, IAsyncResult result);
}
public class Steamworks.Friend : ValueType {
    
public SteamId Id;
    
public bool IsMe { get; }
    
public bool IsFriend { get; }
    
public bool IsBlocked { get; }
    
public bool IsPlayingThisGame { get; }
    
public bool IsOnline { get; }
    
public bool IsAway { get; }
    
public bool IsBusy { get; }
    
public bool IsSnoozing { get; }
    
public Relationship Relationship { get; }
    
public FriendState State { get; }
    
public string Name { get; }
    
public IEnumerable`1<string> NameHistory { get; }
    
public int SteamLevel { get; }
    
public Nullable`1<FriendGameInfo> GameInfo { get; }
    public Friend(SteamId steamid);
    public virtual string ToString();
    public bool get_IsMe();
    public bool get_IsFriend();
    public bool get_IsBlocked();
    public bool get_IsPlayingThisGame();
    public bool get_IsOnline();
    [AsyncStateMachineAttribute("Steamworks.Friend/<RequestInfoAsync>d__13")]
public Task RequestInfoAsync();
    public bool get_IsAway();
    public bool get_IsBusy();
    public bool get_IsSnoozing();
    public Relationship get_Relationship();
    public FriendState get_State();
    public string get_Name();
    [IteratorStateMachineAttribute("Steamworks.Friend/<get_NameHistory>d__27")]
public IEnumerable`1<string> get_NameHistory();
    public int get_SteamLevel();
    public Nullable`1<FriendGameInfo> get_GameInfo();
    public bool IsIn(SteamId group_or_room);
    [AsyncStateMachineAttribute("Steamworks.Friend/<GetSmallAvatarAsync>d__34")]
public Task`1<Nullable`1<Image>> GetSmallAvatarAsync();
    [AsyncStateMachineAttribute("Steamworks.Friend/<GetMediumAvatarAsync>d__35")]
public Task`1<Nullable`1<Image>> GetMediumAvatarAsync();
    [AsyncStateMachineAttribute("Steamworks.Friend/<GetLargeAvatarAsync>d__36")]
public Task`1<Nullable`1<Image>> GetLargeAvatarAsync();
    public string GetRichPresence(string key);
    public bool InviteToGame(string Text);
    public bool SendMessage(string message);
    [AsyncStateMachineAttribute("Steamworks.Friend/<RequestUserStatsAsync>d__40")]
public Task`1<bool> RequestUserStatsAsync();
    public float GetStatFloat(string statName, float defult);
    public int GetStatInt(string statName, int defult);
    public bool GetAchievement(string statName, bool defult);
    public DateTime GetAchievementUnlockTime(string statName);
}
internal enum Steamworks.FriendFlags : Enum {
    
public int value__;
    
public static FriendFlags None;
    
public static FriendFlags Blocked;
    
public static FriendFlags FriendshipRequested;
    
public static FriendFlags Immediate;
    
public static FriendFlags ClanMember;
    
public static FriendFlags OnGameServer;
    
public static FriendFlags RequestingFriendship;
    
public static FriendFlags RequestingInfo;
    
public static FriendFlags Ignored;
    
public static FriendFlags IgnoredFriend;
    
public static FriendFlags ChatMember;
    
public static FriendFlags All;
}
public enum Steamworks.FriendState : Enum {
    
public int value__;
    
public static FriendState Offline;
    
public static FriendState Online;
    
public static FriendState Busy;
    
public static FriendState Away;
    
public static FriendState Snooze;
    
public static FriendState LookingToTrade;
    
public static FriendState LookingToPlay;
    
public static FriendState Invisible;
    
public static FriendState Max;
}
public enum Steamworks.GamepadTextInputLineMode : Enum {
    
public int value__;
    
public static GamepadTextInputLineMode SingleLine;
    
public static GamepadTextInputLineMode MultipleLines;
}
public enum Steamworks.GamepadTextInputMode : Enum {
    
public int value__;
    
public static GamepadTextInputMode Normal;
    
public static GamepadTextInputMode Password;
}
internal enum Steamworks.GameSearchErrorCode_t : Enum {
    
public int value__;
    
public static GameSearchErrorCode_t OK;
    
public static GameSearchErrorCode_t Failed_Search_Already_In_Progress;
    
public static GameSearchErrorCode_t Failed_No_Search_In_Progress;
    
public static GameSearchErrorCode_t Failed_Not_Lobby_Leader;
    
public static GameSearchErrorCode_t Failed_No_Host_Available;
    
public static GameSearchErrorCode_t Failed_Search_Params_Invalid;
    
public static GameSearchErrorCode_t Failed_Offline;
    
public static GameSearchErrorCode_t Failed_NotAuthorized;
    
public static GameSearchErrorCode_t Failed_Unknown_Error;
}
public enum Steamworks.GlyphSize : Enum {
    
public int value__;
    
public static GlyphSize Small;
    
public static GlyphSize Medium;
    
public static GlyphSize Large;
    
public static GlyphSize Count;
}
internal static class Steamworks.Helpers : object {
    
public static int MemoryBufferSize;
    
private static Byte[][] BufferPool;
    
private static int BufferPoolIndex;
    private static Helpers();
    public static Memory TakeMemory();
    public static Byte[] TakeBuffer(int minSize);
    internal static string MemoryToString(IntPtr ptr);
}
internal enum Steamworks.HTTPMethod : Enum {
    
public int value__;
    
public static HTTPMethod Invalid;
    
public static HTTPMethod GET;
    
public static HTTPMethod HEAD;
    
public static HTTPMethod POST;
    
public static HTTPMethod PUT;
    
public static HTTPMethod DELETE;
    
public static HTTPMethod OPTIONS;
    
public static HTTPMethod PATCH;
}
internal enum Steamworks.HTTPStatusCode : Enum {
    
public int value__;
    
public static HTTPStatusCode Invalid;
    
public static HTTPStatusCode Code100Continue;
    
public static HTTPStatusCode Code101SwitchingProtocols;
    
public static HTTPStatusCode Code200OK;
    
public static HTTPStatusCode Code201Created;
    
public static HTTPStatusCode Code202Accepted;
    
public static HTTPStatusCode Code203NonAuthoritative;
    
public static HTTPStatusCode Code204NoContent;
    
public static HTTPStatusCode Code205ResetContent;
    
public static HTTPStatusCode Code206PartialContent;
    
public static HTTPStatusCode Code300MultipleChoices;
    
public static HTTPStatusCode Code301MovedPermanently;
    
public static HTTPStatusCode Code302Found;
    
public static HTTPStatusCode Code303SeeOther;
    
public static HTTPStatusCode Code304NotModified;
    
public static HTTPStatusCode Code305UseProxy;
    
public static HTTPStatusCode Code307TemporaryRedirect;
    
public static HTTPStatusCode Code308PermanentRedirect;
    
public static HTTPStatusCode Code400BadRequest;
    
public static HTTPStatusCode Code401Unauthorized;
    
public static HTTPStatusCode Code402PaymentRequired;
    
public static HTTPStatusCode Code403Forbidden;
    
public static HTTPStatusCode Code404NotFound;
    
public static HTTPStatusCode Code405MethodNotAllowed;
    
public static HTTPStatusCode Code406NotAcceptable;
    
public static HTTPStatusCode Code407ProxyAuthRequired;
    
public static HTTPStatusCode Code408RequestTimeout;
    
public static HTTPStatusCode Code409Conflict;
    
public static HTTPStatusCode Code410Gone;
    
public static HTTPStatusCode Code411LengthRequired;
    
public static HTTPStatusCode Code412PreconditionFailed;
    
public static HTTPStatusCode Code413RequestEntityTooLarge;
    
public static HTTPStatusCode Code414RequestURITooLong;
    
public static HTTPStatusCode Code415UnsupportedMediaType;
    
public static HTTPStatusCode Code416RequestedRangeNotSatisfiable;
    
public static HTTPStatusCode Code417ExpectationFailed;
    
public static HTTPStatusCode Code4xxUnknown;
    
public static HTTPStatusCode Code429TooManyRequests;
    
public static HTTPStatusCode Code444ConnectionClosed;
    
public static HTTPStatusCode Code500InternalServerError;
    
public static HTTPStatusCode Code501NotImplemented;
    
public static HTTPStatusCode Code502BadGateway;
    
public static HTTPStatusCode Code503ServiceUnavailable;
    
public static HTTPStatusCode Code504GatewayTimeout;
    
public static HTTPStatusCode Code505HTTPVersionNotSupported;
    
public static HTTPStatusCode Code5xxUnknown;
}
internal interface Steamworks.ICallbackData {
    
public CallbackType CallbackType { get; }
    
public int DataSize { get; }
    public abstract virtual CallbackType get_CallbackType();
    public abstract virtual int get_DataSize();
}
public interface Steamworks.IConnectionManager {
    public abstract virtual void OnConnecting(ConnectionInfo info);
    public abstract virtual void OnConnected(ConnectionInfo info);
    public abstract virtual void OnDisconnected(ConnectionInfo info);
    public abstract virtual void OnMessage(IntPtr data, int size, long messageNum, long recvTime, int channel);
}
internal enum Steamworks.InputActionOrigin : Enum {
    
public int value__;
    
public static InputActionOrigin None;
    
public static InputActionOrigin SteamController_A;
    
public static InputActionOrigin SteamController_B;
    
public static InputActionOrigin SteamController_X;
    
public static InputActionOrigin SteamController_Y;
    
public static InputActionOrigin SteamController_LeftBumper;
    
public static InputActionOrigin SteamController_RightBumper;
    
public static InputActionOrigin SteamController_LeftGrip;
    
public static InputActionOrigin SteamController_RightGrip;
    
public static InputActionOrigin SteamController_Start;
    
public static InputActionOrigin SteamController_Back;
    
public static InputActionOrigin SteamController_LeftPad_Touch;
    
public static InputActionOrigin SteamController_LeftPad_Swipe;
    
public static InputActionOrigin SteamController_LeftPad_Click;
    
public static InputActionOrigin SteamController_LeftPad_DPadNorth;
    
public static InputActionOrigin SteamController_LeftPad_DPadSouth;
    
public static InputActionOrigin SteamController_LeftPad_DPadWest;
    
public static InputActionOrigin SteamController_LeftPad_DPadEast;
    
public static InputActionOrigin SteamController_RightPad_Touch;
    
public static InputActionOrigin SteamController_RightPad_Swipe;
    
public static InputActionOrigin SteamController_RightPad_Click;
    
public static InputActionOrigin SteamController_RightPad_DPadNorth;
    
public static InputActionOrigin SteamController_RightPad_DPadSouth;
    
public static InputActionOrigin SteamController_RightPad_DPadWest;
    
public static InputActionOrigin SteamController_RightPad_DPadEast;
    
public static InputActionOrigin SteamController_LeftTrigger_Pull;
    
public static InputActionOrigin SteamController_LeftTrigger_Click;
    
public static InputActionOrigin SteamController_RightTrigger_Pull;
    
public static InputActionOrigin SteamController_RightTrigger_Click;
    
public static InputActionOrigin SteamController_LeftStick_Move;
    
public static InputActionOrigin SteamController_LeftStick_Click;
    
public static InputActionOrigin SteamController_LeftStick_DPadNorth;
    
public static InputActionOrigin SteamController_LeftStick_DPadSouth;
    
public static InputActionOrigin SteamController_LeftStick_DPadWest;
    
public static InputActionOrigin SteamController_LeftStick_DPadEast;
    
public static InputActionOrigin SteamController_Gyro_Move;
    
public static InputActionOrigin SteamController_Gyro_Pitch;
    
public static InputActionOrigin SteamController_Gyro_Yaw;
    
public static InputActionOrigin SteamController_Gyro_Roll;
    
public static InputActionOrigin SteamController_Reserved0;
    
public static InputActionOrigin SteamController_Reserved1;
    
public static InputActionOrigin SteamController_Reserved2;
    
public static InputActionOrigin SteamController_Reserved3;
    
public static InputActionOrigin SteamController_Reserved4;
    
public static InputActionOrigin SteamController_Reserved5;
    
public static InputActionOrigin SteamController_Reserved6;
    
public static InputActionOrigin SteamController_Reserved7;
    
public static InputActionOrigin SteamController_Reserved8;
    
public static InputActionOrigin SteamController_Reserved9;
    
public static InputActionOrigin SteamController_Reserved10;
    
public static InputActionOrigin PS4_X;
    
public static InputActionOrigin PS4_Circle;
    
public static InputActionOrigin PS4_Triangle;
    
public static InputActionOrigin PS4_Square;
    
public static InputActionOrigin PS4_LeftBumper;
    
public static InputActionOrigin PS4_RightBumper;
    
public static InputActionOrigin PS4_Options;
    
public static InputActionOrigin PS4_Share;
    
public static InputActionOrigin PS4_LeftPad_Touch;
    
public static InputActionOrigin PS4_LeftPad_Swipe;
    
public static InputActionOrigin PS4_LeftPad_Click;
    
public static InputActionOrigin PS4_LeftPad_DPadNorth;
    
public static InputActionOrigin PS4_LeftPad_DPadSouth;
    
public static InputActionOrigin PS4_LeftPad_DPadWest;
    
public static InputActionOrigin PS4_LeftPad_DPadEast;
    
public static InputActionOrigin PS4_RightPad_Touch;
    
public static InputActionOrigin PS4_RightPad_Swipe;
    
public static InputActionOrigin PS4_RightPad_Click;
    
public static InputActionOrigin PS4_RightPad_DPadNorth;
    
public static InputActionOrigin PS4_RightPad_DPadSouth;
    
public static InputActionOrigin PS4_RightPad_DPadWest;
    
public static InputActionOrigin PS4_RightPad_DPadEast;
    
public static InputActionOrigin PS4_CenterPad_Touch;
    
public static InputActionOrigin PS4_CenterPad_Swipe;
    
public static InputActionOrigin PS4_CenterPad_Click;
    
public static InputActionOrigin PS4_CenterPad_DPadNorth;
    
public static InputActionOrigin PS4_CenterPad_DPadSouth;
    
public static InputActionOrigin PS4_CenterPad_DPadWest;
    
public static InputActionOrigin PS4_CenterPad_DPadEast;
    
public static InputActionOrigin PS4_LeftTrigger_Pull;
    
public static InputActionOrigin PS4_LeftTrigger_Click;
    
public static InputActionOrigin PS4_RightTrigger_Pull;
    
public static InputActionOrigin PS4_RightTrigger_Click;
    
public static InputActionOrigin PS4_LeftStick_Move;
    
public static InputActionOrigin PS4_LeftStick_Click;
    
public static InputActionOrigin PS4_LeftStick_DPadNorth;
    
public static InputActionOrigin PS4_LeftStick_DPadSouth;
    
public static InputActionOrigin PS4_LeftStick_DPadWest;
    
public static InputActionOrigin PS4_LeftStick_DPadEast;
    
public static InputActionOrigin PS4_RightStick_Move;
    
public static InputActionOrigin PS4_RightStick_Click;
    
public static InputActionOrigin PS4_RightStick_DPadNorth;
    
public static InputActionOrigin PS4_RightStick_DPadSouth;
    
public static InputActionOrigin PS4_RightStick_DPadWest;
    
public static InputActionOrigin PS4_RightStick_DPadEast;
    
public static InputActionOrigin PS4_DPad_North;
    
public static InputActionOrigin PS4_DPad_South;
    
public static InputActionOrigin PS4_DPad_West;
    
public static InputActionOrigin PS4_DPad_East;
    
public static InputActionOrigin PS4_Gyro_Move;
    
public static InputActionOrigin PS4_Gyro_Pitch;
    
public static InputActionOrigin PS4_Gyro_Yaw;
    
public static InputActionOrigin PS4_Gyro_Roll;
    
public static InputActionOrigin PS4_DPad_Move;
    
public static InputActionOrigin PS4_Reserved1;
    
public static InputActionOrigin PS4_Reserved2;
    
public static InputActionOrigin PS4_Reserved3;
    
public static InputActionOrigin PS4_Reserved4;
    
public static InputActionOrigin PS4_Reserved5;
    
public static InputActionOrigin PS4_Reserved6;
    
public static InputActionOrigin PS4_Reserved7;
    
public static InputActionOrigin PS4_Reserved8;
    
public static InputActionOrigin PS4_Reserved9;
    
public static InputActionOrigin PS4_Reserved10;
    
public static InputActionOrigin XBoxOne_A;
    
public static InputActionOrigin XBoxOne_B;
    
public static InputActionOrigin XBoxOne_X;
    
public static InputActionOrigin XBoxOne_Y;
    
public static InputActionOrigin XBoxOne_LeftBumper;
    
public static InputActionOrigin XBoxOne_RightBumper;
    
public static InputActionOrigin XBoxOne_Menu;
    
public static InputActionOrigin XBoxOne_View;
    
public static InputActionOrigin XBoxOne_LeftTrigger_Pull;
    
public static InputActionOrigin XBoxOne_LeftTrigger_Click;
    
public static InputActionOrigin XBoxOne_RightTrigger_Pull;
    
public static InputActionOrigin XBoxOne_RightTrigger_Click;
    
public static InputActionOrigin XBoxOne_LeftStick_Move;
    
public static InputActionOrigin XBoxOne_LeftStick_Click;
    
public static InputActionOrigin XBoxOne_LeftStick_DPadNorth;
    
public static InputActionOrigin XBoxOne_LeftStick_DPadSouth;
    
public static InputActionOrigin XBoxOne_LeftStick_DPadWest;
    
public static InputActionOrigin XBoxOne_LeftStick_DPadEast;
    
public static InputActionOrigin XBoxOne_RightStick_Move;
    
public static InputActionOrigin XBoxOne_RightStick_Click;
    
public static InputActionOrigin XBoxOne_RightStick_DPadNorth;
    
public static InputActionOrigin XBoxOne_RightStick_DPadSouth;
    
public static InputActionOrigin XBoxOne_RightStick_DPadWest;
    
public static InputActionOrigin XBoxOne_RightStick_DPadEast;
    
public static InputActionOrigin XBoxOne_DPad_North;
    
public static InputActionOrigin XBoxOne_DPad_South;
    
public static InputActionOrigin XBoxOne_DPad_West;
    
public static InputActionOrigin XBoxOne_DPad_East;
    
public static InputActionOrigin XBoxOne_DPad_Move;
    
public static InputActionOrigin XBoxOne_LeftGrip_Lower;
    
public static InputActionOrigin XBoxOne_LeftGrip_Upper;
    
public static InputActionOrigin XBoxOne_RightGrip_Lower;
    
public static InputActionOrigin XBoxOne_RightGrip_Upper;
    
public static InputActionOrigin XBoxOne_Share;
    
public static InputActionOrigin XBoxOne_Reserved6;
    
public static InputActionOrigin XBoxOne_Reserved7;
    
public static InputActionOrigin XBoxOne_Reserved8;
    
public static InputActionOrigin XBoxOne_Reserved9;
    
public static InputActionOrigin XBoxOne_Reserved10;
    
public static InputActionOrigin XBox360_A;
    
public static InputActionOrigin XBox360_B;
    
public static InputActionOrigin XBox360_X;
    
public static InputActionOrigin XBox360_Y;
    
public static InputActionOrigin XBox360_LeftBumper;
    
public static InputActionOrigin XBox360_RightBumper;
    
public static InputActionOrigin XBox360_Start;
    
public static InputActionOrigin XBox360_Back;
    
public static InputActionOrigin XBox360_LeftTrigger_Pull;
    
public static InputActionOrigin XBox360_LeftTrigger_Click;
    
public static InputActionOrigin XBox360_RightTrigger_Pull;
    
public static InputActionOrigin XBox360_RightTrigger_Click;
    
public static InputActionOrigin XBox360_LeftStick_Move;
    
public static InputActionOrigin XBox360_LeftStick_Click;
    
public static InputActionOrigin XBox360_LeftStick_DPadNorth;
    
public static InputActionOrigin XBox360_LeftStick_DPadSouth;
    
public static InputActionOrigin XBox360_LeftStick_DPadWest;
    
public static InputActionOrigin XBox360_LeftStick_DPadEast;
    
public static InputActionOrigin XBox360_RightStick_Move;
    
public static InputActionOrigin XBox360_RightStick_Click;
    
public static InputActionOrigin XBox360_RightStick_DPadNorth;
    
public static InputActionOrigin XBox360_RightStick_DPadSouth;
    
public static InputActionOrigin XBox360_RightStick_DPadWest;
    
public static InputActionOrigin XBox360_RightStick_DPadEast;
    
public static InputActionOrigin XBox360_DPad_North;
    
public static InputActionOrigin XBox360_DPad_South;
    
public static InputActionOrigin XBox360_DPad_West;
    
public static InputActionOrigin XBox360_DPad_East;
    
public static InputActionOrigin XBox360_DPad_Move;
    
public static InputActionOrigin XBox360_Reserved1;
    
public static InputActionOrigin XBox360_Reserved2;
    
public static InputActionOrigin XBox360_Reserved3;
    
public static InputActionOrigin XBox360_Reserved4;
    
public static InputActionOrigin XBox360_Reserved5;
    
public static InputActionOrigin XBox360_Reserved6;
    
public static InputActionOrigin XBox360_Reserved7;
    
public static InputActionOrigin XBox360_Reserved8;
    
public static InputActionOrigin XBox360_Reserved9;
    
public static InputActionOrigin XBox360_Reserved10;
    
public static InputActionOrigin Switch_A;
    
public static InputActionOrigin Switch_B;
    
public static InputActionOrigin Switch_X;
    
public static InputActionOrigin Switch_Y;
    
public static InputActionOrigin Switch_LeftBumper;
    
public static InputActionOrigin Switch_RightBumper;
    
public static InputActionOrigin Switch_Plus;
    
public static InputActionOrigin Switch_Minus;
    
public static InputActionOrigin Switch_Capture;
    
public static InputActionOrigin Switch_LeftTrigger_Pull;
    
public static InputActionOrigin Switch_LeftTrigger_Click;
    
public static InputActionOrigin Switch_RightTrigger_Pull;
    
public static InputActionOrigin Switch_RightTrigger_Click;
    
public static InputActionOrigin Switch_LeftStick_Move;
    
public static InputActionOrigin Switch_LeftStick_Click;
    
public static InputActionOrigin Switch_LeftStick_DPadNorth;
    
public static InputActionOrigin Switch_LeftStick_DPadSouth;
    
public static InputActionOrigin Switch_LeftStick_DPadWest;
    
public static InputActionOrigin Switch_LeftStick_DPadEast;
    
public static InputActionOrigin Switch_RightStick_Move;
    
public static InputActionOrigin Switch_RightStick_Click;
    
public static InputActionOrigin Switch_RightStick_DPadNorth;
    
public static InputActionOrigin Switch_RightStick_DPadSouth;
    
public static InputActionOrigin Switch_RightStick_DPadWest;
    
public static InputActionOrigin Switch_RightStick_DPadEast;
    
public static InputActionOrigin Switch_DPad_North;
    
public static InputActionOrigin Switch_DPad_South;
    
public static InputActionOrigin Switch_DPad_West;
    
public static InputActionOrigin Switch_DPad_East;
    
public static InputActionOrigin Switch_ProGyro_Move;
    
public static InputActionOrigin Switch_ProGyro_Pitch;
    
public static InputActionOrigin Switch_ProGyro_Yaw;
    
public static InputActionOrigin Switch_ProGyro_Roll;
    
public static InputActionOrigin Switch_DPad_Move;
    
public static InputActionOrigin Switch_Reserved1;
    
public static InputActionOrigin Switch_Reserved2;
    
public static InputActionOrigin Switch_Reserved3;
    
public static InputActionOrigin Switch_Reserved4;
    
public static InputActionOrigin Switch_Reserved5;
    
public static InputActionOrigin Switch_Reserved6;
    
public static InputActionOrigin Switch_Reserved7;
    
public static InputActionOrigin Switch_Reserved8;
    
public static InputActionOrigin Switch_Reserved9;
    
public static InputActionOrigin Switch_Reserved10;
    
public static InputActionOrigin Switch_RightGyro_Move;
    
public static InputActionOrigin Switch_RightGyro_Pitch;
    
public static InputActionOrigin Switch_RightGyro_Yaw;
    
public static InputActionOrigin Switch_RightGyro_Roll;
    
public static InputActionOrigin Switch_LeftGyro_Move;
    
public static InputActionOrigin Switch_LeftGyro_Pitch;
    
public static InputActionOrigin Switch_LeftGyro_Yaw;
    
public static InputActionOrigin Switch_LeftGyro_Roll;
    
public static InputActionOrigin Switch_LeftGrip_Lower;
    
public static InputActionOrigin Switch_LeftGrip_Upper;
    
public static InputActionOrigin Switch_RightGrip_Lower;
    
public static InputActionOrigin Switch_RightGrip_Upper;
    
public static InputActionOrigin Switch_JoyConButton_N;
    
public static InputActionOrigin Switch_JoyConButton_E;
    
public static InputActionOrigin Switch_JoyConButton_S;
    
public static InputActionOrigin Switch_JoyConButton_W;
    
public static InputActionOrigin Switch_Reserved15;
    
public static InputActionOrigin Switch_Reserved16;
    
public static InputActionOrigin Switch_Reserved17;
    
public static InputActionOrigin Switch_Reserved18;
    
public static InputActionOrigin Switch_Reserved19;
    
public static InputActionOrigin Switch_Reserved20;
    
public static InputActionOrigin PS5_X;
    
public static InputActionOrigin PS5_Circle;
    
public static InputActionOrigin PS5_Triangle;
    
public static InputActionOrigin PS5_Square;
    
public static InputActionOrigin PS5_LeftBumper;
    
public static InputActionOrigin PS5_RightBumper;
    
public static InputActionOrigin PS5_Option;
    
public static InputActionOrigin PS5_Create;
    
public static InputActionOrigin PS5_Mute;
    
public static InputActionOrigin PS5_LeftPad_Touch;
    
public static InputActionOrigin PS5_LeftPad_Swipe;
    
public static InputActionOrigin PS5_LeftPad_Click;
    
public static InputActionOrigin PS5_LeftPad_DPadNorth;
    
public static InputActionOrigin PS5_LeftPad_DPadSouth;
    
public static InputActionOrigin PS5_LeftPad_DPadWest;
    
public static InputActionOrigin PS5_LeftPad_DPadEast;
    
public static InputActionOrigin PS5_RightPad_Touch;
    
public static InputActionOrigin PS5_RightPad_Swipe;
    
public static InputActionOrigin PS5_RightPad_Click;
    
public static InputActionOrigin PS5_RightPad_DPadNorth;
    
public static InputActionOrigin PS5_RightPad_DPadSouth;
    
public static InputActionOrigin PS5_RightPad_DPadWest;
    
public static InputActionOrigin PS5_RightPad_DPadEast;
    
public static InputActionOrigin PS5_CenterPad_Touch;
    
public static InputActionOrigin PS5_CenterPad_Swipe;
    
public static InputActionOrigin PS5_CenterPad_Click;
    
public static InputActionOrigin PS5_CenterPad_DPadNorth;
    
public static InputActionOrigin PS5_CenterPad_DPadSouth;
    
public static InputActionOrigin PS5_CenterPad_DPadWest;
    
public static InputActionOrigin PS5_CenterPad_DPadEast;
    
public static InputActionOrigin PS5_LeftTrigger_Pull;
    
public static InputActionOrigin PS5_LeftTrigger_Click;
    
public static InputActionOrigin PS5_RightTrigger_Pull;
    
public static InputActionOrigin PS5_RightTrigger_Click;
    
public static InputActionOrigin PS5_LeftStick_Move;
    
public static InputActionOrigin PS5_LeftStick_Click;
    
public static InputActionOrigin PS5_LeftStick_DPadNorth;
    
public static InputActionOrigin PS5_LeftStick_DPadSouth;
    
public static InputActionOrigin PS5_LeftStick_DPadWest;
    
public static InputActionOrigin PS5_LeftStick_DPadEast;
    
public static InputActionOrigin PS5_RightStick_Move;
    
public static InputActionOrigin PS5_RightStick_Click;
    
public static InputActionOrigin PS5_RightStick_DPadNorth;
    
public static InputActionOrigin PS5_RightStick_DPadSouth;
    
public static InputActionOrigin PS5_RightStick_DPadWest;
    
public static InputActionOrigin PS5_RightStick_DPadEast;
    
public static InputActionOrigin PS5_DPad_North;
    
public static InputActionOrigin PS5_DPad_South;
    
public static InputActionOrigin PS5_DPad_West;
    
public static InputActionOrigin PS5_DPad_East;
    
public static InputActionOrigin PS5_Gyro_Move;
    
public static InputActionOrigin PS5_Gyro_Pitch;
    
public static InputActionOrigin PS5_Gyro_Yaw;
    
public static InputActionOrigin PS5_Gyro_Roll;
    
public static InputActionOrigin PS5_DPad_Move;
    
public static InputActionOrigin PS5_LeftGrip;
    
public static InputActionOrigin PS5_RightGrip;
    
public static InputActionOrigin PS5_LeftFn;
    
public static InputActionOrigin PS5_RightFn;
    
public static InputActionOrigin PS5_Reserved5;
    
public static InputActionOrigin PS5_Reserved6;
    
public static InputActionOrigin PS5_Reserved7;
    
public static InputActionOrigin PS5_Reserved8;
    
public static InputActionOrigin PS5_Reserved9;
    
public static InputActionOrigin PS5_Reserved10;
    
public static InputActionOrigin PS5_Reserved11;
    
public static InputActionOrigin PS5_Reserved12;
    
public static InputActionOrigin PS5_Reserved13;
    
public static InputActionOrigin PS5_Reserved14;
    
public static InputActionOrigin PS5_Reserved15;
    
public static InputActionOrigin PS5_Reserved16;
    
public static InputActionOrigin PS5_Reserved17;
    
public static InputActionOrigin PS5_Reserved18;
    
public static InputActionOrigin PS5_Reserved19;
    
public static InputActionOrigin PS5_Reserved20;
    
public static InputActionOrigin SteamDeck_A;
    
public static InputActionOrigin SteamDeck_B;
    
public static InputActionOrigin SteamDeck_X;
    
public static InputActionOrigin SteamDeck_Y;
    
public static InputActionOrigin SteamDeck_L1;
    
public static InputActionOrigin SteamDeck_R1;
    
public static InputActionOrigin SteamDeck_Menu;
    
public static InputActionOrigin SteamDeck_View;
    
public static InputActionOrigin SteamDeck_LeftPad_Touch;
    
public static InputActionOrigin SteamDeck_LeftPad_Swipe;
    
public static InputActionOrigin SteamDeck_LeftPad_Click;
    
public static InputActionOrigin SteamDeck_LeftPad_DPadNorth;
    
public static InputActionOrigin SteamDeck_LeftPad_DPadSouth;
    
public static InputActionOrigin SteamDeck_LeftPad_DPadWest;
    
public static InputActionOrigin SteamDeck_LeftPad_DPadEast;
    
public static InputActionOrigin SteamDeck_RightPad_Touch;
    
public static InputActionOrigin SteamDeck_RightPad_Swipe;
    
public static InputActionOrigin SteamDeck_RightPad_Click;
    
public static InputActionOrigin SteamDeck_RightPad_DPadNorth;
    
public static InputActionOrigin SteamDeck_RightPad_DPadSouth;
    
public static InputActionOrigin SteamDeck_RightPad_DPadWest;
    
public static InputActionOrigin SteamDeck_RightPad_DPadEast;
    
public static InputActionOrigin SteamDeck_L2_SoftPull;
    
public static InputActionOrigin SteamDeck_L2;
    
public static InputActionOrigin SteamDeck_R2_SoftPull;
    
public static InputActionOrigin SteamDeck_R2;
    
public static InputActionOrigin SteamDeck_LeftStick_Move;
    
public static InputActionOrigin SteamDeck_L3;
    
public static InputActionOrigin SteamDeck_LeftStick_DPadNorth;
    
public static InputActionOrigin SteamDeck_LeftStick_DPadSouth;
    
public static InputActionOrigin SteamDeck_LeftStick_DPadWest;
    
public static InputActionOrigin SteamDeck_LeftStick_DPadEast;
    
public static InputActionOrigin SteamDeck_LeftStick_Touch;
    
public static InputActionOrigin SteamDeck_RightStick_Move;
    
public static InputActionOrigin SteamDeck_R3;
    
public static InputActionOrigin SteamDeck_RightStick_DPadNorth;
    
public static InputActionOrigin SteamDeck_RightStick_DPadSouth;
    
public static InputActionOrigin SteamDeck_RightStick_DPadWest;
    
public static InputActionOrigin SteamDeck_RightStick_DPadEast;
    
public static InputActionOrigin SteamDeck_RightStick_Touch;
    
public static InputActionOrigin SteamDeck_L4;
    
public static InputActionOrigin SteamDeck_R4;
    
public static InputActionOrigin SteamDeck_L5;
    
public static InputActionOrigin SteamDeck_R5;
    
public static InputActionOrigin SteamDeck_DPad_Move;
    
public static InputActionOrigin SteamDeck_DPad_North;
    
public static InputActionOrigin SteamDeck_DPad_South;
    
public static InputActionOrigin SteamDeck_DPad_West;
    
public static InputActionOrigin SteamDeck_DPad_East;
    
public static InputActionOrigin SteamDeck_Gyro_Move;
    
public static InputActionOrigin SteamDeck_Gyro_Pitch;
    
public static InputActionOrigin SteamDeck_Gyro_Yaw;
    
public static InputActionOrigin SteamDeck_Gyro_Roll;
    
public static InputActionOrigin SteamDeck_Reserved1;
    
public static InputActionOrigin SteamDeck_Reserved2;
    
public static InputActionOrigin SteamDeck_Reserved3;
    
public static InputActionOrigin SteamDeck_Reserved4;
    
public static InputActionOrigin SteamDeck_Reserved5;
    
public static InputActionOrigin SteamDeck_Reserved6;
    
public static InputActionOrigin SteamDeck_Reserved7;
    
public static InputActionOrigin SteamDeck_Reserved8;
    
public static InputActionOrigin SteamDeck_Reserved9;
    
public static InputActionOrigin SteamDeck_Reserved10;
    
public static InputActionOrigin SteamDeck_Reserved11;
    
public static InputActionOrigin SteamDeck_Reserved12;
    
public static InputActionOrigin SteamDeck_Reserved13;
    
public static InputActionOrigin SteamDeck_Reserved14;
    
public static InputActionOrigin SteamDeck_Reserved15;
    
public static InputActionOrigin SteamDeck_Reserved16;
    
public static InputActionOrigin SteamDeck_Reserved17;
    
public static InputActionOrigin SteamDeck_Reserved18;
    
public static InputActionOrigin SteamDeck_Reserved19;
    
public static InputActionOrigin SteamDeck_Reserved20;
    
public static InputActionOrigin Count;
    
public static InputActionOrigin MaximumPossibleValue;
}
public enum Steamworks.InputSourceMode : Enum {
    
public int value__;
    
public static InputSourceMode None;
    
public static InputSourceMode Dpad;
    
public static InputSourceMode Buttons;
    
public static InputSourceMode FourButtons;
    
public static InputSourceMode AbsoluteMouse;
    
public static InputSourceMode RelativeMouse;
    
public static InputSourceMode JoystickMove;
    
public static InputSourceMode JoystickMouse;
    
public static InputSourceMode JoystickCamera;
    
public static InputSourceMode ScrollWheel;
    
public static InputSourceMode Trigger;
    
public static InputSourceMode TouchMenu;
    
public static InputSourceMode MouseJoystick;
    
public static InputSourceMode MouseRegion;
    
public static InputSourceMode RadialMenu;
    
public static InputSourceMode SingleButton;
    
public static InputSourceMode Switches;
}
public enum Steamworks.InputType : Enum {
    
public int value__;
    
public static InputType Unknown;
    
public static InputType SteamController;
    
public static InputType XBox360Controller;
    
public static InputType XBoxOneController;
    
public static InputType GenericGamepad;
    
public static InputType PS4Controller;
    
public static InputType AppleMFiController;
    
public static InputType AndroidController;
    
public static InputType SwitchJoyConPair;
    
public static InputType SwitchJoyConSingle;
    
public static InputType SwitchProController;
    
public static InputType MobileTouch;
    
public static InputType PS3Controller;
    
public static InputType PS5Controller;
    
public static InputType SteamDeckController;
    
public static InputType Count;
    
public static InputType MaximumPossibleValue;
}
public class Steamworks.InventoryDef : object {
    
internal InventoryDefId _id;
    
internal Dictionary`2<string, string> _properties;
    
private InventoryRecipe[] _recContaining;
    
public int Id { get; }
    
public string Name { get; }
    
public string Description { get; }
    
public string IconUrl { get; }
    
public string IconUrlLarge { get; }
    
public string PriceCategory { get; }
    
public string Type { get; }
    
public bool IsGenerator { get; }
    
public string ExchangeSchema { get; }
    
public bool Marketable { get; }
    
public bool Tradable { get; }
    
public DateTime Created { get; }
    
public DateTime Modified { get; }
    
public IEnumerable`1<KeyValuePair`2<string, string>> Properties { get; }
    
public int LocalPrice { get; }
    
public string LocalPriceFormatted { get; }
    
public int LocalBasePrice { get; }
    
public string LocalBasePriceFormatted { get; }
    public InventoryDef(InventoryDefId defId);
    public int get_Id();
    public string get_Name();
    public string get_Description();
    public string get_IconUrl();
    public string get_IconUrlLarge();
    public string get_PriceCategory();
    public string get_Type();
    public bool get_IsGenerator();
    public string get_ExchangeSchema();
    public InventoryRecipe[] GetRecipes();
    public bool get_Marketable();
    public bool get_Tradable();
    public DateTime get_Created();
    public DateTime get_Modified();
    public string GetProperty(string name);
    public bool GetBoolProperty(string name);
    public T GetProperty(string name);
    [IteratorStateMachineAttribute("Steamworks.InventoryDef/<get_Properties>d__34")]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Properties();
    public int get_LocalPrice();
    public string get_LocalPriceFormatted();
    public int get_LocalBasePrice();
    public string get_LocalBasePriceFormatted();
    public InventoryRecipe[] GetRecipesContainingThis();
    public static bool op_Equality(InventoryDef a, InventoryDef b);
    public static bool op_Inequality(InventoryDef a, InventoryDef b);
    public virtual bool Equals(object p);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(InventoryDef p);
    [CompilerGeneratedAttribute]
private InventoryRecipe <GetRecipes>b__21_0(string x);
    [CompilerGeneratedAttribute]
private bool <GetRecipesContainingThis>b__44_3(InventoryRecipe x);
}
public class Steamworks.InventoryItem : ValueType {
    
internal InventoryItemId _id;
    
internal InventoryDefId _def;
    
internal SteamItemFlags _flags;
    
internal ushort _quantity;
    
internal Dictionary`2<string, string> _properties;
    
public InventoryItemId Id { get; }
    
public InventoryDefId DefId { get; }
    
public int Quantity { get; }
    
public InventoryDef Def { get; }
    
public Dictionary`2<string, string> Properties { get; }
    
public bool IsNoTrade { get; }
    
public bool IsRemoved { get; }
    
public bool IsConsumed { get; }
    
public DateTime Acquired { get; }
    
public string Origin { get; }
    public InventoryItemId get_Id();
    public InventoryDefId get_DefId();
    public int get_Quantity();
    public InventoryDef get_Def();
    public Dictionary`2<string, string> get_Properties();
    public bool get_IsNoTrade();
    public bool get_IsRemoved();
    public bool get_IsConsumed();
    [AsyncStateMachineAttribute("Steamworks.InventoryItem/<ConsumeAsync>d__21")]
public Task`1<Nullable`1<InventoryResult>> ConsumeAsync(int amount);
    [AsyncStateMachineAttribute("Steamworks.InventoryItem/<SplitStackAsync>d__22")]
public Task`1<Nullable`1<InventoryResult>> SplitStackAsync(int quantity);
    [AsyncStateMachineAttribute("Steamworks.InventoryItem/<AddAsync>d__23")]
public Task`1<Nullable`1<InventoryResult>> AddAsync(InventoryItem add, int quantity);
    internal static InventoryItem From(SteamItemDetails_t details);
    internal static Dictionary`2<string, string> GetProperties(SteamInventoryResult_t result, int index);
    public DateTime get_Acquired();
    public string get_Origin();
    public static bool op_Equality(InventoryItem a, InventoryItem b);
    public static bool op_Inequality(InventoryItem a, InventoryItem b);
    public virtual bool Equals(object p);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(InventoryItem p);
}
public class Steamworks.InventoryRecipe : ValueType {
    
public InventoryDef Result;
    
public Ingredient[] Ingredients;
    
public string Source;
    internal static InventoryRecipe FromString(string part, InventoryDef Result);
    internal bool ContainsIngredient(InventoryDef inventoryDef);
    public static bool op_Equality(InventoryRecipe a, InventoryRecipe b);
    public static bool op_Inequality(InventoryRecipe a, InventoryRecipe b);
    public virtual bool Equals(object p);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(InventoryRecipe p);
}
public class Steamworks.InventoryResult : ValueType {
    
internal SteamInventoryResult_t _id;
    [CompilerGeneratedAttribute]

private bool <Expired>k__BackingField;
    
public bool Expired { get; internal set; }
    
public int ItemCount { get; }
    internal InventoryResult(SteamInventoryResult_t id, bool expired);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Expired();
    [CompilerGeneratedAttribute]
internal void set_Expired(bool value);
    public int get_ItemCount();
    public bool BelongsTo(SteamId steamId);
    public InventoryItem[] GetItems(bool includeProperties);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Steamworks.InventoryResult/<GetAsync>d__11")]
internal static Task`1<Nullable`1<InventoryResult>> GetAsync(SteamInventoryResult_t sresult);
    public Byte[] Serialize();
}
public interface Steamworks.ISocketManager {
    public abstract virtual void OnConnecting(Connection connection, ConnectionInfo info);
    public abstract virtual void OnConnected(Connection connection, ConnectionInfo info);
    public abstract virtual void OnDisconnected(Connection connection, ConnectionInfo info);
    public abstract virtual void OnMessage(Connection connection, NetIdentity identity, IntPtr data, int size, long messageNum, long recvTime, int channel);
}
internal class Steamworks.ISteamAppList : SteamInterface {
    internal ISteamAppList(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamAppList_v001();
    public virtual IntPtr GetUserInterfacePointer();
    private static UInt32 _GetNumInstalledApps(IntPtr self);
    internal UInt32 GetNumInstalledApps();
    private static UInt32 _GetInstalledApps(IntPtr self, AppId[] pvecAppID, UInt32 unMaxAppIDs);
    internal UInt32 GetInstalledApps(AppId[] pvecAppID, UInt32 unMaxAppIDs);
    private static int _GetAppName(IntPtr self, AppId nAppID, IntPtr pchName, int cchNameMax);
    internal int GetAppName(AppId nAppID, String& pchName);
    private static int _GetAppInstallDir(IntPtr self, AppId nAppID, IntPtr pchDirectory, int cchNameMax);
    internal int GetAppInstallDir(AppId nAppID, String& pchDirectory);
    private static int _GetAppBuildId(IntPtr self, AppId nAppID);
    internal int GetAppBuildId(AppId nAppID);
}
internal class Steamworks.ISteamApps : SteamInterface {
    internal ISteamApps(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamApps_v008();
    public virtual IntPtr GetUserInterfacePointer();
    private static bool _BIsSubscribed(IntPtr self);
    internal bool BIsSubscribed();
    private static bool _BIsLowViolence(IntPtr self);
    internal bool BIsLowViolence();
    private static bool _BIsCybercafe(IntPtr self);
    internal bool BIsCybercafe();
    private static bool _BIsVACBanned(IntPtr self);
    internal bool BIsVACBanned();
    private static Utf8StringPointer _GetCurrentGameLanguage(IntPtr self);
    internal string GetCurrentGameLanguage();
    private static Utf8StringPointer _GetAvailableGameLanguages(IntPtr self);
    internal string GetAvailableGameLanguages();
    private static bool _BIsSubscribedApp(IntPtr self, AppId appID);
    internal bool BIsSubscribedApp(AppId appID);
    private static bool _BIsDlcInstalled(IntPtr self, AppId appID);
    internal bool BIsDlcInstalled(AppId appID);
    private static UInt32 _GetEarliestPurchaseUnixTime(IntPtr self, AppId nAppID);
    internal UInt32 GetEarliestPurchaseUnixTime(AppId nAppID);
    private static bool _BIsSubscribedFromFreeWeekend(IntPtr self);
    internal bool BIsSubscribedFromFreeWeekend();
    private static int _GetDLCCount(IntPtr self);
    internal int GetDLCCount();
    private static bool _BGetDLCDataByIndex(IntPtr self, int iDLC, AppId& pAppID, Boolean& pbAvailable, IntPtr pchName, int cchNameBufferSize);
    internal bool BGetDLCDataByIndex(int iDLC, AppId& pAppID, Boolean& pbAvailable, String& pchName);
    private static void _InstallDLC(IntPtr self, AppId nAppID);
    internal void InstallDLC(AppId nAppID);
    private static void _UninstallDLC(IntPtr self, AppId nAppID);
    internal void UninstallDLC(AppId nAppID);
    private static void _RequestAppProofOfPurchaseKey(IntPtr self, AppId nAppID);
    internal void RequestAppProofOfPurchaseKey(AppId nAppID);
    private static bool _GetCurrentBetaName(IntPtr self, IntPtr pchName, int cchNameBufferSize);
    internal bool GetCurrentBetaName(String& pchName);
    private static bool _MarkContentCorrupt(IntPtr self, bool bMissingFilesOnly);
    internal bool MarkContentCorrupt(bool bMissingFilesOnly);
    private static UInt32 _GetInstalledDepots(IntPtr self, AppId appID, DepotId_t[] pvecDepots, UInt32 cMaxDepots);
    internal UInt32 GetInstalledDepots(AppId appID, DepotId_t[] pvecDepots, UInt32 cMaxDepots);
    private static UInt32 _GetAppInstallDir(IntPtr self, AppId appID, IntPtr pchFolder, UInt32 cchFolderBufferSize);
    internal UInt32 GetAppInstallDir(AppId appID, String& pchFolder);
    private static bool _BIsAppInstalled(IntPtr self, AppId appID);
    internal bool BIsAppInstalled(AppId appID);
    private static SteamId _GetAppOwner(IntPtr self);
    internal SteamId GetAppOwner();
    private static Utf8StringPointer _GetLaunchQueryParam(IntPtr self, string pchKey);
    internal string GetLaunchQueryParam(string pchKey);
    private static bool _GetDlcDownloadProgress(IntPtr self, AppId nAppID, UInt64& punBytesDownloaded, UInt64& punBytesTotal);
    internal bool GetDlcDownloadProgress(AppId nAppID, UInt64& punBytesDownloaded, UInt64& punBytesTotal);
    private static int _GetAppBuildId(IntPtr self);
    internal int GetAppBuildId();
    private static void _RequestAllProofOfPurchaseKeys(IntPtr self);
    internal void RequestAllProofOfPurchaseKeys();
    private static SteamAPICall_t _GetFileDetails(IntPtr self, string pszFileName);
    internal CallResult`1<FileDetailsResult_t> GetFileDetails(string pszFileName);
    private static int _GetLaunchCommandLine(IntPtr self, IntPtr pszCommandLine, int cubCommandLine);
    internal int GetLaunchCommandLine(String& pszCommandLine);
    private static bool _BIsSubscribedFromFamilySharing(IntPtr self);
    internal bool BIsSubscribedFromFamilySharing();
    private static bool _BIsTimedTrial(IntPtr self, UInt32& punSecondsAllowed, UInt32& punSecondsPlayed);
    internal bool BIsTimedTrial(UInt32& punSecondsAllowed, UInt32& punSecondsPlayed);
    private static bool _SetDlcContext(IntPtr self, AppId nAppID);
    internal bool SetDlcContext(AppId nAppID);
}
internal class Steamworks.ISteamClient : SteamInterface {
    internal ISteamClient(bool IsGameServer);
    private static HSteamPipe _CreateSteamPipe(IntPtr self);
    internal HSteamPipe CreateSteamPipe();
    private static bool _BReleaseSteamPipe(IntPtr self, HSteamPipe hSteamPipe);
    internal bool BReleaseSteamPipe(HSteamPipe hSteamPipe);
    private static HSteamUser _ConnectToGlobalUser(IntPtr self, HSteamPipe hSteamPipe);
    internal HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe);
    private static HSteamUser _CreateLocalUser(IntPtr self, HSteamPipe& phSteamPipe, AccountType eAccountType);
    internal HSteamUser CreateLocalUser(HSteamPipe& phSteamPipe, AccountType eAccountType);
    private static void _ReleaseUser(IntPtr self, HSteamPipe hSteamPipe, HSteamUser hUser);
    internal void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);
    private static IntPtr _GetISteamUser(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamGameServer(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static void _SetLocalIPBinding(IntPtr self, SteamIPAddress& unIP, ushort usPort);
    internal void SetLocalIPBinding(SteamIPAddress& unIP, ushort usPort);
    private static IntPtr _GetISteamFriends(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamUtils(IntPtr self, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamMatchmaking(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamMatchmakingServers(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamGenericInterface(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamUserStats(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamGameServerStats(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamApps(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamNetworking(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamRemoteStorage(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamScreenshots(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamGameSearch(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamGameSearch(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static UInt32 _GetIPCCallCount(IntPtr self);
    internal UInt32 GetIPCCallCount();
    private static void _SetWarningMessageHook(IntPtr self, IntPtr pFunction);
    internal void SetWarningMessageHook(IntPtr pFunction);
    private static bool _BShutdownIfAllPipesClosed(IntPtr self);
    internal bool BShutdownIfAllPipesClosed();
    private static IntPtr _GetISteamHTTP(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamController(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamUGC(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamAppList(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamMusic(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamMusicRemote(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamHTMLSurface(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamInventory(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamVideo(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamParentalSettings(IntPtr self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamParentalSettings(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamInput(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamInput(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamParties(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamParties(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    private static IntPtr _GetISteamRemotePlay(IntPtr self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
    internal IntPtr GetISteamRemotePlay(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);
}
internal class Steamworks.ISteamController : SteamInterface {
    internal ISteamController(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamController_v008();
    public virtual IntPtr GetUserInterfacePointer();
    private static bool _Init(IntPtr self);
    internal bool Init();
    private static bool _Shutdown(IntPtr self);
    internal bool Shutdown();
    private static void _RunFrame(IntPtr self);
    internal void RunFrame();
    private static int _GetConnectedControllers(IntPtr self, ControllerHandle_t[] handlesOut);
    internal int GetConnectedControllers(ControllerHandle_t[] handlesOut);
    private static ControllerActionSetHandle_t _GetActionSetHandle(IntPtr self, string pszActionSetName);
    internal ControllerActionSetHandle_t GetActionSetHandle(string pszActionSetName);
    private static void _ActivateActionSet(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle);
    internal void ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle);
    private static ControllerActionSetHandle_t _GetCurrentActionSet(IntPtr self, ControllerHandle_t controllerHandle);
    internal ControllerActionSetHandle_t GetCurrentActionSet(ControllerHandle_t controllerHandle);
    private static void _ActivateActionSetLayer(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle);
    internal void ActivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle);
    private static void _DeactivateActionSetLayer(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle);
    internal void DeactivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle);
    private static void _DeactivateAllActionSetLayers(IntPtr self, ControllerHandle_t controllerHandle);
    internal void DeactivateAllActionSetLayers(ControllerHandle_t controllerHandle);
    private static int _GetActiveActionSetLayers(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t[] handlesOut);
    internal int GetActiveActionSetLayers(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t[] handlesOut);
    private static ControllerDigitalActionHandle_t _GetDigitalActionHandle(IntPtr self, string pszActionName);
    internal ControllerDigitalActionHandle_t GetDigitalActionHandle(string pszActionName);
    private static DigitalState _GetDigitalActionData(IntPtr self, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle);
    internal DigitalState GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle);
    private static int _GetDigitalActionOrigins(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, ControllerActionOrigin& originsOut);
    internal int GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, ControllerActionOrigin& originsOut);
    private static ControllerAnalogActionHandle_t _GetAnalogActionHandle(IntPtr self, string pszActionName);
    internal ControllerAnalogActionHandle_t GetAnalogActionHandle(string pszActionName);
    private static AnalogState _GetAnalogActionData(IntPtr self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle);
    internal AnalogState GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle);
    private static int _GetAnalogActionOrigins(IntPtr self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, ControllerActionOrigin& originsOut);
    internal int GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, ControllerActionOrigin& originsOut);
    private static Utf8StringPointer _GetGlyphForActionOrigin(IntPtr self, ControllerActionOrigin eOrigin);
    internal string GetGlyphForActionOrigin(ControllerActionOrigin eOrigin);
    private static Utf8StringPointer _GetStringForActionOrigin(IntPtr self, ControllerActionOrigin eOrigin);
    internal string GetStringForActionOrigin(ControllerActionOrigin eOrigin);
    private static void _StopAnalogActionMomentum(IntPtr self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction);
    internal void StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction);
    private static MotionState _GetMotionData(IntPtr self, ControllerHandle_t controllerHandle);
    internal MotionState GetMotionData(ControllerHandle_t controllerHandle);
    private static void _TriggerHapticPulse(IntPtr self, ControllerHandle_t controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);
    internal void TriggerHapticPulse(ControllerHandle_t controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);
    private static void _TriggerRepeatedHapticPulse(IntPtr self, ControllerHandle_t controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, UInt32 nFlags);
    internal void TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, UInt32 nFlags);
    private static void _TriggerVibration(IntPtr self, ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);
    internal void TriggerVibration(ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);
    private static void _SetLEDColor(IntPtr self, ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, UInt32 nFlags);
    internal void SetLEDColor(ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, UInt32 nFlags);
    private static bool _ShowBindingPanel(IntPtr self, ControllerHandle_t controllerHandle);
    internal bool ShowBindingPanel(ControllerHandle_t controllerHandle);
    private static InputType _GetInputTypeForHandle(IntPtr self, ControllerHandle_t controllerHandle);
    internal InputType GetInputTypeForHandle(ControllerHandle_t controllerHandle);
    private static ControllerHandle_t _GetControllerForGamepadIndex(IntPtr self, int nIndex);
    internal ControllerHandle_t GetControllerForGamepadIndex(int nIndex);
    private static int _GetGamepadIndexForController(IntPtr self, ControllerHandle_t ulControllerHandle);
    internal int GetGamepadIndexForController(ControllerHandle_t ulControllerHandle);
    private static Utf8StringPointer _GetStringForXboxOrigin(IntPtr self, XboxOrigin eOrigin);
    internal string GetStringForXboxOrigin(XboxOrigin eOrigin);
    private static Utf8StringPointer _GetGlyphForXboxOrigin(IntPtr self, XboxOrigin eOrigin);
    internal string GetGlyphForXboxOrigin(XboxOrigin eOrigin);
    private static ControllerActionOrigin _GetActionOriginFromXboxOrigin(IntPtr self, ControllerHandle_t controllerHandle, XboxOrigin eOrigin);
    internal ControllerActionOrigin GetActionOriginFromXboxOrigin(ControllerHandle_t controllerHandle, XboxOrigin eOrigin);
    private static ControllerActionOrigin _TranslateActionOrigin(IntPtr self, InputType eDestinationInputType, ControllerActionOrigin eSourceOrigin);
    internal ControllerActionOrigin TranslateActionOrigin(InputType eDestinationInputType, ControllerActionOrigin eSourceOrigin);
    private static bool _GetControllerBindingRevision(IntPtr self, ControllerHandle_t controllerHandle, Int32& pMajor, Int32& pMinor);
    internal bool GetControllerBindingRevision(ControllerHandle_t controllerHandle, Int32& pMajor, Int32& pMinor);
}
internal class Steamworks.ISteamFriends : SteamInterface {
    internal ISteamFriends(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamFriends_v017();
    public virtual IntPtr GetUserInterfacePointer();
    private static Utf8StringPointer _GetPersonaName(IntPtr self);
    internal string GetPersonaName();
    private static SteamAPICall_t _SetPersonaName(IntPtr self, string pchPersonaName);
    internal CallResult`1<SetPersonaNameResponse_t> SetPersonaName(string pchPersonaName);
    private static FriendState _GetPersonaState(IntPtr self);
    internal FriendState GetPersonaState();
    private static int _GetFriendCount(IntPtr self, int iFriendFlags);
    internal int GetFriendCount(int iFriendFlags);
    private static SteamId _GetFriendByIndex(IntPtr self, int iFriend, int iFriendFlags);
    internal SteamId GetFriendByIndex(int iFriend, int iFriendFlags);
    private static Relationship _GetFriendRelationship(IntPtr self, SteamId steamIDFriend);
    internal Relationship GetFriendRelationship(SteamId steamIDFriend);
    private static FriendState _GetFriendPersonaState(IntPtr self, SteamId steamIDFriend);
    internal FriendState GetFriendPersonaState(SteamId steamIDFriend);
    private static Utf8StringPointer _GetFriendPersonaName(IntPtr self, SteamId steamIDFriend);
    internal string GetFriendPersonaName(SteamId steamIDFriend);
    private static bool _GetFriendGamePlayed(IntPtr self, SteamId steamIDFriend, FriendGameInfo_t& pFriendGameInfo);
    internal bool GetFriendGamePlayed(SteamId steamIDFriend, FriendGameInfo_t& pFriendGameInfo);
    private static Utf8StringPointer _GetFriendPersonaNameHistory(IntPtr self, SteamId steamIDFriend, int iPersonaName);
    internal string GetFriendPersonaNameHistory(SteamId steamIDFriend, int iPersonaName);
    private static int _GetFriendSteamLevel(IntPtr self, SteamId steamIDFriend);
    internal int GetFriendSteamLevel(SteamId steamIDFriend);
    private static Utf8StringPointer _GetPlayerNickname(IntPtr self, SteamId steamIDPlayer);
    internal string GetPlayerNickname(SteamId steamIDPlayer);
    private static int _GetFriendsGroupCount(IntPtr self);
    internal int GetFriendsGroupCount();
    private static FriendsGroupID_t _GetFriendsGroupIDByIndex(IntPtr self, int iFG);
    internal FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG);
    private static Utf8StringPointer _GetFriendsGroupName(IntPtr self, FriendsGroupID_t friendsGroupID);
    internal string GetFriendsGroupName(FriendsGroupID_t friendsGroupID);
    private static int _GetFriendsGroupMembersCount(IntPtr self, FriendsGroupID_t friendsGroupID);
    internal int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID);
    private static void _GetFriendsGroupMembersList(IntPtr self, FriendsGroupID_t friendsGroupID, SteamId[] pOutSteamIDMembers, int nMembersCount);
    internal void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, SteamId[] pOutSteamIDMembers, int nMembersCount);
    private static bool _HasFriend(IntPtr self, SteamId steamIDFriend, int iFriendFlags);
    internal bool HasFriend(SteamId steamIDFriend, int iFriendFlags);
    private static int _GetClanCount(IntPtr self);
    internal int GetClanCount();
    private static SteamId _GetClanByIndex(IntPtr self, int iClan);
    internal SteamId GetClanByIndex(int iClan);
    private static Utf8StringPointer _GetClanName(IntPtr self, SteamId steamIDClan);
    internal string GetClanName(SteamId steamIDClan);
    private static Utf8StringPointer _GetClanTag(IntPtr self, SteamId steamIDClan);
    internal string GetClanTag(SteamId steamIDClan);
    private static bool _GetClanActivityCounts(IntPtr self, SteamId steamIDClan, Int32& pnOnline, Int32& pnInGame, Int32& pnChatting);
    internal bool GetClanActivityCounts(SteamId steamIDClan, Int32& pnOnline, Int32& pnInGame, Int32& pnChatting);
    private static SteamAPICall_t _DownloadClanActivityCounts(IntPtr self, SteamId[] psteamIDClans, int cClansToRequest);
    internal CallResult`1<DownloadClanActivityCountsResult_t> DownloadClanActivityCounts(SteamId[] psteamIDClans, int cClansToRequest);
    private static int _GetFriendCountFromSource(IntPtr self, SteamId steamIDSource);
    internal int GetFriendCountFromSource(SteamId steamIDSource);
    private static SteamId _GetFriendFromSourceByIndex(IntPtr self, SteamId steamIDSource, int iFriend);
    internal SteamId GetFriendFromSourceByIndex(SteamId steamIDSource, int iFriend);
    private static bool _IsUserInSource(IntPtr self, SteamId steamIDUser, SteamId steamIDSource);
    internal bool IsUserInSource(SteamId steamIDUser, SteamId steamIDSource);
    private static void _SetInGameVoiceSpeaking(IntPtr self, SteamId steamIDUser, bool bSpeaking);
    internal void SetInGameVoiceSpeaking(SteamId steamIDUser, bool bSpeaking);
    private static void _ActivateGameOverlay(IntPtr self, string pchDialog);
    internal void ActivateGameOverlay(string pchDialog);
    private static void _ActivateGameOverlayToUser(IntPtr self, string pchDialog, SteamId steamID);
    internal void ActivateGameOverlayToUser(string pchDialog, SteamId steamID);
    private static void _ActivateGameOverlayToWebPage(IntPtr self, string pchURL, ActivateGameOverlayToWebPageMode eMode);
    internal void ActivateGameOverlayToWebPage(string pchURL, ActivateGameOverlayToWebPageMode eMode);
    private static void _ActivateGameOverlayToStore(IntPtr self, AppId nAppID, OverlayToStoreFlag eFlag);
    internal void ActivateGameOverlayToStore(AppId nAppID, OverlayToStoreFlag eFlag);
    private static void _SetPlayedWith(IntPtr self, SteamId steamIDUserPlayedWith);
    internal void SetPlayedWith(SteamId steamIDUserPlayedWith);
    private static void _ActivateGameOverlayInviteDialog(IntPtr self, SteamId steamIDLobby);
    internal void ActivateGameOverlayInviteDialog(SteamId steamIDLobby);
    private static int _GetSmallFriendAvatar(IntPtr self, SteamId steamIDFriend);
    internal int GetSmallFriendAvatar(SteamId steamIDFriend);
    private static int _GetMediumFriendAvatar(IntPtr self, SteamId steamIDFriend);
    internal int GetMediumFriendAvatar(SteamId steamIDFriend);
    private static int _GetLargeFriendAvatar(IntPtr self, SteamId steamIDFriend);
    internal int GetLargeFriendAvatar(SteamId steamIDFriend);
    private static bool _RequestUserInformation(IntPtr self, SteamId steamIDUser, bool bRequireNameOnly);
    internal bool RequestUserInformation(SteamId steamIDUser, bool bRequireNameOnly);
    private static SteamAPICall_t _RequestClanOfficerList(IntPtr self, SteamId steamIDClan);
    internal CallResult`1<ClanOfficerListResponse_t> RequestClanOfficerList(SteamId steamIDClan);
    private static SteamId _GetClanOwner(IntPtr self, SteamId steamIDClan);
    internal SteamId GetClanOwner(SteamId steamIDClan);
    private static int _GetClanOfficerCount(IntPtr self, SteamId steamIDClan);
    internal int GetClanOfficerCount(SteamId steamIDClan);
    private static SteamId _GetClanOfficerByIndex(IntPtr self, SteamId steamIDClan, int iOfficer);
    internal SteamId GetClanOfficerByIndex(SteamId steamIDClan, int iOfficer);
    private static UInt32 _GetUserRestrictions(IntPtr self);
    internal UInt32 GetUserRestrictions();
    private static bool _SetRichPresence(IntPtr self, string pchKey, string pchValue);
    internal bool SetRichPresence(string pchKey, string pchValue);
    private static void _ClearRichPresence(IntPtr self);
    internal void ClearRichPresence();
    private static Utf8StringPointer _GetFriendRichPresence(IntPtr self, SteamId steamIDFriend, string pchKey);
    internal string GetFriendRichPresence(SteamId steamIDFriend, string pchKey);
    private static int _GetFriendRichPresenceKeyCount(IntPtr self, SteamId steamIDFriend);
    internal int GetFriendRichPresenceKeyCount(SteamId steamIDFriend);
    private static Utf8StringPointer _GetFriendRichPresenceKeyByIndex(IntPtr self, SteamId steamIDFriend, int iKey);
    internal string GetFriendRichPresenceKeyByIndex(SteamId steamIDFriend, int iKey);
    private static void _RequestFriendRichPresence(IntPtr self, SteamId steamIDFriend);
    internal void RequestFriendRichPresence(SteamId steamIDFriend);
    private static bool _InviteUserToGame(IntPtr self, SteamId steamIDFriend, string pchConnectString);
    internal bool InviteUserToGame(SteamId steamIDFriend, string pchConnectString);
    private static int _GetCoplayFriendCount(IntPtr self);
    internal int GetCoplayFriendCount();
    private static SteamId _GetCoplayFriend(IntPtr self, int iCoplayFriend);
    internal SteamId GetCoplayFriend(int iCoplayFriend);
    private static int _GetFriendCoplayTime(IntPtr self, SteamId steamIDFriend);
    internal int GetFriendCoplayTime(SteamId steamIDFriend);
    private static AppId _GetFriendCoplayGame(IntPtr self, SteamId steamIDFriend);
    internal AppId GetFriendCoplayGame(SteamId steamIDFriend);
    private static SteamAPICall_t _JoinClanChatRoom(IntPtr self, SteamId steamIDClan);
    internal CallResult`1<JoinClanChatRoomCompletionResult_t> JoinClanChatRoom(SteamId steamIDClan);
    private static bool _LeaveClanChatRoom(IntPtr self, SteamId steamIDClan);
    internal bool LeaveClanChatRoom(SteamId steamIDClan);
    private static int _GetClanChatMemberCount(IntPtr self, SteamId steamIDClan);
    internal int GetClanChatMemberCount(SteamId steamIDClan);
    private static SteamId _GetChatMemberByIndex(IntPtr self, SteamId steamIDClan, int iUser);
    internal SteamId GetChatMemberByIndex(SteamId steamIDClan, int iUser);
    private static bool _SendClanChatMessage(IntPtr self, SteamId steamIDClanChat, string pchText);
    internal bool SendClanChatMessage(SteamId steamIDClanChat, string pchText);
    private static int _GetClanChatMessage(IntPtr self, SteamId steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, ChatEntryType& peChatEntryType, SteamId& psteamidChatter);
    internal int GetClanChatMessage(SteamId steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, ChatEntryType& peChatEntryType, SteamId& psteamidChatter);
    private static bool _IsClanChatAdmin(IntPtr self, SteamId steamIDClanChat, SteamId steamIDUser);
    internal bool IsClanChatAdmin(SteamId steamIDClanChat, SteamId steamIDUser);
    private static bool _IsClanChatWindowOpenInSteam(IntPtr self, SteamId steamIDClanChat);
    internal bool IsClanChatWindowOpenInSteam(SteamId steamIDClanChat);
    private static bool _OpenClanChatWindowInSteam(IntPtr self, SteamId steamIDClanChat);
    internal bool OpenClanChatWindowInSteam(SteamId steamIDClanChat);
    private static bool _CloseClanChatWindowInSteam(IntPtr self, SteamId steamIDClanChat);
    internal bool CloseClanChatWindowInSteam(SteamId steamIDClanChat);
    private static bool _SetListenForFriendsMessages(IntPtr self, bool bInterceptEnabled);
    internal bool SetListenForFriendsMessages(bool bInterceptEnabled);
    private static bool _ReplyToFriendMessage(IntPtr self, SteamId steamIDFriend, string pchMsgToSend);
    internal bool ReplyToFriendMessage(SteamId steamIDFriend, string pchMsgToSend);
    private static int _GetFriendMessage(IntPtr self, SteamId steamIDFriend, int iMessageID, IntPtr pvData, int cubData, ChatEntryType& peChatEntryType);
    internal int GetFriendMessage(SteamId steamIDFriend, int iMessageID, IntPtr pvData, int cubData, ChatEntryType& peChatEntryType);
    private static SteamAPICall_t _GetFollowerCount(IntPtr self, SteamId steamID);
    internal CallResult`1<FriendsGetFollowerCount_t> GetFollowerCount(SteamId steamID);
    private static SteamAPICall_t _IsFollowing(IntPtr self, SteamId steamID);
    internal CallResult`1<FriendsIsFollowing_t> IsFollowing(SteamId steamID);
    private static SteamAPICall_t _EnumerateFollowingList(IntPtr self, UInt32 unStartIndex);
    internal CallResult`1<FriendsEnumerateFollowingList_t> EnumerateFollowingList(UInt32 unStartIndex);
    private static bool _IsClanPublic(IntPtr self, SteamId steamIDClan);
    internal bool IsClanPublic(SteamId steamIDClan);
    private static bool _IsClanOfficialGameGroup(IntPtr self, SteamId steamIDClan);
    internal bool IsClanOfficialGameGroup(SteamId steamIDClan);
    private static int _GetNumChatsWithUnreadPriorityMessages(IntPtr self);
    internal int GetNumChatsWithUnreadPriorityMessages();
    private static void _ActivateGameOverlayRemotePlayTogetherInviteDialog(IntPtr self, SteamId steamIDLobby);
    internal void ActivateGameOverlayRemotePlayTogetherInviteDialog(SteamId steamIDLobby);
    private static bool _RegisterProtocolInOverlayBrowser(IntPtr self, string pchProtocol);
    internal bool RegisterProtocolInOverlayBrowser(string pchProtocol);
    private static void _ActivateGameOverlayInviteDialogConnectString(IntPtr self, string pchConnectString);
    internal void ActivateGameOverlayInviteDialogConnectString(string pchConnectString);
    private static SteamAPICall_t _RequestEquippedProfileItems(IntPtr self, SteamId steamID);
    internal CallResult`1<EquippedProfileItems_t> RequestEquippedProfileItems(SteamId steamID);
    private static bool _BHasEquippedProfileItem(IntPtr self, SteamId steamID, CommunityProfileItemType itemType);
    internal bool BHasEquippedProfileItem(SteamId steamID, CommunityProfileItemType itemType);
    private static Utf8StringPointer _GetProfileItemPropertyString(IntPtr self, SteamId steamID, CommunityProfileItemType itemType, CommunityProfileItemProperty prop);
    internal string GetProfileItemPropertyString(SteamId steamID, CommunityProfileItemType itemType, CommunityProfileItemProperty prop);
    private static UInt32 _GetProfileItemPropertyUint(IntPtr self, SteamId steamID, CommunityProfileItemType itemType, CommunityProfileItemProperty prop);
    internal UInt32 GetProfileItemPropertyUint(SteamId steamID, CommunityProfileItemType itemType, CommunityProfileItemProperty prop);
}
internal class Steamworks.ISteamGameSearch : SteamInterface {
    internal ISteamGameSearch(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamGameSearch_v001();
    public virtual IntPtr GetUserInterfacePointer();
    private static GameSearchErrorCode_t _AddGameSearchParams(IntPtr self, string pchKeyToFind, string pchValuesToFind);
    internal GameSearchErrorCode_t AddGameSearchParams(string pchKeyToFind, string pchValuesToFind);
    private static GameSearchErrorCode_t _SearchForGameWithLobby(IntPtr self, SteamId steamIDLobby, int nPlayerMin, int nPlayerMax);
    internal GameSearchErrorCode_t SearchForGameWithLobby(SteamId steamIDLobby, int nPlayerMin, int nPlayerMax);
    private static GameSearchErrorCode_t _SearchForGameSolo(IntPtr self, int nPlayerMin, int nPlayerMax);
    internal GameSearchErrorCode_t SearchForGameSolo(int nPlayerMin, int nPlayerMax);
    private static GameSearchErrorCode_t _AcceptGame(IntPtr self);
    internal GameSearchErrorCode_t AcceptGame();
    private static GameSearchErrorCode_t _DeclineGame(IntPtr self);
    internal GameSearchErrorCode_t DeclineGame();
    private static GameSearchErrorCode_t _RetrieveConnectionDetails(IntPtr self, SteamId steamIDHost, IntPtr pchConnectionDetails, int cubConnectionDetails);
    internal GameSearchErrorCode_t RetrieveConnectionDetails(SteamId steamIDHost, String& pchConnectionDetails);
    private static GameSearchErrorCode_t _EndGameSearch(IntPtr self);
    internal GameSearchErrorCode_t EndGameSearch();
    private static GameSearchErrorCode_t _SetGameHostParams(IntPtr self, string pchKey, string pchValue);
    internal GameSearchErrorCode_t SetGameHostParams(string pchKey, string pchValue);
    private static GameSearchErrorCode_t _SetConnectionDetails(IntPtr self, string pchConnectionDetails, int cubConnectionDetails);
    internal GameSearchErrorCode_t SetConnectionDetails(string pchConnectionDetails, int cubConnectionDetails);
    private static GameSearchErrorCode_t _RequestPlayersForGame(IntPtr self, int nPlayerMin, int nPlayerMax, int nMaxTeamSize);
    internal GameSearchErrorCode_t RequestPlayersForGame(int nPlayerMin, int nPlayerMax, int nMaxTeamSize);
    private static GameSearchErrorCode_t _HostConfirmGameStart(IntPtr self, ulong ullUniqueGameID);
    internal GameSearchErrorCode_t HostConfirmGameStart(ulong ullUniqueGameID);
    private static GameSearchErrorCode_t _CancelRequestPlayersForGame(IntPtr self);
    internal GameSearchErrorCode_t CancelRequestPlayersForGame();
    private static GameSearchErrorCode_t _SubmitPlayerResult(IntPtr self, ulong ullUniqueGameID, SteamId steamIDPlayer, PlayerResult_t EPlayerResult);
    internal GameSearchErrorCode_t SubmitPlayerResult(ulong ullUniqueGameID, SteamId steamIDPlayer, PlayerResult_t EPlayerResult);
    private static GameSearchErrorCode_t _EndGame(IntPtr self, ulong ullUniqueGameID);
    internal GameSearchErrorCode_t EndGame(ulong ullUniqueGameID);
}
internal class Steamworks.ISteamGameServer : SteamInterface {
    internal ISteamGameServer(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamGameServer_v015();
    public virtual IntPtr GetServerInterfacePointer();
    private static void _SetProduct(IntPtr self, string pszProduct);
    internal void SetProduct(string pszProduct);
    private static void _SetGameDescription(IntPtr self, string pszGameDescription);
    internal void SetGameDescription(string pszGameDescription);
    private static void _SetModDir(IntPtr self, string pszModDir);
    internal void SetModDir(string pszModDir);
    private static void _SetDedicatedServer(IntPtr self, bool bDedicated);
    internal void SetDedicatedServer(bool bDedicated);
    private static void _LogOn(IntPtr self, string pszToken);
    internal void LogOn(string pszToken);
    private static void _LogOnAnonymous(IntPtr self);
    internal void LogOnAnonymous();
    private static void _LogOff(IntPtr self);
    internal void LogOff();
    private static bool _BLoggedOn(IntPtr self);
    internal bool BLoggedOn();
    private static bool _BSecure(IntPtr self);
    internal bool BSecure();
    private static SteamId _GetSteamID(IntPtr self);
    internal SteamId GetSteamID();
    private static bool _WasRestartRequested(IntPtr self);
    internal bool WasRestartRequested();
    private static void _SetMaxPlayerCount(IntPtr self, int cPlayersMax);
    internal void SetMaxPlayerCount(int cPlayersMax);
    private static void _SetBotPlayerCount(IntPtr self, int cBotplayers);
    internal void SetBotPlayerCount(int cBotplayers);
    private static void _SetServerName(IntPtr self, string pszServerName);
    internal void SetServerName(string pszServerName);
    private static void _SetMapName(IntPtr self, string pszMapName);
    internal void SetMapName(string pszMapName);
    private static void _SetPasswordProtected(IntPtr self, bool bPasswordProtected);
    internal void SetPasswordProtected(bool bPasswordProtected);
    private static void _SetSpectatorPort(IntPtr self, ushort unSpectatorPort);
    internal void SetSpectatorPort(ushort unSpectatorPort);
    private static void _SetSpectatorServerName(IntPtr self, string pszSpectatorServerName);
    internal void SetSpectatorServerName(string pszSpectatorServerName);
    private static void _ClearAllKeyValues(IntPtr self);
    internal void ClearAllKeyValues();
    private static void _SetKeyValue(IntPtr self, string pKey, string pValue);
    internal void SetKeyValue(string pKey, string pValue);
    private static void _SetGameTags(IntPtr self, string pchGameTags);
    internal void SetGameTags(string pchGameTags);
    private static void _SetGameData(IntPtr self, string pchGameData);
    internal void SetGameData(string pchGameData);
    private static void _SetRegion(IntPtr self, string pszRegion);
    internal void SetRegion(string pszRegion);
    private static void _SetAdvertiseServerActive(IntPtr self, bool bActive);
    internal void SetAdvertiseServerActive(bool bActive);
    private static HAuthTicket _GetAuthSessionTicket(IntPtr self, IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket, NetIdentity& pSnid);
    internal HAuthTicket GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket, NetIdentity& pSnid);
    private static BeginAuthResult _BeginAuthSession(IntPtr self, IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID);
    internal BeginAuthResult BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID);
    private static void _EndAuthSession(IntPtr self, SteamId steamID);
    internal void EndAuthSession(SteamId steamID);
    private static void _CancelAuthTicket(IntPtr self, HAuthTicket hAuthTicket);
    internal void CancelAuthTicket(HAuthTicket hAuthTicket);
    private static UserHasLicenseForAppResult _UserHasLicenseForApp(IntPtr self, SteamId steamID, AppId appID);
    internal UserHasLicenseForAppResult UserHasLicenseForApp(SteamId steamID, AppId appID);
    private static bool _RequestUserGroupStatus(IntPtr self, SteamId steamIDUser, SteamId steamIDGroup);
    internal bool RequestUserGroupStatus(SteamId steamIDUser, SteamId steamIDGroup);
    private static void _GetGameplayStats(IntPtr self);
    internal void GetGameplayStats();
    private static SteamAPICall_t _GetServerReputation(IntPtr self);
    internal CallResult`1<GSReputation_t> GetServerReputation();
    private static SteamIPAddress _GetPublicIP(IntPtr self);
    internal SteamIPAddress GetPublicIP();
    private static bool _HandleIncomingPacket(IntPtr self, IntPtr pData, int cbData, UInt32 srcIP, ushort srcPort);
    internal bool HandleIncomingPacket(IntPtr pData, int cbData, UInt32 srcIP, ushort srcPort);
    private static int _GetNextOutgoingPacket(IntPtr self, IntPtr pOut, int cbMaxOut, UInt32& pNetAdr, UInt16& pPort);
    internal int GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, UInt32& pNetAdr, UInt16& pPort);
    private static SteamAPICall_t _AssociateWithClan(IntPtr self, SteamId steamIDClan);
    internal CallResult`1<AssociateWithClanResult_t> AssociateWithClan(SteamId steamIDClan);
    private static SteamAPICall_t _ComputeNewPlayerCompatibility(IntPtr self, SteamId steamIDNewPlayer);
    internal CallResult`1<ComputeNewPlayerCompatibilityResult_t> ComputeNewPlayerCompatibility(SteamId steamIDNewPlayer);
    private static bool _SendUserConnectAndAuthenticate_DEPRECATED(IntPtr self, UInt32 unIPClient, IntPtr pvAuthBlob, UInt32 cubAuthBlobSize, SteamId& pSteamIDUser);
    internal bool SendUserConnectAndAuthenticate_DEPRECATED(UInt32 unIPClient, IntPtr pvAuthBlob, UInt32 cubAuthBlobSize, SteamId& pSteamIDUser);
    private static SteamId _CreateUnauthenticatedUserConnection(IntPtr self);
    internal SteamId CreateUnauthenticatedUserConnection();
    private static void _SendUserDisconnect_DEPRECATED(IntPtr self, SteamId steamIDUser);
    internal void SendUserDisconnect_DEPRECATED(SteamId steamIDUser);
    private static bool _BUpdateUserData(IntPtr self, SteamId steamIDUser, string pchPlayerName, UInt32 uScore);
    internal bool BUpdateUserData(SteamId steamIDUser, string pchPlayerName, UInt32 uScore);
}
internal class Steamworks.ISteamGameServerStats : SteamInterface {
    internal ISteamGameServerStats(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamGameServerStats_v001();
    public virtual IntPtr GetServerInterfacePointer();
    private static SteamAPICall_t _RequestUserStats(IntPtr self, SteamId steamIDUser);
    internal CallResult`1<GSStatsReceived_t> RequestUserStats(SteamId steamIDUser);
    private static bool _GetUserStat(IntPtr self, SteamId steamIDUser, string pchName, Int32& pData);
    internal bool GetUserStat(SteamId steamIDUser, string pchName, Int32& pData);
    private static bool _GetUserStat(IntPtr self, SteamId steamIDUser, string pchName, Single& pData);
    internal bool GetUserStat(SteamId steamIDUser, string pchName, Single& pData);
    private static bool _GetUserAchievement(IntPtr self, SteamId steamIDUser, string pchName, Boolean& pbAchieved);
    internal bool GetUserAchievement(SteamId steamIDUser, string pchName, Boolean& pbAchieved);
    private static bool _SetUserStat(IntPtr self, SteamId steamIDUser, string pchName, int nData);
    internal bool SetUserStat(SteamId steamIDUser, string pchName, int nData);
    private static bool _SetUserStat(IntPtr self, SteamId steamIDUser, string pchName, float fData);
    internal bool SetUserStat(SteamId steamIDUser, string pchName, float fData);
    private static bool _UpdateUserAvgRateStat(IntPtr self, SteamId steamIDUser, string pchName, float flCountThisSession, double dSessionLength);
    internal bool UpdateUserAvgRateStat(SteamId steamIDUser, string pchName, float flCountThisSession, double dSessionLength);
    private static bool _SetUserAchievement(IntPtr self, SteamId steamIDUser, string pchName);
    internal bool SetUserAchievement(SteamId steamIDUser, string pchName);
    private static bool _ClearUserAchievement(IntPtr self, SteamId steamIDUser, string pchName);
    internal bool ClearUserAchievement(SteamId steamIDUser, string pchName);
    private static SteamAPICall_t _StoreUserStats(IntPtr self, SteamId steamIDUser);
    internal CallResult`1<GSStatsStored_t> StoreUserStats(SteamId steamIDUser);
}
internal class Steamworks.ISteamHTMLSurface : SteamInterface {
    internal ISteamHTMLSurface(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamHTMLSurface_v005();
    public virtual IntPtr GetUserInterfacePointer();
    private static bool _Init(IntPtr self);
    internal bool Init();
    private static bool _Shutdown(IntPtr self);
    internal bool Shutdown();
    private static SteamAPICall_t _CreateBrowser(IntPtr self, string pchUserAgent, string pchUserCSS);
    internal CallResult`1<HTML_BrowserReady_t> CreateBrowser(string pchUserAgent, string pchUserCSS);
    private static void _RemoveBrowser(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void RemoveBrowser(HHTMLBrowser unBrowserHandle);
    private static void _LoadURL(IntPtr self, HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData);
    internal void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData);
    private static void _SetSize(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 unWidth, UInt32 unHeight);
    internal void SetSize(HHTMLBrowser unBrowserHandle, UInt32 unWidth, UInt32 unHeight);
    private static void _StopLoad(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void StopLoad(HHTMLBrowser unBrowserHandle);
    private static void _Reload(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void Reload(HHTMLBrowser unBrowserHandle);
    private static void _GoBack(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void GoBack(HHTMLBrowser unBrowserHandle);
    private static void _GoForward(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void GoForward(HHTMLBrowser unBrowserHandle);
    private static void _AddHeader(IntPtr self, HHTMLBrowser unBrowserHandle, string pchKey, string pchValue);
    internal void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue);
    private static void _ExecuteJavascript(IntPtr self, HHTMLBrowser unBrowserHandle, string pchScript);
    internal void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript);
    private static void _MouseUp(IntPtr self, HHTMLBrowser unBrowserHandle, IntPtr eMouseButton);
    internal void MouseUp(HHTMLBrowser unBrowserHandle, IntPtr eMouseButton);
    private static void _MouseDown(IntPtr self, HHTMLBrowser unBrowserHandle, IntPtr eMouseButton);
    internal void MouseDown(HHTMLBrowser unBrowserHandle, IntPtr eMouseButton);
    private static void _MouseDoubleClick(IntPtr self, HHTMLBrowser unBrowserHandle, IntPtr eMouseButton);
    internal void MouseDoubleClick(HHTMLBrowser unBrowserHandle, IntPtr eMouseButton);
    private static void _MouseMove(IntPtr self, HHTMLBrowser unBrowserHandle, int x, int y);
    internal void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y);
    private static void _MouseWheel(IntPtr self, HHTMLBrowser unBrowserHandle, int nDelta);
    internal void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta);
    private static void _KeyDown(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 nNativeKeyCode, IntPtr eHTMLKeyModifiers, bool bIsSystemKey);
    internal void KeyDown(HHTMLBrowser unBrowserHandle, UInt32 nNativeKeyCode, IntPtr eHTMLKeyModifiers, bool bIsSystemKey);
    private static void _KeyUp(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 nNativeKeyCode, IntPtr eHTMLKeyModifiers);
    internal void KeyUp(HHTMLBrowser unBrowserHandle, UInt32 nNativeKeyCode, IntPtr eHTMLKeyModifiers);
    private static void _KeyChar(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 cUnicodeChar, IntPtr eHTMLKeyModifiers);
    internal void KeyChar(HHTMLBrowser unBrowserHandle, UInt32 cUnicodeChar, IntPtr eHTMLKeyModifiers);
    private static void _SetHorizontalScroll(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 nAbsolutePixelScroll);
    internal void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, UInt32 nAbsolutePixelScroll);
    private static void _SetVerticalScroll(IntPtr self, HHTMLBrowser unBrowserHandle, UInt32 nAbsolutePixelScroll);
    internal void SetVerticalScroll(HHTMLBrowser unBrowserHandle, UInt32 nAbsolutePixelScroll);
    private static void _SetKeyFocus(IntPtr self, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);
    internal void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);
    private static void _ViewSource(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void ViewSource(HHTMLBrowser unBrowserHandle);
    private static void _CopyToClipboard(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void CopyToClipboard(HHTMLBrowser unBrowserHandle);
    private static void _PasteFromClipboard(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void PasteFromClipboard(HHTMLBrowser unBrowserHandle);
    private static void _Find(IntPtr self, HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse);
    internal void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse);
    private static void _StopFind(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void StopFind(HHTMLBrowser unBrowserHandle);
    private static void _GetLinkAtPosition(IntPtr self, HHTMLBrowser unBrowserHandle, int x, int y);
    internal void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y);
    private static void _SetCookie(IntPtr self, string pchHostname, string pchKey, string pchValue, string pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly);
    internal void SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly);
    private static void _SetPageScaleFactor(IntPtr self, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);
    internal void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);
    private static void _SetBackgroundMode(IntPtr self, HHTMLBrowser unBrowserHandle, bool bBackgroundMode);
    internal void SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode);
    private static void _SetDPIScalingFactor(IntPtr self, HHTMLBrowser unBrowserHandle, float flDPIScaling);
    internal void SetDPIScalingFactor(HHTMLBrowser unBrowserHandle, float flDPIScaling);
    private static void _OpenDeveloperTools(IntPtr self, HHTMLBrowser unBrowserHandle);
    internal void OpenDeveloperTools(HHTMLBrowser unBrowserHandle);
    private static void _AllowStartRequest(IntPtr self, HHTMLBrowser unBrowserHandle, bool bAllowed);
    internal void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed);
    private static void _JSDialogResponse(IntPtr self, HHTMLBrowser unBrowserHandle, bool bResult);
    internal void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult);
    private static void _FileLoadDialogResponse(IntPtr self, HHTMLBrowser unBrowserHandle, string pchSelectedFiles);
    internal void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, string pchSelectedFiles);
}
internal class Steamworks.ISteamHTTP : SteamInterface {
    internal ISteamHTTP(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamHTTP_v003();
    public virtual IntPtr GetUserInterfacePointer();
    internal static IntPtr SteamAPI_SteamGameServerHTTP_v003();
    public virtual IntPtr GetServerInterfacePointer();
    private static HTTPRequestHandle _CreateHTTPRequest(IntPtr self, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);
    internal HTTPRequestHandle CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);
    private static bool _SetHTTPRequestContextValue(IntPtr self, HTTPRequestHandle hRequest, ulong ulContextValue);
    internal bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);
    private static bool _SetHTTPRequestNetworkActivityTimeout(IntPtr self, HTTPRequestHandle hRequest, UInt32 unTimeoutSeconds);
    internal bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, UInt32 unTimeoutSeconds);
    private static bool _SetHTTPRequestHeaderValue(IntPtr self, HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue);
    internal bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue);
    private static bool _SetHTTPRequestGetOrPostParameter(IntPtr self, HTTPRequestHandle hRequest, string pchParamName, string pchParamValue);
    internal bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue);
    private static bool _SendHTTPRequest(IntPtr self, HTTPRequestHandle hRequest, SteamAPICall_t& pCallHandle);
    internal bool SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t& pCallHandle);
    private static bool _SendHTTPRequestAndStreamResponse(IntPtr self, HTTPRequestHandle hRequest, SteamAPICall_t& pCallHandle);
    internal bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t& pCallHandle);
    private static bool _DeferHTTPRequest(IntPtr self, HTTPRequestHandle hRequest);
    internal bool DeferHTTPRequest(HTTPRequestHandle hRequest);
    private static bool _PrioritizeHTTPRequest(IntPtr self, HTTPRequestHandle hRequest);
    internal bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest);
    private static bool _GetHTTPResponseHeaderSize(IntPtr self, HTTPRequestHandle hRequest, string pchHeaderName, UInt32& unResponseHeaderSize);
    internal bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, UInt32& unResponseHeaderSize);
    private static bool _GetHTTPResponseHeaderValue(IntPtr self, HTTPRequestHandle hRequest, string pchHeaderName, Byte& pHeaderValueBuffer, UInt32 unBufferSize);
    internal bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, Byte& pHeaderValueBuffer, UInt32 unBufferSize);
    private static bool _GetHTTPResponseBodySize(IntPtr self, HTTPRequestHandle hRequest, UInt32& unBodySize);
    internal bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, UInt32& unBodySize);
    private static bool _GetHTTPResponseBodyData(IntPtr self, HTTPRequestHandle hRequest, Byte& pBodyDataBuffer, UInt32 unBufferSize);
    internal bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, Byte& pBodyDataBuffer, UInt32 unBufferSize);
    private static bool _GetHTTPStreamingResponseBodyData(IntPtr self, HTTPRequestHandle hRequest, UInt32 cOffset, Byte& pBodyDataBuffer, UInt32 unBufferSize);
    internal bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, UInt32 cOffset, Byte& pBodyDataBuffer, UInt32 unBufferSize);
    private static bool _ReleaseHTTPRequest(IntPtr self, HTTPRequestHandle hRequest);
    internal bool ReleaseHTTPRequest(HTTPRequestHandle hRequest);
    private static bool _GetHTTPDownloadProgressPct(IntPtr self, HTTPRequestHandle hRequest, Single& pflPercentOut);
    internal bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, Single& pflPercentOut);
    private static bool _SetHTTPRequestRawPostBody(IntPtr self, HTTPRequestHandle hRequest, string pchContentType, Byte[] pubBody, UInt32 unBodyLen);
    internal bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, Byte[] pubBody, UInt32 unBodyLen);
    private static HTTPCookieContainerHandle _CreateCookieContainer(IntPtr self, bool bAllowResponsesToModify);
    internal HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify);
    private static bool _ReleaseCookieContainer(IntPtr self, HTTPCookieContainerHandle hCookieContainer);
    internal bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);
    private static bool _SetCookie(IntPtr self, HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie);
    internal bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie);
    private static bool _SetHTTPRequestCookieContainer(IntPtr self, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);
    internal bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);
    private static bool _SetHTTPRequestUserAgentInfo(IntPtr self, HTTPRequestHandle hRequest, string pchUserAgentInfo);
    internal bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo);
    private static bool _SetHTTPRequestRequiresVerifiedCertificate(IntPtr self, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);
    internal bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);
    private static bool _SetHTTPRequestAbsoluteTimeoutMS(IntPtr self, HTTPRequestHandle hRequest, UInt32 unMilliseconds);
    internal bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, UInt32 unMilliseconds);
    private static bool _GetHTTPRequestWasTimedOut(IntPtr self, HTTPRequestHandle hRequest, Boolean& pbWasTimedOut);
    internal bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, Boolean& pbWasTimedOut);
}
internal class Steamworks.ISteamInput : SteamInterface {
    internal ISteamInput(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamInput_v006();
    public virtual IntPtr GetUserInterfacePointer();
    private static bool _Init(IntPtr self, bool bExplicitlyCallRunFrame);
    internal bool Init(bool bExplicitlyCallRunFrame);
    private static bool _Shutdown(IntPtr self);
    internal bool Shutdown();
    private static bool _SetInputActionManifestFilePath(IntPtr self, string pchInputActionManifestAbsolutePath);
    internal bool SetInputActionManifestFilePath(string pchInputActionManifestAbsolutePath);
    private static void _RunFrame(IntPtr self, bool bReservedValue);
    internal void RunFrame(bool bReservedValue);
    private static bool _BWaitForData(IntPtr self, bool bWaitForever, UInt32 unTimeout);
    internal bool BWaitForData(bool bWaitForever, UInt32 unTimeout);
    private static bool _BNewDataAvailable(IntPtr self);
    internal bool BNewDataAvailable();
    private static int _GetConnectedControllers(IntPtr self, InputHandle_t[] handlesOut);
    internal int GetConnectedControllers(InputHandle_t[] handlesOut);
    private static void _EnableDeviceCallbacks(IntPtr self);
    internal void EnableDeviceCallbacks();
    private static InputActionSetHandle_t _GetActionSetHandle(IntPtr self, string pszActionSetName);
    internal InputActionSetHandle_t GetActionSetHandle(string pszActionSetName);
    private static void _ActivateActionSet(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle);
    internal void ActivateActionSet(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle);
    private static InputActionSetHandle_t _GetCurrentActionSet(IntPtr self, InputHandle_t inputHandle);
    internal InputActionSetHandle_t GetCurrentActionSet(InputHandle_t inputHandle);
    private static void _ActivateActionSetLayer(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle);
    internal void ActivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle);
    private static void _DeactivateActionSetLayer(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle);
    internal void DeactivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle);
    private static void _DeactivateAllActionSetLayers(IntPtr self, InputHandle_t inputHandle);
    internal void DeactivateAllActionSetLayers(InputHandle_t inputHandle);
    private static int _GetActiveActionSetLayers(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t[] handlesOut);
    internal int GetActiveActionSetLayers(InputHandle_t inputHandle, InputActionSetHandle_t[] handlesOut);
    private static InputDigitalActionHandle_t _GetDigitalActionHandle(IntPtr self, string pszActionName);
    internal InputDigitalActionHandle_t GetDigitalActionHandle(string pszActionName);
    private static DigitalState _GetDigitalActionData(IntPtr self, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle);
    internal DigitalState GetDigitalActionData(InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle);
    private static int _GetDigitalActionOrigins(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, InputActionOrigin& originsOut);
    internal int GetDigitalActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, InputActionOrigin& originsOut);
    private static Utf8StringPointer _GetStringForDigitalActionName(IntPtr self, InputDigitalActionHandle_t eActionHandle);
    internal string GetStringForDigitalActionName(InputDigitalActionHandle_t eActionHandle);
    private static InputAnalogActionHandle_t _GetAnalogActionHandle(IntPtr self, string pszActionName);
    internal InputAnalogActionHandle_t GetAnalogActionHandle(string pszActionName);
    private static AnalogState _GetAnalogActionData(IntPtr self, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle);
    internal AnalogState GetAnalogActionData(InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle);
    private static int _GetAnalogActionOrigins(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, InputActionOrigin& originsOut);
    internal int GetAnalogActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, InputActionOrigin& originsOut);
    private static Utf8StringPointer _GetGlyphPNGForActionOrigin(IntPtr self, InputActionOrigin eOrigin, GlyphSize eSize, UInt32 unFlags);
    internal string GetGlyphPNGForActionOrigin(InputActionOrigin eOrigin, GlyphSize eSize, UInt32 unFlags);
    private static Utf8StringPointer _GetGlyphSVGForActionOrigin(IntPtr self, InputActionOrigin eOrigin, UInt32 unFlags);
    internal string GetGlyphSVGForActionOrigin(InputActionOrigin eOrigin, UInt32 unFlags);
    private static Utf8StringPointer _GetGlyphForActionOrigin_Legacy(IntPtr self, InputActionOrigin eOrigin);
    internal string GetGlyphForActionOrigin_Legacy(InputActionOrigin eOrigin);
    private static Utf8StringPointer _GetStringForActionOrigin(IntPtr self, InputActionOrigin eOrigin);
    internal string GetStringForActionOrigin(InputActionOrigin eOrigin);
    private static Utf8StringPointer _GetStringForAnalogActionName(IntPtr self, InputAnalogActionHandle_t eActionHandle);
    internal string GetStringForAnalogActionName(InputAnalogActionHandle_t eActionHandle);
    private static void _StopAnalogActionMomentum(IntPtr self, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction);
    internal void StopAnalogActionMomentum(InputHandle_t inputHandle, InputAnalogActionHandle_t eAction);
    private static MotionState _GetMotionData(IntPtr self, InputHandle_t inputHandle);
    internal MotionState GetMotionData(InputHandle_t inputHandle);
    private static void _TriggerVibration(IntPtr self, InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed);
    internal void TriggerVibration(InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed);
    private static void _TriggerVibrationExtended(IntPtr self, InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed, ushort usLeftTriggerSpeed, ushort usRightTriggerSpeed);
    internal void TriggerVibrationExtended(InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed, ushort usLeftTriggerSpeed, ushort usRightTriggerSpeed);
    private static void _TriggerSimpleHapticEvent(IntPtr self, InputHandle_t inputHandle, ControllerHapticLocation eHapticLocation, byte nIntensity, char nGainDB, byte nOtherIntensity, char nOtherGainDB);
    internal void TriggerSimpleHapticEvent(InputHandle_t inputHandle, ControllerHapticLocation eHapticLocation, byte nIntensity, char nGainDB, byte nOtherIntensity, char nOtherGainDB);
    private static void _SetLEDColor(IntPtr self, InputHandle_t inputHandle, byte nColorR, byte nColorG, byte nColorB, UInt32 nFlags);
    internal void SetLEDColor(InputHandle_t inputHandle, byte nColorR, byte nColorG, byte nColorB, UInt32 nFlags);
    private static void _Legacy_TriggerHapticPulse(IntPtr self, InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);
    internal void Legacy_TriggerHapticPulse(InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);
    private static void _Legacy_TriggerRepeatedHapticPulse(IntPtr self, InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, UInt32 nFlags);
    internal void Legacy_TriggerRepeatedHapticPulse(InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, UInt32 nFlags);
    private static bool _ShowBindingPanel(IntPtr self, InputHandle_t inputHandle);
    internal bool ShowBindingPanel(InputHandle_t inputHandle);
    private static InputType _GetInputTypeForHandle(IntPtr self, InputHandle_t inputHandle);
    internal InputType GetInputTypeForHandle(InputHandle_t inputHandle);
    private static InputHandle_t _GetControllerForGamepadIndex(IntPtr self, int nIndex);
    internal InputHandle_t GetControllerForGamepadIndex(int nIndex);
    private static int _GetGamepadIndexForController(IntPtr self, InputHandle_t ulinputHandle);
    internal int GetGamepadIndexForController(InputHandle_t ulinputHandle);
    private static Utf8StringPointer _GetStringForXboxOrigin(IntPtr self, XboxOrigin eOrigin);
    internal string GetStringForXboxOrigin(XboxOrigin eOrigin);
    private static Utf8StringPointer _GetGlyphForXboxOrigin(IntPtr self, XboxOrigin eOrigin);
    internal string GetGlyphForXboxOrigin(XboxOrigin eOrigin);
    private static InputActionOrigin _GetActionOriginFromXboxOrigin(IntPtr self, InputHandle_t inputHandle, XboxOrigin eOrigin);
    internal InputActionOrigin GetActionOriginFromXboxOrigin(InputHandle_t inputHandle, XboxOrigin eOrigin);
    private static InputActionOrigin _TranslateActionOrigin(IntPtr self, InputType eDestinationInputType, InputActionOrigin eSourceOrigin);
    internal InputActionOrigin TranslateActionOrigin(InputType eDestinationInputType, InputActionOrigin eSourceOrigin);
    private static bool _GetDeviceBindingRevision(IntPtr self, InputHandle_t inputHandle, Int32& pMajor, Int32& pMinor);
    internal bool GetDeviceBindingRevision(InputHandle_t inputHandle, Int32& pMajor, Int32& pMinor);
    private static UInt32 _GetRemotePlaySessionID(IntPtr self, InputHandle_t inputHandle);
    internal UInt32 GetRemotePlaySessionID(InputHandle_t inputHandle);
    private static ushort _GetSessionInputConfigurationSettings(IntPtr self);
    internal ushort GetSessionInputConfigurationSettings();
}
internal class Steamworks.ISteamInventory : SteamInterface {
    internal ISteamInventory(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamInventory_v003();
    public virtual IntPtr GetUserInterfacePointer();
    internal static IntPtr SteamAPI_SteamGameServerInventory_v003();
    public virtual IntPtr GetServerInterfacePointer();
    private static Result _GetResultStatus(IntPtr self, SteamInventoryResult_t resultHandle);
    internal Result GetResultStatus(SteamInventoryResult_t resultHandle);
    private static bool _GetResultItems(IntPtr self, SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, UInt32& punOutItemsArraySize);
    internal bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, UInt32& punOutItemsArraySize);
    private static bool _GetResultItemProperty(IntPtr self, SteamInventoryResult_t resultHandle, UInt32 unItemIndex, string pchPropertyName, IntPtr pchValueBuffer, UInt32& punValueBufferSizeOut);
    internal bool GetResultItemProperty(SteamInventoryResult_t resultHandle, UInt32 unItemIndex, string pchPropertyName, String& pchValueBuffer, UInt32& punValueBufferSizeOut);
    private static UInt32 _GetResultTimestamp(IntPtr self, SteamInventoryResult_t resultHandle);
    internal UInt32 GetResultTimestamp(SteamInventoryResult_t resultHandle);
    private static bool _CheckResultSteamID(IntPtr self, SteamInventoryResult_t resultHandle, SteamId steamIDExpected);
    internal bool CheckResultSteamID(SteamInventoryResult_t resultHandle, SteamId steamIDExpected);
    private static void _DestroyResult(IntPtr self, SteamInventoryResult_t resultHandle);
    internal void DestroyResult(SteamInventoryResult_t resultHandle);
    private static bool _GetAllItems(IntPtr self, SteamInventoryResult_t& pResultHandle);
    internal bool GetAllItems(SteamInventoryResult_t& pResultHandle);
    private static bool _GetItemsByID(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryItemId& pInstanceIDs, UInt32 unCountInstanceIDs);
    internal bool GetItemsByID(SteamInventoryResult_t& pResultHandle, InventoryItemId& pInstanceIDs, UInt32 unCountInstanceIDs);
    private static bool _SerializeResult(IntPtr self, SteamInventoryResult_t resultHandle, IntPtr pOutBuffer, UInt32& punOutBufferSize);
    internal bool SerializeResult(SteamInventoryResult_t resultHandle, IntPtr pOutBuffer, UInt32& punOutBufferSize);
    private static bool _DeserializeResult(IntPtr self, SteamInventoryResult_t& pOutResultHandle, IntPtr pBuffer, UInt32 unBufferSize, bool bRESERVED_MUST_BE_FALSE);
    internal bool DeserializeResult(SteamInventoryResult_t& pOutResultHandle, IntPtr pBuffer, UInt32 unBufferSize, bool bRESERVED_MUST_BE_FALSE);
    private static bool _GenerateItems(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayItemDefs, UInt32[] punArrayQuantity, UInt32 unArrayLength);
    internal bool GenerateItems(SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayItemDefs, UInt32[] punArrayQuantity, UInt32 unArrayLength);
    private static bool _GrantPromoItems(IntPtr self, SteamInventoryResult_t& pResultHandle);
    internal bool GrantPromoItems(SteamInventoryResult_t& pResultHandle);
    private static bool _AddPromoItem(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId itemDef);
    internal bool AddPromoItem(SteamInventoryResult_t& pResultHandle, InventoryDefId itemDef);
    private static bool _AddPromoItems(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayItemDefs, UInt32 unArrayLength);
    internal bool AddPromoItems(SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayItemDefs, UInt32 unArrayLength);
    private static bool _ConsumeItem(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryItemId itemConsume, UInt32 unQuantity);
    internal bool ConsumeItem(SteamInventoryResult_t& pResultHandle, InventoryItemId itemConsume, UInt32 unQuantity);
    private static bool _ExchangeItems(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayGenerate, UInt32[] punArrayGenerateQuantity, UInt32 unArrayGenerateLength, InventoryItemId[] pArrayDestroy, UInt32[] punArrayDestroyQuantity, UInt32 unArrayDestroyLength);
    internal bool ExchangeItems(SteamInventoryResult_t& pResultHandle, InventoryDefId[] pArrayGenerate, UInt32[] punArrayGenerateQuantity, UInt32 unArrayGenerateLength, InventoryItemId[] pArrayDestroy, UInt32[] punArrayDestroyQuantity, UInt32 unArrayDestroyLength);
    private static bool _TransferItemQuantity(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryItemId itemIdSource, UInt32 unQuantity, InventoryItemId itemIdDest);
    internal bool TransferItemQuantity(SteamInventoryResult_t& pResultHandle, InventoryItemId itemIdSource, UInt32 unQuantity, InventoryItemId itemIdDest);
    private static void _SendItemDropHeartbeat(IntPtr self);
    internal void SendItemDropHeartbeat();
    private static bool _TriggerItemDrop(IntPtr self, SteamInventoryResult_t& pResultHandle, InventoryDefId dropListDefinition);
    internal bool TriggerItemDrop(SteamInventoryResult_t& pResultHandle, InventoryDefId dropListDefinition);
    private static bool _TradeItems(IntPtr self, SteamInventoryResult_t& pResultHandle, SteamId steamIDTradePartner, InventoryItemId[] pArrayGive, UInt32[] pArrayGiveQuantity, UInt32 nArrayGiveLength, InventoryItemId[] pArrayGet, UInt32[] pArrayGetQuantity, UInt32 nArrayGetLength);
    internal bool TradeItems(SteamInventoryResult_t& pResultHandle, SteamId steamIDTradePartner, InventoryItemId[] pArrayGive, UInt32[] pArrayGiveQuantity, UInt32 nArrayGiveLength, InventoryItemId[] pArrayGet, UInt32[] pArrayGetQuantity, UInt32 nArrayGetLength);
    private static bool _LoadItemDefinitions(IntPtr self);
    internal bool LoadItemDefinitions();
    private static bool _GetItemDefinitionIDs(IntPtr self, InventoryDefId[] pItemDefIDs, UInt32& punItemDefIDsArraySize);
    internal bool GetItemDefinitionIDs(InventoryDefId[] pItemDefIDs, UInt32& punItemDefIDsArraySize);
    private static bool _GetItemDefinitionProperty(IntPtr self, InventoryDefId iDefinition, string pchPropertyName, IntPtr pchValueBuffer, UInt32& punValueBufferSizeOut);
    internal bool GetItemDefinitionProperty(InventoryDefId iDefinition, string pchPropertyName, String& pchValueBuffer, UInt32& punValueBufferSizeOut);
    private static SteamAPICall_t _RequestEligiblePromoItemDefinitionsIDs(IntPtr self, SteamId steamID);
    internal CallResult`1<SteamInventoryEligiblePromoItemDefIDs_t> RequestEligiblePromoItemDefinitionsIDs(SteamId steamID);
    private static bool _GetEligiblePromoItemDefinitionIDs(IntPtr self, SteamId steamID, InventoryDefId[] pItemDefIDs, UInt32& punItemDefIDsArraySize);
    internal bool GetEligiblePromoItemDefinitionIDs(SteamId steamID, InventoryDefId[] pItemDefIDs, UInt32& punItemDefIDsArraySize);
    private static SteamAPICall_t _StartPurchase(IntPtr self, InventoryDefId[] pArrayItemDefs, UInt32[] punArrayQuantity, UInt32 unArrayLength);
    internal CallResult`1<SteamInventoryStartPurchaseResult_t> StartPurchase(InventoryDefId[] pArrayItemDefs, UInt32[] punArrayQuantity, UInt32 unArrayLength);
    private static SteamAPICall_t _RequestPrices(IntPtr self);
    internal CallResult`1<SteamInventoryRequestPricesResult_t> RequestPrices();
    private static UInt32 _GetNumItemsWithPrices(IntPtr self);
    internal UInt32 GetNumItemsWithPrices();
    private static bool _GetItemsWithPrices(IntPtr self, InventoryDefId[] pArrayItemDefs, UInt64[] pCurrentPrices, UInt64[] pBasePrices, UInt32 unArrayLength);
    internal bool GetItemsWithPrices(InventoryDefId[] pArrayItemDefs, UInt64[] pCurrentPrices, UInt64[] pBasePrices, UInt32 unArrayLength);
    private static bool _GetItemPrice(IntPtr self, InventoryDefId iDefinition, UInt64& pCurrentPrice, UInt64& pBasePrice);
    internal bool GetItemPrice(InventoryDefId iDefinition, UInt64& pCurrentPrice, UInt64& pBasePrice);
    private static SteamInventoryUpdateHandle_t _StartUpdateProperties(IntPtr self);
    internal SteamInventoryUpdateHandle_t StartUpdateProperties();
    private static bool _RemoveProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName);
    internal bool RemoveProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName);
    private static bool _SetProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, string pchPropertyValue);
    internal bool SetProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, string pchPropertyValue);
    private static bool _SetProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, bool bValue);
    internal bool SetProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, bool bValue);
    private static bool _SetProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, long nValue);
    internal bool SetProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, long nValue);
    private static bool _SetProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, float flValue);
    internal bool SetProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, string pchPropertyName, float flValue);
    private static bool _SubmitUpdateProperties(IntPtr self, SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t& pResultHandle);
    internal bool SubmitUpdateProperties(SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t& pResultHandle);
    private static bool _InspectItem(IntPtr self, SteamInventoryResult_t& pResultHandle, string pchItemToken);
    internal bool InspectItem(SteamInventoryResult_t& pResultHandle, string pchItemToken);
}
internal class Steamworks.ISteamMatchmaking : SteamInterface {
    internal ISteamMatchmaking(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamMatchmaking_v009();
    public virtual IntPtr GetUserInterfacePointer();
    private static int _GetFavoriteGameCount(IntPtr self);
    internal int GetFavoriteGameCount();
    private static bool _GetFavoriteGame(IntPtr self, int iGame, AppId& pnAppID, UInt32& pnIP, UInt16& pnConnPort, UInt16& pnQueryPort, UInt32& punFlags, UInt32& pRTime32LastPlayedOnServer);
    internal bool GetFavoriteGame(int iGame, AppId& pnAppID, UInt32& pnIP, UInt16& pnConnPort, UInt16& pnQueryPort, UInt32& punFlags, UInt32& pRTime32LastPlayedOnServer);
    private static int _AddFavoriteGame(IntPtr self, AppId nAppID, UInt32 nIP, ushort nConnPort, ushort nQueryPort, UInt32 unFlags, UInt32 rTime32LastPlayedOnServer);
    internal int AddFavoriteGame(AppId nAppID, UInt32 nIP, ushort nConnPort, ushort nQueryPort, UInt32 unFlags, UInt32 rTime32LastPlayedOnServer);
    private static bool _RemoveFavoriteGame(IntPtr self, AppId nAppID, UInt32 nIP, ushort nConnPort, ushort nQueryPort, UInt32 unFlags);
    internal bool RemoveFavoriteGame(AppId nAppID, UInt32 nIP, ushort nConnPort, ushort nQueryPort, UInt32 unFlags);
    private static SteamAPICall_t _RequestLobbyList(IntPtr self);
    internal CallResult`1<LobbyMatchList_t> RequestLobbyList();
    private static void _AddRequestLobbyListStringFilter(IntPtr self, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);
    internal void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);
    private static void _AddRequestLobbyListNumericalFilter(IntPtr self, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);
    internal void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);
    private static void _AddRequestLobbyListNearValueFilter(IntPtr self, string pchKeyToMatch, int nValueToBeCloseTo);
    internal void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo);
    private static void _AddRequestLobbyListFilterSlotsAvailable(IntPtr self, int nSlotsAvailable);
    internal void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);
    private static void _AddRequestLobbyListDistanceFilter(IntPtr self, LobbyDistanceFilter eLobbyDistanceFilter);
    internal void AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter);
    private static void _AddRequestLobbyListResultCountFilter(IntPtr self, int cMaxResults);
    internal void AddRequestLobbyListResultCountFilter(int cMaxResults);
    private static void _AddRequestLobbyListCompatibleMembersFilter(IntPtr self, SteamId steamIDLobby);
    internal void AddRequestLobbyListCompatibleMembersFilter(SteamId steamIDLobby);
    private static SteamId _GetLobbyByIndex(IntPtr self, int iLobby);
    internal SteamId GetLobbyByIndex(int iLobby);
    private static SteamAPICall_t _CreateLobby(IntPtr self, LobbyType eLobbyType, int cMaxMembers);
    internal CallResult`1<LobbyCreated_t> CreateLobby(LobbyType eLobbyType, int cMaxMembers);
    private static SteamAPICall_t _JoinLobby(IntPtr self, SteamId steamIDLobby);
    internal CallResult`1<LobbyEnter_t> JoinLobby(SteamId steamIDLobby);
    private static void _LeaveLobby(IntPtr self, SteamId steamIDLobby);
    internal void LeaveLobby(SteamId steamIDLobby);
    private static bool _InviteUserToLobby(IntPtr self, SteamId steamIDLobby, SteamId steamIDInvitee);
    internal bool InviteUserToLobby(SteamId steamIDLobby, SteamId steamIDInvitee);
    private static int _GetNumLobbyMembers(IntPtr self, SteamId steamIDLobby);
    internal int GetNumLobbyMembers(SteamId steamIDLobby);
    private static SteamId _GetLobbyMemberByIndex(IntPtr self, SteamId steamIDLobby, int iMember);
    internal SteamId GetLobbyMemberByIndex(SteamId steamIDLobby, int iMember);
    private static Utf8StringPointer _GetLobbyData(IntPtr self, SteamId steamIDLobby, string pchKey);
    internal string GetLobbyData(SteamId steamIDLobby, string pchKey);
    private static bool _SetLobbyData(IntPtr self, SteamId steamIDLobby, string pchKey, string pchValue);
    internal bool SetLobbyData(SteamId steamIDLobby, string pchKey, string pchValue);
    private static int _GetLobbyDataCount(IntPtr self, SteamId steamIDLobby);
    internal int GetLobbyDataCount(SteamId steamIDLobby);
    private static bool _GetLobbyDataByIndex(IntPtr self, SteamId steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);
    internal bool GetLobbyDataByIndex(SteamId steamIDLobby, int iLobbyData, String& pchKey, String& pchValue);
    private static bool _DeleteLobbyData(IntPtr self, SteamId steamIDLobby, string pchKey);
    internal bool DeleteLobbyData(SteamId steamIDLobby, string pchKey);
    private static Utf8StringPointer _GetLobbyMemberData(IntPtr self, SteamId steamIDLobby, SteamId steamIDUser, string pchKey);
    internal string GetLobbyMemberData(SteamId steamIDLobby, SteamId steamIDUser, string pchKey);
    private static void _SetLobbyMemberData(IntPtr self, SteamId steamIDLobby, string pchKey, string pchValue);
    internal void SetLobbyMemberData(SteamId steamIDLobby, string pchKey, string pchValue);
    private static bool _SendLobbyChatMsg(IntPtr self, SteamId steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);
    internal bool SendLobbyChatMsg(SteamId steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);
    private static int _GetLobbyChatEntry(IntPtr self, SteamId steamIDLobby, int iChatID, SteamId& pSteamIDUser, IntPtr pvData, int cubData, ChatEntryType& peChatEntryType);
    internal int GetLobbyChatEntry(SteamId steamIDLobby, int iChatID, SteamId& pSteamIDUser, IntPtr pvData, int cubData, ChatEntryType& peChatEntryType);
    private static bool _RequestLobbyData(IntPtr self, SteamId steamIDLobby);
    internal bool RequestLobbyData(SteamId steamIDLobby);
    private static void _SetLobbyGameServer(IntPtr self, SteamId steamIDLobby, UInt32 unGameServerIP, ushort unGameServerPort, SteamId steamIDGameServer);
    internal void SetLobbyGameServer(SteamId steamIDLobby, UInt32 unGameServerIP, ushort unGameServerPort, SteamId steamIDGameServer);
    private static bool _GetLobbyGameServer(IntPtr self, SteamId steamIDLobby, UInt32& punGameServerIP, UInt16& punGameServerPort, SteamId& psteamIDGameServer);
    internal bool GetLobbyGameServer(SteamId steamIDLobby, UInt32& punGameServerIP, UInt16& punGameServerPort, SteamId& psteamIDGameServer);
    private static bool _SetLobbyMemberLimit(IntPtr self, SteamId steamIDLobby, int cMaxMembers);
    internal bool SetLobbyMemberLimit(SteamId steamIDLobby, int cMaxMembers);
    private static int _GetLobbyMemberLimit(IntPtr self, SteamId steamIDLobby);
    internal int GetLobbyMemberLimit(SteamId steamIDLobby);
    private static bool _SetLobbyType(IntPtr self, SteamId steamIDLobby, LobbyType eLobbyType);
    internal bool SetLobbyType(SteamId steamIDLobby, LobbyType eLobbyType);
    private static bool _SetLobbyJoinable(IntPtr self, SteamId steamIDLobby, bool bLobbyJoinable);
    internal bool SetLobbyJoinable(SteamId steamIDLobby, bool bLobbyJoinable);
    private static SteamId _GetLobbyOwner(IntPtr self, SteamId steamIDLobby);
    internal SteamId GetLobbyOwner(SteamId steamIDLobby);
    private static bool _SetLobbyOwner(IntPtr self, SteamId steamIDLobby, SteamId steamIDNewOwner);
    internal bool SetLobbyOwner(SteamId steamIDLobby, SteamId steamIDNewOwner);
    private static bool _SetLinkedLobby(IntPtr self, SteamId steamIDLobby, SteamId steamIDLobbyDependent);
    internal bool SetLinkedLobby(SteamId steamIDLobby, SteamId steamIDLobbyDependent);
}
internal class Steamworks.ISteamMatchmakingPingResponse : SteamInterface {
    internal ISteamMatchmakingPingResponse(bool IsGameServer);
    private static void _ServerResponded(IntPtr self, gameserveritem_t& server);
    internal void ServerResponded(gameserveritem_t& server);
    private static void _ServerFailedToRespond(IntPtr self);
    internal void ServerFailedToRespond();
}
internal class Steamworks.ISteamMatchmakingPlayersResponse : SteamInterface {
    internal ISteamMatchmakingPlayersResponse(bool IsGameServer);
    private static void _AddPlayerToList(IntPtr self, string pchName, int nScore, float flTimePlayed);
    internal void AddPlayerToList(string pchName, int nScore, float flTimePlayed);
    private static void _PlayersFailedToRespond(IntPtr self);
    internal void PlayersFailedToRespond();
    private static void _PlayersRefreshComplete(IntPtr self);
    internal void PlayersRefreshComplete();
}
internal class Steamworks.ISteamMatchmakingRulesResponse : SteamInterface {
    internal ISteamMatchmakingRulesResponse(bool IsGameServer);
    private static void _RulesResponded(IntPtr self, string pchRule, string pchValue);
    internal void RulesResponded(string pchRule, string pchValue);
    private static void _RulesFailedToRespond(IntPtr self);
    internal void RulesFailedToRespond();
    private static void _RulesRefreshComplete(IntPtr self);
    internal void RulesRefreshComplete();
}
internal class Steamworks.ISteamMatchmakingServerListResponse : SteamInterface {
    internal ISteamMatchmakingServerListResponse(bool IsGameServer);
    private static void _ServerResponded(IntPtr self, HServerListRequest hRequest, int iServer);
    internal void ServerResponded(HServerListRequest hRequest, int iServer);
    private static void _ServerFailedToRespond(IntPtr self, HServerListRequest hRequest, int iServer);
    internal void ServerFailedToRespond(HServerListRequest hRequest, int iServer);
    private static void _RefreshComplete(IntPtr self, HServerListRequest hRequest, MatchMakingServerResponse response);
    internal void RefreshComplete(HServerListRequest hRequest, MatchMakingServerResponse response);
}
internal class Steamworks.ISteamMatchmakingServers : SteamInterface {
    
private static int hasSuccessfulResponseOffset;
    internal ISteamMatchmakingServers(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamMatchmakingServers_v002();
    public virtual IntPtr GetUserInterfacePointer();
    private static HServerListRequest _RequestInternetServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    internal HServerListRequest RequestInternetServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    private static HServerListRequest _RequestLANServerList(IntPtr self, AppId iApp, IntPtr pRequestServersResponse);
    internal HServerListRequest RequestLANServerList(AppId iApp, IntPtr pRequestServersResponse);
    private static HServerListRequest _RequestFriendsServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    internal HServerListRequest RequestFriendsServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    private static HServerListRequest _RequestFavoritesServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    internal HServerListRequest RequestFavoritesServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    private static HServerListRequest _RequestHistoryServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    internal HServerListRequest RequestHistoryServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    private static HServerListRequest _RequestSpectatorServerList(IntPtr self, AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    internal HServerListRequest RequestSpectatorServerList(AppId iApp, MatchMakingKeyValuePair[]& ppchFilters, UInt32 nFilters, IntPtr pRequestServersResponse);
    private static void _ReleaseRequest(IntPtr self, HServerListRequest hServerListRequest);
    internal void ReleaseRequest(HServerListRequest hServerListRequest);
    private static IntPtr _GetServerDetails(IntPtr self, HServerListRequest hRequest, int iServer);
    internal gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer);
    private static void _CancelQuery(IntPtr self, HServerListRequest hRequest);
    internal void CancelQuery(HServerListRequest hRequest);
    private static void _RefreshQuery(IntPtr self, HServerListRequest hRequest);
    internal void RefreshQuery(HServerListRequest hRequest);
    private static bool _IsRefreshing(IntPtr self, HServerListRequest hRequest);
    internal bool IsRefreshing(HServerListRequest hRequest);
    private static int _GetServerCount(IntPtr self, HServerListRequest hRequest);
    internal int GetServerCount(HServerListRequest hRequest);
    private static void _RefreshServer(IntPtr self, HServerListRequest hRequest, int iServer);
    internal void RefreshServer(HServerListRequest hRequest, int iServer);
    private static HServerQuery _PingServer(IntPtr self, UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse);
    internal HServerQuery PingServer(UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse);
    private static HServerQuery _PlayerDetails(IntPtr self, UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse);
    internal HServerQuery PlayerDetails(UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse);
    private static HServerQuery _ServerRules(IntPtr self, UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse);
    internal HServerQuery ServerRules(UInt32 unIP, ushort usPort, IntPtr pRequestServersResponse);
    private static void _CancelServerQuery(IntPtr self, HServerQuery hServerQuery);
    internal void CancelServerQuery(HServerQuery hServerQuery);
    internal bool HasServerResponded(HServerListRequest hRequest, int iServer);
}
internal class Steamworks.ISteamMusic : SteamInterface {
    internal ISteamMusic(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamMusic_v001();
    public virtual IntPtr GetUserInterfacePointer();
    private static bool _BIsEnabled(IntPtr self);
    internal bool BIsEnabled();
    private static bool _BIsPlaying(IntPtr self);
    internal bool BIsPlaying();
    private static MusicStatus _GetPlaybackStatus(IntPtr self);
    internal MusicStatus GetPlaybackStatus();
    private static void _Play(IntPtr self);
    internal void Play();
    private static void _Pause(IntPtr self);
    internal void Pause();
    private static void _PlayPrevious(IntPtr self);
    internal void PlayPrevious();
    private static void _PlayNext(IntPtr self);
    internal void PlayNext();
    private static void _SetVolume(IntPtr self, float flVolume);
    internal void SetVolume(float flVolume);
    private static float _GetVolume(IntPtr self);
    internal float GetVolume();
}
internal class Steamworks.ISteamMusicRemote : SteamInterface {
    internal ISteamMusicRemote(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamMusicRemote_v001();
    public virtual IntPtr GetUserInterfacePointer();
    private static bool _RegisterSteamMusicRemote(IntPtr self, string pchName);
    internal bool RegisterSteamMusicRemote(string pchName);
    private static bool _DeregisterSteamMusicRemote(IntPtr self);
    internal bool DeregisterSteamMusicRemote();
    private static bool _BIsCurrentMusicRemote(IntPtr self);
    internal bool BIsCurrentMusicRemote();
    private static bool _BActivationSuccess(IntPtr self, bool bValue);
    internal bool BActivationSuccess(bool bValue);
    private static bool _SetDisplayName(IntPtr self, string pchDisplayName);
    internal bool SetDisplayName(string pchDisplayName);
    private static bool _SetPNGIcon_64x64(IntPtr self, IntPtr pvBuffer, UInt32 cbBufferLength);
    internal bool SetPNGIcon_64x64(IntPtr pvBuffer, UInt32 cbBufferLength);
    private static bool _EnablePlayPrevious(IntPtr self, bool bValue);
    internal bool EnablePlayPrevious(bool bValue);
    private static bool _EnablePlayNext(IntPtr self, bool bValue);
    internal bool EnablePlayNext(bool bValue);
    private static bool _EnableShuffled(IntPtr self, bool bValue);
    internal bool EnableShuffled(bool bValue);
    private static bool _EnableLooped(IntPtr self, bool bValue);
    internal bool EnableLooped(bool bValue);
    private static bool _EnableQueue(IntPtr self, bool bValue);
    internal bool EnableQueue(bool bValue);
    private static bool _EnablePlaylists(IntPtr self, bool bValue);
    internal bool EnablePlaylists(bool bValue);
    private static bool _UpdatePlaybackStatus(IntPtr self, MusicStatus nStatus);
    internal bool UpdatePlaybackStatus(MusicStatus nStatus);
    private static bool _UpdateShuffled(IntPtr self, bool bValue);
    internal bool UpdateShuffled(bool bValue);
    private static bool _UpdateLooped(IntPtr self, bool bValue);
    internal bool UpdateLooped(bool bValue);
    private static bool _UpdateVolume(IntPtr self, float flValue);
    internal bool UpdateVolume(float flValue);
    private static bool _CurrentEntryWillChange(IntPtr self);
    internal bool CurrentEntryWillChange();
    private static bool _CurrentEntryIsAvailable(IntPtr self, bool bAvailable);
    internal bool CurrentEntryIsAvailable(bool bAvailable);
    private static bool _UpdateCurrentEntryText(IntPtr self, string pchText);
    internal bool UpdateCurrentEntryText(string pchText);
    private static bool _UpdateCurrentEntryElapsedSeconds(IntPtr self, int nValue);
    internal bool UpdateCurrentEntryElapsedSeconds(int nValue);
    private static bool _UpdateCurrentEntryCoverArt(IntPtr self, IntPtr pvBuffer, UInt32 cbBufferLength);
    internal bool UpdateCurrentEntryCoverArt(IntPtr pvBuffer, UInt32 cbBufferLength);
    private static bool _CurrentEntryDidChange(IntPtr self);
    internal bool CurrentEntryDidChange();
    private static bool _QueueWillChange(IntPtr self);
    internal bool QueueWillChange();
    private static bool _ResetQueueEntries(IntPtr self);
    internal bool ResetQueueEntries();
    private static bool _SetQueueEntry(IntPtr self, int nID, int nPosition, string pchEntryText);
    internal bool SetQueueEntry(int nID, int nPosition, string pchEntryText);
    private static bool _SetCurrentQueueEntry(IntPtr self, int nID);
    internal bool SetCurrentQueueEntry(int nID);
    private static bool _QueueDidChange(IntPtr self);
    internal bool QueueDidChange();
    private static bool _PlaylistWillChange(IntPtr self);
    internal bool PlaylistWillChange();
    private static bool _ResetPlaylistEntries(IntPtr self);
    internal bool ResetPlaylistEntries();
    private static bool _SetPlaylistEntry(IntPtr self, int nID, int nPosition, string pchEntryText);
    internal bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText);
    private static bool _SetCurrentPlaylistEntry(IntPtr self, int nID);
    internal bool SetCurrentPlaylistEntry(int nID);
    private static bool _PlaylistDidChange(IntPtr self);
    internal bool PlaylistDidChange();
}
internal class Steamworks.ISteamNetworking : SteamInterface {
    internal ISteamNetworking(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamNetworking_v006();
    public virtual IntPtr GetUserInterfacePointer();
    internal static IntPtr SteamAPI_SteamGameServerNetworking_v006();
    public virtual IntPtr GetServerInterfacePointer();
    private static bool _SendP2PPacket(IntPtr self, SteamId steamIDRemote, IntPtr pubData, UInt32 cubData, P2PSend eP2PSendType, int nChannel);
    internal bool SendP2PPacket(SteamId steamIDRemote, IntPtr pubData, UInt32 cubData, P2PSend eP2PSendType, int nChannel);
    private static bool _IsP2PPacketAvailable(IntPtr self, UInt32& pcubMsgSize, int nChannel);
    internal bool IsP2PPacketAvailable(UInt32& pcubMsgSize, int nChannel);
    private static bool _ReadP2PPacket(IntPtr self, IntPtr pubDest, UInt32 cubDest, UInt32& pcubMsgSize, SteamId& psteamIDRemote, int nChannel);
    internal bool ReadP2PPacket(IntPtr pubDest, UInt32 cubDest, UInt32& pcubMsgSize, SteamId& psteamIDRemote, int nChannel);
    private static bool _AcceptP2PSessionWithUser(IntPtr self, SteamId steamIDRemote);
    internal bool AcceptP2PSessionWithUser(SteamId steamIDRemote);
    private static bool _CloseP2PSessionWithUser(IntPtr self, SteamId steamIDRemote);
    internal bool CloseP2PSessionWithUser(SteamId steamIDRemote);
    private static bool _CloseP2PChannelWithUser(IntPtr self, SteamId steamIDRemote, int nChannel);
    internal bool CloseP2PChannelWithUser(SteamId steamIDRemote, int nChannel);
    private static bool _GetP2PSessionState(IntPtr self, SteamId steamIDRemote, P2PSessionState_t& pConnectionState);
    internal bool GetP2PSessionState(SteamId steamIDRemote, P2PSessionState_t& pConnectionState);
    private static bool _AllowP2PPacketRelay(IntPtr self, bool bAllow);
    internal bool AllowP2PPacketRelay(bool bAllow);
    private static SNetSocket_t _CreateP2PConnectionSocket(IntPtr self, SteamId steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);
    internal SNetSocket_t CreateP2PConnectionSocket(SteamId steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);
}
internal class Steamworks.ISteamNetworkingFakeUDPPort : SteamInterface {
    internal ISteamNetworkingFakeUDPPort(bool IsGameServer);
    private static void _DestroyFakeUDPPort(IntPtr self);
    internal void DestroyFakeUDPPort();
    private static Result _SendMessageToFakeIP(IntPtr self, NetAddress& remoteAddress, IntPtr pData, UInt32 cbData, int nSendFlags);
    internal Result SendMessageToFakeIP(NetAddress& remoteAddress, IntPtr pData, UInt32 cbData, int nSendFlags);
    private static int _ReceiveMessages(IntPtr self, IntPtr ppOutMessages, int nMaxMessages);
    internal int ReceiveMessages(IntPtr ppOutMessages, int nMaxMessages);
    private static void _ScheduleCleanup(IntPtr self, NetAddress& remoteAddress);
    internal void ScheduleCleanup(NetAddress& remoteAddress);
}
internal class Steamworks.ISteamNetworkingMessages : SteamInterface {
    internal ISteamNetworkingMessages(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamNetworkingMessages_SteamAPI_v002();
    public virtual IntPtr GetUserInterfacePointer();
    internal static IntPtr SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002();
    public virtual IntPtr GetServerInterfacePointer();
    private static Result _SendMessageToUser(IntPtr self, NetIdentity& identityRemote, IntPtr[] pubData, UInt32 cubData, int nSendFlags, int nRemoteChannel);
    internal Result SendMessageToUser(NetIdentity& identityRemote, IntPtr[] pubData, UInt32 cubData, int nSendFlags, int nRemoteChannel);
    private static int _ReceiveMessagesOnChannel(IntPtr self, int nLocalChannel, IntPtr ppOutMessages, int nMaxMessages);
    internal int ReceiveMessagesOnChannel(int nLocalChannel, IntPtr ppOutMessages, int nMaxMessages);
    private static bool _AcceptSessionWithUser(IntPtr self, NetIdentity& identityRemote);
    internal bool AcceptSessionWithUser(NetIdentity& identityRemote);
    private static bool _CloseSessionWithUser(IntPtr self, NetIdentity& identityRemote);
    internal bool CloseSessionWithUser(NetIdentity& identityRemote);
    private static bool _CloseChannelWithUser(IntPtr self, NetIdentity& identityRemote, int nLocalChannel);
    internal bool CloseChannelWithUser(NetIdentity& identityRemote, int nLocalChannel);
    private static ConnectionState _GetSessionConnectionInfo(IntPtr self, NetIdentity& identityRemote, ConnectionInfo& pConnectionInfo, ConnectionStatus& pQuickStatus);
    internal ConnectionState GetSessionConnectionInfo(NetIdentity& identityRemote, ConnectionInfo& pConnectionInfo, ConnectionStatus& pQuickStatus);
}
internal class Steamworks.ISteamNetworkingSockets : SteamInterface {
    internal ISteamNetworkingSockets(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamNetworkingSockets_SteamAPI_v012();
    public virtual IntPtr GetUserInterfacePointer();
    internal static IntPtr SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012();
    public virtual IntPtr GetServerInterfacePointer();
    private static Socket _CreateListenSocketIP(IntPtr self, NetAddress& localAddress, int nOptions, NetKeyValue[] pOptions);
    internal Socket CreateListenSocketIP(NetAddress& localAddress, int nOptions, NetKeyValue[] pOptions);
    private static Connection _ConnectByIPAddress(IntPtr self, NetAddress& address, int nOptions, NetKeyValue[] pOptions);
    internal Connection ConnectByIPAddress(NetAddress& address, int nOptions, NetKeyValue[] pOptions);
    private static Socket _CreateListenSocketP2P(IntPtr self, int nLocalVirtualPort, int nOptions, NetKeyValue[] pOptions);
    internal Socket CreateListenSocketP2P(int nLocalVirtualPort, int nOptions, NetKeyValue[] pOptions);
    private static Connection _ConnectP2P(IntPtr self, NetIdentity& identityRemote, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions);
    internal Connection ConnectP2P(NetIdentity& identityRemote, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions);
    private static Result _AcceptConnection(IntPtr self, Connection hConn);
    internal Result AcceptConnection(Connection hConn);
    private static bool _CloseConnection(IntPtr self, Connection hPeer, int nReason, string pszDebug, bool bEnableLinger);
    internal bool CloseConnection(Connection hPeer, int nReason, string pszDebug, bool bEnableLinger);
    private static bool _CloseListenSocket(IntPtr self, Socket hSocket);
    internal bool CloseListenSocket(Socket hSocket);
    private static bool _SetConnectionUserData(IntPtr self, Connection hPeer, long nUserData);
    internal bool SetConnectionUserData(Connection hPeer, long nUserData);
    private static long _GetConnectionUserData(IntPtr self, Connection hPeer);
    internal long GetConnectionUserData(Connection hPeer);
    private static void _SetConnectionName(IntPtr self, Connection hPeer, string pszName);
    internal void SetConnectionName(Connection hPeer, string pszName);
    private static bool _GetConnectionName(IntPtr self, Connection hPeer, IntPtr pszName, int nMaxLen);
    internal bool GetConnectionName(Connection hPeer, String& pszName);
    private static Result _SendMessageToConnection(IntPtr self, Connection hConn, IntPtr pData, UInt32 cbData, int nSendFlags, Int64& pOutMessageNumber);
    internal Result SendMessageToConnection(Connection hConn, IntPtr pData, UInt32 cbData, int nSendFlags, Int64& pOutMessageNumber);
    private static void _SendMessages(IntPtr self, int nMessages, NetMsg** pMessages, Int64* pOutMessageNumberOrResult);
    internal void SendMessages(int nMessages, NetMsg** pMessages, Int64* pOutMessageNumberOrResult);
    private static Result _FlushMessagesOnConnection(IntPtr self, Connection hConn);
    internal Result FlushMessagesOnConnection(Connection hConn);
    private static int _ReceiveMessagesOnConnection(IntPtr self, Connection hConn, IntPtr ppOutMessages, int nMaxMessages);
    internal int ReceiveMessagesOnConnection(Connection hConn, IntPtr ppOutMessages, int nMaxMessages);
    private static bool _GetConnectionInfo(IntPtr self, Connection hConn, ConnectionInfo& pInfo);
    internal bool GetConnectionInfo(Connection hConn, ConnectionInfo& pInfo);
    private static Result _GetConnectionRealTimeStatus(IntPtr self, Connection hConn, ConnectionStatus& pStatus, int nLanes, ConnectionLaneStatus[] pLanes);
    internal Result GetConnectionRealTimeStatus(Connection hConn, ConnectionStatus& pStatus, int nLanes, ConnectionLaneStatus[] pLanes);
    private static int _GetDetailedConnectionStatus(IntPtr self, Connection hConn, IntPtr pszBuf, int cbBuf);
    internal int GetDetailedConnectionStatus(Connection hConn, String& pszBuf);
    private static bool _GetListenSocketAddress(IntPtr self, Socket hSocket, NetAddress& address);
    internal bool GetListenSocketAddress(Socket hSocket, NetAddress& address);
    private static bool _CreateSocketPair(IntPtr self, Connection[] pOutConnection1, Connection[] pOutConnection2, bool bUseNetworkLoopback, NetIdentity& pIdentity1, NetIdentity& pIdentity2);
    internal bool CreateSocketPair(Connection[] pOutConnection1, Connection[] pOutConnection2, bool bUseNetworkLoopback, NetIdentity& pIdentity1, NetIdentity& pIdentity2);
    private static Result _ConfigureConnectionLanes(IntPtr self, Connection hConn, int nNumLanes, Int32[] pLanePriorities, UInt16[] pLaneWeights);
    internal Result ConfigureConnectionLanes(Connection hConn, int nNumLanes, Int32[] pLanePriorities, UInt16[] pLaneWeights);
    private static bool _GetIdentity(IntPtr self, NetIdentity& pIdentity);
    internal bool GetIdentity(NetIdentity& pIdentity);
    private static SteamNetworkingAvailability _InitAuthentication(IntPtr self);
    internal SteamNetworkingAvailability InitAuthentication();
    private static SteamNetworkingAvailability _GetAuthenticationStatus(IntPtr self, SteamNetAuthenticationStatus_t& pDetails);
    internal SteamNetworkingAvailability GetAuthenticationStatus(SteamNetAuthenticationStatus_t& pDetails);
    private static HSteamNetPollGroup _CreatePollGroup(IntPtr self);
    internal HSteamNetPollGroup CreatePollGroup();
    private static bool _DestroyPollGroup(IntPtr self, HSteamNetPollGroup hPollGroup);
    internal bool DestroyPollGroup(HSteamNetPollGroup hPollGroup);
    private static bool _SetConnectionPollGroup(IntPtr self, Connection hConn, HSteamNetPollGroup hPollGroup);
    internal bool SetConnectionPollGroup(Connection hConn, HSteamNetPollGroup hPollGroup);
    private static int _ReceiveMessagesOnPollGroup(IntPtr self, HSteamNetPollGroup hPollGroup, IntPtr ppOutMessages, int nMaxMessages);
    internal int ReceiveMessagesOnPollGroup(HSteamNetPollGroup hPollGroup, IntPtr ppOutMessages, int nMaxMessages);
    private static bool _ReceivedRelayAuthTicket(IntPtr self, IntPtr pvTicket, int cbTicket, SteamDatagramRelayAuthTicket[] pOutParsedTicket);
    internal bool ReceivedRelayAuthTicket(IntPtr pvTicket, int cbTicket, SteamDatagramRelayAuthTicket[] pOutParsedTicket);
    private static int _FindRelayAuthTicketForServer(IntPtr self, NetIdentity& identityGameServer, int nRemoteVirtualPort, SteamDatagramRelayAuthTicket[] pOutParsedTicket);
    internal int FindRelayAuthTicketForServer(NetIdentity& identityGameServer, int nRemoteVirtualPort, SteamDatagramRelayAuthTicket[] pOutParsedTicket);
    private static Connection _ConnectToHostedDedicatedServer(IntPtr self, NetIdentity& identityTarget, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions);
    internal Connection ConnectToHostedDedicatedServer(NetIdentity& identityTarget, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions);
    private static ushort _GetHostedDedicatedServerPort(IntPtr self);
    internal ushort GetHostedDedicatedServerPort();
    private static SteamNetworkingPOPID _GetHostedDedicatedServerPOPID(IntPtr self);
    internal SteamNetworkingPOPID GetHostedDedicatedServerPOPID();
    private static Result _GetHostedDedicatedServerAddress(IntPtr self, SteamDatagramHostedAddress& pRouting);
    internal Result GetHostedDedicatedServerAddress(SteamDatagramHostedAddress& pRouting);
    private static Socket _CreateHostedDedicatedServerListenSocket(IntPtr self, int nLocalVirtualPort, int nOptions, NetKeyValue[] pOptions);
    internal Socket CreateHostedDedicatedServerListenSocket(int nLocalVirtualPort, int nOptions, NetKeyValue[] pOptions);
    private static Result _GetGameCoordinatorServerLogin(IntPtr self, SteamDatagramGameCoordinatorServerLogin& pLoginInfo, Int32& pcbSignedBlob, IntPtr pBlob);
    internal Result GetGameCoordinatorServerLogin(SteamDatagramGameCoordinatorServerLogin& pLoginInfo, Int32& pcbSignedBlob, IntPtr pBlob);
    private static Connection _ConnectP2PCustomSignaling(IntPtr self, IntPtr pSignaling, NetIdentity& pPeerIdentity, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions);
    internal Connection ConnectP2PCustomSignaling(IntPtr pSignaling, NetIdentity& pPeerIdentity, int nRemoteVirtualPort, int nOptions, NetKeyValue[] pOptions);
    private static bool _ReceivedP2PCustomSignal(IntPtr self, IntPtr pMsg, int cbMsg, IntPtr pContext);
    internal bool ReceivedP2PCustomSignal(IntPtr pMsg, int cbMsg, IntPtr pContext);
    private static bool _GetCertificateRequest(IntPtr self, Int32& pcbBlob, IntPtr pBlob, NetErrorMessage& errMsg);
    internal bool GetCertificateRequest(Int32& pcbBlob, IntPtr pBlob, NetErrorMessage& errMsg);
    private static bool _SetCertificate(IntPtr self, IntPtr pCertificate, int cbCertificate, NetErrorMessage& errMsg);
    internal bool SetCertificate(IntPtr pCertificate, int cbCertificate, NetErrorMessage& errMsg);
    private static void _ResetIdentity(IntPtr self, NetIdentity& pIdentity);
    internal void ResetIdentity(NetIdentity& pIdentity);
    private static void _RunCallbacks(IntPtr self);
    internal void RunCallbacks();
    private static bool _BeginAsyncRequestFakeIP(IntPtr self, int nNumPorts);
    internal bool BeginAsyncRequestFakeIP(int nNumPorts);
    private static void _GetFakeIP(IntPtr self, int idxFirstPort, SteamNetworkingFakeIPResult_t& pInfo);
    internal void GetFakeIP(int idxFirstPort, SteamNetworkingFakeIPResult_t& pInfo);
    private static Socket _CreateListenSocketP2PFakeIP(IntPtr self, int idxFakePort, int nOptions, NetKeyValue[] pOptions);
    internal Socket CreateListenSocketP2PFakeIP(int idxFakePort, int nOptions, NetKeyValue[] pOptions);
    private static Result _GetRemoteFakeIPForConnection(IntPtr self, Connection hConn, NetAddress[] pOutAddr);
    internal Result GetRemoteFakeIPForConnection(Connection hConn, NetAddress[] pOutAddr);
    private static IntPtr _CreateFakeUDPPort(IntPtr self, int idxFakeServerPort);
    internal IntPtr CreateFakeUDPPort(int idxFakeServerPort);
}
internal class Steamworks.ISteamNetworkingUtils : SteamInterface {
    internal ISteamNetworkingUtils(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamNetworkingUtils_SteamAPI_v004();
    public virtual IntPtr GetGlobalInterfacePointer();
    private static NetMsg* _AllocateMessage(IntPtr self, int cbAllocateBuffer);
    internal NetMsg* AllocateMessage(int cbAllocateBuffer);
    private static void _InitRelayNetworkAccess(IntPtr self);
    internal void InitRelayNetworkAccess();
    private static SteamNetworkingAvailability _GetRelayNetworkStatus(IntPtr self, SteamRelayNetworkStatus_t& pDetails);
    internal SteamNetworkingAvailability GetRelayNetworkStatus(SteamRelayNetworkStatus_t& pDetails);
    private static float _GetLocalPingLocation(IntPtr self, NetPingLocation& result);
    internal float GetLocalPingLocation(NetPingLocation& result);
    private static int _EstimatePingTimeBetweenTwoLocations(IntPtr self, NetPingLocation& location1, NetPingLocation& location2);
    internal int EstimatePingTimeBetweenTwoLocations(NetPingLocation& location1, NetPingLocation& location2);
    private static int _EstimatePingTimeFromLocalHost(IntPtr self, NetPingLocation& remoteLocation);
    internal int EstimatePingTimeFromLocalHost(NetPingLocation& remoteLocation);
    private static void _ConvertPingLocationToString(IntPtr self, NetPingLocation& location, IntPtr pszBuf, int cchBufSize);
    internal void ConvertPingLocationToString(NetPingLocation& location, String& pszBuf);
    private static bool _ParsePingLocationString(IntPtr self, string pszString, NetPingLocation& result);
    internal bool ParsePingLocationString(string pszString, NetPingLocation& result);
    private static bool _CheckPingDataUpToDate(IntPtr self, float flMaxAgeSeconds);
    internal bool CheckPingDataUpToDate(float flMaxAgeSeconds);
    private static int _GetPingToDataCenter(IntPtr self, SteamNetworkingPOPID popID, SteamNetworkingPOPID& pViaRelayPoP);
    internal int GetPingToDataCenter(SteamNetworkingPOPID popID, SteamNetworkingPOPID& pViaRelayPoP);
    private static int _GetDirectPingToPOP(IntPtr self, SteamNetworkingPOPID popID);
    internal int GetDirectPingToPOP(SteamNetworkingPOPID popID);
    private static int _GetPOPCount(IntPtr self);
    internal int GetPOPCount();
    private static int _GetPOPList(IntPtr self, SteamNetworkingPOPID& list, int nListSz);
    internal int GetPOPList(SteamNetworkingPOPID& list, int nListSz);
    private static long _GetLocalTimestamp(IntPtr self);
    internal long GetLocalTimestamp();
    private static void _SetDebugOutputFunction(IntPtr self, NetDebugOutput eDetailLevel, NetDebugFunc pfnFunc);
    internal void SetDebugOutputFunction(NetDebugOutput eDetailLevel, NetDebugFunc pfnFunc);
    private static bool _IsFakeIPv4(IntPtr self, UInt32 nIPv4);
    internal bool IsFakeIPv4(UInt32 nIPv4);
    private static SteamNetworkingFakeIPType _GetIPv4FakeIPType(IntPtr self, UInt32 nIPv4);
    internal SteamNetworkingFakeIPType GetIPv4FakeIPType(UInt32 nIPv4);
    private static Result _GetRealIdentityForFakeIP(IntPtr self, NetAddress& fakeIP, NetIdentity[] pOutRealIdentity);
    internal Result GetRealIdentityForFakeIP(NetAddress& fakeIP, NetIdentity[] pOutRealIdentity);
    private static bool _SetGlobalConfigValueInt32(IntPtr self, NetConfig eValue, int val);
    internal bool SetGlobalConfigValueInt32(NetConfig eValue, int val);
    private static bool _SetGlobalConfigValueFloat(IntPtr self, NetConfig eValue, float val);
    internal bool SetGlobalConfigValueFloat(NetConfig eValue, float val);
    private static bool _SetGlobalConfigValueString(IntPtr self, NetConfig eValue, string val);
    internal bool SetGlobalConfigValueString(NetConfig eValue, string val);
    private static bool _SetGlobalConfigValuePtr(IntPtr self, NetConfig eValue, IntPtr val);
    internal bool SetGlobalConfigValuePtr(NetConfig eValue, IntPtr val);
    private static bool _SetConnectionConfigValueInt32(IntPtr self, Connection hConn, NetConfig eValue, int val);
    internal bool SetConnectionConfigValueInt32(Connection hConn, NetConfig eValue, int val);
    private static bool _SetConnectionConfigValueFloat(IntPtr self, Connection hConn, NetConfig eValue, float val);
    internal bool SetConnectionConfigValueFloat(Connection hConn, NetConfig eValue, float val);
    private static bool _SetConnectionConfigValueString(IntPtr self, Connection hConn, NetConfig eValue, string val);
    internal bool SetConnectionConfigValueString(Connection hConn, NetConfig eValue, string val);
    private static bool _SetGlobalCallback_SteamNetConnectionStatusChanged(IntPtr self, FnSteamNetConnectionStatusChanged fnCallback);
    internal bool SetGlobalCallback_SteamNetConnectionStatusChanged(FnSteamNetConnectionStatusChanged fnCallback);
    private static bool _SetGlobalCallback_SteamNetAuthenticationStatusChanged(IntPtr self, FnSteamNetAuthenticationStatusChanged fnCallback);
    internal bool SetGlobalCallback_SteamNetAuthenticationStatusChanged(FnSteamNetAuthenticationStatusChanged fnCallback);
    private static bool _SetGlobalCallback_SteamRelayNetworkStatusChanged(IntPtr self, FnSteamRelayNetworkStatusChanged fnCallback);
    internal bool SetGlobalCallback_SteamRelayNetworkStatusChanged(FnSteamRelayNetworkStatusChanged fnCallback);
    private static bool _SetGlobalCallback_FakeIPResult(IntPtr self, FnSteamNetworkingFakeIPResult fnCallback);
    internal bool SetGlobalCallback_FakeIPResult(FnSteamNetworkingFakeIPResult fnCallback);
    private static bool _SetGlobalCallback_MessagesSessionRequest(IntPtr self, FnSteamNetworkingMessagesSessionRequest fnCallback);
    internal bool SetGlobalCallback_MessagesSessionRequest(FnSteamNetworkingMessagesSessionRequest fnCallback);
    private static bool _SetGlobalCallback_MessagesSessionFailed(IntPtr self, FnSteamNetworkingMessagesSessionFailed fnCallback);
    internal bool SetGlobalCallback_MessagesSessionFailed(FnSteamNetworkingMessagesSessionFailed fnCallback);
    private static bool _SetConfigValue(IntPtr self, NetConfig eValue, NetConfigScope eScopeType, IntPtr scopeObj, NetConfigType eDataType, IntPtr pArg);
    internal bool SetConfigValue(NetConfig eValue, NetConfigScope eScopeType, IntPtr scopeObj, NetConfigType eDataType, IntPtr pArg);
    private static bool _SetConfigValueStruct(IntPtr self, NetKeyValue& opt, NetConfigScope eScopeType, IntPtr scopeObj);
    internal bool SetConfigValueStruct(NetKeyValue& opt, NetConfigScope eScopeType, IntPtr scopeObj);
    private static NetConfigResult _GetConfigValue(IntPtr self, NetConfig eValue, NetConfigScope eScopeType, IntPtr scopeObj, NetConfigType& pOutDataType, IntPtr pResult, UIntPtr& cbResult);
    internal NetConfigResult GetConfigValue(NetConfig eValue, NetConfigScope eScopeType, IntPtr scopeObj, NetConfigType& pOutDataType, IntPtr pResult, UIntPtr& cbResult);
    private static Utf8StringPointer _GetConfigValueInfo(IntPtr self, NetConfig eValue, NetConfigType& pOutDataType, NetConfigScope[] pOutScope);
    internal string GetConfigValueInfo(NetConfig eValue, NetConfigType& pOutDataType, NetConfigScope[] pOutScope);
    private static NetConfig _IterateGenericEditableConfigValues(IntPtr self, NetConfig eCurrent, bool bEnumerateDevVars);
    internal NetConfig IterateGenericEditableConfigValues(NetConfig eCurrent, bool bEnumerateDevVars);
    private static void _SteamNetworkingIPAddr_ToString(IntPtr self, NetAddress& addr, IntPtr buf, UInt32 cbBuf, bool bWithPort);
    internal void SteamNetworkingIPAddr_ToString(NetAddress& addr, String& buf, bool bWithPort);
    private static bool _SteamNetworkingIPAddr_ParseString(IntPtr self, NetAddress& pAddr, string pszStr);
    internal bool SteamNetworkingIPAddr_ParseString(NetAddress& pAddr, string pszStr);
    private static SteamNetworkingFakeIPType _SteamNetworkingIPAddr_GetFakeIPType(IntPtr self, NetAddress& addr);
    internal SteamNetworkingFakeIPType SteamNetworkingIPAddr_GetFakeIPType(NetAddress& addr);
    private static void _SteamNetworkingIdentity_ToString(IntPtr self, NetIdentity& identity, IntPtr buf, UInt32 cbBuf);
    internal void SteamNetworkingIdentity_ToString(NetIdentity& identity, String& buf);
    private static bool _SteamNetworkingIdentity_ParseString(IntPtr self, NetIdentity& pIdentity, string pszStr);
    internal bool SteamNetworkingIdentity_ParseString(NetIdentity& pIdentity, string pszStr);
}
internal class Steamworks.ISteamParentalSettings : SteamInterface {
    internal ISteamParentalSettings(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamParentalSettings_v001();
    public virtual IntPtr GetUserInterfacePointer();
    private static bool _BIsParentalLockEnabled(IntPtr self);
    internal bool BIsParentalLockEnabled();
    private static bool _BIsParentalLockLocked(IntPtr self);
    internal bool BIsParentalLockLocked();
    private static bool _BIsAppBlocked(IntPtr self, AppId nAppID);
    internal bool BIsAppBlocked(AppId nAppID);
    private static bool _BIsAppInBlockList(IntPtr self, AppId nAppID);
    internal bool BIsAppInBlockList(AppId nAppID);
    private static bool _BIsFeatureBlocked(IntPtr self, ParentalFeature eFeature);
    internal bool BIsFeatureBlocked(ParentalFeature eFeature);
    private static bool _BIsFeatureInBlockList(IntPtr self, ParentalFeature eFeature);
    internal bool BIsFeatureInBlockList(ParentalFeature eFeature);
}
internal class Steamworks.ISteamParties : SteamInterface {
    internal ISteamParties(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamParties_v002();
    public virtual IntPtr GetUserInterfacePointer();
    private static UInt32 _GetNumActiveBeacons(IntPtr self);
    internal UInt32 GetNumActiveBeacons();
    private static PartyBeaconID_t _GetBeaconByIndex(IntPtr self, UInt32 unIndex);
    internal PartyBeaconID_t GetBeaconByIndex(UInt32 unIndex);
    private static bool _GetBeaconDetails(IntPtr self, PartyBeaconID_t ulBeaconID, SteamId& pSteamIDBeaconOwner, SteamPartyBeaconLocation_t& pLocation, IntPtr pchMetadata, int cchMetadata);
    internal bool GetBeaconDetails(PartyBeaconID_t ulBeaconID, SteamId& pSteamIDBeaconOwner, SteamPartyBeaconLocation_t& pLocation, String& pchMetadata);
    private static SteamAPICall_t _JoinParty(IntPtr self, PartyBeaconID_t ulBeaconID);
    internal CallResult`1<JoinPartyCallback_t> JoinParty(PartyBeaconID_t ulBeaconID);
    private static bool _GetNumAvailableBeaconLocations(IntPtr self, UInt32& puNumLocations);
    internal bool GetNumAvailableBeaconLocations(UInt32& puNumLocations);
    private static bool _GetAvailableBeaconLocations(IntPtr self, SteamPartyBeaconLocation_t& pLocationList, UInt32 uMaxNumLocations);
    internal bool GetAvailableBeaconLocations(SteamPartyBeaconLocation_t& pLocationList, UInt32 uMaxNumLocations);
    private static SteamAPICall_t _CreateBeacon(IntPtr self, UInt32 unOpenSlots, SteamPartyBeaconLocation_t& pBeaconLocation, string pchConnectString, string pchMetadata);
    internal CallResult`1<CreateBeaconCallback_t> CreateBeacon(UInt32 unOpenSlots, SteamPartyBeaconLocation_t pBeaconLocation, string pchConnectString, string pchMetadata);
    private static void _OnReservationCompleted(IntPtr self, PartyBeaconID_t ulBeacon, SteamId steamIDUser);
    internal void OnReservationCompleted(PartyBeaconID_t ulBeacon, SteamId steamIDUser);
    private static void _CancelReservation(IntPtr self, PartyBeaconID_t ulBeacon, SteamId steamIDUser);
    internal void CancelReservation(PartyBeaconID_t ulBeacon, SteamId steamIDUser);
    private static SteamAPICall_t _ChangeNumOpenSlots(IntPtr self, PartyBeaconID_t ulBeacon, UInt32 unOpenSlots);
    internal CallResult`1<ChangeNumOpenSlotsCallback_t> ChangeNumOpenSlots(PartyBeaconID_t ulBeacon, UInt32 unOpenSlots);
    private static bool _DestroyBeacon(IntPtr self, PartyBeaconID_t ulBeacon);
    internal bool DestroyBeacon(PartyBeaconID_t ulBeacon);
    private static bool _GetBeaconLocationData(IntPtr self, SteamPartyBeaconLocation_t BeaconLocation, SteamPartyBeaconLocationData eData, IntPtr pchDataStringOut, int cchDataStringOut);
    internal bool GetBeaconLocationData(SteamPartyBeaconLocation_t BeaconLocation, SteamPartyBeaconLocationData eData, String& pchDataStringOut);
}
internal class Steamworks.ISteamRemotePlay : SteamInterface {
    internal ISteamRemotePlay(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamRemotePlay_v001();
    public virtual IntPtr GetUserInterfacePointer();
    private static UInt32 _GetSessionCount(IntPtr self);
    internal UInt32 GetSessionCount();
    private static RemotePlaySessionID_t _GetSessionID(IntPtr self, int iSessionIndex);
    internal RemotePlaySessionID_t GetSessionID(int iSessionIndex);
    private static SteamId _GetSessionSteamID(IntPtr self, RemotePlaySessionID_t unSessionID);
    internal SteamId GetSessionSteamID(RemotePlaySessionID_t unSessionID);
    private static Utf8StringPointer _GetSessionClientName(IntPtr self, RemotePlaySessionID_t unSessionID);
    internal string GetSessionClientName(RemotePlaySessionID_t unSessionID);
    private static SteamDeviceFormFactor _GetSessionClientFormFactor(IntPtr self, RemotePlaySessionID_t unSessionID);
    internal SteamDeviceFormFactor GetSessionClientFormFactor(RemotePlaySessionID_t unSessionID);
    private static bool _BGetSessionClientResolution(IntPtr self, RemotePlaySessionID_t unSessionID, Int32& pnResolutionX, Int32& pnResolutionY);
    internal bool BGetSessionClientResolution(RemotePlaySessionID_t unSessionID, Int32& pnResolutionX, Int32& pnResolutionY);
    private static bool _BSendRemotePlayTogetherInvite(IntPtr self, SteamId steamIDFriend);
    internal bool BSendRemotePlayTogetherInvite(SteamId steamIDFriend);
}
internal class Steamworks.ISteamRemoteStorage : SteamInterface {
    internal ISteamRemoteStorage(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamRemoteStorage_v016();
    public virtual IntPtr GetUserInterfacePointer();
    private static bool _FileWrite(IntPtr self, string pchFile, IntPtr pvData, int cubData);
    internal bool FileWrite(string pchFile, IntPtr pvData, int cubData);
    private static int _FileRead(IntPtr self, string pchFile, IntPtr pvData, int cubDataToRead);
    internal int FileRead(string pchFile, IntPtr pvData, int cubDataToRead);
    private static SteamAPICall_t _FileWriteAsync(IntPtr self, string pchFile, IntPtr pvData, UInt32 cubData);
    internal CallResult`1<RemoteStorageFileWriteAsyncComplete_t> FileWriteAsync(string pchFile, IntPtr pvData, UInt32 cubData);
    private static SteamAPICall_t _FileReadAsync(IntPtr self, string pchFile, UInt32 nOffset, UInt32 cubToRead);
    internal CallResult`1<RemoteStorageFileReadAsyncComplete_t> FileReadAsync(string pchFile, UInt32 nOffset, UInt32 cubToRead);
    private static bool _FileReadAsyncComplete(IntPtr self, SteamAPICall_t hReadCall, IntPtr pvBuffer, UInt32 cubToRead);
    internal bool FileReadAsyncComplete(SteamAPICall_t hReadCall, IntPtr pvBuffer, UInt32 cubToRead);
    private static bool _FileForget(IntPtr self, string pchFile);
    internal bool FileForget(string pchFile);
    private static bool _FileDelete(IntPtr self, string pchFile);
    internal bool FileDelete(string pchFile);
    private static SteamAPICall_t _FileShare(IntPtr self, string pchFile);
    internal CallResult`1<RemoteStorageFileShareResult_t> FileShare(string pchFile);
    private static bool _SetSyncPlatforms(IntPtr self, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);
    internal bool SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);
    private static UGCFileWriteStreamHandle_t _FileWriteStreamOpen(IntPtr self, string pchFile);
    internal UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile);
    private static bool _FileWriteStreamWriteChunk(IntPtr self, UGCFileWriteStreamHandle_t writeHandle, IntPtr pvData, int cubData);
    internal bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, IntPtr pvData, int cubData);
    private static bool _FileWriteStreamClose(IntPtr self, UGCFileWriteStreamHandle_t writeHandle);
    internal bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle);
    private static bool _FileWriteStreamCancel(IntPtr self, UGCFileWriteStreamHandle_t writeHandle);
    internal bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle);
    private static bool _FileExists(IntPtr self, string pchFile);
    internal bool FileExists(string pchFile);
    private static bool _FilePersisted(IntPtr self, string pchFile);
    internal bool FilePersisted(string pchFile);
    private static int _GetFileSize(IntPtr self, string pchFile);
    internal int GetFileSize(string pchFile);
    private static long _GetFileTimestamp(IntPtr self, string pchFile);
    internal long GetFileTimestamp(string pchFile);
    private static RemoteStoragePlatform _GetSyncPlatforms(IntPtr self, string pchFile);
    internal RemoteStoragePlatform GetSyncPlatforms(string pchFile);
    private static int _GetFileCount(IntPtr self);
    internal int GetFileCount();
    private static Utf8StringPointer _GetFileNameAndSize(IntPtr self, int iFile, Int32& pnFileSizeInBytes);
    internal string GetFileNameAndSize(int iFile, Int32& pnFileSizeInBytes);
    private static bool _GetQuota(IntPtr self, UInt64& pnTotalBytes, UInt64& puAvailableBytes);
    internal bool GetQuota(UInt64& pnTotalBytes, UInt64& puAvailableBytes);
    private static bool _IsCloudEnabledForAccount(IntPtr self);
    internal bool IsCloudEnabledForAccount();
    private static bool _IsCloudEnabledForApp(IntPtr self);
    internal bool IsCloudEnabledForApp();
    private static void _SetCloudEnabledForApp(IntPtr self, bool bEnabled);
    internal void SetCloudEnabledForApp(bool bEnabled);
    private static SteamAPICall_t _UGCDownload(IntPtr self, UGCHandle_t hContent, UInt32 unPriority);
    internal CallResult`1<RemoteStorageDownloadUGCResult_t> UGCDownload(UGCHandle_t hContent, UInt32 unPriority);
    private static bool _GetUGCDownloadProgress(IntPtr self, UGCHandle_t hContent, Int32& pnBytesDownloaded, Int32& pnBytesExpected);
    internal bool GetUGCDownloadProgress(UGCHandle_t hContent, Int32& pnBytesDownloaded, Int32& pnBytesExpected);
    private static bool _GetUGCDetails(IntPtr self, UGCHandle_t hContent, AppId& pnAppID, Char[]& ppchName, Int32& pnFileSizeInBytes, SteamId& pSteamIDOwner);
    internal bool GetUGCDetails(UGCHandle_t hContent, AppId& pnAppID, Char[]& ppchName, Int32& pnFileSizeInBytes, SteamId& pSteamIDOwner);
    private static int _UGCRead(IntPtr self, UGCHandle_t hContent, IntPtr pvData, int cubDataToRead, UInt32 cOffset, UGCReadAction eAction);
    internal int UGCRead(UGCHandle_t hContent, IntPtr pvData, int cubDataToRead, UInt32 cOffset, UGCReadAction eAction);
    private static int _GetCachedUGCCount(IntPtr self);
    internal int GetCachedUGCCount();
    private static UGCHandle_t _GetCachedUGCHandle(IntPtr self, int iCachedContent);
    internal UGCHandle_t GetCachedUGCHandle(int iCachedContent);
    private static SteamAPICall_t _UGCDownloadToLocation(IntPtr self, UGCHandle_t hContent, string pchLocation, UInt32 unPriority);
    internal CallResult`1<RemoteStorageDownloadUGCResult_t> UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, UInt32 unPriority);
    private static int _GetLocalFileChangeCount(IntPtr self);
    internal int GetLocalFileChangeCount();
    private static Utf8StringPointer _GetLocalFileChange(IntPtr self, int iFile, RemoteStorageLocalFileChange& pEChangeType, RemoteStorageFilePathType& pEFilePathType);
    internal string GetLocalFileChange(int iFile, RemoteStorageLocalFileChange& pEChangeType, RemoteStorageFilePathType& pEFilePathType);
    private static bool _BeginFileWriteBatch(IntPtr self);
    internal bool BeginFileWriteBatch();
    private static bool _EndFileWriteBatch(IntPtr self);
    internal bool EndFileWriteBatch();
}
internal class Steamworks.ISteamScreenshots : SteamInterface {
    internal ISteamScreenshots(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamScreenshots_v003();
    public virtual IntPtr GetUserInterfacePointer();
    private static ScreenshotHandle _WriteScreenshot(IntPtr self, IntPtr pubRGB, UInt32 cubRGB, int nWidth, int nHeight);
    internal ScreenshotHandle WriteScreenshot(IntPtr pubRGB, UInt32 cubRGB, int nWidth, int nHeight);
    private static ScreenshotHandle _AddScreenshotToLibrary(IntPtr self, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);
    internal ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);
    private static void _TriggerScreenshot(IntPtr self);
    internal void TriggerScreenshot();
    private static void _HookScreenshots(IntPtr self, bool bHook);
    internal void HookScreenshots(bool bHook);
    private static bool _SetLocation(IntPtr self, ScreenshotHandle hScreenshot, string pchLocation);
    internal bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation);
    private static bool _TagUser(IntPtr self, ScreenshotHandle hScreenshot, SteamId steamID);
    internal bool TagUser(ScreenshotHandle hScreenshot, SteamId steamID);
    private static bool _TagPublishedFile(IntPtr self, ScreenshotHandle hScreenshot, PublishedFileId unPublishedFileID);
    internal bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId unPublishedFileID);
    private static bool _IsScreenshotsHooked(IntPtr self);
    internal bool IsScreenshotsHooked();
    private static ScreenshotHandle _AddVRScreenshotToLibrary(IntPtr self, VRScreenshotType eType, string pchFilename, string pchVRFilename);
    internal ScreenshotHandle AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename);
}
internal class Steamworks.ISteamUGC : SteamInterface {
    internal ISteamUGC(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamUGC_v017();
    public virtual IntPtr GetUserInterfacePointer();
    internal static IntPtr SteamAPI_SteamGameServerUGC_v017();
    public virtual IntPtr GetServerInterfacePointer();
    private static UGCQueryHandle_t _CreateQueryUserUGCRequest(IntPtr self, AccountID_t unAccountID, UserUGCList eListType, UgcType eMatchingUGCType, UserUGCListSortOrder eSortOrder, AppId nCreatorAppID, AppId nConsumerAppID, UInt32 unPage);
    internal UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, UserUGCList eListType, UgcType eMatchingUGCType, UserUGCListSortOrder eSortOrder, AppId nCreatorAppID, AppId nConsumerAppID, UInt32 unPage);
    private static UGCQueryHandle_t _CreateQueryAllUGCRequest(IntPtr self, UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, UInt32 unPage);
    internal UGCQueryHandle_t CreateQueryAllUGCRequest(UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, UInt32 unPage);
    private static UGCQueryHandle_t _CreateQueryAllUGCRequest(IntPtr self, UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, string pchCursor);
    internal UGCQueryHandle_t CreateQueryAllUGCRequest(UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, string pchCursor);
    private static UGCQueryHandle_t _CreateQueryUGCDetailsRequest(IntPtr self, PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs);
    internal UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs);
    private static SteamAPICall_t _SendQueryUGCRequest(IntPtr self, UGCQueryHandle_t handle);
    internal CallResult`1<SteamUGCQueryCompleted_t> SendQueryUGCRequest(UGCQueryHandle_t handle);
    private static bool _GetQueryUGCResult(IntPtr self, UGCQueryHandle_t handle, UInt32 index, SteamUGCDetails_t& pDetails);
    internal bool GetQueryUGCResult(UGCQueryHandle_t handle, UInt32 index, SteamUGCDetails_t& pDetails);
    private static UInt32 _GetQueryUGCNumTags(IntPtr self, UGCQueryHandle_t handle, UInt32 index);
    internal UInt32 GetQueryUGCNumTags(UGCQueryHandle_t handle, UInt32 index);
    private static bool _GetQueryUGCTag(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UInt32 indexTag, IntPtr pchValue, UInt32 cchValueSize);
    internal bool GetQueryUGCTag(UGCQueryHandle_t handle, UInt32 index, UInt32 indexTag, String& pchValue);
    private static bool _GetQueryUGCTagDisplayName(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UInt32 indexTag, IntPtr pchValue, UInt32 cchValueSize);
    internal bool GetQueryUGCTagDisplayName(UGCQueryHandle_t handle, UInt32 index, UInt32 indexTag, String& pchValue);
    private static bool _GetQueryUGCPreviewURL(IntPtr self, UGCQueryHandle_t handle, UInt32 index, IntPtr pchURL, UInt32 cchURLSize);
    internal bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, UInt32 index, String& pchURL);
    private static bool _GetQueryUGCMetadata(IntPtr self, UGCQueryHandle_t handle, UInt32 index, IntPtr pchMetadata, UInt32 cchMetadatasize);
    internal bool GetQueryUGCMetadata(UGCQueryHandle_t handle, UInt32 index, String& pchMetadata);
    private static bool _GetQueryUGCChildren(IntPtr self, UGCQueryHandle_t handle, UInt32 index, PublishedFileId[] pvecPublishedFileID, UInt32 cMaxEntries);
    internal bool GetQueryUGCChildren(UGCQueryHandle_t handle, UInt32 index, PublishedFileId[] pvecPublishedFileID, UInt32 cMaxEntries);
    private static bool _GetQueryUGCStatistic(IntPtr self, UGCQueryHandle_t handle, UInt32 index, ItemStatistic eStatType, UInt64& pStatValue);
    internal bool GetQueryUGCStatistic(UGCQueryHandle_t handle, UInt32 index, ItemStatistic eStatType, UInt64& pStatValue);
    private static UInt32 _GetQueryUGCNumAdditionalPreviews(IntPtr self, UGCQueryHandle_t handle, UInt32 index);
    internal UInt32 GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, UInt32 index);
    private static bool _GetQueryUGCAdditionalPreview(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UInt32 previewIndex, IntPtr pchURLOrVideoID, UInt32 cchURLSize, IntPtr pchOriginalFileName, UInt32 cchOriginalFileNameSize, ItemPreviewType& pPreviewType);
    internal bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, UInt32 index, UInt32 previewIndex, String& pchURLOrVideoID, String& pchOriginalFileName, ItemPreviewType& pPreviewType);
    private static UInt32 _GetQueryUGCNumKeyValueTags(IntPtr self, UGCQueryHandle_t handle, UInt32 index);
    internal UInt32 GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, UInt32 index);
    private static bool _GetQueryUGCKeyValueTag(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UInt32 keyValueTagIndex, IntPtr pchKey, UInt32 cchKeySize, IntPtr pchValue, UInt32 cchValueSize);
    internal bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, UInt32 index, UInt32 keyValueTagIndex, String& pchKey, String& pchValue);
    private static bool _GetQueryUGCKeyValueTag(IntPtr self, UGCQueryHandle_t handle, UInt32 index, string pchKey, IntPtr pchValue, UInt32 cchValueSize);
    internal bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, UInt32 index, string pchKey, String& pchValue);
    private static UInt32 _GetQueryUGCContentDescriptors(IntPtr self, UGCQueryHandle_t handle, UInt32 index, UGCContentDescriptorID[] pvecDescriptors, UInt32 cMaxEntries);
    internal UInt32 GetQueryUGCContentDescriptors(UGCQueryHandle_t handle, UInt32 index, UGCContentDescriptorID[] pvecDescriptors, UInt32 cMaxEntries);
    private static bool _ReleaseQueryUGCRequest(IntPtr self, UGCQueryHandle_t handle);
    internal bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle);
    private static bool _AddRequiredTag(IntPtr self, UGCQueryHandle_t handle, string pTagName);
    internal bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName);
    private static bool _AddRequiredTagGroup(IntPtr self, UGCQueryHandle_t handle, SteamParamStringArray_t& pTagGroups);
    internal bool AddRequiredTagGroup(UGCQueryHandle_t handle, SteamParamStringArray_t& pTagGroups);
    private static bool _AddExcludedTag(IntPtr self, UGCQueryHandle_t handle, string pTagName);
    internal bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName);
    private static bool _SetReturnOnlyIDs(IntPtr self, UGCQueryHandle_t handle, bool bReturnOnlyIDs);
    internal bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs);
    private static bool _SetReturnKeyValueTags(IntPtr self, UGCQueryHandle_t handle, bool bReturnKeyValueTags);
    internal bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);
    private static bool _SetReturnLongDescription(IntPtr self, UGCQueryHandle_t handle, bool bReturnLongDescription);
    internal bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);
    private static bool _SetReturnMetadata(IntPtr self, UGCQueryHandle_t handle, bool bReturnMetadata);
    internal bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);
    private static bool _SetReturnChildren(IntPtr self, UGCQueryHandle_t handle, bool bReturnChildren);
    internal bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);
    private static bool _SetReturnAdditionalPreviews(IntPtr self, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);
    internal bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);
    private static bool _SetReturnTotalOnly(IntPtr self, UGCQueryHandle_t handle, bool bReturnTotalOnly);
    internal bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);
    private static bool _SetReturnPlaytimeStats(IntPtr self, UGCQueryHandle_t handle, UInt32 unDays);
    internal bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, UInt32 unDays);
    private static bool _SetLanguage(IntPtr self, UGCQueryHandle_t handle, string pchLanguage);
    internal bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage);
    private static bool _SetAllowCachedResponse(IntPtr self, UGCQueryHandle_t handle, UInt32 unMaxAgeSeconds);
    internal bool SetAllowCachedResponse(UGCQueryHandle_t handle, UInt32 unMaxAgeSeconds);
    private static bool _SetCloudFileNameFilter(IntPtr self, UGCQueryHandle_t handle, string pMatchCloudFileName);
    internal bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName);
    private static bool _SetMatchAnyTag(IntPtr self, UGCQueryHandle_t handle, bool bMatchAnyTag);
    internal bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);
    private static bool _SetSearchText(IntPtr self, UGCQueryHandle_t handle, string pSearchText);
    internal bool SetSearchText(UGCQueryHandle_t handle, string pSearchText);
    private static bool _SetRankedByTrendDays(IntPtr self, UGCQueryHandle_t handle, UInt32 unDays);
    internal bool SetRankedByTrendDays(UGCQueryHandle_t handle, UInt32 unDays);
    private static bool _SetTimeCreatedDateRange(IntPtr self, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd);
    internal bool SetTimeCreatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd);
    private static bool _SetTimeUpdatedDateRange(IntPtr self, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd);
    internal bool SetTimeUpdatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd);
    private static bool _AddRequiredKeyValueTag(IntPtr self, UGCQueryHandle_t handle, string pKey, string pValue);
    internal bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue);
    private static SteamAPICall_t _CreateItem(IntPtr self, AppId nConsumerAppId, WorkshopFileType eFileType);
    internal CallResult`1<CreateItemResult_t> CreateItem(AppId nConsumerAppId, WorkshopFileType eFileType);
    private static UGCUpdateHandle_t _StartItemUpdate(IntPtr self, AppId nConsumerAppId, PublishedFileId nPublishedFileID);
    internal UGCUpdateHandle_t StartItemUpdate(AppId nConsumerAppId, PublishedFileId nPublishedFileID);
    private static bool _SetItemTitle(IntPtr self, UGCUpdateHandle_t handle, string pchTitle);
    internal bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle);
    private static bool _SetItemDescription(IntPtr self, UGCUpdateHandle_t handle, string pchDescription);
    internal bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription);
    private static bool _SetItemUpdateLanguage(IntPtr self, UGCUpdateHandle_t handle, string pchLanguage);
    internal bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage);
    private static bool _SetItemMetadata(IntPtr self, UGCUpdateHandle_t handle, string pchMetaData);
    internal bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData);
    private static bool _SetItemVisibility(IntPtr self, UGCUpdateHandle_t handle, RemoteStoragePublishedFileVisibility eVisibility);
    internal bool SetItemVisibility(UGCUpdateHandle_t handle, RemoteStoragePublishedFileVisibility eVisibility);
    private static bool _SetItemTags(IntPtr self, UGCUpdateHandle_t updateHandle, SteamParamStringArray_t& pTags);
    internal bool SetItemTags(UGCUpdateHandle_t updateHandle, SteamParamStringArray_t& pTags);
    private static bool _SetItemContent(IntPtr self, UGCUpdateHandle_t handle, string pszContentFolder);
    internal bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder);
    private static bool _SetItemPreview(IntPtr self, UGCUpdateHandle_t handle, string pszPreviewFile);
    internal bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile);
    private static bool _SetAllowLegacyUpload(IntPtr self, UGCUpdateHandle_t handle, bool bAllowLegacyUpload);
    internal bool SetAllowLegacyUpload(UGCUpdateHandle_t handle, bool bAllowLegacyUpload);
    private static bool _RemoveAllItemKeyValueTags(IntPtr self, UGCUpdateHandle_t handle);
    internal bool RemoveAllItemKeyValueTags(UGCUpdateHandle_t handle);
    private static bool _RemoveItemKeyValueTags(IntPtr self, UGCUpdateHandle_t handle, string pchKey);
    internal bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey);
    private static bool _AddItemKeyValueTag(IntPtr self, UGCUpdateHandle_t handle, string pchKey, string pchValue);
    internal bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue);
    private static bool _AddItemPreviewFile(IntPtr self, UGCUpdateHandle_t handle, string pszPreviewFile, ItemPreviewType type);
    internal bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, ItemPreviewType type);
    private static bool _AddItemPreviewVideo(IntPtr self, UGCUpdateHandle_t handle, string pszVideoID);
    internal bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID);
    private static bool _UpdateItemPreviewFile(IntPtr self, UGCUpdateHandle_t handle, UInt32 index, string pszPreviewFile);
    internal bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, UInt32 index, string pszPreviewFile);
    private static bool _UpdateItemPreviewVideo(IntPtr self, UGCUpdateHandle_t handle, UInt32 index, string pszVideoID);
    internal bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, UInt32 index, string pszVideoID);
    private static bool _RemoveItemPreview(IntPtr self, UGCUpdateHandle_t handle, UInt32 index);
    internal bool RemoveItemPreview(UGCUpdateHandle_t handle, UInt32 index);
    private static bool _AddContentDescriptor(IntPtr self, UGCUpdateHandle_t handle, UGCContentDescriptorID descid);
    internal bool AddContentDescriptor(UGCUpdateHandle_t handle, UGCContentDescriptorID descid);
    private static bool _RemoveContentDescriptor(IntPtr self, UGCUpdateHandle_t handle, UGCContentDescriptorID descid);
    internal bool RemoveContentDescriptor(UGCUpdateHandle_t handle, UGCContentDescriptorID descid);
    private static SteamAPICall_t _SubmitItemUpdate(IntPtr self, UGCUpdateHandle_t handle, string pchChangeNote);
    internal CallResult`1<SubmitItemUpdateResult_t> SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote);
    private static ItemUpdateStatus _GetItemUpdateProgress(IntPtr self, UGCUpdateHandle_t handle, UInt64& punBytesProcessed, UInt64& punBytesTotal);
    internal ItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, UInt64& punBytesProcessed, UInt64& punBytesTotal);
    private static SteamAPICall_t _SetUserItemVote(IntPtr self, PublishedFileId nPublishedFileID, bool bVoteUp);
    internal CallResult`1<SetUserItemVoteResult_t> SetUserItemVote(PublishedFileId nPublishedFileID, bool bVoteUp);
    private static SteamAPICall_t _GetUserItemVote(IntPtr self, PublishedFileId nPublishedFileID);
    internal CallResult`1<GetUserItemVoteResult_t> GetUserItemVote(PublishedFileId nPublishedFileID);
    private static SteamAPICall_t _AddItemToFavorites(IntPtr self, AppId nAppId, PublishedFileId nPublishedFileID);
    internal CallResult`1<UserFavoriteItemsListChanged_t> AddItemToFavorites(AppId nAppId, PublishedFileId nPublishedFileID);
    private static SteamAPICall_t _RemoveItemFromFavorites(IntPtr self, AppId nAppId, PublishedFileId nPublishedFileID);
    internal CallResult`1<UserFavoriteItemsListChanged_t> RemoveItemFromFavorites(AppId nAppId, PublishedFileId nPublishedFileID);
    private static SteamAPICall_t _SubscribeItem(IntPtr self, PublishedFileId nPublishedFileID);
    internal CallResult`1<RemoteStorageSubscribePublishedFileResult_t> SubscribeItem(PublishedFileId nPublishedFileID);
    private static SteamAPICall_t _UnsubscribeItem(IntPtr self, PublishedFileId nPublishedFileID);
    internal CallResult`1<RemoteStorageUnsubscribePublishedFileResult_t> UnsubscribeItem(PublishedFileId nPublishedFileID);
    private static UInt32 _GetNumSubscribedItems(IntPtr self);
    internal UInt32 GetNumSubscribedItems();
    private static UInt32 _GetSubscribedItems(IntPtr self, PublishedFileId[] pvecPublishedFileID, UInt32 cMaxEntries);
    internal UInt32 GetSubscribedItems(PublishedFileId[] pvecPublishedFileID, UInt32 cMaxEntries);
    private static UInt32 _GetItemState(IntPtr self, PublishedFileId nPublishedFileID);
    internal UInt32 GetItemState(PublishedFileId nPublishedFileID);
    private static bool _GetItemInstallInfo(IntPtr self, PublishedFileId nPublishedFileID, UInt64& punSizeOnDisk, IntPtr pchFolder, UInt32 cchFolderSize, UInt32& punTimeStamp);
    internal bool GetItemInstallInfo(PublishedFileId nPublishedFileID, UInt64& punSizeOnDisk, String& pchFolder, UInt32& punTimeStamp);
    private static bool _GetItemDownloadInfo(IntPtr self, PublishedFileId nPublishedFileID, UInt64& punBytesDownloaded, UInt64& punBytesTotal);
    internal bool GetItemDownloadInfo(PublishedFileId nPublishedFileID, UInt64& punBytesDownloaded, UInt64& punBytesTotal);
    private static bool _DownloadItem(IntPtr self, PublishedFileId nPublishedFileID, bool bHighPriority);
    internal bool DownloadItem(PublishedFileId nPublishedFileID, bool bHighPriority);
    private static bool _BInitWorkshopForGameServer(IntPtr self, DepotId_t unWorkshopDepotID, string pszFolder);
    internal bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder);
    private static void _SuspendDownloads(IntPtr self, bool bSuspend);
    internal void SuspendDownloads(bool bSuspend);
    private static SteamAPICall_t _StartPlaytimeTracking(IntPtr self, PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs);
    internal CallResult`1<StartPlaytimeTrackingResult_t> StartPlaytimeTracking(PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs);
    private static SteamAPICall_t _StopPlaytimeTracking(IntPtr self, PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs);
    internal CallResult`1<StopPlaytimeTrackingResult_t> StopPlaytimeTracking(PublishedFileId[] pvecPublishedFileID, UInt32 unNumPublishedFileIDs);
    private static SteamAPICall_t _StopPlaytimeTrackingForAllItems(IntPtr self);
    internal CallResult`1<StopPlaytimeTrackingResult_t> StopPlaytimeTrackingForAllItems();
    private static SteamAPICall_t _AddDependency(IntPtr self, PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID);
    internal CallResult`1<AddUGCDependencyResult_t> AddDependency(PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID);
    private static SteamAPICall_t _RemoveDependency(IntPtr self, PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID);
    internal CallResult`1<RemoveUGCDependencyResult_t> RemoveDependency(PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID);
    private static SteamAPICall_t _AddAppDependency(IntPtr self, PublishedFileId nPublishedFileID, AppId nAppID);
    internal CallResult`1<AddAppDependencyResult_t> AddAppDependency(PublishedFileId nPublishedFileID, AppId nAppID);
    private static SteamAPICall_t _RemoveAppDependency(IntPtr self, PublishedFileId nPublishedFileID, AppId nAppID);
    internal CallResult`1<RemoveAppDependencyResult_t> RemoveAppDependency(PublishedFileId nPublishedFileID, AppId nAppID);
    private static SteamAPICall_t _GetAppDependencies(IntPtr self, PublishedFileId nPublishedFileID);
    internal CallResult`1<GetAppDependenciesResult_t> GetAppDependencies(PublishedFileId nPublishedFileID);
    private static SteamAPICall_t _DeleteItem(IntPtr self, PublishedFileId nPublishedFileID);
    internal CallResult`1<DeleteItemResult_t> DeleteItem(PublishedFileId nPublishedFileID);
    private static bool _ShowWorkshopEULA(IntPtr self);
    internal bool ShowWorkshopEULA();
    private static SteamAPICall_t _GetWorkshopEULAStatus(IntPtr self);
    internal CallResult`1<WorkshopEULAStatus_t> GetWorkshopEULAStatus();
}
internal class Steamworks.ISteamUser : SteamInterface {
    internal ISteamUser(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamUser_v023();
    public virtual IntPtr GetUserInterfacePointer();
    private static HSteamUser _GetHSteamUser(IntPtr self);
    internal HSteamUser GetHSteamUser();
    private static bool _BLoggedOn(IntPtr self);
    internal bool BLoggedOn();
    private static SteamId _GetSteamID(IntPtr self);
    internal SteamId GetSteamID();
    private static int _InitiateGameConnection_DEPRECATED(IntPtr self, IntPtr pAuthBlob, int cbMaxAuthBlob, SteamId steamIDGameServer, UInt32 unIPServer, ushort usPortServer, bool bSecure);
    internal int InitiateGameConnection_DEPRECATED(IntPtr pAuthBlob, int cbMaxAuthBlob, SteamId steamIDGameServer, UInt32 unIPServer, ushort usPortServer, bool bSecure);
    private static void _TerminateGameConnection_DEPRECATED(IntPtr self, UInt32 unIPServer, ushort usPortServer);
    internal void TerminateGameConnection_DEPRECATED(UInt32 unIPServer, ushort usPortServer);
    private static void _TrackAppUsageEvent(IntPtr self, GameId gameID, int eAppUsageEvent, string pchExtraInfo);
    internal void TrackAppUsageEvent(GameId gameID, int eAppUsageEvent, string pchExtraInfo);
    private static bool _GetUserDataFolder(IntPtr self, IntPtr pchBuffer, int cubBuffer);
    internal bool GetUserDataFolder(String& pchBuffer);
    private static void _StartVoiceRecording(IntPtr self);
    internal void StartVoiceRecording();
    private static void _StopVoiceRecording(IntPtr self);
    internal void StopVoiceRecording();
    private static VoiceResult _GetAvailableVoice(IntPtr self, UInt32& pcbCompressed, UInt32& pcbUncompressed_Deprecated, UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated);
    internal VoiceResult GetAvailableVoice(UInt32& pcbCompressed, UInt32& pcbUncompressed_Deprecated, UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated);
    private static VoiceResult _GetVoice(IntPtr self, bool bWantCompressed, IntPtr pDestBuffer, UInt32 cbDestBufferSize, UInt32& nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, UInt32 cbUncompressedDestBufferSize_Deprecated, UInt32& nUncompressBytesWritten_Deprecated, UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated);
    internal VoiceResult GetVoice(bool bWantCompressed, IntPtr pDestBuffer, UInt32 cbDestBufferSize, UInt32& nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, UInt32 cbUncompressedDestBufferSize_Deprecated, UInt32& nUncompressBytesWritten_Deprecated, UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated);
    private static VoiceResult _DecompressVoice(IntPtr self, IntPtr pCompressed, UInt32 cbCompressed, IntPtr pDestBuffer, UInt32 cbDestBufferSize, UInt32& nBytesWritten, UInt32 nDesiredSampleRate);
    internal VoiceResult DecompressVoice(IntPtr pCompressed, UInt32 cbCompressed, IntPtr pDestBuffer, UInt32 cbDestBufferSize, UInt32& nBytesWritten, UInt32 nDesiredSampleRate);
    private static UInt32 _GetVoiceOptimalSampleRate(IntPtr self);
    internal UInt32 GetVoiceOptimalSampleRate();
    private static HAuthTicket _GetAuthSessionTicket(IntPtr self, IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket, NetIdentity& pSteamNetworkingIdentity);
    internal HAuthTicket GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket, NetIdentity& pSteamNetworkingIdentity);
    private static HAuthTicket _GetAuthTicketForWebApi(IntPtr self, string pchIdentity);
    internal HAuthTicket GetAuthTicketForWebApi(string pchIdentity);
    private static BeginAuthResult _BeginAuthSession(IntPtr self, IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID);
    internal BeginAuthResult BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID);
    private static void _EndAuthSession(IntPtr self, SteamId steamID);
    internal void EndAuthSession(SteamId steamID);
    private static void _CancelAuthTicket(IntPtr self, HAuthTicket hAuthTicket);
    internal void CancelAuthTicket(HAuthTicket hAuthTicket);
    private static UserHasLicenseForAppResult _UserHasLicenseForApp(IntPtr self, SteamId steamID, AppId appID);
    internal UserHasLicenseForAppResult UserHasLicenseForApp(SteamId steamID, AppId appID);
    private static bool _BIsBehindNAT(IntPtr self);
    internal bool BIsBehindNAT();
    private static void _AdvertiseGame(IntPtr self, SteamId steamIDGameServer, UInt32 unIPServer, ushort usPortServer);
    internal void AdvertiseGame(SteamId steamIDGameServer, UInt32 unIPServer, ushort usPortServer);
    private static SteamAPICall_t _RequestEncryptedAppTicket(IntPtr self, IntPtr pDataToInclude, int cbDataToInclude);
    internal CallResult`1<EncryptedAppTicketResponse_t> RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude);
    private static bool _GetEncryptedAppTicket(IntPtr self, IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket);
    internal bool GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, UInt32& pcbTicket);
    private static int _GetGameBadgeLevel(IntPtr self, int nSeries, bool bFoil);
    internal int GetGameBadgeLevel(int nSeries, bool bFoil);
    private static int _GetPlayerSteamLevel(IntPtr self);
    internal int GetPlayerSteamLevel();
    private static SteamAPICall_t _RequestStoreAuthURL(IntPtr self, string pchRedirectURL);
    internal CallResult`1<StoreAuthURLResponse_t> RequestStoreAuthURL(string pchRedirectURL);
    private static bool _BIsPhoneVerified(IntPtr self);
    internal bool BIsPhoneVerified();
    private static bool _BIsTwoFactorEnabled(IntPtr self);
    internal bool BIsTwoFactorEnabled();
    private static bool _BIsPhoneIdentifying(IntPtr self);
    internal bool BIsPhoneIdentifying();
    private static bool _BIsPhoneRequiringVerification(IntPtr self);
    internal bool BIsPhoneRequiringVerification();
    private static SteamAPICall_t _GetMarketEligibility(IntPtr self);
    internal CallResult`1<MarketEligibilityResponse_t> GetMarketEligibility();
    private static SteamAPICall_t _GetDurationControl(IntPtr self);
    internal CallResult`1<DurationControl_t> GetDurationControl();
    private static bool _BSetDurationControlOnlineState(IntPtr self, DurationControlOnlineState eNewState);
    internal bool BSetDurationControlOnlineState(DurationControlOnlineState eNewState);
}
internal class Steamworks.ISteamUserStats : SteamInterface {
    internal ISteamUserStats(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamUserStats_v012();
    public virtual IntPtr GetUserInterfacePointer();
    private static bool _RequestCurrentStats(IntPtr self);
    internal bool RequestCurrentStats();
    private static bool _GetStat(IntPtr self, string pchName, Int32& pData);
    internal bool GetStat(string pchName, Int32& pData);
    private static bool _GetStat(IntPtr self, string pchName, Single& pData);
    internal bool GetStat(string pchName, Single& pData);
    private static bool _SetStat(IntPtr self, string pchName, int nData);
    internal bool SetStat(string pchName, int nData);
    private static bool _SetStat(IntPtr self, string pchName, float fData);
    internal bool SetStat(string pchName, float fData);
    private static bool _UpdateAvgRateStat(IntPtr self, string pchName, float flCountThisSession, double dSessionLength);
    internal bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength);
    private static bool _GetAchievement(IntPtr self, string pchName, Boolean& pbAchieved);
    internal bool GetAchievement(string pchName, Boolean& pbAchieved);
    private static bool _SetAchievement(IntPtr self, string pchName);
    internal bool SetAchievement(string pchName);
    private static bool _ClearAchievement(IntPtr self, string pchName);
    internal bool ClearAchievement(string pchName);
    private static bool _GetAchievementAndUnlockTime(IntPtr self, string pchName, Boolean& pbAchieved, UInt32& punUnlockTime);
    internal bool GetAchievementAndUnlockTime(string pchName, Boolean& pbAchieved, UInt32& punUnlockTime);
    private static bool _StoreStats(IntPtr self);
    internal bool StoreStats();
    private static int _GetAchievementIcon(IntPtr self, string pchName);
    internal int GetAchievementIcon(string pchName);
    private static Utf8StringPointer _GetAchievementDisplayAttribute(IntPtr self, string pchName, string pchKey);
    internal string GetAchievementDisplayAttribute(string pchName, string pchKey);
    private static bool _IndicateAchievementProgress(IntPtr self, string pchName, UInt32 nCurProgress, UInt32 nMaxProgress);
    internal bool IndicateAchievementProgress(string pchName, UInt32 nCurProgress, UInt32 nMaxProgress);
    private static UInt32 _GetNumAchievements(IntPtr self);
    internal UInt32 GetNumAchievements();
    private static Utf8StringPointer _GetAchievementName(IntPtr self, UInt32 iAchievement);
    internal string GetAchievementName(UInt32 iAchievement);
    private static SteamAPICall_t _RequestUserStats(IntPtr self, SteamId steamIDUser);
    internal CallResult`1<UserStatsReceived_t> RequestUserStats(SteamId steamIDUser);
    private static bool _GetUserStat(IntPtr self, SteamId steamIDUser, string pchName, Int32& pData);
    internal bool GetUserStat(SteamId steamIDUser, string pchName, Int32& pData);
    private static bool _GetUserStat(IntPtr self, SteamId steamIDUser, string pchName, Single& pData);
    internal bool GetUserStat(SteamId steamIDUser, string pchName, Single& pData);
    private static bool _GetUserAchievement(IntPtr self, SteamId steamIDUser, string pchName, Boolean& pbAchieved);
    internal bool GetUserAchievement(SteamId steamIDUser, string pchName, Boolean& pbAchieved);
    private static bool _GetUserAchievementAndUnlockTime(IntPtr self, SteamId steamIDUser, string pchName, Boolean& pbAchieved, UInt32& punUnlockTime);
    internal bool GetUserAchievementAndUnlockTime(SteamId steamIDUser, string pchName, Boolean& pbAchieved, UInt32& punUnlockTime);
    private static bool _ResetAllStats(IntPtr self, bool bAchievementsToo);
    internal bool ResetAllStats(bool bAchievementsToo);
    private static SteamAPICall_t _FindOrCreateLeaderboard(IntPtr self, string pchLeaderboardName, LeaderboardSort eLeaderboardSortMethod, LeaderboardDisplay eLeaderboardDisplayType);
    internal CallResult`1<LeaderboardFindResult_t> FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSort eLeaderboardSortMethod, LeaderboardDisplay eLeaderboardDisplayType);
    private static SteamAPICall_t _FindLeaderboard(IntPtr self, string pchLeaderboardName);
    internal CallResult`1<LeaderboardFindResult_t> FindLeaderboard(string pchLeaderboardName);
    private static Utf8StringPointer _GetLeaderboardName(IntPtr self, SteamLeaderboard_t hSteamLeaderboard);
    internal string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard);
    private static int _GetLeaderboardEntryCount(IntPtr self, SteamLeaderboard_t hSteamLeaderboard);
    internal int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard);
    private static LeaderboardSort _GetLeaderboardSortMethod(IntPtr self, SteamLeaderboard_t hSteamLeaderboard);
    internal LeaderboardSort GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard);
    private static LeaderboardDisplay _GetLeaderboardDisplayType(IntPtr self, SteamLeaderboard_t hSteamLeaderboard);
    internal LeaderboardDisplay GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard);
    private static SteamAPICall_t _DownloadLeaderboardEntries(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);
    internal CallResult`1<LeaderboardScoresDownloaded_t> DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);
    private static SteamAPICall_t _DownloadLeaderboardEntriesForUsers(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, SteamId[] prgUsers, int cUsers);
    internal CallResult`1<LeaderboardScoresDownloaded_t> DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, SteamId[] prgUsers, int cUsers);
    private static bool _GetDownloadedLeaderboardEntry(IntPtr self, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t& pLeaderboardEntry, Int32[] pDetails, int cDetailsMax);
    internal bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t& pLeaderboardEntry, Int32[] pDetails, int cDetailsMax);
    private static SteamAPICall_t _UploadLeaderboardScore(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, Int32[] pScoreDetails, int cScoreDetailsCount);
    internal CallResult`1<LeaderboardScoreUploaded_t> UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, Int32[] pScoreDetails, int cScoreDetailsCount);
    private static SteamAPICall_t _AttachLeaderboardUGC(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);
    internal CallResult`1<LeaderboardUGCSet_t> AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);
    private static SteamAPICall_t _GetNumberOfCurrentPlayers(IntPtr self);
    internal CallResult`1<NumberOfCurrentPlayers_t> GetNumberOfCurrentPlayers();
    private static SteamAPICall_t _RequestGlobalAchievementPercentages(IntPtr self);
    internal CallResult`1<GlobalAchievementPercentagesReady_t> RequestGlobalAchievementPercentages();
    private static int _GetMostAchievedAchievementInfo(IntPtr self, IntPtr pchName, UInt32 unNameBufLen, Single& pflPercent, Boolean& pbAchieved);
    internal int GetMostAchievedAchievementInfo(String& pchName, Single& pflPercent, Boolean& pbAchieved);
    private static int _GetNextMostAchievedAchievementInfo(IntPtr self, int iIteratorPrevious, IntPtr pchName, UInt32 unNameBufLen, Single& pflPercent, Boolean& pbAchieved);
    internal int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, String& pchName, Single& pflPercent, Boolean& pbAchieved);
    private static bool _GetAchievementAchievedPercent(IntPtr self, string pchName, Single& pflPercent);
    internal bool GetAchievementAchievedPercent(string pchName, Single& pflPercent);
    private static SteamAPICall_t _RequestGlobalStats(IntPtr self, int nHistoryDays);
    internal CallResult`1<GlobalStatsReceived_t> RequestGlobalStats(int nHistoryDays);
    private static bool _GetGlobalStat(IntPtr self, string pchStatName, Int64& pData);
    internal bool GetGlobalStat(string pchStatName, Int64& pData);
    private static bool _GetGlobalStat(IntPtr self, string pchStatName, Double& pData);
    internal bool GetGlobalStat(string pchStatName, Double& pData);
    private static int _GetGlobalStatHistory(IntPtr self, string pchStatName, Int64[] pData, UInt32 cubData);
    internal int GetGlobalStatHistory(string pchStatName, Int64[] pData, UInt32 cubData);
    private static int _GetGlobalStatHistory(IntPtr self, string pchStatName, Double[] pData, UInt32 cubData);
    internal int GetGlobalStatHistory(string pchStatName, Double[] pData, UInt32 cubData);
    private static bool _GetAchievementProgressLimits(IntPtr self, string pchName, Int32& pnMinProgress, Int32& pnMaxProgress);
    internal bool GetAchievementProgressLimits(string pchName, Int32& pnMinProgress, Int32& pnMaxProgress);
    private static bool _GetAchievementProgressLimits(IntPtr self, string pchName, Single& pfMinProgress, Single& pfMaxProgress);
    internal bool GetAchievementProgressLimits(string pchName, Single& pfMinProgress, Single& pfMaxProgress);
}
internal class Steamworks.ISteamUtils : SteamInterface {
    internal ISteamUtils(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamUtils_v010();
    public virtual IntPtr GetUserInterfacePointer();
    internal static IntPtr SteamAPI_SteamGameServerUtils_v010();
    public virtual IntPtr GetServerInterfacePointer();
    private static UInt32 _GetSecondsSinceAppActive(IntPtr self);
    internal UInt32 GetSecondsSinceAppActive();
    private static UInt32 _GetSecondsSinceComputerActive(IntPtr self);
    internal UInt32 GetSecondsSinceComputerActive();
    private static Universe _GetConnectedUniverse(IntPtr self);
    internal Universe GetConnectedUniverse();
    private static UInt32 _GetServerRealTime(IntPtr self);
    internal UInt32 GetServerRealTime();
    private static Utf8StringPointer _GetIPCountry(IntPtr self);
    internal string GetIPCountry();
    private static bool _GetImageSize(IntPtr self, int iImage, UInt32& pnWidth, UInt32& pnHeight);
    internal bool GetImageSize(int iImage, UInt32& pnWidth, UInt32& pnHeight);
    private static bool _GetImageRGBA(IntPtr self, int iImage, Byte[] pubDest, int nDestBufferSize);
    internal bool GetImageRGBA(int iImage, Byte[] pubDest, int nDestBufferSize);
    private static byte _GetCurrentBatteryPower(IntPtr self);
    internal byte GetCurrentBatteryPower();
    private static UInt32 _GetAppID(IntPtr self);
    internal UInt32 GetAppID();
    private static void _SetOverlayNotificationPosition(IntPtr self, NotificationPosition eNotificationPosition);
    internal void SetOverlayNotificationPosition(NotificationPosition eNotificationPosition);
    private static bool _IsAPICallCompleted(IntPtr self, SteamAPICall_t hSteamAPICall, Boolean& pbFailed);
    internal bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, Boolean& pbFailed);
    private static SteamAPICallFailure _GetAPICallFailureReason(IntPtr self, SteamAPICall_t hSteamAPICall);
    internal SteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);
    private static bool _GetAPICallResult(IntPtr self, SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, Boolean& pbFailed);
    internal bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, Boolean& pbFailed);
    private static UInt32 _GetIPCCallCount(IntPtr self);
    internal UInt32 GetIPCCallCount();
    private static void _SetWarningMessageHook(IntPtr self, IntPtr pFunction);
    internal void SetWarningMessageHook(IntPtr pFunction);
    private static bool _IsOverlayEnabled(IntPtr self);
    internal bool IsOverlayEnabled();
    private static bool _BOverlayNeedsPresent(IntPtr self);
    internal bool BOverlayNeedsPresent();
    private static SteamAPICall_t _CheckFileSignature(IntPtr self, string szFileName);
    internal CallResult`1<CheckFileSignature_t> CheckFileSignature(string szFileName);
    private static bool _ShowGamepadTextInput(IntPtr self, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, UInt32 unCharMax, string pchExistingText);
    internal bool ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, UInt32 unCharMax, string pchExistingText);
    private static UInt32 _GetEnteredGamepadTextLength(IntPtr self);
    internal UInt32 GetEnteredGamepadTextLength();
    private static bool _GetEnteredGamepadTextInput(IntPtr self, IntPtr pchText, UInt32 cchText);
    internal bool GetEnteredGamepadTextInput(String& pchText);
    private static Utf8StringPointer _GetSteamUILanguage(IntPtr self);
    internal string GetSteamUILanguage();
    private static bool _IsSteamRunningInVR(IntPtr self);
    internal bool IsSteamRunningInVR();
    private static void _SetOverlayNotificationInset(IntPtr self, int nHorizontalInset, int nVerticalInset);
    internal void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);
    private static bool _IsSteamInBigPictureMode(IntPtr self);
    internal bool IsSteamInBigPictureMode();
    private static void _StartVRDashboard(IntPtr self);
    internal void StartVRDashboard();
    private static bool _IsVRHeadsetStreamingEnabled(IntPtr self);
    internal bool IsVRHeadsetStreamingEnabled();
    private static void _SetVRHeadsetStreamingEnabled(IntPtr self, bool bEnabled);
    internal void SetVRHeadsetStreamingEnabled(bool bEnabled);
    private static bool _IsSteamChinaLauncher(IntPtr self);
    internal bool IsSteamChinaLauncher();
    private static bool _InitFilterText(IntPtr self, UInt32 unFilterOptions);
    internal bool InitFilterText(UInt32 unFilterOptions);
    private static int _FilterText(IntPtr self, TextFilteringContext eContext, SteamId sourceSteamID, string pchInputMessage, IntPtr pchOutFilteredText, UInt32 nByteSizeOutFilteredText);
    internal int FilterText(TextFilteringContext eContext, SteamId sourceSteamID, string pchInputMessage, String& pchOutFilteredText);
    private static SteamIPv6ConnectivityState _GetIPv6ConnectivityState(IntPtr self, SteamIPv6ConnectivityProtocol eProtocol);
    internal SteamIPv6ConnectivityState GetIPv6ConnectivityState(SteamIPv6ConnectivityProtocol eProtocol);
    private static bool _IsSteamRunningOnSteamDeck(IntPtr self);
    internal bool IsSteamRunningOnSteamDeck();
    private static bool _ShowFloatingGamepadTextInput(IntPtr self, TextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight);
    internal bool ShowFloatingGamepadTextInput(TextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight);
    private static void _SetGameLauncherMode(IntPtr self, bool bLauncherMode);
    internal void SetGameLauncherMode(bool bLauncherMode);
    private static bool _DismissFloatingGamepadTextInput(IntPtr self);
    internal bool DismissFloatingGamepadTextInput();
}
internal class Steamworks.ISteamVideo : SteamInterface {
    internal ISteamVideo(bool IsGameServer);
    internal static IntPtr SteamAPI_SteamVideo_v002();
    public virtual IntPtr GetUserInterfacePointer();
    private static void _GetVideoURL(IntPtr self, AppId unVideoAppID);
    internal void GetVideoURL(AppId unVideoAppID);
    private static bool _IsBroadcasting(IntPtr self, Int32& pnNumViewers);
    internal bool IsBroadcasting(Int32& pnNumViewers);
    private static void _GetOPFSettings(IntPtr self, AppId unVideoAppID);
    internal void GetOPFSettings(AppId unVideoAppID);
    private static bool _GetOPFStringForApp(IntPtr self, AppId unVideoAppID, IntPtr pchBuffer, Int32& pnBufferSize);
    internal bool GetOPFStringForApp(AppId unVideoAppID, String& pchBuffer, Int32& pnBufferSize);
}
public enum Steamworks.ItemPreviewType : Enum {
    
public int value__;
    
public static ItemPreviewType Image;
    
public static ItemPreviewType YouTubeVideo;
    
public static ItemPreviewType Sketchfab;
    
public static ItemPreviewType EnvironmentMap_HorizontalCross;
    
public static ItemPreviewType EnvironmentMap_LatLong;
    
public static ItemPreviewType ReservedMax;
}
internal enum Steamworks.ItemState : Enum {
    
public int value__;
    
public static ItemState None;
    
public static ItemState Subscribed;
    
public static ItemState LegacyItem;
    
public static ItemState Installed;
    
public static ItemState NeedsUpdate;
    
public static ItemState Downloading;
    
public static ItemState DownloadPending;
}
internal enum Steamworks.ItemStatistic : Enum {
    
public int value__;
    
public static ItemStatistic NumSubscriptions;
    
public static ItemStatistic NumFavorites;
    
public static ItemStatistic NumFollowers;
    
public static ItemStatistic NumUniqueSubscriptions;
    
public static ItemStatistic NumUniqueFavorites;
    
public static ItemStatistic NumUniqueFollowers;
    
public static ItemStatistic NumUniqueWebsiteViews;
    
public static ItemStatistic ReportScore;
    
public static ItemStatistic NumSecondsPlayed;
    
public static ItemStatistic NumPlaytimeSessions;
    
public static ItemStatistic NumComments;
    
public static ItemStatistic NumSecondsPlayedDuringTimePeriod;
    
public static ItemStatistic NumPlaytimeSessionsDuringTimePeriod;
}
internal enum Steamworks.ItemUpdateStatus : Enum {
    
public int value__;
    
public static ItemUpdateStatus Invalid;
    
public static ItemUpdateStatus PreparingConfig;
    
public static ItemUpdateStatus PreparingContent;
    
public static ItemUpdateStatus UploadingContent;
    
public static ItemUpdateStatus UploadingPreviewFile;
    
public static ItemUpdateStatus CommittingChanges;
}
internal enum Steamworks.LeaderboardDataRequest : Enum {
    
public int value__;
    
public static LeaderboardDataRequest Global;
    
public static LeaderboardDataRequest GlobalAroundUser;
    
public static LeaderboardDataRequest Friends;
    
public static LeaderboardDataRequest Users;
}
internal enum Steamworks.LeaderboardUploadScoreMethod : Enum {
    
public int value__;
    
public static LeaderboardUploadScoreMethod None;
    
public static LeaderboardUploadScoreMethod KeepBest;
    
public static LeaderboardUploadScoreMethod ForceUpdate;
}
internal enum Steamworks.LobbyComparison : Enum {
    
public int value__;
    
public static LobbyComparison EqualToOrLessThan;
    
public static LobbyComparison LessThan;
    
public static LobbyComparison Equal;
    
public static LobbyComparison GreaterThan;
    
public static LobbyComparison EqualToOrGreaterThan;
    
public static LobbyComparison NotEqual;
}
internal enum Steamworks.LobbyDistanceFilter : Enum {
    
public int value__;
    
public static LobbyDistanceFilter Close;
    
public static LobbyDistanceFilter Default;
    
public static LobbyDistanceFilter Far;
    
public static LobbyDistanceFilter Worldwide;
}
internal enum Steamworks.LobbyType : Enum {
    
public int value__;
    
public static LobbyType Private;
    
public static LobbyType FriendsOnly;
    
public static LobbyType Public;
    
public static LobbyType Invisible;
    
public static LobbyType PrivateUnique;
}
internal enum Steamworks.MarketNotAllowedReasonFlags : Enum {
    
public int value__;
    
public static MarketNotAllowedReasonFlags None;
    
public static MarketNotAllowedReasonFlags TemporaryFailure;
    
public static MarketNotAllowedReasonFlags AccountDisabled;
    
public static MarketNotAllowedReasonFlags AccountLockedDown;
    
public static MarketNotAllowedReasonFlags AccountLimited;
    
public static MarketNotAllowedReasonFlags TradeBanned;
    
public static MarketNotAllowedReasonFlags AccountNotTrusted;
    
public static MarketNotAllowedReasonFlags SteamGuardNotEnabled;
    
public static MarketNotAllowedReasonFlags SteamGuardOnlyRecentlyEnabled;
    
public static MarketNotAllowedReasonFlags RecentPasswordReset;
    
public static MarketNotAllowedReasonFlags NewPaymentMethod;
    
public static MarketNotAllowedReasonFlags InvalidCookie;
    
public static MarketNotAllowedReasonFlags UsingNewDevice;
    
public static MarketNotAllowedReasonFlags RecentSelfRefund;
    
public static MarketNotAllowedReasonFlags NewPaymentMethodCannotBeVerified;
    
public static MarketNotAllowedReasonFlags NoRecentPurchases;
    
public static MarketNotAllowedReasonFlags AcceptedWalletGift;
}
internal enum Steamworks.MatchMakingServerResponse : Enum {
    
public int value__;
    
public static MatchMakingServerResponse ServerResponded;
    
public static MatchMakingServerResponse ServerFailedToRespond;
    
public static MatchMakingServerResponse NoServersListedOnMasterServer;
}
internal class Steamworks.MonoPInvokeCallbackAttribute : Attribute {
}
internal class Steamworks.MotionState : ValueType {
    
public float RotQuatX;
    
public float RotQuatY;
    
public float RotQuatZ;
    
public float RotQuatW;
    
public float PosAccelX;
    
public float PosAccelY;
    
public float PosAccelZ;
    
public float RotVelX;
    
public float RotVelY;
    
public float RotVelZ;
}
public enum Steamworks.MusicStatus : Enum {
    
public int value__;
    
public static MusicStatus Undefined;
    
public static MusicStatus Playing;
    
public static MusicStatus Paused;
    
public static MusicStatus Idle;
}
internal enum Steamworks.NetConfig : Enum {
    
public int value__;
    
public static NetConfig Invalid;
    
public static NetConfig TimeoutInitial;
    
public static NetConfig TimeoutConnected;
    
public static NetConfig SendBufferSize;
    
public static NetConfig ConnectionUserData;
    
public static NetConfig SendRateMin;
    
public static NetConfig SendRateMax;
    
public static NetConfig NagleTime;
    
public static NetConfig IP_AllowWithoutAuth;
    
public static NetConfig MTU_PacketSize;
    
public static NetConfig MTU_DataSize;
    
public static NetConfig Unencrypted;
    
public static NetConfig SymmetricConnect;
    
public static NetConfig LocalVirtualPort;
    
public static NetConfig DualWifi_Enable;
    
public static NetConfig EnableDiagnosticsUI;
    
public static NetConfig FakePacketLoss_Send;
    
public static NetConfig FakePacketLoss_Recv;
    
public static NetConfig FakePacketLag_Send;
    
public static NetConfig FakePacketLag_Recv;
    
public static NetConfig FakePacketReorder_Send;
    
public static NetConfig FakePacketReorder_Recv;
    
public static NetConfig FakePacketReorder_Time;
    
public static NetConfig FakePacketDup_Send;
    
public static NetConfig FakePacketDup_Recv;
    
public static NetConfig FakePacketDup_TimeMax;
    
public static NetConfig PacketTraceMaxBytes;
    
public static NetConfig FakeRateLimit_Send_Rate;
    
public static NetConfig FakeRateLimit_Send_Burst;
    
public static NetConfig FakeRateLimit_Recv_Rate;
    
public static NetConfig FakeRateLimit_Recv_Burst;
    
public static NetConfig Callback_ConnectionStatusChanged;
    
public static NetConfig Callback_AuthStatusChanged;
    
public static NetConfig Callback_RelayNetworkStatusChanged;
    
public static NetConfig Callback_MessagesSessionRequest;
    
public static NetConfig Callback_MessagesSessionFailed;
    
public static NetConfig Callback_CreateConnectionSignaling;
    
public static NetConfig Callback_FakeIPResult;
    
public static NetConfig P2P_STUN_ServerList;
    
public static NetConfig P2P_Transport_ICE_Enable;
    
public static NetConfig P2P_Transport_ICE_Penalty;
    
public static NetConfig P2P_Transport_SDR_Penalty;
    
public static NetConfig P2P_TURN_ServerList;
    
public static NetConfig P2P_TURN_UserList;
    
public static NetConfig P2P_TURN_PassList;
    
public static NetConfig P2P_Transport_ICE_Implementation;
    
public static NetConfig SDRClient_ConsecutitivePingTimeoutsFailInitial;
    
public static NetConfig SDRClient_ConsecutitivePingTimeoutsFail;
    
public static NetConfig SDRClient_MinPingsBeforePingAccurate;
    
public static NetConfig SDRClient_SingleSocket;
    
public static NetConfig SDRClient_ForceRelayCluster;
    
public static NetConfig SDRClient_DebugTicketAddress;
    
public static NetConfig SDRClient_ForceProxyAddr;
    
public static NetConfig SDRClient_FakeClusterPing;
    
public static NetConfig LogLevel_AckRTT;
    
public static NetConfig LogLevel_PacketDecode;
    
public static NetConfig LogLevel_Message;
    
public static NetConfig LogLevel_PacketGaps;
    
public static NetConfig LogLevel_P2PRendezvous;
    
public static NetConfig LogLevel_SDRRelayPings;
    
public static NetConfig DELETED_EnumerateDevVars;
}
internal enum Steamworks.NetConfigResult : Enum {
    
public int value__;
    
public static NetConfigResult BadValue;
    
public static NetConfigResult BadScopeObj;
    
public static NetConfigResult BufferTooSmall;
    
public static NetConfigResult OK;
    
public static NetConfigResult OKInherited;
}
internal enum Steamworks.NetConfigScope : Enum {
    
public int value__;
    
public static NetConfigScope Global;
    
public static NetConfigScope SocketsInterface;
    
public static NetConfigScope ListenSocket;
    
public static NetConfigScope Connection;
}
internal enum Steamworks.NetConfigType : Enum {
    
public int value__;
    
public static NetConfigType Int32;
    
public static NetConfigType Int64;
    
public static NetConfigType Float;
    
public static NetConfigType String;
    
public static NetConfigType Ptr;
}
public enum Steamworks.NetConnectionEnd : Enum {
    
public int value__;
    
public static NetConnectionEnd Invalid;
    
public static NetConnectionEnd App_Min;
    
public static NetConnectionEnd App_Generic;
    
public static NetConnectionEnd App_Max;
    
public static NetConnectionEnd AppException_Min;
    
public static NetConnectionEnd AppException_Generic;
    
public static NetConnectionEnd AppException_Max;
    
public static NetConnectionEnd Local_Min;
    
public static NetConnectionEnd Local_OfflineMode;
    
public static NetConnectionEnd Local_ManyRelayConnectivity;
    
public static NetConnectionEnd Local_HostedServerPrimaryRelay;
    
public static NetConnectionEnd Local_NetworkConfig;
    
public static NetConnectionEnd Local_Rights;
    
public static NetConnectionEnd Local_P2P_ICE_NoPublicAddresses;
    
public static NetConnectionEnd Local_Max;
    
public static NetConnectionEnd Remote_Min;
    
public static NetConnectionEnd Remote_Timeout;
    
public static NetConnectionEnd Remote_BadCrypt;
    
public static NetConnectionEnd Remote_BadCert;
    
public static NetConnectionEnd Remote_BadProtocolVersion;
    
public static NetConnectionEnd Remote_P2P_ICE_NoPublicAddresses;
    
public static NetConnectionEnd Remote_Max;
    
public static NetConnectionEnd Misc_Min;
    
public static NetConnectionEnd Misc_Generic;
    
public static NetConnectionEnd Misc_InternalError;
    
public static NetConnectionEnd Misc_Timeout;
    
public static NetConnectionEnd Misc_SteamConnectivity;
    
public static NetConnectionEnd Misc_NoRelaySessionsToClient;
    
public static NetConnectionEnd Misc_P2P_Rendezvous;
    
public static NetConnectionEnd Misc_P2P_NAT_Firewall;
    
public static NetConnectionEnd Misc_PeerSentNoConnection;
    
public static NetConnectionEnd Misc_Max;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Steamworks.NetDebugFunc : MulticastDelegate {
    public NetDebugFunc(object object, IntPtr method);
    public virtual void Invoke(NetDebugOutput nType, IntPtr pszMsg);
    public virtual IAsyncResult BeginInvoke(NetDebugOutput nType, IntPtr pszMsg, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Steamworks.NetDebugOutput : Enum {
    
public int value__;
    
public static NetDebugOutput None;
    
public static NetDebugOutput Bug;
    
public static NetDebugOutput Error;
    
public static NetDebugOutput Important;
    
public static NetDebugOutput Warning;
    
public static NetDebugOutput Msg;
    
public static NetDebugOutput Verbose;
    
public static NetDebugOutput Debug;
    
public static NetDebugOutput Everything;
}
internal enum Steamworks.NetIdentityType : Enum {
    
public int value__;
    
public static NetIdentityType Invalid;
    
public static NetIdentityType SteamID;
    
public static NetIdentityType XboxPairwiseID;
    
public static NetIdentityType SonyPSN;
    
public static NetIdentityType GoogleStadia;
    
public static NetIdentityType IPAddress;
    
public static NetIdentityType GenericString;
    
public static NetIdentityType GenericBytes;
    
public static NetIdentityType UnknownType;
    
public static NetIdentityType Force32bit;
}
public enum Steamworks.NotificationPosition : Enum {
    
public int value__;
    
public static NotificationPosition Invalid;
    
public static NotificationPosition TopLeft;
    
public static NotificationPosition TopRight;
    
public static NotificationPosition BottomLeft;
    
public static NotificationPosition BottomRight;
}
public enum Steamworks.OverlayToStoreFlag : Enum {
    
public int value__;
    
public static OverlayToStoreFlag None;
    
public static OverlayToStoreFlag AddToCart;
    
public static OverlayToStoreFlag AddToCartAndShow;
}
public enum Steamworks.P2PSend : Enum {
    
public int value__;
    
public static P2PSend Unreliable;
    
public static P2PSend UnreliableNoDelay;
    
public static P2PSend Reliable;
    
public static P2PSend ReliableWithBuffering;
}
public enum Steamworks.P2PSessionError : Enum {
    
public int value__;
    
public static P2PSessionError None;
    
public static P2PSessionError NoRightsToApp;
    
public static P2PSessionError Timeout;
    
public static P2PSessionError NotRunningApp_DELETED;
    
public static P2PSessionError DestinationNotLoggedIn_DELETED;
    
public static P2PSessionError Max;
}
public enum Steamworks.ParentalFeature : Enum {
    
public int value__;
    
public static ParentalFeature Invalid;
    
public static ParentalFeature Store;
    
public static ParentalFeature Community;
    
public static ParentalFeature Profile;
    
public static ParentalFeature Friends;
    
public static ParentalFeature News;
    
public static ParentalFeature Trading;
    
public static ParentalFeature Settings;
    
public static ParentalFeature Console;
    
public static ParentalFeature Browser;
    
public static ParentalFeature ParentalSetup;
    
public static ParentalFeature Library;
    
public static ParentalFeature Test;
    
public static ParentalFeature SiteLicense;
    
public static ParentalFeature KioskMode;
    
public static ParentalFeature Max;
}
public class Steamworks.PartyBeacon : ValueType {
    
internal PartyBeaconID_t Id;
    
private static ISteamParties Internal { get; }
    
public SteamId Owner { get; }
    
public string MetaData { get; }
    private static ISteamParties get_Internal();
    public SteamId get_Owner();
    public string get_MetaData();
    [AsyncStateMachineAttribute("Steamworks.PartyBeacon/<JoinAsync>d__7")]
public Task`1<string> JoinAsync();
    public void OnReservationCompleted(SteamId steamid);
    public void CancelReservation(SteamId steamid);
    public bool Destroy();
}
internal enum Steamworks.PersonaChange : Enum {
    
public int value__;
    
public static PersonaChange Name;
    
public static PersonaChange Status;
    
public static PersonaChange ComeOnline;
    
public static PersonaChange GoneOffline;
    
public static PersonaChange GamePlayed;
    
public static PersonaChange GameServer;
    
public static PersonaChange Avatar;
    
public static PersonaChange JoinedSource;
    
public static PersonaChange LeftSource;
    
public static PersonaChange RelationshipChanged;
    
public static PersonaChange NameFirstSet;
    
public static PersonaChange Broadcast;
    
public static PersonaChange Nickname;
    
public static PersonaChange SteamLevel;
    
public static PersonaChange RichPresence;
}
internal static class Steamworks.Platform : object {
    
public static int StructPlatformPackSize;
    
public static string LibraryName;
    
public static CallingConvention CC;
    
public static int StructPackSize;
}
internal enum Steamworks.PlayerResult_t : Enum {
    
public int value__;
    
public static PlayerResult_t FailedToConnect;
    
public static PlayerResult_t Abandoned;
    
public static PlayerResult_t Kicked;
    
public static PlayerResult_t Incomplete;
    
public static PlayerResult_t Completed;
}
internal class Steamworks.PreserveAttribute : Attribute {
}
public enum Steamworks.Relationship : Enum {
    
public int value__;
    
public static Relationship None;
    
public static Relationship Blocked;
    
public static Relationship RequestRecipient;
    
public static Relationship Friend;
    
public static Relationship RequestInitiator;
    
public static Relationship Ignored;
    
public static Relationship IgnoredFriend;
    
public static Relationship Suggested_DEPRECATED;
    
public static Relationship Max;
}
internal enum Steamworks.RemoteStorageFilePathType : Enum {
    
public int value__;
    
public static RemoteStorageFilePathType Invalid;
    
public static RemoteStorageFilePathType Absolute;
    
public static RemoteStorageFilePathType APIFilename;
}
internal enum Steamworks.RemoteStorageLocalFileChange : Enum {
    
public int value__;
    
public static RemoteStorageLocalFileChange Invalid;
    
public static RemoteStorageLocalFileChange FileUpdated;
    
public static RemoteStorageLocalFileChange FileDeleted;
}
internal enum Steamworks.RemoteStoragePlatform : Enum {
    
public int value__;
    
public static RemoteStoragePlatform None;
    
public static RemoteStoragePlatform Windows;
    
public static RemoteStoragePlatform OSX;
    
public static RemoteStoragePlatform PS3;
    
public static RemoteStoragePlatform Linux;
    
public static RemoteStoragePlatform Switch;
    
public static RemoteStoragePlatform Android;
    
public static RemoteStoragePlatform IOS;
    
public static RemoteStoragePlatform All;
}
internal enum Steamworks.RemoteStoragePublishedFileVisibility : Enum {
    
public int value__;
    
public static RemoteStoragePublishedFileVisibility Public;
    
public static RemoteStoragePublishedFileVisibility FriendsOnly;
    
public static RemoteStoragePublishedFileVisibility Private;
    
public static RemoteStoragePublishedFileVisibility Unlisted;
}
public enum Steamworks.Result : Enum {
    
public int value__;
    
public static Result None;
    
public static Result OK;
    
public static Result Fail;
    
public static Result NoConnection;
    
public static Result InvalidPassword;
    
public static Result LoggedInElsewhere;
    
public static Result InvalidProtocolVer;
    
public static Result InvalidParam;
    
public static Result FileNotFound;
    
public static Result Busy;
    
public static Result InvalidState;
    
public static Result InvalidName;
    
public static Result InvalidEmail;
    
public static Result DuplicateName;
    
public static Result AccessDenied;
    
public static Result Timeout;
    
public static Result Banned;
    
public static Result AccountNotFound;
    
public static Result InvalidSteamID;
    
public static Result ServiceUnavailable;
    
public static Result NotLoggedOn;
    
public static Result Pending;
    
public static Result EncryptionFailure;
    
public static Result InsufficientPrivilege;
    
public static Result LimitExceeded;
    
public static Result Revoked;
    
public static Result Expired;
    
public static Result AlreadyRedeemed;
    
public static Result DuplicateRequest;
    
public static Result AlreadyOwned;
    
public static Result IPNotFound;
    
public static Result PersistFailed;
    
public static Result LockingFailed;
    
public static Result LogonSessionReplaced;
    
public static Result ConnectFailed;
    
public static Result HandshakeFailed;
    
public static Result IOFailure;
    
public static Result RemoteDisconnect;
    
public static Result ShoppingCartNotFound;
    
public static Result Blocked;
    
public static Result Ignored;
    
public static Result NoMatch;
    
public static Result AccountDisabled;
    
public static Result ServiceReadOnly;
    
public static Result AccountNotFeatured;
    
public static Result AdministratorOK;
    
public static Result ContentVersion;
    
public static Result TryAnotherCM;
    
public static Result PasswordRequiredToKickSession;
    
public static Result AlreadyLoggedInElsewhere;
    
public static Result Suspended;
    
public static Result Cancelled;
    
public static Result DataCorruption;
    
public static Result DiskFull;
    
public static Result RemoteCallFailed;
    
public static Result PasswordUnset;
    
public static Result ExternalAccountUnlinked;
    
public static Result PSNTicketInvalid;
    
public static Result ExternalAccountAlreadyLinked;
    
public static Result RemoteFileConflict;
    
public static Result IllegalPassword;
    
public static Result SameAsPreviousValue;
    
public static Result AccountLogonDenied;
    
public static Result CannotUseOldPassword;
    
public static Result InvalidLoginAuthCode;
    
public static Result AccountLogonDeniedNoMail;
    
public static Result HardwareNotCapableOfIPT;
    
public static Result IPTInitError;
    
public static Result ParentalControlRestricted;
    
public static Result FacebookQueryError;
    
public static Result ExpiredLoginAuthCode;
    
public static Result IPLoginRestrictionFailed;
    
public static Result AccountLockedDown;
    
public static Result AccountLogonDeniedVerifiedEmailRequired;
    
public static Result NoMatchingURL;
    
public static Result BadResponse;
    
public static Result RequirePasswordReEntry;
    
public static Result ValueOutOfRange;
    
public static Result UnexpectedError;
    
public static Result Disabled;
    
public static Result InvalidCEGSubmission;
    
public static Result RestrictedDevice;
    
public static Result RegionLocked;
    
public static Result RateLimitExceeded;
    
public static Result AccountLoginDeniedNeedTwoFactor;
    
public static Result ItemDeleted;
    
public static Result AccountLoginDeniedThrottle;
    
public static Result TwoFactorCodeMismatch;
    
public static Result TwoFactorActivationCodeMismatch;
    
public static Result AccountAssociatedToMultiplePartners;
    
public static Result NotModified;
    
public static Result NoMobileDevice;
    
public static Result TimeNotSynced;
    
public static Result SmsCodeFailed;
    
public static Result AccountLimitExceeded;
    
public static Result AccountActivityLimitExceeded;
    
public static Result PhoneActivityLimitExceeded;
    
public static Result RefundToWallet;
    
public static Result EmailSendFailure;
    
public static Result NotSettled;
    
public static Result NeedCaptcha;
    
public static Result GSLTDenied;
    
public static Result GSOwnerDenied;
    
public static Result InvalidItemType;
    
public static Result IPBanned;
    
public static Result GSLTExpired;
    
public static Result InsufficientFunds;
    
public static Result TooManyPending;
    
public static Result NoSiteLicensesFound;
    
public static Result WGNetworkSendExceeded;
    
public static Result AccountNotFriends;
    
public static Result LimitedUserAccount;
    
public static Result CantRemoveItem;
    
public static Result AccountDeleted;
    
public static Result ExistingUserCancelledLicense;
    
public static Result CommunityCooldown;
    
public static Result NoLauncherSpecified;
    
public static Result MustAgreeToSSA;
    
public static Result LauncherMigrated;
    
public static Result SteamRealmMismatch;
    
public static Result InvalidSignature;
    
public static Result ParseFailure;
    
public static Result NoVerifiedPhone;
    
public static Result InsufficientBattery;
    
public static Result ChargerRequired;
    
public static Result CachedCredentialInvalid;
    
public static Result K_EResultPhoneNumberIsVOIP;
}
public enum Steamworks.RoomEnter : Enum {
    
public int value__;
    
public static RoomEnter Success;
    
public static RoomEnter DoesntExist;
    
public static RoomEnter NotAllowed;
    
public static RoomEnter Full;
    
public static RoomEnter Error;
    
public static RoomEnter Banned;
    
public static RoomEnter Limited;
    
public static RoomEnter ClanDisabled;
    
public static RoomEnter CommunityBan;
    
public static RoomEnter MemberBlockedYou;
    
public static RoomEnter YouBlockedMember;
    
public static RoomEnter RatelimitExceeded;
}
public abstract class Steamworks.ServerList.Base : object {
    [CompilerGeneratedAttribute]

private AppId <AppId>k__BackingField;
    [CompilerGeneratedAttribute]

private Action OnChanges;
    [CompilerGeneratedAttribute]

private Action`1<ServerInfo> OnResponsiveServer;
    
public List`1<ServerInfo> Responsive;
    
public List`1<ServerInfo> Unresponsive;
    
public List`1<ServerInfo> Unqueried;
    
internal HServerListRequest request;
    
internal List`1<MatchMakingKeyValuePair> filters;
    
internal List`1<int> watchList;
    
internal int LastCount;
    
internal static ISteamMatchmakingServers Internal { get; }
    
public AppId AppId { get; public set; }
    
internal int Count { get; }
    
internal bool IsRefreshing { get; }
    internal static ISteamMatchmakingServers get_Internal();
    [CompilerGeneratedAttribute]
public AppId get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(AppId value);
    [CompilerGeneratedAttribute]
public void add_OnChanges(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnChanges(Action value);
    [CompilerGeneratedAttribute]
public void add_OnResponsiveServer(Action`1<ServerInfo> value);
    [CompilerGeneratedAttribute]
public void remove_OnResponsiveServer(Action`1<ServerInfo> value);
    [AsyncStateMachineAttribute("Steamworks.ServerList.Base/<RunQueryAsync>d__16")]
public virtual Task`1<bool> RunQueryAsync(float timeoutSeconds);
    public virtual void Cancel();
    internal abstract virtual void LaunchQuery();
    internal virtual MatchMakingKeyValuePair[] GetFilters();
    public void AddFilter(string key, string value);
    internal int get_Count();
    internal bool get_IsRefreshing();
    private void Reset();
    private void ReleaseQuery();
    public virtual void Dispose();
    internal void InvokeChanges();
    private void UpdatePending();
    public void UpdateResponsive();
    private void MovePendingToUnresponsive();
    private void OnServer(ServerInfo serverInfo, bool responded);
    [CompilerGeneratedAttribute]
private bool <UpdateResponsive>b__34_0(int x);
    [CompilerGeneratedAttribute]
private bool <MovePendingToUnresponsive>b__35_0(int x);
}
public class Steamworks.ServerList.Favourites : Base {
    internal virtual void LaunchQuery();
}
public class Steamworks.ServerList.Friends : Base {
    internal virtual void LaunchQuery();
}
public class Steamworks.ServerList.History : Base {
    internal virtual void LaunchQuery();
}
public class Steamworks.ServerList.Internet : Base {
    internal virtual void LaunchQuery();
}
public class Steamworks.ServerList.IpList : Internet {
    
public List`1<string> Ips;
    
private bool wantsCancel;
    public IpList(IEnumerable`1<string> list);
    public IpList(String[] list);
    [AsyncStateMachineAttribute("Steamworks.ServerList.IpList/<RunQueryAsync>d__4")]
public virtual Task`1<bool> RunQueryAsync(float timeoutSeconds);
    public virtual void Cancel();
    public virtual void Dispose();
}
public class Steamworks.ServerList.LocalNetwork : Base {
    internal virtual void LaunchQuery();
}
internal enum Steamworks.ServerMode : Enum {
    
public int value__;
    
public static ServerMode Invalid;
    
public static ServerMode NoAuthentication;
    
public static ServerMode Authentication;
    
public static ServerMode AuthenticationAndSecure;
}
public class Steamworks.SocketManager : object {
    [CompilerGeneratedAttribute]

private ISocketManager <Interface>k__BackingField;
    
public HashSet`1<Connection> Connecting;
    
public HashSet`1<Connection> Connected;
    [CompilerGeneratedAttribute]

private Socket <Socket>k__BackingField;
    
internal HSteamNetPollGroup pollGroup;
    
public ISocketManager Interface { get; public set; }
    
public Socket Socket { get; internal set; }
    [CompilerGeneratedAttribute]
public ISocketManager get_Interface();
    [CompilerGeneratedAttribute]
public void set_Interface(ISocketManager value);
    [CompilerGeneratedAttribute]
public Socket get_Socket();
    [CompilerGeneratedAttribute]
internal void set_Socket(Socket value);
    public virtual string ToString();
    internal void Initialize();
    public bool Close();
    public virtual void OnConnectionChanged(Connection connection, ConnectionInfo info);
    public virtual void OnConnecting(Connection connection, ConnectionInfo info);
    public virtual void OnConnected(Connection connection, ConnectionInfo info);
    public virtual void OnDisconnected(Connection connection, ConnectionInfo info);
    public int Receive(int bufferSize, bool receiveToEnd);
    internal void ReceiveMessage(IntPtr msgPtr);
    public virtual void OnMessage(Connection connection, NetIdentity identity, IntPtr data, int size, long messageNum, long recvTime, int channel);
}
internal static class Steamworks.SourceServerQuery : object {
    
private static Byte[] A2S_SERVERQUERY_GETCHALLENGE;
    
private static byte A2S_RULES;
    
private static Dictionary`2<IPEndPoint, Task`1<Dictionary`2<string, string>>> PendingQueries;
    private static SourceServerQuery();
    internal static Task`1<Dictionary`2<string, string>> GetRules(ServerInfo server);
    [AsyncStateMachineAttribute("Steamworks.SourceServerQuery/<GetRulesImpl>d__4")]
private static Task`1<Dictionary`2<string, string>> GetRulesImpl(IPEndPoint endpoint);
    [AsyncStateMachineAttribute("Steamworks.SourceServerQuery/<GetRules>d__5")]
private static Task`1<Dictionary`2<string, string>> GetRules(UdpClient client);
    [AsyncStateMachineAttribute("Steamworks.SourceServerQuery/<Receive>d__6")]
private static Task`1<Byte[]> Receive(UdpClient client);
    [AsyncStateMachineAttribute("Steamworks.SourceServerQuery/<GetChallengeData>d__7")]
private static Task`1<Byte[]> GetChallengeData(UdpClient client);
    [AsyncStateMachineAttribute("Steamworks.SourceServerQuery/<Send>d__8")]
private static Task Send(UdpClient client, Byte[] message);
    private static Byte[] Combine(Byte[][] arrays);
}
internal static class Steamworks.SteamAPI : object {
    internal static bool Init();
    internal static void Shutdown();
    internal static HSteamPipe GetHSteamPipe();
    internal static bool RestartAppIfNecessary(UInt32 unOwnAppID);
}
internal enum Steamworks.SteamAPICallFailure : Enum {
    
public int value__;
    
public static SteamAPICallFailure None;
    
public static SteamAPICallFailure SteamGone;
    
public static SteamAPICallFailure NetworkFailure;
    
public static SteamAPICallFailure InvalidHandle;
    
public static SteamAPICallFailure MismatchedCallback;
}
public class Steamworks.SteamApps : SteamSharedClass`1<SteamApps> {
    [CompilerGeneratedAttribute]

private static Action`1<AppId> OnDlcInstalled;
    [CompilerGeneratedAttribute]

private static Action OnNewLaunchParameters;
    
internal static ISteamApps Internal { get; }
    
public static bool IsSubscribed { get; }
    
public static bool IsSubscribedFromFamilySharing { get; }
    
public static bool IsLowViolence { get; }
    
public static bool IsCybercafe { get; }
    
public static bool IsVACBanned { get; }
    
public static string GameLanguage { get; }
    
public static String[] AvailableLanguages { get; }
    
public static bool IsSubscribedFromFreeWeekend { get; }
    
public static string CurrentBetaName { get; }
    
public static SteamId AppOwner { get; }
    
public static int BuildId { get; }
    
public static string CommandLine { get; }
    internal static ISteamApps get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents();
    [CompilerGeneratedAttribute]
public static void add_OnDlcInstalled(Action`1<AppId> value);
    [CompilerGeneratedAttribute]
public static void remove_OnDlcInstalled(Action`1<AppId> value);
    [CompilerGeneratedAttribute]
public static void add_OnNewLaunchParameters(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnNewLaunchParameters(Action value);
    public static bool get_IsSubscribed();
    public static bool get_IsSubscribedFromFamilySharing();
    public static bool get_IsLowViolence();
    public static bool get_IsCybercafe();
    public static bool get_IsVACBanned();
    public static string get_GameLanguage();
    public static String[] get_AvailableLanguages();
    public static bool IsSubscribedToApp(AppId appid);
    public static bool IsDlcInstalled(AppId appid);
    public static DateTime PurchaseTime(AppId appid);
    public static bool get_IsSubscribedFromFreeWeekend();
    [IteratorStateMachineAttribute("Steamworks.SteamApps/<DlcInformation>d__29")]
public static IEnumerable`1<DlcInformation> DlcInformation();
    public static void InstallDlc(AppId appid);
    public static void UninstallDlc(AppId appid);
    public static string get_CurrentBetaName();
    public static void MarkContentCorrupt(bool missingFilesOnly);
    [IteratorStateMachineAttribute("Steamworks.SteamApps/<InstalledDepots>d__35")]
public static IEnumerable`1<DepotId> InstalledDepots(AppId appid);
    public static string AppInstallDir(AppId appid);
    public static bool IsAppInstalled(AppId appid);
    public static SteamId get_AppOwner();
    public static string GetLaunchParam(string param);
    public static DownloadProgress DlcDownloadProgress(AppId appid);
    public static int get_BuildId();
    [AsyncStateMachineAttribute("Steamworks.SteamApps/<GetFileDetailsAsync>d__44")]
public static Task`1<Nullable`1<FileDetails>> GetFileDetailsAsync(string filename);
    public static string get_CommandLine();
    public static bool IsTimedTrial(Int32& secondsAllowed, Int32& secondsPlayed);
}
public abstract class Steamworks.SteamClass : object {
    internal abstract virtual bool InitializeInterface(bool server);
    internal abstract virtual void DestroyInterface(bool server);
}
public static class Steamworks.SteamClient : object {
    
private static bool initialized;
    
private static List`1<SteamClass> openInterfaces;
    [CompilerGeneratedAttribute]

private static AppId <AppId>k__BackingField;
    
public static bool IsValid { get; }
    
public static bool IsLoggedOn { get; }
    
public static SteamId SteamId { get; }
    
public static string Name { get; }
    
public static FriendState State { get; }
    
public static AppId AppId { get; internal set; }
    private static SteamClient();
    public static void Init(UInt32 appid, bool asyncCallbacks);
    internal static void AddInterface();
    internal static void ShutdownInterfaces();
    public static bool get_IsValid();
    public static void Shutdown();
    internal static void Cleanup();
    public static void RunCallbacks();
    public static bool get_IsLoggedOn();
    public static SteamId get_SteamId();
    public static string get_Name();
    public static FriendState get_State();
    [CompilerGeneratedAttribute]
public static AppId get_AppId();
    [CompilerGeneratedAttribute]
internal static void set_AppId(AppId value);
    public static bool RestartAppIfNecessary(UInt32 appid);
    internal static void ValidCheck();
}
public class Steamworks.SteamClientClass`1 : SteamClass {
    
internal static SteamInterface Interface;
    internal virtual bool InitializeInterface(bool server);
    internal virtual void SetInterface(bool server, SteamInterface iface);
    internal virtual void DestroyInterface(bool server);
}
internal enum Steamworks.SteamControllerLEDFlag : Enum {
    
public int value__;
    
public static SteamControllerLEDFlag SetColor;
    
public static SteamControllerLEDFlag RestoreUserDefault;
}
internal enum Steamworks.SteamControllerPad : Enum {
    
public int value__;
    
public static SteamControllerPad Left;
    
public static SteamControllerPad Right;
}
public enum Steamworks.SteamDeviceFormFactor : Enum {
    
public int value__;
    
public static SteamDeviceFormFactor Unknown;
    
public static SteamDeviceFormFactor Phone;
    
public static SteamDeviceFormFactor Tablet;
    
public static SteamDeviceFormFactor Computer;
    
public static SteamDeviceFormFactor TV;
}
public class Steamworks.SteamFriends : SteamClientClass`1<SteamFriends> {
    
private static Dictionary`2<string, string> richPresence;
    [CompilerGeneratedAttribute]

private static Action`3<Friend, string, string> OnChatMessage;
    [CompilerGeneratedAttribute]

private static Action`3<Friend, string, string> OnClanChatMessage;
    [CompilerGeneratedAttribute]

private static Action`1<Friend> OnPersonaStateChange;
    [CompilerGeneratedAttribute]

private static Action`2<Friend, string> OnGameRichPresenceJoinRequested;
    [CompilerGeneratedAttribute]

private static Action`1<bool> OnGameOverlayActivated;
    [CompilerGeneratedAttribute]

private static Action`2<string, string> OnGameServerChangeRequested;
    [CompilerGeneratedAttribute]

private static Action`2<Lobby, SteamId> OnGameLobbyJoinRequested;
    [CompilerGeneratedAttribute]

private static Action`1<Friend> OnFriendRichPresenceUpdate;
    [CompilerGeneratedAttribute]

private static Action`1<string> OnOverlayBrowserProtocol;
    
private static bool _listenForFriendsMessages;
    
internal static ISteamFriends Internal { get; }
    
public static bool ListenForFriendsMessages { get; public set; }
    internal static ISteamFriends get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal void InstallEvents();
    [CompilerGeneratedAttribute]
public static void add_OnChatMessage(Action`3<Friend, string, string> value);
    [CompilerGeneratedAttribute]
public static void remove_OnChatMessage(Action`3<Friend, string, string> value);
    [CompilerGeneratedAttribute]
public static void add_OnClanChatMessage(Action`3<Friend, string, string> value);
    [CompilerGeneratedAttribute]
public static void remove_OnClanChatMessage(Action`3<Friend, string, string> value);
    [CompilerGeneratedAttribute]
public static void add_OnPersonaStateChange(Action`1<Friend> value);
    [CompilerGeneratedAttribute]
public static void remove_OnPersonaStateChange(Action`1<Friend> value);
    [CompilerGeneratedAttribute]
public static void add_OnGameRichPresenceJoinRequested(Action`2<Friend, string> value);
    [CompilerGeneratedAttribute]
public static void remove_OnGameRichPresenceJoinRequested(Action`2<Friend, string> value);
    [CompilerGeneratedAttribute]
public static void add_OnGameOverlayActivated(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public static void remove_OnGameOverlayActivated(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public static void add_OnGameServerChangeRequested(Action`2<string, string> value);
    [CompilerGeneratedAttribute]
public static void remove_OnGameServerChangeRequested(Action`2<string, string> value);
    [CompilerGeneratedAttribute]
public static void add_OnGameLobbyJoinRequested(Action`2<Lobby, SteamId> value);
    [CompilerGeneratedAttribute]
public static void remove_OnGameLobbyJoinRequested(Action`2<Lobby, SteamId> value);
    [CompilerGeneratedAttribute]
public static void add_OnFriendRichPresenceUpdate(Action`1<Friend> value);
    [CompilerGeneratedAttribute]
public static void remove_OnFriendRichPresenceUpdate(Action`1<Friend> value);
    [CompilerGeneratedAttribute]
public static void add_OnOverlayBrowserProtocol(Action`1<string> value);
    [CompilerGeneratedAttribute]
public static void remove_OnOverlayBrowserProtocol(Action`1<string> value);
    private static void OnFriendChatMessage(GameConnectedFriendChatMsg_t data);
    private static void OnGameConnectedClanChatMessage(GameConnectedClanChatMsg_t data);
    [IteratorStateMachineAttribute("Steamworks.SteamFriends/<GetFriendsWithFlag>d__34")]
private static IEnumerable`1<Friend> GetFriendsWithFlag(FriendFlags flag);
    public static IEnumerable`1<Friend> GetFriends();
    public static IEnumerable`1<Friend> GetBlocked();
    public static IEnumerable`1<Friend> GetFriendsRequested();
    public static IEnumerable`1<Friend> GetFriendsClanMembers();
    public static IEnumerable`1<Friend> GetFriendsOnGameServer();
    public static IEnumerable`1<Friend> GetFriendsRequestingFriendship();
    [IteratorStateMachineAttribute("Steamworks.SteamFriends/<GetPlayedWith>d__41")]
public static IEnumerable`1<Friend> GetPlayedWith();
    [IteratorStateMachineAttribute("Steamworks.SteamFriends/<GetFromSource>d__42")]
public static IEnumerable`1<Friend> GetFromSource(SteamId steamid);
    [IteratorStateMachineAttribute("Steamworks.SteamFriends/<GetClans>d__43")]
public static IEnumerable`1<Clan> GetClans();
    public static void OpenOverlay(string type);
    public static void OpenUserOverlay(SteamId id, string type);
    public static void OpenStoreOverlay(AppId id, OverlayToStoreFlag overlayToStoreFlag);
    public static void OpenWebOverlay(string url, bool modal);
    public static void OpenGameInviteOverlay(SteamId lobby);
    public static void SetPlayedWith(SteamId steamid);
    public static bool RequestUserInformation(SteamId steamid, bool nameonly);
    [AsyncStateMachineAttribute("Steamworks.SteamFriends/<CacheUserInformationAsync>d__51")]
internal static Task CacheUserInformationAsync(SteamId steamid, bool nameonly);
    [AsyncStateMachineAttribute("Steamworks.SteamFriends/<GetSmallAvatarAsync>d__52")]
public static Task`1<Nullable`1<Image>> GetSmallAvatarAsync(SteamId steamid);
    [AsyncStateMachineAttribute("Steamworks.SteamFriends/<GetMediumAvatarAsync>d__53")]
public static Task`1<Nullable`1<Image>> GetMediumAvatarAsync(SteamId steamid);
    [AsyncStateMachineAttribute("Steamworks.SteamFriends/<GetLargeAvatarAsync>d__54")]
public static Task`1<Nullable`1<Image>> GetLargeAvatarAsync(SteamId steamid);
    public static string GetRichPresence(string key);
    public static bool SetRichPresence(string key, string value);
    public static void ClearRichPresence();
    public static bool get_ListenForFriendsMessages();
    public static void set_ListenForFriendsMessages(bool value);
    [AsyncStateMachineAttribute("Steamworks.SteamFriends/<IsFollowing>d__62")]
public static Task`1<bool> IsFollowing(SteamId steamID);
    [AsyncStateMachineAttribute("Steamworks.SteamFriends/<GetFollowerCount>d__63")]
public static Task`1<int> GetFollowerCount(SteamId steamID);
    [AsyncStateMachineAttribute("Steamworks.SteamFriends/<GetFollowingList>d__64")]
public static Task`1<SteamId[]> GetFollowingList();
    public static bool RegisterProtocolInOverlayBrowser(string protocol);
    [AsyncStateMachineAttribute("Steamworks.SteamFriends/<JoinClanChatRoom>d__66")]
public static Task`1<bool> JoinClanChatRoom(SteamId chatId);
    public static bool SendClanChatRoomMessage(SteamId chatId, string message);
}
internal static class Steamworks.SteamGameServer : object {
    internal static void RunCallbacks();
    internal static void Shutdown();
    internal static HSteamPipe GetHSteamPipe();
}
public class Steamworks.SteamId : ValueType {
    
public ulong Value;
    
public UInt32 AccountId { get; }
    
public bool IsValid { get; }
    public static SteamId op_Implicit(ulong value);
    public static ulong op_Implicit(SteamId value);
    public virtual string ToString();
    public UInt32 get_AccountId();
    public bool get_IsValid();
}
public class Steamworks.SteamInput : SteamClientClass`1<SteamInput> {
    
internal static int STEAM_CONTROLLER_MAX_COUNT;
    
private static InputHandle_t[] queryArray;
    
internal static Dictionary`2<string, InputDigitalActionHandle_t> DigitalHandles;
    
internal static Dictionary`2<string, InputAnalogActionHandle_t> AnalogHandles;
    
internal static Dictionary`2<string, InputActionSetHandle_t> ActionSets;
    
internal static ISteamInput Internal { get; }
    
public static IEnumerable`1<Controller> Controllers { get; }
    private static SteamInput();
    internal static ISteamInput get_Internal();
    internal virtual bool InitializeInterface(bool server);
    public static void RunFrame();
    [IteratorStateMachineAttribute("Steamworks.SteamInput/<get_Controllers>d__7")]
public static IEnumerable`1<Controller> get_Controllers();
    public static string GetDigitalActionGlyph(Controller controller, string action);
    public static string GetPngActionGlyph(Controller controller, string action, GlyphSize size);
    public static string GetSvgActionGlyph(Controller controller, string action);
    internal static InputDigitalActionHandle_t GetDigitalActionHandle(string name);
    internal static InputAnalogActionHandle_t GetAnalogActionHandle(string name);
    internal static InputActionSetHandle_t GetActionSetHandle(string name);
}
internal enum Steamworks.SteamInputActionEventType : Enum {
    
public int value__;
    
public static SteamInputActionEventType DigitalAction;
    
public static SteamInputActionEventType AnalogAction;
}
internal enum Steamworks.SteamInputConfigurationEnableType : Enum {
    
public int value__;
    
public static SteamInputConfigurationEnableType None;
    
public static SteamInputConfigurationEnableType Playstation;
    
public static SteamInputConfigurationEnableType Xbox;
    
public static SteamInputConfigurationEnableType Generic;
    
public static SteamInputConfigurationEnableType Switch;
}
internal enum Steamworks.SteamInputGlyphStyle : Enum {
    
public int value__;
    
public static SteamInputGlyphStyle Knockout;
    
public static SteamInputGlyphStyle Light;
    
public static SteamInputGlyphStyle Dark;
    
public static SteamInputGlyphStyle NeutralColorABXY;
    
public static SteamInputGlyphStyle SolidABXY;
}
internal enum Steamworks.SteamInputLEDFlag : Enum {
    
public int value__;
    
public static SteamInputLEDFlag SetColor;
    
public static SteamInputLEDFlag RestoreUserDefault;
}
internal abstract class Steamworks.SteamInterface : object {
    
public IntPtr Self;
    
public IntPtr SelfGlobal;
    
public IntPtr SelfServer;
    
public IntPtr SelfClient;
    [CompilerGeneratedAttribute]

private bool <IsServer>k__BackingField;
    
public bool IsValid { get; }
    
public bool IsServer { get; private set; }
    public virtual IntPtr GetUserInterfacePointer();
    public virtual IntPtr GetServerInterfacePointer();
    public virtual IntPtr GetGlobalInterfacePointer();
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
public bool get_IsServer();
    [CompilerGeneratedAttribute]
private void set_IsServer(bool value);
    internal void SetupInterface(bool gameServer);
    internal void ShutdownInterface();
}
internal static class Steamworks.SteamInternal : object {
    internal static bool GameServer_Init(UInt32 unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);
}
public class Steamworks.SteamInventory : SteamSharedClass`1<SteamInventory> {
    [CompilerGeneratedAttribute]

private static Action`1<InventoryResult> OnInventoryUpdated;
    [CompilerGeneratedAttribute]

private static Action OnDefinitionsUpdated;
    [CompilerGeneratedAttribute]

private static string <Currency>k__BackingField;
    [CompilerGeneratedAttribute]

private static InventoryItem[] <Items>k__BackingField;
    [CompilerGeneratedAttribute]

private static InventoryDef[] <Definitions>k__BackingField;
    
private static Dictionary`2<int, InventoryDef> _defMap;
    
internal static ISteamInventory Internal { get; }
    
public static string Currency { get; internal set; }
    
public static InventoryItem[] Items { get; internal set; }
    
public static InventoryDef[] Definitions { get; internal set; }
    internal static ISteamInventory get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents(bool server);
    private static void InventoryUpdated(SteamInventoryFullUpdate_t x);
    [CompilerGeneratedAttribute]
public static void add_OnInventoryUpdated(Action`1<InventoryResult> value);
    [CompilerGeneratedAttribute]
public static void remove_OnInventoryUpdated(Action`1<InventoryResult> value);
    [CompilerGeneratedAttribute]
public static void add_OnDefinitionsUpdated(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnDefinitionsUpdated(Action value);
    private static void LoadDefinitions();
    public static void LoadItemDefinitions();
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<WaitForDefinitions>d__13")]
public static Task`1<bool> WaitForDefinitions(float timeoutSeconds);
    public static InventoryDef FindDefinition(InventoryDefId defId);
    [CompilerGeneratedAttribute]
public static string get_Currency();
    [CompilerGeneratedAttribute]
internal static void set_Currency(string value);
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<GetDefinitionsWithPricesAsync>d__19")]
public static Task`1<InventoryDef[]> GetDefinitionsWithPricesAsync();
    [CompilerGeneratedAttribute]
public static InventoryItem[] get_Items();
    [CompilerGeneratedAttribute]
internal static void set_Items(InventoryItem[] value);
    [CompilerGeneratedAttribute]
public static InventoryDef[] get_Definitions();
    [CompilerGeneratedAttribute]
internal static void set_Definitions(InventoryDef[] value);
    internal static InventoryDef[] GetDefinitions();
    public static bool GetAllItems();
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<GetAllItemsAsync>d__31")]
public static Task`1<Nullable`1<InventoryResult>> GetAllItemsAsync();
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<GenerateItemAsync>d__32")]
public static Task`1<Nullable`1<InventoryResult>> GenerateItemAsync(InventoryDef target, int amount);
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<CraftItemAsync>d__33")]
public static Task`1<Nullable`1<InventoryResult>> CraftItemAsync(InventoryItem[] list, InventoryDef target);
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<CraftItemAsync>d__34")]
public static Task`1<Nullable`1<InventoryResult>> CraftItemAsync(Amount[] list, InventoryDef target);
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<DeserializeAsync>d__35")]
public static Task`1<Nullable`1<InventoryResult>> DeserializeAsync(Byte[] data, int dataLength);
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<GrantPromoItemsAsync>d__36")]
public static Task`1<Nullable`1<InventoryResult>> GrantPromoItemsAsync();
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<TriggerItemDropAsync>d__37")]
public static Task`1<Nullable`1<InventoryResult>> TriggerItemDropAsync(InventoryDefId id);
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<AddPromoItemAsync>d__38")]
public static Task`1<Nullable`1<InventoryResult>> AddPromoItemAsync(InventoryDefId id);
    [AsyncStateMachineAttribute("Steamworks.SteamInventory/<StartPurchaseAsync>d__39")]
public static Task`1<Nullable`1<InventoryPurchaseResult>> StartPurchaseAsync(InventoryDef[] items);
}
internal enum Steamworks.SteamIPType : Enum {
    
public int value__;
    
public static SteamIPType Type4;
    
public static SteamIPType Type6;
}
internal enum Steamworks.SteamIPv6ConnectivityProtocol : Enum {
    
public int value__;
    
public static SteamIPv6ConnectivityProtocol Invalid;
    
public static SteamIPv6ConnectivityProtocol HTTP;
    
public static SteamIPv6ConnectivityProtocol UDP;
}
internal enum Steamworks.SteamIPv6ConnectivityState : Enum {
    
public int value__;
    
public static SteamIPv6ConnectivityState Unknown;
    
public static SteamIPv6ConnectivityState Good;
    
public static SteamIPv6ConnectivityState Bad;
}
internal enum Steamworks.SteamItemFlags : Enum {
    
public int value__;
    
public static SteamItemFlags NoTrade;
    
public static SteamItemFlags Removed;
    
public static SteamItemFlags Consumed;
}
public class Steamworks.SteamMatchmaking : SteamClientClass`1<SteamMatchmaking> {
    [CompilerGeneratedAttribute]

private static Action`2<Friend, Lobby> OnLobbyInvite;
    [CompilerGeneratedAttribute]

private static Action`1<Lobby> OnLobbyEntered;
    [CompilerGeneratedAttribute]

private static Action`2<Result, Lobby> OnLobbyCreated;
    [CompilerGeneratedAttribute]

private static Action`4<Lobby, UInt32, ushort, SteamId> OnLobbyGameCreated;
    [CompilerGeneratedAttribute]

private static Action`1<Lobby> OnLobbyDataChanged;
    [CompilerGeneratedAttribute]

private static Action`2<Lobby, Friend> OnLobbyMemberDataChanged;
    [CompilerGeneratedAttribute]

private static Action`2<Lobby, Friend> OnLobbyMemberJoined;
    [CompilerGeneratedAttribute]

private static Action`2<Lobby, Friend> OnLobbyMemberLeave;
    [CompilerGeneratedAttribute]

private static Action`2<Lobby, Friend> OnLobbyMemberDisconnected;
    [CompilerGeneratedAttribute]

private static Action`3<Lobby, Friend, Friend> OnLobbyMemberKicked;
    [CompilerGeneratedAttribute]

private static Action`3<Lobby, Friend, Friend> OnLobbyMemberBanned;
    [CompilerGeneratedAttribute]

private static Action`3<Lobby, Friend, string> OnChatMessage;
    
internal static ISteamMatchmaking Internal { get; }
    
internal static int MaxLobbyKeyLength { get; }
    
public static LobbyQuery LobbyList { get; }
    internal static ISteamMatchmaking get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static int get_MaxLobbyKeyLength();
    internal static void InstallEvents();
    private static void OnLobbyChatMessageRecievedAPI(LobbyChatMsg_t callback);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyInvite(Action`2<Friend, Lobby> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyInvite(Action`2<Friend, Lobby> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyEntered(Action`1<Lobby> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyEntered(Action`1<Lobby> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyCreated(Action`2<Result, Lobby> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyCreated(Action`2<Result, Lobby> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyGameCreated(Action`4<Lobby, UInt32, ushort, SteamId> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyGameCreated(Action`4<Lobby, UInt32, ushort, SteamId> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyDataChanged(Action`1<Lobby> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyDataChanged(Action`1<Lobby> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyMemberDataChanged(Action`2<Lobby, Friend> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyMemberDataChanged(Action`2<Lobby, Friend> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyMemberJoined(Action`2<Lobby, Friend> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyMemberJoined(Action`2<Lobby, Friend> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyMemberLeave(Action`2<Lobby, Friend> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyMemberLeave(Action`2<Lobby, Friend> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyMemberDisconnected(Action`2<Lobby, Friend> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyMemberDisconnected(Action`2<Lobby, Friend> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyMemberKicked(Action`3<Lobby, Friend, Friend> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyMemberKicked(Action`3<Lobby, Friend, Friend> value);
    [CompilerGeneratedAttribute]
public static void add_OnLobbyMemberBanned(Action`3<Lobby, Friend, Friend> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLobbyMemberBanned(Action`3<Lobby, Friend, Friend> value);
    [CompilerGeneratedAttribute]
public static void add_OnChatMessage(Action`3<Lobby, Friend, string> value);
    [CompilerGeneratedAttribute]
public static void remove_OnChatMessage(Action`3<Lobby, Friend, string> value);
    public static LobbyQuery get_LobbyList();
    [AsyncStateMachineAttribute("Steamworks.SteamMatchmaking/<CreateLobbyAsync>d__45")]
public static Task`1<Nullable`1<Lobby>> CreateLobbyAsync(int maxMembers);
    [AsyncStateMachineAttribute("Steamworks.SteamMatchmaking/<JoinLobbyAsync>d__46")]
public static Task`1<Nullable`1<Lobby>> JoinLobbyAsync(SteamId lobbyId);
    [IteratorStateMachineAttribute("Steamworks.SteamMatchmaking/<GetFavoriteServers>d__47")]
public static IEnumerable`1<ServerInfo> GetFavoriteServers();
    [IteratorStateMachineAttribute("Steamworks.SteamMatchmaking/<GetHistoryServers>d__48")]
public static IEnumerable`1<ServerInfo> GetHistoryServers();
}
internal class Steamworks.SteamMatchmakingServers : SteamClientClass`1<SteamMatchmakingServers> {
    
internal static ISteamMatchmakingServers Internal { get; }
    internal static ISteamMatchmakingServers get_Internal();
    internal virtual bool InitializeInterface(bool server);
}
public class Steamworks.SteamMusic : SteamClientClass`1<SteamMusic> {
    [CompilerGeneratedAttribute]

private static Action OnPlaybackChanged;
    [CompilerGeneratedAttribute]

private static Action`1<float> OnVolumeChanged;
    
internal static ISteamMusic Internal { get; }
    
public static bool IsEnabled { get; }
    
public static bool IsPlaying { get; }
    
public static MusicStatus Status { get; }
    
public static float Volume { get; public set; }
    internal static ISteamMusic get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents();
    [CompilerGeneratedAttribute]
public static void add_OnPlaybackChanged(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnPlaybackChanged(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnVolumeChanged(Action`1<float> value);
    [CompilerGeneratedAttribute]
public static void remove_OnVolumeChanged(Action`1<float> value);
    public static bool get_IsEnabled();
    public static bool get_IsPlaying();
    public static MusicStatus get_Status();
    public static void Play();
    public static void Pause();
    public static void PlayPrevious();
    public static void PlayNext();
    public static float get_Volume();
    public static void set_Volume(float value);
}
public class Steamworks.SteamNetworking : SteamSharedClass`1<SteamNetworking> {
    
public static Action`1<SteamId> OnP2PSessionRequest;
    
public static Action`2<SteamId, P2PSessionError> OnP2PConnectionFailed;
    
internal static ISteamNetworking Internal { get; }
    internal static ISteamNetworking get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents(bool server);
    public static bool AcceptP2PSessionWithUser(SteamId user);
    public static bool AllowP2PPacketRelay(bool allow);
    public static bool CloseP2PSessionWithUser(SteamId user);
    public static bool IsP2PPacketAvailable(int channel);
    public static bool IsP2PPacketAvailable(UInt32& msgSize, int channel);
    public static Nullable`1<P2Packet> ReadP2PPacket(int channel);
    public static bool ReadP2PPacket(Byte[] buffer, UInt32& size, SteamId& steamid, int channel);
    public static bool ReadP2PPacket(Byte* buffer, UInt32 cbuf, UInt32& size, SteamId& steamid, int channel);
    public static bool SendP2PPacket(SteamId steamid, Byte[] data, int length, int nChannel, P2PSend sendType);
    public static bool SendP2PPacket(SteamId steamid, Byte* data, UInt32 length, int nChannel, P2PSend sendType);
}
public enum Steamworks.SteamNetworkingAvailability : Enum {
    
public int value__;
    
public static SteamNetworkingAvailability CannotTry;
    
public static SteamNetworkingAvailability Failed;
    
public static SteamNetworkingAvailability Previously;
    
public static SteamNetworkingAvailability Retrying;
    
public static SteamNetworkingAvailability NeverTried;
    
public static SteamNetworkingAvailability Waiting;
    
public static SteamNetworkingAvailability Attempting;
    
public static SteamNetworkingAvailability Current;
    
public static SteamNetworkingAvailability Unknown;
    
public static SteamNetworkingAvailability Force32bit;
}
internal enum Steamworks.SteamNetworkingFakeIPType : Enum {
    
public int value__;
    
public static SteamNetworkingFakeIPType Invalid;
    
public static SteamNetworkingFakeIPType NotFake;
    
public static SteamNetworkingFakeIPType GlobalIPv4;
    
public static SteamNetworkingFakeIPType LocalIPv4;
}
public class Steamworks.SteamNetworkingSockets : SteamSharedClass`1<SteamNetworkingSockets> {
    
private static Dictionary`2<UInt32, SocketManager> SocketInterfaces;
    
private static Dictionary`2<UInt32, ConnectionManager> ConnectionInterfaces;
    [CompilerGeneratedAttribute]

private static Action`2<Connection, ConnectionInfo> OnConnectionStatusChanged;
    [CompilerGeneratedAttribute]

private static Action`1<NetAddress> OnFakeIPResult;
    
internal static ISteamNetworkingSockets Internal { get; }
    
public static NetIdentity Identity { get; }
    private static SteamNetworkingSockets();
    internal static ISteamNetworkingSockets get_Internal();
    public static NetIdentity get_Identity();
    internal virtual bool InitializeInterface(bool server);
    internal static SocketManager GetSocketManager(UInt32 id);
    internal static void SetSocketManager(UInt32 id, SocketManager manager);
    internal static ConnectionManager GetConnectionManager(UInt32 id);
    internal static void SetConnectionManager(UInt32 id, ConnectionManager manager);
    internal void InstallEvents(bool server);
    private static void ConnectionStatusChanged(SteamNetConnectionStatusChangedCallback_t data);
    [CompilerGeneratedAttribute]
public static void add_OnConnectionStatusChanged(Action`2<Connection, ConnectionInfo> value);
    [CompilerGeneratedAttribute]
public static void remove_OnConnectionStatusChanged(Action`2<Connection, ConnectionInfo> value);
    private static void FakeIPResult(SteamNetworkingFakeIPResult_t data);
    [CompilerGeneratedAttribute]
public static void add_OnFakeIPResult(Action`1<NetAddress> value);
    [CompilerGeneratedAttribute]
public static void remove_OnFakeIPResult(Action`1<NetAddress> value);
    public static T CreateNormalSocket(NetAddress address);
    public static SocketManager CreateNormalSocket(NetAddress address, ISocketManager intrface);
    public static T ConnectNormal(NetAddress address);
    public static ConnectionManager ConnectNormal(NetAddress address, IConnectionManager iface);
    public static T CreateRelaySocket(int virtualport);
    public static SocketManager CreateRelaySocket(int virtualport, ISocketManager intrface);
    public static T ConnectRelay(SteamId serverId, int virtualport);
    public static ConnectionManager ConnectRelay(SteamId serverId, int virtualport, IConnectionManager iface);
    public static bool RequestFakeIP(int numFakePorts);
    public static Result GetFakeIP(int fakePortIndex, NetAddress& address);
    public static T CreateRelaySocketFakeIP(int fakePortIndex);
    public static SocketManager CreateRelaySocketFakeIP(int fakePortIndex, ISocketManager intrface);
}
public class Steamworks.SteamNetworkingUtils : SteamSharedClass`1<SteamNetworkingUtils> {
    [CompilerGeneratedAttribute]

private static Action`2<NetDebugOutput, string> OnDebugOutput;
    [CompilerGeneratedAttribute]

private static SteamNetworkingAvailability <Status>k__BackingField;
    
private static NetDebugOutput _debugLevel;
    
private static NetDebugFunc _debugFunc;
    
private static ConcurrentQueue`1<DebugMessage> debugMessages;
    
internal static ISteamNetworkingUtils Internal { get; }
    
public static SteamNetworkingAvailability Status { get; private set; }
    
public static Nullable`1<NetPingLocation> LocalPingLocation { get; }
    
public static long LocalTimestamp { get; }
    
public static float FakeSendPacketLoss { get; public set; }
    
public static float FakeRecvPacketLoss { get; public set; }
    
public static float FakeSendPacketLag { get; public set; }
    
public static float FakeRecvPacketLag { get; public set; }
    
public static int ConnectionTimeout { get; public set; }
    
public static int Timeout { get; public set; }
    
public static int SendBufferSize { get; public set; }
    
public static int SendRateMin { get; public set; }
    
public static int SendRateMax { get; public set; }
    
public static int NagleTime { get; public set; }
    
public static int AllowWithoutAuth { get; public set; }
    
public static int Unencrypted { get; public set; }
    
public static int DebugLevelAckRTT { get; public set; }
    
public static int DebugLevelPacketDecode { get; public set; }
    
public static int DebugLevelMessage { get; public set; }
    
public static int DebugLevelPacketGaps { get; public set; }
    
public static int DebugLevelP2PRendezvous { get; public set; }
    
public static int DebugLevelSDRRelayPings { get; public set; }
    
public static NetDebugOutput DebugLevel { get; public set; }
    private static SteamNetworkingUtils();
    internal static ISteamNetworkingUtils get_Internal();
    internal virtual bool InitializeInterface(bool server);
    private static void InstallCallbacks(bool server);
    [CompilerGeneratedAttribute]
public static void add_OnDebugOutput(Action`2<NetDebugOutput, string> value);
    [CompilerGeneratedAttribute]
public static void remove_OnDebugOutput(Action`2<NetDebugOutput, string> value);
    [CompilerGeneratedAttribute]
public static SteamNetworkingAvailability get_Status();
    [CompilerGeneratedAttribute]
private static void set_Status(SteamNetworkingAvailability value);
    public static void InitRelayNetworkAccess();
    public static Nullable`1<NetPingLocation> get_LocalPingLocation();
    public static int EstimatePingTo(NetPingLocation target);
    [AsyncStateMachineAttribute("Steamworks.SteamNetworkingUtils/<WaitForPingDataAsync>d__15")]
public static Task WaitForPingDataAsync(float maxAgeInSeconds);
    public static long get_LocalTimestamp();
    public static float get_FakeSendPacketLoss();
    public static void set_FakeSendPacketLoss(float value);
    public static float get_FakeRecvPacketLoss();
    public static void set_FakeRecvPacketLoss(float value);
    public static float get_FakeSendPacketLag();
    public static void set_FakeSendPacketLag(float value);
    public static float get_FakeRecvPacketLag();
    public static void set_FakeRecvPacketLag(float value);
    public static int get_ConnectionTimeout();
    public static void set_ConnectionTimeout(int value);
    public static int get_Timeout();
    public static void set_Timeout(int value);
    public static int get_SendBufferSize();
    public static void set_SendBufferSize(int value);
    public static int get_SendRateMin();
    public static void set_SendRateMin(int value);
    public static int get_SendRateMax();
    public static void set_SendRateMax(int value);
    public static int get_NagleTime();
    public static void set_NagleTime(int value);
    public static int get_AllowWithoutAuth();
    public static void set_AllowWithoutAuth(int value);
    public static int get_Unencrypted();
    public static void set_Unencrypted(int value);
    public static int get_DebugLevelAckRTT();
    public static void set_DebugLevelAckRTT(int value);
    public static int get_DebugLevelPacketDecode();
    public static void set_DebugLevelPacketDecode(int value);
    public static int get_DebugLevelMessage();
    public static void set_DebugLevelMessage(int value);
    public static int get_DebugLevelPacketGaps();
    public static void set_DebugLevelPacketGaps(int value);
    public static int get_DebugLevelP2PRendezvous();
    public static void set_DebugLevelP2PRendezvous(int value);
    public static int get_DebugLevelSDRRelayPings();
    public static void set_DebugLevelSDRRelayPings(int value);
    public static NetDebugOutput get_DebugLevel();
    public static void set_DebugLevel(NetDebugOutput value);
    [MonoPInvokeCallbackAttribute]
private static void OnDebugMessage(NetDebugOutput nType, IntPtr str);
    internal static void LogDebugMessage(NetDebugOutput type, string message);
    internal static void OutputDebugMessages();
    internal static NetMsg* AllocateMessage();
    internal static bool SetConfigInt(NetConfig type, int value);
    internal static int GetConfigInt(NetConfig type);
    internal static bool SetConfigFloat(NetConfig type, float value);
    internal static float GetConfigFloat(NetConfig type);
    internal static bool SetConfigString(NetConfig type, string value);
}
public class Steamworks.SteamParental : SteamSharedClass`1<SteamParental> {
    [CompilerGeneratedAttribute]

private static Action OnSettingsChanged;
    
internal static ISteamParentalSettings Internal { get; }
    
public static bool IsParentalLockEnabled { get; }
    
public static bool IsParentalLockLocked { get; }
    internal static ISteamParentalSettings get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents(bool server);
    [CompilerGeneratedAttribute]
public static void add_OnSettingsChanged(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnSettingsChanged(Action value);
    public static bool get_IsParentalLockEnabled();
    public static bool get_IsParentalLockLocked();
    public static bool IsAppBlocked(AppId app);
    public static bool BIsAppInBlockList(AppId app);
    public static bool IsFeatureBlocked(ParentalFeature feature);
    public static bool BIsFeatureInBlockList(ParentalFeature feature);
}
public class Steamworks.SteamParties : SteamClientClass`1<SteamParties> {
    [CompilerGeneratedAttribute]

private static Action OnBeaconLocationsUpdated;
    [CompilerGeneratedAttribute]

private static Action OnActiveBeaconsUpdated;
    
internal static ISteamParties Internal { get; }
    
public static int ActiveBeaconCount { get; }
    
public static IEnumerable`1<PartyBeacon> ActiveBeacons { get; }
    internal static ISteamParties get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal void InstallEvents(bool server);
    [CompilerGeneratedAttribute]
public static void add_OnBeaconLocationsUpdated(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnBeaconLocationsUpdated(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnActiveBeaconsUpdated(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnActiveBeaconsUpdated(Action value);
    public static int get_ActiveBeaconCount();
    [IteratorStateMachineAttribute("Steamworks.SteamParties/<get_ActiveBeacons>d__13")]
public static IEnumerable`1<PartyBeacon> get_ActiveBeacons();
}
internal enum Steamworks.SteamPartyBeaconLocationData : Enum {
    
public int value__;
    
public static SteamPartyBeaconLocationData Invalid;
    
public static SteamPartyBeaconLocationData Name;
    
public static SteamPartyBeaconLocationData IconURLSmall;
    
public static SteamPartyBeaconLocationData IconURLMedium;
    
public static SteamPartyBeaconLocationData IconURLLarge;
}
internal enum Steamworks.SteamPartyBeaconLocationType : Enum {
    
public int value__;
    
public static SteamPartyBeaconLocationType Invalid;
    
public static SteamPartyBeaconLocationType ChatGroup;
    
public static SteamPartyBeaconLocationType Max;
}
public class Steamworks.SteamRemotePlay : SteamClientClass`1<SteamRemotePlay> {
    [CompilerGeneratedAttribute]

private static Action`1<RemotePlaySession> OnSessionConnected;
    [CompilerGeneratedAttribute]

private static Action`1<RemotePlaySession> OnSessionDisconnected;
    
internal static ISteamRemotePlay Internal { get; }
    
public static int SessionCount { get; }
    internal static ISteamRemotePlay get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal void InstallEvents(bool server);
    [CompilerGeneratedAttribute]
public static void add_OnSessionConnected(Action`1<RemotePlaySession> value);
    [CompilerGeneratedAttribute]
public static void remove_OnSessionConnected(Action`1<RemotePlaySession> value);
    [CompilerGeneratedAttribute]
public static void add_OnSessionDisconnected(Action`1<RemotePlaySession> value);
    [CompilerGeneratedAttribute]
public static void remove_OnSessionDisconnected(Action`1<RemotePlaySession> value);
    public static int get_SessionCount();
    public static RemotePlaySession GetSession(int index);
    public static bool SendInvite(SteamId steamid);
}
public class Steamworks.SteamRemoteStorage : SteamClientClass`1<SteamRemoteStorage> {
    
internal static ISteamRemoteStorage Internal { get; }
    
public static ulong QuotaBytes { get; }
    
public static ulong QuotaUsedBytes { get; }
    
public static ulong QuotaRemainingBytes { get; }
    
public static bool IsCloudEnabled { get; }
    
public static bool IsCloudEnabledForAccount { get; }
    
public static bool IsCloudEnabledForApp { get; public set; }
    
public static int FileCount { get; }
    
public static IEnumerable`1<string> Files { get; }
    internal static ISteamRemoteStorage get_Internal();
    internal virtual bool InitializeInterface(bool server);
    public static bool FileWrite(string filename, Byte[] data);
    public static Byte[] FileRead(string filename);
    public static bool FileExists(string filename);
    public static bool FilePersisted(string filename);
    public static DateTime FileTime(string filename);
    public static int FileSize(string filename);
    public static bool FileForget(string filename);
    public static bool FileDelete(string filename);
    public static ulong get_QuotaBytes();
    public static ulong get_QuotaUsedBytes();
    public static ulong get_QuotaRemainingBytes();
    public static bool get_IsCloudEnabled();
    public static bool get_IsCloudEnabledForAccount();
    public static bool get_IsCloudEnabledForApp();
    public static void set_IsCloudEnabledForApp(bool value);
    public static int get_FileCount();
    [IteratorStateMachineAttribute("Steamworks.SteamRemoteStorage/<get_Files>d__27")]
public static IEnumerable`1<string> get_Files();
}
public class Steamworks.SteamScreenshots : SteamClientClass`1<SteamScreenshots> {
    [CompilerGeneratedAttribute]

private static Action OnScreenshotRequested;
    [CompilerGeneratedAttribute]

private static Action`1<Screenshot> OnScreenshotReady;
    [CompilerGeneratedAttribute]

private static Action`1<Result> OnScreenshotFailed;
    
internal static ISteamScreenshots Internal { get; }
    
public static bool Hooked { get; public set; }
    internal static ISteamScreenshots get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents();
    [CompilerGeneratedAttribute]
public static void add_OnScreenshotRequested(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnScreenshotRequested(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnScreenshotReady(Action`1<Screenshot> value);
    [CompilerGeneratedAttribute]
public static void remove_OnScreenshotReady(Action`1<Screenshot> value);
    [CompilerGeneratedAttribute]
public static void add_OnScreenshotFailed(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public static void remove_OnScreenshotFailed(Action`1<Result> value);
    public static Nullable`1<Screenshot> WriteScreenshot(Byte[] data, int width, int height);
    public static Nullable`1<Screenshot> AddScreenshot(string filename, string thumbnail, int width, int height);
    public static void TriggerScreenshot();
    public static bool get_Hooked();
    public static void set_Hooked(bool value);
}
public class Steamworks.SteamServer : SteamServerClass`1<SteamServer> {
    [CompilerGeneratedAttribute]

private static Action`3<SteamId, SteamId, AuthResponse> OnValidateAuthTicketResponse;
    [CompilerGeneratedAttribute]

private static Action OnSteamServersConnected;
    [CompilerGeneratedAttribute]

private static Action`2<Result, bool> OnSteamServerConnectFailure;
    [CompilerGeneratedAttribute]

private static Action`1<Result> OnSteamServersDisconnected;
    [CompilerGeneratedAttribute]

private static Action`1<SteamNetworkingAvailability> OnSteamNetAuthenticationStatus;
    
private static List`1<SteamClass> openInterfaces;
    
private static bool _dedicatedServer;
    
private static int _maxplayers;
    
private static int _botcount;
    
private static string _mapname;
    
private static string _modDir;
    
private static string _product;
    
private static string _gameDescription;
    
private static string _serverName;
    
private static bool _passworded;
    
private static string _gametags;
    
private static Dictionary`2<string, string> KeyValue;
    
internal static ISteamGameServer Internal { get; }
    
public static bool IsValid { get; }
    
public static bool DedicatedServer { get; public set; }
    
public static int MaxPlayers { get; public set; }
    
public static int BotCount { get; public set; }
    
public static string MapName { get; public set; }
    
public static string ModDir { get; internal set; }
    
public static string Product { get; internal set; }
    
public static string GameDescription { get; internal set; }
    
public static string ServerName { get; public set; }
    
public static bool Passworded { get; public set; }
    
public static string GameTags { get; public set; }
    
public static SteamId SteamId { get; }
    
public static bool LoggedOn { get; }
    
public static IPAddress PublicIp { get; }
    [ObsoleteAttribute("Renamed to AdvertiseServer in 1.52")]

unknown static bool AutomaticHeartbeats {public set; }
    
unknown static bool AdvertiseServer {public set; }
    private static SteamServer();
    internal static ISteamGameServer get_Internal();
    internal virtual bool InitializeInterface(bool server);
    public static bool get_IsValid();
    internal static void InstallEvents();
    [CompilerGeneratedAttribute]
public static void add_OnValidateAuthTicketResponse(Action`3<SteamId, SteamId, AuthResponse> value);
    [CompilerGeneratedAttribute]
public static void remove_OnValidateAuthTicketResponse(Action`3<SteamId, SteamId, AuthResponse> value);
    [CompilerGeneratedAttribute]
public static void add_OnSteamServersConnected(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnSteamServersConnected(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnSteamServerConnectFailure(Action`2<Result, bool> value);
    [CompilerGeneratedAttribute]
public static void remove_OnSteamServerConnectFailure(Action`2<Result, bool> value);
    [CompilerGeneratedAttribute]
public static void add_OnSteamServersDisconnected(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public static void remove_OnSteamServersDisconnected(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public static void add_OnSteamNetAuthenticationStatus(Action`1<SteamNetworkingAvailability> value);
    [CompilerGeneratedAttribute]
public static void remove_OnSteamNetAuthenticationStatus(Action`1<SteamNetworkingAvailability> value);
    public static void Init(AppId appid, SteamServerInit init, bool asyncCallbacks);
    internal static void AddInterface();
    internal static void ShutdownInterfaces();
    public static void Shutdown();
    public static void RunCallbacks();
    public static bool get_DedicatedServer();
    public static void set_DedicatedServer(bool value);
    public static int get_MaxPlayers();
    public static void set_MaxPlayers(int value);
    public static int get_BotCount();
    public static void set_BotCount(int value);
    public static string get_MapName();
    public static void set_MapName(string value);
    public static string get_ModDir();
    internal static void set_ModDir(string value);
    public static string get_Product();
    internal static void set_Product(string value);
    public static string get_GameDescription();
    internal static void set_GameDescription(string value);
    public static string get_ServerName();
    public static void set_ServerName(string value);
    public static bool get_Passworded();
    public static void set_Passworded(bool value);
    public static string get_GameTags();
    public static void set_GameTags(string value);
    public static SteamId get_SteamId();
    public static void LogOnAnonymous();
    public static void LogOff();
    public static bool get_LoggedOn();
    public static IPAddress get_PublicIp();
    public static void set_AutomaticHeartbeats(bool value);
    public static void set_AdvertiseServer(bool value);
    [ObsoleteAttribute("No longer used")]
public static void ForceHeartbeat();
    public static void UpdatePlayer(SteamId steamid, string name, int score);
    public static void SetKey(string Key, string Value);
    public static void ClearKeys();
    public static bool BeginAuthSession(Byte[] data, SteamId steamid);
    public static void EndSession(SteamId steamid);
    public static bool GetOutgoingPacket(OutgoingPacket& packet);
    public static void HandleIncomingPacket(Byte[] data, int size, UInt32 address, ushort port);
    public static void HandleIncomingPacket(IntPtr ptr, int size, UInt32 address, ushort port);
    public static UserHasLicenseForAppResult UserHasLicenseForApp(SteamId steamid, AppId appid);
}
public class Steamworks.SteamServerClass`1 : SteamClass {
    
internal static SteamInterface Interface;
    internal virtual bool InitializeInterface(bool server);
    internal virtual void SetInterface(bool server, SteamInterface iface);
    internal virtual void DestroyInterface(bool server);
}
public class Steamworks.SteamServerInit : ValueType {
    
public IPAddress IpAddress;
    
public ushort GamePort;
    
public ushort QueryPort;
    
public bool Secure;
    
public string VersionString;
    
public string ModDir;
    
public string GameDescription;
    
public bool DedicatedServer;
    public SteamServerInit(string modDir, string gameDesc);
    public SteamServerInit WithQueryShareGamePort();
}
public class Steamworks.SteamServerStats : SteamServerClass`1<SteamServerStats> {
    
internal static ISteamGameServerStats Internal { get; }
    internal static ISteamGameServerStats get_Internal();
    internal virtual bool InitializeInterface(bool server);
    [AsyncStateMachineAttribute("Steamworks.SteamServerStats/<RequestUserStatsAsync>d__3")]
public static Task`1<Result> RequestUserStatsAsync(SteamId steamid);
    public static bool SetInt(SteamId steamid, string name, int stat);
    public static bool SetFloat(SteamId steamid, string name, float stat);
    public static int GetInt(SteamId steamid, string name, int defaultValue);
    public static float GetFloat(SteamId steamid, string name, float defaultValue);
    public static bool SetAchievement(SteamId steamid, string name);
    public static bool ClearAchievement(SteamId steamid, string name);
    public static bool GetAchievement(SteamId steamid, string name);
    [AsyncStateMachineAttribute("Steamworks.SteamServerStats/<StoreUserStats>d__11")]
public static Task`1<Result> StoreUserStats(SteamId steamid);
}
public class Steamworks.SteamSharedClass`1 : SteamClass {
    
internal static SteamInterface InterfaceClient;
    
internal static SteamInterface InterfaceServer;
    
internal static SteamInterface Interface { get; }
    internal static SteamInterface get_Interface();
    internal virtual bool InitializeInterface(bool server);
    internal virtual void SetInterface(bool server, SteamInterface iface);
    internal virtual void DestroyInterface(bool server);
}
public class Steamworks.SteamUGC : SteamSharedClass`1<SteamUGC> {
    [CompilerGeneratedAttribute]

private static Action`1<Result> OnDownloadItemResult;
    [CompilerGeneratedAttribute]

private static Action`2<AppId, PublishedFileId> OnItemSubscribed;
    [CompilerGeneratedAttribute]

private static Action`2<AppId, PublishedFileId> OnItemUnsubscribed;
    [CompilerGeneratedAttribute]

private static Action`2<AppId, PublishedFileId> OnItemInstalled;
    
internal static ISteamUGC Internal { get; }
    internal static ISteamUGC get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents(bool server);
    [CompilerGeneratedAttribute]
public static void add_OnDownloadItemResult(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public static void remove_OnDownloadItemResult(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public static void add_OnItemSubscribed(Action`2<AppId, PublishedFileId> value);
    [CompilerGeneratedAttribute]
public static void remove_OnItemSubscribed(Action`2<AppId, PublishedFileId> value);
    [CompilerGeneratedAttribute]
public static void add_OnItemUnsubscribed(Action`2<AppId, PublishedFileId> value);
    [CompilerGeneratedAttribute]
public static void remove_OnItemUnsubscribed(Action`2<AppId, PublishedFileId> value);
    [CompilerGeneratedAttribute]
public static void add_OnItemInstalled(Action`2<AppId, PublishedFileId> value);
    [CompilerGeneratedAttribute]
public static void remove_OnItemInstalled(Action`2<AppId, PublishedFileId> value);
    [AsyncStateMachineAttribute("Steamworks.SteamUGC/<DeleteFileAsync>d__16")]
public static Task`1<bool> DeleteFileAsync(PublishedFileId fileId);
    public static bool Download(PublishedFileId fileId, bool highPriority);
    [AsyncStateMachineAttribute("Steamworks.SteamUGC/<DownloadAsync>d__18")]
public static Task`1<bool> DownloadAsync(PublishedFileId fileId, Action`1<float> progress, int milisecondsUpdateDelay, CancellationToken ct);
    [AsyncStateMachineAttribute("Steamworks.SteamUGC/<QueryFileAsync>d__19")]
public static Task`1<Nullable`1<Item>> QueryFileAsync(PublishedFileId fileId);
    [AsyncStateMachineAttribute("Steamworks.SteamUGC/<StartPlaytimeTracking>d__20")]
public static Task`1<bool> StartPlaytimeTracking(PublishedFileId fileId);
    [AsyncStateMachineAttribute("Steamworks.SteamUGC/<StopPlaytimeTracking>d__21")]
public static Task`1<bool> StopPlaytimeTracking(PublishedFileId fileId);
    [AsyncStateMachineAttribute("Steamworks.SteamUGC/<StopPlaytimeTrackingForAllItems>d__22")]
public static Task`1<bool> StopPlaytimeTrackingForAllItems();
    public static void SuspendDownloads();
    public static void ResumeDownloads();
    public static bool ShowWorkshopEula();
    [AsyncStateMachineAttribute("Steamworks.SteamUGC/<GetWorkshopEulaStatus>d__26")]
public static Task`1<Nullable`1<bool>> GetWorkshopEulaStatus();
}
public class Steamworks.SteamUser : SteamClientClass`1<SteamUser> {
    
private static Dictionary`2<string, string> richPresence;
    [CompilerGeneratedAttribute]

private static Action OnSteamServersConnected;
    [CompilerGeneratedAttribute]

private static Action OnSteamServerConnectFailure;
    [CompilerGeneratedAttribute]

private static Action OnSteamServersDisconnected;
    [CompilerGeneratedAttribute]

private static Action OnClientGameServerDeny;
    [CompilerGeneratedAttribute]

private static Action OnLicensesUpdated;
    [CompilerGeneratedAttribute]

private static Action`3<SteamId, SteamId, AuthResponse> OnValidateAuthTicketResponse;
    [CompilerGeneratedAttribute]

private static Action`1<GetAuthSessionTicketResponse_t> OnGetAuthSessionTicketResponse;
    [CompilerGeneratedAttribute]

private static Action`1<GetTicketForWebApiResponse_t> OnGetTicketForWebApiResponse;
    [CompilerGeneratedAttribute]

private static Action`3<AppId, ulong, bool> OnMicroTxnAuthorizationResponse;
    [CompilerGeneratedAttribute]

private static Action`1<string> OnGameWebCallback;
    [CompilerGeneratedAttribute]

private static Action`1<DurationControl> OnDurationControl;
    
private static bool _recordingVoice;
    
private static Byte[] readBuffer;
    
private static UInt32 sampleRate;
    
internal static ISteamUser Internal { get; }
    
public static bool VoiceRecord { get; public set; }
    
public static bool HasVoiceData { get; }
    
public static UInt32 SampleRate { get; public set; }
    
public static UInt32 OptimalSampleRate { get; }
    
public static bool IsBehindNAT { get; }
    
public static int SteamLevel { get; }
    
public static bool IsPhoneVerified { get; }
    
public static bool IsTwoFactorEnabled { get; }
    
public static bool IsPhoneIdentifying { get; }
    
public static bool IsPhoneRequiringVerification { get; }
    private static SteamUser();
    internal static ISteamUser get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents();
    [CompilerGeneratedAttribute]
public static void add_OnSteamServersConnected(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnSteamServersConnected(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnSteamServerConnectFailure(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnSteamServerConnectFailure(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnSteamServersDisconnected(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnSteamServersDisconnected(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnClientGameServerDeny(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnClientGameServerDeny(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnLicensesUpdated(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnLicensesUpdated(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnValidateAuthTicketResponse(Action`3<SteamId, SteamId, AuthResponse> value);
    [CompilerGeneratedAttribute]
public static void remove_OnValidateAuthTicketResponse(Action`3<SteamId, SteamId, AuthResponse> value);
    [CompilerGeneratedAttribute]
internal static void add_OnGetAuthSessionTicketResponse(Action`1<GetAuthSessionTicketResponse_t> value);
    [CompilerGeneratedAttribute]
internal static void remove_OnGetAuthSessionTicketResponse(Action`1<GetAuthSessionTicketResponse_t> value);
    [CompilerGeneratedAttribute]
internal static void add_OnGetTicketForWebApiResponse(Action`1<GetTicketForWebApiResponse_t> value);
    [CompilerGeneratedAttribute]
internal static void remove_OnGetTicketForWebApiResponse(Action`1<GetTicketForWebApiResponse_t> value);
    [CompilerGeneratedAttribute]
public static void add_OnMicroTxnAuthorizationResponse(Action`3<AppId, ulong, bool> value);
    [CompilerGeneratedAttribute]
public static void remove_OnMicroTxnAuthorizationResponse(Action`3<AppId, ulong, bool> value);
    [CompilerGeneratedAttribute]
public static void add_OnGameWebCallback(Action`1<string> value);
    [CompilerGeneratedAttribute]
public static void remove_OnGameWebCallback(Action`1<string> value);
    [CompilerGeneratedAttribute]
public static void add_OnDurationControl(Action`1<DurationControl> value);
    [CompilerGeneratedAttribute]
public static void remove_OnDurationControl(Action`1<DurationControl> value);
    public static bool get_VoiceRecord();
    public static void set_VoiceRecord(bool value);
    public static bool get_HasVoiceData();
    public static int ReadVoiceData(Stream stream);
    public static Byte[] ReadVoiceDataBytes();
    public static UInt32 get_SampleRate();
    public static void set_SampleRate(UInt32 value);
    public static UInt32 get_OptimalSampleRate();
    public static int DecompressVoice(Stream input, int length, Stream output);
    public static int DecompressVoice(Byte[] from, Stream output);
    public static int DecompressVoice(IntPtr from, int length, IntPtr to, int bufferSize);
    public static AuthTicket GetAuthSessionTicket(NetIdentity identity);
    [AsyncStateMachineAttribute("Steamworks.SteamUser/<GetAuthSessionTicketAsync>d__57")]
public static Task`1<AuthTicket> GetAuthSessionTicketAsync(NetIdentity identity, double timeoutSeconds);
    private static AuthTicket GetAuthTicketForWebApi(string identity);
    [AsyncStateMachineAttribute("Steamworks.SteamUser/<GetAuthTicketForWebApiAsync>d__59")]
public static Task`1<AuthTicket> GetAuthTicketForWebApiAsync(string identity, double timeoutSeconds);
    public static BeginAuthResult BeginAuthSession(Byte[] ticketData, SteamId steamid);
    public static void EndAuthSession(SteamId steamid);
    public static bool get_IsBehindNAT();
    public static int get_SteamLevel();
    [AsyncStateMachineAttribute("Steamworks.SteamUser/<GetStoreAuthUrlAsync>d__66")]
public static Task`1<string> GetStoreAuthUrlAsync(string url);
    public static bool get_IsPhoneVerified();
    public static bool get_IsTwoFactorEnabled();
    public static bool get_IsPhoneIdentifying();
    public static bool get_IsPhoneRequiringVerification();
    [AsyncStateMachineAttribute("Steamworks.SteamUser/<RequestEncryptedAppTicketAsync>d__75")]
public static Task`1<Byte[]> RequestEncryptedAppTicketAsync(Byte[] dataToInclude);
    [AsyncStateMachineAttribute("Steamworks.SteamUser/<RequestEncryptedAppTicketAsync>d__76")]
public static Task`1<Byte[]> RequestEncryptedAppTicketAsync();
    [AsyncStateMachineAttribute("Steamworks.SteamUser/<GetDurationControl>d__77")]
public static Task`1<DurationControl> GetDurationControl();
}
public class Steamworks.SteamUserStats : SteamClientClass`1<SteamUserStats> {
    [CompilerGeneratedAttribute]

private static bool <StatsRecieved>k__BackingField;
    [CompilerGeneratedAttribute]

private static Action`2<string, int> OnAchievementIconFetched;
    [CompilerGeneratedAttribute]

private static Action`2<SteamId, Result> OnUserStatsReceived;
    [CompilerGeneratedAttribute]

private static Action`1<Result> OnUserStatsStored;
    [CompilerGeneratedAttribute]

private static Action`3<Achievement, int, int> OnAchievementProgress;
    [CompilerGeneratedAttribute]

private static Action`1<SteamId> OnUserStatsUnloaded;
    
internal static ISteamUserStats Internal { get; }
    
public static bool StatsRecieved { get; internal set; }
    
public static IEnumerable`1<Achievement> Achievements { get; }
    internal static ISteamUserStats get_Internal();
    internal virtual bool InitializeInterface(bool server);
    [CompilerGeneratedAttribute]
public static bool get_StatsRecieved();
    [CompilerGeneratedAttribute]
internal static void set_StatsRecieved(bool value);
    internal static void InstallEvents();
    [CompilerGeneratedAttribute]
internal static void add_OnAchievementIconFetched(Action`2<string, int> value);
    [CompilerGeneratedAttribute]
internal static void remove_OnAchievementIconFetched(Action`2<string, int> value);
    [CompilerGeneratedAttribute]
public static void add_OnUserStatsReceived(Action`2<SteamId, Result> value);
    [CompilerGeneratedAttribute]
public static void remove_OnUserStatsReceived(Action`2<SteamId, Result> value);
    [CompilerGeneratedAttribute]
public static void add_OnUserStatsStored(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public static void remove_OnUserStatsStored(Action`1<Result> value);
    [CompilerGeneratedAttribute]
public static void add_OnAchievementProgress(Action`3<Achievement, int, int> value);
    [CompilerGeneratedAttribute]
public static void remove_OnAchievementProgress(Action`3<Achievement, int, int> value);
    [CompilerGeneratedAttribute]
public static void add_OnUserStatsUnloaded(Action`1<SteamId> value);
    [CompilerGeneratedAttribute]
public static void remove_OnUserStatsUnloaded(Action`1<SteamId> value);
    [IteratorStateMachineAttribute("Steamworks.SteamUserStats/<get_Achievements>d__24")]
public static IEnumerable`1<Achievement> get_Achievements();
    public static bool IndicateAchievementProgress(string achName, int curProg, int maxProg);
    [AsyncStateMachineAttribute("Steamworks.SteamUserStats/<PlayerCountAsync>d__26")]
public static Task`1<int> PlayerCountAsync();
    public static bool StoreStats();
    public static bool RequestCurrentStats();
    [AsyncStateMachineAttribute("Steamworks.SteamUserStats/<RequestGlobalStatsAsync>d__29")]
public static Task`1<Result> RequestGlobalStatsAsync(int days);
    [AsyncStateMachineAttribute("Steamworks.SteamUserStats/<FindOrCreateLeaderboardAsync>d__30")]
public static Task`1<Nullable`1<Leaderboard>> FindOrCreateLeaderboardAsync(string name, LeaderboardSort sort, LeaderboardDisplay display);
    [AsyncStateMachineAttribute("Steamworks.SteamUserStats/<FindLeaderboardAsync>d__31")]
public static Task`1<Nullable`1<Leaderboard>> FindLeaderboardAsync(string name);
    public static bool AddStat(string name, int amount);
    public static bool AddStat(string name, float amount);
    public static bool SetStat(string name, int value);
    public static bool SetStat(string name, float value);
    public static int GetStatInt(string name);
    public static float GetStatFloat(string name);
    public static bool ResetAll(bool includeAchievements);
}
public class Steamworks.SteamUtils : SteamSharedClass`1<SteamUtils> {
    [CompilerGeneratedAttribute]

private static Action OnIpCountryChanged;
    [CompilerGeneratedAttribute]

private static Action`1<int> OnLowBatteryPower;
    [CompilerGeneratedAttribute]

private static Action OnSteamShutdown;
    [CompilerGeneratedAttribute]

private static Action`1<bool> OnGamepadTextInputDismissed;
    
private static NotificationPosition overlayNotificationPosition;
    
internal static ISteamUtils Internal { get; }
    
public static UInt32 SecondsSinceAppActive { get; }
    
public static UInt32 SecondsSinceComputerActive { get; }
    
public static Universe ConnectedUniverse { get; }
    
public static DateTime SteamServerTime { get; }
    
public static string IpCountry { get; }
    
public static bool UsingBatteryPower { get; }
    
public static float CurrentBatteryPower { get; }
    
public static NotificationPosition OverlayNotificationPosition { get; public set; }
    
public static bool IsOverlayEnabled { get; }
    
public static bool DoesOverlayNeedPresent { get; }
    
public static string SteamUILanguage { get; }
    
public static bool IsSteamRunningInVR { get; }
    
public static bool IsSteamInBigPictureMode { get; }
    
public static bool VrHeadsetStreaming { get; public set; }
    
public static bool IsSteamChinaLauncher { get; }
    
public static bool IsRunningOnSteamDeck { get; }
    private static SteamUtils();
    internal static ISteamUtils get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents(bool server);
    private static void SteamClosed();
    [CompilerGeneratedAttribute]
public static void add_OnIpCountryChanged(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnIpCountryChanged(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnLowBatteryPower(Action`1<int> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLowBatteryPower(Action`1<int> value);
    [CompilerGeneratedAttribute]
public static void add_OnSteamShutdown(Action value);
    [CompilerGeneratedAttribute]
public static void remove_OnSteamShutdown(Action value);
    [CompilerGeneratedAttribute]
public static void add_OnGamepadTextInputDismissed(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public static void remove_OnGamepadTextInputDismissed(Action`1<bool> value);
    public static UInt32 get_SecondsSinceAppActive();
    public static UInt32 get_SecondsSinceComputerActive();
    public static Universe get_ConnectedUniverse();
    public static DateTime get_SteamServerTime();
    public static string get_IpCountry();
    public static bool GetImageSize(int image, UInt32& width, UInt32& height);
    public static Nullable`1<Image> GetImage(int image);
    public static bool get_UsingBatteryPower();
    public static float get_CurrentBatteryPower();
    public static NotificationPosition get_OverlayNotificationPosition();
    public static void set_OverlayNotificationPosition(NotificationPosition value);
    public static bool get_IsOverlayEnabled();
    public static bool get_DoesOverlayNeedPresent();
    [AsyncStateMachineAttribute("Steamworks.SteamUtils/<CheckFileSignatureAsync>d__41")]
public static Task`1<CheckFileSignature> CheckFileSignatureAsync(string filename);
    public static bool ShowGamepadTextInput(GamepadTextInputMode inputMode, GamepadTextInputLineMode lineInputMode, string description, int maxChars, string existingText);
    public static string GetEnteredGamepadText();
    public static string get_SteamUILanguage();
    public static bool get_IsSteamRunningInVR();
    public static void SetOverlayNotificationInset(int x, int y);
    public static bool get_IsSteamInBigPictureMode();
    public static void StartVRDashboard();
    public static bool get_VrHeadsetStreaming();
    public static void set_VrHeadsetStreaming(bool value);
    internal static bool IsCallComplete(SteamAPICall_t call, Boolean& failed);
    public static bool get_IsSteamChinaLauncher();
    public static bool InitFilterText();
    public static string FilterText(TextFilteringContext context, SteamId sourceSteamID, string inputMessage);
    public static bool get_IsRunningOnSteamDeck();
    public static void SetGameLauncherMode(bool mode);
}
public class Steamworks.SteamVideo : SteamClientClass`1<SteamVideo> {
    
internal static ISteamVideo Internal { get; }
    
public static bool IsBroadcasting { get; }
    
public static int NumViewers { get; }
    internal static ISteamVideo get_Internal();
    internal virtual bool InitializeInterface(bool server);
    internal static void InstallEvents();
    public static bool get_IsBroadcasting();
    public static int get_NumViewers();
}
public enum Steamworks.TextFilteringContext : Enum {
    
public int value__;
    
public static TextFilteringContext Unknown;
    
public static TextFilteringContext GameContent;
    
public static TextFilteringContext Chat;
    
public static TextFilteringContext Name;
}
public enum Steamworks.TextInputMode : Enum {
    
public int value__;
    
public static TextInputMode SingleLine;
    
public static TextInputMode MultipleLines;
    
public static TextInputMode Email;
    
public static TextInputMode Numeric;
}
public class Steamworks.Ugc.Editor : ValueType {
    
private PublishedFileId fileId;
    
private bool creatingNew;
    
private WorkshopFileType creatingType;
    
private AppId consumerAppId;
    
private string Title;
    
private string Description;
    
private string MetaData;
    
private string ChangeLog;
    
private string Language;
    
private string PreviewFile;
    
private DirectoryInfo ContentFolder;
    
private Nullable`1<RemoteStoragePublishedFileVisibility> Visibility;
    
private List`1<string> Tags;
    
private Dictionary`2<string, List`1<string>> KeyValueTags;
    
private HashSet`1<string> KeyValueTagsToRemove;
    
public static Editor NewCommunityFile { get; }
    
public static Editor NewCollection { get; }
    
public static Editor NewMicrotransactionFile { get; }
    
public static Editor NewGameManagedFile { get; }
    internal Editor(WorkshopFileType filetype);
    public Editor(PublishedFileId fileId);
    public static Editor get_NewCommunityFile();
    public static Editor get_NewCollection();
    public static Editor get_NewMicrotransactionFile();
    public static Editor get_NewGameManagedFile();
    public Editor ForAppId(AppId id);
    public Editor WithTitle(string t);
    public Editor WithDescription(string t);
    public Editor WithMetaData(string t);
    public Editor WithChangeLog(string t);
    public Editor InLanguage(string t);
    public Editor WithPreviewFile(string t);
    public Editor WithContent(DirectoryInfo t);
    public Editor WithContent(string folderName);
    public Editor WithPublicVisibility();
    public Editor WithFriendsOnlyVisibility();
    public Editor WithPrivateVisibility();
    public Editor WithTag(string tag);
    public Editor AddKeyValueTag(string key, string value);
    public Editor RemoveKeyValueTags(string key);
    [AsyncStateMachineAttribute("Steamworks.Ugc.Editor/<SubmitAsync>d__40")]
public Task`1<PublishResult> SubmitAsync(IProgress`1<float> progress, Action`1<PublishResult> onItemCreated);
}
public class Steamworks.Ugc.Item : ValueType {
    
internal SteamUGCDetails_t details;
    
internal PublishedFileId _id;
    [CompilerGeneratedAttribute]

private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]

private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]

private Dictionary`2<string, string> <KeyValueTags>k__BackingField;
    
public PublishedFileId[] Children;
    [CompilerGeneratedAttribute]

private UgcAdditionalPreview[] <AdditionalPreviews>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumFavorites>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumFollowers>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumUniqueSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumUniqueFavorites>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumUniqueFollowers>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumUniqueWebsiteViews>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <ReportScore>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumSecondsPlayed>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumPlaytimeSessions>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumComments>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumSecondsPlayedDuringTimePeriod>k__BackingField;
    [CompilerGeneratedAttribute]

private ulong <NumPlaytimeSessionsDuringTimePeriod>k__BackingField;
    [CompilerGeneratedAttribute]

private string <PreviewImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Metadata>k__BackingField;
    
public PublishedFileId Id { get; }
    
public string Title { get; internal set; }
    
public string Description { get; internal set; }
    
public String[] Tags { get; internal set; }
    
public Dictionary`2<string, string> KeyValueTags { get; internal set; }
    
public AppId CreatorApp { get; }
    
public AppId ConsumerApp { get; }
    
public Friend Owner { get; }
    
public float Score { get; }
    
public DateTime Created { get; }
    
public DateTime Updated { get; }
    
public bool IsPublic { get; }
    
public bool IsFriendsOnly { get; }
    
public bool IsPrivate { get; }
    
public bool IsBanned { get; }
    
public bool IsAcceptedForUse { get; }
    
public UInt32 VotesUp { get; }
    
public UInt32 VotesDown { get; }
    
public UgcAdditionalPreview[] AdditionalPreviews { get; internal set; }
    
public bool IsInstalled { get; }
    
public bool IsDownloading { get; }
    
public bool IsDownloadPending { get; }
    
public bool IsSubscribed { get; }
    
public bool NeedsUpdate { get; }
    
public string Directory { get; }
    
public long DownloadBytesTotal { get; }
    
public long DownloadBytesDownloaded { get; }
    
public long SizeBytes { get; }
    
public float DownloadAmount { get; }
    
private ItemState State { get; }
    
public string Url { get; }
    
public string ChangelogUrl { get; }
    
public string CommentsUrl { get; }
    
public string DiscussUrl { get; }
    
public string StatsUrl { get; }
    
public ulong NumSubscriptions { get; internal set; }
    
public ulong NumFavorites { get; internal set; }
    
public ulong NumFollowers { get; internal set; }
    
public ulong NumUniqueSubscriptions { get; internal set; }
    
public ulong NumUniqueFavorites { get; internal set; }
    
public ulong NumUniqueFollowers { get; internal set; }
    
public ulong NumUniqueWebsiteViews { get; internal set; }
    
public ulong ReportScore { get; internal set; }
    
public ulong NumSecondsPlayed { get; internal set; }
    
public ulong NumPlaytimeSessions { get; internal set; }
    
public ulong NumComments { get; internal set; }
    
public ulong NumSecondsPlayedDuringTimePeriod { get; internal set; }
    
public ulong NumPlaytimeSessionsDuringTimePeriod { get; internal set; }
    
public string PreviewImageUrl { get; internal set; }
    
public string Metadata { get; internal set; }
    
public Result Result { get; }
    public Item(PublishedFileId id);
    public PublishedFileId get_Id();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
internal void set_Title(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
internal void set_Tags(String[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_KeyValueTags();
    [CompilerGeneratedAttribute]
internal void set_KeyValueTags(Dictionary`2<string, string> value);
    public AppId get_CreatorApp();
    public AppId get_ConsumerApp();
    public Friend get_Owner();
    public float get_Score();
    public DateTime get_Created();
    public DateTime get_Updated();
    public bool get_IsPublic();
    public bool get_IsFriendsOnly();
    public bool get_IsPrivate();
    public bool get_IsBanned();
    public bool get_IsAcceptedForUse();
    public UInt32 get_VotesUp();
    public UInt32 get_VotesDown();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UgcAdditionalPreview[] get_AdditionalPreviews();
    [CompilerGeneratedAttribute]
internal void set_AdditionalPreviews(UgcAdditionalPreview[] value);
    public bool get_IsInstalled();
    public bool get_IsDownloading();
    public bool get_IsDownloadPending();
    public bool get_IsSubscribed();
    public bool get_NeedsUpdate();
    public string get_Directory();
    public bool Download(bool highPriority);
    public long get_DownloadBytesTotal();
    public long get_DownloadBytesDownloaded();
    public long get_SizeBytes();
    public float get_DownloadAmount();
    private ItemState get_State();
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<GetAsync>d__75")]
public static Task`1<Nullable`1<Item>> GetAsync(PublishedFileId id, int maxageseconds);
    internal static Item From(SteamUGCDetails_t details);
    public bool HasTag(string find);
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<Subscribe>d__78")]
public Task`1<bool> Subscribe();
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<DownloadAsync>d__79")]
public Task`1<bool> DownloadAsync(Action`1<float> progress, int milisecondsUpdateDelay, CancellationToken ct);
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<Unsubscribe>d__80")]
public Task`1<bool> Unsubscribe();
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<AddFavorite>d__81")]
public Task`1<bool> AddFavorite();
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<RemoveFavorite>d__82")]
public Task`1<bool> RemoveFavorite();
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<Vote>d__83")]
public Task`1<Nullable`1<Result>> Vote(bool up);
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<GetUserVote>d__84")]
public Task`1<Nullable`1<UserItemVote>> GetUserVote();
    public string get_Url();
    public string get_ChangelogUrl();
    public string get_CommentsUrl();
    public string get_DiscussUrl();
    public string get_StatsUrl();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumSubscriptions();
    [CompilerGeneratedAttribute]
internal void set_NumSubscriptions(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumFavorites();
    [CompilerGeneratedAttribute]
internal void set_NumFavorites(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumFollowers();
    [CompilerGeneratedAttribute]
internal void set_NumFollowers(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumUniqueSubscriptions();
    [CompilerGeneratedAttribute]
internal void set_NumUniqueSubscriptions(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumUniqueFavorites();
    [CompilerGeneratedAttribute]
internal void set_NumUniqueFavorites(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumUniqueFollowers();
    [CompilerGeneratedAttribute]
internal void set_NumUniqueFollowers(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumUniqueWebsiteViews();
    [CompilerGeneratedAttribute]
internal void set_NumUniqueWebsiteViews(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_ReportScore();
    [CompilerGeneratedAttribute]
internal void set_ReportScore(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumSecondsPlayed();
    [CompilerGeneratedAttribute]
internal void set_NumSecondsPlayed(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumPlaytimeSessions();
    [CompilerGeneratedAttribute]
internal void set_NumPlaytimeSessions(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumComments();
    [CompilerGeneratedAttribute]
internal void set_NumComments(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumSecondsPlayedDuringTimePeriod();
    [CompilerGeneratedAttribute]
internal void set_NumSecondsPlayedDuringTimePeriod(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_NumPlaytimeSessionsDuringTimePeriod();
    [CompilerGeneratedAttribute]
internal void set_NumPlaytimeSessionsDuringTimePeriod(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_PreviewImageUrl();
    [CompilerGeneratedAttribute]
internal void set_PreviewImageUrl(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Metadata();
    [CompilerGeneratedAttribute]
internal void set_Metadata(string value);
    public Editor Edit();
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<AddDependency>d__156")]
public Task`1<bool> AddDependency(PublishedFileId child);
    [AsyncStateMachineAttribute("Steamworks.Ugc.Item/<RemoveDependency>d__157")]
public Task`1<bool> RemoveDependency(PublishedFileId child);
    public Result get_Result();
}
public class Steamworks.Ugc.PublishResult : ValueType {
    
public Result Result;
    
public PublishedFileId FileId;
    
public bool NeedsWorkshopAgreement;
    
public bool Success { get; }
    public bool get_Success();
}
public class Steamworks.Ugc.Query : ValueType {
    
private UgcType matchingType;
    
private UGCQuery queryType;
    
private AppId consumerApp;
    
private AppId creatorApp;
    
private string searchText;
    
private Nullable`1<SteamId> steamid;
    
private UserUGCList userType;
    
private UserUGCListSortOrder userSort;
    
private PublishedFileId[] Files;
    
private Nullable`1<int> maxCacheAge;
    
private string language;
    
private Nullable`1<int> trendDays;
    
private List`1<string> requiredTags;
    
private Nullable`1<bool> matchAnyTag;
    
private List`1<string> excludedTags;
    
private Dictionary`2<string, string> requiredKv;
    
private Nullable`1<bool> WantsReturnOnlyIDs;
    
private Nullable`1<bool> WantsReturnKeyValueTags;
    
private Nullable`1<bool> WantsReturnLongDescription;
    
private Nullable`1<bool> WantsReturnMetadata;
    
private Nullable`1<bool> WantsReturnChildren;
    
private Nullable`1<bool> WantsReturnAdditionalPreviews;
    
private Nullable`1<bool> WantsReturnTotalOnly;
    
private Nullable`1<UInt32> WantsReturnPlaytimeStats;
    
private Nullable`1<bool> WantsDefaultStats;
    
public static Query All { get; }
    
public static Query Items { get; }
    
public static Query ItemsMtx { get; }
    
public static Query ItemsReadyToUse { get; }
    
public static Query Collections { get; }
    
public static Query Artwork { get; }
    
public static Query Videos { get; }
    
public static Query Screenshots { get; }
    
public static Query AllGuides { get; }
    
public static Query WebGuides { get; }
    
public static Query IntegratedGuides { get; }
    
public static Query UsableInGame { get; }
    
public static Query ControllerBindings { get; }
    
public static Query GameManagedItems { get; }
    public Query(UgcType type);
    public static Query get_All();
    public static Query get_Items();
    public static Query get_ItemsMtx();
    public static Query get_ItemsReadyToUse();
    public static Query get_Collections();
    public static Query get_Artwork();
    public static Query get_Videos();
    public static Query get_Screenshots();
    public static Query get_AllGuides();
    public static Query get_WebGuides();
    public static Query get_IntegratedGuides();
    public static Query get_UsableInGame();
    public static Query get_ControllerBindings();
    public static Query get_GameManagedItems();
    public Query RankedByVote();
    public Query RankedByPublicationDate();
    public Query RankedByAcceptanceDate();
    public Query RankedByTrend();
    public Query FavoritedByFriends();
    public Query CreatedByFriends();
    public Query RankedByNumTimesReported();
    public Query CreatedByFollowedUsers();
    public Query NotYetRated();
    public Query RankedByTotalVotesAsc();
    public Query RankedByVotesUp();
    public Query RankedByTextSearch();
    public Query RankedByTotalUniqueSubscriptions();
    public Query RankedByPlaytimeTrend();
    public Query RankedByTotalPlaytime();
    public Query RankedByAveragePlaytimeTrend();
    public Query RankedByLifetimeAveragePlaytime();
    public Query RankedByPlaytimeSessionsTrend();
    public Query RankedByLifetimePlaytimeSessions();
    internal Query LimitUser(SteamId steamid);
    public Query WhereUserPublished(SteamId user);
    public Query WhereUserVotedOn(SteamId user);
    public Query WhereUserVotedUp(SteamId user);
    public Query WhereUserVotedDown(SteamId user);
    public Query WhereUserWillVoteLater(SteamId user);
    public Query WhereUserFavorited(SteamId user);
    public Query WhereUserSubscribed(SteamId user);
    public Query WhereUserUsedOrPlayed(SteamId user);
    public Query WhereUserFollowed(SteamId user);
    public Query SortByCreationDate();
    public Query SortByCreationDateAsc();
    public Query SortByTitleAsc();
    public Query SortByUpdateDate();
    public Query SortBySubscriptionDate();
    public Query SortByVoteScore();
    public Query SortByModeration();
    public Query WhereSearchText(string searchText);
    public Query WithFileId(PublishedFileId[] files);
    [AsyncStateMachineAttribute("Steamworks.Ugc.Query/<GetPageAsync>d__76")]
public Task`1<Nullable`1<ResultPage>> GetPageAsync(int page);
    public Query WithType(UgcType type);
    public Query AllowCachedResponse(int maxSecondsAge);
    public Query InLanguage(string lang);
    public Query WithTrendDays(int days);
    public Query MatchAnyTag();
    public Query MatchAllTags();
    public Query WithTag(string tag);
    public Query AddRequiredKeyValueTag(string key, string value);
    public Query WithoutTag(string tag);
    private void ApplyConstraints(UGCQueryHandle_t handle);
    public Query WithOnlyIDs(bool b);
    public Query WithKeyValueTags(bool b);
    [ObsoleteAttribute("Renamed to WithKeyValueTags")]
public Query WithKeyValueTag(bool b);
    public Query WithLongDescription(bool b);
    public Query WithMetadata(bool b);
    public Query WithChildren(bool b);
    public Query WithAdditionalPreviews(bool b);
    public Query WithTotalOnly(bool b);
    public Query WithPlaytimeStats(UInt32 unDays);
    private void ApplyReturns(UGCQueryHandle_t handle);
    public Query WithDefaultStats(bool b);
}
public class Steamworks.Ugc.ResultPage : ValueType {
    
internal UGCQueryHandle_t Handle;
    
public int ResultCount;
    
public int TotalCount;
    
public bool CachedData;
    
internal bool ReturnsKeyValueTags;
    
internal bool ReturnsDefaultStats;
    
internal bool ReturnsMetadata;
    
internal bool ReturnsChildren;
    
internal bool ReturnsAdditionalPreviews;
    
public IEnumerable`1<Item> Entries { get; }
    [IteratorStateMachineAttribute("Steamworks.Ugc.ResultPage/<get_Entries>d__10")]
public IEnumerable`1<Item> get_Entries();
    private ulong GetStat(UInt32 index, ItemStatistic stat);
    public sealed virtual void Dispose();
}
internal class Steamworks.Ugc.SteamParamStringArray : ValueType {
    
public SteamParamStringArray_t Value;
    
private IntPtr[] NativeStrings;
    
private IntPtr NativeArray;
    public static SteamParamStringArray From(String[] array);
    public sealed virtual void Dispose();
}
public class Steamworks.Ugc.UserItemVote : ValueType {
    
public bool VotedUp;
    
public bool VotedDown;
    
public bool VoteSkipped;
    internal static Nullable`1<UserItemVote> From(GetUserItemVoteResult_t result);
}
internal enum Steamworks.UGCContentDescriptorID : Enum {
    
public int value__;
    
public static UGCContentDescriptorID NudityOrSexualContent;
    
public static UGCContentDescriptorID FrequentViolenceOrGore;
    
public static UGCContentDescriptorID AdultOnlySexualContent;
    
public static UGCContentDescriptorID GratuitousSexualContent;
    
public static UGCContentDescriptorID AnyMatureContent;
}
internal enum Steamworks.UGCQuery : Enum {
    
public int value__;
    
public static UGCQuery RankedByVote;
    
public static UGCQuery RankedByPublicationDate;
    
public static UGCQuery AcceptedForGameRankedByAcceptanceDate;
    
public static UGCQuery RankedByTrend;
    
public static UGCQuery FavoritedByFriendsRankedByPublicationDate;
    
public static UGCQuery CreatedByFriendsRankedByPublicationDate;
    
public static UGCQuery RankedByNumTimesReported;
    
public static UGCQuery CreatedByFollowedUsersRankedByPublicationDate;
    
public static UGCQuery NotYetRated;
    
public static UGCQuery RankedByTotalVotesAsc;
    
public static UGCQuery RankedByVotesUp;
    
public static UGCQuery RankedByTextSearch;
    
public static UGCQuery RankedByTotalUniqueSubscriptions;
    
public static UGCQuery RankedByPlaytimeTrend;
    
public static UGCQuery RankedByTotalPlaytime;
    
public static UGCQuery RankedByAveragePlaytimeTrend;
    
public static UGCQuery RankedByLifetimeAveragePlaytime;
    
public static UGCQuery RankedByPlaytimeSessionsTrend;
    
public static UGCQuery RankedByLifetimePlaytimeSessions;
    
public static UGCQuery RankedByLastUpdatedDate;
}
internal enum Steamworks.UGCReadAction : Enum {
    
public int value__;
    
public static UGCReadAction ontinueReadingUntilFinished;
    
public static UGCReadAction ontinueReading;
    
public static UGCReadAction lose;
}
public enum Steamworks.UgcType : Enum {
    
public int value__;
    
public static UgcType Items;
    
public static UgcType Items_Mtx;
    
public static UgcType Items_ReadyToUse;
    
public static UgcType Collections;
    
public static UgcType Artwork;
    
public static UgcType Videos;
    
public static UgcType Screenshots;
    
public static UgcType AllGuides;
    
public static UgcType WebGuides;
    
public static UgcType IntegratedGuides;
    
public static UgcType UsableInGame;
    
public static UgcType ControllerBindings;
    
public static UgcType GameManagedItems;
    
public static UgcType All;
}
public enum Steamworks.Universe : Enum {
    
public int value__;
    
public static Universe Invalid;
    
public static Universe Public;
    
public static Universe Beta;
    
public static Universe Internal;
    
public static Universe Dev;
    
public static Universe Max;
}
public enum Steamworks.UserHasLicenseForAppResult : Enum {
    
public int value__;
    
public static UserHasLicenseForAppResult HasLicense;
    
public static UserHasLicenseForAppResult DoesNotHaveLicense;
    
public static UserHasLicenseForAppResult NoAuth;
}
internal enum Steamworks.UserRestriction : Enum {
    
public int value__;
    
public static UserRestriction None;
    
public static UserRestriction Unknown;
    
public static UserRestriction AnyChat;
    
public static UserRestriction VoiceChat;
    
public static UserRestriction GroupChat;
    
public static UserRestriction Rating;
    
public static UserRestriction GameInvites;
    
public static UserRestriction Trading;
}
internal enum Steamworks.UserUGCList : Enum {
    
public int value__;
    
public static UserUGCList Published;
    
public static UserUGCList VotedOn;
    
public static UserUGCList VotedUp;
    
public static UserUGCList VotedDown;
    
public static UserUGCList WillVoteLater;
    
public static UserUGCList Favorited;
    
public static UserUGCList Subscribed;
    
public static UserUGCList UsedOrPlayed;
    
public static UserUGCList Followed;
}
internal enum Steamworks.UserUGCListSortOrder : Enum {
    
public int value__;
    
public static UserUGCListSortOrder CreationOrderDesc;
    
public static UserUGCListSortOrder CreationOrderAsc;
    
public static UserUGCListSortOrder TitleAsc;
    
public static UserUGCListSortOrder LastUpdatedDesc;
    
public static UserUGCListSortOrder SubscriptionDateDesc;
    
public static UserUGCListSortOrder VoteScoreDesc;
    
public static UserUGCListSortOrder ForModeration;
}
internal class Steamworks.Utf8StringPointer : ValueType {
    
internal IntPtr ptr;
    public static string op_Implicit(Utf8StringPointer p);
}
internal class Steamworks.Utf8StringToNative : object {
    public sealed virtual IntPtr MarshalManagedToNative(object managedObj);
    public sealed virtual object MarshalNativeToManaged(IntPtr pNativeData);
    public sealed virtual void CleanUpNativeData(IntPtr pNativeData);
    public sealed virtual void CleanUpManagedData(object managedObj);
    public sealed virtual int GetNativeDataSize();
    [PreserveAttribute]
public static ICustomMarshaler GetInstance(string cookie);
}
[ExtensionAttribute]
public static class Steamworks.Utility : object {
    
private static Byte[] readBuffer;
    private static Utility();
    [ExtensionAttribute]
internal static T ToType(IntPtr ptr);
    [ExtensionAttribute]
internal static object ToType(IntPtr ptr, Type t);
    internal static UInt32 Swap(UInt32 x);
    [ExtensionAttribute]
public static UInt32 IpToInt32(IPAddress ipAddress);
    public static IPAddress Int32ToIp(UInt32 ipAddress);
    public static string FormatPrice(string currency, double price);
    [ExtensionAttribute]
public static string ReadNullTerminatedUTF8String(BinaryReader br);
}
internal enum Steamworks.VoiceResult : Enum {
    
public int value__;
    
public static VoiceResult OK;
    
public static VoiceResult NotInitialized;
    
public static VoiceResult NotRecording;
    
public static VoiceResult NoData;
    
public static VoiceResult BufferTooSmall;
    
public static VoiceResult DataCorrupted;
    
public static VoiceResult Restricted;
    
public static VoiceResult UnsupportedCodec;
    
public static VoiceResult ReceiverOutOfDate;
    
public static VoiceResult ReceiverDidNotAnswer;
}
internal enum Steamworks.VRScreenshotType : Enum {
    
public int value__;
    
public static VRScreenshotType None;
    
public static VRScreenshotType Mono;
    
public static VRScreenshotType Stereo;
    
public static VRScreenshotType MonoCubemap;
    
public static VRScreenshotType MonoPanorama;
    
public static VRScreenshotType StereoPanorama;
}
internal enum Steamworks.WorkshopEnumerationType : Enum {
    
public int value__;
    
public static WorkshopEnumerationType RankedByVote;
    
public static WorkshopEnumerationType Recent;
    
public static WorkshopEnumerationType Trending;
    
public static WorkshopEnumerationType FavoritesOfFriends;
    
public static WorkshopEnumerationType VotedByFriends;
    
public static WorkshopEnumerationType ContentByFriends;
    
public static WorkshopEnumerationType RecentFromFollowedUsers;
}
internal enum Steamworks.WorkshopFileAction : Enum {
    
public int value__;
    
public static WorkshopFileAction Played;
    
public static WorkshopFileAction Completed;
}
internal enum Steamworks.WorkshopFileType : Enum {
    
public int value__;
    
public static WorkshopFileType First;
    
public static WorkshopFileType Community;
    
public static WorkshopFileType Microtransaction;
    
public static WorkshopFileType Collection;
    
public static WorkshopFileType Art;
    
public static WorkshopFileType Video;
    
public static WorkshopFileType Screenshot;
    
public static WorkshopFileType Game;
    
public static WorkshopFileType Software;
    
public static WorkshopFileType Concept;
    
public static WorkshopFileType WebGuide;
    
public static WorkshopFileType IntegratedGuide;
    
public static WorkshopFileType Merch;
    
public static WorkshopFileType ControllerBinding;
    
public static WorkshopFileType SteamworksAccessInvite;
    
public static WorkshopFileType SteamVideo;
    
public static WorkshopFileType GameManagedItem;
    
public static WorkshopFileType Max;
}
internal enum Steamworks.WorkshopVideoProvider : Enum {
    
public int value__;
    
public static WorkshopVideoProvider None;
    
public static WorkshopVideoProvider Youtube;
}
internal enum Steamworks.WorkshopVote : Enum {
    
public int value__;
    
public static WorkshopVote Unvoted;
    
public static WorkshopVote For;
    
public static WorkshopVote Against;
    
public static WorkshopVote Later;
}
internal enum Steamworks.XboxOrigin : Enum {
    
public int value__;
    
public static XboxOrigin A;
    
public static XboxOrigin B;
    
public static XboxOrigin X;
    
public static XboxOrigin Y;
    
public static XboxOrigin LeftBumper;
    
public static XboxOrigin RightBumper;
    
public static XboxOrigin Menu;
    
public static XboxOrigin View;
    
public static XboxOrigin LeftTrigger_Pull;
    
public static XboxOrigin LeftTrigger_Click;
    
public static XboxOrigin RightTrigger_Pull;
    
public static XboxOrigin RightTrigger_Click;
    
public static XboxOrigin LeftStick_Move;
    
public static XboxOrigin LeftStick_Click;
    
public static XboxOrigin LeftStick_DPadNorth;
    
public static XboxOrigin LeftStick_DPadSouth;
    
public static XboxOrigin LeftStick_DPadWest;
    
public static XboxOrigin LeftStick_DPadEast;
    
public static XboxOrigin RightStick_Move;
    
public static XboxOrigin RightStick_Click;
    
public static XboxOrigin RightStick_DPadNorth;
    
public static XboxOrigin RightStick_DPadSouth;
    
public static XboxOrigin RightStick_DPadWest;
    
public static XboxOrigin RightStick_DPadEast;
    
public static XboxOrigin DPad_North;
    
public static XboxOrigin DPad_South;
    
public static XboxOrigin DPad_West;
    
public static XboxOrigin DPad_East;
    
public static XboxOrigin Count;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
