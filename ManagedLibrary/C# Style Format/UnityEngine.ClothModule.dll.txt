[NativeClassAttribute("Unity::Cloth")]
[NativeHeaderAttribute("Modules/Cloth/Cloth.h")]
[RequireComponent("UnityEngine.Transform", "UnityEngine.SkinnedMeshRenderer")]
public class UnityEngine.Cloth : Component {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <useContinuousCollision>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private bool <selfCollision>k__BackingField;
    public Vector3[] vertices { get; }
    public Vector3[] normals { get; }
    public ClothSkinningCoefficient[] coefficients { get; public set; }
    public CapsuleCollider[] capsuleColliders { get; public set; }
    public ClothSphereColliderPair[] sphereColliders { get; public set; }
    public float sleepThreshold { get; public set; }
    public float bendingStiffness { get; public set; }
    public float stretchingStiffness { get; public set; }
    public float damping { get; public set; }
    public Vector3 externalAcceleration { get; public set; }
    public Vector3 randomAcceleration { get; public set; }
    public bool useGravity { get; public set; }
    public bool enabled { get; public set; }
    public float friction { get; public set; }
    public float collisionMassScale { get; public set; }
    public bool enableContinuousCollision { get; public set; }
    public float useVirtualParticles { get; public set; }
    public float worldVelocityScale { get; public set; }
    public float worldAccelerationScale { get; public set; }
    public float clothSolverFrequency { get; public set; }
    [ObsoleteAttribute("Parameter solverFrequency is obsolete and no longer supported. Please use clothSolverFrequency instead.")]
public bool solverFrequency { get; public set; }
    public bool useTethers { get; public set; }
    public float stiffnessFrequency { get; public set; }
    public float selfCollisionDistance { get; public set; }
    public float selfCollisionStiffness { get; public set; }
    [ObsoleteAttribute("useContinuousCollision is no longer supported, use enableContinuousCollision instead")]
public float useContinuousCollision { get; public set; }
    [ObsoleteAttribute("Deprecated.Cloth.selfCollisions is no longer supported since Unity 5.0.", "True")]
public bool selfCollision { get; }
    [NativeNameAttribute("GetPositions")]
public Vector3[] get_vertices();
    [NativeNameAttribute("GetNormals")]
public Vector3[] get_normals();
    [NativeNameAttribute("GetCoefficients")]
public ClothSkinningCoefficient[] get_coefficients();
    [NativeNameAttribute("SetCoefficients")]
public void set_coefficients(ClothSkinningCoefficient[] value);
    [NativeNameAttribute("GetCapsuleColliders")]
public CapsuleCollider[] get_capsuleColliders();
    [NativeNameAttribute("SetCapsuleColliders")]
public void set_capsuleColliders(CapsuleCollider[] value);
    [NativeNameAttribute("GetSphereColliders")]
public ClothSphereColliderPair[] get_sphereColliders();
    [NativeNameAttribute("SetSphereColliders")]
public void set_sphereColliders(ClothSphereColliderPair[] value);
    public float get_sleepThreshold();
    public void set_sleepThreshold(float value);
    public float get_bendingStiffness();
    public void set_bendingStiffness(float value);
    public float get_stretchingStiffness();
    public void set_stretchingStiffness(float value);
    public float get_damping();
    public void set_damping(float value);
    public Vector3 get_externalAcceleration();
    public void set_externalAcceleration(Vector3 value);
    public Vector3 get_randomAcceleration();
    public void set_randomAcceleration(Vector3 value);
    public bool get_useGravity();
    public void set_useGravity(bool value);
    public bool get_enabled();
    public void set_enabled(bool value);
    public float get_friction();
    public void set_friction(float value);
    public float get_collisionMassScale();
    public void set_collisionMassScale(float value);
    public bool get_enableContinuousCollision();
    public void set_enableContinuousCollision(bool value);
    public float get_useVirtualParticles();
    public void set_useVirtualParticles(float value);
    public float get_worldVelocityScale();
    public void set_worldVelocityScale(float value);
    public float get_worldAccelerationScale();
    public void set_worldAccelerationScale(float value);
    public float get_clothSolverFrequency();
    public void set_clothSolverFrequency(float value);
    public bool get_solverFrequency();
    public void set_solverFrequency(bool value);
    public bool get_useTethers();
    public void set_useTethers(bool value);
    public float get_stiffnessFrequency();
    public void set_stiffnessFrequency(float value);
    public float get_selfCollisionDistance();
    public void set_selfCollisionDistance(float value);
    public float get_selfCollisionStiffness();
    public void set_selfCollisionStiffness(float value);
    public void ClearTransformMotion();
    public void GetSelfAndInterCollisionIndices(List`1<UInt32> indices);
    public void SetSelfAndInterCollisionIndices(List`1<UInt32> indices);
    public void GetVirtualParticleIndices(List`1<UInt32> indicesOutList);
    public void SetVirtualParticleIndices(List`1<UInt32> indicesIn);
    public void GetVirtualParticleWeights(List`1<Vector3> weightsOutList);
    public void SetVirtualParticleWeights(List`1<Vector3> weights);
    [CompilerGeneratedAttribute]
public float get_useContinuousCollision();
    [CompilerGeneratedAttribute]
public void set_useContinuousCollision(float value);
    [CompilerGeneratedAttribute]
public bool get_selfCollision();
    public void SetEnabledFading(bool enabled, float interpolationTime);
    [ExcludeFromDocsAttribute]
public void SetEnabledFading(bool enabled);
    internal RaycastHit Raycast(Ray ray, float maxDistance, Boolean& hasHit);
    private void get_externalAcceleration_Injected(Vector3& ret);
    private void set_externalAcceleration_Injected(Vector3& value);
    private void get_randomAcceleration_Injected(Vector3& ret);
    private void set_randomAcceleration_Injected(Vector3& value);
    private void Raycast_Injected(Ray& ray, float maxDistance, Boolean& hasHit, RaycastHit& ret);
}
[UsedByNativeCodeAttribute]
public class UnityEngine.ClothSkinningCoefficient : ValueType {
    public float maxDistance;
    public float collisionSphereDistance;
}
[NativeHeaderAttribute("Modules/Cloth/Cloth.h")]
[UsedByNativeCodeAttribute]
public class UnityEngine.ClothSphereColliderPair : ValueType {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SphereCollider <first>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
private SphereCollider <second>k__BackingField;
    public SphereCollider first { get; public set; }
    public SphereCollider second { get; public set; }
    public ClothSphereColliderPair(SphereCollider a);
    public ClothSphereColliderPair(SphereCollider a, SphereCollider b);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public SphereCollider get_first();
    [CompilerGeneratedAttribute]
public void set_first(SphereCollider value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SphereCollider get_second();
    [CompilerGeneratedAttribute]
public void set_second(SphereCollider value);
}
