internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal Mono.Security.Cryptography.ManagedProtection : object {
private RSA user
private RSA machine
private object user_lock
private object machine_lock
public Byte[] Protect(Byte[] userData, Byte[] optionalEntropy, DataProtectionScope scope)
public Byte[] Unprotect(Byte[] encryptedData, Byte[] optionalEntropy, DataProtectionScope scope)
private RSA GetKey(DataProtectionScope scope)
}
internal Mono.Security.Cryptography.NativeDapiProtection : object {
private UInt32 CRYPTPROTECT_UI_FORBIDDEN
private UInt32 CRYPTPROTECT_LOCAL_MACHINE
private bool CryptProtectData(DATA_BLOB& pDataIn, string szDataDescr, DATA_BLOB& pOptionalEntropy, IntPtr pvReserved, CRYPTPROTECT_PROMPTSTRUCT& pPromptStruct, UInt32 dwFlags, DATA_BLOB& pDataOut)
private bool CryptUnprotectData(DATA_BLOB& pDataIn, string szDataDescr, DATA_BLOB& pOptionalEntropy, IntPtr pvReserved, CRYPTPROTECT_PROMPTSTRUCT& pPromptStruct, UInt32 dwFlags, DATA_BLOB& pDataOut)
private void ZeroMemory(IntPtr dest, int size)
public Byte[] Protect(Byte[] userData, Byte[] optionalEntropy, DataProtectionScope scope)
public Byte[] Unprotect(Byte[] encryptedData, Byte[] optionalEntropy, DataProtectionScope scope)
}
internal SR : object {
public string ArgumentOutOfRange_Index
public string Arg_EmptyOrNullString
public string Cryptography_Partial_Chain
public string Cryptography_Xml_BadWrappedKeySize
public string Cryptography_Xml_CipherValueElementRequired
public string Cryptography_Xml_CreateHashAlgorithmFailed
public string Cryptography_Xml_CreateTransformFailed
public string Cryptography_Xml_CreatedKeyFailed
public string Cryptography_Xml_DigestMethodRequired
public string Cryptography_Xml_DigestValueRequired
public string Cryptography_Xml_EnvelopedSignatureRequiresContext
public string Cryptography_Xml_InvalidElement
public string Cryptography_Xml_InvalidEncryptionProperty
public string Cryptography_Xml_InvalidKeySize
public string Cryptography_Xml_InvalidReference
public string Cryptography_Xml_InvalidSignatureLength
public string Cryptography_Xml_InvalidSignatureLength2
public string Cryptography_Xml_InvalidX509IssuerSerialNumber
public string Cryptography_Xml_KeyInfoRequired
public string Cryptography_Xml_KW_BadKeySize
public string Cryptography_Xml_LoadKeyFailed
public string Cryptography_Xml_MissingAlgorithm
public string Cryptography_Xml_MissingCipherData
public string Cryptography_Xml_MissingDecryptionKey
public string Cryptography_Xml_MissingEncryptionKey
public string Cryptography_Xml_NotSupportedCryptographicTransform
public string Cryptography_Xml_ReferenceElementRequired
public string Cryptography_Xml_ReferenceTypeRequired
public string Cryptography_Xml_SelfReferenceRequiresContext
public string Cryptography_Xml_SignatureDescriptionNotCreated
public string Cryptography_Xml_SignatureMethodKeyMismatch
public string Cryptography_Xml_SignatureMethodRequired
public string Cryptography_Xml_SignatureValueRequired
public string Cryptography_Xml_SignedInfoRequired
public string Cryptography_Xml_TransformIncorrectInputType
public string Cryptography_Xml_IncorrectObjectType
public string Cryptography_Xml_UnknownTransform
public string Cryptography_Xml_UriNotResolved
public string Cryptography_Xml_UriNotSupported
public string Cryptography_Xml_UriRequired
public string Cryptography_Xml_XrmlMissingContext
public string Cryptography_Xml_XrmlMissingIRelDecryptor
public string Cryptography_Xml_XrmlMissingIssuer
public string Cryptography_Xml_XrmlMissingLicence
public string Cryptography_Xml_XrmlUnableToDecryptGrant
public string NotSupported_KeyAlgorithm
public string Log_ActualHashValue
public string Log_BeginCanonicalization
public string Log_BeginSignatureComputation
public string Log_BeginSignatureVerification
public string Log_BuildX509Chain
public string Log_CanonicalizationSettings
public string Log_CanonicalizedOutput
public string Log_CertificateChain
public string Log_CheckSignatureFormat
public string Log_CheckSignedInfo
public string Log_FormatValidationSuccessful
public string Log_FormatValidationNotSuccessful
public string Log_KeyUsages
public string Log_NoNamespacesPropagated
public string Log_PropagatingNamespace
public string Log_RawSignatureValue
public string Log_ReferenceHash
public string Log_RevocationMode
public string Log_RevocationFlag
public string Log_SigningAsymmetric
public string Log_SigningHmac
public string Log_SigningReference
public string Log_TransformedReferenceContents
public string Log_UnsafeCanonicalizationMethod
public string Log_UrlTimeout
public string Log_VerificationFailed
public string Log_VerificationFailed_References
public string Log_VerificationFailed_SignedInfo
public string Log_VerificationFailed_X509Chain
public string Log_VerificationFailed_X509KeyUsage
public string Log_VerificationFlag
public string Log_VerificationTime
public string Log_VerificationWithKeySuccessful
public string Log_VerificationWithKeyNotSuccessful
public string Log_VerifyReference
public string Log_VerifySignedInfoAsymmetric
public string Log_VerifySignedInfoHmac
public string Log_X509ChainError
public string Log_XmlContext
public string Log_SignedXmlRecursionLimit
public string Log_UnsafeTransformMethod
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
public System.Security.Cryptography.CryptographicAttributeObject : object {
private Oid _oid
private AsnEncodedDataCollection _list
public Oid Oid
public AsnEncodedDataCollection Values
public void .ctor(Oid oid)
public void .ctor(Oid oid, AsnEncodedDataCollection values)
public Oid get_Oid()
public AsnEncodedDataCollection get_Values()
}
public System.Security.Cryptography.CryptographicAttributeObjectCollection : object {
private ArrayList _list
public int Count
public bool IsSynchronized
public CryptographicAttributeObject Item
public object SyncRoot
public void .ctor(CryptographicAttributeObject attribute)
public int get_Count()
public bool get_IsSynchronized()
public CryptographicAttributeObject get_Item(int index)
public object get_SyncRoot()
public int Add(AsnEncodedData asnEncodedData)
public int Add(CryptographicAttributeObject attribute)
public void CopyTo(CryptographicAttributeObject[] array, int index)
private void System.Collections.ICollection.CopyTo(Array array, int index)
public CryptographicAttributeObjectEnumerator GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public void Remove(CryptographicAttributeObject attribute)
}
public System.Security.Cryptography.CryptographicAttributeObjectEnumerator : object {
private IEnumerator enumerator
public CryptographicAttributeObject Current
private object System.Collections.IEnumerator.Current
internal void .ctor(IEnumerable enumerable)
public CryptographicAttributeObject get_Current()
private object System.Collections.IEnumerator.get_Current()
public bool MoveNext()
public void Reset()
}
public System.Security.Cryptography.DataProtectionScope : Enum {
public int value__
public DataProtectionScope CurrentUser
public DataProtectionScope LocalMachine
}
public System.Security.Cryptography.DataProtector : object {
public DataProtector Create(string providerClass, string applicationName, string primaryPurpose, String[] specificPurposes)
public bool IsReprotectRequired(Byte[] encryptedData)
public Byte[] Protect(Byte[] userData)
public Byte[] Unprotect(Byte[] encryptedData)
}
public System.Security.Cryptography.DpapiDataProtector : DataProtector {
protected bool PrependHashedPurposeToPlaintext
public DataProtectionScope Scope
public void .ctor(string appName, string primaryPurpose, String[] specificPurpose)
protected bool get_PrependHashedPurposeToPlaintext()
public DataProtectionScope get_Scope()
public void set_Scope(DataProtectionScope value)
public bool IsReprotectRequired(Byte[] encryptedData)
protected Byte[] ProviderProtect(Byte[] userData)
protected Byte[] ProviderUnprotect(Byte[] encryptedData)
}
public System.Security.Cryptography.MemoryProtectionScope : Enum {
public int value__
public MemoryProtectionScope SameProcess
public MemoryProtectionScope CrossProcess
public MemoryProtectionScope SameLogon
}
public System.Security.Cryptography.Pkcs.AlgorithmIdentifier : object {
private Oid _oid
private int _length
private Byte[] _params
public int KeyLength
public Oid Oid
public Byte[] Parameters
public void .ctor(Oid oid)
public void .ctor(Oid oid, int keyLength)
public int get_KeyLength()
public void set_KeyLength(int value)
public Oid get_Oid()
public void set_Oid(Oid value)
public Byte[] get_Parameters()
public void set_Parameters(Byte[] value)
}
public System.Security.Cryptography.Pkcs.CmsRecipient : object {
private SubjectIdentifierType _recipient
private X509Certificate2 _certificate
public X509Certificate2 Certificate
public SubjectIdentifierType RecipientIdentifierType
public void .ctor(X509Certificate2 certificate)
public void .ctor(SubjectIdentifierType recipientIdentifierType, X509Certificate2 certificate)
public X509Certificate2 get_Certificate()
public SubjectIdentifierType get_RecipientIdentifierType()
}
public System.Security.Cryptography.Pkcs.CmsRecipientCollection : object {
private ArrayList _list
public int Count
public bool IsSynchronized
public CmsRecipient Item
public object SyncRoot
public void .ctor(CmsRecipient recipient)
public void .ctor(SubjectIdentifierType recipientIdentifierType, X509Certificate2Collection certificates)
public int get_Count()
public bool get_IsSynchronized()
public CmsRecipient get_Item(int index)
public object get_SyncRoot()
public int Add(CmsRecipient recipient)
public void CopyTo(Array array, int index)
public void CopyTo(CmsRecipient[] array, int index)
public CmsRecipientEnumerator GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public void Remove(CmsRecipient recipient)
}
public System.Security.Cryptography.Pkcs.CmsRecipientEnumerator : object {
private IEnumerator enumerator
public CmsRecipient Current
private object System.Collections.IEnumerator.Current
internal void .ctor(IEnumerable enumerable)
public CmsRecipient get_Current()
private object System.Collections.IEnumerator.get_Current()
public bool MoveNext()
public void Reset()
}
public System.Security.Cryptography.Pkcs.CmsSigner : object {
private SubjectIdentifierType _signer
private X509Certificate2 _certificate
private X509Certificate2Collection _coll
private Oid _digest
private X509IncludeOption _options
private CryptographicAttributeObjectCollection _signed
private CryptographicAttributeObjectCollection _unsigned
public CryptographicAttributeObjectCollection SignedAttributes
public X509Certificate2 Certificate
public X509Certificate2Collection Certificates
public Oid DigestAlgorithm
public X509IncludeOption IncludeOption
public SubjectIdentifierType SignerIdentifierType
public CryptographicAttributeObjectCollection UnsignedAttributes
public void .ctor(SubjectIdentifierType signerIdentifierType)
public void .ctor(SubjectIdentifierType signerIdentifierType, X509Certificate2 certificate)
public void .ctor(X509Certificate2 certificate)
public void .ctor(CspParameters parameters)
public CryptographicAttributeObjectCollection get_SignedAttributes()
public X509Certificate2 get_Certificate()
public void set_Certificate(X509Certificate2 value)
public X509Certificate2Collection get_Certificates()
public Oid get_DigestAlgorithm()
public void set_DigestAlgorithm(Oid value)
public X509IncludeOption get_IncludeOption()
public void set_IncludeOption(X509IncludeOption value)
public SubjectIdentifierType get_SignerIdentifierType()
public void set_SignerIdentifierType(SubjectIdentifierType value)
public CryptographicAttributeObjectCollection get_UnsignedAttributes()
}
public System.Security.Cryptography.Pkcs.ContentInfo : object {
private Oid _oid
private Byte[] _content
public Byte[] Content
public Oid ContentType
public void .ctor(Byte[] content)
public void .ctor(Oid contentType, Byte[] content)
protected void Finalize()
public Byte[] get_Content()
public Oid get_ContentType()
public Oid GetContentType(Byte[] encodedMessage)
}
public System.Security.Cryptography.Pkcs.EnvelopedCms : object {
private ContentInfo _content
private AlgorithmIdentifier _identifier
private X509Certificate2Collection _certs
private RecipientInfoCollection _recipients
private CryptographicAttributeObjectCollection _uattribs
private SubjectIdentifierType _idType
private int _version
public X509Certificate2Collection Certificates
public AlgorithmIdentifier ContentEncryptionAlgorithm
public ContentInfo ContentInfo
public RecipientInfoCollection RecipientInfos
public CryptographicAttributeObjectCollection UnprotectedAttributes
public int Version
public void .ctor(ContentInfo contentInfo)
public void .ctor(ContentInfo contentInfo, AlgorithmIdentifier encryptionAlgorithm)
public void .ctor(SubjectIdentifierType recipientIdentifierType, ContentInfo contentInfo)
public void .ctor(SubjectIdentifierType recipientIdentifierType, ContentInfo contentInfo, AlgorithmIdentifier encryptionAlgorithm)
public X509Certificate2Collection get_Certificates()
public AlgorithmIdentifier get_ContentEncryptionAlgorithm()
public ContentInfo get_ContentInfo()
public RecipientInfoCollection get_RecipientInfos()
public CryptographicAttributeObjectCollection get_UnprotectedAttributes()
public int get_Version()
private X509IssuerSerial GetIssuerSerial(string issuer, Byte[] serial)
public void Decode(Byte[] encodedMessage)
public void Decrypt()
public void Decrypt(RecipientInfo recipientInfo)
public void Decrypt(RecipientInfo recipientInfo, X509Certificate2Collection extraStore)
public void Decrypt(X509Certificate2Collection extraStore)
public Byte[] Encode()
public void Encrypt()
public void Encrypt(CmsRecipient recipient)
public void Encrypt(CmsRecipientCollection recipients)
}
public System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice : Enum {
public int value__
public KeyAgreeKeyChoice Unknown
public KeyAgreeKeyChoice EphemeralKey
public KeyAgreeKeyChoice StaticKey
}
public System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo : RecipientInfo {
public DateTime Date
public Byte[] EncryptedKey
public AlgorithmIdentifier KeyEncryptionAlgorithm
public SubjectIdentifierOrKey OriginatorIdentifierOrKey
public CryptographicAttributeObject OtherKeyAttribute
public SubjectIdentifier RecipientIdentifier
public int Version
public DateTime get_Date()
public Byte[] get_EncryptedKey()
public AlgorithmIdentifier get_KeyEncryptionAlgorithm()
public SubjectIdentifierOrKey get_OriginatorIdentifierOrKey()
public CryptographicAttributeObject get_OtherKeyAttribute()
public SubjectIdentifier get_RecipientIdentifier()
public int get_Version()
}
public System.Security.Cryptography.Pkcs.KeyTransRecipientInfo : RecipientInfo {
private Byte[] _encryptedKey
private AlgorithmIdentifier _keyEncryptionAlgorithm
private SubjectIdentifier _recipientIdentifier
private int _version
public Byte[] EncryptedKey
public AlgorithmIdentifier KeyEncryptionAlgorithm
public SubjectIdentifier RecipientIdentifier
public int Version
internal void .ctor(Byte[] encryptedKey, AlgorithmIdentifier keyEncryptionAlgorithm, SubjectIdentifier recipientIdentifier, int version)
public Byte[] get_EncryptedKey()
public AlgorithmIdentifier get_KeyEncryptionAlgorithm()
public SubjectIdentifier get_RecipientIdentifier()
public int get_Version()
}
public System.Security.Cryptography.Pkcs.Pkcs9AttributeObject : AsnEncodedData {
public Oid Oid
public void .ctor(AsnEncodedData asnEncodedData)
public void .ctor(Oid oid, Byte[] encodedData)
public void .ctor(string oid, Byte[] encodedData)
public Oid get_Oid()
internal void set_Oid(Oid value)
public void CopyFrom(AsnEncodedData asnEncodedData)
}
public System.Security.Cryptography.Pkcs.Pkcs9ContentType : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private Oid _contentType
private Byte[] _encoded
public Oid ContentType
internal void .ctor(string contentType)
internal void .ctor(Byte[] encodedContentType)
public Oid get_ContentType()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private string _desc
public string DocumentDescription
public void .ctor(string documentDescription)
public void .ctor(Byte[] encodedDocumentDescription)
public string get_DocumentDescription()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.Pkcs9DocumentName : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private string _name
public string DocumentName
public void .ctor(string documentName)
public void .ctor(Byte[] encodedDocumentName)
public string get_DocumentName()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.Pkcs9MessageDigest : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private Byte[] _messageDigest
private Byte[] _encoded
public Byte[] MessageDigest
internal void .ctor(Byte[] messageDigest, bool encoded)
public Byte[] get_MessageDigest()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.Pkcs9SigningTime : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private DateTime _signingTime
public DateTime SigningTime
public void .ctor(DateTime signingTime)
public void .ctor(Byte[] encodedSigningTime)
public DateTime get_SigningTime()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.PublicKeyInfo : object {
private AlgorithmIdentifier _algorithm
private Byte[] _key
public AlgorithmIdentifier Algorithm
public Byte[] KeyValue
internal void .ctor(AlgorithmIdentifier algorithm, Byte[] key)
public AlgorithmIdentifier get_Algorithm()
public Byte[] get_KeyValue()
}
public System.Security.Cryptography.Pkcs.RecipientInfo : object {
private RecipientInfoType _type
public Byte[] EncryptedKey
public AlgorithmIdentifier KeyEncryptionAlgorithm
public SubjectIdentifier RecipientIdentifier
public RecipientInfoType Type
public int Version
internal void .ctor(RecipientInfoType recipInfoType)
public Byte[] get_EncryptedKey()
public AlgorithmIdentifier get_KeyEncryptionAlgorithm()
public SubjectIdentifier get_RecipientIdentifier()
public RecipientInfoType get_Type()
public int get_Version()
}
public System.Security.Cryptography.Pkcs.RecipientInfoCollection : object {
private ArrayList _list
public int Count
public bool IsSynchronized
public RecipientInfo Item
public object SyncRoot
public int get_Count()
public bool get_IsSynchronized()
public RecipientInfo get_Item(int index)
public object get_SyncRoot()
internal int Add(RecipientInfo ri)
public void CopyTo(Array array, int index)
public void CopyTo(RecipientInfo[] array, int index)
public RecipientInfoEnumerator GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public System.Security.Cryptography.Pkcs.RecipientInfoEnumerator : object {
private IEnumerator enumerator
public RecipientInfo Current
private object System.Collections.IEnumerator.Current
internal void .ctor(IEnumerable enumerable)
public RecipientInfo get_Current()
private object System.Collections.IEnumerator.get_Current()
public bool MoveNext()
public void Reset()
}
public System.Security.Cryptography.Pkcs.RecipientInfoType : Enum {
public int value__
public RecipientInfoType Unknown
public RecipientInfoType KeyTransport
public RecipientInfoType KeyAgreement
}
public System.Security.Cryptography.Pkcs.SignedCms : object {
private ContentInfo _content
private bool _detached
private SignerInfoCollection _info
private X509Certificate2Collection _certs
private SubjectIdentifierType _type
private int _version
public X509Certificate2Collection Certificates
public ContentInfo ContentInfo
public bool Detached
public SignerInfoCollection SignerInfos
public int Version
public void .ctor(ContentInfo contentInfo)
public void .ctor(ContentInfo contentInfo, bool detached)
public void .ctor(SubjectIdentifierType signerIdentifierType)
public void .ctor(SubjectIdentifierType signerIdentifierType, ContentInfo contentInfo)
public void .ctor(SubjectIdentifierType signerIdentifierType, ContentInfo contentInfo, bool detached)
public X509Certificate2Collection get_Certificates()
public ContentInfo get_ContentInfo()
public bool get_Detached()
public SignerInfoCollection get_SignerInfos()
public int get_Version()
public void CheckSignature(bool verifySignatureOnly)
public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly)
public void CheckHash()
public void ComputeSignature()
public void ComputeSignature(CmsSigner signer)
public void ComputeSignature(CmsSigner signer, bool silent)
private string ToString(Byte[] array, bool reverse)
private Byte[] GetKeyIdentifier(X509Certificate x509)
public void Decode(Byte[] encodedMessage)
public Byte[] Encode()
public void RemoveSignature(SignerInfo signerInfo)
public void RemoveSignature(int index)
}
public System.Security.Cryptography.Pkcs.SignerInfo : object {
private SubjectIdentifier _signer
private X509Certificate2 _certificate
private Oid _digest
private SignerInfoCollection _counter
private CryptographicAttributeObjectCollection _signed
private CryptographicAttributeObjectCollection _unsigned
private int _version
public CryptographicAttributeObjectCollection SignedAttributes
public X509Certificate2 Certificate
public SignerInfoCollection CounterSignerInfos
public Oid DigestAlgorithm
public SubjectIdentifier SignerIdentifier
public CryptographicAttributeObjectCollection UnsignedAttributes
public int Version
internal void .ctor(string hashName, X509Certificate2 certificate, SubjectIdentifierType type, object o, int version)
public CryptographicAttributeObjectCollection get_SignedAttributes()
public X509Certificate2 get_Certificate()
public SignerInfoCollection get_CounterSignerInfos()
public Oid get_DigestAlgorithm()
public SubjectIdentifier get_SignerIdentifier()
public CryptographicAttributeObjectCollection get_UnsignedAttributes()
public int get_Version()
public void CheckHash()
public void CheckSignature(bool verifySignatureOnly)
public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly)
public void ComputeCounterSignature()
public void ComputeCounterSignature(CmsSigner signer)
public void RemoveCounterSignature(SignerInfo counterSignerInfo)
public void RemoveCounterSignature(int index)
}
public System.Security.Cryptography.Pkcs.SignerInfoCollection : object {
private ArrayList _list
public int Count
public bool IsSynchronized
public SignerInfo Item
public object SyncRoot
public int get_Count()
public bool get_IsSynchronized()
public SignerInfo get_Item(int index)
public object get_SyncRoot()
internal void Add(SignerInfo signer)
public void CopyTo(Array array, int index)
public void CopyTo(SignerInfo[] array, int index)
public SignerInfoEnumerator GetEnumerator()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
}
public System.Security.Cryptography.Pkcs.SignerInfoEnumerator : object {
private IEnumerator enumerator
public SignerInfo Current
private object System.Collections.IEnumerator.Current
internal void .ctor(IEnumerable enumerable)
public SignerInfo get_Current()
private object System.Collections.IEnumerator.get_Current()
public bool MoveNext()
public void Reset()
}
public System.Security.Cryptography.Pkcs.SubjectIdentifier : object {
private SubjectIdentifierType _type
private object _value
public SubjectIdentifierType Type
public object Value
internal void .ctor(SubjectIdentifierType type, object value)
public SubjectIdentifierType get_Type()
public object get_Value()
}
public System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey : object {
private SubjectIdentifierOrKeyType _type
private object _value
public SubjectIdentifierOrKeyType Type
public object Value
internal void .ctor(SubjectIdentifierOrKeyType type, object value)
public SubjectIdentifierOrKeyType get_Type()
public object get_Value()
}
public System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType : Enum {
public int value__
public SubjectIdentifierOrKeyType Unknown
public SubjectIdentifierOrKeyType IssuerAndSerialNumber
public SubjectIdentifierOrKeyType SubjectKeyIdentifier
public SubjectIdentifierOrKeyType PublicKeyInfo
}
public System.Security.Cryptography.Pkcs.SubjectIdentifierType : Enum {
public int value__
public SubjectIdentifierType Unknown
public SubjectIdentifierType IssuerAndSerialNumber
public SubjectIdentifierType SubjectKeyIdentifier
public SubjectIdentifierType NoSignature
}
public System.Security.Cryptography.ProtectedData : object {
private DataProtectionImplementation impl
public Byte[] Protect(Byte[] userData, Byte[] optionalEntropy, DataProtectionScope scope)
public Byte[] Unprotect(Byte[] encryptedData, Byte[] optionalEntropy, DataProtectionScope scope)
private void Detect()
private void Check(DataProtectionScope scope)
}
public System.Security.Cryptography.ProtectedMemory : object {
private int BlockSize
private MemoryProtectionImplementation impl
public void Protect(Byte[] userData, MemoryProtectionScope scope)
public void Unprotect(Byte[] encryptedData, MemoryProtectionScope scope)
private void Detect()
private void Check(int size, MemoryProtectionScope scope)
private int RtlEncryptMemory(Byte[] pData, UInt32 cbData, UInt32 dwFlags)
private int RtlDecryptMemory(Byte[] pData, UInt32 cbData, UInt32 dwFlags)
private bool CryptProtectMemory(Byte[] pData, UInt32 cbData, UInt32 dwFlags)
private bool CryptUnprotectMemory(Byte[] pData, UInt32 cbData, UInt32 dwFlags)
}
internal System.Security.Cryptography.X509Certificates.RSACertificateExtensions : object {
public RSA GetRSAPrivateKey(X509Certificate2 certificate)
public RSA GetRSAPublicKey(X509Certificate2 certificate)
}
public System.Security.Cryptography.X509Certificates.X509Certificate2UI : object {
public void DisplayCertificate(X509Certificate2 certificate)
public void DisplayCertificate(X509Certificate2 certificate, IntPtr hwndParent)
public X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag)
public X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag, IntPtr hwndParent)
}
public System.Security.Cryptography.X509Certificates.X509SelectionFlag : Enum {
public int value__
public X509SelectionFlag SingleSelection
public X509SelectionFlag MultiSelection
}
internal System.Security.Cryptography.Xml.AncestralNamespaceContextManager : object {
internal ArrayList _ancestorStack
internal NamespaceFrame GetScopeAt(int i)
internal NamespaceFrame GetCurrentScope()
protected XmlAttribute GetNearestRenderedNamespaceWithMatchingPrefix(string nsPrefix, Int32& depth)
protected XmlAttribute GetNearestUnrenderedNamespaceWithMatchingPrefix(string nsPrefix, Int32& depth)
internal void EnterElementContext()
internal void ExitElementContext()
internal void TrackNamespaceNode(XmlAttribute attr, SortedList nsListToRender, Hashtable nsLocallyDeclared)
internal void TrackXmlNamespaceNode(XmlAttribute attr, SortedList nsListToRender, SortedList attrListToRender, Hashtable nsLocallyDeclared)
internal void GetNamespacesToRender(XmlElement element, SortedList attrListToRender, SortedList nsListToRender, Hashtable nsLocallyDeclared)
internal void LoadUnrenderedNamespaces(Hashtable nsLocallyDeclared)
internal void LoadRenderedNamespaces(SortedList nsRenderedList)
internal void AddRendered(XmlAttribute attr)
internal void AddUnrendered(XmlAttribute attr)
}
internal System.Security.Cryptography.Xml.AttributeSortOrder : object {
public int Compare(object a, object b)
}
internal System.Security.Cryptography.Xml.C14NAncestralNamespaceContextManager : AncestralNamespaceContextManager {
private void GetNamespaceToRender(string nsPrefix, SortedList attrListToRender, SortedList nsListToRender, Hashtable nsLocallyDeclared)
internal void GetNamespacesToRender(XmlElement element, SortedList attrListToRender, SortedList nsListToRender, Hashtable nsLocallyDeclared)
internal void TrackNamespaceNode(XmlAttribute attr, SortedList nsListToRender, Hashtable nsLocallyDeclared)
internal void TrackXmlNamespaceNode(XmlAttribute attr, SortedList nsListToRender, SortedList attrListToRender, Hashtable nsLocallyDeclared)
}
internal System.Security.Cryptography.Xml.CanonicalizationDispatcher : object {
public void Write(XmlNode node, StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteGenericNode(XmlNode node, StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(XmlNode node, HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHashGenericNode(XmlNode node, HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CanonicalXml : object {
private CanonicalXmlDocument _c14nDoc
private C14NAncestralNamespaceContextManager _ancMgr
internal void .ctor(Stream inputStream, bool includeComments, XmlResolver resolver, string strBaseUri)
internal void .ctor(XmlDocument document, XmlResolver resolver)
internal void .ctor(XmlDocument document, XmlResolver resolver, bool includeComments)
internal void .ctor(XmlNodeList nodeList, XmlResolver resolver, bool includeComments)
private void MarkNodeAsIncluded(XmlNode node)
private void MarkInclusionStateForNodes(XmlNodeList nodeList, XmlDocument inputRoot, XmlDocument root)
internal Byte[] GetBytes()
internal Byte[] GetDigestedBytes(HashAlgorithm hash)
}
internal System.Security.Cryptography.Xml.CanonicalXmlAttribute : XmlAttribute {
private bool _isInNodeSet
public bool IsInNodeSet
public void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc, bool defaultNodeSetInclusionState)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CanonicalXmlCDataSection : XmlCDataSection {
private bool _isInNodeSet
public bool IsInNodeSet
public void .ctor(string data, XmlDocument doc, bool defaultNodeSetInclusionState)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CanonicalXmlComment : XmlComment {
private bool _isInNodeSet
private bool _includeComments
public bool IsInNodeSet
public bool IncludeComments
public void .ctor(string comment, XmlDocument doc, bool defaultNodeSetInclusionState, bool includeComments)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public bool get_IncludeComments()
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CanonicalXmlDocument : XmlDocument {
private bool _defaultNodeSetInclusionState
private bool _includeComments
private bool _isInNodeSet
public bool IsInNodeSet
public void .ctor(bool defaultNodeSetInclusionState, bool includeComments)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
public XmlElement CreateElement(string prefix, string localName, string namespaceURI)
public XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI)
protected XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI)
public XmlText CreateTextNode(string text)
public XmlWhitespace CreateWhitespace(string prefix)
public XmlSignificantWhitespace CreateSignificantWhitespace(string text)
public XmlProcessingInstruction CreateProcessingInstruction(string target, string data)
public XmlComment CreateComment(string data)
public XmlEntityReference CreateEntityReference(string name)
public XmlCDataSection CreateCDataSection(string data)
}
internal System.Security.Cryptography.Xml.CanonicalXmlElement : XmlElement {
private bool _isInNodeSet
public bool IsInNodeSet
public void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc, bool defaultNodeSetInclusionState)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CanonicalXmlEntityReference : XmlEntityReference {
private bool _isInNodeSet
public bool IsInNodeSet
public void .ctor(string name, XmlDocument doc, bool defaultNodeSetInclusionState)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CanonicalXmlNodeList : XmlNodeList {
private ArrayList _nodeArray
public int Count
public bool IsFixedSize
public bool IsReadOnly
private object System.Collections.IList.Item
public object SyncRoot
public bool IsSynchronized
public XmlNode Item(int index)
public IEnumerator GetEnumerator()
public int get_Count()
public int Add(object value)
public void Clear()
public bool Contains(object value)
public int IndexOf(object value)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(int index)
public bool get_IsFixedSize()
public bool get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public void CopyTo(Array array, int index)
public object get_SyncRoot()
public bool get_IsSynchronized()
}
internal System.Security.Cryptography.Xml.CanonicalXmlProcessingInstruction : XmlProcessingInstruction {
private bool _isInNodeSet
public bool IsInNodeSet
public void .ctor(string target, string data, XmlDocument doc, bool defaultNodeSetInclusionState)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CanonicalXmlSignificantWhitespace : XmlSignificantWhitespace {
private bool _isInNodeSet
public bool IsInNodeSet
public void .ctor(string strData, XmlDocument doc, bool defaultNodeSetInclusionState)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CanonicalXmlText : XmlText {
private bool _isInNodeSet
public bool IsInNodeSet
public void .ctor(string strData, XmlDocument doc, bool defaultNodeSetInclusionState)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CanonicalXmlWhitespace : XmlWhitespace {
private bool _isInNodeSet
public bool IsInNodeSet
public void .ctor(string strData, XmlDocument doc, bool defaultNodeSetInclusionState)
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
internal System.Security.Cryptography.Xml.CertUsageType : Enum {
public int value__
public CertUsageType Verification
public CertUsageType Decryption
}
public System.Security.Cryptography.Xml.CipherData : object {
private XmlElement _cachedXml
private CipherReference _cipherReference
private Byte[] _cipherValue
private bool CacheValid
public CipherReference CipherReference
public Byte[] CipherValue
public void .ctor(Byte[] cipherValue)
public void .ctor(CipherReference cipherReference)
private bool get_CacheValid()
public CipherReference get_CipherReference()
public void set_CipherReference(CipherReference value)
public Byte[] get_CipherValue()
public void set_CipherValue(Byte[] value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.CipherReference : EncryptedReference {
private Byte[] _cipherValue
internal Byte[] CipherValue
public void .ctor(string uri)
public void .ctor(string uri, TransformChain transformChain)
internal Byte[] get_CipherValue()
internal void set_CipherValue(Byte[] value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
internal System.Security.Cryptography.Xml.CryptoHelpers : object {
public object CreateFromName(string name)
}
internal System.Security.Cryptography.Xml.CryptoSignedXmlRecursionException : XmlException {
public void .ctor(string message)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Security.Cryptography.Xml.DataObject : object {
private string _id
private string _mimeType
private string _encoding
private CanonicalXmlNodeList _elData
private XmlElement _cachedXml
public string Id
public string MimeType
public string Encoding
public XmlNodeList Data
private bool CacheValid
public void .ctor(string id, string mimeType, string encoding, XmlElement data)
public string get_Id()
public void set_Id(string value)
public string get_MimeType()
public void set_MimeType(string value)
public string get_Encoding()
public void set_Encoding(string value)
public XmlNodeList get_Data()
public void set_Data(XmlNodeList value)
private bool get_CacheValid()
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.DataReference : EncryptedReference {
public void .ctor(string uri)
public void .ctor(string uri, TransformChain transformChain)
}
internal System.Security.Cryptography.Xml.DocPosition : Enum {
public int value__
public DocPosition BeforeRootElement
public DocPosition InRootElement
public DocPosition AfterRootElement
}
public System.Security.Cryptography.Xml.DSAKeyValue : KeyInfoClause {
private DSA _key
private string KeyValueElementName
private string DSAKeyValueElementName
private string PElementName
private string QElementName
private string GElementName
private string JElementName
private string YElementName
private string SeedElementName
private string PgenCounterElementName
public DSA Key
public void .ctor(DSA key)
public DSA get_Key()
public void set_Key(DSA value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument xmlDocument)
public void LoadXml(XmlElement value)
}
internal System.Security.Cryptography.Xml.DSASignatureDescription : SignatureDescription {
private string HashAlgorithm
public AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)
public AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key)
public HashAlgorithm CreateDigest()
}
public System.Security.Cryptography.Xml.EncryptedData : EncryptedType {
public void LoadXml(XmlElement value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
}
public System.Security.Cryptography.Xml.EncryptedKey : EncryptedType {
private string _recipient
private string _carriedKeyName
private ReferenceList _referenceList
public string Recipient
public string CarriedKeyName
public ReferenceList ReferenceList
public string get_Recipient()
public void set_Recipient(string value)
public string get_CarriedKeyName()
public void set_CarriedKeyName(string value)
public ReferenceList get_ReferenceList()
public void AddReference(DataReference dataReference)
public void AddReference(KeyReference keyReference)
public void LoadXml(XmlElement value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
}
public System.Security.Cryptography.Xml.EncryptedReference : object {
private string _uri
private string _referenceType
private TransformChain _transformChain
internal XmlElement _cachedXml
public string Uri
public TransformChain TransformChain
protected string ReferenceType
protected internal bool CacheValid
protected void .ctor(string uri)
protected void .ctor(string uri, TransformChain transformChain)
public string get_Uri()
public void set_Uri(string value)
public TransformChain get_TransformChain()
public void set_TransformChain(TransformChain value)
public void AddTransform(Transform transform)
protected string get_ReferenceType()
protected void set_ReferenceType(string value)
protected internal bool get_CacheValid()
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptedType : object {
private string _id
private string _type
private string _mimeType
private string _encoding
private EncryptionMethod _encryptionMethod
private CipherData _cipherData
private EncryptionPropertyCollection _props
private KeyInfo _keyInfo
internal XmlElement _cachedXml
internal bool CacheValid
public string Id
public string Type
public string MimeType
public string Encoding
public KeyInfo KeyInfo
public EncryptionMethod EncryptionMethod
public EncryptionPropertyCollection EncryptionProperties
public CipherData CipherData
internal bool get_CacheValid()
public string get_Id()
public void set_Id(string value)
public string get_Type()
public void set_Type(string value)
public string get_MimeType()
public void set_MimeType(string value)
public string get_Encoding()
public void set_Encoding(string value)
public KeyInfo get_KeyInfo()
public void set_KeyInfo(KeyInfo value)
public EncryptionMethod get_EncryptionMethod()
public void set_EncryptionMethod(EncryptionMethod value)
public EncryptionPropertyCollection get_EncryptionProperties()
public void AddProperty(EncryptionProperty ep)
public CipherData get_CipherData()
public void set_CipherData(CipherData value)
public void LoadXml(XmlElement value)
public XmlElement GetXml()
}
public System.Security.Cryptography.Xml.EncryptedXml : object {
public string XmlEncNamespaceUrl
public string XmlEncElementUrl
public string XmlEncElementContentUrl
public string XmlEncEncryptedKeyUrl
public string XmlEncDESUrl
public string XmlEncTripleDESUrl
public string XmlEncAES128Url
public string XmlEncAES256Url
public string XmlEncAES192Url
public string XmlEncRSA15Url
public string XmlEncRSAOAEPUrl
public string XmlEncTripleDESKeyWrapUrl
public string XmlEncAES128KeyWrapUrl
public string XmlEncAES256KeyWrapUrl
public string XmlEncAES192KeyWrapUrl
public string XmlEncSHA256Url
public string XmlEncSHA512Url
private XmlDocument _document
private Evidence _evidence
private XmlResolver _xmlResolver
private int _capacity
private Hashtable _keyNameMapping
private PaddingMode _padding
private CipherMode _mode
private Encoding _encoding
private string _recipient
private int _xmlDsigSearchDepthCounter
private int _xmlDsigSearchDepth
public int XmlDSigSearchDepth
public Evidence DocumentEvidence
public XmlResolver Resolver
public PaddingMode Padding
public CipherMode Mode
public Encoding Encoding
public string Recipient
public void .ctor(XmlDocument document)
public void .ctor(XmlDocument document, Evidence evidence)
private bool IsOverXmlDsigRecursionLimit()
public int get_XmlDSigSearchDepth()
public void set_XmlDSigSearchDepth(int value)
public Evidence get_DocumentEvidence()
public void set_DocumentEvidence(Evidence value)
public XmlResolver get_Resolver()
public void set_Resolver(XmlResolver value)
public PaddingMode get_Padding()
public void set_Padding(PaddingMode value)
public CipherMode get_Mode()
public void set_Mode(CipherMode value)
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
public string get_Recipient()
public void set_Recipient(string value)
private Byte[] GetCipherValue(CipherData cipherData)
public XmlElement GetIdElement(XmlDocument document, string idValue)
public Byte[] GetDecryptionIV(EncryptedData encryptedData, string symmetricAlgorithmUri)
public SymmetricAlgorithm GetDecryptionKey(EncryptedData encryptedData, string symmetricAlgorithmUri)
public Byte[] DecryptEncryptedKey(EncryptedKey encryptedKey)
public void AddKeyNameMapping(string keyName, object keyObject)
public void ClearKeyNameMappings()
public EncryptedData Encrypt(XmlElement inputElement, X509Certificate2 certificate)
public EncryptedData Encrypt(XmlElement inputElement, string keyName)
public void DecryptDocument()
public Byte[] EncryptData(Byte[] plaintext, SymmetricAlgorithm symmetricAlgorithm)
public Byte[] EncryptData(XmlElement inputElement, SymmetricAlgorithm symmetricAlgorithm, bool content)
public Byte[] DecryptData(EncryptedData encryptedData, SymmetricAlgorithm symmetricAlgorithm)
public void ReplaceData(XmlElement inputElement, Byte[] decryptedData)
public void ReplaceElement(XmlElement inputElement, EncryptedData encryptedData, bool content)
public Byte[] EncryptKey(Byte[] keyData, SymmetricAlgorithm symmetricAlgorithm)
public Byte[] EncryptKey(Byte[] keyData, RSA rsa, bool useOAEP)
public Byte[] DecryptKey(Byte[] keyData, SymmetricAlgorithm symmetricAlgorithm)
public Byte[] DecryptKey(Byte[] keyData, RSA rsa, bool useOAEP)
}
public System.Security.Cryptography.Xml.EncryptionMethod : object {
private XmlElement _cachedXml
private int _keySize
private string _algorithm
private bool CacheValid
public int KeySize
public string KeyAlgorithm
public void .ctor(string algorithm)
private bool get_CacheValid()
public int get_KeySize()
public void set_KeySize(int value)
public string get_KeyAlgorithm()
public void set_KeyAlgorithm(string value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptionProperty : object {
private string _target
private string _id
private XmlElement _elemProp
private XmlElement _cachedXml
public string Id
public string Target
public XmlElement PropertyElement
private bool CacheValid
public void .ctor(XmlElement elementProperty)
public string get_Id()
public string get_Target()
public XmlElement get_PropertyElement()
public void set_PropertyElement(XmlElement value)
private bool get_CacheValid()
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptionPropertyCollection : object {
private ArrayList _props
public int Count
public bool IsFixedSize
public bool IsReadOnly
public EncryptionProperty ItemOf
private object System.Collections.IList.Item
public object SyncRoot
public bool IsSynchronized
public IEnumerator GetEnumerator()
public int get_Count()
private int System.Collections.IList.Add(object value)
public int Add(EncryptionProperty value)
public void Clear()
private bool System.Collections.IList.Contains(object value)
public bool Contains(EncryptionProperty value)
private int System.Collections.IList.IndexOf(object value)
public int IndexOf(EncryptionProperty value)
private void System.Collections.IList.Insert(int index, object value)
public void Insert(int index, EncryptionProperty value)
private void System.Collections.IList.Remove(object value)
public void Remove(EncryptionProperty value)
public void RemoveAt(int index)
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public EncryptionProperty Item(int index)
public EncryptionProperty get_ItemOf(int index)
public void set_ItemOf(int index, EncryptionProperty value)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public void CopyTo(Array array, int index)
public void CopyTo(EncryptionProperty[] array, int index)
public object get_SyncRoot()
public bool get_IsSynchronized()
}
internal System.Security.Cryptography.Xml.ExcAncestralNamespaceContextManager : AncestralNamespaceContextManager {
private Hashtable _inclusivePrefixSet
internal void .ctor(string inclusiveNamespacesPrefixList)
private bool HasNonRedundantInclusivePrefix(XmlAttribute attr)
private void GatherNamespaceToRender(string nsPrefix, SortedList nsListToRender, Hashtable nsLocallyDeclared)
internal void GetNamespacesToRender(XmlElement element, SortedList attrListToRender, SortedList nsListToRender, Hashtable nsLocallyDeclared)
internal void TrackNamespaceNode(XmlAttribute attr, SortedList nsListToRender, Hashtable nsLocallyDeclared)
internal void TrackXmlNamespaceNode(XmlAttribute attr, SortedList nsListToRender, SortedList attrListToRender, Hashtable nsLocallyDeclared)
}
internal System.Security.Cryptography.Xml.ExcCanonicalXml : object {
private CanonicalXmlDocument _c14nDoc
private ExcAncestralNamespaceContextManager _ancMgr
internal void .ctor(Stream inputStream, bool includeComments, string inclusiveNamespacesPrefixList, XmlResolver resolver, string strBaseUri)
internal void .ctor(XmlDocument document, bool includeComments, string inclusiveNamespacesPrefixList, XmlResolver resolver)
internal void .ctor(XmlNodeList nodeList, bool includeComments, string inclusiveNamespacesPrefixList, XmlResolver resolver)
internal Byte[] GetBytes()
internal Byte[] GetDigestedBytes(HashAlgorithm hash)
private void MarkInclusionStateForNodes(XmlNodeList nodeList, XmlDocument inputRoot, XmlDocument root)
private void MarkNodeAsIncluded(XmlNode node)
}
internal System.Security.Cryptography.Xml.ICanonicalizableNode {
public bool IsInNodeSet
public bool get_IsInNodeSet()
public void set_IsInNodeSet(bool value)
public void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc)
public void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc)
}
public System.Security.Cryptography.Xml.IRelDecryptor {
public Stream Decrypt(EncryptionMethod encryptionMethod, KeyInfo keyInfo, Stream toDecrypt)
}
public System.Security.Cryptography.Xml.KeyInfo : object {
private string _id
private ArrayList _keyInfoClauses
public string Id
public int Count
public string get_Id()
public void set_Id(string value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument xmlDocument)
public void LoadXml(XmlElement value)
public int get_Count()
public void AddClause(KeyInfoClause clause)
public IEnumerator GetEnumerator()
public IEnumerator GetEnumerator(Type requestedObjectType)
}
public System.Security.Cryptography.Xml.KeyInfoClause : object {
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument xmlDocument)
public void LoadXml(XmlElement element)
}
public System.Security.Cryptography.Xml.KeyInfoEncryptedKey : KeyInfoClause {
private EncryptedKey _encryptedKey
public EncryptedKey EncryptedKey
public void .ctor(EncryptedKey encryptedKey)
public EncryptedKey get_EncryptedKey()
public void set_EncryptedKey(EncryptedKey value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument xmlDocument)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.KeyInfoName : KeyInfoClause {
private string _keyName
public string Value
public void .ctor(string keyName)
public string get_Value()
public void set_Value(string value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument xmlDocument)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.KeyInfoNode : KeyInfoClause {
private XmlElement _node
public XmlElement Value
public void .ctor(XmlElement node)
public XmlElement get_Value()
public void set_Value(XmlElement value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument xmlDocument)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.KeyInfoRetrievalMethod : KeyInfoClause {
private string _uri
private string _type
public string Uri
public string Type
public void .ctor(string strUri)
public void .ctor(string strUri, string typeName)
public string get_Uri()
public void set_Uri(string value)
public string get_Type()
public void set_Type(string value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument xmlDocument)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.KeyInfoX509Data : KeyInfoClause {
private Byte[] x509crl
private ArrayList IssuerSerialList
private ArrayList SubjectKeyIdList
private ArrayList SubjectNameList
private ArrayList X509CertificateList
public ArrayList Certificates
public Byte[] CRL
public ArrayList IssuerSerials
public ArrayList SubjectKeyIds
public ArrayList SubjectNames
public void .ctor(Byte[] rgbCert)
public void .ctor(X509Certificate cert)
public void .ctor(X509Certificate cert, X509IncludeOption includeOption)
private void AddCertificatesChainFrom(X509Certificate cert, bool root)
public ArrayList get_Certificates()
public Byte[] get_CRL()
public void set_CRL(Byte[] value)
public ArrayList get_IssuerSerials()
public ArrayList get_SubjectKeyIds()
public ArrayList get_SubjectNames()
public void AddCertificate(X509Certificate certificate)
public void AddIssuerSerial(string issuerName, string serialNumber)
public void AddSubjectKeyId(Byte[] subjectKeyId)
public void AddSubjectKeyId(string subjectKeyId)
public void AddSubjectName(string subjectName)
public XmlElement GetXml()
public void LoadXml(XmlElement element)
}
public System.Security.Cryptography.Xml.KeyReference : EncryptedReference {
public void .ctor(string uri)
public void .ctor(string uri, TransformChain transformChain)
}
internal System.Security.Cryptography.Xml.Manifest : object {
private ArrayList references
private string id
private XmlElement element
public string Id
public ArrayList References
public void .ctor(XmlElement xel)
public string get_Id()
public void set_Id(string value)
public ArrayList get_References()
public void AddReference(Reference reference)
public XmlElement GetXml()
private string GetAttribute(XmlElement xel, string attribute)
public void LoadXml(XmlElement value)
}
internal System.Security.Cryptography.Xml.MyXmlDocument : XmlDocument {
protected XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI)
}
internal System.Security.Cryptography.Xml.NamespaceFrame : object {
private Hashtable _rendered
private Hashtable _unrendered
internal void AddRendered(XmlAttribute attr)
internal XmlAttribute GetRendered(string nsPrefix)
internal void AddUnrendered(XmlAttribute attr)
internal XmlAttribute GetUnrendered(string nsPrefix)
internal Hashtable GetUnrendered()
}
internal System.Security.Cryptography.Xml.NamespaceSortOrder : object {
public int Compare(object a, object b)
}
public System.Security.Cryptography.Xml.Reference : object {
internal string DefaultDigestMethod
private string _id
private string _uri
private string _type
private TransformChain _transformChain
private string _digestMethod
private Byte[] _digestValue
private HashAlgorithm _hashAlgorithm
private object _refTarget
private ReferenceTargetType _refTargetType
private XmlElement _cachedXml
private SignedXml _signedXml
internal CanonicalXmlNodeList _namespaces
public string Id
public string Uri
public string Type
public string DigestMethod
public Byte[] DigestValue
public TransformChain TransformChain
internal bool CacheValid
internal SignedXml SignedXml
internal ReferenceTargetType ReferenceTargetType
public void .ctor(Stream stream)
public void .ctor(string uri)
internal void .ctor(XmlElement element)
public string get_Id()
public void set_Id(string value)
public string get_Uri()
public void set_Uri(string value)
public string get_Type()
public void set_Type(string value)
public string get_DigestMethod()
public void set_DigestMethod(string value)
public Byte[] get_DigestValue()
public void set_DigestValue(Byte[] value)
public TransformChain get_TransformChain()
public void set_TransformChain(TransformChain value)
internal bool get_CacheValid()
internal SignedXml get_SignedXml()
internal void set_SignedXml(SignedXml value)
internal ReferenceTargetType get_ReferenceTargetType()
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
public void AddTransform(Transform transform)
internal void UpdateHashValue(XmlDocument document, CanonicalXmlNodeList refList)
internal Byte[] CalculateHashValue(XmlDocument document, CanonicalXmlNodeList refList)
}
public System.Security.Cryptography.Xml.ReferenceList : object {
private ArrayList _references
public int Count
public EncryptedReference ItemOf
private object System.Collections.IList.Item
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
public object SyncRoot
public bool IsSynchronized
public IEnumerator GetEnumerator()
public int get_Count()
public int Add(object value)
public void Clear()
public bool Contains(object value)
public int IndexOf(object value)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(int index)
public EncryptedReference Item(int index)
public EncryptedReference get_ItemOf(int index)
public void set_ItemOf(int index, EncryptedReference value)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public void CopyTo(Array array, int index)
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
public object get_SyncRoot()
public bool get_IsSynchronized()
}
internal System.Security.Cryptography.Xml.ReferenceTargetType : Enum {
public int value__
public ReferenceTargetType Stream
public ReferenceTargetType XmlElement
public ReferenceTargetType UriReference
}
public System.Security.Cryptography.Xml.RSAKeyValue : KeyInfoClause {
private RSA _key
private string KeyValueElementName
private string RSAKeyValueElementName
private string ModulusElementName
private string ExponentElementName
public RSA Key
public void .ctor(RSA key)
public RSA get_Key()
public void set_Key(RSA value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument xmlDocument)
public void LoadXml(XmlElement value)
}
internal System.Security.Cryptography.Xml.RSAPKCS1SHA1SignatureDescription : RSAPKCS1SignatureDescription {
public HashAlgorithm CreateDigest()
}
internal System.Security.Cryptography.Xml.RSAPKCS1SHA256SignatureDescription : RSAPKCS1SignatureDescription {
public HashAlgorithm CreateDigest()
}
internal System.Security.Cryptography.Xml.RSAPKCS1SHA384SignatureDescription : RSAPKCS1SignatureDescription {
public HashAlgorithm CreateDigest()
}
internal System.Security.Cryptography.Xml.RSAPKCS1SHA512SignatureDescription : RSAPKCS1SignatureDescription {
public HashAlgorithm CreateDigest()
}
internal System.Security.Cryptography.Xml.RSAPKCS1SignatureDescription : SignatureDescription {
public void .ctor(string hashAlgorithmName)
public AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)
public AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key)
public HashAlgorithm CreateDigest()
}
public System.Security.Cryptography.Xml.Signature : object {
private XmlNamespaceManager dsigNsmgr
private ArrayList list
private SignedInfo info
private KeyInfo key
private string id
private Byte[] signature
private XmlElement element
public string Id
public KeyInfo KeyInfo
public IList ObjectList
public Byte[] SignatureValue
public SignedInfo SignedInfo
public string get_Id()
public void set_Id(string value)
public KeyInfo get_KeyInfo()
public void set_KeyInfo(KeyInfo value)
public IList get_ObjectList()
public void set_ObjectList(IList value)
public Byte[] get_SignatureValue()
public void set_SignatureValue(Byte[] value)
public SignedInfo get_SignedInfo()
public void set_SignedInfo(SignedInfo value)
public void AddObject(DataObject dataObject)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
private string GetAttribute(XmlElement xel, string attribute)
public void LoadXml(XmlElement value)
private int NextElementPos(XmlNodeList nl, int pos, string name, string ns, bool required)
}
public System.Security.Cryptography.Xml.SignedInfo : object {
private ArrayList references
private string c14nMethod
private string id
private string signatureMethod
private string signatureLength
private XmlElement element
public string CanonicalizationMethod
public Transform CanonicalizationMethodObject
public int Count
public string Id
public bool IsReadOnly
public bool IsSynchronized
public ArrayList References
public string SignatureLength
public string SignatureMethod
public object SyncRoot
public string get_CanonicalizationMethod()
public void set_CanonicalizationMethod(string value)
public Transform get_CanonicalizationMethodObject()
public int get_Count()
public string get_Id()
public void set_Id(string value)
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public ArrayList get_References()
public string get_SignatureLength()
public void set_SignatureLength(string value)
public string get_SignatureMethod()
public void set_SignatureMethod(string value)
public object get_SyncRoot()
public void AddReference(Reference reference)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public XmlElement GetXml()
private string GetAttribute(XmlElement xel, string attribute)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.SignedXml : object {
public string XmlDsigNamespaceUrl
public string XmlDsigMinimalCanonicalizationUrl
public string XmlDsigCanonicalizationUrl
public string XmlDsigCanonicalizationWithCommentsUrl
public string XmlDsigSHA1Url
public string XmlDsigDSAUrl
public string XmlDsigRSASHA1Url
public string XmlDsigHMACSHA1Url
public string XmlDsigSHA256Url
public string XmlDsigRSASHA256Url
public string XmlDsigSHA384Url
public string XmlDsigRSASHA384Url
public string XmlDsigSHA512Url
public string XmlDsigRSASHA512Url
public string XmlDsigC14NTransformUrl
public string XmlDsigC14NWithCommentsTransformUrl
public string XmlDsigExcC14NTransformUrl
public string XmlDsigExcC14NWithCommentsTransformUrl
public string XmlDsigBase64TransformUrl
public string XmlDsigXPathTransformUrl
public string XmlDsigXsltTransformUrl
public string XmlDsigEnvelopedSignatureTransformUrl
public string XmlDecryptionTransformUrl
public string XmlLicenseTransformUrl
private EncryptedXml encryptedXml
protected Signature m_signature
private AsymmetricAlgorithm key
protected string m_strSigningKeyName
private XmlDocument envdoc
private IEnumerator pkEnumerator
private XmlElement signatureElement
private Hashtable hashes
internal XmlResolver _xmlResolver
private bool _bResolverSet
internal XmlElement _context
private ArrayList manifests
private IEnumerator _x509Enumerator
private Char[] whitespaceChars
public EncryptedXml EncryptedXml
public KeyInfo KeyInfo
public Signature Signature
public string SignatureLength
public string SignatureMethod
public Byte[] SignatureValue
public SignedInfo SignedInfo
public AsymmetricAlgorithm SigningKey
public string SigningKeyName
public XmlResolver Resolver
internal bool ResolverSet
public Collection`1<string> SafeCanonicalizationMethods
public Func`2<SignedXml, bool> SignatureFormatValidator
public void .ctor(XmlDocument document)
public void .ctor(XmlElement elem)
public EncryptedXml get_EncryptedXml()
public void set_EncryptedXml(EncryptedXml value)
public KeyInfo get_KeyInfo()
public void set_KeyInfo(KeyInfo value)
public Signature get_Signature()
public string get_SignatureLength()
public string get_SignatureMethod()
public Byte[] get_SignatureValue()
public SignedInfo get_SignedInfo()
public AsymmetricAlgorithm get_SigningKey()
public void set_SigningKey(AsymmetricAlgorithm value)
public string get_SigningKeyName()
public void set_SigningKeyName(string value)
public void set_Resolver(XmlResolver value)
internal bool get_ResolverSet()
public void AddObject(DataObject dataObject)
public void AddReference(Reference reference)
private Stream ApplyTransform(Transform t, XmlDocument input)
private Stream CanonicalizeOutput(object obj)
private XmlDocument GetManifest(Reference r)
private void FixupNamespaceNodes(XmlElement src, XmlElement dst, bool ignoreDefault)
private Byte[] GetReferenceHash(Reference r, bool check_hmac)
private void DigestReferences()
private Transform GetC14NMethod()
private Stream SignedInfoTransformed()
private HashAlgorithm GetHash(string algorithm, bool check_hmac)
public bool CheckSignature()
private bool CheckReferenceIntegrity(ArrayList referenceList)
public bool CheckSignature(AsymmetricAlgorithm key)
private AsymmetricAlgorithm CheckSignatureInternal(AsymmetricAlgorithm key)
private bool CheckSignatureWithKey(AsymmetricAlgorithm key)
private bool Compare(Byte[] expected, Byte[] actual)
public bool CheckSignature(KeyedHashAlgorithm macAlg)
public bool CheckSignature(X509Certificate2 certificate, bool verifySignatureOnly)
public bool CheckSignatureReturningKey(AsymmetricAlgorithm& signingKey)
public void ComputeSignature()
public void ComputeSignature(KeyedHashAlgorithm macAlg)
public XmlElement GetIdElement(XmlDocument document, string idValue)
internal XmlElement DefaultGetIdElement(XmlDocument document, string idValue)
private XmlElement GetSingleReferenceTarget(XmlDocument document, string idAttributeName, string idValue)
protected AsymmetricAlgorithm GetPublicKey()
public XmlElement GetXml()
public void LoadXml(XmlElement value)
public Collection`1<string> get_SafeCanonicalizationMethods()
public Func`2<SignedXml, bool> get_SignatureFormatValidator()
public void set_SignatureFormatValidator(Func`2<SignedXml, bool> value)
}
internal System.Security.Cryptography.Xml.SignedXmlDebugLog : object {
private string NullString
private TraceSource s_traceSource
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_haveVerboseLogging
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_verboseLogging
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_haveInformationLogging
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_informationLogging
private bool InformationLoggingEnabled
private bool VerboseLoggingEnabled
private bool get_InformationLoggingEnabled()
private bool get_VerboseLoggingEnabled()
private string FormatBytes(Byte[] bytes)
private string GetKeyName(object key)
private string GetObjectId(object o)
private string GetOidName(Oid oid)
internal void LogBeginCanonicalization(SignedXml signedXml, Transform canonicalizationTransform)
internal void LogBeginCheckSignatureFormat(SignedXml signedXml, Func`2<SignedXml, bool> formatValidator)
internal void LogBeginCheckSignedInfo(SignedXml signedXml, SignedInfo signedInfo)
internal void LogBeginSignatureComputation(SignedXml signedXml, XmlElement context)
internal void LogBeginSignatureVerification(SignedXml signedXml, XmlElement context)
internal void LogCanonicalizedOutput(SignedXml signedXml, Transform canonicalizationTransform)
internal void LogFormatValidationResult(SignedXml signedXml, bool result)
internal void LogUnsafeCanonicalizationMethod(SignedXml signedXml, string algorithm, IEnumerable`1<string> validAlgorithms)
internal void LogUnsafeTransformMethod(SignedXml signedXml, string algorithm, IEnumerable`1<string> validC14nAlgorithms, IEnumerable`1<string> validTransformAlgorithms)
internal void LogNamespacePropagation(SignedXml signedXml, XmlNodeList namespaces)
internal Stream LogReferenceData(Reference reference, Stream data)
internal void LogSigning(SignedXml signedXml, object key, SignatureDescription signatureDescription, HashAlgorithm hash, AsymmetricSignatureFormatter asymmetricSignatureFormatter)
internal void LogSigning(SignedXml signedXml, KeyedHashAlgorithm key)
internal void LogSigningReference(SignedXml signedXml, Reference reference)
internal void LogVerificationFailure(SignedXml signedXml, string failureLocation)
internal void LogVerificationResult(SignedXml signedXml, object key, bool verified)
internal void LogVerifyKeyUsage(SignedXml signedXml, X509Certificate certificate, X509KeyUsageExtension keyUsages)
internal void LogVerifyReference(SignedXml signedXml, Reference reference)
internal void LogVerifyReferenceHash(SignedXml signedXml, Reference reference, Byte[] actualHash, Byte[] expectedHash)
internal void LogVerifySignedInfo(SignedXml signedXml, AsymmetricAlgorithm key, SignatureDescription signatureDescription, HashAlgorithm hashAlgorithm, AsymmetricSignatureDeformatter asymmetricSignatureDeformatter, Byte[] actualHashValue, Byte[] signatureValue)
internal void LogVerifySignedInfo(SignedXml signedXml, KeyedHashAlgorithm mac, Byte[] actualHashValue, Byte[] signatureValue)
internal void LogVerifyX509Chain(SignedXml signedXml, X509Chain chain, X509Certificate certificate)
internal void LogSignedXmlRecursionLimit(SignedXml signedXml, Reference reference)
private void WriteLine(object source, TraceEventType eventType, SignedXmlDebugEvent eventId, string data)
}
internal System.Security.Cryptography.Xml.SymmetricKeyWrap : object {
private Byte[] s_rgbTripleDES_KW_IV
private Byte[] s_rgbAES_KW_IV
internal Byte[] TripleDESKeyWrapEncrypt(Byte[] rgbKey, Byte[] rgbWrappedKeyData)
internal Byte[] TripleDESKeyWrapDecrypt(Byte[] rgbKey, Byte[] rgbEncryptedWrappedKeyData)
internal Byte[] AESKeyWrapEncrypt(Byte[] rgbKey, Byte[] rgbWrappedKeyData)
internal Byte[] AESKeyWrapDecrypt(Byte[] rgbKey, Byte[] rgbEncryptedWrappedKeyData)
}
public System.Security.Cryptography.Xml.Transform : object {
private string _algorithm
private string _baseUri
internal XmlResolver _xmlResolver
private bool _bResolverSet
private SignedXml _signedXml
private Reference _reference
private Hashtable _propagatedNamespaces
private XmlElement _context
internal string BaseURI
internal SignedXml SignedXml
internal Reference Reference
public string Algorithm
public XmlResolver Resolver
internal bool ResolverSet
public Type[] InputTypes
public Type[] OutputTypes
public XmlElement Context
public Hashtable PropagatedNamespaces
internal string get_BaseURI()
internal void set_BaseURI(string value)
internal SignedXml get_SignedXml()
internal void set_SignedXml(SignedXml value)
internal Reference get_Reference()
internal void set_Reference(Reference value)
public string get_Algorithm()
public void set_Algorithm(string value)
public void set_Resolver(XmlResolver value)
internal XmlResolver get_Resolver()
internal bool get_ResolverSet()
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
internal bool AcceptsType(Type inputType)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
internal XmlElement GetXml(XmlDocument document, string name)
public void LoadInnerXml(XmlNodeList nodeList)
protected XmlNodeList GetInnerXml()
public void LoadInput(object obj)
public object GetOutput()
public object GetOutput(Type type)
public Byte[] GetDigestedOutput(HashAlgorithm hash)
public XmlElement get_Context()
public void set_Context(XmlElement value)
public Hashtable get_PropagatedNamespaces()
}
public System.Security.Cryptography.Xml.TransformChain : object {
private ArrayList _transforms
public int Count
public Transform Item
public void Add(Transform transform)
public IEnumerator GetEnumerator()
public int get_Count()
public Transform get_Item(int index)
internal Stream TransformToOctetStream(object inputObject, Type inputType, XmlResolver resolver, string baseUri)
internal Stream TransformToOctetStream(Stream input, XmlResolver resolver, string baseUri)
internal Stream TransformToOctetStream(XmlDocument document, XmlResolver resolver, string baseUri)
internal XmlElement GetXml(XmlDocument document, string ns)
internal void LoadXml(XmlElement value)
}
internal System.Security.Cryptography.Xml.Utils : object {
internal int MaxCharactersInDocument
internal long MaxCharactersFromEntities
internal int XmlDsigSearchDepth
private Char[] s_hexValues
private bool HasNamespace(XmlElement element, string prefix, string value)
internal bool IsCommittedNamespace(XmlElement element, string prefix, string value)
internal bool IsRedundantNamespace(XmlElement element, string prefix, string value)
internal string GetAttribute(XmlElement element, string localName, string namespaceURI)
internal bool HasAttribute(XmlElement element, string localName, string namespaceURI)
internal bool IsNamespaceNode(XmlNode n)
internal bool IsXmlNamespaceNode(XmlNode n)
internal bool IsDefaultNamespaceNode(XmlNode n)
internal bool IsEmptyDefaultNamespaceNode(XmlNode n)
internal string GetNamespacePrefix(XmlAttribute a)
internal bool HasNamespacePrefix(XmlAttribute a, string nsPrefix)
internal bool IsNonRedundantNamespaceDecl(XmlAttribute a, XmlAttribute nearestAncestorWithSamePrefix)
internal bool IsXmlPrefixDefinitionNode(XmlAttribute a)
internal string DiscardWhiteSpaces(string inputBuffer)
internal string DiscardWhiteSpaces(string inputBuffer, int inputOffset, int inputCount)
internal void SBReplaceCharWithString(StringBuilder sb, char oldChar, string newString)
internal XmlReader PreProcessStreamInput(Stream inputStream, XmlResolver xmlResolver, string baseUri)
internal XmlReaderSettings GetSecureXmlReaderSettings(XmlResolver xmlResolver)
internal XmlDocument PreProcessDocumentInput(XmlDocument document, XmlResolver xmlResolver, string baseUri)
internal XmlDocument PreProcessElementInput(XmlElement elem, XmlResolver xmlResolver, string baseUri)
internal XmlDocument DiscardComments(XmlDocument document)
internal XmlNodeList AllDescendantNodes(XmlNode node, bool includeComments)
internal bool NodeInList(XmlNode node, XmlNodeList nodeList)
internal string GetIdFromLocalUri(string uri, Boolean& discardComments)
internal string ExtractIdFromLocalUri(string uri)
internal void RemoveAllChildren(XmlElement inputElement)
internal long Pump(Stream input, Stream output)
internal Hashtable TokenizePrefixListString(string s)
internal string EscapeWhitespaceData(string data)
internal string EscapeTextData(string data)
internal string EscapeCData(string data)
internal string EscapeAttributeValue(string value)
internal XmlDocument GetOwnerDocument(XmlNodeList nodeList)
internal void AddNamespaces(XmlElement elem, CanonicalXmlNodeList namespaces)
internal void AddNamespaces(XmlElement elem, Hashtable namespaces)
internal CanonicalXmlNodeList GetPropagatedAttributes(XmlElement elem)
internal Byte[] ConvertIntToByteArray(int dwInput)
internal int ConvertByteArrayToInt(Byte[] input)
internal int GetHexArraySize(Byte[] hex)
internal X509Certificate2Collection BuildBagOfCerts(KeyInfoX509Data keyInfoX509Data, CertUsageType certUsageType)
internal string EncodeHexString(Byte[] sArray)
internal string EncodeHexString(Byte[] sArray, UInt32 start, UInt32 end)
internal Byte[] DecodeHexString(string s)
internal byte HexToByte(char val)
internal bool IsSelfSigned(X509Chain chain)
internal AsymmetricAlgorithm GetAnyPublicKey(X509Certificate2 certificate)
}
public System.Security.Cryptography.Xml.X509IssuerSerial : ValueType {
private string _issuerName
private string _serialNumber
public string IssuerName
public string SerialNumber
internal void .ctor(string issuer, string serial)
public string get_IssuerName()
public void set_IssuerName(string value)
public string get_SerialNumber()
public void set_SerialNumber(string value)
}
public System.Security.Cryptography.Xml.XmlDecryptionTransform : Transform {
private Type[] _inputTypes
private Type[] _outputTypes
private XmlNodeList _encryptedDataList
private ArrayList _arrayListUri
private EncryptedXml _exml
private XmlDocument _containingDocument
private XmlNamespaceManager _nsm
private string XmlDecryptionTransformNamespaceUrl
private ArrayList ExceptUris
public EncryptedXml EncryptedXml
public Type[] InputTypes
public Type[] OutputTypes
private ArrayList get_ExceptUris()
protected bool IsTargetElement(XmlElement inputElement, string idValue)
public EncryptedXml get_EncryptedXml()
public void set_EncryptedXml(EncryptedXml value)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public void AddExceptUri(string uri)
public void LoadInnerXml(XmlNodeList nodeList)
protected XmlNodeList GetInnerXml()
public void LoadInput(object obj)
private void LoadStreamInput(Stream stream)
private void LoadXmlDocumentInput(XmlDocument document)
private void ReplaceEncryptedData(XmlElement encryptedDataElement, Byte[] decrypted)
private bool ProcessEncryptedDataItem(XmlElement encryptedDataElement)
private void ProcessElementRecursively(XmlNodeList encryptedDatas)
public object GetOutput()
public object GetOutput(Type type)
}
public System.Security.Cryptography.Xml.XmlDsigBase64Transform : Transform {
private Type[] _inputTypes
private Type[] _outputTypes
private CryptoStream _cs
public Type[] InputTypes
public Type[] OutputTypes
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public void LoadInnerXml(XmlNodeList nodeList)
protected XmlNodeList GetInnerXml()
public void LoadInput(object obj)
private void LoadStreamInput(Stream inputStream)
private void LoadXmlNodeListInput(XmlNodeList nodeList)
public object GetOutput()
public object GetOutput(Type type)
}
public System.Security.Cryptography.Xml.XmlDsigC14NTransform : Transform {
private Type[] _inputTypes
private Type[] _outputTypes
private CanonicalXml _cXml
private bool _includeComments
public Type[] InputTypes
public Type[] OutputTypes
public void .ctor(bool includeComments)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public void LoadInnerXml(XmlNodeList nodeList)
protected XmlNodeList GetInnerXml()
public void LoadInput(object obj)
public object GetOutput()
public object GetOutput(Type type)
public Byte[] GetDigestedOutput(HashAlgorithm hash)
}
public System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform : Transform {
private Type[] _inputTypes
private Type[] _outputTypes
private XmlNodeList _inputNodeList
private bool _includeComments
private XmlNamespaceManager _nsm
private XmlDocument _containingDocument
private int _signaturePosition
internal int SignaturePosition
public Type[] InputTypes
public Type[] OutputTypes
internal void set_SignaturePosition(int value)
public void .ctor(bool includeComments)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public void LoadInnerXml(XmlNodeList nodeList)
protected XmlNodeList GetInnerXml()
public void LoadInput(object obj)
private void LoadStreamInput(Stream stream)
private void LoadXmlNodeListInput(XmlNodeList nodeList)
private void LoadXmlDocumentInput(XmlDocument doc)
public object GetOutput()
public object GetOutput(Type type)
}
public System.Security.Cryptography.Xml.XmlDsigExcC14NTransform : Transform {
private Type[] _inputTypes
private Type[] _outputTypes
private bool _includeComments
private string _inclusiveNamespacesPrefixList
private ExcCanonicalXml _excCanonicalXml
public string InclusiveNamespacesPrefixList
public Type[] InputTypes
public Type[] OutputTypes
public void .ctor(bool includeComments)
public void .ctor(string inclusiveNamespacesPrefixList)
public void .ctor(bool includeComments, string inclusiveNamespacesPrefixList)
public string get_InclusiveNamespacesPrefixList()
public void set_InclusiveNamespacesPrefixList(string value)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
protected XmlNodeList GetInnerXml()
public object GetOutput()
public object GetOutput(Type type)
public Byte[] GetDigestedOutput(HashAlgorithm hash)
}
public System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform : XmlDsigExcC14NTransform {
public void .ctor(string inclusiveNamespacesPrefixList)
}
public System.Security.Cryptography.Xml.XmlDsigXPathTransform : Transform {
private Type[] _inputTypes
private Type[] _outputTypes
private string _xpathexpr
private XmlDocument _document
private XmlNamespaceManager _nsm
public Type[] InputTypes
public Type[] OutputTypes
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public void LoadInnerXml(XmlNodeList nodeList)
protected XmlNodeList GetInnerXml()
public void LoadInput(object obj)
private void LoadStreamInput(Stream stream)
private void LoadXmlNodeListInput(XmlNodeList nodeList)
private void LoadXmlDocumentInput(XmlDocument doc)
public object GetOutput()
public object GetOutput(Type type)
}
public System.Security.Cryptography.Xml.XmlDsigXsltTransform : Transform {
private Type[] _inputTypes
private Type[] _outputTypes
private XmlNodeList _xslNodes
private string _xslFragment
private Stream _inputStream
private bool _includeComments
public Type[] InputTypes
public Type[] OutputTypes
public void .ctor(bool includeComments)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public void LoadInnerXml(XmlNodeList nodeList)
protected XmlNodeList GetInnerXml()
public void LoadInput(object obj)
public object GetOutput()
public object GetOutput(Type type)
}
public System.Security.Cryptography.Xml.XmlLicenseTransform : Transform {
private Type[] _inputTypes
private Type[] _outputTypes
private XmlNamespaceManager _namespaceManager
private XmlDocument _license
private IRelDecryptor _relDecryptor
private string ElementIssuer
private string NamespaceUriCore
public Type[] InputTypes
public Type[] OutputTypes
public IRelDecryptor Decryptor
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public IRelDecryptor get_Decryptor()
public void set_Decryptor(IRelDecryptor value)
private void DecryptEncryptedGrants(XmlNodeList encryptedGrantList, IRelDecryptor decryptor)
protected XmlNodeList GetInnerXml()
public object GetOutput()
public object GetOutput(Type type)
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
}
internal System.Security.Cryptography.Xml.XmlSignature : object {
public string NamespaceURI
public string Prefix
public XmlElement GetChildElement(XmlElement xel, string element, string ns)
public string GetAttributeFromElement(XmlElement xel, string attribute, string element)
public XmlElement[] GetChildElements(XmlElement xel, string element)
}
public System.Security.Permissions.DataProtectionPermission : CodeAccessPermission {
private int version
private DataProtectionPermissionFlags _flags
public DataProtectionPermissionFlags Flags
public void .ctor(PermissionState state)
public void .ctor(DataProtectionPermissionFlags flag)
public DataProtectionPermissionFlags get_Flags()
public void set_Flags(DataProtectionPermissionFlags value)
public bool IsUnrestricted()
public IPermission Copy()
public IPermission Intersect(IPermission target)
public IPermission Union(IPermission target)
public bool IsSubsetOf(IPermission target)
public void FromXml(SecurityElement securityElement)
public SecurityElement ToXml()
private DataProtectionPermission Cast(IPermission target)
}
public System.Security.Permissions.DataProtectionPermissionAttribute : CodeAccessSecurityAttribute {
private DataProtectionPermissionFlags _flags
public DataProtectionPermissionFlags Flags
public bool ProtectData
public bool UnprotectData
public bool ProtectMemory
public bool UnprotectMemory
public void .ctor(SecurityAction action)
public DataProtectionPermissionFlags get_Flags()
public void set_Flags(DataProtectionPermissionFlags value)
public bool get_ProtectData()
public void set_ProtectData(bool value)
public bool get_UnprotectData()
public void set_UnprotectData(bool value)
public bool get_ProtectMemory()
public void set_ProtectMemory(bool value)
public bool get_UnprotectMemory()
public void set_UnprotectMemory(bool value)
public IPermission CreatePermission()
}
public System.Security.Permissions.DataProtectionPermissionFlags : Enum {
public int value__
public DataProtectionPermissionFlags NoFlags
public DataProtectionPermissionFlags ProtectData
public DataProtectionPermissionFlags UnprotectData
public DataProtectionPermissionFlags ProtectMemory
public DataProtectionPermissionFlags UnprotectMemory
public DataProtectionPermissionFlags AllFlags
}
internal System.Security.Permissions.PermissionHelper : object {
internal SecurityElement Element(Type type, int version)
internal PermissionState CheckPermissionState(PermissionState state, bool allowUnrestricted)
internal int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion)
internal bool IsUnrestricted(SecurityElement se)
internal void ThrowInvalidPermission(IPermission target, Type expected)
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
