internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string VsVersion
public string FxFileVersion
public string VsFileVersion
public string AssemblyI18N
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_Core
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
internal Mono.Security.Cryptography.ManagedProtection : object {
private RSA user
private RSA machine
public Byte[] Protect(Byte[] userData, Byte[] optionalEntropy, DataProtectionScope scope)
public Byte[] Unprotect(Byte[] encryptedData, Byte[] optionalEntropy, DataProtectionScope scope)
private RSA GetKey(DataProtectionScope scope)
}
internal Mono.Security.Cryptography.NativeDapiProtection : object {
private UInt32 CRYPTPROTECT_UI_FORBIDDEN
private UInt32 CRYPTPROTECT_LOCAL_MACHINE
private bool CryptProtectData(DATA_BLOB& pDataIn, string szDataDescr, DATA_BLOB& pOptionalEntropy, IntPtr pvReserved, CRYPTPROTECT_PROMPTSTRUCT& pPromptStruct, UInt32 dwFlags, DATA_BLOB& pDataOut)
private bool CryptUnprotectData(DATA_BLOB& pDataIn, string szDataDescr, DATA_BLOB& pOptionalEntropy, IntPtr pvReserved, CRYPTPROTECT_PROMPTSTRUCT& pPromptStruct, UInt32 dwFlags, DATA_BLOB& pDataOut)
private void ZeroMemory(IntPtr dest, int size)
public Byte[] Protect(Byte[] userData, Byte[] optionalEntropy, DataProtectionScope scope)
public Byte[] Unprotect(Byte[] encryptedData, Byte[] optionalEntropy, DataProtectionScope scope)
}
internal Mono.Xml.XmlCanonicalizer : object {
private bool comments
private bool exclusive
private string inclusiveNamespacesPrefixList
private XmlNodeList xnl
private StringBuilder res
private XmlCanonicalizerState state
private ArrayList visibleNamespaces
private int prevVisibleNamespacesStart
private int prevVisibleNamespacesEnd
private Hashtable propagatedNss
public string InclusiveNamespacesPrefixList
public void .ctor(bool withComments, bool excC14N, Hashtable propagatedNamespaces)
private void Initialize()
public Stream Canonicalize(XmlDocument doc)
public Stream Canonicalize(XmlNodeList nodes)
public string get_InclusiveNamespacesPrefixList()
public void set_InclusiveNamespacesPrefixList(string value)
private XmlAttribute CreateXmlns(XmlNode n)
private void FillMissingPrefixes(XmlNode n, XmlNamespaceManager nsmgr, ArrayList tmpList)
private void WriteNode(XmlNode node)
private void WriteDocumentNode(XmlNode node)
private void WriteElementNode(XmlNode node, bool visible)
private void WriteNamespacesAxis(XmlNode node, bool visible)
private void WriteAttributesAxis(XmlNode node)
private void WriteTextNode(XmlNode node, bool visible)
private void WriteCommentNode(XmlNode node, bool visible)
private void WriteProcessingInstructionNode(XmlNode node, bool visible)
private bool IsNodeVisible(XmlNode node)
private bool IsVisiblyUtilized(XmlElement owner, XmlAttribute ns)
private bool IsNamespaceRendered(string prefix, string uri)
private bool IsNamespaceNode(XmlNode node)
private bool IsTextNode(XmlNodeType type)
private string NormalizeString(string input, XmlNodeType type)
}
internal Mono.Xml.XmlDsigC14NTransformAttributesComparer : object {
public int Compare(object x, object y)
}
internal Mono.Xml.XmlDsigC14NTransformNamespacesComparer : object {
public int Compare(object x, object y)
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
public System.Security.Cryptography.CryptographicAttributeObject : object {
private Oid _oid
private AsnEncodedDataCollection _list
public Oid Oid
public AsnEncodedDataCollection Values
public void .ctor(Oid oid)
public void .ctor(Oid oid, AsnEncodedDataCollection values)
public Oid get_Oid()
public AsnEncodedDataCollection get_Values()
}
public System.Security.Cryptography.CryptographicAttributeObjectCollection : object {
private ArrayList _list
public int Count
public bool IsSynchronized
public CryptographicAttributeObject Item
public object SyncRoot
public void .ctor(CryptographicAttributeObject attribute)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
public bool get_IsSynchronized()
public CryptographicAttributeObject get_Item(int index)
public object get_SyncRoot()
public int Add(AsnEncodedData asnEncodedData)
public int Add(CryptographicAttributeObject attribute)
public void CopyTo(CryptographicAttributeObject[] array, int index)
public CryptographicAttributeObjectEnumerator GetEnumerator()
public void Remove(CryptographicAttributeObject attribute)
}
public System.Security.Cryptography.CryptographicAttributeObjectEnumerator : object {
private IEnumerator enumerator
private object System.Collections.IEnumerator.Current
public CryptographicAttributeObject Current
internal void .ctor(IEnumerable enumerable)
private object System.Collections.IEnumerator.get_Current()
public CryptographicAttributeObject get_Current()
public bool MoveNext()
public void Reset()
}
public System.Security.Cryptography.DataProtectionScope : Enum {
public int value__
public DataProtectionScope CurrentUser
public DataProtectionScope LocalMachine
}
public System.Security.Cryptography.MemoryProtectionScope : Enum {
public int value__
public MemoryProtectionScope SameProcess
public MemoryProtectionScope CrossProcess
public MemoryProtectionScope SameLogon
}
public System.Security.Cryptography.Pkcs.AlgorithmIdentifier : object {
private Oid _oid
private int _length
private Byte[] _params
public int KeyLength
public Oid Oid
public Byte[] Parameters
public void .ctor(Oid algorithm)
public void .ctor(Oid algorithm, int keyLength)
public int get_KeyLength()
public void set_KeyLength(int value)
public Oid get_Oid()
public void set_Oid(Oid value)
public Byte[] get_Parameters()
public void set_Parameters(Byte[] value)
}
public System.Security.Cryptography.Pkcs.CmsRecipient : object {
private SubjectIdentifierType _recipient
private X509Certificate2 _certificate
public X509Certificate2 Certificate
public SubjectIdentifierType RecipientIdentifierType
public void .ctor(X509Certificate2 certificate)
public void .ctor(SubjectIdentifierType recipientIdentifierType, X509Certificate2 certificate)
public X509Certificate2 get_Certificate()
public SubjectIdentifierType get_RecipientIdentifierType()
}
public System.Security.Cryptography.Pkcs.CmsRecipientCollection : object {
private ArrayList _list
public int Count
public bool IsSynchronized
public CmsRecipient Item
public object SyncRoot
public void .ctor(CmsRecipient recipient)
public void .ctor(SubjectIdentifierType recipientIdentifierType, X509Certificate2Collection certificates)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
public bool get_IsSynchronized()
public CmsRecipient get_Item(int index)
public object get_SyncRoot()
public int Add(CmsRecipient recipient)
public void CopyTo(Array array, int index)
public void CopyTo(CmsRecipient[] array, int index)
public CmsRecipientEnumerator GetEnumerator()
public void Remove(CmsRecipient recipient)
}
public System.Security.Cryptography.Pkcs.CmsRecipientEnumerator : object {
private IEnumerator enumerator
private object System.Collections.IEnumerator.Current
public CmsRecipient Current
internal void .ctor(IEnumerable enumerable)
private object System.Collections.IEnumerator.get_Current()
public CmsRecipient get_Current()
public bool MoveNext()
public void Reset()
}
public System.Security.Cryptography.Pkcs.CmsSigner : object {
private SubjectIdentifierType _signer
private X509Certificate2 _certificate
private X509Certificate2Collection _coll
private Oid _digest
private X509IncludeOption _options
private CryptographicAttributeObjectCollection _signed
private CryptographicAttributeObjectCollection _unsigned
public CryptographicAttributeObjectCollection SignedAttributes
public X509Certificate2 Certificate
public X509Certificate2Collection Certificates
public Oid DigestAlgorithm
public X509IncludeOption IncludeOption
public SubjectIdentifierType SignerIdentifierType
public CryptographicAttributeObjectCollection UnsignedAttributes
public void .ctor(SubjectIdentifierType signerIdentifierType)
public void .ctor(SubjectIdentifierType signerIdentifierType, X509Certificate2 certificate)
public void .ctor(X509Certificate2 certificate)
public void .ctor(CspParameters parameters)
public CryptographicAttributeObjectCollection get_SignedAttributes()
public X509Certificate2 get_Certificate()
public void set_Certificate(X509Certificate2 value)
public X509Certificate2Collection get_Certificates()
public Oid get_DigestAlgorithm()
public void set_DigestAlgorithm(Oid value)
public X509IncludeOption get_IncludeOption()
public void set_IncludeOption(X509IncludeOption value)
public SubjectIdentifierType get_SignerIdentifierType()
public void set_SignerIdentifierType(SubjectIdentifierType value)
public CryptographicAttributeObjectCollection get_UnsignedAttributes()
}
public System.Security.Cryptography.Pkcs.ContentInfo : object {
private Oid _oid
private Byte[] _content
private Dictionary`2<string, int> <>f__switch$map0
public Byte[] Content
public Oid ContentType
public void .ctor(Byte[] content)
public void .ctor(Oid oid, Byte[] content)
protected void Finalize()
public Byte[] get_Content()
public Oid get_ContentType()
public Oid GetContentType(Byte[] encodedMessage)
}
public System.Security.Cryptography.Pkcs.EnvelopedCms : object {
private ContentInfo _content
private AlgorithmIdentifier _identifier
private X509Certificate2Collection _certs
private RecipientInfoCollection _recipients
private CryptographicAttributeObjectCollection _uattribs
private SubjectIdentifierType _idType
private int _version
public X509Certificate2Collection Certificates
public AlgorithmIdentifier ContentEncryptionAlgorithm
public ContentInfo ContentInfo
public RecipientInfoCollection RecipientInfos
public CryptographicAttributeObjectCollection UnprotectedAttributes
public int Version
public void .ctor(ContentInfo content)
public void .ctor(ContentInfo contentInfo, AlgorithmIdentifier encryptionAlgorithm)
public void .ctor(SubjectIdentifierType recipientIdentifierType, ContentInfo contentInfo)
public void .ctor(SubjectIdentifierType recipientIdentifierType, ContentInfo contentInfo, AlgorithmIdentifier encryptionAlgorithm)
public X509Certificate2Collection get_Certificates()
public AlgorithmIdentifier get_ContentEncryptionAlgorithm()
public ContentInfo get_ContentInfo()
public RecipientInfoCollection get_RecipientInfos()
public CryptographicAttributeObjectCollection get_UnprotectedAttributes()
public int get_Version()
private X509IssuerSerial GetIssuerSerial(string issuer, Byte[] serial)
public void Decode(Byte[] encodedMessage)
public void Decrypt()
public void Decrypt(RecipientInfo recipientInfo)
public void Decrypt(RecipientInfo recipientInfo, X509Certificate2Collection extraStore)
public void Decrypt(X509Certificate2Collection extraStore)
public Byte[] Encode()
public void Encrypt()
public void Encrypt(CmsRecipient recipient)
public void Encrypt(CmsRecipientCollection recipients)
}
public System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice : Enum {
public int value__
public KeyAgreeKeyChoice Unknown
public KeyAgreeKeyChoice EphemeralKey
public KeyAgreeKeyChoice StaticKey
}
public System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo : RecipientInfo {
public DateTime Date
public Byte[] EncryptedKey
public AlgorithmIdentifier KeyEncryptionAlgorithm
public SubjectIdentifierOrKey OriginatorIdentifierOrKey
public CryptographicAttributeObject OtherKeyAttribute
public SubjectIdentifier RecipientIdentifier
public int Version
public DateTime get_Date()
public Byte[] get_EncryptedKey()
public AlgorithmIdentifier get_KeyEncryptionAlgorithm()
public SubjectIdentifierOrKey get_OriginatorIdentifierOrKey()
public CryptographicAttributeObject get_OtherKeyAttribute()
public SubjectIdentifier get_RecipientIdentifier()
public int get_Version()
}
public System.Security.Cryptography.Pkcs.KeyTransRecipientInfo : RecipientInfo {
private Byte[] _encryptedKey
private AlgorithmIdentifier _keyEncryptionAlgorithm
private SubjectIdentifier _recipientIdentifier
private int _version
public Byte[] EncryptedKey
public AlgorithmIdentifier KeyEncryptionAlgorithm
public SubjectIdentifier RecipientIdentifier
public int Version
internal void .ctor(Byte[] encryptedKey, AlgorithmIdentifier keyEncryptionAlgorithm, SubjectIdentifier recipientIdentifier, int version)
public Byte[] get_EncryptedKey()
public AlgorithmIdentifier get_KeyEncryptionAlgorithm()
public SubjectIdentifier get_RecipientIdentifier()
public int get_Version()
}
public System.Security.Cryptography.Pkcs.Pkcs9AttributeObject : AsnEncodedData {
public Oid Oid
public void .ctor(AsnEncodedData asnEncodedData)
public void .ctor(Oid oid, Byte[] encodedData)
public void .ctor(string oid, Byte[] encodedData)
public Oid get_Oid()
internal void set_Oid(Oid value)
public void CopyFrom(AsnEncodedData asnEncodedData)
}
public System.Security.Cryptography.Pkcs.Pkcs9ContentType : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private Oid _contentType
private Byte[] _encoded
public Oid ContentType
internal void .ctor(string contentType)
internal void .ctor(Byte[] encodedContentType)
public Oid get_ContentType()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private string _desc
public string DocumentDescription
public void .ctor(string documentDescription)
public void .ctor(Byte[] encodedDocumentDescription)
public string get_DocumentDescription()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.Pkcs9DocumentName : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private string _name
public string DocumentName
public void .ctor(string documentName)
public void .ctor(Byte[] encodedDocumentName)
public string get_DocumentName()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.Pkcs9MessageDigest : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private Byte[] _messageDigest
private Byte[] _encoded
public Byte[] MessageDigest
internal void .ctor(Byte[] messageDigest, bool encoded)
public Byte[] get_MessageDigest()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.Pkcs9SigningTime : Pkcs9AttributeObject {
internal string oid
internal string friendlyName
private DateTime _signingTime
public DateTime SigningTime
public void .ctor(DateTime signingTime)
public void .ctor(Byte[] encodedSigningTime)
public DateTime get_SigningTime()
public void CopyFrom(AsnEncodedData asnEncodedData)
internal void Decode(Byte[] attribute)
internal Byte[] Encode()
}
public System.Security.Cryptography.Pkcs.PublicKeyInfo : object {
private AlgorithmIdentifier _algorithm
private Byte[] _key
public AlgorithmIdentifier Algorithm
public Byte[] KeyValue
internal void .ctor(AlgorithmIdentifier algorithm, Byte[] key)
public AlgorithmIdentifier get_Algorithm()
public Byte[] get_KeyValue()
}
public System.Security.Cryptography.Pkcs.RecipientInfo : object {
private RecipientInfoType _type
public Byte[] EncryptedKey
public AlgorithmIdentifier KeyEncryptionAlgorithm
public SubjectIdentifier RecipientIdentifier
public RecipientInfoType Type
public int Version
internal void .ctor(RecipientInfoType recipInfoType)
public Byte[] get_EncryptedKey()
public AlgorithmIdentifier get_KeyEncryptionAlgorithm()
public SubjectIdentifier get_RecipientIdentifier()
public RecipientInfoType get_Type()
public int get_Version()
}
public System.Security.Cryptography.Pkcs.RecipientInfoCollection : object {
private ArrayList _list
public int Count
public bool IsSynchronized
public RecipientInfo Item
public object SyncRoot
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
public bool get_IsSynchronized()
public RecipientInfo get_Item(int index)
public object get_SyncRoot()
internal int Add(RecipientInfo ri)
public void CopyTo(Array array, int index)
public void CopyTo(RecipientInfo[] array, int index)
public RecipientInfoEnumerator GetEnumerator()
}
public System.Security.Cryptography.Pkcs.RecipientInfoEnumerator : object {
private IEnumerator enumerator
private object System.Collections.IEnumerator.Current
public RecipientInfo Current
internal void .ctor(IEnumerable enumerable)
private object System.Collections.IEnumerator.get_Current()
public RecipientInfo get_Current()
public bool MoveNext()
public void Reset()
}
public System.Security.Cryptography.Pkcs.RecipientInfoType : Enum {
public int value__
public RecipientInfoType Unknown
public RecipientInfoType KeyTransport
public RecipientInfoType KeyAgreement
}
public System.Security.Cryptography.Pkcs.SignedCms : object {
private ContentInfo _content
private bool _detached
private SignerInfoCollection _info
private X509Certificate2Collection _certs
private SubjectIdentifierType _type
private int _version
public X509Certificate2Collection Certificates
public ContentInfo ContentInfo
public bool Detached
public SignerInfoCollection SignerInfos
public int Version
public void .ctor(ContentInfo content)
public void .ctor(ContentInfo content, bool detached)
public void .ctor(SubjectIdentifierType signerIdentifierType)
public void .ctor(SubjectIdentifierType signerIdentifierType, ContentInfo content)
public void .ctor(SubjectIdentifierType signerIdentifierType, ContentInfo content, bool detached)
public X509Certificate2Collection get_Certificates()
public ContentInfo get_ContentInfo()
public bool get_Detached()
public SignerInfoCollection get_SignerInfos()
public int get_Version()
public void CheckSignature(bool verifySignatureOnly)
public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly)
public void CheckHash()
public void ComputeSignature()
public void ComputeSignature(CmsSigner signer)
public void ComputeSignature(CmsSigner signer, bool silent)
private string ToString(Byte[] array, bool reverse)
private Byte[] GetKeyIdentifier(X509Certificate x509)
public void Decode(Byte[] encodedMessage)
public Byte[] Encode()
public void RemoveSignature(SignerInfo signerInfo)
public void RemoveSignature(int index)
}
public System.Security.Cryptography.Pkcs.SignerInfo : object {
private SubjectIdentifier _signer
private X509Certificate2 _certificate
private Oid _digest
private SignerInfoCollection _counter
private CryptographicAttributeObjectCollection _signed
private CryptographicAttributeObjectCollection _unsigned
private int _version
public CryptographicAttributeObjectCollection SignedAttributes
public X509Certificate2 Certificate
public SignerInfoCollection CounterSignerInfos
public Oid DigestAlgorithm
public SubjectIdentifier SignerIdentifier
public CryptographicAttributeObjectCollection UnsignedAttributes
public int Version
internal void .ctor(string hashName, X509Certificate2 certificate, SubjectIdentifierType type, object o, int version)
public CryptographicAttributeObjectCollection get_SignedAttributes()
public X509Certificate2 get_Certificate()
public SignerInfoCollection get_CounterSignerInfos()
public Oid get_DigestAlgorithm()
public SubjectIdentifier get_SignerIdentifier()
public CryptographicAttributeObjectCollection get_UnsignedAttributes()
public int get_Version()
public void CheckHash()
public void CheckSignature(bool verifySignatureOnly)
public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly)
public void ComputeCounterSignature()
public void ComputeCounterSignature(CmsSigner signer)
public void RemoveCounterSignature(SignerInfo counterSignerInfo)
public void RemoveCounterSignature(int index)
}
public System.Security.Cryptography.Pkcs.SignerInfoCollection : object {
private ArrayList _list
public int Count
public bool IsSynchronized
public SignerInfo Item
public object SyncRoot
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
public bool get_IsSynchronized()
public SignerInfo get_Item(int index)
public object get_SyncRoot()
internal void Add(SignerInfo signer)
public void CopyTo(Array array, int index)
public void CopyTo(SignerInfo[] array, int index)
public SignerInfoEnumerator GetEnumerator()
}
public System.Security.Cryptography.Pkcs.SignerInfoEnumerator : object {
private IEnumerator enumerator
private object System.Collections.IEnumerator.Current
public SignerInfo Current
internal void .ctor(IEnumerable enumerable)
private object System.Collections.IEnumerator.get_Current()
public SignerInfo get_Current()
public bool MoveNext()
public void Reset()
}
public System.Security.Cryptography.Pkcs.SubjectIdentifier : object {
private SubjectIdentifierType _type
private object _value
public SubjectIdentifierType Type
public object Value
internal void .ctor(SubjectIdentifierType type, object value)
public SubjectIdentifierType get_Type()
public object get_Value()
}
public System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey : object {
private SubjectIdentifierOrKeyType _type
private object _value
public SubjectIdentifierOrKeyType Type
public object Value
internal void .ctor(SubjectIdentifierOrKeyType type, object value)
public SubjectIdentifierOrKeyType get_Type()
public object get_Value()
}
public System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType : Enum {
public int value__
public SubjectIdentifierOrKeyType Unknown
public SubjectIdentifierOrKeyType IssuerAndSerialNumber
public SubjectIdentifierOrKeyType SubjectKeyIdentifier
public SubjectIdentifierOrKeyType PublicKeyInfo
}
public System.Security.Cryptography.Pkcs.SubjectIdentifierType : Enum {
public int value__
public SubjectIdentifierType Unknown
public SubjectIdentifierType IssuerAndSerialNumber
public SubjectIdentifierType SubjectKeyIdentifier
public SubjectIdentifierType NoSignature
}
public System.Security.Cryptography.ProtectedData : object {
private DataProtectionImplementation impl
public Byte[] Protect(Byte[] userData, Byte[] optionalEntropy, DataProtectionScope scope)
public Byte[] Unprotect(Byte[] encryptedData, Byte[] optionalEntropy, DataProtectionScope scope)
private void Detect()
private void Check(DataProtectionScope scope)
}
public System.Security.Cryptography.ProtectedMemory : object {
private int BlockSize
private MemoryProtectionImplementation impl
public void Protect(Byte[] userData, MemoryProtectionScope scope)
public void Unprotect(Byte[] encryptedData, MemoryProtectionScope scope)
private void Detect()
private void Check(int size, MemoryProtectionScope scope)
private int RtlEncryptMemory(Byte[] pData, UInt32 cbData, UInt32 dwFlags)
private int RtlDecryptMemory(Byte[] pData, UInt32 cbData, UInt32 dwFlags)
private bool CryptProtectMemory(Byte[] pData, UInt32 cbData, UInt32 dwFlags)
private bool CryptUnprotectMemory(Byte[] pData, UInt32 cbData, UInt32 dwFlags)
}
public System.Security.Cryptography.X509Certificates.X509Certificate2UI : object {
public void DisplayCertificate(X509Certificate2 certificate)
public void DisplayCertificate(X509Certificate2 certificate, IntPtr hwndParent)
public X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag)
public X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag, IntPtr hwndParent)
}
public System.Security.Cryptography.X509Certificates.X509SelectionFlag : Enum {
public int value__
public X509SelectionFlag SingleSelection
public X509SelectionFlag MultiSelection
}
public System.Security.Cryptography.Xml.CipherData : object {
private Byte[] cipherValue
private CipherReference cipherReference
private Dictionary`2<string, int> <>f__switch$map1
public CipherReference CipherReference
public Byte[] CipherValue
public void .ctor(Byte[] cipherValue)
public void .ctor(CipherReference cipherReference)
public CipherReference get_CipherReference()
public void set_CipherReference(CipherReference value)
public Byte[] get_CipherValue()
public void set_CipherValue(Byte[] value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.CipherReference : EncryptedReference {
public void .ctor(string uri)
public void .ctor(string uri, TransformChain tc)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.DataObject : object {
private XmlElement element
private bool propertyModified
private Dictionary`2<string, int> <>f__switch$map4
public XmlNodeList Data
public string Encoding
public string Id
public string MimeType
public void .ctor(string id, string mimeType, string encoding, XmlElement data)
private void Build(string id, string mimeType, string encoding, XmlElement data)
public XmlNodeList get_Data()
public void set_Data(XmlNodeList value)
public string get_Encoding()
public void set_Encoding(string value)
public string get_Id()
public void set_Id(string value)
public string get_MimeType()
public void set_MimeType(string value)
private string GetField(string attribute)
private void SetField(string attribute, string value)
public XmlElement GetXml()
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.DataReference : EncryptedReference {
public void .ctor(string uri)
public void .ctor(string uri, TransformChain tc)
}
public System.Security.Cryptography.Xml.DSAKeyValue : KeyInfoClause {
private DSA dsa
public DSA Key
public void .ctor(DSA key)
public DSA get_Key()
public void set_Key(DSA value)
public XmlElement GetXml()
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptedData : EncryptedType {
private Dictionary`2<string, int> <>f__switch$map5
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptedKey : EncryptedType {
private string carriedKeyName
private string recipient
private ReferenceList referenceList
private Dictionary`2<string, int> <>f__switch$map6
private Dictionary`2<string, int> <>f__switch$map7
public string CarriedKeyName
public string Recipient
public ReferenceList ReferenceList
public string get_CarriedKeyName()
public void set_CarriedKeyName(string value)
public string get_Recipient()
public void set_Recipient(string value)
public ReferenceList get_ReferenceList()
public void AddReference(DataReference dataReference)
public void AddReference(KeyReference keyReference)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptedReference : object {
private bool cacheValid
private string referenceType
private string uri
private TransformChain tc
private Dictionary`2<string, int> <>f__switch$map2
private Dictionary`2<string, int> <>f__switch$map3
protected internal bool CacheValid
protected string ReferenceType
public TransformChain TransformChain
public string Uri
protected void .ctor(string uri)
protected void .ctor(string uri, TransformChain tc)
protected internal bool get_CacheValid()
protected string get_ReferenceType()
protected void set_ReferenceType(string value)
public TransformChain get_TransformChain()
public void set_TransformChain(TransformChain value)
public string get_Uri()
public void set_Uri(string value)
public void AddTransform(Transform transform)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptedType : object {
private CipherData cipherData
private string encoding
private EncryptionMethod encryptionMethod
private EncryptionPropertyCollection encryptionProperties
private string id
private KeyInfo keyInfo
private string mimeType
private string type
public CipherData CipherData
public string Encoding
public EncryptionMethod EncryptionMethod
public EncryptionPropertyCollection EncryptionProperties
public string Id
public KeyInfo KeyInfo
public string MimeType
public string Type
public CipherData get_CipherData()
public void set_CipherData(CipherData value)
public string get_Encoding()
public void set_Encoding(string value)
public EncryptionMethod get_EncryptionMethod()
public void set_EncryptionMethod(EncryptionMethod value)
public EncryptionPropertyCollection get_EncryptionProperties()
public string get_Id()
public void set_Id(string value)
public KeyInfo get_KeyInfo()
public void set_KeyInfo(KeyInfo value)
public string get_MimeType()
public void set_MimeType(string value)
public string get_Type()
public void set_Type(string value)
public void AddProperty(EncryptionProperty ep)
public XmlElement GetXml()
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptedXml : object {
public string XmlEncAES128KeyWrapUrl
public string XmlEncAES128Url
public string XmlEncAES192KeyWrapUrl
public string XmlEncAES192Url
public string XmlEncAES256KeyWrapUrl
public string XmlEncAES256Url
public string XmlEncDESUrl
public string XmlEncElementContentUrl
public string XmlEncElementUrl
public string XmlEncEncryptedKeyUrl
public string XmlEncNamespaceUrl
public string XmlEncRSA15Url
public string XmlEncRSAOAEPUrl
public string XmlEncSHA256Url
public string XmlEncSHA512Url
public string XmlEncTripleDESKeyWrapUrl
public string XmlEncTripleDESUrl
private Evidence documentEvidence
private Encoding encoding
internal Hashtable keyNameMapping
private CipherMode mode
private PaddingMode padding
private string recipient
private XmlResolver resolver
private XmlDocument document
private Dictionary`2<string, int> <>f__switch$map8
private Dictionary`2<string, int> <>f__switch$map9
public Evidence DocumentEvidence
public Encoding Encoding
public CipherMode Mode
public PaddingMode Padding
public string Recipient
public XmlResolver Resolver
public void .ctor(XmlDocument document)
public void .ctor(XmlDocument document, Evidence evidence)
public Evidence get_DocumentEvidence()
public void set_DocumentEvidence(Evidence value)
public Encoding get_Encoding()
public void set_Encoding(Encoding value)
public CipherMode get_Mode()
public void set_Mode(CipherMode value)
public PaddingMode get_Padding()
public void set_Padding(PaddingMode value)
public string get_Recipient()
public void set_Recipient(string value)
public XmlResolver get_Resolver()
public void set_Resolver(XmlResolver value)
public void AddKeyNameMapping(string keyName, object keyObject)
public void ClearKeyNameMappings()
public Byte[] DecryptData(EncryptedData encryptedData, SymmetricAlgorithm symAlg)
public void DecryptDocument()
public Byte[] DecryptEncryptedKey(EncryptedKey encryptedKey)
public Byte[] DecryptKey(Byte[] keyData, SymmetricAlgorithm symAlg)
public Byte[] DecryptKey(Byte[] keyData, RSA rsa, bool fOAEP)
public EncryptedData Encrypt(XmlElement inputElement, string keyName)
public EncryptedData Encrypt(XmlElement inputElement, X509Certificate2 certificate)
public Byte[] EncryptData(Byte[] plainText, SymmetricAlgorithm symAlg)
private Byte[] EncryptDataCore(Byte[] plainText, SymmetricAlgorithm symAlg)
public Byte[] EncryptData(XmlElement inputElement, SymmetricAlgorithm symAlg, bool content)
public Byte[] EncryptKey(Byte[] keyData, SymmetricAlgorithm symAlg)
public Byte[] EncryptKey(Byte[] keyData, RSA rsa, bool fOAEP)
private SymmetricAlgorithm GetAlgorithm(string symAlgUri)
private string GetAlgorithmUri(SymmetricAlgorithm symAlg)
private string GetKeyWrapAlgorithmUri(object keyAlg)
public Byte[] GetDecryptionIV(EncryptedData encryptedData, string symAlgUri)
public SymmetricAlgorithm GetDecryptionKey(EncryptedData encryptedData, string symAlgUri)
public XmlElement GetIdElement(XmlDocument document, string idValue)
public void ReplaceData(XmlElement inputElement, Byte[] decryptedData)
public void ReplaceElement(XmlElement inputElement, EncryptedData encryptedData, bool content)
private Byte[] Transform(Byte[] data, ICryptoTransform transform)
private Byte[] Transform(Byte[] data, ICryptoTransform transform, int blockOctetCount, bool trimPadding)
}
public System.Security.Cryptography.Xml.EncryptionMethod : object {
private string algorithm
private int keySize
private Dictionary`2<string, int> <>f__switch$mapA
public string KeyAlgorithm
public int KeySize
public void .ctor(string strAlgorithm)
public string get_KeyAlgorithm()
public void set_KeyAlgorithm(string value)
public int get_KeySize()
public void set_KeySize(int value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptionProperty : object {
private XmlElement elemProp
private string id
private string target
public string Id
public XmlElement PropertyElement
public string Target
public void .ctor(XmlElement elemProp)
public string get_Id()
public XmlElement get_PropertyElement()
public void set_PropertyElement(XmlElement value)
public string get_Target()
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.EncryptionPropertyCollection : object {
private ArrayList list
private object System.Collections.IList.Item
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public EncryptionProperty ItemOf
public object SyncRoot
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.Add(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public EncryptionProperty get_ItemOf(int index)
public void set_ItemOf(int index, EncryptionProperty value)
public object get_SyncRoot()
public int Add(EncryptionProperty value)
public void Clear()
public bool Contains(EncryptionProperty value)
public void CopyTo(Array array, int index)
public void CopyTo(EncryptionProperty[] array, int index)
public IEnumerator GetEnumerator()
public int IndexOf(EncryptionProperty value)
public void Insert(int index, EncryptionProperty value)
public EncryptionProperty Item(int index)
public void Remove(EncryptionProperty value)
public void RemoveAt(int index)
}
public System.Security.Cryptography.Xml.IRelDecryptor {
public Stream Decrypt(EncryptionMethod encryptionMethod, KeyInfo keyInfo, Stream toDecrypt)
}
public System.Security.Cryptography.Xml.KeyInfo : object {
private ArrayList Info
private string id
private Dictionary`2<string, int> <>f__switch$mapB
private Dictionary`2<string, int> <>f__switch$mapC
public int Count
public string Id
public int get_Count()
public string get_Id()
public void set_Id(string value)
public void AddClause(KeyInfoClause clause)
public IEnumerator GetEnumerator()
public IEnumerator GetEnumerator(Type requestedObjectType)
public XmlElement GetXml()
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.KeyInfoClause : object {
public XmlElement GetXml()
public void LoadXml(XmlElement element)
}
public System.Security.Cryptography.Xml.KeyInfoEncryptedKey : KeyInfoClause {
private EncryptedKey encryptedKey
public EncryptedKey EncryptedKey
public void .ctor(EncryptedKey ek)
public EncryptedKey get_EncryptedKey()
public void set_EncryptedKey(EncryptedKey value)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.KeyInfoName : KeyInfoClause {
private string name
public string Value
public void .ctor(string keyName)
public string get_Value()
public void set_Value(string value)
public XmlElement GetXml()
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.KeyInfoNode : KeyInfoClause {
private XmlElement Node
public XmlElement Value
public void .ctor(XmlElement node)
public XmlElement get_Value()
public void set_Value(XmlElement value)
public XmlElement GetXml()
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.KeyInfoRetrievalMethod : KeyInfoClause {
private string URI
private XmlElement element
private string type
public string Type
public string Uri
public void .ctor(string strUri)
public void .ctor(string strUri, string strType)
public string get_Type()
public void set_Type(string value)
public string get_Uri()
public void set_Uri(string value)
public XmlElement GetXml()
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.KeyInfoX509Data : KeyInfoClause {
private Byte[] x509crl
private ArrayList IssuerSerialList
private ArrayList SubjectKeyIdList
private ArrayList SubjectNameList
private ArrayList X509CertificateList
public ArrayList Certificates
public Byte[] CRL
public ArrayList IssuerSerials
public ArrayList SubjectKeyIds
public ArrayList SubjectNames
public void .ctor(Byte[] rgbCert)
public void .ctor(X509Certificate cert)
public void .ctor(X509Certificate cert, X509IncludeOption includeOption)
private void AddCertificatesChainFrom(X509Certificate cert, bool root)
public ArrayList get_Certificates()
public Byte[] get_CRL()
public void set_CRL(Byte[] value)
public ArrayList get_IssuerSerials()
public ArrayList get_SubjectKeyIds()
public ArrayList get_SubjectNames()
public void AddCertificate(X509Certificate certificate)
public void AddIssuerSerial(string issuerName, string serialNumber)
public void AddSubjectKeyId(Byte[] subjectKeyId)
public void AddSubjectKeyId(string subjectKeyId)
public void AddSubjectName(string subjectName)
public XmlElement GetXml()
public void LoadXml(XmlElement element)
}
public System.Security.Cryptography.Xml.KeyReference : EncryptedReference {
public void .ctor(string uri)
public void .ctor(string uri, TransformChain tc)
}
internal System.Security.Cryptography.Xml.Manifest : object {
private ArrayList references
private string id
private XmlElement element
public string Id
public ArrayList References
public void .ctor(XmlElement xel)
public string get_Id()
public void set_Id(string value)
public ArrayList get_References()
public void AddReference(Reference reference)
public XmlElement GetXml()
private string GetAttribute(XmlElement xel, string attribute)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.Reference : object {
private TransformChain chain
private string digestMethod
private Byte[] digestValue
private string id
private string uri
private string type
private Stream stream
private XmlElement element
public string DigestMethod
public Byte[] DigestValue
public string Id
public TransformChain TransformChain
public string Type
public string Uri
public void .ctor(Stream stream)
public void .ctor(string uri)
public string get_DigestMethod()
public void set_DigestMethod(string value)
public Byte[] get_DigestValue()
public void set_DigestValue(Byte[] value)
public string get_Id()
public void set_Id(string value)
public TransformChain get_TransformChain()
public void set_TransformChain(TransformChain value)
public string get_Type()
public void set_Type(string value)
public string get_Uri()
public void set_Uri(string value)
public void AddTransform(Transform transform)
public XmlElement GetXml()
private string GetAttribute(XmlElement xel, string attribute)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.ReferenceList : object {
private ArrayList list
private object System.Collections.IList.Item
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
public int Count
public bool IsSynchronized
public EncryptedReference ItemOf
public object SyncRoot
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
public int get_Count()
public bool get_IsSynchronized()
public EncryptedReference get_ItemOf(int index)
public void set_ItemOf(int index, EncryptedReference value)
public object get_SyncRoot()
public int Add(object value)
public void Clear()
public bool Contains(object value)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public EncryptedReference Item(int index)
public int IndexOf(object value)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(int index)
}
public System.Security.Cryptography.Xml.RSAKeyValue : KeyInfoClause {
private RSA rsa
public RSA Key
public void .ctor(RSA key)
public RSA get_Key()
public void set_Key(RSA value)
public XmlElement GetXml()
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.Signature : object {
private XmlNamespaceManager dsigNsmgr
private ArrayList list
private SignedInfo info
private KeyInfo key
private string id
private Byte[] signature
private XmlElement element
public string Id
public KeyInfo KeyInfo
public IList ObjectList
public Byte[] SignatureValue
public SignedInfo SignedInfo
public string get_Id()
public void set_Id(string value)
public KeyInfo get_KeyInfo()
public void set_KeyInfo(KeyInfo value)
public IList get_ObjectList()
public void set_ObjectList(IList value)
public Byte[] get_SignatureValue()
public void set_SignatureValue(Byte[] value)
public SignedInfo get_SignedInfo()
public void set_SignedInfo(SignedInfo value)
public void AddObject(DataObject dataObject)
public XmlElement GetXml()
internal XmlElement GetXml(XmlDocument document)
private string GetAttribute(XmlElement xel, string attribute)
public void LoadXml(XmlElement value)
private int NextElementPos(XmlNodeList nl, int pos, string name, string ns, bool required)
}
public System.Security.Cryptography.Xml.SignedInfo : object {
private ArrayList references
private string c14nMethod
private string id
private string signatureMethod
private string signatureLength
private XmlElement element
public string CanonicalizationMethod
public Transform CanonicalizationMethodObject
public int Count
public string Id
public bool IsReadOnly
public bool IsSynchronized
public ArrayList References
public string SignatureLength
public string SignatureMethod
public object SyncRoot
public string get_CanonicalizationMethod()
public void set_CanonicalizationMethod(string value)
public Transform get_CanonicalizationMethodObject()
public int get_Count()
public string get_Id()
public void set_Id(string value)
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public ArrayList get_References()
public string get_SignatureLength()
public void set_SignatureLength(string value)
public string get_SignatureMethod()
public void set_SignatureMethod(string value)
public object get_SyncRoot()
public void AddReference(Reference reference)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public XmlElement GetXml()
private string GetAttribute(XmlElement xel, string attribute)
public void LoadXml(XmlElement value)
}
public System.Security.Cryptography.Xml.SignedXml : object {
public string XmlDsigCanonicalizationUrl
public string XmlDsigCanonicalizationWithCommentsUrl
public string XmlDsigDSAUrl
public string XmlDsigHMACSHA1Url
public string XmlDsigMinimalCanonicalizationUrl
public string XmlDsigNamespaceUrl
public string XmlDsigRSASHA1Url
public string XmlDsigSHA1Url
public string XmlDecryptionTransformUrl
public string XmlDsigBase64TransformUrl
public string XmlDsigC14NTransformUrl
public string XmlDsigC14NWithCommentsTransformUrl
public string XmlDsigEnvelopedSignatureTransformUrl
public string XmlDsigExcC14NTransformUrl
public string XmlDsigExcC14NWithCommentsTransformUrl
public string XmlDsigXPathTransformUrl
public string XmlDsigXsltTransformUrl
public string XmlLicenseTransformUrl
private EncryptedXml encryptedXml
protected Signature m_signature
private AsymmetricAlgorithm key
protected string m_strSigningKeyName
private XmlDocument envdoc
private IEnumerator pkEnumerator
private XmlElement signatureElement
private Hashtable hashes
private XmlResolver xmlResolver
private ArrayList manifests
private IEnumerator _x509Enumerator
private Char[] whitespaceChars
public EncryptedXml EncryptedXml
public KeyInfo KeyInfo
public Signature Signature
public string SignatureLength
public string SignatureMethod
public Byte[] SignatureValue
public SignedInfo SignedInfo
public AsymmetricAlgorithm SigningKey
public string SigningKeyName
public XmlResolver Resolver
public void .ctor(XmlDocument document)
public void .ctor(XmlElement elem)
public EncryptedXml get_EncryptedXml()
public void set_EncryptedXml(EncryptedXml value)
public KeyInfo get_KeyInfo()
public void set_KeyInfo(KeyInfo value)
public Signature get_Signature()
public string get_SignatureLength()
public string get_SignatureMethod()
public Byte[] get_SignatureValue()
public SignedInfo get_SignedInfo()
public AsymmetricAlgorithm get_SigningKey()
public void set_SigningKey(AsymmetricAlgorithm value)
public string get_SigningKeyName()
public void set_SigningKeyName(string value)
public void AddObject(DataObject dataObject)
public void AddReference(Reference reference)
private Stream ApplyTransform(Transform t, XmlDocument input)
private Stream CanonicalizeOutput(object obj)
private XmlDocument GetManifest(Reference r)
private void FixupNamespaceNodes(XmlElement src, XmlElement dst, bool ignoreDefault)
private Byte[] GetReferenceHash(Reference r, bool check_hmac)
private void DigestReferences()
private Transform GetC14NMethod()
private Stream SignedInfoTransformed()
private HashAlgorithm GetHash(string algorithm, bool check_hmac)
public bool CheckSignature()
private bool CheckReferenceIntegrity(ArrayList referenceList)
public bool CheckSignature(AsymmetricAlgorithm key)
private AsymmetricAlgorithm CheckSignatureInternal(AsymmetricAlgorithm key)
private bool CheckSignatureWithKey(AsymmetricAlgorithm key)
private bool Compare(Byte[] expected, Byte[] actual)
public bool CheckSignature(KeyedHashAlgorithm macAlg)
public bool CheckSignature(X509Certificate2 certificate, bool verifySignatureOnly)
public bool CheckSignatureReturningKey(AsymmetricAlgorithm& signingKey)
public void ComputeSignature()
public void ComputeSignature(KeyedHashAlgorithm macAlg)
public XmlElement GetIdElement(XmlDocument document, string idValue)
protected AsymmetricAlgorithm GetPublicKey()
public XmlElement GetXml()
public void LoadXml(XmlElement value)
public void set_Resolver(XmlResolver value)
}
internal System.Security.Cryptography.Xml.SymmetricKeyWrap : object {
public Byte[] AESKeyWrapEncrypt(Byte[] rgbKey, Byte[] rgbWrappedKeyData)
public Byte[] AESKeyWrapDecrypt(Byte[] rgbKey, Byte[] rgbEncryptedWrappedKeyData)
public Byte[] TripleDESKeyWrapEncrypt(Byte[] rgbKey, Byte[] rgbWrappedKeyData)
public Byte[] TripleDESKeyWrapDecrypt(Byte[] rgbKey, Byte[] rgbEncryptedWrappedKeyData)
private Byte[] Transform(Byte[] data, ICryptoTransform t)
private Byte[] ComputeCMSKeyChecksum(Byte[] data)
private Byte[] Concatenate(Byte[] buf1, Byte[] buf2)
private Byte[] MSB(Byte[] input)
private Byte[] MSB(Byte[] input, int bytes)
private Byte[] LSB(Byte[] input)
private Byte[] LSB(Byte[] input, int bytes)
private Byte[] Xor(Byte[] x, Byte[] y)
}
public System.Security.Cryptography.Xml.Transform : object {
private string algo
private XmlResolver xmlResolver
private Hashtable propagated_namespaces
public string Algorithm
public Type[] InputTypes
public Type[] OutputTypes
public XmlResolver Resolver
public XmlElement Context
public Hashtable PropagatedNamespaces
public string get_Algorithm()
public void set_Algorithm(string value)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public void set_Resolver(XmlResolver value)
public XmlElement get_Context()
public void set_Context(XmlElement value)
public Hashtable get_PropagatedNamespaces()
public Byte[] GetDigestedOutput(HashAlgorithm hash)
protected XmlNodeList GetInnerXml()
public object GetOutput()
public object GetOutput(Type type)
public XmlElement GetXml()
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
internal XmlResolver GetResolver()
}
public System.Security.Cryptography.Xml.TransformChain : object {
private ArrayList chain
public int Count
public Transform Item
public int get_Count()
public Transform get_Item(int index)
public void Add(Transform transform)
public IEnumerator GetEnumerator()
}
public System.Security.Cryptography.Xml.X509IssuerSerial : ValueType {
private string _issuerName
private string _serialNumber
public string IssuerName
public string SerialNumber
internal void .ctor(string issuer, string serial)
public string get_IssuerName()
public void set_IssuerName(string value)
public string get_SerialNumber()
public void set_SerialNumber(string value)
}
public System.Security.Cryptography.Xml.XmlDecryptionTransform : Transform {
private string NamespaceUri
private EncryptedXml encryptedXml
private Type[] inputTypes
private Type[] outputTypes
private object inputObj
private ArrayList exceptUris
public EncryptedXml EncryptedXml
public Type[] InputTypes
public Type[] OutputTypes
public EncryptedXml get_EncryptedXml()
public void set_EncryptedXml(EncryptedXml value)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
public void AddExceptUri(string uri)
private void ClearExceptUris()
protected XmlNodeList GetInnerXml()
public object GetOutput()
public object GetOutput(Type type)
protected bool IsTargetElement(XmlElement inputElement, string idValue)
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
}
public System.Security.Cryptography.Xml.XmlDsigBase64Transform : Transform {
private CryptoStream cs
private Type[] input
private Type[] output
public Type[] InputTypes
public Type[] OutputTypes
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
protected XmlNodeList GetInnerXml()
public object GetOutput()
public object GetOutput(Type type)
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
}
public System.Security.Cryptography.Xml.XmlDsigC14NTransform : Transform {
private Type[] input
private Type[] output
private XmlCanonicalizer canonicalizer
private Stream s
public Type[] InputTypes
public Type[] OutputTypes
public void .ctor(bool includeComments)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
protected XmlNodeList GetInnerXml()
public Byte[] GetDigestedOutput(HashAlgorithm hash)
public object GetOutput()
public object GetOutput(Type type)
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
}
public System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform : Transform {
private Type[] input
private Type[] output
private bool comments
private object inputObj
public Type[] InputTypes
public Type[] OutputTypes
public void .ctor(bool includeComments)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
protected XmlNodeList GetInnerXml()
public object GetOutput()
private XmlNamespaceManager GetNamespaceManager(XmlNode n)
private XmlNode GetOutputFromNode(XmlNode input, XmlNamespaceManager nsmgr, bool remove)
public object GetOutput(Type type)
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
}
public System.Security.Cryptography.Xml.XmlDsigExcC14NTransform : Transform {
private Type[] input
private Type[] output
private XmlCanonicalizer canonicalizer
private Stream s
private string inclusiveNamespacesPrefixList
public string InclusiveNamespacesPrefixList
public Type[] InputTypes
public Type[] OutputTypes
public void .ctor(bool includeComments)
public void .ctor(string inclusiveNamespacesPrefixList)
public void .ctor(bool includeComments, string inclusiveNamespacesPrefixList)
public string get_InclusiveNamespacesPrefixList()
public void set_InclusiveNamespacesPrefixList(string value)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
protected XmlNodeList GetInnerXml()
public Byte[] GetDigestedOutput(HashAlgorithm hash)
public object GetOutput()
public object GetOutput(Type type)
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
}
public System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform : XmlDsigExcC14NTransform {
public void .ctor(string inclusiveNamespacesPrefixList)
}
internal System.Security.Cryptography.Xml.XmlDsigNodeList : XmlNodeList {
private ArrayList _rgNodes
public int Count
public void .ctor(ArrayList rgNodes)
public int get_Count()
public IEnumerator GetEnumerator()
public XmlNode Item(int index)
}
public System.Security.Cryptography.Xml.XmlDsigXPathTransform : Transform {
private Type[] input
private Type[] output
private XmlNodeList xpath
private XmlDocument doc
private XsltContext ctx
public Type[] InputTypes
public Type[] OutputTypes
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
protected XmlNodeList GetInnerXml()
public object GetOutput()
public object GetOutput(Type type)
private XmlDsigNodeList EvaluateMatch(XmlNode n, string xpath)
private void EvaluateMatch(XmlNode n, XPathExpression exp, ArrayList al)
private bool NodeMatches(XmlNode n, XPathExpression exp)
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
}
public System.Security.Cryptography.Xml.XmlDsigXsltTransform : Transform {
private Type[] input
private Type[] output
private bool comments
private XmlNodeList xnl
private XmlDocument inputDoc
public Type[] InputTypes
public Type[] OutputTypes
public void .ctor(bool includeComments)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
protected XmlNodeList GetInnerXml()
public object GetOutput()
public object GetOutput(Type type)
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
}
internal System.Security.Cryptography.Xml.XmlEncryption : object {
public string Prefix
}
public System.Security.Cryptography.Xml.XmlLicenseTransform : Transform {
private IRelDecryptor _decryptor
private Type[] inputTypes
private Type[] outputTypes
public IRelDecryptor Decryptor
public Type[] InputTypes
public Type[] OutputTypes
public IRelDecryptor get_Decryptor()
public void set_Decryptor(IRelDecryptor value)
public Type[] get_InputTypes()
public Type[] get_OutputTypes()
protected XmlNodeList GetInnerXml()
public object GetOutput()
public object GetOutput(Type type)
public void LoadInnerXml(XmlNodeList nodeList)
public void LoadInput(object obj)
}
internal System.Security.Cryptography.Xml.XmlSignature : object {
public string NamespaceURI
public string Prefix
public XmlElement GetChildElement(XmlElement xel, string element, string ns)
public string GetAttributeFromElement(XmlElement xel, string attribute, string element)
public XmlElement[] GetChildElements(XmlElement xel, string element)
}
internal System.Security.Cryptography.Xml.XmlSignatureStreamReader : TextReader {
private TextReader source
private int cache
public void .ctor(TextReader input)
public void Close()
public int Peek()
public int Read()
public int ReadBlock(Char[] buffer, int index, int count)
public string ReadLine()
public string ReadToEnd()
}
public System.Security.Permissions.DataProtectionPermission : CodeAccessPermission {
private int version
private DataProtectionPermissionFlags _flags
public DataProtectionPermissionFlags Flags
public void .ctor(PermissionState state)
public void .ctor(DataProtectionPermissionFlags flags)
public DataProtectionPermissionFlags get_Flags()
public void set_Flags(DataProtectionPermissionFlags value)
public bool IsUnrestricted()
public IPermission Copy()
public IPermission Intersect(IPermission target)
public IPermission Union(IPermission target)
public bool IsSubsetOf(IPermission target)
public void FromXml(SecurityElement e)
public SecurityElement ToXml()
private DataProtectionPermission Cast(IPermission target)
}
public System.Security.Permissions.DataProtectionPermissionAttribute : CodeAccessSecurityAttribute {
private DataProtectionPermissionFlags _flags
public DataProtectionPermissionFlags Flags
public bool ProtectData
public bool UnprotectData
public bool ProtectMemory
public bool UnprotectMemory
public void .ctor(SecurityAction action)
public DataProtectionPermissionFlags get_Flags()
public void set_Flags(DataProtectionPermissionFlags value)
public bool get_ProtectData()
public void set_ProtectData(bool value)
public bool get_UnprotectData()
public void set_UnprotectData(bool value)
public bool get_ProtectMemory()
public void set_ProtectMemory(bool value)
public bool get_UnprotectMemory()
public void set_UnprotectMemory(bool value)
public IPermission CreatePermission()
}
public System.Security.Permissions.DataProtectionPermissionFlags : Enum {
public int value__
public DataProtectionPermissionFlags NoFlags
public DataProtectionPermissionFlags ProtectData
public DataProtectionPermissionFlags UnprotectData
public DataProtectionPermissionFlags ProtectMemory
public DataProtectionPermissionFlags UnprotectMemory
public DataProtectionPermissionFlags AllFlags
}
internal System.Security.Permissions.PermissionHelper : object {
internal SecurityElement Element(Type type, int version)
internal PermissionState CheckPermissionState(PermissionState state, bool allowUnrestricted)
internal int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion)
internal bool IsUnrestricted(SecurityElement se)
internal void ThrowInvalidPermission(IPermission target, Type expected)
}
