public Facepunch.Network.Raknet.Client : Client {
private Peer peer
public bool IsConnected()
public bool Connect(string strURL, int port)
internal bool HandleRaknetPacket(byte type, NetRead read)
protected void HandleMessage()
public void ProcessRead(NetRead read)
protected bool Receive()
public void Disconnect(string reason, bool sendReasonToServer)
public string GetDebug(Connection connection)
public ulong GetStat(Connection connection, StatTypeLong type)
public int GetLastPing()
public void ProcessWrite(NetWrite write)
}
public Facepunch.Network.Raknet.Native : object {
public IntPtr NET_Create()
public void NET_Close(IntPtr nw)
public int NET_StartClient(IntPtr nw, string hostName, int port, int retries, int retryDelay, int timeout)
public int NET_StartServer(IntPtr nw, string ip, int port, int maxConnections)
public IntPtr NET_LastStartupError(IntPtr nw)
public UInt32 NET_GetReceiveBufferSize(IntPtr nw)
public bool NET_Receive(IntPtr nw)
public ulong NETRCV_GUID(IntPtr nw)
public UInt32 NETRCV_Address(IntPtr nw)
public UInt32 NETRCV_Port(IntPtr nw)
public IntPtr NETRCV_RawData(IntPtr nw)
public int NETRCV_LengthBits(IntPtr nw)
public int NETRCV_UnreadBits(IntPtr nw)
public bool NETRCV_ReadBytes(IntPtr nw, Byte* data, int length)
public void NETRCV_SetReadPointer(IntPtr nw, int bitsOffset)
public void NETSND_Start(IntPtr nw)
public void NETSND_WriteBytes(IntPtr nw, Byte* data, int length)
public UInt32 NETSND_Size(IntPtr nw)
public UInt32 NETSND_Broadcast(IntPtr nw, int priority, int reliability, int channel)
public UInt32 NETSND_Send(IntPtr nw, ulong connectionID, int priority, int reliability, int channel)
public void NET_CloseConnection(IntPtr nw, ulong connectionID)
public IntPtr NET_GetAddress(IntPtr nw, ulong connectionID)
public IntPtr NET_GetStatisticsString(IntPtr nw, ulong connectionID)
public bool NET_GetStatistics(IntPtr nw, ulong connectionID, RaknetStats& data, int dataLength)
public int NET_GetAveragePing(IntPtr nw, ulong connectionID)
public int NET_GetLastPing(IntPtr nw, ulong connectionID)
public int NET_GetLowestPing(IntPtr nw, ulong connectionID)
public void NET_SendMessage(IntPtr nw, Byte* data, int length, UInt32 adr, ushort port)
public float NETSND_ReadCompressedFloat(IntPtr nw)
}
public Facepunch.Network.Raknet.PacketType : object {
public byte NEW_INCOMING_CONNECTION
public byte CONNECTION_REQUEST_ACCEPTED
public byte CONNECTION_ATTEMPT_FAILED
public byte DISCONNECTION_NOTIFICATION
public byte NO_FREE_INCOMING_CONNECTIONS
public byte CONNECTION_LOST
public byte CONNECTION_BANNED
}
internal Facepunch.Network.Raknet.Peer : object {
private IntPtr ptr
private Byte[] ByteBuffer
public ulong incomingGUID
public UInt32 incomingAddressInt
public UInt32 incomingPort
public string incomingAddress
public int incomingBits
public int incomingBitsUnread
public int incomingBytes
public int incomingBytesUnread
public Peer CreateServer(string ip, int port, int maxConnections)
public Peer CreateConnection(string hostname, int port, int retries, int retryDelay, int timeout)
public void Close()
public UInt32 PendingReceiveCount()
public bool Receive()
public ulong get_incomingGUID()
public UInt32 get_incomingAddressInt()
public UInt32 get_incomingPort()
public string get_incomingAddress()
public int get_incomingBits()
public int get_incomingBitsUnread()
public int get_incomingBytes()
public int get_incomingBytesUnread()
public void SetReadPos(int bitsOffset)
protected bool Read(Byte* data, int length)
public int ReadBytes(Byte[] buffer, int offset, int length)
public byte ReadByte()
public IntPtr RawData()
public int ReadBytes(MemoryStream memoryStream, int length)
public void SendStart()
public void WriteByte(byte val)
public void WriteBytes(Byte[] val, int offset, int length)
public void WriteBytes(Byte[] val)
public void WriteBytes(MemoryStream stream)
protected void Write(Byte* data, int size)
public UInt32 SendBroadcast(Priority priority, SendMethod reliability, sbyte channel)
public UInt32 SendTo(ulong guid, Priority priority, SendMethod reliability, sbyte channel)
public void SendUnconnectedMessage(Byte* data, int length, UInt32 adr, ushort port)
public string GetAddress(ulong guid)
private string StringFromPointer(IntPtr p)
public int ToRaknetPriority(Priority priority)
public int ToRaknetPacketReliability(SendMethod reliability)
public void Kick(Connection connection)
protected void Check()
public string GetStatisticsString(ulong guid)
public int GetPingAverage(ulong guid)
public int GetPingLast(ulong guid)
public int GetPingLowest(ulong guid)
public RaknetStats GetStatistics(ulong guid)
public ulong GetStat(Connection connection, StatTypeLong type)
}
public Facepunch.Network.Raknet.Server : Server {
private Peer peer
public string ProtocolId
public string get_ProtocolId()
public bool IsConnected()
public bool Start()
public void Stop(string shutdownMsg)
public void Disconnect(Connection cn)
public void Kick(Connection cn, string message, bool logfile)
internal bool HandleRaknetPacket(byte type, NetRead read)
private void HandleMessage()
public void ProcessRead(NetRead read)
protected bool Receive()
public string GetDebug(Connection connection)
public int GetAveragePing(Connection connection)
public ulong GetStat(Connection connection, StatTypeLong type)
public void ProcessWrite(NetWrite write)
private void ProcessWrite(NetWrite write, Connection connection)
}
