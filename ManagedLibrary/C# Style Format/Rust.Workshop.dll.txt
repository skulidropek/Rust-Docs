public Rust.Workshop.Approved : object {
private Dictionary`2<ulong, ApprovedSkinInfo> _all
public IReadOnlyDictionary`2<ulong, ApprovedSkinInfo> All
private void Add_2016()
private void Add_December_29_2016()
private void Add_December_22_2016()
private void Add_December_15_2016()
private void Add_December_8_2016()
private void Add_December_2_2018()
private void Add_December_1_2016()
private void Add_November_24_2016()
private void Add_November_17_2016()
private void Add_November_16_2016()
private void Add_November_10_2016()
private void Add_November_3_2016()
private void Add_2017()
private void Add_December_28_2017()
private void Add_December_21_2017()
private void Add_December_14_2017()
private void Add_December_7_2017()
private void Add_November_30_2017()
private void Add_November_23_2017()
private void Add_November_16_2017()
private void Add_November_9_2017()
private void Add_November_2_2017()
private void Add_October_26_2017()
private void Add_October_19_2017()
private void Add_October_12_2017()
private void Add_October_5_2017()
private void Add_September_28_2017()
private void Add_September_21_2017()
private void Add_September_14_2017()
private void Add_September_7_2017()
private void Add_August_31_2017()
private void Add_August_24_2017()
private void Add_August_17_2017()
private void Add_August_10_2017()
private void Add_August_3_2017()
private void Add_July_27_2017()
private void Add_July_20_2017()
private void Add_July_13_2017()
private void Add_July_6_2017()
private void Add_June_29_2017()
private void Add_June_15_2017()
private void Add_June_8_2017()
private void Add_June_1_2017()
private void Add_May_25_2017()
private void Add_May_18_2017()
private void Add_May_11_2017()
private void Add_May_4_2017()
private void Add_April_27_2017()
private void Add_April_20_2017()
private void Add_April_13_2017()
private void Add_April_6_2017()
private void Add_March_30_2017()
private void Add_March_23_2017()
private void Add_March_15_2017()
private void Add_March_8_2017()
private void Add_March_2_2017()
private void Add_February_23_2017()
private void Add_February_16_2017()
private void Add_February_9_2017()
private void Add_February_2_2017()
private void Add_January_18_2017()
private void Add_January_12_2017()
private void Add_January_4_2017()
private void Add_2018()
private void Add_December_20_2018()
private void Add_December_13_2020()
private void Add_December_6_2018()
private void Add_November_29_2018()
private void Add_November_22_2018()
private void Add_November_15_2018()
private void Add_November_9_2018()
private void Add_November_1_2018()
private void Add_October_26_2018()
private void Add_October_19_2018()
private void Add_October_11_2018()
private void Add_October_4_2018()
private void Add_September_27_2018()
private void Add_September_20_2018()
private void Add_September_14_2018()
private void Add_September_5_2018()
private void Add_August_23_2018()
private void Add_August_16_2018()
private void Add_August_9_2018()
private void Add_August_2_2018()
private void Add_July_26_2018()
private void Add_July_19_2018()
private void Add_July_12_2018()
private void Add_July_5_2018()
private void Add_June_28_2018()
private void Add_June_22_2018()
private void Add_June_14_2018()
private void Add_June_7_2018()
private void Add_May_31_2018()
private void Add_May_24_2018()
private void Add_May_2_2018()
private void Add_April_26_2018()
private void Add_April_19_2018()
private void Add_April_12_2018()
private void Add_April_5_2018()
private void Add_March_29_2018()
private void Add_March_22_2018()
private void Add_March_15_2018()
private void Add_March_8_2018()
private void Add_March_1_2018()
private void Add_February_22_2018()
private void Add_February_15_2018()
private void Add_February_8_2018()
private void Add_February_1_2018()
private void Add_January_25_2018()
private void Add_January_18_2018()
private void Add_January_11_2018()
private void Add_January_4_2018()
private void Add_2019()
private void Add_December_27_2019()
private void Add_December_19_2019()
private void Add_December_12_2019()
private void Add_December_5_2019()
private void Add_November_28_2019()
private void Add_November_21_2019()
private void Add_November_14_2019()
private void Add_November_7_2019()
private void Add_October_31_2019()
private void Add_October_24_2019()
private void Add_October_18_2019()
private void Add_October_11_2019()
private void Add_October_3_2019()
private void Add_September_26_2019()
private void Add_September_19_2019()
private void Add_September_12_2019()
private void Add_September_9_2019()
private void Add_August_29_2019()
private void Add_August_22_2019()
private void Add_August_15_2019()
private void Add_August_9_2019()
private void Add_August_1_2019()
private void Add_July_26_2019()
private void Add_July_19_2019()
private void Add_July_12_2019()
private void Add_July_5_2019()
private void Add_June_28_2019()
private void Add_June_21_2019()
private void Add_June_14_2019()
private void Add_June_6_2019()
private void Add_May_30_2019()
private void Add_May_23_2019()
private void Add_May_16_2019()
private void Add_May_9_2019()
private void Add_May_2_2019()
private void Add_April_25_2019()
private void Add_April_19_2019()
private void Add_April_11_2019()
private void Add_April_5_2019()
private void Add_March_28_2019()
private void Add_March_22_2019()
private void Add_March_14_2019()
private void Add_March_7_2019()
private void Add_February_28_2019()
private void Add_February_22_2019()
private void Add_February_14_2019()
private void Add_February_7_2019()
private void Add_January_31_2019()
private void Add_January_24_2019()
private void Add_January_17_2019()
private void Add_January_10_2019()
private void Add_January_3_2019()
private void Add_2020()
private void Add_December_31_2020()
private void Add_December_24_2020()
private void Add_December_18_2020()
private void Add_December_10_2020()
private void Add_December_03_2020()
private void Add_November_26_2020()
private void Add_November_19_2020()
private void Add_November_12_2020()
private void Add_November_05_2020()
private void Add_October_29_2020()
private void Add_October_22_2020()
private void Add_October_16_2020()
private void Add_October_8_2020()
private void Add_October_1_2020()
private void Add_September_24_2020()
private void Add_September_17_2020()
private void Add_September_10_2020()
private void Add_September_3_2020()
private void Add_August_27_2020()
private void Add_August_21_2020()
private void Add_August_13_2020()
private void Add_August_06_2020()
private void Add_July_31_2020()
private void Add_July_24_2020()
private void Add_July_17_2020()
private void Add_July_9_2020()
private void Add_July_2_2020()
private void Add_June_26_2020()
private void Add_June_19_2020()
private void Add_June_11_2020()
private void Add_June_4_2020()
private void Add_May_28_2020()
private void Add_May_21_2020()
private void Add_May_14_2020()
private void Add_May_8_2020()
private void Add_April_30_2020()
private void Add_April_24_2020()
private void Add_April_16_2020()
private void Add_April_9_2020()
private void Add_April_2_2020()
private void Add_March_28_2020()
private void Add_March_20_2020()
private void Add_March_13_2020()
private void Add_March_5_2020()
private void Add_February_27_2020()
private void Add_February_21_2020()
private void Add_February_13_2020()
private void Add_February_6_2020()
private void Add_January_31_2020()
private void Add_January_17_2020()
private void Add_January_10_2020()
private void Add_January_2_2020()
private void Add_2021()
private void Add_December_30_2021()
private void Add_December_23_2021()
private void Add_December_16_2021()
private void Add_December_09_2021()
private void Add_December_02_2021()
private void Add_November_25_2021()
private void Add_November_19_2021_TWITCHDROPS()
private void Add_November_18_2021()
private void Add_November_19_2021_CHARITABLE_RUST()
private void Add_November_11_2021()
private void Add_November_04_2021()
private void Add_October_27_2021()
private void Add_October_21_2021()
private void Add_October_14_2021()
private void Add_October_07_2021()
private void Add_September_30_2021()
private void Add_September_23_2021()
private void Add_September_16_2021()
private void Add_September_09_2021()
private void Add_September_02_2021()
private void Add_September_01_2021_STREAMERSKINS()
private void Add_August_26_2021()
private void Add_August_19_2021()
private void Add_August_12_2021()
private void Add_August_04_2021()
private void Add_July_29_2021()
private void Add_July_22_2021()
private void Add_July_15_2021_STREAMERSKINS()
private void Add_July_15_2021()
private void Add_July_08_2021()
private void Add_July_05_2021_STREAMERSKINS()
private void Add_July_01_2021()
private void Add_June_24_2021()
private void Add_June_17_2021()
private void Add_June_10_2021()
private void Add_June_03_2021()
private void Add_May_27_2021()
private void Add_May_20_2021()
private void Add_May_13_2021()
private void Add_May_06_2021()
private void Add_May_05_2021_STREAMERSKINS()
private void Add_April_29_2021()
private void Add_April_22_2021()
private void Add_April_15_2021()
private void Add_April_09_2021()
private void Add_April_01_2021()
private void Add_March_31_2021_STREAMERSKINS()
private void Add_March_25_2021()
private void Add_March_18_2021()
private void Add_March_11_2021()
private void Add_March_04_2021()
private void Add_March_03_2021_STREAMERSKINS()
private void Add_February_25_2021()
private void Add_February_18_2021()
private void Add_February_11_2021()
private void Add_February_10_2021_STREAMERSKINS()
private void Add_February_04_2021()
private void Add_February_03_2021_STREAMERSKINS()
private void Add_January_28_2021()
private void Add_January_21_2021()
private void Add_January_15_2021_STREAMERSKINS()
private void Add_January_14_2021()
private void Add_January_07_2021()
private void Add_January_06_2021_STREAMERSKINS()
private void Add_2022()
private void Add_December_29_2022()
private void Add_December_22_2022()
private void Add_December_15_2022()
private void Add_December_08_2022()
private void Add_December_01_2022()
private void Add_November_24_2022()
private void Add_november_18_CHARITABLERUST_FORSALE()
private void Add_November_18_2022()
private void Add_November_10_2022_CHARITABLERUST()
private void Add_November_10_2022()
private void Add_November_03_2022()
private void Add_October_27_2022()
private void Add_October_20_2022()
private void Add_October_13_2022()
private void Add_October_06_2022()
private void Add_October_04_2022_STREAMERSKINS()
private void Add_September_28_2022()
private void Add_September_22_2022()
private void Add_September_15_2022()
private void Add_September_08_2022()
private void Add_September_01_2022()
private void Add_August_25_2022()
private void Add_August_18_2022()
private void Add_August_11_2022()
private void Add_August_08_2022_STREAMERSKINS()
private void Add_August_04_2022()
private void Add_July_28_2022()
private void Add_July_21_2022()
private void Add_July_14_2022()
private void Add_July_07_2022()
private void Add_June_30_2022()
private void Add_June_23_2022()
private void Add_June_16_2022()
private void Add_June_09_2022()
private void Add_June_02_2022()
private void Add_May_26_2022()
private void Add_May_19_2022()
private void Add_May_12_2022()
private void Add_May_05_2022()
private void Add_May_04_2022_STREAMERSKINS()
private void Add_April_28_2022()
private void Add_April_21_2022()
private void Add_April_14_2022_EASTER()
private void Add_April_13_2022_STREAMERSKINS()
private void Add_April_07_2022()
private void Add_March_31_2022()
private void Add_March_24_2022()
private void Add_March_17_2022_STREAMERSKINS()
private void Add_March_17_2022()
private void Add_March_10_2022()
private void Add_March_03_2022()
private void Add_February_24_2022()
private void Add_February_17_2022()
private void Add_February_10_2022()
private void Add_February_03_2022()
private void Add_February_01_2022_STREAMERSKINS()
private void Add_January_28_2022()
private void Add_January_20_2022()
private void Add_January_13_2022()
private void Add_January_06_2022_STREAMERSKINS()
private void Add_January_06_2022()
private void Add_2023()
private void Add_December_28_2023()
private void Add_December_21_2023()
private void Add_December_14_2023()
private void Add_December_07_2023()
private void Add_November_30_2023_TWITCHDROPS()
private void Add_November_30_2023()
private void Add_November_23_2023()
private void Add_November_15_2023()
private void Add_November_09_2023()
private void Add_November_02_2023()
private void Add_October_26_2023()
private void Add_October_19_2023()
private void Add_October_12_2023()
private void Add_October_12_2023_CHARITABLERUST_FORSALE()
private void Add_October_10_2023_CHARITABLERUST()
private void Add_October_05_2023()
private void Add_September_28_2023()
private void Add_September_21_2023()
private void Add_September_14_2023()
private void Add_September_07_2023()
private void Add_September_06_2023_TWITCHDROPS()
private void Add_August_31_2023()
private void Add_August_24_2023()
private void Add_August_17_2023()
private void Add_August_10_2023()
private void Add_August_03_2023()
private void Add_July_27_2023()
private void Add_July_20_2023()
private void Add_July_13_2023()
private void Add_July_06_2023()
private void Add_June_29_2023()
private void Add_June_22_2023()
private void Add_June_15_2023()
private void Add_June_08_2023_STREAMERSKINS()
private void Add_June_08_2023()
private void Add_June_01_2023()
private void Add_May_25_2023()
private void Add_May_18_2023()
private void Add_May_11_2023()
private void Add_May_11_2023_TWITCHDROPS()
private void Add_May_04_2023()
private void Add_April_27_2023()
private void Add_April_21_2023()
private void Add_April_13_2023_EASTER2()
private void Add_April_06_2023_EASTER()
private void Add_March_30_2023()
private void Add_March_23_2023()
private void Add_March_17_2023()
private void Add_March_09_2023()
private void Add_March_01_2023()
private void Add_February_23_2023()
private void Add_February_16_2023()
private void Add_February_09_VALENTINES()
private void Add_February_02_2023()
private void Add_January_26_2023()
private void Add_January_18_2023_LUNAR()
private void Add_January_12_2023()
private void Add_January_12_2023_TRUST_IN_RUST_TWITCH_DROPS()
private void Add_January_12_2023_TRUST_IN_RUST_STORE()
private void Add_January_05_2023()
private void Add_2024()
private void Add_July_04_2024()
private void Add_June_27_2024()
private void Add_June_20_2024()
private void Add_June_13_2024()
private void Add_June_06_2024_TWITCHDROPS()
private void Add_June_06_2024()
private void Add_May_30_2023()
private void Add_May_23_2024_STREAMERSKINS()
private void Add_May_23_2024()
private void Add_May_16_2024()
private void Add_May_09_2024()
private void Add_May_02_2024()
private void Add_April_25_2024()
private void Add_April_18_2024()
private void Add_April_11_2024()
private void Add_April_04_2024()
private void Add_March_28_2024()
private void Add_March_21_2024_EASTER_1()
private void Add_March_14_2024()
private void Add_March_07_2024()
private void Add_February_29_2024()
private void Add_February_22_2024()
private void Add_February_15_2023()
private void Add_February_14_2024()
private void Add_February_08_2024()
private void Add_February_01_2024()
private void Add_January_25_2024()
private void Add_January_18_2024()
private void Add_Janury_11_2024_TIR_DROPS()
private void Add_January_11_2024()
private void Add_January_11_2024_TIR_SALE()
private void Add_January_04_2024()
public IReadOnlyDictionary`2<ulong, ApprovedSkinInfo> get_All()
private void Initialize()
private void Add(ApprovedSkinInfo skin)
public ApprovedSkinInfo FindByInventoryId(int id)
private void EnsureInitialized()
private void Add_Unlimited()
}
public Rust.Workshop.ApprovedSkinInfo : object {
private ulong <InventoryId>k__BackingField
private string <Desc>k__BackingField
private string <Name>k__BackingField
private ulong <WorkshopdId>k__BackingField
private Price <Price>k__BackingField
private bool <Tradable>k__BackingField
private DropChance <DropChance>k__BackingField
private bool <Marketable>k__BackingField
private Skinnable <Skinnable>k__BackingField
private bool <AllowInCrates>k__BackingField
private bool <IsLimitedTimeOffer>k__BackingField
private bool <IsTwitchDrop>k__BackingField
public ulong InventoryId
public string Desc
public string Name
public ulong WorkshopdId
internal Price Price
public bool Tradable
public DropChance DropChance
public bool Marketable
public Skinnable Skinnable
public bool AllowInCrates
public bool IsLimitedTimeOffer
public bool IsTwitchDrop
public ulong get_InventoryId()
private void set_InventoryId(ulong value)
public string get_Desc()
private void set_Desc(string value)
public string get_Name()
private void set_Name(string value)
public ulong get_WorkshopdId()
private void set_WorkshopdId(ulong value)
internal Price get_Price()
private void set_Price(Price value)
public bool get_Tradable()
private void set_Tradable(bool value)
public DropChance get_DropChance()
private void set_DropChance(DropChance value)
public bool get_Marketable()
private void set_Marketable(bool value)
public Skinnable get_Skinnable()
private void set_Skinnable(Skinnable value)
public bool get_AllowInCrates()
private void set_AllowInCrates(bool value)
public bool get_IsLimitedTimeOffer()
private void set_IsLimitedTimeOffer(bool value)
public bool get_IsTwitchDrop()
private void set_IsTwitchDrop(bool value)
public void .ctor(ulong WorkshopdId, string Name, string Desc, string ItemName)
public ApprovedSkinInfo Store(Price Price, bool CanBeTraded, bool CanBeSold)
public ApprovedSkinInfo TimeLimited()
public ApprovedSkinInfo Unlimited()
public ApprovedSkinInfo NoCrate()
public ApprovedSkinInfo Drops(DropChance DropChance)
public ApprovedSkinInfo ItemId(ulong InventoryId)
public ApprovedSkinInfo TwitchDrop()
public Item op_Implicit(ApprovedSkinInfo o)
}
public Rust.Workshop.Category : Enum {
public int value__
public Category Shirt
public Category Pants
public Category Jacket
public Category Hat
public Category Mask
public Category Footwear
public Category Weapon
public Category Misc
public Category Deployable
public Category Gloves
}
public Rust.Workshop.DropChance : Enum {
public int value__
public DropChance Never
public DropChance VeryLow
public DropChance Low
public DropChance Medium
public DropChance High
public DropChance VeryHigh
}
public Rust.Workshop.Editor.ColorRow : MaterialRow {
public Button Reset
public Slider Red
public Slider Green
public Slider Blue
private Color Default
public bool IsDefault
public void Update()
public bool get_IsDefault()
public void Read(Material source, Material def)
public void ResetToDefault()
public void OnChanged()
}
public Rust.Workshop.Editor.FloatRow : MaterialRow {
public Button Reset
public Slider Slider
private float Default
public bool IsDefault
public void Update()
public bool get_IsDefault()
public void Read(Material source, Material def)
public void ResetToDefault()
public void OnChanged()
}
public Rust.Workshop.Editor.MaterialRow : MonoBehaviour {
public string ParamName
protected WorkshopItemEditor Editor
protected WorkshopItemEditor get_Editor()
public void Read(Material source, Material def)
}
public Rust.Workshop.Editor.Publisher : MonoBehaviour {
public InputField ChangeLog
public Button PublishButton
public Texture2D IconBackground
private Skinnable Skinnable
private Skin Skin
private ulong ItemId
private string Title
private GameObject Prefab
protected WorkshopInterface Interface
protected WorkshopItemEditor Editor
protected WorkshopInterface get_Interface()
protected WorkshopItemEditor get_Editor()
public void StartExport()
public void Update()
public bool CanPublish()
private Task DoExport(bool publishToSteam, bool OpenFolder, string forceFolderName)
private Task ExportToFolder(string folder, bool OpenFolder)
private void CreateWorkshopIcon(string folder)
private Task PublishToSteam(string folder)
private Task ExportTexture(Dictionary`2<string, string> data, string folder, int group, string paramname, Material mat, Material defaultMat, bool isNormalMap)
public void Export()
public Task DoExport()
}
public Rust.Workshop.Editor.TextureRow : MaterialRow {
private string Filename
public bool IsNormalMap
public RawImage TargetImage
public Text FilenameLabel
public Button Reset
public Button Clear
public bool HasChanges
private Texture Default
private FileSystemWatcher watcher
public bool IsDefault
public bool IsClear
public void Update()
public void SetFilenameText(string filename)
public void OnDisable()
public void OpenFileBrowser()
public IEnumerator BrowseForTexture()
public void Load(string fullname)
public void SetTexture(Texture tex)
public bool get_IsDefault()
public bool get_IsClear()
public void Read(Material source, Material def)
public void OpenFileLocation()
public void SaveFile()
private IEnumerator DoSaveFile()
public void ResetToDefault()
public void ResetToClear()
public void StartWatching()
public void FileChanged(string name)
public void StopWatching()
private void <StartWatching>b__26_0(object a, FileSystemEventArgs e)
}
internal Rust.Workshop.Editor.WorkshopPlayerPreview : MonoBehaviour {
internal GameObject Instance
protected WorkshopInterface Interface
protected WorkshopInterface get_Interface()
public void Setup(GameObject ClothingPrefab, ulong id, bool focus, bool IsClothing)
public void Cleanup()
private void OnDisable()
}
public Rust.Workshop.Editor.WorkshopView : MonoBehaviour {
public TextMeshProUGUI Title
public TextMeshProUGUI AuthorName
public TextMeshProUGUI VoteInfo
public Button VoteUp
public Button VoteDown
private IWorkshopContent item
protected WorkshopInterface Interface
protected WorkshopItemEditor Editor
protected WorkshopInterface get_Interface()
protected WorkshopItemEditor get_Editor()
public void Update()
public void UpdateFrom(IWorkshopContent item)
public void OnVoteUp()
public void OnVoteDown()
public void OpenWeb()
internal void Clear()
}
internal Rust.Workshop.Import.ImportVersion1 : SingletonComponent`1<ImportVersion1> {
internal IEnumerator DoImport(IWorkshopContent item, Skin skin)
}
internal Rust.Workshop.Import.ImportVersion2 : SingletonComponent`1<ImportVersion2> {
private AssetBundle Bundle
public void OnDisable()
internal IEnumerator DoImport(IWorkshopContent item, Skin skin)
public IEnumerator LoadItem(string Folder, string BundleName, Skin skin)
private IEnumerator ProcessMaterial(int v, Material inputMaterial, Skin skin)
private Texture2D ImportTexture(string name, Material inputMaterial, Material outputMaterial, bool normal, Skin skin, int group, string targetName)
private Texture2D ConvertMetalToSpec(Texture2D tex, Material outputMaterial)
}
internal Rust.Workshop.Import.ImportVersion3 : SingletonComponent`1<ImportVersion3> {
internal IEnumerator DoImport(IWorkshopContent item, Skin skin)
private IEnumerator DownloadFromWorkshop(IWorkshopContent item)
}
public Rust.Workshop.ItemSchema : object {
public int appid
public Item[] items
}
internal Rust.Workshop.ListType : Enum {
public int value__
public ListType MyItems
public ListType MostRecent
public ListType MostPopular
public ListType Trending
public ListType Accepted
}
public Rust.Workshop.Price : Enum {
public int value__
public Price NotForSale
public Price TwentyFiveCents
public Price FiftyCents
public Price OneDollar
public Price OneDollarFifty
public Price TwoDollars
public Price TwoDollarsFifty
public Price ThreeDollars
public Price ThreeDollarsFifty
public Price FourDollars
public Price FourDollarsFifty
public Price FiveDollars
public Price SixDollars
public Price SevenFifty
public Price TenDollars
public Price FifteenDollars
public Price TwentyDollars
public Price TwentyFiveDollars
}
public Rust.Workshop.Skin : object {
private string manifestName
private string manifestContent
private TextAsset manifestAsset
private Manifest manifest
private string iconName
public Sprite sprite
public int references
public Skinnable Skinnable
public Material[] Materials
public Material[] DefaultMaterials
public List`1<Texture> TextureAssets
public List`1<Texture> TextureObjects
private bool <AssetsRequested>k__BackingField
private bool <IconRequested>k__BackingField
private bool <AssetsLoaded>k__BackingField
private bool <IconLoaded>k__BackingField
public Action OnLoaded
public Action OnIconLoaded
public bool AssetsRequested
public bool IconRequested
public bool AssetsLoaded
public bool IconLoaded
private void LoadManifestFromFile()
private void DeserializeManifest()
public IEnumerator LoadIcon(ulong workshopId, string directory, AssetBundle bundle)
public IEnumerator LoadAssets(ulong workshopId, string directory, AssetBundle bundle)
public void UnloadAssets()
private void UpdateTextureMetadata(Texture2D texture, string textureName, bool anisoFiltering, bool trilinearFiltering)
internal void Apply(GameObject gameObject)
public int GetSizeInBytes()
public bool get_AssetsRequested()
public void set_AssetsRequested(bool value)
public bool get_IconRequested()
public void set_IconRequested(bool value)
public bool get_AssetsLoaded()
internal void set_AssetsLoaded(bool value)
public bool get_IconLoaded()
internal void set_IconLoaded(bool value)
public void Apply(GameObject obj, Skinnable skinnable, Material[] Materials)
internal void ReadDefaults()
}
public Rust.Workshop.WorkshopIconLoader : MonoBehaviour {
public Sprite Find(ulong workshopId, Sprite placeholder, Action callback)
}
public Rust.Workshop.WorkshopInterface : SingletonComponent`1<WorkshopInterface> {
internal WorkshopItemEditor Editor
internal WorkshopItemEditor get_Editor()
public void Exit()
public void RenderAllIcons()
}
internal Rust.Workshop.WorkshopItemButton : MonoBehaviour {
public TextMeshProUGUI Name
public TextMeshProUGUI Description
public HttpImage Icon
public GameObject OldIndicator
public GameObject Incompatible
public GameObject ItemDownloaded
public GameObject ItemDownloadPending
public GameObject ItemDownloading
private IWorkshopContent Item
internal void Init(IWorkshopContent item)
public void Update()
public void OpenWebpage()
public void StartEditing()
public void StartViewing()
}
public Rust.Workshop.WorkshopItemEditor : SingletonComponent`1<WorkshopItemEditor> {
private GameObject <Prefab>k__BackingField
private GameObject <ViewModel>k__BackingField
private Skinnable <Skinnable>k__BackingField
private Skin <Skin>k__BackingField
private ulong <ItemId>k__BackingField
public Action`2<bool, string> OnLoading
public Dropdown ItemTypeSelector
public InputField ItemTitleLabel
public WorkshopViewmodelControls ViewmodelControls
public GameObject MaterialTabHolder
public GameObject FileDialogObject
public GameObject[] EditorElements
public GameObject[] ClothOnlyElements
public GameObject[] DetailOnlyElements
public GameObject[] DirtOnlyElements
public Toggle[] MaterialTabs
public int EditingMaterial
public GameObject item_position_a
public GameObject item_position_b
private Regex ModelCleanup
internal GameObject Prefab
internal GameObject ViewModel
internal Skinnable Skinnable
internal Skin Skin
internal ulong ItemId
protected WorkshopInterface Interface
internal Publisher Publisher
public FileDialog FileDialog
public string ItemTitle
public string ChangeLog
internal GameObject get_Prefab()
internal void set_Prefab(GameObject value)
internal GameObject get_ViewModel()
internal void set_ViewModel(GameObject value)
internal Skinnable get_Skinnable()
internal void set_Skinnable(Skinnable value)
internal Skin get_Skin()
internal void set_Skin(Skin value)
internal ulong get_ItemId()
internal void set_ItemId(ulong value)
protected WorkshopInterface get_Interface()
internal void Loading(bool v1, string v2, string v3, float v4)
internal Publisher get_Publisher()
public FileDialog get_FileDialog()
public string get_ItemTitle()
public void set_ItemTitle(string value)
public string get_ChangeLog()
public void set_ChangeLog(string value)
private void OnEnable()
private void ClearEditor()
public void StartNewItem(string type)
public IEnumerator StartViewingItem(IWorkshopContent item)
public IEnumerator StartEditingItem(IWorkshopContent item)
private void HideEditor()
private void ShowEditor()
internal IEnumerator OpenItem(IWorkshopContent item)
private void OnImportFinished()
internal Texture2D SetTexture(string paramName, string fullName, bool isNormalMap)
internal void SetFloat(string paramName, float value)
internal void SetColor(string paramName, Color val)
internal void SetTexture(string paramName, Texture tex)
private bool LoadItemType(IEnumerable`1<string> tags)
private bool LoadItemType(string v)
private GameObject LoadForPreview(string entityPrefabName, bool preprocess)
public void OnChangedItemType(int type)
private void UpdateMaterialRows()
private void UpdateMaterialTabs()
private void InitScene()
private void InitPlayerPreview(ulong playerid, bool focus)
public void RandomizePlayerPreview()
public void DownloadModel()
public bool IsLesserLOD(string name)
public void RemoveLODs(GameObject prefab)
private void RemoveComponents(GameObject prefab)
private IEnumerator DoDownloadModel()
private void Update()
private void LateUpdate()
public void SwitchMaterial(int i)
private bool <LoadItemType>b__61_0(OptionData x)
}
internal Rust.Workshop.WorkshopItemList : MonoBehaviour {
private int StaticRefresh
public WorkshopItemButton ButtonPrefab
public GameObject Container
public ListType ListType
private int PerPage
public int Page
public Button PreviousPage
public Button NextPage
public Text PageInfo
public string ItemFilter
public Dropdown ItemTypeSelector
private int ForcedRefresh
private int TotalResults
private bool Refreshing
private int NumPages
public void RefreshAll()
private int get_NumPages()
private void Awake()
private void PageNext()
private void PagePrev()
public void OnChangedItemType(int type)
private void Update()
public void SwitchToLatest()
public void SwitchToTrending()
public void SwitchToPopular()
public void SwitchToAccepted()
public Task Refresh()
}
public Rust.Workshop.WorkshopSkin : MonoBehaviour {
public float DefaultTimeout
public bool AllowApply
public bool AllowUnload
public float DownloadTimeout
private WaitForSeconds waitForSeconds
private AssetBundleCreateRequest[] bundleRequests
private AssetBundle[] bundles
private ListDictionary`2<ulong, ListHashSet`1<WorkshopSkin>> RefreshQueue
private Queue`1<ulong> ItemQueue
private Queue`1<ulong> SkinQueue
private ListDictionary`2<ulong, IWorkshopContent> ItemCache
private ListDictionary`2<ulong, Skin> SkinCache
private ulong RequestedWorkshopID
private ulong AppliedWorkshopID
private Action`1<Skin> OnRefresh
private Action OnRefreshFail
private Skin AppliedSkin
public int QueuedCount
public int LoadedCount
public string GetStatus()
public int get_QueuedCount()
public int get_LoadedCount()
public Skin GetSkin(ulong workshopId)
public IWorkshopContent GetItem(ulong workshopId)
public void Apply(GameObject gameobj, ulong workshopId, Action`1<Skin> callback, Action failureCallback)
public void Reset(GameObject gameobj)
public void Prepare(GameObject gameobj)
protected void OnDestroy()
private void Apply(ulong workshopId, Action`1<Skin> callback, Action failureCallback)
private void EnqueueSkinRefresh(ulong workshopId)
private void LoadFromWorkshop(ulong workshopId, Action failureCallback)
private void DequeueSkinRefresh(ulong workshopId)
private void LoadOrUnloadSkinAssets(ulong workshopId, Action failureCallback)
private IEnumerator ItemQueueCoroutine(Action failureCallback)
private IEnumerator SkinQueueCoroutine()
private IEnumerator LoadItem(ulong workshopId, Action failureCallback)
private IEnumerator LoadSkin(ulong workshopId)
private int GetBundleIndex(ulong workshopId)
private void ApplySkin(Skin skin, ulong workshopId)
private void DoRefreshSuccessCallback(Skin skin)
private void DoRefreshFailureCallback()
private void UpdateSkinReference(Skin skin, ulong workshopId)
}
public Rust.Workshop.WorkshopViewmodelControls : MonoBehaviour {
public Toggle Enabled
public Toggle Ironsights
public Toggle admire
private void Clear()
internal void DoUpdate(GameObject ViewModel)
}
public Skinnable : ScriptableObject {
public string Name
public string ItemName
public GameObject EntityPrefab
public string EntityPrefabName
public GameObject ViewmodelPrefab
public string ViewmodelPrefabName
public Mesh[] MeshDownloads
public String[] MeshDownloadPaths
public Category Category
public bool HideInWorkshopUpload
public Group[] Groups
public Skinnable[] All
private Material[] _sourceMaterials
public Material[] SourceMaterials
public Skinnable FindForItem(string itemType)
public Skinnable FindForEntity(string entityName)
public Material[] get_SourceMaterials()
}
internal UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
private MonoScriptData Get()
}
public WorkshopBase : ScriptableObject {
public ulong itemID
public string title
public string description
public Texture2D previewImage
}
public WorkshopSkinBase : WorkshopBase {
public String[] itemName
public SkinType skinType
public Material skinMaterial0
public Material skinMaterial1
public Material skinMaterial2
public Material skinMaterial3
}
