public Rust.Workshop.Approved : object {
public ApprovedSkinInfo[] All
public ApprovedSkinInfo FindByInventoryId(ulong id)
}
public Rust.Workshop.ApprovedSkinInfo : object {
private ulong <InventoryId>k__BackingField
private string <Desc>k__BackingField
private string <Name>k__BackingField
private ulong <WorkshopdId>k__BackingField
private Price <Price>k__BackingField
private bool <Tradable>k__BackingField
private DropChance <DropChance>k__BackingField
private bool <Marketable>k__BackingField
private Skinnable <Skinnable>k__BackingField
private bool <AllowInCrates>k__BackingField
public ulong InventoryId
public string Desc
public string Name
public ulong WorkshopdId
internal Price Price
public bool Tradable
public DropChance DropChance
public bool Marketable
public Skinnable Skinnable
public bool AllowInCrates
public ulong get_InventoryId()
private void set_InventoryId(ulong value)
public string get_Desc()
private void set_Desc(string value)
public string get_Name()
private void set_Name(string value)
public ulong get_WorkshopdId()
private void set_WorkshopdId(ulong value)
internal Price get_Price()
private void set_Price(Price value)
public bool get_Tradable()
private void set_Tradable(bool value)
public DropChance get_DropChance()
private void set_DropChance(DropChance value)
public bool get_Marketable()
private void set_Marketable(bool value)
public Skinnable get_Skinnable()
private void set_Skinnable(Skinnable value)
public bool get_AllowInCrates()
private void set_AllowInCrates(bool value)
public void .ctor(ulong WorkshopdId, string Name, string Desc, string ItemName)
public ApprovedSkinInfo Store(Price Price, bool CanBeTraded, bool CanBeSold)
public ApprovedSkinInfo NoCrate()
public ApprovedSkinInfo Drops(DropChance DropChance)
public ApprovedSkinInfo ItemId(ulong InventoryId)
public Item op_Implicit(ApprovedSkinInfo o)
}
public Rust.Workshop.Category : Enum {
public int value__
public Category Shirt
public Category Pants
public Category Jacket
public Category Hat
public Category Mask
public Category Footwear
public Category Weapon
public Category Misc
public Category Deployable
}
public Rust.Workshop.DropChance : Enum {
public int value__
public DropChance Never
public DropChance VeryLow
public DropChance Low
public DropChance Medium
public DropChance High
public DropChance VeryHigh
}
public Rust.Workshop.Editor.ColorRow : MaterialRow {
public Button Reset
public Slider Red
public Slider Green
public Slider Blue
private Color Default
public bool IsDefault
public void Update()
public bool get_IsDefault()
public void Read(Material source, Material def)
public void ResetToDefault()
public void OnChanged()
}
public Rust.Workshop.Editor.FloatRow : MaterialRow {
public Button Reset
public Slider Slider
private float Default
public bool IsDefault
public void Update()
public bool get_IsDefault()
public void Read(Material source, Material def)
public void ResetToDefault()
public void OnChanged()
}
public Rust.Workshop.Editor.MaterialRow : MonoBehaviour {
public string ParamName
protected WorkshopItemEditor Editor
protected WorkshopItemEditor get_Editor()
public void Read(Material source, Material def)
}
internal Rust.Workshop.Editor.Publisher : MonoBehaviour {
public InputField ChangeLog
public Button PublishButton
public Texture2D IconBackground
private Skinnable Skinnable
private Skin Skin
private ulong ItemId
private string Title
private GameObject Prefab
protected WorkshopInterface Interface
protected WorkshopItemEditor Editor
protected WorkshopInterface get_Interface()
protected WorkshopItemEditor get_Editor()
public void StartExport()
public void Update()
public bool CanPublish()
private IEnumerator DoExport(bool publishToSteam, bool OpenFolder, string forceFolderName)
private IEnumerator ExportToFolder(string folder, bool OpenFolder)
private void CreateWorkshopIcon(string folder)
private IEnumerator PublishToSteam(string folder)
private IEnumerator ExportTexture(Dictionary`2<string, string> data, string folder, int group, string paramname, Material mat, Material defaultMat, bool isNormalMap)
public void Export()
public IEnumerator DoExport()
}
public Rust.Workshop.Editor.TextureRow : MaterialRow {
private string Filename
public bool IsNormalMap
public RawImage TargetImage
public Text FilenameLabel
public Button Reset
public Button Clear
public bool HasChanges
private Texture Default
private FileSystemWatcher watcher
public bool IsDefault
public bool IsClear
public void Update()
public void SetFilenameText(string filename)
public void OnDisable()
public void OpenFileBrowser()
public IEnumerator BrowseForTexture()
public void Load(string fullname)
public void SetTexture(Texture tex)
public bool get_IsDefault()
public bool get_IsClear()
public void Read(Material source, Material def)
public void OpenFileLocation()
public void SaveFile()
private IEnumerator DoSaveFile()
public void ResetToDefault()
public void ResetToClear()
public void StartWatching()
public void FileChanged(string name)
public void StopWatching()
private void <StartWatching>b__26_0(object a, FileSystemEventArgs e)
}
internal Rust.Workshop.Editor.WorkshopPlayerPreview : MonoBehaviour {
internal GameObject Instance
protected WorkshopInterface Interface
protected WorkshopInterface get_Interface()
public void Setup(GameObject ClothingPrefab, ulong id, bool focus, bool IsClothing)
public void Cleanup()
private void OnDisable()
}
public Rust.Workshop.Editor.WorkshopView : MonoBehaviour {
public Text Title
public Text AuthorName
public Text VoteInfo
public Button VoteUp
public Button VoteDown
private Item item
protected WorkshopInterface Interface
protected WorkshopItemEditor Editor
protected WorkshopInterface get_Interface()
protected WorkshopItemEditor get_Editor()
public void Update()
public void UpdateFrom(Item item)
public void OnVoteUp()
public void OnVoteDown()
public void OpenWeb()
internal void Clear()
}
public Rust.Workshop.Game.WorkshopCraftInfoModal : MonoBehaviour {
public Text Name
public Text Requirements
public Text Label
public HttpImage IconImage
public GameObject ErrorPanel
public Text ErrorText
public GameObject CraftButton
public GameObject ProgressPanel
private Recipe Recipe
public void Open(int ItemDefinition)
public string BBCodeToUnity(string x)
public void DoCraft()
private IEnumerator CraftAnimation(Result result)
public void Close()
}
public Rust.Workshop.Game.WorkshopInventoryCraftingControls : MonoBehaviour {
public GameObject Container
public Button ConvertToItem
internal List`1<Result> CraftingResult
public Text WoodAmount
public Text ClothAmount
public Text MetalAmount
public int SelectedCount
public Text InfoText
private Definition <ResultItem>k__BackingField
private Coroutine <MarketCoroutine>k__BackingField
public WorkshopCraftInfoModal CraftModal
public GameObject CraftingContainer
public GameObject CraftingButton
private Dictionary`2<int, MarketPrice> priceCache
public Definition ResultItem
public Coroutine MarketCoroutine
public Definition get_ResultItem()
private void set_ResultItem(Definition value)
public Coroutine get_MarketCoroutine()
private void set_MarketCoroutine(Coroutine value)
public void OnEnable()
private void FillCraftingContainer()
public void Update()
private void OnChanged(WorkshopInventoryItem[] items)
private void UpdateInfoText(int length, Definition definition)
private IEnumerator GetMarketPrice(Definition definition)
public void DoExchange()
private IEnumerator ExchangeItems(WorkshopInventoryItem[] selected)
private void UpdateCraft()
public void OnRefreshed(Item[] items)
public void OnManualRefresh()
private GameObject <FillCraftingContainer>b__20_1(Definition x)
}
public Rust.Workshop.Game.WorkshopInventoryItem : MonoBehaviour {
public Item Item
public HttpImage Image
public void Setup(Item item, bool PlayNewAnimation)
}
internal Rust.Workshop.Import.ImportVersion1 : SingletonComponent`1<ImportVersion1> {
protected WorkshopInterface Interface
protected WorkshopInterface get_Interface()
internal void DoImport(Item item, Skin skin, Action onImportFinished)
private IEnumerator RunImport(Item item, Skin skin, Action onImportFinished)
}
internal Rust.Workshop.Import.ImportVersion2 : SingletonComponent`1<ImportVersion2> {
private AssetBundle Bundle
protected WorkshopInterface Interface
protected WorkshopInterface get_Interface()
public void OnDisable()
internal void DoImport(Item item, Skin skin, Action onImportFinished)
private IEnumerator RunImport(Item item, Skin skin, Action onImportFinished)
public IEnumerator LoadItem(string Folder, string BundleName, Skin skin)
private IEnumerator ProcessMaterial(int v, Material inputMaterial, Skin skin)
private Texture2D ImportTexture(string name, Material inputMaterial, Material outputMaterial, bool normal, Skin skin, int group, string targetName)
private Texture2D ConvertMetalToSpec(Texture2D tex, Material outputMaterial)
}
internal Rust.Workshop.Import.ImportVersion3 : SingletonComponent`1<ImportVersion3> {
protected WorkshopInterface Interface
protected WorkshopInterface get_Interface()
internal void DoImport(Item item, Skin skin, Action OnImportFinished)
private IEnumerator StartImport(Item item, Skin skin, Action OnImportFinished)
private IEnumerator DownloadFromWorkshop(Item item)
}
public Rust.Workshop.ItemSchema : object {
public int appid
public Item[] items
}
internal Rust.Workshop.ListType : Enum {
public int value__
public ListType MyItems
public ListType MostRecent
public ListType MostPopular
public ListType Trending
public ListType Accepted
}
public Rust.Workshop.Price : Enum {
public int value__
public Price NotForSale
public Price TwentyFiveCents
public Price FiftyCents
public Price OneDollar
public Price TwoDollars
public Price TwoDollarsFifty
public Price ThreeDollars
public Price FourDollars
public Price FiveDollars
public Price TenDollars
public Price FifteenDollars
public Price TwentyDollars
public Price TwentyFiveDollars
}
public Rust.Workshop.Skin : object {
public bool Cache
private string manifestName
private Manifest manifest
public Sprite sprite
public Skinnable Skinnable
public Material[] Materials
public Material[] DefaultMaterials
private bool <Loaded>k__BackingField
private bool <IconLoaded>k__BackingField
public Action OnLoaded
public Action OnIconLoaded
public bool Loaded
public bool IconLoaded
private void LoadManifestFromFile()
public IEnumerator FromFolder(DirectoryInfo directory, LoadingBar loadingBar)
private void UpdateTextureMetadata(Texture2D texture, string textureName, bool anisoFiltering, bool trilinearFiltering)
internal void Apply(GameObject gameObject)
public bool get_Loaded()
internal void set_Loaded(bool value)
public bool get_IconLoaded()
internal void set_IconLoaded(bool value)
public void Apply(GameObject obj, Skinnable skinnable, Material[] Materials)
private bool IsSkinnable(string name)
private bool CompareMaterials(Material a, Material b)
internal void ReadDefaults()
}
public Rust.Workshop.WorkshopIconLoader : MonoBehaviour {
public Sprite Find(ulong workshopId, Sprite placeholder, Action callback)
}
public Rust.Workshop.WorkshopInterface : MonoBehaviour {
public GameObject item_position_a
public GameObject item_position_b
private string _backgroundScene
internal LoadingBar LoadingBar
internal WorkshopItemEditor Editor
internal WorkshopMenu Menu
public string BackgroundScene
internal LoadingBar get_LoadingBar()
internal WorkshopItemEditor get_Editor()
internal WorkshopMenu get_Menu()
public void CreateNewItem()
public void StartEditing(Item item)
public void StartViewing(Item item)
public void OpenMenu()
public void Exit()
public void Update()
public void Awake()
public void set_BackgroundScene(string value)
public string get_BackgroundScene()
public void RenderAllIcons()
}
internal Rust.Workshop.WorkshopItemButton : MonoBehaviour {
public Text Name
public Text Description
public HttpImage Icon
public GameObject OldIndicator
public GameObject Incompatible
public GameObject ItemDownloaded
public GameObject ItemDownloadPending
public GameObject ItemDownloading
private Item Item
protected WorkshopInterface Interface
protected WorkshopInterface get_Interface()
internal void Init(Item item)
public void Update()
public void OpenWebpage()
public void StartEditing()
public void StartViewing()
}
public Rust.Workshop.WorkshopItemEditor : SingletonComponent`1<WorkshopItemEditor> {
private GameObject <Prefab>k__BackingField
private GameObject <AltPrefab>k__BackingField
private GameObject <ViewModel>k__BackingField
private Skinnable <Skinnable>k__BackingField
private Skin <Skin>k__BackingField
private ulong <ItemId>k__BackingField
public Dropdown ItemTypeSelector
public InputField ItemTitleLabel
public WorkshopViewmodelControls ViewmodelControls
public GameObject MaterialTabHolder
public GameObject FileDialogObject
public GameObject[] EditorElements
public GameObject[] ClothOnlyElements
public Toggle[] MaterialTabs
public int EditingMaterial
internal GameObject Prefab
internal GameObject AltPrefab
internal GameObject ViewModel
internal Skinnable Skinnable
internal Skin Skin
internal ulong ItemId
protected WorkshopInterface Interface
internal Publisher Publisher
public FileDialog FileDialog
public string ItemTitle
public string ChangeLog
internal GameObject get_Prefab()
internal void set_Prefab(GameObject value)
internal GameObject get_AltPrefab()
internal void set_AltPrefab(GameObject value)
internal GameObject get_ViewModel()
internal void set_ViewModel(GameObject value)
internal Skinnable get_Skinnable()
internal void set_Skinnable(Skinnable value)
internal Skin get_Skin()
internal void set_Skin(Skin value)
internal ulong get_ItemId()
internal void set_ItemId(ulong value)
protected WorkshopInterface get_Interface()
internal Publisher get_Publisher()
public FileDialog get_FileDialog()
public string get_ItemTitle()
public void set_ItemTitle(string value)
public string get_ChangeLog()
public void set_ChangeLog(string value)
private void OnEnable()
private void Clear()
internal void StartNewItem(string type)
internal void StartViewingItem(Item item)
internal void StartEditingItem(Item item)
private void HideEditor()
private void ShowEditor()
internal void OpenItem(Item item)
private void OnImportFinished()
internal Texture2D SetTexture(string paramName, string fullName, bool isNormalMap)
internal void SetFloat(string paramName, float value)
internal void SetColor(string paramName, Color val)
internal void SetTexture(string paramName, Texture tex)
private bool LoadItemType(String[] tags)
private bool LoadItemType(string v)
public void OnChangedItemType(int type)
private void UpdateMaterialRows()
private void UpdateMaterialTabs()
private void InitScene()
private void InitPlayerPreview(ulong playerid, bool focus)
public void RandomizePlayerPreview()
public void DownloadModel()
public bool IsLesserLOD(string name)
public void RemoveLODs(GameObject prefab)
private IEnumerator DoDownloadModel()
private void LateUpdate()
public void SwitchMaterial(int i)
private bool <LoadItemType>b__59_0(OptionData x)
}
internal Rust.Workshop.WorkshopItemList : MonoBehaviour {
private int StaticRefresh
public WorkshopItemButton ButtonPrefab
public GameObject Container
public ListType ListType
public int PerPage
public int Page
public Button PreviousPage
public Button NextPage
public Text PageInfo
public string ItemFilter
public Dropdown ItemTypeSelector
private int ForcedRefresh
private int TotalResults
private bool Refreshing
private int NumPages
public void RefreshAll()
private int get_NumPages()
private void OnEnable()
private void PageNext()
private void PagePrev()
public void OnChangedItemType(int type)
private void OnDisable()
private void Update()
public void SwitchToLatest(bool b)
public void SwitchToTrending(bool b)
public void SwitchToPopular(bool b)
public void SwitchToAccepted(bool b)
public IEnumerator Refresh()
}
internal Rust.Workshop.WorkshopItemVoteGame : MonoBehaviour {
public Button VoteButton
private Item[] Items
private Item CurrentItem
public void Awake()
public void UpdateList()
private void OnWorkshopQuery(Query query)
public void Refresh()
public void OnVoteYes()
public void OnVoteNo()
public void OpenItem()
private void OnVoted()
private bool <Refresh>b__6_0(Item x)
}
internal Rust.Workshop.WorkshopMenu : MonoBehaviour {
protected WorkshopItemEditor Editor
protected WorkshopItemEditor get_Editor()
}
public Rust.Workshop.WorkshopSkin : MonoBehaviour {
public bool AllowApply
public float DownloadTimeout
private WaitForSeconds waitForSeconds
private ListDictionary`2<ulong, ListHashSet`1<WorkshopSkin>> RefreshQueue
private Queue`1<ulong> ItemQueue
private Queue`1<ulong> SkinQueue
private ListDictionary`2<ulong, Item> ItemCache
private ListDictionary`2<ulong, Skin> SkinCache
private ulong WorkshopID
private Action OnRefresh
public int QueuedCount
public int LoadedCount
public string GetStatus()
public int get_QueuedCount()
public int get_LoadedCount()
public Skin GetSkin(ulong workshopId)
public Item GetItem(ulong workshopId)
public void Apply(GameObject gameobj, ulong workshopId, Action callback)
protected void OnDisable()
private void Apply(ulong workshopId, Action callback)
private void EnqueueSkinRefresh(ulong workshopId)
private void LoadFromWorkshop(ulong workshopId)
private void DequeueSkinRefresh(ulong workshopId)
private IEnumerator ItemQueueCoroutine()
private IEnumerator SkinQueueCoroutine()
private IEnumerator LoadItem(ulong workshopId)
private IEnumerator LoadSkin(ulong workshopId)
private void ApplySkin(Skin skin)
}
public Rust.Workshop.WorkshopViewmodelControls : MonoBehaviour {
public Toggle Enabled
public Toggle Ironsights
private void Clear()
internal void DoUpdate(GameObject ViewModel)
}
public Skinnable : ScriptableObject {
public string Name
public string ItemName
public GameObject EntityPrefab
public string EntityPrefabName
public GameObject ViewmodelPrefab
public string ViewmodelPrefabName
public Mesh[] MeshDownloads
public Category Category
public Group[] Groups
public Skinnable[] All
private Material[] _sourceMaterials
public Material[] SourceMaterials
public Skinnable Find(string itemType)
public Material[] get_SourceMaterials()
}
public WorkshopBase : ScriptableObject {
public ulong itemID
public string title
public string description
public Texture2D previewImage
}
public WorkshopSkinBase : WorkshopBase {
public String[] itemName
public SkinType skinType
public Material skinMaterial0
public Material skinMaterial1
public Material skinMaterial2
public Material skinMaterial3
}
