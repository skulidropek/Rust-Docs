public static class Rust.Workshop.Approved : object {
    private static Dictionary`2<ulong, ApprovedSkinInfo> _all;
    public static IReadOnlyDictionary`2<ulong, ApprovedSkinInfo> All { get; }
    private static void Add_2016();
    private static void Add_December_29_2016();
    private static void Add_December_22_2016();
    private static void Add_December_15_2016();
    private static void Add_December_8_2016();
    private static void Add_December_2_2018();
    private static void Add_December_1_2016();
    private static void Add_November_24_2016();
    private static void Add_November_17_2016();
    private static void Add_November_16_2016();
    private static void Add_November_10_2016();
    private static void Add_November_3_2016();
    private static void Add_2017();
    private static void Add_December_28_2017();
    private static void Add_December_21_2017();
    private static void Add_December_14_2017();
    private static void Add_December_7_2017();
    private static void Add_November_30_2017();
    private static void Add_November_23_2017();
    private static void Add_November_16_2017();
    private static void Add_November_9_2017();
    private static void Add_November_2_2017();
    private static void Add_October_26_2017();
    private static void Add_October_19_2017();
    private static void Add_October_12_2017();
    private static void Add_October_5_2017();
    private static void Add_September_28_2017();
    private static void Add_September_21_2017();
    private static void Add_September_14_2017();
    private static void Add_September_7_2017();
    private static void Add_August_31_2017();
    private static void Add_August_24_2017();
    private static void Add_August_17_2017();
    private static void Add_August_10_2017();
    private static void Add_August_3_2017();
    private static void Add_July_27_2017();
    private static void Add_July_20_2017();
    private static void Add_July_13_2017();
    private static void Add_July_6_2017();
    private static void Add_June_29_2017();
    private static void Add_June_15_2017();
    private static void Add_June_8_2017();
    private static void Add_June_1_2017();
    private static void Add_May_25_2017();
    private static void Add_May_18_2017();
    private static void Add_May_11_2017();
    private static void Add_May_4_2017();
    private static void Add_April_27_2017();
    private static void Add_April_20_2017();
    private static void Add_April_13_2017();
    private static void Add_April_6_2017();
    private static void Add_March_30_2017();
    private static void Add_March_23_2017();
    private static void Add_March_15_2017();
    private static void Add_March_8_2017();
    private static void Add_March_2_2017();
    private static void Add_February_23_2017();
    private static void Add_February_16_2017();
    private static void Add_February_9_2017();
    private static void Add_February_2_2017();
    private static void Add_January_18_2017();
    private static void Add_January_12_2017();
    private static void Add_January_4_2017();
    private static void Add_2018();
    private static void Add_December_20_2018();
    private static void Add_December_13_2020();
    private static void Add_December_6_2018();
    private static void Add_November_29_2018();
    private static void Add_November_22_2018();
    private static void Add_November_15_2018();
    private static void Add_November_9_2018();
    private static void Add_November_1_2018();
    private static void Add_October_26_2018();
    private static void Add_October_19_2018();
    private static void Add_October_11_2018();
    private static void Add_October_4_2018();
    private static void Add_September_27_2018();
    private static void Add_September_20_2018();
    private static void Add_September_14_2018();
    private static void Add_September_5_2018();
    private static void Add_August_23_2018();
    private static void Add_August_16_2018();
    private static void Add_August_9_2018();
    private static void Add_August_2_2018();
    private static void Add_July_26_2018();
    private static void Add_July_19_2018();
    private static void Add_July_12_2018();
    private static void Add_July_5_2018();
    private static void Add_June_28_2018();
    private static void Add_June_22_2018();
    private static void Add_June_14_2018();
    private static void Add_June_7_2018();
    private static void Add_May_31_2018();
    private static void Add_May_24_2018();
    private static void Add_May_2_2018();
    private static void Add_April_26_2018();
    private static void Add_April_19_2018();
    private static void Add_April_12_2018();
    private static void Add_April_5_2018();
    private static void Add_March_29_2018();
    private static void Add_March_22_2018();
    private static void Add_March_15_2018();
    private static void Add_March_8_2018();
    private static void Add_March_1_2018();
    private static void Add_February_22_2018();
    private static void Add_February_15_2018();
    private static void Add_February_8_2018();
    private static void Add_February_1_2018();
    private static void Add_January_25_2018();
    private static void Add_January_18_2018();
    private static void Add_January_11_2018();
    private static void Add_January_4_2018();
    private static void Add_2019();
    private static void Add_December_27_2019();
    private static void Add_December_19_2019();
    private static void Add_December_12_2019();
    private static void Add_December_5_2019();
    private static void Add_November_28_2019();
    private static void Add_November_21_2019();
    private static void Add_November_14_2019();
    private static void Add_November_7_2019();
    private static void Add_October_31_2019();
    private static void Add_October_24_2019();
    private static void Add_October_18_2019();
    private static void Add_October_11_2019();
    private static void Add_October_3_2019();
    private static void Add_September_26_2019();
    private static void Add_September_19_2019();
    private static void Add_September_12_2019();
    private static void Add_September_9_2019();
    private static void Add_August_29_2019();
    private static void Add_August_22_2019();
    private static void Add_August_15_2019();
    private static void Add_August_9_2019();
    private static void Add_August_1_2019();
    private static void Add_July_26_2019();
    private static void Add_July_19_2019();
    private static void Add_July_12_2019();
    private static void Add_July_5_2019();
    private static void Add_June_28_2019();
    private static void Add_June_21_2019();
    private static void Add_June_14_2019();
    private static void Add_June_6_2019();
    private static void Add_May_30_2019();
    private static void Add_May_23_2019();
    private static void Add_May_16_2019();
    private static void Add_May_9_2019();
    private static void Add_May_2_2019();
    private static void Add_April_25_2019();
    private static void Add_April_19_2019();
    private static void Add_April_11_2019();
    private static void Add_April_5_2019();
    private static void Add_March_28_2019();
    private static void Add_March_22_2019();
    private static void Add_March_14_2019();
    private static void Add_March_7_2019();
    private static void Add_February_28_2019();
    private static void Add_February_22_2019();
    private static void Add_February_14_2019();
    private static void Add_February_7_2019();
    private static void Add_January_31_2019();
    private static void Add_January_24_2019();
    private static void Add_January_17_2019();
    private static void Add_January_10_2019();
    private static void Add_January_3_2019();
    private static void Add_2020();
    private static void Add_December_31_2020();
    private static void Add_December_24_2020();
    private static void Add_December_18_2020();
    private static void Add_December_10_2020();
    private static void Add_December_03_2020();
    private static void Add_November_26_2020();
    private static void Add_November_19_2020();
    private static void Add_November_12_2020();
    private static void Add_November_05_2020();
    private static void Add_October_29_2020();
    private static void Add_October_22_2020();
    private static void Add_October_16_2020();
    private static void Add_October_8_2020();
    private static void Add_October_1_2020();
    private static void Add_September_24_2020();
    private static void Add_September_17_2020();
    private static void Add_September_10_2020();
    private static void Add_September_3_2020();
    private static void Add_August_27_2020();
    private static void Add_August_21_2020();
    private static void Add_August_13_2020();
    private static void Add_August_06_2020();
    private static void Add_July_31_2020();
    private static void Add_July_24_2020();
    private static void Add_July_17_2020();
    private static void Add_July_9_2020();
    private static void Add_July_2_2020();
    private static void Add_June_26_2020();
    private static void Add_June_19_2020();
    private static void Add_June_11_2020();
    private static void Add_June_4_2020();
    private static void Add_May_28_2020();
    private static void Add_May_21_2020();
    private static void Add_May_14_2020();
    private static void Add_May_8_2020();
    private static void Add_April_30_2020();
    private static void Add_April_24_2020();
    private static void Add_April_16_2020();
    private static void Add_April_9_2020();
    private static void Add_April_2_2020();
    private static void Add_March_28_2020();
    private static void Add_March_20_2020();
    private static void Add_March_13_2020();
    private static void Add_March_5_2020();
    private static void Add_February_27_2020();
    private static void Add_February_21_2020();
    private static void Add_February_13_2020();
    private static void Add_February_6_2020();
    private static void Add_January_31_2020();
    private static void Add_January_17_2020();
    private static void Add_January_10_2020();
    private static void Add_January_2_2020();
    private static void Add_2021();
    private static void Add_December_30_2021();
    private static void Add_December_23_2021();
    private static void Add_December_16_2021();
    private static void Add_December_09_2021();
    private static void Add_December_02_2021();
    private static void Add_November_25_2021();
    private static void Add_November_19_2021_TWITCHDROPS();
    private static void Add_November_18_2021();
    private static void Add_November_19_2021_CHARITABLE_RUST();
    private static void Add_November_11_2021();
    private static void Add_November_04_2021();
    private static void Add_October_27_2021();
    private static void Add_October_21_2021();
    private static void Add_October_14_2021();
    private static void Add_October_07_2021();
    private static void Add_September_30_2021();
    private static void Add_September_23_2021();
    private static void Add_September_16_2021();
    private static void Add_September_09_2021();
    private static void Add_September_02_2021();
    private static void Add_September_01_2021_STREAMERSKINS();
    private static void Add_August_26_2021();
    private static void Add_August_19_2021();
    private static void Add_August_12_2021();
    private static void Add_August_04_2021();
    private static void Add_July_29_2021();
    private static void Add_July_22_2021();
    private static void Add_July_15_2021_STREAMERSKINS();
    private static void Add_July_15_2021();
    private static void Add_July_08_2021();
    private static void Add_July_05_2021_STREAMERSKINS();
    private static void Add_July_01_2021();
    private static void Add_June_24_2021();
    private static void Add_June_17_2021();
    private static void Add_June_10_2021();
    private static void Add_June_03_2021();
    private static void Add_May_27_2021();
    private static void Add_May_20_2021();
    private static void Add_May_13_2021();
    private static void Add_May_06_2021();
    private static void Add_May_05_2021_STREAMERSKINS();
    private static void Add_April_29_2021();
    private static void Add_April_22_2021();
    private static void Add_April_15_2021();
    private static void Add_April_09_2021();
    private static void Add_April_01_2021();
    private static void Add_March_31_2021_STREAMERSKINS();
    private static void Add_March_25_2021();
    private static void Add_March_18_2021();
    private static void Add_March_11_2021();
    private static void Add_March_04_2021();
    private static void Add_March_03_2021_STREAMERSKINS();
    private static void Add_February_25_2021();
    private static void Add_February_18_2021();
    private static void Add_February_11_2021();
    private static void Add_February_10_2021_STREAMERSKINS();
    private static void Add_February_04_2021();
    private static void Add_February_03_2021_STREAMERSKINS();
    private static void Add_January_28_2021();
    private static void Add_January_21_2021();
    private static void Add_January_15_2021_STREAMERSKINS();
    private static void Add_January_14_2021();
    private static void Add_January_07_2021();
    private static void Add_January_06_2021_STREAMERSKINS();
    private static void Add_2022();
    private static void Add_December_29_2022();
    private static void Add_December_22_2022();
    private static void Add_December_15_2022();
    private static void Add_December_08_2022();
    private static void Add_December_01_2022();
    private static void Add_November_24_2022();
    private static void Add_november_18_CHARITABLERUST_FORSALE();
    private static void Add_November_18_2022();
    private static void Add_November_10_2022_CHARITABLERUST();
    private static void Add_November_10_2022();
    private static void Add_November_03_2022();
    private static void Add_October_27_2022();
    private static void Add_October_20_2022();
    private static void Add_October_13_2022();
    private static void Add_October_06_2022();
    private static void Add_October_04_2022_STREAMERSKINS();
    private static void Add_September_28_2022();
    private static void Add_September_22_2022();
    private static void Add_September_15_2022();
    private static void Add_September_08_2022();
    private static void Add_September_01_2022();
    private static void Add_August_25_2022();
    private static void Add_August_18_2022();
    private static void Add_August_11_2022();
    private static void Add_August_08_2022_STREAMERSKINS();
    private static void Add_August_04_2022();
    private static void Add_July_28_2022();
    private static void Add_July_21_2022();
    private static void Add_July_14_2022();
    private static void Add_July_07_2022();
    private static void Add_June_30_2022();
    private static void Add_June_23_2022();
    private static void Add_June_16_2022();
    private static void Add_June_09_2022();
    private static void Add_June_02_2022();
    private static void Add_May_26_2022();
    private static void Add_May_19_2022();
    private static void Add_May_12_2022();
    private static void Add_May_05_2022();
    private static void Add_May_04_2022_STREAMERSKINS();
    private static void Add_April_28_2022();
    private static void Add_April_21_2022();
    private static void Add_April_14_2022_EASTER();
    private static void Add_April_13_2022_STREAMERSKINS();
    private static void Add_April_07_2022();
    private static void Add_March_31_2022();
    private static void Add_March_24_2022();
    private static void Add_March_17_2022_STREAMERSKINS();
    private static void Add_March_17_2022();
    private static void Add_March_10_2022();
    private static void Add_March_03_2022();
    private static void Add_February_24_2022();
    private static void Add_February_17_2022();
    private static void Add_February_10_2022();
    private static void Add_February_03_2022();
    private static void Add_February_01_2022_STREAMERSKINS();
    private static void Add_January_28_2022();
    private static void Add_January_20_2022();
    private static void Add_January_13_2022();
    private static void Add_January_06_2022_STREAMERSKINS();
    private static void Add_January_06_2022();
    private static void Add_2023();
    private static void Add_December_28_2023();
    private static void Add_December_21_2023();
    private static void Add_December_14_2023();
    private static void Add_December_07_2023();
    private static void Add_November_30_2023_TWITCHDROPS();
    private static void Add_November_30_2023();
    private static void Add_November_23_2023();
    private static void Add_November_15_2023();
    private static void Add_November_09_2023();
    private static void Add_November_02_2023();
    private static void Add_October_26_2023();
    private static void Add_October_19_2023();
    private static void Add_October_12_2023();
    private static void Add_October_12_2023_CHARITABLERUST_FORSALE();
    private static void Add_October_10_2023_CHARITABLERUST();
    private static void Add_October_05_2023();
    private static void Add_September_28_2023();
    private static void Add_September_21_2023();
    private static void Add_September_14_2023();
    private static void Add_September_07_2023();
    private static void Add_September_06_2023_TWITCHDROPS();
    private static void Add_August_31_2023();
    private static void Add_August_24_2023();
    private static void Add_August_17_2023();
    private static void Add_August_10_2023();
    private static void Add_August_03_2023();
    private static void Add_July_27_2023();
    private static void Add_July_20_2023();
    private static void Add_July_13_2023();
    private static void Add_July_06_2023();
    private static void Add_June_29_2023();
    private static void Add_June_22_2023();
    private static void Add_June_15_2023();
    private static void Add_June_08_2023_STREAMERSKINS();
    private static void Add_June_08_2023();
    private static void Add_June_01_2023();
    private static void Add_May_25_2023();
    private static void Add_May_18_2023();
    private static void Add_May_11_2023();
    private static void Add_May_11_2023_TWITCHDROPS();
    private static void Add_May_04_2023();
    private static void Add_April_27_2023();
    private static void Add_April_21_2023();
    private static void Add_April_13_2023_EASTER2();
    private static void Add_April_06_2023_EASTER();
    private static void Add_March_30_2023();
    private static void Add_March_23_2023();
    private static void Add_March_17_2023();
    private static void Add_March_09_2023();
    private static void Add_March_01_2023();
    private static void Add_February_23_2023();
    private static void Add_February_16_2023();
    private static void Add_February_09_VALENTINES();
    private static void Add_February_02_2023();
    private static void Add_January_26_2023();
    private static void Add_January_18_2023_LUNAR();
    private static void Add_January_12_2023();
    private static void Add_January_12_2023_TRUST_IN_RUST_TWITCH_DROPS();
    private static void Add_January_12_2023_TRUST_IN_RUST_STORE();
    private static void Add_January_05_2023();
    private static void Add_2024();
    private static void Add_October_24_2024();
    private static void Add_October_17_2024();
    private static void Add_October_10_2024();
    private static void Add_October_10_2024_CHARITABLE_RUST_DROPS();
    private static void Add_October_10_2024_CHARITABLE_RUST_FORSALE();
    private static void Add_October_02_2024();
    private static void Add_September_26_2024();
    private static void Add_September_19_2024();
    private static void Add_September_12_2024();
    private static void Add_September_08_2024_TWITCHDROPS();
    private static void Add_September_05_2024();
    private static void Add_August_29_2024();
    private static void Add_August_22_2024();
    private static void Add_August_15_2024();
    private static void Add_August_08_2024();
    private static void Add_August_02_2024_TWITCHDROPS();
    private static void Add_August_01_2024();
    private static void Add_July_25_2024();
    private static void Add_July_18_2024();
    private static void Add_July_13_2024_GLOBALWARFARE();
    private static void Add_July_11_2024();
    private static void Add_July_04_2024();
    private static void Add_June_27_2024();
    private static void Add_June_20_2024();
    private static void Add_June_13_2024();
    private static void Add_June_06_2024_TWITCHDROPS();
    private static void Add_June_06_2024();
    private static void Add_May_30_2023();
    private static void Add_May_23_2024_STREAMERSKINS();
    private static void Add_May_23_2024();
    private static void Add_May_16_2024();
    private static void Add_May_09_2024();
    private static void Add_May_02_2024();
    private static void Add_April_25_2024();
    private static void Add_April_18_2024();
    private static void Add_April_11_2024();
    private static void Add_April_04_2024();
    private static void Add_March_28_2024();
    private static void Add_March_21_2024_EASTER_1();
    private static void Add_March_14_2024();
    private static void Add_March_07_2024();
    private static void Add_February_29_2024();
    private static void Add_February_22_2024();
    private static void Add_February_15_2023();
    private static void Add_February_14_2024();
    private static void Add_February_08_2024();
    private static void Add_February_01_2024();
    private static void Add_January_25_2024();
    private static void Add_January_18_2024();
    private static void Add_Janury_11_2024_TIR_DROPS();
    private static void Add_January_11_2024();
    private static void Add_January_11_2024_TIR_SALE();
    private static void Add_January_04_2024();
    public static IReadOnlyDictionary`2<ulong, ApprovedSkinInfo> get_All();
    private static void Initialize();
    private static void Add(ApprovedSkinInfo skin);
    public static ApprovedSkinInfo FindByInventoryId(int id);
    private static void EnsureInitialized();
    private static void Add_Unlimited();
}
public class Rust.Workshop.ApprovedSkinInfo : object {
    [CompilerGeneratedAttribute]
private ulong <InventoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Desc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <WorkshopdId>k__BackingField;
    [CompilerGeneratedAttribute]
private Price <Price>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tradable>k__BackingField;
    [CompilerGeneratedAttribute]
private DropChance <DropChance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Marketable>k__BackingField;
    [CompilerGeneratedAttribute]
private Skinnable <Skinnable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInCrates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLimitedTimeOffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTwitchDrop>k__BackingField;
    public ulong InventoryId { get; private set; }
    public string Desc { get; private set; }
    public string Name { get; private set; }
    public ulong WorkshopdId { get; private set; }
    internal Price Price { get; private set; }
    public bool Tradable { get; private set; }
    public DropChance DropChance { get; private set; }
    public bool Marketable { get; private set; }
    public Skinnable Skinnable { get; private set; }
    public bool AllowInCrates { get; private set; }
    public bool IsLimitedTimeOffer { get; private set; }
    public bool IsTwitchDrop { get; private set; }
    public ApprovedSkinInfo(ulong WorkshopdId, string Name, string Desc, string ItemName);
    [CompilerGeneratedAttribute]
public ulong get_InventoryId();
    [CompilerGeneratedAttribute]
private void set_InventoryId(ulong value);
    [CompilerGeneratedAttribute]
public string get_Desc();
    [CompilerGeneratedAttribute]
private void set_Desc(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public ulong get_WorkshopdId();
    [CompilerGeneratedAttribute]
private void set_WorkshopdId(ulong value);
    [CompilerGeneratedAttribute]
internal Price get_Price();
    [CompilerGeneratedAttribute]
private void set_Price(Price value);
    [CompilerGeneratedAttribute]
public bool get_Tradable();
    [CompilerGeneratedAttribute]
private void set_Tradable(bool value);
    [CompilerGeneratedAttribute]
public DropChance get_DropChance();
    [CompilerGeneratedAttribute]
private void set_DropChance(DropChance value);
    [CompilerGeneratedAttribute]
public bool get_Marketable();
    [CompilerGeneratedAttribute]
private void set_Marketable(bool value);
    [CompilerGeneratedAttribute]
public Skinnable get_Skinnable();
    [CompilerGeneratedAttribute]
private void set_Skinnable(Skinnable value);
    [CompilerGeneratedAttribute]
public bool get_AllowInCrates();
    [CompilerGeneratedAttribute]
private void set_AllowInCrates(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLimitedTimeOffer();
    [CompilerGeneratedAttribute]
private void set_IsLimitedTimeOffer(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTwitchDrop();
    [CompilerGeneratedAttribute]
private void set_IsTwitchDrop(bool value);
    public ApprovedSkinInfo Store(Price Price, bool CanBeTraded, bool CanBeSold);
    public ApprovedSkinInfo TimeLimited();
    public ApprovedSkinInfo Unlimited();
    public ApprovedSkinInfo NoCrate();
    public ApprovedSkinInfo Drops(DropChance DropChance);
    public ApprovedSkinInfo ItemId(ulong InventoryId);
    public ApprovedSkinInfo TwitchDrop();
    public static Item op_Implicit(ApprovedSkinInfo o);
}
public enum Rust.Workshop.Category : Enum {
    public int value__;
    public static Category Shirt;
    public static Category Pants;
    public static Category Jacket;
    public static Category Hat;
    public static Category Mask;
    public static Category Footwear;
    public static Category Weapon;
    public static Category Misc;
    public static Category Deployable;
    public static Category Gloves;
}
public enum Rust.Workshop.DropChance : Enum {
    public int value__;
    public static DropChance Never;
    public static DropChance VeryLow;
    public static DropChance Low;
    public static DropChance Medium;
    public static DropChance High;
    public static DropChance VeryHigh;
}
public class Rust.Workshop.Editor.ColorRow : MaterialRow {
    public Button Reset;
    public RustSlider Red;
    public RustSlider Green;
    public RustSlider Blue;
    private Color Default;
    public bool IsDefault { get; }
    public void Update();
    public bool get_IsDefault();
    public virtual void Read(Material source, Material def);
    public void ResetToDefault();
    public void OnChanged();
}
public class Rust.Workshop.Editor.FloatRow : MaterialRow {
    public Button Reset;
    public RustSlider Slider;
    private float Default;
    public bool IsDefault { get; }
    public void Update();
    public bool get_IsDefault();
    public virtual void Read(Material source, Material def);
    public void ResetToDefault();
    public void OnChanged();
}
public class Rust.Workshop.Editor.MaterialRow : MonoBehaviour {
    public string ParamName;
    protected WorkshopItemEditor Editor { get; }
    protected WorkshopItemEditor get_Editor();
    public virtual void Read(Material source, Material def);
}
public class Rust.Workshop.Editor.Publisher : MonoBehaviour {
    public InputField ChangeLog;
    public Button PublishButton;
    public Texture2D IconBackground;
    private Skinnable Skinnable;
    private Skin Skin;
    private ulong ItemId;
    private string Title;
    private GameObject Prefab;
    protected WorkshopInterface Interface { get; }
    protected WorkshopItemEditor Editor { get; }
    protected WorkshopInterface get_Interface();
    protected WorkshopItemEditor get_Editor();
    public void StartExport();
    public void Update();
    public bool CanPublish();
    [AsyncStateMachineAttribute("Rust.Workshop.Editor.Publisher/<DoExport>d__15")]
private Task DoExport(bool publishToSteam, bool OpenFolder, string forceFolderName);
    [AsyncStateMachineAttribute("Rust.Workshop.Editor.Publisher/<ExportToFolder>d__16")]
private Task ExportToFolder(string folder, bool OpenFolder);
    private void CreateWorkshopIcon(string folder);
    [AsyncStateMachineAttribute("Rust.Workshop.Editor.Publisher/<PublishToSteam>d__18")]
private Task PublishToSteam(string folder);
    [AsyncStateMachineAttribute("Rust.Workshop.Editor.Publisher/<ExportTexture>d__19")]
private Task ExportTexture(Dictionary`2<string, string> data, string folder, int group, string paramname, Material mat, Material defaultMat, bool isNormalMap);
    public void Export();
    [AsyncStateMachineAttribute("Rust.Workshop.Editor.Publisher/<DoExport>d__21")]
public Task DoExport();
}
public class Rust.Workshop.Editor.TextureRow : MaterialRow {
    private string Filename;
    public bool IsNormalMap;
    public RawImage TargetImage;
    public Text FilenameLabel;
    public Button Reset;
    public Button Clear;
    public bool HasChanges;
    private Texture Default;
    private FileSystemWatcher watcher;
    public bool IsDefault { get; }
    public bool IsClear { get; }
    public void Update();
    public void SetFilenameText(string filename);
    public void OnDisable();
    public void OpenFileBrowser();
    [IteratorStateMachineAttribute("Rust.Workshop.Editor.TextureRow/<BrowseForTexture>d__12")]
public IEnumerator BrowseForTexture();
    public void Load(string fullname);
    public void SetTexture(Texture tex);
    public bool get_IsDefault();
    public bool get_IsClear();
    public virtual void Read(Material source, Material def);
    public void OpenFileLocation();
    public void SaveFile();
    [IteratorStateMachineAttribute("Rust.Workshop.Editor.TextureRow/<DoSaveFile>d__22")]
private IEnumerator DoSaveFile();
    public void ResetToDefault();
    public void ResetToClear();
    public void StartWatching();
    public void FileChanged(string name);
    public void StopWatching();
    [CompilerGeneratedAttribute]
private void <StartWatching>b__26_0(object a, FileSystemEventArgs e);
}
internal class Rust.Workshop.Editor.WorkshopPlayerPreview : MonoBehaviour {
    internal GameObject Instance;
    protected WorkshopInterface Interface { get; }
    protected WorkshopInterface get_Interface();
    public void Setup(GameObject ClothingPrefab, ulong id, bool focus, bool IsClothing);
    public void Cleanup();
    private void OnDisable();
}
public class Rust.Workshop.Editor.WorkshopView : MonoBehaviour {
    public TextMeshProUGUI Title;
    public TextMeshProUGUI AuthorName;
    public TextMeshProUGUI VoteInfo;
    public Button VoteUp;
    public Button VoteDown;
    private IWorkshopContent item;
    protected WorkshopInterface Interface { get; }
    protected WorkshopItemEditor Editor { get; }
    protected WorkshopInterface get_Interface();
    protected WorkshopItemEditor get_Editor();
    public void Update();
    public void UpdateFrom(IWorkshopContent item);
    public void OnVoteUp();
    public void OnVoteDown();
    public void OpenWeb();
    internal void Clear();
}
internal class Rust.Workshop.Import.ImportVersion1 : SingletonComponent`1<ImportVersion1> {
    [IteratorStateMachineAttribute("Rust.Workshop.Import.ImportVersion1/<DoImport>d__0")]
internal IEnumerator DoImport(IWorkshopContent item, Skin skin);
}
internal class Rust.Workshop.Import.ImportVersion2 : SingletonComponent`1<ImportVersion2> {
    private AssetBundle Bundle;
    public void OnDisable();
    [IteratorStateMachineAttribute("Rust.Workshop.Import.ImportVersion2/<DoImport>d__2")]
internal IEnumerator DoImport(IWorkshopContent item, Skin skin);
    [IteratorStateMachineAttribute("Rust.Workshop.Import.ImportVersion2/<LoadItem>d__3")]
public IEnumerator LoadItem(string Folder, string BundleName, Skin skin);
    [IteratorStateMachineAttribute("Rust.Workshop.Import.ImportVersion2/<ProcessMaterial>d__4")]
private IEnumerator ProcessMaterial(int v, Material inputMaterial, Skin skin);
    private Texture2D ImportTexture(string name, Material inputMaterial, Material outputMaterial, bool normal, Skin skin, int group, string targetName);
    private Texture2D ConvertMetalToSpec(Texture2D tex, Material outputMaterial);
}
internal class Rust.Workshop.Import.ImportVersion3 : SingletonComponent`1<ImportVersion3> {
    [IteratorStateMachineAttribute("Rust.Workshop.Import.ImportVersion3/<DoImport>d__0")]
internal IEnumerator DoImport(IWorkshopContent item, Skin skin);
    [IteratorStateMachineAttribute("Rust.Workshop.Import.ImportVersion3/<DownloadFromWorkshop>d__1")]
private IEnumerator DownloadFromWorkshop(IWorkshopContent item);
}
public class Rust.Workshop.ItemSchema : object {
    public int appid;
    public Item[] items;
}
internal enum Rust.Workshop.ListType : Enum {
    public int value__;
    public static ListType MyItems;
    public static ListType MostRecent;
    public static ListType MostPopular;
    public static ListType Trending;
    public static ListType Accepted;
}
public enum Rust.Workshop.Price : Enum {
    public int value__;
    public static Price NotForSale;
    public static Price TwentyFiveCents;
    public static Price FiftyCents;
    public static Price OneDollar;
    public static Price OneDollarFifty;
    public static Price TwoDollars;
    public static Price TwoDollarsFifty;
    public static Price ThreeDollars;
    public static Price ThreeDollarsFifty;
    public static Price FourDollars;
    public static Price FourDollarsFifty;
    public static Price FiveDollars;
    public static Price SixDollars;
    public static Price SevenFifty;
    public static Price TenDollars;
    public static Price FifteenDollars;
    public static Price TwentyDollars;
    public static Price TwentyFiveDollars;
}
public class Rust.Workshop.Skin : object {
    private string manifestName;
    private string manifestContent;
    private TextAsset manifestAsset;
    private Manifest manifest;
    private string iconName;
    public Sprite sprite;
    public int references;
    public Skinnable Skinnable;
    public Material[] Materials;
    public Material[] DefaultMaterials;
    public List`1<Texture> TextureAssets;
    public List`1<Texture> TextureObjects;
    [CompilerGeneratedAttribute]
private bool <AssetsRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IconRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssetsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IconLoaded>k__BackingField;
    public Action OnLoaded;
    public Action OnIconLoaded;
    public bool AssetsRequested { get; public set; }
    public bool IconRequested { get; public set; }
    public bool AssetsLoaded { get; internal set; }
    public bool IconLoaded { get; internal set; }
    private void LoadManifestFromFile();
    private void DeserializeManifest();
    [IteratorStateMachineAttribute("Rust.Workshop.Skin/<LoadIcon>d__10")]
public IEnumerator LoadIcon(ulong workshopId, string directory, AssetBundle bundle);
    [IteratorStateMachineAttribute("Rust.Workshop.Skin/<LoadAssets>d__11")]
public IEnumerator LoadAssets(ulong workshopId, string directory, AssetBundle bundle);
    public void UnloadAssets();
    private void UpdateTextureMetadata(Texture2D texture, string textureName, bool anisoFiltering, bool trilinearFiltering);
    internal void Apply(GameObject gameObject);
    public int GetSizeInBytes();
    [CompilerGeneratedAttribute]
public bool get_AssetsRequested();
    [CompilerGeneratedAttribute]
public void set_AssetsRequested(bool value);
    [CompilerGeneratedAttribute]
public bool get_IconRequested();
    [CompilerGeneratedAttribute]
public void set_IconRequested(bool value);
    [CompilerGeneratedAttribute]
public bool get_AssetsLoaded();
    [CompilerGeneratedAttribute]
internal void set_AssetsLoaded(bool value);
    [CompilerGeneratedAttribute]
public bool get_IconLoaded();
    [CompilerGeneratedAttribute]
internal void set_IconLoaded(bool value);
    public static void Apply(GameObject obj, Skinnable skinnable, Material[] Materials);
    internal void ReadDefaults();
}
public class Rust.Workshop.WorkshopIconLoader : MonoBehaviour {
    public static Sprite Find(ulong workshopId, Sprite placeholder, Action callback);
}
public class Rust.Workshop.WorkshopInterface : SingletonComponent`1<WorkshopInterface> {
    internal WorkshopItemEditor Editor { get; }
    internal WorkshopItemEditor get_Editor();
    public void Exit();
    public void RenderAllIcons();
}
internal class Rust.Workshop.WorkshopItemButton : MonoBehaviour {
    public TextMeshProUGUI Name;
    public TextMeshProUGUI Description;
    public HttpImage Icon;
    public GameObject OldIndicator;
    public GameObject Incompatible;
    public GameObject ItemDownloaded;
    public GameObject ItemDownloadPending;
    public GameObject ItemDownloading;
    private IWorkshopContent Item;
    internal void Init(IWorkshopContent item);
    public void Update();
    public void OpenWebpage();
    public void StartEditing();
    public void StartViewing();
}
public class Rust.Workshop.WorkshopItemEditor : SingletonComponent`1<WorkshopItemEditor> {
    [CompilerGeneratedAttribute]
private GameObject <Prefab>k__BackingField;
    [CompilerGeneratedAttribute]
private GameObject <ViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private Skinnable <Skinnable>k__BackingField;
    [CompilerGeneratedAttribute]
private Skin <Skin>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ItemId>k__BackingField;
    public static Action`2<bool, string> OnLoading;
    public Dropdown ItemTypeSelector;
    public InputField ItemTitleLabel;
    public WorkshopViewmodelControls ViewmodelControls;
    public GameObject MaterialTabHolder;
    public GameObject FileDialogObject;
    public GameObject[] EditorElements;
    public GameObject[] ClothOnlyElements;
    public GameObject[] DetailOnlyElements;
    public GameObject[] DirtOnlyElements;
    public Toggle[] MaterialTabs;
    public int EditingMaterial;
    public GameObject item_position_a;
    public GameObject item_position_b;
    private static Regex ModelCleanup;
    internal GameObject Prefab { get; internal set; }
    internal GameObject ViewModel { get; internal set; }
    internal Skinnable Skinnable { get; internal set; }
    internal Skin Skin { get; internal set; }
    internal ulong ItemId { get; internal set; }
    protected WorkshopInterface Interface { get; }
    internal Publisher Publisher { get; }
    public FileDialog FileDialog { get; }
    public string ItemTitle { get; public set; }
    public string ChangeLog { get; public set; }
    private static WorkshopItemEditor();
    [CompilerGeneratedAttribute]
internal GameObject get_Prefab();
    [CompilerGeneratedAttribute]
internal void set_Prefab(GameObject value);
    [CompilerGeneratedAttribute]
internal GameObject get_ViewModel();
    [CompilerGeneratedAttribute]
internal void set_ViewModel(GameObject value);
    [CompilerGeneratedAttribute]
internal Skinnable get_Skinnable();
    [CompilerGeneratedAttribute]
internal void set_Skinnable(Skinnable value);
    [CompilerGeneratedAttribute]
internal Skin get_Skin();
    [CompilerGeneratedAttribute]
internal void set_Skin(Skin value);
    [CompilerGeneratedAttribute]
internal ulong get_ItemId();
    [CompilerGeneratedAttribute]
internal void set_ItemId(ulong value);
    protected WorkshopInterface get_Interface();
    internal static void Loading(bool v1, string v2, string v3, float v4);
    internal Publisher get_Publisher();
    public FileDialog get_FileDialog();
    public string get_ItemTitle();
    public void set_ItemTitle(string value);
    public string get_ChangeLog();
    public void set_ChangeLog(string value);
    private void OnEnable();
    private void ClearEditor();
    public void StartNewItem(string type);
    [IteratorStateMachineAttribute("Rust.Workshop.WorkshopItemEditor/<StartViewingItem>d__50")]
public IEnumerator StartViewingItem(IWorkshopContent item);
    [IteratorStateMachineAttribute("Rust.Workshop.WorkshopItemEditor/<StartEditingItem>d__51")]
public IEnumerator StartEditingItem(IWorkshopContent item);
    private void HideEditor();
    private void ShowEditor();
    [IteratorStateMachineAttribute("Rust.Workshop.WorkshopItemEditor/<OpenItem>d__54")]
internal IEnumerator OpenItem(IWorkshopContent item);
    private void OnImportFinished();
    internal Texture2D SetTexture(string paramName, string fullName, bool isNormalMap);
    internal void SetFloat(string paramName, float value);
    internal void SetColor(string paramName, Color val);
    internal void SetTexture(string paramName, Texture tex);
    private bool LoadItemType(IEnumerable`1<string> tags);
    private bool LoadItemType(string v);
    private GameObject LoadForPreview(string entityPrefabName, bool preprocess);
    public void OnChangedItemType(int type);
    private void UpdateMaterialRows();
    private void UpdateMaterialTabs();
    private void InitScene();
    private void InitPlayerPreview(ulong playerid, bool focus);
    public void RandomizePlayerPreview();
    public void DownloadModel();
    public static bool IsLesserLOD(string name);
    public static void RemoveLODs(GameObject prefab);
    private static void RemoveComponents(GameObject prefab);
    [IteratorStateMachineAttribute("Rust.Workshop.WorkshopItemEditor/<DoDownloadModel>d__74")]
private IEnumerator DoDownloadModel();
    private void Update();
    private void LateUpdate();
    public void SwitchMaterial(int i);
    [CompilerGeneratedAttribute]
private bool <LoadItemType>b__61_0(OptionData x);
}
internal class Rust.Workshop.WorkshopItemList : MonoBehaviour {
    private static int StaticRefresh;
    public WorkshopItemButton ButtonPrefab;
    public GameObject Container;
    public ListType ListType;
    private static int PerPage;
    public int Page;
    public Button PreviousPage;
    public Button NextPage;
    public Text PageInfo;
    public string ItemFilter;
    public Dropdown ItemTypeSelector;
    private int ForcedRefresh;
    private int TotalResults;
    private bool Refreshing;
    private int NumPages { get; }
    private static WorkshopItemList();
    public static void RefreshAll();
    private int get_NumPages();
    private void Awake();
    private void PageNext();
    private void PagePrev();
    public void OnChangedItemType(int type);
    private void Update();
    public void SwitchToLatest();
    public void SwitchToTrending();
    public void SwitchToPopular();
    public void SwitchToAccepted();
    [AsyncStateMachineAttribute("Rust.Workshop.WorkshopItemList/<Refresh>d__26")]
public Task Refresh();
}
public class Rust.Workshop.WorkshopSkin : MonoBehaviour {
    public static float DefaultTimeout;
    public static bool AllowApply;
    public static bool AllowUnload;
    public static float DownloadTimeout;
    private static WaitForSeconds waitForSeconds;
    private static AssetBundleCreateRequest[] bundleRequests;
    private static AssetBundle[] bundles;
    private static ListDictionary`2<ulong, ListHashSet`1<WorkshopSkin>> RefreshQueue;
    private static Queue`1<ulong> ItemQueue;
    private static Queue`1<ulong> SkinQueue;
    private static ListDictionary`2<ulong, IWorkshopContent> ItemCache;
    private static ListDictionary`2<ulong, Skin> SkinCache;
    private ulong RequestedWorkshopID;
    private ulong AppliedWorkshopID;
    private Action`1<Skin> OnRefresh;
    private Action OnRefreshFail;
    private Skin AppliedSkin;
    public static int QueuedCount { get; }
    public static int LoadedCount { get; }
    private static WorkshopSkin();
    public static string GetStatus();
    public static int get_QueuedCount();
    public static int get_LoadedCount();
    public static Skin GetSkin(ulong workshopId);
    public static IWorkshopContent GetItem(ulong workshopId);
    public static void Apply(GameObject gameobj, ulong workshopId, Action`1<Skin> callback, Action failureCallback);
    public static void Reset(GameObject gameobj);
    public static void Prepare(GameObject gameobj);
    protected void OnDestroy();
    private void Apply(ulong workshopId, Action`1<Skin> callback, Action failureCallback);
    private void EnqueueSkinRefresh(ulong workshopId);
    private static void LoadFromWorkshop(ulong workshopId, Action failureCallback);
    private void DequeueSkinRefresh(ulong workshopId);
    private static void LoadOrUnloadSkinAssets(ulong workshopId, Action failureCallback);
    [IteratorStateMachineAttribute("Rust.Workshop.WorkshopSkin/<ItemQueueCoroutine>d__33")]
private static IEnumerator ItemQueueCoroutine(Action failureCallback);
    [IteratorStateMachineAttribute("Rust.Workshop.WorkshopSkin/<SkinQueueCoroutine>d__34")]
private static IEnumerator SkinQueueCoroutine();
    [IteratorStateMachineAttribute("Rust.Workshop.WorkshopSkin/<LoadItem>d__35")]
private static IEnumerator LoadItem(ulong workshopId, Action failureCallback);
    [IteratorStateMachineAttribute("Rust.Workshop.WorkshopSkin/<LoadSkin>d__36")]
private static IEnumerator LoadSkin(ulong workshopId);
    private static int GetBundleIndex(ulong workshopId);
    private void ApplySkin(Skin skin, ulong workshopId);
    private void DoRefreshSuccessCallback(Skin skin);
    private void DoRefreshFailureCallback();
    private void UpdateSkinReference(Skin skin, ulong workshopId);
}
public class Rust.Workshop.WorkshopViewmodelControls : MonoBehaviour {
    public Toggle Enabled;
    public Toggle Ironsights;
    public Toggle admire;
    private void Clear();
    internal void DoUpdate(GameObject ViewModel);
}
[CreateAssetMenuAttribute]
public class Skinnable : ScriptableObject {
    public string Name;
    public string ItemName;
    public GameObject EntityPrefab;
    public string EntityPrefabName;
    public GameObject ViewmodelPrefab;
    public string ViewmodelPrefabName;
    public Mesh[] MeshDownloads;
    public String[] MeshDownloadPaths;
    public Category Category;
    public bool HideInWorkshopUpload;
    public Group[] Groups;
    public static Skinnable[] All;
    private Material[] _sourceMaterials;
    public Material[] SourceMaterials { get; }
    public static Skinnable FindForItem(string itemType);
    public static Skinnable FindForEntity(string entityName);
    public Material[] get_SourceMaterials();
}
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", "")]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1 : object {
    private static MonoScriptData Get();
}
public class WorkshopBase : ScriptableObject {
    [TooltipAttribute("Leave this at 0 if this is a new item. That way the item will be created when you press upload.")]
public ulong itemID;
    public string title;
    [TextAreaAttribute("8", "8")]
public string description;
    public Texture2D previewImage;
}
[CreateAssetMenuAttribute]
public class WorkshopSkinBase : WorkshopBase {
    public static String[] itemName;
    [HeaderAttribute("Skin Setup")]
public SkinType skinType;
    [FormerlySerializedAsAttribute("skinMaterial")]
public Material skinMaterial0;
    public Material skinMaterial1;
    public Material skinMaterial2;
    public Material skinMaterial3;
    private static WorkshopSkinBase();
}
