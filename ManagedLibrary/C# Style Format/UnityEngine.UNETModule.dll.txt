public UnityEngine.Networking.ChannelQOS : object {
internal QosType m_Type
internal bool m_BelongsSharedOrderChannel
public QosType QOS
public bool BelongsToSharedOrderChannel
public void .ctor(QosType value)
public void .ctor(ChannelQOS channel)
public QosType get_QOS()
public bool get_BelongsToSharedOrderChannel()
}
public UnityEngine.Networking.ConnectionAcksType : Enum {
public int value__
public ConnectionAcksType Acks32
public ConnectionAcksType Acks64
public ConnectionAcksType Acks96
public ConnectionAcksType Acks128
}
public UnityEngine.Networking.ConnectionConfig : object {
private int g_MinPacketSize
private ushort m_PacketSize
private ushort m_FragmentSize
private UInt32 m_ResendTimeout
private UInt32 m_DisconnectTimeout
private UInt32 m_ConnectTimeout
private UInt32 m_MinUpdateTimeout
private UInt32 m_PingTimeout
private UInt32 m_ReducedPingTimeout
private UInt32 m_AllCostTimeout
private byte m_NetworkDropThreshold
private byte m_OverflowDropThreshold
private byte m_MaxConnectionAttempt
private UInt32 m_AckDelay
private UInt32 m_SendDelay
private ushort m_MaxCombinedReliableMessageSize
private ushort m_MaxCombinedReliableMessageCount
private ushort m_MaxSentMessageQueueSize
private ConnectionAcksType m_AcksType
private bool m_UsePlatformSpecificProtocols
private UInt32 m_InitialBandwidth
private float m_BandwidthPeakFactor
private ushort m_WebSocketReceiveBufferMaxSize
private UInt32 m_UdpSocketReceiveBufferMaxSize
private string m_SSLCertFilePath
private string m_SSLPrivateKeyFilePath
private string m_SSLCAFilePath
internal List`1<ChannelQOS> m_Channels
internal List`1<List`1<byte>> m_SharedOrderChannels
public ushort PacketSize
public ushort FragmentSize
public UInt32 ResendTimeout
public UInt32 DisconnectTimeout
public UInt32 ConnectTimeout
public UInt32 MinUpdateTimeout
public UInt32 PingTimeout
public UInt32 ReducedPingTimeout
public UInt32 AllCostTimeout
public byte NetworkDropThreshold
public byte OverflowDropThreshold
public byte MaxConnectionAttempt
public UInt32 AckDelay
public UInt32 SendDelay
public ushort MaxCombinedReliableMessageSize
public ushort MaxCombinedReliableMessageCount
public ushort MaxSentMessageQueueSize
public ConnectionAcksType AcksType
public bool IsAcksLong
public bool UsePlatformSpecificProtocols
public UInt32 InitialBandwidth
public float BandwidthPeakFactor
public ushort WebSocketReceiveBufferMaxSize
public UInt32 UdpSocketReceiveBufferMaxSize
public string SSLCertFilePath
public string SSLPrivateKeyFilePath
public string SSLCAFilePath
public int ChannelCount
public int SharedOrderChannelCount
public List`1<ChannelQOS> Channels
public void .ctor(ConnectionConfig config)
public void Validate(ConnectionConfig config)
public ushort get_PacketSize()
public void set_PacketSize(ushort value)
public ushort get_FragmentSize()
public void set_FragmentSize(ushort value)
public UInt32 get_ResendTimeout()
public void set_ResendTimeout(UInt32 value)
public UInt32 get_DisconnectTimeout()
public void set_DisconnectTimeout(UInt32 value)
public UInt32 get_ConnectTimeout()
public void set_ConnectTimeout(UInt32 value)
public UInt32 get_MinUpdateTimeout()
public void set_MinUpdateTimeout(UInt32 value)
public UInt32 get_PingTimeout()
public void set_PingTimeout(UInt32 value)
public UInt32 get_ReducedPingTimeout()
public void set_ReducedPingTimeout(UInt32 value)
public UInt32 get_AllCostTimeout()
public void set_AllCostTimeout(UInt32 value)
public byte get_NetworkDropThreshold()
public void set_NetworkDropThreshold(byte value)
public byte get_OverflowDropThreshold()
public void set_OverflowDropThreshold(byte value)
public byte get_MaxConnectionAttempt()
public void set_MaxConnectionAttempt(byte value)
public UInt32 get_AckDelay()
public void set_AckDelay(UInt32 value)
public UInt32 get_SendDelay()
public void set_SendDelay(UInt32 value)
public ushort get_MaxCombinedReliableMessageSize()
public void set_MaxCombinedReliableMessageSize(ushort value)
public ushort get_MaxCombinedReliableMessageCount()
public void set_MaxCombinedReliableMessageCount(ushort value)
public ushort get_MaxSentMessageQueueSize()
public void set_MaxSentMessageQueueSize(ushort value)
public ConnectionAcksType get_AcksType()
public void set_AcksType(ConnectionAcksType value)
public bool get_IsAcksLong()
public void set_IsAcksLong(bool value)
public bool get_UsePlatformSpecificProtocols()
public void set_UsePlatformSpecificProtocols(bool value)
public UInt32 get_InitialBandwidth()
public void set_InitialBandwidth(UInt32 value)
public float get_BandwidthPeakFactor()
public void set_BandwidthPeakFactor(float value)
public ushort get_WebSocketReceiveBufferMaxSize()
public void set_WebSocketReceiveBufferMaxSize(ushort value)
public UInt32 get_UdpSocketReceiveBufferMaxSize()
public void set_UdpSocketReceiveBufferMaxSize(UInt32 value)
public string get_SSLCertFilePath()
public void set_SSLCertFilePath(string value)
public string get_SSLPrivateKeyFilePath()
public void set_SSLPrivateKeyFilePath(string value)
public string get_SSLCAFilePath()
public void set_SSLCAFilePath(string value)
public int get_ChannelCount()
public int get_SharedOrderChannelCount()
public byte AddChannel(QosType value)
public void MakeChannelsSharedOrder(List`1<byte> channelIndices)
public QosType GetChannel(byte idx)
public IList`1<byte> GetSharedOrderChannels(byte idx)
public List`1<ChannelQOS> get_Channels()
}
internal UnityEngine.Networking.ConnectionConfigInternal : object {
internal IntPtr m_Ptr
public int ChannelSize
public void .ctor(ConnectionConfig config)
public void InitWrapper()
public byte AddChannel(QosType value)
public QosType GetChannel(int i)
public int get_ChannelSize()
public void InitPacketSize(ushort value)
public void InitFragmentSize(ushort value)
public void InitResendTimeout(UInt32 value)
public void InitDisconnectTimeout(UInt32 value)
public void InitConnectTimeout(UInt32 value)
public void InitMinUpdateTimeout(UInt32 value)
public void InitPingTimeout(UInt32 value)
public void InitReducedPingTimeout(UInt32 value)
public void InitAllCostTimeout(UInt32 value)
public void InitNetworkDropThreshold(byte value)
public void InitOverflowDropThreshold(byte value)
public void InitMaxConnectionAttempt(byte value)
public void InitAckDelay(UInt32 value)
public void InitSendDelay(UInt32 value)
public void InitMaxCombinedReliableMessageSize(ushort value)
public void InitMaxCombinedReliableMessageCount(ushort value)
public void InitMaxSentMessageQueueSize(ushort value)
public void InitAcksType(int value)
public void InitUsePlatformSpecificProtocols(bool value)
public void InitInitialBandwidth(UInt32 value)
public void InitBandwidthPeakFactor(float value)
public void InitWebSocketReceiveBufferMaxSize(ushort value)
public void InitUdpSocketReceiveBufferMaxSize(UInt32 value)
public int InitSSLCertFilePath(string value)
public int InitSSLPrivateKeyFilePath(string value)
public int InitSSLCAFilePath(string value)
public void Dispose()
protected void Finalize()
private bool MakeChannelsSharedOrder(Byte[] values)
}
public UnityEngine.Networking.ConnectionSimulatorConfig : object {
internal IntPtr m_Ptr
public void .ctor(int outMinDelay, int outAvgDelay, int inMinDelay, int inAvgDelay, float packetLossPercentage)
public void Dispose()
protected void Finalize()
}
public UnityEngine.Networking.GlobalConfig : object {
private UInt32 g_MaxTimerTimeout
private UInt32 g_MaxNetSimulatorTimeout
private ushort g_MaxHosts
private UInt32 m_ThreadAwakeTimeout
private ReactorModel m_ReactorModel
private ushort m_ReactorMaximumReceivedMessages
private ushort m_ReactorMaximumSentMessages
private ushort m_MaxPacketSize
private ushort m_MaxHosts
private byte m_ThreadPoolSize
private UInt32 m_MinTimerTimeout
private UInt32 m_MaxTimerTimeout
private UInt32 m_MinNetSimulatorTimeout
private UInt32 m_MaxNetSimulatorTimeout
private Action`2<int, int> m_ConnectionReadyForSend
private Action`1<int> m_NetworkEventAvailable
public UInt32 ThreadAwakeTimeout
public ReactorModel ReactorModel
public ushort ReactorMaximumReceivedMessages
public ushort ReactorMaximumSentMessages
public ushort MaxPacketSize
public ushort MaxHosts
public byte ThreadPoolSize
public UInt32 MinTimerTimeout
public UInt32 MaxTimerTimeout
public UInt32 MinNetSimulatorTimeout
public UInt32 MaxNetSimulatorTimeout
public Action`1<int> NetworkEventAvailable
public Action`2<int, int> ConnectionReadyForSend
public UInt32 get_ThreadAwakeTimeout()
public void set_ThreadAwakeTimeout(UInt32 value)
public ReactorModel get_ReactorModel()
public void set_ReactorModel(ReactorModel value)
public ushort get_ReactorMaximumReceivedMessages()
public void set_ReactorMaximumReceivedMessages(ushort value)
public ushort get_ReactorMaximumSentMessages()
public void set_ReactorMaximumSentMessages(ushort value)
public ushort get_MaxPacketSize()
public void set_MaxPacketSize(ushort value)
public ushort get_MaxHosts()
public void set_MaxHosts(ushort value)
public byte get_ThreadPoolSize()
public void set_ThreadPoolSize(byte value)
public UInt32 get_MinTimerTimeout()
public void set_MinTimerTimeout(UInt32 value)
public UInt32 get_MaxTimerTimeout()
public void set_MaxTimerTimeout(UInt32 value)
public UInt32 get_MinNetSimulatorTimeout()
public void set_MinNetSimulatorTimeout(UInt32 value)
public UInt32 get_MaxNetSimulatorTimeout()
public void set_MaxNetSimulatorTimeout(UInt32 value)
public Action`1<int> get_NetworkEventAvailable()
public void set_NetworkEventAvailable(Action`1<int> value)
public Action`2<int, int> get_ConnectionReadyForSend()
public void set_ConnectionReadyForSend(Action`2<int, int> value)
}
internal UnityEngine.Networking.GlobalConfigInternal : object {
internal IntPtr m_Ptr
public void .ctor(GlobalConfig config)
public void InitWrapper()
public void InitThreadAwakeTimeout(UInt32 ms)
public void InitReactorModel(byte model)
public void InitReactorMaximumReceivedMessages(ushort size)
public void InitReactorMaximumSentMessages(ushort size)
public void InitMaxPacketSize(ushort size)
public void InitMaxHosts(ushort size)
public void InitThreadPoolSize(byte size)
public void InitMinTimerTimeout(UInt32 ms)
public void InitMaxTimerTimeout(UInt32 ms)
public void InitMinNetSimulatorTimeout(UInt32 ms)
public void InitMaxNetSimulatorTimeout(UInt32 ms)
public void Dispose()
protected void Finalize()
}
public UnityEngine.Networking.HostTopology : object {
private ConnectionConfig m_DefConfig
private int m_MaxDefConnections
private List`1<ConnectionConfig> m_SpecialConnections
private ushort m_ReceivedMessagePoolSize
private ushort m_SentMessagePoolSize
private float m_MessagePoolSizeGrowthFactor
public ConnectionConfig DefaultConfig
public int MaxDefaultConnections
public int SpecialConnectionConfigsCount
public List`1<ConnectionConfig> SpecialConnectionConfigs
public ushort ReceivedMessagePoolSize
public ushort SentMessagePoolSize
public float MessagePoolSizeGrowthFactor
public void .ctor(ConnectionConfig defaultConfig, int maxDefaultConnections)
public ConnectionConfig get_DefaultConfig()
public int get_MaxDefaultConnections()
public int get_SpecialConnectionConfigsCount()
public List`1<ConnectionConfig> get_SpecialConnectionConfigs()
public ConnectionConfig GetSpecialConnectionConfig(int i)
public ushort get_ReceivedMessagePoolSize()
public void set_ReceivedMessagePoolSize(ushort value)
public ushort get_SentMessagePoolSize()
public void set_SentMessagePoolSize(ushort value)
public float get_MessagePoolSizeGrowthFactor()
public void set_MessagePoolSizeGrowthFactor(float value)
public int AddSpecialConnectionConfig(ConnectionConfig config)
}
internal UnityEngine.Networking.HostTopologyInternal : object {
internal IntPtr m_Ptr
public void .ctor(HostTopology topology)
public void InitWrapper(ConnectionConfigInternal config, int maxDefaultConnections)
private int AddSpecialConnectionConfig(ConnectionConfigInternal config)
public int AddSpecialConnectionConfigWrapper(ConnectionConfigInternal config)
private void InitOtherParameters(HostTopology topology)
public void InitReceivedPoolSize(ushort pool)
public void InitSentMessagePoolSize(ushort pool)
public void InitMessagePoolSizeGrowthFactor(float factor)
public void Dispose()
protected void Finalize()
}
internal UnityEngine.Networking.Match.CreateMatchRequest : Request {
private string <name>k__BackingField
private UInt32 <size>k__BackingField
private string <publicAddress>k__BackingField
private string <privateAddress>k__BackingField
private int <eloScore>k__BackingField
private bool <advertise>k__BackingField
private string <password>k__BackingField
private Dictionary`2<string, long> <matchAttributes>k__BackingField
public string name
public UInt32 size
public string publicAddress
public string privateAddress
public int eloScore
public bool advertise
public string password
public Dictionary`2<string, long> matchAttributes
public string get_name()
public void set_name(string value)
public UInt32 get_size()
public void set_size(UInt32 value)
public string get_publicAddress()
public void set_publicAddress(string value)
public string get_privateAddress()
public void set_privateAddress(string value)
public int get_eloScore()
public void set_eloScore(int value)
public bool get_advertise()
public void set_advertise(bool value)
public string get_password()
public void set_password(string value)
public Dictionary`2<string, long> get_matchAttributes()
public void set_matchAttributes(Dictionary`2<string, long> value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.CreateMatchResponse : BasicResponse {
private string <address>k__BackingField
private int <port>k__BackingField
private int <domain>k__BackingField
private NetworkID <networkId>k__BackingField
private string <accessTokenString>k__BackingField
private NodeID <nodeId>k__BackingField
private bool <usingRelay>k__BackingField
public string address
public int port
public int domain
public NetworkID networkId
public string accessTokenString
public NodeID nodeId
public bool usingRelay
public string get_address()
public void set_address(string value)
public int get_port()
public void set_port(int value)
public int get_domain()
public void set_domain(int value)
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string get_accessTokenString()
public void set_accessTokenString(string value)
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public bool get_usingRelay()
public void set_usingRelay(bool value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.DestroyMatchRequest : Request {
private NetworkID <networkId>k__BackingField
public NetworkID networkId
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.DropConnectionRequest : Request {
private NetworkID <networkId>k__BackingField
private NodeID <nodeId>k__BackingField
public NetworkID networkId
public NodeID nodeId
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.DropConnectionResponse : Response {
private NetworkID <networkId>k__BackingField
private NodeID <nodeId>k__BackingField
public NetworkID networkId
public NodeID nodeId
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.IResponse {
public void SetSuccess()
public void SetFailure(string info)
}
internal UnityEngine.Networking.Match.JoinMatchRequest : Request {
private NetworkID <networkId>k__BackingField
private string <publicAddress>k__BackingField
private string <privateAddress>k__BackingField
private int <eloScore>k__BackingField
private string <password>k__BackingField
public NetworkID networkId
public string publicAddress
public string privateAddress
public int eloScore
public string password
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string get_publicAddress()
public void set_publicAddress(string value)
public string get_privateAddress()
public void set_privateAddress(string value)
public int get_eloScore()
public void set_eloScore(int value)
public string get_password()
public void set_password(string value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.JoinMatchResponse : BasicResponse {
private string <address>k__BackingField
private int <port>k__BackingField
private int <domain>k__BackingField
private NetworkID <networkId>k__BackingField
private string <accessTokenString>k__BackingField
private NodeID <nodeId>k__BackingField
private bool <usingRelay>k__BackingField
public string address
public int port
public int domain
public NetworkID networkId
public string accessTokenString
public NodeID nodeId
public bool usingRelay
public string get_address()
public void set_address(string value)
public int get_port()
public void set_port(int value)
public int get_domain()
public void set_domain(int value)
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string get_accessTokenString()
public void set_accessTokenString(string value)
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public bool get_usingRelay()
public void set_usingRelay(bool value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.ListMatchRequest : Request {
private int <pageSize>k__BackingField
private int <pageNum>k__BackingField
private string <nameFilter>k__BackingField
private bool <filterOutPrivateMatches>k__BackingField
private int <eloScore>k__BackingField
private Dictionary`2<string, long> <matchAttributeFilterLessThan>k__BackingField
private Dictionary`2<string, long> <matchAttributeFilterEqualTo>k__BackingField
private Dictionary`2<string, long> <matchAttributeFilterGreaterThan>k__BackingField
public bool includePasswordMatches
public int pageSize
public int pageNum
public string nameFilter
public bool filterOutPrivateMatches
public int eloScore
public Dictionary`2<string, long> matchAttributeFilterLessThan
public Dictionary`2<string, long> matchAttributeFilterEqualTo
public Dictionary`2<string, long> matchAttributeFilterGreaterThan
public int get_pageSize()
public void set_pageSize(int value)
public int get_pageNum()
public void set_pageNum(int value)
public string get_nameFilter()
public void set_nameFilter(string value)
public bool get_filterOutPrivateMatches()
public void set_filterOutPrivateMatches(bool value)
public int get_eloScore()
public void set_eloScore(int value)
public Dictionary`2<string, long> get_matchAttributeFilterLessThan()
public void set_matchAttributeFilterLessThan(Dictionary`2<string, long> value)
public Dictionary`2<string, long> get_matchAttributeFilterEqualTo()
public void set_matchAttributeFilterEqualTo(Dictionary`2<string, long> value)
public Dictionary`2<string, long> get_matchAttributeFilterGreaterThan()
public void set_matchAttributeFilterGreaterThan(Dictionary`2<string, long> value)
public string ToString()
public bool IsValid()
}
internal UnityEngine.Networking.Match.ListMatchResponse : BasicResponse {
private List`1<MatchDesc> <matches>k__BackingField
public List`1<MatchDesc> matches
public void .ctor(List`1<MatchDesc> otherMatches)
public List`1<MatchDesc> get_matches()
public void set_matches(List`1<MatchDesc> value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.MatchDesc : ResponseBase {
private NetworkID <networkId>k__BackingField
private string <name>k__BackingField
private int <averageEloScore>k__BackingField
private int <maxSize>k__BackingField
private int <currentSize>k__BackingField
private bool <isPrivate>k__BackingField
private Dictionary`2<string, long> <matchAttributes>k__BackingField
private NodeID <hostNodeId>k__BackingField
private List`1<MatchDirectConnectInfo> <directConnectInfos>k__BackingField
public NetworkID networkId
public string name
public int averageEloScore
public int maxSize
public int currentSize
public bool isPrivate
public Dictionary`2<string, long> matchAttributes
public NodeID hostNodeId
public List`1<MatchDirectConnectInfo> directConnectInfos
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public string get_name()
public void set_name(string value)
public int get_averageEloScore()
public void set_averageEloScore(int value)
public int get_maxSize()
public void set_maxSize(int value)
public int get_currentSize()
public void set_currentSize(int value)
public bool get_isPrivate()
public void set_isPrivate(bool value)
public Dictionary`2<string, long> get_matchAttributes()
public void set_matchAttributes(Dictionary`2<string, long> value)
public NodeID get_hostNodeId()
public void set_hostNodeId(NodeID value)
public List`1<MatchDirectConnectInfo> get_directConnectInfos()
public void set_directConnectInfos(List`1<MatchDirectConnectInfo> value)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.MatchDirectConnectInfo : ResponseBase {
private NodeID <nodeId>k__BackingField
private string <publicAddress>k__BackingField
private string <privateAddress>k__BackingField
private HostPriority <hostPriority>k__BackingField
public NodeID nodeId
public string publicAddress
public string privateAddress
public HostPriority hostPriority
public NodeID get_nodeId()
public void set_nodeId(NodeID value)
public string get_publicAddress()
public void set_publicAddress(string value)
public string get_privateAddress()
public void set_privateAddress(string value)
public HostPriority get_hostPriority()
public void set_hostPriority(HostPriority value)
public string ToString()
public void Parse(object obj)
}
public UnityEngine.Networking.Match.MatchInfo : object {
private string <address>k__BackingField
private int <port>k__BackingField
private int <domain>k__BackingField
private NetworkID <networkId>k__BackingField
private NetworkAccessToken <accessToken>k__BackingField
private NodeID <nodeId>k__BackingField
private bool <usingRelay>k__BackingField
public string address
public int port
public int domain
public NetworkID networkId
public NetworkAccessToken accessToken
public NodeID nodeId
public bool usingRelay
internal void .ctor(CreateMatchResponse matchResponse)
internal void .ctor(JoinMatchResponse matchResponse)
public string get_address()
private void set_address(string value)
public int get_port()
private void set_port(int value)
public int get_domain()
private void set_domain(int value)
public NetworkID get_networkId()
private void set_networkId(NetworkID value)
public NetworkAccessToken get_accessToken()
private void set_accessToken(NetworkAccessToken value)
public NodeID get_nodeId()
private void set_nodeId(NodeID value)
public bool get_usingRelay()
private void set_usingRelay(bool value)
public string ToString()
}
public UnityEngine.Networking.Match.MatchInfoSnapshot : object {
private NetworkID <networkId>k__BackingField
private NodeID <hostNodeId>k__BackingField
private string <name>k__BackingField
private int <averageEloScore>k__BackingField
private int <maxSize>k__BackingField
private int <currentSize>k__BackingField
private bool <isPrivate>k__BackingField
private Dictionary`2<string, long> <matchAttributes>k__BackingField
private List`1<MatchInfoDirectConnectSnapshot> <directConnectInfos>k__BackingField
public NetworkID networkId
public NodeID hostNodeId
public string name
public int averageEloScore
public int maxSize
public int currentSize
public bool isPrivate
public Dictionary`2<string, long> matchAttributes
public List`1<MatchInfoDirectConnectSnapshot> directConnectInfos
internal void .ctor(MatchDesc matchDesc)
public NetworkID get_networkId()
private void set_networkId(NetworkID value)
public NodeID get_hostNodeId()
private void set_hostNodeId(NodeID value)
public string get_name()
private void set_name(string value)
public int get_averageEloScore()
private void set_averageEloScore(int value)
public int get_maxSize()
private void set_maxSize(int value)
public int get_currentSize()
private void set_currentSize(int value)
public bool get_isPrivate()
private void set_isPrivate(bool value)
public Dictionary`2<string, long> get_matchAttributes()
private void set_matchAttributes(Dictionary`2<string, long> value)
public List`1<MatchInfoDirectConnectSnapshot> get_directConnectInfos()
private void set_directConnectInfos(List`1<MatchInfoDirectConnectSnapshot> value)
}
public UnityEngine.Networking.Match.NetworkMatch : MonoBehaviour {
private Uri m_BaseUri
public Uri baseUri
public Uri get_baseUri()
public void set_baseUri(Uri value)
public void SetProgramAppID(AppID programAppID)
public Coroutine CreateMatch(string matchName, UInt32 matchSize, bool matchAdvertise, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForMatch, int requestDomain, DataResponseDelegate`1<MatchInfo> callback)
internal Coroutine CreateMatch(CreateMatchRequest req, DataResponseDelegate`1<MatchInfo> callback)
internal void OnMatchCreate(CreateMatchResponse response, DataResponseDelegate`1<MatchInfo> userCallback)
public Coroutine JoinMatch(NetworkID netId, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForClient, int requestDomain, DataResponseDelegate`1<MatchInfo> callback)
internal Coroutine JoinMatch(JoinMatchRequest req, DataResponseDelegate`1<MatchInfo> callback)
internal void OnMatchJoined(JoinMatchResponse response, DataResponseDelegate`1<MatchInfo> userCallback)
public Coroutine DestroyMatch(NetworkID netId, int requestDomain, BasicResponseDelegate callback)
internal Coroutine DestroyMatch(DestroyMatchRequest req, BasicResponseDelegate callback)
internal void OnMatchDestroyed(BasicResponse response, BasicResponseDelegate userCallback)
public Coroutine DropConnection(NetworkID netId, NodeID dropNodeId, int requestDomain, BasicResponseDelegate callback)
internal Coroutine DropConnection(DropConnectionRequest req, BasicResponseDelegate callback)
internal void OnDropConnection(DropConnectionResponse response, BasicResponseDelegate userCallback)
public Coroutine ListMatches(int startPageNumber, int resultPageSize, string matchNameFilter, bool filterOutPrivateMatchesFromResults, int eloScoreTarget, int requestDomain, DataResponseDelegate`1<List`1<MatchInfoSnapshot>> callback)
internal Coroutine ListMatches(ListMatchRequest req, DataResponseDelegate`1<List`1<MatchInfoSnapshot>> callback)
internal void OnMatchList(ListMatchResponse response, DataResponseDelegate`1<List`1<MatchInfoSnapshot>> userCallback)
public Coroutine SetMatchAttributes(NetworkID networkId, bool isListed, int requestDomain, BasicResponseDelegate callback)
internal Coroutine SetMatchAttributes(SetMatchAttributesRequest req, BasicResponseDelegate callback)
internal void OnSetMatchAttributes(BasicResponse response, BasicResponseDelegate userCallback)
private IEnumerator ProcessMatchResponse(UnityWebRequest client, InternalResponseDelegate`2<JSONRESPONSE, USERRESPONSEDELEGATETYPE> internalCallback, USERRESPONSEDELEGATETYPE userCallback)
}
internal UnityEngine.Networking.Match.Request : object {
public int currentVersion
private int <version>k__BackingField
private SourceID <sourceId>k__BackingField
private string <projectId>k__BackingField
private AppID <appId>k__BackingField
private string <accessTokenString>k__BackingField
private int <domain>k__BackingField
public int version
public SourceID sourceId
public string projectId
public AppID appId
public string accessTokenString
public int domain
public int get_version()
public void set_version(int value)
public SourceID get_sourceId()
public void set_sourceId(SourceID value)
public string get_projectId()
public void set_projectId(string value)
public AppID get_appId()
public void set_appId(AppID value)
public string get_accessTokenString()
public void set_accessTokenString(string value)
public int get_domain()
public void set_domain(int value)
public bool IsValid()
public string ToString()
}
internal UnityEngine.Networking.Match.Response : ResponseBase {
private bool <success>k__BackingField
private string <extendedInfo>k__BackingField
public bool success
public string extendedInfo
public bool get_success()
private void set_success(bool value)
public string get_extendedInfo()
private void set_extendedInfo(string value)
public void SetSuccess()
public void SetFailure(string info)
public string ToString()
public void Parse(object obj)
}
internal UnityEngine.Networking.Match.ResponseBase : object {
public void Parse(object obj)
public string ParseJSONString(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public short ParseJSONInt16(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public int ParseJSONInt32(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public long ParseJSONInt64(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public ushort ParseJSONUInt16(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public UInt32 ParseJSONUInt32(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public ulong ParseJSONUInt64(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public bool ParseJSONBool(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public DateTime ParseJSONDateTime(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public List`1<string> ParseJSONListOfStrings(string name, object obj, IDictionary`2<string, object> dictJsonObj)
public List`1<T> ParseJSONList(string name, object obj, IDictionary`2<string, object> dictJsonObj)
}
internal UnityEngine.Networking.Match.SetMatchAttributesRequest : Request {
private NetworkID <networkId>k__BackingField
private bool <isListed>k__BackingField
public NetworkID networkId
public bool isListed
public NetworkID get_networkId()
public void set_networkId(NetworkID value)
public bool get_isListed()
public void set_isListed(bool value)
public string ToString()
public bool IsValid()
}
public UnityEngine.Networking.NetworkError : Enum {
public int value__
public NetworkError Ok
public NetworkError WrongHost
public NetworkError WrongConnection
public NetworkError WrongChannel
public NetworkError NoResources
public NetworkError BadMessage
public NetworkError Timeout
public NetworkError MessageToLong
public NetworkError WrongOperation
public NetworkError VersionMismatch
public NetworkError CRCMismatch
public NetworkError DNSFailure
public NetworkError UsageError
}
public UnityEngine.Networking.NetworkEventType : Enum {
public int value__
public NetworkEventType DataEvent
public NetworkEventType ConnectEvent
public NetworkEventType DisconnectEvent
public NetworkEventType Nothing
public NetworkEventType BroadcastEvent
}
public UnityEngine.Networking.NetworkTransport : object {
public bool IsStarted
public void Init()
private void InitWithNoParameters()
private void InitWithParameters(GlobalConfigInternal config)
public void Shutdown()
public string GetAssetId(GameObject go)
public void AddSceneId(int id)
public int GetNextSceneId()
public void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, Byte& error)
public void DisconnectNetworkHost(int hostId, Byte& error)
public NetworkEventType ReceiveRelayEventFromHost(int hostId, Byte& error)
public int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, int bytesPerSec, float bucketSizeFactor, Byte& error)
public int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, Byte& error)
public int GetCurrentIncomingMessageAmount()
public int GetCurrentOutgoingMessageAmount()
public int GetIncomingMessageQueueSize(int hostId, Byte& error)
public int GetOutgoingMessageQueueSize(int hostId, Byte& error)
public int GetCurrentRTT(int hostId, int connectionId, Byte& error)
public int GetCurrentRtt(int hostId, int connectionId, Byte& error)
public int GetIncomingPacketLossCount(int hostId, int connectionId, Byte& error)
public int GetNetworkLostPacketNum(int hostId, int connectionId, Byte& error)
public int GetIncomingPacketCount(int hostId, int connectionId, Byte& error)
public int GetOutgoingPacketNetworkLossPercent(int hostId, int connectionId, Byte& error)
public int GetOutgoingPacketOverflowLossPercent(int hostId, int connectionId, Byte& error)
public int GetMaxAllowedBandwidth(int hostId, int connectionId, Byte& error)
public int GetAckBufferCount(int hostId, int connectionId, Byte& error)
public int GetIncomingPacketDropCountForAllHosts()
public int GetIncomingPacketCountForAllHosts()
public int GetOutgoingPacketCount()
public int GetOutgoingPacketCountForHost(int hostId, Byte& error)
public int GetOutgoingPacketCountForConnection(int hostId, int connectionId, Byte& error)
public int GetOutgoingMessageCount()
public int GetOutgoingMessageCountForHost(int hostId, Byte& error)
public int GetOutgoingMessageCountForConnection(int hostId, int connectionId, Byte& error)
public int GetOutgoingUserBytesCount()
public int GetOutgoingUserBytesCountForHost(int hostId, Byte& error)
public int GetOutgoingUserBytesCountForConnection(int hostId, int connectionId, Byte& error)
public int GetOutgoingSystemBytesCount()
public int GetOutgoingSystemBytesCountForHost(int hostId, Byte& error)
public int GetOutgoingSystemBytesCountForConnection(int hostId, int connectionId, Byte& error)
public int GetOutgoingFullBytesCount()
public int GetOutgoingFullBytesCountForHost(int hostId, Byte& error)
public int GetOutgoingFullBytesCountForConnection(int hostId, int connectionId, Byte& error)
public int GetPacketSentRate(int hostId, int connectionId, Byte& error)
public int GetPacketReceivedRate(int hostId, int connectionId, Byte& error)
public int GetRemotePacketReceivedRate(int hostId, int connectionId, Byte& error)
public int GetNetIOTimeuS()
public void GetConnectionInfo(int hostId, int connectionId, String& address, Int32& port, NetworkID& network, NodeID& dstNode, Byte& error)
public string GetConnectionInfo(int hostId, int connectionId, Int32& port, UInt64& network, UInt16& dstNode, Byte& error)
public int GetNetworkTimestamp()
public int GetRemoteDelayTimeMS(int hostId, int connectionId, int remoteTime, Byte& error)
public bool StartSendMulticast(int hostId, int channelId, Byte[] buffer, int size, Byte& error)
public bool SendMulticast(int hostId, int connectionId, Byte& error)
public bool FinishSendMulticast(int hostId, Byte& error)
private int GetMaxPacketSize()
private void CheckTopology(HostTopology topology)
private int AddWsHostWrapper(HostTopologyInternal topologyInt, string ip, int port)
private int AddWsHostWrapperWithoutIp(HostTopologyInternal topologyInt, int port)
private bool IsPortOpen(string ip, int port)
public int AddWebsocketHost(HostTopology topology, int port)
public int AddWebsocketHost(HostTopology topology, int port, string ip)
private int AddHostWrapper(HostTopologyInternal topologyInt, string ip, int port, int minTimeout, int maxTimeout)
private int AddHostWrapperWithoutIp(HostTopologyInternal topologyInt, int port, int minTimeout, int maxTimeout)
public int AddHost(HostTopology topology, int port)
public int AddHost(HostTopology topology)
public int AddHost(HostTopology topology, int port, string ip)
public int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port)
public int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout)
public int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port, string ip)
public bool RemoveHost(int hostId)
public bool get_IsStarted()
public int Connect(int hostId, string address, int port, int exeptionConnectionId, Byte& error)
private int Internal_ConnectEndPoint(int hostId, IntPtr sockAddrStorage, int sockAddrStorageLen, int exceptionConnectionId, Byte& error)
public int ConnectWithSimulator(int hostId, string address, int port, int exeptionConnectionId, Byte& error, ConnectionSimulatorConfig conf)
public bool Disconnect(int hostId, int connectionId, Byte& error)
public bool Send(int hostId, int connectionId, int channelId, Byte[] buffer, int size, Byte& error)
public bool QueueMessageForSending(int hostId, int connectionId, int channelId, Byte[] buffer, int size, Byte& error)
public bool SendQueuedMessages(int hostId, int connectionId, Byte& error)
private bool SendWrapper(int hostId, int connectionId, int channelId, Byte[] buffer, int size, Byte& error)
private bool QueueMessageForSendingWrapper(int hostId, int connectionId, int channelId, Byte[] buffer, int size, Byte& error)
public NetworkEventType Receive(Int32& hostId, Int32& connectionId, Int32& channelId, Byte[] buffer, int bufferSize, Int32& receivedSize, Byte& error)
public NetworkEventType ReceiveFromHost(int hostId, Int32& connectionId, Int32& channelId, Byte[] buffer, int bufferSize, Int32& receivedSize, Byte& error)
public void SetPacketStat(int direction, int packetStatId, int numMsgs, int numBytes)
public bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, Byte[] buffer, int size, int timeout, Byte& error)
private bool StartBroadcastDiscoveryWithoutData(int hostId, int broadcastPort, int key, int version, int subversion, int timeout, Byte& error)
private bool StartBroadcastDiscoveryWithData(int hostId, int broadcastPort, int key, int version, int subversion, Byte[] buffer, int size, int timeout, Byte& error)
public void StopBroadcastDiscovery()
public bool IsBroadcastDiscoveryRunning()
public void SetBroadcastCredentials(int hostId, int key, int version, int subversion, Byte& error)
public string GetBroadcastConnectionInfo(int hostId, Int32& port, Byte& error)
public void GetBroadcastConnectionInfo(int hostId, String& address, Int32& port, Byte& error)
public void GetBroadcastConnectionMessage(int hostId, Byte[] buffer, int bufferSize, Int32& receivedSize, Byte& error)
internal bool DoesEndPointUsePlatformProtocols(EndPoint endPoint)
public int ConnectEndPoint(int hostId, EndPoint endPoint, int exceptionConnectionId, Byte& error)
public void Init(GlobalConfig config)
private void SetNetworkEventAvailableCallback(Action`1<int> callback)
private void SetConnectionReadyForSendCallback(Action`2<int, int> callback)
public bool NotifyWhenConnectionReadyForSend(int hostId, int connectionId, int notificationLevel, Byte& error)
public int GetHostPort(int hostId)
}
public UnityEngine.Networking.QosType : Enum {
public int value__
public QosType Unreliable
public QosType UnreliableFragmented
public QosType UnreliableSequenced
public QosType Reliable
public QosType ReliableFragmented
public QosType ReliableSequenced
public QosType StateUpdate
public QosType ReliableStateUpdate
public QosType AllCostDelivery
public QosType UnreliableFragmentedSequenced
public QosType ReliableFragmentedSequenced
}
public UnityEngine.Networking.ReactorModel : Enum {
public int value__
public ReactorModel SelectReactor
public ReactorModel FixRateReactor
}
public UnityEngine.Networking.Types.AppID : Enum {
public ulong value__
public AppID Invalid
}
public UnityEngine.Networking.Types.HostPriority : Enum {
public int value__
public HostPriority Invalid
}
public UnityEngine.Networking.Types.NetworkAccessLevel : Enum {
public ulong value__
public NetworkAccessLevel Invalid
public NetworkAccessLevel User
public NetworkAccessLevel Owner
public NetworkAccessLevel Admin
}
public UnityEngine.Networking.Types.NetworkAccessToken : object {
private int NETWORK_ACCESS_TOKEN_SIZE
public Byte[] array
public void .ctor(Byte[] array)
public void .ctor(string strArray)
public string GetByteString()
public bool IsValid()
}
public UnityEngine.Networking.Types.NetworkID : Enum {
public ulong value__
public NetworkID Invalid
}
public UnityEngine.Networking.Types.NodeID : Enum {
public ushort value__
public NodeID Invalid
}
public UnityEngine.Networking.Types.SourceID : Enum {
public ulong value__
public SourceID Invalid
}
public UnityEngine.Networking.Utility : object {
private Dictionary`2<NetworkID, NetworkAccessToken> s_dictTokens
public bool useRandomSourceID
public bool get_useRandomSourceID()
public void set_useRandomSourceID(bool value)
public SourceID GetSourceID()
public void SetAppID(AppID newAppID)
public AppID GetAppID()
public void SetAccessTokenForNetwork(NetworkID netId, NetworkAccessToken accessToken)
public NetworkAccessToken GetAccessTokenForNetwork(NetworkID netId)
}
