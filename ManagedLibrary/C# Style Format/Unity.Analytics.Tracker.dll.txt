public UnityEngine.Analytics.AnalyticsEventParam : object {
private RequirementType m_RequirementType
private string m_GroupID
private string m_Tooltip
private string m_Name
private ValueProperty m_Value
public RequirementType requirementType
public string groupID
public ValueProperty valueProperty
public string name
public object value
public void .ctor(string name)
public RequirementType get_requirementType()
public string get_groupID()
public ValueProperty get_valueProperty()
public string get_name()
public object get_value()
}
public UnityEngine.Analytics.AnalyticsEventParamListContainer : object {
private List`1<AnalyticsEventParam> m_Parameters
public List`1<AnalyticsEventParam> parameters
public List`1<AnalyticsEventParam> get_parameters()
public void set_parameters(List`1<AnalyticsEventParam> value)
}
public UnityEngine.Analytics.AnalyticsEventTracker : MonoBehaviour {
public EventTrigger m_Trigger
private StandardEventPayload m_EventPayload
public StandardEventPayload payload
public StandardEventPayload get_payload()
public void TriggerEvent()
private AnalyticsResult SendEvent()
private void Awake()
private void Start()
private void OnEnable()
private void OnDisable()
private void OnApplicationPause(bool paused)
private void OnDestroy()
private IEnumerator TimedTrigger()
}
public UnityEngine.Analytics.AnalyticsEventTrackerSettings : object {
public int paramCountMax
public int triggerRuleCountMax
}
public UnityEngine.Analytics.AnalyticsTracker : MonoBehaviour {
private string m_EventName
private Dictionary`2<string, object> m_Dict
private int m_PrevDictHash
private TrackableProperty m_TrackableProperty
internal Trigger m_Trigger
public string eventName
internal TrackableProperty TP
public string get_eventName()
public void set_eventName(string value)
internal TrackableProperty get_TP()
internal void set_TP(TrackableProperty value)
private void Awake()
private void Start()
private void OnEnable()
private void OnDisable()
private void OnApplicationPause()
private void OnDestroy()
public void TriggerEvent()
private void SendEvent()
private void BuildParameters()
}
public UnityEngine.Analytics.EventTrigger : object {
private bool m_IsTriggerExpanded
private TriggerType m_Type
private TriggerLifecycleEvent m_LifecycleEvent
private bool m_ApplyRules
private TriggerListContainer m_Rules
private TriggerBool m_TriggerBool
private float m_InitTime
private float m_RepeatTime
private int m_Repetitions
public int repetitionCount
private OnTrigger m_TriggerFunction
private TriggerMethod m_Method
public TriggerType triggerType
public TriggerLifecycleEvent lifecycleEvent
public float initTime
public float repeatTime
public int repetitions
public TriggerType get_triggerType()
public TriggerLifecycleEvent get_lifecycleEvent()
public float get_initTime()
public void set_initTime(float value)
public float get_repeatTime()
public void set_repeatTime(float value)
public int get_repetitions()
public void set_repetitions(int value)
public void AddRule()
public void RemoveRule(int index)
public bool Test(GameObject gameObject)
}
public UnityEngine.Analytics.StandardEventPayload : object {
private bool m_IsEventExpanded
private string m_StandardEventType
public Type standardEventType
private AnalyticsEventParamListContainer m_Parameters
private Dictionary`2<string, object> m_EventData
private string m_Name
public AnalyticsEventParamListContainer parameters
public string name
public AnalyticsEventParamListContainer get_parameters()
public string get_name()
public void set_name(string value)
public AnalyticsResult Send()
private IDictionary`2<string, object> GetParameters()
private bool IsCustomDataValid()
private bool IsRequiredDataValid()
}
public UnityEngine.Analytics.TrackableField : TrackablePropertyBase {
private String[] m_ValidTypeNames
private string m_Type
private string m_EnumType
public void .ctor(Type[] validTypes)
public object GetValue()
}
internal UnityEngine.Analytics.TrackableProperty : object {
public int kMaxParams
private List`1<FieldWithTarget> m_Fields
public List`1<FieldWithTarget> fields
public List`1<FieldWithTarget> get_fields()
public void set_fields(List`1<FieldWithTarget> value)
public int GetHashCode()
}
public UnityEngine.Analytics.TrackablePropertyBase : object {
protected Object m_Target
protected string m_Path
}
public UnityEngine.Analytics.TrackableTrigger : object {
private GameObject m_Target
private string m_MethodPath
}
public UnityEngine.Analytics.TriggerBool : Enum {
public int value__
public TriggerBool All
public TriggerBool Any
public TriggerBool None
}
public UnityEngine.Analytics.TriggerLifecycleEvent : Enum {
public int value__
public TriggerLifecycleEvent None
public TriggerLifecycleEvent Awake
public TriggerLifecycleEvent Start
public TriggerLifecycleEvent OnEnable
public TriggerLifecycleEvent OnDisable
public TriggerLifecycleEvent OnApplicationPause
public TriggerLifecycleEvent OnApplicationUnpause
public TriggerLifecycleEvent OnDestroy
}
public UnityEngine.Analytics.TriggerListContainer : object {
private List`1<TriggerRule> m_Rules
internal List`1<TriggerRule> rules
internal List`1<TriggerRule> get_rules()
internal void set_rules(List`1<TriggerRule> value)
}
public UnityEngine.Analytics.TriggerOperator : Enum {
public int value__
public TriggerOperator Equals
public TriggerOperator DoesNotEqual
public TriggerOperator IsGreaterThan
public TriggerOperator IsGreaterThanOrEqualTo
public TriggerOperator IsLessThan
public TriggerOperator IsLessThanOrEqualTo
public TriggerOperator IsBetween
public TriggerOperator IsBetweenOrEqualTo
}
public UnityEngine.Analytics.TriggerRule : object {
private TrackableField m_Target
private TriggerOperator m_Operator
private ValueProperty m_Value
private ValueProperty m_Value2
public bool Test()
public bool Test(Boolean& error, String& message)
private bool TestByObject(object currentValue)
private bool TestByEnum(string currentValue)
private bool TestByString(string currentValue)
private bool TestByBool(bool currentValue)
private bool TestByDouble(double currentValue)
private bool SafeEquals(double double1, double double2)
private double GetDouble(object value)
}
public UnityEngine.Analytics.TriggerType : Enum {
public int value__
public TriggerType Lifecycle
public TriggerType External
public TriggerType Timer
public TriggerType ExposedMethod
}
public UnityEngine.Analytics.ValueProperty : object {
private bool m_EditingCustomValue
private int m_PopupIndex
private string m_CustomValue
private bool m_FixedType
private string m_EnumType
private bool m_EnumTypeIsCustomizable
private bool m_CanDisable
private PropertyType m_PropertyType
private string m_ValueType
private string m_Value
private TrackableField m_Target
public string valueType
public string propertyValue
public TrackableField target
public string get_valueType()
public void set_valueType(string value)
public string get_propertyValue()
public TrackableField get_target()
public bool IsValid()
}
