public UnityEngine.Rendering.PostProcessing.AmbientOcclusion : PostProcessEffectSettings {
public AmbientOcclusionModeParameter mode
public FloatParameter intensity
public ColorParameter color
public BoolParameter ambientOnly
public FloatParameter noiseFilterTolerance
public FloatParameter blurTolerance
public FloatParameter upsampleTolerance
public FloatParameter thicknessModifier
public FloatParameter directLightingStrength
public FloatParameter radius
public AmbientOcclusionQualityParameter quality
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.AmbientOcclusionMode : Enum {
public int value__
public AmbientOcclusionMode ScalableAmbientObscurance
public AmbientOcclusionMode MultiScaleVolumetricObscurance
}
public UnityEngine.Rendering.PostProcessing.AmbientOcclusionQuality : Enum {
public int value__
public AmbientOcclusionQuality Lowest
public AmbientOcclusionQuality Low
public AmbientOcclusionQuality Medium
public AmbientOcclusionQuality High
public AmbientOcclusionQuality Ultra
}
public UnityEngine.Rendering.PostProcessing.AmbientOcclusionRenderer : PostProcessEffectRenderer`1<AmbientOcclusion> {
private IAmbientOcclusionMethod[] m_Methods
public void Init()
public bool IsAmbientOnly(PostProcessRenderContext context)
public IAmbientOcclusionMethod Get()
public DepthTextureMode GetCameraFlags()
public void Release()
public ScalableAO GetScalableAO()
public MultiScaleVO GetMultiScaleVO()
public void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.AutoExposure : PostProcessEffectSettings {
public Vector2Parameter filtering
public FloatParameter minLuminance
public FloatParameter maxLuminance
public FloatParameter keyValue
public EyeAdaptationParameter eyeAdaptation
public FloatParameter speedUp
public FloatParameter speedDown
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.AutoExposureRenderer : PostProcessEffectRenderer`1<AutoExposure> {
private int k_NumEyes
private int k_NumAutoExposureTextures
private RenderTexture[][] m_AutoExposurePool
private Int32[] m_AutoExposurePingPong
private RenderTexture m_CurrentAutoExposure
private void CheckTexture(int eye, int id)
public void Render(PostProcessRenderContext context)
public void Release()
}
public UnityEngine.Rendering.PostProcessing.Bloom : PostProcessEffectSettings {
public FloatParameter intensity
public FloatParameter threshold
public FloatParameter softKnee
public FloatParameter clamp
public FloatParameter diffusion
public FloatParameter anamorphicRatio
public ColorParameter color
public BoolParameter fastMode
public TextureParameter dirtTexture
public FloatParameter dirtIntensity
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.BloomRenderer : PostProcessEffectRenderer`1<Bloom> {
private Level[] m_Pyramid
private int k_MaxPyramidSize
public void Init()
public void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.ChromaticAberration : PostProcessEffectSettings {
public TextureParameter spectralLut
public FloatParameter intensity
public BoolParameter fastMode
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.ChromaticAberrationRenderer : PostProcessEffectRenderer`1<ChromaticAberration> {
private Texture2D m_InternalSpectralLut
public void Render(PostProcessRenderContext context)
public void Release()
}
public UnityEngine.Rendering.PostProcessing.ColorBlindnessType : Enum {
public int value__
public ColorBlindnessType Deuteranopia
public ColorBlindnessType Protanopia
public ColorBlindnessType Tritanopia
}
public UnityEngine.Rendering.PostProcessing.ColorGrading : PostProcessEffectSettings {
public GradingModeParameter gradingMode
public TextureParameter externalLut
public TonemapperParameter tonemapper
public FloatParameter toneCurveToeStrength
public FloatParameter toneCurveToeLength
public FloatParameter toneCurveShoulderStrength
public FloatParameter toneCurveShoulderLength
public FloatParameter toneCurveShoulderAngle
public FloatParameter toneCurveGamma
public TextureParameter ldrLut
public FloatParameter ldrLutContribution
public FloatParameter temperature
public FloatParameter tint
public ColorParameter colorFilter
public FloatParameter hueShift
public FloatParameter saturation
public FloatParameter brightness
public FloatParameter postExposure
public FloatParameter contrast
public FloatParameter mixerRedOutRedIn
public FloatParameter mixerRedOutGreenIn
public FloatParameter mixerRedOutBlueIn
public FloatParameter mixerGreenOutRedIn
public FloatParameter mixerGreenOutGreenIn
public FloatParameter mixerGreenOutBlueIn
public FloatParameter mixerBlueOutRedIn
public FloatParameter mixerBlueOutGreenIn
public FloatParameter mixerBlueOutBlueIn
public Vector4Parameter lift
public Vector4Parameter gamma
public Vector4Parameter gain
public SplineParameter masterCurve
public SplineParameter redCurve
public SplineParameter greenCurve
public SplineParameter blueCurve
public SplineParameter hueVsHueCurve
public SplineParameter hueVsSatCurve
public SplineParameter satVsSatCurve
public SplineParameter lumVsSatCurve
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.ColorGradingRenderer : PostProcessEffectRenderer`1<ColorGrading> {
private Texture2D m_GradingCurves
private Color[] m_Pixels
private RenderTexture m_InternalLdrLut
private RenderTexture m_InternalLogLut
private int k_Lut2DSize
private int k_Lut3DSize
private HableCurve m_HableCurve
public void Render(PostProcessRenderContext context)
private void RenderExternalPipeline3D(PostProcessRenderContext context)
private void RenderHDRPipeline3D(PostProcessRenderContext context)
private void RenderHDRPipeline2D(PostProcessRenderContext context)
private void RenderLDRPipeline2D(PostProcessRenderContext context)
private void CheckInternalLogLut()
private void CheckInternalStripLut()
private Texture2D GetCurveTexture(bool hdr)
private RenderTextureFormat GetLutFormat()
private TextureFormat GetCurveFormat()
public void Release()
}
public UnityEngine.Rendering.PostProcessing.ColorParameter : ParameterOverride`1<Color> {
public void Interp(Color from, Color to, float t)
public Vector4 op_Implicit(ColorParameter prop)
}
public UnityEngine.Rendering.PostProcessing.ColorUtilities : object {
private float logC_cut
private float logC_a
private float logC_b
private float logC_c
private float logC_d
private float logC_e
private float logC_f
public float StandardIlluminantY(float x)
public Vector3 CIExyToLMS(float x, float y)
public Vector3 ComputeColorBalance(float temperature, float tint)
public Vector3 ColorToLift(Vector4 color)
public Vector3 ColorToInverseGamma(Vector4 color)
public Vector3 ColorToGain(Vector4 color)
public float LogCToLinear(float x)
public float LinearToLogC(float x)
public UInt32 ToHex(Color c)
public Color ToRGBA(UInt32 hex)
}
public UnityEngine.Rendering.PostProcessing.DebugOverlay : Enum {
public int value__
public DebugOverlay None
public DebugOverlay Depth
public DebugOverlay Normals
public DebugOverlay MotionVectors
public DebugOverlay NANTracker
public DebugOverlay ColorBlindnessSimulation
public DebugOverlay _
public DebugOverlay AmbientOcclusion
public DebugOverlay BloomBuffer
public DebugOverlay BloomThreshold
public DebugOverlay DepthOfField
}
public UnityEngine.Rendering.PostProcessing.DepthOfField : PostProcessEffectSettings {
public FloatParameter focusDistance
public FloatParameter aperture
public FloatParameter focalLength
public KernelSizeParameter kernelSize
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.DepthOfFieldRenderer : PostProcessEffectRenderer`1<DepthOfField> {
private int k_NumEyes
private int k_NumCoCHistoryTextures
private RenderTexture[][] m_CoCHistoryTextures
private Int32[] m_HistoryPingPong
private float k_FilmHeight
public DepthTextureMode GetCameraFlags()
private RenderTextureFormat SelectFormat(RenderTextureFormat primary, RenderTextureFormat secondary)
private float CalculateMaxCoCRadius(int screenHeight)
private RenderTexture CheckHistory(int eye, int id, PostProcessRenderContext context, RenderTextureFormat format)
public void Render(PostProcessRenderContext context)
public void Release()
}
public UnityEngine.Rendering.PostProcessing.DisplayNameAttribute : Attribute {
public string displayName
public void .ctor(string displayName)
}
public UnityEngine.Rendering.PostProcessing.Dithering : object {
private int m_NoiseTextureIndex
internal void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.EyeAdaptation : Enum {
public int value__
public EyeAdaptation Progressive
public EyeAdaptation Fixed
}
public UnityEngine.Rendering.PostProcessing.FastApproximateAntialiasing : object {
public bool fastMode
public bool keepAlpha
}
public UnityEngine.Rendering.PostProcessing.FloatParameter : ParameterOverride`1<float> {
public void Interp(float from, float to, float t)
}
public UnityEngine.Rendering.PostProcessing.Fog : object {
public bool enabled
public bool excludeSkybox
internal DepthTextureMode GetCameraFlags()
internal bool IsEnabledAndSupported(PostProcessRenderContext context)
internal void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.GradingMode : Enum {
public int value__
public GradingMode LowDefinitionRange
public GradingMode HighDefinitionRange
public GradingMode External
}
public UnityEngine.Rendering.PostProcessing.Grain : PostProcessEffectSettings {
public BoolParameter colored
public FloatParameter intensity
public FloatParameter size
public FloatParameter lumContrib
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.GrainRenderer : PostProcessEffectRenderer`1<Grain> {
private RenderTexture m_GrainLookupRT
private int k_SampleCount
private int m_SampleIndex
public void Render(PostProcessRenderContext context)
private RenderTextureFormat GetLookupFormat()
public void Release()
}
public UnityEngine.Rendering.PostProcessing.HableCurve : object {
private float <whitePoint>k__BackingField
private float <inverseWhitePoint>k__BackingField
private float <x0>k__BackingField
private float <x1>k__BackingField
public Segment[] segments
public Uniforms uniforms
public float whitePoint
public float inverseWhitePoint
public float x0
public float x1
public float get_whitePoint()
private void set_whitePoint(float value)
public float get_inverseWhitePoint()
private void set_inverseWhitePoint(float value)
public float get_x0()
private void set_x0(float value)
public float get_x1()
private void set_x1(float value)
public float Eval(float x)
public void Init(float toeStrength, float toeLength, float shoulderStrength, float shoulderLength, float shoulderAngle, float gamma)
private void InitSegments(DirectParams srcParams)
private void SolveAB(Single& lnA, Single& B, float x0, float y0, float m)
private void AsSlopeIntercept(Single& m, Single& b, float x0, float x1, float y0, float y1)
private float EvalDerivativeLinearGamma(float m, float b, float g, float x)
}
public UnityEngine.Rendering.PostProcessing.HaltonSeq : object {
public float Get(int index, int radix)
}
public UnityEngine.Rendering.PostProcessing.HistogramMonitor : Monitor {
public int width
public int height
public Channel channel
private ComputeBuffer m_Data
private int k_NumBins
private int k_ThreadGroupSizeX
private int k_ThreadGroupSizeY
internal void OnDisable()
internal bool NeedsHalfRes()
internal bool ShaderResourcesAvailable(PostProcessRenderContext context)
internal void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.IAmbientOcclusionMethod {
public DepthTextureMode GetCameraFlags()
public void RenderAfterOpaque(PostProcessRenderContext context)
public void RenderAmbientOnly(PostProcessRenderContext context)
public void CompositeAmbientOnly(PostProcessRenderContext context)
public void Release()
}
public UnityEngine.Rendering.PostProcessing.IntParameter : ParameterOverride`1<int> {
public void Interp(int from, int to, float t)
}
public UnityEngine.Rendering.PostProcessing.KernelSize : Enum {
public int value__
public KernelSize Small
public KernelSize Medium
public KernelSize Large
public KernelSize VeryLarge
}
public UnityEngine.Rendering.PostProcessing.LensDistortion : PostProcessEffectSettings {
public FloatParameter intensity
public FloatParameter intensityX
public FloatParameter intensityY
public FloatParameter centerX
public FloatParameter centerY
public FloatParameter scale
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.LensDistortionRenderer : PostProcessEffectRenderer`1<LensDistortion> {
public void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.LightMeterMonitor : Monitor {
public int width
public int height
public bool showCurves
internal bool ShaderResourcesAvailable(PostProcessRenderContext context)
internal void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.LogHistogram : object {
public int rangeMin
public int rangeMax
private int k_Bins
private int m_ThreadX
private int m_ThreadY
private ComputeBuffer <data>k__BackingField
public ComputeBuffer data
public ComputeBuffer get_data()
private void set_data(ComputeBuffer value)
public void Generate(PostProcessRenderContext context)
public Vector4 GetHistogramScaleOffsetRes(PostProcessRenderContext context)
public void Release()
}
public UnityEngine.Rendering.PostProcessing.MaxAttribute : Attribute {
public float max
public void .ctor(float max)
}
internal UnityEngine.Rendering.PostProcessing.MeshUtilities : object {
private Dictionary`2<PrimitiveType, Mesh> s_Primitives
private Dictionary`2<Type, PrimitiveType> s_ColliderPrimitives
internal Mesh GetColliderMesh(Collider collider)
internal Mesh GetPrimitive(PrimitiveType primitiveType)
private Mesh GetBuiltinMesh(PrimitiveType primitiveType)
}
public UnityEngine.Rendering.PostProcessing.MinAttribute : Attribute {
public float min
public void .ctor(float min)
}
public UnityEngine.Rendering.PostProcessing.MinMaxAttribute : Attribute {
public float min
public float max
public void .ctor(float min, float max)
}
public UnityEngine.Rendering.PostProcessing.Monitor : object {
private RenderTexture <output>k__BackingField
internal bool requested
public RenderTexture output
public RenderTexture get_output()
protected void set_output(RenderTexture value)
public bool IsRequestedAndSupported(PostProcessRenderContext context)
internal bool ShaderResourcesAvailable(PostProcessRenderContext context)
internal bool NeedsHalfRes()
protected void CheckOutput(int width, int height)
internal void OnEnable()
internal void OnDisable()
internal void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.MonitorType : Enum {
public int value__
public MonitorType LightMeter
public MonitorType Histogram
public MonitorType Waveform
public MonitorType Vectorscope
}
public UnityEngine.Rendering.PostProcessing.MotionBlur : PostProcessEffectSettings {
public FloatParameter shutterAngle
public IntParameter sampleCount
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.MotionBlurRenderer : PostProcessEffectRenderer`1<MotionBlur> {
public DepthTextureMode GetCameraFlags()
public void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.MultiScaleVO : object {
private Single[] m_SampleThickness
private Single[] m_InvThicknessTable
private Single[] m_SampleWeightTable
private Int32[] m_Widths
private Int32[] m_Heights
private AmbientOcclusion m_Settings
private PropertySheet m_PropertySheet
private PostProcessResources m_Resources
private RenderTexture m_AmbientOnlyAO
private RenderTargetIdentifier[] m_MRT
public void .ctor(AmbientOcclusion settings)
public DepthTextureMode GetCameraFlags()
public void SetResources(PostProcessResources resources)
private void Alloc(CommandBuffer cmd, int id, MipLevel size, RenderTextureFormat format, bool uav)
private void AllocArray(CommandBuffer cmd, int id, MipLevel size, RenderTextureFormat format, bool uav)
private void Release(CommandBuffer cmd, int id)
private Vector4 CalculateZBufferParams(Camera camera)
private float CalculateTanHalfFovHeight(Camera camera)
private Vector2 GetSize(MipLevel mip)
private Vector3 GetSizeArray(MipLevel mip)
public void GenerateAOMap(CommandBuffer cmd, Camera camera, RenderTargetIdentifier destination, Nullable`1<RenderTargetIdentifier> depthMap, bool invert)
private void PushAllocCommands(CommandBuffer cmd)
private void PushDownsampleCommands(CommandBuffer cmd, Camera camera, Nullable`1<RenderTargetIdentifier> depthMap)
private void PushRenderCommands(CommandBuffer cmd, int source, int destination, Vector3 sourceSize, float tanHalfFovH)
private void PushUpsampleCommands(CommandBuffer cmd, int lowResDepth, int interleavedAO, int highResDepth, Nullable`1<int> highResAO, RenderTargetIdentifier dest, Vector3 lowResDepthSize, Vector2 highResDepthSize, bool invert)
private void PushReleaseCommands(CommandBuffer cmd)
private void PreparePropertySheet(PostProcessRenderContext context)
private void CheckAOTexture(PostProcessRenderContext context)
private void PushDebug(PostProcessRenderContext context)
public void RenderAfterOpaque(PostProcessRenderContext context)
public void RenderAmbientOnly(PostProcessRenderContext context)
public void CompositeAmbientOnly(PostProcessRenderContext context)
public void Release()
}
public UnityEngine.Rendering.PostProcessing.ParameterOverride : object {
public bool overrideState
internal void Interp(ParameterOverride from, ParameterOverride to, float t)
public int GetHash()
public T GetValue()
protected internal void OnEnable()
protected internal void OnDisable()
internal void SetValue(ParameterOverride parameter)
}
public UnityEngine.Rendering.PostProcessing.ParameterOverride`1 : ParameterOverride {
public T value
public void .ctor(T value)
public void .ctor(T value, bool overrideState)
internal void Interp(ParameterOverride from, ParameterOverride to, float t)
public void Interp(T from, T to, float t)
public void Override(T x)
internal void SetValue(ParameterOverride parameter)
public int GetHash()
public T op_Implicit(ParameterOverride`1<T> prop)
}
public UnityEngine.Rendering.PostProcessing.PostProcessAttribute : Attribute {
public Type renderer
public PostProcessEvent eventType
public string menuItem
public bool allowInSceneView
internal bool builtinEffect
public void .ctor(Type renderer, PostProcessEvent eventType, string menuItem, bool allowInSceneView)
internal void .ctor(Type renderer, string menuItem, bool allowInSceneView)
}
public UnityEngine.Rendering.PostProcessing.PostProcessBundle : object {
private PostProcessAttribute <attribute>k__BackingField
private PostProcessEffectSettings <settings>k__BackingField
private PostProcessEffectRenderer m_Renderer
public PostProcessAttribute attribute
public PostProcessEffectSettings settings
internal PostProcessEffectRenderer renderer
internal void .ctor(PostProcessEffectSettings settings)
public PostProcessAttribute get_attribute()
private void set_attribute(PostProcessAttribute value)
public PostProcessEffectSettings get_settings()
private void set_settings(PostProcessEffectSettings value)
internal PostProcessEffectRenderer get_renderer()
internal void Release()
internal void ResetHistory()
internal T CastSettings()
internal T CastRenderer()
}
public UnityEngine.Rendering.PostProcessing.PostProcessDebug : MonoBehaviour {
public PostProcessLayer postProcessLayer
private PostProcessLayer m_PreviousPostProcessLayer
public bool lightMeter
public bool histogram
public bool waveform
public bool vectorscope
public DebugOverlay debugOverlay
private Camera m_CurrentCamera
private CommandBuffer m_CmdAfterEverything
private void OnEnable()
private void OnDisable()
private void Update()
private void Reset()
private void UpdateStates()
private void OnPostRender()
private void OnGUI()
private void DrawMonitor(Rect& rect, Monitor monitor, bool enabled)
}
public UnityEngine.Rendering.PostProcessing.PostProcessDebugLayer : object {
public LightMeterMonitor lightMeter
public HistogramMonitor histogram
public WaveformMonitor waveform
public VectorscopeMonitor vectorscope
private Dictionary`2<MonitorType, Monitor> m_Monitors
private int frameWidth
private int frameHeight
private RenderTexture <debugOverlayTarget>k__BackingField
private bool <debugOverlayActive>k__BackingField
private DebugOverlay <debugOverlay>k__BackingField
public OverlaySettings overlaySettings
public RenderTexture debugOverlayTarget
public bool debugOverlayActive
public DebugOverlay debugOverlay
public RenderTexture get_debugOverlayTarget()
private void set_debugOverlayTarget(RenderTexture value)
public bool get_debugOverlayActive()
private void set_debugOverlayActive(bool value)
public DebugOverlay get_debugOverlay()
private void set_debugOverlay(DebugOverlay value)
internal void OnEnable()
internal void OnDisable()
private void DestroyDebugOverlayTarget()
public void RequestMonitorPass(MonitorType monitor)
public void RequestDebugOverlay(DebugOverlay mode)
internal void SetFrameSize(int width, int height)
public void PushDebugOverlay(CommandBuffer cmd, RenderTargetIdentifier source, PropertySheet sheet, int pass)
internal DepthTextureMode GetCameraFlags()
internal void RenderMonitors(PostProcessRenderContext context)
internal void RenderSpecialOverlays(PostProcessRenderContext context)
internal void EndFrame()
}
public UnityEngine.Rendering.PostProcessing.PostProcessEffectRenderer : object {
protected bool m_ResetHistory
public void Init()
public DepthTextureMode GetCameraFlags()
public void ResetHistory()
public void Release()
public void Render(PostProcessRenderContext context)
internal void SetSettings(PostProcessEffectSettings settings)
}
public UnityEngine.Rendering.PostProcessing.PostProcessEffectRenderer`1 : PostProcessEffectRenderer {
private T <settings>k__BackingField
public T settings
public T get_settings()
internal void set_settings(T value)
internal void SetSettings(PostProcessEffectSettings settings)
}
public UnityEngine.Rendering.PostProcessing.PostProcessEffectSettings : ScriptableObject {
public bool active
public BoolParameter enabled
internal ReadOnlyCollection`1<ParameterOverride> parameters
private Func`2<FieldInfo, bool> <>f__am$cache0
private Func`2<FieldInfo, int> <>f__am$cache1
private void OnEnable()
private void OnDisable()
public void SetAllOverridesTo(bool state, bool excludeEnabled)
public bool IsEnabledAndSupported(PostProcessRenderContext context)
public int GetHash()
private bool <OnEnable>m__0(FieldInfo t)
private int <OnEnable>m__1(FieldInfo t)
private ParameterOverride <OnEnable>m__2(FieldInfo t)
}
public UnityEngine.Rendering.PostProcessing.PostProcessEvent : Enum {
public int value__
public PostProcessEvent BeforeTransparent
public PostProcessEvent BeforeStack
public PostProcessEvent AfterStack
}
public UnityEngine.Rendering.PostProcessing.PostProcessEventComparer : ValueType {
public bool Equals(PostProcessEvent x, PostProcessEvent y)
public int GetHashCode(PostProcessEvent obj)
}
public UnityEngine.Rendering.PostProcessing.PostProcessLayer : MonoBehaviour {
public Transform volumeTrigger
public LayerMask volumeLayer
public bool stopNaNPropagation
public Antialiasing antialiasingMode
public TemporalAntialiasing temporalAntialiasing
public SubpixelMorphologicalAntialiasing subpixelMorphologicalAntialiasing
public FastApproximateAntialiasing fastApproximateAntialiasing
public Fog fog
public Dithering dithering
public PostProcessDebugLayer debugLayer
public RenderTextureFormat intermediateFormat
private RenderTextureFormat prevIntermediateFormat
private bool supportsIntermediateFormat
private PostProcessResources m_Resources
public bool breakBeforeColorGrading
private List`1<SerializedBundleRef> m_BeforeTransparentBundles
private List`1<SerializedBundleRef> m_BeforeStackBundles
private List`1<SerializedBundleRef> m_AfterStackBundles
private Dictionary`2<PostProcessEvent, List`1<SerializedBundleRef>> <sortedBundles>k__BackingField
private bool <haveBundlesBeenInited>k__BackingField
private Dictionary`2<Type, PostProcessBundle> m_Bundles
private PropertySheetFactory m_PropertySheetFactory
private CommandBuffer m_LegacyCmdBufferBeforeReflections
private CommandBuffer m_LegacyCmdBufferBeforeLighting
private CommandBuffer m_LegacyCmdBufferOpaque
private CommandBuffer m_LegacyCmdBuffer
private Camera m_Camera
private PostProcessRenderContext m_CurrentContext
private LogHistogram m_LogHistogram
private bool m_SettingsUpdateNeeded
private bool m_IsRenderingInSceneView
private TargetPool m_TargetPool
private bool m_NaNKilled
private List`1<PostProcessEffectRenderer> m_ActiveEffects
private List`1<RenderTargetIdentifier> m_Targets
private Func`2<KeyValuePair`2<Type, PostProcessBundle>, PostProcessBundle> <>f__am$cache0
public Dictionary`2<PostProcessEvent, List`1<SerializedBundleRef>> sortedBundles
public bool haveBundlesBeenInited
public Dictionary`2<PostProcessEvent, List`1<SerializedBundleRef>> get_sortedBundles()
private void set_sortedBundles(Dictionary`2<PostProcessEvent, List`1<SerializedBundleRef>> value)
public bool get_haveBundlesBeenInited()
private void set_haveBundlesBeenInited(bool value)
private void OnEnable()
private void InitLegacy()
public void Init(PostProcessResources resources)
public void InitBundles()
private void UpdateBundleSortList(List`1<SerializedBundleRef> sortedList, PostProcessEvent evt)
private void OnDisable()
private void Reset()
private void OnPreCull()
private void OnPreRender()
private RenderTextureFormat GetIntermediateFormat()
private void BuildCommandBuffers()
private void OnPostRender()
public PostProcessBundle GetBundle()
public PostProcessBundle GetBundle(Type settingsType)
public T GetSettings()
public void BakeMSVOMap(CommandBuffer cmd, Camera camera, RenderTargetIdentifier destination, Nullable`1<RenderTargetIdentifier> depthMap, bool invert)
internal void OverrideSettings(List`1<PostProcessEffectSettings> baseSettings, float interpFactor)
private void SetLegacyCameraFlags(PostProcessRenderContext context)
public void ResetHistory()
public bool HasOpaqueOnlyEffects(PostProcessRenderContext context)
public bool HasActiveEffects(PostProcessEvent evt, PostProcessRenderContext context)
private void SetupContext(PostProcessRenderContext context)
private void UpdateSettingsIfNeeded(PostProcessRenderContext context)
public void RenderOpaqueOnly(PostProcessRenderContext context)
public void Render(PostProcessRenderContext context)
public void RenderOnlyTAA(PostProcessRenderContext context)
private int RenderInjectionPoint(PostProcessEvent evt, PostProcessRenderContext context, string marker, int releaseTargetAfterUse)
private void RenderList(List`1<SerializedBundleRef> list, PostProcessRenderContext context, string marker)
private void ApplyFlip(PostProcessRenderContext context, MaterialPropertyBlock properties)
private void ApplyDefaultFlip(MaterialPropertyBlock properties)
private int RenderBuiltins(PostProcessRenderContext context, bool isFinalPass, int releaseTargetAfterUse)
private void RenderFinalPass(PostProcessRenderContext context, int releaseTargetAfterUse)
private int RenderEffect(PostProcessRenderContext context, bool useTempTarget)
private bool ShouldGenerateLogHistogram(PostProcessRenderContext context)
private PostProcessBundle <UpdateBundleSortList>m__0(KeyValuePair`2<Type, PostProcessBundle> kvp)
}
public UnityEngine.Rendering.PostProcessing.PostProcessManager : object {
private PostProcessManager s_Instance
private int k_MaxLayerCount
private Dictionary`2<int, List`1<PostProcessVolume>> m_SortedVolumes
private List`1<PostProcessVolume> m_Volumes
private Dictionary`2<int, bool> m_SortNeeded
private List`1<PostProcessEffectSettings> m_BaseSettings
private List`1<Collider> m_TempColliders
public Dictionary`2<Type, PostProcessAttribute> settingsTypes
private Func`2<Type, bool> <>f__am$cache0
public PostProcessManager instance
public PostProcessManager get_instance()
private void CleanBaseTypes()
private void ReloadBaseTypes()
public void GetActiveVolumes(PostProcessLayer layer, List`1<PostProcessVolume> results, bool skipDisabled, bool skipZeroWeight)
public PostProcessVolume GetHighestPriorityVolume(PostProcessLayer layer)
public PostProcessVolume GetHighestPriorityVolume(LayerMask mask)
public PostProcessVolume QuickVolume(int layer, float priority, PostProcessEffectSettings[] settings)
internal void SetLayerDirty(int layer)
internal void UpdateVolumeLayer(PostProcessVolume volume, int prevLayer, int newLayer)
private void Register(PostProcessVolume volume, int layer)
internal void Register(PostProcessVolume volume)
private void Unregister(PostProcessVolume volume, int layer)
internal void Unregister(PostProcessVolume volume)
private void ReplaceData(PostProcessLayer postProcessLayer)
internal void UpdateSettings(PostProcessLayer postProcessLayer, Camera camera)
private List`1<PostProcessVolume> GrabVolumes(LayerMask mask)
private void SortByPriority(List`1<PostProcessVolume> volumes)
private bool IsVolumeRenderedByCamera(PostProcessVolume volume, Camera camera)
private bool <ReloadBaseTypes>m__0(Type t)
}
public UnityEngine.Rendering.PostProcessing.PostProcessProfile : ScriptableObject {
public List`1<PostProcessEffectSettings> settings
public bool isDirty
private Predicate`1<PostProcessEffectSettings> <>f__am$cache0
private void OnEnable()
public void Reset()
public T AddSettings()
public PostProcessEffectSettings AddSettings(Type type)
public PostProcessEffectSettings AddSettings(PostProcessEffectSettings effect)
public void RemoveSettings()
public void RemoveSettings(Type type)
public bool HasSettings()
public bool HasSettings(Type type)
public T GetSetting()
public bool TryGetSettings(T& outSetting)
private bool <OnEnable>m__0(PostProcessEffectSettings x)
}
public UnityEngine.Rendering.PostProcessing.PostProcessRenderContext : object {
private Camera m_Camera
private CommandBuffer <command>k__BackingField
private RenderTargetIdentifier <source>k__BackingField
private RenderTargetIdentifier <destination>k__BackingField
private RenderTextureFormat <sourceFormat>k__BackingField
private bool <flip>k__BackingField
private PostProcessResources <resources>k__BackingField
private PropertySheetFactory <propertySheets>k__BackingField
private Dictionary`2<string, object> <userData>k__BackingField
private PostProcessDebugLayer <debugLayer>k__BackingField
private int <width>k__BackingField
private int <height>k__BackingField
private bool <stereoActive>k__BackingField
private int <xrActiveEye>k__BackingField
private int <screenWidth>k__BackingField
private int <screenHeight>k__BackingField
private bool <isSceneView>k__BackingField
private Antialiasing <antialiasing>k__BackingField
private TemporalAntialiasing <temporalAntialiasing>k__BackingField
internal PropertySheet uberSheet
internal Texture autoExposureTexture
internal LogHistogram logHistogram
internal Texture logLut
internal AutoExposure autoExposure
internal int bloomBufferNameID
private RenderTextureDescriptor m_sourceDescriptor
public Camera camera
public CommandBuffer command
public RenderTargetIdentifier source
public RenderTargetIdentifier destination
public RenderTextureFormat sourceFormat
public bool flip
public PostProcessResources resources
public PropertySheetFactory propertySheets
public Dictionary`2<string, object> userData
public PostProcessDebugLayer debugLayer
public int width
public int height
public bool stereoActive
public int xrActiveEye
public int screenWidth
public int screenHeight
public bool isSceneView
public Antialiasing antialiasing
public TemporalAntialiasing temporalAntialiasing
public Camera get_camera()
public void set_camera(Camera value)
public CommandBuffer get_command()
public void set_command(CommandBuffer value)
public RenderTargetIdentifier get_source()
public void set_source(RenderTargetIdentifier value)
public RenderTargetIdentifier get_destination()
public void set_destination(RenderTargetIdentifier value)
public RenderTextureFormat get_sourceFormat()
public void set_sourceFormat(RenderTextureFormat value)
public bool get_flip()
public void set_flip(bool value)
public PostProcessResources get_resources()
internal void set_resources(PostProcessResources value)
public PropertySheetFactory get_propertySheets()
internal void set_propertySheets(PropertySheetFactory value)
public Dictionary`2<string, object> get_userData()
private void set_userData(Dictionary`2<string, object> value)
public PostProcessDebugLayer get_debugLayer()
internal void set_debugLayer(PostProcessDebugLayer value)
public int get_width()
private void set_width(int value)
public int get_height()
private void set_height(int value)
public bool get_stereoActive()
private void set_stereoActive(bool value)
public int get_xrActiveEye()
private void set_xrActiveEye(int value)
public int get_screenWidth()
private void set_screenWidth(int value)
public int get_screenHeight()
private void set_screenHeight(int value)
public bool get_isSceneView()
internal void set_isSceneView(bool value)
public Antialiasing get_antialiasing()
internal void set_antialiasing(Antialiasing value)
public TemporalAntialiasing get_temporalAntialiasing()
internal void set_temporalAntialiasing(TemporalAntialiasing value)
public void Reset()
public bool IsTemporalAntialiasingActive()
public bool IsDebugOverlayEnabled(DebugOverlay overlay)
public void PushDebugOverlay(CommandBuffer cmd, RenderTargetIdentifier source, PropertySheet sheet, int pass)
private RenderTextureDescriptor GetDescriptor(int depthBufferBits, RenderTextureFormat colorFormat, RenderTextureReadWrite readWrite)
public void GetScreenSpaceTemporaryRT(CommandBuffer cmd, int nameID, int depthBufferBits, RenderTextureFormat colorFormat, RenderTextureReadWrite readWrite, FilterMode filter, int widthOverride, int heightOverride)
public RenderTexture GetScreenSpaceTemporaryRT(int depthBufferBits, RenderTextureFormat colorFormat, RenderTextureReadWrite readWrite, int widthOverride, int heightOverride)
}
public UnityEngine.Rendering.PostProcessing.PostProcessResources : ScriptableObject {
public Texture2D[] blueNoise64
public Texture2D[] blueNoise256
public SMAALuts smaaLuts
public Shaders shaders
public ComputeShaders computeShaders
}
public UnityEngine.Rendering.PostProcessing.PostProcessVolume : MonoBehaviour {
public PostProcessProfile sharedProfile
public bool isGlobal
public float blendDistance
public float weight
public float priority
private int m_PreviousLayer
private float m_PreviousPriority
private List`1<Collider> m_TempColliders
private PostProcessProfile m_InternalProfile
public PostProcessProfile profile
internal PostProcessProfile profileRef
public PostProcessProfile get_profile()
public void set_profile(PostProcessProfile value)
internal PostProcessProfile get_profileRef()
public bool HasInstantiatedProfile()
private void OnEnable()
private void OnDisable()
private void Update()
private void OnDrawGizmos()
}
public UnityEngine.Rendering.PostProcessing.PropertySheet : object {
private MaterialPropertyBlock <properties>k__BackingField
private Material <material>k__BackingField
public MaterialPropertyBlock properties
internal Material material
internal void .ctor(Material material)
public MaterialPropertyBlock get_properties()
private void set_properties(MaterialPropertyBlock value)
internal Material get_material()
private void set_material(Material value)
public void ClearKeywords()
public void EnableKeyword(string keyword)
public void DisableKeyword(string keyword)
internal void Release()
}
public UnityEngine.Rendering.PostProcessing.PropertySheetFactory : object {
private Dictionary`2<Shader, PropertySheet> m_Sheets
public PropertySheet Get(string shaderName)
public PropertySheet Get(Shader shader)
public void Release()
}
public UnityEngine.Rendering.PostProcessing.RuntimeUtilities : object {
private Texture2D m_WhiteTexture
private Texture3D m_WhiteTexture3D
private Texture2D m_BlackTexture
private Texture3D m_BlackTexture3D
private Texture2D m_TransparentTexture
private Texture3D m_TransparentTexture3D
private Dictionary`2<int, Texture2D> m_LutStrips
private Mesh s_FullscreenTriangle
private Material s_CopyStdMaterial
private Material s_CopyMaterial
private PropertySheet s_CopySheet
private IEnumerable`1<Type> m_AssemblyTypes
private Func`2<Assembly, IEnumerable`1<Type>> <>f__am$cache0
public Texture2D whiteTexture
public Texture3D whiteTexture3D
public Texture2D blackTexture
public Texture3D blackTexture3D
public Texture2D transparentTexture
public Texture3D transparentTexture3D
public Mesh fullscreenTriangle
public Material copyStdMaterial
public Material copyMaterial
public PropertySheet copySheet
public bool scriptableRenderPipelineActive
public bool supportsDeferredShading
public bool supportsDepthNormals
public bool isSinglePassStereoEnabled
public bool isVREnabled
public bool isAndroidOpenGL
public RenderTextureFormat defaultHDRRenderTextureFormat
public bool isLinearColorSpace
public Texture2D get_whiteTexture()
public Texture3D get_whiteTexture3D()
public Texture2D get_blackTexture()
public Texture3D get_blackTexture3D()
public Texture2D get_transparentTexture()
public Texture3D get_transparentTexture3D()
public Texture2D GetLutStrip(int size)
public Mesh get_fullscreenTriangle()
public Material get_copyStdMaterial()
public Material get_copyMaterial()
public PropertySheet get_copySheet()
public void SetRenderTargetWithLoadStoreAction(CommandBuffer cmd, RenderTargetIdentifier rt, RenderBufferLoadAction loadAction, RenderBufferStoreAction storeAction)
public void SetRenderTargetWithLoadStoreAction(CommandBuffer cmd, RenderTargetIdentifier color, RenderBufferLoadAction colorLoadAction, RenderBufferStoreAction colorStoreAction, RenderTargetIdentifier depth, RenderBufferLoadAction depthLoadAction, RenderBufferStoreAction depthStoreAction)
public void BlitFullscreenTriangle(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, bool clear)
public void BlitFullscreenTriangle(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, PropertySheet propertySheet, int pass, bool clear)
public void BlitFullscreenTriangle(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, RenderTargetIdentifier depth, PropertySheet propertySheet, int pass, bool clear)
public void BlitFullscreenTriangle(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier[] destinations, RenderTargetIdentifier depth, PropertySheet propertySheet, int pass, bool clear)
public void BlitFullscreenTriangle(Texture source, RenderTexture destination, Material material, int pass)
public void BuiltinBlit(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier dest)
public void BuiltinBlit(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier dest, Material mat, int pass)
public void CopyTexture(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination)
public bool get_scriptableRenderPipelineActive()
public bool get_supportsDeferredShading()
public bool get_supportsDepthNormals()
public bool get_isSinglePassStereoEnabled()
public bool get_isVREnabled()
public bool get_isAndroidOpenGL()
public RenderTextureFormat get_defaultHDRRenderTextureFormat()
public bool isFloatingPointFormat(RenderTextureFormat format)
public void Destroy(Object obj)
public bool get_isLinearColorSpace()
public bool IsResolvedDepthAvailable(Camera camera)
public void DestroyProfile(PostProcessProfile profile, bool destroyEffects)
public void DestroyVolume(PostProcessVolume volume, bool destroySharedProfile)
public IEnumerable`1<T> GetAllSceneObjects()
public void CreateIfNull(T& obj)
public float Exp2(float x)
public Matrix4x4 GetJitteredPerspectiveProjectionMatrix(Camera camera, Vector2 offset)
public Matrix4x4 GetJitteredOrthographicProjectionMatrix(Camera camera, Vector2 offset)
public Matrix4x4 GenerateJitteredProjectionMatrixFromOriginal(PostProcessRenderContext context, Matrix4x4 origProj, Vector2 jitter)
public IEnumerable`1<Type> GetAllAssemblyTypes()
public T GetAttribute(Type type)
public Attribute[] GetMemberAttributes(Expression`1<Func`2<TType, TValue>> expr)
public string GetFieldPath(Expression`1<Func`2<TType, TValue>> expr)
public object GetParentObject(string path, object obj)
private IEnumerable`1<Type> <GetAllAssemblyTypes>m__0(Assembly t)
}
public UnityEngine.Rendering.PostProcessing.ScalableAO : object {
private RenderTexture m_Result
private PropertySheet m_PropertySheet
private AmbientOcclusion m_Settings
private RenderTargetIdentifier[] m_MRT
private Int32[] m_SampleCount
public void .ctor(AmbientOcclusion settings)
public DepthTextureMode GetCameraFlags()
private void DoLazyInitialization(PostProcessRenderContext context)
private void Render(PostProcessRenderContext context, CommandBuffer cmd, int occlusionSource)
public void RenderAfterOpaque(PostProcessRenderContext context)
public void RenderAmbientOnly(PostProcessRenderContext context)
public void CompositeAmbientOnly(PostProcessRenderContext context)
public void Release()
}
public UnityEngine.Rendering.PostProcessing.ScreenSpaceReflectionPreset : Enum {
public int value__
public ScreenSpaceReflectionPreset Lower
public ScreenSpaceReflectionPreset Low
public ScreenSpaceReflectionPreset Medium
public ScreenSpaceReflectionPreset High
public ScreenSpaceReflectionPreset Higher
public ScreenSpaceReflectionPreset Ultra
public ScreenSpaceReflectionPreset Overkill
public ScreenSpaceReflectionPreset Custom
}
public UnityEngine.Rendering.PostProcessing.ScreenSpaceReflectionResolution : Enum {
public int value__
public ScreenSpaceReflectionResolution Downsampled
public ScreenSpaceReflectionResolution FullSize
public ScreenSpaceReflectionResolution Supersampled
}
public UnityEngine.Rendering.PostProcessing.ScreenSpaceReflections : PostProcessEffectSettings {
public ScreenSpaceReflectionPresetParameter preset
public IntParameter maximumIterationCount
public ScreenSpaceReflectionResolutionParameter resolution
public FloatParameter thickness
public FloatParameter maximumMarchDistance
public FloatParameter distanceFade
public FloatParameter vignette
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.ScreenSpaceReflectionsRenderer : PostProcessEffectRenderer`1<ScreenSpaceReflections> {
private RenderTexture m_Resolve
private RenderTexture m_History
private Int32[] m_MipIDs
private QualityPreset[] m_Presets
public DepthTextureMode GetCameraFlags()
internal void CheckRT(RenderTexture& rt, int width, int height, RenderTextureFormat format, FilterMode filterMode, bool useMipMap)
public void Render(PostProcessRenderContext context)
public void Release()
}
internal UnityEngine.Rendering.PostProcessing.ShaderIDs : object {
internal int MainTex
internal int Jitter
internal int Sharpness
internal int FinalBlendParameters
internal int HistoryTex
internal int SMAA_Flip
internal int SMAA_Flop
internal int AOParams
internal int AOColor
internal int OcclusionTexture1
internal int OcclusionTexture2
internal int SAOcclusionTexture
internal int MSVOcclusionTexture
internal int DepthCopy
internal int LinearDepth
internal int LowDepth1
internal int LowDepth2
internal int LowDepth3
internal int LowDepth4
internal int TiledDepth1
internal int TiledDepth2
internal int TiledDepth3
internal int TiledDepth4
internal int Occlusion1
internal int Occlusion2
internal int Occlusion3
internal int Occlusion4
internal int Combined1
internal int Combined2
internal int Combined3
internal int SSRResolveTemp
internal int Noise
internal int Test
internal int Resolve
internal int History
internal int ViewMatrix
internal int InverseViewMatrix
internal int InverseProjectionMatrix
internal int ScreenSpaceProjectionMatrix
internal int Params2
internal int FogColor
internal int FogParams
internal int VelocityScale
internal int MaxBlurRadius
internal int RcpMaxBlurRadius
internal int VelocityTex
internal int Tile2RT
internal int Tile4RT
internal int Tile8RT
internal int TileMaxOffs
internal int TileMaxLoop
internal int TileVRT
internal int NeighborMaxTex
internal int LoopCount
internal int DepthOfFieldTemp
internal int DepthOfFieldTex
internal int Distance
internal int LensCoeff
internal int MaxCoC
internal int RcpMaxCoC
internal int RcpAspect
internal int CoCTex
internal int TaaParams
internal int AutoExposureTex
internal int HistogramBuffer
internal int Params
internal int ScaleOffsetRes
internal int BloomTex
internal int SampleScale
internal int Threshold
internal int ColorIntensity
internal int Bloom_DirtTex
internal int Bloom_Settings
internal int Bloom_Color
internal int Bloom_DirtTileOffset
internal int ChromaticAberration_Amount
internal int ChromaticAberration_SpectralLut
internal int Distortion_CenterScale
internal int Distortion_Amount
internal int Lut2D
internal int Lut3D
internal int Lut3D_Params
internal int Lut2D_Params
internal int UserLut2D_Params
internal int PostExposure
internal int ColorBalance
internal int ColorFilter
internal int HueSatCon
internal int Brightness
internal int ChannelMixerRed
internal int ChannelMixerGreen
internal int ChannelMixerBlue
internal int Lift
internal int InvGamma
internal int Gain
internal int Curves
internal int CustomToneCurve
internal int ToeSegmentA
internal int ToeSegmentB
internal int MidSegmentA
internal int MidSegmentB
internal int ShoSegmentA
internal int ShoSegmentB
internal int Vignette_Color
internal int Vignette_Center
internal int Vignette_Settings
internal int Vignette_Mask
internal int Vignette_Opacity
internal int Vignette_Mode
internal int Grain_Params1
internal int Grain_Params2
internal int GrainTex
internal int Phase
internal int LumaInAlpha
internal int DitheringTex
internal int Dithering_Coords
internal int From
internal int To
internal int Interp
internal int HalfResFinalCopy
internal int WaveformSource
internal int WaveformBuffer
internal int VectorscopeBuffer
internal int RenderViewportScaleFactor
internal int UVTransform
}
public UnityEngine.Rendering.PostProcessing.Spline : object {
public int k_Precision
public float k_Step
public AnimationCurve curve
private bool m_Loop
private float m_ZeroValue
private float m_Range
private AnimationCurve m_InternalLoopingCurve
private int frameCount
public Single[] cachedData
public void .ctor(AnimationCurve curve, float zeroValue, bool loop, Vector2 bounds)
public void Cache(int frame)
public float Evaluate(float t, int length)
public float Evaluate(float t)
public int GetHashCode()
}
public UnityEngine.Rendering.PostProcessing.SplineParameter : ParameterOverride`1<Spline> {
protected internal void OnEnable()
internal void SetValue(ParameterOverride parameter)
public void Interp(Spline from, Spline to, float t)
}
public UnityEngine.Rendering.PostProcessing.SubpixelMorphologicalAntialiasing : object {
public Quality quality
public bool IsSupported()
internal void Render(PostProcessRenderContext context)
}
internal UnityEngine.Rendering.PostProcessing.TargetPool : object {
private List`1<int> m_Pool
private int m_Current
internal int Get()
private int Get(int i)
internal void Reset()
}
public UnityEngine.Rendering.PostProcessing.TemporalAntialiasing : object {
public float jitterSpread
public float sharpness
public float stationaryBlending
public float motionBlending
public Func`3<Camera, Vector2, Matrix4x4> jitteredMatrixFunc
private Vector2 <jitter>k__BackingField
private RenderTargetIdentifier[] m_Mrt
private bool m_ResetHistory
private int k_SampleCount
private int <sampleIndex>k__BackingField
private int k_NumEyes
private int k_NumHistoryTextures
private RenderTexture[][] m_HistoryTextures
private Int32[] m_HistoryPingPong
public Vector2 jitter
public int sampleIndex
public int sampleCount
public Vector2 get_jitter()
private void set_jitter(Vector2 value)
public int get_sampleIndex()
private void set_sampleIndex(int value)
public int get_sampleCount()
public bool IsSupported()
internal DepthTextureMode GetCameraFlags()
internal void ResetHistory()
private Vector2 GenerateRandomOffset()
public Matrix4x4 GetJitteredProjectionMatrix(Camera camera)
public void ConfigureJitteredProjectionMatrix(PostProcessRenderContext context)
public void ConfigureStereoJitteredProjectionMatrices(PostProcessRenderContext context)
private void GenerateHistoryName(RenderTexture rt, int id, PostProcessRenderContext context)
private RenderTexture CheckHistory(int id, PostProcessRenderContext context)
internal void Render(PostProcessRenderContext context)
internal void Release()
}
public UnityEngine.Rendering.PostProcessing.TextureFormatUtilities : object {
private Dictionary`2<int, RenderTextureFormat> s_FormatAliasMap
private Dictionary`2<int, bool> s_SupportedRenderTextureFormats
private Dictionary`2<int, bool> s_SupportedTextureFormats
private bool IsObsolete(object value)
public RenderTextureFormat GetUncompressedRenderTextureFormat(Texture texture)
internal bool IsSupported(RenderTextureFormat format)
internal bool IsSupported(TextureFormat format)
}
internal UnityEngine.Rendering.PostProcessing.TextureLerper : object {
private TextureLerper m_Instance
private CommandBuffer m_Command
private PropertySheetFactory m_PropertySheets
private PostProcessResources m_Resources
private List`1<RenderTexture> m_Recycled
private List`1<RenderTexture> m_Actives
internal TextureLerper instance
internal TextureLerper get_instance()
internal void BeginFrame(PostProcessRenderContext context)
internal void EndFrame()
private RenderTexture Get(RenderTextureFormat format, int w, int h, int d, bool enableRandomWrite)
internal Texture Lerp(Texture from, Texture to, float t)
internal void Clear()
}
public UnityEngine.Rendering.PostProcessing.TextureParameter : ParameterOverride`1<Texture> {
public TextureParameterDefault defaultState
public void Interp(Texture from, Texture to, float t)
}
public UnityEngine.Rendering.PostProcessing.TextureParameterDefault : Enum {
public int value__
public TextureParameterDefault None
public TextureParameterDefault Black
public TextureParameterDefault White
public TextureParameterDefault Transparent
public TextureParameterDefault Lut2D
}
public UnityEngine.Rendering.PostProcessing.Tonemapper : Enum {
public int value__
public Tonemapper None
public Tonemapper Neutral
public Tonemapper ACES
public Tonemapper Custom
}
public UnityEngine.Rendering.PostProcessing.TrackballAttribute : Attribute {
public Mode mode
public void .ctor(Mode mode)
}
public UnityEngine.Rendering.PostProcessing.Vector2Parameter : ParameterOverride`1<Vector2> {
public void Interp(Vector2 from, Vector2 to, float t)
public Vector3 op_Implicit(Vector2Parameter prop)
public Vector4 op_Implicit(Vector2Parameter prop)
}
public UnityEngine.Rendering.PostProcessing.Vector3Parameter : ParameterOverride`1<Vector3> {
public void Interp(Vector3 from, Vector3 to, float t)
public Vector2 op_Implicit(Vector3Parameter prop)
public Vector4 op_Implicit(Vector3Parameter prop)
}
public UnityEngine.Rendering.PostProcessing.Vector4Parameter : ParameterOverride`1<Vector4> {
public void Interp(Vector4 from, Vector4 to, float t)
public Vector2 op_Implicit(Vector4Parameter prop)
public Vector3 op_Implicit(Vector4Parameter prop)
}
public UnityEngine.Rendering.PostProcessing.VectorscopeMonitor : Monitor {
public int size
public float exposure
private ComputeBuffer m_Data
private int k_ThreadGroupSizeX
private int k_ThreadGroupSizeY
internal void OnDisable()
internal bool NeedsHalfRes()
internal bool ShaderResourcesAvailable(PostProcessRenderContext context)
internal void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.Vignette : PostProcessEffectSettings {
public VignetteModeParameter mode
public ColorParameter color
public Vector2Parameter center
public FloatParameter intensity
public FloatParameter smoothness
public FloatParameter roundness
public BoolParameter rounded
public TextureParameter mask
public FloatParameter opacity
public bool IsEnabledAndSupported(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.VignetteMode : Enum {
public int value__
public VignetteMode Classic
public VignetteMode Masked
}
public UnityEngine.Rendering.PostProcessing.VignetteRenderer : PostProcessEffectRenderer`1<Vignette> {
public void Render(PostProcessRenderContext context)
}
public UnityEngine.Rendering.PostProcessing.WaveformMonitor : Monitor {
public float exposure
public int height
private ComputeBuffer m_Data
private int k_ThreadGroupSize
private int k_ThreadGroupSizeX
private int k_ThreadGroupSizeY
internal void OnDisable()
internal bool NeedsHalfRes()
internal bool ShaderResourcesAvailable(PostProcessRenderContext context)
internal void Render(PostProcessRenderContext context)
}
