internal UnityEngine.XR.AvailableTrackingData : Enum {
public int value__
public AvailableTrackingData None
public AvailableTrackingData PositionAvailable
public AvailableTrackingData RotationAvailable
public AvailableTrackingData VelocityAvailable
public AvailableTrackingData AngularVelocityAvailable
public AvailableTrackingData AccelerationAvailable
public AvailableTrackingData AngularAccelerationAvailable
}
public UnityEngine.XR.Bone : ValueType {
private ulong m_DeviceId
private UInt32 m_FeatureIndex
internal ulong deviceId
internal UInt32 featureIndex
internal ulong get_deviceId()
internal UInt32 get_featureIndex()
public bool TryGetPosition(Vector3& position)
private bool Bone_TryGetPosition(Bone bone, Vector3& position)
public bool TryGetRotation(Quaternion& rotation)
private bool Bone_TryGetRotation(Bone bone, Quaternion& rotation)
public bool TryGetParentBone(Bone& parentBone)
private bool Bone_TryGetParentBone(Bone bone, Bone& parentBone)
public bool TryGetChildBones(List`1<Bone> childBones)
private bool Bone_TryGetChildBones(Bone bone, List`1<Bone> childBones)
public bool Equals(object obj)
public bool Equals(Bone other)
public int GetHashCode()
public bool op_Equality(Bone a, Bone b)
public bool op_Inequality(Bone a, Bone b)
private bool Bone_TryGetPosition_Injected(Bone& bone, Vector3& position)
private bool Bone_TryGetRotation_Injected(Bone& bone, Quaternion& rotation)
private bool Bone_TryGetParentBone_Injected(Bone& bone, Bone& parentBone)
private bool Bone_TryGetChildBones_Injected(Bone& bone, List`1<Bone> childBones)
}
public UnityEngine.XR.CommonUsages : object {
public InputFeatureUsage`1<bool> isTracked
public InputFeatureUsage`1<bool> primaryButton
public InputFeatureUsage`1<bool> primaryTouch
public InputFeatureUsage`1<bool> secondaryButton
public InputFeatureUsage`1<bool> secondaryTouch
public InputFeatureUsage`1<bool> gripButton
public InputFeatureUsage`1<bool> triggerButton
public InputFeatureUsage`1<bool> menuButton
public InputFeatureUsage`1<bool> primary2DAxisClick
public InputFeatureUsage`1<bool> primary2DAxisTouch
public InputFeatureUsage`1<bool> secondary2DAxisClick
public InputFeatureUsage`1<bool> secondary2DAxisTouch
public InputFeatureUsage`1<bool> userPresence
public InputFeatureUsage`1<InputTrackingState> trackingState
public InputFeatureUsage`1<float> batteryLevel
public InputFeatureUsage`1<float> trigger
public InputFeatureUsage`1<float> grip
public InputFeatureUsage`1<Vector2> primary2DAxis
public InputFeatureUsage`1<Vector2> secondary2DAxis
public InputFeatureUsage`1<Vector3> devicePosition
public InputFeatureUsage`1<Vector3> leftEyePosition
public InputFeatureUsage`1<Vector3> rightEyePosition
public InputFeatureUsage`1<Vector3> centerEyePosition
public InputFeatureUsage`1<Vector3> colorCameraPosition
public InputFeatureUsage`1<Vector3> deviceVelocity
public InputFeatureUsage`1<Vector3> deviceAngularVelocity
public InputFeatureUsage`1<Vector3> leftEyeVelocity
public InputFeatureUsage`1<Vector3> leftEyeAngularVelocity
public InputFeatureUsage`1<Vector3> rightEyeVelocity
public InputFeatureUsage`1<Vector3> rightEyeAngularVelocity
public InputFeatureUsage`1<Vector3> centerEyeVelocity
public InputFeatureUsage`1<Vector3> centerEyeAngularVelocity
public InputFeatureUsage`1<Vector3> colorCameraVelocity
public InputFeatureUsage`1<Vector3> colorCameraAngularVelocity
public InputFeatureUsage`1<Vector3> deviceAcceleration
public InputFeatureUsage`1<Vector3> deviceAngularAcceleration
public InputFeatureUsage`1<Vector3> leftEyeAcceleration
public InputFeatureUsage`1<Vector3> leftEyeAngularAcceleration
public InputFeatureUsage`1<Vector3> rightEyeAcceleration
public InputFeatureUsage`1<Vector3> rightEyeAngularAcceleration
public InputFeatureUsage`1<Vector3> centerEyeAcceleration
public InputFeatureUsage`1<Vector3> centerEyeAngularAcceleration
public InputFeatureUsage`1<Vector3> colorCameraAcceleration
public InputFeatureUsage`1<Vector3> colorCameraAngularAcceleration
public InputFeatureUsage`1<Quaternion> deviceRotation
public InputFeatureUsage`1<Quaternion> leftEyeRotation
public InputFeatureUsage`1<Quaternion> rightEyeRotation
public InputFeatureUsage`1<Quaternion> centerEyeRotation
public InputFeatureUsage`1<Quaternion> colorCameraRotation
public InputFeatureUsage`1<Hand> handData
public InputFeatureUsage`1<Eyes> eyesData
public InputFeatureUsage`1<Vector2> dPad
public InputFeatureUsage`1<float> indexFinger
public InputFeatureUsage`1<float> middleFinger
public InputFeatureUsage`1<float> ringFinger
public InputFeatureUsage`1<float> pinkyFinger
public InputFeatureUsage`1<bool> thumbrest
public InputFeatureUsage`1<float> indexTouch
public InputFeatureUsage`1<float> thumbTouch
}
internal UnityEngine.XR.ConnectionChangeType : Enum {
public UInt32 value__
public ConnectionChangeType Connected
public ConnectionChangeType Disconnected
public ConnectionChangeType ConfigChange
}
public UnityEngine.XR.Eyes : ValueType {
private ulong m_DeviceId
private UInt32 m_FeatureIndex
internal ulong deviceId
internal UInt32 featureIndex
internal ulong get_deviceId()
internal UInt32 get_featureIndex()
public bool TryGetLeftEyePosition(Vector3& position)
public bool TryGetRightEyePosition(Vector3& position)
public bool TryGetLeftEyeRotation(Quaternion& rotation)
public bool TryGetRightEyeRotation(Quaternion& rotation)
private bool Eyes_TryGetEyePosition(Eyes eyes, EyeSide chirality, Vector3& position)
private bool Eyes_TryGetEyeRotation(Eyes eyes, EyeSide chirality, Quaternion& rotation)
public bool TryGetFixationPoint(Vector3& fixationPoint)
private bool Eyes_TryGetFixationPoint(Eyes eyes, Vector3& fixationPoint)
public bool TryGetLeftEyeOpenAmount(Single& openAmount)
public bool TryGetRightEyeOpenAmount(Single& openAmount)
private bool Eyes_TryGetEyeOpenAmount(Eyes eyes, EyeSide chirality, Single& openAmount)
public bool Equals(object obj)
public bool Equals(Eyes other)
public int GetHashCode()
public bool op_Equality(Eyes a, Eyes b)
public bool op_Inequality(Eyes a, Eyes b)
private bool Eyes_TryGetEyePosition_Injected(Eyes& eyes, EyeSide chirality, Vector3& position)
private bool Eyes_TryGetEyeRotation_Injected(Eyes& eyes, EyeSide chirality, Quaternion& rotation)
private bool Eyes_TryGetFixationPoint_Injected(Eyes& eyes, Vector3& fixationPoint)
private bool Eyes_TryGetEyeOpenAmount_Injected(Eyes& eyes, EyeSide chirality, Single& openAmount)
}
internal UnityEngine.XR.EyeSide : Enum {
public int value__
public EyeSide Left
public EyeSide Right
}
public UnityEngine.XR.Hand : ValueType {
private ulong m_DeviceId
private UInt32 m_FeatureIndex
internal ulong deviceId
internal UInt32 featureIndex
internal ulong get_deviceId()
internal UInt32 get_featureIndex()
public bool TryGetRootBone(Bone& boneOut)
private bool Hand_TryGetRootBone(Hand hand, Bone& boneOut)
public bool TryGetFingerBones(HandFinger finger, List`1<Bone> bonesOut)
private bool Hand_TryGetFingerBonesAsList(Hand hand, HandFinger finger, List`1<Bone> bonesOut)
public bool Equals(object obj)
public bool Equals(Hand other)
public int GetHashCode()
public bool op_Equality(Hand a, Hand b)
public bool op_Inequality(Hand a, Hand b)
private bool Hand_TryGetRootBone_Injected(Hand& hand, Bone& boneOut)
private bool Hand_TryGetFingerBonesAsList_Injected(Hand& hand, HandFinger finger, List`1<Bone> bonesOut)
}
public UnityEngine.XR.HandFinger : Enum {
public int value__
public HandFinger Thumb
public HandFinger Index
public HandFinger Middle
public HandFinger Ring
public HandFinger Pinky
}
public UnityEngine.XR.HapticCapabilities : ValueType {
private UInt32 m_NumChannels
private bool m_SupportsImpulse
private bool m_SupportsBuffer
private UInt32 m_BufferFrequencyHz
private UInt32 m_BufferMaxSize
private UInt32 m_BufferOptimalSize
public UInt32 numChannels
public bool supportsImpulse
public bool supportsBuffer
public UInt32 bufferFrequencyHz
public UInt32 bufferMaxSize
public UInt32 bufferOptimalSize
public UInt32 get_numChannels()
internal void set_numChannels(UInt32 value)
public bool get_supportsImpulse()
internal void set_supportsImpulse(bool value)
public bool get_supportsBuffer()
internal void set_supportsBuffer(bool value)
public UInt32 get_bufferFrequencyHz()
internal void set_bufferFrequencyHz(UInt32 value)
public UInt32 get_bufferMaxSize()
internal void set_bufferMaxSize(UInt32 value)
public UInt32 get_bufferOptimalSize()
internal void set_bufferOptimalSize(UInt32 value)
public bool Equals(object obj)
public bool Equals(HapticCapabilities other)
public int GetHashCode()
public bool op_Equality(HapticCapabilities a, HapticCapabilities b)
public bool op_Inequality(HapticCapabilities a, HapticCapabilities b)
}
internal UnityEngine.XR.HashCodeHelper : object {
private int k_HashCodeMultiplier
public int Combine(int hash1, int hash2)
}
public UnityEngine.XR.InputDevice : ValueType {
private List`1<XRInputSubsystem> s_InputSubsystemCache
private ulong m_DeviceId
private bool m_Initialized
private ulong deviceId
public XRInputSubsystem subsystem
public bool isValid
public string name
public InputDeviceRole role
public string manufacturer
public string serialNumber
public InputDeviceCharacteristics characteristics
internal void .ctor(ulong deviceId)
private ulong get_deviceId()
public XRInputSubsystem get_subsystem()
public bool get_isValid()
public string get_name()
public InputDeviceRole get_role()
public string get_manufacturer()
public string get_serialNumber()
public InputDeviceCharacteristics get_characteristics()
private bool IsValidId()
public bool SendHapticImpulse(UInt32 channel, float amplitude, float duration)
public bool SendHapticBuffer(UInt32 channel, Byte[] buffer)
public bool TryGetHapticCapabilities(HapticCapabilities& capabilities)
public void StopHaptics()
public bool TryGetFeatureUsages(List`1<InputFeatureUsage> featureUsages)
public bool TryGetFeatureValue(InputFeatureUsage`1<bool> usage, Boolean& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<UInt32> usage, UInt32& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<float> usage, Single& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Vector2> usage, Vector2& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Vector3> usage, Vector3& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Quaternion> usage, Quaternion& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Hand> usage, Hand& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Bone> usage, Bone& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Eyes> usage, Eyes& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Byte[]> usage, Byte[] value)
public bool TryGetFeatureValue(InputFeatureUsage`1<InputTrackingState> usage, InputTrackingState& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<bool> usage, DateTime time, Boolean& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<UInt32> usage, DateTime time, UInt32& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<float> usage, DateTime time, Single& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Vector2> usage, DateTime time, Vector2& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Vector3> usage, DateTime time, Vector3& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<Quaternion> usage, DateTime time, Quaternion& value)
public bool TryGetFeatureValue(InputFeatureUsage`1<InputTrackingState> usage, DateTime time, InputTrackingState& value)
private bool CheckValidAndSetDefault(T& value)
public bool Equals(object obj)
public bool Equals(InputDevice other)
public int GetHashCode()
public bool op_Equality(InputDevice a, InputDevice b)
public bool op_Inequality(InputDevice a, InputDevice b)
}
public UnityEngine.XR.InputDeviceCharacteristics : Enum {
public UInt32 value__
public InputDeviceCharacteristics None
public InputDeviceCharacteristics HeadMounted
public InputDeviceCharacteristics Camera
public InputDeviceCharacteristics HeldInHand
public InputDeviceCharacteristics HandTracking
public InputDeviceCharacteristics EyeTracking
public InputDeviceCharacteristics TrackedDevice
public InputDeviceCharacteristics Controller
public InputDeviceCharacteristics TrackingReference
public InputDeviceCharacteristics Left
public InputDeviceCharacteristics Right
public InputDeviceCharacteristics Simulated6DOF
}
public UnityEngine.XR.InputDeviceRole : Enum {
public UInt32 value__
public InputDeviceRole Unknown
public InputDeviceRole Generic
public InputDeviceRole LeftHanded
public InputDeviceRole RightHanded
public InputDeviceRole GameController
public InputDeviceRole TrackingReference
public InputDeviceRole HardwareTracker
public InputDeviceRole LegacyController
}
public UnityEngine.XR.InputDevices : object {
private List`1<InputDevice> s_InputDeviceList
private Action`1<InputDevice> deviceConnected
private Action`1<InputDevice> deviceDisconnected
private Action`1<InputDevice> deviceConfigChanged
public InputDevice GetDeviceAtXRNode(XRNode node)
public void GetDevicesAtXRNode(XRNode node, List`1<InputDevice> inputDevices)
public void GetDevices(List`1<InputDevice> inputDevices)
public void GetDevicesWithRole(InputDeviceRole role, List`1<InputDevice> inputDevices)
public void GetDevicesWithCharacteristics(InputDeviceCharacteristics desiredCharacteristics, List`1<InputDevice> inputDevices)
public void add_deviceConnected(Action`1<InputDevice> value)
public void remove_deviceConnected(Action`1<InputDevice> value)
public void add_deviceDisconnected(Action`1<InputDevice> value)
public void remove_deviceDisconnected(Action`1<InputDevice> value)
public void add_deviceConfigChanged(Action`1<InputDevice> value)
public void remove_deviceConfigChanged(Action`1<InputDevice> value)
private void InvokeConnectionEvent(ulong deviceId, ConnectionChangeType change)
private void GetDevices_Internal(List`1<InputDevice> inputDevices)
internal bool SendHapticImpulse(ulong deviceId, UInt32 channel, float amplitude, float duration)
internal bool SendHapticBuffer(ulong deviceId, UInt32 channel, Byte[] buffer)
internal bool TryGetHapticCapabilities(ulong deviceId, HapticCapabilities& capabilities)
internal void StopHaptics(ulong deviceId)
internal bool TryGetFeatureUsages(ulong deviceId, List`1<InputFeatureUsage> featureUsages)
internal bool TryGetFeatureValue_bool(ulong deviceId, string usage, Boolean& value)
internal bool TryGetFeatureValue_UInt32(ulong deviceId, string usage, UInt32& value)
internal bool TryGetFeatureValue_float(ulong deviceId, string usage, Single& value)
internal bool TryGetFeatureValue_Vector2f(ulong deviceId, string usage, Vector2& value)
internal bool TryGetFeatureValue_Vector3f(ulong deviceId, string usage, Vector3& value)
internal bool TryGetFeatureValue_Quaternionf(ulong deviceId, string usage, Quaternion& value)
internal bool TryGetFeatureValue_Custom(ulong deviceId, string usage, Byte[] value)
internal bool TryGetFeatureValueAtTime_bool(ulong deviceId, string usage, long time, Boolean& value)
internal bool TryGetFeatureValueAtTime_UInt32(ulong deviceId, string usage, long time, UInt32& value)
internal bool TryGetFeatureValueAtTime_float(ulong deviceId, string usage, long time, Single& value)
internal bool TryGetFeatureValueAtTime_Vector2f(ulong deviceId, string usage, long time, Vector2& value)
internal bool TryGetFeatureValueAtTime_Vector3f(ulong deviceId, string usage, long time, Vector3& value)
internal bool TryGetFeatureValueAtTime_Quaternionf(ulong deviceId, string usage, long time, Quaternion& value)
internal bool TryGetFeatureValue_XRHand(ulong deviceId, string usage, Hand& value)
internal bool TryGetFeatureValue_XRBone(ulong deviceId, string usage, Bone& value)
internal bool TryGetFeatureValue_XREyes(ulong deviceId, string usage, Eyes& value)
internal bool IsDeviceValid(ulong deviceId)
internal string GetDeviceName(ulong deviceId)
internal string GetDeviceManufacturer(ulong deviceId)
internal string GetDeviceSerialNumber(ulong deviceId)
internal InputDeviceCharacteristics GetDeviceCharacteristics(ulong deviceId)
internal InputDeviceRole GetDeviceRole(ulong deviceId)
}
internal UnityEngine.XR.InputFeatureType : Enum {
public UInt32 value__
public InputFeatureType Custom
public InputFeatureType Binary
public InputFeatureType DiscreteStates
public InputFeatureType Axis1D
public InputFeatureType Axis2D
public InputFeatureType Axis3D
public InputFeatureType Rotation
public InputFeatureType Hand
public InputFeatureType Bone
public InputFeatureType Eyes
public InputFeatureType kUnityXRInputFeatureTypeInvalid
}
public UnityEngine.XR.InputFeatureUsage : ValueType {
internal string m_Name
internal InputFeatureType m_InternalType
public string name
internal InputFeatureType internalType
public Type type
public string get_name()
internal void set_name(string value)
internal InputFeatureType get_internalType()
internal void set_internalType(InputFeatureType value)
public Type get_type()
internal void .ctor(string name, InputFeatureType type)
public bool Equals(object obj)
public bool Equals(InputFeatureUsage other)
public int GetHashCode()
public bool op_Equality(InputFeatureUsage a, InputFeatureUsage b)
public bool op_Inequality(InputFeatureUsage a, InputFeatureUsage b)
public InputFeatureUsage`1<T> As()
}
public UnityEngine.XR.InputFeatureUsage`1 : ValueType {
private string <name>k__BackingField
public string name
private Type usageType
public string get_name()
public void set_name(string value)
public void .ctor(string usageName)
public bool Equals(object obj)
public bool Equals(InputFeatureUsage`1<T> other)
public int GetHashCode()
public bool op_Equality(InputFeatureUsage`1<T> a, InputFeatureUsage`1<T> b)
public bool op_Inequality(InputFeatureUsage`1<T> a, InputFeatureUsage`1<T> b)
private Type get_usageType()
public InputFeatureUsage op_Explicit(InputFeatureUsage`1<T> self)
}
public UnityEngine.XR.InputTracking : object {
private Action`1<XRNodeState> trackingAcquired
private Action`1<XRNodeState> trackingLost
private Action`1<XRNodeState> nodeAdded
private Action`1<XRNodeState> nodeRemoved
public bool disablePositionalTracking
public void add_trackingAcquired(Action`1<XRNodeState> value)
public void remove_trackingAcquired(Action`1<XRNodeState> value)
public void add_trackingLost(Action`1<XRNodeState> value)
public void remove_trackingLost(Action`1<XRNodeState> value)
public void add_nodeAdded(Action`1<XRNodeState> value)
public void remove_nodeAdded(Action`1<XRNodeState> value)
public void add_nodeRemoved(Action`1<XRNodeState> value)
public void remove_nodeRemoved(Action`1<XRNodeState> value)
private void InvokeTrackingEvent(TrackingStateEventType eventType, XRNode nodeType, long uniqueID, bool tracked)
public Vector3 GetLocalPosition(XRNode node)
public Quaternion GetLocalRotation(XRNode node)
public void Recenter()
public string GetNodeName(ulong uniqueId)
public void GetNodeStates(List`1<XRNodeState> nodeStates)
private void GetNodeStates_Internal(List`1<XRNodeState> nodeStates)
public bool get_disablePositionalTracking()
public void set_disablePositionalTracking(bool value)
internal ulong GetDeviceIdAtXRNode(XRNode node)
internal void GetDeviceIdsAtXRNode_Internal(XRNode node, List`1<ulong> deviceIds)
private void GetLocalPosition_Injected(XRNode node, Vector3& ret)
private void GetLocalRotation_Injected(XRNode node, Quaternion& ret)
}
public UnityEngine.XR.InputTrackingState : Enum {
public UInt32 value__
public InputTrackingState None
public InputTrackingState Position
public InputTrackingState Rotation
public InputTrackingState Velocity
public InputTrackingState AngularVelocity
public InputTrackingState Acceleration
public InputTrackingState AngularAcceleration
public InputTrackingState All
}
public UnityEngine.XR.MeshChangeState : Enum {
public int value__
public MeshChangeState Added
public MeshChangeState Updated
public MeshChangeState Removed
public MeshChangeState Unchanged
}
public UnityEngine.XR.MeshGenerationResult : ValueType {
private MeshId <MeshId>k__BackingField
private Mesh <Mesh>k__BackingField
private MeshCollider <MeshCollider>k__BackingField
private MeshGenerationStatus <Status>k__BackingField
private MeshVertexAttributes <Attributes>k__BackingField
public MeshId MeshId
public Mesh Mesh
public MeshCollider MeshCollider
public MeshGenerationStatus Status
public MeshVertexAttributes Attributes
public MeshId get_MeshId()
public Mesh get_Mesh()
public MeshCollider get_MeshCollider()
public MeshGenerationStatus get_Status()
public MeshVertexAttributes get_Attributes()
public bool Equals(object obj)
public bool Equals(MeshGenerationResult other)
public bool op_Equality(MeshGenerationResult lhs, MeshGenerationResult rhs)
public bool op_Inequality(MeshGenerationResult lhs, MeshGenerationResult rhs)
public int GetHashCode()
}
public UnityEngine.XR.MeshGenerationStatus : Enum {
public int value__
public MeshGenerationStatus Success
public MeshGenerationStatus InvalidMeshId
public MeshGenerationStatus GenerationAlreadyInProgress
public MeshGenerationStatus Canceled
public MeshGenerationStatus UnknownError
}
public UnityEngine.XR.MeshId : ValueType {
private MeshId s_InvalidId
private ulong m_SubId1
private ulong m_SubId2
public MeshId InvalidId
public string ToString()
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(MeshId other)
public bool op_Equality(MeshId id1, MeshId id2)
public bool op_Inequality(MeshId id1, MeshId id2)
public MeshId get_InvalidId()
}
public UnityEngine.XR.MeshInfo : ValueType {
private MeshId <MeshId>k__BackingField
private MeshChangeState <ChangeState>k__BackingField
private int <PriorityHint>k__BackingField
public MeshId MeshId
public MeshChangeState ChangeState
public int PriorityHint
public MeshId get_MeshId()
public void set_MeshId(MeshId value)
public MeshChangeState get_ChangeState()
public void set_ChangeState(MeshChangeState value)
public int get_PriorityHint()
public void set_PriorityHint(int value)
public bool Equals(object obj)
public bool Equals(MeshInfo other)
public bool op_Equality(MeshInfo lhs, MeshInfo rhs)
public bool op_Inequality(MeshInfo lhs, MeshInfo rhs)
public int GetHashCode()
}
public UnityEngine.XR.MeshVertexAttributes : Enum {
public int value__
public MeshVertexAttributes None
public MeshVertexAttributes Normals
public MeshVertexAttributes Tangents
public MeshVertexAttributes UVs
public MeshVertexAttributes Colors
}
public UnityEngine.XR.Provider.XRStats : object {
public bool TryGetStat(IntegratedSubsystem xrSubsystem, string tag, Single& value)
private bool TryGetStat_Internal(IntPtr ptr, string tag, Single& value)
}
internal UnityEngine.XR.TimeConverter : object {
private DateTime s_Epoch
public DateTime now
public DateTime get_now()
public long LocalDateTimeToUnixTimeMilliseconds(DateTime date)
public DateTime UnixTimeMillisecondsToLocalDateTime(long unixTimeInMilliseconds)
}
public UnityEngine.XR.TrackingOriginModeFlags : Enum {
public int value__
public TrackingOriginModeFlags Unknown
public TrackingOriginModeFlags Device
public TrackingOriginModeFlags Floor
public TrackingOriginModeFlags TrackingReference
}
public UnityEngine.XR.XRDisplaySubsystem : IntegratedSubsystem`1<XRDisplaySubsystemDescriptor> {
private Action`1<bool> displayFocusChanged
public bool singlePassRenderingDisabled
public bool displayOpaque
public bool contentProtectionEnabled
public float zNear
public float zFar
public bool sRGB
public ReprojectionMode reprojectionMode
public bool disableLegacyRenderer
public void add_displayFocusChanged(Action`1<bool> value)
public void remove_displayFocusChanged(Action`1<bool> value)
private void InvokeDisplayFocusChanged(bool focus)
public bool get_singlePassRenderingDisabled()
public void set_singlePassRenderingDisabled(bool value)
public bool get_displayOpaque()
public bool get_contentProtectionEnabled()
public void set_contentProtectionEnabled(bool value)
public float get_zNear()
public void set_zNear(float value)
public float get_zFar()
public void set_zFar(float value)
public bool get_sRGB()
public void set_sRGB(bool value)
public ReprojectionMode get_reprojectionMode()
public void set_reprojectionMode(ReprojectionMode value)
public void SetFocusPlane(Vector3 point, Vector3 normal, Vector3 velocity)
public bool get_disableLegacyRenderer()
public void set_disableLegacyRenderer(bool value)
public int GetRenderPassCount()
public void GetRenderPass(int renderPassIndex, XRRenderPass& renderPass)
private bool Internal_TryGetRenderPass(int renderPassIndex, XRRenderPass& renderPass)
public void GetCullingParameters(Camera camera, int cullingPassIndex, ScriptableCullingParameters& scriptableCullingParameters)
private bool Internal_TryGetCullingParams(Camera camera, int cullingPassIndex, ScriptableCullingParameters& scriptableCullingParameters)
public bool TryGetAppGPUTimeLastFrame(Single& gpuTimeLastFrame)
public bool TryGetCompositorGPUTimeLastFrame(Single& gpuTimeLastFrameCompositor)
public bool TryGetDroppedFrameCount(Int32& droppedFrameCount)
public bool TryGetFramePresentCount(Int32& framePresentCount)
public bool TryGetDisplayRefreshRate(Single& displayRefreshRate)
public bool TryGetMotionToPhoton(Single& motionToPhoton)
public RenderTexture GetRenderTextureForRenderPass(int renderPass)
public int GetPreferredMirrorBlitMode()
public void SetPreferredMirrorBlitMode(int blitMode)
public bool GetMirrorViewBlitDesc(RenderTexture mirrorRt, XRMirrorViewBlitDesc& outDesc)
public bool GetMirrorViewBlitDesc(RenderTexture mirrorRt, XRMirrorViewBlitDesc& outDesc, int mode)
public bool AddGraphicsThreadMirrorViewBlit(CommandBuffer cmd, bool allowGraphicsStateInvalidate)
public bool AddGraphicsThreadMirrorViewBlit(CommandBuffer cmd, bool allowGraphicsStateInvalidate, int mode)
private void SetFocusPlane_Injected(Vector3& point, Vector3& normal, Vector3& velocity)
}
public UnityEngine.XR.XRDisplaySubsystemDescriptor : IntegratedSubsystemDescriptor`1<XRDisplaySubsystem> {
public bool disablesLegacyVr
public bool get_disablesLegacyVr()
public int GetAvailableMirrorBlitModeCount()
public void GetMirrorBlitModeByIndex(int index, XRMirrorViewBlitModeDesc& mode)
}
public UnityEngine.XR.XRInputSubsystem : IntegratedSubsystem`1<XRInputSubsystemDescriptor> {
private Action`1<XRInputSubsystem> trackingOriginUpdated
private Action`1<XRInputSubsystem> boundaryChanged
private List`1<ulong> m_DeviceIdsCache
internal UInt32 GetIndex()
public bool TryRecenter()
public bool TryGetInputDevices(List`1<InputDevice> devices)
public bool TrySetTrackingOriginMode(TrackingOriginModeFlags origin)
public TrackingOriginModeFlags GetTrackingOriginMode()
public TrackingOriginModeFlags GetSupportedTrackingOriginModes()
public bool TryGetBoundaryPoints(List`1<Vector3> boundaryPoints)
private bool TryGetBoundaryPoints_AsList(List`1<Vector3> boundaryPoints)
public void add_trackingOriginUpdated(Action`1<XRInputSubsystem> value)
public void remove_trackingOriginUpdated(Action`1<XRInputSubsystem> value)
public void add_boundaryChanged(Action`1<XRInputSubsystem> value)
public void remove_boundaryChanged(Action`1<XRInputSubsystem> value)
private void InvokeTrackingOriginUpdatedEvent(IntPtr internalPtr)
private void InvokeBoundaryChangedEvent(IntPtr internalPtr)
internal void TryGetDeviceIds_AsList(List`1<ulong> deviceIds)
}
public UnityEngine.XR.XRInputSubsystemDescriptor : IntegratedSubsystemDescriptor`1<XRInputSubsystem> {
public bool disablesLegacyInput
public bool get_disablesLegacyInput()
}
public UnityEngine.XR.XRMeshSubsystem : IntegratedSubsystem`1<XRMeshSubsystemDescriptor> {
public float meshDensity
public bool TryGetMeshInfos(List`1<MeshInfo> meshInfosOut)
private bool GetMeshInfosAsList(List`1<MeshInfo> meshInfos)
private MeshInfo[] GetMeshInfosAsFixedArray()
public void GenerateMeshAsync(MeshId meshId, Mesh mesh, MeshCollider meshCollider, MeshVertexAttributes attributes, Action`1<MeshGenerationResult> onMeshGenerationComplete)
private void InvokeMeshReadyDelegate(MeshGenerationResult result, Action`1<MeshGenerationResult> onMeshGenerationComplete)
public float get_meshDensity()
public void set_meshDensity(float value)
public bool SetBoundingVolume(Vector3 origin, Vector3 extents)
private void GenerateMeshAsync_Injected(MeshId& meshId, Mesh mesh, MeshCollider meshCollider, MeshVertexAttributes attributes, Action`1<MeshGenerationResult> onMeshGenerationComplete)
private bool SetBoundingVolume_Injected(Vector3& origin, Vector3& extents)
}
public UnityEngine.XR.XRMirrorViewBlitMode : ValueType {
public int None
public int LeftEye
public int RightEye
public int SideBySide
public int SideBySideOcclusionMesh
public int Distort
}
public UnityEngine.XR.XRMirrorViewBlitModeDesc : ValueType {
public int blitMode
public string blitModeDesc
}
public UnityEngine.XR.XRNode : Enum {
public int value__
public XRNode LeftEye
public XRNode RightEye
public XRNode CenterEye
public XRNode Head
public XRNode LeftHand
public XRNode RightHand
public XRNode GameController
public XRNode TrackingReference
public XRNode HardwareTracker
}
public UnityEngine.XR.XRNodeState : ValueType {
private XRNode m_Type
private AvailableTrackingData m_AvailableFields
private Vector3 m_Position
private Quaternion m_Rotation
private Vector3 m_Velocity
private Vector3 m_AngularVelocity
private Vector3 m_Acceleration
private Vector3 m_AngularAcceleration
private int m_Tracked
private ulong m_UniqueID
public ulong uniqueID
public XRNode nodeType
public bool tracked
public Vector3 position
public Quaternion rotation
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 acceleration
public Vector3 angularAcceleration
public ulong get_uniqueID()
public void set_uniqueID(ulong value)
public XRNode get_nodeType()
public void set_nodeType(XRNode value)
public bool get_tracked()
public void set_tracked(bool value)
public void set_position(Vector3 value)
public void set_rotation(Quaternion value)
public void set_velocity(Vector3 value)
public void set_angularVelocity(Vector3 value)
public void set_acceleration(Vector3 value)
public void set_angularAcceleration(Vector3 value)
public bool TryGetPosition(Vector3& position)
public bool TryGetRotation(Quaternion& rotation)
public bool TryGetVelocity(Vector3& velocity)
public bool TryGetAngularVelocity(Vector3& angularVelocity)
public bool TryGetAcceleration(Vector3& acceleration)
public bool TryGetAngularAcceleration(Vector3& angularAcceleration)
private bool TryGet(Vector3 inValue, AvailableTrackingData availabilityFlag, Vector3& outValue)
private bool TryGet(Quaternion inValue, AvailableTrackingData availabilityFlag, Quaternion& outValue)
}
