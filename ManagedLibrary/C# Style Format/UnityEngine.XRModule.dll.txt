public UnityEngine.Experimental.IntegratedSubsystem : object {
internal IntPtr m_Ptr
internal ISubsystemDescriptor m_subsystemDescriptor
internal void SetHandle(IntegratedSubsystem inst)
public void Start()
public void Stop()
public void Destroy()
}
public UnityEngine.Experimental.IntegratedSubsystem`1 : IntegratedSubsystem {
public TSubsystemDescriptor SubsystemDescriptor
public TSubsystemDescriptor get_SubsystemDescriptor()
}
public UnityEngine.Experimental.IntegratedSubsystemDescriptor : object {
internal IntPtr m_Ptr
private IntPtr UnityEngine.Experimental.ISubsystemDescriptorImpl.ptr
public string id
public string get_id()
private IntPtr UnityEngine.Experimental.ISubsystemDescriptorImpl.get_ptr()
private void UnityEngine.Experimental.ISubsystemDescriptorImpl.set_ptr(IntPtr value)
}
public UnityEngine.Experimental.IntegratedSubsystemDescriptor`1 : IntegratedSubsystemDescriptor {
public TSubsystem Create()
}
internal UnityEngine.Experimental.Internal_SubsystemDescriptors : object {
private bool analyticsEventRegistered
internal List`1<ISubsystemDescriptorImpl> s_IntegratedSubsystemDescriptors
internal List`1<ISubsystemDescriptor> s_StandaloneSubsystemDescriptors
internal bool Internal_AddDescriptor(SubsystemDescriptor descriptor)
internal void Internal_InitializeManagedDescriptor(IntPtr ptr, ISubsystemDescriptorImpl desc)
internal void Internal_ClearManagedDescriptors()
public IntPtr Create(IntPtr descriptorPtr)
public string GetId(IntPtr descriptorPtr)
}
internal UnityEngine.Experimental.Internal_SubsystemInstances : object {
internal List`1<ISubsystem> s_IntegratedSubsystemInstances
internal List`1<ISubsystem> s_StandaloneSubsystemInstances
internal void Internal_InitializeManagedInstance(IntPtr ptr, IntegratedSubsystem inst)
internal void Internal_ClearManagedInstances()
internal void Internal_RemoveInstanceByPtr(IntPtr ptr)
internal IntegratedSubsystem Internal_GetInstanceByPtr(IntPtr ptr)
internal void Internal_AddStandaloneSubsystem(Subsystem inst)
}
public UnityEngine.Experimental.ISubsystem {
public void Start()
public void Stop()
public void Destroy()
}
internal UnityEngine.Experimental.ISubsystemDescriptorImpl {
public IntPtr ptr
public IntPtr get_ptr()
public void set_ptr(IntPtr value)
}
public UnityEngine.Experimental.Subsystem : object {
internal ISubsystemDescriptor m_subsystemDescriptor
public void Start()
public void Stop()
public void Destroy()
}
public UnityEngine.Experimental.Subsystem`1 : Subsystem {
public TSubsystemDescriptor SubsystemDescriptor
public TSubsystemDescriptor get_SubsystemDescriptor()
}
public UnityEngine.Experimental.SubsystemDescriptor : object {
private string <id>k__BackingField
private Type <subsystemImplementationType>k__BackingField
public string id
public Type subsystemImplementationType
public string get_id()
public void set_id(string value)
public Type get_subsystemImplementationType()
public void set_subsystemImplementationType(Type value)
}
public UnityEngine.Experimental.SubsystemDescriptor`1 : SubsystemDescriptor {
public TSubsystem Create()
}
public UnityEngine.Experimental.SubsystemManager : object {
public void GetSubsystemDescriptors(List`1<T> descriptors)
public void GetInstances(List`1<T> instances)
internal void DestroyInstance_Internal(IntPtr instancePtr)
internal void StaticConstructScriptingClassMap()
}
public UnityEngine.Experimental.XR.BoundedPlane : ValueType {
private UInt32 m_InstanceId
private TrackableId <Id>k__BackingField
private TrackableId <SubsumedById>k__BackingField
private Pose <Pose>k__BackingField
private Vector3 <Center>k__BackingField
private Vector2 <Size>k__BackingField
private PlaneAlignment <Alignment>k__BackingField
public TrackableId Id
public TrackableId SubsumedById
public Pose Pose
public Vector3 Center
public Vector2 Size
public PlaneAlignment Alignment
public float Width
public float Height
public Vector3 Normal
public Plane Plane
public TrackableId get_Id()
public void set_Id(TrackableId value)
public TrackableId get_SubsumedById()
public void set_SubsumedById(TrackableId value)
public Pose get_Pose()
public void set_Pose(Pose value)
public Vector3 get_Center()
public void set_Center(Vector3 value)
public Vector2 get_Size()
public void set_Size(Vector2 value)
public PlaneAlignment get_Alignment()
public void set_Alignment(PlaneAlignment value)
public float get_Width()
public float get_Height()
public Vector3 get_Normal()
public Plane get_Plane()
public void GetCorners(Vector3& p0, Vector3& p1, Vector3& p2, Vector3& p3)
public bool TryGetBoundary(List`1<Vector3> boundaryOut)
private Vector3[] Internal_GetBoundaryAsFixedArray(UInt32 instanceId, TrackableId id)
private bool Internal_GetBoundaryAsList(UInt32 instanceId, TrackableId id, List`1<Vector3> boundaryOut)
private Vector3[] Internal_GetBoundaryAsFixedArray_Injected(UInt32 instanceId, TrackableId& id)
private bool Internal_GetBoundaryAsList_Injected(UInt32 instanceId, TrackableId& id, List`1<Vector3> boundaryOut)
}
internal UnityEngine.Experimental.XR.DotNetHelper : object {
public bool TryCopyFixedArrayToList(T[] fixedArrayIn, List`1<T> listOut)
}
public UnityEngine.Experimental.XR.FrameReceivedEventArgs : ValueType {
internal XRCameraSubsystem m_CameraSubsystem
public XRCameraSubsystem CameraSubsystem
public XRCameraSubsystem get_CameraSubsystem()
}
internal UnityEngine.Experimental.XR.HashCodeHelper : object {
private int k_HashCodeMultiplier
public int Combine(int hash1, int hash2)
}
public UnityEngine.Experimental.XR.MeshChangeState : Enum {
public int value__
public MeshChangeState Added
public MeshChangeState Updated
public MeshChangeState Removed
public MeshChangeState Unchanged
}
public UnityEngine.Experimental.XR.MeshGenerationResult : ValueType {
private TrackableId <MeshId>k__BackingField
private Mesh <Mesh>k__BackingField
private MeshCollider <MeshCollider>k__BackingField
private MeshGenerationStatus <Status>k__BackingField
private MeshVertexAttributes <Attributes>k__BackingField
public TrackableId MeshId
public Mesh Mesh
public MeshCollider MeshCollider
public MeshGenerationStatus Status
public MeshVertexAttributes Attributes
public TrackableId get_MeshId()
public Mesh get_Mesh()
public MeshCollider get_MeshCollider()
public MeshGenerationStatus get_Status()
public MeshVertexAttributes get_Attributes()
public bool Equals(object obj)
public bool Equals(MeshGenerationResult other)
public bool op_Equality(MeshGenerationResult lhs, MeshGenerationResult rhs)
public bool op_Inequality(MeshGenerationResult lhs, MeshGenerationResult rhs)
public int GetHashCode()
}
public UnityEngine.Experimental.XR.MeshGenerationStatus : Enum {
public int value__
public MeshGenerationStatus Success
public MeshGenerationStatus InvalidMeshId
public MeshGenerationStatus GenerationAlreadyInProgress
public MeshGenerationStatus Canceled
public MeshGenerationStatus UnknownError
}
public UnityEngine.Experimental.XR.MeshInfo : ValueType {
private TrackableId <MeshId>k__BackingField
private MeshChangeState <ChangeState>k__BackingField
private int <PriorityHint>k__BackingField
public TrackableId MeshId
public MeshChangeState ChangeState
public int PriorityHint
public TrackableId get_MeshId()
public void set_MeshId(TrackableId value)
public MeshChangeState get_ChangeState()
public void set_ChangeState(MeshChangeState value)
public int get_PriorityHint()
public void set_PriorityHint(int value)
public bool Equals(object obj)
public bool Equals(MeshInfo other)
public bool op_Equality(MeshInfo lhs, MeshInfo rhs)
public bool op_Inequality(MeshInfo lhs, MeshInfo rhs)
public int GetHashCode()
}
public UnityEngine.Experimental.XR.MeshVertexAttributes : Enum {
public int value__
public MeshVertexAttributes None
public MeshVertexAttributes Normals
public MeshVertexAttributes Tangents
public MeshVertexAttributes UVs
public MeshVertexAttributes Colors
}
public UnityEngine.Experimental.XR.PlaneAddedEventArgs : ValueType {
private XRPlaneSubsystem <PlaneSubsystem>k__BackingField
private BoundedPlane <Plane>k__BackingField
public XRPlaneSubsystem PlaneSubsystem
public BoundedPlane Plane
public XRPlaneSubsystem get_PlaneSubsystem()
internal void set_PlaneSubsystem(XRPlaneSubsystem value)
public BoundedPlane get_Plane()
internal void set_Plane(BoundedPlane value)
}
public UnityEngine.Experimental.XR.PlaneAlignment : Enum {
public int value__
public PlaneAlignment Horizontal
public PlaneAlignment Vertical
public PlaneAlignment NonAxis
}
public UnityEngine.Experimental.XR.PlaneRemovedEventArgs : ValueType {
private XRPlaneSubsystem <PlaneSubsystem>k__BackingField
private BoundedPlane <Plane>k__BackingField
public XRPlaneSubsystem PlaneSubsystem
public BoundedPlane Plane
public XRPlaneSubsystem get_PlaneSubsystem()
internal void set_PlaneSubsystem(XRPlaneSubsystem value)
public BoundedPlane get_Plane()
internal void set_Plane(BoundedPlane value)
}
public UnityEngine.Experimental.XR.PlaneUpdatedEventArgs : ValueType {
private XRPlaneSubsystem <PlaneSubsystem>k__BackingField
private BoundedPlane <Plane>k__BackingField
public XRPlaneSubsystem PlaneSubsystem
public BoundedPlane Plane
public XRPlaneSubsystem get_PlaneSubsystem()
internal void set_PlaneSubsystem(XRPlaneSubsystem value)
public BoundedPlane get_Plane()
internal void set_Plane(BoundedPlane value)
}
public UnityEngine.Experimental.XR.PointCloudUpdatedEventArgs : ValueType {
internal XRDepthSubsystem m_DepthSubsystem
public XRDepthSubsystem DepthSubsystem
public XRDepthSubsystem get_DepthSubsystem()
}
public UnityEngine.Experimental.XR.ReferencePoint : ValueType {
private TrackableId <Id>k__BackingField
private TrackingState <TrackingState>k__BackingField
private Pose <Pose>k__BackingField
public TrackableId Id
public TrackingState TrackingState
public Pose Pose
public TrackableId get_Id()
internal void set_Id(TrackableId value)
public TrackingState get_TrackingState()
internal void set_TrackingState(TrackingState value)
public Pose get_Pose()
internal void set_Pose(Pose value)
}
public UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs : ValueType {
private ReferencePoint <ReferencePoint>k__BackingField
private TrackingState <PreviousTrackingState>k__BackingField
private Pose <PreviousPose>k__BackingField
public ReferencePoint ReferencePoint
public TrackingState PreviousTrackingState
public Pose PreviousPose
public ReferencePoint get_ReferencePoint()
internal void set_ReferencePoint(ReferencePoint value)
public TrackingState get_PreviousTrackingState()
internal void set_PreviousTrackingState(TrackingState value)
public Pose get_PreviousPose()
internal void set_PreviousPose(Pose value)
}
public UnityEngine.Experimental.XR.SessionTrackingStateChangedEventArgs : ValueType {
internal XRSessionSubsystem m_Session
private TrackingState <NewState>k__BackingField
public XRSessionSubsystem SessionSubsystem
public TrackingState NewState
public XRSessionSubsystem get_SessionSubsystem()
public TrackingState get_NewState()
public void set_NewState(TrackingState value)
}
public UnityEngine.Experimental.XR.TrackableId : ValueType {
private TrackableId s_InvalidId
private ulong m_SubId1
private ulong m_SubId2
public TrackableId InvalidId
public string ToString()
public int GetHashCode()
public bool Equals(object obj)
public bool Equals(TrackableId other)
public bool op_Equality(TrackableId id1, TrackableId id2)
public bool op_Inequality(TrackableId id1, TrackableId id2)
public TrackableId get_InvalidId()
}
public UnityEngine.Experimental.XR.TrackableType : Enum {
public int value__
public TrackableType None
public TrackableType PlaneWithinPolygon
public TrackableType PlaneWithinBounds
public TrackableType PlaneWithinInfinity
public TrackableType PlaneEstimated
public TrackableType Planes
public TrackableType FeaturePoint
public TrackableType All
}
public UnityEngine.Experimental.XR.TrackingState : Enum {
public int value__
public TrackingState Unknown
public TrackingState Tracking
public TrackingState Unavailable
}
public UnityEngine.Experimental.XR.XRCameraSubsystem : IntegratedSubsystem`1<XRCameraSubsystemDescriptor> {
private Action`1<FrameReceivedEventArgs> FrameReceived
public int LastUpdatedFrame
public bool LightEstimationRequested
public Material Material
public Camera Camera
public int get_LastUpdatedFrame()
public bool get_LightEstimationRequested()
public void set_LightEstimationRequested(bool value)
public Material get_Material()
public void set_Material(Material value)
public Camera get_Camera()
public void set_Camera(Camera value)
public bool TryGetAverageBrightness(Single& averageBrightness)
public bool TryGetAverageColorTemperature(Single& averageColorTemperature)
public bool TryGetProjectionMatrix(Matrix4x4& projectionMatrix)
public bool TryGetDisplayMatrix(Matrix4x4& displayMatrix)
public bool TryGetTimestamp(Int64& timestampNs)
public bool TryGetShaderName(String& shaderName)
private bool Internal_TryGetShaderName(String& shaderName)
public void GetTextures(List`1<Texture2D> texturesOut)
private void GetTexturesAsList(List`1<Texture2D> textures)
private Texture2D[] GetTexturesAsFixedArray()
public void add_FrameReceived(Action`1<FrameReceivedEventArgs> value)
public void remove_FrameReceived(Action`1<FrameReceivedEventArgs> value)
private void InvokeFrameReceivedEvent()
}
public UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor : IntegratedSubsystemDescriptor`1<XRCameraSubsystem> {
public bool ProvidesAverageBrightness
public bool ProvidesAverageColorTemperature
public bool ProvidesProjectionMatrix
public bool ProvidesDisplayMatrix
public bool ProvidesTimestamp
public bool get_ProvidesAverageBrightness()
public bool get_ProvidesAverageColorTemperature()
public bool get_ProvidesProjectionMatrix()
public bool get_ProvidesDisplayMatrix()
public bool get_ProvidesTimestamp()
}
public UnityEngine.Experimental.XR.XRDepthSubsystem : IntegratedSubsystem`1<XRDepthSubsystemDescriptor> {
private Action`1<PointCloudUpdatedEventArgs> PointCloudUpdated
public int LastUpdatedFrame
public void add_PointCloudUpdated(Action`1<PointCloudUpdatedEventArgs> value)
public void remove_PointCloudUpdated(Action`1<PointCloudUpdatedEventArgs> value)
public int get_LastUpdatedFrame()
public void GetPoints(List`1<Vector3> pointsOut)
public void GetConfidence(List`1<float> confidenceOut)
private void InvokePointCloudUpdatedEvent()
private void Internal_GetPointCloudPointsAsList(List`1<Vector3> pointsOut)
private void Internal_GetPointCloudConfidenceAsList(List`1<float> confidenceOut)
private Vector3[] Internal_GetPointCloudPointsAsFixedArray()
private Single[] Internal_GetPointCloudConfidenceAsFixedArray()
}
public UnityEngine.Experimental.XR.XRDepthSubsystemDescriptor : IntegratedSubsystemDescriptor`1<XRDepthSubsystem> {
public bool SupportsFeaturePoints
public bool get_SupportsFeaturePoints()
}
public UnityEngine.Experimental.XR.XRExampleSubsystem : IntegratedSubsystem`1<XRExampleSubsystemDescriptor> {
public void PrintExample()
public bool GetBool()
}
public UnityEngine.Experimental.XR.XRExampleSubsystemDescriptor : IntegratedSubsystemDescriptor`1<XRExampleSubsystem> {
public bool supportsEditorMode
public bool disableBackbufferMSAA
public bool stereoscopicBackbuffer
public bool usePBufferEGL
public bool get_supportsEditorMode()
public bool get_disableBackbufferMSAA()
public bool get_stereoscopicBackbuffer()
public bool get_usePBufferEGL()
}
public UnityEngine.Experimental.XR.XRInputSubsystemDescriptor : IntegratedSubsystemDescriptor`1<XRInputSubsystem> {
public bool disablesLegacyInput
public bool get_disablesLegacyInput()
}
public UnityEngine.Experimental.XR.XRMeshSubsystem : IntegratedSubsystem`1<XRMeshSubsystemDescriptor> {
public bool TryGetMeshInfos(List`1<MeshInfo> meshInfosOut)
private bool GetMeshInfosAsList(List`1<MeshInfo> meshInfos)
private MeshInfo[] GetMeshInfosAsFixedArray()
public void GenerateMeshAsync(TrackableId meshId, Mesh mesh, MeshCollider meshCollider, MeshVertexAttributes attributes, Action`1<MeshGenerationResult> onMeshGenerationComplete)
private void InvokeMeshReadyDelegate(MeshGenerationResult result, Action`1<MeshGenerationResult> onMeshGenerationComplete)
private void GenerateMeshAsync_Injected(TrackableId& meshId, Mesh mesh, MeshCollider meshCollider, MeshVertexAttributes attributes, Action`1<MeshGenerationResult> onMeshGenerationComplete)
}
public UnityEngine.Experimental.XR.XRPlaneSubsystem : IntegratedSubsystem`1<XRPlaneSubsystemDescriptor> {
private Action`1<PlaneAddedEventArgs> PlaneAdded
private Action`1<PlaneUpdatedEventArgs> PlaneUpdated
private Action`1<PlaneRemovedEventArgs> PlaneRemoved
public int LastUpdatedFrame
public void add_PlaneAdded(Action`1<PlaneAddedEventArgs> value)
public void remove_PlaneAdded(Action`1<PlaneAddedEventArgs> value)
public void add_PlaneUpdated(Action`1<PlaneUpdatedEventArgs> value)
public void remove_PlaneUpdated(Action`1<PlaneUpdatedEventArgs> value)
public void add_PlaneRemoved(Action`1<PlaneRemovedEventArgs> value)
public void remove_PlaneRemoved(Action`1<PlaneRemovedEventArgs> value)
public int get_LastUpdatedFrame()
public bool TryGetPlane(TrackableId planeId, BoundedPlane& plane)
public void GetAllPlanes(List`1<BoundedPlane> planesOut)
public bool TryGetPlaneBoundary(TrackableId planeId, List`1<Vector3> boundaryOut)
private void InvokePlaneAddedEvent(BoundedPlane plane)
private void InvokePlaneUpdatedEvent(BoundedPlane plane)
private void InvokePlaneRemovedEvent(BoundedPlane removedPlane)
private BoundedPlane[] GetAllPlanesAsFixedArray()
private void GetAllPlanesAsList(List`1<BoundedPlane> planes)
private bool Internal_GetBoundaryAsList(TrackableId planeId, List`1<Vector3> boundaryOut)
private Vector3[] Internal_GetBoundaryAsFixedArray(TrackableId planeId)
private bool TryGetPlane_Injected(TrackableId& planeId, BoundedPlane& plane)
private bool Internal_GetBoundaryAsList_Injected(TrackableId& planeId, List`1<Vector3> boundaryOut)
private Vector3[] Internal_GetBoundaryAsFixedArray_Injected(TrackableId& planeId)
}
public UnityEngine.Experimental.XR.XRRaycastHit : ValueType {
private TrackableId <TrackableId>k__BackingField
private Pose <Pose>k__BackingField
private float <Distance>k__BackingField
private TrackableType <HitType>k__BackingField
public TrackableId TrackableId
public Pose Pose
public float Distance
public TrackableType HitType
public TrackableId get_TrackableId()
public void set_TrackableId(TrackableId value)
public Pose get_Pose()
public void set_Pose(Pose value)
public float get_Distance()
public void set_Distance(float value)
public TrackableType get_HitType()
public void set_HitType(TrackableType value)
}
public UnityEngine.Experimental.XR.XRRaycastSubsystem : IntegratedSubsystem`1<XRRaycastSubsystemDescriptor> {
public bool Raycast(Vector3 screenPoint, List`1<XRRaycastHit> hitResults, TrackableType trackableTypeMask)
public void Raycast(Ray ray, XRDepthSubsystem depthSubsystem, XRPlaneSubsystem planeSubsystem, List`1<XRRaycastHit> hitResults, TrackableType trackableTypeMask, float pointCloudRaycastAngleInDegrees)
private void Internal_RaycastAsList(Ray ray, float pointCloudRaycastAngleInDegrees, IntPtr depthSubsystem, IntPtr planeSubsystem, TrackableType trackableTypeMask, List`1<XRRaycastHit> hitResultsOut)
private XRRaycastHit[] Internal_RaycastAsFixedArray(Ray ray, float pointCloudRaycastAngleInDegrees, IntPtr depthSubsystem, IntPtr planeSubsystem, TrackableType trackableTypeMask)
private bool Internal_ScreenRaycastAsList(float screenX, float screenY, TrackableType hitMask, List`1<XRRaycastHit> hitResultsOut)
private XRRaycastHit[] Internal_ScreenRaycastAsFixedArray(float screenX, float screenY, TrackableType hitMask)
private void Internal_RaycastAsList_Injected(Ray& ray, float pointCloudRaycastAngleInDegrees, IntPtr depthSubsystem, IntPtr planeSubsystem, TrackableType trackableTypeMask, List`1<XRRaycastHit> hitResultsOut)
private XRRaycastHit[] Internal_RaycastAsFixedArray_Injected(Ray& ray, float pointCloudRaycastAngleInDegrees, IntPtr depthSubsystem, IntPtr planeSubsystem, TrackableType trackableTypeMask)
}
public UnityEngine.Experimental.XR.XRReferencePointSubsystem : IntegratedSubsystem`1<XRReferencePointSubsystemDescriptor> {
private Action`1<ReferencePointUpdatedEventArgs> ReferencePointUpdated
public int LastUpdatedFrame
public void add_ReferencePointUpdated(Action`1<ReferencePointUpdatedEventArgs> value)
public void remove_ReferencePointUpdated(Action`1<ReferencePointUpdatedEventArgs> value)
public int get_LastUpdatedFrame()
public bool TryAddReferencePoint(Vector3 position, Quaternion rotation, TrackableId& referencePointId)
public bool TryAddReferencePoint(Pose pose, TrackableId& referencePointId)
public bool TryRemoveReferencePoint(TrackableId referencePointId)
public bool TryGetReferencePoint(TrackableId referencePointId, ReferencePoint& referencePoint)
public void GetAllReferencePoints(List`1<ReferencePoint> referencePointsOut)
private void InvokeReferencePointUpdatedEvent(ReferencePoint updatedReferencePoint, TrackingState previousTrackingState, Pose previousPose)
private void Internal_GetAllReferencePointsAsList(List`1<ReferencePoint> referencePointsOut)
private ReferencePoint[] Internal_GetAllReferencePointsAsFixedArray()
private bool TryAddReferencePoint_Injected(Vector3& position, Quaternion& rotation, TrackableId& referencePointId)
private bool TryRemoveReferencePoint_Injected(TrackableId& referencePointId)
private bool TryGetReferencePoint_Injected(TrackableId& referencePointId, ReferencePoint& referencePoint)
}
public UnityEngine.Experimental.XR.XRSessionSubsystem : IntegratedSubsystem`1<XRSessionSubsystemDescriptor> {
private Action`1<SessionTrackingStateChangedEventArgs> TrackingStateChanged
public TrackingState TrackingState
public int LastUpdatedFrame
public void add_TrackingStateChanged(Action`1<SessionTrackingStateChangedEventArgs> value)
public void remove_TrackingStateChanged(Action`1<SessionTrackingStateChangedEventArgs> value)
public TrackingState get_TrackingState()
public int get_LastUpdatedFrame()
private void InvokeTrackingStateChangedEvent(TrackingState newState)
}
internal UnityEngine.XR.AvailableTrackingData : Enum {
public int value__
public AvailableTrackingData None
public AvailableTrackingData PositionAvailable
public AvailableTrackingData RotationAvailable
public AvailableTrackingData VelocityAvailable
public AvailableTrackingData AngularVelocityAvailable
public AvailableTrackingData AccelerationAvailable
public AvailableTrackingData AngularAccelerationAvailable
}
public UnityEngine.XR.HapticCapabilities : ValueType {
private UInt32 m_NumChannels
private bool m_SupportsImpulse
private bool m_SupportsBuffer
private UInt32 m_BufferFrequencyHz
public UInt32 numChannels
public bool supportsImpulse
public bool supportsBuffer
public UInt32 bufferFrequencyHz
public UInt32 get_numChannels()
internal void set_numChannels(UInt32 value)
public bool get_supportsImpulse()
internal void set_supportsImpulse(bool value)
public bool get_supportsBuffer()
internal void set_supportsBuffer(bool value)
public UInt32 get_bufferFrequencyHz()
internal void set_bufferFrequencyHz(UInt32 value)
public bool Equals(object obj)
public bool Equals(HapticCapabilities other)
public int GetHashCode()
public bool op_Equality(HapticCapabilities a, HapticCapabilities b)
public bool op_Inequality(HapticCapabilities a, HapticCapabilities b)
}
public UnityEngine.XR.InputDevice : ValueType {
private ulong m_DeviceId
public bool IsValid
internal void .ctor(ulong deviceId)
public bool get_IsValid()
public bool SendHapticImpulse(UInt32 channel, float amplitude, float duration)
public bool SendHapticBuffer(UInt32 channel, Byte[] buffer)
public bool TryGetHapticCapabilities(HapticCapabilities& capabilities)
public void StopHaptics()
public bool Equals(object obj)
public bool Equals(InputDevice other)
public int GetHashCode()
public bool op_Equality(InputDevice a, InputDevice b)
public bool op_Inequality(InputDevice a, InputDevice b)
}
public UnityEngine.XR.InputDevices : object {
public InputDevice GetDeviceAtXRNode(XRNode node)
}
public UnityEngine.XR.InputTracking : object {
private Action`1<XRNodeState> trackingAcquired
private Action`1<XRNodeState> trackingLost
private Action`1<XRNodeState> nodeAdded
private Action`1<XRNodeState> nodeRemoved
public bool disablePositionalTracking
public void add_trackingAcquired(Action`1<XRNodeState> value)
public void remove_trackingAcquired(Action`1<XRNodeState> value)
public void add_trackingLost(Action`1<XRNodeState> value)
public void remove_trackingLost(Action`1<XRNodeState> value)
public void add_nodeAdded(Action`1<XRNodeState> value)
public void remove_nodeAdded(Action`1<XRNodeState> value)
public void add_nodeRemoved(Action`1<XRNodeState> value)
public void remove_nodeRemoved(Action`1<XRNodeState> value)
private void InvokeTrackingEvent(TrackingStateEventType eventType, XRNode nodeType, long uniqueID, bool tracked)
public Vector3 GetLocalPosition(XRNode node)
public Quaternion GetLocalRotation(XRNode node)
public void Recenter()
public string GetNodeName(ulong uniqueId)
public void GetNodeStates(List`1<XRNodeState> nodeStates)
private void GetNodeStates_Internal(List`1<XRNodeState> nodeStates)
private XRNodeState[] GetNodeStates_Internal_WinRT()
public bool get_disablePositionalTracking()
public void set_disablePositionalTracking(bool value)
internal bool SendHapticImpulse(ulong deviceId, UInt32 channel, float amplitude, float duration)
internal bool SendHapticBuffer(ulong deviceId, UInt32 channel, Byte[] buffer)
internal bool TryGetHapticCapabilities(ulong deviceId, HapticCapabilities& capabilities)
internal void StopHaptics(ulong deviceId)
internal bool IsDeviceValid(ulong deviceId)
internal ulong GetDeviceIdAtXRNode(XRNode node)
private void GetLocalPosition_Injected(XRNode node, Vector3& ret)
private void GetLocalRotation_Injected(XRNode node, Quaternion& ret)
}
public UnityEngine.XR.XRNode : Enum {
public int value__
public XRNode LeftEye
public XRNode RightEye
public XRNode CenterEye
public XRNode Head
public XRNode LeftHand
public XRNode RightHand
public XRNode GameController
public XRNode TrackingReference
public XRNode HardwareTracker
}
public UnityEngine.XR.XRNodeState : ValueType {
private XRNode m_Type
private AvailableTrackingData m_AvailableFields
private Vector3 m_Position
private Quaternion m_Rotation
private Vector3 m_Velocity
private Vector3 m_AngularVelocity
private Vector3 m_Acceleration
private Vector3 m_AngularAcceleration
private int m_Tracked
private ulong m_UniqueID
public ulong uniqueID
public XRNode nodeType
public bool tracked
public Vector3 position
public Quaternion rotation
public Vector3 velocity
public Vector3 angularVelocity
public Vector3 acceleration
public Vector3 angularAcceleration
public ulong get_uniqueID()
public void set_uniqueID(ulong value)
public XRNode get_nodeType()
public void set_nodeType(XRNode value)
public bool get_tracked()
public void set_tracked(bool value)
public void set_position(Vector3 value)
public void set_rotation(Quaternion value)
public void set_velocity(Vector3 value)
public void set_angularVelocity(Vector3 value)
public void set_acceleration(Vector3 value)
public void set_angularAcceleration(Vector3 value)
public bool TryGetPosition(Vector3& position)
public bool TryGetRotation(Quaternion& rotation)
public bool TryGetVelocity(Vector3& velocity)
public bool TryGetAngularVelocity(Vector3& angularVelocity)
public bool TryGetAcceleration(Vector3& acceleration)
public bool TryGetAngularAcceleration(Vector3& angularAcceleration)
private bool TryGet(T inValue, AvailableTrackingData availabilityFlag, T& outValue)
}
